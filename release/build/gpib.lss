
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000165c  00800100  0001d26c  0001d300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d26c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a60  0080175c  0080175c  0001e95c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e95c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016c8  00000000  00000000  0001e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000284a9  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000060d5  00000000  00000000  00048521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00011ff4  00000000  00000000  0004e5f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004ff4  00000000  00000000  000605ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000481a  00000000  00000000  000655e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023608  00000000  00000000  00069dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016b0  00000000  00000000  0008d402  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
0080175c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002d8 l     O .text	0000001e __c.3631
000002f6 l     O .text	0000001d __c.3626
0080175c l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006f8a l     F .text	0000002a IS_Leap
00800383 l     O .data	00000018 __days
008017d4 l     O .bss	00000016 t.3685
008017ea l     O .bss	00000002 p.3686
008017b6 l     O .bss	00000008 ts.3764
008017be l     O .bss	00000016 t.3697
0080039b l     O .data	0000001a __days_sum
0000082f l     O .text	00000012 __c.3804
0000081e l     O .text	00000011 __c.3806
0000080d l     O .text	00000011 __c.3808
000007fb l     O .text	00000012 __c.3810
000007ea l     O .text	00000011 __c.3812
000007d3 l     O .text	00000017 __c.3814
00000841 l     O .text	00000021 __c.3783
00000862 l     O .text	0000001d __c.3658
0080180c l     O .bss	00000020 buf.3663
008017ec l     O .bss	00000020 buf.3675
000007c1 l     O .text	00000012 __c.3860
000007ac l     O .text	00000015 __c.3862
00000795 l     O .text	00000017 __c.3864
0000077b l     O .text	0000001a __c.3866
00000757 l     O .text	00000024 __c.3868
00000745 l     O .text	00000012 __c.3875
00000734 l     O .text	00000011 __c.3877
00000723 l     O .text	00000011 __c.3879
00000711 l     O .text	00000012 __c.3881
00000700 l     O .text	00000011 __c.3883
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d71a l     F .text	00000004 xchg_spi
0000d71e l     F .text	0000000c deselect
0000d72a l     F .text	00000046 rcvr_datablock
0000d794 l     F .text	00000044 select
0000087f l     O .text	00000010 __c.3626
0000d7d8 l     F .text	00000086 send_cmd
0000d85e l     F .text	0000004e xmit_datablock
00801831 l     O .bss	00000001 CardType
00801833 l     O .bss	00000001 Timer1
00801832 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ba1 l     O .data	00000014 CSWTCH.97
00000cda l     O .text	00000018 __c.3603
00000cc2 l     O .text	00000018 __c.3610
0000efb8 l     F .text	0000001a _fprintf_putc
0080193d l     O .bss	0000002e _dp
0080183e l     O .bss	000000ff _de
00000cae l     O .text	00000008 __c.3926
00000caa l     O .text	00000004 __c.3928
00000cb6 l     O .text	0000000c __c.3681
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000f5c l     O .text	0000000c __c.3627
00000e96 l     O .text	000000c6 __c.3629
00000e17 l     O .text	0000000c __c.3690
00000e07 l     O .text	00000010 __c.3692
00000dfa l     O .text	0000000d __c.3694
00000dea l     O .text	00000010 __c.3696
00000ddd l     O .text	0000000d __c.3698
00000dc1 l     O .text	0000000f __c.3703
00000dd0 l     O .text	0000000d __c.3700
00000dae l     O .text	00000013 __c.3707
00800180 l     O .data	00000002 _pagesize
00000da7 l     O .text	00000007 __c.3717
00000da5 l     O .text	00000002 __c.3719
00000e30 l     O .text	00000010 __c.3672
00000e2e l     O .text	00000002 __c.3677
00000e23 l     O .text	0000000b __c.3679
00000d93 l     O .text	00000012 __c.3731
00000d8f l     O .text	00000004 __c.3733
00000d75 l     O .text	0000001a __c.3738
00000d54 l     O .text	00000021 __c.3751
00000d46 l     O .text	0000000e __c.3753
00000d30 l     O .text	00000016 __c.3755
00000cfd l     O .text	00000023 __c.3763
00000d20 l     O .text	00000010 __c.3760
00000cf2 l     O .text	0000000b __c.3767
00000e85 l     O .text	00000011 __c.3645
00000e74 l     O .text	00000011 __c.3653
00000e70 l     O .text	00000004 __c.3656
00000e5f l     O .text	00000011 __c.3658
00000e51 l     O .text	0000000e __c.3660
00000e40 l     O .text	00000011 __c.3662
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000012a9 l     O .text	00000011 __c.4229
00001296 l     O .text	00000013 __c.4234
00001270 l     O .text	00000026 __c.4239
00001255 l     O .text	0000001b __c.4241
0000122e l     O .text	00000027 __c.4246
00001213 l     O .text	0000001b __c.4248
00001207 l     O .text	0000000c __c.4266
000011d9 l     O .text	0000002e __c.4278
00001109 l     O .text	0000001a __c.4315
00001123 l     O .text	0000001b __c.4311
0000113e l     O .text	0000001b __c.4308
00001159 l     O .text	00000028 __c.4303
00001181 l     O .text	0000001a __c.4299
000011ba l     O .text	0000001f __c.4293
0000119b l     O .text	0000001f __c.4296
000010f6 l     O .text	00000013 __c.4319
000010b5 l     O .text	00000009 __c.4367
000010af l     O .text	00000006 __c.4369
000010a4 l     O .text	0000000b __c.4373
00001099 l     O .text	0000000b __c.4375
0000108e l     O .text	0000000b __c.4377
000010dc l     O .text	0000001a __c.4335
000010be l     O .text	0000001e __c.4338
00001075 l     O .text	00000019 __c.4393
00001048 l     O .text	0000002d __c.4396
00001021 l     O .text	00000027 __c.4400
00001007 l     O .text	0000001a __c.4410
00000fdf l     O .text	00000028 __c.4415
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000155c l     O .text	00000012 __c.4236
0000154b l     O .text	00000011 __c.4238
00001532 l     O .text	00000019 __c.4240
00001518 l     O .text	0000001a __c.4286
000014ed l     O .text	0000002b __c.4288
000014d6 l     O .text	00000017 __c.4290
000014ca l     O .text	0000000c __c.4292
000014c4 l     O .text	00000006 __c.4296
000014b2 l     O .text	00000012 __c.4298
000014ab l     O .text	00000007 __c.4303
000014a0 l     O .text	0000000b __c.4305
00001499 l     O .text	00000007 __c.4307
0000148c l     O .text	0000000d __c.4309
0000147b l     O .text	00000011 __c.4311
0000145a l     O .text	00000021 __c.4338
00001440 l     O .text	0000001a __c.4340
00001428 l     O .text	00000018 __c.4345
00001410 l     O .text	00000018 __c.4347
00001409 l     O .text	00000007 __c.4349
00001402 l     O .text	00000007 __c.4351
000013fb l     O .text	00000007 __c.4353
000013ef l     O .text	0000000c __c.4355
000013e2 l     O .text	0000000d __c.4357
000013db l     O .text	00000007 __c.4359
000013ba l     O .text	00000021 __c.4361
00001367 l     O .text	00000007 __c.4381
00001356 l     O .text	00000011 __c.4383
00001344 l     O .text	00000012 __c.4385
00001330 l     O .text	00000014 __c.4387
00001320 l     O .text	00000010 __c.4389
00001314 l     O .text	0000000c __c.4391
00001303 l     O .text	00000011 __c.4396
000012f1 l     O .text	00000012 __c.4398
000012cb l     O .text	00000026 __c.4400
000012ba l     O .text	00000011 __c.4405
000013b3 l     O .text	00000007 __c.4366
000013b1 l     O .text	00000002 __c.4368
0000139f l     O .text	00000012 __c.4370
0000138e l     O .text	00000011 __c.4372
0000137a l     O .text	00000014 __c.4374
0000136e l     O .text	0000000c __c.4376
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001dd7 l     O .text	00000015 __c.4455
00001dcb l     O .text	0000000c __c.4466
00001dc7 l     O .text	00000004 __c.4476
00001a91 l     O .text	00000012 __c.4620
00001a73 l     O .text	00000002 __c.4629
00001a75 l     O .text	00000009 __c.4627
00001a7e l     O .text	0000000a __c.4625
00001a88 l     O .text	00000009 __c.4623
00001a71 l     O .text	00000002 __c.4634
00001a51 l     O .text	00000020 __c.4643
000019d6 l     O .text	00000002 __c.4658
00001a0b l     O .text	0000000a __c.4652
000019ec l     O .text	0000001f __c.4654
000019d8 l     O .text	00000014 __c.4656
00001a48 l     O .text	00000009 __c.4646
00001a29 l     O .text	0000001f __c.4648
00001a15 l     O .text	00000014 __c.4650
000019d4 l     O .text	00000002 __c.4663
000019af l     O .text	00000025 __c.4702
00001976 l     O .text	00000039 __c.4704
00001941 l     O .text	00000035 __c.4706
0000190c l     O .text	00000035 __c.4708
000018d4 l     O .text	00000038 __c.4710
000018a9 l     O .text	0000002b __c.4712
00001885 l     O .text	00000024 __c.4725
00001863 l     O .text	00000022 __c.4733
00801983 l     O .bss	00000002 stack_ind
00801979 l     O .bss	0000000a stack_p
00001844 l     O .text	0000001f __c.4769
000017d7 l     O .text	00000037 __c.4784
0000180e l     O .text	00000036 __c.4782
00001dba l     O .text	0000000d __c.4495
00001b09 l     O .text	00000022 __c.4606
00001b2b l     O .text	00000030 __c.4603
00001b5b l     O .text	0000002f __c.4594
00001b8a l     O .text	00000030 __c.4591
00001bba l     O .text	0000002e __c.4582
00001be8 l     O .text	0000002e __c.4574
00001d9c l     O .text	0000001e __c.4497
00001d7a l     O .text	00000022 __c.4500
00001d58 l     O .text	00000022 __c.4511
00001d2e l     O .text	0000002a __c.4515
00001cfd l     O .text	00000031 __c.4518
00001cd0 l     O .text	0000002d __c.4528
00001ca2 l     O .text	0000002e __c.4536
00001c74 l     O .text	0000002e __c.4539
00001c42 l     O .text	00000032 __c.4547
00001c16 l     O .text	0000002c __c.4564
00001ae7 l     O .text	00000022 __c.4610
00001aca l     O .text	0000001d __c.4612
00001aa3 l     O .text	00000027 __c.4614
00001757 l     O .text	0000001a __c.4809
0000174f l     O .text	00000008 __c.4811
00001771 l     O .text	00000022 __c.4807
0000179b l     O .text	0000001a __c.4803
00001793 l     O .text	00000008 __c.4805
000017b5 l     O .text	00000022 __c.4801
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019a5 l     O .bss	00000005 B.4241
00801992 l     O .bss	00000013 B.4245
00801985 l     O .bss	0000000d B.4249
0000245d l     O .text	00000005 __c.4352
00002452 l     O .text	0000000b __c.4354
0000243e l     O .text	00000014 __c.4364
00002423 l     O .text	0000001b __c.4366
00002412 l     O .text	00000011 __c.4374
000023ef l     O .text	00000023 __c.4376
000023d2 l     O .text	0000001d __c.4378
000023b3 l     O .text	0000001f __c.4380
0000239b l     O .text	00000018 __c.4385
00002381 l     O .text	0000001a __c.4390
0000235b l     O .text	00000026 __c.4399
00002342 l     O .text	00000019 __c.4401
00002246 l     O .text	00000025 __c.4423
0000226b l     O .text	0000001a __c.4421
00002285 l     O .text	00000016 __c.4419
0000229b l     O .text	0000000e __c.4417
000022a9 l     O .text	0000001c __c.4415
000022c5 l     O .text	0000001d __c.4413
0000232c l     O .text	00000016 __c.4403
00002313 l     O .text	00000019 __c.4406
000022fb l     O .text	00000018 __c.4408
000022e2 l     O .text	00000019 __c.4411
00002225 l     O .text	00000021 __c.4425
0000220f l     O .text	00000016 __c.4427
000021f2 l     O .text	0000001d __c.4429
000021d6 l     O .text	0000001c __c.4431
000021c5 l     O .text	00000011 __c.4433
000021a7 l     O .text	0000001e __c.4435
00002188 l     O .text	0000001f __c.4437
0000216d l     O .text	0000001b __c.4439
00002154 l     O .text	00000019 __c.4441
0000213d l     O .text	00000017 __c.4443
0000211a l     O .text	00000023 __c.4445
000020fa l     O .text	00000020 __c.4447
000020c2 l     O .text	00000038 __c.4450
00001f7f l     O .text	00000020 __c.4483
00001f6b l     O .text	00000014 __c.4485
00002502 l     O .text	00000029 __c.4313
000024b5 l     O .text	00000026 __c.4321
000024db l     O .text	00000014 __c.4319
000024ef l     O .text	00000013 __c.4315
0000248d l     O .text	00000028 __c.4325
00002462 l     O .text	0000002b __c.4327
00001f51 l     O .text	0000001a __c.4492
00001f3e l     O .text	00000013 __c.4494
0000260b l     O .text	00000013 __c.4255
00001f32 l     O .text	0000000c __c.4508
00001f1f l     O .text	00000013 __c.4515
00001f10 l     O .text	0000000f __c.4517
000020af l     O .text	00000013 __c.4459
00002096 l     O .text	00000019 __c.4461
00002071 l     O .text	00000025 __c.4464
00002054 l     O .text	0000001d __c.4467
00002036 l     O .text	0000001e __c.4469
0000200f l     O .text	00000027 __c.4471
00001ffb l     O .text	00000014 __c.4473
00001fdb l     O .text	00000020 __c.4475
00001f9f l     O .text	0000003c __c.4478
00001eed l     O .text	00000023 __c.4531
000025c7 l     O .text	00000028 __c.4288
000025a9 l     O .text	0000001e __c.4290
00002578 l     O .text	00000019 __c.4294
00002591 l     O .text	00000018 __c.4292
00002553 l     O .text	00000025 __c.4299
0000252b l     O .text	00000028 __c.4301
000025ef l     O .text	0000001c __c.4271
00001ed7 l     O .text	00000016 __c.4536
00001ec1 l     O .text	00000016 __c.4538
00001eac l     O .text	00000015 __c.4540
00001e9d l     O .text	0000000f __c.4542
00001e89 l     O .text	00000014 __c.4544
00001e55 l     O .text	00000034 __c.4546
00001e21 l     O .text	00000034 __c.4548
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019f7 l     O .bss	00000002 lcd_display_time
00004703 l     O .text	00000030 __c.4453
000046e4 l     O .text	0000001f __c.4455
000046c7 l     O .text	0000001d __c.4457
000046b7 l     O .text	00000010 __c.4459
00004690 l     O .text	00000027 __c.4461
00004676 l     O .text	0000001a __c.4463
0000465c l     O .text	0000001a __c.4465
0000465a l     O .text	00000002 __c.4467
00004644 l     O .text	00000016 __c.4481
00004626 l     O .text	0000001e __c.4487
00004610 l     O .text	00000016 __c.4489
0000460a l     O .text	00000006 __c.4491
00004604 l     O .text	00000006 __c.4493
000045ea l     O .text	0000001a __c.4495
000045e4 l     O .text	00000006 __c.4502
000045de l     O .text	00000006 __c.4504
000045bc l     O .text	00000022 __c.4511
0001c13a l     F .text	00000170 user_task.part.0
000045b9 l     O .text	00000003 __c.4522
000045b5 l     O .text	00000004 __c.4524
000045a9 l     O .text	0000000c __c.4526
000045a2 l     O .text	00000007 __c.4535
00004591 l     O .text	00000011 __c.4537
0000456a l     O .text	00000027 __c.4539
0000454b l     O .text	0000001f __c.4541
0000452e l     O .text	0000001d __c.4543
0000451e l     O .text	00000010 __c.4545
000044f7 l     O .text	00000027 __c.4547
000044dd l     O .text	0000001a __c.4549
000044c3 l     O .text	0000001a __c.4551
000044ad l     O .text	00000016 __c.4553
00004497 l     O .text	00000016 __c.4555
00004485 l     O .text	00000012 __c.4557
00004476 l     O .text	0000000f __c.4559
00004448 l     O .text	0000002e __c.4561
00004430 l     O .text	00000018 __c.4563
0000441f l     O .text	00000011 __c.4565
00004409 l     O .text	00000016 __c.4567
000043f4 l     O .text	00000015 __c.4569
000043e2 l     O .text	00000012 __c.4571
000043ca l     O .text	00000018 __c.4573
000043b5 l     O .text	00000015 __c.4575
0000439f l     O .text	00000016 __c.4577
00004389 l     O .text	00000016 __c.4579
00004378 l     O .text	00000011 __c.4581
00004372 l     O .text	00000006 __c.4583
0000436c l     O .text	00000006 __c.4585
00004352 l     O .text	0000001a __c.4587
0000433e l     O .text	00000014 __c.4589
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000053f l     O .text	00000018 __c.3602
00000526 l     O .text	00000019 __c.3604
00000510 l     O .text	00000016 __c.3606
000004f4 l     O .text	0000001c __c.3649
00801763 l     O .bss	00000001 i2c_init_status
000004dd l     O .text	00000017 __c.3655
00005e0c l     F .text	00000014 i2c_next
000004d7 l     O .text	00000006 __c.3705
000004c9 l     O .text	0000000e __c.3707
000004bf l     O .text	0000000a __c.3709
000004b3 l     O .text	0000000c __c.3711
000004a1 l     O .text	00000012 __c.3713
0000048f l     O .text	00000012 __c.3715
0000047c l     O .text	00000013 __c.3717
0000047a l     O .text	00000002 __c.3719
00000467 l     O .text	00000013 __c.3724
00000453 l     O .text	00000014 __c.3726
00000449 l     O .text	0000000a __c.3728
00000447 l     O .text	00000002 __c.3730
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000634 l     O .text	00000020 __c.3595
0000060e l     O .text	00000026 __c.3638
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007efe l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000907e l     F .text	0000002a ld_dword
000090a8 l     F .text	0000000c st_dword
000090b4 l     F .text	00000012 mem_set
000090c6 l     F .text	0000001e mem_cmp
000090e4 l     F .text	0000010c tchar2uni
000091f0 l     F .text	00000050 clst2sect
00009240 l     F .text	00000078 clmt_clust
000092b8 l     F .text	0000001e sum_sfn
000092d6 l     F .text	00000058 get_ldnumber
0080182c l     O .bss	00000001 CurrVol
0000932e l     F .text	00000058 validate
00009386 l     F .text	00000016 mem_cpy.part.0
0000939c l     F .text	0000015a put_utf
000094f6 l     F .text	00000220 get_fileinfo
00009716 l     F .text	0000002a ld_clust.isra.4
00009740 l     F .text	0000001a st_clust.isra.5
0000975a l     F .text	000000a6 sync_window.part.6
00009800 l     F .text	000000e4 sync_fs
000098e4 l     F .text	00000150 dir_clear
00009a34 l     F .text	00000076 move_window
00009aaa l     F .text	00000080 check_fs
00009b2a l     F .text	000004b4 mount_volume
0080182f l     O .bss	00000002 FatFs
0080182d l     O .bss	00000002 Fsid
00009fde l     F .text	000001f6 put_fat
0000a1d4 l     F .text	00000168 get_fat.isra.10
0000a33c l     F .text	00000182 dir_sdi
0000a4be l     F .text	0000024c create_chain
0000a70a l     F .text	00000122 remove_chain
0000a82c l     F .text	000001d0 dir_next
0000a9fc l     F .text	00000072 dir_alloc
0000aa6e l     F .text	00000192 dir_read
008004e6 l     O .data	0000000d LfnOfs
0000ac00 l     F .text	00000090 dir_remove
0000ac90 l     F .text	0000021c dir_find
0000aeac l     F .text	0000031c dir_register
0000b1c8 l     F .text	00000462 follow_path
00800466 l     O .data	00000080 ExCvt
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008007a1 l     O .data	00000100 uc437
008004f3 l     O .data	000000bc cvt2.1843
008005af l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000e188 l     F .text	00000048 mmc_task
0000093d l     O .text	0000001c __c.3603
00000930 l     O .text	0000000d __c.3631
00000920 l     O .text	00000010 __c.3644
00801834 l     O .bss	00000002 mmc_init_flag
00000900 l     O .text	00000020 __c.3646
000008ed l     O .text	00000013 __c.3648
000008e1 l     O .text	0000000c __c.3650
000008d0 l     O .text	00000011 __c.3652
000008b2 l     O .text	0000001e __c.3655
0000089d l     O .text	00000015 __c.3657
0000088f l     O .text	0000000e __c.3659
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b4d l     O .text	00000007 __c.3605
008008c5 l     O .data	00000008 CSWTCH.25
00000b3c l     O .text	00000011 __c.3641
00000b1e l     O .text	0000001e __c.3643
00000aff l     O .text	0000001f __c.3645
00000ae1 l     O .text	0000001e __c.3647
00000ac3 l     O .text	0000001e __c.3649
00000aa4 l     O .text	0000001f __c.3651
00000a85 l     O .text	0000001f __c.3653
00000a66 l     O .text	0000001f __c.3655
00000a47 l     O .text	0000001f __c.3657
00000a28 l     O .text	0000001f __c.3659
00000a0a l     O .text	0000001e __c.3661
000009e5 l     O .text	00000025 __c.3663
00000998 l     O .text	0000004d __c.3665
0000097d l     O .text	0000001b __c.3671
0000095b l     O .text	00000022 __c.3673
00000959 l     O .text	00000002 __c.3675
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000c9e l     O .text	0000000c __c.3596
00000c22 l     O .text	0000007c __c.3598
00000b92 l     O .text	0000000e __c.3637
00000b69 l     O .text	00000029 __c.3641
00000b54 l     O .text	00000015 __c.3643
00000bf2 l     O .text	00000020 __c.3616
00000be2 l     O .text	00000010 __c.3618
00000bce l     O .text	00000014 __c.3620
00000bc0 l     O .text	0000000e __c.3622
00000ba0 l     O .text	00000020 __c.3624
00000c12 l     O .text	00000010 __c.3608
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001744 l     O .text	0000000b __c.4421
0000157b l     O .text	000001c9 __c.4423
0000156e l     O .text	0000000d __c.4431
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001dfd l     O .text	00000007 __c.3650
00001e04 l     O .text	0000001d __c.3646
00001dec l     O .text	00000011 __c.3652
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0001631e l     F .text	000000ac amigo_overflow_check
00002db9 l     O .text	00000019 __c.4178
000163ca l     F .text	000000e8 amigo_chs_to_logical
00002d66 l     O .text	0000002b __c.4171
00002e39 l     O .text	00000018 __c.4148
00002e1b l     O .text	0000001e __c.4154
00002e01 l     O .text	0000001a __c.4156
00002dec l     O .text	00000015 __c.4162
00002dd2 l     O .text	0000001a __c.4164
00002d91 l     O .text	00000028 __c.4201
00002d56 l     O .text	00000010 __c.4212
00002d41 l     O .text	00000015 __c.4216
00002d2f l     O .text	00000012 __c.4222
00002d15 l     O .text	0000001a __c.4228
00002d03 l     O .text	00000012 __c.4235
00002ce4 l     O .text	0000001f __c.4237
00002cca l     O .text	0000001a __c.4244
00002cbd l     O .text	0000000d __c.4246
00002cae l     O .text	0000000f __c.4259
00002c47 l     O .text	00000067 __c.4266
00002be0 l     O .text	00000067 __c.4268
00002b79 l     O .text	00000067 __c.4270
00002b14 l     O .text	00000065 __c.4272
00002ac4 l     O .text	00000050 __c.4277
00002a74 l     O .text	00000050 __c.4279
00002a24 l     O .text	00000050 __c.4281
000029d3 l     O .text	00000051 __c.4283
000029a1 l     O .text	00000032 __c.4295
0000297f l     O .text	00000022 __c.4297
0000295e l     O .text	00000021 __c.4299
0000293d l     O .text	00000021 __c.4301
0000290e l     O .text	0000002f __c.4303
000028ee l     O .text	00000020 __c.4306
000028da l     O .text	00000014 __c.4309
000028c6 l     O .text	00000014 __c.4312
0000289d l     O .text	00000029 __c.4314
0000287c l     O .text	00000021 __c.4316
0000286c l     O .text	00000010 __c.4319
0000284a l     O .text	00000022 __c.4321
0000282e l     O .text	0000001c __c.4323
00002805 l     O .text	00000029 __c.4325
000027e5 l     O .text	00000020 __c.4327
000027ba l     O .text	0000002b __c.4329
0000279b l     O .text	0000001f __c.4331
0000278b l     O .text	00000010 __c.4334
00002759 l     O .text	00000032 __c.4339
00002739 l     O .text	00000020 __c.4343
00002718 l     O .text	00000021 __c.4346
000026f9 l     O .text	0000001f __c.4349
000026d7 l     O .text	00000022 __c.4352
000026bb l     O .text	0000001c __c.4355
0000269b l     O .text	00000020 __c.4358
00002672 l     O .text	00000029 __c.4363
00002647 l     O .text	0000002b __c.4366
0000261e l     O .text	00000029 __c.4369
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002e8e l     O .text	00000021 __c.4135
00002ebd l     O .text	00000015 __c.4127
00002eaf l     O .text	0000000e __c.4129
00002ef4 l     O .text	00000022 __c.4117
00002ede l     O .text	00000016 __c.4119
00002ed2 l     O .text	0000000c __c.4121
00002e87 l     O .text	00000007 __c.4141
00002e6b l     O .text	0000001c __c.4146
00002e51 l     O .text	0000001a __c.4148
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004334 l     O .text	0000000a __c.3854
0000416b l     O .text	000001c9 __c.3856
00004121 l     O .text	00000029 __c.3875
00004109 l     O .text	00000018 __c.3880
000040e4 l     O .text	00000025 __c.3892
000040cb l     O .text	00000019 __c.3898
000040aa l     O .text	00000021 __c.3905
0000406e l     O .text	0000003c __c.3914
00004031 l     O .text	0000003d __c.3923
008019d7 l     O .bss	00000020 _lif_ctime_buf.4026
008019b7 l     O .bss	00000020 _timestr.4031
0000402c l     O .text	00000005 __c.4046
00004012 l     O .text	0000001a __c.4048
00003ff5 l     O .text	0000001d __c.4050
00003fd8 l     O .text	0000001d __c.4052
00003fbb l     O .text	0000001d __c.4054
00003f9e l     O .text	0000001d __c.4056
00003f81 l     O .text	0000001d __c.4058
00003f64 l     O .text	0000001d __c.4060
00003f47 l     O .text	0000001d __c.4062
00003f2a l     O .text	0000001d __c.4064
00003f10 l     O .text	0000001a __c.4066
00003ef4 l     O .text	0000001c __c.4068
00003ed7 l     O .text	0000001d __c.4070
00003eba l     O .text	0000001d __c.4072
00003e9e l     O .text	0000001c __c.4074
00003e82 l     O .text	0000001c __c.4076
00003e68 l     O .text	0000001a __c.4078
00003e4e l     O .text	0000001a __c.4080
00003e32 l     O .text	0000001c __c.4082
00003e16 l     O .text	0000001c __c.4084
00003df9 l     O .text	0000001d __c.4086
00003ddc l     O .text	0000001d __c.4088
00003dbf l     O .text	0000001d __c.4090
00003da3 l     O .text	0000001c __c.4092
00003d89 l     O .text	0000001a __c.4094
00003d87 l     O .text	00000002 __c.4096
00003d68 l     O .text	0000001f __c.4103
00003d2f l     O .text	00000039 __c.4105
00003d17 l     O .text	00000018 __c.4107
00003cde l     O .text	00000039 __c.4109
00003ca5 l     O .text	00000039 __c.4111
00003c80 l     O .text	00000025 __c.4113
00003c51 l     O .text	0000002f __c.4115
00003c25 l     O .text	0000002c __c.4117
00003c04 l     O .text	00000021 __c.4123
00003bc0 l     O .text	00000044 __c.4125
00003b7f l     O .text	00000041 __c.4127
00003b51 l     O .text	0000002e __c.4129
00003b06 l     O .text	0000004b __c.4131
00003abb l     O .text	0000004b __c.4133
00003a90 l     O .text	0000002b __c.4135
00003a64 l     O .text	0000002c __c.4137
000039a1 l     O .text	0000003a __c.4192
00003981 l     O .text	00000020 __c.4201
00003934 l     O .text	0000004d __c.4226
00003a0f l     O .text	00000055 __c.4153
00003a02 l     O .text	0000000d __c.4155
000039f5 l     O .text	0000000d __c.4163
000039e8 l     O .text	0000000d __c.4168
000039db l     O .text	0000000d __c.4173
000038fc l     O .text	00000038 __c.4238
000038d3 l     O .text	00000029 __c.4240
00003882 l     O .text	00000051 __c.4243
00003843 l     O .text	0000003f __c.4256
0000380d l     O .text	00000036 __c.4258
000037da l     O .text	00000033 __c.4260
000037a7 l     O .text	00000033 __c.4262
00003790 l     O .text	00000017 __c.4272
00003750 l     O .text	00000040 __c.4274
00003704 l     O .text	0000004c __c.4277
000036d4 l     O .text	00000030 __c.4279
000036d2 l     O .text	00000002 __c.4282
000036c6 l     O .text	0000000c __c.4284
000036b9 l     O .text	0000000d __c.4286
000036a8 l     O .text	00000011 __c.4288
00003695 l     O .text	00000013 __c.4290
00003682 l     O .text	00000013 __c.4292
0000366f l     O .text	00000013 __c.4294
00003648 l     O .text	00000027 __c.4301
00003623 l     O .text	00000025 __c.4303
000035ea l     O .text	00000039 __c.4317
000035c6 l     O .text	00000024 __c.4334
000035b8 l     O .text	0000000e __c.4351
000035aa l     O .text	0000000e __c.4356
0000359c l     O .text	0000000e __c.4358
00003569 l     O .text	00000033 __c.4372
0000353b l     O .text	0000002e __c.4374
0000350c l     O .text	0000002f __c.4376
000034dc l     O .text	00000030 __c.4378
000034ad l     O .text	0000002f __c.4380
0000347d l     O .text	00000030 __c.4382
00003456 l     O .text	00000027 __c.4384
0000343f l     O .text	00000017 __c.4386
00003428 l     O .text	00000017 __c.4388
0000340f l     O .text	00000019 __c.4390
000033f6 l     O .text	00000019 __c.4392
000033e8 l     O .text	0000000e __c.4394
000033d0 l     O .text	00000018 __c.4418
000033b9 l     O .text	00000017 __c.4420
00003381 l     O .text	00000038 __c.4422
00003371 l     O .text	00000010 __c.4424
000032b0 l     O .text	0000000e __c.4435
000032be l     O .text	00000028 __c.4433
0000333c l     O .text	00000035 __c.4428
000032e6 l     O .text	00000056 __c.4430
00003288 l     O .text	00000028 __c.4443
0000327a l     O .text	0000000e __c.4446
00003262 l     O .text	00000018 __c.4463
0000324f l     O .text	00000013 __c.4465
00003241 l     O .text	0000000e __c.4467
00003233 l     O .text	0000000e __c.4472
00003213 l     O .text	00000020 __c.4489
000031f8 l     O .text	0000001b __c.4491
000031dc l     O .text	0000001c __c.4493
000031ad l     O .text	0000002f __c.4495
0000319a l     O .text	00000013 __c.4497
0000316a l     O .text	00000030 __c.4499
0000315c l     O .text	0000000e __c.4501
0000314e l     O .text	0000000e __c.4506
00003129 l     O .text	00000025 __c.4514
00003109 l     O .text	00000020 __c.4516
000030ea l     O .text	0000001f __c.4518
000030c2 l     O .text	00000028 __c.4520
000030b3 l     O .text	0000000f __c.4522
0000308b l     O .text	00000028 __c.4531
00003064 l     O .text	00000027 __c.4533
0000303d l     O .text	00000027 __c.4535
00003007 l     O .text	00000036 __c.4537
00002fde l     O .text	00000029 __c.4539
00002fc7 l     O .text	00000017 __c.4541
00002f9e l     O .text	00000029 __c.4554
00002f79 l     O .text	00000025 __c.4556
00002f56 l     O .text	00000023 __c.4558
00002f36 l     O .text	00000020 __c.4560
00002f16 l     O .text	00000020 __c.4562
0000414a l     O .text	00000021 __c.3869
00000000 l    df *ABS*	00000000 vfprintf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d6 l     O .text	00000004 __c.2334
000001da l     O .text	00000004 __c.2332
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000041d l     O .text	0000000d __c.3613
0000040a l     O .text	00000013 __c.3615
000003f7 l     O .text	00000013 __c.3617
000003d9 l     O .text	0000001e __c.3619
000003bb l     O .text	0000001e __c.3621
0000039d l     O .text	0000001e __c.3623
0000037f l     O .text	0000001e __c.3625
0000036b l     O .text	00000014 __c.3627
00000350 l     O .text	0000001b __c.3642
00000338 l     O .text	00000018 __c.3648
00000313 l     O .text	00000025 __c.3657
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080175f l     O .bss	00000004 SPI0_Speed_value
0000042a l     O .text	0000001d __c.3611
0080175d l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000005f4 l     O .text	0000001a __c.3610
000005d8 l     O .text	0000001c __c.3618
000005bf l     O .text	00000019 __c.3620
000005ae l     O .text	00000011 __c.3628
0000059e l     O .text	00000010 __c.3634
0000058a l     O .text	00000014 __c.3640
00000575 l     O .text	00000015 __c.3642
00000557 l     O .text	0000001e __c.3652
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006b8c l     F .text	0000007c clock_settime.part.2
000006e3 l     O .text	0000001d __c.3608
000006d9 l     O .text	0000000a __c.3628
00801792 l     O .bss	00000020 _ts_to_str
0080178a l     O .bss	00000008 __clock_elapsed
000006cb l     O .text	0000000e __c.3642
000006c0 l     O .text	0000000b __c.3644
008017b2 l     O .bss	00000002 timers_configured
008017b4 l     O .bss	00000002 timers_enabled
000006ac l     O .text	00000014 __c.3664
00000699 l     O .text	00000013 __c.3666
0000068d l     O .text	0000000c __c.3668
00000675 l     O .text	00000018 __c.3670
00000664 l     O .text	00000011 __c.3672
00000654 l     O .text	00000010 __c.3674
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000fc2 l     O .text	0000001d __c.3756
0080196b l     O .bss	00000001 _ppr_reg
00000faf l     O .text	00000013 __c.3774
00000f9e l     O .text	00000011 __c.3788
00000f91 l     O .text	0000000d __c.3797
00000f83 l     O .text	0000000e __c.3806
00000f76 l     O .text	0000000d __c.3813
00000f68 l     O .text	0000000e __c.3819
00000000 l    df *ABS*	00000000 _clear_bss.o
00004764 l       .text	00000000 .do_clear_bss_start
00004762 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001c6a0 l       .text	00000000 __udivmodqi4_ep
0001c698 l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001c6c0 l       .text	00000000 __udivmodhi4_ep
0001c6b2 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001c6e8 l       .text	00000000 __divmodhi4_neg1
0001c6f0 l       .text	00000000 __divmodhi4_neg2
0001c6f6 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001c71e l       .text	00000000 __udivmodsi4_ep
0001c704 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001c754 l       .text	00000000 __divmodsi4_neg2
0001c762 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d26a l       .text	00000000 __stop_program
00015a54 g     F .text	0000004a SS80_Selected_Device_Clear
0001c786 g       .text	00000002 .hidden __usmulhisi3
0000efde g     F .text	0000000c putchar
00011c38 g     F .text	00000022 SS80_is_MTA
00006a28 g     F .text	000000ea clock_gettime
000060e2 g     F .text	000000d4 i2c_display_task_errors
0000647a g     F .text	00000084 rtc_init
00011f76 g     F .text	000000a8 GPIB_COMMANDS
00004772  w      .text	00000000 __vector_22
00011090 g     F .text	00000054 gpib_unread
000050a2 g     F .text	0000000a set_error
00014c44 g     F .text	00000034 SS80_test_extended_status
0000652e  w    F .text	00000016 strcpy
00007cdc g     F .text	00000008 asctime
00006fb4 g     F .text	00000020 tm_mon_to_ascii
00801a8c g     O .bss	00000235 Fatfs
0000f112 g     F .text	0000004a mctime
00004772  w      .text	00000000 __vector_28
0000e0e8 g     F .text	0000001a mmc_fast
000062ba g     F .text	0000008c rtc_write
00005cda g     F .text	00000058 i2c_fn
00015b46 g     F .text	00000218 SS80_Transparent_State
0080196c g     O .bss	00000001 gpib_unread_f
00004f8c g     F .text	00000004 spi_RX_buffer
000126bc g     F .text	00000042 gpib_help
000158bc g     F .text	0000009a SS80_Report
0000fc42 g     F .text	0000006a free_file_descriptor
0001bf16 g     F .text	00000148 setup_lcd
0000edd2 g     F .text	00000096 fatfs_putc
0001c866 g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004772  w      .text	00000000 __vector_1
000120e4 g     F .text	00000184 GPIB
0000e978 g     F .text	00000042 fatfs_help
00006c7e g     F .text	00000016 delete_all_timers
000058bc g     F .text	0000000c SPI0_TXRX_Byte
0001cd34 g       .text	00000000 __fp_mpack_finite
0000f788 g     F .text	00000086 utime
00801a5c g     O .bss	00000008 __clock
0001be9a g     F .text	0000007c lcd_time
000131da g     F .text	00000054 find_device
00007b0a g     F .text	00000128 set_dst
0000f4a6 g     F .text	00000096 fdevopen
00011c5a g     F .text	00000022 SS80_is_MSA
00004f28 g     F .text	00000060 spi_end
0001869c g     F .text	000000d6 lif_dir2str
0001ccba g     F .text	00000040 round
000134e8 g     F .text	0000017e alloc_device
0000529e g     F .text	0000006a safefree
00012268 g     F .text	00000130 GPIB_TALK
00004772  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001c956 g     F .text	00000004 __divsf3
0001c80a g       .text	00000036 .hidden __epilogue_restores__
00005670 g     F .text	00000018 uart_rx_count
000145b6 g     F .text	0000003a lif_dir_count
00801ceb g     O .bss	00000009 gpib_timer
00012398 g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00018a1e g     F .text	0000000e lif_vol_clear
00006b12 g     F .text	0000007a clock_task
000114ec g     F .text	00000284 gpib_trace_display
0001b948 g     F .text	000000fa lif_rename_file
00013978 g     F .text	00000850 Read_Config
0001315a g     F .text	00000028 find_type
0001cb78 g     F .text	00000022 __fp_round
00013182 g     F .text	0000001e count_drive_types
00006fd4 g     F .text	00000042 Days_Per_Month
00006e6e g     F .text	00000028 execute_timers
00010358 g     F .text	00000176 ls_info
00004772  w      .text	00000000 __vector_34
0000e0a2 g     F .text	0000001a mmc_spi_begin
0001ca26 g     F .text	0000000a __fixsfsi
00006d88 g     F .text	0000000c clock_elapsed_begin
00006596  w    F .text	00000032 reverse
0000d9f6 g     F .text	00000006 mmc_disk_status
0001cb9a g     F .text	00000044 __fp_split3
00010e64 g     F .text	00000014 gpib_timeout_set
0001c6aa g       .text	00000028 .hidden __udivmodhi4
00004f24 g     F .text	00000004 chip_select_init
00006d16 g     F .text	00000072 ts_to_str
00009072 g     F .text	0000000c atol
0000805e g     F .text	000000aa p_ntoa
0000e358 g     F .text	000000d8 tm_to_fat
000050e4 g     F .text	00000122 PrintFree
00016e1c g     F .text	000000c2 amigo_cmd_dsj
0000d770 g     F .text	00000024 wait_ready
000001d6 g       .text	00000000 __trampolines_start
00013710 g     F .text	0000011c hpdir_set_device
0001cb02 g     F .text	00000048 __fp_cmp
00011a92 g     F .text	000000ea gpib_write_str
00801cc9 g     O .bss	00000002 errno
00015b24 g     F .text	00000022 SS80_Cancel
0001d26c g       .text	00000000 _etext
0000dba6 g     F .text	00000488 mmc_disk_ioctl
0000671e g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
000194aa g     F .text	000000b8 lif_writedirindex
0000577a g     F .text	000000ce SPI0_Speed
00005c14 g     F .text	000000c6 i2c_task_run
00006d94 g     F .text	0000007c clock_elapsed_end
0000d5ea g     F .text	000000c4 ff_wtoupper
0001c884 g     F .text	0000000a __subsf3
0001b50c g     F .text	00000312 lif_add_lif_file
00801cf4 g     O .bss	00000002 lastcmd
00004772  w      .text	00000000 __vector_24
0001370e g     F .text	00000002 set_Config_Defaults
0000624c g     F .text	00000062 i2c_rtc_read
0000670a g     F .text	00000014 skipspaces
0000c1be g     F .text	0000026c f_getcwd
00004772  w      .text	00000000 __vector_12
00010aa0 g     F .text	00000032 gpib_timer_init
00010b02 g     F .text	0000002c ppr_init
0000efea g     F .text	00000068 fgets
0001d1ac g     F .text	000000bc __ultoa_invert
00005688 g     F .text	0000004c uart_get_tail
0000525a g     F .text	00000044 safemalloc
0001b81e g     F .text	0000012a lif_del_file
00007ecc g     F .text	00000032 _putc_buffer_fn
0001a748 g     F .text	0000016e lif_ascii_string_to_e010
0000e16e g     F .text	0000001a mmc_ins_status
00800305 g     O .data	00000002 _cmd2
000189b4 g     F .text	0000004e lif_lifbcd2timestr
00801cf6 g     O .bss	00000200 gpib_iobuff
00017e7a g     F .text	00000028 V2B_MSB
00018854 g     F .text	00000084 lif_time2lifbcd
000131d2 g     F .text	00000008 find_free
00005bb2 g     F .text	00000024 i2c_done
00018f6e g     F .text	00000352 lif_check_dir
00004772 g       .text	00000000 __bad_interrupt
00005362 g     F .text	00000090 delayms
00015a20 g     F .text	00000018 SS80_Channel_Independent_Clear
00010280 g     F .text	000000d8 cat
00008ee2 g     F .text	00000028 snprintf_P
00016f2e g     F .text	00000132 amigo_todo_op
00015a9e g     F .text	00000086 SS80_Amigo_Clear
0000f41c g     F .text	0000008a perror
0001c0d4 g     F .text	00000024 gpib_user_task
0001e8c8 g       *ABS*	00000000 __data_load_end
0000d6ba g     F .text	0000000c disk_initialize
008019aa g     O .bss	0000000d plot
00010e12 g     F .text	00000006 gpib_timer_elapsed_end
00017ff8 g     F .text	0000002a lif_free
0000f082 g     F .text	0000002e puts
00010054 g     F .text	000001bc copy
00006f7a g     F .text	00000010 clock_settime
00018022 g     F .text	0000003e lif_stralloc
000064fe  w    F .text	00000016 islower
000050b6 g     F .text	0000002e freeRam
0001653a g     F .text	0000001c amigo_request_logical_address
00005d32 g     F .text	0000001c i2c_send_stop
0000d0a0 g     F .text	0000022a f_rename
00004772  w      .text	00000000 __vector_6
00010df4 g     F .text	0000001e gpib_timer_reset
000197a2 g     F .text	000005d4 lif_create_volume
0001cd80 g     F .text	00000130 malloc
00004fb0 g     F .text	00000040 spi_init
00010012 g     F .text	00000042 posix_help
00004772  w      .text	00000000 __vector_31
00010b64 g     F .text	00000046 dbf_open
0001bdd8 g     F .text	000000c2 copyright
0000c108 g     F .text	000000b6 f_chdir
0001c94e g       .text	00000000 __lesf2
00004ef4 g     F .text	00000030 chip_deselect
00017e04 g     F .text	00000076 PRINTER_COMMANDS
00006e10 g     F .text	00000036 clock_clear
00007d06 g     F .text	000000ee initialize_clock
0000e16c g     F .text	00000002 mmc_power_off
0000e352 g     F .text	00000006 mmc_wp_status
0000eccc g     F .text	00000106 fatfs_getc
00801ef6 g     O .bss	00000001 listening_last
0000d6ae g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001d6 g       .text	00000000 __trampolines_end
00006f50 g     F .text	0000002a clock_getres
00801784 g     O .bss	00000004 i2c_task
0001a8b6 g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
0001104a g     F .text	00000046 gpib_assert_ifc
0001883e g     F .text	00000016 lif_BCD2BIN
00018060 g     F .text	00000054 lif_open
00007df4 g     F .text	000000d8 display_clock
00010b2e g     F .text	0000001a ppr_bit_set
00004772  w      .text	00000000 __vector_3
00010afa g     F .text	00000008 ppr_reg
00011946 g     F .text	00000008 gpib_decode
000053f2 g     F .text	00000022 uart_rx_flush
0000f32a g     F .text	00000004 rmdir
00006c08 g     F .text	00000076 set_timers
00801a80 g     O .bss	0000000c dst
0000f3a0 g     F .text	0000007c readdir
0001cbde g     F .text	0000000e __fp_zero
0000ca84 g     F .text	0000002a f_closedir
0000d706 g     F .text	00000014 disk_ioctl
0001bb50 g     F .text	00000274 lif_tests
000085ee g     F .text	00000084 _puts_pad
00004f90 g     F .text	00000020 spi_TX
00018a2c g     F .text	0000038c lif_dump_vol
0001248e g     F .text	0000004c listen_cleanup
000188d8 g     F .text	000000a0 lif_lifbcd2time
00018772 g     F .text	000000be lif_str2dir
0000594a g     F .text	0000002c SPI0_TXRX
00800307 g     O .data	00000015 _line1
0001c94e g       .text	00000000 __nesf2
0001382c g     F .text	00000020 hpdir_set_parameters
000061b6 g     F .text	0000000e BINtoBCD
0000f86e g     F .text	000000d0 lseek
00004772  w      .text	00000000 __vector_23
0001d26c g       *ABS*	00000000 __data_load_start
00801838 g     O .bss	00000004 _mmc_clock
00004734 g       .text	00000000 __dtors_end
00011d26 g     F .text	00000012 gpib_init_devices
0000663a  w    F .text	00000050 strncasecmp
008021bc g       .bss	00000000 __bss_end
000182cc g     F .text	00000056 lif_chars
0001c792 g       .text	00000014 .hidden __muluhisi3
000129e2 g     F .text	0000006a print_tok_str
00004772  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
000141c8 g     F .text	000002f2 format_drives
00004772  w      .text	00000000 __vector_25
008021b8 g     O .bss	00000002 __brkval
000071d2 g     F .text	0000002a gmtime_r
0000f1b6 g     F .text	00000052 chmod
00006e96 g     F .text	000000ba init_timers
00011cc0 g     F .text	00000022 AMIGO_is_MSA
0001930c g     F .text	000000d0 lif_checkdirindex
0000cd72 g     F .text	0000014e f_unlink
000110f0 g     F .text	00000020 gpib_control_pin_read
00010c92 g     F .text	000000ae dbf_open_read
000061d6 g     F .text	00000076 i2c_rtc_write
0000e16a g     F .text	00000002 mmc_power_on
00008fa8 g     F .text	000000bc strtol
00010dee g     F .text	00000006 gpib_timer_elapsed_begin
0001d196 g     F .text	00000016 strnlen
00005414 g     F .text	00000134 uart_ubr
0000d55a g     F .text	00000066 ff_uni2oem
000059cc g     F .text	0000009e i2c_check_op
0001a696 g     F .text	000000b2 lif_e010_pad_sector
00017f4a g     F .text	00000042 lif_help
000067f6 g     F .text	000000b8 split_args
0000f2ae g     F .text	0000003e rename
00010c58 g     F .text	0000003a dbf_close
00017a5e g     F .text	000000be receive_plot_flush
0001c970 g     F .text	000000d4 __divsf3x
00004772  w      .text	00000000 __vector_11
00801ef7 g     O .bss	00000001 spoll
0000f15c g     F .text	0000001c basename
00014c78 g     F .text	000000c6 SS80_display_extended_status
00017912 g     F .text	00000130 AMIGO_COMMANDS
0001cfc2 g     F .text	000001b0 __ftoa_engine
0001840a g     F .text	0000007a lif_fixname
0000dabe g     F .text	000000e8 mmc_disk_write
00004734  w      .text	00000000 __init
0001cd4c g     F .text	00000034 calloc
0001b29c g     F .text	00000270 lif_extract_lif_as_lif
000069b4 g     F .text	00000026 install_timers_isr
0001384c g     F .text	0000012c Post_Config
00010ad2 g     F .text	00000014 reverse_8bits
00014e40 g     F .text	000000e0 SS80_describe
0000570c g     F .text	0000002c uart_getchar
00008108 g     F .text	0000020e p_ftoa
0000fb2e g     F .text	000000dc write
00018322 g     F .text	00000074 lif_B2S
0001cbec g       .text	00000000 __gtsf2
0000ffd2 g     F .text	00000040 fprintf
00011448 g     F .text	000000a4 gpib_decode_header
00011770 g     F .text	000001d6 gpib_read_byte
000128e0 g     F .text	00000044 tok_index
00015a38 g     F .text	0000001c SS80_Universal_Device_Clear
0001aac6 g     F .text	00000278 lif_add_ascii_file_as_e010
000069da g     F .text	0000004e __vector_13
00006570  w    F .text	00000026 strcat
008019fb g     O .bss	00000057 uarts
000050ac g     F .text	0000000a clear_error
0001cc10 g       .text	00000000 __mulsf3_pse
00004772  w      .text	00000000 __vector_17
00005080 g     F .text	00000022 spi_TXRX
0001cb56 g     F .text	00000006 __fp_nan
0001322e g     F .text	000001c6 set_active_device
00004772  w      .text	00000000 __vector_19
00006934 g     F .text	0000007c get_value
00005922 g     F .text	00000028 SPI0_TX
00018396 g     F .text	0000003a lif_checkname
0000f178 g     F .text	0000003e chdir
00004772  w      .text	00000000 __vector_7
00016ba6 g     F .text	000000c8 amigo_buffered_read_execute
0000e1d0 g     F .text	00000182 mmc_init
0000e9ba g     F .text	00000176 fatfs_ls
0001cb4a g     F .text	0000000c __fp_inf
00008f0a g     F .text	00000028 sprintf_P
0001c84e g       .text	00000018 .hidden __cmpdi2_s8
0000f53c g     F .text	00000088 fat_time_to_unix
0000f93e g     F .text	0000004e fseek
00801cc1 g     O .bss	00000004 AccSize
00018a02 g     F .text	0000000c lif_image_clear
0000e114 g     F .text	0000000e mmc_set_ms_timeout
000069b0 g     F .text	00000004 enable_system_task
0000e108 g     F .text	00000006 mmc_spi_RX_buffer
00005bd6 g     F .text	00000024 i2c_task_done
000072f2 g     F .text	00000058 is_dst
00005548 g     F .text	0000008e uart_init
0001497c g     F .text	00000078 SS80ControllerPack
00801f00 g     O .bss	00000204 Devices
0000475a g       .text	00000010 .hidden __do_clear_bss
0001d172 g     F .text	00000016 strnlen_P
00005848 g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a036 g     F .text	000001f4 lif_open_volume
00010210 g     F .text	00000070 testpage
00017d12 g     F .text	000000f2 printer_buffer
0000c0d6 g     F .text	00000032 f_close
0001cc0c g     F .text	000000ca __mulsf3x
00017a42 g     F .text	0000001c printer_init
0000e0c4 g     F .text	0000001a mmc_slow
000066ca g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
00010ae6 g     F .text	00000014 ppr_set
00016968 g     F .text	0000012a amigo_format
0000f98c g     F .text	000000da read
00019562 g     F .text	00000030 lif_writedirEOF
0000e0bc g     F .text	00000008 mmc_spi_end
0001ca8c g       .text	00000000 __floatsisf
00016ede g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00019592 g     F .text	00000210 lif_updatefree
00005976 g     F .text	0000002a SPI0_RX
0000ba12 g     F .text	00000296 f_read
008019f9 g     O .bss	00000002 rtc_ok
00011c16 g     F .text	00000022 SS80_is_MLA
000055d6 g     F .text	00000046 uart_rx_interrupt
00005738 g     F .text	00000006 uart0_getchar
00004772  w      .text	00000000 __vector_27
00010fde g     F .text	0000006c gpib_disable_PPR
0000e480 g     F .text	000000e0 fatfs_scan_files
00004ec2 g     F .text	00000032 chip_select
0080175c g       .data	00000000 __data_end
00010c1e g     F .text	0000003a dbf_lseek
0001614a g     F .text	000001d4 SS80_COMMANDS
0000668a g     F .text	00000040 stralloc
0000caae g     F .text	00000088 f_readdir
00801ef8 g     O .bss	00000002 current
00014f72 g     F .text	0000004e SS80_Check_Volume
0000e06a g     F .text	00000038 mmc_install_timer
00008028 g     F .text	00000036 pch
00008f6c g     F .text	0000003c atodigit
0001c674 g       .text	0000001e .hidden __mulsi3
00006544  w    F .text	0000002c strncpy
0000f2ec g     F .text	0000003e unlink
0000fb04 g     F .text	0000002a sync
00015994 g     F .text	0000008c SS80_init
0001c94e g       .text	00000000 __eqsf2
0000fd1e g     F .text	0000008a new_file_descriptor
000065fc  w    F .text	0000003e strcasecmp
0001c7b2 g       .text	00000020 .hidden __negdi2
00017f0a g     F .text	00000040 B2V_LSB
0000e872 g     F .text	00000106 fatfs_filinfo_list
0000d2ca g     F .text	0000009a f_chmod
00801a64 g     O .bss	00000018 timer_irq
00005bfa g     F .text	0000001a i2c_send_start
000131a0 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001c6d2 g       .text	00000026 .hidden __divmodhi4
000149f4 g     F .text	00000198 SS80UnitPack
00010d40 g     F .text	000000ae dbf_open_write
00004772  w      .text	00000000 __vector_5
0000e02e g     F .text	0000003c mmc_disk_timerproc
00801a52 g     O .bss	0000000a i2c
000079fe g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004772  w      .text	00000000 __vector_33
00012924 g     F .text	0000003e tok_name
0001194e g     F .text	00000144 gpib_read_str
0001a22a g     F .text	000003aa lif_dir
00016c6e g     F .text	000001ae amigo_buffered_write
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014d3e g     F .text	00000102 SS80_send_status
0001c774 g       .text	00000012 .hidden __tablejump2__
00011d38 g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000f6f8 g     F .text	00000090 unix_time_to_fat
00004734 g       .text	00000000 __ctors_start
0000d8ac g     F .text	0000014a mmc_disk_initialize
00801a7c g     O .bss	00000004 __tzone
0000e430 g     F .text	00000026 get_fattime
0080031c g     O .data	00000002 _cmd1
0000fa66 g     F .text	00000038 fread
00018a0e g     F .text	00000010 lif_dir_clear
00016788 g     F .text	00000052 amigo_increment
000124da g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
0080183c g     O .bss	00000002 _mmc_timeout
00004740 g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000fee6 g     F .text	000000d4 posix_fopen_modes_to_open
00017ecc g     F .text	0000003e B2V_MSB
00801788 g     O .bss	00000002 i2c_callback
00018830 g     F .text	0000000e lif_BIN2BCD
0001ccfa g     F .text	00000036 __fp_mintl
0001c94e g     F .text	00000008 __cmpsf2
0001c840 g       .text	0000000e .hidden __xload_1
00007254 g     F .text	0000005c gettimeofday
0001cb6a g     F .text	0000000e __fp_pscB
0001cbaa g       .text	00000000 __fp_splitA
00018978 g     F .text	0000003c lif_ctime_gmt
00018168 g     F .text	000000a2 lif_read
0000ffba g     F .text	00000018 fopen
0080175c g       .bss	00000000 __bss_start
00007c32 g     F .text	000000aa asctime_r
000073e2 g     F .text	00000008 localtime
0001d188 g     F .text	0000000e memset
00017060 g     F .text	00000108 amigo_todo
000136ae g     F .text	00000032 push_state
000079bc g     F .text	00000042 setdate
0001c2be g     F .text	000003b6 main
008002f0 g     O .data	00000015 _line2
000126ba g     F .text	00000002 talk_cleanup
000063ec g     F .text	0000008e rtc_run
0000f838 g     F .text	00000036 ftell
00801efa g     O .bss	00000001 talking
0000bfd6 g     F .text	00000100 f_sync
0080196f g     O .bss	00000002 AMIGOs
0001c94e g       .text	00000000 __ltsf2
00005776 g     F .text	00000004 uart_keyhit
00013666 g     F .text	00000048 init_Devices
00004772  w      .text	00000000 __vector_4
000192c0 g     F .text	0000004c lif_close_volume
0000e0de g     F .text	0000000a mmc_spi_init
000193dc g     F .text	000000ce lif_readdirindex
00017190 g     F .text	000005cc Amigo_Command
0000fd0e g     F .text	00000010 fclose
0000efd2 g     F .text	0000000c getchar
000166cc g     F .text	000000bc amigo_send_status
000164b2 g     F .text	00000088 amigo_init
00800136 g     O .data	0000004a sys_errlist
000072b0 g     F .text	00000042 time
0000f364 g     F .text	0000003c opendir
0001cd30 g     F .text	0000001c __fp_mpack
000133f4 g     F .text	000000f4 SS80_Set_Defaults
000062ae g     F .text	0000000c i2c_rtc_init
00007230 g     F .text	00000024 settimezone
0000b62a g     F .text	00000078 f_mount
0000e57e g     F .text	000002f4 fatfs_status
00011c9e g     F .text	00000022 AMIGO_is_MTA
0001c764 g       .text	00000010 .hidden __negsi2
0000c9a2 g     F .text	000000e2 f_opendir
00015956 g     F .text	0000003e Clear_Common
0001c0f8 g     F .text	00000042 help
00010f72 g     F .text	0000006c gpib_enable_PPR
00016830 g     F .text	00000138 amigo_verify
0001cbf4 g     F .text	00000004 __mulsf3
000068ae g     F .text	00000086 get_token
00016556 g     F .text	000000ba amigo_request_status
00012a98 g     F .text	000001b6 display_Addresses
0000f80e g     F .text	0000002a fileno_to_fatfs
0000d5c0 g     F .text	0000002a ff_oem2uni
000065e2  w    F .text	0000001a strcmp
00010f18 g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010e18 g     F .text	0000004c gpib_timer_task
00005308 g     F .text	0000005a delayus
000136e0 g     F .text	0000002e pop_state
00004772  w      .text	00000000 __vector_9
0000f208 g     F .text	0000004a getcwd
00004772  w      .text	00000000 __vector_2
00006746 g     F .text	00000028 MATCHI
00017168 g     F .text	00000028 amigo_check_unit
0001c8a8 g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c42a g     F .text	00000578 f_lseek
0000ee68 g     F .text	000000ac fgetc
00801efb g     O .bss	00000001 secondary
00008e96 g     F .text	0000004c vsnprintf_P
00007ce4 g     F .text	00000022 ctime_gm
0001cbec g     F .text	00000008 __gesf2
000144ba g     F .text	000000fc hpdir_init
00016610 g     F .text	000000bc amigo_send_logical_address
00014f20 g     F .text	00000052 SS80_Check_Unit
00011b7c g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
0080196d g     O .bss	00000002 gpib_log_fp
00004772  w      .text	00000000 __vector_21
00004772  w      .text	00000000 __vector_15
00008316 g     F .text	000002d8 p_etoa
00012a4c g     F .text	0000004c print_tok
00801764 g     O .bss	00000020 i2c_task_op
00015dd2 g     F .text	000002c4 SS80_locate_and_read
00005ae8 g     F .text	000000ca i2c_init
000126fe g     F .text	000001e2 gpib_tests
00801cc5 g     O .bss	00000002 AccDirs
0000d554 g     F .text	00000006 ff_memfree
00801977 g     O .bss	00000002 PRINTERp
0001cb5c g     F .text	0000000e __fp_pscA
0001c692 g       .text	00000018 .hidden __udivmodqi4
00801efc g     O .bss	00000001 listening
00011e5c g     F .text	0000011a gpib_error_test
00801973 g     O .bss	00000002 SS80s
0000cb36 g     F .text	0000007c f_stat
00010ebe g     F .text	0000005a gpib_bus_init
000059a0 g     F .text	0000002c i2c_timer
0000ef14 g     F .text	000000a4 fputc
00004772  w      .text	00000000 __vector_29
00005762 g     F .text	00000014 uart0_putchar
00008f32 g     F .text	0000003a printf_P
0001c7aa g       .text	00000006 .hidden __mulohisi3
00016096 g     F .text	000000b4 SS80_Execute_State
0000777a g     F .text	00000008 timegm
00014fc0 g     F .text	000004ee SS80_Command_State
00007212 g     F .text	0000001e gettimezone
008021bc g       .comment	00000000 __heap_start
000066ea g     F .text	00000020 trim_tail
00011128 g     F .text	00000320 gpib_write_byte
00017b1c g     F .text	000000b0 printer_close
00005a94 g     F .text	00000054 i2c_task_op_add
00018db8 g     F .text	000001b6 lif_check_volume
0000734a g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801cc7 g     O .bss	00000002 AccFiles
00006346 g     F .text	000000a6 rtc_read
00004734 g       .text	00000000 __dtors_start
00010e78 g     F .text	00000046 gpib_bus_read_init
00004734 g       .text	00000000 __ctors_end
0001c73c g       .text	00000028 .hidden __divmodsi4
000110e4 g     F .text	0000000c gpib_bus_read
0000f5c4 g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000fa9e g     F .text	00000066 syncfs
00017f8c g     F .text	0000006c lif_calloc
0000fc0a g     F .text	00000038 fwrite
0001201e g     F .text	000000c6 Send_Identify
00801836 g     O .bss	00000002 _mmc_pre
0000e10e g     F .text	00000006 mmc_spi_TXRX
0080175c g       .data	00000000 _edata
0000d364 g     F .text	000000b2 f_utime
00012c4e g     F .text	0000050c display_Config
0001c788 g       .text	00000008 .hidden __usmulhisi3_tail
008021bc g       .comment	00000000 _end
000180fe g     F .text	0000006a lif_seek_msg
00004ff0 g     F .text	00000090 spi_begin
00017bcc g     F .text	00000146 printer_open
0000bca8 g     F .text	0000032e f_write
00004772  w      .text	00000000 __vector_8
0001a5d4 g     F .text	000000c2 lif_find_file
00005e20 g     F .text	000001d4 __vector_26
00007f16 g     F .text	00000112 bin2num
0001c974 g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
00801971 g     O .bss	00000002 AMIGOp
0000e102 g     F .text	00000006 mmc_spi_TX_buffer
0000b6a2 g     F .text	00000370 f_open
00018484 g     F .text	0000011c lif_vol2str
0000d6e6 g     F .text	00000020 disk_write
000104ce g     F .text	00000228 ls
0001d268  w      .text	00000000 .hidden exit
000125fc g     F .text	000000be gpib_task
00005d4e g     F .text	000000be i2c_task_next_op
0001ca88 g     F .text	0000007a __floatunsisf
00016a92 g     F .text	00000114 amigo_buffered_read_command
00006c94 g     F .text	00000082 subtract_timespec
0001c6d2 g       .text	00000000 .hidden _div
00005ff4 g     F .text	000000ee i2c_print_error
0001775c g     F .text	000001b6 Amigo_Execute
000065c8  w    F .text	0000001a strupper
008021ba g     O .bss	00000002 __flp
00012962 g     F .text	00000080 print_tok_val
0001c6f8 g       .text	00000044 .hidden __udivmodsi4
00011d04 g     F .text	00000022 PRINTER_is_MTA
00019d76 g     F .text	000002c0 lif_newdir
000145f0 g     F .text	0000038c hpdir_find_drive
00011ce2 g     F .text	00000022 PRINTER_is_MLA
00009064 g     F .text	0000000e atoi
00007016 g     F .text	000001bc time_to_tm
0000e456 g     F .text	0000002a put_rc
0000f0b0 g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
000058c8 g     F .text	0000005a SPI0_Init
0000cec0 g     F .text	000001e0 f_mkdir
0001ca30 g     F .text	00000058 __fixunssfsi
00802104 g     O .bss	000000b4 hpdir
00007782 g     F .text	0000023a setdate_r
0000676e g     F .text	00000054 MATCHARGS
00004f88 g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d268 g       .text	00000000 .hidden _exit
0001820a g     F .text	000000c2 lif_write
000183d0 g     F .text	0000003a lif_S2B
0001c2aa g     F .text	00000014 user_task
00801efd g     O .bss	00000001 talking_last
00010baa g     F .text	0000003a dbf_read
000061c4 g     F .text	00000012 BCDtoBIN
0001c05e g     F .text	00000076 i2c_lcd_task
000073ea g     F .text	00000390 normalize
000071fc g     F .text	00000016 gmtime
00004772  w      .text	00000000 __vector_14
0000ebac g     F .text	00000120 fatfs_tests
0001ba42 g     F .text	0000010e lif_create_image
0000d6c6 g     F .text	00000020 disk_read
0000fda8 g     F .text	0000013e open
00006514  w    F .text	0000001a toupper
00015598 g     F .text	00000324 SS80_locate_and_write
0001bdc4 g     F .text	00000014 lcd_task
00008672 g     F .text	00000824 _printf_fn
00004772  w      .text	00000000 __vector_10
00010b48 g     F .text	0000001c ppr_bit_clr
00801ccb g     O .bss	00000020 __iob
0000d416 g     F .text	00000138 f_getlabel
000185a0 g     F .text	000000fc lif_str2vol
0000cbb2 g     F .text	000001c0 f_getfree
0000f052 g     F .text	00000030 fputs
00004772  w      .text	00000000 __vector_16
000067c2 g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00005206 g     F .text	00000054 safecalloc
0000f0e8 g     F .text	0000002a fileno_to_stream
000154ae g     F .text	000000ea SS80_cmd_seek
0000f32e g     F .text	00000036 closedir
00004772  w      .text	00000000 __vector_18
00005a6a g     F .text	0000002a i2c_task_init
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014b8c g     F .text	000000b8 SS80VolumePack
0000d9fc g     F .text	000000c2 mmc_disk_read
0000eb30 g     F .text	0000007c mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
000180b4 g     F .text	0000004a lif_stat
000056d4 g     F .text	00000006 uart_rx_byte
00015d5e g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
0000561c g     F .text	00000054 __vector_20
0000f252 g     F .text	0000005c mkdir
0000573e g     F .text	00000024 uart_putchar
000106f6 g     F .text	000003aa posix_tests
00801efe g     O .bss	00000002 gpib_unread_data
0000fcac g     F .text	00000062 close
0001c886 g       .text	00000000 __addsf3
0001c7d2 g       .text	00000038 .hidden __prologue_saves__
00011c7c g     F .text	00000022 AMIGO_is_MLA
0000e122 g     F .text	00000048 mmc_test_timeout
0001ad3e g     F .text	0000055e lif_extract_e010_as_ascii
00004776 g     F .text	0000074c vfprintf
000167da g     F .text	00000056 amigo_seek
00011110 g     F .text	00000018 gpib_handshake_pin_read
00006e46 g     F .text	00000028 enable_timers
0000e560 g     F .text	0000001e fatfs_fstype
00017ea2 g     F .text	0000002a V2B_LSB
00010be4 g     F .text	0000003a dbf_write
00801975 g     O .bss	00000002 SS80p
0000d54e g     F .text	00000006 ff_memalloc
0001ceb0 g     F .text	00000112 free
0001cbe0 g       .text	00000000 __fp_szero
000056da g     F .text	00000032 uart_tx_byte
0001c7a6 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9a 23 	jmp	0x4734	; 0x4734 <__ctors_end>
       4:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
       8:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
       c:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      10:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      14:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      18:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      1c:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      20:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      24:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      28:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      2c:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      30:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      34:	0c 94 ed 34 	jmp	0x69da	; 0x69da <__vector_13>
      38:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      3c:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      40:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      44:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      48:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      4c:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      50:	0c 94 0e 2b 	jmp	0x561c	; 0x561c <__vector_20>
      54:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      58:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      5c:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      60:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      64:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      68:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__vector_26>
      6c:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      70:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      74:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      78:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      7c:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      80:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      84:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      88:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__bad_interrupt>
      8c:	b2 44       	sbci	r27, 0x42	; 66
      8e:	05 46       	sbci	r16, 0x65	; 101
      90:	e2 44       	sbci	r30, 0x42	; 66
      92:	de 45       	sbci	r29, 0x5E	; 94
      94:	de 45       	sbci	r29, 0x5E	; 94
      96:	05 46       	sbci	r16, 0x65	; 101
      98:	05 46       	sbci	r16, 0x65	; 101
      9a:	05 46       	sbci	r16, 0x65	; 101
      9c:	05 46       	sbci	r16, 0x65	; 101
      9e:	05 46       	sbci	r16, 0x65	; 101
      a0:	05 46       	sbci	r16, 0x65	; 101
      a2:	05 46       	sbci	r16, 0x65	; 101
      a4:	05 46       	sbci	r16, 0x65	; 101
      a6:	b2 44       	sbci	r27, 0x42	; 66
      a8:	ac 44       	sbci	r26, 0x4C	; 76
      aa:	05 46       	sbci	r16, 0x65	; 101
      ac:	05 46       	sbci	r16, 0x65	; 101
      ae:	05 46       	sbci	r16, 0x65	; 101
      b0:	05 46       	sbci	r16, 0x65	; 101
      b2:	dc 44       	sbci	r29, 0x4C	; 76
      b4:	05 46       	sbci	r16, 0x65	; 101
      b6:	05 46       	sbci	r16, 0x65	; 101
      b8:	b2 44       	sbci	r27, 0x42	; 66
      ba:	05 46       	sbci	r16, 0x65	; 101
      bc:	05 46       	sbci	r16, 0x65	; 101
      be:	05 46       	sbci	r16, 0x65	; 101
      c0:	05 46       	sbci	r16, 0x65	; 101
      c2:	05 46       	sbci	r16, 0x65	; 101
      c4:	05 46       	sbci	r16, 0x65	; 101
      c6:	05 46       	sbci	r16, 0x65	; 101
      c8:	05 46       	sbci	r16, 0x65	; 101
      ca:	05 46       	sbci	r16, 0x65	; 101
      cc:	b2 44       	sbci	r27, 0x42	; 66
      ce:	00 46       	sbci	r16, 0x60	; 96
      d0:	e2 44       	sbci	r30, 0x42	; 66
      d2:	de 45       	sbci	r29, 0x5E	; 94
      d4:	de 45       	sbci	r29, 0x5E	; 94
      d6:	05 46       	sbci	r16, 0x65	; 101
      d8:	05 46       	sbci	r16, 0x65	; 101
      da:	05 46       	sbci	r16, 0x65	; 101
      dc:	05 46       	sbci	r16, 0x65	; 101
      de:	05 46       	sbci	r16, 0x65	; 101
      e0:	05 46       	sbci	r16, 0x65	; 101
      e2:	05 46       	sbci	r16, 0x65	; 101
      e4:	05 46       	sbci	r16, 0x65	; 101
      e6:	b2 44       	sbci	r27, 0x42	; 66
      e8:	ac 44       	sbci	r26, 0x4C	; 76
      ea:	05 46       	sbci	r16, 0x65	; 101
      ec:	05 46       	sbci	r16, 0x65	; 101
      ee:	fb 45       	sbci	r31, 0x5B	; 91
      f0:	05 46       	sbci	r16, 0x65	; 101
      f2:	dc 44       	sbci	r29, 0x4C	; 76
      f4:	05 46       	sbci	r16, 0x65	; 101
      f6:	05 46       	sbci	r16, 0x65	; 101
      f8:	b2 44       	sbci	r27, 0x42	; 66
      fa:	27 46       	sbci	r18, 0x67	; 103
      fc:	0e 47       	sbci	r16, 0x7E	; 126
      fe:	1d 46       	sbci	r17, 0x6D	; 109
     100:	7b 46       	sbci	r23, 0x6B	; 107
     102:	62 46       	sbci	r22, 0x62	; 98
     104:	0e 47       	sbci	r16, 0x7E	; 126
     106:	0e 47       	sbci	r16, 0x7E	; 126
     108:	0e 47       	sbci	r16, 0x7E	; 126
     10a:	0e 47       	sbci	r16, 0x7E	; 126
     10c:	0e 47       	sbci	r16, 0x7E	; 126
     10e:	0e 47       	sbci	r16, 0x7E	; 126
     110:	0e 47       	sbci	r16, 0x7E	; 126
     112:	0e 47       	sbci	r16, 0x7E	; 126
     114:	31 46       	sbci	r19, 0x61	; 97
     116:	45 46       	sbci	r20, 0x65	; 101
     118:	0e 47       	sbci	r16, 0x7E	; 126
     11a:	0e 47       	sbci	r16, 0x7E	; 126
     11c:	0e 47       	sbci	r16, 0x7E	; 126
     11e:	0e 47       	sbci	r16, 0x7E	; 126
     120:	19 46       	sbci	r17, 0x69	; 105
     122:	0e 47       	sbci	r16, 0x7E	; 126
     124:	0e 47       	sbci	r16, 0x7E	; 126
     126:	45 46       	sbci	r20, 0x65	; 101
     128:	0e 47       	sbci	r16, 0x7E	; 126
     12a:	0e 47       	sbci	r16, 0x7E	; 126
     12c:	0e 47       	sbci	r16, 0x7E	; 126
     12e:	0e 47       	sbci	r16, 0x7E	; 126
     130:	0e 47       	sbci	r16, 0x7E	; 126
     132:	0e 47       	sbci	r16, 0x7E	; 126
     134:	0e 47       	sbci	r16, 0x7E	; 126
     136:	0e 47       	sbci	r16, 0x7E	; 126
     138:	0e 47       	sbci	r16, 0x7E	; 126
     13a:	27 46       	sbci	r18, 0x67	; 103
     13c:	a9 46       	sbci	r26, 0x69	; 105
     13e:	1d 46       	sbci	r17, 0x6D	; 109
     140:	7b 46       	sbci	r23, 0x6B	; 107
     142:	62 46       	sbci	r22, 0x62	; 98
     144:	0e 47       	sbci	r16, 0x7E	; 126
     146:	0e 47       	sbci	r16, 0x7E	; 126
     148:	0e 47       	sbci	r16, 0x7E	; 126
     14a:	0e 47       	sbci	r16, 0x7E	; 126
     14c:	0e 47       	sbci	r16, 0x7E	; 126
     14e:	0e 47       	sbci	r16, 0x7E	; 126
     150:	0e 47       	sbci	r16, 0x7E	; 126
     152:	0e 47       	sbci	r16, 0x7E	; 126
     154:	31 46       	sbci	r19, 0x61	; 97
     156:	45 46       	sbci	r20, 0x65	; 101
     158:	0e 47       	sbci	r16, 0x7E	; 126
     15a:	0e 47       	sbci	r16, 0x7E	; 126
     15c:	a9 46       	sbci	r26, 0x69	; 105
     15e:	0e 47       	sbci	r16, 0x7E	; 126
     160:	19 46       	sbci	r17, 0x69	; 105
     162:	0e 47       	sbci	r16, 0x7E	; 126
     164:	0e 47       	sbci	r16, 0x7E	; 126
     166:	45 46       	sbci	r20, 0x65	; 101
     168:	25 6b       	ori	r18, 0xB5	; 181
     16a:	2f 6b       	ori	r18, 0xBF	; 191
     16c:	37 6b       	ori	r19, 0xB7	; 183
     16e:	3a 6b       	ori	r19, 0xBA	; 186
     170:	3d 6b       	ori	r19, 0xBD	; 189
     172:	40 6b       	ori	r20, 0xB0	; 176
     174:	43 6b       	ori	r20, 0xB3	; 179
     176:	46 6b       	ori	r20, 0xB6	; 182
     178:	49 6b       	ori	r20, 0xB9	; 185
     17a:	0b 89       	ldd	r16, Y+19	; 0x13
     17c:	30 89       	ldd	r19, Z+16	; 0x10
     17e:	57 89       	ldd	r21, Z+23	; 0x17
     180:	71 89       	ldd	r23, Z+17	; 0x11
     182:	7a 89       	ldd	r23, Y+18	; 0x12
     184:	9c 89       	ldd	r25, Y+20	; 0x14
     186:	b7 89       	ldd	r27, Z+23	; 0x17
     188:	c7 89       	ldd	r28, Z+23	; 0x17
     18a:	0f 8a       	std	Y+23, r0	; 0x17
     18c:	e3 89       	ldd	r30, Z+19	; 0x13
     18e:	19 8c       	ldd	r1, Y+25	; 0x19
     190:	21 8c       	ldd	r2, Z+25	; 0x19
     192:	25 8c       	ldd	r2, Z+29	; 0x1d
     194:	49 8c       	ldd	r4, Y+25	; 0x19
     196:	52 8c       	ldd	r5, Z+26	; 0x1a
     198:	97 8c       	ldd	r9, Z+31	; 0x1f
     19a:	64 8c       	ldd	r6, Z+28	; 0x1c
     19c:	64 8c       	ldd	r6, Z+28	; 0x1c
     19e:	5c 8c       	ldd	r5, Y+28	; 0x1c
     1a0:	b0 9d       	mul	r27, r0
     1a2:	82 9e       	mul	r8, r18
     1a4:	be 9e       	mul	r11, r30
     1a6:	ed 9e       	mul	r14, r29
     1a8:	fd 9e       	mul	r15, r29
     1aa:	1a 9f       	mul	r17, r26
     1ac:	7a 9f       	mul	r23, r26
     1ae:	89 a0       	ldd	r8, Y+33	; 0x21
     1b0:	89 a0       	ldd	r8, Y+33	; 0x21
     1b2:	89 a0       	ldd	r8, Y+33	; 0x21
     1b4:	ae 9f       	mul	r26, r30
     1b6:	da 9f       	mul	r29, r26
     1b8:	28 a0       	ldd	r2, Y+32	; 0x20
     1ba:	44 a0       	ldd	r4, Z+36	; 0x24
     1bc:	4d 9e       	mul	r4, r29
     1be:	60 9e       	mul	r6, r16
     1c0:	81 bc       	out	0x21, r8	; 33
     1c2:	40 bc       	out	0x20, r4	; 32
     1c4:	40 bc       	out	0x20, r4	; 32
     1c6:	40 bc       	out	0x20, r4	; 32
     1c8:	40 bc       	out	0x20, r4	; 32
     1ca:	04 bc       	out	0x24, r0	; 36
     1cc:	0b bc       	out	0x2b, r0	; 43
     1ce:	12 bc       	out	0x22, r1	; 34
     1d0:	22 bc       	out	0x22, r2	; 34
     1d2:	30 bc       	out	0x20, r3	; 32
     1d4:	29 bc       	out	0x29, r2	; 41

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3631>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3626>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3657>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3648>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3642>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3627>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3625>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3623>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3621>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3619>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3617>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3615>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3613>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3611>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3730>:
     447:	0a 00                                               ..

00000449 <__c.3728>:
     449:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

00000453 <__c.3726>:
     453:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     463:	25 64 0a 00                                         %d..

00000467 <__c.3724>:
     467:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     477:	64 0a 00                                            d..

0000047a <__c.3719>:
     47a:	0a 00                                               ..

0000047c <__c.3717>:
     47c:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     48c:	4b 0a 00                                            K..

0000048f <__c.3715>:
     48f:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     49f:	0a 00                                               ..

000004a1 <__c.3713>:
     4a1:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     4b1:	0a 00                                               ..

000004b3 <__c.3711>:
     4b3:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000004bf <__c.3709>:
     4bf:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000004c9 <__c.3707>:
     4c9:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000004d7 <__c.3705>:
     4d7:	20 20 25 73 0a 00                                     %s..

000004dd <__c.3655>:
     4dd:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     4ed:	61 69 6c 65 64 0a 00                                ailed..

000004f4 <__c.3649>:
     4f4:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     504:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

00000510 <__c.3606>:
     510:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     520:	3d 3d 20 30 0a 00                                   == 0..

00000526 <__c.3604>:
     526:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     536:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

0000053f <__c.3602>:
     53f:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     54f:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000557 <__c.3652>:
     557:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     567:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000575 <__c.3642>:
     575:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     585:	72 6f 72 0a 00                                      ror..

0000058a <__c.3640>:
     58a:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     59a:	6f 72 0a 00                                         or..

0000059e <__c.3634>:
     59e:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

000005ae <__c.3628>:
     5ae:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000005bf <__c.3620>:
     5bf:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     5cf:	61 20 65 72 72 6f 72 0a 00                          a error..

000005d8 <__c.3618>:
     5d8:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     5e8:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000005f4 <__c.3610>:
     5f4:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     604:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

0000060e <__c.3638>:
     60e:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     61e:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     62e:	74 20 25 64 0a 00                                   t %d..

00000634 <__c.3595>:
     634:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     644:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000654 <__c.3674>:
     654:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000664 <__c.3672>:
     664:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000675 <__c.3670>:
     675:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     685:	66 61 69 6c 65 64 0a 00                             failed..

0000068d <__c.3668>:
     68d:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000699 <__c.3666>:
     699:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     6a9:	64 0a 00                                            d..

000006ac <__c.3664>:
     6ac:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     6bc:	65 64 0a 00                                         ed..

000006c0 <__c.3644>:
     6c0:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000006cb <__c.3642>:
     6cb:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000006d9 <__c.3628>:
     6d9:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000006e3 <__c.3608>:
     6e3:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     6f3:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

00000700 <__c.3883>:
     700:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

00000711 <__c.3881>:
     711:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     721:	0a 00                                               ..

00000723 <__c.3879>:
     723:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

00000734 <__c.3877>:
     734:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

00000745 <__c.3875>:
     745:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     755:	0a 00                                               ..

00000757 <__c.3868>:
     757:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     767:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     777:	6d 65 0a 00                                         me..

0000077b <__c.3866>:
     77b:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     78b:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000795 <__c.3864>:
     795:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     7a5:	61 69 6c 65 64 0a 00                                ailed..

000007ac <__c.3862>:
     7ac:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     7bc:	6e 69 74 0a 00                                      nit..

000007c1 <__c.3860>:
     7c1:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     7d1:	0a 00                                               ..

000007d3 <__c.3814>:
     7d3:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     7e3:	61 69 6c 65 64 0a 00                                ailed..

000007ea <__c.3812>:
     7ea:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000007fb <__c.3810>:
     7fb:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     80b:	0a 00                                               ..

0000080d <__c.3808>:
     80d:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000081e <__c.3806>:
     81e:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000082f <__c.3804>:
     82f:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     83f:	0a 00                                               ..

00000841 <__c.3783>:
     841:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     851:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

00000862 <__c.3658>:
     862:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     872:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

0000087f <__c.3626>:
     87f:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

0000088f <__c.3659>:
     88f:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

0000089d <__c.3657>:
     89d:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     8ad:	25 6c 64 0a 00                                      %ld..

000008b2 <__c.3655>:
     8b2:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     8c2:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000008d0 <__c.3652>:
     8d0:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000008e1 <__c.3650>:
     8e1:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000008ed <__c.3648>:
     8ed:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     8fd:	64 0a 00                                            d..

00000900 <__c.3646>:
     900:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     910:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

00000920 <__c.3644>:
     920:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

00000930 <__c.3631>:
     930:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

0000093d <__c.3603>:
     93d:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     94d:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000959 <__c.3675>:
     959:	0a 00                                               ..

0000095b <__c.3673>:
     95b:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     96b:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     97b:	73 00                                               s.

0000097d <__c.3671>:
     97d:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     98d:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000998 <__c.3665>:
     998:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     9a8:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     9b8:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     9c8:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     9d8:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000009e5 <__c.3663>:
     9e5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     9f5:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     a05:	30 34 58 0a 00                                      04X..

00000a0a <__c.3661>:
     a0a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     a1a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a28 <__c.3659>:
     a28:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     a38:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a47 <__c.3657>:
     a47:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     a57:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000a66 <__c.3655>:
     a66:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     a76:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a85 <__c.3653>:
     a85:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     a95:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

00000aa4 <__c.3651>:
     aa4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     ab4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000ac3 <__c.3649>:
     ac3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     ad3:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000ae1 <__c.3647>:
     ae1:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     af1:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000aff <__c.3645>:
     aff:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     b0f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000b1e <__c.3643>:
     b1e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     b2e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000b3c <__c.3641>:
     b3c:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000b4d <__c.3605>:
     b4d:	72 63 3d 25 75 0a 00                                rc=%u..

00000b54 <__c.3643>:
     b54:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     b64:	72 65 65 0a 00                                      ree..

00000b69 <__c.3641>:
     b69:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     b79:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     b89:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000b92 <__c.3637>:
     b92:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000ba0 <__c.3624>:
     ba0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     bb0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000bc0 <__c.3622>:
     bc0:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000bce <__c.3620>:
     bce:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     bde:	73 74 0a 00                                         st..

00000be2 <__c.3618>:
     be2:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000bf2 <__c.3616>:
     bf2:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     c02:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000c12 <__c.3608>:
     c12:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000c22 <__c.3598>:
     c22:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     c32:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     c42:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     c52:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     c62:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     c72:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     c82:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     c92:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000c9e <__c.3596>:
     c9e:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000caa <__c.3928>:
     caa:	25 73 0a 00                                         %s..

00000cae <__c.3926>:
     cae:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000cb6 <__c.3681>:
     cb6:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000cc2 <__c.3610>:
     cc2:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     cd2:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000cda <__c.3603>:
     cda:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     cea:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000cf2 <__c.3767>:
     cf2:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000cfd <__c.3763>:
     cfd:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     d0d:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     d1d:	68 0a 00                                            h..

00000d20 <__c.3760>:
     d20:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000d30 <__c.3755>:
     d30:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     d40:	5b 25 73 5d 0a 00                                   [%s]..

00000d46 <__c.3753>:
     d46:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000d54 <__c.3751>:
     d54:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d64:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d75 <__c.3738>:
     d75:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d85:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d8f <__c.3733>:
     d8f:	25 73 0a 00                                         %s..

00000d93 <__c.3731>:
     d93:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     da3:	0a 00                                               ..

00000da5 <__c.3719>:
     da5:	0d 00                                               ..

00000da7 <__c.3717>:
     da7:	4d 6f 72 65 2e 2e 00                                More...

00000dae <__c.3707>:
     dae:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     dbe:	2e 0a 00                                            ...

00000dc1 <__c.3703>:
     dc1:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000dd0 <__c.3700>:
     dd0:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000ddd <__c.3698>:
     ddd:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000dea <__c.3696>:
     dea:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000dfa <__c.3694>:
     dfa:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000e07 <__c.3692>:
     e07:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e17 <__c.3690>:
     e17:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000e23 <__c.3679>:
     e23:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000e2e <__c.3677>:
     e2e:	0a 00                                               ..

00000e30 <__c.3672>:
     e30:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e40 <__c.3662>:
     e40:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000e51 <__c.3660>:
     e51:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000e5f <__c.3658>:
     e5f:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000e70 <__c.3656>:
     e70:	25 73 0a 00                                         %s..

00000e74 <__c.3653>:
     e74:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000e85 <__c.3645>:
     e85:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000e96 <__c.3629>:
     e96:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     ea6:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     eb6:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     ec6:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     ed6:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     ee6:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     ef6:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     f06:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     f16:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     f26:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     f36:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     f46:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     f56:	6e 65 77 0a 0a 00                                   new...

00000f5c <__c.3627>:
     f5c:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000f68 <__c.3819>:
     f68:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000f76 <__c.3813>:
     f76:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000f83 <__c.3806>:
     f83:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000f91 <__c.3797>:
     f91:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000f9e <__c.3788>:
     f9e:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000faf <__c.3774>:
     faf:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     fbf:	5d 0a 00                                            ]..

00000fc2 <__c.3756>:
     fc2:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     fd2:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000fdf <__c.4415>:
     fdf:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     fef:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     fff:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00001007 <__c.4410>:
    1007:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
    1017:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00001021 <__c.4400>:
    1021:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
    1031:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
    1041:	28 25 64 29 5d 0a 00                                (%d)]..

00001048 <__c.4396>:
    1048:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
    1058:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
    1068:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00001075 <__c.4393>:
    1075:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
    1085:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

0000108e <__c.4377>:
    108e:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00001099 <__c.4375>:
    1099:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

000010a4 <__c.4373>:
    10a4:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

000010af <__c.4369>:
    10af:	20 20 20 20 20 00                                        .

000010b5 <__c.4367>:
    10b5:	25 30 32 58 20 25 63 20 00                          %02X %c .

000010be <__c.4338>:
    10be:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    10ce:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

000010dc <__c.4335>:
    10dc:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    10ec:	73 74 61 74 65 3d 25 64 0a 00                       state=%d..

000010f6 <__c.4319>:
    10f6:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1106:	3e 0a 00                                            >..

00001109 <__c.4315>:
    1109:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1119:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001123 <__c.4311>:
    1123:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1133:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

0000113e <__c.4308>:
    113e:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    114e:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001159 <__c.4303>:
    1159:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1169:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1179:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00001181 <__c.4299>:
    1181:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1191:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

0000119b <__c.4296>:
    119b:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    11ab:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

000011ba <__c.4293>:
    11ba:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    11ca:	20 4b 45 59 20 73 74 61 74 65 3d 25 64 0a 00         KEY state=%d..

000011d9 <__c.4278>:
    11d9:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    11e9:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    11f9:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001207 <__c.4266>:
    1207:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

00001213 <__c.4248>:
    1213:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1223:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000122e <__c.4246>:
    122e:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    123e:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    124e:	72 61 6e 67 65 0a 00                                range..

00001255 <__c.4241>:
    1255:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1265:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001270 <__c.4239>:
    1270:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1280:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1290:	61 6e 67 65 0a 00                                   ange..

00001296 <__c.4234>:
    1296:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    12a6:	5d 0a 00                                            ]..

000012a9 <__c.4229>:
    12a9:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000012ba <__c.4405>:
    12ba:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000012cb <__c.4400>:
    12cb:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    12db:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    12eb:	32 58 48 5d 0a 00                                   2XH]..

000012f1 <__c.4398>:
    12f1:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1301:	0a 00                                               ..

00001303 <__c.4396>:
    1303:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001314 <__c.4391>:
    1314:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001320 <__c.4389>:
    1320:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001330 <__c.4387>:
    1330:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1340:	52 5d 0a 00                                         R]..

00001344 <__c.4385>:
    1344:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1354:	0a 00                                               ..

00001356 <__c.4383>:
    1356:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001367 <__c.4381>:
    1367:	5b 55 4e 54 5d 0a 00                                [UNT]..

0000136e <__c.4376>:
    136e:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

0000137a <__c.4374>:
    137a:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    138a:	52 5d 0a 00                                         R]..

0000138e <__c.4372>:
    138e:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000139f <__c.4370>:
    139f:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    13af:	0a 00                                               ..

000013b1 <__c.4368>:
    13b1:	0a 00                                               ..

000013b3 <__c.4366>:
    13b3:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000013ba <__c.4361>:
    13ba:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    13ca:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

000013db <__c.4359>:
    13db:	5b 44 43 4c 5d 0a 00                                [DCL]..

000013e2 <__c.4357>:
    13e2:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000013ef <__c.4355>:
    13ef:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

000013fb <__c.4353>:
    13fb:	5b 53 44 43 5d 0a 00                                [SDC]..

00001402 <__c.4351>:
    1402:	5b 53 50 44 5d 0a 00                                [SPD]..

00001409 <__c.4349>:
    1409:	5b 53 50 45 5d 0a 00                                [SPE]..

00001410 <__c.4347>:
    1410:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1420:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001428 <__c.4345>:
    1428:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1438:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001440 <__c.4340>:
    1440:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1450:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

0000145a <__c.4338>:
    145a:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    146a:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

0000147b <__c.4311>:
    147b:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

0000148c <__c.4309>:
    148c:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001499 <__c.4307>:
    1499:	3c 42 55 53 3e 0a 00                                <BUS>..

000014a0 <__c.4305>:
    14a0:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000014ab <__c.4303>:
    14ab:	3c 49 46 43 3e 0a 00                                <IFC>..

000014b2 <__c.4298>:
    14b2:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    14c2:	0a 00                                               ..

000014c4 <__c.4296>:
    14c4:	44 6f 6e 65 0a 00                                   Done..

000014ca <__c.4292>:
    14ca:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000014d6 <__c.4290>:
    14d6:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    14e6:	20 65 78 69 74 0a 00                                 exit..

000014ed <__c.4288>:
    14ed:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    14fd:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    150d:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001518 <__c.4286>:
    1518:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1528:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001532 <__c.4240>:
    1532:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1542:	6f 74 65 63 74 65 64 0a 00                          otected..

0000154b <__c.4238>:
    154b:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

0000155c <__c.4236>:
    155c:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    156c:	0a 00                                               ..

0000156e <__c.4431>:
    156e:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

0000157b <__c.4423>:
    157b:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    158b:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    159b:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    15ab:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    15bb:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    15cb:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    15db:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    15eb:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    15fb:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    160b:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    161b:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    162b:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    163b:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    164b:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    165b:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    166b:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    167b:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    168b:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    169b:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    16ab:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    16bb:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    16cb:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    16db:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    16eb:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    16fb:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    170b:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    171b:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    172b:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    173b:	74 61 74 65 73 0a 0a 0a 00                          tates....

00001744 <__c.4421>:
    1744:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000174f <__c.4811>:
    174f:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001757 <__c.4809>:
    1757:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1767:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001771 <__c.4807>:
    1771:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1781:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1791:	0a 00                                               ..

00001793 <__c.4805>:
    1793:	53 53 38 30 2d 25 64 00                             SS80-%d.

0000179b <__c.4803>:
    179b:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    17ab:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000017b5 <__c.4801>:
    17b5:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    17c5:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    17d5:	0a 00                                               ..

000017d7 <__c.4784>:
    17d7:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17e7:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    17f7:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1807:	6f 20 32 35 36 0a 00                                o 256..

0000180e <__c.4782>:
    180e:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    181e:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    182e:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    183e:	20 32 35 36 0a 00                                    256..

00001844 <__c.4769>:
    1844:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1854:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001863 <__c.4733>:
    1863:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1873:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1883:	0a 00                                               ..

00001885 <__c.4725>:
    1885:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1895:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    18a5:	6c 6c 0a 00                                         ll..

000018a9 <__c.4712>:
    18a9:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18b9:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    18c9:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

000018d4 <__c.4710>:
    18d4:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18e4:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    18f4:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1904:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

0000190c <__c.4708>:
    190c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    191c:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    192c:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    193c:	3a 25 73 0a 00                                      :%s..

00001941 <__c.4706>:
    1941:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1951:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1961:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1971:	55 4c 4c 0a 00                                      ULL..

00001976 <__c.4704>:
    1976:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1986:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1996:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    19a6:	66 20 72 61 6e 67 65 0a 00                          f range..

000019af <__c.4702>:
    19af:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    19bf:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    19cf:	6e 67 65 0a 00                                      nge..

000019d4 <__c.4663>:
    19d4:	0a 00                                               ..

000019d6 <__c.4658>:
    19d6:	0a 00                                               ..

000019d8 <__c.4656>:
    19d8:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19e8:	6c 64 0a 00                                         ld..

000019ec <__c.4654>:
    19ec:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    19fc:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a0b <__c.4652>:
    1a0b:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a15 <__c.4650>:
    1a15:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1a25:	6c 64 0a 00                                         ld..

00001a29 <__c.4648>:
    1a29:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1a39:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a48 <__c.4646>:
    1a48:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a51 <__c.4643>:
    1a51:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1a61:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001a71 <__c.4634>:
    1a71:	0a 00                                               ..

00001a73 <__c.4629>:
    1a73:	0a 00                                               ..

00001a75 <__c.4627>:
    1a75:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001a7e <__c.4625>:
    1a7e:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a88 <__c.4623>:
    1a88:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a91 <__c.4620>:
    1a91:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1aa1:	0a 00                                               ..

00001aa3 <__c.4614>:
    1aa3:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1ab3:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1ac3:	2a 2a 2a 2a 2a 0a 00                                *****..

00001aca <__c.4612>:
    1aca:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1ada:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001ae7 <__c.4610>:
    1ae7:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1af7:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1b07:	0a 00                                               ..

00001b09 <__c.4606>:
    1b09:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1b19:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b29:	0a 00                                               ..

00001b2b <__c.4603>:
    1b2b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b3b:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1b4b:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b5b <__c.4594>:
    1b5b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b6b:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1b7b:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001b8a <__c.4591>:
    1b8a:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1b9a:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1baa:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001bba <__c.4582>:
    1bba:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1bca:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1bda:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001be8 <__c.4574>:
    1be8:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bf8:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1c08:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c16 <__c.4564>:
    1c16:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c26:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1c36:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001c42 <__c.4547>:
    1c42:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c52:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1c62:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c72:	0a 00                                               ..

00001c74 <__c.4539>:
    1c74:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c84:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c94:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ca2 <__c.4536>:
    1ca2:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1cb2:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1cc2:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001cd0 <__c.4528>:
    1cd0:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ce0:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1cf0:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001cfd <__c.4518>:
    1cfd:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d0d:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1d1d:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001d2e <__c.4515>:
    1d2e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d3e:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1d4e:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001d58 <__c.4511>:
    1d58:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d68:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d78:	0a 00                                               ..

00001d7a <__c.4500>:
    1d7a:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d8a:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d9a:	0a 00                                               ..

00001d9c <__c.4497>:
    1d9c:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1dac:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001dba <__c.4495>:
    1dba:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001dc7 <__c.4476>:
    1dc7:	25 73 0a 00                                         %s..

00001dcb <__c.4466>:
    1dcb:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001dd7 <__c.4455>:
    1dd7:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1de7:	6c 64 29 0a 00                                      ld)..

00001dec <__c.3652>:
    1dec:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001dfd <__c.3650>:
    1dfd:	25 73 20 25 73 0a 00                                %s %s..

00001e04 <__c.3646>:
    1e04:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1e14:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001e21 <__c.4548>:
    1e21:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1e31:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e41:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e51:	48 5d 0a 00                                         H]..

00001e55 <__c.4546>:
    1e55:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1e65:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e75:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e85:	48 5d 0a 00                                         H]..

00001e89 <__c.4544>:
    1e89:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1e99:	74 5d 0a 00                                         t]..

00001e9d <__c.4542>:
    1e9d:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001eac <__c.4540>:
    1eac:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1ebc:	74 65 5d 0a 00                                      te]..

00001ec1 <__c.4538>:
    1ec1:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1ed1:	61 74 65 5d 0a 00                                   ate]..

00001ed7 <__c.4536>:
    1ed7:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1ee7:	61 74 65 5d 0a 00                                   ate]..

00001eed <__c.4531>:
    1eed:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1efd:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1f0d:	5d 0a 00                                            ]..

00001f10 <__c.4517>:
    1f10:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001f1f <__c.4515>:
    1f1f:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1f2f:	5d 0a 00                                            ]..

00001f32 <__c.4508>:
    1f32:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001f3e <__c.4494>:
    1f3e:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1f4e:	5d 0a 00                                            ]..

00001f51 <__c.4492>:
    1f51:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1f61:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001f6b <__c.4485>:
    1f6b:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1f7b:	48 5d 0a 00                                         H]..

00001f7f <__c.4483>:
    1f7f:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1f8f:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001f9f <__c.4478>:
    1f9f:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1faf:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1fbf:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1fcf:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001fdb <__c.4475>:
    1fdb:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1feb:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001ffb <__c.4473>:
    1ffb:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    200b:	29 5d 0a 00                                         )]..

0000200f <__c.4471>:
    200f:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    201f:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    202f:	28 25 64 29 5d 0a 00                                (%d)]..

00002036 <__c.4469>:
    2036:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    2046:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00002054 <__c.4467>:
    2054:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    2064:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002071 <__c.4464>:
    2071:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2081:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2091:	44 4f 5d 0a 00                                      DO]..

00002096 <__c.4461>:
    2096:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    20a6:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000020af <__c.4459>:
    20af:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    20bf:	5d 0a 00                                            ]..

000020c2 <__c.4450>:
    20c2:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    20d2:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    20e2:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    20f2:	43 6f 64 65 73 5d 0a 00                             Codes]..

000020fa <__c.4447>:
    20fa:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    210a:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000211a <__c.4445>:
    211a:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    212a:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    213a:	5d 0a 00                                            ]..

0000213d <__c.4443>:
    213d:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    214d:	61 74 75 73 5d 0a 00                                atus]..

00002154 <__c.4441>:
    2154:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    2164:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

0000216d <__c.4439>:
    216d:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    217d:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002188 <__c.4437>:
    2188:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2198:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000021a7 <__c.4435>:
    21a7:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    21b7:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000021c5 <__c.4433>:
    21c5:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000021d6 <__c.4431>:
    21d6:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    21e6:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000021f2 <__c.4429>:
    21f2:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2202:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

0000220f <__c.4427>:
    220f:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    221f:	2d 4f 50 5d 0a 00                                   -OP]..

00002225 <__c.4425>:
    2225:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2235:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002246 <__c.4423>:
    2246:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2256:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2266:	44 4f 5d 0a 00                                      DO]..

0000226b <__c.4421>:
    226b:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    227b:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00002285 <__c.4419>:
    2285:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    2295:	2d 4f 50 5d 0a 00                                   -OP]..

0000229b <__c.4417>:
    229b:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000022a9 <__c.4415>:
    22a9:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    22b9:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000022c5 <__c.4413>:
    22c5:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    22d5:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000022e2 <__c.4411>:
    22e2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22f2:	20 57 72 69 74 65 5d 0a 00                           Write]..

000022fb <__c.4408>:
    22fb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    230b:	20 52 65 61 64 5d 0a 00                              Read]..

00002313 <__c.4406>:
    2313:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2323:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000232c <__c.4403>:
    232c:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    233c:	25 64 29 5d 0a 00                                   %d)]..

00002342 <__c.4401>:
    2342:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2352:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

0000235b <__c.4399>:
    235b:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    236b:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    237b:	52 4f 52 5d 0a 00                                   ROR]..

00002381 <__c.4390>:
    2381:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2391:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

0000239b <__c.4385>:
    239b:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    23ab:	76 61 6c 69 64 5d 0a 00                             valid]..

000023b3 <__c.4380>:
    23b3:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    23c3:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000023d2 <__c.4378>:
    23d2:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    23e2:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000023ef <__c.4376>:
    23ef:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    23ff:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    240f:	5d 0a 00                                            ]..

00002412 <__c.4374>:
    2412:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002423 <__c.4366>:
    2423:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2433:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

0000243e <__c.4364>:
    243e:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    244e:	73 5d 0a 00                                         s]..

00002452 <__c.4354>:
    2452:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

0000245d <__c.4352>:
    245d:	25 73 3a 0a 00                                      %s:..

00002462 <__c.4327>:
    2462:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2472:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2482:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

0000248d <__c.4325>:
    248d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    249d:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    24ad:	49 4e 49 53 48 5d 0a 00                             INISH]..

000024b5 <__c.4321>:
    24b5:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24c5:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    24d5:	58 48 29 5d 0a 00                                   XH)]..

000024db <__c.4319>:
    24db:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    24eb:	72 5d 0a 00                                         r]..

000024ef <__c.4315>:
    24ef:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    24ff:	5d 0a 00                                            ]..

00002502 <__c.4313>:
    2502:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2512:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2522:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

0000252b <__c.4301>:
    252b:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    253b:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    254b:	62 79 74 65 73 5d 0a 00                             bytes]..

00002553 <__c.4299>:
    2553:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2563:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2573:	53 48 5d 0a 00                                      SH]..

00002578 <__c.4294>:
    2578:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2588:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002591 <__c.4292>:
    2591:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    25a1:	45 72 72 6f 72 5d 0a 00                             Error]..

000025a9 <__c.4290>:
    25a9:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    25b9:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000025c7 <__c.4288>:
    25c7:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25d7:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    25e7:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000025ef <__c.4271>:
    25ef:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    25ff:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000260b <__c.4255>:
    260b:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    261b:	5d 0a 00                                            ]..

0000261e <__c.4369>:
    261e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    262e:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    263e:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002647 <__c.4366>:
    2647:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    2657:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    2667:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002672 <__c.4363>:
    2672:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2682:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2692:	66 66 65 72 65 64 5d 0a 00                          ffered]..

0000269b <__c.4358>:
    269b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26ab:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000026bb <__c.4355>:
    26bb:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    26cb:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000026d7 <__c.4352>:
    26d7:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26e7:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    26f7:	0a 00                                               ..

000026f9 <__c.4349>:
    26f9:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2709:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002718 <__c.4346>:
    2718:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2728:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002739 <__c.4343>:
    2739:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2749:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002759 <__c.4339>:
    2759:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2769:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2779:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2789:	0a 00                                               ..

0000278b <__c.4334>:
    278b:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

0000279b <__c.4331>:
    279b:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    27ab:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000027ba <__c.4329>:
    27ba:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    27ca:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    27da:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000027e5 <__c.4327>:
    27e5:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    27f5:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002805 <__c.4325>:
    2805:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2815:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2825:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

0000282e <__c.4323>:
    282e:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    283e:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

0000284a <__c.4321>:
    284a:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    285a:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    286a:	0a 00                                               ..

0000286c <__c.4319>:
    286c:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

0000287c <__c.4316>:
    287c:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    288c:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

0000289d <__c.4314>:
    289d:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    28ad:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    28bd:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000028c6 <__c.4312>:
    28c6:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28d6:	36 5d 0a 00                                         6]..

000028da <__c.4309>:
    28da:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28ea:	35 5d 0a 00                                         5]..

000028ee <__c.4306>:
    28ee:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    28fe:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

0000290e <__c.4303>:
    290e:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    291e:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    292e:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

0000293d <__c.4301>:
    293d:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    294d:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

0000295e <__c.4299>:
    295e:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    296e:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

0000297f <__c.4297>:
    297f:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    298f:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    299f:	0a 00                                               ..

000029a1 <__c.4295>:
    29a1:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    29b1:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    29c1:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    29d1:	0a 00                                               ..

000029d3 <__c.4283>:
    29d3:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    29e3:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    29f3:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2a03:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2a13:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002a24 <__c.4281>:
    2a24:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2a34:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a44:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a54:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a64:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a74 <__c.4279>:
    2a74:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2a84:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a94:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2aa4:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2ab4:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002ac4 <__c.4277>:
    2ac4:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2ad4:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2ae4:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2af4:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2b04:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002b14 <__c.4272>:
    2b14:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2b24:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2b34:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2b44:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2b54:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2b64:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2b74:	58 48 5d 0a 00                                      XH]..

00002b79 <__c.4270>:
    2b79:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b89:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b99:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ba9:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2bb9:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2bc9:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2bd9:	30 32 58 48 5d 0a 00                                02XH]..

00002be0 <__c.4268>:
    2be0:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bf0:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c00:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c10:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c20:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c30:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c40:	30 32 58 48 5d 0a 00                                02XH]..

00002c47 <__c.4266>:
    2c47:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c57:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c67:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c77:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c87:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c97:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ca7:	30 32 58 48 5d 0a 00                                02XH]..

00002cae <__c.4259>:
    2cae:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002cbd <__c.4246>:
    2cbd:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002cca <__c.4244>:
    2cca:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2cda:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002ce4 <__c.4237>:
    2ce4:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2cf4:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002d03 <__c.4235>:
    2d03:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d13:	0a 00                                               ..

00002d15 <__c.4228>:
    2d15:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d25:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d2f <__c.4222>:
    2d2f:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d3f:	0a 00                                               ..

00002d41 <__c.4216>:
    2d41:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2d51:	6e 65 5d 0a 00                                      ne]..

00002d56 <__c.4212>:
    2d56:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002d66 <__c.4171>:
    2d66:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2d76:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2d86:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002d91 <__c.4201>:
    2d91:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2da1:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2db1:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002db9 <__c.4178>:
    2db9:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2dc9:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002dd2 <__c.4164>:
    2dd2:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2de2:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002dec <__c.4162>:
    2dec:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2dfc:	75 73 5d 0a 00                                      us]..

00002e01 <__c.4156>:
    2e01:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e11:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e1b <__c.4154>:
    2e1b:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2e2b:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002e39 <__c.4148>:
    2e39:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2e49:	74 61 74 75 73 5d 0a 00                             tatus]..

00002e51 <__c.4148>:
    2e51:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2e61:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002e6b <__c.4146>:
    2e6b:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2e7b:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002e87 <__c.4141>:
    2e87:	25 30 38 6c 64 0d 00                                %08ld..

00002e8e <__c.4135>:
    2e8e:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2e9e:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002eaf <__c.4129>:
    2eaf:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002ebd <__c.4127>:
    2ebd:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2ecd:	69 74 65 0a 00                                      ite..

00002ed2 <__c.4121>:
    2ed2:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002ede <__c.4119>:
    2ede:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2eee:	6f 3a 25 73 0a 00                                   o:%s..

00002ef4 <__c.4117>:
    2ef4:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2f04:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2f14:	74 00                                               t.

00002f16 <__c.4562>:
    2f16:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2f26:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002f36 <__c.4560>:
    2f36:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f46:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002f56 <__c.4558>:
    2f56:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f66:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2f76:	30 0a 00                                            0..

00002f79 <__c.4556>:
    2f79:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f89:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2f99:	70 74 79 0a 00                                      pty..

00002f9e <__c.4554>:
    2f9e:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2fae:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2fbe:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002fc7 <__c.4541>:
    2fc7:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2fd7:	20 25 31 30 73 0a 00                                 %10s..

00002fde <__c.4539>:
    2fde:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2fee:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2ffe:	74 20 66 6f 75 6e 64 0a 00                          t found..

00003007 <__c.4537>:
    3007:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3017:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    3027:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    3037:	74 65 72 73 0a 00                                   ters..

0000303d <__c.4535>:
    303d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    304d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    305d:	65 6d 70 74 79 0a 00                                empty..

00003064 <__c.4533>:
    3064:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3074:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3084:	65 6d 70 74 79 0a 00                                empty..

0000308b <__c.4531>:
    308b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    309b:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    30ab:	20 65 6d 70 74 79 0a 00                              empty..

000030b3 <__c.4522>:
    30b3:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000030c2 <__c.4520>:
    30c2:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    30d2:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    30e2:	20 66 6f 75 6e 64 0a 00                              found..

000030ea <__c.4518>:
    30ea:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30fa:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00003109 <__c.4516>:
    3109:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3119:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003129 <__c.4514>:
    3129:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3139:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3149:	70 74 79 0a 00                                      pty..

0000314e <__c.4506>:
    314e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000315c <__c.4501>:
    315c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000316a <__c.4499>:
    316a:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    317a:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    318a:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000319a <__c.4497>:
    319a:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    31aa:	73 0a 00                                            s..

000031ad <__c.4495>:
    31ad:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    31bd:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    31cd:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000031dc <__c.4493>:
    31dc:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    31ec:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000031f8 <__c.4491>:
    31f8:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    3208:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003213 <__c.4489>:
    3213:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3223:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003233 <__c.4472>:
    3233:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003241 <__c.4467>:
    3241:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000324f <__c.4465>:
    324f:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    325f:	73 0a 00                                            s..

00003262 <__c.4463>:
    3262:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3272:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000327a <__c.4446>:
    327a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003288 <__c.4443>:
    3288:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3298:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    32a8:	20 65 72 72 6f 72 0a 00                              error..

000032b0 <__c.4435>:
    32b0:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000032be <__c.4433>:
    32be:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32ce:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    32de:	20 65 72 72 6f 72 0a 00                              error..

000032e6 <__c.4430>:
    32e6:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32f6:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3306:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3316:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3326:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3336:	30 32 58 48 0a 00                                   02XH..

0000333c <__c.4428>:
    333c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    334c:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    335c:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    336c:	20 25 64 0a 00                                       %d..

00003371 <__c.4424>:
    3371:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003381 <__c.4422>:
    3381:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3391:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    33a1:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    33b1:	30 78 45 30 31 33 0a 00                             0xE013..

000033b9 <__c.4420>:
    33b9:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    33c9:	6e 64 3a 25 73 0a 00                                nd:%s..

000033d0 <__c.4418>:
    33d0:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    33e0:	75 6e 64 3a 25 73 0a 00                             und:%s..

000033e8 <__c.4394>:
    33e8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000033f6 <__c.4392>:
    33f6:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3406:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000340f <__c.4390>:
    340f:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    341f:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003428 <__c.4388>:
    3428:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3438:	20 20 25 34 64 0a 00                                  %4d..

0000343f <__c.4386>:
    343f:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    344f:	20 20 20 25 73 0a 00                                   %s..

00003456 <__c.4384>:
    3456:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3466:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3476:	77 72 69 74 65 0a 00                                write..

0000347d <__c.4382>:
    347d:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    348d:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    349d:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034ad <__c.4380>:
    34ad:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34bd:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34cd:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034dc <__c.4378>:
    34dc:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34ec:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    34fc:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000350c <__c.4376>:
    350c:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    351c:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    352c:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

0000353b <__c.4374>:
    353b:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    354b:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    355b:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003569 <__c.4372>:
    3569:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3579:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3589:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3599:	79 0a 00                                            y..

0000359c <__c.4358>:
    359c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035aa <__c.4356>:
    35aa:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035b8 <__c.4351>:
    35b8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035c6 <__c.4334>:
    35c6:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    35d6:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    35e6:	25 64 0a 00                                         %d..

000035ea <__c.4317>:
    35ea:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    35fa:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    360a:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    361a:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003623 <__c.4303>:
    3623:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3633:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3643:	62 69 67 0a 00                                      big..

00003648 <__c.4301>:
    3648:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3658:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3668:	63 74 65 72 73 0a 00                                cters..

0000366f <__c.4294>:
    366f:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    367f:	73 0a 00                                            s..

00003682 <__c.4292>:
    3682:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3692:	73 0a 00                                            s..

00003695 <__c.4290>:
    3695:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    36a5:	73 0a 00                                            s..

000036a8 <__c.4288>:
    36a8:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000036b9 <__c.4286>:
    36b9:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000036c6 <__c.4284>:
    36c6:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000036d2 <__c.4282>:
    36d2:	0a 00                                               ..

000036d4 <__c.4279>:
    36d4:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    36e4:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    36f4:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003704 <__c.4277>:
    3704:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3714:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3724:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3734:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3744:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003750 <__c.4274>:
    3750:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3760:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3770:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3780:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003790 <__c.4272>:
    3790:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    37a0:	3a 5b 25 73 5d 0a 00                                :[%s]..

000037a7 <__c.4262>:
    37a7:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37b7:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    37c7:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    37d7:	64 0a 00                                            d..

000037da <__c.4260>:
    37da:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37ea:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    37fa:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    380a:	64 0a 00                                            d..

0000380d <__c.4258>:
    380d:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    381d:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    382d:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    383d:	69 6c 65 64 0a 00                                   iled..

00003843 <__c.4256>:
    3843:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3853:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3863:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3873:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003882 <__c.4243>:
    3882:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3892:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    38a2:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    38b2:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    38c2:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000038d3 <__c.4240>:
    38d3:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38e3:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    38f3:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000038fc <__c.4238>:
    38fc:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    390c:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    391c:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    392c:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003934 <__c.4226>:
    3934:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3944:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3954:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3964:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3974:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003981 <__c.4201>:
    3981:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3991:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

000039a1 <__c.4192>:
    39a1:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    39b1:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    39c1:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    39d1:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000039db <__c.4173>:
    39db:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000039e8 <__c.4168>:
    39e8:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039f5 <__c.4163>:
    39f5:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003a02 <__c.4155>:
    3a02:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003a0f <__c.4153>:
    3a0f:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3a1f:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3a2f:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3a3f:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3a4f:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3a5f:	25 6c 64 0a 00                                      %ld..

00003a64 <__c.4137>:
    3a64:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a74:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3a84:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003a90 <__c.4135>:
    3a90:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3aa0:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ab0:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003abb <__c.4133>:
    3abb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3acb:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3adb:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3aeb:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3afb:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b06 <__c.4131>:
    3b06:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b16:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3b26:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b36:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3b46:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b51 <__c.4129>:
    3b51:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b61:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3b71:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003b7f <__c.4127>:
    3b7f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b8f:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3b9f:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3baf:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003bc0 <__c.4125>:
    3bc0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bd0:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3be0:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3bf0:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3c00:	58 68 0a 00                                         Xh..

00003c04 <__c.4123>:
    3c04:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c14:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003c25 <__c.4117>:
    3c25:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c35:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3c45:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003c51 <__c.4115>:
    3c51:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c61:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3c71:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003c80 <__c.4113>:
    3c80:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c90:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3ca0:	25 6c 64 0a 00                                      %ld..

00003ca5 <__c.4111>:
    3ca5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cb5:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3cc5:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3cd5:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cde <__c.4109>:
    3cde:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cee:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3cfe:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3d0e:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003d17 <__c.4107>:
    3d17:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3d27:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003d2f <__c.4105>:
    3d2f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d3f:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3d4f:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3d5f:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003d68 <__c.4103>:
    3d68:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d78:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003d87 <__c.4096>:
    3d87:	0a 00                                               ..

00003d89 <__c.4094>:
    3d89:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3d99:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003da3 <__c.4092>:
    3da3:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3db3:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003dbf <__c.4090>:
    3dbf:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3dcf:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ddc <__c.4088>:
    3ddc:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3dec:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003df9 <__c.4086>:
    3df9:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3e09:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e16 <__c.4084>:
    3e16:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3e26:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003e32 <__c.4082>:
    3e32:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3e42:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e4e <__c.4080>:
    3e4e:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3e5e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e68 <__c.4078>:
    3e68:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3e78:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e82 <__c.4076>:
    3e82:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3e92:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e9e <__c.4074>:
    3e9e:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3eae:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003eba <__c.4072>:
    3eba:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3eca:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ed7 <__c.4070>:
    3ed7:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3ee7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ef4 <__c.4068>:
    3ef4:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3f04:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003f10 <__c.4066>:
    3f10:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3f20:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f2a <__c.4064>:
    3f2a:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3f3a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f47 <__c.4062>:
    3f47:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3f57:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f64 <__c.4060>:
    3f64:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3f74:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f81 <__c.4058>:
    3f81:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3f91:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f9e <__c.4056>:
    3f9e:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3fae:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fbb <__c.4054>:
    3fbb:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3fcb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fd8 <__c.4052>:
    3fd8:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3fe8:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ff5 <__c.4050>:
    3ff5:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4005:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004012 <__c.4048>:
    4012:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4022:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000402c <__c.4046>:
    402c:	0a 25 73 0a 00                                      .%s..

00004031 <__c.3923>:
    4031:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4041:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4051:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4061:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

0000406e <__c.3914>:
    406e:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    407e:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    408e:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    409e:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000040aa <__c.3905>:
    40aa:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    40ba:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000040cb <__c.3898>:
    40cb:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    40db:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000040e4 <__c.3892>:
    40e4:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    40f4:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4104:	25 73 5d 0a 00                                      %s]..

00004109 <__c.3880>:
    4109:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4119:	6f 69 6e 74 65 72 0a 00                             ointer..

00004121 <__c.3875>:
    4121:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4131:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4141:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000414a <__c.3869>:
    414a:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    415a:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

0000416b <__c.3856>:
    416b:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    417b:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    418b:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    419b:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    41ab:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    41bb:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    41cb:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    41db:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    41eb:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    41fb:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    420b:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    421b:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    422b:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    423b:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    424b:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    425b:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    426b:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    427b:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    428b:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    429b:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    42ab:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    42bb:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    42cb:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    42db:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    42eb:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    42fb:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    430b:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    431b:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    432b:	75 67 67 69 6e 67 0a 0a 00                          ugging...

00004334 <__c.3854>:
    4334:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

0000433e <__c.4589>:
    433e:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    434e:	53 4b 0a 00                                         SK..

00004352 <__c.4587>:
    4352:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4362:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000436c <__c.4585>:
    436c:	25 2d 31 36 73 00                                   %-16s.

00004372 <__c.4583>:
    4372:	25 2d 31 36 73 00                                   %-16s.

00004378 <__c.4581>:
    4378:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

00004389 <__c.4579>:
    4389:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4399:	30 34 78 48 0a 00                                   04xH..

0000439f <__c.4577>:
    439f:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    43af:	64 6f 6e 65 0a 00                                   done..

000043b5 <__c.4575>:
    43b5:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    43c5:	6f 6e 65 0a 00                                      one..

000043ca <__c.4573>:
    43ca:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    43da:	61 6c 69 7a 65 64 0a 00                             alized..

000043e2 <__c.4571>:
    43e2:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    43f2:	0a 00                                               ..

000043f4 <__c.4569>:
    43f4:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4404:	7a 65 64 0a 00                                      zed..

00004409 <__c.4567>:
    4409:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4419:	69 7a 65 64 0a 00                                   ized..

0000441f <__c.4565>:
    441f:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004430 <__c.4563>:
    4430:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4440:	20 73 74 61 72 74 0a 00                              start..

00004448 <__c.4561>:
    4448:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    4458:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    4468:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

00004476 <__c.4559>:
    4476:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004485 <__c.4557>:
    4485:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4495:	0a 00                                               ..

00004497 <__c.4555>:
    4497:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    44a7:	20 62 75 73 0a 00                                    bus..

000044ad <__c.4553>:
    44ad:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    44bd:	20 62 75 73 0a 00                                    bus..

000044c3 <__c.4551>:
    44c3:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    44d3:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000044dd <__c.4549>:
    44dd:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    44ed:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000044f7 <__c.4547>:
    44f7:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4507:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4517:	35 64 69 73 6b 0a 00                                5disk..

0000451e <__c.4545>:
    451e:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000452e <__c.4543>:
    452e:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    453e:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000454b <__c.4541>:
    454b:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    455b:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000456a <__c.4539>:
    456a:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    457a:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    458a:	3a 20 25 6c 64 0a 00                                : %ld..

00004591 <__c.4537>:
    4591:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000045a2 <__c.4535>:
    45a2:	53 74 61 72 74 0a 00                                Start..

000045a9 <__c.4526>:
    45a9:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

000045b5 <__c.4524>:
    45b5:	4f 4b 0a 00                                         OK..

000045b9 <__c.4522>:
    45b9:	0a 3e 00                                            .>.

000045bc <__c.4511>:
    45bc:	68 65 6c 70 0a 6c 65 64 0a 6d 65 6d 0a 73 65 74     help.led.mem.set
    45cc:	64 61 74 65 0a 74 69 6d 65 0a 72 65 73 65 74 0a     date.time.reset.
    45dc:	0a 00                                               ..

000045de <__c.4504>:
    45de:	25 2d 31 36 73 00                                   %-16s.

000045e4 <__c.4502>:
    45e4:	25 2d 31 36 73 00                                   %-16s.

000045ea <__c.4495>:
    45ea:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    45fa:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004604 <__c.4493>:
    4604:	25 2d 31 36 73 00                                   %-16s.

0000460a <__c.4491>:
    460a:	25 2d 31 36 73 00                                   %-16s.

00004610 <__c.4489>:
    4610:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4620:	69 6c 65 64 0a 00                                   iled..

00004626 <__c.4487>:
    4626:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4636:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004644 <__c.4481>:
    4644:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4654:	3a 25 30 32 64 00                                   :%02d.

0000465a <__c.4467>:
    465a:	0a 00                                               ..

0000465c <__c.4465>:
    465c:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    466c:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004676 <__c.4463>:
    4676:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4686:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004690 <__c.4461>:
    4690:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    46a0:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    46b0:	35 64 69 73 6b 0a 00                                5disk..

000046b7 <__c.4459>:
    46b7:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000046c7 <__c.4457>:
    46c7:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    46d7:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000046e4 <__c.4455>:
    46e4:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    46f4:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004703 <__c.4453>:
    4703:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4713:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4723:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

00004734 <__ctors_end>:
    4734:	11 24       	eor	r1, r1
    4736:	1f be       	out	0x3f, r1	; 63
    4738:	cf ef       	ldi	r28, 0xFF	; 255
    473a:	d0 e4       	ldi	r29, 0x40	; 64
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	cd bf       	out	0x3d, r28	; 61

00004740 <__do_copy_data>:
    4740:	17 e1       	ldi	r17, 0x17	; 23
    4742:	a0 e0       	ldi	r26, 0x00	; 0
    4744:	b1 e0       	ldi	r27, 0x01	; 1
    4746:	ec e6       	ldi	r30, 0x6C	; 108
    4748:	f2 ed       	ldi	r31, 0xD2	; 210
    474a:	01 e0       	ldi	r16, 0x01	; 1
    474c:	0b bf       	out	0x3b, r16	; 59
    474e:	02 c0       	rjmp	.+4      	; 0x4754 <__do_copy_data+0x14>
    4750:	07 90       	elpm	r0, Z+
    4752:	0d 92       	st	X+, r0
    4754:	ac 35       	cpi	r26, 0x5C	; 92
    4756:	b1 07       	cpc	r27, r17
    4758:	d9 f7       	brne	.-10     	; 0x4750 <__do_copy_data+0x10>

0000475a <__do_clear_bss>:
    475a:	21 e2       	ldi	r18, 0x21	; 33
    475c:	ac e5       	ldi	r26, 0x5C	; 92
    475e:	b7 e1       	ldi	r27, 0x17	; 23
    4760:	01 c0       	rjmp	.+2      	; 0x4764 <.do_clear_bss_start>

00004762 <.do_clear_bss_loop>:
    4762:	1d 92       	st	X+, r1

00004764 <.do_clear_bss_start>:
    4764:	ac 3b       	cpi	r26, 0xBC	; 188
    4766:	b2 07       	cpc	r27, r18
    4768:	e1 f7       	brne	.-8      	; 0x4762 <.do_clear_bss_loop>
    476a:	0e 94 5f e1 	call	0x1c2be	; 0x1c2be <main>
    476e:	0c 94 34 e9 	jmp	0x1d268	; 0x1d268 <_exit>

00004772 <__bad_interrupt>:
    4772:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004776 <vfprintf>:
    4776:	2f 92       	push	r2
    4778:	3f 92       	push	r3
    477a:	4f 92       	push	r4
    477c:	5f 92       	push	r5
    477e:	6f 92       	push	r6
    4780:	7f 92       	push	r7
    4782:	8f 92       	push	r8
    4784:	9f 92       	push	r9
    4786:	af 92       	push	r10
    4788:	bf 92       	push	r11
    478a:	cf 92       	push	r12
    478c:	df 92       	push	r13
    478e:	ef 92       	push	r14
    4790:	ff 92       	push	r15
    4792:	0f 93       	push	r16
    4794:	1f 93       	push	r17
    4796:	cf 93       	push	r28
    4798:	df 93       	push	r29
    479a:	cd b7       	in	r28, 0x3d	; 61
    479c:	de b7       	in	r29, 0x3e	; 62
    479e:	60 97       	sbiw	r28, 0x10	; 16
    47a0:	0f b6       	in	r0, 0x3f	; 63
    47a2:	f8 94       	cli
    47a4:	de bf       	out	0x3e, r29	; 62
    47a6:	0f be       	out	0x3f, r0	; 63
    47a8:	cd bf       	out	0x3d, r28	; 61
    47aa:	7c 01       	movw	r14, r24
    47ac:	1b 01       	movw	r2, r22
    47ae:	6a 01       	movw	r12, r20
    47b0:	fc 01       	movw	r30, r24
    47b2:	17 82       	std	Z+7, r1	; 0x07
    47b4:	16 82       	std	Z+6, r1	; 0x06
    47b6:	83 81       	ldd	r24, Z+3	; 0x03
    47b8:	81 ff       	sbrs	r24, 1
    47ba:	44 c3       	rjmp	.+1672   	; 0x4e44 <vfprintf+0x6ce>
    47bc:	9e 01       	movw	r18, r28
    47be:	2f 5f       	subi	r18, 0xFF	; 255
    47c0:	3f 4f       	sbci	r19, 0xFF	; 255
    47c2:	39 01       	movw	r6, r18
    47c4:	f7 01       	movw	r30, r14
    47c6:	93 81       	ldd	r25, Z+3	; 0x03
    47c8:	f1 01       	movw	r30, r2
    47ca:	93 fd       	sbrc	r25, 3
    47cc:	85 91       	lpm	r24, Z+
    47ce:	93 ff       	sbrs	r25, 3
    47d0:	81 91       	ld	r24, Z+
    47d2:	1f 01       	movw	r2, r30
    47d4:	88 23       	and	r24, r24
    47d6:	09 f4       	brne	.+2      	; 0x47da <vfprintf+0x64>
    47d8:	31 c3       	rjmp	.+1634   	; 0x4e3c <vfprintf+0x6c6>
    47da:	85 32       	cpi	r24, 0x25	; 37
    47dc:	39 f4       	brne	.+14     	; 0x47ec <vfprintf+0x76>
    47de:	93 fd       	sbrc	r25, 3
    47e0:	85 91       	lpm	r24, Z+
    47e2:	93 ff       	sbrs	r25, 3
    47e4:	81 91       	ld	r24, Z+
    47e6:	1f 01       	movw	r2, r30
    47e8:	85 32       	cpi	r24, 0x25	; 37
    47ea:	39 f4       	brne	.+14     	; 0x47fa <vfprintf+0x84>
    47ec:	b7 01       	movw	r22, r14
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    47f4:	56 01       	movw	r10, r12
    47f6:	65 01       	movw	r12, r10
    47f8:	e5 cf       	rjmp	.-54     	; 0x47c4 <vfprintf+0x4e>
    47fa:	10 e0       	ldi	r17, 0x00	; 0
    47fc:	51 2c       	mov	r5, r1
    47fe:	91 2c       	mov	r9, r1
    4800:	ff e1       	ldi	r31, 0x1F	; 31
    4802:	f9 15       	cp	r31, r9
    4804:	d8 f0       	brcs	.+54     	; 0x483c <vfprintf+0xc6>
    4806:	8b 32       	cpi	r24, 0x2B	; 43
    4808:	79 f0       	breq	.+30     	; 0x4828 <vfprintf+0xb2>
    480a:	38 f4       	brcc	.+14     	; 0x481a <vfprintf+0xa4>
    480c:	80 32       	cpi	r24, 0x20	; 32
    480e:	79 f0       	breq	.+30     	; 0x482e <vfprintf+0xb8>
    4810:	83 32       	cpi	r24, 0x23	; 35
    4812:	a1 f4       	brne	.+40     	; 0x483c <vfprintf+0xc6>
    4814:	f9 2d       	mov	r31, r9
    4816:	f0 61       	ori	r31, 0x10	; 16
    4818:	2e c0       	rjmp	.+92     	; 0x4876 <vfprintf+0x100>
    481a:	8d 32       	cpi	r24, 0x2D	; 45
    481c:	61 f0       	breq	.+24     	; 0x4836 <vfprintf+0xc0>
    481e:	80 33       	cpi	r24, 0x30	; 48
    4820:	69 f4       	brne	.+26     	; 0x483c <vfprintf+0xc6>
    4822:	29 2d       	mov	r18, r9
    4824:	21 60       	ori	r18, 0x01	; 1
    4826:	2d c0       	rjmp	.+90     	; 0x4882 <vfprintf+0x10c>
    4828:	39 2d       	mov	r19, r9
    482a:	32 60       	ori	r19, 0x02	; 2
    482c:	93 2e       	mov	r9, r19
    482e:	89 2d       	mov	r24, r9
    4830:	84 60       	ori	r24, 0x04	; 4
    4832:	98 2e       	mov	r9, r24
    4834:	2a c0       	rjmp	.+84     	; 0x488a <vfprintf+0x114>
    4836:	e9 2d       	mov	r30, r9
    4838:	e8 60       	ori	r30, 0x08	; 8
    483a:	15 c0       	rjmp	.+42     	; 0x4866 <vfprintf+0xf0>
    483c:	97 fc       	sbrc	r9, 7
    483e:	2d c0       	rjmp	.+90     	; 0x489a <vfprintf+0x124>
    4840:	20 ed       	ldi	r18, 0xD0	; 208
    4842:	28 0f       	add	r18, r24
    4844:	2a 30       	cpi	r18, 0x0A	; 10
    4846:	88 f4       	brcc	.+34     	; 0x486a <vfprintf+0xf4>
    4848:	96 fe       	sbrs	r9, 6
    484a:	06 c0       	rjmp	.+12     	; 0x4858 <vfprintf+0xe2>
    484c:	3a e0       	ldi	r19, 0x0A	; 10
    484e:	13 9f       	mul	r17, r19
    4850:	20 0d       	add	r18, r0
    4852:	11 24       	eor	r1, r1
    4854:	12 2f       	mov	r17, r18
    4856:	19 c0       	rjmp	.+50     	; 0x488a <vfprintf+0x114>
    4858:	8a e0       	ldi	r24, 0x0A	; 10
    485a:	58 9e       	mul	r5, r24
    485c:	20 0d       	add	r18, r0
    485e:	11 24       	eor	r1, r1
    4860:	52 2e       	mov	r5, r18
    4862:	e9 2d       	mov	r30, r9
    4864:	e0 62       	ori	r30, 0x20	; 32
    4866:	9e 2e       	mov	r9, r30
    4868:	10 c0       	rjmp	.+32     	; 0x488a <vfprintf+0x114>
    486a:	8e 32       	cpi	r24, 0x2E	; 46
    486c:	31 f4       	brne	.+12     	; 0x487a <vfprintf+0x104>
    486e:	96 fc       	sbrc	r9, 6
    4870:	e5 c2       	rjmp	.+1482   	; 0x4e3c <vfprintf+0x6c6>
    4872:	f9 2d       	mov	r31, r9
    4874:	f0 64       	ori	r31, 0x40	; 64
    4876:	9f 2e       	mov	r9, r31
    4878:	08 c0       	rjmp	.+16     	; 0x488a <vfprintf+0x114>
    487a:	8c 36       	cpi	r24, 0x6C	; 108
    487c:	21 f4       	brne	.+8      	; 0x4886 <vfprintf+0x110>
    487e:	29 2d       	mov	r18, r9
    4880:	20 68       	ori	r18, 0x80	; 128
    4882:	92 2e       	mov	r9, r18
    4884:	02 c0       	rjmp	.+4      	; 0x488a <vfprintf+0x114>
    4886:	88 36       	cpi	r24, 0x68	; 104
    4888:	41 f4       	brne	.+16     	; 0x489a <vfprintf+0x124>
    488a:	f1 01       	movw	r30, r2
    488c:	93 fd       	sbrc	r25, 3
    488e:	85 91       	lpm	r24, Z+
    4890:	93 ff       	sbrs	r25, 3
    4892:	81 91       	ld	r24, Z+
    4894:	1f 01       	movw	r2, r30
    4896:	81 11       	cpse	r24, r1
    4898:	b3 cf       	rjmp	.-154    	; 0x4800 <vfprintf+0x8a>
    489a:	9b eb       	ldi	r25, 0xBB	; 187
    489c:	98 0f       	add	r25, r24
    489e:	93 30       	cpi	r25, 0x03	; 3
    48a0:	20 f4       	brcc	.+8      	; 0x48aa <vfprintf+0x134>
    48a2:	99 2d       	mov	r25, r9
    48a4:	90 61       	ori	r25, 0x10	; 16
    48a6:	80 5e       	subi	r24, 0xE0	; 224
    48a8:	07 c0       	rjmp	.+14     	; 0x48b8 <vfprintf+0x142>
    48aa:	9b e9       	ldi	r25, 0x9B	; 155
    48ac:	98 0f       	add	r25, r24
    48ae:	93 30       	cpi	r25, 0x03	; 3
    48b0:	08 f0       	brcs	.+2      	; 0x48b4 <vfprintf+0x13e>
    48b2:	66 c1       	rjmp	.+716    	; 0x4b80 <vfprintf+0x40a>
    48b4:	99 2d       	mov	r25, r9
    48b6:	9f 7e       	andi	r25, 0xEF	; 239
    48b8:	96 ff       	sbrs	r25, 6
    48ba:	16 e0       	ldi	r17, 0x06	; 6
    48bc:	9f 73       	andi	r25, 0x3F	; 63
    48be:	99 2e       	mov	r9, r25
    48c0:	85 36       	cpi	r24, 0x65	; 101
    48c2:	19 f4       	brne	.+6      	; 0x48ca <vfprintf+0x154>
    48c4:	90 64       	ori	r25, 0x40	; 64
    48c6:	99 2e       	mov	r9, r25
    48c8:	08 c0       	rjmp	.+16     	; 0x48da <vfprintf+0x164>
    48ca:	86 36       	cpi	r24, 0x66	; 102
    48cc:	21 f4       	brne	.+8      	; 0x48d6 <vfprintf+0x160>
    48ce:	39 2f       	mov	r19, r25
    48d0:	30 68       	ori	r19, 0x80	; 128
    48d2:	93 2e       	mov	r9, r19
    48d4:	02 c0       	rjmp	.+4      	; 0x48da <vfprintf+0x164>
    48d6:	11 11       	cpse	r17, r1
    48d8:	11 50       	subi	r17, 0x01	; 1
    48da:	97 fe       	sbrs	r9, 7
    48dc:	07 c0       	rjmp	.+14     	; 0x48ec <vfprintf+0x176>
    48de:	1c 33       	cpi	r17, 0x3C	; 60
    48e0:	50 f4       	brcc	.+20     	; 0x48f6 <vfprintf+0x180>
    48e2:	44 24       	eor	r4, r4
    48e4:	43 94       	inc	r4
    48e6:	41 0e       	add	r4, r17
    48e8:	27 e0       	ldi	r18, 0x07	; 7
    48ea:	0b c0       	rjmp	.+22     	; 0x4902 <vfprintf+0x18c>
    48ec:	18 30       	cpi	r17, 0x08	; 8
    48ee:	38 f0       	brcs	.+14     	; 0x48fe <vfprintf+0x188>
    48f0:	27 e0       	ldi	r18, 0x07	; 7
    48f2:	17 e0       	ldi	r17, 0x07	; 7
    48f4:	05 c0       	rjmp	.+10     	; 0x4900 <vfprintf+0x18a>
    48f6:	27 e0       	ldi	r18, 0x07	; 7
    48f8:	9c e3       	ldi	r25, 0x3C	; 60
    48fa:	49 2e       	mov	r4, r25
    48fc:	02 c0       	rjmp	.+4      	; 0x4902 <vfprintf+0x18c>
    48fe:	21 2f       	mov	r18, r17
    4900:	41 2c       	mov	r4, r1
    4902:	56 01       	movw	r10, r12
    4904:	84 e0       	ldi	r24, 0x04	; 4
    4906:	a8 0e       	add	r10, r24
    4908:	b1 1c       	adc	r11, r1
    490a:	f6 01       	movw	r30, r12
    490c:	60 81       	ld	r22, Z
    490e:	71 81       	ldd	r23, Z+1	; 0x01
    4910:	82 81       	ldd	r24, Z+2	; 0x02
    4912:	93 81       	ldd	r25, Z+3	; 0x03
    4914:	04 2d       	mov	r16, r4
    4916:	a3 01       	movw	r20, r6
    4918:	0e 94 e1 e7 	call	0x1cfc2	; 0x1cfc2 <__ftoa_engine>
    491c:	6c 01       	movw	r12, r24
    491e:	f9 81       	ldd	r31, Y+1	; 0x01
    4920:	fc 87       	std	Y+12, r31	; 0x0c
    4922:	f0 ff       	sbrs	r31, 0
    4924:	02 c0       	rjmp	.+4      	; 0x492a <vfprintf+0x1b4>
    4926:	f3 ff       	sbrs	r31, 3
    4928:	06 c0       	rjmp	.+12     	; 0x4936 <vfprintf+0x1c0>
    492a:	91 fc       	sbrc	r9, 1
    492c:	06 c0       	rjmp	.+12     	; 0x493a <vfprintf+0x1c4>
    492e:	92 fe       	sbrs	r9, 2
    4930:	06 c0       	rjmp	.+12     	; 0x493e <vfprintf+0x1c8>
    4932:	00 e2       	ldi	r16, 0x20	; 32
    4934:	05 c0       	rjmp	.+10     	; 0x4940 <vfprintf+0x1ca>
    4936:	0d e2       	ldi	r16, 0x2D	; 45
    4938:	03 c0       	rjmp	.+6      	; 0x4940 <vfprintf+0x1ca>
    493a:	0b e2       	ldi	r16, 0x2B	; 43
    493c:	01 c0       	rjmp	.+2      	; 0x4940 <vfprintf+0x1ca>
    493e:	00 e0       	ldi	r16, 0x00	; 0
    4940:	8c 85       	ldd	r24, Y+12	; 0x0c
    4942:	8c 70       	andi	r24, 0x0C	; 12
    4944:	19 f0       	breq	.+6      	; 0x494c <vfprintf+0x1d6>
    4946:	01 11       	cpse	r16, r1
    4948:	5a c2       	rjmp	.+1204   	; 0x4dfe <vfprintf+0x688>
    494a:	9b c2       	rjmp	.+1334   	; 0x4e82 <vfprintf+0x70c>
    494c:	97 fe       	sbrs	r9, 7
    494e:	10 c0       	rjmp	.+32     	; 0x4970 <vfprintf+0x1fa>
    4950:	4c 0c       	add	r4, r12
    4952:	fc 85       	ldd	r31, Y+12	; 0x0c
    4954:	f4 ff       	sbrs	r31, 4
    4956:	04 c0       	rjmp	.+8      	; 0x4960 <vfprintf+0x1ea>
    4958:	8a 81       	ldd	r24, Y+2	; 0x02
    495a:	81 33       	cpi	r24, 0x31	; 49
    495c:	09 f4       	brne	.+2      	; 0x4960 <vfprintf+0x1ea>
    495e:	4a 94       	dec	r4
    4960:	14 14       	cp	r1, r4
    4962:	74 f5       	brge	.+92     	; 0x49c0 <vfprintf+0x24a>
    4964:	28 e0       	ldi	r18, 0x08	; 8
    4966:	24 15       	cp	r18, r4
    4968:	78 f5       	brcc	.+94     	; 0x49c8 <vfprintf+0x252>
    496a:	88 e0       	ldi	r24, 0x08	; 8
    496c:	48 2e       	mov	r4, r24
    496e:	2c c0       	rjmp	.+88     	; 0x49c8 <vfprintf+0x252>
    4970:	96 fc       	sbrc	r9, 6
    4972:	2a c0       	rjmp	.+84     	; 0x49c8 <vfprintf+0x252>
    4974:	81 2f       	mov	r24, r17
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	8c 15       	cp	r24, r12
    497a:	9d 05       	cpc	r25, r13
    497c:	9c f0       	brlt	.+38     	; 0x49a4 <vfprintf+0x22e>
    497e:	3c ef       	ldi	r19, 0xFC	; 252
    4980:	c3 16       	cp	r12, r19
    4982:	3f ef       	ldi	r19, 0xFF	; 255
    4984:	d3 06       	cpc	r13, r19
    4986:	74 f0       	brlt	.+28     	; 0x49a4 <vfprintf+0x22e>
    4988:	89 2d       	mov	r24, r9
    498a:	80 68       	ori	r24, 0x80	; 128
    498c:	98 2e       	mov	r9, r24
    498e:	0a c0       	rjmp	.+20     	; 0x49a4 <vfprintf+0x22e>
    4990:	e2 e0       	ldi	r30, 0x02	; 2
    4992:	f0 e0       	ldi	r31, 0x00	; 0
    4994:	ec 0f       	add	r30, r28
    4996:	fd 1f       	adc	r31, r29
    4998:	e1 0f       	add	r30, r17
    499a:	f1 1d       	adc	r31, r1
    499c:	80 81       	ld	r24, Z
    499e:	80 33       	cpi	r24, 0x30	; 48
    49a0:	19 f4       	brne	.+6      	; 0x49a8 <vfprintf+0x232>
    49a2:	11 50       	subi	r17, 0x01	; 1
    49a4:	11 11       	cpse	r17, r1
    49a6:	f4 cf       	rjmp	.-24     	; 0x4990 <vfprintf+0x21a>
    49a8:	97 fe       	sbrs	r9, 7
    49aa:	0e c0       	rjmp	.+28     	; 0x49c8 <vfprintf+0x252>
    49ac:	44 24       	eor	r4, r4
    49ae:	43 94       	inc	r4
    49b0:	41 0e       	add	r4, r17
    49b2:	81 2f       	mov	r24, r17
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	c8 16       	cp	r12, r24
    49b8:	d9 06       	cpc	r13, r25
    49ba:	2c f4       	brge	.+10     	; 0x49c6 <vfprintf+0x250>
    49bc:	1c 19       	sub	r17, r12
    49be:	04 c0       	rjmp	.+8      	; 0x49c8 <vfprintf+0x252>
    49c0:	44 24       	eor	r4, r4
    49c2:	43 94       	inc	r4
    49c4:	01 c0       	rjmp	.+2      	; 0x49c8 <vfprintf+0x252>
    49c6:	10 e0       	ldi	r17, 0x00	; 0
    49c8:	97 fe       	sbrs	r9, 7
    49ca:	06 c0       	rjmp	.+12     	; 0x49d8 <vfprintf+0x262>
    49cc:	1c 14       	cp	r1, r12
    49ce:	1d 04       	cpc	r1, r13
    49d0:	34 f4       	brge	.+12     	; 0x49de <vfprintf+0x268>
    49d2:	c6 01       	movw	r24, r12
    49d4:	01 96       	adiw	r24, 0x01	; 1
    49d6:	05 c0       	rjmp	.+10     	; 0x49e2 <vfprintf+0x26c>
    49d8:	85 e0       	ldi	r24, 0x05	; 5
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	02 c0       	rjmp	.+4      	; 0x49e2 <vfprintf+0x26c>
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	01 11       	cpse	r16, r1
    49e4:	01 96       	adiw	r24, 0x01	; 1
    49e6:	11 23       	and	r17, r17
    49e8:	31 f0       	breq	.+12     	; 0x49f6 <vfprintf+0x280>
    49ea:	21 2f       	mov	r18, r17
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	2f 5f       	subi	r18, 0xFF	; 255
    49f0:	3f 4f       	sbci	r19, 0xFF	; 255
    49f2:	82 0f       	add	r24, r18
    49f4:	93 1f       	adc	r25, r19
    49f6:	25 2d       	mov	r18, r5
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	82 17       	cp	r24, r18
    49fc:	93 07       	cpc	r25, r19
    49fe:	14 f4       	brge	.+4      	; 0x4a04 <vfprintf+0x28e>
    4a00:	58 1a       	sub	r5, r24
    4a02:	01 c0       	rjmp	.+2      	; 0x4a06 <vfprintf+0x290>
    4a04:	51 2c       	mov	r5, r1
    4a06:	89 2d       	mov	r24, r9
    4a08:	89 70       	andi	r24, 0x09	; 9
    4a0a:	49 f4       	brne	.+18     	; 0x4a1e <vfprintf+0x2a8>
    4a0c:	55 20       	and	r5, r5
    4a0e:	39 f0       	breq	.+14     	; 0x4a1e <vfprintf+0x2a8>
    4a10:	b7 01       	movw	r22, r14
    4a12:	80 e2       	ldi	r24, 0x20	; 32
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4a1a:	5a 94       	dec	r5
    4a1c:	f7 cf       	rjmp	.-18     	; 0x4a0c <vfprintf+0x296>
    4a1e:	00 23       	and	r16, r16
    4a20:	29 f0       	breq	.+10     	; 0x4a2c <vfprintf+0x2b6>
    4a22:	b7 01       	movw	r22, r14
    4a24:	80 2f       	mov	r24, r16
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4a2c:	93 fc       	sbrc	r9, 3
    4a2e:	09 c0       	rjmp	.+18     	; 0x4a42 <vfprintf+0x2cc>
    4a30:	55 20       	and	r5, r5
    4a32:	39 f0       	breq	.+14     	; 0x4a42 <vfprintf+0x2cc>
    4a34:	b7 01       	movw	r22, r14
    4a36:	80 e3       	ldi	r24, 0x30	; 48
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4a3e:	5a 94       	dec	r5
    4a40:	f7 cf       	rjmp	.-18     	; 0x4a30 <vfprintf+0x2ba>
    4a42:	97 fe       	sbrs	r9, 7
    4a44:	4c c0       	rjmp	.+152    	; 0x4ade <vfprintf+0x368>
    4a46:	46 01       	movw	r8, r12
    4a48:	d7 fe       	sbrs	r13, 7
    4a4a:	02 c0       	rjmp	.+4      	; 0x4a50 <vfprintf+0x2da>
    4a4c:	81 2c       	mov	r8, r1
    4a4e:	91 2c       	mov	r9, r1
    4a50:	c6 01       	movw	r24, r12
    4a52:	88 19       	sub	r24, r8
    4a54:	99 09       	sbc	r25, r9
    4a56:	f3 01       	movw	r30, r6
    4a58:	e8 0f       	add	r30, r24
    4a5a:	f9 1f       	adc	r31, r25
    4a5c:	fe 87       	std	Y+14, r31	; 0x0e
    4a5e:	ed 87       	std	Y+13, r30	; 0x0d
    4a60:	96 01       	movw	r18, r12
    4a62:	24 19       	sub	r18, r4
    4a64:	31 09       	sbc	r19, r1
    4a66:	38 8b       	std	Y+16, r19	; 0x10
    4a68:	2f 87       	std	Y+15, r18	; 0x0f
    4a6a:	01 2f       	mov	r16, r17
    4a6c:	10 e0       	ldi	r17, 0x00	; 0
    4a6e:	11 95       	neg	r17
    4a70:	01 95       	neg	r16
    4a72:	11 09       	sbc	r17, r1
    4a74:	3f ef       	ldi	r19, 0xFF	; 255
    4a76:	83 16       	cp	r8, r19
    4a78:	93 06       	cpc	r9, r19
    4a7a:	29 f4       	brne	.+10     	; 0x4a86 <vfprintf+0x310>
    4a7c:	b7 01       	movw	r22, r14
    4a7e:	8e e2       	ldi	r24, 0x2E	; 46
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4a86:	c8 14       	cp	r12, r8
    4a88:	d9 04       	cpc	r13, r9
    4a8a:	4c f0       	brlt	.+18     	; 0x4a9e <vfprintf+0x328>
    4a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a8e:	98 89       	ldd	r25, Y+16	; 0x10
    4a90:	88 15       	cp	r24, r8
    4a92:	99 05       	cpc	r25, r9
    4a94:	24 f4       	brge	.+8      	; 0x4a9e <vfprintf+0x328>
    4a96:	ed 85       	ldd	r30, Y+13	; 0x0d
    4a98:	fe 85       	ldd	r31, Y+14	; 0x0e
    4a9a:	81 81       	ldd	r24, Z+1	; 0x01
    4a9c:	01 c0       	rjmp	.+2      	; 0x4aa0 <vfprintf+0x32a>
    4a9e:	80 e3       	ldi	r24, 0x30	; 48
    4aa0:	f1 e0       	ldi	r31, 0x01	; 1
    4aa2:	8f 1a       	sub	r8, r31
    4aa4:	91 08       	sbc	r9, r1
    4aa6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4aa8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4aaa:	2f 5f       	subi	r18, 0xFF	; 255
    4aac:	3f 4f       	sbci	r19, 0xFF	; 255
    4aae:	3e 87       	std	Y+14, r19	; 0x0e
    4ab0:	2d 87       	std	Y+13, r18	; 0x0d
    4ab2:	80 16       	cp	r8, r16
    4ab4:	91 06       	cpc	r9, r17
    4ab6:	2c f0       	brlt	.+10     	; 0x4ac2 <vfprintf+0x34c>
    4ab8:	b7 01       	movw	r22, r14
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4ac0:	d9 cf       	rjmp	.-78     	; 0x4a74 <vfprintf+0x2fe>
    4ac2:	c8 14       	cp	r12, r8
    4ac4:	d9 04       	cpc	r13, r9
    4ac6:	41 f4       	brne	.+16     	; 0x4ad8 <vfprintf+0x362>
    4ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aca:	96 33       	cpi	r25, 0x36	; 54
    4acc:	20 f4       	brcc	.+8      	; 0x4ad6 <vfprintf+0x360>
    4ace:	95 33       	cpi	r25, 0x35	; 53
    4ad0:	19 f4       	brne	.+6      	; 0x4ad8 <vfprintf+0x362>
    4ad2:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ad4:	34 ff       	sbrs	r19, 4
    4ad6:	81 e3       	ldi	r24, 0x31	; 49
    4ad8:	b7 01       	movw	r22, r14
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	4e c0       	rjmp	.+156    	; 0x4b7a <vfprintf+0x404>
    4ade:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae0:	81 33       	cpi	r24, 0x31	; 49
    4ae2:	19 f0       	breq	.+6      	; 0x4aea <vfprintf+0x374>
    4ae4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ae6:	9f 7e       	andi	r25, 0xEF	; 239
    4ae8:	9c 87       	std	Y+12, r25	; 0x0c
    4aea:	b7 01       	movw	r22, r14
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4af2:	11 11       	cpse	r17, r1
    4af4:	05 c0       	rjmp	.+10     	; 0x4b00 <vfprintf+0x38a>
    4af6:	94 fc       	sbrc	r9, 4
    4af8:	18 c0       	rjmp	.+48     	; 0x4b2a <vfprintf+0x3b4>
    4afa:	85 e6       	ldi	r24, 0x65	; 101
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	17 c0       	rjmp	.+46     	; 0x4b2e <vfprintf+0x3b8>
    4b00:	b7 01       	movw	r22, r14
    4b02:	8e e2       	ldi	r24, 0x2E	; 46
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4b0a:	1e 5f       	subi	r17, 0xFE	; 254
    4b0c:	82 e0       	ldi	r24, 0x02	; 2
    4b0e:	01 e0       	ldi	r16, 0x01	; 1
    4b10:	08 0f       	add	r16, r24
    4b12:	f3 01       	movw	r30, r6
    4b14:	e8 0f       	add	r30, r24
    4b16:	f1 1d       	adc	r31, r1
    4b18:	80 81       	ld	r24, Z
    4b1a:	b7 01       	movw	r22, r14
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4b22:	80 2f       	mov	r24, r16
    4b24:	01 13       	cpse	r16, r17
    4b26:	f3 cf       	rjmp	.-26     	; 0x4b0e <vfprintf+0x398>
    4b28:	e6 cf       	rjmp	.-52     	; 0x4af6 <vfprintf+0x380>
    4b2a:	85 e4       	ldi	r24, 0x45	; 69
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	b7 01       	movw	r22, r14
    4b30:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4b34:	d7 fc       	sbrc	r13, 7
    4b36:	06 c0       	rjmp	.+12     	; 0x4b44 <vfprintf+0x3ce>
    4b38:	c1 14       	cp	r12, r1
    4b3a:	d1 04       	cpc	r13, r1
    4b3c:	41 f4       	brne	.+16     	; 0x4b4e <vfprintf+0x3d8>
    4b3e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4b40:	e4 ff       	sbrs	r30, 4
    4b42:	05 c0       	rjmp	.+10     	; 0x4b4e <vfprintf+0x3d8>
    4b44:	d1 94       	neg	r13
    4b46:	c1 94       	neg	r12
    4b48:	d1 08       	sbc	r13, r1
    4b4a:	8d e2       	ldi	r24, 0x2D	; 45
    4b4c:	01 c0       	rjmp	.+2      	; 0x4b50 <vfprintf+0x3da>
    4b4e:	8b e2       	ldi	r24, 0x2B	; 43
    4b50:	b7 01       	movw	r22, r14
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4b58:	80 e3       	ldi	r24, 0x30	; 48
    4b5a:	2a e0       	ldi	r18, 0x0A	; 10
    4b5c:	c2 16       	cp	r12, r18
    4b5e:	d1 04       	cpc	r13, r1
    4b60:	2c f0       	brlt	.+10     	; 0x4b6c <vfprintf+0x3f6>
    4b62:	8f 5f       	subi	r24, 0xFF	; 255
    4b64:	fa e0       	ldi	r31, 0x0A	; 10
    4b66:	cf 1a       	sub	r12, r31
    4b68:	d1 08       	sbc	r13, r1
    4b6a:	f7 cf       	rjmp	.-18     	; 0x4b5a <vfprintf+0x3e4>
    4b6c:	b7 01       	movw	r22, r14
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4b74:	b7 01       	movw	r22, r14
    4b76:	c6 01       	movw	r24, r12
    4b78:	c0 96       	adiw	r24, 0x30	; 48
    4b7a:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4b7e:	54 c1       	rjmp	.+680    	; 0x4e28 <vfprintf+0x6b2>
    4b80:	83 36       	cpi	r24, 0x63	; 99
    4b82:	31 f0       	breq	.+12     	; 0x4b90 <vfprintf+0x41a>
    4b84:	83 37       	cpi	r24, 0x73	; 115
    4b86:	79 f0       	breq	.+30     	; 0x4ba6 <vfprintf+0x430>
    4b88:	83 35       	cpi	r24, 0x53	; 83
    4b8a:	09 f0       	breq	.+2      	; 0x4b8e <vfprintf+0x418>
    4b8c:	56 c0       	rjmp	.+172    	; 0x4c3a <vfprintf+0x4c4>
    4b8e:	20 c0       	rjmp	.+64     	; 0x4bd0 <vfprintf+0x45a>
    4b90:	56 01       	movw	r10, r12
    4b92:	32 e0       	ldi	r19, 0x02	; 2
    4b94:	a3 0e       	add	r10, r19
    4b96:	b1 1c       	adc	r11, r1
    4b98:	f6 01       	movw	r30, r12
    4b9a:	80 81       	ld	r24, Z
    4b9c:	89 83       	std	Y+1, r24	; 0x01
    4b9e:	01 e0       	ldi	r16, 0x01	; 1
    4ba0:	10 e0       	ldi	r17, 0x00	; 0
    4ba2:	63 01       	movw	r12, r6
    4ba4:	12 c0       	rjmp	.+36     	; 0x4bca <vfprintf+0x454>
    4ba6:	56 01       	movw	r10, r12
    4ba8:	f2 e0       	ldi	r31, 0x02	; 2
    4baa:	af 0e       	add	r10, r31
    4bac:	b1 1c       	adc	r11, r1
    4bae:	f6 01       	movw	r30, r12
    4bb0:	c0 80       	ld	r12, Z
    4bb2:	d1 80       	ldd	r13, Z+1	; 0x01
    4bb4:	96 fe       	sbrs	r9, 6
    4bb6:	03 c0       	rjmp	.+6      	; 0x4bbe <vfprintf+0x448>
    4bb8:	61 2f       	mov	r22, r17
    4bba:	70 e0       	ldi	r23, 0x00	; 0
    4bbc:	02 c0       	rjmp	.+4      	; 0x4bc2 <vfprintf+0x44c>
    4bbe:	6f ef       	ldi	r22, 0xFF	; 255
    4bc0:	7f ef       	ldi	r23, 0xFF	; 255
    4bc2:	c6 01       	movw	r24, r12
    4bc4:	0e 94 cb e8 	call	0x1d196	; 0x1d196 <strnlen>
    4bc8:	8c 01       	movw	r16, r24
    4bca:	f9 2d       	mov	r31, r9
    4bcc:	ff 77       	andi	r31, 0x7F	; 127
    4bce:	14 c0       	rjmp	.+40     	; 0x4bf8 <vfprintf+0x482>
    4bd0:	56 01       	movw	r10, r12
    4bd2:	22 e0       	ldi	r18, 0x02	; 2
    4bd4:	a2 0e       	add	r10, r18
    4bd6:	b1 1c       	adc	r11, r1
    4bd8:	f6 01       	movw	r30, r12
    4bda:	c0 80       	ld	r12, Z
    4bdc:	d1 80       	ldd	r13, Z+1	; 0x01
    4bde:	96 fe       	sbrs	r9, 6
    4be0:	03 c0       	rjmp	.+6      	; 0x4be8 <vfprintf+0x472>
    4be2:	61 2f       	mov	r22, r17
    4be4:	70 e0       	ldi	r23, 0x00	; 0
    4be6:	02 c0       	rjmp	.+4      	; 0x4bec <vfprintf+0x476>
    4be8:	6f ef       	ldi	r22, 0xFF	; 255
    4bea:	7f ef       	ldi	r23, 0xFF	; 255
    4bec:	c6 01       	movw	r24, r12
    4bee:	0e 94 b9 e8 	call	0x1d172	; 0x1d172 <strnlen_P>
    4bf2:	8c 01       	movw	r16, r24
    4bf4:	f9 2d       	mov	r31, r9
    4bf6:	f0 68       	ori	r31, 0x80	; 128
    4bf8:	9f 2e       	mov	r9, r31
    4bfa:	f3 fd       	sbrc	r31, 3
    4bfc:	1a c0       	rjmp	.+52     	; 0x4c32 <vfprintf+0x4bc>
    4bfe:	85 2d       	mov	r24, r5
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	08 17       	cp	r16, r24
    4c04:	19 07       	cpc	r17, r25
    4c06:	a8 f4       	brcc	.+42     	; 0x4c32 <vfprintf+0x4bc>
    4c08:	b7 01       	movw	r22, r14
    4c0a:	80 e2       	ldi	r24, 0x20	; 32
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4c12:	5a 94       	dec	r5
    4c14:	f4 cf       	rjmp	.-24     	; 0x4bfe <vfprintf+0x488>
    4c16:	f6 01       	movw	r30, r12
    4c18:	97 fc       	sbrc	r9, 7
    4c1a:	85 91       	lpm	r24, Z+
    4c1c:	97 fe       	sbrs	r9, 7
    4c1e:	81 91       	ld	r24, Z+
    4c20:	6f 01       	movw	r12, r30
    4c22:	b7 01       	movw	r22, r14
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4c2a:	51 10       	cpse	r5, r1
    4c2c:	5a 94       	dec	r5
    4c2e:	01 50       	subi	r16, 0x01	; 1
    4c30:	11 09       	sbc	r17, r1
    4c32:	01 15       	cp	r16, r1
    4c34:	11 05       	cpc	r17, r1
    4c36:	79 f7       	brne	.-34     	; 0x4c16 <vfprintf+0x4a0>
    4c38:	f7 c0       	rjmp	.+494    	; 0x4e28 <vfprintf+0x6b2>
    4c3a:	84 36       	cpi	r24, 0x64	; 100
    4c3c:	11 f0       	breq	.+4      	; 0x4c42 <vfprintf+0x4cc>
    4c3e:	89 36       	cpi	r24, 0x69	; 105
    4c40:	61 f5       	brne	.+88     	; 0x4c9a <vfprintf+0x524>
    4c42:	56 01       	movw	r10, r12
    4c44:	97 fe       	sbrs	r9, 7
    4c46:	09 c0       	rjmp	.+18     	; 0x4c5a <vfprintf+0x4e4>
    4c48:	24 e0       	ldi	r18, 0x04	; 4
    4c4a:	a2 0e       	add	r10, r18
    4c4c:	b1 1c       	adc	r11, r1
    4c4e:	f6 01       	movw	r30, r12
    4c50:	60 81       	ld	r22, Z
    4c52:	71 81       	ldd	r23, Z+1	; 0x01
    4c54:	82 81       	ldd	r24, Z+2	; 0x02
    4c56:	93 81       	ldd	r25, Z+3	; 0x03
    4c58:	0a c0       	rjmp	.+20     	; 0x4c6e <vfprintf+0x4f8>
    4c5a:	f2 e0       	ldi	r31, 0x02	; 2
    4c5c:	af 0e       	add	r10, r31
    4c5e:	b1 1c       	adc	r11, r1
    4c60:	f6 01       	movw	r30, r12
    4c62:	60 81       	ld	r22, Z
    4c64:	71 81       	ldd	r23, Z+1	; 0x01
    4c66:	07 2e       	mov	r0, r23
    4c68:	00 0c       	add	r0, r0
    4c6a:	88 0b       	sbc	r24, r24
    4c6c:	99 0b       	sbc	r25, r25
    4c6e:	f9 2d       	mov	r31, r9
    4c70:	ff 76       	andi	r31, 0x6F	; 111
    4c72:	9f 2e       	mov	r9, r31
    4c74:	97 ff       	sbrs	r25, 7
    4c76:	09 c0       	rjmp	.+18     	; 0x4c8a <vfprintf+0x514>
    4c78:	90 95       	com	r25
    4c7a:	80 95       	com	r24
    4c7c:	70 95       	com	r23
    4c7e:	61 95       	neg	r22
    4c80:	7f 4f       	sbci	r23, 0xFF	; 255
    4c82:	8f 4f       	sbci	r24, 0xFF	; 255
    4c84:	9f 4f       	sbci	r25, 0xFF	; 255
    4c86:	f0 68       	ori	r31, 0x80	; 128
    4c88:	9f 2e       	mov	r9, r31
    4c8a:	2a e0       	ldi	r18, 0x0A	; 10
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	a3 01       	movw	r20, r6
    4c90:	0e 94 d6 e8 	call	0x1d1ac	; 0x1d1ac <__ultoa_invert>
    4c94:	c8 2e       	mov	r12, r24
    4c96:	c6 18       	sub	r12, r6
    4c98:	3f c0       	rjmp	.+126    	; 0x4d18 <vfprintf+0x5a2>
    4c9a:	09 2d       	mov	r16, r9
    4c9c:	85 37       	cpi	r24, 0x75	; 117
    4c9e:	21 f4       	brne	.+8      	; 0x4ca8 <vfprintf+0x532>
    4ca0:	0f 7e       	andi	r16, 0xEF	; 239
    4ca2:	2a e0       	ldi	r18, 0x0A	; 10
    4ca4:	30 e0       	ldi	r19, 0x00	; 0
    4ca6:	1d c0       	rjmp	.+58     	; 0x4ce2 <vfprintf+0x56c>
    4ca8:	09 7f       	andi	r16, 0xF9	; 249
    4caa:	8f 36       	cpi	r24, 0x6F	; 111
    4cac:	91 f0       	breq	.+36     	; 0x4cd2 <vfprintf+0x55c>
    4cae:	18 f4       	brcc	.+6      	; 0x4cb6 <vfprintf+0x540>
    4cb0:	88 35       	cpi	r24, 0x58	; 88
    4cb2:	59 f0       	breq	.+22     	; 0x4cca <vfprintf+0x554>
    4cb4:	c3 c0       	rjmp	.+390    	; 0x4e3c <vfprintf+0x6c6>
    4cb6:	80 37       	cpi	r24, 0x70	; 112
    4cb8:	19 f0       	breq	.+6      	; 0x4cc0 <vfprintf+0x54a>
    4cba:	88 37       	cpi	r24, 0x78	; 120
    4cbc:	11 f0       	breq	.+4      	; 0x4cc2 <vfprintf+0x54c>
    4cbe:	be c0       	rjmp	.+380    	; 0x4e3c <vfprintf+0x6c6>
    4cc0:	00 61       	ori	r16, 0x10	; 16
    4cc2:	04 ff       	sbrs	r16, 4
    4cc4:	09 c0       	rjmp	.+18     	; 0x4cd8 <vfprintf+0x562>
    4cc6:	04 60       	ori	r16, 0x04	; 4
    4cc8:	07 c0       	rjmp	.+14     	; 0x4cd8 <vfprintf+0x562>
    4cca:	94 fe       	sbrs	r9, 4
    4ccc:	08 c0       	rjmp	.+16     	; 0x4cde <vfprintf+0x568>
    4cce:	06 60       	ori	r16, 0x06	; 6
    4cd0:	06 c0       	rjmp	.+12     	; 0x4cde <vfprintf+0x568>
    4cd2:	28 e0       	ldi	r18, 0x08	; 8
    4cd4:	30 e0       	ldi	r19, 0x00	; 0
    4cd6:	05 c0       	rjmp	.+10     	; 0x4ce2 <vfprintf+0x56c>
    4cd8:	20 e1       	ldi	r18, 0x10	; 16
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	02 c0       	rjmp	.+4      	; 0x4ce2 <vfprintf+0x56c>
    4cde:	20 e1       	ldi	r18, 0x10	; 16
    4ce0:	32 e0       	ldi	r19, 0x02	; 2
    4ce2:	56 01       	movw	r10, r12
    4ce4:	07 ff       	sbrs	r16, 7
    4ce6:	09 c0       	rjmp	.+18     	; 0x4cfa <vfprintf+0x584>
    4ce8:	84 e0       	ldi	r24, 0x04	; 4
    4cea:	a8 0e       	add	r10, r24
    4cec:	b1 1c       	adc	r11, r1
    4cee:	f6 01       	movw	r30, r12
    4cf0:	60 81       	ld	r22, Z
    4cf2:	71 81       	ldd	r23, Z+1	; 0x01
    4cf4:	82 81       	ldd	r24, Z+2	; 0x02
    4cf6:	93 81       	ldd	r25, Z+3	; 0x03
    4cf8:	08 c0       	rjmp	.+16     	; 0x4d0a <vfprintf+0x594>
    4cfa:	f2 e0       	ldi	r31, 0x02	; 2
    4cfc:	af 0e       	add	r10, r31
    4cfe:	b1 1c       	adc	r11, r1
    4d00:	f6 01       	movw	r30, r12
    4d02:	60 81       	ld	r22, Z
    4d04:	71 81       	ldd	r23, Z+1	; 0x01
    4d06:	80 e0       	ldi	r24, 0x00	; 0
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	a3 01       	movw	r20, r6
    4d0c:	0e 94 d6 e8 	call	0x1d1ac	; 0x1d1ac <__ultoa_invert>
    4d10:	c8 2e       	mov	r12, r24
    4d12:	c6 18       	sub	r12, r6
    4d14:	0f 77       	andi	r16, 0x7F	; 127
    4d16:	90 2e       	mov	r9, r16
    4d18:	96 fe       	sbrs	r9, 6
    4d1a:	0b c0       	rjmp	.+22     	; 0x4d32 <vfprintf+0x5bc>
    4d1c:	09 2d       	mov	r16, r9
    4d1e:	0e 7f       	andi	r16, 0xFE	; 254
    4d20:	c1 16       	cp	r12, r17
    4d22:	50 f4       	brcc	.+20     	; 0x4d38 <vfprintf+0x5c2>
    4d24:	94 fe       	sbrs	r9, 4
    4d26:	0a c0       	rjmp	.+20     	; 0x4d3c <vfprintf+0x5c6>
    4d28:	92 fc       	sbrc	r9, 2
    4d2a:	08 c0       	rjmp	.+16     	; 0x4d3c <vfprintf+0x5c6>
    4d2c:	09 2d       	mov	r16, r9
    4d2e:	0e 7e       	andi	r16, 0xEE	; 238
    4d30:	05 c0       	rjmp	.+10     	; 0x4d3c <vfprintf+0x5c6>
    4d32:	dc 2c       	mov	r13, r12
    4d34:	09 2d       	mov	r16, r9
    4d36:	03 c0       	rjmp	.+6      	; 0x4d3e <vfprintf+0x5c8>
    4d38:	dc 2c       	mov	r13, r12
    4d3a:	01 c0       	rjmp	.+2      	; 0x4d3e <vfprintf+0x5c8>
    4d3c:	d1 2e       	mov	r13, r17
    4d3e:	04 ff       	sbrs	r16, 4
    4d40:	0d c0       	rjmp	.+26     	; 0x4d5c <vfprintf+0x5e6>
    4d42:	fe 01       	movw	r30, r28
    4d44:	ec 0d       	add	r30, r12
    4d46:	f1 1d       	adc	r31, r1
    4d48:	80 81       	ld	r24, Z
    4d4a:	80 33       	cpi	r24, 0x30	; 48
    4d4c:	11 f4       	brne	.+4      	; 0x4d52 <vfprintf+0x5dc>
    4d4e:	09 7e       	andi	r16, 0xE9	; 233
    4d50:	09 c0       	rjmp	.+18     	; 0x4d64 <vfprintf+0x5ee>
    4d52:	02 ff       	sbrs	r16, 2
    4d54:	06 c0       	rjmp	.+12     	; 0x4d62 <vfprintf+0x5ec>
    4d56:	d3 94       	inc	r13
    4d58:	d3 94       	inc	r13
    4d5a:	04 c0       	rjmp	.+8      	; 0x4d64 <vfprintf+0x5ee>
    4d5c:	80 2f       	mov	r24, r16
    4d5e:	86 78       	andi	r24, 0x86	; 134
    4d60:	09 f0       	breq	.+2      	; 0x4d64 <vfprintf+0x5ee>
    4d62:	d3 94       	inc	r13
    4d64:	03 fd       	sbrc	r16, 3
    4d66:	11 c0       	rjmp	.+34     	; 0x4d8a <vfprintf+0x614>
    4d68:	00 ff       	sbrs	r16, 0
    4d6a:	06 c0       	rjmp	.+12     	; 0x4d78 <vfprintf+0x602>
    4d6c:	1c 2d       	mov	r17, r12
    4d6e:	d5 14       	cp	r13, r5
    4d70:	80 f4       	brcc	.+32     	; 0x4d92 <vfprintf+0x61c>
    4d72:	15 0d       	add	r17, r5
    4d74:	1d 19       	sub	r17, r13
    4d76:	0d c0       	rjmp	.+26     	; 0x4d92 <vfprintf+0x61c>
    4d78:	d5 14       	cp	r13, r5
    4d7a:	58 f4       	brcc	.+22     	; 0x4d92 <vfprintf+0x61c>
    4d7c:	b7 01       	movw	r22, r14
    4d7e:	80 e2       	ldi	r24, 0x20	; 32
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4d86:	d3 94       	inc	r13
    4d88:	f7 cf       	rjmp	.-18     	; 0x4d78 <vfprintf+0x602>
    4d8a:	d5 14       	cp	r13, r5
    4d8c:	10 f4       	brcc	.+4      	; 0x4d92 <vfprintf+0x61c>
    4d8e:	5d 18       	sub	r5, r13
    4d90:	01 c0       	rjmp	.+2      	; 0x4d94 <vfprintf+0x61e>
    4d92:	51 2c       	mov	r5, r1
    4d94:	04 ff       	sbrs	r16, 4
    4d96:	10 c0       	rjmp	.+32     	; 0x4db8 <vfprintf+0x642>
    4d98:	b7 01       	movw	r22, r14
    4d9a:	80 e3       	ldi	r24, 0x30	; 48
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4da2:	02 ff       	sbrs	r16, 2
    4da4:	17 c0       	rjmp	.+46     	; 0x4dd4 <vfprintf+0x65e>
    4da6:	01 fd       	sbrc	r16, 1
    4da8:	03 c0       	rjmp	.+6      	; 0x4db0 <vfprintf+0x63a>
    4daa:	88 e7       	ldi	r24, 0x78	; 120
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	02 c0       	rjmp	.+4      	; 0x4db4 <vfprintf+0x63e>
    4db0:	88 e5       	ldi	r24, 0x58	; 88
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	b7 01       	movw	r22, r14
    4db6:	0c c0       	rjmp	.+24     	; 0x4dd0 <vfprintf+0x65a>
    4db8:	80 2f       	mov	r24, r16
    4dba:	86 78       	andi	r24, 0x86	; 134
    4dbc:	59 f0       	breq	.+22     	; 0x4dd4 <vfprintf+0x65e>
    4dbe:	01 ff       	sbrs	r16, 1
    4dc0:	02 c0       	rjmp	.+4      	; 0x4dc6 <vfprintf+0x650>
    4dc2:	8b e2       	ldi	r24, 0x2B	; 43
    4dc4:	01 c0       	rjmp	.+2      	; 0x4dc8 <vfprintf+0x652>
    4dc6:	80 e2       	ldi	r24, 0x20	; 32
    4dc8:	07 fd       	sbrc	r16, 7
    4dca:	8d e2       	ldi	r24, 0x2D	; 45
    4dcc:	b7 01       	movw	r22, r14
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4dd4:	c1 16       	cp	r12, r17
    4dd6:	38 f4       	brcc	.+14     	; 0x4de6 <vfprintf+0x670>
    4dd8:	b7 01       	movw	r22, r14
    4dda:	80 e3       	ldi	r24, 0x30	; 48
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4de2:	11 50       	subi	r17, 0x01	; 1
    4de4:	f7 cf       	rjmp	.-18     	; 0x4dd4 <vfprintf+0x65e>
    4de6:	ca 94       	dec	r12
    4de8:	f3 01       	movw	r30, r6
    4dea:	ec 0d       	add	r30, r12
    4dec:	f1 1d       	adc	r31, r1
    4dee:	80 81       	ld	r24, Z
    4df0:	b7 01       	movw	r22, r14
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4df8:	c1 10       	cpse	r12, r1
    4dfa:	f5 cf       	rjmp	.-22     	; 0x4de6 <vfprintf+0x670>
    4dfc:	15 c0       	rjmp	.+42     	; 0x4e28 <vfprintf+0x6b2>
    4dfe:	f4 e0       	ldi	r31, 0x04	; 4
    4e00:	f5 15       	cp	r31, r5
    4e02:	60 f5       	brcc	.+88     	; 0x4e5c <vfprintf+0x6e6>
    4e04:	84 e0       	ldi	r24, 0x04	; 4
    4e06:	58 1a       	sub	r5, r24
    4e08:	93 fe       	sbrs	r9, 3
    4e0a:	1f c0       	rjmp	.+62     	; 0x4e4a <vfprintf+0x6d4>
    4e0c:	01 11       	cpse	r16, r1
    4e0e:	27 c0       	rjmp	.+78     	; 0x4e5e <vfprintf+0x6e8>
    4e10:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e12:	23 ff       	sbrs	r18, 3
    4e14:	2a c0       	rjmp	.+84     	; 0x4e6a <vfprintf+0x6f4>
    4e16:	06 ed       	ldi	r16, 0xD6	; 214
    4e18:	11 e0       	ldi	r17, 0x01	; 1
    4e1a:	39 2d       	mov	r19, r9
    4e1c:	30 71       	andi	r19, 0x10	; 16
    4e1e:	93 2e       	mov	r9, r19
    4e20:	f8 01       	movw	r30, r16
    4e22:	84 91       	lpm	r24, Z
    4e24:	81 11       	cpse	r24, r1
    4e26:	24 c0       	rjmp	.+72     	; 0x4e70 <vfprintf+0x6fa>
    4e28:	55 20       	and	r5, r5
    4e2a:	09 f4       	brne	.+2      	; 0x4e2e <vfprintf+0x6b8>
    4e2c:	e4 cc       	rjmp	.-1592   	; 0x47f6 <vfprintf+0x80>
    4e2e:	b7 01       	movw	r22, r14
    4e30:	80 e2       	ldi	r24, 0x20	; 32
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4e38:	5a 94       	dec	r5
    4e3a:	f6 cf       	rjmp	.-20     	; 0x4e28 <vfprintf+0x6b2>
    4e3c:	f7 01       	movw	r30, r14
    4e3e:	86 81       	ldd	r24, Z+6	; 0x06
    4e40:	97 81       	ldd	r25, Z+7	; 0x07
    4e42:	26 c0       	rjmp	.+76     	; 0x4e90 <vfprintf+0x71a>
    4e44:	8f ef       	ldi	r24, 0xFF	; 255
    4e46:	9f ef       	ldi	r25, 0xFF	; 255
    4e48:	23 c0       	rjmp	.+70     	; 0x4e90 <vfprintf+0x71a>
    4e4a:	b7 01       	movw	r22, r14
    4e4c:	80 e2       	ldi	r24, 0x20	; 32
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4e54:	5a 94       	dec	r5
    4e56:	51 10       	cpse	r5, r1
    4e58:	f8 cf       	rjmp	.-16     	; 0x4e4a <vfprintf+0x6d4>
    4e5a:	d8 cf       	rjmp	.-80     	; 0x4e0c <vfprintf+0x696>
    4e5c:	51 2c       	mov	r5, r1
    4e5e:	b7 01       	movw	r22, r14
    4e60:	80 2f       	mov	r24, r16
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4e68:	d3 cf       	rjmp	.-90     	; 0x4e10 <vfprintf+0x69a>
    4e6a:	0a ed       	ldi	r16, 0xDA	; 218
    4e6c:	11 e0       	ldi	r17, 0x01	; 1
    4e6e:	d5 cf       	rjmp	.-86     	; 0x4e1a <vfprintf+0x6a4>
    4e70:	91 10       	cpse	r9, r1
    4e72:	80 52       	subi	r24, 0x20	; 32
    4e74:	b7 01       	movw	r22, r14
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	0e 94 8a 77 	call	0xef14	; 0xef14 <fputc>
    4e7c:	0f 5f       	subi	r16, 0xFF	; 255
    4e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e80:	cf cf       	rjmp	.-98     	; 0x4e20 <vfprintf+0x6aa>
    4e82:	23 e0       	ldi	r18, 0x03	; 3
    4e84:	25 15       	cp	r18, r5
    4e86:	10 f4       	brcc	.+4      	; 0x4e8c <vfprintf+0x716>
    4e88:	83 e0       	ldi	r24, 0x03	; 3
    4e8a:	bd cf       	rjmp	.-134    	; 0x4e06 <vfprintf+0x690>
    4e8c:	51 2c       	mov	r5, r1
    4e8e:	c0 cf       	rjmp	.-128    	; 0x4e10 <vfprintf+0x69a>
    4e90:	60 96       	adiw	r28, 0x10	; 16
    4e92:	0f b6       	in	r0, 0x3f	; 63
    4e94:	f8 94       	cli
    4e96:	de bf       	out	0x3e, r29	; 62
    4e98:	0f be       	out	0x3f, r0	; 63
    4e9a:	cd bf       	out	0x3d, r28	; 61
    4e9c:	df 91       	pop	r29
    4e9e:	cf 91       	pop	r28
    4ea0:	1f 91       	pop	r17
    4ea2:	0f 91       	pop	r16
    4ea4:	ff 90       	pop	r15
    4ea6:	ef 90       	pop	r14
    4ea8:	df 90       	pop	r13
    4eaa:	cf 90       	pop	r12
    4eac:	bf 90       	pop	r11
    4eae:	af 90       	pop	r10
    4eb0:	9f 90       	pop	r9
    4eb2:	8f 90       	pop	r8
    4eb4:	7f 90       	pop	r7
    4eb6:	6f 90       	pop	r6
    4eb8:	5f 90       	pop	r5
    4eba:	4f 90       	pop	r4
    4ebc:	3f 90       	pop	r3
    4ebe:	2f 90       	pop	r2
    4ec0:	08 95       	ret

00004ec2 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    4ec2:	e8 2f       	mov	r30, r24
    4ec4:	e6 95       	lsr	r30
    4ec6:	e6 95       	lsr	r30
    4ec8:	e6 95       	lsr	r30
    4eca:	93 e0       	ldi	r25, 0x03	; 3
    4ecc:	e9 9f       	mul	r30, r25
    4ece:	f0 01       	movw	r30, r0
    4ed0:	11 24       	eor	r1, r1
    4ed2:	32 a1       	ldd	r19, Z+34	; 0x22
    4ed4:	28 2f       	mov	r18, r24
    4ed6:	27 70       	andi	r18, 0x07	; 7
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	01 c0       	rjmp	.+2      	; 0x4ee0 <chip_select+0x1e>
    4ede:	88 0f       	add	r24, r24
    4ee0:	2a 95       	dec	r18
    4ee2:	ea f7       	brpl	.-6      	; 0x4ede <chip_select+0x1c>
    4ee4:	98 2f       	mov	r25, r24
    4ee6:	90 95       	com	r25
    4ee8:	93 23       	and	r25, r19
    4eea:	92 a3       	std	Z+34, r25	; 0x22
    4eec:	91 a1       	ldd	r25, Z+33	; 0x21
    4eee:	89 2b       	or	r24, r25
    4ef0:	81 a3       	std	Z+33, r24	; 0x21
    4ef2:	08 95       	ret

00004ef4 <chip_deselect>:
    4ef4:	e8 2f       	mov	r30, r24
    4ef6:	e6 95       	lsr	r30
    4ef8:	e6 95       	lsr	r30
    4efa:	e6 95       	lsr	r30
    4efc:	93 e0       	ldi	r25, 0x03	; 3
    4efe:	e9 9f       	mul	r30, r25
    4f00:	f0 01       	movw	r30, r0
    4f02:	11 24       	eor	r1, r1
    4f04:	32 a1       	ldd	r19, Z+34	; 0x22
    4f06:	28 2f       	mov	r18, r24
    4f08:	27 70       	andi	r18, 0x07	; 7
    4f0a:	81 e0       	ldi	r24, 0x01	; 1
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	01 c0       	rjmp	.+2      	; 0x4f12 <chip_deselect+0x1e>
    4f10:	88 0f       	add	r24, r24
    4f12:	2a 95       	dec	r18
    4f14:	ea f7       	brpl	.-6      	; 0x4f10 <chip_deselect+0x1c>
    4f16:	93 2f       	mov	r25, r19
    4f18:	98 2b       	or	r25, r24
    4f1a:	92 a3       	std	Z+34, r25	; 0x22
    4f1c:	91 a1       	ldd	r25, Z+33	; 0x21
    4f1e:	89 2b       	or	r24, r25
    4f20:	81 a3       	std	Z+33, r24	; 0x21
    4f22:	08 95       	ret

00004f24 <chip_select_init>:
    4f24:	e7 cf       	rjmp	.-50     	; 0x4ef4 <chip_deselect>
    4f26:	08 95       	ret

00004f28 <spi_end>:
    4f28:	cf 93       	push	r28
    4f2a:	ad b7       	in	r26, 0x3d	; 61
    4f2c:	be b7       	in	r27, 0x3e	; 62
    4f2e:	17 97       	sbiw	r26, 0x07	; 7
    4f30:	0f b6       	in	r0, 0x3f	; 63
    4f32:	f8 94       	cli
    4f34:	be bf       	out	0x3e, r27	; 62
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	ad bf       	out	0x3d, r26	; 61
    4f3a:	c8 2f       	mov	r28, r24
    4f3c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4f40:	8c 17       	cp	r24, r28
    4f42:	99 f0       	breq	.+38     	; 0x4f6a <spi_end+0x42>
    4f44:	8f 3f       	cpi	r24, 0xFF	; 255
    4f46:	89 f0       	breq	.+34     	; 0x4f6a <spi_end+0x42>
    4f48:	2c 2f       	mov	r18, r28
    4f4a:	30 e0       	ldi	r19, 0x00	; 0
    4f4c:	ed b7       	in	r30, 0x3d	; 61
    4f4e:	fe b7       	in	r31, 0x3e	; 62
    4f50:	37 83       	std	Z+7, r19	; 0x07
    4f52:	26 83       	std	Z+6, r18	; 0x06
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	95 83       	std	Z+5, r25	; 0x05
    4f58:	84 83       	std	Z+4, r24	; 0x04
    4f5a:	88 ed       	ldi	r24, 0xD8	; 216
    4f5c:	92 e0       	ldi	r25, 0x02	; 2
    4f5e:	a0 e0       	ldi	r26, 0x00	; 0
    4f60:	81 83       	std	Z+1, r24	; 0x01
    4f62:	92 83       	std	Z+2, r25	; 0x02
    4f64:	a3 83       	std	Z+3, r26	; 0x03
    4f66:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    4f6a:	8c 2f       	mov	r24, r28
    4f6c:	c3 df       	rcall	.-122    	; 0x4ef4 <chip_deselect>
    4f6e:	8f ef       	ldi	r24, 0xFF	; 255
    4f70:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4f74:	ad b7       	in	r26, 0x3d	; 61
    4f76:	be b7       	in	r27, 0x3e	; 62
    4f78:	17 96       	adiw	r26, 0x07	; 7
    4f7a:	0f b6       	in	r0, 0x3f	; 63
    4f7c:	f8 94       	cli
    4f7e:	be bf       	out	0x3e, r27	; 62
    4f80:	0f be       	out	0x3f, r0	; 63
    4f82:	ad bf       	out	0x3d, r26	; 61
    4f84:	cf 91       	pop	r28
    4f86:	08 95       	ret

00004f88 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    4f88:	cc c4       	rjmp	.+2456   	; 0x5922 <SPI0_TX>
    4f8a:	08 95       	ret

00004f8c <spi_RX_buffer>:
    4f8c:	f4 c4       	rjmp	.+2536   	; 0x5976 <SPI0_RX>
    4f8e:	08 95       	ret

00004f90 <spi_TX>:
    4f90:	a1 e0       	ldi	r26, 0x01	; 1
    4f92:	b0 e0       	ldi	r27, 0x00	; 0
    4f94:	ee ec       	ldi	r30, 0xCE	; 206
    4f96:	f7 e2       	ldi	r31, 0x27	; 39
    4f98:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    4f9c:	89 83       	std	Y+1, r24	; 0x01
    4f9e:	61 e0       	ldi	r22, 0x01	; 1
    4fa0:	70 e0       	ldi	r23, 0x00	; 0
    4fa2:	ce 01       	movw	r24, r28
    4fa4:	01 96       	adiw	r24, 0x01	; 1
    4fa6:	bd d4       	rcall	.+2426   	; 0x5922 <SPI0_TX>
    4fa8:	21 96       	adiw	r28, 0x01	; 1
    4faa:	e2 e0       	ldi	r30, 0x02	; 2
    4fac:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00004fb0 <spi_init>:
    4fb0:	cf 92       	push	r12
    4fb2:	df 92       	push	r13
    4fb4:	ef 92       	push	r14
    4fb6:	ff 92       	push	r15
    4fb8:	6b 01       	movw	r12, r22
    4fba:	7c 01       	movw	r14, r24
    4fbc:	84 2f       	mov	r24, r20
    4fbe:	9a df       	rcall	.-204    	; 0x4ef4 <chip_deselect>
    4fc0:	8f ef       	ldi	r24, 0xFF	; 255
    4fc2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4fc6:	c7 01       	movw	r24, r14
    4fc8:	b6 01       	movw	r22, r12
    4fca:	7e d4       	rcall	.+2300   	; 0x58c8 <SPI0_Init>
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	3b d4       	rcall	.+2166   	; 0x5848 <SPI0_Mode>
    4fd2:	8f ef       	ldi	r24, 0xFF	; 255
    4fd4:	dd df       	rcall	.-70     	; 0x4f90 <spi_TX>
    4fd6:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4fda:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4fde:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4fe2:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
    4fe6:	ff 90       	pop	r15
    4fe8:	ef 90       	pop	r14
    4fea:	df 90       	pop	r13
    4fec:	cf 90       	pop	r12
    4fee:	08 95       	ret

00004ff0 <spi_begin>:
    4ff0:	cf 92       	push	r12
    4ff2:	df 92       	push	r13
    4ff4:	ef 92       	push	r14
    4ff6:	ff 92       	push	r15
    4ff8:	cf 93       	push	r28
    4ffa:	df 93       	push	r29
    4ffc:	ad b7       	in	r26, 0x3d	; 61
    4ffe:	be b7       	in	r27, 0x3e	; 62
    5000:	17 97       	sbiw	r26, 0x07	; 7
    5002:	0f b6       	in	r0, 0x3f	; 63
    5004:	f8 94       	cli
    5006:	be bf       	out	0x3e, r27	; 62
    5008:	0f be       	out	0x3f, r0	; 63
    500a:	ad bf       	out	0x3d, r26	; 61
    500c:	6b 01       	movw	r12, r22
    500e:	7c 01       	movw	r14, r24
    5010:	ea 01       	movw	r28, r20
    5012:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    5016:	8f 3f       	cpi	r24, 0xFF	; 255
    5018:	79 f0       	breq	.+30     	; 0x5038 <spi_begin+0x48>
    501a:	ed b7       	in	r30, 0x3d	; 61
    501c:	fe b7       	in	r31, 0x3e	; 62
    501e:	46 83       	std	Z+6, r20	; 0x06
    5020:	d7 83       	std	Z+7, r29	; 0x07
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	95 83       	std	Z+5, r25	; 0x05
    5026:	84 83       	std	Z+4, r24	; 0x04
    5028:	86 ef       	ldi	r24, 0xF6	; 246
    502a:	92 e0       	ldi	r25, 0x02	; 2
    502c:	a0 e0       	ldi	r26, 0x00	; 0
    502e:	81 83       	std	Z+1, r24	; 0x01
    5030:	92 83       	std	Z+2, r25	; 0x02
    5032:	a3 83       	std	Z+3, r26	; 0x03
    5034:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    5038:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    503c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    5040:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    5044:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    5048:	8c 15       	cp	r24, r12
    504a:	9d 05       	cpc	r25, r13
    504c:	ae 05       	cpc	r26, r14
    504e:	bf 05       	cpc	r27, r15
    5050:	21 f0       	breq	.+8      	; 0x505a <spi_begin+0x6a>
    5052:	ae 01       	movw	r20, r28
    5054:	c7 01       	movw	r24, r14
    5056:	b6 01       	movw	r22, r12
    5058:	ab df       	rcall	.-170    	; 0x4fb0 <spi_init>
    505a:	8c 2f       	mov	r24, r28
    505c:	32 df       	rcall	.-412    	; 0x4ec2 <chip_select>
    505e:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
    5062:	ad b7       	in	r26, 0x3d	; 61
    5064:	be b7       	in	r27, 0x3e	; 62
    5066:	17 96       	adiw	r26, 0x07	; 7
    5068:	0f b6       	in	r0, 0x3f	; 63
    506a:	f8 94       	cli
    506c:	be bf       	out	0x3e, r27	; 62
    506e:	0f be       	out	0x3f, r0	; 63
    5070:	ad bf       	out	0x3d, r26	; 61
    5072:	df 91       	pop	r29
    5074:	cf 91       	pop	r28
    5076:	ff 90       	pop	r15
    5078:	ef 90       	pop	r14
    507a:	df 90       	pop	r13
    507c:	cf 90       	pop	r12
    507e:	08 95       	ret

00005080 <spi_TXRX>:
    5080:	a1 e0       	ldi	r26, 0x01	; 1
    5082:	b0 e0       	ldi	r27, 0x00	; 0
    5084:	e6 e4       	ldi	r30, 0x46	; 70
    5086:	f8 e2       	ldi	r31, 0x28	; 40
    5088:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    508c:	89 83       	std	Y+1, r24	; 0x01
    508e:	61 e0       	ldi	r22, 0x01	; 1
    5090:	70 e0       	ldi	r23, 0x00	; 0
    5092:	ce 01       	movw	r24, r28
    5094:	01 96       	adiw	r24, 0x01	; 1
    5096:	59 d4       	rcall	.+2226   	; 0x594a <SPI0_TXRX>
    5098:	89 81       	ldd	r24, Y+1	; 0x01
    509a:	21 96       	adiw	r28, 0x01	; 1
    509c:	e2 e0       	ldi	r30, 0x02	; 2
    509e:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000050a2 <set_error>:
    50a2:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <__data_end>
    50a6:	2c 9a       	sbi	0x05, 4	; 5
    50a8:	24 9a       	sbi	0x04, 4	; 4
    50aa:	08 95       	ret

000050ac <clear_error>:
    50ac:	10 92 5c 17 	sts	0x175C, r1	; 0x80175c <__data_end>
    50b0:	2c 98       	cbi	0x05, 4	; 5
    50b2:	24 9a       	sbi	0x04, 4	; 4
    50b4:	08 95       	ret

000050b6 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    50b6:	a2 e0       	ldi	r26, 0x02	; 2
    50b8:	b0 e0       	ldi	r27, 0x00	; 0
    50ba:	e1 e6       	ldi	r30, 0x61	; 97
    50bc:	f8 e2       	ldi	r31, 0x28	; 40
    50be:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    50c2:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
    50c6:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
    50ca:	21 15       	cp	r18, r1
    50cc:	31 05       	cpc	r19, r1
    50ce:	11 f4       	brne	.+4      	; 0x50d4 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    50d0:	2c eb       	ldi	r18, 0xBC	; 188
    50d2:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    50d4:	ce 01       	movw	r24, r28
    50d6:	01 96       	adiw	r24, 0x01	; 1
    50d8:	82 1b       	sub	r24, r18
    50da:	93 0b       	sbc	r25, r19
    50dc:	22 96       	adiw	r28, 0x02	; 2
    50de:	e2 e0       	ldi	r30, 0x02	; 2
    50e0:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000050e4 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    50e4:	a9 e0       	ldi	r26, 0x09	; 9
    50e6:	b0 e0       	ldi	r27, 0x00	; 0
    50e8:	e8 e7       	ldi	r30, 0x78	; 120
    50ea:	f8 e2       	ldi	r31, 0x28	; 40
    50ec:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    50f0:	e2 df       	rcall	.-60     	; 0x50b6 <freeRam>
    50f2:	99 87       	std	Y+9, r25	; 0x09

    printf("Free Ram:%u\n", ram);
    50f4:	88 87       	std	Y+8, r24	; 0x08
    50f6:	ed b7       	in	r30, 0x3d	; 61
    50f8:	fe b7       	in	r31, 0x3e	; 62
    50fa:	95 83       	std	Z+5, r25	; 0x05
    50fc:	84 83       	std	Z+4, r24	; 0x04
    50fe:	8d e1       	ldi	r24, 0x1D	; 29
    5100:	94 e0       	ldi	r25, 0x04	; 4
    5102:	a0 e0       	ldi	r26, 0x00	; 0
    5104:	81 83       	std	Z+1, r24	; 0x01
    5106:	92 83       	std	Z+2, r25	; 0x02
    5108:	a3 83       	std	Z+3, r26	; 0x03
    510a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    510e:	8f ef       	ldi	r24, 0xFF	; 255
    5110:	90 e4       	ldi	r25, 0x40	; 64
    5112:	ed b7       	in	r30, 0x3d	; 61
    5114:	fe b7       	in	r31, 0x3e	; 62
    5116:	95 83       	std	Z+5, r25	; 0x05
    5118:	84 83       	std	Z+4, r24	; 0x04
    511a:	8a e0       	ldi	r24, 0x0A	; 10
    511c:	94 e0       	ldi	r25, 0x04	; 4
    511e:	a0 e0       	ldi	r26, 0x00	; 0
    5120:	81 83       	std	Z+1, r24	; 0x01
    5122:	92 83       	std	Z+2, r25	; 0x02
    5124:	a3 83       	std	Z+3, r26	; 0x03
    5126:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    512a:	ce 01       	movw	r24, r28
    512c:	08 96       	adiw	r24, 0x08	; 8
    512e:	ed b7       	in	r30, 0x3d	; 61
    5130:	fe b7       	in	r31, 0x3e	; 62
    5132:	95 83       	std	Z+5, r25	; 0x05
    5134:	84 83       	std	Z+4, r24	; 0x04
    5136:	87 ef       	ldi	r24, 0xF7	; 247
    5138:	93 e0       	ldi	r25, 0x03	; 3
    513a:	a0 e0       	ldi	r26, 0x00	; 0
    513c:	81 83       	std	Z+1, r24	; 0x01
    513e:	92 83       	std	Z+2, r25	; 0x02
    5140:	a3 83       	std	Z+3, r26	; 0x03
    5142:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    5146:	8c eb       	ldi	r24, 0xBC	; 188
    5148:	91 e2       	ldi	r25, 0x21	; 33
    514a:	ed b7       	in	r30, 0x3d	; 61
    514c:	fe b7       	in	r31, 0x3e	; 62
    514e:	97 83       	std	Z+7, r25	; 0x07
    5150:	86 83       	std	Z+6, r24	; 0x06
    5152:	8c e5       	ldi	r24, 0x5C	; 92
    5154:	97 e1       	ldi	r25, 0x17	; 23
    5156:	95 83       	std	Z+5, r25	; 0x05
    5158:	84 83       	std	Z+4, r24	; 0x04
    515a:	89 ed       	ldi	r24, 0xD9	; 217
    515c:	93 e0       	ldi	r25, 0x03	; 3
    515e:	a0 e0       	ldi	r26, 0x00	; 0
    5160:	81 83       	std	Z+1, r24	; 0x01
    5162:	92 83       	std	Z+2, r25	; 0x02
    5164:	a3 83       	std	Z+3, r26	; 0x03
    5166:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    516a:	8c e5       	ldi	r24, 0x5C	; 92
    516c:	97 e1       	ldi	r25, 0x17	; 23
    516e:	ed b7       	in	r30, 0x3d	; 61
    5170:	fe b7       	in	r31, 0x3e	; 62
    5172:	97 83       	std	Z+7, r25	; 0x07
    5174:	86 83       	std	Z+6, r24	; 0x06
    5176:	80 e0       	ldi	r24, 0x00	; 0
    5178:	91 e0       	ldi	r25, 0x01	; 1
    517a:	95 83       	std	Z+5, r25	; 0x05
    517c:	84 83       	std	Z+4, r24	; 0x04
    517e:	8b eb       	ldi	r24, 0xBB	; 187
    5180:	93 e0       	ldi	r25, 0x03	; 3
    5182:	a0 e0       	ldi	r26, 0x00	; 0
    5184:	81 83       	std	Z+1, r24	; 0x01
    5186:	92 83       	std	Z+2, r25	; 0x02
    5188:	a3 83       	std	Z+3, r26	; 0x03
    518a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    518e:	80 e0       	ldi	r24, 0x00	; 0
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	ed b7       	in	r30, 0x3d	; 61
    5194:	fe b7       	in	r31, 0x3e	; 62
    5196:	97 83       	std	Z+7, r25	; 0x07
    5198:	86 83       	std	Z+6, r24	; 0x06
    519a:	8c eb       	ldi	r24, 0xBC	; 188
    519c:	91 e2       	ldi	r25, 0x21	; 33
    519e:	95 83       	std	Z+5, r25	; 0x05
    51a0:	84 83       	std	Z+4, r24	; 0x04
    51a2:	8d e9       	ldi	r24, 0x9D	; 157
    51a4:	93 e0       	ldi	r25, 0x03	; 3
    51a6:	a0 e0       	ldi	r26, 0x00	; 0
    51a8:	81 83       	std	Z+1, r24	; 0x01
    51aa:	92 83       	std	Z+2, r25	; 0x02
    51ac:	a3 83       	std	Z+3, r26	; 0x03
    51ae:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    51b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    51b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    51ba:	ed b7       	in	r30, 0x3d	; 61
    51bc:	fe b7       	in	r31, 0x3e	; 62
    51be:	97 83       	std	Z+7, r25	; 0x07
    51c0:	86 83       	std	Z+6, r24	; 0x06
    51c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    51c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    51ca:	95 83       	std	Z+5, r25	; 0x05
    51cc:	84 83       	std	Z+4, r24	; 0x04
    51ce:	8f e7       	ldi	r24, 0x7F	; 127
    51d0:	93 e0       	ldi	r25, 0x03	; 3
    51d2:	a0 e0       	ldi	r26, 0x00	; 0
    51d4:	81 83       	std	Z+1, r24	; 0x01
    51d6:	92 83       	std	Z+2, r25	; 0x02
    51d8:	a3 83       	std	Z+3, r26	; 0x03
    51da:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    51de:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <__brkval>
    51e2:	90 91 b9 21 	lds	r25, 0x21B9	; 0x8021b9 <__brkval+0x1>
    51e6:	ed b7       	in	r30, 0x3d	; 61
    51e8:	fe b7       	in	r31, 0x3e	; 62
    51ea:	95 83       	std	Z+5, r25	; 0x05
    51ec:	84 83       	std	Z+4, r24	; 0x04
    51ee:	8b e6       	ldi	r24, 0x6B	; 107
    51f0:	93 e0       	ldi	r25, 0x03	; 3
    51f2:	a0 e0       	ldi	r26, 0x00	; 0
    51f4:	81 83       	std	Z+1, r24	; 0x01
    51f6:	92 83       	std	Z+2, r25	; 0x02
    51f8:	a3 83       	std	Z+3, r26	; 0x03
    51fa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

}
    51fe:	29 96       	adiw	r28, 0x09	; 9
    5200:	e2 e0       	ldi	r30, 0x02	; 2
    5202:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00005206 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    5206:	ef 92       	push	r14
    5208:	ff 92       	push	r15
    520a:	0f 93       	push	r16
    520c:	1f 93       	push	r17
    520e:	cf 93       	push	r28
    5210:	df 93       	push	r29
    5212:	ad b7       	in	r26, 0x3d	; 61
    5214:	be b7       	in	r27, 0x3e	; 62
    5216:	17 97       	sbiw	r26, 0x07	; 7
    5218:	0f b6       	in	r0, 0x3f	; 63
    521a:	f8 94       	cli
    521c:	be bf       	out	0x3e, r27	; 62
    521e:	0f be       	out	0x3f, r0	; 63
    5220:	ad bf       	out	0x3d, r26	; 61
    5222:	8c 01       	movw	r16, r24
    5224:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    5226:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <calloc>
    522a:	ec 01       	movw	r28, r24
    if(!p)
    522c:	89 2b       	or	r24, r25
    522e:	71 f4       	brne	.+28     	; 0x524c <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    5230:	ed b7       	in	r30, 0x3d	; 61
    5232:	fe b7       	in	r31, 0x3e	; 62
    5234:	f7 82       	std	Z+7, r15	; 0x07
    5236:	e6 82       	std	Z+6, r14	; 0x06
    5238:	15 83       	std	Z+5, r17	; 0x05
    523a:	04 83       	std	Z+4, r16	; 0x04
    523c:	80 e5       	ldi	r24, 0x50	; 80
    523e:	93 e0       	ldi	r25, 0x03	; 3
    5240:	a0 e0       	ldi	r26, 0x00	; 0
    5242:	81 83       	std	Z+1, r24	; 0x01
    5244:	92 83       	std	Z+2, r25	; 0x02
    5246:	a3 83       	std	Z+3, r26	; 0x03
    5248:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }
    return(p);
}
    524c:	ce 01       	movw	r24, r28
    524e:	cd b7       	in	r28, 0x3d	; 61
    5250:	de b7       	in	r29, 0x3e	; 62
    5252:	27 96       	adiw	r28, 0x07	; 7
    5254:	e6 e0       	ldi	r30, 0x06	; 6
    5256:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

0000525a <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    525a:	0f 93       	push	r16
    525c:	1f 93       	push	r17
    525e:	cf 93       	push	r28
    5260:	df 93       	push	r29
    5262:	00 d0       	rcall	.+0      	; 0x5264 <safemalloc+0xa>
    5264:	00 d0       	rcall	.+0      	; 0x5266 <safemalloc+0xc>
    5266:	1f 92       	push	r1
    5268:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    526a:	61 e0       	ldi	r22, 0x01	; 1
    526c:	70 e0       	ldi	r23, 0x00	; 0
    526e:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <calloc>
    5272:	ec 01       	movw	r28, r24
    if(!p)
    5274:	89 2b       	or	r24, r25
    5276:	61 f4       	brne	.+24     	; 0x5290 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    5278:	ed b7       	in	r30, 0x3d	; 61
    527a:	fe b7       	in	r31, 0x3e	; 62
    527c:	15 83       	std	Z+5, r17	; 0x05
    527e:	04 83       	std	Z+4, r16	; 0x04
    5280:	88 e3       	ldi	r24, 0x38	; 56
    5282:	93 e0       	ldi	r25, 0x03	; 3
    5284:	a0 e0       	ldi	r26, 0x00	; 0
    5286:	81 83       	std	Z+1, r24	; 0x01
    5288:	92 83       	std	Z+2, r25	; 0x02
    528a:	a3 83       	std	Z+3, r26	; 0x03
    528c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }
    return(p);
}
    5290:	ce 01       	movw	r24, r28
    5292:	cd b7       	in	r28, 0x3d	; 61
    5294:	de b7       	in	r29, 0x3e	; 62
    5296:	25 96       	adiw	r28, 0x05	; 5
    5298:	e4 e0       	ldi	r30, 0x04	; 4
    529a:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

0000529e <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    529e:	ad b7       	in	r26, 0x3d	; 61
    52a0:	be b7       	in	r27, 0x3e	; 62
    52a2:	17 97       	sbiw	r26, 0x07	; 7
    52a4:	0f b6       	in	r0, 0x3f	; 63
    52a6:	f8 94       	cli
    52a8:	be bf       	out	0x3e, r27	; 62
    52aa:	0f be       	out	0x3f, r0	; 63
    52ac:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    52ae:	00 97       	sbiw	r24, 0x00	; 0
    52b0:	11 f1       	breq	.+68     	; 0x52f6 <safefree+0x58>
        return;

    if(__brkval)
    52b2:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
    52b6:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
    52ba:	21 15       	cp	r18, r1
    52bc:	31 05       	cpc	r19, r1
    52be:	11 f4       	brne	.+4      	; 0x52c4 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    52c0:	2c eb       	ldi	r18, 0xBC	; 188
    52c2:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    52c4:	41 e2       	ldi	r20, 0x21	; 33
    52c6:	8c 3b       	cpi	r24, 0xBC	; 188
    52c8:	94 07       	cpc	r25, r20
    52ca:	30 f0       	brcs	.+12     	; 0x52d8 <safefree+0x3a>
    52cc:	28 17       	cp	r18, r24
    52ce:	39 07       	cpc	r19, r25
    52d0:	18 f0       	brcs	.+6      	; 0x52d8 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    52d2:	0e 94 58 e7 	call	0x1ceb0	; 0x1ceb0 <free>
        return;
    52d6:	0f c0       	rjmp	.+30     	; 0x52f6 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    52d8:	ed b7       	in	r30, 0x3d	; 61
    52da:	fe b7       	in	r31, 0x3e	; 62
    52dc:	37 83       	std	Z+7, r19	; 0x07
    52de:	26 83       	std	Z+6, r18	; 0x06
    52e0:	95 83       	std	Z+5, r25	; 0x05
    52e2:	84 83       	std	Z+4, r24	; 0x04
    52e4:	83 e1       	ldi	r24, 0x13	; 19
    52e6:	93 e0       	ldi	r25, 0x03	; 3
    52e8:	a0 e0       	ldi	r26, 0x00	; 0
    52ea:	81 83       	std	Z+1, r24	; 0x01
    52ec:	92 83       	std	Z+2, r25	; 0x02
    52ee:	a3 83       	std	Z+3, r26	; 0x03
    52f0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    PrintFree();
}
    52f4:	f7 de       	rcall	.-530    	; 0x50e4 <PrintFree>
    52f6:	ad b7       	in	r26, 0x3d	; 61
    52f8:	be b7       	in	r27, 0x3e	; 62
    52fa:	17 96       	adiw	r26, 0x07	; 7
    52fc:	0f b6       	in	r0, 0x3f	; 63
    52fe:	f8 94       	cli
    5300:	be bf       	out	0x3e, r27	; 62
    5302:	0f be       	out	0x3f, r0	; 63
    5304:	ad bf       	out	0x3d, r26	; 61
    5306:	08 95       	ret

00005308 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    5308:	64 36       	cpi	r22, 0x64	; 100
    530a:	71 05       	cpc	r23, r1
    530c:	81 05       	cpc	r24, r1
    530e:	91 05       	cpc	r25, r1
    5310:	58 f0       	brcs	.+22     	; 0x5328 <delayus+0x20>
    {
        us -= 100U;
    5312:	64 56       	subi	r22, 0x64	; 100
    5314:	71 09       	sbc	r23, r1
    5316:	81 09       	sbc	r24, r1
    5318:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    531a:	e3 ef       	ldi	r30, 0xF3	; 243
    531c:	f1 e0       	ldi	r31, 0x01	; 1
    531e:	31 97       	sbiw	r30, 0x01	; 1
    5320:	f1 f7       	brne	.-4      	; 0x531e <delayus+0x16>
    5322:	00 c0       	rjmp	.+0      	; 0x5324 <delayus+0x1c>
    5324:	00 00       	nop
    5326:	f0 cf       	rjmp	.-32     	; 0x5308 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5328:	6a 30       	cpi	r22, 0x0A	; 10
    532a:	71 05       	cpc	r23, r1
    532c:	81 05       	cpc	r24, r1
    532e:	91 05       	cpc	r25, r1
    5330:	48 f0       	brcs	.+18     	; 0x5344 <delayus+0x3c>
    {
        us -= 10U;
    5332:	6a 50       	subi	r22, 0x0A	; 10
    5334:	71 09       	sbc	r23, r1
    5336:	81 09       	sbc	r24, r1
    5338:	91 09       	sbc	r25, r1
    533a:	f2 e4       	ldi	r31, 0x42	; 66
    533c:	fa 95       	dec	r31
    533e:	f1 f7       	brne	.-4      	; 0x533c <delayus+0x34>
    5340:	00 c0       	rjmp	.+0      	; 0x5342 <delayus+0x3a>
    5342:	f2 cf       	rjmp	.-28     	; 0x5328 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5344:	61 15       	cp	r22, r1
    5346:	71 05       	cpc	r23, r1
    5348:	81 05       	cpc	r24, r1
    534a:	91 05       	cpc	r25, r1
    534c:	49 f0       	breq	.+18     	; 0x5360 <delayus+0x58>
    {
        --us;
    534e:	61 50       	subi	r22, 0x01	; 1
    5350:	71 09       	sbc	r23, r1
    5352:	81 09       	sbc	r24, r1
    5354:	91 09       	sbc	r25, r1
    5356:	26 e0       	ldi	r18, 0x06	; 6
    5358:	2a 95       	dec	r18
    535a:	f1 f7       	brne	.-4      	; 0x5358 <delayus+0x50>
    535c:	00 c0       	rjmp	.+0      	; 0x535e <delayus+0x56>
    535e:	f2 cf       	rjmp	.-28     	; 0x5344 <delayus+0x3c>
        _delay_us(1);
    }
}
    5360:	08 95       	ret

00005362 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5362:	61 15       	cp	r22, r1
    5364:	71 05       	cpc	r23, r1
    5366:	81 05       	cpc	r24, r1
    5368:	91 05       	cpc	r25, r1
    536a:	09 f4       	brne	.+2      	; 0x536e <delayms+0xc>
    536c:	41 c0       	rjmp	.+130    	; 0x53f0 <delayms+0x8e>
    536e:	e3 ef       	ldi	r30, 0xF3	; 243
    5370:	f1 e0       	ldi	r31, 0x01	; 1
    5372:	31 97       	sbiw	r30, 0x01	; 1
    5374:	f1 f7       	brne	.-4      	; 0x5372 <delayms+0x10>
    5376:	00 c0       	rjmp	.+0      	; 0x5378 <delayms+0x16>
    5378:	00 00       	nop
    537a:	e3 ef       	ldi	r30, 0xF3	; 243
    537c:	f1 e0       	ldi	r31, 0x01	; 1
    537e:	31 97       	sbiw	r30, 0x01	; 1
    5380:	f1 f7       	brne	.-4      	; 0x537e <delayms+0x1c>
    5382:	00 c0       	rjmp	.+0      	; 0x5384 <delayms+0x22>
    5384:	00 00       	nop
    5386:	e3 ef       	ldi	r30, 0xF3	; 243
    5388:	f1 e0       	ldi	r31, 0x01	; 1
    538a:	31 97       	sbiw	r30, 0x01	; 1
    538c:	f1 f7       	brne	.-4      	; 0x538a <delayms+0x28>
    538e:	00 c0       	rjmp	.+0      	; 0x5390 <delayms+0x2e>
    5390:	00 00       	nop
    5392:	e3 ef       	ldi	r30, 0xF3	; 243
    5394:	f1 e0       	ldi	r31, 0x01	; 1
    5396:	31 97       	sbiw	r30, 0x01	; 1
    5398:	f1 f7       	brne	.-4      	; 0x5396 <delayms+0x34>
    539a:	00 c0       	rjmp	.+0      	; 0x539c <delayms+0x3a>
    539c:	00 00       	nop
    539e:	e3 ef       	ldi	r30, 0xF3	; 243
    53a0:	f1 e0       	ldi	r31, 0x01	; 1
    53a2:	31 97       	sbiw	r30, 0x01	; 1
    53a4:	f1 f7       	brne	.-4      	; 0x53a2 <delayms+0x40>
    53a6:	00 c0       	rjmp	.+0      	; 0x53a8 <delayms+0x46>
    53a8:	00 00       	nop
    53aa:	e3 ef       	ldi	r30, 0xF3	; 243
    53ac:	f1 e0       	ldi	r31, 0x01	; 1
    53ae:	31 97       	sbiw	r30, 0x01	; 1
    53b0:	f1 f7       	brne	.-4      	; 0x53ae <delayms+0x4c>
    53b2:	00 c0       	rjmp	.+0      	; 0x53b4 <delayms+0x52>
    53b4:	00 00       	nop
    53b6:	e3 ef       	ldi	r30, 0xF3	; 243
    53b8:	f1 e0       	ldi	r31, 0x01	; 1
    53ba:	31 97       	sbiw	r30, 0x01	; 1
    53bc:	f1 f7       	brne	.-4      	; 0x53ba <delayms+0x58>
    53be:	00 c0       	rjmp	.+0      	; 0x53c0 <delayms+0x5e>
    53c0:	00 00       	nop
    53c2:	e3 ef       	ldi	r30, 0xF3	; 243
    53c4:	f1 e0       	ldi	r31, 0x01	; 1
    53c6:	31 97       	sbiw	r30, 0x01	; 1
    53c8:	f1 f7       	brne	.-4      	; 0x53c6 <delayms+0x64>
    53ca:	00 c0       	rjmp	.+0      	; 0x53cc <delayms+0x6a>
    53cc:	00 00       	nop
    53ce:	e3 ef       	ldi	r30, 0xF3	; 243
    53d0:	f1 e0       	ldi	r31, 0x01	; 1
    53d2:	31 97       	sbiw	r30, 0x01	; 1
    53d4:	f1 f7       	brne	.-4      	; 0x53d2 <delayms+0x70>
    53d6:	00 c0       	rjmp	.+0      	; 0x53d8 <delayms+0x76>
    53d8:	00 00       	nop
    53da:	e3 ef       	ldi	r30, 0xF3	; 243
    53dc:	f1 e0       	ldi	r31, 0x01	; 1
    53de:	31 97       	sbiw	r30, 0x01	; 1
    53e0:	f1 f7       	brne	.-4      	; 0x53de <delayms+0x7c>
    53e2:	00 c0       	rjmp	.+0      	; 0x53e4 <delayms+0x82>
    53e4:	00 00       	nop
    53e6:	61 50       	subi	r22, 0x01	; 1
    53e8:	71 09       	sbc	r23, r1
    53ea:	81 09       	sbc	r24, r1
    53ec:	91 09       	sbc	r25, r1
    53ee:	b9 cf       	rjmp	.-142    	; 0x5362 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    53f0:	08 95       	ret

000053f2 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    53f2:	81 11       	cpse	r24, r1
    53f4:	0e c0       	rjmp	.+28     	; 0x5412 <uart_rx_flush+0x20>
    53f6:	f8 94       	cli
    53f8:	10 92 ff 19 	sts	0x19FF, r1	; 0x8019ff <uarts+0x4>
    53fc:	10 92 fe 19 	sts	0x19FE, r1	; 0x8019fe <uarts+0x3>
    5400:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts>
    5404:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x1>
    5408:	10 92 fd 19 	sts	0x19FD, r1	; 0x8019fd <uarts+0x2>
    540c:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <uarts+0x5>
    5410:	78 94       	sei
    5412:	08 95       	ret

00005414 <uart_ubr>:
    5414:	4f 92       	push	r4
    5416:	5f 92       	push	r5
    5418:	6f 92       	push	r6
    541a:	7f 92       	push	r7
    541c:	8f 92       	push	r8
    541e:	9f 92       	push	r9
    5420:	af 92       	push	r10
    5422:	bf 92       	push	r11
    5424:	cf 92       	push	r12
    5426:	df 92       	push	r13
    5428:	ef 92       	push	r14
    542a:	ff 92       	push	r15
    542c:	cf 93       	push	r28
    542e:	df 93       	push	r29
    5430:	5a 01       	movw	r10, r20
    5432:	e9 01       	movw	r28, r18
    5434:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <__floatunsisf>
    5438:	2b 01       	movw	r4, r22
    543a:	3c 01       	movw	r6, r24
    543c:	20 e0       	ldi	r18, 0x00	; 0
    543e:	30 e0       	ldi	r19, 0x00	; 0
    5440:	40 e0       	ldi	r20, 0x00	; 0
    5442:	51 e4       	ldi	r21, 0x41	; 65
    5444:	0e 94 fa e5 	call	0x1cbf4	; 0x1cbf4 <__mulsf3>
    5448:	9b 01       	movw	r18, r22
    544a:	ac 01       	movw	r20, r24
    544c:	60 e8       	ldi	r22, 0x80	; 128
    544e:	76 e9       	ldi	r23, 0x96	; 150
    5450:	88 e9       	ldi	r24, 0x98	; 152
    5452:	9b e4       	ldi	r25, 0x4B	; 75
    5454:	0e 94 ab e4 	call	0x1c956	; 0x1c956 <__divsf3>
    5458:	20 e0       	ldi	r18, 0x00	; 0
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	40 e8       	ldi	r20, 0x80	; 128
    545e:	5f e3       	ldi	r21, 0x3F	; 63
    5460:	0e 94 42 e4 	call	0x1c884	; 0x1c884 <__subsf3>
    5464:	0e 94 5d e6 	call	0x1ccba	; 0x1ccba <round>
    5468:	0e 94 18 e5 	call	0x1ca30	; 0x1ca30 <__fixunssfsi>
    546c:	6b 01       	movw	r12, r22
    546e:	7c 01       	movw	r14, r24
    5470:	c1 14       	cp	r12, r1
    5472:	80 e1       	ldi	r24, 0x10	; 16
    5474:	d8 06       	cpc	r13, r24
    5476:	e1 04       	cpc	r14, r1
    5478:	f1 04       	cpc	r15, r1
    547a:	58 f4       	brcc	.+22     	; 0x5492 <uart_ubr+0x7e>
    547c:	81 e0       	ldi	r24, 0x01	; 1
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	f5 01       	movw	r30, r10
    5482:	91 83       	std	Z+1, r25	; 0x01
    5484:	80 83       	st	Z, r24
    5486:	81 2c       	mov	r8, r1
    5488:	91 2c       	mov	r9, r1
    548a:	a1 2c       	mov	r10, r1
    548c:	21 e4       	ldi	r18, 0x41	; 65
    548e:	b2 2e       	mov	r11, r18
    5490:	31 c0       	rjmp	.+98     	; 0x54f4 <uart_ubr+0xe0>
    5492:	f5 01       	movw	r30, r10
    5494:	11 82       	std	Z+1, r1	; 0x01
    5496:	10 82       	st	Z, r1
    5498:	20 e0       	ldi	r18, 0x00	; 0
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	40 e8       	ldi	r20, 0x80	; 128
    549e:	51 e4       	ldi	r21, 0x41	; 65
    54a0:	c3 01       	movw	r24, r6
    54a2:	b2 01       	movw	r22, r4
    54a4:	0e 94 fa e5 	call	0x1cbf4	; 0x1cbf4 <__mulsf3>
    54a8:	9b 01       	movw	r18, r22
    54aa:	ac 01       	movw	r20, r24
    54ac:	60 e8       	ldi	r22, 0x80	; 128
    54ae:	76 e9       	ldi	r23, 0x96	; 150
    54b0:	88 e9       	ldi	r24, 0x98	; 152
    54b2:	9b e4       	ldi	r25, 0x4B	; 75
    54b4:	0e 94 ab e4 	call	0x1c956	; 0x1c956 <__divsf3>
    54b8:	20 e0       	ldi	r18, 0x00	; 0
    54ba:	30 e0       	ldi	r19, 0x00	; 0
    54bc:	40 e8       	ldi	r20, 0x80	; 128
    54be:	5f e3       	ldi	r21, 0x3F	; 63
    54c0:	0e 94 42 e4 	call	0x1c884	; 0x1c884 <__subsf3>
    54c4:	0e 94 5d e6 	call	0x1ccba	; 0x1ccba <round>
    54c8:	0e 94 18 e5 	call	0x1ca30	; 0x1ca30 <__fixunssfsi>
    54cc:	6b 01       	movw	r12, r22
    54ce:	7c 01       	movw	r14, r24
    54d0:	81 2c       	mov	r8, r1
    54d2:	91 2c       	mov	r9, r1
    54d4:	90 e8       	ldi	r25, 0x80	; 128
    54d6:	a9 2e       	mov	r10, r25
    54d8:	91 e4       	ldi	r25, 0x41	; 65
    54da:	b9 2e       	mov	r11, r25
    54dc:	c1 14       	cp	r12, r1
    54de:	f0 e1       	ldi	r31, 0x10	; 16
    54e0:	df 06       	cpc	r13, r31
    54e2:	e1 04       	cpc	r14, r1
    54e4:	f1 04       	cpc	r15, r1
    54e6:	30 f0       	brcs	.+12     	; 0x54f4 <uart_ubr+0xe0>
    54e8:	cc 24       	eor	r12, r12
    54ea:	ca 94       	dec	r12
    54ec:	8f e0       	ldi	r24, 0x0F	; 15
    54ee:	d8 2e       	mov	r13, r24
    54f0:	e1 2c       	mov	r14, r1
    54f2:	f1 2c       	mov	r15, r1
    54f4:	c7 01       	movw	r24, r14
    54f6:	b6 01       	movw	r22, r12
    54f8:	6f 5f       	subi	r22, 0xFF	; 255
    54fa:	7f 4f       	sbci	r23, 0xFF	; 255
    54fc:	8f 4f       	sbci	r24, 0xFF	; 255
    54fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5500:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <__floatunsisf>
    5504:	a5 01       	movw	r20, r10
    5506:	94 01       	movw	r18, r8
    5508:	0e 94 fa e5 	call	0x1cbf4	; 0x1cbf4 <__mulsf3>
    550c:	9b 01       	movw	r18, r22
    550e:	ac 01       	movw	r20, r24
    5510:	60 e8       	ldi	r22, 0x80	; 128
    5512:	76 e9       	ldi	r23, 0x96	; 150
    5514:	88 e9       	ldi	r24, 0x98	; 152
    5516:	9b e4       	ldi	r25, 0x4B	; 75
    5518:	0e 94 ab e4 	call	0x1c956	; 0x1c956 <__divsf3>
    551c:	0e 94 18 e5 	call	0x1ca30	; 0x1ca30 <__fixunssfsi>
    5520:	68 83       	st	Y, r22
    5522:	79 83       	std	Y+1, r23	; 0x01
    5524:	8a 83       	std	Y+2, r24	; 0x02
    5526:	9b 83       	std	Y+3, r25	; 0x03
    5528:	c6 01       	movw	r24, r12
    552a:	df 91       	pop	r29
    552c:	cf 91       	pop	r28
    552e:	ff 90       	pop	r15
    5530:	ef 90       	pop	r14
    5532:	df 90       	pop	r13
    5534:	cf 90       	pop	r12
    5536:	bf 90       	pop	r11
    5538:	af 90       	pop	r10
    553a:	9f 90       	pop	r9
    553c:	8f 90       	pop	r8
    553e:	7f 90       	pop	r7
    5540:	6f 90       	pop	r6
    5542:	5f 90       	pop	r5
    5544:	4f 90       	pop	r4
    5546:	08 95       	ret

00005548 <uart_init>:
    5548:	a6 e0       	ldi	r26, 0x06	; 6
    554a:	b0 e0       	ldi	r27, 0x00	; 0
    554c:	ea ea       	ldi	r30, 0xAA	; 170
    554e:	fa e2       	ldi	r31, 0x2A	; 42
    5550:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    5554:	1e 82       	std	Y+6, r1	; 0x06
    5556:	1d 82       	std	Y+5, r1	; 0x05
    5558:	81 11       	cpse	r24, r1
    555a:	36 c0       	rjmp	.+108    	; 0x55c8 <uart_init+0x80>
    555c:	cb 01       	movw	r24, r22
    555e:	ba 01       	movw	r22, r20
    5560:	9e 01       	movw	r18, r28
    5562:	2f 5f       	subi	r18, 0xFF	; 255
    5564:	3f 4f       	sbci	r19, 0xFF	; 255
    5566:	ae 01       	movw	r20, r28
    5568:	4b 5f       	subi	r20, 0xFB	; 251
    556a:	5f 4f       	sbci	r21, 0xFF	; 255
    556c:	53 df       	rcall	.-346    	; 0x5414 <uart_ubr>
    556e:	f8 94       	cli
    5570:	10 92 ff 19 	sts	0x19FF, r1	; 0x8019ff <uarts+0x4>
    5574:	10 92 fe 19 	sts	0x19FE, r1	; 0x8019fe <uarts+0x3>
    5578:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts>
    557c:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x1>
    5580:	10 92 fd 19 	sts	0x19FD, r1	; 0x8019fd <uarts+0x2>
    5584:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <uarts+0x5>
    5588:	78 94       	sei
    558a:	f8 94       	cli
    558c:	58 9a       	sbi	0x0b, 0	; 11
    558e:	59 9a       	sbi	0x0b, 1	; 11
    5590:	50 98       	cbi	0x0a, 0	; 10
    5592:	51 9a       	sbi	0x0a, 1	; 10
    5594:	28 e9       	ldi	r18, 0x98	; 152
    5596:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    559a:	2d 81       	ldd	r18, Y+5	; 0x05
    559c:	3e 81       	ldd	r19, Y+6	; 0x06
    559e:	23 2b       	or	r18, r19
    55a0:	19 f0       	breq	.+6      	; 0x55a8 <uart_init+0x60>
    55a2:	22 e0       	ldi	r18, 0x02	; 2
    55a4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    55a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    55ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    55b0:	78 94       	sei
    55b2:	6c e9       	ldi	r22, 0x9C	; 156
    55b4:	7b e2       	ldi	r23, 0x2B	; 43
    55b6:	81 eb       	ldi	r24, 0xB1	; 177
    55b8:	9b e2       	ldi	r25, 0x2B	; 43
    55ba:	0e 94 53 7a 	call	0xf4a6	; 0xf4a6 <fdevopen>
    55be:	69 81       	ldd	r22, Y+1	; 0x01
    55c0:	7a 81       	ldd	r23, Y+2	; 0x02
    55c2:	8b 81       	ldd	r24, Y+3	; 0x03
    55c4:	9c 81       	ldd	r25, Y+4	; 0x04
    55c6:	03 c0       	rjmp	.+6      	; 0x55ce <uart_init+0x86>
    55c8:	60 e0       	ldi	r22, 0x00	; 0
    55ca:	70 e0       	ldi	r23, 0x00	; 0
    55cc:	cb 01       	movw	r24, r22
    55ce:	26 96       	adiw	r28, 0x06	; 6
    55d0:	e2 e0       	ldi	r30, 0x02	; 2
    55d2:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000055d6 <uart_rx_interrupt>:
    55d6:	cf 93       	push	r28
    55d8:	df 93       	push	r29
    55da:	27 e5       	ldi	r18, 0x57	; 87
    55dc:	82 9f       	mul	r24, r18
    55de:	c0 01       	movw	r24, r0
    55e0:	11 24       	eor	r1, r1
    55e2:	fc 01       	movw	r30, r24
    55e4:	e5 50       	subi	r30, 0x05	; 5
    55e6:	f6 4e       	sbci	r31, 0xE6	; 230
    55e8:	83 81       	ldd	r24, Z+3	; 0x03
    55ea:	94 81       	ldd	r25, Z+4	; 0x04
    55ec:	80 35       	cpi	r24, 0x50	; 80
    55ee:	91 05       	cpc	r25, r1
    55f0:	7c f4       	brge	.+30     	; 0x5610 <uart_rx_interrupt+0x3a>
    55f2:	30 81       	ld	r19, Z
    55f4:	21 e0       	ldi	r18, 0x01	; 1
    55f6:	23 0f       	add	r18, r19
    55f8:	20 83       	st	Z, r18
    55fa:	ef 01       	movw	r28, r30
    55fc:	c3 0f       	add	r28, r19
    55fe:	d1 1d       	adc	r29, r1
    5600:	6e 83       	std	Y+6, r22	; 0x06
    5602:	01 96       	adiw	r24, 0x01	; 1
    5604:	94 83       	std	Z+4, r25	; 0x04
    5606:	83 83       	std	Z+3, r24	; 0x03
    5608:	20 35       	cpi	r18, 0x50	; 80
    560a:	28 f0       	brcs	.+10     	; 0x5616 <uart_rx_interrupt+0x40>
    560c:	10 82       	st	Z, r1
    560e:	03 c0       	rjmp	.+6      	; 0x5616 <uart_rx_interrupt+0x40>
    5610:	85 81       	ldd	r24, Z+5	; 0x05
    5612:	81 60       	ori	r24, 0x01	; 1
    5614:	85 83       	std	Z+5, r24	; 0x05
    5616:	df 91       	pop	r29
    5618:	cf 91       	pop	r28
    561a:	08 95       	ret

0000561c <__vector_20>:
    561c:	1f 92       	push	r1
    561e:	0f 92       	push	r0
    5620:	0f b6       	in	r0, 0x3f	; 63
    5622:	0f 92       	push	r0
    5624:	11 24       	eor	r1, r1
    5626:	0b b6       	in	r0, 0x3b	; 59
    5628:	0f 92       	push	r0
    562a:	2f 93       	push	r18
    562c:	3f 93       	push	r19
    562e:	4f 93       	push	r20
    5630:	5f 93       	push	r21
    5632:	6f 93       	push	r22
    5634:	7f 93       	push	r23
    5636:	8f 93       	push	r24
    5638:	9f 93       	push	r25
    563a:	af 93       	push	r26
    563c:	bf 93       	push	r27
    563e:	ef 93       	push	r30
    5640:	ff 93       	push	r31
    5642:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5646:	80 e0       	ldi	r24, 0x00	; 0
    5648:	c6 df       	rcall	.-116    	; 0x55d6 <uart_rx_interrupt>
    564a:	ff 91       	pop	r31
    564c:	ef 91       	pop	r30
    564e:	bf 91       	pop	r27
    5650:	af 91       	pop	r26
    5652:	9f 91       	pop	r25
    5654:	8f 91       	pop	r24
    5656:	7f 91       	pop	r23
    5658:	6f 91       	pop	r22
    565a:	5f 91       	pop	r21
    565c:	4f 91       	pop	r20
    565e:	3f 91       	pop	r19
    5660:	2f 91       	pop	r18
    5662:	0f 90       	pop	r0
    5664:	0b be       	out	0x3b, r0	; 59
    5666:	0f 90       	pop	r0
    5668:	0f be       	out	0x3f, r0	; 63
    566a:	0f 90       	pop	r0
    566c:	1f 90       	pop	r1
    566e:	18 95       	reti

00005670 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5670:	81 11       	cpse	r24, r1
    5672:	07 c0       	rjmp	.+14     	; 0x5682 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5674:	f8 94       	cli

    count = uarts[uart].rx_count;
    5676:	80 91 fe 19 	lds	r24, 0x19FE	; 0x8019fe <uarts+0x3>
    567a:	90 91 ff 19 	lds	r25, 0x19FF	; 0x8019ff <uarts+0x4>

    sei();
    567e:	78 94       	sei

    return (count );
    5680:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5682:	8f ef       	ldi	r24, 0xFF	; 255
    5684:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5686:	08 95       	ret

00005688 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5688:	81 11       	cpse	r24, r1
    568a:	21 c0       	rjmp	.+66     	; 0x56ce <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    568c:	80 e0       	ldi	r24, 0x00	; 0
    568e:	f0 df       	rcall	.-32     	; 0x5670 <uart_rx_count>
    5690:	18 16       	cp	r1, r24
    5692:	19 06       	cpc	r1, r25
    5694:	dc f7       	brge	.-10     	; 0x568c <uart_get_tail+0x4>
        ;

    cli();
    5696:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5698:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <uarts+0x1>
    569c:	91 e0       	ldi	r25, 0x01	; 1
    569e:	9e 0f       	add	r25, r30
    56a0:	90 93 fc 19 	sts	0x19FC, r25	; 0x8019fc <uarts+0x1>
    56a4:	f0 e0       	ldi	r31, 0x00	; 0
    56a6:	e5 50       	subi	r30, 0x05	; 5
    56a8:	f6 4e       	sbci	r31, 0xE6	; 230
    56aa:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    56ac:	90 35       	cpi	r25, 0x50	; 80
    56ae:	10 f0       	brcs	.+4      	; 0x56b4 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    56b0:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x1>
    uarts[uart].rx_count--;
    56b4:	20 91 fe 19 	lds	r18, 0x19FE	; 0x8019fe <uarts+0x3>
    56b8:	30 91 ff 19 	lds	r19, 0x19FF	; 0x8019ff <uarts+0x4>
    56bc:	21 50       	subi	r18, 0x01	; 1
    56be:	31 09       	sbc	r19, r1
    56c0:	30 93 ff 19 	sts	0x19FF, r19	; 0x8019ff <uarts+0x4>
    56c4:	20 93 fe 19 	sts	0x19FE, r18	; 0x8019fe <uarts+0x3>
    sei();
    56c8:	78 94       	sei

    return (c & 0xff);
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    56ce:	8f ef       	ldi	r24, 0xFF	; 255
    56d0:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    56d2:	08 95       	ret

000056d4 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    56d4:	d9 df       	rcall	.-78     	; 0x5688 <uart_get_tail>
    56d6:	99 27       	eor	r25, r25
    56d8:	08 95       	ret

000056da <uart_tx_byte>:
    56da:	61 11       	cpse	r22, r1
    56dc:	09 c0       	rjmp	.+18     	; 0x56f0 <uart_tx_byte+0x16>
    56de:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    56e2:	25 ff       	sbrs	r18, 5
    56e4:	fc cf       	rjmp	.-8      	; 0x56de <uart_tx_byte+0x4>
    56e6:	28 2f       	mov	r18, r24
    56e8:	2f 77       	andi	r18, 0x7F	; 127
    56ea:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    56ee:	08 95       	ret
    56f0:	61 30       	cpi	r22, 0x01	; 1
    56f2:	49 f4       	brne	.+18     	; 0x5706 <uart_tx_byte+0x2c>
    56f4:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    56f8:	25 ff       	sbrs	r18, 5
    56fa:	fc cf       	rjmp	.-8      	; 0x56f4 <uart_tx_byte+0x1a>
    56fc:	28 2f       	mov	r18, r24
    56fe:	2f 77       	andi	r18, 0x7F	; 127
    5700:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5704:	08 95       	ret
    5706:	8f ef       	ldi	r24, 0xFF	; 255
    5708:	9f ef       	ldi	r25, 0xFF	; 255
    570a:	08 95       	ret

0000570c <uart_getchar>:
    570c:	cf 93       	push	r28
    570e:	81 11       	cpse	r24, r1
    5710:	0f c0       	rjmp	.+30     	; 0x5730 <uart_getchar+0x24>
    5712:	e0 df       	rcall	.-64     	; 0x56d4 <uart_rx_byte>
    5714:	c8 2f       	mov	r28, r24
    5716:	60 e0       	ldi	r22, 0x00	; 0
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	df df       	rcall	.-66     	; 0x56da <uart_tx_byte>
    571c:	cd 30       	cpi	r28, 0x0D	; 13
    571e:	29 f4       	brne	.+10     	; 0x572a <uart_getchar+0x1e>
    5720:	60 e0       	ldi	r22, 0x00	; 0
    5722:	8a e0       	ldi	r24, 0x0A	; 10
    5724:	90 e0       	ldi	r25, 0x00	; 0
    5726:	d9 df       	rcall	.-78     	; 0x56da <uart_tx_byte>
    5728:	ca e0       	ldi	r28, 0x0A	; 10
    572a:	8c 2f       	mov	r24, r28
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	02 c0       	rjmp	.+4      	; 0x5734 <uart_getchar+0x28>
    5730:	8f ef       	ldi	r24, 0xFF	; 255
    5732:	9f ef       	ldi	r25, 0xFF	; 255
    5734:	cf 91       	pop	r28
    5736:	08 95       	ret

00005738 <uart0_getchar>:
    5738:	80 e0       	ldi	r24, 0x00	; 0
    573a:	e8 cf       	rjmp	.-48     	; 0x570c <uart_getchar>
    573c:	08 95       	ret

0000573e <uart_putchar>:
    573e:	1f 93       	push	r17
    5740:	cf 93       	push	r28
    5742:	df 93       	push	r29
    5744:	ec 01       	movw	r28, r24
    5746:	16 2f       	mov	r17, r22
    5748:	c8 df       	rcall	.-112    	; 0x56da <uart_tx_byte>
    574a:	ca 30       	cpi	r28, 0x0A	; 10
    574c:	d1 05       	cpc	r29, r1
    574e:	21 f4       	brne	.+8      	; 0x5758 <uart_putchar+0x1a>
    5750:	61 2f       	mov	r22, r17
    5752:	8d e0       	ldi	r24, 0x0D	; 13
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	c1 df       	rcall	.-126    	; 0x56da <uart_tx_byte>
    5758:	ce 01       	movw	r24, r28
    575a:	df 91       	pop	r29
    575c:	cf 91       	pop	r28
    575e:	1f 91       	pop	r17
    5760:	08 95       	ret

00005762 <uart0_putchar>:
    5762:	cf 93       	push	r28
    5764:	df 93       	push	r29
    5766:	ec 01       	movw	r28, r24
    5768:	60 e0       	ldi	r22, 0x00	; 0
    576a:	70 e0       	ldi	r23, 0x00	; 0
    576c:	e8 df       	rcall	.-48     	; 0x573e <uart_putchar>
    576e:	ce 01       	movw	r24, r28
    5770:	df 91       	pop	r29
    5772:	cf 91       	pop	r28
    5774:	08 95       	ret

00005776 <uart_keyhit>:
    5776:	7c cf       	rjmp	.-264    	; 0x5670 <uart_rx_count>
    5778:	08 95       	ret

0000577a <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    577a:	cf 92       	push	r12
    577c:	df 92       	push	r13
    577e:	ef 92       	push	r14
    5780:	ff 92       	push	r15
    5782:	6b 01       	movw	r12, r22
    5784:	7c 01       	movw	r14, r24
    5786:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <SPI0_Speed_value>
    578a:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <SPI0_Speed_value+0x1>
    578e:	a0 91 61 17 	lds	r26, 0x1761	; 0x801761 <SPI0_Speed_value+0x2>
    5792:	b0 91 62 17 	lds	r27, 0x1762	; 0x801762 <SPI0_Speed_value+0x3>
    5796:	8c 15       	cp	r24, r12
    5798:	9d 05       	cpc	r25, r13
    579a:	ae 05       	cpc	r26, r14
    579c:	bf 05       	cpc	r27, r15
    579e:	09 f4       	brne	.+2      	; 0x57a2 <SPI0_Speed+0x28>
    57a0:	4e c0       	rjmp	.+156    	; 0x583e <SPI0_Speed+0xc4>
    57a2:	60 e0       	ldi	r22, 0x00	; 0
    57a4:	7d e2       	ldi	r23, 0x2D	; 45
    57a6:	81 e3       	ldi	r24, 0x31	; 49
    57a8:	91 e0       	ldi	r25, 0x01	; 1
    57aa:	a7 01       	movw	r20, r14
    57ac:	96 01       	movw	r18, r12
    57ae:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    57b2:	20 38       	cpi	r18, 0x80	; 128
    57b4:	31 05       	cpc	r19, r1
    57b6:	41 05       	cpc	r20, r1
    57b8:	51 05       	cpc	r21, r1
    57ba:	28 f4       	brcc	.+10     	; 0x57c6 <SPI0_Speed+0x4c>
    57bc:	20 34       	cpi	r18, 0x40	; 64
    57be:	31 05       	cpc	r19, r1
    57c0:	41 05       	cpc	r20, r1
    57c2:	51 05       	cpc	r21, r1
    57c4:	30 f0       	brcs	.+12     	; 0x57d2 <SPI0_Speed+0x58>
    57c6:	8d b5       	in	r24, 0x2d	; 45
    57c8:	8e 7f       	andi	r24, 0xFE	; 254
    57ca:	8d bd       	out	0x2d, r24	; 45
    57cc:	8c b5       	in	r24, 0x2c	; 44
    57ce:	82 60       	ori	r24, 0x02	; 2
    57d0:	1b c0       	rjmp	.+54     	; 0x5808 <SPI0_Speed+0x8e>
    57d2:	8d b5       	in	r24, 0x2d	; 45
    57d4:	20 32       	cpi	r18, 0x20	; 32
    57d6:	31 05       	cpc	r19, r1
    57d8:	41 05       	cpc	r20, r1
    57da:	51 05       	cpc	r21, r1
    57dc:	28 f0       	brcs	.+10     	; 0x57e8 <SPI0_Speed+0x6e>
    57de:	81 60       	ori	r24, 0x01	; 1
    57e0:	8d bd       	out	0x2d, r24	; 45
    57e2:	8c b5       	in	r24, 0x2c	; 44
    57e4:	82 60       	ori	r24, 0x02	; 2
    57e6:	1f c0       	rjmp	.+62     	; 0x5826 <SPI0_Speed+0xac>
    57e8:	20 31       	cpi	r18, 0x10	; 16
    57ea:	31 05       	cpc	r19, r1
    57ec:	41 05       	cpc	r20, r1
    57ee:	51 05       	cpc	r21, r1
    57f0:	10 f0       	brcs	.+4      	; 0x57f6 <SPI0_Speed+0x7c>
    57f2:	8e 7f       	andi	r24, 0xFE	; 254
    57f4:	06 c0       	rjmp	.+12     	; 0x5802 <SPI0_Speed+0x88>
    57f6:	28 30       	cpi	r18, 0x08	; 8
    57f8:	31 05       	cpc	r19, r1
    57fa:	41 05       	cpc	r20, r1
    57fc:	51 05       	cpc	r21, r1
    57fe:	40 f0       	brcs	.+16     	; 0x5810 <SPI0_Speed+0x96>
    5800:	81 60       	ori	r24, 0x01	; 1
    5802:	8d bd       	out	0x2d, r24	; 45
    5804:	8c b5       	in	r24, 0x2c	; 44
    5806:	8d 7f       	andi	r24, 0xFD	; 253
    5808:	8c bd       	out	0x2c, r24	; 44
    580a:	8c b5       	in	r24, 0x2c	; 44
    580c:	81 60       	ori	r24, 0x01	; 1
    580e:	0e c0       	rjmp	.+28     	; 0x582c <SPI0_Speed+0xb2>
    5810:	24 30       	cpi	r18, 0x04	; 4
    5812:	31 05       	cpc	r19, r1
    5814:	41 05       	cpc	r20, r1
    5816:	51 05       	cpc	r21, r1
    5818:	10 f0       	brcs	.+4      	; 0x581e <SPI0_Speed+0xa4>
    581a:	8e 7f       	andi	r24, 0xFE	; 254
    581c:	01 c0       	rjmp	.+2      	; 0x5820 <SPI0_Speed+0xa6>
    581e:	81 60       	ori	r24, 0x01	; 1
    5820:	8d bd       	out	0x2d, r24	; 45
    5822:	8c b5       	in	r24, 0x2c	; 44
    5824:	8d 7f       	andi	r24, 0xFD	; 253
    5826:	8c bd       	out	0x2c, r24	; 44
    5828:	8c b5       	in	r24, 0x2c	; 44
    582a:	8e 7f       	andi	r24, 0xFE	; 254
    582c:	8c bd       	out	0x2c, r24	; 44
    582e:	c0 92 5f 17 	sts	0x175F, r12	; 0x80175f <SPI0_Speed_value>
    5832:	d0 92 60 17 	sts	0x1760, r13	; 0x801760 <SPI0_Speed_value+0x1>
    5836:	e0 92 61 17 	sts	0x1761, r14	; 0x801761 <SPI0_Speed_value+0x2>
    583a:	f0 92 62 17 	sts	0x1762, r15	; 0x801762 <SPI0_Speed_value+0x3>
    583e:	ff 90       	pop	r15
    5840:	ef 90       	pop	r14
    5842:	df 90       	pop	r13
    5844:	cf 90       	pop	r12
    5846:	08 95       	ret

00005848 <SPI0_Mode>:
    5848:	cf 93       	push	r28
    584a:	df 93       	push	r29
    584c:	00 d0       	rcall	.+0      	; 0x584e <SPI0_Mode+0x6>
    584e:	00 d0       	rcall	.+0      	; 0x5850 <SPI0_Mode+0x8>
    5850:	1f 92       	push	r1
    5852:	ec 01       	movw	r28, r24
    5854:	81 30       	cpi	r24, 0x01	; 1
    5856:	91 05       	cpc	r25, r1
    5858:	71 f0       	breq	.+28     	; 0x5876 <SPI0_Mode+0x2e>
    585a:	2c f4       	brge	.+10     	; 0x5866 <SPI0_Mode+0x1e>
    585c:	89 2b       	or	r24, r25
    585e:	c1 f4       	brne	.+48     	; 0x5890 <SPI0_Mode+0x48>
    5860:	8c b5       	in	r24, 0x2c	; 44
    5862:	87 7f       	andi	r24, 0xF7	; 247
    5864:	11 c0       	rjmp	.+34     	; 0x5888 <SPI0_Mode+0x40>
    5866:	82 30       	cpi	r24, 0x02	; 2
    5868:	91 05       	cpc	r25, r1
    586a:	61 f0       	breq	.+24     	; 0x5884 <SPI0_Mode+0x3c>
    586c:	03 97       	sbiw	r24, 0x03	; 3
    586e:	81 f4       	brne	.+32     	; 0x5890 <SPI0_Mode+0x48>
    5870:	8c b5       	in	r24, 0x2c	; 44
    5872:	88 60       	ori	r24, 0x08	; 8
    5874:	02 c0       	rjmp	.+4      	; 0x587a <SPI0_Mode+0x32>
    5876:	8c b5       	in	r24, 0x2c	; 44
    5878:	87 7f       	andi	r24, 0xF7	; 247
    587a:	8c bd       	out	0x2c, r24	; 44
    587c:	8c b5       	in	r24, 0x2c	; 44
    587e:	84 60       	ori	r24, 0x04	; 4
    5880:	8c bd       	out	0x2c, r24	; 44
    5882:	12 c0       	rjmp	.+36     	; 0x58a8 <SPI0_Mode+0x60>
    5884:	8c b5       	in	r24, 0x2c	; 44
    5886:	88 60       	ori	r24, 0x08	; 8
    5888:	8c bd       	out	0x2c, r24	; 44
    588a:	8c b5       	in	r24, 0x2c	; 44
    588c:	8b 7f       	andi	r24, 0xFB	; 251
    588e:	f8 cf       	rjmp	.-16     	; 0x5880 <SPI0_Mode+0x38>
    5890:	ed b7       	in	r30, 0x3d	; 61
    5892:	fe b7       	in	r31, 0x3e	; 62
    5894:	d5 83       	std	Z+5, r29	; 0x05
    5896:	c4 83       	std	Z+4, r28	; 0x04
    5898:	8a e2       	ldi	r24, 0x2A	; 42
    589a:	94 e0       	ldi	r25, 0x04	; 4
    589c:	a0 e0       	ldi	r26, 0x00	; 0
    589e:	81 83       	std	Z+1, r24	; 0x01
    58a0:	92 83       	std	Z+2, r25	; 0x02
    58a2:	a3 83       	std	Z+3, r26	; 0x03
    58a4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    58a8:	d0 93 5e 17 	sts	0x175E, r29	; 0x80175e <SPI0_Mode_value+0x1>
    58ac:	c0 93 5d 17 	sts	0x175D, r28	; 0x80175d <SPI0_Mode_value>
    58b0:	cd b7       	in	r28, 0x3d	; 61
    58b2:	de b7       	in	r29, 0x3e	; 62
    58b4:	25 96       	adiw	r28, 0x05	; 5
    58b6:	e2 e0       	ldi	r30, 0x02	; 2
    58b8:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000058bc <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    58bc:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    58be:	0d b4       	in	r0, 0x2d	; 45
    58c0:	07 fe       	sbrs	r0, 7
    58c2:	fd cf       	rjmp	.-6      	; 0x58be <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    58c4:	8e b5       	in	r24, 0x2e	; 46
}
    58c6:	08 95       	ret

000058c8 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    58c8:	cf 92       	push	r12
    58ca:	df 92       	push	r13
    58cc:	ef 92       	push	r14
    58ce:	ff 92       	push	r15
    58d0:	cf 93       	push	r28
    58d2:	df 93       	push	r29
    58d4:	1f 92       	push	r1
    58d6:	cd b7       	in	r28, 0x3d	; 61
    58d8:	de b7       	in	r29, 0x3e	; 62
    58da:	6b 01       	movw	r12, r22
    58dc:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    58de:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    58e0:	2f 9a       	sbi	0x05, 7	; 5
    58e2:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    58e4:	2d 9a       	sbi	0x05, 5	; 5
    58e6:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    58e8:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    58ea:	2c 98       	cbi	0x05, 4	; 5
    58ec:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    58ee:	8c b5       	in	r24, 0x2c	; 44
    58f0:	80 61       	ori	r24, 0x10	; 16
    58f2:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    58f4:	8c b5       	in	r24, 0x2c	; 44
    58f6:	80 64       	ori	r24, 0x40	; 64
    58f8:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    58fa:	8d b5       	in	r24, 0x2d	; 45
    58fc:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    58fe:	8e b5       	in	r24, 0x2e	; 46
    5900:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    5902:	80 e0       	ldi	r24, 0x00	; 0
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	a0 df       	rcall	.-192    	; 0x5848 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    5908:	c7 01       	movw	r24, r14
    590a:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    590c:	36 df       	rcall	.-404    	; 0x577a <SPI0_Speed>
    590e:	8f ef       	ldi	r24, 0xFF	; 255
    5910:	d5 df       	rcall	.-86     	; 0x58bc <SPI0_TXRX_Byte>
    SPI0_Init_state = 1;

}
    5912:	0f 90       	pop	r0
    5914:	df 91       	pop	r29
    5916:	cf 91       	pop	r28
    5918:	ff 90       	pop	r15
    591a:	ef 90       	pop	r14
    591c:	df 90       	pop	r13
    591e:	cf 90       	pop	r12
    5920:	08 95       	ret

00005922 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5922:	0f 93       	push	r16
    5924:	1f 93       	push	r17
    5926:	cf 93       	push	r28
    5928:	df 93       	push	r29
    592a:	8c 01       	movw	r16, r24
    592c:	eb 01       	movw	r28, r22

    while(count > 0)
    592e:	1c 16       	cp	r1, r28
    5930:	1d 06       	cpc	r1, r29
    5932:	34 f4       	brge	.+12     	; 0x5940 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    5934:	f8 01       	movw	r30, r16
    5936:	81 91       	ld	r24, Z+
    5938:	8f 01       	movw	r16, r30
    593a:	c0 df       	rcall	.-128    	; 0x58bc <SPI0_TXRX_Byte>
        ++data;
        --count;
    593c:	21 97       	sbiw	r28, 0x01	; 1
    593e:	f7 cf       	rjmp	.-18     	; 0x592e <SPI0_TX+0xc>
    }
}
    5940:	df 91       	pop	r29
    5942:	cf 91       	pop	r28
    5944:	1f 91       	pop	r17
    5946:	0f 91       	pop	r16
    5948:	08 95       	ret

0000594a <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    594a:	0f 93       	push	r16
    594c:	1f 93       	push	r17
    594e:	cf 93       	push	r28
    5950:	df 93       	push	r29
    5952:	8c 01       	movw	r16, r24
    5954:	eb 01       	movw	r28, r22

    while(count > 0)
    5956:	1c 16       	cp	r1, r28
    5958:	1d 06       	cpc	r1, r29
    595a:	44 f4       	brge	.+16     	; 0x596c <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    595c:	f8 01       	movw	r30, r16
    595e:	80 81       	ld	r24, Z
    5960:	ad df       	rcall	.-166    	; 0x58bc <SPI0_TXRX_Byte>
    5962:	f8 01       	movw	r30, r16
    5964:	81 93       	st	Z+, r24
    5966:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5968:	21 97       	sbiw	r28, 0x01	; 1
    596a:	f5 cf       	rjmp	.-22     	; 0x5956 <SPI0_TXRX+0xc>
    }
}
    596c:	df 91       	pop	r29
    596e:	cf 91       	pop	r28
    5970:	1f 91       	pop	r17
    5972:	0f 91       	pop	r16
    5974:	08 95       	ret

00005976 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5976:	0f 93       	push	r16
    5978:	1f 93       	push	r17
    597a:	cf 93       	push	r28
    597c:	df 93       	push	r29
    597e:	8c 01       	movw	r16, r24
    5980:	eb 01       	movw	r28, r22

    while(count > 0)
    5982:	1c 16       	cp	r1, r28
    5984:	1d 06       	cpc	r1, r29
    5986:	3c f4       	brge	.+14     	; 0x5996 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5988:	8f ef       	ldi	r24, 0xFF	; 255
    598a:	98 df       	rcall	.-208    	; 0x58bc <SPI0_TXRX_Byte>
    598c:	f8 01       	movw	r30, r16
    598e:	81 93       	st	Z+, r24
    5990:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5992:	21 97       	sbiw	r28, 0x01	; 1
    5994:	f6 cf       	rjmp	.-20     	; 0x5982 <SPI0_RX+0xc>
    }
}
    5996:	df 91       	pop	r29
    5998:	cf 91       	pop	r28
    599a:	1f 91       	pop	r17
    599c:	0f 91       	pop	r16
    599e:	08 95       	ret

000059a0 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    59a0:	2f b7       	in	r18, 0x3f	; 63
    59a2:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <i2c+0x1>
    59a6:	81 11       	cpse	r24, r1
    59a8:	04 c0       	rjmp	.+8      	; 0x59b2 <i2c_timer+0x12>
    59aa:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <i2c+0x2>
    59ae:	81 11       	cpse	r24, r1
    59b0:	0b c0       	rjmp	.+22     	; 0x59c8 <i2c_timer+0x28>
    59b2:	80 91 56 1a 	lds	r24, 0x1A56	; 0x801a56 <i2c+0x4>
    59b6:	90 91 57 1a 	lds	r25, 0x1A57	; 0x801a57 <i2c+0x5>
    59ba:	00 97       	sbiw	r24, 0x00	; 0
    59bc:	29 f0       	breq	.+10     	; 0x59c8 <i2c_timer+0x28>
    59be:	01 97       	sbiw	r24, 0x01	; 1
    59c0:	90 93 57 1a 	sts	0x1A57, r25	; 0x801a57 <i2c+0x5>
    59c4:	80 93 56 1a 	sts	0x1A56, r24	; 0x801a56 <i2c+0x4>
    59c8:	2f bf       	out	0x3f, r18	; 63
    59ca:	08 95       	ret

000059cc <i2c_check_op>:
    59cc:	ad b7       	in	r26, 0x3d	; 61
    59ce:	be b7       	in	r27, 0x3e	; 62
    59d0:	17 97       	sbiw	r26, 0x07	; 7
    59d2:	0f b6       	in	r0, 0x3f	; 63
    59d4:	f8 94       	cli
    59d6:	be bf       	out	0x3e, r27	; 62
    59d8:	0f be       	out	0x3f, r0	; 63
    59da:	ad bf       	out	0x3d, r26	; 61
    59dc:	28 2f       	mov	r18, r24
    59de:	08 2e       	mov	r0, r24
    59e0:	00 0c       	add	r0, r0
    59e2:	33 0b       	sbc	r19, r19
    59e4:	80 31       	cpi	r24, 0x10	; 16
    59e6:	88 f0       	brcs	.+34     	; 0x5a0a <i2c_check_op+0x3e>
    59e8:	80 e1       	ldi	r24, 0x10	; 16
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	ed b7       	in	r30, 0x3d	; 61
    59ee:	fe b7       	in	r31, 0x3e	; 62
    59f0:	97 83       	std	Z+7, r25	; 0x07
    59f2:	86 83       	std	Z+6, r24	; 0x06
    59f4:	35 83       	std	Z+5, r19	; 0x05
    59f6:	24 83       	std	Z+4, r18	; 0x04
    59f8:	8f e3       	ldi	r24, 0x3F	; 63
    59fa:	95 e0       	ldi	r25, 0x05	; 5
    59fc:	a0 e0       	ldi	r26, 0x00	; 0
    59fe:	81 83       	std	Z+1, r24	; 0x01
    5a00:	92 83       	std	Z+2, r25	; 0x02
    5a02:	a3 83       	std	Z+3, r26	; 0x03
    5a04:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    5a08:	24 c0       	rjmp	.+72     	; 0x5a52 <i2c_check_op+0x86>
    5a0a:	f9 01       	movw	r30, r18
    5a0c:	ee 0f       	add	r30, r30
    5a0e:	ff 1f       	adc	r31, r31
    5a10:	ec 59       	subi	r30, 0x9C	; 156
    5a12:	f8 4e       	sbci	r31, 0xE8	; 232
    5a14:	01 90       	ld	r0, Z+
    5a16:	f0 81       	ld	r31, Z
    5a18:	e0 2d       	mov	r30, r0
    5a1a:	30 97       	sbiw	r30, 0x00	; 0
    5a1c:	d1 f0       	breq	.+52     	; 0x5a52 <i2c_check_op+0x86>
    5a1e:	80 85       	ldd	r24, Z+8	; 0x08
    5a20:	91 85       	ldd	r25, Z+9	; 0x09
    5a22:	89 2b       	or	r24, r25
    5a24:	39 f4       	brne	.+14     	; 0x5a34 <i2c_check_op+0x68>
    5a26:	ed b7       	in	r30, 0x3d	; 61
    5a28:	fe b7       	in	r31, 0x3e	; 62
    5a2a:	35 83       	std	Z+5, r19	; 0x05
    5a2c:	24 83       	std	Z+4, r18	; 0x04
    5a2e:	86 e2       	ldi	r24, 0x26	; 38
    5a30:	95 e0       	ldi	r25, 0x05	; 5
    5a32:	09 c0       	rjmp	.+18     	; 0x5a46 <i2c_check_op+0x7a>
    5a34:	86 81       	ldd	r24, Z+6	; 0x06
    5a36:	81 11       	cpse	r24, r1
    5a38:	0e c0       	rjmp	.+28     	; 0x5a56 <i2c_check_op+0x8a>
    5a3a:	ed b7       	in	r30, 0x3d	; 61
    5a3c:	fe b7       	in	r31, 0x3e	; 62
    5a3e:	35 83       	std	Z+5, r19	; 0x05
    5a40:	24 83       	std	Z+4, r18	; 0x04
    5a42:	80 e1       	ldi	r24, 0x10	; 16
    5a44:	95 e0       	ldi	r25, 0x05	; 5
    5a46:	a0 e0       	ldi	r26, 0x00	; 0
    5a48:	81 83       	std	Z+1, r24	; 0x01
    5a4a:	92 83       	std	Z+2, r25	; 0x02
    5a4c:	a3 83       	std	Z+3, r26	; 0x03
    5a4e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    5a52:	80 e0       	ldi	r24, 0x00	; 0
    5a54:	01 c0       	rjmp	.+2      	; 0x5a58 <i2c_check_op+0x8c>
    5a56:	81 e0       	ldi	r24, 0x01	; 1
    5a58:	ad b7       	in	r26, 0x3d	; 61
    5a5a:	be b7       	in	r27, 0x3e	; 62
    5a5c:	17 96       	adiw	r26, 0x07	; 7
    5a5e:	0f b6       	in	r0, 0x3f	; 63
    5a60:	f8 94       	cli
    5a62:	be bf       	out	0x3e, r27	; 62
    5a64:	0f be       	out	0x3f, r0	; 63
    5a66:	ad bf       	out	0x3d, r26	; 61
    5a68:	08 95       	ret

00005a6a <i2c_task_init>:
    5a6a:	8f b7       	in	r24, 0x3f	; 63
    5a6c:	f8 94       	cli
    5a6e:	e4 e6       	ldi	r30, 0x64	; 100
    5a70:	f7 e1       	ldi	r31, 0x17	; 23
    5a72:	11 92       	st	Z+, r1
    5a74:	11 92       	st	Z+, r1
    5a76:	97 e1       	ldi	r25, 0x17	; 23
    5a78:	e4 38       	cpi	r30, 0x84	; 132
    5a7a:	f9 07       	cpc	r31, r25
    5a7c:	d1 f7       	brne	.-12     	; 0x5a72 <i2c_task_init+0x8>
    5a7e:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
    5a82:	91 e0       	ldi	r25, 0x01	; 1
    5a84:	90 93 86 17 	sts	0x1786, r25	; 0x801786 <i2c_task+0x2>
    5a88:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <i2c_task+0x1>
    5a8c:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <i2c_task+0x3>
    5a90:	8f bf       	out	0x3f, r24	; 63
    5a92:	08 95       	ret

00005a94 <i2c_task_op_add>:
    5a94:	ef 92       	push	r14
    5a96:	ff 92       	push	r15
    5a98:	0f 93       	push	r16
    5a9a:	1f 93       	push	r17
    5a9c:	cf 93       	push	r28
    5a9e:	df 93       	push	r29
    5aa0:	d8 2f       	mov	r29, r24
    5aa2:	c6 2f       	mov	r28, r22
    5aa4:	7a 01       	movw	r14, r20
    5aa6:	02 2f       	mov	r16, r18
    5aa8:	1f b7       	in	r17, 0x3f	; 63
    5aaa:	6a e0       	ldi	r22, 0x0A	; 10
    5aac:	70 e0       	ldi	r23, 0x00	; 0
    5aae:	81 e0       	ldi	r24, 0x01	; 1
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	a9 db       	rcall	.-2222   	; 0x5206 <safecalloc>
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	89 2b       	or	r24, r25
    5ab8:	89 f0       	breq	.+34     	; 0x5adc <i2c_task_op_add+0x48>
    5aba:	f8 94       	cli
    5abc:	11 82       	std	Z+1, r1	; 0x01
    5abe:	12 82       	std	Z+2, r1	; 0x02
    5ac0:	dd 0f       	add	r29, r29
    5ac2:	c1 70       	andi	r28, 0x01	; 1
    5ac4:	cd 2b       	or	r28, r29
    5ac6:	c0 83       	st	Z, r28
    5ac8:	84 e1       	ldi	r24, 0x14	; 20
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	95 83       	std	Z+5, r25	; 0x05
    5ace:	84 83       	std	Z+4, r24	; 0x04
    5ad0:	13 82       	std	Z+3, r1	; 0x03
    5ad2:	06 83       	std	Z+6, r16	; 0x06
    5ad4:	17 82       	std	Z+7, r1	; 0x07
    5ad6:	f1 86       	std	Z+9, r15	; 0x09
    5ad8:	e0 86       	std	Z+8, r14	; 0x08
    5ada:	1f bf       	out	0x3f, r17	; 63
    5adc:	cf 01       	movw	r24, r30
    5ade:	cd b7       	in	r28, 0x3d	; 61
    5ae0:	de b7       	in	r29, 0x3e	; 62
    5ae2:	e6 e0       	ldi	r30, 0x06	; 6
    5ae4:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00005ae8 <i2c_init>:
    5ae8:	cf 93       	push	r28
    5aea:	00 d0       	rcall	.+0      	; 0x5aec <i2c_init+0x4>
    5aec:	1f 92       	push	r1
    5aee:	9b 01       	movw	r18, r22
    5af0:	ac 01       	movw	r20, r24
    5af2:	cf b7       	in	r28, 0x3f	; 63
    5af4:	60 e0       	ldi	r22, 0x00	; 0
    5af6:	7d e2       	ldi	r23, 0x2D	; 45
    5af8:	81 e3       	ldi	r24, 0x31	; 49
    5afa:	91 e0       	ldi	r25, 0x01	; 1
    5afc:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    5b00:	da 01       	movw	r26, r20
    5b02:	c9 01       	movw	r24, r18
    5b04:	40 97       	sbiw	r24, 0x10	; 16
    5b06:	a1 09       	sbc	r26, r1
    5b08:	b1 09       	sbc	r27, r1
    5b0a:	ac 01       	movw	r20, r24
    5b0c:	bd 01       	movw	r22, r26
    5b0e:	76 95       	lsr	r23
    5b10:	67 95       	ror	r22
    5b12:	57 95       	ror	r21
    5b14:	47 95       	ror	r20
    5b16:	ca 01       	movw	r24, r20
    5b18:	88 27       	eor	r24, r24
    5b1a:	89 2b       	or	r24, r25
    5b1c:	59 f0       	breq	.+22     	; 0x5b34 <i2c_init+0x4c>
    5b1e:	84 ef       	ldi	r24, 0xF4	; 244
    5b20:	94 e0       	ldi	r25, 0x04	; 4
    5b22:	a0 e0       	ldi	r26, 0x00	; 0
    5b24:	ed b7       	in	r30, 0x3d	; 61
    5b26:	fe b7       	in	r31, 0x3e	; 62
    5b28:	81 83       	std	Z+1, r24	; 0x01
    5b2a:	92 83       	std	Z+2, r25	; 0x02
    5b2c:	a3 83       	std	Z+3, r26	; 0x03
    5b2e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    5b32:	3a c0       	rjmp	.+116    	; 0x5ba8 <i2c_init+0xc0>
    5b34:	f8 94       	cli
    5b36:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5b3a:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
    5b3e:	81 e0       	ldi	r24, 0x01	; 1
    5b40:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
    5b44:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
    5b48:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <i2c_task+0x2>
    5b4c:	40 9a       	sbi	0x08, 0	; 8
    5b4e:	41 9a       	sbi	0x08, 1	; 8
    5b50:	84 e8       	ldi	r24, 0x84	; 132
    5b52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b56:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    5b5a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b5e:	8c 7f       	andi	r24, 0xFC	; 252
    5b60:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b64:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <i2c_init_status>
    5b68:	81 11       	cpse	r24, r1
    5b6a:	1d c0       	rjmp	.+58     	; 0x5ba6 <i2c_init+0xbe>
    5b6c:	e4 e6       	ldi	r30, 0x64	; 100
    5b6e:	f7 e1       	ldi	r31, 0x17	; 23
    5b70:	11 92       	st	Z+, r1
    5b72:	11 92       	st	Z+, r1
    5b74:	27 e1       	ldi	r18, 0x17	; 23
    5b76:	e4 38       	cpi	r30, 0x84	; 132
    5b78:	f2 07       	cpc	r31, r18
    5b7a:	d1 f7       	brne	.-12     	; 0x5b70 <i2c_init+0x88>
    5b7c:	61 e0       	ldi	r22, 0x01	; 1
    5b7e:	70 e0       	ldi	r23, 0x00	; 0
    5b80:	80 ed       	ldi	r24, 0xD0	; 208
    5b82:	9c e2       	ldi	r25, 0x2C	; 44
    5b84:	0e 94 04 36 	call	0x6c08	; 0x6c08 <set_timers>
    5b88:	01 96       	adiw	r24, 0x01	; 1
    5b8a:	51 f4       	brne	.+20     	; 0x5ba0 <i2c_init+0xb8>
    5b8c:	8d ed       	ldi	r24, 0xDD	; 221
    5b8e:	94 e0       	ldi	r25, 0x04	; 4
    5b90:	a0 e0       	ldi	r26, 0x00	; 0
    5b92:	ed b7       	in	r30, 0x3d	; 61
    5b94:	fe b7       	in	r31, 0x3e	; 62
    5b96:	81 83       	std	Z+1, r24	; 0x01
    5b98:	92 83       	std	Z+2, r25	; 0x02
    5b9a:	a3 83       	std	Z+3, r26	; 0x03
    5b9c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    5ba0:	81 e0       	ldi	r24, 0x01	; 1
    5ba2:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <i2c_init_status>
    5ba6:	cf bf       	out	0x3f, r28	; 63
    5ba8:	0f 90       	pop	r0
    5baa:	0f 90       	pop	r0
    5bac:	0f 90       	pop	r0
    5bae:	cf 91       	pop	r28
    5bb0:	08 95       	ret

00005bb2 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5bb2:	61 e0       	ldi	r22, 0x01	; 1
    5bb4:	70 e0       	ldi	r23, 0x00	; 0
    5bb6:	80 e0       	ldi	r24, 0x00	; 0
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	a6 db       	rcall	.-2228   	; 0x5308 <delayus>
	if(!i2c.enable || i2c.done )
    5bbc:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <i2c+0x1>
    5bc0:	88 23       	and	r24, r24
    5bc2:	39 f0       	breq	.+14     	; 0x5bd2 <i2c_done+0x20>
		return(1);
    5bc4:	81 e0       	ldi	r24, 0x01	; 1
    5bc6:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <i2c+0x2>
    5bca:	91 11       	cpse	r25, r1
    5bcc:	03 c0       	rjmp	.+6      	; 0x5bd4 <i2c_done+0x22>
    5bce:	80 e0       	ldi	r24, 0x00	; 0
    5bd0:	08 95       	ret
    5bd2:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5bd4:	08 95       	ret

00005bd6 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5bd6:	61 e0       	ldi	r22, 0x01	; 1
    5bd8:	70 e0       	ldi	r23, 0x00	; 0
    5bda:	80 e0       	ldi	r24, 0x00	; 0
    5bdc:	90 e0       	ldi	r25, 0x00	; 0
    5bde:	94 db       	rcall	.-2264   	; 0x5308 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    5be0:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <i2c_task>
    5be4:	88 23       	and	r24, r24
    5be6:	39 f0       	breq	.+14     	; 0x5bf6 <i2c_task_done+0x20>
		return(1);
    5be8:	81 e0       	ldi	r24, 0x01	; 1
    5bea:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <i2c_task+0x2>
    5bee:	91 11       	cpse	r25, r1
    5bf0:	03 c0       	rjmp	.+6      	; 0x5bf8 <i2c_task_done+0x22>
    5bf2:	80 e0       	ldi	r24, 0x00	; 0
    5bf4:	08 95       	ret
    5bf6:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5bf8:	08 95       	ret

00005bfa <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    5bfa:	e2 e5       	ldi	r30, 0x52	; 82
    5bfc:	fa e1       	ldi	r31, 0x1A	; 26
    5bfe:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    5c00:	81 e0       	ldi	r24, 0x01	; 1
    5c02:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    5c04:	84 e1       	ldi	r24, 0x14	; 20
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	95 83       	std	Z+5, r25	; 0x05
    5c0a:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5c0c:	85 ea       	ldi	r24, 0xA5	; 165
    5c0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c12:	08 95       	ret

00005c14 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    5c14:	ef 92       	push	r14
    5c16:	ff 92       	push	r15
    5c18:	0f 93       	push	r16
    5c1a:	1f 93       	push	r17
    5c1c:	cf 93       	push	r28
    5c1e:	df 93       	push	r29
	uint8_t sreg = SREG;
    5c20:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    5c22:	f8 94       	cli
	i2c_task.done = 0;
    5c24:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <i2c_task+0x2>
	i2c_task.error = 0;
    5c28:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <i2c_task+0x3>
	i2c_task.ind = 0;
    5c2c:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5c30:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    5c32:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    5c34:	ee 24       	eor	r14, r14
    5c36:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    5c38:	04 e1       	ldi	r16, 0x14	; 20
    5c3a:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5c3c:	8c 2f       	mov	r24, r28
    5c3e:	c6 de       	rcall	.-628    	; 0x59cc <i2c_check_op>
    5c40:	88 23       	and	r24, r24
    5c42:	d1 f0       	breq	.+52     	; 0x5c78 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    5c44:	ec 2f       	mov	r30, r28
    5c46:	ee 0f       	add	r30, r30
    5c48:	ff 0b       	sbc	r31, r31
    5c4a:	ec 59       	subi	r30, 0x9C	; 156
    5c4c:	f8 4e       	sbci	r31, 0xE8	; 232
    5c4e:	01 90       	ld	r0, Z+
    5c50:	f0 81       	ld	r31, Z
    5c52:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5c54:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5c56:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5c58:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5c5a:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5c5c:	15 83       	std	Z+5, r17	; 0x05
    5c5e:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    5c60:	d1 11       	cpse	r29, r1
    5c62:	07 c0       	rjmp	.+14     	; 0x5c72 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5c64:	8a e0       	ldi	r24, 0x0A	; 10
    5c66:	a2 e5       	ldi	r26, 0x52	; 82
    5c68:	ba e1       	ldi	r27, 0x1A	; 26
    5c6a:	01 90       	ld	r0, Z+
    5c6c:	0d 92       	st	X+, r0
    5c6e:	8a 95       	dec	r24
    5c70:	e1 f7       	brne	.-8      	; 0x5c6a <i2c_task_run+0x56>
    5c72:	cf 5f       	subi	r28, 0xFF	; 255
    5c74:	d1 e0       	ldi	r29, 0x01	; 1
    5c76:	e2 cf       	rjmp	.-60     	; 0x5c3c <i2c_task_run+0x28>
		}
	}

	if(run)
    5c78:	dd 23       	and	r29, r29
    5c7a:	91 f0       	breq	.+36     	; 0x5ca0 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5c7c:	87 ea       	ldi	r24, 0xA7	; 167
    5c7e:	9e e2       	ldi	r25, 0x2E	; 46
    5c80:	90 93 89 17 	sts	0x1789, r25	; 0x801789 <i2c_callback+0x1>
    5c84:	80 93 88 17 	sts	0x1788, r24	; 0x801788 <i2c_callback>

		i2c_task.enable = 1;
    5c88:	81 e0       	ldi	r24, 0x01	; 1
    5c8a:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <i2c_task>
		i2c_task.done = 0;
    5c8e:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5c92:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c96:	8c 7f       	andi	r24, 0xFC	; 252
    5c98:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5c9c:	ae df       	rcall	.-164    	; 0x5bfa <i2c_send_start>
    5c9e:	15 c0       	rjmp	.+42     	; 0x5cca <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5ca0:	10 92 89 17 	sts	0x1789, r1	; 0x801789 <i2c_callback+0x1>
    5ca4:	10 92 88 17 	sts	0x1788, r1	; 0x801788 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5ca8:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
		i2c_task.done = 1;
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5cb2:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
        i2c.enable = 0;
    5cb6:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5cba:	84 e8       	ldi	r24, 0x84	; 132
    5cbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5cc0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5cc4:	8c 7f       	andi	r24, 0xFC	; 252
    5cc6:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5cca:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5cce:	ff be       	out	0x3f, r15	; 63

}
    5cd0:	cd b7       	in	r28, 0x3d	; 61
    5cd2:	de b7       	in	r29, 0x3e	; 62
    5cd4:	e6 e0       	ldi	r30, 0x06	; 6
    5cd6:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00005cda <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5cda:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5cdc:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5cde:	10 92 89 17 	sts	0x1789, r1	; 0x801789 <i2c_callback+0x1>
    5ce2:	10 92 88 17 	sts	0x1788, r1	; 0x801788 <i2c_callback>

	i2c.enable = 1; // Enabled
    5ce6:	31 e0       	ldi	r19, 0x01	; 1
    5ce8:	30 93 53 1a 	sts	0x1A53, r19	; 0x801a53 <i2c+0x1>
	i2c.done = 0;
    5cec:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5cf0:	88 0f       	add	r24, r24
    5cf2:	61 70       	andi	r22, 0x01	; 1
    5cf4:	68 2b       	or	r22, r24
    5cf6:	60 93 52 1a 	sts	0x1A52, r22	; 0x801a52 <i2c>
	i2c.flags = 0;
    5cfa:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x3>
    i2c.len = len;
    5cfe:	20 93 58 1a 	sts	0x1A58, r18	; 0x801a58 <i2c+0x6>
    i2c.ind = 0;
    5d02:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <i2c+0x7>
    i2c.buf = buf;
    5d06:	50 93 5b 1a 	sts	0x1A5B, r21	; 0x801a5b <i2c+0x9>
    5d0a:	40 93 5a 1a 	sts	0x1A5A, r20	; 0x801a5a <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5d0e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5d12:	8c 7f       	andi	r24, 0xFC	; 252
    5d14:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5d18:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5d1c:	9f bf       	out	0x3f, r25	; 63
    5d1e:	6d df       	rcall	.-294    	; 0x5bfa <i2c_send_start>
    5d20:	48 df       	rcall	.-368    	; 0x5bb2 <i2c_done>
    5d22:	88 23       	and	r24, r24
		;
#endif
	return( i2c.flags ? 0 : 1);
    5d24:	e9 f3       	breq	.-6      	; 0x5d20 <i2c_fn+0x46>
    5d26:	81 e0       	ldi	r24, 0x01	; 1
    5d28:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <i2c+0x3>
    5d2c:	91 11       	cpse	r25, r1
}
    5d2e:	80 e0       	ldi	r24, 0x00	; 0
    5d30:	08 95       	ret

00005d32 <i2c_send_stop>:
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5d32:	e2 e5       	ldi	r30, 0x52	; 82
    5d34:	fa e1       	ldi	r31, 0x1A	; 26
    5d36:	81 e0       	ldi	r24, 0x01	; 1
    5d38:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5d3a:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5d3c:	84 e9       	ldi	r24, 0x94	; 148
    5d3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    5d42:	6a e0       	ldi	r22, 0x0A	; 10
    5d44:	70 e0       	ldi	r23, 0x00	; 0
    5d46:	80 e0       	ldi	r24, 0x00	; 0
    5d48:	90 e0       	ldi	r25, 0x00	; 0
    5d4a:	de ca       	rjmp	.-2628   	; 0x5308 <delayus>
    5d4c:	08 95       	ret

00005d4e <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5d4e:	cf 93       	push	r28
    5d50:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5d52:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <i2c_task>
    5d56:	88 23       	and	r24, r24
    5d58:	09 f4       	brne	.+2      	; 0x5d5c <i2c_task_next_op+0xe>
    5d5a:	46 c0       	rjmp	.+140    	; 0x5de8 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5d5c:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <i2c_task+0x1>
    5d60:	35 de       	rcall	.-918    	; 0x59cc <i2c_check_op>
    5d62:	88 23       	and	r24, r24
    5d64:	b1 f0       	breq	.+44     	; 0x5d92 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5d66:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <i2c_task+0x1>
    5d6a:	ee 0f       	add	r30, r30
    5d6c:	ff 0b       	sbc	r31, r31
    5d6e:	ec 59       	subi	r30, 0x9C	; 156
    5d70:	f8 4e       	sbci	r31, 0xE8	; 232
    5d72:	c0 81       	ld	r28, Z
    5d74:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5d76:	8a e0       	ldi	r24, 0x0A	; 10
    5d78:	e2 e5       	ldi	r30, 0x52	; 82
    5d7a:	fa e1       	ldi	r31, 0x1A	; 26
    5d7c:	de 01       	movw	r26, r28
    5d7e:	01 90       	ld	r0, Z+
    5d80:	0d 92       	st	X+, r0
    5d82:	8a 95       	dec	r24
    5d84:	e1 f7       	brne	.-8      	; 0x5d7e <i2c_task_next_op+0x30>
			if(o->flags)
    5d86:	8b 81       	ldd	r24, Y+3	; 0x03
    5d88:	88 23       	and	r24, r24
    5d8a:	19 f0       	breq	.+6      	; 0x5d92 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5d8c:	81 e0       	ldi	r24, 0x01	; 1
    5d8e:	80 93 87 17 	sts	0x1787, r24	; 0x801787 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5d92:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <i2c_task+0x1>
    5d96:	8f 5f       	subi	r24, 0xFF	; 255
    5d98:	19 de       	rcall	.-974    	; 0x59cc <i2c_check_op>
    5d9a:	88 23       	and	r24, r24
    5d9c:	29 f1       	breq	.+74     	; 0x5de8 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5d9e:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <i2c_task+0x1>
    5da2:	ef 5f       	subi	r30, 0xFF	; 255
    5da4:	e0 93 85 17 	sts	0x1785, r30	; 0x801785 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5da8:	ee 0f       	add	r30, r30
    5daa:	ff 0b       	sbc	r31, r31
    5dac:	ec 59       	subi	r30, 0x9C	; 156
    5dae:	f8 4e       	sbci	r31, 0xE8	; 232
    5db0:	01 90       	ld	r0, Z+
    5db2:	f0 81       	ld	r31, Z
    5db4:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5db6:	81 81       	ldd	r24, Z+1	; 0x01
    5db8:	81 30       	cpi	r24, 0x01	; 1
    5dba:	19 f0       	breq	.+6      	; 0x5dc2 <i2c_task_next_op+0x74>
    5dbc:	82 81       	ldd	r24, Z+2	; 0x02
    5dbe:	81 11       	cpse	r24, r1
    5dc0:	13 c0       	rjmp	.+38     	; 0x5de8 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5dc2:	84 e1       	ldi	r24, 0x14	; 20
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	95 83       	std	Z+5, r25	; 0x05
    5dc8:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5dca:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5dcc:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5dce:	81 e0       	ldi	r24, 0x01	; 1
    5dd0:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5dd2:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5dd4:	8a e0       	ldi	r24, 0x0A	; 10
    5dd6:	a2 e5       	ldi	r26, 0x52	; 82
    5dd8:	ba e1       	ldi	r27, 0x1A	; 26
    5dda:	01 90       	ld	r0, Z+
    5ddc:	0d 92       	st	X+, r0
    5dde:	8a 95       	dec	r24

				i2c_send_start();
    5de0:	e1 f7       	brne	.-8      	; 0x5dda <i2c_task_next_op+0x8c>
    5de2:	0b df       	rcall	.-490    	; 0x5bfa <i2c_send_start>

				return(1);
    5de4:	81 e0       	ldi	r24, 0x01	; 1
    5de6:	0f c0       	rjmp	.+30     	; 0x5e06 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5de8:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
	i2c_task.done = 1;
    5dec:	81 e0       	ldi	r24, 0x01	; 1
    5dee:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5df2:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
	i2c.enable = 0;
    5df6:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
	i2c.flags = 0;
    5dfa:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x3>
	i2c.ind = 0;
    5dfe:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <i2c+0x7>

	i2c_send_stop();
    5e02:	97 df       	rcall	.-210    	; 0x5d32 <i2c_send_stop>

	return(0);
    5e04:	80 e0       	ldi	r24, 0x00	; 0
}
    5e06:	df 91       	pop	r29
    5e08:	cf 91       	pop	r28
    5e0a:	08 95       	ret

00005e0c <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5e0c:	e0 91 88 17 	lds	r30, 0x1788	; 0x801788 <i2c_callback>
    5e10:	f0 91 89 17 	lds	r31, 0x1789	; 0x801789 <i2c_callback+0x1>
    5e14:	30 97       	sbiw	r30, 0x00	; 0
    5e16:	11 f0       	breq	.+4      	; 0x5e1c <i2c_next+0x10>
	    i2c_callback();
    5e18:	09 95       	icall
	else
		i2c_send_stop();
    5e1a:	08 95       	ret
    5e1c:	8a cf       	rjmp	.-236    	; 0x5d32 <i2c_send_stop>
    5e1e:	08 95       	ret

00005e20 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5e20:	1f 92       	push	r1
    5e22:	0f 92       	push	r0
    5e24:	0f b6       	in	r0, 0x3f	; 63
    5e26:	0f 92       	push	r0
    5e28:	11 24       	eor	r1, r1
    5e2a:	0b b6       	in	r0, 0x3b	; 59
    5e2c:	0f 92       	push	r0
    5e2e:	2f 93       	push	r18
    5e30:	3f 93       	push	r19
    5e32:	4f 93       	push	r20
    5e34:	5f 93       	push	r21
    5e36:	6f 93       	push	r22
    5e38:	7f 93       	push	r23
    5e3a:	8f 93       	push	r24
    5e3c:	9f 93       	push	r25
    5e3e:	af 93       	push	r26
    5e40:	bf 93       	push	r27
    5e42:	ef 93       	push	r30
    5e44:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5e46:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5e4a:	90 91 53 1a 	lds	r25, 0x1A53	; 0x801a53 <i2c+0x1>
    5e4e:	99 23       	and	r25, r25
    5e50:	09 f1       	breq	.+66     	; 0x5e94 <__vector_26+0x74>
    5e52:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <i2c+0x2>
    5e56:	91 11       	cpse	r25, r1
    5e58:	1d c0       	rjmp	.+58     	; 0x5e94 <__vector_26+0x74>
    5e5a:	20 91 5a 1a 	lds	r18, 0x1A5A	; 0x801a5a <i2c+0x8>
    5e5e:	30 91 5b 1a 	lds	r19, 0x1A5B	; 0x801a5b <i2c+0x9>
    5e62:	21 15       	cp	r18, r1
    5e64:	31 05       	cpc	r19, r1
    5e66:	b1 f0       	breq	.+44     	; 0x5e94 <__vector_26+0x74>
    5e68:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <i2c+0x6>
    5e6c:	99 23       	and	r25, r25
    5e6e:	91 f0       	breq	.+36     	; 0x5e94 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5e70:	40 91 56 1a 	lds	r20, 0x1A56	; 0x801a56 <i2c+0x4>
    5e74:	50 91 57 1a 	lds	r21, 0x1A57	; 0x801a57 <i2c+0x5>
    5e78:	45 2b       	or	r20, r21
    5e7a:	71 f4       	brne	.+28     	; 0x5e98 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5e7c:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5e80:	81 60       	ori	r24, 0x01	; 1
    5e82:	80 93 55 1a 	sts	0x1A55, r24	; 0x801a55 <i2c+0x3>
		i2c_task.enable = 0;
    5e86:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
		i2c_task.done = 1;
    5e8a:	81 e0       	ldi	r24, 0x01	; 1
    5e8c:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <i2c_task+0x2>
		i2c_task.error = 1;
    5e90:	80 93 87 17 	sts	0x1787, r24	; 0x801787 <i2c_task+0x3>
		i2c_send_stop();
		return;
    5e94:	4e df       	rcall	.-356    	; 0x5d32 <i2c_send_stop>
	}

	// Master Receiver mode
	switch (status)
    5e96:	9b c0       	rjmp	.+310    	; 0x5fce <__vector_26+0x1ae>
    5e98:	88 7f       	andi	r24, 0xF8	; 248
    5e9a:	80 33       	cpi	r24, 0x30	; 48
    5e9c:	09 f4       	brne	.+2      	; 0x5ea0 <__vector_26+0x80>
    5e9e:	83 c0       	rjmp	.+262    	; 0x5fa6 <__vector_26+0x186>
    5ea0:	70 f4       	brcc	.+28     	; 0x5ebe <__vector_26+0x9e>
    5ea2:	88 31       	cpi	r24, 0x18	; 24
    5ea4:	09 f1       	breq	.+66     	; 0x5ee8 <__vector_26+0xc8>
    5ea6:	28 f4       	brcc	.+10     	; 0x5eb2 <__vector_26+0x92>
    5ea8:	88 30       	cpi	r24, 0x08	; 8
    5eaa:	c9 f0       	breq	.+50     	; 0x5ede <__vector_26+0xbe>
    5eac:	80 31       	cpi	r24, 0x10	; 16
    5eae:	b9 f0       	breq	.+46     	; 0x5ede <__vector_26+0xbe>
    5eb0:	83 c0       	rjmp	.+262    	; 0x5fb8 <__vector_26+0x198>
    5eb2:	80 32       	cpi	r24, 0x20	; 32
    5eb4:	09 f4       	brne	.+2      	; 0x5eb8 <__vector_26+0x98>
    5eb6:	65 c0       	rjmp	.+202    	; 0x5f82 <__vector_26+0x162>
    5eb8:	88 32       	cpi	r24, 0x28	; 40
    5eba:	b1 f0       	breq	.+44     	; 0x5ee8 <__vector_26+0xc8>
    5ebc:	7d c0       	rjmp	.+250    	; 0x5fb8 <__vector_26+0x198>
    5ebe:	88 34       	cpi	r24, 0x48	; 72
    5ec0:	09 f4       	brne	.+2      	; 0x5ec4 <__vector_26+0xa4>
    5ec2:	68 c0       	rjmp	.+208    	; 0x5f94 <__vector_26+0x174>
    5ec4:	38 f4       	brcc	.+14     	; 0x5ed4 <__vector_26+0xb4>
    5ec6:	88 33       	cpi	r24, 0x38	; 56
    5ec8:	09 f4       	brne	.+2      	; 0x5ecc <__vector_26+0xac>
    5eca:	57 c0       	rjmp	.+174    	; 0x5f7a <__vector_26+0x15a>
    5ecc:	80 34       	cpi	r24, 0x40	; 64
    5ece:	09 f4       	brne	.+2      	; 0x5ed2 <__vector_26+0xb2>
    5ed0:	42 c0       	rjmp	.+132    	; 0x5f56 <__vector_26+0x136>
    5ed2:	72 c0       	rjmp	.+228    	; 0x5fb8 <__vector_26+0x198>
    5ed4:	80 35       	cpi	r24, 0x50	; 80
    5ed6:	79 f1       	breq	.+94     	; 0x5f36 <__vector_26+0x116>
    5ed8:	88 35       	cpi	r24, 0x58	; 88
    5eda:	b9 f0       	breq	.+46     	; 0x5f0a <__vector_26+0xea>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5edc:	6d c0       	rjmp	.+218    	; 0x5fb8 <__vector_26+0x198>
    5ede:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <i2c+0x7>
			TWDR = i2c.address;
    5ee2:	80 91 52 1a 	lds	r24, 0x1A52	; 0x801a52 <i2c>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5ee6:	0e c0       	rjmp	.+28     	; 0x5f04 <__vector_26+0xe4>
    5ee8:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    5eec:	89 17       	cp	r24, r25
			{
				TWDR = i2c.buf[i2c.ind++];
    5eee:	ec f4       	brge	.+58     	; 0x5f2a <__vector_26+0x10a>
    5ef0:	91 e0       	ldi	r25, 0x01	; 1
    5ef2:	98 0f       	add	r25, r24
    5ef4:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <i2c+0x7>
    5ef8:	f9 01       	movw	r30, r18
    5efa:	e8 0f       	add	r30, r24
    5efc:	f1 1d       	adc	r31, r1
    5efe:	87 fd       	sbrc	r24, 7
    5f00:	fa 95       	dec	r31
    5f02:	80 81       	ld	r24, Z
    5f04:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5f08:	36 c0       	rjmp	.+108    	; 0x5f76 <__vector_26+0x156>
    5f0a:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    5f0e:	89 17       	cp	r24, r25
				i2c.buf[i2c.ind++] = TWDR;
    5f10:	64 f4       	brge	.+24     	; 0x5f2a <__vector_26+0x10a>
    5f12:	91 e0       	ldi	r25, 0x01	; 1
    5f14:	98 0f       	add	r25, r24
    5f16:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <i2c+0x7>
    5f1a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5f1e:	f9 01       	movw	r30, r18
    5f20:	e8 0f       	add	r30, r24
    5f22:	f1 1d       	adc	r31, r1
    5f24:	87 fd       	sbrc	r24, 7
    5f26:	fa 95       	dec	r31
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5f28:	90 83       	st	Z, r25
    5f2a:	81 e0       	ldi	r24, 0x01	; 1
    5f2c:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
				i2c.enable = 0;
    5f30:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5f34:	4b c0       	rjmp	.+150    	; 0x5fcc <__vector_26+0x1ac>
    5f36:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    5f3a:	89 17       	cp	r24, r25
				i2c.buf[i2c.ind++] = TWDR;
    5f3c:	64 f4       	brge	.+24     	; 0x5f56 <__vector_26+0x136>
    5f3e:	91 e0       	ldi	r25, 0x01	; 1
    5f40:	98 0f       	add	r25, r24
    5f42:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <i2c+0x7>
    5f46:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5f4a:	f9 01       	movw	r30, r18
    5f4c:	e8 0f       	add	r30, r24
    5f4e:	f1 1d       	adc	r31, r1
    5f50:	87 fd       	sbrc	r24, 7
    5f52:	fa 95       	dec	r31
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5f54:	90 83       	st	Z, r25
    5f56:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    5f5a:	08 2e       	mov	r0, r24
    5f5c:	00 0c       	add	r0, r0
    5f5e:	99 0b       	sbc	r25, r25
    5f60:	01 96       	adiw	r24, 0x01	; 1
    5f62:	20 91 58 1a 	lds	r18, 0x1A58	; 0x801a58 <i2c+0x6>
    5f66:	02 2e       	mov	r0, r18
    5f68:	00 0c       	add	r0, r0
    5f6a:	33 0b       	sbc	r19, r19
    5f6c:	82 17       	cp	r24, r18
    5f6e:	93 07       	cpc	r25, r19
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5f70:	14 f4       	brge	.+4      	; 0x5f76 <__vector_26+0x156>
    5f72:	85 ec       	ldi	r24, 0xC5	; 197
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5f74:	03 c0       	rjmp	.+6      	; 0x5f7c <__vector_26+0x15c>
    5f76:	85 e8       	ldi	r24, 0x85	; 133
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5f78:	01 c0       	rjmp	.+2      	; 0x5f7c <__vector_26+0x15c>
    5f7a:	85 ea       	ldi	r24, 0xA5	; 165
    5f7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5f80:	26 c0       	rjmp	.+76     	; 0x5fce <__vector_26+0x1ae>
    5f82:	81 e0       	ldi	r24, 0x01	; 1
    5f84:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    5f88:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5f8c:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5f90:	88 60       	ori	r24, 0x08	; 8
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5f92:	1a c0       	rjmp	.+52     	; 0x5fc8 <__vector_26+0x1a8>
    5f94:	81 e0       	ldi	r24, 0x01	; 1
    5f96:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    5f9a:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5f9e:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5fa2:	80 61       	ori	r24, 0x10	; 16
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5fa4:	11 c0       	rjmp	.+34     	; 0x5fc8 <__vector_26+0x1a8>
    5fa6:	81 e0       	ldi	r24, 0x01	; 1
    5fa8:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    5fac:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5fb0:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5fb4:	80 62       	ori	r24, 0x20	; 32
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5fb6:	08 c0       	rjmp	.+16     	; 0x5fc8 <__vector_26+0x1a8>
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    5fbe:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5fc2:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5fc6:	80 64       	ori	r24, 0x40	; 64
			i2c_next();
    5fc8:	80 93 55 1a 	sts	0x1A55, r24	; 0x801a55 <i2c+0x3>
			break;
	}
}
    5fcc:	1f df       	rcall	.-450    	; 0x5e0c <i2c_next>
    5fce:	ff 91       	pop	r31
    5fd0:	ef 91       	pop	r30
    5fd2:	bf 91       	pop	r27
    5fd4:	af 91       	pop	r26
    5fd6:	9f 91       	pop	r25
    5fd8:	8f 91       	pop	r24
    5fda:	7f 91       	pop	r23
    5fdc:	6f 91       	pop	r22
    5fde:	5f 91       	pop	r21
    5fe0:	4f 91       	pop	r20
    5fe2:	3f 91       	pop	r19
    5fe4:	2f 91       	pop	r18
    5fe6:	0f 90       	pop	r0
    5fe8:	0b be       	out	0x3b, r0	; 59
    5fea:	0f 90       	pop	r0
    5fec:	0f be       	out	0x3f, r0	; 63
    5fee:	0f 90       	pop	r0
    5ff0:	1f 90       	pop	r1
    5ff2:	18 95       	reti

00005ff4 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5ff4:	cf 93       	push	r28
    5ff6:	00 d0       	rcall	.+0      	; 0x5ff8 <i2c_print_error+0x4>
    5ff8:	00 d0       	rcall	.+0      	; 0x5ffa <i2c_print_error+0x6>
    5ffa:	1f 92       	push	r1
    int flags = o->flags;
    5ffc:	fc 01       	movw	r30, r24
    5ffe:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    6000:	cc 23       	and	r28, r28
    6002:	09 f4       	brne	.+2      	; 0x6006 <i2c_print_error+0x12>
    6004:	67 c0       	rjmp	.+206    	; 0x60d4 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    6006:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <i2c+0x2>
    600a:	81 11       	cpse	r24, r1
    600c:	03 c0       	rjmp	.+6      	; 0x6014 <i2c_print_error+0x20>
    600e:	83 e2       	ldi	r24, 0x23	; 35
    6010:	93 e0       	ldi	r25, 0x03	; 3
    6012:	02 c0       	rjmp	.+4      	; 0x6018 <i2c_print_error+0x24>
    6014:	8e e1       	ldi	r24, 0x1E	; 30
    6016:	93 e0       	ldi	r25, 0x03	; 3
    6018:	ed b7       	in	r30, 0x3d	; 61
    601a:	fe b7       	in	r31, 0x3e	; 62
    601c:	95 83       	std	Z+5, r25	; 0x05
    601e:	84 83       	std	Z+4, r24	; 0x04
    6020:	87 ed       	ldi	r24, 0xD7	; 215
    6022:	94 e0       	ldi	r25, 0x04	; 4
    6024:	a0 e0       	ldi	r26, 0x00	; 0
    6026:	81 83       	std	Z+1, r24	; 0x01
    6028:	92 83       	std	Z+2, r25	; 0x02
    602a:	a3 83       	std	Z+3, r26	; 0x03
    602c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    6030:	c0 ff       	sbrs	r28, 0
    6032:	0a c0       	rjmp	.+20     	; 0x6048 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    6034:	89 ec       	ldi	r24, 0xC9	; 201
    6036:	94 e0       	ldi	r25, 0x04	; 4
    6038:	a0 e0       	ldi	r26, 0x00	; 0
    603a:	ed b7       	in	r30, 0x3d	; 61
    603c:	fe b7       	in	r31, 0x3e	; 62
    603e:	81 83       	std	Z+1, r24	; 0x01
    6040:	92 83       	std	Z+2, r25	; 0x02
    6042:	a3 83       	std	Z+3, r26	; 0x03
    6044:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
		if(flags & I2C_OP_LEN)
    6048:	c1 ff       	sbrs	r28, 1
    604a:	0a c0       	rjmp	.+20     	; 0x6060 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    604c:	8f eb       	ldi	r24, 0xBF	; 191
    604e:	94 e0       	ldi	r25, 0x04	; 4
    6050:	a0 e0       	ldi	r26, 0x00	; 0
    6052:	ed b7       	in	r30, 0x3d	; 61
    6054:	fe b7       	in	r31, 0x3e	; 62
    6056:	81 83       	std	Z+1, r24	; 0x01
    6058:	92 83       	std	Z+2, r25	; 0x02
    605a:	a3 83       	std	Z+3, r26	; 0x03
    605c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
		if(flags & I2C_OP_ERROR)
    6060:	c2 ff       	sbrs	r28, 2
    6062:	0a c0       	rjmp	.+20     	; 0x6078 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    6064:	83 eb       	ldi	r24, 0xB3	; 179
    6066:	94 e0       	ldi	r25, 0x04	; 4
    6068:	a0 e0       	ldi	r26, 0x00	; 0
    606a:	ed b7       	in	r30, 0x3d	; 61
    606c:	fe b7       	in	r31, 0x3e	; 62
    606e:	81 83       	std	Z+1, r24	; 0x01
    6070:	92 83       	std	Z+2, r25	; 0x02
    6072:	a3 83       	std	Z+3, r26	; 0x03
    6074:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    6078:	c4 ff       	sbrs	r28, 4
    607a:	0a c0       	rjmp	.+20     	; 0x6090 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    607c:	81 ea       	ldi	r24, 0xA1	; 161
    607e:	94 e0       	ldi	r25, 0x04	; 4
    6080:	a0 e0       	ldi	r26, 0x00	; 0
    6082:	ed b7       	in	r30, 0x3d	; 61
    6084:	fe b7       	in	r31, 0x3e	; 62
    6086:	81 83       	std	Z+1, r24	; 0x01
    6088:	92 83       	std	Z+2, r25	; 0x02
    608a:	a3 83       	std	Z+3, r26	; 0x03
    608c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    6090:	c3 ff       	sbrs	r28, 3
    6092:	0a c0       	rjmp	.+20     	; 0x60a8 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    6094:	8f e8       	ldi	r24, 0x8F	; 143
    6096:	94 e0       	ldi	r25, 0x04	; 4
    6098:	a0 e0       	ldi	r26, 0x00	; 0
    609a:	ed b7       	in	r30, 0x3d	; 61
    609c:	fe b7       	in	r31, 0x3e	; 62
    609e:	81 83       	std	Z+1, r24	; 0x01
    60a0:	92 83       	std	Z+2, r25	; 0x02
    60a2:	a3 83       	std	Z+3, r26	; 0x03
    60a4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    60a8:	c5 ff       	sbrs	r28, 5
    60aa:	0a c0       	rjmp	.+20     	; 0x60c0 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    60ac:	8c e7       	ldi	r24, 0x7C	; 124
    60ae:	94 e0       	ldi	r25, 0x04	; 4
    60b0:	a0 e0       	ldi	r26, 0x00	; 0
    60b2:	ed b7       	in	r30, 0x3d	; 61
    60b4:	fe b7       	in	r31, 0x3e	; 62
    60b6:	81 83       	std	Z+1, r24	; 0x01
    60b8:	92 83       	std	Z+2, r25	; 0x02
    60ba:	a3 83       	std	Z+3, r26	; 0x03
    60bc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
		printf("\n");
    60c0:	8a e7       	ldi	r24, 0x7A	; 122
    60c2:	94 e0       	ldi	r25, 0x04	; 4
    60c4:	a0 e0       	ldi	r26, 0x00	; 0
    60c6:	ed b7       	in	r30, 0x3d	; 61
    60c8:	fe b7       	in	r31, 0x3e	; 62
    60ca:	81 83       	std	Z+1, r24	; 0x01
    60cc:	92 83       	std	Z+2, r25	; 0x02
    60ce:	a3 83       	std	Z+3, r26	; 0x03
    60d0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
	}
}
    60d4:	0f 90       	pop	r0
    60d6:	0f 90       	pop	r0
    60d8:	0f 90       	pop	r0
    60da:	0f 90       	pop	r0
    60dc:	0f 90       	pop	r0
    60de:	cf 91       	pop	r28
    60e0:	08 95       	ret

000060e2 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    60e2:	6f 92       	push	r6
    60e4:	7f 92       	push	r7
    60e6:	8f 92       	push	r8
    60e8:	af 92       	push	r10
    60ea:	bf 92       	push	r11
    60ec:	cf 92       	push	r12
    60ee:	df 92       	push	r13
    60f0:	ef 92       	push	r14
    60f2:	0f 93       	push	r16
    60f4:	1f 93       	push	r17
    60f6:	cf 93       	push	r28
    60f8:	df 93       	push	r29
    60fa:	00 d0       	rcall	.+0      	; 0x60fc <i2c_display_task_errors+0x1a>
    60fc:	00 d0       	rcall	.+0      	; 0x60fe <i2c_display_task_errors+0x1c>
    60fe:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    6100:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <i2c_task+0x2>
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	ed b7       	in	r30, 0x3d	; 61
    6108:	fe b7       	in	r31, 0x3e	; 62
    610a:	95 83       	std	Z+5, r25	; 0x05
    610c:	84 83       	std	Z+4, r24	; 0x04
    610e:	87 e6       	ldi	r24, 0x67	; 103
    6110:	94 e0       	ldi	r25, 0x04	; 4
    6112:	a0 e0       	ldi	r26, 0x00	; 0
    6114:	81 83       	std	Z+1, r24	; 0x01
    6116:	92 83       	std	Z+2, r25	; 0x02
    6118:	a3 83       	std	Z+3, r26	; 0x03
    611a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    611e:	80 91 87 17 	lds	r24, 0x1787	; 0x801787 <i2c_task+0x3>
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	ed b7       	in	r30, 0x3d	; 61
    6126:	fe b7       	in	r31, 0x3e	; 62
    6128:	95 83       	std	Z+5, r25	; 0x05
    612a:	84 83       	std	Z+4, r24	; 0x04
    612c:	83 e5       	ldi	r24, 0x53	; 83
    612e:	94 e0       	ldi	r25, 0x04	; 4
    6130:	a0 e0       	ldi	r26, 0x00	; 0
    6132:	81 83       	std	Z+1, r24	; 0x01
    6134:	92 83       	std	Z+2, r25	; 0x02
    6136:	a3 83       	std	Z+3, r26	; 0x03
    6138:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    613c:	c4 e6       	ldi	r28, 0x64	; 100
    613e:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    6140:	00 e0       	ldi	r16, 0x00	; 0
    6142:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    6144:	89 e4       	ldi	r24, 0x49	; 73
    6146:	94 e0       	ldi	r25, 0x04	; 4
    6148:	6c 01       	movw	r12, r24
    614a:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    614c:	87 e4       	ldi	r24, 0x47	; 71
    614e:	94 e0       	ldi	r25, 0x04	; 4
    6150:	3c 01       	movw	r6, r24
    6152:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    6154:	30 2f       	mov	r19, r16
    6156:	21 2f       	mov	r18, r17
    6158:	5e 01       	movw	r10, r28
    615a:	0f 5f       	subi	r16, 0xFF	; 255
    615c:	1f 4f       	sbci	r17, 0xFF	; 255
    615e:	88 81       	ld	r24, Y
    6160:	99 81       	ldd	r25, Y+1	; 0x01
    6162:	89 2b       	or	r24, r25
    6164:	b1 f0       	breq	.+44     	; 0x6192 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    6166:	ed b7       	in	r30, 0x3d	; 61
    6168:	fe b7       	in	r31, 0x3e	; 62
    616a:	34 83       	std	Z+4, r19	; 0x04
    616c:	25 83       	std	Z+5, r18	; 0x05
    616e:	c1 82       	std	Z+1, r12	; 0x01
    6170:	d2 82       	std	Z+2, r13	; 0x02
    6172:	e3 82       	std	Z+3, r14	; 0x03
    6174:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    6178:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    617a:	f5 01       	movw	r30, r10
    617c:	80 81       	ld	r24, Z
    617e:	91 81       	ldd	r25, Z+1	; 0x01
    6180:	39 df       	rcall	.-398    	; 0x5ff4 <i2c_print_error>
		printf("\n");
    6182:	ed b7       	in	r30, 0x3d	; 61
    6184:	fe b7       	in	r31, 0x3e	; 62
    6186:	61 82       	std	Z+1, r6	; 0x01
    6188:	72 82       	std	Z+2, r7	; 0x02
    618a:	83 82       	std	Z+3, r8	; 0x03
    618c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    6190:	e1 cf       	rjmp	.-62     	; 0x6154 <i2c_display_task_errors+0x72>
	}
}
    6192:	0f 90       	pop	r0
    6194:	0f 90       	pop	r0
    6196:	0f 90       	pop	r0
    6198:	0f 90       	pop	r0
    619a:	0f 90       	pop	r0
    619c:	df 91       	pop	r29
    619e:	cf 91       	pop	r28
    61a0:	1f 91       	pop	r17
    61a2:	0f 91       	pop	r16
    61a4:	ef 90       	pop	r14
    61a6:	df 90       	pop	r13
    61a8:	cf 90       	pop	r12
    61aa:	bf 90       	pop	r11
    61ac:	af 90       	pop	r10
    61ae:	8f 90       	pop	r8
    61b0:	7f 90       	pop	r7
    61b2:	6f 90       	pop	r6
    61b4:	08 95       	ret

000061b6 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    61b6:	6a e0       	ldi	r22, 0x0A	; 10
    61b8:	0e 94 49 e3 	call	0x1c692	; 0x1c692 <__udivmodqi4>
    61bc:	82 95       	swap	r24
    61be:	80 7f       	andi	r24, 0xF0	; 240
    61c0:	89 2b       	or	r24, r25
    61c2:	08 95       	ret

000061c4 <BCDtoBIN>:
    61c4:	98 2f       	mov	r25, r24
    61c6:	92 95       	swap	r25
    61c8:	9f 70       	andi	r25, 0x0F	; 15
    61ca:	8f 70       	andi	r24, 0x0F	; 15
    61cc:	2a e0       	ldi	r18, 0x0A	; 10
    61ce:	92 9f       	mul	r25, r18
    61d0:	80 0d       	add	r24, r0
    61d2:	11 24       	eor	r1, r1
    61d4:	08 95       	ret

000061d6 <i2c_rtc_write>:
    61d6:	ac e0       	ldi	r26, 0x0C	; 12
    61d8:	b0 e0       	ldi	r27, 0x00	; 0
    61da:	e1 ef       	ldi	r30, 0xF1	; 241
    61dc:	f0 e3       	ldi	r31, 0x30	; 48
    61de:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    61e2:	9f ef       	ldi	r25, 0xFF	; 255
    61e4:	92 0f       	add	r25, r18
    61e6:	98 30       	cpi	r25, 0x08	; 8
    61e8:	50 f5       	brcc	.+84     	; 0x623e <i2c_rtc_write+0x68>
    61ea:	6c 83       	std	Y+4, r22	; 0x04
    61ec:	90 e0       	ldi	r25, 0x00	; 0
    61ee:	02 2f       	mov	r16, r18
    61f0:	10 e0       	ldi	r17, 0x00	; 0
    61f2:	69 2f       	mov	r22, r25
    61f4:	09 2e       	mov	r0, r25
    61f6:	00 0c       	add	r0, r0
    61f8:	77 0b       	sbc	r23, r23
    61fa:	60 17       	cp	r22, r16
    61fc:	71 07       	cpc	r23, r17
    61fe:	6c f4       	brge	.+26     	; 0x621a <i2c_rtc_write+0x44>
    6200:	a5 e0       	ldi	r26, 0x05	; 5
    6202:	b0 e0       	ldi	r27, 0x00	; 0
    6204:	ac 0f       	add	r26, r28
    6206:	bd 1f       	adc	r27, r29
    6208:	a6 0f       	add	r26, r22
    620a:	b7 1f       	adc	r27, r23
    620c:	64 0f       	add	r22, r20
    620e:	75 1f       	adc	r23, r21
    6210:	fb 01       	movw	r30, r22
    6212:	30 81       	ld	r19, Z
    6214:	3c 93       	st	X, r19
    6216:	9f 5f       	subi	r25, 0xFF	; 255
    6218:	ec cf       	rjmp	.-40     	; 0x61f2 <i2c_rtc_write+0x1c>
    621a:	2f 5f       	subi	r18, 0xFF	; 255
    621c:	ae 01       	movw	r20, r28
    621e:	4c 5f       	subi	r20, 0xFC	; 252
    6220:	5f 4f       	sbci	r21, 0xFF	; 255
    6222:	60 e0       	ldi	r22, 0x00	; 0
    6224:	5a dd       	rcall	.-1356   	; 0x5cda <i2c_fn>
    6226:	81 11       	cpse	r24, r1
    6228:	0c c0       	rjmp	.+24     	; 0x6242 <i2c_rtc_write+0x6c>
    622a:	84 ef       	ldi	r24, 0xF4	; 244
    622c:	95 e0       	ldi	r25, 0x05	; 5
    622e:	a0 e0       	ldi	r26, 0x00	; 0
    6230:	ed b7       	in	r30, 0x3d	; 61
    6232:	fe b7       	in	r31, 0x3e	; 62
    6234:	81 83       	std	Z+1, r24	; 0x01
    6236:	92 83       	std	Z+2, r25	; 0x02
    6238:	a3 83       	std	Z+3, r26	; 0x03
    623a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    623e:	80 e0       	ldi	r24, 0x00	; 0
    6240:	01 c0       	rjmp	.+2      	; 0x6244 <i2c_rtc_write+0x6e>
    6242:	81 e0       	ldi	r24, 0x01	; 1
    6244:	2c 96       	adiw	r28, 0x0c	; 12
    6246:	e4 e0       	ldi	r30, 0x04	; 4
    6248:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

0000624c <i2c_rtc_read>:
    624c:	a4 e0       	ldi	r26, 0x04	; 4
    624e:	b0 e0       	ldi	r27, 0x00	; 0
    6250:	ec e2       	ldi	r30, 0x2C	; 44
    6252:	f1 e3       	ldi	r31, 0x31	; 49
    6254:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
    6258:	6c 83       	std	Y+4, r22	; 0x04
    625a:	9f ef       	ldi	r25, 0xFF	; 255
    625c:	92 0f       	add	r25, r18
    625e:	98 30       	cpi	r25, 0x08	; 8
    6260:	f8 f4       	brcc	.+62     	; 0x62a0 <i2c_rtc_read+0x54>
    6262:	02 2f       	mov	r16, r18
    6264:	7a 01       	movw	r14, r20
    6266:	18 2f       	mov	r17, r24
    6268:	21 e0       	ldi	r18, 0x01	; 1
    626a:	ae 01       	movw	r20, r28
    626c:	4c 5f       	subi	r20, 0xFC	; 252
    626e:	5f 4f       	sbci	r21, 0xFF	; 255
    6270:	60 e0       	ldi	r22, 0x00	; 0
    6272:	33 dd       	rcall	.-1434   	; 0x5cda <i2c_fn>
    6274:	81 11       	cpse	r24, r1
    6276:	03 c0       	rjmp	.+6      	; 0x627e <i2c_rtc_read+0x32>
    6278:	88 ed       	ldi	r24, 0xD8	; 216
    627a:	95 e0       	ldi	r25, 0x05	; 5
    627c:	09 c0       	rjmp	.+18     	; 0x6290 <i2c_rtc_read+0x44>
    627e:	20 2f       	mov	r18, r16
    6280:	a7 01       	movw	r20, r14
    6282:	61 e0       	ldi	r22, 0x01	; 1
    6284:	81 2f       	mov	r24, r17
    6286:	29 dd       	rcall	.-1454   	; 0x5cda <i2c_fn>
    6288:	81 11       	cpse	r24, r1
    628a:	0c c0       	rjmp	.+24     	; 0x62a4 <i2c_rtc_read+0x58>
    628c:	8f eb       	ldi	r24, 0xBF	; 191
    628e:	95 e0       	ldi	r25, 0x05	; 5
    6290:	a0 e0       	ldi	r26, 0x00	; 0
    6292:	ed b7       	in	r30, 0x3d	; 61
    6294:	fe b7       	in	r31, 0x3e	; 62
    6296:	81 83       	std	Z+1, r24	; 0x01
    6298:	92 83       	std	Z+2, r25	; 0x02
    629a:	a3 83       	std	Z+3, r26	; 0x03
    629c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    62a0:	80 e0       	ldi	r24, 0x00	; 0
    62a2:	01 c0       	rjmp	.+2      	; 0x62a6 <i2c_rtc_read+0x5a>
    62a4:	81 e0       	ldi	r24, 0x01	; 1
    62a6:	24 96       	adiw	r28, 0x04	; 4
    62a8:	e6 e0       	ldi	r30, 0x06	; 6
    62aa:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

000062ae <i2c_rtc_init>:
    62ae:	60 ea       	ldi	r22, 0xA0	; 160
    62b0:	76 e8       	ldi	r23, 0x86	; 134
    62b2:	81 e0       	ldi	r24, 0x01	; 1
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	18 cc       	rjmp	.-2000   	; 0x5ae8 <i2c_init>
    62b8:	08 95       	ret

000062ba <rtc_write>:
    62ba:	ab e0       	ldi	r26, 0x0B	; 11
    62bc:	b0 e0       	ldi	r27, 0x00	; 0
    62be:	e3 e6       	ldi	r30, 0x63	; 99
    62c0:	f1 e3       	ldi	r31, 0x31	; 49
    62c2:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    62c6:	8c 01       	movw	r16, r24
    62c8:	fc 01       	movw	r30, r24
    62ca:	80 81       	ld	r24, Z
    62cc:	74 df       	rcall	.-280    	; 0x61b6 <BINtoBCD>
    62ce:	8f 77       	andi	r24, 0x7F	; 127
    62d0:	8c 83       	std	Y+4, r24	; 0x04
    62d2:	f8 01       	movw	r30, r16
    62d4:	82 81       	ldd	r24, Z+2	; 0x02
    62d6:	6f df       	rcall	.-290    	; 0x61b6 <BINtoBCD>
    62d8:	8f 77       	andi	r24, 0x7F	; 127
    62da:	8d 83       	std	Y+5, r24	; 0x05
    62dc:	f8 01       	movw	r30, r16
    62de:	84 81       	ldd	r24, Z+4	; 0x04
    62e0:	6a df       	rcall	.-300    	; 0x61b6 <BINtoBCD>
    62e2:	8f 73       	andi	r24, 0x3F	; 63
    62e4:	8e 83       	std	Y+6, r24	; 0x06
    62e6:	f8 01       	movw	r30, r16
    62e8:	84 85       	ldd	r24, Z+12	; 0x0c
    62ea:	87 70       	andi	r24, 0x07	; 7
    62ec:	8f 5f       	subi	r24, 0xFF	; 255
    62ee:	8f 83       	std	Y+7, r24	; 0x07
    62f0:	86 81       	ldd	r24, Z+6	; 0x06
    62f2:	61 df       	rcall	.-318    	; 0x61b6 <BINtoBCD>
    62f4:	8f 73       	andi	r24, 0x3F	; 63
    62f6:	88 87       	std	Y+8, r24	; 0x08
    62f8:	f8 01       	movw	r30, r16
    62fa:	80 85       	ldd	r24, Z+8	; 0x08
    62fc:	8f 5f       	subi	r24, 0xFF	; 255
    62fe:	5b df       	rcall	.-330    	; 0x61b6 <BINtoBCD>
    6300:	8f 71       	andi	r24, 0x1F	; 31
    6302:	89 87       	std	Y+9, r24	; 0x09
    6304:	f8 01       	movw	r30, r16
    6306:	82 85       	ldd	r24, Z+10	; 0x0a
    6308:	84 56       	subi	r24, 0x64	; 100
    630a:	55 df       	rcall	.-342    	; 0x61b6 <BINtoBCD>
    630c:	8a 87       	std	Y+10, r24	; 0x0a
    630e:	83 e9       	ldi	r24, 0x93	; 147
    6310:	8b 87       	std	Y+11, r24	; 0x0b
    6312:	28 e0       	ldi	r18, 0x08	; 8
    6314:	ae 01       	movw	r20, r28
    6316:	4c 5f       	subi	r20, 0xFC	; 252
    6318:	5f 4f       	sbci	r21, 0xFF	; 255
    631a:	60 e0       	ldi	r22, 0x00	; 0
    631c:	88 e6       	ldi	r24, 0x68	; 104
    631e:	5b df       	rcall	.-330    	; 0x61d6 <i2c_rtc_write>
    6320:	81 11       	cpse	r24, r1
    6322:	0c c0       	rjmp	.+24     	; 0x633c <rtc_write+0x82>
    6324:	8e ea       	ldi	r24, 0xAE	; 174
    6326:	95 e0       	ldi	r25, 0x05	; 5
    6328:	a0 e0       	ldi	r26, 0x00	; 0
    632a:	ed b7       	in	r30, 0x3d	; 61
    632c:	fe b7       	in	r31, 0x3e	; 62
    632e:	81 83       	std	Z+1, r24	; 0x01
    6330:	92 83       	std	Z+2, r25	; 0x02
    6332:	a3 83       	std	Z+3, r26	; 0x03
    6334:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    6338:	80 e0       	ldi	r24, 0x00	; 0
    633a:	01 c0       	rjmp	.+2      	; 0x633e <rtc_write+0x84>
    633c:	81 e0       	ldi	r24, 0x01	; 1
    633e:	2b 96       	adiw	r28, 0x0b	; 11
    6340:	e4 e0       	ldi	r30, 0x04	; 4
    6342:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00006346 <rtc_read>:
    6346:	ab e0       	ldi	r26, 0x0B	; 11
    6348:	b0 e0       	ldi	r27, 0x00	; 0
    634a:	e9 ea       	ldi	r30, 0xA9	; 169
    634c:	f1 e3       	ldi	r31, 0x31	; 49
    634e:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    6352:	8c 01       	movw	r16, r24
    6354:	28 e0       	ldi	r18, 0x08	; 8
    6356:	ae 01       	movw	r20, r28
    6358:	4c 5f       	subi	r20, 0xFC	; 252
    635a:	5f 4f       	sbci	r21, 0xFF	; 255
    635c:	60 e0       	ldi	r22, 0x00	; 0
    635e:	88 e6       	ldi	r24, 0x68	; 104
    6360:	75 df       	rcall	.-278    	; 0x624c <i2c_rtc_read>
    6362:	81 11       	cpse	r24, r1
    6364:	0c c0       	rjmp	.+24     	; 0x637e <rtc_read+0x38>
    6366:	8e e9       	ldi	r24, 0x9E	; 158
    6368:	95 e0       	ldi	r25, 0x05	; 5
    636a:	a0 e0       	ldi	r26, 0x00	; 0
    636c:	ed b7       	in	r30, 0x3d	; 61
    636e:	fe b7       	in	r31, 0x3e	; 62
    6370:	81 83       	std	Z+1, r24	; 0x01
    6372:	92 83       	std	Z+2, r25	; 0x02
    6374:	a3 83       	std	Z+3, r26	; 0x03
    6376:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    637a:	80 e0       	ldi	r24, 0x00	; 0
    637c:	33 c0       	rjmp	.+102    	; 0x63e4 <rtc_read+0x9e>
    637e:	8c 81       	ldd	r24, Y+4	; 0x04
    6380:	8f 77       	andi	r24, 0x7F	; 127
    6382:	20 df       	rcall	.-448    	; 0x61c4 <BCDtoBIN>
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	f8 01       	movw	r30, r16
    6388:	91 83       	std	Z+1, r25	; 0x01
    638a:	80 83       	st	Z, r24
    638c:	8d 81       	ldd	r24, Y+5	; 0x05
    638e:	8f 77       	andi	r24, 0x7F	; 127
    6390:	19 df       	rcall	.-462    	; 0x61c4 <BCDtoBIN>
    6392:	90 e0       	ldi	r25, 0x00	; 0
    6394:	f8 01       	movw	r30, r16
    6396:	93 83       	std	Z+3, r25	; 0x03
    6398:	82 83       	std	Z+2, r24	; 0x02
    639a:	8e 81       	ldd	r24, Y+6	; 0x06
    639c:	8f 73       	andi	r24, 0x3F	; 63
    639e:	12 df       	rcall	.-476    	; 0x61c4 <BCDtoBIN>
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	f8 01       	movw	r30, r16
    63a4:	95 83       	std	Z+5, r25	; 0x05
    63a6:	84 83       	std	Z+4, r24	; 0x04
    63a8:	8f 81       	ldd	r24, Y+7	; 0x07
    63aa:	87 70       	andi	r24, 0x07	; 7
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	01 97       	sbiw	r24, 0x01	; 1
    63b0:	95 87       	std	Z+13, r25	; 0x0d
    63b2:	84 87       	std	Z+12, r24	; 0x0c
    63b4:	88 85       	ldd	r24, Y+8	; 0x08
    63b6:	8f 73       	andi	r24, 0x3F	; 63
    63b8:	05 df       	rcall	.-502    	; 0x61c4 <BCDtoBIN>
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	f8 01       	movw	r30, r16
    63be:	97 83       	std	Z+7, r25	; 0x07
    63c0:	86 83       	std	Z+6, r24	; 0x06
    63c2:	89 85       	ldd	r24, Y+9	; 0x09
    63c4:	8f 71       	andi	r24, 0x1F	; 31
    63c6:	fe de       	rcall	.-516    	; 0x61c4 <BCDtoBIN>
    63c8:	90 e0       	ldi	r25, 0x00	; 0
    63ca:	01 97       	sbiw	r24, 0x01	; 1
    63cc:	f8 01       	movw	r30, r16
    63ce:	91 87       	std	Z+9, r25	; 0x09
    63d0:	80 87       	std	Z+8, r24	; 0x08
    63d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    63d4:	f7 de       	rcall	.-530    	; 0x61c4 <BCDtoBIN>
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	8c 59       	subi	r24, 0x9C	; 156
    63da:	9f 4f       	sbci	r25, 0xFF	; 255
    63dc:	f8 01       	movw	r30, r16
    63de:	93 87       	std	Z+11, r25	; 0x0b
    63e0:	82 87       	std	Z+10, r24	; 0x0a
    63e2:	81 e0       	ldi	r24, 0x01	; 1
    63e4:	2b 96       	adiw	r28, 0x0b	; 11
    63e6:	e4 e0       	ldi	r30, 0x04	; 4
    63e8:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

000063ec <rtc_run>:
    63ec:	a4 e0       	ldi	r26, 0x04	; 4
    63ee:	b0 e0       	ldi	r27, 0x00	; 0
    63f0:	ec ef       	ldi	r30, 0xFC	; 252
    63f2:	f1 e3       	ldi	r31, 0x31	; 49
    63f4:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    63f8:	8c 01       	movw	r16, r24
    63fa:	21 e0       	ldi	r18, 0x01	; 1
    63fc:	ae 01       	movw	r20, r28
    63fe:	4c 5f       	subi	r20, 0xFC	; 252
    6400:	5f 4f       	sbci	r21, 0xFF	; 255
    6402:	60 e0       	ldi	r22, 0x00	; 0
    6404:	88 e6       	ldi	r24, 0x68	; 104
    6406:	22 df       	rcall	.-444    	; 0x624c <i2c_rtc_read>
    6408:	81 11       	cpse	r24, r1
    640a:	03 c0       	rjmp	.+6      	; 0x6412 <rtc_run+0x26>
    640c:	8a e8       	ldi	r24, 0x8A	; 138
    640e:	95 e0       	ldi	r25, 0x05	; 5
    6410:	24 c0       	rjmp	.+72     	; 0x645a <rtc_run+0x6e>
    6412:	8c 81       	ldd	r24, Y+4	; 0x04
    6414:	0f 3f       	cpi	r16, 0xFF	; 255
    6416:	ff ef       	ldi	r31, 0xFF	; 255
    6418:	1f 07       	cpc	r17, r31
    641a:	59 f4       	brne	.+22     	; 0x6432 <rtc_run+0x46>
    641c:	08 2e       	mov	r0, r24
    641e:	00 0c       	add	r0, r0
    6420:	99 0b       	sbc	r25, r25
    6422:	80 95       	com	r24
    6424:	90 95       	com	r25
    6426:	89 2f       	mov	r24, r25
    6428:	88 1f       	adc	r24, r24
    642a:	88 27       	eor	r24, r24
    642c:	88 1f       	adc	r24, r24
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	20 c0       	rjmp	.+64     	; 0x6472 <rtc_run+0x86>
    6432:	8f 77       	andi	r24, 0x7F	; 127
    6434:	01 15       	cp	r16, r1
    6436:	11 05       	cpc	r17, r1
    6438:	11 f4       	brne	.+4      	; 0x643e <rtc_run+0x52>
    643a:	90 e8       	ldi	r25, 0x80	; 128
    643c:	01 c0       	rjmp	.+2      	; 0x6440 <rtc_run+0x54>
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	89 2b       	or	r24, r25
    6442:	8c 83       	std	Y+4, r24	; 0x04
    6444:	21 e0       	ldi	r18, 0x01	; 1
    6446:	ae 01       	movw	r20, r28
    6448:	4c 5f       	subi	r20, 0xFC	; 252
    644a:	5f 4f       	sbci	r21, 0xFF	; 255
    644c:	60 e0       	ldi	r22, 0x00	; 0
    644e:	88 e6       	ldi	r24, 0x68	; 104
    6450:	c2 de       	rcall	.-636    	; 0x61d6 <i2c_rtc_write>
    6452:	81 11       	cpse	r24, r1
    6454:	0d c0       	rjmp	.+26     	; 0x6470 <rtc_run+0x84>
    6456:	85 e7       	ldi	r24, 0x75	; 117
    6458:	95 e0       	ldi	r25, 0x05	; 5
    645a:	a0 e0       	ldi	r26, 0x00	; 0
    645c:	ed b7       	in	r30, 0x3d	; 61
    645e:	fe b7       	in	r31, 0x3e	; 62
    6460:	81 83       	std	Z+1, r24	; 0x01
    6462:	92 83       	std	Z+2, r25	; 0x02
    6464:	a3 83       	std	Z+3, r26	; 0x03
    6466:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    646a:	8f ef       	ldi	r24, 0xFF	; 255
    646c:	9f ef       	ldi	r25, 0xFF	; 255
    646e:	01 c0       	rjmp	.+2      	; 0x6472 <rtc_run+0x86>
    6470:	c8 01       	movw	r24, r16
    6472:	24 96       	adiw	r28, 0x04	; 4
    6474:	e4 e0       	ldi	r30, 0x04	; 4
    6476:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

0000647a <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    647a:	a7 e0       	ldi	r26, 0x07	; 7
    647c:	b0 e0       	ldi	r27, 0x00	; 0
    647e:	e3 e4       	ldi	r30, 0x43	; 67
    6480:	f2 e3       	ldi	r31, 0x32	; 50
    6482:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    6486:	8c 01       	movw	r16, r24
    6488:	4c 83       	std	Y+4, r20	; 0x04
    648a:	5d 83       	std	Y+5, r21	; 0x05
    648c:	6e 83       	std	Y+6, r22	; 0x06
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    648e:	7f 83       	std	Y+7, r23	; 0x07

    if(!force)
    6490:	0e df       	rcall	.-484    	; 0x62ae <i2c_rtc_init>
    6492:	01 15       	cp	r16, r1
    6494:	11 05       	cpc	r17, r1
    {
        state = rtc_run(-1);
    6496:	39 f4       	brne	.+14     	; 0x64a6 <rtc_init+0x2c>
    6498:	8f ef       	ldi	r24, 0xFF	; 255
    649a:	9f ef       	ldi	r25, 0xFF	; 255
        if(state < 0)
    649c:	a7 df       	rcall	.-178    	; 0x63ec <rtc_run>
    649e:	87 fd       	sbrc	r24, 7
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    64a0:	16 c0       	rjmp	.+44     	; 0x64ce <rtc_init+0x54>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    64a2:	81 11       	cpse	r24, r1
    64a4:	22 c0       	rjmp	.+68     	; 0x64ea <rtc_init+0x70>
    64a6:	80 e0       	ldi	r24, 0x00	; 0
    64a8:	90 e0       	ldi	r25, 0x00	; 0
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    64aa:	a0 df       	rcall	.-192    	; 0x63ec <rtc_run>
    64ac:	97 fd       	sbrc	r25, 7
    64ae:	0f c0       	rjmp	.+30     	; 0x64ce <rtc_init+0x54>
    64b0:	ce 01       	movw	r24, r28

        if(tmp == NULL || !rtc_write(tmp))
    64b2:	04 96       	adiw	r24, 0x04	; 4
    64b4:	a3 d6       	rcall	.+3398   	; 0x71fc <gmtime>
        {
            printf("rtc_init  write epoch failed\n");
    64b6:	00 97       	sbiw	r24, 0x00	; 0
    64b8:	81 f4       	brne	.+32     	; 0x64da <rtc_init+0x60>
    64ba:	87 e5       	ldi	r24, 0x57	; 87
    64bc:	95 e0       	ldi	r25, 0x05	; 5
    64be:	a0 e0       	ldi	r26, 0x00	; 0
    64c0:	ed b7       	in	r30, 0x3d	; 61
    64c2:	fe b7       	in	r31, 0x3e	; 62
    64c4:	81 83       	std	Z+1, r24	; 0x01
    64c6:	92 83       	std	Z+2, r25	; 0x02
    64c8:	a3 83       	std	Z+3, r26	; 0x03
            rtc_ok = 0;
    64ca:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    64ce:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <rtc_ok+0x1>
            return 0;
    64d2:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <rtc_ok>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    64d6:	80 e0       	ldi	r24, 0x00	; 0
    64d8:	0e c0       	rjmp	.+28     	; 0x64f6 <rtc_init+0x7c>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    64da:	ef de       	rcall	.-546    	; 0x62ba <rtc_write>
    64dc:	88 23       	and	r24, r24
    64de:	69 f3       	breq	.-38     	; 0x64ba <rtc_init+0x40>
    64e0:	81 e0       	ldi	r24, 0x01	; 1
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	83 df       	rcall	.-250    	; 0x63ec <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    64e6:	97 fd       	sbrc	r25, 7
    64e8:	f2 cf       	rjmp	.-28     	; 0x64ce <rtc_init+0x54>
    64ea:	81 e0       	ldi	r24, 0x01	; 1
    64ec:	90 e0       	ldi	r25, 0x00	; 0
    64ee:	90 93 fa 19 	sts	0x19FA, r25	; 0x8019fa <rtc_ok+0x1>
    return 1;
}
    64f2:	80 93 f9 19 	sts	0x19F9, r24	; 0x8019f9 <rtc_ok>
    64f6:	27 96       	adiw	r28, 0x07	; 7
    64f8:	e4 e0       	ldi	r30, 0x04	; 4
    64fa:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

000064fe <islower>:
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    64fe:	9c 01       	movw	r18, r24
    6500:	21 56       	subi	r18, 0x61	; 97
    6502:	31 09       	sbc	r19, r1
    6504:	81 e0       	ldi	r24, 0x01	; 1
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	2a 31       	cpi	r18, 0x1A	; 26
    650a:	31 05       	cpc	r19, r1
    650c:	10 f0       	brcs	.+4      	; 0x6512 <islower+0x14>
    650e:	80 e0       	ldi	r24, 0x00	; 0
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	08 95       	ret

00006514 <toupper>:
    6514:	cf 93       	push	r28
    6516:	df 93       	push	r29
    6518:	ec 01       	movw	r28, r24
    651a:	f1 df       	rcall	.-30     	; 0x64fe <islower>
    651c:	89 2b       	or	r24, r25
    651e:	19 f0       	breq	.+6      	; 0x6526 <toupper+0x12>
    6520:	ce 01       	movw	r24, r28
    6522:	80 97       	sbiw	r24, 0x20	; 32
    6524:	01 c0       	rjmp	.+2      	; 0x6528 <toupper+0x14>
    6526:	ce 01       	movw	r24, r28
    6528:	df 91       	pop	r29
    652a:	cf 91       	pop	r28
    652c:	08 95       	ret

0000652e <strcpy>:
    652e:	fc 01       	movw	r30, r24
    6530:	db 01       	movw	r26, r22
    6532:	2d 91       	ld	r18, X+
    6534:	bd 01       	movw	r22, r26
    6536:	01 96       	adiw	r24, 0x01	; 1
    6538:	22 23       	and	r18, r18
    653a:	11 f0       	breq	.+4      	; 0x6540 <strcpy+0x12>
    653c:	20 83       	st	Z, r18
    653e:	f7 cf       	rjmp	.-18     	; 0x652e <strcpy>
    6540:	10 82       	st	Z, r1
    6542:	08 95       	ret

00006544 <strncpy>:
    6544:	db 01       	movw	r26, r22
    6546:	fc 01       	movw	r30, r24
    6548:	2d 91       	ld	r18, X+
    654a:	21 11       	cpse	r18, r1
    654c:	03 c0       	rjmp	.+6      	; 0x6554 <strncpy+0x10>
    654e:	4e 0f       	add	r20, r30
    6550:	5f 1f       	adc	r21, r31
    6552:	08 c0       	rjmp	.+16     	; 0x6564 <strncpy+0x20>
    6554:	41 15       	cp	r20, r1
    6556:	51 05       	cpc	r21, r1
    6558:	21 f0       	breq	.+8      	; 0x6562 <strncpy+0x1e>
    655a:	21 93       	st	Z+, r18
    655c:	41 50       	subi	r20, 0x01	; 1
    655e:	51 09       	sbc	r21, r1
    6560:	f3 cf       	rjmp	.-26     	; 0x6548 <strncpy+0x4>
    6562:	08 95       	ret
    6564:	4e 17       	cp	r20, r30
    6566:	5f 07       	cpc	r21, r31
    6568:	11 f0       	breq	.+4      	; 0x656e <strncpy+0x2a>
    656a:	11 92       	st	Z+, r1
    656c:	fb cf       	rjmp	.-10     	; 0x6564 <strncpy+0x20>
    656e:	08 95       	ret

00006570 <strcat>:
    6570:	cf 93       	push	r28
    6572:	df 93       	push	r29
    6574:	d8 2f       	mov	r29, r24
    6576:	c9 2f       	mov	r28, r25
    6578:	28 2f       	mov	r18, r24
    657a:	39 2f       	mov	r19, r25
    657c:	c9 01       	movw	r24, r18
    657e:	2f 5f       	subi	r18, 0xFF	; 255
    6580:	3f 4f       	sbci	r19, 0xFF	; 255
    6582:	fc 01       	movw	r30, r24
    6584:	40 81       	ld	r20, Z
    6586:	41 11       	cpse	r20, r1
    6588:	f9 cf       	rjmp	.-14     	; 0x657c <strcat+0xc>
    658a:	d1 df       	rcall	.-94     	; 0x652e <strcpy>
    658c:	8d 2f       	mov	r24, r29
    658e:	9c 2f       	mov	r25, r28
    6590:	df 91       	pop	r29
    6592:	cf 91       	pop	r28
    6594:	08 95       	ret

00006596 <reverse>:
    6596:	fc 01       	movw	r30, r24
    6598:	01 90       	ld	r0, Z+
    659a:	00 20       	and	r0, r0
    659c:	e9 f7       	brne	.-6      	; 0x6598 <reverse+0x2>
    659e:	31 97       	sbiw	r30, 0x01	; 1
    65a0:	e8 1b       	sub	r30, r24
    65a2:	f9 0b       	sbc	r31, r25
    65a4:	af 01       	movw	r20, r30
    65a6:	55 95       	asr	r21
    65a8:	47 95       	ror	r20
    65aa:	e8 0f       	add	r30, r24
    65ac:	f9 1f       	adc	r31, r25
    65ae:	dc 01       	movw	r26, r24
    65b0:	9d 01       	movw	r18, r26
    65b2:	28 1b       	sub	r18, r24
    65b4:	39 0b       	sbc	r19, r25
    65b6:	24 17       	cp	r18, r20
    65b8:	35 07       	cpc	r19, r21
    65ba:	2c f4       	brge	.+10     	; 0x65c6 <reverse+0x30>
    65bc:	22 91       	ld	r18, -Z
    65be:	3c 91       	ld	r19, X
    65c0:	30 83       	st	Z, r19
    65c2:	2d 93       	st	X+, r18
    65c4:	f5 cf       	rjmp	.-22     	; 0x65b0 <reverse+0x1a>
    65c6:	08 95       	ret

000065c8 <strupper>:
    65c8:	cf 93       	push	r28
    65ca:	df 93       	push	r29
    65cc:	ec 01       	movw	r28, r24
    65ce:	88 81       	ld	r24, Y
    65d0:	88 23       	and	r24, r24
    65d2:	21 f0       	breq	.+8      	; 0x65dc <strupper+0x14>
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	9e df       	rcall	.-196    	; 0x6514 <toupper>
    65d8:	89 93       	st	Y+, r24
    65da:	f9 cf       	rjmp	.-14     	; 0x65ce <strupper+0x6>
    65dc:	df 91       	pop	r29
    65de:	cf 91       	pop	r28
    65e0:	08 95       	ret

000065e2 <strcmp>:
    65e2:	dc 01       	movw	r26, r24
    65e4:	fb 01       	movw	r30, r22
    65e6:	2d 91       	ld	r18, X+
    65e8:	41 91       	ld	r20, Z+
    65ea:	50 e0       	ldi	r21, 0x00	; 0
    65ec:	30 e0       	ldi	r19, 0x00	; 0
    65ee:	c9 01       	movw	r24, r18
    65f0:	84 1b       	sub	r24, r20
    65f2:	95 0b       	sbc	r25, r21
    65f4:	11 f4       	brne	.+4      	; 0x65fa <strcmp+0x18>
    65f6:	45 2b       	or	r20, r21
    65f8:	b1 f7       	brne	.-20     	; 0x65e6 <strcmp+0x4>
    65fa:	08 95       	ret

000065fc <strcasecmp>:
    65fc:	ef 92       	push	r14
    65fe:	ff 92       	push	r15
    6600:	0f 93       	push	r16
    6602:	1f 93       	push	r17
    6604:	cf 93       	push	r28
    6606:	df 93       	push	r29
    6608:	7c 01       	movw	r14, r24
    660a:	8b 01       	movw	r16, r22
    660c:	f7 01       	movw	r30, r14
    660e:	81 91       	ld	r24, Z+
    6610:	7f 01       	movw	r14, r30
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	7f df       	rcall	.-258    	; 0x6514 <toupper>
    6616:	ec 01       	movw	r28, r24
    6618:	f8 01       	movw	r30, r16
    661a:	81 91       	ld	r24, Z+
    661c:	8f 01       	movw	r16, r30
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	79 df       	rcall	.-270    	; 0x6514 <toupper>
    6622:	9c 01       	movw	r18, r24
    6624:	ce 01       	movw	r24, r28
    6626:	82 1b       	sub	r24, r18
    6628:	93 0b       	sbc	r25, r19
    662a:	11 f4       	brne	.+4      	; 0x6630 <strcasecmp+0x34>
    662c:	23 2b       	or	r18, r19
    662e:	71 f7       	brne	.-36     	; 0x660c <strcasecmp+0x10>
    6630:	cd b7       	in	r28, 0x3d	; 61
    6632:	de b7       	in	r29, 0x3e	; 62
    6634:	e6 e0       	ldi	r30, 0x06	; 6
    6636:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

0000663a <strncasecmp>:
    663a:	a0 e0       	ldi	r26, 0x00	; 0
    663c:	b0 e0       	ldi	r27, 0x00	; 0
    663e:	e3 e2       	ldi	r30, 0x23	; 35
    6640:	f3 e3       	ldi	r31, 0x33	; 51
    6642:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    6646:	8c 01       	movw	r16, r24
    6648:	7b 01       	movw	r14, r22
    664a:	6c 01       	movw	r12, r24
    664c:	c4 0e       	add	r12, r20
    664e:	d5 1e       	adc	r13, r21
    6650:	0c 15       	cp	r16, r12
    6652:	1d 05       	cpc	r17, r13
    6654:	99 f0       	breq	.+38     	; 0x667c <strncasecmp+0x42>
    6656:	f8 01       	movw	r30, r16
    6658:	81 91       	ld	r24, Z+
    665a:	8f 01       	movw	r16, r30
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	5a df       	rcall	.-332    	; 0x6514 <toupper>
    6660:	ec 01       	movw	r28, r24
    6662:	f7 01       	movw	r30, r14
    6664:	81 91       	ld	r24, Z+
    6666:	7f 01       	movw	r14, r30
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	54 df       	rcall	.-344    	; 0x6514 <toupper>
    666c:	9c 01       	movw	r18, r24
    666e:	ce 01       	movw	r24, r28
    6670:	82 1b       	sub	r24, r18
    6672:	93 0b       	sbc	r25, r19
    6674:	29 f4       	brne	.+10     	; 0x6680 <strncasecmp+0x46>
    6676:	23 2b       	or	r18, r19
    6678:	59 f7       	brne	.-42     	; 0x6650 <strncasecmp+0x16>
    667a:	02 c0       	rjmp	.+4      	; 0x6680 <strncasecmp+0x46>
    667c:	80 e0       	ldi	r24, 0x00	; 0
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	cd b7       	in	r28, 0x3d	; 61
    6682:	de b7       	in	r29, 0x3e	; 62
    6684:	e8 e0       	ldi	r30, 0x08	; 8
    6686:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000668a <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    668a:	0f 93       	push	r16
    668c:	1f 93       	push	r17
    668e:	cf 93       	push	r28
    6690:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    6692:	00 97       	sbiw	r24, 0x00	; 0
    6694:	99 f0       	breq	.+38     	; 0x66bc <stralloc+0x32>
    6696:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6698:	fc 01       	movw	r30, r24
    669a:	01 90       	ld	r0, Z+
    669c:	00 20       	and	r0, r0
    669e:	e9 f7       	brne	.-6      	; 0x669a <stralloc+0x10>
    66a0:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    66a2:	61 e0       	ldi	r22, 0x01	; 1
    66a4:	70 e0       	ldi	r23, 0x00	; 0
    66a6:	8c 1b       	sub	r24, r28
    66a8:	9d 0b       	sbc	r25, r29
    66aa:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
    66ae:	8c 01       	movw	r16, r24
    if(!ptr)
    66b0:	00 97       	sbiw	r24, 0x00	; 0
    66b2:	21 f0       	breq	.+8      	; 0x66bc <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    66b4:	be 01       	movw	r22, r28
    66b6:	3b df       	rcall	.-394    	; 0x652e <strcpy>
    return(ptr);
    66b8:	c8 01       	movw	r24, r16
    66ba:	02 c0       	rjmp	.+4      	; 0x66c0 <stralloc+0x36>
    66bc:	80 e0       	ldi	r24, 0x00	; 0
    66be:	90 e0       	ldi	r25, 0x00	; 0
}
    66c0:	df 91       	pop	r29
    66c2:	cf 91       	pop	r28
    66c4:	1f 91       	pop	r17
    66c6:	0f 91       	pop	r16
    66c8:	08 95       	ret

000066ca <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    66ca:	00 d0       	rcall	.+0      	; 0x66cc <sep+0x2>
    66cc:	1f 92       	push	r1
    66ce:	84 e3       	ldi	r24, 0x34	; 52
    66d0:	96 e0       	ldi	r25, 0x06	; 6
    66d2:	a0 e0       	ldi	r26, 0x00	; 0
    66d4:	ed b7       	in	r30, 0x3d	; 61
    66d6:	fe b7       	in	r31, 0x3e	; 62
    66d8:	81 83       	std	Z+1, r24	; 0x01
    66da:	92 83       	std	Z+2, r25	; 0x02
    66dc:	a3 83       	std	Z+3, r26	; 0x03
    66de:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    66e2:	0f 90       	pop	r0
    66e4:	0f 90       	pop	r0
    66e6:	0f 90       	pop	r0
    66e8:	08 95       	ret

000066ea <trim_tail>:
    66ea:	00 97       	sbiw	r24, 0x00	; 0
    66ec:	69 f0       	breq	.+26     	; 0x6708 <trim_tail+0x1e>
    66ee:	fc 01       	movw	r30, r24
    66f0:	01 90       	ld	r0, Z+
    66f2:	00 20       	and	r0, r0
    66f4:	e9 f7       	brne	.-6      	; 0x66f0 <trim_tail+0x6>
    66f6:	31 97       	sbiw	r30, 0x01	; 1
    66f8:	e8 17       	cp	r30, r24
    66fa:	f9 07       	cpc	r31, r25
    66fc:	29 f0       	breq	.+10     	; 0x6708 <trim_tail+0x1e>
    66fe:	22 91       	ld	r18, -Z
    6700:	21 32       	cpi	r18, 0x21	; 33
    6702:	10 f4       	brcc	.+4      	; 0x6708 <trim_tail+0x1e>
    6704:	10 82       	st	Z, r1
    6706:	f8 cf       	rjmp	.-16     	; 0x66f8 <trim_tail+0xe>
    6708:	08 95       	ret

0000670a <skipspaces>:
    670a:	00 97       	sbiw	r24, 0x00	; 0
    670c:	39 f0       	breq	.+14     	; 0x671c <skipspaces+0x12>
    670e:	fc 01       	movw	r30, r24
    6710:	cf 01       	movw	r24, r30
    6712:	21 91       	ld	r18, Z+
    6714:	20 32       	cpi	r18, 0x20	; 32
    6716:	e1 f3       	breq	.-8      	; 0x6710 <skipspaces+0x6>
    6718:	29 30       	cpi	r18, 0x09	; 9
    671a:	d1 f3       	breq	.-12     	; 0x6710 <skipspaces+0x6>
    671c:	08 95       	ret

0000671e <MATCH>:
    671e:	cf 93       	push	r28
    6720:	df 93       	push	r29
    6722:	fb 01       	movw	r30, r22
    6724:	01 90       	ld	r0, Z+
    6726:	00 20       	and	r0, r0
    6728:	e9 f7       	brne	.-6      	; 0x6724 <MATCH+0x6>
    672a:	31 97       	sbiw	r30, 0x01	; 1
    672c:	ef 01       	movw	r28, r30
    672e:	c6 1b       	sub	r28, r22
    6730:	d7 0b       	sbc	r29, r23
    6732:	57 df       	rcall	.-338    	; 0x65e2 <strcmp>
    6734:	89 2b       	or	r24, r25
    6736:	11 f4       	brne	.+4      	; 0x673c <MATCH+0x1e>
    6738:	ce 01       	movw	r24, r28
    673a:	02 c0       	rjmp	.+4      	; 0x6740 <MATCH+0x22>
    673c:	80 e0       	ldi	r24, 0x00	; 0
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	df 91       	pop	r29
    6742:	cf 91       	pop	r28
    6744:	08 95       	ret

00006746 <MATCHI>:
    6746:	cf 93       	push	r28
    6748:	df 93       	push	r29
    674a:	fb 01       	movw	r30, r22
    674c:	01 90       	ld	r0, Z+
    674e:	00 20       	and	r0, r0
    6750:	e9 f7       	brne	.-6      	; 0x674c <MATCHI+0x6>
    6752:	31 97       	sbiw	r30, 0x01	; 1
    6754:	ef 01       	movw	r28, r30
    6756:	c6 1b       	sub	r28, r22
    6758:	d7 0b       	sbc	r29, r23
    675a:	50 df       	rcall	.-352    	; 0x65fc <strcasecmp>
    675c:	89 2b       	or	r24, r25
    675e:	11 f4       	brne	.+4      	; 0x6764 <MATCHI+0x1e>
    6760:	ce 01       	movw	r24, r28
    6762:	02 c0       	rjmp	.+4      	; 0x6768 <MATCHI+0x22>
    6764:	80 e0       	ldi	r24, 0x00	; 0
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	df 91       	pop	r29
    676a:	cf 91       	pop	r28
    676c:	08 95       	ret

0000676e <MATCHARGS>:
    676e:	a9 e0       	ldi	r26, 0x09	; 9
    6770:	b0 e0       	ldi	r27, 0x00	; 0
    6772:	ed eb       	ldi	r30, 0xBD	; 189
    6774:	f3 e3       	ldi	r31, 0x33	; 51
    6776:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
    677a:	eb 01       	movw	r28, r22
    677c:	8a 01       	movw	r16, r20
    677e:	79 01       	movw	r14, r18
    6780:	e2 df       	rcall	.-60     	; 0x6746 <MATCHI>
    6782:	00 97       	sbiw	r24, 0x00	; 0
    6784:	c1 f0       	breq	.+48     	; 0x67b6 <MATCHARGS+0x48>
    6786:	e0 16       	cp	r14, r16
    6788:	f1 06       	cpc	r15, r17
    678a:	9c f4       	brge	.+38     	; 0x67b2 <MATCHARGS+0x44>
    678c:	ed b7       	in	r30, 0x3d	; 61
    678e:	fe b7       	in	r31, 0x3e	; 62
    6790:	f1 86       	std	Z+9, r15	; 0x09
    6792:	e0 86       	std	Z+8, r14	; 0x08
    6794:	17 83       	std	Z+7, r17	; 0x07
    6796:	06 83       	std	Z+6, r16	; 0x06
    6798:	d5 83       	std	Z+5, r29	; 0x05
    679a:	c4 83       	std	Z+4, r28	; 0x04
    679c:	8e e0       	ldi	r24, 0x0E	; 14
    679e:	96 e0       	ldi	r25, 0x06	; 6
    67a0:	a0 e0       	ldi	r26, 0x00	; 0
    67a2:	81 83       	std	Z+1, r24	; 0x01
    67a4:	92 83       	std	Z+2, r25	; 0x02
    67a6:	a3 83       	std	Z+3, r26	; 0x03
    67a8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    67ac:	80 e0       	ldi	r24, 0x00	; 0
    67ae:	90 e0       	ldi	r25, 0x00	; 0
    67b0:	02 c0       	rjmp	.+4      	; 0x67b6 <MATCHARGS+0x48>
    67b2:	81 e0       	ldi	r24, 0x01	; 1
    67b4:	90 e0       	ldi	r25, 0x00	; 0
    67b6:	cd b7       	in	r28, 0x3d	; 61
    67b8:	de b7       	in	r29, 0x3e	; 62
    67ba:	29 96       	adiw	r28, 0x09	; 9
    67bc:	e6 e0       	ldi	r30, 0x06	; 6
    67be:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

000067c2 <MATCHI_LEN>:
    67c2:	cf 93       	push	r28
    67c4:	df 93       	push	r29
    67c6:	00 97       	sbiw	r24, 0x00	; 0
    67c8:	89 f0       	breq	.+34     	; 0x67ec <MATCHI_LEN+0x2a>
    67ca:	61 15       	cp	r22, r1
    67cc:	71 05       	cpc	r23, r1
    67ce:	71 f0       	breq	.+28     	; 0x67ec <MATCHI_LEN+0x2a>
    67d0:	eb 01       	movw	r28, r22
    67d2:	09 90       	ld	r0, Y+
    67d4:	00 20       	and	r0, r0
    67d6:	e9 f7       	brne	.-6      	; 0x67d2 <MATCHI_LEN+0x10>
    67d8:	21 97       	sbiw	r28, 0x01	; 1
    67da:	c6 1b       	sub	r28, r22
    67dc:	d7 0b       	sbc	r29, r23
    67de:	31 f0       	breq	.+12     	; 0x67ec <MATCHI_LEN+0x2a>
    67e0:	ae 01       	movw	r20, r28
    67e2:	2b df       	rcall	.-426    	; 0x663a <strncasecmp>
    67e4:	89 2b       	or	r24, r25
    67e6:	11 f4       	brne	.+4      	; 0x67ec <MATCHI_LEN+0x2a>
    67e8:	ce 01       	movw	r24, r28
    67ea:	02 c0       	rjmp	.+4      	; 0x67f0 <MATCHI_LEN+0x2e>
    67ec:	80 e0       	ldi	r24, 0x00	; 0
    67ee:	90 e0       	ldi	r25, 0x00	; 0
    67f0:	df 91       	pop	r29
    67f2:	cf 91       	pop	r28
    67f4:	08 95       	ret

000067f6 <split_args>:
    67f6:	a0 e0       	ldi	r26, 0x00	; 0
    67f8:	b0 e0       	ldi	r27, 0x00	; 0
    67fa:	e1 e0       	ldi	r30, 0x01	; 1
    67fc:	f4 e3       	ldi	r31, 0x34	; 52
    67fe:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    6802:	dc 01       	movw	r26, r24
    6804:	6a 01       	movw	r12, r20
    6806:	8b 01       	movw	r16, r22
    6808:	fb 01       	movw	r30, r22
    680a:	80 e0       	ldi	r24, 0x00	; 0
    680c:	90 e0       	ldi	r25, 0x00	; 0
    680e:	8c 15       	cp	r24, r12
    6810:	9d 05       	cpc	r25, r13
    6812:	24 f4       	brge	.+8      	; 0x681c <split_args+0x26>
    6814:	11 92       	st	Z+, r1
    6816:	11 92       	st	Z+, r1
    6818:	01 96       	adiw	r24, 0x01	; 1
    681a:	f9 cf       	rjmp	.-14     	; 0x680e <split_args+0x18>
    681c:	c1 14       	cp	r12, r1
    681e:	d1 04       	cpc	r13, r1
    6820:	d9 f1       	breq	.+118    	; 0x6898 <split_args+0xa2>
    6822:	10 97       	sbiw	r26, 0x00	; 0
    6824:	c9 f1       	breq	.+114    	; 0x6898 <split_args+0xa2>
    6826:	ee 24       	eor	r14, r14
    6828:	e3 94       	inc	r14
    682a:	f1 2c       	mov	r15, r1
    682c:	c0 e0       	ldi	r28, 0x00	; 0
    682e:	d0 e0       	ldi	r29, 0x00	; 0
    6830:	8c 91       	ld	r24, X
    6832:	88 23       	and	r24, r24
    6834:	b1 f1       	breq	.+108    	; 0x68a2 <split_args+0xac>
    6836:	cc 15       	cp	r28, r12
    6838:	dd 05       	cpc	r29, r13
    683a:	9c f5       	brge	.+102    	; 0x68a2 <split_args+0xac>
    683c:	cd 01       	movw	r24, r26
    683e:	65 df       	rcall	.-310    	; 0x670a <skipspaces>
    6840:	dc 01       	movw	r26, r24
    6842:	2c 91       	ld	r18, X
    6844:	22 23       	and	r18, r18
    6846:	69 f1       	breq	.+90     	; 0x68a2 <split_args+0xac>
    6848:	22 32       	cpi	r18, 0x22	; 34
    684a:	79 f4       	brne	.+30     	; 0x686a <split_args+0x74>
    684c:	fc 01       	movw	r30, r24
    684e:	31 96       	adiw	r30, 0x01	; 1
    6850:	d8 01       	movw	r26, r16
    6852:	ed 93       	st	X+, r30
    6854:	fc 93       	st	X, r31
    6856:	df 01       	movw	r26, r30
    6858:	80 81       	ld	r24, Z
    685a:	31 96       	adiw	r30, 0x01	; 1
    685c:	88 23       	and	r24, r24
    685e:	a9 f0       	breq	.+42     	; 0x688a <split_args+0x94>
    6860:	82 32       	cpi	r24, 0x22	; 34
    6862:	c9 f7       	brne	.-14     	; 0x6856 <split_args+0x60>
    6864:	1c 92       	st	X, r1
    6866:	df 01       	movw	r26, r30
    6868:	10 c0       	rjmp	.+32     	; 0x688a <split_args+0x94>
    686a:	f8 01       	movw	r30, r16
    686c:	91 83       	std	Z+1, r25	; 0x01
    686e:	80 83       	st	Z, r24
    6870:	fc 01       	movw	r30, r24
    6872:	2e 2f       	mov	r18, r30
    6874:	9f 2f       	mov	r25, r31
    6876:	81 91       	ld	r24, Z+
    6878:	3f ed       	ldi	r19, 0xDF	; 223
    687a:	38 0f       	add	r19, r24
    687c:	3e 35       	cpi	r19, 0x5E	; 94
    687e:	c8 f3       	brcs	.-14     	; 0x6872 <split_args+0x7c>
    6880:	88 23       	and	r24, r24
    6882:	69 f0       	breq	.+26     	; 0x689e <split_args+0xa8>
    6884:	a2 2f       	mov	r26, r18
    6886:	b9 2f       	mov	r27, r25
    6888:	1d 92       	st	X+, r1
    688a:	21 96       	adiw	r28, 0x01	; 1
    688c:	ff ef       	ldi	r31, 0xFF	; 255
    688e:	ef 1a       	sub	r14, r31
    6890:	ff 0a       	sbc	r15, r31
    6892:	0e 5f       	subi	r16, 0xFE	; 254
    6894:	1f 4f       	sbci	r17, 0xFF	; 255
    6896:	cc cf       	rjmp	.-104    	; 0x6830 <split_args+0x3a>
    6898:	80 e0       	ldi	r24, 0x00	; 0
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	03 c0       	rjmp	.+6      	; 0x68a4 <split_args+0xae>
    689e:	c7 01       	movw	r24, r14
    68a0:	01 c0       	rjmp	.+2      	; 0x68a4 <split_args+0xae>
    68a2:	ce 01       	movw	r24, r28
    68a4:	cd b7       	in	r28, 0x3d	; 61
    68a6:	de b7       	in	r29, 0x3e	; 62
    68a8:	e8 e0       	ldi	r30, 0x08	; 8
    68aa:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

000068ae <get_token>:
    68ae:	ef 92       	push	r14
    68b0:	ff 92       	push	r15
    68b2:	0f 93       	push	r16
    68b4:	1f 93       	push	r17
    68b6:	cf 93       	push	r28
    68b8:	df 93       	push	r29
    68ba:	eb 01       	movw	r28, r22
    68bc:	8a 01       	movw	r16, r20
    68be:	18 82       	st	Y, r1
    68c0:	00 97       	sbiw	r24, 0x00	; 0
    68c2:	89 f1       	breq	.+98     	; 0x6926 <get_token+0x78>
    68c4:	fc 01       	movw	r30, r24
    68c6:	20 81       	ld	r18, Z
    68c8:	22 23       	and	r18, r18
    68ca:	79 f1       	breq	.+94     	; 0x692a <get_token+0x7c>
    68cc:	1e df       	rcall	.-452    	; 0x670a <skipspaces>
    68ce:	7c 01       	movw	r14, r24
    68d0:	0c df       	rcall	.-488    	; 0x66ea <trim_tail>
    68d2:	f7 01       	movw	r30, r14
    68d4:	cf 01       	movw	r24, r30
    68d6:	21 91       	ld	r18, Z+
    68d8:	21 32       	cpi	r18, 0x21	; 33
    68da:	e0 f0       	brcs	.+56     	; 0x6914 <get_token+0x66>
    68dc:	10 16       	cp	r1, r16
    68de:	11 06       	cpc	r1, r17
    68e0:	cc f4       	brge	.+50     	; 0x6914 <get_token+0x66>
    68e2:	22 32       	cpi	r18, 0x22	; 34
    68e4:	79 f4       	brne	.+30     	; 0x6904 <get_token+0x56>
    68e6:	fc 01       	movw	r30, r24
    68e8:	31 96       	adiw	r30, 0x01	; 1
    68ea:	0c 0f       	add	r16, r28
    68ec:	1d 1f       	adc	r17, r29
    68ee:	cf 01       	movw	r24, r30
    68f0:	21 91       	ld	r18, Z+
    68f2:	22 23       	and	r18, r18
    68f4:	79 f0       	breq	.+30     	; 0x6914 <get_token+0x66>
    68f6:	22 32       	cpi	r18, 0x22	; 34
    68f8:	59 f0       	breq	.+22     	; 0x6910 <get_token+0x62>
    68fa:	c0 17       	cp	r28, r16
    68fc:	d1 07       	cpc	r29, r17
    68fe:	51 f0       	breq	.+20     	; 0x6914 <get_token+0x66>
    6900:	29 93       	st	Y+, r18
    6902:	f5 cf       	rjmp	.-22     	; 0x68ee <get_token+0x40>
    6904:	2c 32       	cpi	r18, 0x2C	; 44
    6906:	31 f0       	breq	.+12     	; 0x6914 <get_token+0x66>
    6908:	29 93       	st	Y+, r18
    690a:	01 50       	subi	r16, 0x01	; 1
    690c:	11 09       	sbc	r17, r1
    690e:	e2 cf       	rjmp	.-60     	; 0x68d4 <get_token+0x26>
    6910:	cf 01       	movw	r24, r30
    6912:	18 82       	st	Y, r1
    6914:	fa de       	rcall	.-524    	; 0x670a <skipspaces>
    6916:	fc 01       	movw	r30, r24
    6918:	80 81       	ld	r24, Z
    691a:	8c 32       	cpi	r24, 0x2C	; 44
    691c:	09 f4       	brne	.+2      	; 0x6920 <get_token+0x72>
    691e:	31 96       	adiw	r30, 0x01	; 1
    6920:	18 82       	st	Y, r1
    6922:	cf 01       	movw	r24, r30
    6924:	02 c0       	rjmp	.+4      	; 0x692a <get_token+0x7c>
    6926:	80 e0       	ldi	r24, 0x00	; 0
    6928:	90 e0       	ldi	r25, 0x00	; 0
    692a:	cd b7       	in	r28, 0x3d	; 61
    692c:	de b7       	in	r29, 0x3e	; 62
    692e:	e6 e0       	ldi	r30, 0x06	; 6
    6930:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00006934 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    6934:	a2 e0       	ldi	r26, 0x02	; 2
    6936:	b0 e0       	ldi	r27, 0x00	; 0
    6938:	e0 ea       	ldi	r30, 0xA0	; 160
    693a:	f4 e3       	ldi	r31, 0x34	; 52
    693c:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    6940:	00 97       	sbiw	r24, 0x00	; 0
    6942:	79 f1       	breq	.+94     	; 0x69a2 <get_value+0x6e>
    6944:	fc 01       	movw	r30, r24
    6946:	20 81       	ld	r18, Z
    6948:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    694a:	59 f1       	breq	.+86     	; 0x69a2 <get_value+0x6e>
    694c:	de de       	rcall	.-580    	; 0x670a <skipspaces>
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    694e:	8c 01       	movw	r16, r24
    6950:	6a e2       	ldi	r22, 0x2A	; 42
    6952:	73 e0       	ldi	r23, 0x03	; 3
    6954:	36 df       	rcall	.-404    	; 0x67c2 <MATCHI_LEN>
    6956:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    6958:	29 f0       	breq	.+10     	; 0x6964 <get_value+0x30>
    695a:	08 0f       	add	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    695c:	19 1f       	adc	r17, r25
    695e:	40 e1       	ldi	r20, 0x10	; 16
    6960:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6962:	18 c0       	rjmp	.+48     	; 0x6994 <get_value+0x60>
    6964:	6d e2       	ldi	r22, 0x2D	; 45
    6966:	73 e0       	ldi	r23, 0x03	; 3
    6968:	c8 01       	movw	r24, r16
    696a:	2b df       	rcall	.-426    	; 0x67c2 <MATCHI_LEN>
    696c:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    696e:	29 f0       	breq	.+10     	; 0x697a <get_value+0x46>
    6970:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6972:	19 1f       	adc	r17, r25
    6974:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6976:	50 e0       	ldi	r21, 0x00	; 0
    6978:	0d c0       	rjmp	.+26     	; 0x6994 <get_value+0x60>
    697a:	60 e3       	ldi	r22, 0x30	; 48
    697c:	73 e0       	ldi	r23, 0x03	; 3
    697e:	c8 01       	movw	r24, r16
    6980:	20 df       	rcall	.-448    	; 0x67c2 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    6982:	00 97       	sbiw	r24, 0x00	; 0
    6984:	29 f0       	breq	.+10     	; 0x6990 <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6986:	08 0f       	add	r16, r24
    6988:	19 1f       	adc	r17, r25
    698a:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    698c:	50 e0       	ldi	r21, 0x00	; 0
    698e:	02 c0       	rjmp	.+4      	; 0x6994 <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6990:	4a e0       	ldi	r20, 0x0A	; 10
    6992:	50 e0       	ldi	r21, 0x00	; 0
    6994:	be 01       	movw	r22, r28
    6996:	6f 5f       	subi	r22, 0xFF	; 255
    6998:	7f 4f       	sbci	r23, 0xFF	; 255
    699a:	c8 01       	movw	r24, r16
    699c:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    69a0:	03 c0       	rjmp	.+6      	; 0x69a8 <get_value+0x74>
    69a2:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    69a4:	70 e0       	ldi	r23, 0x00	; 0
    69a6:	cb 01       	movw	r24, r22
    69a8:	22 96       	adiw	r28, 0x02	; 2
    69aa:	e4 e0       	ldi	r30, 0x04	; 4
    69ac:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

000069b0 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    69b0:	78 94       	sei
    69b2:	08 95       	ret

000069b4 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    69b4:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    69b6:	89 e0       	ldi	r24, 0x09	; 9
    69b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    69bc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    69c0:	8f e1       	ldi	r24, 0x1F	; 31
    69c2:	9e e4       	ldi	r25, 0x4E	; 78
    69c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    69c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    69cc:	ef e6       	ldi	r30, 0x6F	; 111
    69ce:	f0 e0       	ldi	r31, 0x00	; 0
    69d0:	80 81       	ld	r24, Z
    69d2:	82 60       	ori	r24, 0x02	; 2
    69d4:	80 83       	st	Z, r24
    sei();
    69d6:	78 94       	sei
    69d8:	08 95       	ret

000069da <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    69da:	1f 92       	push	r1
    69dc:	0f 92       	push	r0
    69de:	0f b6       	in	r0, 0x3f	; 63
    69e0:	0f 92       	push	r0
    69e2:	11 24       	eor	r1, r1
    69e4:	0b b6       	in	r0, 0x3b	; 59
    69e6:	0f 92       	push	r0
    69e8:	2f 93       	push	r18
    69ea:	3f 93       	push	r19
    69ec:	4f 93       	push	r20
    69ee:	5f 93       	push	r21
    69f0:	6f 93       	push	r22
    69f2:	7f 93       	push	r23
    69f4:	8f 93       	push	r24
    69f6:	9f 93       	push	r25
    69f8:	af 93       	push	r26
    69fa:	bf 93       	push	r27
    69fc:	ef 93       	push	r30
    execute_timers();
    69fe:	ff 93       	push	r31
}
    6a00:	36 d2       	rcall	.+1132   	; 0x6e6e <execute_timers>
    6a02:	ff 91       	pop	r31
    6a04:	ef 91       	pop	r30
    6a06:	bf 91       	pop	r27
    6a08:	af 91       	pop	r26
    6a0a:	9f 91       	pop	r25
    6a0c:	8f 91       	pop	r24
    6a0e:	7f 91       	pop	r23
    6a10:	6f 91       	pop	r22
    6a12:	5f 91       	pop	r21
    6a14:	4f 91       	pop	r20
    6a16:	3f 91       	pop	r19
    6a18:	2f 91       	pop	r18
    6a1a:	0f 90       	pop	r0
    6a1c:	0b be       	out	0x3b, r0	; 59
    6a1e:	0f 90       	pop	r0
    6a20:	0f be       	out	0x3f, r0	; 63
    6a22:	0f 90       	pop	r0
    6a24:	1f 90       	pop	r1
    6a26:	18 95       	reti

00006a28 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6a28:	0f 93       	push	r16
    6a2a:	1f 93       	push	r17
    6a2c:	cf 93       	push	r28
    6a2e:	df 93       	push	r29
    6a30:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    6a32:	f8 94       	cli

    count1 = TCNT1;
    6a34:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6a38:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6a3c:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock>
    6a40:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x1>
    6a44:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x2>
    6a48:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x3>
    6a4c:	80 83       	st	Z, r24
    6a4e:	91 83       	std	Z+1, r25	; 0x01
    6a50:	a2 83       	std	Z+2, r26	; 0x02
    6a52:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6a54:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    6a58:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    6a5c:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    6a60:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    6a64:	84 83       	std	Z+4, r24	; 0x04
    6a66:	95 83       	std	Z+5, r25	; 0x05
    6a68:	a6 83       	std	Z+6, r26	; 0x06
    6a6a:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6a6c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6a70:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6a74:	b1 9b       	sbis	0x16, 1	; 22
    6a76:	03 c0       	rjmp	.+6      	; 0x6a7e <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6a78:	c0 e0       	ldi	r28, 0x00	; 0
    6a7a:	d0 e0       	ldi	r29, 0x00	; 0
    6a7c:	3f c0       	rjmp	.+126    	; 0x6afc <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6a7e:	82 17       	cp	r24, r18
    6a80:	93 07       	cpc	r25, r19
    6a82:	d0 f1       	brcs	.+116    	; 0x6af8 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6a84:	c0 e0       	ldi	r28, 0x00	; 0
    6a86:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6a88:	40 e0       	ldi	r20, 0x00	; 0
    6a8a:	50 e0       	ldi	r21, 0x00	; 0
    6a8c:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6a8e:	9a 01       	movw	r18, r20
    6a90:	ab 01       	movw	r20, r22
    6a92:	28 0f       	add	r18, r24
    6a94:	39 1f       	adc	r19, r25
    6a96:	41 1d       	adc	r20, r1
    6a98:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    6a9a:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a9c:	a2 e3       	ldi	r26, 0x32	; 50
    6a9e:	b0 e0       	ldi	r27, 0x00	; 0
    6aa0:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
    6aa4:	04 81       	ldd	r16, Z+4	; 0x04
    6aa6:	15 81       	ldd	r17, Z+5	; 0x05
    6aa8:	26 81       	ldd	r18, Z+6	; 0x06
    6aaa:	37 81       	ldd	r19, Z+7	; 0x07
    6aac:	dc 01       	movw	r26, r24
    6aae:	cb 01       	movw	r24, r22
    6ab0:	80 0f       	add	r24, r16
    6ab2:	91 1f       	adc	r25, r17
    6ab4:	a2 1f       	adc	r26, r18
    6ab6:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6ab8:	81 15       	cp	r24, r1
    6aba:	2a ec       	ldi	r18, 0xCA	; 202
    6abc:	92 07       	cpc	r25, r18
    6abe:	2a e9       	ldi	r18, 0x9A	; 154
    6ac0:	a2 07       	cpc	r26, r18
    6ac2:	2b e3       	ldi	r18, 0x3B	; 59
    6ac4:	b2 07       	cpc	r27, r18
    6ac6:	2c f4       	brge	.+10     	; 0x6ad2 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6ac8:	84 83       	std	Z+4, r24	; 0x04
    6aca:	95 83       	std	Z+5, r25	; 0x05
    6acc:	a6 83       	std	Z+6, r26	; 0x06
    6ace:	b7 83       	std	Z+7, r27	; 0x07
    6ad0:	1a c0       	rjmp	.+52     	; 0x6b06 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6ad2:	9a 5c       	subi	r25, 0xCA	; 202
    6ad4:	aa 49       	sbci	r26, 0x9A	; 154
    6ad6:	bb 43       	sbci	r27, 0x3B	; 59
    6ad8:	84 83       	std	Z+4, r24	; 0x04
    6ada:	95 83       	std	Z+5, r25	; 0x05
    6adc:	a6 83       	std	Z+6, r26	; 0x06
    6ade:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6ae0:	80 81       	ld	r24, Z
    6ae2:	91 81       	ldd	r25, Z+1	; 0x01
    6ae4:	a2 81       	ldd	r26, Z+2	; 0x02
    6ae6:	b3 81       	ldd	r27, Z+3	; 0x03
    6ae8:	01 96       	adiw	r24, 0x01	; 1
    6aea:	a1 1d       	adc	r26, r1
    6aec:	b1 1d       	adc	r27, r1
    6aee:	80 83       	st	Z, r24
    6af0:	91 83       	std	Z+1, r25	; 0x01
    6af2:	a2 83       	std	Z+2, r26	; 0x02
    6af4:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6af6:	07 c0       	rjmp	.+14     	; 0x6b06 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    6af8:	cf ef       	ldi	r28, 0xFF	; 255
    6afa:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6afc:	40 e2       	ldi	r20, 0x20	; 32
    6afe:	5e e4       	ldi	r21, 0x4E	; 78
    6b00:	60 e0       	ldi	r22, 0x00	; 0
    6b02:	70 e0       	ldi	r23, 0x00	; 0
    6b04:	c4 cf       	rjmp	.-120    	; 0x6a8e <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6b06:	ce 01       	movw	r24, r28
    6b08:	df 91       	pop	r29
    6b0a:	cf 91       	pop	r28
    6b0c:	1f 91       	pop	r17
    6b0e:	0f 91       	pop	r16
    6b10:	08 95       	ret

00006b12 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6b12:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    6b16:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    6b1a:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    6b1e:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    6b22:	80 5c       	subi	r24, 0xC0	; 192
    6b24:	9d 4b       	sbci	r25, 0xBD	; 189
    6b26:	a0 4f       	sbci	r26, 0xF0	; 240
    6b28:	bf 4f       	sbci	r27, 0xFF	; 255
    6b2a:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <__clock+0x4>
    6b2e:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <__clock+0x5>
    6b32:	a0 93 62 1a 	sts	0x1A62, r26	; 0x801a62 <__clock+0x6>
    6b36:	b0 93 63 1a 	sts	0x1A63, r27	; 0x801a63 <__clock+0x7>
    6b3a:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    6b3e:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    6b42:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    6b46:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    6b4a:	81 15       	cp	r24, r1
    6b4c:	9a 4c       	sbci	r25, 0xCA	; 202
    6b4e:	aa 49       	sbci	r26, 0x9A	; 154
    6b50:	bb 43       	sbci	r27, 0x3B	; 59
    6b52:	dc f0       	brlt	.+54     	; 0x6b8a <clock_task+0x78>
    6b54:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock>
    6b58:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x1>
    6b5c:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x2>
    6b60:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x3>
    6b64:	01 96       	adiw	r24, 0x01	; 1
    6b66:	a1 1d       	adc	r26, r1
    6b68:	b1 1d       	adc	r27, r1
    6b6a:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock>
    6b6e:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x1>
    6b72:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x2>
    6b76:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x3>
    6b7a:	10 92 60 1a 	sts	0x1A60, r1	; 0x801a60 <__clock+0x4>
    6b7e:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <__clock+0x5>
    6b82:	10 92 62 1a 	sts	0x1A62, r1	; 0x801a62 <__clock+0x6>
    6b86:	10 92 63 1a 	sts	0x1A63, r1	; 0x801a63 <__clock+0x7>
    6b8a:	08 95       	ret

00006b8c <clock_settime.part.2>:
    6b8c:	fc 01       	movw	r30, r24
    6b8e:	84 81       	ldd	r24, Z+4	; 0x04
    6b90:	95 81       	ldd	r25, Z+5	; 0x05
    6b92:	a6 81       	ldd	r26, Z+6	; 0x06
    6b94:	b7 81       	ldd	r27, Z+7	; 0x07
    6b96:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <__clock+0x4>
    6b9a:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <__clock+0x5>
    6b9e:	a0 93 62 1a 	sts	0x1A62, r26	; 0x801a62 <__clock+0x6>
    6ba2:	b0 93 63 1a 	sts	0x1A63, r27	; 0x801a63 <__clock+0x7>
    6ba6:	80 81       	ld	r24, Z
    6ba8:	91 81       	ldd	r25, Z+1	; 0x01
    6baa:	a2 81       	ldd	r26, Z+2	; 0x02
    6bac:	b3 81       	ldd	r27, Z+3	; 0x03
    6bae:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock>
    6bb2:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x1>
    6bb6:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x2>
    6bba:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x3>
    6bbe:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    6bc2:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    6bc6:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    6bca:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    6bce:	44 81       	ldd	r20, Z+4	; 0x04
    6bd0:	55 81       	ldd	r21, Z+5	; 0x05
    6bd2:	66 81       	ldd	r22, Z+6	; 0x06
    6bd4:	77 81       	ldd	r23, Z+7	; 0x07
    6bd6:	48 17       	cp	r20, r24
    6bd8:	59 07       	cpc	r21, r25
    6bda:	6a 07       	cpc	r22, r26
    6bdc:	7b 07       	cpc	r23, r27
    6bde:	b9 f6       	brne	.-82     	; 0x6b8e <clock_settime.part.2+0x2>
    6be0:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock>
    6be4:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x1>
    6be8:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x2>
    6bec:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x3>
    6bf0:	40 81       	ld	r20, Z
    6bf2:	51 81       	ldd	r21, Z+1	; 0x01
    6bf4:	62 81       	ldd	r22, Z+2	; 0x02
    6bf6:	73 81       	ldd	r23, Z+3	; 0x03
    6bf8:	48 17       	cp	r20, r24
    6bfa:	59 07       	cpc	r21, r25
    6bfc:	6a 07       	cpc	r22, r26
    6bfe:	7b 07       	cpc	r23, r27
    6c00:	31 f6       	brne	.-116    	; 0x6b8e <clock_settime.part.2+0x2>
    6c02:	80 e0       	ldi	r24, 0x00	; 0
    6c04:	90 e0       	ldi	r25, 0x00	; 0
    6c06:	08 95       	ret

00006c08 <set_timers>:
    6c08:	00 d0       	rcall	.+0      	; 0x6c0a <set_timers+0x2>
    6c0a:	1f 92       	push	r1
    6c0c:	00 97       	sbiw	r24, 0x00	; 0
    6c0e:	79 f1       	breq	.+94     	; 0x6c6e <set_timers+0x66>
    6c10:	e4 e6       	ldi	r30, 0x64	; 100
    6c12:	fa e1       	ldi	r31, 0x1A	; 26
    6c14:	4f ef       	ldi	r20, 0xFF	; 255
    6c16:	5f ef       	ldi	r21, 0xFF	; 255
    6c18:	20 e0       	ldi	r18, 0x00	; 0
    6c1a:	30 e0       	ldi	r19, 0x00	; 0
    6c1c:	60 81       	ld	r22, Z
    6c1e:	71 81       	ldd	r23, Z+1	; 0x01
    6c20:	86 17       	cp	r24, r22
    6c22:	97 07       	cpc	r25, r23
    6c24:	79 f0       	breq	.+30     	; 0x6c44 <set_timers+0x3c>
    6c26:	67 2b       	or	r22, r23
    6c28:	71 f4       	brne	.+28     	; 0x6c46 <set_timers+0x3e>
    6c2a:	f9 01       	movw	r30, r18
    6c2c:	ee 0f       	add	r30, r30
    6c2e:	ff 1f       	adc	r31, r31
    6c30:	e2 0f       	add	r30, r18
    6c32:	f3 1f       	adc	r31, r19
    6c34:	ec 59       	subi	r30, 0x9C	; 156
    6c36:	f5 4e       	sbci	r31, 0xE5	; 229
    6c38:	91 83       	std	Z+1, r25	; 0x01
    6c3a:	80 83       	st	Z, r24
    6c3c:	81 e0       	ldi	r24, 0x01	; 1
    6c3e:	82 83       	std	Z+2, r24	; 0x02
    6c40:	c9 01       	movw	r24, r18
    6c42:	19 c0       	rjmp	.+50     	; 0x6c76 <set_timers+0x6e>
    6c44:	a9 01       	movw	r20, r18
    6c46:	2f 5f       	subi	r18, 0xFF	; 255
    6c48:	3f 4f       	sbci	r19, 0xFF	; 255
    6c4a:	33 96       	adiw	r30, 0x03	; 3
    6c4c:	28 30       	cpi	r18, 0x08	; 8
    6c4e:	31 05       	cpc	r19, r1
    6c50:	29 f7       	brne	.-54     	; 0x6c1c <set_timers+0x14>
    6c52:	4f 3f       	cpi	r20, 0xFF	; 255
    6c54:	8f ef       	ldi	r24, 0xFF	; 255
    6c56:	58 07       	cpc	r21, r24
    6c58:	69 f4       	brne	.+26     	; 0x6c74 <set_timers+0x6c>
    6c5a:	83 ee       	ldi	r24, 0xE3	; 227
    6c5c:	96 e0       	ldi	r25, 0x06	; 6
    6c5e:	a0 e0       	ldi	r26, 0x00	; 0
    6c60:	ed b7       	in	r30, 0x3d	; 61
    6c62:	fe b7       	in	r31, 0x3e	; 62
    6c64:	81 83       	std	Z+1, r24	; 0x01
    6c66:	92 83       	std	Z+2, r25	; 0x02
    6c68:	a3 83       	std	Z+3, r26	; 0x03
    6c6a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    6c6e:	8f ef       	ldi	r24, 0xFF	; 255
    6c70:	9f ef       	ldi	r25, 0xFF	; 255
    6c72:	01 c0       	rjmp	.+2      	; 0x6c76 <set_timers+0x6e>
    6c74:	ca 01       	movw	r24, r20
    6c76:	0f 90       	pop	r0
    6c78:	0f 90       	pop	r0
    6c7a:	0f 90       	pop	r0
    6c7c:	08 95       	ret

00006c7e <delete_all_timers>:
    6c7e:	e4 e6       	ldi	r30, 0x64	; 100
    6c80:	fa e1       	ldi	r31, 0x1A	; 26
    6c82:	12 82       	std	Z+2, r1	; 0x02
    6c84:	11 82       	std	Z+1, r1	; 0x01
    6c86:	10 82       	st	Z, r1
    6c88:	33 96       	adiw	r30, 0x03	; 3
    6c8a:	8a e1       	ldi	r24, 0x1A	; 26
    6c8c:	ec 37       	cpi	r30, 0x7C	; 124
    6c8e:	f8 07       	cpc	r31, r24
    6c90:	c1 f7       	brne	.-16     	; 0x6c82 <delete_all_timers+0x4>
    6c92:	08 95       	ret

00006c94 <subtract_timespec>:
    6c94:	0f 93       	push	r16
    6c96:	1f 93       	push	r17
    6c98:	cf 93       	push	r28
    6c9a:	df 93       	push	r29
    6c9c:	fc 01       	movw	r30, r24
    6c9e:	84 81       	ldd	r24, Z+4	; 0x04
    6ca0:	95 81       	ldd	r25, Z+5	; 0x05
    6ca2:	a6 81       	ldd	r26, Z+6	; 0x06
    6ca4:	b7 81       	ldd	r27, Z+7	; 0x07
    6ca6:	eb 01       	movw	r28, r22
    6ca8:	0c 81       	ldd	r16, Y+4	; 0x04
    6caa:	1d 81       	ldd	r17, Y+5	; 0x05
    6cac:	2e 81       	ldd	r18, Y+6	; 0x06
    6cae:	3f 81       	ldd	r19, Y+7	; 0x07
    6cb0:	80 1b       	sub	r24, r16
    6cb2:	91 0b       	sbc	r25, r17
    6cb4:	a2 0b       	sbc	r26, r18
    6cb6:	b3 0b       	sbc	r27, r19
    6cb8:	b7 fd       	sbrc	r27, 7
    6cba:	05 c0       	rjmp	.+10     	; 0x6cc6 <subtract_timespec+0x32>
    6cbc:	84 83       	std	Z+4, r24	; 0x04
    6cbe:	95 83       	std	Z+5, r25	; 0x05
    6cc0:	a6 83       	std	Z+6, r26	; 0x06
    6cc2:	b7 83       	std	Z+7, r27	; 0x07
    6cc4:	12 c0       	rjmp	.+36     	; 0x6cea <subtract_timespec+0x56>
    6cc6:	96 53       	subi	r25, 0x36	; 54
    6cc8:	a5 46       	sbci	r26, 0x65	; 101
    6cca:	b4 4c       	sbci	r27, 0xC4	; 196
    6ccc:	84 83       	std	Z+4, r24	; 0x04
    6cce:	95 83       	std	Z+5, r25	; 0x05
    6cd0:	a6 83       	std	Z+6, r26	; 0x06
    6cd2:	b7 83       	std	Z+7, r27	; 0x07
    6cd4:	80 81       	ld	r24, Z
    6cd6:	91 81       	ldd	r25, Z+1	; 0x01
    6cd8:	a2 81       	ldd	r26, Z+2	; 0x02
    6cda:	b3 81       	ldd	r27, Z+3	; 0x03
    6cdc:	01 97       	sbiw	r24, 0x01	; 1
    6cde:	a1 09       	sbc	r26, r1
    6ce0:	b1 09       	sbc	r27, r1
    6ce2:	80 83       	st	Z, r24
    6ce4:	91 83       	std	Z+1, r25	; 0x01
    6ce6:	a2 83       	std	Z+2, r26	; 0x02
    6ce8:	b3 83       	std	Z+3, r27	; 0x03
    6cea:	80 81       	ld	r24, Z
    6cec:	91 81       	ldd	r25, Z+1	; 0x01
    6cee:	a2 81       	ldd	r26, Z+2	; 0x02
    6cf0:	b3 81       	ldd	r27, Z+3	; 0x03
    6cf2:	eb 01       	movw	r28, r22
    6cf4:	48 81       	ld	r20, Y
    6cf6:	59 81       	ldd	r21, Y+1	; 0x01
    6cf8:	6a 81       	ldd	r22, Y+2	; 0x02
    6cfa:	7b 81       	ldd	r23, Y+3	; 0x03
    6cfc:	84 1b       	sub	r24, r20
    6cfe:	95 0b       	sbc	r25, r21
    6d00:	a6 0b       	sbc	r26, r22
    6d02:	b7 0b       	sbc	r27, r23
    6d04:	80 83       	st	Z, r24
    6d06:	91 83       	std	Z+1, r25	; 0x01
    6d08:	a2 83       	std	Z+2, r26	; 0x02
    6d0a:	b3 83       	std	Z+3, r27	; 0x03
    6d0c:	df 91       	pop	r29
    6d0e:	cf 91       	pop	r28
    6d10:	1f 91       	pop	r17
    6d12:	0f 91       	pop	r16
    6d14:	08 95       	ret

00006d16 <ts_to_str>:
    6d16:	ad b7       	in	r26, 0x3d	; 61
    6d18:	be b7       	in	r27, 0x3e	; 62
    6d1a:	1f 97       	sbiw	r26, 0x0f	; 15
    6d1c:	0f b6       	in	r0, 0x3f	; 63
    6d1e:	f8 94       	cli
    6d20:	be bf       	out	0x3e, r27	; 62
    6d22:	0f be       	out	0x3f, r0	; 63
    6d24:	ad bf       	out	0x3d, r26	; 61
    6d26:	fc 01       	movw	r30, r24
    6d28:	44 81       	ldd	r20, Z+4	; 0x04
    6d2a:	55 81       	ldd	r21, Z+5	; 0x05
    6d2c:	66 81       	ldd	r22, Z+6	; 0x06
    6d2e:	77 81       	ldd	r23, Z+7	; 0x07
    6d30:	ed b7       	in	r30, 0x3d	; 61
    6d32:	fe b7       	in	r31, 0x3e	; 62
    6d34:	44 87       	std	Z+12, r20	; 0x0c
    6d36:	55 87       	std	Z+13, r21	; 0x0d
    6d38:	66 87       	std	Z+14, r22	; 0x0e
    6d3a:	77 87       	std	Z+15, r23	; 0x0f
    6d3c:	fc 01       	movw	r30, r24
    6d3e:	80 81       	ld	r24, Z
    6d40:	91 81       	ldd	r25, Z+1	; 0x01
    6d42:	a2 81       	ldd	r26, Z+2	; 0x02
    6d44:	b3 81       	ldd	r27, Z+3	; 0x03
    6d46:	ed b7       	in	r30, 0x3d	; 61
    6d48:	fe b7       	in	r31, 0x3e	; 62
    6d4a:	80 87       	std	Z+8, r24	; 0x08
    6d4c:	91 87       	std	Z+9, r25	; 0x09
    6d4e:	a2 87       	std	Z+10, r26	; 0x0a
    6d50:	b3 87       	std	Z+11, r27	; 0x0b
    6d52:	89 ed       	ldi	r24, 0xD9	; 217
    6d54:	96 e0       	ldi	r25, 0x06	; 6
    6d56:	a0 e0       	ldi	r26, 0x00	; 0
    6d58:	85 83       	std	Z+5, r24	; 0x05
    6d5a:	96 83       	std	Z+6, r25	; 0x06
    6d5c:	a7 83       	std	Z+7, r26	; 0x07
    6d5e:	8f e1       	ldi	r24, 0x1F	; 31
    6d60:	90 e0       	ldi	r25, 0x00	; 0
    6d62:	94 83       	std	Z+4, r25	; 0x04
    6d64:	83 83       	std	Z+3, r24	; 0x03
    6d66:	82 e9       	ldi	r24, 0x92	; 146
    6d68:	97 e1       	ldi	r25, 0x17	; 23
    6d6a:	92 83       	std	Z+2, r25	; 0x02
    6d6c:	81 83       	std	Z+1, r24	; 0x01
    6d6e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <snprintf_P>
    6d72:	82 e9       	ldi	r24, 0x92	; 146
    6d74:	97 e1       	ldi	r25, 0x17	; 23
    6d76:	ad b7       	in	r26, 0x3d	; 61
    6d78:	be b7       	in	r27, 0x3e	; 62
    6d7a:	1f 96       	adiw	r26, 0x0f	; 15
    6d7c:	0f b6       	in	r0, 0x3f	; 63
    6d7e:	f8 94       	cli
    6d80:	be bf       	out	0x3e, r27	; 62
    6d82:	0f be       	out	0x3f, r0	; 63
    6d84:	ad bf       	out	0x3d, r26	; 61
    6d86:	08 95       	ret

00006d88 <clock_elapsed_begin>:
    6d88:	6a e8       	ldi	r22, 0x8A	; 138
    6d8a:	77 e1       	ldi	r23, 0x17	; 23
    6d8c:	80 e0       	ldi	r24, 0x00	; 0
    6d8e:	90 e0       	ldi	r25, 0x00	; 0
    6d90:	4b ce       	rjmp	.-874    	; 0x6a28 <clock_gettime>
    6d92:	08 95       	ret

00006d94 <clock_elapsed_end>:
    6d94:	af e0       	ldi	r26, 0x0F	; 15
    6d96:	b0 e0       	ldi	r27, 0x00	; 0
    6d98:	e0 ed       	ldi	r30, 0xD0	; 208
    6d9a:	f6 e3       	ldi	r31, 0x36	; 54
    6d9c:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    6da0:	8c 01       	movw	r16, r24
    6da2:	be 01       	movw	r22, r28
    6da4:	68 5f       	subi	r22, 0xF8	; 248
    6da6:	7f 4f       	sbci	r23, 0xFF	; 255
    6da8:	80 e0       	ldi	r24, 0x00	; 0
    6daa:	90 e0       	ldi	r25, 0x00	; 0
    6dac:	3d de       	rcall	.-902    	; 0x6a28 <clock_gettime>
    6dae:	6a e8       	ldi	r22, 0x8A	; 138
    6db0:	77 e1       	ldi	r23, 0x17	; 23
    6db2:	ce 01       	movw	r24, r28
    6db4:	08 96       	adiw	r24, 0x08	; 8
    6db6:	6e df       	rcall	.-292    	; 0x6c94 <subtract_timespec>
    6db8:	01 15       	cp	r16, r1
    6dba:	11 05       	cpc	r17, r1
    6dbc:	b1 f0       	breq	.+44     	; 0x6dea <clock_elapsed_end+0x56>
    6dbe:	f8 01       	movw	r30, r16
    6dc0:	80 81       	ld	r24, Z
    6dc2:	88 23       	and	r24, r24
    6dc4:	91 f0       	breq	.+36     	; 0x6dea <clock_elapsed_end+0x56>
    6dc6:	ce 01       	movw	r24, r28
    6dc8:	08 96       	adiw	r24, 0x08	; 8
    6dca:	a5 df       	rcall	.-182    	; 0x6d16 <ts_to_str>
    6dcc:	ed b7       	in	r30, 0x3d	; 61
    6dce:	fe b7       	in	r31, 0x3e	; 62
    6dd0:	97 83       	std	Z+7, r25	; 0x07
    6dd2:	86 83       	std	Z+6, r24	; 0x06
    6dd4:	15 83       	std	Z+5, r17	; 0x05
    6dd6:	04 83       	std	Z+4, r16	; 0x04
    6dd8:	8b ec       	ldi	r24, 0xCB	; 203
    6dda:	96 e0       	ldi	r25, 0x06	; 6
    6ddc:	a0 e0       	ldi	r26, 0x00	; 0
    6dde:	81 83       	std	Z+1, r24	; 0x01
    6de0:	92 83       	std	Z+2, r25	; 0x02
    6de2:	a3 83       	std	Z+3, r26	; 0x03
    6de4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    6de8:	0f c0       	rjmp	.+30     	; 0x6e08 <clock_elapsed_end+0x74>
    6dea:	ce 01       	movw	r24, r28
    6dec:	08 96       	adiw	r24, 0x08	; 8
    6dee:	93 df       	rcall	.-218    	; 0x6d16 <ts_to_str>
    6df0:	ed b7       	in	r30, 0x3d	; 61
    6df2:	fe b7       	in	r31, 0x3e	; 62
    6df4:	95 83       	std	Z+5, r25	; 0x05
    6df6:	84 83       	std	Z+4, r24	; 0x04
    6df8:	80 ec       	ldi	r24, 0xC0	; 192
    6dfa:	96 e0       	ldi	r25, 0x06	; 6
    6dfc:	a0 e0       	ldi	r26, 0x00	; 0
    6dfe:	81 83       	std	Z+1, r24	; 0x01
    6e00:	92 83       	std	Z+2, r25	; 0x02
    6e02:	a3 83       	std	Z+3, r26	; 0x03
    6e04:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    6e08:	2f 96       	adiw	r28, 0x0f	; 15
    6e0a:	e4 e0       	ldi	r30, 0x04	; 4
    6e0c:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00006e10 <clock_clear>:
    6e10:	a8 e0       	ldi	r26, 0x08	; 8
    6e12:	b0 e0       	ldi	r27, 0x00	; 0
    6e14:	ee e0       	ldi	r30, 0x0E	; 14
    6e16:	f7 e3       	ldi	r31, 0x37	; 55
    6e18:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    6e1c:	1d 82       	std	Y+5, r1	; 0x05
    6e1e:	1e 82       	std	Y+6, r1	; 0x06
    6e20:	1f 82       	std	Y+7, r1	; 0x07
    6e22:	18 86       	std	Y+8, r1	; 0x08
    6e24:	19 82       	std	Y+1, r1	; 0x01
    6e26:	1a 82       	std	Y+2, r1	; 0x02
    6e28:	1b 82       	std	Y+3, r1	; 0x03
    6e2a:	1c 82       	std	Y+4, r1	; 0x04
    6e2c:	ce 01       	movw	r24, r28
    6e2e:	01 96       	adiw	r24, 0x01	; 1
    6e30:	ad de       	rcall	.-678    	; 0x6b8c <clock_settime.part.2>
    6e32:	ec e7       	ldi	r30, 0x7C	; 124
    6e34:	fa e1       	ldi	r31, 0x1A	; 26
    6e36:	11 82       	std	Z+1, r1	; 0x01
    6e38:	10 82       	st	Z, r1
    6e3a:	13 82       	std	Z+3, r1	; 0x03
    6e3c:	12 82       	std	Z+2, r1	; 0x02
    6e3e:	28 96       	adiw	r28, 0x08	; 8
    6e40:	e2 e0       	ldi	r30, 0x02	; 2
    6e42:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00006e46 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6e46:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <timers_configured>
    6e4a:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <timers_configured+0x1>
    6e4e:	89 2b       	or	r24, r25
    6e50:	69 f0       	breq	.+26     	; 0x6e6c <enable_timers+0x26>
    6e52:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <timers_enabled>
    6e56:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <timers_enabled+0x1>
    6e5a:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6e5c:	39 f4       	brne	.+14     	; 0x6e6c <enable_timers+0x26>
        timers_enabled = 1;
    6e5e:	a8 dd       	rcall	.-1200   	; 0x69b0 <enable_system_task>
    6e60:	81 e0       	ldi	r24, 0x01	; 1
    6e62:	90 e0       	ldi	r25, 0x00	; 0
    6e64:	90 93 b5 17 	sts	0x17B5, r25	; 0x8017b5 <timers_enabled+0x1>
    6e68:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <timers_enabled>
    6e6c:	08 95       	ret

00006e6e <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6e6e:	cf 93       	push	r28
    6e70:	df 93       	push	r29
    6e72:	c4 e6       	ldi	r28, 0x64	; 100
    6e74:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6e76:	8a 81       	ldd	r24, Y+2	; 0x02
    6e78:	88 23       	and	r24, r24
    6e7a:	29 f0       	breq	.+10     	; 0x6e86 <execute_timers+0x18>
    6e7c:	e8 81       	ld	r30, Y
    6e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    6e80:	30 97       	sbiw	r30, 0x00	; 0
    6e82:	09 f0       	breq	.+2      	; 0x6e86 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6e84:	09 95       	icall
    6e86:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6e88:	8a e1       	ldi	r24, 0x1A	; 26
    6e8a:	cc 37       	cpi	r28, 0x7C	; 124
    6e8c:	d8 07       	cpc	r29, r24
    6e8e:	99 f7       	brne	.-26     	; 0x6e76 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6e90:	df 91       	pop	r29
    6e92:	cf 91       	pop	r28
    6e94:	08 95       	ret

00006e96 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6e96:	00 d0       	rcall	.+0      	; 0x6e98 <init_timers+0x2>
    6e98:	1f 92       	push	r1
    printf("Timers init called\n");
    6e9a:	8c ea       	ldi	r24, 0xAC	; 172
    6e9c:	96 e0       	ldi	r25, 0x06	; 6
    6e9e:	a0 e0       	ldi	r26, 0x00	; 0
    6ea0:	ed b7       	in	r30, 0x3d	; 61
    6ea2:	fe b7       	in	r31, 0x3e	; 62
    6ea4:	81 83       	std	Z+1, r24	; 0x01
    6ea6:	92 83       	std	Z+2, r25	; 0x02
    6ea8:	a3 83       	std	Z+3, r26	; 0x03
    6eaa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    if(!timers_configured)
    6eae:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <timers_configured>
    6eb2:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <timers_configured+0x1>
    6eb6:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6eb8:	a9 f4       	brne	.+42     	; 0x6ee4 <init_timers+0x4e>
        timers_configured = 1;
    6eba:	7c dd       	rcall	.-1288   	; 0x69b4 <install_timers_isr>
    6ebc:	81 e0       	ldi	r24, 0x01	; 1
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	90 93 b3 17 	sts	0x17B3, r25	; 0x8017b3 <timers_configured+0x1>
    6ec4:	80 93 b2 17 	sts	0x17B2, r24	; 0x8017b2 <timers_configured>
        timers_enabled = 0;
    6ec8:	10 92 b5 17 	sts	0x17B5, r1	; 0x8017b5 <timers_enabled+0x1>
    6ecc:	10 92 b4 17 	sts	0x17B4, r1	; 0x8017b4 <timers_enabled>
        printf("Timers configured\n");
    6ed0:	89 e9       	ldi	r24, 0x99	; 153
    6ed2:	96 e0       	ldi	r25, 0x06	; 6
    6ed4:	a0 e0       	ldi	r26, 0x00	; 0
    6ed6:	ed b7       	in	r30, 0x3d	; 61
    6ed8:	fe b7       	in	r31, 0x3e	; 62
    6eda:	81 83       	std	Z+1, r24	; 0x01
    6edc:	92 83       	std	Z+2, r25	; 0x02
    }

    delete_all_timers();
    6ede:	a3 83       	std	Z+3, r26	; 0x03

    clock_clear();
    6ee0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("Clock Init\n");
    6ee4:	cc de       	rcall	.-616    	; 0x6c7e <delete_all_timers>
    6ee6:	94 df       	rcall	.-216    	; 0x6e10 <clock_clear>
    6ee8:	8d e8       	ldi	r24, 0x8D	; 141
    6eea:	96 e0       	ldi	r25, 0x06	; 6
    6eec:	a0 e0       	ldi	r26, 0x00	; 0
    6eee:	ed b7       	in	r30, 0x3d	; 61
    6ef0:	fe b7       	in	r31, 0x3e	; 62
    6ef2:	81 83       	std	Z+1, r24	; 0x01
    6ef4:	92 83       	std	Z+2, r25	; 0x02
    6ef6:	a3 83       	std	Z+3, r26	; 0x03

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6ef8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    6efc:	61 e0       	ldi	r22, 0x01	; 1
    6efe:	70 e0       	ldi	r23, 0x00	; 0
    6f00:	89 e8       	ldi	r24, 0x89	; 137
    6f02:	95 e3       	ldi	r25, 0x35	; 53
    6f04:	81 de       	rcall	.-766    	; 0x6c08 <set_timers>
        printf("Clock task init failed\n");
    6f06:	01 96       	adiw	r24, 0x01	; 1
    6f08:	51 f4       	brne	.+20     	; 0x6f1e <init_timers+0x88>
    6f0a:	85 e7       	ldi	r24, 0x75	; 117
    6f0c:	96 e0       	ldi	r25, 0x06	; 6
    6f0e:	a0 e0       	ldi	r26, 0x00	; 0
    6f10:	ed b7       	in	r30, 0x3d	; 61
    6f12:	fe b7       	in	r31, 0x3e	; 62
    6f14:	81 83       	std	Z+1, r24	; 0x01
    6f16:	92 83       	std	Z+2, r25	; 0x02
    6f18:	a3 83       	std	Z+3, r26	; 0x03
    printf("Clock Installed\n");
    6f1a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    6f1e:	84 e6       	ldi	r24, 0x64	; 100
    6f20:	96 e0       	ldi	r25, 0x06	; 6
    6f22:	a0 e0       	ldi	r26, 0x00	; 0
    6f24:	ed b7       	in	r30, 0x3d	; 61
    6f26:	fe b7       	in	r31, 0x3e	; 62
    6f28:	81 83       	std	Z+1, r24	; 0x01
    6f2a:	92 83       	std	Z+2, r25	; 0x02

    enable_timers();
    6f2c:	a3 83       	std	Z+3, r26	; 0x03
    6f2e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    printf("Timers enabled\n");
    6f32:	89 df       	rcall	.-238    	; 0x6e46 <enable_timers>
    6f34:	84 e5       	ldi	r24, 0x54	; 84
    6f36:	96 e0       	ldi	r25, 0x06	; 6
    6f38:	a0 e0       	ldi	r26, 0x00	; 0
    6f3a:	ed b7       	in	r30, 0x3d	; 61
    6f3c:	fe b7       	in	r31, 0x3e	; 62
    6f3e:	81 83       	std	Z+1, r24	; 0x01
    6f40:	92 83       	std	Z+2, r25	; 0x02
    6f42:	a3 83       	std	Z+3, r26	; 0x03
}
    6f44:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    6f48:	0f 90       	pop	r0
    6f4a:	0f 90       	pop	r0
    6f4c:	0f 90       	pop	r0
    6f4e:	08 95       	ret

00006f50 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6f50:	89 2b       	or	r24, r25
    6f52:	81 f4       	brne	.+32     	; 0x6f74 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6f54:	fb 01       	movw	r30, r22
    6f56:	10 82       	st	Z, r1
    6f58:	11 82       	std	Z+1, r1	; 0x01
    6f5a:	12 82       	std	Z+2, r1	; 0x02
    6f5c:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6f5e:	80 e4       	ldi	r24, 0x40	; 64
    6f60:	92 e4       	ldi	r25, 0x42	; 66
    6f62:	af e0       	ldi	r26, 0x0F	; 15
    6f64:	b0 e0       	ldi	r27, 0x00	; 0
    6f66:	84 83       	std	Z+4, r24	; 0x04
    6f68:	95 83       	std	Z+5, r25	; 0x05
    6f6a:	a6 83       	std	Z+6, r26	; 0x06
    6f6c:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6f6e:	80 e0       	ldi	r24, 0x00	; 0
    6f70:	90 e0       	ldi	r25, 0x00	; 0
    6f72:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6f74:	8f ef       	ldi	r24, 0xFF	; 255
    6f76:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6f78:	08 95       	ret

00006f7a <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6f7a:	89 2b       	or	r24, r25
    6f7c:	19 f4       	brne	.+6      	; 0x6f84 <clock_settime+0xa>
    6f7e:	cb 01       	movw	r24, r22
    6f80:	05 ce       	rjmp	.-1014   	; 0x6b8c <clock_settime.part.2>
    6f82:	08 95       	ret
        return(-1);
    6f84:	8f ef       	ldi	r24, 0xFF	; 255
    6f86:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6f88:	08 95       	ret

00006f8a <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6f8a:	9c 01       	movw	r18, r24
    6f8c:	83 70       	andi	r24, 0x03	; 3
    6f8e:	99 27       	eor	r25, r25
    6f90:	00 97       	sbiw	r24, 0x00	; 0
    6f92:	69 f4       	brne	.+26     	; 0x6fae <IS_Leap+0x24>
    6f94:	2c 36       	cpi	r18, 0x6C	; 108
    6f96:	47 e0       	ldi	r20, 0x07	; 7
    6f98:	34 07       	cpc	r19, r20
    6f9a:	59 f0       	breq	.+22     	; 0x6fb2 <IS_Leap+0x28>
    6f9c:	51 e0       	ldi	r21, 0x01	; 1
    6f9e:	40 e0       	ldi	r20, 0x00	; 0
    6fa0:	24 33       	cpi	r18, 0x34	; 52
    6fa2:	38 40       	sbci	r19, 0x08	; 8
    6fa4:	09 f4       	brne	.+2      	; 0x6fa8 <IS_Leap+0x1e>
    6fa6:	50 e0       	ldi	r21, 0x00	; 0
    6fa8:	85 2f       	mov	r24, r21
    6faa:	94 2f       	mov	r25, r20
    6fac:	08 95       	ret
    6fae:	80 e0       	ldi	r24, 0x00	; 0
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	08 95       	ret

00006fb4 <tm_mon_to_ascii>:
    6fb4:	8c 30       	cpi	r24, 0x0C	; 12
    6fb6:	91 05       	cpc	r25, r1
    6fb8:	40 f4       	brcc	.+16     	; 0x6fca <tm_mon_to_ascii+0x16>
    6fba:	88 0f       	add	r24, r24
    6fbc:	99 1f       	adc	r25, r25
    6fbe:	fc 01       	movw	r30, r24
    6fc0:	e5 5f       	subi	r30, 0xF5	; 245
    6fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    6fc4:	80 81       	ld	r24, Z
    6fc6:	91 81       	ldd	r25, Z+1	; 0x01
    6fc8:	08 95       	ret
    6fca:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6fce:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6fd2:	08 95       	ret

00006fd4 <Days_Per_Month>:
    6fd4:	cf 93       	push	r28
    6fd6:	df 93       	push	r29
    6fd8:	8c 30       	cpi	r24, 0x0C	; 12
    6fda:	91 05       	cpc	r25, r1
    6fdc:	24 f0       	brlt	.+8      	; 0x6fe6 <Days_Per_Month+0x12>
    6fde:	6f 5f       	subi	r22, 0xFF	; 255
    6fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    6fe2:	0c 97       	sbiw	r24, 0x0c	; 12
    6fe4:	f9 cf       	rjmp	.-14     	; 0x6fd8 <Days_Per_Month+0x4>
    6fe6:	97 ff       	sbrs	r25, 7
    6fe8:	04 c0       	rjmp	.+8      	; 0x6ff2 <Days_Per_Month+0x1e>
    6fea:	61 50       	subi	r22, 0x01	; 1
    6fec:	71 09       	sbc	r23, r1
    6fee:	0c 96       	adiw	r24, 0x0c	; 12
    6ff0:	fa cf       	rjmp	.-12     	; 0x6fe6 <Days_Per_Month+0x12>
    6ff2:	fc 01       	movw	r30, r24
    6ff4:	ee 0f       	add	r30, r30
    6ff6:	ff 1f       	adc	r31, r31
    6ff8:	ed 57       	subi	r30, 0x7D	; 125
    6ffa:	fc 4f       	sbci	r31, 0xFC	; 252
    6ffc:	c0 81       	ld	r28, Z
    6ffe:	d1 81       	ldd	r29, Z+1	; 0x01
    7000:	01 97       	sbiw	r24, 0x01	; 1
    7002:	29 f4       	brne	.+10     	; 0x700e <Days_Per_Month+0x3a>
    7004:	cb 01       	movw	r24, r22
    7006:	c1 df       	rcall	.-126    	; 0x6f8a <IS_Leap>
    7008:	89 2b       	or	r24, r25
    700a:	09 f0       	breq	.+2      	; 0x700e <Days_Per_Month+0x3a>
    700c:	21 96       	adiw	r28, 0x01	; 1
    700e:	ce 01       	movw	r24, r28
    7010:	df 91       	pop	r29
    7012:	cf 91       	pop	r28
    7014:	08 95       	ret

00007016 <time_to_tm>:
    7016:	a0 e0       	ldi	r26, 0x00	; 0
    7018:	b0 e0       	ldi	r27, 0x00	; 0
    701a:	e1 e1       	ldi	r30, 0x11	; 17
    701c:	f8 e3       	ldi	r31, 0x38	; 56
    701e:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__prologue_saves__+0x4>
    7022:	e8 01       	movw	r28, r16
    7024:	e6 e1       	ldi	r30, 0x16	; 22
    7026:	d8 01       	movw	r26, r16
    7028:	1d 92       	st	X+, r1
    702a:	ea 95       	dec	r30
    702c:	e9 f7       	brne	.-6      	; 0x7028 <time_to_tm+0x12>
    702e:	61 15       	cp	r22, r1
    7030:	bd e5       	ldi	r27, 0x5D	; 93
    7032:	7b 07       	cpc	r23, r27
    7034:	bd ef       	ldi	r27, 0xFD	; 253
    7036:	8b 07       	cpc	r24, r27
    7038:	bf ef       	ldi	r27, 0xFF	; 255
    703a:	9b 07       	cpc	r25, r27
    703c:	08 f0       	brcs	.+2      	; 0x7040 <time_to_tm+0x2a>
    703e:	c0 c0       	rjmp	.+384    	; 0x71c0 <time_to_tm+0x1aa>
    7040:	6b 01       	movw	r12, r22
    7042:	7c 01       	movw	r14, r24
    7044:	c2 1a       	sub	r12, r18
    7046:	d3 0a       	sbc	r13, r19
    7048:	e4 0a       	sbc	r14, r20
    704a:	f5 0a       	sbc	r15, r21
    704c:	46 01       	movw	r8, r12
    704e:	57 01       	movw	r10, r14
    7050:	e0 e8       	ldi	r30, 0x80	; 128
    7052:	ce 16       	cp	r12, r30
    7054:	ee ea       	ldi	r30, 0xAE	; 174
    7056:	de 06       	cpc	r13, r30
    7058:	ee ef       	ldi	r30, 0xFE	; 254
    705a:	ee 06       	cpc	r14, r30
    705c:	ef ef       	ldi	r30, 0xFF	; 255
    705e:	fe 06       	cpc	r15, r30
    7060:	50 f0       	brcs	.+20     	; 0x7076 <time_to_tm+0x60>
    7062:	80 e8       	ldi	r24, 0x80	; 128
    7064:	88 0e       	add	r8, r24
    7066:	81 e5       	ldi	r24, 0x51	; 81
    7068:	98 1e       	adc	r9, r24
    706a:	81 e0       	ldi	r24, 0x01	; 1
    706c:	a8 1e       	adc	r10, r24
    706e:	b1 1c       	adc	r11, r1
    7070:	01 e0       	ldi	r16, 0x01	; 1
    7072:	10 e0       	ldi	r17, 0x00	; 0
    7074:	02 c0       	rjmp	.+4      	; 0x707a <time_to_tm+0x64>
    7076:	00 e0       	ldi	r16, 0x00	; 0
    7078:	10 e0       	ldi	r17, 0x00	; 0
    707a:	8c e3       	ldi	r24, 0x3C	; 60
    707c:	48 2e       	mov	r4, r24
    707e:	51 2c       	mov	r5, r1
    7080:	61 2c       	mov	r6, r1
    7082:	71 2c       	mov	r7, r1
    7084:	c5 01       	movw	r24, r10
    7086:	b4 01       	movw	r22, r8
    7088:	a3 01       	movw	r20, r6
    708a:	92 01       	movw	r18, r4
    708c:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    7090:	79 83       	std	Y+1, r23	; 0x01
    7092:	68 83       	st	Y, r22
    7094:	ca 01       	movw	r24, r20
    7096:	b9 01       	movw	r22, r18
    7098:	a3 01       	movw	r20, r6
    709a:	92 01       	movw	r18, r4
    709c:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    70a0:	7b 83       	std	Y+3, r23	; 0x03
    70a2:	6a 83       	std	Y+2, r22	; 0x02
    70a4:	c5 01       	movw	r24, r10
    70a6:	b4 01       	movw	r22, r8
    70a8:	20 e1       	ldi	r18, 0x10	; 16
    70aa:	3e e0       	ldi	r19, 0x0E	; 14
    70ac:	40 e0       	ldi	r20, 0x00	; 0
    70ae:	50 e0       	ldi	r21, 0x00	; 0
    70b0:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    70b4:	ca 01       	movw	r24, r20
    70b6:	b9 01       	movw	r22, r18
    70b8:	28 e1       	ldi	r18, 0x18	; 24
    70ba:	30 e0       	ldi	r19, 0x00	; 0
    70bc:	40 e0       	ldi	r20, 0x00	; 0
    70be:	50 e0       	ldi	r21, 0x00	; 0
    70c0:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    70c4:	7d 83       	std	Y+5, r23	; 0x05
    70c6:	6c 83       	std	Y+4, r22	; 0x04
    70c8:	01 15       	cp	r16, r1
    70ca:	11 05       	cpc	r17, r1
    70cc:	89 f0       	breq	.+34     	; 0x70f0 <time_to_tm+0xda>
    70ce:	85 e4       	ldi	r24, 0x45	; 69
    70d0:	90 e0       	ldi	r25, 0x00	; 0
    70d2:	9b 87       	std	Y+11, r25	; 0x0b
    70d4:	8a 87       	std	Y+10, r24	; 0x0a
    70d6:	8b e0       	ldi	r24, 0x0B	; 11
    70d8:	90 e0       	ldi	r25, 0x00	; 0
    70da:	99 87       	std	Y+9, r25	; 0x09
    70dc:	88 87       	std	Y+8, r24	; 0x08
    70de:	8f e1       	ldi	r24, 0x1F	; 31
    70e0:	90 e0       	ldi	r25, 0x00	; 0
    70e2:	9f 83       	std	Y+7, r25	; 0x07
    70e4:	8e 83       	std	Y+6, r24	; 0x06
    70e6:	83 e0       	ldi	r24, 0x03	; 3
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	9d 87       	std	Y+13, r25	; 0x0d
    70ec:	8c 87       	std	Y+12, r24	; 0x0c
    70ee:	65 c0       	rjmp	.+202    	; 0x71ba <time_to_tm+0x1a4>
    70f0:	c5 01       	movw	r24, r10
    70f2:	b4 01       	movw	r22, r8
    70f4:	20 e8       	ldi	r18, 0x80	; 128
    70f6:	31 e5       	ldi	r19, 0x51	; 81
    70f8:	41 e0       	ldi	r20, 0x01	; 1
    70fa:	50 e0       	ldi	r21, 0x00	; 0
    70fc:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    7100:	49 01       	movw	r8, r18
    7102:	5a 01       	movw	r10, r20
    7104:	ca 01       	movw	r24, r20
    7106:	b9 01       	movw	r22, r18
    7108:	6c 5f       	subi	r22, 0xFC	; 252
    710a:	7f 4f       	sbci	r23, 0xFF	; 255
    710c:	8f 4f       	sbci	r24, 0xFF	; 255
    710e:	9f 4f       	sbci	r25, 0xFF	; 255
    7110:	27 e0       	ldi	r18, 0x07	; 7
    7112:	30 e0       	ldi	r19, 0x00	; 0
    7114:	40 e0       	ldi	r20, 0x00	; 0
    7116:	50 e0       	ldi	r21, 0x00	; 0
    7118:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
    711c:	7d 87       	std	Y+13, r23	; 0x0d
    711e:	6c 87       	std	Y+12, r22	; 0x0c
    7120:	02 eb       	ldi	r16, 0xB2	; 178
    7122:	17 e0       	ldi	r17, 0x07	; 7
    7124:	c8 01       	movw	r24, r16
    7126:	31 df       	rcall	.-414    	; 0x6f8a <IS_Leap>
    7128:	00 97       	sbiw	r24, 0x00	; 0
    712a:	19 f4       	brne	.+6      	; 0x7132 <time_to_tm+0x11c>
    712c:	4d e6       	ldi	r20, 0x6D	; 109
    712e:	51 e0       	ldi	r21, 0x01	; 1
    7130:	02 c0       	rjmp	.+4      	; 0x7136 <time_to_tm+0x120>
    7132:	4e e6       	ldi	r20, 0x6E	; 110
    7134:	51 e0       	ldi	r21, 0x01	; 1
    7136:	05 2e       	mov	r0, r21
    7138:	00 0c       	add	r0, r0
    713a:	66 0b       	sbc	r22, r22
    713c:	77 0b       	sbc	r23, r23
    713e:	84 16       	cp	r8, r20
    7140:	95 06       	cpc	r9, r21
    7142:	a6 06       	cpc	r10, r22
    7144:	b7 06       	cpc	r11, r23
    7146:	3c f0       	brlt	.+14     	; 0x7156 <time_to_tm+0x140>
    7148:	0f 5f       	subi	r16, 0xFF	; 255
    714a:	1f 4f       	sbci	r17, 0xFF	; 255
    714c:	84 1a       	sub	r8, r20
    714e:	95 0a       	sbc	r9, r21
    7150:	a6 0a       	sbc	r10, r22
    7152:	b7 0a       	sbc	r11, r23
    7154:	e7 cf       	rjmp	.-50     	; 0x7124 <time_to_tm+0x10e>
    7156:	0c 56       	subi	r16, 0x6C	; 108
    7158:	17 40       	sbci	r17, 0x07	; 7
    715a:	1b 87       	std	Y+11, r17	; 0x0b
    715c:	0a 87       	std	Y+10, r16	; 0x0a
    715e:	9f 86       	std	Y+15, r9	; 0x0f
    7160:	8e 86       	std	Y+14, r8	; 0x0e
    7162:	e3 e8       	ldi	r30, 0x83	; 131
    7164:	f3 e0       	ldi	r31, 0x03	; 3
    7166:	20 e0       	ldi	r18, 0x00	; 0
    7168:	30 e0       	ldi	r19, 0x00	; 0
    716a:	18 14       	cp	r1, r8
    716c:	19 04       	cpc	r1, r9
    716e:	1a 04       	cpc	r1, r10
    7170:	1b 04       	cpc	r1, r11
    7172:	e4 f4       	brge	.+56     	; 0x71ac <time_to_tm+0x196>
    7174:	2c 30       	cpi	r18, 0x0C	; 12
    7176:	31 05       	cpc	r19, r1
    7178:	c9 f0       	breq	.+50     	; 0x71ac <time_to_tm+0x196>
    717a:	41 91       	ld	r20, Z+
    717c:	51 91       	ld	r21, Z+
    717e:	21 30       	cpi	r18, 0x01	; 1
    7180:	31 05       	cpc	r19, r1
    7182:	21 f4       	brne	.+8      	; 0x718c <time_to_tm+0x176>
    7184:	00 97       	sbiw	r24, 0x00	; 0
    7186:	11 f0       	breq	.+4      	; 0x718c <time_to_tm+0x176>
    7188:	4f 5f       	subi	r20, 0xFF	; 255
    718a:	5f 4f       	sbci	r21, 0xFF	; 255
    718c:	05 2e       	mov	r0, r21
    718e:	00 0c       	add	r0, r0
    7190:	66 0b       	sbc	r22, r22
    7192:	77 0b       	sbc	r23, r23
    7194:	84 16       	cp	r8, r20
    7196:	95 06       	cpc	r9, r21
    7198:	a6 06       	cpc	r10, r22
    719a:	b7 06       	cpc	r11, r23
    719c:	3c f0       	brlt	.+14     	; 0x71ac <time_to_tm+0x196>
    719e:	84 1a       	sub	r8, r20
    71a0:	95 0a       	sbc	r9, r21
    71a2:	a6 0a       	sbc	r10, r22
    71a4:	b7 0a       	sbc	r11, r23
    71a6:	2f 5f       	subi	r18, 0xFF	; 255
    71a8:	3f 4f       	sbci	r19, 0xFF	; 255
    71aa:	df cf       	rjmp	.-66     	; 0x716a <time_to_tm+0x154>
    71ac:	39 87       	std	Y+9, r19	; 0x09
    71ae:	28 87       	std	Y+8, r18	; 0x08
    71b0:	af ef       	ldi	r26, 0xFF	; 255
    71b2:	8a 1a       	sub	r8, r26
    71b4:	9a 0a       	sbc	r9, r26
    71b6:	9f 82       	std	Y+7, r9	; 0x07
    71b8:	8e 82       	std	Y+6, r8	; 0x06
    71ba:	b6 01       	movw	r22, r12
    71bc:	c7 01       	movw	r24, r14
    71be:	04 c0       	rjmp	.+8      	; 0x71c8 <time_to_tm+0x1b2>
    71c0:	6f ef       	ldi	r22, 0xFF	; 255
    71c2:	7f ef       	ldi	r23, 0xFF	; 255
    71c4:	8f ef       	ldi	r24, 0xFF	; 255
    71c6:	9f ef       	ldi	r25, 0xFF	; 255
    71c8:	cd b7       	in	r28, 0x3d	; 61
    71ca:	de b7       	in	r29, 0x3e	; 62
    71cc:	e0 e1       	ldi	r30, 0x10	; 16
    71ce:	0c 94 07 e4 	jmp	0x1c80e	; 0x1c80e <__epilogue_restores__+0x4>

000071d2 <gmtime_r>:
    71d2:	0f 93       	push	r16
    71d4:	1f 93       	push	r17
    71d6:	cf 93       	push	r28
    71d8:	df 93       	push	r29
    71da:	eb 01       	movw	r28, r22
    71dc:	fc 01       	movw	r30, r24
    71de:	60 81       	ld	r22, Z
    71e0:	71 81       	ldd	r23, Z+1	; 0x01
    71e2:	82 81       	ldd	r24, Z+2	; 0x02
    71e4:	93 81       	ldd	r25, Z+3	; 0x03
    71e6:	8e 01       	movw	r16, r28
    71e8:	20 e0       	ldi	r18, 0x00	; 0
    71ea:	30 e0       	ldi	r19, 0x00	; 0
    71ec:	a9 01       	movw	r20, r18
    71ee:	13 df       	rcall	.-474    	; 0x7016 <time_to_tm>
    71f0:	ce 01       	movw	r24, r28
    71f2:	df 91       	pop	r29
    71f4:	cf 91       	pop	r28
    71f6:	1f 91       	pop	r17
    71f8:	0f 91       	pop	r16
    71fa:	08 95       	ret

000071fc <gmtime>:
    71fc:	24 ed       	ldi	r18, 0xD4	; 212
    71fe:	37 e1       	ldi	r19, 0x17	; 23
    7200:	30 93 eb 17 	sts	0x17EB, r19	; 0x8017eb <p.3686+0x1>
    7204:	20 93 ea 17 	sts	0x17EA, r18	; 0x8017ea <p.3686>
    7208:	b9 01       	movw	r22, r18
    720a:	e3 df       	rcall	.-58     	; 0x71d2 <gmtime_r>
    720c:	84 ed       	ldi	r24, 0xD4	; 212
    720e:	97 e1       	ldi	r25, 0x17	; 23
    7210:	08 95       	ret

00007212 <gettimezone>:
    7212:	ec e7       	ldi	r30, 0x7C	; 124
    7214:	fa e1       	ldi	r31, 0x1A	; 26
    7216:	20 81       	ld	r18, Z
    7218:	31 81       	ldd	r19, Z+1	; 0x01
    721a:	dc 01       	movw	r26, r24
    721c:	2d 93       	st	X+, r18
    721e:	3c 93       	st	X, r19
    7220:	22 81       	ldd	r18, Z+2	; 0x02
    7222:	33 81       	ldd	r19, Z+3	; 0x03
    7224:	fc 01       	movw	r30, r24
    7226:	33 83       	std	Z+3, r19	; 0x03
    7228:	22 83       	std	Z+2, r18	; 0x02
    722a:	80 e0       	ldi	r24, 0x00	; 0
    722c:	90 e0       	ldi	r25, 0x00	; 0
    722e:	08 95       	ret

00007230 <settimezone>:
    7230:	cf 93       	push	r28
    7232:	df 93       	push	r29
    7234:	ec 01       	movw	r28, r24
    7236:	28 81       	ld	r18, Y
    7238:	39 81       	ldd	r19, Y+1	; 0x01
    723a:	ec e7       	ldi	r30, 0x7C	; 124
    723c:	fa e1       	ldi	r31, 0x1A	; 26
    723e:	31 83       	std	Z+1, r19	; 0x01
    7240:	20 83       	st	Z, r18
    7242:	8a 81       	ldd	r24, Y+2	; 0x02
    7244:	9b 81       	ldd	r25, Y+3	; 0x03
    7246:	93 83       	std	Z+3, r25	; 0x03
    7248:	82 83       	std	Z+2, r24	; 0x02
    724a:	80 e0       	ldi	r24, 0x00	; 0
    724c:	90 e0       	ldi	r25, 0x00	; 0
    724e:	df 91       	pop	r29
    7250:	cf 91       	pop	r28
    7252:	08 95       	ret

00007254 <gettimeofday>:
    7254:	a8 e0       	ldi	r26, 0x08	; 8
    7256:	b0 e0       	ldi	r27, 0x00	; 0
    7258:	e0 e3       	ldi	r30, 0x30	; 48
    725a:	f9 e3       	ldi	r31, 0x39	; 57
    725c:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
    7260:	8c 01       	movw	r16, r24
    7262:	7b 01       	movw	r14, r22
    7264:	be 01       	movw	r22, r28
    7266:	6f 5f       	subi	r22, 0xFF	; 255
    7268:	7f 4f       	sbci	r23, 0xFF	; 255
    726a:	80 e0       	ldi	r24, 0x00	; 0
    726c:	90 e0       	ldi	r25, 0x00	; 0
    726e:	dc db       	rcall	.-2120   	; 0x6a28 <clock_gettime>
    7270:	89 81       	ldd	r24, Y+1	; 0x01
    7272:	9a 81       	ldd	r25, Y+2	; 0x02
    7274:	ab 81       	ldd	r26, Y+3	; 0x03
    7276:	bc 81       	ldd	r27, Y+4	; 0x04
    7278:	f8 01       	movw	r30, r16
    727a:	80 83       	st	Z, r24
    727c:	91 83       	std	Z+1, r25	; 0x01
    727e:	a2 83       	std	Z+2, r26	; 0x02
    7280:	b3 83       	std	Z+3, r27	; 0x03
    7282:	6d 81       	ldd	r22, Y+5	; 0x05
    7284:	7e 81       	ldd	r23, Y+6	; 0x06
    7286:	8f 81       	ldd	r24, Y+7	; 0x07
    7288:	98 85       	ldd	r25, Y+8	; 0x08
    728a:	28 ee       	ldi	r18, 0xE8	; 232
    728c:	33 e0       	ldi	r19, 0x03	; 3
    728e:	40 e0       	ldi	r20, 0x00	; 0
    7290:	50 e0       	ldi	r21, 0x00	; 0
    7292:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
    7296:	f8 01       	movw	r30, r16
    7298:	24 83       	std	Z+4, r18	; 0x04
    729a:	35 83       	std	Z+5, r19	; 0x05
    729c:	46 83       	std	Z+6, r20	; 0x06
    729e:	57 83       	std	Z+7, r21	; 0x07
    72a0:	c7 01       	movw	r24, r14
    72a2:	b7 df       	rcall	.-146    	; 0x7212 <gettimezone>
    72a4:	80 e0       	ldi	r24, 0x00	; 0
    72a6:	90 e0       	ldi	r25, 0x00	; 0
    72a8:	28 96       	adiw	r28, 0x08	; 8
    72aa:	e6 e0       	ldi	r30, 0x06	; 6
    72ac:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

000072b0 <time>:
    72b0:	cf 93       	push	r28
    72b2:	df 93       	push	r29
    72b4:	ec 01       	movw	r28, r24
    72b6:	66 eb       	ldi	r22, 0xB6	; 182
    72b8:	77 e1       	ldi	r23, 0x17	; 23
    72ba:	80 e0       	ldi	r24, 0x00	; 0
    72bc:	90 e0       	ldi	r25, 0x00	; 0
    72be:	b4 db       	rcall	.-2200   	; 0x6a28 <clock_gettime>
    72c0:	20 97       	sbiw	r28, 0x00	; 0
    72c2:	61 f0       	breq	.+24     	; 0x72dc <time+0x2c>
    72c4:	80 91 b6 17 	lds	r24, 0x17B6	; 0x8017b6 <ts.3764>
    72c8:	90 91 b7 17 	lds	r25, 0x17B7	; 0x8017b7 <ts.3764+0x1>
    72cc:	a0 91 b8 17 	lds	r26, 0x17B8	; 0x8017b8 <ts.3764+0x2>
    72d0:	b0 91 b9 17 	lds	r27, 0x17B9	; 0x8017b9 <ts.3764+0x3>
    72d4:	88 83       	st	Y, r24
    72d6:	99 83       	std	Y+1, r25	; 0x01
    72d8:	aa 83       	std	Y+2, r26	; 0x02
    72da:	bb 83       	std	Y+3, r27	; 0x03
    72dc:	60 91 b6 17 	lds	r22, 0x17B6	; 0x8017b6 <ts.3764>
    72e0:	70 91 b7 17 	lds	r23, 0x17B7	; 0x8017b7 <ts.3764+0x1>
    72e4:	80 91 b8 17 	lds	r24, 0x17B8	; 0x8017b8 <ts.3764+0x2>
    72e8:	90 91 b9 17 	lds	r25, 0x17B9	; 0x8017b9 <ts.3764+0x3>
    72ec:	df 91       	pop	r29
    72ee:	cf 91       	pop	r28
    72f0:	08 95       	ret

000072f2 <is_dst>:
    72f2:	cf 92       	push	r12
    72f4:	df 92       	push	r13
    72f6:	ef 92       	push	r14
    72f8:	ff 92       	push	r15
    72fa:	6b 01       	movw	r12, r22
    72fc:	7c 01       	movw	r14, r24
    72fe:	05 d4       	rcall	.+2058   	; 0x7b0a <set_dst>
    7300:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <dst>
    7304:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <dst+0x1>
    7308:	a0 91 82 1a 	lds	r26, 0x1A82	; 0x801a82 <dst+0x2>
    730c:	b0 91 83 1a 	lds	r27, 0x1A83	; 0x801a83 <dst+0x3>
    7310:	c8 16       	cp	r12, r24
    7312:	d9 06       	cpc	r13, r25
    7314:	ea 06       	cpc	r14, r26
    7316:	fb 06       	cpc	r15, r27
    7318:	88 f0       	brcs	.+34     	; 0x733c <is_dst+0x4a>
    731a:	81 e0       	ldi	r24, 0x01	; 1
    731c:	90 e0       	ldi	r25, 0x00	; 0
    731e:	40 91 84 1a 	lds	r20, 0x1A84	; 0x801a84 <dst+0x4>
    7322:	50 91 85 1a 	lds	r21, 0x1A85	; 0x801a85 <dst+0x5>
    7326:	60 91 86 1a 	lds	r22, 0x1A86	; 0x801a86 <dst+0x6>
    732a:	70 91 87 1a 	lds	r23, 0x1A87	; 0x801a87 <dst+0x7>
    732e:	4c 15       	cp	r20, r12
    7330:	5d 05       	cpc	r21, r13
    7332:	6e 05       	cpc	r22, r14
    7334:	7f 05       	cpc	r23, r15
    7336:	20 f4       	brcc	.+8      	; 0x7340 <is_dst+0x4e>
    7338:	80 e0       	ldi	r24, 0x00	; 0
    733a:	02 c0       	rjmp	.+4      	; 0x7340 <is_dst+0x4e>
    733c:	80 e0       	ldi	r24, 0x00	; 0
    733e:	90 e0       	ldi	r25, 0x00	; 0
    7340:	ff 90       	pop	r15
    7342:	ef 90       	pop	r14
    7344:	df 90       	pop	r13
    7346:	cf 90       	pop	r12
    7348:	08 95       	ret

0000734a <localtime_r>:
    734a:	4f 92       	push	r4
    734c:	5f 92       	push	r5
    734e:	6f 92       	push	r6
    7350:	7f 92       	push	r7
    7352:	af 92       	push	r10
    7354:	bf 92       	push	r11
    7356:	cf 92       	push	r12
    7358:	df 92       	push	r13
    735a:	ef 92       	push	r14
    735c:	ff 92       	push	r15
    735e:	0f 93       	push	r16
    7360:	1f 93       	push	r17
    7362:	cf 93       	push	r28
    7364:	df 93       	push	r29
    7366:	00 d0       	rcall	.+0      	; 0x7368 <localtime_r+0x1e>
    7368:	00 d0       	rcall	.+0      	; 0x736a <localtime_r+0x20>
    736a:	cd b7       	in	r28, 0x3d	; 61
    736c:	de b7       	in	r29, 0x3e	; 62
    736e:	5b 01       	movw	r10, r22
    7370:	fc 01       	movw	r30, r24
    7372:	40 80       	ld	r4, Z
    7374:	51 80       	ldd	r5, Z+1	; 0x01
    7376:	62 80       	ldd	r6, Z+2	; 0x02
    7378:	73 80       	ldd	r7, Z+3	; 0x03
    737a:	ce 01       	movw	r24, r28
    737c:	01 96       	adiw	r24, 0x01	; 1
    737e:	49 df       	rcall	.-366    	; 0x7212 <gettimezone>
    7380:	a9 81       	ldd	r26, Y+1	; 0x01
    7382:	ba 81       	ldd	r27, Y+2	; 0x02
    7384:	2c e3       	ldi	r18, 0x3C	; 60
    7386:	30 e0       	ldi	r19, 0x00	; 0
    7388:	0e 94 c3 e3 	call	0x1c786	; 0x1c786 <__usmulhisi3>
    738c:	6b 01       	movw	r12, r22
    738e:	7c 01       	movw	r14, r24
    7390:	c3 01       	movw	r24, r6
    7392:	b2 01       	movw	r22, r4
    7394:	6c 19       	sub	r22, r12
    7396:	7d 09       	sbc	r23, r13
    7398:	8e 09       	sbc	r24, r14
    739a:	9f 09       	sbc	r25, r15
    739c:	aa df       	rcall	.-172    	; 0x72f2 <is_dst>
    739e:	89 2b       	or	r24, r25
    73a0:	31 f0       	breq	.+12     	; 0x73ae <localtime_r+0x64>
    73a2:	f0 e1       	ldi	r31, 0x10	; 16
    73a4:	cf 1a       	sub	r12, r31
    73a6:	fe e0       	ldi	r31, 0x0E	; 14
    73a8:	df 0a       	sbc	r13, r31
    73aa:	e1 08       	sbc	r14, r1
    73ac:	f1 08       	sbc	r15, r1
    73ae:	85 01       	movw	r16, r10
    73b0:	a7 01       	movw	r20, r14
    73b2:	96 01       	movw	r18, r12
    73b4:	c3 01       	movw	r24, r6
    73b6:	b2 01       	movw	r22, r4
    73b8:	2e de       	rcall	.-932    	; 0x7016 <time_to_tm>
    73ba:	c5 01       	movw	r24, r10
    73bc:	0f 90       	pop	r0
    73be:	0f 90       	pop	r0
    73c0:	0f 90       	pop	r0
    73c2:	0f 90       	pop	r0
    73c4:	df 91       	pop	r29
    73c6:	cf 91       	pop	r28
    73c8:	1f 91       	pop	r17
    73ca:	0f 91       	pop	r16
    73cc:	ff 90       	pop	r15
    73ce:	ef 90       	pop	r14
    73d0:	df 90       	pop	r13
    73d2:	cf 90       	pop	r12
    73d4:	bf 90       	pop	r11
    73d6:	af 90       	pop	r10
    73d8:	7f 90       	pop	r7
    73da:	6f 90       	pop	r6
    73dc:	5f 90       	pop	r5
    73de:	4f 90       	pop	r4
    73e0:	08 95       	ret

000073e2 <localtime>:
    73e2:	6e eb       	ldi	r22, 0xBE	; 190
    73e4:	77 e1       	ldi	r23, 0x17	; 23
    73e6:	b1 cf       	rjmp	.-158    	; 0x734a <localtime_r>
    73e8:	08 95       	ret

000073ea <normalize>:
    73ea:	aa e0       	ldi	r26, 0x0A	; 10
    73ec:	b0 e0       	ldi	r27, 0x00	; 0
    73ee:	eb ef       	ldi	r30, 0xFB	; 251
    73f0:	f9 e3       	ldi	r31, 0x39	; 57
    73f2:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    73f6:	7c 01       	movw	r14, r24
    73f8:	7a 87       	std	Y+10, r23	; 0x0a
    73fa:	69 87       	std	Y+9, r22	; 0x09
    73fc:	f7 01       	movw	r30, r14
    73fe:	80 81       	ld	r24, Z
    7400:	91 81       	ldd	r25, Z+1	; 0x01
    7402:	8c 33       	cpi	r24, 0x3C	; 60
    7404:	91 05       	cpc	r25, r1
    7406:	5c f0       	brlt	.+22     	; 0x741e <normalize+0x34>
    7408:	f7 01       	movw	r30, r14
    740a:	22 81       	ldd	r18, Z+2	; 0x02
    740c:	33 81       	ldd	r19, Z+3	; 0x03
    740e:	2f 5f       	subi	r18, 0xFF	; 255
    7410:	3f 4f       	sbci	r19, 0xFF	; 255
    7412:	33 83       	std	Z+3, r19	; 0x03
    7414:	22 83       	std	Z+2, r18	; 0x02
    7416:	cc 97       	sbiw	r24, 0x3c	; 60
    7418:	91 83       	std	Z+1, r25	; 0x01
    741a:	80 83       	st	Z, r24
    741c:	ef cf       	rjmp	.-34     	; 0x73fc <normalize+0x12>
    741e:	f7 01       	movw	r30, r14
    7420:	01 90       	ld	r0, Z+
    7422:	f0 81       	ld	r31, Z
    7424:	e0 2d       	mov	r30, r0
    7426:	fe 83       	std	Y+6, r31	; 0x06
    7428:	ed 83       	std	Y+5, r30	; 0x05
    742a:	f7 ff       	sbrs	r31, 7
    742c:	0d c0       	rjmp	.+26     	; 0x7448 <normalize+0x5e>
    742e:	f7 01       	movw	r30, r14
    7430:	82 81       	ldd	r24, Z+2	; 0x02
    7432:	93 81       	ldd	r25, Z+3	; 0x03
    7434:	01 97       	sbiw	r24, 0x01	; 1
    7436:	93 83       	std	Z+3, r25	; 0x03
    7438:	82 83       	std	Z+2, r24	; 0x02
    743a:	6d 81       	ldd	r22, Y+5	; 0x05
    743c:	7e 81       	ldd	r23, Y+6	; 0x06
    743e:	64 5c       	subi	r22, 0xC4	; 196
    7440:	7f 4f       	sbci	r23, 0xFF	; 255
    7442:	71 83       	std	Z+1, r23	; 0x01
    7444:	60 83       	st	Z, r22
    7446:	eb cf       	rjmp	.-42     	; 0x741e <normalize+0x34>
    7448:	f7 01       	movw	r30, r14
    744a:	82 81       	ldd	r24, Z+2	; 0x02
    744c:	93 81       	ldd	r25, Z+3	; 0x03
    744e:	8c 33       	cpi	r24, 0x3C	; 60
    7450:	91 05       	cpc	r25, r1
    7452:	5c f0       	brlt	.+22     	; 0x746a <normalize+0x80>
    7454:	f7 01       	movw	r30, r14
    7456:	24 81       	ldd	r18, Z+4	; 0x04
    7458:	35 81       	ldd	r19, Z+5	; 0x05
    745a:	2f 5f       	subi	r18, 0xFF	; 255
    745c:	3f 4f       	sbci	r19, 0xFF	; 255
    745e:	35 83       	std	Z+5, r19	; 0x05
    7460:	24 83       	std	Z+4, r18	; 0x04
    7462:	cc 97       	sbiw	r24, 0x3c	; 60
    7464:	93 83       	std	Z+3, r25	; 0x03
    7466:	82 83       	std	Z+2, r24	; 0x02
    7468:	ef cf       	rjmp	.-34     	; 0x7448 <normalize+0x5e>
    746a:	f7 01       	movw	r30, r14
    746c:	22 80       	ldd	r2, Z+2	; 0x02
    746e:	33 80       	ldd	r3, Z+3	; 0x03
    7470:	37 fe       	sbrs	r3, 7
    7472:	0d c0       	rjmp	.+26     	; 0x748e <normalize+0xa4>
    7474:	f7 01       	movw	r30, r14
    7476:	84 81       	ldd	r24, Z+4	; 0x04
    7478:	95 81       	ldd	r25, Z+5	; 0x05
    747a:	01 97       	sbiw	r24, 0x01	; 1
    747c:	95 83       	std	Z+5, r25	; 0x05
    747e:	84 83       	std	Z+4, r24	; 0x04
    7480:	fc e3       	ldi	r31, 0x3C	; 60
    7482:	2f 0e       	add	r2, r31
    7484:	31 1c       	adc	r3, r1
    7486:	f7 01       	movw	r30, r14
    7488:	33 82       	std	Z+3, r3	; 0x03
    748a:	22 82       	std	Z+2, r2	; 0x02
    748c:	ee cf       	rjmp	.-36     	; 0x746a <normalize+0x80>
    748e:	f7 01       	movw	r30, r14
    7490:	84 81       	ldd	r24, Z+4	; 0x04
    7492:	95 81       	ldd	r25, Z+5	; 0x05
    7494:	88 31       	cpi	r24, 0x18	; 24
    7496:	91 05       	cpc	r25, r1
    7498:	5c f0       	brlt	.+22     	; 0x74b0 <normalize+0xc6>
    749a:	f7 01       	movw	r30, r14
    749c:	26 81       	ldd	r18, Z+6	; 0x06
    749e:	37 81       	ldd	r19, Z+7	; 0x07
    74a0:	2f 5f       	subi	r18, 0xFF	; 255
    74a2:	3f 4f       	sbci	r19, 0xFF	; 255
    74a4:	37 83       	std	Z+7, r19	; 0x07
    74a6:	26 83       	std	Z+6, r18	; 0x06
    74a8:	48 97       	sbiw	r24, 0x18	; 24
    74aa:	95 83       	std	Z+5, r25	; 0x05
    74ac:	84 83       	std	Z+4, r24	; 0x04
    74ae:	ef cf       	rjmp	.-34     	; 0x748e <normalize+0xa4>
    74b0:	f7 01       	movw	r30, r14
    74b2:	04 81       	ldd	r16, Z+4	; 0x04
    74b4:	15 81       	ldd	r17, Z+5	; 0x05
    74b6:	17 ff       	sbrs	r17, 7
    74b8:	0b c0       	rjmp	.+22     	; 0x74d0 <normalize+0xe6>
    74ba:	f7 01       	movw	r30, r14
    74bc:	86 81       	ldd	r24, Z+6	; 0x06
    74be:	97 81       	ldd	r25, Z+7	; 0x07
    74c0:	01 97       	sbiw	r24, 0x01	; 1
    74c2:	97 83       	std	Z+7, r25	; 0x07
    74c4:	86 83       	std	Z+6, r24	; 0x06
    74c6:	08 5e       	subi	r16, 0xE8	; 232
    74c8:	1f 4f       	sbci	r17, 0xFF	; 255
    74ca:	15 83       	std	Z+5, r17	; 0x05
    74cc:	04 83       	std	Z+4, r16	; 0x04
    74ce:	f0 cf       	rjmp	.-32     	; 0x74b0 <normalize+0xc6>
    74d0:	f7 01       	movw	r30, r14
    74d2:	80 85       	ldd	r24, Z+8	; 0x08
    74d4:	91 85       	ldd	r25, Z+9	; 0x09
    74d6:	8c 30       	cpi	r24, 0x0C	; 12
    74d8:	91 05       	cpc	r25, r1
    74da:	5c f0       	brlt	.+22     	; 0x74f2 <normalize+0x108>
    74dc:	f7 01       	movw	r30, r14
    74de:	22 85       	ldd	r18, Z+10	; 0x0a
    74e0:	33 85       	ldd	r19, Z+11	; 0x0b
    74e2:	2f 5f       	subi	r18, 0xFF	; 255
    74e4:	3f 4f       	sbci	r19, 0xFF	; 255
    74e6:	33 87       	std	Z+11, r19	; 0x0b
    74e8:	22 87       	std	Z+10, r18	; 0x0a
    74ea:	0c 97       	sbiw	r24, 0x0c	; 12
    74ec:	91 87       	std	Z+9, r25	; 0x09
    74ee:	80 87       	std	Z+8, r24	; 0x08
    74f0:	ef cf       	rjmp	.-34     	; 0x74d0 <normalize+0xe6>
    74f2:	f7 01       	movw	r30, r14
    74f4:	80 85       	ldd	r24, Z+8	; 0x08
    74f6:	91 85       	ldd	r25, Z+9	; 0x09
    74f8:	97 ff       	sbrs	r25, 7
    74fa:	2d c0       	rjmp	.+90     	; 0x7556 <normalize+0x16c>
    74fc:	f7 01       	movw	r30, r14
    74fe:	22 85       	ldd	r18, Z+10	; 0x0a
    7500:	33 85       	ldd	r19, Z+11	; 0x0b
    7502:	21 50       	subi	r18, 0x01	; 1
    7504:	31 09       	sbc	r19, r1
    7506:	33 87       	std	Z+11, r19	; 0x0b
    7508:	22 87       	std	Z+10, r18	; 0x0a
    750a:	0c 96       	adiw	r24, 0x0c	; 12
    750c:	91 87       	std	Z+9, r25	; 0x09
    750e:	80 87       	std	Z+8, r24	; 0x08
    7510:	f0 cf       	rjmp	.-32     	; 0x74f2 <normalize+0x108>
    7512:	f7 01       	movw	r30, r14
    7514:	c6 80       	ldd	r12, Z+6	; 0x06
    7516:	d7 80       	ldd	r13, Z+7	; 0x07
    7518:	a0 84       	ldd	r10, Z+8	; 0x08
    751a:	b1 84       	ldd	r11, Z+9	; 0x09
    751c:	b4 01       	movw	r22, r8
    751e:	c5 01       	movw	r24, r10
    7520:	59 dd       	rcall	.-1358   	; 0x6fd4 <Days_Per_Month>
    7522:	8c 15       	cp	r24, r12
    7524:	9d 05       	cpc	r25, r13
    7526:	84 f5       	brge	.+96     	; 0x7588 <normalize+0x19e>
    7528:	c8 1a       	sub	r12, r24
    752a:	d9 0a       	sbc	r13, r25
    752c:	f7 01       	movw	r30, r14
    752e:	d7 82       	std	Z+7, r13	; 0x07
    7530:	c6 82       	std	Z+6, r12	; 0x06
    7532:	c5 01       	movw	r24, r10
    7534:	01 96       	adiw	r24, 0x01	; 1
    7536:	91 87       	std	Z+9, r25	; 0x09
    7538:	80 87       	std	Z+8, r24	; 0x08
    753a:	0c 97       	sbiw	r24, 0x0c	; 12
    753c:	54 f3       	brlt	.-44     	; 0x7512 <normalize+0x128>
    753e:	fb e0       	ldi	r31, 0x0B	; 11
    7540:	af 1a       	sub	r10, r31
    7542:	b1 08       	sbc	r11, r1
    7544:	f7 01       	movw	r30, r14
    7546:	b1 86       	std	Z+9, r11	; 0x09
    7548:	a0 86       	std	Z+8, r10	; 0x08
    754a:	ff ef       	ldi	r31, 0xFF	; 255
    754c:	8f 1a       	sub	r8, r31
    754e:	9f 0a       	sbc	r9, r31
    7550:	f7 01       	movw	r30, r14
    7552:	93 86       	std	Z+11, r9	; 0x0b
    7554:	82 86       	std	Z+10, r8	; 0x0a
    7556:	f7 01       	movw	r30, r14
    7558:	82 84       	ldd	r8, Z+10	; 0x0a
    755a:	93 84       	ldd	r9, Z+11	; 0x0b
    755c:	da cf       	rjmp	.-76     	; 0x7512 <normalize+0x128>
    755e:	f7 01       	movw	r30, r14
    7560:	80 85       	ldd	r24, Z+8	; 0x08
    7562:	91 85       	ldd	r25, Z+9	; 0x09
    7564:	9c 01       	movw	r18, r24
    7566:	21 50       	subi	r18, 0x01	; 1
    7568:	31 09       	sbc	r19, r1
    756a:	37 fd       	sbrc	r19, 7
    756c:	16 c0       	rjmp	.+44     	; 0x759a <normalize+0x1b0>
    756e:	31 87       	std	Z+9, r19	; 0x09
    7570:	20 87       	std	Z+8, r18	; 0x08
    7572:	f7 01       	movw	r30, r14
    7574:	62 85       	ldd	r22, Z+10	; 0x0a
    7576:	73 85       	ldd	r23, Z+11	; 0x0b
    7578:	80 85       	ldd	r24, Z+8	; 0x08
    757a:	91 85       	ldd	r25, Z+9	; 0x09
    757c:	2b dd       	rcall	.-1450   	; 0x6fd4 <Days_Per_Month>
    757e:	88 0d       	add	r24, r8
    7580:	99 1d       	adc	r25, r9
    7582:	f7 01       	movw	r30, r14
    7584:	97 83       	std	Z+7, r25	; 0x07
    7586:	86 83       	std	Z+6, r24	; 0x06
    7588:	f7 01       	movw	r30, r14
    758a:	86 80       	ldd	r8, Z+6	; 0x06
    758c:	97 80       	ldd	r9, Z+7	; 0x07
    758e:	a2 84       	ldd	r10, Z+10	; 0x0a
    7590:	b3 84       	ldd	r11, Z+11	; 0x0b
    7592:	18 14       	cp	r1, r8
    7594:	19 04       	cpc	r1, r9
    7596:	1c f7       	brge	.-58     	; 0x755e <normalize+0x174>
    7598:	0b c0       	rjmp	.+22     	; 0x75b0 <normalize+0x1c6>
    759a:	0b 96       	adiw	r24, 0x0b	; 11
    759c:	f7 01       	movw	r30, r14
    759e:	91 87       	std	Z+9, r25	; 0x09
    75a0:	80 87       	std	Z+8, r24	; 0x08
    75a2:	f1 e0       	ldi	r31, 0x01	; 1
    75a4:	af 1a       	sub	r10, r31
    75a6:	b1 08       	sbc	r11, r1
    75a8:	f7 01       	movw	r30, r14
    75aa:	b3 86       	std	Z+11, r11	; 0x0b
    75ac:	a2 86       	std	Z+10, r10	; 0x0a
    75ae:	e1 cf       	rjmp	.-62     	; 0x7572 <normalize+0x188>
    75b0:	a5 01       	movw	r20, r10
    75b2:	44 59       	subi	r20, 0x94	; 148
    75b4:	58 4f       	sbci	r21, 0xF8	; 248
    75b6:	58 87       	std	Y+8, r21	; 0x08
    75b8:	4f 83       	std	Y+7, r20	; 0x07
    75ba:	35 01       	movw	r6, r10
    75bc:	56 e4       	ldi	r21, 0x46	; 70
    75be:	65 1a       	sub	r6, r21
    75c0:	71 08       	sbc	r7, r1
    75c2:	89 e8       	ldi	r24, 0x89	; 137
    75c4:	68 16       	cp	r6, r24
    75c6:	71 04       	cpc	r7, r1
    75c8:	08 f0       	brcs	.+2      	; 0x75cc <normalize+0x1e2>
    75ca:	9b c0       	rjmp	.+310    	; 0x7702 <normalize+0x318>
    75cc:	c0 84       	ldd	r12, Z+8	; 0x08
    75ce:	d1 84       	ldd	r13, Z+9	; 0x09
    75d0:	9c e0       	ldi	r25, 0x0C	; 12
    75d2:	c9 16       	cp	r12, r25
    75d4:	d1 04       	cpc	r13, r1
    75d6:	08 f0       	brcs	.+2      	; 0x75da <normalize+0x1f0>
    75d8:	94 c0       	rjmp	.+296    	; 0x7702 <normalize+0x318>
    75da:	24 01       	movw	r4, r8
    75dc:	e1 e0       	ldi	r30, 0x01	; 1
    75de:	4e 1a       	sub	r4, r30
    75e0:	51 08       	sbc	r5, r1
    75e2:	6f 81       	ldd	r22, Y+7	; 0x07
    75e4:	78 85       	ldd	r23, Y+8	; 0x08
    75e6:	c6 01       	movw	r24, r12
    75e8:	f5 dc       	rcall	.-1558   	; 0x6fd4 <Days_Per_Month>
    75ea:	48 16       	cp	r4, r24
    75ec:	59 06       	cpc	r5, r25
    75ee:	0c f0       	brlt	.+2      	; 0x75f2 <normalize+0x208>
    75f0:	88 c0       	rjmp	.+272    	; 0x7702 <normalize+0x318>
    75f2:	08 31       	cpi	r16, 0x18	; 24
    75f4:	11 05       	cpc	r17, r1
    75f6:	0c f0       	brlt	.+2      	; 0x75fa <normalize+0x210>
    75f8:	84 c0       	rjmp	.+264    	; 0x7702 <normalize+0x318>
    75fa:	fc e3       	ldi	r31, 0x3C	; 60
    75fc:	2f 16       	cp	r2, r31
    75fe:	31 04       	cpc	r3, r1
    7600:	0c f0       	brlt	.+2      	; 0x7604 <normalize+0x21a>
    7602:	7f c0       	rjmp	.+254    	; 0x7702 <normalize+0x318>
    7604:	4d 81       	ldd	r20, Y+5	; 0x05
    7606:	5e 81       	ldd	r21, Y+6	; 0x06
    7608:	4c 33       	cpi	r20, 0x3C	; 60
    760a:	51 05       	cpc	r21, r1
    760c:	0c f0       	brlt	.+2      	; 0x7610 <normalize+0x226>
    760e:	79 c0       	rjmp	.+242    	; 0x7702 <normalize+0x318>
    7610:	2d e6       	ldi	r18, 0x6D	; 109
    7612:	31 e0       	ldi	r19, 0x01	; 1
    7614:	d3 01       	movw	r26, r6
    7616:	0e 94 c3 e3 	call	0x1c786	; 0x1c786 <__usmulhisi3>
    761a:	f6 01       	movw	r30, r12
    761c:	ee 0f       	add	r30, r30
    761e:	ff 1f       	adc	r31, r31
    7620:	e5 56       	subi	r30, 0x65	; 101
    7622:	fc 4f       	sbci	r31, 0xFC	; 252
    7624:	20 81       	ld	r18, Z
    7626:	31 81       	ldd	r19, Z+1	; 0x01
    7628:	dc 01       	movw	r26, r24
    762a:	cb 01       	movw	r24, r22
    762c:	82 0f       	add	r24, r18
    762e:	93 1f       	adc	r25, r19
    7630:	a1 1d       	adc	r26, r1
    7632:	b1 1d       	adc	r27, r1
    7634:	05 2c       	mov	r0, r5
    7636:	00 0c       	add	r0, r0
    7638:	66 08       	sbc	r6, r6
    763a:	77 08       	sbc	r7, r7
    763c:	48 0e       	add	r4, r24
    763e:	59 1e       	adc	r5, r25
    7640:	6a 1e       	adc	r6, r26
    7642:	7b 1e       	adc	r7, r27
    7644:	1a 14       	cp	r1, r10
    7646:	1b 04       	cpc	r1, r11
    7648:	1c f4       	brge	.+6      	; 0x7650 <normalize+0x266>
    764a:	51 e0       	ldi	r21, 0x01	; 1
    764c:	a5 1a       	sub	r10, r21
    764e:	b1 08       	sbc	r11, r1
    7650:	45 01       	movw	r8, r10
    7652:	95 94       	asr	r9
    7654:	87 94       	ror	r8
    7656:	95 94       	asr	r9
    7658:	87 94       	ror	r8
    765a:	88 ec       	ldi	r24, 0xC8	; 200
    765c:	a8 16       	cp	r10, r24
    765e:	b1 04       	cpc	r11, r1
    7660:	1c f0       	brlt	.+6      	; 0x7668 <normalize+0x27e>
    7662:	91 e0       	ldi	r25, 0x01	; 1
    7664:	89 1a       	sub	r8, r25
    7666:	91 08       	sbc	r9, r1
    7668:	09 2c       	mov	r0, r9
    766a:	00 0c       	add	r0, r0
    766c:	aa 08       	sbc	r10, r10
    766e:	bb 08       	sbc	r11, r11
    7670:	84 0c       	add	r8, r4
    7672:	95 1c       	adc	r9, r5
    7674:	a6 1c       	adc	r10, r6
    7676:	b7 1c       	adc	r11, r7
    7678:	24 01       	movw	r4, r8
    767a:	35 01       	movw	r6, r10
    767c:	e1 e1       	ldi	r30, 0x11	; 17
    767e:	4e 1a       	sub	r4, r30
    7680:	51 08       	sbc	r5, r1
    7682:	61 08       	sbc	r6, r1
    7684:	71 08       	sbc	r7, r1
    7686:	f2 e0       	ldi	r31, 0x02	; 2
    7688:	cf 16       	cp	r12, r31
    768a:	d1 04       	cpc	r13, r1
    768c:	64 f0       	brlt	.+24     	; 0x76a6 <normalize+0x2bc>
    768e:	8f 81       	ldd	r24, Y+7	; 0x07
    7690:	98 85       	ldd	r25, Y+8	; 0x08
    7692:	7b dc       	rcall	.-1802   	; 0x6f8a <IS_Leap>
    7694:	89 2b       	or	r24, r25
    7696:	39 f0       	breq	.+14     	; 0x76a6 <normalize+0x2bc>
    7698:	24 01       	movw	r4, r8
    769a:	35 01       	movw	r6, r10
    769c:	40 e1       	ldi	r20, 0x10	; 16
    769e:	44 1a       	sub	r4, r20
    76a0:	51 08       	sbc	r5, r1
    76a2:	61 08       	sbc	r6, r1
    76a4:	71 08       	sbc	r7, r1
    76a6:	a8 e1       	ldi	r26, 0x18	; 24
    76a8:	b0 e0       	ldi	r27, 0x00	; 0
    76aa:	a3 01       	movw	r20, r6
    76ac:	92 01       	movw	r18, r4
    76ae:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
    76b2:	01 2e       	mov	r0, r17
    76b4:	00 0c       	add	r0, r0
    76b6:	22 0b       	sbc	r18, r18
    76b8:	33 0b       	sbc	r19, r19
    76ba:	a9 01       	movw	r20, r18
    76bc:	98 01       	movw	r18, r16
    76be:	26 0f       	add	r18, r22
    76c0:	37 1f       	adc	r19, r23
    76c2:	48 1f       	adc	r20, r24
    76c4:	59 1f       	adc	r21, r25
    76c6:	ac e3       	ldi	r26, 0x3C	; 60
    76c8:	b0 e0       	ldi	r27, 0x00	; 0
    76ca:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
    76ce:	81 01       	movw	r16, r2
    76d0:	03 2c       	mov	r0, r3
    76d2:	00 0c       	add	r0, r0
    76d4:	22 0b       	sbc	r18, r18
    76d6:	33 0b       	sbc	r19, r19
    76d8:	a9 01       	movw	r20, r18
    76da:	98 01       	movw	r18, r16
    76dc:	26 0f       	add	r18, r22
    76de:	37 1f       	adc	r19, r23
    76e0:	48 1f       	adc	r20, r24
    76e2:	59 1f       	adc	r21, r25
    76e4:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
    76e8:	ed 81       	ldd	r30, Y+5	; 0x05
    76ea:	fe 81       	ldd	r31, Y+6	; 0x06
    76ec:	8f 01       	movw	r16, r30
    76ee:	ff 0f       	add	r31, r31
    76f0:	22 0b       	sbc	r18, r18
    76f2:	33 0b       	sbc	r19, r19
    76f4:	48 01       	movw	r8, r16
    76f6:	59 01       	movw	r10, r18
    76f8:	86 0e       	add	r8, r22
    76fa:	97 1e       	adc	r9, r23
    76fc:	a8 1e       	adc	r10, r24
    76fe:	b9 1e       	adc	r11, r25
    7700:	04 c0       	rjmp	.+8      	; 0x770a <normalize+0x320>
    7702:	88 24       	eor	r8, r8
    7704:	8a 94       	dec	r8
    7706:	98 2c       	mov	r9, r8
    7708:	54 01       	movw	r10, r8
    770a:	49 85       	ldd	r20, Y+9	; 0x09
    770c:	5a 85       	ldd	r21, Y+10	; 0x0a
    770e:	45 2b       	or	r20, r21
    7710:	e9 f0       	breq	.+58     	; 0x774c <normalize+0x362>
    7712:	ce 01       	movw	r24, r28
    7714:	01 96       	adiw	r24, 0x01	; 1
    7716:	7d dd       	rcall	.-1286   	; 0x7212 <gettimezone>
    7718:	a9 81       	ldd	r26, Y+1	; 0x01
    771a:	ba 81       	ldd	r27, Y+2	; 0x02
    771c:	2c e3       	ldi	r18, 0x3C	; 60
    771e:	30 e0       	ldi	r19, 0x00	; 0
    7720:	0e 94 c3 e3 	call	0x1c786	; 0x1c786 <__usmulhisi3>
    7724:	2b 01       	movw	r4, r22
    7726:	3c 01       	movw	r6, r24
    7728:	c5 01       	movw	r24, r10
    772a:	b4 01       	movw	r22, r8
    772c:	e2 dd       	rcall	.-1084   	; 0x72f2 <is_dst>
    772e:	89 2b       	or	r24, r25
    7730:	51 f0       	breq	.+20     	; 0x7746 <normalize+0x35c>
    7732:	50 e1       	ldi	r21, 0x10	; 16
    7734:	45 1a       	sub	r4, r21
    7736:	5e e0       	ldi	r21, 0x0E	; 14
    7738:	55 0a       	sbc	r5, r21
    773a:	61 08       	sbc	r6, r1
    773c:	71 08       	sbc	r7, r1
    773e:	cc 24       	eor	r12, r12
    7740:	c3 94       	inc	r12
    7742:	d1 2c       	mov	r13, r1
    7744:	08 c0       	rjmp	.+16     	; 0x7756 <normalize+0x36c>
    7746:	c1 2c       	mov	r12, r1
    7748:	d1 2c       	mov	r13, r1
    774a:	05 c0       	rjmp	.+10     	; 0x7756 <normalize+0x36c>
    774c:	c1 2c       	mov	r12, r1
    774e:	d1 2c       	mov	r13, r1
    7750:	41 2c       	mov	r4, r1
    7752:	51 2c       	mov	r5, r1
    7754:	32 01       	movw	r6, r4
    7756:	87 01       	movw	r16, r14
    7758:	a3 01       	movw	r20, r6
    775a:	92 01       	movw	r18, r4
    775c:	c5 01       	movw	r24, r10
    775e:	b4 01       	movw	r22, r8
    7760:	5a dc       	rcall	.-1868   	; 0x7016 <time_to_tm>
    7762:	c1 14       	cp	r12, r1
    7764:	d1 04       	cpc	r13, r1
    7766:	29 f0       	breq	.+10     	; 0x7772 <normalize+0x388>
    7768:	21 e0       	ldi	r18, 0x01	; 1
    776a:	30 e0       	ldi	r19, 0x00	; 0
    776c:	f7 01       	movw	r30, r14
    776e:	31 8b       	std	Z+17, r19	; 0x11
    7770:	20 8b       	std	Z+16, r18	; 0x10
    7772:	2a 96       	adiw	r28, 0x0a	; 10
    7774:	e2 e1       	ldi	r30, 0x12	; 18
    7776:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000777a <timegm>:
    777a:	60 e0       	ldi	r22, 0x00	; 0
    777c:	70 e0       	ldi	r23, 0x00	; 0
    777e:	35 ce       	rjmp	.-918    	; 0x73ea <normalize>
    7780:	08 95       	ret

00007782 <setdate_r>:
    7782:	cf 92       	push	r12
    7784:	df 92       	push	r13
    7786:	ef 92       	push	r14
    7788:	ff 92       	push	r15
    778a:	cf 93       	push	r28
    778c:	df 93       	push	r29
    778e:	cd b7       	in	r28, 0x3d	; 61
    7790:	de b7       	in	r29, 0x3e	; 62
    7792:	a5 97       	sbiw	r28, 0x25	; 37
    7794:	0f b6       	in	r0, 0x3f	; 63
    7796:	f8 94       	cli
    7798:	de bf       	out	0x3e, r29	; 62
    779a:	0f be       	out	0x3f, r0	; 63
    779c:	cd bf       	out	0x3d, r28	; 61
    779e:	9d a3       	std	Y+37, r25	; 0x25
    77a0:	8c a3       	std	Y+36, r24	; 0x24
    77a2:	1f 82       	std	Y+7, r1	; 0x07
    77a4:	1e 82       	std	Y+6, r1	; 0x06
    77a6:	19 86       	std	Y+9, r1	; 0x09
    77a8:	18 86       	std	Y+8, r1	; 0x08
    77aa:	1b 86       	std	Y+11, r1	; 0x0b
    77ac:	1a 86       	std	Y+10, r1	; 0x0a
    77ae:	1d 86       	std	Y+13, r1	; 0x0d
    77b0:	1c 86       	std	Y+12, r1	; 0x0c
    77b2:	1f 86       	std	Y+15, r1	; 0x0f
    77b4:	1e 86       	std	Y+14, r1	; 0x0e
    77b6:	19 8a       	std	Y+17, r1	; 0x11
    77b8:	18 8a       	std	Y+16, r1	; 0x10
    77ba:	8c a1       	ldd	r24, Y+36	; 0x24
    77bc:	9d a1       	ldd	r25, Y+37	; 0x25
    77be:	fc 01       	movw	r30, r24
    77c0:	20 81       	ld	r18, Z
    77c2:	20 32       	cpi	r18, 0x20	; 32
    77c4:	21 f4       	brne	.+8      	; 0x77ce <setdate_r+0x4c>
    77c6:	01 96       	adiw	r24, 0x01	; 1
    77c8:	9d a3       	std	Y+37, r25	; 0x25
    77ca:	8c a3       	std	Y+36, r24	; 0x24
    77cc:	f6 cf       	rjmp	.-20     	; 0x77ba <setdate_r+0x38>
    77ce:	4a e0       	ldi	r20, 0x0A	; 10
    77d0:	50 e0       	ldi	r21, 0x00	; 0
    77d2:	be 01       	movw	r22, r28
    77d4:	6c 5d       	subi	r22, 0xDC	; 220
    77d6:	7f 4f       	sbci	r23, 0xFF	; 255
    77d8:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <strtol>
    77dc:	79 8b       	std	Y+17, r23	; 0x11
    77de:	68 8b       	std	Y+16, r22	; 0x10
    77e0:	8c a1       	ldd	r24, Y+36	; 0x24
    77e2:	9d a1       	ldd	r25, Y+37	; 0x25
    77e4:	fc 01       	movw	r30, r24
    77e6:	20 81       	ld	r18, Z
    77e8:	20 32       	cpi	r18, 0x20	; 32
    77ea:	21 f4       	brne	.+8      	; 0x77f4 <setdate_r+0x72>
    77ec:	01 96       	adiw	r24, 0x01	; 1
    77ee:	9d a3       	std	Y+37, r25	; 0x25
    77f0:	8c a3       	std	Y+36, r24	; 0x24
    77f2:	f6 cf       	rjmp	.-20     	; 0x77e0 <setdate_r+0x5e>
    77f4:	4a e0       	ldi	r20, 0x0A	; 10
    77f6:	50 e0       	ldi	r21, 0x00	; 0
    77f8:	be 01       	movw	r22, r28
    77fa:	6c 5d       	subi	r22, 0xDC	; 220
    77fc:	7f 4f       	sbci	r23, 0xFF	; 255
    77fe:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <strtol>
    7802:	7f 87       	std	Y+15, r23	; 0x0f
    7804:	6e 87       	std	Y+14, r22	; 0x0e
    7806:	8c a1       	ldd	r24, Y+36	; 0x24
    7808:	9d a1       	ldd	r25, Y+37	; 0x25
    780a:	fc 01       	movw	r30, r24
    780c:	20 81       	ld	r18, Z
    780e:	20 32       	cpi	r18, 0x20	; 32
    7810:	21 f4       	brne	.+8      	; 0x781a <setdate_r+0x98>
    7812:	01 96       	adiw	r24, 0x01	; 1
    7814:	9d a3       	std	Y+37, r25	; 0x25
    7816:	8c a3       	std	Y+36, r24	; 0x24
    7818:	f6 cf       	rjmp	.-20     	; 0x7806 <setdate_r+0x84>
    781a:	4a e0       	ldi	r20, 0x0A	; 10
    781c:	50 e0       	ldi	r21, 0x00	; 0
    781e:	be 01       	movw	r22, r28
    7820:	6c 5d       	subi	r22, 0xDC	; 220
    7822:	7f 4f       	sbci	r23, 0xFF	; 255
    7824:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <strtol>
    7828:	7d 87       	std	Y+13, r23	; 0x0d
    782a:	6c 87       	std	Y+12, r22	; 0x0c
    782c:	8c a1       	ldd	r24, Y+36	; 0x24
    782e:	9d a1       	ldd	r25, Y+37	; 0x25
    7830:	fc 01       	movw	r30, r24
    7832:	20 81       	ld	r18, Z
    7834:	20 32       	cpi	r18, 0x20	; 32
    7836:	21 f4       	brne	.+8      	; 0x7840 <setdate_r+0xbe>
    7838:	01 96       	adiw	r24, 0x01	; 1
    783a:	9d a3       	std	Y+37, r25	; 0x25
    783c:	8c a3       	std	Y+36, r24	; 0x24
    783e:	f6 cf       	rjmp	.-20     	; 0x782c <setdate_r+0xaa>
    7840:	4a e0       	ldi	r20, 0x0A	; 10
    7842:	50 e0       	ldi	r21, 0x00	; 0
    7844:	be 01       	movw	r22, r28
    7846:	6c 5d       	subi	r22, 0xDC	; 220
    7848:	7f 4f       	sbci	r23, 0xFF	; 255
    784a:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <strtol>
    784e:	7b 87       	std	Y+11, r23	; 0x0b
    7850:	6a 87       	std	Y+10, r22	; 0x0a
    7852:	ec a1       	ldd	r30, Y+36	; 0x24
    7854:	fd a1       	ldd	r31, Y+37	; 0x25
    7856:	80 81       	ld	r24, Z
    7858:	88 23       	and	r24, r24
    785a:	39 f0       	breq	.+14     	; 0x786a <setdate_r+0xe8>
    785c:	80 32       	cpi	r24, 0x20	; 32
    785e:	11 f0       	breq	.+4      	; 0x7864 <setdate_r+0xe2>
    7860:	8a 33       	cpi	r24, 0x3A	; 58
    7862:	19 f4       	brne	.+6      	; 0x786a <setdate_r+0xe8>
    7864:	31 96       	adiw	r30, 0x01	; 1
    7866:	fd a3       	std	Y+37, r31	; 0x25
    7868:	ec a3       	std	Y+36, r30	; 0x24
    786a:	4a e0       	ldi	r20, 0x0A	; 10
    786c:	50 e0       	ldi	r21, 0x00	; 0
    786e:	be 01       	movw	r22, r28
    7870:	6c 5d       	subi	r22, 0xDC	; 220
    7872:	7f 4f       	sbci	r23, 0xFF	; 255
    7874:	8c a1       	ldd	r24, Y+36	; 0x24
    7876:	9d a1       	ldd	r25, Y+37	; 0x25
    7878:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <strtol>
    787c:	79 87       	std	Y+9, r23	; 0x09
    787e:	68 87       	std	Y+8, r22	; 0x08
    7880:	ec a1       	ldd	r30, Y+36	; 0x24
    7882:	fd a1       	ldd	r31, Y+37	; 0x25
    7884:	80 81       	ld	r24, Z
    7886:	88 23       	and	r24, r24
    7888:	39 f0       	breq	.+14     	; 0x7898 <setdate_r+0x116>
    788a:	80 32       	cpi	r24, 0x20	; 32
    788c:	11 f0       	breq	.+4      	; 0x7892 <setdate_r+0x110>
    788e:	8a 33       	cpi	r24, 0x3A	; 58
    7890:	19 f4       	brne	.+6      	; 0x7898 <setdate_r+0x116>
    7892:	31 96       	adiw	r30, 0x01	; 1
    7894:	fd a3       	std	Y+37, r31	; 0x25
    7896:	ec a3       	std	Y+36, r30	; 0x24
    7898:	4a e0       	ldi	r20, 0x0A	; 10
    789a:	50 e0       	ldi	r21, 0x00	; 0
    789c:	be 01       	movw	r22, r28
    789e:	6c 5d       	subi	r22, 0xDC	; 220
    78a0:	7f 4f       	sbci	r23, 0xFF	; 255
    78a2:	8c a1       	ldd	r24, Y+36	; 0x24
    78a4:	9d a1       	ldd	r25, Y+37	; 0x25
    78a6:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <strtol>
    78aa:	7f 83       	std	Y+7, r23	; 0x07
    78ac:	6e 83       	std	Y+6, r22	; 0x06
    78ae:	2e 85       	ldd	r18, Y+14	; 0x0e
    78b0:	3f 85       	ldd	r19, Y+15	; 0x0f
    78b2:	21 50       	subi	r18, 0x01	; 1
    78b4:	31 09       	sbc	r19, r1
    78b6:	3f 87       	std	Y+15, r19	; 0x0f
    78b8:	2e 87       	std	Y+14, r18	; 0x0e
    78ba:	88 89       	ldd	r24, Y+16	; 0x10
    78bc:	99 89       	ldd	r25, Y+17	; 0x11
    78be:	ac 01       	movw	r20, r24
    78c0:	42 5b       	subi	r20, 0xB2	; 178
    78c2:	57 40       	sbci	r21, 0x07	; 7
    78c4:	45 34       	cpi	r20, 0x45	; 69
    78c6:	51 05       	cpc	r21, r1
    78c8:	38 f0       	brcs	.+14     	; 0x78d8 <setdate_r+0x156>
    78ca:	ed b7       	in	r30, 0x3d	; 61
    78cc:	fe b7       	in	r31, 0x3e	; 62
    78ce:	95 83       	std	Z+5, r25	; 0x05
    78d0:	84 83       	std	Z+4, r24	; 0x04
    78d2:	8f e2       	ldi	r24, 0x2F	; 47
    78d4:	98 e0       	ldi	r25, 0x08	; 8
    78d6:	34 c0       	rjmp	.+104    	; 0x7940 <setdate_r+0x1be>
    78d8:	8c 56       	subi	r24, 0x6C	; 108
    78da:	97 40       	sbci	r25, 0x07	; 7
    78dc:	99 8b       	std	Y+17, r25	; 0x11
    78de:	88 8b       	std	Y+16, r24	; 0x10
    78e0:	2c 30       	cpi	r18, 0x0C	; 12
    78e2:	31 05       	cpc	r19, r1
    78e4:	38 f0       	brcs	.+14     	; 0x78f4 <setdate_r+0x172>
    78e6:	ed b7       	in	r30, 0x3d	; 61
    78e8:	fe b7       	in	r31, 0x3e	; 62
    78ea:	95 83       	std	Z+5, r25	; 0x05
    78ec:	84 83       	std	Z+4, r24	; 0x04
    78ee:	8e e1       	ldi	r24, 0x1E	; 30
    78f0:	98 e0       	ldi	r25, 0x08	; 8
    78f2:	26 c0       	rjmp	.+76     	; 0x7940 <setdate_r+0x1be>
    78f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    78f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    78f8:	9c 01       	movw	r18, r24
    78fa:	21 50       	subi	r18, 0x01	; 1
    78fc:	31 09       	sbc	r19, r1
    78fe:	2f 31       	cpi	r18, 0x1F	; 31
    7900:	31 05       	cpc	r19, r1
    7902:	38 f0       	brcs	.+14     	; 0x7912 <setdate_r+0x190>
    7904:	ed b7       	in	r30, 0x3d	; 61
    7906:	fe b7       	in	r31, 0x3e	; 62
    7908:	95 83       	std	Z+5, r25	; 0x05
    790a:	84 83       	std	Z+4, r24	; 0x04
    790c:	8d e0       	ldi	r24, 0x0D	; 13
    790e:	98 e0       	ldi	r25, 0x08	; 8
    7910:	17 c0       	rjmp	.+46     	; 0x7940 <setdate_r+0x1be>
    7912:	8a 85       	ldd	r24, Y+10	; 0x0a
    7914:	9b 85       	ldd	r25, Y+11	; 0x0b
    7916:	88 31       	cpi	r24, 0x18	; 24
    7918:	91 05       	cpc	r25, r1
    791a:	38 f0       	brcs	.+14     	; 0x792a <setdate_r+0x1a8>
    791c:	ed b7       	in	r30, 0x3d	; 61
    791e:	fe b7       	in	r31, 0x3e	; 62
    7920:	95 83       	std	Z+5, r25	; 0x05
    7922:	84 83       	std	Z+4, r24	; 0x04
    7924:	8b ef       	ldi	r24, 0xFB	; 251
    7926:	97 e0       	ldi	r25, 0x07	; 7
    7928:	0b c0       	rjmp	.+22     	; 0x7940 <setdate_r+0x1be>
    792a:	88 85       	ldd	r24, Y+8	; 0x08
    792c:	99 85       	ldd	r25, Y+9	; 0x09
    792e:	8c 33       	cpi	r24, 0x3C	; 60
    7930:	91 05       	cpc	r25, r1
    7932:	68 f0       	brcs	.+26     	; 0x794e <setdate_r+0x1cc>
    7934:	ed b7       	in	r30, 0x3d	; 61
    7936:	fe b7       	in	r31, 0x3e	; 62
    7938:	95 83       	std	Z+5, r25	; 0x05
    793a:	84 83       	std	Z+4, r24	; 0x04
    793c:	8a ee       	ldi	r24, 0xEA	; 234
    793e:	97 e0       	ldi	r25, 0x07	; 7
    7940:	a0 e0       	ldi	r26, 0x00	; 0
    7942:	81 83       	std	Z+1, r24	; 0x01
    7944:	92 83       	std	Z+2, r25	; 0x02
    7946:	a3 83       	std	Z+3, r26	; 0x03
    7948:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    794c:	25 c0       	rjmp	.+74     	; 0x7998 <setdate_r+0x216>
    794e:	ce 01       	movw	r24, r28
    7950:	06 96       	adiw	r24, 0x06	; 6
    7952:	13 df       	rcall	.-474    	; 0x777a <timegm>
    7954:	6b 01       	movw	r12, r22
    7956:	7c 01       	movw	r14, r24
    7958:	6c 8f       	std	Y+28, r22	; 0x1c
    795a:	7d 8f       	std	Y+29, r23	; 0x1d
    795c:	8e 8f       	std	Y+30, r24	; 0x1e
    795e:	9f 8f       	std	Y+31, r25	; 0x1f
    7960:	18 a2       	std	Y+32, r1	; 0x20
    7962:	19 a2       	std	Y+33, r1	; 0x21
    7964:	1a a2       	std	Y+34, r1	; 0x22
    7966:	1b a2       	std	Y+35, r1	; 0x23
    7968:	be 01       	movw	r22, r28
    796a:	64 5e       	subi	r22, 0xE4	; 228
    796c:	7f 4f       	sbci	r23, 0xFF	; 255
    796e:	80 e0       	ldi	r24, 0x00	; 0
    7970:	90 e0       	ldi	r25, 0x00	; 0
    7972:	03 db       	rcall	.-2554   	; 0x6f7a <clock_settime>
    7974:	b7 01       	movw	r22, r14
    7976:	a6 01       	movw	r20, r12
    7978:	81 e0       	ldi	r24, 0x01	; 1
    797a:	90 e0       	ldi	r25, 0x00	; 0
    797c:	0e 94 3d 32 	call	0x647a	; 0x647a <rtc_init>
    7980:	81 11       	cpse	r24, r1
    7982:	0d c0       	rjmp	.+26     	; 0x799e <setdate_r+0x21c>
    7984:	83 ed       	ldi	r24, 0xD3	; 211
    7986:	97 e0       	ldi	r25, 0x07	; 7
    7988:	a0 e0       	ldi	r26, 0x00	; 0
    798a:	ed b7       	in	r30, 0x3d	; 61
    798c:	fe b7       	in	r31, 0x3e	; 62
    798e:	81 83       	std	Z+1, r24	; 0x01
    7990:	92 83       	std	Z+2, r25	; 0x02
    7992:	a3 83       	std	Z+3, r26	; 0x03
    7994:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    7998:	8f ef       	ldi	r24, 0xFF	; 255
    799a:	9f ef       	ldi	r25, 0xFF	; 255
    799c:	02 c0       	rjmp	.+4      	; 0x79a2 <setdate_r+0x220>
    799e:	80 e0       	ldi	r24, 0x00	; 0
    79a0:	90 e0       	ldi	r25, 0x00	; 0
    79a2:	a5 96       	adiw	r28, 0x25	; 37
    79a4:	0f b6       	in	r0, 0x3f	; 63
    79a6:	f8 94       	cli
    79a8:	de bf       	out	0x3e, r29	; 62
    79aa:	0f be       	out	0x3f, r0	; 63
    79ac:	cd bf       	out	0x3d, r28	; 61
    79ae:	df 91       	pop	r29
    79b0:	cf 91       	pop	r28
    79b2:	ff 90       	pop	r15
    79b4:	ef 90       	pop	r14
    79b6:	df 90       	pop	r13
    79b8:	cf 90       	pop	r12
    79ba:	08 95       	ret

000079bc <setdate>:
    79bc:	ab e2       	ldi	r26, 0x2B	; 43
    79be:	b0 e0       	ldi	r27, 0x00	; 0
    79c0:	e4 ee       	ldi	r30, 0xE4	; 228
    79c2:	fc e3       	ldi	r31, 0x3C	; 60
    79c4:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    79c8:	81 e4       	ldi	r24, 0x41	; 65
    79ca:	98 e0       	ldi	r25, 0x08	; 8
    79cc:	a0 e0       	ldi	r26, 0x00	; 0
    79ce:	ed b7       	in	r30, 0x3d	; 61
    79d0:	fe b7       	in	r31, 0x3e	; 62
    79d2:	81 83       	std	Z+1, r24	; 0x01
    79d4:	92 83       	std	Z+2, r25	; 0x02
    79d6:	a3 83       	std	Z+3, r26	; 0x03
    79d8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    79dc:	40 91 cb 1c 	lds	r20, 0x1CCB	; 0x801ccb <__iob>
    79e0:	50 91 cc 1c 	lds	r21, 0x1CCC	; 0x801ccc <__iob+0x1>
    79e4:	66 e2       	ldi	r22, 0x26	; 38
    79e6:	70 e0       	ldi	r23, 0x00	; 0
    79e8:	ce 01       	movw	r24, r28
    79ea:	04 96       	adiw	r24, 0x04	; 4
    79ec:	0e 94 f5 77 	call	0xefea	; 0xefea <fgets>
    79f0:	ce 01       	movw	r24, r28
    79f2:	04 96       	adiw	r24, 0x04	; 4
    79f4:	c6 de       	rcall	.-628    	; 0x7782 <setdate_r>
    79f6:	ab 96       	adiw	r28, 0x2b	; 43
    79f8:	e2 e0       	ldi	r30, 0x02	; 2
    79fa:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000079fe <find_dst>:
    79fe:	a8 e2       	ldi	r26, 0x28	; 40
    7a00:	b0 e0       	ldi	r27, 0x00	; 0
    7a02:	e5 e0       	ldi	r30, 0x05	; 5
    7a04:	fd e3       	ldi	r31, 0x3D	; 61
    7a06:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    7a0a:	3c 01       	movw	r6, r24
    7a0c:	1a 01       	movw	r2, r20
    7a0e:	2b 01       	movw	r4, r22
    7a10:	49 01       	movw	r8, r18
    7a12:	1c a3       	std	Y+36, r17	; 0x24
    7a14:	0b a3       	std	Y+35, r16	; 0x23
    7a16:	de a2       	std	Y+38, r13	; 0x26
    7a18:	cd a2       	std	Y+37, r12	; 0x25
    7a1a:	b8 a6       	std	Y+40, r11	; 0x28
    7a1c:	af a2       	std	Y+39, r10	; 0x27
    7a1e:	be 01       	movw	r22, r28
    7a20:	61 5e       	subi	r22, 0xE1	; 225
    7a22:	7f 4f       	sbci	r23, 0xFF	; 255
    7a24:	ce 01       	movw	r24, r28
    7a26:	47 96       	adiw	r24, 0x17	; 23
    7a28:	15 dc       	rcall	.-2006   	; 0x7254 <gettimeofday>
    7a2a:	af 8d       	ldd	r26, Y+31	; 0x1f
    7a2c:	b8 a1       	ldd	r27, Y+32	; 0x20
    7a2e:	2c e3       	ldi	r18, 0x3C	; 60
    7a30:	30 e0       	ldi	r19, 0x00	; 0
    7a32:	0e 94 c3 e3 	call	0x1c786	; 0x1c786 <__usmulhisi3>
    7a36:	5b 01       	movw	r10, r22
    7a38:	6c 01       	movw	r12, r24
    7a3a:	61 14       	cp	r6, r1
    7a3c:	71 04       	cpc	r7, r1
    7a3e:	31 f0       	breq	.+12     	; 0x7a4c <find_dst+0x4e>
    7a40:	20 e1       	ldi	r18, 0x10	; 16
    7a42:	a2 1a       	sub	r10, r18
    7a44:	2e e0       	ldi	r18, 0x0E	; 14
    7a46:	b2 0a       	sbc	r11, r18
    7a48:	c1 08       	sbc	r12, r1
    7a4a:	d1 08       	sbc	r13, r1
    7a4c:	81 14       	cp	r8, r1
    7a4e:	91 04       	cpc	r9, r1
    7a50:	39 f0       	breq	.+14     	; 0x7a60 <find_dst+0x62>
    7a52:	4c e6       	ldi	r20, 0x6C	; 108
    7a54:	84 1a       	sub	r8, r20
    7a56:	47 e0       	ldi	r20, 0x07	; 7
    7a58:	94 0a       	sbc	r9, r20
    7a5a:	9c 86       	std	Y+12, r9	; 0x0c
    7a5c:	8b 86       	std	Y+11, r8	; 0x0b
    7a5e:	11 c0       	rjmp	.+34     	; 0x7a82 <find_dst+0x84>
    7a60:	21 14       	cp	r2, r1
    7a62:	31 04       	cpc	r3, r1
    7a64:	41 04       	cpc	r4, r1
    7a66:	51 04       	cpc	r5, r1
    7a68:	21 f4       	brne	.+8      	; 0x7a72 <find_dst+0x74>
    7a6a:	2f 88       	ldd	r2, Y+23	; 0x17
    7a6c:	38 8c       	ldd	r3, Y+24	; 0x18
    7a6e:	49 8c       	ldd	r4, Y+25	; 0x19
    7a70:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7a72:	8e 01       	movw	r16, r28
    7a74:	0f 5f       	subi	r16, 0xFF	; 255
    7a76:	1f 4f       	sbci	r17, 0xFF	; 255
    7a78:	a6 01       	movw	r20, r12
    7a7a:	95 01       	movw	r18, r10
    7a7c:	c2 01       	movw	r24, r4
    7a7e:	b1 01       	movw	r22, r2
    7a80:	ca da       	rcall	.-2668   	; 0x7016 <time_to_tm>
    7a82:	8b a1       	ldd	r24, Y+35	; 0x23
    7a84:	9c a1       	ldd	r25, Y+36	; 0x24
    7a86:	01 97       	sbiw	r24, 0x01	; 1
    7a88:	9a 87       	std	Y+10, r25	; 0x0a
    7a8a:	89 87       	std	Y+9, r24	; 0x09
    7a8c:	81 e0       	ldi	r24, 0x01	; 1
    7a8e:	90 e0       	ldi	r25, 0x00	; 0
    7a90:	98 87       	std	Y+8, r25	; 0x08
    7a92:	8f 83       	std	Y+7, r24	; 0x07
    7a94:	8f a1       	ldd	r24, Y+39	; 0x27
    7a96:	98 a5       	ldd	r25, Y+40	; 0x28
    7a98:	9e 83       	std	Y+6, r25	; 0x06
    7a9a:	8d 83       	std	Y+5, r24	; 0x05
    7a9c:	1c 82       	std	Y+4, r1	; 0x04
    7a9e:	1b 82       	std	Y+3, r1	; 0x03
    7aa0:	1a 82       	std	Y+2, r1	; 0x02
    7aa2:	19 82       	std	Y+1, r1	; 0x01
    7aa4:	ce 01       	movw	r24, r28
    7aa6:	01 96       	adiw	r24, 0x01	; 1
    7aa8:	68 de       	rcall	.-816    	; 0x777a <timegm>
    7aaa:	45 01       	movw	r8, r10
    7aac:	56 01       	movw	r10, r12
    7aae:	86 0e       	add	r8, r22
    7ab0:	97 1e       	adc	r9, r23
    7ab2:	a8 1e       	adc	r10, r24
    7ab4:	b9 1e       	adc	r11, r25
    7ab6:	8e 01       	movw	r16, r28
    7ab8:	0f 5f       	subi	r16, 0xFF	; 255
    7aba:	1f 4f       	sbci	r17, 0xFF	; 255
    7abc:	20 e0       	ldi	r18, 0x00	; 0
    7abe:	30 e0       	ldi	r19, 0x00	; 0
    7ac0:	a9 01       	movw	r20, r18
    7ac2:	c5 01       	movw	r24, r10
    7ac4:	b4 01       	movw	r22, r8
    7ac6:	a7 da       	rcall	.-2738   	; 0x7016 <time_to_tm>
    7ac8:	2d 85       	ldd	r18, Y+13	; 0x0d
    7aca:	3e 85       	ldd	r19, Y+14	; 0x0e
    7acc:	e7 e0       	ldi	r30, 0x07	; 7
    7ace:	f0 e0       	ldi	r31, 0x00	; 0
    7ad0:	c9 01       	movw	r24, r18
    7ad2:	bf 01       	movw	r22, r30
    7ad4:	0e 94 69 e3 	call	0x1c6d2	; 0x1c6d2 <__divmodhi4>
    7ad8:	4d a1       	ldd	r20, Y+37	; 0x25
    7ada:	5e a1       	ldd	r21, Y+38	; 0x26
    7adc:	48 17       	cp	r20, r24
    7ade:	59 07       	cpc	r21, r25
    7ae0:	21 f4       	brne	.+8      	; 0x7aea <find_dst+0xec>
    7ae2:	51 e0       	ldi	r21, 0x01	; 1
    7ae4:	e5 1a       	sub	r14, r21
    7ae6:	f1 08       	sbc	r15, r1
    7ae8:	51 f0       	breq	.+20     	; 0x7afe <find_dst+0x100>
    7aea:	80 e8       	ldi	r24, 0x80	; 128
    7aec:	88 0e       	add	r8, r24
    7aee:	81 e5       	ldi	r24, 0x51	; 81
    7af0:	98 1e       	adc	r9, r24
    7af2:	81 e0       	ldi	r24, 0x01	; 1
    7af4:	a8 1e       	adc	r10, r24
    7af6:	b1 1c       	adc	r11, r1
    7af8:	2f 5f       	subi	r18, 0xFF	; 255
    7afa:	3f 4f       	sbci	r19, 0xFF	; 255
    7afc:	e9 cf       	rjmp	.-46     	; 0x7ad0 <find_dst+0xd2>
    7afe:	c5 01       	movw	r24, r10
    7b00:	b4 01       	movw	r22, r8
    7b02:	a8 96       	adiw	r28, 0x28	; 40
    7b04:	e2 e1       	ldi	r30, 0x12	; 18
    7b06:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

00007b0a <set_dst>:
    7b0a:	4f 92       	push	r4
    7b0c:	5f 92       	push	r5
    7b0e:	6f 92       	push	r6
    7b10:	7f 92       	push	r7
    7b12:	af 92       	push	r10
    7b14:	bf 92       	push	r11
    7b16:	cf 92       	push	r12
    7b18:	df 92       	push	r13
    7b1a:	ef 92       	push	r14
    7b1c:	ff 92       	push	r15
    7b1e:	0f 93       	push	r16
    7b20:	1f 93       	push	r17
    7b22:	cf 93       	push	r28
    7b24:	df 93       	push	r29
    7b26:	cd b7       	in	r28, 0x3d	; 61
    7b28:	de b7       	in	r29, 0x3e	; 62
    7b2a:	2c 97       	sbiw	r28, 0x0c	; 12
    7b2c:	0f b6       	in	r0, 0x3f	; 63
    7b2e:	f8 94       	cli
    7b30:	de bf       	out	0x3e, r29	; 62
    7b32:	0f be       	out	0x3f, r0	; 63
    7b34:	cd bf       	out	0x3d, r28	; 61
    7b36:	2b 01       	movw	r4, r22
    7b38:	3c 01       	movw	r6, r24
    7b3a:	67 2b       	or	r22, r23
    7b3c:	68 2b       	or	r22, r24
    7b3e:	69 2b       	or	r22, r25
    7b40:	51 f4       	brne	.+20     	; 0x7b56 <set_dst+0x4c>
    7b42:	be 01       	movw	r22, r28
    7b44:	67 5f       	subi	r22, 0xF7	; 247
    7b46:	7f 4f       	sbci	r23, 0xFF	; 255
    7b48:	ce 01       	movw	r24, r28
    7b4a:	01 96       	adiw	r24, 0x01	; 1
    7b4c:	83 db       	rcall	.-2298   	; 0x7254 <gettimeofday>
    7b4e:	49 80       	ldd	r4, Y+1	; 0x01
    7b50:	5a 80       	ldd	r5, Y+2	; 0x02
    7b52:	6b 80       	ldd	r6, Y+3	; 0x03
    7b54:	7c 80       	ldd	r7, Y+4	; 0x04
    7b56:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <dst+0x8>
    7b5a:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <dst+0x9>
    7b5e:	a0 91 8a 1a 	lds	r26, 0x1A8A	; 0x801a8a <dst+0xa>
    7b62:	b0 91 8b 1a 	lds	r27, 0x1A8B	; 0x801a8b <dst+0xb>
    7b66:	84 15       	cp	r24, r4
    7b68:	95 05       	cpc	r25, r5
    7b6a:	a6 05       	cpc	r26, r6
    7b6c:	b7 05       	cpc	r27, r7
    7b6e:	50 f0       	brcs	.+20     	; 0x7b84 <set_dst+0x7a>
    7b70:	84 19       	sub	r24, r4
    7b72:	95 09       	sbc	r25, r5
    7b74:	a6 09       	sbc	r26, r6
    7b76:	b7 09       	sbc	r27, r7
    7b78:	80 38       	cpi	r24, 0x80	; 128
    7b7a:	91 45       	sbci	r25, 0x51	; 81
    7b7c:	a1 40       	sbci	r26, 0x01	; 1
    7b7e:	b1 05       	cpc	r27, r1
    7b80:	70 f4       	brcc	.+28     	; 0x7b9e <set_dst+0x94>
    7b82:	42 c0       	rjmp	.+132    	; 0x7c08 <set_dst+0xfe>
    7b84:	a3 01       	movw	r20, r6
    7b86:	92 01       	movw	r18, r4
    7b88:	28 1b       	sub	r18, r24
    7b8a:	39 0b       	sbc	r19, r25
    7b8c:	4a 0b       	sbc	r20, r26
    7b8e:	5b 0b       	sbc	r21, r27
    7b90:	da 01       	movw	r26, r20
    7b92:	c9 01       	movw	r24, r18
    7b94:	80 38       	cpi	r24, 0x80	; 128
    7b96:	91 45       	sbci	r25, 0x51	; 81
    7b98:	a1 40       	sbci	r26, 0x01	; 1
    7b9a:	b1 05       	cpc	r27, r1
    7b9c:	a8 f1       	brcs	.+106    	; 0x7c08 <set_dst+0xfe>
    7b9e:	40 92 88 1a 	sts	0x1A88, r4	; 0x801a88 <dst+0x8>
    7ba2:	50 92 89 1a 	sts	0x1A89, r5	; 0x801a89 <dst+0x9>
    7ba6:	60 92 8a 1a 	sts	0x1A8A, r6	; 0x801a8a <dst+0xa>
    7baa:	70 92 8b 1a 	sts	0x1A8B, r7	; 0x801a8b <dst+0xb>
    7bae:	82 e0       	ldi	r24, 0x02	; 2
    7bb0:	a8 2e       	mov	r10, r24
    7bb2:	b1 2c       	mov	r11, r1
    7bb4:	c1 2c       	mov	r12, r1
    7bb6:	d1 2c       	mov	r13, r1
    7bb8:	92 e0       	ldi	r25, 0x02	; 2
    7bba:	e9 2e       	mov	r14, r25
    7bbc:	f1 2c       	mov	r15, r1
    7bbe:	03 e0       	ldi	r16, 0x03	; 3
    7bc0:	10 e0       	ldi	r17, 0x00	; 0
    7bc2:	20 e0       	ldi	r18, 0x00	; 0
    7bc4:	30 e0       	ldi	r19, 0x00	; 0
    7bc6:	b3 01       	movw	r22, r6
    7bc8:	a2 01       	movw	r20, r4
    7bca:	80 e0       	ldi	r24, 0x00	; 0
    7bcc:	90 e0       	ldi	r25, 0x00	; 0
    7bce:	17 df       	rcall	.-466    	; 0x79fe <find_dst>
    7bd0:	60 93 80 1a 	sts	0x1A80, r22	; 0x801a80 <dst>
    7bd4:	70 93 81 1a 	sts	0x1A81, r23	; 0x801a81 <dst+0x1>
    7bd8:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <dst+0x2>
    7bdc:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <dst+0x3>
    7be0:	ee 24       	eor	r14, r14
    7be2:	e3 94       	inc	r14
    7be4:	f1 2c       	mov	r15, r1
    7be6:	0b e0       	ldi	r16, 0x0B	; 11
    7be8:	10 e0       	ldi	r17, 0x00	; 0
    7bea:	20 e0       	ldi	r18, 0x00	; 0
    7bec:	30 e0       	ldi	r19, 0x00	; 0
    7bee:	b3 01       	movw	r22, r6
    7bf0:	a2 01       	movw	r20, r4
    7bf2:	81 e0       	ldi	r24, 0x01	; 1
    7bf4:	90 e0       	ldi	r25, 0x00	; 0
    7bf6:	03 df       	rcall	.-506    	; 0x79fe <find_dst>
    7bf8:	60 93 84 1a 	sts	0x1A84, r22	; 0x801a84 <dst+0x4>
    7bfc:	70 93 85 1a 	sts	0x1A85, r23	; 0x801a85 <dst+0x5>
    7c00:	80 93 86 1a 	sts	0x1A86, r24	; 0x801a86 <dst+0x6>
    7c04:	90 93 87 1a 	sts	0x1A87, r25	; 0x801a87 <dst+0x7>
    7c08:	2c 96       	adiw	r28, 0x0c	; 12
    7c0a:	0f b6       	in	r0, 0x3f	; 63
    7c0c:	f8 94       	cli
    7c0e:	de bf       	out	0x3e, r29	; 62
    7c10:	0f be       	out	0x3f, r0	; 63
    7c12:	cd bf       	out	0x3d, r28	; 61
    7c14:	df 91       	pop	r29
    7c16:	cf 91       	pop	r28
    7c18:	1f 91       	pop	r17
    7c1a:	0f 91       	pop	r16
    7c1c:	ff 90       	pop	r15
    7c1e:	ef 90       	pop	r14
    7c20:	df 90       	pop	r13
    7c22:	cf 90       	pop	r12
    7c24:	bf 90       	pop	r11
    7c26:	af 90       	pop	r10
    7c28:	7f 90       	pop	r7
    7c2a:	6f 90       	pop	r6
    7c2c:	5f 90       	pop	r5
    7c2e:	4f 90       	pop	r4
    7c30:	08 95       	ret

00007c32 <asctime_r>:
    7c32:	a5 e1       	ldi	r26, 0x15	; 21
    7c34:	b0 e0       	ldi	r27, 0x00	; 0
    7c36:	ef e1       	ldi	r30, 0x1F	; 31
    7c38:	fe e3       	ldi	r31, 0x3E	; 62
    7c3a:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    7c3e:	ec 01       	movw	r28, r24
    7c40:	8b 01       	movw	r16, r22
    7c42:	60 e0       	ldi	r22, 0x00	; 0
    7c44:	70 e0       	ldi	r23, 0x00	; 0
    7c46:	d1 db       	rcall	.-2142   	; 0x73ea <normalize>
    7c48:	80 e2       	ldi	r24, 0x20	; 32
    7c4a:	f8 01       	movw	r30, r16
    7c4c:	11 92       	st	Z+, r1
    7c4e:	8a 95       	dec	r24
    7c50:	e9 f7       	brne	.-6      	; 0x7c4c <asctime_r+0x1a>
    7c52:	8a 85       	ldd	r24, Y+10	; 0x0a
    7c54:	9b 85       	ldd	r25, Y+11	; 0x0b
    7c56:	84 59       	subi	r24, 0x94	; 148
    7c58:	98 4f       	sbci	r25, 0xF8	; 248
    7c5a:	ed b7       	in	r30, 0x3d	; 61
    7c5c:	fe b7       	in	r31, 0x3e	; 62
    7c5e:	95 8b       	std	Z+21, r25	; 0x15
    7c60:	84 8b       	std	Z+20, r24	; 0x14
    7c62:	88 81       	ld	r24, Y
    7c64:	99 81       	ldd	r25, Y+1	; 0x01
    7c66:	93 8b       	std	Z+19, r25	; 0x13
    7c68:	82 8b       	std	Z+18, r24	; 0x12
    7c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    7c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    7c6e:	91 8b       	std	Z+17, r25	; 0x11
    7c70:	80 8b       	std	Z+16, r24	; 0x10
    7c72:	8c 81       	ldd	r24, Y+4	; 0x04
    7c74:	9d 81       	ldd	r25, Y+5	; 0x05
    7c76:	97 87       	std	Z+15, r25	; 0x0f
    7c78:	86 87       	std	Z+14, r24	; 0x0e
    7c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    7c7c:	9f 81       	ldd	r25, Y+7	; 0x07
    7c7e:	95 87       	std	Z+13, r25	; 0x0d
    7c80:	84 87       	std	Z+12, r24	; 0x0c
    7c82:	e8 85       	ldd	r30, Y+8	; 0x08
    7c84:	f9 85       	ldd	r31, Y+9	; 0x09
    7c86:	ee 0f       	add	r30, r30
    7c88:	ff 1f       	adc	r31, r31
    7c8a:	e5 5f       	subi	r30, 0xF5	; 245
    7c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    7c8e:	80 81       	ld	r24, Z
    7c90:	91 81       	ldd	r25, Z+1	; 0x01
    7c92:	ed b7       	in	r30, 0x3d	; 61
    7c94:	fe b7       	in	r31, 0x3e	; 62
    7c96:	93 87       	std	Z+11, r25	; 0x0b
    7c98:	82 87       	std	Z+10, r24	; 0x0a
    7c9a:	ec 85       	ldd	r30, Y+12	; 0x0c
    7c9c:	fd 85       	ldd	r31, Y+13	; 0x0d
    7c9e:	ee 0f       	add	r30, r30
    7ca0:	ff 1f       	adc	r31, r31
    7ca2:	eb 5d       	subi	r30, 0xDB	; 219
    7ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    7ca6:	80 81       	ld	r24, Z
    7ca8:	91 81       	ldd	r25, Z+1	; 0x01
    7caa:	ed b7       	in	r30, 0x3d	; 61
    7cac:	fe b7       	in	r31, 0x3e	; 62
    7cae:	91 87       	std	Z+9, r25	; 0x09
    7cb0:	80 87       	std	Z+8, r24	; 0x08
    7cb2:	82 e6       	ldi	r24, 0x62	; 98
    7cb4:	98 e0       	ldi	r25, 0x08	; 8
    7cb6:	a0 e0       	ldi	r26, 0x00	; 0
    7cb8:	85 83       	std	Z+5, r24	; 0x05
    7cba:	96 83       	std	Z+6, r25	; 0x06
    7cbc:	a7 83       	std	Z+7, r26	; 0x07
    7cbe:	80 e2       	ldi	r24, 0x20	; 32
    7cc0:	90 e0       	ldi	r25, 0x00	; 0
    7cc2:	94 83       	std	Z+4, r25	; 0x04
    7cc4:	83 83       	std	Z+3, r24	; 0x03
    7cc6:	12 83       	std	Z+2, r17	; 0x02
    7cc8:	01 83       	std	Z+1, r16	; 0x01
    7cca:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <snprintf_P>
    7cce:	c8 01       	movw	r24, r16
    7cd0:	cd b7       	in	r28, 0x3d	; 61
    7cd2:	de b7       	in	r29, 0x3e	; 62
    7cd4:	65 96       	adiw	r28, 0x15	; 21
    7cd6:	e4 e0       	ldi	r30, 0x04	; 4
    7cd8:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00007cdc <asctime>:
    7cdc:	6c e0       	ldi	r22, 0x0C	; 12
    7cde:	78 e1       	ldi	r23, 0x18	; 24
    7ce0:	a8 cf       	rjmp	.-176    	; 0x7c32 <asctime_r>
    7ce2:	08 95       	ret

00007ce4 <ctime_gm>:
    7ce4:	a6 e1       	ldi	r26, 0x16	; 22
    7ce6:	b0 e0       	ldi	r27, 0x00	; 0
    7ce8:	e8 e7       	ldi	r30, 0x78	; 120
    7cea:	fe e3       	ldi	r31, 0x3E	; 62
    7cec:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    7cf0:	be 01       	movw	r22, r28
    7cf2:	6f 5f       	subi	r22, 0xFF	; 255
    7cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    7cf6:	6d da       	rcall	.-2854   	; 0x71d2 <gmtime_r>
    7cf8:	6c ee       	ldi	r22, 0xEC	; 236
    7cfa:	77 e1       	ldi	r23, 0x17	; 23
    7cfc:	9a df       	rcall	.-204    	; 0x7c32 <asctime_r>
    7cfe:	66 96       	adiw	r28, 0x16	; 22
    7d00:	e2 e0       	ldi	r30, 0x02	; 2
    7d02:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00007d06 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7d06:	a5 e2       	ldi	r26, 0x25	; 37
    7d08:	b0 e0       	ldi	r27, 0x00	; 0
    7d0a:	e9 e8       	ldi	r30, 0x89	; 137
    7d0c:	fe e3       	ldi	r31, 0x3E	; 62
    7d0e:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    7d12:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7d14:	40 e0       	ldi	r20, 0x00	; 0
    7d16:	50 e0       	ldi	r21, 0x00	; 0
    7d18:	ba 01       	movw	r22, r20
    7d1a:	80 e0       	ldi	r24, 0x00	; 0
    7d1c:	90 e0       	ldi	r25, 0x00	; 0
    7d1e:	0e 94 3d 32 	call	0x647a	; 0x647a <rtc_init>
    7d22:	81 11       	cpse	r24, r1
    7d24:	27 c0       	rjmp	.+78     	; 0x7d74 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7d26:	81 ec       	ldi	r24, 0xC1	; 193
    7d28:	97 e0       	ldi	r25, 0x07	; 7
    7d2a:	a0 e0       	ldi	r26, 0x00	; 0
    7d2c:	ed b7       	in	r30, 0x3d	; 61
    7d2e:	fe b7       	in	r31, 0x3e	; 62
    7d30:	81 83       	std	Z+1, r24	; 0x01
    7d32:	92 83       	std	Z+2, r25	; 0x02
    7d34:	a3 83       	std	Z+3, r26	; 0x03
    7d36:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        printf("attempting rtc init\n");
    7d3a:	8c ea       	ldi	r24, 0xAC	; 172
    7d3c:	97 e0       	ldi	r25, 0x07	; 7
    7d3e:	a0 e0       	ldi	r26, 0x00	; 0
    7d40:	ed b7       	in	r30, 0x3d	; 61
    7d42:	fe b7       	in	r31, 0x3e	; 62
    7d44:	81 83       	std	Z+1, r24	; 0x01
    7d46:	92 83       	std	Z+2, r25	; 0x02
    7d48:	a3 83       	std	Z+3, r26	; 0x03
    7d4a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7d4e:	40 e0       	ldi	r20, 0x00	; 0
    7d50:	50 e0       	ldi	r21, 0x00	; 0
    7d52:	ba 01       	movw	r22, r20
    7d54:	81 e0       	ldi	r24, 0x01	; 1
    7d56:	90 e0       	ldi	r25, 0x00	; 0
    7d58:	0e 94 3d 32 	call	0x647a	; 0x647a <rtc_init>
    7d5c:	81 11       	cpse	r24, r1
    7d5e:	0a c0       	rjmp	.+20     	; 0x7d74 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7d60:	85 e9       	ldi	r24, 0x95	; 149
    7d62:	97 e0       	ldi	r25, 0x07	; 7
    7d64:	a0 e0       	ldi	r26, 0x00	; 0
    7d66:	ed b7       	in	r30, 0x3d	; 61
    7d68:	fe b7       	in	r31, 0x3e	; 62
    7d6a:	81 83       	std	Z+1, r24	; 0x01
    7d6c:	92 83       	std	Z+2, r25	; 0x02
    7d6e:	a3 83       	std	Z+3, r26	; 0x03
    7d70:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7d74:	ce 01       	movw	r24, r28
    7d76:	04 96       	adiw	r24, 0x04	; 4
    7d78:	0e 94 a3 31 	call	0x6346	; 0x6346 <rtc_read>
    7d7c:	88 23       	and	r24, r24
    7d7e:	51 f0       	breq	.+20     	; 0x7d94 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7d80:	ce 01       	movw	r24, r28
    7d82:	04 96       	adiw	r24, 0x04	; 4
    7d84:	fa dc       	rcall	.-1548   	; 0x777a <timegm>
    7d86:	6b 01       	movw	r12, r22
    7d88:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7d8a:	67 2b       	or	r22, r23
    7d8c:	68 2b       	or	r22, r24
    7d8e:	69 2b       	or	r22, r25
    7d90:	c1 f4       	brne	.+48     	; 0x7dc2 <initialize_clock+0xbc>
    7d92:	0a c0       	rjmp	.+20     	; 0x7da8 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7d94:	8b e7       	ldi	r24, 0x7B	; 123
    7d96:	97 e0       	ldi	r25, 0x07	; 7
    7d98:	a0 e0       	ldi	r26, 0x00	; 0
    7d9a:	ed b7       	in	r30, 0x3d	; 61
    7d9c:	fe b7       	in	r31, 0x3e	; 62
    7d9e:	81 83       	std	Z+1, r24	; 0x01
    7da0:	92 83       	std	Z+2, r25	; 0x02
    7da2:	a3 83       	std	Z+3, r26	; 0x03
    7da4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7da8:	87 e5       	ldi	r24, 0x57	; 87
    7daa:	97 e0       	ldi	r25, 0x07	; 7
    7dac:	a0 e0       	ldi	r26, 0x00	; 0
    7dae:	ed b7       	in	r30, 0x3d	; 61
    7db0:	fe b7       	in	r31, 0x3e	; 62
    7db2:	81 83       	std	Z+1, r24	; 0x01
    7db4:	92 83       	std	Z+2, r25	; 0x02
    7db6:	a3 83       	std	Z+3, r26	; 0x03
    7db8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    7dbc:	c1 2c       	mov	r12, r1
    7dbe:	d1 2c       	mov	r13, r1
    7dc0:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7dc2:	1b a3       	std	Y+35, r17	; 0x23
    7dc4:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7dc6:	1d a2       	std	Y+37, r1	; 0x25
    7dc8:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7dca:	ce 01       	movw	r24, r28
    7dcc:	82 96       	adiw	r24, 0x22	; 34
    7dce:	30 da       	rcall	.-2976   	; 0x7230 <settimezone>

    ts.tv_sec = seconds;
    7dd0:	ca 8e       	std	Y+26, r12	; 0x1a
    7dd2:	db 8e       	std	Y+27, r13	; 0x1b
    7dd4:	ec 8e       	std	Y+28, r14	; 0x1c
    7dd6:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7dd8:	1e 8e       	std	Y+30, r1	; 0x1e
    7dda:	1f 8e       	std	Y+31, r1	; 0x1f
    7ddc:	18 a2       	std	Y+32, r1	; 0x20
    7dde:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7de0:	be 01       	movw	r22, r28
    7de2:	66 5e       	subi	r22, 0xE6	; 230
    7de4:	7f 4f       	sbci	r23, 0xFF	; 255
    7de6:	80 e0       	ldi	r24, 0x00	; 0
    7de8:	90 e0       	ldi	r25, 0x00	; 0
    7dea:	c7 d8       	rcall	.-3698   	; 0x6f7a <clock_settime>
}
    7dec:	a5 96       	adiw	r28, 0x25	; 37
    7dee:	e8 e0       	ldi	r30, 0x08	; 8
    7df0:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

00007df4 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7df4:	a9 e2       	ldi	r26, 0x29	; 41
    7df6:	b0 e0       	ldi	r27, 0x00	; 0
    7df8:	e0 e0       	ldi	r30, 0x00	; 0
    7dfa:	ff e3       	ldi	r31, 0x3F	; 63
    7dfc:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7e00:	ce 01       	movw	r24, r28
    7e02:	08 96       	adiw	r24, 0x08	; 8
    7e04:	0e 94 a3 31 	call	0x6346	; 0x6346 <rtc_read>
    7e08:	88 23       	and	r24, r24
    7e0a:	29 f1       	breq	.+74     	; 0x7e56 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7e0c:	ce 01       	movw	r24, r28
    7e0e:	08 96       	adiw	r24, 0x08	; 8
    7e10:	b4 dc       	rcall	.-1688   	; 0x777a <timegm>
    7e12:	6e a3       	std	Y+38, r22	; 0x26
    7e14:	7f a3       	std	Y+39, r23	; 0x27
    7e16:	88 a7       	std	Y+40, r24	; 0x28
    7e18:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7e1a:	ed b7       	in	r30, 0x3d	; 61
    7e1c:	fe b7       	in	r31, 0x3e	; 62
    7e1e:	64 83       	std	Z+4, r22	; 0x04
    7e20:	75 83       	std	Z+5, r23	; 0x05
    7e22:	86 83       	std	Z+6, r24	; 0x06
    7e24:	97 83       	std	Z+7, r25	; 0x07
    7e26:	85 e4       	ldi	r24, 0x45	; 69
    7e28:	97 e0       	ldi	r25, 0x07	; 7
    7e2a:	a0 e0       	ldi	r26, 0x00	; 0
    7e2c:	81 83       	std	Z+1, r24	; 0x01
    7e2e:	92 83       	std	Z+2, r25	; 0x02
    7e30:	a3 83       	std	Z+3, r26	; 0x03
    7e32:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7e36:	ce 01       	movw	r24, r28
    7e38:	08 96       	adiw	r24, 0x08	; 8
    7e3a:	50 df       	rcall	.-352    	; 0x7cdc <asctime>
    7e3c:	ed b7       	in	r30, 0x3d	; 61
    7e3e:	fe b7       	in	r31, 0x3e	; 62
    7e40:	95 83       	std	Z+5, r25	; 0x05
    7e42:	84 83       	std	Z+4, r24	; 0x04
    7e44:	84 e3       	ldi	r24, 0x34	; 52
    7e46:	97 e0       	ldi	r25, 0x07	; 7
    7e48:	a0 e0       	ldi	r26, 0x00	; 0
    7e4a:	81 83       	std	Z+1, r24	; 0x01
    7e4c:	92 83       	std	Z+2, r25	; 0x02
    7e4e:	a3 83       	std	Z+3, r26	; 0x03
    7e50:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    7e54:	0a c0       	rjmp	.+20     	; 0x7e6a <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7e56:	83 e2       	ldi	r24, 0x23	; 35
    7e58:	97 e0       	ldi	r25, 0x07	; 7
    7e5a:	a0 e0       	ldi	r26, 0x00	; 0
    7e5c:	ed b7       	in	r30, 0x3d	; 61
    7e5e:	fe b7       	in	r31, 0x3e	; 62
    7e60:	81 83       	std	Z+1, r24	; 0x01
    7e62:	92 83       	std	Z+2, r25	; 0x02
    7e64:	a3 83       	std	Z+3, r26	; 0x03
    7e66:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7e6a:	be 01       	movw	r22, r28
    7e6c:	62 5e       	subi	r22, 0xE2	; 226
    7e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    7e70:	80 e0       	ldi	r24, 0x00	; 0
    7e72:	90 e0       	ldi	r25, 0x00	; 0
    7e74:	0e 94 14 35 	call	0x6a28	; 0x6a28 <clock_gettime>
    seconds = ts.tv_sec;
    7e78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7e7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7e7c:	a8 a1       	ldd	r26, Y+32	; 0x20
    7e7e:	b9 a1       	ldd	r27, Y+33	; 0x21
    7e80:	8e a3       	std	Y+38, r24	; 0x26
    7e82:	9f a3       	std	Y+39, r25	; 0x27
    7e84:	a8 a7       	std	Y+40, r26	; 0x28
    7e86:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7e88:	ed b7       	in	r30, 0x3d	; 61
    7e8a:	fe b7       	in	r31, 0x3e	; 62
    7e8c:	84 83       	std	Z+4, r24	; 0x04
    7e8e:	95 83       	std	Z+5, r25	; 0x05
    7e90:	a6 83       	std	Z+6, r26	; 0x06
    7e92:	b7 83       	std	Z+7, r27	; 0x07
    7e94:	81 e1       	ldi	r24, 0x11	; 17
    7e96:	97 e0       	ldi	r25, 0x07	; 7
    7e98:	a0 e0       	ldi	r26, 0x00	; 0
    7e9a:	81 83       	std	Z+1, r24	; 0x01
    7e9c:	92 83       	std	Z+2, r25	; 0x02
    7e9e:	a3 83       	std	Z+3, r26	; 0x03
    7ea0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7ea4:	ce 01       	movw	r24, r28
    7ea6:	86 96       	adiw	r24, 0x26	; 38
    7ea8:	a9 d9       	rcall	.-3246   	; 0x71fc <gmtime>
    7eaa:	18 df       	rcall	.-464    	; 0x7cdc <asctime>
    7eac:	ed b7       	in	r30, 0x3d	; 61
    7eae:	fe b7       	in	r31, 0x3e	; 62
    7eb0:	95 83       	std	Z+5, r25	; 0x05
    7eb2:	84 83       	std	Z+4, r24	; 0x04
    7eb4:	80 e0       	ldi	r24, 0x00	; 0
    7eb6:	97 e0       	ldi	r25, 0x07	; 7
    7eb8:	a0 e0       	ldi	r26, 0x00	; 0
    7eba:	81 83       	std	Z+1, r24	; 0x01
    7ebc:	92 83       	std	Z+2, r25	; 0x02
    7ebe:	a3 83       	std	Z+3, r26	; 0x03
    7ec0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
}
    7ec4:	a9 96       	adiw	r28, 0x29	; 41
    7ec6:	e2 e0       	ldi	r30, 0x02	; 2
    7ec8:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00007ecc <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7ecc:	fc 01       	movw	r30, r24
    7ece:	84 81       	ldd	r24, Z+4	; 0x04
    7ed0:	95 81       	ldd	r25, Z+5	; 0x05
    7ed2:	00 97       	sbiw	r24, 0x00	; 0
    7ed4:	79 f0       	breq	.+30     	; 0x7ef4 <_putc_buffer_fn+0x28>
    7ed6:	66 23       	and	r22, r22
    7ed8:	69 f0       	breq	.+26     	; 0x7ef4 <_putc_buffer_fn+0x28>
    7eda:	01 97       	sbiw	r24, 0x01	; 1
    7edc:	95 83       	std	Z+5, r25	; 0x05
    7ede:	84 83       	std	Z+4, r24	; 0x04
    7ee0:	86 81       	ldd	r24, Z+6	; 0x06
    7ee2:	97 81       	ldd	r25, Z+7	; 0x07
    7ee4:	01 96       	adiw	r24, 0x01	; 1
    7ee6:	97 83       	std	Z+7, r25	; 0x07
    7ee8:	86 83       	std	Z+6, r24	; 0x06
    7eea:	a2 81       	ldd	r26, Z+2	; 0x02
    7eec:	b3 81       	ldd	r27, Z+3	; 0x03
    7eee:	6d 93       	st	X+, r22
    7ef0:	b3 83       	std	Z+3, r27	; 0x03
    7ef2:	a2 83       	std	Z+2, r26	; 0x02
    7ef4:	02 80       	ldd	r0, Z+2	; 0x02
    7ef6:	f3 81       	ldd	r31, Z+3	; 0x03
    7ef8:	e0 2d       	mov	r30, r0
    7efa:	10 82       	st	Z, r1
    7efc:	08 95       	ret

00007efe <_putc_fn>:
    7efe:	fc 01       	movw	r30, r24
    7f00:	26 81       	ldd	r18, Z+6	; 0x06
    7f02:	37 81       	ldd	r19, Z+7	; 0x07
    7f04:	2f 5f       	subi	r18, 0xFF	; 255
    7f06:	3f 4f       	sbci	r19, 0xFF	; 255
    7f08:	37 83       	std	Z+7, r19	; 0x07
    7f0a:	26 83       	std	Z+6, r18	; 0x06
    7f0c:	86 2f       	mov	r24, r22
    7f0e:	90 e0       	ldi	r25, 0x00	; 0
    7f10:	0c 94 ef 77 	jmp	0xefde	; 0xefde <putchar>
    7f14:	08 95       	ret

00007f16 <bin2num>:
    7f16:	a0 e0       	ldi	r26, 0x00	; 0
    7f18:	b0 e0       	ldi	r27, 0x00	; 0
    7f1a:	e1 e9       	ldi	r30, 0x91	; 145
    7f1c:	ff e3       	ldi	r31, 0x3F	; 63
    7f1e:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__prologue_saves__+0xe>
    7f22:	ea 01       	movw	r28, r20
    7f24:	53 e0       	ldi	r21, 0x03	; 3
    7f26:	ee 0c       	add	r14, r14
    7f28:	ff 1c       	adc	r15, r15
    7f2a:	5a 95       	dec	r21
    7f2c:	e1 f7       	brne	.-8      	; 0x7f26 <bin2num+0x10>
    7f2e:	fc 01       	movw	r30, r24
    7f30:	af 01       	movw	r20, r30
    7f32:	48 1b       	sub	r20, r24
    7f34:	59 0b       	sbc	r21, r25
    7f36:	c4 17       	cp	r28, r20
    7f38:	d5 07       	cpc	r29, r21
    7f3a:	14 f0       	brlt	.+4      	; 0x7f40 <bin2num+0x2a>
    7f3c:	11 92       	st	Z+, r1
    7f3e:	f8 cf       	rjmp	.-16     	; 0x7f30 <bin2num+0x1a>
    7f40:	41 e0       	ldi	r20, 0x01	; 1
    7f42:	e4 1a       	sub	r14, r20
    7f44:	f1 08       	sbc	r15, r1
    7f46:	5b 01       	movw	r10, r22
    7f48:	42 e0       	ldi	r20, 0x02	; 2
    7f4a:	a4 1a       	sub	r10, r20
    7f4c:	b1 08       	sbc	r11, r1
    7f4e:	f7 fc       	sbrc	r15, 7
    7f50:	3b c0       	rjmp	.+118    	; 0x7fc8 <bin2num+0xb2>
    7f52:	f7 01       	movw	r30, r14
    7f54:	43 e0       	ldi	r20, 0x03	; 3
    7f56:	f5 95       	asr	r31
    7f58:	e7 95       	ror	r30
    7f5a:	4a 95       	dec	r20
    7f5c:	e1 f7       	brne	.-8      	; 0x7f56 <bin2num+0x40>
    7f5e:	e0 0f       	add	r30, r16
    7f60:	f1 1f       	adc	r31, r17
    7f62:	40 81       	ld	r20, Z
    7f64:	50 e0       	ldi	r21, 0x00	; 0
    7f66:	f7 01       	movw	r30, r14
    7f68:	e7 70       	andi	r30, 0x07	; 7
    7f6a:	ff 27       	eor	r31, r31
    7f6c:	02 c0       	rjmp	.+4      	; 0x7f72 <bin2num+0x5c>
    7f6e:	55 95       	asr	r21
    7f70:	47 95       	ror	r20
    7f72:	ea 95       	dec	r30
    7f74:	e2 f7       	brpl	.-8      	; 0x7f6e <bin2num+0x58>
    7f76:	41 70       	andi	r20, 0x01	; 1
    7f78:	55 27       	eor	r21, r21
    7f7a:	dc 01       	movw	r26, r24
    7f7c:	e0 e0       	ldi	r30, 0x00	; 0
    7f7e:	f0 e0       	ldi	r31, 0x00	; 0
    7f80:	ec 17       	cp	r30, r28
    7f82:	fd 07       	cpc	r31, r29
    7f84:	ec f4       	brge	.+58     	; 0x7fc0 <bin2num+0xaa>
    7f86:	ea 15       	cp	r30, r10
    7f88:	fb 05       	cpc	r31, r11
    7f8a:	4c f0       	brlt	.+18     	; 0x7f9e <bin2num+0x88>
    7f8c:	dc 01       	movw	r26, r24
    7f8e:	ae 0f       	add	r26, r30
    7f90:	bf 1f       	adc	r27, r31
    7f92:	1c 92       	st	X, r1
    7f94:	41 e0       	ldi	r20, 0x01	; 1
    7f96:	e4 1a       	sub	r14, r20
    7f98:	f1 08       	sbc	r15, r1
    7f9a:	ef 01       	movw	r28, r30
    7f9c:	d8 cf       	rjmp	.-80     	; 0x7f4e <bin2num+0x38>
    7f9e:	9c 90       	ld	r9, X
    7fa0:	99 0c       	add	r9, r9
    7fa2:	94 2a       	or	r9, r20
    7fa4:	49 2d       	mov	r20, r9
    7fa6:	50 e0       	ldi	r21, 0x00	; 0
    7fa8:	42 17       	cp	r20, r18
    7faa:	53 07       	cpc	r21, r19
    7fac:	24 f0       	brlt	.+8      	; 0x7fb6 <bin2num+0xa0>
    7fae:	92 1a       	sub	r9, r18
    7fb0:	41 e0       	ldi	r20, 0x01	; 1
    7fb2:	50 e0       	ldi	r21, 0x00	; 0
    7fb4:	02 c0       	rjmp	.+4      	; 0x7fba <bin2num+0xa4>
    7fb6:	40 e0       	ldi	r20, 0x00	; 0
    7fb8:	50 e0       	ldi	r21, 0x00	; 0
    7fba:	9d 92       	st	X+, r9
    7fbc:	31 96       	adiw	r30, 0x01	; 1
    7fbe:	e0 cf       	rjmp	.-64     	; 0x7f80 <bin2num+0x6a>
    7fc0:	41 15       	cp	r20, r1
    7fc2:	51 05       	cpc	r21, r1
    7fc4:	01 f7       	brne	.-64     	; 0x7f86 <bin2num+0x70>
    7fc6:	e2 cf       	rjmp	.-60     	; 0x7f8c <bin2num+0x76>
    7fc8:	fc 01       	movw	r30, r24
    7fca:	9f 01       	movw	r18, r30
    7fcc:	28 1b       	sub	r18, r24
    7fce:	39 0b       	sbc	r19, r25
    7fd0:	2c 17       	cp	r18, r28
    7fd2:	3d 07       	cpc	r19, r29
    7fd4:	4c f4       	brge	.+18     	; 0x7fe8 <bin2num+0xd2>
    7fd6:	20 81       	ld	r18, Z
    7fd8:	2a 30       	cpi	r18, 0x0A	; 10
    7fda:	10 f4       	brcc	.+4      	; 0x7fe0 <bin2num+0xca>
    7fdc:	20 5d       	subi	r18, 0xD0	; 208
    7fde:	01 c0       	rjmp	.+2      	; 0x7fe2 <bin2num+0xcc>
    7fe0:	29 5a       	subi	r18, 0xA9	; 169
    7fe2:	20 83       	st	Z, r18
    7fe4:	31 96       	adiw	r30, 0x01	; 1
    7fe6:	f1 cf       	rjmp	.-30     	; 0x7fca <bin2num+0xb4>
    7fe8:	9e 01       	movw	r18, r28
    7fea:	d7 ff       	sbrs	r29, 7
    7fec:	02 c0       	rjmp	.+4      	; 0x7ff2 <bin2num+0xdc>
    7fee:	20 e0       	ldi	r18, 0x00	; 0
    7ff0:	30 e0       	ldi	r19, 0x00	; 0
    7ff2:	c1 14       	cp	r12, r1
    7ff4:	d1 04       	cpc	r13, r1
    7ff6:	61 f0       	breq	.+24     	; 0x8010 <bin2num+0xfa>
    7ff8:	61 50       	subi	r22, 0x01	; 1
    7ffa:	71 09       	sbc	r23, r1
    7ffc:	26 17       	cp	r18, r22
    7ffe:	37 07       	cpc	r19, r23
    8000:	3c f4       	brge	.+14     	; 0x8010 <bin2num+0xfa>
    8002:	fc 01       	movw	r30, r24
    8004:	e2 0f       	add	r30, r18
    8006:	f3 1f       	adc	r31, r19
    8008:	c0 82       	st	Z, r12
    800a:	21 96       	adiw	r28, 0x01	; 1
    800c:	2f 5f       	subi	r18, 0xFF	; 255
    800e:	3f 4f       	sbci	r19, 0xFF	; 255
    8010:	fc 01       	movw	r30, r24
    8012:	e2 0f       	add	r30, r18
    8014:	f3 1f       	adc	r31, r19
    8016:	10 82       	st	Z, r1
    8018:	0e 94 cb 32 	call	0x6596	; 0x6596 <reverse>
    801c:	ce 01       	movw	r24, r28
    801e:	cd b7       	in	r28, 0x3d	; 61
    8020:	de b7       	in	r29, 0x3e	; 62
    8022:	eb e0       	ldi	r30, 0x0B	; 11
    8024:	0c 94 0c e4 	jmp	0x1c818	; 0x1c818 <__epilogue_restores__+0xe>

00008028 <pch>:
    8028:	fc 01       	movw	r30, r24
    802a:	22 81       	ldd	r18, Z+2	; 0x02
    802c:	33 81       	ldd	r19, Z+3	; 0x03
    802e:	44 81       	ldd	r20, Z+4	; 0x04
    8030:	55 81       	ldd	r21, Z+5	; 0x05
    8032:	80 81       	ld	r24, Z
    8034:	91 81       	ldd	r25, Z+1	; 0x01
    8036:	24 17       	cp	r18, r20
    8038:	35 07       	cpc	r19, r21
    803a:	54 f4       	brge	.+20     	; 0x8050 <pch+0x28>
    803c:	a9 01       	movw	r20, r18
    803e:	4f 5f       	subi	r20, 0xFF	; 255
    8040:	5f 4f       	sbci	r21, 0xFF	; 255
    8042:	53 83       	std	Z+3, r21	; 0x03
    8044:	42 83       	std	Z+2, r20	; 0x02
    8046:	dc 01       	movw	r26, r24
    8048:	a2 0f       	add	r26, r18
    804a:	b3 1f       	adc	r27, r19
    804c:	6c 93       	st	X, r22
    804e:	04 c0       	rjmp	.+8      	; 0x8058 <pch+0x30>
    8050:	dc 01       	movw	r26, r24
    8052:	a2 0f       	add	r26, r18
    8054:	b3 1f       	adc	r27, r19
    8056:	1c 92       	st	X, r1
    8058:	82 81       	ldd	r24, Z+2	; 0x02
    805a:	93 81       	ldd	r25, Z+3	; 0x03
    805c:	08 95       	ret

0000805e <p_ntoa>:
    805e:	af 92       	push	r10
    8060:	cf 92       	push	r12
    8062:	df 92       	push	r13
    8064:	ef 92       	push	r14
    8066:	ff 92       	push	r15
    8068:	0f 93       	push	r16
    806a:	1f 93       	push	r17
    806c:	cf 93       	push	r28
    806e:	df 93       	push	r29
    8070:	dc 01       	movw	r26, r24
    8072:	eb 01       	movw	r28, r22
    8074:	fa 01       	movw	r30, r20
    8076:	b9 01       	movw	r22, r18
    8078:	98 01       	movw	r18, r16
    807a:	a6 01       	movw	r20, r12
    807c:	9a 2d       	mov	r25, r10
    807e:	a5 fa       	bst	r10, 5
    8080:	cc 24       	eor	r12, r12
    8082:	c0 f8       	bld	r12, 0
    8084:	a6 fc       	sbrc	r10, 6
    8086:	07 c0       	rjmp	.+14     	; 0x8096 <p_ntoa+0x38>
    8088:	a2 fc       	sbrc	r10, 2
    808a:	08 c0       	rjmp	.+16     	; 0x809c <p_ntoa+0x3e>
    808c:	a4 fe       	sbrs	r10, 4
    808e:	09 c0       	rjmp	.+18     	; 0x80a2 <p_ntoa+0x44>
    8090:	00 e2       	ldi	r16, 0x20	; 32
    8092:	10 e0       	ldi	r17, 0x00	; 0
    8094:	08 c0       	rjmp	.+16     	; 0x80a6 <p_ntoa+0x48>
    8096:	0d e2       	ldi	r16, 0x2D	; 45
    8098:	10 e0       	ldi	r17, 0x00	; 0
    809a:	05 c0       	rjmp	.+10     	; 0x80a6 <p_ntoa+0x48>
    809c:	0b e2       	ldi	r16, 0x2B	; 43
    809e:	10 e0       	ldi	r17, 0x00	; 0
    80a0:	02 c0       	rjmp	.+4      	; 0x80a6 <p_ntoa+0x48>
    80a2:	00 e0       	ldi	r16, 0x00	; 0
    80a4:	10 e0       	ldi	r17, 0x00	; 0
    80a6:	95 ff       	sbrs	r25, 5
    80a8:	04 c0       	rjmp	.+8      	; 0x80b2 <p_ntoa+0x54>
    80aa:	89 2f       	mov	r24, r25
    80ac:	8a 70       	andi	r24, 0x0A	; 10
    80ae:	09 f0       	breq	.+2      	; 0x80b2 <p_ntoa+0x54>
    80b0:	c1 2c       	mov	r12, r1
    80b2:	c0 fa       	bst	r12, 0
    80b4:	95 f9       	bld	r25, 5
    80b6:	89 2f       	mov	r24, r25
    80b8:	82 70       	andi	r24, 0x02	; 2
    80ba:	c8 2e       	mov	r12, r24
    80bc:	91 fd       	sbrc	r25, 1
    80be:	02 c0       	rjmp	.+4      	; 0x80c4 <p_ntoa+0x66>
    80c0:	40 e0       	ldi	r20, 0x00	; 0
    80c2:	50 e0       	ldi	r21, 0x00	; 0
    80c4:	89 2f       	mov	r24, r25
    80c6:	83 70       	andi	r24, 0x03	; 3
    80c8:	11 f4       	brne	.+4      	; 0x80ce <p_ntoa+0x70>
    80ca:	41 e0       	ldi	r20, 0x01	; 1
    80cc:	50 e0       	ldi	r21, 0x00	; 0
    80ce:	90 ff       	sbrs	r25, 0
    80d0:	0c c0       	rjmp	.+24     	; 0x80ea <p_ntoa+0x8c>
    80d2:	95 fd       	sbrc	r25, 5
    80d4:	05 c0       	rjmp	.+10     	; 0x80e0 <p_ntoa+0x82>
    80d6:	c1 10       	cpse	r12, r1
    80d8:	08 c0       	rjmp	.+16     	; 0x80ea <p_ntoa+0x8c>
    80da:	41 e0       	ldi	r20, 0x01	; 1
    80dc:	50 e0       	ldi	r21, 0x00	; 0
    80de:	05 c0       	rjmp	.+10     	; 0x80ea <p_ntoa+0x8c>
    80e0:	94 75       	andi	r25, 0x54	; 84
    80e2:	a7 01       	movw	r20, r14
    80e4:	11 f0       	breq	.+4      	; 0x80ea <p_ntoa+0x8c>
    80e6:	41 50       	subi	r20, 0x01	; 1
    80e8:	51 09       	sbc	r21, r1
    80ea:	68 01       	movw	r12, r16
    80ec:	7e 01       	movw	r14, r28
    80ee:	8d 01       	movw	r16, r26
    80f0:	cf 01       	movw	r24, r30
    80f2:	11 df       	rcall	.-478    	; 0x7f16 <bin2num>
    80f4:	df 91       	pop	r29
    80f6:	cf 91       	pop	r28
    80f8:	1f 91       	pop	r17
    80fa:	0f 91       	pop	r16
    80fc:	ff 90       	pop	r15
    80fe:	ef 90       	pop	r14
    8100:	df 90       	pop	r13
    8102:	cf 90       	pop	r12
    8104:	af 90       	pop	r10
    8106:	08 95       	ret

00008108 <p_ftoa>:
    8108:	aa e0       	ldi	r26, 0x0A	; 10
    810a:	b0 e0       	ldi	r27, 0x00	; 0
    810c:	ea e8       	ldi	r30, 0x8A	; 138
    810e:	f0 e4       	ldi	r31, 0x40	; 64
    8110:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    8114:	4b 01       	movw	r8, r22
    8116:	5c 01       	movw	r10, r24
    8118:	1a 01       	movw	r2, r20
    811a:	28 01       	movw	r4, r16
    811c:	c6 fa       	bst	r12, 6
    811e:	11 27       	eor	r17, r17
    8120:	10 f9       	bld	r17, 0
    8122:	5a 83       	std	Y+2, r21	; 0x02
    8124:	49 83       	std	Y+1, r20	; 0x01
    8126:	1c 82       	std	Y+4, r1	; 0x04
    8128:	1b 82       	std	Y+3, r1	; 0x03
    812a:	21 50       	subi	r18, 0x01	; 1
    812c:	31 09       	sbc	r19, r1
    812e:	3e 83       	std	Y+6, r19	; 0x06
    8130:	2d 83       	std	Y+5, r18	; 0x05
    8132:	fa 01       	movw	r30, r20
    8134:	10 82       	st	Z, r1
    8136:	20 e0       	ldi	r18, 0x00	; 0
    8138:	30 e0       	ldi	r19, 0x00	; 0
    813a:	a9 01       	movw	r20, r18
    813c:	0e 94 a7 e4 	call	0x1c94e	; 0x1c94e <__cmpsf2>
    8140:	87 ff       	sbrs	r24, 7
    8142:	05 c0       	rjmp	.+10     	; 0x814e <p_ftoa+0x46>
    8144:	b7 fa       	bst	r11, 7
    8146:	b0 94       	com	r11
    8148:	b7 f8       	bld	r11, 7
    814a:	b0 94       	com	r11
    814c:	11 e0       	ldi	r17, 0x01	; 1
    814e:	10 fb       	bst	r17, 0
    8150:	c6 f8       	bld	r12, 6
    8152:	c6 fe       	sbrs	r12, 6
    8154:	02 c0       	rjmp	.+4      	; 0x815a <p_ftoa+0x52>
    8156:	6d e2       	ldi	r22, 0x2D	; 45
    8158:	07 c0       	rjmp	.+14     	; 0x8168 <p_ftoa+0x60>
    815a:	c2 fe       	sbrs	r12, 2
    815c:	02 c0       	rjmp	.+4      	; 0x8162 <p_ftoa+0x5a>
    815e:	6b e2       	ldi	r22, 0x2B	; 43
    8160:	03 c0       	rjmp	.+6      	; 0x8168 <p_ftoa+0x60>
    8162:	c4 fe       	sbrs	r12, 4
    8164:	04 c0       	rjmp	.+8      	; 0x816e <p_ftoa+0x66>
    8166:	60 e2       	ldi	r22, 0x20	; 32
    8168:	ce 01       	movw	r24, r28
    816a:	01 96       	adiw	r24, 0x01	; 1
    816c:	5d df       	rcall	.-326    	; 0x8028 <pch>
    816e:	37 01       	movw	r6, r14
    8170:	f7 fe       	sbrs	r15, 7
    8172:	02 c0       	rjmp	.+4      	; 0x8178 <p_ftoa+0x70>
    8174:	61 2c       	mov	r6, r1
    8176:	71 2c       	mov	r7, r1
    8178:	20 e0       	ldi	r18, 0x00	; 0
    817a:	30 e0       	ldi	r19, 0x00	; 0
    817c:	a9 01       	movw	r20, r18
    817e:	c5 01       	movw	r24, r10
    8180:	b4 01       	movw	r22, r8
    8182:	0e 94 a7 e4 	call	0x1c94e	; 0x1c94e <__cmpsf2>
    8186:	88 23       	and	r24, r24
    8188:	d1 f1       	breq	.+116    	; 0x81fe <p_ftoa+0xf6>
    818a:	c1 fe       	sbrs	r12, 1
    818c:	11 c0       	rjmp	.+34     	; 0x81b0 <p_ftoa+0xa8>
    818e:	83 01       	movw	r16, r6
    8190:	60 e0       	ldi	r22, 0x00	; 0
    8192:	70 e0       	ldi	r23, 0x00	; 0
    8194:	80 e0       	ldi	r24, 0x00	; 0
    8196:	9f e3       	ldi	r25, 0x3F	; 63
    8198:	01 15       	cp	r16, r1
    819a:	11 05       	cpc	r17, r1
    819c:	69 f0       	breq	.+26     	; 0x81b8 <p_ftoa+0xb0>
    819e:	20 e0       	ldi	r18, 0x00	; 0
    81a0:	30 e0       	ldi	r19, 0x00	; 0
    81a2:	40 e2       	ldi	r20, 0x20	; 32
    81a4:	51 e4       	ldi	r21, 0x41	; 65
    81a6:	0e 94 ab e4 	call	0x1c956	; 0x1c956 <__divsf3>
    81aa:	01 50       	subi	r16, 0x01	; 1
    81ac:	11 09       	sbc	r17, r1
    81ae:	f4 cf       	rjmp	.-24     	; 0x8198 <p_ftoa+0x90>
    81b0:	60 e0       	ldi	r22, 0x00	; 0
    81b2:	70 e0       	ldi	r23, 0x00	; 0
    81b4:	80 e0       	ldi	r24, 0x00	; 0
    81b6:	9f e3       	ldi	r25, 0x3F	; 63
    81b8:	9b 01       	movw	r18, r22
    81ba:	ac 01       	movw	r20, r24
    81bc:	c5 01       	movw	r24, r10
    81be:	b4 01       	movw	r22, r8
    81c0:	0e 94 43 e4 	call	0x1c886	; 0x1c886 <__addsf3>
    81c4:	4b 01       	movw	r8, r22
    81c6:	5c 01       	movw	r10, r24
    81c8:	ee 24       	eor	r14, r14
    81ca:	e3 94       	inc	r14
    81cc:	f1 2c       	mov	r15, r1
    81ce:	20 e0       	ldi	r18, 0x00	; 0
    81d0:	30 e0       	ldi	r19, 0x00	; 0
    81d2:	40 e2       	ldi	r20, 0x20	; 32
    81d4:	51 e4       	ldi	r21, 0x41	; 65
    81d6:	c5 01       	movw	r24, r10
    81d8:	b4 01       	movw	r22, r8
    81da:	0e 94 f6 e5 	call	0x1cbec	; 0x1cbec <__gesf2>
    81de:	87 fd       	sbrc	r24, 7
    81e0:	11 c0       	rjmp	.+34     	; 0x8204 <p_ftoa+0xfc>
    81e2:	ff ef       	ldi	r31, 0xFF	; 255
    81e4:	ef 1a       	sub	r14, r31
    81e6:	ff 0a       	sbc	r15, r31
    81e8:	20 e0       	ldi	r18, 0x00	; 0
    81ea:	30 e0       	ldi	r19, 0x00	; 0
    81ec:	40 e2       	ldi	r20, 0x20	; 32
    81ee:	51 e4       	ldi	r21, 0x41	; 65
    81f0:	c5 01       	movw	r24, r10
    81f2:	b4 01       	movw	r22, r8
    81f4:	0e 94 ab e4 	call	0x1c956	; 0x1c956 <__divsf3>
    81f8:	4b 01       	movw	r8, r22
    81fa:	5c 01       	movw	r10, r24
    81fc:	e8 cf       	rjmp	.-48     	; 0x81ce <p_ftoa+0xc6>
    81fe:	ee 24       	eor	r14, r14
    8200:	e3 94       	inc	r14
    8202:	f1 2c       	mov	r15, r1
    8204:	8c 2d       	mov	r24, r12
    8206:	88 72       	andi	r24, 0x28	; 40
    8208:	80 32       	cpi	r24, 0x20	; 32
    820a:	c1 f4       	brne	.+48     	; 0x823c <p_ftoa+0x134>
    820c:	82 01       	movw	r16, r4
    820e:	0e 19       	sub	r16, r14
    8210:	1f 09       	sbc	r17, r15
    8212:	8b 81       	ldd	r24, Y+3	; 0x03
    8214:	9c 81       	ldd	r25, Y+4	; 0x04
    8216:	08 1b       	sub	r16, r24
    8218:	19 0b       	sbc	r17, r25
    821a:	c1 fe       	sbrs	r12, 1
    821c:	07 c0       	rjmp	.+14     	; 0x822c <p_ftoa+0x124>
    821e:	61 14       	cp	r6, r1
    8220:	71 04       	cpc	r7, r1
    8222:	21 f0       	breq	.+8      	; 0x822c <p_ftoa+0x124>
    8224:	06 19       	sub	r16, r6
    8226:	17 09       	sbc	r17, r7
    8228:	01 50       	subi	r16, 0x01	; 1
    822a:	11 09       	sbc	r17, r1
    822c:	10 16       	cp	r1, r16
    822e:	11 06       	cpc	r1, r17
    8230:	2c f4       	brge	.+10     	; 0x823c <p_ftoa+0x134>
    8232:	60 e3       	ldi	r22, 0x30	; 48
    8234:	ce 01       	movw	r24, r28
    8236:	01 96       	adiw	r24, 0x01	; 1
    8238:	f7 de       	rcall	.-530    	; 0x8028 <pch>
    823a:	f6 cf       	rjmp	.-20     	; 0x8228 <p_ftoa+0x120>
    823c:	c5 01       	movw	r24, r10
    823e:	b4 01       	movw	r22, r8
    8240:	0e 94 13 e5 	call	0x1ca26	; 0x1ca26 <__fixsfsi>
    8244:	6f 83       	std	Y+7, r22	; 0x07
    8246:	78 87       	std	Y+8, r23	; 0x08
    8248:	89 87       	std	Y+9, r24	; 0x09
    824a:	9a 87       	std	Y+10, r25	; 0x0a
    824c:	6f 81       	ldd	r22, Y+7	; 0x07
    824e:	60 5d       	subi	r22, 0xD0	; 208
    8250:	ce 01       	movw	r24, r28
    8252:	01 96       	adiw	r24, 0x01	; 1
    8254:	e9 de       	rcall	.-558    	; 0x8028 <pch>
    8256:	2f 81       	ldd	r18, Y+7	; 0x07
    8258:	38 85       	ldd	r19, Y+8	; 0x08
    825a:	b9 01       	movw	r22, r18
    825c:	33 0f       	add	r19, r19
    825e:	88 0b       	sbc	r24, r24
    8260:	99 0b       	sbc	r25, r25
    8262:	0e 94 46 e5 	call	0x1ca8c	; 0x1ca8c <__floatsisf>
    8266:	9b 01       	movw	r18, r22
    8268:	ac 01       	movw	r20, r24
    826a:	c5 01       	movw	r24, r10
    826c:	b4 01       	movw	r22, r8
    826e:	0e 94 42 e4 	call	0x1c884	; 0x1c884 <__subsf3>
    8272:	31 e0       	ldi	r19, 0x01	; 1
    8274:	e3 1a       	sub	r14, r19
    8276:	f1 08       	sbc	r15, r1
    8278:	20 e0       	ldi	r18, 0x00	; 0
    827a:	30 e0       	ldi	r19, 0x00	; 0
    827c:	40 e2       	ldi	r20, 0x20	; 32
    827e:	51 e4       	ldi	r21, 0x41	; 65
    8280:	0e 94 fa e5 	call	0x1cbf4	; 0x1cbf4 <__mulsf3>
    8284:	4b 01       	movw	r8, r22
    8286:	5c 01       	movw	r10, r24
    8288:	e1 14       	cp	r14, r1
    828a:	f1 04       	cpc	r15, r1
    828c:	b9 f6       	brne	.-82     	; 0x823c <p_ftoa+0x134>
    828e:	c1 fc       	sbrc	r12, 1
    8290:	10 c0       	rjmp	.+32     	; 0x82b2 <p_ftoa+0x1aa>
    8292:	60 e0       	ldi	r22, 0x00	; 0
    8294:	ce 01       	movw	r24, r28
    8296:	01 96       	adiw	r24, 0x01	; 1
    8298:	c7 de       	rcall	.-626    	; 0x8028 <pch>
    829a:	f1 01       	movw	r30, r2
    829c:	01 90       	ld	r0, Z+
    829e:	00 20       	and	r0, r0
    82a0:	e9 f7       	brne	.-6      	; 0x829c <p_ftoa+0x194>
    82a2:	31 97       	sbiw	r30, 0x01	; 1
    82a4:	cf 01       	movw	r24, r30
    82a6:	82 19       	sub	r24, r2
    82a8:	93 09       	sbc	r25, r3
    82aa:	2a 96       	adiw	r28, 0x0a	; 10
    82ac:	e2 e1       	ldi	r30, 0x12	; 18
    82ae:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>
    82b2:	61 14       	cp	r6, r1
    82b4:	71 04       	cpc	r7, r1
    82b6:	69 f3       	breq	.-38     	; 0x8292 <p_ftoa+0x18a>
    82b8:	6e e2       	ldi	r22, 0x2E	; 46
    82ba:	ce 01       	movw	r24, r28
    82bc:	01 96       	adiw	r24, 0x01	; 1
    82be:	b4 de       	rcall	.-664    	; 0x8028 <pch>
    82c0:	c5 01       	movw	r24, r10
    82c2:	b4 01       	movw	r22, r8
    82c4:	0e 94 13 e5 	call	0x1ca26	; 0x1ca26 <__fixsfsi>
    82c8:	6b 01       	movw	r12, r22
    82ca:	7c 01       	movw	r14, r24
    82cc:	07 2e       	mov	r0, r23
    82ce:	00 0c       	add	r0, r0
    82d0:	88 0b       	sbc	r24, r24
    82d2:	99 0b       	sbc	r25, r25
    82d4:	0e 94 46 e5 	call	0x1ca8c	; 0x1ca8c <__floatsisf>
    82d8:	9b 01       	movw	r18, r22
    82da:	ac 01       	movw	r20, r24
    82dc:	c5 01       	movw	r24, r10
    82de:	b4 01       	movw	r22, r8
    82e0:	0e 94 42 e4 	call	0x1c884	; 0x1c884 <__subsf3>
    82e4:	4b 01       	movw	r8, r22
    82e6:	5c 01       	movw	r10, r24
    82e8:	b6 01       	movw	r22, r12
    82ea:	60 5d       	subi	r22, 0xD0	; 208
    82ec:	7f 4f       	sbci	r23, 0xFF	; 255
    82ee:	ce 01       	movw	r24, r28
    82f0:	01 96       	adiw	r24, 0x01	; 1
    82f2:	9a de       	rcall	.-716    	; 0x8028 <pch>
    82f4:	81 e0       	ldi	r24, 0x01	; 1
    82f6:	68 1a       	sub	r6, r24
    82f8:	71 08       	sbc	r7, r1
    82fa:	20 e0       	ldi	r18, 0x00	; 0
    82fc:	30 e0       	ldi	r19, 0x00	; 0
    82fe:	40 e2       	ldi	r20, 0x20	; 32
    8300:	51 e4       	ldi	r21, 0x41	; 65
    8302:	c5 01       	movw	r24, r10
    8304:	b4 01       	movw	r22, r8
    8306:	0e 94 fa e5 	call	0x1cbf4	; 0x1cbf4 <__mulsf3>
    830a:	4b 01       	movw	r8, r22
    830c:	5c 01       	movw	r10, r24
    830e:	61 14       	cp	r6, r1
    8310:	71 04       	cpc	r7, r1
    8312:	b1 f6       	brne	.-84     	; 0x82c0 <p_ftoa+0x1b8>
    8314:	be cf       	rjmp	.-132    	; 0x8292 <p_ftoa+0x18a>

00008316 <p_etoa>:
    8316:	a3 e1       	ldi	r26, 0x13	; 19
    8318:	b0 e0       	ldi	r27, 0x00	; 0
    831a:	e1 e9       	ldi	r30, 0x91	; 145
    831c:	f1 e4       	ldi	r31, 0x41	; 65
    831e:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    8322:	4b 01       	movw	r8, r22
    8324:	5c 01       	movw	r10, r24
    8326:	59 8b       	std	Y+17, r21	; 0x11
    8328:	48 8b       	std	Y+16, r20	; 0x10
    832a:	1b 8b       	std	Y+19, r17	; 0x13
    832c:	0a 8b       	std	Y+18, r16	; 0x12
    832e:	3c 2c       	mov	r3, r12
    8330:	c6 fa       	bst	r12, 6
    8332:	11 27       	eor	r17, r17
    8334:	10 f9       	bld	r17, 0
    8336:	59 87       	std	Y+9, r21	; 0x09
    8338:	48 87       	std	Y+8, r20	; 0x08
    833a:	1b 86       	std	Y+11, r1	; 0x0b
    833c:	1a 86       	std	Y+10, r1	; 0x0a
    833e:	21 50       	subi	r18, 0x01	; 1
    8340:	31 09       	sbc	r19, r1
    8342:	3d 87       	std	Y+13, r19	; 0x0d
    8344:	2c 87       	std	Y+12, r18	; 0x0c
    8346:	fa 01       	movw	r30, r20
    8348:	10 82       	st	Z, r1
    834a:	20 e0       	ldi	r18, 0x00	; 0
    834c:	30 e0       	ldi	r19, 0x00	; 0
    834e:	a9 01       	movw	r20, r18
    8350:	0e 94 a7 e4 	call	0x1c94e	; 0x1c94e <__cmpsf2>
    8354:	87 ff       	sbrs	r24, 7
    8356:	05 c0       	rjmp	.+10     	; 0x8362 <p_etoa+0x4c>
    8358:	b7 fa       	bst	r11, 7
    835a:	b0 94       	com	r11
    835c:	b7 f8       	bld	r11, 7
    835e:	b0 94       	com	r11
    8360:	11 e0       	ldi	r17, 0x01	; 1
    8362:	10 fb       	bst	r17, 0
    8364:	36 f8       	bld	r3, 6
    8366:	36 fe       	sbrs	r3, 6
    8368:	02 c0       	rjmp	.+4      	; 0x836e <p_etoa+0x58>
    836a:	6d e2       	ldi	r22, 0x2D	; 45
    836c:	07 c0       	rjmp	.+14     	; 0x837c <p_etoa+0x66>
    836e:	32 fe       	sbrs	r3, 2
    8370:	02 c0       	rjmp	.+4      	; 0x8376 <p_etoa+0x60>
    8372:	6b e2       	ldi	r22, 0x2B	; 43
    8374:	03 c0       	rjmp	.+6      	; 0x837c <p_etoa+0x66>
    8376:	34 fe       	sbrs	r3, 4
    8378:	04 c0       	rjmp	.+8      	; 0x8382 <p_etoa+0x6c>
    837a:	60 e2       	ldi	r22, 0x20	; 32
    837c:	ce 01       	movw	r24, r28
    837e:	08 96       	adiw	r24, 0x08	; 8
    8380:	53 de       	rcall	.-858    	; 0x8028 <pch>
    8382:	37 01       	movw	r6, r14
    8384:	f7 fe       	sbrs	r15, 7
    8386:	02 c0       	rjmp	.+4      	; 0x838c <p_etoa+0x76>
    8388:	61 2c       	mov	r6, r1
    838a:	71 2c       	mov	r7, r1
    838c:	1f 86       	std	Y+15, r1	; 0x0f
    838e:	1e 86       	std	Y+14, r1	; 0x0e
    8390:	20 e0       	ldi	r18, 0x00	; 0
    8392:	30 e0       	ldi	r19, 0x00	; 0
    8394:	a9 01       	movw	r20, r18
    8396:	c5 01       	movw	r24, r10
    8398:	b4 01       	movw	r22, r8
    839a:	0e 94 a7 e4 	call	0x1c94e	; 0x1c94e <__cmpsf2>
    839e:	f3 2d       	mov	r31, r3
    83a0:	f2 70       	andi	r31, 0x02	; 2
    83a2:	2f 2e       	mov	r2, r31
    83a4:	88 23       	and	r24, r24
    83a6:	09 f4       	brne	.+2      	; 0x83aa <p_etoa+0x94>
    83a8:	70 c0       	rjmp	.+224    	; 0x848a <p_etoa+0x174>
    83aa:	ff 23       	and	r31, r31
    83ac:	b1 f0       	breq	.+44     	; 0x83da <p_etoa+0xc4>
    83ae:	83 01       	movw	r16, r6
    83b0:	c1 2c       	mov	r12, r1
    83b2:	d1 2c       	mov	r13, r1
    83b4:	e1 2c       	mov	r14, r1
    83b6:	2f e3       	ldi	r18, 0x3F	; 63
    83b8:	f2 2e       	mov	r15, r18
    83ba:	01 15       	cp	r16, r1
    83bc:	11 05       	cpc	r17, r1
    83be:	91 f0       	breq	.+36     	; 0x83e4 <p_etoa+0xce>
    83c0:	20 e0       	ldi	r18, 0x00	; 0
    83c2:	30 e0       	ldi	r19, 0x00	; 0
    83c4:	40 e2       	ldi	r20, 0x20	; 32
    83c6:	51 e4       	ldi	r21, 0x41	; 65
    83c8:	c7 01       	movw	r24, r14
    83ca:	b6 01       	movw	r22, r12
    83cc:	0e 94 ab e4 	call	0x1c956	; 0x1c956 <__divsf3>
    83d0:	6b 01       	movw	r12, r22
    83d2:	7c 01       	movw	r14, r24
    83d4:	01 50       	subi	r16, 0x01	; 1
    83d6:	11 09       	sbc	r17, r1
    83d8:	f0 cf       	rjmp	.-32     	; 0x83ba <p_etoa+0xa4>
    83da:	c1 2c       	mov	r12, r1
    83dc:	d1 2c       	mov	r13, r1
    83de:	e1 2c       	mov	r14, r1
    83e0:	9f e3       	ldi	r25, 0x3F	; 63
    83e2:	f9 2e       	mov	r15, r25
    83e4:	41 2c       	mov	r4, r1
    83e6:	51 2c       	mov	r5, r1
    83e8:	82 01       	movw	r16, r4
    83ea:	01 50       	subi	r16, 0x01	; 1
    83ec:	11 09       	sbc	r17, r1
    83ee:	20 e0       	ldi	r18, 0x00	; 0
    83f0:	30 e0       	ldi	r19, 0x00	; 0
    83f2:	40 e8       	ldi	r20, 0x80	; 128
    83f4:	5f e3       	ldi	r21, 0x3F	; 63
    83f6:	c5 01       	movw	r24, r10
    83f8:	b4 01       	movw	r22, r8
    83fa:	0e 94 a7 e4 	call	0x1c94e	; 0x1c94e <__cmpsf2>
    83fe:	87 ff       	sbrs	r24, 7
    8400:	0c c0       	rjmp	.+24     	; 0x841a <p_etoa+0x104>
    8402:	20 e0       	ldi	r18, 0x00	; 0
    8404:	30 e0       	ldi	r19, 0x00	; 0
    8406:	40 e2       	ldi	r20, 0x20	; 32
    8408:	51 e4       	ldi	r21, 0x41	; 65
    840a:	c5 01       	movw	r24, r10
    840c:	b4 01       	movw	r22, r8
    840e:	0e 94 fa e5 	call	0x1cbf4	; 0x1cbf4 <__mulsf3>
    8412:	4b 01       	movw	r8, r22
    8414:	5c 01       	movw	r10, r24
    8416:	28 01       	movw	r4, r16
    8418:	e7 cf       	rjmp	.-50     	; 0x83e8 <p_etoa+0xd2>
    841a:	82 01       	movw	r16, r4
    841c:	0f 5f       	subi	r16, 0xFF	; 255
    841e:	1f 4f       	sbci	r17, 0xFF	; 255
    8420:	20 e0       	ldi	r18, 0x00	; 0
    8422:	30 e0       	ldi	r19, 0x00	; 0
    8424:	40 e2       	ldi	r20, 0x20	; 32
    8426:	51 e4       	ldi	r21, 0x41	; 65
    8428:	c5 01       	movw	r24, r10
    842a:	b4 01       	movw	r22, r8
    842c:	0e 94 f6 e5 	call	0x1cbec	; 0x1cbec <__gesf2>
    8430:	87 fd       	sbrc	r24, 7
    8432:	0c c0       	rjmp	.+24     	; 0x844c <p_etoa+0x136>
    8434:	20 e0       	ldi	r18, 0x00	; 0
    8436:	30 e0       	ldi	r19, 0x00	; 0
    8438:	40 e2       	ldi	r20, 0x20	; 32
    843a:	51 e4       	ldi	r21, 0x41	; 65
    843c:	c5 01       	movw	r24, r10
    843e:	b4 01       	movw	r22, r8
    8440:	0e 94 ab e4 	call	0x1c956	; 0x1c956 <__divsf3>
    8444:	4b 01       	movw	r8, r22
    8446:	5c 01       	movw	r10, r24
    8448:	28 01       	movw	r4, r16
    844a:	e7 cf       	rjmp	.-50     	; 0x841a <p_etoa+0x104>
    844c:	a7 01       	movw	r20, r14
    844e:	96 01       	movw	r18, r12
    8450:	c5 01       	movw	r24, r10
    8452:	b4 01       	movw	r22, r8
    8454:	0e 94 43 e4 	call	0x1c886	; 0x1c886 <__addsf3>
    8458:	4b 01       	movw	r8, r22
    845a:	5c 01       	movw	r10, r24
    845c:	82 01       	movw	r16, r4
    845e:	2f ef       	ldi	r18, 0xFF	; 255
    8460:	42 1a       	sub	r4, r18
    8462:	52 0a       	sbc	r5, r18
    8464:	20 e0       	ldi	r18, 0x00	; 0
    8466:	30 e0       	ldi	r19, 0x00	; 0
    8468:	40 e2       	ldi	r20, 0x20	; 32
    846a:	51 e4       	ldi	r21, 0x41	; 65
    846c:	0e 94 f6 e5 	call	0x1cbec	; 0x1cbec <__gesf2>
    8470:	87 fd       	sbrc	r24, 7
    8472:	09 c0       	rjmp	.+18     	; 0x8486 <p_etoa+0x170>
    8474:	20 e0       	ldi	r18, 0x00	; 0
    8476:	30 e0       	ldi	r19, 0x00	; 0
    8478:	40 e2       	ldi	r20, 0x20	; 32
    847a:	51 e4       	ldi	r21, 0x41	; 65
    847c:	c5 01       	movw	r24, r10
    847e:	b4 01       	movw	r22, r8
    8480:	0e 94 ab e4 	call	0x1c956	; 0x1c956 <__divsf3>
    8484:	e9 cf       	rjmp	.-46     	; 0x8458 <p_etoa+0x142>
    8486:	0e 87       	std	Y+14, r16	; 0x0e
    8488:	1f 87       	std	Y+15, r17	; 0x0f
    848a:	85 e6       	ldi	r24, 0x65	; 101
    848c:	89 83       	std	Y+1, r24	; 0x01
    848e:	8e 85       	ldd	r24, Y+14	; 0x0e
    8490:	9f 85       	ldd	r25, Y+15	; 0x0f
    8492:	97 ff       	sbrs	r25, 7
    8494:	08 c0       	rjmp	.+16     	; 0x84a6 <p_etoa+0x190>
    8496:	91 95       	neg	r25
    8498:	81 95       	neg	r24
    849a:	91 09       	sbc	r25, r1
    849c:	9f 87       	std	Y+15, r25	; 0x0f
    849e:	8e 87       	std	Y+14, r24	; 0x0e
    84a0:	8d e2       	ldi	r24, 0x2D	; 45
    84a2:	90 e0       	ldi	r25, 0x00	; 0
    84a4:	02 c0       	rjmp	.+4      	; 0x84aa <p_etoa+0x194>
    84a6:	8b e2       	ldi	r24, 0x2B	; 43
    84a8:	90 e0       	ldi	r25, 0x00	; 0
    84aa:	6c 01       	movw	r12, r24
    84ac:	82 e0       	ldi	r24, 0x02	; 2
    84ae:	e8 2e       	mov	r14, r24
    84b0:	f1 2c       	mov	r15, r1
    84b2:	8e 01       	movw	r16, r28
    84b4:	02 5f       	subi	r16, 0xF2	; 242
    84b6:	1f 4f       	sbci	r17, 0xFF	; 255
    84b8:	2a e0       	ldi	r18, 0x0A	; 10
    84ba:	30 e0       	ldi	r19, 0x00	; 0
    84bc:	42 e0       	ldi	r20, 0x02	; 2
    84be:	50 e0       	ldi	r21, 0x00	; 0
    84c0:	65 e0       	ldi	r22, 0x05	; 5
    84c2:	70 e0       	ldi	r23, 0x00	; 0
    84c4:	ce 01       	movw	r24, r28
    84c6:	02 96       	adiw	r24, 0x02	; 2
    84c8:	26 dd       	rcall	.-1460   	; 0x7f16 <bin2num>
    84ca:	9c 01       	movw	r18, r24
    84cc:	93 2d       	mov	r25, r3
    84ce:	98 72       	andi	r25, 0x28	; 40
    84d0:	90 32       	cpi	r25, 0x20	; 32
    84d2:	71 f0       	breq	.+28     	; 0x84f0 <p_etoa+0x1da>
    84d4:	c5 01       	movw	r24, r10
    84d6:	b4 01       	movw	r22, r8
    84d8:	0e 94 13 e5 	call	0x1ca26	; 0x1ca26 <__fixsfsi>
    84dc:	6b 01       	movw	r12, r22
    84de:	7c 01       	movw	r14, r24
    84e0:	60 e3       	ldi	r22, 0x30	; 48
    84e2:	6c 0d       	add	r22, r12
    84e4:	ce 01       	movw	r24, r28
    84e6:	08 96       	adiw	r24, 0x08	; 8
    84e8:	9f dd       	rcall	.-1218   	; 0x8028 <pch>
    84ea:	21 10       	cpse	r2, r1
    84ec:	20 c0       	rjmp	.+64     	; 0x852e <p_etoa+0x218>
    84ee:	63 c0       	rjmp	.+198    	; 0x85b6 <p_etoa+0x2a0>
    84f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    84f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    84f4:	0a 89       	ldd	r16, Y+18	; 0x12
    84f6:	1b 89       	ldd	r17, Y+19	; 0x13
    84f8:	08 1b       	sub	r16, r24
    84fa:	19 0b       	sbc	r17, r25
    84fc:	22 20       	and	r2, r2
    84fe:	41 f0       	breq	.+16     	; 0x8510 <p_etoa+0x1fa>
    8500:	61 14       	cp	r6, r1
    8502:	71 04       	cpc	r7, r1
    8504:	29 f0       	breq	.+10     	; 0x8510 <p_etoa+0x1fa>
    8506:	06 19       	sub	r16, r6
    8508:	17 09       	sbc	r17, r7
    850a:	06 50       	subi	r16, 0x06	; 6
    850c:	11 09       	sbc	r17, r1
    850e:	02 c0       	rjmp	.+4      	; 0x8514 <p_etoa+0x1fe>
    8510:	05 50       	subi	r16, 0x05	; 5
    8512:	11 09       	sbc	r17, r1
    8514:	24 30       	cpi	r18, 0x04	; 4
    8516:	31 05       	cpc	r19, r1
    8518:	14 f0       	brlt	.+4      	; 0x851e <p_etoa+0x208>
    851a:	01 50       	subi	r16, 0x01	; 1
    851c:	11 09       	sbc	r17, r1
    851e:	10 16       	cp	r1, r16
    8520:	11 06       	cpc	r1, r17
    8522:	c4 f6       	brge	.-80     	; 0x84d4 <p_etoa+0x1be>
    8524:	60 e3       	ldi	r22, 0x30	; 48
    8526:	ce 01       	movw	r24, r28
    8528:	08 96       	adiw	r24, 0x08	; 8
    852a:	7e dd       	rcall	.-1284   	; 0x8028 <pch>
    852c:	f6 cf       	rjmp	.-20     	; 0x851a <p_etoa+0x204>
    852e:	61 14       	cp	r6, r1
    8530:	71 04       	cpc	r7, r1
    8532:	09 f4       	brne	.+2      	; 0x8536 <p_etoa+0x220>
    8534:	40 c0       	rjmp	.+128    	; 0x85b6 <p_etoa+0x2a0>
    8536:	b6 01       	movw	r22, r12
    8538:	dd 0c       	add	r13, r13
    853a:	88 0b       	sbc	r24, r24
    853c:	99 0b       	sbc	r25, r25
    853e:	0e 94 46 e5 	call	0x1ca8c	; 0x1ca8c <__floatsisf>
    8542:	9b 01       	movw	r18, r22
    8544:	ac 01       	movw	r20, r24
    8546:	c5 01       	movw	r24, r10
    8548:	b4 01       	movw	r22, r8
    854a:	0e 94 42 e4 	call	0x1c884	; 0x1c884 <__subsf3>
    854e:	20 e0       	ldi	r18, 0x00	; 0
    8550:	30 e0       	ldi	r19, 0x00	; 0
    8552:	40 e2       	ldi	r20, 0x20	; 32
    8554:	51 e4       	ldi	r21, 0x41	; 65
    8556:	0e 94 fa e5 	call	0x1cbf4	; 0x1cbf4 <__mulsf3>
    855a:	4b 01       	movw	r8, r22
    855c:	5c 01       	movw	r10, r24
    855e:	6e e2       	ldi	r22, 0x2E	; 46
    8560:	ce 01       	movw	r24, r28
    8562:	08 96       	adiw	r24, 0x08	; 8
    8564:	61 dd       	rcall	.-1342   	; 0x8028 <pch>
    8566:	c5 01       	movw	r24, r10
    8568:	b4 01       	movw	r22, r8
    856a:	0e 94 13 e5 	call	0x1ca26	; 0x1ca26 <__fixsfsi>
    856e:	6b 01       	movw	r12, r22
    8570:	7c 01       	movw	r14, r24
    8572:	07 2e       	mov	r0, r23
    8574:	00 0c       	add	r0, r0
    8576:	88 0b       	sbc	r24, r24
    8578:	99 0b       	sbc	r25, r25
    857a:	0e 94 46 e5 	call	0x1ca8c	; 0x1ca8c <__floatsisf>
    857e:	9b 01       	movw	r18, r22
    8580:	ac 01       	movw	r20, r24
    8582:	c5 01       	movw	r24, r10
    8584:	b4 01       	movw	r22, r8
    8586:	0e 94 42 e4 	call	0x1c884	; 0x1c884 <__subsf3>
    858a:	4b 01       	movw	r8, r22
    858c:	5c 01       	movw	r10, r24
    858e:	b6 01       	movw	r22, r12
    8590:	60 5d       	subi	r22, 0xD0	; 208
    8592:	7f 4f       	sbci	r23, 0xFF	; 255
    8594:	ce 01       	movw	r24, r28
    8596:	08 96       	adiw	r24, 0x08	; 8
    8598:	47 dd       	rcall	.-1394   	; 0x8028 <pch>
    859a:	20 e0       	ldi	r18, 0x00	; 0
    859c:	30 e0       	ldi	r19, 0x00	; 0
    859e:	40 e2       	ldi	r20, 0x20	; 32
    85a0:	51 e4       	ldi	r21, 0x41	; 65
    85a2:	c5 01       	movw	r24, r10
    85a4:	b4 01       	movw	r22, r8
    85a6:	0e 94 fa e5 	call	0x1cbf4	; 0x1cbf4 <__mulsf3>
    85aa:	4b 01       	movw	r8, r22
    85ac:	5c 01       	movw	r10, r24
    85ae:	31 e0       	ldi	r19, 0x01	; 1
    85b0:	63 1a       	sub	r6, r19
    85b2:	71 08       	sbc	r7, r1
    85b4:	c1 f6       	brne	.-80     	; 0x8566 <p_etoa+0x250>
    85b6:	8e 01       	movw	r16, r28
    85b8:	0f 5f       	subi	r16, 0xFF	; 255
    85ba:	1f 4f       	sbci	r17, 0xFF	; 255
    85bc:	f8 01       	movw	r30, r16
    85be:	61 91       	ld	r22, Z+
    85c0:	8f 01       	movw	r16, r30
    85c2:	ce 01       	movw	r24, r28
    85c4:	08 96       	adiw	r24, 0x08	; 8
    85c6:	66 23       	and	r22, r22
    85c8:	11 f0       	breq	.+4      	; 0x85ce <p_etoa+0x2b8>
    85ca:	2e dd       	rcall	.-1444   	; 0x8028 <pch>
    85cc:	f7 cf       	rjmp	.-18     	; 0x85bc <p_etoa+0x2a6>
    85ce:	2c dd       	rcall	.-1448   	; 0x8028 <pch>
    85d0:	e8 89       	ldd	r30, Y+16	; 0x10
    85d2:	f9 89       	ldd	r31, Y+17	; 0x11
    85d4:	01 90       	ld	r0, Z+
    85d6:	00 20       	and	r0, r0
    85d8:	e9 f7       	brne	.-6      	; 0x85d4 <p_etoa+0x2be>
    85da:	cf 01       	movw	r24, r30
    85dc:	01 97       	sbiw	r24, 0x01	; 1
    85de:	28 89       	ldd	r18, Y+16	; 0x10
    85e0:	39 89       	ldd	r19, Y+17	; 0x11
    85e2:	82 1b       	sub	r24, r18
    85e4:	93 0b       	sbc	r25, r19
    85e6:	63 96       	adiw	r28, 0x13	; 19
    85e8:	e2 e1       	ldi	r30, 0x12	; 18
    85ea:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

000085ee <_puts_pad>:
    85ee:	a0 e0       	ldi	r26, 0x00	; 0
    85f0:	b0 e0       	ldi	r27, 0x00	; 0
    85f2:	ed ef       	ldi	r30, 0xFD	; 253
    85f4:	f2 e4       	ldi	r31, 0x42	; 66
    85f6:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
    85fa:	6c 01       	movw	r12, r24
    85fc:	4b 01       	movw	r8, r22
    85fe:	79 01       	movw	r14, r18
    8600:	24 17       	cp	r18, r20
    8602:	35 07       	cpc	r19, r21
    8604:	24 f4       	brge	.+8      	; 0x860e <_puts_pad+0x20>
    8606:	ea 01       	movw	r28, r20
    8608:	c2 1b       	sub	r28, r18
    860a:	d3 0b       	sbc	r29, r19
    860c:	02 c0       	rjmp	.+4      	; 0x8612 <_puts_pad+0x24>
    860e:	c0 e0       	ldi	r28, 0x00	; 0
    8610:	d0 e0       	ldi	r29, 0x00	; 0
    8612:	01 15       	cp	r16, r1
    8614:	11 05       	cpc	r17, r1
    8616:	49 f4       	brne	.+18     	; 0x862a <_puts_pad+0x3c>
    8618:	21 97       	sbiw	r28, 0x01	; 1
    861a:	38 f0       	brcs	.+14     	; 0x862a <_puts_pad+0x3c>
    861c:	d6 01       	movw	r26, r12
    861e:	ed 91       	ld	r30, X+
    8620:	fc 91       	ld	r31, X
    8622:	60 e2       	ldi	r22, 0x20	; 32
    8624:	c6 01       	movw	r24, r12
    8626:	09 95       	icall
    8628:	f7 cf       	rjmp	.-18     	; 0x8618 <_puts_pad+0x2a>
    862a:	54 01       	movw	r10, r8
    862c:	f5 01       	movw	r30, r10
    862e:	61 91       	ld	r22, Z+
    8630:	5f 01       	movw	r10, r30
    8632:	66 23       	and	r22, r22
    8634:	61 f0       	breq	.+24     	; 0x864e <_puts_pad+0x60>
    8636:	e1 14       	cp	r14, r1
    8638:	f1 04       	cpc	r15, r1
    863a:	49 f0       	breq	.+18     	; 0x864e <_puts_pad+0x60>
    863c:	d6 01       	movw	r26, r12
    863e:	ed 91       	ld	r30, X+
    8640:	fc 91       	ld	r31, X
    8642:	c6 01       	movw	r24, r12
    8644:	09 95       	icall
    8646:	b1 e0       	ldi	r27, 0x01	; 1
    8648:	eb 1a       	sub	r14, r27
    864a:	f1 08       	sbc	r15, r1
    864c:	ef cf       	rjmp	.-34     	; 0x862c <_puts_pad+0x3e>
    864e:	01 15       	cp	r16, r1
    8650:	11 05       	cpc	r17, r1
    8652:	51 f0       	breq	.+20     	; 0x8668 <_puts_pad+0x7a>
    8654:	20 97       	sbiw	r28, 0x00	; 0
    8656:	41 f0       	breq	.+16     	; 0x8668 <_puts_pad+0x7a>
    8658:	d6 01       	movw	r26, r12
    865a:	ed 91       	ld	r30, X+
    865c:	fc 91       	ld	r31, X
    865e:	60 e2       	ldi	r22, 0x20	; 32
    8660:	c6 01       	movw	r24, r12
    8662:	09 95       	icall
    8664:	21 97       	sbiw	r28, 0x01	; 1
    8666:	f6 cf       	rjmp	.-20     	; 0x8654 <_puts_pad+0x66>
    8668:	cd b7       	in	r28, 0x3d	; 61
    866a:	de b7       	in	r29, 0x3e	; 62
    866c:	ec e0       	ldi	r30, 0x0C	; 12
    866e:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

00008672 <_printf_fn>:
    8672:	ab e6       	ldi	r26, 0x6B	; 107
    8674:	b0 e0       	ldi	r27, 0x00	; 0
    8676:	ef e3       	ldi	r30, 0x3F	; 63
    8678:	f3 e4       	ldi	r31, 0x43	; 67
    867a:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    867e:	a5 96       	adiw	r28, 0x25	; 37
    8680:	9f af       	std	Y+63, r25	; 0x3f
    8682:	8e af       	std	Y+62, r24	; 0x3e
    8684:	a5 97       	sbiw	r28, 0x25	; 37
    8686:	6a 01       	movw	r12, r20
    8688:	e6 2e       	mov	r14, r22
    868a:	19 01       	movw	r2, r18
    868c:	a9 96       	adiw	r28, 0x29	; 41
    868e:	1c ae       	std	Y+60, r1	; 0x3c
    8690:	1d ae       	std	Y+61, r1	; 0x3d
    8692:	1e ae       	std	Y+62, r1	; 0x3e
    8694:	1f ae       	std	Y+63, r1	; 0x3f
    8696:	a9 97       	sbiw	r28, 0x29	; 41
    8698:	9e 01       	movw	r18, r28
    869a:	2f 5a       	subi	r18, 0xAF	; 175
    869c:	3f 4f       	sbci	r19, 0xFF	; 255
    869e:	67 96       	adiw	r28, 0x17	; 23
    86a0:	3f af       	std	Y+63, r19	; 0x3f
    86a2:	2e af       	std	Y+62, r18	; 0x3e
    86a4:	67 97       	sbiw	r28, 0x17	; 23
    86a6:	ae 01       	movw	r20, r28
    86a8:	4d 5b       	subi	r20, 0xBD	; 189
    86aa:	5f 4f       	sbci	r21, 0xFF	; 255
    86ac:	69 96       	adiw	r28, 0x19	; 25
    86ae:	5f af       	std	Y+63, r21	; 0x3f
    86b0:	4e af       	std	Y+62, r20	; 0x3e
    86b2:	69 97       	sbiw	r28, 0x19	; 25
    86b4:	ce 01       	movw	r24, r28
    86b6:	85 5b       	subi	r24, 0xB5	; 181
    86b8:	9f 4f       	sbci	r25, 0xFF	; 255
    86ba:	6b 96       	adiw	r28, 0x1b	; 27
    86bc:	9f af       	std	Y+63, r25	; 0x3f
    86be:	8e af       	std	Y+62, r24	; 0x3e
    86c0:	6b 97       	sbiw	r28, 0x1b	; 27
    86c2:	de 01       	movw	r26, r28
    86c4:	ad 5a       	subi	r26, 0xAD	; 173
    86c6:	bf 4f       	sbci	r27, 0xFF	; 255
    86c8:	6d 96       	adiw	r28, 0x1d	; 29
    86ca:	bf af       	std	Y+63, r27	; 0x3f
    86cc:	ae af       	std	Y+62, r26	; 0x3e
    86ce:	6d 97       	sbiw	r28, 0x1d	; 29
    86d0:	f6 01       	movw	r30, r12
    86d2:	5e 2d       	mov	r21, r14
    86d4:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    86d8:	66 23       	and	r22, r22
    86da:	09 f4       	brne	.+2      	; 0x86de <_printf_fn+0x6c>
    86dc:	d7 c3       	rjmp	.+1966   	; 0x8e8c <_printf_fn+0x81a>
    86de:	ae 2d       	mov	r26, r14
    86e0:	c6 01       	movw	r24, r12
    86e2:	01 96       	adiw	r24, 0x01	; 1
    86e4:	a1 1d       	adc	r26, r1
    86e6:	3c 01       	movw	r6, r24
    86e8:	8a 2e       	mov	r8, r26
    86ea:	65 32       	cpi	r22, 0x25	; 37
    86ec:	51 f0       	breq	.+20     	; 0x8702 <_printf_fn+0x90>
    86ee:	a5 96       	adiw	r28, 0x25	; 37
    86f0:	ae ad       	ldd	r26, Y+62	; 0x3e
    86f2:	bf ad       	ldd	r27, Y+63	; 0x3f
    86f4:	a5 97       	sbiw	r28, 0x25	; 37
    86f6:	ed 91       	ld	r30, X+
    86f8:	fc 91       	ld	r31, X
    86fa:	11 97       	sbiw	r26, 0x01	; 1
    86fc:	cd 01       	movw	r24, r26
    86fe:	09 95       	icall
    8700:	91 c3       	rjmp	.+1826   	; 0x8e24 <_printf_fn+0x7b2>
    8702:	91 2c       	mov	r9, r1
    8704:	f3 01       	movw	r30, r6
    8706:	58 2d       	mov	r21, r8
    8708:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    870c:	63 32       	cpi	r22, 0x23	; 35
    870e:	19 f4       	brne	.+6      	; 0x8716 <_printf_fn+0xa4>
    8710:	68 94       	set
    8712:	97 f8       	bld	r9, 7
    8714:	04 c0       	rjmp	.+8      	; 0x871e <_printf_fn+0xac>
    8716:	6b 32       	cpi	r22, 0x2B	; 43
    8718:	39 f4       	brne	.+14     	; 0x8728 <_printf_fn+0xb6>
    871a:	68 94       	set
    871c:	92 f8       	bld	r9, 2
    871e:	bf ef       	ldi	r27, 0xFF	; 255
    8720:	6b 1a       	sub	r6, r27
    8722:	7b 0a       	sbc	r7, r27
    8724:	8b 0a       	sbc	r8, r27
    8726:	ee cf       	rjmp	.-36     	; 0x8704 <_printf_fn+0x92>
    8728:	6d 32       	cpi	r22, 0x2D	; 45
    872a:	a9 f4       	brne	.+42     	; 0x8756 <_printf_fn+0xe4>
    872c:	93 fc       	sbrc	r9, 3
    872e:	05 c0       	rjmp	.+10     	; 0x873a <_printf_fn+0xc8>
    8730:	6d 32       	cpi	r22, 0x2D	; 45
    8732:	19 f4       	brne	.+6      	; 0x873a <_printf_fn+0xc8>
    8734:	68 94       	set
    8736:	93 f8       	bld	r9, 3
    8738:	f2 cf       	rjmp	.-28     	; 0x871e <_printf_fn+0xac>
    873a:	94 fc       	sbrc	r9, 4
    873c:	05 c0       	rjmp	.+10     	; 0x8748 <_printf_fn+0xd6>
    873e:	60 32       	cpi	r22, 0x20	; 32
    8740:	19 f4       	brne	.+6      	; 0x8748 <_printf_fn+0xd6>
    8742:	68 94       	set
    8744:	94 f8       	bld	r9, 4
    8746:	eb cf       	rjmp	.-42     	; 0x871e <_printf_fn+0xac>
    8748:	95 fc       	sbrc	r9, 5
    874a:	e9 cf       	rjmp	.-46     	; 0x871e <_printf_fn+0xac>
    874c:	60 33       	cpi	r22, 0x30	; 48
    874e:	39 f7       	brne	.-50     	; 0x871e <_printf_fn+0xac>
    8750:	68 94       	set
    8752:	95 f8       	bld	r9, 5
    8754:	e4 cf       	rjmp	.-56     	; 0x871e <_printf_fn+0xac>
    8756:	86 2f       	mov	r24, r22
    8758:	8f 7e       	andi	r24, 0xEF	; 239
    875a:	80 32       	cpi	r24, 0x20	; 32
    875c:	39 f3       	breq	.-50     	; 0x872c <_printf_fn+0xba>
    875e:	70 e0       	ldi	r23, 0x00	; 0
    8760:	60 53       	subi	r22, 0x30	; 48
    8762:	71 09       	sbc	r23, r1
    8764:	41 2c       	mov	r4, r1
    8766:	51 2c       	mov	r5, r1
    8768:	6a 30       	cpi	r22, 0x0A	; 10
    876a:	71 05       	cpc	r23, r1
    876c:	e0 f4       	brcc	.+56     	; 0x87a6 <_printf_fn+0x134>
    876e:	2a e0       	ldi	r18, 0x0A	; 10
    8770:	f3 01       	movw	r30, r6
    8772:	58 2d       	mov	r21, r8
    8774:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    8778:	70 e0       	ldi	r23, 0x00	; 0
    877a:	cb 01       	movw	r24, r22
    877c:	c0 97       	sbiw	r24, 0x30	; 48
    877e:	0a 97       	sbiw	r24, 0x0a	; 10
    8780:	80 f4       	brcc	.+32     	; 0x87a2 <_printf_fn+0x130>
    8782:	ef ef       	ldi	r30, 0xFF	; 255
    8784:	6e 1a       	sub	r6, r30
    8786:	7e 0a       	sbc	r7, r30
    8788:	8e 0a       	sbc	r8, r30
    878a:	24 9d       	mul	r18, r4
    878c:	c0 01       	movw	r24, r0
    878e:	25 9d       	mul	r18, r5
    8790:	90 0d       	add	r25, r0
    8792:	11 24       	eor	r1, r1
    8794:	68 0f       	add	r22, r24
    8796:	79 1f       	adc	r23, r25
    8798:	2b 01       	movw	r4, r22
    879a:	f0 e3       	ldi	r31, 0x30	; 48
    879c:	4f 1a       	sub	r4, r31
    879e:	51 08       	sbc	r5, r1
    87a0:	e7 cf       	rjmp	.-50     	; 0x8770 <_printf_fn+0xfe>
    87a2:	68 94       	set
    87a4:	90 f8       	bld	r9, 0
    87a6:	f3 01       	movw	r30, r6
    87a8:	58 2d       	mov	r21, r8
    87aa:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    87ae:	6e 32       	cpi	r22, 0x2E	; 46
    87b0:	59 f5       	brne	.+86     	; 0x8808 <_printf_fn+0x196>
    87b2:	2f ef       	ldi	r18, 0xFF	; 255
    87b4:	62 1a       	sub	r6, r18
    87b6:	72 0a       	sbc	r7, r18
    87b8:	82 0a       	sbc	r8, r18
    87ba:	a1 96       	adiw	r28, 0x21	; 33
    87bc:	1f ae       	std	Y+63, r1	; 0x3f
    87be:	1e ae       	std	Y+62, r1	; 0x3e
    87c0:	a1 97       	sbiw	r28, 0x21	; 33
    87c2:	2a e0       	ldi	r18, 0x0A	; 10
    87c4:	f3 01       	movw	r30, r6
    87c6:	58 2d       	mov	r21, r8
    87c8:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    87cc:	70 e0       	ldi	r23, 0x00	; 0
    87ce:	cb 01       	movw	r24, r22
    87d0:	c0 97       	sbiw	r24, 0x30	; 48
    87d2:	0a 97       	sbiw	r24, 0x0a	; 10
    87d4:	b0 f4       	brcc	.+44     	; 0x8802 <_printf_fn+0x190>
    87d6:	3f ef       	ldi	r19, 0xFF	; 255
    87d8:	63 1a       	sub	r6, r19
    87da:	73 0a       	sbc	r7, r19
    87dc:	83 0a       	sbc	r8, r19
    87de:	a1 96       	adiw	r28, 0x21	; 33
    87e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    87e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    87e4:	a1 97       	sbiw	r28, 0x21	; 33
    87e6:	24 9f       	mul	r18, r20
    87e8:	c0 01       	movw	r24, r0
    87ea:	25 9f       	mul	r18, r21
    87ec:	90 0d       	add	r25, r0
    87ee:	11 24       	eor	r1, r1
    87f0:	68 0f       	add	r22, r24
    87f2:	79 1f       	adc	r23, r25
    87f4:	cb 01       	movw	r24, r22
    87f6:	c0 97       	sbiw	r24, 0x30	; 48
    87f8:	a1 96       	adiw	r28, 0x21	; 33
    87fa:	9f af       	std	Y+63, r25	; 0x3f
    87fc:	8e af       	std	Y+62, r24	; 0x3e
    87fe:	a1 97       	sbiw	r28, 0x21	; 33
    8800:	e1 cf       	rjmp	.-62     	; 0x87c4 <_printf_fn+0x152>
    8802:	68 94       	set
    8804:	91 f8       	bld	r9, 1
    8806:	04 c0       	rjmp	.+8      	; 0x8810 <_printf_fn+0x19e>
    8808:	a1 96       	adiw	r28, 0x21	; 33
    880a:	1f ae       	std	Y+63, r1	; 0x3f
    880c:	1e ae       	std	Y+62, r1	; 0x3e
    880e:	a1 97       	sbiw	r28, 0x21	; 33
    8810:	f3 01       	movw	r30, r6
    8812:	58 2d       	mov	r21, r8
    8814:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    8818:	69 34       	cpi	r22, 0x49	; 73
    881a:	09 f0       	breq	.+2      	; 0x881e <_printf_fn+0x1ac>
    881c:	45 c0       	rjmp	.+138    	; 0x88a8 <_printf_fn+0x236>
    881e:	9f ef       	ldi	r25, 0xFF	; 255
    8820:	69 1a       	sub	r6, r25
    8822:	79 0a       	sbc	r7, r25
    8824:	89 0a       	sbc	r8, r25
    8826:	6f 96       	adiw	r28, 0x1f	; 31
    8828:	1f ae       	std	Y+63, r1	; 0x3f
    882a:	1e ae       	std	Y+62, r1	; 0x3e
    882c:	6f 97       	sbiw	r28, 0x1f	; 31
    882e:	2a e0       	ldi	r18, 0x0A	; 10
    8830:	f3 01       	movw	r30, r6
    8832:	58 2d       	mov	r21, r8
    8834:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    8838:	70 e0       	ldi	r23, 0x00	; 0
    883a:	cb 01       	movw	r24, r22
    883c:	c0 97       	sbiw	r24, 0x30	; 48
    883e:	0a 97       	sbiw	r24, 0x0a	; 10
    8840:	b8 f4       	brcc	.+46     	; 0x8870 <_printf_fn+0x1fe>
    8842:	af ef       	ldi	r26, 0xFF	; 255
    8844:	6a 1a       	sub	r6, r26
    8846:	7a 0a       	sbc	r7, r26
    8848:	8a 0a       	sbc	r8, r26
    884a:	6f 96       	adiw	r28, 0x1f	; 31
    884c:	ee ad       	ldd	r30, Y+62	; 0x3e
    884e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8850:	6f 97       	sbiw	r28, 0x1f	; 31
    8852:	2e 9f       	mul	r18, r30
    8854:	c0 01       	movw	r24, r0
    8856:	2f 9f       	mul	r18, r31
    8858:	90 0d       	add	r25, r0
    885a:	11 24       	eor	r1, r1
    885c:	68 0f       	add	r22, r24
    885e:	79 1f       	adc	r23, r25
    8860:	ab 01       	movw	r20, r22
    8862:	40 53       	subi	r20, 0x30	; 48
    8864:	51 09       	sbc	r21, r1
    8866:	6f 96       	adiw	r28, 0x1f	; 31
    8868:	5f af       	std	Y+63, r21	; 0x3f
    886a:	4e af       	std	Y+62, r20	; 0x3e
    886c:	6f 97       	sbiw	r28, 0x1f	; 31
    886e:	e0 cf       	rjmp	.-64     	; 0x8830 <_printf_fn+0x1be>
    8870:	6f 96       	adiw	r28, 0x1f	; 31
    8872:	8e ad       	ldd	r24, Y+62	; 0x3e
    8874:	9f ad       	ldd	r25, Y+63	; 0x3f
    8876:	6f 97       	sbiw	r28, 0x1f	; 31
    8878:	00 97       	sbiw	r24, 0x00	; 0
    887a:	09 f4       	brne	.+2      	; 0x887e <_printf_fn+0x20c>
    887c:	4f c0       	rjmp	.+158    	; 0x891c <_printf_fn+0x2aa>
    887e:	87 70       	andi	r24, 0x07	; 7
    8880:	99 27       	eor	r25, r25
    8882:	89 2b       	or	r24, r25
    8884:	09 f0       	breq	.+2      	; 0x8888 <_printf_fn+0x216>
    8886:	46 c0       	rjmp	.+140    	; 0x8914 <_printf_fn+0x2a2>
    8888:	6f 96       	adiw	r28, 0x1f	; 31
    888a:	ae ad       	ldd	r26, Y+62	; 0x3e
    888c:	bf ad       	ldd	r27, Y+63	; 0x3f
    888e:	6f 97       	sbiw	r28, 0x1f	; 31
    8890:	83 e0       	ldi	r24, 0x03	; 3
    8892:	b5 95       	asr	r27
    8894:	a7 95       	ror	r26
    8896:	8a 95       	dec	r24
    8898:	e1 f7       	brne	.-8      	; 0x8892 <_printf_fn+0x220>
    889a:	6f 96       	adiw	r28, 0x1f	; 31
    889c:	bf af       	std	Y+63, r27	; 0x3f
    889e:	ae af       	std	Y+62, r26	; 0x3e
    88a0:	6f 97       	sbiw	r28, 0x1f	; 31
    88a2:	ab 2b       	or	r26, r27
    88a4:	d9 f1       	breq	.+118    	; 0x891c <_printf_fn+0x2aa>
    88a6:	27 c0       	rjmp	.+78     	; 0x88f6 <_printf_fn+0x284>
    88a8:	68 36       	cpi	r22, 0x68	; 104
    88aa:	29 f4       	brne	.+10     	; 0x88b6 <_printf_fn+0x244>
    88ac:	bf ef       	ldi	r27, 0xFF	; 255
    88ae:	6b 1a       	sub	r6, r27
    88b0:	7b 0a       	sbc	r7, r27
    88b2:	8b 0a       	sbc	r8, r27
    88b4:	ba c2       	rjmp	.+1396   	; 0x8e2a <_printf_fn+0x7b8>
    88b6:	6c 36       	cpi	r22, 0x6C	; 108
    88b8:	09 f0       	breq	.+2      	; 0x88bc <_printf_fn+0x24a>
    88ba:	b7 c2       	rjmp	.+1390   	; 0x8e2a <_printf_fn+0x7b8>
    88bc:	a8 2d       	mov	r26, r8
    88be:	c3 01       	movw	r24, r6
    88c0:	01 96       	adiw	r24, 0x01	; 1
    88c2:	a1 1d       	adc	r26, r1
    88c4:	fc 01       	movw	r30, r24
    88c6:	5a 2f       	mov	r21, r26
    88c8:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    88cc:	6c 36       	cpi	r22, 0x6C	; 108
    88ce:	49 f0       	breq	.+18     	; 0x88e2 <_printf_fn+0x270>
    88d0:	3c 01       	movw	r6, r24
    88d2:	8a 2e       	mov	r8, r26
    88d4:	24 e0       	ldi	r18, 0x04	; 4
    88d6:	30 e0       	ldi	r19, 0x00	; 0
    88d8:	6f 96       	adiw	r28, 0x1f	; 31
    88da:	3f af       	std	Y+63, r19	; 0x3f
    88dc:	2e af       	std	Y+62, r18	; 0x3e
    88de:	6f 97       	sbiw	r28, 0x1f	; 31
    88e0:	0a c0       	rjmp	.+20     	; 0x88f6 <_printf_fn+0x284>
    88e2:	32 e0       	ldi	r19, 0x02	; 2
    88e4:	63 0e       	add	r6, r19
    88e6:	71 1c       	adc	r7, r1
    88e8:	81 1c       	adc	r8, r1
    88ea:	48 e0       	ldi	r20, 0x08	; 8
    88ec:	50 e0       	ldi	r21, 0x00	; 0
    88ee:	6f 96       	adiw	r28, 0x1f	; 31
    88f0:	5f af       	std	Y+63, r21	; 0x3f
    88f2:	4e af       	std	Y+62, r20	; 0x3e
    88f4:	6f 97       	sbiw	r28, 0x1f	; 31
    88f6:	f3 01       	movw	r30, r6
    88f8:	58 2d       	mov	r21, r8
    88fa:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    88fe:	86 2f       	mov	r24, r22
    8900:	90 e0       	ldi	r25, 0x00	; 0
    8902:	a3 96       	adiw	r28, 0x23	; 35
    8904:	9f af       	std	Y+63, r25	; 0x3f
    8906:	8e af       	std	Y+62, r24	; 0x3e
    8908:	a3 97       	sbiw	r28, 0x23	; 35
    890a:	84 36       	cpi	r24, 0x64	; 100
    890c:	91 05       	cpc	r25, r1
    890e:	09 f4       	brne	.+2      	; 0x8912 <_printf_fn+0x2a0>
    8910:	93 c2       	rjmp	.+1318   	; 0x8e38 <_printf_fn+0x7c6>
    8912:	08 c0       	rjmp	.+16     	; 0x8924 <_printf_fn+0x2b2>
    8914:	6f 96       	adiw	r28, 0x1f	; 31
    8916:	1f ae       	std	Y+63, r1	; 0x3f
    8918:	1e ae       	std	Y+62, r1	; 0x3e
    891a:	6f 97       	sbiw	r28, 0x1f	; 31
    891c:	a3 96       	adiw	r28, 0x23	; 35
    891e:	1f ae       	std	Y+63, r1	; 0x3f
    8920:	1e ae       	std	Y+62, r1	; 0x3e
    8922:	a3 97       	sbiw	r28, 0x23	; 35
    8924:	31 e0       	ldi	r19, 0x01	; 1
    8926:	20 e0       	ldi	r18, 0x00	; 0
    8928:	a3 96       	adiw	r28, 0x23	; 35
    892a:	ae ad       	ldd	r26, Y+62	; 0x3e
    892c:	bf ad       	ldd	r27, Y+63	; 0x3f
    892e:	a3 97       	sbiw	r28, 0x23	; 35
    8930:	a4 34       	cpi	r26, 0x44	; 68
    8932:	b1 05       	cpc	r27, r1
    8934:	09 f0       	breq	.+2      	; 0x8938 <_printf_fn+0x2c6>
    8936:	30 e0       	ldi	r19, 0x00	; 0
    8938:	83 2f       	mov	r24, r19
    893a:	92 2f       	mov	r25, r18
    893c:	a3 96       	adiw	r28, 0x23	; 35
    893e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8940:	ff ad       	ldd	r31, Y+63	; 0x3f
    8942:	a3 97       	sbiw	r28, 0x23	; 35
    8944:	e2 54       	subi	r30, 0x42	; 66
    8946:	f1 09       	sbc	r31, r1
    8948:	e7 33       	cpi	r30, 0x37	; 55
    894a:	f1 05       	cpc	r31, r1
    894c:	08 f0       	brcs	.+2      	; 0x8950 <_printf_fn+0x2de>
    894e:	5d c1       	rjmp	.+698    	; 0x8c0a <_printf_fn+0x598>
    8950:	ea 5b       	subi	r30, 0xBA	; 186
    8952:	ff 4f       	sbci	r31, 0xFF	; 255
    8954:	0c 94 ba e3 	jmp	0x1c774	; 0x1c774 <__tablejump2__>
    8958:	e2 e0       	ldi	r30, 0x02	; 2
    895a:	f0 e0       	ldi	r31, 0x00	; 0
    895c:	6f 96       	adiw	r28, 0x1f	; 31
    895e:	ff af       	std	Y+63, r31	; 0x3f
    8960:	ee af       	std	Y+62, r30	; 0x3e
    8962:	6f 97       	sbiw	r28, 0x1f	; 31
    8964:	29 2d       	mov	r18, r9
    8966:	28 72       	andi	r18, 0x28	; 40
    8968:	28 32       	cpi	r18, 0x28	; 40
    896a:	11 f4       	brne	.+4      	; 0x8970 <_printf_fn+0x2fe>
    896c:	e8 94       	clt
    896e:	95 f8       	bld	r9, 5
    8970:	29 2d       	mov	r18, r9
    8972:	22 72       	andi	r18, 0x22	; 34
    8974:	22 32       	cpi	r18, 0x22	; 34
    8976:	11 f4       	brne	.+4      	; 0x897c <_printf_fn+0x30a>
    8978:	e8 94       	clt
    897a:	95 f8       	bld	r9, 5
    897c:	29 2d       	mov	r18, r9
    897e:	21 72       	andi	r18, 0x21	; 33
    8980:	21 32       	cpi	r18, 0x21	; 33
    8982:	59 f4       	brne	.+22     	; 0x899a <_printf_fn+0x328>
    8984:	a1 96       	adiw	r28, 0x21	; 33
    8986:	2e ad       	ldd	r18, Y+62	; 0x3e
    8988:	3f ad       	ldd	r19, Y+63	; 0x3f
    898a:	a1 97       	sbiw	r28, 0x21	; 33
    898c:	24 15       	cp	r18, r4
    898e:	35 05       	cpc	r19, r5
    8990:	24 f4       	brge	.+8      	; 0x899a <_printf_fn+0x328>
    8992:	a1 96       	adiw	r28, 0x21	; 33
    8994:	5f ae       	std	Y+63, r5	; 0x3f
    8996:	4e ae       	std	Y+62, r4	; 0x3e
    8998:	a1 97       	sbiw	r28, 0x21	; 33
    899a:	29 2d       	mov	r18, r9
    899c:	23 72       	andi	r18, 0x23	; 35
    899e:	23 32       	cpi	r18, 0x23	; 35
    89a0:	59 f4       	brne	.+22     	; 0x89b8 <_printf_fn+0x346>
    89a2:	a1 96       	adiw	r28, 0x21	; 33
    89a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    89a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    89a8:	a1 97       	sbiw	r28, 0x21	; 33
    89aa:	44 15       	cp	r20, r4
    89ac:	55 05       	cpc	r21, r5
    89ae:	24 f4       	brge	.+8      	; 0x89b8 <_printf_fn+0x346>
    89b0:	a1 96       	adiw	r28, 0x21	; 33
    89b2:	5f ae       	std	Y+63, r5	; 0x3f
    89b4:	4e ae       	std	Y+62, r4	; 0x3e
    89b6:	a1 97       	sbiw	r28, 0x21	; 33
    89b8:	e8 94       	clt
    89ba:	94 f8       	bld	r9, 4
    89bc:	e8 94       	clt
    89be:	92 f8       	bld	r9, 2
    89c0:	e8 94       	clt
    89c2:	96 f8       	bld	r9, 6
    89c4:	6f 96       	adiw	r28, 0x1f	; 31
    89c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    89c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    89ca:	6f 97       	sbiw	r28, 0x1f	; 31
    89cc:	12 97       	sbiw	r26, 0x02	; 2
    89ce:	29 f5       	brne	.+74     	; 0x8a1a <_printf_fn+0x3a8>
    89d0:	51 01       	movw	r10, r2
    89d2:	b2 e0       	ldi	r27, 0x02	; 2
    89d4:	ab 0e       	add	r10, r27
    89d6:	b1 1c       	adc	r11, r1
    89d8:	f1 01       	movw	r30, r2
    89da:	80 81       	ld	r24, Z
    89dc:	91 81       	ldd	r25, Z+1	; 0x01
    89de:	65 96       	adiw	r28, 0x15	; 21
    89e0:	9f af       	std	Y+63, r25	; 0x3f
    89e2:	8e af       	std	Y+62, r24	; 0x3e
    89e4:	65 97       	sbiw	r28, 0x15	; 21
    89e6:	a3 96       	adiw	r28, 0x23	; 35
    89e8:	2e ad       	ldd	r18, Y+62	; 0x3e
    89ea:	3f ad       	ldd	r19, Y+63	; 0x3f
    89ec:	a3 97       	sbiw	r28, 0x23	; 35
    89ee:	24 34       	cpi	r18, 0x44	; 68
    89f0:	31 05       	cpc	r19, r1
    89f2:	09 f0       	breq	.+2      	; 0x89f6 <_printf_fn+0x384>
    89f4:	b8 c0       	rjmp	.+368    	; 0x8b66 <_printf_fn+0x4f4>
    89f6:	97 ff       	sbrs	r25, 7
    89f8:	b0 c0       	rjmp	.+352    	; 0x8b5a <_printf_fn+0x4e8>
    89fa:	68 94       	set
    89fc:	96 f8       	bld	r9, 6
    89fe:	91 95       	neg	r25
    8a00:	81 95       	neg	r24
    8a02:	91 09       	sbc	r25, r1
    8a04:	65 96       	adiw	r28, 0x15	; 21
    8a06:	9f af       	std	Y+63, r25	; 0x3f
    8a08:	8e af       	std	Y+62, r24	; 0x3e
    8a0a:	65 97       	sbiw	r28, 0x15	; 21
    8a0c:	42 e0       	ldi	r20, 0x02	; 2
    8a0e:	50 e0       	ldi	r21, 0x00	; 0
    8a10:	6f 96       	adiw	r28, 0x1f	; 31
    8a12:	5f af       	std	Y+63, r21	; 0x3f
    8a14:	4e af       	std	Y+62, r20	; 0x3e
    8a16:	6f 97       	sbiw	r28, 0x1f	; 31
    8a18:	a6 c0       	rjmp	.+332    	; 0x8b66 <_printf_fn+0x4f4>
    8a1a:	6f 96       	adiw	r28, 0x1f	; 31
    8a1c:	ae ad       	ldd	r26, Y+62	; 0x3e
    8a1e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8a20:	6f 97       	sbiw	r28, 0x1f	; 31
    8a22:	14 97       	sbiw	r26, 0x04	; 4
    8a24:	59 f5       	brne	.+86     	; 0x8a7c <_printf_fn+0x40a>
    8a26:	51 01       	movw	r10, r2
    8a28:	b4 e0       	ldi	r27, 0x04	; 4
    8a2a:	ab 0e       	add	r10, r27
    8a2c:	b1 1c       	adc	r11, r1
    8a2e:	f1 01       	movw	r30, r2
    8a30:	80 81       	ld	r24, Z
    8a32:	91 81       	ldd	r25, Z+1	; 0x01
    8a34:	a2 81       	ldd	r26, Z+2	; 0x02
    8a36:	b3 81       	ldd	r27, Z+3	; 0x03
    8a38:	2f 96       	adiw	r28, 0x0f	; 15
    8a3a:	8c af       	std	Y+60, r24	; 0x3c
    8a3c:	9d af       	std	Y+61, r25	; 0x3d
    8a3e:	ae af       	std	Y+62, r26	; 0x3e
    8a40:	bf af       	std	Y+63, r27	; 0x3f
    8a42:	2f 97       	sbiw	r28, 0x0f	; 15
    8a44:	a3 96       	adiw	r28, 0x23	; 35
    8a46:	2e ad       	ldd	r18, Y+62	; 0x3e
    8a48:	3f ad       	ldd	r19, Y+63	; 0x3f
    8a4a:	a3 97       	sbiw	r28, 0x23	; 35
    8a4c:	24 34       	cpi	r18, 0x44	; 68
    8a4e:	31 05       	cpc	r19, r1
    8a50:	09 f0       	breq	.+2      	; 0x8a54 <_printf_fn+0x3e2>
    8a52:	96 c0       	rjmp	.+300    	; 0x8b80 <_printf_fn+0x50e>
    8a54:	b7 ff       	sbrs	r27, 7
    8a56:	8e c0       	rjmp	.+284    	; 0x8b74 <_printf_fn+0x502>
    8a58:	68 94       	set
    8a5a:	96 f8       	bld	r9, 6
    8a5c:	b0 95       	com	r27
    8a5e:	a0 95       	com	r26
    8a60:	90 95       	com	r25
    8a62:	81 95       	neg	r24
    8a64:	9f 4f       	sbci	r25, 0xFF	; 255
    8a66:	af 4f       	sbci	r26, 0xFF	; 255
    8a68:	bf 4f       	sbci	r27, 0xFF	; 255
    8a6a:	2f 96       	adiw	r28, 0x0f	; 15
    8a6c:	8c af       	std	Y+60, r24	; 0x3c
    8a6e:	9d af       	std	Y+61, r25	; 0x3d
    8a70:	ae af       	std	Y+62, r26	; 0x3e
    8a72:	bf af       	std	Y+63, r27	; 0x3f
    8a74:	2f 97       	sbiw	r28, 0x0f	; 15
    8a76:	7e c0       	rjmp	.+252    	; 0x8b74 <_printf_fn+0x502>
    8a78:	81 e0       	ldi	r24, 0x01	; 1
    8a7a:	90 e0       	ldi	r25, 0x00	; 0
    8a7c:	6f 96       	adiw	r28, 0x1f	; 31
    8a7e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8a80:	bf ad       	ldd	r27, Y+63	; 0x3f
    8a82:	6f 97       	sbiw	r28, 0x1f	; 31
    8a84:	51 01       	movw	r10, r2
    8a86:	18 97       	sbiw	r26, 0x08	; 8
    8a88:	09 f0       	breq	.+2      	; 0x8a8c <_printf_fn+0x41a>
    8a8a:	81 c0       	rjmp	.+258    	; 0x8b8e <_printf_fn+0x51c>
    8a8c:	b8 e0       	ldi	r27, 0x08	; 8
    8a8e:	ab 0e       	add	r10, r27
    8a90:	b1 1c       	adc	r11, r1
    8a92:	f1 01       	movw	r30, r2
    8a94:	f0 81       	ld	r31, Z
    8a96:	aa 96       	adiw	r28, 0x2a	; 42
    8a98:	ff af       	std	Y+63, r31	; 0x3f
    8a9a:	aa 97       	sbiw	r28, 0x2a	; 42
    8a9c:	f1 01       	movw	r30, r2
    8a9e:	f1 80       	ldd	r15, Z+1	; 0x01
    8aa0:	02 81       	ldd	r16, Z+2	; 0x02
    8aa2:	13 81       	ldd	r17, Z+3	; 0x03
    8aa4:	b4 81       	ldd	r27, Z+4	; 0x04
    8aa6:	f5 81       	ldd	r31, Z+5	; 0x05
    8aa8:	ab 96       	adiw	r28, 0x2b	; 43
    8aaa:	ff af       	std	Y+63, r31	; 0x3f
    8aac:	ab 97       	sbiw	r28, 0x2b	; 43
    8aae:	f1 01       	movw	r30, r2
    8ab0:	f6 81       	ldd	r31, Z+6	; 0x06
    8ab2:	ac 96       	adiw	r28, 0x2c	; 44
    8ab4:	ff af       	std	Y+63, r31	; 0x3f
    8ab6:	ac 97       	sbiw	r28, 0x2c	; 44
    8ab8:	f1 01       	movw	r30, r2
    8aba:	37 80       	ldd	r3, Z+7	; 0x07
    8abc:	aa 96       	adiw	r28, 0x2a	; 42
    8abe:	ff ad       	ldd	r31, Y+63	; 0x3f
    8ac0:	aa 97       	sbiw	r28, 0x2a	; 42
    8ac2:	24 96       	adiw	r28, 0x04	; 4
    8ac4:	ff af       	std	Y+63, r31	; 0x3f
    8ac6:	24 97       	sbiw	r28, 0x04	; 4
    8ac8:	25 96       	adiw	r28, 0x05	; 5
    8aca:	ff ae       	std	Y+63, r15	; 0x3f
    8acc:	25 97       	sbiw	r28, 0x05	; 5
    8ace:	26 96       	adiw	r28, 0x06	; 6
    8ad0:	0f af       	std	Y+63, r16	; 0x3f
    8ad2:	26 97       	sbiw	r28, 0x06	; 6
    8ad4:	27 96       	adiw	r28, 0x07	; 7
    8ad6:	1f af       	std	Y+63, r17	; 0x3f
    8ad8:	27 97       	sbiw	r28, 0x07	; 7
    8ada:	28 96       	adiw	r28, 0x08	; 8
    8adc:	bf af       	std	Y+63, r27	; 0x3f
    8ade:	28 97       	sbiw	r28, 0x08	; 8
    8ae0:	ab 96       	adiw	r28, 0x2b	; 43
    8ae2:	ef ad       	ldd	r30, Y+63	; 0x3f
    8ae4:	ab 97       	sbiw	r28, 0x2b	; 43
    8ae6:	29 96       	adiw	r28, 0x09	; 9
    8ae8:	ef af       	std	Y+63, r30	; 0x3f
    8aea:	29 97       	sbiw	r28, 0x09	; 9
    8aec:	ac 96       	adiw	r28, 0x2c	; 44
    8aee:	ff ad       	ldd	r31, Y+63	; 0x3f
    8af0:	ac 97       	sbiw	r28, 0x2c	; 44
    8af2:	2a 96       	adiw	r28, 0x0a	; 10
    8af4:	ff af       	std	Y+63, r31	; 0x3f
    8af6:	2a 97       	sbiw	r28, 0x0a	; 10
    8af8:	2b 96       	adiw	r28, 0x0b	; 11
    8afa:	3f ae       	std	Y+63, r3	; 0x3f
    8afc:	2b 97       	sbiw	r28, 0x0b	; 11
    8afe:	89 2b       	or	r24, r25
    8b00:	09 f4       	brne	.+2      	; 0x8b04 <_printf_fn+0x492>
    8b02:	50 c0       	rjmp	.+160    	; 0x8ba4 <_printf_fn+0x532>
    8b04:	aa 96       	adiw	r28, 0x2a	; 42
    8b06:	2f ad       	ldd	r18, Y+63	; 0x3f
    8b08:	aa 97       	sbiw	r28, 0x2a	; 42
    8b0a:	3f 2d       	mov	r19, r15
    8b0c:	a8 01       	movw	r20, r16
    8b0e:	6b 2f       	mov	r22, r27
    8b10:	7e 2f       	mov	r23, r30
    8b12:	8f 2f       	mov	r24, r31
    8b14:	93 2d       	mov	r25, r3
    8b16:	a0 e0       	ldi	r26, 0x00	; 0
    8b18:	0e 94 27 e4 	call	0x1c84e	; 0x1c84e <__cmpdi2_s8>
    8b1c:	0c f0       	brlt	.+2      	; 0x8b20 <_printf_fn+0x4ae>
    8b1e:	42 c0       	rjmp	.+132    	; 0x8ba4 <_printf_fn+0x532>
    8b20:	68 94       	set
    8b22:	96 f8       	bld	r9, 6
    8b24:	0e 94 d9 e3 	call	0x1c7b2	; 0x1c7b2 <__negdi2>
    8b28:	24 96       	adiw	r28, 0x04	; 4
    8b2a:	2f af       	std	Y+63, r18	; 0x3f
    8b2c:	24 97       	sbiw	r28, 0x04	; 4
    8b2e:	25 96       	adiw	r28, 0x05	; 5
    8b30:	3f af       	std	Y+63, r19	; 0x3f
    8b32:	25 97       	sbiw	r28, 0x05	; 5
    8b34:	26 96       	adiw	r28, 0x06	; 6
    8b36:	4f af       	std	Y+63, r20	; 0x3f
    8b38:	26 97       	sbiw	r28, 0x06	; 6
    8b3a:	27 96       	adiw	r28, 0x07	; 7
    8b3c:	5f af       	std	Y+63, r21	; 0x3f
    8b3e:	27 97       	sbiw	r28, 0x07	; 7
    8b40:	28 96       	adiw	r28, 0x08	; 8
    8b42:	6f af       	std	Y+63, r22	; 0x3f
    8b44:	28 97       	sbiw	r28, 0x08	; 8
    8b46:	29 96       	adiw	r28, 0x09	; 9
    8b48:	7f af       	std	Y+63, r23	; 0x3f
    8b4a:	29 97       	sbiw	r28, 0x09	; 9
    8b4c:	2a 96       	adiw	r28, 0x0a	; 10
    8b4e:	8f af       	std	Y+63, r24	; 0x3f
    8b50:	2a 97       	sbiw	r28, 0x0a	; 10
    8b52:	2b 96       	adiw	r28, 0x0b	; 11
    8b54:	9f af       	std	Y+63, r25	; 0x3f
    8b56:	2b 97       	sbiw	r28, 0x0b	; 11
    8b58:	25 c0       	rjmp	.+74     	; 0x8ba4 <_printf_fn+0x532>
    8b5a:	22 e0       	ldi	r18, 0x02	; 2
    8b5c:	30 e0       	ldi	r19, 0x00	; 0
    8b5e:	6f 96       	adiw	r28, 0x1f	; 31
    8b60:	3f af       	std	Y+63, r19	; 0x3f
    8b62:	2e af       	std	Y+62, r18	; 0x3e
    8b64:	6f 97       	sbiw	r28, 0x1f	; 31
    8b66:	6c 96       	adiw	r28, 0x1c	; 28
    8b68:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b6a:	6c 97       	sbiw	r28, 0x1c	; 28
    8b6c:	6d 96       	adiw	r28, 0x1d	; 29
    8b6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b70:	6d 97       	sbiw	r28, 0x1d	; 29
    8b72:	1e c0       	rjmp	.+60     	; 0x8bb0 <_printf_fn+0x53e>
    8b74:	44 e0       	ldi	r20, 0x04	; 4
    8b76:	50 e0       	ldi	r21, 0x00	; 0
    8b78:	6f 96       	adiw	r28, 0x1f	; 31
    8b7a:	5f af       	std	Y+63, r21	; 0x3f
    8b7c:	4e af       	std	Y+62, r20	; 0x3e
    8b7e:	6f 97       	sbiw	r28, 0x1f	; 31
    8b80:	6a 96       	adiw	r28, 0x1a	; 26
    8b82:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b84:	6a 97       	sbiw	r28, 0x1a	; 26
    8b86:	6b 96       	adiw	r28, 0x1b	; 27
    8b88:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b8a:	6b 97       	sbiw	r28, 0x1b	; 27
    8b8c:	11 c0       	rjmp	.+34     	; 0x8bb0 <_printf_fn+0x53e>
    8b8e:	66 96       	adiw	r28, 0x16	; 22
    8b90:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b92:	66 97       	sbiw	r28, 0x16	; 22
    8b94:	67 96       	adiw	r28, 0x17	; 23
    8b96:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b98:	67 97       	sbiw	r28, 0x17	; 23
    8b9a:	a3 96       	adiw	r28, 0x23	; 35
    8b9c:	1f ae       	std	Y+63, r1	; 0x3f
    8b9e:	1e ae       	std	Y+62, r1	; 0x3e
    8ba0:	a3 97       	sbiw	r28, 0x23	; 35
    8ba2:	06 c0       	rjmp	.+12     	; 0x8bb0 <_printf_fn+0x53e>
    8ba4:	68 96       	adiw	r28, 0x18	; 24
    8ba6:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ba8:	68 97       	sbiw	r28, 0x18	; 24
    8baa:	69 96       	adiw	r28, 0x19	; 25
    8bac:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bae:	69 97       	sbiw	r28, 0x19	; 25
    8bb0:	5f ef       	ldi	r21, 0xFF	; 255
    8bb2:	65 1a       	sub	r6, r21
    8bb4:	75 0a       	sbc	r7, r21
    8bb6:	85 0a       	sbc	r8, r21
    8bb8:	15 01       	movw	r2, r10
    8bba:	2d c0       	rjmp	.+90     	; 0x8c16 <_printf_fn+0x5a4>
    8bbc:	91 fc       	sbrc	r9, 1
    8bbe:	08 c0       	rjmp	.+16     	; 0x8bd0 <_printf_fn+0x55e>
    8bc0:	68 94       	set
    8bc2:	91 f8       	bld	r9, 1
    8bc4:	86 e0       	ldi	r24, 0x06	; 6
    8bc6:	90 e0       	ldi	r25, 0x00	; 0
    8bc8:	a1 96       	adiw	r28, 0x21	; 33
    8bca:	9f af       	std	Y+63, r25	; 0x3f
    8bcc:	8e af       	std	Y+62, r24	; 0x3e
    8bce:	a1 97       	sbiw	r28, 0x21	; 33
    8bd0:	d1 01       	movw	r26, r2
    8bd2:	2d 91       	ld	r18, X+
    8bd4:	3d 91       	ld	r19, X+
    8bd6:	4d 91       	ld	r20, X+
    8bd8:	5c 91       	ld	r21, X
    8bda:	a9 96       	adiw	r28, 0x29	; 41
    8bdc:	2c af       	std	Y+60, r18	; 0x3c
    8bde:	3d af       	std	Y+61, r19	; 0x3d
    8be0:	4e af       	std	Y+62, r20	; 0x3e
    8be2:	5f af       	std	Y+63, r21	; 0x3f
    8be4:	a9 97       	sbiw	r28, 0x29	; 41
    8be6:	bf ef       	ldi	r27, 0xFF	; 255
    8be8:	6b 1a       	sub	r6, r27
    8bea:	7b 0a       	sbc	r7, r27
    8bec:	8b 0a       	sbc	r8, r27
    8bee:	f1 01       	movw	r30, r2
    8bf0:	34 96       	adiw	r30, 0x04	; 4
    8bf2:	1f 01       	movw	r2, r30
    8bf4:	0a c0       	rjmp	.+20     	; 0x8c0a <_printf_fn+0x598>
    8bf6:	ff ef       	ldi	r31, 0xFF	; 255
    8bf8:	6f 1a       	sub	r6, r31
    8bfa:	7f 0a       	sbc	r7, r31
    8bfc:	8f 0a       	sbc	r8, r31
    8bfe:	b0 c0       	rjmp	.+352    	; 0x8d60 <_printf_fn+0x6ee>
    8c00:	2f ef       	ldi	r18, 0xFF	; 255
    8c02:	62 1a       	sub	r6, r18
    8c04:	72 0a       	sbc	r7, r18
    8c06:	82 0a       	sbc	r8, r18
    8c08:	b8 c0       	rjmp	.+368    	; 0x8d7a <_printf_fn+0x708>
    8c0a:	66 96       	adiw	r28, 0x16	; 22
    8c0c:	8f ad       	ldd	r24, Y+63	; 0x3f
    8c0e:	66 97       	sbiw	r28, 0x16	; 22
    8c10:	67 96       	adiw	r28, 0x17	; 23
    8c12:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c14:	67 97       	sbiw	r28, 0x17	; 23
    8c16:	a3 96       	adiw	r28, 0x23	; 35
    8c18:	ee ad       	ldd	r30, Y+62	; 0x3e
    8c1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    8c1c:	a3 97       	sbiw	r28, 0x23	; 35
    8c1e:	e2 54       	subi	r30, 0x42	; 66
    8c20:	f1 09       	sbc	r31, r1
    8c22:	e7 33       	cpi	r30, 0x37	; 55
    8c24:	f1 05       	cpc	r31, r1
    8c26:	08 f0       	brcs	.+2      	; 0x8c2a <_printf_fn+0x5b8>
    8c28:	f9 c0       	rjmp	.+498    	; 0x8e1c <_printf_fn+0x7aa>
    8c2a:	e3 58       	subi	r30, 0x83	; 131
    8c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    8c2e:	0c 94 ba e3 	jmp	0x1c774	; 0x1c774 <__tablejump2__>
    8c32:	e8 94       	clt
    8c34:	94 f8       	bld	r9, 4
    8c36:	e8 94       	clt
    8c38:	92 f8       	bld	r9, 2
    8c3a:	a9 2c       	mov	r10, r9
    8c3c:	b1 2c       	mov	r11, r1
    8c3e:	a1 96       	adiw	r28, 0x21	; 33
    8c40:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c42:	df ac       	ldd	r13, Y+63	; 0x3f
    8c44:	a1 97       	sbiw	r28, 0x21	; 33
    8c46:	72 01       	movw	r14, r4
    8c48:	0a e0       	ldi	r16, 0x0A	; 10
    8c4a:	10 e0       	ldi	r17, 0x00	; 0
    8c4c:	13 c0       	rjmp	.+38     	; 0x8c74 <_printf_fn+0x602>
    8c4e:	a9 2c       	mov	r10, r9
    8c50:	b1 2c       	mov	r11, r1
    8c52:	a1 96       	adiw	r28, 0x21	; 33
    8c54:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c56:	df ac       	ldd	r13, Y+63	; 0x3f
    8c58:	a1 97       	sbiw	r28, 0x21	; 33
    8c5a:	72 01       	movw	r14, r4
    8c5c:	02 e0       	ldi	r16, 0x02	; 2
    8c5e:	10 e0       	ldi	r17, 0x00	; 0
    8c60:	09 c0       	rjmp	.+18     	; 0x8c74 <_printf_fn+0x602>
    8c62:	a9 2c       	mov	r10, r9
    8c64:	b1 2c       	mov	r11, r1
    8c66:	a1 96       	adiw	r28, 0x21	; 33
    8c68:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c6a:	df ac       	ldd	r13, Y+63	; 0x3f
    8c6c:	a1 97       	sbiw	r28, 0x21	; 33
    8c6e:	72 01       	movw	r14, r4
    8c70:	08 e0       	ldi	r16, 0x08	; 8
    8c72:	10 e0       	ldi	r17, 0x00	; 0
    8c74:	22 e4       	ldi	r18, 0x42	; 66
    8c76:	30 e0       	ldi	r19, 0x00	; 0
    8c78:	ae 01       	movw	r20, r28
    8c7a:	4f 5f       	subi	r20, 0xFF	; 255
    8c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    8c7e:	6f 96       	adiw	r28, 0x1f	; 31
    8c80:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c82:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c84:	6f 97       	sbiw	r28, 0x1f	; 31
    8c86:	eb d9       	rcall	.-3114   	; 0x805e <p_ntoa>
    8c88:	30 c0       	rjmp	.+96     	; 0x8cea <_printf_fn+0x678>
    8c8a:	a9 2c       	mov	r10, r9
    8c8c:	b1 2c       	mov	r11, r1
    8c8e:	a1 96       	adiw	r28, 0x21	; 33
    8c90:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c92:	df ac       	ldd	r13, Y+63	; 0x3f
    8c94:	a1 97       	sbiw	r28, 0x21	; 33
    8c96:	72 01       	movw	r14, r4
    8c98:	00 e1       	ldi	r16, 0x10	; 16
    8c9a:	10 e0       	ldi	r17, 0x00	; 0
    8c9c:	22 e4       	ldi	r18, 0x42	; 66
    8c9e:	30 e0       	ldi	r19, 0x00	; 0
    8ca0:	ae 01       	movw	r20, r28
    8ca2:	4f 5f       	subi	r20, 0xFF	; 255
    8ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ca6:	6f 96       	adiw	r28, 0x1f	; 31
    8ca8:	6e ad       	ldd	r22, Y+62	; 0x3e
    8caa:	7f ad       	ldd	r23, Y+63	; 0x3f
    8cac:	6f 97       	sbiw	r28, 0x1f	; 31
    8cae:	d7 d9       	rcall	.-3154   	; 0x805e <p_ntoa>
    8cb0:	7c 01       	movw	r14, r24
    8cb2:	a3 96       	adiw	r28, 0x23	; 35
    8cb4:	6e ad       	ldd	r22, Y+62	; 0x3e
    8cb6:	7f ad       	ldd	r23, Y+63	; 0x3f
    8cb8:	a3 97       	sbiw	r28, 0x23	; 35
    8cba:	67 7f       	andi	r22, 0xF7	; 247
    8cbc:	60 35       	cpi	r22, 0x50	; 80
    8cbe:	71 05       	cpc	r23, r1
    8cc0:	c9 f5       	brne	.+114    	; 0x8d34 <_printf_fn+0x6c2>
    8cc2:	34 c0       	rjmp	.+104    	; 0x8d2c <_printf_fn+0x6ba>
    8cc4:	c9 2c       	mov	r12, r9
    8cc6:	d1 2c       	mov	r13, r1
    8cc8:	a1 96       	adiw	r28, 0x21	; 33
    8cca:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ccc:	ff ac       	ldd	r15, Y+63	; 0x3f
    8cce:	a1 97       	sbiw	r28, 0x21	; 33
    8cd0:	82 01       	movw	r16, r4
    8cd2:	22 e4       	ldi	r18, 0x42	; 66
    8cd4:	30 e0       	ldi	r19, 0x00	; 0
    8cd6:	ae 01       	movw	r20, r28
    8cd8:	4f 5f       	subi	r20, 0xFF	; 255
    8cda:	5f 4f       	sbci	r21, 0xFF	; 255
    8cdc:	a9 96       	adiw	r28, 0x29	; 41
    8cde:	6c ad       	ldd	r22, Y+60	; 0x3c
    8ce0:	7d ad       	ldd	r23, Y+61	; 0x3d
    8ce2:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ce4:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ce6:	a9 97       	sbiw	r28, 0x29	; 41
    8ce8:	0f da       	rcall	.-3042   	; 0x8108 <p_ftoa>
    8cea:	93 fa       	bst	r9, 3
    8cec:	00 27       	eor	r16, r16
    8cee:	00 f9       	bld	r16, 0
    8cf0:	10 e0       	ldi	r17, 0x00	; 0
    8cf2:	9c 01       	movw	r18, r24
    8cf4:	24 c0       	rjmp	.+72     	; 0x8d3e <_printf_fn+0x6cc>
    8cf6:	c9 2c       	mov	r12, r9
    8cf8:	d1 2c       	mov	r13, r1
    8cfa:	a1 96       	adiw	r28, 0x21	; 33
    8cfc:	ee ac       	ldd	r14, Y+62	; 0x3e
    8cfe:	ff ac       	ldd	r15, Y+63	; 0x3f
    8d00:	a1 97       	sbiw	r28, 0x21	; 33
    8d02:	82 01       	movw	r16, r4
    8d04:	22 e4       	ldi	r18, 0x42	; 66
    8d06:	30 e0       	ldi	r19, 0x00	; 0
    8d08:	ae 01       	movw	r20, r28
    8d0a:	4f 5f       	subi	r20, 0xFF	; 255
    8d0c:	5f 4f       	sbci	r21, 0xFF	; 255
    8d0e:	a9 96       	adiw	r28, 0x29	; 41
    8d10:	6c ad       	ldd	r22, Y+60	; 0x3c
    8d12:	7d ad       	ldd	r23, Y+61	; 0x3d
    8d14:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d16:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d18:	a9 97       	sbiw	r28, 0x29	; 41
    8d1a:	fd da       	rcall	.-2566   	; 0x8316 <p_etoa>
    8d1c:	7c 01       	movw	r14, r24
    8d1e:	a3 96       	adiw	r28, 0x23	; 35
    8d20:	4e ad       	ldd	r20, Y+62	; 0x3e
    8d22:	5f ad       	ldd	r21, Y+63	; 0x3f
    8d24:	a3 97       	sbiw	r28, 0x23	; 35
    8d26:	45 34       	cpi	r20, 0x45	; 69
    8d28:	51 05       	cpc	r21, r1
    8d2a:	21 f4       	brne	.+8      	; 0x8d34 <_printf_fn+0x6c2>
    8d2c:	ce 01       	movw	r24, r28
    8d2e:	01 96       	adiw	r24, 0x01	; 1
    8d30:	0e 94 e4 32 	call	0x65c8	; 0x65c8 <strupper>
    8d34:	93 fa       	bst	r9, 3
    8d36:	00 27       	eor	r16, r16
    8d38:	00 f9       	bld	r16, 0
    8d3a:	10 e0       	ldi	r17, 0x00	; 0
    8d3c:	97 01       	movw	r18, r14
    8d3e:	a2 01       	movw	r20, r4
    8d40:	be 01       	movw	r22, r28
    8d42:	6f 5f       	subi	r22, 0xFF	; 255
    8d44:	7f 4f       	sbci	r23, 0xFF	; 255
    8d46:	a5 96       	adiw	r28, 0x25	; 37
    8d48:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d4c:	a5 97       	sbiw	r28, 0x25	; 37
    8d4e:	4f dc       	rcall	.-1890   	; 0x85ee <_puts_pad>
    8d50:	69 c0       	rjmp	.+210    	; 0x8e24 <_printf_fn+0x7b2>
    8d52:	a3 96       	adiw	r28, 0x23	; 35
    8d54:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d56:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d58:	a3 97       	sbiw	r28, 0x23	; 35
    8d5a:	83 37       	cpi	r24, 0x73	; 115
    8d5c:	91 05       	cpc	r25, r1
    8d5e:	69 f4       	brne	.+26     	; 0x8d7a <_printf_fn+0x708>
    8d60:	71 01       	movw	r14, r2
    8d62:	92 e0       	ldi	r25, 0x02	; 2
    8d64:	e9 0e       	add	r14, r25
    8d66:	f1 1c       	adc	r15, r1
    8d68:	d1 01       	movw	r26, r2
    8d6a:	6d 91       	ld	r22, X+
    8d6c:	7c 91       	ld	r23, X
    8d6e:	61 15       	cp	r22, r1
    8d70:	71 05       	cpc	r23, r1
    8d72:	91 f4       	brne	.+36     	; 0x8d98 <_printf_fn+0x726>
    8d74:	65 e1       	ldi	r22, 0x15	; 21
    8d76:	74 e0       	ldi	r23, 0x04	; 4
    8d78:	0f c0       	rjmp	.+30     	; 0x8d98 <_printf_fn+0x726>
    8d7a:	71 01       	movw	r14, r2
    8d7c:	b2 e0       	ldi	r27, 0x02	; 2
    8d7e:	eb 0e       	add	r14, r27
    8d80:	f1 1c       	adc	r15, r1
    8d82:	f1 01       	movw	r30, r2
    8d84:	80 81       	ld	r24, Z
    8d86:	60 96       	adiw	r28, 0x10	; 16
    8d88:	8f af       	std	Y+63, r24	; 0x3f
    8d8a:	60 97       	sbiw	r28, 0x10	; 16
    8d8c:	61 96       	adiw	r28, 0x11	; 17
    8d8e:	1f ae       	std	Y+63, r1	; 0x3f
    8d90:	61 97       	sbiw	r28, 0x11	; 17
    8d92:	be 01       	movw	r22, r28
    8d94:	61 5b       	subi	r22, 0xB1	; 177
    8d96:	7f 4f       	sbci	r23, 0xFF	; 255
    8d98:	fb 01       	movw	r30, r22
    8d9a:	01 90       	ld	r0, Z+
    8d9c:	00 20       	and	r0, r0
    8d9e:	e9 f7       	brne	.-6      	; 0x8d9a <_printf_fn+0x728>
    8da0:	31 97       	sbiw	r30, 0x01	; 1
    8da2:	e6 1b       	sub	r30, r22
    8da4:	f7 0b       	sbc	r31, r23
    8da6:	a1 96       	adiw	r28, 0x21	; 33
    8da8:	2e ad       	ldd	r18, Y+62	; 0x3e
    8daa:	3f ad       	ldd	r19, Y+63	; 0x3f
    8dac:	a1 97       	sbiw	r28, 0x21	; 33
    8dae:	23 2b       	or	r18, r19
    8db0:	21 f4       	brne	.+8      	; 0x8dba <_printf_fn+0x748>
    8db2:	a1 96       	adiw	r28, 0x21	; 33
    8db4:	ff af       	std	Y+63, r31	; 0x3f
    8db6:	ee af       	std	Y+62, r30	; 0x3e
    8db8:	a1 97       	sbiw	r28, 0x21	; 33
    8dba:	a1 96       	adiw	r28, 0x21	; 33
    8dbc:	4e ad       	ldd	r20, Y+62	; 0x3e
    8dbe:	5f ad       	ldd	r21, Y+63	; 0x3f
    8dc0:	a1 97       	sbiw	r28, 0x21	; 33
    8dc2:	44 16       	cp	r4, r20
    8dc4:	55 06       	cpc	r5, r21
    8dc6:	3c f4       	brge	.+14     	; 0x8dd6 <_printf_fn+0x764>
    8dc8:	41 14       	cp	r4, r1
    8dca:	51 04       	cpc	r5, r1
    8dcc:	21 f0       	breq	.+8      	; 0x8dd6 <_printf_fn+0x764>
    8dce:	a1 96       	adiw	r28, 0x21	; 33
    8dd0:	5f ae       	std	Y+63, r5	; 0x3f
    8dd2:	4e ae       	std	Y+62, r4	; 0x3e
    8dd4:	a1 97       	sbiw	r28, 0x21	; 33
    8dd6:	93 fa       	bst	r9, 3
    8dd8:	00 27       	eor	r16, r16
    8dda:	00 f9       	bld	r16, 0
    8ddc:	10 e0       	ldi	r17, 0x00	; 0
    8dde:	a1 96       	adiw	r28, 0x21	; 33
    8de0:	2e ad       	ldd	r18, Y+62	; 0x3e
    8de2:	3f ad       	ldd	r19, Y+63	; 0x3f
    8de4:	a1 97       	sbiw	r28, 0x21	; 33
    8de6:	a2 01       	movw	r20, r4
    8de8:	a5 96       	adiw	r28, 0x25	; 37
    8dea:	8e ad       	ldd	r24, Y+62	; 0x3e
    8dec:	9f ad       	ldd	r25, Y+63	; 0x3f
    8dee:	a5 97       	sbiw	r28, 0x25	; 37
    8df0:	fe db       	rcall	.-2052   	; 0x85ee <_puts_pad>
    8df2:	17 01       	movw	r2, r14
    8df4:	17 c0       	rjmp	.+46     	; 0x8e24 <_printf_fn+0x7b2>
    8df6:	f6 01       	movw	r30, r12
    8df8:	5e 2d       	mov	r21, r14
    8dfa:	0e 94 20 e4 	call	0x1c840	; 0x1c840 <__xload_1>
    8dfe:	66 23       	and	r22, r22
    8e00:	89 f0       	breq	.+34     	; 0x8e24 <_printf_fn+0x7b2>
    8e02:	5f ef       	ldi	r21, 0xFF	; 255
    8e04:	c5 1a       	sub	r12, r21
    8e06:	d5 0a       	sbc	r13, r21
    8e08:	e5 0a       	sbc	r14, r21
    8e0a:	a5 96       	adiw	r28, 0x25	; 37
    8e0c:	ae ad       	ldd	r26, Y+62	; 0x3e
    8e0e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8e10:	a5 97       	sbiw	r28, 0x25	; 37
    8e12:	ed 91       	ld	r30, X+
    8e14:	fc 91       	ld	r31, X
    8e16:	11 97       	sbiw	r26, 0x01	; 1
    8e18:	cd 01       	movw	r24, r26
    8e1a:	09 95       	icall
    8e1c:	6c 14       	cp	r6, r12
    8e1e:	7d 04       	cpc	r7, r13
    8e20:	8e 04       	cpc	r8, r14
    8e22:	48 f7       	brcc	.-46     	; 0x8df6 <_printf_fn+0x784>
    8e24:	e8 2c       	mov	r14, r8
    8e26:	63 01       	movw	r12, r6
    8e28:	53 cc       	rjmp	.-1882   	; 0x86d0 <_printf_fn+0x5e>
    8e2a:	e2 e0       	ldi	r30, 0x02	; 2
    8e2c:	f0 e0       	ldi	r31, 0x00	; 0
    8e2e:	6f 96       	adiw	r28, 0x1f	; 31
    8e30:	ff af       	std	Y+63, r31	; 0x3f
    8e32:	ee af       	std	Y+62, r30	; 0x3e
    8e34:	6f 97       	sbiw	r28, 0x1f	; 31
    8e36:	5f cd       	rjmp	.-1346   	; 0x88f6 <_printf_fn+0x284>
    8e38:	6f 96       	adiw	r28, 0x1f	; 31
    8e3a:	ee ad       	ldd	r30, Y+62	; 0x3e
    8e3c:	ff ad       	ldd	r31, Y+63	; 0x3f
    8e3e:	6f 97       	sbiw	r28, 0x1f	; 31
    8e40:	32 97       	sbiw	r30, 0x02	; 2
    8e42:	61 f4       	brne	.+24     	; 0x8e5c <_printf_fn+0x7ea>
    8e44:	51 01       	movw	r10, r2
    8e46:	f2 e0       	ldi	r31, 0x02	; 2
    8e48:	af 0e       	add	r10, r31
    8e4a:	b1 1c       	adc	r11, r1
    8e4c:	d1 01       	movw	r26, r2
    8e4e:	8d 91       	ld	r24, X+
    8e50:	9c 91       	ld	r25, X
    8e52:	65 96       	adiw	r28, 0x15	; 21
    8e54:	9f af       	std	Y+63, r25	; 0x3f
    8e56:	8e af       	std	Y+62, r24	; 0x3e
    8e58:	65 97       	sbiw	r28, 0x15	; 21
    8e5a:	cd cd       	rjmp	.-1126   	; 0x89f6 <_printf_fn+0x384>
    8e5c:	6f 96       	adiw	r28, 0x1f	; 31
    8e5e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8e60:	3f ad       	ldd	r19, Y+63	; 0x3f
    8e62:	6f 97       	sbiw	r28, 0x1f	; 31
    8e64:	24 30       	cpi	r18, 0x04	; 4
    8e66:	31 05       	cpc	r19, r1
    8e68:	09 f0       	breq	.+2      	; 0x8e6c <_printf_fn+0x7fa>
    8e6a:	06 ce       	rjmp	.-1012   	; 0x8a78 <_printf_fn+0x406>
    8e6c:	51 01       	movw	r10, r2
    8e6e:	f4 e0       	ldi	r31, 0x04	; 4
    8e70:	af 0e       	add	r10, r31
    8e72:	b1 1c       	adc	r11, r1
    8e74:	f1 01       	movw	r30, r2
    8e76:	80 81       	ld	r24, Z
    8e78:	91 81       	ldd	r25, Z+1	; 0x01
    8e7a:	a2 81       	ldd	r26, Z+2	; 0x02
    8e7c:	b3 81       	ldd	r27, Z+3	; 0x03
    8e7e:	2f 96       	adiw	r28, 0x0f	; 15
    8e80:	8c af       	std	Y+60, r24	; 0x3c
    8e82:	9d af       	std	Y+61, r25	; 0x3d
    8e84:	ae af       	std	Y+62, r26	; 0x3e
    8e86:	bf af       	std	Y+63, r27	; 0x3f
    8e88:	2f 97       	sbiw	r28, 0x0f	; 15
    8e8a:	e4 cd       	rjmp	.-1080   	; 0x8a54 <_printf_fn+0x3e2>
    8e8c:	c5 59       	subi	r28, 0x95	; 149
    8e8e:	df 4f       	sbci	r29, 0xFF	; 255
    8e90:	e2 e1       	ldi	r30, 0x12	; 18
    8e92:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

00008e96 <vsnprintf_P>:
    8e96:	a8 e0       	ldi	r26, 0x08	; 8
    8e98:	b0 e0       	ldi	r27, 0x00	; 0
    8e9a:	e1 e5       	ldi	r30, 0x51	; 81
    8e9c:	f7 e4       	ldi	r31, 0x47	; 71
    8e9e:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
    8ea2:	7c 01       	movw	r14, r24
    8ea4:	cb 01       	movw	r24, r22
    8ea6:	64 2f       	mov	r22, r20
    8ea8:	a9 01       	movw	r20, r18
    8eaa:	98 01       	movw	r18, r16
    8eac:	f7 01       	movw	r30, r14
    8eae:	10 82       	st	Z, r1
    8eb0:	e6 e6       	ldi	r30, 0x66	; 102
    8eb2:	ff e3       	ldi	r31, 0x3F	; 63
    8eb4:	fa 83       	std	Y+2, r31	; 0x02
    8eb6:	e9 83       	std	Y+1, r30	; 0x01
    8eb8:	9e 83       	std	Y+6, r25	; 0x06
    8eba:	8d 83       	std	Y+5, r24	; 0x05
    8ebc:	18 86       	std	Y+8, r1	; 0x08
    8ebe:	1f 82       	std	Y+7, r1	; 0x07
    8ec0:	fc 82       	std	Y+4, r15	; 0x04
    8ec2:	eb 82       	std	Y+3, r14	; 0x03
    8ec4:	ce 01       	movw	r24, r28
    8ec6:	01 96       	adiw	r24, 0x01	; 1
    8ec8:	d4 db       	rcall	.-2136   	; 0x8672 <_printf_fn>
    8eca:	f7 01       	movw	r30, r14
    8ecc:	01 90       	ld	r0, Z+
    8ece:	00 20       	and	r0, r0
    8ed0:	e9 f7       	brne	.-6      	; 0x8ecc <vsnprintf_P+0x36>
    8ed2:	cf 01       	movw	r24, r30
    8ed4:	01 97       	sbiw	r24, 0x01	; 1
    8ed6:	8e 19       	sub	r24, r14
    8ed8:	9f 09       	sbc	r25, r15
    8eda:	28 96       	adiw	r28, 0x08	; 8
    8edc:	e6 e0       	ldi	r30, 0x06	; 6
    8ede:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00008ee2 <snprintf_P>:
    8ee2:	a0 e0       	ldi	r26, 0x00	; 0
    8ee4:	b0 e0       	ldi	r27, 0x00	; 0
    8ee6:	e7 e7       	ldi	r30, 0x77	; 119
    8ee8:	f7 e4       	ldi	r31, 0x47	; 71
    8eea:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    8eee:	8e 01       	movw	r16, r28
    8ef0:	02 5f       	subi	r16, 0xF2	; 242
    8ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    8ef4:	2b 85       	ldd	r18, Y+11	; 0x0b
    8ef6:	3c 85       	ldd	r19, Y+12	; 0x0c
    8ef8:	4d 85       	ldd	r20, Y+13	; 0x0d
    8efa:	69 85       	ldd	r22, Y+9	; 0x09
    8efc:	7a 85       	ldd	r23, Y+10	; 0x0a
    8efe:	8f 81       	ldd	r24, Y+7	; 0x07
    8f00:	98 85       	ldd	r25, Y+8	; 0x08
    8f02:	c9 df       	rcall	.-110    	; 0x8e96 <vsnprintf_P>
    8f04:	e4 e0       	ldi	r30, 0x04	; 4
    8f06:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00008f0a <sprintf_P>:
    8f0a:	a0 e0       	ldi	r26, 0x00	; 0
    8f0c:	b0 e0       	ldi	r27, 0x00	; 0
    8f0e:	eb e8       	ldi	r30, 0x8B	; 139
    8f10:	f7 e4       	ldi	r31, 0x47	; 71
    8f12:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    8f16:	8e 01       	movw	r16, r28
    8f18:	04 5f       	subi	r16, 0xF4	; 244
    8f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    8f1c:	29 85       	ldd	r18, Y+9	; 0x09
    8f1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    8f20:	4b 85       	ldd	r20, Y+11	; 0x0b
    8f22:	60 e0       	ldi	r22, 0x00	; 0
    8f24:	74 e0       	ldi	r23, 0x04	; 4
    8f26:	8f 81       	ldd	r24, Y+7	; 0x07
    8f28:	98 85       	ldd	r25, Y+8	; 0x08
    8f2a:	b5 df       	rcall	.-150    	; 0x8e96 <vsnprintf_P>
    8f2c:	e4 e0       	ldi	r30, 0x04	; 4
    8f2e:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00008f32 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8f32:	a8 e0       	ldi	r26, 0x08	; 8
    8f34:	b0 e0       	ldi	r27, 0x00	; 0
    8f36:	ef e9       	ldi	r30, 0x9F	; 159
    8f38:	f7 e4       	ldi	r31, 0x47	; 71
    8f3a:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    8f3e:	9e 01       	movw	r18, r28
    8f40:	23 5f       	subi	r18, 0xF3	; 243
    8f42:	3f 4f       	sbci	r19, 0xFF	; 255
    8f44:	f9 01       	movw	r30, r18
    8f46:	41 91       	ld	r20, Z+
    8f48:	51 91       	ld	r21, Z+
    8f4a:	61 91       	ld	r22, Z+
    8f4c:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8f4e:	8f e7       	ldi	r24, 0x7F	; 127
    8f50:	9f e3       	ldi	r25, 0x3F	; 63
    8f52:	9a 83       	std	Y+2, r25	; 0x02
    8f54:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8f56:	18 86       	std	Y+8, r1	; 0x08
    8f58:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8f5a:	ce 01       	movw	r24, r28
    8f5c:	01 96       	adiw	r24, 0x01	; 1
    8f5e:	89 db       	rcall	.-2286   	; 0x8672 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8f60:	8f 81       	ldd	r24, Y+7	; 0x07
    8f62:	98 85       	ldd	r25, Y+8	; 0x08
    8f64:	28 96       	adiw	r28, 0x08	; 8
    8f66:	e2 e0       	ldi	r30, 0x02	; 2
    8f68:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00008f6c <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8f6c:	9c 01       	movw	r18, r24
    8f6e:	20 53       	subi	r18, 0x30	; 48
    8f70:	31 09       	sbc	r19, r1
    8f72:	2a 30       	cpi	r18, 0x0A	; 10
    8f74:	31 05       	cpc	r19, r1
    8f76:	10 f4       	brcc	.+4      	; 0x8f7c <atodigit+0x10>
    8f78:	c9 01       	movw	r24, r18
    8f7a:	10 c0       	rjmp	.+32     	; 0x8f9c <atodigit+0x30>
    8f7c:	9c 01       	movw	r18, r24
    8f7e:	21 54       	subi	r18, 0x41	; 65
    8f80:	31 09       	sbc	r19, r1
    8f82:	26 30       	cpi	r18, 0x06	; 6
    8f84:	31 05       	cpc	r19, r1
    8f86:	10 f4       	brcc	.+4      	; 0x8f8c <atodigit+0x20>
    8f88:	c7 97       	sbiw	r24, 0x37	; 55
    8f8a:	08 c0       	rjmp	.+16     	; 0x8f9c <atodigit+0x30>
    8f8c:	9c 01       	movw	r18, r24
    8f8e:	21 56       	subi	r18, 0x61	; 97
    8f90:	31 09       	sbc	r19, r1
    8f92:	26 30       	cpi	r18, 0x06	; 6
    8f94:	31 05       	cpc	r19, r1
    8f96:	28 f4       	brcc	.+10     	; 0x8fa2 <atodigit+0x36>
    8f98:	87 55       	subi	r24, 0x57	; 87
    8f9a:	91 09       	sbc	r25, r1
    8f9c:	86 17       	cp	r24, r22
    8f9e:	97 07       	cpc	r25, r23
    8fa0:	14 f0       	brlt	.+4      	; 0x8fa6 <atodigit+0x3a>
    8fa2:	8f ef       	ldi	r24, 0xFF	; 255
    8fa4:	9f ef       	ldi	r25, 0xFF	; 255
    8fa6:	08 95       	ret

00008fa8 <strtol>:
    8fa8:	a0 e0       	ldi	r26, 0x00	; 0
    8faa:	b0 e0       	ldi	r27, 0x00	; 0
    8fac:	ea ed       	ldi	r30, 0xDA	; 218
    8fae:	f7 e4       	ldi	r31, 0x47	; 71
    8fb0:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    8fb4:	2b 01       	movw	r4, r22
    8fb6:	8a 01       	movw	r16, r20
    8fb8:	ec 01       	movw	r28, r24
    8fba:	28 81       	ld	r18, Y
    8fbc:	01 96       	adiw	r24, 0x01	; 1
    8fbe:	20 32       	cpi	r18, 0x20	; 32
    8fc0:	d9 f3       	breq	.-10     	; 0x8fb8 <strtol+0x10>
    8fc2:	29 30       	cpi	r18, 0x09	; 9
    8fc4:	c9 f3       	breq	.-14     	; 0x8fb8 <strtol+0x10>
    8fc6:	2d 32       	cpi	r18, 0x2D	; 45
    8fc8:	29 f4       	brne	.+10     	; 0x8fd4 <strtol+0x2c>
    8fca:	ec 01       	movw	r28, r24
    8fcc:	66 24       	eor	r6, r6
    8fce:	63 94       	inc	r6
    8fd0:	71 2c       	mov	r7, r1
    8fd2:	05 c0       	rjmp	.+10     	; 0x8fde <strtol+0x36>
    8fd4:	2b 32       	cpi	r18, 0x2B	; 43
    8fd6:	09 f4       	brne	.+2      	; 0x8fda <strtol+0x32>
    8fd8:	ec 01       	movw	r28, r24
    8fda:	61 2c       	mov	r6, r1
    8fdc:	71 2c       	mov	r7, r1
    8fde:	9e 01       	movw	r18, r28
    8fe0:	2f 5f       	subi	r18, 0xFF	; 255
    8fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    8fe4:	88 81       	ld	r24, Y
    8fe6:	80 33       	cpi	r24, 0x30	; 48
    8fe8:	11 f4       	brne	.+4      	; 0x8fee <strtol+0x46>
    8fea:	e9 01       	movw	r28, r18
    8fec:	f8 cf       	rjmp	.-16     	; 0x8fde <strtol+0x36>
    8fee:	c1 2c       	mov	r12, r1
    8ff0:	d1 2c       	mov	r13, r1
    8ff2:	76 01       	movw	r14, r12
    8ff4:	48 01       	movw	r8, r16
    8ff6:	01 2e       	mov	r0, r17
    8ff8:	00 0c       	add	r0, r0
    8ffa:	aa 08       	sbc	r10, r10
    8ffc:	bb 08       	sbc	r11, r11
    8ffe:	3c 2e       	mov	r3, r28
    9000:	2d 2e       	mov	r2, r29
    9002:	89 91       	ld	r24, Y+
    9004:	88 23       	and	r24, r24
    9006:	31 f0       	breq	.+12     	; 0x9014 <strtol+0x6c>
    9008:	b8 01       	movw	r22, r16
    900a:	90 e0       	ldi	r25, 0x00	; 0
    900c:	af df       	rcall	.-162    	; 0x8f6c <atodigit>
    900e:	fc 01       	movw	r30, r24
    9010:	97 ff       	sbrs	r25, 7
    9012:	0c c0       	rjmp	.+24     	; 0x902c <strtol+0x84>
    9014:	61 14       	cp	r6, r1
    9016:	71 04       	cpc	r7, r1
    9018:	c1 f0       	breq	.+48     	; 0x904a <strtol+0xa2>
    901a:	f0 94       	com	r15
    901c:	e0 94       	com	r14
    901e:	d0 94       	com	r13
    9020:	c0 94       	com	r12
    9022:	c1 1c       	adc	r12, r1
    9024:	d1 1c       	adc	r13, r1
    9026:	e1 1c       	adc	r14, r1
    9028:	f1 1c       	adc	r15, r1
    902a:	0f c0       	rjmp	.+30     	; 0x904a <strtol+0xa2>
    902c:	a5 01       	movw	r20, r10
    902e:	94 01       	movw	r18, r8
    9030:	c7 01       	movw	r24, r14
    9032:	b6 01       	movw	r22, r12
    9034:	0e 94 3a e3 	call	0x1c674	; 0x1c674 <__mulsi3>
    9038:	6f 01       	movw	r12, r30
    903a:	ff 0f       	add	r31, r31
    903c:	ee 08       	sbc	r14, r14
    903e:	ff 08       	sbc	r15, r15
    9040:	c6 0e       	add	r12, r22
    9042:	d7 1e       	adc	r13, r23
    9044:	e8 1e       	adc	r14, r24
    9046:	f9 1e       	adc	r15, r25
    9048:	da cf       	rjmp	.-76     	; 0x8ffe <strtol+0x56>
    904a:	41 14       	cp	r4, r1
    904c:	51 04       	cpc	r5, r1
    904e:	19 f0       	breq	.+6      	; 0x9056 <strtol+0xae>
    9050:	f2 01       	movw	r30, r4
    9052:	30 82       	st	Z, r3
    9054:	21 82       	std	Z+1, r2	; 0x01
    9056:	c7 01       	movw	r24, r14
    9058:	b6 01       	movw	r22, r12
    905a:	cd b7       	in	r28, 0x3d	; 61
    905c:	de b7       	in	r29, 0x3e	; 62
    905e:	e2 e1       	ldi	r30, 0x12	; 18
    9060:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

00009064 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    9064:	4a e0       	ldi	r20, 0x0A	; 10
    9066:	50 e0       	ldi	r21, 0x00	; 0
    9068:	60 e0       	ldi	r22, 0x00	; 0
    906a:	70 e0       	ldi	r23, 0x00	; 0
    906c:	9d df       	rcall	.-198    	; 0x8fa8 <strtol>
    return((int)num);
}
    906e:	cb 01       	movw	r24, r22
    9070:	08 95       	ret

00009072 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    9072:	4a e0       	ldi	r20, 0x0A	; 10
    9074:	50 e0       	ldi	r21, 0x00	; 0
    9076:	60 e0       	ldi	r22, 0x00	; 0
    9078:	70 e0       	ldi	r23, 0x00	; 0
    907a:	96 cf       	rjmp	.-212    	; 0x8fa8 <strtol>
    return(num);
}
    907c:	08 95       	ret

0000907e <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    907e:	fc 01       	movw	r30, r24
    9080:	62 81       	ldd	r22, Z+2	; 0x02
    9082:	73 81       	ldd	r23, Z+3	; 0x03
    9084:	cb 01       	movw	r24, r22
    9086:	a0 e0       	ldi	r26, 0x00	; 0
    9088:	b0 e0       	ldi	r27, 0x00	; 0
    908a:	ba 2f       	mov	r27, r26
    908c:	a9 2f       	mov	r26, r25
    908e:	98 2f       	mov	r25, r24
    9090:	88 27       	eor	r24, r24
    9092:	21 81       	ldd	r18, Z+1	; 0x01
    9094:	82 2b       	or	r24, r18
    9096:	ba 2f       	mov	r27, r26
    9098:	a9 2f       	mov	r26, r25
    909a:	98 2f       	mov	r25, r24
    909c:	88 27       	eor	r24, r24
    909e:	20 81       	ld	r18, Z
    90a0:	bc 01       	movw	r22, r24
    90a2:	cd 01       	movw	r24, r26
    90a4:	62 2b       	or	r22, r18
    90a6:	08 95       	ret

000090a8 <st_dword>:
    90a8:	fc 01       	movw	r30, r24
    90aa:	40 83       	st	Z, r20
    90ac:	51 83       	std	Z+1, r21	; 0x01
    90ae:	62 83       	std	Z+2, r22	; 0x02
    90b0:	73 83       	std	Z+3, r23	; 0x03
    90b2:	08 95       	ret

000090b4 <mem_set>:
    90b4:	48 0f       	add	r20, r24
    90b6:	59 1f       	adc	r21, r25
    90b8:	fc 01       	movw	r30, r24
    90ba:	61 93       	st	Z+, r22
    90bc:	cf 01       	movw	r24, r30
    90be:	e4 17       	cp	r30, r20
    90c0:	f5 07       	cpc	r31, r21
    90c2:	d1 f7       	brne	.-12     	; 0x90b8 <mem_set+0x4>
    90c4:	08 95       	ret

000090c6 <mem_cmp>:
    90c6:	dc 01       	movw	r26, r24
    90c8:	fb 01       	movw	r30, r22
    90ca:	2d 91       	ld	r18, X+
    90cc:	81 91       	ld	r24, Z+
    90ce:	30 e0       	ldi	r19, 0x00	; 0
    90d0:	b9 01       	movw	r22, r18
    90d2:	68 1b       	sub	r22, r24
    90d4:	71 09       	sbc	r23, r1
    90d6:	cb 01       	movw	r24, r22
    90d8:	41 50       	subi	r20, 0x01	; 1
    90da:	51 09       	sbc	r21, r1
    90dc:	11 f0       	breq	.+4      	; 0x90e2 <mem_cmp+0x1c>
    90de:	00 97       	sbiw	r24, 0x00	; 0
    90e0:	a1 f3       	breq	.-24     	; 0x90ca <mem_cmp+0x4>
    90e2:	08 95       	ret

000090e4 <tchar2uni>:
    90e4:	0f 93       	push	r16
    90e6:	1f 93       	push	r17
    90e8:	fc 01       	movw	r30, r24
    90ea:	a0 81       	ld	r26, Z
    90ec:	b1 81       	ldd	r27, Z+1	; 0x01
    90ee:	fd 01       	movw	r30, r26
    90f0:	31 96       	adiw	r30, 0x01	; 1
    90f2:	4c 91       	ld	r20, X
    90f4:	47 fd       	sbrc	r20, 7
    90f6:	04 c0       	rjmp	.+8      	; 0x9100 <tchar2uni+0x1c>
    90f8:	50 e0       	ldi	r21, 0x00	; 0
    90fa:	60 e0       	ldi	r22, 0x00	; 0
    90fc:	70 e0       	ldi	r23, 0x00	; 0
    90fe:	68 c0       	rjmp	.+208    	; 0x91d0 <tchar2uni+0xec>
    9100:	24 2f       	mov	r18, r20
    9102:	20 7e       	andi	r18, 0xE0	; 224
    9104:	20 3c       	cpi	r18, 0xC0	; 192
    9106:	39 f4       	brne	.+14     	; 0x9116 <tchar2uni+0x32>
    9108:	4f 71       	andi	r20, 0x1F	; 31
    910a:	50 e0       	ldi	r21, 0x00	; 0
    910c:	60 e0       	ldi	r22, 0x00	; 0
    910e:	70 e0       	ldi	r23, 0x00	; 0
    9110:	21 e0       	ldi	r18, 0x01	; 1
    9112:	30 e0       	ldi	r19, 0x00	; 0
    9114:	16 c0       	rjmp	.+44     	; 0x9142 <tchar2uni+0x5e>
    9116:	24 2f       	mov	r18, r20
    9118:	20 7f       	andi	r18, 0xF0	; 240
    911a:	20 3e       	cpi	r18, 0xE0	; 224
    911c:	39 f4       	brne	.+14     	; 0x912c <tchar2uni+0x48>
    911e:	4f 70       	andi	r20, 0x0F	; 15
    9120:	50 e0       	ldi	r21, 0x00	; 0
    9122:	60 e0       	ldi	r22, 0x00	; 0
    9124:	70 e0       	ldi	r23, 0x00	; 0
    9126:	22 e0       	ldi	r18, 0x02	; 2
    9128:	30 e0       	ldi	r19, 0x00	; 0
    912a:	0b c0       	rjmp	.+22     	; 0x9142 <tchar2uni+0x5e>
    912c:	24 2f       	mov	r18, r20
    912e:	28 7f       	andi	r18, 0xF8	; 248
    9130:	20 3f       	cpi	r18, 0xF0	; 240
    9132:	09 f0       	breq	.+2      	; 0x9136 <tchar2uni+0x52>
    9134:	54 c0       	rjmp	.+168    	; 0x91de <tchar2uni+0xfa>
    9136:	47 70       	andi	r20, 0x07	; 7
    9138:	50 e0       	ldi	r21, 0x00	; 0
    913a:	60 e0       	ldi	r22, 0x00	; 0
    913c:	70 e0       	ldi	r23, 0x00	; 0
    913e:	23 e0       	ldi	r18, 0x03	; 3
    9140:	30 e0       	ldi	r19, 0x00	; 0
    9142:	31 96       	adiw	r30, 0x01	; 1
    9144:	df 01       	movw	r26, r30
    9146:	11 97       	sbiw	r26, 0x01	; 1
    9148:	ac 91       	ld	r26, X
    914a:	ba 2f       	mov	r27, r26
    914c:	b0 7c       	andi	r27, 0xC0	; 192
    914e:	b0 38       	cpi	r27, 0x80	; 128
    9150:	09 f0       	breq	.+2      	; 0x9154 <tchar2uni+0x70>
    9152:	45 c0       	rjmp	.+138    	; 0x91de <tchar2uni+0xfa>
    9154:	b6 e0       	ldi	r27, 0x06	; 6
    9156:	44 0f       	add	r20, r20
    9158:	55 1f       	adc	r21, r21
    915a:	66 1f       	adc	r22, r22
    915c:	77 1f       	adc	r23, r23
    915e:	ba 95       	dec	r27
    9160:	d1 f7       	brne	.-12     	; 0x9156 <tchar2uni+0x72>
    9162:	af 73       	andi	r26, 0x3F	; 63
    9164:	4a 2b       	or	r20, r26
    9166:	21 50       	subi	r18, 0x01	; 1
    9168:	31 09       	sbc	r19, r1
    916a:	59 f7       	brne	.-42     	; 0x9142 <tchar2uni+0x5e>
    916c:	8a 01       	movw	r16, r20
    916e:	9b 01       	movw	r18, r22
    9170:	00 58       	subi	r16, 0x80	; 128
    9172:	11 09       	sbc	r17, r1
    9174:	21 09       	sbc	r18, r1
    9176:	31 09       	sbc	r19, r1
    9178:	00 38       	cpi	r16, 0x80	; 128
    917a:	1f 4f       	sbci	r17, 0xFF	; 255
    917c:	20 41       	sbci	r18, 0x10	; 16
    917e:	31 05       	cpc	r19, r1
    9180:	70 f5       	brcc	.+92     	; 0x91de <tchar2uni+0xfa>
    9182:	8a 01       	movw	r16, r20
    9184:	9b 01       	movw	r18, r22
    9186:	18 5d       	subi	r17, 0xD8	; 216
    9188:	21 09       	sbc	r18, r1
    918a:	31 09       	sbc	r19, r1
    918c:	01 15       	cp	r16, r1
    918e:	18 40       	sbci	r17, 0x08	; 8
    9190:	21 05       	cpc	r18, r1
    9192:	31 05       	cpc	r19, r1
    9194:	20 f1       	brcs	.+72     	; 0x91de <tchar2uni+0xfa>
    9196:	41 15       	cp	r20, r1
    9198:	51 05       	cpc	r21, r1
    919a:	21 e0       	ldi	r18, 0x01	; 1
    919c:	62 07       	cpc	r22, r18
    919e:	71 05       	cpc	r23, r1
    91a0:	b8 f0       	brcs	.+46     	; 0x91d0 <tchar2uni+0xec>
    91a2:	8a 01       	movw	r16, r20
    91a4:	9b 01       	movw	r18, r22
    91a6:	21 50       	subi	r18, 0x01	; 1
    91a8:	31 09       	sbc	r19, r1
    91aa:	a6 e0       	ldi	r26, 0x06	; 6
    91ac:	00 0f       	add	r16, r16
    91ae:	11 1f       	adc	r17, r17
    91b0:	22 1f       	adc	r18, r18
    91b2:	33 1f       	adc	r19, r19
    91b4:	aa 95       	dec	r26
    91b6:	d1 f7       	brne	.-12     	; 0x91ac <tchar2uni+0xc8>
    91b8:	00 27       	eor	r16, r16
    91ba:	11 27       	eor	r17, r17
    91bc:	33 70       	andi	r19, 0x03	; 3
    91be:	53 70       	andi	r21, 0x03	; 3
    91c0:	66 27       	eor	r22, r22
    91c2:	77 27       	eor	r23, r23
    91c4:	5c 6d       	ori	r21, 0xDC	; 220
    91c6:	78 6d       	ori	r23, 0xD8	; 216
    91c8:	40 2b       	or	r20, r16
    91ca:	51 2b       	or	r21, r17
    91cc:	62 2b       	or	r22, r18
    91ce:	73 2b       	or	r23, r19
    91d0:	dc 01       	movw	r26, r24
    91d2:	ed 93       	st	X+, r30
    91d4:	fc 93       	st	X, r31
    91d6:	34 2f       	mov	r19, r20
    91d8:	25 2f       	mov	r18, r21
    91da:	cb 01       	movw	r24, r22
    91dc:	04 c0       	rjmp	.+8      	; 0x91e6 <tchar2uni+0x102>
    91de:	3f ef       	ldi	r19, 0xFF	; 255
    91e0:	2f ef       	ldi	r18, 0xFF	; 255
    91e2:	8f ef       	ldi	r24, 0xFF	; 255
    91e4:	9f ef       	ldi	r25, 0xFF	; 255
    91e6:	63 2f       	mov	r22, r19
    91e8:	72 2f       	mov	r23, r18
    91ea:	1f 91       	pop	r17
    91ec:	0f 91       	pop	r16
    91ee:	08 95       	ret

000091f0 <clst2sect>:
    91f0:	0f 93       	push	r16
    91f2:	1f 93       	push	r17
    91f4:	fc 01       	movw	r30, r24
    91f6:	9a 01       	movw	r18, r20
    91f8:	ab 01       	movw	r20, r22
    91fa:	22 50       	subi	r18, 0x02	; 2
    91fc:	31 09       	sbc	r19, r1
    91fe:	41 09       	sbc	r20, r1
    9200:	51 09       	sbc	r21, r1
    9202:	81 8d       	ldd	r24, Z+25	; 0x19
    9204:	92 8d       	ldd	r25, Z+26	; 0x1a
    9206:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9208:	b4 8d       	ldd	r27, Z+28	; 0x1c
    920a:	02 97       	sbiw	r24, 0x02	; 2
    920c:	a1 09       	sbc	r26, r1
    920e:	b1 09       	sbc	r27, r1
    9210:	28 17       	cp	r18, r24
    9212:	39 07       	cpc	r19, r25
    9214:	4a 07       	cpc	r20, r26
    9216:	5b 07       	cpc	r21, r27
    9218:	68 f4       	brcc	.+26     	; 0x9234 <clst2sect+0x44>
    921a:	a1 85       	ldd	r26, Z+9	; 0x09
    921c:	b2 85       	ldd	r27, Z+10	; 0x0a
    921e:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
    9222:	05 a5       	ldd	r16, Z+45	; 0x2d
    9224:	16 a5       	ldd	r17, Z+46	; 0x2e
    9226:	27 a5       	ldd	r18, Z+47	; 0x2f
    9228:	30 a9       	ldd	r19, Z+48	; 0x30
    922a:	60 0f       	add	r22, r16
    922c:	71 1f       	adc	r23, r17
    922e:	82 1f       	adc	r24, r18
    9230:	93 1f       	adc	r25, r19
    9232:	03 c0       	rjmp	.+6      	; 0x923a <clst2sect+0x4a>
    9234:	60 e0       	ldi	r22, 0x00	; 0
    9236:	70 e0       	ldi	r23, 0x00	; 0
    9238:	cb 01       	movw	r24, r22
    923a:	1f 91       	pop	r17
    923c:	0f 91       	pop	r16
    923e:	08 95       	ret

00009240 <clmt_clust>:
    9240:	cf 93       	push	r28
    9242:	df 93       	push	r29
    9244:	fc 01       	movw	r30, r24
    9246:	c2 a1       	ldd	r28, Z+34	; 0x22
    9248:	d3 a1       	ldd	r29, Z+35	; 0x23
    924a:	24 96       	adiw	r28, 0x04	; 4
    924c:	cb 01       	movw	r24, r22
    924e:	ba 01       	movw	r22, r20
    9250:	29 e0       	ldi	r18, 0x09	; 9
    9252:	96 95       	lsr	r25
    9254:	87 95       	ror	r24
    9256:	77 95       	ror	r23
    9258:	67 95       	ror	r22
    925a:	2a 95       	dec	r18
    925c:	d1 f7       	brne	.-12     	; 0x9252 <clmt_clust+0x12>
    925e:	01 90       	ld	r0, Z+
    9260:	f0 81       	ld	r31, Z
    9262:	e0 2d       	mov	r30, r0
    9264:	21 85       	ldd	r18, Z+9	; 0x09
    9266:	32 85       	ldd	r19, Z+10	; 0x0a
    9268:	40 e0       	ldi	r20, 0x00	; 0
    926a:	50 e0       	ldi	r21, 0x00	; 0
    926c:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    9270:	88 81       	ld	r24, Y
    9272:	99 81       	ldd	r25, Y+1	; 0x01
    9274:	aa 81       	ldd	r26, Y+2	; 0x02
    9276:	bb 81       	ldd	r27, Y+3	; 0x03
    9278:	00 97       	sbiw	r24, 0x00	; 0
    927a:	a1 05       	cpc	r26, r1
    927c:	b1 05       	cpc	r27, r1
    927e:	b1 f0       	breq	.+44     	; 0x92ac <clmt_clust+0x6c>
    9280:	28 17       	cp	r18, r24
    9282:	39 07       	cpc	r19, r25
    9284:	4a 07       	cpc	r20, r26
    9286:	5b 07       	cpc	r21, r27
    9288:	30 f0       	brcs	.+12     	; 0x9296 <clmt_clust+0x56>
    928a:	28 1b       	sub	r18, r24
    928c:	39 0b       	sbc	r19, r25
    928e:	4a 0b       	sbc	r20, r26
    9290:	5b 0b       	sbc	r21, r27
    9292:	28 96       	adiw	r28, 0x08	; 8
    9294:	ed cf       	rjmp	.-38     	; 0x9270 <clmt_clust+0x30>
    9296:	8c 81       	ldd	r24, Y+4	; 0x04
    9298:	9d 81       	ldd	r25, Y+5	; 0x05
    929a:	ae 81       	ldd	r26, Y+6	; 0x06
    929c:	bf 81       	ldd	r27, Y+7	; 0x07
    929e:	bc 01       	movw	r22, r24
    92a0:	cd 01       	movw	r24, r26
    92a2:	62 0f       	add	r22, r18
    92a4:	73 1f       	adc	r23, r19
    92a6:	84 1f       	adc	r24, r20
    92a8:	95 1f       	adc	r25, r21
    92aa:	03 c0       	rjmp	.+6      	; 0x92b2 <clmt_clust+0x72>
    92ac:	60 e0       	ldi	r22, 0x00	; 0
    92ae:	70 e0       	ldi	r23, 0x00	; 0
    92b0:	cb 01       	movw	r24, r22
    92b2:	df 91       	pop	r29
    92b4:	cf 91       	pop	r28
    92b6:	08 95       	ret

000092b8 <sum_sfn>:
    92b8:	fc 01       	movw	r30, r24
    92ba:	9c 01       	movw	r18, r24
    92bc:	25 5f       	subi	r18, 0xF5	; 245
    92be:	3f 4f       	sbci	r19, 0xFF	; 255
    92c0:	80 e0       	ldi	r24, 0x00	; 0
    92c2:	98 2f       	mov	r25, r24
    92c4:	90 fb       	bst	r25, 0
    92c6:	97 95       	ror	r25
    92c8:	97 f9       	bld	r25, 7
    92ca:	81 91       	ld	r24, Z+
    92cc:	89 0f       	add	r24, r25
    92ce:	e2 17       	cp	r30, r18
    92d0:	f3 07       	cpc	r31, r19
    92d2:	b9 f7       	brne	.-18     	; 0x92c2 <sum_sfn+0xa>
    92d4:	08 95       	ret

000092d6 <get_ldnumber>:
    92d6:	cf 93       	push	r28
    92d8:	df 93       	push	r29
    92da:	dc 01       	movw	r26, r24
    92dc:	ed 91       	ld	r30, X+
    92de:	fc 91       	ld	r31, X
    92e0:	11 97       	sbiw	r26, 0x01	; 1
    92e2:	30 97       	sbiw	r30, 0x00	; 0
    92e4:	f9 f0       	breq	.+62     	; 0x9324 <get_ldnumber+0x4e>
    92e6:	9f 01       	movw	r18, r30
    92e8:	2f 5f       	subi	r18, 0xFF	; 255
    92ea:	3f 4f       	sbci	r19, 0xFF	; 255
    92ec:	e9 01       	movw	r28, r18
    92ee:	21 97       	sbiw	r28, 0x01	; 1
    92f0:	88 81       	ld	r24, Y
    92f2:	80 32       	cpi	r24, 0x20	; 32
    92f4:	18 f0       	brcs	.+6      	; 0x92fc <get_ldnumber+0x26>
    92f6:	8a 33       	cpi	r24, 0x3A	; 58
    92f8:	b9 f7       	brne	.-18     	; 0x92e8 <get_ldnumber+0x12>
    92fa:	04 c0       	rjmp	.+8      	; 0x9304 <get_ldnumber+0x2e>
    92fc:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <CurrVol>
    9300:	90 e0       	ldi	r25, 0x00	; 0
    9302:	12 c0       	rjmp	.+36     	; 0x9328 <get_ldnumber+0x52>
    9304:	90 81       	ld	r25, Z
    9306:	80 ed       	ldi	r24, 0xD0	; 208
    9308:	89 0f       	add	r24, r25
    930a:	8a 30       	cpi	r24, 0x0A	; 10
    930c:	58 f4       	brcc	.+22     	; 0x9324 <get_ldnumber+0x4e>
    930e:	32 96       	adiw	r30, 0x02	; 2
    9310:	2e 17       	cp	r18, r30
    9312:	3f 07       	cpc	r19, r31
    9314:	39 f4       	brne	.+14     	; 0x9324 <get_ldnumber+0x4e>
    9316:	90 33       	cpi	r25, 0x30	; 48
    9318:	29 f4       	brne	.+10     	; 0x9324 <get_ldnumber+0x4e>
    931a:	2d 93       	st	X+, r18
    931c:	3c 93       	st	X, r19
    931e:	80 e0       	ldi	r24, 0x00	; 0
    9320:	90 e0       	ldi	r25, 0x00	; 0
    9322:	02 c0       	rjmp	.+4      	; 0x9328 <get_ldnumber+0x52>
    9324:	8f ef       	ldi	r24, 0xFF	; 255
    9326:	9f ef       	ldi	r25, 0xFF	; 255
    9328:	df 91       	pop	r29
    932a:	cf 91       	pop	r28
    932c:	08 95       	ret

0000932e <validate>:
    932e:	0f 93       	push	r16
    9330:	1f 93       	push	r17
    9332:	cf 93       	push	r28
    9334:	df 93       	push	r29
    9336:	ec 01       	movw	r28, r24
    9338:	8b 01       	movw	r16, r22
    933a:	89 2b       	or	r24, r25
    933c:	f9 f0       	breq	.+62     	; 0x937c <validate+0x4e>
    933e:	e8 81       	ld	r30, Y
    9340:	f9 81       	ldd	r31, Y+1	; 0x01
    9342:	30 97       	sbiw	r30, 0x00	; 0
    9344:	d9 f0       	breq	.+54     	; 0x937c <validate+0x4e>
    9346:	80 81       	ld	r24, Z
    9348:	88 23       	and	r24, r24
    934a:	c1 f0       	breq	.+48     	; 0x937c <validate+0x4e>
    934c:	2a 81       	ldd	r18, Y+2	; 0x02
    934e:	3b 81       	ldd	r19, Y+3	; 0x03
    9350:	85 81       	ldd	r24, Z+5	; 0x05
    9352:	96 81       	ldd	r25, Z+6	; 0x06
    9354:	28 17       	cp	r18, r24
    9356:	39 07       	cpc	r19, r25
    9358:	89 f4       	brne	.+34     	; 0x937c <validate+0x4e>
    935a:	81 81       	ldd	r24, Z+1	; 0x01
    935c:	0e 94 57 6b 	call	0xd6ae	; 0xd6ae <disk_status>
    9360:	80 fd       	sbrc	r24, 0
    9362:	0c c0       	rjmp	.+24     	; 0x937c <validate+0x4e>
    9364:	28 81       	ld	r18, Y
    9366:	39 81       	ldd	r19, Y+1	; 0x01
    9368:	80 e0       	ldi	r24, 0x00	; 0
    936a:	90 e0       	ldi	r25, 0x00	; 0
    936c:	f8 01       	movw	r30, r16
    936e:	31 83       	std	Z+1, r19	; 0x01
    9370:	20 83       	st	Z, r18
    9372:	df 91       	pop	r29
    9374:	cf 91       	pop	r28
    9376:	1f 91       	pop	r17
    9378:	0f 91       	pop	r16
    937a:	08 95       	ret
    937c:	89 e0       	ldi	r24, 0x09	; 9
    937e:	90 e0       	ldi	r25, 0x00	; 0
    9380:	20 e0       	ldi	r18, 0x00	; 0
    9382:	30 e0       	ldi	r19, 0x00	; 0
    9384:	f3 cf       	rjmp	.-26     	; 0x936c <validate+0x3e>

00009386 <mem_cpy.part.0>:
    9386:	fb 01       	movw	r30, r22
    9388:	48 0f       	add	r20, r24
    938a:	59 1f       	adc	r21, r25
    938c:	21 91       	ld	r18, Z+
    938e:	dc 01       	movw	r26, r24
    9390:	2d 93       	st	X+, r18
    9392:	cd 01       	movw	r24, r26
    9394:	a4 17       	cp	r26, r20
    9396:	b5 07       	cpc	r27, r21
    9398:	c9 f7       	brne	.-14     	; 0x938c <mem_cpy.part.0+0x6>
    939a:	08 95       	ret

0000939c <put_utf>:
    939c:	0f 93       	push	r16
    939e:	1f 93       	push	r17
    93a0:	fa 01       	movw	r30, r20
    93a2:	60 38       	cpi	r22, 0x80	; 128
    93a4:	71 05       	cpc	r23, r1
    93a6:	81 05       	cpc	r24, r1
    93a8:	91 05       	cpc	r25, r1
    93aa:	30 f4       	brcc	.+12     	; 0x93b8 <put_utf+0x1c>
    93ac:	23 2b       	or	r18, r19
    93ae:	09 f4       	brne	.+2      	; 0x93b2 <put_utf+0x16>
    93b0:	9e c0       	rjmp	.+316    	; 0x94ee <put_utf+0x152>
    93b2:	60 83       	st	Z, r22
    93b4:	81 e0       	ldi	r24, 0x01	; 1
    93b6:	9c c0       	rjmp	.+312    	; 0x94f0 <put_utf+0x154>
    93b8:	61 15       	cp	r22, r1
    93ba:	48 e0       	ldi	r20, 0x08	; 8
    93bc:	74 07       	cpc	r23, r20
    93be:	81 05       	cpc	r24, r1
    93c0:	91 05       	cpc	r25, r1
    93c2:	a0 f4       	brcc	.+40     	; 0x93ec <put_utf+0x50>
    93c4:	22 30       	cpi	r18, 0x02	; 2
    93c6:	31 05       	cpc	r19, r1
    93c8:	08 f4       	brcc	.+2      	; 0x93cc <put_utf+0x30>
    93ca:	91 c0       	rjmp	.+290    	; 0x94ee <put_utf+0x152>
    93cc:	8b 01       	movw	r16, r22
    93ce:	9c 01       	movw	r18, r24
    93d0:	76 e0       	ldi	r23, 0x06	; 6
    93d2:	36 95       	lsr	r19
    93d4:	27 95       	ror	r18
    93d6:	17 95       	ror	r17
    93d8:	07 95       	ror	r16
    93da:	7a 95       	dec	r23
    93dc:	d1 f7       	brne	.-12     	; 0x93d2 <put_utf+0x36>
    93de:	00 6c       	ori	r16, 0xC0	; 192
    93e0:	00 83       	st	Z, r16
    93e2:	6f 73       	andi	r22, 0x3F	; 63
    93e4:	60 68       	ori	r22, 0x80	; 128
    93e6:	61 83       	std	Z+1, r22	; 0x01
    93e8:	82 e0       	ldi	r24, 0x02	; 2
    93ea:	82 c0       	rjmp	.+260    	; 0x94f0 <put_utf+0x154>
    93ec:	61 15       	cp	r22, r1
    93ee:	71 05       	cpc	r23, r1
    93f0:	41 e0       	ldi	r20, 0x01	; 1
    93f2:	84 07       	cpc	r24, r20
    93f4:	91 05       	cpc	r25, r1
    93f6:	58 f5       	brcc	.+86     	; 0x944e <put_utf+0xb2>
    93f8:	23 30       	cpi	r18, 0x03	; 3
    93fa:	31 05       	cpc	r19, r1
    93fc:	08 f4       	brcc	.+2      	; 0x9400 <put_utf+0x64>
    93fe:	77 c0       	rjmp	.+238    	; 0x94ee <put_utf+0x152>
    9400:	8b 01       	movw	r16, r22
    9402:	9c 01       	movw	r18, r24
    9404:	18 5d       	subi	r17, 0xD8	; 216
    9406:	21 09       	sbc	r18, r1
    9408:	31 09       	sbc	r19, r1
    940a:	01 15       	cp	r16, r1
    940c:	18 40       	sbci	r17, 0x08	; 8
    940e:	21 05       	cpc	r18, r1
    9410:	31 05       	cpc	r19, r1
    9412:	08 f4       	brcc	.+2      	; 0x9416 <put_utf+0x7a>
    9414:	6c c0       	rjmp	.+216    	; 0x94ee <put_utf+0x152>
    9416:	8b 01       	movw	r16, r22
    9418:	9c 01       	movw	r18, r24
    941a:	4c e0       	ldi	r20, 0x0C	; 12
    941c:	36 95       	lsr	r19
    941e:	27 95       	ror	r18
    9420:	17 95       	ror	r17
    9422:	07 95       	ror	r16
    9424:	4a 95       	dec	r20
    9426:	d1 f7       	brne	.-12     	; 0x941c <put_utf+0x80>
    9428:	00 6e       	ori	r16, 0xE0	; 224
    942a:	00 83       	st	Z, r16
    942c:	8b 01       	movw	r16, r22
    942e:	9c 01       	movw	r18, r24
    9430:	56 e0       	ldi	r21, 0x06	; 6
    9432:	36 95       	lsr	r19
    9434:	27 95       	ror	r18
    9436:	17 95       	ror	r17
    9438:	07 95       	ror	r16
    943a:	5a 95       	dec	r21
    943c:	d1 f7       	brne	.-12     	; 0x9432 <put_utf+0x96>
    943e:	0f 73       	andi	r16, 0x3F	; 63
    9440:	00 68       	ori	r16, 0x80	; 128
    9442:	01 83       	std	Z+1, r16	; 0x01
    9444:	6f 73       	andi	r22, 0x3F	; 63
    9446:	60 68       	ori	r22, 0x80	; 128
    9448:	62 83       	std	Z+2, r22	; 0x02
    944a:	83 e0       	ldi	r24, 0x03	; 3
    944c:	51 c0       	rjmp	.+162    	; 0x94f0 <put_utf+0x154>
    944e:	24 30       	cpi	r18, 0x04	; 4
    9450:	31 05       	cpc	r19, r1
    9452:	08 f4       	brcc	.+2      	; 0x9456 <put_utf+0xba>
    9454:	4c c0       	rjmp	.+152    	; 0x94ee <put_utf+0x152>
    9456:	8b 01       	movw	r16, r22
    9458:	9c 01       	movw	r18, r24
    945a:	00 27       	eor	r16, r16
    945c:	11 27       	eor	r17, r17
    945e:	38 5d       	subi	r19, 0xD8	; 216
    9460:	b6 e0       	ldi	r27, 0x06	; 6
    9462:	36 95       	lsr	r19
    9464:	27 95       	ror	r18
    9466:	17 95       	ror	r17
    9468:	07 95       	ror	r16
    946a:	ba 95       	dec	r27
    946c:	d1 f7       	brne	.-12     	; 0x9462 <put_utf+0xc6>
    946e:	01 15       	cp	r16, r1
    9470:	11 05       	cpc	r17, r1
    9472:	40 e1       	ldi	r20, 0x10	; 16
    9474:	24 07       	cpc	r18, r20
    9476:	31 05       	cpc	r19, r1
    9478:	d0 f5       	brcc	.+116    	; 0x94ee <put_utf+0x152>
    947a:	dc 01       	movw	r26, r24
    947c:	cb 01       	movw	r24, r22
    947e:	aa 27       	eor	r26, r26
    9480:	bb 27       	eor	r27, r27
    9482:	9c 5d       	subi	r25, 0xDC	; 220
    9484:	a1 09       	sbc	r26, r1
    9486:	b1 09       	sbc	r27, r1
    9488:	81 15       	cp	r24, r1
    948a:	44 e0       	ldi	r20, 0x04	; 4
    948c:	94 07       	cpc	r25, r20
    948e:	a1 05       	cpc	r26, r1
    9490:	b1 05       	cpc	r27, r1
    9492:	68 f5       	brcc	.+90     	; 0x94ee <put_utf+0x152>
    9494:	80 2b       	or	r24, r16
    9496:	91 2b       	or	r25, r17
    9498:	a2 2b       	or	r26, r18
    949a:	b3 2b       	or	r27, r19
    949c:	11 96       	adiw	r26, 0x01	; 1
    949e:	ac 01       	movw	r20, r24
    94a0:	bd 01       	movw	r22, r26
    94a2:	22 e1       	ldi	r18, 0x12	; 18
    94a4:	76 95       	lsr	r23
    94a6:	67 95       	ror	r22
    94a8:	57 95       	ror	r21
    94aa:	47 95       	ror	r20
    94ac:	2a 95       	dec	r18
    94ae:	d1 f7       	brne	.-12     	; 0x94a4 <put_utf+0x108>
    94b0:	40 6f       	ori	r20, 0xF0	; 240
    94b2:	40 83       	st	Z, r20
    94b4:	ac 01       	movw	r20, r24
    94b6:	bd 01       	movw	r22, r26
    94b8:	3c e0       	ldi	r19, 0x0C	; 12
    94ba:	76 95       	lsr	r23
    94bc:	67 95       	ror	r22
    94be:	57 95       	ror	r21
    94c0:	47 95       	ror	r20
    94c2:	3a 95       	dec	r19
    94c4:	d1 f7       	brne	.-12     	; 0x94ba <put_utf+0x11e>
    94c6:	4f 73       	andi	r20, 0x3F	; 63
    94c8:	40 68       	ori	r20, 0x80	; 128
    94ca:	41 83       	std	Z+1, r20	; 0x01
    94cc:	ac 01       	movw	r20, r24
    94ce:	bd 01       	movw	r22, r26
    94d0:	a6 e0       	ldi	r26, 0x06	; 6
    94d2:	76 95       	lsr	r23
    94d4:	67 95       	ror	r22
    94d6:	57 95       	ror	r21
    94d8:	47 95       	ror	r20
    94da:	aa 95       	dec	r26
    94dc:	d1 f7       	brne	.-12     	; 0x94d2 <put_utf+0x136>
    94de:	4f 73       	andi	r20, 0x3F	; 63
    94e0:	40 68       	ori	r20, 0x80	; 128
    94e2:	42 83       	std	Z+2, r20	; 0x02
    94e4:	8f 73       	andi	r24, 0x3F	; 63
    94e6:	80 68       	ori	r24, 0x80	; 128
    94e8:	83 83       	std	Z+3, r24	; 0x03
    94ea:	84 e0       	ldi	r24, 0x04	; 4
    94ec:	01 c0       	rjmp	.+2      	; 0x94f0 <put_utf+0x154>
    94ee:	80 e0       	ldi	r24, 0x00	; 0
    94f0:	1f 91       	pop	r17
    94f2:	0f 91       	pop	r16
    94f4:	08 95       	ret

000094f6 <get_fileinfo>:
    94f6:	a0 e0       	ldi	r26, 0x00	; 0
    94f8:	b0 e0       	ldi	r27, 0x00	; 0
    94fa:	e1 e8       	ldi	r30, 0x81	; 129
    94fc:	fa e4       	ldi	r31, 0x4A	; 74
    94fe:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    9502:	fc 01       	movw	r30, r24
    9504:	60 80       	ld	r6, Z
    9506:	71 80       	ldd	r7, Z+1	; 0x01
    9508:	fb 01       	movw	r30, r22
    950a:	16 8a       	std	Z+22, r1	; 0x16
    950c:	fc 01       	movw	r30, r24
    950e:	06 89       	ldd	r16, Z+22	; 0x16
    9510:	17 89       	ldd	r17, Z+23	; 0x17
    9512:	20 8d       	ldd	r18, Z+24	; 0x18
    9514:	31 8d       	ldd	r19, Z+25	; 0x19
    9516:	01 15       	cp	r16, r1
    9518:	11 05       	cpc	r17, r1
    951a:	21 05       	cpc	r18, r1
    951c:	31 05       	cpc	r19, r1
    951e:	09 f4       	brne	.+2      	; 0x9522 <get_fileinfo+0x2c>
    9520:	f5 c0       	rjmp	.+490    	; 0x970c <get_fileinfo+0x216>
    9522:	eb 01       	movw	r28, r22
    9524:	8c 01       	movw	r16, r24
    9526:	80 a5       	ldd	r24, Z+40	; 0x28
    9528:	91 a5       	ldd	r25, Z+41	; 0x29
    952a:	a2 a5       	ldd	r26, Z+42	; 0x2a
    952c:	b3 a5       	ldd	r27, Z+43	; 0x2b
    952e:	8f 3f       	cpi	r24, 0xFF	; 255
    9530:	9f 4f       	sbci	r25, 0xFF	; 255
    9532:	af 4f       	sbci	r26, 0xFF	; 255
    9534:	bf 4f       	sbci	r27, 0xFF	; 255
    9536:	09 f4       	brne	.+2      	; 0x953a <get_fileinfo+0x44>
    9538:	48 c0       	rjmp	.+144    	; 0x95ca <get_fileinfo+0xd4>
    953a:	a1 2c       	mov	r10, r1
    953c:	b1 2c       	mov	r11, r1
    953e:	c1 2c       	mov	r12, r1
    9540:	d1 2c       	mov	r13, r1
    9542:	e1 2c       	mov	r14, r1
    9544:	f1 2c       	mov	r15, r1
    9546:	88 24       	eor	r8, r8
    9548:	8a 94       	dec	r8
    954a:	91 2c       	mov	r9, r1
    954c:	f3 01       	movw	r30, r6
    954e:	83 85       	ldd	r24, Z+11	; 0x0b
    9550:	94 85       	ldd	r25, Z+12	; 0x0c
    9552:	fc 01       	movw	r30, r24
    9554:	ea 0d       	add	r30, r10
    9556:	fb 1d       	adc	r31, r11
    9558:	80 81       	ld	r24, Z
    955a:	91 81       	ldd	r25, Z+1	; 0x01
    955c:	00 97       	sbiw	r24, 0x00	; 0
    955e:	69 f1       	breq	.+90     	; 0x95ba <get_fileinfo+0xc4>
    9560:	c1 14       	cp	r12, r1
    9562:	d1 04       	cpc	r13, r1
    9564:	29 f4       	brne	.+10     	; 0x9570 <get_fileinfo+0x7a>
    9566:	9c 01       	movw	r18, r24
    9568:	38 5d       	subi	r19, 0xD8	; 216
    956a:	21 15       	cp	r18, r1
    956c:	38 40       	sbci	r19, 0x08	; 8
    956e:	f0 f0       	brcs	.+60     	; 0x95ac <get_fileinfo+0xb6>
    9570:	a7 01       	movw	r20, r14
    9572:	4a 5e       	subi	r20, 0xEA	; 234
    9574:	5f 4f       	sbci	r21, 0xFF	; 255
    9576:	4c 0f       	add	r20, r28
    9578:	5d 1f       	adc	r21, r29
    957a:	16 01       	movw	r2, r12
    957c:	41 2c       	mov	r4, r1
    957e:	51 2c       	mov	r5, r1
    9580:	21 01       	movw	r4, r2
    9582:	33 24       	eor	r3, r3
    9584:	22 24       	eor	r2, r2
    9586:	a0 e0       	ldi	r26, 0x00	; 0
    9588:	b0 e0       	ldi	r27, 0x00	; 0
    958a:	bc 01       	movw	r22, r24
    958c:	cd 01       	movw	r24, r26
    958e:	62 29       	or	r22, r2
    9590:	73 29       	or	r23, r3
    9592:	84 29       	or	r24, r4
    9594:	95 29       	or	r25, r5
    9596:	94 01       	movw	r18, r8
    9598:	2e 19       	sub	r18, r14
    959a:	3f 09       	sbc	r19, r15
    959c:	ff de       	rcall	.-514    	; 0x939c <put_utf>
    959e:	90 e0       	ldi	r25, 0x00	; 0
    95a0:	00 97       	sbiw	r24, 0x00	; 0
    95a2:	49 f0       	breq	.+18     	; 0x95b6 <get_fileinfo+0xc0>
    95a4:	e8 0e       	add	r14, r24
    95a6:	f9 1e       	adc	r15, r25
    95a8:	80 e0       	ldi	r24, 0x00	; 0
    95aa:	90 e0       	ldi	r25, 0x00	; 0
    95ac:	e2 e0       	ldi	r30, 0x02	; 2
    95ae:	ae 0e       	add	r10, r30
    95b0:	b1 1c       	adc	r11, r1
    95b2:	6c 01       	movw	r12, r24
    95b4:	cb cf       	rjmp	.-106    	; 0x954c <get_fileinfo+0x56>
    95b6:	e1 2c       	mov	r14, r1
    95b8:	f1 2c       	mov	r15, r1
    95ba:	cd 28       	or	r12, r13
    95bc:	11 f0       	breq	.+4      	; 0x95c2 <get_fileinfo+0xcc>
    95be:	e1 2c       	mov	r14, r1
    95c0:	f1 2c       	mov	r15, r1
    95c2:	fe 01       	movw	r30, r28
    95c4:	ee 0d       	add	r30, r14
    95c6:	ff 1d       	adc	r31, r15
    95c8:	16 8a       	std	Z+22, r1	; 0x16
    95ca:	e1 2c       	mov	r14, r1
    95cc:	f1 2c       	mov	r15, r1
    95ce:	80 e0       	ldi	r24, 0x00	; 0
    95d0:	90 e0       	ldi	r25, 0x00	; 0
    95d2:	2c e0       	ldi	r18, 0x0C	; 12
    95d4:	a2 2e       	mov	r10, r18
    95d6:	b1 2c       	mov	r11, r1
    95d8:	3e e2       	ldi	r19, 0x2E	; 46
    95da:	93 2e       	mov	r9, r19
    95dc:	6c 01       	movw	r12, r24
    95de:	ff ef       	ldi	r31, 0xFF	; 255
    95e0:	cf 1a       	sub	r12, r31
    95e2:	df 0a       	sbc	r13, r31
    95e4:	f8 01       	movw	r30, r16
    95e6:	22 8d       	ldd	r18, Z+26	; 0x1a
    95e8:	33 8d       	ldd	r19, Z+27	; 0x1b
    95ea:	f9 01       	movw	r30, r18
    95ec:	e8 0f       	add	r30, r24
    95ee:	f9 1f       	adc	r31, r25
    95f0:	80 81       	ld	r24, Z
    95f2:	90 e0       	ldi	r25, 0x00	; 0
    95f4:	80 32       	cpi	r24, 0x20	; 32
    95f6:	91 05       	cpc	r25, r1
    95f8:	71 f1       	breq	.+92     	; 0x9656 <get_fileinfo+0x160>
    95fa:	85 30       	cpi	r24, 0x05	; 5
    95fc:	91 05       	cpc	r25, r1
    95fe:	11 f4       	brne	.+4      	; 0x9604 <get_fileinfo+0x10e>
    9600:	85 ee       	ldi	r24, 0xE5	; 229
    9602:	90 e0       	ldi	r25, 0x00	; 0
    9604:	f9 e0       	ldi	r31, 0x09	; 9
    9606:	cf 16       	cp	r12, r31
    9608:	d1 04       	cpc	r13, r1
    960a:	59 f4       	brne	.+22     	; 0x9622 <get_fileinfo+0x12c>
    960c:	2c e0       	ldi	r18, 0x0C	; 12
    960e:	e2 16       	cp	r14, r18
    9610:	f1 04       	cpc	r15, r1
    9612:	38 f4       	brcc	.+14     	; 0x9622 <get_fileinfo+0x12c>
    9614:	fe 01       	movw	r30, r28
    9616:	ee 0d       	add	r30, r14
    9618:	ff 1d       	adc	r31, r15
    961a:	91 86       	std	Z+9, r9	; 0x09
    961c:	f7 01       	movw	r30, r14
    961e:	31 96       	adiw	r30, 0x01	; 1
    9620:	7f 01       	movw	r14, r30
    9622:	65 eb       	ldi	r22, 0xB5	; 181
    9624:	71 e0       	ldi	r23, 0x01	; 1
    9626:	0e 94 e0 6a 	call	0xd5c0	; 0xd5c0 <ff_oem2uni>
    962a:	00 97       	sbiw	r24, 0x00	; 0
    962c:	19 f4       	brne	.+6      	; 0x9634 <get_fileinfo+0x13e>
    962e:	e1 2c       	mov	r14, r1
    9630:	f1 2c       	mov	r15, r1
    9632:	16 c0       	rjmp	.+44     	; 0x9660 <get_fileinfo+0x16a>
    9634:	a7 01       	movw	r20, r14
    9636:	47 5f       	subi	r20, 0xF7	; 247
    9638:	5f 4f       	sbci	r21, 0xFF	; 255
    963a:	4c 0f       	add	r20, r28
    963c:	5d 1f       	adc	r21, r29
    963e:	bc 01       	movw	r22, r24
    9640:	80 e0       	ldi	r24, 0x00	; 0
    9642:	90 e0       	ldi	r25, 0x00	; 0
    9644:	95 01       	movw	r18, r10
    9646:	2e 19       	sub	r18, r14
    9648:	3f 09       	sbc	r19, r15
    964a:	a8 de       	rcall	.-688    	; 0x939c <put_utf>
    964c:	90 e0       	ldi	r25, 0x00	; 0
    964e:	00 97       	sbiw	r24, 0x00	; 0
    9650:	71 f3       	breq	.-36     	; 0x962e <get_fileinfo+0x138>
    9652:	e8 0e       	add	r14, r24
    9654:	f9 1e       	adc	r15, r25
    9656:	c6 01       	movw	r24, r12
    9658:	8b 30       	cpi	r24, 0x0B	; 11
    965a:	91 05       	cpc	r25, r1
    965c:	09 f0       	breq	.+2      	; 0x9660 <get_fileinfo+0x16a>
    965e:	be cf       	rjmp	.-132    	; 0x95dc <get_fileinfo+0xe6>
    9660:	fe 01       	movw	r30, r28
    9662:	ee 0d       	add	r30, r14
    9664:	ff 1d       	adc	r31, r15
    9666:	11 86       	std	Z+9, r1	; 0x09
    9668:	8e 89       	ldd	r24, Y+22	; 0x16
    966a:	81 11       	cpse	r24, r1
    966c:	36 c0       	rjmp	.+108    	; 0x96da <get_fileinfo+0x1e4>
    966e:	e1 14       	cp	r14, r1
    9670:	f1 04       	cpc	r15, r1
    9672:	31 f0       	breq	.+12     	; 0x9680 <get_fileinfo+0x18a>
    9674:	de 01       	movw	r26, r28
    9676:	19 96       	adiw	r26, 0x09	; 9
    9678:	58 e0       	ldi	r21, 0x08	; 8
    967a:	20 e0       	ldi	r18, 0x00	; 0
    967c:	30 e0       	ldi	r19, 0x00	; 0
    967e:	14 c0       	rjmp	.+40     	; 0x96a8 <get_fileinfo+0x1b2>
    9680:	8f e3       	ldi	r24, 0x3F	; 63
    9682:	8e 8b       	std	Y+22, r24	; 0x16
    9684:	21 e0       	ldi	r18, 0x01	; 1
    9686:	30 e0       	ldi	r19, 0x00	; 0
    9688:	1c c0       	rjmp	.+56     	; 0x96c2 <get_fileinfo+0x1cc>
    968a:	90 e0       	ldi	r25, 0x00	; 0
    968c:	8e 32       	cpi	r24, 0x2E	; 46
    968e:	91 05       	cpc	r25, r1
    9690:	09 f4       	brne	.+2      	; 0x9694 <get_fileinfo+0x19e>
    9692:	50 e1       	ldi	r21, 0x10	; 16
    9694:	bc 01       	movw	r22, r24
    9696:	61 54       	subi	r22, 0x41	; 65
    9698:	71 09       	sbc	r23, r1
    969a:	6a 31       	cpi	r22, 0x1A	; 26
    969c:	71 05       	cpc	r23, r1
    969e:	40 f0       	brcs	.+16     	; 0x96b0 <get_fileinfo+0x1ba>
    96a0:	fd 01       	movw	r30, r26
    96a2:	84 87       	std	Z+12, r24	; 0x0c
    96a4:	2f 5f       	subi	r18, 0xFF	; 255
    96a6:	3f 4f       	sbci	r19, 0xFF	; 255
    96a8:	8d 91       	ld	r24, X+
    96aa:	81 11       	cpse	r24, r1
    96ac:	ee cf       	rjmp	.-36     	; 0x968a <get_fileinfo+0x194>
    96ae:	09 c0       	rjmp	.+18     	; 0x96c2 <get_fileinfo+0x1cc>
    96b0:	f8 01       	movw	r30, r16
    96b2:	62 8d       	ldd	r22, Z+26	; 0x1a
    96b4:	73 8d       	ldd	r23, Z+27	; 0x1b
    96b6:	fb 01       	movw	r30, r22
    96b8:	44 85       	ldd	r20, Z+12	; 0x0c
    96ba:	45 23       	and	r20, r21
    96bc:	89 f3       	breq	.-30     	; 0x96a0 <get_fileinfo+0x1aa>
    96be:	80 96       	adiw	r24, 0x20	; 32
    96c0:	ef cf       	rjmp	.-34     	; 0x96a0 <get_fileinfo+0x1aa>
    96c2:	fe 01       	movw	r30, r28
    96c4:	e2 0f       	add	r30, r18
    96c6:	f3 1f       	adc	r31, r19
    96c8:	16 8a       	std	Z+22, r1	; 0x16
    96ca:	f8 01       	movw	r30, r16
    96cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    96ce:	93 8d       	ldd	r25, Z+27	; 0x1b
    96d0:	fc 01       	movw	r30, r24
    96d2:	84 85       	ldd	r24, Z+12	; 0x0c
    96d4:	81 11       	cpse	r24, r1
    96d6:	01 c0       	rjmp	.+2      	; 0x96da <get_fileinfo+0x1e4>
    96d8:	19 86       	std	Y+9, r1	; 0x09
    96da:	f8 01       	movw	r30, r16
    96dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    96de:	93 8d       	ldd	r25, Z+27	; 0x1b
    96e0:	fc 01       	movw	r30, r24
    96e2:	83 85       	ldd	r24, Z+11	; 0x0b
    96e4:	88 87       	std	Y+8, r24	; 0x08
    96e6:	f8 01       	movw	r30, r16
    96e8:	02 8d       	ldd	r16, Z+26	; 0x1a
    96ea:	13 8d       	ldd	r17, Z+27	; 0x1b
    96ec:	c8 01       	movw	r24, r16
    96ee:	4c 96       	adiw	r24, 0x1c	; 28
    96f0:	c6 dc       	rcall	.-1652   	; 0x907e <ld_dword>
    96f2:	68 83       	st	Y, r22
    96f4:	79 83       	std	Y+1, r23	; 0x01
    96f6:	8a 83       	std	Y+2, r24	; 0x02
    96f8:	9b 83       	std	Y+3, r25	; 0x03
    96fa:	f8 01       	movw	r30, r16
    96fc:	86 89       	ldd	r24, Z+22	; 0x16
    96fe:	97 89       	ldd	r25, Z+23	; 0x17
    9700:	9f 83       	std	Y+7, r25	; 0x07
    9702:	8e 83       	std	Y+6, r24	; 0x06
    9704:	80 8d       	ldd	r24, Z+24	; 0x18
    9706:	91 8d       	ldd	r25, Z+25	; 0x19
    9708:	9d 83       	std	Y+5, r25	; 0x05
    970a:	8c 83       	std	Y+4, r24	; 0x04
    970c:	cd b7       	in	r28, 0x3d	; 61
    970e:	de b7       	in	r29, 0x3e	; 62
    9710:	e2 e1       	ldi	r30, 0x12	; 18
    9712:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

00009716 <ld_clust.isra.4>:
    9716:	fb 01       	movw	r30, r22
    9718:	42 8d       	ldd	r20, Z+26	; 0x1a
    971a:	53 8d       	ldd	r21, Z+27	; 0x1b
    971c:	60 e0       	ldi	r22, 0x00	; 0
    971e:	70 e0       	ldi	r23, 0x00	; 0
    9720:	83 30       	cpi	r24, 0x03	; 3
    9722:	59 f4       	brne	.+22     	; 0x973a <ld_clust.isra.4+0x24>
    9724:	84 89       	ldd	r24, Z+20	; 0x14
    9726:	95 89       	ldd	r25, Z+21	; 0x15
    9728:	a0 e0       	ldi	r26, 0x00	; 0
    972a:	b0 e0       	ldi	r27, 0x00	; 0
    972c:	dc 01       	movw	r26, r24
    972e:	99 27       	eor	r25, r25
    9730:	88 27       	eor	r24, r24
    9732:	48 2b       	or	r20, r24
    9734:	59 2b       	or	r21, r25
    9736:	6a 2b       	or	r22, r26
    9738:	7b 2b       	or	r23, r27
    973a:	cb 01       	movw	r24, r22
    973c:	ba 01       	movw	r22, r20
    973e:	08 95       	ret

00009740 <st_clust.isra.5>:
    9740:	fb 01       	movw	r30, r22
    9742:	22 8f       	std	Z+26, r18	; 0x1a
    9744:	33 8f       	std	Z+27, r19	; 0x1b
    9746:	dc 01       	movw	r26, r24
    9748:	8c 91       	ld	r24, X
    974a:	83 30       	cpi	r24, 0x03	; 3
    974c:	29 f4       	brne	.+10     	; 0x9758 <st_clust.isra.5+0x18>
    974e:	ca 01       	movw	r24, r20
    9750:	aa 27       	eor	r26, r26
    9752:	bb 27       	eor	r27, r27
    9754:	84 8b       	std	Z+20, r24	; 0x14
    9756:	95 8b       	std	Z+21, r25	; 0x15
    9758:	08 95       	ret

0000975a <sync_window.part.6>:
    975a:	8f 92       	push	r8
    975c:	9f 92       	push	r9
    975e:	af 92       	push	r10
    9760:	bf 92       	push	r11
    9762:	ef 92       	push	r14
    9764:	ff 92       	push	r15
    9766:	0f 93       	push	r16
    9768:	1f 93       	push	r17
    976a:	cf 93       	push	r28
    976c:	df 93       	push	r29
    976e:	ec 01       	movw	r28, r24
    9770:	7c 01       	movw	r14, r24
    9772:	45 e3       	ldi	r20, 0x35	; 53
    9774:	e4 0e       	add	r14, r20
    9776:	f1 1c       	adc	r15, r1
    9778:	29 a9       	ldd	r18, Y+49	; 0x31
    977a:	3a a9       	ldd	r19, Y+50	; 0x32
    977c:	4b a9       	ldd	r20, Y+51	; 0x33
    977e:	5c a9       	ldd	r21, Y+52	; 0x34
    9780:	01 e0       	ldi	r16, 0x01	; 1
    9782:	10 e0       	ldi	r17, 0x00	; 0
    9784:	b7 01       	movw	r22, r14
    9786:	89 81       	ldd	r24, Y+1	; 0x01
    9788:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    978c:	89 2b       	or	r24, r25
    978e:	41 f5       	brne	.+80     	; 0x97e0 <sync_window.part.6+0x86>
    9790:	1b 82       	std	Y+3, r1	; 0x03
    9792:	09 a9       	ldd	r16, Y+49	; 0x31
    9794:	1a a9       	ldd	r17, Y+50	; 0x32
    9796:	2b a9       	ldd	r18, Y+51	; 0x33
    9798:	3c a9       	ldd	r19, Y+52	; 0x34
    979a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    979c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    979e:	af 8d       	ldd	r26, Y+31	; 0x1f
    97a0:	b8 a1       	ldd	r27, Y+32	; 0x20
    97a2:	8d a0       	ldd	r8, Y+37	; 0x25
    97a4:	9e a0       	ldd	r9, Y+38	; 0x26
    97a6:	af a0       	ldd	r10, Y+39	; 0x27
    97a8:	b8 a4       	ldd	r11, Y+40	; 0x28
    97aa:	b9 01       	movw	r22, r18
    97ac:	a8 01       	movw	r20, r16
    97ae:	48 19       	sub	r20, r8
    97b0:	59 09       	sbc	r21, r9
    97b2:	6a 09       	sbc	r22, r10
    97b4:	7b 09       	sbc	r23, r11
    97b6:	48 17       	cp	r20, r24
    97b8:	59 07       	cpc	r21, r25
    97ba:	6a 07       	cpc	r22, r26
    97bc:	7b 07       	cpc	r23, r27
    97be:	98 f4       	brcc	.+38     	; 0x97e6 <sync_window.part.6+0x8c>
    97c0:	6a 81       	ldd	r22, Y+2	; 0x02
    97c2:	62 30       	cpi	r22, 0x02	; 2
    97c4:	81 f4       	brne	.+32     	; 0x97e6 <sync_window.part.6+0x8c>
    97c6:	a9 01       	movw	r20, r18
    97c8:	98 01       	movw	r18, r16
    97ca:	28 0f       	add	r18, r24
    97cc:	39 1f       	adc	r19, r25
    97ce:	4a 1f       	adc	r20, r26
    97d0:	5b 1f       	adc	r21, r27
    97d2:	01 e0       	ldi	r16, 0x01	; 1
    97d4:	10 e0       	ldi	r17, 0x00	; 0
    97d6:	b7 01       	movw	r22, r14
    97d8:	89 81       	ldd	r24, Y+1	; 0x01
    97da:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    97de:	03 c0       	rjmp	.+6      	; 0x97e6 <sync_window.part.6+0x8c>
    97e0:	81 e0       	ldi	r24, 0x01	; 1
    97e2:	90 e0       	ldi	r25, 0x00	; 0
    97e4:	02 c0       	rjmp	.+4      	; 0x97ea <sync_window.part.6+0x90>
    97e6:	80 e0       	ldi	r24, 0x00	; 0
    97e8:	90 e0       	ldi	r25, 0x00	; 0
    97ea:	df 91       	pop	r29
    97ec:	cf 91       	pop	r28
    97ee:	1f 91       	pop	r17
    97f0:	0f 91       	pop	r16
    97f2:	ff 90       	pop	r15
    97f4:	ef 90       	pop	r14
    97f6:	bf 90       	pop	r11
    97f8:	af 90       	pop	r10
    97fa:	9f 90       	pop	r9
    97fc:	8f 90       	pop	r8
    97fe:	08 95       	ret

00009800 <sync_fs>:
    9800:	ef 92       	push	r14
    9802:	ff 92       	push	r15
    9804:	0f 93       	push	r16
    9806:	1f 93       	push	r17
    9808:	cf 93       	push	r28
    980a:	df 93       	push	r29
    980c:	ec 01       	movw	r28, r24
    980e:	8b 81       	ldd	r24, Y+3	; 0x03
    9810:	81 11       	cpse	r24, r1
    9812:	05 c0       	rjmp	.+10     	; 0x981e <sync_fs+0x1e>
    9814:	88 81       	ld	r24, Y
    9816:	83 30       	cpi	r24, 0x03	; 3
    9818:	09 f0       	breq	.+2      	; 0x981c <sync_fs+0x1c>
    981a:	52 c0       	rjmp	.+164    	; 0x98c0 <sync_fs+0xc0>
    981c:	06 c0       	rjmp	.+12     	; 0x982a <sync_fs+0x2a>
    981e:	ce 01       	movw	r24, r28
    9820:	9c df       	rcall	.-200    	; 0x975a <sync_window.part.6>
    9822:	00 97       	sbiw	r24, 0x00	; 0
    9824:	09 f0       	breq	.+2      	; 0x9828 <sync_fs+0x28>
    9826:	59 c0       	rjmp	.+178    	; 0x98da <sync_fs+0xda>
    9828:	f5 cf       	rjmp	.-22     	; 0x9814 <sync_fs+0x14>
    982a:	8c 81       	ldd	r24, Y+4	; 0x04
    982c:	81 30       	cpi	r24, 0x01	; 1
    982e:	09 f0       	breq	.+2      	; 0x9832 <sync_fs+0x32>
    9830:	47 c0       	rjmp	.+142    	; 0x98c0 <sync_fs+0xc0>
    9832:	40 e0       	ldi	r20, 0x00	; 0
    9834:	52 e0       	ldi	r21, 0x02	; 2
    9836:	60 e0       	ldi	r22, 0x00	; 0
    9838:	70 e0       	ldi	r23, 0x00	; 0
    983a:	7e 01       	movw	r14, r28
    983c:	85 e3       	ldi	r24, 0x35	; 53
    983e:	e8 0e       	add	r14, r24
    9840:	f1 1c       	adc	r15, r1
    9842:	c7 01       	movw	r24, r14
    9844:	37 dc       	rcall	.-1938   	; 0x90b4 <mem_set>
    9846:	85 e5       	ldi	r24, 0x55	; 85
    9848:	fe 01       	movw	r30, r28
    984a:	ed 5c       	subi	r30, 0xCD	; 205
    984c:	fd 4f       	sbci	r31, 0xFD	; 253
    984e:	80 83       	st	Z, r24
    9850:	8a ea       	ldi	r24, 0xAA	; 170
    9852:	31 96       	adiw	r30, 0x01	; 1
    9854:	80 83       	st	Z, r24
    9856:	82 e5       	ldi	r24, 0x52	; 82
    9858:	8d ab       	std	Y+53, r24	; 0x35
    985a:	8e ab       	std	Y+54, r24	; 0x36
    985c:	81 e6       	ldi	r24, 0x61	; 97
    985e:	8f ab       	std	Y+55, r24	; 0x37
    9860:	91 e4       	ldi	r25, 0x41	; 65
    9862:	98 af       	std	Y+56, r25	; 0x38
    9864:	22 e7       	ldi	r18, 0x72	; 114
    9866:	7b 97       	sbiw	r30, 0x1b	; 27
    9868:	20 83       	st	Z, r18
    986a:	31 96       	adiw	r30, 0x01	; 1
    986c:	20 83       	st	Z, r18
    986e:	31 96       	adiw	r30, 0x01	; 1
    9870:	90 83       	st	Z, r25
    9872:	31 96       	adiw	r30, 0x01	; 1
    9874:	80 83       	st	Z, r24
    9876:	49 89       	ldd	r20, Y+17	; 0x11
    9878:	5a 89       	ldd	r21, Y+18	; 0x12
    987a:	6b 89       	ldd	r22, Y+19	; 0x13
    987c:	7c 89       	ldd	r23, Y+20	; 0x14
    987e:	ce 01       	movw	r24, r28
    9880:	83 5e       	subi	r24, 0xE3	; 227
    9882:	9d 4f       	sbci	r25, 0xFD	; 253
    9884:	11 dc       	rcall	.-2014   	; 0x90a8 <st_dword>
    9886:	4d 85       	ldd	r20, Y+13	; 0x0d
    9888:	5e 85       	ldd	r21, Y+14	; 0x0e
    988a:	6f 85       	ldd	r22, Y+15	; 0x0f
    988c:	78 89       	ldd	r23, Y+16	; 0x10
    988e:	ce 01       	movw	r24, r28
    9890:	8f 5d       	subi	r24, 0xDF	; 223
    9892:	9d 4f       	sbci	r25, 0xFD	; 253
    9894:	09 dc       	rcall	.-2030   	; 0x90a8 <st_dword>
    9896:	89 a1       	ldd	r24, Y+33	; 0x21
    9898:	9a a1       	ldd	r25, Y+34	; 0x22
    989a:	ab a1       	ldd	r26, Y+35	; 0x23
    989c:	bc a1       	ldd	r27, Y+36	; 0x24
    989e:	9c 01       	movw	r18, r24
    98a0:	ad 01       	movw	r20, r26
    98a2:	2f 5f       	subi	r18, 0xFF	; 255
    98a4:	3f 4f       	sbci	r19, 0xFF	; 255
    98a6:	4f 4f       	sbci	r20, 0xFF	; 255
    98a8:	5f 4f       	sbci	r21, 0xFF	; 255
    98aa:	29 ab       	std	Y+49, r18	; 0x31
    98ac:	3a ab       	std	Y+50, r19	; 0x32
    98ae:	4b ab       	std	Y+51, r20	; 0x33
    98b0:	5c ab       	std	Y+52, r21	; 0x34
    98b2:	01 e0       	ldi	r16, 0x01	; 1
    98b4:	10 e0       	ldi	r17, 0x00	; 0
    98b6:	b7 01       	movw	r22, r14
    98b8:	89 81       	ldd	r24, Y+1	; 0x01
    98ba:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    98be:	1c 82       	std	Y+4, r1	; 0x04
    98c0:	40 e0       	ldi	r20, 0x00	; 0
    98c2:	50 e0       	ldi	r21, 0x00	; 0
    98c4:	60 e0       	ldi	r22, 0x00	; 0
    98c6:	89 81       	ldd	r24, Y+1	; 0x01
    98c8:	0e 94 83 6b 	call	0xd706	; 0xd706 <disk_ioctl>
    98cc:	31 e0       	ldi	r19, 0x01	; 1
    98ce:	20 e0       	ldi	r18, 0x00	; 0
    98d0:	89 2b       	or	r24, r25
    98d2:	09 f4       	brne	.+2      	; 0x98d6 <sync_fs+0xd6>
    98d4:	30 e0       	ldi	r19, 0x00	; 0
    98d6:	83 2f       	mov	r24, r19
    98d8:	92 2f       	mov	r25, r18
    98da:	cd b7       	in	r28, 0x3d	; 61
    98dc:	de b7       	in	r29, 0x3e	; 62
    98de:	e6 e0       	ldi	r30, 0x06	; 6
    98e0:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

000098e4 <dir_clear>:
    98e4:	4f 92       	push	r4
    98e6:	5f 92       	push	r5
    98e8:	6f 92       	push	r6
    98ea:	7f 92       	push	r7
    98ec:	af 92       	push	r10
    98ee:	bf 92       	push	r11
    98f0:	cf 92       	push	r12
    98f2:	df 92       	push	r13
    98f4:	ef 92       	push	r14
    98f6:	ff 92       	push	r15
    98f8:	0f 93       	push	r16
    98fa:	1f 93       	push	r17
    98fc:	cf 93       	push	r28
    98fe:	df 93       	push	r29
    9900:	ec 01       	movw	r28, r24
    9902:	6a 01       	movw	r12, r20
    9904:	7b 01       	movw	r14, r22
    9906:	8b 81       	ldd	r24, Y+3	; 0x03
    9908:	81 11       	cpse	r24, r1
    990a:	28 c0       	rjmp	.+80     	; 0x995c <dir_clear+0x78>
    990c:	b7 01       	movw	r22, r14
    990e:	a6 01       	movw	r20, r12
    9910:	ce 01       	movw	r24, r28
    9912:	6e dc       	rcall	.-1828   	; 0x91f0 <clst2sect>
    9914:	2b 01       	movw	r4, r22
    9916:	3c 01       	movw	r6, r24
    9918:	69 ab       	std	Y+49, r22	; 0x31
    991a:	7a ab       	std	Y+50, r23	; 0x32
    991c:	8b ab       	std	Y+51, r24	; 0x33
    991e:	9c ab       	std	Y+52, r25	; 0x34
    9920:	5e 01       	movw	r10, r28
    9922:	25 e3       	ldi	r18, 0x35	; 53
    9924:	a2 0e       	add	r10, r18
    9926:	b1 1c       	adc	r11, r1
    9928:	40 e0       	ldi	r20, 0x00	; 0
    992a:	52 e0       	ldi	r21, 0x02	; 2
    992c:	60 e0       	ldi	r22, 0x00	; 0
    992e:	70 e0       	ldi	r23, 0x00	; 0
    9930:	c5 01       	movw	r24, r10
    9932:	c0 db       	rcall	.-2176   	; 0x90b4 <mem_set>
    9934:	09 85       	ldd	r16, Y+9	; 0x09
    9936:	1a 85       	ldd	r17, Y+10	; 0x0a
    9938:	c8 01       	movw	r24, r16
    993a:	a0 e0       	ldi	r26, 0x00	; 0
    993c:	b0 e0       	ldi	r27, 0x00	; 0
    993e:	39 e0       	ldi	r19, 0x09	; 9
    9940:	88 0f       	add	r24, r24
    9942:	99 1f       	adc	r25, r25
    9944:	aa 1f       	adc	r26, r26
    9946:	bb 1f       	adc	r27, r27
    9948:	3a 95       	dec	r19
    994a:	d1 f7       	brne	.-12     	; 0x9940 <dir_clear+0x5c>
    994c:	81 15       	cp	r24, r1
    994e:	90 48       	sbci	r25, 0x80	; 128
    9950:	a1 05       	cpc	r26, r1
    9952:	b1 05       	cpc	r27, r1
    9954:	50 f0       	brcs	.+20     	; 0x996a <dir_clear+0x86>
    9956:	00 e0       	ldi	r16, 0x00	; 0
    9958:	10 e8       	ldi	r17, 0x80	; 128
    995a:	14 c0       	rjmp	.+40     	; 0x9984 <dir_clear+0xa0>
    995c:	ce 01       	movw	r24, r28
    995e:	fd de       	rcall	.-518    	; 0x975a <sync_window.part.6>
    9960:	89 2b       	or	r24, r25
    9962:	a1 f2       	breq	.-88     	; 0x990c <dir_clear+0x28>
    9964:	81 e0       	ldi	r24, 0x01	; 1
    9966:	90 e0       	ldi	r25, 0x00	; 0
    9968:	56 c0       	rjmp	.+172    	; 0x9a16 <dir_clear+0x132>
    996a:	10 2f       	mov	r17, r16
    996c:	00 27       	eor	r16, r16
    996e:	11 0f       	add	r17, r17
    9970:	09 c0       	rjmp	.+18     	; 0x9984 <dir_clear+0xa0>
    9972:	c8 01       	movw	r24, r16
    9974:	0e 94 a7 6a 	call	0xd54e	; 0xd54e <ff_memalloc>
    9978:	6c 01       	movw	r12, r24
    997a:	00 97       	sbiw	r24, 0x00	; 0
    997c:	09 f0       	breq	.+2      	; 0x9980 <dir_clear+0x9c>
    997e:	40 c0       	rjmp	.+128    	; 0x9a00 <dir_clear+0x11c>
    9980:	16 95       	lsr	r17
    9982:	07 95       	ror	r16
    9984:	01 30       	cpi	r16, 0x01	; 1
    9986:	82 e0       	ldi	r24, 0x02	; 2
    9988:	18 07       	cpc	r17, r24
    998a:	98 f7       	brcc	.-26     	; 0x9972 <dir_clear+0x8e>
    998c:	e1 2c       	mov	r14, r1
    998e:	f1 2c       	mov	r15, r1
    9990:	11 c0       	rjmp	.+34     	; 0x99b4 <dir_clear+0xd0>
    9992:	01 e0       	ldi	r16, 0x01	; 1
    9994:	10 e0       	ldi	r17, 0x00	; 0
    9996:	a3 01       	movw	r20, r6
    9998:	92 01       	movw	r18, r4
    999a:	2e 0d       	add	r18, r14
    999c:	3f 1d       	adc	r19, r15
    999e:	41 1d       	adc	r20, r1
    99a0:	51 1d       	adc	r21, r1
    99a2:	b5 01       	movw	r22, r10
    99a4:	89 81       	ldd	r24, Y+1	; 0x01
    99a6:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    99aa:	89 2b       	or	r24, r25
    99ac:	01 f5       	brne	.+64     	; 0x99ee <dir_clear+0x10a>
    99ae:	2f ef       	ldi	r18, 0xFF	; 255
    99b0:	e2 1a       	sub	r14, r18
    99b2:	f2 0a       	sbc	r15, r18
    99b4:	89 85       	ldd	r24, Y+9	; 0x09
    99b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    99b8:	e8 16       	cp	r14, r24
    99ba:	f9 06       	cpc	r15, r25
    99bc:	50 f3       	brcs	.-44     	; 0x9992 <dir_clear+0xae>
    99be:	17 c0       	rjmp	.+46     	; 0x99ee <dir_clear+0x10a>
    99c0:	85 01       	movw	r16, r10
    99c2:	a3 01       	movw	r20, r6
    99c4:	92 01       	movw	r18, r4
    99c6:	2e 0d       	add	r18, r14
    99c8:	3f 1d       	adc	r19, r15
    99ca:	41 1d       	adc	r20, r1
    99cc:	51 1d       	adc	r21, r1
    99ce:	b6 01       	movw	r22, r12
    99d0:	89 81       	ldd	r24, Y+1	; 0x01
    99d2:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    99d6:	89 2b       	or	r24, r25
    99d8:	39 f4       	brne	.+14     	; 0x99e8 <dir_clear+0x104>
    99da:	ea 0c       	add	r14, r10
    99dc:	fb 1c       	adc	r15, r11
    99de:	89 85       	ldd	r24, Y+9	; 0x09
    99e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    99e2:	e8 16       	cp	r14, r24
    99e4:	f9 06       	cpc	r15, r25
    99e6:	60 f3       	brcs	.-40     	; 0x99c0 <dir_clear+0xdc>
    99e8:	c6 01       	movw	r24, r12
    99ea:	0e 94 aa 6a 	call	0xd554	; 0xd554 <ff_memfree>
    99ee:	81 e0       	ldi	r24, 0x01	; 1
    99f0:	90 e0       	ldi	r25, 0x00	; 0
    99f2:	29 85       	ldd	r18, Y+9	; 0x09
    99f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    99f6:	2e 15       	cp	r18, r14
    99f8:	3f 05       	cpc	r19, r15
    99fa:	69 f4       	brne	.+26     	; 0x9a16 <dir_clear+0x132>
    99fc:	80 e0       	ldi	r24, 0x00	; 0
    99fe:	0b c0       	rjmp	.+22     	; 0x9a16 <dir_clear+0x132>
    9a00:	a8 01       	movw	r20, r16
    9a02:	60 e0       	ldi	r22, 0x00	; 0
    9a04:	70 e0       	ldi	r23, 0x00	; 0
    9a06:	56 db       	rcall	.-2388   	; 0x90b4 <mem_set>
    9a08:	58 01       	movw	r10, r16
    9a0a:	ab 2c       	mov	r10, r11
    9a0c:	bb 24       	eor	r11, r11
    9a0e:	a6 94       	lsr	r10
    9a10:	e1 2c       	mov	r14, r1
    9a12:	f1 2c       	mov	r15, r1
    9a14:	e4 cf       	rjmp	.-56     	; 0x99de <dir_clear+0xfa>
    9a16:	df 91       	pop	r29
    9a18:	cf 91       	pop	r28
    9a1a:	1f 91       	pop	r17
    9a1c:	0f 91       	pop	r16
    9a1e:	ff 90       	pop	r15
    9a20:	ef 90       	pop	r14
    9a22:	df 90       	pop	r13
    9a24:	cf 90       	pop	r12
    9a26:	bf 90       	pop	r11
    9a28:	af 90       	pop	r10
    9a2a:	7f 90       	pop	r7
    9a2c:	6f 90       	pop	r6
    9a2e:	5f 90       	pop	r5
    9a30:	4f 90       	pop	r4
    9a32:	08 95       	ret

00009a34 <move_window>:
    9a34:	a0 e0       	ldi	r26, 0x00	; 0
    9a36:	b0 e0       	ldi	r27, 0x00	; 0
    9a38:	e0 e2       	ldi	r30, 0x20	; 32
    9a3a:	fd e4       	ldi	r31, 0x4D	; 77
    9a3c:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    9a40:	ec 01       	movw	r28, r24
    9a42:	6a 01       	movw	r12, r20
    9a44:	7b 01       	movw	r14, r22
    9a46:	89 a9       	ldd	r24, Y+49	; 0x31
    9a48:	9a a9       	ldd	r25, Y+50	; 0x32
    9a4a:	ab a9       	ldd	r26, Y+51	; 0x33
    9a4c:	bc a9       	ldd	r27, Y+52	; 0x34
    9a4e:	84 17       	cp	r24, r20
    9a50:	95 07       	cpc	r25, r21
    9a52:	a6 07       	cpc	r26, r22
    9a54:	b7 07       	cpc	r27, r23
    9a56:	11 f1       	breq	.+68     	; 0x9a9c <move_window+0x68>
    9a58:	8b 81       	ldd	r24, Y+3	; 0x03
    9a5a:	81 11       	cpse	r24, r1
    9a5c:	13 c0       	rjmp	.+38     	; 0x9a84 <move_window+0x50>
    9a5e:	01 e0       	ldi	r16, 0x01	; 1
    9a60:	10 e0       	ldi	r17, 0x00	; 0
    9a62:	a7 01       	movw	r20, r14
    9a64:	96 01       	movw	r18, r12
    9a66:	be 01       	movw	r22, r28
    9a68:	6b 5c       	subi	r22, 0xCB	; 203
    9a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a6c:	89 81       	ldd	r24, Y+1	; 0x01
    9a6e:	0e 94 63 6b 	call	0xd6c6	; 0xd6c6 <disk_read>
    9a72:	89 2b       	or	r24, r25
    9a74:	61 f0       	breq	.+24     	; 0x9a8e <move_window+0x5a>
    9a76:	81 e0       	ldi	r24, 0x01	; 1
    9a78:	90 e0       	ldi	r25, 0x00	; 0
    9a7a:	cc 24       	eor	r12, r12
    9a7c:	ca 94       	dec	r12
    9a7e:	dc 2c       	mov	r13, r12
    9a80:	76 01       	movw	r14, r12
    9a82:	07 c0       	rjmp	.+14     	; 0x9a92 <move_window+0x5e>
    9a84:	ce 01       	movw	r24, r28
    9a86:	69 de       	rcall	.-814    	; 0x975a <sync_window.part.6>
    9a88:	00 97       	sbiw	r24, 0x00	; 0
    9a8a:	51 f4       	brne	.+20     	; 0x9aa0 <move_window+0x6c>
    9a8c:	e8 cf       	rjmp	.-48     	; 0x9a5e <move_window+0x2a>
    9a8e:	80 e0       	ldi	r24, 0x00	; 0
    9a90:	90 e0       	ldi	r25, 0x00	; 0
    9a92:	c9 aa       	std	Y+49, r12	; 0x31
    9a94:	da aa       	std	Y+50, r13	; 0x32
    9a96:	eb aa       	std	Y+51, r14	; 0x33
    9a98:	fc aa       	std	Y+52, r15	; 0x34
    9a9a:	02 c0       	rjmp	.+4      	; 0x9aa0 <move_window+0x6c>
    9a9c:	80 e0       	ldi	r24, 0x00	; 0
    9a9e:	90 e0       	ldi	r25, 0x00	; 0
    9aa0:	cd b7       	in	r28, 0x3d	; 61
    9aa2:	de b7       	in	r29, 0x3e	; 62
    9aa4:	e8 e0       	ldi	r30, 0x08	; 8
    9aa6:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

00009aaa <check_fs>:
    9aaa:	cf 93       	push	r28
    9aac:	df 93       	push	r29
    9aae:	ec 01       	movw	r28, r24
    9ab0:	1b 82       	std	Y+3, r1	; 0x03
    9ab2:	8f ef       	ldi	r24, 0xFF	; 255
    9ab4:	9f ef       	ldi	r25, 0xFF	; 255
    9ab6:	dc 01       	movw	r26, r24
    9ab8:	89 ab       	std	Y+49, r24	; 0x31
    9aba:	9a ab       	std	Y+50, r25	; 0x32
    9abc:	ab ab       	std	Y+51, r26	; 0x33
    9abe:	bc ab       	std	Y+52, r27	; 0x34
    9ac0:	ce 01       	movw	r24, r28
    9ac2:	b8 df       	rcall	.-144    	; 0x9a34 <move_window>
    9ac4:	89 2b       	or	r24, r25
    9ac6:	19 f5       	brne	.+70     	; 0x9b0e <check_fs+0x64>
    9ac8:	fe 01       	movw	r30, r28
    9aca:	ed 5c       	subi	r30, 0xCD	; 205
    9acc:	fd 4f       	sbci	r31, 0xFD	; 253
    9ace:	80 81       	ld	r24, Z
    9ad0:	91 81       	ldd	r25, Z+1	; 0x01
    9ad2:	85 35       	cpi	r24, 0x55	; 85
    9ad4:	9a 4a       	sbci	r25, 0xAA	; 170
    9ad6:	f1 f4       	brne	.+60     	; 0x9b14 <check_fs+0x6a>
    9ad8:	8d a9       	ldd	r24, Y+53	; 0x35
    9ada:	8b 3e       	cpi	r24, 0xEB	; 235
    9adc:	19 f0       	breq	.+6      	; 0x9ae4 <check_fs+0x3a>
    9ade:	88 5e       	subi	r24, 0xE8	; 232
    9ae0:	82 30       	cpi	r24, 0x02	; 2
    9ae2:	f0 f4       	brcc	.+60     	; 0x9b20 <check_fs+0x76>
    9ae4:	43 e0       	ldi	r20, 0x03	; 3
    9ae6:	50 e0       	ldi	r21, 0x00	; 0
    9ae8:	61 ec       	ldi	r22, 0xC1	; 193
    9aea:	78 e0       	ldi	r23, 0x08	; 8
    9aec:	ce 01       	movw	r24, r28
    9aee:	85 59       	subi	r24, 0x95	; 149
    9af0:	9f 4f       	sbci	r25, 0xFF	; 255
    9af2:	e9 da       	rcall	.-2606   	; 0x90c6 <mem_cmp>
    9af4:	89 2b       	or	r24, r25
    9af6:	89 f0       	breq	.+34     	; 0x9b1a <check_fs+0x70>
    9af8:	45 e0       	ldi	r20, 0x05	; 5
    9afa:	50 e0       	ldi	r21, 0x00	; 0
    9afc:	6c e1       	ldi	r22, 0x1C	; 28
    9afe:	74 e0       	ldi	r23, 0x04	; 4
    9b00:	ce 01       	movw	r24, r28
    9b02:	89 57       	subi	r24, 0x79	; 121
    9b04:	9f 4f       	sbci	r25, 0xFF	; 255
    9b06:	df da       	rcall	.-2626   	; 0x90c6 <mem_cmp>
    9b08:	89 2b       	or	r24, r25
    9b0a:	51 f4       	brne	.+20     	; 0x9b20 <check_fs+0x76>
    9b0c:	06 c0       	rjmp	.+12     	; 0x9b1a <check_fs+0x70>
    9b0e:	84 e0       	ldi	r24, 0x04	; 4
    9b10:	90 e0       	ldi	r25, 0x00	; 0
    9b12:	08 c0       	rjmp	.+16     	; 0x9b24 <check_fs+0x7a>
    9b14:	83 e0       	ldi	r24, 0x03	; 3
    9b16:	90 e0       	ldi	r25, 0x00	; 0
    9b18:	05 c0       	rjmp	.+10     	; 0x9b24 <check_fs+0x7a>
    9b1a:	80 e0       	ldi	r24, 0x00	; 0
    9b1c:	90 e0       	ldi	r25, 0x00	; 0
    9b1e:	02 c0       	rjmp	.+4      	; 0x9b24 <check_fs+0x7a>
    9b20:	82 e0       	ldi	r24, 0x02	; 2
    9b22:	90 e0       	ldi	r25, 0x00	; 0
    9b24:	df 91       	pop	r29
    9b26:	cf 91       	pop	r28
    9b28:	08 95       	ret

00009b2a <mount_volume>:
    9b2a:	a0 e2       	ldi	r26, 0x20	; 32
    9b2c:	b0 e0       	ldi	r27, 0x00	; 0
    9b2e:	eb e9       	ldi	r30, 0x9B	; 155
    9b30:	fd e4       	ldi	r31, 0x4D	; 77
    9b32:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__prologue_saves__+0x4>
    9b36:	5b 01       	movw	r10, r22
    9b38:	f4 2e       	mov	r15, r20
    9b3a:	db 01       	movw	r26, r22
    9b3c:	1d 92       	st	X+, r1
    9b3e:	1c 92       	st	X, r1
    9b40:	ca db       	rcall	.-2156   	; 0x92d6 <get_ldnumber>
    9b42:	6c 01       	movw	r12, r24
    9b44:	97 fd       	sbrc	r25, 7
    9b46:	39 c2       	rjmp	.+1138   	; 0x9fba <mount_volume+0x490>
    9b48:	fc 01       	movw	r30, r24
    9b4a:	ee 0f       	add	r30, r30
    9b4c:	ff 1f       	adc	r31, r31
    9b4e:	e1 5d       	subi	r30, 0xD1	; 209
    9b50:	f7 4e       	sbci	r31, 0xE7	; 231
    9b52:	00 81       	ld	r16, Z
    9b54:	11 81       	ldd	r17, Z+1	; 0x01
    9b56:	01 15       	cp	r16, r1
    9b58:	11 05       	cpc	r17, r1
    9b5a:	09 f4       	brne	.+2      	; 0x9b5e <mount_volume+0x34>
    9b5c:	31 c2       	rjmp	.+1122   	; 0x9fc0 <mount_volume+0x496>
    9b5e:	f5 01       	movw	r30, r10
    9b60:	11 83       	std	Z+1, r17	; 0x01
    9b62:	00 83       	st	Z, r16
    9b64:	ff 2d       	mov	r31, r15
    9b66:	fe 7f       	andi	r31, 0xFE	; 254
    9b68:	ff 2e       	mov	r15, r31
    9b6a:	d8 01       	movw	r26, r16
    9b6c:	8c 91       	ld	r24, X
    9b6e:	88 23       	and	r24, r24
    9b70:	71 f0       	breq	.+28     	; 0x9b8e <mount_volume+0x64>
    9b72:	f8 01       	movw	r30, r16
    9b74:	81 81       	ldd	r24, Z+1	; 0x01
    9b76:	0e 94 57 6b 	call	0xd6ae	; 0xd6ae <disk_status>
    9b7a:	80 fd       	sbrc	r24, 0
    9b7c:	08 c0       	rjmp	.+16     	; 0x9b8e <mount_volume+0x64>
    9b7e:	ff 20       	and	r15, r15
    9b80:	09 f4       	brne	.+2      	; 0x9b84 <mount_volume+0x5a>
    9b82:	21 c2       	rjmp	.+1090   	; 0x9fc6 <mount_volume+0x49c>
    9b84:	82 ff       	sbrs	r24, 2
    9b86:	1f c2       	rjmp	.+1086   	; 0x9fc6 <mount_volume+0x49c>
    9b88:	8a e0       	ldi	r24, 0x0A	; 10
    9b8a:	90 e0       	ldi	r25, 0x00	; 0
    9b8c:	24 c2       	rjmp	.+1096   	; 0x9fd6 <mount_volume+0x4ac>
    9b8e:	d8 01       	movw	r26, r16
    9b90:	1c 92       	st	X, r1
    9b92:	f8 01       	movw	r30, r16
    9b94:	c1 82       	std	Z+1, r12	; 0x01
    9b96:	8c 2d       	mov	r24, r12
    9b98:	0e 94 5d 6b 	call	0xd6ba	; 0xd6ba <disk_initialize>
    9b9c:	80 fd       	sbrc	r24, 0
    9b9e:	16 c2       	rjmp	.+1068   	; 0x9fcc <mount_volume+0x4a2>
    9ba0:	ff 20       	and	r15, r15
    9ba2:	11 f0       	breq	.+4      	; 0x9ba8 <mount_volume+0x7e>
    9ba4:	82 fd       	sbrc	r24, 2
    9ba6:	f0 cf       	rjmp	.-32     	; 0x9b88 <mount_volume+0x5e>
    9ba8:	40 e0       	ldi	r20, 0x00	; 0
    9baa:	50 e0       	ldi	r21, 0x00	; 0
    9bac:	ba 01       	movw	r22, r20
    9bae:	c8 01       	movw	r24, r16
    9bb0:	7c df       	rcall	.-264    	; 0x9aaa <check_fs>
    9bb2:	82 30       	cpi	r24, 0x02	; 2
    9bb4:	91 05       	cpc	r25, r1
    9bb6:	b9 f5       	brne	.+110    	; 0x9c26 <mount_volume+0xfc>
    9bb8:	68 01       	movw	r12, r16
    9bba:	f5 e0       	ldi	r31, 0x05	; 5
    9bbc:	cf 1a       	sub	r12, r31
    9bbe:	fe ef       	ldi	r31, 0xFE	; 254
    9bc0:	df 0a       	sbc	r13, r31
    9bc2:	9e 01       	movw	r18, r28
    9bc4:	2f 5f       	subi	r18, 0xFF	; 255
    9bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    9bc8:	79 01       	movw	r14, r18
    9bca:	48 01       	movw	r8, r16
    9bcc:	35 ec       	ldi	r19, 0xC5	; 197
    9bce:	83 1a       	sub	r8, r19
    9bd0:	3d ef       	ldi	r19, 0xFD	; 253
    9bd2:	93 0a       	sbc	r9, r19
    9bd4:	57 01       	movw	r10, r14
    9bd6:	c6 01       	movw	r24, r12
    9bd8:	52 da       	rcall	.-2908   	; 0x907e <ld_dword>
    9bda:	d5 01       	movw	r26, r10
    9bdc:	6d 93       	st	X+, r22
    9bde:	7d 93       	st	X+, r23
    9be0:	8d 93       	st	X+, r24
    9be2:	9d 93       	st	X+, r25
    9be4:	5d 01       	movw	r10, r26
    9be6:	b0 e1       	ldi	r27, 0x10	; 16
    9be8:	cb 0e       	add	r12, r27
    9bea:	d1 1c       	adc	r13, r1
    9bec:	c8 14       	cp	r12, r8
    9bee:	d9 04       	cpc	r13, r9
    9bf0:	91 f7       	brne	.-28     	; 0x9bd6 <mount_volume+0xac>
    9bf2:	6e 01       	movw	r12, r28
    9bf4:	e1 e1       	ldi	r30, 0x11	; 17
    9bf6:	ce 0e       	add	r12, r30
    9bf8:	d1 1c       	adc	r13, r1
    9bfa:	d7 01       	movw	r26, r14
    9bfc:	4d 91       	ld	r20, X+
    9bfe:	5d 91       	ld	r21, X+
    9c00:	6d 91       	ld	r22, X+
    9c02:	7d 91       	ld	r23, X+
    9c04:	7d 01       	movw	r14, r26
    9c06:	41 15       	cp	r20, r1
    9c08:	51 05       	cpc	r21, r1
    9c0a:	61 05       	cpc	r22, r1
    9c0c:	71 05       	cpc	r23, r1
    9c0e:	31 f0       	breq	.+12     	; 0x9c1c <mount_volume+0xf2>
    9c10:	c8 01       	movw	r24, r16
    9c12:	4b df       	rcall	.-362    	; 0x9aaa <check_fs>
    9c14:	82 30       	cpi	r24, 0x02	; 2
    9c16:	91 05       	cpc	r25, r1
    9c18:	18 f4       	brcc	.+6      	; 0x9c20 <mount_volume+0xf6>
    9c1a:	05 c0       	rjmp	.+10     	; 0x9c26 <mount_volume+0xfc>
    9c1c:	83 e0       	ldi	r24, 0x03	; 3
    9c1e:	90 e0       	ldi	r25, 0x00	; 0
    9c20:	ce 14       	cp	r12, r14
    9c22:	df 04       	cpc	r13, r15
    9c24:	51 f7       	brne	.-44     	; 0x9bfa <mount_volume+0xd0>
    9c26:	84 30       	cpi	r24, 0x04	; 4
    9c28:	91 05       	cpc	r25, r1
    9c2a:	09 f4       	brne	.+2      	; 0x9c2e <mount_volume+0x104>
    9c2c:	d2 c1       	rjmp	.+932    	; 0x9fd2 <mount_volume+0x4a8>
    9c2e:	02 97       	sbiw	r24, 0x02	; 2
    9c30:	18 f0       	brcs	.+6      	; 0x9c38 <mount_volume+0x10e>
    9c32:	8d e0       	ldi	r24, 0x0D	; 13
    9c34:	90 e0       	ldi	r25, 0x00	; 0
    9c36:	cf c1       	rjmp	.+926    	; 0x9fd6 <mount_volume+0x4ac>
    9c38:	f8 01       	movw	r30, r16
    9c3a:	e0 5c       	subi	r30, 0xC0	; 192
    9c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    9c3e:	80 81       	ld	r24, Z
    9c40:	91 81       	ldd	r25, Z+1	; 0x01
    9c42:	81 15       	cp	r24, r1
    9c44:	92 40       	sbci	r25, 0x02	; 2
    9c46:	a9 f7       	brne	.-22     	; 0x9c32 <mount_volume+0x108>
    9c48:	3b 96       	adiw	r30, 0x0b	; 11
    9c4a:	40 80       	ld	r4, Z
    9c4c:	51 80       	ldd	r5, Z+1	; 0x01
    9c4e:	41 14       	cp	r4, r1
    9c50:	51 04       	cpc	r5, r1
    9c52:	19 f0       	breq	.+6      	; 0x9c5a <mount_volume+0x130>
    9c54:	61 2c       	mov	r6, r1
    9c56:	71 2c       	mov	r7, r1
    9c58:	06 c0       	rjmp	.+12     	; 0x9c66 <mount_volume+0x13c>
    9c5a:	c8 01       	movw	r24, r16
    9c5c:	87 5a       	subi	r24, 0xA7	; 167
    9c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    9c60:	0e da       	rcall	.-3044   	; 0x907e <ld_dword>
    9c62:	2b 01       	movw	r4, r22
    9c64:	3c 01       	movw	r6, r24
    9c66:	f8 01       	movw	r30, r16
    9c68:	21 a9       	ldd	r18, Z+49	; 0x31
    9c6a:	32 a9       	ldd	r19, Z+50	; 0x32
    9c6c:	43 a9       	ldd	r20, Z+51	; 0x33
    9c6e:	54 a9       	ldd	r21, Z+52	; 0x34
    9c70:	29 8b       	std	Y+17, r18	; 0x11
    9c72:	3a 8b       	std	Y+18, r19	; 0x12
    9c74:	4b 8b       	std	Y+19, r20	; 0x13
    9c76:	5c 8b       	std	Y+20, r21	; 0x14
    9c78:	45 8e       	std	Z+29, r4	; 0x1d
    9c7a:	56 8e       	std	Z+30, r5	; 0x1e
    9c7c:	67 8e       	std	Z+31, r6	; 0x1f
    9c7e:	70 a2       	std	Z+32, r7	; 0x20
    9c80:	eb 5b       	subi	r30, 0xBB	; 187
    9c82:	ff 4f       	sbci	r31, 0xFF	; 255
    9c84:	a0 80       	ld	r10, Z
    9c86:	f8 01       	movw	r30, r16
    9c88:	a2 82       	std	Z+2, r10	; 0x02
    9c8a:	8f ef       	ldi	r24, 0xFF	; 255
    9c8c:	8a 0d       	add	r24, r10
    9c8e:	82 30       	cpi	r24, 0x02	; 2
    9c90:	80 f6       	brcc	.-96     	; 0x9c32 <mount_volume+0x108>
    9c92:	ee 5b       	subi	r30, 0xBE	; 190
    9c94:	ff 4f       	sbci	r31, 0xFF	; 255
    9c96:	b0 80       	ld	r11, Z
    9c98:	8b 2d       	mov	r24, r11
    9c9a:	90 e0       	ldi	r25, 0x00	; 0
    9c9c:	f8 01       	movw	r30, r16
    9c9e:	92 87       	std	Z+10, r25	; 0x0a
    9ca0:	81 87       	std	Z+9, r24	; 0x09
    9ca2:	00 97       	sbiw	r24, 0x00	; 0
    9ca4:	31 f2       	breq	.-116    	; 0x9c32 <mount_volume+0x108>
    9ca6:	9c 01       	movw	r18, r24
    9ca8:	21 50       	subi	r18, 0x01	; 1
    9caa:	31 09       	sbc	r19, r1
    9cac:	82 23       	and	r24, r18
    9cae:	93 23       	and	r25, r19
    9cb0:	89 2b       	or	r24, r25
    9cb2:	09 f0       	breq	.+2      	; 0x9cb6 <mount_volume+0x18c>
    9cb4:	be cf       	rjmp	.-132    	; 0x9c32 <mount_volume+0x108>
    9cb6:	ea 5b       	subi	r30, 0xBA	; 186
    9cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    9cba:	80 80       	ld	r8, Z
    9cbc:	91 80       	ldd	r9, Z+1	; 0x01
    9cbe:	f8 01       	movw	r30, r16
    9cc0:	90 86       	std	Z+8, r9	; 0x08
    9cc2:	87 82       	std	Z+7, r8	; 0x07
    9cc4:	c4 01       	movw	r24, r8
    9cc6:	8f 70       	andi	r24, 0x0F	; 15
    9cc8:	99 27       	eor	r25, r25
    9cca:	89 2b       	or	r24, r25
    9ccc:	09 f0       	breq	.+2      	; 0x9cd0 <mount_volume+0x1a6>
    9cce:	b1 cf       	rjmp	.-158    	; 0x9c32 <mount_volume+0x108>
    9cd0:	e8 5b       	subi	r30, 0xB8	; 184
    9cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    9cd4:	80 81       	ld	r24, Z
    9cd6:	91 81       	ldd	r25, Z+1	; 0x01
    9cd8:	6c 01       	movw	r12, r24
    9cda:	e1 2c       	mov	r14, r1
    9cdc:	f1 2c       	mov	r15, r1
    9cde:	89 2b       	or	r24, r25
    9ce0:	31 f4       	brne	.+12     	; 0x9cee <mount_volume+0x1c4>
    9ce2:	c8 01       	movw	r24, r16
    9ce4:	8b 5a       	subi	r24, 0xAB	; 171
    9ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    9ce8:	ca d9       	rcall	.-3180   	; 0x907e <ld_dword>
    9cea:	6b 01       	movw	r12, r22
    9cec:	7c 01       	movw	r14, r24
    9cee:	f8 01       	movw	r30, r16
    9cf0:	ed 5b       	subi	r30, 0xBD	; 189
    9cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    9cf4:	01 90       	ld	r0, Z+
    9cf6:	f0 81       	ld	r31, Z
    9cf8:	e0 2d       	mov	r30, r0
    9cfa:	30 97       	sbiw	r30, 0x00	; 0
    9cfc:	09 f4       	brne	.+2      	; 0x9d00 <mount_volume+0x1d6>
    9cfe:	99 cf       	rjmp	.-206    	; 0x9c32 <mount_volume+0x108>
    9d00:	aa 2d       	mov	r26, r10
    9d02:	b0 e0       	ldi	r27, 0x00	; 0
    9d04:	a3 01       	movw	r20, r6
    9d06:	92 01       	movw	r18, r4
    9d08:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
    9d0c:	69 8f       	std	Y+25, r22	; 0x19
    9d0e:	7a 8f       	std	Y+26, r23	; 0x1a
    9d10:	8b 8f       	std	Y+27, r24	; 0x1b
    9d12:	9c 8f       	std	Y+28, r25	; 0x1c
    9d14:	9f 01       	movw	r18, r30
    9d16:	40 e0       	ldi	r20, 0x00	; 0
    9d18:	50 e0       	ldi	r21, 0x00	; 0
    9d1a:	2d 8f       	std	Y+29, r18	; 0x1d
    9d1c:	3e 8f       	std	Y+30, r19	; 0x1e
    9d1e:	4f 8f       	std	Y+31, r20	; 0x1f
    9d20:	58 a3       	std	Y+32, r21	; 0x20
    9d22:	c4 01       	movw	r24, r8
    9d24:	f4 e0       	ldi	r31, 0x04	; 4
    9d26:	96 95       	lsr	r25
    9d28:	87 95       	ror	r24
    9d2a:	fa 95       	dec	r31
    9d2c:	e1 f7       	brne	.-8      	; 0x9d26 <mount_volume+0x1fc>
    9d2e:	28 0f       	add	r18, r24
    9d30:	39 1f       	adc	r19, r25
    9d32:	41 1d       	adc	r20, r1
    9d34:	51 1d       	adc	r21, r1
    9d36:	da 01       	movw	r26, r20
    9d38:	c9 01       	movw	r24, r18
    9d3a:	29 8d       	ldd	r18, Y+25	; 0x19
    9d3c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9d3e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9d40:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9d42:	28 0f       	add	r18, r24
    9d44:	39 1f       	adc	r19, r25
    9d46:	4a 1f       	adc	r20, r26
    9d48:	5b 1f       	adc	r21, r27
    9d4a:	2d 8b       	std	Y+21, r18	; 0x15
    9d4c:	3e 8b       	std	Y+22, r19	; 0x16
    9d4e:	4f 8b       	std	Y+23, r20	; 0x17
    9d50:	58 8f       	std	Y+24, r21	; 0x18
    9d52:	c2 16       	cp	r12, r18
    9d54:	d3 06       	cpc	r13, r19
    9d56:	e4 06       	cpc	r14, r20
    9d58:	f5 06       	cpc	r15, r21
    9d5a:	08 f4       	brcc	.+2      	; 0x9d5e <mount_volume+0x234>
    9d5c:	6a cf       	rjmp	.-300    	; 0x9c32 <mount_volume+0x108>
    9d5e:	c7 01       	movw	r24, r14
    9d60:	b6 01       	movw	r22, r12
    9d62:	62 1b       	sub	r22, r18
    9d64:	73 0b       	sbc	r23, r19
    9d66:	84 0b       	sbc	r24, r20
    9d68:	95 0b       	sbc	r25, r21
    9d6a:	2b 2d       	mov	r18, r11
    9d6c:	30 e0       	ldi	r19, 0x00	; 0
    9d6e:	40 e0       	ldi	r20, 0x00	; 0
    9d70:	50 e0       	ldi	r21, 0x00	; 0
    9d72:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    9d76:	da 01       	movw	r26, r20
    9d78:	c9 01       	movw	r24, r18
    9d7a:	01 97       	sbiw	r24, 0x01	; 1
    9d7c:	a1 09       	sbc	r26, r1
    9d7e:	b1 09       	sbc	r27, r1
    9d80:	85 3f       	cpi	r24, 0xF5	; 245
    9d82:	9f 4f       	sbci	r25, 0xFF	; 255
    9d84:	af 4f       	sbci	r26, 0xFF	; 255
    9d86:	bf 40       	sbci	r27, 0x0F	; 15
    9d88:	08 f0       	brcs	.+2      	; 0x9d8c <mount_volume+0x262>
    9d8a:	53 cf       	rjmp	.-346    	; 0x9c32 <mount_volume+0x108>
    9d8c:	26 3f       	cpi	r18, 0xF6	; 246
    9d8e:	8f ef       	ldi	r24, 0xFF	; 255
    9d90:	38 07       	cpc	r19, r24
    9d92:	41 05       	cpc	r20, r1
    9d94:	51 05       	cpc	r21, r1
    9d96:	50 f4       	brcc	.+20     	; 0x9dac <mount_volume+0x282>
    9d98:	26 3f       	cpi	r18, 0xF6	; 246
    9d9a:	9f e0       	ldi	r25, 0x0F	; 15
    9d9c:	39 07       	cpc	r19, r25
    9d9e:	41 05       	cpc	r20, r1
    9da0:	51 05       	cpc	r21, r1
    9da2:	40 f4       	brcc	.+16     	; 0x9db4 <mount_volume+0x28a>
    9da4:	aa 24       	eor	r10, r10
    9da6:	a3 94       	inc	r10
    9da8:	b1 2c       	mov	r11, r1
    9daa:	07 c0       	rjmp	.+14     	; 0x9dba <mount_volume+0x290>
    9dac:	73 e0       	ldi	r23, 0x03	; 3
    9dae:	a7 2e       	mov	r10, r23
    9db0:	b1 2c       	mov	r11, r1
    9db2:	03 c0       	rjmp	.+6      	; 0x9dba <mount_volume+0x290>
    9db4:	62 e0       	ldi	r22, 0x02	; 2
    9db6:	a6 2e       	mov	r10, r22
    9db8:	b1 2c       	mov	r11, r1
    9dba:	69 01       	movw	r12, r18
    9dbc:	7a 01       	movw	r14, r20
    9dbe:	a2 e0       	ldi	r26, 0x02	; 2
    9dc0:	ca 0e       	add	r12, r26
    9dc2:	d1 1c       	adc	r13, r1
    9dc4:	e1 1c       	adc	r14, r1
    9dc6:	f1 1c       	adc	r15, r1
    9dc8:	f8 01       	movw	r30, r16
    9dca:	c1 8e       	std	Z+25, r12	; 0x19
    9dcc:	d2 8e       	std	Z+26, r13	; 0x1a
    9dce:	e3 8e       	std	Z+27, r14	; 0x1b
    9dd0:	f4 8e       	std	Z+28, r15	; 0x1c
    9dd2:	29 89       	ldd	r18, Y+17	; 0x11
    9dd4:	3a 89       	ldd	r19, Y+18	; 0x12
    9dd6:	4b 89       	ldd	r20, Y+19	; 0x13
    9dd8:	5c 89       	ldd	r21, Y+20	; 0x14
    9dda:	21 a3       	std	Z+33, r18	; 0x21
    9ddc:	32 a3       	std	Z+34, r19	; 0x22
    9dde:	43 a3       	std	Z+35, r20	; 0x23
    9de0:	54 a3       	std	Z+36, r21	; 0x24
    9de2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9de4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9de6:	af 8d       	ldd	r26, Y+31	; 0x1f
    9de8:	b8 a1       	ldd	r27, Y+32	; 0x20
    9dea:	28 0f       	add	r18, r24
    9dec:	39 1f       	adc	r19, r25
    9dee:	4a 1f       	adc	r20, r26
    9df0:	5b 1f       	adc	r21, r27
    9df2:	2d 8f       	std	Y+29, r18	; 0x1d
    9df4:	3e 8f       	std	Y+30, r19	; 0x1e
    9df6:	4f 8f       	std	Y+31, r20	; 0x1f
    9df8:	58 a3       	std	Y+32, r21	; 0x20
    9dfa:	25 a3       	std	Z+37, r18	; 0x25
    9dfc:	36 a3       	std	Z+38, r19	; 0x26
    9dfe:	47 a3       	std	Z+39, r20	; 0x27
    9e00:	50 a7       	std	Z+40, r21	; 0x28
    9e02:	49 89       	ldd	r20, Y+17	; 0x11
    9e04:	5a 89       	ldd	r21, Y+18	; 0x12
    9e06:	6b 89       	ldd	r22, Y+19	; 0x13
    9e08:	7c 89       	ldd	r23, Y+20	; 0x14
    9e0a:	8d 89       	ldd	r24, Y+21	; 0x15
    9e0c:	9e 89       	ldd	r25, Y+22	; 0x16
    9e0e:	af 89       	ldd	r26, Y+23	; 0x17
    9e10:	b8 8d       	ldd	r27, Y+24	; 0x18
    9e12:	48 0f       	add	r20, r24
    9e14:	59 1f       	adc	r21, r25
    9e16:	6a 1f       	adc	r22, r26
    9e18:	7b 1f       	adc	r23, r27
    9e1a:	45 a7       	std	Z+45, r20	; 0x2d
    9e1c:	56 a7       	std	Z+46, r21	; 0x2e
    9e1e:	67 a7       	std	Z+47, r22	; 0x2f
    9e20:	70 ab       	std	Z+48, r23	; 0x30
    9e22:	f3 e0       	ldi	r31, 0x03	; 3
    9e24:	af 16       	cp	r10, r31
    9e26:	b1 04       	cpc	r11, r1
    9e28:	e9 f4       	brne	.+58     	; 0x9e64 <mount_volume+0x33a>
    9e2a:	f8 01       	movw	r30, r16
    9e2c:	e1 5a       	subi	r30, 0xA1	; 161
    9e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    9e30:	80 81       	ld	r24, Z
    9e32:	91 81       	ldd	r25, Z+1	; 0x01
    9e34:	89 2b       	or	r24, r25
    9e36:	09 f0       	breq	.+2      	; 0x9e3a <mount_volume+0x310>
    9e38:	fc ce       	rjmp	.-520    	; 0x9c32 <mount_volume+0x108>
    9e3a:	81 14       	cp	r8, r1
    9e3c:	91 04       	cpc	r9, r1
    9e3e:	09 f0       	breq	.+2      	; 0x9e42 <mount_volume+0x318>
    9e40:	f8 ce       	rjmp	.-528    	; 0x9c32 <mount_volume+0x108>
    9e42:	c8 01       	movw	r24, r16
    9e44:	8f 59       	subi	r24, 0x9F	; 159
    9e46:	9f 4f       	sbci	r25, 0xFF	; 255
    9e48:	1a d9       	rcall	.-3532   	; 0x907e <ld_dword>
    9e4a:	f8 01       	movw	r30, r16
    9e4c:	61 a7       	std	Z+41, r22	; 0x29
    9e4e:	72 a7       	std	Z+42, r23	; 0x2a
    9e50:	83 a7       	std	Z+43, r24	; 0x2b
    9e52:	94 a7       	std	Z+44, r25	; 0x2c
    9e54:	42 e0       	ldi	r20, 0x02	; 2
    9e56:	cc 0c       	add	r12, r12
    9e58:	dd 1c       	adc	r13, r13
    9e5a:	ee 1c       	adc	r14, r14
    9e5c:	ff 1c       	adc	r15, r15
    9e5e:	4a 95       	dec	r20
    9e60:	d1 f7       	brne	.-12     	; 0x9e56 <mount_volume+0x32c>
    9e62:	33 c0       	rjmp	.+102    	; 0x9eca <mount_volume+0x3a0>
    9e64:	81 14       	cp	r8, r1
    9e66:	91 04       	cpc	r9, r1
    9e68:	09 f4       	brne	.+2      	; 0x9e6c <mount_volume+0x342>
    9e6a:	e3 ce       	rjmp	.-570    	; 0x9c32 <mount_volume+0x108>
    9e6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9e6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9e70:	af 8d       	ldd	r26, Y+31	; 0x1f
    9e72:	b8 a1       	ldd	r27, Y+32	; 0x20
    9e74:	29 8d       	ldd	r18, Y+25	; 0x19
    9e76:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9e78:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9e7a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9e7c:	82 0f       	add	r24, r18
    9e7e:	93 1f       	adc	r25, r19
    9e80:	a4 1f       	adc	r26, r20
    9e82:	b5 1f       	adc	r27, r21
    9e84:	f8 01       	movw	r30, r16
    9e86:	81 a7       	std	Z+41, r24	; 0x29
    9e88:	92 a7       	std	Z+42, r25	; 0x2a
    9e8a:	a3 a7       	std	Z+43, r26	; 0x2b
    9e8c:	b4 a7       	std	Z+44, r27	; 0x2c
    9e8e:	f2 e0       	ldi	r31, 0x02	; 2
    9e90:	af 16       	cp	r10, r31
    9e92:	b1 04       	cpc	r11, r1
    9e94:	29 f4       	brne	.+10     	; 0x9ea0 <mount_volume+0x376>
    9e96:	cc 0c       	add	r12, r12
    9e98:	dd 1c       	adc	r13, r13
    9e9a:	ee 1c       	adc	r14, r14
    9e9c:	ff 1c       	adc	r15, r15
    9e9e:	15 c0       	rjmp	.+42     	; 0x9eca <mount_volume+0x3a0>
    9ea0:	a3 e0       	ldi	r26, 0x03	; 3
    9ea2:	b0 e0       	ldi	r27, 0x00	; 0
    9ea4:	a7 01       	movw	r20, r14
    9ea6:	96 01       	movw	r18, r12
    9ea8:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
    9eac:	dc 01       	movw	r26, r24
    9eae:	cb 01       	movw	r24, r22
    9eb0:	b6 95       	lsr	r27
    9eb2:	a7 95       	ror	r26
    9eb4:	97 95       	ror	r25
    9eb6:	87 95       	ror	r24
    9eb8:	21 e0       	ldi	r18, 0x01	; 1
    9eba:	c2 22       	and	r12, r18
    9ebc:	dd 24       	eor	r13, r13
    9ebe:	ee 24       	eor	r14, r14
    9ec0:	ff 24       	eor	r15, r15
    9ec2:	c8 0e       	add	r12, r24
    9ec4:	d9 1e       	adc	r13, r25
    9ec6:	ea 1e       	adc	r14, r26
    9ec8:	fb 1e       	adc	r15, r27
    9eca:	3f ef       	ldi	r19, 0xFF	; 255
    9ecc:	c3 0e       	add	r12, r19
    9ece:	31 e0       	ldi	r19, 0x01	; 1
    9ed0:	d3 1e       	adc	r13, r19
    9ed2:	e1 1c       	adc	r14, r1
    9ed4:	f1 1c       	adc	r15, r1
    9ed6:	89 e0       	ldi	r24, 0x09	; 9
    9ed8:	f6 94       	lsr	r15
    9eda:	e7 94       	ror	r14
    9edc:	d7 94       	ror	r13
    9ede:	c7 94       	ror	r12
    9ee0:	8a 95       	dec	r24
    9ee2:	d1 f7       	brne	.-12     	; 0x9ed8 <mount_volume+0x3ae>
    9ee4:	4c 14       	cp	r4, r12
    9ee6:	5d 04       	cpc	r5, r13
    9ee8:	6e 04       	cpc	r6, r14
    9eea:	7f 04       	cpc	r7, r15
    9eec:	08 f4       	brcc	.+2      	; 0x9ef0 <mount_volume+0x3c6>
    9eee:	a1 ce       	rjmp	.-702    	; 0x9c32 <mount_volume+0x108>
    9ef0:	8f ef       	ldi	r24, 0xFF	; 255
    9ef2:	9f ef       	ldi	r25, 0xFF	; 255
    9ef4:	dc 01       	movw	r26, r24
    9ef6:	f8 01       	movw	r30, r16
    9ef8:	81 8b       	std	Z+17, r24	; 0x11
    9efa:	92 8b       	std	Z+18, r25	; 0x12
    9efc:	a3 8b       	std	Z+19, r26	; 0x13
    9efe:	b4 8b       	std	Z+20, r27	; 0x14
    9f00:	85 87       	std	Z+13, r24	; 0x0d
    9f02:	96 87       	std	Z+14, r25	; 0x0e
    9f04:	a7 87       	std	Z+15, r26	; 0x0f
    9f06:	b0 8b       	std	Z+16, r27	; 0x10
    9f08:	80 e8       	ldi	r24, 0x80	; 128
    9f0a:	84 83       	std	Z+4, r24	; 0x04
    9f0c:	f3 e0       	ldi	r31, 0x03	; 3
    9f0e:	af 16       	cp	r10, r31
    9f10:	b1 04       	cpc	r11, r1
    9f12:	09 f0       	breq	.+2      	; 0x9f16 <mount_volume+0x3ec>
    9f14:	3f c0       	rjmp	.+126    	; 0x9f94 <mount_volume+0x46a>
    9f16:	f8 01       	movw	r30, r16
    9f18:	eb 59       	subi	r30, 0x9B	; 155
    9f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    9f1c:	80 81       	ld	r24, Z
    9f1e:	91 81       	ldd	r25, Z+1	; 0x01
    9f20:	01 97       	sbiw	r24, 0x01	; 1
    9f22:	c1 f5       	brne	.+112    	; 0x9f94 <mount_volume+0x46a>
    9f24:	49 89       	ldd	r20, Y+17	; 0x11
    9f26:	5a 89       	ldd	r21, Y+18	; 0x12
    9f28:	6b 89       	ldd	r22, Y+19	; 0x13
    9f2a:	7c 89       	ldd	r23, Y+20	; 0x14
    9f2c:	4f 5f       	subi	r20, 0xFF	; 255
    9f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    9f30:	6f 4f       	sbci	r22, 0xFF	; 255
    9f32:	7f 4f       	sbci	r23, 0xFF	; 255
    9f34:	c8 01       	movw	r24, r16
    9f36:	7e dd       	rcall	.-1284   	; 0x9a34 <move_window>
    9f38:	89 2b       	or	r24, r25
    9f3a:	61 f5       	brne	.+88     	; 0x9f94 <mount_volume+0x46a>
    9f3c:	f8 01       	movw	r30, r16
    9f3e:	14 82       	std	Z+4, r1	; 0x04
    9f40:	ed 5c       	subi	r30, 0xCD	; 205
    9f42:	fd 4f       	sbci	r31, 0xFD	; 253
    9f44:	80 81       	ld	r24, Z
    9f46:	91 81       	ldd	r25, Z+1	; 0x01
    9f48:	85 35       	cpi	r24, 0x55	; 85
    9f4a:	9a 4a       	sbci	r25, 0xAA	; 170
    9f4c:	19 f5       	brne	.+70     	; 0x9f94 <mount_volume+0x46a>
    9f4e:	c8 01       	movw	r24, r16
    9f50:	c5 96       	adiw	r24, 0x35	; 53
    9f52:	95 d8       	rcall	.-3798   	; 0x907e <ld_dword>
    9f54:	62 35       	cpi	r22, 0x52	; 82
    9f56:	72 45       	sbci	r23, 0x52	; 82
    9f58:	81 46       	sbci	r24, 0x61	; 97
    9f5a:	91 44       	sbci	r25, 0x41	; 65
    9f5c:	d9 f4       	brne	.+54     	; 0x9f94 <mount_volume+0x46a>
    9f5e:	c8 01       	movw	r24, r16
    9f60:	87 5e       	subi	r24, 0xE7	; 231
    9f62:	9d 4f       	sbci	r25, 0xFD	; 253
    9f64:	8c d8       	rcall	.-3816   	; 0x907e <ld_dword>
    9f66:	62 37       	cpi	r22, 0x72	; 114
    9f68:	72 47       	sbci	r23, 0x72	; 114
    9f6a:	81 44       	sbci	r24, 0x41	; 65
    9f6c:	91 46       	sbci	r25, 0x61	; 97
    9f6e:	91 f4       	brne	.+36     	; 0x9f94 <mount_volume+0x46a>
    9f70:	c8 01       	movw	r24, r16
    9f72:	83 5e       	subi	r24, 0xE3	; 227
    9f74:	9d 4f       	sbci	r25, 0xFD	; 253
    9f76:	83 d8       	rcall	.-3834   	; 0x907e <ld_dword>
    9f78:	f8 01       	movw	r30, r16
    9f7a:	61 8b       	std	Z+17, r22	; 0x11
    9f7c:	72 8b       	std	Z+18, r23	; 0x12
    9f7e:	83 8b       	std	Z+19, r24	; 0x13
    9f80:	94 8b       	std	Z+20, r25	; 0x14
    9f82:	c8 01       	movw	r24, r16
    9f84:	8f 5d       	subi	r24, 0xDF	; 223
    9f86:	9d 4f       	sbci	r25, 0xFD	; 253
    9f88:	7a d8       	rcall	.-3852   	; 0x907e <ld_dword>
    9f8a:	f8 01       	movw	r30, r16
    9f8c:	65 87       	std	Z+13, r22	; 0x0d
    9f8e:	76 87       	std	Z+14, r23	; 0x0e
    9f90:	87 87       	std	Z+15, r24	; 0x0f
    9f92:	90 8b       	std	Z+16, r25	; 0x10
    9f94:	d8 01       	movw	r26, r16
    9f96:	ac 92       	st	X, r10
    9f98:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <Fsid>
    9f9c:	90 91 2e 18 	lds	r25, 0x182E	; 0x80182e <Fsid+0x1>
    9fa0:	01 96       	adiw	r24, 0x01	; 1
    9fa2:	90 93 2e 18 	sts	0x182E, r25	; 0x80182e <Fsid+0x1>
    9fa6:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <Fsid>
    9faa:	f8 01       	movw	r30, r16
    9fac:	96 83       	std	Z+6, r25	; 0x06
    9fae:	85 83       	std	Z+5, r24	; 0x05
    9fb0:	15 8a       	std	Z+21, r1	; 0x15
    9fb2:	16 8a       	std	Z+22, r1	; 0x16
    9fb4:	17 8a       	std	Z+23, r1	; 0x17
    9fb6:	10 8e       	std	Z+24, r1	; 0x18
    9fb8:	06 c0       	rjmp	.+12     	; 0x9fc6 <mount_volume+0x49c>
    9fba:	8b e0       	ldi	r24, 0x0B	; 11
    9fbc:	90 e0       	ldi	r25, 0x00	; 0
    9fbe:	0b c0       	rjmp	.+22     	; 0x9fd6 <mount_volume+0x4ac>
    9fc0:	8c e0       	ldi	r24, 0x0C	; 12
    9fc2:	90 e0       	ldi	r25, 0x00	; 0
    9fc4:	08 c0       	rjmp	.+16     	; 0x9fd6 <mount_volume+0x4ac>
    9fc6:	80 e0       	ldi	r24, 0x00	; 0
    9fc8:	90 e0       	ldi	r25, 0x00	; 0
    9fca:	05 c0       	rjmp	.+10     	; 0x9fd6 <mount_volume+0x4ac>
    9fcc:	83 e0       	ldi	r24, 0x03	; 3
    9fce:	90 e0       	ldi	r25, 0x00	; 0
    9fd0:	02 c0       	rjmp	.+4      	; 0x9fd6 <mount_volume+0x4ac>
    9fd2:	81 e0       	ldi	r24, 0x01	; 1
    9fd4:	90 e0       	ldi	r25, 0x00	; 0
    9fd6:	a0 96       	adiw	r28, 0x20	; 32
    9fd8:	e0 e1       	ldi	r30, 0x10	; 16
    9fda:	0c 94 07 e4 	jmp	0x1c80e	; 0x1c80e <__epilogue_restores__+0x4>

00009fde <put_fat>:
    9fde:	a6 e0       	ldi	r26, 0x06	; 6
    9fe0:	b0 e0       	ldi	r27, 0x00	; 0
    9fe2:	e5 ef       	ldi	r30, 0xF5	; 245
    9fe4:	ff e4       	ldi	r31, 0x4F	; 79
    9fe6:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    9fea:	42 30       	cpi	r20, 0x02	; 2
    9fec:	51 05       	cpc	r21, r1
    9fee:	61 05       	cpc	r22, r1
    9ff0:	71 05       	cpc	r23, r1
    9ff2:	08 f4       	brcc	.+2      	; 0x9ff6 <put_fat+0x18>
    9ff4:	e7 c0       	rjmp	.+462    	; 0xa1c4 <put_fat+0x1e6>
    9ff6:	fc 01       	movw	r30, r24
    9ff8:	c1 8c       	ldd	r12, Z+25	; 0x19
    9ffa:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9ffc:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9ffe:	f4 8c       	ldd	r15, Z+28	; 0x1c
    a000:	4c 15       	cp	r20, r12
    a002:	5d 05       	cpc	r21, r13
    a004:	6e 05       	cpc	r22, r14
    a006:	7f 05       	cpc	r23, r15
    a008:	08 f0       	brcs	.+2      	; 0xa00c <put_fat+0x2e>
    a00a:	dc c0       	rjmp	.+440    	; 0xa1c4 <put_fat+0x1e6>
    a00c:	28 01       	movw	r4, r16
    a00e:	39 01       	movw	r6, r18
    a010:	6a 01       	movw	r12, r20
    a012:	7b 01       	movw	r14, r22
    a014:	9e 83       	std	Y+6, r25	; 0x06
    a016:	8d 83       	std	Y+5, r24	; 0x05
    a018:	80 81       	ld	r24, Z
    a01a:	82 30       	cpi	r24, 0x02	; 2
    a01c:	09 f4       	brne	.+2      	; 0xa020 <put_fat+0x42>
    a01e:	73 c0       	rjmp	.+230    	; 0xa106 <put_fat+0x128>
    a020:	83 30       	cpi	r24, 0x03	; 3
    a022:	09 f4       	brne	.+2      	; 0xa026 <put_fat+0x48>
    a024:	92 c0       	rjmp	.+292    	; 0xa14a <put_fat+0x16c>
    a026:	81 30       	cpi	r24, 0x01	; 1
    a028:	09 f0       	breq	.+2      	; 0xa02c <put_fat+0x4e>
    a02a:	cc c0       	rjmp	.+408    	; 0xa1c4 <put_fat+0x1e6>
    a02c:	4a 01       	movw	r8, r20
    a02e:	96 94       	lsr	r9
    a030:	87 94       	ror	r8
    a032:	84 0e       	add	r8, r20
    a034:	95 1e       	adc	r9, r21
    a036:	c4 01       	movw	r24, r8
    a038:	89 2f       	mov	r24, r25
    a03a:	99 27       	eor	r25, r25
    a03c:	86 95       	lsr	r24
    a03e:	45 a1       	ldd	r20, Z+37	; 0x25
    a040:	56 a1       	ldd	r21, Z+38	; 0x26
    a042:	67 a1       	ldd	r22, Z+39	; 0x27
    a044:	70 a5       	ldd	r23, Z+40	; 0x28
    a046:	48 0f       	add	r20, r24
    a048:	59 1f       	adc	r21, r25
    a04a:	61 1d       	adc	r22, r1
    a04c:	71 1d       	adc	r23, r1
    a04e:	cf 01       	movw	r24, r30
    a050:	f1 dc       	rcall	.-1566   	; 0x9a34 <move_window>
    a052:	5c 01       	movw	r10, r24
    a054:	89 2b       	or	r24, r25
    a056:	09 f0       	breq	.+2      	; 0xa05a <put_fat+0x7c>
    a058:	b8 c0       	rjmp	.+368    	; 0xa1ca <put_fat+0x1ec>
    a05a:	2d 80       	ldd	r2, Y+5	; 0x05
    a05c:	3e 80       	ldd	r3, Y+6	; 0x06
    a05e:	f5 e3       	ldi	r31, 0x35	; 53
    a060:	2f 0e       	add	r2, r31
    a062:	31 1c       	adc	r3, r1
    a064:	84 01       	movw	r16, r8
    a066:	0f 5f       	subi	r16, 0xFF	; 255
    a068:	1f 4f       	sbci	r17, 0xFF	; 255
    a06a:	21 e0       	ldi	r18, 0x01	; 1
    a06c:	92 22       	and	r9, r18
    a06e:	f1 01       	movw	r30, r2
    a070:	e8 0d       	add	r30, r8
    a072:	f9 1d       	adc	r31, r9
    a074:	d7 01       	movw	r26, r14
    a076:	c6 01       	movw	r24, r12
    a078:	81 70       	andi	r24, 0x01	; 1
    a07a:	99 27       	eor	r25, r25
    a07c:	aa 27       	eor	r26, r26
    a07e:	bb 27       	eor	r27, r27
    a080:	89 83       	std	Y+1, r24	; 0x01
    a082:	9a 83       	std	Y+2, r25	; 0x02
    a084:	ab 83       	std	Y+3, r26	; 0x03
    a086:	bc 83       	std	Y+4, r27	; 0x04
    a088:	c0 fe       	sbrs	r12, 0
    a08a:	09 c0       	rjmp	.+18     	; 0xa09e <put_fat+0xc0>
    a08c:	80 81       	ld	r24, Z
    a08e:	28 2f       	mov	r18, r24
    a090:	2f 70       	andi	r18, 0x0F	; 15
    a092:	a0 e1       	ldi	r26, 0x10	; 16
    a094:	4a 9e       	mul	r4, r26
    a096:	c0 01       	movw	r24, r0
    a098:	11 24       	eor	r1, r1
    a09a:	82 2b       	or	r24, r18
    a09c:	01 c0       	rjmp	.+2      	; 0xa0a0 <put_fat+0xc2>
    a09e:	84 2d       	mov	r24, r4
    a0a0:	80 83       	st	Z, r24
    a0a2:	81 e0       	ldi	r24, 0x01	; 1
    a0a4:	ed 81       	ldd	r30, Y+5	; 0x05
    a0a6:	fe 81       	ldd	r31, Y+6	; 0x06
    a0a8:	83 83       	std	Z+3, r24	; 0x03
    a0aa:	45 a1       	ldd	r20, Z+37	; 0x25
    a0ac:	56 a1       	ldd	r21, Z+38	; 0x26
    a0ae:	67 a1       	ldd	r22, Z+39	; 0x27
    a0b0:	70 a5       	ldd	r23, Z+40	; 0x28
    a0b2:	c8 01       	movw	r24, r16
    a0b4:	89 2f       	mov	r24, r25
    a0b6:	99 27       	eor	r25, r25
    a0b8:	86 95       	lsr	r24
    a0ba:	48 0f       	add	r20, r24
    a0bc:	59 1f       	adc	r21, r25
    a0be:	61 1d       	adc	r22, r1
    a0c0:	71 1d       	adc	r23, r1
    a0c2:	cf 01       	movw	r24, r30
    a0c4:	b7 dc       	rcall	.-1682   	; 0x9a34 <move_window>
    a0c6:	5c 01       	movw	r10, r24
    a0c8:	89 2b       	or	r24, r25
    a0ca:	09 f0       	breq	.+2      	; 0xa0ce <put_fat+0xf0>
    a0cc:	7e c0       	rjmp	.+252    	; 0xa1ca <put_fat+0x1ec>
    a0ce:	11 70       	andi	r17, 0x01	; 1
    a0d0:	f1 01       	movw	r30, r2
    a0d2:	e0 0f       	add	r30, r16
    a0d4:	f1 1f       	adc	r31, r17
    a0d6:	89 81       	ldd	r24, Y+1	; 0x01
    a0d8:	9a 81       	ldd	r25, Y+2	; 0x02
    a0da:	ab 81       	ldd	r26, Y+3	; 0x03
    a0dc:	bc 81       	ldd	r27, Y+4	; 0x04
    a0de:	89 2b       	or	r24, r25
    a0e0:	8a 2b       	or	r24, r26
    a0e2:	8b 2b       	or	r24, r27
    a0e4:	41 f0       	breq	.+16     	; 0xa0f6 <put_fat+0x118>
    a0e6:	54 e0       	ldi	r21, 0x04	; 4
    a0e8:	76 94       	lsr	r7
    a0ea:	67 94       	ror	r6
    a0ec:	57 94       	ror	r5
    a0ee:	47 94       	ror	r4
    a0f0:	5a 95       	dec	r21
    a0f2:	d1 f7       	brne	.-12     	; 0xa0e8 <put_fat+0x10a>
    a0f4:	06 c0       	rjmp	.+12     	; 0xa102 <put_fat+0x124>
    a0f6:	00 81       	ld	r16, Z
    a0f8:	00 7f       	andi	r16, 0xF0	; 240
    a0fa:	85 2d       	mov	r24, r5
    a0fc:	8f 70       	andi	r24, 0x0F	; 15
    a0fe:	40 2e       	mov	r4, r16
    a100:	48 2a       	or	r4, r24
    a102:	40 82       	st	Z, r4
    a104:	5a c0       	rjmp	.+180    	; 0xa1ba <put_fat+0x1dc>
    a106:	77 27       	eor	r23, r23
    a108:	6f 2d       	mov	r22, r15
    a10a:	5e 2d       	mov	r21, r14
    a10c:	4d 2d       	mov	r20, r13
    a10e:	ed 81       	ldd	r30, Y+5	; 0x05
    a110:	fe 81       	ldd	r31, Y+6	; 0x06
    a112:	85 a1       	ldd	r24, Z+37	; 0x25
    a114:	96 a1       	ldd	r25, Z+38	; 0x26
    a116:	a7 a1       	ldd	r26, Z+39	; 0x27
    a118:	b0 a5       	ldd	r27, Z+40	; 0x28
    a11a:	48 0f       	add	r20, r24
    a11c:	59 1f       	adc	r21, r25
    a11e:	6a 1f       	adc	r22, r26
    a120:	7b 1f       	adc	r23, r27
    a122:	cf 01       	movw	r24, r30
    a124:	87 dc       	rcall	.-1778   	; 0x9a34 <move_window>
    a126:	5c 01       	movw	r10, r24
    a128:	89 2b       	or	r24, r25
    a12a:	09 f0       	breq	.+2      	; 0xa12e <put_fat+0x150>
    a12c:	4e c0       	rjmp	.+156    	; 0xa1ca <put_fat+0x1ec>
    a12e:	ed 81       	ldd	r30, Y+5	; 0x05
    a130:	fe 81       	ldd	r31, Y+6	; 0x06
    a132:	f5 96       	adiw	r30, 0x35	; 53
    a134:	cc 0c       	add	r12, r12
    a136:	dd 1c       	adc	r13, r13
    a138:	e8 94       	clt
    a13a:	c0 f8       	bld	r12, 0
    a13c:	21 e0       	ldi	r18, 0x01	; 1
    a13e:	d2 22       	and	r13, r18
    a140:	ec 0d       	add	r30, r12
    a142:	fd 1d       	adc	r31, r13
    a144:	40 82       	st	Z, r4
    a146:	51 82       	std	Z+1, r5	; 0x01
    a148:	38 c0       	rjmp	.+112    	; 0xa1ba <put_fat+0x1dc>
    a14a:	ed 81       	ldd	r30, Y+5	; 0x05
    a14c:	fe 81       	ldd	r31, Y+6	; 0x06
    a14e:	85 a1       	ldd	r24, Z+37	; 0x25
    a150:	96 a1       	ldd	r25, Z+38	; 0x26
    a152:	a7 a1       	ldd	r26, Z+39	; 0x27
    a154:	b0 a5       	ldd	r27, Z+40	; 0x28
    a156:	27 e0       	ldi	r18, 0x07	; 7
    a158:	76 95       	lsr	r23
    a15a:	67 95       	ror	r22
    a15c:	57 95       	ror	r21
    a15e:	47 95       	ror	r20
    a160:	2a 95       	dec	r18
    a162:	d1 f7       	brne	.-12     	; 0xa158 <put_fat+0x17a>
    a164:	48 0f       	add	r20, r24
    a166:	59 1f       	adc	r21, r25
    a168:	6a 1f       	adc	r22, r26
    a16a:	7b 1f       	adc	r23, r27
    a16c:	cf 01       	movw	r24, r30
    a16e:	62 dc       	rcall	.-1852   	; 0x9a34 <move_window>
    a170:	5c 01       	movw	r10, r24
    a172:	89 2b       	or	r24, r25
    a174:	51 f5       	brne	.+84     	; 0xa1ca <put_fat+0x1ec>
    a176:	4d 81       	ldd	r20, Y+5	; 0x05
    a178:	5e 81       	ldd	r21, Y+6	; 0x06
    a17a:	4b 5c       	subi	r20, 0xCB	; 203
    a17c:	5f 4f       	sbci	r21, 0xFF	; 255
    a17e:	cc 0c       	add	r12, r12
    a180:	dd 1c       	adc	r13, r13
    a182:	cc 0c       	add	r12, r12
    a184:	dd 1c       	adc	r13, r13
    a186:	fc ef       	ldi	r31, 0xFC	; 252
    a188:	cf 22       	and	r12, r31
    a18a:	f1 e0       	ldi	r31, 0x01	; 1
    a18c:	df 22       	and	r13, r31
    a18e:	c4 0e       	add	r12, r20
    a190:	d5 1e       	adc	r13, r21
    a192:	c6 01       	movw	r24, r12
    a194:	0e 94 3f 48 	call	0x907e	; 0x907e <ld_dword>
    a198:	2f e0       	ldi	r18, 0x0F	; 15
    a19a:	72 22       	and	r7, r18
    a19c:	dc 01       	movw	r26, r24
    a19e:	cb 01       	movw	r24, r22
    a1a0:	88 27       	eor	r24, r24
    a1a2:	99 27       	eor	r25, r25
    a1a4:	aa 27       	eor	r26, r26
    a1a6:	b0 7f       	andi	r27, 0xF0	; 240
    a1a8:	b3 01       	movw	r22, r6
    a1aa:	a2 01       	movw	r20, r4
    a1ac:	48 2b       	or	r20, r24
    a1ae:	59 2b       	or	r21, r25
    a1b0:	6a 2b       	or	r22, r26
    a1b2:	7b 2b       	or	r23, r27
    a1b4:	c6 01       	movw	r24, r12
    a1b6:	0e 94 54 48 	call	0x90a8	; 0x90a8 <st_dword>
    a1ba:	81 e0       	ldi	r24, 0x01	; 1
    a1bc:	ed 81       	ldd	r30, Y+5	; 0x05
    a1be:	fe 81       	ldd	r31, Y+6	; 0x06
    a1c0:	83 83       	std	Z+3, r24	; 0x03
    a1c2:	03 c0       	rjmp	.+6      	; 0xa1ca <put_fat+0x1ec>
    a1c4:	82 e0       	ldi	r24, 0x02	; 2
    a1c6:	a8 2e       	mov	r10, r24
    a1c8:	b1 2c       	mov	r11, r1
    a1ca:	c5 01       	movw	r24, r10
    a1cc:	26 96       	adiw	r28, 0x06	; 6
    a1ce:	e2 e1       	ldi	r30, 0x12	; 18
    a1d0:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000a1d4 <get_fat.isra.10>:
    a1d4:	a0 e0       	ldi	r26, 0x00	; 0
    a1d6:	b0 e0       	ldi	r27, 0x00	; 0
    a1d8:	e0 ef       	ldi	r30, 0xF0	; 240
    a1da:	f0 e5       	ldi	r31, 0x50	; 80
    a1dc:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
    a1e0:	42 30       	cpi	r20, 0x02	; 2
    a1e2:	51 05       	cpc	r21, r1
    a1e4:	61 05       	cpc	r22, r1
    a1e6:	71 05       	cpc	r23, r1
    a1e8:	08 f4       	brcc	.+2      	; 0xa1ec <get_fat.isra.10+0x18>
    a1ea:	9f c0       	rjmp	.+318    	; 0xa32a <get_fat.isra.10+0x156>
    a1ec:	fc 01       	movw	r30, r24
    a1ee:	01 8d       	ldd	r16, Z+25	; 0x19
    a1f0:	12 8d       	ldd	r17, Z+26	; 0x1a
    a1f2:	23 8d       	ldd	r18, Z+27	; 0x1b
    a1f4:	34 8d       	ldd	r19, Z+28	; 0x1c
    a1f6:	40 17       	cp	r20, r16
    a1f8:	51 07       	cpc	r21, r17
    a1fa:	62 07       	cpc	r22, r18
    a1fc:	73 07       	cpc	r23, r19
    a1fe:	08 f0       	brcs	.+2      	; 0xa202 <get_fat.isra.10+0x2e>
    a200:	94 c0       	rjmp	.+296    	; 0xa32a <get_fat.isra.10+0x156>
    a202:	6a 01       	movw	r12, r20
    a204:	7b 01       	movw	r14, r22
    a206:	8c 01       	movw	r16, r24
    a208:	80 81       	ld	r24, Z
    a20a:	82 30       	cpi	r24, 0x02	; 2
    a20c:	09 f4       	brne	.+2      	; 0xa210 <get_fat.isra.10+0x3c>
    a20e:	4b c0       	rjmp	.+150    	; 0xa2a6 <get_fat.isra.10+0xd2>
    a210:	83 30       	cpi	r24, 0x03	; 3
    a212:	09 f4       	brne	.+2      	; 0xa216 <get_fat.isra.10+0x42>
    a214:	67 c0       	rjmp	.+206    	; 0xa2e4 <get_fat.isra.10+0x110>
    a216:	81 30       	cpi	r24, 0x01	; 1
    a218:	09 f0       	breq	.+2      	; 0xa21c <get_fat.isra.10+0x48>
    a21a:	87 c0       	rjmp	.+270    	; 0xa32a <get_fat.isra.10+0x156>
    a21c:	ea 01       	movw	r28, r20
    a21e:	d6 95       	lsr	r29
    a220:	c7 95       	ror	r28
    a222:	cc 0d       	add	r28, r12
    a224:	dd 1d       	adc	r29, r13
    a226:	ce 01       	movw	r24, r28
    a228:	89 2f       	mov	r24, r25
    a22a:	99 27       	eor	r25, r25
    a22c:	86 95       	lsr	r24
    a22e:	45 a1       	ldd	r20, Z+37	; 0x25
    a230:	56 a1       	ldd	r21, Z+38	; 0x26
    a232:	67 a1       	ldd	r22, Z+39	; 0x27
    a234:	70 a5       	ldd	r23, Z+40	; 0x28
    a236:	48 0f       	add	r20, r24
    a238:	59 1f       	adc	r21, r25
    a23a:	61 1d       	adc	r22, r1
    a23c:	71 1d       	adc	r23, r1
    a23e:	cf 01       	movw	r24, r30
    a240:	f9 db       	rcall	.-2062   	; 0x9a34 <move_window>
    a242:	89 2b       	or	r24, r25
    a244:	21 f0       	breq	.+8      	; 0xa24e <get_fat.isra.10+0x7a>
    a246:	6f ef       	ldi	r22, 0xFF	; 255
    a248:	7f ef       	ldi	r23, 0xFF	; 255
    a24a:	cb 01       	movw	r24, r22
    a24c:	72 c0       	rjmp	.+228    	; 0xa332 <get_fat.isra.10+0x15e>
    a24e:	5e 01       	movw	r10, r28
    a250:	ff ef       	ldi	r31, 0xFF	; 255
    a252:	af 1a       	sub	r10, r31
    a254:	bf 0a       	sbc	r11, r31
    a256:	d1 70       	andi	r29, 0x01	; 1
    a258:	c0 0f       	add	r28, r16
    a25a:	d1 1f       	adc	r29, r17
    a25c:	cd a9       	ldd	r28, Y+53	; 0x35
    a25e:	c5 01       	movw	r24, r10
    a260:	89 2f       	mov	r24, r25
    a262:	99 27       	eor	r25, r25
    a264:	86 95       	lsr	r24
    a266:	f8 01       	movw	r30, r16
    a268:	45 a1       	ldd	r20, Z+37	; 0x25
    a26a:	56 a1       	ldd	r21, Z+38	; 0x26
    a26c:	67 a1       	ldd	r22, Z+39	; 0x27
    a26e:	70 a5       	ldd	r23, Z+40	; 0x28
    a270:	48 0f       	add	r20, r24
    a272:	59 1f       	adc	r21, r25
    a274:	61 1d       	adc	r22, r1
    a276:	71 1d       	adc	r23, r1
    a278:	c8 01       	movw	r24, r16
    a27a:	dc db       	rcall	.-2120   	; 0x9a34 <move_window>
    a27c:	89 2b       	or	r24, r25
    a27e:	19 f7       	brne	.-58     	; 0xa246 <get_fat.isra.10+0x72>
    a280:	f1 e0       	ldi	r31, 0x01	; 1
    a282:	bf 22       	and	r11, r31
    a284:	f8 01       	movw	r30, r16
    a286:	ea 0d       	add	r30, r10
    a288:	fb 1d       	adc	r31, r11
    a28a:	85 a9       	ldd	r24, Z+53	; 0x35
    a28c:	6c 2f       	mov	r22, r28
    a28e:	70 e0       	ldi	r23, 0x00	; 0
    a290:	78 2b       	or	r23, r24
    a292:	c0 fe       	sbrs	r12, 0
    a294:	06 c0       	rjmp	.+12     	; 0xa2a2 <get_fat.isra.10+0xce>
    a296:	54 e0       	ldi	r21, 0x04	; 4
    a298:	76 95       	lsr	r23
    a29a:	67 95       	ror	r22
    a29c:	5a 95       	dec	r21
    a29e:	e1 f7       	brne	.-8      	; 0xa298 <get_fat.isra.10+0xc4>
    a2a0:	1e c0       	rjmp	.+60     	; 0xa2de <get_fat.isra.10+0x10a>
    a2a2:	7f 70       	andi	r23, 0x0F	; 15
    a2a4:	1c c0       	rjmp	.+56     	; 0xa2de <get_fat.isra.10+0x10a>
    a2a6:	77 27       	eor	r23, r23
    a2a8:	6f 2d       	mov	r22, r15
    a2aa:	5e 2d       	mov	r21, r14
    a2ac:	4d 2d       	mov	r20, r13
    a2ae:	85 a1       	ldd	r24, Z+37	; 0x25
    a2b0:	96 a1       	ldd	r25, Z+38	; 0x26
    a2b2:	a7 a1       	ldd	r26, Z+39	; 0x27
    a2b4:	b0 a5       	ldd	r27, Z+40	; 0x28
    a2b6:	48 0f       	add	r20, r24
    a2b8:	59 1f       	adc	r21, r25
    a2ba:	6a 1f       	adc	r22, r26
    a2bc:	7b 1f       	adc	r23, r27
    a2be:	cf 01       	movw	r24, r30
    a2c0:	b9 db       	rcall	.-2190   	; 0x9a34 <move_window>
    a2c2:	89 2b       	or	r24, r25
    a2c4:	09 f0       	breq	.+2      	; 0xa2c8 <get_fat.isra.10+0xf4>
    a2c6:	bf cf       	rjmp	.-130    	; 0xa246 <get_fat.isra.10+0x72>
    a2c8:	cc 0c       	add	r12, r12
    a2ca:	dd 1c       	adc	r13, r13
    a2cc:	e8 94       	clt
    a2ce:	c0 f8       	bld	r12, 0
    a2d0:	f1 e0       	ldi	r31, 0x01	; 1
    a2d2:	df 22       	and	r13, r31
    a2d4:	f8 01       	movw	r30, r16
    a2d6:	ec 0d       	add	r30, r12
    a2d8:	fd 1d       	adc	r31, r13
    a2da:	65 a9       	ldd	r22, Z+53	; 0x35
    a2dc:	76 a9       	ldd	r23, Z+54	; 0x36
    a2de:	80 e0       	ldi	r24, 0x00	; 0
    a2e0:	90 e0       	ldi	r25, 0x00	; 0
    a2e2:	27 c0       	rjmp	.+78     	; 0xa332 <get_fat.isra.10+0x15e>
    a2e4:	85 a1       	ldd	r24, Z+37	; 0x25
    a2e6:	96 a1       	ldd	r25, Z+38	; 0x26
    a2e8:	a7 a1       	ldd	r26, Z+39	; 0x27
    a2ea:	b0 a5       	ldd	r27, Z+40	; 0x28
    a2ec:	27 e0       	ldi	r18, 0x07	; 7
    a2ee:	76 95       	lsr	r23
    a2f0:	67 95       	ror	r22
    a2f2:	57 95       	ror	r21
    a2f4:	47 95       	ror	r20
    a2f6:	2a 95       	dec	r18
    a2f8:	d1 f7       	brne	.-12     	; 0xa2ee <get_fat.isra.10+0x11a>
    a2fa:	48 0f       	add	r20, r24
    a2fc:	59 1f       	adc	r21, r25
    a2fe:	6a 1f       	adc	r22, r26
    a300:	7b 1f       	adc	r23, r27
    a302:	cf 01       	movw	r24, r30
    a304:	97 db       	rcall	.-2258   	; 0x9a34 <move_window>
    a306:	89 2b       	or	r24, r25
    a308:	09 f0       	breq	.+2      	; 0xa30c <get_fat.isra.10+0x138>
    a30a:	9d cf       	rjmp	.-198    	; 0xa246 <get_fat.isra.10+0x72>
    a30c:	0b 5c       	subi	r16, 0xCB	; 203
    a30e:	1f 4f       	sbci	r17, 0xFF	; 255
    a310:	cc 0c       	add	r12, r12
    a312:	dd 1c       	adc	r13, r13
    a314:	cc 0c       	add	r12, r12
    a316:	dd 1c       	adc	r13, r13
    a318:	c6 01       	movw	r24, r12
    a31a:	8c 7f       	andi	r24, 0xFC	; 252
    a31c:	91 70       	andi	r25, 0x01	; 1
    a31e:	80 0f       	add	r24, r16
    a320:	91 1f       	adc	r25, r17
    a322:	0e 94 3f 48 	call	0x907e	; 0x907e <ld_dword>
    a326:	9f 70       	andi	r25, 0x0F	; 15
    a328:	04 c0       	rjmp	.+8      	; 0xa332 <get_fat.isra.10+0x15e>
    a32a:	61 e0       	ldi	r22, 0x01	; 1
    a32c:	70 e0       	ldi	r23, 0x00	; 0
    a32e:	80 e0       	ldi	r24, 0x00	; 0
    a330:	90 e0       	ldi	r25, 0x00	; 0
    a332:	cd b7       	in	r28, 0x3d	; 61
    a334:	de b7       	in	r29, 0x3e	; 62
    a336:	ea e0       	ldi	r30, 0x0A	; 10
    a338:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

0000a33c <dir_sdi>:
    a33c:	a0 e0       	ldi	r26, 0x00	; 0
    a33e:	b0 e0       	ldi	r27, 0x00	; 0
    a340:	e4 ea       	ldi	r30, 0xA4	; 164
    a342:	f1 e5       	ldi	r31, 0x51	; 81
    a344:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__prologue_saves__+0x4>
    a348:	ec 01       	movw	r28, r24
    a34a:	6a 01       	movw	r12, r20
    a34c:	7b 01       	movw	r14, r22
    a34e:	41 15       	cp	r20, r1
    a350:	51 05       	cpc	r21, r1
    a352:	80 e2       	ldi	r24, 0x20	; 32
    a354:	68 07       	cpc	r22, r24
    a356:	71 05       	cpc	r23, r1
    a358:	18 f0       	brcs	.+6      	; 0xa360 <dir_sdi+0x24>
    a35a:	82 e0       	ldi	r24, 0x02	; 2
    a35c:	90 e0       	ldi	r25, 0x00	; 0
    a35e:	aa c0       	rjmp	.+340    	; 0xa4b4 <dir_sdi+0x178>
    a360:	db 01       	movw	r26, r22
    a362:	ca 01       	movw	r24, r20
    a364:	8f 71       	andi	r24, 0x1F	; 31
    a366:	99 27       	eor	r25, r25
    a368:	aa 27       	eor	r26, r26
    a36a:	bb 27       	eor	r27, r27
    a36c:	89 2b       	or	r24, r25
    a36e:	8a 2b       	or	r24, r26
    a370:	8b 2b       	or	r24, r27
    a372:	99 f7       	brne	.-26     	; 0xa35a <dir_sdi+0x1e>
    a374:	08 81       	ld	r16, Y
    a376:	19 81       	ldd	r17, Y+1	; 0x01
    a378:	4e 87       	std	Y+14, r20	; 0x0e
    a37a:	5f 87       	std	Y+15, r21	; 0x0f
    a37c:	68 8b       	std	Y+16, r22	; 0x10
    a37e:	79 8b       	std	Y+17, r23	; 0x11
    a380:	8e 80       	ldd	r8, Y+6	; 0x06
    a382:	9f 80       	ldd	r9, Y+7	; 0x07
    a384:	a8 84       	ldd	r10, Y+8	; 0x08
    a386:	b9 84       	ldd	r11, Y+9	; 0x09
    a388:	81 14       	cp	r8, r1
    a38a:	91 04       	cpc	r9, r1
    a38c:	a1 04       	cpc	r10, r1
    a38e:	b1 04       	cpc	r11, r1
    a390:	51 f5       	brne	.+84     	; 0xa3e6 <dir_sdi+0xaa>
    a392:	f8 01       	movw	r30, r16
    a394:	80 81       	ld	r24, Z
    a396:	83 30       	cpi	r24, 0x03	; 3
    a398:	40 f0       	brcs	.+16     	; 0xa3aa <dir_sdi+0x6e>
    a39a:	81 a5       	ldd	r24, Z+41	; 0x29
    a39c:	92 a5       	ldd	r25, Z+42	; 0x2a
    a39e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a3a0:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a3a2:	00 97       	sbiw	r24, 0x00	; 0
    a3a4:	a1 05       	cpc	r26, r1
    a3a6:	b1 05       	cpc	r27, r1
    a3a8:	e1 f4       	brne	.+56     	; 0xa3e2 <dir_sdi+0xa6>
    a3aa:	f8 01       	movw	r30, r16
    a3ac:	87 81       	ldd	r24, Z+7	; 0x07
    a3ae:	90 85       	ldd	r25, Z+8	; 0x08
    a3b0:	a0 e0       	ldi	r26, 0x00	; 0
    a3b2:	b0 e0       	ldi	r27, 0x00	; 0
    a3b4:	b7 01       	movw	r22, r14
    a3b6:	a6 01       	movw	r20, r12
    a3b8:	25 e0       	ldi	r18, 0x05	; 5
    a3ba:	76 95       	lsr	r23
    a3bc:	67 95       	ror	r22
    a3be:	57 95       	ror	r21
    a3c0:	47 95       	ror	r20
    a3c2:	2a 95       	dec	r18
    a3c4:	d1 f7       	brne	.-12     	; 0xa3ba <dir_sdi+0x7e>
    a3c6:	48 17       	cp	r20, r24
    a3c8:	59 07       	cpc	r21, r25
    a3ca:	6a 07       	cpc	r22, r26
    a3cc:	7b 07       	cpc	r23, r27
    a3ce:	28 f6       	brcc	.-118    	; 0xa35a <dir_sdi+0x1e>
    a3d0:	81 a5       	ldd	r24, Z+41	; 0x29
    a3d2:	92 a5       	ldd	r25, Z+42	; 0x2a
    a3d4:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a3d6:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a3d8:	8e 8b       	std	Y+22, r24	; 0x16
    a3da:	9f 8b       	std	Y+23, r25	; 0x17
    a3dc:	a8 8f       	std	Y+24, r26	; 0x18
    a3de:	b9 8f       	std	Y+25, r27	; 0x19
    a3e0:	3e c0       	rjmp	.+124    	; 0xa45e <dir_sdi+0x122>
    a3e2:	4c 01       	movw	r8, r24
    a3e4:	5d 01       	movw	r10, r26
    a3e6:	f8 01       	movw	r30, r16
    a3e8:	41 84       	ldd	r4, Z+9	; 0x09
    a3ea:	52 84       	ldd	r5, Z+10	; 0x0a
    a3ec:	61 2c       	mov	r6, r1
    a3ee:	71 2c       	mov	r7, r1
    a3f0:	39 e0       	ldi	r19, 0x09	; 9
    a3f2:	44 0c       	add	r4, r4
    a3f4:	55 1c       	adc	r5, r5
    a3f6:	66 1c       	adc	r6, r6
    a3f8:	77 1c       	adc	r7, r7
    a3fa:	3a 95       	dec	r19
    a3fc:	d1 f7       	brne	.-12     	; 0xa3f2 <dir_sdi+0xb6>
    a3fe:	b5 01       	movw	r22, r10
    a400:	a4 01       	movw	r20, r8
    a402:	c4 14       	cp	r12, r4
    a404:	d5 04       	cpc	r13, r5
    a406:	e6 04       	cpc	r14, r6
    a408:	f7 04       	cpc	r15, r7
    a40a:	10 f1       	brcs	.+68     	; 0xa450 <dir_sdi+0x114>
    a40c:	88 81       	ld	r24, Y
    a40e:	99 81       	ldd	r25, Y+1	; 0x01
    a410:	e1 de       	rcall	.-574    	; 0xa1d4 <get_fat.isra.10>
    a412:	4b 01       	movw	r8, r22
    a414:	5c 01       	movw	r10, r24
    a416:	6f 3f       	cpi	r22, 0xFF	; 255
    a418:	7f 4f       	sbci	r23, 0xFF	; 255
    a41a:	8f 4f       	sbci	r24, 0xFF	; 255
    a41c:	9f 4f       	sbci	r25, 0xFF	; 255
    a41e:	09 f4       	brne	.+2      	; 0xa422 <dir_sdi+0xe6>
    a420:	47 c0       	rjmp	.+142    	; 0xa4b0 <dir_sdi+0x174>
    a422:	82 e0       	ldi	r24, 0x02	; 2
    a424:	88 16       	cp	r8, r24
    a426:	91 04       	cpc	r9, r1
    a428:	a1 04       	cpc	r10, r1
    a42a:	b1 04       	cpc	r11, r1
    a42c:	08 f4       	brcc	.+2      	; 0xa430 <dir_sdi+0xf4>
    a42e:	95 cf       	rjmp	.-214    	; 0xa35a <dir_sdi+0x1e>
    a430:	f8 01       	movw	r30, r16
    a432:	81 8d       	ldd	r24, Z+25	; 0x19
    a434:	92 8d       	ldd	r25, Z+26	; 0x1a
    a436:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a438:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a43a:	88 16       	cp	r8, r24
    a43c:	99 06       	cpc	r9, r25
    a43e:	aa 06       	cpc	r10, r26
    a440:	bb 06       	cpc	r11, r27
    a442:	08 f0       	brcs	.+2      	; 0xa446 <dir_sdi+0x10a>
    a444:	8a cf       	rjmp	.-236    	; 0xa35a <dir_sdi+0x1e>
    a446:	c4 18       	sub	r12, r4
    a448:	d5 08       	sbc	r13, r5
    a44a:	e6 08       	sbc	r14, r6
    a44c:	f7 08       	sbc	r15, r7
    a44e:	d7 cf       	rjmp	.-82     	; 0xa3fe <dir_sdi+0xc2>
    a450:	c8 01       	movw	r24, r16
    a452:	0e 94 f8 48 	call	0x91f0	; 0x91f0 <clst2sect>
    a456:	6e 8b       	std	Y+22, r22	; 0x16
    a458:	7f 8b       	std	Y+23, r23	; 0x17
    a45a:	88 8f       	std	Y+24, r24	; 0x18
    a45c:	99 8f       	std	Y+25, r25	; 0x19
    a45e:	8a 8a       	std	Y+18, r8	; 0x12
    a460:	9b 8a       	std	Y+19, r9	; 0x13
    a462:	ac 8a       	std	Y+20, r10	; 0x14
    a464:	bd 8a       	std	Y+21, r11	; 0x15
    a466:	8e 89       	ldd	r24, Y+22	; 0x16
    a468:	9f 89       	ldd	r25, Y+23	; 0x17
    a46a:	a8 8d       	ldd	r26, Y+24	; 0x18
    a46c:	b9 8d       	ldd	r27, Y+25	; 0x19
    a46e:	00 97       	sbiw	r24, 0x00	; 0
    a470:	a1 05       	cpc	r26, r1
    a472:	b1 05       	cpc	r27, r1
    a474:	09 f4       	brne	.+2      	; 0xa478 <dir_sdi+0x13c>
    a476:	71 cf       	rjmp	.-286    	; 0xa35a <dir_sdi+0x1e>
    a478:	b7 01       	movw	r22, r14
    a47a:	a6 01       	movw	r20, r12
    a47c:	29 e0       	ldi	r18, 0x09	; 9
    a47e:	76 95       	lsr	r23
    a480:	67 95       	ror	r22
    a482:	57 95       	ror	r21
    a484:	47 95       	ror	r20
    a486:	2a 95       	dec	r18
    a488:	d1 f7       	brne	.-12     	; 0xa47e <dir_sdi+0x142>
    a48a:	84 0f       	add	r24, r20
    a48c:	95 1f       	adc	r25, r21
    a48e:	a6 1f       	adc	r26, r22
    a490:	b7 1f       	adc	r27, r23
    a492:	8e 8b       	std	Y+22, r24	; 0x16
    a494:	9f 8b       	std	Y+23, r25	; 0x17
    a496:	a8 8f       	std	Y+24, r26	; 0x18
    a498:	b9 8f       	std	Y+25, r27	; 0x19
    a49a:	0b 5c       	subi	r16, 0xCB	; 203
    a49c:	1f 4f       	sbci	r17, 0xFF	; 255
    a49e:	f1 e0       	ldi	r31, 0x01	; 1
    a4a0:	df 22       	and	r13, r31
    a4a2:	c0 0e       	add	r12, r16
    a4a4:	d1 1e       	adc	r13, r17
    a4a6:	db 8e       	std	Y+27, r13	; 0x1b
    a4a8:	ca 8e       	std	Y+26, r12	; 0x1a
    a4aa:	80 e0       	ldi	r24, 0x00	; 0
    a4ac:	90 e0       	ldi	r25, 0x00	; 0
    a4ae:	02 c0       	rjmp	.+4      	; 0xa4b4 <dir_sdi+0x178>
    a4b0:	81 e0       	ldi	r24, 0x01	; 1
    a4b2:	90 e0       	ldi	r25, 0x00	; 0
    a4b4:	cd b7       	in	r28, 0x3d	; 61
    a4b6:	de b7       	in	r29, 0x3e	; 62
    a4b8:	e0 e1       	ldi	r30, 0x10	; 16
    a4ba:	0c 94 07 e4 	jmp	0x1c80e	; 0x1c80e <__epilogue_restores__+0x4>

0000a4be <create_chain>:
    a4be:	a0 e0       	ldi	r26, 0x00	; 0
    a4c0:	b0 e0       	ldi	r27, 0x00	; 0
    a4c2:	e5 e6       	ldi	r30, 0x65	; 101
    a4c4:	f2 e5       	ldi	r31, 0x52	; 82
    a4c6:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__prologue_saves__+0x4>
    a4ca:	8c 01       	movw	r16, r24
    a4cc:	2a 01       	movw	r4, r20
    a4ce:	3b 01       	movw	r6, r22
    a4d0:	fc 01       	movw	r30, r24
    a4d2:	c0 81       	ld	r28, Z
    a4d4:	d1 81       	ldd	r29, Z+1	; 0x01
    a4d6:	41 15       	cp	r20, r1
    a4d8:	51 05       	cpc	r21, r1
    a4da:	61 05       	cpc	r22, r1
    a4dc:	71 05       	cpc	r23, r1
    a4de:	99 f4       	brne	.+38     	; 0xa506 <create_chain+0x48>
    a4e0:	8d 84       	ldd	r8, Y+13	; 0x0d
    a4e2:	9e 84       	ldd	r9, Y+14	; 0x0e
    a4e4:	af 84       	ldd	r10, Y+15	; 0x0f
    a4e6:	b8 88       	ldd	r11, Y+16	; 0x10
    a4e8:	81 14       	cp	r8, r1
    a4ea:	91 04       	cpc	r9, r1
    a4ec:	a1 04       	cpc	r10, r1
    a4ee:	b1 04       	cpc	r11, r1
    a4f0:	51 f1       	breq	.+84     	; 0xa546 <create_chain+0x88>
    a4f2:	89 8d       	ldd	r24, Y+25	; 0x19
    a4f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a4f6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a4f8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a4fa:	88 16       	cp	r8, r24
    a4fc:	99 06       	cpc	r9, r25
    a4fe:	aa 06       	cpc	r10, r26
    a500:	bb 06       	cpc	r11, r27
    a502:	28 f1       	brcs	.+74     	; 0xa54e <create_chain+0x90>
    a504:	20 c0       	rjmp	.+64     	; 0xa546 <create_chain+0x88>
    a506:	ce 01       	movw	r24, r28
    a508:	65 de       	rcall	.-822    	; 0xa1d4 <get_fat.isra.10>
    a50a:	62 30       	cpi	r22, 0x02	; 2
    a50c:	71 05       	cpc	r23, r1
    a50e:	81 05       	cpc	r24, r1
    a510:	91 05       	cpc	r25, r1
    a512:	08 f4       	brcc	.+2      	; 0xa516 <create_chain+0x58>
    a514:	ea c0       	rjmp	.+468    	; 0xa6ea <create_chain+0x22c>
    a516:	6f 3f       	cpi	r22, 0xFF	; 255
    a518:	ff ef       	ldi	r31, 0xFF	; 255
    a51a:	7f 07       	cpc	r23, r31
    a51c:	8f 07       	cpc	r24, r31
    a51e:	9f 07       	cpc	r25, r31
    a520:	29 f4       	brne	.+10     	; 0xa52c <create_chain+0x6e>
    a522:	4f ef       	ldi	r20, 0xFF	; 255
    a524:	3f ef       	ldi	r19, 0xFF	; 255
    a526:	2f ef       	ldi	r18, 0xFF	; 255
    a528:	9f ef       	ldi	r25, 0xFF	; 255
    a52a:	e7 c0       	rjmp	.+462    	; 0xa6fa <create_chain+0x23c>
    a52c:	c9 8c       	ldd	r12, Y+25	; 0x19
    a52e:	da 8c       	ldd	r13, Y+26	; 0x1a
    a530:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a532:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a534:	6c 15       	cp	r22, r12
    a536:	7d 05       	cpc	r23, r13
    a538:	8e 05       	cpc	r24, r14
    a53a:	9f 05       	cpc	r25, r15
    a53c:	08 f4       	brcc	.+2      	; 0xa540 <create_chain+0x82>
    a53e:	da c0       	rjmp	.+436    	; 0xa6f4 <create_chain+0x236>
    a540:	53 01       	movw	r10, r6
    a542:	42 01       	movw	r8, r4
    a544:	04 c0       	rjmp	.+8      	; 0xa54e <create_chain+0x90>
    a546:	81 2c       	mov	r8, r1
    a548:	91 2c       	mov	r9, r1
    a54a:	54 01       	movw	r10, r8
    a54c:	83 94       	inc	r8
    a54e:	89 89       	ldd	r24, Y+17	; 0x11
    a550:	9a 89       	ldd	r25, Y+18	; 0x12
    a552:	ab 89       	ldd	r26, Y+19	; 0x13
    a554:	bc 89       	ldd	r27, Y+20	; 0x14
    a556:	89 2b       	or	r24, r25
    a558:	8a 2b       	or	r24, r26
    a55a:	8b 2b       	or	r24, r27
    a55c:	11 f4       	brne	.+4      	; 0xa562 <create_chain+0xa4>
    a55e:	40 e0       	ldi	r20, 0x00	; 0
    a560:	c5 c0       	rjmp	.+394    	; 0xa6ec <create_chain+0x22e>
    a562:	84 14       	cp	r8, r4
    a564:	95 04       	cpc	r9, r5
    a566:	a6 04       	cpc	r10, r6
    a568:	b7 04       	cpc	r11, r7
    a56a:	09 f0       	breq	.+2      	; 0xa56e <create_chain+0xb0>
    a56c:	46 c0       	rjmp	.+140    	; 0xa5fa <create_chain+0x13c>
    a56e:	75 01       	movw	r14, r10
    a570:	64 01       	movw	r12, r8
    a572:	2f ef       	ldi	r18, 0xFF	; 255
    a574:	c2 1a       	sub	r12, r18
    a576:	d2 0a       	sbc	r13, r18
    a578:	e2 0a       	sbc	r14, r18
    a57a:	f2 0a       	sbc	r15, r18
    a57c:	89 8d       	ldd	r24, Y+25	; 0x19
    a57e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a580:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a582:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a584:	c8 16       	cp	r12, r24
    a586:	d9 06       	cpc	r13, r25
    a588:	ea 06       	cpc	r14, r26
    a58a:	fb 06       	cpc	r15, r27
    a58c:	28 f0       	brcs	.+10     	; 0xa598 <create_chain+0xda>
    a58e:	92 e0       	ldi	r25, 0x02	; 2
    a590:	c9 2e       	mov	r12, r25
    a592:	d1 2c       	mov	r13, r1
    a594:	e1 2c       	mov	r14, r1
    a596:	f1 2c       	mov	r15, r1
    a598:	b7 01       	movw	r22, r14
    a59a:	a6 01       	movw	r20, r12
    a59c:	f8 01       	movw	r30, r16
    a59e:	80 81       	ld	r24, Z
    a5a0:	91 81       	ldd	r25, Z+1	; 0x01
    a5a2:	18 de       	rcall	.-976    	; 0xa1d4 <get_fat.isra.10>
    a5a4:	61 30       	cpi	r22, 0x01	; 1
    a5a6:	71 05       	cpc	r23, r1
    a5a8:	81 05       	cpc	r24, r1
    a5aa:	91 05       	cpc	r25, r1
    a5ac:	09 f4       	brne	.+2      	; 0xa5b0 <create_chain+0xf2>
    a5ae:	9d c0       	rjmp	.+314    	; 0xa6ea <create_chain+0x22c>
    a5b0:	6f 3f       	cpi	r22, 0xFF	; 255
    a5b2:	ff ef       	ldi	r31, 0xFF	; 255
    a5b4:	7f 07       	cpc	r23, r31
    a5b6:	8f 07       	cpc	r24, r31
    a5b8:	9f 07       	cpc	r25, r31
    a5ba:	09 f4       	brne	.+2      	; 0xa5be <create_chain+0x100>
    a5bc:	b2 cf       	rjmp	.-156    	; 0xa522 <create_chain+0x64>
    a5be:	67 2b       	or	r22, r23
    a5c0:	68 2b       	or	r22, r24
    a5c2:	69 2b       	or	r22, r25
    a5c4:	a9 f0       	breq	.+42     	; 0xa5f0 <create_chain+0x132>
    a5c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    a5c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    a5ca:	af 85       	ldd	r26, Y+15	; 0x0f
    a5cc:	b8 89       	ldd	r27, Y+16	; 0x10
    a5ce:	82 30       	cpi	r24, 0x02	; 2
    a5d0:	91 05       	cpc	r25, r1
    a5d2:	a1 05       	cpc	r26, r1
    a5d4:	b1 05       	cpc	r27, r1
    a5d6:	88 f0       	brcs	.+34     	; 0xa5fa <create_chain+0x13c>
    a5d8:	49 8d       	ldd	r20, Y+25	; 0x19
    a5da:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a5dc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a5de:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a5e0:	84 17       	cp	r24, r20
    a5e2:	95 07       	cpc	r25, r21
    a5e4:	a6 07       	cpc	r26, r22
    a5e6:	b7 07       	cpc	r27, r23
    a5e8:	40 f4       	brcc	.+16     	; 0xa5fa <create_chain+0x13c>
    a5ea:	4c 01       	movw	r8, r24
    a5ec:	5d 01       	movw	r10, r26
    a5ee:	05 c0       	rjmp	.+10     	; 0xa5fa <create_chain+0x13c>
    a5f0:	c1 14       	cp	r12, r1
    a5f2:	d1 04       	cpc	r13, r1
    a5f4:	e1 04       	cpc	r14, r1
    a5f6:	f1 04       	cpc	r15, r1
    a5f8:	c9 f5       	brne	.+114    	; 0xa66c <create_chain+0x1ae>
    a5fa:	75 01       	movw	r14, r10
    a5fc:	64 01       	movw	r12, r8
    a5fe:	2f ef       	ldi	r18, 0xFF	; 255
    a600:	c2 1a       	sub	r12, r18
    a602:	d2 0a       	sbc	r13, r18
    a604:	e2 0a       	sbc	r14, r18
    a606:	f2 0a       	sbc	r15, r18
    a608:	89 8d       	ldd	r24, Y+25	; 0x19
    a60a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a60c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a60e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a610:	c8 16       	cp	r12, r24
    a612:	d9 06       	cpc	r13, r25
    a614:	ea 06       	cpc	r14, r26
    a616:	fb 06       	cpc	r15, r27
    a618:	60 f0       	brcs	.+24     	; 0xa632 <create_chain+0x174>
    a61a:	82 e0       	ldi	r24, 0x02	; 2
    a61c:	88 16       	cp	r8, r24
    a61e:	91 04       	cpc	r9, r1
    a620:	a1 04       	cpc	r10, r1
    a622:	b1 04       	cpc	r11, r1
    a624:	08 f4       	brcc	.+2      	; 0xa628 <create_chain+0x16a>
    a626:	9b cf       	rjmp	.-202    	; 0xa55e <create_chain+0xa0>
    a628:	82 e0       	ldi	r24, 0x02	; 2
    a62a:	c8 2e       	mov	r12, r24
    a62c:	d1 2c       	mov	r13, r1
    a62e:	e1 2c       	mov	r14, r1
    a630:	f1 2c       	mov	r15, r1
    a632:	b7 01       	movw	r22, r14
    a634:	a6 01       	movw	r20, r12
    a636:	f8 01       	movw	r30, r16
    a638:	80 81       	ld	r24, Z
    a63a:	91 81       	ldd	r25, Z+1	; 0x01
    a63c:	cb dd       	rcall	.-1130   	; 0xa1d4 <get_fat.isra.10>
    a63e:	61 15       	cp	r22, r1
    a640:	71 05       	cpc	r23, r1
    a642:	81 05       	cpc	r24, r1
    a644:	91 05       	cpc	r25, r1
    a646:	91 f0       	breq	.+36     	; 0xa66c <create_chain+0x1ae>
    a648:	61 30       	cpi	r22, 0x01	; 1
    a64a:	71 05       	cpc	r23, r1
    a64c:	81 05       	cpc	r24, r1
    a64e:	91 05       	cpc	r25, r1
    a650:	09 f4       	brne	.+2      	; 0xa654 <create_chain+0x196>
    a652:	4b c0       	rjmp	.+150    	; 0xa6ea <create_chain+0x22c>
    a654:	6f 3f       	cpi	r22, 0xFF	; 255
    a656:	7f 4f       	sbci	r23, 0xFF	; 255
    a658:	8f 4f       	sbci	r24, 0xFF	; 255
    a65a:	9f 4f       	sbci	r25, 0xFF	; 255
    a65c:	09 f4       	brne	.+2      	; 0xa660 <create_chain+0x1a2>
    a65e:	61 cf       	rjmp	.-318    	; 0xa522 <create_chain+0x64>
    a660:	c8 14       	cp	r12, r8
    a662:	d9 04       	cpc	r13, r9
    a664:	ea 04       	cpc	r14, r10
    a666:	fb 04       	cpc	r15, r11
    a668:	51 f6       	brne	.-108    	; 0xa5fe <create_chain+0x140>
    a66a:	79 cf       	rjmp	.-270    	; 0xa55e <create_chain+0xa0>
    a66c:	0f ef       	ldi	r16, 0xFF	; 255
    a66e:	1f ef       	ldi	r17, 0xFF	; 255
    a670:	98 01       	movw	r18, r16
    a672:	b7 01       	movw	r22, r14
    a674:	a6 01       	movw	r20, r12
    a676:	ce 01       	movw	r24, r28
    a678:	b2 dc       	rcall	.-1692   	; 0x9fde <put_fat>
    a67a:	00 97       	sbiw	r24, 0x00	; 0
    a67c:	99 f5       	brne	.+102    	; 0xa6e4 <create_chain+0x226>
    a67e:	41 14       	cp	r4, r1
    a680:	51 04       	cpc	r5, r1
    a682:	61 04       	cpc	r6, r1
    a684:	71 04       	cpc	r7, r1
    a686:	e9 f4       	brne	.+58     	; 0xa6c2 <create_chain+0x204>
    a688:	cd 86       	std	Y+13, r12	; 0x0d
    a68a:	de 86       	std	Y+14, r13	; 0x0e
    a68c:	ef 86       	std	Y+15, r14	; 0x0f
    a68e:	f8 8a       	std	Y+16, r15	; 0x10
    a690:	89 89       	ldd	r24, Y+17	; 0x11
    a692:	9a 89       	ldd	r25, Y+18	; 0x12
    a694:	ab 89       	ldd	r26, Y+19	; 0x13
    a696:	bc 89       	ldd	r27, Y+20	; 0x14
    a698:	49 8d       	ldd	r20, Y+25	; 0x19
    a69a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a69c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a69e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a6a0:	42 50       	subi	r20, 0x02	; 2
    a6a2:	51 09       	sbc	r21, r1
    a6a4:	61 09       	sbc	r22, r1
    a6a6:	71 09       	sbc	r23, r1
    a6a8:	48 17       	cp	r20, r24
    a6aa:	59 07       	cpc	r21, r25
    a6ac:	6a 07       	cpc	r22, r26
    a6ae:	7b 07       	cpc	r23, r27
    a6b0:	88 f0       	brcs	.+34     	; 0xa6d4 <create_chain+0x216>
    a6b2:	01 97       	sbiw	r24, 0x01	; 1
    a6b4:	a1 09       	sbc	r26, r1
    a6b6:	b1 09       	sbc	r27, r1
    a6b8:	89 8b       	std	Y+17, r24	; 0x11
    a6ba:	9a 8b       	std	Y+18, r25	; 0x12
    a6bc:	ab 8b       	std	Y+19, r26	; 0x13
    a6be:	bc 8b       	std	Y+20, r27	; 0x14
    a6c0:	09 c0       	rjmp	.+18     	; 0xa6d4 <create_chain+0x216>
    a6c2:	97 01       	movw	r18, r14
    a6c4:	86 01       	movw	r16, r12
    a6c6:	b3 01       	movw	r22, r6
    a6c8:	a2 01       	movw	r20, r4
    a6ca:	ce 01       	movw	r24, r28
    a6cc:	88 dc       	rcall	.-1776   	; 0x9fde <put_fat>
    a6ce:	00 97       	sbiw	r24, 0x00	; 0
    a6d0:	d9 f2       	breq	.-74     	; 0xa688 <create_chain+0x1ca>
    a6d2:	08 c0       	rjmp	.+16     	; 0xa6e4 <create_chain+0x226>
    a6d4:	8c 81       	ldd	r24, Y+4	; 0x04
    a6d6:	81 60       	ori	r24, 0x01	; 1
    a6d8:	8c 83       	std	Y+4, r24	; 0x04
    a6da:	4c 2d       	mov	r20, r12
    a6dc:	3d 2d       	mov	r19, r13
    a6de:	2e 2d       	mov	r18, r14
    a6e0:	9f 2d       	mov	r25, r15
    a6e2:	0b c0       	rjmp	.+22     	; 0xa6fa <create_chain+0x23c>
    a6e4:	01 97       	sbiw	r24, 0x01	; 1
    a6e6:	09 f4       	brne	.+2      	; 0xa6ea <create_chain+0x22c>
    a6e8:	1c cf       	rjmp	.-456    	; 0xa522 <create_chain+0x64>
    a6ea:	41 e0       	ldi	r20, 0x01	; 1
    a6ec:	30 e0       	ldi	r19, 0x00	; 0
    a6ee:	20 e0       	ldi	r18, 0x00	; 0
    a6f0:	90 e0       	ldi	r25, 0x00	; 0
    a6f2:	03 c0       	rjmp	.+6      	; 0xa6fa <create_chain+0x23c>
    a6f4:	46 2f       	mov	r20, r22
    a6f6:	37 2f       	mov	r19, r23
    a6f8:	28 2f       	mov	r18, r24
    a6fa:	64 2f       	mov	r22, r20
    a6fc:	73 2f       	mov	r23, r19
    a6fe:	82 2f       	mov	r24, r18
    a700:	cd b7       	in	r28, 0x3d	; 61
    a702:	de b7       	in	r29, 0x3e	; 62
    a704:	e0 e1       	ldi	r30, 0x10	; 16
    a706:	0c 94 07 e4 	jmp	0x1c80e	; 0x1c80e <__epilogue_restores__+0x4>

0000a70a <remove_chain>:
    a70a:	4f 92       	push	r4
    a70c:	5f 92       	push	r5
    a70e:	6f 92       	push	r6
    a710:	7f 92       	push	r7
    a712:	af 92       	push	r10
    a714:	bf 92       	push	r11
    a716:	cf 92       	push	r12
    a718:	df 92       	push	r13
    a71a:	ef 92       	push	r14
    a71c:	ff 92       	push	r15
    a71e:	0f 93       	push	r16
    a720:	1f 93       	push	r17
    a722:	cf 93       	push	r28
    a724:	df 93       	push	r29
    a726:	5c 01       	movw	r10, r24
    a728:	6a 01       	movw	r12, r20
    a72a:	7b 01       	movw	r14, r22
    a72c:	b9 01       	movw	r22, r18
    a72e:	a8 01       	movw	r20, r16
    a730:	22 e0       	ldi	r18, 0x02	; 2
    a732:	c2 16       	cp	r12, r18
    a734:	d1 04       	cpc	r13, r1
    a736:	e1 04       	cpc	r14, r1
    a738:	f1 04       	cpc	r15, r1
    a73a:	10 f4       	brcc	.+4      	; 0xa740 <remove_chain+0x36>
    a73c:	22 e0       	ldi	r18, 0x02	; 2
    a73e:	27 c0       	rjmp	.+78     	; 0xa78e <remove_chain+0x84>
    a740:	fc 01       	movw	r30, r24
    a742:	c0 81       	ld	r28, Z
    a744:	d1 81       	ldd	r29, Z+1	; 0x01
    a746:	89 8d       	ldd	r24, Y+25	; 0x19
    a748:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a74a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a74c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a74e:	c8 16       	cp	r12, r24
    a750:	d9 06       	cpc	r13, r25
    a752:	ea 06       	cpc	r14, r26
    a754:	fb 06       	cpc	r15, r27
    a756:	90 f7       	brcc	.-28     	; 0xa73c <remove_chain+0x32>
    a758:	41 15       	cp	r20, r1
    a75a:	51 05       	cpc	r21, r1
    a75c:	61 05       	cpc	r22, r1
    a75e:	71 05       	cpc	r23, r1
    a760:	41 f0       	breq	.+16     	; 0xa772 <remove_chain+0x68>
    a762:	0f ef       	ldi	r16, 0xFF	; 255
    a764:	1f ef       	ldi	r17, 0xFF	; 255
    a766:	98 01       	movw	r18, r16
    a768:	ce 01       	movw	r24, r28
    a76a:	39 dc       	rcall	.-1934   	; 0x9fde <put_fat>
    a76c:	00 97       	sbiw	r24, 0x00	; 0
    a76e:	09 f0       	breq	.+2      	; 0xa772 <remove_chain+0x68>
    a770:	4c c0       	rjmp	.+152    	; 0xa80a <remove_chain+0x100>
    a772:	b7 01       	movw	r22, r14
    a774:	a6 01       	movw	r20, r12
    a776:	f5 01       	movw	r30, r10
    a778:	80 81       	ld	r24, Z
    a77a:	91 81       	ldd	r25, Z+1	; 0x01
    a77c:	2b dd       	rcall	.-1450   	; 0xa1d4 <get_fat.isra.10>
    a77e:	2b 01       	movw	r4, r22
    a780:	3c 01       	movw	r6, r24
    a782:	61 15       	cp	r22, r1
    a784:	71 05       	cpc	r23, r1
    a786:	81 05       	cpc	r24, r1
    a788:	91 05       	cpc	r25, r1
    a78a:	19 f4       	brne	.+6      	; 0xa792 <remove_chain+0x88>
    a78c:	20 e0       	ldi	r18, 0x00	; 0
    a78e:	90 e0       	ldi	r25, 0x00	; 0
    a790:	3d c0       	rjmp	.+122    	; 0xa80c <remove_chain+0x102>
    a792:	61 30       	cpi	r22, 0x01	; 1
    a794:	71 05       	cpc	r23, r1
    a796:	81 05       	cpc	r24, r1
    a798:	91 05       	cpc	r25, r1
    a79a:	81 f2       	breq	.-96     	; 0xa73c <remove_chain+0x32>
    a79c:	6f 3f       	cpi	r22, 0xFF	; 255
    a79e:	7f 4f       	sbci	r23, 0xFF	; 255
    a7a0:	8f 4f       	sbci	r24, 0xFF	; 255
    a7a2:	9f 4f       	sbci	r25, 0xFF	; 255
    a7a4:	81 f1       	breq	.+96     	; 0xa806 <remove_chain+0xfc>
    a7a6:	00 e0       	ldi	r16, 0x00	; 0
    a7a8:	10 e0       	ldi	r17, 0x00	; 0
    a7aa:	98 01       	movw	r18, r16
    a7ac:	b7 01       	movw	r22, r14
    a7ae:	a6 01       	movw	r20, r12
    a7b0:	ce 01       	movw	r24, r28
    a7b2:	15 dc       	rcall	.-2006   	; 0x9fde <put_fat>
    a7b4:	00 97       	sbiw	r24, 0x00	; 0
    a7b6:	49 f5       	brne	.+82     	; 0xa80a <remove_chain+0x100>
    a7b8:	89 89       	ldd	r24, Y+17	; 0x11
    a7ba:	9a 89       	ldd	r25, Y+18	; 0x12
    a7bc:	ab 89       	ldd	r26, Y+19	; 0x13
    a7be:	bc 89       	ldd	r27, Y+20	; 0x14
    a7c0:	49 8d       	ldd	r20, Y+25	; 0x19
    a7c2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a7c4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a7c6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a7c8:	6a 01       	movw	r12, r20
    a7ca:	7b 01       	movw	r14, r22
    a7cc:	e2 e0       	ldi	r30, 0x02	; 2
    a7ce:	ce 1a       	sub	r12, r30
    a7d0:	d1 08       	sbc	r13, r1
    a7d2:	e1 08       	sbc	r14, r1
    a7d4:	f1 08       	sbc	r15, r1
    a7d6:	8c 15       	cp	r24, r12
    a7d8:	9d 05       	cpc	r25, r13
    a7da:	ae 05       	cpc	r26, r14
    a7dc:	bf 05       	cpc	r27, r15
    a7de:	50 f4       	brcc	.+20     	; 0xa7f4 <remove_chain+0xea>
    a7e0:	01 96       	adiw	r24, 0x01	; 1
    a7e2:	a1 1d       	adc	r26, r1
    a7e4:	b1 1d       	adc	r27, r1
    a7e6:	89 8b       	std	Y+17, r24	; 0x11
    a7e8:	9a 8b       	std	Y+18, r25	; 0x12
    a7ea:	ab 8b       	std	Y+19, r26	; 0x13
    a7ec:	bc 8b       	std	Y+20, r27	; 0x14
    a7ee:	8c 81       	ldd	r24, Y+4	; 0x04
    a7f0:	81 60       	ori	r24, 0x01	; 1
    a7f2:	8c 83       	std	Y+4, r24	; 0x04
    a7f4:	73 01       	movw	r14, r6
    a7f6:	62 01       	movw	r12, r4
    a7f8:	44 16       	cp	r4, r20
    a7fa:	55 06       	cpc	r5, r21
    a7fc:	66 06       	cpc	r6, r22
    a7fe:	77 06       	cpc	r7, r23
    a800:	08 f4       	brcc	.+2      	; 0xa804 <remove_chain+0xfa>
    a802:	b7 cf       	rjmp	.-146    	; 0xa772 <remove_chain+0x68>
    a804:	c3 cf       	rjmp	.-122    	; 0xa78c <remove_chain+0x82>
    a806:	21 e0       	ldi	r18, 0x01	; 1
    a808:	c2 cf       	rjmp	.-124    	; 0xa78e <remove_chain+0x84>
    a80a:	28 2f       	mov	r18, r24
    a80c:	82 2f       	mov	r24, r18
    a80e:	df 91       	pop	r29
    a810:	cf 91       	pop	r28
    a812:	1f 91       	pop	r17
    a814:	0f 91       	pop	r16
    a816:	ff 90       	pop	r15
    a818:	ef 90       	pop	r14
    a81a:	df 90       	pop	r13
    a81c:	cf 90       	pop	r12
    a81e:	bf 90       	pop	r11
    a820:	af 90       	pop	r10
    a822:	7f 90       	pop	r7
    a824:	6f 90       	pop	r6
    a826:	5f 90       	pop	r5
    a828:	4f 90       	pop	r4
    a82a:	08 95       	ret

0000a82c <dir_next>:
    a82c:	4f 92       	push	r4
    a82e:	5f 92       	push	r5
    a830:	6f 92       	push	r6
    a832:	7f 92       	push	r7
    a834:	af 92       	push	r10
    a836:	bf 92       	push	r11
    a838:	cf 92       	push	r12
    a83a:	df 92       	push	r13
    a83c:	ef 92       	push	r14
    a83e:	ff 92       	push	r15
    a840:	0f 93       	push	r16
    a842:	1f 93       	push	r17
    a844:	cf 93       	push	r28
    a846:	df 93       	push	r29
    a848:	ec 01       	movw	r28, r24
    a84a:	08 81       	ld	r16, Y
    a84c:	19 81       	ldd	r17, Y+1	; 0x01
    a84e:	ce 84       	ldd	r12, Y+14	; 0x0e
    a850:	df 84       	ldd	r13, Y+15	; 0x0f
    a852:	e8 88       	ldd	r14, Y+16	; 0x10
    a854:	f9 88       	ldd	r15, Y+17	; 0x11
    a856:	80 e2       	ldi	r24, 0x20	; 32
    a858:	c8 0e       	add	r12, r24
    a85a:	d1 1c       	adc	r13, r1
    a85c:	e1 1c       	adc	r14, r1
    a85e:	f1 1c       	adc	r15, r1
    a860:	c1 14       	cp	r12, r1
    a862:	d1 04       	cpc	r13, r1
    a864:	e0 e2       	ldi	r30, 0x20	; 32
    a866:	ee 06       	cpc	r14, r30
    a868:	f1 04       	cpc	r15, r1
    a86a:	20 f0       	brcs	.+8      	; 0xa874 <dir_next+0x48>
    a86c:	1e 8a       	std	Y+22, r1	; 0x16
    a86e:	1f 8a       	std	Y+23, r1	; 0x17
    a870:	18 8e       	std	Y+24, r1	; 0x18
    a872:	19 8e       	std	Y+25, r1	; 0x19
    a874:	8e 89       	ldd	r24, Y+22	; 0x16
    a876:	9f 89       	ldd	r25, Y+23	; 0x17
    a878:	a8 8d       	ldd	r26, Y+24	; 0x18
    a87a:	b9 8d       	ldd	r27, Y+25	; 0x19
    a87c:	00 97       	sbiw	r24, 0x00	; 0
    a87e:	a1 05       	cpc	r26, r1
    a880:	b1 05       	cpc	r27, r1
    a882:	09 f4       	brne	.+2      	; 0xa886 <dir_next+0x5a>
    a884:	a7 c0       	rjmp	.+334    	; 0xa9d4 <dir_next+0x1a8>
    a886:	5b 01       	movw	r10, r22
    a888:	b7 01       	movw	r22, r14
    a88a:	a6 01       	movw	r20, r12
    a88c:	51 70       	andi	r21, 0x01	; 1
    a88e:	66 27       	eor	r22, r22
    a890:	77 27       	eor	r23, r23
    a892:	45 2b       	or	r20, r21
    a894:	46 2b       	or	r20, r22
    a896:	47 2b       	or	r20, r23
    a898:	09 f0       	breq	.+2      	; 0xa89c <dir_next+0x70>
    a89a:	8d c0       	rjmp	.+282    	; 0xa9b6 <dir_next+0x18a>
    a89c:	01 96       	adiw	r24, 0x01	; 1
    a89e:	a1 1d       	adc	r26, r1
    a8a0:	b1 1d       	adc	r27, r1
    a8a2:	8e 8b       	std	Y+22, r24	; 0x16
    a8a4:	9f 8b       	std	Y+23, r25	; 0x17
    a8a6:	a8 8f       	std	Y+24, r26	; 0x18
    a8a8:	b9 8f       	std	Y+25, r27	; 0x19
    a8aa:	4a 89       	ldd	r20, Y+18	; 0x12
    a8ac:	5b 89       	ldd	r21, Y+19	; 0x13
    a8ae:	6c 89       	ldd	r22, Y+20	; 0x14
    a8b0:	7d 89       	ldd	r23, Y+21	; 0x15
    a8b2:	f8 01       	movw	r30, r16
    a8b4:	41 15       	cp	r20, r1
    a8b6:	51 05       	cpc	r21, r1
    a8b8:	61 05       	cpc	r22, r1
    a8ba:	71 05       	cpc	r23, r1
    a8bc:	c1 f4       	brne	.+48     	; 0xa8ee <dir_next+0xc2>
    a8be:	87 81       	ldd	r24, Z+7	; 0x07
    a8c0:	90 85       	ldd	r25, Z+8	; 0x08
    a8c2:	a0 e0       	ldi	r26, 0x00	; 0
    a8c4:	b0 e0       	ldi	r27, 0x00	; 0
    a8c6:	b7 01       	movw	r22, r14
    a8c8:	a6 01       	movw	r20, r12
    a8ca:	35 e0       	ldi	r19, 0x05	; 5
    a8cc:	76 95       	lsr	r23
    a8ce:	67 95       	ror	r22
    a8d0:	57 95       	ror	r21
    a8d2:	47 95       	ror	r20
    a8d4:	3a 95       	dec	r19
    a8d6:	d1 f7       	brne	.-12     	; 0xa8cc <dir_next+0xa0>
    a8d8:	48 17       	cp	r20, r24
    a8da:	59 07       	cpc	r21, r25
    a8dc:	6a 07       	cpc	r22, r26
    a8de:	7b 07       	cpc	r23, r27
    a8e0:	08 f4       	brcc	.+2      	; 0xa8e4 <dir_next+0xb8>
    a8e2:	69 c0       	rjmp	.+210    	; 0xa9b6 <dir_next+0x18a>
    a8e4:	1e 8a       	std	Y+22, r1	; 0x16
    a8e6:	1f 8a       	std	Y+23, r1	; 0x17
    a8e8:	18 8e       	std	Y+24, r1	; 0x18
    a8ea:	19 8e       	std	Y+25, r1	; 0x19
    a8ec:	73 c0       	rjmp	.+230    	; 0xa9d4 <dir_next+0x1a8>
    a8ee:	81 85       	ldd	r24, Z+9	; 0x09
    a8f0:	92 85       	ldd	r25, Z+10	; 0x0a
    a8f2:	01 97       	sbiw	r24, 0x01	; 1
    a8f4:	a0 e0       	ldi	r26, 0x00	; 0
    a8f6:	b0 e0       	ldi	r27, 0x00	; 0
    a8f8:	26 01       	movw	r4, r12
    a8fa:	37 01       	movw	r6, r14
    a8fc:	29 e0       	ldi	r18, 0x09	; 9
    a8fe:	76 94       	lsr	r7
    a900:	67 94       	ror	r6
    a902:	57 94       	ror	r5
    a904:	47 94       	ror	r4
    a906:	2a 95       	dec	r18
    a908:	d1 f7       	brne	.-12     	; 0xa8fe <dir_next+0xd2>
    a90a:	84 21       	and	r24, r4
    a90c:	95 21       	and	r25, r5
    a90e:	a6 21       	and	r26, r6
    a910:	b7 21       	and	r27, r7
    a912:	89 2b       	or	r24, r25
    a914:	8a 2b       	or	r24, r26
    a916:	8b 2b       	or	r24, r27
    a918:	09 f0       	breq	.+2      	; 0xa91c <dir_next+0xf0>
    a91a:	4d c0       	rjmp	.+154    	; 0xa9b6 <dir_next+0x18a>
    a91c:	c8 01       	movw	r24, r16
    a91e:	5a dc       	rcall	.-1868   	; 0xa1d4 <get_fat.isra.10>
    a920:	2b 01       	movw	r4, r22
    a922:	3c 01       	movw	r6, r24
    a924:	62 30       	cpi	r22, 0x02	; 2
    a926:	71 05       	cpc	r23, r1
    a928:	81 05       	cpc	r24, r1
    a92a:	91 05       	cpc	r25, r1
    a92c:	18 f4       	brcc	.+6      	; 0xa934 <dir_next+0x108>
    a92e:	82 e0       	ldi	r24, 0x02	; 2
    a930:	90 e0       	ldi	r25, 0x00	; 0
    a932:	55 c0       	rjmp	.+170    	; 0xa9de <dir_next+0x1b2>
    a934:	8f ef       	ldi	r24, 0xFF	; 255
    a936:	48 16       	cp	r4, r24
    a938:	58 06       	cpc	r5, r24
    a93a:	68 06       	cpc	r6, r24
    a93c:	78 06       	cpc	r7, r24
    a93e:	19 f4       	brne	.+6      	; 0xa946 <dir_next+0x11a>
    a940:	81 e0       	ldi	r24, 0x01	; 1
    a942:	90 e0       	ldi	r25, 0x00	; 0
    a944:	4c c0       	rjmp	.+152    	; 0xa9de <dir_next+0x1b2>
    a946:	f8 01       	movw	r30, r16
    a948:	81 8d       	ldd	r24, Z+25	; 0x19
    a94a:	92 8d       	ldd	r25, Z+26	; 0x1a
    a94c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a94e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a950:	48 16       	cp	r4, r24
    a952:	59 06       	cpc	r5, r25
    a954:	6a 06       	cpc	r6, r26
    a956:	7b 06       	cpc	r7, r27
    a958:	08 f1       	brcs	.+66     	; 0xa99c <dir_next+0x170>
    a95a:	ab 28       	or	r10, r11
    a95c:	19 f2       	breq	.-122    	; 0xa8e4 <dir_next+0xb8>
    a95e:	4a 89       	ldd	r20, Y+18	; 0x12
    a960:	5b 89       	ldd	r21, Y+19	; 0x13
    a962:	6c 89       	ldd	r22, Y+20	; 0x14
    a964:	7d 89       	ldd	r23, Y+21	; 0x15
    a966:	ce 01       	movw	r24, r28
    a968:	aa dd       	rcall	.-1196   	; 0xa4be <create_chain>
    a96a:	2b 01       	movw	r4, r22
    a96c:	3c 01       	movw	r6, r24
    a96e:	61 15       	cp	r22, r1
    a970:	71 05       	cpc	r23, r1
    a972:	81 05       	cpc	r24, r1
    a974:	91 05       	cpc	r25, r1
    a976:	89 f1       	breq	.+98     	; 0xa9da <dir_next+0x1ae>
    a978:	61 30       	cpi	r22, 0x01	; 1
    a97a:	71 05       	cpc	r23, r1
    a97c:	81 05       	cpc	r24, r1
    a97e:	91 05       	cpc	r25, r1
    a980:	b1 f2       	breq	.-84     	; 0xa92e <dir_next+0x102>
    a982:	8f ef       	ldi	r24, 0xFF	; 255
    a984:	48 16       	cp	r4, r24
    a986:	58 06       	cpc	r5, r24
    a988:	68 06       	cpc	r6, r24
    a98a:	78 06       	cpc	r7, r24
    a98c:	c9 f2       	breq	.-78     	; 0xa940 <dir_next+0x114>
    a98e:	b3 01       	movw	r22, r6
    a990:	a2 01       	movw	r20, r4
    a992:	c8 01       	movw	r24, r16
    a994:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <dir_clear>
    a998:	89 2b       	or	r24, r25
    a99a:	91 f6       	brne	.-92     	; 0xa940 <dir_next+0x114>
    a99c:	4a 8a       	std	Y+18, r4	; 0x12
    a99e:	5b 8a       	std	Y+19, r5	; 0x13
    a9a0:	6c 8a       	std	Y+20, r6	; 0x14
    a9a2:	7d 8a       	std	Y+21, r7	; 0x15
    a9a4:	b3 01       	movw	r22, r6
    a9a6:	a2 01       	movw	r20, r4
    a9a8:	c8 01       	movw	r24, r16
    a9aa:	0e 94 f8 48 	call	0x91f0	; 0x91f0 <clst2sect>
    a9ae:	6e 8b       	std	Y+22, r22	; 0x16
    a9b0:	7f 8b       	std	Y+23, r23	; 0x17
    a9b2:	88 8f       	std	Y+24, r24	; 0x18
    a9b4:	99 8f       	std	Y+25, r25	; 0x19
    a9b6:	ce 86       	std	Y+14, r12	; 0x0e
    a9b8:	df 86       	std	Y+15, r13	; 0x0f
    a9ba:	e8 8a       	std	Y+16, r14	; 0x10
    a9bc:	f9 8a       	std	Y+17, r15	; 0x11
    a9be:	0b 5c       	subi	r16, 0xCB	; 203
    a9c0:	1f 4f       	sbci	r17, 0xFF	; 255
    a9c2:	e1 e0       	ldi	r30, 0x01	; 1
    a9c4:	de 22       	and	r13, r30
    a9c6:	c0 0e       	add	r12, r16
    a9c8:	d1 1e       	adc	r13, r17
    a9ca:	db 8e       	std	Y+27, r13	; 0x1b
    a9cc:	ca 8e       	std	Y+26, r12	; 0x1a
    a9ce:	80 e0       	ldi	r24, 0x00	; 0
    a9d0:	90 e0       	ldi	r25, 0x00	; 0
    a9d2:	05 c0       	rjmp	.+10     	; 0xa9de <dir_next+0x1b2>
    a9d4:	84 e0       	ldi	r24, 0x04	; 4
    a9d6:	90 e0       	ldi	r25, 0x00	; 0
    a9d8:	02 c0       	rjmp	.+4      	; 0xa9de <dir_next+0x1b2>
    a9da:	87 e0       	ldi	r24, 0x07	; 7
    a9dc:	90 e0       	ldi	r25, 0x00	; 0
    a9de:	df 91       	pop	r29
    a9e0:	cf 91       	pop	r28
    a9e2:	1f 91       	pop	r17
    a9e4:	0f 91       	pop	r16
    a9e6:	ff 90       	pop	r15
    a9e8:	ef 90       	pop	r14
    a9ea:	df 90       	pop	r13
    a9ec:	cf 90       	pop	r12
    a9ee:	bf 90       	pop	r11
    a9f0:	af 90       	pop	r10
    a9f2:	7f 90       	pop	r7
    a9f4:	6f 90       	pop	r6
    a9f6:	5f 90       	pop	r5
    a9f8:	4f 90       	pop	r4
    a9fa:	08 95       	ret

0000a9fc <dir_alloc>:
    a9fc:	a0 e0       	ldi	r26, 0x00	; 0
    a9fe:	b0 e0       	ldi	r27, 0x00	; 0
    aa00:	e4 e0       	ldi	r30, 0x04	; 4
    aa02:	f5 e5       	ldi	r31, 0x55	; 85
    aa04:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    aa08:	ec 01       	movw	r28, r24
    aa0a:	6b 01       	movw	r12, r22
    aa0c:	e8 80       	ld	r14, Y
    aa0e:	f9 80       	ldd	r15, Y+1	; 0x01
    aa10:	40 e0       	ldi	r20, 0x00	; 0
    aa12:	50 e0       	ldi	r21, 0x00	; 0
    aa14:	ba 01       	movw	r22, r20
    aa16:	92 dc       	rcall	.-1756   	; 0xa33c <dir_sdi>
    aa18:	00 97       	sbiw	r24, 0x00	; 0
    aa1a:	f9 f4       	brne	.+62     	; 0xaa5a <dir_alloc+0x5e>
    aa1c:	00 e0       	ldi	r16, 0x00	; 0
    aa1e:	10 e0       	ldi	r17, 0x00	; 0
    aa20:	4e 89       	ldd	r20, Y+22	; 0x16
    aa22:	5f 89       	ldd	r21, Y+23	; 0x17
    aa24:	68 8d       	ldd	r22, Y+24	; 0x18
    aa26:	79 8d       	ldd	r23, Y+25	; 0x19
    aa28:	c7 01       	movw	r24, r14
    aa2a:	04 d8       	rcall	.-4088   	; 0x9a34 <move_window>
    aa2c:	00 97       	sbiw	r24, 0x00	; 0
    aa2e:	a9 f4       	brne	.+42     	; 0xaa5a <dir_alloc+0x5e>
    aa30:	ea 8d       	ldd	r30, Y+26	; 0x1a
    aa32:	fb 8d       	ldd	r31, Y+27	; 0x1b
    aa34:	20 81       	ld	r18, Z
    aa36:	25 3e       	cpi	r18, 0xE5	; 229
    aa38:	11 f0       	breq	.+4      	; 0xaa3e <dir_alloc+0x42>
    aa3a:	21 11       	cpse	r18, r1
    aa3c:	06 c0       	rjmp	.+12     	; 0xaa4a <dir_alloc+0x4e>
    aa3e:	0f 5f       	subi	r16, 0xFF	; 255
    aa40:	1f 4f       	sbci	r17, 0xFF	; 255
    aa42:	0c 15       	cp	r16, r12
    aa44:	1d 05       	cpc	r17, r13
    aa46:	19 f4       	brne	.+6      	; 0xaa4e <dir_alloc+0x52>
    aa48:	0d c0       	rjmp	.+26     	; 0xaa64 <dir_alloc+0x68>
    aa4a:	00 e0       	ldi	r16, 0x00	; 0
    aa4c:	10 e0       	ldi	r17, 0x00	; 0
    aa4e:	61 e0       	ldi	r22, 0x01	; 1
    aa50:	70 e0       	ldi	r23, 0x00	; 0
    aa52:	ce 01       	movw	r24, r28
    aa54:	eb de       	rcall	.-554    	; 0xa82c <dir_next>
    aa56:	00 97       	sbiw	r24, 0x00	; 0
    aa58:	19 f3       	breq	.-58     	; 0xaa20 <dir_alloc+0x24>
    aa5a:	84 30       	cpi	r24, 0x04	; 4
    aa5c:	91 05       	cpc	r25, r1
    aa5e:	11 f4       	brne	.+4      	; 0xaa64 <dir_alloc+0x68>
    aa60:	87 e0       	ldi	r24, 0x07	; 7
    aa62:	90 e0       	ldi	r25, 0x00	; 0
    aa64:	cd b7       	in	r28, 0x3d	; 61
    aa66:	de b7       	in	r29, 0x3e	; 62
    aa68:	e8 e0       	ldi	r30, 0x08	; 8
    aa6a:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000aa6e <dir_read>:
    aa6e:	a0 e0       	ldi	r26, 0x00	; 0
    aa70:	b0 e0       	ldi	r27, 0x00	; 0
    aa72:	ed e3       	ldi	r30, 0x3D	; 61
    aa74:	f5 e5       	ldi	r31, 0x55	; 85
    aa76:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
    aa7a:	ec 01       	movw	r28, r24
    aa7c:	7b 01       	movw	r14, r22
    aa7e:	a8 80       	ld	r10, Y
    aa80:	b9 80       	ldd	r11, Y+1	; 0x01
    aa82:	dd 24       	eor	r13, r13
    aa84:	da 94       	dec	r13
    aa86:	1f ef       	ldi	r17, 0xFF	; 255
    aa88:	84 e0       	ldi	r24, 0x04	; 4
    aa8a:	90 e0       	ldi	r25, 0x00	; 0
    aa8c:	fd e0       	ldi	r31, 0x0D	; 13
    aa8e:	cf 2e       	mov	r12, r31
    aa90:	4e 89       	ldd	r20, Y+22	; 0x16
    aa92:	5f 89       	ldd	r21, Y+23	; 0x17
    aa94:	68 8d       	ldd	r22, Y+24	; 0x18
    aa96:	79 8d       	ldd	r23, Y+25	; 0x19
    aa98:	41 15       	cp	r20, r1
    aa9a:	51 05       	cpc	r21, r1
    aa9c:	61 05       	cpc	r22, r1
    aa9e:	71 05       	cpc	r23, r1
    aaa0:	09 f4       	brne	.+2      	; 0xaaa4 <dir_read+0x36>
    aaa2:	9a c0       	rjmp	.+308    	; 0xabd8 <dir_read+0x16a>
    aaa4:	c5 01       	movw	r24, r10
    aaa6:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    aaaa:	00 97       	sbiw	r24, 0x00	; 0
    aaac:	09 f0       	breq	.+2      	; 0xaab0 <dir_read+0x42>
    aaae:	96 c0       	rjmp	.+300    	; 0xabdc <dir_read+0x16e>
    aab0:	8a 8c       	ldd	r8, Y+26	; 0x1a
    aab2:	9b 8c       	ldd	r9, Y+27	; 0x1b
    aab4:	f4 01       	movw	r30, r8
    aab6:	00 81       	ld	r16, Z
    aab8:	00 23       	and	r16, r16
    aaba:	09 f4       	brne	.+2      	; 0xaabe <dir_read+0x50>
    aabc:	97 c0       	rjmp	.+302    	; 0xabec <dir_read+0x17e>
    aabe:	83 85       	ldd	r24, Z+11	; 0x0b
    aac0:	8f 73       	andi	r24, 0x3F	; 63
    aac2:	8c 83       	std	Y+4, r24	; 0x04
    aac4:	05 3e       	cpi	r16, 0xE5	; 229
    aac6:	09 f4       	brne	.+2      	; 0xaaca <dir_read+0x5c>
    aac8:	7e c0       	rjmp	.+252    	; 0xabc6 <dir_read+0x158>
    aaca:	0e 32       	cpi	r16, 0x2E	; 46
    aacc:	09 f4       	brne	.+2      	; 0xaad0 <dir_read+0x62>
    aace:	7b c0       	rjmp	.+246    	; 0xabc6 <dir_read+0x158>
    aad0:	21 e0       	ldi	r18, 0x01	; 1
    aad2:	30 e0       	ldi	r19, 0x00	; 0
    aad4:	98 2f       	mov	r25, r24
    aad6:	9f 71       	andi	r25, 0x1F	; 31
    aad8:	98 30       	cpi	r25, 0x08	; 8
    aada:	11 f0       	breq	.+4      	; 0xaae0 <dir_read+0x72>
    aadc:	20 e0       	ldi	r18, 0x00	; 0
    aade:	30 e0       	ldi	r19, 0x00	; 0
    aae0:	2e 15       	cp	r18, r14
    aae2:	3f 05       	cpc	r19, r15
    aae4:	09 f0       	breq	.+2      	; 0xaae8 <dir_read+0x7a>
    aae6:	6f c0       	rjmp	.+222    	; 0xabc6 <dir_read+0x158>
    aae8:	8f 30       	cpi	r24, 0x0F	; 15
    aaea:	09 f0       	breq	.+2      	; 0xaaee <dir_read+0x80>
    aaec:	5c c0       	rjmp	.+184    	; 0xaba6 <dir_read+0x138>
    aaee:	06 ff       	sbrs	r16, 6
    aaf0:	0c c0       	rjmp	.+24     	; 0xab0a <dir_read+0x9c>
    aaf2:	f4 01       	movw	r30, r8
    aaf4:	85 85       	ldd	r24, Z+13	; 0x0d
    aaf6:	0f 7b       	andi	r16, 0xBF	; 191
    aaf8:	4e 85       	ldd	r20, Y+14	; 0x0e
    aafa:	5f 85       	ldd	r21, Y+15	; 0x0f
    aafc:	68 89       	ldd	r22, Y+16	; 0x10
    aafe:	79 89       	ldd	r23, Y+17	; 0x11
    ab00:	48 a7       	std	Y+40, r20	; 0x28
    ab02:	59 a7       	std	Y+41, r21	; 0x29
    ab04:	6a a7       	std	Y+42, r22	; 0x2a
    ab06:	7b a7       	std	Y+43, r23	; 0x2b
    ab08:	03 c0       	rjmp	.+6      	; 0xab10 <dir_read+0xa2>
    ab0a:	10 13       	cpse	r17, r16
    ab0c:	5c c0       	rjmp	.+184    	; 0xabc6 <dir_read+0x158>
    ab0e:	8d 2d       	mov	r24, r13
    ab10:	f4 01       	movw	r30, r8
    ab12:	d5 84       	ldd	r13, Z+13	; 0x0d
    ab14:	d8 12       	cpse	r13, r24
    ab16:	56 c0       	rjmp	.+172    	; 0xabc4 <dir_read+0x156>
    ab18:	82 8d       	ldd	r24, Z+26	; 0x1a
    ab1a:	93 8d       	ldd	r25, Z+27	; 0x1b
    ab1c:	89 2b       	or	r24, r25
    ab1e:	09 f0       	breq	.+2      	; 0xab22 <dir_read+0xb4>
    ab20:	52 c0       	rjmp	.+164    	; 0xabc6 <dir_read+0x158>
    ab22:	f5 01       	movw	r30, r10
    ab24:	63 85       	ldd	r22, Z+11	; 0x0b
    ab26:	74 85       	ldd	r23, Z+12	; 0x0c
    ab28:	f4 01       	movw	r30, r8
    ab2a:	80 81       	ld	r24, Z
    ab2c:	90 e0       	ldi	r25, 0x00	; 0
    ab2e:	8f 7b       	andi	r24, 0xBF	; 191
    ab30:	01 97       	sbiw	r24, 0x01	; 1
    ab32:	c8 9e       	mul	r12, r24
    ab34:	90 01       	movw	r18, r0
    ab36:	c9 9e       	mul	r12, r25
    ab38:	30 0d       	add	r19, r0
    ab3a:	11 24       	eor	r1, r1
    ab3c:	a6 ee       	ldi	r26, 0xE6	; 230
    ab3e:	b4 e0       	ldi	r27, 0x04	; 4
    ab40:	81 e0       	ldi	r24, 0x01	; 1
    ab42:	90 e0       	ldi	r25, 0x00	; 0
    ab44:	4d 91       	ld	r20, X+
    ab46:	f4 01       	movw	r30, r8
    ab48:	e4 0f       	add	r30, r20
    ab4a:	f1 1d       	adc	r31, r1
    ab4c:	40 81       	ld	r20, Z
    ab4e:	51 81       	ldd	r21, Z+1	; 0x01
    ab50:	00 97       	sbiw	r24, 0x00	; 0
    ab52:	81 f0       	breq	.+32     	; 0xab74 <dir_read+0x106>
    ab54:	2f 3f       	cpi	r18, 0xFF	; 255
    ab56:	31 05       	cpc	r19, r1
    ab58:	09 f0       	breq	.+2      	; 0xab5c <dir_read+0xee>
    ab5a:	a8 f5       	brcc	.+106    	; 0xabc6 <dir_read+0x158>
    ab5c:	c9 01       	movw	r24, r18
    ab5e:	88 0f       	add	r24, r24
    ab60:	99 1f       	adc	r25, r25
    ab62:	86 0f       	add	r24, r22
    ab64:	97 1f       	adc	r25, r23
    ab66:	fc 01       	movw	r30, r24
    ab68:	51 83       	std	Z+1, r21	; 0x01
    ab6a:	40 83       	st	Z, r20
    ab6c:	ca 01       	movw	r24, r20
    ab6e:	2f 5f       	subi	r18, 0xFF	; 255
    ab70:	3f 4f       	sbci	r19, 0xFF	; 255
    ab72:	03 c0       	rjmp	.+6      	; 0xab7a <dir_read+0x10c>
    ab74:	4f 3f       	cpi	r20, 0xFF	; 255
    ab76:	5f 4f       	sbci	r21, 0xFF	; 255
    ab78:	31 f5       	brne	.+76     	; 0xabc6 <dir_read+0x158>
    ab7a:	44 e0       	ldi	r20, 0x04	; 4
    ab7c:	a3 3f       	cpi	r26, 0xF3	; 243
    ab7e:	b4 07       	cpc	r27, r20
    ab80:	09 f7       	brne	.-62     	; 0xab44 <dir_read+0xd6>
    ab82:	f4 01       	movw	r30, r8
    ab84:	40 81       	ld	r20, Z
    ab86:	46 ff       	sbrs	r20, 6
    ab88:	2e c0       	rjmp	.+92     	; 0xabe6 <dir_read+0x178>
    ab8a:	89 2b       	or	r24, r25
    ab8c:	61 f1       	breq	.+88     	; 0xabe6 <dir_read+0x178>
    ab8e:	2f 3f       	cpi	r18, 0xFF	; 255
    ab90:	31 05       	cpc	r19, r1
    ab92:	09 f0       	breq	.+2      	; 0xab96 <dir_read+0x128>
    ab94:	c0 f4       	brcc	.+48     	; 0xabc6 <dir_read+0x158>
    ab96:	22 0f       	add	r18, r18
    ab98:	33 1f       	adc	r19, r19
    ab9a:	fb 01       	movw	r30, r22
    ab9c:	e2 0f       	add	r30, r18
    ab9e:	f3 1f       	adc	r31, r19
    aba0:	11 82       	std	Z+1, r1	; 0x01
    aba2:	10 82       	st	Z, r1
    aba4:	20 c0       	rjmp	.+64     	; 0xabe6 <dir_read+0x178>
    aba6:	11 11       	cpse	r17, r1
    aba8:	05 c0       	rjmp	.+10     	; 0xabb4 <dir_read+0x146>
    abaa:	c4 01       	movw	r24, r8
    abac:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <sum_sfn>
    abb0:	d8 16       	cp	r13, r24
    abb2:	f9 f0       	breq	.+62     	; 0xabf2 <dir_read+0x184>
    abb4:	8f ef       	ldi	r24, 0xFF	; 255
    abb6:	9f ef       	ldi	r25, 0xFF	; 255
    abb8:	dc 01       	movw	r26, r24
    abba:	88 a7       	std	Y+40, r24	; 0x28
    abbc:	99 a7       	std	Y+41, r25	; 0x29
    abbe:	aa a7       	std	Y+42, r26	; 0x2a
    abc0:	bb a7       	std	Y+43, r27	; 0x2b
    abc2:	17 c0       	rjmp	.+46     	; 0xabf2 <dir_read+0x184>
    abc4:	d8 2e       	mov	r13, r24
    abc6:	1f ef       	ldi	r17, 0xFF	; 255
    abc8:	60 e0       	ldi	r22, 0x00	; 0
    abca:	70 e0       	ldi	r23, 0x00	; 0
    abcc:	ce 01       	movw	r24, r28
    abce:	2e de       	rcall	.-932    	; 0xa82c <dir_next>
    abd0:	00 97       	sbiw	r24, 0x00	; 0
    abd2:	09 f4       	brne	.+2      	; 0xabd6 <dir_read+0x168>
    abd4:	5d cf       	rjmp	.-326    	; 0xaa90 <dir_read+0x22>
    abd6:	02 c0       	rjmp	.+4      	; 0xabdc <dir_read+0x16e>
    abd8:	00 97       	sbiw	r24, 0x00	; 0
    abda:	59 f0       	breq	.+22     	; 0xabf2 <dir_read+0x184>
    abdc:	1e 8a       	std	Y+22, r1	; 0x16
    abde:	1f 8a       	std	Y+23, r1	; 0x17
    abe0:	18 8e       	std	Y+24, r1	; 0x18
    abe2:	19 8e       	std	Y+25, r1	; 0x19
    abe4:	08 c0       	rjmp	.+16     	; 0xabf6 <dir_read+0x188>
    abe6:	1f ef       	ldi	r17, 0xFF	; 255
    abe8:	10 0f       	add	r17, r16
    abea:	ee cf       	rjmp	.-36     	; 0xabc8 <dir_read+0x15a>
    abec:	84 e0       	ldi	r24, 0x04	; 4
    abee:	90 e0       	ldi	r25, 0x00	; 0
    abf0:	f5 cf       	rjmp	.-22     	; 0xabdc <dir_read+0x16e>
    abf2:	80 e0       	ldi	r24, 0x00	; 0
    abf4:	90 e0       	ldi	r25, 0x00	; 0
    abf6:	cd b7       	in	r28, 0x3d	; 61
    abf8:	de b7       	in	r29, 0x3e	; 62
    abfa:	ec e0       	ldi	r30, 0x0C	; 12
    abfc:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

0000ac00 <dir_remove>:
    ac00:	a0 e0       	ldi	r26, 0x00	; 0
    ac02:	b0 e0       	ldi	r27, 0x00	; 0
    ac04:	e6 e0       	ldi	r30, 0x06	; 6
    ac06:	f6 e5       	ldi	r31, 0x56	; 86
    ac08:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
    ac0c:	ec 01       	movw	r28, r24
    ac0e:	08 81       	ld	r16, Y
    ac10:	19 81       	ldd	r17, Y+1	; 0x01
    ac12:	ce 84       	ldd	r12, Y+14	; 0x0e
    ac14:	df 84       	ldd	r13, Y+15	; 0x0f
    ac16:	e8 88       	ldd	r14, Y+16	; 0x10
    ac18:	f9 88       	ldd	r15, Y+17	; 0x11
    ac1a:	48 a5       	ldd	r20, Y+40	; 0x28
    ac1c:	59 a5       	ldd	r21, Y+41	; 0x29
    ac1e:	6a a5       	ldd	r22, Y+42	; 0x2a
    ac20:	7b a5       	ldd	r23, Y+43	; 0x2b
    ac22:	4f 3f       	cpi	r20, 0xFF	; 255
    ac24:	8f ef       	ldi	r24, 0xFF	; 255
    ac26:	58 07       	cpc	r21, r24
    ac28:	68 07       	cpc	r22, r24
    ac2a:	78 07       	cpc	r23, r24
    ac2c:	29 f4       	brne	.+10     	; 0xac38 <dir_remove+0x38>
    ac2e:	85 ee       	ldi	r24, 0xE5	; 229
    ac30:	b8 2e       	mov	r11, r24
    ac32:	aa 24       	eor	r10, r10
    ac34:	a3 94       	inc	r10
    ac36:	19 c0       	rjmp	.+50     	; 0xac6a <dir_remove+0x6a>
    ac38:	ce 01       	movw	r24, r28
    ac3a:	80 db       	rcall	.-2304   	; 0xa33c <dir_sdi>
    ac3c:	00 97       	sbiw	r24, 0x00	; 0
    ac3e:	19 f5       	brne	.+70     	; 0xac86 <dir_remove+0x86>
    ac40:	f6 cf       	rjmp	.-20     	; 0xac2e <dir_remove+0x2e>
    ac42:	ea 8d       	ldd	r30, Y+26	; 0x1a
    ac44:	fb 8d       	ldd	r31, Y+27	; 0x1b
    ac46:	b0 82       	st	Z, r11
    ac48:	f8 01       	movw	r30, r16
    ac4a:	a3 82       	std	Z+3, r10	; 0x03
    ac4c:	4e 85       	ldd	r20, Y+14	; 0x0e
    ac4e:	5f 85       	ldd	r21, Y+15	; 0x0f
    ac50:	68 89       	ldd	r22, Y+16	; 0x10
    ac52:	79 89       	ldd	r23, Y+17	; 0x11
    ac54:	4c 15       	cp	r20, r12
    ac56:	5d 05       	cpc	r21, r13
    ac58:	6e 05       	cpc	r22, r14
    ac5a:	7f 05       	cpc	r23, r15
    ac5c:	a0 f4       	brcc	.+40     	; 0xac86 <dir_remove+0x86>
    ac5e:	60 e0       	ldi	r22, 0x00	; 0
    ac60:	70 e0       	ldi	r23, 0x00	; 0
    ac62:	ce 01       	movw	r24, r28
    ac64:	e3 dd       	rcall	.-1082   	; 0xa82c <dir_next>
    ac66:	00 97       	sbiw	r24, 0x00	; 0
    ac68:	49 f4       	brne	.+18     	; 0xac7c <dir_remove+0x7c>
    ac6a:	4e 89       	ldd	r20, Y+22	; 0x16
    ac6c:	5f 89       	ldd	r21, Y+23	; 0x17
    ac6e:	68 8d       	ldd	r22, Y+24	; 0x18
    ac70:	79 8d       	ldd	r23, Y+25	; 0x19
    ac72:	c8 01       	movw	r24, r16
    ac74:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    ac78:	00 97       	sbiw	r24, 0x00	; 0
    ac7a:	19 f3       	breq	.-58     	; 0xac42 <dir_remove+0x42>
    ac7c:	84 30       	cpi	r24, 0x04	; 4
    ac7e:	91 05       	cpc	r25, r1
    ac80:	11 f4       	brne	.+4      	; 0xac86 <dir_remove+0x86>
    ac82:	82 e0       	ldi	r24, 0x02	; 2
    ac84:	90 e0       	ldi	r25, 0x00	; 0
    ac86:	cd b7       	in	r28, 0x3d	; 61
    ac88:	de b7       	in	r29, 0x3e	; 62
    ac8a:	ea e0       	ldi	r30, 0x0A	; 10
    ac8c:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

0000ac90 <dir_find>:
    ac90:	ac e0       	ldi	r26, 0x0C	; 12
    ac92:	b0 e0       	ldi	r27, 0x00	; 0
    ac94:	ee e4       	ldi	r30, 0x4E	; 78
    ac96:	f6 e5       	ldi	r31, 0x56	; 86
    ac98:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    ac9c:	9c 87       	std	Y+12, r25	; 0x0c
    ac9e:	8b 87       	std	Y+11, r24	; 0x0b
    aca0:	fc 01       	movw	r30, r24
    aca2:	01 90       	ld	r0, Z+
    aca4:	f0 81       	ld	r31, Z
    aca6:	e0 2d       	mov	r30, r0
    aca8:	fc 83       	std	Y+4, r31	; 0x04
    acaa:	eb 83       	std	Y+3, r30	; 0x03
    acac:	40 e0       	ldi	r20, 0x00	; 0
    acae:	50 e0       	ldi	r21, 0x00	; 0
    acb0:	ba 01       	movw	r22, r20
    acb2:	44 db       	rcall	.-2424   	; 0xa33c <dir_sdi>
    acb4:	00 97       	sbiw	r24, 0x00	; 0
    acb6:	09 f0       	breq	.+2      	; 0xacba <dir_find+0x2a>
    acb8:	e7 c0       	rjmp	.+462    	; 0xae88 <dir_find+0x1f8>
    acba:	8f ef       	ldi	r24, 0xFF	; 255
    acbc:	9f ef       	ldi	r25, 0xFF	; 255
    acbe:	dc 01       	movw	r26, r24
    acc0:	eb 85       	ldd	r30, Y+11	; 0x0b
    acc2:	fc 85       	ldd	r31, Y+12	; 0x0c
    acc4:	80 a7       	std	Z+40, r24	; 0x28
    acc6:	91 a7       	std	Z+41, r25	; 0x29
    acc8:	a2 a7       	std	Z+42, r26	; 0x2a
    acca:	b3 a7       	std	Z+43, r27	; 0x2b
    accc:	0f ef       	ldi	r16, 0xFF	; 255
    acce:	1f ef       	ldi	r17, 0xFF	; 255
    acd0:	44 24       	eor	r4, r4
    acd2:	4a 94       	dec	r4
    acd4:	54 2c       	mov	r5, r4
    acd6:	32 01       	movw	r6, r4
    acd8:	7c 96       	adiw	r30, 0x1c	; 28
    acda:	fa 87       	std	Y+10, r31	; 0x0a
    acdc:	e9 87       	std	Y+9, r30	; 0x09
    acde:	eb 85       	ldd	r30, Y+11	; 0x0b
    ace0:	fc 85       	ldd	r31, Y+12	; 0x0c
    ace2:	46 89       	ldd	r20, Z+22	; 0x16
    ace4:	57 89       	ldd	r21, Z+23	; 0x17
    ace6:	60 8d       	ldd	r22, Z+24	; 0x18
    ace8:	71 8d       	ldd	r23, Z+25	; 0x19
    acea:	8b 81       	ldd	r24, Y+3	; 0x03
    acec:	9c 81       	ldd	r25, Y+4	; 0x04
    acee:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    acf2:	00 97       	sbiw	r24, 0x00	; 0
    acf4:	09 f0       	breq	.+2      	; 0xacf8 <dir_find+0x68>
    acf6:	c8 c0       	rjmp	.+400    	; 0xae88 <dir_find+0x1f8>
    acf8:	eb 85       	ldd	r30, Y+11	; 0x0b
    acfa:	fc 85       	ldd	r31, Y+12	; 0x0c
    acfc:	e2 8c       	ldd	r14, Z+26	; 0x1a
    acfe:	f3 8c       	ldd	r15, Z+27	; 0x1b
    ad00:	f7 01       	movw	r30, r14
    ad02:	d0 80       	ld	r13, Z
    ad04:	dd 20       	and	r13, r13
    ad06:	09 f4       	brne	.+2      	; 0xad0a <dir_find+0x7a>
    ad08:	c1 c0       	rjmp	.+386    	; 0xae8c <dir_find+0x1fc>
    ad0a:	93 85       	ldd	r25, Z+11	; 0x0b
    ad0c:	89 2f       	mov	r24, r25
    ad0e:	8f 73       	andi	r24, 0x3F	; 63
    ad10:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad12:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad14:	84 83       	std	Z+4, r24	; 0x04
    ad16:	f5 ee       	ldi	r31, 0xE5	; 229
    ad18:	df 16       	cp	r13, r31
    ad1a:	09 f4       	brne	.+2      	; 0xad1e <dir_find+0x8e>
    ad1c:	a6 c0       	rjmp	.+332    	; 0xae6a <dir_find+0x1da>
    ad1e:	93 ff       	sbrs	r25, 3
    ad20:	04 c0       	rjmp	.+8      	; 0xad2a <dir_find+0x9a>
    ad22:	8f 30       	cpi	r24, 0x0F	; 15
    ad24:	09 f0       	breq	.+2      	; 0xad28 <dir_find+0x98>
    ad26:	a1 c0       	rjmp	.+322    	; 0xae6a <dir_find+0x1da>
    ad28:	03 c0       	rjmp	.+6      	; 0xad30 <dir_find+0xa0>
    ad2a:	8f 30       	cpi	r24, 0x0F	; 15
    ad2c:	09 f0       	breq	.+2      	; 0xad30 <dir_find+0xa0>
    ad2e:	88 c0       	rjmp	.+272    	; 0xae40 <dir_find+0x1b0>
    ad30:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad32:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad34:	87 a1       	ldd	r24, Z+39	; 0x27
    ad36:	86 fd       	sbrc	r24, 6
    ad38:	9f c0       	rjmp	.+318    	; 0xae78 <dir_find+0x1e8>
    ad3a:	d6 fe       	sbrs	r13, 6
    ad3c:	10 c0       	rjmp	.+32     	; 0xad5e <dir_find+0xce>
    ad3e:	f7 01       	movw	r30, r14
    ad40:	05 85       	ldd	r16, Z+13	; 0x0d
    ad42:	fd 2d       	mov	r31, r13
    ad44:	ff 7b       	andi	r31, 0xBF	; 191
    ad46:	df 2e       	mov	r13, r31
    ad48:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad4a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad4c:	86 85       	ldd	r24, Z+14	; 0x0e
    ad4e:	97 85       	ldd	r25, Z+15	; 0x0f
    ad50:	a0 89       	ldd	r26, Z+16	; 0x10
    ad52:	b1 89       	ldd	r27, Z+17	; 0x11
    ad54:	80 a7       	std	Z+40, r24	; 0x28
    ad56:	91 a7       	std	Z+41, r25	; 0x29
    ad58:	a2 a7       	std	Z+42, r26	; 0x2a
    ad5a:	b3 a7       	std	Z+43, r27	; 0x2b
    ad5c:	02 c0       	rjmp	.+4      	; 0xad62 <dir_find+0xd2>
    ad5e:	1d 11       	cpse	r17, r13
    ad60:	8a c0       	rjmp	.+276    	; 0xae76 <dir_find+0x1e6>
    ad62:	f7 01       	movw	r30, r14
    ad64:	c5 84       	ldd	r12, Z+13	; 0x0d
    ad66:	c0 12       	cpse	r12, r16
    ad68:	86 c0       	rjmp	.+268    	; 0xae76 <dir_find+0x1e6>
    ad6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    ad6c:	93 8d       	ldd	r25, Z+27	; 0x1b
    ad6e:	89 2b       	or	r24, r25
    ad70:	09 f0       	breq	.+2      	; 0xad74 <dir_find+0xe4>
    ad72:	91 c0       	rjmp	.+290    	; 0xae96 <dir_find+0x206>
    ad74:	eb 81       	ldd	r30, Y+3	; 0x03
    ad76:	fc 81       	ldd	r31, Y+4	; 0x04
    ad78:	03 84       	ldd	r0, Z+11	; 0x0b
    ad7a:	f4 85       	ldd	r31, Z+12	; 0x0c
    ad7c:	e0 2d       	mov	r30, r0
    ad7e:	fe 83       	std	Y+6, r31	; 0x06
    ad80:	ed 83       	std	Y+5, r30	; 0x05
    ad82:	f7 01       	movw	r30, r14
    ad84:	80 81       	ld	r24, Z
    ad86:	8f 73       	andi	r24, 0x3F	; 63
    ad88:	90 e0       	ldi	r25, 0x00	; 0
    ad8a:	01 97       	sbiw	r24, 0x01	; 1
    ad8c:	fd e0       	ldi	r31, 0x0D	; 13
    ad8e:	f8 9f       	mul	r31, r24
    ad90:	80 01       	movw	r16, r0
    ad92:	f9 9f       	mul	r31, r25
    ad94:	10 0d       	add	r17, r0
    ad96:	11 24       	eor	r1, r1
    ad98:	26 ee       	ldi	r18, 0xE6	; 230
    ad9a:	34 e0       	ldi	r19, 0x04	; 4
    ad9c:	3a 83       	std	Y+2, r19	; 0x02
    ad9e:	29 83       	std	Y+1, r18	; 0x01
    ada0:	81 e0       	ldi	r24, 0x01	; 1
    ada2:	90 e0       	ldi	r25, 0x00	; 0
    ada4:	e9 81       	ldd	r30, Y+1	; 0x01
    ada6:	fa 81       	ldd	r31, Y+2	; 0x02
    ada8:	21 91       	ld	r18, Z+
    adaa:	fa 83       	std	Y+2, r31	; 0x02
    adac:	e9 83       	std	Y+1, r30	; 0x01
    adae:	f7 01       	movw	r30, r14
    adb0:	e2 0f       	add	r30, r18
    adb2:	f1 1d       	adc	r31, r1
    adb4:	20 80       	ld	r2, Z
    adb6:	31 80       	ldd	r3, Z+1	; 0x01
    adb8:	00 97       	sbiw	r24, 0x00	; 0
    adba:	39 f1       	breq	.+78     	; 0xae0a <dir_find+0x17a>
    adbc:	0f 3f       	cpi	r16, 0xFF	; 255
    adbe:	11 05       	cpc	r17, r1
    adc0:	11 f0       	breq	.+4      	; 0xadc6 <dir_find+0x136>
    adc2:	08 f0       	brcs	.+2      	; 0xadc6 <dir_find+0x136>
    adc4:	68 c0       	rjmp	.+208    	; 0xae96 <dir_find+0x206>
    adc6:	b1 01       	movw	r22, r2
    adc8:	80 e0       	ldi	r24, 0x00	; 0
    adca:	90 e0       	ldi	r25, 0x00	; 0
    adcc:	0e 94 f5 6a 	call	0xd5ea	; 0xd5ea <ff_wtoupper>
    add0:	4b 01       	movw	r8, r22
    add2:	5c 01       	movw	r10, r24
    add4:	98 01       	movw	r18, r16
    add6:	2f 5f       	subi	r18, 0xFF	; 255
    add8:	3f 4f       	sbci	r19, 0xFF	; 255
    adda:	38 87       	std	Y+8, r19	; 0x08
    addc:	2f 83       	std	Y+7, r18	; 0x07
    adde:	00 0f       	add	r16, r16
    ade0:	11 1f       	adc	r17, r17
    ade2:	ed 81       	ldd	r30, Y+5	; 0x05
    ade4:	fe 81       	ldd	r31, Y+6	; 0x06
    ade6:	e0 0f       	add	r30, r16
    ade8:	f1 1f       	adc	r31, r17
    adea:	60 81       	ld	r22, Z
    adec:	71 81       	ldd	r23, Z+1	; 0x01
    adee:	80 e0       	ldi	r24, 0x00	; 0
    adf0:	90 e0       	ldi	r25, 0x00	; 0
    adf2:	0e 94 f5 6a 	call	0xd5ea	; 0xd5ea <ff_wtoupper>
    adf6:	86 16       	cp	r8, r22
    adf8:	97 06       	cpc	r9, r23
    adfa:	a8 06       	cpc	r10, r24
    adfc:	b9 06       	cpc	r11, r25
    adfe:	09 f0       	breq	.+2      	; 0xae02 <dir_find+0x172>
    ae00:	4a c0       	rjmp	.+148    	; 0xae96 <dir_find+0x206>
    ae02:	c1 01       	movw	r24, r2
    ae04:	0f 81       	ldd	r16, Y+7	; 0x07
    ae06:	18 85       	ldd	r17, Y+8	; 0x08
    ae08:	05 c0       	rjmp	.+10     	; 0xae14 <dir_find+0x184>
    ae0a:	3f ef       	ldi	r19, 0xFF	; 255
    ae0c:	23 16       	cp	r2, r19
    ae0e:	33 06       	cpc	r3, r19
    ae10:	09 f0       	breq	.+2      	; 0xae14 <dir_find+0x184>
    ae12:	41 c0       	rjmp	.+130    	; 0xae96 <dir_find+0x206>
    ae14:	e9 81       	ldd	r30, Y+1	; 0x01
    ae16:	fa 81       	ldd	r31, Y+2	; 0x02
    ae18:	e3 5f       	subi	r30, 0xF3	; 243
    ae1a:	f4 40       	sbci	r31, 0x04	; 4
    ae1c:	19 f6       	brne	.-122    	; 0xada4 <dir_find+0x114>
    ae1e:	f7 01       	movw	r30, r14
    ae20:	20 81       	ld	r18, Z
    ae22:	26 ff       	sbrs	r18, 6
    ae24:	3a c0       	rjmp	.+116    	; 0xae9a <dir_find+0x20a>
    ae26:	89 2b       	or	r24, r25
    ae28:	c1 f1       	breq	.+112    	; 0xae9a <dir_find+0x20a>
    ae2a:	00 0f       	add	r16, r16
    ae2c:	11 1f       	adc	r17, r17
    ae2e:	ed 81       	ldd	r30, Y+5	; 0x05
    ae30:	fe 81       	ldd	r31, Y+6	; 0x06
    ae32:	e0 0f       	add	r30, r16
    ae34:	f1 1f       	adc	r31, r17
    ae36:	80 81       	ld	r24, Z
    ae38:	91 81       	ldd	r25, Z+1	; 0x01
    ae3a:	89 2b       	or	r24, r25
    ae3c:	71 f1       	breq	.+92     	; 0xae9a <dir_find+0x20a>
    ae3e:	2b c0       	rjmp	.+86     	; 0xae96 <dir_find+0x206>
    ae40:	11 11       	cpse	r17, r1
    ae42:	05 c0       	rjmp	.+10     	; 0xae4e <dir_find+0x1be>
    ae44:	c7 01       	movw	r24, r14
    ae46:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <sum_sfn>
    ae4a:	08 17       	cp	r16, r24
    ae4c:	09 f1       	breq	.+66     	; 0xae90 <dir_find+0x200>
    ae4e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae50:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae52:	87 a1       	ldd	r24, Z+39	; 0x27
    ae54:	80 fd       	sbrc	r24, 0
    ae56:	09 c0       	rjmp	.+18     	; 0xae6a <dir_find+0x1da>
    ae58:	4b e0       	ldi	r20, 0x0B	; 11
    ae5a:	50 e0       	ldi	r21, 0x00	; 0
    ae5c:	69 85       	ldd	r22, Y+9	; 0x09
    ae5e:	7a 85       	ldd	r23, Y+10	; 0x0a
    ae60:	c7 01       	movw	r24, r14
    ae62:	0e 94 63 48 	call	0x90c6	; 0x90c6 <mem_cmp>
    ae66:	89 2b       	or	r24, r25
    ae68:	99 f0       	breq	.+38     	; 0xae90 <dir_find+0x200>
    ae6a:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae6c:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae6e:	40 a6       	std	Z+40, r4	; 0x28
    ae70:	51 a6       	std	Z+41, r5	; 0x29
    ae72:	62 a6       	std	Z+42, r6	; 0x2a
    ae74:	73 a6       	std	Z+43, r7	; 0x2b
    ae76:	1f ef       	ldi	r17, 0xFF	; 255
    ae78:	60 e0       	ldi	r22, 0x00	; 0
    ae7a:	70 e0       	ldi	r23, 0x00	; 0
    ae7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    ae7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    ae80:	d5 dc       	rcall	.-1622   	; 0xa82c <dir_next>
    ae82:	00 97       	sbiw	r24, 0x00	; 0
    ae84:	09 f4       	brne	.+2      	; 0xae88 <dir_find+0x1f8>
    ae86:	2b cf       	rjmp	.-426    	; 0xacde <dir_find+0x4e>
    ae88:	28 2f       	mov	r18, r24
    ae8a:	0b c0       	rjmp	.+22     	; 0xaea2 <dir_find+0x212>
    ae8c:	24 e0       	ldi	r18, 0x04	; 4
    ae8e:	01 c0       	rjmp	.+2      	; 0xae92 <dir_find+0x202>
    ae90:	20 e0       	ldi	r18, 0x00	; 0
    ae92:	90 e0       	ldi	r25, 0x00	; 0
    ae94:	06 c0       	rjmp	.+12     	; 0xaea2 <dir_find+0x212>
    ae96:	0c 2d       	mov	r16, r12
    ae98:	ee cf       	rjmp	.-36     	; 0xae76 <dir_find+0x1e6>
    ae9a:	1f ef       	ldi	r17, 0xFF	; 255
    ae9c:	1d 0d       	add	r17, r13
    ae9e:	0c 2d       	mov	r16, r12
    aea0:	eb cf       	rjmp	.-42     	; 0xae78 <dir_find+0x1e8>
    aea2:	82 2f       	mov	r24, r18
    aea4:	2c 96       	adiw	r28, 0x0c	; 12
    aea6:	e2 e1       	ldi	r30, 0x12	; 18
    aea8:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000aeac <dir_register>:
    aeac:	a6 e1       	ldi	r26, 0x16	; 22
    aeae:	b0 e0       	ldi	r27, 0x00	; 0
    aeb0:	ec e5       	ldi	r30, 0x5C	; 92
    aeb2:	f7 e5       	ldi	r31, 0x57	; 87
    aeb4:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    aeb8:	fc 01       	movw	r30, r24
    aeba:	27 a1       	ldd	r18, Z+39	; 0x27
    aebc:	20 7a       	andi	r18, 0xA0	; 160
    aebe:	09 f0       	breq	.+2      	; 0xaec2 <dir_register+0x16>
    aec0:	53 c1       	rjmp	.+678    	; 0xb168 <dir_register+0x2bc>
    aec2:	c0 80       	ld	r12, Z
    aec4:	d1 80       	ldd	r13, Z+1	; 0x01
    aec6:	f6 01       	movw	r30, r12
    aec8:	a3 85       	ldd	r26, Z+11	; 0x0b
    aeca:	b4 85       	ldd	r27, Z+12	; 0x0c
    aecc:	81 2c       	mov	r8, r1
    aece:	91 2c       	mov	r9, r1
    aed0:	2d 91       	ld	r18, X+
    aed2:	3d 91       	ld	r19, X+
    aed4:	23 2b       	or	r18, r19
    aed6:	21 f0       	breq	.+8      	; 0xaee0 <dir_register+0x34>
    aed8:	ff ef       	ldi	r31, 0xFF	; 255
    aeda:	8f 1a       	sub	r8, r31
    aedc:	9f 0a       	sbc	r9, r31
    aede:	f8 cf       	rjmp	.-16     	; 0xaed0 <dir_register+0x24>
    aee0:	8c 01       	movw	r16, r24
    aee2:	5c 01       	movw	r10, r24
    aee4:	2c e1       	ldi	r18, 0x1C	; 28
    aee6:	a2 0e       	add	r10, r18
    aee8:	b1 1c       	adc	r11, r1
    aeea:	4c e0       	ldi	r20, 0x0C	; 12
    aeec:	50 e0       	ldi	r21, 0x00	; 0
    aeee:	b5 01       	movw	r22, r10
    aef0:	ce 01       	movw	r24, r28
    aef2:	01 96       	adiw	r24, 0x01	; 1
    aef4:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
    aef8:	8c 85       	ldd	r24, Y+12	; 0x0c
    aefa:	80 ff       	sbrs	r24, 0
    aefc:	94 c0       	rjmp	.+296    	; 0xb026 <dir_register+0x17a>
    aefe:	80 e4       	ldi	r24, 0x40	; 64
    af00:	f8 01       	movw	r30, r16
    af02:	87 a3       	std	Z+39, r24	; 0x27
    af04:	41 2c       	mov	r4, r1
    af06:	51 2c       	mov	r5, r1
    af08:	32 01       	movw	r6, r4
    af0a:	43 94       	inc	r4
    af0c:	72 01       	movw	r14, r4
    af0e:	f6 01       	movw	r30, r12
    af10:	23 84       	ldd	r2, Z+11	; 0x0b
    af12:	34 84       	ldd	r3, Z+12	; 0x0c
    af14:	4b e0       	ldi	r20, 0x0B	; 11
    af16:	50 e0       	ldi	r21, 0x00	; 0
    af18:	be 01       	movw	r22, r28
    af1a:	6f 5f       	subi	r22, 0xFF	; 255
    af1c:	7f 4f       	sbci	r23, 0xFF	; 255
    af1e:	c5 01       	movw	r24, r10
    af20:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
    af24:	f6 e0       	ldi	r31, 0x06	; 6
    af26:	4f 16       	cp	r4, r31
    af28:	51 04       	cpc	r5, r1
    af2a:	18 f1       	brcs	.+70     	; 0xaf72 <dir_register+0xc6>
    af2c:	f1 01       	movw	r30, r2
    af2e:	b3 01       	movw	r22, r6
    af30:	a2 01       	movw	r20, r4
    af32:	81 91       	ld	r24, Z+
    af34:	91 91       	ld	r25, Z+
    af36:	00 97       	sbiw	r24, 0x00	; 0
    af38:	d9 f0       	breq	.+54     	; 0xaf70 <dir_register+0xc4>
    af3a:	20 e1       	ldi	r18, 0x10	; 16
    af3c:	30 e0       	ldi	r19, 0x00	; 0
    af3e:	44 0f       	add	r20, r20
    af40:	55 1f       	adc	r21, r21
    af42:	66 1f       	adc	r22, r22
    af44:	77 1f       	adc	r23, r23
    af46:	dc 01       	movw	r26, r24
    af48:	a1 70       	andi	r26, 0x01	; 1
    af4a:	bb 27       	eor	r27, r27
    af4c:	4a 0f       	add	r20, r26
    af4e:	5b 1f       	adc	r21, r27
    af50:	61 1d       	adc	r22, r1
    af52:	71 1d       	adc	r23, r1
    af54:	96 95       	lsr	r25
    af56:	87 95       	ror	r24
    af58:	60 ff       	sbrs	r22, 0
    af5a:	06 c0       	rjmp	.+12     	; 0xaf68 <dir_register+0xbc>
    af5c:	a1 e2       	ldi	r26, 0x21	; 33
    af5e:	4a 27       	eor	r20, r26
    af60:	a0 e1       	ldi	r26, 0x10	; 16
    af62:	5a 27       	eor	r21, r26
    af64:	a1 e0       	ldi	r26, 0x01	; 1
    af66:	6a 27       	eor	r22, r26
    af68:	21 50       	subi	r18, 0x01	; 1
    af6a:	31 09       	sbc	r19, r1
    af6c:	41 f7       	brne	.-48     	; 0xaf3e <dir_register+0x92>
    af6e:	e1 cf       	rjmp	.-62     	; 0xaf32 <dir_register+0x86>
    af70:	7a 01       	movw	r14, r20
    af72:	fe 01       	movw	r30, r28
    af74:	75 96       	adiw	r30, 0x15	; 21
    af76:	27 e0       	ldi	r18, 0x07	; 7
    af78:	30 e0       	ldi	r19, 0x00	; 0
    af7a:	9e 2d       	mov	r25, r14
    af7c:	9f 70       	andi	r25, 0x0F	; 15
    af7e:	80 e3       	ldi	r24, 0x30	; 48
    af80:	89 0f       	add	r24, r25
    af82:	8a 33       	cpi	r24, 0x3A	; 58
    af84:	10 f0       	brcs	.+4      	; 0xaf8a <dir_register+0xde>
    af86:	87 e3       	ldi	r24, 0x37	; 55
    af88:	89 0f       	add	r24, r25
    af8a:	21 50       	subi	r18, 0x01	; 1
    af8c:	31 09       	sbc	r19, r1
    af8e:	82 93       	st	-Z, r24
    af90:	a4 e0       	ldi	r26, 0x04	; 4
    af92:	f6 94       	lsr	r15
    af94:	e7 94       	ror	r14
    af96:	aa 95       	dec	r26
    af98:	e1 f7       	brne	.-8      	; 0xaf92 <dir_register+0xe6>
    af9a:	e1 14       	cp	r14, r1
    af9c:	f1 04       	cpc	r15, r1
    af9e:	69 f7       	brne	.-38     	; 0xaf7a <dir_register+0xce>
    afa0:	ed e0       	ldi	r30, 0x0D	; 13
    afa2:	f0 e0       	ldi	r31, 0x00	; 0
    afa4:	ec 0f       	add	r30, r28
    afa6:	fd 1f       	adc	r31, r29
    afa8:	e2 0f       	add	r30, r18
    afaa:	f3 1f       	adc	r31, r19
    afac:	4e e7       	ldi	r20, 0x7E	; 126
    afae:	40 83       	st	Z, r20
    afb0:	f5 01       	movw	r30, r10
    afb2:	80 e0       	ldi	r24, 0x00	; 0
    afb4:	90 e0       	ldi	r25, 0x00	; 0
    afb6:	28 17       	cp	r18, r24
    afb8:	39 07       	cpc	r19, r25
    afba:	29 f0       	breq	.+10     	; 0xafc6 <dir_register+0x11a>
    afbc:	41 91       	ld	r20, Z+
    afbe:	40 32       	cpi	r20, 0x20	; 32
    afc0:	11 f0       	breq	.+4      	; 0xafc6 <dir_register+0x11a>
    afc2:	01 96       	adiw	r24, 0x01	; 1
    afc4:	f8 cf       	rjmp	.-16     	; 0xafb6 <dir_register+0x10a>
    afc6:	f5 01       	movw	r30, r10
    afc8:	e8 0f       	add	r30, r24
    afca:	f9 1f       	adc	r31, r25
    afcc:	28 30       	cpi	r18, 0x08	; 8
    afce:	31 05       	cpc	r19, r1
    afd0:	50 f4       	brcc	.+20     	; 0xafe6 <dir_register+0x13a>
    afd2:	ad e0       	ldi	r26, 0x0D	; 13
    afd4:	b0 e0       	ldi	r27, 0x00	; 0
    afd6:	ac 0f       	add	r26, r28
    afd8:	bd 1f       	adc	r27, r29
    afda:	a2 0f       	add	r26, r18
    afdc:	b3 1f       	adc	r27, r19
    afde:	8c 91       	ld	r24, X
    afe0:	2f 5f       	subi	r18, 0xFF	; 255
    afe2:	3f 4f       	sbci	r19, 0xFF	; 255
    afe4:	01 c0       	rjmp	.+2      	; 0xafe8 <dir_register+0x13c>
    afe6:	80 e2       	ldi	r24, 0x20	; 32
    afe8:	81 93       	st	Z+, r24
    afea:	cf 01       	movw	r24, r30
    afec:	8a 19       	sub	r24, r10
    afee:	9b 09       	sbc	r25, r11
    aff0:	08 97       	sbiw	r24, 0x08	; 8
    aff2:	60 f3       	brcs	.-40     	; 0xafcc <dir_register+0x120>
    aff4:	c8 01       	movw	r24, r16
    aff6:	4c de       	rcall	.-872    	; 0xac90 <dir_find>
    aff8:	00 97       	sbiw	r24, 0x00	; 0
    affa:	71 f4       	brne	.+28     	; 0xb018 <dir_register+0x16c>
    affc:	8f ef       	ldi	r24, 0xFF	; 255
    affe:	48 1a       	sub	r4, r24
    b000:	58 0a       	sbc	r5, r24
    b002:	68 0a       	sbc	r6, r24
    b004:	78 0a       	sbc	r7, r24
    b006:	94 e6       	ldi	r25, 0x64	; 100
    b008:	49 16       	cp	r4, r25
    b00a:	51 04       	cpc	r5, r1
    b00c:	61 04       	cpc	r6, r1
    b00e:	71 04       	cpc	r7, r1
    b010:	09 f0       	breq	.+2      	; 0xb014 <dir_register+0x168>
    b012:	7c cf       	rjmp	.-264    	; 0xaf0c <dir_register+0x60>
    b014:	27 e0       	ldi	r18, 0x07	; 7
    b016:	a9 c0       	rjmp	.+338    	; 0xb16a <dir_register+0x2be>
    b018:	84 30       	cpi	r24, 0x04	; 4
    b01a:	91 05       	cpc	r25, r1
    b01c:	09 f0       	breq	.+2      	; 0xb020 <dir_register+0x174>
    b01e:	ce c0       	rjmp	.+412    	; 0xb1bc <dir_register+0x310>
    b020:	8c 85       	ldd	r24, Y+12	; 0x0c
    b022:	f8 01       	movw	r30, r16
    b024:	87 a3       	std	Z+39, r24	; 0x27
    b026:	8c 85       	ldd	r24, Y+12	; 0x0c
    b028:	81 ff       	sbrs	r24, 1
    b02a:	0b c0       	rjmp	.+22     	; 0xb042 <dir_register+0x196>
    b02c:	c4 01       	movw	r24, r8
    b02e:	0c 96       	adiw	r24, 0x0c	; 12
    b030:	6d e0       	ldi	r22, 0x0D	; 13
    b032:	70 e0       	ldi	r23, 0x00	; 0
    b034:	0e 94 55 e3 	call	0x1c6aa	; 0x1c6aa <__udivmodhi4>
    b038:	7b 01       	movw	r14, r22
    b03a:	ff ef       	ldi	r31, 0xFF	; 255
    b03c:	ef 1a       	sub	r14, r31
    b03e:	ff 0a       	sbc	r15, r31
    b040:	03 c0       	rjmp	.+6      	; 0xb048 <dir_register+0x19c>
    b042:	ee 24       	eor	r14, r14
    b044:	e3 94       	inc	r14
    b046:	f1 2c       	mov	r15, r1
    b048:	b7 01       	movw	r22, r14
    b04a:	c8 01       	movw	r24, r16
    b04c:	d7 dc       	rcall	.-1618   	; 0xa9fc <dir_alloc>
    b04e:	00 97       	sbiw	r24, 0x00	; 0
    b050:	09 f0       	breq	.+2      	; 0xb054 <dir_register+0x1a8>
    b052:	b4 c0       	rjmp	.+360    	; 0xb1bc <dir_register+0x310>
    b054:	21 e0       	ldi	r18, 0x01	; 1
    b056:	e2 1a       	sub	r14, r18
    b058:	f1 08       	sbc	r15, r1
    b05a:	09 f4       	brne	.+2      	; 0xb05e <dir_register+0x1b2>
    b05c:	88 c0       	rjmp	.+272    	; 0xb16e <dir_register+0x2c2>
    b05e:	f8 01       	movw	r30, r16
    b060:	46 85       	ldd	r20, Z+14	; 0x0e
    b062:	57 85       	ldd	r21, Z+15	; 0x0f
    b064:	60 89       	ldd	r22, Z+16	; 0x10
    b066:	71 89       	ldd	r23, Z+17	; 0x11
    b068:	c7 01       	movw	r24, r14
    b06a:	e5 e0       	ldi	r30, 0x05	; 5
    b06c:	88 0f       	add	r24, r24
    b06e:	99 1f       	adc	r25, r25
    b070:	ea 95       	dec	r30
    b072:	e1 f7       	brne	.-8      	; 0xb06c <dir_register+0x1c0>
    b074:	48 1b       	sub	r20, r24
    b076:	59 0b       	sbc	r21, r25
    b078:	61 09       	sbc	r22, r1
    b07a:	71 09       	sbc	r23, r1
    b07c:	c8 01       	movw	r24, r16
    b07e:	5e d9       	rcall	.-3396   	; 0xa33c <dir_sdi>
    b080:	00 97       	sbiw	r24, 0x00	; 0
    b082:	09 f0       	breq	.+2      	; 0xb086 <dir_register+0x1da>
    b084:	9b c0       	rjmp	.+310    	; 0xb1bc <dir_register+0x310>
    b086:	c5 01       	movw	r24, r10
    b088:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <sum_sfn>
    b08c:	68 2e       	mov	r6, r24
    b08e:	5f e0       	ldi	r21, 0x0F	; 15
    b090:	35 2e       	mov	r3, r21
    b092:	6d e0       	ldi	r22, 0x0D	; 13
    b094:	46 2e       	mov	r4, r22
    b096:	73 ef       	ldi	r23, 0xF3	; 243
    b098:	87 2e       	mov	r8, r23
    b09a:	74 e0       	ldi	r23, 0x04	; 4
    b09c:	97 2e       	mov	r9, r23
    b09e:	55 24       	eor	r5, r5
    b0a0:	53 94       	inc	r5
    b0a2:	f8 01       	movw	r30, r16
    b0a4:	46 89       	ldd	r20, Z+22	; 0x16
    b0a6:	57 89       	ldd	r21, Z+23	; 0x17
    b0a8:	60 8d       	ldd	r22, Z+24	; 0x18
    b0aa:	71 8d       	ldd	r23, Z+25	; 0x19
    b0ac:	c6 01       	movw	r24, r12
    b0ae:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    b0b2:	00 97       	sbiw	r24, 0x00	; 0
    b0b4:	09 f0       	breq	.+2      	; 0xb0b8 <dir_register+0x20c>
    b0b6:	82 c0       	rjmp	.+260    	; 0xb1bc <dir_register+0x310>
    b0b8:	f6 01       	movw	r30, r12
    b0ba:	63 85       	ldd	r22, Z+11	; 0x0b
    b0bc:	74 85       	ldd	r23, Z+12	; 0x0c
    b0be:	f8 01       	movw	r30, r16
    b0c0:	02 8c       	ldd	r0, Z+26	; 0x1a
    b0c2:	f3 8d       	ldd	r31, Z+27	; 0x1b
    b0c4:	e0 2d       	mov	r30, r0
    b0c6:	fe 8b       	std	Y+22, r31	; 0x16
    b0c8:	ed 8b       	std	Y+21, r30	; 0x15
    b0ca:	7e 2c       	mov	r7, r14
    b0cc:	65 86       	std	Z+13, r6	; 0x0d
    b0ce:	33 86       	std	Z+11, r3	; 0x0b
    b0d0:	14 86       	std	Z+12, r1	; 0x0c
    b0d2:	12 8e       	std	Z+26, r1	; 0x1a
    b0d4:	13 8e       	std	Z+27, r1	; 0x1b
    b0d6:	97 01       	movw	r18, r14
    b0d8:	33 27       	eor	r19, r19
    b0da:	21 50       	subi	r18, 0x01	; 1
    b0dc:	31 09       	sbc	r19, r1
    b0de:	42 9e       	mul	r4, r18
    b0e0:	c0 01       	movw	r24, r0
    b0e2:	43 9e       	mul	r4, r19
    b0e4:	90 0d       	add	r25, r0
    b0e6:	11 24       	eor	r1, r1
    b0e8:	a6 ee       	ldi	r26, 0xE6	; 230
    b0ea:	b4 e0       	ldi	r27, 0x04	; 4
    b0ec:	20 e0       	ldi	r18, 0x00	; 0
    b0ee:	30 e0       	ldi	r19, 0x00	; 0
    b0f0:	2f 3f       	cpi	r18, 0xFF	; 255
    b0f2:	ff ef       	ldi	r31, 0xFF	; 255
    b0f4:	3f 07       	cpc	r19, r31
    b0f6:	49 f0       	breq	.+18     	; 0xb10a <dir_register+0x25e>
    b0f8:	9c 01       	movw	r18, r24
    b0fa:	22 0f       	add	r18, r18
    b0fc:	33 1f       	adc	r19, r19
    b0fe:	26 0f       	add	r18, r22
    b100:	37 1f       	adc	r19, r23
    b102:	f9 01       	movw	r30, r18
    b104:	20 81       	ld	r18, Z
    b106:	31 81       	ldd	r19, Z+1	; 0x01
    b108:	01 96       	adiw	r24, 0x01	; 1
    b10a:	4d 91       	ld	r20, X+
    b10c:	ed 89       	ldd	r30, Y+21	; 0x15
    b10e:	fe 89       	ldd	r31, Y+22	; 0x16
    b110:	e4 0f       	add	r30, r20
    b112:	f1 1d       	adc	r31, r1
    b114:	20 83       	st	Z, r18
    b116:	31 83       	std	Z+1, r19	; 0x01
    b118:	21 15       	cp	r18, r1
    b11a:	31 05       	cpc	r19, r1
    b11c:	11 f4       	brne	.+4      	; 0xb122 <dir_register+0x276>
    b11e:	2f ef       	ldi	r18, 0xFF	; 255
    b120:	3f ef       	ldi	r19, 0xFF	; 255
    b122:	8a 16       	cp	r8, r26
    b124:	9b 06       	cpc	r9, r27
    b126:	21 f7       	brne	.-56     	; 0xb0f0 <dir_register+0x244>
    b128:	2f 3f       	cpi	r18, 0xFF	; 255
    b12a:	3f 4f       	sbci	r19, 0xFF	; 255
    b12c:	49 f0       	breq	.+18     	; 0xb140 <dir_register+0x294>
    b12e:	88 0f       	add	r24, r24
    b130:	99 1f       	adc	r25, r25
    b132:	db 01       	movw	r26, r22
    b134:	a8 0f       	add	r26, r24
    b136:	b9 1f       	adc	r27, r25
    b138:	8d 91       	ld	r24, X+
    b13a:	9c 91       	ld	r25, X
    b13c:	89 2b       	or	r24, r25
    b13e:	19 f4       	brne	.+6      	; 0xb146 <dir_register+0x29a>
    b140:	27 2d       	mov	r18, r7
    b142:	20 64       	ori	r18, 0x40	; 64
    b144:	72 2e       	mov	r7, r18
    b146:	ed 89       	ldd	r30, Y+21	; 0x15
    b148:	fe 89       	ldd	r31, Y+22	; 0x16
    b14a:	70 82       	st	Z, r7
    b14c:	f6 01       	movw	r30, r12
    b14e:	53 82       	std	Z+3, r5	; 0x03
    b150:	60 e0       	ldi	r22, 0x00	; 0
    b152:	70 e0       	ldi	r23, 0x00	; 0
    b154:	c8 01       	movw	r24, r16
    b156:	6a db       	rcall	.-2348   	; 0xa82c <dir_next>
    b158:	00 97       	sbiw	r24, 0x00	; 0
    b15a:	81 f5       	brne	.+96     	; 0xb1bc <dir_register+0x310>
    b15c:	f1 e0       	ldi	r31, 0x01	; 1
    b15e:	ef 1a       	sub	r14, r31
    b160:	f1 08       	sbc	r15, r1
    b162:	09 f0       	breq	.+2      	; 0xb166 <dir_register+0x2ba>
    b164:	9e cf       	rjmp	.-196    	; 0xb0a2 <dir_register+0x1f6>
    b166:	03 c0       	rjmp	.+6      	; 0xb16e <dir_register+0x2c2>
    b168:	26 e0       	ldi	r18, 0x06	; 6
    b16a:	90 e0       	ldi	r25, 0x00	; 0
    b16c:	28 c0       	rjmp	.+80     	; 0xb1be <dir_register+0x312>
    b16e:	f8 01       	movw	r30, r16
    b170:	46 89       	ldd	r20, Z+22	; 0x16
    b172:	57 89       	ldd	r21, Z+23	; 0x17
    b174:	60 8d       	ldd	r22, Z+24	; 0x18
    b176:	71 8d       	ldd	r23, Z+25	; 0x19
    b178:	c6 01       	movw	r24, r12
    b17a:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    b17e:	00 97       	sbiw	r24, 0x00	; 0
    b180:	e9 f4       	brne	.+58     	; 0xb1bc <dir_register+0x310>
    b182:	40 e2       	ldi	r20, 0x20	; 32
    b184:	50 e0       	ldi	r21, 0x00	; 0
    b186:	60 e0       	ldi	r22, 0x00	; 0
    b188:	70 e0       	ldi	r23, 0x00	; 0
    b18a:	f8 01       	movw	r30, r16
    b18c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b18e:	93 8d       	ldd	r25, Z+27	; 0x1b
    b190:	0e 94 5a 48 	call	0x90b4	; 0x90b4 <mem_set>
    b194:	4b e0       	ldi	r20, 0x0B	; 11
    b196:	50 e0       	ldi	r21, 0x00	; 0
    b198:	b5 01       	movw	r22, r10
    b19a:	f8 01       	movw	r30, r16
    b19c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b19e:	93 8d       	ldd	r25, Z+27	; 0x1b
    b1a0:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
    b1a4:	f8 01       	movw	r30, r16
    b1a6:	22 8d       	ldd	r18, Z+26	; 0x1a
    b1a8:	33 8d       	ldd	r19, Z+27	; 0x1b
    b1aa:	87 a1       	ldd	r24, Z+39	; 0x27
    b1ac:	88 71       	andi	r24, 0x18	; 24
    b1ae:	f9 01       	movw	r30, r18
    b1b0:	84 87       	std	Z+12, r24	; 0x0c
    b1b2:	81 e0       	ldi	r24, 0x01	; 1
    b1b4:	f6 01       	movw	r30, r12
    b1b6:	83 83       	std	Z+3, r24	; 0x03
    b1b8:	20 e0       	ldi	r18, 0x00	; 0
    b1ba:	d7 cf       	rjmp	.-82     	; 0xb16a <dir_register+0x2be>
    b1bc:	28 2f       	mov	r18, r24
    b1be:	82 2f       	mov	r24, r18
    b1c0:	66 96       	adiw	r28, 0x16	; 22
    b1c2:	e2 e1       	ldi	r30, 0x12	; 18
    b1c4:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000b1c8 <follow_path>:
    b1c8:	aa e0       	ldi	r26, 0x0A	; 10
    b1ca:	b0 e0       	ldi	r27, 0x00	; 0
    b1cc:	ea ee       	ldi	r30, 0xEA	; 234
    b1ce:	f8 e5       	ldi	r31, 0x58	; 88
    b1d0:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    b1d4:	7c 01       	movw	r14, r24
    b1d6:	3b 01       	movw	r6, r22
    b1d8:	dc 01       	movw	r26, r24
    b1da:	0d 90       	ld	r0, X+
    b1dc:	bc 91       	ld	r27, X
    b1de:	a0 2d       	mov	r26, r0
    b1e0:	be 83       	std	Y+6, r27	; 0x06
    b1e2:	ad 83       	std	Y+5, r26	; 0x05
    b1e4:	fb 01       	movw	r30, r22
    b1e6:	80 81       	ld	r24, Z
    b1e8:	8f 32       	cpi	r24, 0x2F	; 47
    b1ea:	11 f0       	breq	.+4      	; 0xb1f0 <follow_path+0x28>
    b1ec:	8c 35       	cpi	r24, 0x5C	; 92
    b1ee:	11 f4       	brne	.+4      	; 0xb1f4 <follow_path+0x2c>
    b1f0:	93 01       	movw	r18, r6
    b1f2:	0c c0       	rjmp	.+24     	; 0xb20c <follow_path+0x44>
    b1f4:	ed 81       	ldd	r30, Y+5	; 0x05
    b1f6:	fe 81       	ldd	r31, Y+6	; 0x06
    b1f8:	85 89       	ldd	r24, Z+21	; 0x15
    b1fa:	96 89       	ldd	r25, Z+22	; 0x16
    b1fc:	a7 89       	ldd	r26, Z+23	; 0x17
    b1fe:	b0 8d       	ldd	r27, Z+24	; 0x18
    b200:	f7 01       	movw	r30, r14
    b202:	86 83       	std	Z+6, r24	; 0x06
    b204:	97 83       	std	Z+7, r25	; 0x07
    b206:	a0 87       	std	Z+8, r26	; 0x08
    b208:	b1 87       	std	Z+9, r27	; 0x09
    b20a:	0e c0       	rjmp	.+28     	; 0xb228 <follow_path+0x60>
    b20c:	39 01       	movw	r6, r18
    b20e:	d9 01       	movw	r26, r18
    b210:	8c 91       	ld	r24, X
    b212:	2f 5f       	subi	r18, 0xFF	; 255
    b214:	3f 4f       	sbci	r19, 0xFF	; 255
    b216:	8f 32       	cpi	r24, 0x2F	; 47
    b218:	c9 f3       	breq	.-14     	; 0xb20c <follow_path+0x44>
    b21a:	8c 35       	cpi	r24, 0x5C	; 92
    b21c:	b9 f3       	breq	.-18     	; 0xb20c <follow_path+0x44>
    b21e:	f7 01       	movw	r30, r14
    b220:	16 82       	std	Z+6, r1	; 0x06
    b222:	17 82       	std	Z+7, r1	; 0x07
    b224:	10 86       	std	Z+8, r1	; 0x08
    b226:	11 86       	std	Z+9, r1	; 0x09
    b228:	d3 01       	movw	r26, r6
    b22a:	8c 91       	ld	r24, X
    b22c:	80 32       	cpi	r24, 0x20	; 32
    b22e:	58 f0       	brcs	.+22     	; 0xb246 <follow_path+0x7e>
    b230:	f7 01       	movw	r30, r14
    b232:	7c 96       	adiw	r30, 0x1c	; 28
    b234:	f8 87       	std	Y+8, r31	; 0x08
    b236:	ef 83       	std	Y+7, r30	; 0x07
    b238:	2d 81       	ldd	r18, Y+5	; 0x05
    b23a:	3e 81       	ldd	r19, Y+6	; 0x06
    b23c:	2b 5c       	subi	r18, 0xCB	; 203
    b23e:	3f 4f       	sbci	r19, 0xFF	; 255
    b240:	3a 87       	std	Y+10, r19	; 0x0a
    b242:	29 87       	std	Y+9, r18	; 0x09
    b244:	96 c0       	rjmp	.+300    	; 0xb372 <follow_path+0x1aa>
    b246:	80 e8       	ldi	r24, 0x80	; 128
    b248:	f7 01       	movw	r30, r14
    b24a:	87 a3       	std	Z+39, r24	; 0x27
    b24c:	40 e0       	ldi	r20, 0x00	; 0
    b24e:	50 e0       	ldi	r21, 0x00	; 0
    b250:	ba 01       	movw	r22, r20
    b252:	c7 01       	movw	r24, r14
    b254:	73 d8       	rcall	.-3866   	; 0xa33c <dir_sdi>
    b256:	e5 c1       	rjmp	.+970    	; 0xb622 <follow_path+0x45a>
    b258:	6c 35       	cpi	r22, 0x5C	; 92
    b25a:	71 05       	cpc	r23, r1
    b25c:	b9 f1       	breq	.+110    	; 0xb2cc <follow_path+0x104>
    b25e:	60 38       	cpi	r22, 0x80	; 128
    b260:	71 05       	cpc	r23, r1
    b262:	28 f4       	brcc	.+10     	; 0xb26e <follow_path+0xa6>
    b264:	e2 e2       	ldi	r30, 0x22	; 34
    b266:	f4 e0       	ldi	r31, 0x04	; 4
    b268:	41 91       	ld	r20, Z+
    b26a:	41 11       	cpse	r20, r1
    b26c:	8c c0       	rjmp	.+280    	; 0xb386 <follow_path+0x1be>
    b26e:	0f 3f       	cpi	r16, 0xFF	; 255
    b270:	11 05       	cpc	r17, r1
    b272:	08 f0       	brcs	.+2      	; 0xb276 <follow_path+0xae>
    b274:	b9 c1       	rjmp	.+882    	; 0xb5e8 <follow_path+0x420>
    b276:	f8 01       	movw	r30, r16
    b278:	ee 0f       	add	r30, r30
    b27a:	ff 1f       	adc	r31, r31
    b27c:	ea 0d       	add	r30, r10
    b27e:	fb 1d       	adc	r31, r11
    b280:	71 83       	std	Z+1, r23	; 0x01
    b282:	60 83       	st	Z, r22
    b284:	0f 5f       	subi	r16, 0xFF	; 255
    b286:	1f 4f       	sbci	r17, 0xFF	; 255
    b288:	ce 01       	movw	r24, r28
    b28a:	01 96       	adiw	r24, 0x01	; 1
    b28c:	0e 94 72 48 	call	0x90e4	; 0x90e4 <tchar2uni>
    b290:	6f 3f       	cpi	r22, 0xFF	; 255
    b292:	bf ef       	ldi	r27, 0xFF	; 255
    b294:	7b 07       	cpc	r23, r27
    b296:	8b 07       	cpc	r24, r27
    b298:	9b 07       	cpc	r25, r27
    b29a:	09 f4       	brne	.+2      	; 0xb29e <follow_path+0xd6>
    b29c:	a5 c1       	rjmp	.+842    	; 0xb5e8 <follow_path+0x420>
    b29e:	61 15       	cp	r22, r1
    b2a0:	71 05       	cpc	r23, r1
    b2a2:	e1 e0       	ldi	r30, 0x01	; 1
    b2a4:	8e 07       	cpc	r24, r30
    b2a6:	91 05       	cpc	r25, r1
    b2a8:	48 f0       	brcs	.+18     	; 0xb2bc <follow_path+0xf4>
    b2aa:	f8 01       	movw	r30, r16
    b2ac:	ee 0f       	add	r30, r30
    b2ae:	ff 1f       	adc	r31, r31
    b2b0:	ea 0d       	add	r30, r10
    b2b2:	fb 1d       	adc	r31, r11
    b2b4:	91 83       	std	Z+1, r25	; 0x01
    b2b6:	80 83       	st	Z, r24
    b2b8:	0f 5f       	subi	r16, 0xFF	; 255
    b2ba:	1f 4f       	sbci	r17, 0xFF	; 255
    b2bc:	9b 01       	movw	r18, r22
    b2be:	60 32       	cpi	r22, 0x20	; 32
    b2c0:	71 05       	cpc	r23, r1
    b2c2:	08 f4       	brcc	.+2      	; 0xb2c6 <follow_path+0xfe>
    b2c4:	6a c0       	rjmp	.+212    	; 0xb39a <follow_path+0x1d2>
    b2c6:	6f 32       	cpi	r22, 0x2F	; 47
    b2c8:	71 05       	cpc	r23, r1
    b2ca:	31 f6       	brne	.-116    	; 0xb258 <follow_path+0x90>
    b2cc:	e9 81       	ldd	r30, Y+1	; 0x01
    b2ce:	fa 81       	ldd	r31, Y+2	; 0x02
    b2d0:	80 81       	ld	r24, Z
    b2d2:	8f 32       	cpi	r24, 0x2F	; 47
    b2d4:	09 f4       	brne	.+2      	; 0xb2d8 <follow_path+0x110>
    b2d6:	5d c0       	rjmp	.+186    	; 0xb392 <follow_path+0x1ca>
    b2d8:	8c 35       	cpi	r24, 0x5C	; 92
    b2da:	09 f4       	brne	.+2      	; 0xb2de <follow_path+0x116>
    b2dc:	5a c0       	rjmp	.+180    	; 0xb392 <follow_path+0x1ca>
    b2de:	1b 82       	std	Y+3, r1	; 0x03
    b2e0:	69 80       	ldd	r6, Y+1	; 0x01
    b2e2:	7a 80       	ldd	r7, Y+2	; 0x02
    b2e4:	98 01       	movw	r18, r16
    b2e6:	22 0f       	add	r18, r18
    b2e8:	33 1f       	adc	r19, r19
    b2ea:	01 30       	cpi	r16, 0x01	; 1
    b2ec:	11 05       	cpc	r17, r1
    b2ee:	09 f0       	breq	.+2      	; 0xb2f2 <follow_path+0x12a>
    b2f0:	57 c0       	rjmp	.+174    	; 0xb3a0 <follow_path+0x1d8>
    b2f2:	d5 01       	movw	r26, r10
    b2f4:	8d 91       	ld	r24, X+
    b2f6:	9c 91       	ld	r25, X
    b2f8:	8e 97       	sbiw	r24, 0x2e	; 46
    b2fa:	09 f0       	breq	.+2      	; 0xb2fe <follow_path+0x136>
    b2fc:	5c c0       	rjmp	.+184    	; 0xb3b6 <follow_path+0x1ee>
    b2fe:	f9 01       	movw	r30, r18
    b300:	ea 0d       	add	r30, r10
    b302:	fb 1d       	adc	r31, r11
    b304:	11 82       	std	Z+1, r1	; 0x01
    b306:	10 82       	st	Z, r1
    b308:	f7 01       	movw	r30, r14
    b30a:	7c 96       	adiw	r30, 0x1c	; 28
    b30c:	80 e0       	ldi	r24, 0x00	; 0
    b30e:	90 e0       	ldi	r25, 0x00	; 0
    b310:	80 17       	cp	r24, r16
    b312:	91 07       	cpc	r25, r17
    b314:	08 f0       	brcs	.+2      	; 0xb318 <follow_path+0x150>
    b316:	53 c0       	rjmp	.+166    	; 0xb3be <follow_path+0x1f6>
    b318:	2e e2       	ldi	r18, 0x2E	; 46
    b31a:	21 93       	st	Z+, r18
    b31c:	01 96       	adiw	r24, 0x01	; 1
    b31e:	8b 30       	cpi	r24, 0x0B	; 11
    b320:	91 05       	cpc	r25, r1
    b322:	b1 f7       	brne	.-20     	; 0xb310 <follow_path+0x148>
    b324:	8b 81       	ldd	r24, Y+3	; 0x03
    b326:	80 62       	ori	r24, 0x20	; 32
    b328:	f7 01       	movw	r30, r14
    b32a:	87 a3       	std	Z+39, r24	; 0x27
    b32c:	80 e0       	ldi	r24, 0x00	; 0
    b32e:	90 e0       	ldi	r25, 0x00	; 0
    b330:	00 97       	sbiw	r24, 0x00	; 0
    b332:	09 f0       	breq	.+2      	; 0xb336 <follow_path+0x16e>
    b334:	76 c1       	rjmp	.+748    	; 0xb622 <follow_path+0x45a>
    b336:	c7 01       	movw	r24, r14
    b338:	ab dc       	rcall	.-1706   	; 0xac90 <dir_find>
    b33a:	f7 01       	movw	r30, r14
    b33c:	27 a1       	ldd	r18, Z+39	; 0x27
    b33e:	00 97       	sbiw	r24, 0x00	; 0
    b340:	09 f0       	breq	.+2      	; 0xb344 <follow_path+0x17c>
    b342:	55 c1       	rjmp	.+682    	; 0xb5ee <follow_path+0x426>
    b344:	22 fd       	sbrc	r18, 2
    b346:	6d c1       	rjmp	.+730    	; 0xb622 <follow_path+0x45a>
    b348:	f7 01       	movw	r30, r14
    b34a:	84 81       	ldd	r24, Z+4	; 0x04
    b34c:	84 ff       	sbrs	r24, 4
    b34e:	60 c1       	rjmp	.+704    	; 0xb610 <follow_path+0x448>
    b350:	66 85       	ldd	r22, Z+14	; 0x0e
    b352:	77 85       	ldd	r23, Z+15	; 0x0f
    b354:	71 70       	andi	r23, 0x01	; 1
    b356:	29 85       	ldd	r18, Y+9	; 0x09
    b358:	3a 85       	ldd	r19, Y+10	; 0x0a
    b35a:	62 0f       	add	r22, r18
    b35c:	73 1f       	adc	r23, r19
    b35e:	ad 81       	ldd	r26, Y+5	; 0x05
    b360:	be 81       	ldd	r27, Y+6	; 0x06
    b362:	8c 91       	ld	r24, X
    b364:	0e 94 8b 4b 	call	0x9716	; 0x9716 <ld_clust.isra.4>
    b368:	f7 01       	movw	r30, r14
    b36a:	66 83       	std	Z+6, r22	; 0x06
    b36c:	77 83       	std	Z+7, r23	; 0x07
    b36e:	80 87       	std	Z+8, r24	; 0x08
    b370:	91 87       	std	Z+9, r25	; 0x09
    b372:	7a 82       	std	Y+2, r7	; 0x02
    b374:	69 82       	std	Y+1, r6	; 0x01
    b376:	d7 01       	movw	r26, r14
    b378:	ed 91       	ld	r30, X+
    b37a:	fc 91       	ld	r31, X
    b37c:	a3 84       	ldd	r10, Z+11	; 0x0b
    b37e:	b4 84       	ldd	r11, Z+12	; 0x0c
    b380:	00 e0       	ldi	r16, 0x00	; 0
    b382:	10 e0       	ldi	r17, 0x00	; 0
    b384:	81 cf       	rjmp	.-254    	; 0xb288 <follow_path+0xc0>
    b386:	50 e0       	ldi	r21, 0x00	; 0
    b388:	24 17       	cp	r18, r20
    b38a:	35 07       	cpc	r19, r21
    b38c:	09 f0       	breq	.+2      	; 0xb390 <follow_path+0x1c8>
    b38e:	6c cf       	rjmp	.-296    	; 0xb268 <follow_path+0xa0>
    b390:	2b c1       	rjmp	.+598    	; 0xb5e8 <follow_path+0x420>
    b392:	31 96       	adiw	r30, 0x01	; 1
    b394:	fa 83       	std	Y+2, r31	; 0x02
    b396:	e9 83       	std	Y+1, r30	; 0x01
    b398:	99 cf       	rjmp	.-206    	; 0xb2cc <follow_path+0x104>
    b39a:	f4 e0       	ldi	r31, 0x04	; 4
    b39c:	fb 83       	std	Y+3, r31	; 0x03
    b39e:	a0 cf       	rjmp	.-192    	; 0xb2e0 <follow_path+0x118>
    b3a0:	02 30       	cpi	r16, 0x02	; 2
    b3a2:	11 05       	cpc	r17, r1
    b3a4:	41 f4       	brne	.+16     	; 0xb3b6 <follow_path+0x1ee>
    b3a6:	f5 01       	movw	r30, r10
    b3a8:	82 81       	ldd	r24, Z+2	; 0x02
    b3aa:	93 81       	ldd	r25, Z+3	; 0x03
    b3ac:	8e 97       	sbiw	r24, 0x2e	; 46
    b3ae:	19 f4       	brne	.+6      	; 0xb3b6 <follow_path+0x1ee>
    b3b0:	80 81       	ld	r24, Z
    b3b2:	91 81       	ldd	r25, Z+1	; 0x01
    b3b4:	a1 cf       	rjmp	.-190    	; 0xb2f8 <follow_path+0x130>
    b3b6:	f9 01       	movw	r30, r18
    b3b8:	ea 0d       	add	r30, r10
    b3ba:	fb 1d       	adc	r31, r11
    b3bc:	09 c0       	rjmp	.+18     	; 0xb3d0 <follow_path+0x208>
    b3be:	20 e2       	ldi	r18, 0x20	; 32
    b3c0:	ac cf       	rjmp	.-168    	; 0xb31a <follow_path+0x152>
    b3c2:	92 91       	ld	r25, -Z
    b3c4:	82 91       	ld	r24, -Z
    b3c6:	80 32       	cpi	r24, 0x20	; 32
    b3c8:	91 05       	cpc	r25, r1
    b3ca:	31 f4       	brne	.+12     	; 0xb3d8 <follow_path+0x210>
    b3cc:	01 50       	subi	r16, 0x01	; 1
    b3ce:	11 09       	sbc	r17, r1
    b3d0:	01 15       	cp	r16, r1
    b3d2:	11 05       	cpc	r17, r1
    b3d4:	b1 f7       	brne	.-20     	; 0xb3c2 <follow_path+0x1fa>
    b3d6:	02 c0       	rjmp	.+4      	; 0xb3dc <follow_path+0x214>
    b3d8:	8e 97       	sbiw	r24, 0x2e	; 46
    b3da:	c1 f3       	breq	.-16     	; 0xb3cc <follow_path+0x204>
    b3dc:	f8 01       	movw	r30, r16
    b3de:	ee 0f       	add	r30, r30
    b3e0:	ff 1f       	adc	r31, r31
    b3e2:	ea 0d       	add	r30, r10
    b3e4:	fb 1d       	adc	r31, r11
    b3e6:	11 82       	std	Z+1, r1	; 0x01
    b3e8:	10 82       	st	Z, r1
    b3ea:	01 15       	cp	r16, r1
    b3ec:	11 05       	cpc	r17, r1
    b3ee:	09 f4       	brne	.+2      	; 0xb3f2 <follow_path+0x22a>
    b3f0:	fb c0       	rjmp	.+502    	; 0xb5e8 <follow_path+0x420>
    b3f2:	d5 01       	movw	r26, r10
    b3f4:	41 2c       	mov	r4, r1
    b3f6:	51 2c       	mov	r5, r1
    b3f8:	8d 91       	ld	r24, X+
    b3fa:	9d 91       	ld	r25, X+
    b3fc:	80 32       	cpi	r24, 0x20	; 32
    b3fe:	91 05       	cpc	r25, r1
    b400:	21 f4       	brne	.+8      	; 0xb40a <follow_path+0x242>
    b402:	2f ef       	ldi	r18, 0xFF	; 255
    b404:	42 1a       	sub	r4, r18
    b406:	52 0a       	sbc	r5, r18
    b408:	f7 cf       	rjmp	.-18     	; 0xb3f8 <follow_path+0x230>
    b40a:	41 14       	cp	r4, r1
    b40c:	51 04       	cpc	r5, r1
    b40e:	11 f4       	brne	.+4      	; 0xb414 <follow_path+0x24c>
    b410:	8e 97       	sbiw	r24, 0x2e	; 46
    b412:	39 f4       	brne	.+14     	; 0xb422 <follow_path+0x25a>
    b414:	3b 81       	ldd	r19, Y+3	; 0x03
    b416:	33 60       	ori	r19, 0x03	; 3
    b418:	3b 83       	std	Y+3, r19	; 0x03
    b41a:	03 c0       	rjmp	.+6      	; 0xb422 <follow_path+0x25a>
    b41c:	01 50       	subi	r16, 0x01	; 1
    b41e:	11 09       	sbc	r17, r1
    b420:	21 f0       	breq	.+8      	; 0xb42a <follow_path+0x262>
    b422:	92 91       	ld	r25, -Z
    b424:	82 91       	ld	r24, -Z
    b426:	8e 97       	sbiw	r24, 0x2e	; 46
    b428:	c9 f7       	brne	.-14     	; 0xb41c <follow_path+0x254>
    b42a:	4b e0       	ldi	r20, 0x0B	; 11
    b42c:	50 e0       	ldi	r21, 0x00	; 0
    b42e:	60 e2       	ldi	r22, 0x20	; 32
    b430:	70 e0       	ldi	r23, 0x00	; 0
    b432:	8f 81       	ldd	r24, Y+7	; 0x07
    b434:	98 85       	ldd	r25, Y+8	; 0x08
    b436:	0e 94 5a 48 	call	0x90b4	; 0x90b4 <mem_set>
    b43a:	48 e0       	ldi	r20, 0x08	; 8
    b43c:	84 2e       	mov	r8, r20
    b43e:	91 2c       	mov	r9, r1
    b440:	c1 2c       	mov	r12, r1
    b442:	d1 2c       	mov	r13, r1
    b444:	1c 82       	std	Y+4, r1	; 0x04
    b446:	12 01       	movw	r2, r4
    b448:	8f ef       	ldi	r24, 0xFF	; 255
    b44a:	28 1a       	sub	r2, r24
    b44c:	38 0a       	sbc	r3, r24
    b44e:	44 0c       	add	r4, r4
    b450:	55 1c       	adc	r5, r5
    b452:	f5 01       	movw	r30, r10
    b454:	e4 0d       	add	r30, r4
    b456:	f5 1d       	adc	r31, r5
    b458:	80 81       	ld	r24, Z
    b45a:	91 81       	ldd	r25, Z+1	; 0x01
    b45c:	00 97       	sbiw	r24, 0x00	; 0
    b45e:	09 f4       	brne	.+2      	; 0xb462 <follow_path+0x29a>
    b460:	98 c0       	rjmp	.+304    	; 0xb592 <follow_path+0x3ca>
    b462:	80 32       	cpi	r24, 0x20	; 32
    b464:	91 05       	cpc	r25, r1
    b466:	31 f0       	breq	.+12     	; 0xb474 <follow_path+0x2ac>
    b468:	8e 32       	cpi	r24, 0x2E	; 46
    b46a:	91 05       	cpc	r25, r1
    b46c:	41 f4       	brne	.+16     	; 0xb47e <follow_path+0x2b6>
    b46e:	20 16       	cp	r2, r16
    b470:	31 06       	cpc	r3, r17
    b472:	61 f0       	breq	.+24     	; 0xb48c <follow_path+0x2c4>
    b474:	9b 81       	ldd	r25, Y+3	; 0x03
    b476:	93 60       	ori	r25, 0x03	; 3
    b478:	9b 83       	std	Y+3, r25	; 0x03
    b47a:	21 01       	movw	r4, r2
    b47c:	e4 cf       	rjmp	.-56     	; 0xb446 <follow_path+0x27e>
    b47e:	c8 14       	cp	r12, r8
    b480:	d9 04       	cpc	r13, r9
    b482:	40 f4       	brcc	.+16     	; 0xb494 <follow_path+0x2cc>
    b484:	20 16       	cp	r2, r16
    b486:	31 06       	cpc	r3, r17
    b488:	31 f5       	brne	.+76     	; 0xb4d6 <follow_path+0x30e>
    b48a:	c5 c0       	rjmp	.+394    	; 0xb616 <follow_path+0x44e>
    b48c:	c8 14       	cp	r12, r8
    b48e:	d9 04       	cpc	r13, r9
    b490:	08 f4       	brcc	.+2      	; 0xb494 <follow_path+0x2cc>
    b492:	c1 c0       	rjmp	.+386    	; 0xb616 <follow_path+0x44e>
    b494:	ab e0       	ldi	r26, 0x0B	; 11
    b496:	8a 16       	cp	r8, r26
    b498:	91 04       	cpc	r9, r1
    b49a:	39 f4       	brne	.+14     	; 0xb4aa <follow_path+0x2e2>
    b49c:	bb 81       	ldd	r27, Y+3	; 0x03
    b49e:	b3 60       	ori	r27, 0x03	; 3
    b4a0:	bb 83       	std	Y+3, r27	; 0x03
    b4a2:	2b e0       	ldi	r18, 0x0B	; 11
    b4a4:	82 2e       	mov	r8, r18
    b4a6:	91 2c       	mov	r9, r1
    b4a8:	74 c0       	rjmp	.+232    	; 0xb592 <follow_path+0x3ca>
    b4aa:	20 16       	cp	r2, r16
    b4ac:	31 06       	cpc	r3, r17
    b4ae:	39 f0       	breq	.+14     	; 0xb4be <follow_path+0x2f6>
    b4b0:	eb 81       	ldd	r30, Y+3	; 0x03
    b4b2:	e3 60       	ori	r30, 0x03	; 3
    b4b4:	eb 83       	std	Y+3, r30	; 0x03
    b4b6:	02 15       	cp	r16, r2
    b4b8:	13 05       	cpc	r17, r3
    b4ba:	08 f4       	brcc	.+2      	; 0xb4be <follow_path+0x2f6>
    b4bc:	6a c0       	rjmp	.+212    	; 0xb592 <follow_path+0x3ca>
    b4be:	fc 81       	ldd	r31, Y+4	; 0x04
    b4c0:	ff 0f       	add	r31, r31
    b4c2:	ff 0f       	add	r31, r31
    b4c4:	fc 83       	std	Y+4, r31	; 0x04
    b4c6:	18 01       	movw	r2, r16
    b4c8:	8b e0       	ldi	r24, 0x0B	; 11
    b4ca:	88 2e       	mov	r8, r24
    b4cc:	91 2c       	mov	r9, r1
    b4ce:	98 e0       	ldi	r25, 0x08	; 8
    b4d0:	c9 2e       	mov	r12, r25
    b4d2:	d1 2c       	mov	r13, r1
    b4d4:	d2 cf       	rjmp	.-92     	; 0xb47a <follow_path+0x2b2>
    b4d6:	80 38       	cpi	r24, 0x80	; 128
    b4d8:	91 05       	cpc	r25, r1
    b4da:	78 f1       	brcs	.+94     	; 0xb53a <follow_path+0x372>
    b4dc:	2b 81       	ldd	r18, Y+3	; 0x03
    b4de:	22 60       	ori	r18, 0x02	; 2
    b4e0:	52 2e       	mov	r5, r18
    b4e2:	bc 01       	movw	r22, r24
    b4e4:	80 e0       	ldi	r24, 0x00	; 0
    b4e6:	90 e0       	ldi	r25, 0x00	; 0
    b4e8:	45 eb       	ldi	r20, 0xB5	; 181
    b4ea:	51 e0       	ldi	r21, 0x01	; 1
    b4ec:	0e 94 ad 6a 	call	0xd55a	; 0xd55a <ff_uni2oem>
    b4f0:	87 ff       	sbrs	r24, 7
    b4f2:	08 c0       	rjmp	.+16     	; 0xb504 <follow_path+0x33c>
    b4f4:	8f 77       	andi	r24, 0x7F	; 127
    b4f6:	99 27       	eor	r25, r25
    b4f8:	fc 01       	movw	r30, r24
    b4fa:	ea 59       	subi	r30, 0x9A	; 154
    b4fc:	fb 4f       	sbci	r31, 0xFB	; 251
    b4fe:	80 81       	ld	r24, Z
    b500:	90 e0       	ldi	r25, 0x00	; 0
    b502:	18 c0       	rjmp	.+48     	; 0xb534 <follow_path+0x36c>
    b504:	8f 3f       	cpi	r24, 0xFF	; 255
    b506:	91 05       	cpc	r25, r1
    b508:	a9 f0       	breq	.+42     	; 0xb534 <follow_path+0x36c>
    b50a:	a0 f0       	brcs	.+40     	; 0xb534 <follow_path+0x36c>
    b50c:	94 01       	movw	r18, r8
    b50e:	21 50       	subi	r18, 0x01	; 1
    b510:	31 09       	sbc	r19, r1
    b512:	c2 16       	cp	r12, r18
    b514:	d3 06       	cpc	r13, r19
    b516:	28 f0       	brcs	.+10     	; 0xb522 <follow_path+0x35a>
    b518:	3b 81       	ldd	r19, Y+3	; 0x03
    b51a:	33 60       	ori	r19, 0x03	; 3
    b51c:	3b 83       	std	Y+3, r19	; 0x03
    b51e:	64 01       	movw	r12, r8
    b520:	ac cf       	rjmp	.-168    	; 0xb47a <follow_path+0x2b2>
    b522:	f7 01       	movw	r30, r14
    b524:	ec 0d       	add	r30, r12
    b526:	fd 1d       	adc	r31, r13
    b528:	94 8f       	std	Z+28, r25	; 0x1c
    b52a:	d6 01       	movw	r26, r12
    b52c:	11 96       	adiw	r26, 0x01	; 1
    b52e:	6d 01       	movw	r12, r26
    b530:	5b 82       	std	Y+3, r5	; 0x03
    b532:	26 c0       	rjmp	.+76     	; 0xb580 <follow_path+0x3b8>
    b534:	00 97       	sbiw	r24, 0x00	; 0
    b536:	59 f0       	breq	.+22     	; 0xb54e <follow_path+0x386>
    b538:	5b 82       	std	Y+3, r5	; 0x03
    b53a:	eb e2       	ldi	r30, 0x2B	; 43
    b53c:	f4 e0       	ldi	r31, 0x04	; 4
    b53e:	21 91       	ld	r18, Z+
    b540:	22 23       	and	r18, r18
    b542:	59 f0       	breq	.+22     	; 0xb55a <follow_path+0x392>
    b544:	30 e0       	ldi	r19, 0x00	; 0
    b546:	82 17       	cp	r24, r18
    b548:	93 07       	cpc	r25, r19
    b54a:	c9 f7       	brne	.-14     	; 0xb53e <follow_path+0x376>
    b54c:	5b 80       	ldd	r5, Y+3	; 0x03
    b54e:	b5 2d       	mov	r27, r5
    b550:	b3 60       	ori	r27, 0x03	; 3
    b552:	bb 83       	std	Y+3, r27	; 0x03
    b554:	8f e5       	ldi	r24, 0x5F	; 95
    b556:	90 e0       	ldi	r25, 0x00	; 0
    b558:	13 c0       	rjmp	.+38     	; 0xb580 <follow_path+0x3b8>
    b55a:	9c 01       	movw	r18, r24
    b55c:	21 54       	subi	r18, 0x41	; 65
    b55e:	31 09       	sbc	r19, r1
    b560:	2a 31       	cpi	r18, 0x1A	; 26
    b562:	31 05       	cpc	r19, r1
    b564:	18 f4       	brcc	.+6      	; 0xb56c <follow_path+0x3a4>
    b566:	ec 81       	ldd	r30, Y+4	; 0x04
    b568:	e2 60       	ori	r30, 0x02	; 2
    b56a:	ec 83       	std	Y+4, r30	; 0x04
    b56c:	9c 01       	movw	r18, r24
    b56e:	21 56       	subi	r18, 0x61	; 97
    b570:	31 09       	sbc	r19, r1
    b572:	2a 31       	cpi	r18, 0x1A	; 26
    b574:	31 05       	cpc	r19, r1
    b576:	20 f4       	brcc	.+8      	; 0xb580 <follow_path+0x3b8>
    b578:	fc 81       	ldd	r31, Y+4	; 0x04
    b57a:	f1 60       	ori	r31, 0x01	; 1
    b57c:	fc 83       	std	Y+4, r31	; 0x04
    b57e:	80 97       	sbiw	r24, 0x20	; 32
    b580:	f7 01       	movw	r30, r14
    b582:	ec 0d       	add	r30, r12
    b584:	fd 1d       	adc	r31, r13
    b586:	84 8f       	std	Z+28, r24	; 0x1c
    b588:	96 01       	movw	r18, r12
    b58a:	2f 5f       	subi	r18, 0xFF	; 255
    b58c:	3f 4f       	sbci	r19, 0xFF	; 255
    b58e:	69 01       	movw	r12, r18
    b590:	74 cf       	rjmp	.-280    	; 0xb47a <follow_path+0x2b2>
    b592:	f7 01       	movw	r30, r14
    b594:	84 8d       	ldd	r24, Z+28	; 0x1c
    b596:	85 3e       	cpi	r24, 0xE5	; 229
    b598:	11 f4       	brne	.+4      	; 0xb59e <follow_path+0x3d6>
    b59a:	25 e0       	ldi	r18, 0x05	; 5
    b59c:	24 8f       	std	Z+28, r18	; 0x1c
    b59e:	38 e0       	ldi	r19, 0x08	; 8
    b5a0:	83 16       	cp	r8, r19
    b5a2:	91 04       	cpc	r9, r1
    b5a4:	21 f4       	brne	.+8      	; 0xb5ae <follow_path+0x3e6>
    b5a6:	8c 81       	ldd	r24, Y+4	; 0x04
    b5a8:	88 0f       	add	r24, r24
    b5aa:	88 0f       	add	r24, r24
    b5ac:	8c 83       	std	Y+4, r24	; 0x04
    b5ae:	8c 81       	ldd	r24, Y+4	; 0x04
    b5b0:	8c 70       	andi	r24, 0x0C	; 12
    b5b2:	8c 30       	cpi	r24, 0x0C	; 12
    b5b4:	21 f0       	breq	.+8      	; 0xb5be <follow_path+0x3f6>
    b5b6:	8c 81       	ldd	r24, Y+4	; 0x04
    b5b8:	83 70       	andi	r24, 0x03	; 3
    b5ba:	83 30       	cpi	r24, 0x03	; 3
    b5bc:	19 f4       	brne	.+6      	; 0xb5c4 <follow_path+0x3fc>
    b5be:	9b 81       	ldd	r25, Y+3	; 0x03
    b5c0:	92 60       	ori	r25, 0x02	; 2
    b5c2:	9b 83       	std	Y+3, r25	; 0x03
    b5c4:	ab 81       	ldd	r26, Y+3	; 0x03
    b5c6:	a1 fd       	sbrc	r26, 1
    b5c8:	0b c0       	rjmp	.+22     	; 0xb5e0 <follow_path+0x418>
    b5ca:	bc 81       	ldd	r27, Y+4	; 0x04
    b5cc:	b0 ff       	sbrs	r27, 0
    b5ce:	02 c0       	rjmp	.+4      	; 0xb5d4 <follow_path+0x40c>
    b5d0:	a0 61       	ori	r26, 0x10	; 16
    b5d2:	ab 83       	std	Y+3, r26	; 0x03
    b5d4:	ec 81       	ldd	r30, Y+4	; 0x04
    b5d6:	e2 ff       	sbrs	r30, 2
    b5d8:	03 c0       	rjmp	.+6      	; 0xb5e0 <follow_path+0x418>
    b5da:	fb 81       	ldd	r31, Y+3	; 0x03
    b5dc:	f8 60       	ori	r31, 0x08	; 8
    b5de:	fb 83       	std	Y+3, r31	; 0x03
    b5e0:	2b 81       	ldd	r18, Y+3	; 0x03
    b5e2:	f7 01       	movw	r30, r14
    b5e4:	27 a3       	std	Z+39, r18	; 0x27
    b5e6:	a2 ce       	rjmp	.-700    	; 0xb32c <follow_path+0x164>
    b5e8:	86 e0       	ldi	r24, 0x06	; 6
    b5ea:	90 e0       	ldi	r25, 0x00	; 0
    b5ec:	a1 ce       	rjmp	.-702    	; 0xb330 <follow_path+0x168>
    b5ee:	84 30       	cpi	r24, 0x04	; 4
    b5f0:	91 05       	cpc	r25, r1
    b5f2:	b9 f4       	brne	.+46     	; 0xb622 <follow_path+0x45a>
    b5f4:	32 2f       	mov	r19, r18
    b5f6:	34 70       	andi	r19, 0x04	; 4
    b5f8:	25 ff       	sbrs	r18, 5
    b5fa:	08 c0       	rjmp	.+16     	; 0xb60c <follow_path+0x444>
    b5fc:	33 23       	and	r19, r19
    b5fe:	09 f4       	brne	.+2      	; 0xb602 <follow_path+0x43a>
    b600:	b8 ce       	rjmp	.-656    	; 0xb372 <follow_path+0x1aa>
    b602:	80 e8       	ldi	r24, 0x80	; 128
    b604:	87 a3       	std	Z+39, r24	; 0x27
    b606:	80 e0       	ldi	r24, 0x00	; 0
    b608:	90 e0       	ldi	r25, 0x00	; 0
    b60a:	0b c0       	rjmp	.+22     	; 0xb622 <follow_path+0x45a>
    b60c:	31 11       	cpse	r19, r1
    b60e:	09 c0       	rjmp	.+18     	; 0xb622 <follow_path+0x45a>
    b610:	85 e0       	ldi	r24, 0x05	; 5
    b612:	90 e0       	ldi	r25, 0x00	; 0
    b614:	06 c0       	rjmp	.+12     	; 0xb622 <follow_path+0x45a>
    b616:	fb e0       	ldi	r31, 0x0B	; 11
    b618:	8f 16       	cp	r8, r31
    b61a:	91 04       	cpc	r9, r1
    b61c:	09 f0       	breq	.+2      	; 0xb620 <follow_path+0x458>
    b61e:	4f cf       	rjmp	.-354    	; 0xb4be <follow_path+0x2f6>
    b620:	3d cf       	rjmp	.-390    	; 0xb49c <follow_path+0x2d4>
    b622:	2a 96       	adiw	r28, 0x0a	; 10
    b624:	e2 e1       	ldi	r30, 0x12	; 18
    b626:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000b62a <f_mount>:
    b62a:	a6 e0       	ldi	r26, 0x06	; 6
    b62c:	b0 e0       	ldi	r27, 0x00	; 0
    b62e:	eb e1       	ldi	r30, 0x1B	; 27
    b630:	fb e5       	ldi	r31, 0x5B	; 91
    b632:	0c 94 f8 e3 	jmp	0x1c7f0	; 0x1c7f0 <__prologue_saves__+0x1e>
    b636:	9c 83       	std	Y+4, r25	; 0x04
    b638:	8b 83       	std	Y+3, r24	; 0x03
    b63a:	7e 83       	std	Y+6, r23	; 0x06
    b63c:	6d 83       	std	Y+5, r22	; 0x05
    b63e:	14 2f       	mov	r17, r20
    b640:	7a 83       	std	Y+2, r23	; 0x02
    b642:	69 83       	std	Y+1, r22	; 0x01
    b644:	ce 01       	movw	r24, r28
    b646:	01 96       	adiw	r24, 0x01	; 1
    b648:	0e 94 6b 49 	call	0x92d6	; 0x92d6 <get_ldnumber>
    b64c:	97 fd       	sbrc	r25, 7
    b64e:	20 c0       	rjmp	.+64     	; 0xb690 <f_mount+0x66>
    b650:	88 0f       	add	r24, r24
    b652:	99 1f       	adc	r25, r25
    b654:	fc 01       	movw	r30, r24
    b656:	e1 5d       	subi	r30, 0xD1	; 209
    b658:	f7 4e       	sbci	r31, 0xE7	; 231
    b65a:	01 90       	ld	r0, Z+
    b65c:	f0 81       	ld	r31, Z
    b65e:	e0 2d       	mov	r30, r0
    b660:	30 97       	sbiw	r30, 0x00	; 0
    b662:	09 f0       	breq	.+2      	; 0xb666 <f_mount+0x3c>
    b664:	10 82       	st	Z, r1
    b666:	eb 81       	ldd	r30, Y+3	; 0x03
    b668:	fc 81       	ldd	r31, Y+4	; 0x04
    b66a:	30 97       	sbiw	r30, 0x00	; 0
    b66c:	09 f0       	breq	.+2      	; 0xb670 <f_mount+0x46>
    b66e:	10 82       	st	Z, r1
    b670:	dc 01       	movw	r26, r24
    b672:	a1 5d       	subi	r26, 0xD1	; 209
    b674:	b7 4e       	sbci	r27, 0xE7	; 231
    b676:	ed 93       	st	X+, r30
    b678:	fc 93       	st	X, r31
    b67a:	11 23       	and	r17, r17
    b67c:	61 f0       	breq	.+24     	; 0xb696 <f_mount+0x6c>
    b67e:	40 e0       	ldi	r20, 0x00	; 0
    b680:	be 01       	movw	r22, r28
    b682:	6d 5f       	subi	r22, 0xFD	; 253
    b684:	7f 4f       	sbci	r23, 0xFF	; 255
    b686:	ce 01       	movw	r24, r28
    b688:	05 96       	adiw	r24, 0x05	; 5
    b68a:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
    b68e:	05 c0       	rjmp	.+10     	; 0xb69a <f_mount+0x70>
    b690:	8b e0       	ldi	r24, 0x0B	; 11
    b692:	90 e0       	ldi	r25, 0x00	; 0
    b694:	02 c0       	rjmp	.+4      	; 0xb69a <f_mount+0x70>
    b696:	80 e0       	ldi	r24, 0x00	; 0
    b698:	90 e0       	ldi	r25, 0x00	; 0
    b69a:	26 96       	adiw	r28, 0x06	; 6
    b69c:	e3 e0       	ldi	r30, 0x03	; 3
    b69e:	0c 94 14 e4 	jmp	0x1c828	; 0x1c828 <__epilogue_restores__+0x1e>

0000b6a2 <f_open>:
    b6a2:	a6 e3       	ldi	r26, 0x36	; 54
    b6a4:	b0 e0       	ldi	r27, 0x00	; 0
    b6a6:	e7 e5       	ldi	r30, 0x57	; 87
    b6a8:	fb e5       	ldi	r31, 0x5B	; 91
    b6aa:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    b6ae:	7a ab       	std	Y+50, r23	; 0x32
    b6b0:	69 ab       	std	Y+49, r22	; 0x31
    b6b2:	00 97       	sbiw	r24, 0x00	; 0
    b6b4:	09 f4       	brne	.+2      	; 0xb6b8 <f_open+0x16>
    b6b6:	93 c1       	rjmp	.+806    	; 0xb9de <f_open+0x33c>
    b6b8:	74 2e       	mov	r7, r20
    b6ba:	7c 01       	movw	r14, r24
    b6bc:	24 2f       	mov	r18, r20
    b6be:	2f 73       	andi	r18, 0x3F	; 63
    b6c0:	32 2e       	mov	r3, r18
    b6c2:	42 2f       	mov	r20, r18
    b6c4:	be 01       	movw	r22, r28
    b6c6:	61 5d       	subi	r22, 0xD1	; 209
    b6c8:	7f 4f       	sbci	r23, 0xFF	; 255
    b6ca:	ce 01       	movw	r24, r28
    b6cc:	c1 96       	adiw	r24, 0x31	; 49
    b6ce:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
    b6d2:	00 97       	sbiw	r24, 0x00	; 0
    b6d4:	09 f0       	breq	.+2      	; 0xb6d8 <f_open+0x36>
    b6d6:	7d c1       	rjmp	.+762    	; 0xb9d2 <f_open+0x330>
    b6d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    b6da:	98 a9       	ldd	r25, Y+48	; 0x30
    b6dc:	9a 83       	std	Y+2, r25	; 0x02
    b6de:	89 83       	std	Y+1, r24	; 0x01
    b6e0:	80 e0       	ldi	r24, 0x00	; 0
    b6e2:	92 e0       	ldi	r25, 0x02	; 2
    b6e4:	0e 94 a7 6a 	call	0xd54e	; 0xd54e <ff_memalloc>
    b6e8:	5c 01       	movw	r10, r24
    b6ea:	00 97       	sbiw	r24, 0x00	; 0
    b6ec:	09 f4       	brne	.+2      	; 0xb6f0 <f_open+0x4e>
    b6ee:	79 c1       	rjmp	.+754    	; 0xb9e2 <f_open+0x340>
    b6f0:	ef a5       	ldd	r30, Y+47	; 0x2f
    b6f2:	f8 a9       	ldd	r31, Y+48	; 0x30
    b6f4:	94 87       	std	Z+12, r25	; 0x0c
    b6f6:	83 87       	std	Z+11, r24	; 0x0b
    b6f8:	69 a9       	ldd	r22, Y+49	; 0x31
    b6fa:	7a a9       	ldd	r23, Y+50	; 0x32
    b6fc:	ce 01       	movw	r24, r28
    b6fe:	01 96       	adiw	r24, 0x01	; 1
    b700:	63 dd       	rcall	.-1338   	; 0xb1c8 <follow_path>
    b702:	8c 01       	movw	r16, r24
    b704:	89 2b       	or	r24, r25
    b706:	29 f4       	brne	.+10     	; 0xb712 <f_open+0x70>
    b708:	88 a5       	ldd	r24, Y+40	; 0x28
    b70a:	87 ff       	sbrs	r24, 7
    b70c:	02 c0       	rjmp	.+4      	; 0xb712 <f_open+0x70>
    b70e:	06 e0       	ldi	r16, 0x06	; 6
    b710:	10 e0       	ldi	r17, 0x00	; 0
    b712:	87 2d       	mov	r24, r7
    b714:	8c 71       	andi	r24, 0x1C	; 28
    b716:	09 f4       	brne	.+2      	; 0xb71a <f_open+0x78>
    b718:	75 c0       	rjmp	.+234    	; 0xb804 <f_open+0x162>
    b71a:	01 15       	cp	r16, r1
    b71c:	11 05       	cpc	r17, r1
    b71e:	79 f0       	breq	.+30     	; 0xb73e <f_open+0x9c>
    b720:	04 30       	cpi	r16, 0x04	; 4
    b722:	11 05       	cpc	r17, r1
    b724:	09 f0       	breq	.+2      	; 0xb728 <f_open+0x86>
    b726:	6d c1       	rjmp	.+730    	; 0xba02 <f_open+0x360>
    b728:	ce 01       	movw	r24, r28
    b72a:	01 96       	adiw	r24, 0x01	; 1
    b72c:	bf db       	rcall	.-2178   	; 0xaeac <dir_register>
    b72e:	8c 01       	movw	r16, r24
    b730:	89 2b       	or	r24, r25
    b732:	09 f0       	breq	.+2      	; 0xb736 <f_open+0x94>
    b734:	66 c1       	rjmp	.+716    	; 0xba02 <f_open+0x360>
    b736:	33 2d       	mov	r19, r3
    b738:	38 60       	ori	r19, 0x08	; 8
    b73a:	33 2e       	mov	r3, r19
    b73c:	06 c0       	rjmp	.+12     	; 0xb74a <f_open+0xa8>
    b73e:	8d 81       	ldd	r24, Y+5	; 0x05
    b740:	81 71       	andi	r24, 0x11	; 17
    b742:	09 f0       	breq	.+2      	; 0xb746 <f_open+0xa4>
    b744:	5c c1       	rjmp	.+696    	; 0xb9fe <f_open+0x35c>
    b746:	72 fc       	sbrc	r7, 2
    b748:	51 c1       	rjmp	.+674    	; 0xb9ec <f_open+0x34a>
    b74a:	33 fe       	sbrs	r3, 3
    b74c:	6b c0       	rjmp	.+214    	; 0xb824 <f_open+0x182>
    b74e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b750:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b752:	ef a5       	ldd	r30, Y+47	; 0x2f
    b754:	f8 a9       	ldd	r31, Y+48	; 0x30
    b756:	b8 01       	movw	r22, r16
    b758:	80 81       	ld	r24, Z
    b75a:	0e 94 8b 4b 	call	0x9716	; 0x9716 <ld_clust.isra.4>
    b75e:	2b 01       	movw	r4, r22
    b760:	3c 01       	movw	r6, r24
    b762:	0e 94 18 72 	call	0xe430	; 0xe430 <get_fattime>
    b766:	ab 01       	movw	r20, r22
    b768:	bc 01       	movw	r22, r24
    b76a:	c8 01       	movw	r24, r16
    b76c:	0e 96       	adiw	r24, 0x0e	; 14
    b76e:	0e 94 54 48 	call	0x90a8	; 0x90a8 <st_dword>
    b772:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b774:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b776:	80 e2       	ldi	r24, 0x20	; 32
    b778:	83 87       	std	Z+11, r24	; 0x0b
    b77a:	af a5       	ldd	r26, Y+47	; 0x2f
    b77c:	b8 a9       	ldd	r27, Y+48	; 0x30
    b77e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b780:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b782:	12 8e       	std	Z+26, r1	; 0x1a
    b784:	13 8e       	std	Z+27, r1	; 0x1b
    b786:	8c 91       	ld	r24, X
    b788:	83 30       	cpi	r24, 0x03	; 3
    b78a:	11 f4       	brne	.+4      	; 0xb790 <f_open+0xee>
    b78c:	14 8a       	std	Z+20, r1	; 0x14
    b78e:	15 8a       	std	Z+21, r1	; 0x15
    b790:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b792:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b794:	14 8e       	std	Z+28, r1	; 0x1c
    b796:	15 8e       	std	Z+29, r1	; 0x1d
    b798:	16 8e       	std	Z+30, r1	; 0x1e
    b79a:	17 8e       	std	Z+31, r1	; 0x1f
    b79c:	81 e0       	ldi	r24, 0x01	; 1
    b79e:	fd 01       	movw	r30, r26
    b7a0:	83 83       	std	Z+3, r24	; 0x03
    b7a2:	41 14       	cp	r4, r1
    b7a4:	51 04       	cpc	r5, r1
    b7a6:	61 04       	cpc	r6, r1
    b7a8:	71 04       	cpc	r7, r1
    b7aa:	c9 f1       	breq	.+114    	; 0xb81e <f_open+0x17c>
    b7ac:	21 a9       	ldd	r18, Z+49	; 0x31
    b7ae:	32 a9       	ldd	r19, Z+50	; 0x32
    b7b0:	43 a9       	ldd	r20, Z+51	; 0x33
    b7b2:	54 a9       	ldd	r21, Z+52	; 0x34
    b7b4:	2b ab       	std	Y+51, r18	; 0x33
    b7b6:	3c ab       	std	Y+52, r19	; 0x34
    b7b8:	4d ab       	std	Y+53, r20	; 0x35
    b7ba:	5e ab       	std	Y+54, r21	; 0x36
    b7bc:	00 e0       	ldi	r16, 0x00	; 0
    b7be:	10 e0       	ldi	r17, 0x00	; 0
    b7c0:	98 01       	movw	r18, r16
    b7c2:	b3 01       	movw	r22, r6
    b7c4:	a2 01       	movw	r20, r4
    b7c6:	ce 01       	movw	r24, r28
    b7c8:	01 96       	adiw	r24, 0x01	; 1
    b7ca:	0e 94 85 53 	call	0xa70a	; 0xa70a <remove_chain>
    b7ce:	8c 01       	movw	r16, r24
    b7d0:	89 2b       	or	r24, r25
    b7d2:	09 f0       	breq	.+2      	; 0xb7d6 <f_open+0x134>
    b7d4:	16 c1       	rjmp	.+556    	; 0xba02 <f_open+0x360>
    b7d6:	4b a9       	ldd	r20, Y+51	; 0x33
    b7d8:	5c a9       	ldd	r21, Y+52	; 0x34
    b7da:	6d a9       	ldd	r22, Y+53	; 0x35
    b7dc:	7e a9       	ldd	r23, Y+54	; 0x36
    b7de:	8f a5       	ldd	r24, Y+47	; 0x2f
    b7e0:	98 a9       	ldd	r25, Y+48	; 0x30
    b7e2:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    b7e6:	8c 01       	movw	r16, r24
    b7e8:	ef a5       	ldd	r30, Y+47	; 0x2f
    b7ea:	f8 a9       	ldd	r31, Y+48	; 0x30
    b7ec:	21 e0       	ldi	r18, 0x01	; 1
    b7ee:	42 1a       	sub	r4, r18
    b7f0:	51 08       	sbc	r5, r1
    b7f2:	61 08       	sbc	r6, r1
    b7f4:	71 08       	sbc	r7, r1
    b7f6:	45 86       	std	Z+13, r4	; 0x0d
    b7f8:	56 86       	std	Z+14, r5	; 0x0e
    b7fa:	67 86       	std	Z+15, r6	; 0x0f
    b7fc:	70 8a       	std	Z+16, r7	; 0x10
    b7fe:	89 2b       	or	r24, r25
    b800:	61 f0       	breq	.+24     	; 0xb81a <f_open+0x178>
    b802:	ff c0       	rjmp	.+510    	; 0xba02 <f_open+0x360>
    b804:	01 15       	cp	r16, r1
    b806:	11 05       	cpc	r17, r1
    b808:	09 f0       	breq	.+2      	; 0xb80c <f_open+0x16a>
    b80a:	fb c0       	rjmp	.+502    	; 0xba02 <f_open+0x360>
    b80c:	8d 81       	ldd	r24, Y+5	; 0x05
    b80e:	84 fd       	sbrc	r24, 4
    b810:	f3 c0       	rjmp	.+486    	; 0xb9f8 <f_open+0x356>
    b812:	71 fe       	sbrs	r7, 1
    b814:	02 c0       	rjmp	.+4      	; 0xb81a <f_open+0x178>
    b816:	80 fd       	sbrc	r24, 0
    b818:	f2 c0       	rjmp	.+484    	; 0xb9fe <f_open+0x35c>
    b81a:	33 fe       	sbrs	r3, 3
    b81c:	03 c0       	rjmp	.+6      	; 0xb824 <f_open+0x182>
    b81e:	33 2d       	mov	r19, r3
    b820:	30 64       	ori	r19, 0x40	; 64
    b822:	33 2e       	mov	r3, r19
    b824:	0f a5       	ldd	r16, Y+47	; 0x2f
    b826:	18 a9       	ldd	r17, Y+48	; 0x30
    b828:	f8 01       	movw	r30, r16
    b82a:	81 a9       	ldd	r24, Z+49	; 0x31
    b82c:	92 a9       	ldd	r25, Z+50	; 0x32
    b82e:	a3 a9       	ldd	r26, Z+51	; 0x33
    b830:	b4 a9       	ldd	r27, Z+52	; 0x34
    b832:	f7 01       	movw	r30, r14
    b834:	84 8f       	std	Z+28, r24	; 0x1c
    b836:	95 8f       	std	Z+29, r25	; 0x1d
    b838:	a6 8f       	std	Z+30, r26	; 0x1e
    b83a:	b7 8f       	std	Z+31, r27	; 0x1f
    b83c:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b83e:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b840:	71 a2       	std	Z+33, r7	; 0x21
    b842:	60 a2       	std	Z+32, r6	; 0x20
    b844:	b3 01       	movw	r22, r6
    b846:	f8 01       	movw	r30, r16
    b848:	80 81       	ld	r24, Z
    b84a:	0e 94 8b 4b 	call	0x9716	; 0x9716 <ld_clust.isra.4>
    b84e:	f7 01       	movw	r30, r14
    b850:	66 83       	std	Z+6, r22	; 0x06
    b852:	77 83       	std	Z+7, r23	; 0x07
    b854:	80 87       	std	Z+8, r24	; 0x08
    b856:	91 87       	std	Z+9, r25	; 0x09
    b858:	c3 01       	movw	r24, r6
    b85a:	4c 96       	adiw	r24, 0x1c	; 28
    b85c:	0e 94 3f 48 	call	0x907e	; 0x907e <ld_dword>
    b860:	f7 01       	movw	r30, r14
    b862:	62 87       	std	Z+10, r22	; 0x0a
    b864:	73 87       	std	Z+11, r23	; 0x0b
    b866:	84 87       	std	Z+12, r24	; 0x0c
    b868:	95 87       	std	Z+13, r25	; 0x0d
    b86a:	13 a2       	std	Z+35, r1	; 0x23
    b86c:	12 a2       	std	Z+34, r1	; 0x22
    b86e:	11 83       	std	Z+1, r17	; 0x01
    b870:	00 83       	st	Z, r16
    b872:	f8 01       	movw	r30, r16
    b874:	85 81       	ldd	r24, Z+5	; 0x05
    b876:	96 81       	ldd	r25, Z+6	; 0x06
    b878:	f7 01       	movw	r30, r14
    b87a:	93 83       	std	Z+3, r25	; 0x03
    b87c:	82 83       	std	Z+2, r24	; 0x02
    b87e:	36 86       	std	Z+14, r3	; 0x0e
    b880:	17 86       	std	Z+15, r1	; 0x0f
    b882:	10 8e       	std	Z+24, r1	; 0x18
    b884:	11 8e       	std	Z+25, r1	; 0x19
    b886:	12 8e       	std	Z+26, r1	; 0x1a
    b888:	13 8e       	std	Z+27, r1	; 0x1b
    b88a:	10 8a       	std	Z+16, r1	; 0x10
    b88c:	11 8a       	std	Z+17, r1	; 0x11
    b88e:	12 8a       	std	Z+18, r1	; 0x12
    b890:	13 8a       	std	Z+19, r1	; 0x13
    b892:	67 01       	movw	r12, r14
    b894:	f4 e2       	ldi	r31, 0x24	; 36
    b896:	cf 0e       	add	r12, r31
    b898:	d1 1c       	adc	r13, r1
    b89a:	40 e0       	ldi	r20, 0x00	; 0
    b89c:	52 e0       	ldi	r21, 0x02	; 2
    b89e:	60 e0       	ldi	r22, 0x00	; 0
    b8a0:	70 e0       	ldi	r23, 0x00	; 0
    b8a2:	c6 01       	movw	r24, r12
    b8a4:	0e 94 5a 48 	call	0x90b4	; 0x90b4 <mem_set>
    b8a8:	35 fc       	sbrc	r3, 5
    b8aa:	03 c0       	rjmp	.+6      	; 0xb8b2 <f_open+0x210>
    b8ac:	00 e0       	ldi	r16, 0x00	; 0
    b8ae:	10 e0       	ldi	r17, 0x00	; 0
    b8b0:	89 c0       	rjmp	.+274    	; 0xb9c4 <f_open+0x322>
    b8b2:	f7 01       	movw	r30, r14
    b8b4:	62 84       	ldd	r6, Z+10	; 0x0a
    b8b6:	73 84       	ldd	r7, Z+11	; 0x0b
    b8b8:	84 84       	ldd	r8, Z+12	; 0x0c
    b8ba:	95 84       	ldd	r9, Z+13	; 0x0d
    b8bc:	61 14       	cp	r6, r1
    b8be:	71 04       	cpc	r7, r1
    b8c0:	81 04       	cpc	r8, r1
    b8c2:	91 04       	cpc	r9, r1
    b8c4:	99 f3       	breq	.-26     	; 0xb8ac <f_open+0x20a>
    b8c6:	60 8a       	std	Z+16, r6	; 0x10
    b8c8:	71 8a       	std	Z+17, r7	; 0x11
    b8ca:	82 8a       	std	Z+18, r8	; 0x12
    b8cc:	93 8a       	std	Z+19, r9	; 0x13
    b8ce:	ef a5       	ldd	r30, Y+47	; 0x2f
    b8d0:	f8 a9       	ldd	r31, Y+48	; 0x30
    b8d2:	21 84       	ldd	r2, Z+9	; 0x09
    b8d4:	32 84       	ldd	r3, Z+10	; 0x0a
    b8d6:	c1 01       	movw	r24, r2
    b8d8:	a0 e0       	ldi	r26, 0x00	; 0
    b8da:	b0 e0       	ldi	r27, 0x00	; 0
    b8dc:	1c 01       	movw	r2, r24
    b8de:	2d 01       	movw	r4, r26
    b8e0:	59 e0       	ldi	r21, 0x09	; 9
    b8e2:	22 0c       	add	r2, r2
    b8e4:	33 1c       	adc	r3, r3
    b8e6:	44 1c       	adc	r4, r4
    b8e8:	55 1c       	adc	r5, r5
    b8ea:	5a 95       	dec	r21
    b8ec:	d1 f7       	brne	.-12     	; 0xb8e2 <f_open+0x240>
    b8ee:	f7 01       	movw	r30, r14
    b8f0:	46 81       	ldd	r20, Z+6	; 0x06
    b8f2:	57 81       	ldd	r21, Z+7	; 0x07
    b8f4:	60 85       	ldd	r22, Z+8	; 0x08
    b8f6:	71 85       	ldd	r23, Z+9	; 0x09
    b8f8:	26 14       	cp	r2, r6
    b8fa:	37 04       	cpc	r3, r7
    b8fc:	48 04       	cpc	r4, r8
    b8fe:	59 04       	cpc	r5, r9
    b900:	f0 f4       	brcc	.+60     	; 0xb93e <f_open+0x29c>
    b902:	f7 01       	movw	r30, r14
    b904:	80 81       	ld	r24, Z
    b906:	91 81       	ldd	r25, Z+1	; 0x01
    b908:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <get_fat.isra.10>
    b90c:	ab 01       	movw	r20, r22
    b90e:	bc 01       	movw	r22, r24
    b910:	d4 01       	movw	r26, r8
    b912:	c3 01       	movw	r24, r6
    b914:	82 19       	sub	r24, r2
    b916:	93 09       	sbc	r25, r3
    b918:	a4 09       	sbc	r26, r4
    b91a:	b5 09       	sbc	r27, r5
    b91c:	3c 01       	movw	r6, r24
    b91e:	4d 01       	movw	r8, r26
    b920:	42 30       	cpi	r20, 0x02	; 2
    b922:	51 05       	cpc	r21, r1
    b924:	61 05       	cpc	r22, r1
    b926:	71 05       	cpc	r23, r1
    b928:	08 f4       	brcc	.+2      	; 0xb92c <f_open+0x28a>
    b92a:	63 c0       	rjmp	.+198    	; 0xb9f2 <f_open+0x350>
    b92c:	4f 3f       	cpi	r20, 0xFF	; 255
    b92e:	ff ef       	ldi	r31, 0xFF	; 255
    b930:	5f 07       	cpc	r21, r31
    b932:	6f 07       	cpc	r22, r31
    b934:	7f 07       	cpc	r23, r31
    b936:	01 f7       	brne	.-64     	; 0xb8f8 <f_open+0x256>
    b938:	01 e0       	ldi	r16, 0x01	; 1
    b93a:	10 e0       	ldi	r17, 0x00	; 0
    b93c:	02 c0       	rjmp	.+4      	; 0xb942 <f_open+0x2a0>
    b93e:	00 e0       	ldi	r16, 0x00	; 0
    b940:	10 e0       	ldi	r17, 0x00	; 0
    b942:	f7 01       	movw	r30, r14
    b944:	44 8b       	std	Z+20, r20	; 0x14
    b946:	55 8b       	std	Z+21, r21	; 0x15
    b948:	66 8b       	std	Z+22, r22	; 0x16
    b94a:	77 8b       	std	Z+23, r23	; 0x17
    b94c:	01 15       	cp	r16, r1
    b94e:	11 05       	cpc	r17, r1
    b950:	c9 f5       	brne	.+114    	; 0xb9c4 <f_open+0x322>
    b952:	d4 01       	movw	r26, r8
    b954:	c3 01       	movw	r24, r6
    b956:	91 70       	andi	r25, 0x01	; 1
    b958:	aa 27       	eor	r26, r26
    b95a:	bb 27       	eor	r27, r27
    b95c:	89 2b       	or	r24, r25
    b95e:	8a 2b       	or	r24, r26
    b960:	8b 2b       	or	r24, r27
    b962:	09 f4       	brne	.+2      	; 0xb966 <f_open+0x2c4>
    b964:	a3 cf       	rjmp	.-186    	; 0xb8ac <f_open+0x20a>
    b966:	4f a4       	ldd	r4, Y+47	; 0x2f
    b968:	58 a8       	ldd	r5, Y+48	; 0x30
    b96a:	c2 01       	movw	r24, r4
    b96c:	0e 94 f8 48 	call	0x91f0	; 0x91f0 <clst2sect>
    b970:	61 15       	cp	r22, r1
    b972:	71 05       	cpc	r23, r1
    b974:	81 05       	cpc	r24, r1
    b976:	91 05       	cpc	r25, r1
    b978:	19 f1       	breq	.+70     	; 0xb9c0 <f_open+0x31e>
    b97a:	94 01       	movw	r18, r8
    b97c:	83 01       	movw	r16, r6
    b97e:	49 e0       	ldi	r20, 0x09	; 9
    b980:	36 95       	lsr	r19
    b982:	27 95       	ror	r18
    b984:	17 95       	ror	r17
    b986:	07 95       	ror	r16
    b988:	4a 95       	dec	r20
    b98a:	d1 f7       	brne	.-12     	; 0xb980 <f_open+0x2de>
    b98c:	a9 01       	movw	r20, r18
    b98e:	98 01       	movw	r18, r16
    b990:	26 0f       	add	r18, r22
    b992:	37 1f       	adc	r19, r23
    b994:	48 1f       	adc	r20, r24
    b996:	59 1f       	adc	r21, r25
    b998:	f7 01       	movw	r30, r14
    b99a:	20 8f       	std	Z+24, r18	; 0x18
    b99c:	31 8f       	std	Z+25, r19	; 0x19
    b99e:	42 8f       	std	Z+26, r20	; 0x1a
    b9a0:	53 8f       	std	Z+27, r21	; 0x1b
    b9a2:	01 e0       	ldi	r16, 0x01	; 1
    b9a4:	10 e0       	ldi	r17, 0x00	; 0
    b9a6:	b6 01       	movw	r22, r12
    b9a8:	f2 01       	movw	r30, r4
    b9aa:	81 81       	ldd	r24, Z+1	; 0x01
    b9ac:	0e 94 63 6b 	call	0xd6c6	; 0xd6c6 <disk_read>
    b9b0:	31 e0       	ldi	r19, 0x01	; 1
    b9b2:	20 e0       	ldi	r18, 0x00	; 0
    b9b4:	89 2b       	or	r24, r25
    b9b6:	09 f4       	brne	.+2      	; 0xb9ba <f_open+0x318>
    b9b8:	30 e0       	ldi	r19, 0x00	; 0
    b9ba:	03 2f       	mov	r16, r19
    b9bc:	12 2f       	mov	r17, r18
    b9be:	02 c0       	rjmp	.+4      	; 0xb9c4 <f_open+0x322>
    b9c0:	02 e0       	ldi	r16, 0x02	; 2
    b9c2:	10 e0       	ldi	r17, 0x00	; 0
    b9c4:	c5 01       	movw	r24, r10
    b9c6:	0e 94 aa 6a 	call	0xd554	; 0xd554 <ff_memfree>
    b9ca:	01 15       	cp	r16, r1
    b9cc:	11 05       	cpc	r17, r1
    b9ce:	59 f0       	breq	.+22     	; 0xb9e6 <f_open+0x344>
    b9d0:	01 c0       	rjmp	.+2      	; 0xb9d4 <f_open+0x332>
    b9d2:	8c 01       	movw	r16, r24
    b9d4:	f7 01       	movw	r30, r14
    b9d6:	11 82       	std	Z+1, r1	; 0x01
    b9d8:	10 82       	st	Z, r1
    b9da:	c8 01       	movw	r24, r16
    b9dc:	16 c0       	rjmp	.+44     	; 0xba0a <f_open+0x368>
    b9de:	89 e0       	ldi	r24, 0x09	; 9
    b9e0:	03 c0       	rjmp	.+6      	; 0xb9e8 <f_open+0x346>
    b9e2:	81 e1       	ldi	r24, 0x11	; 17
    b9e4:	01 c0       	rjmp	.+2      	; 0xb9e8 <f_open+0x346>
    b9e6:	80 e0       	ldi	r24, 0x00	; 0
    b9e8:	90 e0       	ldi	r25, 0x00	; 0
    b9ea:	0f c0       	rjmp	.+30     	; 0xba0a <f_open+0x368>
    b9ec:	08 e0       	ldi	r16, 0x08	; 8
    b9ee:	10 e0       	ldi	r17, 0x00	; 0
    b9f0:	08 c0       	rjmp	.+16     	; 0xba02 <f_open+0x360>
    b9f2:	02 e0       	ldi	r16, 0x02	; 2
    b9f4:	10 e0       	ldi	r17, 0x00	; 0
    b9f6:	a5 cf       	rjmp	.-182    	; 0xb942 <f_open+0x2a0>
    b9f8:	04 e0       	ldi	r16, 0x04	; 4
    b9fa:	10 e0       	ldi	r17, 0x00	; 0
    b9fc:	02 c0       	rjmp	.+4      	; 0xba02 <f_open+0x360>
    b9fe:	07 e0       	ldi	r16, 0x07	; 7
    ba00:	10 e0       	ldi	r17, 0x00	; 0
    ba02:	c5 01       	movw	r24, r10
    ba04:	0e 94 aa 6a 	call	0xd554	; 0xd554 <ff_memfree>
    ba08:	e5 cf       	rjmp	.-54     	; 0xb9d4 <f_open+0x332>
    ba0a:	e6 96       	adiw	r28, 0x36	; 54
    ba0c:	e2 e1       	ldi	r30, 0x12	; 18
    ba0e:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000ba12 <f_read>:
    ba12:	a6 e0       	ldi	r26, 0x06	; 6
    ba14:	b0 e0       	ldi	r27, 0x00	; 0
    ba16:	ef e0       	ldi	r30, 0x0F	; 15
    ba18:	fd e5       	ldi	r31, 0x5D	; 93
    ba1a:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    ba1e:	7c 01       	movw	r14, r24
    ba20:	4b 01       	movw	r8, r22
    ba22:	5a 01       	movw	r10, r20
    ba24:	3e 83       	std	Y+6, r19	; 0x06
    ba26:	2d 83       	std	Y+5, r18	; 0x05
    ba28:	f9 01       	movw	r30, r18
    ba2a:	11 82       	std	Z+1, r1	; 0x01
    ba2c:	10 82       	st	Z, r1
    ba2e:	be 01       	movw	r22, r28
    ba30:	6f 5f       	subi	r22, 0xFF	; 255
    ba32:	7f 4f       	sbci	r23, 0xFF	; 255
    ba34:	0e 94 97 49 	call	0x932e	; 0x932e <validate>
    ba38:	00 97       	sbiw	r24, 0x00	; 0
    ba3a:	09 f0       	breq	.+2      	; 0xba3e <f_read+0x2c>
    ba3c:	31 c1       	rjmp	.+610    	; 0xbca0 <f_read+0x28e>
    ba3e:	f7 01       	movw	r30, r14
    ba40:	87 85       	ldd	r24, Z+15	; 0x0f
    ba42:	90 e0       	ldi	r25, 0x00	; 0
    ba44:	00 97       	sbiw	r24, 0x00	; 0
    ba46:	09 f0       	breq	.+2      	; 0xba4a <f_read+0x38>
    ba48:	2b c1       	rjmp	.+598    	; 0xbca0 <f_read+0x28e>
    ba4a:	86 85       	ldd	r24, Z+14	; 0x0e
    ba4c:	80 ff       	sbrs	r24, 0
    ba4e:	26 c1       	rjmp	.+588    	; 0xbc9c <f_read+0x28a>
    ba50:	82 85       	ldd	r24, Z+10	; 0x0a
    ba52:	93 85       	ldd	r25, Z+11	; 0x0b
    ba54:	a4 85       	ldd	r26, Z+12	; 0x0c
    ba56:	b5 85       	ldd	r27, Z+13	; 0x0d
    ba58:	40 89       	ldd	r20, Z+16	; 0x10
    ba5a:	51 89       	ldd	r21, Z+17	; 0x11
    ba5c:	62 89       	ldd	r22, Z+18	; 0x12
    ba5e:	73 89       	ldd	r23, Z+19	; 0x13
    ba60:	84 1b       	sub	r24, r20
    ba62:	95 0b       	sbc	r25, r21
    ba64:	a6 0b       	sbc	r26, r22
    ba66:	b7 0b       	sbc	r27, r23
    ba68:	a5 01       	movw	r20, r10
    ba6a:	60 e0       	ldi	r22, 0x00	; 0
    ba6c:	70 e0       	ldi	r23, 0x00	; 0
    ba6e:	84 17       	cp	r24, r20
    ba70:	95 07       	cpc	r25, r21
    ba72:	a6 07       	cpc	r26, r22
    ba74:	b7 07       	cpc	r27, r23
    ba76:	08 f4       	brcc	.+2      	; 0xba7a <f_read+0x68>
    ba78:	5c 01       	movw	r10, r24
    ba7a:	17 01       	movw	r2, r14
    ba7c:	f4 e2       	ldi	r31, 0x24	; 36
    ba7e:	2f 0e       	add	r2, r31
    ba80:	31 1c       	adc	r3, r1
    ba82:	a1 14       	cp	r10, r1
    ba84:	b1 04       	cpc	r11, r1
    ba86:	09 f4       	brne	.+2      	; 0xba8a <f_read+0x78>
    ba88:	07 c1       	rjmp	.+526    	; 0xbc98 <f_read+0x286>
    ba8a:	f7 01       	movw	r30, r14
    ba8c:	40 89       	ldd	r20, Z+16	; 0x10
    ba8e:	51 89       	ldd	r21, Z+17	; 0x11
    ba90:	62 89       	ldd	r22, Z+18	; 0x12
    ba92:	73 89       	ldd	r23, Z+19	; 0x13
    ba94:	db 01       	movw	r26, r22
    ba96:	ca 01       	movw	r24, r20
    ba98:	91 70       	andi	r25, 0x01	; 1
    ba9a:	aa 27       	eor	r26, r26
    ba9c:	bb 27       	eor	r27, r27
    ba9e:	89 2b       	or	r24, r25
    baa0:	8a 2b       	or	r24, r26
    baa2:	8b 2b       	or	r24, r27
    baa4:	09 f0       	breq	.+2      	; 0xbaa8 <f_read+0x96>
    baa6:	cb c0       	rjmp	.+406    	; 0xbc3e <f_read+0x22c>
    baa8:	e9 81       	ldd	r30, Y+1	; 0x01
    baaa:	fa 81       	ldd	r31, Y+2	; 0x02
    baac:	01 85       	ldd	r16, Z+9	; 0x09
    baae:	12 85       	ldd	r17, Z+10	; 0x0a
    bab0:	01 50       	subi	r16, 0x01	; 1
    bab2:	11 09       	sbc	r17, r1
    bab4:	db 01       	movw	r26, r22
    bab6:	ca 01       	movw	r24, r20
    bab8:	e9 e0       	ldi	r30, 0x09	; 9
    baba:	b6 95       	lsr	r27
    babc:	a7 95       	ror	r26
    babe:	97 95       	ror	r25
    bac0:	87 95       	ror	r24
    bac2:	ea 95       	dec	r30
    bac4:	d1 f7       	brne	.-12     	; 0xbaba <f_read+0xa8>
    bac6:	08 23       	and	r16, r24
    bac8:	19 23       	and	r17, r25
    baca:	01 15       	cp	r16, r1
    bacc:	11 05       	cpc	r17, r1
    bace:	91 f5       	brne	.+100    	; 0xbb34 <f_read+0x122>
    bad0:	f7 01       	movw	r30, r14
    bad2:	41 15       	cp	r20, r1
    bad4:	51 05       	cpc	r21, r1
    bad6:	61 05       	cpc	r22, r1
    bad8:	71 05       	cpc	r23, r1
    bada:	29 f4       	brne	.+10     	; 0xbae6 <f_read+0xd4>
    badc:	66 81       	ldd	r22, Z+6	; 0x06
    bade:	77 81       	ldd	r23, Z+7	; 0x07
    bae0:	80 85       	ldd	r24, Z+8	; 0x08
    bae2:	91 85       	ldd	r25, Z+9	; 0x09
    bae4:	11 c0       	rjmp	.+34     	; 0xbb08 <f_read+0xf6>
    bae6:	82 a1       	ldd	r24, Z+34	; 0x22
    bae8:	93 a1       	ldd	r25, Z+35	; 0x23
    baea:	89 2b       	or	r24, r25
    baec:	21 f0       	breq	.+8      	; 0xbaf6 <f_read+0xe4>
    baee:	c7 01       	movw	r24, r14
    baf0:	0e 94 20 49 	call	0x9240	; 0x9240 <clmt_clust>
    baf4:	09 c0       	rjmp	.+18     	; 0xbb08 <f_read+0xf6>
    baf6:	f7 01       	movw	r30, r14
    baf8:	44 89       	ldd	r20, Z+20	; 0x14
    bafa:	55 89       	ldd	r21, Z+21	; 0x15
    bafc:	66 89       	ldd	r22, Z+22	; 0x16
    bafe:	77 89       	ldd	r23, Z+23	; 0x17
    bb00:	80 81       	ld	r24, Z
    bb02:	91 81       	ldd	r25, Z+1	; 0x01
    bb04:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <get_fat.isra.10>
    bb08:	62 30       	cpi	r22, 0x02	; 2
    bb0a:	71 05       	cpc	r23, r1
    bb0c:	81 05       	cpc	r24, r1
    bb0e:	91 05       	cpc	r25, r1
    bb10:	10 f4       	brcc	.+4      	; 0xbb16 <f_read+0x104>
    bb12:	82 e0       	ldi	r24, 0x02	; 2
    bb14:	07 c0       	rjmp	.+14     	; 0xbb24 <f_read+0x112>
    bb16:	6f 3f       	cpi	r22, 0xFF	; 255
    bb18:	ff ef       	ldi	r31, 0xFF	; 255
    bb1a:	7f 07       	cpc	r23, r31
    bb1c:	8f 07       	cpc	r24, r31
    bb1e:	9f 07       	cpc	r25, r31
    bb20:	21 f4       	brne	.+8      	; 0xbb2a <f_read+0x118>
    bb22:	81 e0       	ldi	r24, 0x01	; 1
    bb24:	f7 01       	movw	r30, r14
    bb26:	87 87       	std	Z+15, r24	; 0x0f
    bb28:	ba c0       	rjmp	.+372    	; 0xbc9e <f_read+0x28c>
    bb2a:	f7 01       	movw	r30, r14
    bb2c:	64 8b       	std	Z+20, r22	; 0x14
    bb2e:	75 8b       	std	Z+21, r23	; 0x15
    bb30:	86 8b       	std	Z+22, r24	; 0x16
    bb32:	97 8b       	std	Z+23, r25	; 0x17
    bb34:	89 81       	ldd	r24, Y+1	; 0x01
    bb36:	9a 81       	ldd	r25, Y+2	; 0x02
    bb38:	9c 83       	std	Y+4, r25	; 0x04
    bb3a:	8b 83       	std	Y+3, r24	; 0x03
    bb3c:	f7 01       	movw	r30, r14
    bb3e:	44 89       	ldd	r20, Z+20	; 0x14
    bb40:	55 89       	ldd	r21, Z+21	; 0x15
    bb42:	66 89       	ldd	r22, Z+22	; 0x16
    bb44:	77 89       	ldd	r23, Z+23	; 0x17
    bb46:	0e 94 f8 48 	call	0x91f0	; 0x91f0 <clst2sect>
    bb4a:	61 15       	cp	r22, r1
    bb4c:	71 05       	cpc	r23, r1
    bb4e:	81 05       	cpc	r24, r1
    bb50:	91 05       	cpc	r25, r1
    bb52:	f9 f2       	breq	.-66     	; 0xbb12 <f_read+0x100>
    bb54:	2b 01       	movw	r4, r22
    bb56:	3c 01       	movw	r6, r24
    bb58:	40 0e       	add	r4, r16
    bb5a:	51 1e       	adc	r5, r17
    bb5c:	61 1c       	adc	r6, r1
    bb5e:	71 1c       	adc	r7, r1
    bb60:	65 01       	movw	r12, r10
    bb62:	cd 2c       	mov	r12, r13
    bb64:	dd 24       	eor	r13, r13
    bb66:	c6 94       	lsr	r12
    bb68:	c1 14       	cp	r12, r1
    bb6a:	d1 04       	cpc	r13, r1
    bb6c:	d1 f1       	breq	.+116    	; 0xbbe2 <f_read+0x1d0>
    bb6e:	eb 81       	ldd	r30, Y+3	; 0x03
    bb70:	fc 81       	ldd	r31, Y+4	; 0x04
    bb72:	81 85       	ldd	r24, Z+9	; 0x09
    bb74:	92 85       	ldd	r25, Z+10	; 0x0a
    bb76:	98 01       	movw	r18, r16
    bb78:	2c 0d       	add	r18, r12
    bb7a:	3d 1d       	adc	r19, r13
    bb7c:	82 17       	cp	r24, r18
    bb7e:	93 07       	cpc	r25, r19
    bb80:	18 f4       	brcc	.+6      	; 0xbb88 <f_read+0x176>
    bb82:	6c 01       	movw	r12, r24
    bb84:	c0 1a       	sub	r12, r16
    bb86:	d1 0a       	sbc	r13, r17
    bb88:	86 01       	movw	r16, r12
    bb8a:	a3 01       	movw	r20, r6
    bb8c:	92 01       	movw	r18, r4
    bb8e:	b4 01       	movw	r22, r8
    bb90:	eb 81       	ldd	r30, Y+3	; 0x03
    bb92:	fc 81       	ldd	r31, Y+4	; 0x04
    bb94:	81 81       	ldd	r24, Z+1	; 0x01
    bb96:	0e 94 63 6b 	call	0xd6c6	; 0xd6c6 <disk_read>
    bb9a:	89 2b       	or	r24, r25
    bb9c:	11 f6       	brne	.-124    	; 0xbb22 <f_read+0x110>
    bb9e:	f7 01       	movw	r30, r14
    bba0:	86 85       	ldd	r24, Z+14	; 0x0e
    bba2:	87 ff       	sbrs	r24, 7
    bba4:	1a c0       	rjmp	.+52     	; 0xbbda <f_read+0x1c8>
    bba6:	80 8d       	ldd	r24, Z+24	; 0x18
    bba8:	91 8d       	ldd	r25, Z+25	; 0x19
    bbaa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bbac:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bbae:	84 19       	sub	r24, r4
    bbb0:	95 09       	sbc	r25, r5
    bbb2:	a6 09       	sbc	r26, r6
    bbb4:	b7 09       	sbc	r27, r7
    bbb6:	a6 01       	movw	r20, r12
    bbb8:	60 e0       	ldi	r22, 0x00	; 0
    bbba:	70 e0       	ldi	r23, 0x00	; 0
    bbbc:	84 17       	cp	r24, r20
    bbbe:	95 07       	cpc	r25, r21
    bbc0:	a6 07       	cpc	r26, r22
    bbc2:	b7 07       	cpc	r27, r23
    bbc4:	50 f4       	brcc	.+20     	; 0xbbda <f_read+0x1c8>
    bbc6:	98 2f       	mov	r25, r24
    bbc8:	88 27       	eor	r24, r24
    bbca:	99 0f       	add	r25, r25
    bbcc:	40 e0       	ldi	r20, 0x00	; 0
    bbce:	52 e0       	ldi	r21, 0x02	; 2
    bbd0:	b1 01       	movw	r22, r2
    bbd2:	88 0d       	add	r24, r8
    bbd4:	99 1d       	adc	r25, r9
    bbd6:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
    bbda:	dc 2c       	mov	r13, r12
    bbdc:	cc 24       	eor	r12, r12
    bbde:	dd 0c       	add	r13, r13
    bbe0:	41 c0       	rjmp	.+130    	; 0xbc64 <f_read+0x252>
    bbe2:	f7 01       	movw	r30, r14
    bbe4:	20 8d       	ldd	r18, Z+24	; 0x18
    bbe6:	31 8d       	ldd	r19, Z+25	; 0x19
    bbe8:	42 8d       	ldd	r20, Z+26	; 0x1a
    bbea:	53 8d       	ldd	r21, Z+27	; 0x1b
    bbec:	42 16       	cp	r4, r18
    bbee:	53 06       	cpc	r5, r19
    bbf0:	64 06       	cpc	r6, r20
    bbf2:	75 06       	cpc	r7, r21
    bbf4:	f9 f0       	breq	.+62     	; 0xbc34 <f_read+0x222>
    bbf6:	86 85       	ldd	r24, Z+14	; 0x0e
    bbf8:	87 ff       	sbrs	r24, 7
    bbfa:	0f c0       	rjmp	.+30     	; 0xbc1a <f_read+0x208>
    bbfc:	01 e0       	ldi	r16, 0x01	; 1
    bbfe:	10 e0       	ldi	r17, 0x00	; 0
    bc00:	b1 01       	movw	r22, r2
    bc02:	eb 81       	ldd	r30, Y+3	; 0x03
    bc04:	fc 81       	ldd	r31, Y+4	; 0x04
    bc06:	81 81       	ldd	r24, Z+1	; 0x01
    bc08:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    bc0c:	89 2b       	or	r24, r25
    bc0e:	09 f0       	breq	.+2      	; 0xbc12 <f_read+0x200>
    bc10:	88 cf       	rjmp	.-240    	; 0xbb22 <f_read+0x110>
    bc12:	f7 01       	movw	r30, r14
    bc14:	86 85       	ldd	r24, Z+14	; 0x0e
    bc16:	8f 77       	andi	r24, 0x7F	; 127
    bc18:	86 87       	std	Z+14, r24	; 0x0e
    bc1a:	e9 81       	ldd	r30, Y+1	; 0x01
    bc1c:	fa 81       	ldd	r31, Y+2	; 0x02
    bc1e:	01 e0       	ldi	r16, 0x01	; 1
    bc20:	10 e0       	ldi	r17, 0x00	; 0
    bc22:	a3 01       	movw	r20, r6
    bc24:	92 01       	movw	r18, r4
    bc26:	b1 01       	movw	r22, r2
    bc28:	81 81       	ldd	r24, Z+1	; 0x01
    bc2a:	0e 94 63 6b 	call	0xd6c6	; 0xd6c6 <disk_read>
    bc2e:	89 2b       	or	r24, r25
    bc30:	09 f0       	breq	.+2      	; 0xbc34 <f_read+0x222>
    bc32:	77 cf       	rjmp	.-274    	; 0xbb22 <f_read+0x110>
    bc34:	f7 01       	movw	r30, r14
    bc36:	40 8e       	std	Z+24, r4	; 0x18
    bc38:	51 8e       	std	Z+25, r5	; 0x19
    bc3a:	62 8e       	std	Z+26, r6	; 0x1a
    bc3c:	73 8e       	std	Z+27, r7	; 0x1b
    bc3e:	f7 01       	movw	r30, r14
    bc40:	60 89       	ldd	r22, Z+16	; 0x10
    bc42:	71 89       	ldd	r23, Z+17	; 0x11
    bc44:	71 70       	andi	r23, 0x01	; 1
    bc46:	80 e0       	ldi	r24, 0x00	; 0
    bc48:	92 e0       	ldi	r25, 0x02	; 2
    bc4a:	86 1b       	sub	r24, r22
    bc4c:	97 0b       	sbc	r25, r23
    bc4e:	65 01       	movw	r12, r10
    bc50:	8a 15       	cp	r24, r10
    bc52:	9b 05       	cpc	r25, r11
    bc54:	08 f4       	brcc	.+2      	; 0xbc58 <f_read+0x246>
    bc56:	6c 01       	movw	r12, r24
    bc58:	62 0d       	add	r22, r2
    bc5a:	73 1d       	adc	r23, r3
    bc5c:	a6 01       	movw	r20, r12
    bc5e:	c4 01       	movw	r24, r8
    bc60:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
    bc64:	ac 18       	sub	r10, r12
    bc66:	bd 08       	sbc	r11, r13
    bc68:	ed 81       	ldd	r30, Y+5	; 0x05
    bc6a:	fe 81       	ldd	r31, Y+6	; 0x06
    bc6c:	80 81       	ld	r24, Z
    bc6e:	91 81       	ldd	r25, Z+1	; 0x01
    bc70:	8c 0d       	add	r24, r12
    bc72:	9d 1d       	adc	r25, r13
    bc74:	91 83       	std	Z+1, r25	; 0x01
    bc76:	80 83       	st	Z, r24
    bc78:	8c 0c       	add	r8, r12
    bc7a:	9d 1c       	adc	r9, r13
    bc7c:	f7 01       	movw	r30, r14
    bc7e:	80 89       	ldd	r24, Z+16	; 0x10
    bc80:	91 89       	ldd	r25, Z+17	; 0x11
    bc82:	a2 89       	ldd	r26, Z+18	; 0x12
    bc84:	b3 89       	ldd	r27, Z+19	; 0x13
    bc86:	8c 0d       	add	r24, r12
    bc88:	9d 1d       	adc	r25, r13
    bc8a:	a1 1d       	adc	r26, r1
    bc8c:	b1 1d       	adc	r27, r1
    bc8e:	80 8b       	std	Z+16, r24	; 0x10
    bc90:	91 8b       	std	Z+17, r25	; 0x11
    bc92:	a2 8b       	std	Z+18, r26	; 0x12
    bc94:	b3 8b       	std	Z+19, r27	; 0x13
    bc96:	f5 ce       	rjmp	.-534    	; 0xba82 <f_read+0x70>
    bc98:	80 e0       	ldi	r24, 0x00	; 0
    bc9a:	01 c0       	rjmp	.+2      	; 0xbc9e <f_read+0x28c>
    bc9c:	87 e0       	ldi	r24, 0x07	; 7
    bc9e:	90 e0       	ldi	r25, 0x00	; 0
    bca0:	26 96       	adiw	r28, 0x06	; 6
    bca2:	e2 e1       	ldi	r30, 0x12	; 18
    bca4:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000bca8 <f_write>:
    bca8:	a8 e0       	ldi	r26, 0x08	; 8
    bcaa:	b0 e0       	ldi	r27, 0x00	; 0
    bcac:	ea e5       	ldi	r30, 0x5A	; 90
    bcae:	fe e5       	ldi	r31, 0x5E	; 94
    bcb0:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    bcb4:	7c 01       	movw	r14, r24
    bcb6:	3b 01       	movw	r6, r22
    bcb8:	5a 01       	movw	r10, r20
    bcba:	38 87       	std	Y+8, r19	; 0x08
    bcbc:	2f 83       	std	Y+7, r18	; 0x07
    bcbe:	f9 01       	movw	r30, r18
    bcc0:	11 82       	std	Z+1, r1	; 0x01
    bcc2:	10 82       	st	Z, r1
    bcc4:	be 01       	movw	r22, r28
    bcc6:	6f 5f       	subi	r22, 0xFF	; 255
    bcc8:	7f 4f       	sbci	r23, 0xFF	; 255
    bcca:	0e 94 97 49 	call	0x932e	; 0x932e <validate>
    bcce:	00 97       	sbiw	r24, 0x00	; 0
    bcd0:	09 f0       	breq	.+2      	; 0xbcd4 <f_write+0x2c>
    bcd2:	7d c1       	rjmp	.+762    	; 0xbfce <f_write+0x326>
    bcd4:	f7 01       	movw	r30, r14
    bcd6:	87 85       	ldd	r24, Z+15	; 0x0f
    bcd8:	90 e0       	ldi	r25, 0x00	; 0
    bcda:	00 97       	sbiw	r24, 0x00	; 0
    bcdc:	09 f0       	breq	.+2      	; 0xbce0 <f_write+0x38>
    bcde:	77 c1       	rjmp	.+750    	; 0xbfce <f_write+0x326>
    bce0:	86 85       	ldd	r24, Z+14	; 0x0e
    bce2:	81 ff       	sbrs	r24, 1
    bce4:	72 c1       	rjmp	.+740    	; 0xbfca <f_write+0x322>
    bce6:	80 89       	ldd	r24, Z+16	; 0x10
    bce8:	91 89       	ldd	r25, Z+17	; 0x11
    bcea:	a2 89       	ldd	r26, Z+18	; 0x12
    bcec:	b3 89       	ldd	r27, Z+19	; 0x13
    bcee:	ac 01       	movw	r20, r24
    bcf0:	bd 01       	movw	r22, r26
    bcf2:	4a 0d       	add	r20, r10
    bcf4:	5b 1d       	adc	r21, r11
    bcf6:	61 1d       	adc	r22, r1
    bcf8:	71 1d       	adc	r23, r1
    bcfa:	48 17       	cp	r20, r24
    bcfc:	59 07       	cpc	r21, r25
    bcfe:	6a 07       	cpc	r22, r26
    bd00:	7b 07       	cpc	r23, r27
    bd02:	18 f4       	brcc	.+6      	; 0xbd0a <f_write+0x62>
    bd04:	5c 01       	movw	r10, r24
    bd06:	a0 94       	com	r10
    bd08:	b0 94       	com	r11
    bd0a:	97 01       	movw	r18, r14
    bd0c:	2c 5d       	subi	r18, 0xDC	; 220
    bd0e:	3f 4f       	sbci	r19, 0xFF	; 255
    bd10:	3e 83       	std	Y+6, r19	; 0x06
    bd12:	2d 83       	std	Y+5, r18	; 0x05
    bd14:	a1 14       	cp	r10, r1
    bd16:	b1 04       	cpc	r11, r1
    bd18:	09 f4       	brne	.+2      	; 0xbd1c <f_write+0x74>
    bd1a:	4d c0       	rjmp	.+154    	; 0xbdb6 <f_write+0x10e>
    bd1c:	f7 01       	movw	r30, r14
    bd1e:	40 89       	ldd	r20, Z+16	; 0x10
    bd20:	51 89       	ldd	r21, Z+17	; 0x11
    bd22:	62 89       	ldd	r22, Z+18	; 0x12
    bd24:	73 89       	ldd	r23, Z+19	; 0x13
    bd26:	db 01       	movw	r26, r22
    bd28:	ca 01       	movw	r24, r20
    bd2a:	91 70       	andi	r25, 0x01	; 1
    bd2c:	aa 27       	eor	r26, r26
    bd2e:	bb 27       	eor	r27, r27
    bd30:	89 2b       	or	r24, r25
    bd32:	8a 2b       	or	r24, r26
    bd34:	8b 2b       	or	r24, r27
    bd36:	09 f0       	breq	.+2      	; 0xbd3a <f_write+0x92>
    bd38:	05 c1       	rjmp	.+522    	; 0xbf44 <f_write+0x29c>
    bd3a:	e9 81       	ldd	r30, Y+1	; 0x01
    bd3c:	fa 81       	ldd	r31, Y+2	; 0x02
    bd3e:	81 84       	ldd	r8, Z+9	; 0x09
    bd40:	92 84       	ldd	r9, Z+10	; 0x0a
    bd42:	f1 e0       	ldi	r31, 0x01	; 1
    bd44:	8f 1a       	sub	r8, r31
    bd46:	91 08       	sbc	r9, r1
    bd48:	db 01       	movw	r26, r22
    bd4a:	ca 01       	movw	r24, r20
    bd4c:	e9 e0       	ldi	r30, 0x09	; 9
    bd4e:	b6 95       	lsr	r27
    bd50:	a7 95       	ror	r26
    bd52:	97 95       	ror	r25
    bd54:	87 95       	ror	r24
    bd56:	ea 95       	dec	r30
    bd58:	d1 f7       	brne	.-12     	; 0xbd4e <f_write+0xa6>
    bd5a:	88 22       	and	r8, r24
    bd5c:	99 22       	and	r9, r25
    bd5e:	81 14       	cp	r8, r1
    bd60:	91 04       	cpc	r9, r1
    bd62:	09 f0       	breq	.+2      	; 0xbd66 <f_write+0xbe>
    bd64:	51 c0       	rjmp	.+162    	; 0xbe08 <f_write+0x160>
    bd66:	f7 01       	movw	r30, r14
    bd68:	41 15       	cp	r20, r1
    bd6a:	51 05       	cpc	r21, r1
    bd6c:	61 05       	cpc	r22, r1
    bd6e:	71 05       	cpc	r23, r1
    bd70:	69 f4       	brne	.+26     	; 0xbd8c <f_write+0xe4>
    bd72:	66 81       	ldd	r22, Z+6	; 0x06
    bd74:	77 81       	ldd	r23, Z+7	; 0x07
    bd76:	80 85       	ldd	r24, Z+8	; 0x08
    bd78:	91 85       	ldd	r25, Z+9	; 0x09
    bd7a:	61 15       	cp	r22, r1
    bd7c:	71 05       	cpc	r23, r1
    bd7e:	81 05       	cpc	r24, r1
    bd80:	91 05       	cpc	r25, r1
    bd82:	f9 f4       	brne	.+62     	; 0xbdc2 <f_write+0x11a>
    bd84:	40 e0       	ldi	r20, 0x00	; 0
    bd86:	50 e0       	ldi	r21, 0x00	; 0
    bd88:	ba 01       	movw	r22, r20
    bd8a:	0d c0       	rjmp	.+26     	; 0xbda6 <f_write+0xfe>
    bd8c:	82 a1       	ldd	r24, Z+34	; 0x22
    bd8e:	93 a1       	ldd	r25, Z+35	; 0x23
    bd90:	89 2b       	or	r24, r25
    bd92:	21 f0       	breq	.+8      	; 0xbd9c <f_write+0xf4>
    bd94:	c7 01       	movw	r24, r14
    bd96:	0e 94 20 49 	call	0x9240	; 0x9240 <clmt_clust>
    bd9a:	08 c0       	rjmp	.+16     	; 0xbdac <f_write+0x104>
    bd9c:	f7 01       	movw	r30, r14
    bd9e:	44 89       	ldd	r20, Z+20	; 0x14
    bda0:	55 89       	ldd	r21, Z+21	; 0x15
    bda2:	66 89       	ldd	r22, Z+22	; 0x16
    bda4:	77 89       	ldd	r23, Z+23	; 0x17
    bda6:	c7 01       	movw	r24, r14
    bda8:	0e 94 5f 52 	call	0xa4be	; 0xa4be <create_chain>
    bdac:	61 15       	cp	r22, r1
    bdae:	71 05       	cpc	r23, r1
    bdb0:	81 05       	cpc	r24, r1
    bdb2:	91 05       	cpc	r25, r1
    bdb4:	31 f4       	brne	.+12     	; 0xbdc2 <f_write+0x11a>
    bdb6:	f7 01       	movw	r30, r14
    bdb8:	86 85       	ldd	r24, Z+14	; 0x0e
    bdba:	80 64       	ori	r24, 0x40	; 64
    bdbc:	86 87       	std	Z+14, r24	; 0x0e
    bdbe:	80 e0       	ldi	r24, 0x00	; 0
    bdc0:	05 c1       	rjmp	.+522    	; 0xbfcc <f_write+0x324>
    bdc2:	61 30       	cpi	r22, 0x01	; 1
    bdc4:	71 05       	cpc	r23, r1
    bdc6:	81 05       	cpc	r24, r1
    bdc8:	91 05       	cpc	r25, r1
    bdca:	11 f4       	brne	.+4      	; 0xbdd0 <f_write+0x128>
    bdcc:	82 e0       	ldi	r24, 0x02	; 2
    bdce:	07 c0       	rjmp	.+14     	; 0xbdde <f_write+0x136>
    bdd0:	6f 3f       	cpi	r22, 0xFF	; 255
    bdd2:	ff ef       	ldi	r31, 0xFF	; 255
    bdd4:	7f 07       	cpc	r23, r31
    bdd6:	8f 07       	cpc	r24, r31
    bdd8:	9f 07       	cpc	r25, r31
    bdda:	21 f4       	brne	.+8      	; 0xbde4 <f_write+0x13c>
    bddc:	81 e0       	ldi	r24, 0x01	; 1
    bdde:	f7 01       	movw	r30, r14
    bde0:	87 87       	std	Z+15, r24	; 0x0f
    bde2:	f4 c0       	rjmp	.+488    	; 0xbfcc <f_write+0x324>
    bde4:	f7 01       	movw	r30, r14
    bde6:	64 8b       	std	Z+20, r22	; 0x14
    bde8:	75 8b       	std	Z+21, r23	; 0x15
    bdea:	86 8b       	std	Z+22, r24	; 0x16
    bdec:	97 8b       	std	Z+23, r25	; 0x17
    bdee:	06 81       	ldd	r16, Z+6	; 0x06
    bdf0:	17 81       	ldd	r17, Z+7	; 0x07
    bdf2:	20 85       	ldd	r18, Z+8	; 0x08
    bdf4:	31 85       	ldd	r19, Z+9	; 0x09
    bdf6:	01 15       	cp	r16, r1
    bdf8:	11 05       	cpc	r17, r1
    bdfa:	21 05       	cpc	r18, r1
    bdfc:	31 05       	cpc	r19, r1
    bdfe:	21 f4       	brne	.+8      	; 0xbe08 <f_write+0x160>
    be00:	66 83       	std	Z+6, r22	; 0x06
    be02:	77 83       	std	Z+7, r23	; 0x07
    be04:	80 87       	std	Z+8, r24	; 0x08
    be06:	91 87       	std	Z+9, r25	; 0x09
    be08:	f7 01       	movw	r30, r14
    be0a:	86 85       	ldd	r24, Z+14	; 0x0e
    be0c:	87 ff       	sbrs	r24, 7
    be0e:	13 c0       	rjmp	.+38     	; 0xbe36 <f_write+0x18e>
    be10:	20 8d       	ldd	r18, Z+24	; 0x18
    be12:	31 8d       	ldd	r19, Z+25	; 0x19
    be14:	42 8d       	ldd	r20, Z+26	; 0x1a
    be16:	53 8d       	ldd	r21, Z+27	; 0x1b
    be18:	e9 81       	ldd	r30, Y+1	; 0x01
    be1a:	fa 81       	ldd	r31, Y+2	; 0x02
    be1c:	01 e0       	ldi	r16, 0x01	; 1
    be1e:	10 e0       	ldi	r17, 0x00	; 0
    be20:	6d 81       	ldd	r22, Y+5	; 0x05
    be22:	7e 81       	ldd	r23, Y+6	; 0x06
    be24:	81 81       	ldd	r24, Z+1	; 0x01
    be26:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    be2a:	89 2b       	or	r24, r25
    be2c:	b9 f6       	brne	.-82     	; 0xbddc <f_write+0x134>
    be2e:	f7 01       	movw	r30, r14
    be30:	86 85       	ldd	r24, Z+14	; 0x0e
    be32:	8f 77       	andi	r24, 0x7F	; 127
    be34:	86 87       	std	Z+14, r24	; 0x0e
    be36:	29 81       	ldd	r18, Y+1	; 0x01
    be38:	3a 81       	ldd	r19, Y+2	; 0x02
    be3a:	3c 83       	std	Y+4, r19	; 0x04
    be3c:	2b 83       	std	Y+3, r18	; 0x03
    be3e:	f7 01       	movw	r30, r14
    be40:	44 89       	ldd	r20, Z+20	; 0x14
    be42:	55 89       	ldd	r21, Z+21	; 0x15
    be44:	66 89       	ldd	r22, Z+22	; 0x16
    be46:	77 89       	ldd	r23, Z+23	; 0x17
    be48:	c9 01       	movw	r24, r18
    be4a:	0e 94 f8 48 	call	0x91f0	; 0x91f0 <clst2sect>
    be4e:	61 15       	cp	r22, r1
    be50:	71 05       	cpc	r23, r1
    be52:	81 05       	cpc	r24, r1
    be54:	91 05       	cpc	r25, r1
    be56:	09 f4       	brne	.+2      	; 0xbe5a <f_write+0x1b2>
    be58:	b9 cf       	rjmp	.-142    	; 0xbdcc <f_write+0x124>
    be5a:	1b 01       	movw	r2, r22
    be5c:	2c 01       	movw	r4, r24
    be5e:	28 0c       	add	r2, r8
    be60:	39 1c       	adc	r3, r9
    be62:	41 1c       	adc	r4, r1
    be64:	51 1c       	adc	r5, r1
    be66:	65 01       	movw	r12, r10
    be68:	cd 2c       	mov	r12, r13
    be6a:	dd 24       	eor	r13, r13
    be6c:	c6 94       	lsr	r12
    be6e:	c1 14       	cp	r12, r1
    be70:	d1 04       	cpc	r13, r1
    be72:	f1 f1       	breq	.+124    	; 0xbef0 <f_write+0x248>
    be74:	eb 81       	ldd	r30, Y+3	; 0x03
    be76:	fc 81       	ldd	r31, Y+4	; 0x04
    be78:	81 85       	ldd	r24, Z+9	; 0x09
    be7a:	92 85       	ldd	r25, Z+10	; 0x0a
    be7c:	94 01       	movw	r18, r8
    be7e:	2c 0d       	add	r18, r12
    be80:	3d 1d       	adc	r19, r13
    be82:	82 17       	cp	r24, r18
    be84:	93 07       	cpc	r25, r19
    be86:	18 f4       	brcc	.+6      	; 0xbe8e <f_write+0x1e6>
    be88:	6c 01       	movw	r12, r24
    be8a:	c8 18       	sub	r12, r8
    be8c:	d9 08       	sbc	r13, r9
    be8e:	86 01       	movw	r16, r12
    be90:	a2 01       	movw	r20, r4
    be92:	91 01       	movw	r18, r2
    be94:	b3 01       	movw	r22, r6
    be96:	eb 81       	ldd	r30, Y+3	; 0x03
    be98:	fc 81       	ldd	r31, Y+4	; 0x04
    be9a:	81 81       	ldd	r24, Z+1	; 0x01
    be9c:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    bea0:	89 2b       	or	r24, r25
    bea2:	09 f0       	breq	.+2      	; 0xbea6 <f_write+0x1fe>
    bea4:	9b cf       	rjmp	.-202    	; 0xbddc <f_write+0x134>
    bea6:	f7 01       	movw	r30, r14
    bea8:	80 8d       	ldd	r24, Z+24	; 0x18
    beaa:	91 8d       	ldd	r25, Z+25	; 0x19
    beac:	a2 8d       	ldd	r26, Z+26	; 0x1a
    beae:	b3 8d       	ldd	r27, Z+27	; 0x1b
    beb0:	82 19       	sub	r24, r2
    beb2:	93 09       	sbc	r25, r3
    beb4:	a4 09       	sbc	r26, r4
    beb6:	b5 09       	sbc	r27, r5
    beb8:	a6 01       	movw	r20, r12
    beba:	60 e0       	ldi	r22, 0x00	; 0
    bebc:	70 e0       	ldi	r23, 0x00	; 0
    bebe:	84 17       	cp	r24, r20
    bec0:	95 07       	cpc	r25, r21
    bec2:	a6 07       	cpc	r26, r22
    bec4:	b7 07       	cpc	r27, r23
    bec6:	80 f4       	brcc	.+32     	; 0xbee8 <f_write+0x240>
    bec8:	98 2f       	mov	r25, r24
    beca:	88 27       	eor	r24, r24
    becc:	99 0f       	add	r25, r25
    bece:	b3 01       	movw	r22, r6
    bed0:	68 0f       	add	r22, r24
    bed2:	79 1f       	adc	r23, r25
    bed4:	40 e0       	ldi	r20, 0x00	; 0
    bed6:	52 e0       	ldi	r21, 0x02	; 2
    bed8:	8d 81       	ldd	r24, Y+5	; 0x05
    beda:	9e 81       	ldd	r25, Y+6	; 0x06
    bedc:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
    bee0:	f7 01       	movw	r30, r14
    bee2:	86 85       	ldd	r24, Z+14	; 0x0e
    bee4:	8f 77       	andi	r24, 0x7F	; 127
    bee6:	86 87       	std	Z+14, r24	; 0x0e
    bee8:	dc 2c       	mov	r13, r12
    beea:	cc 24       	eor	r12, r12
    beec:	dd 0c       	add	r13, r13
    beee:	43 c0       	rjmp	.+134    	; 0xbf76 <f_write+0x2ce>
    bef0:	f7 01       	movw	r30, r14
    bef2:	80 8d       	ldd	r24, Z+24	; 0x18
    bef4:	91 8d       	ldd	r25, Z+25	; 0x19
    bef6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bef8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    befa:	28 16       	cp	r2, r24
    befc:	39 06       	cpc	r3, r25
    befe:	4a 06       	cpc	r4, r26
    bf00:	5b 06       	cpc	r5, r27
    bf02:	d9 f0       	breq	.+54     	; 0xbf3a <f_write+0x292>
    bf04:	40 89       	ldd	r20, Z+16	; 0x10
    bf06:	51 89       	ldd	r21, Z+17	; 0x11
    bf08:	62 89       	ldd	r22, Z+18	; 0x12
    bf0a:	73 89       	ldd	r23, Z+19	; 0x13
    bf0c:	82 85       	ldd	r24, Z+10	; 0x0a
    bf0e:	93 85       	ldd	r25, Z+11	; 0x0b
    bf10:	a4 85       	ldd	r26, Z+12	; 0x0c
    bf12:	b5 85       	ldd	r27, Z+13	; 0x0d
    bf14:	48 17       	cp	r20, r24
    bf16:	59 07       	cpc	r21, r25
    bf18:	6a 07       	cpc	r22, r26
    bf1a:	7b 07       	cpc	r23, r27
    bf1c:	70 f4       	brcc	.+28     	; 0xbf3a <f_write+0x292>
    bf1e:	01 e0       	ldi	r16, 0x01	; 1
    bf20:	10 e0       	ldi	r17, 0x00	; 0
    bf22:	a2 01       	movw	r20, r4
    bf24:	91 01       	movw	r18, r2
    bf26:	6d 81       	ldd	r22, Y+5	; 0x05
    bf28:	7e 81       	ldd	r23, Y+6	; 0x06
    bf2a:	eb 81       	ldd	r30, Y+3	; 0x03
    bf2c:	fc 81       	ldd	r31, Y+4	; 0x04
    bf2e:	81 81       	ldd	r24, Z+1	; 0x01
    bf30:	0e 94 63 6b 	call	0xd6c6	; 0xd6c6 <disk_read>
    bf34:	89 2b       	or	r24, r25
    bf36:	09 f0       	breq	.+2      	; 0xbf3a <f_write+0x292>
    bf38:	51 cf       	rjmp	.-350    	; 0xbddc <f_write+0x134>
    bf3a:	f7 01       	movw	r30, r14
    bf3c:	20 8e       	std	Z+24, r2	; 0x18
    bf3e:	31 8e       	std	Z+25, r3	; 0x19
    bf40:	42 8e       	std	Z+26, r4	; 0x1a
    bf42:	53 8e       	std	Z+27, r5	; 0x1b
    bf44:	f7 01       	movw	r30, r14
    bf46:	80 89       	ldd	r24, Z+16	; 0x10
    bf48:	91 89       	ldd	r25, Z+17	; 0x11
    bf4a:	91 70       	andi	r25, 0x01	; 1
    bf4c:	20 e0       	ldi	r18, 0x00	; 0
    bf4e:	32 e0       	ldi	r19, 0x02	; 2
    bf50:	28 1b       	sub	r18, r24
    bf52:	39 0b       	sbc	r19, r25
    bf54:	65 01       	movw	r12, r10
    bf56:	2a 15       	cp	r18, r10
    bf58:	3b 05       	cpc	r19, r11
    bf5a:	08 f4       	brcc	.+2      	; 0xbf5e <f_write+0x2b6>
    bf5c:	69 01       	movw	r12, r18
    bf5e:	a6 01       	movw	r20, r12
    bf60:	b3 01       	movw	r22, r6
    bf62:	2d 81       	ldd	r18, Y+5	; 0x05
    bf64:	3e 81       	ldd	r19, Y+6	; 0x06
    bf66:	82 0f       	add	r24, r18
    bf68:	93 1f       	adc	r25, r19
    bf6a:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
    bf6e:	f7 01       	movw	r30, r14
    bf70:	86 85       	ldd	r24, Z+14	; 0x0e
    bf72:	80 68       	ori	r24, 0x80	; 128
    bf74:	86 87       	std	Z+14, r24	; 0x0e
    bf76:	ac 18       	sub	r10, r12
    bf78:	bd 08       	sbc	r11, r13
    bf7a:	ef 81       	ldd	r30, Y+7	; 0x07
    bf7c:	f8 85       	ldd	r31, Y+8	; 0x08
    bf7e:	80 81       	ld	r24, Z
    bf80:	91 81       	ldd	r25, Z+1	; 0x01
    bf82:	8c 0d       	add	r24, r12
    bf84:	9d 1d       	adc	r25, r13
    bf86:	91 83       	std	Z+1, r25	; 0x01
    bf88:	80 83       	st	Z, r24
    bf8a:	6c 0c       	add	r6, r12
    bf8c:	7d 1c       	adc	r7, r13
    bf8e:	f7 01       	movw	r30, r14
    bf90:	80 89       	ldd	r24, Z+16	; 0x10
    bf92:	91 89       	ldd	r25, Z+17	; 0x11
    bf94:	a2 89       	ldd	r26, Z+18	; 0x12
    bf96:	b3 89       	ldd	r27, Z+19	; 0x13
    bf98:	8c 0d       	add	r24, r12
    bf9a:	9d 1d       	adc	r25, r13
    bf9c:	a1 1d       	adc	r26, r1
    bf9e:	b1 1d       	adc	r27, r1
    bfa0:	80 8b       	std	Z+16, r24	; 0x10
    bfa2:	91 8b       	std	Z+17, r25	; 0x11
    bfa4:	a2 8b       	std	Z+18, r26	; 0x12
    bfa6:	b3 8b       	std	Z+19, r27	; 0x13
    bfa8:	42 85       	ldd	r20, Z+10	; 0x0a
    bfaa:	53 85       	ldd	r21, Z+11	; 0x0b
    bfac:	64 85       	ldd	r22, Z+12	; 0x0c
    bfae:	75 85       	ldd	r23, Z+13	; 0x0d
    bfb0:	48 17       	cp	r20, r24
    bfb2:	59 07       	cpc	r21, r25
    bfb4:	6a 07       	cpc	r22, r26
    bfb6:	7b 07       	cpc	r23, r27
    bfb8:	10 f4       	brcc	.+4      	; 0xbfbe <f_write+0x316>
    bfba:	ac 01       	movw	r20, r24
    bfbc:	bd 01       	movw	r22, r26
    bfbe:	f7 01       	movw	r30, r14
    bfc0:	42 87       	std	Z+10, r20	; 0x0a
    bfc2:	53 87       	std	Z+11, r21	; 0x0b
    bfc4:	64 87       	std	Z+12, r22	; 0x0c
    bfc6:	75 87       	std	Z+13, r23	; 0x0d
    bfc8:	a5 ce       	rjmp	.-694    	; 0xbd14 <f_write+0x6c>
    bfca:	87 e0       	ldi	r24, 0x07	; 7
    bfcc:	90 e0       	ldi	r25, 0x00	; 0
    bfce:	28 96       	adiw	r28, 0x08	; 8
    bfd0:	e2 e1       	ldi	r30, 0x12	; 18
    bfd2:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000bfd6 <f_sync>:
    bfd6:	8f 92       	push	r8
    bfd8:	9f 92       	push	r9
    bfda:	af 92       	push	r10
    bfdc:	bf 92       	push	r11
    bfde:	ef 92       	push	r14
    bfe0:	ff 92       	push	r15
    bfe2:	0f 93       	push	r16
    bfe4:	1f 93       	push	r17
    bfe6:	cf 93       	push	r28
    bfe8:	df 93       	push	r29
    bfea:	00 d0       	rcall	.+0      	; 0xbfec <f_sync+0x16>
    bfec:	cd b7       	in	r28, 0x3d	; 61
    bfee:	de b7       	in	r29, 0x3e	; 62
    bff0:	7c 01       	movw	r14, r24
    bff2:	be 01       	movw	r22, r28
    bff4:	6f 5f       	subi	r22, 0xFF	; 255
    bff6:	7f 4f       	sbci	r23, 0xFF	; 255
    bff8:	0e 94 97 49 	call	0x932e	; 0x932e <validate>
    bffc:	00 97       	sbiw	r24, 0x00	; 0
    bffe:	09 f0       	breq	.+2      	; 0xc002 <f_sync+0x2c>
    c000:	5d c0       	rjmp	.+186    	; 0xc0bc <f_sync+0xe6>
    c002:	f7 01       	movw	r30, r14
    c004:	86 85       	ldd	r24, Z+14	; 0x0e
    c006:	86 ff       	sbrs	r24, 6
    c008:	55 c0       	rjmp	.+170    	; 0xc0b4 <f_sync+0xde>
    c00a:	87 ff       	sbrs	r24, 7
    c00c:	15 c0       	rjmp	.+42     	; 0xc038 <f_sync+0x62>
    c00e:	20 8d       	ldd	r18, Z+24	; 0x18
    c010:	31 8d       	ldd	r19, Z+25	; 0x19
    c012:	42 8d       	ldd	r20, Z+26	; 0x1a
    c014:	53 8d       	ldd	r21, Z+27	; 0x1b
    c016:	e9 81       	ldd	r30, Y+1	; 0x01
    c018:	fa 81       	ldd	r31, Y+2	; 0x02
    c01a:	01 e0       	ldi	r16, 0x01	; 1
    c01c:	10 e0       	ldi	r17, 0x00	; 0
    c01e:	b7 01       	movw	r22, r14
    c020:	6c 5d       	subi	r22, 0xDC	; 220
    c022:	7f 4f       	sbci	r23, 0xFF	; 255
    c024:	81 81       	ldd	r24, Z+1	; 0x01
    c026:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    c02a:	89 2b       	or	r24, r25
    c02c:	09 f0       	breq	.+2      	; 0xc030 <f_sync+0x5a>
    c02e:	44 c0       	rjmp	.+136    	; 0xc0b8 <f_sync+0xe2>
    c030:	f7 01       	movw	r30, r14
    c032:	86 85       	ldd	r24, Z+14	; 0x0e
    c034:	8f 77       	andi	r24, 0x7F	; 127
    c036:	86 87       	std	Z+14, r24	; 0x0e
    c038:	0e 94 18 72 	call	0xe430	; 0xe430 <get_fattime>
    c03c:	4b 01       	movw	r8, r22
    c03e:	5c 01       	movw	r10, r24
    c040:	f7 01       	movw	r30, r14
    c042:	44 8d       	ldd	r20, Z+28	; 0x1c
    c044:	55 8d       	ldd	r21, Z+29	; 0x1d
    c046:	66 8d       	ldd	r22, Z+30	; 0x1e
    c048:	77 8d       	ldd	r23, Z+31	; 0x1f
    c04a:	89 81       	ldd	r24, Y+1	; 0x01
    c04c:	9a 81       	ldd	r25, Y+2	; 0x02
    c04e:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    c052:	00 97       	sbiw	r24, 0x00	; 0
    c054:	99 f5       	brne	.+102    	; 0xc0bc <f_sync+0xe6>
    c056:	f7 01       	movw	r30, r14
    c058:	00 a1       	ldd	r16, Z+32	; 0x20
    c05a:	11 a1       	ldd	r17, Z+33	; 0x21
    c05c:	f8 01       	movw	r30, r16
    c05e:	83 85       	ldd	r24, Z+11	; 0x0b
    c060:	80 62       	ori	r24, 0x20	; 32
    c062:	83 87       	std	Z+11, r24	; 0x0b
    c064:	f7 01       	movw	r30, r14
    c066:	26 81       	ldd	r18, Z+6	; 0x06
    c068:	37 81       	ldd	r19, Z+7	; 0x07
    c06a:	40 85       	ldd	r20, Z+8	; 0x08
    c06c:	51 85       	ldd	r21, Z+9	; 0x09
    c06e:	b8 01       	movw	r22, r16
    c070:	80 81       	ld	r24, Z
    c072:	91 81       	ldd	r25, Z+1	; 0x01
    c074:	0e 94 a0 4b 	call	0x9740	; 0x9740 <st_clust.isra.5>
    c078:	f7 01       	movw	r30, r14
    c07a:	42 85       	ldd	r20, Z+10	; 0x0a
    c07c:	53 85       	ldd	r21, Z+11	; 0x0b
    c07e:	64 85       	ldd	r22, Z+12	; 0x0c
    c080:	75 85       	ldd	r23, Z+13	; 0x0d
    c082:	c8 01       	movw	r24, r16
    c084:	4c 96       	adiw	r24, 0x1c	; 28
    c086:	0e 94 54 48 	call	0x90a8	; 0x90a8 <st_dword>
    c08a:	b5 01       	movw	r22, r10
    c08c:	a4 01       	movw	r20, r8
    c08e:	c8 01       	movw	r24, r16
    c090:	46 96       	adiw	r24, 0x16	; 22
    c092:	0e 94 54 48 	call	0x90a8	; 0x90a8 <st_dword>
    c096:	f8 01       	movw	r30, r16
    c098:	12 8a       	std	Z+18, r1	; 0x12
    c09a:	13 8a       	std	Z+19, r1	; 0x13
    c09c:	89 81       	ldd	r24, Y+1	; 0x01
    c09e:	9a 81       	ldd	r25, Y+2	; 0x02
    c0a0:	21 e0       	ldi	r18, 0x01	; 1
    c0a2:	fc 01       	movw	r30, r24
    c0a4:	23 83       	std	Z+3, r18	; 0x03
    c0a6:	0e 94 00 4c 	call	0x9800	; 0x9800 <sync_fs>
    c0aa:	f7 01       	movw	r30, r14
    c0ac:	26 85       	ldd	r18, Z+14	; 0x0e
    c0ae:	2f 7b       	andi	r18, 0xBF	; 191
    c0b0:	26 87       	std	Z+14, r18	; 0x0e
    c0b2:	04 c0       	rjmp	.+8      	; 0xc0bc <f_sync+0xe6>
    c0b4:	80 e0       	ldi	r24, 0x00	; 0
    c0b6:	01 c0       	rjmp	.+2      	; 0xc0ba <f_sync+0xe4>
    c0b8:	81 e0       	ldi	r24, 0x01	; 1
    c0ba:	90 e0       	ldi	r25, 0x00	; 0
    c0bc:	0f 90       	pop	r0
    c0be:	0f 90       	pop	r0
    c0c0:	df 91       	pop	r29
    c0c2:	cf 91       	pop	r28
    c0c4:	1f 91       	pop	r17
    c0c6:	0f 91       	pop	r16
    c0c8:	ff 90       	pop	r15
    c0ca:	ef 90       	pop	r14
    c0cc:	bf 90       	pop	r11
    c0ce:	af 90       	pop	r10
    c0d0:	9f 90       	pop	r9
    c0d2:	8f 90       	pop	r8
    c0d4:	08 95       	ret

0000c0d6 <f_close>:
    c0d6:	a2 e0       	ldi	r26, 0x02	; 2
    c0d8:	b0 e0       	ldi	r27, 0x00	; 0
    c0da:	e1 e7       	ldi	r30, 0x71	; 113
    c0dc:	f0 e6       	ldi	r31, 0x60	; 96
    c0de:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    c0e2:	8c 01       	movw	r16, r24
    c0e4:	78 df       	rcall	.-272    	; 0xbfd6 <f_sync>
    c0e6:	00 97       	sbiw	r24, 0x00	; 0
    c0e8:	59 f4       	brne	.+22     	; 0xc100 <f_close+0x2a>
    c0ea:	be 01       	movw	r22, r28
    c0ec:	6f 5f       	subi	r22, 0xFF	; 255
    c0ee:	7f 4f       	sbci	r23, 0xFF	; 255
    c0f0:	c8 01       	movw	r24, r16
    c0f2:	0e 94 97 49 	call	0x932e	; 0x932e <validate>
    c0f6:	00 97       	sbiw	r24, 0x00	; 0
    c0f8:	19 f4       	brne	.+6      	; 0xc100 <f_close+0x2a>
    c0fa:	f8 01       	movw	r30, r16
    c0fc:	11 82       	std	Z+1, r1	; 0x01
    c0fe:	10 82       	st	Z, r1
    c100:	22 96       	adiw	r28, 0x02	; 2
    c102:	e4 e0       	ldi	r30, 0x04	; 4
    c104:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

0000c108 <f_chdir>:
    c108:	a2 e3       	ldi	r26, 0x32	; 50
    c10a:	b0 e0       	ldi	r27, 0x00	; 0
    c10c:	ea e8       	ldi	r30, 0x8A	; 138
    c10e:	f0 e6       	ldi	r31, 0x60	; 96
    c110:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    c114:	9a ab       	std	Y+50, r25	; 0x32
    c116:	89 ab       	std	Y+49, r24	; 0x31
    c118:	40 e0       	ldi	r20, 0x00	; 0
    c11a:	be 01       	movw	r22, r28
    c11c:	61 5d       	subi	r22, 0xD1	; 209
    c11e:	7f 4f       	sbci	r23, 0xFF	; 255
    c120:	ce 01       	movw	r24, r28
    c122:	c1 96       	adiw	r24, 0x31	; 49
    c124:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
    c128:	00 97       	sbiw	r24, 0x00	; 0
    c12a:	09 f0       	breq	.+2      	; 0xc12e <f_chdir+0x26>
    c12c:	44 c0       	rjmp	.+136    	; 0xc1b6 <f_chdir+0xae>
    c12e:	8f a5       	ldd	r24, Y+47	; 0x2f
    c130:	98 a9       	ldd	r25, Y+48	; 0x30
    c132:	9a 83       	std	Y+2, r25	; 0x02
    c134:	89 83       	std	Y+1, r24	; 0x01
    c136:	80 e0       	ldi	r24, 0x00	; 0
    c138:	92 e0       	ldi	r25, 0x02	; 2
    c13a:	0e 94 a7 6a 	call	0xd54e	; 0xd54e <ff_memalloc>
    c13e:	7c 01       	movw	r14, r24
    c140:	00 97       	sbiw	r24, 0x00	; 0
    c142:	a9 f1       	breq	.+106    	; 0xc1ae <f_chdir+0xa6>
    c144:	ef a5       	ldd	r30, Y+47	; 0x2f
    c146:	f8 a9       	ldd	r31, Y+48	; 0x30
    c148:	94 87       	std	Z+12, r25	; 0x0c
    c14a:	83 87       	std	Z+11, r24	; 0x0b
    c14c:	69 a9       	ldd	r22, Y+49	; 0x31
    c14e:	7a a9       	ldd	r23, Y+50	; 0x32
    c150:	ce 01       	movw	r24, r28
    c152:	01 96       	adiw	r24, 0x01	; 1
    c154:	39 d8       	rcall	.-3982   	; 0xb1c8 <follow_path>
    c156:	8c 01       	movw	r16, r24
    c158:	89 2b       	or	r24, r25
    c15a:	09 f5       	brne	.+66     	; 0xc19e <f_chdir+0x96>
    c15c:	88 a5       	ldd	r24, Y+40	; 0x28
    c15e:	87 ff       	sbrs	r24, 7
    c160:	0b c0       	rjmp	.+22     	; 0xc178 <f_chdir+0x70>
    c162:	ef a5       	ldd	r30, Y+47	; 0x2f
    c164:	f8 a9       	ldd	r31, Y+48	; 0x30
    c166:	8f 81       	ldd	r24, Y+7	; 0x07
    c168:	98 85       	ldd	r25, Y+8	; 0x08
    c16a:	a9 85       	ldd	r26, Y+9	; 0x09
    c16c:	ba 85       	ldd	r27, Y+10	; 0x0a
    c16e:	85 8b       	std	Z+21, r24	; 0x15
    c170:	96 8b       	std	Z+22, r25	; 0x16
    c172:	a7 8b       	std	Z+23, r26	; 0x17
    c174:	b0 8f       	std	Z+24, r27	; 0x18
    c176:	13 c0       	rjmp	.+38     	; 0xc19e <f_chdir+0x96>
    c178:	8d 81       	ldd	r24, Y+5	; 0x05
    c17a:	84 ff       	sbrs	r24, 4
    c17c:	0e c0       	rjmp	.+28     	; 0xc19a <f_chdir+0x92>
    c17e:	cf a4       	ldd	r12, Y+47	; 0x2f
    c180:	d8 a8       	ldd	r13, Y+48	; 0x30
    c182:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c184:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c186:	f6 01       	movw	r30, r12
    c188:	80 81       	ld	r24, Z
    c18a:	0e 94 8b 4b 	call	0x9716	; 0x9716 <ld_clust.isra.4>
    c18e:	f6 01       	movw	r30, r12
    c190:	65 8b       	std	Z+21, r22	; 0x15
    c192:	76 8b       	std	Z+22, r23	; 0x16
    c194:	87 8b       	std	Z+23, r24	; 0x17
    c196:	90 8f       	std	Z+24, r25	; 0x18
    c198:	02 c0       	rjmp	.+4      	; 0xc19e <f_chdir+0x96>
    c19a:	05 e0       	ldi	r16, 0x05	; 5
    c19c:	10 e0       	ldi	r17, 0x00	; 0
    c19e:	c7 01       	movw	r24, r14
    c1a0:	0e 94 aa 6a 	call	0xd554	; 0xd554 <ff_memfree>
    c1a4:	04 30       	cpi	r16, 0x04	; 4
    c1a6:	11 05       	cpc	r17, r1
    c1a8:	29 f4       	brne	.+10     	; 0xc1b4 <f_chdir+0xac>
    c1aa:	85 e0       	ldi	r24, 0x05	; 5
    c1ac:	01 c0       	rjmp	.+2      	; 0xc1b0 <f_chdir+0xa8>
    c1ae:	81 e1       	ldi	r24, 0x11	; 17
    c1b0:	90 e0       	ldi	r25, 0x00	; 0
    c1b2:	01 c0       	rjmp	.+2      	; 0xc1b6 <f_chdir+0xae>
    c1b4:	c8 01       	movw	r24, r16
    c1b6:	e2 96       	adiw	r28, 0x32	; 50
    c1b8:	e8 e0       	ldi	r30, 0x08	; 8
    c1ba:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000c1be <f_getcwd>:
    c1be:	a8 e4       	ldi	r26, 0x48	; 72
    c1c0:	b1 e0       	ldi	r27, 0x01	; 1
    c1c2:	e5 ee       	ldi	r30, 0xE5	; 229
    c1c4:	f0 e6       	ldi	r31, 0x60	; 96
    c1c6:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    c1ca:	c9 5b       	subi	r28, 0xB9	; 185
    c1cc:	de 4f       	sbci	r29, 0xFE	; 254
    c1ce:	99 83       	std	Y+1, r25	; 0x01
    c1d0:	88 83       	st	Y, r24
    c1d2:	c7 54       	subi	r28, 0x47	; 71
    c1d4:	d1 40       	sbci	r29, 0x01	; 1
    c1d6:	4b 01       	movw	r8, r22
    c1d8:	7c 01       	movw	r14, r24
    c1da:	fc 01       	movw	r30, r24
    c1dc:	10 82       	st	Z, r1
    c1de:	40 e0       	ldi	r20, 0x00	; 0
    c1e0:	be 01       	movw	r22, r28
    c1e2:	6b 5b       	subi	r22, 0xBB	; 187
    c1e4:	7e 4f       	sbci	r23, 0xFE	; 254
    c1e6:	ce 01       	movw	r24, r28
    c1e8:	89 5b       	subi	r24, 0xB9	; 185
    c1ea:	9e 4f       	sbci	r25, 0xFE	; 254
    c1ec:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
    c1f0:	1c 01       	movw	r2, r24
    c1f2:	89 2b       	or	r24, r25
    c1f4:	09 f0       	breq	.+2      	; 0xc1f8 <f_getcwd+0x3a>
    c1f6:	03 c1       	rjmp	.+518    	; 0xc3fe <f_getcwd+0x240>
    c1f8:	cb 5b       	subi	r28, 0xBB	; 187
    c1fa:	de 4f       	sbci	r29, 0xFE	; 254
    c1fc:	88 81       	ld	r24, Y
    c1fe:	99 81       	ldd	r25, Y+1	; 0x01
    c200:	c5 54       	subi	r28, 0x45	; 69
    c202:	d1 40       	sbci	r29, 0x01	; 1
    c204:	c9 5e       	subi	r28, 0xE9	; 233
    c206:	de 4f       	sbci	r29, 0xFE	; 254
    c208:	99 83       	std	Y+1, r25	; 0x01
    c20a:	88 83       	st	Y, r24
    c20c:	c7 51       	subi	r28, 0x17	; 23
    c20e:	d1 40       	sbci	r29, 0x01	; 1
    c210:	80 e0       	ldi	r24, 0x00	; 0
    c212:	92 e0       	ldi	r25, 0x02	; 2
    c214:	0e 94 a7 6a 	call	0xd54e	; 0xd54e <ff_memalloc>
    c218:	5c 01       	movw	r10, r24
    c21a:	00 97       	sbiw	r24, 0x00	; 0
    c21c:	09 f4       	brne	.+2      	; 0xc220 <f_getcwd+0x62>
    c21e:	f3 c0       	rjmp	.+486    	; 0xc406 <f_getcwd+0x248>
    c220:	cb 5b       	subi	r28, 0xBB	; 187
    c222:	de 4f       	sbci	r29, 0xFE	; 254
    c224:	e8 81       	ld	r30, Y
    c226:	f9 81       	ldd	r31, Y+1	; 0x01
    c228:	c5 54       	subi	r28, 0x45	; 69
    c22a:	d1 40       	sbci	r29, 0x01	; 1
    c22c:	94 87       	std	Z+12, r25	; 0x0c
    c22e:	83 87       	std	Z+11, r24	; 0x0b
    c230:	85 89       	ldd	r24, Z+21	; 0x15
    c232:	96 89       	ldd	r25, Z+22	; 0x16
    c234:	a7 89       	ldd	r26, Z+23	; 0x17
    c236:	b0 8d       	ldd	r27, Z+24	; 0x18
    c238:	c3 5e       	subi	r28, 0xE3	; 227
    c23a:	de 4f       	sbci	r29, 0xFE	; 254
    c23c:	88 83       	st	Y, r24
    c23e:	99 83       	std	Y+1, r25	; 0x01
    c240:	aa 83       	std	Y+2, r26	; 0x02
    c242:	bb 83       	std	Y+3, r27	; 0x03
    c244:	cd 51       	subi	r28, 0x1D	; 29
    c246:	d1 40       	sbci	r29, 0x01	; 1
    c248:	84 01       	movw	r16, r8
    c24a:	ce 01       	movw	r24, r28
    c24c:	01 96       	adiw	r24, 0x01	; 1
    c24e:	6c 01       	movw	r12, r24
    c250:	c3 5e       	subi	r28, 0xE3	; 227
    c252:	de 4f       	sbci	r29, 0xFE	; 254
    c254:	48 80       	ld	r4, Y
    c256:	59 80       	ldd	r5, Y+1	; 0x01
    c258:	6a 80       	ldd	r6, Y+2	; 0x02
    c25a:	7b 80       	ldd	r7, Y+3	; 0x03
    c25c:	cd 51       	subi	r28, 0x1D	; 29
    c25e:	d1 40       	sbci	r29, 0x01	; 1
    c260:	41 14       	cp	r4, r1
    c262:	51 04       	cpc	r5, r1
    c264:	61 04       	cpc	r6, r1
    c266:	71 04       	cpc	r7, r1
    c268:	09 f4       	brne	.+2      	; 0xc26c <f_getcwd+0xae>
    c26a:	a3 c0       	rjmp	.+326    	; 0xc3b2 <f_getcwd+0x1f4>
    c26c:	40 e2       	ldi	r20, 0x20	; 32
    c26e:	50 e0       	ldi	r21, 0x00	; 0
    c270:	60 e0       	ldi	r22, 0x00	; 0
    c272:	70 e0       	ldi	r23, 0x00	; 0
    c274:	ce 01       	movw	r24, r28
    c276:	89 5e       	subi	r24, 0xE9	; 233
    c278:	9e 4f       	sbci	r25, 0xFE	; 254
    c27a:	0e 94 9e 51 	call	0xa33c	; 0xa33c <dir_sdi>
    c27e:	00 97       	sbiw	r24, 0x00	; 0
    c280:	09 f0       	breq	.+2      	; 0xc284 <f_getcwd+0xc6>
    c282:	c6 c0       	rjmp	.+396    	; 0xc410 <f_getcwd+0x252>
    c284:	c3 5d       	subi	r28, 0xD3	; 211
    c286:	de 4f       	sbci	r29, 0xFE	; 254
    c288:	48 81       	ld	r20, Y
    c28a:	59 81       	ldd	r21, Y+1	; 0x01
    c28c:	6a 81       	ldd	r22, Y+2	; 0x02
    c28e:	7b 81       	ldd	r23, Y+3	; 0x03
    c290:	cd 52       	subi	r28, 0x2D	; 45
    c292:	d1 40       	sbci	r29, 0x01	; 1
    c294:	cb 5b       	subi	r28, 0xBB	; 187
    c296:	de 4f       	sbci	r29, 0xFE	; 254
    c298:	88 81       	ld	r24, Y
    c29a:	99 81       	ldd	r25, Y+1	; 0x01
    c29c:	c5 54       	subi	r28, 0x45	; 69
    c29e:	d1 40       	sbci	r29, 0x01	; 1
    c2a0:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    c2a4:	00 97       	sbiw	r24, 0x00	; 0
    c2a6:	09 f0       	breq	.+2      	; 0xc2aa <f_getcwd+0xec>
    c2a8:	b3 c0       	rjmp	.+358    	; 0xc410 <f_getcwd+0x252>
    c2aa:	cf 5c       	subi	r28, 0xCF	; 207
    c2ac:	de 4f       	sbci	r29, 0xFE	; 254
    c2ae:	68 81       	ld	r22, Y
    c2b0:	79 81       	ldd	r23, Y+1	; 0x01
    c2b2:	c1 53       	subi	r28, 0x31	; 49
    c2b4:	d1 40       	sbci	r29, 0x01	; 1
    c2b6:	cb 5b       	subi	r28, 0xBB	; 187
    c2b8:	de 4f       	sbci	r29, 0xFE	; 254
    c2ba:	e8 81       	ld	r30, Y
    c2bc:	f9 81       	ldd	r31, Y+1	; 0x01
    c2be:	c5 54       	subi	r28, 0x45	; 69
    c2c0:	d1 40       	sbci	r29, 0x01	; 1
    c2c2:	80 81       	ld	r24, Z
    c2c4:	0e 94 8b 4b 	call	0x9716	; 0x9716 <ld_clust.isra.4>
    c2c8:	c3 5e       	subi	r28, 0xE3	; 227
    c2ca:	de 4f       	sbci	r29, 0xFE	; 254
    c2cc:	68 83       	st	Y, r22
    c2ce:	79 83       	std	Y+1, r23	; 0x01
    c2d0:	8a 83       	std	Y+2, r24	; 0x02
    c2d2:	9b 83       	std	Y+3, r25	; 0x03
    c2d4:	cd 51       	subi	r28, 0x1D	; 29
    c2d6:	d1 40       	sbci	r29, 0x01	; 1
    c2d8:	40 e0       	ldi	r20, 0x00	; 0
    c2da:	50 e0       	ldi	r21, 0x00	; 0
    c2dc:	ba 01       	movw	r22, r20
    c2de:	ce 01       	movw	r24, r28
    c2e0:	89 5e       	subi	r24, 0xE9	; 233
    c2e2:	9e 4f       	sbci	r25, 0xFE	; 254
    c2e4:	0e 94 9e 51 	call	0xa33c	; 0xa33c <dir_sdi>
    c2e8:	00 97       	sbiw	r24, 0x00	; 0
    c2ea:	09 f0       	breq	.+2      	; 0xc2ee <f_getcwd+0x130>
    c2ec:	91 c0       	rjmp	.+290    	; 0xc410 <f_getcwd+0x252>
    c2ee:	60 e0       	ldi	r22, 0x00	; 0
    c2f0:	70 e0       	ldi	r23, 0x00	; 0
    c2f2:	ce 01       	movw	r24, r28
    c2f4:	89 5e       	subi	r24, 0xE9	; 233
    c2f6:	9e 4f       	sbci	r25, 0xFE	; 254
    c2f8:	0e 94 37 55 	call	0xaa6e	; 0xaa6e <dir_read>
    c2fc:	00 97       	sbiw	r24, 0x00	; 0
    c2fe:	09 f0       	breq	.+2      	; 0xc302 <f_getcwd+0x144>
    c300:	89 c0       	rjmp	.+274    	; 0xc414 <f_getcwd+0x256>
    c302:	cf 5c       	subi	r28, 0xCF	; 207
    c304:	de 4f       	sbci	r29, 0xFE	; 254
    c306:	68 81       	ld	r22, Y
    c308:	79 81       	ldd	r23, Y+1	; 0x01
    c30a:	c1 53       	subi	r28, 0x31	; 49
    c30c:	d1 40       	sbci	r29, 0x01	; 1
    c30e:	cb 5b       	subi	r28, 0xBB	; 187
    c310:	de 4f       	sbci	r29, 0xFE	; 254
    c312:	e8 81       	ld	r30, Y
    c314:	f9 81       	ldd	r31, Y+1	; 0x01
    c316:	c5 54       	subi	r28, 0x45	; 69
    c318:	d1 40       	sbci	r29, 0x01	; 1
    c31a:	80 81       	ld	r24, Z
    c31c:	0e 94 8b 4b 	call	0x9716	; 0x9716 <ld_clust.isra.4>
    c320:	46 16       	cp	r4, r22
    c322:	57 06       	cpc	r5, r23
    c324:	68 06       	cpc	r6, r24
    c326:	79 06       	cpc	r7, r25
    c328:	41 f4       	brne	.+16     	; 0xc33a <f_getcwd+0x17c>
    c32a:	b6 01       	movw	r22, r12
    c32c:	ce 01       	movw	r24, r28
    c32e:	89 5e       	subi	r24, 0xE9	; 233
    c330:	9e 4f       	sbci	r25, 0xFE	; 254
    c332:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <get_fileinfo>
    c336:	f6 01       	movw	r30, r12
    c338:	0a c0       	rjmp	.+20     	; 0xc34e <f_getcwd+0x190>
    c33a:	60 e0       	ldi	r22, 0x00	; 0
    c33c:	70 e0       	ldi	r23, 0x00	; 0
    c33e:	ce 01       	movw	r24, r28
    c340:	89 5e       	subi	r24, 0xE9	; 233
    c342:	9e 4f       	sbci	r25, 0xFE	; 254
    c344:	0e 94 16 54 	call	0xa82c	; 0xa82c <dir_next>
    c348:	00 97       	sbiw	r24, 0x00	; 0
    c34a:	89 f2       	breq	.-94     	; 0xc2ee <f_getcwd+0x130>
    c34c:	63 c0       	rjmp	.+198    	; 0xc414 <f_getcwd+0x256>
    c34e:	cf 01       	movw	r24, r30
    c350:	8c 19       	sub	r24, r12
    c352:	9d 09       	sbc	r25, r13
    c354:	31 96       	adiw	r30, 0x01	; 1
    c356:	25 89       	ldd	r18, Z+21	; 0x15
    c358:	21 11       	cpse	r18, r1
    c35a:	f9 cf       	rjmp	.-14     	; 0xc34e <f_getcwd+0x190>
    c35c:	9c 01       	movw	r18, r24
    c35e:	2f 5f       	subi	r18, 0xFF	; 255
    c360:	3f 4f       	sbci	r19, 0xFF	; 255
    c362:	02 17       	cp	r16, r18
    c364:	13 07       	cpc	r17, r19
    c366:	08 f4       	brcc	.+2      	; 0xc36a <f_getcwd+0x1ac>
    c368:	51 c0       	rjmp	.+162    	; 0xc40c <f_getcwd+0x24e>
    c36a:	f6 01       	movw	r30, r12
    c36c:	e8 0f       	add	r30, r24
    c36e:	f9 1f       	adc	r31, r25
    c370:	98 01       	movw	r18, r16
    c372:	ce 16       	cp	r12, r30
    c374:	df 06       	cpc	r13, r31
    c376:	71 f0       	breq	.+28     	; 0xc394 <f_getcwd+0x1d6>
    c378:	21 50       	subi	r18, 0x01	; 1
    c37a:	31 09       	sbc	r19, r1
    c37c:	45 89       	ldd	r20, Z+21	; 0x15
    c37e:	c9 5b       	subi	r28, 0xB9	; 185
    c380:	de 4f       	sbci	r29, 0xFE	; 254
    c382:	a8 81       	ld	r26, Y
    c384:	b9 81       	ldd	r27, Y+1	; 0x01
    c386:	c7 54       	subi	r28, 0x47	; 71
    c388:	d1 40       	sbci	r29, 0x01	; 1
    c38a:	a2 0f       	add	r26, r18
    c38c:	b3 1f       	adc	r27, r19
    c38e:	4c 93       	st	X, r20
    c390:	31 97       	sbiw	r30, 0x01	; 1
    c392:	ef cf       	rjmp	.-34     	; 0xc372 <f_getcwd+0x1b4>
    c394:	80 95       	com	r24
    c396:	90 95       	com	r25
    c398:	08 0f       	add	r16, r24
    c39a:	19 1f       	adc	r17, r25
    c39c:	c9 5b       	subi	r28, 0xB9	; 185
    c39e:	de 4f       	sbci	r29, 0xFE	; 254
    c3a0:	e8 81       	ld	r30, Y
    c3a2:	f9 81       	ldd	r31, Y+1	; 0x01
    c3a4:	c7 54       	subi	r28, 0x47	; 71
    c3a6:	d1 40       	sbci	r29, 0x01	; 1
    c3a8:	e0 0f       	add	r30, r16
    c3aa:	f1 1f       	adc	r31, r17
    c3ac:	9f e2       	ldi	r25, 0x2F	; 47
    c3ae:	90 83       	st	Z, r25
    c3b0:	4f cf       	rjmp	.-354    	; 0xc250 <f_getcwd+0x92>
    c3b2:	08 15       	cp	r16, r8
    c3b4:	19 05       	cpc	r17, r9
    c3b6:	61 f4       	brne	.+24     	; 0xc3d0 <f_getcwd+0x212>
    c3b8:	01 50       	subi	r16, 0x01	; 1
    c3ba:	11 09       	sbc	r17, r1
    c3bc:	c9 5b       	subi	r28, 0xB9	; 185
    c3be:	de 4f       	sbci	r29, 0xFE	; 254
    c3c0:	e8 81       	ld	r30, Y
    c3c2:	f9 81       	ldd	r31, Y+1	; 0x01
    c3c4:	c7 54       	subi	r28, 0x47	; 71
    c3c6:	d1 40       	sbci	r29, 0x01	; 1
    c3c8:	e0 0f       	add	r30, r16
    c3ca:	f1 1f       	adc	r31, r17
    c3cc:	8f e2       	ldi	r24, 0x2F	; 47
    c3ce:	80 83       	st	Z, r24
    c3d0:	ef ef       	ldi	r30, 0xFF	; 255
    c3d2:	ee 1a       	sub	r14, r30
    c3d4:	fe 0a       	sbc	r15, r30
    c3d6:	c9 5b       	subi	r28, 0xB9	; 185
    c3d8:	de 4f       	sbci	r29, 0xFE	; 254
    c3da:	e8 81       	ld	r30, Y
    c3dc:	f9 81       	ldd	r31, Y+1	; 0x01
    c3de:	c7 54       	subi	r28, 0x47	; 71
    c3e0:	d1 40       	sbci	r29, 0x01	; 1
    c3e2:	e0 0f       	add	r30, r16
    c3e4:	f1 1f       	adc	r31, r17
    c3e6:	80 81       	ld	r24, Z
    c3e8:	f7 01       	movw	r30, r14
    c3ea:	31 97       	sbiw	r30, 0x01	; 1
    c3ec:	80 83       	st	Z, r24
    c3ee:	0f 5f       	subi	r16, 0xFF	; 255
    c3f0:	1f 4f       	sbci	r17, 0xFF	; 255
    c3f2:	08 15       	cp	r16, r8
    c3f4:	19 05       	cpc	r17, r9
    c3f6:	60 f3       	brcs	.-40     	; 0xc3d0 <f_getcwd+0x212>
    c3f8:	c5 01       	movw	r24, r10
    c3fa:	0e 94 aa 6a 	call	0xd554	; 0xd554 <ff_memfree>
    c3fe:	f7 01       	movw	r30, r14
    c400:	10 82       	st	Z, r1
    c402:	c1 01       	movw	r24, r2
    c404:	0d c0       	rjmp	.+26     	; 0xc420 <f_getcwd+0x262>
    c406:	81 e1       	ldi	r24, 0x11	; 17
    c408:	90 e0       	ldi	r25, 0x00	; 0
    c40a:	0a c0       	rjmp	.+20     	; 0xc420 <f_getcwd+0x262>
    c40c:	81 e1       	ldi	r24, 0x11	; 17
    c40e:	90 e0       	ldi	r25, 0x00	; 0
    c410:	1c 01       	movw	r2, r24
    c412:	f2 cf       	rjmp	.-28     	; 0xc3f8 <f_getcwd+0x23a>
    c414:	84 30       	cpi	r24, 0x04	; 4
    c416:	91 05       	cpc	r25, r1
    c418:	d9 f7       	brne	.-10     	; 0xc410 <f_getcwd+0x252>
    c41a:	82 e0       	ldi	r24, 0x02	; 2
    c41c:	90 e0       	ldi	r25, 0x00	; 0
    c41e:	f8 cf       	rjmp	.-16     	; 0xc410 <f_getcwd+0x252>
    c420:	c8 5b       	subi	r28, 0xB8	; 184
    c422:	de 4f       	sbci	r29, 0xFE	; 254
    c424:	e2 e1       	ldi	r30, 0x12	; 18
    c426:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000c42a <f_lseek>:
    c42a:	aa e0       	ldi	r26, 0x0A	; 10
    c42c:	b0 e0       	ldi	r27, 0x00	; 0
    c42e:	eb e1       	ldi	r30, 0x1B	; 27
    c430:	f2 e6       	ldi	r31, 0x62	; 98
    c432:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    c436:	1c 01       	movw	r2, r24
    c438:	6a 01       	movw	r12, r20
    c43a:	7b 01       	movw	r14, r22
    c43c:	be 01       	movw	r22, r28
    c43e:	6f 5f       	subi	r22, 0xFF	; 255
    c440:	7f 4f       	sbci	r23, 0xFF	; 255
    c442:	0e 94 97 49 	call	0x932e	; 0x932e <validate>
    c446:	00 97       	sbiw	r24, 0x00	; 0
    c448:	09 f0       	breq	.+2      	; 0xc44c <f_lseek+0x22>
    c44a:	a7 c2       	rjmp	.+1358   	; 0xc99a <f_lseek+0x570>
    c44c:	f1 01       	movw	r30, r2
    c44e:	87 85       	ldd	r24, Z+15	; 0x0f
    c450:	90 e0       	ldi	r25, 0x00	; 0
    c452:	00 97       	sbiw	r24, 0x00	; 0
    c454:	09 f0       	breq	.+2      	; 0xc458 <f_lseek+0x2e>
    c456:	a1 c2       	rjmp	.+1346   	; 0xc99a <f_lseek+0x570>
    c458:	22 a1       	ldd	r18, Z+34	; 0x22
    c45a:	33 a1       	ldd	r19, Z+35	; 0x23
    c45c:	21 15       	cp	r18, r1
    c45e:	31 05       	cpc	r19, r1
    c460:	09 f4       	brne	.+2      	; 0xc464 <f_lseek+0x3a>
    c462:	2e c1       	rjmp	.+604    	; 0xc6c0 <f_lseek+0x296>
    c464:	ff ef       	ldi	r31, 0xFF	; 255
    c466:	cf 16       	cp	r12, r31
    c468:	df 06       	cpc	r13, r31
    c46a:	ef 06       	cpc	r14, r31
    c46c:	ff 06       	cpc	r15, r31
    c46e:	09 f0       	breq	.+2      	; 0xc472 <f_lseek+0x48>
    c470:	9a c0       	rjmp	.+308    	; 0xc5a6 <f_lseek+0x17c>
    c472:	89 01       	movw	r16, r18
    c474:	0c 5f       	subi	r16, 0xFC	; 252
    c476:	1f 4f       	sbci	r17, 0xFF	; 255
    c478:	d9 01       	movw	r26, r18
    c47a:	4d 91       	ld	r20, X+
    c47c:	5d 91       	ld	r21, X+
    c47e:	6d 91       	ld	r22, X+
    c480:	7c 91       	ld	r23, X
    c482:	4f 83       	std	Y+7, r20	; 0x07
    c484:	58 87       	std	Y+8, r21	; 0x08
    c486:	69 87       	std	Y+9, r22	; 0x09
    c488:	7a 87       	std	Y+10, r23	; 0x0a
    c48a:	f1 01       	movw	r30, r2
    c48c:	86 80       	ldd	r8, Z+6	; 0x06
    c48e:	97 80       	ldd	r9, Z+7	; 0x07
    c490:	a0 84       	ldd	r10, Z+8	; 0x08
    c492:	b1 84       	ldd	r11, Z+9	; 0x09
    c494:	52 e0       	ldi	r21, 0x02	; 2
    c496:	c5 2e       	mov	r12, r21
    c498:	d1 2c       	mov	r13, r1
    c49a:	e1 2c       	mov	r14, r1
    c49c:	f1 2c       	mov	r15, r1
    c49e:	81 14       	cp	r8, r1
    c4a0:	91 04       	cpc	r9, r1
    c4a2:	a1 04       	cpc	r10, r1
    c4a4:	b1 04       	cpc	r11, r1
    c4a6:	09 f4       	brne	.+2      	; 0xc4aa <f_lseek+0x80>
    c4a8:	65 c0       	rjmp	.+202    	; 0xc574 <f_lseek+0x14a>
    c4aa:	24 01       	movw	r4, r8
    c4ac:	35 01       	movw	r6, r10
    c4ae:	1b 82       	std	Y+3, r1	; 0x03
    c4b0:	1c 82       	std	Y+4, r1	; 0x04
    c4b2:	1d 82       	std	Y+5, r1	; 0x05
    c4b4:	1e 82       	std	Y+6, r1	; 0x06
    c4b6:	2b 81       	ldd	r18, Y+3	; 0x03
    c4b8:	3c 81       	ldd	r19, Y+4	; 0x04
    c4ba:	4d 81       	ldd	r20, Y+5	; 0x05
    c4bc:	5e 81       	ldd	r21, Y+6	; 0x06
    c4be:	2f 5f       	subi	r18, 0xFF	; 255
    c4c0:	3f 4f       	sbci	r19, 0xFF	; 255
    c4c2:	4f 4f       	sbci	r20, 0xFF	; 255
    c4c4:	5f 4f       	sbci	r21, 0xFF	; 255
    c4c6:	2b 83       	std	Y+3, r18	; 0x03
    c4c8:	3c 83       	std	Y+4, r19	; 0x04
    c4ca:	4d 83       	std	Y+5, r20	; 0x05
    c4cc:	5e 83       	std	Y+6, r21	; 0x06
    c4ce:	b3 01       	movw	r22, r6
    c4d0:	a2 01       	movw	r20, r4
    c4d2:	d1 01       	movw	r26, r2
    c4d4:	8d 91       	ld	r24, X+
    c4d6:	9c 91       	ld	r25, X
    c4d8:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <get_fat.isra.10>
    c4dc:	62 30       	cpi	r22, 0x02	; 2
    c4de:	71 05       	cpc	r23, r1
    c4e0:	81 05       	cpc	r24, r1
    c4e2:	91 05       	cpc	r25, r1
    c4e4:	10 f4       	brcc	.+4      	; 0xc4ea <f_lseek+0xc0>
    c4e6:	82 e0       	ldi	r24, 0x02	; 2
    c4e8:	07 c0       	rjmp	.+14     	; 0xc4f8 <f_lseek+0xce>
    c4ea:	6f 3f       	cpi	r22, 0xFF	; 255
    c4ec:	ff ef       	ldi	r31, 0xFF	; 255
    c4ee:	7f 07       	cpc	r23, r31
    c4f0:	8f 07       	cpc	r24, r31
    c4f2:	9f 07       	cpc	r25, r31
    c4f4:	29 f4       	brne	.+10     	; 0xc500 <f_lseek+0xd6>
    c4f6:	81 e0       	ldi	r24, 0x01	; 1
    c4f8:	f1 01       	movw	r30, r2
    c4fa:	87 87       	std	Z+15, r24	; 0x0f
    c4fc:	90 e0       	ldi	r25, 0x00	; 0
    c4fe:	4d c2       	rjmp	.+1178   	; 0xc99a <f_lseek+0x570>
    c500:	a3 01       	movw	r20, r6
    c502:	92 01       	movw	r18, r4
    c504:	2f 5f       	subi	r18, 0xFF	; 255
    c506:	3f 4f       	sbci	r19, 0xFF	; 255
    c508:	4f 4f       	sbci	r20, 0xFF	; 255
    c50a:	5f 4f       	sbci	r21, 0xFF	; 255
    c50c:	2b 01       	movw	r4, r22
    c50e:	3c 01       	movw	r6, r24
    c510:	62 17       	cp	r22, r18
    c512:	73 07       	cpc	r23, r19
    c514:	84 07       	cpc	r24, r20
    c516:	95 07       	cpc	r25, r21
    c518:	71 f2       	breq	.-100    	; 0xc4b6 <f_lseek+0x8c>
    c51a:	f2 e0       	ldi	r31, 0x02	; 2
    c51c:	cf 0e       	add	r12, r31
    c51e:	d1 1c       	adc	r13, r1
    c520:	e1 1c       	adc	r14, r1
    c522:	f1 1c       	adc	r15, r1
    c524:	2f 81       	ldd	r18, Y+7	; 0x07
    c526:	38 85       	ldd	r19, Y+8	; 0x08
    c528:	49 85       	ldd	r20, Y+9	; 0x09
    c52a:	5a 85       	ldd	r21, Y+10	; 0x0a
    c52c:	2c 15       	cp	r18, r12
    c52e:	3d 05       	cpc	r19, r13
    c530:	4e 05       	cpc	r20, r14
    c532:	5f 05       	cpc	r21, r15
    c534:	88 f0       	brcs	.+34     	; 0xc558 <f_lseek+0x12e>
    c536:	2b 81       	ldd	r18, Y+3	; 0x03
    c538:	3c 81       	ldd	r19, Y+4	; 0x04
    c53a:	4d 81       	ldd	r20, Y+5	; 0x05
    c53c:	5e 81       	ldd	r21, Y+6	; 0x06
    c53e:	d8 01       	movw	r26, r16
    c540:	2d 93       	st	X+, r18
    c542:	3d 93       	st	X+, r19
    c544:	4d 93       	st	X+, r20
    c546:	5c 93       	st	X, r21
    c548:	13 97       	sbiw	r26, 0x03	; 3
    c54a:	f8 01       	movw	r30, r16
    c54c:	84 82       	std	Z+4, r8	; 0x04
    c54e:	95 82       	std	Z+5, r9	; 0x05
    c550:	a6 82       	std	Z+6, r10	; 0x06
    c552:	b7 82       	std	Z+7, r11	; 0x07
    c554:	08 5f       	subi	r16, 0xF8	; 248
    c556:	1f 4f       	sbci	r17, 0xFF	; 255
    c558:	e9 81       	ldd	r30, Y+1	; 0x01
    c55a:	fa 81       	ldd	r31, Y+2	; 0x02
    c55c:	81 8c       	ldd	r8, Z+25	; 0x19
    c55e:	92 8c       	ldd	r9, Z+26	; 0x1a
    c560:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c562:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c564:	68 15       	cp	r22, r8
    c566:	79 05       	cpc	r23, r9
    c568:	8a 05       	cpc	r24, r10
    c56a:	9b 05       	cpc	r25, r11
    c56c:	18 f4       	brcc	.+6      	; 0xc574 <f_lseek+0x14a>
    c56e:	4b 01       	movw	r8, r22
    c570:	5c 01       	movw	r10, r24
    c572:	9b cf       	rjmp	.-202    	; 0xc4aa <f_lseek+0x80>
    c574:	f1 01       	movw	r30, r2
    c576:	a2 a1       	ldd	r26, Z+34	; 0x22
    c578:	b3 a1       	ldd	r27, Z+35	; 0x23
    c57a:	cd 92       	st	X+, r12
    c57c:	dd 92       	st	X+, r13
    c57e:	ed 92       	st	X+, r14
    c580:	fc 92       	st	X, r15
    c582:	13 97       	sbiw	r26, 0x03	; 3
    c584:	2f 81       	ldd	r18, Y+7	; 0x07
    c586:	38 85       	ldd	r19, Y+8	; 0x08
    c588:	49 85       	ldd	r20, Y+9	; 0x09
    c58a:	5a 85       	ldd	r21, Y+10	; 0x0a
    c58c:	2c 15       	cp	r18, r12
    c58e:	3d 05       	cpc	r19, r13
    c590:	4e 05       	cpc	r20, r14
    c592:	5f 05       	cpc	r21, r15
    c594:	08 f4       	brcc	.+2      	; 0xc598 <f_lseek+0x16e>
    c596:	f8 c1       	rjmp	.+1008   	; 0xc988 <f_lseek+0x55e>
    c598:	d8 01       	movw	r26, r16
    c59a:	1d 92       	st	X+, r1
    c59c:	1d 92       	st	X+, r1
    c59e:	1d 92       	st	X+, r1
    c5a0:	1c 92       	st	X, r1
    c5a2:	13 97       	sbiw	r26, 0x03	; 3
    c5a4:	ef c1       	rjmp	.+990    	; 0xc984 <f_lseek+0x55a>
    c5a6:	f1 01       	movw	r30, r2
    c5a8:	82 85       	ldd	r24, Z+10	; 0x0a
    c5aa:	93 85       	ldd	r25, Z+11	; 0x0b
    c5ac:	a4 85       	ldd	r26, Z+12	; 0x0c
    c5ae:	b5 85       	ldd	r27, Z+13	; 0x0d
    c5b0:	46 01       	movw	r8, r12
    c5b2:	57 01       	movw	r10, r14
    c5b4:	8c 15       	cp	r24, r12
    c5b6:	9d 05       	cpc	r25, r13
    c5b8:	ae 05       	cpc	r26, r14
    c5ba:	bf 05       	cpc	r27, r15
    c5bc:	10 f4       	brcc	.+4      	; 0xc5c2 <f_lseek+0x198>
    c5be:	4c 01       	movw	r8, r24
    c5c0:	5d 01       	movw	r10, r26
    c5c2:	f1 01       	movw	r30, r2
    c5c4:	80 8a       	std	Z+16, r8	; 0x10
    c5c6:	91 8a       	std	Z+17, r9	; 0x11
    c5c8:	a2 8a       	std	Z+18, r10	; 0x12
    c5ca:	b3 8a       	std	Z+19, r11	; 0x13
    c5cc:	81 14       	cp	r8, r1
    c5ce:	91 04       	cpc	r9, r1
    c5d0:	a1 04       	cpc	r10, r1
    c5d2:	b1 04       	cpc	r11, r1
    c5d4:	09 f4       	brne	.+2      	; 0xc5d8 <f_lseek+0x1ae>
    c5d6:	d6 c1       	rjmp	.+940    	; 0xc984 <f_lseek+0x55a>
    c5d8:	24 01       	movw	r4, r8
    c5da:	35 01       	movw	r6, r10
    c5dc:	f1 e0       	ldi	r31, 0x01	; 1
    c5de:	4f 1a       	sub	r4, r31
    c5e0:	51 08       	sbc	r5, r1
    c5e2:	61 08       	sbc	r6, r1
    c5e4:	71 08       	sbc	r7, r1
    c5e6:	b3 01       	movw	r22, r6
    c5e8:	a2 01       	movw	r20, r4
    c5ea:	c1 01       	movw	r24, r2
    c5ec:	0e 94 20 49 	call	0x9240	; 0x9240 <clmt_clust>
    c5f0:	ab 01       	movw	r20, r22
    c5f2:	bc 01       	movw	r22, r24
    c5f4:	f1 01       	movw	r30, r2
    c5f6:	44 8b       	std	Z+20, r20	; 0x14
    c5f8:	55 8b       	std	Z+21, r21	; 0x15
    c5fa:	66 8b       	std	Z+22, r22	; 0x16
    c5fc:	77 8b       	std	Z+23, r23	; 0x17
    c5fe:	e9 80       	ldd	r14, Y+1	; 0x01
    c600:	fa 80       	ldd	r15, Y+2	; 0x02
    c602:	c7 01       	movw	r24, r14
    c604:	0e 94 f8 48 	call	0x91f0	; 0x91f0 <clst2sect>
    c608:	61 15       	cp	r22, r1
    c60a:	71 05       	cpc	r23, r1
    c60c:	81 05       	cpc	r24, r1
    c60e:	91 05       	cpc	r25, r1
    c610:	09 f4       	brne	.+2      	; 0xc614 <f_lseek+0x1ea>
    c612:	69 cf       	rjmp	.-302    	; 0xc4e6 <f_lseek+0xbc>
    c614:	95 01       	movw	r18, r10
    c616:	84 01       	movw	r16, r8
    c618:	11 70       	andi	r17, 0x01	; 1
    c61a:	22 27       	eor	r18, r18
    c61c:	33 27       	eor	r19, r19
    c61e:	01 15       	cp	r16, r1
    c620:	11 05       	cpc	r17, r1
    c622:	21 05       	cpc	r18, r1
    c624:	31 05       	cpc	r19, r1
    c626:	09 f4       	brne	.+2      	; 0xc62a <f_lseek+0x200>
    c628:	ad c1       	rjmp	.+858    	; 0xc984 <f_lseek+0x55a>
    c62a:	f7 01       	movw	r30, r14
    c62c:	81 84       	ldd	r8, Z+9	; 0x09
    c62e:	92 84       	ldd	r9, Z+10	; 0x0a
    c630:	f1 e0       	ldi	r31, 0x01	; 1
    c632:	8f 1a       	sub	r8, r31
    c634:	91 08       	sbc	r9, r1
    c636:	a1 2c       	mov	r10, r1
    c638:	b1 2c       	mov	r11, r1
    c63a:	49 e0       	ldi	r20, 0x09	; 9
    c63c:	76 94       	lsr	r7
    c63e:	67 94       	ror	r6
    c640:	57 94       	ror	r5
    c642:	47 94       	ror	r4
    c644:	4a 95       	dec	r20
    c646:	d1 f7       	brne	.-12     	; 0xc63c <f_lseek+0x212>
    c648:	48 20       	and	r4, r8
    c64a:	59 20       	and	r5, r9
    c64c:	6a 20       	and	r6, r10
    c64e:	7b 20       	and	r7, r11
    c650:	53 01       	movw	r10, r6
    c652:	42 01       	movw	r8, r4
    c654:	86 0e       	add	r8, r22
    c656:	97 1e       	adc	r9, r23
    c658:	a8 1e       	adc	r10, r24
    c65a:	b9 1e       	adc	r11, r25
    c65c:	f1 01       	movw	r30, r2
    c65e:	20 8d       	ldd	r18, Z+24	; 0x18
    c660:	31 8d       	ldd	r19, Z+25	; 0x19
    c662:	42 8d       	ldd	r20, Z+26	; 0x1a
    c664:	53 8d       	ldd	r21, Z+27	; 0x1b
    c666:	82 16       	cp	r8, r18
    c668:	93 06       	cpc	r9, r19
    c66a:	a4 06       	cpc	r10, r20
    c66c:	b5 06       	cpc	r11, r21
    c66e:	09 f4       	brne	.+2      	; 0xc672 <f_lseek+0x248>
    c670:	89 c1       	rjmp	.+786    	; 0xc984 <f_lseek+0x55a>
    c672:	86 85       	ldd	r24, Z+14	; 0x0e
    c674:	b1 01       	movw	r22, r2
    c676:	6c 5d       	subi	r22, 0xDC	; 220
    c678:	7f 4f       	sbci	r23, 0xFF	; 255
    c67a:	6b 01       	movw	r12, r22
    c67c:	87 ff       	sbrs	r24, 7
    c67e:	0d c0       	rjmp	.+26     	; 0xc69a <f_lseek+0x270>
    c680:	01 e0       	ldi	r16, 0x01	; 1
    c682:	10 e0       	ldi	r17, 0x00	; 0
    c684:	f7 01       	movw	r30, r14
    c686:	81 81       	ldd	r24, Z+1	; 0x01
    c688:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <disk_write>
    c68c:	89 2b       	or	r24, r25
    c68e:	09 f0       	breq	.+2      	; 0xc692 <f_lseek+0x268>
    c690:	32 cf       	rjmp	.-412    	; 0xc4f6 <f_lseek+0xcc>
    c692:	f1 01       	movw	r30, r2
    c694:	86 85       	ldd	r24, Z+14	; 0x0e
    c696:	8f 77       	andi	r24, 0x7F	; 127
    c698:	86 87       	std	Z+14, r24	; 0x0e
    c69a:	e9 81       	ldd	r30, Y+1	; 0x01
    c69c:	fa 81       	ldd	r31, Y+2	; 0x02
    c69e:	01 e0       	ldi	r16, 0x01	; 1
    c6a0:	10 e0       	ldi	r17, 0x00	; 0
    c6a2:	a5 01       	movw	r20, r10
    c6a4:	94 01       	movw	r18, r8
    c6a6:	b6 01       	movw	r22, r12
    c6a8:	81 81       	ldd	r24, Z+1	; 0x01
    c6aa:	0e 94 63 6b 	call	0xd6c6	; 0xd6c6 <disk_read>
    c6ae:	89 2b       	or	r24, r25
    c6b0:	09 f0       	breq	.+2      	; 0xc6b4 <f_lseek+0x28a>
    c6b2:	21 cf       	rjmp	.-446    	; 0xc4f6 <f_lseek+0xcc>
    c6b4:	f1 01       	movw	r30, r2
    c6b6:	80 8e       	std	Z+24, r8	; 0x18
    c6b8:	91 8e       	std	Z+25, r9	; 0x19
    c6ba:	a2 8e       	std	Z+26, r10	; 0x1a
    c6bc:	b3 8e       	std	Z+27, r11	; 0x1b
    c6be:	62 c1       	rjmp	.+708    	; 0xc984 <f_lseek+0x55a>
    c6c0:	f1 01       	movw	r30, r2
    c6c2:	82 85       	ldd	r24, Z+10	; 0x0a
    c6c4:	93 85       	ldd	r25, Z+11	; 0x0b
    c6c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    c6c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    c6ca:	8c 15       	cp	r24, r12
    c6cc:	9d 05       	cpc	r25, r13
    c6ce:	ae 05       	cpc	r26, r14
    c6d0:	bf 05       	cpc	r27, r15
    c6d2:	28 f4       	brcc	.+10     	; 0xc6de <f_lseek+0x2b4>
    c6d4:	26 85       	ldd	r18, Z+14	; 0x0e
    c6d6:	21 fd       	sbrc	r18, 1
    c6d8:	02 c0       	rjmp	.+4      	; 0xc6de <f_lseek+0x2b4>
    c6da:	6c 01       	movw	r12, r24
    c6dc:	7d 01       	movw	r14, r26
    c6de:	f1 01       	movw	r30, r2
    c6e0:	40 88       	ldd	r4, Z+16	; 0x10
    c6e2:	51 88       	ldd	r5, Z+17	; 0x11
    c6e4:	62 88       	ldd	r6, Z+18	; 0x12
    c6e6:	73 88       	ldd	r7, Z+19	; 0x13
    c6e8:	10 8a       	std	Z+16, r1	; 0x10
    c6ea:	11 8a       	std	Z+17, r1	; 0x11
    c6ec:	12 8a       	std	Z+18, r1	; 0x12
    c6ee:	13 8a       	std	Z+19, r1	; 0x13
    c6f0:	c1 14       	cp	r12, r1
    c6f2:	d1 04       	cpc	r13, r1
    c6f4:	e1 04       	cpc	r14, r1
    c6f6:	f1 04       	cpc	r15, r1
    c6f8:	09 f4       	brne	.+2      	; 0xc6fc <f_lseek+0x2d2>
    c6fa:	48 c1       	rjmp	.+656    	; 0xc98c <f_lseek+0x562>
    c6fc:	e9 81       	ldd	r30, Y+1	; 0x01
    c6fe:	fa 81       	ldd	r31, Y+2	; 0x02
    c700:	81 84       	ldd	r8, Z+9	; 0x09
    c702:	92 84       	ldd	r9, Z+10	; 0x0a
    c704:	a1 2c       	mov	r10, r1
    c706:	b1 2c       	mov	r11, r1
    c708:	39 e0       	ldi	r19, 0x09	; 9
    c70a:	88 0c       	add	r8, r8
    c70c:	99 1c       	adc	r9, r9
    c70e:	aa 1c       	adc	r10, r10
    c710:	bb 1c       	adc	r11, r11
    c712:	3a 95       	dec	r19
    c714:	d1 f7       	brne	.-12     	; 0xc70a <f_lseek+0x2e0>
    c716:	41 14       	cp	r4, r1
    c718:	51 04       	cpc	r5, r1
    c71a:	61 04       	cpc	r6, r1
    c71c:	71 04       	cpc	r7, r1
    c71e:	d9 f1       	breq	.+118    	; 0xc796 <f_lseek+0x36c>
    c720:	f1 e0       	ldi	r31, 0x01	; 1
    c722:	4f 1a       	sub	r4, r31
    c724:	51 08       	sbc	r5, r1
    c726:	61 08       	sbc	r6, r1
    c728:	71 08       	sbc	r7, r1
    c72a:	c7 01       	movw	r24, r14
    c72c:	b6 01       	movw	r22, r12
    c72e:	61 50       	subi	r22, 0x01	; 1
    c730:	71 09       	sbc	r23, r1
    c732:	81 09       	sbc	r24, r1
    c734:	91 09       	sbc	r25, r1
    c736:	a5 01       	movw	r20, r10
    c738:	94 01       	movw	r18, r8
    c73a:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    c73e:	2b 83       	std	Y+3, r18	; 0x03
    c740:	3c 83       	std	Y+4, r19	; 0x04
    c742:	4d 83       	std	Y+5, r20	; 0x05
    c744:	5e 83       	std	Y+6, r21	; 0x06
    c746:	c3 01       	movw	r24, r6
    c748:	b2 01       	movw	r22, r4
    c74a:	a5 01       	movw	r20, r10
    c74c:	94 01       	movw	r18, r8
    c74e:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
    c752:	6b 81       	ldd	r22, Y+3	; 0x03
    c754:	7c 81       	ldd	r23, Y+4	; 0x04
    c756:	8d 81       	ldd	r24, Y+5	; 0x05
    c758:	9e 81       	ldd	r25, Y+6	; 0x06
    c75a:	62 17       	cp	r22, r18
    c75c:	73 07       	cpc	r23, r19
    c75e:	84 07       	cpc	r24, r20
    c760:	95 07       	cpc	r25, r21
    c762:	c8 f0       	brcs	.+50     	; 0xc796 <f_lseek+0x36c>
    c764:	88 27       	eor	r24, r24
    c766:	99 27       	eor	r25, r25
    c768:	dc 01       	movw	r26, r24
    c76a:	88 19       	sub	r24, r8
    c76c:	99 09       	sbc	r25, r9
    c76e:	aa 09       	sbc	r26, r10
    c770:	bb 09       	sbc	r27, r11
    c772:	48 22       	and	r4, r24
    c774:	59 22       	and	r5, r25
    c776:	6a 22       	and	r6, r26
    c778:	7b 22       	and	r7, r27
    c77a:	f1 01       	movw	r30, r2
    c77c:	40 8a       	std	Z+16, r4	; 0x10
    c77e:	51 8a       	std	Z+17, r5	; 0x11
    c780:	62 8a       	std	Z+18, r6	; 0x12
    c782:	73 8a       	std	Z+19, r7	; 0x13
    c784:	c4 18       	sub	r12, r4
    c786:	d5 08       	sbc	r13, r5
    c788:	e6 08       	sbc	r14, r6
    c78a:	f7 08       	sbc	r15, r7
    c78c:	44 89       	ldd	r20, Z+20	; 0x14
    c78e:	55 89       	ldd	r21, Z+21	; 0x15
    c790:	66 89       	ldd	r22, Z+22	; 0x16
    c792:	77 89       	ldd	r23, Z+23	; 0x17
    c794:	29 c0       	rjmp	.+82     	; 0xc7e8 <f_lseek+0x3be>
    c796:	f1 01       	movw	r30, r2
    c798:	46 81       	ldd	r20, Z+6	; 0x06
    c79a:	57 81       	ldd	r21, Z+7	; 0x07
    c79c:	60 85       	ldd	r22, Z+8	; 0x08
    c79e:	71 85       	ldd	r23, Z+9	; 0x09
    c7a0:	41 15       	cp	r20, r1
    c7a2:	51 05       	cpc	r21, r1
    c7a4:	61 05       	cpc	r22, r1
    c7a6:	71 05       	cpc	r23, r1
    c7a8:	d1 f4       	brne	.+52     	; 0xc7de <f_lseek+0x3b4>
    c7aa:	40 e0       	ldi	r20, 0x00	; 0
    c7ac:	50 e0       	ldi	r21, 0x00	; 0
    c7ae:	ba 01       	movw	r22, r20
    c7b0:	c1 01       	movw	r24, r2
    c7b2:	0e 94 5f 52 	call	0xa4be	; 0xa4be <create_chain>
    c7b6:	ab 01       	movw	r20, r22
    c7b8:	bc 01       	movw	r22, r24
    c7ba:	41 30       	cpi	r20, 0x01	; 1
    c7bc:	51 05       	cpc	r21, r1
    c7be:	61 05       	cpc	r22, r1
    c7c0:	71 05       	cpc	r23, r1
    c7c2:	09 f4       	brne	.+2      	; 0xc7c6 <f_lseek+0x39c>
    c7c4:	90 ce       	rjmp	.-736    	; 0xc4e6 <f_lseek+0xbc>
    c7c6:	4f 3f       	cpi	r20, 0xFF	; 255
    c7c8:	ff ef       	ldi	r31, 0xFF	; 255
    c7ca:	5f 07       	cpc	r21, r31
    c7cc:	6f 07       	cpc	r22, r31
    c7ce:	7f 07       	cpc	r23, r31
    c7d0:	09 f4       	brne	.+2      	; 0xc7d4 <f_lseek+0x3aa>
    c7d2:	91 ce       	rjmp	.-734    	; 0xc4f6 <f_lseek+0xcc>
    c7d4:	f1 01       	movw	r30, r2
    c7d6:	46 83       	std	Z+6, r20	; 0x06
    c7d8:	57 83       	std	Z+7, r21	; 0x07
    c7da:	60 87       	std	Z+8, r22	; 0x08
    c7dc:	71 87       	std	Z+9, r23	; 0x09
    c7de:	f1 01       	movw	r30, r2
    c7e0:	44 8b       	std	Z+20, r20	; 0x14
    c7e2:	55 8b       	std	Z+21, r21	; 0x15
    c7e4:	66 8b       	std	Z+22, r22	; 0x16
    c7e6:	77 8b       	std	Z+23, r23	; 0x17
    c7e8:	41 15       	cp	r20, r1
    c7ea:	51 05       	cpc	r21, r1
    c7ec:	61 05       	cpc	r22, r1
    c7ee:	71 05       	cpc	r23, r1
    c7f0:	09 f0       	breq	.+2      	; 0xc7f4 <f_lseek+0x3ca>
    c7f2:	40 c0       	rjmp	.+128    	; 0xc874 <f_lseek+0x44a>
    c7f4:	c1 2c       	mov	r12, r1
    c7f6:	d1 2c       	mov	r13, r1
    c7f8:	76 01       	movw	r14, r12
    c7fa:	79 c0       	rjmp	.+242    	; 0xc8ee <f_lseek+0x4c4>
    c7fc:	c8 18       	sub	r12, r8
    c7fe:	d9 08       	sbc	r13, r9
    c800:	ea 08       	sbc	r14, r10
    c802:	fb 08       	sbc	r15, r11
    c804:	f1 01       	movw	r30, r2
    c806:	80 89       	ldd	r24, Z+16	; 0x10
    c808:	91 89       	ldd	r25, Z+17	; 0x11
    c80a:	a2 89       	ldd	r26, Z+18	; 0x12
    c80c:	b3 89       	ldd	r27, Z+19	; 0x13
    c80e:	88 0d       	add	r24, r8
    c810:	99 1d       	adc	r25, r9
    c812:	aa 1d       	adc	r26, r10
    c814:	bb 1d       	adc	r27, r11
    c816:	80 8b       	std	Z+16, r24	; 0x10
    c818:	91 8b       	std	Z+17, r25	; 0x11
    c81a:	a2 8b       	std	Z+18, r26	; 0x12
    c81c:	b3 8b       	std	Z+19, r27	; 0x13
    c81e:	86 85       	ldd	r24, Z+14	; 0x0e
    c820:	81 ff       	sbrs	r24, 1
    c822:	2f c0       	rjmp	.+94     	; 0xc882 <f_lseek+0x458>
    c824:	c1 01       	movw	r24, r2
    c826:	0e 94 5f 52 	call	0xa4be	; 0xa4be <create_chain>
    c82a:	ab 01       	movw	r20, r22
    c82c:	bc 01       	movw	r22, r24
    c82e:	41 15       	cp	r20, r1
    c830:	51 05       	cpc	r21, r1
    c832:	61 05       	cpc	r22, r1
    c834:	71 05       	cpc	r23, r1
    c836:	61 f1       	breq	.+88     	; 0xc890 <f_lseek+0x466>
    c838:	4f 3f       	cpi	r20, 0xFF	; 255
    c83a:	bf ef       	ldi	r27, 0xFF	; 255
    c83c:	5b 07       	cpc	r21, r27
    c83e:	6b 07       	cpc	r22, r27
    c840:	7b 07       	cpc	r23, r27
    c842:	09 f4       	brne	.+2      	; 0xc846 <f_lseek+0x41c>
    c844:	58 ce       	rjmp	.-848    	; 0xc4f6 <f_lseek+0xcc>
    c846:	42 30       	cpi	r20, 0x02	; 2
    c848:	51 05       	cpc	r21, r1
    c84a:	61 05       	cpc	r22, r1
    c84c:	71 05       	cpc	r23, r1
    c84e:	08 f4       	brcc	.+2      	; 0xc852 <f_lseek+0x428>
    c850:	4a ce       	rjmp	.-876    	; 0xc4e6 <f_lseek+0xbc>
    c852:	e9 81       	ldd	r30, Y+1	; 0x01
    c854:	fa 81       	ldd	r31, Y+2	; 0x02
    c856:	81 8d       	ldd	r24, Z+25	; 0x19
    c858:	92 8d       	ldd	r25, Z+26	; 0x1a
    c85a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c85c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c85e:	48 17       	cp	r20, r24
    c860:	59 07       	cpc	r21, r25
    c862:	6a 07       	cpc	r22, r26
    c864:	7b 07       	cpc	r23, r27
    c866:	08 f0       	brcs	.+2      	; 0xc86a <f_lseek+0x440>
    c868:	3e ce       	rjmp	.-900    	; 0xc4e6 <f_lseek+0xbc>
    c86a:	f1 01       	movw	r30, r2
    c86c:	44 8b       	std	Z+20, r20	; 0x14
    c86e:	55 8b       	std	Z+21, r21	; 0x15
    c870:	66 8b       	std	Z+22, r22	; 0x16
    c872:	77 8b       	std	Z+23, r23	; 0x17
    c874:	8c 14       	cp	r8, r12
    c876:	9d 04       	cpc	r9, r13
    c878:	ae 04       	cpc	r10, r14
    c87a:	bf 04       	cpc	r11, r15
    c87c:	08 f4       	brcc	.+2      	; 0xc880 <f_lseek+0x456>
    c87e:	be cf       	rjmp	.-132    	; 0xc7fc <f_lseek+0x3d2>
    c880:	0a c0       	rjmp	.+20     	; 0xc896 <f_lseek+0x46c>
    c882:	80 81       	ld	r24, Z
    c884:	91 81       	ldd	r25, Z+1	; 0x01
    c886:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <get_fat.isra.10>
    c88a:	ab 01       	movw	r20, r22
    c88c:	bc 01       	movw	r22, r24
    c88e:	d4 cf       	rjmp	.-88     	; 0xc838 <f_lseek+0x40e>
    c890:	c1 2c       	mov	r12, r1
    c892:	d1 2c       	mov	r13, r1
    c894:	76 01       	movw	r14, r12
    c896:	f1 01       	movw	r30, r2
    c898:	80 89       	ldd	r24, Z+16	; 0x10
    c89a:	91 89       	ldd	r25, Z+17	; 0x11
    c89c:	a2 89       	ldd	r26, Z+18	; 0x12
    c89e:	b3 89       	ldd	r27, Z+19	; 0x13
    c8a0:	8c 0d       	add	r24, r12
    c8a2:	9d 1d       	adc	r25, r13
    c8a4:	ae 1d       	adc	r26, r14
    c8a6:	bf 1d       	adc	r27, r15
    c8a8:	80 8b       	std	Z+16, r24	; 0x10
    c8aa:	91 8b       	std	Z+17, r25	; 0x11
    c8ac:	a2 8b       	std	Z+18, r26	; 0x12
    c8ae:	b3 8b       	std	Z+19, r27	; 0x13
    c8b0:	d7 01       	movw	r26, r14
    c8b2:	c6 01       	movw	r24, r12
    c8b4:	91 70       	andi	r25, 0x01	; 1
    c8b6:	aa 27       	eor	r26, r26
    c8b8:	bb 27       	eor	r27, r27
    c8ba:	89 2b       	or	r24, r25
    c8bc:	8a 2b       	or	r24, r26
    c8be:	8b 2b       	or	r24, r27
    c8c0:	09 f4       	brne	.+2      	; 0xc8c4 <f_lseek+0x49a>
    c8c2:	98 cf       	rjmp	.-208    	; 0xc7f4 <f_lseek+0x3ca>
    c8c4:	89 81       	ldd	r24, Y+1	; 0x01
    c8c6:	9a 81       	ldd	r25, Y+2	; 0x02
    c8c8:	0e 94 f8 48 	call	0x91f0	; 0x91f0 <clst2sect>
    c8cc:	61 15       	cp	r22, r1
    c8ce:	71 05       	cpc	r23, r1
    c8d0:	81 05       	cpc	r24, r1
    c8d2:	91 05       	cpc	r25, r1
    c8d4:	09 f4       	brne	.+2      	; 0xc8d8 <f_lseek+0x4ae>
    c8d6:	07 ce       	rjmp	.-1010   	; 0xc4e6 <f_lseek+0xbc>
    c8d8:	29 e0       	ldi	r18, 0x09	; 9
    c8da:	f6 94       	lsr	r15
    c8dc:	e7 94       	ror	r14
    c8de:	d7 94       	ror	r13
    c8e0:	c7 94       	ror	r12
    c8e2:	2a 95       	dec	r18
    c8e4:	d1 f7       	brne	.-12     	; 0xc8da <f_lseek+0x4b0>
    c8e6:	c6 0e       	add	r12, r22
    c8e8:	d7 1e       	adc	r13, r23
    c8ea:	e8 1e       	adc	r14, r24
    c8ec:	f9 1e       	adc	r15, r25
    c8ee:	f1 01       	movw	r30, r2
    c8f0:	80 89       	ldd	r24, Z+16	; 0x10
    c8f2:	91 89       	ldd	r25, Z+17	; 0x11
    c8f4:	a2 89       	ldd	r26, Z+18	; 0x12
    c8f6:	b3 89       	ldd	r27, Z+19	; 0x13
    c8f8:	42 85       	ldd	r20, Z+10	; 0x0a
    c8fa:	53 85       	ldd	r21, Z+11	; 0x0b
    c8fc:	64 85       	ldd	r22, Z+12	; 0x0c
    c8fe:	75 85       	ldd	r23, Z+13	; 0x0d
    c900:	48 17       	cp	r20, r24
    c902:	59 07       	cpc	r21, r25
    c904:	6a 07       	cpc	r22, r26
    c906:	7b 07       	cpc	r23, r27
    c908:	38 f4       	brcc	.+14     	; 0xc918 <f_lseek+0x4ee>
    c90a:	82 87       	std	Z+10, r24	; 0x0a
    c90c:	93 87       	std	Z+11, r25	; 0x0b
    c90e:	a4 87       	std	Z+12, r26	; 0x0c
    c910:	b5 87       	std	Z+13, r27	; 0x0d
    c912:	26 85       	ldd	r18, Z+14	; 0x0e
    c914:	20 64       	ori	r18, 0x40	; 64
    c916:	26 87       	std	Z+14, r18	; 0x0e
    c918:	91 70       	andi	r25, 0x01	; 1
    c91a:	aa 27       	eor	r26, r26
    c91c:	bb 27       	eor	r27, r27
    c91e:	89 2b       	or	r24, r25
    c920:	8a 2b       	or	r24, r26
    c922:	8b 2b       	or	r24, r27
    c924:	79 f1       	breq	.+94     	; 0xc984 <f_lseek+0x55a>
    c926:	f1 01       	movw	r30, r2
    c928:	20 8d       	ldd	r18, Z+24	; 0x18
    c92a:	31 8d       	ldd	r19, Z+25	; 0x19
    c92c:	42 8d       	ldd	r20, Z+26	; 0x1a
    c92e:	53 8d       	ldd	r21, Z+27	; 0x1b
    c930:	2c 15       	cp	r18, r12
    c932:	3d 05       	cpc	r19, r13
    c934:	4e 05       	cpc	r20, r14
    c936:	5f 05       	cpc	r21, r15
    c938:	29 f1       	breq	.+74     	; 0xc984 <f_lseek+0x55a>
    c93a:	86 85       	ldd	r24, Z+14	; 0x0e
    c93c:	b1 01       	movw	r22, r2
    c93e:	6c 5d       	subi	r22, 0xDC	; 220
    c940:	7f 4f       	sbci	r23, 0xFF	; 255
    c942:	5b 01       	movw	r10, r22
    c944:	87 ff       	sbrs	r24, 7
    c946:	0d c0       	rjmp	.+26     	; 0xc962 <f_lseek+0x538>
    c948:	e9 81       	ldd	r30, Y+1	; 0x01
    c94a:	fa 81       	ldd	r31, Y+2	; 0x02
    c94c:	01 e0       	ldi	r16, 0x01	; 1
    c94e:	10 e0       	ldi	r17, 0x00	; 0
    c950:	81 81       	ldd	r24, Z+1	; 0x01
    c952:	c9 d6       	rcall	.+3474   	; 0xd6e6 <disk_write>
    c954:	89 2b       	or	r24, r25
    c956:	09 f0       	breq	.+2      	; 0xc95a <f_lseek+0x530>
    c958:	ce cd       	rjmp	.-1124   	; 0xc4f6 <f_lseek+0xcc>
    c95a:	f1 01       	movw	r30, r2
    c95c:	86 85       	ldd	r24, Z+14	; 0x0e
    c95e:	8f 77       	andi	r24, 0x7F	; 127
    c960:	86 87       	std	Z+14, r24	; 0x0e
    c962:	e9 81       	ldd	r30, Y+1	; 0x01
    c964:	fa 81       	ldd	r31, Y+2	; 0x02
    c966:	01 e0       	ldi	r16, 0x01	; 1
    c968:	10 e0       	ldi	r17, 0x00	; 0
    c96a:	a7 01       	movw	r20, r14
    c96c:	96 01       	movw	r18, r12
    c96e:	b5 01       	movw	r22, r10
    c970:	81 81       	ldd	r24, Z+1	; 0x01
    c972:	a9 d6       	rcall	.+3410   	; 0xd6c6 <disk_read>
    c974:	89 2b       	or	r24, r25
    c976:	09 f0       	breq	.+2      	; 0xc97a <f_lseek+0x550>
    c978:	be cd       	rjmp	.-1156   	; 0xc4f6 <f_lseek+0xcc>
    c97a:	f1 01       	movw	r30, r2
    c97c:	c0 8e       	std	Z+24, r12	; 0x18
    c97e:	d1 8e       	std	Z+25, r13	; 0x19
    c980:	e2 8e       	std	Z+26, r14	; 0x1a
    c982:	f3 8e       	std	Z+27, r15	; 0x1b
    c984:	80 e0       	ldi	r24, 0x00	; 0
    c986:	ba cd       	rjmp	.-1164   	; 0xc4fc <f_lseek+0xd2>
    c988:	81 e1       	ldi	r24, 0x11	; 17
    c98a:	b8 cd       	rjmp	.-1168   	; 0xc4fc <f_lseek+0xd2>
    c98c:	80 e0       	ldi	r24, 0x00	; 0
    c98e:	90 e0       	ldi	r25, 0x00	; 0
    c990:	dc 01       	movw	r26, r24
    c992:	c1 2c       	mov	r12, r1
    c994:	d1 2c       	mov	r13, r1
    c996:	76 01       	movw	r14, r12
    c998:	bf cf       	rjmp	.-130    	; 0xc918 <f_lseek+0x4ee>
    c99a:	2a 96       	adiw	r28, 0x0a	; 10
    c99c:	e2 e1       	ldi	r30, 0x12	; 18
    c99e:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000c9a2 <f_opendir>:
    c9a2:	a4 e0       	ldi	r26, 0x04	; 4
    c9a4:	b0 e0       	ldi	r27, 0x00	; 0
    c9a6:	e7 ed       	ldi	r30, 0xD7	; 215
    c9a8:	f4 e6       	ldi	r31, 0x64	; 100
    c9aa:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    c9ae:	7c 83       	std	Y+4, r23	; 0x04
    c9b0:	6b 83       	std	Y+3, r22	; 0x03
    c9b2:	00 97       	sbiw	r24, 0x00	; 0
    c9b4:	09 f4       	brne	.+2      	; 0xc9b8 <f_opendir+0x16>
    c9b6:	48 c0       	rjmp	.+144    	; 0xca48 <f_opendir+0xa6>
    c9b8:	8c 01       	movw	r16, r24
    c9ba:	40 e0       	ldi	r20, 0x00	; 0
    c9bc:	be 01       	movw	r22, r28
    c9be:	6f 5f       	subi	r22, 0xFF	; 255
    c9c0:	7f 4f       	sbci	r23, 0xFF	; 255
    c9c2:	ce 01       	movw	r24, r28
    c9c4:	03 96       	adiw	r24, 0x03	; 3
    c9c6:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
    c9ca:	7c 01       	movw	r14, r24
    c9cc:	89 2b       	or	r24, r25
    c9ce:	b9 f5       	brne	.+110    	; 0xca3e <f_opendir+0x9c>
    c9d0:	89 81       	ldd	r24, Y+1	; 0x01
    c9d2:	9a 81       	ldd	r25, Y+2	; 0x02
    c9d4:	f8 01       	movw	r30, r16
    c9d6:	91 83       	std	Z+1, r25	; 0x01
    c9d8:	80 83       	st	Z, r24
    c9da:	80 e0       	ldi	r24, 0x00	; 0
    c9dc:	92 e0       	ldi	r25, 0x02	; 2
    c9de:	b7 d5       	rcall	.+2926   	; 0xd54e <ff_memalloc>
    c9e0:	6c 01       	movw	r12, r24
    c9e2:	00 97       	sbiw	r24, 0x00	; 0
    c9e4:	99 f1       	breq	.+102    	; 0xca4c <f_opendir+0xaa>
    c9e6:	e9 81       	ldd	r30, Y+1	; 0x01
    c9e8:	fa 81       	ldd	r31, Y+2	; 0x02
    c9ea:	94 87       	std	Z+12, r25	; 0x0c
    c9ec:	83 87       	std	Z+11, r24	; 0x0b
    c9ee:	6b 81       	ldd	r22, Y+3	; 0x03
    c9f0:	7c 81       	ldd	r23, Y+4	; 0x04
    c9f2:	c8 01       	movw	r24, r16
    c9f4:	0e 94 e4 58 	call	0xb1c8	; 0xb1c8 <follow_path>
    c9f8:	7c 01       	movw	r14, r24
    c9fa:	89 2b       	or	r24, r25
    c9fc:	b9 f4       	brne	.+46     	; 0xca2c <f_opendir+0x8a>
    c9fe:	f8 01       	movw	r30, r16
    ca00:	87 a1       	ldd	r24, Z+39	; 0x27
    ca02:	87 fd       	sbrc	r24, 7
    ca04:	28 c0       	rjmp	.+80     	; 0xca56 <f_opendir+0xb4>
    ca06:	84 81       	ldd	r24, Z+4	; 0x04
    ca08:	84 ff       	sbrs	r24, 4
    ca0a:	0d c0       	rjmp	.+26     	; 0xca26 <f_opendir+0x84>
    ca0c:	62 8d       	ldd	r22, Z+26	; 0x1a
    ca0e:	73 8d       	ldd	r23, Z+27	; 0x1b
    ca10:	e9 81       	ldd	r30, Y+1	; 0x01
    ca12:	fa 81       	ldd	r31, Y+2	; 0x02
    ca14:	80 81       	ld	r24, Z
    ca16:	0e 94 8b 4b 	call	0x9716	; 0x9716 <ld_clust.isra.4>
    ca1a:	f8 01       	movw	r30, r16
    ca1c:	66 83       	std	Z+6, r22	; 0x06
    ca1e:	77 83       	std	Z+7, r23	; 0x07
    ca20:	80 87       	std	Z+8, r24	; 0x08
    ca22:	91 87       	std	Z+9, r25	; 0x09
    ca24:	18 c0       	rjmp	.+48     	; 0xca56 <f_opendir+0xb4>
    ca26:	95 e0       	ldi	r25, 0x05	; 5
    ca28:	e9 2e       	mov	r14, r25
    ca2a:	f1 2c       	mov	r15, r1
    ca2c:	c6 01       	movw	r24, r12
    ca2e:	92 d5       	rcall	.+2852   	; 0xd554 <ff_memfree>
    ca30:	f4 e0       	ldi	r31, 0x04	; 4
    ca32:	ef 16       	cp	r14, r31
    ca34:	f1 04       	cpc	r15, r1
    ca36:	f1 f0       	breq	.+60     	; 0xca74 <f_opendir+0xd2>
    ca38:	e1 14       	cp	r14, r1
    ca3a:	f1 04       	cpc	r15, r1
    ca3c:	49 f0       	breq	.+18     	; 0xca50 <f_opendir+0xae>
    ca3e:	f8 01       	movw	r30, r16
    ca40:	11 82       	std	Z+1, r1	; 0x01
    ca42:	10 82       	st	Z, r1
    ca44:	c7 01       	movw	r24, r14
    ca46:	1a c0       	rjmp	.+52     	; 0xca7c <f_opendir+0xda>
    ca48:	89 e0       	ldi	r24, 0x09	; 9
    ca4a:	03 c0       	rjmp	.+6      	; 0xca52 <f_opendir+0xb0>
    ca4c:	81 e1       	ldi	r24, 0x11	; 17
    ca4e:	01 c0       	rjmp	.+2      	; 0xca52 <f_opendir+0xb0>
    ca50:	80 e0       	ldi	r24, 0x00	; 0
    ca52:	90 e0       	ldi	r25, 0x00	; 0
    ca54:	13 c0       	rjmp	.+38     	; 0xca7c <f_opendir+0xda>
    ca56:	e9 81       	ldd	r30, Y+1	; 0x01
    ca58:	fa 81       	ldd	r31, Y+2	; 0x02
    ca5a:	85 81       	ldd	r24, Z+5	; 0x05
    ca5c:	96 81       	ldd	r25, Z+6	; 0x06
    ca5e:	f8 01       	movw	r30, r16
    ca60:	93 83       	std	Z+3, r25	; 0x03
    ca62:	82 83       	std	Z+2, r24	; 0x02
    ca64:	40 e0       	ldi	r20, 0x00	; 0
    ca66:	50 e0       	ldi	r21, 0x00	; 0
    ca68:	ba 01       	movw	r22, r20
    ca6a:	c8 01       	movw	r24, r16
    ca6c:	0e 94 9e 51 	call	0xa33c	; 0xa33c <dir_sdi>
    ca70:	7c 01       	movw	r14, r24
    ca72:	dc cf       	rjmp	.-72     	; 0xca2c <f_opendir+0x8a>
    ca74:	85 e0       	ldi	r24, 0x05	; 5
    ca76:	e8 2e       	mov	r14, r24
    ca78:	f1 2c       	mov	r15, r1
    ca7a:	e1 cf       	rjmp	.-62     	; 0xca3e <f_opendir+0x9c>
    ca7c:	24 96       	adiw	r28, 0x04	; 4
    ca7e:	e8 e0       	ldi	r30, 0x08	; 8
    ca80:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000ca84 <f_closedir>:
    ca84:	a2 e0       	ldi	r26, 0x02	; 2
    ca86:	b0 e0       	ldi	r27, 0x00	; 0
    ca88:	e8 e4       	ldi	r30, 0x48	; 72
    ca8a:	f5 e6       	ldi	r31, 0x65	; 101
    ca8c:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    ca90:	8c 01       	movw	r16, r24
    ca92:	be 01       	movw	r22, r28
    ca94:	6f 5f       	subi	r22, 0xFF	; 255
    ca96:	7f 4f       	sbci	r23, 0xFF	; 255
    ca98:	0e 94 97 49 	call	0x932e	; 0x932e <validate>
    ca9c:	00 97       	sbiw	r24, 0x00	; 0
    ca9e:	19 f4       	brne	.+6      	; 0xcaa6 <f_closedir+0x22>
    caa0:	f8 01       	movw	r30, r16
    caa2:	11 82       	std	Z+1, r1	; 0x01
    caa4:	10 82       	st	Z, r1
    caa6:	22 96       	adiw	r28, 0x02	; 2
    caa8:	e4 e0       	ldi	r30, 0x04	; 4
    caaa:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

0000caae <f_readdir>:
    caae:	a2 e0       	ldi	r26, 0x02	; 2
    cab0:	b0 e0       	ldi	r27, 0x00	; 0
    cab2:	ed e5       	ldi	r30, 0x5D	; 93
    cab4:	f5 e6       	ldi	r31, 0x65	; 101
    cab6:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
    caba:	7c 01       	movw	r14, r24
    cabc:	5b 01       	movw	r10, r22
    cabe:	be 01       	movw	r22, r28
    cac0:	6f 5f       	subi	r22, 0xFF	; 255
    cac2:	7f 4f       	sbci	r23, 0xFF	; 255
    cac4:	0e 94 97 49 	call	0x932e	; 0x932e <validate>
    cac8:	00 97       	sbiw	r24, 0x00	; 0
    caca:	89 f5       	brne	.+98     	; 0xcb2e <f_readdir+0x80>
    cacc:	a1 14       	cp	r10, r1
    cace:	b1 04       	cpc	r11, r1
    cad0:	39 f4       	brne	.+14     	; 0xcae0 <f_readdir+0x32>
    cad2:	40 e0       	ldi	r20, 0x00	; 0
    cad4:	50 e0       	ldi	r21, 0x00	; 0
    cad6:	ba 01       	movw	r22, r20
    cad8:	c7 01       	movw	r24, r14
    cada:	0e 94 9e 51 	call	0xa33c	; 0xa33c <dir_sdi>
    cade:	27 c0       	rjmp	.+78     	; 0xcb2e <f_readdir+0x80>
    cae0:	80 e0       	ldi	r24, 0x00	; 0
    cae2:	92 e0       	ldi	r25, 0x02	; 2
    cae4:	34 d5       	rcall	.+2664   	; 0xd54e <ff_memalloc>
    cae6:	6c 01       	movw	r12, r24
    cae8:	00 97       	sbiw	r24, 0x00	; 0
    caea:	f9 f0       	breq	.+62     	; 0xcb2a <f_readdir+0x7c>
    caec:	e9 81       	ldd	r30, Y+1	; 0x01
    caee:	fa 81       	ldd	r31, Y+2	; 0x02
    caf0:	94 87       	std	Z+12, r25	; 0x0c
    caf2:	83 87       	std	Z+11, r24	; 0x0b
    caf4:	60 e0       	ldi	r22, 0x00	; 0
    caf6:	70 e0       	ldi	r23, 0x00	; 0
    caf8:	c7 01       	movw	r24, r14
    cafa:	0e 94 37 55 	call	0xaa6e	; 0xaa6e <dir_read>
    cafe:	8c 01       	movw	r16, r24
    cb00:	8b 7f       	andi	r24, 0xFB	; 251
    cb02:	89 2b       	or	r24, r25
    cb04:	71 f4       	brne	.+28     	; 0xcb22 <f_readdir+0x74>
    cb06:	b5 01       	movw	r22, r10
    cb08:	c7 01       	movw	r24, r14
    cb0a:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <get_fileinfo>
    cb0e:	60 e0       	ldi	r22, 0x00	; 0
    cb10:	70 e0       	ldi	r23, 0x00	; 0
    cb12:	c7 01       	movw	r24, r14
    cb14:	0e 94 16 54 	call	0xa82c	; 0xa82c <dir_next>
    cb18:	8c 01       	movw	r16, r24
    cb1a:	04 97       	sbiw	r24, 0x04	; 4
    cb1c:	11 f4       	brne	.+4      	; 0xcb22 <f_readdir+0x74>
    cb1e:	00 e0       	ldi	r16, 0x00	; 0
    cb20:	10 e0       	ldi	r17, 0x00	; 0
    cb22:	c6 01       	movw	r24, r12
    cb24:	17 d5       	rcall	.+2606   	; 0xd554 <ff_memfree>
    cb26:	c8 01       	movw	r24, r16
    cb28:	02 c0       	rjmp	.+4      	; 0xcb2e <f_readdir+0x80>
    cb2a:	81 e1       	ldi	r24, 0x11	; 17
    cb2c:	90 e0       	ldi	r25, 0x00	; 0
    cb2e:	22 96       	adiw	r28, 0x02	; 2
    cb30:	ea e0       	ldi	r30, 0x0A	; 10
    cb32:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

0000cb36 <f_stat>:
    cb36:	a0 e3       	ldi	r26, 0x30	; 48
    cb38:	b0 e0       	ldi	r27, 0x00	; 0
    cb3a:	e1 ea       	ldi	r30, 0xA1	; 161
    cb3c:	f5 e6       	ldi	r31, 0x65	; 101
    cb3e:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    cb42:	98 ab       	std	Y+48, r25	; 0x30
    cb44:	8f a7       	std	Y+47, r24	; 0x2f
    cb46:	6b 01       	movw	r12, r22
    cb48:	40 e0       	ldi	r20, 0x00	; 0
    cb4a:	be 01       	movw	r22, r28
    cb4c:	6f 5f       	subi	r22, 0xFF	; 255
    cb4e:	7f 4f       	sbci	r23, 0xFF	; 255
    cb50:	ce 01       	movw	r24, r28
    cb52:	8f 96       	adiw	r24, 0x2f	; 47
    cb54:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
    cb58:	00 97       	sbiw	r24, 0x00	; 0
    cb5a:	39 f5       	brne	.+78     	; 0xcbaa <f_stat+0x74>
    cb5c:	80 e0       	ldi	r24, 0x00	; 0
    cb5e:	92 e0       	ldi	r25, 0x02	; 2
    cb60:	f6 d4       	rcall	.+2540   	; 0xd54e <ff_memalloc>
    cb62:	7c 01       	movw	r14, r24
    cb64:	00 97       	sbiw	r24, 0x00	; 0
    cb66:	f9 f0       	breq	.+62     	; 0xcba6 <f_stat+0x70>
    cb68:	e9 81       	ldd	r30, Y+1	; 0x01
    cb6a:	fa 81       	ldd	r31, Y+2	; 0x02
    cb6c:	94 87       	std	Z+12, r25	; 0x0c
    cb6e:	83 87       	std	Z+11, r24	; 0x0b
    cb70:	6f a5       	ldd	r22, Y+47	; 0x2f
    cb72:	78 a9       	ldd	r23, Y+48	; 0x30
    cb74:	ce 01       	movw	r24, r28
    cb76:	01 96       	adiw	r24, 0x01	; 1
    cb78:	0e 94 e4 58 	call	0xb1c8	; 0xb1c8 <follow_path>
    cb7c:	8c 01       	movw	r16, r24
    cb7e:	89 2b       	or	r24, r25
    cb80:	71 f4       	brne	.+28     	; 0xcb9e <f_stat+0x68>
    cb82:	88 a5       	ldd	r24, Y+40	; 0x28
    cb84:	87 fd       	sbrc	r24, 7
    cb86:	09 c0       	rjmp	.+18     	; 0xcb9a <f_stat+0x64>
    cb88:	c1 14       	cp	r12, r1
    cb8a:	d1 04       	cpc	r13, r1
    cb8c:	41 f0       	breq	.+16     	; 0xcb9e <f_stat+0x68>
    cb8e:	b6 01       	movw	r22, r12
    cb90:	ce 01       	movw	r24, r28
    cb92:	01 96       	adiw	r24, 0x01	; 1
    cb94:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <get_fileinfo>
    cb98:	02 c0       	rjmp	.+4      	; 0xcb9e <f_stat+0x68>
    cb9a:	06 e0       	ldi	r16, 0x06	; 6
    cb9c:	10 e0       	ldi	r17, 0x00	; 0
    cb9e:	c7 01       	movw	r24, r14
    cba0:	d9 d4       	rcall	.+2482   	; 0xd554 <ff_memfree>
    cba2:	c8 01       	movw	r24, r16
    cba4:	02 c0       	rjmp	.+4      	; 0xcbaa <f_stat+0x74>
    cba6:	81 e1       	ldi	r24, 0x11	; 17
    cba8:	90 e0       	ldi	r25, 0x00	; 0
    cbaa:	e0 96       	adiw	r28, 0x30	; 48
    cbac:	e8 e0       	ldi	r30, 0x08	; 8
    cbae:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000cbb2 <f_getfree>:
    cbb2:	aa e0       	ldi	r26, 0x0A	; 10
    cbb4:	b0 e0       	ldi	r27, 0x00	; 0
    cbb6:	ef ed       	ldi	r30, 0xDF	; 223
    cbb8:	f5 e6       	ldi	r31, 0x65	; 101
    cbba:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    cbbe:	9c 83       	std	Y+4, r25	; 0x04
    cbc0:	8b 83       	std	Y+3, r24	; 0x03
    cbc2:	7e 83       	std	Y+6, r23	; 0x06
    cbc4:	6d 83       	std	Y+5, r22	; 0x05
    cbc6:	7a 01       	movw	r14, r20
    cbc8:	40 e0       	ldi	r20, 0x00	; 0
    cbca:	be 01       	movw	r22, r28
    cbcc:	6f 5f       	subi	r22, 0xFF	; 255
    cbce:	7f 4f       	sbci	r23, 0xFF	; 255
    cbd0:	ce 01       	movw	r24, r28
    cbd2:	03 96       	adiw	r24, 0x03	; 3
    cbd4:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
    cbd8:	8c 01       	movw	r16, r24
    cbda:	89 2b       	or	r24, r25
    cbdc:	09 f0       	breq	.+2      	; 0xcbe0 <f_getfree+0x2e>
    cbde:	c4 c0       	rjmp	.+392    	; 0xcd68 <f_getfree+0x1b6>
    cbe0:	69 80       	ldd	r6, Y+1	; 0x01
    cbe2:	7a 80       	ldd	r7, Y+2	; 0x02
    cbe4:	d7 01       	movw	r26, r14
    cbe6:	6d 92       	st	X+, r6
    cbe8:	7c 92       	st	X, r7
    cbea:	f3 01       	movw	r30, r6
    cbec:	81 89       	ldd	r24, Z+17	; 0x11
    cbee:	92 89       	ldd	r25, Z+18	; 0x12
    cbf0:	a3 89       	ldd	r26, Z+19	; 0x13
    cbf2:	b4 89       	ldd	r27, Z+20	; 0x14
    cbf4:	81 8c       	ldd	r8, Z+25	; 0x19
    cbf6:	92 8c       	ldd	r9, Z+26	; 0x1a
    cbf8:	a3 8c       	ldd	r10, Z+27	; 0x1b
    cbfa:	b4 8c       	ldd	r11, Z+28	; 0x1c
    cbfc:	b5 01       	movw	r22, r10
    cbfe:	a4 01       	movw	r20, r8
    cc00:	42 50       	subi	r20, 0x02	; 2
    cc02:	51 09       	sbc	r21, r1
    cc04:	61 09       	sbc	r22, r1
    cc06:	71 09       	sbc	r23, r1
    cc08:	48 17       	cp	r20, r24
    cc0a:	59 07       	cpc	r21, r25
    cc0c:	6a 07       	cpc	r22, r26
    cc0e:	7b 07       	cpc	r23, r27
    cc10:	38 f0       	brcs	.+14     	; 0xcc20 <f_getfree+0x6e>
    cc12:	ed 81       	ldd	r30, Y+5	; 0x05
    cc14:	fe 81       	ldd	r31, Y+6	; 0x06
    cc16:	80 83       	st	Z, r24
    cc18:	91 83       	std	Z+1, r25	; 0x01
    cc1a:	a2 83       	std	Z+2, r26	; 0x02
    cc1c:	b3 83       	std	Z+3, r27	; 0x03
    cc1e:	a4 c0       	rjmp	.+328    	; 0xcd68 <f_getfree+0x1b6>
    cc20:	80 81       	ld	r24, Z
    cc22:	81 30       	cpi	r24, 0x01	; 1
    cc24:	a1 f5       	brne	.+104    	; 0xcc8e <f_getfree+0xdc>
    cc26:	82 e0       	ldi	r24, 0x02	; 2
    cc28:	88 2e       	mov	r8, r24
    cc2a:	91 2c       	mov	r9, r1
    cc2c:	a1 2c       	mov	r10, r1
    cc2e:	b1 2c       	mov	r11, r1
    cc30:	c1 2c       	mov	r12, r1
    cc32:	d1 2c       	mov	r13, r1
    cc34:	76 01       	movw	r14, r12
    cc36:	b5 01       	movw	r22, r10
    cc38:	a4 01       	movw	r20, r8
    cc3a:	c3 01       	movw	r24, r6
    cc3c:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <get_fat.isra.10>
    cc40:	6f 3f       	cpi	r22, 0xFF	; 255
    cc42:	bf ef       	ldi	r27, 0xFF	; 255
    cc44:	7b 07       	cpc	r23, r27
    cc46:	8b 07       	cpc	r24, r27
    cc48:	9b 07       	cpc	r25, r27
    cc4a:	09 f4       	brne	.+2      	; 0xcc4e <f_getfree+0x9c>
    cc4c:	76 c0       	rjmp	.+236    	; 0xcd3a <f_getfree+0x188>
    cc4e:	61 30       	cpi	r22, 0x01	; 1
    cc50:	71 05       	cpc	r23, r1
    cc52:	81 05       	cpc	r24, r1
    cc54:	91 05       	cpc	r25, r1
    cc56:	09 f4       	brne	.+2      	; 0xcc5a <f_getfree+0xa8>
    cc58:	73 c0       	rjmp	.+230    	; 0xcd40 <f_getfree+0x18e>
    cc5a:	67 2b       	or	r22, r23
    cc5c:	68 2b       	or	r22, r24
    cc5e:	69 2b       	or	r22, r25
    cc60:	29 f4       	brne	.+10     	; 0xcc6c <f_getfree+0xba>
    cc62:	ef ef       	ldi	r30, 0xFF	; 255
    cc64:	ce 1a       	sub	r12, r30
    cc66:	de 0a       	sbc	r13, r30
    cc68:	ee 0a       	sbc	r14, r30
    cc6a:	fe 0a       	sbc	r15, r30
    cc6c:	ff ef       	ldi	r31, 0xFF	; 255
    cc6e:	8f 1a       	sub	r8, r31
    cc70:	9f 0a       	sbc	r9, r31
    cc72:	af 0a       	sbc	r10, r31
    cc74:	bf 0a       	sbc	r11, r31
    cc76:	e9 81       	ldd	r30, Y+1	; 0x01
    cc78:	fa 81       	ldd	r31, Y+2	; 0x02
    cc7a:	81 8d       	ldd	r24, Z+25	; 0x19
    cc7c:	92 8d       	ldd	r25, Z+26	; 0x1a
    cc7e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    cc80:	b4 8d       	ldd	r27, Z+28	; 0x1c
    cc82:	88 16       	cp	r8, r24
    cc84:	99 06       	cpc	r9, r25
    cc86:	aa 06       	cpc	r10, r26
    cc88:	bb 06       	cpc	r11, r27
    cc8a:	a8 f2       	brcs	.-86     	; 0xcc36 <f_getfree+0x84>
    cc8c:	5d c0       	rjmp	.+186    	; 0xcd48 <f_getfree+0x196>
    cc8e:	f3 01       	movw	r30, r6
    cc90:	45 a0       	ldd	r4, Z+37	; 0x25
    cc92:	56 a0       	ldd	r5, Z+38	; 0x26
    cc94:	67 a0       	ldd	r6, Z+39	; 0x27
    cc96:	70 a4       	ldd	r7, Z+40	; 0x28
    cc98:	21 2c       	mov	r2, r1
    cc9a:	31 2c       	mov	r3, r1
    cc9c:	c1 2c       	mov	r12, r1
    cc9e:	d1 2c       	mov	r13, r1
    cca0:	76 01       	movw	r14, r12
    cca2:	21 14       	cp	r2, r1
    cca4:	31 04       	cpc	r3, r1
    cca6:	b1 f4       	brne	.+44     	; 0xccd4 <f_getfree+0x122>
    cca8:	d3 01       	movw	r26, r6
    ccaa:	c2 01       	movw	r24, r4
    ccac:	01 96       	adiw	r24, 0x01	; 1
    ccae:	a1 1d       	adc	r26, r1
    ccb0:	b1 1d       	adc	r27, r1
    ccb2:	8f 83       	std	Y+7, r24	; 0x07
    ccb4:	98 87       	std	Y+8, r25	; 0x08
    ccb6:	a9 87       	std	Y+9, r26	; 0x09
    ccb8:	ba 87       	std	Y+10, r27	; 0x0a
    ccba:	b3 01       	movw	r22, r6
    ccbc:	a2 01       	movw	r20, r4
    ccbe:	89 81       	ldd	r24, Y+1	; 0x01
    ccc0:	9a 81       	ldd	r25, Y+2	; 0x02
    ccc2:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    ccc6:	00 97       	sbiw	r24, 0x00	; 0
    ccc8:	09 f0       	breq	.+2      	; 0xcccc <f_getfree+0x11a>
    ccca:	3d c0       	rjmp	.+122    	; 0xcd46 <f_getfree+0x194>
    cccc:	4f 80       	ldd	r4, Y+7	; 0x07
    ccce:	58 84       	ldd	r5, Y+8	; 0x08
    ccd0:	69 84       	ldd	r6, Y+9	; 0x09
    ccd2:	7a 84       	ldd	r7, Y+10	; 0x0a
    ccd4:	e9 81       	ldd	r30, Y+1	; 0x01
    ccd6:	fa 81       	ldd	r31, Y+2	; 0x02
    ccd8:	80 81       	ld	r24, Z
    ccda:	82 30       	cpi	r24, 0x02	; 2
    ccdc:	79 f4       	brne	.+30     	; 0xccfc <f_getfree+0x14a>
    ccde:	e2 0d       	add	r30, r2
    cce0:	f3 1d       	adc	r31, r3
    cce2:	85 a9       	ldd	r24, Z+53	; 0x35
    cce4:	96 a9       	ldd	r25, Z+54	; 0x36
    cce6:	89 2b       	or	r24, r25
    cce8:	29 f4       	brne	.+10     	; 0xccf4 <f_getfree+0x142>
    ccea:	9f ef       	ldi	r25, 0xFF	; 255
    ccec:	c9 1a       	sub	r12, r25
    ccee:	d9 0a       	sbc	r13, r25
    ccf0:	e9 0a       	sbc	r14, r25
    ccf2:	f9 0a       	sbc	r15, r25
    ccf4:	a2 e0       	ldi	r26, 0x02	; 2
    ccf6:	2a 0e       	add	r2, r26
    ccf8:	31 1c       	adc	r3, r1
    ccfa:	15 c0       	rjmp	.+42     	; 0xcd26 <f_getfree+0x174>
    ccfc:	cf 01       	movw	r24, r30
    ccfe:	c5 96       	adiw	r24, 0x35	; 53
    cd00:	82 0d       	add	r24, r2
    cd02:	93 1d       	adc	r25, r3
    cd04:	0e 94 3f 48 	call	0x907e	; 0x907e <ld_dword>
    cd08:	dc 01       	movw	r26, r24
    cd0a:	cb 01       	movw	r24, r22
    cd0c:	bf 70       	andi	r27, 0x0F	; 15
    cd0e:	89 2b       	or	r24, r25
    cd10:	8a 2b       	or	r24, r26
    cd12:	8b 2b       	or	r24, r27
    cd14:	29 f4       	brne	.+10     	; 0xcd20 <f_getfree+0x16e>
    cd16:	bf ef       	ldi	r27, 0xFF	; 255
    cd18:	cb 1a       	sub	r12, r27
    cd1a:	db 0a       	sbc	r13, r27
    cd1c:	eb 0a       	sbc	r14, r27
    cd1e:	fb 0a       	sbc	r15, r27
    cd20:	e4 e0       	ldi	r30, 0x04	; 4
    cd22:	2e 0e       	add	r2, r30
    cd24:	31 1c       	adc	r3, r1
    cd26:	f1 e0       	ldi	r31, 0x01	; 1
    cd28:	3f 22       	and	r3, r31
    cd2a:	21 e0       	ldi	r18, 0x01	; 1
    cd2c:	82 1a       	sub	r8, r18
    cd2e:	91 08       	sbc	r9, r1
    cd30:	a1 08       	sbc	r10, r1
    cd32:	b1 08       	sbc	r11, r1
    cd34:	09 f0       	breq	.+2      	; 0xcd38 <f_getfree+0x186>
    cd36:	b5 cf       	rjmp	.-150    	; 0xcca2 <f_getfree+0xf0>
    cd38:	07 c0       	rjmp	.+14     	; 0xcd48 <f_getfree+0x196>
    cd3a:	01 e0       	ldi	r16, 0x01	; 1
    cd3c:	10 e0       	ldi	r17, 0x00	; 0
    cd3e:	04 c0       	rjmp	.+8      	; 0xcd48 <f_getfree+0x196>
    cd40:	02 e0       	ldi	r16, 0x02	; 2
    cd42:	10 e0       	ldi	r17, 0x00	; 0
    cd44:	01 c0       	rjmp	.+2      	; 0xcd48 <f_getfree+0x196>
    cd46:	8c 01       	movw	r16, r24
    cd48:	ad 81       	ldd	r26, Y+5	; 0x05
    cd4a:	be 81       	ldd	r27, Y+6	; 0x06
    cd4c:	cd 92       	st	X+, r12
    cd4e:	dd 92       	st	X+, r13
    cd50:	ed 92       	st	X+, r14
    cd52:	fc 92       	st	X, r15
    cd54:	13 97       	sbiw	r26, 0x03	; 3
    cd56:	e9 81       	ldd	r30, Y+1	; 0x01
    cd58:	fa 81       	ldd	r31, Y+2	; 0x02
    cd5a:	c1 8a       	std	Z+17, r12	; 0x11
    cd5c:	d2 8a       	std	Z+18, r13	; 0x12
    cd5e:	e3 8a       	std	Z+19, r14	; 0x13
    cd60:	f4 8a       	std	Z+20, r15	; 0x14
    cd62:	84 81       	ldd	r24, Z+4	; 0x04
    cd64:	81 60       	ori	r24, 0x01	; 1
    cd66:	84 83       	std	Z+4, r24	; 0x04
    cd68:	c8 01       	movw	r24, r16
    cd6a:	2a 96       	adiw	r28, 0x0a	; 10
    cd6c:	e2 e1       	ldi	r30, 0x12	; 18
    cd6e:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0000cd72 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cd72:	a0 e6       	ldi	r26, 0x60	; 96
    cd74:	b0 e0       	ldi	r27, 0x00	; 0
    cd76:	ef eb       	ldi	r30, 0xBF	; 191
    cd78:	f6 e6       	ldi	r31, 0x66	; 102
    cd7a:	0c 94 f0 e3 	jmp	0x1c7e0	; 0x1c7e0 <__prologue_saves__+0xe>
    cd7e:	a1 96       	adiw	r28, 0x21	; 33
    cd80:	9f af       	std	Y+63, r25	; 0x3f
    cd82:	8e af       	std	Y+62, r24	; 0x3e
    cd84:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cd86:	42 e0       	ldi	r20, 0x02	; 2
    cd88:	be 01       	movw	r22, r28
    cd8a:	63 5a       	subi	r22, 0xA3	; 163
    cd8c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd8e:	ce 01       	movw	r24, r28
    cd90:	81 5a       	subi	r24, 0xA1	; 161
    cd92:	9f 4f       	sbci	r25, 0xFF	; 255
    cd94:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
	if (res == FR_OK) {
    cd98:	00 97       	sbiw	r24, 0x00	; 0
    cd9a:	09 f0       	breq	.+2      	; 0xcd9e <f_unlink+0x2c>
    cd9c:	8c c0       	rjmp	.+280    	; 0xceb6 <f_unlink+0x144>
		dj.obj.fs = fs;
    cd9e:	6f 96       	adiw	r28, 0x1f	; 31
    cda0:	8e ad       	ldd	r24, Y+62	; 0x3e
    cda2:	9f ad       	ldd	r25, Y+63	; 0x3f
    cda4:	6f 97       	sbiw	r28, 0x1f	; 31
    cda6:	98 ab       	std	Y+48, r25	; 0x30
    cda8:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cdaa:	80 e0       	ldi	r24, 0x00	; 0
    cdac:	92 e0       	ldi	r25, 0x02	; 2
    cdae:	cf d3       	rcall	.+1950   	; 0xd54e <ff_memalloc>
    cdb0:	5c 01       	movw	r10, r24
    cdb2:	00 97       	sbiw	r24, 0x00	; 0
    cdb4:	09 f4       	brne	.+2      	; 0xcdb8 <f_unlink+0x46>
    cdb6:	49 c0       	rjmp	.+146    	; 0xce4a <f_unlink+0xd8>
    cdb8:	6f 96       	adiw	r28, 0x1f	; 31
    cdba:	ee ad       	ldd	r30, Y+62	; 0x3e
    cdbc:	ff ad       	ldd	r31, Y+63	; 0x3f
    cdbe:	6f 97       	sbiw	r28, 0x1f	; 31
    cdc0:	94 87       	std	Z+12, r25	; 0x0c
    cdc2:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cdc4:	a1 96       	adiw	r28, 0x21	; 33
    cdc6:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdc8:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdca:	a1 97       	sbiw	r28, 0x21	; 33
    cdcc:	ce 01       	movw	r24, r28
    cdce:	8f 96       	adiw	r24, 0x2f	; 47
    cdd0:	0e 94 e4 58 	call	0xb1c8	; 0xb1c8 <follow_path>
    cdd4:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cdd6:	89 2b       	or	r24, r25
    cdd8:	a1 f5       	brne	.+104    	; 0xce42 <f_unlink+0xd0>
    cdda:	67 96       	adiw	r28, 0x17	; 23
    cddc:	8f ad       	ldd	r24, Y+63	; 0x3f
    cdde:	67 97       	sbiw	r28, 0x17	; 23
    cde0:	85 fd       	sbrc	r24, 5
    cde2:	36 c0       	rjmp	.+108    	; 0xce50 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    cde4:	87 fd       	sbrc	r24, 7
    cde6:	34 c0       	rjmp	.+104    	; 0xce50 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    cde8:	9b a8       	ldd	r9, Y+51	; 0x33
    cdea:	90 fc       	sbrc	r9, 0
    cdec:	40 c0       	rjmp	.+128    	; 0xce6e <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cdee:	6f 96       	adiw	r28, 0x1f	; 31
    cdf0:	0e ad       	ldd	r16, Y+62	; 0x3e
    cdf2:	1f ad       	ldd	r17, Y+63	; 0x3f
    cdf4:	6f 97       	sbiw	r28, 0x1f	; 31
    cdf6:	2b 96       	adiw	r28, 0x0b	; 11
    cdf8:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdfa:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdfc:	2b 97       	sbiw	r28, 0x0b	; 11
    cdfe:	f8 01       	movw	r30, r16
    ce00:	80 81       	ld	r24, Z
    ce02:	0e 94 8b 4b 	call	0x9716	; 0x9716 <ld_clust.isra.4>
    ce06:	6b 01       	movw	r12, r22
    ce08:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ce0a:	94 fe       	sbrs	r9, 4
    ce0c:	33 c0       	rjmp	.+102    	; 0xce74 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ce0e:	f8 01       	movw	r30, r16
    ce10:	85 89       	ldd	r24, Z+21	; 0x15
    ce12:	96 89       	ldd	r25, Z+22	; 0x16
    ce14:	a7 89       	ldd	r26, Z+23	; 0x17
    ce16:	b0 8d       	ldd	r27, Z+24	; 0x18
    ce18:	c8 16       	cp	r12, r24
    ce1a:	d9 06       	cpc	r13, r25
    ce1c:	ea 06       	cpc	r14, r26
    ce1e:	fb 06       	cpc	r15, r27
    ce20:	31 f1       	breq	.+76     	; 0xce6e <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ce22:	1a 83       	std	Y+2, r17	; 0x02
    ce24:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ce26:	cf 82       	std	Y+7, r12	; 0x07
    ce28:	d8 86       	std	Y+8, r13	; 0x08
    ce2a:	e9 86       	std	Y+9, r14	; 0x09
    ce2c:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ce2e:	40 e0       	ldi	r20, 0x00	; 0
    ce30:	50 e0       	ldi	r21, 0x00	; 0
    ce32:	ba 01       	movw	r22, r20
    ce34:	ce 01       	movw	r24, r28
    ce36:	01 96       	adiw	r24, 0x01	; 1
    ce38:	0e 94 9e 51 	call	0xa33c	; 0xa33c <dir_sdi>
    ce3c:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    ce3e:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ce40:	51 f0       	breq	.+20     	; 0xce56 <f_unlink+0xe4>
    ce42:	c5 01       	movw	r24, r10
    ce44:	87 d3       	rcall	.+1806   	; 0xd554 <ff_memfree>
    ce46:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce48:	36 c0       	rjmp	.+108    	; 0xceb6 <f_unlink+0x144>
    ce4a:	81 e1       	ldi	r24, 0x11	; 17
    ce4c:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    ce4e:	33 c0       	rjmp	.+102    	; 0xceb6 <f_unlink+0x144>
    ce50:	06 e0       	ldi	r16, 0x06	; 6
    ce52:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    ce54:	f6 cf       	rjmp	.-20     	; 0xce42 <f_unlink+0xd0>
    ce56:	60 e0       	ldi	r22, 0x00	; 0
    ce58:	70 e0       	ldi	r23, 0x00	; 0
    ce5a:	ce 01       	movw	r24, r28
    ce5c:	01 96       	adiw	r24, 0x01	; 1
    ce5e:	0e 94 37 55 	call	0xaa6e	; 0xaa6e <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    ce62:	8c 01       	movw	r16, r24
    ce64:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    ce66:	19 f0       	breq	.+6      	; 0xce6e <f_unlink+0xfc>
    ce68:	04 97       	sbiw	r24, 0x04	; 4
    ce6a:	21 f0       	breq	.+8      	; 0xce74 <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    ce6c:	ea cf       	rjmp	.-44     	; 0xce42 <f_unlink+0xd0>
    ce6e:	07 e0       	ldi	r16, 0x07	; 7
    ce70:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    ce72:	e7 cf       	rjmp	.-50     	; 0xce42 <f_unlink+0xd0>
    ce74:	ce 01       	movw	r24, r28
    ce76:	8f 96       	adiw	r24, 0x2f	; 47
    ce78:	0e 94 00 56 	call	0xac00	; 0xac00 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    ce7c:	8c 01       	movw	r16, r24
    ce7e:	89 2b       	or	r24, r25
    ce80:	01 f7       	brne	.-64     	; 0xce42 <f_unlink+0xd0>
    ce82:	c1 14       	cp	r12, r1
    ce84:	d1 04       	cpc	r13, r1
    ce86:	e1 04       	cpc	r14, r1
    ce88:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    ce8a:	41 f4       	brne	.+16     	; 0xce9c <f_unlink+0x12a>
    ce8c:	6f 96       	adiw	r28, 0x1f	; 31
    ce8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    ce90:	9f ad       	ldd	r25, Y+63	; 0x3f
    ce92:	6f 97       	sbiw	r28, 0x1f	; 31
    ce94:	0e 94 00 4c 	call	0x9800	; 0x9800 <sync_fs>
    ce98:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    ce9a:	d3 cf       	rjmp	.-90     	; 0xce42 <f_unlink+0xd0>
    ce9c:	00 e0       	ldi	r16, 0x00	; 0
    ce9e:	10 e0       	ldi	r17, 0x00	; 0
    cea0:	98 01       	movw	r18, r16
    cea2:	b7 01       	movw	r22, r14
    cea4:	a6 01       	movw	r20, r12
    cea6:	ce 01       	movw	r24, r28
    cea8:	8f 96       	adiw	r24, 0x2f	; 47
    ceaa:	0e 94 85 53 	call	0xa70a	; 0xa70a <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    ceae:	8c 01       	movw	r16, r24
    ceb0:	89 2b       	or	r24, r25
    ceb2:	39 f6       	brne	.-114    	; 0xce42 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ceb4:	eb cf       	rjmp	.-42     	; 0xce8c <f_unlink+0x11a>
    ceb6:	c0 5a       	subi	r28, 0xA0	; 160
    ceb8:	df 4f       	sbci	r29, 0xFF	; 255
    ceba:	eb e0       	ldi	r30, 0x0B	; 11
    cebc:	0c 94 0c e4 	jmp	0x1c818	; 0x1c818 <__epilogue_restores__+0xe>

0000cec0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cec0:	a0 e4       	ldi	r26, 0x40	; 64
    cec2:	b0 e0       	ldi	r27, 0x00	; 0
    cec4:	e6 e6       	ldi	r30, 0x66	; 102
    cec6:	f7 e6       	ldi	r31, 0x67	; 103
    cec8:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__prologue_saves__+0x4>
    cecc:	21 96       	adiw	r28, 0x01	; 1
    cece:	9f af       	std	Y+63, r25	; 0x3f
    ced0:	8e af       	std	Y+62, r24	; 0x3e
    ced2:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ced4:	42 e0       	ldi	r20, 0x02	; 2
    ced6:	be 01       	movw	r22, r28
    ced8:	63 5c       	subi	r22, 0xC3	; 195
    ceda:	7f 4f       	sbci	r23, 0xFF	; 255
    cedc:	ce 01       	movw	r24, r28
    cede:	cf 96       	adiw	r24, 0x3f	; 63
    cee0:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
	if (res == FR_OK) {
    cee4:	00 97       	sbiw	r24, 0x00	; 0
    cee6:	09 f0       	breq	.+2      	; 0xceea <f_mkdir+0x2a>
    cee8:	d6 c0       	rjmp	.+428    	; 0xd096 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    ceea:	8d ad       	ldd	r24, Y+61	; 0x3d
    ceec:	9e ad       	ldd	r25, Y+62	; 0x3e
    ceee:	9a 83       	std	Y+2, r25	; 0x02
    cef0:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cef2:	80 e0       	ldi	r24, 0x00	; 0
    cef4:	92 e0       	ldi	r25, 0x02	; 2
    cef6:	2b d3       	rcall	.+1622   	; 0xd54e <ff_memalloc>
    cef8:	6c 01       	movw	r12, r24
    cefa:	00 97       	sbiw	r24, 0x00	; 0
    cefc:	e9 f0       	breq	.+58     	; 0xcf38 <f_mkdir+0x78>
    cefe:	ed ad       	ldd	r30, Y+61	; 0x3d
    cf00:	fe ad       	ldd	r31, Y+62	; 0x3e
    cf02:	94 87       	std	Z+12, r25	; 0x0c
    cf04:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cf06:	21 96       	adiw	r28, 0x01	; 1
    cf08:	6e ad       	ldd	r22, Y+62	; 0x3e
    cf0a:	7f ad       	ldd	r23, Y+63	; 0x3f
    cf0c:	21 97       	sbiw	r28, 0x01	; 1
    cf0e:	ce 01       	movw	r24, r28
    cf10:	01 96       	adiw	r24, 0x01	; 1
    cf12:	0e 94 e4 58 	call	0xb1c8	; 0xb1c8 <follow_path>
    cf16:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cf18:	89 2b       	or	r24, r25
    cf1a:	89 f0       	breq	.+34     	; 0xcf3e <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cf1c:	84 e0       	ldi	r24, 0x04	; 4
    cf1e:	e8 16       	cp	r14, r24
    cf20:	f1 04       	cpc	r15, r1
    cf22:	31 f4       	brne	.+12     	; 0xcf30 <f_mkdir+0x70>
    cf24:	88 a5       	ldd	r24, Y+40	; 0x28
    cf26:	85 ff       	sbrs	r24, 5
    cf28:	0e c0       	rjmp	.+28     	; 0xcf46 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cf2a:	26 e0       	ldi	r18, 0x06	; 6
    cf2c:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cf2e:	f1 2c       	mov	r15, r1
    cf30:	c6 01       	movw	r24, r12
    cf32:	10 d3       	rcall	.+1568   	; 0xd554 <ff_memfree>
    cf34:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cf36:	af c0       	rjmp	.+350    	; 0xd096 <f_mkdir+0x1d6>
    cf38:	81 e1       	ldi	r24, 0x11	; 17
    cf3a:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cf3c:	ac c0       	rjmp	.+344    	; 0xd096 <f_mkdir+0x1d6>
    cf3e:	38 e0       	ldi	r19, 0x08	; 8
    cf40:	e3 2e       	mov	r14, r19
    cf42:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cf44:	f5 cf       	rjmp	.-22     	; 0xcf30 <f_mkdir+0x70>
    cf46:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf48:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf4a:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cf4c:	8f a7       	std	Y+47, r24	; 0x2f
    cf4e:	40 e0       	ldi	r20, 0x00	; 0
    cf50:	50 e0       	ldi	r21, 0x00	; 0
    cf52:	ba 01       	movw	r22, r20
    cf54:	ce 01       	movw	r24, r28
    cf56:	8f 96       	adiw	r24, 0x2f	; 47
    cf58:	0e 94 5f 52 	call	0xa4be	; 0xa4be <create_chain>
    cf5c:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cf5e:	5c 01       	movw	r10, r24
    cf60:	67 2b       	or	r22, r23
    cf62:	68 2b       	or	r22, r24
    cf64:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cf66:	09 f1       	breq	.+66     	; 0xcfaa <f_mkdir+0xea>
    cf68:	e1 e0       	ldi	r30, 0x01	; 1
    cf6a:	8e 16       	cp	r8, r30
    cf6c:	91 04       	cpc	r9, r1
    cf6e:	a1 04       	cpc	r10, r1
    cf70:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cf72:	61 f0       	breq	.+24     	; 0xcf8c <f_mkdir+0xcc>
    cf74:	ff ef       	ldi	r31, 0xFF	; 255
    cf76:	8f 16       	cp	r8, r31
    cf78:	9f 06       	cpc	r9, r31
    cf7a:	af 06       	cpc	r10, r31
    cf7c:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    cf7e:	d9 f4       	brne	.+54     	; 0xcfb6 <f_mkdir+0xf6>
    cf80:	0e 94 18 72 	call	0xe430	; 0xe430 <get_fattime>
    cf84:	ee 24       	eor	r14, r14
    cf86:	e3 94       	inc	r14
    cf88:	f1 2c       	mov	r15, r1
    cf8a:	05 c0       	rjmp	.+10     	; 0xcf96 <f_mkdir+0xd6>
    cf8c:	0e 94 18 72 	call	0xe430	; 0xe430 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cf90:	92 e0       	ldi	r25, 0x02	; 2
    cf92:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cf94:	f1 2c       	mov	r15, r1
    cf96:	00 e0       	ldi	r16, 0x00	; 0
    cf98:	10 e0       	ldi	r17, 0x00	; 0
    cf9a:	98 01       	movw	r18, r16
    cf9c:	b5 01       	movw	r22, r10
    cf9e:	a4 01       	movw	r20, r8
    cfa0:	ce 01       	movw	r24, r28
    cfa2:	8f 96       	adiw	r24, 0x2f	; 47
    cfa4:	0e 94 85 53 	call	0xa70a	; 0xa70a <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cfa8:	c3 cf       	rjmp	.-122    	; 0xcf30 <f_mkdir+0x70>
    cfaa:	0e 94 18 72 	call	0xe430	; 0xe430 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cfae:	87 e0       	ldi	r24, 0x07	; 7
    cfb0:	e8 2e       	mov	r14, r24
    cfb2:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cfb4:	f0 cf       	rjmp	.-32     	; 0xcf96 <f_mkdir+0xd6>
    cfb6:	0e 94 18 72 	call	0xe430	; 0xe430 <get_fattime>
    cfba:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cfbc:	3c 01       	movw	r6, r24
    cfbe:	b5 01       	movw	r22, r10
    cfc0:	a4 01       	movw	r20, r8
    cfc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    cfc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    cfc6:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <dir_clear>
				if (res == FR_OK) {
    cfca:	7c 01       	movw	r14, r24
    cfcc:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cfce:	19 f7       	brne	.-58     	; 0xcf96 <f_mkdir+0xd6>
    cfd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    cfd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    cfd4:	4b e0       	ldi	r20, 0x0B	; 11
    cfd6:	50 e0       	ldi	r21, 0x00	; 0
    cfd8:	60 e2       	ldi	r22, 0x20	; 32
    cfda:	70 e0       	ldi	r23, 0x00	; 0
    cfdc:	c5 96       	adiw	r24, 0x35	; 53
    cfde:	0e 94 5a 48 	call	0x90b4	; 0x90b4 <mem_set>
						fs->win[DIR_Name] = '.';
    cfe2:	8d ad       	ldd	r24, Y+61	; 0x3d
    cfe4:	9e ad       	ldd	r25, Y+62	; 0x3e
    cfe6:	1e e2       	ldi	r17, 0x2E	; 46
    cfe8:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    cfea:	15 ab       	std	Z+53, r17	; 0x35
    cfec:	e0 5c       	subi	r30, 0xC0	; 192
    cfee:	ff 4f       	sbci	r31, 0xFF	; 255
    cff0:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    cff2:	20 83       	st	Z, r18
    cff4:	b3 01       	movw	r22, r6
    cff6:	a2 01       	movw	r20, r4
    cff8:	85 5b       	subi	r24, 0xB5	; 181
    cffa:	9f 4f       	sbci	r25, 0xFF	; 255
    cffc:	0e 94 54 48 	call	0x90a8	; 0x90a8 <st_dword>
						st_clust(fs, fs->win, dcl);
    d000:	8d ad       	ldd	r24, Y+61	; 0x3d
    d002:	9e ad       	ldd	r25, Y+62	; 0x3e
    d004:	bc 01       	movw	r22, r24
    d006:	6b 5c       	subi	r22, 0xCB	; 203
    d008:	7f 4f       	sbci	r23, 0xFF	; 255
    d00a:	a5 01       	movw	r20, r10
    d00c:	94 01       	movw	r18, r8
    d00e:	0e 94 a0 4b 	call	0x9740	; 0x9740 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    d012:	8d ad       	ldd	r24, Y+61	; 0x3d
    d014:	9e ad       	ldd	r25, Y+62	; 0x3e
    d016:	bc 01       	movw	r22, r24
    d018:	6b 5c       	subi	r22, 0xCB	; 203
    d01a:	7f 4f       	sbci	r23, 0xFF	; 255
    d01c:	40 e2       	ldi	r20, 0x20	; 32
    d01e:	50 e0       	ldi	r21, 0x00	; 0
    d020:	8b 5a       	subi	r24, 0xAB	; 171
    d022:	9f 4f       	sbci	r25, 0xFF	; 255
    d024:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    d028:	8d ad       	ldd	r24, Y+61	; 0x3d
    d02a:	9e ad       	ldd	r25, Y+62	; 0x3e
    d02c:	fc 01       	movw	r30, r24
    d02e:	ea 5a       	subi	r30, 0xAA	; 170
    d030:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    d032:	10 83       	st	Z, r17
    d034:	2f 81       	ldd	r18, Y+7	; 0x07
    d036:	38 85       	ldd	r19, Y+8	; 0x08
    d038:	49 85       	ldd	r20, Y+9	; 0x09
    d03a:	5a 85       	ldd	r21, Y+10	; 0x0a
    d03c:	bc 01       	movw	r22, r24
    d03e:	6b 5a       	subi	r22, 0xAB	; 171
    d040:	7f 4f       	sbci	r23, 0xFF	; 255
    d042:	0e 94 a0 4b 	call	0x9740	; 0x9740 <st_clust.isra.5>
						fs->wflag = 1;
    d046:	ed ad       	ldd	r30, Y+61	; 0x3d
    d048:	fe ad       	ldd	r31, Y+62	; 0x3e
    d04a:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    d04c:	83 83       	std	Z+3, r24	; 0x03
    d04e:	ce 01       	movw	r24, r28
    d050:	01 96       	adiw	r24, 0x01	; 1
    d052:	0e 94 56 57 	call	0xaeac	; 0xaeac <dir_register>
				}
			}
			if (res == FR_OK) {
    d056:	7c 01       	movw	r14, r24
    d058:	89 2b       	or	r24, r25
    d05a:	09 f0       	breq	.+2      	; 0xd05e <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    d05c:	9c cf       	rjmp	.-200    	; 0xcf96 <f_mkdir+0xd6>
    d05e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d062:	b3 01       	movw	r22, r6
    d064:	a2 01       	movw	r20, r4
    d066:	46 96       	adiw	r24, 0x16	; 22
    d068:	0e 94 54 48 	call	0x90a8	; 0x90a8 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    d06c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    d06e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    d070:	a5 01       	movw	r20, r10
    d072:	94 01       	movw	r18, r8
    d074:	8d ad       	ldd	r24, Y+61	; 0x3d
    d076:	9e ad       	ldd	r25, Y+62	; 0x3e
    d078:	0e 94 a0 4b 	call	0x9740	; 0x9740 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    d07c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d07e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d080:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    d082:	83 87       	std	Z+11, r24	; 0x0b
    d084:	8d ad       	ldd	r24, Y+61	; 0x3d
    d086:	9e ad       	ldd	r25, Y+62	; 0x3e
    d088:	21 e0       	ldi	r18, 0x01	; 1
    d08a:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    d08c:	23 83       	std	Z+3, r18	; 0x03
    d08e:	0e 94 00 4c 	call	0x9800	; 0x9800 <sync_fs>
    d092:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d094:	4d cf       	rjmp	.-358    	; 0xcf30 <f_mkdir+0x70>
    d096:	c0 5c       	subi	r28, 0xC0	; 192
    d098:	df 4f       	sbci	r29, 0xFF	; 255
    d09a:	e0 e1       	ldi	r30, 0x10	; 16
    d09c:	0c 94 07 e4 	jmp	0x1c80e	; 0x1c80e <__epilogue_restores__+0x4>

0000d0a0 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    d0a0:	a2 e8       	ldi	r26, 0x82	; 130
    d0a2:	b0 e0       	ldi	r27, 0x00	; 0
    d0a4:	e6 e5       	ldi	r30, 0x56	; 86
    d0a6:	f8 e6       	ldi	r31, 0x68	; 104
    d0a8:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__prologue_saves__+0x12>
    d0ac:	c1 58       	subi	r28, 0x81	; 129
    d0ae:	df 4f       	sbci	r29, 0xFF	; 255
    d0b0:	99 83       	std	Y+1, r25	; 0x01
    d0b2:	88 83       	st	Y, r24
    d0b4:	cf 57       	subi	r28, 0x7F	; 127
    d0b6:	d0 40       	sbci	r29, 0x00	; 0
    d0b8:	cf 57       	subi	r28, 0x7F	; 127
    d0ba:	df 4f       	sbci	r29, 0xFF	; 255
    d0bc:	79 83       	std	Y+1, r23	; 0x01
    d0be:	68 83       	st	Y, r22
    d0c0:	c1 58       	subi	r28, 0x81	; 129
    d0c2:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    d0c4:	ce 01       	movw	r24, r28
    d0c6:	8f 57       	subi	r24, 0x7F	; 127
    d0c8:	9f 4f       	sbci	r25, 0xFF	; 255
    d0ca:	0e 94 6b 49 	call	0x92d6	; 0x92d6 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    d0ce:	42 e0       	ldi	r20, 0x02	; 2
    d0d0:	be 01       	movw	r22, r28
    d0d2:	63 58       	subi	r22, 0x83	; 131
    d0d4:	7f 4f       	sbci	r23, 0xFF	; 255
    d0d6:	ce 01       	movw	r24, r28
    d0d8:	81 58       	subi	r24, 0x81	; 129
    d0da:	9f 4f       	sbci	r25, 0xFF	; 255
    d0dc:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
	if (res == FR_OK) {
    d0e0:	00 97       	sbiw	r24, 0x00	; 0
    d0e2:	09 f0       	breq	.+2      	; 0xd0e6 <f_rename+0x46>
    d0e4:	ed c0       	rjmp	.+474    	; 0xd2c0 <f_rename+0x220>
		djo.obj.fs = fs;
    d0e6:	ef 96       	adiw	r28, 0x3f	; 63
    d0e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    d0ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    d0ec:	ef 97       	sbiw	r28, 0x3f	; 63
    d0ee:	98 ab       	std	Y+48, r25	; 0x30
    d0f0:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    d0f2:	80 e0       	ldi	r24, 0x00	; 0
    d0f4:	92 e0       	ldi	r25, 0x02	; 2
    d0f6:	2b d2       	rcall	.+1110   	; 0xd54e <ff_memalloc>
    d0f8:	6c 01       	movw	r12, r24
    d0fa:	00 97       	sbiw	r24, 0x00	; 0
    d0fc:	f1 f0       	breq	.+60     	; 0xd13a <f_rename+0x9a>
    d0fe:	ef 96       	adiw	r28, 0x3f	; 63
    d100:	ee ad       	ldd	r30, Y+62	; 0x3e
    d102:	ff ad       	ldd	r31, Y+63	; 0x3f
    d104:	ef 97       	sbiw	r28, 0x3f	; 63
    d106:	94 87       	std	Z+12, r25	; 0x0c
    d108:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    d10a:	c1 58       	subi	r28, 0x81	; 129
    d10c:	df 4f       	sbci	r29, 0xFF	; 255
    d10e:	68 81       	ld	r22, Y
    d110:	79 81       	ldd	r23, Y+1	; 0x01
    d112:	cf 57       	subi	r28, 0x7F	; 127
    d114:	d0 40       	sbci	r29, 0x00	; 0
    d116:	ce 01       	movw	r24, r28
    d118:	8f 96       	adiw	r24, 0x2f	; 47
    d11a:	0e 94 e4 58 	call	0xb1c8	; 0xb1c8 <follow_path>
    d11e:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    d120:	89 2b       	or	r24, r25
    d122:	39 f4       	brne	.+14     	; 0xd132 <f_rename+0x92>
    d124:	67 96       	adiw	r28, 0x17	; 23
    d126:	8f ad       	ldd	r24, Y+63	; 0x3f
    d128:	67 97       	sbiw	r28, 0x17	; 23
    d12a:	80 7a       	andi	r24, 0xA0	; 160
    d12c:	49 f0       	breq	.+18     	; 0xd140 <f_rename+0xa0>
    d12e:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    d130:	10 e0       	ldi	r17, 0x00	; 0
    d132:	c6 01       	movw	r24, r12
    d134:	0f d2       	rcall	.+1054   	; 0xd554 <ff_memfree>
    d136:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    d138:	c3 c0       	rjmp	.+390    	; 0xd2c0 <f_rename+0x220>
    d13a:	81 e1       	ldi	r24, 0x11	; 17
    d13c:	90 e0       	ldi	r25, 0x00	; 0
    d13e:	c0 c0       	rjmp	.+384    	; 0xd2c0 <f_rename+0x220>
    d140:	2b 96       	adiw	r28, 0x0b	; 11
    d142:	6e ad       	ldd	r22, Y+62	; 0x3e
    d144:	7f ad       	ldd	r23, Y+63	; 0x3f
    d146:	2b 97       	sbiw	r28, 0x0b	; 11
    d148:	40 e2       	ldi	r20, 0x20	; 32
    d14a:	50 e0       	ldi	r21, 0x00	; 0
    d14c:	ce 01       	movw	r24, r28
    d14e:	83 5a       	subi	r24, 0xA3	; 163
    d150:	9f 4f       	sbci	r25, 0xFF	; 255
    d152:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
    d156:	4e e2       	ldi	r20, 0x2E	; 46
    d158:	50 e0       	ldi	r21, 0x00	; 0
    d15a:	be 01       	movw	r22, r28
    d15c:	61 5d       	subi	r22, 0xD1	; 209
    d15e:	7f 4f       	sbci	r23, 0xFF	; 255
    d160:	ce 01       	movw	r24, r28
    d162:	01 96       	adiw	r24, 0x01	; 1
    d164:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d168:	cf 57       	subi	r28, 0x7F	; 127
    d16a:	df 4f       	sbci	r29, 0xFF	; 255
    d16c:	68 81       	ld	r22, Y
    d16e:	79 81       	ldd	r23, Y+1	; 0x01
    d170:	c1 58       	subi	r28, 0x81	; 129
    d172:	d0 40       	sbci	r29, 0x00	; 0
    d174:	ce 01       	movw	r24, r28
    d176:	01 96       	adiw	r24, 0x01	; 1
    d178:	0e 94 e4 58 	call	0xb1c8	; 0xb1c8 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d17c:	8c 01       	movw	r16, r24
    d17e:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d180:	f9 f4       	brne	.+62     	; 0xd1c0 <f_rename+0x120>
    d182:	4f 81       	ldd	r20, Y+7	; 0x07
    d184:	58 85       	ldd	r21, Y+8	; 0x08
    d186:	69 85       	ldd	r22, Y+9	; 0x09
    d188:	7a 85       	ldd	r23, Y+10	; 0x0a
    d18a:	8d a9       	ldd	r24, Y+53	; 0x35
    d18c:	9e a9       	ldd	r25, Y+54	; 0x36
    d18e:	af a9       	ldd	r26, Y+55	; 0x37
    d190:	b8 ad       	ldd	r27, Y+56	; 0x38
    d192:	48 17       	cp	r20, r24
    d194:	59 07       	cpc	r21, r25
    d196:	6a 07       	cpc	r22, r26
    d198:	7b 07       	cpc	r23, r27
    d19a:	09 f0       	breq	.+2      	; 0xd19e <f_rename+0xfe>
    d19c:	8b c0       	rjmp	.+278    	; 0xd2b4 <f_rename+0x214>
    d19e:	4f 85       	ldd	r20, Y+15	; 0x0f
    d1a0:	58 89       	ldd	r21, Y+16	; 0x10
    d1a2:	69 89       	ldd	r22, Y+17	; 0x11
    d1a4:	7a 89       	ldd	r23, Y+18	; 0x12
    d1a6:	21 96       	adiw	r28, 0x01	; 1
    d1a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    d1aa:	9d ad       	ldd	r25, Y+61	; 0x3d
    d1ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    d1ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    d1b0:	21 97       	sbiw	r28, 0x01	; 1
    d1b2:	48 17       	cp	r20, r24
    d1b4:	59 07       	cpc	r21, r25
    d1b6:	6a 07       	cpc	r22, r26
    d1b8:	7b 07       	cpc	r23, r27
    d1ba:	09 f0       	breq	.+2      	; 0xd1be <f_rename+0x11e>
    d1bc:	7b c0       	rjmp	.+246    	; 0xd2b4 <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d1be:	04 c0       	rjmp	.+8      	; 0xd1c8 <f_rename+0x128>
    d1c0:	04 30       	cpi	r16, 0x04	; 4
    d1c2:	11 05       	cpc	r17, r1
    d1c4:	09 f0       	breq	.+2      	; 0xd1c8 <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    d1c6:	b5 cf       	rjmp	.-150    	; 0xd132 <f_rename+0x92>
    d1c8:	ce 01       	movw	r24, r28
    d1ca:	01 96       	adiw	r24, 0x01	; 1
    d1cc:	0e 94 56 57 	call	0xaeac	; 0xaeac <dir_register>
					if (res == FR_OK) {
    d1d0:	8c 01       	movw	r16, r24
    d1d2:	89 2b       	or	r24, r25
    d1d4:	09 f0       	breq	.+2      	; 0xd1d8 <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d1d6:	ad cf       	rjmp	.-166    	; 0xd132 <f_rename+0x92>
    d1d8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d1da:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d1dc:	6d e5       	ldi	r22, 0x5D	; 93
    d1de:	70 e0       	ldi	r23, 0x00	; 0
    d1e0:	6c 0f       	add	r22, r28
    d1e2:	7d 1f       	adc	r23, r29
    d1e4:	63 5f       	subi	r22, 0xF3	; 243
    d1e6:	7f 4f       	sbci	r23, 0xFF	; 255
    d1e8:	43 e1       	ldi	r20, 0x13	; 19
    d1ea:	50 e0       	ldi	r21, 0x00	; 0
    d1ec:	c8 01       	movw	r24, r16
    d1ee:	0d 96       	adiw	r24, 0x0d	; 13
    d1f0:	0e 94 c3 49 	call	0x9386	; 0x9386 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d1f4:	a9 96       	adiw	r28, 0x29	; 41
    d1f6:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d1f8:	a9 97       	sbiw	r28, 0x29	; 41
    d1fa:	84 ff       	sbrs	r24, 4
    d1fc:	80 62       	ori	r24, 0x20	; 32
    d1fe:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    d200:	83 87       	std	Z+11, r24	; 0x0b
    d202:	ef 96       	adiw	r28, 0x3f	; 63
    d204:	ee ac       	ldd	r14, Y+62	; 0x3e
    d206:	ff ac       	ldd	r15, Y+63	; 0x3f
    d208:	ef 97       	sbiw	r28, 0x3f	; 63
    d20a:	bb 24       	eor	r11, r11
    d20c:	b3 94       	inc	r11
    d20e:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d210:	b3 82       	std	Z+3, r11	; 0x03
    d212:	f8 01       	movw	r30, r16
    d214:	83 85       	ldd	r24, Z+11	; 0x0b
    d216:	84 ff       	sbrs	r24, 4
    d218:	3d c0       	rjmp	.+122    	; 0xd294 <f_rename+0x1f4>
    d21a:	4d a9       	ldd	r20, Y+53	; 0x35
    d21c:	5e a9       	ldd	r21, Y+54	; 0x36
    d21e:	6f a9       	ldd	r22, Y+55	; 0x37
    d220:	78 ad       	ldd	r23, Y+56	; 0x38
    d222:	8f 81       	ldd	r24, Y+7	; 0x07
    d224:	98 85       	ldd	r25, Y+8	; 0x08
    d226:	a9 85       	ldd	r26, Y+9	; 0x09
    d228:	ba 85       	ldd	r27, Y+10	; 0x0a
    d22a:	48 17       	cp	r20, r24
    d22c:	59 07       	cpc	r21, r25
    d22e:	6a 07       	cpc	r22, r26
    d230:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    d232:	81 f1       	breq	.+96     	; 0xd294 <f_rename+0x1f4>
    d234:	b8 01       	movw	r22, r16
    d236:	f7 01       	movw	r30, r14
    d238:	80 81       	ld	r24, Z
    d23a:	0e 94 8b 4b 	call	0x9716	; 0x9716 <ld_clust.isra.4>
    d23e:	ab 01       	movw	r20, r22
    d240:	bc 01       	movw	r22, r24
    d242:	c7 01       	movw	r24, r14
    d244:	0e 94 f8 48 	call	0x91f0	; 0x91f0 <clst2sect>
    d248:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d24a:	bc 01       	movw	r22, r24
    d24c:	41 15       	cp	r20, r1
    d24e:	51 05       	cpc	r21, r1
    d250:	61 05       	cpc	r22, r1
    d252:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d254:	91 f1       	breq	.+100    	; 0xd2ba <f_rename+0x21a>
    d256:	c7 01       	movw	r24, r14
    d258:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d25c:	8c 01       	movw	r16, r24
    d25e:	89 2b       	or	r24, r25
    d260:	09 f0       	breq	.+2      	; 0xd264 <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d262:	67 cf       	rjmp	.-306    	; 0xd132 <f_rename+0x92>
    d264:	ef 96       	adiw	r28, 0x3f	; 63
    d266:	8e ad       	ldd	r24, Y+62	; 0x3e
    d268:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d26a:	ef 97       	sbiw	r28, 0x3f	; 63
    d26c:	fc 01       	movw	r30, r24
    d26e:	ea 5a       	subi	r30, 0xAA	; 170
    d270:	ff 4f       	sbci	r31, 0xFF	; 255
    d272:	20 81       	ld	r18, Z
    d274:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d276:	71 f4       	brne	.+28     	; 0xd294 <f_rename+0x1f4>
    d278:	2f 81       	ldd	r18, Y+7	; 0x07
    d27a:	38 85       	ldd	r19, Y+8	; 0x08
    d27c:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d27e:	5a 85       	ldd	r21, Y+10	; 0x0a
    d280:	bc 01       	movw	r22, r24
    d282:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d284:	7f 4f       	sbci	r23, 0xFF	; 255
    d286:	0e 94 a0 4b 	call	0x9740	; 0x9740 <st_clust.isra.5>
									fs->wflag = 1;
    d28a:	ef 96       	adiw	r28, 0x3f	; 63
    d28c:	ee ad       	ldd	r30, Y+62	; 0x3e
    d28e:	ff ad       	ldd	r31, Y+63	; 0x3f
    d290:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d292:	b3 82       	std	Z+3, r11	; 0x03
    d294:	ce 01       	movw	r24, r28
    d296:	8f 96       	adiw	r24, 0x2f	; 47
    d298:	0e 94 00 56 	call	0xac00	; 0xac00 <dir_remove>
				if (res == FR_OK) {
    d29c:	8c 01       	movw	r16, r24
    d29e:	89 2b       	or	r24, r25
    d2a0:	09 f0       	breq	.+2      	; 0xd2a4 <f_rename+0x204>
					res = sync_fs(fs);
    d2a2:	47 cf       	rjmp	.-370    	; 0xd132 <f_rename+0x92>
    d2a4:	ef 96       	adiw	r28, 0x3f	; 63
    d2a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    d2a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    d2aa:	ef 97       	sbiw	r28, 0x3f	; 63
    d2ac:	0e 94 00 4c 	call	0x9800	; 0x9800 <sync_fs>
    d2b0:	8c 01       	movw	r16, r24
    d2b2:	3f cf       	rjmp	.-386    	; 0xd132 <f_rename+0x92>
    d2b4:	08 e0       	ldi	r16, 0x08	; 8
    d2b6:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d2b8:	3c cf       	rjmp	.-392    	; 0xd132 <f_rename+0x92>
    d2ba:	02 e0       	ldi	r16, 0x02	; 2
    d2bc:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d2be:	39 cf       	rjmp	.-398    	; 0xd132 <f_rename+0x92>
    d2c0:	ce 57       	subi	r28, 0x7E	; 126
    d2c2:	df 4f       	sbci	r29, 0xFF	; 255
    d2c4:	e9 e0       	ldi	r30, 0x09	; 9
    d2c6:	0c 94 0e e4 	jmp	0x1c81c	; 0x1c81c <__epilogue_restores__+0x12>

0000d2ca <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d2ca:	a2 e3       	ldi	r26, 0x32	; 50
    d2cc:	b0 e0       	ldi	r27, 0x00	; 0
    d2ce:	eb e6       	ldi	r30, 0x6B	; 107
    d2d0:	f9 e6       	ldi	r31, 0x69	; 105
    d2d2:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    d2d6:	9a ab       	std	Y+50, r25	; 0x32
    d2d8:	89 ab       	std	Y+49, r24	; 0x31
    d2da:	e6 2e       	mov	r14, r22
    d2dc:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d2de:	42 e0       	ldi	r20, 0x02	; 2
    d2e0:	be 01       	movw	r22, r28
    d2e2:	61 5d       	subi	r22, 0xD1	; 209
    d2e4:	7f 4f       	sbci	r23, 0xFF	; 255
    d2e6:	ce 01       	movw	r24, r28
    d2e8:	c1 96       	adiw	r24, 0x31	; 49
    d2ea:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
	if (res == FR_OK) {
    d2ee:	00 97       	sbiw	r24, 0x00	; 0
    d2f0:	a9 f5       	brne	.+106    	; 0xd35c <f_chmod+0x92>
		dj.obj.fs = fs;
    d2f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    d2f4:	98 a9       	ldd	r25, Y+48	; 0x30
    d2f6:	9a 83       	std	Y+2, r25	; 0x02
    d2f8:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d2fa:	80 e0       	ldi	r24, 0x00	; 0
    d2fc:	92 e0       	ldi	r25, 0x02	; 2
    d2fe:	27 d1       	rcall	.+590    	; 0xd54e <ff_memalloc>
    d300:	6c 01       	movw	r12, r24
    d302:	00 97       	sbiw	r24, 0x00	; 0
    d304:	b1 f0       	breq	.+44     	; 0xd332 <f_chmod+0x68>
    d306:	ef a5       	ldd	r30, Y+47	; 0x2f
    d308:	f8 a9       	ldd	r31, Y+48	; 0x30
    d30a:	94 87       	std	Z+12, r25	; 0x0c
    d30c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d30e:	69 a9       	ldd	r22, Y+49	; 0x31
    d310:	7a a9       	ldd	r23, Y+50	; 0x32
    d312:	ce 01       	movw	r24, r28
    d314:	01 96       	adiw	r24, 0x01	; 1
    d316:	0e 94 e4 58 	call	0xb1c8	; 0xb1c8 <follow_path>
    d31a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d31c:	89 2b       	or	r24, r25
    d31e:	29 f4       	brne	.+10     	; 0xd32a <f_chmod+0x60>
    d320:	88 a5       	ldd	r24, Y+40	; 0x28
    d322:	80 7a       	andi	r24, 0xA0	; 160
    d324:	49 f0       	breq	.+18     	; 0xd338 <f_chmod+0x6e>
    d326:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d328:	10 e0       	ldi	r17, 0x00	; 0
    d32a:	c6 01       	movw	r24, r12
    d32c:	13 d1       	rcall	.+550    	; 0xd554 <ff_memfree>
    d32e:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d330:	15 c0       	rjmp	.+42     	; 0xd35c <f_chmod+0x92>
    d332:	81 e1       	ldi	r24, 0x11	; 17
    d334:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d336:	12 c0       	rjmp	.+36     	; 0xd35c <f_chmod+0x92>
    d338:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d33a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d33c:	83 85       	ldd	r24, Z+11	; 0x0b
    d33e:	6e 2d       	mov	r22, r14
    d340:	68 27       	eor	r22, r24
    d342:	6f 21       	and	r22, r15
    d344:	67 72       	andi	r22, 0x27	; 39
    d346:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d348:	63 87       	std	Z+11, r22	; 0x0b
    d34a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d34c:	98 a9       	ldd	r25, Y+48	; 0x30
    d34e:	21 e0       	ldi	r18, 0x01	; 1
    d350:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d352:	23 83       	std	Z+3, r18	; 0x03
    d354:	0e 94 00 4c 	call	0x9800	; 0x9800 <sync_fs>
    d358:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d35a:	e7 cf       	rjmp	.-50     	; 0xd32a <f_chmod+0x60>
    d35c:	e2 96       	adiw	r28, 0x32	; 50
    d35e:	e8 e0       	ldi	r30, 0x08	; 8
    d360:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000d364 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d364:	a2 e3       	ldi	r26, 0x32	; 50
    d366:	b0 e0       	ldi	r27, 0x00	; 0
    d368:	e8 eb       	ldi	r30, 0xB8	; 184
    d36a:	f9 e6       	ldi	r31, 0x69	; 105
    d36c:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    d370:	9a ab       	std	Y+50, r25	; 0x32
    d372:	89 ab       	std	Y+49, r24	; 0x31
    d374:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d376:	42 e0       	ldi	r20, 0x02	; 2
    d378:	be 01       	movw	r22, r28
    d37a:	61 5d       	subi	r22, 0xD1	; 209
    d37c:	7f 4f       	sbci	r23, 0xFF	; 255
    d37e:	ce 01       	movw	r24, r28
    d380:	c1 96       	adiw	r24, 0x31	; 49
    d382:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
	if (res == FR_OK) {
    d386:	00 97       	sbiw	r24, 0x00	; 0
    d388:	09 f0       	breq	.+2      	; 0xd38c <f_utime+0x28>
    d38a:	41 c0       	rjmp	.+130    	; 0xd40e <f_utime+0xaa>
		dj.obj.fs = fs;
    d38c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d38e:	98 a9       	ldd	r25, Y+48	; 0x30
    d390:	9a 83       	std	Y+2, r25	; 0x02
    d392:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d394:	80 e0       	ldi	r24, 0x00	; 0
    d396:	92 e0       	ldi	r25, 0x02	; 2
    d398:	da d0       	rcall	.+436    	; 0xd54e <ff_memalloc>
    d39a:	7c 01       	movw	r14, r24
    d39c:	00 97       	sbiw	r24, 0x00	; 0
    d39e:	b1 f0       	breq	.+44     	; 0xd3cc <f_utime+0x68>
    d3a0:	ef a5       	ldd	r30, Y+47	; 0x2f
    d3a2:	f8 a9       	ldd	r31, Y+48	; 0x30
    d3a4:	94 87       	std	Z+12, r25	; 0x0c
    d3a6:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d3a8:	69 a9       	ldd	r22, Y+49	; 0x31
    d3aa:	7a a9       	ldd	r23, Y+50	; 0x32
    d3ac:	ce 01       	movw	r24, r28
    d3ae:	01 96       	adiw	r24, 0x01	; 1
    d3b0:	0e 94 e4 58 	call	0xb1c8	; 0xb1c8 <follow_path>
    d3b4:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d3b6:	89 2b       	or	r24, r25
    d3b8:	29 f4       	brne	.+10     	; 0xd3c4 <f_utime+0x60>
    d3ba:	88 a5       	ldd	r24, Y+40	; 0x28
    d3bc:	80 7a       	andi	r24, 0xA0	; 160
    d3be:	49 f0       	breq	.+18     	; 0xd3d2 <f_utime+0x6e>
    d3c0:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d3c2:	10 e0       	ldi	r17, 0x00	; 0
    d3c4:	c7 01       	movw	r24, r14
    d3c6:	c6 d0       	rcall	.+396    	; 0xd554 <ff_memfree>
    d3c8:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d3ca:	21 c0       	rjmp	.+66     	; 0xd40e <f_utime+0xaa>
    d3cc:	81 e1       	ldi	r24, 0x11	; 17
    d3ce:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d3d0:	1e c0       	rjmp	.+60     	; 0xd40e <f_utime+0xaa>
    d3d2:	f6 01       	movw	r30, r12
    d3d4:	44 81       	ldd	r20, Z+4	; 0x04
    d3d6:	55 81       	ldd	r21, Z+5	; 0x05
    d3d8:	60 e0       	ldi	r22, 0x00	; 0
    d3da:	70 e0       	ldi	r23, 0x00	; 0
    d3dc:	ba 01       	movw	r22, r20
    d3de:	55 27       	eor	r21, r21
    d3e0:	44 27       	eor	r20, r20
    d3e2:	86 81       	ldd	r24, Z+6	; 0x06
    d3e4:	97 81       	ldd	r25, Z+7	; 0x07
    d3e6:	a0 e0       	ldi	r26, 0x00	; 0
    d3e8:	b0 e0       	ldi	r27, 0x00	; 0
    d3ea:	48 2b       	or	r20, r24
    d3ec:	59 2b       	or	r21, r25
    d3ee:	6a 2b       	or	r22, r26
    d3f0:	7b 2b       	or	r23, r27
    d3f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d3f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d3f6:	46 96       	adiw	r24, 0x16	; 22
    d3f8:	0e 94 54 48 	call	0x90a8	; 0x90a8 <st_dword>
				fs->wflag = 1;
    d3fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    d3fe:	98 a9       	ldd	r25, Y+48	; 0x30
    d400:	21 e0       	ldi	r18, 0x01	; 1
    d402:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d404:	23 83       	std	Z+3, r18	; 0x03
    d406:	0e 94 00 4c 	call	0x9800	; 0x9800 <sync_fs>
    d40a:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d40c:	db cf       	rjmp	.-74     	; 0xd3c4 <f_utime+0x60>
    d40e:	e2 96       	adiw	r28, 0x32	; 50
    d410:	e8 e0       	ldi	r30, 0x08	; 8
    d412:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000d416 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d416:	a2 e3       	ldi	r26, 0x32	; 50
    d418:	b0 e0       	ldi	r27, 0x00	; 0
    d41a:	e1 e1       	ldi	r30, 0x11	; 17
    d41c:	fa e6       	ldi	r31, 0x6A	; 106
    d41e:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
    d422:	9a ab       	std	Y+50, r25	; 0x32
    d424:	89 ab       	std	Y+49, r24	; 0x31
    d426:	6b 01       	movw	r12, r22
    d428:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d42a:	40 e0       	ldi	r20, 0x00	; 0
    d42c:	be 01       	movw	r22, r28
    d42e:	61 5d       	subi	r22, 0xD1	; 209
    d430:	7f 4f       	sbci	r23, 0xFF	; 255
    d432:	ce 01       	movw	r24, r28
    d434:	c1 96       	adiw	r24, 0x31	; 49
    d436:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <mount_volume>
    d43a:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d43c:	89 2b       	or	r24, r25
    d43e:	09 f0       	breq	.+2      	; 0xd442 <f_getlabel+0x2c>
    d440:	81 c0       	rjmp	.+258    	; 0xd544 <f_getlabel+0x12e>
    d442:	c1 14       	cp	r12, r1
    d444:	d1 04       	cpc	r13, r1
    d446:	09 f4       	brne	.+2      	; 0xd44a <f_getlabel+0x34>
    d448:	53 c0       	rjmp	.+166    	; 0xd4f0 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d44a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d44c:	98 a9       	ldd	r25, Y+48	; 0x30
    d44e:	9a 83       	std	Y+2, r25	; 0x02
    d450:	89 83       	std	Y+1, r24	; 0x01
    d452:	1f 82       	std	Y+7, r1	; 0x07
    d454:	18 86       	std	Y+8, r1	; 0x08
    d456:	19 86       	std	Y+9, r1	; 0x09
    d458:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d45a:	40 e0       	ldi	r20, 0x00	; 0
    d45c:	50 e0       	ldi	r21, 0x00	; 0
    d45e:	ba 01       	movw	r22, r20
    d460:	ce 01       	movw	r24, r28
    d462:	01 96       	adiw	r24, 0x01	; 1
    d464:	0e 94 9e 51 	call	0xa33c	; 0xa33c <dir_sdi>
		if (res == FR_OK) {
    d468:	00 97       	sbiw	r24, 0x00	; 0
    d46a:	e9 f5       	brne	.+122    	; 0xd4e6 <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d46c:	61 e0       	ldi	r22, 0x01	; 1
    d46e:	70 e0       	ldi	r23, 0x00	; 0
    d470:	ce 01       	movw	r24, r28
    d472:	01 96       	adiw	r24, 0x01	; 1
    d474:	0e 94 37 55 	call	0xaa6e	; 0xaa6e <dir_read>
		 	if (res == FR_OK) {
    d478:	00 97       	sbiw	r24, 0x00	; 0
    d47a:	a9 f5       	brne	.+106    	; 0xd4e6 <f_getlabel+0xd0>
    d47c:	00 e0       	ldi	r16, 0x00	; 0
    d47e:	10 e0       	ldi	r17, 0x00	; 0
    d480:	80 e0       	ldi	r24, 0x00	; 0
    d482:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d484:	4c 01       	movw	r8, r24
    d486:	2f ef       	ldi	r18, 0xFF	; 255
    d488:	82 1a       	sub	r8, r18
    d48a:	92 0a       	sbc	r9, r18
    d48c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d48e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d490:	f9 01       	movw	r30, r18
    d492:	e8 0f       	add	r30, r24
    d494:	f9 1f       	adc	r31, r25
    d496:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d498:	65 eb       	ldi	r22, 0xB5	; 181
    d49a:	71 e0       	ldi	r23, 0x01	; 1
    d49c:	90 e0       	ldi	r25, 0x00	; 0
    d49e:	90 d0       	rcall	.+288    	; 0xd5c0 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d4a0:	00 97       	sbiw	r24, 0x00	; 0
    d4a2:	19 f4       	brne	.+6      	; 0xd4aa <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d4a4:	00 e0       	ldi	r16, 0x00	; 0
    d4a6:	10 e0       	ldi	r17, 0x00	; 0
    d4a8:	13 c0       	rjmp	.+38     	; 0xd4d0 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d4aa:	bc 01       	movw	r22, r24
    d4ac:	80 e0       	ldi	r24, 0x00	; 0
    d4ae:	90 e0       	ldi	r25, 0x00	; 0
    d4b0:	24 e0       	ldi	r18, 0x04	; 4
    d4b2:	30 e0       	ldi	r19, 0x00	; 0
    d4b4:	a6 01       	movw	r20, r12
    d4b6:	40 0f       	add	r20, r16
    d4b8:	51 1f       	adc	r21, r17
    d4ba:	0e 94 ce 49 	call	0x939c	; 0x939c <put_utf>
    d4be:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d4c0:	00 97       	sbiw	r24, 0x00	; 0
    d4c2:	81 f3       	breq	.-32     	; 0xd4a4 <f_getlabel+0x8e>
						di += wc;
    d4c4:	08 0f       	add	r16, r24
    d4c6:	19 1f       	adc	r17, r25
    d4c8:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d4ca:	8b 30       	cpi	r24, 0x0B	; 11
    d4cc:	91 05       	cpc	r25, r1
    d4ce:	d1 f6       	brne	.-76     	; 0xd484 <f_getlabel+0x6e>
    d4d0:	f6 01       	movw	r30, r12
    d4d2:	e0 0f       	add	r30, r16
    d4d4:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d4d6:	10 82       	st	Z, r1
						if (di == 0) break;
    d4d8:	ce 16       	cp	r12, r30
    d4da:	df 06       	cpc	r13, r31
    d4dc:	49 f0       	breq	.+18     	; 0xd4f0 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d4de:	82 91       	ld	r24, -Z
    d4e0:	80 32       	cpi	r24, 0x20	; 32
    d4e2:	c9 f3       	breq	.-14     	; 0xd4d6 <f_getlabel+0xc0>
    d4e4:	05 c0       	rjmp	.+10     	; 0xd4f0 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d4e6:	84 30       	cpi	r24, 0x04	; 4
    d4e8:	91 05       	cpc	r25, r1
    d4ea:	59 f5       	brne	.+86     	; 0xd542 <f_getlabel+0x12c>
			label[0] = 0;
    d4ec:	f6 01       	movw	r30, r12
    d4ee:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d4f0:	a1 14       	cp	r10, r1
    d4f2:	b1 04       	cpc	r11, r1
    d4f4:	39 f1       	breq	.+78     	; 0xd544 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d4f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    d4f8:	98 a9       	ldd	r25, Y+48	; 0x30
    d4fa:	fc 01       	movw	r30, r24
    d4fc:	41 a1       	ldd	r20, Z+33	; 0x21
    d4fe:	52 a1       	ldd	r21, Z+34	; 0x22
    d500:	63 a1       	ldd	r22, Z+35	; 0x23
    d502:	74 a1       	ldd	r23, Z+36	; 0x24
    d504:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <move_window>
    d508:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d50a:	89 2b       	or	r24, r25
    d50c:	d9 f4       	brne	.+54     	; 0xd544 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d50e:	ef a5       	ldd	r30, Y+47	; 0x2f
    d510:	f8 a9       	ldd	r31, Y+48	; 0x30
    d512:	80 81       	ld	r24, Z
    d514:	83 30       	cpi	r24, 0x03	; 3
    d516:	29 f0       	breq	.+10     	; 0xd522 <f_getlabel+0x10c>
    d518:	84 30       	cpi	r24, 0x04	; 4
    d51a:	31 f0       	breq	.+12     	; 0xd528 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d51c:	87 e2       	ldi	r24, 0x27	; 39
    d51e:	90 e0       	ldi	r25, 0x00	; 0
    d520:	05 c0       	rjmp	.+10     	; 0xd52c <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d522:	83 e4       	ldi	r24, 0x43	; 67
    d524:	90 e0       	ldi	r25, 0x00	; 0
    d526:	02 c0       	rjmp	.+4      	; 0xd52c <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d528:	84 e6       	ldi	r24, 0x64	; 100
    d52a:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d52c:	f5 96       	adiw	r30, 0x35	; 53
    d52e:	8e 0f       	add	r24, r30
    d530:	9f 1f       	adc	r25, r31
    d532:	0e 94 3f 48 	call	0x907e	; 0x907e <ld_dword>
    d536:	f5 01       	movw	r30, r10
    d538:	60 83       	st	Z, r22
    d53a:	71 83       	std	Z+1, r23	; 0x01
    d53c:	82 83       	std	Z+2, r24	; 0x02
    d53e:	93 83       	std	Z+3, r25	; 0x03
    d540:	01 c0       	rjmp	.+2      	; 0xd544 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d542:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d544:	c7 01       	movw	r24, r14
    d546:	e2 96       	adiw	r28, 0x32	; 50
    d548:	ec e0       	ldi	r30, 0x0C	; 12
    d54a:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

0000d54e <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d54e:	0c 94 2d 29 	jmp	0x525a	; 0x525a <safemalloc>
}
    d552:	08 95       	ret

0000d554 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d554:	0c 94 4f 29 	jmp	0x529e	; 0x529e <safefree>
    d558:	08 95       	ret

0000d55a <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d55a:	cf 92       	push	r12
    d55c:	df 92       	push	r13
    d55e:	ef 92       	push	r14
    d560:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d562:	60 38       	cpi	r22, 0x80	; 128
    d564:	71 05       	cpc	r23, r1
    d566:	81 05       	cpc	r24, r1
    d568:	91 05       	cpc	r25, r1
    d56a:	10 f4       	brcc	.+4      	; 0xd570 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d56c:	cb 01       	movw	r24, r22
    d56e:	23 c0       	rjmp	.+70     	; 0xd5b6 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d570:	61 15       	cp	r22, r1
    d572:	71 05       	cpc	r23, r1
    d574:	21 e0       	ldi	r18, 0x01	; 1
    d576:	82 07       	cpc	r24, r18
    d578:	91 05       	cpc	r25, r1
    d57a:	d8 f4       	brcc	.+54     	; 0xd5b2 <ff_uni2oem+0x58>
    d57c:	45 3b       	cpi	r20, 0xB5	; 181
    d57e:	51 40       	sbci	r21, 0x01	; 1
    d580:	c1 f4       	brne	.+48     	; 0xd5b2 <ff_uni2oem+0x58>
    d582:	e1 ea       	ldi	r30, 0xA1	; 161
    d584:	f7 e0       	ldi	r31, 0x07	; 7
    d586:	20 e0       	ldi	r18, 0x00	; 0
    d588:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d58a:	c1 90       	ld	r12, Z+
    d58c:	d1 90       	ld	r13, Z+
    d58e:	e1 2c       	mov	r14, r1
    d590:	f1 2c       	mov	r15, r1
    d592:	6c 15       	cp	r22, r12
    d594:	7d 05       	cpc	r23, r13
    d596:	8e 05       	cpc	r24, r14
    d598:	9f 05       	cpc	r25, r15
    d59a:	29 f0       	breq	.+10     	; 0xd5a6 <ff_uni2oem+0x4c>
    d59c:	2f 5f       	subi	r18, 0xFF	; 255
    d59e:	3f 4f       	sbci	r19, 0xFF	; 255
    d5a0:	20 38       	cpi	r18, 0x80	; 128
    d5a2:	31 05       	cpc	r19, r1
    d5a4:	91 f7       	brne	.-28     	; 0xd58a <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d5a6:	b9 01       	movw	r22, r18
    d5a8:	60 58       	subi	r22, 0x80	; 128
    d5aa:	7f 4f       	sbci	r23, 0xFF	; 255
    d5ac:	cb 01       	movw	r24, r22
    d5ae:	99 27       	eor	r25, r25
    d5b0:	02 c0       	rjmp	.+4      	; 0xd5b6 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d5b2:	80 e0       	ldi	r24, 0x00	; 0
    d5b4:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d5b6:	ff 90       	pop	r15
    d5b8:	ef 90       	pop	r14
    d5ba:	df 90       	pop	r13
    d5bc:	cf 90       	pop	r12
    d5be:	08 95       	ret

0000d5c0 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d5c0:	80 38       	cpi	r24, 0x80	; 128
    d5c2:	91 05       	cpc	r25, r1
    d5c4:	88 f0       	brcs	.+34     	; 0xd5e8 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d5c6:	65 3b       	cpi	r22, 0xB5	; 181
    d5c8:	71 40       	sbci	r23, 0x01	; 1
    d5ca:	61 f4       	brne	.+24     	; 0xd5e4 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d5cc:	8f 3f       	cpi	r24, 0xFF	; 255
    d5ce:	91 05       	cpc	r25, r1
    d5d0:	09 f0       	breq	.+2      	; 0xd5d4 <ff_oem2uni+0x14>
    d5d2:	40 f4       	brcc	.+16     	; 0xd5e4 <ff_oem2uni+0x24>
    d5d4:	88 0f       	add	r24, r24
    d5d6:	99 1f       	adc	r25, r25
    d5d8:	fc 01       	movw	r30, r24
    d5da:	ef 55       	subi	r30, 0x5F	; 95
    d5dc:	f9 4f       	sbci	r31, 0xF9	; 249
    d5de:	80 81       	ld	r24, Z
    d5e0:	91 81       	ldd	r25, Z+1	; 0x01
    d5e2:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d5e4:	80 e0       	ldi	r24, 0x00	; 0
    d5e6:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d5e8:	08 95       	ret

0000d5ea <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d5ea:	61 15       	cp	r22, r1
    d5ec:	71 05       	cpc	r23, r1
    d5ee:	21 e0       	ldi	r18, 0x01	; 1
    d5f0:	82 07       	cpc	r24, r18
    d5f2:	91 05       	cpc	r25, r1
    d5f4:	08 f0       	brcs	.+2      	; 0xd5f8 <ff_wtoupper+0xe>
    d5f6:	5a c0       	rjmp	.+180    	; 0xd6ac <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d5f8:	61 15       	cp	r22, r1
    d5fa:	80 e1       	ldi	r24, 0x10	; 16
    d5fc:	78 07       	cpc	r23, r24
    d5fe:	18 f0       	brcs	.+6      	; 0xd606 <ff_wtoupper+0x1c>
    d600:	a3 ef       	ldi	r26, 0xF3	; 243
    d602:	b4 e0       	ldi	r27, 0x04	; 4
    d604:	02 c0       	rjmp	.+4      	; 0xd60a <ff_wtoupper+0x20>
    d606:	af ea       	ldi	r26, 0xAF	; 175
    d608:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d60a:	2d 91       	ld	r18, X+
    d60c:	3c 91       	ld	r19, X
    d60e:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d610:	21 15       	cp	r18, r1
    d612:	31 05       	cpc	r19, r1
    d614:	09 f4       	brne	.+2      	; 0xd618 <ff_wtoupper+0x2e>
    d616:	48 c0       	rjmp	.+144    	; 0xd6a8 <ff_wtoupper+0xbe>
    d618:	62 17       	cp	r22, r18
    d61a:	73 07       	cpc	r23, r19
    d61c:	08 f4       	brcc	.+2      	; 0xd620 <ff_wtoupper+0x36>
    d61e:	44 c0       	rjmp	.+136    	; 0xd6a8 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d620:	14 96       	adiw	r26, 0x04	; 4
    d622:	fd 01       	movw	r30, r26
    d624:	32 97       	sbiw	r30, 0x02	; 2
    d626:	80 81       	ld	r24, Z
    d628:	91 81       	ldd	r25, Z+1	; 0x01
    d62a:	e9 2f       	mov	r30, r25
    d62c:	ff 27       	eor	r31, r31
    d62e:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d630:	a9 01       	movw	r20, r18
    d632:	48 0f       	add	r20, r24
    d634:	59 1f       	adc	r21, r25
    d636:	64 17       	cp	r22, r20
    d638:	75 07       	cpc	r23, r21
    d63a:	70 f5       	brcc	.+92     	; 0xd698 <ff_wtoupper+0xae>
				switch (cmd) {
    d63c:	e9 30       	cpi	r30, 0x09	; 9
    d63e:	f1 05       	cpc	r31, r1
    d640:	98 f5       	brcc	.+102    	; 0xd6a8 <ff_wtoupper+0xbe>
    d642:	ec 54       	subi	r30, 0x4C	; 76
    d644:	ff 4f       	sbci	r31, 0xFF	; 255
    d646:	0c 94 ba e3 	jmp	0x1c774	; 0x1c774 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d64a:	62 1b       	sub	r22, r18
    d64c:	73 0b       	sbc	r23, r19
    d64e:	fb 01       	movw	r30, r22
    d650:	ee 0f       	add	r30, r30
    d652:	ff 1f       	adc	r31, r31
    d654:	ea 0f       	add	r30, r26
    d656:	fb 1f       	adc	r31, r27
    d658:	60 81       	ld	r22, Z
    d65a:	71 81       	ldd	r23, Z+1	; 0x01
    d65c:	25 c0       	rjmp	.+74     	; 0xd6a8 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d65e:	cb 01       	movw	r24, r22
    d660:	82 1b       	sub	r24, r18
    d662:	93 0b       	sbc	r25, r19
    d664:	81 70       	andi	r24, 0x01	; 1
    d666:	99 27       	eor	r25, r25
    d668:	68 1b       	sub	r22, r24
    d66a:	79 0b       	sbc	r23, r25
    d66c:	1d c0       	rjmp	.+58     	; 0xd6a8 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d66e:	60 51       	subi	r22, 0x10	; 16
    d670:	71 09       	sbc	r23, r1
    d672:	1a c0       	rjmp	.+52     	; 0xd6a8 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d674:	60 52       	subi	r22, 0x20	; 32
    d676:	71 09       	sbc	r23, r1
    d678:	17 c0       	rjmp	.+46     	; 0xd6a8 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d67a:	60 53       	subi	r22, 0x30	; 48
    d67c:	71 09       	sbc	r23, r1
    d67e:	14 c0       	rjmp	.+40     	; 0xd6a8 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d680:	6a 51       	subi	r22, 0x1A	; 26
    d682:	71 09       	sbc	r23, r1
    d684:	11 c0       	rjmp	.+34     	; 0xd6a8 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d686:	68 5f       	subi	r22, 0xF8	; 248
    d688:	7f 4f       	sbci	r23, 0xFF	; 255
    d68a:	0e c0       	rjmp	.+28     	; 0xd6a8 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d68c:	60 55       	subi	r22, 0x50	; 80
    d68e:	71 09       	sbc	r23, r1
    d690:	0b c0       	rjmp	.+22     	; 0xd6a8 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d692:	60 56       	subi	r22, 0x60	; 96
    d694:	7c 41       	sbci	r23, 0x1C	; 28
    d696:	08 c0       	rjmp	.+16     	; 0xd6a8 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d698:	ef 2b       	or	r30, r31
    d69a:	09 f0       	breq	.+2      	; 0xd69e <ff_wtoupper+0xb4>
    d69c:	b6 cf       	rjmp	.-148    	; 0xd60a <ff_wtoupper+0x20>
    d69e:	88 0f       	add	r24, r24
    d6a0:	99 1f       	adc	r25, r25
    d6a2:	a8 0f       	add	r26, r24
    d6a4:	b9 1f       	adc	r27, r25
    d6a6:	b1 cf       	rjmp	.-158    	; 0xd60a <ff_wtoupper+0x20>
		}
		uni = uc;
    d6a8:	80 e0       	ldi	r24, 0x00	; 0
    d6aa:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d6ac:	08 95       	ret

0000d6ae <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d6ae:	81 11       	cpse	r24, r1
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d6b0:	02 c0       	rjmp	.+4      	; 0xd6b6 <disk_status+0x8>
    d6b2:	a1 c1       	rjmp	.+834    	; 0xd9f6 <mmc_disk_status>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d6b4:	08 95       	ret
}
    d6b6:	81 e0       	ldi	r24, 0x01	; 1
    d6b8:	08 95       	ret

0000d6ba <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d6ba:	81 11       	cpse	r24, r1
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d6bc:	02 c0       	rjmp	.+4      	; 0xd6c2 <disk_initialize+0x8>
    d6be:	f6 c0       	rjmp	.+492    	; 0xd8ac <mmc_disk_initialize>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d6c0:	08 95       	ret
}
    d6c2:	81 e0       	ldi	r24, 0x01	; 1
    d6c4:	08 95       	ret

0000d6c6 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d6c6:	0f 93       	push	r16
    d6c8:	1f 93       	push	r17
    d6ca:	fb 01       	movw	r30, r22
    switch (pdrv)
    d6cc:	81 11       	cpse	r24, r1
    d6ce:	06 c0       	rjmp	.+12     	; 0xd6dc <disk_read+0x16>
    d6d0:	ba 01       	movw	r22, r20
    d6d2:	a9 01       	movw	r20, r18
    d6d4:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d6d6:	98 01       	movw	r18, r16
    d6d8:	91 d1       	rcall	.+802    	; 0xd9fc <mmc_disk_read>
    d6da:	02 c0       	rjmp	.+4      	; 0xd6e0 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d6dc:	84 e0       	ldi	r24, 0x04	; 4
    d6de:	90 e0       	ldi	r25, 0x00	; 0
}
    d6e0:	1f 91       	pop	r17
    d6e2:	0f 91       	pop	r16
    d6e4:	08 95       	ret

0000d6e6 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d6e6:	0f 93       	push	r16
    d6e8:	1f 93       	push	r17
    d6ea:	fb 01       	movw	r30, r22
    switch (pdrv)
    d6ec:	81 11       	cpse	r24, r1
    d6ee:	06 c0       	rjmp	.+12     	; 0xd6fc <disk_write+0x16>
    d6f0:	ba 01       	movw	r22, r20
    d6f2:	a9 01       	movw	r20, r18
    d6f4:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d6f6:	98 01       	movw	r18, r16
    d6f8:	e2 d1       	rcall	.+964    	; 0xdabe <mmc_disk_write>
    d6fa:	02 c0       	rjmp	.+4      	; 0xd700 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d6fc:	84 e0       	ldi	r24, 0x04	; 4
    d6fe:	90 e0       	ldi	r25, 0x00	; 0
}
    d700:	1f 91       	pop	r17
    d702:	0f 91       	pop	r16
    d704:	08 95       	ret

0000d706 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d706:	96 2f       	mov	r25, r22
    switch (pdrv)
    d708:	81 11       	cpse	r24, r1
    d70a:	04 c0       	rjmp	.+8      	; 0xd714 <disk_ioctl+0xe>
    d70c:	ba 01       	movw	r22, r20
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d70e:	89 2f       	mov	r24, r25
    d710:	4a c2       	rjmp	.+1172   	; 0xdba6 <mmc_disk_ioctl>
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d712:	08 95       	ret
    d714:	84 e0       	ldi	r24, 0x04	; 4
}
    d716:	90 e0       	ldi	r25, 0x00	; 0
    d718:	08 95       	ret

0000d71a <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    d71a:	f9 c4       	rjmp	.+2546   	; 0xe10e <mmc_spi_TXRX>
    d71c:	08 95       	ret

0000d71e <deselect>:
    d71e:	ce d4       	rcall	.+2460   	; 0xe0bc <mmc_spi_end>
    d720:	8f ef       	ldi	r24, 0xFF	; 255
    d722:	fb df       	rcall	.-10     	; 0xd71a <xchg_spi>
    d724:	8f ef       	ldi	r24, 0xFF	; 255
    d726:	f9 cf       	rjmp	.-14     	; 0xd71a <xchg_spi>
    d728:	08 95       	ret

0000d72a <rcvr_datablock>:
    d72a:	0f 93       	push	r16
    d72c:	1f 93       	push	r17
    d72e:	cf 93       	push	r28
    d730:	df 93       	push	r29
    d732:	ec 01       	movw	r28, r24
    d734:	8b 01       	movw	r16, r22
    d736:	88 ee       	ldi	r24, 0xE8	; 232
    d738:	93 e0       	ldi	r25, 0x03	; 3
    d73a:	ec d4       	rcall	.+2520   	; 0xe114 <mmc_set_ms_timeout>
    d73c:	8f ef       	ldi	r24, 0xFF	; 255
    d73e:	e7 d4       	rcall	.+2510   	; 0xe10e <mmc_spi_TXRX>
    d740:	8f 3f       	cpi	r24, 0xFF	; 255
    d742:	31 f4       	brne	.+12     	; 0xd750 <rcvr_datablock+0x26>
    d744:	ee d4       	rcall	.+2524   	; 0xe122 <mmc_test_timeout>
    d746:	89 2b       	or	r24, r25
    d748:	c9 f3       	breq	.-14     	; 0xd73c <rcvr_datablock+0x12>
    d74a:	80 e0       	ldi	r24, 0x00	; 0
    d74c:	90 e0       	ldi	r25, 0x00	; 0
    d74e:	0b c0       	rjmp	.+22     	; 0xd766 <rcvr_datablock+0x3c>
    d750:	8e 3f       	cpi	r24, 0xFE	; 254
    d752:	d9 f7       	brne	.-10     	; 0xd74a <rcvr_datablock+0x20>
    d754:	b8 01       	movw	r22, r16
    d756:	ce 01       	movw	r24, r28
    d758:	d7 d4       	rcall	.+2478   	; 0xe108 <mmc_spi_RX_buffer>
    d75a:	8f ef       	ldi	r24, 0xFF	; 255
    d75c:	de df       	rcall	.-68     	; 0xd71a <xchg_spi>
    d75e:	8f ef       	ldi	r24, 0xFF	; 255
    d760:	dc df       	rcall	.-72     	; 0xd71a <xchg_spi>
    d762:	81 e0       	ldi	r24, 0x01	; 1
    d764:	90 e0       	ldi	r25, 0x00	; 0
    d766:	df 91       	pop	r29
    d768:	cf 91       	pop	r28
    d76a:	1f 91       	pop	r17
    d76c:	0f 91       	pop	r16
    d76e:	08 95       	ret

0000d770 <wait_ready>:
    d770:	cf 93       	push	r28
    d772:	d0 d4       	rcall	.+2464   	; 0xe114 <mmc_set_ms_timeout>
    d774:	8f ef       	ldi	r24, 0xFF	; 255
    d776:	cb d4       	rcall	.+2454   	; 0xe10e <mmc_spi_TXRX>
    d778:	c8 2f       	mov	r28, r24
    d77a:	8f 3f       	cpi	r24, 0xFF	; 255
    d77c:	19 f0       	breq	.+6      	; 0xd784 <wait_ready+0x14>
    d77e:	d1 d4       	rcall	.+2466   	; 0xe122 <mmc_test_timeout>
    d780:	89 2b       	or	r24, r25
    d782:	c1 f3       	breq	.-16     	; 0xd774 <wait_ready+0x4>
    d784:	81 e0       	ldi	r24, 0x01	; 1
    d786:	90 e0       	ldi	r25, 0x00	; 0
    d788:	cf 3f       	cpi	r28, 0xFF	; 255
    d78a:	11 f0       	breq	.+4      	; 0xd790 <wait_ready+0x20>
    d78c:	80 e0       	ldi	r24, 0x00	; 0
    d78e:	90 e0       	ldi	r25, 0x00	; 0
    d790:	cf 91       	pop	r28
    d792:	08 95       	ret

0000d794 <select>:
    d794:	cf 93       	push	r28
    d796:	df 93       	push	r29
    d798:	00 d0       	rcall	.+0      	; 0xd79a <select+0x6>
    d79a:	1f 92       	push	r1
    d79c:	82 d4       	rcall	.+2308   	; 0xe0a2 <mmc_spi_begin>
    d79e:	8f ef       	ldi	r24, 0xFF	; 255
    d7a0:	bc df       	rcall	.-136    	; 0xd71a <xchg_spi>
    d7a2:	88 ee       	ldi	r24, 0xE8	; 232
    d7a4:	93 e0       	ldi	r25, 0x03	; 3
    d7a6:	e4 df       	rcall	.-56     	; 0xd770 <wait_ready>
    d7a8:	ec 01       	movw	r28, r24
    d7aa:	89 2b       	or	r24, r25
    d7ac:	61 f4       	brne	.+24     	; 0xd7c6 <select+0x32>
    d7ae:	8f e7       	ldi	r24, 0x7F	; 127
    d7b0:	98 e0       	ldi	r25, 0x08	; 8
    d7b2:	a0 e0       	ldi	r26, 0x00	; 0
    d7b4:	ed b7       	in	r30, 0x3d	; 61
    d7b6:	fe b7       	in	r31, 0x3e	; 62
    d7b8:	81 83       	std	Z+1, r24	; 0x01
    d7ba:	92 83       	std	Z+2, r25	; 0x02
    d7bc:	a3 83       	std	Z+3, r26	; 0x03
    d7be:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    d7c2:	ad df       	rcall	.-166    	; 0xd71e <deselect>
    d7c4:	02 c0       	rjmp	.+4      	; 0xd7ca <select+0x36>
    d7c6:	c1 e0       	ldi	r28, 0x01	; 1
    d7c8:	d0 e0       	ldi	r29, 0x00	; 0
    d7ca:	ce 01       	movw	r24, r28
    d7cc:	cd b7       	in	r28, 0x3d	; 61
    d7ce:	de b7       	in	r29, 0x3e	; 62
    d7d0:	23 96       	adiw	r28, 0x03	; 3
    d7d2:	e2 e0       	ldi	r30, 0x02	; 2
    d7d4:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0000d7d8 <send_cmd>:
    d7d8:	ff 92       	push	r15
    d7da:	0f 93       	push	r16
    d7dc:	1f 93       	push	r17
    d7de:	cf 93       	push	r28
    d7e0:	df 93       	push	r29
    d7e2:	c8 2f       	mov	r28, r24
    d7e4:	d4 2f       	mov	r29, r20
    d7e6:	15 2f       	mov	r17, r21
    d7e8:	06 2f       	mov	r16, r22
    d7ea:	f7 2e       	mov	r15, r23
    d7ec:	87 ff       	sbrs	r24, 7
    d7ee:	08 c0       	rjmp	.+16     	; 0xd800 <send_cmd+0x28>
    d7f0:	40 e0       	ldi	r20, 0x00	; 0
    d7f2:	50 e0       	ldi	r21, 0x00	; 0
    d7f4:	ba 01       	movw	r22, r20
    d7f6:	87 e3       	ldi	r24, 0x37	; 55
    d7f8:	ef df       	rcall	.-34     	; 0xd7d8 <send_cmd>
    d7fa:	82 30       	cpi	r24, 0x02	; 2
    d7fc:	58 f5       	brcc	.+86     	; 0xd854 <send_cmd+0x7c>
    d7fe:	cf 77       	andi	r28, 0x7F	; 127
    d800:	cc 30       	cpi	r28, 0x0C	; 12
    d802:	71 f4       	brne	.+28     	; 0xd820 <send_cmd+0x48>
    d804:	8c 2f       	mov	r24, r28
    d806:	80 64       	ori	r24, 0x40	; 64
    d808:	88 df       	rcall	.-240    	; 0xd71a <xchg_spi>
    d80a:	8f 2d       	mov	r24, r15
    d80c:	86 df       	rcall	.-244    	; 0xd71a <xchg_spi>
    d80e:	80 2f       	mov	r24, r16
    d810:	84 df       	rcall	.-248    	; 0xd71a <xchg_spi>
    d812:	81 2f       	mov	r24, r17
    d814:	82 df       	rcall	.-252    	; 0xd71a <xchg_spi>
    d816:	8d 2f       	mov	r24, r29
    d818:	80 df       	rcall	.-256    	; 0xd71a <xchg_spi>
    d81a:	cc 23       	and	r28, r28
    d81c:	c9 f0       	breq	.+50     	; 0xd850 <send_cmd+0x78>
    d81e:	06 c0       	rjmp	.+12     	; 0xd82c <send_cmd+0x54>
    d820:	7e df       	rcall	.-260    	; 0xd71e <deselect>
    d822:	b8 df       	rcall	.-144    	; 0xd794 <select>
    d824:	89 2b       	or	r24, r25
    d826:	71 f7       	brne	.-36     	; 0xd804 <send_cmd+0x2c>
    d828:	8f ef       	ldi	r24, 0xFF	; 255
    d82a:	14 c0       	rjmp	.+40     	; 0xd854 <send_cmd+0x7c>
    d82c:	c8 30       	cpi	r28, 0x08	; 8
    d82e:	11 f4       	brne	.+4      	; 0xd834 <send_cmd+0x5c>
    d830:	87 e8       	ldi	r24, 0x87	; 135
    d832:	01 c0       	rjmp	.+2      	; 0xd836 <send_cmd+0x5e>
    d834:	81 e0       	ldi	r24, 0x01	; 1
    d836:	71 df       	rcall	.-286    	; 0xd71a <xchg_spi>
    d838:	cc 30       	cpi	r28, 0x0C	; 12
    d83a:	11 f4       	brne	.+4      	; 0xd840 <send_cmd+0x68>
    d83c:	8f ef       	ldi	r24, 0xFF	; 255
    d83e:	6d df       	rcall	.-294    	; 0xd71a <xchg_spi>
    d840:	ca e0       	ldi	r28, 0x0A	; 10
    d842:	8f ef       	ldi	r24, 0xFF	; 255
    d844:	64 d4       	rcall	.+2248   	; 0xe10e <mmc_spi_TXRX>
    d846:	87 ff       	sbrs	r24, 7
    d848:	05 c0       	rjmp	.+10     	; 0xd854 <send_cmd+0x7c>
    d84a:	c1 50       	subi	r28, 0x01	; 1
    d84c:	d1 f7       	brne	.-12     	; 0xd842 <send_cmd+0x6a>
    d84e:	02 c0       	rjmp	.+4      	; 0xd854 <send_cmd+0x7c>
    d850:	85 e9       	ldi	r24, 0x95	; 149
    d852:	f5 cf       	rjmp	.-22     	; 0xd83e <send_cmd+0x66>
    d854:	cd b7       	in	r28, 0x3d	; 61
    d856:	de b7       	in	r29, 0x3e	; 62
    d858:	e5 e0       	ldi	r30, 0x05	; 5
    d85a:	0c 94 12 e4 	jmp	0x1c824	; 0x1c824 <__epilogue_restores__+0x1a>

0000d85e <xmit_datablock>:
    d85e:	0f 93       	push	r16
    d860:	1f 93       	push	r17
    d862:	cf 93       	push	r28
    d864:	8c 01       	movw	r16, r24
    d866:	c6 2f       	mov	r28, r22
    d868:	88 ee       	ldi	r24, 0xE8	; 232
    d86a:	93 e0       	ldi	r25, 0x03	; 3
    d86c:	81 df       	rcall	.-254    	; 0xd770 <wait_ready>
    d86e:	00 97       	sbiw	r24, 0x00	; 0
    d870:	c9 f0       	breq	.+50     	; 0xd8a4 <xmit_datablock+0x46>
    d872:	8c 2f       	mov	r24, r28
    d874:	52 df       	rcall	.-348    	; 0xd71a <xchg_spi>
    d876:	cd 3f       	cpi	r28, 0xFD	; 253
    d878:	99 f0       	breq	.+38     	; 0xd8a0 <xmit_datablock+0x42>
    d87a:	60 e0       	ldi	r22, 0x00	; 0
    d87c:	72 e0       	ldi	r23, 0x02	; 2
    d87e:	c8 01       	movw	r24, r16
    d880:	40 d4       	rcall	.+2176   	; 0xe102 <mmc_spi_TX_buffer>
    d882:	8f ef       	ldi	r24, 0xFF	; 255
    d884:	4a df       	rcall	.-364    	; 0xd71a <xchg_spi>
    d886:	8f ef       	ldi	r24, 0xFF	; 255
    d888:	48 df       	rcall	.-368    	; 0xd71a <xchg_spi>
    d88a:	8f ef       	ldi	r24, 0xFF	; 255
    d88c:	40 d4       	rcall	.+2176   	; 0xe10e <mmc_spi_TXRX>
    d88e:	8f 71       	andi	r24, 0x1F	; 31
    d890:	31 e0       	ldi	r19, 0x01	; 1
    d892:	20 e0       	ldi	r18, 0x00	; 0
    d894:	85 30       	cpi	r24, 0x05	; 5
    d896:	09 f0       	breq	.+2      	; 0xd89a <xmit_datablock+0x3c>
    d898:	30 e0       	ldi	r19, 0x00	; 0
    d89a:	83 2f       	mov	r24, r19
    d89c:	92 2f       	mov	r25, r18
    d89e:	02 c0       	rjmp	.+4      	; 0xd8a4 <xmit_datablock+0x46>
    d8a0:	81 e0       	ldi	r24, 0x01	; 1
    d8a2:	90 e0       	ldi	r25, 0x00	; 0
    d8a4:	cf 91       	pop	r28
    d8a6:	1f 91       	pop	r17
    d8a8:	0f 91       	pop	r16
    d8aa:	08 95       	ret

0000d8ac <mmc_disk_initialize>:
    d8ac:	a4 e0       	ldi	r26, 0x04	; 4
    d8ae:	b0 e0       	ldi	r27, 0x00	; 0
    d8b0:	ec e5       	ldi	r30, 0x5C	; 92
    d8b2:	fc e6       	ldi	r31, 0x6C	; 108
    d8b4:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    d8b8:	59 d4       	rcall	.+2226   	; 0xe16c <mmc_power_off>
    d8ba:	64 e6       	ldi	r22, 0x64	; 100
    d8bc:	70 e0       	ldi	r23, 0x00	; 0
    d8be:	80 e0       	ldi	r24, 0x00	; 0
    d8c0:	90 e0       	ldi	r25, 0x00	; 0
    d8c2:	0e 94 b1 29 	call	0x5362	; 0x5362 <delayms>
    d8c6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d8ca:	81 fd       	sbrc	r24, 1
    d8cc:	8e c0       	rjmp	.+284    	; 0xd9ea <mmc_disk_initialize+0x13e>
    d8ce:	4d d4       	rcall	.+2202   	; 0xe16a <mmc_power_on>
    d8d0:	f9 d3       	rcall	.+2034   	; 0xe0c4 <mmc_slow>
    d8d2:	1a e0       	ldi	r17, 0x0A	; 10
    d8d4:	8f ef       	ldi	r24, 0xFF	; 255
    d8d6:	21 df       	rcall	.-446    	; 0xd71a <xchg_spi>
    d8d8:	11 50       	subi	r17, 0x01	; 1
    d8da:	e1 f7       	brne	.-8      	; 0xd8d4 <mmc_disk_initialize+0x28>
    d8dc:	40 e0       	ldi	r20, 0x00	; 0
    d8de:	50 e0       	ldi	r21, 0x00	; 0
    d8e0:	ba 01       	movw	r22, r20
    d8e2:	80 e0       	ldi	r24, 0x00	; 0
    d8e4:	79 df       	rcall	.-270    	; 0xd7d8 <send_cmd>
    d8e6:	81 30       	cpi	r24, 0x01	; 1
    d8e8:	09 f0       	breq	.+2      	; 0xd8ec <mmc_disk_initialize+0x40>
    d8ea:	6f c0       	rjmp	.+222    	; 0xd9ca <mmc_disk_initialize+0x11e>
    d8ec:	80 ed       	ldi	r24, 0xD0	; 208
    d8ee:	97 e0       	ldi	r25, 0x07	; 7
    d8f0:	11 d4       	rcall	.+2082   	; 0xe114 <mmc_set_ms_timeout>
    d8f2:	4a ea       	ldi	r20, 0xAA	; 170
    d8f4:	51 e0       	ldi	r21, 0x01	; 1
    d8f6:	60 e0       	ldi	r22, 0x00	; 0
    d8f8:	70 e0       	ldi	r23, 0x00	; 0
    d8fa:	88 e0       	ldi	r24, 0x08	; 8
    d8fc:	6d df       	rcall	.-294    	; 0xd7d8 <send_cmd>
    d8fe:	81 30       	cpi	r24, 0x01	; 1
    d900:	09 f0       	breq	.+2      	; 0xd904 <mmc_disk_initialize+0x58>
    d902:	3d c0       	rjmp	.+122    	; 0xd97e <mmc_disk_initialize+0xd2>
    d904:	8e 01       	movw	r16, r28
    d906:	0f 5f       	subi	r16, 0xFF	; 255
    d908:	1f 4f       	sbci	r17, 0xFF	; 255
    d90a:	6e 01       	movw	r12, r28
    d90c:	85 e0       	ldi	r24, 0x05	; 5
    d90e:	c8 0e       	add	r12, r24
    d910:	d1 1c       	adc	r13, r1
    d912:	78 01       	movw	r14, r16
    d914:	8f ef       	ldi	r24, 0xFF	; 255
    d916:	fb d3       	rcall	.+2038   	; 0xe10e <mmc_spi_TXRX>
    d918:	f7 01       	movw	r30, r14
    d91a:	81 93       	st	Z+, r24
    d91c:	7f 01       	movw	r14, r30
    d91e:	ce 16       	cp	r12, r30
    d920:	df 06       	cpc	r13, r31
    d922:	c1 f7       	brne	.-16     	; 0xd914 <mmc_disk_initialize+0x68>
    d924:	8b 81       	ldd	r24, Y+3	; 0x03
    d926:	81 30       	cpi	r24, 0x01	; 1
    d928:	09 f0       	breq	.+2      	; 0xd92c <mmc_disk_initialize+0x80>
    d92a:	4f c0       	rjmp	.+158    	; 0xd9ca <mmc_disk_initialize+0x11e>
    d92c:	8c 81       	ldd	r24, Y+4	; 0x04
    d92e:	8a 3a       	cpi	r24, 0xAA	; 170
    d930:	09 f0       	breq	.+2      	; 0xd934 <mmc_disk_initialize+0x88>
    d932:	4b c0       	rjmp	.+150    	; 0xd9ca <mmc_disk_initialize+0x11e>
    d934:	f6 d3       	rcall	.+2028   	; 0xe122 <mmc_test_timeout>
    d936:	89 2b       	or	r24, r25
    d938:	29 f0       	breq	.+10     	; 0xd944 <mmc_disk_initialize+0x98>
    d93a:	f3 d3       	rcall	.+2022   	; 0xe122 <mmc_test_timeout>
    d93c:	89 2b       	or	r24, r25
    d93e:	09 f0       	breq	.+2      	; 0xd942 <mmc_disk_initialize+0x96>
    d940:	44 c0       	rjmp	.+136    	; 0xd9ca <mmc_disk_initialize+0x11e>
    d942:	09 c0       	rjmp	.+18     	; 0xd956 <mmc_disk_initialize+0xaa>
    d944:	40 e0       	ldi	r20, 0x00	; 0
    d946:	50 e0       	ldi	r21, 0x00	; 0
    d948:	60 e0       	ldi	r22, 0x00	; 0
    d94a:	70 e4       	ldi	r23, 0x40	; 64
    d94c:	89 ea       	ldi	r24, 0xA9	; 169
    d94e:	44 df       	rcall	.-376    	; 0xd7d8 <send_cmd>
    d950:	81 11       	cpse	r24, r1
    d952:	f0 cf       	rjmp	.-32     	; 0xd934 <mmc_disk_initialize+0x88>
    d954:	f2 cf       	rjmp	.-28     	; 0xd93a <mmc_disk_initialize+0x8e>
    d956:	40 e0       	ldi	r20, 0x00	; 0
    d958:	50 e0       	ldi	r21, 0x00	; 0
    d95a:	ba 01       	movw	r22, r20
    d95c:	8a e3       	ldi	r24, 0x3A	; 58
    d95e:	3c df       	rcall	.-392    	; 0xd7d8 <send_cmd>
    d960:	81 11       	cpse	r24, r1
    d962:	33 c0       	rjmp	.+102    	; 0xd9ca <mmc_disk_initialize+0x11e>
    d964:	8f ef       	ldi	r24, 0xFF	; 255
    d966:	d3 d3       	rcall	.+1958   	; 0xe10e <mmc_spi_TXRX>
    d968:	f8 01       	movw	r30, r16
    d96a:	81 93       	st	Z+, r24
    d96c:	8f 01       	movw	r16, r30
    d96e:	ce 16       	cp	r12, r30
    d970:	df 06       	cpc	r13, r31
    d972:	c1 f7       	brne	.-16     	; 0xd964 <mmc_disk_initialize+0xb8>
    d974:	89 81       	ldd	r24, Y+1	; 0x01
    d976:	86 fd       	sbrc	r24, 6
    d978:	2a c0       	rjmp	.+84     	; 0xd9ce <mmc_disk_initialize+0x122>
    d97a:	14 e0       	ldi	r17, 0x04	; 4
    d97c:	29 c0       	rjmp	.+82     	; 0xd9d0 <mmc_disk_initialize+0x124>
    d97e:	80 ed       	ldi	r24, 0xD0	; 208
    d980:	97 e0       	ldi	r25, 0x07	; 7
    d982:	c8 d3       	rcall	.+1936   	; 0xe114 <mmc_set_ms_timeout>
    d984:	40 e0       	ldi	r20, 0x00	; 0
    d986:	50 e0       	ldi	r21, 0x00	; 0
    d988:	ba 01       	movw	r22, r20
    d98a:	89 ea       	ldi	r24, 0xA9	; 169
    d98c:	25 df       	rcall	.-438    	; 0xd7d8 <send_cmd>
    d98e:	82 30       	cpi	r24, 0x02	; 2
    d990:	18 f0       	brcs	.+6      	; 0xd998 <mmc_disk_initialize+0xec>
    d992:	11 e0       	ldi	r17, 0x01	; 1
    d994:	01 e0       	ldi	r16, 0x01	; 1
    d996:	02 c0       	rjmp	.+4      	; 0xd99c <mmc_disk_initialize+0xf0>
    d998:	12 e0       	ldi	r17, 0x02	; 2
    d99a:	09 ea       	ldi	r16, 0xA9	; 169
    d99c:	c2 d3       	rcall	.+1924   	; 0xe122 <mmc_test_timeout>
    d99e:	89 2b       	or	r24, r25
    d9a0:	21 f0       	breq	.+8      	; 0xd9aa <mmc_disk_initialize+0xfe>
    d9a2:	bf d3       	rcall	.+1918   	; 0xe122 <mmc_test_timeout>
    d9a4:	89 2b       	or	r24, r25
    d9a6:	89 f4       	brne	.+34     	; 0xd9ca <mmc_disk_initialize+0x11e>
    d9a8:	08 c0       	rjmp	.+16     	; 0xd9ba <mmc_disk_initialize+0x10e>
    d9aa:	40 e0       	ldi	r20, 0x00	; 0
    d9ac:	50 e0       	ldi	r21, 0x00	; 0
    d9ae:	ba 01       	movw	r22, r20
    d9b0:	80 2f       	mov	r24, r16
    d9b2:	12 df       	rcall	.-476    	; 0xd7d8 <send_cmd>
    d9b4:	81 11       	cpse	r24, r1
    d9b6:	f2 cf       	rjmp	.-28     	; 0xd99c <mmc_disk_initialize+0xf0>
    d9b8:	f4 cf       	rjmp	.-24     	; 0xd9a2 <mmc_disk_initialize+0xf6>
    d9ba:	40 e0       	ldi	r20, 0x00	; 0
    d9bc:	52 e0       	ldi	r21, 0x02	; 2
    d9be:	60 e0       	ldi	r22, 0x00	; 0
    d9c0:	70 e0       	ldi	r23, 0x00	; 0
    d9c2:	80 e1       	ldi	r24, 0x10	; 16
    d9c4:	09 df       	rcall	.-494    	; 0xd7d8 <send_cmd>
    d9c6:	88 23       	and	r24, r24
    d9c8:	19 f0       	breq	.+6      	; 0xd9d0 <mmc_disk_initialize+0x124>
    d9ca:	10 e0       	ldi	r17, 0x00	; 0
    d9cc:	01 c0       	rjmp	.+2      	; 0xd9d0 <mmc_disk_initialize+0x124>
    d9ce:	1c e0       	ldi	r17, 0x0C	; 12
    d9d0:	10 93 31 18 	sts	0x1831, r17	; 0x801831 <CardType>
    d9d4:	a4 de       	rcall	.-696    	; 0xd71e <deselect>
    d9d6:	11 23       	and	r17, r17
    d9d8:	39 f0       	breq	.+14     	; 0xd9e8 <mmc_disk_initialize+0x13c>
    d9da:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d9de:	8e 7f       	andi	r24, 0xFE	; 254
    d9e0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d9e4:	81 d3       	rcall	.+1794   	; 0xe0e8 <mmc_fast>
    d9e6:	01 c0       	rjmp	.+2      	; 0xd9ea <mmc_disk_initialize+0x13e>
    d9e8:	c1 d3       	rcall	.+1922   	; 0xe16c <mmc_power_off>
    d9ea:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d9ee:	24 96       	adiw	r28, 0x04	; 4
    d9f0:	e8 e0       	ldi	r30, 0x08	; 8
    d9f2:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000d9f6 <mmc_disk_status>:
    d9f6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d9fa:	08 95       	ret

0000d9fc <mmc_disk_read>:
    d9fc:	8f 92       	push	r8
    d9fe:	9f 92       	push	r9
    da00:	af 92       	push	r10
    da02:	bf 92       	push	r11
    da04:	ef 92       	push	r14
    da06:	ff 92       	push	r15
    da08:	1f 93       	push	r17
    da0a:	cf 93       	push	r28
    da0c:	df 93       	push	r29
    da0e:	7c 01       	movw	r14, r24
    da10:	4a 01       	movw	r8, r20
    da12:	5b 01       	movw	r10, r22
    da14:	e9 01       	movw	r28, r18
    da16:	20 97       	sbiw	r28, 0x00	; 0
    da18:	19 f4       	brne	.+6      	; 0xda20 <mmc_disk_read+0x24>
    da1a:	81 de       	rcall	.-766    	; 0xd71e <deselect>
    da1c:	84 e0       	ldi	r24, 0x04	; 4
    da1e:	0d c0       	rjmp	.+26     	; 0xda3a <mmc_disk_read+0x3e>
    da20:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    da24:	88 23       	and	r24, r24
    da26:	19 f0       	breq	.+6      	; 0xda2e <mmc_disk_read+0x32>
    da28:	81 e0       	ldi	r24, 0x01	; 1
    da2a:	0e 94 51 28 	call	0x50a2	; 0x50a2 <set_error>
    da2e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    da32:	80 ff       	sbrs	r24, 0
    da34:	04 c0       	rjmp	.+8      	; 0xda3e <mmc_disk_read+0x42>
    da36:	73 de       	rcall	.-794    	; 0xd71e <deselect>
    da38:	83 e0       	ldi	r24, 0x03	; 3
    da3a:	90 e0       	ldi	r25, 0x00	; 0
    da3c:	36 c0       	rjmp	.+108    	; 0xdaaa <mmc_disk_read+0xae>
    da3e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    da42:	81 fd       	sbrc	r24, 1
    da44:	f8 cf       	rjmp	.-16     	; 0xda36 <mmc_disk_read+0x3a>
    da46:	46 9a       	sbi	0x08, 6	; 8
    da48:	3e 9a       	sbi	0x07, 6	; 7
    da4a:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <CardType>
    da4e:	83 fd       	sbrc	r24, 3
    da50:	07 c0       	rjmp	.+14     	; 0xda60 <mmc_disk_read+0x64>
    da52:	89 e0       	ldi	r24, 0x09	; 9
    da54:	88 0c       	add	r8, r8
    da56:	99 1c       	adc	r9, r9
    da58:	aa 1c       	adc	r10, r10
    da5a:	bb 1c       	adc	r11, r11
    da5c:	8a 95       	dec	r24
    da5e:	d1 f7       	brne	.-12     	; 0xda54 <mmc_disk_read+0x58>
    da60:	c2 30       	cpi	r28, 0x02	; 2
    da62:	d1 05       	cpc	r29, r1
    da64:	10 f4       	brcc	.+4      	; 0xda6a <mmc_disk_read+0x6e>
    da66:	11 e1       	ldi	r17, 0x11	; 17
    da68:	01 c0       	rjmp	.+2      	; 0xda6c <mmc_disk_read+0x70>
    da6a:	12 e1       	ldi	r17, 0x12	; 18
    da6c:	b5 01       	movw	r22, r10
    da6e:	a4 01       	movw	r20, r8
    da70:	81 2f       	mov	r24, r17
    da72:	b2 de       	rcall	.-668    	; 0xd7d8 <send_cmd>
    da74:	81 11       	cpse	r24, r1
    da76:	11 c0       	rjmp	.+34     	; 0xda9a <mmc_disk_read+0x9e>
    da78:	60 e0       	ldi	r22, 0x00	; 0
    da7a:	72 e0       	ldi	r23, 0x02	; 2
    da7c:	c7 01       	movw	r24, r14
    da7e:	55 de       	rcall	.-854    	; 0xd72a <rcvr_datablock>
    da80:	89 2b       	or	r24, r25
    da82:	21 f0       	breq	.+8      	; 0xda8c <mmc_disk_read+0x90>
    da84:	8e ef       	ldi	r24, 0xFE	; 254
    da86:	f8 1a       	sub	r15, r24
    da88:	21 97       	sbiw	r28, 0x01	; 1
    da8a:	b1 f7       	brne	.-20     	; 0xda78 <mmc_disk_read+0x7c>
    da8c:	12 31       	cpi	r17, 0x12	; 18
    da8e:	29 f4       	brne	.+10     	; 0xda9a <mmc_disk_read+0x9e>
    da90:	40 e0       	ldi	r20, 0x00	; 0
    da92:	50 e0       	ldi	r21, 0x00	; 0
    da94:	ba 01       	movw	r22, r20
    da96:	8c e0       	ldi	r24, 0x0C	; 12
    da98:	9f de       	rcall	.-706    	; 0xd7d8 <send_cmd>
    da9a:	41 de       	rcall	.-894    	; 0xd71e <deselect>
    da9c:	46 98       	cbi	0x08, 6	; 8
    da9e:	3e 9a       	sbi	0x07, 6	; 7
    daa0:	81 e0       	ldi	r24, 0x01	; 1
    daa2:	90 e0       	ldi	r25, 0x00	; 0
    daa4:	cd 2b       	or	r28, r29
    daa6:	09 f4       	brne	.+2      	; 0xdaaa <mmc_disk_read+0xae>
    daa8:	80 e0       	ldi	r24, 0x00	; 0
    daaa:	df 91       	pop	r29
    daac:	cf 91       	pop	r28
    daae:	1f 91       	pop	r17
    dab0:	ff 90       	pop	r15
    dab2:	ef 90       	pop	r14
    dab4:	bf 90       	pop	r11
    dab6:	af 90       	pop	r10
    dab8:	9f 90       	pop	r9
    daba:	8f 90       	pop	r8
    dabc:	08 95       	ret

0000dabe <mmc_disk_write>:
    dabe:	a0 e0       	ldi	r26, 0x00	; 0
    dac0:	b0 e0       	ldi	r27, 0x00	; 0
    dac2:	e5 e6       	ldi	r30, 0x65	; 101
    dac4:	fd e6       	ldi	r31, 0x6D	; 109
    dac6:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    daca:	8c 01       	movw	r16, r24
    dacc:	6a 01       	movw	r12, r20
    dace:	7b 01       	movw	r14, r22
    dad0:	e9 01       	movw	r28, r18
    dad2:	20 97       	sbiw	r28, 0x00	; 0
    dad4:	19 f4       	brne	.+6      	; 0xdadc <mmc_disk_write+0x1e>
    dad6:	23 de       	rcall	.-954    	; 0xd71e <deselect>
    dad8:	84 e0       	ldi	r24, 0x04	; 4
    dada:	18 c0       	rjmp	.+48     	; 0xdb0c <mmc_disk_write+0x4e>
    dadc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dae0:	88 23       	and	r24, r24
    dae2:	19 f0       	breq	.+6      	; 0xdaea <mmc_disk_write+0x2c>
    dae4:	81 e0       	ldi	r24, 0x01	; 1
    dae6:	0e 94 51 28 	call	0x50a2	; 0x50a2 <set_error>
    daea:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    daee:	80 ff       	sbrs	r24, 0
    daf0:	03 c0       	rjmp	.+6      	; 0xdaf8 <mmc_disk_write+0x3a>
    daf2:	15 de       	rcall	.-982    	; 0xd71e <deselect>
    daf4:	83 e0       	ldi	r24, 0x03	; 3
    daf6:	0a c0       	rjmp	.+20     	; 0xdb0c <mmc_disk_write+0x4e>
    daf8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dafc:	81 fd       	sbrc	r24, 1
    dafe:	f9 cf       	rjmp	.-14     	; 0xdaf2 <mmc_disk_write+0x34>
    db00:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    db04:	82 ff       	sbrs	r24, 2
    db06:	04 c0       	rjmp	.+8      	; 0xdb10 <mmc_disk_write+0x52>
    db08:	0a de       	rcall	.-1004   	; 0xd71e <deselect>
    db0a:	82 e0       	ldi	r24, 0x02	; 2
    db0c:	90 e0       	ldi	r25, 0x00	; 0
    db0e:	46 c0       	rjmp	.+140    	; 0xdb9c <mmc_disk_write+0xde>
    db10:	46 9a       	sbi	0x08, 6	; 8
    db12:	3e 9a       	sbi	0x07, 6	; 7
    db14:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <CardType>
    db18:	83 fd       	sbrc	r24, 3
    db1a:	07 c0       	rjmp	.+14     	; 0xdb2a <mmc_disk_write+0x6c>
    db1c:	99 e0       	ldi	r25, 0x09	; 9
    db1e:	cc 0c       	add	r12, r12
    db20:	dd 1c       	adc	r13, r13
    db22:	ee 1c       	adc	r14, r14
    db24:	ff 1c       	adc	r15, r15
    db26:	9a 95       	dec	r25
    db28:	d1 f7       	brne	.-12     	; 0xdb1e <mmc_disk_write+0x60>
    db2a:	c1 30       	cpi	r28, 0x01	; 1
    db2c:	d1 05       	cpc	r29, r1
    db2e:	89 f4       	brne	.+34     	; 0xdb52 <mmc_disk_write+0x94>
    db30:	b7 01       	movw	r22, r14
    db32:	a6 01       	movw	r20, r12
    db34:	88 e1       	ldi	r24, 0x18	; 24
    db36:	50 de       	rcall	.-864    	; 0xd7d8 <send_cmd>
    db38:	81 11       	cpse	r24, r1
    db3a:	26 c0       	rjmp	.+76     	; 0xdb88 <mmc_disk_write+0xca>
    db3c:	6e ef       	ldi	r22, 0xFE	; 254
    db3e:	c8 01       	movw	r24, r16
    db40:	8e de       	rcall	.-740    	; 0xd85e <xmit_datablock>
    db42:	31 e0       	ldi	r19, 0x01	; 1
    db44:	20 e0       	ldi	r18, 0x00	; 0
    db46:	89 2b       	or	r24, r25
    db48:	09 f0       	breq	.+2      	; 0xdb4c <mmc_disk_write+0x8e>
    db4a:	30 e0       	ldi	r19, 0x00	; 0
    db4c:	c3 2f       	mov	r28, r19
    db4e:	d2 2f       	mov	r29, r18
    db50:	1d c0       	rjmp	.+58     	; 0xdb8c <mmc_disk_write+0xce>
    db52:	86 70       	andi	r24, 0x06	; 6
    db54:	29 f0       	breq	.+10     	; 0xdb60 <mmc_disk_write+0xa2>
    db56:	ae 01       	movw	r20, r28
    db58:	60 e0       	ldi	r22, 0x00	; 0
    db5a:	70 e0       	ldi	r23, 0x00	; 0
    db5c:	87 e9       	ldi	r24, 0x97	; 151
    db5e:	3c de       	rcall	.-904    	; 0xd7d8 <send_cmd>
    db60:	b7 01       	movw	r22, r14
    db62:	a6 01       	movw	r20, r12
    db64:	89 e1       	ldi	r24, 0x19	; 25
    db66:	38 de       	rcall	.-912    	; 0xd7d8 <send_cmd>
    db68:	81 11       	cpse	r24, r1
    db6a:	10 c0       	rjmp	.+32     	; 0xdb8c <mmc_disk_write+0xce>
    db6c:	6c ef       	ldi	r22, 0xFC	; 252
    db6e:	c8 01       	movw	r24, r16
    db70:	76 de       	rcall	.-788    	; 0xd85e <xmit_datablock>
    db72:	89 2b       	or	r24, r25
    db74:	19 f0       	breq	.+6      	; 0xdb7c <mmc_disk_write+0xbe>
    db76:	1e 5f       	subi	r17, 0xFE	; 254
    db78:	21 97       	sbiw	r28, 0x01	; 1
    db7a:	c1 f7       	brne	.-16     	; 0xdb6c <mmc_disk_write+0xae>
    db7c:	6d ef       	ldi	r22, 0xFD	; 253
    db7e:	80 e0       	ldi	r24, 0x00	; 0
    db80:	90 e0       	ldi	r25, 0x00	; 0
    db82:	6d de       	rcall	.-806    	; 0xd85e <xmit_datablock>
    db84:	89 2b       	or	r24, r25
    db86:	11 f4       	brne	.+4      	; 0xdb8c <mmc_disk_write+0xce>
    db88:	c1 e0       	ldi	r28, 0x01	; 1
    db8a:	d0 e0       	ldi	r29, 0x00	; 0
    db8c:	c8 dd       	rcall	.-1136   	; 0xd71e <deselect>
    db8e:	46 98       	cbi	0x08, 6	; 8
    db90:	3e 9a       	sbi	0x07, 6	; 7
    db92:	81 e0       	ldi	r24, 0x01	; 1
    db94:	90 e0       	ldi	r25, 0x00	; 0
    db96:	cd 2b       	or	r28, r29
    db98:	09 f4       	brne	.+2      	; 0xdb9c <mmc_disk_write+0xde>
    db9a:	80 e0       	ldi	r24, 0x00	; 0
    db9c:	cd b7       	in	r28, 0x3d	; 61
    db9e:	de b7       	in	r29, 0x3e	; 62
    dba0:	e8 e0       	ldi	r30, 0x08	; 8
    dba2:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000dba6 <mmc_disk_ioctl>:
    dba6:	a0 e1       	ldi	r26, 0x10	; 16
    dba8:	b0 e0       	ldi	r27, 0x00	; 0
    dbaa:	e9 ed       	ldi	r30, 0xD9	; 217
    dbac:	fd e6       	ldi	r31, 0x6D	; 109
    dbae:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    dbb2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    dbb6:	90 fd       	sbrc	r25, 0
    dbb8:	31 c2       	rjmp	.+1122   	; 0xe01c <mmc_disk_ioctl+0x476>
    dbba:	8b 01       	movw	r16, r22
    dbbc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    dbc0:	91 ff       	sbrs	r25, 1
    dbc2:	02 c0       	rjmp	.+4      	; 0xdbc8 <mmc_disk_ioctl+0x22>
    dbc4:	ac dd       	rcall	.-1192   	; 0xd71e <deselect>
    dbc6:	2a c2       	rjmp	.+1108   	; 0xe01c <mmc_disk_ioctl+0x476>
    dbc8:	83 33       	cpi	r24, 0x33	; 51
    dbca:	09 f4       	brne	.+2      	; 0xdbce <mmc_disk_ioctl+0x28>
    dbcc:	01 c1       	rjmp	.+514    	; 0xddd0 <mmc_disk_ioctl+0x22a>
    dbce:	a0 f4       	brcc	.+40     	; 0xdbf8 <mmc_disk_ioctl+0x52>
    dbd0:	83 30       	cpi	r24, 0x03	; 3
    dbd2:	09 f4       	brne	.+2      	; 0xdbd6 <mmc_disk_ioctl+0x30>
    dbd4:	85 c0       	rjmp	.+266    	; 0xdce0 <mmc_disk_ioctl+0x13a>
    dbd6:	28 f4       	brcc	.+10     	; 0xdbe2 <mmc_disk_ioctl+0x3c>
    dbd8:	88 23       	and	r24, r24
    dbda:	11 f1       	breq	.+68     	; 0xdc20 <mmc_disk_ioctl+0x7a>
    dbdc:	81 30       	cpi	r24, 0x01	; 1
    dbde:	11 f1       	breq	.+68     	; 0xdc24 <mmc_disk_ioctl+0x7e>
    dbe0:	1f c2       	rjmp	.+1086   	; 0xe020 <mmc_disk_ioctl+0x47a>
    dbe2:	87 30       	cpi	r24, 0x07	; 7
    dbe4:	09 f4       	brne	.+2      	; 0xdbe8 <mmc_disk_ioctl+0x42>
    dbe6:	2a c1       	rjmp	.+596    	; 0xde3c <mmc_disk_ioctl+0x296>
    dbe8:	82 33       	cpi	r24, 0x32	; 50
    dbea:	09 f0       	breq	.+2      	; 0xdbee <mmc_disk_ioctl+0x48>
    dbec:	19 c2       	rjmp	.+1074   	; 0xe020 <mmc_disk_ioctl+0x47a>
    dbee:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <CardType>
    dbf2:	fb 01       	movw	r30, r22
    dbf4:	80 83       	st	Z, r24
    dbf6:	28 c1       	rjmp	.+592    	; 0xde48 <mmc_disk_ioctl+0x2a2>
    dbf8:	86 33       	cpi	r24, 0x36	; 54
    dbfa:	09 f4       	brne	.+2      	; 0xdbfe <mmc_disk_ioctl+0x58>
    dbfc:	0c c1       	rjmp	.+536    	; 0xde16 <mmc_disk_ioctl+0x270>
    dbfe:	38 f4       	brcc	.+14     	; 0xdc0e <mmc_disk_ioctl+0x68>
    dc00:	84 33       	cpi	r24, 0x34	; 52
    dc02:	09 f4       	brne	.+2      	; 0xdc06 <mmc_disk_ioctl+0x60>
    dc04:	ea c0       	rjmp	.+468    	; 0xddda <mmc_disk_ioctl+0x234>
    dc06:	85 33       	cpi	r24, 0x35	; 53
    dc08:	09 f4       	brne	.+2      	; 0xdc0c <mmc_disk_ioctl+0x66>
    dc0a:	f1 c0       	rjmp	.+482    	; 0xddee <mmc_disk_ioctl+0x248>
    dc0c:	09 c2       	rjmp	.+1042   	; 0xe020 <mmc_disk_ioctl+0x47a>
    dc0e:	88 33       	cpi	r24, 0x38	; 56
    dc10:	09 f4       	brne	.+2      	; 0xdc14 <mmc_disk_ioctl+0x6e>
    dc12:	74 c1       	rjmp	.+744    	; 0xdefc <mmc_disk_ioctl+0x356>
    dc14:	08 f4       	brcc	.+2      	; 0xdc18 <mmc_disk_ioctl+0x72>
    dc16:	1a c1       	rjmp	.+564    	; 0xde4c <mmc_disk_ioctl+0x2a6>
    dc18:	89 33       	cpi	r24, 0x39	; 57
    dc1a:	09 f4       	brne	.+2      	; 0xdc1e <mmc_disk_ioctl+0x78>
    dc1c:	bc c1       	rjmp	.+888    	; 0xdf96 <mmc_disk_ioctl+0x3f0>
    dc1e:	00 c2       	rjmp	.+1024   	; 0xe020 <mmc_disk_ioctl+0x47a>
    dc20:	b9 dd       	rcall	.-1166   	; 0xd794 <select>
    dc22:	06 c1       	rjmp	.+524    	; 0xde30 <mmc_disk_ioctl+0x28a>
    dc24:	40 e0       	ldi	r20, 0x00	; 0
    dc26:	50 e0       	ldi	r21, 0x00	; 0
    dc28:	ba 01       	movw	r22, r20
    dc2a:	89 e0       	ldi	r24, 0x09	; 9
    dc2c:	d5 dd       	rcall	.-1110   	; 0xd7d8 <send_cmd>
    dc2e:	81 11       	cpse	r24, r1
    dc30:	f1 c1       	rjmp	.+994    	; 0xe014 <mmc_disk_ioctl+0x46e>
    dc32:	60 e1       	ldi	r22, 0x10	; 16
    dc34:	70 e0       	ldi	r23, 0x00	; 0
    dc36:	ce 01       	movw	r24, r28
    dc38:	01 96       	adiw	r24, 0x01	; 1
    dc3a:	77 dd       	rcall	.-1298   	; 0xd72a <rcvr_datablock>
    dc3c:	89 2b       	or	r24, r25
    dc3e:	09 f4       	brne	.+2      	; 0xdc42 <mmc_disk_ioctl+0x9c>
    dc40:	e9 c1       	rjmp	.+978    	; 0xe014 <mmc_disk_ioctl+0x46e>
    dc42:	99 81       	ldd	r25, Y+1	; 0x01
    dc44:	92 95       	swap	r25
    dc46:	96 95       	lsr	r25
    dc48:	96 95       	lsr	r25
    dc4a:	93 70       	andi	r25, 0x03	; 3
    dc4c:	29 85       	ldd	r18, Y+9	; 0x09
    dc4e:	4a 85       	ldd	r20, Y+10	; 0x0a
    dc50:	88 85       	ldd	r24, Y+8	; 0x08
    dc52:	91 30       	cpi	r25, 0x01	; 1
    dc54:	d9 f4       	brne	.+54     	; 0xdc8c <mmc_disk_ioctl+0xe6>
    dc56:	30 e0       	ldi	r19, 0x00	; 0
    dc58:	32 2f       	mov	r19, r18
    dc5a:	22 27       	eor	r18, r18
    dc5c:	24 0f       	add	r18, r20
    dc5e:	31 1d       	adc	r19, r1
    dc60:	8f 73       	andi	r24, 0x3F	; 63
    dc62:	90 e0       	ldi	r25, 0x00	; 0
    dc64:	a0 e0       	ldi	r26, 0x00	; 0
    dc66:	b0 e0       	ldi	r27, 0x00	; 0
    dc68:	dc 01       	movw	r26, r24
    dc6a:	99 27       	eor	r25, r25
    dc6c:	88 27       	eor	r24, r24
    dc6e:	01 96       	adiw	r24, 0x01	; 1
    dc70:	a1 1d       	adc	r26, r1
    dc72:	b1 1d       	adc	r27, r1
    dc74:	82 0f       	add	r24, r18
    dc76:	93 1f       	adc	r25, r19
    dc78:	a1 1d       	adc	r26, r1
    dc7a:	b1 1d       	adc	r27, r1
    dc7c:	fa e0       	ldi	r31, 0x0A	; 10
    dc7e:	88 0f       	add	r24, r24
    dc80:	99 1f       	adc	r25, r25
    dc82:	aa 1f       	adc	r26, r26
    dc84:	bb 1f       	adc	r27, r27
    dc86:	fa 95       	dec	r31
    dc88:	d1 f7       	brne	.-12     	; 0xdc7e <mmc_disk_ioctl+0xd8>
    dc8a:	9b c0       	rjmp	.+310    	; 0xddc2 <mmc_disk_ioctl+0x21c>
    dc8c:	22 95       	swap	r18
    dc8e:	26 95       	lsr	r18
    dc90:	26 95       	lsr	r18
    dc92:	23 70       	andi	r18, 0x03	; 3
    dc94:	f4 e0       	ldi	r31, 0x04	; 4
    dc96:	8f 9f       	mul	r24, r31
    dc98:	c0 01       	movw	r24, r0
    dc9a:	11 24       	eor	r1, r1
    dc9c:	82 0f       	add	r24, r18
    dc9e:	91 1d       	adc	r25, r1
    dca0:	01 96       	adiw	r24, 0x01	; 1
    dca2:	2f 81       	ldd	r18, Y+7	; 0x07
    dca4:	23 70       	andi	r18, 0x03	; 3
    dca6:	30 e0       	ldi	r19, 0x00	; 0
    dca8:	32 2f       	mov	r19, r18
    dcaa:	22 27       	eor	r18, r18
    dcac:	33 0f       	add	r19, r19
    dcae:	33 0f       	add	r19, r19
    dcb0:	82 0f       	add	r24, r18
    dcb2:	93 1f       	adc	r25, r19
    dcb4:	a0 e0       	ldi	r26, 0x00	; 0
    dcb6:	b0 e0       	ldi	r27, 0x00	; 0
    dcb8:	2e 81       	ldd	r18, Y+6	; 0x06
    dcba:	32 2f       	mov	r19, r18
    dcbc:	3f 70       	andi	r19, 0x0F	; 15
    dcbe:	2b 85       	ldd	r18, Y+11	; 0x0b
    dcc0:	22 1f       	adc	r18, r18
    dcc2:	22 27       	eor	r18, r18
    dcc4:	22 1f       	adc	r18, r18
    dcc6:	23 0f       	add	r18, r19
    dcc8:	43 70       	andi	r20, 0x03	; 3
    dcca:	44 0f       	add	r20, r20
    dccc:	42 0f       	add	r20, r18
    dcce:	47 50       	subi	r20, 0x07	; 7
    dcd0:	04 c0       	rjmp	.+8      	; 0xdcda <mmc_disk_ioctl+0x134>
    dcd2:	88 0f       	add	r24, r24
    dcd4:	99 1f       	adc	r25, r25
    dcd6:	aa 1f       	adc	r26, r26
    dcd8:	bb 1f       	adc	r27, r27
    dcda:	4a 95       	dec	r20
    dcdc:	d2 f7       	brpl	.-12     	; 0xdcd2 <mmc_disk_ioctl+0x12c>
    dcde:	71 c0       	rjmp	.+226    	; 0xddc2 <mmc_disk_ioctl+0x21c>
    dce0:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <CardType>
    dce4:	40 e0       	ldi	r20, 0x00	; 0
    dce6:	50 e0       	ldi	r21, 0x00	; 0
    dce8:	ba 01       	movw	r22, r20
    dcea:	82 ff       	sbrs	r24, 2
    dcec:	24 c0       	rjmp	.+72     	; 0xdd36 <mmc_disk_ioctl+0x190>
    dcee:	8d e8       	ldi	r24, 0x8D	; 141
    dcf0:	73 dd       	rcall	.-1306   	; 0xd7d8 <send_cmd>
    dcf2:	81 11       	cpse	r24, r1
    dcf4:	8f c1       	rjmp	.+798    	; 0xe014 <mmc_disk_ioctl+0x46e>
    dcf6:	8f ef       	ldi	r24, 0xFF	; 255
    dcf8:	10 dd       	rcall	.-1504   	; 0xd71a <xchg_spi>
    dcfa:	60 e1       	ldi	r22, 0x10	; 16
    dcfc:	70 e0       	ldi	r23, 0x00	; 0
    dcfe:	ce 01       	movw	r24, r28
    dd00:	01 96       	adiw	r24, 0x01	; 1
    dd02:	13 dd       	rcall	.-1498   	; 0xd72a <rcvr_datablock>
    dd04:	89 2b       	or	r24, r25
    dd06:	09 f4       	brne	.+2      	; 0xdd0a <mmc_disk_ioctl+0x164>
    dd08:	85 c1       	rjmp	.+778    	; 0xe014 <mmc_disk_ioctl+0x46e>
    dd0a:	50 e3       	ldi	r21, 0x30	; 48
    dd0c:	f5 2e       	mov	r15, r21
    dd0e:	8f ef       	ldi	r24, 0xFF	; 255
    dd10:	04 dd       	rcall	.-1528   	; 0xd71a <xchg_spi>
    dd12:	fa 94       	dec	r15
    dd14:	f1 10       	cpse	r15, r1
    dd16:	fb cf       	rjmp	.-10     	; 0xdd0e <mmc_disk_ioctl+0x168>
    dd18:	2b 85       	ldd	r18, Y+11	; 0x0b
    dd1a:	22 95       	swap	r18
    dd1c:	2f 70       	andi	r18, 0x0F	; 15
    dd1e:	80 e1       	ldi	r24, 0x10	; 16
    dd20:	90 e0       	ldi	r25, 0x00	; 0
    dd22:	a0 e0       	ldi	r26, 0x00	; 0
    dd24:	b0 e0       	ldi	r27, 0x00	; 0
    dd26:	04 c0       	rjmp	.+8      	; 0xdd30 <mmc_disk_ioctl+0x18a>
    dd28:	88 0f       	add	r24, r24
    dd2a:	99 1f       	adc	r25, r25
    dd2c:	aa 1f       	adc	r26, r26
    dd2e:	bb 1f       	adc	r27, r27
    dd30:	2a 95       	dec	r18
    dd32:	d2 f7       	brpl	.-12     	; 0xdd28 <mmc_disk_ioctl+0x182>
    dd34:	46 c0       	rjmp	.+140    	; 0xddc2 <mmc_disk_ioctl+0x21c>
    dd36:	89 e0       	ldi	r24, 0x09	; 9
    dd38:	4f dd       	rcall	.-1378   	; 0xd7d8 <send_cmd>
    dd3a:	81 11       	cpse	r24, r1
    dd3c:	6b c1       	rjmp	.+726    	; 0xe014 <mmc_disk_ioctl+0x46e>
    dd3e:	60 e1       	ldi	r22, 0x10	; 16
    dd40:	70 e0       	ldi	r23, 0x00	; 0
    dd42:	ce 01       	movw	r24, r28
    dd44:	01 96       	adiw	r24, 0x01	; 1
    dd46:	f1 dc       	rcall	.-1566   	; 0xd72a <rcvr_datablock>
    dd48:	89 2b       	or	r24, r25
    dd4a:	09 f4       	brne	.+2      	; 0xdd4e <mmc_disk_ioctl+0x1a8>
    dd4c:	63 c1       	rjmp	.+710    	; 0xe014 <mmc_disk_ioctl+0x46e>
    dd4e:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <CardType>
    dd52:	2b 85       	ldd	r18, Y+11	; 0x0b
    dd54:	8c 85       	ldd	r24, Y+12	; 0x0c
    dd56:	91 ff       	sbrs	r25, 1
    dd58:	16 c0       	rjmp	.+44     	; 0xdd86 <mmc_disk_ioctl+0x1e0>
    dd5a:	2f 73       	andi	r18, 0x3F	; 63
    dd5c:	88 1f       	adc	r24, r24
    dd5e:	88 27       	eor	r24, r24
    dd60:	88 1f       	adc	r24, r24
    dd62:	90 e0       	ldi	r25, 0x00	; 0
    dd64:	01 96       	adiw	r24, 0x01	; 1
    dd66:	82 0f       	add	r24, r18
    dd68:	91 1d       	adc	r25, r1
    dd6a:	82 0f       	add	r24, r18
    dd6c:	91 1d       	adc	r25, r1
    dd6e:	2e 85       	ldd	r18, Y+14	; 0x0e
    dd70:	22 95       	swap	r18
    dd72:	26 95       	lsr	r18
    dd74:	26 95       	lsr	r18
    dd76:	23 70       	andi	r18, 0x03	; 3
    dd78:	21 50       	subi	r18, 0x01	; 1
    dd7a:	02 c0       	rjmp	.+4      	; 0xdd80 <mmc_disk_ioctl+0x1da>
    dd7c:	88 0f       	add	r24, r24
    dd7e:	99 1f       	adc	r25, r25
    dd80:	2a 95       	dec	r18
    dd82:	e2 f7       	brpl	.-8      	; 0xdd7c <mmc_disk_ioctl+0x1d6>
    dd84:	1c c0       	rjmp	.+56     	; 0xddbe <mmc_disk_ioctl+0x218>
    dd86:	38 2f       	mov	r19, r24
    dd88:	33 70       	andi	r19, 0x03	; 3
    dd8a:	82 95       	swap	r24
    dd8c:	86 95       	lsr	r24
    dd8e:	87 70       	andi	r24, 0x07	; 7
    dd90:	90 e0       	ldi	r25, 0x00	; 0
    dd92:	f8 e0       	ldi	r31, 0x08	; 8
    dd94:	3f 9f       	mul	r19, r31
    dd96:	80 0d       	add	r24, r0
    dd98:	91 1d       	adc	r25, r1
    dd9a:	11 24       	eor	r1, r1
    dd9c:	01 96       	adiw	r24, 0x01	; 1
    dd9e:	2c 77       	andi	r18, 0x7C	; 124
    dda0:	30 e0       	ldi	r19, 0x00	; 0
    dda2:	35 95       	asr	r19
    dda4:	27 95       	ror	r18
    dda6:	35 95       	asr	r19
    dda8:	27 95       	ror	r18
    ddaa:	2f 5f       	subi	r18, 0xFF	; 255
    ddac:	3f 4f       	sbci	r19, 0xFF	; 255
    ddae:	82 9f       	mul	r24, r18
    ddb0:	a0 01       	movw	r20, r0
    ddb2:	83 9f       	mul	r24, r19
    ddb4:	50 0d       	add	r21, r0
    ddb6:	92 9f       	mul	r25, r18
    ddb8:	50 0d       	add	r21, r0
    ddba:	11 24       	eor	r1, r1
    ddbc:	ca 01       	movw	r24, r20
    ddbe:	a0 e0       	ldi	r26, 0x00	; 0
    ddc0:	b0 e0       	ldi	r27, 0x00	; 0
    ddc2:	f8 01       	movw	r30, r16
    ddc4:	80 83       	st	Z, r24
    ddc6:	91 83       	std	Z+1, r25	; 0x01
    ddc8:	a2 83       	std	Z+2, r26	; 0x02
    ddca:	b3 83       	std	Z+3, r27	; 0x03
    ddcc:	00 e0       	ldi	r16, 0x00	; 0
    ddce:	23 c1       	rjmp	.+582    	; 0xe016 <mmc_disk_ioctl+0x470>
    ddd0:	40 e0       	ldi	r20, 0x00	; 0
    ddd2:	50 e0       	ldi	r21, 0x00	; 0
    ddd4:	ba 01       	movw	r22, r20
    ddd6:	89 e0       	ldi	r24, 0x09	; 9
    ddd8:	04 c0       	rjmp	.+8      	; 0xdde2 <mmc_disk_ioctl+0x23c>
    ddda:	40 e0       	ldi	r20, 0x00	; 0
    dddc:	50 e0       	ldi	r21, 0x00	; 0
    ddde:	ba 01       	movw	r22, r20
    dde0:	8a e0       	ldi	r24, 0x0A	; 10
    dde2:	fa dc       	rcall	.-1548   	; 0xd7d8 <send_cmd>
    dde4:	81 11       	cpse	r24, r1
    dde6:	16 c1       	rjmp	.+556    	; 0xe014 <mmc_disk_ioctl+0x46e>
    dde8:	60 e1       	ldi	r22, 0x10	; 16
    ddea:	70 e0       	ldi	r23, 0x00	; 0
    ddec:	1f c0       	rjmp	.+62     	; 0xde2c <mmc_disk_ioctl+0x286>
    ddee:	40 e0       	ldi	r20, 0x00	; 0
    ddf0:	50 e0       	ldi	r21, 0x00	; 0
    ddf2:	ba 01       	movw	r22, r20
    ddf4:	8a e3       	ldi	r24, 0x3A	; 58
    ddf6:	f0 dc       	rcall	.-1568   	; 0xd7d8 <send_cmd>
    ddf8:	81 11       	cpse	r24, r1
    ddfa:	0c c1       	rjmp	.+536    	; 0xe014 <mmc_disk_ioctl+0x46e>
    ddfc:	78 01       	movw	r14, r16
    ddfe:	f4 e0       	ldi	r31, 0x04	; 4
    de00:	ef 0e       	add	r14, r31
    de02:	f1 1c       	adc	r15, r1
    de04:	8f ef       	ldi	r24, 0xFF	; 255
    de06:	83 d1       	rcall	.+774    	; 0xe10e <mmc_spi_TXRX>
    de08:	f8 01       	movw	r30, r16
    de0a:	81 93       	st	Z+, r24
    de0c:	8f 01       	movw	r16, r30
    de0e:	ee 15       	cp	r30, r14
    de10:	ff 05       	cpc	r31, r15
    de12:	c1 f7       	brne	.-16     	; 0xde04 <mmc_disk_ioctl+0x25e>
    de14:	db cf       	rjmp	.-74     	; 0xddcc <mmc_disk_ioctl+0x226>
    de16:	40 e0       	ldi	r20, 0x00	; 0
    de18:	50 e0       	ldi	r21, 0x00	; 0
    de1a:	ba 01       	movw	r22, r20
    de1c:	8d e8       	ldi	r24, 0x8D	; 141
    de1e:	dc dc       	rcall	.-1608   	; 0xd7d8 <send_cmd>
    de20:	81 11       	cpse	r24, r1
    de22:	f8 c0       	rjmp	.+496    	; 0xe014 <mmc_disk_ioctl+0x46e>
    de24:	8f ef       	ldi	r24, 0xFF	; 255
    de26:	79 dc       	rcall	.-1806   	; 0xd71a <xchg_spi>
    de28:	60 e4       	ldi	r22, 0x40	; 64
    de2a:	70 e0       	ldi	r23, 0x00	; 0
    de2c:	c8 01       	movw	r24, r16
    de2e:	7d dc       	rcall	.-1798   	; 0xd72a <rcvr_datablock>
    de30:	01 e0       	ldi	r16, 0x01	; 1
    de32:	10 e0       	ldi	r17, 0x00	; 0
    de34:	89 2b       	or	r24, r25
    de36:	09 f4       	brne	.+2      	; 0xde3a <mmc_disk_ioctl+0x294>
    de38:	ef c0       	rjmp	.+478    	; 0xe018 <mmc_disk_ioctl+0x472>
    de3a:	ea c0       	rjmp	.+468    	; 0xe010 <mmc_disk_ioctl+0x46a>
    de3c:	97 d1       	rcall	.+814    	; 0xe16c <mmc_power_off>
    de3e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    de42:	81 60       	ori	r24, 0x01	; 1
    de44:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    de48:	00 e0       	ldi	r16, 0x00	; 0
    de4a:	eb c0       	rjmp	.+470    	; 0xe022 <mmc_disk_ioctl+0x47c>
    de4c:	fb 01       	movw	r30, r22
    de4e:	43 81       	ldd	r20, Z+3	; 0x03
    de50:	54 81       	ldd	r21, Z+4	; 0x04
    de52:	65 81       	ldd	r22, Z+5	; 0x05
    de54:	76 81       	ldd	r23, Z+6	; 0x06
    de56:	39 e0       	ldi	r19, 0x09	; 9
    de58:	44 0f       	add	r20, r20
    de5a:	55 1f       	adc	r21, r21
    de5c:	66 1f       	adc	r22, r22
    de5e:	77 1f       	adc	r23, r23
    de60:	3a 95       	dec	r19
    de62:	d1 f7       	brne	.-12     	; 0xde58 <mmc_disk_ioctl+0x2b2>
    de64:	70 68       	ori	r23, 0x80	; 128
    de66:	80 81       	ld	r24, Z
    de68:	90 e0       	ldi	r25, 0x00	; 0
    de6a:	a0 e0       	ldi	r26, 0x00	; 0
    de6c:	b0 e0       	ldi	r27, 0x00	; 0
    de6e:	2c e1       	ldi	r18, 0x1C	; 28
    de70:	88 0f       	add	r24, r24
    de72:	99 1f       	adc	r25, r25
    de74:	aa 1f       	adc	r26, r26
    de76:	bb 1f       	adc	r27, r27
    de78:	2a 95       	dec	r18
    de7a:	d1 f7       	brne	.-12     	; 0xde70 <mmc_disk_ioctl+0x2ca>
    de7c:	48 2b       	or	r20, r24
    de7e:	59 2b       	or	r21, r25
    de80:	6a 2b       	or	r22, r26
    de82:	7b 2b       	or	r23, r27
    de84:	81 81       	ldd	r24, Z+1	; 0x01
    de86:	92 81       	ldd	r25, Z+2	; 0x02
    de88:	01 97       	sbiw	r24, 0x01	; 1
    de8a:	91 70       	andi	r25, 0x01	; 1
    de8c:	a0 e0       	ldi	r26, 0x00	; 0
    de8e:	b0 e0       	ldi	r27, 0x00	; 0
    de90:	48 2b       	or	r20, r24
    de92:	59 2b       	or	r21, r25
    de94:	6a 2b       	or	r22, r26
    de96:	7b 2b       	or	r23, r27
    de98:	80 e3       	ldi	r24, 0x30	; 48
    de9a:	9e dc       	rcall	.-1732   	; 0xd7d8 <send_cmd>
    de9c:	81 11       	cpse	r24, r1
    de9e:	ba c0       	rjmp	.+372    	; 0xe014 <mmc_disk_ioctl+0x46e>
    dea0:	88 ee       	ldi	r24, 0xE8	; 232
    dea2:	93 e0       	ldi	r25, 0x03	; 3
    dea4:	37 d1       	rcall	.+622    	; 0xe114 <mmc_set_ms_timeout>
    dea6:	8f ef       	ldi	r24, 0xFF	; 255
    dea8:	32 d1       	rcall	.+612    	; 0xe10e <mmc_spi_TXRX>
    deaa:	8f 3f       	cpi	r24, 0xFF	; 255
    deac:	21 f4       	brne	.+8      	; 0xdeb6 <mmc_disk_ioctl+0x310>
    deae:	39 d1       	rcall	.+626    	; 0xe122 <mmc_test_timeout>
    deb0:	89 2b       	or	r24, r25
    deb2:	c9 f3       	breq	.-14     	; 0xdea6 <mmc_disk_ioctl+0x300>
    deb4:	af c0       	rjmp	.+350    	; 0xe014 <mmc_disk_ioctl+0x46e>
    deb6:	8e 3f       	cpi	r24, 0xFE	; 254
    deb8:	09 f0       	breq	.+2      	; 0xdebc <mmc_disk_ioctl+0x316>
    deba:	ac c0       	rjmp	.+344    	; 0xe014 <mmc_disk_ioctl+0x46e>
    debc:	f8 01       	movw	r30, r16
    debe:	e7 80       	ldd	r14, Z+7	; 0x07
    dec0:	f0 84       	ldd	r15, Z+8	; 0x08
    dec2:	c1 80       	ldd	r12, Z+1	; 0x01
    dec4:	d2 80       	ldd	r13, Z+2	; 0x02
    dec6:	ce 0c       	add	r12, r14
    dec8:	df 1c       	adc	r13, r15
    deca:	ce 14       	cp	r12, r14
    decc:	df 04       	cpc	r13, r15
    dece:	31 f0       	breq	.+12     	; 0xdedc <mmc_disk_ioctl+0x336>
    ded0:	8f ef       	ldi	r24, 0xFF	; 255
    ded2:	1d d1       	rcall	.+570    	; 0xe10e <mmc_spi_TXRX>
    ded4:	f7 01       	movw	r30, r14
    ded6:	81 93       	st	Z+, r24
    ded8:	7f 01       	movw	r14, r30
    deda:	f7 cf       	rjmp	.-18     	; 0xdeca <mmc_disk_ioctl+0x324>
    dedc:	f8 01       	movw	r30, r16
    dede:	81 81       	ldd	r24, Z+1	; 0x01
    dee0:	92 81       	ldd	r25, Z+2	; 0x02
    dee2:	02 e0       	ldi	r16, 0x02	; 2
    dee4:	12 e0       	ldi	r17, 0x02	; 2
    dee6:	08 1b       	sub	r16, r24
    dee8:	19 0b       	sbc	r17, r25
    deea:	01 15       	cp	r16, r1
    deec:	11 05       	cpc	r17, r1
    deee:	09 f4       	brne	.+2      	; 0xdef2 <mmc_disk_ioctl+0x34c>
    def0:	6d cf       	rjmp	.-294    	; 0xddcc <mmc_disk_ioctl+0x226>
    def2:	8f ef       	ldi	r24, 0xFF	; 255
    def4:	12 dc       	rcall	.-2012   	; 0xd71a <xchg_spi>
    def6:	01 50       	subi	r16, 0x01	; 1
    def8:	11 09       	sbc	r17, r1
    defa:	f7 cf       	rjmp	.-18     	; 0xdeea <mmc_disk_ioctl+0x344>
    defc:	fb 01       	movw	r30, r22
    defe:	43 81       	ldd	r20, Z+3	; 0x03
    df00:	54 81       	ldd	r21, Z+4	; 0x04
    df02:	65 81       	ldd	r22, Z+5	; 0x05
    df04:	76 81       	ldd	r23, Z+6	; 0x06
    df06:	39 e0       	ldi	r19, 0x09	; 9
    df08:	44 0f       	add	r20, r20
    df0a:	55 1f       	adc	r21, r21
    df0c:	66 1f       	adc	r22, r22
    df0e:	77 1f       	adc	r23, r23
    df10:	3a 95       	dec	r19
    df12:	d1 f7       	brne	.-12     	; 0xdf08 <mmc_disk_ioctl+0x362>
    df14:	70 68       	ori	r23, 0x80	; 128
    df16:	80 81       	ld	r24, Z
    df18:	90 e0       	ldi	r25, 0x00	; 0
    df1a:	a0 e0       	ldi	r26, 0x00	; 0
    df1c:	b0 e0       	ldi	r27, 0x00	; 0
    df1e:	2c e1       	ldi	r18, 0x1C	; 28
    df20:	88 0f       	add	r24, r24
    df22:	99 1f       	adc	r25, r25
    df24:	aa 1f       	adc	r26, r26
    df26:	bb 1f       	adc	r27, r27
    df28:	2a 95       	dec	r18
    df2a:	d1 f7       	brne	.-12     	; 0xdf20 <mmc_disk_ioctl+0x37a>
    df2c:	48 2b       	or	r20, r24
    df2e:	59 2b       	or	r21, r25
    df30:	6a 2b       	or	r22, r26
    df32:	7b 2b       	or	r23, r27
    df34:	81 81       	ldd	r24, Z+1	; 0x01
    df36:	92 81       	ldd	r25, Z+2	; 0x02
    df38:	01 97       	sbiw	r24, 0x01	; 1
    df3a:	91 70       	andi	r25, 0x01	; 1
    df3c:	a0 e0       	ldi	r26, 0x00	; 0
    df3e:	b0 e0       	ldi	r27, 0x00	; 0
    df40:	48 2b       	or	r20, r24
    df42:	59 2b       	or	r21, r25
    df44:	6a 2b       	or	r22, r26
    df46:	7b 2b       	or	r23, r27
    df48:	81 e3       	ldi	r24, 0x31	; 49
    df4a:	46 dc       	rcall	.-1908   	; 0xd7d8 <send_cmd>
    df4c:	81 11       	cpse	r24, r1
    df4e:	62 c0       	rjmp	.+196    	; 0xe014 <mmc_disk_ioctl+0x46e>
    df50:	8f ef       	ldi	r24, 0xFF	; 255
    df52:	e3 db       	rcall	.-2106   	; 0xd71a <xchg_spi>
    df54:	8e ef       	ldi	r24, 0xFE	; 254
    df56:	e1 db       	rcall	.-2110   	; 0xd71a <xchg_spi>
    df58:	f8 01       	movw	r30, r16
    df5a:	e7 80       	ldd	r14, Z+7	; 0x07
    df5c:	f0 84       	ldd	r15, Z+8	; 0x08
    df5e:	c1 80       	ldd	r12, Z+1	; 0x01
    df60:	d2 80       	ldd	r13, Z+2	; 0x02
    df62:	ce 0c       	add	r12, r14
    df64:	df 1c       	adc	r13, r15
    df66:	ec 14       	cp	r14, r12
    df68:	fd 04       	cpc	r15, r13
    df6a:	29 f0       	breq	.+10     	; 0xdf76 <mmc_disk_ioctl+0x3d0>
    df6c:	f7 01       	movw	r30, r14
    df6e:	81 91       	ld	r24, Z+
    df70:	7f 01       	movw	r14, r30
    df72:	d3 db       	rcall	.-2138   	; 0xd71a <xchg_spi>
    df74:	f8 cf       	rjmp	.-16     	; 0xdf66 <mmc_disk_ioctl+0x3c0>
    df76:	f8 01       	movw	r30, r16
    df78:	81 81       	ldd	r24, Z+1	; 0x01
    df7a:	92 81       	ldd	r25, Z+2	; 0x02
    df7c:	02 e0       	ldi	r16, 0x02	; 2
    df7e:	12 e0       	ldi	r17, 0x02	; 2
    df80:	08 1b       	sub	r16, r24
    df82:	19 0b       	sbc	r17, r25
    df84:	8f ef       	ldi	r24, 0xFF	; 255
    df86:	01 15       	cp	r16, r1
    df88:	11 05       	cpc	r17, r1
    df8a:	09 f4       	brne	.+2      	; 0xdf8e <mmc_disk_ioctl+0x3e8>
    df8c:	3b c0       	rjmp	.+118    	; 0xe004 <mmc_disk_ioctl+0x45e>
    df8e:	c5 db       	rcall	.-2166   	; 0xd71a <xchg_spi>
    df90:	01 50       	subi	r16, 0x01	; 1
    df92:	11 09       	sbc	r17, r1
    df94:	f7 cf       	rjmp	.-18     	; 0xdf84 <mmc_disk_ioctl+0x3de>
    df96:	fb 01       	movw	r30, r22
    df98:	43 81       	ldd	r20, Z+3	; 0x03
    df9a:	54 81       	ldd	r21, Z+4	; 0x04
    df9c:	65 81       	ldd	r22, Z+5	; 0x05
    df9e:	76 81       	ldd	r23, Z+6	; 0x06
    dfa0:	89 e0       	ldi	r24, 0x09	; 9
    dfa2:	44 0f       	add	r20, r20
    dfa4:	55 1f       	adc	r21, r21
    dfa6:	66 1f       	adc	r22, r22
    dfa8:	77 1f       	adc	r23, r23
    dfaa:	8a 95       	dec	r24
    dfac:	d1 f7       	brne	.-12     	; 0xdfa2 <mmc_disk_ioctl+0x3fc>
    dfae:	74 68       	ori	r23, 0x84	; 132
    dfb0:	80 81       	ld	r24, Z
    dfb2:	90 e0       	ldi	r25, 0x00	; 0
    dfb4:	a0 e0       	ldi	r26, 0x00	; 0
    dfb6:	b0 e0       	ldi	r27, 0x00	; 0
    dfb8:	2c e1       	ldi	r18, 0x1C	; 28
    dfba:	88 0f       	add	r24, r24
    dfbc:	99 1f       	adc	r25, r25
    dfbe:	aa 1f       	adc	r26, r26
    dfc0:	bb 1f       	adc	r27, r27
    dfc2:	2a 95       	dec	r18
    dfc4:	d1 f7       	brne	.-12     	; 0xdfba <mmc_disk_ioctl+0x414>
    dfc6:	48 2b       	or	r20, r24
    dfc8:	59 2b       	or	r21, r25
    dfca:	6a 2b       	or	r22, r26
    dfcc:	7b 2b       	or	r23, r27
    dfce:	82 81       	ldd	r24, Z+2	; 0x02
    dfd0:	90 e0       	ldi	r25, 0x00	; 0
    dfd2:	a0 e0       	ldi	r26, 0x00	; 0
    dfd4:	b0 e0       	ldi	r27, 0x00	; 0
    dfd6:	48 2b       	or	r20, r24
    dfd8:	59 2b       	or	r21, r25
    dfda:	6a 2b       	or	r22, r26
    dfdc:	7b 2b       	or	r23, r27
    dfde:	81 e3       	ldi	r24, 0x31	; 49
    dfe0:	fb db       	rcall	.-2058   	; 0xd7d8 <send_cmd>
    dfe2:	81 11       	cpse	r24, r1
    dfe4:	17 c0       	rjmp	.+46     	; 0xe014 <mmc_disk_ioctl+0x46e>
    dfe6:	8f ef       	ldi	r24, 0xFF	; 255
    dfe8:	98 db       	rcall	.-2256   	; 0xd71a <xchg_spi>
    dfea:	8e ef       	ldi	r24, 0xFE	; 254
    dfec:	96 db       	rcall	.-2260   	; 0xd71a <xchg_spi>
    dfee:	f8 01       	movw	r30, r16
    dff0:	81 81       	ldd	r24, Z+1	; 0x01
    dff2:	93 db       	rcall	.-2266   	; 0xd71a <xchg_spi>
    dff4:	01 e0       	ldi	r16, 0x01	; 1
    dff6:	12 e0       	ldi	r17, 0x02	; 2
    dff8:	8f ef       	ldi	r24, 0xFF	; 255
    dffa:	8f db       	rcall	.-2274   	; 0xd71a <xchg_spi>
    dffc:	01 50       	subi	r16, 0x01	; 1
    dffe:	11 09       	sbc	r17, r1
    e000:	d9 f7       	brne	.-10     	; 0xdff8 <mmc_disk_ioctl+0x452>
    e002:	8f ef       	ldi	r24, 0xFF	; 255
    e004:	84 d0       	rcall	.+264    	; 0xe10e <mmc_spi_TXRX>
    e006:	8f 71       	andi	r24, 0x1F	; 31
    e008:	01 e0       	ldi	r16, 0x01	; 1
    e00a:	10 e0       	ldi	r17, 0x00	; 0
    e00c:	85 30       	cpi	r24, 0x05	; 5
    e00e:	21 f4       	brne	.+8      	; 0xe018 <mmc_disk_ioctl+0x472>
    e010:	00 e0       	ldi	r16, 0x00	; 0
    e012:	02 c0       	rjmp	.+4      	; 0xe018 <mmc_disk_ioctl+0x472>
    e014:	01 e0       	ldi	r16, 0x01	; 1
    e016:	10 e0       	ldi	r17, 0x00	; 0
    e018:	82 db       	rcall	.-2300   	; 0xd71e <deselect>
    e01a:	04 c0       	rjmp	.+8      	; 0xe024 <mmc_disk_ioctl+0x47e>
    e01c:	03 e0       	ldi	r16, 0x03	; 3
    e01e:	01 c0       	rjmp	.+2      	; 0xe022 <mmc_disk_ioctl+0x47c>
    e020:	04 e0       	ldi	r16, 0x04	; 4
    e022:	10 e0       	ldi	r17, 0x00	; 0
    e024:	c8 01       	movw	r24, r16
    e026:	60 96       	adiw	r28, 0x10	; 16
    e028:	e8 e0       	ldi	r30, 0x08	; 8
    e02a:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000e02e <mmc_disk_timerproc>:
    e02e:	cf 93       	push	r28
    e030:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <Timer1>
    e034:	88 23       	and	r24, r24
    e036:	19 f0       	breq	.+6      	; 0xe03e <mmc_disk_timerproc+0x10>
    e038:	81 50       	subi	r24, 0x01	; 1
    e03a:	80 93 33 18 	sts	0x1833, r24	; 0x801833 <Timer1>
    e03e:	80 91 32 18 	lds	r24, 0x1832	; 0x801832 <Timer2>
    e042:	88 23       	and	r24, r24
    e044:	19 f0       	breq	.+6      	; 0xe04c <mmc_disk_timerproc+0x1e>
    e046:	81 50       	subi	r24, 0x01	; 1
    e048:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <Timer2>
    e04c:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
    e050:	8e d0       	rcall	.+284    	; 0xe16e <mmc_ins_status>
    e052:	89 2b       	or	r24, r25
    e054:	11 f0       	breq	.+4      	; 0xe05a <mmc_disk_timerproc+0x2c>
    e056:	cd 7f       	andi	r28, 0xFD	; 253
    e058:	04 c0       	rjmp	.+8      	; 0xe062 <mmc_disk_timerproc+0x34>
    e05a:	c3 60       	ori	r28, 0x03	; 3
    e05c:	81 e0       	ldi	r24, 0x01	; 1
    e05e:	0e 94 51 28 	call	0x50a2	; 0x50a2 <set_error>
    e062:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
    e066:	cf 91       	pop	r28
    e068:	08 95       	ret

0000e06a <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e06a:	00 d0       	rcall	.+0      	; 0xe06c <mmc_install_timer+0x2>
    e06c:	1f 92       	push	r1
    e06e:	10 92 3d 18 	sts	0x183D, r1	; 0x80183d <_mmc_timeout+0x1>
    e072:	10 92 3c 18 	sts	0x183C, r1	; 0x80183c <_mmc_timeout>
    e076:	61 e0       	ldi	r22, 0x01	; 1
    e078:	70 e0       	ldi	r23, 0x00	; 0
    e07a:	84 ec       	ldi	r24, 0xC4	; 196
    e07c:	90 e7       	ldi	r25, 0x70	; 112
    e07e:	0e 94 04 36 	call	0x6c08	; 0x6c08 <set_timers>
    e082:	01 96       	adiw	r24, 0x01	; 1
    e084:	51 f4       	brne	.+20     	; 0xe09a <mmc_install_timer+0x30>
    e086:	8d e3       	ldi	r24, 0x3D	; 61
    e088:	99 e0       	ldi	r25, 0x09	; 9
    e08a:	a0 e0       	ldi	r26, 0x00	; 0
    e08c:	ed b7       	in	r30, 0x3d	; 61
    e08e:	fe b7       	in	r31, 0x3e	; 62
    e090:	81 83       	std	Z+1, r24	; 0x01
    e092:	92 83       	std	Z+2, r25	; 0x02
    e094:	a3 83       	std	Z+3, r26	; 0x03
    e096:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    e09a:	0f 90       	pop	r0
    e09c:	0f 90       	pop	r0
    e09e:	0f 90       	pop	r0
    e0a0:	08 95       	ret

0000e0a2 <mmc_spi_begin>:
    e0a2:	60 91 38 18 	lds	r22, 0x1838	; 0x801838 <_mmc_clock>
    e0a6:	70 91 39 18 	lds	r23, 0x1839	; 0x801839 <_mmc_clock+0x1>
    e0aa:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <_mmc_clock+0x2>
    e0ae:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <_mmc_clock+0x3>
    e0b2:	4b e0       	ldi	r20, 0x0B	; 11
    e0b4:	50 e0       	ldi	r21, 0x00	; 0
    e0b6:	0c 94 f8 27 	jmp	0x4ff0	; 0x4ff0 <spi_begin>
    e0ba:	08 95       	ret

0000e0bc <mmc_spi_end>:
    e0bc:	8b e0       	ldi	r24, 0x0B	; 11
    e0be:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <spi_end>
    e0c2:	08 95       	ret

0000e0c4 <mmc_slow>:
    e0c4:	80 e2       	ldi	r24, 0x20	; 32
    e0c6:	91 ea       	ldi	r25, 0xA1	; 161
    e0c8:	a7 e0       	ldi	r26, 0x07	; 7
    e0ca:	b0 e0       	ldi	r27, 0x00	; 0
    e0cc:	80 93 38 18 	sts	0x1838, r24	; 0x801838 <_mmc_clock>
    e0d0:	90 93 39 18 	sts	0x1839, r25	; 0x801839 <_mmc_clock+0x1>
    e0d4:	a0 93 3a 18 	sts	0x183A, r26	; 0x80183a <_mmc_clock+0x2>
    e0d8:	b0 93 3b 18 	sts	0x183B, r27	; 0x80183b <_mmc_clock+0x3>
    e0dc:	08 95       	ret

0000e0de <mmc_spi_init>:
    e0de:	8b e0       	ldi	r24, 0x0B	; 11
    e0e0:	0e 94 92 27 	call	0x4f24	; 0x4f24 <chip_select_init>
    e0e4:	ef cf       	rjmp	.-34     	; 0xe0c4 <mmc_slow>
    e0e6:	08 95       	ret

0000e0e8 <mmc_fast>:
    e0e8:	80 ea       	ldi	r24, 0xA0	; 160
    e0ea:	95 e2       	ldi	r25, 0x25	; 37
    e0ec:	a6 e2       	ldi	r26, 0x26	; 38
    e0ee:	b0 e0       	ldi	r27, 0x00	; 0
    e0f0:	80 93 38 18 	sts	0x1838, r24	; 0x801838 <_mmc_clock>
    e0f4:	90 93 39 18 	sts	0x1839, r25	; 0x801839 <_mmc_clock+0x1>
    e0f8:	a0 93 3a 18 	sts	0x183A, r26	; 0x80183a <_mmc_clock+0x2>
    e0fc:	b0 93 3b 18 	sts	0x183B, r27	; 0x80183b <_mmc_clock+0x3>
    e100:	08 95       	ret

0000e102 <mmc_spi_TX_buffer>:
    e102:	0c 94 c4 27 	jmp	0x4f88	; 0x4f88 <spi_TX_buffer>
    e106:	08 95       	ret

0000e108 <mmc_spi_RX_buffer>:
    e108:	0c 94 c6 27 	jmp	0x4f8c	; 0x4f8c <spi_RX_buffer>
    e10c:	08 95       	ret

0000e10e <mmc_spi_TXRX>:
    e10e:	0c 94 40 28 	jmp	0x5080	; 0x5080 <spi_TXRX>
    e112:	08 95       	ret

0000e114 <mmc_set_ms_timeout>:
    e114:	f8 94       	cli
    e116:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <_mmc_timeout+0x1>
    e11a:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <_mmc_timeout>
    e11e:	78 94       	sei
    e120:	08 95       	ret

0000e122 <mmc_test_timeout>:
    e122:	00 d0       	rcall	.+0      	; 0xe124 <mmc_test_timeout+0x2>
    e124:	1f 92       	push	r1
    e126:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    e12a:	81 fd       	sbrc	r24, 1
    e12c:	15 c0       	rjmp	.+42     	; 0xe158 <mmc_test_timeout+0x36>
    e12e:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <_mmc_timeout>
    e132:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <_mmc_timeout+0x1>
    e136:	89 2b       	or	r24, r25
    e138:	91 f4       	brne	.+36     	; 0xe15e <mmc_test_timeout+0x3c>
    e13a:	80 e3       	ldi	r24, 0x30	; 48
    e13c:	99 e0       	ldi	r25, 0x09	; 9
    e13e:	a0 e0       	ldi	r26, 0x00	; 0
    e140:	ed b7       	in	r30, 0x3d	; 61
    e142:	fe b7       	in	r31, 0x3e	; 62
    e144:	81 83       	std	Z+1, r24	; 0x01
    e146:	92 83       	std	Z+2, r25	; 0x02
    e148:	a3 83       	std	Z+3, r26	; 0x03
    e14a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    e14e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    e152:	83 60       	ori	r24, 0x03	; 3
    e154:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    e158:	81 e0       	ldi	r24, 0x01	; 1
    e15a:	90 e0       	ldi	r25, 0x00	; 0
    e15c:	02 c0       	rjmp	.+4      	; 0xe162 <mmc_test_timeout+0x40>
    e15e:	80 e0       	ldi	r24, 0x00	; 0
    e160:	90 e0       	ldi	r25, 0x00	; 0
    e162:	0f 90       	pop	r0
    e164:	0f 90       	pop	r0
    e166:	0f 90       	pop	r0
    e168:	08 95       	ret

0000e16a <mmc_power_on>:
    e16a:	08 95       	ret

0000e16c <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e16c:	08 95       	ret

0000e16e <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    e16e:	3f 98       	cbi	0x07, 7	; 7
    e170:	86 b1       	in	r24, 0x06	; 6
    e172:	08 2e       	mov	r0, r24
    e174:	00 0c       	add	r0, r0
    e176:	99 0b       	sbc	r25, r25
    e178:	80 95       	com	r24
    e17a:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    e17c:	89 2f       	mov	r24, r25
    e17e:	88 1f       	adc	r24, r24
    e180:	88 27       	eor	r24, r24
    e182:	88 1f       	adc	r24, r24
    e184:	90 e0       	ldi	r25, 0x00	; 0
    e186:	08 95       	ret

0000e188 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    e188:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <_mmc_timeout>
    e18c:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <_mmc_timeout+0x1>
    e190:	00 97       	sbiw	r24, 0x00	; 0
    e192:	29 f0       	breq	.+10     	; 0xe19e <mmc_task+0x16>
        _mmc_timeout--;
    e194:	01 97       	sbiw	r24, 0x01	; 1
    e196:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <_mmc_timeout+0x1>
    e19a:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    e19e:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_pre>
    e1a2:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_pre+0x1>
    e1a6:	8a 30       	cpi	r24, 0x0A	; 10
    e1a8:	91 05       	cpc	r25, r1
    e1aa:	30 f4       	brcc	.+12     	; 0xe1b8 <mmc_task+0x30>
    e1ac:	01 96       	adiw	r24, 0x01	; 1
    e1ae:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_pre+0x1>
    e1b2:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_pre>
    e1b6:	08 95       	ret
        return;

    _mmc_pre = 0;
    e1b8:	10 92 37 18 	sts	0x1837, r1	; 0x801837 <_mmc_pre+0x1>
    e1bc:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_mmc_pre>

	if(!mmc_ins_status())
    e1c0:	d6 df       	rcall	.-84     	; 0xe16e <mmc_ins_status>
    e1c2:	89 2b       	or	r24, r25
		set_error(1);
    e1c4:	19 f4       	brne	.+6      	; 0xe1cc <mmc_task+0x44>
    e1c6:	81 e0       	ldi	r24, 0x01	; 1

    mmc_disk_timerproc();
    e1c8:	0e 94 51 28 	call	0x50a2	; 0x50a2 <set_error>
    e1cc:	30 cf       	rjmp	.-416    	; 0xe02e <mmc_disk_timerproc>
    e1ce:	08 95       	ret

0000e1d0 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e1d0:	ab e0       	ldi	r26, 0x0B	; 11
    e1d2:	b0 e0       	ldi	r27, 0x00	; 0
    e1d4:	ee ee       	ldi	r30, 0xEE	; 238
    e1d6:	f0 e7       	ldi	r31, 0x70	; 112
    e1d8:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
    e1dc:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e1de:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    e1e2:	0e 94 56 28 	call	0x50ac	; 0x50ac <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    e1e6:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);

    mmc_spi_init();
    e1e8:	3f 98       	cbi	0x07, 7	; 7

    if( verbose)
    e1ea:	79 df       	rcall	.-270    	; 0xe0de <mmc_spi_init>
    e1ec:	e1 14       	cp	r14, r1
    e1ee:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e1f0:	51 f0       	breq	.+20     	; 0xe206 <mmc_init+0x36>
    e1f2:	80 e2       	ldi	r24, 0x20	; 32
    e1f4:	99 e0       	ldi	r25, 0x09	; 9
    e1f6:	a0 e0       	ldi	r26, 0x00	; 0
    e1f8:	ed b7       	in	r30, 0x3d	; 61
    e1fa:	fe b7       	in	r31, 0x3e	; 62
    e1fc:	81 83       	std	Z+1, r24	; 0x01
    e1fe:	92 83       	std	Z+2, r25	; 0x02
    e200:	a3 83       	std	Z+3, r26	; 0x03
    e202:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    e206:	80 91 34 18 	lds	r24, 0x1834	; 0x801834 <mmc_init_flag>
    e20a:	90 91 35 18 	lds	r25, 0x1835	; 0x801835 <mmc_init_flag+0x1>
        mmc_install_timer();

	if(!mmc_ins_status())
    e20e:	89 2b       	or	r24, r25
    e210:	09 f4       	brne	.+2      	; 0xe214 <mmc_init+0x44>
    e212:	2b df       	rcall	.-426    	; 0xe06a <mmc_install_timer>
    e214:	ac df       	rcall	.-168    	; 0xe16e <mmc_ins_status>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    e216:	89 2b       	or	r24, r25
    e218:	61 f4       	brne	.+24     	; 0xe232 <mmc_init+0x62>
    e21a:	80 e0       	ldi	r24, 0x00	; 0
    e21c:	99 e0       	ldi	r25, 0x09	; 9
    e21e:	a0 e0       	ldi	r26, 0x00	; 0
    e220:	ed b7       	in	r30, 0x3d	; 61
    e222:	fe b7       	in	r31, 0x3e	; 62
    e224:	81 83       	std	Z+1, r24	; 0x01
    e226:	92 83       	std	Z+2, r25	; 0x02
    e228:	a3 83       	std	Z+3, r26	; 0x03
		return(RES_NOTRDY);	
    e22a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
	}


    if( verbose)
    e22e:	83 e0       	ldi	r24, 0x03	; 3
    e230:	8b c0       	rjmp	.+278    	; 0xe348 <mmc_init+0x178>
    e232:	e1 14       	cp	r14, r1
    {
		printf("MMC Card Inserted\n");
    e234:	f1 04       	cpc	r15, r1
    e236:	11 f1       	breq	.+68     	; 0xe27c <mmc_init+0xac>
    e238:	8d ee       	ldi	r24, 0xED	; 237
    e23a:	98 e0       	ldi	r25, 0x08	; 8
    e23c:	a0 e0       	ldi	r26, 0x00	; 0
    e23e:	ed b7       	in	r30, 0x3d	; 61
    e240:	fe b7       	in	r31, 0x3e	; 62
    e242:	81 83       	std	Z+1, r24	; 0x01
    e244:	92 83       	std	Z+2, r25	; 0x02
    e246:	a3 83       	std	Z+3, r26	; 0x03

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e248:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    e24c:	81 ee       	ldi	r24, 0xE1	; 225
    e24e:	98 e0       	ldi	r25, 0x08	; 8
    e250:	a0 e0       	ldi	r26, 0x00	; 0
    e252:	ed b7       	in	r30, 0x3d	; 61
    e254:	fe b7       	in	r31, 0x3e	; 62
    e256:	81 83       	std	Z+1, r24	; 0x01
    e258:	92 83       	std	Z+2, r25	; 0x02
    e25a:	a3 83       	std	Z+3, r26	; 0x03
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e25c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    e260:	85 eb       	ldi	r24, 0xB5	; 181
    e262:	91 e0       	ldi	r25, 0x01	; 1
    e264:	ed b7       	in	r30, 0x3d	; 61
    e266:	fe b7       	in	r31, 0x3e	; 62
    e268:	95 83       	std	Z+5, r25	; 0x05
    e26a:	84 83       	std	Z+4, r24	; 0x04
    e26c:	80 ed       	ldi	r24, 0xD0	; 208
    e26e:	98 e0       	ldi	r25, 0x08	; 8
    e270:	a0 e0       	ldi	r26, 0x00	; 0
    e272:	81 83       	std	Z+1, r24	; 0x01
    e274:	92 83       	std	Z+2, r25	; 0x02
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    e276:	a3 83       	std	Z+3, r26	; 0x03
    e278:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    e27c:	80 e0       	ldi	r24, 0x00	; 0

    if( rc != RES_OK  )
    e27e:	1d da       	rcall	.-3014   	; 0xd6ba <disk_initialize>
    e280:	08 2f       	mov	r16, r24
        put_rc(rc);
    e282:	10 e0       	ldi	r17, 0x00	; 0
    e284:	01 15       	cp	r16, r1
    e286:	11 05       	cpc	r17, r1
    e288:	19 f0       	breq	.+6      	; 0xe290 <mmc_init+0xc0>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e28a:	c8 01       	movw	r24, r16
    e28c:	e4 d0       	rcall	.+456    	; 0xe456 <put_rc>
    e28e:	0e c0       	rjmp	.+28     	; 0xe2ac <mmc_init+0xdc>
    e290:	40 e0       	ldi	r20, 0x00	; 0
    e292:	61 ea       	ldi	r22, 0xA1	; 161
    e294:	78 e0       	ldi	r23, 0x08	; 8
    e296:	8c e8       	ldi	r24, 0x8C	; 140
    e298:	9a e1       	ldi	r25, 0x1A	; 26

    if( rc != RES_OK || verbose)
    e29a:	0e 94 15 5b 	call	0xb62a	; 0xb62a <f_mount>
    e29e:	8c 01       	movw	r16, r24
    e2a0:	89 2b       	or	r24, r25
        put_rc( rc );
    e2a2:	21 f4       	brne	.+8      	; 0xe2ac <mmc_init+0xdc>
    e2a4:	e1 14       	cp	r14, r1
    e2a6:	f1 04       	cpc	r15, r1

    if (verbose )
    e2a8:	09 f4       	brne	.+2      	; 0xe2ac <mmc_init+0xdc>
    e2aa:	40 c0       	rjmp	.+128    	; 0xe32c <mmc_init+0x15c>
    e2ac:	c8 01       	movw	r24, r16
    {
        DWORD blksize = 0;
    e2ae:	d3 d0       	rcall	.+422    	; 0xe456 <put_rc>
    e2b0:	e1 14       	cp	r14, r1
    e2b2:	f1 04       	cpc	r15, r1
    e2b4:	d9 f1       	breq	.+118    	; 0xe32c <mmc_init+0x15c>
        if(rc == RES_OK)
    e2b6:	18 86       	std	Y+8, r1	; 0x08
    e2b8:	19 86       	std	Y+9, r1	; 0x09
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e2ba:	1a 86       	std	Y+10, r1	; 0x0a
    e2bc:	1b 86       	std	Y+11, r1	; 0x0b
    e2be:	01 15       	cp	r16, r1
    e2c0:	11 05       	cpc	r17, r1
    e2c2:	51 f5       	brne	.+84     	; 0xe318 <mmc_init+0x148>
    e2c4:	ae 01       	movw	r20, r28
    e2c6:	48 5f       	subi	r20, 0xF8	; 248
            if( rc != RES_OK)
    e2c8:	5f 4f       	sbci	r21, 0xFF	; 255
    e2ca:	63 e0       	ldi	r22, 0x03	; 3
            {
                put_rc( rc );
    e2cc:	80 e0       	ldi	r24, 0x00	; 0
    e2ce:	1b da       	rcall	.-3018   	; 0xd706 <disk_ioctl>
                printf("MMC Block Size - read failed\n");
    e2d0:	8c 01       	movw	r16, r24
    e2d2:	00 97       	sbiw	r24, 0x00	; 0
    e2d4:	61 f0       	breq	.+24     	; 0xe2ee <mmc_init+0x11e>
    e2d6:	bf d0       	rcall	.+382    	; 0xe456 <put_rc>
    e2d8:	82 eb       	ldi	r24, 0xB2	; 178
    e2da:	98 e0       	ldi	r25, 0x08	; 8
    e2dc:	a0 e0       	ldi	r26, 0x00	; 0
    e2de:	ed b7       	in	r30, 0x3d	; 61
    e2e0:	fe b7       	in	r31, 0x3e	; 62
    e2e2:	81 83       	std	Z+1, r24	; 0x01
    e2e4:	92 83       	std	Z+2, r25	; 0x02
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e2e6:	a3 83       	std	Z+3, r26	; 0x03
    e2e8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    e2ec:	15 c0       	rjmp	.+42     	; 0xe318 <mmc_init+0x148>
    e2ee:	88 85       	ldd	r24, Y+8	; 0x08
    e2f0:	99 85       	ldd	r25, Y+9	; 0x09
    e2f2:	aa 85       	ldd	r26, Y+10	; 0x0a
    e2f4:	bb 85       	ldd	r27, Y+11	; 0x0b
    e2f6:	ed b7       	in	r30, 0x3d	; 61
    e2f8:	fe b7       	in	r31, 0x3e	; 62
    e2fa:	84 83       	std	Z+4, r24	; 0x04
    e2fc:	95 83       	std	Z+5, r25	; 0x05
    e2fe:	a6 83       	std	Z+6, r26	; 0x06
    e300:	b7 83       	std	Z+7, r27	; 0x07
    e302:	8d e9       	ldi	r24, 0x9D	; 157
    e304:	98 e0       	ldi	r25, 0x08	; 8
    e306:	a0 e0       	ldi	r26, 0x00	; 0
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e308:	81 83       	std	Z+1, r24	; 0x01
    e30a:	92 83       	std	Z+2, r25	; 0x02
    e30c:	a3 83       	std	Z+3, r26	; 0x03
    e30e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            }
        }
        printf("END MMC INIT\n");
    e312:	81 ea       	ldi	r24, 0xA1	; 161
    e314:	98 e0       	ldi	r25, 0x08	; 8
    e316:	33 d1       	rcall	.+614    	; 0xe57e <fatfs_status>
    e318:	8f e8       	ldi	r24, 0x8F	; 143
    e31a:	98 e0       	ldi	r25, 0x08	; 8
    e31c:	a0 e0       	ldi	r26, 0x00	; 0
    e31e:	ed b7       	in	r30, 0x3d	; 61
    e320:	fe b7       	in	r31, 0x3e	; 62
    e322:	81 83       	std	Z+1, r24	; 0x01
    }
    mmc_init_flag = 1;
    e324:	92 83       	std	Z+2, r25	; 0x02
    e326:	a3 83       	std	Z+3, r26	; 0x03
    e328:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    e32c:	81 e0       	ldi	r24, 0x01	; 1
    e32e:	90 e0       	ldi	r25, 0x00	; 0

	if(rc != RES_OK)
    e330:	90 93 35 18 	sts	0x1835, r25	; 0x801835 <mmc_init_flag+0x1>
    e334:	80 93 34 18 	sts	0x1834, r24	; 0x801834 <mmc_init_flag>
		set_error(1);
    e338:	01 15       	cp	r16, r1
    e33a:	11 05       	cpc	r17, r1
    e33c:	21 f0       	breq	.+8      	; 0xe346 <mmc_init+0x176>
    e33e:	0e 94 51 28 	call	0x50a2	; 0x50a2 <set_error>

    return( rc ) ;
}
    e342:	c8 01       	movw	r24, r16
    e344:	02 c0       	rjmp	.+4      	; 0xe34a <mmc_init+0x17a>
    e346:	80 e0       	ldi	r24, 0x00	; 0
    e348:	90 e0       	ldi	r25, 0x00	; 0
    e34a:	2b 96       	adiw	r28, 0x0b	; 11
    e34c:	e6 e0       	ldi	r30, 0x06	; 6
    e34e:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

0000e352 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e352:	80 e0       	ldi	r24, 0x00	; 0
    e354:	90 e0       	ldi	r25, 0x00	; 0
    e356:	08 95       	ret

0000e358 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e358:	0f 93       	push	r16
    e35a:	1f 93       	push	r17
    e35c:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e35e:	46 81       	ldd	r20, Z+6	; 0x06
    e360:	57 81       	ldd	r21, Z+7	; 0x07
    e362:	05 2e       	mov	r0, r21
    e364:	00 0c       	add	r0, r0
    e366:	66 0b       	sbc	r22, r22
    e368:	77 0b       	sbc	r23, r23
    e36a:	ba 01       	movw	r22, r20
    e36c:	55 27       	eor	r21, r21
    e36e:	44 27       	eor	r20, r20
    e370:	84 81       	ldd	r24, Z+4	; 0x04
    e372:	95 81       	ldd	r25, Z+5	; 0x05
    e374:	09 2e       	mov	r0, r25
    e376:	00 0c       	add	r0, r0
    e378:	aa 0b       	sbc	r26, r26
    e37a:	bb 0b       	sbc	r27, r27
    e37c:	2b e0       	ldi	r18, 0x0B	; 11
    e37e:	88 0f       	add	r24, r24
    e380:	99 1f       	adc	r25, r25
    e382:	aa 1f       	adc	r26, r26
    e384:	bb 1f       	adc	r27, r27
    e386:	2a 95       	dec	r18
    e388:	d1 f7       	brne	.-12     	; 0xe37e <tm_to_fat+0x26>
    e38a:	48 2b       	or	r20, r24
    e38c:	59 2b       	or	r21, r25
    e38e:	6a 2b       	or	r22, r26
    e390:	7b 2b       	or	r23, r27
    e392:	82 81       	ldd	r24, Z+2	; 0x02
    e394:	93 81       	ldd	r25, Z+3	; 0x03
    e396:	09 2e       	mov	r0, r25
    e398:	00 0c       	add	r0, r0
    e39a:	aa 0b       	sbc	r26, r26
    e39c:	bb 0b       	sbc	r27, r27
    e39e:	35 e0       	ldi	r19, 0x05	; 5
    e3a0:	88 0f       	add	r24, r24
    e3a2:	99 1f       	adc	r25, r25
    e3a4:	aa 1f       	adc	r26, r26
    e3a6:	bb 1f       	adc	r27, r27
    e3a8:	3a 95       	dec	r19
    e3aa:	d1 f7       	brne	.-12     	; 0xe3a0 <tm_to_fat+0x48>
    e3ac:	48 2b       	or	r20, r24
    e3ae:	59 2b       	or	r21, r25
    e3b0:	6a 2b       	or	r22, r26
    e3b2:	7b 2b       	or	r23, r27
    e3b4:	80 81       	ld	r24, Z
    e3b6:	91 81       	ldd	r25, Z+1	; 0x01
    e3b8:	09 2e       	mov	r0, r25
    e3ba:	00 0c       	add	r0, r0
    e3bc:	aa 0b       	sbc	r26, r26
    e3be:	bb 0b       	sbc	r27, r27
    e3c0:	b6 95       	lsr	r27
    e3c2:	a7 95       	ror	r26
    e3c4:	97 95       	ror	r25
    e3c6:	87 95       	ror	r24
    e3c8:	84 2b       	or	r24, r20
    e3ca:	95 2b       	or	r25, r21
    e3cc:	a6 2b       	or	r26, r22
    e3ce:	b7 2b       	or	r27, r23
    e3d0:	02 85       	ldd	r16, Z+10	; 0x0a
    e3d2:	13 85       	ldd	r17, Z+11	; 0x0b
    e3d4:	00 55       	subi	r16, 0x50	; 80
    e3d6:	11 09       	sbc	r17, r1
    e3d8:	01 2e       	mov	r0, r17
    e3da:	00 0c       	add	r0, r0
    e3dc:	22 0b       	sbc	r18, r18
    e3de:	33 0b       	sbc	r19, r19
    e3e0:	49 e1       	ldi	r20, 0x19	; 25
    e3e2:	00 0f       	add	r16, r16
    e3e4:	11 1f       	adc	r17, r17
    e3e6:	22 1f       	adc	r18, r18
    e3e8:	33 1f       	adc	r19, r19
    e3ea:	4a 95       	dec	r20
    e3ec:	d1 f7       	brne	.-12     	; 0xe3e2 <tm_to_fat+0x8a>
    e3ee:	ac 01       	movw	r20, r24
    e3f0:	bd 01       	movw	r22, r26
    e3f2:	40 2b       	or	r20, r16
    e3f4:	51 2b       	or	r21, r17
    e3f6:	62 2b       	or	r22, r18
    e3f8:	73 2b       	or	r23, r19
    e3fa:	80 85       	ldd	r24, Z+8	; 0x08
    e3fc:	91 85       	ldd	r25, Z+9	; 0x09
    e3fe:	09 2e       	mov	r0, r25
    e400:	00 0c       	add	r0, r0
    e402:	aa 0b       	sbc	r26, r26
    e404:	bb 0b       	sbc	r27, r27
    e406:	01 96       	adiw	r24, 0x01	; 1
    e408:	a1 1d       	adc	r26, r1
    e40a:	b1 1d       	adc	r27, r1
    e40c:	e5 e1       	ldi	r30, 0x15	; 21
    e40e:	88 0f       	add	r24, r24
    e410:	99 1f       	adc	r25, r25
    e412:	aa 1f       	adc	r26, r26
    e414:	bb 1f       	adc	r27, r27
    e416:	ea 95       	dec	r30
    e418:	d1 f7       	brne	.-12     	; 0xe40e <tm_to_fat+0xb6>
    e41a:	8a 01       	movw	r16, r20
    e41c:	9b 01       	movw	r18, r22
    e41e:	08 2b       	or	r16, r24
    e420:	19 2b       	or	r17, r25
    e422:	2a 2b       	or	r18, r26
    e424:	3b 2b       	or	r19, r27
    e426:	c9 01       	movw	r24, r18
    e428:	b8 01       	movw	r22, r16
}
    e42a:	1f 91       	pop	r17
    e42c:	0f 91       	pop	r16
    e42e:	08 95       	ret

0000e430 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e430:	a4 e0       	ldi	r26, 0x04	; 4
    e432:	b0 e0       	ldi	r27, 0x00	; 0
    e434:	ee e1       	ldi	r30, 0x1E	; 30
    e436:	f2 e7       	ldi	r31, 0x72	; 114
    e438:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e43c:	ce 01       	movw	r24, r28
    e43e:	01 96       	adiw	r24, 0x01	; 1
    e440:	0e 94 58 39 	call	0x72b0	; 0x72b0 <time>
    return( tm_to_fat(localtime(&t)));
    e444:	ce 01       	movw	r24, r28
    e446:	01 96       	adiw	r24, 0x01	; 1
    e448:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <localtime>
    e44c:	85 df       	rcall	.-246    	; 0xe358 <tm_to_fat>
}
    e44e:	24 96       	adiw	r28, 0x04	; 4
    e450:	e2 e0       	ldi	r30, 0x02	; 2
    e452:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0000e456 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e456:	00 d0       	rcall	.+0      	; 0xe458 <put_rc+0x2>
    e458:	00 d0       	rcall	.+0      	; 0xe45a <put_rc+0x4>
    e45a:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e45c:	ed b7       	in	r30, 0x3d	; 61
    e45e:	fe b7       	in	r31, 0x3e	; 62
    e460:	95 83       	std	Z+5, r25	; 0x05
    e462:	84 83       	std	Z+4, r24	; 0x04
    e464:	8d e4       	ldi	r24, 0x4D	; 77
    e466:	9b e0       	ldi	r25, 0x0B	; 11
    e468:	a0 e0       	ldi	r26, 0x00	; 0
    e46a:	81 83       	std	Z+1, r24	; 0x01
    e46c:	92 83       	std	Z+2, r25	; 0x02
    e46e:	a3 83       	std	Z+3, r26	; 0x03
    e470:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
}
    e474:	0f 90       	pop	r0
    e476:	0f 90       	pop	r0
    e478:	0f 90       	pop	r0
    e47a:	0f 90       	pop	r0
    e47c:	0f 90       	pop	r0
    e47e:	08 95       	ret

0000e480 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e480:	a4 e4       	ldi	r26, 0x44	; 68
    e482:	b1 e0       	ldi	r27, 0x01	; 1
    e484:	e6 e4       	ldi	r30, 0x46	; 70
    e486:	f2 e7       	ldi	r31, 0x72	; 114
    e488:	0c 94 f4 e3 	jmp	0x1c7e8	; 0x1c7e8 <__prologue_saves__+0x16>
    e48c:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e48e:	bc 01       	movw	r22, r24
    e490:	ce 01       	movw	r24, r28
    e492:	89 5e       	subi	r24, 0xE9	; 233
    e494:	9e 4f       	sbci	r25, 0xFE	; 254
    e496:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <f_opendir>
    if (fr == FR_OK)
    e49a:	00 97       	sbiw	r24, 0x00	; 0
    e49c:	09 f0       	breq	.+2      	; 0xe4a0 <fatfs_scan_files+0x20>
    e49e:	5b c0       	rjmp	.+182    	; 0xe556 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e4a0:	8f e2       	ldi	r24, 0x2F	; 47
    e4a2:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e4a4:	be 01       	movw	r22, r28
    e4a6:	6f 5f       	subi	r22, 0xFF	; 255
    e4a8:	7f 4f       	sbci	r23, 0xFF	; 255
    e4aa:	ce 01       	movw	r24, r28
    e4ac:	89 5e       	subi	r24, 0xE9	; 233
    e4ae:	9e 4f       	sbci	r25, 0xFE	; 254
    e4b0:	0e 94 57 65 	call	0xcaae	; 0xcaae <f_readdir>
    e4b4:	00 97       	sbiw	r24, 0x00	; 0
    e4b6:	09 f0       	breq	.+2      	; 0xe4ba <fatfs_scan_files+0x3a>
    e4b8:	4e c0       	rjmp	.+156    	; 0xe556 <fatfs_scan_files+0xd6>
    e4ba:	2f 89       	ldd	r18, Y+23	; 0x17
    e4bc:	22 23       	and	r18, r18
    e4be:	09 f4       	brne	.+2      	; 0xe4c2 <fatfs_scan_files+0x42>
    e4c0:	4a c0       	rjmp	.+148    	; 0xe556 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e4c2:	89 85       	ldd	r24, Y+9	; 0x09
    e4c4:	84 ff       	sbrs	r24, 4
    e4c6:	25 c0       	rjmp	.+74     	; 0xe512 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e4c8:	80 91 c5 1c 	lds	r24, 0x1CC5	; 0x801cc5 <AccDirs>
    e4cc:	90 91 c6 1c 	lds	r25, 0x1CC6	; 0x801cc6 <AccDirs+0x1>
    e4d0:	01 96       	adiw	r24, 0x01	; 1
    e4d2:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <AccDirs+0x1>
    e4d6:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <AccDirs>
                i = strlen(path);
    e4da:	f8 01       	movw	r30, r16
    e4dc:	01 90       	ld	r0, Z+
    e4de:	00 20       	and	r0, r0
    e4e0:	e9 f7       	brne	.-6      	; 0xe4dc <fatfs_scan_files+0x5c>
    e4e2:	31 97       	sbiw	r30, 0x01	; 1
    e4e4:	e0 1b       	sub	r30, r16
    e4e6:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e4e8:	78 01       	movw	r14, r16
    e4ea:	ee 0e       	add	r14, r30
    e4ec:	ff 1e       	adc	r15, r31
    e4ee:	d7 01       	movw	r26, r14
    e4f0:	dc 92       	st	X, r13
    e4f2:	cf 01       	movw	r24, r30
    e4f4:	01 96       	adiw	r24, 0x01	; 1
    e4f6:	be 01       	movw	r22, r28
    e4f8:	69 5e       	subi	r22, 0xE9	; 233
    e4fa:	7f 4f       	sbci	r23, 0xFF	; 255
    e4fc:	80 0f       	add	r24, r16
    e4fe:	91 1f       	adc	r25, r17
    e500:	0e 94 97 32 	call	0x652e	; 0x652e <strcpy>
                fr = fatfs_scan_files(path);
    e504:	c8 01       	movw	r24, r16
    e506:	bc df       	rcall	.-136    	; 0xe480 <fatfs_scan_files>
                path[i] = 0;
    e508:	f7 01       	movw	r30, r14
    e50a:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e50c:	00 97       	sbiw	r24, 0x00	; 0
    e50e:	51 f2       	breq	.-108    	; 0xe4a4 <fatfs_scan_files+0x24>
    e510:	22 c0       	rjmp	.+68     	; 0xe556 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e512:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <AccFiles>
    e516:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <AccFiles+0x1>
    e51a:	01 96       	adiw	r24, 0x01	; 1
    e51c:	90 93 c8 1c 	sts	0x1CC8, r25	; 0x801cc8 <AccFiles+0x1>
    e520:	80 93 c7 1c 	sts	0x1CC7, r24	; 0x801cc7 <AccFiles>
                AccSize += info.fsize;
    e524:	40 91 c1 1c 	lds	r20, 0x1CC1	; 0x801cc1 <AccSize>
    e528:	50 91 c2 1c 	lds	r21, 0x1CC2	; 0x801cc2 <AccSize+0x1>
    e52c:	60 91 c3 1c 	lds	r22, 0x1CC3	; 0x801cc3 <AccSize+0x2>
    e530:	70 91 c4 1c 	lds	r23, 0x1CC4	; 0x801cc4 <AccSize+0x3>
    e534:	89 81       	ldd	r24, Y+1	; 0x01
    e536:	9a 81       	ldd	r25, Y+2	; 0x02
    e538:	ab 81       	ldd	r26, Y+3	; 0x03
    e53a:	bc 81       	ldd	r27, Y+4	; 0x04
    e53c:	84 0f       	add	r24, r20
    e53e:	95 1f       	adc	r25, r21
    e540:	a6 1f       	adc	r26, r22
    e542:	b7 1f       	adc	r27, r23
    e544:	80 93 c1 1c 	sts	0x1CC1, r24	; 0x801cc1 <AccSize>
    e548:	90 93 c2 1c 	sts	0x1CC2, r25	; 0x801cc2 <AccSize+0x1>
    e54c:	a0 93 c3 1c 	sts	0x1CC3, r26	; 0x801cc3 <AccSize+0x2>
    e550:	b0 93 c4 1c 	sts	0x1CC4, r27	; 0x801cc4 <AccSize+0x3>
    e554:	a7 cf       	rjmp	.-178    	; 0xe4a4 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e556:	cc 5b       	subi	r28, 0xBC	; 188
    e558:	de 4f       	sbci	r29, 0xFE	; 254
    e55a:	e7 e0       	ldi	r30, 0x07	; 7
    e55c:	0c 94 10 e4 	jmp	0x1c820	; 0x1c820 <__epilogue_restores__+0x16>

0000e560 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e560:	01 97       	sbiw	r24, 0x01	; 1
    e562:	84 30       	cpi	r24, 0x04	; 4
    e564:	91 05       	cpc	r25, r1
    e566:	40 f4       	brcc	.+16     	; 0xe578 <fatfs_fstype+0x18>
    e568:	88 0f       	add	r24, r24
    e56a:	99 1f       	adc	r25, r25
    e56c:	fc 01       	movw	r30, r24
    e56e:	eb 53       	subi	r30, 0x3B	; 59
    e570:	f7 4f       	sbci	r31, 0xF7	; 247
    e572:	80 81       	ld	r24, Z
    e574:	91 81       	ldd	r25, Z+1	; 0x01
    e576:	08 95       	ret
    char *ptr;
    switch(type)
    e578:	83 ea       	ldi	r24, 0xA3	; 163
    e57a:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e57c:	08 95       	ret

0000e57e <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e57e:	a7 e3       	ldi	r26, 0x37	; 55
    e580:	b0 e0       	ldi	r27, 0x00	; 0
    e582:	e5 ec       	ldi	r30, 0xC5	; 197
    e584:	f2 e7       	ldi	r31, 0x72	; 114
    e586:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    e58a:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e58c:	fc 01       	movw	r30, r24
    e58e:	21 91       	ld	r18, Z+
    e590:	cf 01       	movw	r24, r30
    e592:	20 32       	cpi	r18, 0x20	; 32
    e594:	d1 f3       	breq	.-12     	; 0xe58a <fatfs_status+0xc>
    e596:	29 30       	cpi	r18, 0x09	; 9
    e598:	c1 f3       	breq	.-16     	; 0xe58a <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e59a:	ed b7       	in	r30, 0x3d	; 61
    e59c:	fe b7       	in	r31, 0x3e	; 62
    e59e:	e4 82       	std	Z+4, r14	; 0x04
    e5a0:	f5 82       	std	Z+5, r15	; 0x05
    e5a2:	8c e3       	ldi	r24, 0x3C	; 60
    e5a4:	9b e0       	ldi	r25, 0x0B	; 11
    e5a6:	a0 e0       	ldi	r26, 0x00	; 0
    e5a8:	81 83       	std	Z+1, r24	; 0x01
    e5aa:	92 83       	std	Z+2, r25	; 0x02
    e5ac:	a3 83       	std	Z+3, r26	; 0x03
    e5ae:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e5b2:	ae 01       	movw	r20, r28
    e5b4:	4a 5c       	subi	r20, 0xCA	; 202
    e5b6:	5f 4f       	sbci	r21, 0xFF	; 255
    e5b8:	be 01       	movw	r22, r28
    e5ba:	6e 5c       	subi	r22, 0xCE	; 206
    e5bc:	7f 4f       	sbci	r23, 0xFF	; 255
    e5be:	c7 01       	movw	r24, r14
    e5c0:	0e 94 d9 65 	call	0xcbb2	; 0xcbb2 <f_getfree>
    if (res)
    e5c4:	00 97       	sbiw	r24, 0x00	; 0
    e5c6:	09 f0       	breq	.+2      	; 0xe5ca <fatfs_status+0x4c>
    e5c8:	f8 c0       	rjmp	.+496    	; 0xe7ba <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e5ca:	ee a9       	ldd	r30, Y+54	; 0x36
    e5cc:	ff a9       	ldd	r31, Y+55	; 0x37
    e5ce:	80 81       	ld	r24, Z
    e5d0:	90 e0       	ldi	r25, 0x00	; 0
    e5d2:	c6 df       	rcall	.-116    	; 0xe560 <fatfs_fstype>
    e5d4:	ed b7       	in	r30, 0x3d	; 61
    e5d6:	fe b7       	in	r31, 0x3e	; 62
    e5d8:	95 83       	std	Z+5, r25	; 0x05
    e5da:	84 83       	std	Z+4, r24	; 0x04
    e5dc:	8e e1       	ldi	r24, 0x1E	; 30
    e5de:	9b e0       	ldi	r25, 0x0B	; 11
    e5e0:	a0 e0       	ldi	r26, 0x00	; 0
    e5e2:	81 83       	std	Z+1, r24	; 0x01
    e5e4:	92 83       	std	Z+2, r25	; 0x02
    e5e6:	a3 83       	std	Z+3, r26	; 0x03
    e5e8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e5ec:	ee a9       	ldd	r30, Y+54	; 0x36
    e5ee:	ff a9       	ldd	r31, Y+55	; 0x37
    e5f0:	81 85       	ldd	r24, Z+9	; 0x09
    e5f2:	92 85       	ldd	r25, Z+10	; 0x0a
    e5f4:	a0 e0       	ldi	r26, 0x00	; 0
    e5f6:	b0 e0       	ldi	r27, 0x00	; 0
    e5f8:	39 e0       	ldi	r19, 0x09	; 9
    e5fa:	88 0f       	add	r24, r24
    e5fc:	99 1f       	adc	r25, r25
    e5fe:	aa 1f       	adc	r26, r26
    e600:	bb 1f       	adc	r27, r27
    e602:	3a 95       	dec	r19
    e604:	d1 f7       	brne	.-12     	; 0xe5fa <fatfs_status+0x7c>
    e606:	ed b7       	in	r30, 0x3d	; 61
    e608:	fe b7       	in	r31, 0x3e	; 62
    e60a:	84 83       	std	Z+4, r24	; 0x04
    e60c:	95 83       	std	Z+5, r25	; 0x05
    e60e:	a6 83       	std	Z+6, r26	; 0x06
    e610:	b7 83       	std	Z+7, r27	; 0x07
    e612:	8f ef       	ldi	r24, 0xFF	; 255
    e614:	9a e0       	ldi	r25, 0x0A	; 10
    e616:	a0 e0       	ldi	r26, 0x00	; 0
    e618:	81 83       	std	Z+1, r24	; 0x01
    e61a:	92 83       	std	Z+2, r25	; 0x02
    e61c:	a3 83       	std	Z+3, r26	; 0x03
    e61e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e622:	ee a9       	ldd	r30, Y+54	; 0x36
    e624:	ff a9       	ldd	r31, Y+55	; 0x37
    e626:	82 81       	ldd	r24, Z+2	; 0x02
    e628:	90 e0       	ldi	r25, 0x00	; 0
    e62a:	ed b7       	in	r30, 0x3d	; 61
    e62c:	fe b7       	in	r31, 0x3e	; 62
    e62e:	95 83       	std	Z+5, r25	; 0x05
    e630:	84 83       	std	Z+4, r24	; 0x04
    e632:	81 ee       	ldi	r24, 0xE1	; 225
    e634:	9a e0       	ldi	r25, 0x0A	; 10
    e636:	a0 e0       	ldi	r26, 0x00	; 0
    e638:	81 83       	std	Z+1, r24	; 0x01
    e63a:	92 83       	std	Z+2, r25	; 0x02
    e63c:	a3 83       	std	Z+3, r26	; 0x03
    e63e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e642:	ee a9       	ldd	r30, Y+54	; 0x36
    e644:	ff a9       	ldd	r31, Y+55	; 0x37
    e646:	87 81       	ldd	r24, Z+7	; 0x07
    e648:	90 85       	ldd	r25, Z+8	; 0x08
    e64a:	ed b7       	in	r30, 0x3d	; 61
    e64c:	fe b7       	in	r31, 0x3e	; 62
    e64e:	95 83       	std	Z+5, r25	; 0x05
    e650:	84 83       	std	Z+4, r24	; 0x04
    e652:	83 ec       	ldi	r24, 0xC3	; 195
    e654:	9a e0       	ldi	r25, 0x0A	; 10
    e656:	a0 e0       	ldi	r26, 0x00	; 0
    e658:	81 83       	std	Z+1, r24	; 0x01
    e65a:	92 83       	std	Z+2, r25	; 0x02
    e65c:	a3 83       	std	Z+3, r26	; 0x03
    e65e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e662:	ee a9       	ldd	r30, Y+54	; 0x36
    e664:	ff a9       	ldd	r31, Y+55	; 0x37
    e666:	85 8d       	ldd	r24, Z+29	; 0x1d
    e668:	96 8d       	ldd	r25, Z+30	; 0x1e
    e66a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e66c:	b0 a1       	ldd	r27, Z+32	; 0x20
    e66e:	ed b7       	in	r30, 0x3d	; 61
    e670:	fe b7       	in	r31, 0x3e	; 62
    e672:	84 83       	std	Z+4, r24	; 0x04
    e674:	95 83       	std	Z+5, r25	; 0x05
    e676:	a6 83       	std	Z+6, r26	; 0x06
    e678:	b7 83       	std	Z+7, r27	; 0x07
    e67a:	84 ea       	ldi	r24, 0xA4	; 164
    e67c:	9a e0       	ldi	r25, 0x0A	; 10
    e67e:	a0 e0       	ldi	r26, 0x00	; 0
    e680:	81 83       	std	Z+1, r24	; 0x01
    e682:	92 83       	std	Z+2, r25	; 0x02
    e684:	a3 83       	std	Z+3, r26	; 0x03
    e686:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e68a:	ee a9       	ldd	r30, Y+54	; 0x36
    e68c:	ff a9       	ldd	r31, Y+55	; 0x37
    e68e:	81 8d       	ldd	r24, Z+25	; 0x19
    e690:	92 8d       	ldd	r25, Z+26	; 0x1a
    e692:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e694:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e696:	02 97       	sbiw	r24, 0x02	; 2
    e698:	a1 09       	sbc	r26, r1
    e69a:	b1 09       	sbc	r27, r1
    e69c:	ed b7       	in	r30, 0x3d	; 61
    e69e:	fe b7       	in	r31, 0x3e	; 62
    e6a0:	84 83       	std	Z+4, r24	; 0x04
    e6a2:	95 83       	std	Z+5, r25	; 0x05
    e6a4:	a6 83       	std	Z+6, r26	; 0x06
    e6a6:	b7 83       	std	Z+7, r27	; 0x07
    e6a8:	85 e8       	ldi	r24, 0x85	; 133
    e6aa:	9a e0       	ldi	r25, 0x0A	; 10
    e6ac:	a0 e0       	ldi	r26, 0x00	; 0
    e6ae:	81 83       	std	Z+1, r24	; 0x01
    e6b0:	92 83       	std	Z+2, r25	; 0x02
    e6b2:	a3 83       	std	Z+3, r26	; 0x03
    e6b4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e6b8:	ee a9       	ldd	r30, Y+54	; 0x36
    e6ba:	ff a9       	ldd	r31, Y+55	; 0x37
    e6bc:	85 a1       	ldd	r24, Z+37	; 0x25
    e6be:	96 a1       	ldd	r25, Z+38	; 0x26
    e6c0:	a7 a1       	ldd	r26, Z+39	; 0x27
    e6c2:	b0 a5       	ldd	r27, Z+40	; 0x28
    e6c4:	ed b7       	in	r30, 0x3d	; 61
    e6c6:	fe b7       	in	r31, 0x3e	; 62
    e6c8:	84 83       	std	Z+4, r24	; 0x04
    e6ca:	95 83       	std	Z+5, r25	; 0x05
    e6cc:	a6 83       	std	Z+6, r26	; 0x06
    e6ce:	b7 83       	std	Z+7, r27	; 0x07
    e6d0:	86 e6       	ldi	r24, 0x66	; 102
    e6d2:	9a e0       	ldi	r25, 0x0A	; 10
    e6d4:	a0 e0       	ldi	r26, 0x00	; 0
    e6d6:	81 83       	std	Z+1, r24	; 0x01
    e6d8:	92 83       	std	Z+2, r25	; 0x02
    e6da:	a3 83       	std	Z+3, r26	; 0x03
    e6dc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e6e0:	ee a9       	ldd	r30, Y+54	; 0x36
    e6e2:	ff a9       	ldd	r31, Y+55	; 0x37
    e6e4:	81 a5       	ldd	r24, Z+41	; 0x29
    e6e6:	92 a5       	ldd	r25, Z+42	; 0x2a
    e6e8:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e6ea:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e6ec:	ed b7       	in	r30, 0x3d	; 61
    e6ee:	fe b7       	in	r31, 0x3e	; 62
    e6f0:	84 83       	std	Z+4, r24	; 0x04
    e6f2:	95 83       	std	Z+5, r25	; 0x05
    e6f4:	a6 83       	std	Z+6, r26	; 0x06
    e6f6:	b7 83       	std	Z+7, r27	; 0x07
    e6f8:	87 e4       	ldi	r24, 0x47	; 71
    e6fa:	9a e0       	ldi	r25, 0x0A	; 10
    e6fc:	a0 e0       	ldi	r26, 0x00	; 0
    e6fe:	81 83       	std	Z+1, r24	; 0x01
    e700:	92 83       	std	Z+2, r25	; 0x02
    e702:	a3 83       	std	Z+3, r26	; 0x03
    e704:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e708:	ee a9       	ldd	r30, Y+54	; 0x36
    e70a:	ff a9       	ldd	r31, Y+55	; 0x37
    e70c:	85 a5       	ldd	r24, Z+45	; 0x2d
    e70e:	96 a5       	ldd	r25, Z+46	; 0x2e
    e710:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e712:	b0 a9       	ldd	r27, Z+48	; 0x30
    e714:	ed b7       	in	r30, 0x3d	; 61
    e716:	fe b7       	in	r31, 0x3e	; 62
    e718:	84 83       	std	Z+4, r24	; 0x04
    e71a:	95 83       	std	Z+5, r25	; 0x05
    e71c:	a6 83       	std	Z+6, r26	; 0x06
    e71e:	b7 83       	std	Z+7, r27	; 0x07
    e720:	88 e2       	ldi	r24, 0x28	; 40
    e722:	9a e0       	ldi	r25, 0x0A	; 10
    e724:	a0 e0       	ldi	r26, 0x00	; 0
    e726:	81 83       	std	Z+1, r24	; 0x01
    e728:	92 83       	std	Z+2, r25	; 0x02
    e72a:	a3 83       	std	Z+3, r26	; 0x03
    e72c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e730:	ae 01       	movw	r20, r28
    e732:	42 5d       	subi	r20, 0xD2	; 210
    e734:	5f 4f       	sbci	r21, 0xFF	; 255
    e736:	be 01       	movw	r22, r28
    e738:	6c 5e       	subi	r22, 0xEC	; 236
    e73a:	7f 4f       	sbci	r23, 0xFF	; 255
    e73c:	c7 01       	movw	r24, r14
    e73e:	0e 94 0b 6a 	call	0xd416	; 0xd416 <f_getlabel>
    if (res)
    e742:	00 97       	sbiw	r24, 0x00	; 0
    e744:	d1 f5       	brne	.+116    	; 0xe7ba <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e746:	8c 89       	ldd	r24, Y+20	; 0x14
    e748:	81 11       	cpse	r24, r1
    e74a:	03 c0       	rjmp	.+6      	; 0xe752 <fatfs_status+0x1d4>
    e74c:	8b ea       	ldi	r24, 0xAB	; 171
    e74e:	98 e0       	ldi	r25, 0x08	; 8
    e750:	02 c0       	rjmp	.+4      	; 0xe756 <fatfs_status+0x1d8>
    e752:	ce 01       	movw	r24, r28
    e754:	44 96       	adiw	r24, 0x14	; 20
    e756:	ed b7       	in	r30, 0x3d	; 61
    e758:	fe b7       	in	r31, 0x3e	; 62
    e75a:	95 83       	std	Z+5, r25	; 0x05
    e75c:	84 83       	std	Z+4, r24	; 0x04
    e75e:	8a e0       	ldi	r24, 0x0A	; 10
    e760:	9a e0       	ldi	r25, 0x0A	; 10
    e762:	a0 e0       	ldi	r26, 0x00	; 0
    e764:	81 83       	std	Z+1, r24	; 0x01
    e766:	92 83       	std	Z+2, r25	; 0x02
    e768:	a3 83       	std	Z+3, r26	; 0x03
    e76a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e76e:	8e a5       	ldd	r24, Y+46	; 0x2e
    e770:	9f a5       	ldd	r25, Y+47	; 0x2f
    e772:	a8 a9       	ldd	r26, Y+48	; 0x30
    e774:	b9 a9       	ldd	r27, Y+49	; 0x31
    e776:	ed b7       	in	r30, 0x3d	; 61
    e778:	fe b7       	in	r31, 0x3e	; 62
    e77a:	97 83       	std	Z+7, r25	; 0x07
    e77c:	86 83       	std	Z+6, r24	; 0x06
    e77e:	b5 83       	std	Z+5, r27	; 0x05
    e780:	a4 83       	std	Z+4, r26	; 0x04
    e782:	85 ee       	ldi	r24, 0xE5	; 229
    e784:	99 e0       	ldi	r25, 0x09	; 9
    e786:	a0 e0       	ldi	r26, 0x00	; 0
    e788:	81 83       	std	Z+1, r24	; 0x01
    e78a:	92 83       	std	Z+2, r25	; 0x02
    e78c:	a3 83       	std	Z+3, r26	; 0x03
    e78e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e792:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <AccDirs+0x1>
    e796:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <AccDirs>
    e79a:	10 92 c8 1c 	sts	0x1CC8, r1	; 0x801cc8 <AccFiles+0x1>
    e79e:	10 92 c7 1c 	sts	0x1CC7, r1	; 0x801cc7 <AccFiles>
    e7a2:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <AccSize>
    e7a6:	10 92 c2 1c 	sts	0x1CC2, r1	; 0x801cc2 <AccSize+0x1>
    e7aa:	10 92 c3 1c 	sts	0x1CC3, r1	; 0x801cc3 <AccSize+0x2>
    e7ae:	10 92 c4 1c 	sts	0x1CC4, r1	; 0x801cc4 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    if (res)
    e7b2:	c7 01       	movw	r24, r14
    {
        put_rc(res);
    e7b4:	65 de       	rcall	.-822    	; 0xe480 <fatfs_scan_files>
    e7b6:	00 97       	sbiw	r24, 0x00	; 0
        return;
    e7b8:	11 f0       	breq	.+4      	; 0xe7be <fatfs_status+0x240>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e7ba:	4d de       	rcall	.-870    	; 0xe456 <put_rc>
    e7bc:	56 c0       	rjmp	.+172    	; 0xe86a <fatfs_status+0x2ec>
    e7be:	0e a9       	ldd	r16, Y+54	; 0x36
    e7c0:	1f a9       	ldd	r17, Y+55	; 0x37
    e7c2:	f8 01       	movw	r30, r16
    e7c4:	c1 84       	ldd	r12, Z+9	; 0x09
    e7c6:	d2 84       	ldd	r13, Z+10	; 0x0a
    e7c8:	e1 2c       	mov	r14, r1
    e7ca:	f1 2c       	mov	r15, r1
    e7cc:	6a a9       	ldd	r22, Y+50	; 0x32
    e7ce:	7b a9       	ldd	r23, Y+51	; 0x33
    e7d0:	8c a9       	ldd	r24, Y+52	; 0x34
    e7d2:	9d a9       	ldd	r25, Y+53	; 0x35
    e7d4:	a7 01       	movw	r20, r14
    e7d6:	96 01       	movw	r18, r12
    e7d8:	0e 94 3a e3 	call	0x1c674	; 0x1c674 <__mulsi3>
    e7dc:	22 e0       	ldi	r18, 0x02	; 2
    e7de:	30 e0       	ldi	r19, 0x00	; 0
    e7e0:	40 e0       	ldi	r20, 0x00	; 0
    e7e2:	50 e0       	ldi	r21, 0x00	; 0
    e7e4:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
    e7e8:	ed b7       	in	r30, 0x3d	; 61
    e7ea:	fe b7       	in	r31, 0x3e	; 62
    e7ec:	20 8b       	std	Z+16, r18	; 0x10
    e7ee:	31 8b       	std	Z+17, r19	; 0x11
    e7f0:	42 8b       	std	Z+18, r20	; 0x12
    e7f2:	53 8b       	std	Z+19, r21	; 0x13
    e7f4:	f8 01       	movw	r30, r16
    e7f6:	81 8d       	ldd	r24, Z+25	; 0x19
    e7f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    e7fa:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e7fc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e7fe:	9c 01       	movw	r18, r24
    e800:	ad 01       	movw	r20, r26
    e802:	22 50       	subi	r18, 0x02	; 2
    e804:	31 09       	sbc	r19, r1
    e806:	41 09       	sbc	r20, r1
    e808:	51 09       	sbc	r21, r1
    e80a:	c7 01       	movw	r24, r14
    e80c:	b6 01       	movw	r22, r12
    e80e:	0e 94 3a e3 	call	0x1c674	; 0x1c674 <__mulsi3>
    e812:	dc 01       	movw	r26, r24
    e814:	cb 01       	movw	r24, r22
    e816:	b6 95       	lsr	r27
    e818:	a7 95       	ror	r26
    e81a:	97 95       	ror	r25
    e81c:	87 95       	ror	r24
    e81e:	ed b7       	in	r30, 0x3d	; 61
    e820:	fe b7       	in	r31, 0x3e	; 62
    e822:	84 87       	std	Z+12, r24	; 0x0c
    e824:	95 87       	std	Z+13, r25	; 0x0d
    e826:	a6 87       	std	Z+14, r26	; 0x0e
    e828:	b7 87       	std	Z+15, r27	; 0x0f
    e82a:	80 91 c5 1c 	lds	r24, 0x1CC5	; 0x801cc5 <AccDirs>
    e82e:	90 91 c6 1c 	lds	r25, 0x1CC6	; 0x801cc6 <AccDirs+0x1>
    e832:	93 87       	std	Z+11, r25	; 0x0b
    e834:	82 87       	std	Z+10, r24	; 0x0a
    e836:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <AccSize>
    e83a:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <AccSize+0x1>
    e83e:	a0 91 c3 1c 	lds	r26, 0x1CC3	; 0x801cc3 <AccSize+0x2>
    e842:	b0 91 c4 1c 	lds	r27, 0x1CC4	; 0x801cc4 <AccSize+0x3>
    e846:	86 83       	std	Z+6, r24	; 0x06
    e848:	97 83       	std	Z+7, r25	; 0x07
    e84a:	a0 87       	std	Z+8, r26	; 0x08
    e84c:	b1 87       	std	Z+9, r27	; 0x09
    e84e:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <AccFiles>
    e852:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <AccFiles+0x1>
    e856:	95 83       	std	Z+5, r25	; 0x05
    e858:	84 83       	std	Z+4, r24	; 0x04
    e85a:	88 e9       	ldi	r24, 0x98	; 152
    e85c:	99 e0       	ldi	r25, 0x09	; 9
    e85e:	a0 e0       	ldi	r26, 0x00	; 0
    e860:	81 83       	std	Z+1, r24	; 0x01
    e862:	92 83       	std	Z+2, r25	; 0x02
    e864:	a3 83       	std	Z+3, r26	; 0x03
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e866:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    e86a:	e7 96       	adiw	r28, 0x37	; 55
    e86c:	e8 e0       	ldi	r30, 0x08	; 8
    e86e:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000e872 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e872:	ab e1       	ldi	r26, 0x1B	; 27
    e874:	b0 e0       	ldi	r27, 0x00	; 0
    e876:	ef e3       	ldi	r30, 0x3F	; 63
    e878:	f4 e7       	ldi	r31, 0x74	; 116
    e87a:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    e87e:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e880:	fc 01       	movw	r30, r24
    e882:	86 89       	ldd	r24, Z+22	; 0x16
    e884:	81 11       	cpse	r24, r1
    e886:	03 c0       	rjmp	.+6      	; 0xe88e <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e888:	8d e7       	ldi	r24, 0x7D	; 125
    e88a:	99 e0       	ldi	r25, 0x09	; 9
    e88c:	69 c0       	rjmp	.+210    	; 0xe960 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e88e:	fd 01       	movw	r30, r26
    e890:	80 85       	ldd	r24, Z+8	; 0x08
    e892:	84 fd       	sbrc	r24, 4
    e894:	02 c0       	rjmp	.+4      	; 0xe89a <fatfs_filinfo_list+0x28>
    e896:	9d e2       	ldi	r25, 0x2D	; 45
    e898:	01 c0       	rjmp	.+2      	; 0xe89c <fatfs_filinfo_list+0x2a>
    e89a:	94 e4       	ldi	r25, 0x44	; 68
    e89c:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e89e:	80 fd       	sbrc	r24, 0
    e8a0:	02 c0       	rjmp	.+4      	; 0xe8a6 <fatfs_filinfo_list+0x34>
    e8a2:	9d e2       	ldi	r25, 0x2D	; 45
    e8a4:	01 c0       	rjmp	.+2      	; 0xe8a8 <fatfs_filinfo_list+0x36>
    e8a6:	92 e5       	ldi	r25, 0x52	; 82
    e8a8:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e8aa:	81 fd       	sbrc	r24, 1
    e8ac:	02 c0       	rjmp	.+4      	; 0xe8b2 <fatfs_filinfo_list+0x40>
    e8ae:	9d e2       	ldi	r25, 0x2D	; 45
    e8b0:	01 c0       	rjmp	.+2      	; 0xe8b4 <fatfs_filinfo_list+0x42>
    e8b2:	98 e4       	ldi	r25, 0x48	; 72
    e8b4:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e8b6:	82 fd       	sbrc	r24, 2
    e8b8:	02 c0       	rjmp	.+4      	; 0xe8be <fatfs_filinfo_list+0x4c>
    e8ba:	9d e2       	ldi	r25, 0x2D	; 45
    e8bc:	01 c0       	rjmp	.+2      	; 0xe8c0 <fatfs_filinfo_list+0x4e>
    e8be:	93 e5       	ldi	r25, 0x53	; 83
    e8c0:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e8c2:	85 fd       	sbrc	r24, 5
    e8c4:	02 c0       	rjmp	.+4      	; 0xe8ca <fatfs_filinfo_list+0x58>
    e8c6:	8d e2       	ldi	r24, 0x2D	; 45
    e8c8:	01 c0       	rjmp	.+2      	; 0xe8cc <fatfs_filinfo_list+0x5a>
    e8ca:	81 e4       	ldi	r24, 0x41	; 65
    e8cc:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e8ce:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e8d0:	fd 01       	movw	r30, r26
    e8d2:	24 81       	ldd	r18, Z+4	; 0x04
    e8d4:	35 81       	ldd	r19, Z+5	; 0x05
    e8d6:	46 81       	ldd	r20, Z+6	; 0x06
    e8d8:	57 81       	ldd	r21, Z+7	; 0x07
    e8da:	cd 01       	movw	r24, r26
    e8dc:	46 96       	adiw	r24, 0x16	; 22
    e8de:	ed b7       	in	r30, 0x3d	; 61
    e8e0:	fe b7       	in	r31, 0x3e	; 62
    e8e2:	95 8b       	std	Z+21, r25	; 0x15
    e8e4:	84 8b       	std	Z+20, r24	; 0x14
    e8e6:	8d 91       	ld	r24, X+
    e8e8:	9d 91       	ld	r25, X+
    e8ea:	0d 90       	ld	r0, X+
    e8ec:	bc 91       	ld	r27, X
    e8ee:	a0 2d       	mov	r26, r0
    e8f0:	80 8b       	std	Z+16, r24	; 0x10
    e8f2:	91 8b       	std	Z+17, r25	; 0x11
    e8f4:	a2 8b       	std	Z+18, r26	; 0x12
    e8f6:	b3 8b       	std	Z+19, r27	; 0x13
    e8f8:	ca 01       	movw	r24, r20
    e8fa:	45 e0       	ldi	r20, 0x05	; 5
    e8fc:	96 95       	lsr	r25
    e8fe:	87 95       	ror	r24
    e900:	4a 95       	dec	r20
    e902:	e1 f7       	brne	.-8      	; 0xe8fc <fatfs_filinfo_list+0x8a>
    e904:	8f 73       	andi	r24, 0x3F	; 63
    e906:	99 27       	eor	r25, r25
    e908:	97 87       	std	Z+15, r25	; 0x0f
    e90a:	86 87       	std	Z+14, r24	; 0x0e
    e90c:	85 2f       	mov	r24, r21
    e90e:	86 95       	lsr	r24
    e910:	86 95       	lsr	r24
    e912:	86 95       	lsr	r24
    e914:	84 87       	std	Z+12, r24	; 0x0c
    e916:	15 86       	std	Z+13, r1	; 0x0d
    e918:	c9 01       	movw	r24, r18
    e91a:	8f 71       	andi	r24, 0x1F	; 31
    e91c:	99 27       	eor	r25, r25
    e91e:	93 87       	std	Z+11, r25	; 0x0b
    e920:	82 87       	std	Z+10, r24	; 0x0a
    e922:	c9 01       	movw	r24, r18
    e924:	55 e0       	ldi	r21, 0x05	; 5
    e926:	96 95       	lsr	r25
    e928:	87 95       	ror	r24
    e92a:	5a 95       	dec	r21
    e92c:	e1 f7       	brne	.-8      	; 0xe926 <fatfs_filinfo_list+0xb4>
    e92e:	8f 70       	andi	r24, 0x0F	; 15
    e930:	99 27       	eor	r25, r25
    e932:	91 87       	std	Z+9, r25	; 0x09
    e934:	80 87       	std	Z+8, r24	; 0x08
    e936:	23 2f       	mov	r18, r19
    e938:	33 27       	eor	r19, r19
    e93a:	26 95       	lsr	r18
    e93c:	24 54       	subi	r18, 0x44	; 68
    e93e:	38 4f       	sbci	r19, 0xF8	; 248
    e940:	37 83       	std	Z+7, r19	; 0x07
    e942:	26 83       	std	Z+6, r18	; 0x06
    e944:	ce 01       	movw	r24, r28
    e946:	46 96       	adiw	r24, 0x16	; 22
    e948:	95 83       	std	Z+5, r25	; 0x05
    e94a:	84 83       	std	Z+4, r24	; 0x04
    e94c:	8b e5       	ldi	r24, 0x5B	; 91
    e94e:	99 e0       	ldi	r25, 0x09	; 9
    e950:	a0 e0       	ldi	r26, 0x00	; 0
    e952:	81 83       	std	Z+1, r24	; 0x01
    e954:	92 83       	std	Z+2, r25	; 0x02
    e956:	a3 83       	std	Z+3, r26	; 0x03
    e958:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e95c:	89 e5       	ldi	r24, 0x59	; 89
    e95e:	99 e0       	ldi	r25, 0x09	; 9
    e960:	a0 e0       	ldi	r26, 0x00	; 0
    e962:	ed b7       	in	r30, 0x3d	; 61
    e964:	fe b7       	in	r31, 0x3e	; 62
    e966:	81 83       	std	Z+1, r24	; 0x01
    e968:	92 83       	std	Z+2, r25	; 0x02
    e96a:	a3 83       	std	Z+3, r26	; 0x03
    e96c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
}
    e970:	6b 96       	adiw	r28, 0x1b	; 27
    e972:	e2 e0       	ldi	r30, 0x02	; 2
    e974:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0000e978 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e978:	cf 93       	push	r28
    e97a:	df 93       	push	r29
    e97c:	00 d0       	rcall	.+0      	; 0xe97e <fatfs_help+0x6>
    e97e:	1f 92       	push	r1
    e980:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e982:	8e e9       	ldi	r24, 0x9E	; 158
    e984:	9c e0       	ldi	r25, 0x0C	; 12
    e986:	a0 e0       	ldi	r26, 0x00	; 0
    e988:	ed b7       	in	r30, 0x3d	; 61
    e98a:	fe b7       	in	r31, 0x3e	; 62
    e98c:	81 83       	std	Z+1, r24	; 0x01
    e98e:	92 83       	std	Z+2, r25	; 0x02
    e990:	a3 83       	std	Z+3, r26	; 0x03
    e992:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    if(full)
    e996:	cd 2b       	or	r28, r29
    e998:	51 f0       	breq	.+20     	; 0xe9ae <fatfs_help+0x36>
    {
        printf(
    e99a:	82 e2       	ldi	r24, 0x22	; 34
    e99c:	9c e0       	ldi	r25, 0x0C	; 12
    e99e:	a0 e0       	ldi	r26, 0x00	; 0
    e9a0:	ed b7       	in	r30, 0x3d	; 61
    e9a2:	fe b7       	in	r31, 0x3e	; 62
    e9a4:	81 83       	std	Z+1, r24	; 0x01
    e9a6:	92 83       	std	Z+2, r25	; 0x02
    e9a8:	a3 83       	std	Z+3, r26	; 0x03
    e9aa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    #endif
            "\n"
            );
    }

}
    e9ae:	cd b7       	in	r28, 0x3d	; 61
    e9b0:	de b7       	in	r29, 0x3e	; 62
    e9b2:	23 96       	adiw	r28, 0x03	; 3
    e9b4:	e2 e0       	ldi	r30, 0x02	; 2
    e9b6:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0000e9ba <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e9ba:	a5 e5       	ldi	r26, 0x55	; 85
    e9bc:	b2 e0       	ldi	r27, 0x02	; 2
    e9be:	e3 ee       	ldi	r30, 0xE3	; 227
    e9c0:	f4 e7       	ldi	r31, 0x74	; 116
    e9c2:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    e9c6:	8e 01       	movw	r16, r28
    e9c8:	0e 5d       	subi	r16, 0xDE	; 222
    e9ca:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256];

    if(!name || !*name)
    e9cc:	00 97       	sbiw	r24, 0x00	; 0
    e9ce:	21 f0       	breq	.+8      	; 0xe9d8 <fatfs_ls+0x1e>
    e9d0:	fc 01       	movw	r30, r24
    e9d2:	20 81       	ld	r18, Z
    e9d4:	21 11       	cpse	r18, r1
    e9d6:	03 c0       	rjmp	.+6      	; 0xe9de <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e9d8:	63 ef       	ldi	r22, 0xF3	; 243
    e9da:	72 e1       	ldi	r23, 0x12	; 18
    e9dc:	01 c0       	rjmp	.+2      	; 0xe9e0 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e9de:	bc 01       	movw	r22, r24
    e9e0:	c8 01       	movw	r24, r16
    e9e2:	0e 94 97 32 	call	0x652e	; 0x652e <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e9e6:	ed b7       	in	r30, 0x3d	; 61
    e9e8:	fe b7       	in	r31, 0x3e	; 62
    e9ea:	15 83       	std	Z+5, r17	; 0x05
    e9ec:	04 83       	std	Z+4, r16	; 0x04
    e9ee:	82 e9       	ldi	r24, 0x92	; 146
    e9f0:	9b e0       	ldi	r25, 0x0B	; 11
    e9f2:	a0 e0       	ldi	r26, 0x00	; 0
    e9f4:	81 83       	std	Z+1, r24	; 0x01
    e9f6:	92 83       	std	Z+2, r25	; 0x02
    e9f8:	a3 83       	std	Z+3, r26	; 0x03
    e9fa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    res = f_opendir(&dirs, buff);
    e9fe:	b8 01       	movw	r22, r16
    ea00:	ce 01       	movw	r24, r28
    ea02:	8e 5d       	subi	r24, 0xDE	; 222
    ea04:	9d 4f       	sbci	r25, 0xFD	; 253
    ea06:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <f_opendir>
    if (res) { put_rc(res); return; }
    ea0a:	00 97       	sbiw	r24, 0x00	; 0
    ea0c:	11 f0       	breq	.+4      	; 0xea12 <fatfs_ls+0x58>
    ea0e:	23 dd       	rcall	.-1466   	; 0xe456 <put_rc>
    p1 = s1 = s2 = 0;
    ea10:	8a c0       	rjmp	.+276    	; 0xeb26 <fatfs_ls+0x16c>
    ea12:	c0 5b       	subi	r28, 0xB0	; 176
    ea14:	dd 4f       	sbci	r29, 0xFD	; 253
    ea16:	18 82       	st	Y, r1
    ea18:	19 82       	std	Y+1, r1	; 0x01
    ea1a:	1a 82       	std	Y+2, r1	; 0x02
    ea1c:	1b 82       	std	Y+3, r1	; 0x03
    ea1e:	c0 55       	subi	r28, 0x50	; 80
    ea20:	d2 40       	sbci	r29, 0x02	; 2
    ea22:	c1 2c       	mov	r12, r1
    ea24:	d1 2c       	mov	r13, r1
    ea26:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    ea28:	f1 2c       	mov	r15, r1
    ea2a:	be 01       	movw	r22, r28
    ea2c:	64 5f       	subi	r22, 0xF4	; 244
    ea2e:	7f 4f       	sbci	r23, 0xFF	; 255
    ea30:	ce 01       	movw	r24, r28
    ea32:	8e 5d       	subi	r24, 0xDE	; 222
    ea34:	9d 4f       	sbci	r25, 0xFD	; 253
    ea36:	0e 94 57 65 	call	0xcaae	; 0xcaae <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    ea3a:	89 2b       	or	r24, r25
    ea3c:	49 f5       	brne	.+82     	; 0xea90 <fatfs_ls+0xd6>
    ea3e:	8a a1       	ldd	r24, Y+34	; 0x22
    ea40:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    ea42:	31 f1       	breq	.+76     	; 0xea90 <fatfs_ls+0xd6>
    ea44:	8c 89       	ldd	r24, Y+20	; 0x14
    ea46:	84 ff       	sbrs	r24, 4
        {
            s2++;
    ea48:	04 c0       	rjmp	.+8      	; 0xea52 <fatfs_ls+0x98>
    ea4a:	ff ef       	ldi	r31, 0xFF	; 255
    ea4c:	cf 1a       	sub	r12, r31
    ea4e:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    ea50:	1b c0       	rjmp	.+54     	; 0xea88 <fatfs_ls+0xce>
    ea52:	8f ef       	ldi	r24, 0xFF	; 255
    ea54:	e8 1a       	sub	r14, r24
    ea56:	f8 0a       	sbc	r15, r24
    ea58:	4c 85       	ldd	r20, Y+12	; 0x0c
    ea5a:	5d 85       	ldd	r21, Y+13	; 0x0d
    ea5c:	6e 85       	ldd	r22, Y+14	; 0x0e
    ea5e:	7f 85       	ldd	r23, Y+15	; 0x0f
    ea60:	c0 5b       	subi	r28, 0xB0	; 176
    ea62:	dd 4f       	sbci	r29, 0xFD	; 253
    ea64:	88 81       	ld	r24, Y
    ea66:	99 81       	ldd	r25, Y+1	; 0x01
    ea68:	aa 81       	ldd	r26, Y+2	; 0x02
    ea6a:	bb 81       	ldd	r27, Y+3	; 0x03
    ea6c:	c0 55       	subi	r28, 0x50	; 80
    ea6e:	d2 40       	sbci	r29, 0x02	; 2
    ea70:	84 0f       	add	r24, r20
    ea72:	95 1f       	adc	r25, r21
    ea74:	a6 1f       	adc	r26, r22
    ea76:	b7 1f       	adc	r27, r23
    ea78:	c0 5b       	subi	r28, 0xB0	; 176
    ea7a:	dd 4f       	sbci	r29, 0xFD	; 253
    ea7c:	88 83       	st	Y, r24
    ea7e:	99 83       	std	Y+1, r25	; 0x01
    ea80:	aa 83       	std	Y+2, r26	; 0x02
    ea82:	bb 83       	std	Y+3, r27	; 0x03
    ea84:	c0 55       	subi	r28, 0x50	; 80
        }
        fatfs_filinfo_list(&fno);
    ea86:	d2 40       	sbci	r29, 0x02	; 2
    ea88:	ce 01       	movw	r24, r28
    ea8a:	0c 96       	adiw	r24, 0x0c	; 12
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    ea8c:	f2 de       	rcall	.-540    	; 0xe872 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    ea8e:	cd cf       	rjmp	.-102    	; 0xea2a <fatfs_ls+0x70>
    ea90:	ed b7       	in	r30, 0x3d	; 61
    ea92:	fe b7       	in	r31, 0x3e	; 62
    ea94:	d3 86       	std	Z+11, r13	; 0x0b
    ea96:	c2 86       	std	Z+10, r12	; 0x0a
    ea98:	c0 5b       	subi	r28, 0xB0	; 176
    ea9a:	dd 4f       	sbci	r29, 0xFD	; 253
    ea9c:	88 81       	ld	r24, Y
    ea9e:	99 81       	ldd	r25, Y+1	; 0x01
    eaa0:	aa 81       	ldd	r26, Y+2	; 0x02
    eaa2:	bb 81       	ldd	r27, Y+3	; 0x03
    eaa4:	c0 55       	subi	r28, 0x50	; 80
    eaa6:	d2 40       	sbci	r29, 0x02	; 2
    eaa8:	86 83       	std	Z+6, r24	; 0x06
    eaaa:	97 83       	std	Z+7, r25	; 0x07
    eaac:	a0 87       	std	Z+8, r26	; 0x08
    eaae:	b1 87       	std	Z+9, r27	; 0x09
    eab0:	f5 82       	std	Z+5, r15	; 0x05
    eab2:	e4 82       	std	Z+4, r14	; 0x04
    eab4:	89 e6       	ldi	r24, 0x69	; 105
    eab6:	9b e0       	ldi	r25, 0x0B	; 11
    eab8:	a0 e0       	ldi	r26, 0x00	; 0
    eaba:	81 83       	std	Z+1, r24	; 0x01
    eabc:	92 83       	std	Z+2, r25	; 0x02
    eabe:	a3 83       	std	Z+3, r26	; 0x03
    eac0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    eac4:	ae 01       	movw	r20, r28
    eac6:	4c 5a       	subi	r20, 0xAC	; 172
    eac8:	5d 4f       	sbci	r21, 0xFD	; 253
    eaca:	be 01       	movw	r22, r28
    eacc:	60 5b       	subi	r22, 0xB0	; 176
    eace:	7d 4f       	sbci	r23, 0xFD	; 253
    ead0:	c8 01       	movw	r24, r16
    ead2:	0e 94 d9 65 	call	0xcbb2	; 0xcbb2 <f_getfree>
    ead6:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    ead8:	31 f5       	brne	.+76     	; 0xeb26 <fatfs_ls+0x16c>
    eada:	cc 5a       	subi	r28, 0xAC	; 172
    eadc:	dd 4f       	sbci	r29, 0xFD	; 253
    eade:	e8 81       	ld	r30, Y
    eae0:	f9 81       	ldd	r31, Y+1	; 0x01
    eae2:	c4 55       	subi	r28, 0x54	; 84
    eae4:	d2 40       	sbci	r29, 0x02	; 2
    eae6:	a1 85       	ldd	r26, Z+9	; 0x09
    eae8:	b2 85       	ldd	r27, Z+10	; 0x0a
    eaea:	c0 5b       	subi	r28, 0xB0	; 176
    eaec:	dd 4f       	sbci	r29, 0xFD	; 253
    eaee:	28 81       	ld	r18, Y
    eaf0:	39 81       	ldd	r19, Y+1	; 0x01
    eaf2:	4a 81       	ldd	r20, Y+2	; 0x02
    eaf4:	5b 81       	ldd	r21, Y+3	; 0x03
    eaf6:	c0 55       	subi	r28, 0x50	; 80
    eaf8:	d2 40       	sbci	r29, 0x02	; 2
    eafa:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
    eafe:	22 e0       	ldi	r18, 0x02	; 2
    eb00:	30 e0       	ldi	r19, 0x00	; 0
    eb02:	40 e0       	ldi	r20, 0x00	; 0
    eb04:	50 e0       	ldi	r21, 0x00	; 0
    eb06:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
    eb0a:	ed b7       	in	r30, 0x3d	; 61
    eb0c:	fe b7       	in	r31, 0x3e	; 62
    eb0e:	24 83       	std	Z+4, r18	; 0x04
    eb10:	35 83       	std	Z+5, r19	; 0x05
    eb12:	46 83       	std	Z+6, r20	; 0x06
    eb14:	57 83       	std	Z+7, r21	; 0x07
    eb16:	84 e5       	ldi	r24, 0x54	; 84
    eb18:	9b e0       	ldi	r25, 0x0B	; 11
    eb1a:	a0 e0       	ldi	r26, 0x00	; 0
    eb1c:	81 83       	std	Z+1, r24	; 0x01
    eb1e:	92 83       	std	Z+2, r25	; 0x02
    eb20:	a3 83       	std	Z+3, r26	; 0x03
    eb22:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
}
    eb26:	cb 5a       	subi	r28, 0xAB	; 171
    eb28:	dd 4f       	sbci	r29, 0xFD	; 253
    eb2a:	e8 e0       	ldi	r30, 0x08	; 8
    eb2c:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000eb30 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    eb30:	00 d0       	rcall	.+0      	; 0xeb32 <mmc_test+0x2>
    eb32:	1f 92       	push	r1
    printf("==============================\n");
    eb34:	82 ef       	ldi	r24, 0xF2	; 242
    eb36:	9b e0       	ldi	r25, 0x0B	; 11
    eb38:	a0 e0       	ldi	r26, 0x00	; 0
    eb3a:	ed b7       	in	r30, 0x3d	; 61
    eb3c:	fe b7       	in	r31, 0x3e	; 62
    eb3e:	81 83       	std	Z+1, r24	; 0x01
    eb40:	92 83       	std	Z+2, r25	; 0x02
    eb42:	a3 83       	std	Z+3, r26	; 0x03
    eb44:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("START MMC TEST\n");
    eb48:	82 ee       	ldi	r24, 0xE2	; 226
    eb4a:	9b e0       	ldi	r25, 0x0B	; 11
    eb4c:	a0 e0       	ldi	r26, 0x00	; 0
    eb4e:	ed b7       	in	r30, 0x3d	; 61
    eb50:	fe b7       	in	r31, 0x3e	; 62
    eb52:	81 83       	std	Z+1, r24	; 0x01
    eb54:	92 83       	std	Z+2, r25	; 0x02
    eb56:	a3 83       	std	Z+3, r26	; 0x03
    eb58:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    fatfs_status("/");
    eb5c:	81 ea       	ldi	r24, 0xA1	; 161
    eb5e:	98 e0       	ldi	r25, 0x08	; 8
    eb60:	0e dd       	rcall	.-1508   	; 0xe57e <fatfs_status>
    printf("MMC Directory List\n");
    eb62:	8e ec       	ldi	r24, 0xCE	; 206
    eb64:	9b e0       	ldi	r25, 0x0B	; 11
    eb66:	a0 e0       	ldi	r26, 0x00	; 0
    eb68:	ed b7       	in	r30, 0x3d	; 61
    eb6a:	fe b7       	in	r31, 0x3e	; 62
    eb6c:	81 83       	std	Z+1, r24	; 0x01
    eb6e:	92 83       	std	Z+2, r25	; 0x02
    eb70:	a3 83       	std	Z+3, r26	; 0x03
    eb72:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    fatfs_ls("/");
    eb76:	81 ea       	ldi	r24, 0xA1	; 161
    eb78:	98 e0       	ldi	r25, 0x08	; 8
    eb7a:	1f df       	rcall	.-450    	; 0xe9ba <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    eb7c:	80 ec       	ldi	r24, 0xC0	; 192
    eb7e:	9b e0       	ldi	r25, 0x0B	; 11
    eb80:	a0 e0       	ldi	r26, 0x00	; 0
    eb82:	ed b7       	in	r30, 0x3d	; 61
    eb84:	fe b7       	in	r31, 0x3e	; 62
    eb86:	81 83       	std	Z+1, r24	; 0x01
    eb88:	92 83       	std	Z+2, r25	; 0x02
    eb8a:	a3 83       	std	Z+3, r26	; 0x03
    eb8c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("==============================\n");
    eb90:	80 ea       	ldi	r24, 0xA0	; 160
    eb92:	9b e0       	ldi	r25, 0x0B	; 11
    eb94:	a0 e0       	ldi	r26, 0x00	; 0
    eb96:	ed b7       	in	r30, 0x3d	; 61
    eb98:	fe b7       	in	r31, 0x3e	; 62
    eb9a:	81 83       	std	Z+1, r24	; 0x01
    eb9c:	92 83       	std	Z+2, r25	; 0x02
    eb9e:	a3 83       	std	Z+3, r26	; 0x03
    eba0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
}
    eba4:	0f 90       	pop	r0
    eba6:	0f 90       	pop	r0
    eba8:	0f 90       	pop	r0
    ebaa:	08 95       	ret

0000ebac <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    ebac:	ef 92       	push	r14
    ebae:	ff 92       	push	r15
    ebb0:	0f 93       	push	r16
    ebb2:	1f 93       	push	r17
    ebb4:	cf 93       	push	r28
    ebb6:	df 93       	push	r29
    ebb8:	ad b7       	in	r26, 0x3d	; 61
    ebba:	be b7       	in	r27, 0x3e	; 62
    ebbc:	17 97       	sbiw	r26, 0x07	; 7
    ebbe:	0f b6       	in	r0, 0x3f	; 63
    ebc0:	f8 94       	cli
    ebc2:	be bf       	out	0x3e, r27	; 62
    ebc4:	0f be       	out	0x3f, r0	; 63
    ebc6:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    ebc8:	fb 01       	movw	r30, r22
    ebca:	20 81       	ld	r18, Z
    ebcc:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    ebce:	21 15       	cp	r18, r1
    ebd0:	31 05       	cpc	r19, r1
    ebd2:	19 f4       	brne	.+6      	; 0xebda <fatfs_tests+0x2e>
        return(0);
    ebd4:	80 e0       	ldi	r24, 0x00	; 0
    ebd6:	90 e0       	ldi	r25, 0x00	; 0
    ebd8:	73 c0       	rjmp	.+230    	; 0xecc0 <fatfs_tests+0x114>
    ebda:	eb 01       	movw	r28, r22
    ebdc:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    ebde:	6d ec       	ldi	r22, 0xCD	; 205
    ebe0:	78 e0       	ldi	r23, 0x08	; 8
    ebe2:	c9 01       	movw	r24, r18
    ebe4:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
    ebe8:	89 2b       	or	r24, r25
    ebea:	a1 f3       	breq	.-24     	; 0xebd4 <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    ebec:	ea 80       	ldd	r14, Y+2	; 0x02
    ebee:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    ebf0:	e1 14       	cp	r14, r1
    ebf2:	f1 04       	cpc	r15, r1
    ebf4:	21 f4       	brne	.+8      	; 0xebfe <fatfs_tests+0x52>
        {
            fatfs_help(1);
    ebf6:	81 e0       	ldi	r24, 0x01	; 1
    ebf8:	90 e0       	ldi	r25, 0x00	; 0
    ebfa:	be de       	rcall	.-644    	; 0xe978 <fatfs_help>
    ebfc:	5f c0       	rjmp	.+190    	; 0xecbc <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    ebfe:	65 e9       	ldi	r22, 0x95	; 149
    ec00:	76 e1       	ldi	r23, 0x16	; 22
    ec02:	c7 01       	movw	r24, r14
    ec04:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
    ec08:	89 2b       	or	r24, r25
    ec0a:	a9 f7       	brne	.-22     	; 0xebf6 <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    ec0c:	98 01       	movw	r18, r16
    ec0e:	42 e0       	ldi	r20, 0x02	; 2
    ec10:	50 e0       	ldi	r21, 0x00	; 0
    ec12:	63 ed       	ldi	r22, 0xD3	; 211
    ec14:	78 e0       	ldi	r23, 0x08	; 8
    ec16:	c7 01       	movw	r24, r14
    ec18:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
    ec1c:	89 2b       	or	r24, r25
    ec1e:	31 f1       	breq	.+76     	; 0xec6c <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    ec20:	ed b7       	in	r30, 0x3d	; 61
    ec22:	fe b7       	in	r31, 0x3e	; 62
    ec24:	17 83       	std	Z+7, r17	; 0x07
    ec26:	06 83       	std	Z+6, r16	; 0x06
    ec28:	82 e0       	ldi	r24, 0x02	; 2
    ec2a:	90 e0       	ldi	r25, 0x00	; 0
    ec2c:	95 83       	std	Z+5, r25	; 0x05
    ec2e:	84 83       	std	Z+4, r24	; 0x04
    ec30:	82 e1       	ldi	r24, 0x12	; 18
    ec32:	9c e0       	ldi	r25, 0x0C	; 12
    ec34:	a0 e0       	ldi	r26, 0x00	; 0
    ec36:	81 83       	std	Z+1, r24	; 0x01
    ec38:	92 83       	std	Z+2, r25	; 0x02
    ec3a:	a3 83       	std	Z+3, r26	; 0x03
    ec3c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    ec40:	7e 01       	movw	r14, r28
    ec42:	f4 e0       	ldi	r31, 0x04	; 4
    ec44:	ef 0e       	add	r14, r31
    ec46:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    ec48:	c2 e0       	ldi	r28, 0x02	; 2
    ec4a:	d0 e0       	ldi	r29, 0x00	; 0
    ec4c:	c0 17       	cp	r28, r16
    ec4e:	d1 07       	cpc	r29, r17
    ec50:	3c f4       	brge	.+14     	; 0xec60 <fatfs_tests+0xb4>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    ec52:	f7 01       	movw	r30, r14
    ec54:	81 91       	ld	r24, Z+
    ec56:	91 91       	ld	r25, Z+
    ec58:	7f 01       	movw	r14, r30
    ec5a:	af de       	rcall	.-674    	; 0xe9ba <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    ec5c:	21 96       	adiw	r28, 0x01	; 1
    ec5e:	f6 cf       	rjmp	.-20     	; 0xec4c <fatfs_tests+0xa0>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    ec60:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    ec62:	61 f5       	brne	.+88     	; 0xecbc <fatfs_tests+0x110>
    ec64:	85 e2       	ldi	r24, 0x25	; 37
    ec66:	9c e0       	ldi	r25, 0x0C	; 12
    ec68:	a8 de       	rcall	.-688    	; 0xe9ba <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    ec6a:	28 c0       	rjmp	.+80     	; 0xecbc <fatfs_tests+0x110>
    ec6c:	98 01       	movw	r18, r16
    ec6e:	42 e0       	ldi	r20, 0x02	; 2
    ec70:	50 e0       	ldi	r21, 0x00	; 0
    ec72:	66 ed       	ldi	r22, 0xD6	; 214
    ec74:	78 e0       	ldi	r23, 0x08	; 8
    ec76:	c7 01       	movw	r24, r14
    ec78:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
    {
        mmc_test();
    ec7c:	89 2b       	or	r24, r25
    ec7e:	11 f0       	breq	.+4      	; 0xec84 <fatfs_tests+0xd8>
    ec80:	57 df       	rcall	.-338    	; 0xeb30 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    ec82:	1c c0       	rjmp	.+56     	; 0xecbc <fatfs_tests+0x110>
    ec84:	98 01       	movw	r18, r16
    ec86:	42 e0       	ldi	r20, 0x02	; 2
    ec88:	50 e0       	ldi	r21, 0x00	; 0
    ec8a:	6f ed       	ldi	r22, 0xDF	; 223
    ec8c:	78 e0       	ldi	r23, 0x08	; 8
    ec8e:	c7 01       	movw	r24, r14
    ec90:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
    {
        mmc_init(1);
    ec94:	89 2b       	or	r24, r25
    ec96:	21 f0       	breq	.+8      	; 0xeca0 <fatfs_tests+0xf4>
    ec98:	81 e0       	ldi	r24, 0x01	; 1
    ec9a:	90 e0       	ldi	r25, 0x00	; 0
    ec9c:	99 da       	rcall	.-2766   	; 0xe1d0 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ec9e:	0e c0       	rjmp	.+28     	; 0xecbc <fatfs_tests+0x110>
    eca0:	98 01       	movw	r18, r16
    eca2:	43 e0       	ldi	r20, 0x03	; 3
    eca4:	50 e0       	ldi	r21, 0x00	; 0
    eca6:	68 ee       	ldi	r22, 0xE8	; 232
    eca8:	78 e0       	ldi	r23, 0x08	; 8
    ecaa:	c7 01       	movw	r24, r14
    ecac:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
    ecb0:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ecb2:	09 f4       	brne	.+2      	; 0xecb6 <fatfs_tests+0x10a>
    ecb4:	8f cf       	rjmp	.-226    	; 0xebd4 <fatfs_tests+0x28>
    ecb6:	8c 81       	ldd	r24, Y+4	; 0x04
    ecb8:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ecba:	61 dc       	rcall	.-1854   	; 0xe57e <fatfs_status>
    ecbc:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ecbe:	90 e0       	ldi	r25, 0x00	; 0
    ecc0:	cd b7       	in	r28, 0x3d	; 61
    ecc2:	de b7       	in	r29, 0x3e	; 62
    ecc4:	27 96       	adiw	r28, 0x07	; 7
    ecc6:	e6 e0       	ldi	r30, 0x06	; 6
    ecc8:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

0000eccc <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    eccc:	8f 92       	push	r8
    ecce:	9f 92       	push	r9
    ecd0:	af 92       	push	r10
    ecd2:	bf 92       	push	r11
    ecd4:	ef 92       	push	r14
    ecd6:	ff 92       	push	r15
    ecd8:	0f 93       	push	r16
    ecda:	1f 93       	push	r17
    ecdc:	cf 93       	push	r28
    ecde:	df 93       	push	r29
    ece0:	00 d0       	rcall	.+0      	; 0xece2 <fatfs_getc+0x16>
    ece2:	1f 92       	push	r1
    ece4:	cd b7       	in	r28, 0x3d	; 61
    ece6:	de b7       	in	r29, 0x3e	; 62
    ece8:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ecec:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ecf0:	00 97       	sbiw	r24, 0x00	; 0
    ecf2:	39 f4       	brne	.+14     	; 0xed02 <fatfs_getc+0x36>
    ecf4:	89 e0       	ldi	r24, 0x09	; 9
    ecf6:	90 e0       	ldi	r25, 0x00	; 0
    ecf8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ecfc:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ed00:	2f c0       	rjmp	.+94     	; 0xed60 <fatfs_getc+0x94>
    ed02:	fc 01       	movw	r30, r24
    ed04:	e4 84       	ldd	r14, Z+12	; 0x0c
    ed06:	f5 84       	ldd	r15, Z+13	; 0x0d
    ed08:	e1 14       	cp	r14, r1
    ed0a:	f1 04       	cpc	r15, r1
    ed0c:	99 f3       	breq	.-26     	; 0xecf4 <fatfs_getc+0x28>
    ed0e:	8c 01       	movw	r16, r24
    ed10:	9e 01       	movw	r18, r28
    ed12:	2f 5f       	subi	r18, 0xFF	; 255
    ed14:	3f 4f       	sbci	r19, 0xFF	; 255
    ed16:	41 e0       	ldi	r20, 0x01	; 1
    ed18:	50 e0       	ldi	r21, 0x00	; 0
    ed1a:	be 01       	movw	r22, r28
    ed1c:	6d 5f       	subi	r22, 0xFD	; 253
    ed1e:	7f 4f       	sbci	r23, 0xFF	; 255
    ed20:	c7 01       	movw	r24, r14
    ed22:	0e 94 09 5d 	call	0xba12	; 0xba12 <f_read>
    ed26:	00 97       	sbiw	r24, 0x00	; 0
    ed28:	31 f4       	brne	.+12     	; 0xed36 <fatfs_getc+0x6a>
    ed2a:	29 81       	ldd	r18, Y+1	; 0x01
    ed2c:	3a 81       	ldd	r19, Y+2	; 0x02
    ed2e:	21 30       	cpi	r18, 0x01	; 1
    ed30:	31 05       	cpc	r19, r1
    ed32:	c9 f0       	breq	.+50     	; 0xed66 <fatfs_getc+0x9a>
    ed34:	03 c0       	rjmp	.+6      	; 0xed3c <fatfs_getc+0x70>
    ed36:	84 31       	cpi	r24, 0x14	; 20
    ed38:	91 05       	cpc	r25, r1
    ed3a:	40 f4       	brcc	.+16     	; 0xed4c <fatfs_getc+0x80>
    ed3c:	fc 01       	movw	r30, r24
    ed3e:	ef 55       	subi	r30, 0x5F	; 95
    ed40:	f4 4f       	sbci	r31, 0xF4	; 244
    ed42:	80 81       	ld	r24, Z
    ed44:	08 2e       	mov	r0, r24
    ed46:	00 0c       	add	r0, r0
    ed48:	99 0b       	sbc	r25, r25
    ed4a:	02 c0       	rjmp	.+4      	; 0xed50 <fatfs_getc+0x84>
    ed4c:	83 e2       	ldi	r24, 0x23	; 35
    ed4e:	90 e0       	ldi	r25, 0x00	; 0
    ed50:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ed54:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ed58:	f8 01       	movw	r30, r16
    ed5a:	83 81       	ldd	r24, Z+3	; 0x03
    ed5c:	80 62       	ori	r24, 0x20	; 32
    ed5e:	83 83       	std	Z+3, r24	; 0x03
    ed60:	8f ef       	ldi	r24, 0xFF	; 255
    ed62:	9f ef       	ldi	r25, 0xFF	; 255
    ed64:	28 c0       	rjmp	.+80     	; 0xedb6 <fatfs_getc+0xea>
    ed66:	8b 81       	ldd	r24, Y+3	; 0x03
    ed68:	8d 30       	cpi	r24, 0x0D	; 13
    ed6a:	01 f5       	brne	.+64     	; 0xedac <fatfs_getc+0xe0>
    ed6c:	f7 01       	movw	r30, r14
    ed6e:	80 88       	ldd	r8, Z+16	; 0x10
    ed70:	91 88       	ldd	r9, Z+17	; 0x11
    ed72:	a2 88       	ldd	r10, Z+18	; 0x12
    ed74:	b3 88       	ldd	r11, Z+19	; 0x13
    ed76:	9e 01       	movw	r18, r28
    ed78:	2f 5f       	subi	r18, 0xFF	; 255
    ed7a:	3f 4f       	sbci	r19, 0xFF	; 255
    ed7c:	41 e0       	ldi	r20, 0x01	; 1
    ed7e:	50 e0       	ldi	r21, 0x00	; 0
    ed80:	be 01       	movw	r22, r28
    ed82:	6d 5f       	subi	r22, 0xFD	; 253
    ed84:	7f 4f       	sbci	r23, 0xFF	; 255
    ed86:	c7 01       	movw	r24, r14
    ed88:	0e 94 09 5d 	call	0xba12	; 0xba12 <f_read>
    ed8c:	89 2b       	or	r24, r25
    ed8e:	89 f4       	brne	.+34     	; 0xedb2 <fatfs_getc+0xe6>
    ed90:	89 81       	ldd	r24, Y+1	; 0x01
    ed92:	9a 81       	ldd	r25, Y+2	; 0x02
    ed94:	01 97       	sbiw	r24, 0x01	; 1
    ed96:	69 f4       	brne	.+26     	; 0xedb2 <fatfs_getc+0xe6>
    ed98:	8b 81       	ldd	r24, Y+3	; 0x03
    ed9a:	8a 30       	cpi	r24, 0x0A	; 10
    ed9c:	31 f0       	breq	.+12     	; 0xedaa <fatfs_getc+0xde>
    ed9e:	b5 01       	movw	r22, r10
    eda0:	a4 01       	movw	r20, r8
    eda2:	c7 01       	movw	r24, r14
    eda4:	0e 94 15 62 	call	0xc42a	; 0xc42a <f_lseek>
    eda8:	04 c0       	rjmp	.+8      	; 0xedb2 <fatfs_getc+0xe6>
    edaa:	8b 83       	std	Y+3, r24	; 0x03
    edac:	8b 81       	ldd	r24, Y+3	; 0x03
    edae:	90 e0       	ldi	r25, 0x00	; 0
    edb0:	02 c0       	rjmp	.+4      	; 0xedb6 <fatfs_getc+0xea>
    edb2:	8a e0       	ldi	r24, 0x0A	; 10
    edb4:	90 e0       	ldi	r25, 0x00	; 0
    edb6:	0f 90       	pop	r0
    edb8:	0f 90       	pop	r0
    edba:	0f 90       	pop	r0
    edbc:	df 91       	pop	r29
    edbe:	cf 91       	pop	r28
    edc0:	1f 91       	pop	r17
    edc2:	0f 91       	pop	r16
    edc4:	ff 90       	pop	r15
    edc6:	ef 90       	pop	r14
    edc8:	bf 90       	pop	r11
    edca:	af 90       	pop	r10
    edcc:	9f 90       	pop	r9
    edce:	8f 90       	pop	r8
    edd0:	08 95       	ret

0000edd2 <fatfs_putc>:
    edd2:	a3 e0       	ldi	r26, 0x03	; 3
    edd4:	b0 e0       	ldi	r27, 0x00	; 0
    edd6:	ef ee       	ldi	r30, 0xEF	; 239
    edd8:	f6 e7       	ldi	r31, 0x76	; 118
    edda:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    edde:	8b 83       	std	Y+3, r24	; 0x03
    ede0:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ede4:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ede8:	61 15       	cp	r22, r1
    edea:	71 05       	cpc	r23, r1
    edec:	39 f4       	brne	.+14     	; 0xedfc <fatfs_putc+0x2a>
    edee:	89 e0       	ldi	r24, 0x09	; 9
    edf0:	90 e0       	ldi	r25, 0x00	; 0
    edf2:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    edf6:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    edfa:	2d c0       	rjmp	.+90     	; 0xee56 <fatfs_putc+0x84>
    edfc:	fb 01       	movw	r30, r22
    edfe:	84 85       	ldd	r24, Z+12	; 0x0c
    ee00:	95 85       	ldd	r25, Z+13	; 0x0d
    ee02:	00 97       	sbiw	r24, 0x00	; 0
    ee04:	a1 f3       	breq	.-24     	; 0xedee <fatfs_putc+0x1c>
    ee06:	8b 01       	movw	r16, r22
    ee08:	9e 01       	movw	r18, r28
    ee0a:	2f 5f       	subi	r18, 0xFF	; 255
    ee0c:	3f 4f       	sbci	r19, 0xFF	; 255
    ee0e:	41 e0       	ldi	r20, 0x01	; 1
    ee10:	50 e0       	ldi	r21, 0x00	; 0
    ee12:	be 01       	movw	r22, r28
    ee14:	6d 5f       	subi	r22, 0xFD	; 253
    ee16:	7f 4f       	sbci	r23, 0xFF	; 255
    ee18:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <f_write>
    ee1c:	00 97       	sbiw	r24, 0x00	; 0
    ee1e:	31 f4       	brne	.+12     	; 0xee2c <fatfs_putc+0x5a>
    ee20:	29 81       	ldd	r18, Y+1	; 0x01
    ee22:	3a 81       	ldd	r19, Y+2	; 0x02
    ee24:	21 30       	cpi	r18, 0x01	; 1
    ee26:	31 05       	cpc	r19, r1
    ee28:	c9 f0       	breq	.+50     	; 0xee5c <fatfs_putc+0x8a>
    ee2a:	03 c0       	rjmp	.+6      	; 0xee32 <fatfs_putc+0x60>
    ee2c:	84 31       	cpi	r24, 0x14	; 20
    ee2e:	91 05       	cpc	r25, r1
    ee30:	40 f4       	brcc	.+16     	; 0xee42 <fatfs_putc+0x70>
    ee32:	fc 01       	movw	r30, r24
    ee34:	ef 55       	subi	r30, 0x5F	; 95
    ee36:	f4 4f       	sbci	r31, 0xF4	; 244
    ee38:	80 81       	ld	r24, Z
    ee3a:	08 2e       	mov	r0, r24
    ee3c:	00 0c       	add	r0, r0
    ee3e:	99 0b       	sbc	r25, r25
    ee40:	02 c0       	rjmp	.+4      	; 0xee46 <fatfs_putc+0x74>
    ee42:	83 e2       	ldi	r24, 0x23	; 35
    ee44:	90 e0       	ldi	r25, 0x00	; 0
    ee46:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ee4a:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ee4e:	f8 01       	movw	r30, r16
    ee50:	83 81       	ldd	r24, Z+3	; 0x03
    ee52:	80 62       	ori	r24, 0x20	; 32
    ee54:	83 83       	std	Z+3, r24	; 0x03
    ee56:	8f ef       	ldi	r24, 0xFF	; 255
    ee58:	9f ef       	ldi	r25, 0xFF	; 255
    ee5a:	02 c0       	rjmp	.+4      	; 0xee60 <fatfs_putc+0x8e>
    ee5c:	8b 81       	ldd	r24, Y+3	; 0x03
    ee5e:	90 e0       	ldi	r25, 0x00	; 0
    ee60:	23 96       	adiw	r28, 0x03	; 3
    ee62:	e4 e0       	ldi	r30, 0x04	; 4
    ee64:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

0000ee68 <fgetc>:
    ee68:	cf 93       	push	r28
    ee6a:	df 93       	push	r29
    ee6c:	00 d0       	rcall	.+0      	; 0xee6e <fgetc+0x6>
    ee6e:	1f 92       	push	r1
    ee70:	ec 01       	movw	r28, r24
    ee72:	00 97       	sbiw	r24, 0x00	; 0
    ee74:	39 f4       	brne	.+14     	; 0xee84 <fgetc+0x1c>
    ee76:	89 e0       	ldi	r24, 0x09	; 9
    ee78:	90 e0       	ldi	r25, 0x00	; 0
    ee7a:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ee7e:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ee82:	40 c0       	rjmp	.+128    	; 0xef04 <fgetc+0x9c>
    ee84:	2b 81       	ldd	r18, Y+3	; 0x03
    ee86:	20 ff       	sbrs	r18, 0
    ee88:	3d c0       	rjmp	.+122    	; 0xef04 <fgetc+0x9c>
    ee8a:	26 ff       	sbrs	r18, 6
    ee8c:	0a c0       	rjmp	.+20     	; 0xeea2 <fgetc+0x3a>
    ee8e:	2f 7b       	andi	r18, 0xBF	; 191
    ee90:	2b 83       	std	Y+3, r18	; 0x03
    ee92:	8e 81       	ldd	r24, Y+6	; 0x06
    ee94:	9f 81       	ldd	r25, Y+7	; 0x07
    ee96:	01 96       	adiw	r24, 0x01	; 1
    ee98:	9f 83       	std	Y+7, r25	; 0x07
    ee9a:	8e 83       	std	Y+6, r24	; 0x06
    ee9c:	8a 81       	ldd	r24, Y+2	; 0x02
    ee9e:	90 e0       	ldi	r25, 0x00	; 0
    eea0:	33 c0       	rjmp	.+102    	; 0xef08 <fgetc+0xa0>
    eea2:	22 ff       	sbrs	r18, 2
    eea4:	0d c0       	rjmp	.+26     	; 0xeec0 <fgetc+0x58>
    eea6:	e8 81       	ld	r30, Y
    eea8:	f9 81       	ldd	r31, Y+1	; 0x01
    eeaa:	80 81       	ld	r24, Z
    eeac:	90 e0       	ldi	r25, 0x00	; 0
    eeae:	00 97       	sbiw	r24, 0x00	; 0
    eeb0:	19 f4       	brne	.+6      	; 0xeeb8 <fgetc+0x50>
    eeb2:	20 62       	ori	r18, 0x20	; 32
    eeb4:	2b 83       	std	Y+3, r18	; 0x03
    eeb6:	26 c0       	rjmp	.+76     	; 0xef04 <fgetc+0x9c>
    eeb8:	31 96       	adiw	r30, 0x01	; 1
    eeba:	f9 83       	std	Y+1, r31	; 0x01
    eebc:	e8 83       	st	Y, r30
    eebe:	1b c0       	rjmp	.+54     	; 0xeef6 <fgetc+0x8e>
    eec0:	ea 85       	ldd	r30, Y+10	; 0x0a
    eec2:	fb 85       	ldd	r31, Y+11	; 0x0b
    eec4:	30 97       	sbiw	r30, 0x00	; 0
    eec6:	59 f4       	brne	.+22     	; 0xeede <fgetc+0x76>
    eec8:	8a ed       	ldi	r24, 0xDA	; 218
    eeca:	9c e0       	ldi	r25, 0x0C	; 12
    eecc:	a0 e0       	ldi	r26, 0x00	; 0
    eece:	ed b7       	in	r30, 0x3d	; 61
    eed0:	fe b7       	in	r31, 0x3e	; 62
    eed2:	81 83       	std	Z+1, r24	; 0x01
    eed4:	92 83       	std	Z+2, r25	; 0x02
    eed6:	a3 83       	std	Z+3, r26	; 0x03
    eed8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    eedc:	13 c0       	rjmp	.+38     	; 0xef04 <fgetc+0x9c>
    eede:	09 95       	icall
    eee0:	97 ff       	sbrs	r25, 7
    eee2:	09 c0       	rjmp	.+18     	; 0xeef6 <fgetc+0x8e>
    eee4:	2b 81       	ldd	r18, Y+3	; 0x03
    eee6:	02 96       	adiw	r24, 0x02	; 2
    eee8:	11 f0       	breq	.+4      	; 0xeeee <fgetc+0x86>
    eeea:	80 e2       	ldi	r24, 0x20	; 32
    eeec:	01 c0       	rjmp	.+2      	; 0xeef0 <fgetc+0x88>
    eeee:	80 e1       	ldi	r24, 0x10	; 16
    eef0:	82 2b       	or	r24, r18
    eef2:	8b 83       	std	Y+3, r24	; 0x03
    eef4:	07 c0       	rjmp	.+14     	; 0xef04 <fgetc+0x9c>
    eef6:	2e 81       	ldd	r18, Y+6	; 0x06
    eef8:	3f 81       	ldd	r19, Y+7	; 0x07
    eefa:	2f 5f       	subi	r18, 0xFF	; 255
    eefc:	3f 4f       	sbci	r19, 0xFF	; 255
    eefe:	3f 83       	std	Y+7, r19	; 0x07
    ef00:	2e 83       	std	Y+6, r18	; 0x06
    ef02:	02 c0       	rjmp	.+4      	; 0xef08 <fgetc+0xa0>
    ef04:	8f ef       	ldi	r24, 0xFF	; 255
    ef06:	9f ef       	ldi	r25, 0xFF	; 255
    ef08:	cd b7       	in	r28, 0x3d	; 61
    ef0a:	de b7       	in	r29, 0x3e	; 62
    ef0c:	23 96       	adiw	r28, 0x03	; 3
    ef0e:	e2 e0       	ldi	r30, 0x02	; 2
    ef10:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0000ef14 <fputc>:
    ef14:	cf 93       	push	r28
    ef16:	df 93       	push	r29
    ef18:	00 d0       	rcall	.+0      	; 0xef1a <fputc+0x6>
    ef1a:	1f 92       	push	r1
    ef1c:	eb 01       	movw	r28, r22
    ef1e:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ef22:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ef26:	20 91 cd 1c 	lds	r18, 0x1CCD	; 0x801ccd <__iob+0x2>
    ef2a:	30 91 ce 1c 	lds	r19, 0x1CCE	; 0x801cce <__iob+0x3>
    ef2e:	62 17       	cp	r22, r18
    ef30:	73 07       	cpc	r23, r19
    ef32:	49 f0       	breq	.+18     	; 0xef46 <fputc+0x32>
    ef34:	20 91 cf 1c 	lds	r18, 0x1CCF	; 0x801ccf <__iob+0x4>
    ef38:	30 91 d0 1c 	lds	r19, 0x1CD0	; 0x801cd0 <__iob+0x5>
    ef3c:	62 17       	cp	r22, r18
    ef3e:	73 07       	cpc	r23, r19
    ef40:	11 f0       	breq	.+4      	; 0xef46 <fputc+0x32>
    ef42:	47 df       	rcall	.-370    	; 0xedd2 <fatfs_putc>
    ef44:	33 c0       	rjmp	.+102    	; 0xefac <fputc+0x98>
    ef46:	2b 81       	ldd	r18, Y+3	; 0x03
    ef48:	21 ff       	sbrs	r18, 1
    ef4a:	2e c0       	rjmp	.+92     	; 0xefa8 <fputc+0x94>
    ef4c:	22 ff       	sbrs	r18, 2
    ef4e:	10 c0       	rjmp	.+32     	; 0xef70 <fputc+0x5c>
    ef50:	4e 81       	ldd	r20, Y+6	; 0x06
    ef52:	5f 81       	ldd	r21, Y+7	; 0x07
    ef54:	2c 81       	ldd	r18, Y+4	; 0x04
    ef56:	3d 81       	ldd	r19, Y+5	; 0x05
    ef58:	42 17       	cp	r20, r18
    ef5a:	53 07       	cpc	r21, r19
    ef5c:	f4 f4       	brge	.+60     	; 0xef9a <fputc+0x86>
    ef5e:	e8 81       	ld	r30, Y
    ef60:	f9 81       	ldd	r31, Y+1	; 0x01
    ef62:	9f 01       	movw	r18, r30
    ef64:	2f 5f       	subi	r18, 0xFF	; 255
    ef66:	3f 4f       	sbci	r19, 0xFF	; 255
    ef68:	39 83       	std	Y+1, r19	; 0x01
    ef6a:	28 83       	st	Y, r18
    ef6c:	80 83       	st	Z, r24
    ef6e:	15 c0       	rjmp	.+42     	; 0xef9a <fputc+0x86>
    ef70:	e8 85       	ldd	r30, Y+8	; 0x08
    ef72:	f9 85       	ldd	r31, Y+9	; 0x09
    ef74:	30 97       	sbiw	r30, 0x00	; 0
    ef76:	59 f4       	brne	.+22     	; 0xef8e <fputc+0x7a>
    ef78:	82 ec       	ldi	r24, 0xC2	; 194
    ef7a:	9c e0       	ldi	r25, 0x0C	; 12
    ef7c:	a0 e0       	ldi	r26, 0x00	; 0
    ef7e:	ed b7       	in	r30, 0x3d	; 61
    ef80:	fe b7       	in	r31, 0x3e	; 62
    ef82:	81 83       	std	Z+1, r24	; 0x01
    ef84:	92 83       	std	Z+2, r25	; 0x02
    ef86:	a3 83       	std	Z+3, r26	; 0x03
    ef88:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    ef8c:	0d c0       	rjmp	.+26     	; 0xefa8 <fputc+0x94>
    ef8e:	be 01       	movw	r22, r28
    ef90:	09 95       	icall
    ef92:	8f 3f       	cpi	r24, 0xFF	; 255
    ef94:	ff ef       	ldi	r31, 0xFF	; 255
    ef96:	9f 07       	cpc	r25, r31
    ef98:	39 f0       	breq	.+14     	; 0xefa8 <fputc+0x94>
    ef9a:	2e 81       	ldd	r18, Y+6	; 0x06
    ef9c:	3f 81       	ldd	r19, Y+7	; 0x07
    ef9e:	2f 5f       	subi	r18, 0xFF	; 255
    efa0:	3f 4f       	sbci	r19, 0xFF	; 255
    efa2:	3f 83       	std	Y+7, r19	; 0x07
    efa4:	2e 83       	std	Y+6, r18	; 0x06
    efa6:	02 c0       	rjmp	.+4      	; 0xefac <fputc+0x98>
    efa8:	8f ef       	ldi	r24, 0xFF	; 255
    efaa:	9f ef       	ldi	r25, 0xFF	; 255
    efac:	cd b7       	in	r28, 0x3d	; 61
    efae:	de b7       	in	r29, 0x3e	; 62
    efb0:	23 96       	adiw	r28, 0x03	; 3
    efb2:	e2 e0       	ldi	r30, 0x02	; 2
    efb4:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0000efb8 <_fprintf_putc>:
    efb8:	fc 01       	movw	r30, r24
    efba:	86 2f       	mov	r24, r22
    efbc:	26 81       	ldd	r18, Z+6	; 0x06
    efbe:	37 81       	ldd	r19, Z+7	; 0x07
    efc0:	2f 5f       	subi	r18, 0xFF	; 255
    efc2:	3f 4f       	sbci	r19, 0xFF	; 255
    efc4:	37 83       	std	Z+7, r19	; 0x07
    efc6:	26 83       	std	Z+6, r18	; 0x06
    efc8:	62 81       	ldd	r22, Z+2	; 0x02
    efca:	73 81       	ldd	r23, Z+3	; 0x03
    efcc:	90 e0       	ldi	r25, 0x00	; 0
    efce:	a2 cf       	rjmp	.-188    	; 0xef14 <fputc>
    efd0:	08 95       	ret

0000efd2 <getchar>:
    efd2:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    efd6:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    efda:	46 cf       	rjmp	.-372    	; 0xee68 <fgetc>
    efdc:	08 95       	ret

0000efde <putchar>:
    efde:	60 91 cd 1c 	lds	r22, 0x1CCD	; 0x801ccd <__iob+0x2>
    efe2:	70 91 ce 1c 	lds	r23, 0x1CCE	; 0x801cce <__iob+0x3>
    efe6:	96 cf       	rjmp	.-212    	; 0xef14 <fputc>
    efe8:	08 95       	ret

0000efea <fgets>:
    efea:	a0 e0       	ldi	r26, 0x00	; 0
    efec:	b0 e0       	ldi	r27, 0x00	; 0
    efee:	eb ef       	ldi	r30, 0xFB	; 251
    eff0:	f7 e7       	ldi	r31, 0x77	; 119
    eff2:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    eff6:	7c 01       	movw	r14, r24
    eff8:	6a 01       	movw	r12, r20
    effa:	8b 01       	movw	r16, r22
    effc:	c0 e0       	ldi	r28, 0x00	; 0
    effe:	d0 e0       	ldi	r29, 0x00	; 0
    f000:	01 15       	cp	r16, r1
    f002:	11 05       	cpc	r17, r1
    f004:	41 f0       	breq	.+16     	; 0xf016 <fgets+0x2c>
    f006:	c6 01       	movw	r24, r12
    f008:	2f df       	rcall	.-418    	; 0xee68 <fgetc>
    f00a:	8f 3f       	cpi	r24, 0xFF	; 255
    f00c:	2f ef       	ldi	r18, 0xFF	; 255
    f00e:	92 07       	cpc	r25, r18
    f010:	39 f4       	brne	.+14     	; 0xf020 <fgets+0x36>
    f012:	20 97       	sbiw	r28, 0x00	; 0
    f014:	b9 f0       	breq	.+46     	; 0xf044 <fgets+0x5a>
    f016:	ce 0d       	add	r28, r14
    f018:	df 1d       	adc	r29, r15
    f01a:	18 82       	st	Y, r1
    f01c:	c7 01       	movw	r24, r14
    f01e:	14 c0       	rjmp	.+40     	; 0xf048 <fgets+0x5e>
    f020:	8a 30       	cpi	r24, 0x0A	; 10
    f022:	91 05       	cpc	r25, r1
    f024:	c1 f3       	breq	.-16     	; 0xf016 <fgets+0x2c>
    f026:	88 30       	cpi	r24, 0x08	; 8
    f028:	91 05       	cpc	r25, r1
    f02a:	21 f4       	brne	.+8      	; 0xf034 <fgets+0x4a>
    f02c:	20 97       	sbiw	r28, 0x00	; 0
    f02e:	39 f0       	breq	.+14     	; 0xf03e <fgets+0x54>
    f030:	21 97       	sbiw	r28, 0x01	; 1
    f032:	05 c0       	rjmp	.+10     	; 0xf03e <fgets+0x54>
    f034:	f7 01       	movw	r30, r14
    f036:	ec 0f       	add	r30, r28
    f038:	fd 1f       	adc	r31, r29
    f03a:	80 83       	st	Z, r24
    f03c:	21 96       	adiw	r28, 0x01	; 1
    f03e:	01 50       	subi	r16, 0x01	; 1
    f040:	11 09       	sbc	r17, r1
    f042:	de cf       	rjmp	.-68     	; 0xf000 <fgets+0x16>
    f044:	80 e0       	ldi	r24, 0x00	; 0
    f046:	90 e0       	ldi	r25, 0x00	; 0
    f048:	cd b7       	in	r28, 0x3d	; 61
    f04a:	de b7       	in	r29, 0x3e	; 62
    f04c:	e8 e0       	ldi	r30, 0x08	; 8
    f04e:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000f052 <fputs>:
    f052:	0f 93       	push	r16
    f054:	1f 93       	push	r17
    f056:	cf 93       	push	r28
    f058:	df 93       	push	r29
    f05a:	8b 01       	movw	r16, r22
    f05c:	ec 01       	movw	r28, r24
    f05e:	89 91       	ld	r24, Y+
    f060:	88 23       	and	r24, r24
    f062:	41 f0       	breq	.+16     	; 0xf074 <fputs+0x22>
    f064:	b8 01       	movw	r22, r16
    f066:	90 e0       	ldi	r25, 0x00	; 0
    f068:	55 df       	rcall	.-342    	; 0xef14 <fputc>
    f06a:	8f 3f       	cpi	r24, 0xFF	; 255
    f06c:	2f ef       	ldi	r18, 0xFF	; 255
    f06e:	92 07       	cpc	r25, r18
    f070:	b1 f7       	brne	.-20     	; 0xf05e <fputs+0xc>
    f072:	02 c0       	rjmp	.+4      	; 0xf078 <fputs+0x26>
    f074:	80 e0       	ldi	r24, 0x00	; 0
    f076:	90 e0       	ldi	r25, 0x00	; 0
    f078:	df 91       	pop	r29
    f07a:	cf 91       	pop	r28
    f07c:	1f 91       	pop	r17
    f07e:	0f 91       	pop	r16
    f080:	08 95       	ret

0000f082 <puts>:
    f082:	cf 93       	push	r28
    f084:	df 93       	push	r29
    f086:	ec 01       	movw	r28, r24
    f088:	89 91       	ld	r24, Y+
    f08a:	60 91 cd 1c 	lds	r22, 0x1CCD	; 0x801ccd <__iob+0x2>
    f08e:	70 91 ce 1c 	lds	r23, 0x1CCE	; 0x801cce <__iob+0x3>
    f092:	88 23       	and	r24, r24
    f094:	39 f0       	breq	.+14     	; 0xf0a4 <puts+0x22>
    f096:	90 e0       	ldi	r25, 0x00	; 0
    f098:	3d df       	rcall	.-390    	; 0xef14 <fputc>
    f09a:	8f 3f       	cpi	r24, 0xFF	; 255
    f09c:	2f ef       	ldi	r18, 0xFF	; 255
    f09e:	92 07       	cpc	r25, r18
    f0a0:	99 f7       	brne	.-26     	; 0xf088 <puts+0x6>
    f0a2:	03 c0       	rjmp	.+6      	; 0xf0aa <puts+0x28>
    f0a4:	8a e0       	ldi	r24, 0x0A	; 10
    f0a6:	90 e0       	ldi	r25, 0x00	; 0
    f0a8:	35 df       	rcall	.-406    	; 0xef14 <fputc>
    f0aa:	df 91       	pop	r29
    f0ac:	cf 91       	pop	r28
    f0ae:	08 95       	ret

0000f0b0 <fileno>:
    f0b0:	00 97       	sbiw	r24, 0x00	; 0
    f0b2:	39 f4       	brne	.+14     	; 0xf0c2 <fileno+0x12>
    f0b4:	89 e0       	ldi	r24, 0x09	; 9
    f0b6:	90 e0       	ldi	r25, 0x00	; 0
    f0b8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f0bc:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f0c0:	0e c0       	rjmp	.+28     	; 0xf0de <fileno+0x2e>
    f0c2:	eb ec       	ldi	r30, 0xCB	; 203
    f0c4:	fc e1       	ldi	r31, 0x1C	; 28
    f0c6:	20 e0       	ldi	r18, 0x00	; 0
    f0c8:	30 e0       	ldi	r19, 0x00	; 0
    f0ca:	41 91       	ld	r20, Z+
    f0cc:	51 91       	ld	r21, Z+
    f0ce:	84 17       	cp	r24, r20
    f0d0:	95 07       	cpc	r25, r21
    f0d2:	41 f0       	breq	.+16     	; 0xf0e4 <fileno+0x34>
    f0d4:	2f 5f       	subi	r18, 0xFF	; 255
    f0d6:	3f 4f       	sbci	r19, 0xFF	; 255
    f0d8:	20 31       	cpi	r18, 0x10	; 16
    f0da:	31 05       	cpc	r19, r1
    f0dc:	b1 f7       	brne	.-20     	; 0xf0ca <fileno+0x1a>
    f0de:	8f ef       	ldi	r24, 0xFF	; 255
    f0e0:	9f ef       	ldi	r25, 0xFF	; 255
    f0e2:	08 95       	ret
    f0e4:	c9 01       	movw	r24, r18
    f0e6:	08 95       	ret

0000f0e8 <fileno_to_stream>:
    f0e8:	80 31       	cpi	r24, 0x10	; 16
    f0ea:	91 05       	cpc	r25, r1
    f0ec:	48 f4       	brcc	.+18     	; 0xf100 <fileno_to_stream+0x18>
    f0ee:	88 0f       	add	r24, r24
    f0f0:	99 1f       	adc	r25, r25
    f0f2:	fc 01       	movw	r30, r24
    f0f4:	e5 53       	subi	r30, 0x35	; 53
    f0f6:	f3 4e       	sbci	r31, 0xE3	; 227
    f0f8:	80 81       	ld	r24, Z
    f0fa:	91 81       	ldd	r25, Z+1	; 0x01
    f0fc:	00 97       	sbiw	r24, 0x00	; 0
    f0fe:	41 f4       	brne	.+16     	; 0xf110 <fileno_to_stream+0x28>
    f100:	89 e0       	ldi	r24, 0x09	; 9
    f102:	90 e0       	ldi	r25, 0x00	; 0
    f104:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f108:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f10c:	80 e0       	ldi	r24, 0x00	; 0
    f10e:	90 e0       	ldi	r25, 0x00	; 0
    f110:	08 95       	ret

0000f112 <mctime>:
    f112:	a4 e0       	ldi	r26, 0x04	; 4
    f114:	b0 e0       	ldi	r27, 0x00	; 0
    f116:	ef e8       	ldi	r30, 0x8F	; 143
    f118:	f8 e7       	ldi	r31, 0x78	; 120
    f11a:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    f11e:	69 83       	std	Y+1, r22	; 0x01
    f120:	7a 83       	std	Y+2, r23	; 0x02
    f122:	8b 83       	std	Y+3, r24	; 0x03
    f124:	9c 83       	std	Y+4, r25	; 0x04
    f126:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f12a:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f12e:	ce 01       	movw	r24, r28
    f130:	01 96       	adiw	r24, 0x01	; 1
    f132:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <ctime_gm>
    f136:	fc 01       	movw	r30, r24
    f138:	01 90       	ld	r0, Z+
    f13a:	00 20       	and	r0, r0
    f13c:	e9 f7       	brne	.-6      	; 0xf138 <mctime+0x26>
    f13e:	31 97       	sbiw	r30, 0x01	; 1
    f140:	e8 1b       	sub	r30, r24
    f142:	f9 0b       	sbc	r31, r25
    f144:	39 f0       	breq	.+14     	; 0xf154 <mctime+0x42>
    f146:	31 97       	sbiw	r30, 0x01	; 1
    f148:	e8 0f       	add	r30, r24
    f14a:	f9 1f       	adc	r31, r25
    f14c:	20 81       	ld	r18, Z
    f14e:	2a 30       	cpi	r18, 0x0A	; 10
    f150:	09 f4       	brne	.+2      	; 0xf154 <mctime+0x42>
    f152:	10 82       	st	Z, r1
    f154:	24 96       	adiw	r28, 0x04	; 4
    f156:	e2 e0       	ldi	r30, 0x02	; 2
    f158:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0000f15c <basename>:
    f15c:	00 97       	sbiw	r24, 0x00	; 0
    f15e:	49 f0       	breq	.+18     	; 0xf172 <basename+0x16>
    f160:	fc 01       	movw	r30, r24
    f162:	21 91       	ld	r18, Z+
    f164:	22 23       	and	r18, r18
    f166:	21 f0       	breq	.+8      	; 0xf170 <basename+0x14>
    f168:	2f 32       	cpi	r18, 0x2F	; 47
    f16a:	d9 f7       	brne	.-10     	; 0xf162 <basename+0x6>
    f16c:	cf 01       	movw	r24, r30
    f16e:	f9 cf       	rjmp	.-14     	; 0xf162 <basename+0x6>
    f170:	08 95       	ret
    f172:	85 e2       	ldi	r24, 0x25	; 37
    f174:	9c e0       	ldi	r25, 0x0C	; 12
    f176:	08 95       	ret

0000f178 <chdir>:
    f178:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f17c:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f180:	0e 94 84 60 	call	0xc108	; 0xc108 <f_chdir>
    f184:	00 97       	sbiw	r24, 0x00	; 0
    f186:	a1 f0       	breq	.+40     	; 0xf1b0 <chdir+0x38>
    f188:	84 31       	cpi	r24, 0x14	; 20
    f18a:	91 05       	cpc	r25, r1
    f18c:	40 f4       	brcc	.+16     	; 0xf19e <chdir+0x26>
    f18e:	fc 01       	movw	r30, r24
    f190:	ef 55       	subi	r30, 0x5F	; 95
    f192:	f4 4f       	sbci	r31, 0xF4	; 244
    f194:	80 81       	ld	r24, Z
    f196:	08 2e       	mov	r0, r24
    f198:	00 0c       	add	r0, r0
    f19a:	99 0b       	sbc	r25, r25
    f19c:	02 c0       	rjmp	.+4      	; 0xf1a2 <chdir+0x2a>
    f19e:	83 e2       	ldi	r24, 0x23	; 35
    f1a0:	90 e0       	ldi	r25, 0x00	; 0
    f1a2:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f1a6:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f1aa:	8f ef       	ldi	r24, 0xFF	; 255
    f1ac:	9f ef       	ldi	r25, 0xFF	; 255
    f1ae:	08 95       	ret
    f1b0:	80 e0       	ldi	r24, 0x00	; 0
    f1b2:	90 e0       	ldi	r25, 0x00	; 0
    f1b4:	08 95       	ret

0000f1b6 <chmod>:
    f1b6:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f1ba:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f1be:	42 79       	andi	r20, 0x92	; 146
    f1c0:	55 27       	eor	r21, r21
    f1c2:	66 27       	eor	r22, r22
    f1c4:	77 27       	eor	r23, r23
    f1c6:	45 2b       	or	r20, r21
    f1c8:	46 2b       	or	r20, r22
    f1ca:	47 2b       	or	r20, r23
    f1cc:	19 f0       	breq	.+6      	; 0xf1d4 <chmod+0x1e>
    f1ce:	80 e0       	ldi	r24, 0x00	; 0
    f1d0:	90 e0       	ldi	r25, 0x00	; 0
    f1d2:	08 95       	ret
    f1d4:	41 e0       	ldi	r20, 0x01	; 1
    f1d6:	61 e0       	ldi	r22, 0x01	; 1
    f1d8:	0e 94 65 69 	call	0xd2ca	; 0xd2ca <f_chmod>
    f1dc:	00 97       	sbiw	r24, 0x00	; 0
    f1de:	b9 f3       	breq	.-18     	; 0xf1ce <chmod+0x18>
    f1e0:	84 31       	cpi	r24, 0x14	; 20
    f1e2:	91 05       	cpc	r25, r1
    f1e4:	40 f4       	brcc	.+16     	; 0xf1f6 <chmod+0x40>
    f1e6:	fc 01       	movw	r30, r24
    f1e8:	ef 55       	subi	r30, 0x5F	; 95
    f1ea:	f4 4f       	sbci	r31, 0xF4	; 244
    f1ec:	80 81       	ld	r24, Z
    f1ee:	08 2e       	mov	r0, r24
    f1f0:	00 0c       	add	r0, r0
    f1f2:	99 0b       	sbc	r25, r25
    f1f4:	02 c0       	rjmp	.+4      	; 0xf1fa <chmod+0x44>
    f1f6:	83 e2       	ldi	r24, 0x23	; 35
    f1f8:	90 e0       	ldi	r25, 0x00	; 0
    f1fa:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f1fe:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f202:	8f ef       	ldi	r24, 0xFF	; 255
    f204:	9f ef       	ldi	r25, 0xFF	; 255
    f206:	08 95       	ret

0000f208 <getcwd>:
    f208:	cf 93       	push	r28
    f20a:	df 93       	push	r29
    f20c:	d8 2f       	mov	r29, r24
    f20e:	c9 2f       	mov	r28, r25
    f210:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f214:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f218:	0e 94 df 60 	call	0xc1be	; 0xc1be <f_getcwd>
    f21c:	00 97       	sbiw	r24, 0x00	; 0
    f21e:	a1 f0       	breq	.+40     	; 0xf248 <getcwd+0x40>
    f220:	84 31       	cpi	r24, 0x14	; 20
    f222:	91 05       	cpc	r25, r1
    f224:	40 f4       	brcc	.+16     	; 0xf236 <getcwd+0x2e>
    f226:	fc 01       	movw	r30, r24
    f228:	ef 55       	subi	r30, 0x5F	; 95
    f22a:	f4 4f       	sbci	r31, 0xF4	; 244
    f22c:	80 81       	ld	r24, Z
    f22e:	08 2e       	mov	r0, r24
    f230:	00 0c       	add	r0, r0
    f232:	99 0b       	sbc	r25, r25
    f234:	02 c0       	rjmp	.+4      	; 0xf23a <getcwd+0x32>
    f236:	83 e2       	ldi	r24, 0x23	; 35
    f238:	90 e0       	ldi	r25, 0x00	; 0
    f23a:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f23e:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f242:	80 e0       	ldi	r24, 0x00	; 0
    f244:	90 e0       	ldi	r25, 0x00	; 0
    f246:	02 c0       	rjmp	.+4      	; 0xf24c <getcwd+0x44>
    f248:	8d 2f       	mov	r24, r29
    f24a:	9c 2f       	mov	r25, r28
    f24c:	df 91       	pop	r29
    f24e:	cf 91       	pop	r28
    f250:	08 95       	ret

0000f252 <mkdir>:
    f252:	cf 93       	push	r28
    f254:	df 93       	push	r29
    f256:	ec 01       	movw	r28, r24
    f258:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f25c:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f260:	41 15       	cp	r20, r1
    f262:	51 05       	cpc	r21, r1
    f264:	61 05       	cpc	r22, r1
    f266:	71 05       	cpc	r23, r1
    f268:	41 f4       	brne	.+16     	; 0xf27a <mkdir+0x28>
    f26a:	ce 01       	movw	r24, r28
    f26c:	0e 94 60 67 	call	0xcec0	; 0xcec0 <f_mkdir>
    f270:	00 97       	sbiw	r24, 0x00	; 0
    f272:	39 f4       	brne	.+14     	; 0xf282 <mkdir+0x30>
    f274:	80 e0       	ldi	r24, 0x00	; 0
    f276:	90 e0       	ldi	r25, 0x00	; 0
    f278:	17 c0       	rjmp	.+46     	; 0xf2a8 <mkdir+0x56>
    f27a:	9d df       	rcall	.-198    	; 0xf1b6 <chmod>
    f27c:	89 2b       	or	r24, r25
    f27e:	a9 f3       	breq	.-22     	; 0xf26a <mkdir+0x18>
    f280:	11 c0       	rjmp	.+34     	; 0xf2a4 <mkdir+0x52>
    f282:	84 31       	cpi	r24, 0x14	; 20
    f284:	91 05       	cpc	r25, r1
    f286:	40 f4       	brcc	.+16     	; 0xf298 <mkdir+0x46>
    f288:	fc 01       	movw	r30, r24
    f28a:	ef 55       	subi	r30, 0x5F	; 95
    f28c:	f4 4f       	sbci	r31, 0xF4	; 244
    f28e:	80 81       	ld	r24, Z
    f290:	08 2e       	mov	r0, r24
    f292:	00 0c       	add	r0, r0
    f294:	99 0b       	sbc	r25, r25
    f296:	02 c0       	rjmp	.+4      	; 0xf29c <mkdir+0x4a>
    f298:	83 e2       	ldi	r24, 0x23	; 35
    f29a:	90 e0       	ldi	r25, 0x00	; 0
    f29c:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f2a0:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f2a4:	8f ef       	ldi	r24, 0xFF	; 255
    f2a6:	9f ef       	ldi	r25, 0xFF	; 255
    f2a8:	df 91       	pop	r29
    f2aa:	cf 91       	pop	r28
    f2ac:	08 95       	ret

0000f2ae <rename>:
    f2ae:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f2b2:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f2b6:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <f_rename>
    f2ba:	00 97       	sbiw	r24, 0x00	; 0
    f2bc:	a1 f0       	breq	.+40     	; 0xf2e6 <rename+0x38>
    f2be:	84 31       	cpi	r24, 0x14	; 20
    f2c0:	91 05       	cpc	r25, r1
    f2c2:	40 f4       	brcc	.+16     	; 0xf2d4 <rename+0x26>
    f2c4:	fc 01       	movw	r30, r24
    f2c6:	ef 55       	subi	r30, 0x5F	; 95
    f2c8:	f4 4f       	sbci	r31, 0xF4	; 244
    f2ca:	80 81       	ld	r24, Z
    f2cc:	08 2e       	mov	r0, r24
    f2ce:	00 0c       	add	r0, r0
    f2d0:	99 0b       	sbc	r25, r25
    f2d2:	02 c0       	rjmp	.+4      	; 0xf2d8 <rename+0x2a>
    f2d4:	83 e2       	ldi	r24, 0x23	; 35
    f2d6:	90 e0       	ldi	r25, 0x00	; 0
    f2d8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f2dc:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f2e0:	8f ef       	ldi	r24, 0xFF	; 255
    f2e2:	9f ef       	ldi	r25, 0xFF	; 255
    f2e4:	08 95       	ret
    f2e6:	80 e0       	ldi	r24, 0x00	; 0
    f2e8:	90 e0       	ldi	r25, 0x00	; 0
    f2ea:	08 95       	ret

0000f2ec <unlink>:
    f2ec:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f2f0:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f2f4:	0e 94 b9 66 	call	0xcd72	; 0xcd72 <f_unlink>
    f2f8:	00 97       	sbiw	r24, 0x00	; 0
    f2fa:	a1 f0       	breq	.+40     	; 0xf324 <unlink+0x38>
    f2fc:	84 31       	cpi	r24, 0x14	; 20
    f2fe:	91 05       	cpc	r25, r1
    f300:	40 f4       	brcc	.+16     	; 0xf312 <unlink+0x26>
    f302:	fc 01       	movw	r30, r24
    f304:	ef 55       	subi	r30, 0x5F	; 95
    f306:	f4 4f       	sbci	r31, 0xF4	; 244
    f308:	80 81       	ld	r24, Z
    f30a:	08 2e       	mov	r0, r24
    f30c:	00 0c       	add	r0, r0
    f30e:	99 0b       	sbc	r25, r25
    f310:	02 c0       	rjmp	.+4      	; 0xf316 <unlink+0x2a>
    f312:	83 e2       	ldi	r24, 0x23	; 35
    f314:	90 e0       	ldi	r25, 0x00	; 0
    f316:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f31a:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f31e:	8f ef       	ldi	r24, 0xFF	; 255
    f320:	9f ef       	ldi	r25, 0xFF	; 255
    f322:	08 95       	ret
    f324:	80 e0       	ldi	r24, 0x00	; 0
    f326:	90 e0       	ldi	r25, 0x00	; 0
    f328:	08 95       	ret

0000f32a <rmdir>:
    f32a:	e0 cf       	rjmp	.-64     	; 0xf2ec <unlink>
    f32c:	08 95       	ret

0000f32e <closedir>:
    f32e:	0e 94 42 65 	call	0xca84	; 0xca84 <f_closedir>
    f332:	00 97       	sbiw	r24, 0x00	; 0
    f334:	a1 f0       	breq	.+40     	; 0xf35e <closedir+0x30>
    f336:	84 31       	cpi	r24, 0x14	; 20
    f338:	91 05       	cpc	r25, r1
    f33a:	40 f4       	brcc	.+16     	; 0xf34c <closedir+0x1e>
    f33c:	fc 01       	movw	r30, r24
    f33e:	ef 55       	subi	r30, 0x5F	; 95
    f340:	f4 4f       	sbci	r31, 0xF4	; 244
    f342:	80 81       	ld	r24, Z
    f344:	08 2e       	mov	r0, r24
    f346:	00 0c       	add	r0, r0
    f348:	99 0b       	sbc	r25, r25
    f34a:	02 c0       	rjmp	.+4      	; 0xf350 <closedir+0x22>
    f34c:	83 e2       	ldi	r24, 0x23	; 35
    f34e:	90 e0       	ldi	r25, 0x00	; 0
    f350:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f354:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f358:	8f ef       	ldi	r24, 0xFF	; 255
    f35a:	9f ef       	ldi	r25, 0xFF	; 255
    f35c:	08 95       	ret
    f35e:	80 e0       	ldi	r24, 0x00	; 0
    f360:	90 e0       	ldi	r25, 0x00	; 0
    f362:	08 95       	ret

0000f364 <opendir>:
    f364:	bc 01       	movw	r22, r24
    f366:	8d e3       	ldi	r24, 0x3D	; 61
    f368:	99 e1       	ldi	r25, 0x19	; 25
    f36a:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <f_opendir>
    f36e:	00 97       	sbiw	r24, 0x00	; 0
    f370:	a1 f0       	breq	.+40     	; 0xf39a <opendir+0x36>
    f372:	84 31       	cpi	r24, 0x14	; 20
    f374:	91 05       	cpc	r25, r1
    f376:	40 f4       	brcc	.+16     	; 0xf388 <opendir+0x24>
    f378:	fc 01       	movw	r30, r24
    f37a:	ef 55       	subi	r30, 0x5F	; 95
    f37c:	f4 4f       	sbci	r31, 0xF4	; 244
    f37e:	80 81       	ld	r24, Z
    f380:	08 2e       	mov	r0, r24
    f382:	00 0c       	add	r0, r0
    f384:	99 0b       	sbc	r25, r25
    f386:	02 c0       	rjmp	.+4      	; 0xf38c <opendir+0x28>
    f388:	83 e2       	ldi	r24, 0x23	; 35
    f38a:	90 e0       	ldi	r25, 0x00	; 0
    f38c:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f390:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f394:	80 e0       	ldi	r24, 0x00	; 0
    f396:	90 e0       	ldi	r25, 0x00	; 0
    f398:	08 95       	ret
    f39a:	8d e3       	ldi	r24, 0x3D	; 61
    f39c:	99 e1       	ldi	r25, 0x19	; 25
    f39e:	08 95       	ret

0000f3a0 <readdir>:
    f3a0:	a6 e1       	ldi	r26, 0x16	; 22
    f3a2:	b1 e0       	ldi	r27, 0x01	; 1
    f3a4:	e6 ed       	ldi	r30, 0xD6	; 214
    f3a6:	f9 e7       	ldi	r31, 0x79	; 121
    f3a8:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    f3ac:	10 92 3e 18 	sts	0x183E, r1	; 0x80183e <_de>
    f3b0:	be 01       	movw	r22, r28
    f3b2:	6f 5f       	subi	r22, 0xFF	; 255
    f3b4:	7f 4f       	sbci	r23, 0xFF	; 255
    f3b6:	0e 94 57 65 	call	0xcaae	; 0xcaae <f_readdir>
    f3ba:	00 97       	sbiw	r24, 0x00	; 0
    f3bc:	a1 f0       	breq	.+40     	; 0xf3e6 <readdir+0x46>
    f3be:	84 31       	cpi	r24, 0x14	; 20
    f3c0:	91 05       	cpc	r25, r1
    f3c2:	40 f4       	brcc	.+16     	; 0xf3d4 <readdir+0x34>
    f3c4:	fc 01       	movw	r30, r24
    f3c6:	ef 55       	subi	r30, 0x5F	; 95
    f3c8:	f4 4f       	sbci	r31, 0xF4	; 244
    f3ca:	80 81       	ld	r24, Z
    f3cc:	08 2e       	mov	r0, r24
    f3ce:	00 0c       	add	r0, r0
    f3d0:	99 0b       	sbc	r25, r25
    f3d2:	02 c0       	rjmp	.+4      	; 0xf3d8 <readdir+0x38>
    f3d4:	83 e2       	ldi	r24, 0x23	; 35
    f3d6:	90 e0       	ldi	r25, 0x00	; 0
    f3d8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f3dc:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f3e0:	80 e0       	ldi	r24, 0x00	; 0
    f3e2:	90 e0       	ldi	r25, 0x00	; 0
    f3e4:	16 c0       	rjmp	.+44     	; 0xf412 <readdir+0x72>
    f3e6:	be 01       	movw	r22, r28
    f3e8:	69 5e       	subi	r22, 0xE9	; 233
    f3ea:	7f 4f       	sbci	r23, 0xFF	; 255
    f3ec:	fb 01       	movw	r30, r22
    f3ee:	01 90       	ld	r0, Z+
    f3f0:	00 20       	and	r0, r0
    f3f2:	e9 f7       	brne	.-6      	; 0xf3ee <readdir+0x4e>
    f3f4:	31 97       	sbiw	r30, 0x01	; 1
    f3f6:	8f 01       	movw	r16, r30
    f3f8:	06 1b       	sub	r16, r22
    f3fa:	17 0b       	sbc	r17, r23
    f3fc:	a8 01       	movw	r20, r16
    f3fe:	8e e3       	ldi	r24, 0x3E	; 62
    f400:	98 e1       	ldi	r25, 0x18	; 24
    f402:	0e 94 a2 32 	call	0x6544	; 0x6544 <strncpy>
    f406:	f8 01       	movw	r30, r16
    f408:	e2 5c       	subi	r30, 0xC2	; 194
    f40a:	f7 4e       	sbci	r31, 0xE7	; 231
    f40c:	10 82       	st	Z, r1
    f40e:	8e e3       	ldi	r24, 0x3E	; 62
    f410:	98 e1       	ldi	r25, 0x18	; 24
    f412:	ca 5e       	subi	r28, 0xEA	; 234
    f414:	de 4f       	sbci	r29, 0xFE	; 254
    f416:	e4 e0       	ldi	r30, 0x04	; 4
    f418:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

0000f41c <perror>:
    f41c:	ad b7       	in	r26, 0x3d	; 61
    f41e:	be b7       	in	r27, 0x3e	; 62
    f420:	17 97       	sbiw	r26, 0x07	; 7
    f422:	0f b6       	in	r0, 0x3f	; 63
    f424:	f8 94       	cli
    f426:	be bf       	out	0x3e, r27	; 62
    f428:	0f be       	out	0x3f, r0	; 63
    f42a:	ad bf       	out	0x3d, r26	; 61
    f42c:	20 91 c9 1c 	lds	r18, 0x1CC9	; 0x801cc9 <errno>
    f430:	30 91 ca 1c 	lds	r19, 0x1CCA	; 0x801cca <errno+0x1>
    f434:	23 32       	cpi	r18, 0x23	; 35
    f436:	31 05       	cpc	r19, r1
    f438:	40 f4       	brcc	.+16     	; 0xf44a <perror+0x2e>
    f43a:	22 0f       	add	r18, r18
    f43c:	33 1f       	adc	r19, r19
    f43e:	f9 01       	movw	r30, r18
    f440:	ea 5c       	subi	r30, 0xCA	; 202
    f442:	fe 4f       	sbci	r31, 0xFE	; 254
    f444:	20 81       	ld	r18, Z
    f446:	31 81       	ldd	r19, Z+1	; 0x01
    f448:	04 c0       	rjmp	.+8      	; 0xf452 <perror+0x36>
    f44a:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f44e:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f452:	00 97       	sbiw	r24, 0x00	; 0
    f454:	99 f0       	breq	.+38     	; 0xf47c <perror+0x60>
    f456:	fc 01       	movw	r30, r24
    f458:	40 81       	ld	r20, Z
    f45a:	44 23       	and	r20, r20
    f45c:	79 f0       	breq	.+30     	; 0xf47c <perror+0x60>
    f45e:	ed b7       	in	r30, 0x3d	; 61
    f460:	fe b7       	in	r31, 0x3e	; 62
    f462:	37 83       	std	Z+7, r19	; 0x07
    f464:	26 83       	std	Z+6, r18	; 0x06
    f466:	95 83       	std	Z+5, r25	; 0x05
    f468:	84 83       	std	Z+4, r24	; 0x04
    f46a:	8e ea       	ldi	r24, 0xAE	; 174
    f46c:	9c e0       	ldi	r25, 0x0C	; 12
    f46e:	a0 e0       	ldi	r26, 0x00	; 0
    f470:	81 83       	std	Z+1, r24	; 0x01
    f472:	92 83       	std	Z+2, r25	; 0x02
    f474:	a3 83       	std	Z+3, r26	; 0x03
    f476:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    f47a:	0c c0       	rjmp	.+24     	; 0xf494 <perror+0x78>
    f47c:	ed b7       	in	r30, 0x3d	; 61
    f47e:	fe b7       	in	r31, 0x3e	; 62
    f480:	35 83       	std	Z+5, r19	; 0x05
    f482:	24 83       	std	Z+4, r18	; 0x04
    f484:	8a ea       	ldi	r24, 0xAA	; 170
    f486:	9c e0       	ldi	r25, 0x0C	; 12
    f488:	a0 e0       	ldi	r26, 0x00	; 0
    f48a:	81 83       	std	Z+1, r24	; 0x01
    f48c:	92 83       	std	Z+2, r25	; 0x02
    f48e:	a3 83       	std	Z+3, r26	; 0x03
    f490:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    f494:	ad b7       	in	r26, 0x3d	; 61
    f496:	be b7       	in	r27, 0x3e	; 62
    f498:	17 96       	adiw	r26, 0x07	; 7
    f49a:	0f b6       	in	r0, 0x3f	; 63
    f49c:	f8 94       	cli
    f49e:	be bf       	out	0x3e, r27	; 62
    f4a0:	0f be       	out	0x3f, r0	; 63
    f4a2:	ad bf       	out	0x3d, r26	; 61
    f4a4:	08 95       	ret

0000f4a6 <fdevopen>:
    f4a6:	0f 93       	push	r16
    f4a8:	1f 93       	push	r17
    f4aa:	cf 93       	push	r28
    f4ac:	df 93       	push	r29
    f4ae:	00 97       	sbiw	r24, 0x00	; 0
    f4b0:	31 f4       	brne	.+12     	; 0xf4be <fdevopen+0x18>
    f4b2:	61 15       	cp	r22, r1
    f4b4:	71 05       	cpc	r23, r1
    f4b6:	19 f4       	brne	.+6      	; 0xf4be <fdevopen+0x18>
    f4b8:	80 e0       	ldi	r24, 0x00	; 0
    f4ba:	90 e0       	ldi	r25, 0x00	; 0
    f4bc:	3a c0       	rjmp	.+116    	; 0xf532 <fdevopen+0x8c>
    f4be:	8b 01       	movw	r16, r22
    f4c0:	ec 01       	movw	r28, r24
    f4c2:	6e e0       	ldi	r22, 0x0E	; 14
    f4c4:	70 e0       	ldi	r23, 0x00	; 0
    f4c6:	81 e0       	ldi	r24, 0x01	; 1
    f4c8:	90 e0       	ldi	r25, 0x00	; 0
    f4ca:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
    f4ce:	fc 01       	movw	r30, r24
    f4d0:	89 2b       	or	r24, r25
    f4d2:	91 f3       	breq	.-28     	; 0xf4b8 <fdevopen+0x12>
    f4d4:	80 e8       	ldi	r24, 0x80	; 128
    f4d6:	83 83       	std	Z+3, r24	; 0x03
    f4d8:	01 15       	cp	r16, r1
    f4da:	11 05       	cpc	r17, r1
    f4dc:	71 f0       	breq	.+28     	; 0xf4fa <fdevopen+0x54>
    f4de:	13 87       	std	Z+11, r17	; 0x0b
    f4e0:	02 87       	std	Z+10, r16	; 0x0a
    f4e2:	81 e8       	ldi	r24, 0x81	; 129
    f4e4:	83 83       	std	Z+3, r24	; 0x03
    f4e6:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    f4ea:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    f4ee:	89 2b       	or	r24, r25
    f4f0:	21 f4       	brne	.+8      	; 0xf4fa <fdevopen+0x54>
    f4f2:	f0 93 cc 1c 	sts	0x1CCC, r31	; 0x801ccc <__iob+0x1>
    f4f6:	e0 93 cb 1c 	sts	0x1CCB, r30	; 0x801ccb <__iob>
    f4fa:	20 97       	sbiw	r28, 0x00	; 0
    f4fc:	c9 f0       	breq	.+50     	; 0xf530 <fdevopen+0x8a>
    f4fe:	d1 87       	std	Z+9, r29	; 0x09
    f500:	c0 87       	std	Z+8, r28	; 0x08
    f502:	83 81       	ldd	r24, Z+3	; 0x03
    f504:	82 60       	ori	r24, 0x02	; 2
    f506:	83 83       	std	Z+3, r24	; 0x03
    f508:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
    f50c:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
    f510:	89 2b       	or	r24, r25
    f512:	21 f4       	brne	.+8      	; 0xf51c <fdevopen+0x76>
    f514:	f0 93 ce 1c 	sts	0x1CCE, r31	; 0x801cce <__iob+0x3>
    f518:	e0 93 cd 1c 	sts	0x1CCD, r30	; 0x801ccd <__iob+0x2>
    f51c:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x4>
    f520:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x5>
    f524:	89 2b       	or	r24, r25
    f526:	21 f4       	brne	.+8      	; 0xf530 <fdevopen+0x8a>
    f528:	f0 93 d0 1c 	sts	0x1CD0, r31	; 0x801cd0 <__iob+0x5>
    f52c:	e0 93 cf 1c 	sts	0x1CCF, r30	; 0x801ccf <__iob+0x4>
    f530:	cf 01       	movw	r24, r30
    f532:	df 91       	pop	r29
    f534:	cf 91       	pop	r28
    f536:	1f 91       	pop	r17
    f538:	0f 91       	pop	r16
    f53a:	08 95       	ret

0000f53c <fat_time_to_unix>:
    f53c:	a6 e1       	ldi	r26, 0x16	; 22
    f53e:	b0 e0       	ldi	r27, 0x00	; 0
    f540:	e4 ea       	ldi	r30, 0xA4	; 164
    f542:	fa e7       	ldi	r31, 0x7A	; 122
    f544:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    f548:	fe 01       	movw	r30, r28
    f54a:	31 96       	adiw	r30, 0x01	; 1
    f54c:	26 e1       	ldi	r18, 0x16	; 22
    f54e:	df 01       	movw	r26, r30
    f550:	1d 92       	st	X+, r1
    f552:	2a 95       	dec	r18
    f554:	e9 f7       	brne	.-6      	; 0xf550 <fat_time_to_unix+0x14>
    f556:	9b 01       	movw	r18, r22
    f558:	22 0f       	add	r18, r18
    f55a:	33 1f       	adc	r19, r19
    f55c:	2e 73       	andi	r18, 0x3E	; 62
    f55e:	33 27       	eor	r19, r19
    f560:	3a 83       	std	Y+2, r19	; 0x02
    f562:	29 83       	std	Y+1, r18	; 0x01
    f564:	9b 01       	movw	r18, r22
    f566:	55 e0       	ldi	r21, 0x05	; 5
    f568:	36 95       	lsr	r19
    f56a:	27 95       	ror	r18
    f56c:	5a 95       	dec	r21
    f56e:	e1 f7       	brne	.-8      	; 0xf568 <fat_time_to_unix+0x2c>
    f570:	2f 73       	andi	r18, 0x3F	; 63
    f572:	33 27       	eor	r19, r19
    f574:	3c 83       	std	Y+4, r19	; 0x04
    f576:	2b 83       	std	Y+3, r18	; 0x03
    f578:	27 2f       	mov	r18, r23
    f57a:	26 95       	lsr	r18
    f57c:	26 95       	lsr	r18
    f57e:	26 95       	lsr	r18
    f580:	2d 83       	std	Y+5, r18	; 0x05
    f582:	1e 82       	std	Y+6, r1	; 0x06
    f584:	9c 01       	movw	r18, r24
    f586:	2f 71       	andi	r18, 0x1F	; 31
    f588:	33 27       	eor	r19, r19
    f58a:	38 87       	std	Y+8, r19	; 0x08
    f58c:	2f 83       	std	Y+7, r18	; 0x07
    f58e:	9c 01       	movw	r18, r24
    f590:	65 e0       	ldi	r22, 0x05	; 5
    f592:	36 95       	lsr	r19
    f594:	27 95       	ror	r18
    f596:	6a 95       	dec	r22
    f598:	e1 f7       	brne	.-8      	; 0xf592 <fat_time_to_unix+0x56>
    f59a:	2f 70       	andi	r18, 0x0F	; 15
    f59c:	33 27       	eor	r19, r19
    f59e:	21 50       	subi	r18, 0x01	; 1
    f5a0:	31 09       	sbc	r19, r1
    f5a2:	3a 87       	std	Y+10, r19	; 0x0a
    f5a4:	29 87       	std	Y+9, r18	; 0x09
    f5a6:	9c 01       	movw	r18, r24
    f5a8:	23 2f       	mov	r18, r19
    f5aa:	33 27       	eor	r19, r19
    f5ac:	26 95       	lsr	r18
    f5ae:	20 5b       	subi	r18, 0xB0	; 176
    f5b0:	3f 4f       	sbci	r19, 0xFF	; 255
    f5b2:	3c 87       	std	Y+12, r19	; 0x0c
    f5b4:	2b 87       	std	Y+11, r18	; 0x0b
    f5b6:	cf 01       	movw	r24, r30
    f5b8:	0e 94 bd 3b 	call	0x777a	; 0x777a <timegm>
    f5bc:	66 96       	adiw	r28, 0x16	; 22
    f5be:	e2 e0       	ldi	r30, 0x02	; 2
    f5c0:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0000f5c4 <stat>:
    f5c4:	a6 e1       	ldi	r26, 0x16	; 22
    f5c6:	b1 e0       	ldi	r27, 0x01	; 1
    f5c8:	e8 ee       	ldi	r30, 0xE8	; 232
    f5ca:	fa e7       	ldi	r31, 0x7A	; 122
    f5cc:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
    f5d0:	6c 01       	movw	r12, r24
    f5d2:	8b 01       	movw	r16, r22
    f5d4:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f5d8:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f5dc:	67 ef       	ldi	r22, 0xF7	; 247
    f5de:	78 e0       	ldi	r23, 0x08	; 8
    f5e0:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
    f5e4:	89 2b       	or	r24, r25
    f5e6:	01 f1       	breq	.+64     	; 0xf628 <stat+0x64>
    f5e8:	f8 01       	movw	r30, r16
    f5ea:	14 a2       	std	Z+36, r1	; 0x24
    f5ec:	15 a2       	std	Z+37, r1	; 0x25
    f5ee:	16 a2       	std	Z+38, r1	; 0x26
    f5f0:	17 a2       	std	Z+39, r1	; 0x27
    f5f2:	10 a6       	std	Z+40, r1	; 0x28
    f5f4:	11 a6       	std	Z+41, r1	; 0x29
    f5f6:	12 a6       	std	Z+42, r1	; 0x2a
    f5f8:	13 a6       	std	Z+43, r1	; 0x2b
    f5fa:	14 a6       	std	Z+44, r1	; 0x2c
    f5fc:	15 a6       	std	Z+45, r1	; 0x2d
    f5fe:	16 a6       	std	Z+46, r1	; 0x2e
    f600:	17 a6       	std	Z+47, r1	; 0x2f
    f602:	11 8a       	std	Z+17, r1	; 0x11
    f604:	10 8a       	std	Z+16, r1	; 0x10
    f606:	13 8a       	std	Z+19, r1	; 0x13
    f608:	12 8a       	std	Z+18, r1	; 0x12
    f60a:	10 8e       	std	Z+24, r1	; 0x18
    f60c:	11 8e       	std	Z+25, r1	; 0x19
    f60e:	12 8e       	std	Z+26, r1	; 0x1a
    f610:	13 8e       	std	Z+27, r1	; 0x1b
    f612:	80 e0       	ldi	r24, 0x00	; 0
    f614:	90 e4       	ldi	r25, 0x40	; 64
    f616:	a0 e0       	ldi	r26, 0x00	; 0
    f618:	b0 e0       	ldi	r27, 0x00	; 0
    f61a:	80 87       	std	Z+8, r24	; 0x08
    f61c:	91 87       	std	Z+9, r25	; 0x09
    f61e:	a2 87       	std	Z+10, r26	; 0x0a
    f620:	b3 87       	std	Z+11, r27	; 0x0b
    f622:	e1 2c       	mov	r14, r1
    f624:	f1 2c       	mov	r15, r1
    f626:	62 c0       	rjmp	.+196    	; 0xf6ec <stat+0x128>
    f628:	61 ea       	ldi	r22, 0xA1	; 161
    f62a:	78 e0       	ldi	r23, 0x08	; 8
    f62c:	c6 01       	movw	r24, r12
    f62e:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
    f632:	89 2b       	or	r24, r25
    f634:	c9 f6       	brne	.-78     	; 0xf5e8 <stat+0x24>
    f636:	63 ef       	ldi	r22, 0xF3	; 243
    f638:	72 e1       	ldi	r23, 0x12	; 18
    f63a:	c6 01       	movw	r24, r12
    f63c:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
    f640:	7c 01       	movw	r14, r24
    f642:	89 2b       	or	r24, r25
    f644:	89 f6       	brne	.-94     	; 0xf5e8 <stat+0x24>
    f646:	be 01       	movw	r22, r28
    f648:	6f 5f       	subi	r22, 0xFF	; 255
    f64a:	7f 4f       	sbci	r23, 0xFF	; 255
    f64c:	c6 01       	movw	r24, r12
    f64e:	0e 94 9b 65 	call	0xcb36	; 0xcb36 <f_stat>
    f652:	00 97       	sbiw	r24, 0x00	; 0
    f654:	a9 f0       	breq	.+42     	; 0xf680 <stat+0xbc>
    f656:	84 31       	cpi	r24, 0x14	; 20
    f658:	91 05       	cpc	r25, r1
    f65a:	40 f4       	brcc	.+16     	; 0xf66c <stat+0xa8>
    f65c:	fc 01       	movw	r30, r24
    f65e:	ef 55       	subi	r30, 0x5F	; 95
    f660:	f4 4f       	sbci	r31, 0xF4	; 244
    f662:	80 81       	ld	r24, Z
    f664:	08 2e       	mov	r0, r24
    f666:	00 0c       	add	r0, r0
    f668:	99 0b       	sbc	r25, r25
    f66a:	02 c0       	rjmp	.+4      	; 0xf670 <stat+0xac>
    f66c:	83 e2       	ldi	r24, 0x23	; 35
    f66e:	90 e0       	ldi	r25, 0x00	; 0
    f670:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f674:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f678:	ee 24       	eor	r14, r14
    f67a:	ea 94       	dec	r14
    f67c:	fe 2c       	mov	r15, r14
    f67e:	36 c0       	rjmp	.+108    	; 0xf6ec <stat+0x128>
    f680:	89 81       	ldd	r24, Y+1	; 0x01
    f682:	9a 81       	ldd	r25, Y+2	; 0x02
    f684:	ab 81       	ldd	r26, Y+3	; 0x03
    f686:	bc 81       	ldd	r27, Y+4	; 0x04
    f688:	f8 01       	movw	r30, r16
    f68a:	80 8f       	std	Z+24, r24	; 0x18
    f68c:	91 8f       	std	Z+25, r25	; 0x19
    f68e:	a2 8f       	std	Z+26, r26	; 0x1a
    f690:	b3 8f       	std	Z+27, r27	; 0x1b
    f692:	6f 81       	ldd	r22, Y+7	; 0x07
    f694:	78 85       	ldd	r23, Y+8	; 0x08
    f696:	8d 81       	ldd	r24, Y+5	; 0x05
    f698:	9e 81       	ldd	r25, Y+6	; 0x06
    f69a:	50 df       	rcall	.-352    	; 0xf53c <fat_time_to_unix>
    f69c:	f8 01       	movw	r30, r16
    f69e:	64 a3       	std	Z+36, r22	; 0x24
    f6a0:	75 a3       	std	Z+37, r23	; 0x25
    f6a2:	86 a3       	std	Z+38, r24	; 0x26
    f6a4:	97 a3       	std	Z+39, r25	; 0x27
    f6a6:	60 a7       	std	Z+40, r22	; 0x28
    f6a8:	71 a7       	std	Z+41, r23	; 0x29
    f6aa:	82 a7       	std	Z+42, r24	; 0x2a
    f6ac:	93 a7       	std	Z+43, r25	; 0x2b
    f6ae:	64 a7       	std	Z+44, r22	; 0x2c
    f6b0:	75 a7       	std	Z+45, r23	; 0x2d
    f6b2:	86 a7       	std	Z+46, r24	; 0x2e
    f6b4:	97 a7       	std	Z+47, r25	; 0x2f
    f6b6:	29 85       	ldd	r18, Y+9	; 0x09
    f6b8:	20 fd       	sbrc	r18, 0
    f6ba:	03 c0       	rjmp	.+6      	; 0xf6c2 <stat+0xfe>
    f6bc:	8f ef       	ldi	r24, 0xFF	; 255
    f6be:	91 e0       	ldi	r25, 0x01	; 1
    f6c0:	02 c0       	rjmp	.+4      	; 0xf6c6 <stat+0x102>
    f6c2:	8d e6       	ldi	r24, 0x6D	; 109
    f6c4:	91 e0       	ldi	r25, 0x01	; 1
    f6c6:	48 ee       	ldi	r20, 0xE8	; 232
    f6c8:	53 e0       	ldi	r21, 0x03	; 3
    f6ca:	f8 01       	movw	r30, r16
    f6cc:	51 8b       	std	Z+17, r21	; 0x11
    f6ce:	40 8b       	std	Z+16, r20	; 0x10
    f6d0:	53 8b       	std	Z+19, r21	; 0x13
    f6d2:	42 8b       	std	Z+18, r20	; 0x12
    f6d4:	24 ff       	sbrs	r18, 4
    f6d6:	02 c0       	rjmp	.+4      	; 0xf6dc <stat+0x118>
    f6d8:	90 64       	ori	r25, 0x40	; 64
    f6da:	01 c0       	rjmp	.+2      	; 0xf6de <stat+0x11a>
    f6dc:	90 68       	ori	r25, 0x80	; 128
    f6de:	a0 e0       	ldi	r26, 0x00	; 0
    f6e0:	b0 e0       	ldi	r27, 0x00	; 0
    f6e2:	f8 01       	movw	r30, r16
    f6e4:	80 87       	std	Z+8, r24	; 0x08
    f6e6:	91 87       	std	Z+9, r25	; 0x09
    f6e8:	a2 87       	std	Z+10, r26	; 0x0a
    f6ea:	b3 87       	std	Z+11, r27	; 0x0b
    f6ec:	c7 01       	movw	r24, r14
    f6ee:	ca 5e       	subi	r28, 0xEA	; 234
    f6f0:	de 4f       	sbci	r29, 0xFE	; 254
    f6f2:	e8 e0       	ldi	r30, 0x08	; 8
    f6f4:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0000f6f8 <unix_time_to_fat>:
    f6f8:	a4 e0       	ldi	r26, 0x04	; 4
    f6fa:	b0 e0       	ldi	r27, 0x00	; 0
    f6fc:	e2 e8       	ldi	r30, 0x82	; 130
    f6fe:	fb e7       	ldi	r31, 0x7B	; 123
    f700:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
    f704:	69 83       	std	Y+1, r22	; 0x01
    f706:	7a 83       	std	Y+2, r23	; 0x02
    f708:	8b 83       	std	Y+3, r24	; 0x03
    f70a:	9c 83       	std	Y+4, r25	; 0x04
    f70c:	7a 01       	movw	r14, r20
    f70e:	89 01       	movw	r16, r18
    f710:	ce 01       	movw	r24, r28
    f712:	01 96       	adiw	r24, 0x01	; 1
    f714:	0e 94 fe 38 	call	0x71fc	; 0x71fc <gmtime>
    f718:	fc 01       	movw	r30, r24
    f71a:	22 85       	ldd	r18, Z+10	; 0x0a
    f71c:	33 85       	ldd	r19, Z+11	; 0x0b
    f71e:	20 55       	subi	r18, 0x50	; 80
    f720:	31 09       	sbc	r19, r1
    f722:	c9 01       	movw	r24, r18
    f724:	98 2f       	mov	r25, r24
    f726:	88 27       	eor	r24, r24
    f728:	99 0f       	add	r25, r25
    f72a:	20 85       	ldd	r18, Z+8	; 0x08
    f72c:	31 85       	ldd	r19, Z+9	; 0x09
    f72e:	2f 5f       	subi	r18, 0xFF	; 255
    f730:	3f 4f       	sbci	r19, 0xFF	; 255
    f732:	45 e0       	ldi	r20, 0x05	; 5
    f734:	22 0f       	add	r18, r18
    f736:	33 1f       	adc	r19, r19
    f738:	4a 95       	dec	r20
    f73a:	e1 f7       	brne	.-8      	; 0xf734 <unix_time_to_fat+0x3c>
    f73c:	28 2b       	or	r18, r24
    f73e:	39 2b       	or	r19, r25
    f740:	86 81       	ldd	r24, Z+6	; 0x06
    f742:	97 81       	ldd	r25, Z+7	; 0x07
    f744:	28 2b       	or	r18, r24
    f746:	39 2b       	or	r19, r25
    f748:	d7 01       	movw	r26, r14
    f74a:	2d 93       	st	X+, r18
    f74c:	3c 93       	st	X, r19
    f74e:	84 81       	ldd	r24, Z+4	; 0x04
    f750:	20 e0       	ldi	r18, 0x00	; 0
    f752:	30 e0       	ldi	r19, 0x00	; 0
    f754:	38 2f       	mov	r19, r24
    f756:	33 0f       	add	r19, r19
    f758:	33 0f       	add	r19, r19
    f75a:	33 0f       	add	r19, r19
    f75c:	82 81       	ldd	r24, Z+2	; 0x02
    f75e:	93 81       	ldd	r25, Z+3	; 0x03
    f760:	55 e0       	ldi	r21, 0x05	; 5
    f762:	88 0f       	add	r24, r24
    f764:	99 1f       	adc	r25, r25
    f766:	5a 95       	dec	r21
    f768:	e1 f7       	brne	.-8      	; 0xf762 <unix_time_to_fat+0x6a>
    f76a:	82 2b       	or	r24, r18
    f76c:	93 2b       	or	r25, r19
    f76e:	20 81       	ld	r18, Z
    f770:	31 81       	ldd	r19, Z+1	; 0x01
    f772:	36 95       	lsr	r19
    f774:	27 95       	ror	r18
    f776:	82 2b       	or	r24, r18
    f778:	93 2b       	or	r25, r19
    f77a:	f8 01       	movw	r30, r16
    f77c:	91 83       	std	Z+1, r25	; 0x01
    f77e:	80 83       	st	Z, r24
    f780:	24 96       	adiw	r28, 0x04	; 4
    f782:	e6 e0       	ldi	r30, 0x06	; 6
    f784:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

0000f788 <utime>:
    f788:	aa e1       	ldi	r26, 0x1A	; 26
    f78a:	b1 e0       	ldi	r27, 0x01	; 1
    f78c:	ea ec       	ldi	r30, 0xCA	; 202
    f78e:	fb e7       	ldi	r31, 0x7B	; 123
    f790:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
    f794:	8c 01       	movw	r16, r24
    f796:	61 15       	cp	r22, r1
    f798:	71 05       	cpc	r23, r1
    f79a:	31 f0       	breq	.+12     	; 0xf7a8 <utime+0x20>
    f79c:	fb 01       	movw	r30, r22
    f79e:	64 81       	ldd	r22, Z+4	; 0x04
    f7a0:	75 81       	ldd	r23, Z+5	; 0x05
    f7a2:	86 81       	ldd	r24, Z+6	; 0x06
    f7a4:	97 81       	ldd	r25, Z+7	; 0x07
    f7a6:	04 c0       	rjmp	.+8      	; 0xf7b0 <utime+0x28>
    f7a8:	80 e0       	ldi	r24, 0x00	; 0
    f7aa:	90 e0       	ldi	r25, 0x00	; 0
    f7ac:	0e 94 58 39 	call	0x72b0	; 0x72b0 <time>
    f7b0:	9e 01       	movw	r18, r28
    f7b2:	29 5e       	subi	r18, 0xE9	; 233
    f7b4:	3e 4f       	sbci	r19, 0xFE	; 254
    f7b6:	ae 01       	movw	r20, r28
    f7b8:	47 5e       	subi	r20, 0xE7	; 231
    f7ba:	5e 4f       	sbci	r21, 0xFE	; 254
    f7bc:	9d df       	rcall	.-198    	; 0xf6f8 <unix_time_to_fat>
    f7be:	c7 5e       	subi	r28, 0xE7	; 231
    f7c0:	de 4f       	sbci	r29, 0xFE	; 254
    f7c2:	88 81       	ld	r24, Y
    f7c4:	99 81       	ldd	r25, Y+1	; 0x01
    f7c6:	c9 51       	subi	r28, 0x19	; 25
    f7c8:	d1 40       	sbci	r29, 0x01	; 1
    f7ca:	9e 83       	std	Y+6, r25	; 0x06
    f7cc:	8d 83       	std	Y+5, r24	; 0x05
    f7ce:	c9 5e       	subi	r28, 0xE9	; 233
    f7d0:	de 4f       	sbci	r29, 0xFE	; 254
    f7d2:	88 81       	ld	r24, Y
    f7d4:	99 81       	ldd	r25, Y+1	; 0x01
    f7d6:	c7 51       	subi	r28, 0x17	; 23
    f7d8:	d1 40       	sbci	r29, 0x01	; 1
    f7da:	98 87       	std	Y+8, r25	; 0x08
    f7dc:	8f 83       	std	Y+7, r24	; 0x07
    f7de:	be 01       	movw	r22, r28
    f7e0:	6f 5f       	subi	r22, 0xFF	; 255
    f7e2:	7f 4f       	sbci	r23, 0xFF	; 255
    f7e4:	c8 01       	movw	r24, r16
    f7e6:	0e 94 b2 69 	call	0xd364	; 0xd364 <f_utime>
    f7ea:	84 31       	cpi	r24, 0x14	; 20
    f7ec:	91 05       	cpc	r25, r1
    f7ee:	40 f4       	brcc	.+16     	; 0xf800 <utime+0x78>
    f7f0:	fc 01       	movw	r30, r24
    f7f2:	ef 55       	subi	r30, 0x5F	; 95
    f7f4:	f4 4f       	sbci	r31, 0xF4	; 244
    f7f6:	80 81       	ld	r24, Z
    f7f8:	08 2e       	mov	r0, r24
    f7fa:	00 0c       	add	r0, r0
    f7fc:	99 0b       	sbc	r25, r25
    f7fe:	02 c0       	rjmp	.+4      	; 0xf804 <utime+0x7c>
    f800:	83 e2       	ldi	r24, 0x23	; 35
    f802:	90 e0       	ldi	r25, 0x00	; 0
    f804:	c6 5e       	subi	r28, 0xE6	; 230
    f806:	de 4f       	sbci	r29, 0xFE	; 254
    f808:	e4 e0       	ldi	r30, 0x04	; 4
    f80a:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

0000f80e <fileno_to_fatfs>:
    f80e:	83 30       	cpi	r24, 0x03	; 3
    f810:	91 05       	cpc	r25, r1
    f812:	48 f4       	brcc	.+18     	; 0xf826 <fileno_to_fatfs+0x18>
    f814:	89 e0       	ldi	r24, 0x09	; 9
    f816:	90 e0       	ldi	r25, 0x00	; 0
    f818:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f81c:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f820:	80 e0       	ldi	r24, 0x00	; 0
    f822:	90 e0       	ldi	r25, 0x00	; 0
    f824:	08 95       	ret
    f826:	60 dc       	rcall	.-1856   	; 0xf0e8 <fileno_to_stream>
    f828:	00 97       	sbiw	r24, 0x00	; 0
    f82a:	d1 f3       	breq	.-12     	; 0xf820 <fileno_to_fatfs+0x12>
    f82c:	fc 01       	movw	r30, r24
    f82e:	84 85       	ldd	r24, Z+12	; 0x0c
    f830:	95 85       	ldd	r25, Z+13	; 0x0d
    f832:	00 97       	sbiw	r24, 0x00	; 0
    f834:	79 f3       	breq	.-34     	; 0xf814 <fileno_to_fatfs+0x6>
    f836:	08 95       	ret

0000f838 <ftell>:
    f838:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f83c:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f840:	37 dc       	rcall	.-1938   	; 0xf0b0 <fileno>
    f842:	83 30       	cpi	r24, 0x03	; 3
    f844:	91 05       	cpc	r25, r1
    f846:	48 f0       	brcs	.+18     	; 0xf85a <ftell+0x22>
    f848:	e2 df       	rcall	.-60     	; 0xf80e <fileno_to_fatfs>
    f84a:	00 97       	sbiw	r24, 0x00	; 0
    f84c:	51 f4       	brne	.+20     	; 0xf862 <ftell+0x2a>
    f84e:	89 e0       	ldi	r24, 0x09	; 9
    f850:	90 e0       	ldi	r25, 0x00	; 0
    f852:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f856:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f85a:	6f ef       	ldi	r22, 0xFF	; 255
    f85c:	7f ef       	ldi	r23, 0xFF	; 255
    f85e:	cb 01       	movw	r24, r22
    f860:	08 95       	ret
    f862:	fc 01       	movw	r30, r24
    f864:	60 89       	ldd	r22, Z+16	; 0x10
    f866:	71 89       	ldd	r23, Z+17	; 0x11
    f868:	82 89       	ldd	r24, Z+18	; 0x12
    f86a:	93 89       	ldd	r25, Z+19	; 0x13
    f86c:	08 95       	ret

0000f86e <lseek>:
    f86e:	a3 e0       	ldi	r26, 0x03	; 3
    f870:	b0 e0       	ldi	r27, 0x00	; 0
    f872:	ed e3       	ldi	r30, 0x3D	; 61
    f874:	fc e7       	ldi	r31, 0x7C	; 124
    f876:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
    f87a:	5c 01       	movw	r10, r24
    f87c:	6a 01       	movw	r12, r20
    f87e:	7b 01       	movw	r14, r22
    f880:	89 01       	movw	r16, r18
    f882:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f886:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f88a:	c1 df       	rcall	.-126    	; 0xf80e <fileno_to_fatfs>
    f88c:	ec 01       	movw	r28, r24
    f88e:	89 2b       	or	r24, r25
    f890:	19 f4       	brne	.+6      	; 0xf898 <lseek+0x2a>
    f892:	88 e1       	ldi	r24, 0x18	; 24
    f894:	90 e0       	ldi	r25, 0x00	; 0
    f896:	26 c0       	rjmp	.+76     	; 0xf8e4 <lseek+0x76>
    f898:	83 e0       	ldi	r24, 0x03	; 3
    f89a:	a8 16       	cp	r10, r24
    f89c:	b1 04       	cpc	r11, r1
    f89e:	d0 f1       	brcs	.+116    	; 0xf914 <lseek+0xa6>
    f8a0:	c5 01       	movw	r24, r10
    f8a2:	22 dc       	rcall	.-1980   	; 0xf0e8 <fileno_to_stream>
    f8a4:	fc 01       	movw	r30, r24
    f8a6:	93 81       	ldd	r25, Z+3	; 0x03
    f8a8:	90 64       	ori	r25, 0x40	; 64
    f8aa:	93 83       	std	Z+3, r25	; 0x03
    f8ac:	02 30       	cpi	r16, 0x02	; 2
    f8ae:	11 05       	cpc	r17, r1
    f8b0:	a9 f5       	brne	.+106    	; 0xf91c <lseek+0xae>
    f8b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    f8b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    f8b6:	ac 85       	ldd	r26, Y+12	; 0x0c
    f8b8:	bd 85       	ldd	r27, Y+13	; 0x0d
    f8ba:	c8 0e       	add	r12, r24
    f8bc:	d9 1e       	adc	r13, r25
    f8be:	ea 1e       	adc	r14, r26
    f8c0:	fb 1e       	adc	r15, r27
    f8c2:	b7 01       	movw	r22, r14
    f8c4:	a6 01       	movw	r20, r12
    f8c6:	ce 01       	movw	r24, r28
    f8c8:	0e 94 15 62 	call	0xc42a	; 0xc42a <f_lseek>
    f8cc:	00 97       	sbiw	r24, 0x00	; 0
    f8ce:	79 f0       	breq	.+30     	; 0xf8ee <lseek+0x80>
    f8d0:	84 31       	cpi	r24, 0x14	; 20
    f8d2:	91 05       	cpc	r25, r1
    f8d4:	58 f5       	brcc	.+86     	; 0xf92c <lseek+0xbe>
    f8d6:	fc 01       	movw	r30, r24
    f8d8:	ef 55       	subi	r30, 0x5F	; 95
    f8da:	f4 4f       	sbci	r31, 0xF4	; 244
    f8dc:	80 81       	ld	r24, Z
    f8de:	08 2e       	mov	r0, r24
    f8e0:	00 0c       	add	r0, r0
    f8e2:	99 0b       	sbc	r25, r25
    f8e4:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f8e8:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f8ec:	13 c0       	rjmp	.+38     	; 0xf914 <lseek+0xa6>
    f8ee:	68 89       	ldd	r22, Y+16	; 0x10
    f8f0:	79 89       	ldd	r23, Y+17	; 0x11
    f8f2:	8a 89       	ldd	r24, Y+18	; 0x12
    f8f4:	9b 89       	ldd	r25, Y+19	; 0x13
    f8f6:	c6 16       	cp	r12, r22
    f8f8:	d7 06       	cpc	r13, r23
    f8fa:	e8 06       	cpc	r14, r24
    f8fc:	f9 06       	cpc	r15, r25
    f8fe:	c9 f0       	breq	.+50     	; 0xf932 <lseek+0xc4>
    f900:	86 eb       	ldi	r24, 0xB6	; 182
    f902:	9c e0       	ldi	r25, 0x0C	; 12
    f904:	a0 e0       	ldi	r26, 0x00	; 0
    f906:	ed b7       	in	r30, 0x3d	; 61
    f908:	fe b7       	in	r31, 0x3e	; 62
    f90a:	81 83       	std	Z+1, r24	; 0x01
    f90c:	92 83       	std	Z+2, r25	; 0x02
    f90e:	a3 83       	std	Z+3, r26	; 0x03
    f910:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    f914:	6f ef       	ldi	r22, 0xFF	; 255
    f916:	7f ef       	ldi	r23, 0xFF	; 255
    f918:	cb 01       	movw	r24, r22
    f91a:	0b c0       	rjmp	.+22     	; 0xf932 <lseek+0xc4>
    f91c:	01 30       	cpi	r16, 0x01	; 1
    f91e:	11 05       	cpc	r17, r1
    f920:	81 f6       	brne	.-96     	; 0xf8c2 <lseek+0x54>
    f922:	88 89       	ldd	r24, Y+16	; 0x10
    f924:	99 89       	ldd	r25, Y+17	; 0x11
    f926:	aa 89       	ldd	r26, Y+18	; 0x12
    f928:	bb 89       	ldd	r27, Y+19	; 0x13
    f92a:	c7 cf       	rjmp	.-114    	; 0xf8ba <lseek+0x4c>
    f92c:	83 e2       	ldi	r24, 0x23	; 35
    f92e:	90 e0       	ldi	r25, 0x00	; 0
    f930:	d9 cf       	rjmp	.-78     	; 0xf8e4 <lseek+0x76>
    f932:	cd b7       	in	r28, 0x3d	; 61
    f934:	de b7       	in	r29, 0x3e	; 62
    f936:	23 96       	adiw	r28, 0x03	; 3
    f938:	ea e0       	ldi	r30, 0x0A	; 10
    f93a:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

0000f93e <fseek>:
    f93e:	cf 92       	push	r12
    f940:	df 92       	push	r13
    f942:	ef 92       	push	r14
    f944:	ff 92       	push	r15
    f946:	cf 93       	push	r28
    f948:	df 93       	push	r29
    f94a:	6a 01       	movw	r12, r20
    f94c:	7b 01       	movw	r14, r22
    f94e:	e9 01       	movw	r28, r18
    f950:	af db       	rcall	.-2210   	; 0xf0b0 <fileno>
    f952:	97 fd       	sbrc	r25, 7
    f954:	12 c0       	rjmp	.+36     	; 0xf97a <fseek+0x3c>
    f956:	9e 01       	movw	r18, r28
    f958:	b7 01       	movw	r22, r14
    f95a:	a6 01       	movw	r20, r12
    f95c:	88 df       	rcall	.-240    	; 0xf86e <lseek>
    f95e:	21 e0       	ldi	r18, 0x01	; 1
    f960:	30 e0       	ldi	r19, 0x00	; 0
    f962:	6f 3f       	cpi	r22, 0xFF	; 255
    f964:	7f 4f       	sbci	r23, 0xFF	; 255
    f966:	8f 4f       	sbci	r24, 0xFF	; 255
    f968:	9f 4f       	sbci	r25, 0xFF	; 255
    f96a:	11 f0       	breq	.+4      	; 0xf970 <fseek+0x32>
    f96c:	20 e0       	ldi	r18, 0x00	; 0
    f96e:	30 e0       	ldi	r19, 0x00	; 0
    f970:	88 27       	eor	r24, r24
    f972:	99 27       	eor	r25, r25
    f974:	82 1b       	sub	r24, r18
    f976:	93 0b       	sbc	r25, r19
    f978:	02 c0       	rjmp	.+4      	; 0xf97e <fseek+0x40>
    f97a:	8f ef       	ldi	r24, 0xFF	; 255
    f97c:	9f ef       	ldi	r25, 0xFF	; 255
    f97e:	df 91       	pop	r29
    f980:	cf 91       	pop	r28
    f982:	ff 90       	pop	r15
    f984:	ef 90       	pop	r14
    f986:	df 90       	pop	r13
    f988:	cf 90       	pop	r12
    f98a:	08 95       	ret

0000f98c <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f98c:	a2 e0       	ldi	r26, 0x02	; 2
    f98e:	b0 e0       	ldi	r27, 0x00	; 0
    f990:	ec ec       	ldi	r30, 0xCC	; 204
    f992:	fc e7       	ldi	r31, 0x7C	; 124
    f994:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
    f998:	5c 01       	movw	r10, r24
    f99a:	8b 01       	movw	r16, r22
    f99c:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f99e:	fb 01       	movw	r30, r22
    f9a0:	10 82       	st	Z, r1

    errno = 0;
    f9a2:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f9a6:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f9aa:	9e db       	rcall	.-2244   	; 0xf0e8 <fileno_to_stream>
    if(stream == stdin)
    f9ac:	7c 01       	movw	r14, r24
    f9ae:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    f9b2:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    f9b6:	e8 16       	cp	r14, r24
    f9b8:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f9ba:	c9 f4       	brne	.+50     	; 0xf9ee <read+0x62>
    f9bc:	f7 01       	movw	r30, r14
    f9be:	83 81       	ldd	r24, Z+3	; 0x03
    f9c0:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f9c2:	83 83       	std	Z+3, r24	; 0x03
    f9c4:	1a 82       	std	Y+2, r1	; 0x02
    f9c6:	19 82       	std	Y+1, r1	; 0x01
    f9c8:	c0 0e       	add	r12, r16
        while(count--)
    f9ca:	d1 1e       	adc	r13, r17
    f9cc:	0c 15       	cp	r16, r12
    f9ce:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f9d0:	09 f4       	brne	.+2      	; 0xf9d4 <read+0x48>
    f9d2:	3d c0       	rjmp	.+122    	; 0xfa4e <read+0xc2>
            if(ret < 0)
    f9d4:	c7 01       	movw	r24, r14
    f9d6:	48 da       	rcall	.-2928   	; 0xee68 <fgetc>
                break;

            *ptr++ = ret;
    f9d8:	97 fd       	sbrc	r25, 7
    f9da:	39 c0       	rjmp	.+114    	; 0xfa4e <read+0xc2>
    f9dc:	f8 01       	movw	r30, r16
            ++size;
    f9de:	81 93       	st	Z+, r24
    f9e0:	8f 01       	movw	r16, r30
    f9e2:	89 81       	ldd	r24, Y+1	; 0x01
    f9e4:	9a 81       	ldd	r25, Y+2	; 0x02
    f9e6:	01 96       	adiw	r24, 0x01	; 1
    f9e8:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f9ea:	89 83       	std	Y+1, r24	; 0x01
    f9ec:	ef cf       	rjmp	.-34     	; 0xf9cc <read+0x40>
    f9ee:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
    f9f2:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
    f9f6:	e8 16       	cp	r14, r24
    f9f8:	f9 06       	cpc	r15, r25
    f9fa:	71 f1       	breq	.+92     	; 0xfa58 <read+0xcc>
    f9fc:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x4>
    fa00:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x5>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fa04:	e8 16       	cp	r14, r24
    fa06:	f9 06       	cpc	r15, r25
    fa08:	39 f1       	breq	.+78     	; 0xfa58 <read+0xcc>
    if ( fh == NULL )
    fa0a:	c5 01       	movw	r24, r10
    fa0c:	00 df       	rcall	.-512    	; 0xf80e <fileno_to_fatfs>
    {
        errno = EBADF;
    fa0e:	00 97       	sbiw	r24, 0x00	; 0
    fa10:	19 f4       	brne	.+6      	; 0xfa18 <read+0x8c>
    fa12:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    fa14:	90 e0       	ldi	r25, 0x00	; 0
    fa16:	16 c0       	rjmp	.+44     	; 0xfa44 <read+0xb8>
    fa18:	9e 01       	movw	r18, r28
    fa1a:	2f 5f       	subi	r18, 0xFF	; 255
    fa1c:	3f 4f       	sbci	r19, 0xFF	; 255
    fa1e:	a6 01       	movw	r20, r12
    fa20:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    fa22:	0e 94 09 5d 	call	0xba12	; 0xba12 <f_read>
    fa26:	00 97       	sbiw	r24, 0x00	; 0
    fa28:	91 f0       	breq	.+36     	; 0xfa4e <read+0xc2>
    fa2a:	84 31       	cpi	r24, 0x14	; 20
    fa2c:	91 05       	cpc	r25, r1
    fa2e:	40 f4       	brcc	.+16     	; 0xfa40 <read+0xb4>
    fa30:	fc 01       	movw	r30, r24
    fa32:	ef 55       	subi	r30, 0x5F	; 95
    fa34:	f4 4f       	sbci	r31, 0xF4	; 244
    fa36:	80 81       	ld	r24, Z
    fa38:	08 2e       	mov	r0, r24
    fa3a:	00 0c       	add	r0, r0
    fa3c:	99 0b       	sbc	r25, r25
    fa3e:	02 c0       	rjmp	.+4      	; 0xfa44 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    fa40:	83 e2       	ldi	r24, 0x23	; 35
    fa42:	90 e0       	ldi	r25, 0x00	; 0
    fa44:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    fa48:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fa4c:	05 c0       	rjmp	.+10     	; 0xfa58 <read+0xcc>
    fa4e:	69 81       	ldd	r22, Y+1	; 0x01
    fa50:	7a 81       	ldd	r23, Y+2	; 0x02
    fa52:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    fa54:	90 e0       	ldi	r25, 0x00	; 0
    fa56:	03 c0       	rjmp	.+6      	; 0xfa5e <read+0xd2>
    fa58:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    fa5a:	7f ef       	ldi	r23, 0xFF	; 255
    fa5c:	cb 01       	movw	r24, r22
    fa5e:	22 96       	adiw	r28, 0x02	; 2
    fa60:	ea e0       	ldi	r30, 0x0A	; 10
    fa62:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

0000fa66 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fa66:	0f 93       	push	r16
    fa68:	1f 93       	push	r17
    fa6a:	cf 93       	push	r28
    fa6c:	df 93       	push	r29
    fa6e:	ec 01       	movw	r28, r24
    fa70:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fa72:	64 9f       	mul	r22, r20
    fa74:	80 01       	movw	r16, r0
    fa76:	65 9f       	mul	r22, r21
    fa78:	10 0d       	add	r17, r0
    fa7a:	74 9f       	mul	r23, r20
    fa7c:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    fa7e:	11 24       	eor	r1, r1
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    fa80:	17 db       	rcall	.-2514   	; 0xf0b0 <fileno>
    fa82:	a8 01       	movw	r20, r16
    fa84:	be 01       	movw	r22, r28
    if(ret < 0)
    fa86:	82 df       	rcall	.-252    	; 0xf98c <read>
    fa88:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fa8a:	02 c0       	rjmp	.+4      	; 0xfa90 <fread+0x2a>
    fa8c:	cb 01       	movw	r24, r22
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    fa8e:	02 c0       	rjmp	.+4      	; 0xfa94 <fread+0x2e>
    fa90:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fa92:	90 e0       	ldi	r25, 0x00	; 0
    fa94:	df 91       	pop	r29
    fa96:	cf 91       	pop	r28
    fa98:	1f 91       	pop	r17
    fa9a:	0f 91       	pop	r16
    fa9c:	08 95       	ret

0000fa9e <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    fa9e:	cf 93       	push	r28
    faa0:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    faa2:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    faa6:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    faaa:	83 30       	cpi	r24, 0x03	; 3
    faac:	91 05       	cpc	r25, r1
    faae:	18 f4       	brcc	.+6      	; 0xfab6 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    fab0:	89 e0       	ldi	r24, 0x09	; 9
    fab2:	90 e0       	ldi	r25, 0x00	; 0
    fab4:	18 c0       	rjmp	.+48     	; 0xfae6 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    fab6:	ec 01       	movw	r28, r24
    fab8:	17 db       	rcall	.-2514   	; 0xf0e8 <fileno_to_stream>
// reset unget on sync
    stream->flags |= __SUNGET;
    faba:	fc 01       	movw	r30, r24
    fabc:	93 81       	ldd	r25, Z+3	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fabe:	90 64       	ori	r25, 0x40	; 64
    fac0:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    fac2:	ce 01       	movw	r24, r28
    fac4:	a4 de       	rcall	.-696    	; 0xf80e <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    fac6:	00 97       	sbiw	r24, 0x00	; 0
    fac8:	99 f3       	breq	.-26     	; 0xfab0 <syncfs+0x12>
    if (res != FR_OK)
    faca:	0e 94 eb 5f 	call	0xbfd6	; 0xbfd6 <f_sync>
    face:	00 97       	sbiw	r24, 0x00	; 0
    fad0:	a1 f0       	breq	.+40     	; 0xfafa <syncfs+0x5c>
    fad2:	84 31       	cpi	r24, 0x14	; 20
    fad4:	91 05       	cpc	r25, r1
    fad6:	70 f4       	brcc	.+28     	; 0xfaf4 <syncfs+0x56>
    fad8:	fc 01       	movw	r30, r24
    fada:	ef 55       	subi	r30, 0x5F	; 95
    fadc:	f4 4f       	sbci	r31, 0xF4	; 244
    fade:	80 81       	ld	r24, Z
    fae0:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    fae2:	00 0c       	add	r0, r0
    fae4:	99 0b       	sbc	r25, r25
    fae6:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
        return(-1);
    faea:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    faee:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    faf0:	9f ef       	ldi	r25, 0xFF	; 255
    faf2:	05 c0       	rjmp	.+10     	; 0xfafe <syncfs+0x60>
    faf4:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    faf6:	90 e0       	ldi	r25, 0x00	; 0
    faf8:	f6 cf       	rjmp	.-20     	; 0xfae6 <syncfs+0x48>
}
    fafa:	80 e0       	ldi	r24, 0x00	; 0
    fafc:	90 e0       	ldi	r25, 0x00	; 0
    fafe:	df 91       	pop	r29
    fb00:	cf 91       	pop	r28
    fb02:	08 95       	ret

0000fb04 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    fb04:	cf 93       	push	r28
    fb06:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    fb08:	c0 e0       	ldi	r28, 0x00	; 0
    fb0a:	d0 e0       	ldi	r29, 0x00	; 0
    fb0c:	21 96       	adiw	r28, 0x01	; 1
    fb0e:	c0 31       	cpi	r28, 0x10	; 16
    fb10:	d1 05       	cpc	r29, r1
    fb12:	51 f0       	breq	.+20     	; 0xfb28 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fb14:	c3 30       	cpi	r28, 0x03	; 3
    fb16:	d1 05       	cpc	r29, r1
    fb18:	cc f3       	brlt	.-14     	; 0xfb0c <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    fb1a:	ce 01       	movw	r24, r28
    fb1c:	78 de       	rcall	.-784    	; 0xf80e <fileno_to_fatfs>
        if(fh == NULL)
    fb1e:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    fb20:	a9 f3       	breq	.-22     	; 0xfb0c <sync+0x8>
    fb22:	ce 01       	movw	r24, r28
    fb24:	bc df       	rcall	.-136    	; 0xfa9e <syncfs>
    }
}
    fb26:	f2 cf       	rjmp	.-28     	; 0xfb0c <sync+0x8>
    fb28:	df 91       	pop	r29
    fb2a:	cf 91       	pop	r28
    fb2c:	08 95       	ret

0000fb2e <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    fb2e:	a2 e0       	ldi	r26, 0x02	; 2
    fb30:	b0 e0       	ldi	r27, 0x00	; 0
    fb32:	ed e9       	ldi	r30, 0x9D	; 157
    fb34:	fd e7       	ldi	r31, 0x7D	; 125
    fb36:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
    fb3a:	8c 01       	movw	r16, r24
    fb3c:	b6 2e       	mov	r11, r22
    fb3e:	f7 2e       	mov	r15, r23
    fb40:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    fb42:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    fb46:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    fb4a:	ce da       	rcall	.-2660   	; 0xf0e8 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    fb4c:	6c 01       	movw	r12, r24
    fb4e:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
    fb52:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
    fb56:	c8 16       	cp	r12, r24
    fb58:	d9 06       	cpc	r13, r25
    fb5a:	39 f0       	breq	.+14     	; 0xfb6a <write+0x3c>
    fb5c:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x4>
    fb60:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x5>
    fb64:	c8 16       	cp	r12, r24
    fb66:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;
        size = 0;
    fb68:	d1 f4       	brne	.+52     	; 0xfb9e <write+0x70>
    fb6a:	1a 82       	std	Y+2, r1	; 0x02
    fb6c:	19 82       	std	Y+1, r1	; 0x01
    fb6e:	0b 2d       	mov	r16, r11
    fb70:	1f 2d       	mov	r17, r15
    fb72:	78 01       	movw	r14, r16
    fb74:	e8 0c       	add	r14, r8
        while(count--)
    fb76:	f9 1c       	adc	r15, r9
    fb78:	0e 15       	cp	r16, r14
    fb7a:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    fb7c:	d1 f1       	breq	.+116    	; 0xfbf2 <write+0xc4>
    fb7e:	f8 01       	movw	r30, r16
    fb80:	a1 90       	ld	r10, Z+
    fb82:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    fb84:	b1 2c       	mov	r11, r1
    fb86:	b6 01       	movw	r22, r12
    fb88:	c5 01       	movw	r24, r10
            if(c != ret)
    fb8a:	c4 d9       	rcall	.-3192   	; 0xef14 <fputc>
    fb8c:	a8 16       	cp	r10, r24
    fb8e:	b9 06       	cpc	r11, r25
                break;

            ++size;
    fb90:	81 f5       	brne	.+96     	; 0xfbf2 <write+0xc4>
    fb92:	89 81       	ldd	r24, Y+1	; 0x01
    fb94:	9a 81       	ldd	r25, Y+2	; 0x02
    fb96:	01 96       	adiw	r24, 0x01	; 1
    fb98:	9a 83       	std	Y+2, r25	; 0x02
    fb9a:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    fb9c:	ed cf       	rjmp	.-38     	; 0xfb78 <write+0x4a>
    fb9e:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    fba2:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    fba6:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fba8:	d9 06       	cpc	r13, r25
    fbaa:	41 f1       	breq	.+80     	; 0xfbfc <write+0xce>
    fbac:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    fbae:	2f de       	rcall	.-930    	; 0xf80e <fileno_to_fatfs>
    fbb0:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    fbb2:	19 f4       	brne	.+6      	; 0xfbba <write+0x8c>
    fbb4:	89 e0       	ldi	r24, 0x09	; 9
    fbb6:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    fbb8:	17 c0       	rjmp	.+46     	; 0xfbe8 <write+0xba>
    fbba:	9e 01       	movw	r18, r28
    fbbc:	2f 5f       	subi	r18, 0xFF	; 255
    fbbe:	3f 4f       	sbci	r19, 0xFF	; 255
    fbc0:	a4 01       	movw	r20, r8
    fbc2:	6b 2d       	mov	r22, r11
    fbc4:	7f 2d       	mov	r23, r15
    fbc6:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <f_write>
    if(res != FR_OK)
    fbca:	00 97       	sbiw	r24, 0x00	; 0
    fbcc:	91 f0       	breq	.+36     	; 0xfbf2 <write+0xc4>
    fbce:	84 31       	cpi	r24, 0x14	; 20
    fbd0:	91 05       	cpc	r25, r1
    fbd2:	40 f4       	brcc	.+16     	; 0xfbe4 <write+0xb6>
    fbd4:	fc 01       	movw	r30, r24
    fbd6:	ef 55       	subi	r30, 0x5F	; 95
    fbd8:	f4 4f       	sbci	r31, 0xF4	; 244
    fbda:	80 81       	ld	r24, Z
    fbdc:	08 2e       	mov	r0, r24
    fbde:	00 0c       	add	r0, r0
    fbe0:	99 0b       	sbc	r25, r25
    fbe2:	02 c0       	rjmp	.+4      	; 0xfbe8 <write+0xba>
    fbe4:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    fbe6:	90 e0       	ldi	r25, 0x00	; 0
    fbe8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    fbec:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fbf0:	05 c0       	rjmp	.+10     	; 0xfbfc <write+0xce>
    fbf2:	69 81       	ldd	r22, Y+1	; 0x01
    fbf4:	7a 81       	ldd	r23, Y+2	; 0x02
    fbf6:	80 e0       	ldi	r24, 0x00	; 0
    fbf8:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    fbfa:	03 c0       	rjmp	.+6      	; 0xfc02 <write+0xd4>
    fbfc:	6f ef       	ldi	r22, 0xFF	; 255
    fbfe:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    fc00:	cb 01       	movw	r24, r22
    fc02:	22 96       	adiw	r28, 0x02	; 2
    fc04:	ec e0       	ldi	r30, 0x0C	; 12
    fc06:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

0000fc0a <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fc0a:	0f 93       	push	r16
    fc0c:	1f 93       	push	r17
    fc0e:	cf 93       	push	r28
    fc10:	df 93       	push	r29
    fc12:	ec 01       	movw	r28, r24
    fc14:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fc16:	64 9f       	mul	r22, r20
    fc18:	80 01       	movw	r16, r0
    fc1a:	65 9f       	mul	r22, r21
    fc1c:	10 0d       	add	r17, r0
    fc1e:	74 9f       	mul	r23, r20
    fc20:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    fc22:	11 24       	eor	r1, r1
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    fc24:	45 da       	rcall	.-2934   	; 0xf0b0 <fileno>
    fc26:	a8 01       	movw	r20, r16
    fc28:	be 01       	movw	r22, r28

    if(ret < 0)
    fc2a:	81 df       	rcall	.-254    	; 0xfb2e <write>
    fc2c:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fc2e:	02 c0       	rjmp	.+4      	; 0xfc34 <fwrite+0x2a>
    fc30:	cb 01       	movw	r24, r22

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    fc32:	02 c0       	rjmp	.+4      	; 0xfc38 <fwrite+0x2e>
    fc34:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fc36:	90 e0       	ldi	r25, 0x00	; 0
    fc38:	df 91       	pop	r29
    fc3a:	cf 91       	pop	r28
    fc3c:	1f 91       	pop	r17
    fc3e:	0f 91       	pop	r16
    fc40:	08 95       	ret

0000fc42 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    fc42:	0f 93       	push	r16
    fc44:	1f 93       	push	r17
    fc46:	cf 93       	push	r28
    fc48:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fc4a:	83 30       	cpi	r24, 0x03	; 3
    fc4c:	91 05       	cpc	r25, r1
    fc4e:	48 f4       	brcc	.+18     	; 0xfc62 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fc50:	89 e0       	ldi	r24, 0x09	; 9
    fc52:	90 e0       	ldi	r25, 0x00	; 0
    fc54:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    fc58:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
        return(-1);
    fc5c:	8f ef       	ldi	r24, 0xFF	; 255
    fc5e:	9f ef       	ldi	r25, 0xFF	; 255
    fc60:	20 c0       	rjmp	.+64     	; 0xfca2 <free_file_descriptor+0x60>
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fc62:	ec 01       	movw	r28, r24
    fc64:	41 da       	rcall	.-2942   	; 0xf0e8 <fileno_to_stream>
    if(stream == NULL)
    fc66:	8c 01       	movw	r16, r24
    fc68:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    fc6a:	c1 f3       	breq	.-16     	; 0xfc5c <free_file_descriptor+0x1a>
    fc6c:	f8 01       	movw	r30, r16
    fc6e:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    fc70:	95 85       	ldd	r25, Z+13	; 0x0d
    fc72:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    fc74:	11 f0       	breq	.+4      	; 0xfc7a <free_file_descriptor+0x38>
    fc76:	0e 94 4f 29 	call	0x529e	; 0x529e <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fc7a:	f8 01       	movw	r30, r16
    fc7c:	80 81       	ld	r24, Z
    fc7e:	91 81       	ldd	r25, Z+1	; 0x01
    fc80:	00 97       	sbiw	r24, 0x00	; 0
    fc82:	21 f0       	breq	.+8      	; 0xfc8c <free_file_descriptor+0x4a>
    fc84:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    fc86:	27 fd       	sbrc	r18, 7
    fc88:	0e 94 4f 29 	call	0x529e	; 0x529e <safefree>
    }

    __iob[fileno]  = NULL;
    fc8c:	fe 01       	movw	r30, r28
    fc8e:	ee 0f       	add	r30, r30
    fc90:	ff 1f       	adc	r31, r31
    fc92:	e5 53       	subi	r30, 0x35	; 53
    fc94:	f3 4e       	sbci	r31, 0xE3	; 227
    fc96:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    fc98:	10 82       	st	Z, r1
    fc9a:	c8 01       	movw	r24, r16
    fc9c:	0e 94 4f 29 	call	0x529e	; 0x529e <safefree>
    return(fileno);
}
    fca0:	ce 01       	movw	r24, r28
    fca2:	df 91       	pop	r29
    fca4:	cf 91       	pop	r28
    fca6:	1f 91       	pop	r17
    fca8:	0f 91       	pop	r16
    fcaa:	08 95       	ret

0000fcac <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fcac:	0f 93       	push	r16
    fcae:	1f 93       	push	r17
    fcb0:	cf 93       	push	r28
    fcb2:	df 93       	push	r29
    fcb4:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fcb6:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    fcba:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fcbe:	14 da       	rcall	.-3032   	; 0xf0e8 <fileno_to_stream>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fcc0:	89 2b       	or	r24, r25
    fcc2:	d9 f0       	breq	.+54     	; 0xfcfa <close+0x4e>
    if(fh == NULL)
    fcc4:	c8 01       	movw	r24, r16
    fcc6:	a3 dd       	rcall	.-1210   	; 0xf80e <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fcc8:	00 97       	sbiw	r24, 0x00	; 0
    fcca:	b9 f0       	breq	.+46     	; 0xfcfa <close+0x4e>
    free_file_descriptor(fileno);
    fccc:	0e 94 6b 60 	call	0xc0d6	; 0xc0d6 <f_close>
    fcd0:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fcd2:	c8 01       	movw	r24, r16
    fcd4:	b6 df       	rcall	.-148    	; 0xfc42 <free_file_descriptor>
    fcd6:	20 97       	sbiw	r28, 0x00	; 0
    fcd8:	99 f0       	breq	.+38     	; 0xfd00 <close+0x54>
    fcda:	c4 31       	cpi	r28, 0x14	; 20
    fcdc:	d1 05       	cpc	r29, r1
    fcde:	38 f4       	brcc	.+14     	; 0xfcee <close+0x42>
    fce0:	cf 55       	subi	r28, 0x5F	; 95
    fce2:	d4 4f       	sbci	r29, 0xF4	; 244
    fce4:	88 81       	ld	r24, Y
    fce6:	08 2e       	mov	r0, r24
    fce8:	00 0c       	add	r0, r0
    fcea:	99 0b       	sbc	r25, r25
    fcec:	02 c0       	rjmp	.+4      	; 0xfcf2 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fcee:	83 e2       	ldi	r24, 0x23	; 35
    fcf0:	90 e0       	ldi	r25, 0x00	; 0
    fcf2:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
        return(-1);
    fcf6:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    fcfa:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fcfc:	9f ef       	ldi	r25, 0xFF	; 255
    fcfe:	02 c0       	rjmp	.+4      	; 0xfd04 <close+0x58>
}
    fd00:	80 e0       	ldi	r24, 0x00	; 0
    fd02:	90 e0       	ldi	r25, 0x00	; 0
    fd04:	df 91       	pop	r29
    fd06:	cf 91       	pop	r28
    fd08:	1f 91       	pop	r17
    fd0a:	0f 91       	pop	r16
    fd0c:	08 95       	ret

0000fd0e <fclose>:
    fd0e:	d0 d9       	rcall	.-3168   	; 0xf0b0 <fileno>
    fd10:	97 fd       	sbrc	r25, 7
    fd12:	02 c0       	rjmp	.+4      	; 0xfd18 <fclose+0xa>
    fd14:	cb cf       	rjmp	.-106    	; 0xfcac <close>
    fd16:	08 95       	ret
    fd18:	8f ef       	ldi	r24, 0xFF	; 255
    fd1a:	9f ef       	ldi	r25, 0xFF	; 255
    fd1c:	08 95       	ret

0000fd1e <new_file_descriptor>:
    fd1e:	0f 93       	push	r16
    fd20:	1f 93       	push	r17
    fd22:	cf 93       	push	r28
    fd24:	df 93       	push	r29
    fd26:	eb ec       	ldi	r30, 0xCB	; 203
    fd28:	fc e1       	ldi	r31, 0x1C	; 28
    fd2a:	c0 e0       	ldi	r28, 0x00	; 0
    fd2c:	d0 e0       	ldi	r29, 0x00	; 0
    fd2e:	21 96       	adiw	r28, 0x01	; 1
    fd30:	c0 31       	cpi	r28, 0x10	; 16
    fd32:	d1 05       	cpc	r29, r1
    fd34:	49 f0       	breq	.+18     	; 0xfd48 <new_file_descriptor+0x2a>
    fd36:	c3 30       	cpi	r28, 0x03	; 3
    fd38:	d1 05       	cpc	r29, r1
    fd3a:	24 f0       	brlt	.+8      	; 0xfd44 <new_file_descriptor+0x26>
    fd3c:	82 81       	ldd	r24, Z+2	; 0x02
    fd3e:	93 81       	ldd	r25, Z+3	; 0x03
    fd40:	89 2b       	or	r24, r25
    fd42:	59 f0       	breq	.+22     	; 0xfd5a <new_file_descriptor+0x3c>
    fd44:	32 96       	adiw	r30, 0x02	; 2
    fd46:	f3 cf       	rjmp	.-26     	; 0xfd2e <new_file_descriptor+0x10>
    fd48:	87 e1       	ldi	r24, 0x17	; 23
    fd4a:	90 e0       	ldi	r25, 0x00	; 0
    fd4c:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    fd50:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    fd54:	8f ef       	ldi	r24, 0xFF	; 255
    fd56:	9f ef       	ldi	r25, 0xFF	; 255
    fd58:	22 c0       	rjmp	.+68     	; 0xfd9e <new_file_descriptor+0x80>
    fd5a:	61 e0       	ldi	r22, 0x01	; 1
    fd5c:	70 e0       	ldi	r23, 0x00	; 0
    fd5e:	8e e0       	ldi	r24, 0x0E	; 14
    fd60:	90 e0       	ldi	r25, 0x00	; 0
    fd62:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
    fd66:	8c 01       	movw	r16, r24
    fd68:	89 2b       	or	r24, r25
    fd6a:	59 f0       	breq	.+22     	; 0xfd82 <new_file_descriptor+0x64>
    fd6c:	61 e0       	ldi	r22, 0x01	; 1
    fd6e:	70 e0       	ldi	r23, 0x00	; 0
    fd70:	84 e2       	ldi	r24, 0x24	; 36
    fd72:	92 e0       	ldi	r25, 0x02	; 2
    fd74:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
    fd78:	00 97       	sbiw	r24, 0x00	; 0
    fd7a:	31 f4       	brne	.+12     	; 0xfd88 <new_file_descriptor+0x6a>
    fd7c:	c8 01       	movw	r24, r16
    fd7e:	0e 94 4f 29 	call	0x529e	; 0x529e <safefree>
    fd82:	8c e0       	ldi	r24, 0x0C	; 12
    fd84:	90 e0       	ldi	r25, 0x00	; 0
    fd86:	e2 cf       	rjmp	.-60     	; 0xfd4c <new_file_descriptor+0x2e>
    fd88:	fe 01       	movw	r30, r28
    fd8a:	ee 0f       	add	r30, r30
    fd8c:	ff 1f       	adc	r31, r31
    fd8e:	e5 53       	subi	r30, 0x35	; 53
    fd90:	f3 4e       	sbci	r31, 0xE3	; 227
    fd92:	11 83       	std	Z+1, r17	; 0x01
    fd94:	00 83       	st	Z, r16
    fd96:	f8 01       	movw	r30, r16
    fd98:	95 87       	std	Z+13, r25	; 0x0d
    fd9a:	84 87       	std	Z+12, r24	; 0x0c
    fd9c:	ce 01       	movw	r24, r28
    fd9e:	df 91       	pop	r29
    fda0:	cf 91       	pop	r28
    fda2:	1f 91       	pop	r17
    fda4:	0f 91       	pop	r16
    fda6:	08 95       	ret

0000fda8 <open>:
    fda8:	a0 e0       	ldi	r26, 0x00	; 0
    fdaa:	b0 e0       	ldi	r27, 0x00	; 0
    fdac:	ea ed       	ldi	r30, 0xDA	; 218
    fdae:	fe e7       	ldi	r31, 0x7E	; 126
    fdb0:	0c 94 ed e3 	jmp	0x1c7da	; 0x1c7da <__prologue_saves__+0x8>
    fdb4:	5c 01       	movw	r10, r24
    fdb6:	6b 01       	movw	r12, r22
    fdb8:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    fdbc:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    fdc0:	7b 01       	movw	r14, r22
    fdc2:	83 e0       	ldi	r24, 0x03	; 3
    fdc4:	e8 22       	and	r14, r24
    fdc6:	ff 24       	eor	r15, r15
    fdc8:	e2 e0       	ldi	r30, 0x02	; 2
    fdca:	ee 16       	cp	r14, r30
    fdcc:	f1 04       	cpc	r15, r1
    fdce:	31 f0       	breq	.+12     	; 0xfddc <open+0x34>
    fdd0:	e1 14       	cp	r14, r1
    fdd2:	f1 04       	cpc	r15, r1
    fdd4:	31 f0       	breq	.+12     	; 0xfde2 <open+0x3a>
    fdd6:	02 e0       	ldi	r16, 0x02	; 2
    fdd8:	10 e0       	ldi	r17, 0x00	; 0
    fdda:	05 c0       	rjmp	.+10     	; 0xfde6 <open+0x3e>
    fddc:	03 e0       	ldi	r16, 0x03	; 3
    fdde:	10 e0       	ldi	r17, 0x00	; 0
    fde0:	02 c0       	rjmp	.+4      	; 0xfde6 <open+0x3e>
    fde2:	01 e0       	ldi	r16, 0x01	; 1
    fde4:	10 e0       	ldi	r17, 0x00	; 0
    fde6:	c6 fe       	sbrs	r12, 6
    fde8:	05 c0       	rjmp	.+10     	; 0xfdf4 <open+0x4c>
    fdea:	d1 fe       	sbrs	r13, 1
    fdec:	02 c0       	rjmp	.+4      	; 0xfdf2 <open+0x4a>
    fdee:	08 60       	ori	r16, 0x08	; 8
    fdf0:	01 c0       	rjmp	.+2      	; 0xfdf4 <open+0x4c>
    fdf2:	00 61       	ori	r16, 0x10	; 16
    fdf4:	94 df       	rcall	.-216    	; 0xfd1e <new_file_descriptor>
    fdf6:	3c 01       	movw	r6, r24
    fdf8:	77 d9       	rcall	.-3346   	; 0xf0e8 <fileno_to_stream>
    fdfa:	ec 01       	movw	r28, r24
    fdfc:	c3 01       	movw	r24, r6
    fdfe:	20 97       	sbiw	r28, 0x00	; 0
    fe00:	09 f4       	brne	.+2      	; 0xfe04 <open+0x5c>
    fe02:	48 c0       	rjmp	.+144    	; 0xfe94 <open+0xec>
    fe04:	04 dd       	rcall	.-1528   	; 0xf80e <fileno_to_fatfs>
    fe06:	4c 01       	movw	r8, r24
    fe08:	00 97       	sbiw	r24, 0x00	; 0
    fe0a:	59 f4       	brne	.+22     	; 0xfe22 <open+0x7a>
    fe0c:	c3 01       	movw	r24, r6
    fe0e:	19 df       	rcall	.-462    	; 0xfc42 <free_file_descriptor>
    fe10:	89 e0       	ldi	r24, 0x09	; 9
    fe12:	90 e0       	ldi	r25, 0x00	; 0
    fe14:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    fe18:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    fe1c:	8f ef       	ldi	r24, 0xFF	; 255
    fe1e:	9f ef       	ldi	r25, 0xFF	; 255
    fe20:	5d c0       	rjmp	.+186    	; 0xfedc <open+0x134>
    fe22:	40 2f       	mov	r20, r16
    fe24:	b5 01       	movw	r22, r10
    fe26:	0e 94 51 5b 	call	0xb6a2	; 0xb6a2 <f_open>
    fe2a:	00 97       	sbiw	r24, 0x00	; 0
    fe2c:	91 f0       	breq	.+36     	; 0xfe52 <open+0xaa>
    fe2e:	84 31       	cpi	r24, 0x14	; 20
    fe30:	91 05       	cpc	r25, r1
    fe32:	40 f4       	brcc	.+16     	; 0xfe44 <open+0x9c>
    fe34:	fc 01       	movw	r30, r24
    fe36:	ef 55       	subi	r30, 0x5F	; 95
    fe38:	f4 4f       	sbci	r31, 0xF4	; 244
    fe3a:	80 81       	ld	r24, Z
    fe3c:	08 2e       	mov	r0, r24
    fe3e:	00 0c       	add	r0, r0
    fe40:	99 0b       	sbc	r25, r25
    fe42:	02 c0       	rjmp	.+4      	; 0xfe48 <open+0xa0>
    fe44:	83 e2       	ldi	r24, 0x23	; 35
    fe46:	90 e0       	ldi	r25, 0x00	; 0
    fe48:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    fe4c:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    fe50:	20 c0       	rjmp	.+64     	; 0xfe92 <open+0xea>
    fe52:	d2 fe       	sbrs	r13, 2
    fe54:	21 c0       	rjmp	.+66     	; 0xfe98 <open+0xf0>
    fe56:	f4 01       	movw	r30, r8
    fe58:	42 85       	ldd	r20, Z+10	; 0x0a
    fe5a:	53 85       	ldd	r21, Z+11	; 0x0b
    fe5c:	64 85       	ldd	r22, Z+12	; 0x0c
    fe5e:	75 85       	ldd	r23, Z+13	; 0x0d
    fe60:	c4 01       	movw	r24, r8
    fe62:	0e 94 15 62 	call	0xc42a	; 0xc42a <f_lseek>
    fe66:	00 97       	sbiw	r24, 0x00	; 0
    fe68:	b9 f0       	breq	.+46     	; 0xfe98 <open+0xf0>
    fe6a:	84 31       	cpi	r24, 0x14	; 20
    fe6c:	91 05       	cpc	r25, r1
    fe6e:	40 f4       	brcc	.+16     	; 0xfe80 <open+0xd8>
    fe70:	fc 01       	movw	r30, r24
    fe72:	ef 55       	subi	r30, 0x5F	; 95
    fe74:	f4 4f       	sbci	r31, 0xF4	; 244
    fe76:	80 81       	ld	r24, Z
    fe78:	08 2e       	mov	r0, r24
    fe7a:	00 0c       	add	r0, r0
    fe7c:	99 0b       	sbc	r25, r25
    fe7e:	02 c0       	rjmp	.+4      	; 0xfe84 <open+0xdc>
    fe80:	83 e2       	ldi	r24, 0x23	; 35
    fe82:	90 e0       	ldi	r25, 0x00	; 0
    fe84:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    fe88:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    fe8c:	c4 01       	movw	r24, r8
    fe8e:	0e 94 6b 60 	call	0xc0d6	; 0xc0d6 <f_close>
    fe92:	c3 01       	movw	r24, r6
    fe94:	d6 de       	rcall	.-596    	; 0xfc42 <free_file_descriptor>
    fe96:	c2 cf       	rjmp	.-124    	; 0xfe1c <open+0x74>
    fe98:	f2 e0       	ldi	r31, 0x02	; 2
    fe9a:	ef 16       	cp	r14, r31
    fe9c:	f1 04       	cpc	r15, r1
    fe9e:	51 f4       	brne	.+20     	; 0xfeb4 <open+0x10c>
    fea0:	89 ee       	ldi	r24, 0xE9	; 233
    fea2:	96 e7       	ldi	r25, 0x76	; 118
    fea4:	99 87       	std	Y+9, r25	; 0x09
    fea6:	88 87       	std	Y+8, r24	; 0x08
    fea8:	86 e6       	ldi	r24, 0x66	; 102
    feaa:	96 e7       	ldi	r25, 0x76	; 118
    feac:	9b 87       	std	Y+11, r25	; 0x0b
    feae:	8a 87       	std	Y+10, r24	; 0x0a
    feb0:	83 e0       	ldi	r24, 0x03	; 3
    feb2:	12 c0       	rjmp	.+36     	; 0xfed8 <open+0x130>
    feb4:	e1 14       	cp	r14, r1
    feb6:	f1 04       	cpc	r15, r1
    feb8:	41 f4       	brne	.+16     	; 0xfeca <open+0x122>
    feba:	19 86       	std	Y+9, r1	; 0x09
    febc:	18 86       	std	Y+8, r1	; 0x08
    febe:	86 e6       	ldi	r24, 0x66	; 102
    fec0:	96 e7       	ldi	r25, 0x76	; 118
    fec2:	9b 87       	std	Y+11, r25	; 0x0b
    fec4:	8a 87       	std	Y+10, r24	; 0x0a
    fec6:	81 e0       	ldi	r24, 0x01	; 1
    fec8:	07 c0       	rjmp	.+14     	; 0xfed8 <open+0x130>
    feca:	89 ee       	ldi	r24, 0xE9	; 233
    fecc:	96 e7       	ldi	r25, 0x76	; 118
    fece:	99 87       	std	Y+9, r25	; 0x09
    fed0:	88 87       	std	Y+8, r24	; 0x08
    fed2:	1b 86       	std	Y+11, r1	; 0x0b
    fed4:	1a 86       	std	Y+10, r1	; 0x0a
    fed6:	82 e0       	ldi	r24, 0x02	; 2
    fed8:	8b 83       	std	Y+3, r24	; 0x03
    feda:	c3 01       	movw	r24, r6
    fedc:	cd b7       	in	r28, 0x3d	; 61
    fede:	de b7       	in	r29, 0x3e	; 62
    fee0:	ee e0       	ldi	r30, 0x0E	; 14
    fee2:	0c 94 09 e4 	jmp	0x1c812	; 0x1c812 <__epilogue_restores__+0x8>

0000fee6 <posix_fopen_modes_to_open>:
    fee6:	cf 93       	push	r28
    fee8:	df 93       	push	r29
    feea:	ec 01       	movw	r28, r24
    feec:	6d e3       	ldi	r22, 0x3D	; 61
    feee:	73 e0       	ldi	r23, 0x03	; 3
    fef0:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    fef4:	00 97       	sbiw	r24, 0x00	; 0
    fef6:	09 f4       	brne	.+2      	; 0xfefa <posix_fopen_modes_to_open+0x14>
    fef8:	5d c0       	rjmp	.+186    	; 0xffb4 <__DATA_REGION_LENGTH__+0xb4>
    fefa:	69 ef       	ldi	r22, 0xF9	; 249
    fefc:	78 e0       	ldi	r23, 0x08	; 8
    fefe:	ce 01       	movw	r24, r28
    ff00:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff04:	00 97       	sbiw	r24, 0x00	; 0
    ff06:	09 f4       	brne	.+2      	; 0xff0a <__DATA_REGION_LENGTH__+0xa>
    ff08:	55 c0       	rjmp	.+170    	; 0xffb4 <__DATA_REGION_LENGTH__+0xb4>
    ff0a:	6c ef       	ldi	r22, 0xFC	; 252
    ff0c:	78 e0       	ldi	r23, 0x08	; 8
    ff0e:	ce 01       	movw	r24, r28
    ff10:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff14:	89 2b       	or	r24, r25
    ff16:	09 f4       	brne	.+2      	; 0xff1a <__DATA_REGION_LENGTH__+0x1a>
    ff18:	42 c0       	rjmp	.+132    	; 0xff9e <__DATA_REGION_LENGTH__+0x9e>
    ff1a:	6f ef       	ldi	r22, 0xFF	; 255
    ff1c:	78 e0       	ldi	r23, 0x08	; 8
    ff1e:	ce 01       	movw	r24, r28
    ff20:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff24:	89 2b       	or	r24, r25
    ff26:	d9 f1       	breq	.+118    	; 0xff9e <__DATA_REGION_LENGTH__+0x9e>
    ff28:	63 e0       	ldi	r22, 0x03	; 3
    ff2a:	79 e0       	ldi	r23, 0x09	; 9
    ff2c:	ce 01       	movw	r24, r28
    ff2e:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff32:	89 2b       	or	r24, r25
    ff34:	a1 f1       	breq	.+104    	; 0xff9e <__DATA_REGION_LENGTH__+0x9e>
    ff36:	68 eb       	ldi	r22, 0xB8	; 184
    ff38:	7a e0       	ldi	r23, 0x0A	; 10
    ff3a:	ce 01       	movw	r24, r28
    ff3c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff40:	89 2b       	or	r24, r25
    ff42:	81 f1       	breq	.+96     	; 0xffa4 <__DATA_REGION_LENGTH__+0xa4>
    ff44:	67 e0       	ldi	r22, 0x07	; 7
    ff46:	79 e0       	ldi	r23, 0x09	; 9
    ff48:	ce 01       	movw	r24, r28
    ff4a:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff4e:	89 2b       	or	r24, r25
    ff50:	49 f1       	breq	.+82     	; 0xffa4 <__DATA_REGION_LENGTH__+0xa4>
    ff52:	6a e0       	ldi	r22, 0x0A	; 10
    ff54:	79 e0       	ldi	r23, 0x09	; 9
    ff56:	ce 01       	movw	r24, r28
    ff58:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff5c:	89 2b       	or	r24, r25
    ff5e:	29 f1       	breq	.+74     	; 0xffaa <__DATA_REGION_LENGTH__+0xaa>
    ff60:	6d e0       	ldi	r22, 0x0D	; 13
    ff62:	79 e0       	ldi	r23, 0x09	; 9
    ff64:	ce 01       	movw	r24, r28
    ff66:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff6a:	89 2b       	or	r24, r25
    ff6c:	f1 f0       	breq	.+60     	; 0xffaa <__DATA_REGION_LENGTH__+0xaa>
    ff6e:	61 e1       	ldi	r22, 0x11	; 17
    ff70:	79 e0       	ldi	r23, 0x09	; 9
    ff72:	ce 01       	movw	r24, r28
    ff74:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff78:	89 2b       	or	r24, r25
    ff7a:	b9 f0       	breq	.+46     	; 0xffaa <__DATA_REGION_LENGTH__+0xaa>
    ff7c:	64 e2       	ldi	r22, 0x24	; 36
    ff7e:	73 e1       	ldi	r23, 0x13	; 19
    ff80:	ce 01       	movw	r24, r28
    ff82:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff86:	89 2b       	or	r24, r25
    ff88:	99 f0       	breq	.+38     	; 0xffb0 <__DATA_REGION_LENGTH__+0xb0>
    ff8a:	65 e1       	ldi	r22, 0x15	; 21
    ff8c:	79 e0       	ldi	r23, 0x09	; 9
    ff8e:	ce 01       	movw	r24, r28
    ff90:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strcmp>
    ff94:	89 2b       	or	r24, r25
    ff96:	61 f0       	breq	.+24     	; 0xffb0 <__DATA_REGION_LENGTH__+0xb0>
    ff98:	8f ef       	ldi	r24, 0xFF	; 255
    ff9a:	9f ef       	ldi	r25, 0xFF	; 255
    ff9c:	0b c0       	rjmp	.+22     	; 0xffb4 <__DATA_REGION_LENGTH__+0xb4>
    ff9e:	82 e0       	ldi	r24, 0x02	; 2
    ffa0:	92 e0       	ldi	r25, 0x02	; 2
    ffa2:	08 c0       	rjmp	.+16     	; 0xffb4 <__DATA_REGION_LENGTH__+0xb4>
    ffa4:	81 e4       	ldi	r24, 0x41	; 65
    ffa6:	92 e0       	ldi	r25, 0x02	; 2
    ffa8:	05 c0       	rjmp	.+10     	; 0xffb4 <__DATA_REGION_LENGTH__+0xb4>
    ffaa:	82 e4       	ldi	r24, 0x42	; 66
    ffac:	92 e0       	ldi	r25, 0x02	; 2
    ffae:	02 c0       	rjmp	.+4      	; 0xffb4 <__DATA_REGION_LENGTH__+0xb4>
    ffb0:	81 e4       	ldi	r24, 0x41	; 65
    ffb2:	94 e0       	ldi	r25, 0x04	; 4
    ffb4:	df 91       	pop	r29
    ffb6:	cf 91       	pop	r28
    ffb8:	08 95       	ret

0000ffba <fopen>:
    ffba:	cf 93       	push	r28
    ffbc:	df 93       	push	r29
    ffbe:	ec 01       	movw	r28, r24
    ffc0:	cb 01       	movw	r24, r22
    ffc2:	91 df       	rcall	.-222    	; 0xfee6 <posix_fopen_modes_to_open>
    ffc4:	bc 01       	movw	r22, r24
    ffc6:	ce 01       	movw	r24, r28
    ffc8:	ef de       	rcall	.-546    	; 0xfda8 <open>
    ffca:	8e d8       	rcall	.-3812   	; 0xf0e8 <fileno_to_stream>
    ffcc:	df 91       	pop	r29
    ffce:	cf 91       	pop	r28
    ffd0:	08 95       	ret

0000ffd2 <fprintf>:
    ffd2:	a8 e0       	ldi	r26, 0x08	; 8
    ffd4:	b0 e0       	ldi	r27, 0x00	; 0
    ffd6:	ef ee       	ldi	r30, 0xEF	; 239
    ffd8:	ff e7       	ldi	r31, 0x7F	; 127
    ffda:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
    ffde:	8c ed       	ldi	r24, 0xDC	; 220
    ffe0:	97 e7       	ldi	r25, 0x77	; 119
    ffe2:	9a 83       	std	Y+2, r25	; 0x02
    ffe4:	89 83       	std	Y+1, r24	; 0x01
    ffe6:	18 86       	std	Y+8, r1	; 0x08
    ffe8:	1f 82       	std	Y+7, r1	; 0x07
    ffea:	8d 85       	ldd	r24, Y+13	; 0x0d
    ffec:	9e 85       	ldd	r25, Y+14	; 0x0e
    ffee:	9c 83       	std	Y+4, r25	; 0x04
    fff0:	8b 83       	std	Y+3, r24	; 0x03
    fff2:	4f 85       	ldd	r20, Y+15	; 0x0f
    fff4:	58 89       	ldd	r21, Y+16	; 0x10
    fff6:	60 e8       	ldi	r22, 0x80	; 128
    fff8:	9e 01       	movw	r18, r28
    fffa:	2f 5e       	subi	r18, 0xEF	; 239
    fffc:	3f 4f       	sbci	r19, 0xFF	; 255
    fffe:	ce 01       	movw	r24, r28
   10000:	01 96       	adiw	r24, 0x01	; 1
   10002:	0e 94 39 43 	call	0x8672	; 0x8672 <_printf_fn>
   10006:	8f 81       	ldd	r24, Y+7	; 0x07
   10008:	98 85       	ldd	r25, Y+8	; 0x08
   1000a:	28 96       	adiw	r28, 0x08	; 8
   1000c:	e2 e0       	ldi	r30, 0x02	; 2
   1000e:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00010012 <posix_help>:
   10012:	cf 93       	push	r28
   10014:	df 93       	push	r29
   10016:	00 d0       	rcall	.+0      	; 0x10018 <posix_help+0x6>
   10018:	1f 92       	push	r1
   1001a:	ec 01       	movw	r28, r24
   1001c:	8c e5       	ldi	r24, 0x5C	; 92
   1001e:	9f e0       	ldi	r25, 0x0F	; 15
   10020:	a0 e0       	ldi	r26, 0x00	; 0
   10022:	ed b7       	in	r30, 0x3d	; 61
   10024:	fe b7       	in	r31, 0x3e	; 62
   10026:	81 83       	std	Z+1, r24	; 0x01
   10028:	92 83       	std	Z+2, r25	; 0x02
   1002a:	a3 83       	std	Z+3, r26	; 0x03
   1002c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10030:	cd 2b       	or	r28, r29
   10032:	51 f0       	breq	.+20     	; 0x10048 <posix_help+0x36>
   10034:	86 e9       	ldi	r24, 0x96	; 150
   10036:	9e e0       	ldi	r25, 0x0E	; 14
   10038:	a0 e0       	ldi	r26, 0x00	; 0
   1003a:	ed b7       	in	r30, 0x3d	; 61
   1003c:	fe b7       	in	r31, 0x3e	; 62
   1003e:	81 83       	std	Z+1, r24	; 0x01
   10040:	92 83       	std	Z+2, r25	; 0x02
   10042:	a3 83       	std	Z+3, r26	; 0x03
   10044:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10048:	cd b7       	in	r28, 0x3d	; 61
   1004a:	de b7       	in	r29, 0x3e	; 62
   1004c:	23 96       	adiw	r28, 0x03	; 3
   1004e:	e2 e0       	ldi	r30, 0x02	; 2
   10050:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00010054 <copy>:
   10054:	4f 92       	push	r4
   10056:	5f 92       	push	r5
   10058:	6f 92       	push	r6
   1005a:	8f 92       	push	r8
   1005c:	9f 92       	push	r9
   1005e:	af 92       	push	r10
   10060:	bf 92       	push	r11
   10062:	cf 92       	push	r12
   10064:	df 92       	push	r13
   10066:	ef 92       	push	r14
   10068:	ff 92       	push	r15
   1006a:	0f 93       	push	r16
   1006c:	1f 93       	push	r17
   1006e:	cf 93       	push	r28
   10070:	df 93       	push	r29
   10072:	ad b7       	in	r26, 0x3d	; 61
   10074:	be b7       	in	r27, 0x3e	; 62
   10076:	17 97       	sbiw	r26, 0x07	; 7
   10078:	0f b6       	in	r0, 0x3f	; 63
   1007a:	f8 94       	cli
   1007c:	be bf       	out	0x3e, r27	; 62
   1007e:	0f be       	out	0x3f, r0	; 63
   10080:	ad bf       	out	0x3d, r26	; 61
   10082:	8c 01       	movw	r16, r24
   10084:	eb 01       	movw	r28, r22
   10086:	ed b7       	in	r30, 0x3d	; 61
   10088:	fe b7       	in	r31, 0x3e	; 62
   1008a:	95 83       	std	Z+5, r25	; 0x05
   1008c:	84 83       	std	Z+4, r24	; 0x04
   1008e:	87 e1       	ldi	r24, 0x17	; 23
   10090:	9e e0       	ldi	r25, 0x0E	; 14
   10092:	a0 e0       	ldi	r26, 0x00	; 0
   10094:	81 83       	std	Z+1, r24	; 0x01
   10096:	92 83       	std	Z+2, r25	; 0x02
   10098:	a3 83       	std	Z+3, r26	; 0x03
   1009a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1009e:	69 ef       	ldi	r22, 0xF9	; 249
   100a0:	78 e0       	ldi	r23, 0x08	; 8
   100a2:	c8 01       	movw	r24, r16
   100a4:	8a df       	rcall	.-236    	; 0xffba <fopen>
   100a6:	7c 01       	movw	r14, r24
   100a8:	ed b7       	in	r30, 0x3d	; 61
   100aa:	fe b7       	in	r31, 0x3e	; 62
   100ac:	89 2b       	or	r24, r25
   100ae:	59 f4       	brne	.+22     	; 0x100c6 <copy+0x72>
   100b0:	15 83       	std	Z+5, r17	; 0x05
   100b2:	04 83       	std	Z+4, r16	; 0x04
   100b4:	87 e0       	ldi	r24, 0x07	; 7
   100b6:	9e e0       	ldi	r25, 0x0E	; 14
   100b8:	a0 e0       	ldi	r26, 0x00	; 0
   100ba:	81 83       	std	Z+1, r24	; 0x01
   100bc:	92 83       	std	Z+2, r25	; 0x02
   100be:	a3 83       	std	Z+3, r26	; 0x03
   100c0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   100c4:	20 c0       	rjmp	.+64     	; 0x10106 <copy+0xb2>
   100c6:	d5 83       	std	Z+5, r29	; 0x05
   100c8:	c4 83       	std	Z+4, r28	; 0x04
   100ca:	8a ef       	ldi	r24, 0xFA	; 250
   100cc:	9d e0       	ldi	r25, 0x0D	; 13
   100ce:	a0 e0       	ldi	r26, 0x00	; 0
   100d0:	81 83       	std	Z+1, r24	; 0x01
   100d2:	92 83       	std	Z+2, r25	; 0x02
   100d4:	a3 83       	std	Z+3, r26	; 0x03
   100d6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   100da:	67 e0       	ldi	r22, 0x07	; 7
   100dc:	79 e0       	ldi	r23, 0x09	; 9
   100de:	ce 01       	movw	r24, r28
   100e0:	6c df       	rcall	.-296    	; 0xffba <fopen>
   100e2:	8c 01       	movw	r16, r24
   100e4:	89 2b       	or	r24, r25
   100e6:	a1 f4       	brne	.+40     	; 0x10110 <copy+0xbc>
   100e8:	ed b7       	in	r30, 0x3d	; 61
   100ea:	fe b7       	in	r31, 0x3e	; 62
   100ec:	d5 83       	std	Z+5, r29	; 0x05
   100ee:	c4 83       	std	Z+4, r28	; 0x04
   100f0:	8a ee       	ldi	r24, 0xEA	; 234
   100f2:	9d e0       	ldi	r25, 0x0D	; 13
   100f4:	a0 e0       	ldi	r26, 0x00	; 0
   100f6:	81 83       	std	Z+1, r24	; 0x01
   100f8:	92 83       	std	Z+2, r25	; 0x02
   100fa:	a3 83       	std	Z+3, r26	; 0x03
   100fc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10100:	80 e0       	ldi	r24, 0x00	; 0
   10102:	90 e0       	ldi	r25, 0x00	; 0
   10104:	04 de       	rcall	.-1016   	; 0xfd0e <fclose>
   10106:	60 e0       	ldi	r22, 0x00	; 0
   10108:	70 e0       	ldi	r23, 0x00	; 0
   1010a:	80 e0       	ldi	r24, 0x00	; 0
   1010c:	90 e0       	ldi	r25, 0x00	; 0
   1010e:	68 c0       	rjmp	.+208    	; 0x101e0 <copy+0x18c>
   10110:	61 e0       	ldi	r22, 0x01	; 1
   10112:	70 e0       	ldi	r23, 0x00	; 0
   10114:	80 e0       	ldi	r24, 0x00	; 0
   10116:	92 e0       	ldi	r25, 0x02	; 2
   10118:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
   1011c:	6c 01       	movw	r12, r24
   1011e:	89 2b       	or	r24, r25
   10120:	21 f4       	brne	.+8      	; 0x1012a <copy+0xd6>
   10122:	c7 01       	movw	r24, r14
   10124:	f4 dd       	rcall	.-1048   	; 0xfd0e <fclose>
   10126:	c8 01       	movw	r24, r16
   10128:	ed cf       	rjmp	.-38     	; 0x10104 <copy+0xb0>
   1012a:	8d ed       	ldi	r24, 0xDD	; 221
   1012c:	9d e0       	ldi	r25, 0x0D	; 13
   1012e:	a0 e0       	ldi	r26, 0x00	; 0
   10130:	ed b7       	in	r30, 0x3d	; 61
   10132:	fe b7       	in	r31, 0x3e	; 62
   10134:	81 83       	std	Z+1, r24	; 0x01
   10136:	92 83       	std	Z+2, r25	; 0x02
   10138:	a3 83       	std	Z+3, r26	; 0x03
   1013a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1013e:	81 2c       	mov	r8, r1
   10140:	91 2c       	mov	r9, r1
   10142:	54 01       	movw	r10, r8
   10144:	81 ec       	ldi	r24, 0xC1	; 193
   10146:	9d e0       	ldi	r25, 0x0D	; 13
   10148:	2c 01       	movw	r4, r24
   1014a:	61 2c       	mov	r6, r1
   1014c:	97 01       	movw	r18, r14
   1014e:	40 e0       	ldi	r20, 0x00	; 0
   10150:	52 e0       	ldi	r21, 0x02	; 2
   10152:	61 e0       	ldi	r22, 0x01	; 1
   10154:	70 e0       	ldi	r23, 0x00	; 0
   10156:	c6 01       	movw	r24, r12
   10158:	86 dc       	rcall	.-1780   	; 0xfa66 <fread>
   1015a:	ec 01       	movw	r28, r24
   1015c:	18 16       	cp	r1, r24
   1015e:	19 06       	cpc	r1, r25
   10160:	44 f5       	brge	.+80     	; 0x101b2 <copy+0x15e>
   10162:	98 01       	movw	r18, r16
   10164:	ae 01       	movw	r20, r28
   10166:	61 e0       	ldi	r22, 0x01	; 1
   10168:	70 e0       	ldi	r23, 0x00	; 0
   1016a:	c6 01       	movw	r24, r12
   1016c:	4e dd       	rcall	.-1380   	; 0xfc0a <fwrite>
   1016e:	8c 17       	cp	r24, r28
   10170:	9d 07       	cpc	r25, r29
   10172:	5c f4       	brge	.+22     	; 0x1018a <copy+0x136>
   10174:	80 ed       	ldi	r24, 0xD0	; 208
   10176:	9d e0       	ldi	r25, 0x0D	; 13
   10178:	a0 e0       	ldi	r26, 0x00	; 0
   1017a:	ed b7       	in	r30, 0x3d	; 61
   1017c:	fe b7       	in	r31, 0x3e	; 62
   1017e:	81 83       	std	Z+1, r24	; 0x01
   10180:	92 83       	std	Z+2, r25	; 0x02
   10182:	a3 83       	std	Z+3, r26	; 0x03
   10184:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10188:	14 c0       	rjmp	.+40     	; 0x101b2 <copy+0x15e>
   1018a:	ce 01       	movw	r24, r28
   1018c:	dd 0f       	add	r29, r29
   1018e:	aa 0b       	sbc	r26, r26
   10190:	bb 0b       	sbc	r27, r27
   10192:	88 0e       	add	r8, r24
   10194:	99 1e       	adc	r9, r25
   10196:	aa 1e       	adc	r10, r26
   10198:	bb 1e       	adc	r11, r27
   1019a:	ed b7       	in	r30, 0x3d	; 61
   1019c:	fe b7       	in	r31, 0x3e	; 62
   1019e:	84 82       	std	Z+4, r8	; 0x04
   101a0:	95 82       	std	Z+5, r9	; 0x05
   101a2:	a6 82       	std	Z+6, r10	; 0x06
   101a4:	b7 82       	std	Z+7, r11	; 0x07
   101a6:	41 82       	std	Z+1, r4	; 0x01
   101a8:	52 82       	std	Z+2, r5	; 0x02
   101aa:	63 82       	std	Z+3, r6	; 0x03
   101ac:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   101b0:	cd cf       	rjmp	.-102    	; 0x1014c <copy+0xf8>
   101b2:	ed b7       	in	r30, 0x3d	; 61
   101b4:	fe b7       	in	r31, 0x3e	; 62
   101b6:	84 82       	std	Z+4, r8	; 0x04
   101b8:	95 82       	std	Z+5, r9	; 0x05
   101ba:	a6 82       	std	Z+6, r10	; 0x06
   101bc:	b7 82       	std	Z+7, r11	; 0x07
   101be:	8e ea       	ldi	r24, 0xAE	; 174
   101c0:	9d e0       	ldi	r25, 0x0D	; 13
   101c2:	a0 e0       	ldi	r26, 0x00	; 0
   101c4:	81 83       	std	Z+1, r24	; 0x01
   101c6:	92 83       	std	Z+2, r25	; 0x02
   101c8:	a3 83       	std	Z+3, r26	; 0x03
   101ca:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   101ce:	c6 01       	movw	r24, r12
   101d0:	0e 94 4f 29 	call	0x529e	; 0x529e <safefree>
   101d4:	c7 01       	movw	r24, r14
   101d6:	9b dd       	rcall	.-1226   	; 0xfd0e <fclose>
   101d8:	c8 01       	movw	r24, r16
   101da:	99 dd       	rcall	.-1230   	; 0xfd0e <fclose>
   101dc:	b4 01       	movw	r22, r8
   101de:	c5 01       	movw	r24, r10
   101e0:	ad b7       	in	r26, 0x3d	; 61
   101e2:	be b7       	in	r27, 0x3e	; 62
   101e4:	17 96       	adiw	r26, 0x07	; 7
   101e6:	0f b6       	in	r0, 0x3f	; 63
   101e8:	f8 94       	cli
   101ea:	be bf       	out	0x3e, r27	; 62
   101ec:	0f be       	out	0x3f, r0	; 63
   101ee:	ad bf       	out	0x3d, r26	; 61
   101f0:	df 91       	pop	r29
   101f2:	cf 91       	pop	r28
   101f4:	1f 91       	pop	r17
   101f6:	0f 91       	pop	r16
   101f8:	ff 90       	pop	r15
   101fa:	ef 90       	pop	r14
   101fc:	df 90       	pop	r13
   101fe:	cf 90       	pop	r12
   10200:	bf 90       	pop	r11
   10202:	af 90       	pop	r10
   10204:	9f 90       	pop	r9
   10206:	8f 90       	pop	r8
   10208:	6f 90       	pop	r6
   1020a:	5f 90       	pop	r5
   1020c:	4f 90       	pop	r4
   1020e:	08 95       	ret

00010210 <testpage>:
   10210:	cf 93       	push	r28
   10212:	df 93       	push	r29
   10214:	00 d0       	rcall	.+0      	; 0x10216 <testpage+0x6>
   10216:	1f 92       	push	r1
   10218:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
   1021c:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
   10220:	82 17       	cp	r24, r18
   10222:	93 07       	cpc	r25, r19
   10224:	3c f1       	brlt	.+78     	; 0x10274 <testpage+0x64>
   10226:	87 ea       	ldi	r24, 0xA7	; 167
   10228:	9d e0       	ldi	r25, 0x0D	; 13
   1022a:	a0 e0       	ldi	r26, 0x00	; 0
   1022c:	ed b7       	in	r30, 0x3d	; 61
   1022e:	fe b7       	in	r31, 0x3e	; 62
   10230:	81 83       	std	Z+1, r24	; 0x01
   10232:	92 83       	std	Z+2, r25	; 0x02
   10234:	a3 83       	std	Z+3, r26	; 0x03
   10236:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1023a:	0e 94 e9 77 	call	0xefd2	; 0xefd2 <getchar>
   1023e:	ec 01       	movw	r28, r24
   10240:	85 ea       	ldi	r24, 0xA5	; 165
   10242:	9d e0       	ldi	r25, 0x0D	; 13
   10244:	a0 e0       	ldi	r26, 0x00	; 0
   10246:	ed b7       	in	r30, 0x3d	; 61
   10248:	fe b7       	in	r31, 0x3e	; 62
   1024a:	81 83       	std	Z+1, r24	; 0x01
   1024c:	92 83       	std	Z+2, r25	; 0x02
   1024e:	a3 83       	std	Z+3, r26	; 0x03
   10250:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10254:	c1 37       	cpi	r28, 0x71	; 113
   10256:	d1 05       	cpc	r29, r1
   10258:	41 f0       	breq	.+16     	; 0x1026a <testpage+0x5a>
   1025a:	2a 97       	sbiw	r28, 0x0a	; 10
   1025c:	49 f4       	brne	.+18     	; 0x10270 <testpage+0x60>
   1025e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
   10262:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
   10266:	01 97       	sbiw	r24, 0x01	; 1
   10268:	05 c0       	rjmp	.+10     	; 0x10274 <testpage+0x64>
   1026a:	8f ef       	ldi	r24, 0xFF	; 255
   1026c:	9f ef       	ldi	r25, 0xFF	; 255
   1026e:	02 c0       	rjmp	.+4      	; 0x10274 <testpage+0x64>
   10270:	80 e0       	ldi	r24, 0x00	; 0
   10272:	90 e0       	ldi	r25, 0x00	; 0
   10274:	cd b7       	in	r28, 0x3d	; 61
   10276:	de b7       	in	r29, 0x3e	; 62
   10278:	23 96       	adiw	r28, 0x03	; 3
   1027a:	e2 e0       	ldi	r30, 0x02	; 2
   1027c:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00010280 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   10280:	a7 e0       	ldi	r26, 0x07	; 7
   10282:	b1 e0       	ldi	r27, 0x01	; 1
   10284:	e6 e4       	ldi	r30, 0x46	; 70
   10286:	f1 e8       	ldi	r31, 0x81	; 129
   10288:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
   1028c:	8c 01       	movw	r16, r24
   1028e:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   10290:	69 ef       	ldi	r22, 0xF9	; 249
   10292:	78 e0       	ldi	r23, 0x08	; 8
   10294:	92 de       	rcall	.-732    	; 0xffba <fopen>
   10296:	7c 01       	movw	r14, r24
    if (!fp)
   10298:	89 2b       	or	r24, r25
   1029a:	41 f0       	breq	.+16     	; 0x102ac <cat+0x2c>
   1029c:	c1 2c       	mov	r12, r1
   1029e:	d1 2c       	mov	r13, r1
   102a0:	a1 2c       	mov	r10, r1
   102a2:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   102a4:	8e 01       	movw	r16, r28
   102a6:	08 5f       	subi	r16, 0xF8	; 248
   102a8:	1f 4f       	sbci	r17, 0xFF	; 255
   102aa:	22 c0       	rjmp	.+68     	; 0x102f0 <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   102ac:	ed b7       	in	r30, 0x3d	; 61
   102ae:	fe b7       	in	r31, 0x3e	; 62
   102b0:	15 83       	std	Z+5, r17	; 0x05
   102b2:	04 83       	std	Z+4, r16	; 0x04
   102b4:	80 e3       	ldi	r24, 0x30	; 48
   102b6:	9e e0       	ldi	r25, 0x0E	; 14
   102b8:	a0 e0       	ldi	r26, 0x00	; 0
   102ba:	81 83       	std	Z+1, r24	; 0x01
   102bc:	92 83       	std	Z+2, r25	; 0x02
   102be:	a3 83       	std	Z+3, r26	; 0x03
   102c0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        return(0);
   102c4:	c1 2c       	mov	r12, r1
   102c6:	d1 2c       	mov	r13, r1
   102c8:	76 01       	movw	r14, r12
   102ca:	3f c0       	rjmp	.+126    	; 0x1034a <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   102cc:	c8 01       	movw	r24, r16
   102ce:	0e 94 75 33 	call	0x66ea	; 0x66ea <trim_tail>
        size += strlen(line);
   102d2:	f8 01       	movw	r30, r16
   102d4:	01 90       	ld	r0, Z+
   102d6:	00 20       	and	r0, r0
   102d8:	e9 f7       	brne	.-6      	; 0x102d4 <cat+0x54>
   102da:	31 97       	sbiw	r30, 0x01	; 1
   102dc:	e0 1b       	sub	r30, r16
   102de:	f1 0b       	sbc	r31, r17
   102e0:	ce 0e       	add	r12, r30
   102e2:	df 1e       	adc	r13, r31
        puts(line);
   102e4:	c8 01       	movw	r24, r16
   102e6:	0e 94 41 78 	call	0xf082	; 0xf082 <puts>
        if(dopage)
   102ea:	81 14       	cp	r8, r1
   102ec:	91 04       	cpc	r9, r1
   102ee:	49 f4       	brne	.+18     	; 0x10302 <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   102f0:	a7 01       	movw	r20, r14
   102f2:	6e ef       	ldi	r22, 0xFE	; 254
   102f4:	70 e0       	ldi	r23, 0x00	; 0
   102f6:	c8 01       	movw	r24, r16
   102f8:	0e 94 f5 77 	call	0xefea	; 0xefea <fgets>
   102fc:	89 2b       	or	r24, r25
   102fe:	31 f7       	brne	.-52     	; 0x102cc <cat+0x4c>
   10300:	06 c0       	rjmp	.+12     	; 0x1030e <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10302:	c5 01       	movw	r24, r10
   10304:	01 96       	adiw	r24, 0x01	; 1
   10306:	84 df       	rcall	.-248    	; 0x10210 <testpage>
   10308:	5c 01       	movw	r10, r24
            if(count < 0)
   1030a:	97 ff       	sbrs	r25, 7
   1030c:	f1 cf       	rjmp	.-30     	; 0x102f0 <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   1030e:	8e e2       	ldi	r24, 0x2E	; 46
   10310:	9e e0       	ldi	r25, 0x0E	; 14
   10312:	a0 e0       	ldi	r26, 0x00	; 0
   10314:	ed b7       	in	r30, 0x3d	; 61
   10316:	fe b7       	in	r31, 0x3e	; 62
   10318:	81 83       	std	Z+1, r24	; 0x01
   1031a:	92 83       	std	Z+2, r25	; 0x02
   1031c:	a3 83       	std	Z+3, r26	; 0x03
   1031e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    fclose(fp);
   10322:	c7 01       	movw	r24, r14
   10324:	f4 dc       	rcall	.-1560   	; 0xfd0e <fclose>
    printf("%ld bytes\n", (long)size);
   10326:	0d 2c       	mov	r0, r13
   10328:	00 0c       	add	r0, r0
   1032a:	ee 08       	sbc	r14, r14
   1032c:	ff 08       	sbc	r15, r15
   1032e:	ed b7       	in	r30, 0x3d	; 61
   10330:	fe b7       	in	r31, 0x3e	; 62
   10332:	c4 82       	std	Z+4, r12	; 0x04
   10334:	d5 82       	std	Z+5, r13	; 0x05
   10336:	e6 82       	std	Z+6, r14	; 0x06
   10338:	f7 82       	std	Z+7, r15	; 0x07
   1033a:	83 e2       	ldi	r24, 0x23	; 35
   1033c:	9e e0       	ldi	r25, 0x0E	; 14
   1033e:	a0 e0       	ldi	r26, 0x00	; 0
   10340:	81 83       	std	Z+1, r24	; 0x01
   10342:	92 83       	std	Z+2, r25	; 0x02
   10344:	a3 83       	std	Z+3, r26	; 0x03
   10346:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    return(size);
}
   1034a:	c7 01       	movw	r24, r14
   1034c:	b6 01       	movw	r22, r12
   1034e:	c9 5f       	subi	r28, 0xF9	; 249
   10350:	de 4f       	sbci	r29, 0xFE	; 254
   10352:	ec e0       	ldi	r30, 0x0C	; 12
   10354:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

00010358 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10358:	4f 92       	push	r4
   1035a:	5f 92       	push	r5
   1035c:	6f 92       	push	r6
   1035e:	7f 92       	push	r7
   10360:	af 92       	push	r10
   10362:	bf 92       	push	r11
   10364:	cf 92       	push	r12
   10366:	df 92       	push	r13
   10368:	ef 92       	push	r14
   1036a:	ff 92       	push	r15
   1036c:	0f 93       	push	r16
   1036e:	1f 93       	push	r17
   10370:	cf 93       	push	r28
   10372:	df 93       	push	r29
   10374:	cd b7       	in	r28, 0x3d	; 61
   10376:	de b7       	in	r29, 0x3e	; 62
   10378:	c9 54       	subi	r28, 0x49	; 73
   1037a:	d1 09       	sbc	r29, r1
   1037c:	0f b6       	in	r0, 0x3f	; 63
   1037e:	f8 94       	cli
   10380:	de bf       	out	0x3e, r29	; 62
   10382:	0f be       	out	0x3f, r0	; 63
   10384:	cd bf       	out	0x3d, r28	; 61
   10386:	8c 01       	movw	r16, r24
   10388:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   1038a:	be 01       	movw	r22, r28
   1038c:	62 5f       	subi	r22, 0xF2	; 242
   1038e:	7f 4f       	sbci	r23, 0xFF	; 255
   10390:	19 d9       	rcall	.-3534   	; 0xf5c4 <stat>
   10392:	01 96       	adiw	r24, 0x01	; 1
   10394:	79 f4       	brne	.+30     	; 0x103b4 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   10396:	ed b7       	in	r30, 0x3d	; 61
   10398:	fe b7       	in	r31, 0x3e	; 62
   1039a:	15 83       	std	Z+5, r17	; 0x05
   1039c:	04 83       	std	Z+4, r16	; 0x04
   1039e:	83 e9       	ldi	r24, 0x93	; 147
   103a0:	9d e0       	ldi	r25, 0x0D	; 13
   103a2:	a0 e0       	ldi	r26, 0x00	; 0
   103a4:	81 83       	std	Z+1, r24	; 0x01
   103a6:	92 83       	std	Z+2, r25	; 0x02
   103a8:	a3 83       	std	Z+3, r26	; 0x03
   103aa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        return(0);
   103ae:	80 e0       	ldi	r24, 0x00	; 0
   103b0:	90 e0       	ldi	r25, 0x00	; 0
   103b2:	77 c0       	rjmp	.+238    	; 0x104a2 <ls_info+0x14a>
    }

    if(!verbose)
   103b4:	ef 28       	or	r14, r15
   103b6:	81 f4       	brne	.+32     	; 0x103d8 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   103b8:	c8 01       	movw	r24, r16
   103ba:	0e 94 ae 78 	call	0xf15c	; 0xf15c <basename>
   103be:	ed b7       	in	r30, 0x3d	; 61
   103c0:	fe b7       	in	r31, 0x3e	; 62
   103c2:	95 83       	std	Z+5, r25	; 0x05
   103c4:	84 83       	std	Z+4, r24	; 0x04
   103c6:	8f e8       	ldi	r24, 0x8F	; 143
   103c8:	9d e0       	ldi	r25, 0x0D	; 13
   103ca:	a0 e0       	ldi	r26, 0x00	; 0
   103cc:	81 83       	std	Z+1, r24	; 0x01
   103ce:	92 83       	std	Z+2, r25	; 0x02
   103d0:	a3 83       	std	Z+3, r26	; 0x03
   103d2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   103d6:	63 c0       	rjmp	.+198    	; 0x1049e <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   103d8:	4e 88       	ldd	r4, Y+22	; 0x16
   103da:	5f 88       	ldd	r5, Y+23	; 0x17
   103dc:	68 8c       	ldd	r6, Y+24	; 0x18
   103de:	79 8c       	ldd	r7, Y+25	; 0x19
   103e0:	d3 01       	movw	r26, r6
   103e2:	c2 01       	movw	r24, r4
   103e4:	88 27       	eor	r24, r24
   103e6:	90 7f       	andi	r25, 0xF0	; 240
   103e8:	aa 27       	eor	r26, r26
   103ea:	bb 27       	eor	r27, r27
   103ec:	81 15       	cp	r24, r1
   103ee:	90 44       	sbci	r25, 0x40	; 64
   103f0:	a1 05       	cpc	r26, r1
   103f2:	b1 05       	cpc	r27, r1
   103f4:	11 f4       	brne	.+4      	; 0x103fa <ls_info+0xa2>
        *p++ = 'd';
   103f6:	84 e6       	ldi	r24, 0x64	; 100
   103f8:	01 c0       	rjmp	.+2      	; 0x103fc <ls_info+0xa4>
    else
        *p++ = '-';
   103fa:	8d e2       	ldi	r24, 0x2D	; 45
   103fc:	8e af       	std	Y+62, r24	; 0x3e
   103fe:	fe 01       	movw	r30, r28
   10400:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10402:	e1 2c       	mov	r14, r1
   10404:	ff 24       	eor	r15, r15
   10406:	f3 94       	inc	r15
   10408:	20 e0       	ldi	r18, 0x00	; 0
   1040a:	30 e0       	ldi	r19, 0x00	; 0
   1040c:	be 2e       	mov	r11, r30
   1040e:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10410:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10412:	53 e0       	ldi	r21, 0x03	; 3
   10414:	c5 2e       	mov	r12, r21
   10416:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   10418:	c7 01       	movw	r24, r14
   1041a:	a0 e0       	ldi	r26, 0x00	; 0
   1041c:	b0 e0       	ldi	r27, 0x00	; 0
   1041e:	84 21       	and	r24, r4
   10420:	95 21       	and	r25, r5
   10422:	a6 21       	and	r26, r6
   10424:	b7 21       	and	r27, r7
   10426:	89 2b       	or	r24, r25
   10428:	8a 2b       	or	r24, r26
   1042a:	8b 2b       	or	r24, r27
   1042c:	51 f0       	breq	.+20     	; 0x10442 <ls_info+0xea>
            *p++ = cm[ i % 3];
   1042e:	c9 01       	movw	r24, r18
   10430:	b6 01       	movw	r22, r12
   10432:	0e 94 69 e3 	call	0x1c6d2	; 0x1c6d2 <__divmodhi4>
   10436:	dc 01       	movw	r26, r24
   10438:	ab 54       	subi	r26, 0x4B	; 75
   1043a:	b4 4f       	sbci	r27, 0xF4	; 244
   1043c:	8c 91       	ld	r24, X
   1043e:	81 83       	std	Z+1, r24	; 0x01
   10440:	01 c0       	rjmp	.+2      	; 0x10444 <ls_info+0xec>
        else
            *p++ = '-';
   10442:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10444:	f6 94       	lsr	r15
   10446:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10448:	2f 5f       	subi	r18, 0xFF	; 255
   1044a:	3f 4f       	sbci	r19, 0xFF	; 255
   1044c:	31 96       	adiw	r30, 0x01	; 1
   1044e:	29 30       	cpi	r18, 0x09	; 9
   10450:	31 05       	cpc	r19, r1
   10452:	11 f7       	brne	.-60     	; 0x10418 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10454:	29 96       	adiw	r28, 0x09	; 9
   10456:	1f ae       	std	Y+63, r1	; 0x3f
   10458:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   1045a:	4e a0       	ldd	r4, Y+38	; 0x26
   1045c:	5f a0       	ldd	r5, Y+39	; 0x27
   1045e:	68 a4       	ldd	r6, Y+40	; 0x28
   10460:	79 a4       	ldd	r7, Y+41	; 0x29
   10462:	6e a9       	ldd	r22, Y+54	; 0x36
   10464:	7f a9       	ldd	r23, Y+55	; 0x37
   10466:	88 ad       	ldd	r24, Y+56	; 0x38
   10468:	99 ad       	ldd	r25, Y+57	; 0x39
   1046a:	0e 94 89 78 	call	0xf112	; 0xf112 <mctime>
   1046e:	7c 01       	movw	r14, r24
   10470:	c8 01       	movw	r24, r16
   10472:	0e 94 ae 78 	call	0xf15c	; 0xf15c <basename>
   10476:	ed b7       	in	r30, 0x3d	; 61
   10478:	fe b7       	in	r31, 0x3e	; 62
   1047a:	95 87       	std	Z+13, r25	; 0x0d
   1047c:	84 87       	std	Z+12, r24	; 0x0c
   1047e:	f3 86       	std	Z+11, r15	; 0x0b
   10480:	e2 86       	std	Z+10, r14	; 0x0a
   10482:	46 82       	std	Z+6, r4	; 0x06
   10484:	57 82       	std	Z+7, r5	; 0x07
   10486:	60 86       	std	Z+8, r6	; 0x08
   10488:	71 86       	std	Z+9, r7	; 0x09
   1048a:	b4 82       	std	Z+4, r11	; 0x04
   1048c:	a5 82       	std	Z+5, r10	; 0x05
   1048e:	85 e7       	ldi	r24, 0x75	; 117
   10490:	9d e0       	ldi	r25, 0x0D	; 13
   10492:	a0 e0       	ldi	r26, 0x00	; 0
   10494:	81 83       	std	Z+1, r24	; 0x01
   10496:	92 83       	std	Z+2, r25	; 0x02
   10498:	a3 83       	std	Z+3, r26	; 0x03
   1049a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   1049e:	81 e0       	ldi	r24, 0x01	; 1
   104a0:	90 e0       	ldi	r25, 0x00	; 0
}
   104a2:	c7 5b       	subi	r28, 0xB7	; 183
   104a4:	df 4f       	sbci	r29, 0xFF	; 255
   104a6:	0f b6       	in	r0, 0x3f	; 63
   104a8:	f8 94       	cli
   104aa:	de bf       	out	0x3e, r29	; 62
   104ac:	0f be       	out	0x3f, r0	; 63
   104ae:	cd bf       	out	0x3d, r28	; 61
   104b0:	df 91       	pop	r29
   104b2:	cf 91       	pop	r28
   104b4:	1f 91       	pop	r17
   104b6:	0f 91       	pop	r16
   104b8:	ff 90       	pop	r15
   104ba:	ef 90       	pop	r14
   104bc:	df 90       	pop	r13
   104be:	cf 90       	pop	r12
   104c0:	bf 90       	pop	r11
   104c2:	af 90       	pop	r10
   104c4:	7f 90       	pop	r7
   104c6:	6f 90       	pop	r6
   104c8:	5f 90       	pop	r5
   104ca:	4f 90       	pop	r4
   104cc:	08 95       	ret

000104ce <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   104ce:	2f 92       	push	r2
   104d0:	3f 92       	push	r3
   104d2:	4f 92       	push	r4
   104d4:	5f 92       	push	r5
   104d6:	6f 92       	push	r6
   104d8:	8f 92       	push	r8
   104da:	9f 92       	push	r9
   104dc:	af 92       	push	r10
   104de:	bf 92       	push	r11
   104e0:	cf 92       	push	r12
   104e2:	df 92       	push	r13
   104e4:	ef 92       	push	r14
   104e6:	ff 92       	push	r15
   104e8:	0f 93       	push	r16
   104ea:	1f 93       	push	r17
   104ec:	cf 93       	push	r28
   104ee:	df 93       	push	r29
   104f0:	cd b7       	in	r28, 0x3d	; 61
   104f2:	de b7       	in	r29, 0x3e	; 62
   104f4:	c7 53       	subi	r28, 0x37	; 55
   104f6:	d1 40       	sbci	r29, 0x01	; 1
   104f8:	0f b6       	in	r0, 0x3f	; 63
   104fa:	f8 94       	cli
   104fc:	de bf       	out	0x3e, r29	; 62
   104fe:	0f be       	out	0x3f, r0	; 63
   10500:	cd bf       	out	0x3d, r28	; 61
   10502:	7c 01       	movw	r14, r24
   10504:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10506:	1e 82       	std	Y+6, r1	; 0x06
   10508:	8e 01       	movw	r16, r28
   1050a:	0a 5f       	subi	r16, 0xFA	; 250
   1050c:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   1050e:	00 97       	sbiw	r24, 0x00	; 0
   10510:	91 f4       	brne	.+36     	; 0x10536 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10512:	6e ef       	ldi	r22, 0xFE	; 254
   10514:	70 e0       	ldi	r23, 0x00	; 0
   10516:	c8 01       	movw	r24, r16
   10518:	0e 94 04 79 	call	0xf208	; 0xf208 <getcwd>
   1051c:	89 2b       	or	r24, r25
   1051e:	d1 f4       	brne	.+52     	; 0x10554 <ls+0x86>
        {
            printf("ls: Can't get current directory\n");
   10520:	84 e5       	ldi	r24, 0x54	; 84
   10522:	9d e0       	ldi	r25, 0x0D	; 13
   10524:	a0 e0       	ldi	r26, 0x00	; 0
   10526:	ed b7       	in	r30, 0x3d	; 61
   10528:	fe b7       	in	r31, 0x3e	; 62
   1052a:	81 83       	std	Z+1, r24	; 0x01
   1052c:	92 83       	std	Z+2, r25	; 0x02
   1052e:	a3 83       	std	Z+3, r26	; 0x03
   10530:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10534:	37 c0       	rjmp	.+110    	; 0x105a4 <ls+0xd6>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10536:	fc 01       	movw	r30, r24
   10538:	80 81       	ld	r24, Z
   1053a:	88 23       	and	r24, r24
   1053c:	51 f3       	breq	.-44     	; 0x10512 <ls+0x44>
   1053e:	63 ef       	ldi	r22, 0xF3	; 243
   10540:	72 e1       	ldi	r23, 0x12	; 18
   10542:	c7 01       	movw	r24, r14
   10544:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   10548:	89 2b       	or	r24, r25
   1054a:	19 f7       	brne	.-58     	; 0x10512 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   1054c:	b7 01       	movw	r22, r14
   1054e:	c8 01       	movw	r24, r16
   10550:	0e 94 97 32 	call	0x652e	; 0x652e <strcpy>
    }
    len = strlen(fullpath);
   10554:	f8 01       	movw	r30, r16
   10556:	01 90       	ld	r0, Z+
   10558:	00 20       	and	r0, r0
   1055a:	e9 f7       	brne	.-6      	; 0x10556 <ls+0x88>
   1055c:	31 97       	sbiw	r30, 0x01	; 1
   1055e:	1f 01       	movw	r2, r30
   10560:	20 1a       	sub	r2, r16
   10562:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
   10564:	ed b7       	in	r30, 0x3d	; 61
   10566:	fe b7       	in	r31, 0x3e	; 62
   10568:	15 83       	std	Z+5, r17	; 0x05
   1056a:	04 83       	std	Z+4, r16	; 0x04
   1056c:	86 e4       	ldi	r24, 0x46	; 70
   1056e:	9d e0       	ldi	r25, 0x0D	; 13
   10570:	a0 e0       	ldi	r26, 0x00	; 0
   10572:	81 83       	std	Z+1, r24	; 0x01
   10574:	92 83       	std	Z+2, r25	; 0x02
   10576:	a3 83       	std	Z+3, r26	; 0x03
   10578:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    if (stat(fullpath, &st))
   1057c:	be 01       	movw	r22, r28
   1057e:	6a 5f       	subi	r22, 0xFA	; 250
   10580:	7e 4f       	sbci	r23, 0xFE	; 254
   10582:	c8 01       	movw	r24, r16
   10584:	1f d8       	rcall	.-4034   	; 0xf5c4 <stat>
   10586:	7c 01       	movw	r14, r24
   10588:	89 2b       	or	r24, r25
   1058a:	79 f0       	breq	.+30     	; 0x105aa <ls+0xdc>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1058c:	ed b7       	in	r30, 0x3d	; 61
   1058e:	fe b7       	in	r31, 0x3e	; 62
   10590:	15 83       	std	Z+5, r17	; 0x05
   10592:	04 83       	std	Z+4, r16	; 0x04
   10594:	80 e3       	ldi	r24, 0x30	; 48
   10596:	9d e0       	ldi	r25, 0x0D	; 13
   10598:	a0 e0       	ldi	r26, 0x00	; 0
   1059a:	81 83       	std	Z+1, r24	; 0x01
   1059c:	92 83       	std	Z+2, r25	; 0x02
   1059e:	a3 83       	std	Z+3, r26	; 0x03
   105a0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        return(0);
   105a4:	e1 2c       	mov	r14, r1
   105a6:	f1 2c       	mov	r15, r1
   105a8:	8c c0       	rjmp	.+280    	; 0x106c2 <ls+0x1f4>
    }

    switch (st.st_mode & S_IFMT)
   105aa:	c2 5f       	subi	r28, 0xF2	; 242
   105ac:	de 4f       	sbci	r29, 0xFE	; 254
   105ae:	88 81       	ld	r24, Y
   105b0:	99 81       	ldd	r25, Y+1	; 0x01
   105b2:	aa 81       	ldd	r26, Y+2	; 0x02
   105b4:	bb 81       	ldd	r27, Y+3	; 0x03
   105b6:	ce 50       	subi	r28, 0x0E	; 14
   105b8:	d1 40       	sbci	r29, 0x01	; 1
   105ba:	88 27       	eor	r24, r24
   105bc:	90 7f       	andi	r25, 0xF0	; 240
   105be:	aa 27       	eor	r26, r26
   105c0:	bb 27       	eor	r27, r27
   105c2:	81 15       	cp	r24, r1
   105c4:	f0 e4       	ldi	r31, 0x40	; 64
   105c6:	9f 07       	cpc	r25, r31
   105c8:	a1 05       	cpc	r26, r1
   105ca:	b1 05       	cpc	r27, r1
   105cc:	59 f0       	breq	.+22     	; 0x105e4 <ls+0x116>
   105ce:	81 15       	cp	r24, r1
   105d0:	90 48       	sbci	r25, 0x80	; 128
   105d2:	a1 05       	cpc	r26, r1
   105d4:	b1 05       	cpc	r27, r1
   105d6:	09 f0       	breq	.+2      	; 0x105da <ls+0x10c>
   105d8:	66 c0       	rjmp	.+204    	; 0x106a6 <ls+0x1d8>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   105da:	b4 01       	movw	r22, r8
   105dc:	c8 01       	movw	r24, r16
   105de:	bc de       	rcall	.-648    	; 0x10358 <ls_info>
   105e0:	7c 01       	movw	r14, r24
            break;
   105e2:	63 c0       	rjmp	.+198    	; 0x106aa <ls+0x1dc>
        case S_IFDIR:
            dirp = opendir(fullpath);
   105e4:	c8 01       	movw	r24, r16
   105e6:	0e 94 b2 79 	call	0xf364	; 0xf364 <opendir>
   105ea:	5c 01       	movw	r10, r24
            if(!dirp)
   105ec:	89 2b       	or	r24, r25
   105ee:	81 f0       	breq	.+32     	; 0x10610 <ls+0x142>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   105f0:	e1 2c       	mov	r14, r1
   105f2:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   105f4:	c8 01       	movw	r24, r16
   105f6:	82 0d       	add	r24, r2
   105f8:	93 1d       	adc	r25, r3
   105fa:	ca 5c       	subi	r28, 0xCA	; 202
   105fc:	de 4f       	sbci	r29, 0xFE	; 254
   105fe:	99 83       	std	Y+1, r25	; 0x01
   10600:	88 83       	st	Y, r24
   10602:	c6 53       	subi	r28, 0x36	; 54
   10604:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   10606:	8d ef       	ldi	r24, 0xFD	; 253
   10608:	9c e0       	ldi	r25, 0x0C	; 12
   1060a:	2c 01       	movw	r4, r24
   1060c:	61 2c       	mov	r6, r1
   1060e:	24 c0       	rjmp	.+72     	; 0x10658 <ls+0x18a>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   10610:	80 e2       	ldi	r24, 0x20	; 32
   10612:	9d e0       	ldi	r25, 0x0D	; 13
   10614:	a0 e0       	ldi	r26, 0x00	; 0
   10616:	ed b7       	in	r30, 0x3d	; 61
   10618:	fe b7       	in	r31, 0x3e	; 62
   1061a:	81 83       	std	Z+1, r24	; 0x01
   1061c:	92 83       	std	Z+2, r25	; 0x02
   1061e:	a3 83       	std	Z+3, r26	; 0x03
   10620:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
                return(0);
   10624:	4e c0       	rjmp	.+156    	; 0x106c2 <ls+0x1f4>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   10626:	f6 01       	movw	r30, r12
   10628:	80 81       	ld	r24, Z
   1062a:	88 23       	and	r24, r24
   1062c:	d9 f0       	breq	.+54     	; 0x10664 <ls+0x196>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   1062e:	f6 01       	movw	r30, r12
   10630:	01 90       	ld	r0, Z+
   10632:	00 20       	and	r0, r0
   10634:	e9 f7       	brne	.-6      	; 0x10630 <ls+0x162>
   10636:	31 97       	sbiw	r30, 0x01	; 1
   10638:	ec 19       	sub	r30, r12
   1063a:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   1063c:	e2 0d       	add	r30, r2
   1063e:	f3 1d       	adc	r31, r3
   10640:	ef 3f       	cpi	r30, 0xFF	; 255
   10642:	f1 05       	cpc	r31, r1
   10644:	9c f0       	brlt	.+38     	; 0x1066c <ls+0x19e>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   10646:	ed b7       	in	r30, 0x3d	; 61
   10648:	fe b7       	in	r31, 0x3e	; 62
   1064a:	d5 82       	std	Z+5, r13	; 0x05
   1064c:	c4 82       	std	Z+4, r12	; 0x04
   1064e:	41 82       	std	Z+1, r4	; 0x01
   10650:	52 82       	std	Z+2, r5	; 0x02
   10652:	63 82       	std	Z+3, r6	; 0x03
   10654:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
   10658:	c5 01       	movw	r24, r10
   1065a:	0e 94 d0 79 	call	0xf3a0	; 0xf3a0 <readdir>
   1065e:	6c 01       	movw	r12, r24
   10660:	89 2b       	or	r24, r25
   10662:	09 f7       	brne	.-62     	; 0x10626 <ls+0x158>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   10664:	c5 01       	movw	r24, r10
   10666:	0e 94 97 79 	call	0xf32e	; 0xf32e <closedir>
            break;
   1066a:	1f c0       	rjmp	.+62     	; 0x106aa <ls+0x1dc>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   1066c:	61 ea       	ldi	r22, 0xA1	; 161
   1066e:	78 e0       	ldi	r23, 0x08	; 8
   10670:	c8 01       	movw	r24, r16
   10672:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   10676:	89 2b       	or	r24, r25
   10678:	29 f4       	brne	.+10     	; 0x10684 <ls+0x1b6>
                {
                    strcat(fullpath,"/");
   1067a:	61 ea       	ldi	r22, 0xA1	; 161
   1067c:	78 e0       	ldi	r23, 0x08	; 8
   1067e:	c8 01       	movw	r24, r16
   10680:	0e 94 b8 32 	call	0x6570	; 0x6570 <strcat>
                }
                strcat(fullpath,de->d_name);
   10684:	b6 01       	movw	r22, r12
   10686:	c8 01       	movw	r24, r16
   10688:	0e 94 b8 32 	call	0x6570	; 0x6570 <strcat>
                files +=ls_info(fullpath,verbose);
   1068c:	b4 01       	movw	r22, r8
   1068e:	c8 01       	movw	r24, r16
   10690:	63 de       	rcall	.-826    	; 0x10358 <ls_info>
   10692:	e8 0e       	add	r14, r24
   10694:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   10696:	ca 5c       	subi	r28, 0xCA	; 202
   10698:	de 4f       	sbci	r29, 0xFE	; 254
   1069a:	e8 81       	ld	r30, Y
   1069c:	f9 81       	ldd	r31, Y+1	; 0x01
   1069e:	c6 53       	subi	r28, 0x36	; 54
   106a0:	d1 40       	sbci	r29, 0x01	; 1
   106a2:	10 82       	st	Z, r1
   106a4:	d9 cf       	rjmp	.-78     	; 0x10658 <ls+0x18a>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   106a6:	e1 2c       	mov	r14, r1
   106a8:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   106aa:	ed b7       	in	r30, 0x3d	; 61
   106ac:	fe b7       	in	r31, 0x3e	; 62
   106ae:	f5 82       	std	Z+5, r15	; 0x05
   106b0:	e4 82       	std	Z+4, r14	; 0x04
   106b2:	82 ef       	ldi	r24, 0xF2	; 242
   106b4:	9c e0       	ldi	r25, 0x0C	; 12
   106b6:	a0 e0       	ldi	r26, 0x00	; 0
   106b8:	81 83       	std	Z+1, r24	; 0x01
   106ba:	92 83       	std	Z+2, r25	; 0x02
   106bc:	a3 83       	std	Z+3, r26	; 0x03
   106be:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    return(files);
}
   106c2:	c7 01       	movw	r24, r14
   106c4:	c9 5c       	subi	r28, 0xC9	; 201
   106c6:	de 4f       	sbci	r29, 0xFE	; 254
   106c8:	0f b6       	in	r0, 0x3f	; 63
   106ca:	f8 94       	cli
   106cc:	de bf       	out	0x3e, r29	; 62
   106ce:	0f be       	out	0x3f, r0	; 63
   106d0:	cd bf       	out	0x3d, r28	; 61
   106d2:	df 91       	pop	r29
   106d4:	cf 91       	pop	r28
   106d6:	1f 91       	pop	r17
   106d8:	0f 91       	pop	r16
   106da:	ff 90       	pop	r15
   106dc:	ef 90       	pop	r14
   106de:	df 90       	pop	r13
   106e0:	cf 90       	pop	r12
   106e2:	bf 90       	pop	r11
   106e4:	af 90       	pop	r10
   106e6:	9f 90       	pop	r9
   106e8:	8f 90       	pop	r8
   106ea:	6f 90       	pop	r6
   106ec:	5f 90       	pop	r5
   106ee:	4f 90       	pop	r4
   106f0:	3f 90       	pop	r3
   106f2:	2f 90       	pop	r2
   106f4:	08 95       	ret

000106f6 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   106f6:	a7 e0       	ldi	r26, 0x07	; 7
   106f8:	b1 e0       	ldi	r27, 0x01	; 1
   106fa:	e1 e8       	ldi	r30, 0x81	; 129
   106fc:	f3 e8       	ldi	r31, 0x83	; 131
   106fe:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10702:	fb 01       	movw	r30, r22
   10704:	c0 80       	ld	r12, Z
   10706:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   10708:	c1 14       	cp	r12, r1
   1070a:	d1 04       	cpc	r13, r1
   1070c:	09 f4       	brne	.+2      	; 0x10710 <posix_tests+0x1a>
   1070e:	9a c1       	rjmp	.+820    	; 0x10a44 <posix_tests+0x34e>
   10710:	2b 01       	movw	r4, r22
   10712:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
   10714:	69 eb       	ldi	r22, 0xB9	; 185
   10716:	7b e0       	ldi	r23, 0x0B	; 11
   10718:	c6 01       	movw	r24, r12
   1071a:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   1071e:	89 2b       	or	r24, r25
   10720:	a9 f0       	breq	.+42     	; 0x1074c <posix_tests+0x56>
    {
        ptr = argv[ind++];
   10722:	f2 01       	movw	r30, r4
   10724:	c2 80       	ldd	r12, Z+2	; 0x02
   10726:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10728:	c1 14       	cp	r12, r1
   1072a:	d1 04       	cpc	r13, r1
   1072c:	21 f4       	brne	.+8      	; 0x10736 <posix_tests+0x40>
        {
            posix_help(1);
   1072e:	81 e0       	ldi	r24, 0x01	; 1
   10730:	90 e0       	ldi	r25, 0x00	; 0
   10732:	6f dc       	rcall	.-1826   	; 0x10012 <posix_help>
   10734:	28 c1       	rjmp	.+592    	; 0x10986 <posix_tests+0x290>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10736:	65 e9       	ldi	r22, 0x95	; 149
   10738:	76 e1       	ldi	r23, 0x16	; 22
   1073a:	c6 01       	movw	r24, r12
   1073c:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   10740:	89 2b       	or	r24, r25
   10742:	a9 f7       	brne	.-22     	; 0x1072e <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10744:	22 e0       	ldi	r18, 0x02	; 2
   10746:	62 2e       	mov	r6, r18
   10748:	71 2c       	mov	r7, r1
   1074a:	03 c0       	rjmp	.+6      	; 0x10752 <posix_tests+0x5c>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1074c:	66 24       	eor	r6, r6
   1074e:	63 94       	inc	r6
   10750:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10752:	73 01       	movw	r14, r6
   10754:	ff ef       	ldi	r31, 0xFF	; 255
   10756:	ef 1a       	sub	r14, r31
   10758:	ff 0a       	sbc	r15, r31
   1075a:	98 01       	movw	r18, r16
   1075c:	a7 01       	movw	r20, r14
   1075e:	6f eb       	ldi	r22, 0xBF	; 191
   10760:	7b e0       	ldi	r23, 0x0B	; 11
   10762:	c6 01       	movw	r24, r12
   10764:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   10768:	89 2b       	or	r24, r25
   1076a:	a1 f1       	breq	.+104    	; 0x107d4 <posix_tests+0xde>
   1076c:	73 01       	movw	r14, r6
   1076e:	ee 0c       	add	r14, r14
   10770:	ff 1c       	adc	r15, r15
   10772:	e4 0c       	add	r14, r4
   10774:	f5 1c       	adc	r15, r5
   10776:	57 01       	movw	r10, r14
   10778:	47 01       	movw	r8, r14
   1077a:	63 01       	movw	r12, r6
   1077c:	41 2c       	mov	r4, r1
   1077e:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10780:	c0 16       	cp	r12, r16
   10782:	d1 06       	cpc	r13, r17
   10784:	1c f5       	brge	.+70     	; 0x107cc <posix_tests+0xd6>
        {
            if(MATCH(argv[i],"-p"))
   10786:	63 ec       	ldi	r22, 0xC3	; 195
   10788:	7b e0       	ldi	r23, 0x0B	; 11
   1078a:	f4 01       	movw	r30, r8
   1078c:	81 91       	ld	r24, Z+
   1078e:	91 91       	ld	r25, Z+
   10790:	4f 01       	movw	r8, r30
   10792:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   10796:	89 2b       	or	r24, r25
   10798:	19 f0       	breq	.+6      	; 0x107a0 <posix_tests+0xaa>
                page = 1;
   1079a:	44 24       	eor	r4, r4
   1079c:	43 94       	inc	r4
   1079e:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   107a0:	ff ef       	ldi	r31, 0xFF	; 255
   107a2:	cf 1a       	sub	r12, r31
   107a4:	df 0a       	sbc	r13, r31
   107a6:	ec cf       	rjmp	.-40     	; 0x10780 <posix_tests+0x8a>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   107a8:	63 ec       	ldi	r22, 0xC3	; 195
   107aa:	7b e0       	ldi	r23, 0x0B	; 11
   107ac:	f5 01       	movw	r30, r10
   107ae:	81 91       	ld	r24, Z+
   107b0:	91 91       	ld	r25, Z+
   107b2:	5f 01       	movw	r10, r30
   107b4:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   107b8:	89 2b       	or	r24, r25
   107ba:	29 f4       	brne	.+10     	; 0x107c6 <posix_tests+0xd0>
                cat(argv[ind], page);
   107bc:	b2 01       	movw	r22, r4
   107be:	f7 01       	movw	r30, r14
   107c0:	80 81       	ld	r24, Z
   107c2:	91 81       	ldd	r25, Z+1	; 0x01
   107c4:	5d dd       	rcall	.-1350   	; 0x10280 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   107c6:	ff ef       	ldi	r31, 0xFF	; 255
   107c8:	6f 1a       	sub	r6, r31
   107ca:	7f 0a       	sbc	r7, r31
   107cc:	60 16       	cp	r6, r16
   107ce:	71 06       	cpc	r7, r17
   107d0:	5c f3       	brlt	.-42     	; 0x107a8 <posix_tests+0xb2>
   107d2:	d9 c0       	rjmp	.+434    	; 0x10986 <posix_tests+0x290>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   107d4:	53 01       	movw	r10, r6
   107d6:	82 e0       	ldi	r24, 0x02	; 2
   107d8:	a8 0e       	add	r10, r24
   107da:	b1 1c       	adc	r11, r1
   107dc:	98 01       	movw	r18, r16
   107de:	a5 01       	movw	r20, r10
   107e0:	66 ec       	ldi	r22, 0xC6	; 198
   107e2:	7b e0       	ldi	r23, 0x0B	; 11
   107e4:	c6 01       	movw	r24, r12
   107e6:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   107ea:	89 2b       	or	r24, r25
   107ec:	59 f0       	breq	.+22     	; 0x10804 <posix_tests+0x10e>
    {
        copy(argv[ind],argv[ind+1]);
   107ee:	f3 01       	movw	r30, r6
   107f0:	ee 0f       	add	r30, r30
   107f2:	ff 1f       	adc	r31, r31
   107f4:	e4 0d       	add	r30, r4
   107f6:	f5 1d       	adc	r31, r5
   107f8:	62 81       	ldd	r22, Z+2	; 0x02
   107fa:	73 81       	ldd	r23, Z+3	; 0x03
   107fc:	80 81       	ld	r24, Z
   107fe:	91 81       	ldd	r25, Z+1	; 0x01
   10800:	29 dc       	rcall	.-1966   	; 0x10054 <copy>
   10802:	c1 c0       	rjmp	.+386    	; 0x10986 <posix_tests+0x290>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10804:	98 01       	movw	r18, r16
   10806:	a7 01       	movw	r20, r14
   10808:	6c e4       	ldi	r22, 0x4C	; 76
   1080a:	77 e1       	ldi	r23, 0x17	; 23
   1080c:	c6 01       	movw	r24, r12
   1080e:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   10812:	89 2b       	or	r24, r25
   10814:	b9 f0       	breq	.+46     	; 0x10844 <posix_tests+0x14e>
    {
        if ( chdir(argv[ind]) != 0)
   10816:	73 01       	movw	r14, r6
   10818:	ee 0c       	add	r14, r14
   1081a:	ff 1c       	adc	r15, r15
   1081c:	e4 0c       	add	r14, r4
   1081e:	f5 1c       	adc	r15, r5
   10820:	f7 01       	movw	r30, r14
   10822:	80 81       	ld	r24, Z
   10824:	91 81       	ldd	r25, Z+1	; 0x01
   10826:	0e 94 bc 78 	call	0xf178	; 0xf178 <chdir>
   1082a:	89 2b       	or	r24, r25
   1082c:	09 f4       	brne	.+2      	; 0x10830 <posix_tests+0x13a>
   1082e:	ab c0       	rjmp	.+342    	; 0x10986 <posix_tests+0x290>
            printf("chdir %s failed\n", argv[ind]);
   10830:	f7 01       	movw	r30, r14
   10832:	80 81       	ld	r24, Z
   10834:	91 81       	ldd	r25, Z+1	; 0x01
   10836:	ed b7       	in	r30, 0x3d	; 61
   10838:	fe b7       	in	r31, 0x3e	; 62
   1083a:	95 83       	std	Z+5, r25	; 0x05
   1083c:	84 83       	std	Z+4, r24	; 0x04
   1083e:	85 e8       	ldi	r24, 0x85	; 133
   10840:	9e e0       	ldi	r25, 0x0E	; 14
   10842:	9b c0       	rjmp	.+310    	; 0x1097a <posix_tests+0x284>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10844:	98 01       	movw	r18, r16
   10846:	a3 01       	movw	r20, r6
   10848:	63 ed       	ldi	r22, 0xD3	; 211
   1084a:	78 e0       	ldi	r23, 0x08	; 8
   1084c:	c6 01       	movw	r24, r12
   1084e:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   10852:	4c 01       	movw	r8, r24
   10854:	89 2b       	or	r24, r25
   10856:	69 f1       	breq	.+90     	; 0x108b2 <posix_tests+0x1bc>
   10858:	73 01       	movw	r14, r6
   1085a:	ee 0c       	add	r14, r14
   1085c:	ff 1c       	adc	r15, r15
   1085e:	e4 0c       	add	r14, r4
   10860:	f5 1c       	adc	r15, r5
   10862:	c1 2c       	mov	r12, r1
   10864:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10866:	c6 01       	movw	r24, r12
   10868:	86 0d       	add	r24, r6
   1086a:	97 1d       	adc	r25, r7
   1086c:	80 17       	cp	r24, r16
   1086e:	91 07       	cpc	r25, r17
   10870:	b4 f4       	brge	.+44     	; 0x1089e <posix_tests+0x1a8>
        {
            if(!MATCH(argv[i],"-l"))
   10872:	6b ec       	ldi	r22, 0xCB	; 203
   10874:	7b e0       	ldi	r23, 0x0B	; 11
   10876:	f7 01       	movw	r30, r14
   10878:	80 81       	ld	r24, Z
   1087a:	91 81       	ldd	r25, Z+1	; 0x01
   1087c:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   10880:	89 2b       	or	r24, r25
   10882:	31 f4       	brne	.+12     	; 0x10890 <posix_tests+0x19a>
                ls(argv[i],1);
   10884:	61 e0       	ldi	r22, 0x01	; 1
   10886:	70 e0       	ldi	r23, 0x00	; 0
   10888:	f7 01       	movw	r30, r14
   1088a:	80 81       	ld	r24, Z
   1088c:	91 81       	ldd	r25, Z+1	; 0x01
   1088e:	1f de       	rcall	.-962    	; 0x104ce <ls>
            ++args;
   10890:	ff ef       	ldi	r31, 0xFF	; 255
   10892:	cf 1a       	sub	r12, r31
   10894:	df 0a       	sbc	r13, r31
   10896:	82 e0       	ldi	r24, 0x02	; 2
   10898:	e8 0e       	add	r14, r24
   1089a:	f1 1c       	adc	r15, r1
   1089c:	e4 cf       	rjmp	.-56     	; 0x10866 <posix_tests+0x170>
        }
        if(!args)
   1089e:	c1 14       	cp	r12, r1
   108a0:	d1 04       	cpc	r13, r1
   108a2:	09 f0       	breq	.+2      	; 0x108a6 <posix_tests+0x1b0>
        {
            ls("",1);
   108a4:	70 c0       	rjmp	.+224    	; 0x10986 <posix_tests+0x290>
   108a6:	61 e0       	ldi	r22, 0x01	; 1
   108a8:	70 e0       	ldi	r23, 0x00	; 0
   108aa:	85 e2       	ldi	r24, 0x25	; 37
   108ac:	9c e0       	ldi	r25, 0x0C	; 12
   108ae:	0f de       	rcall	.-994    	; 0x104ce <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   108b0:	6a c0       	rjmp	.+212    	; 0x10986 <posix_tests+0x290>
   108b2:	98 01       	movw	r18, r16
   108b4:	a7 01       	movw	r20, r14
   108b6:	6e ec       	ldi	r22, 0xCE	; 206
   108b8:	7b e0       	ldi	r23, 0x0B	; 11
   108ba:	c6 01       	movw	r24, r12
   108bc:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   108c0:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   108c2:	71 f1       	breq	.+92     	; 0x10920 <posix_tests+0x22a>
   108c4:	e0 16       	cp	r14, r16
   108c6:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   108c8:	7c f4       	brge	.+30     	; 0x108e8 <posix_tests+0x1f2>
   108ca:	ee 0c       	add	r14, r14
   108cc:	ff 1c       	adc	r15, r15
   108ce:	f2 01       	movw	r30, r4
   108d0:	ee 0d       	add	r30, r14
   108d2:	ff 1d       	adc	r31, r15
   108d4:	48 e0       	ldi	r20, 0x08	; 8
   108d6:	50 e0       	ldi	r21, 0x00	; 0
   108d8:	60 e0       	ldi	r22, 0x00	; 0
   108da:	70 e0       	ldi	r23, 0x00	; 0
   108dc:	80 81       	ld	r24, Z
   108de:	91 81       	ldd	r25, Z+1	; 0x01
   108e0:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <strtol>
   108e4:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   108e6:	02 c0       	rjmp	.+4      	; 0x108ec <posix_tests+0x1f6>
   108e8:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   108ea:	51 e0       	ldi	r21, 0x01	; 1
   108ec:	73 01       	movw	r14, r6
   108ee:	ee 0c       	add	r14, r14
   108f0:	ff 1c       	adc	r15, r15
   108f2:	e4 0c       	add	r14, r4
   108f4:	f5 1c       	adc	r15, r5
   108f6:	05 2e       	mov	r0, r21
   108f8:	00 0c       	add	r0, r0
   108fa:	66 0b       	sbc	r22, r22
   108fc:	77 0b       	sbc	r23, r23
   108fe:	f7 01       	movw	r30, r14
   10900:	80 81       	ld	r24, Z
   10902:	91 81       	ldd	r25, Z+1	; 0x01
   10904:	0e 94 29 79 	call	0xf252	; 0xf252 <mkdir>
   10908:	89 2b       	or	r24, r25
        {
            printf("mkdir %s failed\n", argv[ind]);
   1090a:	e9 f1       	breq	.+122    	; 0x10986 <posix_tests+0x290>
   1090c:	f7 01       	movw	r30, r14
   1090e:	80 81       	ld	r24, Z
   10910:	91 81       	ldd	r25, Z+1	; 0x01
   10912:	ed b7       	in	r30, 0x3d	; 61
   10914:	fe b7       	in	r31, 0x3e	; 62
   10916:	95 83       	std	Z+5, r25	; 0x05
   10918:	84 83       	std	Z+4, r24	; 0x04
   1091a:	84 e7       	ldi	r24, 0x74	; 116
   1091c:	9e e0       	ldi	r25, 0x0E	; 14
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   1091e:	b4 c0       	rjmp	.+360    	; 0x10a88 <posix_tests+0x392>
   10920:	98 01       	movw	r18, r16
   10922:	a7 01       	movw	r20, r14
   10924:	64 ed       	ldi	r22, 0xD4	; 212
   10926:	7b e0       	ldi	r23, 0x0B	; 11
   10928:	c6 01       	movw	r24, r12
   1092a:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1092e:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   10930:	71 f0       	breq	.+28     	; 0x1094e <posix_tests+0x258>
   10932:	66 0c       	add	r6, r6
   10934:	77 1c       	adc	r7, r7
   10936:	f2 01       	movw	r30, r4
   10938:	e6 0d       	add	r30, r6
   1093a:	f7 1d       	adc	r31, r7
   1093c:	80 81       	ld	r24, Z
   1093e:	91 81       	ldd	r25, Z+1	; 0x01
   10940:	0e 94 32 48 	call	0x9064	; 0x9064 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10944:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   10948:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1094c:	1c c0       	rjmp	.+56     	; 0x10986 <posix_tests+0x290>
   1094e:	98 01       	movw	r18, r16
   10950:	a3 01       	movw	r20, r6
   10952:	69 ed       	ldi	r22, 0xD9	; 217
   10954:	7b e0       	ldi	r23, 0x0B	; 11
   10956:	c6 01       	movw	r24, r12
   10958:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1095c:	4c 01       	movw	r8, r24
   1095e:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   10960:	b1 f0       	breq	.+44     	; 0x1098e <posix_tests+0x298>
   10962:	6e ef       	ldi	r22, 0xFE	; 254
   10964:	70 e0       	ldi	r23, 0x00	; 0
   10966:	ce 01       	movw	r24, r28
   10968:	08 96       	adiw	r24, 0x08	; 8
   1096a:	0e 94 04 79 	call	0xf208	; 0xf208 <getcwd>
   1096e:	ed b7       	in	r30, 0x3d	; 61
   10970:	fe b7       	in	r31, 0x3e	; 62
   10972:	95 83       	std	Z+5, r25	; 0x05
   10974:	84 83       	std	Z+4, r24	; 0x04
   10976:	80 e7       	ldi	r24, 0x70	; 112
   10978:	9e e0       	ldi	r25, 0x0E	; 14
   1097a:	a0 e0       	ldi	r26, 0x00	; 0
   1097c:	81 83       	std	Z+1, r24	; 0x01
   1097e:	92 83       	std	Z+2, r25	; 0x02
   10980:	a3 83       	std	Z+3, r26	; 0x03
   10982:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        return(1);
   10986:	88 24       	eor	r8, r8
   10988:	83 94       	inc	r8
   1098a:	91 2c       	mov	r9, r1
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1098c:	83 c0       	rjmp	.+262    	; 0x10a94 <posix_tests+0x39e>
   1098e:	98 01       	movw	r18, r16
   10990:	a5 01       	movw	r20, r10
   10992:	6d ed       	ldi	r22, 0xDD	; 221
   10994:	7b e0       	ldi	r23, 0x0B	; 11
   10996:	c6 01       	movw	r24, r12
   10998:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1099c:	89 2b       	or	r24, r25
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   1099e:	61 f1       	breq	.+88     	; 0x109f8 <posix_tests+0x302>
   109a0:	66 0c       	add	r6, r6
   109a2:	77 1c       	adc	r7, r7
   109a4:	82 01       	movw	r16, r4
   109a6:	06 0d       	add	r16, r6
   109a8:	17 1d       	adc	r17, r7
   109aa:	f2 e0       	ldi	r31, 0x02	; 2
   109ac:	6f 0e       	add	r6, r31
   109ae:	71 1c       	adc	r7, r1
   109b0:	72 01       	movw	r14, r4
   109b2:	e6 0c       	add	r14, r6
   109b4:	f7 1c       	adc	r15, r7
   109b6:	f7 01       	movw	r30, r14
   109b8:	60 81       	ld	r22, Z
   109ba:	71 81       	ldd	r23, Z+1	; 0x01
   109bc:	f8 01       	movw	r30, r16
   109be:	80 81       	ld	r24, Z
   109c0:	91 81       	ldd	r25, Z+1	; 0x01
   109c2:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <rename>
   109c6:	89 2b       	or	r24, r25
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   109c8:	f1 f2       	breq	.-68     	; 0x10986 <posix_tests+0x290>
   109ca:	f7 01       	movw	r30, r14
   109cc:	80 81       	ld	r24, Z
   109ce:	91 81       	ldd	r25, Z+1	; 0x01
   109d0:	ed b7       	in	r30, 0x3d	; 61
   109d2:	fe b7       	in	r31, 0x3e	; 62
   109d4:	97 83       	std	Z+7, r25	; 0x07
   109d6:	86 83       	std	Z+6, r24	; 0x06
   109d8:	f8 01       	movw	r30, r16
   109da:	80 81       	ld	r24, Z
   109dc:	91 81       	ldd	r25, Z+1	; 0x01
   109de:	ed b7       	in	r30, 0x3d	; 61
   109e0:	fe b7       	in	r31, 0x3e	; 62
   109e2:	95 83       	std	Z+5, r25	; 0x05
   109e4:	84 83       	std	Z+4, r24	; 0x04
   109e6:	8f e5       	ldi	r24, 0x5F	; 95
   109e8:	9e e0       	ldi	r25, 0x0E	; 14
   109ea:	a0 e0       	ldi	r26, 0x00	; 0
   109ec:	81 83       	std	Z+1, r24	; 0x01
   109ee:	92 83       	std	Z+2, r25	; 0x02
   109f0:	a3 83       	std	Z+3, r26	; 0x03
   109f2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   109f6:	4e c0       	rjmp	.+156    	; 0x10a94 <posix_tests+0x39e>
   109f8:	98 01       	movw	r18, r16
   109fa:	a7 01       	movw	r20, r14
   109fc:	64 ee       	ldi	r22, 0xE4	; 228
   109fe:	7b e0       	ldi	r23, 0x0B	; 11
   10a00:	c6 01       	movw	r24, r12
   10a02:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   10a06:	4c 01       	movw	r8, r24
   10a08:	89 2b       	or	r24, r25
    {
        if ( unlink(argv[ind]) != 0)
   10a0a:	f9 f0       	breq	.+62     	; 0x10a4a <posix_tests+0x354>
   10a0c:	73 01       	movw	r14, r6
   10a0e:	ee 0c       	add	r14, r14
   10a10:	ff 1c       	adc	r15, r15
   10a12:	e4 0c       	add	r14, r4
   10a14:	f5 1c       	adc	r15, r5
   10a16:	f7 01       	movw	r30, r14
   10a18:	80 81       	ld	r24, Z
   10a1a:	91 81       	ldd	r25, Z+1	; 0x01
   10a1c:	0e 94 76 79 	call	0xf2ec	; 0xf2ec <unlink>
   10a20:	89 2b       	or	r24, r25
   10a22:	09 f4       	brne	.+2      	; 0x10a26 <posix_tests+0x330>
        {
            printf("rm %s failed\n", argv[ind]);
   10a24:	b0 cf       	rjmp	.-160    	; 0x10986 <posix_tests+0x290>
   10a26:	f7 01       	movw	r30, r14
   10a28:	80 81       	ld	r24, Z
   10a2a:	91 81       	ldd	r25, Z+1	; 0x01
   10a2c:	ed b7       	in	r30, 0x3d	; 61
   10a2e:	fe b7       	in	r31, 0x3e	; 62
   10a30:	95 83       	std	Z+5, r25	; 0x05
   10a32:	84 83       	std	Z+4, r24	; 0x04
   10a34:	81 e5       	ldi	r24, 0x51	; 81
   10a36:	9e e0       	ldi	r25, 0x0E	; 14
   10a38:	a0 e0       	ldi	r26, 0x00	; 0
   10a3a:	81 83       	std	Z+1, r24	; 0x01
   10a3c:	92 83       	std	Z+2, r25	; 0x02
   10a3e:	a3 83       	std	Z+3, r26	; 0x03
   10a40:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            return(0);
   10a44:	81 2c       	mov	r8, r1
   10a46:	91 2c       	mov	r9, r1
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10a48:	25 c0       	rjmp	.+74     	; 0x10a94 <posix_tests+0x39e>
   10a4a:	98 01       	movw	r18, r16
   10a4c:	a7 01       	movw	r20, r14
   10a4e:	67 ee       	ldi	r22, 0xE7	; 231
   10a50:	7b e0       	ldi	r23, 0x0B	; 11
   10a52:	c6 01       	movw	r24, r12
   10a54:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   10a58:	89 2b       	or	r24, r25
    {
        if ( rmdir(argv[ind]) != 0)
   10a5a:	a1 f3       	breq	.-24     	; 0x10a44 <posix_tests+0x34e>
   10a5c:	73 01       	movw	r14, r6
   10a5e:	ee 0c       	add	r14, r14
   10a60:	ff 1c       	adc	r15, r15
   10a62:	e4 0c       	add	r14, r4
   10a64:	f5 1c       	adc	r15, r5
   10a66:	f7 01       	movw	r30, r14
   10a68:	80 81       	ld	r24, Z
   10a6a:	91 81       	ldd	r25, Z+1	; 0x01
   10a6c:	0e 94 95 79 	call	0xf32a	; 0xf32a <rmdir>
   10a70:	89 2b       	or	r24, r25
   10a72:	09 f4       	brne	.+2      	; 0x10a76 <posix_tests+0x380>
        {
            printf("rmdir %s failed\n", argv[ind]);
   10a74:	88 cf       	rjmp	.-240    	; 0x10986 <posix_tests+0x290>
   10a76:	f7 01       	movw	r30, r14
   10a78:	80 81       	ld	r24, Z
   10a7a:	91 81       	ldd	r25, Z+1	; 0x01
   10a7c:	ed b7       	in	r30, 0x3d	; 61
   10a7e:	fe b7       	in	r31, 0x3e	; 62
   10a80:	95 83       	std	Z+5, r25	; 0x05
   10a82:	84 83       	std	Z+4, r24	; 0x04
   10a84:	80 e4       	ldi	r24, 0x40	; 64
   10a86:	9e e0       	ldi	r25, 0x0E	; 14
   10a88:	a0 e0       	ldi	r26, 0x00	; 0
   10a8a:	81 83       	std	Z+1, r24	; 0x01
   10a8c:	92 83       	std	Z+2, r25	; 0x02
   10a8e:	a3 83       	std	Z+3, r26	; 0x03
   10a90:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        return(1);
    }
#endif

    return(0);
}
   10a94:	c4 01       	movw	r24, r8
   10a96:	c9 5f       	subi	r28, 0xF9	; 249
   10a98:	de 4f       	sbci	r29, 0xFE	; 254
   10a9a:	e0 e1       	ldi	r30, 0x10	; 16
   10a9c:	0c 94 07 e4 	jmp	0x1c80e	; 0x1c80e <__epilogue_restores__+0x4>

00010aa0 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10aa0:	00 d0       	rcall	.+0      	; 0x10aa2 <gpib_timer_init+0x2>
   10aa2:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10aa4:	61 e0       	ldi	r22, 0x01	; 1
   10aa6:	70 e0       	ldi	r23, 0x00	; 0
   10aa8:	8c e0       	ldi	r24, 0x0C	; 12
   10aaa:	97 e8       	ldi	r25, 0x87	; 135
   10aac:	0e 94 04 36 	call	0x6c08	; 0x6c08 <set_timers>
   10ab0:	01 96       	adiw	r24, 0x01	; 1
   10ab2:	51 f4       	brne	.+20     	; 0x10ac8 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   10ab4:	82 ec       	ldi	r24, 0xC2	; 194
   10ab6:	9f e0       	ldi	r25, 0x0F	; 15
   10ab8:	a0 e0       	ldi	r26, 0x00	; 0
   10aba:	ed b7       	in	r30, 0x3d	; 61
   10abc:	fe b7       	in	r31, 0x3e	; 62
   10abe:	81 83       	std	Z+1, r24	; 0x01
   10ac0:	92 83       	std	Z+2, r25	; 0x02
   10ac2:	a3 83       	std	Z+3, r26	; 0x03
   10ac4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    gpib_timer_reset();
}
   10ac8:	95 d1       	rcall	.+810    	; 0x10df4 <gpib_timer_reset>
   10aca:	0f 90       	pop	r0
   10acc:	0f 90       	pop	r0
   10ace:	0f 90       	pop	r0
   10ad0:	08 95       	ret

00010ad2 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10ad2:	28 2f       	mov	r18, r24
   10ad4:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10ad6:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10ad8:	88 0f       	add	r24, r24
        if(mask & 1)
   10ada:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10adc:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10ade:	26 95       	lsr	r18
   10ae0:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10ae2:	d1 f7       	brne	.-12     	; 0x10ad8 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10ae4:	08 95       	ret

00010ae6 <ppr_set>:
   10ae6:	f5 df       	rcall	.-22     	; 0x10ad2 <reverse_8bits>
   10ae8:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <_ppr_reg>
   10aec:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <SPI0_TXRX_Byte>
   10af0:	2a 9a       	sbi	0x05, 2	; 5
   10af2:	22 9a       	sbi	0x04, 2	; 4
   10af4:	2a 98       	cbi	0x05, 2	; 5
   10af6:	22 9a       	sbi	0x04, 2	; 4
   10af8:	08 95       	ret

00010afa <ppr_reg>:
   10afa:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_ppr_reg>
   10afe:	e9 cf       	rjmp	.-46     	; 0x10ad2 <reverse_8bits>
   10b00:	08 95       	ret

00010b02 <ppr_init>:
   10b02:	00 d0       	rcall	.+0      	; 0x10b04 <ppr_init+0x2>
   10b04:	1f 92       	push	r1
   10b06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b0a:	81 ff       	sbrs	r24, 1
   10b0c:	0a c0       	rjmp	.+20     	; 0x10b22 <ppr_init+0x20>
   10b0e:	8f ea       	ldi	r24, 0xAF	; 175
   10b10:	9f e0       	ldi	r25, 0x0F	; 15
   10b12:	a0 e0       	ldi	r26, 0x00	; 0
   10b14:	ed b7       	in	r30, 0x3d	; 61
   10b16:	fe b7       	in	r31, 0x3e	; 62
   10b18:	81 83       	std	Z+1, r24	; 0x01
   10b1a:	92 83       	std	Z+2, r25	; 0x02
   10b1c:	a3 83       	std	Z+3, r26	; 0x03
   10b1e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10b22:	80 e0       	ldi	r24, 0x00	; 0
   10b24:	e0 df       	rcall	.-64     	; 0x10ae6 <ppr_set>
   10b26:	0f 90       	pop	r0
   10b28:	0f 90       	pop	r0
   10b2a:	0f 90       	pop	r0
   10b2c:	08 95       	ret

00010b2e <ppr_bit_set>:
   10b2e:	21 e0       	ldi	r18, 0x01	; 1
   10b30:	30 e0       	ldi	r19, 0x00	; 0
   10b32:	01 c0       	rjmp	.+2      	; 0x10b36 <ppr_bit_set+0x8>
   10b34:	22 0f       	add	r18, r18
   10b36:	8a 95       	dec	r24
   10b38:	ea f7       	brpl	.-6      	; 0x10b34 <ppr_bit_set+0x6>
   10b3a:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_ppr_reg>
   10b3e:	82 2b       	or	r24, r18
   10b40:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <_ppr_reg>
   10b44:	d0 cf       	rjmp	.-96     	; 0x10ae6 <ppr_set>
   10b46:	08 95       	ret

00010b48 <ppr_bit_clr>:
   10b48:	21 e0       	ldi	r18, 0x01	; 1
   10b4a:	30 e0       	ldi	r19, 0x00	; 0
   10b4c:	01 c0       	rjmp	.+2      	; 0x10b50 <ppr_bit_clr+0x8>
   10b4e:	22 0f       	add	r18, r18
   10b50:	8a 95       	dec	r24
   10b52:	ea f7       	brpl	.-6      	; 0x10b4e <ppr_bit_clr+0x6>
   10b54:	20 95       	com	r18
   10b56:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_ppr_reg>
   10b5a:	82 23       	and	r24, r18
   10b5c:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <_ppr_reg>
   10b60:	c2 cf       	rjmp	.-124    	; 0x10ae6 <ppr_set>
   10b62:	08 95       	ret

00010b64 <dbf_open>:
   10b64:	0f 93       	push	r16
   10b66:	1f 93       	push	r17
   10b68:	cf 93       	push	r28
   10b6a:	df 93       	push	r29
   10b6c:	00 d0       	rcall	.+0      	; 0x10b6e <dbf_open+0xa>
   10b6e:	00 d0       	rcall	.+0      	; 0x10b70 <dbf_open+0xc>
   10b70:	1f 92       	push	r1
   10b72:	8b 01       	movw	r16, r22
   10b74:	0e 94 51 5b 	call	0xb6a2	; 0xb6a2 <f_open>
   10b78:	ec 01       	movw	r28, r24
   10b7a:	89 2b       	or	r24, r25
   10b7c:	79 f0       	breq	.+30     	; 0x10b9c <dbf_open+0x38>
   10b7e:	ed b7       	in	r30, 0x3d	; 61
   10b80:	fe b7       	in	r31, 0x3e	; 62
   10b82:	15 83       	std	Z+5, r17	; 0x05
   10b84:	04 83       	std	Z+4, r16	; 0x04
   10b86:	8e e9       	ldi	r24, 0x9E	; 158
   10b88:	9f e0       	ldi	r25, 0x0F	; 15
   10b8a:	a0 e0       	ldi	r26, 0x00	; 0
   10b8c:	81 83       	std	Z+1, r24	; 0x01
   10b8e:	92 83       	std	Z+2, r25	; 0x02
   10b90:	a3 83       	std	Z+3, r26	; 0x03
   10b92:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10b96:	ce 01       	movw	r24, r28
   10b98:	0e 94 2b 72 	call	0xe456	; 0xe456 <put_rc>
   10b9c:	ce 01       	movw	r24, r28
   10b9e:	cd b7       	in	r28, 0x3d	; 61
   10ba0:	de b7       	in	r29, 0x3e	; 62
   10ba2:	25 96       	adiw	r28, 0x05	; 5
   10ba4:	e4 e0       	ldi	r30, 0x04	; 4
   10ba6:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00010baa <dbf_read>:
   10baa:	cf 93       	push	r28
   10bac:	df 93       	push	r29
   10bae:	00 d0       	rcall	.+0      	; 0x10bb0 <dbf_read+0x6>
   10bb0:	1f 92       	push	r1
   10bb2:	0e 94 09 5d 	call	0xba12	; 0xba12 <f_read>
   10bb6:	ec 01       	movw	r28, r24
   10bb8:	89 2b       	or	r24, r25
   10bba:	69 f0       	breq	.+26     	; 0x10bd6 <dbf_read+0x2c>
   10bbc:	81 e9       	ldi	r24, 0x91	; 145
   10bbe:	9f e0       	ldi	r25, 0x0F	; 15
   10bc0:	a0 e0       	ldi	r26, 0x00	; 0
   10bc2:	ed b7       	in	r30, 0x3d	; 61
   10bc4:	fe b7       	in	r31, 0x3e	; 62
   10bc6:	81 83       	std	Z+1, r24	; 0x01
   10bc8:	92 83       	std	Z+2, r25	; 0x02
   10bca:	a3 83       	std	Z+3, r26	; 0x03
   10bcc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10bd0:	ce 01       	movw	r24, r28
   10bd2:	0e 94 2b 72 	call	0xe456	; 0xe456 <put_rc>
   10bd6:	ce 01       	movw	r24, r28
   10bd8:	cd b7       	in	r28, 0x3d	; 61
   10bda:	de b7       	in	r29, 0x3e	; 62
   10bdc:	23 96       	adiw	r28, 0x03	; 3
   10bde:	e2 e0       	ldi	r30, 0x02	; 2
   10be0:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00010be4 <dbf_write>:
   10be4:	cf 93       	push	r28
   10be6:	df 93       	push	r29
   10be8:	00 d0       	rcall	.+0      	; 0x10bea <dbf_write+0x6>
   10bea:	1f 92       	push	r1
   10bec:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <f_write>
   10bf0:	ec 01       	movw	r28, r24
   10bf2:	89 2b       	or	r24, r25
   10bf4:	69 f0       	breq	.+26     	; 0x10c10 <dbf_write+0x2c>
   10bf6:	83 e8       	ldi	r24, 0x83	; 131
   10bf8:	9f e0       	ldi	r25, 0x0F	; 15
   10bfa:	a0 e0       	ldi	r26, 0x00	; 0
   10bfc:	ed b7       	in	r30, 0x3d	; 61
   10bfe:	fe b7       	in	r31, 0x3e	; 62
   10c00:	81 83       	std	Z+1, r24	; 0x01
   10c02:	92 83       	std	Z+2, r25	; 0x02
   10c04:	a3 83       	std	Z+3, r26	; 0x03
   10c06:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10c0a:	ce 01       	movw	r24, r28
   10c0c:	0e 94 2b 72 	call	0xe456	; 0xe456 <put_rc>
   10c10:	ce 01       	movw	r24, r28
   10c12:	cd b7       	in	r28, 0x3d	; 61
   10c14:	de b7       	in	r29, 0x3e	; 62
   10c16:	23 96       	adiw	r28, 0x03	; 3
   10c18:	e2 e0       	ldi	r30, 0x02	; 2
   10c1a:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00010c1e <dbf_lseek>:
   10c1e:	cf 93       	push	r28
   10c20:	df 93       	push	r29
   10c22:	00 d0       	rcall	.+0      	; 0x10c24 <dbf_lseek+0x6>
   10c24:	1f 92       	push	r1
   10c26:	0e 94 15 62 	call	0xc42a	; 0xc42a <f_lseek>
   10c2a:	ec 01       	movw	r28, r24
   10c2c:	89 2b       	or	r24, r25
   10c2e:	69 f0       	breq	.+26     	; 0x10c4a <dbf_lseek+0x2c>
   10c30:	86 e7       	ldi	r24, 0x76	; 118
   10c32:	9f e0       	ldi	r25, 0x0F	; 15
   10c34:	a0 e0       	ldi	r26, 0x00	; 0
   10c36:	ed b7       	in	r30, 0x3d	; 61
   10c38:	fe b7       	in	r31, 0x3e	; 62
   10c3a:	81 83       	std	Z+1, r24	; 0x01
   10c3c:	92 83       	std	Z+2, r25	; 0x02
   10c3e:	a3 83       	std	Z+3, r26	; 0x03
   10c40:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10c44:	ce 01       	movw	r24, r28
   10c46:	0e 94 2b 72 	call	0xe456	; 0xe456 <put_rc>
   10c4a:	ce 01       	movw	r24, r28
   10c4c:	cd b7       	in	r28, 0x3d	; 61
   10c4e:	de b7       	in	r29, 0x3e	; 62
   10c50:	23 96       	adiw	r28, 0x03	; 3
   10c52:	e2 e0       	ldi	r30, 0x02	; 2
   10c54:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00010c58 <dbf_close>:
   10c58:	cf 93       	push	r28
   10c5a:	df 93       	push	r29
   10c5c:	00 d0       	rcall	.+0      	; 0x10c5e <dbf_close+0x6>
   10c5e:	1f 92       	push	r1
   10c60:	0e 94 6b 60 	call	0xc0d6	; 0xc0d6 <f_close>
   10c64:	ec 01       	movw	r28, r24
   10c66:	89 2b       	or	r24, r25
   10c68:	69 f0       	breq	.+26     	; 0x10c84 <dbf_close+0x2c>
   10c6a:	88 e6       	ldi	r24, 0x68	; 104
   10c6c:	9f e0       	ldi	r25, 0x0F	; 15
   10c6e:	a0 e0       	ldi	r26, 0x00	; 0
   10c70:	ed b7       	in	r30, 0x3d	; 61
   10c72:	fe b7       	in	r31, 0x3e	; 62
   10c74:	81 83       	std	Z+1, r24	; 0x01
   10c76:	92 83       	std	Z+2, r25	; 0x02
   10c78:	a3 83       	std	Z+3, r26	; 0x03
   10c7a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10c7e:	ce 01       	movw	r24, r28
   10c80:	0e 94 2b 72 	call	0xe456	; 0xe456 <put_rc>
   10c84:	ce 01       	movw	r24, r28
   10c86:	cd b7       	in	r28, 0x3d	; 61
   10c88:	de b7       	in	r29, 0x3e	; 62
   10c8a:	23 96       	adiw	r28, 0x03	; 3
   10c8c:	e2 e0       	ldi	r30, 0x02	; 2
   10c8e:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00010c92 <dbf_open_read>:
   10c92:	a6 e2       	ldi	r26, 0x26	; 38
   10c94:	b2 e0       	ldi	r27, 0x02	; 2
   10c96:	ef e4       	ldi	r30, 0x4F	; 79
   10c98:	f6 e8       	ldi	r31, 0x86	; 134
   10c9a:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
   10c9e:	4a 01       	movw	r8, r20
   10ca0:	5b 01       	movw	r10, r22
   10ca2:	69 01       	movw	r12, r18
   10ca4:	cb 5d       	subi	r28, 0xDB	; 219
   10ca6:	dd 4f       	sbci	r29, 0xFD	; 253
   10ca8:	19 82       	std	Y+1, r1	; 0x01
   10caa:	18 82       	st	Y, r1
   10cac:	c5 52       	subi	r28, 0x25	; 37
   10cae:	d2 40       	sbci	r29, 0x02	; 2
   10cb0:	43 e0       	ldi	r20, 0x03	; 3
   10cb2:	bc 01       	movw	r22, r24
   10cb4:	ce 01       	movw	r24, r28
   10cb6:	01 96       	adiw	r24, 0x01	; 1
   10cb8:	55 df       	rcall	.-342    	; 0x10b64 <dbf_open>
   10cba:	89 2b       	or	r24, r25
   10cbc:	19 f0       	breq	.+6      	; 0x10cc4 <dbf_open_read+0x32>
   10cbe:	81 e1       	ldi	r24, 0x11	; 17
   10cc0:	90 e0       	ldi	r25, 0x00	; 0
   10cc2:	2f c0       	rjmp	.+94     	; 0x10d22 <dbf_open_read+0x90>
   10cc4:	b5 01       	movw	r22, r10
   10cc6:	a4 01       	movw	r20, r8
   10cc8:	ce 01       	movw	r24, r28
   10cca:	01 96       	adiw	r24, 0x01	; 1
   10ccc:	a8 df       	rcall	.-176    	; 0x10c1e <dbf_lseek>
   10cce:	89 2b       	or	r24, r25
   10cd0:	59 f0       	breq	.+22     	; 0x10ce8 <dbf_open_read+0x56>
   10cd2:	85 e0       	ldi	r24, 0x05	; 5
   10cd4:	90 e0       	ldi	r25, 0x00	; 0
   10cd6:	f7 01       	movw	r30, r14
   10cd8:	91 83       	std	Z+1, r25	; 0x01
   10cda:	80 83       	st	Z, r24
   10cdc:	ce 01       	movw	r24, r28
   10cde:	01 96       	adiw	r24, 0x01	; 1
   10ce0:	bb df       	rcall	.-138    	; 0x10c58 <dbf_close>
   10ce2:	8f ef       	ldi	r24, 0xFF	; 255
   10ce4:	9f ef       	ldi	r25, 0xFF	; 255
   10ce6:	27 c0       	rjmp	.+78     	; 0x10d36 <dbf_open_read+0xa4>
   10ce8:	9e 01       	movw	r18, r28
   10cea:	2b 5d       	subi	r18, 0xDB	; 219
   10cec:	3d 4f       	sbci	r19, 0xFD	; 253
   10cee:	a8 01       	movw	r20, r16
   10cf0:	b6 01       	movw	r22, r12
   10cf2:	ce 01       	movw	r24, r28
   10cf4:	01 96       	adiw	r24, 0x01	; 1
   10cf6:	59 df       	rcall	.-334    	; 0x10baa <dbf_read>
   10cf8:	89 2b       	or	r24, r25
   10cfa:	49 f4       	brne	.+18     	; 0x10d0e <dbf_open_read+0x7c>
   10cfc:	cb 5d       	subi	r28, 0xDB	; 219
   10cfe:	dd 4f       	sbci	r29, 0xFD	; 253
   10d00:	88 81       	ld	r24, Y
   10d02:	99 81       	ldd	r25, Y+1	; 0x01
   10d04:	c5 52       	subi	r28, 0x25	; 37
   10d06:	d2 40       	sbci	r29, 0x02	; 2
   10d08:	08 17       	cp	r16, r24
   10d0a:	19 07       	cpc	r17, r25
   10d0c:	19 f0       	breq	.+6      	; 0x10d14 <dbf_open_read+0x82>
   10d0e:	81 e0       	ldi	r24, 0x01	; 1
   10d10:	90 e0       	ldi	r25, 0x00	; 0
   10d12:	e1 cf       	rjmp	.-62     	; 0x10cd6 <dbf_open_read+0x44>
   10d14:	ce 01       	movw	r24, r28
   10d16:	01 96       	adiw	r24, 0x01	; 1
   10d18:	9f df       	rcall	.-194    	; 0x10c58 <dbf_close>
   10d1a:	89 2b       	or	r24, r25
   10d1c:	31 f0       	breq	.+12     	; 0x10d2a <dbf_open_read+0x98>
   10d1e:	80 e1       	ldi	r24, 0x10	; 16
   10d20:	90 e0       	ldi	r25, 0x00	; 0
   10d22:	f7 01       	movw	r30, r14
   10d24:	91 83       	std	Z+1, r25	; 0x01
   10d26:	80 83       	st	Z, r24
   10d28:	dc cf       	rjmp	.-72     	; 0x10ce2 <dbf_open_read+0x50>
   10d2a:	cb 5d       	subi	r28, 0xDB	; 219
   10d2c:	dd 4f       	sbci	r29, 0xFD	; 253
   10d2e:	88 81       	ld	r24, Y
   10d30:	99 81       	ldd	r25, Y+1	; 0x01
   10d32:	c5 52       	subi	r28, 0x25	; 37
   10d34:	d2 40       	sbci	r29, 0x02	; 2
   10d36:	ca 5d       	subi	r28, 0xDA	; 218
   10d38:	dd 4f       	sbci	r29, 0xFD	; 253
   10d3a:	ec e0       	ldi	r30, 0x0C	; 12
   10d3c:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

00010d40 <dbf_open_write>:
   10d40:	a6 e2       	ldi	r26, 0x26	; 38
   10d42:	b2 e0       	ldi	r27, 0x02	; 2
   10d44:	e6 ea       	ldi	r30, 0xA6	; 166
   10d46:	f6 e8       	ldi	r31, 0x86	; 134
   10d48:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
   10d4c:	4a 01       	movw	r8, r20
   10d4e:	5b 01       	movw	r10, r22
   10d50:	69 01       	movw	r12, r18
   10d52:	cb 5d       	subi	r28, 0xDB	; 219
   10d54:	dd 4f       	sbci	r29, 0xFD	; 253
   10d56:	19 82       	std	Y+1, r1	; 0x01
   10d58:	18 82       	st	Y, r1
   10d5a:	c5 52       	subi	r28, 0x25	; 37
   10d5c:	d2 40       	sbci	r29, 0x02	; 2
   10d5e:	43 e0       	ldi	r20, 0x03	; 3
   10d60:	bc 01       	movw	r22, r24
   10d62:	ce 01       	movw	r24, r28
   10d64:	01 96       	adiw	r24, 0x01	; 1
   10d66:	fe de       	rcall	.-516    	; 0x10b64 <dbf_open>
   10d68:	89 2b       	or	r24, r25
   10d6a:	19 f0       	breq	.+6      	; 0x10d72 <dbf_open_write+0x32>
   10d6c:	81 e1       	ldi	r24, 0x11	; 17
   10d6e:	90 e0       	ldi	r25, 0x00	; 0
   10d70:	2f c0       	rjmp	.+94     	; 0x10dd0 <dbf_open_write+0x90>
   10d72:	b5 01       	movw	r22, r10
   10d74:	a4 01       	movw	r20, r8
   10d76:	ce 01       	movw	r24, r28
   10d78:	01 96       	adiw	r24, 0x01	; 1
   10d7a:	51 df       	rcall	.-350    	; 0x10c1e <dbf_lseek>
   10d7c:	89 2b       	or	r24, r25
   10d7e:	59 f0       	breq	.+22     	; 0x10d96 <dbf_open_write+0x56>
   10d80:	85 e0       	ldi	r24, 0x05	; 5
   10d82:	90 e0       	ldi	r25, 0x00	; 0
   10d84:	f7 01       	movw	r30, r14
   10d86:	91 83       	std	Z+1, r25	; 0x01
   10d88:	80 83       	st	Z, r24
   10d8a:	ce 01       	movw	r24, r28
   10d8c:	01 96       	adiw	r24, 0x01	; 1
   10d8e:	64 df       	rcall	.-312    	; 0x10c58 <dbf_close>
   10d90:	8f ef       	ldi	r24, 0xFF	; 255
   10d92:	9f ef       	ldi	r25, 0xFF	; 255
   10d94:	27 c0       	rjmp	.+78     	; 0x10de4 <dbf_open_write+0xa4>
   10d96:	9e 01       	movw	r18, r28
   10d98:	2b 5d       	subi	r18, 0xDB	; 219
   10d9a:	3d 4f       	sbci	r19, 0xFD	; 253
   10d9c:	a8 01       	movw	r20, r16
   10d9e:	b6 01       	movw	r22, r12
   10da0:	ce 01       	movw	r24, r28
   10da2:	01 96       	adiw	r24, 0x01	; 1
   10da4:	1f df       	rcall	.-450    	; 0x10be4 <dbf_write>
   10da6:	89 2b       	or	r24, r25
   10da8:	49 f4       	brne	.+18     	; 0x10dbc <dbf_open_write+0x7c>
   10daa:	cb 5d       	subi	r28, 0xDB	; 219
   10dac:	dd 4f       	sbci	r29, 0xFD	; 253
   10dae:	88 81       	ld	r24, Y
   10db0:	99 81       	ldd	r25, Y+1	; 0x01
   10db2:	c5 52       	subi	r28, 0x25	; 37
   10db4:	d2 40       	sbci	r29, 0x02	; 2
   10db6:	08 17       	cp	r16, r24
   10db8:	19 07       	cpc	r17, r25
   10dba:	19 f0       	breq	.+6      	; 0x10dc2 <dbf_open_write+0x82>
   10dbc:	81 e0       	ldi	r24, 0x01	; 1
   10dbe:	90 e0       	ldi	r25, 0x00	; 0
   10dc0:	e1 cf       	rjmp	.-62     	; 0x10d84 <dbf_open_write+0x44>
   10dc2:	ce 01       	movw	r24, r28
   10dc4:	01 96       	adiw	r24, 0x01	; 1
   10dc6:	48 df       	rcall	.-368    	; 0x10c58 <dbf_close>
   10dc8:	89 2b       	or	r24, r25
   10dca:	31 f0       	breq	.+12     	; 0x10dd8 <dbf_open_write+0x98>
   10dcc:	80 e1       	ldi	r24, 0x10	; 16
   10dce:	90 e0       	ldi	r25, 0x00	; 0
   10dd0:	f7 01       	movw	r30, r14
   10dd2:	91 83       	std	Z+1, r25	; 0x01
   10dd4:	80 83       	st	Z, r24
   10dd6:	dc cf       	rjmp	.-72     	; 0x10d90 <dbf_open_write+0x50>
   10dd8:	cb 5d       	subi	r28, 0xDB	; 219
   10dda:	dd 4f       	sbci	r29, 0xFD	; 253
   10ddc:	88 81       	ld	r24, Y
   10dde:	99 81       	ldd	r25, Y+1	; 0x01
   10de0:	c5 52       	subi	r28, 0x25	; 37
   10de2:	d2 40       	sbci	r29, 0x02	; 2
   10de4:	ca 5d       	subi	r28, 0xDA	; 218
   10de6:	dd 4f       	sbci	r29, 0xFD	; 253
   10de8:	ec e0       	ldi	r30, 0x0C	; 12
   10dea:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

00010dee <gpib_timer_elapsed_begin>:
   10dee:	0c 94 c4 36 	jmp	0x6d88	; 0x6d88 <clock_elapsed_begin>
   10df2:	08 95       	ret

00010df4 <gpib_timer_reset>:
   10df4:	f8 94       	cli
   10df6:	eb ee       	ldi	r30, 0xEB	; 235
   10df8:	fc e1       	ldi	r31, 0x1C	; 28
   10dfa:	10 82       	st	Z, r1
   10dfc:	11 82       	std	Z+1, r1	; 0x01
   10dfe:	12 82       	std	Z+2, r1	; 0x02
   10e00:	13 82       	std	Z+3, r1	; 0x03
   10e02:	14 82       	std	Z+4, r1	; 0x04
   10e04:	15 82       	std	Z+5, r1	; 0x05
   10e06:	16 82       	std	Z+6, r1	; 0x06
   10e08:	17 82       	std	Z+7, r1	; 0x07
   10e0a:	81 e0       	ldi	r24, 0x01	; 1
   10e0c:	80 87       	std	Z+8, r24	; 0x08
   10e0e:	78 94       	sei
   10e10:	08 95       	ret

00010e12 <gpib_timer_elapsed_end>:
   10e12:	0c 94 ca 36 	jmp	0x6d94	; 0x6d94 <clock_elapsed_end>
   10e16:	08 95       	ret

00010e18 <gpib_timer_task>:
   10e18:	f8 94       	cli
   10e1a:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x4>
   10e1e:	90 91 f0 1c 	lds	r25, 0x1CF0	; 0x801cf0 <gpib_timer+0x5>
   10e22:	a0 91 f1 1c 	lds	r26, 0x1CF1	; 0x801cf1 <gpib_timer+0x6>
   10e26:	b0 91 f2 1c 	lds	r27, 0x1CF2	; 0x801cf2 <gpib_timer+0x7>
   10e2a:	89 2b       	or	r24, r25
   10e2c:	8a 2b       	or	r24, r26
   10e2e:	8b 2b       	or	r24, r27
   10e30:	a1 f0       	breq	.+40     	; 0x10e5a <gpib_timer_task+0x42>
   10e32:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x4>
   10e36:	90 91 f0 1c 	lds	r25, 0x1CF0	; 0x801cf0 <gpib_timer+0x5>
   10e3a:	a0 91 f1 1c 	lds	r26, 0x1CF1	; 0x801cf1 <gpib_timer+0x6>
   10e3e:	b0 91 f2 1c 	lds	r27, 0x1CF2	; 0x801cf2 <gpib_timer+0x7>
   10e42:	01 97       	sbiw	r24, 0x01	; 1
   10e44:	a1 09       	sbc	r26, r1
   10e46:	b1 09       	sbc	r27, r1
   10e48:	80 93 ef 1c 	sts	0x1CEF, r24	; 0x801cef <gpib_timer+0x4>
   10e4c:	90 93 f0 1c 	sts	0x1CF0, r25	; 0x801cf0 <gpib_timer+0x5>
   10e50:	a0 93 f1 1c 	sts	0x1CF1, r26	; 0x801cf1 <gpib_timer+0x6>
   10e54:	b0 93 f2 1c 	sts	0x1CF2, r27	; 0x801cf2 <gpib_timer+0x7>
   10e58:	03 c0       	rjmp	.+6      	; 0x10e60 <gpib_timer_task+0x48>
   10e5a:	81 e0       	ldi	r24, 0x01	; 1
   10e5c:	80 93 f3 1c 	sts	0x1CF3, r24	; 0x801cf3 <gpib_timer+0x8>
   10e60:	78 94       	sei
   10e62:	08 95       	ret

00010e64 <gpib_timeout_set>:
   10e64:	f8 94       	cli
   10e66:	eb ee       	ldi	r30, 0xEB	; 235
   10e68:	fc e1       	ldi	r31, 0x1C	; 28
   10e6a:	64 83       	std	Z+4, r22	; 0x04
   10e6c:	75 83       	std	Z+5, r23	; 0x05
   10e6e:	86 83       	std	Z+6, r24	; 0x06
   10e70:	97 83       	std	Z+7, r25	; 0x07
   10e72:	10 86       	std	Z+8, r1	; 0x08
   10e74:	78 94       	sei
   10e76:	08 95       	ret

00010e78 <gpib_bus_read_init>:
   10e78:	54 98       	cbi	0x0a, 4	; 10
   10e7a:	57 98       	cbi	0x0a, 7	; 10
   10e7c:	45 98       	cbi	0x08, 5	; 8
   10e7e:	3d 9a       	sbi	0x07, 5	; 7
   10e80:	11 b8       	out	0x01, r1	; 1
   10e82:	2f ef       	ldi	r18, 0xFF	; 255
   10e84:	22 b9       	out	0x02, r18	; 2
   10e86:	43 98       	cbi	0x08, 3	; 8
   10e88:	3b 9a       	sbi	0x07, 3	; 7
   10e8a:	21 98       	cbi	0x04, 1	; 4
   10e8c:	56 98       	cbi	0x0a, 6	; 10
   10e8e:	20 98       	cbi	0x04, 0	; 4
   10e90:	55 98       	cbi	0x0a, 5	; 10
   10e92:	89 2b       	or	r24, r25
   10e94:	39 f4       	brne	.+14     	; 0x10ea4 <gpib_bus_read_init+0x2c>
   10e96:	52 98       	cbi	0x0a, 2	; 10
   10e98:	53 98       	cbi	0x0a, 3	; 10
   10e9a:	8d e0       	ldi	r24, 0x0D	; 13
   10e9c:	8a 95       	dec	r24
   10e9e:	f1 f7       	brne	.-4      	; 0x10e9c <gpib_bus_read_init+0x24>
   10ea0:	00 00       	nop
   10ea2:	04 c0       	rjmp	.+8      	; 0x10eac <gpib_bus_read_init+0x34>
   10ea4:	5b 98       	cbi	0x0b, 3	; 11
   10ea6:	53 9a       	sbi	0x0a, 3	; 10
   10ea8:	5a 98       	cbi	0x0b, 2	; 11
   10eaa:	52 9a       	sbi	0x0a, 2	; 10
   10eac:	42 98       	cbi	0x08, 2	; 8
   10eae:	3a 9a       	sbi	0x07, 2	; 7
   10eb0:	44 9a       	sbi	0x08, 4	; 8
   10eb2:	3c 9a       	sbi	0x07, 4	; 7
   10eb4:	8d e0       	ldi	r24, 0x0D	; 13
   10eb6:	8a 95       	dec	r24
   10eb8:	f1 f7       	brne	.-4      	; 0x10eb6 <gpib_bus_read_init+0x3e>
   10eba:	00 00       	nop
   10ebc:	08 95       	ret

00010ebe <gpib_bus_init>:
   10ebe:	00 d0       	rcall	.+0      	; 0x10ec0 <gpib_bus_init+0x2>
   10ec0:	1f 92       	push	r1
   10ec2:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <gpib_unread_f>
   10ec6:	11 b8       	out	0x01, r1	; 1
   10ec8:	8f ef       	ldi	r24, 0xFF	; 255
   10eca:	82 b9       	out	0x02, r24	; 2
   10ecc:	21 98       	cbi	0x04, 1	; 4
   10ece:	52 98       	cbi	0x0a, 2	; 10
   10ed0:	53 98       	cbi	0x0a, 3	; 10
   10ed2:	54 98       	cbi	0x0a, 4	; 10
   10ed4:	57 98       	cbi	0x0a, 7	; 10
   10ed6:	56 98       	cbi	0x0a, 6	; 10
   10ed8:	20 98       	cbi	0x04, 0	; 4
   10eda:	55 98       	cbi	0x0a, 5	; 10
   10edc:	45 98       	cbi	0x08, 5	; 8
   10ede:	3d 9a       	sbi	0x07, 5	; 7
   10ee0:	43 98       	cbi	0x08, 3	; 8
   10ee2:	3b 9a       	sbi	0x07, 3	; 7
   10ee4:	42 98       	cbi	0x08, 2	; 8
   10ee6:	3a 9a       	sbi	0x07, 2	; 7
   10ee8:	44 9a       	sbi	0x08, 4	; 8
   10eea:	3c 9a       	sbi	0x07, 4	; 7
   10eec:	8d e0       	ldi	r24, 0x0D	; 13
   10eee:	8a 95       	dec	r24
   10ef0:	f1 f7       	brne	.-4      	; 0x10eee <gpib_bus_init+0x30>
   10ef2:	00 00       	nop
   10ef4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ef8:	82 ff       	sbrs	r24, 2
   10efa:	0a c0       	rjmp	.+20     	; 0x10f10 <gpib_bus_init+0x52>
   10efc:	89 ea       	ldi	r24, 0xA9	; 169
   10efe:	92 e1       	ldi	r25, 0x12	; 18
   10f00:	a0 e0       	ldi	r26, 0x00	; 0
   10f02:	ed b7       	in	r30, 0x3d	; 61
   10f04:	fe b7       	in	r31, 0x3e	; 62
   10f06:	81 83       	std	Z+1, r24	; 0x01
   10f08:	92 83       	std	Z+2, r25	; 0x02
   10f0a:	a3 83       	std	Z+3, r26	; 0x03
   10f0c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10f10:	0f 90       	pop	r0
   10f12:	0f 90       	pop	r0
   10f14:	0f 90       	pop	r0
   10f16:	08 95       	ret

00010f18 <gpib_state_init>:
   10f18:	00 d0       	rcall	.+0      	; 0x10f1a <gpib_state_init+0x2>
   10f1a:	1f 92       	push	r1
   10f1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f20:	82 ff       	sbrs	r24, 2
   10f22:	0a c0       	rjmp	.+20     	; 0x10f38 <gpib_state_init+0x20>
   10f24:	86 e9       	ldi	r24, 0x96	; 150
   10f26:	92 e1       	ldi	r25, 0x12	; 18
   10f28:	a0 e0       	ldi	r26, 0x00	; 0
   10f2a:	ed b7       	in	r30, 0x3d	; 61
   10f2c:	fe b7       	in	r31, 0x3e	; 62
   10f2e:	81 83       	std	Z+1, r24	; 0x01
   10f30:	92 83       	std	Z+2, r25	; 0x02
   10f32:	a3 83       	std	Z+3, r26	; 0x03
   10f34:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10f38:	e4 dd       	rcall	.-1080   	; 0x10b02 <ppr_init>
   10f3a:	0e 94 47 92 	call	0x1248e	; 0x1248e <listen_cleanup>
   10f3e:	0e 94 5d 93 	call	0x126ba	; 0x126ba <talk_cleanup>
   10f42:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <spoll>
   10f46:	10 92 fa 1e 	sts	0x1EFA, r1	; 0x801efa <talking>
   10f4a:	10 92 fd 1e 	sts	0x1EFD, r1	; 0x801efd <talking_last>
   10f4e:	10 92 fc 1e 	sts	0x1EFC, r1	; 0x801efc <listening>
   10f52:	10 92 f6 1e 	sts	0x1EF6, r1	; 0x801ef6 <listening_last>
   10f56:	10 92 f5 1c 	sts	0x1CF5, r1	; 0x801cf5 <lastcmd+0x1>
   10f5a:	10 92 f4 1c 	sts	0x1CF4, r1	; 0x801cf4 <lastcmd>
   10f5e:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <current+0x1>
   10f62:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <current>
   10f66:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <secondary>
   10f6a:	0f 90       	pop	r0
   10f6c:	0f 90       	pop	r0
   10f6e:	0f 90       	pop	r0
   10f70:	08 95       	ret

00010f72 <gpib_enable_PPR>:
   10f72:	cf 93       	push	r28
   10f74:	df 93       	push	r29
   10f76:	ad b7       	in	r26, 0x3d	; 61
   10f78:	be b7       	in	r27, 0x3e	; 62
   10f7a:	17 97       	sbiw	r26, 0x07	; 7
   10f7c:	0f b6       	in	r0, 0x3f	; 63
   10f7e:	f8 94       	cli
   10f80:	be bf       	out	0x3e, r27	; 62
   10f82:	0f be       	out	0x3f, r0	; 63
   10f84:	ad bf       	out	0x3d, r26	; 61
   10f86:	ec 01       	movw	r28, r24
   10f88:	88 30       	cpi	r24, 0x08	; 8
   10f8a:	91 05       	cpc	r25, r1
   10f8c:	68 f0       	brcs	.+26     	; 0x10fa8 <gpib_enable_PPR+0x36>
   10f8e:	ed b7       	in	r30, 0x3d	; 61
   10f90:	fe b7       	in	r31, 0x3e	; 62
   10f92:	95 83       	std	Z+5, r25	; 0x05
   10f94:	84 83       	std	Z+4, r24	; 0x04
   10f96:	80 e7       	ldi	r24, 0x70	; 112
   10f98:	92 e1       	ldi	r25, 0x12	; 18
   10f9a:	a0 e0       	ldi	r26, 0x00	; 0
   10f9c:	81 83       	std	Z+1, r24	; 0x01
   10f9e:	92 83       	std	Z+2, r25	; 0x02
   10fa0:	a3 83       	std	Z+3, r26	; 0x03
   10fa2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10fa6:	15 c0       	rjmp	.+42     	; 0x10fd2 <gpib_enable_PPR+0x60>
   10fa8:	c2 dd       	rcall	.-1148   	; 0x10b2e <ppr_bit_set>
   10faa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10fae:	81 ff       	sbrs	r24, 1
   10fb0:	10 c0       	rjmp	.+32     	; 0x10fd2 <gpib_enable_PPR+0x60>
   10fb2:	a3 dd       	rcall	.-1210   	; 0x10afa <ppr_reg>
   10fb4:	90 e0       	ldi	r25, 0x00	; 0
   10fb6:	ed b7       	in	r30, 0x3d	; 61
   10fb8:	fe b7       	in	r31, 0x3e	; 62
   10fba:	97 83       	std	Z+7, r25	; 0x07
   10fbc:	86 83       	std	Z+6, r24	; 0x06
   10fbe:	d5 83       	std	Z+5, r29	; 0x05
   10fc0:	c4 83       	std	Z+4, r28	; 0x04
   10fc2:	85 e5       	ldi	r24, 0x55	; 85
   10fc4:	92 e1       	ldi	r25, 0x12	; 18
   10fc6:	a0 e0       	ldi	r26, 0x00	; 0
   10fc8:	81 83       	std	Z+1, r24	; 0x01
   10fca:	92 83       	std	Z+2, r25	; 0x02
   10fcc:	a3 83       	std	Z+3, r26	; 0x03
   10fce:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   10fd2:	cd b7       	in	r28, 0x3d	; 61
   10fd4:	de b7       	in	r29, 0x3e	; 62
   10fd6:	27 96       	adiw	r28, 0x07	; 7
   10fd8:	e2 e0       	ldi	r30, 0x02	; 2
   10fda:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00010fde <gpib_disable_PPR>:
   10fde:	cf 93       	push	r28
   10fe0:	df 93       	push	r29
   10fe2:	ad b7       	in	r26, 0x3d	; 61
   10fe4:	be b7       	in	r27, 0x3e	; 62
   10fe6:	17 97       	sbiw	r26, 0x07	; 7
   10fe8:	0f b6       	in	r0, 0x3f	; 63
   10fea:	f8 94       	cli
   10fec:	be bf       	out	0x3e, r27	; 62
   10fee:	0f be       	out	0x3f, r0	; 63
   10ff0:	ad bf       	out	0x3d, r26	; 61
   10ff2:	ec 01       	movw	r28, r24
   10ff4:	88 30       	cpi	r24, 0x08	; 8
   10ff6:	91 05       	cpc	r25, r1
   10ff8:	68 f0       	brcs	.+26     	; 0x11014 <gpib_disable_PPR+0x36>
   10ffa:	ed b7       	in	r30, 0x3d	; 61
   10ffc:	fe b7       	in	r31, 0x3e	; 62
   10ffe:	95 83       	std	Z+5, r25	; 0x05
   11000:	84 83       	std	Z+4, r24	; 0x04
   11002:	8e e2       	ldi	r24, 0x2E	; 46
   11004:	92 e1       	ldi	r25, 0x12	; 18
   11006:	a0 e0       	ldi	r26, 0x00	; 0
   11008:	81 83       	std	Z+1, r24	; 0x01
   1100a:	92 83       	std	Z+2, r25	; 0x02
   1100c:	a3 83       	std	Z+3, r26	; 0x03
   1100e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   11012:	15 c0       	rjmp	.+42     	; 0x1103e <gpib_disable_PPR+0x60>
   11014:	99 dd       	rcall	.-1230   	; 0x10b48 <ppr_bit_clr>
   11016:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1101a:	81 ff       	sbrs	r24, 1
   1101c:	10 c0       	rjmp	.+32     	; 0x1103e <gpib_disable_PPR+0x60>
   1101e:	6d dd       	rcall	.-1318   	; 0x10afa <ppr_reg>
   11020:	90 e0       	ldi	r25, 0x00	; 0
   11022:	ed b7       	in	r30, 0x3d	; 61
   11024:	fe b7       	in	r31, 0x3e	; 62
   11026:	97 83       	std	Z+7, r25	; 0x07
   11028:	86 83       	std	Z+6, r24	; 0x06
   1102a:	d5 83       	std	Z+5, r29	; 0x05
   1102c:	c4 83       	std	Z+4, r28	; 0x04
   1102e:	83 e1       	ldi	r24, 0x13	; 19
   11030:	92 e1       	ldi	r25, 0x12	; 18
   11032:	a0 e0       	ldi	r26, 0x00	; 0
   11034:	81 83       	std	Z+1, r24	; 0x01
   11036:	92 83       	std	Z+2, r25	; 0x02
   11038:	a3 83       	std	Z+3, r26	; 0x03
   1103a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1103e:	cd b7       	in	r28, 0x3d	; 61
   11040:	de b7       	in	r29, 0x3e	; 62
   11042:	27 96       	adiw	r28, 0x07	; 7
   11044:	e2 e0       	ldi	r30, 0x02	; 2
   11046:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0001104a <gpib_assert_ifc>:
   1104a:	00 d0       	rcall	.+0      	; 0x1104c <gpib_assert_ifc+0x2>
   1104c:	1f 92       	push	r1
   1104e:	5c 98       	cbi	0x0b, 4	; 11
   11050:	54 9a       	sbi	0x0a, 4	; 10
   11052:	6a ef       	ldi	r22, 0xFA	; 250
   11054:	70 e0       	ldi	r23, 0x00	; 0
   11056:	80 e0       	ldi	r24, 0x00	; 0
   11058:	90 e0       	ldi	r25, 0x00	; 0
   1105a:	0e 94 84 29 	call	0x5308	; 0x5308 <delayus>
   1105e:	54 98       	cbi	0x0a, 4	; 10
   11060:	6a ef       	ldi	r22, 0xFA	; 250
   11062:	70 e0       	ldi	r23, 0x00	; 0
   11064:	80 e0       	ldi	r24, 0x00	; 0
   11066:	90 e0       	ldi	r25, 0x00	; 0
   11068:	0e 94 84 29 	call	0x5308	; 0x5308 <delayus>
   1106c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11070:	82 ff       	sbrs	r24, 2
   11072:	0a c0       	rjmp	.+20     	; 0x11088 <gpib_assert_ifc+0x3e>
   11074:	87 e0       	ldi	r24, 0x07	; 7
   11076:	92 e1       	ldi	r25, 0x12	; 18
   11078:	a0 e0       	ldi	r26, 0x00	; 0
   1107a:	ed b7       	in	r30, 0x3d	; 61
   1107c:	fe b7       	in	r31, 0x3e	; 62
   1107e:	81 83       	std	Z+1, r24	; 0x01
   11080:	92 83       	std	Z+2, r25	; 0x02
   11082:	a3 83       	std	Z+3, r26	; 0x03
   11084:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   11088:	0f 90       	pop	r0
   1108a:	0f 90       	pop	r0
   1108c:	0f 90       	pop	r0
   1108e:	08 95       	ret

00011090 <gpib_unread>:
   11090:	cf 93       	push	r28
   11092:	df 93       	push	r29
   11094:	00 d0       	rcall	.+0      	; 0x11096 <gpib_unread+0x6>
   11096:	1f 92       	push	r1
   11098:	ec 01       	movw	r28, r24
   1109a:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <gpib_unread_f>
   1109e:	81 11       	cpse	r24, r1
   110a0:	08 c0       	rjmp	.+16     	; 0x110b2 <gpib_unread+0x22>
   110a2:	d0 93 ff 1e 	sts	0x1EFF, r29	; 0x801eff <gpib_unread_data+0x1>
   110a6:	c0 93 fe 1e 	sts	0x1EFE, r28	; 0x801efe <gpib_unread_data>
   110aa:	81 e0       	ldi	r24, 0x01	; 1
   110ac:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <gpib_unread_f>
   110b0:	12 c0       	rjmp	.+36     	; 0x110d6 <gpib_unread+0x46>
   110b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   110b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   110ba:	85 70       	andi	r24, 0x05	; 5
   110bc:	99 27       	eor	r25, r25
   110be:	89 2b       	or	r24, r25
   110c0:	51 f0       	breq	.+20     	; 0x110d6 <gpib_unread+0x46>
   110c2:	89 ed       	ldi	r24, 0xD9	; 217
   110c4:	91 e1       	ldi	r25, 0x11	; 17
   110c6:	a0 e0       	ldi	r26, 0x00	; 0
   110c8:	ed b7       	in	r30, 0x3d	; 61
   110ca:	fe b7       	in	r31, 0x3e	; 62
   110cc:	81 83       	std	Z+1, r24	; 0x01
   110ce:	92 83       	std	Z+2, r25	; 0x02
   110d0:	a3 83       	std	Z+3, r26	; 0x03
   110d2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   110d6:	ce 01       	movw	r24, r28
   110d8:	cd b7       	in	r28, 0x3d	; 61
   110da:	de b7       	in	r29, 0x3e	; 62
   110dc:	23 96       	adiw	r28, 0x03	; 3
   110de:	e2 e0       	ldi	r30, 0x02	; 2
   110e0:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000110e4 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   110e4:	11 b8       	out	0x01, r1	; 1
   110e6:	80 b1       	in	r24, 0x00	; 0
   110e8:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   110ea:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   110ec:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   110ee:	08 95       	ret

000110f0 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   110f0:	4e 99       	sbic	0x09, 6	; 9
   110f2:	03 c0       	rjmp	.+6      	; 0x110fa <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   110f4:	80 e0       	ldi	r24, 0x00	; 0
   110f6:	94 e0       	ldi	r25, 0x04	; 4
   110f8:	02 c0       	rjmp	.+4      	; 0x110fe <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   110fa:	80 e0       	ldi	r24, 0x00	; 0
   110fc:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   110fe:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   11100:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   11102:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   11104:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   11106:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   11108:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   1110a:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   1110c:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   1110e:	08 95       	ret

00011110 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   11110:	19 99       	sbic	0x03, 1	; 3
   11112:	03 c0       	rjmp	.+6      	; 0x1111a <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   11114:	80 e0       	ldi	r24, 0x00	; 0
   11116:	90 e2       	ldi	r25, 0x20	; 32
   11118:	02 c0       	rjmp	.+4      	; 0x1111e <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   1111a:	80 e0       	ldi	r24, 0x00	; 0
   1111c:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   1111e:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   11120:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   11122:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   11124:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   11126:	08 95       	ret

00011128 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   11128:	2f 92       	push	r2
   1112a:	3f 92       	push	r3
   1112c:	4f 92       	push	r4
   1112e:	6f 92       	push	r6
   11130:	7f 92       	push	r7
   11132:	8f 92       	push	r8
   11134:	cf 92       	push	r12
   11136:	df 92       	push	r13
   11138:	ef 92       	push	r14
   1113a:	1f 93       	push	r17
   1113c:	cf 93       	push	r28
   1113e:	df 93       	push	r29
   11140:	cd b7       	in	r28, 0x3d	; 61
   11142:	de b7       	in	r29, 0x3e	; 62
   11144:	2f 97       	sbiw	r28, 0x0f	; 15
   11146:	0f b6       	in	r0, 0x3f	; 63
   11148:	f8 94       	cli
   1114a:	de bf       	out	0x3e, r29	; 62
   1114c:	0f be       	out	0x3f, r0	; 63
   1114e:	cd bf       	out	0x3d, r28	; 61
   11150:	9f 87       	std	Y+15, r25	; 0x0f
   11152:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t tx_state;

// Wait for DAV to be released before starting
// Read state for DAV
///@brief NRFD,NDAC SRQ are outputs
    gpib_bus_read_init(0);
   11154:	80 e0       	ldi	r24, 0x00	; 0
   11156:	90 e0       	ldi	r25, 0x00	; 0
   11158:	8f de       	rcall	.-738    	; 0x10e78 <gpib_bus_read_init>
// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   1115a:	64 ef       	ldi	r22, 0xF4	; 244
   1115c:	71 e0       	ldi	r23, 0x01	; 1
   1115e:	80 e0       	ldi	r24, 0x00	; 0
   11160:	90 e0       	ldi	r25, 0x00	; 0
   11162:	80 de       	rcall	.-768    	; 0x10e64 <gpib_timeout_set>

// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   11164:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   11166:	89 e0       	ldi	r24, 0x09	; 9
   11168:	91 e1       	ldi	r25, 0x11	; 17
   1116a:	6c 01       	movw	r12, r24
   1116c:	e1 2c       	mov	r14, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NDAC==1>\n");
   1116e:	83 e2       	ldi	r24, 0x23	; 35
   11170:	91 e1       	ldi	r25, 0x11	; 17
   11172:	3c 01       	movw	r6, r24
   11174:	81 2c       	mov	r8, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==0>\n");
   11176:	8e e3       	ldi	r24, 0x3E	; 62
   11178:	91 e1       	ldi	r25, 0x11	; 17
   1117a:	1c 01       	movw	r2, r24
   1117c:	41 2c       	mov	r4, r1
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   1117e:	89 e5       	ldi	r24, 0x59	; 89
   11180:	91 e1       	ldi	r25, 0x11	; 17
   11182:	9c 01       	movw	r18, r24
   11184:	40 e0       	ldi	r20, 0x00	; 0
   11186:	28 87       	std	Y+8, r18	; 0x08
   11188:	39 87       	std	Y+9, r19	; 0x09
   1118a:	4a 87       	std	Y+10, r20	; 0x0a
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   1118c:	81 e8       	ldi	r24, 0x81	; 129
   1118e:	91 e1       	ldi	r25, 0x11	; 17
   11190:	9c 01       	movw	r18, r24
   11192:	40 e0       	ldi	r20, 0x00	; 0
   11194:	2b 87       	std	Y+11, r18	; 0x0b
   11196:	3c 87       	std	Y+12, r19	; 0x0c
   11198:	4d 87       	std	Y+13, r20	; 0x0d
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
		if(uart_keyhit(0))
   1119a:	80 e0       	ldi	r24, 0x00	; 0
   1119c:	0e 94 bb 2b 	call	0x5776	; 0x5776 <uart_keyhit>
   111a0:	89 2b       	or	r24, r25
   111a2:	99 f0       	breq	.+38     	; 0x111ca <gpib_write_byte+0xa2>
		{
			if(debuglevel & GPIB_ERR)
   111a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   111a8:	80 ff       	sbrs	r24, 0
   111aa:	39 c1       	rjmp	.+626    	; 0x1141e <gpib_write_byte+0x2f6>
				printf("gpib_write_byte: KEY state=%d\n", tx_state);
   111ac:	81 2f       	mov	r24, r17
   111ae:	90 e0       	ldi	r25, 0x00	; 0
   111b0:	ed b7       	in	r30, 0x3d	; 61
   111b2:	fe b7       	in	r31, 0x3e	; 62
   111b4:	95 83       	std	Z+5, r25	; 0x05
   111b6:	84 83       	std	Z+4, r24	; 0x04
   111b8:	8a eb       	ldi	r24, 0xBA	; 186
   111ba:	91 e1       	ldi	r25, 0x11	; 17
   111bc:	a0 e0       	ldi	r26, 0x00	; 0
   111be:	81 83       	std	Z+1, r24	; 0x01
   111c0:	92 83       	std	Z+2, r25	; 0x02
   111c2:	a3 83       	std	Z+3, r26	; 0x03
   111c4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   111c8:	2a c1       	rjmp	.+596    	; 0x1141e <gpib_write_byte+0x2f6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   111ca:	4c 99       	sbic	0x09, 4	; 9
   111cc:	19 c0       	rjmp	.+50     	; 0x11200 <gpib_write_byte+0xd8>
        {
            ch |= IFC_FLAG;
   111ce:	2e 85       	ldd	r18, Y+14	; 0x0e
   111d0:	3f 85       	ldd	r19, Y+15	; 0x0f
   111d2:	30 61       	ori	r19, 0x10	; 16
   111d4:	3f 87       	std	Y+15, r19	; 0x0f
   111d6:	2e 87       	std	Y+14, r18	; 0x0e
			if(debuglevel & GPIB_ERR)
   111d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   111dc:	80 ff       	sbrs	r24, 0
   111de:	0e c0       	rjmp	.+28     	; 0x111fc <gpib_write_byte+0xd4>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   111e0:	81 2f       	mov	r24, r17
   111e2:	90 e0       	ldi	r25, 0x00	; 0
   111e4:	ed b7       	in	r30, 0x3d	; 61
   111e6:	fe b7       	in	r31, 0x3e	; 62
   111e8:	95 83       	std	Z+5, r25	; 0x05
   111ea:	84 83       	std	Z+4, r24	; 0x04
   111ec:	8b e9       	ldi	r24, 0x9B	; 155
   111ee:	91 e1       	ldi	r25, 0x11	; 17
   111f0:	a0 e0       	ldi	r26, 0x00	; 0
   111f2:	81 83       	std	Z+1, r24	; 0x01
   111f4:	92 83       	std	Z+2, r25	; 0x02
   111f6:	a3 83       	std	Z+3, r26	; 0x03
   111f8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            gpib_bus_init();
   111fc:	60 de       	rcall	.-832    	; 0x10ebe <gpib_bus_init>
            break;
   111fe:	0f c1       	rjmp	.+542    	; 0x1141e <gpib_write_byte+0x2f6>
        }

        switch(tx_state)
   11200:	81 2f       	mov	r24, r17
   11202:	90 e0       	ldi	r25, 0x00	; 0
   11204:	8a 30       	cpi	r24, 0x0A	; 10
   11206:	91 05       	cpc	r25, r1
   11208:	08 f0       	brcs	.+2      	; 0x1120c <gpib_write_byte+0xe4>
   1120a:	ff c0       	rjmp	.+510    	; 0x1140a <gpib_write_byte+0x2e2>
   1120c:	fc 01       	movw	r30, r24
   1120e:	e3 54       	subi	r30, 0x43	; 67
   11210:	ff 4f       	sbci	r31, 0xFF	; 255
   11212:	0c 94 ba e3 	jmp	0x1c774	; 0x1c774 <__tablejump2__>
        {
            case GPIB_TX_START:
// Wait for release of DAV and EOI before starting
// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   11216:	19 9b       	sbis	0x03, 1	; 3
   11218:	12 c0       	rjmp	.+36     	; 0x1123e <gpib_write_byte+0x116>
// We arrive here in Read Mode - see gpib_bus_read_init(0);

// Switch GBIB driver direction to Write
// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
                    GPIB_IO_HI(TE);               // BUS OUT, DAV OUT, NRFD and NDAC IN
   1121a:	42 9a       	sbi	0x08, 2	; 8
   1121c:	3a 9a       	sbi	0x07, 2	; 7
                    GPIB_IO_LOW(DC);              // ATN OUT, EOI OUT, SRQ IN
   1121e:	44 98       	cbi	0x08, 4	; 8
   11220:	3c 9a       	sbi	0x07, 4	; 7
#endif
// My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   11222:	2e 85       	ldd	r18, Y+14	; 0x0e
   11224:	3f 85       	ldd	r19, Y+15	; 0x0f
   11226:	32 ff       	sbrs	r19, 2
   11228:	02 c0       	rjmp	.+4      	; 0x1122e <gpib_write_byte+0x106>
                        GPIB_IO_LOW(ATN);         // FYI: SS80 never sends ATN from a device
   1122a:	5e 98       	cbi	0x0b, 6	; 11
   1122c:	01 c0       	rjmp	.+2      	; 0x11230 <gpib_write_byte+0x108>
                    else
#if BOARD == 2
                        GPIB_IO_HI(ATN); 
   1122e:	5e 9a       	sbi	0x0b, 6	; 11
   11230:	56 9a       	sbi	0x0a, 6	; 10
#else
                        GPIB_PIN_FLOAT_UP(ATN);
#endif

                    gpib_timeout_set(HTIMEOUT);
   11232:	64 ef       	ldi	r22, 0xF4	; 244
   11234:	71 e0       	ldi	r23, 0x01	; 1
   11236:	80 e0       	ldi	r24, 0x00	; 0
   11238:	90 e0       	ldi	r25, 0x00	; 0
   1123a:	14 de       	rcall	.-984    	; 0x10e64 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   1123c:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1123e:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
#endif

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   11242:	88 23       	and	r24, r24
   11244:	09 f4       	brne	.+2      	; 0x11248 <gpib_write_byte+0x120>
   11246:	a9 cf       	rjmp	.-174    	; 0x1119a <gpib_write_byte+0x72>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11248:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1124c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11250:	85 70       	andi	r24, 0x05	; 5
   11252:	99 27       	eor	r25, r25
   11254:	89 2b       	or	r24, r25
   11256:	29 f1       	breq	.+74     	; 0x112a2 <gpib_write_byte+0x17a>
                        printf("<BUS waiting for DAV==1>\n");
   11258:	8b 85       	ldd	r24, Y+11	; 0x0b
   1125a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1125c:	ad 85       	ldd	r26, Y+13	; 0x0d
   1125e:	1a c0       	rjmp	.+52     	; 0x11294 <gpib_write_byte+0x16c>
                }
                break;

            case GPIB_TX_WAIT_READY:
// Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   11260:	4a 9b       	sbis	0x09, 2	; 9
   11262:	08 c0       	rjmp	.+16     	; 0x11274 <gpib_write_byte+0x14c>
   11264:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   11266:	06 c0       	rjmp	.+12     	; 0x11274 <gpib_write_byte+0x14c>
   11268:	64 ef       	ldi	r22, 0xF4	; 244
   1126a:	71 e0       	ldi	r23, 0x01	; 1
   1126c:	80 e0       	ldi	r24, 0x00	; 0
   1126e:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   11270:	f9 dd       	rcall	.-1038   	; 0x10e64 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11272:	12 e0       	ldi	r17, 0x02	; 2
   11274:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   11278:	88 23       	and	r24, r24
   1127a:	09 f4       	brne	.+2      	; 0x1127e <gpib_write_byte+0x156>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1127c:	8e cf       	rjmp	.-228    	; 0x1119a <gpib_write_byte+0x72>
   1127e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11282:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11286:	85 70       	andi	r24, 0x05	; 5
   11288:	99 27       	eor	r25, r25
   1128a:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   1128c:	51 f0       	breq	.+20     	; 0x112a2 <gpib_write_byte+0x17a>
   1128e:	88 85       	ldd	r24, Y+8	; 0x08
   11290:	99 85       	ldd	r25, Y+9	; 0x09
   11292:	aa 85       	ldd	r26, Y+10	; 0x0a
   11294:	ed b7       	in	r30, 0x3d	; 61
   11296:	fe b7       	in	r31, 0x3e	; 62
   11298:	81 83       	std	Z+1, r24	; 0x01
   1129a:	92 83       	std	Z+2, r25	; 0x02
   1129c:	a3 83       	std	Z+3, r26	; 0x03
   1129e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
                    ch |= TIMEOUT_FLAG;
   112a2:	2e 85       	ldd	r18, Y+14	; 0x0e
   112a4:	3f 85       	ldd	r19, Y+15	; 0x0f
   112a6:	30 64       	ori	r19, 0x40	; 64
   112a8:	3f 87       	std	Y+15, r19	; 0x0f
   112aa:	2e 87       	std	Y+14, r18	; 0x0e
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   112ac:	b6 c0       	rjmp	.+364    	; 0x1141a <gpib_write_byte+0x2f2>
   112ae:	8e 85       	ldd	r24, Y+14	; 0x0e
   112b0:	9f 85       	ldd	r25, Y+15	; 0x0f
   112b2:	90 ff       	sbrs	r25, 0
                    GPIB_IO_LOW(EOI);
   112b4:	02 c0       	rjmp	.+4      	; 0x112ba <gpib_write_byte+0x192>
   112b6:	28 98       	cbi	0x05, 0	; 5
                else
#if BOARD == 2
                    GPIB_IO_HI(EOI);
   112b8:	01 c0       	rjmp	.+2      	; 0x112bc <gpib_write_byte+0x194>
   112ba:	28 9a       	sbi	0x05, 0	; 5
#else
                    GPIB_PIN_FLOAT_UP(EOI);
#endif

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   112bc:	20 9a       	sbi	0x04, 0	; 4
   112be:	8f ef       	ldi	r24, 0xFF	; 255
   112c0:	81 b9       	out	0x01, r24	; 1
   112c2:	8e 85       	ldd	r24, Y+14	; 0x0e
   112c4:	80 95       	com	r24
#if BOARD == 2
// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE);
   112c6:	82 b9       	out	0x02, r24	; 2
   112c8:	43 9a       	sbi	0x08, 3	; 8
   112ca:	3b 9a       	sbi	0x07, 3	; 7
   112cc:	9d e0       	ldi	r25, 0x0D	; 13
   112ce:	9a 95       	dec	r25
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   112d0:	f1 f7       	brne	.-4      	; 0x112ce <gpib_write_byte+0x1a6>
   112d2:	00 00       	nop
   112d4:	64 ef       	ldi	r22, 0xF4	; 244
   112d6:	71 e0       	ldi	r23, 0x01	; 1
   112d8:	80 e0       	ldi	r24, 0x00	; 0
   112da:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   112dc:	c3 dd       	rcall	.-1146   	; 0x10e64 <gpib_timeout_set>
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   112de:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   112e0:	5c cf       	rjmp	.-328    	; 0x1119a <gpib_write_byte+0x72>
   112e2:	29 98       	cbi	0x05, 1	; 5
   112e4:	21 9a       	sbi	0x04, 1	; 4
   112e6:	64 ef       	ldi	r22, 0xF4	; 244
   112e8:	71 e0       	ldi	r23, 0x01	; 1
   112ea:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   112ec:	90 e0       	ldi	r25, 0x00	; 0
   112ee:	ba dd       	rcall	.-1164   	; 0x10e64 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   112f0:	14 e0       	ldi	r17, 0x04	; 4
   112f2:	53 cf       	rjmp	.-346    	; 0x1119a <gpib_write_byte+0x72>
   112f4:	4a 99       	sbic	0x09, 2	; 9
   112f6:	07 c0       	rjmp	.+14     	; 0x11306 <gpib_write_byte+0x1de>
   112f8:	64 ef       	ldi	r22, 0xF4	; 244
   112fa:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   112fc:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   112fe:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11300:	b1 dd       	rcall	.-1182   	; 0x10e64 <gpib_timeout_set>
   11302:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11304:	4a cf       	rjmp	.-364    	; 0x1119a <gpib_write_byte+0x72>
   11306:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   1130a:	88 23       	and	r24, r24
   1130c:	09 f4       	brne	.+2      	; 0x11310 <gpib_write_byte+0x1e8>
   1130e:	45 cf       	rjmp	.-374    	; 0x1119a <gpib_write_byte+0x72>
   11310:	ee 85       	ldd	r30, Y+14	; 0x0e
   11312:	ff 85       	ldd	r31, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11314:	f0 64       	ori	r31, 0x40	; 64
   11316:	ff 87       	std	Y+15, r31	; 0x0f
   11318:	ee 87       	std	Y+14, r30	; 0x0e
   1131a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1131e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11322:	85 70       	andi	r24, 0x05	; 5
   11324:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11326:	89 2b       	or	r24, r25
   11328:	09 f4       	brne	.+2      	; 0x1132c <gpib_write_byte+0x204>
   1132a:	77 c0       	rjmp	.+238    	; 0x1141a <gpib_write_byte+0x2f2>
   1132c:	ed b7       	in	r30, 0x3d	; 61
   1132e:	fe b7       	in	r31, 0x3e	; 62
   11330:	21 82       	std	Z+1, r2	; 0x01
                }
                break;

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   11332:	32 82       	std	Z+2, r3	; 0x02
   11334:	43 82       	std	Z+3, r4	; 0x03
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11336:	44 c0       	rjmp	.+136    	; 0x113c0 <gpib_write_byte+0x298>
   11338:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   1133a:	6b c0       	rjmp	.+214    	; 0x11412 <gpib_write_byte+0x2ea>
   1133c:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11340:	88 23       	and	r24, r24
   11342:	09 f4       	brne	.+2      	; 0x11346 <gpib_write_byte+0x21e>
   11344:	2a cf       	rjmp	.-428    	; 0x1119a <gpib_write_byte+0x72>
   11346:	2e 85       	ldd	r18, Y+14	; 0x0e
   11348:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1134a:	30 64       	ori	r19, 0x40	; 64
   1134c:	3f 87       	std	Y+15, r19	; 0x0f
   1134e:	2e 87       	std	Y+14, r18	; 0x0e
   11350:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11354:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11358:	85 70       	andi	r24, 0x05	; 5
   1135a:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   1135c:	89 2b       	or	r24, r25
   1135e:	09 f4       	brne	.+2      	; 0x11362 <gpib_write_byte+0x23a>
   11360:	5c c0       	rjmp	.+184    	; 0x1141a <gpib_write_byte+0x2f2>
   11362:	ed b7       	in	r30, 0x3d	; 61
   11364:	fe b7       	in	r31, 0x3e	; 62
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
#if BOARD == 2
                GPIB_IO_HI(DAV);
   11366:	61 82       	std	Z+1, r6	; 0x01
   11368:	72 82       	std	Z+2, r7	; 0x02
   1136a:	83 82       	std	Z+3, r8	; 0x03
   1136c:	29 c0       	rjmp	.+82     	; 0x113c0 <gpib_write_byte+0x298>
#else
                GPIB_PIN_FLOAT_UP(DAV);
#endif
                GPIB_BUS_SETTLE();                // give some time

                gpib_bus_read_init(0);            // Free BUS, NOT busy
   1136e:	29 9a       	sbi	0x05, 1	; 5
   11370:	21 9a       	sbi	0x04, 1	; 4
   11372:	fd e0       	ldi	r31, 0x0D	; 13
   11374:	fa 95       	dec	r31

                gpib_timeout_set(HTIMEOUT);
   11376:	f1 f7       	brne	.-4      	; 0x11374 <gpib_write_byte+0x24c>
   11378:	00 00       	nop
   1137a:	80 e0       	ldi	r24, 0x00	; 0
   1137c:	90 e0       	ldi	r25, 0x00	; 0
   1137e:	7c dd       	rcall	.-1288   	; 0x10e78 <gpib_bus_read_init>
   11380:	64 ef       	ldi	r22, 0xF4	; 244
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   11382:	71 e0       	ldi	r23, 0x01	; 1
                break;
   11384:	80 e0       	ldi	r24, 0x00	; 0

/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   11386:	90 e0       	ldi	r25, 0x00	; 0
   11388:	6d dd       	rcall	.-1318   	; 0x10e64 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1138a:	17 e0       	ldi	r17, 0x07	; 7
   1138c:	06 cf       	rjmp	.-500    	; 0x1119a <gpib_write_byte+0x72>
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   1138e:	19 99       	sbic	0x03, 1	; 3
   11390:	42 c0       	rjmp	.+132    	; 0x11416 <gpib_write_byte+0x2ee>
   11392:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11396:	88 23       	and	r24, r24
   11398:	09 f4       	brne	.+2      	; 0x1139c <gpib_write_byte+0x274>
   1139a:	ff ce       	rjmp	.-514    	; 0x1119a <gpib_write_byte+0x72>
   1139c:	2e 85       	ldd	r18, Y+14	; 0x0e
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1139e:	3f 85       	ldd	r19, Y+15	; 0x0f
   113a0:	30 64       	ori	r19, 0x40	; 64
   113a2:	3f 87       	std	Y+15, r19	; 0x0f
   113a4:	2e 87       	std	Y+14, r18	; 0x0e
   113a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113aa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
                        printf("<BUS waiting for DAV==1>\n");
   113ae:	85 70       	andi	r24, 0x05	; 5
   113b0:	99 27       	eor	r25, r25
   113b2:	89 2b       	or	r24, r25
   113b4:	91 f1       	breq	.+100    	; 0x1141a <gpib_write_byte+0x2f2>
   113b6:	ed b7       	in	r30, 0x3d	; 61
   113b8:	fe b7       	in	r31, 0x3e	; 62
   113ba:	c1 82       	std	Z+1, r12	; 0x01
   113bc:	d2 82       	std	Z+2, r13	; 0x02
            case GPIB_TX_FINISH:
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   113be:	e3 82       	std	Z+3, r14	; 0x03
   113c0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   113c4:	2a c0       	rjmp	.+84     	; 0x1141a <gpib_write_byte+0x2f2>
   113c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113ca:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   113ce:	85 70       	andi	r24, 0x05	; 5
   113d0:	99 27       	eor	r25, r25
   113d2:	89 2b       	or	r24, r25
   113d4:	b1 f0       	breq	.+44     	; 0x11402 <gpib_write_byte+0x2da>
   113d6:	89 b1       	in	r24, 0x09	; 9
   113d8:	99 b1       	in	r25, 0x09	; 9
   113da:	93 fb       	bst	r25, 3
   113dc:	99 27       	eor	r25, r25
   113de:	90 f9       	bld	r25, 0
   113e0:	ed b7       	in	r30, 0x3d	; 61
   113e2:	fe b7       	in	r31, 0x3e	; 62
   113e4:	96 83       	std	Z+6, r25	; 0x06
   113e6:	17 82       	std	Z+7, r1	; 0x07
   113e8:	82 fb       	bst	r24, 2
   113ea:	88 27       	eor	r24, r24
   113ec:	80 f9       	bld	r24, 0
   113ee:	84 83       	std	Z+4, r24	; 0x04
   113f0:	15 82       	std	Z+5, r1	; 0x05
   113f2:	86 ef       	ldi	r24, 0xF6	; 246
   113f4:	90 e1       	ldi	r25, 0x10	; 16
   113f6:	a0 e0       	ldi	r26, 0x00	; 0
// Free BUS, BUSY on error
                gpib_bus_read_init(1);
   113f8:	81 83       	std	Z+1, r24	; 0x01
   113fa:	92 83       	std	Z+2, r25	; 0x02
   113fc:	a3 83       	std	Z+3, r26	; 0x03
   113fe:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   11402:	81 e0       	ldi	r24, 0x01	; 1
   11404:	90 e0       	ldi	r25, 0x00	; 0
   11406:	38 dd       	rcall	.-1424   	; 0x10e78 <gpib_bus_read_init>
   11408:	0a c0       	rjmp	.+20     	; 0x1141e <gpib_write_byte+0x2f6>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   1140a:	1a 30       	cpi	r17, 0x0A	; 10
   1140c:	09 f0       	breq	.+2      	; 0x11410 <gpib_write_byte+0x2e8>
/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   1140e:	c5 ce       	rjmp	.-630    	; 0x1119a <gpib_write_byte+0x72>
   11410:	06 c0       	rjmp	.+12     	; 0x1141e <gpib_write_byte+0x2f6>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11412:	16 e0       	ldi	r17, 0x06	; 6
   11414:	c2 ce       	rjmp	.-636    	; 0x1119a <gpib_write_byte+0x72>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   11416:	18 e0       	ldi	r17, 0x08	; 8
   11418:	c0 ce       	rjmp	.-640    	; 0x1119a <gpib_write_byte+0x72>
   1141a:	19 e0       	ldi	r17, 0x09	; 9
   1141c:	be ce       	rjmp	.-644    	; 0x1119a <gpib_write_byte+0x72>
   1141e:	8e 85       	ldd	r24, Y+14	; 0x0e
   11420:	9f 85       	ldd	r25, Y+15	; 0x0f
   11422:	2f 96       	adiw	r28, 0x0f	; 15
   11424:	0f b6       	in	r0, 0x3f	; 63
   11426:	f8 94       	cli
   11428:	de bf       	out	0x3e, r29	; 62
   1142a:	0f be       	out	0x3f, r0	; 63
   1142c:	cd bf       	out	0x3d, r28	; 61
   1142e:	df 91       	pop	r29
   11430:	cf 91       	pop	r28
   11432:	1f 91       	pop	r17
   11434:	ef 90       	pop	r14
   11436:	df 90       	pop	r13
   11438:	cf 90       	pop	r12
   1143a:	8f 90       	pop	r8
   1143c:	7f 90       	pop	r7
   1143e:	6f 90       	pop	r6
   11440:	4f 90       	pop	r4
   11442:	3f 90       	pop	r3
   11444:	2f 90       	pop	r2
   11446:	08 95       	ret

00011448 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11448:	cf 93       	push	r28
   1144a:	df 93       	push	r29
   1144c:	ec 01       	movw	r28, r24
    if(fo == NULL)
   1144e:	89 2b       	or	r24, r25
   11450:	21 f4       	brne	.+8      	; 0x1145a <gpib_decode_header+0x12>
        fo = stdout;
   11452:	c0 91 cd 1c 	lds	r28, 0x1CCD	; 0x801ccd <__iob+0x2>
   11456:	d0 91 ce 1c 	lds	r29, 0x1CCE	; 0x801cce <__iob+0x3>

    fprintf(fo,"===========================================\n");
   1145a:	be 01       	movw	r22, r28
   1145c:	89 ef       	ldi	r24, 0xF9	; 249
   1145e:	9b e0       	ldi	r25, 0x0B	; 11
   11460:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"GPIB bus state\n");
   11464:	be 01       	movw	r22, r28
   11466:	86 e2       	ldi	r24, 0x26	; 38
   11468:	9c e0       	ldi	r25, 0x0C	; 12
   1146a:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   1146e:	be 01       	movw	r22, r28
   11470:	86 e3       	ldi	r24, 0x36	; 54
   11472:	9c e0       	ldi	r25, 0x0C	; 12
   11474:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   11478:	be 01       	movw	r22, r28
   1147a:	8a e4       	ldi	r24, 0x4A	; 74
   1147c:	9c e0       	ldi	r25, 0x0C	; 12
   1147e:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11482:	be 01       	movw	r22, r28
   11484:	8d e6       	ldi	r24, 0x6D	; 109
   11486:	9c e0       	ldi	r25, 0x0C	; 12
   11488:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"     A = ATN\n");
   1148c:	be 01       	movw	r22, r28
   1148e:	87 e9       	ldi	r24, 0x97	; 151
   11490:	9c e0       	ldi	r25, 0x0C	; 12
   11492:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"      E = EOI\n");
   11496:	be 01       	movw	r22, r28
   11498:	85 ea       	ldi	r24, 0xA5	; 165
   1149a:	9c e0       	ldi	r25, 0x0C	; 12
   1149c:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"       S = SRQ\n");
   114a0:	be 01       	movw	r22, r28
   114a2:	84 eb       	ldi	r24, 0xB4	; 180
   114a4:	9c e0       	ldi	r25, 0x0C	; 12
   114a6:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"        R = REN\n");
   114aa:	be 01       	movw	r22, r28
   114ac:	84 ec       	ldi	r24, 0xC4	; 196
   114ae:	9c e0       	ldi	r25, 0x0C	; 12
   114b0:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"         I = IFC\n");
   114b4:	be 01       	movw	r22, r28
   114b6:	85 ed       	ldi	r24, 0xD5	; 213
   114b8:	9c e0       	ldi	r25, 0x0C	; 12
   114ba:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   114be:	be 01       	movw	r22, r28
   114c0:	87 ee       	ldi	r24, 0xE7	; 231
   114c2:	9c e0       	ldi	r25, 0x0C	; 12
   114c4:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   114c8:	be 01       	movw	r22, r28
   114ca:	89 e0       	ldi	r24, 0x09	; 9
   114cc:	9d e0       	ldi	r25, 0x0D	; 13
   114ce:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   114d2:	be 01       	movw	r22, r28
   114d4:	81 e2       	ldi	r24, 0x21	; 33
   114d6:	9d e0       	ldi	r25, 0x0D	; 13
   114d8:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
    fprintf(fo,"              GPIB commands\n");
   114dc:	be 01       	movw	r22, r28
   114de:	8c e3       	ldi	r24, 0x3C	; 60
   114e0:	9d e0       	ldi	r25, 0x0D	; 13
   114e2:	0e 94 29 78 	call	0xf052	; 0xf052 <fputs>
}
   114e6:	df 91       	pop	r29
   114e8:	cf 91       	pop	r28
   114ea:	08 95       	ret

000114ec <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   114ec:	a9 e8       	ldi	r26, 0x89	; 137
   114ee:	b0 e0       	ldi	r27, 0x00	; 0
   114f0:	ec e7       	ldi	r30, 0x7C	; 124
   114f2:	fa e8       	ldi	r31, 0x8A	; 138
   114f4:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
   114f8:	8c 01       	movw	r16, r24
   114fa:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   114fc:	1a 86       	std	Y+10, r1	; 0x0a
   114fe:	4c 01       	movw	r8, r24
   11500:	88 24       	eor	r8, r8
   11502:	44 e0       	ldi	r20, 0x04	; 4
   11504:	94 22       	and	r9, r20
   11506:	ce 01       	movw	r24, r28
   11508:	0a 96       	adiw	r24, 0x0a	; 10
   1150a:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   1150c:	62 30       	cpi	r22, 0x02	; 2
   1150e:	71 05       	cpc	r23, r1
   11510:	e8 f4       	brcc	.+58     	; 0x1154c <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11512:	81 14       	cp	r8, r1
   11514:	91 04       	cpc	r9, r1
   11516:	29 f4       	brne	.+10     	; 0x11522 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11518:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1151a:	90 ee       	ldi	r25, 0xE0	; 224
   1151c:	90 0f       	add	r25, r16
   1151e:	9f 35       	cpi	r25, 0x5F	; 95
   11520:	08 f0       	brcs	.+2      	; 0x11524 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   11522:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11524:	90 e0       	ldi	r25, 0x00	; 0
   11526:	ed b7       	in	r30, 0x3d	; 61
   11528:	fe b7       	in	r31, 0x3e	; 62
   1152a:	91 87       	std	Z+9, r25	; 0x09
   1152c:	80 87       	std	Z+8, r24	; 0x08
   1152e:	c8 01       	movw	r24, r16
   11530:	99 27       	eor	r25, r25
   11532:	97 83       	std	Z+7, r25	; 0x07
   11534:	86 83       	std	Z+6, r24	; 0x06
   11536:	85 eb       	ldi	r24, 0xB5	; 181
   11538:	90 e1       	ldi	r25, 0x10	; 16
   1153a:	a0 e0       	ldi	r26, 0x00	; 0
   1153c:	83 83       	std	Z+3, r24	; 0x03
   1153e:	94 83       	std	Z+4, r25	; 0x04
   11540:	a5 83       	std	Z+5, r26	; 0x05
   11542:	f2 82       	std	Z+2, r15	; 0x02
   11544:	e1 82       	std	Z+1, r14	; 0x01
   11546:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
   1154a:	0c c0       	rjmp	.+24     	; 0x11564 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   1154c:	8f ea       	ldi	r24, 0xAF	; 175
   1154e:	90 e1       	ldi	r25, 0x10	; 16
   11550:	a0 e0       	ldi	r26, 0x00	; 0
   11552:	ed b7       	in	r30, 0x3d	; 61
   11554:	fe b7       	in	r31, 0x3e	; 62
   11556:	83 83       	std	Z+3, r24	; 0x03
   11558:	94 83       	std	Z+4, r25	; 0x04
   1155a:	a5 83       	std	Z+5, r26	; 0x05
   1155c:	f2 82       	std	Z+2, r15	; 0x02
   1155e:	e1 82       	std	Z+1, r14	; 0x01
   11560:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
    }

    tmp = str + strlen(str);
   11564:	f7 01       	movw	r30, r14
   11566:	01 90       	ld	r0, Z+
   11568:	00 20       	and	r0, r0
   1156a:	e9 f7       	brne	.-6      	; 0x11566 <gpib_trace_display+0x7a>
   1156c:	31 97       	sbiw	r30, 0x01	; 1
   1156e:	cf 01       	movw	r24, r30
   11570:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   11572:	81 14       	cp	r8, r1
   11574:	91 04       	cpc	r9, r1
   11576:	11 f0       	breq	.+4      	; 0x1157c <gpib_trace_display+0x90>
        *tmp++ = 'A';
   11578:	21 e4       	ldi	r18, 0x41	; 65
   1157a:	01 c0       	rjmp	.+2      	; 0x1157e <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   1157c:	2d e2       	ldi	r18, 0x2D	; 45
   1157e:	20 83       	st	Z, r18
   11580:	dc 01       	movw	r26, r24
   11582:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11584:	10 ff       	sbrs	r17, 0
   11586:	02 c0       	rjmp	.+4      	; 0x1158c <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   11588:	25 e4       	ldi	r18, 0x45	; 69
   1158a:	01 c0       	rjmp	.+2      	; 0x1158e <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   1158c:	2d e2       	ldi	r18, 0x2D	; 45
   1158e:	fc 01       	movw	r30, r24
   11590:	20 83       	st	Z, r18
   11592:	fd 01       	movw	r30, r26
   11594:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11596:	11 ff       	sbrs	r17, 1
   11598:	02 c0       	rjmp	.+4      	; 0x1159e <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   1159a:	83 e5       	ldi	r24, 0x53	; 83
   1159c:	01 c0       	rjmp	.+2      	; 0x115a0 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   1159e:	8d e2       	ldi	r24, 0x2D	; 45
   115a0:	8c 93       	st	X, r24
   115a2:	df 01       	movw	r26, r30
   115a4:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   115a6:	13 ff       	sbrs	r17, 3
   115a8:	02 c0       	rjmp	.+4      	; 0x115ae <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   115aa:	82 e5       	ldi	r24, 0x52	; 82
   115ac:	01 c0       	rjmp	.+2      	; 0x115b0 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   115ae:	8d e2       	ldi	r24, 0x2D	; 45
   115b0:	80 83       	st	Z, r24
   115b2:	fd 01       	movw	r30, r26
   115b4:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   115b6:	14 ff       	sbrs	r17, 4
   115b8:	02 c0       	rjmp	.+4      	; 0x115be <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   115ba:	89 e4       	ldi	r24, 0x49	; 73
   115bc:	01 c0       	rjmp	.+2      	; 0x115c0 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   115be:	8d e2       	ldi	r24, 0x2D	; 45
   115c0:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   115c2:	a1 14       	cp	r10, r1
   115c4:	b1 04       	cpc	r11, r1
   115c6:	d1 f4       	brne	.+52     	; 0x115fc <gpib_trace_display+0x110>
   115c8:	df 01       	movw	r26, r30
   115ca:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   115cc:	15 ff       	sbrs	r17, 5
   115ce:	02 c0       	rjmp	.+4      	; 0x115d4 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   115d0:	80 e5       	ldi	r24, 0x50	; 80
   115d2:	01 c0       	rjmp	.+2      	; 0x115d6 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   115d4:	8d e2       	ldi	r24, 0x2D	; 45
   115d6:	80 83       	st	Z, r24
   115d8:	fd 01       	movw	r30, r26
   115da:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   115dc:	16 ff       	sbrs	r17, 6
   115de:	02 c0       	rjmp	.+4      	; 0x115e4 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   115e0:	84 e5       	ldi	r24, 0x54	; 84
   115e2:	01 c0       	rjmp	.+2      	; 0x115e6 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   115e4:	8d e2       	ldi	r24, 0x2D	; 45
   115e6:	8c 93       	st	X, r24
   115e8:	cf 01       	movw	r24, r30
   115ea:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   115ec:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   115ee:	17 ff       	sbrs	r17, 7
   115f0:	02 c0       	rjmp	.+4      	; 0x115f6 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   115f2:	82 e4       	ldi	r24, 0x42	; 66
   115f4:	01 c0       	rjmp	.+2      	; 0x115f8 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   115f6:	8d e2       	ldi	r24, 0x2D	; 45
   115f8:	80 83       	st	Z, r24
   115fa:	08 c0       	rjmp	.+16     	; 0x1160c <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   115fc:	8d e2       	ldi	r24, 0x2D	; 45
   115fe:	80 83       	st	Z, r24
        *tmp++ = '-';
   11600:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11602:	6f 01       	movw	r12, r30
   11604:	43 e0       	ldi	r20, 0x03	; 3
   11606:	c4 0e       	add	r12, r20
   11608:	d1 1c       	adc	r13, r1
   1160a:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   1160c:	f6 01       	movw	r30, r12
   1160e:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11610:	f1 e0       	ldi	r31, 0x01	; 1
   11612:	af 1a       	sub	r10, r31
   11614:	b1 08       	sbc	r11, r1
   11616:	42 e0       	ldi	r20, 0x02	; 2
   11618:	a4 16       	cp	r10, r20
   1161a:	b1 04       	cpc	r11, r1
   1161c:	f0 f4       	brcc	.+60     	; 0x1165a <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   1161e:	15 ff       	sbrs	r17, 5
   11620:	03 c0       	rjmp	.+6      	; 0x11628 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11622:	69 e5       	ldi	r22, 0x59	; 89
   11624:	7d e0       	ldi	r23, 0x0D	; 13
   11626:	02 c0       	rjmp	.+4      	; 0x1162c <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11628:	60 e6       	ldi	r22, 0x60	; 96
   1162a:	74 e0       	ldi	r23, 0x04	; 4
   1162c:	c7 01       	movw	r24, r14
   1162e:	0e 94 b8 32 	call	0x6570	; 0x6570 <strcat>
        if(status & NRFD_FLAG)
   11632:	16 ff       	sbrs	r17, 6
   11634:	03 c0       	rjmp	.+6      	; 0x1163c <gpib_trace_display+0x150>
            strcat(str," NRFD");
   11636:	6f e5       	ldi	r22, 0x5F	; 95
   11638:	7d e0       	ldi	r23, 0x0D	; 13
   1163a:	02 c0       	rjmp	.+4      	; 0x11640 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   1163c:	60 e6       	ldi	r22, 0x60	; 96
   1163e:	74 e0       	ldi	r23, 0x04	; 4
   11640:	c7 01       	movw	r24, r14
   11642:	0e 94 b8 32 	call	0x6570	; 0x6570 <strcat>
        if(status & NDAC_FLAG)
   11646:	17 ff       	sbrs	r17, 7
   11648:	03 c0       	rjmp	.+6      	; 0x11650 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   1164a:	65 e6       	ldi	r22, 0x65	; 101
   1164c:	7d e0       	ldi	r23, 0x0D	; 13
   1164e:	02 c0       	rjmp	.+4      	; 0x11654 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   11650:	60 e6       	ldi	r22, 0x60	; 96
   11652:	74 e0       	ldi	r23, 0x04	; 4
   11654:	c7 01       	movw	r24, r14
   11656:	0e 94 b8 32 	call	0x6570	; 0x6570 <strcat>
    }

    if( (status & ATN_FLAG) )
   1165a:	81 14       	cp	r8, r1
   1165c:	91 04       	cpc	r9, r1
   1165e:	09 f4       	brne	.+2      	; 0x11662 <gpib_trace_display+0x176>
   11660:	5a c0       	rjmp	.+180    	; 0x11716 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   11662:	c8 01       	movw	r24, r16
   11664:	8f 77       	andi	r24, 0x7F	; 127
   11666:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11668:	9c 01       	movw	r18, r24
   1166a:	20 52       	subi	r18, 0x20	; 32
   1166c:	31 09       	sbc	r19, r1
   1166e:	2f 31       	cpi	r18, 0x1F	; 31
   11670:	31 05       	cpc	r19, r1
   11672:	48 f4       	brcc	.+18     	; 0x11686 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11674:	0f 71       	andi	r16, 0x1F	; 31
   11676:	11 27       	eor	r17, r17
   11678:	ed b7       	in	r30, 0x3d	; 61
   1167a:	fe b7       	in	r31, 0x3e	; 62
   1167c:	17 83       	std	Z+7, r17	; 0x07
   1167e:	06 83       	std	Z+6, r16	; 0x06
   11680:	84 ea       	ldi	r24, 0xA4	; 164
   11682:	90 e1       	ldi	r25, 0x10	; 16
   11684:	0e c0       	rjmp	.+28     	; 0x116a2 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11686:	9c 01       	movw	r18, r24
   11688:	20 54       	subi	r18, 0x40	; 64
   1168a:	31 09       	sbc	r19, r1
   1168c:	2f 30       	cpi	r18, 0x0F	; 15
   1168e:	31 05       	cpc	r19, r1
   11690:	88 f4       	brcc	.+34     	; 0x116b4 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11692:	0f 71       	andi	r16, 0x1F	; 31
   11694:	11 27       	eor	r17, r17
   11696:	ed b7       	in	r30, 0x3d	; 61
   11698:	fe b7       	in	r31, 0x3e	; 62
   1169a:	17 83       	std	Z+7, r17	; 0x07
   1169c:	06 83       	std	Z+6, r16	; 0x06
   1169e:	89 e9       	ldi	r24, 0x99	; 153
   116a0:	90 e1       	ldi	r25, 0x10	; 16
   116a2:	a0 e0       	ldi	r26, 0x00	; 0
   116a4:	83 83       	std	Z+3, r24	; 0x03
   116a6:	94 83       	std	Z+4, r25	; 0x04
   116a8:	a5 83       	std	Z+5, r26	; 0x05
   116aa:	d2 82       	std	Z+2, r13	; 0x02
   116ac:	c1 82       	std	Z+1, r12	; 0x01
   116ae:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
   116b2:	31 c0       	rjmp	.+98     	; 0x11716 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   116b4:	9c 01       	movw	r18, r24
   116b6:	20 56       	subi	r18, 0x60	; 96
   116b8:	31 09       	sbc	r19, r1
   116ba:	20 31       	cpi	r18, 0x10	; 16
   116bc:	31 05       	cpc	r19, r1
   116be:	28 f0       	brcs	.+10     	; 0x116ca <gpib_trace_display+0x1de>
   116c0:	e2 e8       	ldi	r30, 0x82	; 130
   116c2:	f1 e0       	ldi	r31, 0x01	; 1
   116c4:	00 e0       	ldi	r16, 0x00	; 0
   116c6:	10 e0       	ldi	r17, 0x00	; 0
   116c8:	0b c0       	rjmp	.+22     	; 0x116e0 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   116ca:	0f 71       	andi	r16, 0x1F	; 31
   116cc:	11 27       	eor	r17, r17
   116ce:	ed b7       	in	r30, 0x3d	; 61
   116d0:	fe b7       	in	r31, 0x3e	; 62
   116d2:	17 83       	std	Z+7, r17	; 0x07
   116d4:	06 83       	std	Z+6, r16	; 0x06
   116d6:	8e e8       	ldi	r24, 0x8E	; 142
   116d8:	90 e1       	ldi	r25, 0x10	; 16
   116da:	e3 cf       	rjmp	.-58     	; 0x116a2 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   116dc:	0f 5f       	subi	r16, 0xFF	; 255
   116de:	1f 4f       	sbci	r17, 0xFF	; 255
   116e0:	20 81       	ld	r18, Z
   116e2:	31 81       	ldd	r19, Z+1	; 0x01
   116e4:	2f 3f       	cpi	r18, 0xFF	; 255
   116e6:	4f ef       	ldi	r20, 0xFF	; 255
   116e8:	34 07       	cpc	r19, r20
   116ea:	a9 f0       	breq	.+42     	; 0x11716 <gpib_trace_display+0x22a>
   116ec:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   116ee:	82 17       	cp	r24, r18
   116f0:	93 07       	cpc	r25, r19
   116f2:	a1 f7       	brne	.-24     	; 0x116dc <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   116f4:	64 e6       	ldi	r22, 0x64	; 100
   116f6:	74 e0       	ldi	r23, 0x04	; 4
   116f8:	c6 01       	movw	r24, r12
   116fa:	0e 94 b8 32 	call	0x6570	; 0x6570 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   116fe:	f8 01       	movw	r30, r16
   11700:	ee 0f       	add	r30, r30
   11702:	ff 1f       	adc	r31, r31
   11704:	ee 0f       	add	r30, r30
   11706:	ff 1f       	adc	r31, r31
   11708:	ee 57       	subi	r30, 0x7E	; 126
   1170a:	fe 4f       	sbci	r31, 0xFE	; 254
   1170c:	62 81       	ldd	r22, Z+2	; 0x02
   1170e:	73 81       	ldd	r23, Z+3	; 0x03
   11710:	c6 01       	movw	r24, r12
   11712:	0e 94 b8 32 	call	0x6570	; 0x6570 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11716:	20 91 6d 19 	lds	r18, 0x196D	; 0x80196d <gpib_log_fp>
   1171a:	30 91 6e 19 	lds	r19, 0x196E	; 0x80196e <gpib_log_fp+0x1>
   1171e:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
   11722:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
   11726:	23 2b       	or	r18, r19
   11728:	21 f4       	brne	.+8      	; 0x11732 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1172a:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <gpib_log_fp+0x1>
   1172e:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11732:	20 91 6d 19 	lds	r18, 0x196D	; 0x80196d <gpib_log_fp>
   11736:	30 91 6e 19 	lds	r19, 0x196E	; 0x80196e <gpib_log_fp+0x1>
   1173a:	82 17       	cp	r24, r18
   1173c:	93 07       	cpc	r25, r19
   1173e:	19 f0       	breq	.+6      	; 0x11746 <gpib_trace_display+0x25a>
        puts(str);
   11740:	c7 01       	movw	r24, r14
   11742:	0e 94 41 78 	call	0xf082	; 0xf082 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11746:	ed b7       	in	r30, 0x3d	; 61
   11748:	fe b7       	in	r31, 0x3e	; 62
   1174a:	f6 82       	std	Z+6, r15	; 0x06
   1174c:	e5 82       	std	Z+5, r14	; 0x05
   1174e:	8b e6       	ldi	r24, 0x6B	; 107
   11750:	9d e0       	ldi	r25, 0x0D	; 13
   11752:	94 83       	std	Z+4, r25	; 0x04
   11754:	83 83       	std	Z+3, r24	; 0x03
   11756:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <gpib_log_fp>
   1175a:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <gpib_log_fp+0x1>
   1175e:	92 83       	std	Z+2, r25	; 0x02
   11760:	81 83       	std	Z+1, r24	; 0x01
   11762:	0e 94 e9 7f 	call	0xffd2	; 0xffd2 <fprintf>
}
   11766:	c7 57       	subi	r28, 0x77	; 119
   11768:	df 4f       	sbci	r29, 0xFF	; 255
   1176a:	ec e0       	ldi	r30, 0x0C	; 12
   1176c:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

00011770 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   11770:	a5 e0       	ldi	r26, 0x05	; 5
   11772:	b0 e0       	ldi	r27, 0x00	; 0
   11774:	ee eb       	ldi	r30, 0xBE	; 190
   11776:	fb e8       	ldi	r31, 0x8B	; 139
   11778:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
    ch = 0;
    control_last = 0;


// If we have an unread state it has already been traced!
    if(gpib_unread_f)
   1177c:	20 91 6c 19 	lds	r18, 0x196C	; 0x80196c <gpib_unread_f>
   11780:	22 23       	and	r18, r18
   11782:	39 f0       	breq	.+14     	; 0x11792 <gpib_read_byte+0x22>
    {
        gpib_unread_f = 0;
   11784:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <gpib_unread_f>
        return(gpib_unread_data);
   11788:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <gpib_unread_data>
   1178c:	90 91 ff 1e 	lds	r25, 0x1EFF	; 0x801eff <gpib_unread_data+0x1>
   11790:	d4 c0       	rjmp	.+424    	; 0x1193a <gpib_read_byte+0x1ca>
   11792:	5c 01       	movw	r10, r24
    }

    gpib_bus_read_init(1);                        // Busy until we are ready
   11794:	81 e0       	ldi	r24, 0x01	; 1
   11796:	90 e0       	ldi	r25, 0x00	; 0
   11798:	6f db       	rcall	.-2338   	; 0x10e78 <gpib_bus_read_init>

///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs

    if(trace)
   1179a:	a1 14       	cp	r10, r1
   1179c:	b1 04       	cpc	r11, r1
    {
        control_last = gpib_control_pin_read();
   1179e:	51 f0       	breq	.+20     	; 0x117b4 <gpib_read_byte+0x44>
   117a0:	a7 dc       	rcall	.-1714   	; 0x110f0 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   117a2:	7c 01       	movw	r14, r24
   117a4:	b5 dc       	rcall	.-1686   	; 0x11110 <gpib_handshake_pin_read>
   117a6:	e8 2a       	or	r14, r24
        gpib_trace_display(control_last, TRACE_BUS);
   117a8:	f9 2a       	or	r15, r25
   117aa:	62 e0       	ldi	r22, 0x02	; 2
   117ac:	70 e0       	ldi	r23, 0x00	; 0
   117ae:	c7 01       	movw	r24, r14
   117b0:	9d de       	rcall	.-710    	; 0x114ec <gpib_trace_display>
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;
	extern void gpib_user_task();

    ch = 0;
    control_last = 0;
   117b2:	02 c0       	rjmp	.+4      	; 0x117b8 <gpib_read_byte+0x48>
   117b4:	e1 2c       	mov	r14, r1
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   117b6:	f1 2c       	mov	r15, r1
   117b8:	00 e0       	ldi	r16, 0x00	; 0
   117ba:	10 e0       	ldi	r17, 0x00	; 0
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {
gpib_user_task();
   117bc:	c0 e0       	ldi	r28, 0x00	; 0
   117be:	0e 94 6a e0 	call	0x1c0d4	; 0x1c0d4 <gpib_user_task>

        if(uart_keyhit(0))
   117c2:	80 e0       	ldi	r24, 0x00	; 0
   117c4:	0e 94 bb 2b 	call	0x5776	; 0x5776 <uart_keyhit>
   117c8:	89 2b       	or	r24, r25
		{
			if(debuglevel & GPIB_ERR)
   117ca:	91 f0       	breq	.+36     	; 0x117f0 <gpib_read_byte+0x80>
   117cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117d0:	80 ff       	sbrs	r24, 0
				printf("gpib_read_byte: state=%d\n", rx_state);
   117d2:	90 c0       	rjmp	.+288    	; 0x118f4 <gpib_read_byte+0x184>
   117d4:	d0 e0       	ldi	r29, 0x00	; 0
   117d6:	ed b7       	in	r30, 0x3d	; 61
   117d8:	fe b7       	in	r31, 0x3e	; 62
   117da:	d5 83       	std	Z+5, r29	; 0x05
   117dc:	c4 83       	std	Z+4, r28	; 0x04
   117de:	8c ed       	ldi	r24, 0xDC	; 220
   117e0:	90 e1       	ldi	r25, 0x10	; 16
   117e2:	a0 e0       	ldi	r26, 0x00	; 0
   117e4:	81 83       	std	Z+1, r24	; 0x01
   117e6:	92 83       	std	Z+2, r25	; 0x02
   117e8:	a3 83       	std	Z+3, r26	; 0x03
   117ea:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   117ee:	82 c0       	rjmp	.+260    	; 0x118f4 <gpib_read_byte+0x184>
   117f0:	4c 99       	sbic	0x09, 4	; 9
        {
            ch |= IFC_FLAG;
   117f2:	14 c0       	rjmp	.+40     	; 0x1181c <gpib_read_byte+0xac>
			if(debuglevel & GPIB_ERR)
   117f4:	10 61       	ori	r17, 0x10	; 16
   117f6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117fa:	80 ff       	sbrs	r24, 0
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   117fc:	0d c0       	rjmp	.+26     	; 0x11818 <gpib_read_byte+0xa8>
   117fe:	d0 e0       	ldi	r29, 0x00	; 0
   11800:	ed b7       	in	r30, 0x3d	; 61
   11802:	fe b7       	in	r31, 0x3e	; 62
   11804:	d5 83       	std	Z+5, r29	; 0x05
   11806:	c4 83       	std	Z+4, r28	; 0x04
   11808:	8e eb       	ldi	r24, 0xBE	; 190
   1180a:	90 e1       	ldi	r25, 0x10	; 16
   1180c:	a0 e0       	ldi	r26, 0x00	; 0
   1180e:	81 83       	std	Z+1, r24	; 0x01
   11810:	92 83       	std	Z+2, r25	; 0x02
   11812:	a3 83       	std	Z+3, r26	; 0x03
            gpib_bus_init();
   11814:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   11818:	52 db       	rcall	.-2396   	; 0x10ebe <gpib_bus_init>
            break;
        }

        switch(rx_state)
   1181a:	6c c0       	rjmp	.+216    	; 0x118f4 <gpib_read_byte+0x184>
   1181c:	8c 2f       	mov	r24, r28
   1181e:	90 e0       	ldi	r25, 0x00	; 0
   11820:	89 30       	cpi	r24, 0x09	; 9
   11822:	91 05       	cpc	r25, r1
   11824:	08 f0       	brcs	.+2      	; 0x11828 <gpib_read_byte+0xb8>
   11826:	4c c0       	rjmp	.+152    	; 0x118c0 <gpib_read_byte+0x150>
   11828:	fc 01       	movw	r30, r24
   1182a:	e9 53       	subi	r30, 0x39	; 57
   1182c:	ff 4f       	sbci	r31, 0xFF	; 255
   1182e:	0c 94 ba e3 	jmp	0x1c774	; 0x1c774 <__tablejump2__>
        {
            case GPIB_RX_START:
///@brief Signal that we are ready to ready
#if BOARD == 2
                GPIB_IO_HI(NRFD);
   11832:	5a 9a       	sbi	0x0b, 2	; 11
   11834:	52 9a       	sbi	0x0a, 2	; 10
   11836:	fd e0       	ldi	r31, 0x0D	; 13
   11838:	fa 95       	dec	r31
   1183a:	f1 f7       	brne	.-4      	; 0x11838 <gpib_read_byte+0xc8>
#else
                GPIB_PIN_FLOAT_UP(NRFD);
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   1183c:	00 00       	nop
   1183e:	c1 e0       	ldi	r28, 0x01	; 1
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   11840:	77 c0       	rjmp	.+238    	; 0x11930 <gpib_read_byte+0x1c0>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11842:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   11844:	75 c0       	rjmp	.+234    	; 0x11930 <gpib_read_byte+0x1c0>

///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   11846:	c2 e0       	ldi	r28, 0x02	; 2
   11848:	73 c0       	rjmp	.+230    	; 0x11930 <gpib_read_byte+0x1c0>
   1184a:	5a 98       	cbi	0x0b, 2	; 11
   1184c:	52 9a       	sbi	0x0a, 2	; 10
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   1184e:	4a dc       	rcall	.-1900   	; 0x110e4 <gpib_bus_read>
   11850:	c8 2e       	mov	r12, r24
   11852:	d1 2c       	mov	r13, r1
   11854:	4d dc       	rcall	.-1894   	; 0x110f0 <gpib_control_pin_read>
                ch |= control_last;
   11856:	7c 01       	movw	r14, r24
   11858:	08 2b       	or	r16, r24

                if(trace)
   1185a:	19 2b       	or	r17, r25
   1185c:	0c 29       	or	r16, r12
   1185e:	1d 29       	or	r17, r13
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   11860:	a1 14       	cp	r10, r1
   11862:	b1 04       	cpc	r11, r1
   11864:	49 f0       	breq	.+18     	; 0x11878 <gpib_read_byte+0x108>
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11866:	54 dc       	rcall	.-1880   	; 0x11110 <gpib_handshake_pin_read>
   11868:	e8 2a       	or	r14, r24
   1186a:	f9 2a       	or	r15, r25
   1186c:	61 e0       	ldi	r22, 0x01	; 1
   1186e:	70 e0       	ldi	r23, 0x00	; 0
   11870:	c6 01       	movw	r24, r12
   11872:	8e 29       	or	r24, r14
                }

#if BOARD == 2
                GPIB_IO_HI(NDAC);
   11874:	9f 29       	or	r25, r15
   11876:	3a de       	rcall	.-908    	; 0x114ec <gpib_trace_display>
   11878:	5b 9a       	sbi	0x0b, 3	; 11
   1187a:	53 9a       	sbi	0x0a, 3	; 10
   1187c:	8d e0       	ldi	r24, 0x0D	; 13
#else
                GPIB_PIN_FLOAT_UP(NDAC);
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   1187e:	8a 95       	dec	r24
   11880:	f1 f7       	brne	.-4      	; 0x1187e <gpib_read_byte+0x10e>
   11882:	00 00       	nop
   11884:	64 ef       	ldi	r22, 0xF4	; 244
   11886:	71 e0       	ldi	r23, 0x01	; 1
#if BOARD == 3
/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
#else
                rx_state = GPIB_RX_WAIT_FOR_NDAC_HI;
   11888:	80 e0       	ldi	r24, 0x00	; 0
   1188a:	90 e0       	ldi	r25, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   1188c:	eb da       	rcall	.-2602   	; 0x10e64 <gpib_timeout_set>
   1188e:	c3 e0       	ldi	r28, 0x03	; 3
                {
                    gpib_timeout_set(HTIMEOUT);
   11890:	4f c0       	rjmp	.+158    	; 0x11930 <gpib_read_byte+0x1c0>
   11892:	4b 9b       	sbis	0x09, 3	; 9
   11894:	09 c0       	rjmp	.+18     	; 0x118a8 <gpib_read_byte+0x138>
   11896:	64 ef       	ldi	r22, 0xF4	; 244
   11898:	71 e0       	ldi	r23, 0x01	; 1
   1189a:	80 e0       	ldi	r24, 0x00	; 0
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1189c:	90 e0       	ldi	r25, 0x00	; 0
   1189e:	e2 da       	rcall	.-2620   	; 0x10e64 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   118a0:	c4 e0       	ldi	r28, 0x04	; 4
   118a2:	02 c0       	rjmp	.+4      	; 0x118a8 <gpib_read_byte+0x138>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
                {
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   118a4:	19 99       	sbic	0x03, 1	; 3
   118a6:	c5 e0       	ldi	r28, 0x05	; 5
   118a8:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
                    rx_state = GPIB_RX_ERROR;
   118ac:	88 23       	and	r24, r24
   118ae:	09 f4       	brne	.+2      	; 0x118b2 <gpib_read_byte+0x142>
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
   118b0:	3f c0       	rjmp	.+126    	; 0x11930 <gpib_read_byte+0x1c0>
   118b2:	10 64       	ori	r17, 0x40	; 64
   118b4:	c7 e0       	ldi	r28, 0x07	; 7
                break;
        }

        if(trace)
   118b6:	3c c0       	rjmp	.+120    	; 0x11930 <gpib_read_byte+0x1c0>
   118b8:	81 e0       	ldi	r24, 0x01	; 1
   118ba:	90 e0       	ldi	r25, 0x00	; 0
   118bc:	dd da       	rcall	.-2630   	; 0x10e78 <gpib_bus_read_init>
   118be:	04 c0       	rjmp	.+8      	; 0x118c8 <gpib_read_byte+0x158>
   118c0:	a1 14       	cp	r10, r1
   118c2:	b1 04       	cpc	r11, r1
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   118c4:	91 f0       	breq	.+36     	; 0x118ea <gpib_read_byte+0x17a>
   118c6:	04 c0       	rjmp	.+8      	; 0x118d0 <gpib_read_byte+0x160>
   118c8:	a1 14       	cp	r10, r1
            control |= gpib_handshake_pin_read();
   118ca:	b1 04       	cpc	r11, r1
   118cc:	99 f0       	breq	.+38     	; 0x118f4 <gpib_read_byte+0x184>
   118ce:	c8 e0       	ldi	r28, 0x08	; 8
   118d0:	0f dc       	rcall	.-2018   	; 0x110f0 <gpib_control_pin_read>
            if(control_last != control)
   118d2:	6c 01       	movw	r12, r24
   118d4:	1d dc       	rcall	.-1990   	; 0x11110 <gpib_handshake_pin_read>
   118d6:	c8 2a       	or	r12, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   118d8:	d9 2a       	or	r13, r25
   118da:	ce 14       	cp	r12, r14
   118dc:	df 04       	cpc	r13, r15
   118de:	31 f0       	breq	.+12     	; 0x118ec <gpib_read_byte+0x17c>
   118e0:	62 e0       	ldi	r22, 0x02	; 2
   118e2:	70 e0       	ldi	r23, 0x00	; 0
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   118e4:	c6 01       	movw	r24, r12
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   118e6:	02 de       	rcall	.-1020   	; 0x114ec <gpib_trace_display>
   118e8:	01 c0       	rjmp	.+2      	; 0x118ec <gpib_read_byte+0x17c>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   118ea:	67 01       	movw	r12, r14
   118ec:	c8 30       	cpi	r28, 0x08	; 8
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   118ee:	11 f0       	breq	.+4      	; 0x118f4 <gpib_read_byte+0x184>
   118f0:	76 01       	movw	r14, r12
   118f2:	65 cf       	rjmp	.-310    	; 0x117be <gpib_read_byte+0x4e>
   118f4:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <current>
   118f8:	90 91 f9 1e 	lds	r25, 0x1EF9	; 0x801ef9 <current+0x1>
   118fc:	90 93 f5 1c 	sts	0x1CF5, r25	; 0x801cf5 <lastcmd+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   11900:	80 93 f4 1c 	sts	0x1CF4, r24	; 0x801cf4 <lastcmd>
   11904:	c8 01       	movw	r24, r16
   11906:	88 27       	eor	r24, r24
   11908:	90 7d       	andi	r25, 0xD0	; 208
   1190a:	89 2b       	or	r24, r25
        current = 0;
   1190c:	11 f4       	brne	.+4      	; 0x11912 <gpib_read_byte+0x1a2>
   1190e:	12 fd       	sbrc	r17, 2
   11910:	05 c0       	rjmp	.+10     	; 0x1191c <gpib_read_byte+0x1ac>
   11912:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <current+0x1>
    else
        current = ch & CMD_MASK;
   11916:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <current>
   1191a:	07 c0       	rjmp	.+14     	; 0x1192a <gpib_read_byte+0x1ba>
   1191c:	c8 01       	movw	r24, r16
   1191e:	8f 77       	andi	r24, 0x7F	; 127
   11920:	99 27       	eor	r25, r25
   11922:	90 93 f9 1e 	sts	0x1EF9, r25	; 0x801ef9 <current+0x1>
   11926:	80 93 f8 1e 	sts	0x1EF8, r24	; 0x801ef8 <current>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   1192a:	c8 01       	movw	r24, r16
   1192c:	06 c0       	rjmp	.+12     	; 0x1193a <gpib_read_byte+0x1ca>
   1192e:	c6 e0       	ldi	r28, 0x06	; 6
   11930:	a1 14       	cp	r10, r1
   11932:	b1 04       	cpc	r11, r1
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11934:	69 f6       	brne	.-102    	; 0x118d0 <gpib_read_byte+0x160>
   11936:	67 01       	movw	r12, r14
   11938:	db cf       	rjmp	.-74     	; 0x118f0 <gpib_read_byte+0x180>
   1193a:	cd b7       	in	r28, 0x3d	; 61
   1193c:	de b7       	in	r29, 0x3e	; 62
   1193e:	25 96       	adiw	r28, 0x05	; 5
   11940:	ea e0       	ldi	r30, 0x0A	; 10
   11942:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

00011946 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11946:	60 e0       	ldi	r22, 0x00	; 0
   11948:	70 e0       	ldi	r23, 0x00	; 0
   1194a:	d0 cd       	rjmp	.-1120   	; 0x114ec <gpib_trace_display>
   1194c:	08 95       	ret

0001194e <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   1194e:	a7 e0       	ldi	r26, 0x07	; 7
   11950:	b0 e0       	ldi	r27, 0x00	; 0
   11952:	ed ea       	ldi	r30, 0xAD	; 173
   11954:	fc e8       	ldi	r31, 0x8C	; 140
   11956:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
   1195a:	5b 01       	movw	r10, r22
   1195c:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   1195e:	fa 01       	movw	r30, r20
   11960:	20 81       	ld	r18, Z
   11962:	31 81       	ldd	r19, Z+1	; 0x01
   11964:	22 27       	eor	r18, r18
   11966:	31 83       	std	Z+1, r19	; 0x01
   11968:	20 83       	st	Z, r18

    if(!size)
   1196a:	67 2b       	or	r22, r23
   1196c:	21 f0       	breq	.+8      	; 0x11976 <gpib_read_str+0x28>
   1196e:	7c 01       	movw	r14, r24
   11970:	00 e0       	ldi	r16, 0x00	; 0
   11972:	10 e0       	ldi	r17, 0x00	; 0
   11974:	28 c0       	rjmp	.+80     	; 0x119c6 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11976:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1197a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1197e:	81 72       	andi	r24, 0x21	; 33
   11980:	91 70       	andi	r25, 0x01	; 1
   11982:	89 2b       	or	r24, r25
   11984:	09 f4       	brne	.+2      	; 0x11988 <gpib_read_str+0x3a>
   11986:	7c c0       	rjmp	.+248    	; 0x11a80 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11988:	85 e7       	ldi	r24, 0x75	; 117
   1198a:	90 e1       	ldi	r25, 0x10	; 16
   1198c:	a0 e0       	ldi	r26, 0x00	; 0
   1198e:	ed b7       	in	r30, 0x3d	; 61
   11990:	fe b7       	in	r31, 0x3e	; 62
   11992:	81 83       	std	Z+1, r24	; 0x01
   11994:	92 83       	std	Z+2, r25	; 0x02
   11996:	a3 83       	std	Z+3, r26	; 0x03
   11998:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1199c:	71 c0       	rjmp	.+226    	; 0x11a80 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   1199e:	8c 27       	eor	r24, r28
   119a0:	9d 27       	eor	r25, r29
   119a2:	92 fd       	sbrc	r25, 2
   119a4:	2e c0       	rjmp	.+92     	; 0x11a02 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   119a6:	ce 01       	movw	r24, r28
   119a8:	88 27       	eor	r24, r24
   119aa:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   119ac:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   119ae:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   119b0:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   119b2:	f7 01       	movw	r30, r14
   119b4:	20 83       	st	Z, r18
        ++ind;
   119b6:	0f 5f       	subi	r16, 0xFF	; 255
   119b8:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   119ba:	89 2b       	or	r24, r25
   119bc:	09 f4       	brne	.+2      	; 0x119c0 <gpib_read_str+0x72>
   119be:	3c c0       	rjmp	.+120    	; 0x11a38 <gpib_read_str+0xea>
   119c0:	ff ef       	ldi	r31, 0xFF	; 255
   119c2:	ef 1a       	sub	r14, r31
   119c4:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   119c6:	0a 15       	cp	r16, r10
   119c8:	1b 05       	cpc	r17, r11
   119ca:	0c f0       	brlt	.+2      	; 0x119ce <gpib_read_str+0x80>
   119cc:	3f c0       	rjmp	.+126    	; 0x11a4c <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   119ce:	80 e0       	ldi	r24, 0x00	; 0
   119d0:	90 e0       	ldi	r25, 0x00	; 0
   119d2:	ce de       	rcall	.-612    	; 0x11770 <gpib_read_byte>
   119d4:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   119d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   119da:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119de:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   119e0:	02 c0       	rjmp	.+4      	; 0x119e6 <gpib_read_str+0x98>
   119e2:	ce 01       	movw	r24, r28
#endif
        if(val & ERROR_MASK)
   119e4:	b0 df       	rcall	.-160    	; 0x11946 <gpib_decode>
   119e6:	9e 01       	movw	r18, r28
   119e8:	22 27       	eor	r18, r18
   119ea:	30 7d       	andi	r19, 0xD0	; 208
   119ec:	f6 01       	movw	r30, r12
   119ee:	80 81       	ld	r24, Z
   119f0:	91 81       	ldd	r25, Z+1	; 0x01
   119f2:	21 15       	cp	r18, r1
   119f4:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   119f6:	99 f2       	breq	.-90     	; 0x1199e <gpib_read_str+0x50>
   119f8:	82 2b       	or	r24, r18
   119fa:	93 2b       	or	r25, r19
   119fc:	91 83       	std	Z+1, r25	; 0x01
            break;
   119fe:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11a00:	28 c0       	rjmp	.+80     	; 0x11a52 <gpib_read_str+0x104>
   11a02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11a06:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11a0a:	81 72       	andi	r24, 0x21	; 33
   11a0c:	91 70       	andi	r25, 0x01	; 1
   11a0e:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11a10:	81 f0       	breq	.+32     	; 0x11a32 <gpib_read_str+0xe4>
   11a12:	ce 01       	movw	r24, r28
   11a14:	99 27       	eor	r25, r25
   11a16:	ed b7       	in	r30, 0x3d	; 61
   11a18:	fe b7       	in	r31, 0x3e	; 62
   11a1a:	97 83       	std	Z+7, r25	; 0x07
   11a1c:	86 83       	std	Z+6, r24	; 0x06
   11a1e:	15 83       	std	Z+5, r17	; 0x05
   11a20:	04 83       	std	Z+4, r16	; 0x04
   11a22:	88 e4       	ldi	r24, 0x48	; 72
   11a24:	90 e1       	ldi	r25, 0x10	; 16
   11a26:	a0 e0       	ldi	r26, 0x00	; 0
   11a28:	81 83       	std	Z+1, r24	; 0x01
   11a2a:	92 83       	std	Z+2, r25	; 0x02
   11a2c:	a3 83       	std	Z+3, r26	; 0x03
            gpib_unread(val);
   11a2e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   11a32:	ce 01       	movw	r24, r28
            break;
   11a34:	2d db       	rcall	.-2470   	; 0x11090 <gpib_unread>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11a36:	0d c0       	rjmp	.+26     	; 0x11a52 <gpib_read_str+0x104>
   11a38:	d0 ff       	sbrs	r29, 0
        {

            if(*status & EOI_FLAG)
   11a3a:	c2 cf       	rjmp	.-124    	; 0x119c0 <gpib_read_str+0x72>
   11a3c:	f6 01       	movw	r30, r12
   11a3e:	80 81       	ld	r24, Z
   11a40:	91 81       	ldd	r25, Z+1	; 0x01
   11a42:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11a44:	1f c0       	rjmp	.+62     	; 0x11a84 <gpib_read_str+0x136>
   11a46:	91 60       	ori	r25, 0x01	; 1
   11a48:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   11a4a:	80 83       	st	Z, r24
   11a4c:	0a 15       	cp	r16, r10
   11a4e:	1b 05       	cpc	r17, r11
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   11a50:	c9 f0       	breq	.+50     	; 0x11a84 <gpib_read_str+0x136>
   11a52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11a56:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11a5a:	81 72       	andi	r24, 0x21	; 33
   11a5c:	99 27       	eor	r25, r25
   11a5e:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11a60:	89 f0       	breq	.+34     	; 0x11a84 <gpib_read_str+0x136>
   11a62:	ed b7       	in	r30, 0x3d	; 61
   11a64:	fe b7       	in	r31, 0x3e	; 62
   11a66:	b7 82       	std	Z+7, r11	; 0x07
   11a68:	a6 82       	std	Z+6, r10	; 0x06
   11a6a:	15 83       	std	Z+5, r17	; 0x05
   11a6c:	04 83       	std	Z+4, r16	; 0x04
   11a6e:	81 e2       	ldi	r24, 0x21	; 33
   11a70:	90 e1       	ldi	r25, 0x10	; 16
   11a72:	a0 e0       	ldi	r26, 0x00	; 0
   11a74:	81 83       	std	Z+1, r24	; 0x01
   11a76:	92 83       	std	Z+2, r25	; 0x02
   11a78:	a3 83       	std	Z+3, r26	; 0x03
   11a7a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   11a7e:	02 c0       	rjmp	.+4      	; 0x11a84 <gpib_read_str+0x136>
   11a80:	00 e0       	ldi	r16, 0x00	; 0
    }
    return(ind);
}
   11a82:	10 e0       	ldi	r17, 0x00	; 0
   11a84:	c8 01       	movw	r24, r16
   11a86:	cd b7       	in	r28, 0x3d	; 61
   11a88:	de b7       	in	r29, 0x3e	; 62
   11a8a:	27 96       	adiw	r28, 0x07	; 7
   11a8c:	ea e0       	ldi	r30, 0x0A	; 10
   11a8e:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

00011a92 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11a92:	a7 e0       	ldi	r26, 0x07	; 7
   11a94:	b0 e0       	ldi	r27, 0x00	; 0
   11a96:	ef e4       	ldi	r30, 0x4F	; 79
   11a98:	fd e8       	ldi	r31, 0x8D	; 141
   11a9a:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
   11a9e:	8b 01       	movw	r16, r22
   11aa0:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11aa2:	fa 01       	movw	r30, r20
   11aa4:	20 81       	ld	r18, Z
   11aa6:	31 81       	ldd	r19, Z+1	; 0x01
   11aa8:	22 27       	eor	r18, r18
   11aaa:	31 83       	std	Z+1, r19	; 0x01
   11aac:	20 83       	st	Z, r18

    if(!size)
   11aae:	67 2b       	or	r22, r23
   11ab0:	21 f0       	breq	.+8      	; 0x11aba <gpib_write_str+0x28>
   11ab2:	6c 01       	movw	r12, r24
   11ab4:	c0 e0       	ldi	r28, 0x00	; 0
   11ab6:	d0 e0       	ldi	r29, 0x00	; 0
   11ab8:	35 c0       	rjmp	.+106    	; 0x11b24 <gpib_write_str+0x92>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11aba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11abe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ac2:	81 72       	andi	r24, 0x21	; 33
   11ac4:	91 70       	andi	r25, 0x01	; 1
   11ac6:	89 2b       	or	r24, r25
   11ac8:	09 f4       	brne	.+2      	; 0x11acc <gpib_write_str+0x3a>
   11aca:	4f c0       	rjmp	.+158    	; 0x11b6a <gpib_write_str+0xd8>
            printf("gpib_write_str: size = 0\n");
   11acc:	87 e0       	ldi	r24, 0x07	; 7
   11ace:	90 e1       	ldi	r25, 0x10	; 16
   11ad0:	a0 e0       	ldi	r26, 0x00	; 0
   11ad2:	ed b7       	in	r30, 0x3d	; 61
   11ad4:	fe b7       	in	r31, 0x3e	; 62
   11ad6:	81 83       	std	Z+1, r24	; 0x01
   11ad8:	92 83       	std	Z+2, r25	; 0x02
   11ada:	a3 83       	std	Z+3, r26	; 0x03
   11adc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   11ae0:	44 c0       	rjmp	.+136    	; 0x11b6a <gpib_write_str+0xd8>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11ae2:	21 96       	adiw	r28, 0x01	; 1
   11ae4:	f6 01       	movw	r30, r12
   11ae6:	81 91       	ld	r24, Z+
   11ae8:	6f 01       	movw	r12, r30
   11aea:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   11aec:	f7 01       	movw	r30, r14
   11aee:	20 81       	ld	r18, Z
   11af0:	31 81       	ldd	r19, Z+1	; 0x01
   11af2:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   11af4:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11af6:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   11af8:	19 c0       	rjmp	.+50     	; 0x11b2c <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   11afa:	16 db       	rcall	.-2516   	; 0x11128 <gpib_write_byte>
   11afc:	5c 01       	movw	r10, r24
   11afe:	aa 24       	eor	r10, r10
   11b00:	f0 ed       	ldi	r31, 0xD0	; 208
   11b02:	bf 22       	and	r11, r31
   11b04:	f7 01       	movw	r30, r14
   11b06:	20 81       	ld	r18, Z
   11b08:	31 81       	ldd	r19, Z+1	; 0x01
   11b0a:	2a 29       	or	r18, r10
   11b0c:	3b 29       	or	r19, r11
   11b0e:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11b10:	20 83       	st	Z, r18
   11b12:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11b16:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11b1a:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11b1c:	14 df       	rcall	.-472    	; 0x11946 <gpib_decode>
   11b1e:	a1 14       	cp	r10, r1
   11b20:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   11b22:	49 f4       	brne	.+18     	; 0x11b36 <gpib_write_str+0xa4>
   11b24:	c0 17       	cp	r28, r16
   11b26:	d1 07       	cpc	r29, r17
   11b28:	e4 f2       	brlt	.-72     	; 0x11ae2 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11b2a:	05 c0       	rjmp	.+10     	; 0x11b36 <gpib_write_str+0xa4>
   11b2c:	0c 17       	cp	r16, r28
   11b2e:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   11b30:	21 f7       	brne	.-56     	; 0x11afa <gpib_write_str+0x68>
   11b32:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   11b34:	e2 cf       	rjmp	.-60     	; 0x11afa <gpib_write_str+0x68>
   11b36:	c0 17       	cp	r28, r16
   11b38:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11b3a:	c9 f0       	breq	.+50     	; 0x11b6e <gpib_write_str+0xdc>
   11b3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b40:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b44:	81 72       	andi	r24, 0x21	; 33
   11b46:	91 70       	andi	r25, 0x01	; 1
   11b48:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11b4a:	89 f0       	breq	.+34     	; 0x11b6e <gpib_write_str+0xdc>
   11b4c:	ed b7       	in	r30, 0x3d	; 61
   11b4e:	fe b7       	in	r31, 0x3e	; 62
   11b50:	17 83       	std	Z+7, r17	; 0x07
   11b52:	06 83       	std	Z+6, r16	; 0x06
   11b54:	d5 83       	std	Z+5, r29	; 0x05
   11b56:	c4 83       	std	Z+4, r28	; 0x04
   11b58:	8f ed       	ldi	r24, 0xDF	; 223
   11b5a:	9f e0       	ldi	r25, 0x0F	; 15
   11b5c:	a0 e0       	ldi	r26, 0x00	; 0
   11b5e:	81 83       	std	Z+1, r24	; 0x01
   11b60:	92 83       	std	Z+2, r25	; 0x02
   11b62:	a3 83       	std	Z+3, r26	; 0x03
   11b64:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   11b68:	02 c0       	rjmp	.+4      	; 0x11b6e <gpib_write_str+0xdc>
   11b6a:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   11b6c:	d0 e0       	ldi	r29, 0x00	; 0
   11b6e:	ce 01       	movw	r24, r28
   11b70:	cd b7       	in	r28, 0x3d	; 61
   11b72:	de b7       	in	r29, 0x3e	; 62
   11b74:	27 96       	adiw	r28, 0x07	; 7
   11b76:	ea e0       	ldi	r30, 0x0A	; 10
   11b78:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

00011b7c <gpib_file_init>:
   11b7c:	ad b7       	in	r26, 0x3d	; 61
   11b7e:	be b7       	in	r27, 0x3e	; 62
   11b80:	17 97       	sbiw	r26, 0x07	; 7
   11b82:	0f b6       	in	r0, 0x3f	; 63
   11b84:	f8 94       	cli
   11b86:	be bf       	out	0x3e, r27	; 62
   11b88:	0f be       	out	0x3f, r0	; 63
   11b8a:	ad bf       	out	0x3d, r26	; 61
   11b8c:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11b90:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   11b94:	88 eb       	ldi	r24, 0xB8	; 184
   11b96:	91 e0       	ldi	r25, 0x01	; 1
   11b98:	0e 94 bc 9c 	call	0x13978	; 0x13978 <Read_Config>
   11b9c:	18 16       	cp	r1, r24
   11b9e:	19 06       	cpc	r1, r25
   11ba0:	8c f4       	brge	.+34     	; 0x11bc4 <gpib_file_init+0x48>
   11ba2:	ed b7       	in	r30, 0x3d	; 61
   11ba4:	fe b7       	in	r31, 0x3e	; 62
   11ba6:	97 83       	std	Z+7, r25	; 0x07
   11ba8:	86 83       	std	Z+6, r24	; 0x06
   11baa:	88 eb       	ldi	r24, 0xB8	; 184
   11bac:	91 e0       	ldi	r25, 0x01	; 1
   11bae:	95 83       	std	Z+5, r25	; 0x05
   11bb0:	84 83       	std	Z+4, r24	; 0x04
   11bb2:	8c e5       	ldi	r24, 0x5C	; 92
   11bb4:	95 e1       	ldi	r25, 0x15	; 21
   11bb6:	a0 e0       	ldi	r26, 0x00	; 0
   11bb8:	81 83       	std	Z+1, r24	; 0x01
   11bba:	92 83       	std	Z+2, r25	; 0x02
   11bbc:	a3 83       	std	Z+3, r26	; 0x03
   11bbe:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   11bc2:	10 c0       	rjmp	.+32     	; 0x11be4 <gpib_file_init+0x68>
   11bc4:	89 2b       	or	r24, r25
   11bc6:	71 f0       	breq	.+28     	; 0x11be4 <gpib_file_init+0x68>
   11bc8:	88 eb       	ldi	r24, 0xB8	; 184
   11bca:	91 e0       	ldi	r25, 0x01	; 1
   11bcc:	ed b7       	in	r30, 0x3d	; 61
   11bce:	fe b7       	in	r31, 0x3e	; 62
   11bd0:	95 83       	std	Z+5, r25	; 0x05
   11bd2:	84 83       	std	Z+4, r24	; 0x04
   11bd4:	8b e4       	ldi	r24, 0x4B	; 75
   11bd6:	95 e1       	ldi	r25, 0x15	; 21
   11bd8:	a0 e0       	ldi	r26, 0x00	; 0
   11bda:	81 83       	std	Z+1, r24	; 0x01
   11bdc:	92 83       	std	Z+2, r25	; 0x02
   11bde:	a3 83       	std	Z+3, r26	; 0x03
   11be0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   11be4:	0e 94 87 9b 	call	0x1370e	; 0x1370e <set_Config_Defaults>
   11be8:	0e 94 a9 71 	call	0xe352	; 0xe352 <mmc_wp_status>
   11bec:	89 2b       	or	r24, r25
   11bee:	51 f0       	breq	.+20     	; 0x11c04 <gpib_file_init+0x88>
   11bf0:	82 e3       	ldi	r24, 0x32	; 50
   11bf2:	95 e1       	ldi	r25, 0x15	; 21
   11bf4:	a0 e0       	ldi	r26, 0x00	; 0
   11bf6:	ed b7       	in	r30, 0x3d	; 61
   11bf8:	fe b7       	in	r31, 0x3e	; 62
   11bfa:	81 83       	std	Z+1, r24	; 0x01
   11bfc:	92 83       	std	Z+2, r25	; 0x02
   11bfe:	a3 83       	std	Z+3, r26	; 0x03
   11c00:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   11c04:	ad b7       	in	r26, 0x3d	; 61
   11c06:	be b7       	in	r27, 0x3e	; 62
   11c08:	17 96       	adiw	r26, 0x07	; 7
   11c0a:	0f b6       	in	r0, 0x3f	; 63
   11c0c:	f8 94       	cli
   11c0e:	be bf       	out	0x3e, r27	; 62
   11c10:	0f be       	out	0x3f, r0	; 63
   11c12:	ad bf       	out	0x3d, r26	; 61
   11c14:	08 95       	ret

00011c16 <SS80_is_MLA>:
   11c16:	40 e2       	ldi	r20, 0x20	; 32
   11c18:	50 e0       	ldi	r21, 0x00	; 0
   11c1a:	bc 01       	movw	r22, r24
   11c1c:	83 e0       	ldi	r24, 0x03	; 3
   11c1e:	90 e0       	ldi	r25, 0x00	; 0
   11c20:	0e 94 ed 98 	call	0x131da	; 0x131da <find_device>
   11c24:	8f 3f       	cpi	r24, 0xFF	; 255
   11c26:	2f ef       	ldi	r18, 0xFF	; 255
   11c28:	92 07       	cpc	r25, r18
   11c2a:	19 f0       	breq	.+6      	; 0x11c32 <SS80_is_MLA+0x1c>
   11c2c:	0c 94 17 99 	jmp	0x1322e	; 0x1322e <set_active_device>
   11c30:	08 95       	ret
   11c32:	80 e0       	ldi	r24, 0x00	; 0
   11c34:	90 e0       	ldi	r25, 0x00	; 0
   11c36:	08 95       	ret

00011c38 <SS80_is_MTA>:
   11c38:	40 e4       	ldi	r20, 0x40	; 64
   11c3a:	50 e0       	ldi	r21, 0x00	; 0
   11c3c:	bc 01       	movw	r22, r24
   11c3e:	83 e0       	ldi	r24, 0x03	; 3
   11c40:	90 e0       	ldi	r25, 0x00	; 0
   11c42:	0e 94 ed 98 	call	0x131da	; 0x131da <find_device>
   11c46:	8f 3f       	cpi	r24, 0xFF	; 255
   11c48:	2f ef       	ldi	r18, 0xFF	; 255
   11c4a:	92 07       	cpc	r25, r18
   11c4c:	19 f0       	breq	.+6      	; 0x11c54 <SS80_is_MTA+0x1c>
   11c4e:	0c 94 17 99 	jmp	0x1322e	; 0x1322e <set_active_device>
   11c52:	08 95       	ret
   11c54:	80 e0       	ldi	r24, 0x00	; 0
   11c56:	90 e0       	ldi	r25, 0x00	; 0
   11c58:	08 95       	ret

00011c5a <SS80_is_MSA>:
   11c5a:	40 e6       	ldi	r20, 0x60	; 96
   11c5c:	50 e0       	ldi	r21, 0x00	; 0
   11c5e:	bc 01       	movw	r22, r24
   11c60:	83 e0       	ldi	r24, 0x03	; 3
   11c62:	90 e0       	ldi	r25, 0x00	; 0
   11c64:	0e 94 ed 98 	call	0x131da	; 0x131da <find_device>
   11c68:	8f 3f       	cpi	r24, 0xFF	; 255
   11c6a:	2f ef       	ldi	r18, 0xFF	; 255
   11c6c:	92 07       	cpc	r25, r18
   11c6e:	19 f0       	breq	.+6      	; 0x11c76 <SS80_is_MSA+0x1c>
   11c70:	0c 94 17 99 	jmp	0x1322e	; 0x1322e <set_active_device>
   11c74:	08 95       	ret
   11c76:	80 e0       	ldi	r24, 0x00	; 0
   11c78:	90 e0       	ldi	r25, 0x00	; 0
   11c7a:	08 95       	ret

00011c7c <AMIGO_is_MLA>:
   11c7c:	40 e2       	ldi	r20, 0x20	; 32
   11c7e:	50 e0       	ldi	r21, 0x00	; 0
   11c80:	bc 01       	movw	r22, r24
   11c82:	81 e0       	ldi	r24, 0x01	; 1
   11c84:	90 e0       	ldi	r25, 0x00	; 0
   11c86:	0e 94 ed 98 	call	0x131da	; 0x131da <find_device>
   11c8a:	8f 3f       	cpi	r24, 0xFF	; 255
   11c8c:	2f ef       	ldi	r18, 0xFF	; 255
   11c8e:	92 07       	cpc	r25, r18
   11c90:	19 f0       	breq	.+6      	; 0x11c98 <AMIGO_is_MLA+0x1c>
   11c92:	0c 94 17 99 	jmp	0x1322e	; 0x1322e <set_active_device>
   11c96:	08 95       	ret
   11c98:	80 e0       	ldi	r24, 0x00	; 0
   11c9a:	90 e0       	ldi	r25, 0x00	; 0
   11c9c:	08 95       	ret

00011c9e <AMIGO_is_MTA>:
   11c9e:	40 e4       	ldi	r20, 0x40	; 64
   11ca0:	50 e0       	ldi	r21, 0x00	; 0
   11ca2:	bc 01       	movw	r22, r24
   11ca4:	81 e0       	ldi	r24, 0x01	; 1
   11ca6:	90 e0       	ldi	r25, 0x00	; 0
   11ca8:	0e 94 ed 98 	call	0x131da	; 0x131da <find_device>
   11cac:	8f 3f       	cpi	r24, 0xFF	; 255
   11cae:	2f ef       	ldi	r18, 0xFF	; 255
   11cb0:	92 07       	cpc	r25, r18
   11cb2:	19 f0       	breq	.+6      	; 0x11cba <AMIGO_is_MTA+0x1c>
   11cb4:	0c 94 17 99 	jmp	0x1322e	; 0x1322e <set_active_device>
   11cb8:	08 95       	ret
   11cba:	80 e0       	ldi	r24, 0x00	; 0
   11cbc:	90 e0       	ldi	r25, 0x00	; 0
   11cbe:	08 95       	ret

00011cc0 <AMIGO_is_MSA>:
   11cc0:	40 e6       	ldi	r20, 0x60	; 96
   11cc2:	50 e0       	ldi	r21, 0x00	; 0
   11cc4:	bc 01       	movw	r22, r24
   11cc6:	81 e0       	ldi	r24, 0x01	; 1
   11cc8:	90 e0       	ldi	r25, 0x00	; 0
   11cca:	0e 94 ed 98 	call	0x131da	; 0x131da <find_device>
   11cce:	8f 3f       	cpi	r24, 0xFF	; 255
   11cd0:	2f ef       	ldi	r18, 0xFF	; 255
   11cd2:	92 07       	cpc	r25, r18
   11cd4:	19 f0       	breq	.+6      	; 0x11cdc <AMIGO_is_MSA+0x1c>
   11cd6:	0c 94 17 99 	jmp	0x1322e	; 0x1322e <set_active_device>
   11cda:	08 95       	ret
   11cdc:	80 e0       	ldi	r24, 0x00	; 0
   11cde:	90 e0       	ldi	r25, 0x00	; 0
   11ce0:	08 95       	ret

00011ce2 <PRINTER_is_MLA>:
   11ce2:	40 e2       	ldi	r20, 0x20	; 32
   11ce4:	50 e0       	ldi	r21, 0x00	; 0
   11ce6:	bc 01       	movw	r22, r24
   11ce8:	84 e0       	ldi	r24, 0x04	; 4
   11cea:	90 e0       	ldi	r25, 0x00	; 0
   11cec:	0e 94 ed 98 	call	0x131da	; 0x131da <find_device>
   11cf0:	8f 3f       	cpi	r24, 0xFF	; 255
   11cf2:	2f ef       	ldi	r18, 0xFF	; 255
   11cf4:	92 07       	cpc	r25, r18
   11cf6:	19 f0       	breq	.+6      	; 0x11cfe <PRINTER_is_MLA+0x1c>
   11cf8:	0c 94 17 99 	jmp	0x1322e	; 0x1322e <set_active_device>
   11cfc:	08 95       	ret
   11cfe:	80 e0       	ldi	r24, 0x00	; 0
   11d00:	90 e0       	ldi	r25, 0x00	; 0
   11d02:	08 95       	ret

00011d04 <PRINTER_is_MTA>:
   11d04:	40 e4       	ldi	r20, 0x40	; 64
   11d06:	50 e0       	ldi	r21, 0x00	; 0
   11d08:	bc 01       	movw	r22, r24
   11d0a:	84 e0       	ldi	r24, 0x04	; 4
   11d0c:	90 e0       	ldi	r25, 0x00	; 0
   11d0e:	0e 94 ed 98 	call	0x131da	; 0x131da <find_device>
   11d12:	8f 3f       	cpi	r24, 0xFF	; 255
   11d14:	2f ef       	ldi	r18, 0xFF	; 255
   11d16:	92 07       	cpc	r25, r18
   11d18:	19 f0       	breq	.+6      	; 0x11d20 <PRINTER_is_MTA+0x1c>
   11d1a:	0c 94 17 99 	jmp	0x1322e	; 0x1322e <set_active_device>
   11d1e:	08 95       	ret
   11d20:	80 e0       	ldi	r24, 0x00	; 0
   11d22:	90 e0       	ldi	r25, 0x00	; 0
   11d24:	08 95       	ret

00011d26 <gpib_init_devices>:
   11d26:	cb d8       	rcall	.-3690   	; 0x10ebe <gpib_bus_init>
   11d28:	f7 d8       	rcall	.-3602   	; 0x10f18 <gpib_state_init>
   11d2a:	0e 94 ca ac 	call	0x15994	; 0x15994 <SS80_init>
   11d2e:	0e 94 59 b2 	call	0x164b2	; 0x164b2 <amigo_init>
   11d32:	0c 94 8e bd 	jmp	0x17b1c	; 0x17b1c <printer_close>
   11d36:	08 95       	ret

00011d38 <gpib_trace_task>:
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11d38:	0f 93       	push	r16
   11d3a:	1f 93       	push	r17
   11d3c:	cf 93       	push	r28
   11d3e:	df 93       	push	r29
   11d40:	00 d0       	rcall	.+0      	; 0x11d42 <gpib_trace_task+0xa>
   11d42:	00 d0       	rcall	.+0      	; 0x11d44 <gpib_trace_task+0xc>
   11d44:	1f 92       	push	r1
   11d46:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11d48:	00 97       	sbiw	r24, 0x00	; 0
   11d4a:	09 f4       	brne	.+2      	; 0x11d4e <gpib_trace_task+0x16>
   11d4c:	44 c0       	rjmp	.+136    	; 0x11dd6 <gpib_trace_task+0x9e>
   11d4e:	fc 01       	movw	r30, r24
   11d50:	20 81       	ld	r18, Z
   11d52:	22 23       	and	r18, r18
   11d54:	09 f4       	brne	.+2      	; 0x11d58 <gpib_trace_task+0x20>
   11d56:	3f c0       	rjmp	.+126    	; 0x11dd6 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11d58:	0e 94 85 33 	call	0x670a	; 0x670a <skipspaces>
   11d5c:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11d5e:	ed b7       	in	r30, 0x3d	; 61
   11d60:	fe b7       	in	r31, 0x3e	; 62
   11d62:	95 83       	std	Z+5, r25	; 0x05
   11d64:	84 83       	std	Z+4, r24	; 0x04
   11d66:	88 e1       	ldi	r24, 0x18	; 24
   11d68:	95 e1       	ldi	r25, 0x15	; 21
   11d6a:	a0 e0       	ldi	r26, 0x00	; 0
   11d6c:	81 83       	std	Z+1, r24	; 0x01
   11d6e:	92 83       	std	Z+2, r25	; 0x02
   11d70:	a3 83       	std	Z+3, r26	; 0x03
   11d72:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        if(detail)
   11d76:	20 97       	sbiw	r28, 0x00	; 0
   11d78:	51 f0       	breq	.+20     	; 0x11d8e <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11d7a:	8d ee       	ldi	r24, 0xED	; 237
   11d7c:	94 e1       	ldi	r25, 0x14	; 20
   11d7e:	a0 e0       	ldi	r26, 0x00	; 0
   11d80:	ed b7       	in	r30, 0x3d	; 61
   11d82:	fe b7       	in	r31, 0x3e	; 62
   11d84:	81 83       	std	Z+1, r24	; 0x01
   11d86:	92 83       	std	Z+2, r25	; 0x02
   11d88:	a3 83       	std	Z+3, r26	; 0x03
   11d8a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        printf("Press ANY key to exit\n");
   11d8e:	86 ed       	ldi	r24, 0xD6	; 214
   11d90:	94 e1       	ldi	r25, 0x14	; 20
   11d92:	a0 e0       	ldi	r26, 0x00	; 0
   11d94:	ed b7       	in	r30, 0x3d	; 61
   11d96:	fe b7       	in	r31, 0x3e	; 62
   11d98:	81 83       	std	Z+1, r24	; 0x01
   11d9a:	92 83       	std	Z+2, r25	; 0x02
   11d9c:	a3 83       	std	Z+3, r26	; 0x03
   11d9e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11da2:	67 e0       	ldi	r22, 0x07	; 7
   11da4:	79 e0       	ldi	r23, 0x09	; 9
   11da6:	c8 01       	movw	r24, r16
   11da8:	0e 94 dd 7f 	call	0xffba	; 0xffba <fopen>
   11dac:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <gpib_log_fp+0x1>
   11db0:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11db4:	89 2b       	or	r24, r25
   11db6:	b9 f4       	brne	.+46     	; 0x11de6 <gpib_trace_task+0xae>
        {
            perror("open failed");
   11db8:	8f e9       	ldi	r24, 0x9F	; 159
   11dba:	9d e0       	ldi	r25, 0x0D	; 13
   11dbc:	0e 94 0e 7a 	call	0xf41c	; 0xf41c <perror>
            printf("exiting...\n");
   11dc0:	8a ec       	ldi	r24, 0xCA	; 202
   11dc2:	94 e1       	ldi	r25, 0x14	; 20
   11dc4:	a0 e0       	ldi	r26, 0x00	; 0
   11dc6:	ed b7       	in	r30, 0x3d	; 61
   11dc8:	fe b7       	in	r31, 0x3e	; 62
   11dca:	81 83       	std	Z+1, r24	; 0x01
   11dcc:	92 83       	std	Z+2, r25	; 0x02
   11dce:	a3 83       	std	Z+3, r26	; 0x03
   11dd0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            return;
   11dd4:	3d c0       	rjmp	.+122    	; 0x11e50 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11dd6:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
   11dda:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
   11dde:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <gpib_log_fp+0x1>
   11de2:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <gpib_log_fp>

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();

    gpib_decode_header(gpib_log_fp);
   11de6:	9f df       	rcall	.-194    	; 0x11d26 <gpib_init_devices>
   11de8:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <gpib_log_fp>
   11dec:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <gpib_log_fp+0x1>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11df0:	2b db       	rcall	.-2474   	; 0x11448 <gpib_decode_header>
   11df2:	80 e0       	ldi	r24, 0x00	; 0
   11df4:	0e 94 bb 2b 	call	0x5776	; 0x5776 <uart_keyhit>
            break;

        ch = gpib_read_byte(detail);
   11df8:	89 2b       	or	r24, r25
   11dfa:	31 f4       	brne	.+12     	; 0x11e08 <gpib_trace_task+0xd0>
        if(!detail)
   11dfc:	ce 01       	movw	r24, r28
   11dfe:	b8 dc       	rcall	.-1680   	; 0x11770 <gpib_read_byte>
            gpib_decode(ch);
   11e00:	20 97       	sbiw	r28, 0x00	; 0
   11e02:	b9 f7       	brne	.-18     	; 0x11df2 <gpib_trace_task+0xba>
   11e04:	a0 dd       	rcall	.-1216   	; 0x11946 <gpib_decode>
    }

    printf("Done\n");
   11e06:	f5 cf       	rjmp	.-22     	; 0x11df2 <gpib_trace_task+0xba>
   11e08:	84 ec       	ldi	r24, 0xC4	; 196
   11e0a:	94 e1       	ldi	r25, 0x14	; 20
   11e0c:	a0 e0       	ldi	r26, 0x00	; 0
   11e0e:	ed b7       	in	r30, 0x3d	; 61
   11e10:	fe b7       	in	r31, 0x3e	; 62
   11e12:	81 83       	std	Z+1, r24	; 0x01
   11e14:	92 83       	std	Z+2, r25	; 0x02
   11e16:	a3 83       	std	Z+3, r26	; 0x03
   11e18:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    if(gpib_log_fp)
   11e1c:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <gpib_log_fp>
   11e20:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <gpib_log_fp+0x1>
   11e24:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(gpib_log_fp);
   11e26:	a1 f0       	breq	.+40     	; 0x11e50 <gpib_trace_task+0x118>
   11e28:	0e 94 87 7e 	call	0xfd0e	; 0xfd0e <fclose>
        printf("Capturing Closed\n");
   11e2c:	82 eb       	ldi	r24, 0xB2	; 178
   11e2e:	94 e1       	ldi	r25, 0x14	; 20
   11e30:	a0 e0       	ldi	r26, 0x00	; 0
   11e32:	ed b7       	in	r30, 0x3d	; 61
   11e34:	fe b7       	in	r31, 0x3e	; 62
   11e36:	81 83       	std	Z+1, r24	; 0x01
   11e38:	92 83       	std	Z+2, r25	; 0x02
   11e3a:	a3 83       	std	Z+3, r26	; 0x03
   11e3c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        gpib_log_fp = stdout;
   11e40:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
   11e44:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
   11e48:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <gpib_log_fp+0x1>
   11e4c:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <gpib_log_fp>
    }
}
   11e50:	cd b7       	in	r28, 0x3d	; 61
   11e52:	de b7       	in	r29, 0x3e	; 62
   11e54:	25 96       	adiw	r28, 0x05	; 5
   11e56:	e4 e0       	ldi	r30, 0x04	; 4
   11e58:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00011e5c <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11e5c:	ef 92       	push	r14
   11e5e:	ff 92       	push	r15
   11e60:	0f 93       	push	r16
   11e62:	1f 93       	push	r17
   11e64:	cf 93       	push	r28
   11e66:	df 93       	push	r29
   11e68:	00 d0       	rcall	.+0      	; 0x11e6a <gpib_error_test+0xe>
   11e6a:	1f 92       	push	r1
   11e6c:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11e6e:	ec 01       	movw	r28, r24
   11e70:	cc 27       	eor	r28, r28
   11e72:	d0 7d       	andi	r29, 0xD0	; 208
   11e74:	20 97       	sbiw	r28, 0x00	; 0
   11e76:	61 f0       	breq	.+24     	; 0x11e90 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11e78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e7c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e80:	8d 72       	andi	r24, 0x2D	; 45
   11e82:	99 27       	eor	r25, r25
   11e84:	87 01       	movw	r16, r14
   11e86:	00 27       	eor	r16, r16
   11e88:	10 71       	andi	r17, 0x10	; 16
   11e8a:	89 2b       	or	r24, r25
   11e8c:	59 f4       	brne	.+22     	; 0x11ea4 <gpib_error_test+0x48>
   11e8e:	17 c0       	rjmp	.+46     	; 0x11ebe <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11e90:	80 e0       	ldi	r24, 0x00	; 0
   11e92:	0e 94 bb 2b 	call	0x5776	; 0x5776 <uart_keyhit>
   11e96:	89 2b       	or	r24, r25
   11e98:	79 f7       	brne	.-34     	; 0x11e78 <gpib_error_test+0x1c>
   11e9a:	0e 94 b7 70 	call	0xe16e	; 0xe16e <mmc_ins_status>
   11e9e:	01 97       	sbiw	r24, 0x01	; 1
   11ea0:	59 f7       	brne	.-42     	; 0x11e78 <gpib_error_test+0x1c>
   11ea2:	62 c0       	rjmp	.+196    	; 0x11f68 <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11ea4:	01 15       	cp	r16, r1
   11ea6:	11 05       	cpc	r17, r1
   11ea8:	51 f0       	breq	.+20     	; 0x11ebe <gpib_error_test+0x62>
                printf("<IFC>\n");
   11eaa:	8b ea       	ldi	r24, 0xAB	; 171
   11eac:	94 e1       	ldi	r25, 0x14	; 20
   11eae:	a0 e0       	ldi	r26, 0x00	; 0
   11eb0:	ed b7       	in	r30, 0x3d	; 61
   11eb2:	fe b7       	in	r31, 0x3e	; 62
   11eb4:	81 83       	std	Z+1, r24	; 0x01
   11eb6:	92 83       	std	Z+2, r25	; 0x02
   11eb8:	a3 83       	std	Z+3, r26	; 0x03
   11eba:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11ebe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ec2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ec6:	8d 72       	andi	r24, 0x2D	; 45
   11ec8:	99 27       	eor	r25, r25
   11eca:	89 2b       	or	r24, r25
   11ecc:	c1 f0       	breq	.+48     	; 0x11efe <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11ece:	f6 fe       	sbrs	r15, 6
   11ed0:	0a c0       	rjmp	.+20     	; 0x11ee6 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11ed2:	80 ea       	ldi	r24, 0xA0	; 160
   11ed4:	94 e1       	ldi	r25, 0x14	; 20
   11ed6:	a0 e0       	ldi	r26, 0x00	; 0
   11ed8:	ed b7       	in	r30, 0x3d	; 61
   11eda:	fe b7       	in	r31, 0x3e	; 62
   11edc:	81 83       	std	Z+1, r24	; 0x01
   11ede:	92 83       	std	Z+2, r25	; 0x02
   11ee0:	a3 83       	std	Z+3, r26	; 0x03
   11ee2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11ee6:	d7 ff       	sbrs	r29, 7
   11ee8:	0a c0       	rjmp	.+20     	; 0x11efe <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11eea:	89 e9       	ldi	r24, 0x99	; 153
   11eec:	94 e1       	ldi	r25, 0x14	; 20
   11eee:	a0 e0       	ldi	r26, 0x00	; 0
   11ef0:	ed b7       	in	r30, 0x3d	; 61
   11ef2:	fe b7       	in	r31, 0x3e	; 62
   11ef4:	81 83       	std	Z+1, r24	; 0x01
   11ef6:	92 83       	std	Z+2, r25	; 0x02
   11ef8:	a3 83       	std	Z+3, r26	; 0x03
   11efa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        }

        if(uart_keyhit(0))
   11efe:	80 e0       	ldi	r24, 0x00	; 0
   11f00:	0e 94 bb 2b 	call	0x5776	; 0x5776 <uart_keyhit>
   11f04:	89 2b       	or	r24, r25
   11f06:	51 f0       	breq	.+20     	; 0x11f1c <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11f08:	8c e8       	ldi	r24, 0x8C	; 140
   11f0a:	94 e1       	ldi	r25, 0x14	; 20
   11f0c:	a0 e0       	ldi	r26, 0x00	; 0
   11f0e:	ed b7       	in	r30, 0x3d	; 61
   11f10:	fe b7       	in	r31, 0x3e	; 62
   11f12:	81 83       	std	Z+1, r24	; 0x01
   11f14:	92 83       	std	Z+2, r25	; 0x02
   11f16:	a3 83       	std	Z+3, r26	; 0x03
   11f18:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

        if( mmc_ins_status() != 1 )
   11f1c:	0e 94 b7 70 	call	0xe16e	; 0xe16e <mmc_ins_status>
   11f20:	01 97       	sbiw	r24, 0x01	; 1
   11f22:	51 f0       	breq	.+20     	; 0x11f38 <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11f24:	8b e7       	ldi	r24, 0x7B	; 123
   11f26:	94 e1       	ldi	r25, 0x14	; 20
   11f28:	a0 e0       	ldi	r26, 0x00	; 0
   11f2a:	ed b7       	in	r30, 0x3d	; 61
   11f2c:	fe b7       	in	r31, 0x3e	; 62
   11f2e:	81 83       	std	Z+1, r24	; 0x01
   11f30:	92 83       	std	Z+2, r25	; 0x02
   11f32:	a3 83       	std	Z+3, r26	; 0x03
   11f34:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

        if(val & IFC_FLAG)
   11f38:	01 15       	cp	r16, r1
   11f3a:	11 05       	cpc	r17, r1
        {
            gpib_init_devices();
   11f3c:	09 f0       	breq	.+2      	; 0x11f40 <gpib_error_test+0xe4>
        }

        if(uart_keyhit(0))
   11f3e:	f3 de       	rcall	.-538    	; 0x11d26 <gpib_init_devices>
   11f40:	80 e0       	ldi	r24, 0x00	; 0
   11f42:	0e 94 bb 2b 	call	0x5776	; 0x5776 <uart_keyhit>
        {
            gpib_init_devices();
   11f46:	89 2b       	or	r24, r25
   11f48:	11 f0       	breq	.+4      	; 0x11f4e <gpib_error_test+0xf2>
   11f4a:	ed de       	rcall	.-550    	; 0x11d26 <gpib_init_devices>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11f4c:	0b c0       	rjmp	.+22     	; 0x11f64 <gpib_error_test+0x108>
   11f4e:	0e 94 b7 70 	call	0xe16e	; 0xe16e <mmc_ins_status>
   11f52:	01 97       	sbiw	r24, 0x01	; 1
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11f54:	39 f4       	brne	.+14     	; 0x11f64 <gpib_error_test+0x108>
   11f56:	01 15       	cp	r16, r1
   11f58:	11 05       	cpc	r17, r1
        {
            while(GPIB_IO_RD(IFC) == 0)
   11f5a:	31 f0       	breq	.+12     	; 0x11f68 <gpib_error_test+0x10c>
   11f5c:	54 98       	cbi	0x0a, 4	; 10
   11f5e:	4c 9b       	sbis	0x09, 4	; 9
   11f60:	fd cf       	rjmp	.-6      	; 0x11f5c <gpib_error_test+0x100>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11f62:	02 c0       	rjmp	.+4      	; 0x11f68 <gpib_error_test+0x10c>
   11f64:	c1 e0       	ldi	r28, 0x01	; 1
                ;
        }
        return(val);
    }
    return(0);
}
   11f66:	d0 e0       	ldi	r29, 0x00	; 0
   11f68:	ce 01       	movw	r24, r28
   11f6a:	cd b7       	in	r28, 0x3d	; 61
   11f6c:	de b7       	in	r29, 0x3e	; 62
   11f6e:	23 96       	adiw	r28, 0x03	; 3
   11f70:	e6 e0       	ldi	r30, 0x06	; 6
   11f72:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00011f76 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11f76:	1f 93       	push	r17
   11f78:	cf 93       	push	r28
   11f7a:	df 93       	push	r29
   11f7c:	ec 01       	movw	r28, r24
   11f7e:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11f80:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11f84:	8f 35       	cpi	r24, 0x5F	; 95
   11f86:	91 f0       	breq	.+36     	; 0x11fac <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11f88:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11f8c:	90 e0       	ldi	r25, 0x00	; 0
   11f8e:	76 de       	rcall	.-788    	; 0x11c7c <AMIGO_is_MLA>
   11f90:	89 2b       	or	r24, r25
   11f92:	c9 f4       	brne	.+50     	; 0x11fc6 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11f94:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11f98:	90 e0       	ldi	r25, 0x00	; 0
   11f9a:	3d de       	rcall	.-902    	; 0x11c16 <SS80_is_MLA>
   11f9c:	89 2b       	or	r24, r25
   11f9e:	11 f5       	brne	.+68     	; 0x11fe4 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11fa0:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11fa4:	90 e0       	ldi	r25, 0x00	; 0
   11fa6:	9d de       	rcall	.-710    	; 0x11ce2 <PRINTER_is_MLA>
   11fa8:	89 2b       	or	r24, r25
   11faa:	59 f5       	brne	.+86     	; 0x12002 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11fac:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11fb0:	8f 33       	cpi	r24, 0x3F	; 63
   11fb2:	19 f4       	brne	.+6      	; 0x11fba <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11fb4:	80 e0       	ldi	r24, 0x00	; 0
   11fb6:	90 e0       	ldi	r25, 0x00	; 0

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11fb8:	2e c0       	rjmp	.+92     	; 0x12016 <GPIB_COMMANDS+0xa0>
   11fba:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11fbe:	90 e0       	ldi	r25, 0x00	; 0
   11fc0:	6e de       	rcall	.-804    	; 0x11c9e <AMIGO_is_MTA>
        {
            if(unread)
   11fc2:	89 2b       	or	r24, r25
   11fc4:	49 f0       	breq	.+18     	; 0x11fd8 <GPIB_COMMANDS+0x62>
                gpib_unread(val);
   11fc6:	11 23       	and	r17, r17
   11fc8:	11 f0       	breq	.+4      	; 0x11fce <GPIB_COMMANDS+0x58>
   11fca:	ce 01       	movw	r24, r28
            status = AMIGO_COMMANDS(secondary);
   11fcc:	61 d8       	rcall	.-3902   	; 0x11090 <gpib_unread>
   11fce:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
   11fd2:	0e 94 89 bc 	call	0x17912	; 0x17912 <AMIGO_COMMANDS>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11fd6:	1d c0       	rjmp	.+58     	; 0x12012 <GPIB_COMMANDS+0x9c>
   11fd8:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11fdc:	90 e0       	ldi	r25, 0x00	; 0
   11fde:	2c de       	rcall	.-936    	; 0x11c38 <SS80_is_MTA>
        {
            if(unread)
   11fe0:	89 2b       	or	r24, r25
   11fe2:	49 f0       	breq	.+18     	; 0x11ff6 <GPIB_COMMANDS+0x80>
                gpib_unread(val);
   11fe4:	11 23       	and	r17, r17
   11fe6:	11 f0       	breq	.+4      	; 0x11fec <GPIB_COMMANDS+0x76>
   11fe8:	ce 01       	movw	r24, r28
            status = SS80_COMMANDS(secondary);
   11fea:	52 d8       	rcall	.-3932   	; 0x11090 <gpib_unread>
   11fec:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
   11ff0:	0e 94 a5 b0 	call	0x1614a	; 0x1614a <SS80_COMMANDS>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11ff4:	0e c0       	rjmp	.+28     	; 0x12012 <GPIB_COMMANDS+0x9c>
   11ff6:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11ffa:	90 e0       	ldi	r25, 0x00	; 0
   11ffc:	83 de       	rcall	.-762    	; 0x11d04 <PRINTER_is_MTA>
        {
            if(unread)
   11ffe:	89 2b       	or	r24, r25
   12000:	c9 f2       	breq	.-78     	; 0x11fb4 <GPIB_COMMANDS+0x3e>
                gpib_unread(val);
   12002:	11 23       	and	r17, r17
   12004:	11 f0       	breq	.+4      	; 0x1200a <GPIB_COMMANDS+0x94>
   12006:	ce 01       	movw	r24, r28
            status = PRINTER_COMMANDS(secondary);
   12008:	43 d8       	rcall	.-3962   	; 0x11090 <gpib_unread>
   1200a:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
   1200e:	0e 94 02 bf 	call	0x17e04	; 0x17e04 <PRINTER_COMMANDS>
            secondary = 0;
   12012:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <secondary>
            return(status);
        }
    }
    return(0);
}
   12016:	df 91       	pop	r29
   12018:	cf 91       	pop	r28
   1201a:	1f 91       	pop	r17
   1201c:	08 95       	ret

0001201e <Send_Identify>:
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   1201e:	cf 92       	push	r12
   12020:	df 92       	push	r13
   12022:	ff 92       	push	r15
   12024:	0f 93       	push	r16
   12026:	1f 93       	push	r17
   12028:	cf 93       	push	r28
   1202a:	df 93       	push	r29
   1202c:	cd b7       	in	r28, 0x3d	; 61
   1202e:	de b7       	in	r29, 0x3e	; 62
   12030:	2b 97       	sbiw	r28, 0x0b	; 11
   12032:	0f b6       	in	r0, 0x3f	; 63
   12034:	f8 94       	cli
   12036:	de bf       	out	0x3e, r29	; 62
   12038:	0f be       	out	0x3f, r0	; 63
   1203a:	cd bf       	out	0x3d, r28	; 61
   1203c:	f8 2e       	mov	r15, r24
   1203e:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   12040:	80 e0       	ldi	r24, 0x00	; 0
   12042:	91 e0       	ldi	r25, 0x01	; 1
   12044:	9b 87       	std	Y+11, r25	; 0x0b
   12046:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   12048:	8b 01       	movw	r16, r22
   1204a:	20 e0       	ldi	r18, 0x00	; 0
   1204c:	30 e0       	ldi	r19, 0x00	; 0
   1204e:	42 e0       	ldi	r20, 0x02	; 2
   12050:	50 e0       	ldi	r21, 0x00	; 0
   12052:	60 e0       	ldi	r22, 0x00	; 0
   12054:	70 e0       	ldi	r23, 0x00	; 0
   12056:	ce 01       	movw	r24, r28
   12058:	08 96       	adiw	r24, 0x08	; 8
   1205a:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   1205e:	ae 01       	movw	r20, r28
   12060:	46 5f       	subi	r20, 0xF6	; 246
   12062:	5f 4f       	sbci	r21, 0xFF	; 255
   12064:	62 e0       	ldi	r22, 0x02	; 2
   12066:	70 e0       	ldi	r23, 0x00	; 0
   12068:	ce 01       	movw	r24, r28
   1206a:	08 96       	adiw	r24, 0x08	; 8
   1206c:	12 dd       	rcall	.-1500   	; 0x11a92 <gpib_write_str>
   1206e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12072:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12076:	02 97       	sbiw	r24, 0x02	; 2
   12078:	79 f0       	breq	.+30     	; 0x12098 <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1207a:	25 72       	andi	r18, 0x25	; 37
   1207c:	33 27       	eor	r19, r19
   1207e:	23 2b       	or	r18, r19
   12080:	f9 f0       	breq	.+62     	; 0x120c0 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   12082:	ed b7       	in	r30, 0x3d	; 61
   12084:	fe b7       	in	r31, 0x3e	; 62
   12086:	d7 82       	std	Z+7, r13	; 0x07
   12088:	c6 82       	std	Z+6, r12	; 0x06
   1208a:	8f 2d       	mov	r24, r15
   1208c:	90 e0       	ldi	r25, 0x00	; 0
   1208e:	95 83       	std	Z+5, r25	; 0x05
   12090:	84 83       	std	Z+4, r24	; 0x04
   12092:	8a e5       	ldi	r24, 0x5A	; 90
   12094:	94 e1       	ldi	r25, 0x14	; 20
   12096:	0e c0       	rjmp	.+28     	; 0x120b4 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12098:	24 72       	andi	r18, 0x24	; 36
   1209a:	33 27       	eor	r19, r19
   1209c:	23 2b       	or	r18, r19
   1209e:	81 f0       	breq	.+32     	; 0x120c0 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   120a0:	ed b7       	in	r30, 0x3d	; 61
   120a2:	fe b7       	in	r31, 0x3e	; 62
   120a4:	d7 82       	std	Z+7, r13	; 0x07
   120a6:	c6 82       	std	Z+6, r12	; 0x06
   120a8:	8f 2d       	mov	r24, r15
   120aa:	90 e0       	ldi	r25, 0x00	; 0
   120ac:	95 83       	std	Z+5, r25	; 0x05
   120ae:	84 83       	std	Z+4, r24	; 0x04
   120b0:	80 e4       	ldi	r24, 0x40	; 64
   120b2:	94 e1       	ldi	r25, 0x14	; 20
   120b4:	a0 e0       	ldi	r26, 0x00	; 0
   120b6:	81 83       	std	Z+1, r24	; 0x01
   120b8:	92 83       	std	Z+2, r25	; 0x02
   120ba:	a3 83       	std	Z+3, r26	; 0x03
   120bc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
    return (status & ERROR_MASK);
   120c0:	8a 85       	ldd	r24, Y+10	; 0x0a
   120c2:	9b 85       	ldd	r25, Y+11	; 0x0b
   120c4:	88 27       	eor	r24, r24
   120c6:	90 7d       	andi	r25, 0xD0	; 208
}
   120c8:	2b 96       	adiw	r28, 0x0b	; 11
   120ca:	0f b6       	in	r0, 0x3f	; 63
   120cc:	f8 94       	cli
   120ce:	de bf       	out	0x3e, r29	; 62
   120d0:	0f be       	out	0x3f, r0	; 63
   120d2:	cd bf       	out	0x3d, r28	; 61
   120d4:	df 91       	pop	r29
   120d6:	cf 91       	pop	r28
   120d8:	1f 91       	pop	r17
   120da:	0f 91       	pop	r16
   120dc:	ff 90       	pop	r15
   120de:	df 90       	pop	r13
   120e0:	cf 90       	pop	r12
   120e2:	08 95       	ret

000120e4 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   120e4:	00 d0       	rcall	.+0      	; 0x120e6 <GPIB+0x2>
   120e6:	00 d0       	rcall	.+0      	; 0x120e8 <GPIB+0x4>
   120e8:	1f 92       	push	r1
   120ea:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   120ee:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   120f2:	85 30       	cpi	r24, 0x05	; 5
   120f4:	89 f4       	brne	.+34     	; 0x12118 <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   120f6:	27 71       	andi	r18, 0x17	; 23
   120f8:	33 27       	eor	r19, r19
   120fa:	23 2b       	or	r18, r19
   120fc:	51 f0       	breq	.+20     	; 0x12112 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   120fe:	88 e2       	ldi	r24, 0x28	; 40
   12100:	94 e1       	ldi	r25, 0x14	; 20
   12102:	a0 e0       	ldi	r26, 0x00	; 0
   12104:	ed b7       	in	r30, 0x3d	; 61
   12106:	fe b7       	in	r31, 0x3e	; 62
   12108:	81 83       	std	Z+1, r24	; 0x01
   1210a:	92 83       	std	Z+2, r25	; 0x02
   1210c:	a3 83       	std	Z+3, r26	; 0x03
   1210e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        spoll = 0;
   12112:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <spoll>
   12116:	a0 c0       	rjmp	.+320    	; 0x12258 <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   12118:	85 31       	cpi	r24, 0x15	; 21
   1211a:	39 f4       	brne	.+14     	; 0x1212a <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   1211c:	27 71       	andi	r18, 0x17	; 23
   1211e:	33 27       	eor	r19, r19
   12120:	23 2b       	or	r18, r19
   12122:	b9 f3       	breq	.-18     	; 0x12112 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   12124:	80 e1       	ldi	r24, 0x10	; 16
   12126:	94 e1       	ldi	r25, 0x14	; 20
   12128:	ec cf       	rjmp	.-40     	; 0x12102 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   1212a:	88 31       	cpi	r24, 0x18	; 24
   1212c:	d9 f4       	brne	.+54     	; 0x12164 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1212e:	26 70       	andi	r18, 0x06	; 6
   12130:	33 27       	eor	r19, r19
   12132:	23 2b       	or	r18, r19
   12134:	51 f0       	breq	.+20     	; 0x1214a <GPIB+0x66>
            printf("[SPE]\n");
   12136:	89 e0       	ldi	r24, 0x09	; 9
   12138:	94 e1       	ldi	r25, 0x14	; 20
   1213a:	a0 e0       	ldi	r26, 0x00	; 0
   1213c:	ed b7       	in	r30, 0x3d	; 61
   1213e:	fe b7       	in	r31, 0x3e	; 62
   12140:	81 83       	std	Z+1, r24	; 0x01
   12142:	92 83       	std	Z+2, r25	; 0x02
   12144:	a3 83       	std	Z+3, r26	; 0x03
   12146:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
        spoll = 1;
   1214a:	81 e0       	ldi	r24, 0x01	; 1
   1214c:	80 93 f7 1e 	sts	0x1EF7, r24	; 0x801ef7 <spoll>
        if(SS80_is_MTA(talking))
   12150:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   12154:	90 e0       	ldi	r25, 0x00	; 0
   12156:	70 dd       	rcall	.-1312   	; 0x11c38 <SS80_is_MTA>
   12158:	89 2b       	or	r24, r25
   1215a:	09 f4       	brne	.+2      	; 0x1215e <GPIB+0x7a>
   1215c:	7d c0       	rjmp	.+250    	; 0x12258 <GPIB+0x174>
        {
            return( SS80_Report() );
   1215e:	0e 94 5e ac 	call	0x158bc	; 0x158bc <SS80_Report>
   12162:	7c c0       	rjmp	.+248    	; 0x1225c <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   12164:	89 31       	cpi	r24, 0x19	; 25
   12166:	39 f4       	brne	.+14     	; 0x12176 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   12168:	26 70       	andi	r18, 0x06	; 6
   1216a:	33 27       	eor	r19, r19
   1216c:	23 2b       	or	r18, r19
   1216e:	89 f2       	breq	.-94     	; 0x12112 <GPIB+0x2e>
            printf("[SPD]\n");
   12170:	82 e0       	ldi	r24, 0x02	; 2
   12172:	94 e1       	ldi	r25, 0x14	; 20
   12174:	c6 cf       	rjmp	.-116    	; 0x12102 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   12176:	84 30       	cpi	r24, 0x04	; 4
   12178:	09 f0       	breq	.+2      	; 0x1217c <GPIB+0x98>
   1217a:	48 c0       	rjmp	.+144    	; 0x1220c <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1217c:	22 ff       	sbrs	r18, 2
   1217e:	0a c0       	rjmp	.+20     	; 0x12194 <GPIB+0xb0>
            printf("[SDC]\n");
   12180:	8b ef       	ldi	r24, 0xFB	; 251
   12182:	93 e1       	ldi	r25, 0x13	; 19
   12184:	a0 e0       	ldi	r26, 0x00	; 0
   12186:	ed b7       	in	r30, 0x3d	; 61
   12188:	fe b7       	in	r31, 0x3e	; 62
   1218a:	81 83       	std	Z+1, r24	; 0x01
   1218c:	92 83       	std	Z+2, r25	; 0x02
   1218e:	a3 83       	std	Z+3, r26	; 0x03
   12190:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   12194:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   12198:	90 e0       	ldi	r25, 0x00	; 0
   1219a:	3d dd       	rcall	.-1414   	; 0x11c16 <SS80_is_MLA>
   1219c:	89 2b       	or	r24, r25
   1219e:	d9 f0       	breq	.+54     	; 0x121d6 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121a4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121a8:	84 72       	andi	r24, 0x24	; 36
   121aa:	99 27       	eor	r25, r25
   121ac:	89 2b       	or	r24, r25
   121ae:	51 f0       	breq	.+20     	; 0x121c4 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   121b0:	8f ee       	ldi	r24, 0xEF	; 239
   121b2:	93 e1       	ldi	r25, 0x13	; 19
   121b4:	a0 e0       	ldi	r26, 0x00	; 0
   121b6:	ed b7       	in	r30, 0x3d	; 61
   121b8:	fe b7       	in	r31, 0x3e	; 62
   121ba:	81 83       	std	Z+1, r24	; 0x01
   121bc:	92 83       	std	Z+2, r25	; 0x02
   121be:	a3 83       	std	Z+3, r26	; 0x03
   121c0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   121c4:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   121c8:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   121cc:	85 81       	ldd	r24, Z+5	; 0x05
   121ce:	90 e0       	ldi	r25, 0x00	; 0
   121d0:	0e 94 2a ad 	call	0x15a54	; 0x15a54 <SS80_Selected_Device_Clear>
   121d4:	43 c0       	rjmp	.+134    	; 0x1225c <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   121d6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   121da:	90 e0       	ldi	r25, 0x00	; 0
   121dc:	4f dd       	rcall	.-1378   	; 0x11c7c <AMIGO_is_MLA>
   121de:	89 2b       	or	r24, r25
   121e0:	d9 f1       	breq	.+118    	; 0x12258 <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121e6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121ea:	84 72       	andi	r24, 0x24	; 36
   121ec:	99 27       	eor	r25, r25
   121ee:	89 2b       	or	r24, r25
   121f0:	51 f0       	breq	.+20     	; 0x12206 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   121f2:	82 ee       	ldi	r24, 0xE2	; 226
   121f4:	93 e1       	ldi	r25, 0x13	; 19
   121f6:	a0 e0       	ldi	r26, 0x00	; 0
   121f8:	ed b7       	in	r30, 0x3d	; 61
   121fa:	fe b7       	in	r31, 0x3e	; 62
   121fc:	81 83       	std	Z+1, r24	; 0x01
   121fe:	92 83       	std	Z+2, r25	; 0x02
   12200:	a3 83       	std	Z+3, r26	; 0x03
   12202:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
            return( amigo_cmd_clear() );
   12206:	0e 94 6f b7 	call	0x16ede	; 0x16ede <amigo_cmd_clear>
   1220a:	28 c0       	rjmp	.+80     	; 0x1225c <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   1220c:	84 31       	cpi	r24, 0x14	; 20
   1220e:	99 f4       	brne	.+38     	; 0x12236 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12210:	22 ff       	sbrs	r18, 2
   12212:	0a c0       	rjmp	.+20     	; 0x12228 <GPIB+0x144>
            printf("[DCL]\n");
   12214:	8b ed       	ldi	r24, 0xDB	; 219
   12216:	93 e1       	ldi	r25, 0x13	; 19
   12218:	a0 e0       	ldi	r26, 0x00	; 0
   1221a:	ed b7       	in	r30, 0x3d	; 61
   1221c:	fe b7       	in	r31, 0x3e	; 62
   1221e:	81 83       	std	Z+1, r24	; 0x01
   12220:	92 83       	std	Z+2, r25	; 0x02
   12222:	a3 83       	std	Z+3, r26	; 0x03
   12224:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   12228:	0e 94 1c ad 	call	0x15a38	; 0x15a38 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   1222c:	0e 94 6f b7 	call	0x16ede	; 0x16ede <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   12230:	0e 94 8e bd 	call	0x17b1c	; 0x17b1c <printer_close>
   12234:	11 c0       	rjmp	.+34     	; 0x12258 <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   12236:	25 71       	andi	r18, 0x15	; 21
   12238:	33 27       	eor	r19, r19
   1223a:	23 2b       	or	r18, r19
   1223c:	69 f0       	breq	.+26     	; 0x12258 <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   1223e:	90 e0       	ldi	r25, 0x00	; 0
   12240:	ed b7       	in	r30, 0x3d	; 61
   12242:	fe b7       	in	r31, 0x3e	; 62
   12244:	95 83       	std	Z+5, r25	; 0x05
   12246:	84 83       	std	Z+4, r24	; 0x04
   12248:	8a eb       	ldi	r24, 0xBA	; 186
   1224a:	93 e1       	ldi	r25, 0x13	; 19
   1224c:	a0 e0       	ldi	r26, 0x00	; 0
   1224e:	81 83       	std	Z+1, r24	; 0x01
   12250:	92 83       	std	Z+2, r25	; 0x02
   12252:	a3 83       	std	Z+3, r26	; 0x03
   12254:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    return(0);
   12258:	80 e0       	ldi	r24, 0x00	; 0
   1225a:	90 e0       	ldi	r25, 0x00	; 0
}
   1225c:	0f 90       	pop	r0
   1225e:	0f 90       	pop	r0
   12260:	0f 90       	pop	r0
   12262:	0f 90       	pop	r0
   12264:	0f 90       	pop	r0
   12266:	08 95       	ret

00012268 <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   12268:	cf 93       	push	r28
   1226a:	df 93       	push	r29
   1226c:	00 d0       	rcall	.+0      	; 0x1226e <GPIB_TALK+0x6>
   1226e:	00 d0       	rcall	.+0      	; 0x12270 <GPIB_TALK+0x8>
   12270:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   12272:	90 91 fa 1e 	lds	r25, 0x1EFA	; 0x801efa <talking>
   12276:	90 93 fd 1e 	sts	0x1EFD, r25	; 0x801efd <talking_last>
    talking = ch;
   1227a:	80 93 fa 1e 	sts	0x1EFA, r24	; 0x801efa <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   1227e:	8f 35       	cpi	r24, 0x5F	; 95
   12280:	79 f4       	brne	.+30     	; 0x122a0 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12282:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12286:	82 ff       	sbrs	r24, 2
   12288:	7f c0       	rjmp	.+254    	; 0x12388 <GPIB_TALK+0x120>
            printf("[UNT]\n");
   1228a:	87 e6       	ldi	r24, 0x67	; 103
   1228c:	93 e1       	ldi	r25, 0x13	; 19
   1228e:	a0 e0       	ldi	r26, 0x00	; 0
   12290:	ed b7       	in	r30, 0x3d	; 61
   12292:	fe b7       	in	r31, 0x3e	; 62
   12294:	81 83       	std	Z+1, r24	; 0x01
   12296:	92 83       	std	Z+2, r25	; 0x02
   12298:	a3 83       	std	Z+3, r26	; 0x03
   1229a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1229e:	74 c0       	rjmp	.+232    	; 0x12388 <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   122a0:	c8 2f       	mov	r28, r24
   122a2:	d0 e0       	ldi	r29, 0x00	; 0
   122a4:	ce 01       	movw	r24, r28
   122a6:	c8 dc       	rcall	.-1648   	; 0x11c38 <SS80_is_MTA>
   122a8:	89 2b       	or	r24, r25
   122aa:	e1 f0       	breq	.+56     	; 0x122e4 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   122ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122b4:	84 72       	andi	r24, 0x24	; 36
   122b6:	99 27       	eor	r25, r25
   122b8:	89 2b       	or	r24, r25
   122ba:	61 f0       	breq	.+24     	; 0x122d4 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   122bc:	ed b7       	in	r30, 0x3d	; 61
   122be:	fe b7       	in	r31, 0x3e	; 62
   122c0:	d5 83       	std	Z+5, r29	; 0x05
   122c2:	c4 83       	std	Z+4, r28	; 0x04
   122c4:	86 e5       	ldi	r24, 0x56	; 86
   122c6:	93 e1       	ldi	r25, 0x13	; 19
   122c8:	a0 e0       	ldi	r26, 0x00	; 0
   122ca:	81 83       	std	Z+1, r24	; 0x01
   122cc:	92 83       	std	Z+2, r25	; 0x02
   122ce:	a3 83       	std	Z+3, r26	; 0x03
   122d0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif

        if (spoll)
   122d4:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <spoll>
   122d8:	88 23       	and	r24, r24
   122da:	09 f4       	brne	.+2      	; 0x122de <GPIB_TALK+0x76>
   122dc:	55 c0       	rjmp	.+170    	; 0x12388 <GPIB_TALK+0x120>
        {
            SS80_Report();
   122de:	0e 94 5e ac 	call	0x158bc	; 0x158bc <SS80_Report>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   122e2:	52 c0       	rjmp	.+164    	; 0x12388 <GPIB_TALK+0x120>
   122e4:	ce 01       	movw	r24, r28
   122e6:	db dc       	rcall	.-1610   	; 0x11c9e <AMIGO_is_MTA>
   122e8:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   122ea:	81 f0       	breq	.+32     	; 0x1230c <GPIB_TALK+0xa4>
   122ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122f0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122f4:	84 72       	andi	r24, 0x24	; 36
   122f6:	99 27       	eor	r25, r25
   122f8:	89 2b       	or	r24, r25
   122fa:	09 f4       	brne	.+2      	; 0x122fe <GPIB_TALK+0x96>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   122fc:	45 c0       	rjmp	.+138    	; 0x12388 <GPIB_TALK+0x120>
   122fe:	ed b7       	in	r30, 0x3d	; 61
   12300:	fe b7       	in	r31, 0x3e	; 62
   12302:	d5 83       	std	Z+5, r29	; 0x05
   12304:	c4 83       	std	Z+4, r28	; 0x04
   12306:	84 e4       	ldi	r24, 0x44	; 68
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   12308:	93 e1       	ldi	r25, 0x13	; 19
   1230a:	38 c0       	rjmp	.+112    	; 0x1237c <GPIB_TALK+0x114>
   1230c:	ce 01       	movw	r24, r28
   1230e:	fa dc       	rcall	.-1548   	; 0x11d04 <PRINTER_is_MTA>
   12310:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12312:	79 f0       	breq	.+30     	; 0x12332 <GPIB_TALK+0xca>
   12314:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12318:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1231c:	84 72       	andi	r24, 0x24	; 36
   1231e:	99 27       	eor	r25, r25
   12320:	89 2b       	or	r24, r25
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   12322:	91 f1       	breq	.+100    	; 0x12388 <GPIB_TALK+0x120>
   12324:	ed b7       	in	r30, 0x3d	; 61
   12326:	fe b7       	in	r31, 0x3e	; 62
   12328:	d5 83       	std	Z+5, r29	; 0x05
   1232a:	c4 83       	std	Z+4, r28	; 0x04
   1232c:	80 e3       	ldi	r24, 0x30	; 48
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   1232e:	93 e1       	ldi	r25, 0x13	; 19
   12330:	25 c0       	rjmp	.+74     	; 0x1237c <GPIB_TALK+0x114>
   12332:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   12336:	90 e0       	ldi	r25, 0x00	; 0
   12338:	d4 dc       	rcall	.-1624   	; 0x11ce2 <PRINTER_is_MLA>
   1233a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1233e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12342:	89 2b       	or	r24, r25
   12344:	99 f0       	breq	.+38     	; 0x1236c <GPIB_TALK+0x104>
   12346:	24 72       	andi	r18, 0x24	; 36
   12348:	33 27       	eor	r19, r19
            printf("[PRINTER OPEN]\n");
   1234a:	23 2b       	or	r18, r19
   1234c:	51 f0       	breq	.+20     	; 0x12362 <GPIB_TALK+0xfa>
   1234e:	80 e2       	ldi	r24, 0x20	; 32
   12350:	93 e1       	ldi	r25, 0x13	; 19
   12352:	a0 e0       	ldi	r26, 0x00	; 0
   12354:	ed b7       	in	r30, 0x3d	; 61
   12356:	fe b7       	in	r31, 0x3e	; 62
   12358:	81 83       	std	Z+1, r24	; 0x01
   1235a:	92 83       	std	Z+2, r25	; 0x02
   1235c:	a3 83       	std	Z+3, r26	; 0x03
        printer_open(NULL);
   1235e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12362:	80 e0       	ldi	r24, 0x00	; 0
   12364:	90 e0       	ldi	r25, 0x00	; 0
   12366:	0e 94 e6 bd 	call	0x17bcc	; 0x17bcc <printer_open>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1236a:	0e c0       	rjmp	.+28     	; 0x12388 <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   1236c:	22 ff       	sbrs	r18, 2
   1236e:	0c c0       	rjmp	.+24     	; 0x12388 <GPIB_TALK+0x120>
   12370:	ed b7       	in	r30, 0x3d	; 61
   12372:	fe b7       	in	r31, 0x3e	; 62
   12374:	d5 83       	std	Z+5, r29	; 0x05
   12376:	c4 83       	std	Z+4, r28	; 0x04
   12378:	84 e1       	ldi	r24, 0x14	; 20
   1237a:	93 e1       	ldi	r25, 0x13	; 19
   1237c:	a0 e0       	ldi	r26, 0x00	; 0
   1237e:	81 83       	std	Z+1, r24	; 0x01
   12380:	92 83       	std	Z+2, r25	; 0x02
   12382:	a3 83       	std	Z+3, r26	; 0x03
#endif
    return(0);
}                                                 // Talk Address primary address group
   12384:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12388:	80 e0       	ldi	r24, 0x00	; 0
   1238a:	90 e0       	ldi	r25, 0x00	; 0
   1238c:	cd b7       	in	r28, 0x3d	; 61
   1238e:	de b7       	in	r29, 0x3e	; 62
   12390:	25 96       	adiw	r28, 0x05	; 5
   12392:	e2 e0       	ldi	r30, 0x02	; 2
   12394:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00012398 <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   12398:	a9 e0       	ldi	r26, 0x09	; 9
   1239a:	b0 e0       	ldi	r27, 0x00	; 0
   1239c:	e2 ed       	ldi	r30, 0xD2	; 210
   1239e:	f1 e9       	ldi	r31, 0x91	; 145
   123a0:	0c 94 f8 e3 	jmp	0x1c7f0	; 0x1c7f0 <__prologue_saves__+0x1e>
   123a4:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   123a6:	c8 2f       	mov	r28, r24
   123a8:	d0 e0       	ldi	r29, 0x00	; 0
   123aa:	ce 01       	movw	r24, r28
   123ac:	56 dc       	rcall	.-1876   	; 0x11c5a <SS80_is_MSA>
   123ae:	89 2b       	or	r24, r25
   123b0:	09 f1       	breq	.+66     	; 0x123f4 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   123b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   123b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   123ba:	84 72       	andi	r24, 0x24	; 36
   123bc:	99 27       	eor	r25, r25
   123be:	89 2b       	or	r24, r25
   123c0:	61 f0       	breq	.+24     	; 0x123da <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   123c2:	ed b7       	in	r30, 0x3d	; 61
   123c4:	fe b7       	in	r31, 0x3e	; 62
   123c6:	d5 83       	std	Z+5, r29	; 0x05
   123c8:	c4 83       	std	Z+4, r28	; 0x04
   123ca:	83 e0       	ldi	r24, 0x03	; 3
   123cc:	93 e1       	ldi	r25, 0x13	; 19
   123ce:	a0 e0       	ldi	r26, 0x00	; 0
   123d0:	81 83       	std	Z+1, r24	; 0x01
   123d2:	92 83       	std	Z+2, r25	; 0x02
   123d4:	a3 83       	std	Z+3, r26	; 0x03
   123d6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   123da:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   123de:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   123e2:	81 81       	ldd	r24, Z+1	; 0x01
   123e4:	90 e0       	ldi	r25, 0x00	; 0
   123e6:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   123ea:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   123ee:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   123f2:	25 c0       	rjmp	.+74     	; 0x1243e <GPIB_SECONDARY_ADDRESS+0xa6>
   123f4:	ce 01       	movw	r24, r28
   123f6:	64 dc       	rcall	.-1848   	; 0x11cc0 <AMIGO_is_MSA>
   123f8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   123fc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12400:	89 2b       	or	r24, r25
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12402:	11 f1       	breq	.+68     	; 0x12448 <GPIB_SECONDARY_ADDRESS+0xb0>
   12404:	c9 01       	movw	r24, r18
   12406:	84 72       	andi	r24, 0x24	; 36
   12408:	99 27       	eor	r25, r25
   1240a:	89 2b       	or	r24, r25
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   1240c:	61 f0       	breq	.+24     	; 0x12426 <GPIB_SECONDARY_ADDRESS+0x8e>
   1240e:	ed b7       	in	r30, 0x3d	; 61
   12410:	fe b7       	in	r31, 0x3e	; 62
   12412:	d5 83       	std	Z+5, r29	; 0x05
   12414:	c4 83       	std	Z+4, r28	; 0x04
   12416:	81 ef       	ldi	r24, 0xF1	; 241
   12418:	92 e1       	ldi	r25, 0x12	; 18
   1241a:	a0 e0       	ldi	r26, 0x00	; 0
   1241c:	81 83       	std	Z+1, r24	; 0x01
   1241e:	92 83       	std	Z+2, r25	; 0x02
   12420:	a3 83       	std	Z+3, r26	; 0x03
   12422:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   12426:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1242a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1242e:	81 81       	ldd	r24, Z+1	; 0x01
   12430:	90 e0       	ldi	r25, 0x00	; 0
   12432:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   12436:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1243a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1243e:	64 81       	ldd	r22, Z+4	; 0x04
   12440:	75 81       	ldd	r23, Z+5	; 0x05
   12442:	81 2f       	mov	r24, r17
   12444:	ec dd       	rcall	.-1064   	; 0x1201e <Send_Identify>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12446:	1d c0       	rjmp	.+58     	; 0x12482 <GPIB_SECONDARY_ADDRESS+0xea>
   12448:	c9 01       	movw	r24, r18
   1244a:	84 72       	andi	r24, 0x24	; 36
   1244c:	99 27       	eor	r25, r25
   1244e:	00 97       	sbiw	r24, 0x00	; 0
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12450:	c1 f0       	breq	.+48     	; 0x12482 <GPIB_SECONDARY_ADDRESS+0xea>
   12452:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   12456:	90 e0       	ldi	r25, 0x00	; 0
   12458:	ed b7       	in	r30, 0x3d	; 61
   1245a:	fe b7       	in	r31, 0x3e	; 62
   1245c:	91 87       	std	Z+9, r25	; 0x09
   1245e:	80 87       	std	Z+8, r24	; 0x08
   12460:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   12464:	90 e0       	ldi	r25, 0x00	; 0
   12466:	97 83       	std	Z+7, r25	; 0x07
   12468:	86 83       	std	Z+6, r24	; 0x06
   1246a:	d5 83       	std	Z+5, r29	; 0x05
   1246c:	c4 83       	std	Z+4, r28	; 0x04
   1246e:	8b ec       	ldi	r24, 0xCB	; 203
   12470:	92 e1       	ldi	r25, 0x12	; 18
   12472:	a0 e0       	ldi	r26, 0x00	; 0
   12474:	81 83       	std	Z+1, r24	; 0x01
   12476:	92 83       	std	Z+2, r25	; 0x02
   12478:	a3 83       	std	Z+3, r26	; 0x03
   1247a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   1247e:	80 e0       	ldi	r24, 0x00	; 0
}
   12480:	90 e0       	ldi	r25, 0x00	; 0
   12482:	cd b7       	in	r28, 0x3d	; 61
   12484:	de b7       	in	r29, 0x3e	; 62
   12486:	29 96       	adiw	r28, 0x09	; 9
   12488:	e3 e0       	ldi	r30, 0x03	; 3
   1248a:	0c 94 14 e4 	jmp	0x1c828	; 0x1c828 <__epilogue_restores__+0x1e>

0001248e <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   1248e:	00 d0       	rcall	.+0      	; 0x12490 <listen_cleanup+0x2>
   12490:	1f 92       	push	r1
    if(listening_last)
   12492:	60 91 f6 1e 	lds	r22, 0x1EF6	; 0x801ef6 <listening_last>
   12496:	66 23       	and	r22, r22
   12498:	e1 f0       	breq	.+56     	; 0x124d2 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   1249a:	70 e0       	ldi	r23, 0x00	; 0
   1249c:	40 e2       	ldi	r20, 0x20	; 32
   1249e:	50 e0       	ldi	r21, 0x00	; 0
   124a0:	84 e0       	ldi	r24, 0x04	; 4
   124a2:	90 e0       	ldi	r25, 0x00	; 0
   124a4:	9a d6       	rcall	.+3380   	; 0x131da <find_device>
        if(index == -1)
   124a6:	01 96       	adiw	r24, 0x01	; 1
   124a8:	a1 f0       	breq	.+40     	; 0x124d2 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   124aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   124ae:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   124b2:	84 72       	andi	r24, 0x24	; 36
   124b4:	99 27       	eor	r25, r25
   124b6:	89 2b       	or	r24, r25
   124b8:	51 f0       	breq	.+20     	; 0x124ce <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   124ba:	8a eb       	ldi	r24, 0xBA	; 186
   124bc:	92 e1       	ldi	r25, 0x12	; 18
   124be:	a0 e0       	ldi	r26, 0x00	; 0
   124c0:	ed b7       	in	r30, 0x3d	; 61
   124c2:	fe b7       	in	r31, 0x3e	; 62
   124c4:	81 83       	std	Z+1, r24	; 0x01
   124c6:	92 83       	std	Z+2, r25	; 0x02
   124c8:	a3 83       	std	Z+3, r26	; 0x03
   124ca:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        printer_close();
   124ce:	0e 94 8e bd 	call	0x17b1c	; 0x17b1c <printer_close>
    }
}
   124d2:	0f 90       	pop	r0
   124d4:	0f 90       	pop	r0
   124d6:	0f 90       	pop	r0
   124d8:	08 95       	ret

000124da <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   124da:	cf 93       	push	r28
   124dc:	df 93       	push	r29
   124de:	00 d0       	rcall	.+0      	; 0x124e0 <GPIB_LISTEN+0x6>
   124e0:	00 d0       	rcall	.+0      	; 0x124e2 <GPIB_LISTEN+0x8>
   124e2:	1f 92       	push	r1
   124e4:	c8 2f       	mov	r28, r24
    listening_last = listening;
   124e6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   124ea:	80 93 f6 1e 	sts	0x1EF6, r24	; 0x801ef6 <listening_last>
    listening = ch;
   124ee:	c0 93 fc 1e 	sts	0x1EFC, r28	; 0x801efc <listening>
    listen_cleanup();

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   124f2:	cd df       	rcall	.-102    	; 0x1248e <listen_cleanup>
   124f4:	cf 33       	cpi	r28, 0x3F	; 63
    {
        listening = 0;
   124f6:	19 f5       	brne	.+70     	; 0x1253e <GPIB_LISTEN+0x64>
   124f8:	10 92 fc 1e 	sts	0x1EFC, r1	; 0x801efc <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   124fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12500:	82 ff       	sbrs	r24, 2
        {
            printf("[UNL]\n");
   12502:	74 c0       	rjmp	.+232    	; 0x125ec <GPIB_LISTEN+0x112>
   12504:	83 eb       	ldi	r24, 0xB3	; 179
   12506:	93 e1       	ldi	r25, 0x13	; 19
   12508:	a0 e0       	ldi	r26, 0x00	; 0
   1250a:	ed b7       	in	r30, 0x3d	; 61
   1250c:	fe b7       	in	r31, 0x3e	; 62
   1250e:	81 83       	std	Z+1, r24	; 0x01
   12510:	92 83       	std	Z+2, r25	; 0x02
   12512:	a3 83       	std	Z+3, r26	; 0x03
   12514:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   12518:	80 91 f4 1c 	lds	r24, 0x1CF4	; 0x801cf4 <lastcmd>
   1251c:	90 91 f5 1c 	lds	r25, 0x1CF5	; 0x801cf5 <lastcmd+0x1>
   12520:	8f 35       	cpi	r24, 0x5F	; 95
   12522:	91 05       	cpc	r25, r1
   12524:	09 f0       	breq	.+2      	; 0x12528 <GPIB_LISTEN+0x4e>
                printf("\n");
   12526:	62 c0       	rjmp	.+196    	; 0x125ec <GPIB_LISTEN+0x112>
   12528:	81 eb       	ldi	r24, 0xB1	; 177
   1252a:	93 e1       	ldi	r25, 0x13	; 19
   1252c:	a0 e0       	ldi	r26, 0x00	; 0
   1252e:	ed b7       	in	r30, 0x3d	; 61
   12530:	fe b7       	in	r31, 0x3e	; 62
   12532:	81 83       	std	Z+1, r24	; 0x01
   12534:	92 83       	std	Z+2, r25	; 0x02
   12536:	a3 83       	std	Z+3, r26	; 0x03
   12538:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   1253c:	57 c0       	rjmp	.+174    	; 0x125ec <GPIB_LISTEN+0x112>
   1253e:	d0 e0       	ldi	r29, 0x00	; 0
   12540:	ce 01       	movw	r24, r28
   12542:	9c db       	rcall	.-2248   	; 0x11c7c <AMIGO_is_MLA>
   12544:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12546:	81 f0       	breq	.+32     	; 0x12568 <GPIB_LISTEN+0x8e>
   12548:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1254c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12550:	84 72       	andi	r24, 0x24	; 36
   12552:	99 27       	eor	r25, r25
   12554:	89 2b       	or	r24, r25
   12556:	09 f4       	brne	.+2      	; 0x1255a <GPIB_LISTEN+0x80>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   12558:	49 c0       	rjmp	.+146    	; 0x125ec <GPIB_LISTEN+0x112>
   1255a:	ed b7       	in	r30, 0x3d	; 61
   1255c:	fe b7       	in	r31, 0x3e	; 62
   1255e:	d5 83       	std	Z+5, r29	; 0x05
   12560:	c4 83       	std	Z+4, r28	; 0x04
   12562:	8f e9       	ldi	r24, 0x9F	; 159
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12564:	93 e1       	ldi	r25, 0x13	; 19
   12566:	3c c0       	rjmp	.+120    	; 0x125e0 <GPIB_LISTEN+0x106>
   12568:	ce 01       	movw	r24, r28
   1256a:	55 db       	rcall	.-2390   	; 0x11c16 <SS80_is_MLA>
   1256c:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1256e:	79 f0       	breq	.+30     	; 0x1258e <GPIB_LISTEN+0xb4>
   12570:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12574:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12578:	84 72       	andi	r24, 0x24	; 36
   1257a:	99 27       	eor	r25, r25
   1257c:	89 2b       	or	r24, r25
            printf("[LA %02XH SS80]\n", 0xff & ch);
   1257e:	b1 f1       	breq	.+108    	; 0x125ec <GPIB_LISTEN+0x112>
   12580:	ed b7       	in	r30, 0x3d	; 61
   12582:	fe b7       	in	r31, 0x3e	; 62
   12584:	d5 83       	std	Z+5, r29	; 0x05
   12586:	c4 83       	std	Z+4, r28	; 0x04
   12588:	8e e8       	ldi	r24, 0x8E	; 142
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   1258a:	93 e1       	ldi	r25, 0x13	; 19
   1258c:	29 c0       	rjmp	.+82     	; 0x125e0 <GPIB_LISTEN+0x106>
   1258e:	ce 01       	movw	r24, r28
   12590:	a8 db       	rcall	.-2224   	; 0x11ce2 <PRINTER_is_MLA>
   12592:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12596:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1259a:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1259c:	c9 f0       	breq	.+50     	; 0x125d0 <GPIB_LISTEN+0xf6>
   1259e:	24 72       	andi	r18, 0x24	; 36
   125a0:	33 27       	eor	r19, r19
   125a2:	23 2b       	or	r18, r19
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   125a4:	61 f0       	breq	.+24     	; 0x125be <GPIB_LISTEN+0xe4>
   125a6:	ed b7       	in	r30, 0x3d	; 61
   125a8:	fe b7       	in	r31, 0x3e	; 62
   125aa:	d5 83       	std	Z+5, r29	; 0x05
   125ac:	c4 83       	std	Z+4, r28	; 0x04
   125ae:	8a e7       	ldi	r24, 0x7A	; 122
   125b0:	93 e1       	ldi	r25, 0x13	; 19
   125b2:	a0 e0       	ldi	r26, 0x00	; 0
   125b4:	81 83       	std	Z+1, r24	; 0x01
   125b6:	92 83       	std	Z+2, r25	; 0x02
   125b8:	a3 83       	std	Z+3, r26	; 0x03
   125ba:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
        if(talking != UNT)
   125be:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   125c2:	8f 35       	cpi	r24, 0x5F	; 95
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   125c4:	99 f0       	breq	.+38     	; 0x125ec <GPIB_LISTEN+0x112>
   125c6:	80 e0       	ldi	r24, 0x00	; 0
   125c8:	90 e0       	ldi	r25, 0x00	; 0
   125ca:	0e 94 e6 bd 	call	0x17bcc	; 0x17bcc <printer_open>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   125ce:	0e c0       	rjmp	.+28     	; 0x125ec <GPIB_LISTEN+0x112>
   125d0:	22 ff       	sbrs	r18, 2
        printf("[LA %02XH]\n", 0xff & ch);
   125d2:	0c c0       	rjmp	.+24     	; 0x125ec <GPIB_LISTEN+0x112>
   125d4:	ed b7       	in	r30, 0x3d	; 61
   125d6:	fe b7       	in	r31, 0x3e	; 62
   125d8:	d5 83       	std	Z+5, r29	; 0x05
   125da:	c4 83       	std	Z+4, r28	; 0x04
   125dc:	8e e6       	ldi	r24, 0x6E	; 110
   125de:	93 e1       	ldi	r25, 0x13	; 19
   125e0:	a0 e0       	ldi	r26, 0x00	; 0
   125e2:	81 83       	std	Z+1, r24	; 0x01
   125e4:	92 83       	std	Z+2, r25	; 0x02
   125e6:	a3 83       	std	Z+3, r26	; 0x03
   125e8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   125ec:	80 e0       	ldi	r24, 0x00	; 0
   125ee:	90 e0       	ldi	r25, 0x00	; 0
   125f0:	cd b7       	in	r28, 0x3d	; 61
   125f2:	de b7       	in	r29, 0x3e	; 62
   125f4:	25 96       	adiw	r28, 0x05	; 5
   125f6:	e2 e0       	ldi	r30, 0x02	; 2
   125f8:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000125fc <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   125fc:	cf 93       	push	r28
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   125fe:	df 93       	push	r29
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   12600:	92 db       	rcall	.-2268   	; 0x11d26 <gpib_init_devices>
   12602:	10 92 6e 19 	sts	0x196E, r1	; 0x80196e <gpib_log_fp+0x1>
   12606:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   1260a:	80 e0       	ldi	r24, 0x00	; 0
   1260c:	90 e0       	ldi	r25, 0x00	; 0
   1260e:	b0 d8       	rcall	.-3744   	; 0x11770 <gpib_read_byte>

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12610:	ec 01       	movw	r28, r24
   12612:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
            gpib_decode(val);
   12616:	83 ff       	sbrs	r24, 3
   12618:	02 c0       	rjmp	.+4      	; 0x1261e <gpib_task+0x22>
#endif
        status = gpib_error_test(val);
   1261a:	ce 01       	movw	r24, r28
   1261c:	94 d9       	rcall	.-3288   	; 0x11946 <gpib_decode>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   1261e:	ce 01       	movw	r24, r28
   12620:	1d dc       	rcall	.-1990   	; 0x11e5c <gpib_error_test>
   12622:	9c 01       	movw	r18, r24
   12624:	23 70       	andi	r18, 0x03	; 3
   12626:	33 27       	eor	r19, r19
   12628:	23 2b       	or	r18, r19
        {
            return;
        }
        else if(status)
   1262a:	09 f0       	breq	.+2      	; 0x1262e <gpib_task+0x32>
   1262c:	43 c0       	rjmp	.+134    	; 0x126b4 <gpib_task+0xb8>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   1262e:	89 2b       	or	r24, r25
   12630:	61 f7       	brne	.-40     	; 0x1260a <gpib_task+0xe>
        {
            ch = val & CMD_MASK;
   12632:	d2 ff       	sbrs	r29, 2
            if(ch <= 0x1f)
   12634:	26 c0       	rjmp	.+76     	; 0x12682 <gpib_task+0x86>
            {
                GPIB(ch);
   12636:	8c 2f       	mov	r24, r28
   12638:	8f 77       	andi	r24, 0x7F	; 127
                continue;
   1263a:	80 32       	cpi	r24, 0x20	; 32
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   1263c:	10 f4       	brcc	.+4      	; 0x12642 <gpib_task+0x46>
   1263e:	52 dd       	rcall	.-1372   	; 0x120e4 <GPIB>
   12640:	e4 cf       	rjmp	.-56     	; 0x1260a <gpib_task+0xe>
            {
                GPIB_LISTEN(ch);
   12642:	90 ee       	ldi	r25, 0xE0	; 224
   12644:	98 0f       	add	r25, r24
                continue;
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12646:	90 32       	cpi	r25, 0x20	; 32
   12648:	10 f4       	brcc	.+4      	; 0x1264e <gpib_task+0x52>
   1264a:	47 df       	rcall	.-370    	; 0x124da <GPIB_LISTEN>
            {
                GPIB_TALK(ch);
   1264c:	de cf       	rjmp	.-68     	; 0x1260a <gpib_task+0xe>
   1264e:	90 ec       	ldi	r25, 0xC0	; 192
                continue;
   12650:	98 0f       	add	r25, r24
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   12652:	90 32       	cpi	r25, 0x20	; 32
   12654:	10 f4       	brcc	.+4      	; 0x1265a <gpib_task+0x5e>
   12656:	08 de       	rcall	.-1008   	; 0x12268 <GPIB_TALK>
   12658:	d8 cf       	rjmp	.-80     	; 0x1260a <gpib_task+0xe>
   1265a:	90 91 fc 1e 	lds	r25, 0x1EFC	; 0x801efc <listening>
   1265e:	99 23       	and	r25, r25
   12660:	59 f0       	breq	.+22     	; 0x12678 <gpib_task+0x7c>
   12662:	20 91 f4 1c 	lds	r18, 0x1CF4	; 0x801cf4 <lastcmd>
            {
                secondary = 0;
   12666:	30 91 f5 1c 	lds	r19, 0x1CF5	; 0x801cf5 <lastcmd+0x1>
                GPIB_SECONDARY_ADDRESS(ch);
   1266a:	2f 35       	cpi	r18, 0x5F	; 95
   1266c:	31 05       	cpc	r19, r1
                continue;
   1266e:	21 f4       	brne	.+8      	; 0x12678 <gpib_task+0x7c>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   12670:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   12674:	91 de       	rcall	.-734    	; 0x12398 <GPIB_SECONDARY_ADDRESS>
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12676:	c9 cf       	rjmp	.-110    	; 0x1260a <gpib_task+0xe>
   12678:	80 93 fb 1e 	sts	0x1EFB, r24	; 0x801efb <secondary>
   1267c:	60 e0       	ldi	r22, 0x00	; 0
   1267e:	90 e0       	ldi	r25, 0x00	; 0
   12680:	12 c0       	rjmp	.+36     	; 0x126a6 <gpib_task+0xaa>
   12682:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
            {
                printer_buffer( 0xff & val );
   12686:	90 e0       	ldi	r25, 0x00	; 0
   12688:	2c db       	rcall	.-2472   	; 0x11ce2 <PRINTER_is_MLA>
   1268a:	89 2b       	or	r24, r25
                continue;
            }

            if(!secondary)
   1268c:	29 f0       	breq	.+10     	; 0x12698 <gpib_task+0x9c>
   1268e:	ce 01       	movw	r24, r28
   12690:	99 27       	eor	r25, r25
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   12692:	0e 94 89 be 	call	0x17d12	; 0x17d12 <printer_buffer>
   12696:	b9 cf       	rjmp	.-142    	; 0x1260a <gpib_task+0xe>
   12698:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
            status = gpib_error_test(status);
   1269c:	88 23       	and	r24, r24

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   1269e:	09 f4       	brne	.+2      	; 0x126a2 <gpib_task+0xa6>
   126a0:	b4 cf       	rjmp	.-152    	; 0x1260a <gpib_task+0xe>
   126a2:	61 e0       	ldi	r22, 0x01	; 1
   126a4:	ce 01       	movw	r24, r28
   126a6:	67 dc       	rcall	.-1842   	; 0x11f76 <GPIB_COMMANDS>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   126a8:	d9 db       	rcall	.-2126   	; 0x11e5c <gpib_error_test>
   126aa:	83 70       	andi	r24, 0x03	; 3
   126ac:	99 27       	eor	r25, r25
   126ae:	89 2b       	or	r24, r25
   126b0:	09 f4       	brne	.+2      	; 0x126b4 <gpib_task+0xb8>
   126b2:	ab cf       	rjmp	.-170    	; 0x1260a <gpib_task+0xe>
   126b4:	df 91       	pop	r29
   126b6:	cf 91       	pop	r28
   126b8:	08 95       	ret

000126ba <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   126ba:	08 95       	ret

000126bc <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   126bc:	cf 93       	push	r28
   126be:	df 93       	push	r29
   126c0:	00 d0       	rcall	.+0      	; 0x126c2 <gpib_help+0x6>
   126c2:	1f 92       	push	r1
   126c4:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   126c6:	84 e4       	ldi	r24, 0x44	; 68
   126c8:	97 e1       	ldi	r25, 0x17	; 23
   126ca:	a0 e0       	ldi	r26, 0x00	; 0
   126cc:	ed b7       	in	r30, 0x3d	; 61
   126ce:	fe b7       	in	r31, 0x3e	; 62
   126d0:	81 83       	std	Z+1, r24	; 0x01
   126d2:	92 83       	std	Z+2, r25	; 0x02
   126d4:	a3 83       	std	Z+3, r26	; 0x03
   126d6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    if(full)
   126da:	cd 2b       	or	r28, r29
   126dc:	51 f0       	breq	.+20     	; 0x126f2 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   126de:	8b e7       	ldi	r24, 0x7B	; 123
   126e0:	95 e1       	ldi	r25, 0x15	; 21
   126e2:	a0 e0       	ldi	r26, 0x00	; 0
   126e4:	ed b7       	in	r30, 0x3d	; 61
   126e6:	fe b7       	in	r31, 0x3e	; 62
   126e8:	81 83       	std	Z+1, r24	; 0x01
   126ea:	92 83       	std	Z+2, r25	; 0x02
   126ec:	a3 83       	std	Z+3, r26	; 0x03
   126ee:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   126f2:	cd b7       	in	r28, 0x3d	; 61
   126f4:	de b7       	in	r29, 0x3e	; 62
   126f6:	23 96       	adiw	r28, 0x03	; 3
   126f8:	e2 e0       	ldi	r30, 0x02	; 2
   126fa:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000126fe <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   126fe:	a5 e0       	ldi	r26, 0x05	; 5
   12700:	b0 e0       	ldi	r27, 0x00	; 0
   12702:	e5 e8       	ldi	r30, 0x85	; 133
   12704:	f3 e9       	ldi	r31, 0x93	; 147
   12706:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1270a:	fb 01       	movw	r30, r22
   1270c:	e0 80       	ld	r14, Z
   1270e:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12710:	e1 14       	cp	r14, r1
   12712:	f1 04       	cpc	r15, r1
   12714:	19 f4       	brne	.+6      	; 0x1271c <gpib_tests+0x1e>
        return(0);
   12716:	80 e0       	ldi	r24, 0x00	; 0
   12718:	90 e0       	ldi	r25, 0x00	; 0
   1271a:	dc c0       	rjmp	.+440    	; 0x128d4 <gpib_tests+0x1d6>
   1271c:	6b 01       	movw	r12, r22
   1271e:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12720:	6b ea       	ldi	r22, 0xAB	; 171
   12722:	7d e0       	ldi	r23, 0x0D	; 13
   12724:	c7 01       	movw	r24, r14
   12726:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   1272a:	89 2b       	or	r24, r25
   1272c:	a1 f0       	breq	.+40     	; 0x12756 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   1272e:	f6 01       	movw	r30, r12
   12730:	e2 80       	ldd	r14, Z+2	; 0x02
   12732:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12734:	e1 14       	cp	r14, r1
   12736:	f1 04       	cpc	r15, r1
   12738:	21 f4       	brne	.+8      	; 0x12742 <gpib_tests+0x44>
        {
            gpib_help(1);
   1273a:	81 e0       	ldi	r24, 0x01	; 1
   1273c:	90 e0       	ldi	r25, 0x00	; 0
   1273e:	be df       	rcall	.-132    	; 0x126bc <gpib_help>
   12740:	c7 c0       	rjmp	.+398    	; 0x128d0 <gpib_tests+0x1d2>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12742:	65 e9       	ldi	r22, 0x95	; 149
   12744:	76 e1       	ldi	r23, 0x16	; 22
   12746:	c7 01       	movw	r24, r14
   12748:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   1274c:	89 2b       	or	r24, r25
   1274e:	a9 f7       	brne	.-22     	; 0x1273a <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12750:	c2 e0       	ldi	r28, 0x02	; 2
   12752:	d0 e0       	ldi	r29, 0x00	; 0
   12754:	02 c0       	rjmp	.+4      	; 0x1275a <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12756:	c1 e0       	ldi	r28, 0x01	; 1
   12758:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1275a:	60 eb       	ldi	r22, 0xB0	; 176
   1275c:	7d e0       	ldi	r23, 0x0D	; 13
   1275e:	c7 01       	movw	r24, r14
   12760:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   12764:	89 2b       	or	r24, r25
   12766:	29 f1       	breq	.+74     	; 0x127b2 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   12768:	fe 01       	movw	r30, r28
   1276a:	ee 0f       	add	r30, r30
   1276c:	ff 1f       	adc	r31, r31
   1276e:	ec 0d       	add	r30, r12
   12770:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   12772:	01 90       	ld	r0, Z+
   12774:	f0 81       	ld	r31, Z
   12776:	e0 2d       	mov	r30, r0
   12778:	80 81       	ld	r24, Z
   1277a:	8d 33       	cpi	r24, 0x3D	; 61
   1277c:	09 f4       	brne	.+2      	; 0x12780 <gpib_tests+0x82>
            ++ind;
   1277e:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12780:	cc 0f       	add	r28, r28
   12782:	dd 1f       	adc	r29, r29
   12784:	cc 0d       	add	r28, r12
   12786:	dd 1d       	adc	r29, r13
   12788:	88 81       	ld	r24, Y
   1278a:	99 81       	ldd	r25, Y+1	; 0x01
   1278c:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   12790:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   12794:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   12798:	ed b7       	in	r30, 0x3d	; 61
   1279a:	fe b7       	in	r31, 0x3e	; 62
   1279c:	75 83       	std	Z+5, r23	; 0x05
   1279e:	64 83       	std	Z+4, r22	; 0x04
   127a0:	8e e6       	ldi	r24, 0x6E	; 110
   127a2:	95 e1       	ldi	r25, 0x15	; 21
   127a4:	a0 e0       	ldi	r26, 0x00	; 0
   127a6:	81 83       	std	Z+1, r24	; 0x01
   127a8:	92 83       	std	Z+2, r25	; 0x02
   127aa:	a3 83       	std	Z+3, r26	; 0x03
   127ac:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   127b0:	8f c0       	rjmp	.+286    	; 0x128d0 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"addresses") )
   127b2:	66 eb       	ldi	r22, 0xB6	; 182
   127b4:	7d e0       	ldi	r23, 0x0D	; 13
   127b6:	c7 01       	movw	r24, r14
   127b8:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   127bc:	89 2b       	or	r24, r25
   127be:	c9 f0       	breq	.+50     	; 0x127f2 <gpib_tests+0xf4>
    {
        ptr = argv[ind];
   127c0:	cc 0f       	add	r28, r28
   127c2:	dd 1f       	adc	r29, r29
   127c4:	cc 0d       	add	r28, r12
   127c6:	dd 1d       	adc	r29, r13
   127c8:	88 81       	ld	r24, Y
   127ca:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   127cc:	00 97       	sbiw	r24, 0x00	; 0
   127ce:	69 f0       	breq	.+26     	; 0x127ea <gpib_tests+0xec>
   127d0:	fc 01       	movw	r30, r24
   127d2:	20 81       	ld	r18, Z
   127d4:	22 23       	and	r18, r18
   127d6:	49 f0       	breq	.+18     	; 0x127ea <gpib_tests+0xec>
   127d8:	60 ec       	ldi	r22, 0xC0	; 192
   127da:	7d e0       	ldi	r23, 0x0D	; 13
   127dc:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   127e0:	89 2b       	or	r24, r25
   127e2:	19 f0       	breq	.+6      	; 0x127ea <gpib_tests+0xec>
            display_Addresses(1);
   127e4:	81 e0       	ldi	r24, 0x01	; 1
   127e6:	90 e0       	ldi	r25, 0x00	; 0
   127e8:	02 c0       	rjmp	.+4      	; 0x127ee <gpib_tests+0xf0>
        else
            display_Addresses(0);
   127ea:	80 e0       	ldi	r24, 0x00	; 0
   127ec:	90 e0       	ldi	r25, 0x00	; 0
   127ee:	54 d1       	rcall	.+680    	; 0x12a98 <display_Addresses>
   127f0:	6f c0       	rjmp	.+222    	; 0x128d0 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   127f2:	63 ec       	ldi	r22, 0xC3	; 195
   127f4:	7d e0       	ldi	r23, 0x0D	; 13
   127f6:	c7 01       	movw	r24, r14
   127f8:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   127fc:	89 2b       	or	r24, r25
   127fe:	c9 f0       	breq	.+50     	; 0x12832 <gpib_tests+0x134>
    {
        ptr = argv[ind];
   12800:	cc 0f       	add	r28, r28
   12802:	dd 1f       	adc	r29, r29
   12804:	cc 0d       	add	r28, r12
   12806:	dd 1d       	adc	r29, r13
   12808:	88 81       	ld	r24, Y
   1280a:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1280c:	00 97       	sbiw	r24, 0x00	; 0
   1280e:	69 f0       	breq	.+26     	; 0x1282a <gpib_tests+0x12c>
   12810:	fc 01       	movw	r30, r24
   12812:	20 81       	ld	r18, Z
   12814:	22 23       	and	r18, r18
   12816:	49 f0       	breq	.+18     	; 0x1282a <gpib_tests+0x12c>
   12818:	60 ec       	ldi	r22, 0xC0	; 192
   1281a:	7d e0       	ldi	r23, 0x0D	; 13
   1281c:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   12820:	89 2b       	or	r24, r25
   12822:	19 f0       	breq	.+6      	; 0x1282a <gpib_tests+0x12c>
            display_Config(1);
   12824:	81 e0       	ldi	r24, 0x01	; 1
   12826:	90 e0       	ldi	r25, 0x00	; 0
        else
            display_Config(0);
   12828:	02 c0       	rjmp	.+4      	; 0x1282e <gpib_tests+0x130>
   1282a:	80 e0       	ldi	r24, 0x00	; 0
   1282c:	90 e0       	ldi	r25, 0x00	; 0
   1282e:	0f d2       	rcall	.+1054   	; 0x12c4e <display_Config>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   12830:	4f c0       	rjmp	.+158    	; 0x128d0 <gpib_tests+0x1d2>
   12832:	6a ec       	ldi	r22, 0xCA	; 202
   12834:	7d e0       	ldi	r23, 0x0D	; 13
   12836:	c7 01       	movw	r24, r14
   12838:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   1283c:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_begin();
   1283e:	19 f0       	breq	.+6      	; 0x12846 <gpib_tests+0x148>
   12840:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   12844:	45 c0       	rjmp	.+138    	; 0x128d0 <gpib_tests+0x1d2>
   12846:	68 ed       	ldi	r22, 0xD8	; 216
   12848:	7d e0       	ldi	r23, 0x0D	; 13
   1284a:	c7 01       	movw	r24, r14
   1284c:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   12850:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12852:	29 f0       	breq	.+10     	; 0x1285e <gpib_tests+0x160>
   12854:	80 ee       	ldi	r24, 0xE0	; 224
   12856:	9d e0       	ldi	r25, 0x0D	; 13
   12858:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
        return(1);
    }

    if ( MATCHI(ptr, "ifc") )
   1285c:	39 c0       	rjmp	.+114    	; 0x128d0 <gpib_tests+0x1d2>
   1285e:	6e ee       	ldi	r22, 0xEE	; 238
   12860:	7d e0       	ldi	r23, 0x0D	; 13
   12862:	c7 01       	movw	r24, r14
   12864:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   12868:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   1286a:	19 f0       	breq	.+6      	; 0x12872 <gpib_tests+0x174>
   1286c:	0e 94 25 88 	call	0x1104a	; 0x1104a <gpib_assert_ifc>
        return(1);

    }

    if (MATCHI(ptr,"task") )
   12870:	2f c0       	rjmp	.+94     	; 0x128d0 <gpib_tests+0x1d2>
   12872:	62 ef       	ldi	r22, 0xF2	; 242
   12874:	7d e0       	ldi	r23, 0x0D	; 13
   12876:	c7 01       	movw	r24, r14
   12878:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
    {
        gpib_task();
   1287c:	89 2b       	or	r24, r25
   1287e:	11 f0       	breq	.+4      	; 0x12884 <gpib_tests+0x186>
   12880:	bd de       	rcall	.-646    	; 0x125fc <gpib_task>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12882:	26 c0       	rjmp	.+76     	; 0x128d0 <gpib_tests+0x1d2>
   12884:	8e 01       	movw	r16, r28
   12886:	0f 5f       	subi	r16, 0xFF	; 255
   12888:	1f 4f       	sbci	r17, 0xFF	; 255
   1288a:	95 01       	movw	r18, r10
   1288c:	a8 01       	movw	r20, r16
   1288e:	67 ef       	ldi	r22, 0xF7	; 247
   12890:	7d e0       	ldi	r23, 0x0D	; 13
   12892:	c7 01       	movw	r24, r14
   12894:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   12898:	89 2b       	or	r24, r25
   1289a:	09 f4       	brne	.+2      	; 0x1289e <gpib_tests+0x1a0>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1289c:	3c cf       	rjmp	.-392    	; 0x12716 <gpib_tests+0x18>
   1289e:	00 0f       	add	r16, r16
   128a0:	11 1f       	adc	r17, r17
   128a2:	e6 01       	movw	r28, r12
   128a4:	c0 0f       	add	r28, r16
   128a6:	d1 1f       	adc	r29, r17
   128a8:	88 81       	ld	r24, Y
   128aa:	99 81       	ldd	r25, Y+1	; 0x01
   128ac:	00 97       	sbiw	r24, 0x00	; 0
   128ae:	51 f0       	breq	.+20     	; 0x128c4 <gpib_tests+0x1c6>
   128b0:	6d ef       	ldi	r22, 0xFD	; 253
   128b2:	7d e0       	ldi	r23, 0x0D	; 13
   128b4:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   128b8:	61 e0       	ldi	r22, 0x01	; 1
   128ba:	70 e0       	ldi	r23, 0x00	; 0
   128bc:	89 2b       	or	r24, r25
   128be:	21 f4       	brne	.+8      	; 0x128c8 <gpib_tests+0x1ca>
   128c0:	60 e0       	ldi	r22, 0x00	; 0
   128c2:	02 c0       	rjmp	.+4      	; 0x128c8 <gpib_tests+0x1ca>
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   128c4:	60 e0       	ldi	r22, 0x00	; 0
   128c6:	70 e0       	ldi	r23, 0x00	; 0
   128c8:	22 97       	sbiw	r28, 0x02	; 2
   128ca:	88 81       	ld	r24, Y
   128cc:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   128ce:	34 da       	rcall	.-2968   	; 0x11d38 <gpib_trace_task>
   128d0:	81 e0       	ldi	r24, 0x01	; 1

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   128d2:	90 e0       	ldi	r25, 0x00	; 0
   128d4:	cd b7       	in	r28, 0x3d	; 61
   128d6:	de b7       	in	r29, 0x3e	; 62
   128d8:	25 96       	adiw	r28, 0x05	; 5
   128da:	ea e0       	ldi	r30, 0x0A	; 10
   128dc:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

000128e0 <tok_index>:
   128e0:	ef 92       	push	r14
   128e2:	ff 92       	push	r15
   128e4:	0f 93       	push	r16
   128e6:	1f 93       	push	r17
   128e8:	cf 93       	push	r28
   128ea:	df 93       	push	r29
   128ec:	7c 01       	movw	r14, r24
   128ee:	c4 ec       	ldi	r28, 0xC4	; 196
   128f0:	d1 e0       	ldi	r29, 0x01	; 1
   128f2:	00 e0       	ldi	r16, 0x00	; 0
   128f4:	10 e0       	ldi	r17, 0x00	; 0
   128f6:	8a 81       	ldd	r24, Y+2	; 0x02
   128f8:	9b 81       	ldd	r25, Y+3	; 0x03
   128fa:	8f 3f       	cpi	r24, 0xFF	; 255
   128fc:	2f ef       	ldi	r18, 0xFF	; 255
   128fe:	92 07       	cpc	r25, r18
   12900:	61 f0       	breq	.+24     	; 0x1291a <tok_index+0x3a>
   12902:	68 81       	ld	r22, Y
   12904:	79 81       	ldd	r23, Y+1	; 0x01
   12906:	c7 01       	movw	r24, r14
   12908:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   1290c:	24 96       	adiw	r28, 0x04	; 4
   1290e:	89 2b       	or	r24, r25
   12910:	19 f4       	brne	.+6      	; 0x12918 <tok_index+0x38>
   12912:	0f 5f       	subi	r16, 0xFF	; 255
   12914:	1f 4f       	sbci	r17, 0xFF	; 255
   12916:	ef cf       	rjmp	.-34     	; 0x128f6 <tok_index+0x16>
   12918:	c8 01       	movw	r24, r16
   1291a:	cd b7       	in	r28, 0x3d	; 61
   1291c:	de b7       	in	r29, 0x3e	; 62
   1291e:	e6 e0       	ldi	r30, 0x06	; 6
   12920:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00012924 <tok_name>:
   12924:	e4 ec       	ldi	r30, 0xC4	; 196
   12926:	f1 e0       	ldi	r31, 0x01	; 1
   12928:	20 e0       	ldi	r18, 0x00	; 0
   1292a:	30 e0       	ldi	r19, 0x00	; 0
   1292c:	90 e0       	ldi	r25, 0x00	; 0
   1292e:	42 81       	ldd	r20, Z+2	; 0x02
   12930:	53 81       	ldd	r21, Z+3	; 0x03
   12932:	4f 3f       	cpi	r20, 0xFF	; 255
   12934:	6f ef       	ldi	r22, 0xFF	; 255
   12936:	56 07       	cpc	r21, r22
   12938:	89 f0       	breq	.+34     	; 0x1295c <tok_name+0x38>
   1293a:	34 96       	adiw	r30, 0x04	; 4
   1293c:	48 17       	cp	r20, r24
   1293e:	59 07       	cpc	r21, r25
   12940:	51 f4       	brne	.+20     	; 0x12956 <tok_name+0x32>
   12942:	22 0f       	add	r18, r18
   12944:	33 1f       	adc	r19, r19
   12946:	22 0f       	add	r18, r18
   12948:	33 1f       	adc	r19, r19
   1294a:	f9 01       	movw	r30, r18
   1294c:	ec 53       	subi	r30, 0x3C	; 60
   1294e:	fe 4f       	sbci	r31, 0xFE	; 254
   12950:	80 81       	ld	r24, Z
   12952:	91 81       	ldd	r25, Z+1	; 0x01
   12954:	08 95       	ret
   12956:	2f 5f       	subi	r18, 0xFF	; 255
   12958:	3f 4f       	sbci	r19, 0xFF	; 255
   1295a:	e9 cf       	rjmp	.-46     	; 0x1292e <tok_name+0xa>
   1295c:	85 e2       	ldi	r24, 0x25	; 37
   1295e:	9c e0       	ldi	r25, 0x0C	; 12
   12960:	08 95       	ret

00012962 <print_tok_val>:
   12962:	cf 92       	push	r12
   12964:	df 92       	push	r13
   12966:	ef 92       	push	r14
   12968:	ff 92       	push	r15
   1296a:	0f 93       	push	r16
   1296c:	1f 93       	push	r17
   1296e:	cf 93       	push	r28
   12970:	ad b7       	in	r26, 0x3d	; 61
   12972:	be b7       	in	r27, 0x3e	; 62
   12974:	1d 97       	sbiw	r26, 0x0d	; 13
   12976:	0f b6       	in	r0, 0x3f	; 63
   12978:	f8 94       	cli
   1297a:	be bf       	out	0x3e, r27	; 62
   1297c:	0f be       	out	0x3f, r0	; 63
   1297e:	ad bf       	out	0x3d, r26	; 61
   12980:	c6 2f       	mov	r28, r22
   12982:	69 01       	movw	r12, r18
   12984:	7a 01       	movw	r14, r20
   12986:	ce df       	rcall	.-100    	; 0x12924 <tok_name>
   12988:	8c 01       	movw	r16, r24
   1298a:	cc 23       	and	r28, r28
   1298c:	31 f0       	breq	.+12     	; 0x1299a <print_tok_val+0x38>
   1298e:	80 e2       	ldi	r24, 0x20	; 32
   12990:	90 e0       	ldi	r25, 0x00	; 0
   12992:	0e 94 ef 77 	call	0xefde	; 0xefde <putchar>
   12996:	c1 50       	subi	r28, 0x01	; 1
   12998:	f8 cf       	rjmp	.-16     	; 0x1298a <print_tok_val+0x28>
   1299a:	ed b7       	in	r30, 0x3d	; 61
   1299c:	fe b7       	in	r31, 0x3e	; 62
   1299e:	c2 86       	std	Z+10, r12	; 0x0a
   129a0:	d3 86       	std	Z+11, r13	; 0x0b
   129a2:	e4 86       	std	Z+12, r14	; 0x0c
   129a4:	f5 86       	std	Z+13, r15	; 0x0d
   129a6:	c6 82       	std	Z+6, r12	; 0x06
   129a8:	d7 82       	std	Z+7, r13	; 0x07
   129aa:	e0 86       	std	Z+8, r14	; 0x08
   129ac:	f1 86       	std	Z+9, r15	; 0x09
   129ae:	15 83       	std	Z+5, r17	; 0x05
   129b0:	04 83       	std	Z+4, r16	; 0x04
   129b2:	87 ed       	ldi	r24, 0xD7	; 215
   129b4:	9d e1       	ldi	r25, 0x1D	; 29
   129b6:	a0 e0       	ldi	r26, 0x00	; 0
   129b8:	81 83       	std	Z+1, r24	; 0x01
   129ba:	92 83       	std	Z+2, r25	; 0x02
   129bc:	a3 83       	std	Z+3, r26	; 0x03
   129be:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   129c2:	ad b7       	in	r26, 0x3d	; 61
   129c4:	be b7       	in	r27, 0x3e	; 62
   129c6:	1d 96       	adiw	r26, 0x0d	; 13
   129c8:	0f b6       	in	r0, 0x3f	; 63
   129ca:	f8 94       	cli
   129cc:	be bf       	out	0x3e, r27	; 62
   129ce:	0f be       	out	0x3f, r0	; 63
   129d0:	ad bf       	out	0x3d, r26	; 61
   129d2:	cf 91       	pop	r28
   129d4:	1f 91       	pop	r17
   129d6:	0f 91       	pop	r16
   129d8:	ff 90       	pop	r15
   129da:	ef 90       	pop	r14
   129dc:	df 90       	pop	r13
   129de:	cf 90       	pop	r12
   129e0:	08 95       	ret

000129e2 <print_tok_str>:
   129e2:	ef 92       	push	r14
   129e4:	ff 92       	push	r15
   129e6:	0f 93       	push	r16
   129e8:	1f 93       	push	r17
   129ea:	cf 93       	push	r28
   129ec:	ad b7       	in	r26, 0x3d	; 61
   129ee:	be b7       	in	r27, 0x3e	; 62
   129f0:	17 97       	sbiw	r26, 0x07	; 7
   129f2:	0f b6       	in	r0, 0x3f	; 63
   129f4:	f8 94       	cli
   129f6:	be bf       	out	0x3e, r27	; 62
   129f8:	0f be       	out	0x3f, r0	; 63
   129fa:	ad bf       	out	0x3d, r26	; 61
   129fc:	c6 2f       	mov	r28, r22
   129fe:	7a 01       	movw	r14, r20
   12a00:	91 df       	rcall	.-222    	; 0x12924 <tok_name>
   12a02:	8c 01       	movw	r16, r24
   12a04:	cc 23       	and	r28, r28
   12a06:	31 f0       	breq	.+12     	; 0x12a14 <print_tok_str+0x32>
   12a08:	80 e2       	ldi	r24, 0x20	; 32
   12a0a:	90 e0       	ldi	r25, 0x00	; 0
   12a0c:	0e 94 ef 77 	call	0xefde	; 0xefde <putchar>
   12a10:	c1 50       	subi	r28, 0x01	; 1
   12a12:	f8 cf       	rjmp	.-16     	; 0x12a04 <print_tok_str+0x22>
   12a14:	ed b7       	in	r30, 0x3d	; 61
   12a16:	fe b7       	in	r31, 0x3e	; 62
   12a18:	f7 82       	std	Z+7, r15	; 0x07
   12a1a:	e6 82       	std	Z+6, r14	; 0x06
   12a1c:	15 83       	std	Z+5, r17	; 0x05
   12a1e:	04 83       	std	Z+4, r16	; 0x04
   12a20:	8b ec       	ldi	r24, 0xCB	; 203
   12a22:	9d e1       	ldi	r25, 0x1D	; 29
   12a24:	a0 e0       	ldi	r26, 0x00	; 0
   12a26:	81 83       	std	Z+1, r24	; 0x01
   12a28:	92 83       	std	Z+2, r25	; 0x02
   12a2a:	a3 83       	std	Z+3, r26	; 0x03
   12a2c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12a30:	ad b7       	in	r26, 0x3d	; 61
   12a32:	be b7       	in	r27, 0x3e	; 62
   12a34:	17 96       	adiw	r26, 0x07	; 7
   12a36:	0f b6       	in	r0, 0x3f	; 63
   12a38:	f8 94       	cli
   12a3a:	be bf       	out	0x3e, r27	; 62
   12a3c:	0f be       	out	0x3f, r0	; 63
   12a3e:	ad bf       	out	0x3d, r26	; 61
   12a40:	cf 91       	pop	r28
   12a42:	1f 91       	pop	r17
   12a44:	0f 91       	pop	r16
   12a46:	ff 90       	pop	r15
   12a48:	ef 90       	pop	r14
   12a4a:	08 95       	ret

00012a4c <print_tok>:
   12a4c:	0f 93       	push	r16
   12a4e:	1f 93       	push	r17
   12a50:	cf 93       	push	r28
   12a52:	00 d0       	rcall	.+0      	; 0x12a54 <print_tok+0x8>
   12a54:	00 d0       	rcall	.+0      	; 0x12a56 <print_tok+0xa>
   12a56:	1f 92       	push	r1
   12a58:	c6 2f       	mov	r28, r22
   12a5a:	64 df       	rcall	.-312    	; 0x12924 <tok_name>
   12a5c:	8c 01       	movw	r16, r24
   12a5e:	cc 23       	and	r28, r28
   12a60:	31 f0       	breq	.+12     	; 0x12a6e <print_tok+0x22>
   12a62:	80 e2       	ldi	r24, 0x20	; 32
   12a64:	90 e0       	ldi	r25, 0x00	; 0
   12a66:	0e 94 ef 77 	call	0xefde	; 0xefde <putchar>
   12a6a:	c1 50       	subi	r28, 0x01	; 1
   12a6c:	f8 cf       	rjmp	.-16     	; 0x12a5e <print_tok+0x12>
   12a6e:	ed b7       	in	r30, 0x3d	; 61
   12a70:	fe b7       	in	r31, 0x3e	; 62
   12a72:	15 83       	std	Z+5, r17	; 0x05
   12a74:	04 83       	std	Z+4, r16	; 0x04
   12a76:	87 ec       	ldi	r24, 0xC7	; 199
   12a78:	9d e1       	ldi	r25, 0x1D	; 29
   12a7a:	a0 e0       	ldi	r26, 0x00	; 0
   12a7c:	81 83       	std	Z+1, r24	; 0x01
   12a7e:	92 83       	std	Z+2, r25	; 0x02
   12a80:	a3 83       	std	Z+3, r26	; 0x03
   12a82:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12a86:	0f 90       	pop	r0
   12a88:	0f 90       	pop	r0
   12a8a:	0f 90       	pop	r0
   12a8c:	0f 90       	pop	r0
   12a8e:	0f 90       	pop	r0
   12a90:	cf 91       	pop	r28
   12a92:	1f 91       	pop	r17
   12a94:	0f 91       	pop	r16
   12a96:	08 95       	ret

00012a98 <display_Addresses>:
   12a98:	2f 92       	push	r2
   12a9a:	3f 92       	push	r3
   12a9c:	4f 92       	push	r4
   12a9e:	6f 92       	push	r6
   12aa0:	7f 92       	push	r7
   12aa2:	8f 92       	push	r8
   12aa4:	cf 92       	push	r12
   12aa6:	df 92       	push	r13
   12aa8:	ef 92       	push	r14
   12aaa:	cf 93       	push	r28
   12aac:	df 93       	push	r29
   12aae:	cd b7       	in	r28, 0x3d	; 61
   12ab0:	de b7       	in	r29, 0x3e	; 62
   12ab2:	2a 97       	sbiw	r28, 0x0a	; 10
   12ab4:	0f b6       	in	r0, 0x3f	; 63
   12ab6:	f8 94       	cli
   12ab8:	de bf       	out	0x3e, r29	; 62
   12aba:	0f be       	out	0x3f, r0	; 63
   12abc:	cd bf       	out	0x3d, r28	; 61
   12abe:	81 e9       	ldi	r24, 0x91	; 145
   12ac0:	9a e1       	ldi	r25, 0x1A	; 26
   12ac2:	a0 e0       	ldi	r26, 0x00	; 0
   12ac4:	ed b7       	in	r30, 0x3d	; 61
   12ac6:	fe b7       	in	r31, 0x3e	; 62
   12ac8:	81 83       	std	Z+1, r24	; 0x01
   12aca:	92 83       	std	Z+2, r25	; 0x02
   12acc:	a3 83       	std	Z+3, r26	; 0x03
   12ace:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12ad2:	20 e0       	ldi	r18, 0x00	; 0
   12ad4:	3f e1       	ldi	r19, 0x1F	; 31
   12ad6:	3a 87       	std	Y+10, r19	; 0x0a
   12ad8:	29 87       	std	Y+9, r18	; 0x09
   12ada:	83 e7       	ldi	r24, 0x73	; 115
   12adc:	9a e1       	ldi	r25, 0x1A	; 26
   12ade:	6c 01       	movw	r12, r24
   12ae0:	e1 2c       	mov	r14, r1
   12ae2:	85 e7       	ldi	r24, 0x75	; 117
   12ae4:	9a e1       	ldi	r25, 0x1A	; 26
   12ae6:	3c 01       	movw	r6, r24
   12ae8:	81 2c       	mov	r8, r1
   12aea:	8e e7       	ldi	r24, 0x7E	; 126
   12aec:	9a e1       	ldi	r25, 0x1A	; 26
   12aee:	1c 01       	movw	r2, r24
   12af0:	41 2c       	mov	r4, r1
   12af2:	88 e8       	ldi	r24, 0x88	; 136
   12af4:	9a e1       	ldi	r25, 0x1A	; 26
   12af6:	9c 01       	movw	r18, r24
   12af8:	40 e0       	ldi	r20, 0x00	; 0
   12afa:	2e 83       	std	Y+6, r18	; 0x06
   12afc:	3f 83       	std	Y+7, r19	; 0x07
   12afe:	48 87       	std	Y+8, r20	; 0x08
   12b00:	e9 85       	ldd	r30, Y+9	; 0x09
   12b02:	fa 85       	ldd	r31, Y+10	; 0x0a
   12b04:	80 81       	ld	r24, Z
   12b06:	88 23       	and	r24, r24
   12b08:	09 f4       	brne	.+2      	; 0x12b0c <display_Addresses+0x74>
   12b0a:	7b c0       	rjmp	.+246    	; 0x12c02 <display_Addresses+0x16a>
   12b0c:	83 30       	cpi	r24, 0x03	; 3
   12b0e:	21 f0       	breq	.+8      	; 0x12b18 <display_Addresses+0x80>
   12b10:	81 30       	cpi	r24, 0x01	; 1
   12b12:	09 f0       	breq	.+2      	; 0x12b16 <display_Addresses+0x7e>
   12b14:	5a c0       	rjmp	.+180    	; 0x12bca <display_Addresses+0x132>
   12b16:	1f c0       	rjmp	.+62     	; 0x12b56 <display_Addresses+0xbe>
   12b18:	e9 85       	ldd	r30, Y+9	; 0x09
   12b1a:	fa 85       	ldd	r31, Y+10	; 0x0a
   12b1c:	87 a1       	ldd	r24, Z+39	; 0x27
   12b1e:	90 a5       	ldd	r25, Z+40	; 0x28
   12b20:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <SS80p+0x1>
   12b24:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <SS80p>
   12b28:	cf 01       	movw	r24, r30
   12b2a:	07 96       	adiw	r24, 0x07	; 7
   12b2c:	ed b7       	in	r30, 0x3d	; 61
   12b2e:	fe b7       	in	r31, 0x3e	; 62
   12b30:	95 83       	std	Z+5, r25	; 0x05
   12b32:	84 83       	std	Z+4, r24	; 0x04
   12b34:	2e 81       	ldd	r18, Y+6	; 0x06
   12b36:	3f 81       	ldd	r19, Y+7	; 0x07
   12b38:	48 85       	ldd	r20, Y+8	; 0x08
   12b3a:	21 83       	std	Z+1, r18	; 0x01
   12b3c:	32 83       	std	Z+2, r19	; 0x02
   12b3e:	43 83       	std	Z+3, r20	; 0x03
   12b40:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12b44:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   12b48:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   12b4c:	42 81       	ldd	r20, Z+2	; 0x02
   12b4e:	53 81       	ldd	r21, Z+3	; 0x03
   12b50:	64 e0       	ldi	r22, 0x04	; 4
   12b52:	82 e1       	ldi	r24, 0x12	; 18
   12b54:	46 df       	rcall	.-372    	; 0x129e2 <print_tok_str>
   12b56:	e9 85       	ldd	r30, Y+9	; 0x09
   12b58:	fa 85       	ldd	r31, Y+10	; 0x0a
   12b5a:	80 81       	ld	r24, Z
   12b5c:	81 30       	cpi	r24, 0x01	; 1
   12b5e:	d1 f4       	brne	.+52     	; 0x12b94 <display_Addresses+0xfc>
   12b60:	87 a1       	ldd	r24, Z+39	; 0x27
   12b62:	90 a5       	ldd	r25, Z+40	; 0x28
   12b64:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <AMIGOp+0x1>
   12b68:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <AMIGOp>
   12b6c:	cf 01       	movw	r24, r30
   12b6e:	07 96       	adiw	r24, 0x07	; 7
   12b70:	ed b7       	in	r30, 0x3d	; 61
   12b72:	fe b7       	in	r31, 0x3e	; 62
   12b74:	95 83       	std	Z+5, r25	; 0x05
   12b76:	84 83       	std	Z+4, r24	; 0x04
   12b78:	21 82       	std	Z+1, r2	; 0x01
   12b7a:	32 82       	std	Z+2, r3	; 0x02
   12b7c:	43 82       	std	Z+3, r4	; 0x03
   12b7e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12b82:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   12b86:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   12b8a:	42 81       	ldd	r20, Z+2	; 0x02
   12b8c:	53 81       	ldd	r21, Z+3	; 0x03
   12b8e:	64 e0       	ldi	r22, 0x04	; 4
   12b90:	82 e1       	ldi	r24, 0x12	; 18
   12b92:	27 df       	rcall	.-434    	; 0x129e2 <print_tok_str>
   12b94:	e9 85       	ldd	r30, Y+9	; 0x09
   12b96:	fa 85       	ldd	r31, Y+10	; 0x0a
   12b98:	21 81       	ldd	r18, Z+1	; 0x01
   12b9a:	30 e0       	ldi	r19, 0x00	; 0
   12b9c:	40 e0       	ldi	r20, 0x00	; 0
   12b9e:	50 e0       	ldi	r21, 0x00	; 0
   12ba0:	64 e0       	ldi	r22, 0x04	; 4
   12ba2:	81 e0       	ldi	r24, 0x01	; 1
   12ba4:	de de       	rcall	.-580    	; 0x12962 <print_tok_val>
   12ba6:	e9 85       	ldd	r30, Y+9	; 0x09
   12ba8:	fa 85       	ldd	r31, Y+10	; 0x0a
   12baa:	22 81       	ldd	r18, Z+2	; 0x02
   12bac:	30 e0       	ldi	r19, 0x00	; 0
   12bae:	40 e0       	ldi	r20, 0x00	; 0
   12bb0:	50 e0       	ldi	r21, 0x00	; 0
   12bb2:	64 e0       	ldi	r22, 0x04	; 4
   12bb4:	8f e1       	ldi	r24, 0x1F	; 31
   12bb6:	d5 de       	rcall	.-598    	; 0x12962 <print_tok_val>
   12bb8:	e9 85       	ldd	r30, Y+9	; 0x09
   12bba:	fa 85       	ldd	r31, Y+10	; 0x0a
   12bbc:	23 81       	ldd	r18, Z+3	; 0x03
   12bbe:	34 81       	ldd	r19, Z+4	; 0x04
   12bc0:	45 81       	ldd	r20, Z+5	; 0x05
   12bc2:	56 81       	ldd	r21, Z+6	; 0x06
   12bc4:	64 e0       	ldi	r22, 0x04	; 4
   12bc6:	83 e0       	ldi	r24, 0x03	; 3
   12bc8:	cc de       	rcall	.-616    	; 0x12962 <print_tok_val>
   12bca:	e9 85       	ldd	r30, Y+9	; 0x09
   12bcc:	fa 85       	ldd	r31, Y+10	; 0x0a
   12bce:	80 81       	ld	r24, Z
   12bd0:	84 30       	cpi	r24, 0x04	; 4
   12bd2:	81 f4       	brne	.+32     	; 0x12bf4 <display_Addresses+0x15c>
   12bd4:	ed b7       	in	r30, 0x3d	; 61
   12bd6:	fe b7       	in	r31, 0x3e	; 62
   12bd8:	61 82       	std	Z+1, r6	; 0x01
   12bda:	72 82       	std	Z+2, r7	; 0x02
   12bdc:	83 82       	std	Z+3, r8	; 0x03
   12bde:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12be2:	e9 85       	ldd	r30, Y+9	; 0x09
   12be4:	fa 85       	ldd	r31, Y+10	; 0x0a
   12be6:	21 81       	ldd	r18, Z+1	; 0x01
   12be8:	30 e0       	ldi	r19, 0x00	; 0
   12bea:	40 e0       	ldi	r20, 0x00	; 0
   12bec:	50 e0       	ldi	r21, 0x00	; 0
   12bee:	64 e0       	ldi	r22, 0x04	; 4
   12bf0:	81 e0       	ldi	r24, 0x01	; 1
   12bf2:	b7 de       	rcall	.-658    	; 0x12962 <print_tok_val>
   12bf4:	ed b7       	in	r30, 0x3d	; 61
   12bf6:	fe b7       	in	r31, 0x3e	; 62
   12bf8:	c1 82       	std	Z+1, r12	; 0x01
   12bfa:	d2 82       	std	Z+2, r13	; 0x02
   12bfc:	e3 82       	std	Z+3, r14	; 0x03
   12bfe:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12c02:	29 85       	ldd	r18, Y+9	; 0x09
   12c04:	3a 85       	ldd	r19, Y+10	; 0x0a
   12c06:	25 5d       	subi	r18, 0xD5	; 213
   12c08:	3f 4f       	sbci	r19, 0xFF	; 255
   12c0a:	3a 87       	std	Y+10, r19	; 0x0a
   12c0c:	29 87       	std	Y+9, r18	; 0x09
   12c0e:	24 50       	subi	r18, 0x04	; 4
   12c10:	31 42       	sbci	r19, 0x21	; 33
   12c12:	09 f0       	breq	.+2      	; 0x12c16 <display_Addresses+0x17e>
   12c14:	75 cf       	rjmp	.-278    	; 0x12b00 <display_Addresses+0x68>
   12c16:	81 e7       	ldi	r24, 0x71	; 113
   12c18:	9a e1       	ldi	r25, 0x1A	; 26
   12c1a:	a0 e0       	ldi	r26, 0x00	; 0
   12c1c:	ed b7       	in	r30, 0x3d	; 61
   12c1e:	fe b7       	in	r31, 0x3e	; 62
   12c20:	81 83       	std	Z+1, r24	; 0x01
   12c22:	92 83       	std	Z+2, r25	; 0x02
   12c24:	a3 83       	std	Z+3, r26	; 0x03
   12c26:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12c2a:	2a 96       	adiw	r28, 0x0a	; 10
   12c2c:	0f b6       	in	r0, 0x3f	; 63
   12c2e:	f8 94       	cli
   12c30:	de bf       	out	0x3e, r29	; 62
   12c32:	0f be       	out	0x3f, r0	; 63
   12c34:	cd bf       	out	0x3d, r28	; 61
   12c36:	df 91       	pop	r29
   12c38:	cf 91       	pop	r28
   12c3a:	ef 90       	pop	r14
   12c3c:	df 90       	pop	r13
   12c3e:	cf 90       	pop	r12
   12c40:	8f 90       	pop	r8
   12c42:	7f 90       	pop	r7
   12c44:	6f 90       	pop	r6
   12c46:	4f 90       	pop	r4
   12c48:	3f 90       	pop	r3
   12c4a:	2f 90       	pop	r2
   12c4c:	08 95       	ret

00012c4e <display_Config>:
   12c4e:	2f 92       	push	r2
   12c50:	3f 92       	push	r3
   12c52:	4f 92       	push	r4
   12c54:	6f 92       	push	r6
   12c56:	7f 92       	push	r7
   12c58:	8f 92       	push	r8
   12c5a:	af 92       	push	r10
   12c5c:	bf 92       	push	r11
   12c5e:	cf 92       	push	r12
   12c60:	df 92       	push	r13
   12c62:	ef 92       	push	r14
   12c64:	0f 93       	push	r16
   12c66:	1f 93       	push	r17
   12c68:	cf 93       	push	r28
   12c6a:	df 93       	push	r29
   12c6c:	cd b7       	in	r28, 0x3d	; 61
   12c6e:	de b7       	in	r29, 0x3e	; 62
   12c70:	62 97       	sbiw	r28, 0x12	; 18
   12c72:	0f b6       	in	r0, 0x3f	; 63
   12c74:	f8 94       	cli
   12c76:	de bf       	out	0x3e, r29	; 62
   12c78:	0f be       	out	0x3f, r0	; 63
   12c7a:	cd bf       	out	0x3d, r28	; 61
   12c7c:	5c 01       	movw	r10, r24
   12c7e:	81 e5       	ldi	r24, 0x51	; 81
   12c80:	9a e1       	ldi	r25, 0x1A	; 26
   12c82:	a0 e0       	ldi	r26, 0x00	; 0
   12c84:	ed b7       	in	r30, 0x3d	; 61
   12c86:	fe b7       	in	r31, 0x3e	; 62
   12c88:	81 83       	std	Z+1, r24	; 0x01
   12c8a:	92 83       	std	Z+2, r25	; 0x02
   12c8c:	a3 83       	std	Z+3, r26	; 0x03
   12c8e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12c92:	00 e0       	ldi	r16, 0x00	; 0
   12c94:	1f e1       	ldi	r17, 0x1F	; 31
   12c96:	86 ed       	ldi	r24, 0xD6	; 214
   12c98:	99 e1       	ldi	r25, 0x19	; 25
   12c9a:	9c 01       	movw	r18, r24
   12c9c:	40 e0       	ldi	r20, 0x00	; 0
   12c9e:	28 87       	std	Y+8, r18	; 0x08
   12ca0:	39 87       	std	Y+9, r19	; 0x09
   12ca2:	4a 87       	std	Y+10, r20	; 0x0a
   12ca4:	8b e0       	ldi	r24, 0x0B	; 11
   12ca6:	9a e1       	ldi	r25, 0x1A	; 26
   12ca8:	9c 01       	movw	r18, r24
   12caa:	40 e0       	ldi	r20, 0x00	; 0
   12cac:	2b 87       	std	Y+11, r18	; 0x0b
   12cae:	3c 87       	std	Y+12, r19	; 0x0c
   12cb0:	4d 87       	std	Y+13, r20	; 0x0d
   12cb2:	8c ee       	ldi	r24, 0xEC	; 236
   12cb4:	99 e1       	ldi	r25, 0x19	; 25
   12cb6:	9c 01       	movw	r18, r24
   12cb8:	40 e0       	ldi	r20, 0x00	; 0
   12cba:	2e 87       	std	Y+14, r18	; 0x0e
   12cbc:	3f 87       	std	Y+15, r19	; 0x0f
   12cbe:	48 8b       	std	Y+16, r20	; 0x10
   12cc0:	88 ed       	ldi	r24, 0xD8	; 216
   12cc2:	99 e1       	ldi	r25, 0x19	; 25
   12cc4:	1c 01       	movw	r2, r24
   12cc6:	41 2c       	mov	r4, r1
   12cc8:	88 e4       	ldi	r24, 0x48	; 72
   12cca:	9a e1       	ldi	r25, 0x1A	; 26
   12ccc:	6c 01       	movw	r12, r24
   12cce:	e1 2c       	mov	r14, r1
   12cd0:	89 e2       	ldi	r24, 0x29	; 41
   12cd2:	9a e1       	ldi	r25, 0x1A	; 26
   12cd4:	3c 01       	movw	r6, r24
   12cd6:	81 2c       	mov	r8, r1
   12cd8:	f8 01       	movw	r30, r16
   12cda:	80 81       	ld	r24, Z
   12cdc:	88 23       	and	r24, r24
   12cde:	09 f4       	brne	.+2      	; 0x12ce2 <display_Config+0x94>
   12ce0:	14 c2       	rjmp	.+1064   	; 0x1310a <display_Config+0x4bc>
   12ce2:	83 30       	cpi	r24, 0x03	; 3
   12ce4:	09 f0       	breq	.+2      	; 0x12ce8 <display_Config+0x9a>
   12ce6:	38 c1       	rjmp	.+624    	; 0x12f58 <display_Config+0x30a>
   12ce8:	27 a1       	ldd	r18, Z+39	; 0x27
   12cea:	30 a5       	ldd	r19, Z+40	; 0x28
   12cec:	3a 8b       	std	Y+18, r19	; 0x12
   12cee:	29 8b       	std	Y+17, r18	; 0x11
   12cf0:	c8 01       	movw	r24, r16
   12cf2:	07 96       	adiw	r24, 0x07	; 7
   12cf4:	ed b7       	in	r30, 0x3d	; 61
   12cf6:	fe b7       	in	r31, 0x3e	; 62
   12cf8:	95 83       	std	Z+5, r25	; 0x05
   12cfa:	84 83       	std	Z+4, r24	; 0x04
   12cfc:	c1 82       	std	Z+1, r12	; 0x01
   12cfe:	d2 82       	std	Z+2, r13	; 0x02
   12d00:	e3 82       	std	Z+3, r14	; 0x03
   12d02:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12d06:	e9 89       	ldd	r30, Y+17	; 0x11
   12d08:	fa 89       	ldd	r31, Y+18	; 0x12
   12d0a:	80 81       	ld	r24, Z
   12d0c:	90 e0       	ldi	r25, 0x00	; 0
   12d0e:	ed b7       	in	r30, 0x3d	; 61
   12d10:	fe b7       	in	r31, 0x3e	; 62
   12d12:	95 83       	std	Z+5, r25	; 0x05
   12d14:	84 83       	std	Z+4, r24	; 0x04
   12d16:	61 82       	std	Z+1, r6	; 0x01
   12d18:	72 82       	std	Z+2, r7	; 0x02
   12d1a:	83 82       	std	Z+3, r8	; 0x03
   12d1c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12d20:	64 e0       	ldi	r22, 0x04	; 4
   12d22:	89 e0       	ldi	r24, 0x09	; 9
   12d24:	93 de       	rcall	.-730    	; 0x12a4c <print_tok>
   12d26:	e9 89       	ldd	r30, Y+17	; 0x11
   12d28:	fa 89       	ldd	r31, Y+18	; 0x12
   12d2a:	20 81       	ld	r18, Z
   12d2c:	30 e0       	ldi	r19, 0x00	; 0
   12d2e:	40 e0       	ldi	r20, 0x00	; 0
   12d30:	50 e0       	ldi	r21, 0x00	; 0
   12d32:	68 e0       	ldi	r22, 0x08	; 8
   12d34:	81 e0       	ldi	r24, 0x01	; 1
   12d36:	15 de       	rcall	.-982    	; 0x12962 <print_tok_val>
   12d38:	e9 89       	ldd	r30, Y+17	; 0x11
   12d3a:	fa 89       	ldd	r31, Y+18	; 0x12
   12d3c:	21 81       	ldd	r18, Z+1	; 0x01
   12d3e:	30 e0       	ldi	r19, 0x00	; 0
   12d40:	40 e0       	ldi	r20, 0x00	; 0
   12d42:	50 e0       	ldi	r21, 0x00	; 0
   12d44:	68 e0       	ldi	r22, 0x08	; 8
   12d46:	8f e1       	ldi	r24, 0x1F	; 31
   12d48:	0c de       	rcall	.-1000   	; 0x12962 <print_tok_val>
   12d4a:	e9 89       	ldd	r30, Y+17	; 0x11
   12d4c:	fa 89       	ldd	r31, Y+18	; 0x12
   12d4e:	42 81       	ldd	r20, Z+2	; 0x02
   12d50:	53 81       	ldd	r21, Z+3	; 0x03
   12d52:	68 e0       	ldi	r22, 0x08	; 8
   12d54:	82 e1       	ldi	r24, 0x12	; 18
   12d56:	45 de       	rcall	.-886    	; 0x129e2 <print_tok_str>
   12d58:	64 e0       	ldi	r22, 0x04	; 4
   12d5a:	81 e1       	ldi	r24, 0x11	; 17
   12d5c:	77 de       	rcall	.-786    	; 0x12a4c <print_tok>
   12d5e:	64 e0       	ldi	r22, 0x04	; 4
   12d60:	85 e1       	ldi	r24, 0x15	; 21
   12d62:	74 de       	rcall	.-792    	; 0x12a4c <print_tok>
   12d64:	e9 89       	ldd	r30, Y+17	; 0x11
   12d66:	fa 89       	ldd	r31, Y+18	; 0x12
   12d68:	24 81       	ldd	r18, Z+4	; 0x04
   12d6a:	35 81       	ldd	r19, Z+5	; 0x05
   12d6c:	40 e0       	ldi	r20, 0x00	; 0
   12d6e:	50 e0       	ldi	r21, 0x00	; 0
   12d70:	68 e0       	ldi	r22, 0x08	; 8
   12d72:	87 e1       	ldi	r24, 0x17	; 23
   12d74:	f6 dd       	rcall	.-1044   	; 0x12962 <print_tok_val>
   12d76:	64 e0       	ldi	r22, 0x04	; 4
   12d78:	81 e1       	ldi	r24, 0x11	; 17
   12d7a:	68 de       	rcall	.-816    	; 0x12a4c <print_tok>
   12d7c:	a1 14       	cp	r10, r1
   12d7e:	b1 04       	cpc	r11, r1
   12d80:	09 f1       	breq	.+66     	; 0x12dc4 <display_Config+0x176>
   12d82:	64 e0       	ldi	r22, 0x04	; 4
   12d84:	8b e0       	ldi	r24, 0x0B	; 11
   12d86:	62 de       	rcall	.-828    	; 0x12a4c <print_tok>
   12d88:	e9 89       	ldd	r30, Y+17	; 0x11
   12d8a:	fa 89       	ldd	r31, Y+18	; 0x12
   12d8c:	26 81       	ldd	r18, Z+6	; 0x06
   12d8e:	37 81       	ldd	r19, Z+7	; 0x07
   12d90:	40 e0       	ldi	r20, 0x00	; 0
   12d92:	50 e0       	ldi	r21, 0x00	; 0
   12d94:	68 e0       	ldi	r22, 0x08	; 8
   12d96:	88 e2       	ldi	r24, 0x28	; 40
   12d98:	e4 dd       	rcall	.-1080   	; 0x12962 <print_tok_val>
   12d9a:	e9 89       	ldd	r30, Y+17	; 0x11
   12d9c:	fa 89       	ldd	r31, Y+18	; 0x12
   12d9e:	20 85       	ldd	r18, Z+8	; 0x08
   12da0:	31 85       	ldd	r19, Z+9	; 0x09
   12da2:	40 e0       	ldi	r20, 0x00	; 0
   12da4:	50 e0       	ldi	r21, 0x00	; 0
   12da6:	68 e0       	ldi	r22, 0x08	; 8
   12da8:	85 e2       	ldi	r24, 0x25	; 37
   12daa:	db dd       	rcall	.-1098   	; 0x12962 <print_tok_val>
   12dac:	e9 89       	ldd	r30, Y+17	; 0x11
   12dae:	fa 89       	ldd	r31, Y+18	; 0x12
   12db0:	22 85       	ldd	r18, Z+10	; 0x0a
   12db2:	30 e0       	ldi	r19, 0x00	; 0
   12db4:	40 e0       	ldi	r20, 0x00	; 0
   12db6:	50 e0       	ldi	r21, 0x00	; 0
   12db8:	68 e0       	ldi	r22, 0x08	; 8
   12dba:	86 e2       	ldi	r24, 0x26	; 38
   12dbc:	d2 dd       	rcall	.-1116   	; 0x12962 <print_tok_val>
   12dbe:	64 e0       	ldi	r22, 0x04	; 4
   12dc0:	81 e1       	ldi	r24, 0x11	; 17
   12dc2:	44 de       	rcall	.-888    	; 0x12a4c <print_tok>
   12dc4:	64 e0       	ldi	r22, 0x04	; 4
   12dc6:	87 e2       	ldi	r24, 0x27	; 39
   12dc8:	41 de       	rcall	.-894    	; 0x12a4c <print_tok>
   12dca:	a1 14       	cp	r10, r1
   12dcc:	b1 04       	cpc	r11, r1
   12dce:	49 f0       	breq	.+18     	; 0x12de2 <display_Config+0x194>
   12dd0:	e9 89       	ldd	r30, Y+17	; 0x11
   12dd2:	fa 89       	ldd	r31, Y+18	; 0x12
   12dd4:	23 85       	ldd	r18, Z+11	; 0x0b
   12dd6:	30 e0       	ldi	r19, 0x00	; 0
   12dd8:	40 e0       	ldi	r20, 0x00	; 0
   12dda:	50 e0       	ldi	r21, 0x00	; 0
   12ddc:	68 e0       	ldi	r22, 0x08	; 8
   12dde:	89 e2       	ldi	r24, 0x29	; 41
   12de0:	c0 dd       	rcall	.-1152   	; 0x12962 <print_tok_val>
   12de2:	e9 89       	ldd	r30, Y+17	; 0x11
   12de4:	fa 89       	ldd	r31, Y+18	; 0x12
   12de6:	24 85       	ldd	r18, Z+12	; 0x0c
   12de8:	35 85       	ldd	r19, Z+13	; 0x0d
   12dea:	46 85       	ldd	r20, Z+14	; 0x0e
   12dec:	57 85       	ldd	r21, Z+15	; 0x0f
   12dee:	68 e0       	ldi	r22, 0x08	; 8
   12df0:	8f e0       	ldi	r24, 0x0F	; 15
   12df2:	b7 dd       	rcall	.-1170   	; 0x12962 <print_tok_val>
   12df4:	a1 14       	cp	r10, r1
   12df6:	b1 04       	cpc	r11, r1
   12df8:	09 f4       	brne	.+2      	; 0x12dfc <display_Config+0x1ae>
   12dfa:	5a c0       	rjmp	.+180    	; 0x12eb0 <display_Config+0x262>
   12dfc:	e9 89       	ldd	r30, Y+17	; 0x11
   12dfe:	fa 89       	ldd	r31, Y+18	; 0x12
   12e00:	20 89       	ldd	r18, Z+16	; 0x10
   12e02:	31 89       	ldd	r19, Z+17	; 0x11
   12e04:	40 e0       	ldi	r20, 0x00	; 0
   12e06:	50 e0       	ldi	r21, 0x00	; 0
   12e08:	68 e0       	ldi	r22, 0x08	; 8
   12e0a:	87 e0       	ldi	r24, 0x07	; 7
   12e0c:	aa dd       	rcall	.-1196   	; 0x12962 <print_tok_val>
   12e0e:	e9 89       	ldd	r30, Y+17	; 0x11
   12e10:	fa 89       	ldd	r31, Y+18	; 0x12
   12e12:	22 89       	ldd	r18, Z+18	; 0x12
   12e14:	30 e0       	ldi	r19, 0x00	; 0
   12e16:	40 e0       	ldi	r20, 0x00	; 0
   12e18:	50 e0       	ldi	r21, 0x00	; 0
   12e1a:	68 e0       	ldi	r22, 0x08	; 8
   12e1c:	85 e0       	ldi	r24, 0x05	; 5
   12e1e:	a1 dd       	rcall	.-1214   	; 0x12962 <print_tok_val>
   12e20:	e9 89       	ldd	r30, Y+17	; 0x11
   12e22:	fa 89       	ldd	r31, Y+18	; 0x12
   12e24:	23 89       	ldd	r18, Z+19	; 0x13
   12e26:	30 e0       	ldi	r19, 0x00	; 0
   12e28:	40 e0       	ldi	r20, 0x00	; 0
   12e2a:	50 e0       	ldi	r21, 0x00	; 0
   12e2c:	68 e0       	ldi	r22, 0x08	; 8
   12e2e:	86 e0       	ldi	r24, 0x06	; 6
   12e30:	98 dd       	rcall	.-1232   	; 0x12962 <print_tok_val>
   12e32:	e9 89       	ldd	r30, Y+17	; 0x11
   12e34:	fa 89       	ldd	r31, Y+18	; 0x12
   12e36:	24 89       	ldd	r18, Z+20	; 0x14
   12e38:	35 89       	ldd	r19, Z+21	; 0x15
   12e3a:	40 e0       	ldi	r20, 0x00	; 0
   12e3c:	50 e0       	ldi	r21, 0x00	; 0
   12e3e:	68 e0       	ldi	r22, 0x08	; 8
   12e40:	84 e0       	ldi	r24, 0x04	; 4
   12e42:	8f dd       	rcall	.-1250   	; 0x12962 <print_tok_val>
   12e44:	e9 89       	ldd	r30, Y+17	; 0x11
   12e46:	fa 89       	ldd	r31, Y+18	; 0x12
   12e48:	26 89       	ldd	r18, Z+22	; 0x16
   12e4a:	37 89       	ldd	r19, Z+23	; 0x17
   12e4c:	40 e0       	ldi	r20, 0x00	; 0
   12e4e:	50 e0       	ldi	r21, 0x00	; 0
   12e50:	68 e0       	ldi	r22, 0x08	; 8
   12e52:	8a e0       	ldi	r24, 0x0A	; 10
   12e54:	86 dd       	rcall	.-1268   	; 0x12962 <print_tok_val>
   12e56:	e9 89       	ldd	r30, Y+17	; 0x11
   12e58:	fa 89       	ldd	r31, Y+18	; 0x12
   12e5a:	20 8d       	ldd	r18, Z+24	; 0x18
   12e5c:	31 8d       	ldd	r19, Z+25	; 0x19
   12e5e:	40 e0       	ldi	r20, 0x00	; 0
   12e60:	50 e0       	ldi	r21, 0x00	; 0
   12e62:	68 e0       	ldi	r22, 0x08	; 8
   12e64:	8e e1       	ldi	r24, 0x1E	; 30
   12e66:	7d dd       	rcall	.-1286   	; 0x12962 <print_tok_val>
   12e68:	e9 89       	ldd	r30, Y+17	; 0x11
   12e6a:	fa 89       	ldd	r31, Y+18	; 0x12
   12e6c:	22 8d       	ldd	r18, Z+26	; 0x1a
   12e6e:	33 8d       	ldd	r19, Z+27	; 0x1b
   12e70:	40 e0       	ldi	r20, 0x00	; 0
   12e72:	50 e0       	ldi	r21, 0x00	; 0
   12e74:	68 e0       	ldi	r22, 0x08	; 8
   12e76:	80 e0       	ldi	r24, 0x00	; 0
   12e78:	74 dd       	rcall	.-1304   	; 0x12962 <print_tok_val>
   12e7a:	e9 89       	ldd	r30, Y+17	; 0x11
   12e7c:	fa 89       	ldd	r31, Y+18	; 0x12
   12e7e:	24 8d       	ldd	r18, Z+28	; 0x1c
   12e80:	30 e0       	ldi	r19, 0x00	; 0
   12e82:	40 e0       	ldi	r20, 0x00	; 0
   12e84:	50 e0       	ldi	r21, 0x00	; 0
   12e86:	68 e0       	ldi	r22, 0x08	; 8
   12e88:	8c e1       	ldi	r24, 0x1C	; 28
   12e8a:	6b dd       	rcall	.-1322   	; 0x12962 <print_tok_val>
   12e8c:	e9 89       	ldd	r30, Y+17	; 0x11
   12e8e:	fa 89       	ldd	r31, Y+18	; 0x12
   12e90:	25 8d       	ldd	r18, Z+29	; 0x1d
   12e92:	30 e0       	ldi	r19, 0x00	; 0
   12e94:	40 e0       	ldi	r20, 0x00	; 0
   12e96:	50 e0       	ldi	r21, 0x00	; 0
   12e98:	68 e0       	ldi	r22, 0x08	; 8
   12e9a:	83 e1       	ldi	r24, 0x13	; 19
   12e9c:	62 dd       	rcall	.-1340   	; 0x12962 <print_tok_val>
   12e9e:	e9 89       	ldd	r30, Y+17	; 0x11
   12ea0:	fa 89       	ldd	r31, Y+18	; 0x12
   12ea2:	26 8d       	ldd	r18, Z+30	; 0x1e
   12ea4:	30 e0       	ldi	r19, 0x00	; 0
   12ea6:	40 e0       	ldi	r20, 0x00	; 0
   12ea8:	50 e0       	ldi	r21, 0x00	; 0
   12eaa:	68 e0       	ldi	r22, 0x08	; 8
   12eac:	81 e2       	ldi	r24, 0x21	; 33
   12eae:	59 dd       	rcall	.-1358   	; 0x12962 <print_tok_val>
   12eb0:	64 e0       	ldi	r22, 0x04	; 4
   12eb2:	81 e1       	ldi	r24, 0x11	; 17
   12eb4:	cb dd       	rcall	.-1130   	; 0x12a4c <print_tok>
   12eb6:	a1 14       	cp	r10, r1
   12eb8:	b1 04       	cpc	r11, r1
   12eba:	99 f1       	breq	.+102    	; 0x12f22 <display_Config+0x2d4>
   12ebc:	64 e0       	ldi	r22, 0x04	; 4
   12ebe:	8a e2       	ldi	r24, 0x2A	; 42
   12ec0:	c5 dd       	rcall	.-1142   	; 0x12a4c <print_tok>
   12ec2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ec4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ec6:	27 8d       	ldd	r18, Z+31	; 0x1f
   12ec8:	30 a1       	ldd	r19, Z+32	; 0x20
   12eca:	41 a1       	ldd	r20, Z+33	; 0x21
   12ecc:	52 a1       	ldd	r21, Z+34	; 0x22
   12ece:	68 e0       	ldi	r22, 0x08	; 8
   12ed0:	8a e1       	ldi	r24, 0x1A	; 26
   12ed2:	47 dd       	rcall	.-1394   	; 0x12962 <print_tok_val>
   12ed4:	e9 89       	ldd	r30, Y+17	; 0x11
   12ed6:	fa 89       	ldd	r31, Y+18	; 0x12
   12ed8:	23 a1       	ldd	r18, Z+35	; 0x23
   12eda:	30 e0       	ldi	r19, 0x00	; 0
   12edc:	40 e0       	ldi	r20, 0x00	; 0
   12ede:	50 e0       	ldi	r21, 0x00	; 0
   12ee0:	68 e0       	ldi	r22, 0x08	; 8
   12ee2:	8b e1       	ldi	r24, 0x1B	; 27
   12ee4:	3e dd       	rcall	.-1412   	; 0x12962 <print_tok_val>
   12ee6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ee8:	fa 89       	ldd	r31, Y+18	; 0x12
   12eea:	24 a1       	ldd	r18, Z+36	; 0x24
   12eec:	35 a1       	ldd	r19, Z+37	; 0x25
   12eee:	40 e0       	ldi	r20, 0x00	; 0
   12ef0:	50 e0       	ldi	r21, 0x00	; 0
   12ef2:	68 e0       	ldi	r22, 0x08	; 8
   12ef4:	8d e1       	ldi	r24, 0x1D	; 29
   12ef6:	35 dd       	rcall	.-1430   	; 0x12962 <print_tok_val>
   12ef8:	e9 89       	ldd	r30, Y+17	; 0x11
   12efa:	fa 89       	ldd	r31, Y+18	; 0x12
   12efc:	26 a1       	ldd	r18, Z+38	; 0x26
   12efe:	37 a1       	ldd	r19, Z+39	; 0x27
   12f00:	40 a5       	ldd	r20, Z+40	; 0x28
   12f02:	51 a5       	ldd	r21, Z+41	; 0x29
   12f04:	68 e0       	ldi	r22, 0x08	; 8
   12f06:	89 e1       	ldi	r24, 0x19	; 25
   12f08:	2c dd       	rcall	.-1448   	; 0x12962 <print_tok_val>
   12f0a:	e9 89       	ldd	r30, Y+17	; 0x11
   12f0c:	fa 89       	ldd	r31, Y+18	; 0x12
   12f0e:	22 a5       	ldd	r18, Z+42	; 0x2a
   12f10:	30 e0       	ldi	r19, 0x00	; 0
   12f12:	40 e0       	ldi	r20, 0x00	; 0
   12f14:	50 e0       	ldi	r21, 0x00	; 0
   12f16:	68 e0       	ldi	r22, 0x08	; 8
   12f18:	88 e1       	ldi	r24, 0x18	; 24
   12f1a:	23 dd       	rcall	.-1466   	; 0x12962 <print_tok_val>
   12f1c:	64 e0       	ldi	r22, 0x04	; 4
   12f1e:	81 e1       	ldi	r24, 0x11	; 17
   12f20:	95 dd       	rcall	.-1238   	; 0x12a4c <print_tok>
   12f22:	e9 89       	ldd	r30, Y+17	; 0x11
   12f24:	fa 89       	ldd	r31, Y+18	; 0x12
   12f26:	86 a1       	ldd	r24, Z+38	; 0x26
   12f28:	97 a1       	ldd	r25, Z+39	; 0x27
   12f2a:	a0 a5       	ldd	r26, Z+40	; 0x28
   12f2c:	b1 a5       	ldd	r27, Z+41	; 0x29
   12f2e:	01 96       	adiw	r24, 0x01	; 1
   12f30:	a1 1d       	adc	r26, r1
   12f32:	b1 1d       	adc	r27, r1
   12f34:	ed b7       	in	r30, 0x3d	; 61
   12f36:	fe b7       	in	r31, 0x3e	; 62
   12f38:	84 83       	std	Z+4, r24	; 0x04
   12f3a:	95 83       	std	Z+5, r25	; 0x05
   12f3c:	a6 83       	std	Z+6, r26	; 0x06
   12f3e:	b7 83       	std	Z+7, r27	; 0x07
   12f40:	25 e1       	ldi	r18, 0x15	; 21
   12f42:	3a e1       	ldi	r19, 0x1A	; 26
   12f44:	c9 01       	movw	r24, r18
   12f46:	a0 e0       	ldi	r26, 0x00	; 0
   12f48:	81 83       	std	Z+1, r24	; 0x01
   12f4a:	92 83       	std	Z+2, r25	; 0x02
   12f4c:	a3 83       	std	Z+3, r26	; 0x03
   12f4e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12f52:	60 e0       	ldi	r22, 0x00	; 0
   12f54:	81 e1       	ldi	r24, 0x11	; 17
   12f56:	7a dd       	rcall	.-1292   	; 0x12a4c <print_tok>
   12f58:	f8 01       	movw	r30, r16
   12f5a:	80 81       	ld	r24, Z
   12f5c:	81 30       	cpi	r24, 0x01	; 1
   12f5e:	09 f0       	breq	.+2      	; 0x12f62 <display_Config+0x314>
   12f60:	ad c0       	rjmp	.+346    	; 0x130bc <display_Config+0x46e>
   12f62:	27 a1       	ldd	r18, Z+39	; 0x27
   12f64:	30 a5       	ldd	r19, Z+40	; 0x28
   12f66:	3a 8b       	std	Y+18, r19	; 0x12
   12f68:	29 8b       	std	Y+17, r18	; 0x11
   12f6a:	c8 01       	movw	r24, r16
   12f6c:	07 96       	adiw	r24, 0x07	; 7
   12f6e:	ed b7       	in	r30, 0x3d	; 61
   12f70:	fe b7       	in	r31, 0x3e	; 62
   12f72:	95 83       	std	Z+5, r25	; 0x05
   12f74:	84 83       	std	Z+4, r24	; 0x04
   12f76:	2b 85       	ldd	r18, Y+11	; 0x0b
   12f78:	3c 85       	ldd	r19, Y+12	; 0x0c
   12f7a:	4d 85       	ldd	r20, Y+13	; 0x0d
   12f7c:	21 83       	std	Z+1, r18	; 0x01
   12f7e:	32 83       	std	Z+2, r19	; 0x02
   12f80:	43 83       	std	Z+3, r20	; 0x03
   12f82:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12f86:	e9 89       	ldd	r30, Y+17	; 0x11
   12f88:	fa 89       	ldd	r31, Y+18	; 0x12
   12f8a:	80 81       	ld	r24, Z
   12f8c:	90 e0       	ldi	r25, 0x00	; 0
   12f8e:	ed b7       	in	r30, 0x3d	; 61
   12f90:	fe b7       	in	r31, 0x3e	; 62
   12f92:	95 83       	std	Z+5, r25	; 0x05
   12f94:	84 83       	std	Z+4, r24	; 0x04
   12f96:	2e 85       	ldd	r18, Y+14	; 0x0e
   12f98:	3f 85       	ldd	r19, Y+15	; 0x0f
   12f9a:	48 89       	ldd	r20, Y+16	; 0x10
   12f9c:	21 83       	std	Z+1, r18	; 0x01
   12f9e:	32 83       	std	Z+2, r19	; 0x02
   12fa0:	43 83       	std	Z+3, r20	; 0x03
   12fa2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   12fa6:	64 e0       	ldi	r22, 0x04	; 4
   12fa8:	85 e1       	ldi	r24, 0x15	; 21
   12faa:	50 dd       	rcall	.-1376   	; 0x12a4c <print_tok>
   12fac:	e9 89       	ldd	r30, Y+17	; 0x11
   12fae:	fa 89       	ldd	r31, Y+18	; 0x12
   12fb0:	20 81       	ld	r18, Z
   12fb2:	30 e0       	ldi	r19, 0x00	; 0
   12fb4:	40 e0       	ldi	r20, 0x00	; 0
   12fb6:	50 e0       	ldi	r21, 0x00	; 0
   12fb8:	68 e0       	ldi	r22, 0x08	; 8
   12fba:	81 e0       	ldi	r24, 0x01	; 1
   12fbc:	d2 dc       	rcall	.-1628   	; 0x12962 <print_tok_val>
   12fbe:	e9 89       	ldd	r30, Y+17	; 0x11
   12fc0:	fa 89       	ldd	r31, Y+18	; 0x12
   12fc2:	21 81       	ldd	r18, Z+1	; 0x01
   12fc4:	30 e0       	ldi	r19, 0x00	; 0
   12fc6:	40 e0       	ldi	r20, 0x00	; 0
   12fc8:	50 e0       	ldi	r21, 0x00	; 0
   12fca:	68 e0       	ldi	r22, 0x08	; 8
   12fcc:	8f e1       	ldi	r24, 0x1F	; 31
   12fce:	c9 dc       	rcall	.-1646   	; 0x12962 <print_tok_val>
   12fd0:	e9 89       	ldd	r30, Y+17	; 0x11
   12fd2:	fa 89       	ldd	r31, Y+18	; 0x12
   12fd4:	42 81       	ldd	r20, Z+2	; 0x02
   12fd6:	53 81       	ldd	r21, Z+3	; 0x03
   12fd8:	68 e0       	ldi	r22, 0x08	; 8
   12fda:	82 e1       	ldi	r24, 0x12	; 18
   12fdc:	02 dd       	rcall	.-1532   	; 0x129e2 <print_tok_str>
   12fde:	64 e0       	ldi	r22, 0x04	; 4
   12fe0:	81 e1       	ldi	r24, 0x11	; 17
   12fe2:	34 dd       	rcall	.-1432   	; 0x12a4c <print_tok>
   12fe4:	64 e0       	ldi	r22, 0x04	; 4
   12fe6:	89 e0       	ldi	r24, 0x09	; 9
   12fe8:	31 dd       	rcall	.-1438   	; 0x12a4c <print_tok>
   12fea:	e9 89       	ldd	r30, Y+17	; 0x11
   12fec:	fa 89       	ldd	r31, Y+18	; 0x12
   12fee:	24 81       	ldd	r18, Z+4	; 0x04
   12ff0:	35 81       	ldd	r19, Z+5	; 0x05
   12ff2:	40 e0       	ldi	r20, 0x00	; 0
   12ff4:	50 e0       	ldi	r21, 0x00	; 0
   12ff6:	68 e0       	ldi	r22, 0x08	; 8
   12ff8:	87 e1       	ldi	r24, 0x17	; 23
   12ffa:	b3 dc       	rcall	.-1690   	; 0x12962 <print_tok_val>
   12ffc:	64 e0       	ldi	r22, 0x04	; 4
   12ffe:	81 e1       	ldi	r24, 0x11	; 17
   13000:	25 dd       	rcall	.-1462   	; 0x12a4c <print_tok>
   13002:	a1 14       	cp	r10, r1
   13004:	b1 04       	cpc	r11, r1
   13006:	91 f1       	breq	.+100    	; 0x1306c <display_Config+0x41e>
   13008:	64 e0       	ldi	r22, 0x04	; 4
   1300a:	84 e1       	ldi	r24, 0x14	; 20
   1300c:	1f dd       	rcall	.-1474   	; 0x12a4c <print_tok>
   1300e:	e9 89       	ldd	r30, Y+17	; 0x11
   13010:	fa 89       	ldd	r31, Y+18	; 0x12
   13012:	26 81       	ldd	r18, Z+6	; 0x06
   13014:	37 81       	ldd	r19, Z+7	; 0x07
   13016:	03 2e       	mov	r0, r19
   13018:	00 0c       	add	r0, r0
   1301a:	44 0b       	sbc	r20, r20
   1301c:	55 0b       	sbc	r21, r21
   1301e:	68 e0       	ldi	r22, 0x08	; 8
   13020:	88 e0       	ldi	r24, 0x08	; 8
   13022:	9f dc       	rcall	.-1730   	; 0x12962 <print_tok_val>
   13024:	e9 89       	ldd	r30, Y+17	; 0x11
   13026:	fa 89       	ldd	r31, Y+18	; 0x12
   13028:	20 85       	ldd	r18, Z+8	; 0x08
   1302a:	31 85       	ldd	r19, Z+9	; 0x09
   1302c:	03 2e       	mov	r0, r19
   1302e:	00 0c       	add	r0, r0
   13030:	44 0b       	sbc	r20, r20
   13032:	55 0b       	sbc	r21, r21
   13034:	68 e0       	ldi	r22, 0x08	; 8
   13036:	82 e2       	ldi	r24, 0x22	; 34
   13038:	94 dc       	rcall	.-1752   	; 0x12962 <print_tok_val>
   1303a:	e9 89       	ldd	r30, Y+17	; 0x11
   1303c:	fa 89       	ldd	r31, Y+18	; 0x12
   1303e:	22 85       	ldd	r18, Z+10	; 0x0a
   13040:	33 85       	ldd	r19, Z+11	; 0x0b
   13042:	03 2e       	mov	r0, r19
   13044:	00 0c       	add	r0, r0
   13046:	44 0b       	sbc	r20, r20
   13048:	55 0b       	sbc	r21, r21
   1304a:	68 e0       	ldi	r22, 0x08	; 8
   1304c:	86 e1       	ldi	r24, 0x16	; 22
   1304e:	89 dc       	rcall	.-1774   	; 0x12962 <print_tok_val>
   13050:	e9 89       	ldd	r30, Y+17	; 0x11
   13052:	fa 89       	ldd	r31, Y+18	; 0x12
   13054:	24 85       	ldd	r18, Z+12	; 0x0c
   13056:	35 85       	ldd	r19, Z+13	; 0x0d
   13058:	03 2e       	mov	r0, r19
   1305a:	00 0c       	add	r0, r0
   1305c:	44 0b       	sbc	r20, r20
   1305e:	55 0b       	sbc	r21, r21
   13060:	68 e0       	ldi	r22, 0x08	; 8
   13062:	8d e0       	ldi	r24, 0x0D	; 13
   13064:	7e dc       	rcall	.-1796   	; 0x12962 <print_tok_val>
   13066:	64 e0       	ldi	r22, 0x04	; 4
   13068:	81 e1       	ldi	r24, 0x11	; 17
   1306a:	f0 dc       	rcall	.-1568   	; 0x12a4c <print_tok>
   1306c:	e9 89       	ldd	r30, Y+17	; 0x11
   1306e:	fa 89       	ldd	r31, Y+18	; 0x12
   13070:	44 85       	ldd	r20, Z+12	; 0x0c
   13072:	55 85       	ldd	r21, Z+13	; 0x0d
   13074:	20 85       	ldd	r18, Z+8	; 0x08
   13076:	31 85       	ldd	r19, Z+9	; 0x09
   13078:	42 9f       	mul	r20, r18
   1307a:	c0 01       	movw	r24, r0
   1307c:	43 9f       	mul	r20, r19
   1307e:	90 0d       	add	r25, r0
   13080:	52 9f       	mul	r21, r18
   13082:	90 0d       	add	r25, r0
   13084:	11 24       	eor	r1, r1
   13086:	42 85       	ldd	r20, Z+10	; 0x0a
   13088:	53 85       	ldd	r21, Z+11	; 0x0b
   1308a:	84 9f       	mul	r24, r20
   1308c:	90 01       	movw	r18, r0
   1308e:	85 9f       	mul	r24, r21
   13090:	30 0d       	add	r19, r0
   13092:	94 9f       	mul	r25, r20
   13094:	30 0d       	add	r19, r0
   13096:	11 24       	eor	r1, r1
   13098:	c9 01       	movw	r24, r18
   1309a:	33 0f       	add	r19, r19
   1309c:	aa 0b       	sbc	r26, r26
   1309e:	bb 0b       	sbc	r27, r27
   130a0:	ed b7       	in	r30, 0x3d	; 61
   130a2:	fe b7       	in	r31, 0x3e	; 62
   130a4:	84 83       	std	Z+4, r24	; 0x04
   130a6:	95 83       	std	Z+5, r25	; 0x05
   130a8:	a6 83       	std	Z+6, r26	; 0x06
   130aa:	b7 83       	std	Z+7, r27	; 0x07
   130ac:	21 82       	std	Z+1, r2	; 0x01
   130ae:	32 82       	std	Z+2, r3	; 0x02
   130b0:	43 82       	std	Z+3, r4	; 0x03
   130b2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   130b6:	60 e0       	ldi	r22, 0x00	; 0
   130b8:	81 e1       	ldi	r24, 0x11	; 17
   130ba:	c8 dc       	rcall	.-1648   	; 0x12a4c <print_tok>
   130bc:	f8 01       	movw	r30, r16
   130be:	80 81       	ld	r24, Z
   130c0:	84 30       	cpi	r24, 0x04	; 4
   130c2:	c9 f4       	brne	.+50     	; 0x130f6 <display_Config+0x4a8>
   130c4:	27 a1       	ldd	r18, Z+39	; 0x27
   130c6:	30 a5       	ldd	r19, Z+40	; 0x28
   130c8:	3a 8b       	std	Y+18, r19	; 0x12
   130ca:	29 8b       	std	Y+17, r18	; 0x11
   130cc:	60 e0       	ldi	r22, 0x00	; 0
   130ce:	80 e2       	ldi	r24, 0x20	; 32
   130d0:	bd dc       	rcall	.-1670   	; 0x12a4c <print_tok>
   130d2:	64 e0       	ldi	r22, 0x04	; 4
   130d4:	89 e0       	ldi	r24, 0x09	; 9
   130d6:	ba dc       	rcall	.-1676   	; 0x12a4c <print_tok>
   130d8:	e9 89       	ldd	r30, Y+17	; 0x11
   130da:	fa 89       	ldd	r31, Y+18	; 0x12
   130dc:	20 81       	ld	r18, Z
   130de:	30 e0       	ldi	r19, 0x00	; 0
   130e0:	40 e0       	ldi	r20, 0x00	; 0
   130e2:	50 e0       	ldi	r21, 0x00	; 0
   130e4:	68 e0       	ldi	r22, 0x08	; 8
   130e6:	81 e0       	ldi	r24, 0x01	; 1
   130e8:	3c dc       	rcall	.-1928   	; 0x12962 <print_tok_val>
   130ea:	64 e0       	ldi	r22, 0x04	; 4
   130ec:	81 e1       	ldi	r24, 0x11	; 17
   130ee:	ae dc       	rcall	.-1700   	; 0x12a4c <print_tok>
   130f0:	60 e0       	ldi	r22, 0x00	; 0
   130f2:	81 e1       	ldi	r24, 0x11	; 17
   130f4:	ab dc       	rcall	.-1706   	; 0x12a4c <print_tok>
   130f6:	28 85       	ldd	r18, Y+8	; 0x08
   130f8:	39 85       	ldd	r19, Y+9	; 0x09
   130fa:	4a 85       	ldd	r20, Y+10	; 0x0a
   130fc:	ed b7       	in	r30, 0x3d	; 61
   130fe:	fe b7       	in	r31, 0x3e	; 62
   13100:	21 83       	std	Z+1, r18	; 0x01
   13102:	32 83       	std	Z+2, r19	; 0x02
   13104:	43 83       	std	Z+3, r20	; 0x03
   13106:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1310a:	05 5d       	subi	r16, 0xD5	; 213
   1310c:	1f 4f       	sbci	r17, 0xFF	; 255
   1310e:	24 e0       	ldi	r18, 0x04	; 4
   13110:	31 e2       	ldi	r19, 0x21	; 33
   13112:	20 17       	cp	r18, r16
   13114:	31 07       	cpc	r19, r17
   13116:	09 f0       	breq	.+2      	; 0x1311a <display_Config+0x4cc>
   13118:	df cd       	rjmp	.-1090   	; 0x12cd8 <display_Config+0x8a>
   1311a:	84 ed       	ldi	r24, 0xD4	; 212
   1311c:	99 e1       	ldi	r25, 0x19	; 25
   1311e:	a0 e0       	ldi	r26, 0x00	; 0
   13120:	ed b7       	in	r30, 0x3d	; 61
   13122:	fe b7       	in	r31, 0x3e	; 62
   13124:	81 83       	std	Z+1, r24	; 0x01
   13126:	92 83       	std	Z+2, r25	; 0x02
   13128:	a3 83       	std	Z+3, r26	; 0x03
   1312a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1312e:	62 96       	adiw	r28, 0x12	; 18
   13130:	0f b6       	in	r0, 0x3f	; 63
   13132:	f8 94       	cli
   13134:	de bf       	out	0x3e, r29	; 62
   13136:	0f be       	out	0x3f, r0	; 63
   13138:	cd bf       	out	0x3d, r28	; 61
   1313a:	df 91       	pop	r29
   1313c:	cf 91       	pop	r28
   1313e:	1f 91       	pop	r17
   13140:	0f 91       	pop	r16
   13142:	ef 90       	pop	r14
   13144:	df 90       	pop	r13
   13146:	cf 90       	pop	r12
   13148:	bf 90       	pop	r11
   1314a:	af 90       	pop	r10
   1314c:	8f 90       	pop	r8
   1314e:	7f 90       	pop	r7
   13150:	6f 90       	pop	r6
   13152:	4f 90       	pop	r4
   13154:	3f 90       	pop	r3
   13156:	2f 90       	pop	r2
   13158:	08 95       	ret

0001315a <find_type>:
   1315a:	e0 e0       	ldi	r30, 0x00	; 0
   1315c:	ff e1       	ldi	r31, 0x1F	; 31
   1315e:	20 e0       	ldi	r18, 0x00	; 0
   13160:	30 e0       	ldi	r19, 0x00	; 0
   13162:	40 81       	ld	r20, Z
   13164:	50 e0       	ldi	r21, 0x00	; 0
   13166:	48 17       	cp	r20, r24
   13168:	59 07       	cpc	r21, r25
   1316a:	49 f0       	breq	.+18     	; 0x1317e <find_type+0x24>
   1316c:	2f 5f       	subi	r18, 0xFF	; 255
   1316e:	3f 4f       	sbci	r19, 0xFF	; 255
   13170:	bb 96       	adiw	r30, 0x2b	; 43
   13172:	2c 30       	cpi	r18, 0x0C	; 12
   13174:	31 05       	cpc	r19, r1
   13176:	a9 f7       	brne	.-22     	; 0x13162 <find_type+0x8>
   13178:	8f ef       	ldi	r24, 0xFF	; 255
   1317a:	9f ef       	ldi	r25, 0xFF	; 255
   1317c:	08 95       	ret
   1317e:	c9 01       	movw	r24, r18
   13180:	08 95       	ret

00013182 <count_drive_types>:
   13182:	28 2f       	mov	r18, r24
   13184:	e0 e0       	ldi	r30, 0x00	; 0
   13186:	ff e1       	ldi	r31, 0x1F	; 31
   13188:	80 e0       	ldi	r24, 0x00	; 0
   1318a:	90 e0       	ldi	r25, 0x00	; 0
   1318c:	30 81       	ld	r19, Z
   1318e:	32 13       	cpse	r19, r18
   13190:	01 c0       	rjmp	.+2      	; 0x13194 <count_drive_types+0x12>
   13192:	01 96       	adiw	r24, 0x01	; 1
   13194:	bb 96       	adiw	r30, 0x2b	; 43
   13196:	31 e2       	ldi	r19, 0x21	; 33
   13198:	e4 30       	cpi	r30, 0x04	; 4
   1319a:	f3 07       	cpc	r31, r19
   1319c:	b9 f7       	brne	.-18     	; 0x1318c <count_drive_types+0xa>
   1319e:	08 95       	ret

000131a0 <type_to_str>:
   131a0:	00 97       	sbiw	r24, 0x00	; 0
   131a2:	59 f0       	breq	.+22     	; 0x131ba <type_to_str+0x1a>
   131a4:	81 30       	cpi	r24, 0x01	; 1
   131a6:	91 05       	cpc	r25, r1
   131a8:	59 f0       	breq	.+22     	; 0x131c0 <type_to_str+0x20>
   131aa:	83 30       	cpi	r24, 0x03	; 3
   131ac:	91 05       	cpc	r25, r1
   131ae:	59 f0       	breq	.+22     	; 0x131c6 <type_to_str+0x26>
   131b0:	04 97       	sbiw	r24, 0x04	; 4
   131b2:	61 f0       	breq	.+24     	; 0x131cc <type_to_str+0x2c>
   131b4:	8b e2       	ldi	r24, 0x2B	; 43
   131b6:	9e e0       	ldi	r25, 0x0E	; 14
   131b8:	08 95       	ret
   131ba:	81 e0       	ldi	r24, 0x01	; 1
   131bc:	9e e0       	ldi	r25, 0x0E	; 14
   131be:	08 95       	ret
   131c0:	89 e0       	ldi	r24, 0x09	; 9
   131c2:	9e e0       	ldi	r25, 0x0E	; 14
   131c4:	08 95       	ret
   131c6:	81 e2       	ldi	r24, 0x21	; 33
   131c8:	9e e0       	ldi	r25, 0x0E	; 14
   131ca:	08 95       	ret
   131cc:	84 e1       	ldi	r24, 0x14	; 20
   131ce:	9e e0       	ldi	r25, 0x0E	; 14
   131d0:	08 95       	ret

000131d2 <find_free>:
   131d2:	80 e0       	ldi	r24, 0x00	; 0
   131d4:	90 e0       	ldi	r25, 0x00	; 0
   131d6:	c1 cf       	rjmp	.-126    	; 0x1315a <find_type>
   131d8:	08 95       	ret

000131da <find_device>:
   131da:	9b 01       	movw	r18, r22
   131dc:	20 52       	subi	r18, 0x20	; 32
   131de:	31 09       	sbc	r19, r1
   131e0:	2f 35       	cpi	r18, 0x5F	; 95
   131e2:	31 05       	cpc	r19, r1
   131e4:	f8 f4       	brcc	.+62     	; 0x13224 <find_device+0x4a>
   131e6:	64 17       	cp	r22, r20
   131e8:	75 07       	cpc	r23, r21
   131ea:	e4 f0       	brlt	.+56     	; 0x13224 <find_device+0x4a>
   131ec:	9a 01       	movw	r18, r20
   131ee:	22 5e       	subi	r18, 0xE2	; 226
   131f0:	3f 4f       	sbci	r19, 0xFF	; 255
   131f2:	26 17       	cp	r18, r22
   131f4:	37 07       	cpc	r19, r23
   131f6:	b4 f0       	brlt	.+44     	; 0x13224 <find_device+0x4a>
   131f8:	64 1b       	sub	r22, r20
   131fa:	75 0b       	sbc	r23, r21
   131fc:	e0 e0       	ldi	r30, 0x00	; 0
   131fe:	ff e1       	ldi	r31, 0x1F	; 31
   13200:	20 e0       	ldi	r18, 0x00	; 0
   13202:	30 e0       	ldi	r19, 0x00	; 0
   13204:	40 81       	ld	r20, Z
   13206:	50 e0       	ldi	r21, 0x00	; 0
   13208:	48 17       	cp	r20, r24
   1320a:	59 07       	cpc	r21, r25
   1320c:	29 f4       	brne	.+10     	; 0x13218 <find_device+0x3e>
   1320e:	41 81       	ldd	r20, Z+1	; 0x01
   13210:	50 e0       	ldi	r21, 0x00	; 0
   13212:	64 17       	cp	r22, r20
   13214:	75 07       	cpc	r23, r21
   13216:	49 f0       	breq	.+18     	; 0x1322a <find_device+0x50>
   13218:	2f 5f       	subi	r18, 0xFF	; 255
   1321a:	3f 4f       	sbci	r19, 0xFF	; 255
   1321c:	bb 96       	adiw	r30, 0x2b	; 43
   1321e:	2c 30       	cpi	r18, 0x0C	; 12
   13220:	31 05       	cpc	r19, r1
   13222:	81 f7       	brne	.-32     	; 0x13204 <find_device+0x2a>
   13224:	8f ef       	ldi	r24, 0xFF	; 255
   13226:	9f ef       	ldi	r25, 0xFF	; 255
   13228:	08 95       	ret
   1322a:	c9 01       	movw	r24, r18
   1322c:	08 95       	ret

0001322e <set_active_device>:
   1322e:	a9 e0       	ldi	r26, 0x09	; 9
   13230:	b0 e0       	ldi	r27, 0x00	; 0
   13232:	ed e1       	ldi	r30, 0x1D	; 29
   13234:	f9 e9       	ldi	r31, 0x99	; 153
   13236:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
   1323a:	8f 3f       	cpi	r24, 0xFF	; 255
   1323c:	2f ef       	ldi	r18, 0xFF	; 255
   1323e:	92 07       	cpc	r25, r18
   13240:	09 f4       	brne	.+2      	; 0x13244 <set_active_device+0x16>
   13242:	d0 c0       	rjmp	.+416    	; 0x133e4 <set_active_device+0x1b6>
   13244:	ec 01       	movw	r28, r24
   13246:	0c 97       	sbiw	r24, 0x0c	; 12
   13248:	b0 f0       	brcs	.+44     	; 0x13276 <set_active_device+0x48>
   1324a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1324e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   13252:	c9 01       	movw	r24, r18
   13254:	81 70       	andi	r24, 0x01	; 1
   13256:	99 27       	eor	r25, r25
   13258:	20 ff       	sbrs	r18, 0
   1325a:	c6 c0       	rjmp	.+396    	; 0x133e8 <set_active_device+0x1ba>
   1325c:	ed b7       	in	r30, 0x3d	; 61
   1325e:	fe b7       	in	r31, 0x3e	; 62
   13260:	d5 83       	std	Z+5, r29	; 0x05
   13262:	c4 83       	std	Z+4, r28	; 0x04
   13264:	8f ea       	ldi	r24, 0xAF	; 175
   13266:	99 e1       	ldi	r25, 0x19	; 25
   13268:	a0 e0       	ldi	r26, 0x00	; 0
   1326a:	81 83       	std	Z+1, r24	; 0x01
   1326c:	92 83       	std	Z+2, r25	; 0x02
   1326e:	a3 83       	std	Z+3, r26	; 0x03
   13270:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   13274:	b7 c0       	rjmp	.+366    	; 0x133e4 <set_active_device+0x1b6>
   13276:	8b e2       	ldi	r24, 0x2B	; 43
   13278:	8c 9f       	mul	r24, r28
   1327a:	f0 01       	movw	r30, r0
   1327c:	8d 9f       	mul	r24, r29
   1327e:	f0 0d       	add	r31, r0
   13280:	11 24       	eor	r1, r1
   13282:	e0 50       	subi	r30, 0x00	; 0
   13284:	f1 4e       	sbci	r31, 0xE1	; 225
   13286:	21 81       	ldd	r18, Z+1	; 0x01
   13288:	2f 31       	cpi	r18, 0x1F	; 31
   1328a:	d0 f0       	brcs	.+52     	; 0x132c0 <set_active_device+0x92>
   1328c:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   13290:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   13294:	ca 01       	movw	r24, r20
   13296:	81 70       	andi	r24, 0x01	; 1
   13298:	99 27       	eor	r25, r25
   1329a:	40 ff       	sbrs	r20, 0
   1329c:	a5 c0       	rjmp	.+330    	; 0x133e8 <set_active_device+0x1ba>
   1329e:	82 2f       	mov	r24, r18
   132a0:	90 e0       	ldi	r25, 0x00	; 0
   132a2:	ed b7       	in	r30, 0x3d	; 61
   132a4:	fe b7       	in	r31, 0x3e	; 62
   132a6:	97 83       	std	Z+7, r25	; 0x07
   132a8:	86 83       	std	Z+6, r24	; 0x06
   132aa:	d5 83       	std	Z+5, r29	; 0x05
   132ac:	c4 83       	std	Z+4, r28	; 0x04
   132ae:	86 e7       	ldi	r24, 0x76	; 118
   132b0:	99 e1       	ldi	r25, 0x19	; 25
   132b2:	a0 e0       	ldi	r26, 0x00	; 0
   132b4:	81 83       	std	Z+1, r24	; 0x01
   132b6:	92 83       	std	Z+2, r25	; 0x02
   132b8:	a3 83       	std	Z+3, r26	; 0x03
   132ba:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   132be:	92 c0       	rjmp	.+292    	; 0x133e4 <set_active_device+0x1b6>
   132c0:	20 81       	ld	r18, Z
   132c2:	02 2f       	mov	r16, r18
   132c4:	10 e0       	ldi	r17, 0x00	; 0
   132c6:	87 a1       	ldd	r24, Z+39	; 0x27
   132c8:	90 a5       	ldd	r25, Z+40	; 0x28
   132ca:	00 97       	sbiw	r24, 0x00	; 0
   132cc:	b1 f4       	brne	.+44     	; 0x132fa <set_active_device+0xcc>
   132ce:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   132d2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   132d6:	c9 01       	movw	r24, r18
   132d8:	81 70       	andi	r24, 0x01	; 1
   132da:	99 27       	eor	r25, r25
   132dc:	20 ff       	sbrs	r18, 0
   132de:	84 c0       	rjmp	.+264    	; 0x133e8 <set_active_device+0x1ba>
   132e0:	c8 01       	movw	r24, r16
   132e2:	5e df       	rcall	.-324    	; 0x131a0 <type_to_str>
   132e4:	ed b7       	in	r30, 0x3d	; 61
   132e6:	fe b7       	in	r31, 0x3e	; 62
   132e8:	91 87       	std	Z+9, r25	; 0x09
   132ea:	80 87       	std	Z+8, r24	; 0x08
   132ec:	17 83       	std	Z+7, r17	; 0x07
   132ee:	06 83       	std	Z+6, r16	; 0x06
   132f0:	d5 83       	std	Z+5, r29	; 0x05
   132f2:	c4 83       	std	Z+4, r28	; 0x04
   132f4:	81 e4       	ldi	r24, 0x41	; 65
   132f6:	99 e1       	ldi	r25, 0x19	; 25
   132f8:	6f c0       	rjmp	.+222    	; 0x133d8 <set_active_device+0x1aa>
   132fa:	01 15       	cp	r16, r1
   132fc:	11 05       	cpc	r17, r1
   132fe:	b9 f4       	brne	.+46     	; 0x1332e <set_active_device+0x100>
   13300:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   13304:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   13308:	c9 01       	movw	r24, r18
   1330a:	81 70       	andi	r24, 0x01	; 1
   1330c:	99 27       	eor	r25, r25
   1330e:	20 ff       	sbrs	r18, 0
   13310:	6b c0       	rjmp	.+214    	; 0x133e8 <set_active_device+0x1ba>
   13312:	80 e0       	ldi	r24, 0x00	; 0
   13314:	90 e0       	ldi	r25, 0x00	; 0
   13316:	44 df       	rcall	.-376    	; 0x131a0 <type_to_str>
   13318:	ed b7       	in	r30, 0x3d	; 61
   1331a:	fe b7       	in	r31, 0x3e	; 62
   1331c:	91 87       	std	Z+9, r25	; 0x09
   1331e:	80 87       	std	Z+8, r24	; 0x08
   13320:	17 82       	std	Z+7, r1	; 0x07
   13322:	16 82       	std	Z+6, r1	; 0x06
   13324:	d5 83       	std	Z+5, r29	; 0x05
   13326:	c4 83       	std	Z+4, r28	; 0x04
   13328:	8c e0       	ldi	r24, 0x0C	; 12
   1332a:	99 e1       	ldi	r25, 0x19	; 25
   1332c:	55 c0       	rjmp	.+170    	; 0x133d8 <set_active_device+0x1aa>
   1332e:	04 30       	cpi	r16, 0x04	; 4
   13330:	11 05       	cpc	r17, r1
   13332:	29 f4       	brne	.+10     	; 0x1333e <set_active_device+0x110>
   13334:	90 93 78 19 	sts	0x1978, r25	; 0x801978 <PRINTERp+0x1>
   13338:	80 93 77 19 	sts	0x1977, r24	; 0x801977 <PRINTERp>
   1333c:	35 c0       	rjmp	.+106    	; 0x133a8 <set_active_device+0x17a>
   1333e:	2d 7f       	andi	r18, 0xFD	; 253
   13340:	21 30       	cpi	r18, 0x01	; 1
   13342:	a9 f5       	brne	.+106    	; 0x133ae <set_active_device+0x180>
   13344:	21 a5       	ldd	r18, Z+41	; 0x29
   13346:	32 a5       	ldd	r19, Z+42	; 0x2a
   13348:	21 15       	cp	r18, r1
   1334a:	31 05       	cpc	r19, r1
   1334c:	b1 f4       	brne	.+44     	; 0x1337a <set_active_device+0x14c>
   1334e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   13352:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   13356:	c9 01       	movw	r24, r18
   13358:	81 70       	andi	r24, 0x01	; 1
   1335a:	99 27       	eor	r25, r25
   1335c:	20 ff       	sbrs	r18, 0
   1335e:	44 c0       	rjmp	.+136    	; 0x133e8 <set_active_device+0x1ba>
   13360:	c8 01       	movw	r24, r16
   13362:	1e df       	rcall	.-452    	; 0x131a0 <type_to_str>
   13364:	ed b7       	in	r30, 0x3d	; 61
   13366:	fe b7       	in	r31, 0x3e	; 62
   13368:	91 87       	std	Z+9, r25	; 0x09
   1336a:	80 87       	std	Z+8, r24	; 0x08
   1336c:	17 83       	std	Z+7, r17	; 0x07
   1336e:	06 83       	std	Z+6, r16	; 0x06
   13370:	d5 83       	std	Z+5, r29	; 0x05
   13372:	c4 83       	std	Z+4, r28	; 0x04
   13374:	84 ed       	ldi	r24, 0xD4	; 212
   13376:	98 e1       	ldi	r25, 0x18	; 24
   13378:	2f c0       	rjmp	.+94     	; 0x133d8 <set_active_device+0x1aa>
   1337a:	01 30       	cpi	r16, 0x01	; 1
   1337c:	11 05       	cpc	r17, r1
   1337e:	49 f4       	brne	.+18     	; 0x13392 <set_active_device+0x164>
   13380:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <AMIGOp+0x1>
   13384:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <AMIGOp>
   13388:	30 93 70 19 	sts	0x1970, r19	; 0x801970 <AMIGOs+0x1>
   1338c:	20 93 6f 19 	sts	0x196F, r18	; 0x80196f <AMIGOs>
   13390:	0b c0       	rjmp	.+22     	; 0x133a8 <set_active_device+0x17a>
   13392:	03 30       	cpi	r16, 0x03	; 3
   13394:	11 05       	cpc	r17, r1
   13396:	59 f4       	brne	.+22     	; 0x133ae <set_active_device+0x180>
   13398:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <SS80p+0x1>
   1339c:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <SS80p>
   133a0:	30 93 74 19 	sts	0x1974, r19	; 0x801974 <SS80s+0x1>
   133a4:	20 93 73 19 	sts	0x1973, r18	; 0x801973 <SS80s>
   133a8:	81 e0       	ldi	r24, 0x01	; 1
   133aa:	90 e0       	ldi	r25, 0x00	; 0
   133ac:	1d c0       	rjmp	.+58     	; 0x133e8 <set_active_device+0x1ba>
   133ae:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   133b2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   133b6:	c9 01       	movw	r24, r18
   133b8:	81 70       	andi	r24, 0x01	; 1
   133ba:	99 27       	eor	r25, r25
   133bc:	20 ff       	sbrs	r18, 0
   133be:	14 c0       	rjmp	.+40     	; 0x133e8 <set_active_device+0x1ba>
   133c0:	c8 01       	movw	r24, r16
   133c2:	ee de       	rcall	.-548    	; 0x131a0 <type_to_str>
   133c4:	ed b7       	in	r30, 0x3d	; 61
   133c6:	fe b7       	in	r31, 0x3e	; 62
   133c8:	91 87       	std	Z+9, r25	; 0x09
   133ca:	80 87       	std	Z+8, r24	; 0x08
   133cc:	17 83       	std	Z+7, r17	; 0x07
   133ce:	06 83       	std	Z+6, r16	; 0x06
   133d0:	d5 83       	std	Z+5, r29	; 0x05
   133d2:	c4 83       	std	Z+4, r28	; 0x04
   133d4:	89 ea       	ldi	r24, 0xA9	; 169
   133d6:	98 e1       	ldi	r25, 0x18	; 24
   133d8:	a0 e0       	ldi	r26, 0x00	; 0
   133da:	81 83       	std	Z+1, r24	; 0x01
   133dc:	92 83       	std	Z+2, r25	; 0x02
   133de:	a3 83       	std	Z+3, r26	; 0x03
   133e0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   133e4:	80 e0       	ldi	r24, 0x00	; 0
   133e6:	90 e0       	ldi	r25, 0x00	; 0
   133e8:	cd b7       	in	r28, 0x3d	; 61
   133ea:	de b7       	in	r29, 0x3e	; 62
   133ec:	29 96       	adiw	r28, 0x09	; 9
   133ee:	e4 e0       	ldi	r30, 0x04	; 4
   133f0:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

000133f4 <SS80_Set_Defaults>:
   133f4:	0f 93       	push	r16
   133f6:	1f 93       	push	r17
   133f8:	cf 93       	push	r28
   133fa:	df 93       	push	r29
   133fc:	ec 01       	movw	r28, r24
   133fe:	82 e0       	ldi	r24, 0x02	; 2
   13400:	90 e0       	ldi	r25, 0x00	; 0
   13402:	ab de       	rcall	.-682    	; 0x1315a <find_type>
   13404:	97 fd       	sbrc	r25, 7
   13406:	6b c0       	rjmp	.+214    	; 0x134de <SS80_Set_Defaults+0xea>
   13408:	2b e2       	ldi	r18, 0x2B	; 43
   1340a:	2c 9f       	mul	r18, r28
   1340c:	f0 01       	movw	r30, r0
   1340e:	2d 9f       	mul	r18, r29
   13410:	f0 0d       	add	r31, r0
   13412:	11 24       	eor	r1, r1
   13414:	e0 50       	subi	r30, 0x00	; 0
   13416:	f1 4e       	sbci	r31, 0xE1	; 225
   13418:	c7 a1       	ldd	r28, Z+39	; 0x27
   1341a:	d0 a5       	ldd	r29, Z+40	; 0x28
   1341c:	28 9f       	mul	r18, r24
   1341e:	f0 01       	movw	r30, r0
   13420:	29 9f       	mul	r18, r25
   13422:	f0 0d       	add	r31, r0
   13424:	11 24       	eor	r1, r1
   13426:	e0 50       	subi	r30, 0x00	; 0
   13428:	f1 4e       	sbci	r31, 0xE1	; 225
   1342a:	07 a1       	ldd	r16, Z+39	; 0x27
   1342c:	10 a5       	ldd	r17, Z+40	; 0x28
   1342e:	f8 01       	movw	r30, r16
   13430:	80 81       	ld	r24, Z
   13432:	88 83       	st	Y, r24
   13434:	81 81       	ldd	r24, Z+1	; 0x01
   13436:	89 83       	std	Y+1, r24	; 0x01
   13438:	82 81       	ldd	r24, Z+2	; 0x02
   1343a:	93 81       	ldd	r25, Z+3	; 0x03
   1343c:	0e 94 45 33 	call	0x668a	; 0x668a <stralloc>
   13440:	9b 83       	std	Y+3, r25	; 0x03
   13442:	8a 83       	std	Y+2, r24	; 0x02
   13444:	f8 01       	movw	r30, r16
   13446:	84 81       	ldd	r24, Z+4	; 0x04
   13448:	95 81       	ldd	r25, Z+5	; 0x05
   1344a:	9d 83       	std	Y+5, r25	; 0x05
   1344c:	8c 83       	std	Y+4, r24	; 0x04
   1344e:	86 81       	ldd	r24, Z+6	; 0x06
   13450:	97 81       	ldd	r25, Z+7	; 0x07
   13452:	9f 83       	std	Y+7, r25	; 0x07
   13454:	8e 83       	std	Y+6, r24	; 0x06
   13456:	80 85       	ldd	r24, Z+8	; 0x08
   13458:	91 85       	ldd	r25, Z+9	; 0x09
   1345a:	99 87       	std	Y+9, r25	; 0x09
   1345c:	88 87       	std	Y+8, r24	; 0x08
   1345e:	82 85       	ldd	r24, Z+10	; 0x0a
   13460:	8a 87       	std	Y+10, r24	; 0x0a
   13462:	83 85       	ldd	r24, Z+11	; 0x0b
   13464:	8b 87       	std	Y+11, r24	; 0x0b
   13466:	84 85       	ldd	r24, Z+12	; 0x0c
   13468:	95 85       	ldd	r25, Z+13	; 0x0d
   1346a:	a6 85       	ldd	r26, Z+14	; 0x0e
   1346c:	b7 85       	ldd	r27, Z+15	; 0x0f
   1346e:	8c 87       	std	Y+12, r24	; 0x0c
   13470:	9d 87       	std	Y+13, r25	; 0x0d
   13472:	ae 87       	std	Y+14, r26	; 0x0e
   13474:	bf 87       	std	Y+15, r27	; 0x0f
   13476:	80 89       	ldd	r24, Z+16	; 0x10
   13478:	91 89       	ldd	r25, Z+17	; 0x11
   1347a:	99 8b       	std	Y+17, r25	; 0x11
   1347c:	88 8b       	std	Y+16, r24	; 0x10
   1347e:	82 89       	ldd	r24, Z+18	; 0x12
   13480:	8a 8b       	std	Y+18, r24	; 0x12
   13482:	83 89       	ldd	r24, Z+19	; 0x13
   13484:	8b 8b       	std	Y+19, r24	; 0x13
   13486:	84 89       	ldd	r24, Z+20	; 0x14
   13488:	95 89       	ldd	r25, Z+21	; 0x15
   1348a:	9d 8b       	std	Y+21, r25	; 0x15
   1348c:	8c 8b       	std	Y+20, r24	; 0x14
   1348e:	86 89       	ldd	r24, Z+22	; 0x16
   13490:	97 89       	ldd	r25, Z+23	; 0x17
   13492:	9f 8b       	std	Y+23, r25	; 0x17
   13494:	8e 8b       	std	Y+22, r24	; 0x16
   13496:	80 8d       	ldd	r24, Z+24	; 0x18
   13498:	91 8d       	ldd	r25, Z+25	; 0x19
   1349a:	99 8f       	std	Y+25, r25	; 0x19
   1349c:	88 8f       	std	Y+24, r24	; 0x18
   1349e:	82 8d       	ldd	r24, Z+26	; 0x1a
   134a0:	93 8d       	ldd	r25, Z+27	; 0x1b
   134a2:	9b 8f       	std	Y+27, r25	; 0x1b
   134a4:	8a 8f       	std	Y+26, r24	; 0x1a
   134a6:	84 8d       	ldd	r24, Z+28	; 0x1c
   134a8:	8c 8f       	std	Y+28, r24	; 0x1c
   134aa:	85 8d       	ldd	r24, Z+29	; 0x1d
   134ac:	8d 8f       	std	Y+29, r24	; 0x1d
   134ae:	87 8d       	ldd	r24, Z+31	; 0x1f
   134b0:	90 a1       	ldd	r25, Z+32	; 0x20
   134b2:	a1 a1       	ldd	r26, Z+33	; 0x21
   134b4:	b2 a1       	ldd	r27, Z+34	; 0x22
   134b6:	8f 8f       	std	Y+31, r24	; 0x1f
   134b8:	98 a3       	std	Y+32, r25	; 0x20
   134ba:	a9 a3       	std	Y+33, r26	; 0x21
   134bc:	ba a3       	std	Y+34, r27	; 0x22
   134be:	83 a1       	ldd	r24, Z+35	; 0x23
   134c0:	8b a3       	std	Y+35, r24	; 0x23
   134c2:	84 a1       	ldd	r24, Z+36	; 0x24
   134c4:	95 a1       	ldd	r25, Z+37	; 0x25
   134c6:	9d a3       	std	Y+37, r25	; 0x25
   134c8:	8c a3       	std	Y+36, r24	; 0x24
   134ca:	86 a1       	ldd	r24, Z+38	; 0x26
   134cc:	97 a1       	ldd	r25, Z+39	; 0x27
   134ce:	a0 a5       	ldd	r26, Z+40	; 0x28
   134d0:	b1 a5       	ldd	r27, Z+41	; 0x29
   134d2:	8e a3       	std	Y+38, r24	; 0x26
   134d4:	9f a3       	std	Y+39, r25	; 0x27
   134d6:	a8 a7       	std	Y+40, r26	; 0x28
   134d8:	b9 a7       	std	Y+41, r27	; 0x29
   134da:	82 a5       	ldd	r24, Z+42	; 0x2a
   134dc:	8a a7       	std	Y+42, r24	; 0x2a
   134de:	df 91       	pop	r29
   134e0:	cf 91       	pop	r28
   134e2:	1f 91       	pop	r17
   134e4:	0f 91       	pop	r16
   134e6:	08 95       	ret

000134e8 <alloc_device>:
   134e8:	0f 93       	push	r16
   134ea:	1f 93       	push	r17
   134ec:	cf 93       	push	r28
   134ee:	df 93       	push	r29
   134f0:	ad b7       	in	r26, 0x3d	; 61
   134f2:	be b7       	in	r27, 0x3e	; 62
   134f4:	17 97       	sbiw	r26, 0x07	; 7
   134f6:	0f b6       	in	r0, 0x3f	; 63
   134f8:	f8 94       	cli
   134fa:	be bf       	out	0x3e, r27	; 62
   134fc:	0f be       	out	0x3f, r0	; 63
   134fe:	ad bf       	out	0x3d, r26	; 61
   13500:	8c 01       	movw	r16, r24
   13502:	67 de       	rcall	.-818    	; 0x131d2 <find_free>
   13504:	ec 01       	movw	r28, r24
   13506:	cf 3f       	cpi	r28, 0xFF	; 255
   13508:	8f ef       	ldi	r24, 0xFF	; 255
   1350a:	d8 07       	cpc	r29, r24
   1350c:	89 f4       	brne	.+34     	; 0x13530 <alloc_device+0x48>
   1350e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13512:	80 ff       	sbrs	r24, 0
   13514:	a1 c0       	rjmp	.+322    	; 0x13658 <alloc_device+0x170>
   13516:	ed b7       	in	r30, 0x3d	; 61
   13518:	fe b7       	in	r31, 0x3e	; 62
   1351a:	15 83       	std	Z+5, r17	; 0x05
   1351c:	04 83       	std	Z+4, r16	; 0x04
   1351e:	85 e8       	ldi	r24, 0x85	; 133
   13520:	98 e1       	ldi	r25, 0x18	; 24
   13522:	a0 e0       	ldi	r26, 0x00	; 0
   13524:	81 83       	std	Z+1, r24	; 0x01
   13526:	92 83       	std	Z+2, r25	; 0x02
   13528:	a3 83       	std	Z+3, r26	; 0x03
   1352a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1352e:	94 c0       	rjmp	.+296    	; 0x13658 <alloc_device+0x170>
   13530:	02 30       	cpi	r16, 0x02	; 2
   13532:	11 05       	cpc	r17, r1
   13534:	e1 f1       	breq	.+120    	; 0x135ae <alloc_device+0xc6>
   13536:	ec f4       	brge	.+58     	; 0x13572 <alloc_device+0x8a>
   13538:	01 30       	cpi	r16, 0x01	; 1
   1353a:	11 05       	cpc	r17, r1
   1353c:	09 f0       	breq	.+2      	; 0x13540 <alloc_device+0x58>
   1353e:	76 c0       	rjmp	.+236    	; 0x1362c <alloc_device+0x144>
   13540:	8b e2       	ldi	r24, 0x2B	; 43
   13542:	8c 9f       	mul	r24, r28
   13544:	80 01       	movw	r16, r0
   13546:	8d 9f       	mul	r24, r29
   13548:	10 0d       	add	r17, r0
   1354a:	11 24       	eor	r1, r1
   1354c:	00 50       	subi	r16, 0x00	; 0
   1354e:	11 4e       	sbci	r17, 0xE1	; 225
   13550:	81 e0       	ldi	r24, 0x01	; 1
   13552:	f8 01       	movw	r30, r16
   13554:	80 83       	st	Z, r24
   13556:	61 e0       	ldi	r22, 0x01	; 1
   13558:	70 e0       	ldi	r23, 0x00	; 0
   1355a:	85 e1       	ldi	r24, 0x15	; 21
   1355c:	90 e0       	ldi	r25, 0x00	; 0
   1355e:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
   13562:	f8 01       	movw	r30, r16
   13564:	90 a7       	std	Z+40, r25	; 0x28
   13566:	87 a3       	std	Z+39, r24	; 0x27
   13568:	61 e0       	ldi	r22, 0x01	; 1
   1356a:	70 e0       	ldi	r23, 0x00	; 0
   1356c:	88 e1       	ldi	r24, 0x18	; 24
   1356e:	90 e0       	ldi	r25, 0x00	; 0
   13570:	57 c0       	rjmp	.+174    	; 0x13620 <alloc_device+0x138>
   13572:	03 30       	cpi	r16, 0x03	; 3
   13574:	11 05       	cpc	r17, r1
   13576:	a1 f1       	breq	.+104    	; 0x135e0 <alloc_device+0xf8>
   13578:	04 30       	cpi	r16, 0x04	; 4
   1357a:	11 05       	cpc	r17, r1
   1357c:	09 f0       	breq	.+2      	; 0x13580 <alloc_device+0x98>
   1357e:	56 c0       	rjmp	.+172    	; 0x1362c <alloc_device+0x144>
   13580:	8b e2       	ldi	r24, 0x2B	; 43
   13582:	8c 9f       	mul	r24, r28
   13584:	80 01       	movw	r16, r0
   13586:	8d 9f       	mul	r24, r29
   13588:	10 0d       	add	r17, r0
   1358a:	11 24       	eor	r1, r1
   1358c:	00 50       	subi	r16, 0x00	; 0
   1358e:	11 4e       	sbci	r17, 0xE1	; 225
   13590:	84 e0       	ldi	r24, 0x04	; 4
   13592:	f8 01       	movw	r30, r16
   13594:	80 83       	st	Z, r24
   13596:	61 e0       	ldi	r22, 0x01	; 1
   13598:	70 e0       	ldi	r23, 0x00	; 0
   1359a:	8b e0       	ldi	r24, 0x0B	; 11
   1359c:	90 e0       	ldi	r25, 0x00	; 0
   1359e:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
   135a2:	f8 01       	movw	r30, r16
   135a4:	90 a7       	std	Z+40, r25	; 0x28
   135a6:	87 a3       	std	Z+39, r24	; 0x27
   135a8:	12 a6       	std	Z+42, r1	; 0x2a
   135aa:	11 a6       	std	Z+41, r1	; 0x29
   135ac:	55 c0       	rjmp	.+170    	; 0x13658 <alloc_device+0x170>
   135ae:	8b e2       	ldi	r24, 0x2B	; 43
   135b0:	8c 9f       	mul	r24, r28
   135b2:	80 01       	movw	r16, r0
   135b4:	8d 9f       	mul	r24, r29
   135b6:	10 0d       	add	r17, r0
   135b8:	11 24       	eor	r1, r1
   135ba:	00 50       	subi	r16, 0x00	; 0
   135bc:	11 4e       	sbci	r17, 0xE1	; 225
   135be:	82 e0       	ldi	r24, 0x02	; 2
   135c0:	f8 01       	movw	r30, r16
   135c2:	80 83       	st	Z, r24
   135c4:	61 e0       	ldi	r22, 0x01	; 1
   135c6:	70 e0       	ldi	r23, 0x00	; 0
   135c8:	82 e3       	ldi	r24, 0x32	; 50
   135ca:	90 e0       	ldi	r25, 0x00	; 0
   135cc:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
   135d0:	f8 01       	movw	r30, r16
   135d2:	90 a7       	std	Z+40, r25	; 0x28
   135d4:	87 a3       	std	Z+39, r24	; 0x27
   135d6:	61 e0       	ldi	r22, 0x01	; 1
   135d8:	70 e0       	ldi	r23, 0x00	; 0
   135da:	86 e1       	ldi	r24, 0x16	; 22
   135dc:	90 e0       	ldi	r25, 0x00	; 0
   135de:	20 c0       	rjmp	.+64     	; 0x13620 <alloc_device+0x138>
   135e0:	8b e2       	ldi	r24, 0x2B	; 43
   135e2:	8c 9f       	mul	r24, r28
   135e4:	80 01       	movw	r16, r0
   135e6:	8d 9f       	mul	r24, r29
   135e8:	10 0d       	add	r17, r0
   135ea:	11 24       	eor	r1, r1
   135ec:	00 50       	subi	r16, 0x00	; 0
   135ee:	11 4e       	sbci	r17, 0xE1	; 225
   135f0:	83 e0       	ldi	r24, 0x03	; 3
   135f2:	f8 01       	movw	r30, r16
   135f4:	80 83       	st	Z, r24
   135f6:	61 e0       	ldi	r22, 0x01	; 1
   135f8:	70 e0       	ldi	r23, 0x00	; 0
   135fa:	82 e3       	ldi	r24, 0x32	; 50
   135fc:	90 e0       	ldi	r25, 0x00	; 0
   135fe:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
   13602:	f8 01       	movw	r30, r16
   13604:	90 a7       	std	Z+40, r25	; 0x28
   13606:	87 a3       	std	Z+39, r24	; 0x27
   13608:	61 e0       	ldi	r22, 0x01	; 1
   1360a:	70 e0       	ldi	r23, 0x00	; 0
   1360c:	86 e1       	ldi	r24, 0x16	; 22
   1360e:	90 e0       	ldi	r25, 0x00	; 0
   13610:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
   13614:	f8 01       	movw	r30, r16
   13616:	92 a7       	std	Z+42, r25	; 0x2a
   13618:	81 a7       	std	Z+41, r24	; 0x29
   1361a:	ce 01       	movw	r24, r28
   1361c:	eb de       	rcall	.-554    	; 0x133f4 <SS80_Set_Defaults>
   1361e:	1c c0       	rjmp	.+56     	; 0x13658 <alloc_device+0x170>
   13620:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
   13624:	f8 01       	movw	r30, r16
   13626:	92 a7       	std	Z+42, r25	; 0x2a
   13628:	81 a7       	std	Z+41, r24	; 0x29
   1362a:	16 c0       	rjmp	.+44     	; 0x13658 <alloc_device+0x170>
   1362c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13630:	80 ff       	sbrs	r24, 0
   13632:	10 c0       	rjmp	.+32     	; 0x13654 <alloc_device+0x16c>
   13634:	c8 01       	movw	r24, r16
   13636:	b4 dd       	rcall	.-1176   	; 0x131a0 <type_to_str>
   13638:	ed b7       	in	r30, 0x3d	; 61
   1363a:	fe b7       	in	r31, 0x3e	; 62
   1363c:	97 83       	std	Z+7, r25	; 0x07
   1363e:	86 83       	std	Z+6, r24	; 0x06
   13640:	15 83       	std	Z+5, r17	; 0x05
   13642:	04 83       	std	Z+4, r16	; 0x04
   13644:	83 e6       	ldi	r24, 0x63	; 99
   13646:	98 e1       	ldi	r25, 0x18	; 24
   13648:	a0 e0       	ldi	r26, 0x00	; 0
   1364a:	81 83       	std	Z+1, r24	; 0x01
   1364c:	92 83       	std	Z+2, r25	; 0x02
   1364e:	a3 83       	std	Z+3, r26	; 0x03
   13650:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   13654:	cf ef       	ldi	r28, 0xFF	; 255
   13656:	df ef       	ldi	r29, 0xFF	; 255
   13658:	ce 01       	movw	r24, r28
   1365a:	cd b7       	in	r28, 0x3d	; 61
   1365c:	de b7       	in	r29, 0x3e	; 62
   1365e:	27 96       	adiw	r28, 0x07	; 7
   13660:	e4 e0       	ldi	r30, 0x04	; 4
   13662:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00013666 <init_Devices>:
   13666:	cf 93       	push	r28
   13668:	df 93       	push	r29
   1366a:	10 92 84 19 	sts	0x1984, r1	; 0x801984 <stack_ind+0x1>
   1366e:	10 92 83 19 	sts	0x1983, r1	; 0x801983 <stack_ind>
   13672:	e0 e0       	ldi	r30, 0x00	; 0
   13674:	ff e1       	ldi	r31, 0x1F	; 31
   13676:	9f ef       	ldi	r25, 0xFF	; 255
   13678:	80 e2       	ldi	r24, 0x20	; 32
   1367a:	10 82       	st	Z, r1
   1367c:	11 82       	std	Z+1, r1	; 0x01
   1367e:	92 83       	std	Z+2, r25	; 0x02
   13680:	13 82       	std	Z+3, r1	; 0x03
   13682:	14 82       	std	Z+4, r1	; 0x04
   13684:	15 82       	std	Z+5, r1	; 0x05
   13686:	16 82       	std	Z+6, r1	; 0x06
   13688:	df 01       	movw	r26, r30
   1368a:	17 96       	adiw	r26, 0x07	; 7
   1368c:	ed 01       	movw	r28, r26
   1368e:	28 2f       	mov	r18, r24
   13690:	19 92       	st	Y+, r1
   13692:	2a 95       	dec	r18
   13694:	e9 f7       	brne	.-6      	; 0x13690 <init_Devices+0x2a>
   13696:	10 a6       	std	Z+40, r1	; 0x28
   13698:	17 a2       	std	Z+39, r1	; 0x27
   1369a:	12 a6       	std	Z+42, r1	; 0x2a
   1369c:	11 a6       	std	Z+41, r1	; 0x29
   1369e:	bb 96       	adiw	r30, 0x2b	; 43
   136a0:	c1 e2       	ldi	r28, 0x21	; 33
   136a2:	e4 30       	cpi	r30, 0x04	; 4
   136a4:	fc 07       	cpc	r31, r28
   136a6:	49 f7       	brne	.-46     	; 0x1367a <init_Devices+0x14>
   136a8:	df 91       	pop	r29
   136aa:	cf 91       	pop	r28
   136ac:	08 95       	ret

000136ae <push_state>:
   136ae:	20 91 83 19 	lds	r18, 0x1983	; 0x801983 <stack_ind>
   136b2:	30 91 84 19 	lds	r19, 0x1984	; 0x801984 <stack_ind+0x1>
   136b6:	25 30       	cpi	r18, 0x05	; 5
   136b8:	31 05       	cpc	r19, r1
   136ba:	7c f4       	brge	.+30     	; 0x136da <push_state+0x2c>
   136bc:	a9 01       	movw	r20, r18
   136be:	4f 5f       	subi	r20, 0xFF	; 255
   136c0:	5f 4f       	sbci	r21, 0xFF	; 255
   136c2:	50 93 84 19 	sts	0x1984, r21	; 0x801984 <stack_ind+0x1>
   136c6:	40 93 83 19 	sts	0x1983, r20	; 0x801983 <stack_ind>
   136ca:	22 0f       	add	r18, r18
   136cc:	33 1f       	adc	r19, r19
   136ce:	f9 01       	movw	r30, r18
   136d0:	e7 58       	subi	r30, 0x87	; 135
   136d2:	f6 4e       	sbci	r31, 0xE6	; 230
   136d4:	80 83       	st	Z, r24
   136d6:	91 83       	std	Z+1, r25	; 0x01
   136d8:	08 95       	ret
   136da:	80 e0       	ldi	r24, 0x00	; 0
   136dc:	90 e0       	ldi	r25, 0x00	; 0
   136de:	08 95       	ret

000136e0 <pop_state>:
   136e0:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <stack_ind>
   136e4:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <stack_ind+0x1>
   136e8:	18 16       	cp	r1, r24
   136ea:	19 06       	cpc	r1, r25
   136ec:	6c f4       	brge	.+26     	; 0x13708 <pop_state+0x28>
   136ee:	01 97       	sbiw	r24, 0x01	; 1
   136f0:	90 93 84 19 	sts	0x1984, r25	; 0x801984 <stack_ind+0x1>
   136f4:	80 93 83 19 	sts	0x1983, r24	; 0x801983 <stack_ind>
   136f8:	88 0f       	add	r24, r24
   136fa:	99 1f       	adc	r25, r25
   136fc:	fc 01       	movw	r30, r24
   136fe:	e7 58       	subi	r30, 0x87	; 135
   13700:	f6 4e       	sbci	r31, 0xE6	; 230
   13702:	80 81       	ld	r24, Z
   13704:	91 81       	ldd	r25, Z+1	; 0x01
   13706:	08 95       	ret
   13708:	80 e0       	ldi	r24, 0x00	; 0
   1370a:	90 e0       	ldi	r25, 0x00	; 0
   1370c:	08 95       	ret

0001370e <set_Config_Defaults>:
   1370e:	08 95       	ret

00013710 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   13710:	0f 93       	push	r16
   13712:	1f 93       	push	r17
   13714:	cf 93       	push	r28
   13716:	df 93       	push	r29
   13718:	00 d0       	rcall	.+0      	; 0x1371a <hpdir_set_device+0xa>
   1371a:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   1371c:	2b e2       	ldi	r18, 0x2B	; 43
   1371e:	ac 01       	movw	r20, r24
   13720:	24 9f       	mul	r18, r20
   13722:	c0 01       	movw	r24, r0
   13724:	25 9f       	mul	r18, r21
   13726:	90 0d       	add	r25, r0
   13728:	11 24       	eor	r1, r1
   1372a:	ec 01       	movw	r28, r24
   1372c:	c0 50       	subi	r28, 0x00	; 0
   1372e:	d1 4e       	sbci	r29, 0xE1	; 225
   13730:	28 81       	ld	r18, Y
   13732:	23 30       	cpi	r18, 0x03	; 3
   13734:	a1 f5       	brne	.+104    	; 0x1379e <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   13736:	ef a1       	ldd	r30, Y+39	; 0x27
   13738:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   1373a:	20 91 84 21 	lds	r18, 0x2184	; 0x802184 <hpdir+0x80>
   1373e:	30 91 85 21 	lds	r19, 0x2185	; 0x802185 <hpdir+0x81>
   13742:	35 83       	std	Z+5, r19	; 0x05
   13744:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   13746:	40 91 90 21 	lds	r20, 0x2190	; 0x802190 <hpdir+0x8c>
   1374a:	50 91 91 21 	lds	r21, 0x2191	; 0x802191 <hpdir+0x8d>
   1374e:	60 91 92 21 	lds	r22, 0x2192	; 0x802192 <hpdir+0x8e>
   13752:	70 91 93 21 	lds	r23, 0x2193	; 0x802193 <hpdir+0x8f>
   13756:	44 87       	std	Z+12, r20	; 0x0c
   13758:	55 87       	std	Z+13, r21	; 0x0d
   1375a:	66 87       	std	Z+14, r22	; 0x0e
   1375c:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   1375e:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <hpdir+0xa0>
   13762:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <hpdir+0xa1>
   13766:	31 8b       	std	Z+17, r19	; 0x11
   13768:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   1376a:	17 8e       	std	Z+31, r1	; 0x1f
   1376c:	10 a2       	std	Z+32, r1	; 0x20
   1376e:	11 a2       	std	Z+33, r1	; 0x21
   13770:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   13772:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   13774:	15 a2       	std	Z+37, r1	; 0x25
   13776:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   13778:	40 91 b0 21 	lds	r20, 0x21B0	; 0x8021b0 <hpdir+0xac>
   1377c:	50 91 b1 21 	lds	r21, 0x21B1	; 0x8021b1 <hpdir+0xad>
   13780:	60 91 b2 21 	lds	r22, 0x21B2	; 0x8021b2 <hpdir+0xae>
   13784:	70 91 b3 21 	lds	r23, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   13788:	8a 01       	movw	r16, r20
   1378a:	9b 01       	movw	r18, r22
   1378c:	01 50       	subi	r16, 0x01	; 1
   1378e:	11 09       	sbc	r17, r1
   13790:	21 09       	sbc	r18, r1
   13792:	31 09       	sbc	r19, r1
   13794:	06 a3       	std	Z+38, r16	; 0x26
   13796:	17 a3       	std	Z+39, r17	; 0x27
   13798:	20 a7       	std	Z+40, r18	; 0x28
   1379a:	31 a7       	std	Z+41, r19	; 0x29
   1379c:	2a c0       	rjmp	.+84     	; 0x137f2 <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   1379e:	21 30       	cpi	r18, 0x01	; 1
   137a0:	a9 f5       	brne	.+106    	; 0x1380c <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   137a2:	ef a1       	ldd	r30, Y+39	; 0x27
   137a4:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   137a6:	20 91 84 21 	lds	r18, 0x2184	; 0x802184 <hpdir+0x80>
   137aa:	30 91 85 21 	lds	r19, 0x2185	; 0x802185 <hpdir+0x81>
   137ae:	35 83       	std	Z+5, r19	; 0x05
   137b0:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   137b2:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <hpdir+0xa0>
   137b6:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <hpdir+0xa1>
   137ba:	37 83       	std	Z+7, r19	; 0x07
   137bc:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   137be:	20 91 a0 21 	lds	r18, 0x21A0	; 0x8021a0 <hpdir+0x9c>
   137c2:	30 91 a1 21 	lds	r19, 0x21A1	; 0x8021a1 <hpdir+0x9d>
   137c6:	31 87       	std	Z+9, r19	; 0x09
   137c8:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   137ca:	20 91 9c 21 	lds	r18, 0x219C	; 0x80219c <hpdir+0x98>
   137ce:	30 91 9d 21 	lds	r19, 0x219D	; 0x80219d <hpdir+0x99>
   137d2:	33 87       	std	Z+11, r19	; 0x0b
   137d4:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   137d6:	20 91 98 21 	lds	r18, 0x2198	; 0x802198 <hpdir+0x94>
   137da:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <hpdir+0x95>
   137de:	35 87       	std	Z+13, r19	; 0x0d
   137e0:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   137e2:	40 91 b0 21 	lds	r20, 0x21B0	; 0x8021b0 <hpdir+0xac>
   137e6:	50 91 b1 21 	lds	r21, 0x21B1	; 0x8021b1 <hpdir+0xad>
   137ea:	60 91 b2 21 	lds	r22, 0x21B2	; 0x8021b2 <hpdir+0xae>
   137ee:	70 91 b3 21 	lds	r23, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   137f2:	4b 83       	std	Y+3, r20	; 0x03
   137f4:	5c 83       	std	Y+4, r21	; 0x04
   137f6:	6d 83       	std	Y+5, r22	; 0x05
   137f8:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   137fa:	4e e1       	ldi	r20, 0x1E	; 30
   137fc:	50 e0       	ldi	r21, 0x00	; 0
   137fe:	64 e0       	ldi	r22, 0x04	; 4
   13800:	71 e2       	ldi	r23, 0x21	; 33
   13802:	89 5f       	subi	r24, 0xF9	; 249
   13804:	90 4e       	sbci	r25, 0xE0	; 224
   13806:	0e 94 a2 32 	call	0x6544	; 0x6544 <strncpy>
   1380a:	0a c0       	rjmp	.+20     	; 0x13820 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   1380c:	84 e4       	ldi	r24, 0x44	; 68
   1380e:	98 e1       	ldi	r25, 0x18	; 24
   13810:	a0 e0       	ldi	r26, 0x00	; 0
   13812:	ed b7       	in	r30, 0x3d	; 61
   13814:	fe b7       	in	r31, 0x3e	; 62
   13816:	81 83       	std	Z+1, r24	; 0x01
   13818:	92 83       	std	Z+2, r25	; 0x02
   1381a:	a3 83       	std	Z+3, r26	; 0x03
   1381c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }

}
   13820:	cd b7       	in	r28, 0x3d	; 61
   13822:	de b7       	in	r29, 0x3e	; 62
   13824:	23 96       	adiw	r28, 0x03	; 3
   13826:	e4 e0       	ldi	r30, 0x04	; 4
   13828:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

0001382c <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   1382c:	cf 93       	push	r28
   1382e:	df 93       	push	r29
   13830:	ec 01       	movw	r28, r24
   13832:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   13834:	41 e0       	ldi	r20, 0x01	; 1
   13836:	50 e0       	ldi	r21, 0x00	; 0
   13838:	60 e0       	ldi	r22, 0x00	; 0
   1383a:	70 e0       	ldi	r23, 0x00	; 0
   1383c:	d9 d6       	rcall	.+3506   	; 0x145f0 <hpdir_find_drive>
   1383e:	89 2b       	or	r24, r25
        hpdir_set_device(index);
   13840:	11 f0       	breq	.+4      	; 0x13846 <hpdir_set_parameters+0x1a>
   13842:	ce 01       	movw	r24, r28
}
   13844:	65 df       	rcall	.-310    	; 0x13710 <hpdir_set_device>
   13846:	df 91       	pop	r29
   13848:	cf 91       	pop	r28
   1384a:	08 95       	ret

0001384c <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   1384c:	4f 92       	push	r4
   1384e:	5f 92       	push	r5
   13850:	6f 92       	push	r6
   13852:	7f 92       	push	r7
   13854:	8f 92       	push	r8
   13856:	af 92       	push	r10
   13858:	bf 92       	push	r11
   1385a:	cf 92       	push	r12
   1385c:	df 92       	push	r13
   1385e:	ef 92       	push	r14
   13860:	0f 93       	push	r16
   13862:	1f 93       	push	r17
   13864:	cf 93       	push	r28
   13866:	df 93       	push	r29
   13868:	00 d0       	rcall	.+0      	; 0x1386a <Post_Config+0x1e>
   1386a:	00 d0       	rcall	.+0      	; 0x1386c <Post_Config+0x20>
   1386c:	1f 92       	push	r1
   1386e:	c0 e0       	ldi	r28, 0x00	; 0
   13870:	df e1       	ldi	r29, 0x1F	; 31
   13872:	84 e0       	ldi	r24, 0x04	; 4
   13874:	48 2e       	mov	r4, r24
   13876:	81 e2       	ldi	r24, 0x21	; 33
   13878:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   1387a:	a1 2c       	mov	r10, r1
   1387c:	bb 24       	eor	r11, r11
   1387e:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13880:	87 ed       	ldi	r24, 0xD7	; 215
   13882:	97 e1       	ldi	r25, 0x17	; 23
   13884:	6c 01       	movw	r12, r24
   13886:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13888:	8e e0       	ldi	r24, 0x0E	; 14
   1388a:	98 e1       	ldi	r25, 0x18	; 24
   1388c:	3c 01       	movw	r6, r24
   1388e:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13890:	88 81       	ld	r24, Y
   13892:	88 23       	and	r24, r24
   13894:	09 f4       	brne	.+2      	; 0x13898 <Post_Config+0x4c>
   13896:	57 c0       	rjmp	.+174    	; 0x13946 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13898:	83 30       	cpi	r24, 0x03	; 3
   1389a:	f9 f4       	brne	.+62     	; 0x138da <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1389c:	0f a1       	ldd	r16, Y+39	; 0x27
   1389e:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   138a0:	f8 01       	movw	r30, r16
   138a2:	80 89       	ldd	r24, Z+16	; 0x10
   138a4:	91 89       	ldd	r25, Z+17	; 0x11
   138a6:	81 15       	cp	r24, r1
   138a8:	91 40       	sbci	r25, 0x01	; 1
   138aa:	59 f0       	breq	.+22     	; 0x138c2 <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   138ac:	ce 01       	movw	r24, r28
   138ae:	07 96       	adiw	r24, 0x07	; 7
   138b0:	ed b7       	in	r30, 0x3d	; 61
   138b2:	fe b7       	in	r31, 0x3e	; 62
   138b4:	95 83       	std	Z+5, r25	; 0x05
   138b6:	84 83       	std	Z+4, r24	; 0x04
   138b8:	61 82       	std	Z+1, r6	; 0x01
   138ba:	72 82       	std	Z+2, r7	; 0x02
   138bc:	83 82       	std	Z+3, r8	; 0x03
   138be:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   138c2:	f8 01       	movw	r30, r16
   138c4:	86 a1       	ldd	r24, Z+38	; 0x26
   138c6:	97 a1       	ldd	r25, Z+39	; 0x27
   138c8:	a0 a5       	ldd	r26, Z+40	; 0x28
   138ca:	b1 a5       	ldd	r27, Z+41	; 0x29
   138cc:	01 96       	adiw	r24, 0x01	; 1
   138ce:	a1 1d       	adc	r26, r1
   138d0:	b1 1d       	adc	r27, r1
   138d2:	8b 83       	std	Y+3, r24	; 0x03
   138d4:	9c 83       	std	Y+4, r25	; 0x04
   138d6:	ad 83       	std	Y+5, r26	; 0x05
   138d8:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   138da:	88 81       	ld	r24, Y
   138dc:	81 30       	cpi	r24, 0x01	; 1
   138de:	99 f5       	brne	.+102    	; 0x13946 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   138e0:	0f a1       	ldd	r16, Y+39	; 0x27
   138e2:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   138e4:	f8 01       	movw	r30, r16
   138e6:	86 81       	ldd	r24, Z+6	; 0x06
   138e8:	97 81       	ldd	r25, Z+7	; 0x07
   138ea:	81 15       	cp	r24, r1
   138ec:	91 40       	sbci	r25, 0x01	; 1
   138ee:	71 f0       	breq	.+28     	; 0x1390c <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   138f0:	f8 01       	movw	r30, r16
   138f2:	b7 82       	std	Z+7, r11	; 0x07
   138f4:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   138f6:	ce 01       	movw	r24, r28
   138f8:	07 96       	adiw	r24, 0x07	; 7
   138fa:	ed b7       	in	r30, 0x3d	; 61
   138fc:	fe b7       	in	r31, 0x3e	; 62
   138fe:	95 83       	std	Z+5, r25	; 0x05
   13900:	84 83       	std	Z+4, r24	; 0x04
   13902:	c1 82       	std	Z+1, r12	; 0x01
   13904:	d2 82       	std	Z+2, r13	; 0x02
   13906:	e3 82       	std	Z+3, r14	; 0x03
   13908:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   1390c:	f8 01       	movw	r30, r16
   1390e:	20 85       	ldd	r18, Z+8	; 0x08
   13910:	31 85       	ldd	r19, Z+9	; 0x09
   13912:	82 85       	ldd	r24, Z+10	; 0x0a
   13914:	93 85       	ldd	r25, Z+11	; 0x0b
   13916:	28 9f       	mul	r18, r24
   13918:	a0 01       	movw	r20, r0
   1391a:	29 9f       	mul	r18, r25
   1391c:	50 0d       	add	r21, r0
   1391e:	38 9f       	mul	r19, r24
   13920:	50 0d       	add	r21, r0
   13922:	11 24       	eor	r1, r1
   13924:	24 85       	ldd	r18, Z+12	; 0x0c
   13926:	35 85       	ldd	r19, Z+13	; 0x0d
   13928:	42 9f       	mul	r20, r18
   1392a:	c0 01       	movw	r24, r0
   1392c:	43 9f       	mul	r20, r19
   1392e:	90 0d       	add	r25, r0
   13930:	52 9f       	mul	r21, r18
   13932:	90 0d       	add	r25, r0
   13934:	11 24       	eor	r1, r1
   13936:	09 2e       	mov	r0, r25
   13938:	00 0c       	add	r0, r0
   1393a:	aa 0b       	sbc	r26, r26
   1393c:	bb 0b       	sbc	r27, r27
   1393e:	8b 83       	std	Y+3, r24	; 0x03
   13940:	9c 83       	std	Y+4, r25	; 0x04
   13942:	ad 83       	std	Y+5, r26	; 0x05
   13944:	be 83       	std	Y+6, r27	; 0x06
   13946:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13948:	4c 16       	cp	r4, r28
   1394a:	5d 06       	cpc	r5, r29
   1394c:	09 f0       	breq	.+2      	; 0x13950 <Post_Config+0x104>
   1394e:	a0 cf       	rjmp	.-192    	; 0x13890 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   13950:	0f 90       	pop	r0
   13952:	0f 90       	pop	r0
   13954:	0f 90       	pop	r0
   13956:	0f 90       	pop	r0
   13958:	0f 90       	pop	r0
   1395a:	df 91       	pop	r29
   1395c:	cf 91       	pop	r28
   1395e:	1f 91       	pop	r17
   13960:	0f 91       	pop	r16
   13962:	ef 90       	pop	r14
   13964:	df 90       	pop	r13
   13966:	cf 90       	pop	r12
   13968:	bf 90       	pop	r11
   1396a:	af 90       	pop	r10
   1396c:	8f 90       	pop	r8
   1396e:	7f 90       	pop	r7
   13970:	6f 90       	pop	r6
   13972:	5f 90       	pop	r5
   13974:	4f 90       	pop	r4
   13976:	08 95       	ret

00013978 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13978:	af e1       	ldi	r26, 0x1F	; 31
   1397a:	b1 e0       	ldi	r27, 0x01	; 1
   1397c:	e2 ec       	ldi	r30, 0xC2	; 194
   1397e:	fc e9       	ldi	r31, 0x9C	; 156
   13980:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   13984:	8c 01       	movw	r16, r24

    printf("Reading: %s\n", name);
   13986:	6f de       	rcall	.-802    	; 0x13666 <init_Devices>
   13988:	ed b7       	in	r30, 0x3d	; 61
   1398a:	fe b7       	in	r31, 0x3e	; 62
   1398c:	15 83       	std	Z+5, r17	; 0x05
   1398e:	04 83       	std	Z+4, r16	; 0x04
   13990:	8a eb       	ldi	r24, 0xBA	; 186
   13992:	9d e1       	ldi	r25, 0x1D	; 29
   13994:	a0 e0       	ldi	r26, 0x00	; 0
   13996:	81 83       	std	Z+1, r24	; 0x01
   13998:	92 83       	std	Z+2, r25	; 0x02
   1399a:	a3 83       	std	Z+3, r26	; 0x03
   1399c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    cfg = fopen(name, "rb");
   139a0:	69 ef       	ldi	r22, 0xF9	; 249
   139a2:	78 e0       	ldi	r23, 0x08	; 8
   139a4:	c8 01       	movw	r24, r16
   139a6:	0e 94 dd 7f 	call	0xffba	; 0xffba <fopen>
   139aa:	c4 5f       	subi	r28, 0xF4	; 244
   139ac:	de 4f       	sbci	r29, 0xFE	; 254
   139ae:	99 83       	std	Y+1, r25	; 0x01
   139b0:	88 83       	st	Y, r24
   139b2:	cc 50       	subi	r28, 0x0C	; 12
    if(cfg == NULL)
   139b4:	d1 40       	sbci	r29, 0x01	; 1
   139b6:	89 2b       	or	r24, r25
   139b8:	09 f4       	brne	.+2      	; 0x139bc <Read_Config+0x44>
   139ba:	59 c0       	rjmp	.+178    	; 0x13a6e <Read_Config+0xf6>
   139bc:	41 2c       	mov	r4, r1
   139be:	51 2c       	mov	r5, r1
   139c0:	c1 2c       	mov	r12, r1
   139c2:	d1 2c       	mov	r13, r1
   139c4:	c8 5f       	subi	r28, 0xF8	; 248
   139c6:	de 4f       	sbci	r29, 0xFE	; 254
   139c8:	19 82       	std	Y+1, r1	; 0x01
   139ca:	18 82       	st	Y, r1
   139cc:	c8 50       	subi	r28, 0x08	; 8
   139ce:	d1 40       	sbci	r29, 0x01	; 1
   139d0:	61 2c       	mov	r6, r1
   139d2:	71 2c       	mov	r7, r1
   139d4:	c6 5f       	subi	r28, 0xF6	; 246
   139d6:	de 4f       	sbci	r29, 0xFE	; 254
   139d8:	19 82       	std	Y+1, r1	; 0x01
   139da:	18 82       	st	Y, r1
   139dc:	ca 50       	subi	r28, 0x0A	; 10
   139de:	d1 40       	sbci	r29, 0x01	; 1
   139e0:	e1 2c       	mov	r14, r1
   139e2:	f1 2c       	mov	r15, r1
   139e4:	21 2c       	mov	r2, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   139e6:	31 2c       	mov	r3, r1
   139e8:	89 e0       	ldi	r24, 0x09	; 9
   139ea:	9b e1       	ldi	r25, 0x1B	; 27
   139ec:	9c 01       	movw	r18, r24
   139ee:	40 e0       	ldi	r20, 0x00	; 0
   139f0:	c2 5f       	subi	r28, 0xF2	; 242
   139f2:	de 4f       	sbci	r29, 0xFE	; 254
   139f4:	28 83       	st	Y, r18
   139f6:	39 83       	std	Y+1, r19	; 0x01
   139f8:	4a 83       	std	Y+2, r20	; 0x02
   139fa:	ce 50       	subi	r28, 0x0E	; 14
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   139fc:	d1 40       	sbci	r29, 0x01	; 1
   139fe:	8b e2       	ldi	r24, 0x2B	; 43
   13a00:	9b e1       	ldi	r25, 0x1B	; 27
   13a02:	9c 01       	movw	r18, r24
   13a04:	40 e0       	ldi	r20, 0x00	; 0
   13a06:	cf 5e       	subi	r28, 0xEF	; 239
   13a08:	de 4f       	sbci	r29, 0xFE	; 254
   13a0a:	28 83       	st	Y, r18
   13a0c:	39 83       	std	Y+1, r19	; 0x01
   13a0e:	4a 83       	std	Y+2, r20	; 0x02
   13a10:	c1 51       	subi	r28, 0x11	; 17
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13a12:	d1 40       	sbci	r29, 0x01	; 1
   13a14:	8b e5       	ldi	r24, 0x5B	; 91
   13a16:	9b e1       	ldi	r25, 0x1B	; 27
   13a18:	9c 01       	movw	r18, r24
   13a1a:	40 e0       	ldi	r20, 0x00	; 0
   13a1c:	cc 5e       	subi	r28, 0xEC	; 236
   13a1e:	de 4f       	sbci	r29, 0xFE	; 254
   13a20:	28 83       	st	Y, r18
   13a22:	39 83       	std	Y+1, r19	; 0x01
   13a24:	4a 83       	std	Y+2, r20	; 0x02
   13a26:	c4 51       	subi	r28, 0x14	; 20
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13a28:	d1 40       	sbci	r29, 0x01	; 1
   13a2a:	8a e8       	ldi	r24, 0x8A	; 138
   13a2c:	9b e1       	ldi	r25, 0x1B	; 27
   13a2e:	9c 01       	movw	r18, r24
   13a30:	40 e0       	ldi	r20, 0x00	; 0
   13a32:	c9 5e       	subi	r28, 0xE9	; 233
   13a34:	de 4f       	sbci	r29, 0xFE	; 254
   13a36:	28 83       	st	Y, r18
   13a38:	39 83       	std	Y+1, r19	; 0x01
   13a3a:	4a 83       	std	Y+2, r20	; 0x02
   13a3c:	c7 51       	subi	r28, 0x17	; 23
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13a3e:	d1 40       	sbci	r29, 0x01	; 1
   13a40:	8a eb       	ldi	r24, 0xBA	; 186
   13a42:	9b e1       	ldi	r25, 0x1B	; 27
   13a44:	9c 01       	movw	r18, r24
   13a46:	40 e0       	ldi	r20, 0x00	; 0
   13a48:	c6 5e       	subi	r28, 0xE6	; 230
   13a4a:	de 4f       	sbci	r29, 0xFE	; 254
   13a4c:	28 83       	st	Y, r18
   13a4e:	39 83       	std	Y+1, r19	; 0x01
   13a50:	4a 83       	std	Y+2, r20	; 0x02
   13a52:	ca 51       	subi	r28, 0x1A	; 26
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13a54:	d1 40       	sbci	r29, 0x01	; 1
   13a56:	88 ee       	ldi	r24, 0xE8	; 232
   13a58:	9b e1       	ldi	r25, 0x1B	; 27
   13a5a:	9c 01       	movw	r18, r24
   13a5c:	40 e0       	ldi	r20, 0x00	; 0
   13a5e:	c3 5e       	subi	r28, 0xE3	; 227
   13a60:	de 4f       	sbci	r29, 0xFE	; 254
   13a62:	28 83       	st	Y, r18
   13a64:	39 83       	std	Y+1, r19	; 0x01
   13a66:	4a 83       	std	Y+2, r20	; 0x02
   13a68:	cd 51       	subi	r28, 0x1D	; 29
   13a6a:	d1 40       	sbci	r29, 0x01	; 1
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13a6c:	26 c0       	rjmp	.+76     	; 0x13aba <Read_Config+0x142>
   13a6e:	83 e5       	ldi	r24, 0x53	; 83
   13a70:	9e e0       	ldi	r25, 0x0E	; 14
   13a72:	0e 94 0e 7a 	call	0xf41c	; 0xf41c <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13a76:	ed b7       	in	r30, 0x3d	; 61
   13a78:	fe b7       	in	r31, 0x3e	; 62
   13a7a:	15 83       	std	Z+5, r17	; 0x05
   13a7c:	04 83       	std	Z+4, r16	; 0x04
   13a7e:	8c e9       	ldi	r24, 0x9C	; 156
   13a80:	9d e1       	ldi	r25, 0x1D	; 29
   13a82:	a0 e0       	ldi	r26, 0x00	; 0
   13a84:	81 83       	std	Z+1, r24	; 0x01
   13a86:	92 83       	std	Z+2, r25	; 0x02
   13a88:	a3 83       	std	Z+3, r26	; 0x03
   13a8a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        set_Config_Defaults();
        return(errors);
   13a8e:	81 e0       	ldi	r24, 0x01	; 1
   13a90:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13a92:	95 c3       	rjmp	.+1834   	; 0x141be <Read_Config+0x846>
   13a94:	ff ef       	ldi	r31, 0xFF	; 255
   13a96:	4f 1a       	sub	r4, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13a98:	5f 0a       	sbc	r5, r31
   13a9a:	4e e7       	ldi	r20, 0x7E	; 126
   13a9c:	50 e0       	ldi	r21, 0x00	; 0
   13a9e:	9e 01       	movw	r18, r28
   13aa0:	28 5f       	subi	r18, 0xF8	; 248
   13aa2:	3f 4f       	sbci	r19, 0xFF	; 255
   13aa4:	49 01       	movw	r8, r18
   13aa6:	b9 01       	movw	r22, r18
   13aa8:	ce 01       	movw	r24, r28
   13aaa:	88 57       	subi	r24, 0x78	; 120
   13aac:	9f 4f       	sbci	r25, 0xFF	; 255
   13aae:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13ab2:	5c 01       	movw	r10, r24
   13ab4:	88 85       	ldd	r24, Y+8	; 0x08
   13ab6:	81 11       	cpse	r24, r1
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13ab8:	10 c0       	rjmp	.+32     	; 0x13ada <Read_Config+0x162>
   13aba:	c4 5f       	subi	r28, 0xF4	; 244
   13abc:	de 4f       	sbci	r29, 0xFE	; 254
   13abe:	48 81       	ld	r20, Y
   13ac0:	59 81       	ldd	r21, Y+1	; 0x01
   13ac2:	cc 50       	subi	r28, 0x0C	; 12
   13ac4:	d1 40       	sbci	r29, 0x01	; 1
   13ac6:	6e e7       	ldi	r22, 0x7E	; 126
   13ac8:	70 e0       	ldi	r23, 0x00	; 0
   13aca:	ce 01       	movw	r24, r28
   13acc:	88 57       	subi	r24, 0x78	; 120
   13ace:	9f 4f       	sbci	r25, 0xFF	; 255
   13ad0:	0e 94 f5 77 	call	0xefea	; 0xefea <fgets>
   13ad4:	89 2b       	or	r24, r25
   13ad6:	f1 f6       	brne	.-68     	; 0x13a94 <Read_Config+0x11c>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13ad8:	32 c3       	rjmp	.+1636   	; 0x1413e <Read_Config+0x7c6>
   13ada:	83 32       	cpi	r24, 0x23	; 35
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13adc:	71 f3       	breq	.-36     	; 0x13aba <Read_Config+0x142>
   13ade:	c4 01       	movw	r24, r8
   13ae0:	0e 94 70 94 	call	0x128e0	; 0x128e0 <tok_index>
   13ae4:	8f 3f       	cpi	r24, 0xFF	; 255
   13ae6:	3f ef       	ldi	r19, 0xFF	; 255
   13ae8:	93 07       	cpc	r25, r19
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13aea:	49 f4       	brne	.+18     	; 0x13afe <Read_Config+0x186>
   13aec:	ed b7       	in	r30, 0x3d	; 61
   13aee:	fe b7       	in	r31, 0x3e	; 62
   13af0:	57 82       	std	Z+7, r5	; 0x07
   13af2:	46 82       	std	Z+6, r4	; 0x06
   13af4:	95 82       	std	Z+5, r9	; 0x05
   13af6:	84 82       	std	Z+4, r8	; 0x04
   13af8:	8a e7       	ldi	r24, 0x7A	; 122
   13afa:	9d e1       	ldi	r25, 0x1D	; 29
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13afc:	c9 c0       	rjmp	.+402    	; 0x13c90 <Read_Config+0x318>
   13afe:	88 0f       	add	r24, r24
   13b00:	99 1f       	adc	r25, r25
   13b02:	88 0f       	add	r24, r24
   13b04:	99 1f       	adc	r25, r25
   13b06:	fc 01       	movw	r30, r24
   13b08:	ec 53       	subi	r30, 0x3C	; 60
   13b0a:	fe 4f       	sbci	r31, 0xFE	; 254
   13b0c:	02 81       	ldd	r16, Z+2	; 0x02

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13b0e:	13 81       	ldd	r17, Z+3	; 0x03
   13b10:	4e e7       	ldi	r20, 0x7E	; 126
   13b12:	50 e0       	ldi	r21, 0x00	; 0
   13b14:	b4 01       	movw	r22, r8
   13b16:	c5 01       	movw	r24, r10
   13b18:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        if(MATCH(token,"="))
   13b1c:	5c 01       	movw	r10, r24
   13b1e:	66 e6       	ldi	r22, 0x66	; 102
   13b20:	7e e0       	ldi	r23, 0x0E	; 14
   13b22:	c4 01       	movw	r24, r8
   13b24:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   13b28:	89 2b       	or	r24, r25
            ptr = get_token(ptr, token, sizeof(token)-2);
   13b2a:	39 f0       	breq	.+14     	; 0x13b3a <Read_Config+0x1c2>
   13b2c:	4e e7       	ldi	r20, 0x7E	; 126
   13b2e:	50 e0       	ldi	r21, 0x00	; 0
   13b30:	b4 01       	movw	r22, r8
   13b32:	c5 01       	movw	r24, r10
   13b34:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        val.l = get_value(token);
   13b38:	5c 01       	movw	r10, r24
   13b3a:	c4 01       	movw	r24, r8
   13b3c:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13b40:	01 31       	cpi	r16, 0x11	; 17
        {
            state = pop_state();
   13b42:	11 05       	cpc	r17, r1
   13b44:	19 f4       	brne	.+6      	; 0x13b4c <Read_Config+0x1d4>
   13b46:	cc dd       	rcall	.-1128   	; 0x136e0 <pop_state>
            continue;
   13b48:	1c 01       	movw	r2, r24
        }

        switch(state)
   13b4a:	b7 cf       	rjmp	.-146    	; 0x13aba <Read_Config+0x142>
   13b4c:	30 e1       	ldi	r19, 0x10	; 16
   13b4e:	23 16       	cp	r2, r19
   13b50:	31 04       	cpc	r3, r1
   13b52:	08 f0       	brcs	.+2      	; 0x13b56 <Read_Config+0x1de>
   13b54:	de c2       	rjmp	.+1468   	; 0x14112 <Read_Config+0x79a>
   13b56:	f1 01       	movw	r30, r2
   13b58:	e0 53       	subi	r30, 0x30	; 48
   13b5a:	ff 4f       	sbci	r31, 0xFF	; 255
   13b5c:	0c 94 ba e3 	jmp	0x1c774	; 0x1c774 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13b60:	0e 30       	cpi	r16, 0x0E	; 14
   13b62:	11 05       	cpc	r17, r1
   13b64:	09 f4       	brne	.+2      	; 0x13b68 <Read_Config+0x1f0>
   13b66:	87 c0       	rjmp	.+270    	; 0x13c76 <Read_Config+0x2fe>
   13b68:	44 f4       	brge	.+16     	; 0x13b7a <Read_Config+0x202>
   13b6a:	02 30       	cpi	r16, 0x02	; 2
   13b6c:	11 05       	cpc	r17, r1
   13b6e:	09 f4       	brne	.+2      	; 0x13b72 <Read_Config+0x1fa>
   13b70:	41 c0       	rjmp	.+130    	; 0x13bf4 <Read_Config+0x27c>
   13b72:	0c 30       	cpi	r16, 0x0C	; 12
   13b74:	11 05       	cpc	r17, r1
   13b76:	09 f1       	breq	.+66     	; 0x13bba <Read_Config+0x242>
   13b78:	83 c0       	rjmp	.+262    	; 0x13c80 <Read_Config+0x308>
   13b7a:	03 32       	cpi	r16, 0x23	; 35
   13b7c:	11 05       	cpc	r17, r1
   13b7e:	e9 f0       	breq	.+58     	; 0x13bba <Read_Config+0x242>
   13b80:	04 32       	cpi	r16, 0x24	; 36
   13b82:	11 05       	cpc	r17, r1
   13b84:	29 f0       	breq	.+10     	; 0x13b90 <Read_Config+0x218>
   13b86:	00 32       	cpi	r16, 0x20	; 32
   13b88:	11 05       	cpc	r17, r1
   13b8a:	09 f0       	breq	.+2      	; 0x13b8e <Read_Config+0x216>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13b8c:	79 c0       	rjmp	.+242    	; 0x13c80 <Read_Config+0x308>
   13b8e:	55 c0       	rjmp	.+170    	; 0x13c3a <Read_Config+0x2c2>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13b90:	80 e0       	ldi	r24, 0x00	; 0
   13b92:	90 e0       	ldi	r25, 0x00	; 0
   13b94:	8c dd       	rcall	.-1256   	; 0x136ae <push_state>
   13b96:	82 e0       	ldi	r24, 0x02	; 2
   13b98:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   13b9a:	a6 dc       	rcall	.-1716   	; 0x134e8 <alloc_device>
   13b9c:	6c 01       	movw	r12, r24
   13b9e:	01 96       	adiw	r24, 0x01	; 1
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13ba0:	09 f4       	brne	.+2      	; 0x13ba4 <Read_Config+0x22c>
   13ba2:	8b cf       	rjmp	.-234    	; 0x13aba <Read_Config+0x142>
   13ba4:	8b e2       	ldi	r24, 0x2B	; 43
   13ba6:	8c 9d       	mul	r24, r12
   13ba8:	f0 01       	movw	r30, r0
   13baa:	8d 9d       	mul	r24, r13
   13bac:	f0 0d       	add	r31, r0
   13bae:	11 24       	eor	r1, r1
   13bb0:	e0 50       	subi	r30, 0x00	; 0
   13bb2:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13bb4:	67 a0       	ldd	r6, Z+39	; 0x27
   13bb6:	70 a4       	ldd	r7, Z+40	; 0x28
   13bb8:	19 c0       	rjmp	.+50     	; 0x13bec <Read_Config+0x274>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13bba:	80 e0       	ldi	r24, 0x00	; 0
   13bbc:	90 e0       	ldi	r25, 0x00	; 0
   13bbe:	77 dd       	rcall	.-1298   	; 0x136ae <push_state>
   13bc0:	83 e0       	ldi	r24, 0x03	; 3
   13bc2:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   13bc4:	91 dc       	rcall	.-1758   	; 0x134e8 <alloc_device>
   13bc6:	6c 01       	movw	r12, r24
   13bc8:	8f ef       	ldi	r24, 0xFF	; 255
   13bca:	c8 16       	cp	r12, r24
   13bcc:	d8 06       	cpc	r13, r24
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13bce:	09 f4       	brne	.+2      	; 0x13bd2 <Read_Config+0x25a>
   13bd0:	74 cf       	rjmp	.-280    	; 0x13aba <Read_Config+0x142>
   13bd2:	8b e2       	ldi	r24, 0x2B	; 43
   13bd4:	8c 9d       	mul	r24, r12
   13bd6:	f0 01       	movw	r30, r0
   13bd8:	8d 9d       	mul	r24, r13
   13bda:	f0 0d       	add	r31, r0
   13bdc:	11 24       	eor	r1, r1
   13bde:	e0 50       	subi	r30, 0x00	; 0
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   13be0:	f1 4e       	sbci	r31, 0xE1	; 225
   13be2:	67 a0       	ldd	r6, Z+39	; 0x27
   13be4:	70 a4       	ldd	r7, Z+40	; 0x28
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13be6:	b4 01       	movw	r22, r8
   13be8:	c6 01       	movw	r24, r12
   13bea:	20 de       	rcall	.-960    	; 0x1382c <hpdir_set_parameters>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13bec:	22 24       	eor	r2, r2
   13bee:	23 94       	inc	r2
   13bf0:	31 2c       	mov	r3, r1
   13bf2:	63 cf       	rjmp	.-314    	; 0x13aba <Read_Config+0x142>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13bf4:	80 e0       	ldi	r24, 0x00	; 0
   13bf6:	90 e0       	ldi	r25, 0x00	; 0
   13bf8:	5a dd       	rcall	.-1356   	; 0x136ae <push_state>
   13bfa:	81 e0       	ldi	r24, 0x01	; 1
   13bfc:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   13bfe:	74 dc       	rcall	.-1816   	; 0x134e8 <alloc_device>
   13c00:	6c 01       	movw	r12, r24
   13c02:	9f ef       	ldi	r25, 0xFF	; 255
   13c04:	c9 16       	cp	r12, r25
   13c06:	d9 06       	cpc	r13, r25
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13c08:	09 f4       	brne	.+2      	; 0x13c0c <Read_Config+0x294>
   13c0a:	57 cf       	rjmp	.-338    	; 0x13aba <Read_Config+0x142>
   13c0c:	8b e2       	ldi	r24, 0x2B	; 43
   13c0e:	8c 9d       	mul	r24, r12
   13c10:	f0 01       	movw	r30, r0
   13c12:	8d 9d       	mul	r24, r13
   13c14:	f0 0d       	add	r31, r0
   13c16:	11 24       	eor	r1, r1
   13c18:	e0 50       	subi	r30, 0x00	; 0
   13c1a:	f1 4e       	sbci	r31, 0xE1	; 225
   13c1c:	a7 a1       	ldd	r26, Z+39	; 0x27
   13c1e:	b0 a5       	ldd	r27, Z+40	; 0x28
   13c20:	c8 5f       	subi	r28, 0xF8	; 248
   13c22:	de 4f       	sbci	r29, 0xFE	; 254
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   13c24:	b9 83       	std	Y+1, r27	; 0x01
   13c26:	a8 83       	st	Y, r26
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13c28:	c8 50       	subi	r28, 0x08	; 8
   13c2a:	d1 40       	sbci	r29, 0x01	; 1
   13c2c:	b4 01       	movw	r22, r8
   13c2e:	c6 01       	movw	r24, r12
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13c30:	fd dd       	rcall	.-1030   	; 0x1382c <hpdir_set_parameters>
   13c32:	aa e0       	ldi	r26, 0x0A	; 10
   13c34:	2a 2e       	mov	r2, r26
   13c36:	31 2c       	mov	r3, r1
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13c38:	40 cf       	rjmp	.-384    	; 0x13aba <Read_Config+0x142>
   13c3a:	80 e0       	ldi	r24, 0x00	; 0
   13c3c:	90 e0       	ldi	r25, 0x00	; 0
   13c3e:	37 dd       	rcall	.-1426   	; 0x136ae <push_state>
   13c40:	84 e0       	ldi	r24, 0x04	; 4
                        if(index == -1)
   13c42:	90 e0       	ldi	r25, 0x00	; 0
   13c44:	51 dc       	rcall	.-1886   	; 0x134e8 <alloc_device>
   13c46:	6c 01       	movw	r12, r24
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13c48:	01 96       	adiw	r24, 0x01	; 1
   13c4a:	09 f4       	brne	.+2      	; 0x13c4e <Read_Config+0x2d6>
   13c4c:	36 cf       	rjmp	.-404    	; 0x13aba <Read_Config+0x142>
   13c4e:	8b e2       	ldi	r24, 0x2B	; 43
   13c50:	8c 9d       	mul	r24, r12
   13c52:	f0 01       	movw	r30, r0
   13c54:	8d 9d       	mul	r24, r13
   13c56:	f0 0d       	add	r31, r0
   13c58:	11 24       	eor	r1, r1
   13c5a:	e0 50       	subi	r30, 0x00	; 0
   13c5c:	f1 4e       	sbci	r31, 0xE1	; 225
   13c5e:	27 a1       	ldd	r18, Z+39	; 0x27
   13c60:	30 a5       	ldd	r19, Z+40	; 0x28
   13c62:	c6 5f       	subi	r28, 0xF6	; 246
   13c64:	de 4f       	sbci	r29, 0xFE	; 254
   13c66:	39 83       	std	Y+1, r19	; 0x01
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13c68:	28 83       	st	Y, r18
   13c6a:	ca 50       	subi	r28, 0x0A	; 10
   13c6c:	d1 40       	sbci	r29, 0x01	; 1
   13c6e:	fe e0       	ldi	r31, 0x0E	; 14
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13c70:	2f 2e       	mov	r2, r31
   13c72:	31 2c       	mov	r3, r1
   13c74:	22 cf       	rjmp	.-444    	; 0x13aba <Read_Config+0x142>
   13c76:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                        break;
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13c7a:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13c7e:	1d cf       	rjmp	.-454    	; 0x13aba <Read_Config+0x142>
   13c80:	ed b7       	in	r30, 0x3d	; 61
   13c82:	fe b7       	in	r31, 0x3e	; 62
   13c84:	57 82       	std	Z+7, r5	; 0x07
   13c86:	46 82       	std	Z+6, r4	; 0x06
   13c88:	b5 82       	std	Z+5, r11	; 0x05
   13c8a:	a4 82       	std	Z+4, r10	; 0x04
   13c8c:	88 e5       	ldi	r24, 0x58	; 88
   13c8e:	9d e1       	ldi	r25, 0x1D	; 29
   13c90:	a0 e0       	ldi	r26, 0x00	; 0
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13c92:	81 83       	std	Z+1, r24	; 0x01
   13c94:	92 83       	std	Z+2, r25	; 0x02
   13c96:	a3 83       	std	Z+3, r26	; 0x03
                {
                    push_state(state);
   13c98:	4c c2       	rjmp	.+1176   	; 0x14132 <Read_Config+0x7ba>
   13c9a:	09 30       	cpi	r16, 0x09	; 9
   13c9c:	11 05       	cpc	r17, r1
   13c9e:	39 f4       	brne	.+14     	; 0x13cae <Read_Config+0x336>
                    state = PRINTER_CONFIG;
   13ca0:	8e e0       	ldi	r24, 0x0E	; 14
   13ca2:	90 e0       	ldi	r25, 0x00	; 0
   13ca4:	04 dd       	rcall	.-1528   	; 0x136ae <push_state>
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13ca6:	ef e0       	ldi	r30, 0x0F	; 15
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13ca8:	2e 2e       	mov	r2, r30
   13caa:	31 2c       	mov	r3, r1
   13cac:	06 cf       	rjmp	.-500    	; 0x13aba <Read_Config+0x142>
   13cae:	ed b7       	in	r30, 0x3d	; 61
   13cb0:	fe b7       	in	r31, 0x3e	; 62
   13cb2:	57 82       	std	Z+7, r5	; 0x07
   13cb4:	46 82       	std	Z+6, r4	; 0x06
   13cb6:	b5 82       	std	Z+5, r11	; 0x05
   13cb8:	a4 82       	std	Z+4, r10	; 0x04
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   13cba:	8e e2       	ldi	r24, 0x2E	; 46
   13cbc:	9d e1       	ldi	r25, 0x1D	; 29
   13cbe:	e8 cf       	rjmp	.-48     	; 0x13c90 <Read_Config+0x318>
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   13cc0:	01 30       	cpi	r16, 0x01	; 1
   13cc2:	11 05       	cpc	r17, r1
   13cc4:	b1 f4       	brne	.+44     	; 0x13cf2 <Read_Config+0x37a>
   13cc6:	6f 71       	andi	r22, 0x1F	; 31
   13cc8:	8b e2       	ldi	r24, 0x2B	; 43
   13cca:	8c 9d       	mul	r24, r12
   13ccc:	f0 01       	movw	r30, r0
   13cce:	8d 9d       	mul	r24, r13
   13cd0:	f0 0d       	add	r31, r0
   13cd2:	11 24       	eor	r1, r1
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   13cd4:	e0 50       	subi	r30, 0x00	; 0
   13cd6:	f1 4e       	sbci	r31, 0xE1	; 225
   13cd8:	61 83       	std	Z+1, r22	; 0x01
   13cda:	c6 5f       	subi	r28, 0xF6	; 246
   13cdc:	de 4f       	sbci	r29, 0xFE	; 254
   13cde:	a8 81       	ld	r26, Y
   13ce0:	b9 81       	ldd	r27, Y+1	; 0x01
// NO PPR
                    Devices[index].PPR = 0xff;
   13ce2:	ca 50       	subi	r28, 0x0A	; 10
   13ce4:	d1 40       	sbci	r29, 0x01	; 1
                    PRINTERp->HEADER.PPR = 0xff;
   13ce6:	6c 93       	st	X, r22
   13ce8:	8f ef       	ldi	r24, 0xFF	; 255
   13cea:	82 83       	std	Z+2, r24	; 0x02
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13cec:	fd 01       	movw	r30, r26
   13cee:	81 83       	std	Z+1, r24	; 0x01
   13cf0:	e4 ce       	rjmp	.-568    	; 0x13aba <Read_Config+0x142>
   13cf2:	ed b7       	in	r30, 0x3d	; 61
   13cf4:	fe b7       	in	r31, 0x3e	; 62
   13cf6:	57 82       	std	Z+7, r5	; 0x07
   13cf8:	46 82       	std	Z+6, r4	; 0x06
   13cfa:	b5 82       	std	Z+5, r11	; 0x05
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13cfc:	a4 82       	std	Z+4, r10	; 0x04
   13cfe:	8d ef       	ldi	r24, 0xFD	; 253
   13d00:	9c e1       	ldi	r25, 0x1C	; 28
   13d02:	c6 cf       	rjmp	.-116    	; 0x13c90 <Read_Config+0x318>
   13d04:	05 31       	cpi	r16, 0x15	; 21
   13d06:	11 05       	cpc	r17, r1
   13d08:	d9 f0       	breq	.+54     	; 0x13d40 <Read_Config+0x3c8>
   13d0a:	6c f4       	brge	.+26     	; 0x13d26 <Read_Config+0x3ae>
   13d0c:	09 30       	cpi	r16, 0x09	; 9
   13d0e:	11 05       	cpc	r17, r1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13d10:	f1 f0       	breq	.+60     	; 0x13d4e <Read_Config+0x3d6>
   13d12:	0b 30       	cpi	r16, 0x0B	; 11
   13d14:	11 05       	cpc	r17, r1
                        state = SS80_CONTROLLER;
   13d16:	49 f5       	brne	.+82     	; 0x13d6a <Read_Config+0x3f2>
   13d18:	81 e0       	ldi	r24, 0x01	; 1
   13d1a:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13d1c:	c8 dc       	rcall	.-1648   	; 0x136ae <push_state>
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13d1e:	54 e0       	ldi	r21, 0x04	; 4
   13d20:	25 2e       	mov	r2, r21
   13d22:	31 2c       	mov	r3, r1
   13d24:	ca ce       	rjmp	.-620    	; 0x13aba <Read_Config+0x142>
   13d26:	07 32       	cpi	r16, 0x27	; 39
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13d28:	11 05       	cpc	r17, r1
   13d2a:	c1 f0       	breq	.+48     	; 0x13d5c <Read_Config+0x3e4>
   13d2c:	0a 32       	cpi	r16, 0x2A	; 42
                        state = SS80_VOLUME;
   13d2e:	11 05       	cpc	r17, r1
   13d30:	e1 f4       	brne	.+56     	; 0x13d6a <Read_Config+0x3f2>
   13d32:	81 e0       	ldi	r24, 0x01	; 1
                        break;
   13d34:	90 e0       	ldi	r25, 0x00	; 0

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13d36:	bb dc       	rcall	.-1674   	; 0x136ae <push_state>
   13d38:	36 e0       	ldi	r19, 0x06	; 6
   13d3a:	23 2e       	mov	r2, r19
                        state = SS80_HEADER;
   13d3c:	31 2c       	mov	r3, r1
   13d3e:	bd ce       	rjmp	.-646    	; 0x13aba <Read_Config+0x142>
   13d40:	81 e0       	ldi	r24, 0x01	; 1
                        break;
   13d42:	90 e0       	ldi	r25, 0x00	; 0
                    case TOK_CONFIG:
                        push_state(state);
   13d44:	b4 dc       	rcall	.-1688   	; 0x136ae <push_state>
   13d46:	72 e0       	ldi	r23, 0x02	; 2
   13d48:	27 2e       	mov	r2, r23
   13d4a:	31 2c       	mov	r3, r1
                        state = SS80_CONFIG;
   13d4c:	b6 ce       	rjmp	.-660    	; 0x13aba <Read_Config+0x142>
   13d4e:	81 e0       	ldi	r24, 0x01	; 1
   13d50:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13d52:	ad dc       	rcall	.-1702   	; 0x136ae <push_state>
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13d54:	63 e0       	ldi	r22, 0x03	; 3
   13d56:	26 2e       	mov	r2, r22
   13d58:	31 2c       	mov	r3, r1
   13d5a:	af ce       	rjmp	.-674    	; 0x13aba <Read_Config+0x142>
                        state = SS80_UNIT;
   13d5c:	81 e0       	ldi	r24, 0x01	; 1
   13d5e:	90 e0       	ldi	r25, 0x00	; 0
   13d60:	a6 dc       	rcall	.-1716   	; 0x136ae <push_state>
                        break;
   13d62:	45 e0       	ldi	r20, 0x05	; 5
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13d64:	24 2e       	mov	r2, r20
   13d66:	31 2c       	mov	r3, r1
   13d68:	a8 ce       	rjmp	.-688    	; 0x13aba <Read_Config+0x142>
   13d6a:	ed b7       	in	r30, 0x3d	; 61
   13d6c:	fe b7       	in	r31, 0x3e	; 62
   13d6e:	57 82       	std	Z+7, r5	; 0x07
   13d70:	46 82       	std	Z+6, r4	; 0x06
   13d72:	b5 82       	std	Z+5, r11	; 0x05
   13d74:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   13d76:	80 ed       	ldi	r24, 0xD0	; 208
   13d78:	9c e1       	ldi	r25, 0x1C	; 28
   13d7a:	8a cf       	rjmp	.-236    	; 0x13c90 <Read_Config+0x318>
   13d7c:	02 31       	cpi	r16, 0x12	; 18
   13d7e:	11 05       	cpc	r17, r1
   13d80:	f1 f0       	breq	.+60     	; 0x13dbe <Read_Config+0x446>
   13d82:	0f 31       	cpi	r16, 0x1F	; 31
   13d84:	11 05       	cpc	r17, r1
   13d86:	79 f0       	breq	.+30     	; 0x13da6 <Read_Config+0x42e>
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13d88:	01 30       	cpi	r16, 0x01	; 1
   13d8a:	11 05       	cpc	r17, r1
   13d8c:	e9 f4       	brne	.+58     	; 0x13dc8 <Read_Config+0x450>
   13d8e:	6f 71       	andi	r22, 0x1F	; 31
   13d90:	8b e2       	ldi	r24, 0x2B	; 43
   13d92:	8c 9d       	mul	r24, r12
   13d94:	f0 01       	movw	r30, r0
   13d96:	8d 9d       	mul	r24, r13
   13d98:	f0 0d       	add	r31, r0
   13d9a:	11 24       	eor	r1, r1
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   13d9c:	e0 50       	subi	r30, 0x00	; 0
   13d9e:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13da0:	61 83       	std	Z+1, r22	; 0x01
   13da2:	d3 01       	movw	r26, r6
   13da4:	37 c1       	rjmp	.+622    	; 0x14014 <Read_Config+0x69c>
   13da6:	67 70       	andi	r22, 0x07	; 7
   13da8:	8b e2       	ldi	r24, 0x2B	; 43
   13daa:	8c 9d       	mul	r24, r12
   13dac:	f0 01       	movw	r30, r0
   13dae:	8d 9d       	mul	r24, r13
   13db0:	f0 0d       	add	r31, r0
   13db2:	11 24       	eor	r1, r1
                        SS80p->HEADER.PPR = 0x07 & val.b;
   13db4:	e0 50       	subi	r30, 0x00	; 0
   13db6:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   13db8:	62 83       	std	Z+2, r22	; 0x02
   13dba:	f3 01       	movw	r30, r6
   13dbc:	2d c1       	rjmp	.+602    	; 0x14018 <Read_Config+0x6a0>
   13dbe:	c4 01       	movw	r24, r8
   13dc0:	0e 94 45 33 	call	0x668a	; 0x668a <stralloc>
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13dc4:	f3 01       	movw	r30, r6
   13dc6:	33 c1       	rjmp	.+614    	; 0x1402e <Read_Config+0x6b6>
   13dc8:	ed b7       	in	r30, 0x3d	; 61
   13dca:	fe b7       	in	r31, 0x3e	; 62
   13dcc:	57 82       	std	Z+7, r5	; 0x07
   13dce:	46 82       	std	Z+6, r4	; 0x06
   13dd0:	b5 82       	std	Z+5, r11	; 0x05
   13dd2:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   13dd4:	82 ea       	ldi	r24, 0xA2	; 162
   13dd6:	9c e1       	ldi	r25, 0x1C	; 28
   13dd8:	5b cf       	rjmp	.-330    	; 0x13c90 <Read_Config+0x318>
                {
                    SS80p->CONFIG.ID = val.w;
   13dda:	07 31       	cpi	r16, 0x17	; 23
   13ddc:	11 05       	cpc	r17, r1
   13dde:	21 f4       	brne	.+8      	; 0x13de8 <Read_Config+0x470>
   13de0:	96 2f       	mov	r25, r22
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13de2:	87 2f       	mov	r24, r23
   13de4:	f3 01       	movw	r30, r6
   13de6:	3f c1       	rjmp	.+638    	; 0x14066 <Read_Config+0x6ee>
   13de8:	ed b7       	in	r30, 0x3d	; 61
   13dea:	fe b7       	in	r31, 0x3e	; 62
   13dec:	57 82       	std	Z+7, r5	; 0x07
   13dee:	46 82       	std	Z+6, r4	; 0x06
   13df0:	b5 82       	std	Z+5, r11	; 0x05
   13df2:	a4 82       	std	Z+4, r10	; 0x04
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   13df4:	84 e7       	ldi	r24, 0x74	; 116
   13df6:	9c e1       	ldi	r25, 0x1C	; 28
   13df8:	4b cf       	rjmp	.-362    	; 0x13c90 <Read_Config+0x318>
   13dfa:	06 32       	cpi	r16, 0x26	; 38
   13dfc:	11 05       	cpc	r17, r1
   13dfe:	71 f0       	breq	.+28     	; 0x13e1c <Read_Config+0x4a4>
   13e00:	08 32       	cpi	r16, 0x28	; 40
   13e02:	11 05       	cpc	r17, r1
   13e04:	39 f0       	breq	.+14     	; 0x13e14 <Read_Config+0x49c>
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13e06:	05 32       	cpi	r16, 0x25	; 37
   13e08:	11 05       	cpc	r17, r1
   13e0a:	59 f4       	brne	.+22     	; 0x13e22 <Read_Config+0x4aa>
   13e0c:	96 2f       	mov	r25, r22

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13e0e:	87 2f       	mov	r24, r23
   13e10:	f3 01       	movw	r30, r6
   13e12:	5c c1       	rjmp	.+696    	; 0x140cc <Read_Config+0x754>
   13e14:	96 2f       	mov	r25, r22
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13e16:	87 2f       	mov	r24, r23
   13e18:	f3 01       	movw	r30, r6
                        break;
   13e1a:	55 c1       	rjmp	.+682    	; 0x140c6 <Read_Config+0x74e>
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13e1c:	f3 01       	movw	r30, r6
   13e1e:	62 87       	std	Z+10, r22	; 0x0a
   13e20:	4c ce       	rjmp	.-872    	; 0x13aba <Read_Config+0x142>
   13e22:	ed b7       	in	r30, 0x3d	; 61
   13e24:	fe b7       	in	r31, 0x3e	; 62
   13e26:	57 82       	std	Z+7, r5	; 0x07
   13e28:	46 82       	std	Z+6, r4	; 0x06
   13e2a:	b5 82       	std	Z+5, r11	; 0x05
   13e2c:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13e2e:	82 e4       	ldi	r24, 0x42	; 66
   13e30:	9c e1       	ldi	r25, 0x1C	; 28
   13e32:	2e cf       	rjmp	.-420    	; 0x13c90 <Read_Config+0x318>
   13e34:	0a 30       	cpi	r16, 0x0A	; 10
   13e36:	11 05       	cpc	r17, r1
   13e38:	09 f4       	brne	.+2      	; 0x13e3c <Read_Config+0x4c4>
   13e3a:	45 c0       	rjmp	.+138    	; 0x13ec6 <Read_Config+0x54e>
   13e3c:	d4 f4       	brge	.+52     	; 0x13e72 <Read_Config+0x4fa>
   13e3e:	05 30       	cpi	r16, 0x05	; 5
   13e40:	11 05       	cpc	r17, r1
   13e42:	d1 f1       	breq	.+116    	; 0x13eb8 <Read_Config+0x540>
   13e44:	64 f4       	brge	.+24     	; 0x13e5e <Read_Config+0x4e6>
   13e46:	01 15       	cp	r16, r1
   13e48:	11 05       	cpc	r17, r1
   13e4a:	09 f4       	brne	.+2      	; 0x13e4e <Read_Config+0x4d6>
   13e4c:	40 c0       	rjmp	.+128    	; 0x13ece <Read_Config+0x556>
   13e4e:	04 30       	cpi	r16, 0x04	; 4
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   13e50:	11 05       	cpc	r17, r1
   13e52:	09 f0       	breq	.+2      	; 0x13e56 <Read_Config+0x4de>
   13e54:	46 c0       	rjmp	.+140    	; 0x13ee2 <Read_Config+0x56a>
                        break;
   13e56:	f3 01       	movw	r30, r6
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13e58:	64 8b       	std	Z+20, r22	; 0x14
   13e5a:	75 8b       	std	Z+21, r23	; 0x15
   13e5c:	2e ce       	rjmp	.-932    	; 0x13aba <Read_Config+0x142>
   13e5e:	06 30       	cpi	r16, 0x06	; 6
   13e60:	11 05       	cpc	r17, r1
   13e62:	71 f1       	breq	.+92     	; 0x13ec0 <Read_Config+0x548>
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13e64:	07 30       	cpi	r16, 0x07	; 7
   13e66:	11 05       	cpc	r17, r1
   13e68:	e1 f5       	brne	.+120    	; 0x13ee2 <Read_Config+0x56a>
                        break;
   13e6a:	f3 01       	movw	r30, r6
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13e6c:	60 8b       	std	Z+16, r22	; 0x10
   13e6e:	71 8b       	std	Z+17, r23	; 0x11
   13e70:	24 ce       	rjmp	.-952    	; 0x13aba <Read_Config+0x142>
   13e72:	0c 31       	cpi	r16, 0x1C	; 28
   13e74:	11 05       	cpc	r17, r1
   13e76:	79 f1       	breq	.+94     	; 0x13ed6 <Read_Config+0x55e>
   13e78:	4c f4       	brge	.+18     	; 0x13e8c <Read_Config+0x514>
   13e7a:	0f 30       	cpi	r16, 0x0F	; 15
   13e7c:	11 05       	cpc	r17, r1
   13e7e:	b1 f0       	breq	.+44     	; 0x13eac <Read_Config+0x534>
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   13e80:	03 31       	cpi	r16, 0x13	; 19
   13e82:	11 05       	cpc	r17, r1
                        break;
   13e84:	71 f5       	brne	.+92     	; 0x13ee2 <Read_Config+0x56a>
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13e86:	f3 01       	movw	r30, r6
   13e88:	65 8f       	std	Z+29, r22	; 0x1d
   13e8a:	17 ce       	rjmp	.-978    	; 0x13aba <Read_Config+0x142>
   13e8c:	01 32       	cpi	r16, 0x21	; 33
   13e8e:	11 05       	cpc	r17, r1
   13e90:	29 f1       	breq	.+74     	; 0x13edc <Read_Config+0x564>
   13e92:	09 32       	cpi	r16, 0x29	; 41
   13e94:	11 05       	cpc	r17, r1
   13e96:	39 f0       	breq	.+14     	; 0x13ea6 <Read_Config+0x52e>
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   13e98:	0e 31       	cpi	r16, 0x1E	; 30
   13e9a:	11 05       	cpc	r17, r1
   13e9c:	11 f5       	brne	.+68     	; 0x13ee2 <Read_Config+0x56a>
                        break;
   13e9e:	f3 01       	movw	r30, r6

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   13ea0:	60 8f       	std	Z+24, r22	; 0x18
   13ea2:	71 8f       	std	Z+25, r23	; 0x19
                        break;
   13ea4:	0a ce       	rjmp	.-1004   	; 0x13aba <Read_Config+0x142>
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   13ea6:	f3 01       	movw	r30, r6
   13ea8:	63 87       	std	Z+11, r22	; 0x0b
   13eaa:	07 ce       	rjmp	.-1010   	; 0x13aba <Read_Config+0x142>
   13eac:	f3 01       	movw	r30, r6
   13eae:	64 87       	std	Z+12, r22	; 0x0c
                        break;
   13eb0:	75 87       	std	Z+13, r23	; 0x0d
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   13eb2:	86 87       	std	Z+14, r24	; 0x0e
   13eb4:	97 87       	std	Z+15, r25	; 0x0f
   13eb6:	01 ce       	rjmp	.-1022   	; 0x13aba <Read_Config+0x142>
                        break;
   13eb8:	61 70       	andi	r22, 0x01	; 1
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   13eba:	f3 01       	movw	r30, r6
   13ebc:	62 8b       	std	Z+18, r22	; 0x12
                        break;
   13ebe:	fd cd       	rjmp	.-1030   	; 0x13aba <Read_Config+0x142>
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13ec0:	f3 01       	movw	r30, r6
   13ec2:	63 8b       	std	Z+19, r22	; 0x13
   13ec4:	fa cd       	rjmp	.-1036   	; 0x13aba <Read_Config+0x142>
                        break;
   13ec6:	f3 01       	movw	r30, r6
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   13ec8:	66 8b       	std	Z+22, r22	; 0x16
   13eca:	77 8b       	std	Z+23, r23	; 0x17
   13ecc:	f6 cd       	rjmp	.-1044   	; 0x13aba <Read_Config+0x142>
                        break;
   13ece:	f3 01       	movw	r30, r6
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13ed0:	62 8f       	std	Z+26, r22	; 0x1a
   13ed2:	73 8f       	std	Z+27, r23	; 0x1b
                        break;
   13ed4:	f2 cd       	rjmp	.-1052   	; 0x13aba <Read_Config+0x142>
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13ed6:	f3 01       	movw	r30, r6
   13ed8:	64 8f       	std	Z+28, r22	; 0x1c
                        break;
   13eda:	ef cd       	rjmp	.-1058   	; 0x13aba <Read_Config+0x142>
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   13edc:	f3 01       	movw	r30, r6
   13ede:	66 8f       	std	Z+30, r22	; 0x1e
   13ee0:	ec cd       	rjmp	.-1064   	; 0x13aba <Read_Config+0x142>
   13ee2:	ed b7       	in	r30, 0x3d	; 61
   13ee4:	fe b7       	in	r31, 0x3e	; 62
   13ee6:	57 82       	std	Z+7, r5	; 0x07
   13ee8:	46 82       	std	Z+6, r4	; 0x06
   13eea:	b5 82       	std	Z+5, r11	; 0x05
   13eec:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13eee:	86 e1       	ldi	r24, 0x16	; 22
   13ef0:	9c e1       	ldi	r25, 0x1C	; 28
   13ef2:	ce ce       	rjmp	.-612    	; 0x13c90 <Read_Config+0x318>
   13ef4:	0a 31       	cpi	r16, 0x1A	; 26
   13ef6:	11 05       	cpc	r17, r1
   13ef8:	b9 f0       	breq	.+46     	; 0x13f28 <Read_Config+0x5b0>
   13efa:	64 f4       	brge	.+24     	; 0x13f14 <Read_Config+0x59c>
   13efc:	08 31       	cpi	r16, 0x18	; 24
   13efe:	11 05       	cpc	r17, r1
   13f00:	e1 f0       	breq	.+56     	; 0x13f3a <Read_Config+0x5c2>
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   13f02:	09 31       	cpi	r16, 0x19	; 25
   13f04:	11 05       	cpc	r17, r1
   13f06:	e1 f4       	brne	.+56     	; 0x13f40 <Read_Config+0x5c8>
   13f08:	f3 01       	movw	r30, r6
   13f0a:	66 a3       	std	Z+38, r22	; 0x26
                        break;
   13f0c:	77 a3       	std	Z+39, r23	; 0x27
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13f0e:	80 a7       	std	Z+40, r24	; 0x28
   13f10:	91 a7       	std	Z+41, r25	; 0x29
   13f12:	d3 cd       	rjmp	.-1114   	; 0x13aba <Read_Config+0x142>
   13f14:	0b 31       	cpi	r16, 0x1B	; 27
   13f16:	11 05       	cpc	r17, r1
   13f18:	69 f0       	breq	.+26     	; 0x13f34 <Read_Config+0x5bc>
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13f1a:	0d 31       	cpi	r16, 0x1D	; 29
   13f1c:	11 05       	cpc	r17, r1
   13f1e:	81 f4       	brne	.+32     	; 0x13f40 <Read_Config+0x5c8>
                        break;
   13f20:	f3 01       	movw	r30, r6

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13f22:	64 a3       	std	Z+36, r22	; 0x24
   13f24:	75 a3       	std	Z+37, r23	; 0x25
   13f26:	c9 cd       	rjmp	.-1134   	; 0x13aba <Read_Config+0x142>
   13f28:	f3 01       	movw	r30, r6
   13f2a:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
   13f2c:	70 a3       	std	Z+32, r23	; 0x20
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   13f2e:	81 a3       	std	Z+33, r24	; 0x21
   13f30:	92 a3       	std	Z+34, r25	; 0x22
                        break;
   13f32:	c3 cd       	rjmp	.-1146   	; 0x13aba <Read_Config+0x142>
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   13f34:	f3 01       	movw	r30, r6
   13f36:	63 a3       	std	Z+35, r22	; 0x23
                        break;
   13f38:	c0 cd       	rjmp	.-1152   	; 0x13aba <Read_Config+0x142>
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13f3a:	f3 01       	movw	r30, r6
   13f3c:	62 a7       	std	Z+42, r22	; 0x2a
   13f3e:	bd cd       	rjmp	.-1158   	; 0x13aba <Read_Config+0x142>
   13f40:	ed b7       	in	r30, 0x3d	; 61
   13f42:	fe b7       	in	r31, 0x3e	; 62
   13f44:	57 82       	std	Z+7, r5	; 0x07
   13f46:	46 82       	std	Z+6, r4	; 0x06
   13f48:	b5 82       	std	Z+5, r11	; 0x05
   13f4a:	a4 82       	std	Z+4, r10	; 0x04
   13f4c:	c3 5e       	subi	r28, 0xE3	; 227
   13f4e:	de 4f       	sbci	r29, 0xFE	; 254
   13f50:	28 81       	ld	r18, Y
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   13f52:	39 81       	ldd	r19, Y+1	; 0x01
   13f54:	4a 81       	ldd	r20, Y+2	; 0x02
   13f56:	cd 51       	subi	r28, 0x1D	; 29
   13f58:	d1 40       	sbci	r29, 0x01	; 1
   13f5a:	e8 c0       	rjmp	.+464    	; 0x1412c <Read_Config+0x7b4>
   13f5c:	04 31       	cpi	r16, 0x14	; 20
   13f5e:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   13f60:	a1 f0       	breq	.+40     	; 0x13f8a <Read_Config+0x612>
   13f62:	05 31       	cpi	r16, 0x15	; 21
   13f64:	11 05       	cpc	r17, r1
   13f66:	51 f0       	breq	.+20     	; 0x13f7c <Read_Config+0x604>
                        state = AMIGO_CONFIG;
   13f68:	09 30       	cpi	r16, 0x09	; 9
   13f6a:	11 05       	cpc	r17, r1
   13f6c:	a9 f4       	brne	.+42     	; 0x13f98 <Read_Config+0x620>
                        break;
   13f6e:	8a e0       	ldi	r24, 0x0A	; 10
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13f70:	90 e0       	ldi	r25, 0x00	; 0
   13f72:	9d db       	rcall	.-2246   	; 0x136ae <push_state>
   13f74:	9c e0       	ldi	r25, 0x0C	; 12
   13f76:	29 2e       	mov	r2, r25
                        state = AMIGO_HEADER;
   13f78:	31 2c       	mov	r3, r1
   13f7a:	9f cd       	rjmp	.-1218   	; 0x13aba <Read_Config+0x142>
   13f7c:	8a e0       	ldi	r24, 0x0A	; 10
                        break;
   13f7e:	90 e0       	ldi	r25, 0x00	; 0
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   13f80:	96 db       	rcall	.-2260   	; 0x136ae <push_state>
   13f82:	2b e0       	ldi	r18, 0x0B	; 11
   13f84:	22 2e       	mov	r2, r18
   13f86:	31 2c       	mov	r3, r1
                        state = AMIGO_GEOMETRY;
   13f88:	98 cd       	rjmp	.-1232   	; 0x13aba <Read_Config+0x142>
   13f8a:	8a e0       	ldi	r24, 0x0A	; 10
   13f8c:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13f8e:	8f db       	rcall	.-2274   	; 0x136ae <push_state>
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13f90:	8d e0       	ldi	r24, 0x0D	; 13
   13f92:	28 2e       	mov	r2, r24
   13f94:	31 2c       	mov	r3, r1
   13f96:	91 cd       	rjmp	.-1246   	; 0x13aba <Read_Config+0x142>
   13f98:	ed b7       	in	r30, 0x3d	; 61
   13f9a:	fe b7       	in	r31, 0x3e	; 62
   13f9c:	57 82       	std	Z+7, r5	; 0x07
   13f9e:	46 82       	std	Z+6, r4	; 0x06
   13fa0:	b5 82       	std	Z+5, r11	; 0x05
   13fa2:	a4 82       	std	Z+4, r10	; 0x04
   13fa4:	c6 5e       	subi	r28, 0xE6	; 230
   13fa6:	de 4f       	sbci	r29, 0xFE	; 254
   13fa8:	28 81       	ld	r18, Y
   13faa:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13fac:	4a 81       	ldd	r20, Y+2	; 0x02
   13fae:	ca 51       	subi	r28, 0x1A	; 26
   13fb0:	d1 40       	sbci	r29, 0x01	; 1
   13fb2:	bc c0       	rjmp	.+376    	; 0x1412c <Read_Config+0x7b4>
   13fb4:	00 31       	cpi	r16, 0x10	; 16
   13fb6:	11 05       	cpc	r17, r1
   13fb8:	09 f4       	brne	.+2      	; 0x13fbc <Read_Config+0x644>
   13fba:	7f cd       	rjmp	.-1282   	; 0x13aba <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13fbc:	a4 f4       	brge	.+40     	; 0x13fe6 <Read_Config+0x66e>
   13fbe:	01 30       	cpi	r16, 0x01	; 1
   13fc0:	11 05       	cpc	r17, r1
   13fc2:	c1 f5       	brne	.+112    	; 0x14034 <Read_Config+0x6bc>
   13fc4:	6f 71       	andi	r22, 0x1F	; 31
   13fc6:	8b e2       	ldi	r24, 0x2B	; 43
   13fc8:	8c 9d       	mul	r24, r12
   13fca:	f0 01       	movw	r30, r0
   13fcc:	8d 9d       	mul	r24, r13
   13fce:	f0 0d       	add	r31, r0
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13fd0:	11 24       	eor	r1, r1
   13fd2:	e0 50       	subi	r30, 0x00	; 0
   13fd4:	f1 4e       	sbci	r31, 0xE1	; 225
   13fd6:	61 83       	std	Z+1, r22	; 0x01
   13fd8:	c8 5f       	subi	r28, 0xF8	; 248
   13fda:	de 4f       	sbci	r29, 0xFE	; 254
   13fdc:	a8 81       	ld	r26, Y
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13fde:	b9 81       	ldd	r27, Y+1	; 0x01
   13fe0:	c8 50       	subi	r28, 0x08	; 8
   13fe2:	d1 40       	sbci	r29, 0x01	; 1
   13fe4:	17 c0       	rjmp	.+46     	; 0x14014 <Read_Config+0x69c>
   13fe6:	02 31       	cpi	r16, 0x12	; 18
   13fe8:	11 05       	cpc	r17, r1
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13fea:	c1 f0       	breq	.+48     	; 0x1401c <Read_Config+0x6a4>
   13fec:	0f 31       	cpi	r16, 0x1F	; 31
   13fee:	11 05       	cpc	r17, r1
   13ff0:	09 f5       	brne	.+66     	; 0x14034 <Read_Config+0x6bc>
   13ff2:	67 70       	andi	r22, 0x07	; 7
   13ff4:	8b e2       	ldi	r24, 0x2B	; 43
   13ff6:	8c 9d       	mul	r24, r12
   13ff8:	f0 01       	movw	r30, r0
   13ffa:	8d 9d       	mul	r24, r13
   13ffc:	f0 0d       	add	r31, r0
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13ffe:	11 24       	eor	r1, r1
   14000:	e0 50       	subi	r30, 0x00	; 0
   14002:	f1 4e       	sbci	r31, 0xE1	; 225
   14004:	62 83       	std	Z+2, r22	; 0x02
   14006:	c8 5f       	subi	r28, 0xF8	; 248
   14008:	de 4f       	sbci	r29, 0xFE	; 254
   1400a:	e8 81       	ld	r30, Y
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   1400c:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   1400e:	c8 50       	subi	r28, 0x08	; 8
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   14010:	d1 40       	sbci	r29, 0x01	; 1
                        break;
   14012:	02 c0       	rjmp	.+4      	; 0x14018 <Read_Config+0x6a0>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   14014:	6c 93       	st	X, r22
   14016:	51 cd       	rjmp	.-1374   	; 0x13aba <Read_Config+0x142>
   14018:	61 83       	std	Z+1, r22	; 0x01
   1401a:	4f cd       	rjmp	.-1378   	; 0x13aba <Read_Config+0x142>
   1401c:	c4 01       	movw	r24, r8
   1401e:	0e 94 45 33 	call	0x668a	; 0x668a <stralloc>
   14022:	c8 5f       	subi	r28, 0xF8	; 248
   14024:	de 4f       	sbci	r29, 0xFE	; 254
   14026:	e8 81       	ld	r30, Y
   14028:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   1402a:	c8 50       	subi	r28, 0x08	; 8
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1402c:	d1 40       	sbci	r29, 0x01	; 1
   1402e:	93 83       	std	Z+3, r25	; 0x03
   14030:	82 83       	std	Z+2, r24	; 0x02
   14032:	43 cd       	rjmp	.-1402   	; 0x13aba <Read_Config+0x142>
   14034:	ed b7       	in	r30, 0x3d	; 61
   14036:	fe b7       	in	r31, 0x3e	; 62
   14038:	57 82       	std	Z+7, r5	; 0x07
   1403a:	46 82       	std	Z+6, r4	; 0x06
   1403c:	b5 82       	std	Z+5, r11	; 0x05
   1403e:	a4 82       	std	Z+4, r10	; 0x04
   14040:	c9 5e       	subi	r28, 0xE9	; 233
   14042:	de 4f       	sbci	r29, 0xFE	; 254
   14044:	28 81       	ld	r18, Y
   14046:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   14048:	4a 81       	ldd	r20, Y+2	; 0x02
   1404a:	c7 51       	subi	r28, 0x17	; 23
   1404c:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
   1404e:	6e c0       	rjmp	.+220    	; 0x1412c <Read_Config+0x7b4>
   14050:	07 31       	cpi	r16, 0x17	; 23
   14052:	11 05       	cpc	r17, r1
   14054:	59 f4       	brne	.+22     	; 0x1406c <Read_Config+0x6f4>
   14056:	96 2f       	mov	r25, r22
   14058:	87 2f       	mov	r24, r23
   1405a:	c8 5f       	subi	r28, 0xF8	; 248
   1405c:	de 4f       	sbci	r29, 0xFE	; 254
   1405e:	e8 81       	ld	r30, Y
   14060:	f9 81       	ldd	r31, Y+1	; 0x01
   14062:	c8 50       	subi	r28, 0x08	; 8
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   14064:	d1 40       	sbci	r29, 0x01	; 1
   14066:	94 83       	std	Z+4, r25	; 0x04
   14068:	85 83       	std	Z+5, r24	; 0x05
   1406a:	27 cd       	rjmp	.-1458   	; 0x13aba <Read_Config+0x142>
   1406c:	ed b7       	in	r30, 0x3d	; 61
   1406e:	fe b7       	in	r31, 0x3e	; 62
   14070:	57 82       	std	Z+7, r5	; 0x07
   14072:	46 82       	std	Z+6, r4	; 0x06
   14074:	b5 82       	std	Z+5, r11	; 0x05
   14076:	a4 82       	std	Z+4, r10	; 0x04
   14078:	cc 5e       	subi	r28, 0xEC	; 236
   1407a:	de 4f       	sbci	r29, 0xFE	; 254
   1407c:	28 81       	ld	r18, Y
   1407e:	39 81       	ldd	r19, Y+1	; 0x01
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   14080:	4a 81       	ldd	r20, Y+2	; 0x02
   14082:	c4 51       	subi	r28, 0x14	; 20
   14084:	d1 40       	sbci	r29, 0x01	; 1
   14086:	52 c0       	rjmp	.+164    	; 0x1412c <Read_Config+0x7b4>
   14088:	0d 30       	cpi	r16, 0x0D	; 13
   1408a:	11 05       	cpc	r17, r1
   1408c:	59 f1       	breq	.+86     	; 0x140e4 <Read_Config+0x76c>
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   1408e:	64 f4       	brge	.+24     	; 0x140a8 <Read_Config+0x730>
   14090:	08 30       	cpi	r16, 0x08	; 8
   14092:	11 05       	cpc	r17, r1
   14094:	81 f5       	brne	.+96     	; 0x140f6 <Read_Config+0x77e>
   14096:	96 2f       	mov	r25, r22
   14098:	87 2f       	mov	r24, r23
   1409a:	c8 5f       	subi	r28, 0xF8	; 248
   1409c:	de 4f       	sbci	r29, 0xFE	; 254
   1409e:	e8 81       	ld	r30, Y
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   140a0:	f9 81       	ldd	r31, Y+1	; 0x01
   140a2:	c8 50       	subi	r28, 0x08	; 8
   140a4:	d1 40       	sbci	r29, 0x01	; 1
   140a6:	0f c0       	rjmp	.+30     	; 0x140c6 <Read_Config+0x74e>
   140a8:	06 31       	cpi	r16, 0x16	; 22
   140aa:	11 05       	cpc	r17, r1
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   140ac:	91 f0       	breq	.+36     	; 0x140d2 <Read_Config+0x75a>
   140ae:	02 32       	cpi	r16, 0x22	; 34
   140b0:	11 05       	cpc	r17, r1
   140b2:	09 f5       	brne	.+66     	; 0x140f6 <Read_Config+0x77e>
   140b4:	96 2f       	mov	r25, r22
   140b6:	87 2f       	mov	r24, r23
   140b8:	c8 5f       	subi	r28, 0xF8	; 248
   140ba:	de 4f       	sbci	r29, 0xFE	; 254
   140bc:	e8 81       	ld	r30, Y

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   140be:	f9 81       	ldd	r31, Y+1	; 0x01
   140c0:	c8 50       	subi	r28, 0x08	; 8
                        break;
   140c2:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   140c4:	03 c0       	rjmp	.+6      	; 0x140cc <Read_Config+0x754>
   140c6:	96 83       	std	Z+6, r25	; 0x06
                        break;
   140c8:	87 83       	std	Z+7, r24	; 0x07
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   140ca:	f7 cc       	rjmp	.-1554   	; 0x13aba <Read_Config+0x142>
   140cc:	90 87       	std	Z+8, r25	; 0x08
   140ce:	81 87       	std	Z+9, r24	; 0x09
   140d0:	f4 cc       	rjmp	.-1560   	; 0x13aba <Read_Config+0x142>
   140d2:	c8 5f       	subi	r28, 0xF8	; 248
   140d4:	de 4f       	sbci	r29, 0xFE	; 254
   140d6:	e8 81       	ld	r30, Y
   140d8:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   140da:	c8 50       	subi	r28, 0x08	; 8
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   140dc:	d1 40       	sbci	r29, 0x01	; 1
   140de:	62 87       	std	Z+10, r22	; 0x0a
   140e0:	73 87       	std	Z+11, r23	; 0x0b
   140e2:	eb cc       	rjmp	.-1578   	; 0x13aba <Read_Config+0x142>
   140e4:	c8 5f       	subi	r28, 0xF8	; 248
   140e6:	de 4f       	sbci	r29, 0xFE	; 254
   140e8:	e8 81       	ld	r30, Y
   140ea:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   140ec:	c8 50       	subi	r28, 0x08	; 8
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   140ee:	d1 40       	sbci	r29, 0x01	; 1
   140f0:	64 87       	std	Z+12, r22	; 0x0c
   140f2:	75 87       	std	Z+13, r23	; 0x0d
   140f4:	e2 cc       	rjmp	.-1596   	; 0x13aba <Read_Config+0x142>
   140f6:	ed b7       	in	r30, 0x3d	; 61
   140f8:	fe b7       	in	r31, 0x3e	; 62
   140fa:	57 82       	std	Z+7, r5	; 0x07
   140fc:	46 82       	std	Z+6, r4	; 0x06
   140fe:	b5 82       	std	Z+5, r11	; 0x05
   14100:	a4 82       	std	Z+4, r10	; 0x04
   14102:	cf 5e       	subi	r28, 0xEF	; 239
   14104:	de 4f       	sbci	r29, 0xFE	; 254
   14106:	28 81       	ld	r18, Y
   14108:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   1410a:	4a 81       	ldd	r20, Y+2	; 0x02
   1410c:	c1 51       	subi	r28, 0x11	; 17
   1410e:	d1 40       	sbci	r29, 0x01	; 1
   14110:	0d c0       	rjmp	.+26     	; 0x1412c <Read_Config+0x7b4>
   14112:	ed b7       	in	r30, 0x3d	; 61
   14114:	fe b7       	in	r31, 0x3e	; 62
   14116:	57 82       	std	Z+7, r5	; 0x07
   14118:	46 82       	std	Z+6, r4	; 0x06
   1411a:	b5 82       	std	Z+5, r11	; 0x05
   1411c:	a4 82       	std	Z+4, r10	; 0x04
   1411e:	c2 5f       	subi	r28, 0xF2	; 242
   14120:	de 4f       	sbci	r29, 0xFE	; 254
   14122:	28 81       	ld	r18, Y
   14124:	39 81       	ldd	r19, Y+1	; 0x01
   14126:	4a 81       	ldd	r20, Y+2	; 0x02
   14128:	ce 50       	subi	r28, 0x0E	; 14
   1412a:	d1 40       	sbci	r29, 0x01	; 1
   1412c:	21 83       	std	Z+1, r18	; 0x01
                ++errors;
   1412e:	32 83       	std	Z+2, r19	; 0x02
   14130:	43 83       	std	Z+3, r20	; 0x03
   14132:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
                break;

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   14136:	ff ef       	ldi	r31, 0xFF	; 255
   14138:	ef 1a       	sub	r14, r31
   1413a:	ff 0a       	sbc	r15, r31
    {
        printf("Missing END statement at line:%d\n", lines);
   1413c:	be cc       	rjmp	.-1668   	; 0x13aba <Read_Config+0x142>
   1413e:	21 14       	cp	r2, r1
   14140:	31 04       	cpc	r3, r1
   14142:	79 f0       	breq	.+30     	; 0x14162 <Read_Config+0x7ea>
   14144:	ed b7       	in	r30, 0x3d	; 61
   14146:	fe b7       	in	r31, 0x3e	; 62
   14148:	55 82       	std	Z+5, r5	; 0x05
   1414a:	44 82       	std	Z+4, r4	; 0x04
   1414c:	87 ee       	ldi	r24, 0xE7	; 231
   1414e:	9a e1       	ldi	r25, 0x1A	; 26
   14150:	a0 e0       	ldi	r26, 0x00	; 0
   14152:	81 83       	std	Z+1, r24	; 0x01
        ++errors;
   14154:	92 83       	std	Z+2, r25	; 0x02
   14156:	a3 83       	std	Z+3, r26	; 0x03
   14158:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   1415c:	ff ef       	ldi	r31, 0xFF	; 255
   1415e:	ef 1a       	sub	r14, r31
   14160:	ff 0a       	sbc	r15, r31
   14162:	ed b7       	in	r30, 0x3d	; 61
   14164:	fe b7       	in	r31, 0x3e	; 62
   14166:	55 82       	std	Z+5, r5	; 0x05
   14168:	44 82       	std	Z+4, r4	; 0x04
   1416a:	8a ec       	ldi	r24, 0xCA	; 202
   1416c:	9a e1       	ldi	r25, 0x1A	; 26
   1416e:	a0 e0       	ldi	r26, 0x00	; 0
   14170:	81 83       	std	Z+1, r24	; 0x01
    if(errors)
   14172:	92 83       	std	Z+2, r25	; 0x02
   14174:	a3 83       	std	Z+3, r26	; 0x03
   14176:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   1417a:	e1 14       	cp	r14, r1
   1417c:	f1 04       	cpc	r15, r1
   1417e:	61 f0       	breq	.+24     	; 0x14198 <Read_Config+0x820>
   14180:	ed b7       	in	r30, 0x3d	; 61
   14182:	fe b7       	in	r31, 0x3e	; 62
   14184:	f5 82       	std	Z+5, r15	; 0x05
   14186:	e4 82       	std	Z+4, r14	; 0x04
   14188:	83 ea       	ldi	r24, 0xA3	; 163
   1418a:	9a e1       	ldi	r25, 0x1A	; 26
   1418c:	a0 e0       	ldi	r26, 0x00	; 0

    if(fclose(cfg) == EOF)
   1418e:	81 83       	std	Z+1, r24	; 0x01
   14190:	92 83       	std	Z+2, r25	; 0x02
   14192:	a3 83       	std	Z+3, r26	; 0x03
   14194:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   14198:	c4 5f       	subi	r28, 0xF4	; 244
   1419a:	de 4f       	sbci	r29, 0xFE	; 254
   1419c:	88 81       	ld	r24, Y
   1419e:	99 81       	ldd	r25, Y+1	; 0x01
   141a0:	cc 50       	subi	r28, 0x0C	; 12
    {
        perror("Read_Config - close error");
   141a2:	d1 40       	sbci	r29, 0x01	; 1
   141a4:	0e 94 87 7e 	call	0xfd0e	; 0xfd0e <fclose>
   141a8:	01 96       	adiw	r24, 0x01	; 1
        ++errors;
   141aa:	39 f4       	brne	.+14     	; 0x141ba <Read_Config+0x842>
   141ac:	88 e6       	ldi	r24, 0x68	; 104
   141ae:	9e e0       	ldi	r25, 0x0E	; 14
    }

// Post process device values
    Post_Config();
   141b0:	0e 94 0e 7a 	call	0xf41c	; 0xf41c <perror>

    return(errors);
   141b4:	2f ef       	ldi	r18, 0xFF	; 255
}
   141b6:	e2 1a       	sub	r14, r18
   141b8:	f2 0a       	sbc	r15, r18
   141ba:	48 db       	rcall	.-2416   	; 0x1384c <Post_Config>
   141bc:	c7 01       	movw	r24, r14
   141be:	c1 5e       	subi	r28, 0xE1	; 225
   141c0:	de 4f       	sbci	r29, 0xFE	; 254
   141c2:	e2 e1       	ldi	r30, 0x12	; 18
   141c4:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

000141c8 <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   141c8:	2f 92       	push	r2
   141ca:	3f 92       	push	r3
   141cc:	4f 92       	push	r4
   141ce:	5f 92       	push	r5
   141d0:	6f 92       	push	r6
   141d2:	7f 92       	push	r7
   141d4:	8f 92       	push	r8
   141d6:	af 92       	push	r10
   141d8:	bf 92       	push	r11
   141da:	cf 92       	push	r12
   141dc:	df 92       	push	r13
   141de:	ef 92       	push	r14
   141e0:	ff 92       	push	r15
   141e2:	0f 93       	push	r16
   141e4:	1f 93       	push	r17
   141e6:	cf 93       	push	r28
   141e8:	df 93       	push	r29
   141ea:	cd b7       	in	r28, 0x3d	; 61
   141ec:	de b7       	in	r29, 0x3e	; 62
   141ee:	ce 56       	subi	r28, 0x6E	; 110
   141f0:	d1 09       	sbc	r29, r1
   141f2:	0f b6       	in	r0, 0x3f	; 63
   141f4:	f8 94       	cli
   141f6:	de bf       	out	0x3e, r29	; 62
   141f8:	0f be       	out	0x3f, r0	; 63
   141fa:	cd bf       	out	0x3d, r28	; 61
   141fc:	80 e0       	ldi	r24, 0x00	; 0
   141fe:	c8 2e       	mov	r12, r24
   14200:	8f e1       	ldi	r24, 0x1F	; 31
   14202:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   14204:	a0 96       	adiw	r28, 0x20	; 32
   14206:	1f ae       	std	Y+63, r1	; 0x3f
   14208:	1e ae       	std	Y+62, r1	; 0x3e
   1420a:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   1420c:	6e 96       	adiw	r28, 0x1e	; 30
   1420e:	1f ae       	std	Y+63, r1	; 0x3f
   14210:	1e ae       	std	Y+62, r1	; 0x3e
   14212:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   14214:	6c 96       	adiw	r28, 0x1c	; 28
   14216:	1f ae       	std	Y+63, r1	; 0x3f
   14218:	1e ae       	std	Y+62, r1	; 0x3e
   1421a:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   1421c:	87 e5       	ldi	r24, 0x57	; 87
   1421e:	97 e1       	ldi	r25, 0x17	; 23
   14220:	9c 01       	movw	r18, r24
   14222:	40 e0       	ldi	r20, 0x00	; 0
   14224:	a3 96       	adiw	r28, 0x23	; 35
   14226:	2d af       	std	Y+61, r18	; 0x3d
   14228:	3e af       	std	Y+62, r19	; 0x3e
   1422a:	4f af       	std	Y+63, r20	; 0x3f
   1422c:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   1422e:	8f e4       	ldi	r24, 0x4F	; 79
   14230:	97 e1       	ldi	r25, 0x17	; 23
   14232:	9c 01       	movw	r18, r24
   14234:	40 e0       	ldi	r20, 0x00	; 0
   14236:	a6 96       	adiw	r28, 0x26	; 38
   14238:	2d af       	std	Y+61, r18	; 0x3d
   1423a:	3e af       	std	Y+62, r19	; 0x3e
   1423c:	4f af       	std	Y+63, r20	; 0x3f
   1423e:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14240:	81 e7       	ldi	r24, 0x71	; 113
   14242:	97 e1       	ldi	r25, 0x17	; 23
   14244:	9c 01       	movw	r18, r24
   14246:	40 e0       	ldi	r20, 0x00	; 0
   14248:	a9 96       	adiw	r28, 0x29	; 41
   1424a:	2d af       	std	Y+61, r18	; 0x3d
   1424c:	3e af       	std	Y+62, r19	; 0x3e
   1424e:	4f af       	std	Y+63, r20	; 0x3f
   14250:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   14252:	8b e9       	ldi	r24, 0x9B	; 155
   14254:	97 e1       	ldi	r25, 0x17	; 23
   14256:	9c 01       	movw	r18, r24
   14258:	40 e0       	ldi	r20, 0x00	; 0
   1425a:	ac 96       	adiw	r28, 0x2c	; 44
   1425c:	2d af       	std	Y+61, r18	; 0x3d
   1425e:	3e af       	std	Y+62, r19	; 0x3e
   14260:	4f af       	std	Y+63, r20	; 0x3f
   14262:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   14264:	83 e9       	ldi	r24, 0x93	; 147
   14266:	97 e1       	ldi	r25, 0x17	; 23
   14268:	9c 01       	movw	r18, r24
   1426a:	40 e0       	ldi	r20, 0x00	; 0
   1426c:	af 96       	adiw	r28, 0x2f	; 47
   1426e:	2d af       	std	Y+61, r18	; 0x3d
   14270:	3e af       	std	Y+62, r19	; 0x3e
   14272:	4f af       	std	Y+63, r20	; 0x3f
   14274:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14276:	85 eb       	ldi	r24, 0xB5	; 181
   14278:	97 e1       	ldi	r25, 0x17	; 23
   1427a:	3c 01       	movw	r6, r24
   1427c:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   1427e:	f6 01       	movw	r30, r12
   14280:	80 81       	ld	r24, Z
   14282:	88 23       	and	r24, r24
   14284:	09 f4       	brne	.+2      	; 0x14288 <format_drives+0xc0>
   14286:	ef c0       	rjmp	.+478    	; 0x14466 <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14288:	83 30       	cpi	r24, 0x03	; 3
   1428a:	09 f0       	breq	.+2      	; 0x1428e <format_drives+0xc6>
   1428c:	70 c0       	rjmp	.+224    	; 0x1436e <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1428e:	a7 a0       	ldd	r10, Z+39	; 0x27
   14290:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   14292:	be 01       	movw	r22, r28
   14294:	66 5f       	subi	r22, 0xF6	; 246
   14296:	7f 4f       	sbci	r23, 0xFF	; 255
   14298:	f5 01       	movw	r30, r10
   1429a:	82 81       	ldd	r24, Z+2	; 0x02
   1429c:	93 81       	ldd	r25, Z+3	; 0x03
   1429e:	0e 94 e2 7a 	call	0xf5c4	; 0xf5c4 <stat>
   142a2:	01 96       	adiw	r24, 0x01	; 1
   142a4:	09 f0       	breq	.+2      	; 0x142a8 <format_drives+0xe0>
   142a6:	63 c0       	rjmp	.+198    	; 0x1436e <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   142a8:	f5 01       	movw	r30, r10
   142aa:	80 89       	ldd	r24, Z+16	; 0x10
   142ac:	91 89       	ldd	r25, Z+17	; 0x11
   142ae:	81 15       	cp	r24, r1
   142b0:	91 40       	sbci	r25, 0x01	; 1
   142b2:	31 f0       	breq	.+12     	; 0x142c0 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   142b4:	ed b7       	in	r30, 0x3d	; 61
   142b6:	fe b7       	in	r31, 0x3e	; 62
   142b8:	61 82       	std	Z+1, r6	; 0x01
   142ba:	72 82       	std	Z+2, r7	; 0x02
   142bc:	83 82       	std	Z+3, r8	; 0x03
   142be:	79 c0       	rjmp	.+242    	; 0x143b2 <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   142c0:	f6 01       	movw	r30, r12
   142c2:	23 80       	ldd	r2, Z+3	; 0x03
   142c4:	34 80       	ldd	r3, Z+4	; 0x04
   142c6:	45 80       	ldd	r4, Z+5	; 0x05
   142c8:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   142ca:	ed b7       	in	r30, 0x3d	; 61
   142cc:	fe b7       	in	r31, 0x3e	; 62
   142ce:	26 82       	std	Z+6, r2	; 0x06
   142d0:	37 82       	std	Z+7, r3	; 0x07
   142d2:	40 86       	std	Z+8, r4	; 0x08
   142d4:	51 86       	std	Z+9, r5	; 0x09
   142d6:	f5 01       	movw	r30, r10
   142d8:	82 81       	ldd	r24, Z+2	; 0x02
   142da:	93 81       	ldd	r25, Z+3	; 0x03
   142dc:	ed b7       	in	r30, 0x3d	; 61
   142de:	fe b7       	in	r31, 0x3e	; 62
   142e0:	95 83       	std	Z+5, r25	; 0x05
   142e2:	84 83       	std	Z+4, r24	; 0x04
   142e4:	ac 96       	adiw	r28, 0x2c	; 44
   142e6:	2d ad       	ldd	r18, Y+61	; 0x3d
   142e8:	3e ad       	ldd	r19, Y+62	; 0x3e
   142ea:	4f ad       	ldd	r20, Y+63	; 0x3f
   142ec:	ac 97       	sbiw	r28, 0x2c	; 44
   142ee:	21 83       	std	Z+1, r18	; 0x01
   142f0:	32 83       	std	Z+2, r19	; 0x02
   142f2:	43 83       	std	Z+3, r20	; 0x03
   142f4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   142f8:	6e 96       	adiw	r28, 0x1e	; 30
   142fa:	2e ad       	ldd	r18, Y+62	; 0x3e
   142fc:	3f ad       	ldd	r19, Y+63	; 0x3f
   142fe:	6e 97       	sbiw	r28, 0x1e	; 30
   14300:	ed b7       	in	r30, 0x3d	; 61
   14302:	fe b7       	in	r31, 0x3e	; 62
   14304:	37 83       	std	Z+7, r19	; 0x07
   14306:	26 83       	std	Z+6, r18	; 0x06
   14308:	af 96       	adiw	r28, 0x2f	; 47
   1430a:	8d ad       	ldd	r24, Y+61	; 0x3d
   1430c:	9e ad       	ldd	r25, Y+62	; 0x3e
   1430e:	af ad       	ldd	r26, Y+63	; 0x3f
   14310:	af 97       	sbiw	r28, 0x2f	; 47
   14312:	83 83       	std	Z+3, r24	; 0x03
   14314:	94 83       	std	Z+4, r25	; 0x04
   14316:	a5 83       	std	Z+5, r26	; 0x05
   14318:	2a e3       	ldi	r18, 0x3A	; 58
   1431a:	30 e0       	ldi	r19, 0x00	; 0
   1431c:	2c 0f       	add	r18, r28
   1431e:	3d 1f       	adc	r19, r29
   14320:	32 83       	std	Z+2, r19	; 0x02
   14322:	21 83       	std	Z+1, r18	; 0x01
   14324:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14328:	f5 01       	movw	r30, r10
   1432a:	a2 80       	ldd	r10, Z+2	; 0x02
   1432c:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   1432e:	c2 01       	movw	r24, r4
   14330:	b1 01       	movw	r22, r2
   14332:	41 d1       	rcall	.+642    	; 0x145b6 <lif_dir_count>
   14334:	9b 01       	movw	r18, r22
   14336:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14338:	82 01       	movw	r16, r4
   1433a:	71 01       	movw	r14, r2
   1433c:	be 01       	movw	r22, r28
   1433e:	66 5c       	subi	r22, 0xC6	; 198
   14340:	7f 4f       	sbci	r23, 0xFF	; 255
   14342:	c5 01       	movw	r24, r10
   14344:	0e 94 21 dd 	call	0x1ba42	; 0x1ba42 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   14348:	6c 96       	adiw	r28, 0x1c	; 28
   1434a:	2e ad       	ldd	r18, Y+62	; 0x3e
   1434c:	3f ad       	ldd	r19, Y+63	; 0x3f
   1434e:	6c 97       	sbiw	r28, 0x1c	; 28
   14350:	2f 5f       	subi	r18, 0xFF	; 255
   14352:	3f 4f       	sbci	r19, 0xFF	; 255
   14354:	6c 96       	adiw	r28, 0x1c	; 28
   14356:	3f af       	std	Y+63, r19	; 0x3f
   14358:	2e af       	std	Y+62, r18	; 0x3e
   1435a:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   1435c:	6e 96       	adiw	r28, 0x1e	; 30
   1435e:	8e ad       	ldd	r24, Y+62	; 0x3e
   14360:	9f ad       	ldd	r25, Y+63	; 0x3f
   14362:	6e 97       	sbiw	r28, 0x1e	; 30
   14364:	01 96       	adiw	r24, 0x01	; 1
   14366:	6e 96       	adiw	r28, 0x1e	; 30
   14368:	9f af       	std	Y+63, r25	; 0x3f
   1436a:	8e af       	std	Y+62, r24	; 0x3e
   1436c:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1436e:	f6 01       	movw	r30, r12
   14370:	80 81       	ld	r24, Z
   14372:	81 30       	cpi	r24, 0x01	; 1
   14374:	09 f0       	breq	.+2      	; 0x14378 <format_drives+0x1b0>
   14376:	77 c0       	rjmp	.+238    	; 0x14466 <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14378:	a7 a0       	ldd	r10, Z+39	; 0x27
   1437a:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   1437c:	be 01       	movw	r22, r28
   1437e:	66 5f       	subi	r22, 0xF6	; 246
   14380:	7f 4f       	sbci	r23, 0xFF	; 255
   14382:	f5 01       	movw	r30, r10
   14384:	82 81       	ldd	r24, Z+2	; 0x02
   14386:	93 81       	ldd	r25, Z+3	; 0x03
   14388:	0e 94 e2 7a 	call	0xf5c4	; 0xf5c4 <stat>
   1438c:	01 96       	adiw	r24, 0x01	; 1
   1438e:	09 f0       	breq	.+2      	; 0x14392 <format_drives+0x1ca>
   14390:	6a c0       	rjmp	.+212    	; 0x14466 <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   14392:	f5 01       	movw	r30, r10
   14394:	86 81       	ldd	r24, Z+6	; 0x06
   14396:	97 81       	ldd	r25, Z+7	; 0x07
   14398:	81 15       	cp	r24, r1
   1439a:	91 40       	sbci	r25, 0x01	; 1
   1439c:	69 f0       	breq	.+26     	; 0x143b8 <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   1439e:	a9 96       	adiw	r28, 0x29	; 41
   143a0:	2d ad       	ldd	r18, Y+61	; 0x3d
   143a2:	3e ad       	ldd	r19, Y+62	; 0x3e
   143a4:	4f ad       	ldd	r20, Y+63	; 0x3f
   143a6:	a9 97       	sbiw	r28, 0x29	; 41
   143a8:	ed b7       	in	r30, 0x3d	; 61
   143aa:	fe b7       	in	r31, 0x3e	; 62
   143ac:	21 83       	std	Z+1, r18	; 0x01
   143ae:	32 83       	std	Z+2, r19	; 0x02
   143b0:	43 83       	std	Z+3, r20	; 0x03
   143b2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
                    continue;
   143b6:	57 c0       	rjmp	.+174    	; 0x14466 <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   143b8:	f6 01       	movw	r30, r12
   143ba:	23 80       	ldd	r2, Z+3	; 0x03
   143bc:	34 80       	ldd	r3, Z+4	; 0x04
   143be:	45 80       	ldd	r4, Z+5	; 0x05
   143c0:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   143c2:	ed b7       	in	r30, 0x3d	; 61
   143c4:	fe b7       	in	r31, 0x3e	; 62
   143c6:	26 82       	std	Z+6, r2	; 0x06
   143c8:	37 82       	std	Z+7, r3	; 0x07
   143ca:	40 86       	std	Z+8, r4	; 0x08
   143cc:	51 86       	std	Z+9, r5	; 0x09
   143ce:	f5 01       	movw	r30, r10
   143d0:	82 81       	ldd	r24, Z+2	; 0x02
   143d2:	93 81       	ldd	r25, Z+3	; 0x03
   143d4:	ed b7       	in	r30, 0x3d	; 61
   143d6:	fe b7       	in	r31, 0x3e	; 62
   143d8:	95 83       	std	Z+5, r25	; 0x05
   143da:	84 83       	std	Z+4, r24	; 0x04
   143dc:	a3 96       	adiw	r28, 0x23	; 35
   143de:	2d ad       	ldd	r18, Y+61	; 0x3d
   143e0:	3e ad       	ldd	r19, Y+62	; 0x3e
   143e2:	4f ad       	ldd	r20, Y+63	; 0x3f
   143e4:	a3 97       	sbiw	r28, 0x23	; 35
   143e6:	21 83       	std	Z+1, r18	; 0x01
   143e8:	32 83       	std	Z+2, r19	; 0x02
   143ea:	43 83       	std	Z+3, r20	; 0x03
   143ec:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   143f0:	a0 96       	adiw	r28, 0x20	; 32
   143f2:	2e ad       	ldd	r18, Y+62	; 0x3e
   143f4:	3f ad       	ldd	r19, Y+63	; 0x3f
   143f6:	a0 97       	sbiw	r28, 0x20	; 32
   143f8:	ed b7       	in	r30, 0x3d	; 61
   143fa:	fe b7       	in	r31, 0x3e	; 62
   143fc:	37 83       	std	Z+7, r19	; 0x07
   143fe:	26 83       	std	Z+6, r18	; 0x06
   14400:	a6 96       	adiw	r28, 0x26	; 38
   14402:	8d ad       	ldd	r24, Y+61	; 0x3d
   14404:	9e ad       	ldd	r25, Y+62	; 0x3e
   14406:	af ad       	ldd	r26, Y+63	; 0x3f
   14408:	a6 97       	sbiw	r28, 0x26	; 38
   1440a:	83 83       	std	Z+3, r24	; 0x03
   1440c:	94 83       	std	Z+4, r25	; 0x04
   1440e:	a5 83       	std	Z+5, r26	; 0x05
   14410:	2a e3       	ldi	r18, 0x3A	; 58
   14412:	30 e0       	ldi	r19, 0x00	; 0
   14414:	2c 0f       	add	r18, r28
   14416:	3d 1f       	adc	r19, r29
   14418:	32 83       	std	Z+2, r19	; 0x02
   1441a:	21 83       	std	Z+1, r18	; 0x01
   1441c:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   14420:	f5 01       	movw	r30, r10
   14422:	a2 80       	ldd	r10, Z+2	; 0x02
   14424:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   14426:	c2 01       	movw	r24, r4
   14428:	b1 01       	movw	r22, r2
   1442a:	c5 d0       	rcall	.+394    	; 0x145b6 <lif_dir_count>
   1442c:	9b 01       	movw	r18, r22
   1442e:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   14430:	82 01       	movw	r16, r4
   14432:	71 01       	movw	r14, r2
   14434:	be 01       	movw	r22, r28
   14436:	66 5c       	subi	r22, 0xC6	; 198
   14438:	7f 4f       	sbci	r23, 0xFF	; 255
   1443a:	c5 01       	movw	r24, r10
   1443c:	0e 94 21 dd 	call	0x1ba42	; 0x1ba42 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   14440:	6c 96       	adiw	r28, 0x1c	; 28
   14442:	2e ad       	ldd	r18, Y+62	; 0x3e
   14444:	3f ad       	ldd	r19, Y+63	; 0x3f
   14446:	6c 97       	sbiw	r28, 0x1c	; 28
   14448:	2f 5f       	subi	r18, 0xFF	; 255
   1444a:	3f 4f       	sbci	r19, 0xFF	; 255
   1444c:	6c 96       	adiw	r28, 0x1c	; 28
   1444e:	3f af       	std	Y+63, r19	; 0x3f
   14450:	2e af       	std	Y+62, r18	; 0x3e
   14452:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   14454:	a0 96       	adiw	r28, 0x20	; 32
   14456:	8e ad       	ldd	r24, Y+62	; 0x3e
   14458:	9f ad       	ldd	r25, Y+63	; 0x3f
   1445a:	a0 97       	sbiw	r28, 0x20	; 32
   1445c:	01 96       	adiw	r24, 0x01	; 1
   1445e:	a0 96       	adiw	r28, 0x20	; 32
   14460:	9f af       	std	Y+63, r25	; 0x3f
   14462:	8e af       	std	Y+62, r24	; 0x3e
   14464:	a0 97       	sbiw	r28, 0x20	; 32
   14466:	9b e2       	ldi	r25, 0x2B	; 43
   14468:	c9 0e       	add	r12, r25
   1446a:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   1446c:	a4 e0       	ldi	r26, 0x04	; 4
   1446e:	ca 16       	cp	r12, r26
   14470:	a1 e2       	ldi	r26, 0x21	; 33
   14472:	da 06       	cpc	r13, r26
   14474:	09 f0       	breq	.+2      	; 0x14478 <format_drives+0x2b0>
   14476:	03 cf       	rjmp	.-506    	; 0x1427e <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   14478:	6c 96       	adiw	r28, 0x1c	; 28
   1447a:	ee ad       	ldd	r30, Y+62	; 0x3e
   1447c:	ff ad       	ldd	r31, Y+63	; 0x3f
   1447e:	6c 97       	sbiw	r28, 0x1c	; 28
   14480:	ef 2b       	or	r30, r31
   14482:	11 f0       	breq	.+4      	; 0x14488 <format_drives+0x2c0>
        sep();
   14484:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>
}
   14488:	c2 59       	subi	r28, 0x92	; 146
   1448a:	df 4f       	sbci	r29, 0xFF	; 255
   1448c:	0f b6       	in	r0, 0x3f	; 63
   1448e:	f8 94       	cli
   14490:	de bf       	out	0x3e, r29	; 62
   14492:	0f be       	out	0x3f, r0	; 63
   14494:	cd bf       	out	0x3d, r28	; 61
   14496:	df 91       	pop	r29
   14498:	cf 91       	pop	r28
   1449a:	1f 91       	pop	r17
   1449c:	0f 91       	pop	r16
   1449e:	ff 90       	pop	r15
   144a0:	ef 90       	pop	r14
   144a2:	df 90       	pop	r13
   144a4:	cf 90       	pop	r12
   144a6:	bf 90       	pop	r11
   144a8:	af 90       	pop	r10
   144aa:	8f 90       	pop	r8
   144ac:	7f 90       	pop	r7
   144ae:	6f 90       	pop	r6
   144b0:	5f 90       	pop	r5
   144b2:	4f 90       	pop	r4
   144b4:	3f 90       	pop	r3
   144b6:	2f 90       	pop	r2
   144b8:	08 95       	ret

000144ba <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   144ba:	8f e1       	ldi	r24, 0x1F	; 31
   144bc:	e4 e0       	ldi	r30, 0x04	; 4
   144be:	f1 e2       	ldi	r31, 0x21	; 33
   144c0:	df 01       	movw	r26, r30
   144c2:	98 2f       	mov	r25, r24
   144c4:	1d 92       	st	X+, r1
   144c6:	9a 95       	dec	r25
   144c8:	e9 f7       	brne	.-6      	; 0x144c4 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   144ca:	9f e3       	ldi	r25, 0x3F	; 63
   144cc:	e4 e2       	ldi	r30, 0x24	; 36
   144ce:	f1 e2       	ldi	r31, 0x21	; 33
   144d0:	df 01       	movw	r26, r30
   144d2:	1d 92       	st	X+, r1
   144d4:	9a 95       	dec	r25
   144d6:	e9 f7       	brne	.-6      	; 0x144d2 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   144d8:	e4 e6       	ldi	r30, 0x64	; 100
   144da:	f1 e2       	ldi	r31, 0x21	; 33
   144dc:	df 01       	movw	r26, r30
   144de:	1d 92       	st	X+, r1
   144e0:	8a 95       	dec	r24
   144e2:	e9 f7       	brne	.-6      	; 0x144de <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   144e4:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x80>
   144e8:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0x81>
   144ec:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x82>
   144f0:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   144f4:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0x84>
   144f8:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x85>
   144fc:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x86>
   14500:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   14504:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0x88>
   14508:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0x89>
   1450c:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0x8a>
   14510:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   14514:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0x8c>
   14518:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0x8d>
   1451c:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0x8e>
   14520:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14524:	81 e0       	ldi	r24, 0x01	; 1
   14526:	90 e8       	ldi	r25, 0x80	; 128
   14528:	a0 e0       	ldi	r26, 0x00	; 0
   1452a:	b0 e0       	ldi	r27, 0x00	; 0
   1452c:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <hpdir+0x90>
   14530:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <hpdir+0x91>
   14534:	a0 93 96 21 	sts	0x2196, r26	; 0x802196 <hpdir+0x92>
   14538:	b0 93 97 21 	sts	0x2197, r27	; 0x802197 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   1453c:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <hpdir+0x94>
   14540:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <hpdir+0x95>
   14544:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0x96>
   14548:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   1454c:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0x98>
   14550:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0x99>
   14554:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <hpdir+0x9a>
   14558:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   1455c:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <hpdir+0x9c>
   14560:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <hpdir+0x9d>
   14564:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <hpdir+0x9e>
   14568:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   1456c:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <hpdir+0xa0>
   14570:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <hpdir+0xa1>
   14574:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <hpdir+0xa2>
   14578:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   1457c:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <hpdir+0xa4>
   14580:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <hpdir+0xa5>
   14584:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <hpdir+0xa6>
   14588:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   1458c:	81 e0       	ldi	r24, 0x01	; 1
   1458e:	90 e0       	ldi	r25, 0x00	; 0
   14590:	a0 e0       	ldi	r26, 0x00	; 0
   14592:	b0 e0       	ldi	r27, 0x00	; 0
   14594:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <hpdir+0xa8>
   14598:	90 93 ad 21 	sts	0x21AD, r25	; 0x8021ad <hpdir+0xa9>
   1459c:	a0 93 ae 21 	sts	0x21AE, r26	; 0x8021ae <hpdir+0xaa>
   145a0:	b0 93 af 21 	sts	0x21AF, r27	; 0x8021af <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   145a4:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <hpdir+0xac>
   145a8:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <hpdir+0xad>
   145ac:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <hpdir+0xae>
   145b0:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <hpdir+0xaf>
   145b4:	08 95       	ret

000145b6 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   145b6:	20 e0       	ldi	r18, 0x00	; 0
   145b8:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   145ba:	61 15       	cp	r22, r1
   145bc:	71 05       	cpc	r23, r1
   145be:	81 05       	cpc	r24, r1
   145c0:	91 05       	cpc	r25, r1
   145c2:	39 f0       	breq	.+14     	; 0x145d2 <lif_dir_count+0x1c>
    {
        scale++;
   145c4:	2f 5f       	subi	r18, 0xFF	; 255
   145c6:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   145c8:	95 95       	asr	r25
   145ca:	87 95       	ror	r24
   145cc:	77 95       	ror	r23
   145ce:	67 95       	ror	r22
   145d0:	f4 cf       	rjmp	.-24     	; 0x145ba <lif_dir_count+0x4>
    }
    scale>>=1;
   145d2:	35 95       	asr	r19
   145d4:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   145d6:	61 e0       	ldi	r22, 0x01	; 1
   145d8:	70 e0       	ldi	r23, 0x00	; 0
   145da:	80 e0       	ldi	r24, 0x00	; 0
   145dc:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   145de:	21 50       	subi	r18, 0x01	; 1
   145e0:	31 09       	sbc	r19, r1
   145e2:	28 f0       	brcs	.+10     	; 0x145ee <lif_dir_count+0x38>
        num <<=1;
   145e4:	66 0f       	add	r22, r22
   145e6:	77 1f       	adc	r23, r23
   145e8:	88 1f       	adc	r24, r24
   145ea:	99 1f       	adc	r25, r25
   145ec:	f8 cf       	rjmp	.-16     	; 0x145de <lif_dir_count+0x28>
    return(num);
}
   145ee:	08 95       	ret

000145f0 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   145f0:	2f 92       	push	r2
   145f2:	3f 92       	push	r3
   145f4:	4f 92       	push	r4
   145f6:	5f 92       	push	r5
   145f8:	6f 92       	push	r6
   145fa:	8f 92       	push	r8
   145fc:	9f 92       	push	r9
   145fe:	af 92       	push	r10
   14600:	bf 92       	push	r11
   14602:	cf 92       	push	r12
   14604:	df 92       	push	r13
   14606:	ef 92       	push	r14
   14608:	ff 92       	push	r15
   1460a:	0f 93       	push	r16
   1460c:	1f 93       	push	r17
   1460e:	cf 93       	push	r28
   14610:	df 93       	push	r29
   14612:	cd b7       	in	r28, 0x3d	; 61
   14614:	de b7       	in	r29, 0x3e	; 62
   14616:	c9 58       	subi	r28, 0x89	; 137
   14618:	d1 40       	sbci	r29, 0x01	; 1
   1461a:	0f b6       	in	r0, 0x3f	; 63
   1461c:	f8 94       	cli
   1461e:	de bf       	out	0x3e, r29	; 62
   14620:	0f be       	out	0x3f, r0	; 63
   14622:	cd bf       	out	0x3d, r28	; 61
   14624:	6c 01       	movw	r12, r24
   14626:	c8 57       	subi	r28, 0x78	; 120
   14628:	de 4f       	sbci	r29, 0xFE	; 254
   1462a:	79 83       	std	Y+1, r23	; 0x01
   1462c:	68 83       	st	Y, r22
   1462e:	c8 58       	subi	r28, 0x88	; 136
   14630:	d1 40       	sbci	r29, 0x01	; 1
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14632:	5a 01       	movw	r10, r20

    cfg = fopen("hpdir.ini","rb");
   14634:	42 df       	rcall	.-380    	; 0x144ba <hpdir_init>
   14636:	69 ef       	ldi	r22, 0xF9	; 249
   14638:	78 e0       	ldi	r23, 0x08	; 8
   1463a:	89 e5       	ldi	r24, 0x59	; 89
   1463c:	90 e1       	ldi	r25, 0x10	; 16
   1463e:	0e 94 dd 7f 	call	0xffba	; 0xffba <fopen>

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14642:	7c 01       	movw	r14, r24
   14644:	89 2b       	or	r24, r25
        cfg = fopen("/hpdir.ini","rb");
   14646:	49 f4       	brne	.+18     	; 0x1465a <hpdir_find_drive+0x6a>
   14648:	69 ef       	ldi	r22, 0xF9	; 249
   1464a:	78 e0       	ldi	r23, 0x08	; 8
   1464c:	88 e5       	ldi	r24, 0x58	; 88
   1464e:	90 e1       	ldi	r25, 0x10	; 16
   14650:	0e 94 dd 7f 	call	0xffba	; 0xffba <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14654:	7c 01       	movw	r14, r24
   14656:	89 2b       	or	r24, r25
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   14658:	51 f0       	breq	.+20     	; 0x1466e <hpdir_find_drive+0x7e>
   1465a:	21 2c       	mov	r2, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1465c:	31 2c       	mov	r3, r1
   1465e:	8e 01       	movw	r16, r28
   14660:	08 5f       	subi	r16, 0xF8	; 248
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14662:	1e 4f       	sbci	r17, 0xFE	; 254
   14664:	8d ef       	ldi	r24, 0xFD	; 253
   14666:	9d e1       	ldi	r25, 0x1D	; 29
   14668:	2c 01       	movw	r4, r24
   1466a:	61 2c       	mov	r6, r1
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   1466c:	1e c0       	rjmp	.+60     	; 0x146aa <hpdir_find_drive+0xba>
   1466e:	ab 28       	or	r10, r11
   14670:	09 f4       	brne	.+2      	; 0x14674 <hpdir_find_drive+0x84>
            printf("Error: hpdir.ini not found!\n");
   14672:	69 c1       	rjmp	.+722    	; 0x14946 <hpdir_find_drive+0x356>
   14674:	84 e0       	ldi	r24, 0x04	; 4
   14676:	9e e1       	ldi	r25, 0x1E	; 30
   14678:	a0 e0       	ldi	r26, 0x00	; 0
   1467a:	ed b7       	in	r30, 0x3d	; 61
   1467c:	fe b7       	in	r31, 0x3e	; 62
   1467e:	81 83       	std	Z+1, r24	; 0x01
   14680:	92 83       	std	Z+2, r25	; 0x02
   14682:	a3 83       	std	Z+3, r26	; 0x03
   14684:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14688:	5e c1       	rjmp	.+700    	; 0x14946 <hpdir_find_drive+0x356>
   1468a:	ce 01       	movw	r24, r28
   1468c:	08 96       	adiw	r24, 0x08	; 8
   1468e:	0e 94 75 33 	call	0x66ea	; 0x66ea <trim_tail>
        ptr = skipspaces(ptr);
   14692:	ce 01       	movw	r24, r28
   14694:	08 96       	adiw	r24, 0x08	; 8
   14696:	0e 94 85 33 	call	0x670a	; 0x670a <skipspaces>

        len = strlen(ptr);
   1469a:	fc 01       	movw	r30, r24
   1469c:	01 90       	ld	r0, Z+
   1469e:	00 20       	and	r0, r0
   146a0:	e9 f7       	brne	.-6      	; 0x1469c <hpdir_find_drive+0xac>
        if(!len)
   146a2:	31 97       	sbiw	r30, 0x01	; 1
   146a4:	8e 17       	cp	r24, r30
   146a6:	9f 07       	cpc	r25, r31
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   146a8:	51 f4       	brne	.+20     	; 0x146be <hpdir_find_drive+0xce>
   146aa:	a7 01       	movw	r20, r14
   146ac:	6e ef       	ldi	r22, 0xFE	; 254
   146ae:	70 e0       	ldi	r23, 0x00	; 0
   146b0:	ce 01       	movw	r24, r28
   146b2:	08 96       	adiw	r24, 0x08	; 8
   146b4:	0e 94 f5 77 	call	0xefea	; 0xefea <fgets>
   146b8:	89 2b       	or	r24, r25
   146ba:	39 f7       	brne	.-50     	; 0x1468a <hpdir_find_drive+0x9a>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   146bc:	0c c0       	rjmp	.+24     	; 0x146d6 <hpdir_find_drive+0xe6>
   146be:	fc 01       	movw	r30, r24
   146c0:	20 81       	ld	r18, Z
   146c2:	2b 33       	cpi	r18, 0x3B	; 59
   146c4:	91 f3       	breq	.-28     	; 0x146aa <hpdir_find_drive+0xba>
   146c6:	23 32       	cpi	r18, 0x23	; 35
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   146c8:	81 f3       	breq	.-32     	; 0x146aa <hpdir_find_drive+0xba>
   146ca:	2b 35       	cpi	r18, 0x5B	; 91
   146cc:	31 f4       	brne	.+12     	; 0x146da <hpdir_find_drive+0xea>
   146ce:	f1 e0       	ldi	r31, 0x01	; 1
   146d0:	2f 16       	cp	r2, r31
   146d2:	31 04       	cpc	r3, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   146d4:	11 f4       	brne	.+4      	; 0x146da <hpdir_find_drive+0xea>
   146d6:	00 e0       	ldi	r16, 0x00	; 0

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   146d8:	30 c1       	rjmp	.+608    	; 0x1493a <hpdir_find_drive+0x34a>
   146da:	4e e7       	ldi	r20, 0x7E	; 126
   146dc:	50 e0       	ldi	r21, 0x00	; 0
   146de:	b8 01       	movw	r22, r16
   146e0:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>

        if(MATCHI(token,"[driveinfo]"))
   146e4:	4c 01       	movw	r8, r24
   146e6:	63 e6       	ldi	r22, 0x63	; 99
   146e8:	70 e1       	ldi	r23, 0x10	; 16
   146ea:	c8 01       	movw	r24, r16
   146ec:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   146f0:	89 2b       	or	r24, r25
        {
            driveinfo = 1;
   146f2:	21 f0       	breq	.+8      	; 0x146fc <hpdir_find_drive+0x10c>
   146f4:	22 24       	eor	r2, r2
   146f6:	23 94       	inc	r2
   146f8:	31 2c       	mov	r3, r1
            continue;
        }

        if( driveinfo != 1)
   146fa:	d7 cf       	rjmp	.-82     	; 0x146aa <hpdir_find_drive+0xba>
   146fc:	21 e0       	ldi	r18, 0x01	; 1
   146fe:	22 16       	cp	r2, r18
   14700:	31 04       	cpc	r3, r1
            continue;

        if(list)
   14702:	99 f6       	brne	.-90     	; 0x146aa <hpdir_find_drive+0xba>
   14704:	c8 57       	subi	r28, 0x78	; 120
   14706:	de 4f       	sbci	r29, 0xFE	; 254
   14708:	88 81       	ld	r24, Y
   1470a:	99 81       	ldd	r25, Y+1	; 0x01
   1470c:	c8 58       	subi	r28, 0x88	; 136
   1470e:	d1 40       	sbci	r29, 0x01	; 1
   14710:	89 2b       	or	r24, r25
        {
            printf("%s %s\n", token, ptr);
   14712:	61 f0       	breq	.+24     	; 0x1472c <hpdir_find_drive+0x13c>
   14714:	ed b7       	in	r30, 0x3d	; 61
   14716:	fe b7       	in	r31, 0x3e	; 62
   14718:	97 82       	std	Z+7, r9	; 0x07
   1471a:	86 82       	std	Z+6, r8	; 0x06
   1471c:	15 83       	std	Z+5, r17	; 0x05
   1471e:	04 83       	std	Z+4, r16	; 0x04
   14720:	41 82       	std	Z+1, r4	; 0x01
   14722:	52 82       	std	Z+2, r5	; 0x02
   14724:	63 82       	std	Z+3, r6	; 0x03
   14726:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            continue;
        }

        if ( ! MATCHI(model,token) )
   1472a:	bf cf       	rjmp	.-130    	; 0x146aa <hpdir_find_drive+0xba>
   1472c:	b8 01       	movw	r22, r16
   1472e:	c6 01       	movw	r24, r12
   14730:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
            continue;

        hpdir_init();
   14734:	89 2b       	or	r24, r25
   14736:	f1 f2       	breq	.-68     	; 0x146f4 <hpdir_find_drive+0x104>

        if(verbose)
   14738:	c0 de       	rcall	.-640    	; 0x144ba <hpdir_init>
   1473a:	ab 28       	or	r10, r11
            printf("Found Model: %s\n", model);
   1473c:	61 f0       	breq	.+24     	; 0x14756 <hpdir_find_drive+0x166>
   1473e:	ed b7       	in	r30, 0x3d	; 61
   14740:	fe b7       	in	r31, 0x3e	; 62
   14742:	d5 82       	std	Z+5, r13	; 0x05
   14744:	c4 82       	std	Z+4, r12	; 0x04
   14746:	8c ee       	ldi	r24, 0xEC	; 236
   14748:	9d e1       	ldi	r25, 0x1D	; 29
   1474a:	a0 e0       	ldi	r26, 0x00	; 0
   1474c:	81 83       	std	Z+1, r24	; 0x01
   1474e:	92 83       	std	Z+2, r25	; 0x02
   14750:	a3 83       	std	Z+3, r26	; 0x03
   14752:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   14756:	4e e1       	ldi	r20, 0x1E	; 30
   14758:	50 e0       	ldi	r21, 0x00	; 0
   1475a:	b8 01       	movw	r22, r16
   1475c:	84 e0       	ldi	r24, 0x04	; 4
   1475e:	91 e2       	ldi	r25, 0x21	; 33
   14760:	0e 94 a2 32 	call	0x6544	; 0x6544 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14764:	4e e7       	ldi	r20, 0x7E	; 126
   14766:	50 e0       	ldi	r21, 0x00	; 0
   14768:	b8 01       	movw	r22, r16
   1476a:	c4 01       	movw	r24, r8
   1476c:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14770:	4e e3       	ldi	r20, 0x3E	; 62
   14772:	50 e0       	ldi	r21, 0x00	; 0
   14774:	64 e2       	ldi	r22, 0x24	; 36
   14776:	71 e2       	ldi	r23, 0x21	; 33
   14778:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   1477c:	4e e1       	ldi	r20, 0x1E	; 30
   1477e:	50 e0       	ldi	r21, 0x00	; 0
   14780:	64 e6       	ldi	r22, 0x64	; 100
   14782:	71 e2       	ldi	r23, 0x21	; 33
   14784:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14788:	4e e7       	ldi	r20, 0x7E	; 126
   1478a:	50 e0       	ldi	r21, 0x00	; 0
   1478c:	b8 01       	movw	r22, r16
   1478e:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.ID = get_value(token);
   14792:	6c 01       	movw	r12, r24
   14794:	c8 01       	movw	r24, r16
   14796:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   1479a:	60 93 84 21 	sts	0x2184, r22	; 0x802184 <hpdir+0x80>
   1479e:	70 93 85 21 	sts	0x2185, r23	; 0x802185 <hpdir+0x81>
   147a2:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <hpdir+0x82>
   147a6:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   147aa:	4e e7       	ldi	r20, 0x7E	; 126
   147ac:	50 e0       	ldi	r21, 0x00	; 0
   147ae:	b8 01       	movw	r22, r16
   147b0:	c6 01       	movw	r24, r12
   147b2:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.mask_stat2 = get_value(token);
   147b6:	6c 01       	movw	r12, r24
   147b8:	c8 01       	movw	r24, r16
   147ba:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   147be:	60 93 88 21 	sts	0x2188, r22	; 0x802188 <hpdir+0x84>
   147c2:	70 93 89 21 	sts	0x2189, r23	; 0x802189 <hpdir+0x85>
   147c6:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <hpdir+0x86>
   147ca:	90 93 8b 21 	sts	0x218B, r25	; 0x80218b <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   147ce:	4e e7       	ldi	r20, 0x7E	; 126
   147d0:	50 e0       	ldi	r21, 0x00	; 0
   147d2:	b8 01       	movw	r22, r16
   147d4:	c6 01       	movw	r24, r12
   147d6:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.id_stat2 = get_value(token);
   147da:	6c 01       	movw	r12, r24
   147dc:	c8 01       	movw	r24, r16
   147de:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   147e2:	60 93 8c 21 	sts	0x218C, r22	; 0x80218c <hpdir+0x88>
   147e6:	70 93 8d 21 	sts	0x218D, r23	; 0x80218d <hpdir+0x89>
   147ea:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <hpdir+0x8a>
   147ee:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   147f2:	4e e7       	ldi	r20, 0x7E	; 126
   147f4:	50 e0       	ldi	r21, 0x00	; 0
   147f6:	b8 01       	movw	r22, r16
   147f8:	c6 01       	movw	r24, r12
   147fa:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.DEVICE_NUMBER = get_value(token);
   147fe:	6c 01       	movw	r12, r24
   14800:	c8 01       	movw	r24, r16
   14802:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   14806:	60 93 90 21 	sts	0x2190, r22	; 0x802190 <hpdir+0x8c>
   1480a:	70 93 91 21 	sts	0x2191, r23	; 0x802191 <hpdir+0x8d>
   1480e:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <hpdir+0x8e>
   14812:	90 93 93 21 	sts	0x2193, r25	; 0x802193 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14816:	4e e7       	ldi	r20, 0x7E	; 126
   14818:	50 e0       	ldi	r21, 0x00	; 0
   1481a:	b8 01       	movw	r22, r16
   1481c:	c6 01       	movw	r24, r12
   1481e:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.UNITS_INSTALLED = get_value(token);
   14822:	6c 01       	movw	r12, r24
   14824:	c8 01       	movw	r24, r16
   14826:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   1482a:	60 93 94 21 	sts	0x2194, r22	; 0x802194 <hpdir+0x90>
   1482e:	70 93 95 21 	sts	0x2195, r23	; 0x802195 <hpdir+0x91>
   14832:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <hpdir+0x92>
   14836:	90 93 97 21 	sts	0x2197, r25	; 0x802197 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1483a:	4e e7       	ldi	r20, 0x7E	; 126
   1483c:	50 e0       	ldi	r21, 0x00	; 0
   1483e:	b8 01       	movw	r22, r16
   14840:	c6 01       	movw	r24, r12
   14842:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.CYLINDERS = get_value(token);
   14846:	6c 01       	movw	r12, r24
   14848:	c8 01       	movw	r24, r16
   1484a:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   1484e:	60 93 98 21 	sts	0x2198, r22	; 0x802198 <hpdir+0x94>
   14852:	70 93 99 21 	sts	0x2199, r23	; 0x802199 <hpdir+0x95>
   14856:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <hpdir+0x96>
   1485a:	90 93 9b 21 	sts	0x219B, r25	; 0x80219b <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1485e:	4e e7       	ldi	r20, 0x7E	; 126
   14860:	50 e0       	ldi	r21, 0x00	; 0
   14862:	b8 01       	movw	r22, r16
   14864:	c6 01       	movw	r24, r12
   14866:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.HEADS = get_value(token);
   1486a:	6c 01       	movw	r12, r24
   1486c:	c8 01       	movw	r24, r16
   1486e:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   14872:	60 93 9c 21 	sts	0x219C, r22	; 0x80219c <hpdir+0x98>
   14876:	70 93 9d 21 	sts	0x219D, r23	; 0x80219d <hpdir+0x99>
   1487a:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <hpdir+0x9a>
   1487e:	90 93 9f 21 	sts	0x219F, r25	; 0x80219f <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14882:	4e e7       	ldi	r20, 0x7E	; 126
   14884:	50 e0       	ldi	r21, 0x00	; 0
   14886:	b8 01       	movw	r22, r16
   14888:	c6 01       	movw	r24, r12
   1488a:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.SECTORS = get_value(token);
   1488e:	6c 01       	movw	r12, r24
   14890:	c8 01       	movw	r24, r16
   14892:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   14896:	60 93 a0 21 	sts	0x21A0, r22	; 0x8021a0 <hpdir+0x9c>
   1489a:	70 93 a1 21 	sts	0x21A1, r23	; 0x8021a1 <hpdir+0x9d>
   1489e:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <hpdir+0x9e>
   148a2:	90 93 a3 21 	sts	0x21A3, r25	; 0x8021a3 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   148a6:	4e e7       	ldi	r20, 0x7E	; 126
   148a8:	50 e0       	ldi	r21, 0x00	; 0
   148aa:	b8 01       	movw	r22, r16
   148ac:	c6 01       	movw	r24, r12
   148ae:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.BYTES_PER_SECTOR = get_value(token);
   148b2:	6c 01       	movw	r12, r24
   148b4:	c8 01       	movw	r24, r16
   148b6:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   148ba:	60 93 a4 21 	sts	0x21A4, r22	; 0x8021a4 <hpdir+0xa0>
   148be:	70 93 a5 21 	sts	0x21A5, r23	; 0x8021a5 <hpdir+0xa1>
   148c2:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <hpdir+0xa2>
   148c6:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   148ca:	4e e7       	ldi	r20, 0x7E	; 126
   148cc:	50 e0       	ldi	r21, 0x00	; 0
   148ce:	b8 01       	movw	r22, r16
   148d0:	c6 01       	movw	r24, r12
   148d2:	0e 94 57 34 	call	0x68ae	; 0x68ae <get_token>
        hpdir.INTERLEAVE = get_value(token);
   148d6:	c8 01       	movw	r24, r16
   148d8:	0e 94 9a 34 	call	0x6934	; 0x6934 <get_value>
   148dc:	60 93 a8 21 	sts	0x21A8, r22	; 0x8021a8 <hpdir+0xa4>
   148e0:	70 93 a9 21 	sts	0x21A9, r23	; 0x8021a9 <hpdir+0xa5>
   148e4:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <hpdir+0xa6>
   148e8:	90 93 ab 21 	sts	0x21AB, r25	; 0x8021ab <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   148ec:	20 91 98 21 	lds	r18, 0x2198	; 0x802198 <hpdir+0x94>
   148f0:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <hpdir+0x95>
   148f4:	40 91 9a 21 	lds	r20, 0x219A	; 0x80219a <hpdir+0x96>
   148f8:	50 91 9b 21 	lds	r21, 0x219B	; 0x80219b <hpdir+0x97>
   148fc:	60 91 9c 21 	lds	r22, 0x219C	; 0x80219c <hpdir+0x98>
   14900:	70 91 9d 21 	lds	r23, 0x219D	; 0x80219d <hpdir+0x99>
   14904:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <hpdir+0x9a>
   14908:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <hpdir+0x9b>
   1490c:	0e 94 3a e3 	call	0x1c674	; 0x1c674 <__mulsi3>
   14910:	9b 01       	movw	r18, r22
   14912:	ac 01       	movw	r20, r24
   14914:	60 91 a0 21 	lds	r22, 0x21A0	; 0x8021a0 <hpdir+0x9c>
   14918:	70 91 a1 21 	lds	r23, 0x21A1	; 0x8021a1 <hpdir+0x9d>
   1491c:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <hpdir+0x9e>
   14920:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <hpdir+0x9f>
   14924:	0e 94 3a e3 	call	0x1c674	; 0x1c674 <__mulsi3>
   14928:	60 93 b0 21 	sts	0x21B0, r22	; 0x8021b0 <hpdir+0xac>
   1492c:	70 93 b1 21 	sts	0x21B1, r23	; 0x8021b1 <hpdir+0xad>
   14930:	80 93 b2 21 	sts	0x21B2, r24	; 0x8021b2 <hpdir+0xae>
   14934:	90 93 b3 21 	sts	0x21B3, r25	; 0x8021b3 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14938:	01 e0       	ldi	r16, 0x01	; 1
        break;

    }                                             // while
    fclose(cfg);
   1493a:	10 e0       	ldi	r17, 0x00	; 0
   1493c:	c7 01       	movw	r24, r14
   1493e:	0e 94 87 7e 	call	0xfd0e	; 0xfd0e <fclose>
    return(found);
   14942:	c8 01       	movw	r24, r16

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14944:	02 c0       	rjmp	.+4      	; 0x1494a <hpdir_find_drive+0x35a>
   14946:	80 e0       	ldi	r24, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   14948:	90 e0       	ldi	r25, 0x00	; 0
   1494a:	c7 57       	subi	r28, 0x77	; 119
   1494c:	de 4f       	sbci	r29, 0xFE	; 254
   1494e:	0f b6       	in	r0, 0x3f	; 63
   14950:	f8 94       	cli
   14952:	de bf       	out	0x3e, r29	; 62
   14954:	0f be       	out	0x3f, r0	; 63
   14956:	cd bf       	out	0x3d, r28	; 61
   14958:	df 91       	pop	r29
   1495a:	cf 91       	pop	r28
   1495c:	1f 91       	pop	r17
   1495e:	0f 91       	pop	r16
   14960:	ff 90       	pop	r15
   14962:	ef 90       	pop	r14
   14964:	df 90       	pop	r13
   14966:	cf 90       	pop	r12
   14968:	bf 90       	pop	r11
   1496a:	af 90       	pop	r10
   1496c:	9f 90       	pop	r9
   1496e:	8f 90       	pop	r8
   14970:	6f 90       	pop	r6
   14972:	5f 90       	pop	r5
   14974:	4f 90       	pop	r4
   14976:	3f 90       	pop	r3
   14978:	2f 90       	pop	r2
   1497a:	08 95       	ret

0001497c <SS80ControllerPack>:
   1497c:	0f 93       	push	r16
   1497e:	1f 93       	push	r17
   14980:	25 e0       	ldi	r18, 0x05	; 5
   14982:	30 e0       	ldi	r19, 0x00	; 0
   14984:	fc 01       	movw	r30, r24
   14986:	31 83       	std	Z+1, r19	; 0x01
   14988:	20 83       	st	Z, r18
   1498a:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   1498e:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14992:	06 81       	ldd	r16, Z+6	; 0x06
   14994:	17 81       	ldd	r17, Z+7	; 0x07
   14996:	20 e0       	ldi	r18, 0x00	; 0
   14998:	30 e0       	ldi	r19, 0x00	; 0
   1499a:	42 e0       	ldi	r20, 0x02	; 2
   1499c:	50 e0       	ldi	r21, 0x00	; 0
   1499e:	60 e0       	ldi	r22, 0x00	; 0
   149a0:	70 e0       	ldi	r23, 0x00	; 0
   149a2:	85 ea       	ldi	r24, 0xA5	; 165
   149a4:	99 e1       	ldi	r25, 0x19	; 25
   149a6:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   149aa:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   149ae:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   149b2:	00 85       	ldd	r16, Z+8	; 0x08
   149b4:	11 85       	ldd	r17, Z+9	; 0x09
   149b6:	20 e0       	ldi	r18, 0x00	; 0
   149b8:	30 e0       	ldi	r19, 0x00	; 0
   149ba:	42 e0       	ldi	r20, 0x02	; 2
   149bc:	50 e0       	ldi	r21, 0x00	; 0
   149be:	61 e0       	ldi	r22, 0x01	; 1
   149c0:	70 e0       	ldi	r23, 0x00	; 0
   149c2:	85 ea       	ldi	r24, 0xA5	; 165
   149c4:	99 e1       	ldi	r25, 0x19	; 25
   149c6:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   149ca:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   149ce:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   149d2:	02 85       	ldd	r16, Z+10	; 0x0a
   149d4:	10 e0       	ldi	r17, 0x00	; 0
   149d6:	20 e0       	ldi	r18, 0x00	; 0
   149d8:	30 e0       	ldi	r19, 0x00	; 0
   149da:	41 e0       	ldi	r20, 0x01	; 1
   149dc:	50 e0       	ldi	r21, 0x00	; 0
   149de:	64 e0       	ldi	r22, 0x04	; 4
   149e0:	70 e0       	ldi	r23, 0x00	; 0
   149e2:	85 ea       	ldi	r24, 0xA5	; 165
   149e4:	99 e1       	ldi	r25, 0x19	; 25
   149e6:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   149ea:	85 ea       	ldi	r24, 0xA5	; 165
   149ec:	99 e1       	ldi	r25, 0x19	; 25
   149ee:	1f 91       	pop	r17
   149f0:	0f 91       	pop	r16
   149f2:	08 95       	ret

000149f4 <SS80UnitPack>:
   149f4:	0f 93       	push	r16
   149f6:	1f 93       	push	r17
   149f8:	23 e1       	ldi	r18, 0x13	; 19
   149fa:	30 e0       	ldi	r19, 0x00	; 0
   149fc:	fc 01       	movw	r30, r24
   149fe:	31 83       	std	Z+1, r19	; 0x01
   14a00:	20 83       	st	Z, r18
   14a02:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14a06:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14a0a:	03 85       	ldd	r16, Z+11	; 0x0b
   14a0c:	10 e0       	ldi	r17, 0x00	; 0
   14a0e:	20 e0       	ldi	r18, 0x00	; 0
   14a10:	30 e0       	ldi	r19, 0x00	; 0
   14a12:	41 e0       	ldi	r20, 0x01	; 1
   14a14:	50 e0       	ldi	r21, 0x00	; 0
   14a16:	60 e0       	ldi	r22, 0x00	; 0
   14a18:	70 e0       	ldi	r23, 0x00	; 0
   14a1a:	82 e9       	ldi	r24, 0x92	; 146
   14a1c:	99 e1       	ldi	r25, 0x19	; 25
   14a1e:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14a22:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14a26:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14a2a:	04 85       	ldd	r16, Z+12	; 0x0c
   14a2c:	15 85       	ldd	r17, Z+13	; 0x0d
   14a2e:	26 85       	ldd	r18, Z+14	; 0x0e
   14a30:	37 85       	ldd	r19, Z+15	; 0x0f
   14a32:	43 e0       	ldi	r20, 0x03	; 3
   14a34:	50 e0       	ldi	r21, 0x00	; 0
   14a36:	61 e0       	ldi	r22, 0x01	; 1
   14a38:	70 e0       	ldi	r23, 0x00	; 0
   14a3a:	82 e9       	ldi	r24, 0x92	; 146
   14a3c:	99 e1       	ldi	r25, 0x19	; 25
   14a3e:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14a42:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14a46:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14a4a:	00 89       	ldd	r16, Z+16	; 0x10
   14a4c:	11 89       	ldd	r17, Z+17	; 0x11
   14a4e:	20 e0       	ldi	r18, 0x00	; 0
   14a50:	30 e0       	ldi	r19, 0x00	; 0
   14a52:	42 e0       	ldi	r20, 0x02	; 2
   14a54:	50 e0       	ldi	r21, 0x00	; 0
   14a56:	64 e0       	ldi	r22, 0x04	; 4
   14a58:	70 e0       	ldi	r23, 0x00	; 0
   14a5a:	82 e9       	ldi	r24, 0x92	; 146
   14a5c:	99 e1       	ldi	r25, 0x19	; 25
   14a5e:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14a62:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14a66:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14a6a:	02 89       	ldd	r16, Z+18	; 0x12
   14a6c:	10 e0       	ldi	r17, 0x00	; 0
   14a6e:	20 e0       	ldi	r18, 0x00	; 0
   14a70:	30 e0       	ldi	r19, 0x00	; 0
   14a72:	41 e0       	ldi	r20, 0x01	; 1
   14a74:	50 e0       	ldi	r21, 0x00	; 0
   14a76:	66 e0       	ldi	r22, 0x06	; 6
   14a78:	70 e0       	ldi	r23, 0x00	; 0
   14a7a:	82 e9       	ldi	r24, 0x92	; 146
   14a7c:	99 e1       	ldi	r25, 0x19	; 25
   14a7e:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14a82:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14a86:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14a8a:	03 89       	ldd	r16, Z+19	; 0x13
   14a8c:	10 e0       	ldi	r17, 0x00	; 0
   14a8e:	20 e0       	ldi	r18, 0x00	; 0
   14a90:	30 e0       	ldi	r19, 0x00	; 0
   14a92:	41 e0       	ldi	r20, 0x01	; 1
   14a94:	50 e0       	ldi	r21, 0x00	; 0
   14a96:	67 e0       	ldi	r22, 0x07	; 7
   14a98:	70 e0       	ldi	r23, 0x00	; 0
   14a9a:	82 e9       	ldi	r24, 0x92	; 146
   14a9c:	99 e1       	ldi	r25, 0x19	; 25
   14a9e:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14aa2:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14aa6:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14aaa:	04 89       	ldd	r16, Z+20	; 0x14
   14aac:	15 89       	ldd	r17, Z+21	; 0x15
   14aae:	20 e0       	ldi	r18, 0x00	; 0
   14ab0:	30 e0       	ldi	r19, 0x00	; 0
   14ab2:	42 e0       	ldi	r20, 0x02	; 2
   14ab4:	50 e0       	ldi	r21, 0x00	; 0
   14ab6:	68 e0       	ldi	r22, 0x08	; 8
   14ab8:	70 e0       	ldi	r23, 0x00	; 0
   14aba:	82 e9       	ldi	r24, 0x92	; 146
   14abc:	99 e1       	ldi	r25, 0x19	; 25
   14abe:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14ac2:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14ac6:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14aca:	06 89       	ldd	r16, Z+22	; 0x16
   14acc:	17 89       	ldd	r17, Z+23	; 0x17
   14ace:	20 e0       	ldi	r18, 0x00	; 0
   14ad0:	30 e0       	ldi	r19, 0x00	; 0
   14ad2:	42 e0       	ldi	r20, 0x02	; 2
   14ad4:	50 e0       	ldi	r21, 0x00	; 0
   14ad6:	6a e0       	ldi	r22, 0x0A	; 10
   14ad8:	70 e0       	ldi	r23, 0x00	; 0
   14ada:	82 e9       	ldi	r24, 0x92	; 146
   14adc:	99 e1       	ldi	r25, 0x19	; 25
   14ade:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14ae2:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14ae6:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14aea:	00 8d       	ldd	r16, Z+24	; 0x18
   14aec:	11 8d       	ldd	r17, Z+25	; 0x19
   14aee:	20 e0       	ldi	r18, 0x00	; 0
   14af0:	30 e0       	ldi	r19, 0x00	; 0
   14af2:	42 e0       	ldi	r20, 0x02	; 2
   14af4:	50 e0       	ldi	r21, 0x00	; 0
   14af6:	6c e0       	ldi	r22, 0x0C	; 12
   14af8:	70 e0       	ldi	r23, 0x00	; 0
   14afa:	82 e9       	ldi	r24, 0x92	; 146
   14afc:	99 e1       	ldi	r25, 0x19	; 25
   14afe:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14b02:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14b06:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14b0a:	02 8d       	ldd	r16, Z+26	; 0x1a
   14b0c:	13 8d       	ldd	r17, Z+27	; 0x1b
   14b0e:	20 e0       	ldi	r18, 0x00	; 0
   14b10:	30 e0       	ldi	r19, 0x00	; 0
   14b12:	42 e0       	ldi	r20, 0x02	; 2
   14b14:	50 e0       	ldi	r21, 0x00	; 0
   14b16:	6e e0       	ldi	r22, 0x0E	; 14
   14b18:	70 e0       	ldi	r23, 0x00	; 0
   14b1a:	82 e9       	ldi	r24, 0x92	; 146
   14b1c:	99 e1       	ldi	r25, 0x19	; 25
   14b1e:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14b22:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14b26:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14b2a:	04 8d       	ldd	r16, Z+28	; 0x1c
   14b2c:	10 e0       	ldi	r17, 0x00	; 0
   14b2e:	20 e0       	ldi	r18, 0x00	; 0
   14b30:	30 e0       	ldi	r19, 0x00	; 0
   14b32:	41 e0       	ldi	r20, 0x01	; 1
   14b34:	50 e0       	ldi	r21, 0x00	; 0
   14b36:	60 e1       	ldi	r22, 0x10	; 16
   14b38:	70 e0       	ldi	r23, 0x00	; 0
   14b3a:	82 e9       	ldi	r24, 0x92	; 146
   14b3c:	99 e1       	ldi	r25, 0x19	; 25
   14b3e:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14b42:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14b46:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14b4a:	05 8d       	ldd	r16, Z+29	; 0x1d
   14b4c:	10 e0       	ldi	r17, 0x00	; 0
   14b4e:	20 e0       	ldi	r18, 0x00	; 0
   14b50:	30 e0       	ldi	r19, 0x00	; 0
   14b52:	41 e0       	ldi	r20, 0x01	; 1
   14b54:	50 e0       	ldi	r21, 0x00	; 0
   14b56:	61 e1       	ldi	r22, 0x11	; 17
   14b58:	70 e0       	ldi	r23, 0x00	; 0
   14b5a:	82 e9       	ldi	r24, 0x92	; 146
   14b5c:	99 e1       	ldi	r25, 0x19	; 25
   14b5e:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14b62:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14b66:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14b6a:	06 8d       	ldd	r16, Z+30	; 0x1e
   14b6c:	10 e0       	ldi	r17, 0x00	; 0
   14b6e:	20 e0       	ldi	r18, 0x00	; 0
   14b70:	30 e0       	ldi	r19, 0x00	; 0
   14b72:	41 e0       	ldi	r20, 0x01	; 1
   14b74:	50 e0       	ldi	r21, 0x00	; 0
   14b76:	62 e1       	ldi	r22, 0x12	; 18
   14b78:	70 e0       	ldi	r23, 0x00	; 0
   14b7a:	82 e9       	ldi	r24, 0x92	; 146
   14b7c:	99 e1       	ldi	r25, 0x19	; 25
   14b7e:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14b82:	82 e9       	ldi	r24, 0x92	; 146
   14b84:	99 e1       	ldi	r25, 0x19	; 25
   14b86:	1f 91       	pop	r17
   14b88:	0f 91       	pop	r16
   14b8a:	08 95       	ret

00014b8c <SS80VolumePack>:
   14b8c:	0f 93       	push	r16
   14b8e:	1f 93       	push	r17
   14b90:	2d e0       	ldi	r18, 0x0D	; 13
   14b92:	30 e0       	ldi	r19, 0x00	; 0
   14b94:	fc 01       	movw	r30, r24
   14b96:	31 83       	std	Z+1, r19	; 0x01
   14b98:	20 83       	st	Z, r18
   14b9a:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14b9e:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14ba2:	07 8d       	ldd	r16, Z+31	; 0x1f
   14ba4:	10 a1       	ldd	r17, Z+32	; 0x20
   14ba6:	21 a1       	ldd	r18, Z+33	; 0x21
   14ba8:	32 a1       	ldd	r19, Z+34	; 0x22
   14baa:	43 e0       	ldi	r20, 0x03	; 3
   14bac:	50 e0       	ldi	r21, 0x00	; 0
   14bae:	60 e0       	ldi	r22, 0x00	; 0
   14bb0:	70 e0       	ldi	r23, 0x00	; 0
   14bb2:	85 e8       	ldi	r24, 0x85	; 133
   14bb4:	99 e1       	ldi	r25, 0x19	; 25
   14bb6:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14bba:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14bbe:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14bc2:	03 a1       	ldd	r16, Z+35	; 0x23
   14bc4:	10 e0       	ldi	r17, 0x00	; 0
   14bc6:	20 e0       	ldi	r18, 0x00	; 0
   14bc8:	30 e0       	ldi	r19, 0x00	; 0
   14bca:	41 e0       	ldi	r20, 0x01	; 1
   14bcc:	50 e0       	ldi	r21, 0x00	; 0
   14bce:	63 e0       	ldi	r22, 0x03	; 3
   14bd0:	70 e0       	ldi	r23, 0x00	; 0
   14bd2:	85 e8       	ldi	r24, 0x85	; 133
   14bd4:	99 e1       	ldi	r25, 0x19	; 25
   14bd6:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14bda:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14bde:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14be2:	04 a1       	ldd	r16, Z+36	; 0x24
   14be4:	15 a1       	ldd	r17, Z+37	; 0x25
   14be6:	20 e0       	ldi	r18, 0x00	; 0
   14be8:	30 e0       	ldi	r19, 0x00	; 0
   14bea:	42 e0       	ldi	r20, 0x02	; 2
   14bec:	50 e0       	ldi	r21, 0x00	; 0
   14bee:	64 e0       	ldi	r22, 0x04	; 4
   14bf0:	70 e0       	ldi	r23, 0x00	; 0
   14bf2:	85 e8       	ldi	r24, 0x85	; 133
   14bf4:	99 e1       	ldi	r25, 0x19	; 25
   14bf6:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14bfa:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14bfe:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14c02:	06 a1       	ldd	r16, Z+38	; 0x26
   14c04:	17 a1       	ldd	r17, Z+39	; 0x27
   14c06:	20 a5       	ldd	r18, Z+40	; 0x28
   14c08:	31 a5       	ldd	r19, Z+41	; 0x29
   14c0a:	46 e0       	ldi	r20, 0x06	; 6
   14c0c:	50 e0       	ldi	r21, 0x00	; 0
   14c0e:	66 e0       	ldi	r22, 0x06	; 6
   14c10:	70 e0       	ldi	r23, 0x00	; 0
   14c12:	85 e8       	ldi	r24, 0x85	; 133
   14c14:	99 e1       	ldi	r25, 0x19	; 25
   14c16:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14c1a:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14c1e:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14c22:	02 a5       	ldd	r16, Z+42	; 0x2a
   14c24:	10 e0       	ldi	r17, 0x00	; 0
   14c26:	20 e0       	ldi	r18, 0x00	; 0
   14c28:	30 e0       	ldi	r19, 0x00	; 0
   14c2a:	41 e0       	ldi	r20, 0x01	; 1
   14c2c:	50 e0       	ldi	r21, 0x00	; 0
   14c2e:	6c e0       	ldi	r22, 0x0C	; 12
   14c30:	70 e0       	ldi	r23, 0x00	; 0
   14c32:	85 e8       	ldi	r24, 0x85	; 133
   14c34:	99 e1       	ldi	r25, 0x19	; 25
   14c36:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14c3a:	85 e8       	ldi	r24, 0x85	; 133
   14c3c:	99 e1       	ldi	r25, 0x19	; 25
   14c3e:	1f 91       	pop	r17
   14c40:	0f 91       	pop	r16
   14c42:	08 95       	ret

00014c44 <SS80_test_extended_status>:
   14c44:	9b 01       	movw	r18, r22
   14c46:	43 e0       	ldi	r20, 0x03	; 3
   14c48:	35 95       	asr	r19
   14c4a:	27 95       	ror	r18
   14c4c:	4a 95       	dec	r20
   14c4e:	e1 f7       	brne	.-8      	; 0x14c48 <SS80_test_extended_status+0x4>
   14c50:	82 0f       	add	r24, r18
   14c52:	93 1f       	adc	r25, r19
   14c54:	67 70       	andi	r22, 0x07	; 7
   14c56:	77 27       	eor	r23, r23
   14c58:	20 e8       	ldi	r18, 0x80	; 128
   14c5a:	30 e0       	ldi	r19, 0x00	; 0
   14c5c:	02 c0       	rjmp	.+4      	; 0x14c62 <SS80_test_extended_status+0x1e>
   14c5e:	35 95       	asr	r19
   14c60:	27 95       	ror	r18
   14c62:	6a 95       	dec	r22
   14c64:	e2 f7       	brpl	.-8      	; 0x14c5e <SS80_test_extended_status+0x1a>
   14c66:	fc 01       	movw	r30, r24
   14c68:	80 81       	ld	r24, Z
   14c6a:	28 23       	and	r18, r24
   14c6c:	81 e0       	ldi	r24, 0x01	; 1
   14c6e:	90 e0       	ldi	r25, 0x00	; 0
   14c70:	11 f4       	brne	.+4      	; 0x14c76 <SS80_test_extended_status+0x32>
   14c72:	80 e0       	ldi	r24, 0x00	; 0
   14c74:	90 e0       	ldi	r25, 0x00	; 0
   14c76:	08 95       	ret

00014c78 <SS80_display_extended_status>:
   14c78:	6f 92       	push	r6
   14c7a:	7f 92       	push	r7
   14c7c:	8f 92       	push	r8
   14c7e:	ef 92       	push	r14
   14c80:	ff 92       	push	r15
   14c82:	0f 93       	push	r16
   14c84:	1f 93       	push	r17
   14c86:	cf 93       	push	r28
   14c88:	df 93       	push	r29
   14c8a:	ad b7       	in	r26, 0x3d	; 61
   14c8c:	be b7       	in	r27, 0x3e	; 62
   14c8e:	17 97       	sbiw	r26, 0x07	; 7
   14c90:	0f b6       	in	r0, 0x3f	; 63
   14c92:	f8 94       	cli
   14c94:	be bf       	out	0x3e, r27	; 62
   14c96:	0f be       	out	0x3f, r0	; 63
   14c98:	ad bf       	out	0x3d, r26	; 61
   14c9a:	fc 01       	movw	r30, r24
   14c9c:	ac 01       	movw	r20, r24
   14c9e:	48 5f       	subi	r20, 0xF8	; 248
   14ca0:	5f 4f       	sbci	r21, 0xFF	; 255
   14ca2:	20 e0       	ldi	r18, 0x00	; 0
   14ca4:	30 e0       	ldi	r19, 0x00	; 0
   14ca6:	a1 91       	ld	r26, Z+
   14ca8:	aa 23       	and	r26, r26
   14caa:	11 f0       	breq	.+4      	; 0x14cb0 <SS80_display_extended_status+0x38>
   14cac:	21 e0       	ldi	r18, 0x01	; 1
   14cae:	30 e0       	ldi	r19, 0x00	; 0
   14cb0:	e4 17       	cp	r30, r20
   14cb2:	f5 07       	cpc	r31, r21
   14cb4:	c1 f7       	brne	.-16     	; 0x14ca6 <SS80_display_extended_status+0x2e>
   14cb6:	23 2b       	or	r18, r19
   14cb8:	81 f1       	breq	.+96     	; 0x14d1a <SS80_display_extended_status+0xa2>
   14cba:	ec 01       	movw	r28, r24
   14cbc:	ed b7       	in	r30, 0x3d	; 61
   14cbe:	fe b7       	in	r31, 0x3e	; 62
   14cc0:	75 83       	std	Z+5, r23	; 0x05
   14cc2:	64 83       	std	Z+4, r22	; 0x04
   14cc4:	8d e5       	ldi	r24, 0x5D	; 93
   14cc6:	94 e2       	ldi	r25, 0x24	; 36
   14cc8:	a0 e0       	ldi	r26, 0x00	; 0
   14cca:	81 83       	std	Z+1, r24	; 0x01
   14ccc:	92 83       	std	Z+2, r25	; 0x02
   14cce:	a3 83       	std	Z+3, r26	; 0x03
   14cd0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   14cd4:	0c e7       	ldi	r16, 0x7C	; 124
   14cd6:	12 e0       	ldi	r17, 0x02	; 2
   14cd8:	82 e5       	ldi	r24, 0x52	; 82
   14cda:	94 e2       	ldi	r25, 0x24	; 36
   14cdc:	3c 01       	movw	r6, r24
   14cde:	81 2c       	mov	r8, r1
   14ce0:	f8 01       	movw	r30, r16
   14ce2:	e0 80       	ld	r14, Z
   14ce4:	f1 80       	ldd	r15, Z+1	; 0x01
   14ce6:	ff ef       	ldi	r31, 0xFF	; 255
   14ce8:	ef 16       	cp	r14, r31
   14cea:	ff 06       	cpc	r15, r31
   14cec:	b1 f0       	breq	.+44     	; 0x14d1a <SS80_display_extended_status+0xa2>
   14cee:	b7 01       	movw	r22, r14
   14cf0:	ce 01       	movw	r24, r28
   14cf2:	a8 df       	rcall	.-176    	; 0x14c44 <SS80_test_extended_status>
   14cf4:	89 2b       	or	r24, r25
   14cf6:	71 f0       	breq	.+28     	; 0x14d14 <SS80_display_extended_status+0x9c>
   14cf8:	f8 01       	movw	r30, r16
   14cfa:	82 81       	ldd	r24, Z+2	; 0x02
   14cfc:	93 81       	ldd	r25, Z+3	; 0x03
   14cfe:	ed b7       	in	r30, 0x3d	; 61
   14d00:	fe b7       	in	r31, 0x3e	; 62
   14d02:	97 83       	std	Z+7, r25	; 0x07
   14d04:	86 83       	std	Z+6, r24	; 0x06
   14d06:	f5 82       	std	Z+5, r15	; 0x05
   14d08:	e4 82       	std	Z+4, r14	; 0x04
   14d0a:	61 82       	std	Z+1, r6	; 0x01
   14d0c:	72 82       	std	Z+2, r7	; 0x02
   14d0e:	83 82       	std	Z+3, r8	; 0x03
   14d10:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   14d14:	0c 5f       	subi	r16, 0xFC	; 252
   14d16:	1f 4f       	sbci	r17, 0xFF	; 255
   14d18:	e3 cf       	rjmp	.-58     	; 0x14ce0 <SS80_display_extended_status+0x68>
   14d1a:	ad b7       	in	r26, 0x3d	; 61
   14d1c:	be b7       	in	r27, 0x3e	; 62
   14d1e:	17 96       	adiw	r26, 0x07	; 7
   14d20:	0f b6       	in	r0, 0x3f	; 63
   14d22:	f8 94       	cli
   14d24:	be bf       	out	0x3e, r27	; 62
   14d26:	0f be       	out	0x3f, r0	; 63
   14d28:	ad bf       	out	0x3d, r26	; 61
   14d2a:	df 91       	pop	r29
   14d2c:	cf 91       	pop	r28
   14d2e:	1f 91       	pop	r17
   14d30:	0f 91       	pop	r16
   14d32:	ff 90       	pop	r15
   14d34:	ef 90       	pop	r14
   14d36:	8f 90       	pop	r8
   14d38:	7f 90       	pop	r7
   14d3a:	6f 90       	pop	r6
   14d3c:	08 95       	ret

00014d3e <SS80_send_status>:
   14d3e:	a9 e1       	ldi	r26, 0x19	; 25
   14d40:	b0 e0       	ldi	r27, 0x00	; 0
   14d42:	e5 ea       	ldi	r30, 0xA5	; 165
   14d44:	f6 ea       	ldi	r31, 0xA6	; 166
   14d46:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
   14d4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d4e:	85 ff       	sbrs	r24, 5
   14d50:	0a c0       	rjmp	.+20     	; 0x14d66 <SS80_send_status+0x28>
   14d52:	8e e3       	ldi	r24, 0x3E	; 62
   14d54:	94 e2       	ldi	r25, 0x24	; 36
   14d56:	a0 e0       	ldi	r26, 0x00	; 0
   14d58:	ed b7       	in	r30, 0x3d	; 61
   14d5a:	fe b7       	in	r31, 0x3e	; 62
   14d5c:	81 83       	std	Z+1, r24	; 0x01
   14d5e:	92 83       	std	Z+2, r25	; 0x02
   14d60:	a3 83       	std	Z+3, r26	; 0x03
   14d62:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   14d66:	ce 01       	movw	r24, r28
   14d68:	04 96       	adiw	r24, 0x04	; 4
   14d6a:	7c 01       	movw	r14, r24
   14d6c:	84 e1       	ldi	r24, 0x14	; 20
   14d6e:	f7 01       	movw	r30, r14
   14d70:	11 92       	st	Z+, r1
   14d72:	8a 95       	dec	r24
   14d74:	e9 f7       	brne	.-6      	; 0x14d70 <SS80_send_status+0x32>
   14d76:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14d7a:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14d7e:	86 81       	ldd	r24, Z+6	; 0x06
   14d80:	20 e1       	ldi	r18, 0x10	; 16
   14d82:	82 9f       	mul	r24, r18
   14d84:	c0 01       	movw	r24, r0
   14d86:	11 24       	eor	r1, r1
   14d88:	95 81       	ldd	r25, Z+5	; 0x05
   14d8a:	9f 70       	andi	r25, 0x0F	; 15
   14d8c:	89 2b       	or	r24, r25
   14d8e:	8c 83       	std	Y+4, r24	; 0x04
   14d90:	8f ef       	ldi	r24, 0xFF	; 255
   14d92:	8d 83       	std	Y+5, r24	; 0x05
   14d94:	83 81       	ldd	r24, Z+3	; 0x03
   14d96:	86 ff       	sbrs	r24, 6
   14d98:	02 c0       	rjmp	.+4      	; 0x14d9e <SS80_send_status+0x60>
   14d9a:	92 e0       	ldi	r25, 0x02	; 2
   14d9c:	9e 83       	std	Y+6, r25	; 0x06
   14d9e:	82 ff       	sbrs	r24, 2
   14da0:	03 c0       	rjmp	.+6      	; 0x14da8 <SS80_send_status+0x6a>
   14da2:	9e 81       	ldd	r25, Y+6	; 0x06
   14da4:	91 60       	ori	r25, 0x01	; 1
   14da6:	9e 83       	std	Y+6, r25	; 0x06
   14da8:	80 ff       	sbrs	r24, 0
   14daa:	02 c0       	rjmp	.+4      	; 0x14db0 <SS80_send_status+0x72>
   14dac:	82 e0       	ldi	r24, 0x02	; 2
   14dae:	88 87       	std	Y+8, r24	; 0x08
   14db0:	83 81       	ldd	r24, Z+3	; 0x03
   14db2:	81 ff       	sbrs	r24, 1
   14db4:	03 c0       	rjmp	.+6      	; 0x14dbc <SS80_send_status+0x7e>
   14db6:	88 85       	ldd	r24, Y+8	; 0x08
   14db8:	82 60       	ori	r24, 0x02	; 2
   14dba:	88 87       	std	Y+8, r24	; 0x08
   14dbc:	83 81       	ldd	r24, Z+3	; 0x03
   14dbe:	83 ff       	sbrs	r24, 3
   14dc0:	02 c0       	rjmp	.+4      	; 0x14dc6 <SS80_send_status+0x88>
   14dc2:	88 e0       	ldi	r24, 0x08	; 8
   14dc4:	8a 87       	std	Y+10, r24	; 0x0a
   14dc6:	83 81       	ldd	r24, Z+3	; 0x03
   14dc8:	94 81       	ldd	r25, Z+4	; 0x04
   14dca:	89 2b       	or	r24, r25
   14dcc:	59 f4       	brne	.+22     	; 0x14de4 <SS80_send_status+0xa6>
   14dce:	07 81       	ldd	r16, Z+7	; 0x07
   14dd0:	10 85       	ldd	r17, Z+8	; 0x08
   14dd2:	21 85       	ldd	r18, Z+9	; 0x09
   14dd4:	32 85       	ldd	r19, Z+10	; 0x0a
   14dd6:	46 e0       	ldi	r20, 0x06	; 6
   14dd8:	50 e0       	ldi	r21, 0x00	; 0
   14dda:	6a e0       	ldi	r22, 0x0A	; 10
   14ddc:	70 e0       	ldi	r23, 0x00	; 0
   14dde:	c7 01       	movw	r24, r14
   14de0:	0e 94 3d bf 	call	0x17e7a	; 0x17e7a <V2B_MSB>
   14de4:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14de8:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14dec:	83 81       	ldd	r24, Z+3	; 0x03
   14dee:	94 81       	ldd	r25, Z+4	; 0x04
   14df0:	89 2b       	or	r24, r25
   14df2:	11 f0       	breq	.+4      	; 0x14df8 <SS80_send_status+0xba>
   14df4:	81 e0       	ldi	r24, 0x01	; 1
   14df6:	82 83       	std	Z+2, r24	; 0x02
   14df8:	80 e0       	ldi	r24, 0x00	; 0
   14dfa:	91 e0       	ldi	r25, 0x01	; 1
   14dfc:	99 8f       	std	Y+25, r25	; 0x19
   14dfe:	88 8f       	std	Y+24, r24	; 0x18
   14e00:	ae 01       	movw	r20, r28
   14e02:	48 5e       	subi	r20, 0xE8	; 232
   14e04:	5f 4f       	sbci	r21, 0xFF	; 255
   14e06:	64 e1       	ldi	r22, 0x14	; 20
   14e08:	70 e0       	ldi	r23, 0x00	; 0
   14e0a:	c7 01       	movw	r24, r14
   14e0c:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   14e10:	44 97       	sbiw	r24, 0x14	; 20
   14e12:	71 f0       	breq	.+28     	; 0x14e30 <SS80_send_status+0xf2>
   14e14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e18:	80 ff       	sbrs	r24, 0
   14e1a:	0a c0       	rjmp	.+20     	; 0x14e30 <SS80_send_status+0xf2>
   14e1c:	83 e2       	ldi	r24, 0x23	; 35
   14e1e:	94 e2       	ldi	r25, 0x24	; 36
   14e20:	a0 e0       	ldi	r26, 0x00	; 0
   14e22:	ed b7       	in	r30, 0x3d	; 61
   14e24:	fe b7       	in	r31, 0x3e	; 62
   14e26:	81 83       	std	Z+1, r24	; 0x01
   14e28:	92 83       	std	Z+2, r25	; 0x02
   14e2a:	a3 83       	std	Z+3, r26	; 0x03
   14e2c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   14e30:	88 8d       	ldd	r24, Y+24	; 0x18
   14e32:	99 8d       	ldd	r25, Y+25	; 0x19
   14e34:	88 27       	eor	r24, r24
   14e36:	90 7d       	andi	r25, 0xD0	; 208
   14e38:	69 96       	adiw	r28, 0x19	; 25
   14e3a:	e6 e0       	ldi	r30, 0x06	; 6
   14e3c:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00014e40 <SS80_describe>:
   14e40:	a7 e0       	ldi	r26, 0x07	; 7
   14e42:	b0 e0       	ldi	r27, 0x00	; 0
   14e44:	e6 e2       	ldi	r30, 0x26	; 38
   14e46:	f7 ea       	ldi	r31, 0xA7	; 167
   14e48:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   14e4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e50:	85 ff       	sbrs	r24, 5
   14e52:	0a c0       	rjmp	.+20     	; 0x14e68 <SS80_describe+0x28>
   14e54:	82 e1       	ldi	r24, 0x12	; 18
   14e56:	94 e2       	ldi	r25, 0x24	; 36
   14e58:	a0 e0       	ldi	r26, 0x00	; 0
   14e5a:	ed b7       	in	r30, 0x3d	; 61
   14e5c:	fe b7       	in	r31, 0x3e	; 62
   14e5e:	81 83       	std	Z+1, r24	; 0x01
   14e60:	92 83       	std	Z+2, r25	; 0x02
   14e62:	a3 83       	std	Z+3, r26	; 0x03
   14e64:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   14e68:	1f 82       	std	Y+7, r1	; 0x07
   14e6a:	1e 82       	std	Y+6, r1	; 0x06
   14e6c:	ce 01       	movw	r24, r28
   14e6e:	04 96       	adiw	r24, 0x04	; 4
   14e70:	85 dd       	rcall	.-1270   	; 0x1497c <SS80ControllerPack>
   14e72:	6c 81       	ldd	r22, Y+4	; 0x04
   14e74:	7d 81       	ldd	r23, Y+5	; 0x05
   14e76:	ae 01       	movw	r20, r28
   14e78:	4a 5f       	subi	r20, 0xFA	; 250
   14e7a:	5f 4f       	sbci	r21, 0xFF	; 255
   14e7c:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   14e80:	2c 81       	ldd	r18, Y+4	; 0x04
   14e82:	3d 81       	ldd	r19, Y+5	; 0x05
   14e84:	82 17       	cp	r24, r18
   14e86:	93 07       	cpc	r25, r19
   14e88:	39 f0       	breq	.+14     	; 0x14e98 <SS80_describe+0x58>
   14e8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e8e:	80 ff       	sbrs	r24, 0
   14e90:	3c c0       	rjmp	.+120    	; 0x14f0a <SS80_describe+0xca>
   14e92:	8f ee       	ldi	r24, 0xEF	; 239
   14e94:	93 e2       	ldi	r25, 0x23	; 35
   14e96:	31 c0       	rjmp	.+98     	; 0x14efa <SS80_describe+0xba>
   14e98:	1f 82       	std	Y+7, r1	; 0x07
   14e9a:	1e 82       	std	Y+6, r1	; 0x06
   14e9c:	ce 01       	movw	r24, r28
   14e9e:	04 96       	adiw	r24, 0x04	; 4
   14ea0:	a9 dd       	rcall	.-1198   	; 0x149f4 <SS80UnitPack>
   14ea2:	6c 81       	ldd	r22, Y+4	; 0x04
   14ea4:	7d 81       	ldd	r23, Y+5	; 0x05
   14ea6:	ae 01       	movw	r20, r28
   14ea8:	4a 5f       	subi	r20, 0xFA	; 250
   14eaa:	5f 4f       	sbci	r21, 0xFF	; 255
   14eac:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   14eb0:	2c 81       	ldd	r18, Y+4	; 0x04
   14eb2:	3d 81       	ldd	r19, Y+5	; 0x05
   14eb4:	82 17       	cp	r24, r18
   14eb6:	93 07       	cpc	r25, r19
   14eb8:	39 f0       	breq	.+14     	; 0x14ec8 <SS80_describe+0x88>
   14eba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ebe:	80 ff       	sbrs	r24, 0
   14ec0:	24 c0       	rjmp	.+72     	; 0x14f0a <SS80_describe+0xca>
   14ec2:	82 ed       	ldi	r24, 0xD2	; 210
   14ec4:	93 e2       	ldi	r25, 0x23	; 35
   14ec6:	19 c0       	rjmp	.+50     	; 0x14efa <SS80_describe+0xba>
   14ec8:	80 e0       	ldi	r24, 0x00	; 0
   14eca:	91 e0       	ldi	r25, 0x01	; 1
   14ecc:	9f 83       	std	Y+7, r25	; 0x07
   14ece:	8e 83       	std	Y+6, r24	; 0x06
   14ed0:	ce 01       	movw	r24, r28
   14ed2:	04 96       	adiw	r24, 0x04	; 4
   14ed4:	5b de       	rcall	.-842    	; 0x14b8c <SS80VolumePack>
   14ed6:	6c 81       	ldd	r22, Y+4	; 0x04
   14ed8:	7d 81       	ldd	r23, Y+5	; 0x05
   14eda:	ae 01       	movw	r20, r28
   14edc:	4a 5f       	subi	r20, 0xFA	; 250
   14ede:	5f 4f       	sbci	r21, 0xFF	; 255
   14ee0:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   14ee4:	2c 81       	ldd	r18, Y+4	; 0x04
   14ee6:	3d 81       	ldd	r19, Y+5	; 0x05
   14ee8:	82 17       	cp	r24, r18
   14eea:	93 07       	cpc	r25, r19
   14eec:	99 f0       	breq	.+38     	; 0x14f14 <SS80_describe+0xd4>
   14eee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ef2:	80 ff       	sbrs	r24, 0
   14ef4:	0a c0       	rjmp	.+20     	; 0x14f0a <SS80_describe+0xca>
   14ef6:	83 eb       	ldi	r24, 0xB3	; 179
   14ef8:	93 e2       	ldi	r25, 0x23	; 35
   14efa:	a0 e0       	ldi	r26, 0x00	; 0
   14efc:	ed b7       	in	r30, 0x3d	; 61
   14efe:	fe b7       	in	r31, 0x3e	; 62
   14f00:	81 83       	std	Z+1, r24	; 0x01
   14f02:	92 83       	std	Z+2, r25	; 0x02
   14f04:	a3 83       	std	Z+3, r26	; 0x03
   14f06:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   14f0a:	8e 81       	ldd	r24, Y+6	; 0x06
   14f0c:	9f 81       	ldd	r25, Y+7	; 0x07
   14f0e:	88 27       	eor	r24, r24
   14f10:	90 7d       	andi	r25, 0xD0	; 208
   14f12:	02 c0       	rjmp	.+4      	; 0x14f18 <SS80_describe+0xd8>
   14f14:	80 e0       	ldi	r24, 0x00	; 0
   14f16:	90 e0       	ldi	r25, 0x00	; 0
   14f18:	27 96       	adiw	r28, 0x07	; 7
   14f1a:	e2 e0       	ldi	r30, 0x02	; 2
   14f1c:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00014f20 <SS80_Check_Unit>:
   14f20:	00 d0       	rcall	.+0      	; 0x14f22 <SS80_Check_Unit+0x2>
   14f22:	00 d0       	rcall	.+0      	; 0x14f24 <SS80_Check_Unit+0x4>
   14f24:	1f 92       	push	r1
   14f26:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14f2a:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14f2e:	88 23       	and	r24, r24
   14f30:	c9 f0       	breq	.+50     	; 0x14f64 <SS80_Check_Unit+0x44>
   14f32:	8f 30       	cpi	r24, 0x0F	; 15
   14f34:	b9 f0       	breq	.+46     	; 0x14f64 <SS80_Check_Unit+0x44>
   14f36:	23 81       	ldd	r18, Z+3	; 0x03
   14f38:	34 81       	ldd	r19, Z+4	; 0x04
   14f3a:	20 64       	ori	r18, 0x40	; 64
   14f3c:	34 83       	std	Z+4, r19	; 0x04
   14f3e:	23 83       	std	Z+3, r18	; 0x03
   14f40:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14f44:	90 ff       	sbrs	r25, 0
   14f46:	0f c0       	rjmp	.+30     	; 0x14f66 <SS80_Check_Unit+0x46>
   14f48:	90 e0       	ldi	r25, 0x00	; 0
   14f4a:	ed b7       	in	r30, 0x3d	; 61
   14f4c:	fe b7       	in	r31, 0x3e	; 62
   14f4e:	95 83       	std	Z+5, r25	; 0x05
   14f50:	84 83       	std	Z+4, r24	; 0x04
   14f52:	8b e9       	ldi	r24, 0x9B	; 155
   14f54:	93 e2       	ldi	r25, 0x23	; 35
   14f56:	a0 e0       	ldi	r26, 0x00	; 0
   14f58:	81 83       	std	Z+1, r24	; 0x01
   14f5a:	92 83       	std	Z+2, r25	; 0x02
   14f5c:	a3 83       	std	Z+3, r26	; 0x03
   14f5e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   14f62:	01 c0       	rjmp	.+2      	; 0x14f66 <SS80_Check_Unit+0x46>
   14f64:	85 83       	std	Z+5, r24	; 0x05
   14f66:	0f 90       	pop	r0
   14f68:	0f 90       	pop	r0
   14f6a:	0f 90       	pop	r0
   14f6c:	0f 90       	pop	r0
   14f6e:	0f 90       	pop	r0
   14f70:	08 95       	ret

00014f72 <SS80_Check_Volume>:
   14f72:	00 d0       	rcall	.+0      	; 0x14f74 <SS80_Check_Volume+0x2>
   14f74:	00 d0       	rcall	.+0      	; 0x14f76 <SS80_Check_Volume+0x4>
   14f76:	1f 92       	push	r1
   14f78:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14f7c:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14f80:	88 23       	and	r24, r24
   14f82:	b9 f0       	breq	.+46     	; 0x14fb2 <SS80_Check_Volume+0x40>
   14f84:	23 81       	ldd	r18, Z+3	; 0x03
   14f86:	34 81       	ldd	r19, Z+4	; 0x04
   14f88:	20 64       	ori	r18, 0x40	; 64
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   14f8a:	34 83       	std	Z+4, r19	; 0x04
   14f8c:	23 83       	std	Z+3, r18	; 0x03
   14f8e:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14f92:	90 ff       	sbrs	r25, 0
   14f94:	0f c0       	rjmp	.+30     	; 0x14fb4 <SS80_Check_Volume+0x42>
   14f96:	90 e0       	ldi	r25, 0x00	; 0
   14f98:	ed b7       	in	r30, 0x3d	; 61
   14f9a:	fe b7       	in	r31, 0x3e	; 62
   14f9c:	95 83       	std	Z+5, r25	; 0x05
   14f9e:	84 83       	std	Z+4, r24	; 0x04
   14fa0:	81 e8       	ldi	r24, 0x81	; 129
   14fa2:	93 e2       	ldi	r25, 0x23	; 35
   14fa4:	a0 e0       	ldi	r26, 0x00	; 0
   14fa6:	81 83       	std	Z+1, r24	; 0x01
   14fa8:	92 83       	std	Z+2, r25	; 0x02
   14faa:	a3 83       	std	Z+3, r26	; 0x03
   14fac:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   14fb0:	01 c0       	rjmp	.+2      	; 0x14fb4 <SS80_Check_Volume+0x42>
   14fb2:	16 82       	std	Z+6, r1	; 0x06
   14fb4:	0f 90       	pop	r0
   14fb6:	0f 90       	pop	r0
   14fb8:	0f 90       	pop	r0
   14fba:	0f 90       	pop	r0
   14fbc:	0f 90       	pop	r0
   14fbe:	08 95       	ret

00014fc0 <SS80_Command_State>:
   14fc0:	2f 92       	push	r2
   14fc2:	3f 92       	push	r3
   14fc4:	4f 92       	push	r4
   14fc6:	6f 92       	push	r6
   14fc8:	7f 92       	push	r7
   14fca:	8f 92       	push	r8
   14fcc:	af 92       	push	r10
   14fce:	bf 92       	push	r11
   14fd0:	cf 92       	push	r12
   14fd2:	ef 92       	push	r14
   14fd4:	ff 92       	push	r15
   14fd6:	0f 93       	push	r16
   14fd8:	1f 93       	push	r17
   14fda:	cf 93       	push	r28
   14fdc:	df 93       	push	r29
   14fde:	cd b7       	in	r28, 0x3d	; 61
   14fe0:	de b7       	in	r29, 0x3e	; 62
   14fe2:	66 97       	sbiw	r28, 0x16	; 22
   14fe4:	0f b6       	in	r0, 0x3f	; 63
   14fe6:	f8 94       	cli
   14fe8:	de bf       	out	0x3e, r29	; 62
   14fea:	0f be       	out	0x3f, r0	; 63
   14fec:	cd bf       	out	0x3d, r28	; 61
   14fee:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14ff2:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14ff6:	81 81       	ldd	r24, Z+1	; 0x01
   14ff8:	90 e0       	ldi	r25, 0x00	; 0
   14ffa:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
   14ffe:	80 e0       	ldi	r24, 0x00	; 0
   15000:	91 e0       	ldi	r25, 0x01	; 1
   15002:	99 87       	std	Y+9, r25	; 0x09
   15004:	88 87       	std	Y+8, r24	; 0x08
   15006:	ae 01       	movw	r20, r28
   15008:	48 5f       	subi	r20, 0xF8	; 248
   1500a:	5f 4f       	sbci	r21, 0xFF	; 255
   1500c:	60 e0       	ldi	r22, 0x00	; 0
   1500e:	72 e0       	ldi	r23, 0x02	; 2
   15010:	86 ef       	ldi	r24, 0xF6	; 246
   15012:	9c e1       	ldi	r25, 0x1C	; 28
   15014:	0e 94 a7 8c 	call	0x1194e	; 0x1194e <gpib_read_str>
   15018:	9b 87       	std	Y+11, r25	; 0x0b
   1501a:	8a 87       	std	Y+10, r24	; 0x0a
   1501c:	88 85       	ldd	r24, Y+8	; 0x08
   1501e:	99 85       	ldd	r25, Y+9	; 0x09
   15020:	9c 01       	movw	r18, r24
   15022:	22 27       	eor	r18, r18
   15024:	30 7d       	andi	r19, 0xD0	; 208
   15026:	23 2b       	or	r18, r19
   15028:	79 f0       	breq	.+30     	; 0x15048 <SS80_Command_State+0x88>
   1502a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1502e:	80 ff       	sbrs	r24, 0
   15030:	21 c2       	rjmp	.+1090   	; 0x15474 <SS80_Command_State+0x4b4>
   15032:	8b e5       	ldi	r24, 0x5B	; 91
   15034:	93 e2       	ldi	r25, 0x23	; 35
   15036:	a0 e0       	ldi	r26, 0x00	; 0
   15038:	ed b7       	in	r30, 0x3d	; 61
   1503a:	fe b7       	in	r31, 0x3e	; 62
   1503c:	81 83       	std	Z+1, r24	; 0x01
   1503e:	92 83       	std	Z+2, r25	; 0x02
   15040:	a3 83       	std	Z+3, r26	; 0x03
   15042:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15046:	16 c2       	rjmp	.+1068   	; 0x15474 <SS80_Command_State+0x4b4>
   15048:	2a 85       	ldd	r18, Y+10	; 0x0a
   1504a:	3b 85       	ldd	r19, Y+11	; 0x0b
   1504c:	23 2b       	or	r18, r19
   1504e:	09 f4       	brne	.+2      	; 0x15052 <SS80_Command_State+0x92>
   15050:	16 c2       	rjmp	.+1068   	; 0x1547e <SS80_Command_State+0x4be>
   15052:	90 fd       	sbrc	r25, 0
   15054:	0e c0       	rjmp	.+28     	; 0x15072 <SS80_Command_State+0xb2>
   15056:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1505a:	80 ff       	sbrs	r24, 0
   1505c:	0a c0       	rjmp	.+20     	; 0x15072 <SS80_Command_State+0xb2>
   1505e:	82 e4       	ldi	r24, 0x42	; 66
   15060:	93 e2       	ldi	r25, 0x23	; 35
   15062:	a0 e0       	ldi	r26, 0x00	; 0
   15064:	ed b7       	in	r30, 0x3d	; 61
   15066:	fe b7       	in	r31, 0x3e	; 62
   15068:	81 83       	std	Z+1, r24	; 0x01
   1506a:	92 83       	std	Z+2, r25	; 0x02
   1506c:	a3 83       	std	Z+3, r26	; 0x03
   1506e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15072:	e1 2c       	mov	r14, r1
   15074:	f1 2c       	mov	r15, r1
   15076:	86 e4       	ldi	r24, 0x46	; 70
   15078:	92 e2       	ldi	r25, 0x22	; 34
   1507a:	9c 01       	movw	r18, r24
   1507c:	40 e0       	ldi	r20, 0x00	; 0
   1507e:	2e 87       	std	Y+14, r18	; 0x0e
   15080:	3f 87       	std	Y+15, r19	; 0x0f
   15082:	48 8b       	std	Y+16, r20	; 0x10
   15084:	8b e6       	ldi	r24, 0x6B	; 107
   15086:	92 e2       	ldi	r25, 0x22	; 34
   15088:	9c 01       	movw	r18, r24
   1508a:	40 e0       	ldi	r20, 0x00	; 0
   1508c:	29 8b       	std	Y+17, r18	; 0x11
   1508e:	3a 8b       	std	Y+18, r19	; 0x12
   15090:	4b 8b       	std	Y+19, r20	; 0x13
   15092:	85 e8       	ldi	r24, 0x85	; 133
   15094:	92 e2       	ldi	r25, 0x22	; 34
   15096:	9c 01       	movw	r18, r24
   15098:	40 e0       	ldi	r20, 0x00	; 0
   1509a:	2c 8b       	std	Y+20, r18	; 0x14
   1509c:	3d 8b       	std	Y+21, r19	; 0x15
   1509e:	4e 8b       	std	Y+22, r20	; 0x16
   150a0:	8b e9       	ldi	r24, 0x9B	; 155
   150a2:	92 e2       	ldi	r25, 0x22	; 34
   150a4:	3c 01       	movw	r6, r24
   150a6:	81 2c       	mov	r8, r1
   150a8:	89 ea       	ldi	r24, 0xA9	; 169
   150aa:	92 e2       	ldi	r25, 0x22	; 34
   150ac:	5c 01       	movw	r10, r24
   150ae:	c1 2c       	mov	r12, r1
   150b0:	85 ec       	ldi	r24, 0xC5	; 197
   150b2:	92 e2       	ldi	r25, 0x22	; 34
   150b4:	1c 01       	movw	r2, r24
   150b6:	41 2c       	mov	r4, r1
   150b8:	2a 85       	ldd	r18, Y+10	; 0x0a
   150ba:	3b 85       	ldd	r19, Y+11	; 0x0b
   150bc:	87 01       	movw	r16, r14
   150be:	e2 16       	cp	r14, r18
   150c0:	f3 06       	cpc	r15, r19
   150c2:	0c f0       	brlt	.+2      	; 0x150c6 <SS80_Command_State+0x106>
   150c4:	b6 c1       	rjmp	.+876    	; 0x15432 <SS80_Command_State+0x472>
   150c6:	0f 5f       	subi	r16, 0xFF	; 255
   150c8:	1f 4f       	sbci	r17, 0xFF	; 255
   150ca:	f7 01       	movw	r30, r14
   150cc:	ea 50       	subi	r30, 0x0A	; 10
   150ce:	f3 4e       	sbci	r31, 0xE3	; 227
   150d0:	80 81       	ld	r24, Z
   150d2:	28 2f       	mov	r18, r24
   150d4:	30 e0       	ldi	r19, 0x00	; 0
   150d6:	a9 01       	movw	r20, r18
   150d8:	40 52       	subi	r20, 0x20	; 32
   150da:	51 09       	sbc	r21, r1
   150dc:	40 31       	cpi	r20, 0x10	; 16
   150de:	51 05       	cpc	r21, r1
   150e0:	98 f4       	brcc	.+38     	; 0x15108 <SS80_Command_State+0x148>
   150e2:	80 52       	subi	r24, 0x20	; 32
   150e4:	1d df       	rcall	.-454    	; 0x14f20 <SS80_Check_Unit>
   150e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150ea:	85 ff       	sbrs	r24, 5
   150ec:	a0 c1       	rjmp	.+832    	; 0x1542e <SS80_Command_State+0x46e>
   150ee:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   150f2:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   150f6:	85 81       	ldd	r24, Z+5	; 0x05
   150f8:	90 e0       	ldi	r25, 0x00	; 0
   150fa:	ed b7       	in	r30, 0x3d	; 61
   150fc:	fe b7       	in	r31, 0x3e	; 62
   150fe:	95 83       	std	Z+5, r25	; 0x05
   15100:	84 83       	std	Z+4, r24	; 0x04
   15102:	8c e2       	ldi	r24, 0x2C	; 44
   15104:	93 e2       	ldi	r25, 0x23	; 35
   15106:	19 c0       	rjmp	.+50     	; 0x1513a <SS80_Command_State+0x17a>
   15108:	a9 01       	movw	r20, r18
   1510a:	40 54       	subi	r20, 0x40	; 64
   1510c:	51 09       	sbc	r21, r1
   1510e:	40 31       	cpi	r20, 0x10	; 16
   15110:	51 05       	cpc	r21, r1
   15112:	d0 f4       	brcc	.+52     	; 0x15148 <SS80_Command_State+0x188>
   15114:	80 54       	subi	r24, 0x40	; 64
   15116:	2d df       	rcall	.-422    	; 0x14f72 <SS80_Check_Volume>
   15118:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1511c:	85 ff       	sbrs	r24, 5
   1511e:	87 c1       	rjmp	.+782    	; 0x1542e <SS80_Command_State+0x46e>
   15120:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15124:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15128:	86 81       	ldd	r24, Z+6	; 0x06
   1512a:	90 e0       	ldi	r25, 0x00	; 0
   1512c:	ed b7       	in	r30, 0x3d	; 61
   1512e:	fe b7       	in	r31, 0x3e	; 62
   15130:	95 83       	std	Z+5, r25	; 0x05
   15132:	84 83       	std	Z+4, r24	; 0x04
   15134:	23 e1       	ldi	r18, 0x13	; 19
   15136:	33 e2       	ldi	r19, 0x23	; 35
   15138:	c9 01       	movw	r24, r18
   1513a:	a0 e0       	ldi	r26, 0x00	; 0
   1513c:	81 83       	std	Z+1, r24	; 0x01
   1513e:	92 83       	std	Z+2, r25	; 0x02
   15140:	a3 83       	std	Z+3, r26	; 0x03
   15142:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15146:	73 c1       	rjmp	.+742    	; 0x1542e <SS80_Command_State+0x46e>
   15148:	21 15       	cp	r18, r1
   1514a:	31 05       	cpc	r19, r1
   1514c:	79 f4       	brne	.+30     	; 0x1516c <SS80_Command_State+0x1ac>
   1514e:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15152:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15156:	81 e0       	ldi	r24, 0x01	; 1
   15158:	90 e0       	ldi	r25, 0x00	; 0
   1515a:	91 83       	std	Z+1, r25	; 0x01
   1515c:	80 83       	st	Z, r24
   1515e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15162:	85 ff       	sbrs	r24, 5
   15164:	66 c1       	rjmp	.+716    	; 0x15432 <SS80_Command_State+0x472>
   15166:	8b ef       	ldi	r24, 0xFB	; 251
   15168:	92 e2       	ldi	r25, 0x22	; 34
   1516a:	0f c0       	rjmp	.+30     	; 0x1518a <SS80_Command_State+0x1ca>
   1516c:	22 30       	cpi	r18, 0x02	; 2
   1516e:	31 05       	cpc	r19, r1
   15170:	a9 f4       	brne	.+42     	; 0x1519c <SS80_Command_State+0x1dc>
   15172:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15176:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   1517a:	31 83       	std	Z+1, r19	; 0x01
   1517c:	20 83       	st	Z, r18
   1517e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15182:	85 ff       	sbrs	r24, 5
   15184:	56 c1       	rjmp	.+684    	; 0x15432 <SS80_Command_State+0x472>
   15186:	82 ee       	ldi	r24, 0xE2	; 226
   15188:	92 e2       	ldi	r25, 0x22	; 34
   1518a:	a0 e0       	ldi	r26, 0x00	; 0
   1518c:	ed b7       	in	r30, 0x3d	; 61
   1518e:	fe b7       	in	r31, 0x3e	; 62
   15190:	81 83       	std	Z+1, r24	; 0x01
   15192:	92 83       	std	Z+2, r25	; 0x02
   15194:	a3 83       	std	Z+3, r26	; 0x03
   15196:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1519a:	4b c1       	rjmp	.+662    	; 0x15432 <SS80_Command_State+0x472>
   1519c:	20 31       	cpi	r18, 0x10	; 16
   1519e:	31 05       	cpc	r19, r1
   151a0:	b1 f5       	brne	.+108    	; 0x1520e <SS80_Command_State+0x24e>
   151a2:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <SS80s>
   151a6:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <SS80s+0x1>
   151aa:	3d 87       	std	Y+13, r19	; 0x0d
   151ac:	2c 87       	std	Y+12, r18	; 0x0c
   151ae:	46 e0       	ldi	r20, 0x06	; 6
   151b0:	50 e0       	ldi	r21, 0x00	; 0
   151b2:	b8 01       	movw	r22, r16
   151b4:	86 ef       	ldi	r24, 0xF6	; 246
   151b6:	9c e1       	ldi	r25, 0x1C	; 28
   151b8:	0e 94 66 bf 	call	0x17ecc	; 0x17ecc <B2V_MSB>
   151bc:	ec 85       	ldd	r30, Y+12	; 0x0c
   151be:	fd 85       	ldd	r31, Y+13	; 0x0d
   151c0:	67 83       	std	Z+7, r22	; 0x07
   151c2:	70 87       	std	Z+8, r23	; 0x08
   151c4:	81 87       	std	Z+9, r24	; 0x09
   151c6:	92 87       	std	Z+10, r25	; 0x0a
   151c8:	87 01       	movw	r16, r14
   151ca:	09 5f       	subi	r16, 0xF9	; 249
   151cc:	1f 4f       	sbci	r17, 0xFF	; 255
   151ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151d2:	85 ff       	sbrs	r24, 5
   151d4:	2c c1       	rjmp	.+600    	; 0x1542e <SS80_Command_State+0x46e>
   151d6:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <SS80s>
   151da:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <SS80s+0x1>
   151de:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <SS80p>
   151e2:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <SS80p+0x1>
   151e6:	fc 01       	movw	r30, r24
   151e8:	a0 89       	ldd	r26, Z+16	; 0x10
   151ea:	b1 89       	ldd	r27, Z+17	; 0x11
   151ec:	f9 01       	movw	r30, r18
   151ee:	27 81       	ldd	r18, Z+7	; 0x07
   151f0:	30 85       	ldd	r19, Z+8	; 0x08
   151f2:	41 85       	ldd	r20, Z+9	; 0x09
   151f4:	52 85       	ldd	r21, Z+10	; 0x0a
   151f6:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
   151fa:	ed b7       	in	r30, 0x3d	; 61
   151fc:	fe b7       	in	r31, 0x3e	; 62
   151fe:	64 83       	std	Z+4, r22	; 0x04
   15200:	75 83       	std	Z+5, r23	; 0x05
   15202:	86 83       	std	Z+6, r24	; 0x06
   15204:	97 83       	std	Z+7, r25	; 0x07
   15206:	21 82       	std	Z+1, r2	; 0x01
   15208:	32 82       	std	Z+2, r3	; 0x02
   1520a:	43 82       	std	Z+3, r4	; 0x03
   1520c:	2e c0       	rjmp	.+92     	; 0x1526a <SS80_Command_State+0x2aa>
   1520e:	28 31       	cpi	r18, 0x18	; 24
   15210:	31 05       	cpc	r19, r1
   15212:	71 f5       	brne	.+92     	; 0x15270 <SS80_Command_State+0x2b0>
   15214:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <SS80s>
   15218:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <SS80s+0x1>
   1521c:	3d 87       	std	Y+13, r19	; 0x0d
   1521e:	2c 87       	std	Y+12, r18	; 0x0c
   15220:	44 e0       	ldi	r20, 0x04	; 4
   15222:	50 e0       	ldi	r21, 0x00	; 0
   15224:	b8 01       	movw	r22, r16
   15226:	86 ef       	ldi	r24, 0xF6	; 246
   15228:	9c e1       	ldi	r25, 0x1C	; 28
   1522a:	0e 94 66 bf 	call	0x17ecc	; 0x17ecc <B2V_MSB>
   1522e:	ec 85       	ldd	r30, Y+12	; 0x0c
   15230:	fd 85       	ldd	r31, Y+13	; 0x0d
   15232:	63 87       	std	Z+11, r22	; 0x0b
   15234:	74 87       	std	Z+12, r23	; 0x0c
   15236:	85 87       	std	Z+13, r24	; 0x0d
   15238:	96 87       	std	Z+14, r25	; 0x0e
   1523a:	87 01       	movw	r16, r14
   1523c:	0b 5f       	subi	r16, 0xFB	; 251
   1523e:	1f 4f       	sbci	r17, 0xFF	; 255
   15240:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15244:	85 ff       	sbrs	r24, 5
   15246:	f3 c0       	rjmp	.+486    	; 0x1542e <SS80_Command_State+0x46e>
   15248:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1524c:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15250:	83 85       	ldd	r24, Z+11	; 0x0b
   15252:	94 85       	ldd	r25, Z+12	; 0x0c
   15254:	a5 85       	ldd	r26, Z+13	; 0x0d
   15256:	b6 85       	ldd	r27, Z+14	; 0x0e
   15258:	ed b7       	in	r30, 0x3d	; 61
   1525a:	fe b7       	in	r31, 0x3e	; 62
   1525c:	84 83       	std	Z+4, r24	; 0x04
   1525e:	95 83       	std	Z+5, r25	; 0x05
   15260:	a6 83       	std	Z+6, r26	; 0x06
   15262:	b7 83       	std	Z+7, r27	; 0x07
   15264:	a1 82       	std	Z+1, r10	; 0x01
   15266:	b2 82       	std	Z+2, r11	; 0x02
   15268:	c3 82       	std	Z+3, r12	; 0x03
   1526a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1526e:	df c0       	rjmp	.+446    	; 0x1542e <SS80_Command_State+0x46e>
   15270:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15274:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15278:	24 33       	cpi	r18, 0x34	; 52
   1527a:	31 05       	cpc	r19, r1
   1527c:	41 f4       	brne	.+16     	; 0x1528e <SS80_Command_State+0x2ce>
   1527e:	85 ff       	sbrs	r24, 5
   15280:	d6 c0       	rjmp	.+428    	; 0x1542e <SS80_Command_State+0x46e>
   15282:	ed b7       	in	r30, 0x3d	; 61
   15284:	fe b7       	in	r31, 0x3e	; 62
   15286:	61 82       	std	Z+1, r6	; 0x01
   15288:	72 82       	std	Z+2, r7	; 0x02
   1528a:	83 82       	std	Z+3, r8	; 0x03
   1528c:	2b c0       	rjmp	.+86     	; 0x152e4 <SS80_Command_State+0x324>
   1528e:	29 33       	cpi	r18, 0x39	; 57
   15290:	31 05       	cpc	r19, r1
   15292:	49 f4       	brne	.+18     	; 0x152a6 <SS80_Command_State+0x2e6>
   15294:	87 01       	movw	r16, r14
   15296:	0d 5f       	subi	r16, 0xFD	; 253
   15298:	1f 4f       	sbci	r17, 0xFF	; 255
   1529a:	85 ff       	sbrs	r24, 5
   1529c:	c8 c0       	rjmp	.+400    	; 0x1542e <SS80_Command_State+0x46e>
   1529e:	2c 89       	ldd	r18, Y+20	; 0x14
   152a0:	3d 89       	ldd	r19, Y+21	; 0x15
   152a2:	4e 89       	ldd	r20, Y+22	; 0x16
   152a4:	1a c0       	rjmp	.+52     	; 0x152da <SS80_Command_State+0x31a>
   152a6:	2b 33       	cpi	r18, 0x3B	; 59
   152a8:	31 05       	cpc	r19, r1
   152aa:	49 f4       	brne	.+18     	; 0x152be <SS80_Command_State+0x2fe>
   152ac:	87 01       	movw	r16, r14
   152ae:	0e 5f       	subi	r16, 0xFE	; 254
   152b0:	1f 4f       	sbci	r17, 0xFF	; 255
   152b2:	85 ff       	sbrs	r24, 5
   152b4:	bc c0       	rjmp	.+376    	; 0x1542e <SS80_Command_State+0x46e>
   152b6:	29 89       	ldd	r18, Y+17	; 0x11
   152b8:	3a 89       	ldd	r19, Y+18	; 0x12
   152ba:	4b 89       	ldd	r20, Y+19	; 0x13
   152bc:	0e c0       	rjmp	.+28     	; 0x152da <SS80_Command_State+0x31a>
   152be:	28 34       	cpi	r18, 0x48	; 72
   152c0:	31 05       	cpc	r19, r1
   152c2:	99 f4       	brne	.+38     	; 0x152ea <SS80_Command_State+0x32a>
   152c4:	87 01       	movw	r16, r14
   152c6:	0e 5f       	subi	r16, 0xFE	; 254
   152c8:	1f 4f       	sbci	r17, 0xFF	; 255
   152ca:	80 73       	andi	r24, 0x30	; 48
   152cc:	99 27       	eor	r25, r25
   152ce:	89 2b       	or	r24, r25
   152d0:	09 f4       	brne	.+2      	; 0x152d4 <SS80_Command_State+0x314>
   152d2:	ad c0       	rjmp	.+346    	; 0x1542e <SS80_Command_State+0x46e>
   152d4:	2e 85       	ldd	r18, Y+14	; 0x0e
   152d6:	3f 85       	ldd	r19, Y+15	; 0x0f
   152d8:	48 89       	ldd	r20, Y+16	; 0x10
   152da:	ed b7       	in	r30, 0x3d	; 61
   152dc:	fe b7       	in	r31, 0x3e	; 62
   152de:	21 83       	std	Z+1, r18	; 0x01
   152e0:	32 83       	std	Z+2, r19	; 0x02
   152e2:	43 83       	std	Z+3, r20	; 0x03
   152e4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   152e8:	a2 c0       	rjmp	.+324    	; 0x1542e <SS80_Command_State+0x46e>
   152ea:	24 30       	cpi	r18, 0x04	; 4
   152ec:	31 05       	cpc	r19, r1
   152ee:	41 f4       	brne	.+16     	; 0x15300 <SS80_Command_State+0x340>
   152f0:	80 73       	andi	r24, 0x30	; 48
   152f2:	99 27       	eor	r25, r25
   152f4:	89 2b       	or	r24, r25
   152f6:	09 f4       	brne	.+2      	; 0x152fa <SS80_Command_State+0x33a>
   152f8:	9c c0       	rjmp	.+312    	; 0x15432 <SS80_Command_State+0x472>
   152fa:	85 e2       	ldi	r24, 0x25	; 37
   152fc:	92 e2       	ldi	r25, 0x22	; 34
   152fe:	45 cf       	rjmp	.-374    	; 0x1518a <SS80_Command_State+0x1ca>
   15300:	2e 30       	cpi	r18, 0x0E	; 14
   15302:	31 05       	cpc	r19, r1
   15304:	29 f4       	brne	.+10     	; 0x15310 <SS80_Command_State+0x350>
   15306:	85 ff       	sbrs	r24, 5
   15308:	94 c0       	rjmp	.+296    	; 0x15432 <SS80_Command_State+0x472>
   1530a:	8f e0       	ldi	r24, 0x0F	; 15
   1530c:	92 e2       	ldi	r25, 0x22	; 34
   1530e:	3d cf       	rjmp	.-390    	; 0x1518a <SS80_Command_State+0x1ca>
   15310:	2f 30       	cpi	r18, 0x0F	; 15
   15312:	31 05       	cpc	r19, r1
   15314:	29 f4       	brne	.+10     	; 0x15320 <SS80_Command_State+0x360>
   15316:	85 ff       	sbrs	r24, 5
   15318:	8c c0       	rjmp	.+280    	; 0x15432 <SS80_Command_State+0x472>
   1531a:	82 ef       	ldi	r24, 0xF2	; 242
   1531c:	91 e2       	ldi	r25, 0x21	; 33
   1531e:	35 cf       	rjmp	.-406    	; 0x1518a <SS80_Command_State+0x1ca>
   15320:	21 33       	cpi	r18, 0x31	; 49
   15322:	31 05       	cpc	r19, r1
   15324:	59 f4       	brne	.+22     	; 0x1533c <SS80_Command_State+0x37c>
   15326:	87 01       	movw	r16, r14
   15328:	0d 5f       	subi	r16, 0xFD	; 253
   1532a:	1f 4f       	sbci	r17, 0xFF	; 255
   1532c:	80 73       	andi	r24, 0x30	; 48
   1532e:	99 27       	eor	r25, r25
   15330:	89 2b       	or	r24, r25
   15332:	09 f4       	brne	.+2      	; 0x15336 <SS80_Command_State+0x376>
   15334:	7e c0       	rjmp	.+252    	; 0x15432 <SS80_Command_State+0x472>
   15336:	86 ed       	ldi	r24, 0xD6	; 214
   15338:	91 e2       	ldi	r25, 0x21	; 33
   1533a:	27 cf       	rjmp	.-434    	; 0x1518a <SS80_Command_State+0x1ca>
   1533c:	25 33       	cpi	r18, 0x35	; 53
   1533e:	31 05       	cpc	r19, r1
   15340:	69 f4       	brne	.+26     	; 0x1535c <SS80_Command_State+0x39c>
   15342:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15346:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   1534a:	24 e0       	ldi	r18, 0x04	; 4
   1534c:	30 e0       	ldi	r19, 0x00	; 0
   1534e:	31 83       	std	Z+1, r19	; 0x01
   15350:	20 83       	st	Z, r18
   15352:	85 ff       	sbrs	r24, 5
   15354:	6e c0       	rjmp	.+220    	; 0x15432 <SS80_Command_State+0x472>
   15356:	85 ec       	ldi	r24, 0xC5	; 197
   15358:	91 e2       	ldi	r25, 0x21	; 33
   1535a:	17 cf       	rjmp	.-466    	; 0x1518a <SS80_Command_State+0x1ca>
   1535c:	27 33       	cpi	r18, 0x37	; 55
   1535e:	31 05       	cpc	r19, r1
   15360:	59 f4       	brne	.+22     	; 0x15378 <SS80_Command_State+0x3b8>
   15362:	87 01       	movw	r16, r14
   15364:	0d 5f       	subi	r16, 0xFD	; 253
   15366:	1f 4f       	sbci	r17, 0xFF	; 255
   15368:	80 73       	andi	r24, 0x30	; 48
   1536a:	99 27       	eor	r25, r25
   1536c:	89 2b       	or	r24, r25
   1536e:	09 f4       	brne	.+2      	; 0x15372 <SS80_Command_State+0x3b2>
   15370:	60 c0       	rjmp	.+192    	; 0x15432 <SS80_Command_State+0x472>
   15372:	87 ea       	ldi	r24, 0xA7	; 167
   15374:	91 e2       	ldi	r25, 0x21	; 33
   15376:	09 cf       	rjmp	.-494    	; 0x1518a <SS80_Command_State+0x1ca>
   15378:	2e 33       	cpi	r18, 0x3E	; 62
   1537a:	31 05       	cpc	r19, r1
   1537c:	c1 f4       	brne	.+48     	; 0x153ae <SS80_Command_State+0x3ee>
   1537e:	80 73       	andi	r24, 0x30	; 48
   15380:	99 27       	eor	r25, r25
   15382:	89 2b       	or	r24, r25
   15384:	81 f0       	breq	.+32     	; 0x153a6 <SS80_Command_State+0x3e6>
   15386:	88 e8       	ldi	r24, 0x88	; 136
   15388:	91 e2       	ldi	r25, 0x21	; 33
   1538a:	a0 e0       	ldi	r26, 0x00	; 0
   1538c:	ed b7       	in	r30, 0x3d	; 61
   1538e:	fe b7       	in	r31, 0x3e	; 62
   15390:	81 83       	std	Z+1, r24	; 0x01
   15392:	92 83       	std	Z+2, r25	; 0x02
   15394:	a3 83       	std	Z+3, r26	; 0x03
   15396:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1539a:	6f e6       	ldi	r22, 0x6F	; 111
   1539c:	70 e1       	ldi	r23, 0x10	; 16
   1539e:	c8 01       	movw	r24, r16
   153a0:	8a 50       	subi	r24, 0x0A	; 10
   153a2:	93 4e       	sbci	r25, 0xE3	; 227
   153a4:	69 dc       	rcall	.-1838   	; 0x14c78 <SS80_display_extended_status>
   153a6:	87 01       	movw	r16, r14
   153a8:	07 5f       	subi	r16, 0xF7	; 247
   153aa:	1f 4f       	sbci	r17, 0xFF	; 255
   153ac:	42 c0       	rjmp	.+132    	; 0x15432 <SS80_Command_State+0x472>
   153ae:	2c 34       	cpi	r18, 0x4C	; 76
   153b0:	31 05       	cpc	r19, r1
   153b2:	39 f4       	brne	.+14     	; 0x153c2 <SS80_Command_State+0x402>
   153b4:	80 73       	andi	r24, 0x30	; 48
   153b6:	99 27       	eor	r25, r25
   153b8:	89 2b       	or	r24, r25
   153ba:	d9 f1       	breq	.+118    	; 0x15432 <SS80_Command_State+0x472>
   153bc:	8d e6       	ldi	r24, 0x6D	; 109
   153be:	91 e2       	ldi	r25, 0x21	; 33
   153c0:	e4 ce       	rjmp	.-568    	; 0x1518a <SS80_Command_State+0x1ca>
   153c2:	2d 34       	cpi	r18, 0x4D	; 77
   153c4:	31 05       	cpc	r19, r1
   153c6:	39 f4       	brne	.+14     	; 0x153d6 <SS80_Command_State+0x416>
   153c8:	80 73       	andi	r24, 0x30	; 48
   153ca:	99 27       	eor	r25, r25
   153cc:	89 2b       	or	r24, r25
   153ce:	89 f1       	breq	.+98     	; 0x15432 <SS80_Command_State+0x472>
   153d0:	84 e5       	ldi	r24, 0x54	; 84
   153d2:	91 e2       	ldi	r25, 0x21	; 33
   153d4:	da ce       	rjmp	.-588    	; 0x1518a <SS80_Command_State+0x1ca>
   153d6:	2d 30       	cpi	r18, 0x0D	; 13
   153d8:	31 05       	cpc	r19, r1
   153da:	69 f4       	brne	.+26     	; 0x153f6 <SS80_Command_State+0x436>
   153dc:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   153e0:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   153e4:	23 e0       	ldi	r18, 0x03	; 3
   153e6:	30 e0       	ldi	r19, 0x00	; 0
   153e8:	31 83       	std	Z+1, r19	; 0x01
   153ea:	20 83       	st	Z, r18
   153ec:	85 ff       	sbrs	r24, 5
   153ee:	21 c0       	rjmp	.+66     	; 0x15432 <SS80_Command_State+0x472>
   153f0:	8d e3       	ldi	r24, 0x3D	; 61
   153f2:	91 e2       	ldi	r25, 0x21	; 33
   153f4:	ca ce       	rjmp	.-620    	; 0x1518a <SS80_Command_State+0x1ca>
   153f6:	23 33       	cpi	r18, 0x33	; 51
   153f8:	31 05       	cpc	r19, r1
   153fa:	51 f4       	brne	.+20     	; 0x15410 <SS80_Command_State+0x450>
   153fc:	87 01       	movw	r16, r14
   153fe:	0c 5f       	subi	r16, 0xFC	; 252
   15400:	1f 4f       	sbci	r17, 0xFF	; 255
   15402:	80 73       	andi	r24, 0x30	; 48
   15404:	99 27       	eor	r25, r25
   15406:	89 2b       	or	r24, r25
   15408:	a1 f0       	breq	.+40     	; 0x15432 <SS80_Command_State+0x472>
   1540a:	8a e1       	ldi	r24, 0x1A	; 26
   1540c:	91 e2       	ldi	r25, 0x21	; 33
   1540e:	bd ce       	rjmp	.-646    	; 0x1518a <SS80_Command_State+0x1ca>
   15410:	80 ff       	sbrs	r24, 0
   15412:	28 c0       	rjmp	.+80     	; 0x15464 <SS80_Command_State+0x4a4>
   15414:	ed b7       	in	r30, 0x3d	; 61
   15416:	fe b7       	in	r31, 0x3e	; 62
   15418:	35 83       	std	Z+5, r19	; 0x05
   1541a:	24 83       	std	Z+4, r18	; 0x04
   1541c:	8a ef       	ldi	r24, 0xFA	; 250
   1541e:	90 e2       	ldi	r25, 0x20	; 32
   15420:	a0 e0       	ldi	r26, 0x00	; 0
   15422:	81 83       	std	Z+1, r24	; 0x01
   15424:	92 83       	std	Z+2, r25	; 0x02
   15426:	a3 83       	std	Z+3, r26	; 0x03
   15428:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1542c:	02 c0       	rjmp	.+4      	; 0x15432 <SS80_Command_State+0x472>
   1542e:	78 01       	movw	r14, r16
   15430:	43 ce       	rjmp	.-890    	; 0x150b8 <SS80_Command_State+0xf8>
   15432:	8a 85       	ldd	r24, Y+10	; 0x0a
   15434:	9b 85       	ldd	r25, Y+11	; 0x0b
   15436:	08 17       	cp	r16, r24
   15438:	19 07       	cpc	r17, r25
   1543a:	a1 f0       	breq	.+40     	; 0x15464 <SS80_Command_State+0x4a4>
   1543c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15440:	80 ff       	sbrs	r24, 0
   15442:	10 c0       	rjmp	.+32     	; 0x15464 <SS80_Command_State+0x4a4>
   15444:	2a 85       	ldd	r18, Y+10	; 0x0a
   15446:	3b 85       	ldd	r19, Y+11	; 0x0b
   15448:	ed b7       	in	r30, 0x3d	; 61
   1544a:	fe b7       	in	r31, 0x3e	; 62
   1544c:	37 83       	std	Z+7, r19	; 0x07
   1544e:	26 83       	std	Z+6, r18	; 0x06
   15450:	15 83       	std	Z+5, r17	; 0x05
   15452:	04 83       	std	Z+4, r16	; 0x04
   15454:	82 ec       	ldi	r24, 0xC2	; 194
   15456:	90 e2       	ldi	r25, 0x20	; 32
   15458:	a0 e0       	ldi	r26, 0x00	; 0
   1545a:	81 83       	std	Z+1, r24	; 0x01
   1545c:	92 83       	std	Z+2, r25	; 0x02
   1545e:	a3 83       	std	Z+3, r26	; 0x03
   15460:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15464:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15468:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1546c:	81 81       	ldd	r24, Z+1	; 0x01
   1546e:	90 e0       	ldi	r25, 0x00	; 0
   15470:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   15474:	88 85       	ldd	r24, Y+8	; 0x08
   15476:	99 85       	ldd	r25, Y+9	; 0x09
   15478:	88 27       	eor	r24, r24
   1547a:	90 7d       	andi	r25, 0xD0	; 208
   1547c:	02 c0       	rjmp	.+4      	; 0x15482 <SS80_Command_State+0x4c2>
   1547e:	80 e0       	ldi	r24, 0x00	; 0
   15480:	90 e0       	ldi	r25, 0x00	; 0
   15482:	66 96       	adiw	r28, 0x16	; 22
   15484:	0f b6       	in	r0, 0x3f	; 63
   15486:	f8 94       	cli
   15488:	de bf       	out	0x3e, r29	; 62
   1548a:	0f be       	out	0x3f, r0	; 63
   1548c:	cd bf       	out	0x3d, r28	; 61
   1548e:	df 91       	pop	r29
   15490:	cf 91       	pop	r28
   15492:	1f 91       	pop	r17
   15494:	0f 91       	pop	r16
   15496:	ff 90       	pop	r15
   15498:	ef 90       	pop	r14
   1549a:	cf 90       	pop	r12
   1549c:	bf 90       	pop	r11
   1549e:	af 90       	pop	r10
   154a0:	8f 90       	pop	r8
   154a2:	7f 90       	pop	r7
   154a4:	6f 90       	pop	r6
   154a6:	4f 90       	pop	r4
   154a8:	3f 90       	pop	r3
   154aa:	2f 90       	pop	r2
   154ac:	08 95       	ret

000154ae <SS80_cmd_seek>:
   154ae:	a7 e0       	ldi	r26, 0x07	; 7
   154b0:	b0 e0       	ldi	r27, 0x00	; 0
   154b2:	ed e5       	ldi	r30, 0x5D	; 93
   154b4:	fa ea       	ldi	r31, 0xAA	; 170
   154b6:	0c 94 eb e3 	jmp	0x1c7d6	; 0x1c7d6 <__prologue_saves__+0x4>
   154ba:	c0 91 73 19 	lds	r28, 0x1973	; 0x801973 <SS80s>
   154be:	d0 91 74 19 	lds	r29, 0x1974	; 0x801974 <SS80s+0x1>
   154c2:	8f 80       	ldd	r8, Y+7	; 0x07
   154c4:	98 84       	ldd	r9, Y+8	; 0x08
   154c6:	a9 84       	ldd	r10, Y+9	; 0x09
   154c8:	ba 84       	ldd	r11, Y+10	; 0x0a
   154ca:	00 91 75 19 	lds	r16, 0x1975	; 0x801975 <SS80p>
   154ce:	10 91 76 19 	lds	r17, 0x1976	; 0x801976 <SS80p+0x1>
   154d2:	f8 01       	movw	r30, r16
   154d4:	c0 88       	ldd	r12, Z+16	; 0x10
   154d6:	d1 88       	ldd	r13, Z+17	; 0x11
   154d8:	e1 2c       	mov	r14, r1
   154da:	f1 2c       	mov	r15, r1
   154dc:	6b 85       	ldd	r22, Y+11	; 0x0b
   154de:	7c 85       	ldd	r23, Y+12	; 0x0c
   154e0:	8d 85       	ldd	r24, Y+13	; 0x0d
   154e2:	9e 85       	ldd	r25, Y+14	; 0x0e
   154e4:	a7 01       	movw	r20, r14
   154e6:	96 01       	movw	r18, r12
   154e8:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
   154ec:	da 01       	movw	r26, r20
   154ee:	c9 01       	movw	r24, r18
   154f0:	88 0d       	add	r24, r8
   154f2:	99 1d       	adc	r25, r9
   154f4:	aa 1d       	adc	r26, r10
   154f6:	bb 1d       	adc	r27, r11
   154f8:	f8 01       	movw	r30, r16
   154fa:	46 a0       	ldd	r4, Z+38	; 0x26
   154fc:	57 a0       	ldd	r5, Z+39	; 0x27
   154fe:	60 a4       	ldd	r6, Z+40	; 0x28
   15500:	71 a4       	ldd	r7, Z+41	; 0x29
   15502:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   15506:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1550a:	48 16       	cp	r4, r24
   1550c:	59 06       	cpc	r5, r25
   1550e:	6a 06       	cpc	r6, r26
   15510:	7b 06       	cpc	r7, r27
   15512:	f0 f4       	brcc	.+60     	; 0x15550 <SS80_cmd_seek+0xa2>
   15514:	81 e0       	ldi	r24, 0x01	; 1
   15516:	8a 83       	std	Y+2, r24	; 0x02
   15518:	8b 81       	ldd	r24, Y+3	; 0x03
   1551a:	9c 81       	ldd	r25, Y+4	; 0x04
   1551c:	84 60       	ori	r24, 0x04	; 4
   1551e:	9c 83       	std	Y+4, r25	; 0x04
   15520:	8b 83       	std	Y+3, r24	; 0x03
   15522:	40 ff       	sbrs	r20, 0
   15524:	31 c0       	rjmp	.+98     	; 0x15588 <SS80_cmd_seek+0xda>
   15526:	a0 89       	ldd	r26, Z+16	; 0x10
   15528:	b1 89       	ldd	r27, Z+17	; 0x11
   1552a:	a5 01       	movw	r20, r10
   1552c:	94 01       	movw	r18, r8
   1552e:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
   15532:	ed b7       	in	r30, 0x3d	; 61
   15534:	fe b7       	in	r31, 0x3e	; 62
   15536:	64 83       	std	Z+4, r22	; 0x04
   15538:	75 83       	std	Z+5, r23	; 0x05
   1553a:	86 83       	std	Z+6, r24	; 0x06
   1553c:	97 83       	std	Z+7, r25	; 0x07
   1553e:	8f e7       	ldi	r24, 0x7F	; 127
   15540:	9f e1       	ldi	r25, 0x1F	; 31
   15542:	a0 e0       	ldi	r26, 0x00	; 0
   15544:	81 83       	std	Z+1, r24	; 0x01
   15546:	92 83       	std	Z+2, r25	; 0x02
   15548:	a3 83       	std	Z+3, r26	; 0x03
   1554a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1554e:	1c c0       	rjmp	.+56     	; 0x15588 <SS80_cmd_seek+0xda>
   15550:	ca 01       	movw	r24, r20
   15552:	80 72       	andi	r24, 0x20	; 32
   15554:	99 27       	eor	r25, r25
   15556:	45 ff       	sbrs	r20, 5
   15558:	19 c0       	rjmp	.+50     	; 0x1558c <SS80_cmd_seek+0xde>
   1555a:	a5 01       	movw	r20, r10
   1555c:	94 01       	movw	r18, r8
   1555e:	c7 01       	movw	r24, r14
   15560:	b6 01       	movw	r22, r12
   15562:	0e 94 3a e3 	call	0x1c674	; 0x1c674 <__mulsi3>
   15566:	ed b7       	in	r30, 0x3d	; 61
   15568:	fe b7       	in	r31, 0x3e	; 62
   1556a:	64 83       	std	Z+4, r22	; 0x04
   1556c:	75 83       	std	Z+5, r23	; 0x05
   1556e:	86 83       	std	Z+6, r24	; 0x06
   15570:	97 83       	std	Z+7, r25	; 0x07
   15572:	8b e6       	ldi	r24, 0x6B	; 107
   15574:	9f e1       	ldi	r25, 0x1F	; 31
   15576:	a0 e0       	ldi	r26, 0x00	; 0
   15578:	81 83       	std	Z+1, r24	; 0x01
   1557a:	92 83       	std	Z+2, r25	; 0x02
   1557c:	a3 83       	std	Z+3, r26	; 0x03
   1557e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15582:	80 e0       	ldi	r24, 0x00	; 0
   15584:	90 e0       	ldi	r25, 0x00	; 0
   15586:	02 c0       	rjmp	.+4      	; 0x1558c <SS80_cmd_seek+0xde>
   15588:	81 e0       	ldi	r24, 0x01	; 1
   1558a:	90 e0       	ldi	r25, 0x00	; 0
   1558c:	cd b7       	in	r28, 0x3d	; 61
   1558e:	de b7       	in	r29, 0x3e	; 62
   15590:	27 96       	adiw	r28, 0x07	; 7
   15592:	e0 e1       	ldi	r30, 0x10	; 16
   15594:	0c 94 07 e4 	jmp	0x1c80e	; 0x1c80e <__epilogue_restores__+0x4>

00015598 <SS80_locate_and_write>:
   15598:	a3 e1       	ldi	r26, 0x13	; 19
   1559a:	b0 e0       	ldi	r27, 0x00	; 0
   1559c:	e2 ed       	ldi	r30, 0xD2	; 210
   1559e:	fa ea       	ldi	r31, 0xAA	; 170
   155a0:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
   155a4:	00 91 73 19 	lds	r16, 0x1973	; 0x801973 <SS80s>
   155a8:	10 91 74 19 	lds	r17, 0x1974	; 0x801974 <SS80s+0x1>
   155ac:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <SS80p>
   155b0:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <SS80p+0x1>
   155b4:	fc 01       	movw	r30, r24
   155b6:	a0 89       	ldd	r26, Z+16	; 0x10
   155b8:	b1 89       	ldd	r27, Z+17	; 0x11
   155ba:	f8 01       	movw	r30, r16
   155bc:	27 81       	ldd	r18, Z+7	; 0x07
   155be:	30 85       	ldd	r19, Z+8	; 0x08
   155c0:	41 85       	ldd	r20, Z+9	; 0x09
   155c2:	52 85       	ldd	r21, Z+10	; 0x0a
   155c4:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
   155c8:	4b 01       	movw	r8, r22
   155ca:	5c 01       	movw	r10, r24
   155cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   155d0:	85 ff       	sbrs	r24, 5
   155d2:	16 c0       	rjmp	.+44     	; 0x15600 <SS80_locate_and_write+0x68>
   155d4:	83 85       	ldd	r24, Z+11	; 0x0b
   155d6:	94 85       	ldd	r25, Z+12	; 0x0c
   155d8:	a5 85       	ldd	r26, Z+13	; 0x0d
   155da:	b6 85       	ldd	r27, Z+14	; 0x0e
   155dc:	ed b7       	in	r30, 0x3d	; 61
   155de:	fe b7       	in	r31, 0x3e	; 62
   155e0:	80 87       	std	Z+8, r24	; 0x08
   155e2:	91 87       	std	Z+9, r25	; 0x09
   155e4:	a2 87       	std	Z+10, r26	; 0x0a
   155e6:	b3 87       	std	Z+11, r27	; 0x0b
   155e8:	84 82       	std	Z+4, r8	; 0x04
   155ea:	95 82       	std	Z+5, r9	; 0x05
   155ec:	a6 82       	std	Z+6, r10	; 0x06
   155ee:	b7 82       	std	Z+7, r11	; 0x07
   155f0:	82 e0       	ldi	r24, 0x02	; 2
   155f2:	95 e2       	ldi	r25, 0x25	; 37
   155f4:	a0 e0       	ldi	r26, 0x00	; 0
   155f6:	81 83       	std	Z+1, r24	; 0x01
   155f8:	92 83       	std	Z+2, r25	; 0x02
   155fa:	a3 83       	std	Z+3, r26	; 0x03
   155fc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15600:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15604:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15608:	12 82       	std	Z+2, r1	; 0x02
   1560a:	54 98       	cbi	0x0a, 4	; 10
   1560c:	4c 99       	sbic	0x09, 4	; 9
   1560e:	03 c0       	rjmp	.+6      	; 0x15616 <SS80_locate_and_write+0x7e>
   15610:	80 e0       	ldi	r24, 0x00	; 0
   15612:	90 e1       	ldi	r25, 0x10	; 16
   15614:	4f c1       	rjmp	.+670    	; 0x158b4 <SS80_locate_and_write+0x31c>
   15616:	4b df       	rcall	.-362    	; 0x154ae <SS80_cmd_seek>
   15618:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1561c:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15620:	89 2b       	or	r24, r25
   15622:	41 f0       	breq	.+16     	; 0x15634 <SS80_locate_and_write+0x9c>
   15624:	83 81       	ldd	r24, Z+3	; 0x03
   15626:	94 81       	ldd	r25, Z+4	; 0x04
   15628:	82 60       	ori	r24, 0x02	; 2
   1562a:	94 83       	std	Z+4, r25	; 0x04
   1562c:	83 83       	std	Z+3, r24	; 0x03
   1562e:	01 e0       	ldi	r16, 0x01	; 1
   15630:	10 e0       	ldi	r17, 0x00	; 0
   15632:	02 c0       	rjmp	.+4      	; 0x15638 <SS80_locate_and_write+0xa0>
   15634:	00 e0       	ldi	r16, 0x00	; 0
   15636:	10 e0       	ldi	r17, 0x00	; 0
   15638:	23 84       	ldd	r2, Z+11	; 0x0b
   1563a:	34 84       	ldd	r3, Z+12	; 0x0c
   1563c:	1d 86       	std	Y+13, r1	; 0x0d
   1563e:	1c 86       	std	Y+12, r1	; 0x0c
   15640:	41 2c       	mov	r4, r1
   15642:	51 2c       	mov	r5, r1
   15644:	32 01       	movw	r6, r4
   15646:	85 eb       	ldi	r24, 0xB5	; 181
   15648:	94 e2       	ldi	r25, 0x24	; 36
   1564a:	9c 01       	movw	r18, r24
   1564c:	40 e0       	ldi	r20, 0x00	; 0
   1564e:	2e 87       	std	Y+14, r18	; 0x0e
   15650:	3f 87       	std	Y+15, r19	; 0x0f
   15652:	48 8b       	std	Y+16, r20	; 0x10
   15654:	8b ed       	ldi	r24, 0xDB	; 219
   15656:	94 e2       	ldi	r25, 0x24	; 36
   15658:	9c 01       	movw	r18, r24
   1565a:	40 e0       	ldi	r20, 0x00	; 0
   1565c:	29 8b       	std	Y+17, r18	; 0x11
   1565e:	3a 8b       	std	Y+18, r19	; 0x12
   15660:	4b 8b       	std	Y+19, r20	; 0x13
   15662:	12 14       	cp	r1, r2
   15664:	13 04       	cpc	r1, r3
   15666:	0c f0       	brlt	.+2      	; 0x1566a <SS80_locate_and_write+0xd2>
   15668:	f5 c0       	rjmp	.+490    	; 0x15854 <SS80_locate_and_write+0x2bc>
   1566a:	54 98       	cbi	0x0a, 4	; 10
   1566c:	4c 9b       	sbis	0x09, 4	; 9
   1566e:	d0 cf       	rjmp	.-96     	; 0x15610 <SS80_locate_and_write+0x78>
   15670:	71 01       	movw	r14, r2
   15672:	31 e0       	ldi	r19, 0x01	; 1
   15674:	23 16       	cp	r2, r19
   15676:	33 06       	cpc	r3, r19
   15678:	1c f0       	brlt	.+6      	; 0x15680 <SS80_locate_and_write+0xe8>
   1567a:	e1 2c       	mov	r14, r1
   1567c:	ff 24       	eor	r15, r15
   1567e:	f3 94       	inc	r15
   15680:	e6 ef       	ldi	r30, 0xF6	; 246
   15682:	fc e1       	ldi	r31, 0x1C	; 28
   15684:	20 e0       	ldi	r18, 0x00	; 0
   15686:	32 e0       	ldi	r19, 0x02	; 2
   15688:	11 92       	st	Z+, r1
   1568a:	21 50       	subi	r18, 0x01	; 1
   1568c:	30 40       	sbci	r19, 0x00	; 0
   1568e:	e1 f7       	brne	.-8      	; 0x15688 <SS80_locate_and_write+0xf0>
   15690:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15694:	87 fd       	sbrc	r24, 7
   15696:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   1569a:	ae 01       	movw	r20, r28
   1569c:	44 5f       	subi	r20, 0xF4	; 244
   1569e:	5f 4f       	sbci	r21, 0xFF	; 255
   156a0:	b7 01       	movw	r22, r14
   156a2:	86 ef       	ldi	r24, 0xF6	; 246
   156a4:	9c e1       	ldi	r25, 0x1C	; 28
   156a6:	0e 94 a7 8c 	call	0x1194e	; 0x1194e <gpib_read_str>
   156aa:	6c 01       	movw	r12, r24
   156ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156b0:	87 ff       	sbrs	r24, 7
   156b2:	04 c0       	rjmp	.+8      	; 0x156bc <SS80_locate_and_write+0x124>
   156b4:	8b e8       	ldi	r24, 0x8B	; 139
   156b6:	90 e1       	ldi	r25, 0x10	; 16
   156b8:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   156bc:	ce 14       	cp	r12, r14
   156be:	df 04       	cpc	r13, r15
   156c0:	39 f1       	breq	.+78     	; 0x15710 <SS80_locate_and_write+0x178>
   156c2:	8c 85       	ldd	r24, Y+12	; 0x0c
   156c4:	9d 85       	ldd	r25, Y+13	; 0x0d
   156c6:	9c 01       	movw	r18, r24
   156c8:	22 27       	eor	r18, r18
   156ca:	30 7d       	andi	r19, 0xD0	; 208
   156cc:	23 2b       	or	r18, r19
   156ce:	d1 f0       	breq	.+52     	; 0x15704 <SS80_locate_and_write+0x16c>
   156d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156d4:	80 ff       	sbrs	r24, 0
   156d6:	0a c0       	rjmp	.+20     	; 0x156ec <SS80_locate_and_write+0x154>
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   156d8:	8f ee       	ldi	r24, 0xEF	; 239
   156da:	94 e2       	ldi	r25, 0x24	; 36
   156dc:	a0 e0       	ldi	r26, 0x00	; 0
   156de:	ed b7       	in	r30, 0x3d	; 61
   156e0:	fe b7       	in	r31, 0x3e	; 62
   156e2:	81 83       	std	Z+1, r24	; 0x01
   156e4:	92 83       	std	Z+2, r25	; 0x02
   156e6:	a3 83       	std	Z+3, r26	; 0x03
   156e8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   156ec:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   156f0:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   156f4:	83 81       	ldd	r24, Z+3	; 0x03
   156f6:	94 81       	ldd	r25, Z+4	; 0x04
   156f8:	82 60       	ori	r24, 0x02	; 2
   156fa:	94 83       	std	Z+4, r25	; 0x04
   156fc:	83 83       	std	Z+3, r24	; 0x03
   156fe:	81 e0       	ldi	r24, 0x01	; 1
   15700:	82 83       	std	Z+2, r24	; 0x02
   15702:	99 c0       	rjmp	.+306    	; 0x15836 <SS80_locate_and_write+0x29e>
   15704:	c1 14       	cp	r12, r1
   15706:	d1 04       	cpc	r13, r1
   15708:	09 f0       	breq	.+2      	; 0x1570c <SS80_locate_and_write+0x174>
   1570a:	d0 c0       	rjmp	.+416    	; 0x158ac <SS80_locate_and_write+0x314>
   1570c:	90 fd       	sbrc	r25, 0
   1570e:	93 c0       	rjmp	.+294    	; 0x15836 <SS80_locate_and_write+0x29e>
   15710:	01 15       	cp	r16, r1
   15712:	11 05       	cpc	r17, r1
   15714:	09 f0       	breq	.+2      	; 0x15718 <SS80_locate_and_write+0x180>
   15716:	84 c0       	rjmp	.+264    	; 0x15820 <SS80_locate_and_write+0x288>
   15718:	c1 14       	cp	r12, r1
   1571a:	d1 04       	cpc	r13, r1
   1571c:	09 f4       	brne	.+2      	; 0x15720 <SS80_locate_and_write+0x188>
   1571e:	82 c0       	rjmp	.+260    	; 0x15824 <SS80_locate_and_write+0x28c>
   15720:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15724:	86 fd       	sbrc	r24, 6
   15726:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   1572a:	e0 90 73 19 	lds	r14, 0x1973	; 0x801973 <SS80s>
   1572e:	f0 90 74 19 	lds	r15, 0x1974	; 0x801974 <SS80s+0x1>
   15732:	f3 e0       	ldi	r31, 0x03	; 3
   15734:	ef 0e       	add	r14, r31
   15736:	f1 1c       	adc	r15, r1
   15738:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   1573c:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15740:	86 01       	movw	r16, r12
   15742:	26 ef       	ldi	r18, 0xF6	; 246
   15744:	3c e1       	ldi	r19, 0x1C	; 28
   15746:	b5 01       	movw	r22, r10
   15748:	a4 01       	movw	r20, r8
   1574a:	82 81       	ldd	r24, Z+2	; 0x02
   1574c:	93 81       	ldd	r25, Z+3	; 0x03
   1574e:	0e 94 a0 86 	call	0x10d40	; 0x10d40 <dbf_open_write>
   15752:	7c 01       	movw	r14, r24
   15754:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15758:	86 ff       	sbrs	r24, 6
   1575a:	04 c0       	rjmp	.+8      	; 0x15764 <SS80_locate_and_write+0x1cc>
   1575c:	86 e9       	ldi	r24, 0x96	; 150
   1575e:	90 e1       	ldi	r25, 0x10	; 16
   15760:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   15764:	ce 14       	cp	r12, r14
   15766:	df 04       	cpc	r13, r15
   15768:	39 f1       	breq	.+78     	; 0x157b8 <SS80_locate_and_write+0x220>
   1576a:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1576e:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15772:	83 81       	ldd	r24, Z+3	; 0x03
    return ( uart_rx_count( uart ) );
   15774:	94 81       	ldd	r25, Z+4	; 0x04
}
   15776:	82 60       	ori	r24, 0x02	; 2
   15778:	94 83       	std	Z+4, r25	; 0x04
   1577a:	83 83       	std	Z+3, r24	; 0x03
   1577c:	0e 94 a9 71 	call	0xe352	; 0xe352 <mmc_wp_status>
   15780:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15784:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15788:	89 2b       	or	r24, r25
   1578a:	29 f0       	breq	.+10     	; 0x15796 <SS80_locate_and_write+0x1fe>
   1578c:	83 81       	ldd	r24, Z+3	; 0x03
   1578e:	94 81       	ldd	r25, Z+4	; 0x04
   15790:	88 60       	ori	r24, 0x08	; 8
   15792:	94 83       	std	Z+4, r25	; 0x04
   15794:	83 83       	std	Z+3, r24	; 0x03
   15796:	21 e0       	ldi	r18, 0x01	; 1
   15798:	22 83       	std	Z+2, r18	; 0x02
   1579a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1579e:	80 ff       	sbrs	r24, 0
   157a0:	27 c0       	rjmp	.+78     	; 0x157f0 <SS80_locate_and_write+0x258>
   157a2:	89 89       	ldd	r24, Y+17	; 0x11
   157a4:	9a 89       	ldd	r25, Y+18	; 0x12
   157a6:	ab 89       	ldd	r26, Y+19	; 0x13
   157a8:	ed b7       	in	r30, 0x3d	; 61
   157aa:	fe b7       	in	r31, 0x3e	; 62
   157ac:	81 83       	std	Z+1, r24	; 0x01
   157ae:	92 83       	std	Z+2, r25	; 0x02
   157b0:	a3 83       	std	Z+3, r26	; 0x03
   157b2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   157b6:	1c c0       	rjmp	.+56     	; 0x157f0 <SS80_locate_and_write+0x258>
   157b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   157bc:	85 ff       	sbrs	r24, 5
   157be:	0c c0       	rjmp	.+24     	; 0x157d8 <SS80_locate_and_write+0x240>
   157c0:	ed b7       	in	r30, 0x3d	; 61
   157c2:	fe b7       	in	r31, 0x3e	; 62
   157c4:	d5 82       	std	Z+5, r13	; 0x05
   157c6:	c4 82       	std	Z+4, r12	; 0x04
   157c8:	2e 85       	ldd	r18, Y+14	; 0x0e
   157ca:	3f 85       	ldd	r19, Y+15	; 0x0f
   157cc:	48 89       	ldd	r20, Y+16	; 0x10
   157ce:	21 83       	std	Z+1, r18	; 0x01
   157d0:	32 83       	std	Z+2, r19	; 0x02
   157d2:	43 83       	std	Z+3, r20	; 0x03
   157d4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   157d8:	c6 01       	movw	r24, r12
   157da:	0d 2c       	mov	r0, r13
   157dc:	00 0c       	add	r0, r0
   157de:	aa 0b       	sbc	r26, r26
   157e0:	bb 0b       	sbc	r27, r27
   157e2:	88 0e       	add	r8, r24
   157e4:	99 1e       	adc	r9, r25
   157e6:	aa 1e       	adc	r10, r26
   157e8:	bb 1e       	adc	r11, r27
   157ea:	00 e0       	ldi	r16, 0x00	; 0
   157ec:	10 e0       	ldi	r17, 0x00	; 0
   157ee:	05 c0       	rjmp	.+10     	; 0x157fa <SS80_locate_and_write+0x262>
   157f0:	ec 14       	cp	r14, r12
   157f2:	fd 04       	cpc	r15, r13
   157f4:	64 f0       	brlt	.+24     	; 0x1580e <SS80_locate_and_write+0x276>
   157f6:	01 e0       	ldi	r16, 0x01	; 1
   157f8:	10 e0       	ldi	r17, 0x00	; 0
   157fa:	c7 01       	movw	r24, r14
   157fc:	0f 2c       	mov	r0, r15
   157fe:	00 0c       	add	r0, r0
   15800:	aa 0b       	sbc	r26, r26
   15802:	bb 0b       	sbc	r27, r27
   15804:	48 0e       	add	r4, r24
   15806:	59 1e       	adc	r5, r25
   15808:	6a 1e       	adc	r6, r26
   1580a:	7b 1e       	adc	r7, r27
   1580c:	0b c0       	rjmp	.+22     	; 0x15824 <SS80_locate_and_write+0x28c>
   1580e:	c6 01       	movw	r24, r12
   15810:	0d 2c       	mov	r0, r13
   15812:	00 0c       	add	r0, r0
   15814:	aa 0b       	sbc	r26, r26
   15816:	bb 0b       	sbc	r27, r27
   15818:	48 0e       	add	r4, r24
   1581a:	59 1e       	adc	r5, r25
   1581c:	6a 1e       	adc	r6, r26
   1581e:	7b 1e       	adc	r7, r27
   15820:	01 e0       	ldi	r16, 0x01	; 1
   15822:	10 e0       	ldi	r17, 0x00	; 0
   15824:	2c 18       	sub	r2, r12
   15826:	3d 08       	sbc	r3, r13
   15828:	8c 85       	ldd	r24, Y+12	; 0x0c
   1582a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1582c:	90 ff       	sbrs	r25, 0
   1582e:	19 cf       	rjmp	.-462    	; 0x15662 <SS80_locate_and_write+0xca>
   15830:	12 14       	cp	r1, r2
   15832:	13 04       	cpc	r1, r3
   15834:	7c f4       	brge	.+30     	; 0x15854 <SS80_locate_and_write+0x2bc>
   15836:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1583a:	80 ff       	sbrs	r24, 0
   1583c:	1d c0       	rjmp	.+58     	; 0x15878 <SS80_locate_and_write+0x2e0>
   1583e:	8d e8       	ldi	r24, 0x8D	; 141
   15840:	94 e2       	ldi	r25, 0x24	; 36
   15842:	a0 e0       	ldi	r26, 0x00	; 0
   15844:	ed b7       	in	r30, 0x3d	; 61
   15846:	fe b7       	in	r31, 0x3e	; 62
   15848:	81 83       	std	Z+1, r24	; 0x01
   1584a:	92 83       	std	Z+2, r25	; 0x02
   1584c:	a3 83       	std	Z+3, r26	; 0x03
   1584e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15852:	12 c0       	rjmp	.+36     	; 0x15878 <SS80_locate_and_write+0x2e0>
   15854:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15858:	85 ff       	sbrs	r24, 5
   1585a:	0e c0       	rjmp	.+28     	; 0x15878 <SS80_locate_and_write+0x2e0>
   1585c:	ed b7       	in	r30, 0x3d	; 61
   1585e:	fe b7       	in	r31, 0x3e	; 62
   15860:	44 82       	std	Z+4, r4	; 0x04
   15862:	55 82       	std	Z+5, r5	; 0x05
   15864:	66 82       	std	Z+6, r6	; 0x06
   15866:	77 82       	std	Z+7, r7	; 0x07
   15868:	82 e6       	ldi	r24, 0x62	; 98
   1586a:	94 e2       	ldi	r25, 0x24	; 36
   1586c:	a0 e0       	ldi	r26, 0x00	; 0
   1586e:	81 83       	std	Z+1, r24	; 0x01
   15870:	92 83       	std	Z+2, r25	; 0x02
   15872:	a3 83       	std	Z+3, r26	; 0x03
   15874:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15878:	00 91 73 19 	lds	r16, 0x1973	; 0x801973 <SS80s>
   1587c:	10 91 74 19 	lds	r17, 0x1974	; 0x801974 <SS80s+0x1>
   15880:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15884:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15888:	20 89       	ldd	r18, Z+16	; 0x10
   1588a:	31 89       	ldd	r19, Z+17	; 0x11
   1588c:	40 e0       	ldi	r20, 0x00	; 0
   1588e:	50 e0       	ldi	r21, 0x00	; 0
   15890:	c5 01       	movw	r24, r10
   15892:	b4 01       	movw	r22, r8
   15894:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
   15898:	f8 01       	movw	r30, r16
   1589a:	27 83       	std	Z+7, r18	; 0x07
   1589c:	30 87       	std	Z+8, r19	; 0x08
   1589e:	41 87       	std	Z+9, r20	; 0x09
   158a0:	52 87       	std	Z+10, r21	; 0x0a
   158a2:	8c 85       	ldd	r24, Y+12	; 0x0c
   158a4:	9d 85       	ldd	r25, Y+13	; 0x0d
   158a6:	88 27       	eor	r24, r24
   158a8:	90 7d       	andi	r25, 0xD0	; 208
   158aa:	04 c0       	rjmp	.+8      	; 0x158b4 <SS80_locate_and_write+0x31c>
   158ac:	01 2b       	or	r16, r17
   158ae:	09 f4       	brne	.+2      	; 0x158b2 <SS80_locate_and_write+0x31a>
   158b0:	37 cf       	rjmp	.-402    	; 0x15720 <SS80_locate_and_write+0x188>
   158b2:	b6 cf       	rjmp	.-148    	; 0x15820 <SS80_locate_and_write+0x288>
   158b4:	63 96       	adiw	r28, 0x13	; 19
   158b6:	e2 e1       	ldi	r30, 0x12	; 18
   158b8:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

000158bc <SS80_Report>:
   158bc:	a8 e0       	ldi	r26, 0x08	; 8
   158be:	b0 e0       	ldi	r27, 0x00	; 0
   158c0:	e4 e6       	ldi	r30, 0x64	; 100
   158c2:	fc ea       	ldi	r31, 0xAC	; 172
   158c4:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   158c8:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   158cc:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   158d0:	82 81       	ldd	r24, Z+2	; 0x02
   158d2:	88 87       	std	Y+8, r24	; 0x08
   158d4:	80 e0       	ldi	r24, 0x00	; 0
   158d6:	91 e0       	ldi	r25, 0x01	; 1
   158d8:	9f 83       	std	Y+7, r25	; 0x07
   158da:	8e 83       	std	Y+6, r24	; 0x06
   158dc:	ae 01       	movw	r20, r28
   158de:	4a 5f       	subi	r20, 0xFA	; 250
   158e0:	5f 4f       	sbci	r21, 0xFF	; 255
   158e2:	61 e0       	ldi	r22, 0x01	; 1
   158e4:	70 e0       	ldi	r23, 0x00	; 0
   158e6:	ce 01       	movw	r24, r28
   158e8:	08 96       	adiw	r24, 0x08	; 8
   158ea:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   158ee:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   158f2:	01 97       	sbiw	r24, 0x01	; 1
   158f4:	89 f0       	breq	.+34     	; 0x15918 <SS80_Report+0x5c>
   158f6:	20 ff       	sbrs	r18, 0
   158f8:	0a c0       	rjmp	.+20     	; 0x1590e <SS80_Report+0x52>
   158fa:	81 e5       	ldi	r24, 0x51	; 81
   158fc:	9f e1       	ldi	r25, 0x1F	; 31
   158fe:	a0 e0       	ldi	r26, 0x00	; 0
   15900:	ed b7       	in	r30, 0x3d	; 61
   15902:	fe b7       	in	r31, 0x3e	; 62
   15904:	81 83       	std	Z+1, r24	; 0x01
   15906:	92 83       	std	Z+2, r25	; 0x02
   15908:	a3 83       	std	Z+3, r26	; 0x03
   1590a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1590e:	8e 81       	ldd	r24, Y+6	; 0x06
   15910:	9f 81       	ldd	r25, Y+7	; 0x07
   15912:	88 27       	eor	r24, r24
   15914:	90 7d       	andi	r25, 0xD0	; 208
   15916:	1b c0       	rjmp	.+54     	; 0x1594e <SS80_Report+0x92>
   15918:	25 ff       	sbrs	r18, 5
   1591a:	12 c0       	rjmp	.+36     	; 0x15940 <SS80_Report+0x84>
   1591c:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15920:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15924:	82 81       	ldd	r24, Z+2	; 0x02
   15926:	90 e0       	ldi	r25, 0x00	; 0
   15928:	ed b7       	in	r30, 0x3d	; 61
   1592a:	fe b7       	in	r31, 0x3e	; 62
   1592c:	95 83       	std	Z+5, r25	; 0x05
   1592e:	84 83       	std	Z+4, r24	; 0x04
   15930:	8e e3       	ldi	r24, 0x3E	; 62
   15932:	9f e1       	ldi	r25, 0x1F	; 31
   15934:	a0 e0       	ldi	r26, 0x00	; 0
   15936:	81 83       	std	Z+1, r24	; 0x01
   15938:	92 83       	std	Z+2, r25	; 0x02
   1593a:	a3 83       	std	Z+3, r26	; 0x03
   1593c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15940:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15944:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15948:	12 82       	std	Z+2, r1	; 0x02
   1594a:	80 e0       	ldi	r24, 0x00	; 0
   1594c:	90 e0       	ldi	r25, 0x00	; 0
   1594e:	28 96       	adiw	r28, 0x08	; 8
   15950:	e2 e0       	ldi	r30, 0x02	; 2
   15952:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00015956 <Clear_Common>:
   15956:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1595a:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   1595e:	25 81       	ldd	r18, Z+5	; 0x05
   15960:	30 e0       	ldi	r19, 0x00	; 0
   15962:	28 17       	cp	r18, r24
   15964:	39 07       	cpc	r19, r25
   15966:	19 f0       	breq	.+6      	; 0x1596e <Clear_Common+0x18>
   15968:	0f 97       	sbiw	r24, 0x0f	; 15
   1596a:	99 f4       	brne	.+38     	; 0x15992 <Clear_Common+0x3c>
   1596c:	03 c0       	rjmp	.+6      	; 0x15974 <Clear_Common+0x1e>
   1596e:	2f 30       	cpi	r18, 0x0F	; 15
   15970:	31 05       	cpc	r19, r1
   15972:	09 f4       	brne	.+2      	; 0x15976 <Clear_Common+0x20>
   15974:	15 82       	std	Z+5, r1	; 0x05
   15976:	16 82       	std	Z+6, r1	; 0x06
   15978:	17 82       	std	Z+7, r1	; 0x07
   1597a:	10 86       	std	Z+8, r1	; 0x08
   1597c:	11 86       	std	Z+9, r1	; 0x09
   1597e:	12 86       	std	Z+10, r1	; 0x0a
   15980:	13 86       	std	Z+11, r1	; 0x0b
   15982:	14 86       	std	Z+12, r1	; 0x0c
   15984:	15 86       	std	Z+13, r1	; 0x0d
   15986:	16 86       	std	Z+14, r1	; 0x0e
   15988:	11 82       	std	Z+1, r1	; 0x01
   1598a:	10 82       	st	Z, r1
   1598c:	14 82       	std	Z+4, r1	; 0x04
   1598e:	13 82       	std	Z+3, r1	; 0x03
   15990:	12 82       	std	Z+2, r1	; 0x02
   15992:	08 95       	ret

00015994 <SS80_init>:
   15994:	a5 e0       	ldi	r26, 0x05	; 5
   15996:	b0 e0       	ldi	r27, 0x00	; 0
   15998:	e0 ed       	ldi	r30, 0xD0	; 208
   1599a:	fc ea       	ldi	r31, 0xAC	; 172
   1599c:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
   159a0:	09 ed       	ldi	r16, 0xD9	; 217
   159a2:	10 e2       	ldi	r17, 0x20	; 32
   159a4:	cb e0       	ldi	r28, 0x0B	; 11
   159a6:	d0 e0       	ldi	r29, 0x00	; 0
   159a8:	82 e0       	ldi	r24, 0x02	; 2
   159aa:	f8 2e       	mov	r15, r24
   159ac:	8b e0       	ldi	r24, 0x0B	; 11
   159ae:	96 e2       	ldi	r25, 0x26	; 38
   159b0:	6c 01       	movw	r12, r24
   159b2:	e1 2c       	mov	r14, r1
   159b4:	f8 01       	movw	r30, r16
   159b6:	80 81       	ld	r24, Z
   159b8:	83 30       	cpi	r24, 0x03	; 3
   159ba:	29 f5       	brne	.+74     	; 0x15a06 <SS80_init+0x72>
   159bc:	ce 01       	movw	r24, r28
   159be:	0e 94 17 99 	call	0x1322e	; 0x1322e <set_active_device>
   159c2:	89 2b       	or	r24, r25
   159c4:	01 f1       	breq	.+64     	; 0x15a06 <SS80_init+0x72>
   159c6:	8f e0       	ldi	r24, 0x0F	; 15
   159c8:	90 e0       	ldi	r25, 0x00	; 0
   159ca:	c5 df       	rcall	.-118    	; 0x15956 <Clear_Common>
   159cc:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   159d0:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   159d4:	f2 82       	std	Z+2, r15	; 0x02
   159d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159da:	85 ff       	sbrs	r24, 5
   159dc:	0c c0       	rjmp	.+24     	; 0x159f6 <SS80_init+0x62>
   159de:	f8 01       	movw	r30, r16
   159e0:	81 81       	ldd	r24, Z+1	; 0x01
   159e2:	90 e0       	ldi	r25, 0x00	; 0
   159e4:	ed b7       	in	r30, 0x3d	; 61
   159e6:	fe b7       	in	r31, 0x3e	; 62
   159e8:	95 83       	std	Z+5, r25	; 0x05
   159ea:	84 83       	std	Z+4, r24	; 0x04
   159ec:	c1 82       	std	Z+1, r12	; 0x01
   159ee:	d2 82       	std	Z+2, r13	; 0x02
   159f0:	e3 82       	std	Z+3, r14	; 0x03
   159f2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   159f6:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   159fa:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   159fe:	81 81       	ldd	r24, Z+1	; 0x01
   15a00:	90 e0       	ldi	r25, 0x00	; 0
   15a02:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
   15a06:	21 97       	sbiw	r28, 0x01	; 1
   15a08:	0b 52       	subi	r16, 0x2B	; 43
   15a0a:	11 09       	sbc	r17, r1
   15a0c:	cf 3f       	cpi	r28, 0xFF	; 255
   15a0e:	ff ef       	ldi	r31, 0xFF	; 255
   15a10:	df 07       	cpc	r29, r31
   15a12:	81 f6       	brne	.-96     	; 0x159b4 <SS80_init+0x20>
   15a14:	cd b7       	in	r28, 0x3d	; 61
   15a16:	de b7       	in	r29, 0x3e	; 62
   15a18:	25 96       	adiw	r28, 0x05	; 5
   15a1a:	e8 e0       	ldi	r30, 0x08	; 8
   15a1c:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

00015a20 <SS80_Channel_Independent_Clear>:
   15a20:	9a df       	rcall	.-204    	; 0x15956 <Clear_Common>
   15a22:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15a26:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15a2a:	81 81       	ldd	r24, Z+1	; 0x01
   15a2c:	90 e0       	ldi	r25, 0x00	; 0
   15a2e:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   15a32:	80 e0       	ldi	r24, 0x00	; 0
   15a34:	90 e0       	ldi	r25, 0x00	; 0
   15a36:	08 95       	ret

00015a38 <SS80_Universal_Device_Clear>:
   15a38:	8f e0       	ldi	r24, 0x0F	; 15
   15a3a:	90 e0       	ldi	r25, 0x00	; 0
   15a3c:	8c df       	rcall	.-232    	; 0x15956 <Clear_Common>
   15a3e:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15a42:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15a46:	81 81       	ldd	r24, Z+1	; 0x01
   15a48:	90 e0       	ldi	r25, 0x00	; 0
   15a4a:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   15a4e:	80 e0       	ldi	r24, 0x00	; 0
   15a50:	90 e0       	ldi	r25, 0x00	; 0
   15a52:	08 95       	ret

00015a54 <SS80_Selected_Device_Clear>:
   15a54:	cf 93       	push	r28
   15a56:	df 93       	push	r29
   15a58:	00 d0       	rcall	.+0      	; 0x15a5a <SS80_Selected_Device_Clear+0x6>
   15a5a:	1f 92       	push	r1
   15a5c:	ec 01       	movw	r28, r24
   15a5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a62:	85 ff       	sbrs	r24, 5
   15a64:	0a c0       	rjmp	.+20     	; 0x15a7a <SS80_Selected_Device_Clear+0x26>
   15a66:	82 e3       	ldi	r24, 0x32	; 50
   15a68:	9f e1       	ldi	r25, 0x1F	; 31
   15a6a:	a0 e0       	ldi	r26, 0x00	; 0
   15a6c:	ed b7       	in	r30, 0x3d	; 61
   15a6e:	fe b7       	in	r31, 0x3e	; 62
   15a70:	81 83       	std	Z+1, r24	; 0x01
   15a72:	92 83       	std	Z+2, r25	; 0x02
   15a74:	a3 83       	std	Z+3, r26	; 0x03
   15a76:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15a7a:	ce 01       	movw	r24, r28
   15a7c:	6c df       	rcall	.-296    	; 0x15956 <Clear_Common>
   15a7e:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15a82:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15a86:	81 81       	ldd	r24, Z+1	; 0x01
   15a88:	90 e0       	ldi	r25, 0x00	; 0
   15a8a:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   15a8e:	80 e0       	ldi	r24, 0x00	; 0
   15a90:	90 e0       	ldi	r25, 0x00	; 0
   15a92:	cd b7       	in	r28, 0x3d	; 61
   15a94:	de b7       	in	r29, 0x3e	; 62
   15a96:	23 96       	adiw	r28, 0x03	; 3
   15a98:	e2 e0       	ldi	r30, 0x02	; 2
   15a9a:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00015a9e <SS80_Amigo_Clear>:
   15a9e:	a6 e0       	ldi	r26, 0x06	; 6
   15aa0:	b0 e0       	ldi	r27, 0x00	; 0
   15aa2:	e5 e5       	ldi	r30, 0x55	; 85
   15aa4:	fd ea       	ldi	r31, 0xAD	; 173
   15aa6:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   15aaa:	1d 82       	std	Y+5, r1	; 0x05
   15aac:	1c 82       	std	Y+4, r1	; 0x04
   15aae:	ae 01       	movw	r20, r28
   15ab0:	4c 5f       	subi	r20, 0xFC	; 252
   15ab2:	5f 4f       	sbci	r21, 0xFF	; 255
   15ab4:	61 e0       	ldi	r22, 0x01	; 1
   15ab6:	70 e0       	ldi	r23, 0x00	; 0
   15ab8:	ce 01       	movw	r24, r28
   15aba:	06 96       	adiw	r24, 0x06	; 6
   15abc:	0e 94 a7 8c 	call	0x1194e	; 0x1194e <gpib_read_str>
   15ac0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15ac4:	01 97       	sbiw	r24, 0x01	; 1
   15ac6:	89 f0       	breq	.+34     	; 0x15aea <SS80_Amigo_Clear+0x4c>
   15ac8:	20 ff       	sbrs	r18, 0
   15aca:	0a c0       	rjmp	.+20     	; 0x15ae0 <SS80_Amigo_Clear+0x42>
   15acc:	8f e1       	ldi	r24, 0x1F	; 31
   15ace:	9f e1       	ldi	r25, 0x1F	; 31
   15ad0:	a0 e0       	ldi	r26, 0x00	; 0
   15ad2:	ed b7       	in	r30, 0x3d	; 61
   15ad4:	fe b7       	in	r31, 0x3e	; 62
   15ad6:	81 83       	std	Z+1, r24	; 0x01
   15ad8:	92 83       	std	Z+2, r25	; 0x02
   15ada:	a3 83       	std	Z+3, r26	; 0x03
   15adc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15ae0:	8c 81       	ldd	r24, Y+4	; 0x04
   15ae2:	9d 81       	ldd	r25, Y+5	; 0x05
   15ae4:	88 27       	eor	r24, r24
   15ae6:	90 7d       	andi	r25, 0xD0	; 208
   15ae8:	19 c0       	rjmp	.+50     	; 0x15b1c <SS80_Amigo_Clear+0x7e>
   15aea:	25 ff       	sbrs	r18, 5
   15aec:	0a c0       	rjmp	.+20     	; 0x15b02 <SS80_Amigo_Clear+0x64>
   15aee:	80 e1       	ldi	r24, 0x10	; 16
   15af0:	9f e1       	ldi	r25, 0x1F	; 31
   15af2:	a0 e0       	ldi	r26, 0x00	; 0
   15af4:	ed b7       	in	r30, 0x3d	; 61
   15af6:	fe b7       	in	r31, 0x3e	; 62
   15af8:	81 83       	std	Z+1, r24	; 0x01
   15afa:	92 83       	std	Z+2, r25	; 0x02
   15afc:	a3 83       	std	Z+3, r26	; 0x03
   15afe:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15b02:	8f e0       	ldi	r24, 0x0F	; 15
   15b04:	90 e0       	ldi	r25, 0x00	; 0
   15b06:	27 df       	rcall	.-434    	; 0x15956 <Clear_Common>
   15b08:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15b0c:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15b10:	81 81       	ldd	r24, Z+1	; 0x01
   15b12:	90 e0       	ldi	r25, 0x00	; 0
   15b14:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   15b18:	80 e0       	ldi	r24, 0x00	; 0
   15b1a:	90 e0       	ldi	r25, 0x00	; 0
   15b1c:	26 96       	adiw	r28, 0x06	; 6
   15b1e:	e2 e0       	ldi	r30, 0x02	; 2
   15b20:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00015b24 <SS80_Cancel>:
   15b24:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15b28:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15b2c:	11 82       	std	Z+1, r1	; 0x01
   15b2e:	10 82       	st	Z, r1
   15b30:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15b34:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15b38:	81 81       	ldd	r24, Z+1	; 0x01
   15b3a:	90 e0       	ldi	r25, 0x00	; 0
   15b3c:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   15b40:	80 e0       	ldi	r24, 0x00	; 0
   15b42:	90 e0       	ldi	r25, 0x00	; 0
   15b44:	08 95       	ret

00015b46 <SS80_Transparent_State>:
   15b46:	a9 e0       	ldi	r26, 0x09	; 9
   15b48:	b0 e0       	ldi	r27, 0x00	; 0
   15b4a:	e9 ea       	ldi	r30, 0xA9	; 169
   15b4c:	fd ea       	ldi	r31, 0xAD	; 173
   15b4e:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
   15b52:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15b56:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15b5a:	81 81       	ldd	r24, Z+1	; 0x01
   15b5c:	90 e0       	ldi	r25, 0x00	; 0
   15b5e:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
   15b62:	80 e0       	ldi	r24, 0x00	; 0
   15b64:	91 e0       	ldi	r25, 0x01	; 1
   15b66:	99 87       	std	Y+9, r25	; 0x09
   15b68:	88 87       	std	Y+8, r24	; 0x08
   15b6a:	ae 01       	movw	r20, r28
   15b6c:	48 5f       	subi	r20, 0xF8	; 248
   15b6e:	5f 4f       	sbci	r21, 0xFF	; 255
   15b70:	60 e0       	ldi	r22, 0x00	; 0
   15b72:	72 e0       	ldi	r23, 0x02	; 2
   15b74:	86 ef       	ldi	r24, 0xF6	; 246
   15b76:	9c e1       	ldi	r25, 0x1C	; 28
   15b78:	0e 94 a7 8c 	call	0x1194e	; 0x1194e <gpib_read_str>
   15b7c:	7c 01       	movw	r14, r24
   15b7e:	88 85       	ldd	r24, Y+8	; 0x08
   15b80:	99 85       	ldd	r25, Y+9	; 0x09
   15b82:	9c 01       	movw	r18, r24
   15b84:	22 27       	eor	r18, r18
   15b86:	30 7d       	andi	r19, 0xD0	; 208
   15b88:	23 2b       	or	r18, r19
   15b8a:	79 f0       	breq	.+30     	; 0x15baa <SS80_Transparent_State+0x64>
   15b8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b90:	80 ff       	sbrs	r24, 0
   15b92:	da c0       	rjmp	.+436    	; 0x15d48 <SS80_Transparent_State+0x202>
   15b94:	8f ea       	ldi	r24, 0xAF	; 175
   15b96:	90 e2       	ldi	r25, 0x20	; 32
   15b98:	a0 e0       	ldi	r26, 0x00	; 0
   15b9a:	ed b7       	in	r30, 0x3d	; 61
   15b9c:	fe b7       	in	r31, 0x3e	; 62
   15b9e:	81 83       	std	Z+1, r24	; 0x01
   15ba0:	92 83       	std	Z+2, r25	; 0x02
   15ba2:	a3 83       	std	Z+3, r26	; 0x03
   15ba4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15ba8:	cf c0       	rjmp	.+414    	; 0x15d48 <SS80_Transparent_State+0x202>
   15baa:	e1 14       	cp	r14, r1
   15bac:	f1 04       	cpc	r15, r1
   15bae:	09 f4       	brne	.+2      	; 0x15bb2 <SS80_Transparent_State+0x6c>
   15bb0:	d0 c0       	rjmp	.+416    	; 0x15d52 <SS80_Transparent_State+0x20c>
   15bb2:	90 fd       	sbrc	r25, 0
   15bb4:	0e c0       	rjmp	.+28     	; 0x15bd2 <SS80_Transparent_State+0x8c>
   15bb6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bba:	80 ff       	sbrs	r24, 0
   15bbc:	0a c0       	rjmp	.+20     	; 0x15bd2 <SS80_Transparent_State+0x8c>
   15bbe:	86 e9       	ldi	r24, 0x96	; 150
   15bc0:	90 e2       	ldi	r25, 0x20	; 32
   15bc2:	a0 e0       	ldi	r26, 0x00	; 0
   15bc4:	ed b7       	in	r30, 0x3d	; 61
   15bc6:	fe b7       	in	r31, 0x3e	; 62
   15bc8:	81 83       	std	Z+1, r24	; 0x01
   15bca:	92 83       	std	Z+2, r25	; 0x02
   15bcc:	a3 83       	std	Z+3, r26	; 0x03
   15bce:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15bd2:	86 ef       	ldi	r24, 0xF6	; 246
   15bd4:	a8 2e       	mov	r10, r24
   15bd6:	8c e1       	ldi	r24, 0x1C	; 28
   15bd8:	b8 2e       	mov	r11, r24
   15bda:	00 e0       	ldi	r16, 0x00	; 0
   15bdc:	10 e0       	ldi	r17, 0x00	; 0
   15bde:	0e 15       	cp	r16, r14
   15be0:	1f 05       	cpc	r17, r15
   15be2:	0c f0       	brlt	.+2      	; 0x15be6 <SS80_Transparent_State+0xa0>
   15be4:	9c c0       	rjmp	.+312    	; 0x15d1e <SS80_Transparent_State+0x1d8>
   15be6:	68 01       	movw	r12, r16
   15be8:	ff ef       	ldi	r31, 0xFF	; 255
   15bea:	cf 1a       	sub	r12, r31
   15bec:	df 0a       	sbc	r13, r31
   15bee:	f5 01       	movw	r30, r10
   15bf0:	81 91       	ld	r24, Z+
   15bf2:	5f 01       	movw	r10, r30
   15bf4:	28 2f       	mov	r18, r24
   15bf6:	30 e0       	ldi	r19, 0x00	; 0
   15bf8:	a9 01       	movw	r20, r18
   15bfa:	40 52       	subi	r20, 0x20	; 32
   15bfc:	51 09       	sbc	r21, r1
   15bfe:	40 31       	cpi	r20, 0x10	; 16
   15c00:	51 05       	cpc	r21, r1
   15c02:	20 f4       	brcc	.+8      	; 0x15c0c <SS80_Transparent_State+0xc6>
   15c04:	80 52       	subi	r24, 0x20	; 32
   15c06:	8c d9       	rcall	.-3304   	; 0x14f20 <SS80_Check_Unit>
   15c08:	86 01       	movw	r16, r12
   15c0a:	e9 cf       	rjmp	.-46     	; 0x15bde <SS80_Transparent_State+0x98>
   15c0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c10:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15c14:	21 30       	cpi	r18, 0x01	; 1
   15c16:	31 05       	cpc	r19, r1
   15c18:	c9 f4       	brne	.+50     	; 0x15c4c <SS80_Transparent_State+0x106>
   15c1a:	0e 5f       	subi	r16, 0xFE	; 254
   15c1c:	1f 4f       	sbci	r17, 0xFF	; 255
   15c1e:	80 73       	andi	r24, 0x30	; 48
   15c20:	99 27       	eor	r25, r25
   15c22:	89 2b       	or	r24, r25
   15c24:	51 f0       	breq	.+20     	; 0x15c3a <SS80_Transparent_State+0xf4>
   15c26:	81 e7       	ldi	r24, 0x71	; 113
   15c28:	90 e2       	ldi	r25, 0x20	; 32
   15c2a:	a0 e0       	ldi	r26, 0x00	; 0
   15c2c:	ed b7       	in	r30, 0x3d	; 61
   15c2e:	fe b7       	in	r31, 0x3e	; 62
   15c30:	81 83       	std	Z+1, r24	; 0x01
   15c32:	92 83       	std	Z+2, r25	; 0x02
   15c34:	a3 83       	std	Z+3, r26	; 0x03
   15c36:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15c3a:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15c3e:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15c42:	81 81       	ldd	r24, Z+1	; 0x01
   15c44:	90 e0       	ldi	r25, 0x00	; 0
   15c46:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   15c4a:	69 c0       	rjmp	.+210    	; 0x15d1e <SS80_Transparent_State+0x1d8>
   15c4c:	22 30       	cpi	r18, 0x02	; 2
   15c4e:	31 05       	cpc	r19, r1
   15c50:	51 f4       	brne	.+20     	; 0x15c66 <SS80_Transparent_State+0x120>
   15c52:	0b 5f       	subi	r16, 0xFB	; 251
   15c54:	1f 4f       	sbci	r17, 0xFF	; 255
   15c56:	80 73       	andi	r24, 0x30	; 48
   15c58:	99 27       	eor	r25, r25
   15c5a:	89 2b       	or	r24, r25
   15c5c:	09 f4       	brne	.+2      	; 0x15c60 <SS80_Transparent_State+0x11a>
   15c5e:	5f c0       	rjmp	.+190    	; 0x15d1e <SS80_Transparent_State+0x1d8>
   15c60:	84 e5       	ldi	r24, 0x54	; 84
   15c62:	90 e2       	ldi	r25, 0x20	; 32
   15c64:	0c c0       	rjmp	.+24     	; 0x15c7e <SS80_Transparent_State+0x138>
   15c66:	23 30       	cpi	r18, 0x03	; 3
   15c68:	31 05       	cpc	r19, r1
   15c6a:	91 f4       	brne	.+36     	; 0x15c90 <SS80_Transparent_State+0x14a>
   15c6c:	0b 5f       	subi	r16, 0xFB	; 251
   15c6e:	1f 4f       	sbci	r17, 0xFF	; 255
   15c70:	80 73       	andi	r24, 0x30	; 48
   15c72:	99 27       	eor	r25, r25
   15c74:	89 2b       	or	r24, r25
   15c76:	09 f4       	brne	.+2      	; 0x15c7a <SS80_Transparent_State+0x134>
   15c78:	52 c0       	rjmp	.+164    	; 0x15d1e <SS80_Transparent_State+0x1d8>
   15c7a:	86 e3       	ldi	r24, 0x36	; 54
   15c7c:	90 e2       	ldi	r25, 0x20	; 32
   15c7e:	a0 e0       	ldi	r26, 0x00	; 0
   15c80:	ed b7       	in	r30, 0x3d	; 61
   15c82:	fe b7       	in	r31, 0x3e	; 62
   15c84:	81 83       	std	Z+1, r24	; 0x01
   15c86:	92 83       	std	Z+2, r25	; 0x02
   15c88:	a3 83       	std	Z+3, r26	; 0x03
   15c8a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15c8e:	47 c0       	rjmp	.+142    	; 0x15d1e <SS80_Transparent_State+0x1d8>
   15c90:	28 30       	cpi	r18, 0x08	; 8
   15c92:	31 05       	cpc	r19, r1
   15c94:	e1 f4       	brne	.+56     	; 0x15cce <SS80_Transparent_State+0x188>
   15c96:	85 ff       	sbrs	r24, 5
   15c98:	12 c0       	rjmp	.+36     	; 0x15cbe <SS80_Transparent_State+0x178>
   15c9a:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15c9e:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15ca2:	85 81       	ldd	r24, Z+5	; 0x05
   15ca4:	90 e0       	ldi	r25, 0x00	; 0
   15ca6:	ed b7       	in	r30, 0x3d	; 61
   15ca8:	fe b7       	in	r31, 0x3e	; 62
   15caa:	95 83       	std	Z+5, r25	; 0x05
   15cac:	84 83       	std	Z+4, r24	; 0x04
   15cae:	8f e0       	ldi	r24, 0x0F	; 15
   15cb0:	90 e2       	ldi	r25, 0x20	; 32
   15cb2:	a0 e0       	ldi	r26, 0x00	; 0
   15cb4:	81 83       	std	Z+1, r24	; 0x01
   15cb6:	92 83       	std	Z+2, r25	; 0x02
   15cb8:	a3 83       	std	Z+3, r26	; 0x03
   15cba:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15cbe:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15cc2:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15cc6:	85 81       	ldd	r24, Z+5	; 0x05
   15cc8:	90 e0       	ldi	r25, 0x00	; 0
   15cca:	aa de       	rcall	.-684    	; 0x15a20 <SS80_Channel_Independent_Clear>
   15ccc:	44 c0       	rjmp	.+136    	; 0x15d56 <SS80_Transparent_State+0x210>
   15cce:	29 30       	cpi	r18, 0x09	; 9
   15cd0:	31 05       	cpc	r19, r1
   15cd2:	b1 f4       	brne	.+44     	; 0x15d00 <SS80_Transparent_State+0x1ba>
   15cd4:	85 ff       	sbrs	r24, 5
   15cd6:	12 c0       	rjmp	.+36     	; 0x15cfc <SS80_Transparent_State+0x1b6>
   15cd8:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15cdc:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15ce0:	85 81       	ldd	r24, Z+5	; 0x05
   15ce2:	90 e0       	ldi	r25, 0x00	; 0
   15ce4:	ed b7       	in	r30, 0x3d	; 61
   15ce6:	fe b7       	in	r31, 0x3e	; 62
   15ce8:	95 83       	std	Z+5, r25	; 0x05
   15cea:	84 83       	std	Z+4, r24	; 0x04
   15cec:	8b ef       	ldi	r24, 0xFB	; 251
   15cee:	9f e1       	ldi	r25, 0x1F	; 31
   15cf0:	a0 e0       	ldi	r26, 0x00	; 0
   15cf2:	81 83       	std	Z+1, r24	; 0x01
   15cf4:	92 83       	std	Z+2, r25	; 0x02
   15cf6:	a3 83       	std	Z+3, r26	; 0x03
   15cf8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15cfc:	13 df       	rcall	.-474    	; 0x15b24 <SS80_Cancel>
   15cfe:	2b c0       	rjmp	.+86     	; 0x15d56 <SS80_Transparent_State+0x210>
   15d00:	80 ff       	sbrs	r24, 0
   15d02:	22 c0       	rjmp	.+68     	; 0x15d48 <SS80_Transparent_State+0x202>
   15d04:	ed b7       	in	r30, 0x3d	; 61
   15d06:	fe b7       	in	r31, 0x3e	; 62
   15d08:	35 83       	std	Z+5, r19	; 0x05
   15d0a:	24 83       	std	Z+4, r18	; 0x04
   15d0c:	8b ed       	ldi	r24, 0xDB	; 219
   15d0e:	9f e1       	ldi	r25, 0x1F	; 31
   15d10:	a0 e0       	ldi	r26, 0x00	; 0
   15d12:	81 83       	std	Z+1, r24	; 0x01
   15d14:	92 83       	std	Z+2, r25	; 0x02
   15d16:	a3 83       	std	Z+3, r26	; 0x03
   15d18:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15d1c:	86 01       	movw	r16, r12
   15d1e:	0e 15       	cp	r16, r14
   15d20:	1f 05       	cpc	r17, r15
   15d22:	91 f0       	breq	.+36     	; 0x15d48 <SS80_Transparent_State+0x202>
   15d24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d28:	80 ff       	sbrs	r24, 0
   15d2a:	0e c0       	rjmp	.+28     	; 0x15d48 <SS80_Transparent_State+0x202>
   15d2c:	ed b7       	in	r30, 0x3d	; 61
   15d2e:	fe b7       	in	r31, 0x3e	; 62
   15d30:	f7 82       	std	Z+7, r15	; 0x07
   15d32:	e6 82       	std	Z+6, r14	; 0x06
   15d34:	15 83       	std	Z+5, r17	; 0x05
   15d36:	04 83       	std	Z+4, r16	; 0x04
   15d38:	8f e9       	ldi	r24, 0x9F	; 159
   15d3a:	9f e1       	ldi	r25, 0x1F	; 31
   15d3c:	a0 e0       	ldi	r26, 0x00	; 0
   15d3e:	81 83       	std	Z+1, r24	; 0x01
   15d40:	92 83       	std	Z+2, r25	; 0x02
   15d42:	a3 83       	std	Z+3, r26	; 0x03
   15d44:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15d48:	88 85       	ldd	r24, Y+8	; 0x08
   15d4a:	99 85       	ldd	r25, Y+9	; 0x09
   15d4c:	88 27       	eor	r24, r24
   15d4e:	90 7d       	andi	r25, 0xD0	; 208
   15d50:	02 c0       	rjmp	.+4      	; 0x15d56 <SS80_Transparent_State+0x210>
   15d52:	80 e0       	ldi	r24, 0x00	; 0
   15d54:	90 e0       	ldi	r25, 0x00	; 0
   15d56:	29 96       	adiw	r28, 0x09	; 9
   15d58:	ea e0       	ldi	r30, 0x0A	; 10
   15d5a:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

00015d5e <SS80_error_return>:
   15d5e:	a6 e0       	ldi	r26, 0x06	; 6
   15d60:	b0 e0       	ldi	r27, 0x00	; 0
   15d62:	e5 eb       	ldi	r30, 0xB5	; 181
   15d64:	fe ea       	ldi	r31, 0xAE	; 174
   15d66:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   15d6a:	80 e0       	ldi	r24, 0x00	; 0
   15d6c:	91 e0       	ldi	r25, 0x01	; 1
   15d6e:	9d 83       	std	Y+5, r25	; 0x05
   15d70:	8c 83       	std	Y+4, r24	; 0x04
   15d72:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15d76:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15d7a:	81 e0       	ldi	r24, 0x01	; 1
   15d7c:	82 83       	std	Z+2, r24	; 0x02
   15d7e:	8e 83       	std	Y+6, r24	; 0x06
   15d80:	ae 01       	movw	r20, r28
   15d82:	4c 5f       	subi	r20, 0xFC	; 252
   15d84:	5f 4f       	sbci	r21, 0xFF	; 255
   15d86:	61 e0       	ldi	r22, 0x01	; 1
   15d88:	70 e0       	ldi	r23, 0x00	; 0
   15d8a:	ce 01       	movw	r24, r28
   15d8c:	06 96       	adiw	r24, 0x06	; 6
   15d8e:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   15d92:	01 97       	sbiw	r24, 0x01	; 1
   15d94:	99 f0       	breq	.+38     	; 0x15dbc <SS80_error_return+0x5e>
   15d96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d9a:	80 ff       	sbrs	r24, 0
   15d9c:	0a c0       	rjmp	.+20     	; 0x15db2 <SS80_error_return+0x54>
   15d9e:	8d ee       	ldi	r24, 0xED	; 237
   15da0:	9e e1       	ldi	r25, 0x1E	; 30
   15da2:	a0 e0       	ldi	r26, 0x00	; 0
   15da4:	ed b7       	in	r30, 0x3d	; 61
   15da6:	fe b7       	in	r31, 0x3e	; 62
   15da8:	81 83       	std	Z+1, r24	; 0x01
   15daa:	92 83       	std	Z+2, r25	; 0x02
   15dac:	a3 83       	std	Z+3, r26	; 0x03
   15dae:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15db2:	8c 81       	ldd	r24, Y+4	; 0x04
   15db4:	9d 81       	ldd	r25, Y+5	; 0x05
   15db6:	88 27       	eor	r24, r24
   15db8:	90 7d       	andi	r25, 0xD0	; 208
   15dba:	07 c0       	rjmp	.+14     	; 0x15dca <SS80_error_return+0x6c>
   15dbc:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15dc0:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15dc4:	12 82       	std	Z+2, r1	; 0x02
   15dc6:	80 e0       	ldi	r24, 0x00	; 0
   15dc8:	90 e0       	ldi	r25, 0x00	; 0
   15dca:	26 96       	adiw	r28, 0x06	; 6
   15dcc:	e2 e0       	ldi	r30, 0x02	; 2
   15dce:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00015dd2 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   15dd2:	a7 e1       	ldi	r26, 0x17	; 23
   15dd4:	b0 e0       	ldi	r27, 0x00	; 0
   15dd6:	ef ee       	ldi	r30, 0xEF	; 239
   15dd8:	fe ea       	ldi	r31, 0xAE	; 174
   15dda:	0c 94 ea e3 	jmp	0x1c7d4	; 0x1c7d4 <__prologue_saves__+0x2>
   15dde:	60 91 73 19 	lds	r22, 0x1973	; 0x801973 <SS80s>
   15de2:	70 91 74 19 	lds	r23, 0x1974	; 0x801974 <SS80s+0x1>
   15de6:	fb 01       	movw	r30, r22
   15de8:	27 81       	ldd	r18, Z+7	; 0x07
   15dea:	30 85       	ldd	r19, Z+8	; 0x08
   15dec:	41 85       	ldd	r20, Z+9	; 0x09
   15dee:	52 85       	ldd	r21, Z+10	; 0x0a
   15df0:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <SS80p>
   15df4:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <SS80p+0x1>
   15df8:	fc 01       	movw	r30, r24
   15dfa:	a0 89       	ldd	r26, Z+16	; 0x10
   15dfc:	b1 89       	ldd	r27, Z+17	; 0x11
   15dfe:	fb 01       	movw	r30, r22
   15e00:	12 82       	std	Z+2, r1	; 0x02
   15e02:	1d 86       	std	Y+13, r1	; 0x0d
   15e04:	1c 86       	std	Y+12, r1	; 0x0c
   15e06:	54 98       	cbi	0x0a, 4	; 10
   15e08:	4c 99       	sbic	0x09, 4	; 9
   15e0a:	03 c0       	rjmp	.+6      	; 0x15e12 <SS80_locate_and_read+0x40>
   15e0c:	80 e0       	ldi	r24, 0x00	; 0
   15e0e:	90 e1       	ldi	r25, 0x10	; 16
   15e10:	3e c1       	rjmp	.+636    	; 0x1608e <SS80_locate_and_read+0x2bc>
   15e12:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__muluhisi3>
   15e16:	4b 01       	movw	r8, r22
   15e18:	5c 01       	movw	r10, r24
   15e1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e1e:	85 ff       	sbrs	r24, 5
   15e20:	1a c0       	rjmp	.+52     	; 0x15e56 <SS80_locate_and_read+0x84>
   15e22:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15e26:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15e2a:	83 85       	ldd	r24, Z+11	; 0x0b
   15e2c:	94 85       	ldd	r25, Z+12	; 0x0c
   15e2e:	a5 85       	ldd	r26, Z+13	; 0x0d
   15e30:	b6 85       	ldd	r27, Z+14	; 0x0e
   15e32:	ed b7       	in	r30, 0x3d	; 61
   15e34:	fe b7       	in	r31, 0x3e	; 62
   15e36:	80 87       	std	Z+8, r24	; 0x08
   15e38:	91 87       	std	Z+9, r25	; 0x09
   15e3a:	a2 87       	std	Z+10, r26	; 0x0a
   15e3c:	b3 87       	std	Z+11, r27	; 0x0b
   15e3e:	84 82       	std	Z+4, r8	; 0x04
   15e40:	95 82       	std	Z+5, r9	; 0x05
   15e42:	a6 82       	std	Z+6, r10	; 0x06
   15e44:	b7 82       	std	Z+7, r11	; 0x07
   15e46:	87 ec       	ldi	r24, 0xC7	; 199
   15e48:	95 e2       	ldi	r25, 0x25	; 37
   15e4a:	a0 e0       	ldi	r26, 0x00	; 0
   15e4c:	81 83       	std	Z+1, r24	; 0x01
   15e4e:	92 83       	std	Z+2, r25	; 0x02
   15e50:	a3 83       	std	Z+3, r26	; 0x03
   15e52:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15e56:	2b db       	rcall	.-2474   	; 0x154ae <SS80_cmd_seek>
   15e58:	89 2b       	or	r24, r25
   15e5a:	09 f0       	breq	.+2      	; 0x15e5e <SS80_locate_and_read+0x8c>
   15e5c:	ae c0       	rjmp	.+348    	; 0x15fba <SS80_locate_and_read+0x1e8>
   15e5e:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15e62:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15e66:	43 84       	ldd	r4, Z+11	; 0x0b
   15e68:	54 84       	ldd	r5, Z+12	; 0x0c
   15e6a:	65 84       	ldd	r6, Z+13	; 0x0d
   15e6c:	76 84       	ldd	r7, Z+14	; 0x0e
   15e6e:	1e 86       	std	Y+14, r1	; 0x0e
   15e70:	1f 86       	std	Y+15, r1	; 0x0f
   15e72:	18 8a       	std	Y+16, r1	; 0x10
   15e74:	19 8a       	std	Y+17, r1	; 0x11
   15e76:	89 ea       	ldi	r24, 0xA9	; 169
   15e78:	95 e2       	ldi	r25, 0x25	; 37
   15e7a:	9c 01       	movw	r18, r24
   15e7c:	40 e0       	ldi	r20, 0x00	; 0
   15e7e:	2a 8b       	std	Y+18, r18	; 0x12
   15e80:	3b 8b       	std	Y+19, r19	; 0x13
   15e82:	4c 8b       	std	Y+20, r20	; 0x14
   15e84:	33 24       	eor	r3, r3
   15e86:	33 94       	inc	r3
   15e88:	88 e7       	ldi	r24, 0x78	; 120
   15e8a:	95 e2       	ldi	r25, 0x25	; 37
   15e8c:	9c 01       	movw	r18, r24
   15e8e:	40 e0       	ldi	r20, 0x00	; 0
   15e90:	2d 8b       	std	Y+21, r18	; 0x15
   15e92:	3e 8b       	std	Y+22, r19	; 0x16
   15e94:	4f 8b       	std	Y+23, r20	; 0x17
   15e96:	34 c0       	rjmp	.+104    	; 0x15f00 <SS80_locate_and_read+0x12e>
   15e98:	87 fd       	sbrc	r24, 7
   15e9a:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   15e9e:	ae 01       	movw	r20, r28
   15ea0:	44 5f       	subi	r20, 0xF4	; 244
   15ea2:	5f 4f       	sbci	r21, 0xFF	; 255
   15ea4:	b6 01       	movw	r22, r12
   15ea6:	86 ef       	ldi	r24, 0xF6	; 246
   15ea8:	9c e1       	ldi	r25, 0x1C	; 28
   15eaa:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   15eae:	8c 01       	movw	r16, r24
   15eb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15eb4:	87 ff       	sbrs	r24, 7
   15eb6:	04 c0       	rjmp	.+8      	; 0x15ec0 <SS80_locate_and_read+0xee>
   15eb8:	8c ea       	ldi	r24, 0xAC	; 172
   15eba:	90 e1       	ldi	r25, 0x10	; 16
   15ebc:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   15ec0:	c0 16       	cp	r12, r16
   15ec2:	d1 06       	cpc	r13, r17
   15ec4:	09 f0       	breq	.+2      	; 0x15ec8 <SS80_locate_and_read+0xf6>
   15ec6:	82 c0       	rjmp	.+260    	; 0x15fcc <SS80_locate_and_read+0x1fa>
   15ec8:	0d 2c       	mov	r0, r13
   15eca:	00 0c       	add	r0, r0
   15ecc:	ee 08       	sbc	r14, r14
   15ece:	ff 08       	sbc	r15, r15
   15ed0:	8c 0c       	add	r8, r12
   15ed2:	9d 1c       	adc	r9, r13
   15ed4:	ae 1c       	adc	r10, r14
   15ed6:	bf 1c       	adc	r11, r15
   15ed8:	01 2e       	mov	r0, r17
   15eda:	00 0c       	add	r0, r0
   15edc:	22 0b       	sbc	r18, r18
   15ede:	33 0b       	sbc	r19, r19
   15ee0:	8e 85       	ldd	r24, Y+14	; 0x0e
   15ee2:	9f 85       	ldd	r25, Y+15	; 0x0f
   15ee4:	a8 89       	ldd	r26, Y+16	; 0x10
   15ee6:	b9 89       	ldd	r27, Y+17	; 0x11
   15ee8:	80 0f       	add	r24, r16
   15eea:	91 1f       	adc	r25, r17
   15eec:	a2 1f       	adc	r26, r18
   15eee:	b3 1f       	adc	r27, r19
   15ef0:	8e 87       	std	Y+14, r24	; 0x0e
   15ef2:	9f 87       	std	Y+15, r25	; 0x0f
   15ef4:	a8 8b       	std	Y+16, r26	; 0x10
   15ef6:	b9 8b       	std	Y+17, r27	; 0x11
   15ef8:	40 1a       	sub	r4, r16
   15efa:	51 0a       	sbc	r5, r17
   15efc:	62 0a       	sbc	r6, r18
   15efe:	73 0a       	sbc	r7, r19
   15f00:	41 14       	cp	r4, r1
   15f02:	51 04       	cpc	r5, r1
   15f04:	61 04       	cpc	r6, r1
   15f06:	71 04       	cpc	r7, r1
   15f08:	09 f4       	brne	.+2      	; 0x15f0c <SS80_locate_and_read+0x13a>
   15f0a:	92 c0       	rjmp	.+292    	; 0x16030 <SS80_locate_and_read+0x25e>
   15f0c:	54 98       	cbi	0x0a, 4	; 10
   15f0e:	4c 9b       	sbis	0x09, 4	; 9
   15f10:	7d cf       	rjmp	.-262    	; 0x15e0c <SS80_locate_and_read+0x3a>
   15f12:	31 e0       	ldi	r19, 0x01	; 1
   15f14:	43 16       	cp	r4, r19
   15f16:	53 06       	cpc	r5, r19
   15f18:	61 04       	cpc	r6, r1
   15f1a:	71 04       	cpc	r7, r1
   15f1c:	08 f4       	brcc	.+2      	; 0x15f20 <SS80_locate_and_read+0x14e>
   15f1e:	4f c0       	rjmp	.+158    	; 0x15fbe <SS80_locate_and_read+0x1ec>
   15f20:	1d 86       	std	Y+13, r1	; 0x0d
   15f22:	1c 86       	std	Y+12, r1	; 0x0c
   15f24:	c1 2c       	mov	r12, r1
   15f26:	dd 24       	eor	r13, r13
   15f28:	d3 94       	inc	r13
   15f2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f2e:	86 fd       	sbrc	r24, 6
   15f30:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   15f34:	e0 90 73 19 	lds	r14, 0x1973	; 0x801973 <SS80s>
   15f38:	f0 90 74 19 	lds	r15, 0x1974	; 0x801974 <SS80s+0x1>
   15f3c:	43 e0       	ldi	r20, 0x03	; 3
   15f3e:	e4 0e       	add	r14, r20
   15f40:	f1 1c       	adc	r15, r1
   15f42:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15f46:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15f4a:	86 01       	movw	r16, r12
   15f4c:	26 ef       	ldi	r18, 0xF6	; 246
   15f4e:	3c e1       	ldi	r19, 0x1C	; 28
   15f50:	b5 01       	movw	r22, r10
   15f52:	a4 01       	movw	r20, r8
   15f54:	82 81       	ldd	r24, Z+2	; 0x02
   15f56:	93 81       	ldd	r25, Z+3	; 0x03
   15f58:	0e 94 49 86 	call	0x10c92	; 0x10c92 <dbf_open_read>
   15f5c:	8c 01       	movw	r16, r24
   15f5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f62:	86 ff       	sbrs	r24, 6
   15f64:	04 c0       	rjmp	.+8      	; 0x15f6e <SS80_locate_and_read+0x19c>
   15f66:	81 ea       	ldi	r24, 0xA1	; 161
   15f68:	90 e1       	ldi	r25, 0x10	; 16
   15f6a:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   15f6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f72:	85 ff       	sbrs	r24, 5
   15f74:	0c c0       	rjmp	.+24     	; 0x15f8e <SS80_locate_and_read+0x1bc>
   15f76:	ed b7       	in	r30, 0x3d	; 61
   15f78:	fe b7       	in	r31, 0x3e	; 62
   15f7a:	15 83       	std	Z+5, r17	; 0x05
   15f7c:	04 83       	std	Z+4, r16	; 0x04
   15f7e:	2a 89       	ldd	r18, Y+18	; 0x12
   15f80:	3b 89       	ldd	r19, Y+19	; 0x13
   15f82:	4c 89       	ldd	r20, Y+20	; 0x14
   15f84:	21 83       	std	Z+1, r18	; 0x01
   15f86:	32 83       	std	Z+2, r19	; 0x02
   15f88:	43 83       	std	Z+3, r20	; 0x03
   15f8a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15f8e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f92:	17 ff       	sbrs	r17, 7
   15f94:	81 cf       	rjmp	.-254    	; 0x15e98 <SS80_locate_and_read+0xc6>
   15f96:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15f9a:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15f9e:	91 e0       	ldi	r25, 0x01	; 1
   15fa0:	92 83       	std	Z+2, r25	; 0x02
   15fa2:	80 ff       	sbrs	r24, 0
   15fa4:	0a c0       	rjmp	.+20     	; 0x15fba <SS80_locate_and_read+0x1e8>
   15fa6:	81 e9       	ldi	r24, 0x91	; 145
   15fa8:	95 e2       	ldi	r25, 0x25	; 37
   15faa:	a0 e0       	ldi	r26, 0x00	; 0
   15fac:	ed b7       	in	r30, 0x3d	; 61
   15fae:	fe b7       	in	r31, 0x3e	; 62
   15fb0:	81 83       	std	Z+1, r24	; 0x01
   15fb2:	92 83       	std	Z+2, r25	; 0x02
   15fb4:	a3 83       	std	Z+3, r26	; 0x03
   15fb6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15fba:	d1 de       	rcall	.-606    	; 0x15d5e <SS80_error_return>
   15fbc:	68 c0       	rjmp	.+208    	; 0x1608e <SS80_locate_and_read+0x2bc>
   15fbe:	62 01       	movw	r12, r4
   15fc0:	8c 85       	ldd	r24, Y+12	; 0x0c
   15fc2:	9d 85       	ldd	r25, Y+13	; 0x0d
   15fc4:	91 60       	ori	r25, 0x01	; 1
   15fc6:	9d 87       	std	Y+13, r25	; 0x0d
   15fc8:	8c 87       	std	Y+12, r24	; 0x0c
   15fca:	af cf       	rjmp	.-162    	; 0x15f2a <SS80_locate_and_read+0x158>
   15fcc:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15fd0:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15fd4:	32 82       	std	Z+2, r3	; 0x02
   15fd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fda:	80 ff       	sbrs	r24, 0
   15fdc:	0a c0       	rjmp	.+20     	; 0x15ff2 <SS80_locate_and_read+0x220>
   15fde:	2d 89       	ldd	r18, Y+21	; 0x15
   15fe0:	3e 89       	ldd	r19, Y+22	; 0x16
   15fe2:	4f 89       	ldd	r20, Y+23	; 0x17
   15fe4:	ed b7       	in	r30, 0x3d	; 61
   15fe6:	fe b7       	in	r31, 0x3e	; 62
   15fe8:	21 83       	std	Z+1, r18	; 0x01
   15fea:	32 83       	std	Z+2, r19	; 0x02
   15fec:	43 83       	std	Z+3, r20	; 0x03
   15fee:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   15ff2:	8c 85       	ldd	r24, Y+12	; 0x0c
   15ff4:	9d 85       	ldd	r25, Y+13	; 0x0d
   15ff6:	88 27       	eor	r24, r24
   15ff8:	90 7d       	andi	r25, 0xD0	; 208
   15ffa:	89 2b       	or	r24, r25
   15ffc:	09 f4       	brne	.+2      	; 0x16000 <SS80_locate_and_read+0x22e>
   15ffe:	64 cf       	rjmp	.-312    	; 0x15ec8 <SS80_locate_and_read+0xf6>
   16000:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   16004:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   16008:	83 81       	ldd	r24, Z+3	; 0x03
   1600a:	94 81       	ldd	r25, Z+4	; 0x04
   1600c:	80 62       	ori	r24, 0x20	; 32
   1600e:	94 83       	std	Z+4, r25	; 0x04
   16010:	83 83       	std	Z+3, r24	; 0x03
   16012:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16016:	80 ff       	sbrs	r24, 0
   16018:	21 c0       	rjmp	.+66     	; 0x1605c <SS80_locate_and_read+0x28a>
   1601a:	83 e5       	ldi	r24, 0x53	; 83
   1601c:	95 e2       	ldi	r25, 0x25	; 37
   1601e:	a0 e0       	ldi	r26, 0x00	; 0
   16020:	ed b7       	in	r30, 0x3d	; 61
   16022:	fe b7       	in	r31, 0x3e	; 62
   16024:	81 83       	std	Z+1, r24	; 0x01
   16026:	92 83       	std	Z+2, r25	; 0x02
   16028:	a3 83       	std	Z+3, r26	; 0x03
   1602a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1602e:	16 c0       	rjmp	.+44     	; 0x1605c <SS80_locate_and_read+0x28a>
   16030:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16034:	85 ff       	sbrs	r24, 5
   16036:	12 c0       	rjmp	.+36     	; 0x1605c <SS80_locate_and_read+0x28a>
   16038:	8e 85       	ldd	r24, Y+14	; 0x0e
   1603a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1603c:	a8 89       	ldd	r26, Y+16	; 0x10
   1603e:	b9 89       	ldd	r27, Y+17	; 0x11
   16040:	ed b7       	in	r30, 0x3d	; 61
   16042:	fe b7       	in	r31, 0x3e	; 62
   16044:	84 83       	std	Z+4, r24	; 0x04
   16046:	95 83       	std	Z+5, r25	; 0x05
   16048:	a6 83       	std	Z+6, r26	; 0x06
   1604a:	b7 83       	std	Z+7, r27	; 0x07
   1604c:	8b e2       	ldi	r24, 0x2B	; 43
   1604e:	95 e2       	ldi	r25, 0x25	; 37
   16050:	a0 e0       	ldi	r26, 0x00	; 0
   16052:	81 83       	std	Z+1, r24	; 0x01
   16054:	92 83       	std	Z+2, r25	; 0x02
   16056:	a3 83       	std	Z+3, r26	; 0x03
   16058:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1605c:	00 91 73 19 	lds	r16, 0x1973	; 0x801973 <SS80s>
   16060:	10 91 74 19 	lds	r17, 0x1974	; 0x801974 <SS80s+0x1>
   16064:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   16068:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1606c:	20 89       	ldd	r18, Z+16	; 0x10
   1606e:	31 89       	ldd	r19, Z+17	; 0x11
   16070:	40 e0       	ldi	r20, 0x00	; 0
   16072:	50 e0       	ldi	r21, 0x00	; 0
   16074:	c5 01       	movw	r24, r10
   16076:	b4 01       	movw	r22, r8
   16078:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__udivmodsi4>
   1607c:	f8 01       	movw	r30, r16
   1607e:	27 83       	std	Z+7, r18	; 0x07
   16080:	30 87       	std	Z+8, r19	; 0x08
   16082:	41 87       	std	Z+9, r20	; 0x09
   16084:	52 87       	std	Z+10, r21	; 0x0a
   16086:	8c 85       	ldd	r24, Y+12	; 0x0c
   16088:	9d 85       	ldd	r25, Y+13	; 0x0d
   1608a:	88 27       	eor	r24, r24
   1608c:	90 7d       	andi	r25, 0xD0	; 208
   1608e:	67 96       	adiw	r28, 0x17	; 23
   16090:	e1 e1       	ldi	r30, 0x11	; 17
   16092:	0c 94 06 e4 	jmp	0x1c80c	; 0x1c80c <__epilogue_restores__+0x2>

00016096 <SS80_Execute_State>:
   16096:	cf 93       	push	r28
   16098:	df 93       	push	r29
   1609a:	00 d0       	rcall	.+0      	; 0x1609c <SS80_Execute_State+0x6>
   1609c:	00 d0       	rcall	.+0      	; 0x1609e <SS80_Execute_State+0x8>
   1609e:	1f 92       	push	r1
   160a0:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   160a4:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   160a8:	81 81       	ldd	r24, Z+1	; 0x01
   160aa:	90 e0       	ldi	r25, 0x00	; 0
   160ac:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
   160b0:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   160b4:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   160b8:	80 81       	ld	r24, Z
   160ba:	91 81       	ldd	r25, Z+1	; 0x01
   160bc:	82 30       	cpi	r24, 0x02	; 2
   160be:	91 05       	cpc	r25, r1
   160c0:	89 f0       	breq	.+34     	; 0x160e4 <SS80_Execute_State+0x4e>
   160c2:	3c f4       	brge	.+14     	; 0x160d2 <SS80_Execute_State+0x3c>
   160c4:	00 97       	sbiw	r24, 0x00	; 0
   160c6:	81 f1       	breq	.+96     	; 0x16128 <SS80_Execute_State+0x92>
   160c8:	81 30       	cpi	r24, 0x01	; 1
   160ca:	91 05       	cpc	r25, r1
   160cc:	b9 f4       	brne	.+46     	; 0x160fc <SS80_Execute_State+0x66>
   160ce:	81 de       	rcall	.-766    	; 0x15dd2 <SS80_locate_and_read>
   160d0:	0d c0       	rjmp	.+26     	; 0x160ec <SS80_Execute_State+0x56>
   160d2:	83 30       	cpi	r24, 0x03	; 3
   160d4:	91 05       	cpc	r25, r1
   160d6:	41 f0       	breq	.+16     	; 0x160e8 <SS80_Execute_State+0x52>
   160d8:	84 30       	cpi	r24, 0x04	; 4
   160da:	91 05       	cpc	r25, r1
   160dc:	79 f4       	brne	.+30     	; 0x160fc <SS80_Execute_State+0x66>
   160de:	0e 94 20 a7 	call	0x14e40	; 0x14e40 <SS80_describe>
   160e2:	04 c0       	rjmp	.+8      	; 0x160ec <SS80_Execute_State+0x56>
   160e4:	59 da       	rcall	.-2894   	; 0x15598 <SS80_locate_and_write>
   160e6:	02 c0       	rjmp	.+4      	; 0x160ec <SS80_Execute_State+0x56>
   160e8:	0e 94 9f a6 	call	0x14d3e	; 0x14d3e <SS80_send_status>
   160ec:	ec 01       	movw	r28, r24
   160ee:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   160f2:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   160f6:	11 82       	std	Z+1, r1	; 0x01
   160f8:	10 82       	st	Z, r1
   160fa:	18 c0       	rjmp	.+48     	; 0x1612c <SS80_Execute_State+0x96>
   160fc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16100:	20 ff       	sbrs	r18, 0
   16102:	0c c0       	rjmp	.+24     	; 0x1611c <SS80_Execute_State+0x86>
   16104:	ed b7       	in	r30, 0x3d	; 61
   16106:	fe b7       	in	r31, 0x3e	; 62
   16108:	95 83       	std	Z+5, r25	; 0x05
   1610a:	84 83       	std	Z+4, r24	; 0x04
   1610c:	8f ee       	ldi	r24, 0xEF	; 239
   1610e:	95 e2       	ldi	r25, 0x25	; 37
   16110:	a0 e0       	ldi	r26, 0x00	; 0
   16112:	81 83       	std	Z+1, r24	; 0x01
   16114:	92 83       	std	Z+2, r25	; 0x02
   16116:	a3 83       	std	Z+3, r26	; 0x03
   16118:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1611c:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   16120:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   16124:	11 82       	std	Z+1, r1	; 0x01
   16126:	10 82       	st	Z, r1
   16128:	c0 e0       	ldi	r28, 0x00	; 0
   1612a:	d0 e0       	ldi	r29, 0x00	; 0
   1612c:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   16130:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   16134:	81 81       	ldd	r24, Z+1	; 0x01
   16136:	90 e0       	ldi	r25, 0x00	; 0
   16138:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   1613c:	ce 01       	movw	r24, r28
   1613e:	cd b7       	in	r28, 0x3d	; 61
   16140:	de b7       	in	r29, 0x3e	; 62
   16142:	25 96       	adiw	r28, 0x05	; 5
   16144:	e2 e0       	ldi	r30, 0x02	; 2
   16146:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

0001614a <SS80_COMMANDS>:
   1614a:	a9 e0       	ldi	r26, 0x09	; 9
   1614c:	b0 e0       	ldi	r27, 0x00	; 0
   1614e:	eb ea       	ldi	r30, 0xAB	; 171
   16150:	f0 eb       	ldi	r31, 0xB0	; 176
   16152:	0c 94 f8 e3 	jmp	0x1c7f0	; 0x1c7f0 <__prologue_saves__+0x1e>
   16156:	18 2f       	mov	r17, r24
   16158:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1615c:	90 e0       	ldi	r25, 0x00	; 0
   1615e:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <SS80_is_MTA>
   16162:	89 2b       	or	r24, r25
   16164:	19 f0       	breq	.+6      	; 0x1616c <SS80_COMMANDS+0x22>
   16166:	15 36       	cpi	r17, 0x65	; 101
   16168:	19 f5       	brne	.+70     	; 0x161b0 <SS80_COMMANDS+0x66>
   1616a:	09 c0       	rjmp	.+18     	; 0x1617e <SS80_COMMANDS+0x34>
   1616c:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16170:	90 e0       	ldi	r25, 0x00	; 0
   16172:	0e 94 0b 8e 	call	0x11c16	; 0x11c16 <SS80_is_MLA>
   16176:	ec 01       	movw	r28, r24
   16178:	89 2b       	or	r24, r25
   1617a:	a9 f7       	brne	.-22     	; 0x16166 <SS80_COMMANDS+0x1c>
   1617c:	ad c0       	rjmp	.+346    	; 0x162d8 <SS80_COMMANDS+0x18e>
   1617e:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16182:	90 e0       	ldi	r25, 0x00	; 0
   16184:	0e 94 0b 8e 	call	0x11c16	; 0x11c16 <SS80_is_MLA>
   16188:	89 2b       	or	r24, r25
   1618a:	09 f4       	brne	.+2      	; 0x1618e <SS80_COMMANDS+0x44>
   1618c:	a2 c0       	rjmp	.+324    	; 0x162d2 <SS80_COMMANDS+0x188>
   1618e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16192:	85 ff       	sbrs	r24, 5
   16194:	0a c0       	rjmp	.+20     	; 0x161aa <SS80_COMMANDS+0x60>
   16196:	87 ed       	ldi	r24, 0xD7	; 215
   16198:	9e e1       	ldi	r25, 0x1E	; 30
   1619a:	a0 e0       	ldi	r26, 0x00	; 0
   1619c:	ed b7       	in	r30, 0x3d	; 61
   1619e:	fe b7       	in	r31, 0x3e	; 62
   161a0:	81 83       	std	Z+1, r24	; 0x01
   161a2:	92 83       	std	Z+2, r25	; 0x02
   161a4:	a3 83       	std	Z+3, r26	; 0x03
   161a6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   161aa:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <SS80_Command_State>
   161ae:	73 c0       	rjmp	.+230    	; 0x16296 <SS80_COMMANDS+0x14c>
   161b0:	1e 36       	cpi	r17, 0x6E	; 110
   161b2:	01 f5       	brne	.+64     	; 0x161f4 <SS80_COMMANDS+0xaa>
   161b4:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   161b8:	90 e0       	ldi	r25, 0x00	; 0
   161ba:	0e 94 0b 8e 	call	0x11c16	; 0x11c16 <SS80_is_MLA>
   161be:	89 2b       	or	r24, r25
   161c0:	79 f0       	breq	.+30     	; 0x161e0 <SS80_COMMANDS+0x96>
   161c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161c6:	85 ff       	sbrs	r24, 5
   161c8:	13 c0       	rjmp	.+38     	; 0x161f0 <SS80_COMMANDS+0xa6>
   161ca:	81 ec       	ldi	r24, 0xC1	; 193
   161cc:	9e e1       	ldi	r25, 0x1E	; 30
   161ce:	a0 e0       	ldi	r26, 0x00	; 0
   161d0:	ed b7       	in	r30, 0x3d	; 61
   161d2:	fe b7       	in	r31, 0x3e	; 62
   161d4:	81 83       	std	Z+1, r24	; 0x01
   161d6:	92 83       	std	Z+2, r25	; 0x02
   161d8:	a3 83       	std	Z+3, r26	; 0x03
   161da:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   161de:	08 c0       	rjmp	.+16     	; 0x161f0 <SS80_COMMANDS+0xa6>
   161e0:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   161e4:	90 e0       	ldi	r25, 0x00	; 0
   161e6:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <SS80_is_MTA>
   161ea:	89 2b       	or	r24, r25
   161ec:	51 f7       	brne	.-44     	; 0x161c2 <SS80_COMMANDS+0x78>
   161ee:	71 c0       	rjmp	.+226    	; 0x162d2 <SS80_COMMANDS+0x188>
   161f0:	52 df       	rcall	.-348    	; 0x16096 <SS80_Execute_State>
   161f2:	51 c0       	rjmp	.+162    	; 0x16296 <SS80_COMMANDS+0x14c>
   161f4:	10 37       	cpi	r17, 0x70	; 112
   161f6:	b9 f5       	brne	.+110    	; 0x16266 <SS80_COMMANDS+0x11c>
   161f8:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   161fc:	90 e0       	ldi	r25, 0x00	; 0
   161fe:	0e 94 1c 8e 	call	0x11c38	; 0x11c38 <SS80_is_MTA>
   16202:	89 2b       	or	r24, r25
   16204:	81 f0       	breq	.+32     	; 0x16226 <SS80_COMMANDS+0xdc>
   16206:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1620a:	85 ff       	sbrs	r24, 5
   1620c:	0a c0       	rjmp	.+20     	; 0x16222 <SS80_COMMANDS+0xd8>
   1620e:	8c ea       	ldi	r24, 0xAC	; 172
   16210:	9e e1       	ldi	r25, 0x1E	; 30
   16212:	a0 e0       	ldi	r26, 0x00	; 0
   16214:	ed b7       	in	r30, 0x3d	; 61
   16216:	fe b7       	in	r31, 0x3e	; 62
   16218:	81 83       	std	Z+1, r24	; 0x01
   1621a:	92 83       	std	Z+2, r25	; 0x02
   1621c:	a3 83       	std	Z+3, r26	; 0x03
   1621e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16222:	4c db       	rcall	.-2408   	; 0x158bc <SS80_Report>
   16224:	38 c0       	rjmp	.+112    	; 0x16296 <SS80_COMMANDS+0x14c>
   16226:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1622a:	90 e0       	ldi	r25, 0x00	; 0
   1622c:	0e 94 0b 8e 	call	0x11c16	; 0x11c16 <SS80_is_MLA>
   16230:	89 2b       	or	r24, r25
   16232:	09 f4       	brne	.+2      	; 0x16236 <SS80_COMMANDS+0xec>
   16234:	4e c0       	rjmp	.+156    	; 0x162d2 <SS80_COMMANDS+0x188>
   16236:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1623a:	85 ff       	sbrs	r24, 5
   1623c:	0a c0       	rjmp	.+20     	; 0x16252 <SS80_COMMANDS+0x108>
   1623e:	8d e9       	ldi	r24, 0x9D	; 157
   16240:	9e e1       	ldi	r25, 0x1E	; 30
   16242:	a0 e0       	ldi	r26, 0x00	; 0
   16244:	ed b7       	in	r30, 0x3d	; 61
   16246:	fe b7       	in	r31, 0x3e	; 62
   16248:	81 83       	std	Z+1, r24	; 0x01
   1624a:	92 83       	std	Z+2, r25	; 0x02
   1624c:	a3 83       	std	Z+3, r26	; 0x03
   1624e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16252:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   16256:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1625a:	81 81       	ldd	r24, Z+1	; 0x01
   1625c:	90 e0       	ldi	r25, 0x00	; 0
   1625e:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
   16262:	1d dc       	rcall	.-1990   	; 0x15a9e <SS80_Amigo_Clear>
   16264:	18 c0       	rjmp	.+48     	; 0x16296 <SS80_COMMANDS+0x14c>
   16266:	12 37       	cpi	r17, 0x72	; 114
   16268:	c1 f4       	brne	.+48     	; 0x1629a <SS80_COMMANDS+0x150>
   1626a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1626e:	90 e0       	ldi	r25, 0x00	; 0
   16270:	0e 94 0b 8e 	call	0x11c16	; 0x11c16 <SS80_is_MLA>
   16274:	89 2b       	or	r24, r25
   16276:	89 f0       	breq	.+34     	; 0x1629a <SS80_COMMANDS+0x150>
   16278:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1627c:	85 ff       	sbrs	r24, 5
   1627e:	0a c0       	rjmp	.+20     	; 0x16294 <SS80_COMMANDS+0x14a>
   16280:	89 e8       	ldi	r24, 0x89	; 137
   16282:	9e e1       	ldi	r25, 0x1E	; 30
   16284:	a0 e0       	ldi	r26, 0x00	; 0
   16286:	ed b7       	in	r30, 0x3d	; 61
   16288:	fe b7       	in	r31, 0x3e	; 62
   1628a:	81 83       	std	Z+1, r24	; 0x01
   1628c:	92 83       	std	Z+2, r25	; 0x02
   1628e:	a3 83       	std	Z+3, r26	; 0x03
   16290:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16294:	58 dc       	rcall	.-1872   	; 0x15b46 <SS80_Transparent_State>
   16296:	ec 01       	movw	r28, r24
   16298:	3b c0       	rjmp	.+118    	; 0x16310 <SS80_COMMANDS+0x1c6>
   1629a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1629e:	80 ff       	sbrs	r24, 0
   162a0:	18 c0       	rjmp	.+48     	; 0x162d2 <SS80_COMMANDS+0x188>
   162a2:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   162a6:	90 e0       	ldi	r25, 0x00	; 0
   162a8:	ed b7       	in	r30, 0x3d	; 61
   162aa:	fe b7       	in	r31, 0x3e	; 62
   162ac:	91 87       	std	Z+9, r25	; 0x09
   162ae:	80 87       	std	Z+8, r24	; 0x08
   162b0:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   162b4:	90 e0       	ldi	r25, 0x00	; 0
   162b6:	97 83       	std	Z+7, r25	; 0x07
   162b8:	86 83       	std	Z+6, r24	; 0x06
   162ba:	81 2f       	mov	r24, r17
   162bc:	90 e0       	ldi	r25, 0x00	; 0
   162be:	95 83       	std	Z+5, r25	; 0x05
   162c0:	84 83       	std	Z+4, r24	; 0x04
   162c2:	85 e5       	ldi	r24, 0x55	; 85
   162c4:	9e e1       	ldi	r25, 0x1E	; 30
   162c6:	a0 e0       	ldi	r26, 0x00	; 0
   162c8:	81 83       	std	Z+1, r24	; 0x01
   162ca:	92 83       	std	Z+2, r25	; 0x02
   162cc:	a3 83       	std	Z+3, r26	; 0x03
   162ce:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   162d2:	c0 e0       	ldi	r28, 0x00	; 0
   162d4:	d0 e0       	ldi	r29, 0x00	; 0
   162d6:	1c c0       	rjmp	.+56     	; 0x16310 <SS80_COMMANDS+0x1c6>
   162d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162dc:	80 ff       	sbrs	r24, 0
   162de:	f9 cf       	rjmp	.-14     	; 0x162d2 <SS80_COMMANDS+0x188>
   162e0:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   162e4:	90 e0       	ldi	r25, 0x00	; 0
   162e6:	ed b7       	in	r30, 0x3d	; 61
   162e8:	fe b7       	in	r31, 0x3e	; 62
   162ea:	91 87       	std	Z+9, r25	; 0x09
   162ec:	80 87       	std	Z+8, r24	; 0x08
   162ee:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   162f2:	90 e0       	ldi	r25, 0x00	; 0
   162f4:	97 83       	std	Z+7, r25	; 0x07
   162f6:	86 83       	std	Z+6, r24	; 0x06
   162f8:	81 2f       	mov	r24, r17
   162fa:	90 e0       	ldi	r25, 0x00	; 0
   162fc:	95 83       	std	Z+5, r25	; 0x05
   162fe:	84 83       	std	Z+4, r24	; 0x04
   16300:	81 e2       	ldi	r24, 0x21	; 33
   16302:	9e e1       	ldi	r25, 0x1E	; 30
   16304:	a0 e0       	ldi	r26, 0x00	; 0
   16306:	81 83       	std	Z+1, r24	; 0x01
   16308:	92 83       	std	Z+2, r25	; 0x02
   1630a:	a3 83       	std	Z+3, r26	; 0x03
   1630c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16310:	ce 01       	movw	r24, r28
   16312:	cd b7       	in	r28, 0x3d	; 61
   16314:	de b7       	in	r29, 0x3e	; 62
   16316:	29 96       	adiw	r28, 0x09	; 9
   16318:	e3 e0       	ldi	r30, 0x03	; 3
   1631a:	0c 94 14 e4 	jmp	0x1c828	; 0x1c828 <__epilogue_restores__+0x1e>

0001631e <amigo_overflow_check>:
   1631e:	cf 92       	push	r12
   16320:	df 92       	push	r13
   16322:	ef 92       	push	r14
   16324:	0f 93       	push	r16
   16326:	1f 93       	push	r17
   16328:	cf 93       	push	r28
   1632a:	df 93       	push	r29
   1632c:	00 d0       	rcall	.+0      	; 0x1632e <amigo_overflow_check+0x10>
   1632e:	00 d0       	rcall	.+0      	; 0x16330 <amigo_overflow_check+0x12>
   16330:	1f 92       	push	r1
   16332:	ec 01       	movw	r28, r24
   16334:	8b 01       	movw	r16, r22
   16336:	80 e0       	ldi	r24, 0x00	; 0
   16338:	90 e0       	ldi	r25, 0x00	; 0
   1633a:	29 eb       	ldi	r18, 0xB9	; 185
   1633c:	3d e2       	ldi	r19, 0x2D	; 45
   1633e:	69 01       	movw	r12, r18
   16340:	e1 2c       	mov	r14, r1
   16342:	2d 81       	ldd	r18, Y+5	; 0x05
   16344:	30 e0       	ldi	r19, 0x00	; 0
   16346:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1634a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1634e:	40 85       	ldd	r20, Z+8	; 0x08
   16350:	51 85       	ldd	r21, Z+9	; 0x09
   16352:	24 17       	cp	r18, r20
   16354:	35 07       	cpc	r19, r21
   16356:	64 f1       	brlt	.+88     	; 0x163b0 <amigo_overflow_check+0x92>
   16358:	1d 82       	std	Y+5, r1	; 0x05
   1635a:	2c 81       	ldd	r18, Y+4	; 0x04
   1635c:	2f 5f       	subi	r18, 0xFF	; 255
   1635e:	2c 83       	std	Y+4, r18	; 0x04
   16360:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16364:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16368:	2c 81       	ldd	r18, Y+4	; 0x04
   1636a:	30 e0       	ldi	r19, 0x00	; 0
   1636c:	42 85       	ldd	r20, Z+10	; 0x0a
   1636e:	53 85       	ldd	r21, Z+11	; 0x0b
   16370:	24 17       	cp	r18, r20
   16372:	35 07       	cpc	r19, r21
   16374:	34 f3       	brlt	.-52     	; 0x16342 <amigo_overflow_check+0x24>
   16376:	1c 82       	std	Y+4, r1	; 0x04
   16378:	2b 81       	ldd	r18, Y+3	; 0x03
   1637a:	2f 5f       	subi	r18, 0xFF	; 255
   1637c:	2b 83       	std	Y+3, r18	; 0x03
   1637e:	30 e0       	ldi	r19, 0x00	; 0
   16380:	44 85       	ldd	r20, Z+12	; 0x0c
   16382:	55 85       	ldd	r21, Z+13	; 0x0d
   16384:	24 17       	cp	r18, r20
   16386:	35 07       	cpc	r19, r21
   16388:	5c f3       	brlt	.-42     	; 0x16360 <amigo_overflow_check+0x42>
   1638a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1638e:	80 ff       	sbrs	r24, 0
   16390:	0c c0       	rjmp	.+24     	; 0x163aa <amigo_overflow_check+0x8c>
   16392:	01 15       	cp	r16, r1
   16394:	11 05       	cpc	r17, r1
   16396:	49 f0       	breq	.+18     	; 0x163aa <amigo_overflow_check+0x8c>
   16398:	ed b7       	in	r30, 0x3d	; 61
   1639a:	fe b7       	in	r31, 0x3e	; 62
   1639c:	15 83       	std	Z+5, r17	; 0x05
   1639e:	04 83       	std	Z+4, r16	; 0x04
   163a0:	c1 82       	std	Z+1, r12	; 0x01
   163a2:	d2 82       	std	Z+2, r13	; 0x02
   163a4:	e3 82       	std	Z+3, r14	; 0x03
   163a6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   163aa:	81 e0       	ldi	r24, 0x01	; 1
   163ac:	90 e0       	ldi	r25, 0x00	; 0
   163ae:	d8 cf       	rjmp	.-80     	; 0x16360 <amigo_overflow_check+0x42>
   163b0:	0f 90       	pop	r0
   163b2:	0f 90       	pop	r0
   163b4:	0f 90       	pop	r0
   163b6:	0f 90       	pop	r0
   163b8:	0f 90       	pop	r0
   163ba:	df 91       	pop	r29
   163bc:	cf 91       	pop	r28
   163be:	1f 91       	pop	r17
   163c0:	0f 91       	pop	r16
   163c2:	ef 90       	pop	r14
   163c4:	df 90       	pop	r13
   163c6:	cf 90       	pop	r12
   163c8:	08 95       	ret

000163ca <amigo_chs_to_logical>:
   163ca:	a1 e1       	ldi	r26, 0x11	; 17
   163cc:	b0 e0       	ldi	r27, 0x00	; 0
   163ce:	eb ee       	ldi	r30, 0xEB	; 235
   163d0:	f1 eb       	ldi	r31, 0xB1	; 177
   163d2:	0c 94 ed e3 	jmp	0x1c7da	; 0x1c7da <__prologue_saves__+0x8>
   163d6:	8b 01       	movw	r16, r22
   163d8:	60 91 71 19 	lds	r22, 0x1971	; 0x801971 <AMIGOp>
   163dc:	70 91 72 19 	lds	r23, 0x1972	; 0x801972 <AMIGOp+0x1>
   163e0:	fb 01       	movw	r30, r22
   163e2:	40 85       	ldd	r20, Z+8	; 0x08
   163e4:	51 85       	ldd	r21, Z+9	; 0x09
   163e6:	fc 01       	movw	r30, r24
   163e8:	c4 81       	ldd	r28, Z+4	; 0x04
   163ea:	d0 e0       	ldi	r29, 0x00	; 0
   163ec:	4c 9f       	mul	r20, r28
   163ee:	90 01       	movw	r18, r0
   163f0:	4d 9f       	mul	r20, r29
   163f2:	30 0d       	add	r19, r0
   163f4:	5c 9f       	mul	r21, r28
   163f6:	30 0d       	add	r19, r0
   163f8:	11 24       	eor	r1, r1
   163fa:	49 01       	movw	r8, r18
   163fc:	33 0f       	add	r19, r19
   163fe:	aa 08       	sbc	r10, r10
   16400:	bb 08       	sbc	r11, r11
   16402:	63 80       	ldd	r6, Z+3	; 0x03
   16404:	71 2c       	mov	r7, r1
   16406:	fb 01       	movw	r30, r22
   16408:	e2 84       	ldd	r14, Z+10	; 0x0a
   1640a:	f3 84       	ldd	r15, Z+11	; 0x0b
   1640c:	4e 9d       	mul	r20, r14
   1640e:	d0 01       	movw	r26, r0
   16410:	4f 9d       	mul	r20, r15
   16412:	b0 0d       	add	r27, r0
   16414:	5e 9d       	mul	r21, r14
   16416:	b0 0d       	add	r27, r0
   16418:	11 24       	eor	r1, r1
   1641a:	a6 9d       	mul	r26, r6
   1641c:	90 01       	movw	r18, r0
   1641e:	a7 9d       	mul	r26, r7
   16420:	30 0d       	add	r19, r0
   16422:	b6 9d       	mul	r27, r6
   16424:	30 0d       	add	r19, r0
   16426:	11 24       	eor	r1, r1
   16428:	69 01       	movw	r12, r18
   1642a:	33 0f       	add	r19, r19
   1642c:	ee 08       	sbc	r14, r14
   1642e:	ff 08       	sbc	r15, r15
   16430:	8c 0c       	add	r8, r12
   16432:	9d 1c       	adc	r9, r13
   16434:	ae 1c       	adc	r10, r14
   16436:	bf 1c       	adc	r11, r15
   16438:	fc 01       	movw	r30, r24
   1643a:	f5 80       	ldd	r15, Z+5	; 0x05
   1643c:	a5 01       	movw	r20, r10
   1643e:	94 01       	movw	r18, r8
   16440:	2f 0d       	add	r18, r15
   16442:	31 1d       	adc	r19, r1
   16444:	41 1d       	adc	r20, r1
   16446:	51 1d       	adc	r21, r1
   16448:	fb 01       	movw	r30, r22
   1644a:	a6 81       	ldd	r26, Z+6	; 0x06
   1644c:	b7 81       	ldd	r27, Z+7	; 0x07
   1644e:	0e 94 d3 e3 	call	0x1c7a6	; 0x1c7a6 <__mulshisi3>
   16452:	4b 01       	movw	r8, r22
   16454:	5c 01       	movw	r10, r24
   16456:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1645a:	85 ff       	sbrs	r24, 5
   1645c:	22 c0       	rjmp	.+68     	; 0x164a2 <amigo_chs_to_logical+0xd8>
   1645e:	8f 2d       	mov	r24, r15
   16460:	90 e0       	ldi	r25, 0x00	; 0
   16462:	ed b7       	in	r30, 0x3d	; 61
   16464:	fe b7       	in	r31, 0x3e	; 62
   16466:	91 8b       	std	Z+17, r25	; 0x11
   16468:	80 8b       	std	Z+16, r24	; 0x10
   1646a:	d7 87       	std	Z+15, r29	; 0x0f
   1646c:	c6 87       	std	Z+14, r28	; 0x0e
   1646e:	75 86       	std	Z+13, r7	; 0x0d
   16470:	64 86       	std	Z+12, r6	; 0x0c
   16472:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16476:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1647a:	81 81       	ldd	r24, Z+1	; 0x01
   1647c:	90 e0       	ldi	r25, 0x00	; 0
   1647e:	ed b7       	in	r30, 0x3d	; 61
   16480:	fe b7       	in	r31, 0x3e	; 62
   16482:	93 87       	std	Z+11, r25	; 0x0b
   16484:	82 87       	std	Z+10, r24	; 0x0a
   16486:	86 82       	std	Z+6, r8	; 0x06
   16488:	97 82       	std	Z+7, r9	; 0x07
   1648a:	a0 86       	std	Z+8, r10	; 0x08
   1648c:	b1 86       	std	Z+9, r11	; 0x09
   1648e:	15 83       	std	Z+5, r17	; 0x05
   16490:	04 83       	std	Z+4, r16	; 0x04
   16492:	86 e6       	ldi	r24, 0x66	; 102
   16494:	9d e2       	ldi	r25, 0x2D	; 45
   16496:	a0 e0       	ldi	r26, 0x00	; 0
   16498:	81 83       	std	Z+1, r24	; 0x01
   1649a:	92 83       	std	Z+2, r25	; 0x02
   1649c:	a3 83       	std	Z+3, r26	; 0x03
   1649e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   164a2:	c5 01       	movw	r24, r10
   164a4:	b4 01       	movw	r22, r8
   164a6:	cd b7       	in	r28, 0x3d	; 61
   164a8:	de b7       	in	r29, 0x3e	; 62
   164aa:	61 96       	adiw	r28, 0x11	; 17
   164ac:	ee e0       	ldi	r30, 0x0E	; 14
   164ae:	0c 94 09 e4 	jmp	0x1c812	; 0x1c812 <__epilogue_restores__+0x8>

000164b2 <amigo_init>:
   164b2:	ef 92       	push	r14
   164b4:	ff 92       	push	r15
   164b6:	0f 93       	push	r16
   164b8:	1f 93       	push	r17
   164ba:	cf 93       	push	r28
   164bc:	df 93       	push	r29
   164be:	09 ed       	ldi	r16, 0xD9	; 217
   164c0:	10 e2       	ldi	r17, 0x20	; 32
   164c2:	cb e0       	ldi	r28, 0x0B	; 11
   164c4:	d0 e0       	ldi	r29, 0x00	; 0
   164c6:	84 e0       	ldi	r24, 0x04	; 4
   164c8:	f8 2e       	mov	r15, r24
   164ca:	92 e0       	ldi	r25, 0x02	; 2
   164cc:	e9 2e       	mov	r14, r25
   164ce:	d8 01       	movw	r26, r16
   164d0:	8c 91       	ld	r24, X
   164d2:	81 30       	cpi	r24, 0x01	; 1
   164d4:	31 f5       	brne	.+76     	; 0x16522 <amigo_init+0x70>
   164d6:	ce 01       	movw	r24, r28
   164d8:	0e 94 17 99 	call	0x1322e	; 0x1322e <set_active_device>
   164dc:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   164e0:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   164e4:	10 82       	st	Z, r1
   164e6:	9f 01       	movw	r18, r30
   164e8:	27 5f       	subi	r18, 0xF7	; 247
   164ea:	3f 4f       	sbci	r19, 0xFF	; 255
   164ec:	d9 01       	movw	r26, r18
   164ee:	8f 2d       	mov	r24, r15
   164f0:	1d 92       	st	X+, r1
   164f2:	8a 95       	dec	r24
   164f4:	e9 f7       	brne	.-6      	; 0x164f0 <amigo_init+0x3e>
   164f6:	2c 5f       	subi	r18, 0xFC	; 252
   164f8:	3f 4f       	sbci	r19, 0xFF	; 255
   164fa:	d9 01       	movw	r26, r18
   164fc:	8f 2d       	mov	r24, r15
   164fe:	1d 92       	st	X+, r1
   16500:	8a 95       	dec	r24
   16502:	e9 f7       	brne	.-6      	; 0x164fe <amigo_init+0x4c>
   16504:	11 82       	std	Z+1, r1	; 0x01
   16506:	15 82       	std	Z+5, r1	; 0x05
   16508:	14 82       	std	Z+4, r1	; 0x04
   1650a:	13 82       	std	Z+3, r1	; 0x03
   1650c:	e6 82       	std	Z+6, r14	; 0x06
   1650e:	10 86       	std	Z+8, r1	; 0x08
   16510:	17 82       	std	Z+7, r1	; 0x07
   16512:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16516:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1651a:	81 81       	ldd	r24, Z+1	; 0x01
   1651c:	90 e0       	ldi	r25, 0x00	; 0
   1651e:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
   16522:	21 97       	sbiw	r28, 0x01	; 1
   16524:	0b 52       	subi	r16, 0x2B	; 43
   16526:	11 09       	sbc	r17, r1
   16528:	cf 3f       	cpi	r28, 0xFF	; 255
   1652a:	af ef       	ldi	r26, 0xFF	; 255
   1652c:	da 07       	cpc	r29, r26
   1652e:	79 f6       	brne	.-98     	; 0x164ce <amigo_init+0x1c>
   16530:	cd b7       	in	r28, 0x3d	; 61
   16532:	de b7       	in	r29, 0x3e	; 62
   16534:	e6 e0       	ldi	r30, 0x06	; 6
   16536:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

0001653a <amigo_request_logical_address>:
   1653a:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1653e:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16542:	15 86       	std	Z+13, r1	; 0x0d
   16544:	83 81       	ldd	r24, Z+3	; 0x03
   16546:	86 87       	std	Z+14, r24	; 0x0e
   16548:	84 81       	ldd	r24, Z+4	; 0x04
   1654a:	87 87       	std	Z+15, r24	; 0x0f
   1654c:	85 81       	ldd	r24, Z+5	; 0x05
   1654e:	80 8b       	std	Z+16, r24	; 0x10
   16550:	80 e0       	ldi	r24, 0x00	; 0
   16552:	90 e0       	ldi	r25, 0x00	; 0
   16554:	08 95       	ret

00016556 <amigo_request_status>:
   16556:	00 d0       	rcall	.+0      	; 0x16558 <amigo_request_status+0x2>
   16558:	1f 92       	push	r1
   1655a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1655e:	85 ff       	sbrs	r24, 5
   16560:	0a c0       	rjmp	.+20     	; 0x16576 <amigo_request_status+0x20>
   16562:	89 e3       	ldi	r24, 0x39	; 57
   16564:	9e e2       	ldi	r25, 0x2E	; 46
   16566:	a0 e0       	ldi	r26, 0x00	; 0
   16568:	ed b7       	in	r30, 0x3d	; 61
   1656a:	fe b7       	in	r31, 0x3e	; 62
   1656c:	81 83       	std	Z+1, r24	; 0x01
   1656e:	92 83       	std	Z+2, r25	; 0x02
   16570:	a3 83       	std	Z+3, r26	; 0x03
   16572:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16576:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1657a:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1657e:	11 86       	std	Z+9, r1	; 0x09
   16580:	81 81       	ldd	r24, Z+1	; 0x01
   16582:	82 87       	std	Z+10, r24	; 0x0a
   16584:	8d e0       	ldi	r24, 0x0D	; 13
   16586:	83 87       	std	Z+11, r24	; 0x0b
   16588:	14 86       	std	Z+12, r1	; 0x0c
   1658a:	0e 94 a9 71 	call	0xe352	; 0xe352 <mmc_wp_status>
   1658e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16592:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16596:	89 2b       	or	r24, r25
   16598:	19 f0       	breq	.+6      	; 0x165a0 <amigo_request_status+0x4a>
   1659a:	84 85       	ldd	r24, Z+12	; 0x0c
   1659c:	80 66       	ori	r24, 0x60	; 96
   1659e:	84 87       	std	Z+12, r24	; 0x0c
   165a0:	86 81       	ldd	r24, Z+6	; 0x06
   165a2:	82 30       	cpi	r24, 0x02	; 2
   165a4:	31 f4       	brne	.+12     	; 0x165b2 <amigo_request_status+0x5c>
   165a6:	83 e1       	ldi	r24, 0x13	; 19
   165a8:	81 87       	std	Z+9, r24	; 0x09
   165aa:	84 85       	ldd	r24, Z+12	; 0x0c
   165ac:	88 60       	ori	r24, 0x08	; 8
   165ae:	84 87       	std	Z+12, r24	; 0x0c
   165b0:	21 c0       	rjmp	.+66     	; 0x165f4 <amigo_request_status+0x9e>
   165b2:	27 81       	ldd	r18, Z+7	; 0x07
   165b4:	30 85       	ldd	r19, Z+8	; 0x08
   165b6:	21 15       	cp	r18, r1
   165b8:	31 05       	cpc	r19, r1
   165ba:	11 f4       	brne	.+4      	; 0x165c0 <amigo_request_status+0x6a>
   165bc:	81 30       	cpi	r24, 0x01	; 1
   165be:	d1 f4       	brne	.+52     	; 0x165f4 <amigo_request_status+0x9e>
   165c0:	26 fd       	sbrc	r18, 6
   165c2:	0c c0       	rjmp	.+24     	; 0x165dc <amigo_request_status+0x86>
   165c4:	25 ff       	sbrs	r18, 5
   165c6:	03 c0       	rjmp	.+6      	; 0x165ce <amigo_request_status+0x78>
   165c8:	8a e0       	ldi	r24, 0x0A	; 10
   165ca:	81 87       	std	Z+9, r24	; 0x09
   165cc:	0d c0       	rjmp	.+26     	; 0x165e8 <amigo_request_status+0x92>
   165ce:	84 85       	ldd	r24, Z+12	; 0x0c
   165d0:	24 ff       	sbrs	r18, 4
   165d2:	02 c0       	rjmp	.+4      	; 0x165d8 <amigo_request_status+0x82>
   165d4:	83 60       	ori	r24, 0x03	; 3
   165d6:	07 c0       	rjmp	.+14     	; 0x165e6 <amigo_request_status+0x90>
   165d8:	21 ff       	sbrs	r18, 1
   165da:	02 c0       	rjmp	.+4      	; 0x165e0 <amigo_request_status+0x8a>
   165dc:	83 e1       	ldi	r24, 0x13	; 19
   165de:	f5 cf       	rjmp	.-22     	; 0x165ca <amigo_request_status+0x74>
   165e0:	22 ff       	sbrs	r18, 2
   165e2:	02 c0       	rjmp	.+4      	; 0x165e8 <amigo_request_status+0x92>
   165e4:	84 60       	ori	r24, 0x04	; 4
   165e6:	84 87       	std	Z+12, r24	; 0x0c
   165e8:	84 85       	ldd	r24, Z+12	; 0x0c
   165ea:	80 61       	ori	r24, 0x10	; 16
   165ec:	84 87       	std	Z+12, r24	; 0x0c
   165ee:	83 85       	ldd	r24, Z+11	; 0x0b
   165f0:	80 68       	ori	r24, 0x80	; 128
   165f2:	83 87       	std	Z+11, r24	; 0x0b
   165f4:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   165f8:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   165fc:	81 81       	ldd	r24, Z+1	; 0x01
   165fe:	90 e0       	ldi	r25, 0x00	; 0
   16600:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16604:	80 e0       	ldi	r24, 0x00	; 0
   16606:	90 e0       	ldi	r25, 0x00	; 0
   16608:	0f 90       	pop	r0
   1660a:	0f 90       	pop	r0
   1660c:	0f 90       	pop	r0
   1660e:	08 95       	ret

00016610 <amigo_send_logical_address>:
   16610:	a5 e0       	ldi	r26, 0x05	; 5
   16612:	b0 e0       	ldi	r27, 0x00	; 0
   16614:	ee e0       	ldi	r30, 0x0E	; 14
   16616:	f3 eb       	ldi	r31, 0xB3	; 179
   16618:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   1661c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16620:	85 ff       	sbrs	r24, 5
   16622:	0a c0       	rjmp	.+20     	; 0x16638 <amigo_send_logical_address+0x28>
   16624:	8b e1       	ldi	r24, 0x1B	; 27
   16626:	9e e2       	ldi	r25, 0x2E	; 46
   16628:	a0 e0       	ldi	r26, 0x00	; 0
   1662a:	ed b7       	in	r30, 0x3d	; 61
   1662c:	fe b7       	in	r31, 0x3e	; 62
   1662e:	81 83       	std	Z+1, r24	; 0x01
   16630:	92 83       	std	Z+2, r25	; 0x02
   16632:	a3 83       	std	Z+3, r26	; 0x03
   16634:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16638:	80 e0       	ldi	r24, 0x00	; 0
   1663a:	91 e0       	ldi	r25, 0x01	; 1
   1663c:	9d 83       	std	Y+5, r25	; 0x05
   1663e:	8c 83       	std	Y+4, r24	; 0x04
   16640:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   16644:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16648:	ae 01       	movw	r20, r28
   1664a:	4c 5f       	subi	r20, 0xFC	; 252
   1664c:	5f 4f       	sbci	r21, 0xFF	; 255
   1664e:	64 e0       	ldi	r22, 0x04	; 4
   16650:	70 e0       	ldi	r23, 0x00	; 0
   16652:	0d 96       	adiw	r24, 0x0d	; 13
   16654:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   16658:	2c 81       	ldd	r18, Y+4	; 0x04
   1665a:	3d 81       	ldd	r19, Y+5	; 0x05
   1665c:	22 27       	eor	r18, r18
   1665e:	30 7d       	andi	r19, 0xD0	; 208
   16660:	23 2b       	or	r18, r19
   16662:	49 f0       	breq	.+18     	; 0x16676 <amigo_send_logical_address+0x66>
   16664:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16668:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1666c:	27 81       	ldd	r18, Z+7	; 0x07
   1666e:	30 85       	ldd	r19, Z+8	; 0x08
   16670:	20 62       	ori	r18, 0x20	; 32
   16672:	30 87       	std	Z+8, r19	; 0x08
   16674:	27 83       	std	Z+7, r18	; 0x07
   16676:	04 97       	sbiw	r24, 0x04	; 4
   16678:	c9 f0       	breq	.+50     	; 0x166ac <amigo_send_logical_address+0x9c>
   1667a:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1667e:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16682:	87 81       	ldd	r24, Z+7	; 0x07
   16684:	90 85       	ldd	r25, Z+8	; 0x08
   16686:	80 62       	ori	r24, 0x20	; 32
   16688:	90 87       	std	Z+8, r25	; 0x08
   1668a:	87 83       	std	Z+7, r24	; 0x07
   1668c:	81 e0       	ldi	r24, 0x01	; 1
   1668e:	86 83       	std	Z+6, r24	; 0x06
   16690:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16694:	80 ff       	sbrs	r24, 0
   16696:	0a c0       	rjmp	.+20     	; 0x166ac <amigo_send_logical_address+0x9c>
   16698:	81 e0       	ldi	r24, 0x01	; 1
   1669a:	9e e2       	ldi	r25, 0x2E	; 46
   1669c:	a0 e0       	ldi	r26, 0x00	; 0
   1669e:	ed b7       	in	r30, 0x3d	; 61
   166a0:	fe b7       	in	r31, 0x3e	; 62
   166a2:	81 83       	std	Z+1, r24	; 0x01
   166a4:	92 83       	std	Z+2, r25	; 0x02
   166a6:	a3 83       	std	Z+3, r26	; 0x03
   166a8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   166ac:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   166b0:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   166b4:	81 81       	ldd	r24, Z+1	; 0x01
   166b6:	90 e0       	ldi	r25, 0x00	; 0
   166b8:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   166bc:	8c 81       	ldd	r24, Y+4	; 0x04
   166be:	9d 81       	ldd	r25, Y+5	; 0x05
   166c0:	88 27       	eor	r24, r24
   166c2:	90 7d       	andi	r25, 0xD0	; 208
   166c4:	25 96       	adiw	r28, 0x05	; 5
   166c6:	e2 e0       	ldi	r30, 0x02	; 2
   166c8:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000166cc <amigo_send_status>:
   166cc:	a5 e0       	ldi	r26, 0x05	; 5
   166ce:	b0 e0       	ldi	r27, 0x00	; 0
   166d0:	ec e6       	ldi	r30, 0x6C	; 108
   166d2:	f3 eb       	ldi	r31, 0xB3	; 179
   166d4:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   166d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166dc:	85 ff       	sbrs	r24, 5
   166de:	0a c0       	rjmp	.+20     	; 0x166f4 <amigo_send_status+0x28>
   166e0:	8c ee       	ldi	r24, 0xEC	; 236
   166e2:	9d e2       	ldi	r25, 0x2D	; 45
   166e4:	a0 e0       	ldi	r26, 0x00	; 0
   166e6:	ed b7       	in	r30, 0x3d	; 61
   166e8:	fe b7       	in	r31, 0x3e	; 62
   166ea:	81 83       	std	Z+1, r24	; 0x01
   166ec:	92 83       	std	Z+2, r25	; 0x02
   166ee:	a3 83       	std	Z+3, r26	; 0x03
   166f0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   166f4:	80 e0       	ldi	r24, 0x00	; 0
   166f6:	91 e0       	ldi	r25, 0x01	; 1
   166f8:	9d 83       	std	Y+5, r25	; 0x05
   166fa:	8c 83       	std	Y+4, r24	; 0x04
   166fc:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   16700:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16704:	ae 01       	movw	r20, r28
   16706:	4c 5f       	subi	r20, 0xFC	; 252
   16708:	5f 4f       	sbci	r21, 0xFF	; 255
   1670a:	64 e0       	ldi	r22, 0x04	; 4
   1670c:	70 e0       	ldi	r23, 0x00	; 0
   1670e:	09 96       	adiw	r24, 0x09	; 9
   16710:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   16714:	2c 81       	ldd	r18, Y+4	; 0x04
   16716:	3d 81       	ldd	r19, Y+5	; 0x05
   16718:	22 27       	eor	r18, r18
   1671a:	30 7d       	andi	r19, 0xD0	; 208
   1671c:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16720:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16724:	23 2b       	or	r18, r19
   16726:	29 f0       	breq	.+10     	; 0x16732 <amigo_send_status+0x66>
   16728:	27 81       	ldd	r18, Z+7	; 0x07
   1672a:	30 85       	ldd	r19, Z+8	; 0x08
   1672c:	20 62       	ori	r18, 0x20	; 32
   1672e:	30 87       	std	Z+8, r19	; 0x08
   16730:	27 83       	std	Z+7, r18	; 0x07
   16732:	04 97       	sbiw	r24, 0x04	; 4
   16734:	b1 f0       	breq	.+44     	; 0x16762 <amigo_send_status+0x96>
   16736:	87 81       	ldd	r24, Z+7	; 0x07
   16738:	90 85       	ldd	r25, Z+8	; 0x08
   1673a:	80 62       	ori	r24, 0x20	; 32
   1673c:	90 87       	std	Z+8, r25	; 0x08
   1673e:	87 83       	std	Z+7, r24	; 0x07
   16740:	81 e0       	ldi	r24, 0x01	; 1
   16742:	86 83       	std	Z+6, r24	; 0x06
   16744:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16748:	80 ff       	sbrs	r24, 0
   1674a:	0e c0       	rjmp	.+28     	; 0x16768 <amigo_send_status+0x9c>
   1674c:	82 ed       	ldi	r24, 0xD2	; 210
   1674e:	9d e2       	ldi	r25, 0x2D	; 45
   16750:	a0 e0       	ldi	r26, 0x00	; 0
   16752:	ed b7       	in	r30, 0x3d	; 61
   16754:	fe b7       	in	r31, 0x3e	; 62
   16756:	81 83       	std	Z+1, r24	; 0x01
   16758:	92 83       	std	Z+2, r25	; 0x02
   1675a:	a3 83       	std	Z+3, r26	; 0x03
   1675c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16760:	03 c0       	rjmp	.+6      	; 0x16768 <amigo_send_status+0x9c>
   16762:	10 86       	std	Z+8, r1	; 0x08
   16764:	17 82       	std	Z+7, r1	; 0x07
   16766:	16 82       	std	Z+6, r1	; 0x06
   16768:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1676c:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16770:	81 81       	ldd	r24, Z+1	; 0x01
   16772:	90 e0       	ldi	r25, 0x00	; 0
   16774:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16778:	8c 81       	ldd	r24, Y+4	; 0x04
   1677a:	9d 81       	ldd	r25, Y+5	; 0x05
   1677c:	88 27       	eor	r24, r24
   1677e:	90 7d       	andi	r25, 0xD0	; 208
   16780:	25 96       	adiw	r28, 0x05	; 5
   16782:	e2 e0       	ldi	r30, 0x02	; 2
   16784:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00016788 <amigo_increment>:
   16788:	a1 e1       	ldi	r26, 0x11	; 17
   1678a:	b0 e0       	ldi	r27, 0x00	; 0
   1678c:	ea ec       	ldi	r30, 0xCA	; 202
   1678e:	f3 eb       	ldi	r31, 0xB3	; 179
   16790:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   16794:	bc 01       	movw	r22, r24
   16796:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1679a:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1679e:	91 e1       	ldi	r25, 0x11	; 17
   167a0:	de 01       	movw	r26, r28
   167a2:	11 96       	adiw	r26, 0x01	; 1
   167a4:	01 90       	ld	r0, Z+
   167a6:	0d 92       	st	X+, r0
   167a8:	9a 95       	dec	r25
   167aa:	e1 f7       	brne	.-8      	; 0x167a4 <amigo_increment+0x1c>
   167ac:	9e 81       	ldd	r25, Y+6	; 0x06
   167ae:	9f 5f       	subi	r25, 0xFF	; 255
   167b0:	9e 83       	std	Y+6, r25	; 0x06
   167b2:	ce 01       	movw	r24, r28
   167b4:	01 96       	adiw	r24, 0x01	; 1
   167b6:	b3 dd       	rcall	.-1178   	; 0x1631e <amigo_overflow_check>
   167b8:	00 97       	sbiw	r24, 0x00	; 0
   167ba:	59 f4       	brne	.+22     	; 0x167d2 <amigo_increment+0x4a>
   167bc:	a0 91 6f 19 	lds	r26, 0x196F	; 0x80196f <AMIGOs>
   167c0:	b0 91 70 19 	lds	r27, 0x1970	; 0x801970 <AMIGOs+0x1>
   167c4:	21 e1       	ldi	r18, 0x11	; 17
   167c6:	fe 01       	movw	r30, r28
   167c8:	31 96       	adiw	r30, 0x01	; 1
   167ca:	01 90       	ld	r0, Z+
   167cc:	0d 92       	st	X+, r0
   167ce:	2a 95       	dec	r18
   167d0:	e1 f7       	brne	.-8      	; 0x167ca <amigo_increment+0x42>
   167d2:	61 96       	adiw	r28, 0x11	; 17
   167d4:	e2 e0       	ldi	r30, 0x02	; 2
   167d6:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

000167da <amigo_seek>:
   167da:	0f 93       	push	r16
   167dc:	1f 93       	push	r17
   167de:	cf 93       	push	r28
   167e0:	df 93       	push	r29
   167e2:	ec 01       	movw	r28, r24
   167e4:	68 e8       	ldi	r22, 0x88	; 136
   167e6:	75 e1       	ldi	r23, 0x15	; 21
   167e8:	9a dd       	rcall	.-1228   	; 0x1631e <amigo_overflow_check>
   167ea:	8c 01       	movw	r16, r24
   167ec:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   167f0:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   167f4:	89 2b       	or	r24, r25
   167f6:	41 f0       	breq	.+16     	; 0x16808 <amigo_seek+0x2e>
   167f8:	81 e0       	ldi	r24, 0x01	; 1
   167fa:	86 83       	std	Z+6, r24	; 0x06
   167fc:	87 81       	ldd	r24, Z+7	; 0x07
   167fe:	90 85       	ldd	r25, Z+8	; 0x08
   16800:	84 60       	ori	r24, 0x04	; 4
   16802:	90 87       	std	Z+8, r25	; 0x08
   16804:	87 83       	std	Z+7, r24	; 0x07
   16806:	06 c0       	rjmp	.+12     	; 0x16814 <amigo_seek+0x3a>
   16808:	8d 81       	ldd	r24, Y+5	; 0x05
   1680a:	85 83       	std	Z+5, r24	; 0x05
   1680c:	8c 81       	ldd	r24, Y+4	; 0x04
   1680e:	84 83       	std	Z+4, r24	; 0x04
   16810:	8b 81       	ldd	r24, Y+3	; 0x03
   16812:	83 83       	std	Z+3, r24	; 0x03
   16814:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16818:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1681c:	81 81       	ldd	r24, Z+1	; 0x01
   1681e:	90 e0       	ldi	r25, 0x00	; 0
   16820:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16824:	c8 01       	movw	r24, r16
   16826:	df 91       	pop	r29
   16828:	cf 91       	pop	r28
   1682a:	1f 91       	pop	r17
   1682c:	0f 91       	pop	r16
   1682e:	08 95       	ret

00016830 <amigo_verify>:
   16830:	8f 92       	push	r8
   16832:	9f 92       	push	r9
   16834:	af 92       	push	r10
   16836:	bf 92       	push	r11
   16838:	ef 92       	push	r14
   1683a:	ff 92       	push	r15
   1683c:	0f 93       	push	r16
   1683e:	1f 93       	push	r17
   16840:	cf 93       	push	r28
   16842:	df 93       	push	r29
   16844:	ad b7       	in	r26, 0x3d	; 61
   16846:	be b7       	in	r27, 0x3e	; 62
   16848:	19 97       	sbiw	r26, 0x09	; 9
   1684a:	0f b6       	in	r0, 0x3f	; 63
   1684c:	f8 94       	cli
   1684e:	be bf       	out	0x3e, r27	; 62
   16850:	0f be       	out	0x3f, r0	; 63
   16852:	ad bf       	out	0x3d, r26	; 61
   16854:	7c 01       	movw	r14, r24
   16856:	6d e8       	ldi	r22, 0x8D	; 141
   16858:	75 e1       	ldi	r23, 0x15	; 21
   1685a:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   1685e:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16862:	b3 dd       	rcall	.-1178   	; 0x163ca <amigo_chs_to_logical>
   16864:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16868:	25 ff       	sbrs	r18, 5
   1686a:	10 c0       	rjmp	.+32     	; 0x1688c <amigo_verify+0x5c>
   1686c:	ed b7       	in	r30, 0x3d	; 61
   1686e:	fe b7       	in	r31, 0x3e	; 62
   16870:	e0 86       	std	Z+8, r14	; 0x08
   16872:	f1 86       	std	Z+9, r15	; 0x09
   16874:	64 83       	std	Z+4, r22	; 0x04
   16876:	75 83       	std	Z+5, r23	; 0x05
   16878:	86 83       	std	Z+6, r24	; 0x06
   1687a:	97 83       	std	Z+7, r25	; 0x07
   1687c:	81 e9       	ldi	r24, 0x91	; 145
   1687e:	9d e2       	ldi	r25, 0x2D	; 45
   16880:	a0 e0       	ldi	r26, 0x00	; 0
   16882:	81 83       	std	Z+1, r24	; 0x01
   16884:	92 83       	std	Z+2, r25	; 0x02
   16886:	a3 83       	std	Z+3, r26	; 0x03
   16888:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1688c:	e7 01       	movw	r28, r14
   1688e:	20 97       	sbiw	r28, 0x00	; 0
   16890:	09 f4       	brne	.+2      	; 0x16894 <amigo_verify+0x64>
   16892:	49 c0       	rjmp	.+146    	; 0x16926 <amigo_verify+0xf6>
   16894:	6a e9       	ldi	r22, 0x9A	; 154
   16896:	75 e1       	ldi	r23, 0x15	; 21
   16898:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   1689c:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   168a0:	94 dd       	rcall	.-1240   	; 0x163ca <amigo_chs_to_logical>
   168a2:	4b 01       	movw	r8, r22
   168a4:	5c 01       	movw	r10, r24
   168a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168aa:	86 fd       	sbrc	r24, 6
   168ac:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   168b0:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   168b4:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   168b8:	e0 90 6f 19 	lds	r14, 0x196F	; 0x80196f <AMIGOs>
   168bc:	f0 90 70 19 	lds	r15, 0x1970	; 0x801970 <AMIGOs+0x1>
   168c0:	87 e0       	ldi	r24, 0x07	; 7
   168c2:	e8 0e       	add	r14, r24
   168c4:	f1 1c       	adc	r15, r1
   168c6:	06 81       	ldd	r16, Z+6	; 0x06
   168c8:	17 81       	ldd	r17, Z+7	; 0x07
   168ca:	26 ef       	ldi	r18, 0xF6	; 246
   168cc:	3c e1       	ldi	r19, 0x1C	; 28
   168ce:	b5 01       	movw	r22, r10
   168d0:	a4 01       	movw	r20, r8
   168d2:	82 81       	ldd	r24, Z+2	; 0x02
   168d4:	93 81       	ldd	r25, Z+3	; 0x03
   168d6:	0e 94 49 86 	call	0x10c92	; 0x10c92 <dbf_open_read>
   168da:	7c 01       	movw	r14, r24
   168dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168e0:	86 ff       	sbrs	r24, 6
   168e2:	04 c0       	rjmp	.+8      	; 0x168ec <amigo_verify+0xbc>
   168e4:	81 ea       	ldi	r24, 0xA1	; 161
   168e6:	90 e1       	ldi	r25, 0x10	; 16
   168e8:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   168ec:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   168f0:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   168f4:	86 81       	ldd	r24, Z+6	; 0x06
   168f6:	97 81       	ldd	r25, Z+7	; 0x07
   168f8:	e8 16       	cp	r14, r24
   168fa:	f9 06       	cpc	r15, r25
   168fc:	61 f0       	breq	.+24     	; 0x16916 <amigo_verify+0xe6>
   168fe:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16902:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16906:	81 e0       	ldi	r24, 0x01	; 1
   16908:	86 83       	std	Z+6, r24	; 0x06
   1690a:	87 81       	ldd	r24, Z+7	; 0x07
   1690c:	90 85       	ldd	r25, Z+8	; 0x08
   1690e:	81 60       	ori	r24, 0x01	; 1
   16910:	90 87       	std	Z+8, r25	; 0x08
   16912:	87 83       	std	Z+7, r24	; 0x07
   16914:	0b c0       	rjmp	.+22     	; 0x1692c <amigo_verify+0xfc>
   16916:	82 ea       	ldi	r24, 0xA2	; 162
   16918:	95 e1       	ldi	r25, 0x15	; 21
   1691a:	36 df       	rcall	.-404    	; 0x16788 <amigo_increment>
   1691c:	21 97       	sbiw	r28, 0x01	; 1
   1691e:	89 2b       	or	r24, r25
   16920:	09 f4       	brne	.+2      	; 0x16924 <amigo_verify+0xf4>
   16922:	b5 cf       	rjmp	.-150    	; 0x1688e <amigo_verify+0x5e>
   16924:	03 c0       	rjmp	.+6      	; 0x1692c <amigo_verify+0xfc>
   16926:	c0 e0       	ldi	r28, 0x00	; 0
   16928:	d0 e0       	ldi	r29, 0x00	; 0
   1692a:	02 c0       	rjmp	.+4      	; 0x16930 <amigo_verify+0x100>
   1692c:	c1 e0       	ldi	r28, 0x01	; 1
   1692e:	d0 e0       	ldi	r29, 0x00	; 0
   16930:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16934:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16938:	81 81       	ldd	r24, Z+1	; 0x01
   1693a:	90 e0       	ldi	r25, 0x00	; 0
   1693c:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16940:	ce 01       	movw	r24, r28
   16942:	ad b7       	in	r26, 0x3d	; 61
   16944:	be b7       	in	r27, 0x3e	; 62
   16946:	19 96       	adiw	r26, 0x09	; 9
   16948:	0f b6       	in	r0, 0x3f	; 63
   1694a:	f8 94       	cli
   1694c:	be bf       	out	0x3e, r27	; 62
   1694e:	0f be       	out	0x3f, r0	; 63
   16950:	ad bf       	out	0x3d, r26	; 61
   16952:	df 91       	pop	r29
   16954:	cf 91       	pop	r28
   16956:	1f 91       	pop	r17
   16958:	0f 91       	pop	r16
   1695a:	ff 90       	pop	r15
   1695c:	ef 90       	pop	r14
   1695e:	bf 90       	pop	r11
   16960:	af 90       	pop	r10
   16962:	9f 90       	pop	r9
   16964:	8f 90       	pop	r8
   16966:	08 95       	ret

00016968 <amigo_format>:
   16968:	ef 92       	push	r14
   1696a:	ff 92       	push	r15
   1696c:	0f 93       	push	r16
   1696e:	1f 93       	push	r17
   16970:	cf 93       	push	r28
   16972:	df 93       	push	r29
   16974:	00 d0       	rcall	.+0      	; 0x16976 <amigo_format+0xe>
   16976:	1f 92       	push	r1
   16978:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1697c:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16980:	15 82       	std	Z+5, r1	; 0x05
   16982:	14 82       	std	Z+4, r1	; 0x04
   16984:	13 82       	std	Z+3, r1	; 0x03
   16986:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1698a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1698e:	46 81       	ldd	r20, Z+6	; 0x06
   16990:	57 81       	ldd	r21, Z+7	; 0x07
   16992:	68 2f       	mov	r22, r24
   16994:	70 e0       	ldi	r23, 0x00	; 0
   16996:	86 ef       	ldi	r24, 0xF6	; 246
   16998:	9c e1       	ldi	r25, 0x1C	; 28
   1699a:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <memset>
   1699e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169a2:	85 ff       	sbrs	r24, 5
   169a4:	0a c0       	rjmp	.+20     	; 0x169ba <amigo_format+0x52>
   169a6:	86 e5       	ldi	r24, 0x56	; 86
   169a8:	9d e2       	ldi	r25, 0x2D	; 45
   169aa:	a0 e0       	ldi	r26, 0x00	; 0
   169ac:	ed b7       	in	r30, 0x3d	; 61
   169ae:	fe b7       	in	r31, 0x3e	; 62
   169b0:	81 83       	std	Z+1, r24	; 0x01
   169b2:	92 83       	std	Z+2, r25	; 0x02
   169b4:	a3 83       	std	Z+3, r26	; 0x03
   169b6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   169ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169be:	86 fd       	sbrc	r24, 6
   169c0:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   169c4:	69 ea       	ldi	r22, 0xA9	; 169
   169c6:	75 e1       	ldi	r23, 0x15	; 21
   169c8:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   169cc:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   169d0:	fc dc       	rcall	.-1544   	; 0x163ca <amigo_chs_to_logical>
   169d2:	ab 01       	movw	r20, r22
   169d4:	bc 01       	movw	r22, r24
   169d6:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   169da:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   169de:	e0 90 6f 19 	lds	r14, 0x196F	; 0x80196f <AMIGOs>
   169e2:	f0 90 70 19 	lds	r15, 0x1970	; 0x801970 <AMIGOs+0x1>
   169e6:	87 e0       	ldi	r24, 0x07	; 7
   169e8:	e8 0e       	add	r14, r24
   169ea:	f1 1c       	adc	r15, r1
   169ec:	06 81       	ldd	r16, Z+6	; 0x06
   169ee:	17 81       	ldd	r17, Z+7	; 0x07
   169f0:	26 ef       	ldi	r18, 0xF6	; 246
   169f2:	3c e1       	ldi	r19, 0x1C	; 28
   169f4:	82 81       	ldd	r24, Z+2	; 0x02
   169f6:	93 81       	ldd	r25, Z+3	; 0x03
   169f8:	0e 94 a0 86 	call	0x10d40	; 0x10d40 <dbf_open_write>
   169fc:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16a00:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16a04:	26 81       	ldd	r18, Z+6	; 0x06
   16a06:	37 81       	ldd	r19, Z+7	; 0x07
   16a08:	82 17       	cp	r24, r18
   16a0a:	93 07       	cpc	r25, r19
   16a0c:	71 f0       	breq	.+28     	; 0x16a2a <amigo_format+0xc2>
   16a0e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16a12:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16a16:	87 81       	ldd	r24, Z+7	; 0x07
   16a18:	90 85       	ldd	r25, Z+8	; 0x08
   16a1a:	82 60       	ori	r24, 0x02	; 2
   16a1c:	90 87       	std	Z+8, r25	; 0x08
   16a1e:	87 83       	std	Z+7, r24	; 0x07
   16a20:	81 e0       	ldi	r24, 0x01	; 1
   16a22:	86 83       	std	Z+6, r24	; 0x06
   16a24:	c1 e0       	ldi	r28, 0x01	; 1
   16a26:	d0 e0       	ldi	r29, 0x00	; 0
   16a28:	0f c0       	rjmp	.+30     	; 0x16a48 <amigo_format+0xe0>
   16a2a:	80 e0       	ldi	r24, 0x00	; 0
   16a2c:	90 e0       	ldi	r25, 0x00	; 0
   16a2e:	ac de       	rcall	.-680    	; 0x16788 <amigo_increment>
   16a30:	89 2b       	or	r24, r25
   16a32:	41 f2       	breq	.-112    	; 0x169c4 <amigo_format+0x5c>
   16a34:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16a38:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16a3c:	15 82       	std	Z+5, r1	; 0x05
   16a3e:	14 82       	std	Z+4, r1	; 0x04
   16a40:	13 82       	std	Z+3, r1	; 0x03
   16a42:	16 82       	std	Z+6, r1	; 0x06
   16a44:	c0 e0       	ldi	r28, 0x00	; 0
   16a46:	d0 e0       	ldi	r29, 0x00	; 0
   16a48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a4c:	86 ff       	sbrs	r24, 6
   16a4e:	04 c0       	rjmp	.+8      	; 0x16a58 <amigo_format+0xf0>
   16a50:	89 ea       	ldi	r24, 0xA9	; 169
   16a52:	95 e1       	ldi	r25, 0x15	; 21
   16a54:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   16a58:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a5c:	85 ff       	sbrs	r24, 5
   16a5e:	0a c0       	rjmp	.+20     	; 0x16a74 <amigo_format+0x10c>
   16a60:	81 e4       	ldi	r24, 0x41	; 65
   16a62:	9d e2       	ldi	r25, 0x2D	; 45
   16a64:	a0 e0       	ldi	r26, 0x00	; 0
   16a66:	ed b7       	in	r30, 0x3d	; 61
   16a68:	fe b7       	in	r31, 0x3e	; 62
   16a6a:	81 83       	std	Z+1, r24	; 0x01
   16a6c:	92 83       	std	Z+2, r25	; 0x02
   16a6e:	a3 83       	std	Z+3, r26	; 0x03
   16a70:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16a74:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16a78:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16a7c:	81 81       	ldd	r24, Z+1	; 0x01
   16a7e:	90 e0       	ldi	r25, 0x00	; 0
   16a80:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16a84:	ce 01       	movw	r24, r28
   16a86:	cd b7       	in	r28, 0x3d	; 61
   16a88:	de b7       	in	r29, 0x3e	; 62
   16a8a:	23 96       	adiw	r28, 0x03	; 3
   16a8c:	e6 e0       	ldi	r30, 0x06	; 6
   16a8e:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00016a92 <amigo_buffered_read_command>:
   16a92:	8f 92       	push	r8
   16a94:	9f 92       	push	r9
   16a96:	af 92       	push	r10
   16a98:	bf 92       	push	r11
   16a9a:	ef 92       	push	r14
   16a9c:	ff 92       	push	r15
   16a9e:	0f 93       	push	r16
   16aa0:	1f 93       	push	r17
   16aa2:	00 d0       	rcall	.+0      	; 0x16aa4 <amigo_buffered_read_command+0x12>
   16aa4:	00 d0       	rcall	.+0      	; 0x16aa6 <amigo_buffered_read_command+0x14>
   16aa6:	1f 92       	push	r1
   16aa8:	60 eb       	ldi	r22, 0xB0	; 176
   16aaa:	75 e1       	ldi	r23, 0x15	; 21
   16aac:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   16ab0:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16ab4:	8a dc       	rcall	.-1772   	; 0x163ca <amigo_chs_to_logical>
   16ab6:	4b 01       	movw	r8, r22
   16ab8:	5c 01       	movw	r10, r24
   16aba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16abe:	85 ff       	sbrs	r24, 5
   16ac0:	12 c0       	rjmp	.+36     	; 0x16ae6 <amigo_buffered_read_command+0x54>
   16ac2:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16ac6:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16aca:	80 81       	ld	r24, Z
   16acc:	90 e0       	ldi	r25, 0x00	; 0
   16ace:	ed b7       	in	r30, 0x3d	; 61
   16ad0:	fe b7       	in	r31, 0x3e	; 62
   16ad2:	95 83       	std	Z+5, r25	; 0x05
   16ad4:	84 83       	std	Z+4, r24	; 0x04
   16ad6:	8f e2       	ldi	r24, 0x2F	; 47
   16ad8:	9d e2       	ldi	r25, 0x2D	; 45
   16ada:	a0 e0       	ldi	r26, 0x00	; 0
   16adc:	81 83       	std	Z+1, r24	; 0x01
   16ade:	92 83       	std	Z+2, r25	; 0x02
   16ae0:	a3 83       	std	Z+3, r26	; 0x03
   16ae2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16ae6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16aea:	86 fd       	sbrc	r24, 6
   16aec:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   16af0:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16af4:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16af8:	e0 90 6f 19 	lds	r14, 0x196F	; 0x80196f <AMIGOs>
   16afc:	f0 90 70 19 	lds	r15, 0x1970	; 0x801970 <AMIGOs+0x1>
   16b00:	87 e0       	ldi	r24, 0x07	; 7
   16b02:	e8 0e       	add	r14, r24
   16b04:	f1 1c       	adc	r15, r1
   16b06:	06 81       	ldd	r16, Z+6	; 0x06
   16b08:	17 81       	ldd	r17, Z+7	; 0x07
   16b0a:	26 ef       	ldi	r18, 0xF6	; 246
   16b0c:	3c e1       	ldi	r19, 0x1C	; 28
   16b0e:	b5 01       	movw	r22, r10
   16b10:	a4 01       	movw	r20, r8
   16b12:	82 81       	ldd	r24, Z+2	; 0x02
   16b14:	93 81       	ldd	r25, Z+3	; 0x03
   16b16:	0e 94 49 86 	call	0x10c92	; 0x10c92 <dbf_open_read>
   16b1a:	7c 01       	movw	r14, r24
   16b1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b20:	86 ff       	sbrs	r24, 6
   16b22:	04 c0       	rjmp	.+8      	; 0x16b2c <amigo_buffered_read_command+0x9a>
   16b24:	81 ea       	ldi	r24, 0xA1	; 161
   16b26:	90 e1       	ldi	r25, 0x10	; 16
   16b28:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   16b2c:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16b30:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16b34:	86 81       	ldd	r24, Z+6	; 0x06
   16b36:	97 81       	ldd	r25, Z+7	; 0x07
   16b38:	e8 16       	cp	r14, r24
   16b3a:	f9 06       	cpc	r15, r25
   16b3c:	61 f0       	breq	.+24     	; 0x16b56 <amigo_buffered_read_command+0xc4>
   16b3e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16b42:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16b46:	81 e0       	ldi	r24, 0x01	; 1
   16b48:	86 83       	std	Z+6, r24	; 0x06
   16b4a:	87 81       	ldd	r24, Z+7	; 0x07
   16b4c:	90 85       	ldd	r25, Z+8	; 0x08
   16b4e:	81 60       	ori	r24, 0x01	; 1
   16b50:	90 87       	std	Z+8, r25	; 0x08
   16b52:	87 83       	std	Z+7, r24	; 0x07
   16b54:	18 c0       	rjmp	.+48     	; 0x16b86 <amigo_buffered_read_command+0xf4>
   16b56:	80 eb       	ldi	r24, 0xB0	; 176
   16b58:	95 e1       	ldi	r25, 0x15	; 21
   16b5a:	16 de       	rcall	.-980    	; 0x16788 <amigo_increment>
   16b5c:	89 2b       	or	r24, r25
   16b5e:	59 f0       	breq	.+22     	; 0x16b76 <amigo_buffered_read_command+0xe4>
   16b60:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16b64:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16b68:	81 e0       	ldi	r24, 0x01	; 1
   16b6a:	86 83       	std	Z+6, r24	; 0x06
   16b6c:	87 81       	ldd	r24, Z+7	; 0x07
   16b6e:	90 85       	ldd	r25, Z+8	; 0x08
   16b70:	84 60       	ori	r24, 0x04	; 4
   16b72:	90 87       	std	Z+8, r25	; 0x08
   16b74:	87 83       	std	Z+7, r24	; 0x07
   16b76:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16b7a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16b7e:	81 81       	ldd	r24, Z+1	; 0x01
   16b80:	90 e0       	ldi	r25, 0x00	; 0
   16b82:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16b86:	80 e0       	ldi	r24, 0x00	; 0
   16b88:	90 e0       	ldi	r25, 0x00	; 0
   16b8a:	0f 90       	pop	r0
   16b8c:	0f 90       	pop	r0
   16b8e:	0f 90       	pop	r0
   16b90:	0f 90       	pop	r0
   16b92:	0f 90       	pop	r0
   16b94:	1f 91       	pop	r17
   16b96:	0f 91       	pop	r16
   16b98:	ff 90       	pop	r15
   16b9a:	ef 90       	pop	r14
   16b9c:	bf 90       	pop	r11
   16b9e:	af 90       	pop	r10
   16ba0:	9f 90       	pop	r9
   16ba2:	8f 90       	pop	r8
   16ba4:	08 95       	ret

00016ba6 <amigo_buffered_read_execute>:
   16ba6:	a5 e0       	ldi	r26, 0x05	; 5
   16ba8:	b0 e0       	ldi	r27, 0x00	; 0
   16baa:	e9 ed       	ldi	r30, 0xD9	; 217
   16bac:	f5 eb       	ldi	r31, 0xB5	; 181
   16bae:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
   16bb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bb6:	87 fd       	sbrc	r24, 7
   16bb8:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   16bbc:	80 e0       	ldi	r24, 0x00	; 0
   16bbe:	91 e0       	ldi	r25, 0x01	; 1
   16bc0:	9d 83       	std	Y+5, r25	; 0x05
   16bc2:	8c 83       	std	Y+4, r24	; 0x04
   16bc4:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16bc8:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16bcc:	66 81       	ldd	r22, Z+6	; 0x06
   16bce:	77 81       	ldd	r23, Z+7	; 0x07
   16bd0:	ae 01       	movw	r20, r28
   16bd2:	4c 5f       	subi	r20, 0xFC	; 252
   16bd4:	5f 4f       	sbci	r21, 0xFF	; 255
   16bd6:	86 ef       	ldi	r24, 0xF6	; 246
   16bd8:	9c e1       	ldi	r25, 0x1C	; 28
   16bda:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   16bde:	8c 01       	movw	r16, r24
   16be0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16be4:	87 ff       	sbrs	r24, 7
   16be6:	04 c0       	rjmp	.+8      	; 0x16bf0 <amigo_buffered_read_execute+0x4a>
   16be8:	8c ea       	ldi	r24, 0xAC	; 172
   16bea:	90 e1       	ldi	r25, 0x10	; 16
   16bec:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   16bf0:	8c 81       	ldd	r24, Y+4	; 0x04
   16bf2:	9d 81       	ldd	r25, Y+5	; 0x05
   16bf4:	88 27       	eor	r24, r24
   16bf6:	90 7d       	andi	r25, 0xD0	; 208
   16bf8:	89 2b       	or	r24, r25
   16bfa:	49 f4       	brne	.+18     	; 0x16c0e <amigo_buffered_read_execute+0x68>
   16bfc:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16c00:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16c04:	86 81       	ldd	r24, Z+6	; 0x06
   16c06:	97 81       	ldd	r25, Z+7	; 0x07
   16c08:	08 17       	cp	r16, r24
   16c0a:	19 07       	cpc	r17, r25
   16c0c:	31 f1       	breq	.+76     	; 0x16c5a <amigo_buffered_read_execute+0xb4>
   16c0e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16c12:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16c16:	81 e0       	ldi	r24, 0x01	; 1
   16c18:	86 83       	std	Z+6, r24	; 0x06
   16c1a:	87 81       	ldd	r24, Z+7	; 0x07
   16c1c:	90 85       	ldd	r25, Z+8	; 0x08
   16c1e:	80 62       	ori	r24, 0x20	; 32
   16c20:	90 87       	std	Z+8, r25	; 0x08
   16c22:	87 83       	std	Z+7, r24	; 0x07
   16c24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c28:	80 ff       	sbrs	r24, 0
   16c2a:	0a c0       	rjmp	.+20     	; 0x16c40 <amigo_buffered_read_execute+0x9a>
   16c2c:	85 e1       	ldi	r24, 0x15	; 21
   16c2e:	9d e2       	ldi	r25, 0x2D	; 45
   16c30:	a0 e0       	ldi	r26, 0x00	; 0
   16c32:	ed b7       	in	r30, 0x3d	; 61
   16c34:	fe b7       	in	r31, 0x3e	; 62
   16c36:	81 83       	std	Z+1, r24	; 0x01
   16c38:	92 83       	std	Z+2, r25	; 0x02
   16c3a:	a3 83       	std	Z+3, r26	; 0x03
   16c3c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16c40:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16c44:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16c48:	81 81       	ldd	r24, Z+1	; 0x01
   16c4a:	90 e0       	ldi	r25, 0x00	; 0
   16c4c:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16c50:	8c 81       	ldd	r24, Y+4	; 0x04
   16c52:	9d 81       	ldd	r25, Y+5	; 0x05
   16c54:	88 27       	eor	r24, r24
   16c56:	90 7d       	andi	r25, 0xD0	; 208
   16c58:	06 c0       	rjmp	.+12     	; 0x16c66 <amigo_buffered_read_execute+0xc0>
   16c5a:	81 81       	ldd	r24, Z+1	; 0x01
   16c5c:	90 e0       	ldi	r25, 0x00	; 0
   16c5e:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16c62:	80 e0       	ldi	r24, 0x00	; 0
   16c64:	90 e0       	ldi	r25, 0x00	; 0
   16c66:	25 96       	adiw	r28, 0x05	; 5
   16c68:	e4 e0       	ldi	r30, 0x04	; 4
   16c6a:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00016c6e <amigo_buffered_write>:
   16c6e:	8f 92       	push	r8
   16c70:	9f 92       	push	r9
   16c72:	af 92       	push	r10
   16c74:	bf 92       	push	r11
   16c76:	ef 92       	push	r14
   16c78:	ff 92       	push	r15
   16c7a:	0f 93       	push	r16
   16c7c:	1f 93       	push	r17
   16c7e:	cf 93       	push	r28
   16c80:	df 93       	push	r29
   16c82:	cd b7       	in	r28, 0x3d	; 61
   16c84:	de b7       	in	r29, 0x3e	; 62
   16c86:	27 97       	sbiw	r28, 0x07	; 7
   16c88:	0f b6       	in	r0, 0x3f	; 63
   16c8a:	f8 94       	cli
   16c8c:	de bf       	out	0x3e, r29	; 62
   16c8e:	0f be       	out	0x3f, r0	; 63
   16c90:	cd bf       	out	0x3d, r28	; 61
   16c92:	6e eb       	ldi	r22, 0xBE	; 190
   16c94:	75 e1       	ldi	r23, 0x15	; 21
   16c96:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   16c9a:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16c9e:	95 db       	rcall	.-2262   	; 0x163ca <amigo_chs_to_logical>
   16ca0:	4b 01       	movw	r8, r22
   16ca2:	5c 01       	movw	r10, r24
   16ca4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ca8:	87 fd       	sbrc	r24, 7
   16caa:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   16cae:	1f 82       	std	Y+7, r1	; 0x07
   16cb0:	1e 82       	std	Y+6, r1	; 0x06
   16cb2:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16cb6:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16cba:	66 81       	ldd	r22, Z+6	; 0x06
   16cbc:	77 81       	ldd	r23, Z+7	; 0x07
   16cbe:	ae 01       	movw	r20, r28
   16cc0:	4a 5f       	subi	r20, 0xFA	; 250
   16cc2:	5f 4f       	sbci	r21, 0xFF	; 255
   16cc4:	86 ef       	ldi	r24, 0xF6	; 246
   16cc6:	9c e1       	ldi	r25, 0x1C	; 28
   16cc8:	0e 94 a7 8c 	call	0x1194e	; 0x1194e <gpib_read_str>
   16ccc:	7c 01       	movw	r14, r24
   16cce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cd2:	85 ff       	sbrs	r24, 5
   16cd4:	12 c0       	rjmp	.+36     	; 0x16cfa <amigo_buffered_write+0x8c>
   16cd6:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16cda:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16cde:	80 81       	ld	r24, Z
   16ce0:	90 e0       	ldi	r25, 0x00	; 0
   16ce2:	ed b7       	in	r30, 0x3d	; 61
   16ce4:	fe b7       	in	r31, 0x3e	; 62
   16ce6:	95 83       	std	Z+5, r25	; 0x05
   16ce8:	84 83       	std	Z+4, r24	; 0x04
   16cea:	83 e0       	ldi	r24, 0x03	; 3
   16cec:	9d e2       	ldi	r25, 0x2D	; 45
   16cee:	a0 e0       	ldi	r26, 0x00	; 0
   16cf0:	81 83       	std	Z+1, r24	; 0x01
   16cf2:	92 83       	std	Z+2, r25	; 0x02
   16cf4:	a3 83       	std	Z+3, r26	; 0x03
   16cf6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16cfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cfe:	87 ff       	sbrs	r24, 7
   16d00:	04 c0       	rjmp	.+8      	; 0x16d0a <amigo_buffered_write+0x9c>
   16d02:	8d ec       	ldi	r24, 0xCD	; 205
   16d04:	95 e1       	ldi	r25, 0x15	; 21
   16d06:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   16d0a:	8e 81       	ldd	r24, Y+6	; 0x06
   16d0c:	9f 81       	ldd	r25, Y+7	; 0x07
   16d0e:	88 27       	eor	r24, r24
   16d10:	90 7d       	andi	r25, 0xD0	; 208
   16d12:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16d16:	89 2b       	or	r24, r25
   16d18:	49 f4       	brne	.+18     	; 0x16d2c <amigo_buffered_write+0xbe>
   16d1a:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16d1e:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16d22:	86 81       	ldd	r24, Z+6	; 0x06
   16d24:	97 81       	ldd	r25, Z+7	; 0x07
   16d26:	e8 16       	cp	r14, r24
   16d28:	f9 06       	cpc	r15, r25
   16d2a:	c1 f0       	breq	.+48     	; 0x16d5c <amigo_buffered_write+0xee>
   16d2c:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16d30:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16d34:	81 e0       	ldi	r24, 0x01	; 1
   16d36:	86 83       	std	Z+6, r24	; 0x06
   16d38:	87 81       	ldd	r24, Z+7	; 0x07
   16d3a:	90 85       	ldd	r25, Z+8	; 0x08
   16d3c:	80 62       	ori	r24, 0x20	; 32
   16d3e:	90 87       	std	Z+8, r25	; 0x08
   16d40:	87 83       	std	Z+7, r24	; 0x07
   16d42:	20 ff       	sbrs	r18, 0
   16d44:	4e c0       	rjmp	.+156    	; 0x16de2 <amigo_buffered_write+0x174>
   16d46:	84 ee       	ldi	r24, 0xE4	; 228
   16d48:	9c e2       	ldi	r25, 0x2C	; 44
   16d4a:	a0 e0       	ldi	r26, 0x00	; 0
   16d4c:	ed b7       	in	r30, 0x3d	; 61
   16d4e:	fe b7       	in	r31, 0x3e	; 62
   16d50:	81 83       	std	Z+1, r24	; 0x01
   16d52:	92 83       	std	Z+2, r25	; 0x02
   16d54:	a3 83       	std	Z+3, r26	; 0x03
   16d56:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16d5a:	43 c0       	rjmp	.+134    	; 0x16de2 <amigo_buffered_write+0x174>
   16d5c:	26 fd       	sbrc	r18, 6
   16d5e:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
   16d62:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16d66:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16d6a:	e0 90 6f 19 	lds	r14, 0x196F	; 0x80196f <AMIGOs>
   16d6e:	f0 90 70 19 	lds	r15, 0x1970	; 0x801970 <AMIGOs+0x1>
   16d72:	87 e0       	ldi	r24, 0x07	; 7
   16d74:	e8 0e       	add	r14, r24
   16d76:	f1 1c       	adc	r15, r1
   16d78:	06 81       	ldd	r16, Z+6	; 0x06
   16d7a:	17 81       	ldd	r17, Z+7	; 0x07
   16d7c:	26 ef       	ldi	r18, 0xF6	; 246
   16d7e:	3c e1       	ldi	r19, 0x1C	; 28
   16d80:	b5 01       	movw	r22, r10
   16d82:	a4 01       	movw	r20, r8
   16d84:	82 81       	ldd	r24, Z+2	; 0x02
   16d86:	93 81       	ldd	r25, Z+3	; 0x03
   16d88:	0e 94 a0 86 	call	0x10d40	; 0x10d40 <dbf_open_write>
   16d8c:	7c 01       	movw	r14, r24
   16d8e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d92:	86 ff       	sbrs	r24, 6
   16d94:	04 c0       	rjmp	.+8      	; 0x16d9e <amigo_buffered_write+0x130>
   16d96:	86 e9       	ldi	r24, 0x96	; 150
   16d98:	90 e1       	ldi	r25, 0x10	; 16
   16d9a:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
   16d9e:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16da2:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16da6:	86 81       	ldd	r24, Z+6	; 0x06
   16da8:	97 81       	ldd	r25, Z+7	; 0x07
   16daa:	e8 16       	cp	r14, r24
   16dac:	f9 06       	cpc	r15, r25
   16dae:	49 f0       	breq	.+18     	; 0x16dc2 <amigo_buffered_write+0x154>
   16db0:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16db4:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16db8:	81 e0       	ldi	r24, 0x01	; 1
   16dba:	86 83       	std	Z+6, r24	; 0x06
   16dbc:	80 e0       	ldi	r24, 0x00	; 0
   16dbe:	90 e0       	ldi	r25, 0x00	; 0
   16dc0:	1c c0       	rjmp	.+56     	; 0x16dfa <amigo_buffered_write+0x18c>
   16dc2:	8e eb       	ldi	r24, 0xBE	; 190
   16dc4:	95 e1       	ldi	r25, 0x15	; 21
   16dc6:	e0 dc       	rcall	.-1600   	; 0x16788 <amigo_increment>
   16dc8:	89 2b       	or	r24, r25
   16dca:	59 f0       	breq	.+22     	; 0x16de2 <amigo_buffered_write+0x174>
   16dcc:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16dd0:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16dd4:	81 e0       	ldi	r24, 0x01	; 1
   16dd6:	86 83       	std	Z+6, r24	; 0x06
   16dd8:	87 81       	ldd	r24, Z+7	; 0x07
   16dda:	90 85       	ldd	r25, Z+8	; 0x08
   16ddc:	84 60       	ori	r24, 0x04	; 4
   16dde:	90 87       	std	Z+8, r25	; 0x08
   16de0:	87 83       	std	Z+7, r24	; 0x07
   16de2:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16de6:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16dea:	81 81       	ldd	r24, Z+1	; 0x01
   16dec:	90 e0       	ldi	r25, 0x00	; 0
   16dee:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16df2:	8e 81       	ldd	r24, Y+6	; 0x06
   16df4:	9f 81       	ldd	r25, Y+7	; 0x07
   16df6:	88 27       	eor	r24, r24
   16df8:	90 7d       	andi	r25, 0xD0	; 208
   16dfa:	27 96       	adiw	r28, 0x07	; 7
   16dfc:	0f b6       	in	r0, 0x3f	; 63
   16dfe:	f8 94       	cli
   16e00:	de bf       	out	0x3e, r29	; 62
   16e02:	0f be       	out	0x3f, r0	; 63
   16e04:	cd bf       	out	0x3d, r28	; 61
   16e06:	df 91       	pop	r29
   16e08:	cf 91       	pop	r28
   16e0a:	1f 91       	pop	r17
   16e0c:	0f 91       	pop	r16
   16e0e:	ff 90       	pop	r15
   16e10:	ef 90       	pop	r14
   16e12:	bf 90       	pop	r11
   16e14:	af 90       	pop	r10
   16e16:	9f 90       	pop	r9
   16e18:	8f 90       	pop	r8
   16e1a:	08 95       	ret

00016e1c <amigo_cmd_dsj>:
   16e1c:	a8 e0       	ldi	r26, 0x08	; 8
   16e1e:	b0 e0       	ldi	r27, 0x00	; 0
   16e20:	e4 e1       	ldi	r30, 0x14	; 20
   16e22:	f7 eb       	ldi	r31, 0xB7	; 183
   16e24:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   16e28:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16e2c:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16e30:	86 81       	ldd	r24, Z+6	; 0x06
   16e32:	88 87       	std	Y+8, r24	; 0x08
   16e34:	80 e0       	ldi	r24, 0x00	; 0
   16e36:	91 e0       	ldi	r25, 0x01	; 1
   16e38:	9f 83       	std	Y+7, r25	; 0x07
   16e3a:	8e 83       	std	Y+6, r24	; 0x06
   16e3c:	ae 01       	movw	r20, r28
   16e3e:	4a 5f       	subi	r20, 0xFA	; 250
   16e40:	5f 4f       	sbci	r21, 0xFF	; 255
   16e42:	61 e0       	ldi	r22, 0x01	; 1
   16e44:	70 e0       	ldi	r23, 0x00	; 0
   16e46:	ce 01       	movw	r24, r28
   16e48:	08 96       	adiw	r24, 0x08	; 8
   16e4a:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
   16e4e:	2e 81       	ldd	r18, Y+6	; 0x06
   16e50:	3f 81       	ldd	r19, Y+7	; 0x07
   16e52:	22 27       	eor	r18, r18
   16e54:	30 7d       	andi	r19, 0xD0	; 208
   16e56:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16e5a:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16e5e:	23 2b       	or	r18, r19
   16e60:	29 f0       	breq	.+10     	; 0x16e6c <amigo_cmd_dsj+0x50>
   16e62:	27 81       	ldd	r18, Z+7	; 0x07
   16e64:	30 85       	ldd	r19, Z+8	; 0x08
   16e66:	20 62       	ori	r18, 0x20	; 32
   16e68:	30 87       	std	Z+8, r19	; 0x08
   16e6a:	27 83       	std	Z+7, r18	; 0x07
   16e6c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16e70:	01 97       	sbiw	r24, 0x01	; 1
   16e72:	c1 f0       	breq	.+48     	; 0x16ea4 <amigo_cmd_dsj+0x88>
   16e74:	81 e0       	ldi	r24, 0x01	; 1
   16e76:	86 83       	std	Z+6, r24	; 0x06
   16e78:	87 81       	ldd	r24, Z+7	; 0x07
   16e7a:	90 85       	ldd	r25, Z+8	; 0x08
   16e7c:	80 62       	ori	r24, 0x20	; 32
   16e7e:	90 87       	std	Z+8, r25	; 0x08
   16e80:	87 83       	std	Z+7, r24	; 0x07
   16e82:	20 ff       	sbrs	r18, 0
   16e84:	0a c0       	rjmp	.+20     	; 0x16e9a <amigo_cmd_dsj+0x7e>
   16e86:	8a ec       	ldi	r24, 0xCA	; 202
   16e88:	9c e2       	ldi	r25, 0x2C	; 44
   16e8a:	a0 e0       	ldi	r26, 0x00	; 0
   16e8c:	ed b7       	in	r30, 0x3d	; 61
   16e8e:	fe b7       	in	r31, 0x3e	; 62
   16e90:	81 83       	std	Z+1, r24	; 0x01
   16e92:	92 83       	std	Z+2, r25	; 0x02
   16e94:	a3 83       	std	Z+3, r26	; 0x03
   16e96:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16e9a:	8e 81       	ldd	r24, Y+6	; 0x06
   16e9c:	9f 81       	ldd	r25, Y+7	; 0x07
   16e9e:	88 27       	eor	r24, r24
   16ea0:	90 7d       	andi	r25, 0xD0	; 208
   16ea2:	19 c0       	rjmp	.+50     	; 0x16ed6 <amigo_cmd_dsj+0xba>
   16ea4:	25 ff       	sbrs	r18, 5
   16ea6:	0e c0       	rjmp	.+28     	; 0x16ec4 <amigo_cmd_dsj+0xa8>
   16ea8:	86 81       	ldd	r24, Z+6	; 0x06
   16eaa:	90 e0       	ldi	r25, 0x00	; 0
   16eac:	ed b7       	in	r30, 0x3d	; 61
   16eae:	fe b7       	in	r31, 0x3e	; 62
   16eb0:	95 83       	std	Z+5, r25	; 0x05
   16eb2:	84 83       	std	Z+4, r24	; 0x04
   16eb4:	8d eb       	ldi	r24, 0xBD	; 189
   16eb6:	9c e2       	ldi	r25, 0x2C	; 44
   16eb8:	a0 e0       	ldi	r26, 0x00	; 0
   16eba:	81 83       	std	Z+1, r24	; 0x01
   16ebc:	92 83       	std	Z+2, r25	; 0x02
   16ebe:	a3 83       	std	Z+3, r26	; 0x03
   16ec0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16ec4:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16ec8:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16ecc:	16 82       	std	Z+6, r1	; 0x06
   16ece:	10 86       	std	Z+8, r1	; 0x08
   16ed0:	17 82       	std	Z+7, r1	; 0x07
   16ed2:	80 e0       	ldi	r24, 0x00	; 0
   16ed4:	90 e0       	ldi	r25, 0x00	; 0
   16ed6:	28 96       	adiw	r28, 0x08	; 8
   16ed8:	e2 e0       	ldi	r30, 0x02	; 2
   16eda:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00016ede <amigo_cmd_clear>:
   16ede:	00 d0       	rcall	.+0      	; 0x16ee0 <amigo_cmd_clear+0x2>
   16ee0:	1f 92       	push	r1
   16ee2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ee6:	85 ff       	sbrs	r24, 5
   16ee8:	0a c0       	rjmp	.+20     	; 0x16efe <amigo_cmd_clear+0x20>
   16eea:	8e ea       	ldi	r24, 0xAE	; 174
   16eec:	9c e2       	ldi	r25, 0x2C	; 44
   16eee:	a0 e0       	ldi	r26, 0x00	; 0
   16ef0:	ed b7       	in	r30, 0x3d	; 61
   16ef2:	fe b7       	in	r31, 0x3e	; 62
   16ef4:	81 83       	std	Z+1, r24	; 0x01
   16ef6:	92 83       	std	Z+2, r25	; 0x02
   16ef8:	a3 83       	std	Z+3, r26	; 0x03
   16efa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   16efe:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16f02:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16f06:	15 82       	std	Z+5, r1	; 0x05
   16f08:	14 82       	std	Z+4, r1	; 0x04
   16f0a:	13 82       	std	Z+3, r1	; 0x03
   16f0c:	16 82       	std	Z+6, r1	; 0x06
   16f0e:	10 86       	std	Z+8, r1	; 0x08
   16f10:	17 82       	std	Z+7, r1	; 0x07
   16f12:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16f16:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16f1a:	81 81       	ldd	r24, Z+1	; 0x01
   16f1c:	90 e0       	ldi	r25, 0x00	; 0
   16f1e:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
   16f22:	80 e0       	ldi	r24, 0x00	; 0
   16f24:	90 e0       	ldi	r25, 0x00	; 0
   16f26:	0f 90       	pop	r0
   16f28:	0f 90       	pop	r0
   16f2a:	0f 90       	pop	r0
   16f2c:	08 95       	ret

00016f2e <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16f2e:	af e0       	ldi	r26, 0x0F	; 15
   16f30:	b0 e0       	ldi	r27, 0x00	; 0
   16f32:	ed e9       	ldi	r30, 0x9D	; 157
   16f34:	f7 eb       	ldi	r31, 0xB7	; 183
   16f36:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
   16f3a:	c8 2f       	mov	r28, r24
   16f3c:	e6 2e       	mov	r14, r22
   16f3e:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16f40:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16f44:	90 e0       	ldi	r25, 0x00	; 0
   16f46:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   16f4a:	20 91 fa 1e 	lds	r18, 0x1EFA	; 0x801efa <talking>
   16f4e:	f1 2c       	mov	r15, r1
   16f50:	d0 e0       	ldi	r29, 0x00	; 0
   16f52:	89 2b       	or	r24, r25
   16f54:	f1 f0       	breq	.+60     	; 0x16f92 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16f56:	82 2f       	mov	r24, r18
   16f58:	90 e0       	ldi	r25, 0x00	; 0
   16f5a:	ed b7       	in	r30, 0x3d	; 61
   16f5c:	fe b7       	in	r31, 0x3e	; 62
   16f5e:	97 87       	std	Z+15, r25	; 0x0f
   16f60:	86 87       	std	Z+14, r24	; 0x0e
   16f62:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16f66:	90 e0       	ldi	r25, 0x00	; 0
   16f68:	95 87       	std	Z+13, r25	; 0x0d
   16f6a:	84 87       	std	Z+12, r24	; 0x0c
   16f6c:	13 87       	std	Z+11, r17	; 0x0b
   16f6e:	02 87       	std	Z+10, r16	; 0x0a
   16f70:	f1 86       	std	Z+9, r15	; 0x09
   16f72:	e0 86       	std	Z+8, r14	; 0x08
   16f74:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16f78:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16f7c:	80 81       	ld	r24, Z
   16f7e:	90 e0       	ldi	r25, 0x00	; 0
   16f80:	ed b7       	in	r30, 0x3d	; 61
   16f82:	fe b7       	in	r31, 0x3e	; 62
   16f84:	97 83       	std	Z+7, r25	; 0x07
   16f86:	86 83       	std	Z+6, r24	; 0x06
   16f88:	d5 83       	std	Z+5, r29	; 0x05
   16f8a:	c4 83       	std	Z+4, r28	; 0x04
   16f8c:	87 e4       	ldi	r24, 0x47	; 71
   16f8e:	9c e2       	ldi	r25, 0x2C	; 44
   16f90:	51 c0       	rjmp	.+162    	; 0x17034 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16f92:	82 2f       	mov	r24, r18
   16f94:	90 e0       	ldi	r25, 0x00	; 0
   16f96:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
   16f9a:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <listening>
   16f9e:	30 91 fa 1e 	lds	r19, 0x1EFA	; 0x801efa <talking>
   16fa2:	a0 91 6f 19 	lds	r26, 0x196F	; 0x80196f <AMIGOs>
   16fa6:	b0 91 70 19 	lds	r27, 0x1970	; 0x801970 <AMIGOs+0x1>
   16faa:	89 2b       	or	r24, r25
   16fac:	b1 f0       	breq	.+44     	; 0x16fda <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16fae:	83 2f       	mov	r24, r19
   16fb0:	90 e0       	ldi	r25, 0x00	; 0
   16fb2:	ed b7       	in	r30, 0x3d	; 61
   16fb4:	fe b7       	in	r31, 0x3e	; 62
   16fb6:	97 87       	std	Z+15, r25	; 0x0f
   16fb8:	86 87       	std	Z+14, r24	; 0x0e
   16fba:	30 e0       	ldi	r19, 0x00	; 0
   16fbc:	35 87       	std	Z+13, r19	; 0x0d
   16fbe:	24 87       	std	Z+12, r18	; 0x0c
   16fc0:	13 87       	std	Z+11, r17	; 0x0b
   16fc2:	02 87       	std	Z+10, r16	; 0x0a
   16fc4:	f1 86       	std	Z+9, r15	; 0x09
   16fc6:	e0 86       	std	Z+8, r14	; 0x08
   16fc8:	8c 91       	ld	r24, X
   16fca:	90 e0       	ldi	r25, 0x00	; 0
   16fcc:	97 83       	std	Z+7, r25	; 0x07
   16fce:	86 83       	std	Z+6, r24	; 0x06
   16fd0:	d5 83       	std	Z+5, r29	; 0x05
   16fd2:	c4 83       	std	Z+4, r28	; 0x04
   16fd4:	80 ee       	ldi	r24, 0xE0	; 224
   16fd6:	9b e2       	ldi	r25, 0x2B	; 43
   16fd8:	2d c0       	rjmp	.+90     	; 0x17034 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16fda:	3f 35       	cpi	r19, 0x5F	; 95
   16fdc:	b1 f4       	brne	.+44     	; 0x1700a <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16fde:	8f e5       	ldi	r24, 0x5F	; 95
   16fe0:	90 e0       	ldi	r25, 0x00	; 0
   16fe2:	ed b7       	in	r30, 0x3d	; 61
   16fe4:	fe b7       	in	r31, 0x3e	; 62
   16fe6:	97 87       	std	Z+15, r25	; 0x0f
   16fe8:	86 87       	std	Z+14, r24	; 0x0e
   16fea:	30 e0       	ldi	r19, 0x00	; 0
   16fec:	35 87       	std	Z+13, r19	; 0x0d
   16fee:	24 87       	std	Z+12, r18	; 0x0c
   16ff0:	13 87       	std	Z+11, r17	; 0x0b
   16ff2:	02 87       	std	Z+10, r16	; 0x0a
   16ff4:	f1 86       	std	Z+9, r15	; 0x09
   16ff6:	e0 86       	std	Z+8, r14	; 0x08
   16ff8:	8c 91       	ld	r24, X
   16ffa:	90 e0       	ldi	r25, 0x00	; 0
   16ffc:	97 83       	std	Z+7, r25	; 0x07
   16ffe:	86 83       	std	Z+6, r24	; 0x06
   17000:	d5 83       	std	Z+5, r29	; 0x05
   17002:	c4 83       	std	Z+4, r28	; 0x04
   17004:	89 e7       	ldi	r24, 0x79	; 121
   17006:	9b e2       	ldi	r25, 0x2B	; 43
   17008:	15 c0       	rjmp	.+42     	; 0x17034 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1700a:	83 2f       	mov	r24, r19
   1700c:	90 e0       	ldi	r25, 0x00	; 0
   1700e:	ed b7       	in	r30, 0x3d	; 61
   17010:	fe b7       	in	r31, 0x3e	; 62
   17012:	97 87       	std	Z+15, r25	; 0x0f
   17014:	86 87       	std	Z+14, r24	; 0x0e
   17016:	30 e0       	ldi	r19, 0x00	; 0
   17018:	35 87       	std	Z+13, r19	; 0x0d
   1701a:	24 87       	std	Z+12, r18	; 0x0c
   1701c:	13 87       	std	Z+11, r17	; 0x0b
   1701e:	02 87       	std	Z+10, r16	; 0x0a
   17020:	f1 86       	std	Z+9, r15	; 0x09
   17022:	e0 86       	std	Z+8, r14	; 0x08
   17024:	8c 91       	ld	r24, X
   17026:	90 e0       	ldi	r25, 0x00	; 0
   17028:	97 83       	std	Z+7, r25	; 0x07
   1702a:	86 83       	std	Z+6, r24	; 0x06
   1702c:	d5 83       	std	Z+5, r29	; 0x05
   1702e:	c4 83       	std	Z+4, r28	; 0x04
   17030:	84 e1       	ldi	r24, 0x14	; 20
   17032:	9b e2       	ldi	r25, 0x2B	; 43
   17034:	a0 e0       	ldi	r26, 0x00	; 0
   17036:	81 83       	std	Z+1, r24	; 0x01
   17038:	92 83       	std	Z+2, r25	; 0x02
   1703a:	a3 83       	std	Z+3, r26	; 0x03
   1703c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17040:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   17044:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   17048:	81 81       	ldd	r24, Z+1	; 0x01
   1704a:	90 e0       	ldi	r25, 0x00	; 0
   1704c:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
    return(0);
}
   17050:	80 e0       	ldi	r24, 0x00	; 0
   17052:	90 e0       	ldi	r25, 0x00	; 0
   17054:	cd b7       	in	r28, 0x3d	; 61
   17056:	de b7       	in	r29, 0x3e	; 62
   17058:	2f 96       	adiw	r28, 0x0f	; 15
   1705a:	e6 e0       	ldi	r30, 0x06	; 6
   1705c:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00017060 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   17060:	ab e0       	ldi	r26, 0x0B	; 11
   17062:	b0 e0       	ldi	r27, 0x00	; 0
   17064:	e6 e3       	ldi	r30, 0x36	; 54
   17066:	f8 eb       	ldi	r31, 0xB8	; 184
   17068:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   1706c:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   1706e:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17072:	90 e0       	ldi	r25, 0x00	; 0
   17074:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   17078:	20 91 fa 1e 	lds	r18, 0x1EFA	; 0x801efa <talking>
   1707c:	d0 e0       	ldi	r29, 0x00	; 0
   1707e:	89 2b       	or	r24, r25
   17080:	d1 f0       	breq	.+52     	; 0x170b6 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17082:	82 2f       	mov	r24, r18
   17084:	90 e0       	ldi	r25, 0x00	; 0
   17086:	ed b7       	in	r30, 0x3d	; 61
   17088:	fe b7       	in	r31, 0x3e	; 62
   1708a:	93 87       	std	Z+11, r25	; 0x0b
   1708c:	82 87       	std	Z+10, r24	; 0x0a
   1708e:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17092:	90 e0       	ldi	r25, 0x00	; 0
   17094:	91 87       	std	Z+9, r25	; 0x09
   17096:	80 87       	std	Z+8, r24	; 0x08
   17098:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1709c:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   170a0:	80 81       	ld	r24, Z
   170a2:	90 e0       	ldi	r25, 0x00	; 0
   170a4:	ed b7       	in	r30, 0x3d	; 61
   170a6:	fe b7       	in	r31, 0x3e	; 62
   170a8:	97 83       	std	Z+7, r25	; 0x07
   170aa:	86 83       	std	Z+6, r24	; 0x06
   170ac:	d5 83       	std	Z+5, r29	; 0x05
   170ae:	c4 83       	std	Z+4, r28	; 0x04
   170b0:	84 ec       	ldi	r24, 0xC4	; 196
   170b2:	9a e2       	ldi	r25, 0x2A	; 42
   170b4:	43 c0       	rjmp	.+134    	; 0x1713c <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   170b6:	82 2f       	mov	r24, r18
   170b8:	90 e0       	ldi	r25, 0x00	; 0
   170ba:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
   170be:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <listening>
   170c2:	40 91 fa 1e 	lds	r20, 0x1EFA	; 0x801efa <talking>
   170c6:	a0 91 6f 19 	lds	r26, 0x196F	; 0x80196f <AMIGOs>
   170ca:	b0 91 70 19 	lds	r27, 0x1970	; 0x801970 <AMIGOs+0x1>
   170ce:	89 2b       	or	r24, r25
   170d0:	89 f0       	breq	.+34     	; 0x170f4 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   170d2:	50 e0       	ldi	r21, 0x00	; 0
   170d4:	ed b7       	in	r30, 0x3d	; 61
   170d6:	fe b7       	in	r31, 0x3e	; 62
   170d8:	53 87       	std	Z+11, r21	; 0x0b
   170da:	42 87       	std	Z+10, r20	; 0x0a
   170dc:	30 e0       	ldi	r19, 0x00	; 0
   170de:	31 87       	std	Z+9, r19	; 0x09
   170e0:	20 87       	std	Z+8, r18	; 0x08
   170e2:	8c 91       	ld	r24, X
   170e4:	90 e0       	ldi	r25, 0x00	; 0
   170e6:	97 83       	std	Z+7, r25	; 0x07
   170e8:	86 83       	std	Z+6, r24	; 0x06
   170ea:	d5 83       	std	Z+5, r29	; 0x05
   170ec:	c4 83       	std	Z+4, r28	; 0x04
   170ee:	84 e7       	ldi	r24, 0x74	; 116
   170f0:	9a e2       	ldi	r25, 0x2A	; 42
   170f2:	24 c0       	rjmp	.+72     	; 0x1713c <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   170f4:	4f 35       	cpi	r20, 0x5F	; 95
   170f6:	91 f4       	brne	.+36     	; 0x1711c <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   170f8:	8f e5       	ldi	r24, 0x5F	; 95
   170fa:	90 e0       	ldi	r25, 0x00	; 0
   170fc:	ed b7       	in	r30, 0x3d	; 61
   170fe:	fe b7       	in	r31, 0x3e	; 62
   17100:	93 87       	std	Z+11, r25	; 0x0b
   17102:	82 87       	std	Z+10, r24	; 0x0a
   17104:	30 e0       	ldi	r19, 0x00	; 0
   17106:	31 87       	std	Z+9, r19	; 0x09
   17108:	20 87       	std	Z+8, r18	; 0x08
   1710a:	8c 91       	ld	r24, X
   1710c:	90 e0       	ldi	r25, 0x00	; 0
   1710e:	97 83       	std	Z+7, r25	; 0x07
   17110:	86 83       	std	Z+6, r24	; 0x06
   17112:	d5 83       	std	Z+5, r29	; 0x05
   17114:	c4 83       	std	Z+4, r28	; 0x04
   17116:	84 e2       	ldi	r24, 0x24	; 36
   17118:	9a e2       	ldi	r25, 0x2A	; 42
   1711a:	10 c0       	rjmp	.+32     	; 0x1713c <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1711c:	50 e0       	ldi	r21, 0x00	; 0
   1711e:	ed b7       	in	r30, 0x3d	; 61
   17120:	fe b7       	in	r31, 0x3e	; 62
   17122:	53 87       	std	Z+11, r21	; 0x0b
   17124:	42 87       	std	Z+10, r20	; 0x0a
   17126:	30 e0       	ldi	r19, 0x00	; 0
   17128:	31 87       	std	Z+9, r19	; 0x09
   1712a:	20 87       	std	Z+8, r18	; 0x08
   1712c:	8c 91       	ld	r24, X
   1712e:	90 e0       	ldi	r25, 0x00	; 0
   17130:	97 83       	std	Z+7, r25	; 0x07
   17132:	86 83       	std	Z+6, r24	; 0x06
   17134:	d5 83       	std	Z+5, r29	; 0x05
   17136:	c4 83       	std	Z+4, r28	; 0x04
   17138:	83 ed       	ldi	r24, 0xD3	; 211
   1713a:	99 e2       	ldi	r25, 0x29	; 41
   1713c:	a0 e0       	ldi	r26, 0x00	; 0
   1713e:	81 83       	std	Z+1, r24	; 0x01
   17140:	92 83       	std	Z+2, r25	; 0x02
   17142:	a3 83       	std	Z+3, r26	; 0x03
   17144:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17148:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1714c:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   17150:	81 81       	ldd	r24, Z+1	; 0x01
   17152:	90 e0       	ldi	r25, 0x00	; 0
   17154:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
    return(0);
}
   17158:	80 e0       	ldi	r24, 0x00	; 0
   1715a:	90 e0       	ldi	r25, 0x00	; 0
   1715c:	cd b7       	in	r28, 0x3d	; 61
   1715e:	de b7       	in	r29, 0x3e	; 62
   17160:	2b 96       	adiw	r28, 0x0b	; 11
   17162:	e2 e0       	ldi	r30, 0x02	; 2
   17164:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00017168 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   17168:	8f 30       	cpi	r24, 0x0F	; 15
   1716a:	29 f0       	breq	.+10     	; 0x17176 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   1716c:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   17170:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   17174:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17176:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1717a:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1717e:	81 81       	ldd	r24, Z+1	; 0x01
   17180:	88 23       	and	r24, r24
   17182:	29 f0       	breq	.+10     	; 0x1718e <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17184:	87 81       	ldd	r24, Z+7	; 0x07
   17186:	90 85       	ldd	r25, Z+8	; 0x08
   17188:	80 64       	ori	r24, 0x40	; 64
   1718a:	90 87       	std	Z+8, r25	; 0x08
   1718c:	87 83       	std	Z+7, r24	; 0x07
   1718e:	08 95       	ret

00017190 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   17190:	ac e1       	ldi	r26, 0x1C	; 28
   17192:	b0 e0       	ldi	r27, 0x00	; 0
   17194:	ee ec       	ldi	r30, 0xCE	; 206
   17196:	f8 eb       	ldi	r31, 0xB8	; 184
   17198:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
   1719c:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1719e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171a2:	85 ff       	sbrs	r24, 5
   171a4:	16 c0       	rjmp	.+44     	; 0x171d2 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   171a6:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   171aa:	90 e0       	ldi	r25, 0x00	; 0
   171ac:	ed b7       	in	r30, 0x3d	; 61
   171ae:	fe b7       	in	r31, 0x3e	; 62
   171b0:	91 87       	std	Z+9, r25	; 0x09
   171b2:	80 87       	std	Z+8, r24	; 0x08
   171b4:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   171b8:	90 e0       	ldi	r25, 0x00	; 0
   171ba:	97 83       	std	Z+7, r25	; 0x07
   171bc:	86 83       	std	Z+6, r24	; 0x06
   171be:	f5 82       	std	Z+5, r15	; 0x05
   171c0:	e4 82       	std	Z+4, r14	; 0x04
   171c2:	81 ea       	ldi	r24, 0xA1	; 161
   171c4:	99 e2       	ldi	r25, 0x29	; 41
   171c6:	a0 e0       	ldi	r26, 0x00	; 0
   171c8:	81 83       	std	Z+1, r24	; 0x01
   171ca:	92 83       	std	Z+2, r25	; 0x02
   171cc:	a3 83       	std	Z+3, r26	; 0x03
   171ce:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   171d2:	fe e7       	ldi	r31, 0x7E	; 126
   171d4:	ef 16       	cp	r14, r31
   171d6:	f1 04       	cpc	r15, r1
   171d8:	f1 f5       	brne	.+124    	; 0x17256 <Amigo_Command+0xc6>
   171da:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   171de:	90 e0       	ldi	r25, 0x00	; 0
   171e0:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
   171e4:	89 2b       	or	r24, r25
   171e6:	09 f4       	brne	.+2      	; 0x171ea <Amigo_Command+0x5a>
   171e8:	86 c0       	rjmp	.+268    	; 0x172f6 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   171ea:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   171ee:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   171f2:	81 81       	ldd	r24, Z+1	; 0x01
   171f4:	90 e0       	ldi	r25, 0x00	; 0
   171f6:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
        status = EOI_FLAG;
   171fa:	80 e0       	ldi	r24, 0x00	; 0
   171fc:	91 e0       	ldi	r25, 0x01	; 1
   171fe:	9c 8f       	std	Y+28, r25	; 0x1c
   17200:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17202:	ae 01       	movw	r20, r28
   17204:	45 5e       	subi	r20, 0xE5	; 229
   17206:	5f 4f       	sbci	r21, 0xFF	; 255
   17208:	60 e0       	ldi	r22, 0x00	; 0
   1720a:	72 e0       	ldi	r23, 0x02	; 2
   1720c:	86 ef       	ldi	r24, 0xF6	; 246
   1720e:	9c e1       	ldi	r25, 0x1C	; 28
   17210:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17214:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   17218:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1721c:	81 81       	ldd	r24, Z+1	; 0x01
   1721e:	90 e0       	ldi	r25, 0x00	; 0
   17220:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17224:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17226:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17228:	88 27       	eor	r24, r24
   1722a:	90 7d       	andi	r25, 0xD0	; 208
   1722c:	89 2b       	or	r24, r25
   1722e:	09 f4       	brne	.+2      	; 0x17232 <Amigo_Command+0xa2>
   17230:	89 c2       	rjmp	.+1298   	; 0x17744 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17232:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   17236:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1723a:	81 e0       	ldi	r24, 0x01	; 1
   1723c:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   1723e:	87 81       	ldd	r24, Z+7	; 0x07
   17240:	90 85       	ldd	r25, Z+8	; 0x08
   17242:	80 62       	ori	r24, 0x20	; 32
   17244:	90 87       	std	Z+8, r25	; 0x08
   17246:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   17248:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1724c:	80 ff       	sbrs	r24, 0
   1724e:	7a c2       	rjmp	.+1268   	; 0x17744 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   17250:	8f e7       	ldi	r24, 0x7F	; 127
   17252:	99 e2       	ldi	r25, 0x29	; 41
   17254:	8e c0       	rjmp	.+284    	; 0x17372 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17256:	ff e7       	ldi	r31, 0x7F	; 127
   17258:	ef 16       	cp	r14, r31
   1725a:	f1 04       	cpc	r15, r1
   1725c:	09 f0       	breq	.+2      	; 0x17260 <Amigo_Command+0xd0>
   1725e:	4b c0       	rjmp	.+150    	; 0x172f6 <Amigo_Command+0x166>
   17260:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17264:	90 e0       	ldi	r25, 0x00	; 0
   17266:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   1726a:	89 2b       	or	r24, r25
   1726c:	09 f4       	brne	.+2      	; 0x17270 <Amigo_Command+0xe0>
   1726e:	43 c0       	rjmp	.+134    	; 0x172f6 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17270:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   17274:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   17278:	81 81       	ldd	r24, Z+1	; 0x01
   1727a:	90 e0       	ldi	r25, 0x00	; 0
   1727c:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   17280:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17284:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17286:	0e 94 f7 86 	call	0x10dee	; 0x10dee <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   1728a:	80 e0       	ldi	r24, 0x00	; 0
   1728c:	91 e0       	ldi	r25, 0x01	; 1
   1728e:	9c 8f       	std	Y+28, r25	; 0x1c
   17290:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17292:	ae 01       	movw	r20, r28
   17294:	45 5e       	subi	r20, 0xE5	; 229
   17296:	5f 4f       	sbci	r21, 0xFF	; 255
   17298:	60 e0       	ldi	r22, 0x00	; 0
   1729a:	72 e0       	ldi	r23, 0x02	; 2
   1729c:	86 ef       	ldi	r24, 0xF6	; 246
   1729e:	9c e1       	ldi	r25, 0x1C	; 28
   172a0:	0e 94 a7 8c 	call	0x1194e	; 0x1194e <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   172a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172a8:	87 ff       	sbrs	r24, 7
   172aa:	04 c0       	rjmp	.+8      	; 0x172b4 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   172ac:	8d ec       	ldi	r24, 0xCD	; 205
   172ae:	95 e1       	ldi	r25, 0x15	; 21
   172b0:	0e 94 09 87 	call	0x10e12	; 0x10e12 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   172b4:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   172b8:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   172bc:	81 81       	ldd	r24, Z+1	; 0x01
   172be:	90 e0       	ldi	r25, 0x00	; 0
   172c0:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   172c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
   172c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
   172c8:	88 27       	eor	r24, r24
   172ca:	90 7d       	andi	r25, 0xD0	; 208
   172cc:	89 2b       	or	r24, r25
   172ce:	09 f4       	brne	.+2      	; 0x172d2 <Amigo_Command+0x142>
   172d0:	39 c2       	rjmp	.+1138   	; 0x17744 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   172d2:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   172d6:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   172da:	81 e0       	ldi	r24, 0x01	; 1
   172dc:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   172de:	87 81       	ldd	r24, Z+7	; 0x07
   172e0:	90 85       	ldd	r25, Z+8	; 0x08
   172e2:	80 62       	ori	r24, 0x20	; 32
   172e4:	90 87       	std	Z+8, r25	; 0x08
   172e6:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   172e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172ec:	80 ff       	sbrs	r24, 0
   172ee:	2a c2       	rjmp	.+1108   	; 0x17744 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   172f0:	8e e5       	ldi	r24, 0x5E	; 94
   172f2:	99 e2       	ldi	r25, 0x29	; 41
   172f4:	3e c0       	rjmp	.+124    	; 0x17372 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   172f6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   172fa:	90 e0       	ldi	r25, 0x00	; 0
   172fc:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   17300:	89 2b       	or	r24, r25
   17302:	19 f4       	brne	.+6      	; 0x1730a <Amigo_Command+0x17a>
        return(0);
   17304:	80 e0       	ldi	r24, 0x00	; 0
   17306:	90 e0       	ldi	r25, 0x00	; 0
   17308:	25 c2       	rjmp	.+1098   	; 0x17754 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1730a:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1730e:	90 e0       	ldi	r25, 0x00	; 0
   17310:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
   17314:	89 2b       	or	r24, r25
   17316:	b1 f7       	brne	.-20     	; 0x17304 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17318:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1731c:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   17320:	81 81       	ldd	r24, Z+1	; 0x01
   17322:	90 e0       	ldi	r25, 0x00	; 0
   17324:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   17328:	80 e0       	ldi	r24, 0x00	; 0
   1732a:	91 e0       	ldi	r25, 0x01	; 1
   1732c:	9c 8f       	std	Y+28, r25	; 0x1c
   1732e:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17330:	ae 01       	movw	r20, r28
   17332:	45 5e       	subi	r20, 0xE5	; 229
   17334:	5f 4f       	sbci	r21, 0xFF	; 255
   17336:	60 e0       	ldi	r22, 0x00	; 0
   17338:	72 e0       	ldi	r23, 0x02	; 2
   1733a:	86 ef       	ldi	r24, 0xF6	; 246
   1733c:	9c e1       	ldi	r25, 0x1C	; 28
   1733e:	0e 94 a7 8c 	call	0x1194e	; 0x1194e <gpib_read_str>
   17342:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17344:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17346:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17348:	88 27       	eor	r24, r24
   1734a:	90 7d       	andi	r25, 0xD0	; 208
   1734c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   17350:	89 2b       	or	r24, r25
   17352:	c1 f0       	breq	.+48     	; 0x17384 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17354:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   17358:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1735c:	81 e0       	ldi	r24, 0x01	; 1
   1735e:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17360:	87 81       	ldd	r24, Z+7	; 0x07
   17362:	90 85       	ldd	r25, Z+8	; 0x08
   17364:	80 62       	ori	r24, 0x20	; 32
   17366:	90 87       	std	Z+8, r25	; 0x08
   17368:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   1736a:	20 ff       	sbrs	r18, 0
   1736c:	eb c1       	rjmp	.+982    	; 0x17744 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   1736e:	8d e3       	ldi	r24, 0x3D	; 61
   17370:	99 e2       	ldi	r25, 0x29	; 41
   17372:	a0 e0       	ldi	r26, 0x00	; 0
   17374:	ed b7       	in	r30, 0x3d	; 61
   17376:	fe b7       	in	r31, 0x3e	; 62
   17378:	81 83       	std	Z+1, r24	; 0x01
   1737a:	92 83       	std	Z+2, r25	; 0x02
   1737c:	a3 83       	std	Z+3, r26	; 0x03
   1737e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   17382:	e0 c1       	rjmp	.+960    	; 0x17744 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17384:	25 ff       	sbrs	r18, 5
   17386:	0e c0       	rjmp	.+28     	; 0x173a4 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17388:	ed b7       	in	r30, 0x3d	; 61
   1738a:	fe b7       	in	r31, 0x3e	; 62
   1738c:	17 83       	std	Z+7, r17	; 0x07
   1738e:	06 83       	std	Z+6, r16	; 0x06
   17390:	f5 82       	std	Z+5, r15	; 0x05
   17392:	e4 82       	std	Z+4, r14	; 0x04
   17394:	8e e0       	ldi	r24, 0x0E	; 14
   17396:	99 e2       	ldi	r25, 0x29	; 41
   17398:	a0 e0       	ldi	r26, 0x00	; 0
   1739a:	81 83       	std	Z+1, r24	; 0x01
   1739c:	92 83       	std	Z+2, r25	; 0x02
   1739e:	a3 83       	std	Z+3, r26	; 0x03
   173a0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            secondary, len);
#endif
    if(!len)
   173a4:	01 15       	cp	r16, r1
   173a6:	11 05       	cpc	r17, r1
   173a8:	61 f4       	brne	.+24     	; 0x173c2 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   173aa:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   173ae:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   173b2:	81 e0       	ldi	r24, 0x01	; 1
   173b4:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   173b6:	87 81       	ldd	r24, Z+7	; 0x07
   173b8:	90 85       	ldd	r25, Z+8	; 0x08
   173ba:	80 62       	ori	r24, 0x20	; 32
   173bc:	90 87       	std	Z+8, r25	; 0x08
   173be:	87 83       	std	Z+7, r24	; 0x07
   173c0:	c1 c1       	rjmp	.+898    	; 0x17744 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   173c2:	60 91 f6 1c 	lds	r22, 0x1CF6	; 0x801cf6 <gpib_iobuff>

    if (secondary == 0x68)
   173c6:	f8 e6       	ldi	r31, 0x68	; 104
   173c8:	ef 16       	cp	r14, r31
   173ca:	f1 04       	cpc	r15, r1
   173cc:	09 f0       	breq	.+2      	; 0x173d0 <Amigo_Command+0x240>
   173ce:	28 c1       	rjmp	.+592    	; 0x17620 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   173d0:	61 11       	cpse	r22, r1
   173d2:	2e c0       	rjmp	.+92     	; 0x17430 <Amigo_Command+0x2a0>
   173d4:	02 30       	cpi	r16, 0x02	; 2
   173d6:	11 05       	cpc	r17, r1
   173d8:	09 f0       	breq	.+2      	; 0x173dc <Amigo_Command+0x24c>
   173da:	b9 c1       	rjmp	.+882    	; 0x1774e <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173e0:	85 ff       	sbrs	r24, 5
   173e2:	0a c0       	rjmp	.+20     	; 0x173f8 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   173e4:	8e ee       	ldi	r24, 0xEE	; 238
   173e6:	98 e2       	ldi	r25, 0x28	; 40
   173e8:	a0 e0       	ldi	r26, 0x00	; 0
   173ea:	ed b7       	in	r30, 0x3d	; 61
   173ec:	fe b7       	in	r31, 0x3e	; 62
   173ee:	81 83       	std	Z+1, r24	; 0x01
   173f0:	92 83       	std	Z+2, r25	; 0x02
   173f2:	a3 83       	std	Z+3, r26	; 0x03
   173f4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   173f8:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   173fc:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   17400:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17402:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17404:	10 86       	std	Z+8, r1	; 0x08
   17406:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   17408:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   1740a:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   1740e:	98 2f       	mov	r25, r24
   17410:	92 95       	swap	r25
   17412:	96 95       	lsr	r25
   17414:	96 95       	lsr	r25
   17416:	93 70       	andi	r25, 0x03	; 3
   17418:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   1741a:	8f 73       	andi	r24, 0x3F	; 63
   1741c:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   1741e:	ce 01       	movw	r24, r28
   17420:	0a 96       	adiw	r24, 0x0a	; 10
   17422:	db d9       	rcall	.-3146   	; 0x167da <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17424:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   17428:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1742c:	85 e0       	ldi	r24, 0x05	; 5
   1742e:	19 c1       	rjmp	.+562    	; 0x17662 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17430:	62 30       	cpi	r22, 0x02	; 2
   17432:	09 f0       	breq	.+2      	; 0x17436 <Amigo_Command+0x2a6>
   17434:	3f c0       	rjmp	.+126    	; 0x174b4 <Amigo_Command+0x324>
   17436:	05 30       	cpi	r16, 0x05	; 5
   17438:	11 05       	cpc	r17, r1
   1743a:	d1 f4       	brne	.+52     	; 0x17470 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1743c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17440:	85 ff       	sbrs	r24, 5
   17442:	0a c0       	rjmp	.+20     	; 0x17458 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   17444:	8a ed       	ldi	r24, 0xDA	; 218
   17446:	98 e2       	ldi	r25, 0x28	; 40
   17448:	a0 e0       	ldi	r26, 0x00	; 0
   1744a:	ed b7       	in	r30, 0x3d	; 61
   1744c:	fe b7       	in	r31, 0x3e	; 62
   1744e:	81 83       	std	Z+1, r24	; 0x01
   17450:	92 83       	std	Z+2, r25	; 0x02
   17452:	a3 83       	std	Z+3, r26	; 0x03
   17454:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17458:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   1745c:	85 de       	rcall	.-758    	; 0x17168 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   1745e:	80 91 f8 1c 	lds	r24, 0x1CF8	; 0x801cf8 <gpib_iobuff+0x2>
   17462:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17464:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x3>
   17468:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1746a:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x4>
   1746e:	1d c0       	rjmp	.+58     	; 0x174aa <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17470:	06 30       	cpi	r16, 0x06	; 6
   17472:	11 05       	cpc	r17, r1
   17474:	09 f0       	breq	.+2      	; 0x17478 <Amigo_Command+0x2e8>
   17476:	6b c1       	rjmp	.+726    	; 0x1774e <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17478:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1747c:	85 ff       	sbrs	r24, 5
   1747e:	0a c0       	rjmp	.+20     	; 0x17494 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17480:	86 ec       	ldi	r24, 0xC6	; 198
   17482:	98 e2       	ldi	r25, 0x28	; 40
   17484:	a0 e0       	ldi	r26, 0x00	; 0
   17486:	ed b7       	in	r30, 0x3d	; 61
   17488:	fe b7       	in	r31, 0x3e	; 62
   1748a:	81 83       	std	Z+1, r24	; 0x01
   1748c:	92 83       	std	Z+2, r25	; 0x02
   1748e:	a3 83       	std	Z+3, r26	; 0x03
   17490:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17494:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   17498:	67 de       	rcall	.-818    	; 0x17168 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   1749a:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x3>
   1749e:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   174a0:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x4>
   174a4:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   174a6:	80 91 fb 1c 	lds	r24, 0x1CFB	; 0x801cfb <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   174aa:	8f 87       	std	Y+15, r24	; 0x0f
   174ac:	ce 01       	movw	r24, r28
   174ae:	0a 96       	adiw	r24, 0x0a	; 10
   174b0:	94 d9       	rcall	.-3288   	; 0x167da <amigo_seek>
   174b2:	d8 c0       	rjmp	.+432    	; 0x17664 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   174b4:	63 30       	cpi	r22, 0x03	; 3
   174b6:	e9 f4       	brne	.+58     	; 0x174f2 <Amigo_Command+0x362>
   174b8:	02 30       	cpi	r16, 0x02	; 2
   174ba:	11 05       	cpc	r17, r1
   174bc:	09 f0       	breq	.+2      	; 0x174c0 <Amigo_Command+0x330>
   174be:	47 c1       	rjmp	.+654    	; 0x1774e <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174c4:	85 ff       	sbrs	r24, 5
   174c6:	0a c0       	rjmp	.+20     	; 0x174dc <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   174c8:	8d e9       	ldi	r24, 0x9D	; 157
   174ca:	98 e2       	ldi	r25, 0x28	; 40
   174cc:	a0 e0       	ldi	r26, 0x00	; 0
   174ce:	ed b7       	in	r30, 0x3d	; 61
   174d0:	fe b7       	in	r31, 0x3e	; 62
   174d2:	81 83       	std	Z+1, r24	; 0x01
   174d4:	92 83       	std	Z+2, r25	; 0x02
   174d6:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   174d8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   174dc:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            amigo_request_status();
   174e0:	43 de       	rcall	.-890    	; 0x17168 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   174e2:	39 d8       	rcall	.-3982   	; 0x16556 <amigo_request_status>
   174e4:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   174e8:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   174ec:	83 e0       	ldi	r24, 0x03	; 3
   174ee:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   174f0:	29 c1       	rjmp	.+594    	; 0x17744 <Amigo_Command+0x5b4>
   174f2:	65 30       	cpi	r22, 0x05	; 5
   174f4:	d9 f4       	brne	.+54     	; 0x1752c <Amigo_Command+0x39c>
   174f6:	02 30       	cpi	r16, 0x02	; 2
   174f8:	11 05       	cpc	r17, r1
   174fa:	09 f0       	breq	.+2      	; 0x174fe <Amigo_Command+0x36e>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174fc:	28 c1       	rjmp	.+592    	; 0x1774e <Amigo_Command+0x5be>
   174fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17502:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   17504:	0a c0       	rjmp	.+20     	; 0x1751a <Amigo_Command+0x38a>
   17506:	8c e7       	ldi	r24, 0x7C	; 124
   17508:	98 e2       	ldi	r25, 0x28	; 40
   1750a:	a0 e0       	ldi	r26, 0x00	; 0
   1750c:	ed b7       	in	r30, 0x3d	; 61
   1750e:	fe b7       	in	r31, 0x3e	; 62
   17510:	81 83       	std	Z+1, r24	; 0x01
   17512:	92 83       	std	Z+2, r25	; 0x02
   17514:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17516:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1751a:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   1751e:	24 de       	rcall	.-952    	; 0x17168 <amigo_check_unit>
   17520:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   17524:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   17528:	86 e0       	ldi	r24, 0x06	; 6
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   1752a:	e7 c0       	rjmp	.+462    	; 0x176fa <Amigo_Command+0x56a>
   1752c:	67 30       	cpi	r22, 0x07	; 7
   1752e:	f9 f4       	brne	.+62     	; 0x1756e <Amigo_Command+0x3de>
   17530:	04 30       	cpi	r16, 0x04	; 4
   17532:	11 05       	cpc	r17, r1
   17534:	09 f0       	breq	.+2      	; 0x17538 <Amigo_Command+0x3a8>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17536:	0b c1       	rjmp	.+534    	; 0x1774e <Amigo_Command+0x5be>
   17538:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1753c:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   1753e:	0a c0       	rjmp	.+20     	; 0x17554 <Amigo_Command+0x3c4>
   17540:	8c e6       	ldi	r24, 0x6C	; 108
   17542:	98 e2       	ldi	r25, 0x28	; 40
   17544:	a0 e0       	ldi	r26, 0x00	; 0
   17546:	ed b7       	in	r30, 0x3d	; 61
   17548:	fe b7       	in	r31, 0x3e	; 62
   1754a:	81 83       	std	Z+1, r24	; 0x01
   1754c:	92 83       	std	Z+2, r25	; 0x02
   1754e:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17550:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   17554:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   17558:	07 de       	rcall	.-1010   	; 0x17168 <amigo_check_unit>
   1755a:	80 91 f8 1c 	lds	r24, 0x1CF8	; 0x801cf8 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   1755e:	90 e0       	ldi	r25, 0x00	; 0
   17560:	98 2f       	mov	r25, r24
   17562:	88 27       	eor	r24, r24
   17564:	20 91 f9 1c 	lds	r18, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x3>
   17568:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   1756a:	62 d9       	rcall	.-3388   	; 0x16830 <amigo_verify>
   1756c:	f3 c0       	rjmp	.+486    	; 0x17754 <Amigo_Command+0x5c4>
   1756e:	68 30       	cpi	r22, 0x08	; 8
   17570:	d9 f4       	brne	.+54     	; 0x175a8 <Amigo_Command+0x418>
   17572:	02 30       	cpi	r16, 0x02	; 2
   17574:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17576:	09 f0       	breq	.+2      	; 0x1757a <Amigo_Command+0x3ea>
   17578:	ea c0       	rjmp	.+468    	; 0x1774e <Amigo_Command+0x5be>
   1757a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   1757e:	85 ff       	sbrs	r24, 5
   17580:	0a c0       	rjmp	.+20     	; 0x17596 <Amigo_Command+0x406>
   17582:	8a e4       	ldi	r24, 0x4A	; 74
   17584:	98 e2       	ldi	r25, 0x28	; 40
   17586:	a0 e0       	ldi	r26, 0x00	; 0
   17588:	ed b7       	in	r30, 0x3d	; 61
   1758a:	fe b7       	in	r31, 0x3e	; 62
   1758c:	81 83       	std	Z+1, r24	; 0x01
   1758e:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17590:	a3 83       	std	Z+3, r26	; 0x03
   17592:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   17596:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   1759a:	e6 dd       	rcall	.-1076   	; 0x17168 <amigo_check_unit>
   1759c:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   175a0:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   175a4:	88 e0       	ldi	r24, 0x08	; 8
   175a6:	5d c0       	rjmp	.+186    	; 0x17662 <Amigo_Command+0x4d2>
   175a8:	86 2f       	mov	r24, r22
   175aa:	8f 7d       	andi	r24, 0xDF	; 223
   175ac:	8b 30       	cpi	r24, 0x0B	; 11
   175ae:	d9 f4       	brne	.+54     	; 0x175e6 <Amigo_Command+0x456>
   175b0:	02 30       	cpi	r16, 0x02	; 2
   175b2:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175b4:	09 f0       	breq	.+2      	; 0x175b8 <Amigo_Command+0x428>
   175b6:	cb c0       	rjmp	.+406    	; 0x1774e <Amigo_Command+0x5be>
   175b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   175bc:	85 ff       	sbrs	r24, 5
   175be:	0a c0       	rjmp	.+20     	; 0x175d4 <Amigo_Command+0x444>
   175c0:	8e e2       	ldi	r24, 0x2E	; 46
   175c2:	98 e2       	ldi	r25, 0x28	; 40
   175c4:	a0 e0       	ldi	r26, 0x00	; 0
   175c6:	ed b7       	in	r30, 0x3d	; 61
   175c8:	fe b7       	in	r31, 0x3e	; 62
   175ca:	81 83       	std	Z+1, r24	; 0x01
   175cc:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   175ce:	a3 83       	std	Z+3, r26	; 0x03
   175d0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   175d4:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   175d8:	c7 dd       	rcall	.-1138   	; 0x17168 <amigo_check_unit>
   175da:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   175de:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   175e2:	8a e0       	ldi	r24, 0x0A	; 10
   175e4:	3e c0       	rjmp	.+124    	; 0x17662 <Amigo_Command+0x4d2>
   175e6:	64 31       	cpi	r22, 0x14	; 20
   175e8:	09 f0       	breq	.+2      	; 0x175ec <Amigo_Command+0x45c>
   175ea:	b1 c0       	rjmp	.+354    	; 0x1774e <Amigo_Command+0x5be>
   175ec:	02 30       	cpi	r16, 0x02	; 2
   175ee:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175f0:	09 f0       	breq	.+2      	; 0x175f4 <Amigo_Command+0x464>
   175f2:	ad c0       	rjmp	.+346    	; 0x1774e <Amigo_Command+0x5be>
   175f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   175f8:	85 ff       	sbrs	r24, 5
   175fa:	0a c0       	rjmp	.+20     	; 0x17610 <Amigo_Command+0x480>
   175fc:	85 e0       	ldi	r24, 0x05	; 5
   175fe:	98 e2       	ldi	r25, 0x28	; 40
   17600:	a0 e0       	ldi	r26, 0x00	; 0
   17602:	ed b7       	in	r30, 0x3d	; 61
   17604:	fe b7       	in	r31, 0x3e	; 62
   17606:	81 83       	std	Z+1, r24	; 0x01
   17608:	92 83       	std	Z+2, r25	; 0x02
   1760a:	a3 83       	std	Z+3, r26	; 0x03
#endif
            amigo_request_logical_address();
   1760c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17610:	0e 94 9d b2 	call	0x1653a	; 0x1653a <amigo_request_logical_address>
   17614:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   17618:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   1761c:	84 e0       	ldi	r24, 0x04	; 4
   1761e:	21 c0       	rjmp	.+66     	; 0x17662 <Amigo_Command+0x4d2>
   17620:	f9 e6       	ldi	r31, 0x69	; 105
   17622:	ef 16       	cp	r14, r31
    {
        if(op == 0x08 && len == 2)
   17624:	f1 04       	cpc	r15, r1
   17626:	39 f5       	brne	.+78     	; 0x17676 <Amigo_Command+0x4e6>
   17628:	68 30       	cpi	r22, 0x08	; 8
   1762a:	09 f0       	breq	.+2      	; 0x1762e <Amigo_Command+0x49e>
   1762c:	90 c0       	rjmp	.+288    	; 0x1774e <Amigo_Command+0x5be>
   1762e:	02 30       	cpi	r16, 0x02	; 2
   17630:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17632:	09 f0       	breq	.+2      	; 0x17636 <Amigo_Command+0x4a6>
   17634:	8c c0       	rjmp	.+280    	; 0x1774e <Amigo_Command+0x5be>
   17636:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   1763a:	85 ff       	sbrs	r24, 5
   1763c:	0a c0       	rjmp	.+20     	; 0x17652 <Amigo_Command+0x4c2>
   1763e:	85 ee       	ldi	r24, 0xE5	; 229
   17640:	97 e2       	ldi	r25, 0x27	; 39
   17642:	a0 e0       	ldi	r26, 0x00	; 0
   17644:	ed b7       	in	r30, 0x3d	; 61
   17646:	fe b7       	in	r31, 0x3e	; 62
   17648:	81 83       	std	Z+1, r24	; 0x01
   1764a:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1764c:	a3 83       	std	Z+3, r26	; 0x03
   1764e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   17652:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17656:	88 dd       	rcall	.-1264   	; 0x17168 <amigo_check_unit>
   17658:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1765c:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17660:	89 e0       	ldi	r24, 0x09	; 9
   17662:	80 83       	st	Z, r24
   17664:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   17668:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1766c:	81 81       	ldd	r24, Z+1	; 0x01
   1766e:	90 e0       	ldi	r25, 0x00	; 0
   17670:	0e 94 b9 87 	call	0x10f72	; 0x10f72 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17674:	67 c0       	rjmp	.+206    	; 0x17744 <Amigo_Command+0x5b4>
   17676:	fa e6       	ldi	r31, 0x6A	; 106
   17678:	ef 16       	cp	r14, r31
   1767a:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   1767c:	09 f0       	breq	.+2      	; 0x17680 <Amigo_Command+0x4f0>
   1767e:	40 c0       	rjmp	.+128    	; 0x17700 <Amigo_Command+0x570>
   17680:	68 30       	cpi	r22, 0x08	; 8
   17682:	f1 f4       	brne	.+60     	; 0x176c0 <Amigo_Command+0x530>
   17684:	02 30       	cpi	r16, 0x02	; 2
   17686:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17688:	09 f0       	breq	.+2      	; 0x1768c <Amigo_Command+0x4fc>
   1768a:	61 c0       	rjmp	.+194    	; 0x1774e <Amigo_Command+0x5be>
   1768c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17690:	85 ff       	sbrs	r24, 5
   17692:	0a c0       	rjmp	.+20     	; 0x176a8 <Amigo_Command+0x518>
   17694:	8a eb       	ldi	r24, 0xBA	; 186
   17696:	97 e2       	ldi	r25, 0x27	; 39
   17698:	a0 e0       	ldi	r26, 0x00	; 0
   1769a:	ed b7       	in	r30, 0x3d	; 61
   1769c:	fe b7       	in	r31, 0x3e	; 62
   1769e:	81 83       	std	Z+1, r24	; 0x01
   176a0:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176a2:	a3 83       	std	Z+3, r26	; 0x03
   176a4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   176a8:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   176ac:	5d dd       	rcall	.-1350   	; 0x17168 <amigo_check_unit>
   176ae:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   176b2:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            amigo_request_status();
   176b6:	82 e0       	ldi	r24, 0x02	; 2
   176b8:	80 83       	st	Z, r24
   176ba:	0e 94 ab b2 	call	0x16556	; 0x16556 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   176be:	42 c0       	rjmp	.+132    	; 0x17744 <Amigo_Command+0x5b4>
   176c0:	65 30       	cpi	r22, 0x05	; 5
   176c2:	09 f0       	breq	.+2      	; 0x176c6 <Amigo_Command+0x536>
   176c4:	44 c0       	rjmp	.+136    	; 0x1774e <Amigo_Command+0x5be>
   176c6:	02 30       	cpi	r16, 0x02	; 2
   176c8:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176ca:	09 f0       	breq	.+2      	; 0x176ce <Amigo_Command+0x53e>
   176cc:	40 c0       	rjmp	.+128    	; 0x1774e <Amigo_Command+0x5be>
   176ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   176d2:	85 ff       	sbrs	r24, 5
   176d4:	0a c0       	rjmp	.+20     	; 0x176ea <Amigo_Command+0x55a>
   176d6:	8b e9       	ldi	r24, 0x9B	; 155
   176d8:	97 e2       	ldi	r25, 0x27	; 39
   176da:	a0 e0       	ldi	r26, 0x00	; 0
   176dc:	ed b7       	in	r30, 0x3d	; 61
   176de:	fe b7       	in	r31, 0x3e	; 62
   176e0:	81 83       	std	Z+1, r24	; 0x01
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176e2:	92 83       	std	Z+2, r25	; 0x02
   176e4:	a3 83       	std	Z+3, r26	; 0x03
   176e6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   176ea:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   176ee:	3c dd       	rcall	.-1416   	; 0x17168 <amigo_check_unit>
   176f0:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   176f4:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   176f8:	87 e0       	ldi	r24, 0x07	; 7
   176fa:	80 83       	st	Z, r24
#endif
        }
    }
    else if (secondary == 0x6C)
   176fc:	ca d9       	rcall	.-3180   	; 0x16a92 <amigo_buffered_read_command>
   176fe:	2a c0       	rjmp	.+84     	; 0x17754 <Amigo_Command+0x5c4>
   17700:	fc e6       	ldi	r31, 0x6C	; 108
   17702:	ef 16       	cp	r14, r31
    {
        if(op == 0x18 && len == 5)
   17704:	f1 04       	cpc	r15, r1
   17706:	d1 f4       	brne	.+52     	; 0x1773c <Amigo_Command+0x5ac>
   17708:	68 31       	cpi	r22, 0x18	; 24
   1770a:	09 f5       	brne	.+66     	; 0x1774e <Amigo_Command+0x5be>
   1770c:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1770e:	11 05       	cpc	r17, r1
   17710:	f1 f4       	brne	.+60     	; 0x1774e <Amigo_Command+0x5be>
   17712:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Format]\n");
   17716:	85 ff       	sbrs	r24, 5
   17718:	0a c0       	rjmp	.+20     	; 0x1772e <Amigo_Command+0x59e>
   1771a:	8b e8       	ldi	r24, 0x8B	; 139
   1771c:	97 e2       	ldi	r25, 0x27	; 39
   1771e:	a0 e0       	ldi	r26, 0x00	; 0
   17720:	ed b7       	in	r30, 0x3d	; 61
   17722:	fe b7       	in	r31, 0x3e	; 62
   17724:	81 83       	std	Z+1, r24	; 0x01
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17726:	92 83       	std	Z+2, r25	; 0x02
   17728:	a3 83       	std	Z+3, r26	; 0x03
   1772a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   1772e:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   17732:	1a dd       	rcall	.-1484   	; 0x17168 <amigo_check_unit>
   17734:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17738:	17 d9       	rcall	.-3538   	; 0x16968 <amigo_format>
   1773a:	04 c0       	rjmp	.+8      	; 0x17744 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1773c:	f0 e7       	ldi	r31, 0x70	; 112
   1773e:	ef 16       	cp	r14, r31
   17740:	f1 04       	cpc	r15, r1
   17742:	29 f4       	brne	.+10     	; 0x1774e <Amigo_Command+0x5be>
   17744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    }
    return ( amigo_todo_op(secondary, op, len) );
   17746:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17748:	88 27       	eor	r24, r24
   1774a:	90 7d       	andi	r25, 0xD0	; 208
   1774c:	03 c0       	rjmp	.+6      	; 0x17754 <Amigo_Command+0x5c4>
}
   1774e:	a8 01       	movw	r20, r16
   17750:	8e 2d       	mov	r24, r14
   17752:	ed db       	rcall	.-2086   	; 0x16f2e <amigo_todo_op>
   17754:	6c 96       	adiw	r28, 0x1c	; 28
   17756:	e6 e0       	ldi	r30, 0x06	; 6
   17758:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

0001775c <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   1775c:	a9 e0       	ldi	r26, 0x09	; 9
   1775e:	b0 e0       	ldi	r27, 0x00	; 0
   17760:	e4 eb       	ldi	r30, 0xB4	; 180
   17762:	fb eb       	ldi	r31, 0xBB	; 187
   17764:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   17768:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1776a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1776e:	85 ff       	sbrs	r24, 5
   17770:	16 c0       	rjmp	.+44     	; 0x1779e <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17772:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17776:	90 e0       	ldi	r25, 0x00	; 0
   17778:	ed b7       	in	r30, 0x3d	; 61
   1777a:	fe b7       	in	r31, 0x3e	; 62
   1777c:	91 87       	std	Z+9, r25	; 0x09
   1777e:	80 87       	std	Z+8, r24	; 0x08
   17780:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17784:	90 e0       	ldi	r25, 0x00	; 0
   17786:	97 83       	std	Z+7, r25	; 0x07
   17788:	86 83       	std	Z+6, r24	; 0x06
   1778a:	d5 83       	std	Z+5, r29	; 0x05
   1778c:	c4 83       	std	Z+4, r28	; 0x04
   1778e:	89 e5       	ldi	r24, 0x59	; 89
   17790:	97 e2       	ldi	r25, 0x27	; 39
   17792:	a0 e0       	ldi	r26, 0x00	; 0
   17794:	81 83       	std	Z+1, r24	; 0x01
   17796:	92 83       	std	Z+2, r25	; 0x02
   17798:	a3 83       	std	Z+3, r26	; 0x03
   1779a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   1779e:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   177a2:	8f 35       	cpi	r24, 0x5F	; 95
   177a4:	09 f4       	brne	.+2      	; 0x177a8 <Amigo_Execute+0x4c>
   177a6:	ad c0       	rjmp	.+346    	; 0x17902 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   177a8:	90 e0       	ldi	r25, 0x00	; 0
   177aa:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
   177ae:	89 2b       	or	r24, r25
   177b0:	39 f0       	breq	.+14     	; 0x177c0 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   177b2:	ce 01       	movw	r24, r28
   177b4:	87 7f       	andi	r24, 0xF7	; 247
   177b6:	80 36       	cpi	r24, 0x60	; 96
   177b8:	91 05       	cpc	r25, r1
   177ba:	09 f0       	breq	.+2      	; 0x177be <Amigo_Execute+0x62>
   177bc:	a2 c0       	rjmp	.+324    	; 0x17902 <Amigo_Execute+0x1a6>
   177be:	08 c0       	rjmp	.+16     	; 0x177d0 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   177c0:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   177c4:	90 e0       	ldi	r25, 0x00	; 0
   177c6:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   177ca:	89 2b       	or	r24, r25
   177cc:	91 f7       	brne	.-28     	; 0x177b2 <Amigo_Execute+0x56>
   177ce:	99 c0       	rjmp	.+306    	; 0x17902 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   177d0:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   177d4:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   177d8:	81 81       	ldd	r24, Z+1	; 0x01
   177da:	90 e0       	ldi	r25, 0x00	; 0
   177dc:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>

    if(secondary == 0x60)
   177e0:	c0 36       	cpi	r28, 0x60	; 96
   177e2:	d1 05       	cpc	r29, r1
   177e4:	09 f0       	breq	.+2      	; 0x177e8 <Amigo_Execute+0x8c>
   177e6:	4e c0       	rjmp	.+156    	; 0x17884 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   177e8:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   177ec:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   177f0:	e0 81       	ld	r30, Z
   177f2:	8e 2f       	mov	r24, r30
   177f4:	90 e0       	ldi	r25, 0x00	; 0
   177f6:	8b 30       	cpi	r24, 0x0B	; 11
   177f8:	91 05       	cpc	r25, r1
   177fa:	08 f0       	brcs	.+2      	; 0x177fe <Amigo_Execute+0xa2>
   177fc:	41 c0       	rjmp	.+130    	; 0x17880 <Amigo_Execute+0x124>
   177fe:	fc 01       	movw	r30, r24
   17800:	e0 52       	subi	r30, 0x20	; 32
   17802:	ff 4f       	sbci	r31, 0xFF	; 255
   17804:	0c 94 ba e3 	jmp	0x1c774	; 0x1c774 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17808:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1780c:	85 ff       	sbrs	r24, 5
   1780e:	18 c0       	rjmp	.+48     	; 0x17840 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17810:	89 e3       	ldi	r24, 0x39	; 57
   17812:	97 e2       	ldi	r25, 0x27	; 39
   17814:	0d c0       	rjmp	.+26     	; 0x17830 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17816:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1781a:	85 ff       	sbrs	r24, 5
   1781c:	11 c0       	rjmp	.+34     	; 0x17840 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   1781e:	88 e1       	ldi	r24, 0x18	; 24
   17820:	97 e2       	ldi	r25, 0x27	; 39
   17822:	06 c0       	rjmp	.+12     	; 0x17830 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17824:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17828:	85 ff       	sbrs	r24, 5
   1782a:	0a c0       	rjmp	.+20     	; 0x17840 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   1782c:	89 ef       	ldi	r24, 0xF9	; 249
   1782e:	96 e2       	ldi	r25, 0x26	; 38
   17830:	a0 e0       	ldi	r26, 0x00	; 0
   17832:	ed b7       	in	r30, 0x3d	; 61
   17834:	fe b7       	in	r31, 0x3e	; 62
   17836:	81 83       	std	Z+1, r24	; 0x01
   17838:	92 83       	std	Z+2, r25	; 0x02
   1783a:	a3 83       	std	Z+3, r26	; 0x03
   1783c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17840:	b2 d9       	rcall	.-3228   	; 0x16ba6 <amigo_buffered_read_execute>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17842:	61 c0       	rjmp	.+194    	; 0x17906 <Amigo_Execute+0x1aa>
   17844:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17848:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   1784a:	18 c0       	rjmp	.+48     	; 0x1787c <Amigo_Execute+0x120>
   1784c:	87 ed       	ldi	r24, 0xD7	; 215
   1784e:	96 e2       	ldi	r25, 0x26	; 38
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17850:	0d c0       	rjmp	.+26     	; 0x1786c <Amigo_Execute+0x110>
   17852:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17856:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   17858:	11 c0       	rjmp	.+34     	; 0x1787c <Amigo_Execute+0x120>
   1785a:	8b eb       	ldi	r24, 0xBB	; 187
   1785c:	96 e2       	ldi	r25, 0x26	; 38
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1785e:	06 c0       	rjmp	.+12     	; 0x1786c <Amigo_Execute+0x110>
   17860:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17864:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17866:	0a c0       	rjmp	.+20     	; 0x1787c <Amigo_Execute+0x120>
   17868:	8b e9       	ldi	r24, 0x9B	; 155
   1786a:	96 e2       	ldi	r25, 0x26	; 38
   1786c:	a0 e0       	ldi	r26, 0x00	; 0
   1786e:	ed b7       	in	r30, 0x3d	; 61
   17870:	fe b7       	in	r31, 0x3e	; 62
   17872:	81 83       	std	Z+1, r24	; 0x01
   17874:	92 83       	std	Z+2, r25	; 0x02
   17876:	a3 83       	std	Z+3, r26	; 0x03
#endif
                return ( amigo_buffered_write() );
   17878:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1787c:	f8 d9       	rcall	.-3088   	; 0x16c6e <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   1787e:	43 c0       	rjmp	.+134    	; 0x17906 <Amigo_Execute+0x1aa>
   17880:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17882:	3d c0       	rjmp	.+122    	; 0x178fe <Amigo_Execute+0x1a2>
   17884:	c8 36       	cpi	r28, 0x68	; 104
   17886:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17888:	e1 f5       	brne	.+120    	; 0x17902 <Amigo_Execute+0x1a6>
   1788a:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1788e:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   17892:	80 81       	ld	r24, Z
   17894:	82 30       	cpi	r24, 0x02	; 2
   17896:	81 f0       	breq	.+32     	; 0x178b8 <Amigo_Execute+0x15c>
   17898:	18 f4       	brcc	.+6      	; 0x178a0 <Amigo_Execute+0x144>
   1789a:	88 23       	and	r24, r24
   1789c:	91 f1       	breq	.+100    	; 0x17902 <Amigo_Execute+0x1a6>
   1789e:	2e c0       	rjmp	.+92     	; 0x178fc <Amigo_Execute+0x1a0>
   178a0:	83 30       	cpi	r24, 0x03	; 3
   178a2:	19 f0       	breq	.+6      	; 0x178aa <Amigo_Execute+0x14e>
   178a4:	84 30       	cpi	r24, 0x04	; 4
   178a6:	c9 f0       	breq	.+50     	; 0x178da <Amigo_Execute+0x17e>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178a8:	29 c0       	rjmp	.+82     	; 0x178fc <Amigo_Execute+0x1a0>
   178aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178ae:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   178b0:	11 c0       	rjmp	.+34     	; 0x178d4 <Amigo_Execute+0x178>
   178b2:	82 e7       	ldi	r24, 0x72	; 114
   178b4:	96 e2       	ldi	r25, 0x26	; 38
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178b6:	06 c0       	rjmp	.+12     	; 0x178c4 <Amigo_Execute+0x168>
   178b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178bc:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   178be:	0a c0       	rjmp	.+20     	; 0x178d4 <Amigo_Execute+0x178>
   178c0:	87 e4       	ldi	r24, 0x47	; 71
   178c2:	96 e2       	ldi	r25, 0x26	; 38
   178c4:	a0 e0       	ldi	r26, 0x00	; 0
   178c6:	ed b7       	in	r30, 0x3d	; 61
   178c8:	fe b7       	in	r31, 0x3e	; 62
   178ca:	81 83       	std	Z+1, r24	; 0x01
   178cc:	92 83       	std	Z+2, r25	; 0x02
   178ce:	a3 83       	std	Z+3, r26	; 0x03
   178d0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
                return ( amigo_send_status() );
   178d4:	0e 94 66 b3 	call	0x166cc	; 0x166cc <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178d8:	16 c0       	rjmp	.+44     	; 0x17906 <Amigo_Execute+0x1aa>
   178da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178de:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   178e0:	0a c0       	rjmp	.+20     	; 0x178f6 <Amigo_Execute+0x19a>
   178e2:	8e e1       	ldi	r24, 0x1E	; 30
   178e4:	96 e2       	ldi	r25, 0x26	; 38
   178e6:	a0 e0       	ldi	r26, 0x00	; 0
   178e8:	ed b7       	in	r30, 0x3d	; 61
   178ea:	fe b7       	in	r31, 0x3e	; 62
   178ec:	81 83       	std	Z+1, r24	; 0x01
   178ee:	92 83       	std	Z+2, r25	; 0x02
   178f0:	a3 83       	std	Z+3, r26	; 0x03
   178f2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   178f6:	0e 94 08 b3 	call	0x16610	; 0x16610 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   178fa:	05 c0       	rjmp	.+10     	; 0x17906 <Amigo_Execute+0x1aa>
   178fc:	88 e6       	ldi	r24, 0x68	; 104
   178fe:	b0 db       	rcall	.-2208   	; 0x17060 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17900:	02 c0       	rjmp	.+4      	; 0x17906 <Amigo_Execute+0x1aa>
   17902:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17904:	90 e0       	ldi	r25, 0x00	; 0
   17906:	cd b7       	in	r28, 0x3d	; 61
   17908:	de b7       	in	r29, 0x3e	; 62
   1790a:	29 96       	adiw	r28, 0x09	; 9
   1790c:	e2 e0       	ldi	r30, 0x02	; 2
   1790e:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00017912 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17912:	cf 93       	push	r28
   17914:	df 93       	push	r29
   17916:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17918:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1791c:	90 e0       	ldi	r25, 0x00	; 0
   1791e:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
   17922:	89 2b       	or	r24, r25
   17924:	51 f0       	breq	.+20     	; 0x1793a <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17926:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1792a:	8f 35       	cpi	r24, 0x5F	; 95
   1792c:	71 f4       	brne	.+28     	; 0x1794a <AMIGO_COMMANDS+0x38>
   1792e:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17932:	90 e0       	ldi	r25, 0x00	; 0
   17934:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   17938:	08 c0       	rjmp	.+16     	; 0x1794a <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   1793a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1793e:	90 e0       	ldi	r25, 0x00	; 0
   17940:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   17944:	89 2b       	or	r24, r25
   17946:	79 f7       	brne	.-34     	; 0x17926 <AMIGO_COMMANDS+0x14>
   17948:	76 c0       	rjmp	.+236    	; 0x17a36 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   1794a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1794e:	81 11       	cpse	r24, r1
   17950:	05 c0       	rjmp	.+10     	; 0x1795c <AMIGO_COMMANDS+0x4a>
   17952:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17956:	90 e0       	ldi	r25, 0x00	; 0
   17958:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   1795c:	c0 36       	cpi	r28, 0x60	; 96
   1795e:	99 f4       	brne	.+38     	; 0x17986 <AMIGO_COMMANDS+0x74>
   17960:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17964:	90 e0       	ldi	r25, 0x00	; 0
   17966:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
   1796a:	89 2b       	or	r24, r25
   1796c:	19 f0       	breq	.+6      	; 0x17974 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   1796e:	80 e6       	ldi	r24, 0x60	; 96
   17970:	90 e0       	ldi	r25, 0x00	; 0
   17972:	14 c0       	rjmp	.+40     	; 0x1799c <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17974:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17978:	90 e0       	ldi	r25, 0x00	; 0
   1797a:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   1797e:	89 2b       	or	r24, r25
   17980:	09 f4       	brne	.+2      	; 0x17984 <AMIGO_COMMANDS+0x72>
   17982:	59 c0       	rjmp	.+178    	; 0x17a36 <AMIGO_COMMANDS+0x124>
   17984:	f4 cf       	rjmp	.-24     	; 0x1796e <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17986:	c8 36       	cpi	r28, 0x68	; 104
   17988:	c1 f4       	brne	.+48     	; 0x179ba <AMIGO_COMMANDS+0xa8>
   1798a:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1798e:	90 e0       	ldi	r25, 0x00	; 0
   17990:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
   17994:	89 2b       	or	r24, r25
   17996:	21 f0       	breq	.+8      	; 0x179a0 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17998:	88 e6       	ldi	r24, 0x68	; 104
   1799a:	90 e0       	ldi	r25, 0x00	; 0
   1799c:	df de       	rcall	.-578    	; 0x1775c <Amigo_Execute>
   1799e:	0b c0       	rjmp	.+22     	; 0x179b6 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   179a0:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   179a4:	90 e0       	ldi	r25, 0x00	; 0
   179a6:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   179aa:	89 2b       	or	r24, r25
   179ac:	09 f4       	brne	.+2      	; 0x179b0 <AMIGO_COMMANDS+0x9e>
   179ae:	43 c0       	rjmp	.+134    	; 0x17a36 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   179b0:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   179b2:	90 e0       	ldi	r25, 0x00	; 0
   179b4:	ed db       	rcall	.-2086   	; 0x17190 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   179b6:	ec 01       	movw	r28, r24
   179b8:	40 c0       	rjmp	.+128    	; 0x17a3a <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   179ba:	c9 36       	cpi	r28, 0x69	; 105
   179bc:	51 f4       	brne	.+20     	; 0x179d2 <AMIGO_COMMANDS+0xc0>
   179be:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   179c2:	90 e0       	ldi	r25, 0x00	; 0
   179c4:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   179c8:	89 2b       	or	r24, r25
   179ca:	a9 f1       	breq	.+106    	; 0x17a36 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   179cc:	89 e6       	ldi	r24, 0x69	; 105
   179ce:	90 e0       	ldi	r25, 0x00	; 0
   179d0:	f1 cf       	rjmp	.-30     	; 0x179b4 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   179d2:	ca 36       	cpi	r28, 0x6A	; 106
   179d4:	51 f4       	brne	.+20     	; 0x179ea <AMIGO_COMMANDS+0xd8>
   179d6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   179da:	90 e0       	ldi	r25, 0x00	; 0
   179dc:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   179e0:	89 2b       	or	r24, r25
   179e2:	49 f1       	breq	.+82     	; 0x17a36 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   179e4:	8a e6       	ldi	r24, 0x6A	; 106
   179e6:	90 e0       	ldi	r25, 0x00	; 0
   179e8:	e5 cf       	rjmp	.-54     	; 0x179b4 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   179ea:	cc 36       	cpi	r28, 0x6C	; 108
   179ec:	51 f4       	brne	.+20     	; 0x17a02 <AMIGO_COMMANDS+0xf0>
   179ee:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   179f2:	90 e0       	ldi	r25, 0x00	; 0
   179f4:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   179f8:	89 2b       	or	r24, r25
   179fa:	e9 f0       	breq	.+58     	; 0x17a36 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   179fc:	8c e6       	ldi	r24, 0x6C	; 108
   179fe:	90 e0       	ldi	r25, 0x00	; 0
   17a00:	d9 cf       	rjmp	.-78     	; 0x179b4 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17a02:	c0 37       	cpi	r28, 0x70	; 112
   17a04:	c1 f4       	brne	.+48     	; 0x17a36 <AMIGO_COMMANDS+0x124>
   17a06:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17a0a:	90 e0       	ldi	r25, 0x00	; 0
   17a0c:	0e 94 4f 8e 	call	0x11c9e	; 0x11c9e <AMIGO_is_MTA>
   17a10:	ec 01       	movw	r28, r24
   17a12:	89 2b       	or	r24, r25
   17a14:	51 f0       	breq	.+20     	; 0x17a2a <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17a16:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   17a1a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   17a1e:	81 81       	ldd	r24, Z+1	; 0x01
   17a20:	90 e0       	ldi	r25, 0x00	; 0
   17a22:	0e 94 ef 87 	call	0x10fde	; 0x10fde <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17a26:	fa d9       	rcall	.-3084   	; 0x16e1c <amigo_cmd_dsj>
   17a28:	c6 cf       	rjmp	.-116    	; 0x179b6 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17a2a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17a2e:	90 e0       	ldi	r25, 0x00	; 0
   17a30:	0e 94 3e 8e 	call	0x11c7c	; 0x11c7c <AMIGO_is_MLA>
   17a34:	02 c0       	rjmp	.+4      	; 0x17a3a <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17a36:	c0 e0       	ldi	r28, 0x00	; 0
   17a38:	d0 e0       	ldi	r29, 0x00	; 0
}
   17a3a:	ce 01       	movw	r24, r28
   17a3c:	df 91       	pop	r29
   17a3e:	cf 91       	pop	r28
   17a40:	08 95       	ret

00017a42 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17a42:	ea ea       	ldi	r30, 0xAA	; 170
   17a44:	f9 e1       	ldi	r31, 0x19	; 25
   17a46:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17a48:	10 82       	st	Z, r1
   17a4a:	11 82       	std	Z+1, r1	; 0x01
   17a4c:	12 82       	std	Z+2, r1	; 0x02
   17a4e:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17a50:	15 82       	std	Z+5, r1	; 0x05
   17a52:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17a54:	12 86       	std	Z+10, r1	; 0x0a
   17a56:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17a58:	14 86       	std	Z+12, r1	; 0x0c
   17a5a:	13 86       	std	Z+11, r1	; 0x0b
   17a5c:	08 95       	ret

00017a5e <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17a5e:	cf 93       	push	r28
   17a60:	df 93       	push	r29
   17a62:	ad b7       	in	r26, 0x3d	; 61
   17a64:	be b7       	in	r27, 0x3e	; 62
   17a66:	17 97       	sbiw	r26, 0x07	; 7
   17a68:	0f b6       	in	r0, 0x3f	; 63
   17a6a:	f8 94       	cli
   17a6c:	be bf       	out	0x3e, r27	; 62
   17a6e:	0f be       	out	0x3f, r0	; 63
   17a70:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17a72:	20 91 b3 19 	lds	r18, 0x19B3	; 0x8019b3 <plot+0x9>
   17a76:	30 91 b4 19 	lds	r19, 0x19B4	; 0x8019b4 <plot+0xa>
   17a7a:	21 15       	cp	r18, r1
   17a7c:	31 05       	cpc	r19, r1
   17a7e:	09 f4       	brne	.+2      	; 0x17a82 <receive_plot_flush+0x24>
   17a80:	45 c0       	rjmp	.+138    	; 0x17b0c <receive_plot_flush+0xae>
   17a82:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x4>
   17a86:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0x5>
   17a8a:	00 97       	sbiw	r24, 0x00	; 0
   17a8c:	09 f4       	brne	.+2      	; 0x17a90 <receive_plot_flush+0x32>
   17a8e:	40 c0       	rjmp	.+128    	; 0x17b10 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17a90:	ac 01       	movw	r20, r24
   17a92:	61 e0       	ldi	r22, 0x01	; 1
   17a94:	70 e0       	ldi	r23, 0x00	; 0
   17a96:	80 91 b5 19 	lds	r24, 0x19B5	; 0x8019b5 <plot+0xb>
   17a9a:	90 91 b6 19 	lds	r25, 0x19B6	; 0x8019b6 <plot+0xc>
   17a9e:	0e 94 05 7e 	call	0xfc0a	; 0xfc0a <fwrite>
   17aa2:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17aa4:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x4>
   17aa8:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0x5>
   17aac:	c8 17       	cp	r28, r24
   17aae:	d9 07       	cpc	r29, r25
   17ab0:	09 f1       	breq	.+66     	; 0x17af4 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17ab2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ab6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17aba:	81 72       	andi	r24, 0x21	; 33
   17abc:	99 27       	eor	r25, r25
   17abe:	89 2b       	or	r24, r25
   17ac0:	b1 f0       	breq	.+44     	; 0x17aee <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17ac2:	87 ed       	ldi	r24, 0xD7	; 215
   17ac4:	95 e1       	ldi	r25, 0x15	; 21
   17ac6:	0e 94 0e 7a 	call	0xf41c	; 0xf41c <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17aca:	ed b7       	in	r30, 0x3d	; 61
   17acc:	fe b7       	in	r31, 0x3e	; 62
   17ace:	d7 83       	std	Z+7, r29	; 0x07
   17ad0:	c6 83       	std	Z+6, r28	; 0x06
   17ad2:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x4>
   17ad6:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0x5>
   17ada:	95 83       	std	Z+5, r25	; 0x05
   17adc:	84 83       	std	Z+4, r24	; 0x04
   17ade:	8e e8       	ldi	r24, 0x8E	; 142
   17ae0:	9e e2       	ldi	r25, 0x2E	; 46
   17ae2:	a0 e0       	ldi	r26, 0x00	; 0
   17ae4:	81 83       	std	Z+1, r24	; 0x01
   17ae6:	92 83       	std	Z+2, r25	; 0x02
   17ae8:	a3 83       	std	Z+3, r26	; 0x03
   17aea:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        }
        return(-1);
   17aee:	8f ef       	ldi	r24, 0xFF	; 255
   17af0:	9f ef       	ldi	r25, 0xFF	; 255
   17af2:	0e c0       	rjmp	.+28     	; 0x17b10 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17af4:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <plot+0x9>
   17af8:	90 91 b4 19 	lds	r25, 0x19B4	; 0x8019b4 <plot+0xa>
   17afc:	0e 94 58 78 	call	0xf0b0	; 0xf0b0 <fileno>
    if(fno < 0)
   17b00:	97 fd       	sbrc	r25, 7
   17b02:	f5 cf       	rjmp	.-22     	; 0x17aee <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17b04:	0e 94 4f 7d 	call	0xfa9e	; 0xfa9e <syncfs>
    return (ret);
   17b08:	ce 01       	movw	r24, r28
   17b0a:	02 c0       	rjmp	.+4      	; 0x17b10 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17b0c:	80 e0       	ldi	r24, 0x00	; 0
   17b0e:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17b10:	cd b7       	in	r28, 0x3d	; 61
   17b12:	de b7       	in	r29, 0x3e	; 62
   17b14:	27 96       	adiw	r28, 0x07	; 7
   17b16:	e2 e0       	ldi	r30, 0x02	; 2
   17b18:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00017b1c <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17b1c:	ad b7       	in	r26, 0x3d	; 61
   17b1e:	be b7       	in	r27, 0x3e	; 62
   17b20:	17 97       	sbiw	r26, 0x07	; 7
   17b22:	0f b6       	in	r0, 0x3f	; 63
   17b24:	f8 94       	cli
   17b26:	be bf       	out	0x3e, r27	; 62
   17b28:	0f be       	out	0x3f, r0	; 63
    if( receive_plot_flush() < 0 )
   17b2a:	ad bf       	out	0x3d, r26	; 61
   17b2c:	98 df       	rcall	.-208    	; 0x17a5e <receive_plot_flush>
   17b2e:	97 ff       	sbrs	r25, 7
        plot.error = 1;
   17b30:	03 c0       	rjmp	.+6      	; 0x17b38 <printer_close+0x1c>
   17b32:	81 e0       	ldi	r24, 0x01	; 1
   17b34:	80 93 b2 19 	sts	0x19B2, r24	; 0x8019b2 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17b38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b3c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17b40:	81 72       	andi	r24, 0x21	; 33
   17b42:	99 27       	eor	r25, r25
   17b44:	89 2b       	or	r24, r25
    {
        if(plot.error)
   17b46:	71 f0       	breq	.+28     	; 0x17b64 <printer_close+0x48>
   17b48:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <plot+0x8>
   17b4c:	88 23       	and	r24, r24
            printf("ERROR durring write\n");
   17b4e:	51 f0       	breq	.+20     	; 0x17b64 <printer_close+0x48>
   17b50:	8d eb       	ldi	r24, 0xBD	; 189
   17b52:	9e e2       	ldi	r25, 0x2E	; 46
   17b54:	a0 e0       	ldi	r26, 0x00	; 0
   17b56:	ed b7       	in	r30, 0x3d	; 61
   17b58:	fe b7       	in	r31, 0x3e	; 62
   17b5a:	81 83       	std	Z+1, r24	; 0x01
   17b5c:	92 83       	std	Z+2, r25	; 0x02
   17b5e:	a3 83       	std	Z+3, r26	; 0x03
   17b60:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }

    if(plot.fp)
   17b64:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <plot+0x9>
   17b68:	90 91 b4 19 	lds	r25, 0x19B4	; 0x8019b4 <plot+0xa>
   17b6c:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(plot.fp);
   17b6e:	e1 f0       	breq	.+56     	; 0x17ba8 <printer_close+0x8c>
   17b70:	0e 94 87 7e 	call	0xfd0e	; 0xfd0e <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b78:	85 ff       	sbrs	r24, 5
            printf("\nDONE: %08ld\n",plot.count);
   17b7a:	16 c0       	rjmp	.+44     	; 0x17ba8 <printer_close+0x8c>
   17b7c:	80 91 aa 19 	lds	r24, 0x19AA	; 0x8019aa <plot>
   17b80:	90 91 ab 19 	lds	r25, 0x19AB	; 0x8019ab <plot+0x1>
   17b84:	a0 91 ac 19 	lds	r26, 0x19AC	; 0x8019ac <plot+0x2>
   17b88:	b0 91 ad 19 	lds	r27, 0x19AD	; 0x8019ad <plot+0x3>
   17b8c:	ed b7       	in	r30, 0x3d	; 61
   17b8e:	fe b7       	in	r31, 0x3e	; 62
   17b90:	84 83       	std	Z+4, r24	; 0x04
   17b92:	95 83       	std	Z+5, r25	; 0x05
   17b94:	a6 83       	std	Z+6, r26	; 0x06
   17b96:	b7 83       	std	Z+7, r27	; 0x07
   17b98:	8f ea       	ldi	r24, 0xAF	; 175
   17b9a:	9e e2       	ldi	r25, 0x2E	; 46
   17b9c:	a0 e0       	ldi	r26, 0x00	; 0
   17b9e:	81 83       	std	Z+1, r24	; 0x01
   17ba0:	92 83       	std	Z+2, r25	; 0x02
   17ba2:	a3 83       	std	Z+3, r26	; 0x03
   17ba4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }

    if(plot.buf)
   17ba8:	80 91 b5 19 	lds	r24, 0x19B5	; 0x8019b5 <plot+0xb>
   17bac:	90 91 b6 19 	lds	r25, 0x19B6	; 0x8019b6 <plot+0xc>
   17bb0:	00 97       	sbiw	r24, 0x00	; 0
        safefree(plot.buf);
   17bb2:	11 f0       	breq	.+4      	; 0x17bb8 <printer_close+0x9c>
    printer_init();
   17bb4:	0e 94 4f 29 	call	0x529e	; 0x529e <safefree>
}
   17bb8:	44 df       	rcall	.-376    	; 0x17a42 <printer_init>
   17bba:	ad b7       	in	r26, 0x3d	; 61
   17bbc:	be b7       	in	r27, 0x3e	; 62
   17bbe:	17 96       	adiw	r26, 0x07	; 7
   17bc0:	0f b6       	in	r0, 0x3f	; 63
   17bc2:	f8 94       	cli
   17bc4:	be bf       	out	0x3e, r27	; 62
   17bc6:	0f be       	out	0x3f, r0	; 63
   17bc8:	ad bf       	out	0x3d, r26	; 61
   17bca:	08 95       	ret

00017bcc <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17bcc:	ad e5       	ldi	r26, 0x5D	; 93
   17bce:	b0 e0       	ldi	r27, 0x00	; 0
   17bd0:	ec ee       	ldi	r30, 0xEC	; 236
   17bd2:	fd eb       	ldi	r31, 0xBD	; 189
   17bd4:	0c 94 f5 e3 	jmp	0x1c7ea	; 0x1c7ea <__prologue_saves__+0x18>
   17bd8:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17bda:	89 2b       	or	r24, r25
   17bdc:	09 f0       	breq	.+2      	; 0x17be0 <printer_open+0x14>
   17bde:	4f c0       	rjmp	.+158    	; 0x17c7e <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17be0:	be 01       	movw	r22, r28
   17be2:	6e 5a       	subi	r22, 0xAE	; 174
   17be4:	7f 4f       	sbci	r23, 0xFF	; 255
   17be6:	80 e0       	ldi	r24, 0x00	; 0
   17be8:	90 e0       	ldi	r25, 0x00	; 0
   17bea:	0e 94 14 35 	call	0x6a28	; 0x6a28 <clock_gettime>
        seconds = ts.tv_sec;
   17bee:	66 96       	adiw	r28, 0x16	; 22
   17bf0:	8c ad       	ldd	r24, Y+60	; 0x3c
   17bf2:	9d ad       	ldd	r25, Y+61	; 0x3d
   17bf4:	ae ad       	ldd	r26, Y+62	; 0x3e
   17bf6:	bf ad       	ldd	r27, Y+63	; 0x3f
   17bf8:	66 97       	sbiw	r28, 0x16	; 22
   17bfa:	6e 96       	adiw	r28, 0x1e	; 30
   17bfc:	8c af       	std	Y+60, r24	; 0x3c
   17bfe:	9d af       	std	Y+61, r25	; 0x3d
   17c00:	ae af       	std	Y+62, r26	; 0x3e
   17c02:	bf af       	std	Y+63, r27	; 0x3f
   17c04:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17c06:	ce 01       	movw	r24, r28
   17c08:	86 5a       	subi	r24, 0xA6	; 166
   17c0a:	9f 4f       	sbci	r25, 0xFF	; 255
   17c0c:	0e 94 fe 38 	call	0x71fc	; 0x71fc <gmtime>
   17c10:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17c12:	fc 01       	movw	r30, r24
   17c14:	e6 80       	ldd	r14, Z+6	; 0x06
   17c16:	f7 80       	ldd	r15, Z+7	; 0x07
   17c18:	80 85       	ldd	r24, Z+8	; 0x08
   17c1a:	91 85       	ldd	r25, Z+9	; 0x09
   17c1c:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <tm_mon_to_ascii>
   17c20:	f8 01       	movw	r30, r16
   17c22:	20 81       	ld	r18, Z
   17c24:	31 81       	ldd	r19, Z+1	; 0x01
   17c26:	ed b7       	in	r30, 0x3d	; 61
   17c28:	fe b7       	in	r31, 0x3e	; 62
   17c2a:	31 8b       	std	Z+17, r19	; 0x11
   17c2c:	20 8b       	std	Z+16, r18	; 0x10
   17c2e:	f8 01       	movw	r30, r16
   17c30:	22 81       	ldd	r18, Z+2	; 0x02
   17c32:	33 81       	ldd	r19, Z+3	; 0x03
   17c34:	ed b7       	in	r30, 0x3d	; 61
   17c36:	fe b7       	in	r31, 0x3e	; 62
   17c38:	37 87       	std	Z+15, r19	; 0x0f
   17c3a:	26 87       	std	Z+14, r18	; 0x0e
   17c3c:	f8 01       	movw	r30, r16
   17c3e:	24 81       	ldd	r18, Z+4	; 0x04
   17c40:	35 81       	ldd	r19, Z+5	; 0x05
   17c42:	ed b7       	in	r30, 0x3d	; 61
   17c44:	fe b7       	in	r31, 0x3e	; 62
   17c46:	35 87       	std	Z+13, r19	; 0x0d
   17c48:	24 87       	std	Z+12, r18	; 0x0c
   17c4a:	f8 01       	movw	r30, r16
   17c4c:	22 85       	ldd	r18, Z+10	; 0x0a
   17c4e:	33 85       	ldd	r19, Z+11	; 0x0b
   17c50:	24 59       	subi	r18, 0x94	; 148
   17c52:	38 4f       	sbci	r19, 0xF8	; 248
   17c54:	ed b7       	in	r30, 0x3d	; 61
   17c56:	fe b7       	in	r31, 0x3e	; 62
   17c58:	33 87       	std	Z+11, r19	; 0x0b
   17c5a:	22 87       	std	Z+10, r18	; 0x0a
   17c5c:	91 87       	std	Z+9, r25	; 0x09
   17c5e:	80 87       	std	Z+8, r24	; 0x08
   17c60:	f7 82       	std	Z+7, r15	; 0x07
   17c62:	e6 82       	std	Z+6, r14	; 0x06
   17c64:	84 ef       	ldi	r24, 0xF4	; 244
   17c66:	9e e2       	ldi	r25, 0x2E	; 46
   17c68:	a0 e0       	ldi	r26, 0x00	; 0
   17c6a:	83 83       	std	Z+3, r24	; 0x03
   17c6c:	94 83       	std	Z+4, r25	; 0x04
   17c6e:	a5 83       	std	Z+5, r26	; 0x05
   17c70:	8e 01       	movw	r16, r28
   17c72:	0e 5e       	subi	r16, 0xEE	; 238
   17c74:	1f 4f       	sbci	r17, 0xFF	; 255
   17c76:	12 83       	std	Z+2, r17	; 0x02
   17c78:	01 83       	std	Z+1, r16	; 0x01
   17c7a:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17c7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c82:	85 ff       	sbrs	r24, 5
   17c84:	0c c0       	rjmp	.+24     	; 0x17c9e <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17c86:	ed b7       	in	r30, 0x3d	; 61
   17c88:	fe b7       	in	r31, 0x3e	; 62
   17c8a:	15 83       	std	Z+5, r17	; 0x05
   17c8c:	04 83       	std	Z+4, r16	; 0x04
   17c8e:	8e ed       	ldi	r24, 0xDE	; 222
   17c90:	9e e2       	ldi	r25, 0x2E	; 46
   17c92:	a0 e0       	ldi	r26, 0x00	; 0
   17c94:	81 83       	std	Z+1, r24	; 0x01
   17c96:	92 83       	std	Z+2, r25	; 0x02
   17c98:	a3 83       	std	Z+3, r26	; 0x03
   17c9a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17c9e:	67 e0       	ldi	r22, 0x07	; 7
   17ca0:	79 e0       	ldi	r23, 0x09	; 9
   17ca2:	c8 01       	movw	r24, r16
   17ca4:	0e 94 dd 7f 	call	0xffba	; 0xffba <fopen>
   17ca8:	90 93 b4 19 	sts	0x19B4, r25	; 0x8019b4 <plot+0xa>
   17cac:	80 93 b3 19 	sts	0x19B3, r24	; 0x8019b3 <plot+0x9>
    if(plot.fp == NULL)
   17cb0:	89 2b       	or	r24, r25
   17cb2:	b9 f4       	brne	.+46     	; 0x17ce2 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17cb4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17cb8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17cbc:	81 72       	andi	r24, 0x21	; 33
   17cbe:	99 27       	eor	r25, r25
   17cc0:	89 2b       	or	r24, r25
   17cc2:	11 f1       	breq	.+68     	; 0x17d08 <printer_open+0x13c>
        {
            perror("open failed");
   17cc4:	8f e9       	ldi	r24, 0x9F	; 159
   17cc6:	9d e0       	ldi	r25, 0x0D	; 13
   17cc8:	0e 94 0e 7a 	call	0xf41c	; 0xf41c <perror>
            printf("exiting...\n");
   17ccc:	82 ed       	ldi	r24, 0xD2	; 210
   17cce:	9e e2       	ldi	r25, 0x2E	; 46
   17cd0:	a0 e0       	ldi	r26, 0x00	; 0
   17cd2:	ed b7       	in	r30, 0x3d	; 61
   17cd4:	fe b7       	in	r31, 0x3e	; 62
   17cd6:	81 83       	std	Z+1, r24	; 0x01
   17cd8:	92 83       	std	Z+2, r25	; 0x02
   17cda:	a3 83       	std	Z+3, r26	; 0x03
   17cdc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   17ce0:	13 c0       	rjmp	.+38     	; 0x17d08 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17ce2:	61 e0       	ldi	r22, 0x01	; 1
   17ce4:	70 e0       	ldi	r23, 0x00	; 0
   17ce6:	81 e0       	ldi	r24, 0x01	; 1
   17ce8:	92 e0       	ldi	r25, 0x02	; 2
   17cea:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
   17cee:	90 93 b6 19 	sts	0x19B6, r25	; 0x8019b6 <plot+0xc>
   17cf2:	80 93 b5 19 	sts	0x19B5, r24	; 0x8019b5 <plot+0xb>
    if(plot.buf == NULL)
   17cf6:	89 2b       	or	r24, r25
        printer_close();
   17cf8:	09 f4       	brne	.+2      	; 0x17cfc <printer_open+0x130>
    plot.size = 512;
   17cfa:	10 df       	rcall	.-480    	; 0x17b1c <printer_close>
   17cfc:	80 e0       	ldi	r24, 0x00	; 0
   17cfe:	92 e0       	ldi	r25, 0x02	; 2
   17d00:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <plot+0x7>
   17d04:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <plot+0x6>
}
   17d08:	c3 5a       	subi	r28, 0xA3	; 163
   17d0a:	df 4f       	sbci	r29, 0xFF	; 255
   17d0c:	e6 e0       	ldi	r30, 0x06	; 6
   17d0e:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00017d12 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17d12:	cf 93       	push	r28
   17d14:	df 93       	push	r29
   17d16:	ad b7       	in	r26, 0x3d	; 61
   17d18:	be b7       	in	r27, 0x3e	; 62
   17d1a:	17 97       	sbiw	r26, 0x07	; 7
   17d1c:	0f b6       	in	r0, 0x3f	; 63
   17d1e:	f8 94       	cli
   17d20:	be bf       	out	0x3e, r27	; 62
   17d22:	0f be       	out	0x3f, r0	; 63
   17d24:	ad bf       	out	0x3d, r26	; 61
   17d26:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17d28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d2c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d30:	81 72       	andi	r24, 0x21	; 33
   17d32:	99 27       	eor	r25, r25
   17d34:	89 2b       	or	r24, r25
   17d36:	c1 f0       	breq	.+48     	; 0x17d68 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17d38:	80 91 aa 19 	lds	r24, 0x19AA	; 0x8019aa <plot>
   17d3c:	30 91 ab 19 	lds	r19, 0x19AB	; 0x8019ab <plot+0x1>
   17d40:	20 91 ac 19 	lds	r18, 0x19AC	; 0x8019ac <plot+0x2>
   17d44:	90 91 ad 19 	lds	r25, 0x19AD	; 0x8019ad <plot+0x3>
   17d48:	81 11       	cpse	r24, r1
   17d4a:	0e c0       	rjmp	.+28     	; 0x17d68 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17d4c:	ed b7       	in	r30, 0x3d	; 61
   17d4e:	fe b7       	in	r31, 0x3e	; 62
   17d50:	84 83       	std	Z+4, r24	; 0x04
   17d52:	35 83       	std	Z+5, r19	; 0x05
   17d54:	26 83       	std	Z+6, r18	; 0x06
   17d56:	97 83       	std	Z+7, r25	; 0x07
   17d58:	87 e8       	ldi	r24, 0x87	; 135
   17d5a:	9e e2       	ldi	r25, 0x2E	; 46
   17d5c:	a0 e0       	ldi	r26, 0x00	; 0
   17d5e:	81 83       	std	Z+1, r24	; 0x01
   17d60:	92 83       	std	Z+2, r25	; 0x02
   17d62:	a3 83       	std	Z+3, r26	; 0x03
   17d64:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17d68:	ce 01       	movw	r24, r28
   17d6a:	88 27       	eor	r24, r24
   17d6c:	97 7f       	andi	r25, 0xF7	; 247
   17d6e:	89 2b       	or	r24, r25
    {
        if( receive_plot_flush() )
   17d70:	41 f0       	breq	.+16     	; 0x17d82 <printer_buffer+0x70>
   17d72:	75 de       	rcall	.-790    	; 0x17a5e <receive_plot_flush>
   17d74:	89 2b       	or	r24, r25
   17d76:	09 f4       	brne	.+2      	; 0x17d7a <printer_buffer+0x68>
            plot.error = 1;
   17d78:	3f c0       	rjmp	.+126    	; 0x17df8 <printer_buffer+0xe6>
   17d7a:	81 e0       	ldi	r24, 0x01	; 1
   17d7c:	80 93 b2 19 	sts	0x19B2, r24	; 0x8019b2 <plot+0x8>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17d80:	3b c0       	rjmp	.+118    	; 0x17df8 <printer_buffer+0xe6>
   17d82:	20 91 b5 19 	lds	r18, 0x19B5	; 0x8019b5 <plot+0xb>
   17d86:	30 91 b6 19 	lds	r19, 0x19B6	; 0x8019b6 <plot+0xc>
   17d8a:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x4>
   17d8e:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0x5>
   17d92:	ac 01       	movw	r20, r24
   17d94:	4f 5f       	subi	r20, 0xFF	; 255
   17d96:	5f 4f       	sbci	r21, 0xFF	; 255
   17d98:	50 93 af 19 	sts	0x19AF, r21	; 0x8019af <plot+0x5>
   17d9c:	40 93 ae 19 	sts	0x19AE, r20	; 0x8019ae <plot+0x4>
   17da0:	f9 01       	movw	r30, r18
   17da2:	e8 0f       	add	r30, r24
   17da4:	f9 1f       	adc	r31, r25
        plot.count++;
   17da6:	c0 83       	st	Z, r28
   17da8:	80 91 aa 19 	lds	r24, 0x19AA	; 0x8019aa <plot>
   17dac:	90 91 ab 19 	lds	r25, 0x19AB	; 0x8019ab <plot+0x1>
   17db0:	a0 91 ac 19 	lds	r26, 0x19AC	; 0x8019ac <plot+0x2>
   17db4:	b0 91 ad 19 	lds	r27, 0x19AD	; 0x8019ad <plot+0x3>
   17db8:	01 96       	adiw	r24, 0x01	; 1
   17dba:	a1 1d       	adc	r26, r1
   17dbc:	b1 1d       	adc	r27, r1
   17dbe:	80 93 aa 19 	sts	0x19AA, r24	; 0x8019aa <plot>
   17dc2:	90 93 ab 19 	sts	0x19AB, r25	; 0x8019ab <plot+0x1>
   17dc6:	a0 93 ac 19 	sts	0x19AC, r26	; 0x8019ac <plot+0x2>
   17dca:	b0 93 ad 19 	sts	0x19AD, r27	; 0x8019ad <plot+0x3>

        if(plot.ind >= plot.size)
   17dce:	20 91 ae 19 	lds	r18, 0x19AE	; 0x8019ae <plot+0x4>
   17dd2:	30 91 af 19 	lds	r19, 0x19AF	; 0x8019af <plot+0x5>
   17dd6:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <plot+0x6>
   17dda:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <plot+0x7>
   17dde:	28 17       	cp	r18, r24
        {
            if( receive_plot_flush() < 0 )
   17de0:	39 07       	cpc	r19, r25
   17de2:	54 f0       	brlt	.+20     	; 0x17df8 <printer_buffer+0xe6>
   17de4:	3c de       	rcall	.-904    	; 0x17a5e <receive_plot_flush>
   17de6:	97 ff       	sbrs	r25, 7
                plot.error = 1;
   17de8:	03 c0       	rjmp	.+6      	; 0x17df0 <printer_buffer+0xde>
   17dea:	81 e0       	ldi	r24, 0x01	; 1
   17dec:	80 93 b2 19 	sts	0x19B2, r24	; 0x8019b2 <plot+0x8>
            plot.ind  = 0;
   17df0:	10 92 af 19 	sts	0x19AF, r1	; 0x8019af <plot+0x5>
   17df4:	10 92 ae 19 	sts	0x19AE, r1	; 0x8019ae <plot+0x4>
        }
    }
}
   17df8:	cd b7       	in	r28, 0x3d	; 61
   17dfa:	de b7       	in	r29, 0x3e	; 62
   17dfc:	27 96       	adiw	r28, 0x07	; 7
   17dfe:	e2 e0       	ldi	r30, 0x02	; 2
   17e00:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00017e04 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17e04:	cf 93       	push	r28
   17e06:	00 d0       	rcall	.+0      	; 0x17e08 <PRINTER_COMMANDS+0x4>
   17e08:	00 d0       	rcall	.+0      	; 0x17e0a <PRINTER_COMMANDS+0x6>
   17e0a:	1f 92       	push	r1
   17e0c:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17e0e:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17e12:	90 e0       	ldi	r25, 0x00	; 0
   17e14:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <PRINTER_is_MLA>
   17e18:	89 2b       	or	r24, r25
   17e1a:	69 f0       	breq	.+26     	; 0x17e36 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17e1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e20:	85 ff       	sbrs	r24, 5
   17e22:	22 c0       	rjmp	.+68     	; 0x17e68 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17e24:	8c 2f       	mov	r24, r28
   17e26:	90 e0       	ldi	r25, 0x00	; 0
   17e28:	ed b7       	in	r30, 0x3d	; 61
   17e2a:	fe b7       	in	r31, 0x3e	; 62
   17e2c:	95 83       	std	Z+5, r25	; 0x05
   17e2e:	84 83       	std	Z+4, r24	; 0x04
   17e30:	8b e6       	ldi	r24, 0x6B	; 107
   17e32:	9e e2       	ldi	r25, 0x2E	; 46
   17e34:	13 c0       	rjmp	.+38     	; 0x17e5c <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17e36:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17e3a:	90 e0       	ldi	r25, 0x00	; 0
   17e3c:	0e 94 82 8e 	call	0x11d04	; 0x11d04 <PRINTER_is_MTA>
   17e40:	89 2b       	or	r24, r25
   17e42:	91 f0       	breq	.+36     	; 0x17e68 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17e44:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e48:	85 ff       	sbrs	r24, 5
   17e4a:	0e c0       	rjmp	.+28     	; 0x17e68 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17e4c:	8c 2f       	mov	r24, r28
   17e4e:	90 e0       	ldi	r25, 0x00	; 0
   17e50:	ed b7       	in	r30, 0x3d	; 61
   17e52:	fe b7       	in	r31, 0x3e	; 62
   17e54:	95 83       	std	Z+5, r25	; 0x05
   17e56:	84 83       	std	Z+4, r24	; 0x04
   17e58:	81 e5       	ldi	r24, 0x51	; 81
   17e5a:	9e e2       	ldi	r25, 0x2E	; 46
   17e5c:	a0 e0       	ldi	r26, 0x00	; 0
   17e5e:	81 83       	std	Z+1, r24	; 0x01
   17e60:	92 83       	std	Z+2, r25	; 0x02
   17e62:	a3 83       	std	Z+3, r26	; 0x03
   17e64:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17e68:	80 e0       	ldi	r24, 0x00	; 0
   17e6a:	90 e0       	ldi	r25, 0x00	; 0
   17e6c:	0f 90       	pop	r0
   17e6e:	0f 90       	pop	r0
   17e70:	0f 90       	pop	r0
   17e72:	0f 90       	pop	r0
   17e74:	0f 90       	pop	r0
   17e76:	cf 91       	pop	r28
   17e78:	08 95       	ret

00017e7a <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17e7a:	0f 93       	push	r16
   17e7c:	1f 93       	push	r17
   17e7e:	da 01       	movw	r26, r20
   17e80:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17e82:	b7 fd       	sbrc	r27, 7
   17e84:	0b c0       	rjmp	.+22     	; 0x17e9c <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17e86:	fd 01       	movw	r30, r26
   17e88:	e6 0f       	add	r30, r22
   17e8a:	f7 1f       	adc	r31, r23
   17e8c:	e8 0f       	add	r30, r24
   17e8e:	f9 1f       	adc	r31, r25
   17e90:	00 83       	st	Z, r16
        val >>= 8;
   17e92:	01 2f       	mov	r16, r17
   17e94:	12 2f       	mov	r17, r18
   17e96:	23 2f       	mov	r18, r19
   17e98:	33 27       	eor	r19, r19
   17e9a:	f2 cf       	rjmp	.-28     	; 0x17e80 <V2B_MSB+0x6>
    }
}
   17e9c:	1f 91       	pop	r17
   17e9e:	0f 91       	pop	r16
   17ea0:	08 95       	ret

00017ea2 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17ea2:	0f 93       	push	r16
   17ea4:	1f 93       	push	r17
   17ea6:	fc 01       	movw	r30, r24
   17ea8:	e6 0f       	add	r30, r22
   17eaa:	f7 1f       	adc	r31, r23
   17eac:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17eae:	cf 01       	movw	r24, r30
   17eb0:	86 1b       	sub	r24, r22
   17eb2:	97 0b       	sbc	r25, r23
   17eb4:	84 17       	cp	r24, r20
   17eb6:	95 07       	cpc	r25, r21
   17eb8:	34 f4       	brge	.+12     	; 0x17ec6 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   17eba:	01 93       	st	Z+, r16
        val >>= 8;
   17ebc:	01 2f       	mov	r16, r17
   17ebe:	12 2f       	mov	r17, r18
   17ec0:	23 2f       	mov	r18, r19
   17ec2:	33 27       	eor	r19, r19
   17ec4:	f4 cf       	rjmp	.-24     	; 0x17eae <V2B_LSB+0xc>
    }
}
   17ec6:	1f 91       	pop	r17
   17ec8:	0f 91       	pop	r16
   17eca:	08 95       	ret

00017ecc <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17ecc:	cf 92       	push	r12
   17ece:	df 92       	push	r13
   17ed0:	ef 92       	push	r14
   17ed2:	ff 92       	push	r15
   17ed4:	fc 01       	movw	r30, r24
   17ed6:	e6 0f       	add	r30, r22
   17ed8:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   17eda:	60 e0       	ldi	r22, 0x00	; 0
   17edc:	70 e0       	ldi	r23, 0x00	; 0
   17ede:	cb 01       	movw	r24, r22
   17ee0:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17ee2:	9f 01       	movw	r18, r30
   17ee4:	2a 1b       	sub	r18, r26
   17ee6:	3b 0b       	sbc	r19, r27
   17ee8:	24 17       	cp	r18, r20
   17eea:	35 07       	cpc	r19, r21
   17eec:	4c f4       	brge	.+18     	; 0x17f00 <B2V_MSB+0x34>
    {
        val <<= 8;
   17eee:	cc 24       	eor	r12, r12
   17ef0:	d6 2e       	mov	r13, r22
   17ef2:	e7 2e       	mov	r14, r23
   17ef4:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17ef6:	21 91       	ld	r18, Z+
   17ef8:	c7 01       	movw	r24, r14
   17efa:	b6 01       	movw	r22, r12
   17efc:	62 2b       	or	r22, r18
   17efe:	f1 cf       	rjmp	.-30     	; 0x17ee2 <B2V_MSB+0x16>
    }
    return(val);
}
   17f00:	ff 90       	pop	r15
   17f02:	ef 90       	pop	r14
   17f04:	df 90       	pop	r13
   17f06:	cf 90       	pop	r12
   17f08:	08 95       	ret

00017f0a <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17f0a:	cf 92       	push	r12
   17f0c:	df 92       	push	r13
   17f0e:	ef 92       	push	r14
   17f10:	ff 92       	push	r15
   17f12:	9c 01       	movw	r18, r24
   17f14:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17f16:	60 e0       	ldi	r22, 0x00	; 0
   17f18:	70 e0       	ldi	r23, 0x00	; 0
   17f1a:	cb 01       	movw	r24, r22
   17f1c:	41 50       	subi	r20, 0x01	; 1
   17f1e:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17f20:	57 fd       	sbrc	r21, 7
   17f22:	0e c0       	rjmp	.+28     	; 0x17f40 <B2V_LSB+0x36>
    {
        val <<= 8;
   17f24:	cc 24       	eor	r12, r12
   17f26:	d6 2e       	mov	r13, r22
   17f28:	e7 2e       	mov	r14, r23
   17f2a:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17f2c:	fa 01       	movw	r30, r20
   17f2e:	ea 0f       	add	r30, r26
   17f30:	fb 1f       	adc	r31, r27
   17f32:	e2 0f       	add	r30, r18
   17f34:	f3 1f       	adc	r31, r19
   17f36:	e0 81       	ld	r30, Z
   17f38:	c7 01       	movw	r24, r14
   17f3a:	b6 01       	movw	r22, r12
   17f3c:	6e 2b       	or	r22, r30
   17f3e:	ee cf       	rjmp	.-36     	; 0x17f1c <B2V_LSB+0x12>
    }
    return(val);
}
   17f40:	ff 90       	pop	r15
   17f42:	ef 90       	pop	r14
   17f44:	df 90       	pop	r13
   17f46:	cf 90       	pop	r12
   17f48:	08 95       	ret

00017f4a <lif_help>:
   17f4a:	cf 93       	push	r28
   17f4c:	df 93       	push	r29
   17f4e:	00 d0       	rcall	.+0      	; 0x17f50 <lif_help+0x6>
   17f50:	1f 92       	push	r1
   17f52:	ec 01       	movw	r28, r24
   17f54:	84 e3       	ldi	r24, 0x34	; 52
   17f56:	93 e4       	ldi	r25, 0x43	; 67
   17f58:	a0 e0       	ldi	r26, 0x00	; 0
   17f5a:	ed b7       	in	r30, 0x3d	; 61
   17f5c:	fe b7       	in	r31, 0x3e	; 62
   17f5e:	81 83       	std	Z+1, r24	; 0x01
   17f60:	92 83       	std	Z+2, r25	; 0x02
   17f62:	a3 83       	std	Z+3, r26	; 0x03
   17f64:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   17f68:	cd 2b       	or	r28, r29
   17f6a:	51 f0       	breq	.+20     	; 0x17f80 <lif_help+0x36>
   17f6c:	8b e6       	ldi	r24, 0x6B	; 107
   17f6e:	91 e4       	ldi	r25, 0x41	; 65
   17f70:	a0 e0       	ldi	r26, 0x00	; 0
   17f72:	ed b7       	in	r30, 0x3d	; 61
   17f74:	fe b7       	in	r31, 0x3e	; 62
   17f76:	81 83       	std	Z+1, r24	; 0x01
   17f78:	92 83       	std	Z+2, r25	; 0x02
   17f7a:	a3 83       	std	Z+3, r26	; 0x03
   17f7c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   17f80:	cd b7       	in	r28, 0x3d	; 61
   17f82:	de b7       	in	r29, 0x3e	; 62
   17f84:	23 96       	adiw	r28, 0x03	; 3
   17f86:	e2 e0       	ldi	r30, 0x02	; 2
   17f88:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00017f8c <lif_calloc>:
   17f8c:	cf 92       	push	r12
   17f8e:	df 92       	push	r13
   17f90:	ef 92       	push	r14
   17f92:	ff 92       	push	r15
   17f94:	cf 93       	push	r28
   17f96:	df 93       	push	r29
   17f98:	ad b7       	in	r26, 0x3d	; 61
   17f9a:	be b7       	in	r27, 0x3e	; 62
   17f9c:	17 97       	sbiw	r26, 0x07	; 7
   17f9e:	0f b6       	in	r0, 0x3f	; 63
   17fa0:	f8 94       	cli
   17fa2:	be bf       	out	0x3e, r27	; 62
   17fa4:	0f be       	out	0x3f, r0	; 63
   17fa6:	ad bf       	out	0x3d, r26	; 61
   17fa8:	6b 01       	movw	r12, r22
   17faa:	7c 01       	movw	r14, r24
   17fac:	61 e0       	ldi	r22, 0x01	; 1
   17fae:	70 e0       	ldi	r23, 0x00	; 0
   17fb0:	c6 01       	movw	r24, r12
   17fb2:	0e 94 03 29 	call	0x5206	; 0x5206 <safecalloc>
   17fb6:	ec 01       	movw	r28, r24
   17fb8:	89 2b       	or	r24, r25
   17fba:	71 f4       	brne	.+28     	; 0x17fd8 <lif_calloc+0x4c>
   17fbc:	ed b7       	in	r30, 0x3d	; 61
   17fbe:	fe b7       	in	r31, 0x3e	; 62
   17fc0:	c4 82       	std	Z+4, r12	; 0x04
   17fc2:	d5 82       	std	Z+5, r13	; 0x05
   17fc4:	e6 82       	std	Z+6, r14	; 0x06
   17fc6:	f7 82       	std	Z+7, r15	; 0x07
   17fc8:	81 e2       	ldi	r24, 0x21	; 33
   17fca:	91 e4       	ldi	r25, 0x41	; 65
   17fcc:	a0 e0       	ldi	r26, 0x00	; 0
   17fce:	81 83       	std	Z+1, r24	; 0x01
   17fd0:	92 83       	std	Z+2, r25	; 0x02
   17fd2:	a3 83       	std	Z+3, r26	; 0x03
   17fd4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   17fd8:	ce 01       	movw	r24, r28
   17fda:	ad b7       	in	r26, 0x3d	; 61
   17fdc:	be b7       	in	r27, 0x3e	; 62
   17fde:	17 96       	adiw	r26, 0x07	; 7
   17fe0:	0f b6       	in	r0, 0x3f	; 63
   17fe2:	f8 94       	cli
   17fe4:	be bf       	out	0x3e, r27	; 62
   17fe6:	0f be       	out	0x3f, r0	; 63
   17fe8:	ad bf       	out	0x3d, r26	; 61
   17fea:	df 91       	pop	r29
   17fec:	cf 91       	pop	r28
   17fee:	ff 90       	pop	r15
   17ff0:	ef 90       	pop	r14
   17ff2:	df 90       	pop	r13
   17ff4:	cf 90       	pop	r12
   17ff6:	08 95       	ret

00017ff8 <lif_free>:
   17ff8:	00 d0       	rcall	.+0      	; 0x17ffa <lif_free+0x2>
   17ffa:	1f 92       	push	r1
   17ffc:	00 97       	sbiw	r24, 0x00	; 0
   17ffe:	59 f4       	brne	.+22     	; 0x18016 <lif_free+0x1e>
   18000:	89 e0       	ldi	r24, 0x09	; 9
   18002:	91 e4       	ldi	r25, 0x41	; 65
   18004:	a0 e0       	ldi	r26, 0x00	; 0
   18006:	ed b7       	in	r30, 0x3d	; 61
   18008:	fe b7       	in	r31, 0x3e	; 62
   1800a:	81 83       	std	Z+1, r24	; 0x01
   1800c:	92 83       	std	Z+2, r25	; 0x02
   1800e:	a3 83       	std	Z+3, r26	; 0x03
   18010:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18014:	02 c0       	rjmp	.+4      	; 0x1801a <lif_free+0x22>
   18016:	0e 94 4f 29 	call	0x529e	; 0x529e <safefree>
   1801a:	0f 90       	pop	r0
   1801c:	0f 90       	pop	r0
   1801e:	0f 90       	pop	r0
   18020:	08 95       	ret

00018022 <lif_stralloc>:
   18022:	0f 93       	push	r16
   18024:	1f 93       	push	r17
   18026:	cf 93       	push	r28
   18028:	df 93       	push	r29
   1802a:	ec 01       	movw	r28, r24
   1802c:	fc 01       	movw	r30, r24
   1802e:	01 90       	ld	r0, Z+
   18030:	00 20       	and	r0, r0
   18032:	e9 f7       	brne	.-6      	; 0x1802e <lif_stralloc+0xc>
   18034:	bf 01       	movw	r22, r30
   18036:	68 1b       	sub	r22, r24
   18038:	79 0b       	sbc	r23, r25
   1803a:	6d 5f       	subi	r22, 0xFD	; 253
   1803c:	7f 4f       	sbci	r23, 0xFF	; 255
   1803e:	07 2e       	mov	r0, r23
   18040:	00 0c       	add	r0, r0
   18042:	88 0b       	sbc	r24, r24
   18044:	99 0b       	sbc	r25, r25
   18046:	a2 df       	rcall	.-188    	; 0x17f8c <lif_calloc>
   18048:	8c 01       	movw	r16, r24
   1804a:	00 97       	sbiw	r24, 0x00	; 0
   1804c:	19 f0       	breq	.+6      	; 0x18054 <lif_stralloc+0x32>
   1804e:	be 01       	movw	r22, r28
   18050:	0e 94 97 32 	call	0x652e	; 0x652e <strcpy>
   18054:	c8 01       	movw	r24, r16
   18056:	df 91       	pop	r29
   18058:	cf 91       	pop	r28
   1805a:	1f 91       	pop	r17
   1805c:	0f 91       	pop	r16
   1805e:	08 95       	ret

00018060 <lif_open>:
   18060:	ef 92       	push	r14
   18062:	ff 92       	push	r15
   18064:	0f 93       	push	r16
   18066:	1f 93       	push	r17
   18068:	cf 93       	push	r28
   1806a:	df 93       	push	r29
   1806c:	ad b7       	in	r26, 0x3d	; 61
   1806e:	be b7       	in	r27, 0x3e	; 62
   18070:	17 97       	sbiw	r26, 0x07	; 7
   18072:	0f b6       	in	r0, 0x3f	; 63
   18074:	f8 94       	cli
   18076:	be bf       	out	0x3e, r27	; 62
   18078:	0f be       	out	0x3f, r0	; 63
   1807a:	ad bf       	out	0x3d, r26	; 61
   1807c:	8c 01       	movw	r16, r24
   1807e:	7b 01       	movw	r14, r22
   18080:	0e 94 dd 7f 	call	0xffba	; 0xffba <fopen>
   18084:	ec 01       	movw	r28, r24
   18086:	89 2b       	or	r24, r25
   18088:	71 f4       	brne	.+28     	; 0x180a6 <lif_open+0x46>
   1808a:	ed b7       	in	r30, 0x3d	; 61
   1808c:	fe b7       	in	r31, 0x3e	; 62
   1808e:	f7 82       	std	Z+7, r15	; 0x07
   18090:	e6 82       	std	Z+6, r14	; 0x06
   18092:	15 83       	std	Z+5, r17	; 0x05
   18094:	04 83       	std	Z+4, r16	; 0x04
   18096:	84 ee       	ldi	r24, 0xE4	; 228
   18098:	90 e4       	ldi	r25, 0x40	; 64
   1809a:	a0 e0       	ldi	r26, 0x00	; 0
   1809c:	81 83       	std	Z+1, r24	; 0x01
   1809e:	92 83       	std	Z+2, r25	; 0x02
   180a0:	a3 83       	std	Z+3, r26	; 0x03
   180a2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   180a6:	ce 01       	movw	r24, r28
   180a8:	cd b7       	in	r28, 0x3d	; 61
   180aa:	de b7       	in	r29, 0x3e	; 62
   180ac:	27 96       	adiw	r28, 0x07	; 7
   180ae:	e6 e0       	ldi	r30, 0x06	; 6
   180b0:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

000180b4 <lif_stat>:
   180b4:	0f 93       	push	r16
   180b6:	1f 93       	push	r17
   180b8:	cf 93       	push	r28
   180ba:	df 93       	push	r29
   180bc:	00 d0       	rcall	.+0      	; 0x180be <lif_stat+0xa>
   180be:	00 d0       	rcall	.+0      	; 0x180c0 <lif_stat+0xc>
   180c0:	1f 92       	push	r1
   180c2:	8c 01       	movw	r16, r24
   180c4:	d6 2f       	mov	r29, r22
   180c6:	c7 2f       	mov	r28, r23
   180c8:	0e 94 e2 7a 	call	0xf5c4	; 0xf5c4 <stat>
   180cc:	97 ff       	sbrs	r25, 7
   180ce:	0f c0       	rjmp	.+30     	; 0x180ee <lif_stat+0x3a>
   180d0:	ed b7       	in	r30, 0x3d	; 61
   180d2:	fe b7       	in	r31, 0x3e	; 62
   180d4:	15 83       	std	Z+5, r17	; 0x05
   180d6:	04 83       	std	Z+4, r16	; 0x04
   180d8:	8b ec       	ldi	r24, 0xCB	; 203
   180da:	90 e4       	ldi	r25, 0x40	; 64
   180dc:	a0 e0       	ldi	r26, 0x00	; 0
   180de:	81 83       	std	Z+1, r24	; 0x01
   180e0:	92 83       	std	Z+2, r25	; 0x02
   180e2:	a3 83       	std	Z+3, r26	; 0x03
   180e4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   180e8:	80 e0       	ldi	r24, 0x00	; 0
   180ea:	90 e0       	ldi	r25, 0x00	; 0
   180ec:	02 c0       	rjmp	.+4      	; 0x180f2 <lif_stat+0x3e>
   180ee:	8d 2f       	mov	r24, r29
   180f0:	9c 2f       	mov	r25, r28
   180f2:	cd b7       	in	r28, 0x3d	; 61
   180f4:	de b7       	in	r29, 0x3e	; 62
   180f6:	25 96       	adiw	r28, 0x05	; 5
   180f8:	e4 e0       	ldi	r30, 0x04	; 4
   180fa:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

000180fe <lif_seek_msg>:
   180fe:	a9 e0       	ldi	r26, 0x09	; 9
   18100:	b0 e0       	ldi	r27, 0x00	; 0
   18102:	e5 e8       	ldi	r30, 0x85	; 133
   18104:	f0 ec       	ldi	r31, 0xC0	; 192
   18106:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
   1810a:	ec 01       	movw	r28, r24
   1810c:	6a 01       	movw	r12, r20
   1810e:	7b 01       	movw	r14, r22
   18110:	89 01       	movw	r16, r18
   18112:	0e 94 1c 7c 	call	0xf838	; 0xf838 <ftell>
   18116:	6c 15       	cp	r22, r12
   18118:	7d 05       	cpc	r23, r13
   1811a:	8e 05       	cpc	r24, r14
   1811c:	9f 05       	cpc	r25, r15
   1811e:	19 f4       	brne	.+6      	; 0x18126 <lif_seek_msg+0x28>
   18120:	81 e0       	ldi	r24, 0x01	; 1
   18122:	90 e0       	ldi	r25, 0x00	; 0
   18124:	1b c0       	rjmp	.+54     	; 0x1815c <lif_seek_msg+0x5e>
   18126:	20 e0       	ldi	r18, 0x00	; 0
   18128:	30 e0       	ldi	r19, 0x00	; 0
   1812a:	b7 01       	movw	r22, r14
   1812c:	a6 01       	movw	r20, r12
   1812e:	ce 01       	movw	r24, r28
   18130:	0e 94 9f 7c 	call	0xf93e	; 0xf93e <fseek>
   18134:	97 ff       	sbrs	r25, 7
   18136:	f4 cf       	rjmp	.-24     	; 0x18120 <lif_seek_msg+0x22>
   18138:	ed b7       	in	r30, 0x3d	; 61
   1813a:	fe b7       	in	r31, 0x3e	; 62
   1813c:	c6 82       	std	Z+6, r12	; 0x06
   1813e:	d7 82       	std	Z+7, r13	; 0x07
   18140:	e0 86       	std	Z+8, r14	; 0x08
   18142:	f1 86       	std	Z+9, r15	; 0x09
   18144:	15 83       	std	Z+5, r17	; 0x05
   18146:	04 83       	std	Z+4, r16	; 0x04
   18148:	8a ea       	ldi	r24, 0xAA	; 170
   1814a:	90 e4       	ldi	r25, 0x40	; 64
   1814c:	a0 e0       	ldi	r26, 0x00	; 0
   1814e:	81 83       	std	Z+1, r24	; 0x01
   18150:	92 83       	std	Z+2, r25	; 0x02
   18152:	a3 83       	std	Z+3, r26	; 0x03
   18154:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18158:	80 e0       	ldi	r24, 0x00	; 0
   1815a:	90 e0       	ldi	r25, 0x00	; 0
   1815c:	cd b7       	in	r28, 0x3d	; 61
   1815e:	de b7       	in	r29, 0x3e	; 62
   18160:	29 96       	adiw	r28, 0x09	; 9
   18162:	e8 e0       	ldi	r30, 0x08	; 8
   18164:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

00018168 <lif_read>:
   18168:	af e0       	ldi	r26, 0x0F	; 15
   1816a:	b0 e0       	ldi	r27, 0x00	; 0
   1816c:	ea eb       	ldi	r30, 0xBA	; 186
   1816e:	f0 ec       	ldi	r31, 0xC0	; 192
   18170:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
   18174:	ec 01       	movw	r28, r24
   18176:	7b 01       	movw	r14, r22
   18178:	49 01       	movw	r8, r18
   1817a:	5a 01       	movw	r10, r20
   1817c:	28 81       	ld	r18, Y
   1817e:	39 81       	ldd	r19, Y+1	; 0x01
   18180:	b5 01       	movw	r22, r10
   18182:	a4 01       	movw	r20, r8
   18184:	8a 81       	ldd	r24, Y+2	; 0x02
   18186:	9b 81       	ldd	r25, Y+3	; 0x03
   18188:	ba df       	rcall	.-140    	; 0x180fe <lif_seek_msg>
   1818a:	89 2b       	or	r24, r25
   1818c:	91 f1       	breq	.+100    	; 0x181f2 <lif_read+0x8a>
   1818e:	2a 81       	ldd	r18, Y+2	; 0x02
   18190:	3b 81       	ldd	r19, Y+3	; 0x03
   18192:	a8 01       	movw	r20, r16
   18194:	61 e0       	ldi	r22, 0x01	; 1
   18196:	70 e0       	ldi	r23, 0x00	; 0
   18198:	c7 01       	movw	r24, r14
   1819a:	0e 94 33 7d 	call	0xfa66	; 0xfa66 <fread>
   1819e:	6c 01       	movw	r12, r24
   181a0:	e1 2c       	mov	r14, r1
   181a2:	f1 2c       	mov	r15, r1
   181a4:	b8 01       	movw	r22, r16
   181a6:	01 2e       	mov	r0, r17
   181a8:	00 0c       	add	r0, r0
   181aa:	88 0b       	sbc	r24, r24
   181ac:	99 0b       	sbc	r25, r25
   181ae:	c6 16       	cp	r12, r22
   181b0:	d7 06       	cpc	r13, r23
   181b2:	e8 06       	cpc	r14, r24
   181b4:	f9 06       	cpc	r15, r25
   181b6:	19 f1       	breq	.+70     	; 0x181fe <lif_read+0x96>
   181b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   181bc:	81 ff       	sbrs	r24, 1
   181be:	1d c0       	rjmp	.+58     	; 0x181fa <lif_read+0x92>
   181c0:	ed b7       	in	r30, 0x3d	; 61
   181c2:	fe b7       	in	r31, 0x3e	; 62
   181c4:	17 87       	std	Z+15, r17	; 0x0f
   181c6:	06 87       	std	Z+14, r16	; 0x0e
   181c8:	c2 86       	std	Z+10, r12	; 0x0a
   181ca:	d3 86       	std	Z+11, r13	; 0x0b
   181cc:	e4 86       	std	Z+12, r14	; 0x0c
   181ce:	f5 86       	std	Z+13, r15	; 0x0d
   181d0:	86 82       	std	Z+6, r8	; 0x06
   181d2:	97 82       	std	Z+7, r9	; 0x07
   181d4:	a0 86       	std	Z+8, r10	; 0x08
   181d6:	b1 86       	std	Z+9, r11	; 0x09
   181d8:	88 81       	ld	r24, Y
   181da:	99 81       	ldd	r25, Y+1	; 0x01
   181dc:	95 83       	std	Z+5, r25	; 0x05
   181de:	84 83       	std	Z+4, r24	; 0x04
   181e0:	8e e6       	ldi	r24, 0x6E	; 110
   181e2:	90 e4       	ldi	r25, 0x40	; 64
   181e4:	a0 e0       	ldi	r26, 0x00	; 0
   181e6:	81 83       	std	Z+1, r24	; 0x01
   181e8:	92 83       	std	Z+2, r25	; 0x02
   181ea:	a3 83       	std	Z+3, r26	; 0x03
   181ec:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   181f0:	04 c0       	rjmp	.+8      	; 0x181fa <lif_read+0x92>
   181f2:	60 e0       	ldi	r22, 0x00	; 0
   181f4:	70 e0       	ldi	r23, 0x00	; 0
   181f6:	cb 01       	movw	r24, r22
   181f8:	02 c0       	rjmp	.+4      	; 0x181fe <lif_read+0x96>
   181fa:	c7 01       	movw	r24, r14
   181fc:	b6 01       	movw	r22, r12
   181fe:	cd b7       	in	r28, 0x3d	; 61
   18200:	de b7       	in	r29, 0x3e	; 62
   18202:	2f 96       	adiw	r28, 0x0f	; 15
   18204:	ec e0       	ldi	r30, 0x0C	; 12
   18206:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

0001820a <lif_write>:
   1820a:	8f 92       	push	r8
   1820c:	9f 92       	push	r9
   1820e:	af 92       	push	r10
   18210:	bf 92       	push	r11
   18212:	ef 92       	push	r14
   18214:	ff 92       	push	r15
   18216:	0f 93       	push	r16
   18218:	1f 93       	push	r17
   1821a:	cf 93       	push	r28
   1821c:	df 93       	push	r29
   1821e:	ad b7       	in	r26, 0x3d	; 61
   18220:	be b7       	in	r27, 0x3e	; 62
   18222:	1d 97       	sbiw	r26, 0x0d	; 13
   18224:	0f b6       	in	r0, 0x3f	; 63
   18226:	f8 94       	cli
   18228:	be bf       	out	0x3e, r27	; 62
   1822a:	0f be       	out	0x3f, r0	; 63
   1822c:	ad bf       	out	0x3d, r26	; 61
   1822e:	7c 01       	movw	r14, r24
   18230:	eb 01       	movw	r28, r22
   18232:	49 01       	movw	r8, r18
   18234:	5a 01       	movw	r10, r20
   18236:	fc 01       	movw	r30, r24
   18238:	20 81       	ld	r18, Z
   1823a:	31 81       	ldd	r19, Z+1	; 0x01
   1823c:	b5 01       	movw	r22, r10
   1823e:	a4 01       	movw	r20, r8
   18240:	82 81       	ldd	r24, Z+2	; 0x02
   18242:	93 81       	ldd	r25, Z+3	; 0x03
   18244:	5c df       	rcall	.-328    	; 0x180fe <lif_seek_msg>
   18246:	00 97       	sbiw	r24, 0x00	; 0
   18248:	71 f1       	breq	.+92     	; 0x182a6 <lif_write+0x9c>
   1824a:	f7 01       	movw	r30, r14
   1824c:	22 81       	ldd	r18, Z+2	; 0x02
   1824e:	33 81       	ldd	r19, Z+3	; 0x03
   18250:	a8 01       	movw	r20, r16
   18252:	61 e0       	ldi	r22, 0x01	; 1
   18254:	70 e0       	ldi	r23, 0x00	; 0
   18256:	ce 01       	movw	r24, r28
   18258:	0e 94 05 7e 	call	0xfc0a	; 0xfc0a <fwrite>
   1825c:	ec 01       	movw	r28, r24
   1825e:	08 17       	cp	r16, r24
   18260:	19 07       	cpc	r17, r25
   18262:	f1 f0       	breq	.+60     	; 0x182a0 <lif_write+0x96>
   18264:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18268:	81 ff       	sbrs	r24, 1
   1826a:	1c c0       	rjmp	.+56     	; 0x182a4 <lif_write+0x9a>
   1826c:	ed b7       	in	r30, 0x3d	; 61
   1826e:	fe b7       	in	r31, 0x3e	; 62
   18270:	15 87       	std	Z+13, r17	; 0x0d
   18272:	04 87       	std	Z+12, r16	; 0x0c
   18274:	d3 87       	std	Z+11, r29	; 0x0b
   18276:	c2 87       	std	Z+10, r28	; 0x0a
   18278:	86 82       	std	Z+6, r8	; 0x06
   1827a:	97 82       	std	Z+7, r9	; 0x07
   1827c:	a0 86       	std	Z+8, r10	; 0x08
   1827e:	b1 86       	std	Z+9, r11	; 0x09
   18280:	f7 01       	movw	r30, r14
   18282:	80 81       	ld	r24, Z
   18284:	91 81       	ldd	r25, Z+1	; 0x01
   18286:	ed b7       	in	r30, 0x3d	; 61
   18288:	fe b7       	in	r31, 0x3e	; 62
   1828a:	95 83       	std	Z+5, r25	; 0x05
   1828c:	84 83       	std	Z+4, r24	; 0x04
   1828e:	81 e3       	ldi	r24, 0x31	; 49
   18290:	90 e4       	ldi	r25, 0x40	; 64
   18292:	a0 e0       	ldi	r26, 0x00	; 0
   18294:	81 83       	std	Z+1, r24	; 0x01
   18296:	92 83       	std	Z+2, r25	; 0x02
   18298:	a3 83       	std	Z+3, r26	; 0x03
   1829a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1829e:	02 c0       	rjmp	.+4      	; 0x182a4 <lif_write+0x9a>
   182a0:	c8 01       	movw	r24, r16
   182a2:	01 c0       	rjmp	.+2      	; 0x182a6 <lif_write+0x9c>
   182a4:	ce 01       	movw	r24, r28
   182a6:	ad b7       	in	r26, 0x3d	; 61
   182a8:	be b7       	in	r27, 0x3e	; 62
   182aa:	1d 96       	adiw	r26, 0x0d	; 13
   182ac:	0f b6       	in	r0, 0x3f	; 63
   182ae:	f8 94       	cli
   182b0:	be bf       	out	0x3e, r27	; 62
   182b2:	0f be       	out	0x3f, r0	; 63
   182b4:	ad bf       	out	0x3d, r26	; 61
   182b6:	df 91       	pop	r29
   182b8:	cf 91       	pop	r28
   182ba:	1f 91       	pop	r17
   182bc:	0f 91       	pop	r16
   182be:	ff 90       	pop	r15
   182c0:	ef 90       	pop	r14
   182c2:	bf 90       	pop	r11
   182c4:	af 90       	pop	r10
   182c6:	9f 90       	pop	r9
   182c8:	8f 90       	pop	r8
   182ca:	08 95       	ret

000182cc <lif_chars>:
   182cc:	80 32       	cpi	r24, 0x20	; 32
   182ce:	91 05       	cpc	r25, r1
   182d0:	e1 f0       	breq	.+56     	; 0x1830a <lif_chars+0x3e>
   182d2:	9c 01       	movw	r18, r24
   182d4:	21 56       	subi	r18, 0x61	; 97
   182d6:	31 09       	sbc	r19, r1
   182d8:	2a 31       	cpi	r18, 0x1A	; 26
   182da:	31 05       	cpc	r19, r1
   182dc:	10 f4       	brcc	.+4      	; 0x182e2 <lif_chars+0x16>
   182de:	80 97       	sbiw	r24, 0x20	; 32
   182e0:	08 95       	ret
   182e2:	9c 01       	movw	r18, r24
   182e4:	21 54       	subi	r18, 0x41	; 65
   182e6:	31 09       	sbc	r19, r1
   182e8:	2a 31       	cpi	r18, 0x1A	; 26
   182ea:	31 05       	cpc	r19, r1
   182ec:	c8 f0       	brcs	.+50     	; 0x18320 <lif_chars+0x54>
   182ee:	16 16       	cp	r1, r22
   182f0:	17 06       	cpc	r1, r23
   182f2:	74 f4       	brge	.+28     	; 0x18310 <lif_chars+0x44>
   182f4:	2f 5e       	subi	r18, 0xEF	; 239
   182f6:	3f 4f       	sbci	r19, 0xFF	; 255
   182f8:	2a 30       	cpi	r18, 0x0A	; 10
   182fa:	31 05       	cpc	r19, r1
   182fc:	88 f0       	brcs	.+34     	; 0x18320 <lif_chars+0x54>
   182fe:	8f 35       	cpi	r24, 0x5F	; 95
   18300:	91 05       	cpc	r25, r1
   18302:	49 f0       	breq	.+18     	; 0x18316 <lif_chars+0x4a>
   18304:	8d 97       	sbiw	r24, 0x2d	; 45
   18306:	21 f4       	brne	.+8      	; 0x18310 <lif_chars+0x44>
   18308:	09 c0       	rjmp	.+18     	; 0x1831c <lif_chars+0x50>
   1830a:	80 e2       	ldi	r24, 0x20	; 32
   1830c:	90 e0       	ldi	r25, 0x00	; 0
   1830e:	08 95       	ret
   18310:	80 e0       	ldi	r24, 0x00	; 0
   18312:	90 e0       	ldi	r25, 0x00	; 0
   18314:	08 95       	ret
   18316:	8f e5       	ldi	r24, 0x5F	; 95
   18318:	90 e0       	ldi	r25, 0x00	; 0
   1831a:	08 95       	ret
   1831c:	8d e2       	ldi	r24, 0x2D	; 45
   1831e:	90 e0       	ldi	r25, 0x00	; 0
   18320:	08 95       	ret

00018322 <lif_B2S>:
   18322:	a0 e0       	ldi	r26, 0x00	; 0
   18324:	b0 e0       	ldi	r27, 0x00	; 0
   18326:	e7 e9       	ldi	r30, 0x97	; 151
   18328:	f1 ec       	ldi	r31, 0xC1	; 193
   1832a:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
   1832e:	5c 01       	movw	r10, r24
   18330:	6b 01       	movw	r12, r22
   18332:	ea 01       	movw	r28, r20
   18334:	4c 01       	movw	r8, r24
   18336:	ee 24       	eor	r14, r14
   18338:	e3 94       	inc	r14
   1833a:	f1 2c       	mov	r15, r1
   1833c:	00 e0       	ldi	r16, 0x00	; 0
   1833e:	10 e0       	ldi	r17, 0x00	; 0
   18340:	0c 17       	cp	r16, r28
   18342:	1d 07       	cpc	r17, r29
   18344:	6c f4       	brge	.+26     	; 0x18360 <lif_B2S+0x3e>
   18346:	f4 01       	movw	r30, r8
   18348:	81 91       	ld	r24, Z+
   1834a:	4f 01       	movw	r8, r30
   1834c:	b8 01       	movw	r22, r16
   1834e:	90 e0       	ldi	r25, 0x00	; 0
   18350:	bd df       	rcall	.-134    	; 0x182cc <lif_chars>
   18352:	89 2b       	or	r24, r25
   18354:	11 f4       	brne	.+4      	; 0x1835a <lif_B2S+0x38>
   18356:	e1 2c       	mov	r14, r1
   18358:	f1 2c       	mov	r15, r1
   1835a:	0f 5f       	subi	r16, 0xFF	; 255
   1835c:	1f 4f       	sbci	r17, 0xFF	; 255
   1835e:	f0 cf       	rjmp	.-32     	; 0x18340 <lif_B2S+0x1e>
   18360:	d6 01       	movw	r26, r12
   18362:	f5 01       	movw	r30, r10
   18364:	cf 01       	movw	r24, r30
   18366:	8a 19       	sub	r24, r10
   18368:	9b 09       	sbc	r25, r11
   1836a:	8c 17       	cp	r24, r28
   1836c:	9d 07       	cpc	r25, r29
   1836e:	1c f4       	brge	.+6      	; 0x18376 <lif_B2S+0x54>
   18370:	81 91       	ld	r24, Z+
   18372:	8d 93       	st	X+, r24
   18374:	f7 cf       	rjmp	.-18     	; 0x18364 <lif_B2S+0x42>
   18376:	d7 ff       	sbrs	r29, 7
   18378:	02 c0       	rjmp	.+4      	; 0x1837e <lif_B2S+0x5c>
   1837a:	c0 e0       	ldi	r28, 0x00	; 0
   1837c:	d0 e0       	ldi	r29, 0x00	; 0
   1837e:	cc 0d       	add	r28, r12
   18380:	dd 1d       	adc	r29, r13
   18382:	18 82       	st	Y, r1
   18384:	c6 01       	movw	r24, r12
   18386:	0e 94 75 33 	call	0x66ea	; 0x66ea <trim_tail>
   1838a:	c7 01       	movw	r24, r14
   1838c:	cd b7       	in	r28, 0x3d	; 61
   1838e:	de b7       	in	r29, 0x3e	; 62
   18390:	ec e0       	ldi	r30, 0x0C	; 12
   18392:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

00018396 <lif_checkname>:
   18396:	ef 92       	push	r14
   18398:	ff 92       	push	r15
   1839a:	0f 93       	push	r16
   1839c:	1f 93       	push	r17
   1839e:	cf 93       	push	r28
   183a0:	df 93       	push	r29
   183a2:	7c 01       	movw	r14, r24
   183a4:	ec 01       	movw	r28, r24
   183a6:	01 e0       	ldi	r16, 0x01	; 1
   183a8:	10 e0       	ldi	r17, 0x00	; 0
   183aa:	be 01       	movw	r22, r28
   183ac:	6e 19       	sub	r22, r14
   183ae:	7f 09       	sbc	r23, r15
   183b0:	89 91       	ld	r24, Y+
   183b2:	88 23       	and	r24, r24
   183b4:	39 f0       	breq	.+14     	; 0x183c4 <lif_checkname+0x2e>
   183b6:	90 e0       	ldi	r25, 0x00	; 0
   183b8:	89 df       	rcall	.-238    	; 0x182cc <lif_chars>
   183ba:	89 2b       	or	r24, r25
   183bc:	b1 f7       	brne	.-20     	; 0x183aa <lif_checkname+0x14>
   183be:	00 e0       	ldi	r16, 0x00	; 0
   183c0:	10 e0       	ldi	r17, 0x00	; 0
   183c2:	f3 cf       	rjmp	.-26     	; 0x183aa <lif_checkname+0x14>
   183c4:	c8 01       	movw	r24, r16
   183c6:	cd b7       	in	r28, 0x3d	; 61
   183c8:	de b7       	in	r29, 0x3e	; 62
   183ca:	e6 e0       	ldi	r30, 0x06	; 6
   183cc:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

000183d0 <lif_S2B>:
   183d0:	fb 01       	movw	r30, r22
   183d2:	dc 01       	movw	r26, r24
   183d4:	20 e0       	ldi	r18, 0x00	; 0
   183d6:	30 e0       	ldi	r19, 0x00	; 0
   183d8:	61 91       	ld	r22, Z+
   183da:	61 11       	cpse	r22, r1
   183dc:	05 c0       	rjmp	.+10     	; 0x183e8 <lif_S2B+0x18>
   183de:	fc 01       	movw	r30, r24
   183e0:	e2 0f       	add	r30, r18
   183e2:	f3 1f       	adc	r31, r19
   183e4:	60 e2       	ldi	r22, 0x20	; 32
   183e6:	08 c0       	rjmp	.+16     	; 0x183f8 <lif_S2B+0x28>
   183e8:	24 17       	cp	r18, r20
   183ea:	35 07       	cpc	r19, r21
   183ec:	24 f4       	brge	.+8      	; 0x183f6 <lif_S2B+0x26>
   183ee:	6d 93       	st	X+, r22
   183f0:	2f 5f       	subi	r18, 0xFF	; 255
   183f2:	3f 4f       	sbci	r19, 0xFF	; 255
   183f4:	f1 cf       	rjmp	.-30     	; 0x183d8 <lif_S2B+0x8>
   183f6:	08 95       	ret
   183f8:	9f 01       	movw	r18, r30
   183fa:	28 1b       	sub	r18, r24
   183fc:	39 0b       	sbc	r19, r25
   183fe:	24 17       	cp	r18, r20
   18400:	35 07       	cpc	r19, r21
   18402:	14 f4       	brge	.+4      	; 0x18408 <lif_S2B+0x38>
   18404:	61 93       	st	Z+, r22
   18406:	f8 cf       	rjmp	.-16     	; 0x183f8 <lif_S2B+0x28>
   18408:	08 95       	ret

0001840a <lif_fixname>:
   1840a:	a0 e0       	ldi	r26, 0x00	; 0
   1840c:	b0 e0       	ldi	r27, 0x00	; 0
   1840e:	eb e0       	ldi	r30, 0x0B	; 11
   18410:	f2 ec       	ldi	r31, 0xC2	; 194
   18412:	0c 94 f2 e3 	jmp	0x1c7e4	; 0x1c7e4 <__prologue_saves__+0x12>
   18416:	8c 01       	movw	r16, r24
   18418:	cb 01       	movw	r24, r22
   1841a:	7a 01       	movw	r14, r20
   1841c:	0e 94 ae 78 	call	0xf15c	; 0xf15c <basename>
   18420:	6c 01       	movw	r12, r24
   18422:	e8 01       	movw	r28, r16
   18424:	80 e2       	ldi	r24, 0x20	; 32
   18426:	b8 2e       	mov	r11, r24
   18428:	be 01       	movw	r22, r28
   1842a:	60 1b       	sub	r22, r16
   1842c:	71 0b       	sbc	r23, r17
   1842e:	f6 01       	movw	r30, r12
   18430:	81 91       	ld	r24, Z+
   18432:	6f 01       	movw	r12, r30
   18434:	81 11       	cpse	r24, r1
   18436:	02 c0       	rjmp	.+4      	; 0x1843c <lif_fixname+0x32>
   18438:	20 e2       	ldi	r18, 0x20	; 32
   1843a:	0e c0       	rjmp	.+28     	; 0x18458 <lif_fixname+0x4e>
   1843c:	1e 14       	cp	r1, r14
   1843e:	1f 04       	cpc	r1, r15
   18440:	dc f7       	brge	.-10     	; 0x18438 <lif_fixname+0x2e>
   18442:	8e 32       	cpi	r24, 0x2E	; 46
   18444:	c9 f3       	breq	.-14     	; 0x18438 <lif_fixname+0x2e>
   18446:	90 e0       	ldi	r25, 0x00	; 0
   18448:	41 df       	rcall	.-382    	; 0x182cc <lif_chars>
   1844a:	88 23       	and	r24, r24
   1844c:	11 f0       	breq	.+4      	; 0x18452 <lif_fixname+0x48>
   1844e:	88 83       	st	Y, r24
   18450:	01 c0       	rjmp	.+2      	; 0x18454 <lif_fixname+0x4a>
   18452:	b8 82       	st	Y, r11
   18454:	21 96       	adiw	r28, 0x01	; 1
   18456:	e8 cf       	rjmp	.-48     	; 0x18428 <lif_fixname+0x1e>
   18458:	ce 01       	movw	r24, r28
   1845a:	80 1b       	sub	r24, r16
   1845c:	91 0b       	sbc	r25, r17
   1845e:	8e 15       	cp	r24, r14
   18460:	9f 05       	cpc	r25, r15
   18462:	14 f4       	brge	.+4      	; 0x18468 <lif_fixname+0x5e>
   18464:	29 93       	st	Y+, r18
   18466:	f8 cf       	rjmp	.-16     	; 0x18458 <lif_fixname+0x4e>
   18468:	18 82       	st	Y, r1
   1846a:	f8 01       	movw	r30, r16
   1846c:	01 90       	ld	r0, Z+
   1846e:	00 20       	and	r0, r0
   18470:	e9 f7       	brne	.-6      	; 0x1846c <lif_fixname+0x62>
   18472:	cf 01       	movw	r24, r30
   18474:	01 97       	sbiw	r24, 0x01	; 1
   18476:	80 1b       	sub	r24, r16
   18478:	91 0b       	sbc	r25, r17
   1847a:	cd b7       	in	r28, 0x3d	; 61
   1847c:	de b7       	in	r29, 0x3e	; 62
   1847e:	e9 e0       	ldi	r30, 0x09	; 9
   18480:	0c 94 0e e4 	jmp	0x1c81c	; 0x1c81c <__epilogue_restores__+0x12>

00018484 <lif_vol2str>:
   18484:	ef 92       	push	r14
   18486:	ff 92       	push	r15
   18488:	0f 93       	push	r16
   1848a:	1f 93       	push	r17
   1848c:	cf 93       	push	r28
   1848e:	df 93       	push	r29
   18490:	7c 01       	movw	r14, r24
   18492:	eb 01       	movw	r28, r22
   18494:	fc 01       	movw	r30, r24
   18496:	04 a1       	ldd	r16, Z+36	; 0x24
   18498:	15 a1       	ldd	r17, Z+37	; 0x25
   1849a:	20 e0       	ldi	r18, 0x00	; 0
   1849c:	30 e0       	ldi	r19, 0x00	; 0
   1849e:	42 e0       	ldi	r20, 0x02	; 2
   184a0:	50 e0       	ldi	r21, 0x00	; 0
   184a2:	60 e0       	ldi	r22, 0x00	; 0
   184a4:	70 e0       	ldi	r23, 0x00	; 0
   184a6:	ce 01       	movw	r24, r28
   184a8:	e8 dc       	rcall	.-1584   	; 0x17e7a <V2B_MSB>
   184aa:	b7 01       	movw	r22, r14
   184ac:	6a 5d       	subi	r22, 0xDA	; 218
   184ae:	7f 4f       	sbci	r23, 0xFF	; 255
   184b0:	46 e0       	ldi	r20, 0x06	; 6
   184b2:	50 e0       	ldi	r21, 0x00	; 0
   184b4:	ce 01       	movw	r24, r28
   184b6:	02 96       	adiw	r24, 0x02	; 2
   184b8:	8b df       	rcall	.-234    	; 0x183d0 <lif_S2B>
   184ba:	f7 01       	movw	r30, r14
   184bc:	05 a5       	ldd	r16, Z+45	; 0x2d
   184be:	16 a5       	ldd	r17, Z+46	; 0x2e
   184c0:	27 a5       	ldd	r18, Z+47	; 0x2f
   184c2:	30 a9       	ldd	r19, Z+48	; 0x30
   184c4:	44 e0       	ldi	r20, 0x04	; 4
   184c6:	50 e0       	ldi	r21, 0x00	; 0
   184c8:	68 e0       	ldi	r22, 0x08	; 8
   184ca:	70 e0       	ldi	r23, 0x00	; 0
   184cc:	ce 01       	movw	r24, r28
   184ce:	d5 dc       	rcall	.-1622   	; 0x17e7a <V2B_MSB>
   184d0:	f7 01       	movw	r30, r14
   184d2:	01 a9       	ldd	r16, Z+49	; 0x31
   184d4:	12 a9       	ldd	r17, Z+50	; 0x32
   184d6:	20 e0       	ldi	r18, 0x00	; 0
   184d8:	30 e0       	ldi	r19, 0x00	; 0
   184da:	42 e0       	ldi	r20, 0x02	; 2
   184dc:	50 e0       	ldi	r21, 0x00	; 0
   184de:	6c e0       	ldi	r22, 0x0C	; 12
   184e0:	70 e0       	ldi	r23, 0x00	; 0
   184e2:	ce 01       	movw	r24, r28
   184e4:	ca dc       	rcall	.-1644   	; 0x17e7a <V2B_MSB>
   184e6:	00 e0       	ldi	r16, 0x00	; 0
   184e8:	10 e0       	ldi	r17, 0x00	; 0
   184ea:	98 01       	movw	r18, r16
   184ec:	42 e0       	ldi	r20, 0x02	; 2
   184ee:	50 e0       	ldi	r21, 0x00	; 0
   184f0:	6e e0       	ldi	r22, 0x0E	; 14
   184f2:	70 e0       	ldi	r23, 0x00	; 0
   184f4:	ce 01       	movw	r24, r28
   184f6:	c1 dc       	rcall	.-1662   	; 0x17e7a <V2B_MSB>
   184f8:	f7 01       	movw	r30, r14
   184fa:	05 a9       	ldd	r16, Z+53	; 0x35
   184fc:	16 a9       	ldd	r17, Z+54	; 0x36
   184fe:	27 a9       	ldd	r18, Z+55	; 0x37
   18500:	30 ad       	ldd	r19, Z+56	; 0x38
   18502:	44 e0       	ldi	r20, 0x04	; 4
   18504:	50 e0       	ldi	r21, 0x00	; 0
   18506:	60 e1       	ldi	r22, 0x10	; 16
   18508:	70 e0       	ldi	r23, 0x00	; 0
   1850a:	ce 01       	movw	r24, r28
   1850c:	b6 dc       	rcall	.-1684   	; 0x17e7a <V2B_MSB>
   1850e:	f7 01       	movw	r30, r14
   18510:	01 ad       	ldd	r16, Z+57	; 0x39
   18512:	12 ad       	ldd	r17, Z+58	; 0x3a
   18514:	20 e0       	ldi	r18, 0x00	; 0
   18516:	30 e0       	ldi	r19, 0x00	; 0
   18518:	42 e0       	ldi	r20, 0x02	; 2
   1851a:	50 e0       	ldi	r21, 0x00	; 0
   1851c:	64 e1       	ldi	r22, 0x14	; 20
   1851e:	70 e0       	ldi	r23, 0x00	; 0
   18520:	ce 01       	movw	r24, r28
   18522:	ab dc       	rcall	.-1706   	; 0x17e7a <V2B_MSB>
   18524:	00 e0       	ldi	r16, 0x00	; 0
   18526:	10 e0       	ldi	r17, 0x00	; 0
   18528:	98 01       	movw	r18, r16
   1852a:	42 e0       	ldi	r20, 0x02	; 2
   1852c:	50 e0       	ldi	r21, 0x00	; 0
   1852e:	66 e1       	ldi	r22, 0x16	; 22
   18530:	70 e0       	ldi	r23, 0x00	; 0
   18532:	ce 01       	movw	r24, r28
   18534:	a2 dc       	rcall	.-1724   	; 0x17e7a <V2B_MSB>
   18536:	f7 01       	movw	r30, r14
   18538:	fd 96       	adiw	r30, 0x3d	; 61
   1853a:	00 81       	ld	r16, Z
   1853c:	11 81       	ldd	r17, Z+1	; 0x01
   1853e:	22 81       	ldd	r18, Z+2	; 0x02
   18540:	33 81       	ldd	r19, Z+3	; 0x03
   18542:	44 e0       	ldi	r20, 0x04	; 4
   18544:	50 e0       	ldi	r21, 0x00	; 0
   18546:	68 e1       	ldi	r22, 0x18	; 24
   18548:	70 e0       	ldi	r23, 0x00	; 0
   1854a:	ce 01       	movw	r24, r28
   1854c:	96 dc       	rcall	.-1748   	; 0x17e7a <V2B_MSB>
   1854e:	f7 01       	movw	r30, r14
   18550:	ef 5b       	subi	r30, 0xBF	; 191
   18552:	ff 4f       	sbci	r31, 0xFF	; 255
   18554:	00 81       	ld	r16, Z
   18556:	11 81       	ldd	r17, Z+1	; 0x01
   18558:	22 81       	ldd	r18, Z+2	; 0x02
   1855a:	33 81       	ldd	r19, Z+3	; 0x03
   1855c:	44 e0       	ldi	r20, 0x04	; 4
   1855e:	50 e0       	ldi	r21, 0x00	; 0
   18560:	6c e1       	ldi	r22, 0x1C	; 28
   18562:	70 e0       	ldi	r23, 0x00	; 0
   18564:	ce 01       	movw	r24, r28
   18566:	89 dc       	rcall	.-1774   	; 0x17e7a <V2B_MSB>
   18568:	f7 01       	movw	r30, r14
   1856a:	eb 5b       	subi	r30, 0xBB	; 187
   1856c:	ff 4f       	sbci	r31, 0xFF	; 255
   1856e:	00 81       	ld	r16, Z
   18570:	11 81       	ldd	r17, Z+1	; 0x01
   18572:	22 81       	ldd	r18, Z+2	; 0x02
   18574:	33 81       	ldd	r19, Z+3	; 0x03
   18576:	44 e0       	ldi	r20, 0x04	; 4
   18578:	50 e0       	ldi	r21, 0x00	; 0
   1857a:	60 e2       	ldi	r22, 0x20	; 32
   1857c:	70 e0       	ldi	r23, 0x00	; 0
   1857e:	ce 01       	movw	r24, r28
   18580:	7c dc       	rcall	.-1800   	; 0x17e7a <V2B_MSB>
   18582:	de 01       	movw	r26, r28
   18584:	94 96       	adiw	r26, 0x24	; 36
   18586:	f7 01       	movw	r30, r14
   18588:	e7 5b       	subi	r30, 0xB7	; 183
   1858a:	ff 4f       	sbci	r31, 0xFF	; 255
   1858c:	86 e0       	ldi	r24, 0x06	; 6
   1858e:	01 90       	ld	r0, Z+
   18590:	0d 92       	st	X+, r0
   18592:	8a 95       	dec	r24
   18594:	e1 f7       	brne	.-8      	; 0x1858e <lif_vol2str+0x10a>
   18596:	cd b7       	in	r28, 0x3d	; 61
   18598:	de b7       	in	r29, 0x3e	; 62
   1859a:	e6 e0       	ldi	r30, 0x06	; 6
   1859c:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

000185a0 <lif_str2vol>:
   185a0:	0f 93       	push	r16
   185a2:	1f 93       	push	r17
   185a4:	cf 93       	push	r28
   185a6:	df 93       	push	r29
   185a8:	8c 01       	movw	r16, r24
   185aa:	eb 01       	movw	r28, r22
   185ac:	42 e0       	ldi	r20, 0x02	; 2
   185ae:	50 e0       	ldi	r21, 0x00	; 0
   185b0:	60 e0       	ldi	r22, 0x00	; 0
   185b2:	70 e0       	ldi	r23, 0x00	; 0
   185b4:	8b dc       	rcall	.-1770   	; 0x17ecc <B2V_MSB>
   185b6:	7d a3       	std	Y+37, r23	; 0x25
   185b8:	6c a3       	std	Y+36, r22	; 0x24
   185ba:	be 01       	movw	r22, r28
   185bc:	6a 5d       	subi	r22, 0xDA	; 218
   185be:	7f 4f       	sbci	r23, 0xFF	; 255
   185c0:	46 e0       	ldi	r20, 0x06	; 6
   185c2:	50 e0       	ldi	r21, 0x00	; 0
   185c4:	c8 01       	movw	r24, r16
   185c6:	02 96       	adiw	r24, 0x02	; 2
   185c8:	ac de       	rcall	.-680    	; 0x18322 <lif_B2S>
   185ca:	44 e0       	ldi	r20, 0x04	; 4
   185cc:	50 e0       	ldi	r21, 0x00	; 0
   185ce:	68 e0       	ldi	r22, 0x08	; 8
   185d0:	70 e0       	ldi	r23, 0x00	; 0
   185d2:	c8 01       	movw	r24, r16
   185d4:	7b dc       	rcall	.-1802   	; 0x17ecc <B2V_MSB>
   185d6:	6d a7       	std	Y+45, r22	; 0x2d
   185d8:	7e a7       	std	Y+46, r23	; 0x2e
   185da:	8f a7       	std	Y+47, r24	; 0x2f
   185dc:	98 ab       	std	Y+48, r25	; 0x30
   185de:	42 e0       	ldi	r20, 0x02	; 2
   185e0:	50 e0       	ldi	r21, 0x00	; 0
   185e2:	6c e0       	ldi	r22, 0x0C	; 12
   185e4:	70 e0       	ldi	r23, 0x00	; 0
   185e6:	c8 01       	movw	r24, r16
   185e8:	71 dc       	rcall	.-1822   	; 0x17ecc <B2V_MSB>
   185ea:	7a ab       	std	Y+50, r23	; 0x32
   185ec:	69 ab       	std	Y+49, r22	; 0x31
   185ee:	42 e0       	ldi	r20, 0x02	; 2
   185f0:	50 e0       	ldi	r21, 0x00	; 0
   185f2:	6e e0       	ldi	r22, 0x0E	; 14
   185f4:	70 e0       	ldi	r23, 0x00	; 0
   185f6:	c8 01       	movw	r24, r16
   185f8:	69 dc       	rcall	.-1838   	; 0x17ecc <B2V_MSB>
   185fa:	7c ab       	std	Y+52, r23	; 0x34
   185fc:	6b ab       	std	Y+51, r22	; 0x33
   185fe:	44 e0       	ldi	r20, 0x04	; 4
   18600:	50 e0       	ldi	r21, 0x00	; 0
   18602:	60 e1       	ldi	r22, 0x10	; 16
   18604:	70 e0       	ldi	r23, 0x00	; 0
   18606:	c8 01       	movw	r24, r16
   18608:	61 dc       	rcall	.-1854   	; 0x17ecc <B2V_MSB>
   1860a:	6d ab       	std	Y+53, r22	; 0x35
   1860c:	7e ab       	std	Y+54, r23	; 0x36
   1860e:	8f ab       	std	Y+55, r24	; 0x37
   18610:	98 af       	std	Y+56, r25	; 0x38
   18612:	42 e0       	ldi	r20, 0x02	; 2
   18614:	50 e0       	ldi	r21, 0x00	; 0
   18616:	64 e1       	ldi	r22, 0x14	; 20
   18618:	70 e0       	ldi	r23, 0x00	; 0
   1861a:	c8 01       	movw	r24, r16
   1861c:	57 dc       	rcall	.-1874   	; 0x17ecc <B2V_MSB>
   1861e:	7a af       	std	Y+58, r23	; 0x3a
   18620:	69 af       	std	Y+57, r22	; 0x39
   18622:	42 e0       	ldi	r20, 0x02	; 2
   18624:	50 e0       	ldi	r21, 0x00	; 0
   18626:	66 e1       	ldi	r22, 0x16	; 22
   18628:	70 e0       	ldi	r23, 0x00	; 0
   1862a:	c8 01       	movw	r24, r16
   1862c:	4f dc       	rcall	.-1890   	; 0x17ecc <B2V_MSB>
   1862e:	7c af       	std	Y+60, r23	; 0x3c
   18630:	6b af       	std	Y+59, r22	; 0x3b
   18632:	44 e0       	ldi	r20, 0x04	; 4
   18634:	50 e0       	ldi	r21, 0x00	; 0
   18636:	68 e1       	ldi	r22, 0x18	; 24
   18638:	70 e0       	ldi	r23, 0x00	; 0
   1863a:	c8 01       	movw	r24, r16
   1863c:	47 dc       	rcall	.-1906   	; 0x17ecc <B2V_MSB>
   1863e:	fe 01       	movw	r30, r28
   18640:	fd 96       	adiw	r30, 0x3d	; 61
   18642:	60 83       	st	Z, r22
   18644:	71 83       	std	Z+1, r23	; 0x01
   18646:	82 83       	std	Z+2, r24	; 0x02
   18648:	93 83       	std	Z+3, r25	; 0x03
   1864a:	44 e0       	ldi	r20, 0x04	; 4
   1864c:	50 e0       	ldi	r21, 0x00	; 0
   1864e:	6c e1       	ldi	r22, 0x1C	; 28
   18650:	70 e0       	ldi	r23, 0x00	; 0
   18652:	c8 01       	movw	r24, r16
   18654:	3b dc       	rcall	.-1930   	; 0x17ecc <B2V_MSB>
   18656:	fe 01       	movw	r30, r28
   18658:	ef 5b       	subi	r30, 0xBF	; 191
   1865a:	ff 4f       	sbci	r31, 0xFF	; 255
   1865c:	60 83       	st	Z, r22
   1865e:	71 83       	std	Z+1, r23	; 0x01
   18660:	82 83       	std	Z+2, r24	; 0x02
   18662:	93 83       	std	Z+3, r25	; 0x03
   18664:	44 e0       	ldi	r20, 0x04	; 4
   18666:	50 e0       	ldi	r21, 0x00	; 0
   18668:	60 e2       	ldi	r22, 0x20	; 32
   1866a:	70 e0       	ldi	r23, 0x00	; 0
   1866c:	c8 01       	movw	r24, r16
   1866e:	2e dc       	rcall	.-1956   	; 0x17ecc <B2V_MSB>
   18670:	fe 01       	movw	r30, r28
   18672:	eb 5b       	subi	r30, 0xBB	; 187
   18674:	ff 4f       	sbci	r31, 0xFF	; 255
   18676:	60 83       	st	Z, r22
   18678:	71 83       	std	Z+1, r23	; 0x01
   1867a:	82 83       	std	Z+2, r24	; 0x02
   1867c:	93 83       	std	Z+3, r25	; 0x03
   1867e:	de 01       	movw	r26, r28
   18680:	a7 5b       	subi	r26, 0xB7	; 183
   18682:	bf 4f       	sbci	r27, 0xFF	; 255
   18684:	f8 01       	movw	r30, r16
   18686:	b4 96       	adiw	r30, 0x24	; 36
   18688:	86 e0       	ldi	r24, 0x06	; 6
   1868a:	01 90       	ld	r0, Z+
   1868c:	0d 92       	st	X+, r0
   1868e:	8a 95       	dec	r24
   18690:	e1 f7       	brne	.-8      	; 0x1868a <lif_str2vol+0xea>
   18692:	df 91       	pop	r29
   18694:	cf 91       	pop	r28
   18696:	1f 91       	pop	r17
   18698:	0f 91       	pop	r16
   1869a:	08 95       	ret

0001869c <lif_dir2str>:
   1869c:	ef 92       	push	r14
   1869e:	ff 92       	push	r15
   186a0:	0f 93       	push	r16
   186a2:	1f 93       	push	r17
   186a4:	cf 93       	push	r28
   186a6:	df 93       	push	r29
   186a8:	ec 01       	movw	r28, r24
   186aa:	7b 01       	movw	r14, r22
   186ac:	bc 01       	movw	r22, r24
   186ae:	61 5b       	subi	r22, 0xB1	; 177
   186b0:	7f 4f       	sbci	r23, 0xFF	; 255
   186b2:	4a e0       	ldi	r20, 0x0A	; 10
   186b4:	50 e0       	ldi	r21, 0x00	; 0
   186b6:	c7 01       	movw	r24, r14
   186b8:	8b de       	rcall	.-746    	; 0x183d0 <lif_S2B>
   186ba:	fe 01       	movw	r30, r28
   186bc:	e6 5a       	subi	r30, 0xA6	; 166
   186be:	ff 4f       	sbci	r31, 0xFF	; 255
   186c0:	00 81       	ld	r16, Z
   186c2:	11 81       	ldd	r17, Z+1	; 0x01
   186c4:	20 e0       	ldi	r18, 0x00	; 0
   186c6:	30 e0       	ldi	r19, 0x00	; 0
   186c8:	42 e0       	ldi	r20, 0x02	; 2
   186ca:	50 e0       	ldi	r21, 0x00	; 0
   186cc:	6a e0       	ldi	r22, 0x0A	; 10
   186ce:	70 e0       	ldi	r23, 0x00	; 0
   186d0:	c7 01       	movw	r24, r14
   186d2:	d3 db       	rcall	.-2138   	; 0x17e7a <V2B_MSB>
   186d4:	fe 01       	movw	r30, r28
   186d6:	e4 5a       	subi	r30, 0xA4	; 164
   186d8:	ff 4f       	sbci	r31, 0xFF	; 255
   186da:	00 81       	ld	r16, Z
   186dc:	11 81       	ldd	r17, Z+1	; 0x01
   186de:	22 81       	ldd	r18, Z+2	; 0x02
   186e0:	33 81       	ldd	r19, Z+3	; 0x03
   186e2:	44 e0       	ldi	r20, 0x04	; 4
   186e4:	50 e0       	ldi	r21, 0x00	; 0
   186e6:	6c e0       	ldi	r22, 0x0C	; 12
   186e8:	70 e0       	ldi	r23, 0x00	; 0
   186ea:	c7 01       	movw	r24, r14
   186ec:	c6 db       	rcall	.-2164   	; 0x17e7a <V2B_MSB>
   186ee:	fe 01       	movw	r30, r28
   186f0:	e0 5a       	subi	r30, 0xA0	; 160
   186f2:	ff 4f       	sbci	r31, 0xFF	; 255
   186f4:	00 81       	ld	r16, Z
   186f6:	11 81       	ldd	r17, Z+1	; 0x01
   186f8:	22 81       	ldd	r18, Z+2	; 0x02
   186fa:	33 81       	ldd	r19, Z+3	; 0x03
   186fc:	44 e0       	ldi	r20, 0x04	; 4
   186fe:	50 e0       	ldi	r21, 0x00	; 0
   18700:	60 e1       	ldi	r22, 0x10	; 16
   18702:	70 e0       	ldi	r23, 0x00	; 0
   18704:	c7 01       	movw	r24, r14
   18706:	b9 db       	rcall	.-2190   	; 0x17e7a <V2B_MSB>
   18708:	d7 01       	movw	r26, r14
   1870a:	54 96       	adiw	r26, 0x14	; 20
   1870c:	fe 01       	movw	r30, r28
   1870e:	ec 59       	subi	r30, 0x9C	; 156
   18710:	ff 4f       	sbci	r31, 0xFF	; 255
   18712:	86 e0       	ldi	r24, 0x06	; 6
   18714:	01 90       	ld	r0, Z+
   18716:	0d 92       	st	X+, r0
   18718:	8a 95       	dec	r24
   1871a:	e1 f7       	brne	.-8      	; 0x18714 <lif_dir2str+0x78>
   1871c:	fe 01       	movw	r30, r28
   1871e:	e6 59       	subi	r30, 0x96	; 150
   18720:	ff 4f       	sbci	r31, 0xFF	; 255
   18722:	00 81       	ld	r16, Z
   18724:	11 81       	ldd	r17, Z+1	; 0x01
   18726:	20 e0       	ldi	r18, 0x00	; 0
   18728:	30 e0       	ldi	r19, 0x00	; 0
   1872a:	42 e0       	ldi	r20, 0x02	; 2
   1872c:	50 e0       	ldi	r21, 0x00	; 0
   1872e:	6a e1       	ldi	r22, 0x1A	; 26
   18730:	70 e0       	ldi	r23, 0x00	; 0
   18732:	c7 01       	movw	r24, r14
   18734:	a2 db       	rcall	.-2236   	; 0x17e7a <V2B_MSB>
   18736:	fe 01       	movw	r30, r28
   18738:	e4 59       	subi	r30, 0x94	; 148
   1873a:	ff 4f       	sbci	r31, 0xFF	; 255
   1873c:	00 81       	ld	r16, Z
   1873e:	11 81       	ldd	r17, Z+1	; 0x01
   18740:	20 e0       	ldi	r18, 0x00	; 0
   18742:	30 e0       	ldi	r19, 0x00	; 0
   18744:	42 e0       	ldi	r20, 0x02	; 2
   18746:	50 e0       	ldi	r21, 0x00	; 0
   18748:	6c e1       	ldi	r22, 0x1C	; 28
   1874a:	70 e0       	ldi	r23, 0x00	; 0
   1874c:	c7 01       	movw	r24, r14
   1874e:	a9 db       	rcall	.-2222   	; 0x17ea2 <V2B_LSB>
   18750:	c2 59       	subi	r28, 0x92	; 146
   18752:	df 4f       	sbci	r29, 0xFF	; 255
   18754:	08 81       	ld	r16, Y
   18756:	19 81       	ldd	r17, Y+1	; 0x01
   18758:	20 e0       	ldi	r18, 0x00	; 0
   1875a:	30 e0       	ldi	r19, 0x00	; 0
   1875c:	42 e0       	ldi	r20, 0x02	; 2
   1875e:	50 e0       	ldi	r21, 0x00	; 0
   18760:	6e e1       	ldi	r22, 0x1E	; 30
   18762:	70 e0       	ldi	r23, 0x00	; 0
   18764:	c7 01       	movw	r24, r14
   18766:	9d db       	rcall	.-2246   	; 0x17ea2 <V2B_LSB>
   18768:	cd b7       	in	r28, 0x3d	; 61
   1876a:	de b7       	in	r29, 0x3e	; 62
   1876c:	e6 e0       	ldi	r30, 0x06	; 6
   1876e:	0c 94 11 e4 	jmp	0x1c822	; 0x1c822 <__epilogue_restores__+0x18>

00018772 <lif_str2dir>:
   18772:	0f 93       	push	r16
   18774:	1f 93       	push	r17
   18776:	cf 93       	push	r28
   18778:	df 93       	push	r29
   1877a:	8c 01       	movw	r16, r24
   1877c:	eb 01       	movw	r28, r22
   1877e:	61 5b       	subi	r22, 0xB1	; 177
   18780:	7f 4f       	sbci	r23, 0xFF	; 255
   18782:	4a e0       	ldi	r20, 0x0A	; 10
   18784:	50 e0       	ldi	r21, 0x00	; 0
   18786:	cd dd       	rcall	.-1126   	; 0x18322 <lif_B2S>
   18788:	42 e0       	ldi	r20, 0x02	; 2
   1878a:	50 e0       	ldi	r21, 0x00	; 0
   1878c:	6a e0       	ldi	r22, 0x0A	; 10
   1878e:	70 e0       	ldi	r23, 0x00	; 0
   18790:	c8 01       	movw	r24, r16
   18792:	9c db       	rcall	.-2248   	; 0x17ecc <B2V_MSB>
   18794:	fe 01       	movw	r30, r28
   18796:	e6 5a       	subi	r30, 0xA6	; 166
   18798:	ff 4f       	sbci	r31, 0xFF	; 255
   1879a:	71 83       	std	Z+1, r23	; 0x01
   1879c:	60 83       	st	Z, r22
   1879e:	44 e0       	ldi	r20, 0x04	; 4
   187a0:	50 e0       	ldi	r21, 0x00	; 0
   187a2:	6c e0       	ldi	r22, 0x0C	; 12
   187a4:	70 e0       	ldi	r23, 0x00	; 0
   187a6:	c8 01       	movw	r24, r16
   187a8:	91 db       	rcall	.-2270   	; 0x17ecc <B2V_MSB>
   187aa:	fe 01       	movw	r30, r28
   187ac:	e4 5a       	subi	r30, 0xA4	; 164
   187ae:	ff 4f       	sbci	r31, 0xFF	; 255
   187b0:	60 83       	st	Z, r22
   187b2:	71 83       	std	Z+1, r23	; 0x01
   187b4:	82 83       	std	Z+2, r24	; 0x02
   187b6:	93 83       	std	Z+3, r25	; 0x03
   187b8:	44 e0       	ldi	r20, 0x04	; 4
   187ba:	50 e0       	ldi	r21, 0x00	; 0
   187bc:	60 e1       	ldi	r22, 0x10	; 16
   187be:	70 e0       	ldi	r23, 0x00	; 0
   187c0:	c8 01       	movw	r24, r16
   187c2:	84 db       	rcall	.-2296   	; 0x17ecc <B2V_MSB>
   187c4:	fe 01       	movw	r30, r28
   187c6:	e0 5a       	subi	r30, 0xA0	; 160
   187c8:	ff 4f       	sbci	r31, 0xFF	; 255
   187ca:	60 83       	st	Z, r22
   187cc:	71 83       	std	Z+1, r23	; 0x01
   187ce:	82 83       	std	Z+2, r24	; 0x02
   187d0:	93 83       	std	Z+3, r25	; 0x03
   187d2:	de 01       	movw	r26, r28
   187d4:	ac 59       	subi	r26, 0x9C	; 156
   187d6:	bf 4f       	sbci	r27, 0xFF	; 255
   187d8:	f8 01       	movw	r30, r16
   187da:	74 96       	adiw	r30, 0x14	; 20
   187dc:	86 e0       	ldi	r24, 0x06	; 6
   187de:	01 90       	ld	r0, Z+
   187e0:	0d 92       	st	X+, r0
   187e2:	8a 95       	dec	r24
   187e4:	e1 f7       	brne	.-8      	; 0x187de <lif_str2dir+0x6c>
   187e6:	42 e0       	ldi	r20, 0x02	; 2
   187e8:	50 e0       	ldi	r21, 0x00	; 0
   187ea:	6a e1       	ldi	r22, 0x1A	; 26
   187ec:	70 e0       	ldi	r23, 0x00	; 0
   187ee:	c8 01       	movw	r24, r16
   187f0:	6d db       	rcall	.-2342   	; 0x17ecc <B2V_MSB>
   187f2:	fe 01       	movw	r30, r28
   187f4:	e6 59       	subi	r30, 0x96	; 150
   187f6:	ff 4f       	sbci	r31, 0xFF	; 255
   187f8:	71 83       	std	Z+1, r23	; 0x01
   187fa:	60 83       	st	Z, r22
   187fc:	42 e0       	ldi	r20, 0x02	; 2
   187fe:	50 e0       	ldi	r21, 0x00	; 0
   18800:	6c e1       	ldi	r22, 0x1C	; 28
   18802:	70 e0       	ldi	r23, 0x00	; 0
   18804:	c8 01       	movw	r24, r16
   18806:	81 db       	rcall	.-2302   	; 0x17f0a <B2V_LSB>
   18808:	fe 01       	movw	r30, r28
   1880a:	e4 59       	subi	r30, 0x94	; 148
   1880c:	ff 4f       	sbci	r31, 0xFF	; 255
   1880e:	71 83       	std	Z+1, r23	; 0x01
   18810:	60 83       	st	Z, r22
   18812:	42 e0       	ldi	r20, 0x02	; 2
   18814:	50 e0       	ldi	r21, 0x00	; 0
   18816:	6e e1       	ldi	r22, 0x1E	; 30
   18818:	70 e0       	ldi	r23, 0x00	; 0
   1881a:	c8 01       	movw	r24, r16
   1881c:	76 db       	rcall	.-2324   	; 0x17f0a <B2V_LSB>
   1881e:	c2 59       	subi	r28, 0x92	; 146
   18820:	df 4f       	sbci	r29, 0xFF	; 255
   18822:	79 83       	std	Y+1, r23	; 0x01
   18824:	68 83       	st	Y, r22
   18826:	df 91       	pop	r29
   18828:	cf 91       	pop	r28
   1882a:	1f 91       	pop	r17
   1882c:	0f 91       	pop	r16
   1882e:	08 95       	ret

00018830 <lif_BIN2BCD>:
   18830:	6a e0       	ldi	r22, 0x0A	; 10
   18832:	0e 94 49 e3 	call	0x1c692	; 0x1c692 <__udivmodqi4>
   18836:	82 95       	swap	r24
   18838:	80 7f       	andi	r24, 0xF0	; 240
   1883a:	89 2b       	or	r24, r25
   1883c:	08 95       	ret

0001883e <lif_BCD2BIN>:
   1883e:	28 2f       	mov	r18, r24
   18840:	22 95       	swap	r18
   18842:	2f 70       	andi	r18, 0x0F	; 15
   18844:	8f 70       	andi	r24, 0x0F	; 15
   18846:	90 e0       	ldi	r25, 0x00	; 0
   18848:	3a e0       	ldi	r19, 0x0A	; 10
   1884a:	23 9f       	mul	r18, r19
   1884c:	80 0d       	add	r24, r0
   1884e:	91 1d       	adc	r25, r1
   18850:	11 24       	eor	r1, r1
   18852:	08 95       	ret

00018854 <lif_time2lifbcd>:
   18854:	aa e1       	ldi	r26, 0x1A	; 26
   18856:	b0 e0       	ldi	r27, 0x00	; 0
   18858:	e0 e3       	ldi	r30, 0x30	; 48
   1885a:	f4 ec       	ldi	r31, 0xC4	; 196
   1885c:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
   18860:	8b 01       	movw	r16, r22
   18862:	9c 01       	movw	r18, r24
   18864:	6f 8b       	std	Y+23, r22	; 0x17
   18866:	78 8f       	std	Y+24, r23	; 0x18
   18868:	89 8f       	std	Y+25, r24	; 0x19
   1886a:	9a 8f       	std	Y+26, r25	; 0x1a
   1886c:	67 2b       	or	r22, r23
   1886e:	68 2b       	or	r22, r24
   18870:	69 2b       	or	r22, r25
   18872:	41 f4       	brne	.+16     	; 0x18884 <lif_time2lifbcd+0x30>
   18874:	fa 01       	movw	r30, r20
   18876:	ca 01       	movw	r24, r20
   18878:	06 96       	adiw	r24, 0x06	; 6
   1887a:	11 92       	st	Z+, r1
   1887c:	e8 17       	cp	r30, r24
   1887e:	f9 07       	cpc	r31, r25
   18880:	e1 f7       	brne	.-8      	; 0x1887a <lif_time2lifbcd+0x26>
   18882:	26 c0       	rjmp	.+76     	; 0x188d0 <lif_time2lifbcd+0x7c>
   18884:	8a 01       	movw	r16, r20
   18886:	be 01       	movw	r22, r28
   18888:	6f 5f       	subi	r22, 0xFF	; 255
   1888a:	7f 4f       	sbci	r23, 0xFF	; 255
   1888c:	ce 01       	movw	r24, r28
   1888e:	47 96       	adiw	r24, 0x17	; 23
   18890:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <gmtime_r>
   18894:	8b 85       	ldd	r24, Y+11	; 0x0b
   18896:	9c 85       	ldd	r25, Y+12	; 0x0c
   18898:	64 e6       	ldi	r22, 0x64	; 100
   1889a:	70 e0       	ldi	r23, 0x00	; 0
   1889c:	0e 94 69 e3 	call	0x1c6d2	; 0x1c6d2 <__divmodhi4>
   188a0:	c7 df       	rcall	.-114    	; 0x18830 <lif_BIN2BCD>
   188a2:	f8 01       	movw	r30, r16
   188a4:	80 83       	st	Z, r24
   188a6:	89 85       	ldd	r24, Y+9	; 0x09
   188a8:	8f 5f       	subi	r24, 0xFF	; 255
   188aa:	c2 df       	rcall	.-124    	; 0x18830 <lif_BIN2BCD>
   188ac:	f8 01       	movw	r30, r16
   188ae:	81 83       	std	Z+1, r24	; 0x01
   188b0:	8f 81       	ldd	r24, Y+7	; 0x07
   188b2:	be df       	rcall	.-132    	; 0x18830 <lif_BIN2BCD>
   188b4:	f8 01       	movw	r30, r16
   188b6:	82 83       	std	Z+2, r24	; 0x02
   188b8:	8d 81       	ldd	r24, Y+5	; 0x05
   188ba:	ba df       	rcall	.-140    	; 0x18830 <lif_BIN2BCD>
   188bc:	f8 01       	movw	r30, r16
   188be:	83 83       	std	Z+3, r24	; 0x03
   188c0:	8b 81       	ldd	r24, Y+3	; 0x03
   188c2:	b6 df       	rcall	.-148    	; 0x18830 <lif_BIN2BCD>
   188c4:	f8 01       	movw	r30, r16
   188c6:	84 83       	std	Z+4, r24	; 0x04
   188c8:	89 81       	ldd	r24, Y+1	; 0x01
   188ca:	b2 df       	rcall	.-156    	; 0x18830 <lif_BIN2BCD>
   188cc:	f8 01       	movw	r30, r16
   188ce:	85 83       	std	Z+5, r24	; 0x05
   188d0:	6a 96       	adiw	r28, 0x1a	; 26
   188d2:	e4 e0       	ldi	r30, 0x04	; 4
   188d4:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

000188d8 <lif_lifbcd2time>:
   188d8:	a6 e1       	ldi	r26, 0x16	; 22
   188da:	b0 e0       	ldi	r27, 0x00	; 0
   188dc:	e2 e7       	ldi	r30, 0x72	; 114
   188de:	f4 ec       	ldi	r31, 0xC4	; 196
   188e0:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
   188e4:	8c 01       	movw	r16, r24
   188e6:	7c 01       	movw	r14, r24
   188e8:	5c 01       	movw	r10, r24
   188ea:	26 e0       	ldi	r18, 0x06	; 6
   188ec:	a2 0e       	add	r10, r18
   188ee:	b1 1c       	adc	r11, r1
   188f0:	cc 24       	eor	r12, r12
   188f2:	c3 94       	inc	r12
   188f4:	d1 2c       	mov	r13, r1
   188f6:	f7 01       	movw	r30, r14
   188f8:	81 91       	ld	r24, Z+
   188fa:	7f 01       	movw	r14, r30
   188fc:	a0 df       	rcall	.-192    	; 0x1883e <lif_BCD2BIN>
   188fe:	89 2b       	or	r24, r25
   18900:	11 f0       	breq	.+4      	; 0x18906 <lif_lifbcd2time+0x2e>
   18902:	c1 2c       	mov	r12, r1
   18904:	d1 2c       	mov	r13, r1
   18906:	ea 14       	cp	r14, r10
   18908:	fb 04       	cpc	r15, r11
   1890a:	a9 f7       	brne	.-22     	; 0x188f6 <lif_lifbcd2time+0x1e>
   1890c:	c1 14       	cp	r12, r1
   1890e:	d1 04       	cpc	r13, r1
   18910:	61 f5       	brne	.+88     	; 0x1896a <lif_lifbcd2time+0x92>
   18912:	f8 01       	movw	r30, r16
   18914:	80 81       	ld	r24, Z
   18916:	93 df       	rcall	.-218    	; 0x1883e <lif_BCD2BIN>
   18918:	7c 01       	movw	r14, r24
   1891a:	f8 01       	movw	r30, r16
   1891c:	81 81       	ldd	r24, Z+1	; 0x01
   1891e:	8f df       	rcall	.-226    	; 0x1883e <lif_BCD2BIN>
   18920:	01 97       	sbiw	r24, 0x01	; 1
   18922:	f6 e4       	ldi	r31, 0x46	; 70
   18924:	ef 16       	cp	r14, r31
   18926:	f1 04       	cpc	r15, r1
   18928:	1c f4       	brge	.+6      	; 0x18930 <lif_lifbcd2time+0x58>
   1892a:	24 e6       	ldi	r18, 0x64	; 100
   1892c:	e2 0e       	add	r14, r18
   1892e:	f1 1c       	adc	r15, r1
   18930:	fc 86       	std	Y+12, r15	; 0x0c
   18932:	eb 86       	std	Y+11, r14	; 0x0b
   18934:	9a 87       	std	Y+10, r25	; 0x0a
   18936:	89 87       	std	Y+9, r24	; 0x09
   18938:	f8 01       	movw	r30, r16
   1893a:	82 81       	ldd	r24, Z+2	; 0x02
   1893c:	80 df       	rcall	.-256    	; 0x1883e <lif_BCD2BIN>
   1893e:	98 87       	std	Y+8, r25	; 0x08
   18940:	8f 83       	std	Y+7, r24	; 0x07
   18942:	f8 01       	movw	r30, r16
   18944:	83 81       	ldd	r24, Z+3	; 0x03
   18946:	7b df       	rcall	.-266    	; 0x1883e <lif_BCD2BIN>
   18948:	9e 83       	std	Y+6, r25	; 0x06
   1894a:	8d 83       	std	Y+5, r24	; 0x05
   1894c:	f8 01       	movw	r30, r16
   1894e:	84 81       	ldd	r24, Z+4	; 0x04
   18950:	76 df       	rcall	.-276    	; 0x1883e <lif_BCD2BIN>
   18952:	9c 83       	std	Y+4, r25	; 0x04
   18954:	8b 83       	std	Y+3, r24	; 0x03
   18956:	f8 01       	movw	r30, r16
   18958:	85 81       	ldd	r24, Z+5	; 0x05
   1895a:	71 df       	rcall	.-286    	; 0x1883e <lif_BCD2BIN>
   1895c:	9a 83       	std	Y+2, r25	; 0x02
   1895e:	89 83       	std	Y+1, r24	; 0x01
   18960:	ce 01       	movw	r24, r28
   18962:	01 96       	adiw	r24, 0x01	; 1
   18964:	0e 94 bd 3b 	call	0x777a	; 0x777a <timegm>
   18968:	03 c0       	rjmp	.+6      	; 0x18970 <lif_lifbcd2time+0x98>
   1896a:	60 e0       	ldi	r22, 0x00	; 0
   1896c:	70 e0       	ldi	r23, 0x00	; 0
   1896e:	cb 01       	movw	r24, r22
   18970:	66 96       	adiw	r28, 0x16	; 22
   18972:	ea e0       	ldi	r30, 0x0A	; 10
   18974:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

00018978 <lif_ctime_gmt>:
   18978:	a6 e1       	ldi	r26, 0x16	; 22
   1897a:	b0 e0       	ldi	r27, 0x00	; 0
   1897c:	e2 ec       	ldi	r30, 0xC2	; 194
   1897e:	f4 ec       	ldi	r31, 0xC4	; 196
   18980:	0c 94 f7 e3 	jmp	0x1c7ee	; 0x1c7ee <__prologue_saves__+0x1c>
   18984:	20 e2       	ldi	r18, 0x20	; 32
   18986:	e7 ed       	ldi	r30, 0xD7	; 215
   18988:	f9 e1       	ldi	r31, 0x19	; 25
   1898a:	df 01       	movw	r26, r30
   1898c:	1d 92       	st	X+, r1
   1898e:	2a 95       	dec	r18
   18990:	e9 f7       	brne	.-6      	; 0x1898c <lif_ctime_gmt+0x14>
   18992:	be 01       	movw	r22, r28
   18994:	6f 5f       	subi	r22, 0xFF	; 255
   18996:	7f 4f       	sbci	r23, 0xFF	; 255
   18998:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <gmtime_r>
   1899c:	67 ed       	ldi	r22, 0xD7	; 215
   1899e:	79 e1       	ldi	r23, 0x19	; 25
   189a0:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <asctime_r>
   189a4:	8c 01       	movw	r16, r24
   189a6:	0e 94 75 33 	call	0x66ea	; 0x66ea <trim_tail>
   189aa:	c8 01       	movw	r24, r16
   189ac:	66 96       	adiw	r28, 0x16	; 22
   189ae:	e4 e0       	ldi	r30, 0x04	; 4
   189b0:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

000189b4 <lif_lifbcd2timestr>:
   189b4:	a4 e0       	ldi	r26, 0x04	; 4
   189b6:	b0 e0       	ldi	r27, 0x00	; 0
   189b8:	e0 ee       	ldi	r30, 0xE0	; 224
   189ba:	f4 ec       	ldi	r31, 0xC4	; 196
   189bc:	0c 94 f9 e3 	jmp	0x1c7f2	; 0x1c7f2 <__prologue_saves__+0x20>
   189c0:	20 e2       	ldi	r18, 0x20	; 32
   189c2:	e7 eb       	ldi	r30, 0xB7	; 183
   189c4:	f9 e1       	ldi	r31, 0x19	; 25
   189c6:	df 01       	movw	r26, r30
   189c8:	1d 92       	st	X+, r1
   189ca:	2a 95       	dec	r18
   189cc:	e9 f7       	brne	.-6      	; 0x189c8 <lif_lifbcd2timestr+0x14>
   189ce:	84 df       	rcall	.-248    	; 0x188d8 <lif_lifbcd2time>
   189d0:	69 83       	std	Y+1, r22	; 0x01
   189d2:	7a 83       	std	Y+2, r23	; 0x02
   189d4:	8b 83       	std	Y+3, r24	; 0x03
   189d6:	9c 83       	std	Y+4, r25	; 0x04
   189d8:	67 2b       	or	r22, r23
   189da:	68 2b       	or	r22, r24
   189dc:	69 2b       	or	r22, r25
   189de:	29 f0       	breq	.+10     	; 0x189ea <lif_lifbcd2timestr+0x36>
   189e0:	ce 01       	movw	r24, r28
   189e2:	01 96       	adiw	r24, 0x01	; 1
   189e4:	c9 df       	rcall	.-110    	; 0x18978 <lif_ctime_gmt>
   189e6:	bc 01       	movw	r22, r24
   189e8:	02 c0       	rjmp	.+4      	; 0x189ee <lif_lifbcd2timestr+0x3a>
   189ea:	60 e1       	ldi	r22, 0x10	; 16
   189ec:	76 e1       	ldi	r23, 0x16	; 22
   189ee:	87 eb       	ldi	r24, 0xB7	; 183
   189f0:	99 e1       	ldi	r25, 0x19	; 25
   189f2:	0e 94 97 32 	call	0x652e	; 0x652e <strcpy>
   189f6:	87 eb       	ldi	r24, 0xB7	; 183
   189f8:	99 e1       	ldi	r25, 0x19	; 25
   189fa:	24 96       	adiw	r28, 0x04	; 4
   189fc:	e2 e0       	ldi	r30, 0x02	; 2
   189fe:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00018a02 <lif_image_clear>:
   18a02:	20 e7       	ldi	r18, 0x70	; 112
   18a04:	fc 01       	movw	r30, r24
   18a06:	11 92       	st	Z+, r1
   18a08:	2a 95       	dec	r18
   18a0a:	e9 f7       	brne	.-6      	; 0x18a06 <lif_image_clear+0x4>
   18a0c:	08 95       	ret

00018a0e <lif_dir_clear>:
   18a0e:	81 5b       	subi	r24, 0xB1	; 177
   18a10:	9f 4f       	sbci	r25, 0xFF	; 255
   18a12:	21 e2       	ldi	r18, 0x21	; 33
   18a14:	fc 01       	movw	r30, r24
   18a16:	11 92       	st	Z+, r1
   18a18:	2a 95       	dec	r18
   18a1a:	e9 f7       	brne	.-6      	; 0x18a16 <lif_dir_clear+0x8>
   18a1c:	08 95       	ret

00018a1e <lif_vol_clear>:
   18a1e:	84 96       	adiw	r24, 0x24	; 36
   18a20:	2b e2       	ldi	r18, 0x2B	; 43
   18a22:	fc 01       	movw	r30, r24
   18a24:	11 92       	st	Z+, r1
   18a26:	2a 95       	dec	r18
   18a28:	e9 f7       	brne	.-6      	; 0x18a24 <lif_vol_clear+0x6>
   18a2a:	08 95       	ret

00018a2c <lif_dump_vol>:
   18a2c:	cf 93       	push	r28
   18a2e:	df 93       	push	r29
   18a30:	ad b7       	in	r26, 0x3d	; 61
   18a32:	be b7       	in	r27, 0x3e	; 62
   18a34:	17 97       	sbiw	r26, 0x07	; 7
   18a36:	0f b6       	in	r0, 0x3f	; 63
   18a38:	f8 94       	cli
   18a3a:	be bf       	out	0x3e, r27	; 62
   18a3c:	0f be       	out	0x3f, r0	; 63
   18a3e:	ad bf       	out	0x3d, r26	; 61
   18a40:	ec 01       	movw	r28, r24
   18a42:	ed b7       	in	r30, 0x3d	; 61
   18a44:	fe b7       	in	r31, 0x3e	; 62
   18a46:	75 83       	std	Z+5, r23	; 0x05
   18a48:	64 83       	std	Z+4, r22	; 0x04
   18a4a:	8c e2       	ldi	r24, 0x2C	; 44
   18a4c:	90 e4       	ldi	r25, 0x40	; 64
   18a4e:	a0 e0       	ldi	r26, 0x00	; 0
   18a50:	81 83       	std	Z+1, r24	; 0x01
   18a52:	92 83       	std	Z+2, r25	; 0x02
   18a54:	a3 83       	std	Z+3, r26	; 0x03
   18a56:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18a5a:	88 81       	ld	r24, Y
   18a5c:	99 81       	ldd	r25, Y+1	; 0x01
   18a5e:	ed b7       	in	r30, 0x3d	; 61
   18a60:	fe b7       	in	r31, 0x3e	; 62
   18a62:	95 83       	std	Z+5, r25	; 0x05
   18a64:	84 83       	std	Z+4, r24	; 0x04
   18a66:	82 e1       	ldi	r24, 0x12	; 18
   18a68:	90 e4       	ldi	r25, 0x40	; 64
   18a6a:	a0 e0       	ldi	r26, 0x00	; 0
   18a6c:	81 83       	std	Z+1, r24	; 0x01
   18a6e:	92 83       	std	Z+2, r25	; 0x02
   18a70:	a3 83       	std	Z+3, r26	; 0x03
   18a72:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18a76:	8c 81       	ldd	r24, Y+4	; 0x04
   18a78:	9d 81       	ldd	r25, Y+5	; 0x05
   18a7a:	ae 81       	ldd	r26, Y+6	; 0x06
   18a7c:	bf 81       	ldd	r27, Y+7	; 0x07
   18a7e:	ed b7       	in	r30, 0x3d	; 61
   18a80:	fe b7       	in	r31, 0x3e	; 62
   18a82:	84 83       	std	Z+4, r24	; 0x04
   18a84:	95 83       	std	Z+5, r25	; 0x05
   18a86:	a6 83       	std	Z+6, r26	; 0x06
   18a88:	b7 83       	std	Z+7, r27	; 0x07
   18a8a:	85 ef       	ldi	r24, 0xF5	; 245
   18a8c:	9f e3       	ldi	r25, 0x3F	; 63
   18a8e:	a0 e0       	ldi	r26, 0x00	; 0
   18a90:	81 83       	std	Z+1, r24	; 0x01
   18a92:	92 83       	std	Z+2, r25	; 0x02
   18a94:	a3 83       	std	Z+3, r26	; 0x03
   18a96:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18a9a:	88 85       	ldd	r24, Y+8	; 0x08
   18a9c:	99 85       	ldd	r25, Y+9	; 0x09
   18a9e:	aa 85       	ldd	r26, Y+10	; 0x0a
   18aa0:	bb 85       	ldd	r27, Y+11	; 0x0b
   18aa2:	ed b7       	in	r30, 0x3d	; 61
   18aa4:	fe b7       	in	r31, 0x3e	; 62
   18aa6:	84 83       	std	Z+4, r24	; 0x04
   18aa8:	95 83       	std	Z+5, r25	; 0x05
   18aaa:	a6 83       	std	Z+6, r26	; 0x06
   18aac:	b7 83       	std	Z+7, r27	; 0x07
   18aae:	88 ed       	ldi	r24, 0xD8	; 216
   18ab0:	9f e3       	ldi	r25, 0x3F	; 63
   18ab2:	a0 e0       	ldi	r26, 0x00	; 0
   18ab4:	81 83       	std	Z+1, r24	; 0x01
   18ab6:	92 83       	std	Z+2, r25	; 0x02
   18ab8:	a3 83       	std	Z+3, r26	; 0x03
   18aba:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18abe:	8c 85       	ldd	r24, Y+12	; 0x0c
   18ac0:	9d 85       	ldd	r25, Y+13	; 0x0d
   18ac2:	ae 85       	ldd	r26, Y+14	; 0x0e
   18ac4:	bf 85       	ldd	r27, Y+15	; 0x0f
   18ac6:	ed b7       	in	r30, 0x3d	; 61
   18ac8:	fe b7       	in	r31, 0x3e	; 62
   18aca:	84 83       	std	Z+4, r24	; 0x04
   18acc:	95 83       	std	Z+5, r25	; 0x05
   18ace:	a6 83       	std	Z+6, r26	; 0x06
   18ad0:	b7 83       	std	Z+7, r27	; 0x07
   18ad2:	8b eb       	ldi	r24, 0xBB	; 187
   18ad4:	9f e3       	ldi	r25, 0x3F	; 63
   18ad6:	a0 e0       	ldi	r26, 0x00	; 0
   18ad8:	81 83       	std	Z+1, r24	; 0x01
   18ada:	92 83       	std	Z+2, r25	; 0x02
   18adc:	a3 83       	std	Z+3, r26	; 0x03
   18ade:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18ae2:	88 89       	ldd	r24, Y+16	; 0x10
   18ae4:	99 89       	ldd	r25, Y+17	; 0x11
   18ae6:	aa 89       	ldd	r26, Y+18	; 0x12
   18ae8:	bb 89       	ldd	r27, Y+19	; 0x13
   18aea:	ed b7       	in	r30, 0x3d	; 61
   18aec:	fe b7       	in	r31, 0x3e	; 62
   18aee:	84 83       	std	Z+4, r24	; 0x04
   18af0:	95 83       	std	Z+5, r25	; 0x05
   18af2:	a6 83       	std	Z+6, r26	; 0x06
   18af4:	b7 83       	std	Z+7, r27	; 0x07
   18af6:	8e e9       	ldi	r24, 0x9E	; 158
   18af8:	9f e3       	ldi	r25, 0x3F	; 63
   18afa:	a0 e0       	ldi	r26, 0x00	; 0
   18afc:	81 83       	std	Z+1, r24	; 0x01
   18afe:	92 83       	std	Z+2, r25	; 0x02
   18b00:	a3 83       	std	Z+3, r26	; 0x03
   18b02:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18b06:	8c 89       	ldd	r24, Y+20	; 0x14
   18b08:	9d 89       	ldd	r25, Y+21	; 0x15
   18b0a:	ae 89       	ldd	r26, Y+22	; 0x16
   18b0c:	bf 89       	ldd	r27, Y+23	; 0x17
   18b0e:	ed b7       	in	r30, 0x3d	; 61
   18b10:	fe b7       	in	r31, 0x3e	; 62
   18b12:	84 83       	std	Z+4, r24	; 0x04
   18b14:	95 83       	std	Z+5, r25	; 0x05
   18b16:	a6 83       	std	Z+6, r26	; 0x06
   18b18:	b7 83       	std	Z+7, r27	; 0x07
   18b1a:	81 e8       	ldi	r24, 0x81	; 129
   18b1c:	9f e3       	ldi	r25, 0x3F	; 63
   18b1e:	a0 e0       	ldi	r26, 0x00	; 0
   18b20:	81 83       	std	Z+1, r24	; 0x01
   18b22:	92 83       	std	Z+2, r25	; 0x02
   18b24:	a3 83       	std	Z+3, r26	; 0x03
   18b26:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18b2a:	88 8d       	ldd	r24, Y+24	; 0x18
   18b2c:	99 8d       	ldd	r25, Y+25	; 0x19
   18b2e:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18b30:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18b32:	ed b7       	in	r30, 0x3d	; 61
   18b34:	fe b7       	in	r31, 0x3e	; 62
   18b36:	84 83       	std	Z+4, r24	; 0x04
   18b38:	95 83       	std	Z+5, r25	; 0x05
   18b3a:	a6 83       	std	Z+6, r26	; 0x06
   18b3c:	b7 83       	std	Z+7, r27	; 0x07
   18b3e:	84 e6       	ldi	r24, 0x64	; 100
   18b40:	9f e3       	ldi	r25, 0x3F	; 63
   18b42:	a0 e0       	ldi	r26, 0x00	; 0
   18b44:	81 83       	std	Z+1, r24	; 0x01
   18b46:	92 83       	std	Z+2, r25	; 0x02
   18b48:	a3 83       	std	Z+3, r26	; 0x03
   18b4a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18b4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18b50:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18b52:	09 2e       	mov	r0, r25
   18b54:	00 0c       	add	r0, r0
   18b56:	aa 0b       	sbc	r26, r26
   18b58:	bb 0b       	sbc	r27, r27
   18b5a:	ed b7       	in	r30, 0x3d	; 61
   18b5c:	fe b7       	in	r31, 0x3e	; 62
   18b5e:	84 83       	std	Z+4, r24	; 0x04
   18b60:	95 83       	std	Z+5, r25	; 0x05
   18b62:	a6 83       	std	Z+6, r26	; 0x06
   18b64:	b7 83       	std	Z+7, r27	; 0x07
   18b66:	87 e4       	ldi	r24, 0x47	; 71
   18b68:	9f e3       	ldi	r25, 0x3F	; 63
   18b6a:	a0 e0       	ldi	r26, 0x00	; 0
   18b6c:	81 83       	std	Z+1, r24	; 0x01
   18b6e:	92 83       	std	Z+2, r25	; 0x02
   18b70:	a3 83       	std	Z+3, r26	; 0x03
   18b72:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18b76:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18b78:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18b7a:	09 2e       	mov	r0, r25
   18b7c:	00 0c       	add	r0, r0
   18b7e:	aa 0b       	sbc	r26, r26
   18b80:	bb 0b       	sbc	r27, r27
   18b82:	ed b7       	in	r30, 0x3d	; 61
   18b84:	fe b7       	in	r31, 0x3e	; 62
   18b86:	84 83       	std	Z+4, r24	; 0x04
   18b88:	95 83       	std	Z+5, r25	; 0x05
   18b8a:	a6 83       	std	Z+6, r26	; 0x06
   18b8c:	b7 83       	std	Z+7, r27	; 0x07
   18b8e:	8a e2       	ldi	r24, 0x2A	; 42
   18b90:	9f e3       	ldi	r25, 0x3F	; 63
   18b92:	a0 e0       	ldi	r26, 0x00	; 0
   18b94:	81 83       	std	Z+1, r24	; 0x01
   18b96:	92 83       	std	Z+2, r25	; 0x02
   18b98:	a3 83       	std	Z+3, r26	; 0x03
   18b9a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18b9e:	ce 01       	movw	r24, r28
   18ba0:	86 96       	adiw	r24, 0x26	; 38
   18ba2:	ed b7       	in	r30, 0x3d	; 61
   18ba4:	fe b7       	in	r31, 0x3e	; 62
   18ba6:	95 83       	std	Z+5, r25	; 0x05
   18ba8:	84 83       	std	Z+4, r24	; 0x04
   18baa:	80 e1       	ldi	r24, 0x10	; 16
   18bac:	9f e3       	ldi	r25, 0x3F	; 63
   18bae:	a0 e0       	ldi	r26, 0x00	; 0
   18bb0:	81 83       	std	Z+1, r24	; 0x01
   18bb2:	92 83       	std	Z+2, r25	; 0x02
   18bb4:	a3 83       	std	Z+3, r26	; 0x03
   18bb6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18bba:	8c a1       	ldd	r24, Y+36	; 0x24
   18bbc:	9d a1       	ldd	r25, Y+37	; 0x25
   18bbe:	ed b7       	in	r30, 0x3d	; 61
   18bc0:	fe b7       	in	r31, 0x3e	; 62
   18bc2:	95 83       	std	Z+5, r25	; 0x05
   18bc4:	84 83       	std	Z+4, r24	; 0x04
   18bc6:	84 ef       	ldi	r24, 0xF4	; 244
   18bc8:	9e e3       	ldi	r25, 0x3E	; 62
   18bca:	a0 e0       	ldi	r26, 0x00	; 0
   18bcc:	81 83       	std	Z+1, r24	; 0x01
   18bce:	92 83       	std	Z+2, r25	; 0x02
   18bd0:	a3 83       	std	Z+3, r26	; 0x03
   18bd2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18bd6:	8d a5       	ldd	r24, Y+45	; 0x2d
   18bd8:	9e a5       	ldd	r25, Y+46	; 0x2e
   18bda:	af a5       	ldd	r26, Y+47	; 0x2f
   18bdc:	b8 a9       	ldd	r27, Y+48	; 0x30
   18bde:	ed b7       	in	r30, 0x3d	; 61
   18be0:	fe b7       	in	r31, 0x3e	; 62
   18be2:	84 83       	std	Z+4, r24	; 0x04
   18be4:	95 83       	std	Z+5, r25	; 0x05
   18be6:	a6 83       	std	Z+6, r26	; 0x06
   18be8:	b7 83       	std	Z+7, r27	; 0x07
   18bea:	87 ed       	ldi	r24, 0xD7	; 215
   18bec:	9e e3       	ldi	r25, 0x3E	; 62
   18bee:	a0 e0       	ldi	r26, 0x00	; 0
   18bf0:	81 83       	std	Z+1, r24	; 0x01
   18bf2:	92 83       	std	Z+2, r25	; 0x02
   18bf4:	a3 83       	std	Z+3, r26	; 0x03
   18bf6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18bfa:	8d a9       	ldd	r24, Y+53	; 0x35
   18bfc:	9e a9       	ldd	r25, Y+54	; 0x36
   18bfe:	af a9       	ldd	r26, Y+55	; 0x37
   18c00:	b8 ad       	ldd	r27, Y+56	; 0x38
   18c02:	ed b7       	in	r30, 0x3d	; 61
   18c04:	fe b7       	in	r31, 0x3e	; 62
   18c06:	84 83       	std	Z+4, r24	; 0x04
   18c08:	95 83       	std	Z+5, r25	; 0x05
   18c0a:	a6 83       	std	Z+6, r26	; 0x06
   18c0c:	b7 83       	std	Z+7, r27	; 0x07
   18c0e:	8a eb       	ldi	r24, 0xBA	; 186
   18c10:	9e e3       	ldi	r25, 0x3E	; 62
   18c12:	a0 e0       	ldi	r26, 0x00	; 0
   18c14:	81 83       	std	Z+1, r24	; 0x01
   18c16:	92 83       	std	Z+2, r25	; 0x02
   18c18:	a3 83       	std	Z+3, r26	; 0x03
   18c1a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18c1e:	89 a9       	ldd	r24, Y+49	; 0x31
   18c20:	9a a9       	ldd	r25, Y+50	; 0x32
   18c22:	ed b7       	in	r30, 0x3d	; 61
   18c24:	fe b7       	in	r31, 0x3e	; 62
   18c26:	95 83       	std	Z+5, r25	; 0x05
   18c28:	84 83       	std	Z+4, r24	; 0x04
   18c2a:	8e e9       	ldi	r24, 0x9E	; 158
   18c2c:	9e e3       	ldi	r25, 0x3E	; 62
   18c2e:	a0 e0       	ldi	r26, 0x00	; 0
   18c30:	81 83       	std	Z+1, r24	; 0x01
   18c32:	92 83       	std	Z+2, r25	; 0x02
   18c34:	a3 83       	std	Z+3, r26	; 0x03
   18c36:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18c3a:	89 ad       	ldd	r24, Y+57	; 0x39
   18c3c:	9a ad       	ldd	r25, Y+58	; 0x3a
   18c3e:	ed b7       	in	r30, 0x3d	; 61
   18c40:	fe b7       	in	r31, 0x3e	; 62
   18c42:	95 83       	std	Z+5, r25	; 0x05
   18c44:	84 83       	std	Z+4, r24	; 0x04
   18c46:	82 e8       	ldi	r24, 0x82	; 130
   18c48:	9e e3       	ldi	r25, 0x3E	; 62
   18c4a:	a0 e0       	ldi	r26, 0x00	; 0
   18c4c:	81 83       	std	Z+1, r24	; 0x01
   18c4e:	92 83       	std	Z+2, r25	; 0x02
   18c50:	a3 83       	std	Z+3, r26	; 0x03
   18c52:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18c56:	ce 01       	movw	r24, r28
   18c58:	87 5b       	subi	r24, 0xB7	; 183
   18c5a:	9f 4f       	sbci	r25, 0xFF	; 255
   18c5c:	ab de       	rcall	.-682    	; 0x189b4 <lif_lifbcd2timestr>
   18c5e:	ed b7       	in	r30, 0x3d	; 61
   18c60:	fe b7       	in	r31, 0x3e	; 62
   18c62:	95 83       	std	Z+5, r25	; 0x05
   18c64:	84 83       	std	Z+4, r24	; 0x04
   18c66:	88 e6       	ldi	r24, 0x68	; 104
   18c68:	9e e3       	ldi	r25, 0x3E	; 62
   18c6a:	a0 e0       	ldi	r26, 0x00	; 0
   18c6c:	81 83       	std	Z+1, r24	; 0x01
   18c6e:	92 83       	std	Z+2, r25	; 0x02
   18c70:	a3 83       	std	Z+3, r26	; 0x03
   18c72:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18c76:	ce 01       	movw	r24, r28
   18c78:	81 5b       	subi	r24, 0xB1	; 177
   18c7a:	9f 4f       	sbci	r25, 0xFF	; 255
   18c7c:	ed b7       	in	r30, 0x3d	; 61
   18c7e:	fe b7       	in	r31, 0x3e	; 62
   18c80:	95 83       	std	Z+5, r25	; 0x05
   18c82:	84 83       	std	Z+4, r24	; 0x04
   18c84:	8e e4       	ldi	r24, 0x4E	; 78
   18c86:	9e e3       	ldi	r25, 0x3E	; 62
   18c88:	a0 e0       	ldi	r26, 0x00	; 0
   18c8a:	81 83       	std	Z+1, r24	; 0x01
   18c8c:	92 83       	std	Z+2, r25	; 0x02
   18c8e:	a3 83       	std	Z+3, r26	; 0x03
   18c90:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18c94:	fe 01       	movw	r30, r28
   18c96:	e6 5a       	subi	r30, 0xA6	; 166
   18c98:	ff 4f       	sbci	r31, 0xFF	; 255
   18c9a:	80 81       	ld	r24, Z
   18c9c:	91 81       	ldd	r25, Z+1	; 0x01
   18c9e:	ed b7       	in	r30, 0x3d	; 61
   18ca0:	fe b7       	in	r31, 0x3e	; 62
   18ca2:	95 83       	std	Z+5, r25	; 0x05
   18ca4:	84 83       	std	Z+4, r24	; 0x04
   18ca6:	82 e3       	ldi	r24, 0x32	; 50
   18ca8:	9e e3       	ldi	r25, 0x3E	; 62
   18caa:	a0 e0       	ldi	r26, 0x00	; 0
   18cac:	81 83       	std	Z+1, r24	; 0x01
   18cae:	92 83       	std	Z+2, r25	; 0x02
   18cb0:	a3 83       	std	Z+3, r26	; 0x03
   18cb2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18cb6:	fe 01       	movw	r30, r28
   18cb8:	e6 59       	subi	r30, 0x96	; 150
   18cba:	ff 4f       	sbci	r31, 0xFF	; 255
   18cbc:	80 81       	ld	r24, Z
   18cbe:	91 81       	ldd	r25, Z+1	; 0x01
   18cc0:	ed b7       	in	r30, 0x3d	; 61
   18cc2:	fe b7       	in	r31, 0x3e	; 62
   18cc4:	95 83       	std	Z+5, r25	; 0x05
   18cc6:	84 83       	std	Z+4, r24	; 0x04
   18cc8:	86 e1       	ldi	r24, 0x16	; 22
   18cca:	9e e3       	ldi	r25, 0x3E	; 62
   18ccc:	a0 e0       	ldi	r26, 0x00	; 0
   18cce:	81 83       	std	Z+1, r24	; 0x01
   18cd0:	92 83       	std	Z+2, r25	; 0x02
   18cd2:	a3 83       	std	Z+3, r26	; 0x03
   18cd4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18cd8:	fe 01       	movw	r30, r28
   18cda:	e4 5a       	subi	r30, 0xA4	; 164
   18cdc:	ff 4f       	sbci	r31, 0xFF	; 255
   18cde:	80 81       	ld	r24, Z
   18ce0:	91 81       	ldd	r25, Z+1	; 0x01
   18ce2:	a2 81       	ldd	r26, Z+2	; 0x02
   18ce4:	b3 81       	ldd	r27, Z+3	; 0x03
   18ce6:	ed b7       	in	r30, 0x3d	; 61
   18ce8:	fe b7       	in	r31, 0x3e	; 62
   18cea:	84 83       	std	Z+4, r24	; 0x04
   18cec:	95 83       	std	Z+5, r25	; 0x05
   18cee:	a6 83       	std	Z+6, r26	; 0x06
   18cf0:	b7 83       	std	Z+7, r27	; 0x07
   18cf2:	89 ef       	ldi	r24, 0xF9	; 249
   18cf4:	9d e3       	ldi	r25, 0x3D	; 61
   18cf6:	a0 e0       	ldi	r26, 0x00	; 0
   18cf8:	81 83       	std	Z+1, r24	; 0x01
   18cfa:	92 83       	std	Z+2, r25	; 0x02
   18cfc:	a3 83       	std	Z+3, r26	; 0x03
   18cfe:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18d02:	fe 01       	movw	r30, r28
   18d04:	e0 5a       	subi	r30, 0xA0	; 160
   18d06:	ff 4f       	sbci	r31, 0xFF	; 255
   18d08:	80 81       	ld	r24, Z
   18d0a:	91 81       	ldd	r25, Z+1	; 0x01
   18d0c:	a2 81       	ldd	r26, Z+2	; 0x02
   18d0e:	b3 81       	ldd	r27, Z+3	; 0x03
   18d10:	ed b7       	in	r30, 0x3d	; 61
   18d12:	fe b7       	in	r31, 0x3e	; 62
   18d14:	84 83       	std	Z+4, r24	; 0x04
   18d16:	95 83       	std	Z+5, r25	; 0x05
   18d18:	a6 83       	std	Z+6, r26	; 0x06
   18d1a:	b7 83       	std	Z+7, r27	; 0x07
   18d1c:	8c ed       	ldi	r24, 0xDC	; 220
   18d1e:	9d e3       	ldi	r25, 0x3D	; 61
   18d20:	a0 e0       	ldi	r26, 0x00	; 0
   18d22:	81 83       	std	Z+1, r24	; 0x01
   18d24:	92 83       	std	Z+2, r25	; 0x02
   18d26:	a3 83       	std	Z+3, r26	; 0x03
   18d28:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18d2c:	fe 01       	movw	r30, r28
   18d2e:	e4 59       	subi	r30, 0x94	; 148
   18d30:	ff 4f       	sbci	r31, 0xFF	; 255
   18d32:	80 81       	ld	r24, Z
   18d34:	91 81       	ldd	r25, Z+1	; 0x01
   18d36:	a0 e0       	ldi	r26, 0x00	; 0
   18d38:	b0 e0       	ldi	r27, 0x00	; 0
   18d3a:	ed b7       	in	r30, 0x3d	; 61
   18d3c:	fe b7       	in	r31, 0x3e	; 62
   18d3e:	84 83       	std	Z+4, r24	; 0x04
   18d40:	95 83       	std	Z+5, r25	; 0x05
   18d42:	a6 83       	std	Z+6, r26	; 0x06
   18d44:	b7 83       	std	Z+7, r27	; 0x07
   18d46:	8f eb       	ldi	r24, 0xBF	; 191
   18d48:	9d e3       	ldi	r25, 0x3D	; 61
   18d4a:	a0 e0       	ldi	r26, 0x00	; 0
   18d4c:	81 83       	std	Z+1, r24	; 0x01
   18d4e:	92 83       	std	Z+2, r25	; 0x02
   18d50:	a3 83       	std	Z+3, r26	; 0x03
   18d52:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18d56:	fe 01       	movw	r30, r28
   18d58:	e2 59       	subi	r30, 0x92	; 146
   18d5a:	ff 4f       	sbci	r31, 0xFF	; 255
   18d5c:	80 81       	ld	r24, Z
   18d5e:	91 81       	ldd	r25, Z+1	; 0x01
   18d60:	ed b7       	in	r30, 0x3d	; 61
   18d62:	fe b7       	in	r31, 0x3e	; 62
   18d64:	95 83       	std	Z+5, r25	; 0x05
   18d66:	84 83       	std	Z+4, r24	; 0x04
   18d68:	83 ea       	ldi	r24, 0xA3	; 163
   18d6a:	9d e3       	ldi	r25, 0x3D	; 61
   18d6c:	a0 e0       	ldi	r26, 0x00	; 0
   18d6e:	81 83       	std	Z+1, r24	; 0x01
   18d70:	92 83       	std	Z+2, r25	; 0x02
   18d72:	a3 83       	std	Z+3, r26	; 0x03
   18d74:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18d78:	ce 01       	movw	r24, r28
   18d7a:	8c 59       	subi	r24, 0x9C	; 156
   18d7c:	9f 4f       	sbci	r25, 0xFF	; 255
   18d7e:	1a de       	rcall	.-972    	; 0x189b4 <lif_lifbcd2timestr>
   18d80:	ed b7       	in	r30, 0x3d	; 61
   18d82:	fe b7       	in	r31, 0x3e	; 62
   18d84:	95 83       	std	Z+5, r25	; 0x05
   18d86:	84 83       	std	Z+4, r24	; 0x04
   18d88:	89 e8       	ldi	r24, 0x89	; 137
   18d8a:	9d e3       	ldi	r25, 0x3D	; 61
   18d8c:	a0 e0       	ldi	r26, 0x00	; 0
   18d8e:	81 83       	std	Z+1, r24	; 0x01
   18d90:	92 83       	std	Z+2, r25	; 0x02
   18d92:	a3 83       	std	Z+3, r26	; 0x03
   18d94:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18d98:	87 e8       	ldi	r24, 0x87	; 135
   18d9a:	9d e3       	ldi	r25, 0x3D	; 61
   18d9c:	a0 e0       	ldi	r26, 0x00	; 0
   18d9e:	ed b7       	in	r30, 0x3d	; 61
   18da0:	fe b7       	in	r31, 0x3e	; 62
   18da2:	81 83       	std	Z+1, r24	; 0x01
   18da4:	92 83       	std	Z+2, r25	; 0x02
   18da6:	a3 83       	std	Z+3, r26	; 0x03
   18da8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18dac:	cd b7       	in	r28, 0x3d	; 61
   18dae:	de b7       	in	r29, 0x3e	; 62
   18db0:	27 96       	adiw	r28, 0x07	; 7
   18db2:	e2 e0       	ldi	r30, 0x02	; 2
   18db4:	0c 94 15 e4 	jmp	0x1c82a	; 0x1c82a <__epilogue_restores__+0x20>

00018db8 <lif_check_volume>:
   18db8:	0f 93       	push	r16
   18dba:	1f 93       	push	r17
   18dbc:	cf 93       	push	r28
   18dbe:	df 93       	push	r29
   18dc0:	ad b7       	in	r26, 0x3d	; 61
   18dc2:	be b7       	in	r27, 0x3e	; 62
   18dc4:	17 97       	sbiw	r26, 0x07	; 7
   18dc6:	0f b6       	in	r0, 0x3f	; 63
   18dc8:	f8 94       	cli
   18dca:	be bf       	out	0x3e, r27	; 62
   18dcc:	0f be       	out	0x3f, r0	; 63
   18dce:	ad bf       	out	0x3d, r26	; 61
   18dd0:	ec 01       	movw	r28, r24
   18dd2:	86 96       	adiw	r24, 0x26	; 38
   18dd4:	e0 da       	rcall	.-2624   	; 0x18396 <lif_checkname>
   18dd6:	89 2b       	or	r24, r25
   18dd8:	79 f4       	brne	.+30     	; 0x18df8 <lif_check_volume+0x40>
   18dda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18dde:	81 ff       	sbrs	r24, 1
   18de0:	0e c0       	rjmp	.+28     	; 0x18dfe <lif_check_volume+0x46>
   18de2:	88 e6       	ldi	r24, 0x68	; 104
   18de4:	9d e3       	ldi	r25, 0x3D	; 61
   18de6:	a0 e0       	ldi	r26, 0x00	; 0
   18de8:	ed b7       	in	r30, 0x3d	; 61
   18dea:	fe b7       	in	r31, 0x3e	; 62
   18dec:	81 83       	std	Z+1, r24	; 0x01
   18dee:	92 83       	std	Z+2, r25	; 0x02
   18df0:	a3 83       	std	Z+3, r26	; 0x03
   18df2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18df6:	03 c0       	rjmp	.+6      	; 0x18dfe <lif_check_volume+0x46>
   18df8:	81 e0       	ldi	r24, 0x01	; 1
   18dfa:	90 e0       	ldi	r25, 0x00	; 0
   18dfc:	02 c0       	rjmp	.+4      	; 0x18e02 <lif_check_volume+0x4a>
   18dfe:	80 e0       	ldi	r24, 0x00	; 0
   18e00:	90 e0       	ldi	r25, 0x00	; 0
   18e02:	29 a9       	ldd	r18, Y+49	; 0x31
   18e04:	3a a9       	ldd	r19, Y+50	; 0x32
   18e06:	21 15       	cp	r18, r1
   18e08:	f0 e1       	ldi	r31, 0x10	; 16
   18e0a:	3f 07       	cpc	r19, r31
   18e0c:	91 f0       	breq	.+36     	; 0x18e32 <lif_check_volume+0x7a>
   18e0e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18e12:	81 ff       	sbrs	r24, 1
   18e14:	0c c0       	rjmp	.+24     	; 0x18e2e <lif_check_volume+0x76>
   18e16:	ed b7       	in	r30, 0x3d	; 61
   18e18:	fe b7       	in	r31, 0x3e	; 62
   18e1a:	35 83       	std	Z+5, r19	; 0x05
   18e1c:	24 83       	std	Z+4, r18	; 0x04
   18e1e:	8f e2       	ldi	r24, 0x2F	; 47
   18e20:	9d e3       	ldi	r25, 0x3D	; 61
   18e22:	a0 e0       	ldi	r26, 0x00	; 0
   18e24:	81 83       	std	Z+1, r24	; 0x01
   18e26:	92 83       	std	Z+2, r25	; 0x02
   18e28:	a3 83       	std	Z+3, r26	; 0x03
   18e2a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18e2e:	80 e0       	ldi	r24, 0x00	; 0
   18e30:	90 e0       	ldi	r25, 0x00	; 0
   18e32:	29 ad       	ldd	r18, Y+57	; 0x39
   18e34:	3a ad       	ldd	r19, Y+58	; 0x3a
   18e36:	22 30       	cpi	r18, 0x02	; 2
   18e38:	31 05       	cpc	r19, r1
   18e3a:	90 f0       	brcs	.+36     	; 0x18e60 <lif_check_volume+0xa8>
   18e3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18e40:	81 ff       	sbrs	r24, 1
   18e42:	0c c0       	rjmp	.+24     	; 0x18e5c <lif_check_volume+0xa4>
   18e44:	ed b7       	in	r30, 0x3d	; 61
   18e46:	fe b7       	in	r31, 0x3e	; 62
   18e48:	35 83       	std	Z+5, r19	; 0x05
   18e4a:	24 83       	std	Z+4, r18	; 0x04
   18e4c:	87 e1       	ldi	r24, 0x17	; 23
   18e4e:	9d e3       	ldi	r25, 0x3D	; 61
   18e50:	a0 e0       	ldi	r26, 0x00	; 0
   18e52:	81 83       	std	Z+1, r24	; 0x01
   18e54:	92 83       	std	Z+2, r25	; 0x02
   18e56:	a3 83       	std	Z+3, r26	; 0x03
   18e58:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18e5c:	80 e0       	ldi	r24, 0x00	; 0
   18e5e:	90 e0       	ldi	r25, 0x00	; 0
   18e60:	2b a9       	ldd	r18, Y+51	; 0x33
   18e62:	3c a9       	ldd	r19, Y+52	; 0x34
   18e64:	23 2b       	or	r18, r19
   18e66:	81 f0       	breq	.+32     	; 0x18e88 <lif_check_volume+0xd0>
   18e68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18e6c:	81 ff       	sbrs	r24, 1
   18e6e:	0a c0       	rjmp	.+20     	; 0x18e84 <lif_check_volume+0xcc>
   18e70:	8e ed       	ldi	r24, 0xDE	; 222
   18e72:	9c e3       	ldi	r25, 0x3C	; 60
   18e74:	a0 e0       	ldi	r26, 0x00	; 0
   18e76:	ed b7       	in	r30, 0x3d	; 61
   18e78:	fe b7       	in	r31, 0x3e	; 62
   18e7a:	81 83       	std	Z+1, r24	; 0x01
   18e7c:	92 83       	std	Z+2, r25	; 0x02
   18e7e:	a3 83       	std	Z+3, r26	; 0x03
   18e80:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18e84:	80 e0       	ldi	r24, 0x00	; 0
   18e86:	90 e0       	ldi	r25, 0x00	; 0
   18e88:	2b ad       	ldd	r18, Y+59	; 0x3b
   18e8a:	3c ad       	ldd	r19, Y+60	; 0x3c
   18e8c:	23 2b       	or	r18, r19
   18e8e:	81 f0       	breq	.+32     	; 0x18eb0 <lif_check_volume+0xf8>
   18e90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18e94:	81 ff       	sbrs	r24, 1
   18e96:	0a c0       	rjmp	.+20     	; 0x18eac <lif_check_volume+0xf4>
   18e98:	85 ea       	ldi	r24, 0xA5	; 165
   18e9a:	9c e3       	ldi	r25, 0x3C	; 60
   18e9c:	a0 e0       	ldi	r26, 0x00	; 0
   18e9e:	ed b7       	in	r30, 0x3d	; 61
   18ea0:	fe b7       	in	r31, 0x3e	; 62
   18ea2:	81 83       	std	Z+1, r24	; 0x01
   18ea4:	92 83       	std	Z+2, r25	; 0x02
   18ea6:	a3 83       	std	Z+3, r26	; 0x03
   18ea8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18eac:	80 e0       	ldi	r24, 0x00	; 0
   18eae:	90 e0       	ldi	r25, 0x00	; 0
   18eb0:	4d a5       	ldd	r20, Y+45	; 0x2d
   18eb2:	5e a5       	ldd	r21, Y+46	; 0x2e
   18eb4:	6f a5       	ldd	r22, Y+47	; 0x2f
   18eb6:	78 a9       	ldd	r23, Y+48	; 0x30
   18eb8:	45 2b       	or	r20, r21
   18eba:	46 2b       	or	r20, r22
   18ebc:	47 2b       	or	r20, r23
   18ebe:	a1 f4       	brne	.+40     	; 0x18ee8 <lif_check_volume+0x130>
   18ec0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ec4:	81 ff       	sbrs	r24, 1
   18ec6:	0e c0       	rjmp	.+28     	; 0x18ee4 <lif_check_volume+0x12c>
   18ec8:	ed b7       	in	r30, 0x3d	; 61
   18eca:	fe b7       	in	r31, 0x3e	; 62
   18ecc:	14 82       	std	Z+4, r1	; 0x04
   18ece:	15 82       	std	Z+5, r1	; 0x05
   18ed0:	16 82       	std	Z+6, r1	; 0x06
   18ed2:	17 82       	std	Z+7, r1	; 0x07
   18ed4:	80 e8       	ldi	r24, 0x80	; 128
   18ed6:	9c e3       	ldi	r25, 0x3C	; 60
   18ed8:	a0 e0       	ldi	r26, 0x00	; 0
   18eda:	81 83       	std	Z+1, r24	; 0x01
   18edc:	92 83       	std	Z+2, r25	; 0x02
   18ede:	a3 83       	std	Z+3, r26	; 0x03
   18ee0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18ee4:	80 e0       	ldi	r24, 0x00	; 0
   18ee6:	90 e0       	ldi	r25, 0x00	; 0
   18ee8:	4d a9       	ldd	r20, Y+53	; 0x35
   18eea:	5e a9       	ldd	r21, Y+54	; 0x36
   18eec:	6f a9       	ldd	r22, Y+55	; 0x37
   18eee:	78 ad       	ldd	r23, Y+56	; 0x38
   18ef0:	45 2b       	or	r20, r21
   18ef2:	46 2b       	or	r20, r22
   18ef4:	47 2b       	or	r20, r23
   18ef6:	81 f4       	brne	.+32     	; 0x18f18 <lif_check_volume+0x160>
   18ef8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18efc:	81 ff       	sbrs	r24, 1
   18efe:	0a c0       	rjmp	.+20     	; 0x18f14 <lif_check_volume+0x15c>
   18f00:	81 e5       	ldi	r24, 0x51	; 81
   18f02:	9c e3       	ldi	r25, 0x3C	; 60
   18f04:	a0 e0       	ldi	r26, 0x00	; 0
   18f06:	ed b7       	in	r30, 0x3d	; 61
   18f08:	fe b7       	in	r31, 0x3e	; 62
   18f0a:	81 83       	std	Z+1, r24	; 0x01
   18f0c:	92 83       	std	Z+2, r25	; 0x02
   18f0e:	a3 83       	std	Z+3, r26	; 0x03
   18f10:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18f14:	80 e0       	ldi	r24, 0x00	; 0
   18f16:	90 e0       	ldi	r25, 0x00	; 0
   18f18:	0d a5       	ldd	r16, Y+45	; 0x2d
   18f1a:	1e a5       	ldd	r17, Y+46	; 0x2e
   18f1c:	2f a5       	ldd	r18, Y+47	; 0x2f
   18f1e:	38 a9       	ldd	r19, Y+48	; 0x30
   18f20:	4d a9       	ldd	r20, Y+53	; 0x35
   18f22:	5e a9       	ldd	r21, Y+54	; 0x36
   18f24:	6f a9       	ldd	r22, Y+55	; 0x37
   18f26:	78 ad       	ldd	r23, Y+56	; 0x38
   18f28:	40 0f       	add	r20, r16
   18f2a:	51 1f       	adc	r21, r17
   18f2c:	62 1f       	adc	r22, r18
   18f2e:	73 1f       	adc	r23, r19
   18f30:	0c 81       	ldd	r16, Y+4	; 0x04
   18f32:	1d 81       	ldd	r17, Y+5	; 0x05
   18f34:	2e 81       	ldd	r18, Y+6	; 0x06
   18f36:	3f 81       	ldd	r19, Y+7	; 0x07
   18f38:	04 17       	cp	r16, r20
   18f3a:	15 07       	cpc	r17, r21
   18f3c:	26 07       	cpc	r18, r22
   18f3e:	37 07       	cpc	r19, r23
   18f40:	80 f4       	brcc	.+32     	; 0x18f62 <lif_check_volume+0x1aa>
   18f42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18f46:	81 ff       	sbrs	r24, 1
   18f48:	0a c0       	rjmp	.+20     	; 0x18f5e <lif_check_volume+0x1a6>
   18f4a:	85 e2       	ldi	r24, 0x25	; 37
   18f4c:	9c e3       	ldi	r25, 0x3C	; 60
   18f4e:	a0 e0       	ldi	r26, 0x00	; 0
   18f50:	ed b7       	in	r30, 0x3d	; 61
   18f52:	fe b7       	in	r31, 0x3e	; 62
   18f54:	81 83       	std	Z+1, r24	; 0x01
   18f56:	92 83       	std	Z+2, r25	; 0x02
   18f58:	a3 83       	std	Z+3, r26	; 0x03
   18f5a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18f5e:	80 e0       	ldi	r24, 0x00	; 0
   18f60:	90 e0       	ldi	r25, 0x00	; 0
   18f62:	cd b7       	in	r28, 0x3d	; 61
   18f64:	de b7       	in	r29, 0x3e	; 62
   18f66:	27 96       	adiw	r28, 0x07	; 7
   18f68:	e4 e0       	ldi	r30, 0x04	; 4
   18f6a:	0c 94 13 e4 	jmp	0x1c826	; 0x1c826 <__epilogue_restores__+0x1c>

00018f6e <lif_check_dir>:
   18f6e:	a5 e1       	ldi	r26, 0x15	; 21
   18f70:	b0 e0       	ldi	r27, 0x00	; 0
   18f72:	ed eb       	ldi	r30, 0xBD	; 189
   18f74:	f7 ec       	ldi	r31, 0xC7	; 199
   18f76:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
   18f7a:	6c 01       	movw	r12, r24
   18f7c:	2a e5       	ldi	r18, 0x5A	; 90
   18f7e:	c2 0e       	add	r12, r18
   18f80:	d1 1c       	adc	r13, r1
   18f82:	f6 01       	movw	r30, r12
   18f84:	20 81       	ld	r18, Z
   18f86:	31 81       	ldd	r19, Z+1	; 0x01
   18f88:	21 50       	subi	r18, 0x01	; 1
   18f8a:	31 09       	sbc	r19, r1
   18f8c:	2e 3f       	cpi	r18, 0xFE	; 254
   18f8e:	3f 4f       	sbci	r19, 0xFF	; 255
   18f90:	08 f0       	brcs	.+2      	; 0x18f94 <lif_check_dir+0x26>
   18f92:	8e c1       	rjmp	.+796    	; 0x192b0 <lif_check_dir+0x342>
   18f94:	9d 8b       	std	Y+21, r25	; 0x15
   18f96:	8c 8b       	std	Y+20, r24	; 0x14
   18f98:	7c 01       	movw	r14, r24
   18f9a:	2f e4       	ldi	r18, 0x4F	; 79
   18f9c:	e2 0e       	add	r14, r18
   18f9e:	f1 1c       	adc	r15, r1
   18fa0:	c7 01       	movw	r24, r14
   18fa2:	f9 d9       	rcall	.-3086   	; 0x18396 <lif_checkname>
   18fa4:	89 2b       	or	r24, r25
   18fa6:	89 f4       	brne	.+34     	; 0x18fca <lif_check_dir+0x5c>
   18fa8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18fac:	81 ff       	sbrs	r24, 1
   18fae:	0f c0       	rjmp	.+30     	; 0x18fce <lif_check_dir+0x60>
   18fb0:	ed b7       	in	r30, 0x3d	; 61
   18fb2:	fe b7       	in	r31, 0x3e	; 62
   18fb4:	f5 82       	std	Z+5, r15	; 0x05
   18fb6:	e4 82       	std	Z+4, r14	; 0x04
   18fb8:	84 e0       	ldi	r24, 0x04	; 4
   18fba:	9c e3       	ldi	r25, 0x3C	; 60
   18fbc:	a0 e0       	ldi	r26, 0x00	; 0
   18fbe:	81 83       	std	Z+1, r24	; 0x01
   18fc0:	92 83       	std	Z+2, r25	; 0x02
   18fc2:	a3 83       	std	Z+3, r26	; 0x03
   18fc4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   18fc8:	02 c0       	rjmp	.+4      	; 0x18fce <lif_check_dir+0x60>
   18fca:	01 e0       	ldi	r16, 0x01	; 1
   18fcc:	01 c0       	rjmp	.+2      	; 0x18fd0 <lif_check_dir+0x62>
   18fce:	00 e0       	ldi	r16, 0x00	; 0
   18fd0:	10 e0       	ldi	r17, 0x00	; 0
   18fd2:	ec 89       	ldd	r30, Y+20	; 0x14
   18fd4:	fd 89       	ldd	r31, Y+21	; 0x15
   18fd6:	84 85       	ldd	r24, Z+12	; 0x0c
   18fd8:	95 85       	ldd	r25, Z+13	; 0x0d
   18fda:	a6 85       	ldd	r26, Z+14	; 0x0e
   18fdc:	b7 85       	ldd	r27, Z+15	; 0x0f
   18fde:	00 97       	sbiw	r24, 0x00	; 0
   18fe0:	a1 05       	cpc	r26, r1
   18fe2:	b1 05       	cpc	r27, r1
   18fe4:	29 f1       	breq	.+74     	; 0x19030 <lif_check_dir+0xc2>
   18fe6:	e4 5a       	subi	r30, 0xA4	; 164
   18fe8:	ff 4f       	sbci	r31, 0xFF	; 255
   18fea:	40 81       	ld	r20, Z
   18fec:	51 81       	ldd	r21, Z+1	; 0x01
   18fee:	62 81       	ldd	r22, Z+2	; 0x02
   18ff0:	73 81       	ldd	r23, Z+3	; 0x03
   18ff2:	48 17       	cp	r20, r24
   18ff4:	59 07       	cpc	r21, r25
   18ff6:	6a 07       	cpc	r22, r26
   18ff8:	7b 07       	cpc	r23, r27
   18ffa:	d0 f4       	brcc	.+52     	; 0x19030 <lif_check_dir+0xc2>
   18ffc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19000:	21 ff       	sbrs	r18, 1
   19002:	14 c0       	rjmp	.+40     	; 0x1902c <lif_check_dir+0xbe>
   19004:	ed b7       	in	r30, 0x3d	; 61
   19006:	fe b7       	in	r31, 0x3e	; 62
   19008:	82 87       	std	Z+10, r24	; 0x0a
   1900a:	93 87       	std	Z+11, r25	; 0x0b
   1900c:	a4 87       	std	Z+12, r26	; 0x0c
   1900e:	b5 87       	std	Z+13, r27	; 0x0d
   19010:	46 83       	std	Z+6, r20	; 0x06
   19012:	57 83       	std	Z+7, r21	; 0x07
   19014:	60 87       	std	Z+8, r22	; 0x08
   19016:	71 87       	std	Z+9, r23	; 0x09
   19018:	f5 82       	std	Z+5, r15	; 0x05
   1901a:	e4 82       	std	Z+4, r14	; 0x04
   1901c:	80 ec       	ldi	r24, 0xC0	; 192
   1901e:	9b e3       	ldi	r25, 0x3B	; 59
   19020:	a0 e0       	ldi	r26, 0x00	; 0
   19022:	81 83       	std	Z+1, r24	; 0x01
   19024:	92 83       	std	Z+2, r25	; 0x02
   19026:	a3 83       	std	Z+3, r26	; 0x03
   19028:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1902c:	00 e0       	ldi	r16, 0x00	; 0
   1902e:	10 e0       	ldi	r17, 0x00	; 0
   19030:	ec 89       	ldd	r30, Y+20	; 0x14
   19032:	fd 89       	ldd	r31, Y+21	; 0x15
   19034:	44 81       	ldd	r20, Z+4	; 0x04
   19036:	55 81       	ldd	r21, Z+5	; 0x05
   19038:	66 81       	ldd	r22, Z+6	; 0x06
   1903a:	77 81       	ldd	r23, Z+7	; 0x07
   1903c:	41 15       	cp	r20, r1
   1903e:	51 05       	cpc	r21, r1
   19040:	61 05       	cpc	r22, r1
   19042:	71 05       	cpc	r23, r1
   19044:	89 f1       	breq	.+98     	; 0x190a8 <lif_check_dir+0x13a>
   19046:	e4 5a       	subi	r30, 0xA4	; 164
   19048:	ff 4f       	sbci	r31, 0xFF	; 255
   1904a:	80 80       	ld	r8, Z
   1904c:	91 80       	ldd	r9, Z+1	; 0x01
   1904e:	a2 80       	ldd	r10, Z+2	; 0x02
   19050:	b3 80       	ldd	r11, Z+3	; 0x03
   19052:	ec 89       	ldd	r30, Y+20	; 0x14
   19054:	fd 89       	ldd	r31, Y+21	; 0x15
   19056:	e0 5a       	subi	r30, 0xA0	; 160
   19058:	ff 4f       	sbci	r31, 0xFF	; 255
   1905a:	80 81       	ld	r24, Z
   1905c:	91 81       	ldd	r25, Z+1	; 0x01
   1905e:	a2 81       	ldd	r26, Z+2	; 0x02
   19060:	b3 81       	ldd	r27, Z+3	; 0x03
   19062:	88 0d       	add	r24, r8
   19064:	99 1d       	adc	r25, r9
   19066:	aa 1d       	adc	r26, r10
   19068:	bb 1d       	adc	r27, r11
   1906a:	48 17       	cp	r20, r24
   1906c:	59 07       	cpc	r21, r25
   1906e:	6a 07       	cpc	r22, r26
   19070:	7b 07       	cpc	r23, r27
   19072:	d0 f4       	brcc	.+52     	; 0x190a8 <lif_check_dir+0x13a>
   19074:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19078:	21 ff       	sbrs	r18, 1
   1907a:	14 c0       	rjmp	.+40     	; 0x190a4 <lif_check_dir+0x136>
   1907c:	ed b7       	in	r30, 0x3d	; 61
   1907e:	fe b7       	in	r31, 0x3e	; 62
   19080:	42 87       	std	Z+10, r20	; 0x0a
   19082:	53 87       	std	Z+11, r21	; 0x0b
   19084:	64 87       	std	Z+12, r22	; 0x0c
   19086:	75 87       	std	Z+13, r23	; 0x0d
   19088:	86 83       	std	Z+6, r24	; 0x06
   1908a:	97 83       	std	Z+7, r25	; 0x07
   1908c:	a0 87       	std	Z+8, r26	; 0x08
   1908e:	b1 87       	std	Z+9, r27	; 0x09
   19090:	f5 82       	std	Z+5, r15	; 0x05
   19092:	e4 82       	std	Z+4, r14	; 0x04
   19094:	8f e7       	ldi	r24, 0x7F	; 127
   19096:	9b e3       	ldi	r25, 0x3B	; 59
   19098:	a0 e0       	ldi	r26, 0x00	; 0
   1909a:	81 83       	std	Z+1, r24	; 0x01
   1909c:	92 83       	std	Z+2, r25	; 0x02
   1909e:	a3 83       	std	Z+3, r26	; 0x03
   190a0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   190a4:	00 e0       	ldi	r16, 0x00	; 0
   190a6:	10 e0       	ldi	r17, 0x00	; 0
   190a8:	ec 89       	ldd	r30, Y+20	; 0x14
   190aa:	fd 89       	ldd	r31, Y+21	; 0x15
   190ac:	e6 59       	subi	r30, 0x96	; 150
   190ae:	ff 4f       	sbci	r31, 0xFF	; 255
   190b0:	80 81       	ld	r24, Z
   190b2:	91 81       	ldd	r25, Z+1	; 0x01
   190b4:	81 30       	cpi	r24, 0x01	; 1
   190b6:	f0 e8       	ldi	r31, 0x80	; 128
   190b8:	9f 07       	cpc	r25, r31
   190ba:	a1 f0       	breq	.+40     	; 0x190e4 <lif_check_dir+0x176>
   190bc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   190c0:	21 ff       	sbrs	r18, 1
   190c2:	0e c0       	rjmp	.+28     	; 0x190e0 <lif_check_dir+0x172>
   190c4:	ed b7       	in	r30, 0x3d	; 61
   190c6:	fe b7       	in	r31, 0x3e	; 62
   190c8:	97 83       	std	Z+7, r25	; 0x07
   190ca:	86 83       	std	Z+6, r24	; 0x06
   190cc:	f5 82       	std	Z+5, r15	; 0x05
   190ce:	e4 82       	std	Z+4, r14	; 0x04
   190d0:	81 e5       	ldi	r24, 0x51	; 81
   190d2:	9b e3       	ldi	r25, 0x3B	; 59
   190d4:	a0 e0       	ldi	r26, 0x00	; 0
   190d6:	81 83       	std	Z+1, r24	; 0x01
   190d8:	92 83       	std	Z+2, r25	; 0x02
   190da:	a3 83       	std	Z+3, r26	; 0x03
   190dc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   190e0:	00 e0       	ldi	r16, 0x00	; 0
   190e2:	10 e0       	ldi	r17, 0x00	; 0
   190e4:	f6 01       	movw	r30, r12
   190e6:	80 81       	ld	r24, Z
   190e8:	91 81       	ldd	r25, Z+1	; 0x01
   190ea:	8c 7f       	andi	r24, 0xFC	; 252
   190ec:	80 31       	cpi	r24, 0x10	; 16
   190ee:	90 4e       	sbci	r25, 0xE0	; 224
   190f0:	09 f0       	breq	.+2      	; 0x190f4 <lif_check_dir+0x186>
   190f2:	af c0       	rjmp	.+350    	; 0x19252 <lif_check_dir+0x2e4>
   190f4:	cc 88       	ldd	r12, Y+20	; 0x14
   190f6:	dd 88       	ldd	r13, Y+21	; 0x15
   190f8:	2c e6       	ldi	r18, 0x6C	; 108
   190fa:	c2 0e       	add	r12, r18
   190fc:	d1 1c       	adc	r13, r1
   190fe:	f6 01       	movw	r30, r12
   19100:	80 81       	ld	r24, Z
   19102:	91 81       	ldd	r25, Z+1	; 0x01
   19104:	00 97       	sbiw	r24, 0x00	; 0
   19106:	09 f4       	brne	.+2      	; 0x1910a <lif_check_dir+0x19c>
   19108:	a4 c0       	rjmp	.+328    	; 0x19252 <lif_check_dir+0x2e4>
   1910a:	4c 01       	movw	r8, r24
   1910c:	a1 2c       	mov	r10, r1
   1910e:	b1 2c       	mov	r11, r1
   19110:	77 27       	eor	r23, r23
   19112:	6b 2d       	mov	r22, r11
   19114:	5a 2d       	mov	r21, r10
   19116:	49 2d       	mov	r20, r9
   19118:	9c 01       	movw	r18, r24
   1911a:	33 27       	eor	r19, r19
   1911c:	3b 8b       	std	Y+19, r19	; 0x13
   1911e:	2a 8b       	std	Y+18, r18	; 0x12
   19120:	db 01       	movw	r26, r22
   19122:	ca 01       	movw	r24, r20
   19124:	23 2b       	or	r18, r19
   19126:	19 f0       	breq	.+6      	; 0x1912e <lif_check_dir+0x1c0>
   19128:	01 96       	adiw	r24, 0x01	; 1
   1912a:	a1 1d       	adc	r26, r1
   1912c:	b1 1d       	adc	r27, r1
   1912e:	2c 88       	ldd	r2, Y+20	; 0x14
   19130:	3d 88       	ldd	r3, Y+21	; 0x15
   19132:	30 e6       	ldi	r19, 0x60	; 96
   19134:	23 0e       	add	r2, r19
   19136:	31 1c       	adc	r3, r1
   19138:	f1 01       	movw	r30, r2
   1913a:	40 80       	ld	r4, Z
   1913c:	51 80       	ldd	r5, Z+1	; 0x01
   1913e:	62 80       	ldd	r6, Z+2	; 0x02
   19140:	73 80       	ldd	r7, Z+3	; 0x03
   19142:	48 16       	cp	r4, r24
   19144:	59 06       	cpc	r5, r25
   19146:	6a 06       	cpc	r6, r26
   19148:	7b 06       	cpc	r7, r27
   1914a:	30 f5       	brcc	.+76     	; 0x19198 <lif_check_dir+0x22a>
   1914c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19150:	21 ff       	sbrs	r18, 1
   19152:	20 c0       	rjmp	.+64     	; 0x19194 <lif_check_dir+0x226>
   19154:	2a 89       	ldd	r18, Y+18	; 0x12
   19156:	3b 89       	ldd	r19, Y+19	; 0x13
   19158:	23 2b       	or	r18, r19
   1915a:	21 f0       	breq	.+8      	; 0x19164 <lif_check_dir+0x1f6>
   1915c:	4f 5f       	subi	r20, 0xFF	; 255
   1915e:	5f 4f       	sbci	r21, 0xFF	; 255
   19160:	6f 4f       	sbci	r22, 0xFF	; 255
   19162:	7f 4f       	sbci	r23, 0xFF	; 255
   19164:	ed b7       	in	r30, 0x3d	; 61
   19166:	fe b7       	in	r31, 0x3e	; 62
   19168:	46 86       	std	Z+14, r4	; 0x0e
   1916a:	57 86       	std	Z+15, r5	; 0x0f
   1916c:	60 8a       	std	Z+16, r6	; 0x10
   1916e:	71 8a       	std	Z+17, r7	; 0x11
   19170:	42 87       	std	Z+10, r20	; 0x0a
   19172:	53 87       	std	Z+11, r21	; 0x0b
   19174:	64 87       	std	Z+12, r22	; 0x0c
   19176:	75 87       	std	Z+13, r23	; 0x0d
   19178:	86 82       	std	Z+6, r8	; 0x06
   1917a:	97 82       	std	Z+7, r9	; 0x07
   1917c:	a0 86       	std	Z+8, r10	; 0x08
   1917e:	b1 86       	std	Z+9, r11	; 0x09
   19180:	f5 82       	std	Z+5, r15	; 0x05
   19182:	e4 82       	std	Z+4, r14	; 0x04
   19184:	86 e0       	ldi	r24, 0x06	; 6
   19186:	9b e3       	ldi	r25, 0x3B	; 59
   19188:	a0 e0       	ldi	r26, 0x00	; 0
   1918a:	81 83       	std	Z+1, r24	; 0x01
   1918c:	92 83       	std	Z+2, r25	; 0x02
   1918e:	a3 83       	std	Z+3, r26	; 0x03
   19190:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   19194:	00 e0       	ldi	r16, 0x00	; 0
   19196:	10 e0       	ldi	r17, 0x00	; 0
   19198:	f6 01       	movw	r30, r12
   1919a:	20 81       	ld	r18, Z
   1919c:	31 81       	ldd	r19, Z+1	; 0x01
   1919e:	a9 01       	movw	r20, r18
   191a0:	60 e0       	ldi	r22, 0x00	; 0
   191a2:	70 e0       	ldi	r23, 0x00	; 0
   191a4:	bb 27       	eor	r27, r27
   191a6:	a7 2f       	mov	r26, r23
   191a8:	96 2f       	mov	r25, r22
   191aa:	85 2f       	mov	r24, r21
   191ac:	f9 01       	movw	r30, r18
   191ae:	ff 27       	eor	r31, r31
   191b0:	fb 8b       	std	Y+19, r31	; 0x13
   191b2:	ea 8b       	std	Y+18, r30	; 0x12
   191b4:	2c 01       	movw	r4, r24
   191b6:	3d 01       	movw	r6, r26
   191b8:	ef 2b       	or	r30, r31
   191ba:	29 f0       	breq	.+10     	; 0x191c6 <lif_check_dir+0x258>
   191bc:	ff ef       	ldi	r31, 0xFF	; 255
   191be:	4f 1a       	sub	r4, r31
   191c0:	5f 0a       	sbc	r5, r31
   191c2:	6f 0a       	sbc	r6, r31
   191c4:	7f 0a       	sbc	r7, r31
   191c6:	f1 01       	movw	r30, r2
   191c8:	80 80       	ld	r8, Z
   191ca:	91 80       	ldd	r9, Z+1	; 0x01
   191cc:	a2 80       	ldd	r10, Z+2	; 0x02
   191ce:	b3 80       	ldd	r11, Z+3	; 0x03
   191d0:	48 14       	cp	r4, r8
   191d2:	59 04       	cpc	r5, r9
   191d4:	6a 04       	cpc	r6, r10
   191d6:	7b 04       	cpc	r7, r11
   191d8:	28 f5       	brcc	.+74     	; 0x19224 <lif_check_dir+0x2b6>
   191da:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   191de:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191e2:	32 ff       	sbrs	r19, 2
   191e4:	1f c0       	rjmp	.+62     	; 0x19224 <lif_check_dir+0x2b6>
   191e6:	2a 89       	ldd	r18, Y+18	; 0x12
   191e8:	3b 89       	ldd	r19, Y+19	; 0x13
   191ea:	23 2b       	or	r18, r19
   191ec:	19 f0       	breq	.+6      	; 0x191f4 <lif_check_dir+0x286>
   191ee:	01 96       	adiw	r24, 0x01	; 1
   191f0:	a1 1d       	adc	r26, r1
   191f2:	b1 1d       	adc	r27, r1
   191f4:	ed b7       	in	r30, 0x3d	; 61
   191f6:	fe b7       	in	r31, 0x3e	; 62
   191f8:	86 86       	std	Z+14, r8	; 0x0e
   191fa:	97 86       	std	Z+15, r9	; 0x0f
   191fc:	a0 8a       	std	Z+16, r10	; 0x10
   191fe:	b1 8a       	std	Z+17, r11	; 0x11
   19200:	82 87       	std	Z+10, r24	; 0x0a
   19202:	93 87       	std	Z+11, r25	; 0x0b
   19204:	a4 87       	std	Z+12, r26	; 0x0c
   19206:	b5 87       	std	Z+13, r27	; 0x0d
   19208:	46 83       	std	Z+6, r20	; 0x06
   1920a:	57 83       	std	Z+7, r21	; 0x07
   1920c:	60 87       	std	Z+8, r22	; 0x08
   1920e:	71 87       	std	Z+9, r23	; 0x09
   19210:	f5 82       	std	Z+5, r15	; 0x05
   19212:	e4 82       	std	Z+4, r14	; 0x04
   19214:	8b eb       	ldi	r24, 0xBB	; 187
   19216:	9a e3       	ldi	r25, 0x3A	; 58
   19218:	a0 e0       	ldi	r26, 0x00	; 0
   1921a:	81 83       	std	Z+1, r24	; 0x01
   1921c:	92 83       	std	Z+2, r25	; 0x02
   1921e:	a3 83       	std	Z+3, r26	; 0x03
   19220:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   19224:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19228:	81 ff       	sbrs	r24, 1
   1922a:	13 c0       	rjmp	.+38     	; 0x19252 <lif_check_dir+0x2e4>
   1922c:	f6 01       	movw	r30, r12
   1922e:	80 81       	ld	r24, Z
   19230:	91 81       	ldd	r25, Z+1	; 0x01
   19232:	89 2b       	or	r24, r25
   19234:	71 f4       	brne	.+28     	; 0x19252 <lif_check_dir+0x2e4>
   19236:	ed b7       	in	r30, 0x3d	; 61
   19238:	fe b7       	in	r31, 0x3e	; 62
   1923a:	f5 82       	std	Z+5, r15	; 0x05
   1923c:	e4 82       	std	Z+4, r14	; 0x04
   1923e:	80 e9       	ldi	r24, 0x90	; 144
   19240:	9a e3       	ldi	r25, 0x3A	; 58
   19242:	a0 e0       	ldi	r26, 0x00	; 0
   19244:	81 83       	std	Z+1, r24	; 0x01
   19246:	92 83       	std	Z+2, r25	; 0x02
   19248:	a3 83       	std	Z+3, r26	; 0x03
   1924a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1924e:	00 e0       	ldi	r16, 0x00	; 0
   19250:	10 e0       	ldi	r17, 0x00	; 0
   19252:	ec 89       	ldd	r30, Y+20	; 0x14
   19254:	fd 89       	ldd	r31, Y+21	; 0x15
   19256:	e2 59       	subi	r30, 0x92	; 146
   19258:	ff 4f       	sbci	r31, 0xFF	; 255
   1925a:	20 81       	ld	r18, Z
   1925c:	31 81       	ldd	r19, Z+1	; 0x01
   1925e:	21 15       	cp	r18, r1
   19260:	f1 e0       	ldi	r31, 0x01	; 1
   19262:	3f 07       	cpc	r19, r31
   19264:	41 f1       	breq	.+80     	; 0x192b6 <lif_check_dir+0x348>
   19266:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1926a:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1926e:	ca 01       	movw	r24, r20
   19270:	82 70       	andi	r24, 0x02	; 2
   19272:	99 27       	eor	r25, r25
   19274:	41 ff       	sbrs	r20, 1
   19276:	20 c0       	rjmp	.+64     	; 0x192b8 <lif_check_dir+0x34a>
   19278:	c9 01       	movw	r24, r18
   1927a:	a0 e0       	ldi	r26, 0x00	; 0
   1927c:	b0 e0       	ldi	r27, 0x00	; 0
   1927e:	ed b7       	in	r30, 0x3d	; 61
   19280:	fe b7       	in	r31, 0x3e	; 62
   19282:	86 83       	std	Z+6, r24	; 0x06
   19284:	97 83       	std	Z+7, r25	; 0x07
   19286:	a0 87       	std	Z+8, r26	; 0x08
   19288:	b1 87       	std	Z+9, r27	; 0x09
   1928a:	ec 89       	ldd	r30, Y+20	; 0x14
   1928c:	fd 89       	ldd	r31, Y+21	; 0x15
   1928e:	80 81       	ld	r24, Z
   19290:	91 81       	ldd	r25, Z+1	; 0x01
   19292:	ed b7       	in	r30, 0x3d	; 61
   19294:	fe b7       	in	r31, 0x3e	; 62
   19296:	95 83       	std	Z+5, r25	; 0x05
   19298:	84 83       	std	Z+4, r24	; 0x04
   1929a:	84 e6       	ldi	r24, 0x64	; 100
   1929c:	9a e3       	ldi	r25, 0x3A	; 58
   1929e:	a0 e0       	ldi	r26, 0x00	; 0
   192a0:	81 83       	std	Z+1, r24	; 0x01
   192a2:	92 83       	std	Z+2, r25	; 0x02
   192a4:	a3 83       	std	Z+3, r26	; 0x03
   192a6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   192aa:	80 e0       	ldi	r24, 0x00	; 0
   192ac:	90 e0       	ldi	r25, 0x00	; 0
   192ae:	04 c0       	rjmp	.+8      	; 0x192b8 <lif_check_dir+0x34a>
   192b0:	81 e0       	ldi	r24, 0x01	; 1
   192b2:	90 e0       	ldi	r25, 0x00	; 0
   192b4:	01 c0       	rjmp	.+2      	; 0x192b8 <lif_check_dir+0x34a>
   192b6:	c8 01       	movw	r24, r16
   192b8:	65 96       	adiw	r28, 0x15	; 21
   192ba:	e2 e1       	ldi	r30, 0x12	; 18
   192bc:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

000192c0 <lif_close_volume>:
   192c0:	cf 93       	push	r28
   192c2:	df 93       	push	r29
   192c4:	00 97       	sbiw	r24, 0x00	; 0
   192c6:	f9 f0       	breq	.+62     	; 0x19306 <lif_close_volume+0x46>
   192c8:	ec 01       	movw	r28, r24
   192ca:	8a 81       	ldd	r24, Y+2	; 0x02
   192cc:	9b 81       	ldd	r25, Y+3	; 0x03
   192ce:	00 97       	sbiw	r24, 0x00	; 0
   192d0:	79 f0       	breq	.+30     	; 0x192f0 <lif_close_volume+0x30>
   192d2:	22 e0       	ldi	r18, 0x02	; 2
   192d4:	30 e0       	ldi	r19, 0x00	; 0
   192d6:	40 e0       	ldi	r20, 0x00	; 0
   192d8:	50 e0       	ldi	r21, 0x00	; 0
   192da:	ba 01       	movw	r22, r20
   192dc:	0e 94 9f 7c 	call	0xf93e	; 0xf93e <fseek>
   192e0:	8a 81       	ldd	r24, Y+2	; 0x02
   192e2:	9b 81       	ldd	r25, Y+3	; 0x03
   192e4:	0e 94 87 7e 	call	0xfd0e	; 0xfd0e <fclose>
   192e8:	1b 82       	std	Y+3, r1	; 0x03
   192ea:	1a 82       	std	Y+2, r1	; 0x02
   192ec:	0e 94 82 7d 	call	0xfb04	; 0xfb04 <sync>
   192f0:	88 81       	ld	r24, Y
   192f2:	99 81       	ldd	r25, Y+1	; 0x01
   192f4:	00 97       	sbiw	r24, 0x00	; 0
   192f6:	11 f0       	breq	.+4      	; 0x192fc <lif_close_volume+0x3c>
   192f8:	0e 94 fc bf 	call	0x17ff8	; 0x17ff8 <lif_free>
   192fc:	ce 01       	movw	r24, r28
   192fe:	8f db       	rcall	.-2274   	; 0x18a1e <lif_vol_clear>
   19300:	ce 01       	movw	r24, r28
   19302:	0e 94 fc bf 	call	0x17ff8	; 0x17ff8 <lif_free>
   19306:	df 91       	pop	r29
   19308:	cf 91       	pop	r28
   1930a:	08 95       	ret

0001930c <lif_checkdirindex>:
   1930c:	cf 92       	push	r12
   1930e:	df 92       	push	r13
   19310:	ef 92       	push	r14
   19312:	ff 92       	push	r15
   19314:	cf 93       	push	r28
   19316:	df 93       	push	r29
   19318:	ad b7       	in	r26, 0x3d	; 61
   1931a:	be b7       	in	r27, 0x3e	; 62
   1931c:	17 97       	sbiw	r26, 0x07	; 7
   1931e:	0f b6       	in	r0, 0x3f	; 63
   19320:	f8 94       	cli
   19322:	be bf       	out	0x3e, r27	; 62
   19324:	0f be       	out	0x3f, r0	; 63
   19326:	ad bf       	out	0x3d, r26	; 61
   19328:	9b 01       	movw	r18, r22
   1932a:	77 fd       	sbrc	r23, 7
   1932c:	25 c0       	rjmp	.+74     	; 0x19378 <lif_checkdirindex+0x6c>
   1932e:	ab 01       	movw	r20, r22
   19330:	77 0f       	add	r23, r23
   19332:	66 0b       	sbc	r22, r22
   19334:	77 0b       	sbc	r23, r23
   19336:	e5 e0       	ldi	r30, 0x05	; 5
   19338:	44 0f       	add	r20, r20
   1933a:	55 1f       	adc	r21, r21
   1933c:	66 1f       	adc	r22, r22
   1933e:	77 1f       	adc	r23, r23
   19340:	ea 95       	dec	r30
   19342:	d1 f7       	brne	.-12     	; 0x19338 <lif_checkdirindex+0x2c>
   19344:	c5 2e       	mov	r12, r21
   19346:	d6 2e       	mov	r13, r22
   19348:	e7 2e       	mov	r14, r23
   1934a:	ff 24       	eor	r15, r15
   1934c:	55 27       	eor	r21, r21
   1934e:	66 27       	eor	r22, r22
   19350:	77 27       	eor	r23, r23
   19352:	45 2b       	or	r20, r21
   19354:	46 2b       	or	r20, r22
   19356:	47 2b       	or	r20, r23
   19358:	29 f0       	breq	.+10     	; 0x19364 <lif_checkdirindex+0x58>
   1935a:	4f ef       	ldi	r20, 0xFF	; 255
   1935c:	c4 1a       	sub	r12, r20
   1935e:	d4 0a       	sbc	r13, r20
   19360:	e4 0a       	sbc	r14, r20
   19362:	f4 0a       	sbc	r15, r20
   19364:	fc 01       	movw	r30, r24
   19366:	45 a9       	ldd	r20, Z+53	; 0x35
   19368:	56 a9       	ldd	r21, Z+54	; 0x36
   1936a:	67 a9       	ldd	r22, Z+55	; 0x37
   1936c:	70 ad       	ldd	r23, Z+56	; 0x38
   1936e:	4c 15       	cp	r20, r12
   19370:	5d 05       	cpc	r21, r13
   19372:	6e 05       	cpc	r22, r14
   19374:	7f 05       	cpc	r23, r15
   19376:	08 f5       	brcc	.+66     	; 0x193ba <lif_checkdirindex+0xae>
   19378:	ec 01       	movw	r28, r24
   1937a:	ed b7       	in	r30, 0x3d	; 61
   1937c:	fe b7       	in	r31, 0x3e	; 62
   1937e:	37 83       	std	Z+7, r19	; 0x07
   19380:	26 83       	std	Z+6, r18	; 0x06
   19382:	88 81       	ld	r24, Y
   19384:	99 81       	ldd	r25, Y+1	; 0x01
   19386:	95 83       	std	Z+5, r25	; 0x05
   19388:	84 83       	std	Z+4, r24	; 0x04
   1938a:	81 ea       	ldi	r24, 0xA1	; 161
   1938c:	99 e3       	ldi	r25, 0x39	; 57
   1938e:	a0 e0       	ldi	r26, 0x00	; 0
   19390:	81 83       	std	Z+1, r24	; 0x01
   19392:	92 83       	std	Z+2, r25	; 0x02
   19394:	a3 83       	std	Z+3, r26	; 0x03
   19396:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1939a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1939e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193a2:	c9 01       	movw	r24, r18
   193a4:	88 27       	eor	r24, r24
   193a6:	94 70       	andi	r25, 0x04	; 4
   193a8:	32 ff       	sbrs	r19, 2
   193aa:	09 c0       	rjmp	.+18     	; 0x193be <lif_checkdirindex+0xb2>
   193ac:	68 e1       	ldi	r22, 0x18	; 24
   193ae:	76 e1       	ldi	r23, 0x16	; 22
   193b0:	ce 01       	movw	r24, r28
   193b2:	3c db       	rcall	.-2440   	; 0x18a2c <lif_dump_vol>
   193b4:	80 e0       	ldi	r24, 0x00	; 0
   193b6:	90 e0       	ldi	r25, 0x00	; 0
   193b8:	02 c0       	rjmp	.+4      	; 0x193be <lif_checkdirindex+0xb2>
   193ba:	81 e0       	ldi	r24, 0x01	; 1
   193bc:	90 e0       	ldi	r25, 0x00	; 0
   193be:	ad b7       	in	r26, 0x3d	; 61
   193c0:	be b7       	in	r27, 0x3e	; 62
   193c2:	17 96       	adiw	r26, 0x07	; 7
   193c4:	0f b6       	in	r0, 0x3f	; 63
   193c6:	f8 94       	cli
   193c8:	be bf       	out	0x3e, r27	; 62
   193ca:	0f be       	out	0x3f, r0	; 63
   193cc:	ad bf       	out	0x3d, r26	; 61
   193ce:	df 91       	pop	r29
   193d0:	cf 91       	pop	r28
   193d2:	ff 90       	pop	r15
   193d4:	ef 90       	pop	r14
   193d6:	df 90       	pop	r13
   193d8:	cf 90       	pop	r12
   193da:	08 95       	ret

000193dc <lif_readdirindex>:
   193dc:	a5 e2       	ldi	r26, 0x25	; 37
   193de:	b0 e0       	ldi	r27, 0x00	; 0
   193e0:	e4 ef       	ldi	r30, 0xF4	; 244
   193e2:	f9 ec       	ldi	r31, 0xC9	; 201
   193e4:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
   193e8:	7c 01       	movw	r14, r24
   193ea:	6b 01       	movw	r12, r22
   193ec:	8f df       	rcall	.-226    	; 0x1930c <lif_checkdirindex>
   193ee:	89 2b       	or	r24, r25
   193f0:	19 f4       	brne	.+6      	; 0x193f8 <lif_readdirindex+0x1c>
   193f2:	00 e0       	ldi	r16, 0x00	; 0
   193f4:	10 e0       	ldi	r17, 0x00	; 0
   193f6:	54 c0       	rjmp	.+168    	; 0x194a0 <lif_readdirindex+0xc4>
   193f8:	f7 01       	movw	r30, r14
   193fa:	85 a5       	ldd	r24, Z+45	; 0x2d
   193fc:	96 a5       	ldd	r25, Z+46	; 0x2e
   193fe:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19400:	b0 a9       	ldd	r27, Z+48	; 0x30
   19402:	44 27       	eor	r20, r20
   19404:	58 2f       	mov	r21, r24
   19406:	69 2f       	mov	r22, r25
   19408:	7a 2f       	mov	r23, r26
   1940a:	c6 01       	movw	r24, r12
   1940c:	0d 2c       	mov	r0, r13
   1940e:	00 0c       	add	r0, r0
   19410:	aa 0b       	sbc	r26, r26
   19412:	bb 0b       	sbc	r27, r27
   19414:	35 e0       	ldi	r19, 0x05	; 5
   19416:	88 0f       	add	r24, r24
   19418:	99 1f       	adc	r25, r25
   1941a:	aa 1f       	adc	r26, r26
   1941c:	bb 1f       	adc	r27, r27
   1941e:	3a 95       	dec	r19
   19420:	d1 f7       	brne	.-12     	; 0x19416 <lif_readdirindex+0x3a>
   19422:	9a 01       	movw	r18, r20
   19424:	ab 01       	movw	r20, r22
   19426:	28 0f       	add	r18, r24
   19428:	39 1f       	adc	r19, r25
   1942a:	4a 1f       	adc	r20, r26
   1942c:	5b 1f       	adc	r21, r27
   1942e:	00 e2       	ldi	r16, 0x20	; 32
   19430:	10 e0       	ldi	r17, 0x00	; 0
   19432:	be 01       	movw	r22, r28
   19434:	6a 5f       	subi	r22, 0xFA	; 250
   19436:	7f 4f       	sbci	r23, 0xFF	; 255
   19438:	c7 01       	movw	r24, r14
   1943a:	0e 94 b4 c0 	call	0x18168	; 0x18168 <lif_read>
   1943e:	60 32       	cpi	r22, 0x20	; 32
   19440:	71 05       	cpc	r23, r1
   19442:	81 05       	cpc	r24, r1
   19444:	91 05       	cpc	r25, r1
   19446:	a8 f2       	brcs	.-86     	; 0x193f2 <lif_readdirindex+0x16>
   19448:	b7 01       	movw	r22, r14
   1944a:	ce 01       	movw	r24, r28
   1944c:	06 96       	adiw	r24, 0x06	; 6
   1944e:	91 d9       	rcall	.-3294   	; 0x18772 <lif_str2dir>
   19450:	f7 01       	movw	r30, r14
   19452:	e6 5a       	subi	r30, 0xA6	; 166
   19454:	ff 4f       	sbci	r31, 0xFF	; 255
   19456:	80 81       	ld	r24, Z
   19458:	91 81       	ldd	r25, Z+1	; 0x01
   1945a:	01 96       	adiw	r24, 0x01	; 1
   1945c:	19 f4       	brne	.+6      	; 0x19464 <lif_readdirindex+0x88>
   1945e:	f7 01       	movw	r30, r14
   19460:	d3 a2       	std	Z+35, r13	; 0x23
   19462:	c2 a2       	std	Z+34, r12	; 0x22
   19464:	c7 01       	movw	r24, r14
   19466:	83 dd       	rcall	.-1274   	; 0x18f6e <lif_check_dir>
   19468:	8c 01       	movw	r16, r24
   1946a:	89 2b       	or	r24, r25
   1946c:	b9 f4       	brne	.+46     	; 0x1949c <lif_readdirindex+0xc0>
   1946e:	ed b7       	in	r30, 0x3d	; 61
   19470:	fe b7       	in	r31, 0x3e	; 62
   19472:	d5 82       	std	Z+5, r13	; 0x05
   19474:	c4 82       	std	Z+4, r12	; 0x04
   19476:	81 e8       	ldi	r24, 0x81	; 129
   19478:	99 e3       	ldi	r25, 0x39	; 57
   1947a:	a0 e0       	ldi	r26, 0x00	; 0
   1947c:	81 83       	std	Z+1, r24	; 0x01
   1947e:	92 83       	std	Z+2, r25	; 0x02
   19480:	a3 83       	std	Z+3, r26	; 0x03
   19482:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   19486:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1948a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1948e:	92 ff       	sbrs	r25, 2
   19490:	b0 cf       	rjmp	.-160    	; 0x193f2 <lif_readdirindex+0x16>
   19492:	69 e2       	ldi	r22, 0x29	; 41
   19494:	76 e1       	ldi	r23, 0x16	; 22
   19496:	c7 01       	movw	r24, r14
   19498:	c9 da       	rcall	.-2670   	; 0x18a2c <lif_dump_vol>
   1949a:	02 c0       	rjmp	.+4      	; 0x194a0 <lif_readdirindex+0xc4>
   1949c:	01 e0       	ldi	r16, 0x01	; 1
   1949e:	10 e0       	ldi	r17, 0x00	; 0
   194a0:	c8 01       	movw	r24, r16
   194a2:	a5 96       	adiw	r28, 0x25	; 37
   194a4:	e8 e0       	ldi	r30, 0x08	; 8
   194a6:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

000194aa <lif_writedirindex>:
   194aa:	a0 e2       	ldi	r26, 0x20	; 32
   194ac:	b0 e0       	ldi	r27, 0x00	; 0
   194ae:	eb e5       	ldi	r30, 0x5B	; 91
   194b0:	fa ec       	ldi	r31, 0xCA	; 202
   194b2:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
   194b6:	5c 01       	movw	r10, r24
   194b8:	6b 01       	movw	r12, r22
   194ba:	59 dd       	rcall	.-1358   	; 0x18f6e <lif_check_dir>
   194bc:	7c 01       	movw	r14, r24
   194be:	89 2b       	or	r24, r25
   194c0:	71 f4       	brne	.+28     	; 0x194de <lif_writedirindex+0x34>
   194c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   194c6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194ca:	92 fd       	sbrc	r25, 2
   194cc:	03 c0       	rjmp	.+6      	; 0x194d4 <lif_writedirindex+0x2a>
   194ce:	e1 2c       	mov	r14, r1
   194d0:	f1 2c       	mov	r15, r1
   194d2:	42 c0       	rjmp	.+132    	; 0x19558 <lif_writedirindex+0xae>
   194d4:	6a e3       	ldi	r22, 0x3A	; 58
   194d6:	76 e1       	ldi	r23, 0x16	; 22
   194d8:	c5 01       	movw	r24, r10
   194da:	a8 da       	rcall	.-2736   	; 0x18a2c <lif_dump_vol>
   194dc:	3d c0       	rjmp	.+122    	; 0x19558 <lif_writedirindex+0xae>
   194de:	b6 01       	movw	r22, r12
   194e0:	c5 01       	movw	r24, r10
   194e2:	14 df       	rcall	.-472    	; 0x1930c <lif_checkdirindex>
   194e4:	89 2b       	or	r24, r25
   194e6:	99 f3       	breq	.-26     	; 0x194ce <lif_writedirindex+0x24>
   194e8:	f5 01       	movw	r30, r10
   194ea:	e6 5a       	subi	r30, 0xA6	; 166
   194ec:	ff 4f       	sbci	r31, 0xFF	; 255
   194ee:	80 81       	ld	r24, Z
   194f0:	91 81       	ldd	r25, Z+1	; 0x01
   194f2:	01 96       	adiw	r24, 0x01	; 1
   194f4:	19 f4       	brne	.+6      	; 0x194fc <lif_writedirindex+0x52>
   194f6:	f5 01       	movw	r30, r10
   194f8:	d3 a2       	std	Z+35, r13	; 0x23
   194fa:	c2 a2       	std	Z+34, r12	; 0x22
   194fc:	f5 01       	movw	r30, r10
   194fe:	85 a5       	ldd	r24, Z+45	; 0x2d
   19500:	96 a5       	ldd	r25, Z+46	; 0x2e
   19502:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19504:	b0 a9       	ldd	r27, Z+48	; 0x30
   19506:	ba 2f       	mov	r27, r26
   19508:	a9 2f       	mov	r26, r25
   1950a:	98 2f       	mov	r25, r24
   1950c:	88 27       	eor	r24, r24
   1950e:	0d 2c       	mov	r0, r13
   19510:	00 0c       	add	r0, r0
   19512:	ee 08       	sbc	r14, r14
   19514:	ff 08       	sbc	r15, r15
   19516:	35 e0       	ldi	r19, 0x05	; 5
   19518:	cc 0c       	add	r12, r12
   1951a:	dd 1c       	adc	r13, r13
   1951c:	ee 1c       	adc	r14, r14
   1951e:	ff 1c       	adc	r15, r15
   19520:	3a 95       	dec	r19
   19522:	d1 f7       	brne	.-12     	; 0x19518 <lif_writedirindex+0x6e>
   19524:	c8 0e       	add	r12, r24
   19526:	d9 1e       	adc	r13, r25
   19528:	ea 1e       	adc	r14, r26
   1952a:	fb 1e       	adc	r15, r27
   1952c:	be 01       	movw	r22, r28
   1952e:	6f 5f       	subi	r22, 0xFF	; 255
   19530:	7f 4f       	sbci	r23, 0xFF	; 255
   19532:	c5 01       	movw	r24, r10
   19534:	b3 d8       	rcall	.-3738   	; 0x1869c <lif_dir2str>
   19536:	00 e2       	ldi	r16, 0x20	; 32
   19538:	10 e0       	ldi	r17, 0x00	; 0
   1953a:	a7 01       	movw	r20, r14
   1953c:	96 01       	movw	r18, r12
   1953e:	be 01       	movw	r22, r28
   19540:	6f 5f       	subi	r22, 0xFF	; 255
   19542:	7f 4f       	sbci	r23, 0xFF	; 255
   19544:	c5 01       	movw	r24, r10
   19546:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
   1954a:	31 e0       	ldi	r19, 0x01	; 1
   1954c:	20 e0       	ldi	r18, 0x00	; 0
   1954e:	80 97       	sbiw	r24, 0x20	; 32
   19550:	0c f4       	brge	.+2      	; 0x19554 <lif_writedirindex+0xaa>
   19552:	30 e0       	ldi	r19, 0x00	; 0
   19554:	e3 2e       	mov	r14, r19
   19556:	f2 2e       	mov	r15, r18
   19558:	c7 01       	movw	r24, r14
   1955a:	a0 96       	adiw	r28, 0x20	; 32
   1955c:	ea e0       	ldi	r30, 0x0A	; 10
   1955e:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

00019562 <lif_writedirEOF>:
   19562:	0f 93       	push	r16
   19564:	1f 93       	push	r17
   19566:	cf 93       	push	r28
   19568:	df 93       	push	r29
   1956a:	ec 01       	movw	r28, r24
   1956c:	8b 01       	movw	r16, r22
   1956e:	4f da       	rcall	.-2914   	; 0x18a0e <lif_dir_clear>
   19570:	fe 01       	movw	r30, r28
   19572:	e6 5a       	subi	r30, 0xA6	; 166
   19574:	ff 4f       	sbci	r31, 0xFF	; 255
   19576:	8f ef       	ldi	r24, 0xFF	; 255
   19578:	9f ef       	ldi	r25, 0xFF	; 255
   1957a:	91 83       	std	Z+1, r25	; 0x01
   1957c:	80 83       	st	Z, r24
   1957e:	1b a3       	std	Y+35, r17	; 0x23
   19580:	0a a3       	std	Y+34, r16	; 0x22
   19582:	b8 01       	movw	r22, r16
   19584:	ce 01       	movw	r24, r28
   19586:	91 df       	rcall	.-222    	; 0x194aa <lif_writedirindex>
   19588:	df 91       	pop	r29
   1958a:	cf 91       	pop	r28
   1958c:	1f 91       	pop	r17
   1958e:	0f 91       	pop	r16
   19590:	08 95       	ret

00019592 <lif_updatefree>:
   19592:	2f 92       	push	r2
   19594:	3f 92       	push	r3
   19596:	4f 92       	push	r4
   19598:	5f 92       	push	r5
   1959a:	6f 92       	push	r6
   1959c:	7f 92       	push	r7
   1959e:	8f 92       	push	r8
   195a0:	af 92       	push	r10
   195a2:	bf 92       	push	r11
   195a4:	cf 92       	push	r12
   195a6:	df 92       	push	r13
   195a8:	ef 92       	push	r14
   195aa:	ff 92       	push	r15
   195ac:	0f 93       	push	r16
   195ae:	1f 93       	push	r17
   195b0:	cf 93       	push	r28
   195b2:	df 93       	push	r29
   195b4:	cd b7       	in	r28, 0x3d	; 61
   195b6:	de b7       	in	r29, 0x3e	; 62
   195b8:	2f 97       	sbiw	r28, 0x0f	; 15
   195ba:	0f b6       	in	r0, 0x3f	; 63
   195bc:	f8 94       	cli
   195be:	de bf       	out	0x3e, r29	; 62
   195c0:	0f be       	out	0x3f, r0	; 63
   195c2:	cd bf       	out	0x3d, r28	; 61
   195c4:	9f 87       	std	Y+15, r25	; 0x0f
   195c6:	8e 87       	std	Y+14, r24	; 0x0e
   195c8:	fc 01       	movw	r30, r24
   195ca:	24 84       	ldd	r2, Z+12	; 0x0c
   195cc:	35 84       	ldd	r3, Z+13	; 0x0d
   195ce:	46 84       	ldd	r4, Z+14	; 0x0e
   195d0:	57 84       	ldd	r5, Z+15	; 0x0f
   195d2:	80 89       	ldd	r24, Z+16	; 0x10
   195d4:	91 89       	ldd	r25, Z+17	; 0x11
   195d6:	a2 89       	ldd	r26, Z+18	; 0x12
   195d8:	b3 89       	ldd	r27, Z+19	; 0x13
   195da:	80 8f       	std	Z+24, r24	; 0x18
   195dc:	91 8f       	std	Z+25, r25	; 0x19
   195de:	a2 8f       	std	Z+26, r26	; 0x1a
   195e0:	b3 8f       	std	Z+27, r27	; 0x1b
   195e2:	14 8a       	std	Z+20, r1	; 0x14
   195e4:	15 8a       	std	Z+21, r1	; 0x15
   195e6:	16 8a       	std	Z+22, r1	; 0x16
   195e8:	17 8a       	std	Z+23, r1	; 0x17
   195ea:	17 8e       	std	Z+31, r1	; 0x1f
   195ec:	16 8e       	std	Z+30, r1	; 0x1e
   195ee:	15 8e       	std	Z+29, r1	; 0x1d
   195f0:	14 8e       	std	Z+28, r1	; 0x1c
   195f2:	11 a2       	std	Z+33, r1	; 0x21
   195f4:	10 a2       	std	Z+32, r1	; 0x20
   195f6:	13 a2       	std	Z+35, r1	; 0x23
   195f8:	12 a2       	std	Z+34, r1	; 0x22
   195fa:	cc 24       	eor	r12, r12
   195fc:	c3 94       	inc	r12
   195fe:	d1 2c       	mov	r13, r1
   19600:	0f ef       	ldi	r16, 0xFF	; 255
   19602:	1f ef       	ldi	r17, 0xFF	; 255
   19604:	e6 5a       	subi	r30, 0xA6	; 166
   19606:	ff 4f       	sbci	r31, 0xFF	; 255
   19608:	f9 87       	std	Y+9, r31	; 0x09
   1960a:	e8 87       	std	Y+8, r30	; 0x08
   1960c:	ae 84       	ldd	r10, Y+14	; 0x0e
   1960e:	bf 84       	ldd	r11, Y+15	; 0x0f
   19610:	fc e5       	ldi	r31, 0x5C	; 92
   19612:	af 0e       	add	r10, r31
   19614:	b1 1c       	adc	r11, r1
   19616:	8e 85       	ldd	r24, Y+14	; 0x0e
   19618:	9f 85       	ldd	r25, Y+15	; 0x0f
   1961a:	80 5a       	subi	r24, 0xA0	; 160
   1961c:	9f 4f       	sbci	r25, 0xFF	; 255
   1961e:	9b 87       	std	Y+11, r25	; 0x0b
   19620:	8a 87       	std	Y+10, r24	; 0x0a
   19622:	ee 85       	ldd	r30, Y+14	; 0x0e
   19624:	ff 85       	ldd	r31, Y+15	; 0x0f
   19626:	e1 5b       	subi	r30, 0xB1	; 177
   19628:	ff 4f       	sbci	r31, 0xFF	; 255
   1962a:	fd 87       	std	Y+13, r31	; 0x0d
   1962c:	ec 87       	std	Y+12, r30	; 0x0c
   1962e:	84 e3       	ldi	r24, 0x34	; 52
   19630:	99 e3       	ldi	r25, 0x39	; 57
   19632:	3c 01       	movw	r6, r24
   19634:	81 2c       	mov	r8, r1
   19636:	76 01       	movw	r14, r12
   19638:	21 e0       	ldi	r18, 0x01	; 1
   1963a:	e2 1a       	sub	r14, r18
   1963c:	f1 08       	sbc	r15, r1
   1963e:	b7 01       	movw	r22, r14
   19640:	8e 85       	ldd	r24, Y+14	; 0x0e
   19642:	9f 85       	ldd	r25, Y+15	; 0x0f
   19644:	cb de       	rcall	.-618    	; 0x193dc <lif_readdirindex>
   19646:	89 2b       	or	r24, r25
   19648:	19 f4       	brne	.+6      	; 0x19650 <lif_updatefree+0xbe>
   1964a:	80 e0       	ldi	r24, 0x00	; 0
   1964c:	90 e0       	ldi	r25, 0x00	; 0
   1964e:	91 c0       	rjmp	.+290    	; 0x19772 <lif_updatefree+0x1e0>
   19650:	e8 85       	ldd	r30, Y+8	; 0x08
   19652:	f9 85       	ldd	r31, Y+9	; 0x09
   19654:	80 81       	ld	r24, Z
   19656:	91 81       	ldd	r25, Z+1	; 0x01
   19658:	8f 3f       	cpi	r24, 0xFF	; 255
   1965a:	ff ef       	ldi	r31, 0xFF	; 255
   1965c:	9f 07       	cpc	r25, r31
   1965e:	c1 f4       	brne	.+48     	; 0x19690 <lif_updatefree+0xfe>
   19660:	ee 85       	ldd	r30, Y+14	; 0x0e
   19662:	ff 85       	ldd	r31, Y+15	; 0x0f
   19664:	0f 3f       	cpi	r16, 0xFF	; 255
   19666:	2f ef       	ldi	r18, 0xFF	; 255
   19668:	12 07       	cpc	r17, r18
   1966a:	09 f4       	brne	.+2      	; 0x1966e <lif_updatefree+0xdc>
   1966c:	78 c0       	rjmp	.+240    	; 0x1975e <lif_updatefree+0x1cc>
   1966e:	13 a3       	std	Z+35, r17	; 0x23
   19670:	02 a3       	std	Z+34, r16	; 0x22
   19672:	e0 1a       	sub	r14, r16
   19674:	f1 0a       	sbc	r15, r17
   19676:	86 8d       	ldd	r24, Z+30	; 0x1e
   19678:	97 8d       	ldd	r25, Z+31	; 0x1f
   1967a:	8e 19       	sub	r24, r14
   1967c:	9f 09       	sbc	r25, r15
   1967e:	97 8f       	std	Z+31, r25	; 0x1f
   19680:	86 8f       	std	Z+30, r24	; 0x1e
   19682:	b8 01       	movw	r22, r16
   19684:	cf 01       	movw	r24, r30
   19686:	6d df       	rcall	.-294    	; 0x19562 <lif_writedirEOF>
   19688:	89 2b       	or	r24, r25
   1968a:	09 f0       	breq	.+2      	; 0x1968e <lif_updatefree+0xfc>
   1968c:	6a c0       	rjmp	.+212    	; 0x19762 <lif_updatefree+0x1d0>
   1968e:	dd cf       	rjmp	.-70     	; 0x1964a <lif_updatefree+0xb8>
   19690:	89 2b       	or	r24, r25
   19692:	81 f4       	brne	.+32     	; 0x196b4 <lif_updatefree+0x122>
   19694:	0f 3f       	cpi	r16, 0xFF	; 255
   19696:	ff ef       	ldi	r31, 0xFF	; 255
   19698:	1f 07       	cpc	r17, r31
   1969a:	09 f4       	brne	.+2      	; 0x1969e <lif_updatefree+0x10c>
   1969c:	87 01       	movw	r16, r14
   1969e:	ee 85       	ldd	r30, Y+14	; 0x0e
   196a0:	ff 85       	ldd	r31, Y+15	; 0x0f
   196a2:	86 8d       	ldd	r24, Z+30	; 0x1e
   196a4:	97 8d       	ldd	r25, Z+31	; 0x1f
   196a6:	01 96       	adiw	r24, 0x01	; 1
   196a8:	97 8f       	std	Z+31, r25	; 0x1f
   196aa:	86 8f       	std	Z+30, r24	; 0x1e
   196ac:	ff ef       	ldi	r31, 0xFF	; 255
   196ae:	cf 1a       	sub	r12, r31
   196b0:	df 0a       	sbc	r13, r31
   196b2:	c1 cf       	rjmp	.-126    	; 0x19636 <lif_updatefree+0xa4>
   196b4:	f5 01       	movw	r30, r10
   196b6:	80 81       	ld	r24, Z
   196b8:	91 81       	ldd	r25, Z+1	; 0x01
   196ba:	a2 81       	ldd	r26, Z+2	; 0x02
   196bc:	b3 81       	ldd	r27, Z+3	; 0x03
   196be:	82 15       	cp	r24, r2
   196c0:	93 05       	cpc	r25, r3
   196c2:	a4 05       	cpc	r26, r4
   196c4:	b5 05       	cpc	r27, r5
   196c6:	b8 f4       	brcc	.+46     	; 0x196f6 <lif_updatefree+0x164>
   196c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   196cc:	81 ff       	sbrs	r24, 1
   196ce:	13 c0       	rjmp	.+38     	; 0x196f6 <lif_updatefree+0x164>
   196d0:	8c 85       	ldd	r24, Y+12	; 0x0c
   196d2:	9d 85       	ldd	r25, Y+13	; 0x0d
   196d4:	ed b7       	in	r30, 0x3d	; 61
   196d6:	fe b7       	in	r31, 0x3e	; 62
   196d8:	97 83       	std	Z+7, r25	; 0x07
   196da:	86 83       	std	Z+6, r24	; 0x06
   196dc:	ee 85       	ldd	r30, Y+14	; 0x0e
   196de:	ff 85       	ldd	r31, Y+15	; 0x0f
   196e0:	80 81       	ld	r24, Z
   196e2:	91 81       	ldd	r25, Z+1	; 0x01
   196e4:	ed b7       	in	r30, 0x3d	; 61
   196e6:	fe b7       	in	r31, 0x3e	; 62
   196e8:	95 83       	std	Z+5, r25	; 0x05
   196ea:	84 83       	std	Z+4, r24	; 0x04
   196ec:	61 82       	std	Z+1, r6	; 0x01
   196ee:	72 82       	std	Z+2, r7	; 0x02
   196f0:	83 82       	std	Z+3, r8	; 0x03
   196f2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   196f6:	ea 85       	ldd	r30, Y+10	; 0x0a
   196f8:	fb 85       	ldd	r31, Y+11	; 0x0b
   196fa:	80 81       	ld	r24, Z
   196fc:	91 81       	ldd	r25, Z+1	; 0x01
   196fe:	a2 81       	ldd	r26, Z+2	; 0x02
   19700:	b3 81       	ldd	r27, Z+3	; 0x03
   19702:	ee 85       	ldd	r30, Y+14	; 0x0e
   19704:	ff 85       	ldd	r31, Y+15	; 0x0f
   19706:	44 89       	ldd	r20, Z+20	; 0x14
   19708:	55 89       	ldd	r21, Z+21	; 0x15
   1970a:	66 89       	ldd	r22, Z+22	; 0x16
   1970c:	77 89       	ldd	r23, Z+23	; 0x17
   1970e:	48 0f       	add	r20, r24
   19710:	59 1f       	adc	r21, r25
   19712:	6a 1f       	adc	r22, r26
   19714:	7b 1f       	adc	r23, r27
   19716:	44 8b       	std	Z+20, r20	; 0x14
   19718:	55 8b       	std	Z+21, r21	; 0x15
   1971a:	66 8b       	std	Z+22, r22	; 0x16
   1971c:	77 8b       	std	Z+23, r23	; 0x17
   1971e:	40 8d       	ldd	r20, Z+24	; 0x18
   19720:	51 8d       	ldd	r21, Z+25	; 0x19
   19722:	62 8d       	ldd	r22, Z+26	; 0x1a
   19724:	73 8d       	ldd	r23, Z+27	; 0x1b
   19726:	48 1b       	sub	r20, r24
   19728:	59 0b       	sbc	r21, r25
   1972a:	6a 0b       	sbc	r22, r26
   1972c:	7b 0b       	sbc	r23, r27
   1972e:	40 8f       	std	Z+24, r20	; 0x18
   19730:	51 8f       	std	Z+25, r21	; 0x19
   19732:	62 8f       	std	Z+26, r22	; 0x1a
   19734:	73 8f       	std	Z+27, r23	; 0x1b
   19736:	24 8d       	ldd	r18, Z+28	; 0x1c
   19738:	35 8d       	ldd	r19, Z+29	; 0x1d
   1973a:	2f 5f       	subi	r18, 0xFF	; 255
   1973c:	3f 4f       	sbci	r19, 0xFF	; 255
   1973e:	35 8f       	std	Z+29, r19	; 0x1d
   19740:	24 8f       	std	Z+28, r18	; 0x1c
   19742:	f5 01       	movw	r30, r10
   19744:	40 81       	ld	r20, Z
   19746:	51 81       	ldd	r21, Z+1	; 0x01
   19748:	62 81       	ldd	r22, Z+2	; 0x02
   1974a:	73 81       	ldd	r23, Z+3	; 0x03
   1974c:	1c 01       	movw	r2, r24
   1974e:	2d 01       	movw	r4, r26
   19750:	24 0e       	add	r2, r20
   19752:	35 1e       	adc	r3, r21
   19754:	46 1e       	adc	r4, r22
   19756:	57 1e       	adc	r5, r23
   19758:	0f ef       	ldi	r16, 0xFF	; 255
   1975a:	1f ef       	ldi	r17, 0xFF	; 255
   1975c:	a7 cf       	rjmp	.-178    	; 0x196ac <lif_updatefree+0x11a>
   1975e:	f3 a2       	std	Z+35, r15	; 0x23
   19760:	e2 a2       	std	Z+34, r14	; 0x22
   19762:	8f ef       	ldi	r24, 0xFF	; 255
   19764:	9f ef       	ldi	r25, 0xFF	; 255
   19766:	ee 85       	ldd	r30, Y+14	; 0x0e
   19768:	ff 85       	ldd	r31, Y+15	; 0x0f
   1976a:	91 a3       	std	Z+33, r25	; 0x21
   1976c:	80 a3       	std	Z+32, r24	; 0x20
   1976e:	8e 85       	ldd	r24, Y+14	; 0x0e
   19770:	9f 85       	ldd	r25, Y+15	; 0x0f
   19772:	2f 96       	adiw	r28, 0x0f	; 15
   19774:	0f b6       	in	r0, 0x3f	; 63
   19776:	f8 94       	cli
   19778:	de bf       	out	0x3e, r29	; 62
   1977a:	0f be       	out	0x3f, r0	; 63
   1977c:	cd bf       	out	0x3d, r28	; 61
   1977e:	df 91       	pop	r29
   19780:	cf 91       	pop	r28
   19782:	1f 91       	pop	r17
   19784:	0f 91       	pop	r16
   19786:	ff 90       	pop	r15
   19788:	ef 90       	pop	r14
   1978a:	df 90       	pop	r13
   1978c:	cf 90       	pop	r12
   1978e:	bf 90       	pop	r11
   19790:	af 90       	pop	r10
   19792:	8f 90       	pop	r8
   19794:	7f 90       	pop	r7
   19796:	6f 90       	pop	r6
   19798:	5f 90       	pop	r5
   1979a:	4f 90       	pop	r4
   1979c:	3f 90       	pop	r3
   1979e:	2f 90       	pop	r2
   197a0:	08 95       	ret

000197a2 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   197a2:	a9 e2       	ldi	r26, 0x29	; 41
   197a4:	b1 e0       	ldi	r27, 0x01	; 1
   197a6:	e7 ed       	ldi	r30, 0xD7	; 215
   197a8:	fb ec       	ldi	r31, 0xCB	; 203
   197aa:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
   197ae:	4c 01       	movw	r8, r24
   197b0:	3b 01       	movw	r6, r22
   197b2:	19 01       	movw	r2, r18
   197b4:	2a 01       	movw	r4, r20
   197b6:	ca 5d       	subi	r28, 0xDA	; 218
   197b8:	de 4f       	sbci	r29, 0xFE	; 254
   197ba:	e8 82       	st	Y, r14
   197bc:	f9 82       	std	Y+1, r15	; 0x01
   197be:	0a 83       	std	Y+2, r16	; 0x02
   197c0:	1b 83       	std	Y+3, r17	; 0x03
   197c2:	c6 52       	subi	r28, 0x26	; 38
   197c4:	d1 40       	sbci	r29, 0x01	; 1
   197c6:	c2 5e       	subi	r28, 0xE2	; 226
   197c8:	de 4f       	sbci	r29, 0xFE	; 254
   197ca:	a8 82       	st	Y, r10
   197cc:	b9 82       	std	Y+1, r11	; 0x01
   197ce:	ca 82       	std	Y+2, r12	; 0x02
   197d0:	db 82       	std	Y+3, r13	; 0x03
   197d2:	ce 51       	subi	r28, 0x1E	; 30
   197d4:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   197d6:	80 e0       	ldi	r24, 0x00	; 0
   197d8:	90 e0       	ldi	r25, 0x00	; 0
   197da:	0e 94 58 39 	call	0x72b0	; 0x72b0 <time>
   197de:	5b 01       	movw	r10, r22
   197e0:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   197e2:	64 e7       	ldi	r22, 0x74	; 116
   197e4:	70 e0       	ldi	r23, 0x00	; 0
   197e6:	80 e0       	ldi	r24, 0x00	; 0
   197e8:	90 e0       	ldi	r25, 0x00	; 0
   197ea:	0e 94 c6 bf 	call	0x17f8c	; 0x17f8c <lif_calloc>
   197ee:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   197f0:	89 2b       	or	r24, r25
   197f2:	09 f4       	brne	.+2      	; 0x197f6 <lif_create_volume+0x54>
   197f4:	b6 c2       	rjmp	.+1388   	; 0x19d62 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   197f6:	c2 5e       	subi	r28, 0xE2	; 226
   197f8:	de 4f       	sbci	r29, 0xFE	; 254
   197fa:	28 81       	ld	r18, Y
   197fc:	39 81       	ldd	r19, Y+1	; 0x01
   197fe:	4a 81       	ldd	r20, Y+2	; 0x02
   19800:	5b 81       	ldd	r21, Y+3	; 0x03
   19802:	ce 51       	subi	r28, 0x1E	; 30
   19804:	d1 40       	sbci	r29, 0x01	; 1
   19806:	ed b7       	in	r30, 0x3d	; 61
   19808:	fe b7       	in	r31, 0x3e	; 62
   1980a:	20 8b       	std	Z+16, r18	; 0x10
   1980c:	31 8b       	std	Z+17, r19	; 0x11
   1980e:	42 8b       	std	Z+18, r20	; 0x12
   19810:	53 8b       	std	Z+19, r21	; 0x13
   19812:	ca 5d       	subi	r28, 0xDA	; 218
   19814:	de 4f       	sbci	r29, 0xFE	; 254
   19816:	28 81       	ld	r18, Y
   19818:	39 81       	ldd	r19, Y+1	; 0x01
   1981a:	4a 81       	ldd	r20, Y+2	; 0x02
   1981c:	5b 81       	ldd	r21, Y+3	; 0x03
   1981e:	c6 52       	subi	r28, 0x26	; 38
   19820:	d1 40       	sbci	r29, 0x01	; 1
   19822:	24 87       	std	Z+12, r18	; 0x0c
   19824:	35 87       	std	Z+13, r19	; 0x0d
   19826:	46 87       	std	Z+14, r20	; 0x0e
   19828:	57 87       	std	Z+15, r21	; 0x0f
   1982a:	20 86       	std	Z+8, r2	; 0x08
   1982c:	31 86       	std	Z+9, r3	; 0x09
   1982e:	42 86       	std	Z+10, r4	; 0x0a
   19830:	53 86       	std	Z+11, r5	; 0x0b
   19832:	77 82       	std	Z+7, r7	; 0x07
   19834:	66 82       	std	Z+6, r6	; 0x06
   19836:	95 82       	std	Z+5, r9	; 0x05
   19838:	84 82       	std	Z+4, r8	; 0x04
   1983a:	8f e0       	ldi	r24, 0x0F	; 15
   1983c:	9a e3       	ldi	r25, 0x3A	; 58
   1983e:	a0 e0       	ldi	r26, 0x00	; 0
   19840:	81 83       	std	Z+1, r24	; 0x01
   19842:	92 83       	std	Z+2, r25	; 0x02
   19844:	a3 83       	std	Z+3, r26	; 0x03
   19846:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   1984a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1984e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19852:	92 ff       	sbrs	r25, 2
   19854:	04 c0       	rjmp	.+8      	; 0x1985e <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19856:	6c e4       	ldi	r22, 0x4C	; 76
   19858:	76 e1       	ldi	r23, 0x16	; 22
   1985a:	c7 01       	movw	r24, r14

    lif_image_clear(LIF);
   1985c:	e7 d8       	rcall	.-3634   	; 0x18a2c <lif_dump_vol>
   1985e:	c7 01       	movw	r24, r14

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19860:	d0 d8       	rcall	.-3680   	; 0x18a02 <lif_image_clear>
   19862:	80 e0       	ldi	r24, 0x00	; 0
   19864:	90 e8       	ldi	r25, 0x80	; 128
   19866:	f7 01       	movw	r30, r14
   19868:	95 a3       	std	Z+37, r25	; 0x25
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1986a:	84 a3       	std	Z+36, r24	; 0x24
   1986c:	46 e0       	ldi	r20, 0x06	; 6
   1986e:	50 e0       	ldi	r21, 0x00	; 0
   19870:	b3 01       	movw	r22, r6
   19872:	c7 01       	movw	r24, r14
   19874:	86 96       	adiw	r24, 0x26	; 38
   19876:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1987a:	f7 01       	movw	r30, r14
   1987c:	25 a6       	std	Z+45, r2	; 0x2d
   1987e:	36 a6       	std	Z+46, r3	; 0x2e
   19880:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19882:	50 aa       	std	Z+48, r5	; 0x30
   19884:	ca 5d       	subi	r28, 0xDA	; 218
   19886:	de 4f       	sbci	r29, 0xFE	; 254
   19888:	28 81       	ld	r18, Y
   1988a:	39 81       	ldd	r19, Y+1	; 0x01
   1988c:	4a 81       	ldd	r20, Y+2	; 0x02
   1988e:	5b 81       	ldd	r21, Y+3	; 0x03
   19890:	c6 52       	subi	r28, 0x26	; 38
   19892:	d1 40       	sbci	r29, 0x01	; 1
   19894:	25 ab       	std	Z+53, r18	; 0x35
   19896:	36 ab       	std	Z+54, r19	; 0x36
   19898:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1989a:	50 af       	std	Z+56, r21	; 0x38
   1989c:	80 e0       	ldi	r24, 0x00	; 0
   1989e:	90 e1       	ldi	r25, 0x10	; 16
   198a0:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   198a2:	81 ab       	std	Z+49, r24	; 0x31
   198a4:	fd 96       	adiw	r30, 0x3d	; 61
   198a6:	10 82       	st	Z, r1
   198a8:	11 82       	std	Z+1, r1	; 0x01
   198aa:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   198ac:	13 82       	std	Z+3, r1	; 0x03
   198ae:	34 96       	adiw	r30, 0x04	; 4
   198b0:	10 82       	st	Z, r1
   198b2:	11 82       	std	Z+1, r1	; 0x01
   198b4:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   198b6:	13 82       	std	Z+3, r1	; 0x03
   198b8:	34 96       	adiw	r30, 0x04	; 4
   198ba:	10 82       	st	Z, r1
   198bc:	11 82       	std	Z+1, r1	; 0x01
   198be:	12 82       	std	Z+2, r1	; 0x02
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   198c0:	13 82       	std	Z+3, r1	; 0x03
   198c2:	a7 01       	movw	r20, r14
   198c4:	47 5b       	subi	r20, 0xB7	; 183
   198c6:	5f 4f       	sbci	r21, 0xFF	; 255
   198c8:	c6 01       	movw	r24, r12
   198ca:	b5 01       	movw	r22, r10
   198cc:	0e 94 2a c4 	call	0x18854	; 0x18854 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   198d0:	c4 01       	movw	r24, r8
   198d2:	0e 94 11 c0 	call	0x18022	; 0x18022 <lif_stralloc>
   198d6:	d7 01       	movw	r26, r14
   198d8:	8d 93       	st	X+, r24
    if(LIF->name == NULL)
   198da:	9c 93       	st	X, r25
   198dc:	89 2b       	or	r24, r25
   198de:	09 f4       	brne	.+2      	; 0x198e2 <lif_create_volume+0x140>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   198e0:	35 c2       	rjmp	.+1130   	; 0x19d4c <lif_create_volume+0x5aa>
   198e2:	c2 5e       	subi	r28, 0xE2	; 226
   198e4:	de 4f       	sbci	r29, 0xFE	; 254
   198e6:	28 81       	ld	r18, Y
   198e8:	39 81       	ldd	r19, Y+1	; 0x01
   198ea:	4a 81       	ldd	r20, Y+2	; 0x02
   198ec:	5b 81       	ldd	r21, Y+3	; 0x03
   198ee:	ce 51       	subi	r28, 0x1E	; 30
   198f0:	d1 40       	sbci	r29, 0x01	; 1
   198f2:	f7 01       	movw	r30, r14
   198f4:	20 8b       	std	Z+16, r18	; 0x10
   198f6:	31 8b       	std	Z+17, r19	; 0x11
   198f8:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   198fa:	53 8b       	std	Z+19, r21	; 0x13
   198fc:	ca 5d       	subi	r28, 0xDA	; 218
   198fe:	de 4f       	sbci	r29, 0xFE	; 254
   19900:	88 81       	ld	r24, Y
   19902:	99 81       	ldd	r25, Y+1	; 0x01
   19904:	aa 81       	ldd	r26, Y+2	; 0x02
   19906:	bb 81       	ldd	r27, Y+3	; 0x03
   19908:	c6 52       	subi	r28, 0x26	; 38
   1990a:	d1 40       	sbci	r29, 0x01	; 1
   1990c:	82 0d       	add	r24, r2
   1990e:	93 1d       	adc	r25, r3
   19910:	a4 1d       	adc	r26, r4
   19912:	b5 1d       	adc	r27, r5
   19914:	84 87       	std	Z+12, r24	; 0x0c
   19916:	95 87       	std	Z+13, r25	; 0x0d
   19918:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1991a:	b7 87       	std	Z+15, r27	; 0x0f
   1991c:	82 0f       	add	r24, r18
   1991e:	93 1f       	adc	r25, r19
   19920:	a4 1f       	adc	r26, r20
   19922:	b5 1f       	adc	r27, r21
   19924:	84 83       	std	Z+4, r24	; 0x04
   19926:	95 83       	std	Z+5, r25	; 0x05
   19928:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1992a:	b7 83       	std	Z+7, r27	; 0x07
   1992c:	ba 2f       	mov	r27, r26
   1992e:	a9 2f       	mov	r26, r25
   19930:	98 2f       	mov	r25, r24
   19932:	88 27       	eor	r24, r24
   19934:	80 87       	std	Z+8, r24	; 0x08
   19936:	91 87       	std	Z+9, r25	; 0x09
   19938:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   1993a:	b3 87       	std	Z+11, r27	; 0x0b
   1993c:	20 8f       	std	Z+24, r18	; 0x18
   1993e:	31 8f       	std	Z+25, r19	; 0x19
   19940:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19942:	53 8f       	std	Z+27, r21	; 0x1b
   19944:	14 8a       	std	Z+20, r1	; 0x14
   19946:	15 8a       	std	Z+21, r1	; 0x15
   19948:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   1994a:	17 8a       	std	Z+23, r1	; 0x17
   1994c:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   1994e:	14 8e       	std	Z+28, r1	; 0x1c
   19950:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19952:	16 8e       	std	Z+30, r1	; 0x1e
   19954:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19956:	10 a2       	std	Z+32, r1	; 0x20
   19958:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1995a:	12 a2       	std	Z+34, r1	; 0x22
   1995c:	61 2c       	mov	r6, r1
   1995e:	77 24       	eor	r7, r7
   19960:	73 94       	inc	r7
   19962:	9e 01       	movw	r18, r28
   19964:	2c 5e       	subi	r18, 0xEC	; 236
   19966:	3f 4f       	sbci	r19, 0xFF	; 255
   19968:	49 01       	movw	r8, r18
   1996a:	d9 01       	movw	r26, r18
   1996c:	f3 01       	movw	r30, r6
   1996e:	1d 92       	st	X+, r1
   19970:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19972:	e9 f7       	brne	.-6      	; 0x1996e <lif_create_volume+0x1cc>
   19974:	b9 01       	movw	r22, r18
   19976:	c7 01       	movw	r24, r14
   19978:	0e 94 42 c2 	call	0x18484	; 0x18484 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1997c:	61 e1       	ldi	r22, 0x11	; 17
   1997e:	79 e0       	ldi	r23, 0x09	; 9
   19980:	d7 01       	movw	r26, r14
   19982:	8d 91       	ld	r24, X+
   19984:	9c 91       	ld	r25, X
   19986:	0e 94 30 c0 	call	0x18060	; 0x18060 <lif_open>
   1998a:	f7 01       	movw	r30, r14
   1998c:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   1998e:	82 83       	std	Z+2, r24	; 0x02
   19990:	89 2b       	or	r24, r25
   19992:	09 f4       	brne	.+2      	; 0x19996 <lif_create_volume+0x1f4>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19994:	db c1       	rjmp	.+950    	; 0x19d4c <lif_create_volume+0x5aa>
   19996:	00 e0       	ldi	r16, 0x00	; 0
   19998:	11 e0       	ldi	r17, 0x01	; 1
   1999a:	20 e0       	ldi	r18, 0x00	; 0
   1999c:	30 e0       	ldi	r19, 0x00	; 0
   1999e:	a9 01       	movw	r20, r18
   199a0:	b4 01       	movw	r22, r8
   199a2:	c7 01       	movw	r24, r14
   199a4:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
   199a8:	9c 01       	movw	r18, r24
   199aa:	99 0f       	add	r25, r25
   199ac:	44 0b       	sbc	r20, r20
   199ae:	55 0b       	sbc	r21, r21
   199b0:	ca 5e       	subi	r28, 0xEA	; 234
   199b2:	de 4f       	sbci	r29, 0xFE	; 254
   199b4:	28 83       	st	Y, r18
   199b6:	39 83       	std	Y+1, r19	; 0x01
   199b8:	4a 83       	std	Y+2, r20	; 0x02
   199ba:	5b 83       	std	Y+3, r21	; 0x03
   199bc:	c6 51       	subi	r28, 0x16	; 22

    if(size < LIF_SECTOR_SIZE)
   199be:	d1 40       	sbci	r29, 0x01	; 1
   199c0:	2f 3f       	cpi	r18, 0xFF	; 255
   199c2:	31 05       	cpc	r19, r1
   199c4:	41 05       	cpc	r20, r1
   199c6:	51 05       	cpc	r21, r1
   199c8:	09 f0       	breq	.+2      	; 0x199cc <lif_create_volume+0x22a>
   199ca:	0c f4       	brge	.+2      	; 0x199ce <lif_create_volume+0x22c>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   199cc:	bf c1       	rjmp	.+894    	; 0x19d4c <lif_create_volume+0x5aa>
   199ce:	d4 01       	movw	r26, r8
   199d0:	f3 01       	movw	r30, r6
   199d2:	1d 92       	st	X+, r1
   199d4:	31 97       	sbiw	r30, 0x01	; 1

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   199d6:	e9 f7       	brne	.-6      	; 0x199d2 <lif_create_volume+0x230>
   199d8:	21 e0       	ldi	r18, 0x01	; 1
   199da:	30 e0       	ldi	r19, 0x00	; 0
   199dc:	40 e0       	ldi	r20, 0x00	; 0
   199de:	50 e0       	ldi	r21, 0x00	; 0
   199e0:	c6 5e       	subi	r28, 0xE6	; 230
   199e2:	de 4f       	sbci	r29, 0xFE	; 254
   199e4:	28 83       	st	Y, r18
   199e6:	39 83       	std	Y+1, r19	; 0x01
   199e8:	4a 83       	std	Y+2, r20	; 0x02
   199ea:	5b 83       	std	Y+3, r21	; 0x03
   199ec:	ca 51       	subi	r28, 0x1A	; 26
   199ee:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   199f0:	64 01       	movw	r12, r8
   199f2:	82 e0       	ldi	r24, 0x02	; 2
   199f4:	9a e3       	ldi	r25, 0x3A	; 58
   199f6:	3c 01       	movw	r6, r24
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   199f8:	81 2c       	mov	r8, r1
   199fa:	c6 5e       	subi	r28, 0xE6	; 230
   199fc:	de 4f       	sbci	r29, 0xFE	; 254
   199fe:	88 81       	ld	r24, Y
   19a00:	99 81       	ldd	r25, Y+1	; 0x01
   19a02:	aa 81       	ldd	r26, Y+2	; 0x02
   19a04:	bb 81       	ldd	r27, Y+3	; 0x03
   19a06:	ca 51       	subi	r28, 0x1A	; 26
   19a08:	d1 40       	sbci	r29, 0x01	; 1
   19a0a:	82 15       	cp	r24, r2
   19a0c:	93 05       	cpc	r25, r3
   19a0e:	a4 05       	cpc	r26, r4
   19a10:	b5 05       	cpc	r27, r5
   19a12:	0c f0       	brlt	.+2      	; 0x19a16 <lif_create_volume+0x274>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19a14:	55 c0       	rjmp	.+170    	; 0x19ac0 <lif_create_volume+0x31e>
   19a16:	00 e0       	ldi	r16, 0x00	; 0
   19a18:	11 e0       	ldi	r17, 0x01	; 1
   19a1a:	ca 5e       	subi	r28, 0xEA	; 234
   19a1c:	de 4f       	sbci	r29, 0xFE	; 254
   19a1e:	28 81       	ld	r18, Y
   19a20:	39 81       	ldd	r19, Y+1	; 0x01
   19a22:	4a 81       	ldd	r20, Y+2	; 0x02
   19a24:	5b 81       	ldd	r21, Y+3	; 0x03
   19a26:	c6 51       	subi	r28, 0x16	; 22
   19a28:	d1 40       	sbci	r29, 0x01	; 1
   19a2a:	b6 01       	movw	r22, r12
   19a2c:	c7 01       	movw	r24, r14
   19a2e:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
   19a32:	09 2e       	mov	r0, r25
   19a34:	00 0c       	add	r0, r0
   19a36:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19a38:	bb 0b       	sbc	r27, r27
   19a3a:	8f 3f       	cpi	r24, 0xFF	; 255
   19a3c:	91 05       	cpc	r25, r1
   19a3e:	a1 05       	cpc	r26, r1
   19a40:	b1 05       	cpc	r27, r1
   19a42:	09 f0       	breq	.+2      	; 0x19a46 <lif_create_volume+0x2a4>
   19a44:	0c f4       	brge	.+2      	; 0x19a48 <lif_create_volume+0x2a6>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19a46:	82 c1       	rjmp	.+772    	; 0x19d4c <lif_create_volume+0x5aa>
   19a48:	ca 5e       	subi	r28, 0xEA	; 234
   19a4a:	de 4f       	sbci	r29, 0xFE	; 254
   19a4c:	28 81       	ld	r18, Y
   19a4e:	39 81       	ldd	r19, Y+1	; 0x01
   19a50:	4a 81       	ldd	r20, Y+2	; 0x02
   19a52:	5b 81       	ldd	r21, Y+3	; 0x03
   19a54:	c6 51       	subi	r28, 0x16	; 22
   19a56:	d1 40       	sbci	r29, 0x01	; 1
   19a58:	28 0f       	add	r18, r24
   19a5a:	39 1f       	adc	r19, r25
   19a5c:	4a 1f       	adc	r20, r26
   19a5e:	5b 1f       	adc	r21, r27
   19a60:	ca 5e       	subi	r28, 0xEA	; 234
   19a62:	de 4f       	sbci	r29, 0xFE	; 254
   19a64:	28 83       	st	Y, r18
   19a66:	39 83       	std	Y+1, r19	; 0x01
   19a68:	4a 83       	std	Y+2, r20	; 0x02
   19a6a:	5b 83       	std	Y+3, r21	; 0x03
   19a6c:	c6 51       	subi	r28, 0x16	; 22
        printf("\tWrote: %ld\r", count);
   19a6e:	d1 40       	sbci	r29, 0x01	; 1
   19a70:	c6 5e       	subi	r28, 0xE6	; 230
   19a72:	de 4f       	sbci	r29, 0xFE	; 254
   19a74:	88 81       	ld	r24, Y
   19a76:	99 81       	ldd	r25, Y+1	; 0x01
   19a78:	aa 81       	ldd	r26, Y+2	; 0x02
   19a7a:	bb 81       	ldd	r27, Y+3	; 0x03
   19a7c:	ca 51       	subi	r28, 0x1A	; 26
   19a7e:	d1 40       	sbci	r29, 0x01	; 1
   19a80:	ed b7       	in	r30, 0x3d	; 61
   19a82:	fe b7       	in	r31, 0x3e	; 62
   19a84:	84 83       	std	Z+4, r24	; 0x04
   19a86:	95 83       	std	Z+5, r25	; 0x05
   19a88:	a6 83       	std	Z+6, r26	; 0x06
   19a8a:	b7 83       	std	Z+7, r27	; 0x07
   19a8c:	61 82       	std	Z+1, r6	; 0x01
   19a8e:	72 82       	std	Z+2, r7	; 0x02
   19a90:	83 82       	std	Z+3, r8	; 0x03
   19a92:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19a96:	c6 5e       	subi	r28, 0xE6	; 230
   19a98:	de 4f       	sbci	r29, 0xFE	; 254
   19a9a:	28 81       	ld	r18, Y
   19a9c:	39 81       	ldd	r19, Y+1	; 0x01
   19a9e:	4a 81       	ldd	r20, Y+2	; 0x02
   19aa0:	5b 81       	ldd	r21, Y+3	; 0x03
   19aa2:	ca 51       	subi	r28, 0x1A	; 26
   19aa4:	d1 40       	sbci	r29, 0x01	; 1
   19aa6:	2f 5f       	subi	r18, 0xFF	; 255
   19aa8:	3f 4f       	sbci	r19, 0xFF	; 255
   19aaa:	4f 4f       	sbci	r20, 0xFF	; 255
   19aac:	5f 4f       	sbci	r21, 0xFF	; 255
   19aae:	c6 5e       	subi	r28, 0xE6	; 230
   19ab0:	de 4f       	sbci	r29, 0xFE	; 254
   19ab2:	28 83       	st	Y, r18
   19ab4:	39 83       	std	Y+1, r19	; 0x01
   19ab6:	4a 83       	std	Y+2, r20	; 0x02
   19ab8:	5b 83       	std	Y+3, r21	; 0x03
   19aba:	ca 51       	subi	r28, 0x1A	; 26
   19abc:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19abe:	9d cf       	rjmp	.-198    	; 0x199fa <lif_create_volume+0x258>
   19ac0:	c7 01       	movw	r24, r14
   19ac2:	0e 94 07 c5 	call	0x18a0e	; 0x18a0e <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19ac6:	8f ef       	ldi	r24, 0xFF	; 255
   19ac8:	9f ef       	ldi	r25, 0xFF	; 255
   19aca:	f7 01       	movw	r30, r14
   19acc:	e6 5a       	subi	r30, 0xA6	; 166
   19ace:	ff 4f       	sbci	r31, 0xFF	; 255
   19ad0:	91 83       	std	Z+1, r25	; 0x01
   19ad2:	80 83       	st	Z, r24
   19ad4:	46 01       	movw	r8, r12
   19ad6:	6e 01       	movw	r12, r28
   19ad8:	9c ee       	ldi	r25, 0xEC	; 236
   19ada:	c9 1a       	sub	r12, r25
   19adc:	9e ef       	ldi	r25, 0xFE	; 254

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19ade:	d9 0a       	sbc	r13, r25
   19ae0:	b4 01       	movw	r22, r8
   19ae2:	c7 01       	movw	r24, r14
   19ae4:	0e 94 4e c3 	call	0x1869c	; 0x1869c <lif_dir2str>
   19ae8:	a0 e2       	ldi	r26, 0x20	; 32
   19aea:	8a 0e       	add	r8, r26

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19aec:	91 1c       	adc	r9, r1
   19aee:	c8 14       	cp	r12, r8
   19af0:	d9 04       	cpc	r13, r9
   19af2:	b1 f7       	brne	.-20     	; 0x19ae0 <lif_create_volume+0x33e>
   19af4:	a1 2c       	mov	r10, r1
   19af6:	b1 2c       	mov	r11, r1
   19af8:	65 01       	movw	r12, r10
   19afa:	fe 01       	movw	r30, r28
   19afc:	74 96       	adiw	r30, 0x14	; 20
   19afe:	cc 5e       	subi	r28, 0xEC	; 236
   19b00:	de 4f       	sbci	r29, 0xFE	; 254
   19b02:	f9 83       	std	Y+1, r31	; 0x01
   19b04:	e8 83       	st	Y, r30
   19b06:	c4 51       	subi	r28, 0x14	; 20
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19b08:	d1 40       	sbci	r29, 0x01	; 1
   19b0a:	84 e6       	ldi	r24, 0x64	; 100
   19b0c:	28 2e       	mov	r2, r24
   19b0e:	31 2c       	mov	r3, r1
   19b10:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   19b12:	51 2c       	mov	r5, r1
   19b14:	85 ef       	ldi	r24, 0xF5	; 245
   19b16:	99 e3       	ldi	r25, 0x39	; 57
   19b18:	3c 01       	movw	r6, r24
   19b1a:	81 2c       	mov	r8, r1
   19b1c:	c6 5e       	subi	r28, 0xE6	; 230
   19b1e:	de 4f       	sbci	r29, 0xFE	; 254
   19b20:	28 81       	ld	r18, Y
   19b22:	39 81       	ldd	r19, Y+1	; 0x01
   19b24:	4a 81       	ldd	r20, Y+2	; 0x02
   19b26:	5b 81       	ldd	r21, Y+3	; 0x03
   19b28:	ca 51       	subi	r28, 0x1A	; 26
   19b2a:	d1 40       	sbci	r29, 0x01	; 1
   19b2c:	2a 0d       	add	r18, r10
   19b2e:	3b 1d       	adc	r19, r11
   19b30:	4c 1d       	adc	r20, r12
   19b32:	5d 1d       	adc	r21, r13
   19b34:	ce 5d       	subi	r28, 0xDE	; 222
   19b36:	de 4f       	sbci	r29, 0xFE	; 254
   19b38:	28 83       	st	Y, r18
   19b3a:	39 83       	std	Y+1, r19	; 0x01
   19b3c:	4a 83       	std	Y+2, r20	; 0x02
   19b3e:	5b 83       	std	Y+3, r21	; 0x03
   19b40:	c2 52       	subi	r28, 0x22	; 34
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19b42:	d1 40       	sbci	r29, 0x01	; 1
   19b44:	ca 5d       	subi	r28, 0xDA	; 218
   19b46:	de 4f       	sbci	r29, 0xFE	; 254
   19b48:	88 81       	ld	r24, Y
   19b4a:	99 81       	ldd	r25, Y+1	; 0x01
   19b4c:	aa 81       	ldd	r26, Y+2	; 0x02
   19b4e:	bb 81       	ldd	r27, Y+3	; 0x03
   19b50:	c6 52       	subi	r28, 0x26	; 38
   19b52:	d1 40       	sbci	r29, 0x01	; 1
   19b54:	a8 16       	cp	r10, r24
   19b56:	b9 06       	cpc	r11, r25
   19b58:	ca 06       	cpc	r12, r26
   19b5a:	db 06       	cpc	r13, r27
   19b5c:	0c f0       	brlt	.+2      	; 0x19b60 <lif_create_volume+0x3be>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19b5e:	58 c0       	rjmp	.+176    	; 0x19c10 <lif_create_volume+0x46e>
   19b60:	00 e0       	ldi	r16, 0x00	; 0
   19b62:	11 e0       	ldi	r17, 0x01	; 1
   19b64:	ca 5e       	subi	r28, 0xEA	; 234
   19b66:	de 4f       	sbci	r29, 0xFE	; 254
   19b68:	28 81       	ld	r18, Y
   19b6a:	39 81       	ldd	r19, Y+1	; 0x01
   19b6c:	4a 81       	ldd	r20, Y+2	; 0x02
   19b6e:	5b 81       	ldd	r21, Y+3	; 0x03
   19b70:	c6 51       	subi	r28, 0x16	; 22
   19b72:	d1 40       	sbci	r29, 0x01	; 1
   19b74:	be 01       	movw	r22, r28
   19b76:	6c 5e       	subi	r22, 0xEC	; 236
   19b78:	7f 4f       	sbci	r23, 0xFF	; 255
   19b7a:	c7 01       	movw	r24, r14
   19b7c:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
   19b80:	09 2e       	mov	r0, r25
   19b82:	00 0c       	add	r0, r0
   19b84:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19b86:	bb 0b       	sbc	r27, r27
   19b88:	8f 3f       	cpi	r24, 0xFF	; 255
   19b8a:	91 05       	cpc	r25, r1
   19b8c:	a1 05       	cpc	r26, r1
   19b8e:	b1 05       	cpc	r27, r1
   19b90:	09 f0       	breq	.+2      	; 0x19b94 <lif_create_volume+0x3f2>
   19b92:	0c f4       	brge	.+2      	; 0x19b96 <lif_create_volume+0x3f4>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19b94:	db c0       	rjmp	.+438    	; 0x19d4c <lif_create_volume+0x5aa>
   19b96:	ca 5e       	subi	r28, 0xEA	; 234
   19b98:	de 4f       	sbci	r29, 0xFE	; 254
   19b9a:	28 81       	ld	r18, Y
   19b9c:	39 81       	ldd	r19, Y+1	; 0x01
   19b9e:	4a 81       	ldd	r20, Y+2	; 0x02
   19ba0:	5b 81       	ldd	r21, Y+3	; 0x03
   19ba2:	c6 51       	subi	r28, 0x16	; 22
   19ba4:	d1 40       	sbci	r29, 0x01	; 1
   19ba6:	28 0f       	add	r18, r24
   19ba8:	39 1f       	adc	r19, r25
   19baa:	4a 1f       	adc	r20, r26
   19bac:	5b 1f       	adc	r21, r27
   19bae:	ca 5e       	subi	r28, 0xEA	; 234
   19bb0:	de 4f       	sbci	r29, 0xFE	; 254
   19bb2:	28 83       	st	Y, r18
   19bb4:	39 83       	std	Y+1, r19	; 0x01
   19bb6:	4a 83       	std	Y+2, r20	; 0x02
   19bb8:	5b 83       	std	Y+3, r21	; 0x03
   19bba:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19bbc:	d1 40       	sbci	r29, 0x01	; 1
   19bbe:	ce 5d       	subi	r28, 0xDE	; 222
   19bc0:	de 4f       	sbci	r29, 0xFE	; 254
   19bc2:	68 81       	ld	r22, Y
   19bc4:	79 81       	ldd	r23, Y+1	; 0x01
   19bc6:	8a 81       	ldd	r24, Y+2	; 0x02
   19bc8:	9b 81       	ldd	r25, Y+3	; 0x03
   19bca:	c2 52       	subi	r28, 0x22	; 34
   19bcc:	d1 40       	sbci	r29, 0x01	; 1
   19bce:	a2 01       	movw	r20, r4
   19bd0:	91 01       	movw	r18, r2
   19bd2:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
   19bd6:	67 2b       	or	r22, r23
   19bd8:	68 2b       	or	r22, r24
   19bda:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19bdc:	99 f4       	brne	.+38     	; 0x19c04 <lif_create_volume+0x462>
   19bde:	ce 5d       	subi	r28, 0xDE	; 222
   19be0:	de 4f       	sbci	r29, 0xFE	; 254
   19be2:	88 81       	ld	r24, Y
   19be4:	99 81       	ldd	r25, Y+1	; 0x01
   19be6:	aa 81       	ldd	r26, Y+2	; 0x02
   19be8:	bb 81       	ldd	r27, Y+3	; 0x03
   19bea:	c2 52       	subi	r28, 0x22	; 34
   19bec:	d1 40       	sbci	r29, 0x01	; 1
   19bee:	ed b7       	in	r30, 0x3d	; 61
   19bf0:	fe b7       	in	r31, 0x3e	; 62
   19bf2:	84 83       	std	Z+4, r24	; 0x04
   19bf4:	95 83       	std	Z+5, r25	; 0x05
   19bf6:	a6 83       	std	Z+6, r26	; 0x06
   19bf8:	b7 83       	std	Z+7, r27	; 0x07
   19bfa:	61 82       	std	Z+1, r6	; 0x01
   19bfc:	72 82       	std	Z+2, r7	; 0x02
   19bfe:	83 82       	std	Z+3, r8	; 0x03
   19c00:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19c04:	ff ef       	ldi	r31, 0xFF	; 255
   19c06:	af 1a       	sub	r10, r31
   19c08:	bf 0a       	sbc	r11, r31
   19c0a:	cf 0a       	sbc	r12, r31
   19c0c:	df 0a       	sbc	r13, r31
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19c0e:	86 cf       	rjmp	.-244    	; 0x19b1c <lif_create_volume+0x37a>
   19c10:	80 e0       	ldi	r24, 0x00	; 0
   19c12:	91 e0       	ldi	r25, 0x01	; 1
   19c14:	cc 5e       	subi	r28, 0xEC	; 236
   19c16:	de 4f       	sbci	r29, 0xFE	; 254
   19c18:	a8 81       	ld	r26, Y
   19c1a:	b9 81       	ldd	r27, Y+1	; 0x01
   19c1c:	c4 51       	subi	r28, 0x14	; 20
   19c1e:	d1 40       	sbci	r29, 0x01	; 1
   19c20:	fc 01       	movw	r30, r24
   19c22:	1d 92       	st	X+, r1
   19c24:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   19c26:	e9 f7       	brne	.-6      	; 0x19c22 <lif_create_volume+0x480>
   19c28:	81 2c       	mov	r8, r1
   19c2a:	91 2c       	mov	r9, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19c2c:	54 01       	movw	r10, r8
   19c2e:	88 ee       	ldi	r24, 0xE8	; 232
   19c30:	99 e3       	ldi	r25, 0x39	; 57
   19c32:	9c 01       	movw	r18, r24
   19c34:	40 e0       	ldi	r20, 0x00	; 0
   19c36:	c6 5e       	subi	r28, 0xE6	; 230
   19c38:	de 4f       	sbci	r29, 0xFE	; 254
   19c3a:	28 83       	st	Y, r18
   19c3c:	39 83       	std	Y+1, r19	; 0x01
   19c3e:	4a 83       	std	Y+2, r20	; 0x02
   19c40:	ca 51       	subi	r28, 0x1A	; 26
   19c42:	d1 40       	sbci	r29, 0x01	; 1
   19c44:	ce 5d       	subi	r28, 0xDE	; 222
   19c46:	de 4f       	sbci	r29, 0xFE	; 254
   19c48:	48 80       	ld	r4, Y
   19c4a:	59 80       	ldd	r5, Y+1	; 0x01
   19c4c:	6a 80       	ldd	r6, Y+2	; 0x02
   19c4e:	7b 80       	ldd	r7, Y+3	; 0x03
   19c50:	c2 52       	subi	r28, 0x22	; 34
   19c52:	d1 40       	sbci	r29, 0x01	; 1
   19c54:	48 0c       	add	r4, r8
   19c56:	59 1c       	adc	r5, r9
   19c58:	6a 1c       	adc	r6, r10
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19c5a:	7b 1c       	adc	r7, r11
   19c5c:	c2 5e       	subi	r28, 0xE2	; 226
   19c5e:	de 4f       	sbci	r29, 0xFE	; 254
   19c60:	28 81       	ld	r18, Y
   19c62:	39 81       	ldd	r19, Y+1	; 0x01
   19c64:	4a 81       	ldd	r20, Y+2	; 0x02
   19c66:	5b 81       	ldd	r21, Y+3	; 0x03
   19c68:	ce 51       	subi	r28, 0x1E	; 30
   19c6a:	d1 40       	sbci	r29, 0x01	; 1
   19c6c:	82 16       	cp	r8, r18
   19c6e:	93 06       	cpc	r9, r19
   19c70:	a4 06       	cpc	r10, r20
   19c72:	b5 06       	cpc	r11, r21
   19c74:	0c f0       	brlt	.+2      	; 0x19c78 <lif_create_volume+0x4d6>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c76:	53 c0       	rjmp	.+166    	; 0x19d1e <lif_create_volume+0x57c>
   19c78:	00 e0       	ldi	r16, 0x00	; 0
   19c7a:	11 e0       	ldi	r17, 0x01	; 1
   19c7c:	ca 5e       	subi	r28, 0xEA	; 234
   19c7e:	de 4f       	sbci	r29, 0xFE	; 254
   19c80:	28 81       	ld	r18, Y
   19c82:	39 81       	ldd	r19, Y+1	; 0x01
   19c84:	4a 81       	ldd	r20, Y+2	; 0x02
   19c86:	5b 81       	ldd	r21, Y+3	; 0x03
   19c88:	c6 51       	subi	r28, 0x16	; 22
   19c8a:	d1 40       	sbci	r29, 0x01	; 1
   19c8c:	be 01       	movw	r22, r28
   19c8e:	6c 5e       	subi	r22, 0xEC	; 236
   19c90:	7f 4f       	sbci	r23, 0xFF	; 255
   19c92:	c7 01       	movw	r24, r14
   19c94:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
   19c98:	09 2e       	mov	r0, r25
   19c9a:	00 0c       	add	r0, r0
   19c9c:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19c9e:	bb 0b       	sbc	r27, r27
   19ca0:	8f 3f       	cpi	r24, 0xFF	; 255
   19ca2:	91 05       	cpc	r25, r1
   19ca4:	a1 05       	cpc	r26, r1
   19ca6:	b1 05       	cpc	r27, r1
   19ca8:	09 f0       	breq	.+2      	; 0x19cac <lif_create_volume+0x50a>
   19caa:	0c f4       	brge	.+2      	; 0x19cae <lif_create_volume+0x50c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19cac:	4f c0       	rjmp	.+158    	; 0x19d4c <lif_create_volume+0x5aa>
   19cae:	ca 5e       	subi	r28, 0xEA	; 234
   19cb0:	de 4f       	sbci	r29, 0xFE	; 254
   19cb2:	28 81       	ld	r18, Y
   19cb4:	39 81       	ldd	r19, Y+1	; 0x01
   19cb6:	4a 81       	ldd	r20, Y+2	; 0x02
   19cb8:	5b 81       	ldd	r21, Y+3	; 0x03
   19cba:	c6 51       	subi	r28, 0x16	; 22
   19cbc:	d1 40       	sbci	r29, 0x01	; 1
   19cbe:	28 0f       	add	r18, r24
   19cc0:	39 1f       	adc	r19, r25
   19cc2:	4a 1f       	adc	r20, r26
   19cc4:	5b 1f       	adc	r21, r27
   19cc6:	ca 5e       	subi	r28, 0xEA	; 234
   19cc8:	de 4f       	sbci	r29, 0xFE	; 254
   19cca:	28 83       	st	Y, r18
   19ccc:	39 83       	std	Y+1, r19	; 0x01
   19cce:	4a 83       	std	Y+2, r20	; 0x02
   19cd0:	5b 83       	std	Y+3, r21	; 0x03
   19cd2:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19cd4:	d1 40       	sbci	r29, 0x01	; 1
   19cd6:	c3 01       	movw	r24, r6
   19cd8:	b2 01       	movw	r22, r4
   19cda:	24 e6       	ldi	r18, 0x64	; 100
   19cdc:	30 e0       	ldi	r19, 0x00	; 0
   19cde:	40 e0       	ldi	r20, 0x00	; 0
   19ce0:	50 e0       	ldi	r21, 0x00	; 0
   19ce2:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
   19ce6:	67 2b       	or	r22, r23
   19ce8:	68 2b       	or	r22, r24
   19cea:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19cec:	91 f4       	brne	.+36     	; 0x19d12 <lif_create_volume+0x570>
   19cee:	ed b7       	in	r30, 0x3d	; 61
   19cf0:	fe b7       	in	r31, 0x3e	; 62
   19cf2:	44 82       	std	Z+4, r4	; 0x04
   19cf4:	55 82       	std	Z+5, r5	; 0x05
   19cf6:	66 82       	std	Z+6, r6	; 0x06
   19cf8:	77 82       	std	Z+7, r7	; 0x07
   19cfa:	c6 5e       	subi	r28, 0xE6	; 230
   19cfc:	de 4f       	sbci	r29, 0xFE	; 254
   19cfe:	28 81       	ld	r18, Y
   19d00:	39 81       	ldd	r19, Y+1	; 0x01
   19d02:	4a 81       	ldd	r20, Y+2	; 0x02
   19d04:	ca 51       	subi	r28, 0x1A	; 26
   19d06:	d1 40       	sbci	r29, 0x01	; 1
   19d08:	21 83       	std	Z+1, r18	; 0x01
   19d0a:	32 83       	std	Z+2, r19	; 0x02
   19d0c:	43 83       	std	Z+3, r20	; 0x03
   19d0e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19d12:	ff ef       	ldi	r31, 0xFF	; 255
   19d14:	8f 1a       	sub	r8, r31
   19d16:	9f 0a       	sbc	r9, r31
   19d18:	af 0a       	sbc	r10, r31
   19d1a:	bf 0a       	sbc	r11, r31
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19d1c:	93 cf       	rjmp	.-218    	; 0x19c44 <lif_create_volume+0x4a2>
   19d1e:	ed b7       	in	r30, 0x3d	; 61
   19d20:	fe b7       	in	r31, 0x3e	; 62
   19d22:	44 82       	std	Z+4, r4	; 0x04
   19d24:	55 82       	std	Z+5, r5	; 0x05
   19d26:	66 82       	std	Z+6, r6	; 0x06
   19d28:	77 82       	std	Z+7, r7	; 0x07
   19d2a:	8b ed       	ldi	r24, 0xDB	; 219
   19d2c:	99 e3       	ldi	r25, 0x39	; 57
   19d2e:	a0 e0       	ldi	r26, 0x00	; 0
   19d30:	81 83       	std	Z+1, r24	; 0x01
   19d32:	92 83       	std	Z+2, r25	; 0x02
   19d34:	a3 83       	std	Z+3, r26	; 0x03
   19d36:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19d3a:	8f ef       	ldi	r24, 0xFF	; 255
   19d3c:	9f ef       	ldi	r25, 0xFF	; 255
   19d3e:	f7 01       	movw	r30, r14
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19d40:	91 a3       	std	Z+33, r25	; 0x21
   19d42:	80 a3       	std	Z+32, r24	; 0x20
   19d44:	c7 01       	movw	r24, r14
   19d46:	38 d8       	rcall	.-3984   	; 0x18db8 <lif_check_volume>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19d48:	89 2b       	or	r24, r25
   19d4a:	19 f4       	brne	.+6      	; 0x19d52 <lif_create_volume+0x5b0>
   19d4c:	c7 01       	movw	r24, r14
   19d4e:	b8 da       	rcall	.-2704   	; 0x192c0 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19d50:	08 c0       	rjmp	.+16     	; 0x19d62 <lif_create_volume+0x5c0>
   19d52:	c7 01       	movw	r24, r14
   19d54:	1e dc       	rcall	.-1988   	; 0x19592 <lif_updatefree>
   19d56:	6c 01       	movw	r12, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19d58:	89 2b       	or	r24, r25
   19d5a:	31 f4       	brne	.+12     	; 0x19d68 <lif_create_volume+0x5c6>
   19d5c:	c7 01       	movw	r24, r14

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19d5e:	b0 da       	rcall	.-2720   	; 0x192c0 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19d60:	04 c0       	rjmp	.+8      	; 0x19d6a <lif_create_volume+0x5c8>
   19d62:	c1 2c       	mov	r12, r1
   19d64:	d1 2c       	mov	r13, r1
   19d66:	01 c0       	rjmp	.+2      	; 0x19d6a <lif_create_volume+0x5c8>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19d68:	67 01       	movw	r12, r14
   19d6a:	c6 01       	movw	r24, r12
   19d6c:	c7 5d       	subi	r28, 0xD7	; 215
   19d6e:	de 4f       	sbci	r29, 0xFE	; 254
   19d70:	e2 e1       	ldi	r30, 0x12	; 18
   19d72:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

00019d76 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19d76:	ad e1       	ldi	r26, 0x1D	; 29
   19d78:	b0 e0       	ldi	r27, 0x00	; 0
   19d7a:	e1 ec       	ldi	r30, 0xC1	; 193
   19d7c:	fe ec       	ldi	r31, 0xCE	; 206
   19d7e:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
   19d82:	9d 8f       	std	Y+29, r25	; 0x1d
   19d84:	8c 8f       	std	Y+28, r24	; 0x1c
   19d86:	4a 01       	movw	r8, r20
   19d88:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19d8a:	fc 01       	movw	r30, r24
   19d8c:	c4 84       	ldd	r12, Z+12	; 0x0c
   19d8e:	d5 84       	ldd	r13, Z+13	; 0x0d
   19d90:	e6 84       	ldd	r14, Z+14	; 0x0e

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19d92:	f7 84       	ldd	r15, Z+15	; 0x0f
   19d94:	fe db       	rcall	.-2052   	; 0x19592 <lif_updatefree>
   19d96:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19d98:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19d9a:	40 8d       	ldd	r20, Z+24	; 0x18
   19d9c:	51 8d       	ldd	r21, Z+25	; 0x19
   19d9e:	62 8d       	ldd	r22, Z+26	; 0x1a
   19da0:	73 8d       	ldd	r23, Z+27	; 0x1b
   19da2:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19da4:	99 f4       	brne	.+38     	; 0x19dcc <lif_newdir+0x56>
   19da6:	ed b7       	in	r30, 0x3d	; 61
   19da8:	fe b7       	in	r31, 0x3e	; 62
   19daa:	80 86       	std	Z+8, r8	; 0x08
   19dac:	91 86       	std	Z+9, r9	; 0x09
   19dae:	a2 86       	std	Z+10, r10	; 0x0a
   19db0:	b3 86       	std	Z+11, r11	; 0x0b
   19db2:	44 83       	std	Z+4, r20	; 0x04
   19db4:	55 83       	std	Z+5, r21	; 0x05
   19db6:	66 83       	std	Z+6, r22	; 0x06
   19db8:	77 83       	std	Z+7, r23	; 0x07
   19dba:	8c ef       	ldi	r24, 0xFC	; 252
   19dbc:	98 e3       	ldi	r25, 0x38	; 56
   19dbe:	a0 e0       	ldi	r26, 0x00	; 0
   19dc0:	81 83       	std	Z+1, r24	; 0x01
   19dc2:	92 83       	std	Z+2, r25	; 0x02
   19dc4:	a3 83       	std	Z+3, r26	; 0x03
   19dc6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19dca:	2f c1       	rjmp	.+606    	; 0x1a02a <lif_newdir+0x2b4>
   19dcc:	48 15       	cp	r20, r8
   19dce:	59 05       	cpc	r21, r9
   19dd0:	6a 05       	cpc	r22, r10
   19dd2:	7b 05       	cpc	r23, r11
   19dd4:	c4 f0       	brlt	.+48     	; 0x19e06 <lif_newdir+0x90>
   19dd6:	44 24       	eor	r4, r4
   19dd8:	43 94       	inc	r4
   19dda:	51 2c       	mov	r5, r1
   19ddc:	61 2c       	mov	r6, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19dde:	71 2c       	mov	r7, r1
   19de0:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19de2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19de4:	86 5a       	subi	r24, 0xA6	; 166
   19de6:	9f 4f       	sbci	r25, 0xFF	; 255
   19de8:	9d 8b       	std	Y+21, r25	; 0x15
   19dea:	8c 8b       	std	Y+20, r24	; 0x14
   19dec:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19dee:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19df0:	e4 5a       	subi	r30, 0xA4	; 164
   19df2:	ff 4f       	sbci	r31, 0xFF	; 255
   19df4:	fb 8b       	std	Y+19, r31	; 0x13
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19df6:	ea 8b       	std	Y+18, r30	; 0x12
   19df8:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19dfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19dfc:	80 5a       	subi	r24, 0xA0	; 160
   19dfe:	9f 4f       	sbci	r25, 0xFF	; 255
   19e00:	9f 8b       	std	Y+23, r25	; 0x17
   19e02:	8e 8b       	std	Y+22, r24	; 0x16
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19e04:	21 c0       	rjmp	.+66     	; 0x19e48 <lif_newdir+0xd2>
   19e06:	ed b7       	in	r30, 0x3d	; 61
   19e08:	fe b7       	in	r31, 0x3e	; 62
   19e0a:	44 83       	std	Z+4, r20	; 0x04
   19e0c:	55 83       	std	Z+5, r21	; 0x05
   19e0e:	66 83       	std	Z+6, r22	; 0x06
   19e10:	77 83       	std	Z+7, r23	; 0x07
   19e12:	83 ed       	ldi	r24, 0xD3	; 211
   19e14:	98 e3       	ldi	r25, 0x38	; 56
   19e16:	a0 e0       	ldi	r26, 0x00	; 0
   19e18:	81 83       	std	Z+1, r24	; 0x01
   19e1a:	92 83       	std	Z+2, r25	; 0x02
   19e1c:	a3 83       	std	Z+3, r26	; 0x03
   19e1e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19e22:	03 c1       	rjmp	.+518    	; 0x1a02a <lif_newdir+0x2b4>
   19e24:	ec 89       	ldd	r30, Y+20	; 0x14
   19e26:	fd 89       	ldd	r31, Y+21	; 0x15
   19e28:	80 81       	ld	r24, Z
   19e2a:	91 81       	ldd	r25, Z+1	; 0x01
   19e2c:	8f 3f       	cpi	r24, 0xFF	; 255
   19e2e:	ff ef       	ldi	r31, 0xFF	; 255
   19e30:	9f 07       	cpc	r25, r31
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19e32:	a1 f0       	breq	.+40     	; 0x19e5c <lif_newdir+0xe6>
   19e34:	89 2b       	or	r24, r25
   19e36:	09 f0       	breq	.+2      	; 0x19e3a <lif_newdir+0xc4>
        {
            if(freestate == 0)
   19e38:	ce c0       	rjmp	.+412    	; 0x19fd6 <lif_newdir+0x260>
   19e3a:	61 14       	cp	r6, r1
   19e3c:	71 04       	cpc	r7, r1
   19e3e:	09 f4       	brne	.+2      	; 0x19e42 <lif_newdir+0xcc>
   19e40:	c1 c0       	rjmp	.+386    	; 0x19fc4 <lif_newdir+0x24e>
   19e42:	ff ef       	ldi	r31, 0xFF	; 255
   19e44:	4f 1a       	sub	r4, r31
   19e46:	5f 0a       	sbc	r5, r31
   19e48:	82 01       	movw	r16, r4
   19e4a:	01 50       	subi	r16, 0x01	; 1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   19e4c:	11 09       	sbc	r17, r1
   19e4e:	b8 01       	movw	r22, r16
   19e50:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19e52:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19e54:	c3 da       	rcall	.-2682   	; 0x193dc <lif_readdirindex>
   19e56:	89 2b       	or	r24, r25
   19e58:	29 f7       	brne	.-54     	; 0x19e24 <lif_newdir+0xae>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   19e5a:	e7 c0       	rjmp	.+462    	; 0x1a02a <lif_newdir+0x2b4>
   19e5c:	22 e0       	ldi	r18, 0x02	; 2
   19e5e:	62 16       	cp	r6, r18
   19e60:	71 04       	cpc	r7, r1
   19e62:	09 f0       	breq	.+2      	; 0x19e66 <lif_newdir+0xf0>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   19e64:	46 c0       	rjmp	.+140    	; 0x19ef2 <lif_newdir+0x17c>
   19e66:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19e68:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19e6a:	0e 94 07 c5 	call	0x18a0e	; 0x18a0e <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19e6e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19e70:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19e72:	e4 5a       	subi	r30, 0xA4	; 164
   19e74:	ff 4f       	sbci	r31, 0xFF	; 255
   19e76:	88 8d       	ldd	r24, Y+24	; 0x18
   19e78:	80 83       	st	Z, r24
   19e7a:	99 8d       	ldd	r25, Y+25	; 0x19
   19e7c:	91 83       	std	Z+1, r25	; 0x01
   19e7e:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19e80:	22 83       	std	Z+2, r18	; 0x02
   19e82:	8b 8d       	ldd	r24, Y+27	; 0x1b
                LIF->DIR.FileSectors = sectors;
   19e84:	83 83       	std	Z+3, r24	; 0x03
   19e86:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19e88:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19e8a:	e0 5a       	subi	r30, 0xA0	; 160
   19e8c:	ff 4f       	sbci	r31, 0xFF	; 255
   19e8e:	80 82       	st	Z, r8
   19e90:	91 82       	std	Z+1, r9	; 0x01
   19e92:	a2 82       	std	Z+2, r10	; 0x02
                LIF->usedsectors += sectors;
   19e94:	b3 82       	std	Z+3, r11	; 0x03
   19e96:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19e98:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19e9a:	84 89       	ldd	r24, Z+20	; 0x14
   19e9c:	95 89       	ldd	r25, Z+21	; 0x15
   19e9e:	a6 89       	ldd	r26, Z+22	; 0x16
   19ea0:	b7 89       	ldd	r27, Z+23	; 0x17
   19ea2:	88 0d       	add	r24, r8
   19ea4:	99 1d       	adc	r25, r9
   19ea6:	aa 1d       	adc	r26, r10
   19ea8:	bb 1d       	adc	r27, r11
   19eaa:	84 8b       	std	Z+20, r24	; 0x14
   19eac:	95 8b       	std	Z+21, r25	; 0x15
   19eae:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   19eb0:	b7 8b       	std	Z+23, r27	; 0x17
   19eb2:	80 8d       	ldd	r24, Z+24	; 0x18
   19eb4:	91 8d       	ldd	r25, Z+25	; 0x19
   19eb6:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19eb8:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19eba:	88 19       	sub	r24, r8
   19ebc:	99 09       	sbc	r25, r9
   19ebe:	aa 09       	sbc	r26, r10
   19ec0:	bb 09       	sbc	r27, r11
   19ec2:	80 8f       	std	Z+24, r24	; 0x18
   19ec4:	91 8f       	std	Z+25, r25	; 0x19
   19ec6:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   19ec8:	b3 8f       	std	Z+27, r27	; 0x1b
   19eca:	84 8d       	ldd	r24, Z+28	; 0x1c
   19ecc:	95 8d       	ldd	r25, Z+29	; 0x1d
   19ece:	01 96       	adiw	r24, 0x01	; 1
   19ed0:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   19ed2:	84 8f       	std	Z+28, r24	; 0x1c
   19ed4:	86 8d       	ldd	r24, Z+30	; 0x1e
   19ed6:	97 8d       	ldd	r25, Z+31	; 0x1f
   19ed8:	01 97       	sbiw	r24, 0x01	; 1
   19eda:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   19edc:	86 8f       	std	Z+30, r24	; 0x1e
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19ede:	20 a2       	std	Z+32, r2	; 0x20
   19ee0:	31 a2       	std	Z+33, r3	; 0x21
   19ee2:	b1 01       	movw	r22, r2
   19ee4:	cf 01       	movw	r24, r30
   19ee6:	e1 da       	rcall	.-2622   	; 0x194aa <lif_writedirindex>
   19ee8:	89 2b       	or	r24, r25
   19eea:	09 f4       	brne	.+2      	; 0x19eee <lif_newdir+0x178>
   19eec:	9e c0       	rjmp	.+316    	; 0x1a02a <lif_newdir+0x2b4>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19eee:	c1 01       	movw	r24, r2
   19ef0:	9e c0       	rjmp	.+316    	; 0x1a02e <lif_newdir+0x2b8>
   19ef2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19ef6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19efa:	92 ff       	sbrs	r25, 2
   19efc:	1e c0       	rjmp	.+60     	; 0x19f3a <lif_newdir+0x1c4>
   19efe:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19f00:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19f02:	80 8d       	ldd	r24, Z+24	; 0x18
   19f04:	91 8d       	ldd	r25, Z+25	; 0x19
   19f06:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19f08:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19f0a:	ed b7       	in	r30, 0x3d	; 61
   19f0c:	fe b7       	in	r31, 0x3e	; 62
   19f0e:	86 87       	std	Z+14, r24	; 0x0e
   19f10:	97 87       	std	Z+15, r25	; 0x0f
   19f12:	a0 8b       	std	Z+16, r26	; 0x10
   19f14:	b1 8b       	std	Z+17, r27	; 0x11
   19f16:	82 86       	std	Z+10, r8	; 0x0a
   19f18:	93 86       	std	Z+11, r9	; 0x0b
   19f1a:	a4 86       	std	Z+12, r10	; 0x0c
   19f1c:	b5 86       	std	Z+13, r11	; 0x0d
   19f1e:	c6 82       	std	Z+6, r12	; 0x06
   19f20:	d7 82       	std	Z+7, r13	; 0x07
   19f22:	e0 86       	std	Z+8, r14	; 0x08
   19f24:	f1 86       	std	Z+9, r15	; 0x09
   19f26:	15 83       	std	Z+5, r17	; 0x05
   19f28:	04 83       	std	Z+4, r16	; 0x04
   19f2a:	82 e8       	ldi	r24, 0x82	; 130
   19f2c:	98 e3       	ldi	r25, 0x38	; 56
   19f2e:	a0 e0       	ldi	r26, 0x00	; 0
   19f30:	81 83       	std	Z+1, r24	; 0x01
   19f32:	92 83       	std	Z+2, r25	; 0x02
   19f34:	a3 83       	std	Z+3, r26	; 0x03
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19f36:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   19f3a:	b8 01       	movw	r22, r16
   19f3c:	6f 5f       	subi	r22, 0xFF	; 255
   19f3e:	7f 4f       	sbci	r23, 0xFF	; 255
   19f40:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19f42:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19f44:	0e db       	rcall	.-2532   	; 0x19562 <lif_writedirEOF>
   19f46:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   19f48:	09 f4       	brne	.+2      	; 0x19f4c <lif_newdir+0x1d6>
   19f4a:	6f c0       	rjmp	.+222    	; 0x1a02a <lif_newdir+0x2b4>
   19f4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19f4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
            LIF->DIR.FileStartSector = start;
   19f50:	0e 94 07 c5 	call	0x18a0e	; 0x18a0e <lif_dir_clear>
   19f54:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19f56:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19f58:	e4 5a       	subi	r30, 0xA4	; 164
   19f5a:	ff 4f       	sbci	r31, 0xFF	; 255
   19f5c:	c0 82       	st	Z, r12
   19f5e:	d1 82       	std	Z+1, r13	; 0x01
            LIF->DIR.FileSectors = sectors;
   19f60:	e2 82       	std	Z+2, r14	; 0x02
   19f62:	f3 82       	std	Z+3, r15	; 0x03
   19f64:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19f66:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19f68:	e0 5a       	subi	r30, 0xA0	; 160
   19f6a:	ff 4f       	sbci	r31, 0xFF	; 255
   19f6c:	80 82       	st	Z, r8
   19f6e:	91 82       	std	Z+1, r9	; 0x01
            LIF->usedsectors += sectors;
   19f70:	a2 82       	std	Z+2, r10	; 0x02
   19f72:	b3 82       	std	Z+3, r11	; 0x03
   19f74:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19f76:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19f78:	84 89       	ldd	r24, Z+20	; 0x14
   19f7a:	95 89       	ldd	r25, Z+21	; 0x15
   19f7c:	a6 89       	ldd	r26, Z+22	; 0x16
   19f7e:	b7 89       	ldd	r27, Z+23	; 0x17
   19f80:	88 0d       	add	r24, r8
   19f82:	99 1d       	adc	r25, r9
   19f84:	aa 1d       	adc	r26, r10
   19f86:	bb 1d       	adc	r27, r11
   19f88:	84 8b       	std	Z+20, r24	; 0x14
   19f8a:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   19f8c:	a6 8b       	std	Z+22, r26	; 0x16
   19f8e:	b7 8b       	std	Z+23, r27	; 0x17
   19f90:	80 8d       	ldd	r24, Z+24	; 0x18
   19f92:	91 8d       	ldd	r25, Z+25	; 0x19
   19f94:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19f96:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19f98:	88 19       	sub	r24, r8
   19f9a:	99 09       	sbc	r25, r9
   19f9c:	aa 09       	sbc	r26, r10
   19f9e:	bb 09       	sbc	r27, r11
   19fa0:	80 8f       	std	Z+24, r24	; 0x18
   19fa2:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   19fa4:	a2 8f       	std	Z+26, r26	; 0x1a
   19fa6:	b3 8f       	std	Z+27, r27	; 0x1b
   19fa8:	84 8d       	ldd	r24, Z+28	; 0x1c
   19faa:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   19fac:	01 96       	adiw	r24, 0x01	; 1
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19fae:	95 8f       	std	Z+29, r25	; 0x1d
   19fb0:	84 8f       	std	Z+28, r24	; 0x1c
   19fb2:	11 a3       	std	Z+33, r17	; 0x21
   19fb4:	00 a3       	std	Z+32, r16	; 0x20
   19fb6:	b8 01       	movw	r22, r16
   19fb8:	cf 01       	movw	r24, r30
   19fba:	77 da       	rcall	.-2834   	; 0x194aa <lif_writedirindex>
   19fbc:	89 2b       	or	r24, r25
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19fbe:	a9 f1       	breq	.+106    	; 0x1a02a <lif_newdir+0x2b4>
   19fc0:	c8 01       	movw	r24, r16
   19fc2:	35 c0       	rjmp	.+106    	; 0x1a02e <lif_newdir+0x2b8>
   19fc4:	c8 8e       	std	Y+24, r12	; 0x18
   19fc6:	d9 8e       	std	Y+25, r13	; 0x19
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19fc8:	ea 8e       	std	Y+26, r14	; 0x1a
   19fca:	fb 8e       	std	Y+27, r15	; 0x1b
   19fcc:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   19fce:	66 24       	eor	r6, r6
        }

// VALID record
        if(freestate == 1)
   19fd0:	63 94       	inc	r6
   19fd2:	71 2c       	mov	r7, r1
   19fd4:	36 cf       	rjmp	.-404    	; 0x19e42 <lif_newdir+0xcc>
   19fd6:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19fd8:	6f 16       	cp	r6, r31
   19fda:	71 04       	cpc	r7, r1
   19fdc:	a9 f4       	brne	.+42     	; 0x1a008 <lif_newdir+0x292>
   19fde:	ea 89       	ldd	r30, Y+18	; 0x12
   19fe0:	fb 89       	ldd	r31, Y+19	; 0x13
   19fe2:	80 81       	ld	r24, Z
   19fe4:	91 81       	ldd	r25, Z+1	; 0x01
   19fe6:	a2 81       	ldd	r26, Z+2	; 0x02
   19fe8:	b3 81       	ldd	r27, Z+3	; 0x03
   19fea:	8c 19       	sub	r24, r12
   19fec:	9d 09       	sbc	r25, r13
   19fee:	ae 09       	sbc	r26, r14
   19ff0:	bf 09       	sbc	r27, r15
   19ff2:	88 15       	cp	r24, r8
   19ff4:	99 05       	cpc	r25, r9
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19ff6:	aa 05       	cpc	r26, r10
   19ff8:	bb 05       	cpc	r27, r11
   19ffa:	1c f4       	brge	.+6      	; 0x1a002 <lif_newdir+0x28c>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19ffc:	61 2c       	mov	r6, r1
   19ffe:	71 2c       	mov	r7, r1
   1a000:	03 c0       	rjmp	.+6      	; 0x1a008 <lif_newdir+0x292>
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a002:	82 e0       	ldi	r24, 0x02	; 2
   1a004:	68 2e       	mov	r6, r24
   1a006:	71 2c       	mov	r7, r1
   1a008:	ea 89       	ldd	r30, Y+18	; 0x12
   1a00a:	fb 89       	ldd	r31, Y+19	; 0x13
   1a00c:	c0 80       	ld	r12, Z
   1a00e:	d1 80       	ldd	r13, Z+1	; 0x01
   1a010:	e2 80       	ldd	r14, Z+2	; 0x02
   1a012:	f3 80       	ldd	r15, Z+3	; 0x03
   1a014:	ee 89       	ldd	r30, Y+22	; 0x16
   1a016:	ff 89       	ldd	r31, Y+23	; 0x17
   1a018:	80 81       	ld	r24, Z
   1a01a:	91 81       	ldd	r25, Z+1	; 0x01
   1a01c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a01e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a020:	c8 0e       	add	r12, r24
   1a022:	d9 1e       	adc	r13, r25
        ++index;
    }
// ERROR
    return(-1);
   1a024:	ea 1e       	adc	r14, r26
   1a026:	fb 1e       	adc	r15, r27
}
   1a028:	0c cf       	rjmp	.-488    	; 0x19e42 <lif_newdir+0xcc>
   1a02a:	8f ef       	ldi	r24, 0xFF	; 255
   1a02c:	9f ef       	ldi	r25, 0xFF	; 255
   1a02e:	6d 96       	adiw	r28, 0x1d	; 29
   1a030:	e2 e1       	ldi	r30, 0x12	; 18
   1a032:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0001a036 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a036:	a9 e3       	ldi	r26, 0x39	; 57
   1a038:	b1 e0       	ldi	r27, 0x01	; 1
   1a03a:	e1 e2       	ldi	r30, 0x21	; 33
   1a03c:	f0 ed       	ldi	r31, 0xD0	; 208
   1a03e:	0c 94 ef e3 	jmp	0x1c7de	; 0x1c7de <__prologue_saves__+0xc>
   1a042:	6c 01       	movw	r12, r24
   1a044:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a046:	be 01       	movw	r22, r28
   1a048:	66 5f       	subi	r22, 0xF6	; 246
   1a04a:	7e 4f       	sbci	r23, 0xFE	; 254
   1a04c:	0e 94 5a c0 	call	0x180b4	; 0x180b4 <lif_stat>
   1a050:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a052:	00 97       	sbiw	r24, 0x00	; 0
   1a054:	f9 f0       	breq	.+62     	; 0x1a094 <lif_open_volume+0x5e>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a056:	fc 01       	movw	r30, r24
   1a058:	80 8d       	ldd	r24, Z+24	; 0x18
   1a05a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a05c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a05e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a060:	81 15       	cp	r24, r1
   1a062:	f2 e0       	ldi	r31, 0x02	; 2
   1a064:	9f 07       	cpc	r25, r31
   1a066:	a1 05       	cpc	r26, r1
   1a068:	b1 05       	cpc	r27, r1
   1a06a:	b8 f4       	brcc	.+46     	; 0x1a09a <lif_open_volume+0x64>
    {
        if(debuglevel & GPIB_PPR)
   1a06c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a070:	21 ff       	sbrs	r18, 1
   1a072:	10 c0       	rjmp	.+32     	; 0x1a094 <lif_open_volume+0x5e>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a074:	ed b7       	in	r30, 0x3d	; 61
   1a076:	fe b7       	in	r31, 0x3e	; 62
   1a078:	86 83       	std	Z+6, r24	; 0x06
   1a07a:	97 83       	std	Z+7, r25	; 0x07
   1a07c:	a0 87       	std	Z+8, r26	; 0x08
   1a07e:	b1 87       	std	Z+9, r27	; 0x09
   1a080:	d5 82       	std	Z+5, r13	; 0x05
   1a082:	c4 82       	std	Z+4, r12	; 0x04
   1a084:	83 e4       	ldi	r24, 0x43	; 67
   1a086:	98 e3       	ldi	r25, 0x38	; 56
   1a088:	a0 e0       	ldi	r26, 0x00	; 0
   1a08a:	81 83       	std	Z+1, r24	; 0x01
   1a08c:	92 83       	std	Z+2, r25	; 0x02
   1a08e:	a3 83       	std	Z+3, r26	; 0x03
   1a090:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        return(NULL);
   1a094:	00 e0       	ldi	r16, 0x00	; 0
   1a096:	10 e0       	ldi	r17, 0x00	; 0
   1a098:	c2 c0       	rjmp	.+388    	; 0x1a21e <lif_open_volume+0x1e8>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a09a:	64 e7       	ldi	r22, 0x74	; 116
   1a09c:	70 e0       	ldi	r23, 0x00	; 0
   1a09e:	80 e0       	ldi	r24, 0x00	; 0
   1a0a0:	90 e0       	ldi	r25, 0x00	; 0
   1a0a2:	0e 94 c6 bf 	call	0x17f8c	; 0x17f8c <lif_calloc>
   1a0a6:	7c 01       	movw	r14, r24
    if(!LIF)
   1a0a8:	89 2b       	or	r24, r25
   1a0aa:	a1 f3       	breq	.-24     	; 0x1a094 <lif_open_volume+0x5e>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a0ac:	c6 01       	movw	r24, r12
   1a0ae:	0e 94 11 c0 	call	0x18022	; 0x18022 <lif_stralloc>
   1a0b2:	f7 01       	movw	r30, r14
   1a0b4:	91 83       	std	Z+1, r25	; 0x01
   1a0b6:	80 83       	st	Z, r24
    if(!LIF->name)
   1a0b8:	00 97       	sbiw	r24, 0x00	; 0
   1a0ba:	09 f4       	brne	.+2      	; 0x1a0be <lif_open_volume+0x88>
   1a0bc:	5a c0       	rjmp	.+180    	; 0x1a172 <lif_open_volume+0x13c>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a0be:	f5 01       	movw	r30, r10
   1a0c0:	80 8c       	ldd	r8, Z+24	; 0x18
   1a0c2:	91 8c       	ldd	r9, Z+25	; 0x19
   1a0c4:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a0c6:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a0c8:	f7 01       	movw	r30, r14
   1a0ca:	80 86       	std	Z+8, r8	; 0x08
   1a0cc:	91 86       	std	Z+9, r9	; 0x09
   1a0ce:	a2 86       	std	Z+10, r10	; 0x0a
   1a0d0:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a0d2:	77 27       	eor	r23, r23
   1a0d4:	6b 2d       	mov	r22, r11
   1a0d6:	5a 2d       	mov	r21, r10
   1a0d8:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a0da:	88 20       	and	r8, r8
   1a0dc:	21 f0       	breq	.+8      	; 0x1a0e6 <lif_open_volume+0xb0>
        ++sectors;
   1a0de:	4f 5f       	subi	r20, 0xFF	; 255
   1a0e0:	5f 4f       	sbci	r21, 0xFF	; 255
   1a0e2:	6f 4f       	sbci	r22, 0xFF	; 255
   1a0e4:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a0e6:	f7 01       	movw	r30, r14
   1a0e8:	44 83       	std	Z+4, r20	; 0x04
   1a0ea:	55 83       	std	Z+5, r21	; 0x05
   1a0ec:	66 83       	std	Z+6, r22	; 0x06
   1a0ee:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a0f0:	b8 01       	movw	r22, r16
   1a0f2:	0e 94 30 c0 	call	0x18060	; 0x18060 <lif_open>
   1a0f6:	f7 01       	movw	r30, r14
   1a0f8:	93 83       	std	Z+3, r25	; 0x03
   1a0fa:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a0fc:	89 2b       	or	r24, r25
   1a0fe:	c9 f1       	breq	.+114    	; 0x1a172 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a100:	00 e0       	ldi	r16, 0x00	; 0
   1a102:	11 e0       	ldi	r17, 0x01	; 1
   1a104:	20 e0       	ldi	r18, 0x00	; 0
   1a106:	30 e0       	ldi	r19, 0x00	; 0
   1a108:	a9 01       	movw	r20, r18
   1a10a:	be 01       	movw	r22, r28
   1a10c:	66 5f       	subi	r22, 0xF6	; 246
   1a10e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a110:	c7 01       	movw	r24, r14
   1a112:	0e 94 b4 c0 	call	0x18168	; 0x18168 <lif_read>
   1a116:	6f 3f       	cpi	r22, 0xFF	; 255
   1a118:	71 05       	cpc	r23, r1
   1a11a:	81 05       	cpc	r24, r1
   1a11c:	91 05       	cpc	r25, r1
   1a11e:	09 f0       	breq	.+2      	; 0x1a122 <lif_open_volume+0xec>
   1a120:	5c f4       	brge	.+22     	; 0x1a138 <lif_open_volume+0x102>
    {
        if(debuglevel & GPIB_PPR)
   1a122:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a126:	81 ff       	sbrs	r24, 1
   1a128:	24 c0       	rjmp	.+72     	; 0x1a172 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a12a:	ed b7       	in	r30, 0x3d	; 61
   1a12c:	fe b7       	in	r31, 0x3e	; 62
   1a12e:	d5 82       	std	Z+5, r13	; 0x05
   1a130:	c4 82       	std	Z+4, r12	; 0x04
   1a132:	8d e0       	ldi	r24, 0x0D	; 13
   1a134:	98 e3       	ldi	r25, 0x38	; 56
   1a136:	17 c0       	rjmp	.+46     	; 0x1a166 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a138:	b7 01       	movw	r22, r14
   1a13a:	ce 01       	movw	r24, r28
   1a13c:	0a 96       	adiw	r24, 0x0a	; 10
   1a13e:	0e 94 d0 c2 	call	0x185a0	; 0x185a0 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a142:	c7 01       	movw	r24, r14
   1a144:	0e 94 dc c6 	call	0x18db8	; 0x18db8 <lif_check_volume>
   1a148:	89 2b       	or	r24, r25
   1a14a:	b1 f4       	brne	.+44     	; 0x1a178 <lif_open_volume+0x142>
    {
        if(debuglevel & GPIB_PPR)
   1a14c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a150:	81 ff       	sbrs	r24, 1
   1a152:	0f c0       	rjmp	.+30     	; 0x1a172 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a154:	f7 01       	movw	r30, r14
   1a156:	80 81       	ld	r24, Z
   1a158:	91 81       	ldd	r25, Z+1	; 0x01
   1a15a:	ed b7       	in	r30, 0x3d	; 61
   1a15c:	fe b7       	in	r31, 0x3e	; 62
   1a15e:	95 83       	std	Z+5, r25	; 0x05
   1a160:	84 83       	std	Z+4, r24	; 0x04
   1a162:	8a ed       	ldi	r24, 0xDA	; 218
   1a164:	97 e3       	ldi	r25, 0x37	; 55
   1a166:	a0 e0       	ldi	r26, 0x00	; 0
   1a168:	81 83       	std	Z+1, r24	; 0x01
   1a16a:	92 83       	std	Z+2, r25	; 0x02
   1a16c:	a3 83       	std	Z+3, r26	; 0x03
   1a16e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a172:	c7 01       	movw	r24, r14
   1a174:	a5 d8       	rcall	.-3766   	; 0x192c0 <lif_close_volume>
   1a176:	8e cf       	rjmp	.-228    	; 0x1a094 <lif_open_volume+0x5e>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a178:	f7 01       	movw	r30, r14
   1a17a:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a17c:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a17e:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a180:	70 a9       	ldd	r23, Z+48	; 0x30
   1a182:	85 a9       	ldd	r24, Z+53	; 0x35
   1a184:	96 a9       	ldd	r25, Z+54	; 0x36
   1a186:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a188:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a18a:	48 0f       	add	r20, r24
   1a18c:	59 1f       	adc	r21, r25
   1a18e:	6a 1f       	adc	r22, r26
   1a190:	7b 1f       	adc	r23, r27
   1a192:	44 87       	std	Z+12, r20	; 0x0c
   1a194:	55 87       	std	Z+13, r21	; 0x0d
   1a196:	66 87       	std	Z+14, r22	; 0x0e
   1a198:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a19a:	84 81       	ldd	r24, Z+4	; 0x04
   1a19c:	95 81       	ldd	r25, Z+5	; 0x05
   1a19e:	a6 81       	ldd	r26, Z+6	; 0x06
   1a1a0:	b7 81       	ldd	r27, Z+7	; 0x07
   1a1a2:	84 1b       	sub	r24, r20
   1a1a4:	95 0b       	sbc	r25, r21
   1a1a6:	a6 0b       	sbc	r26, r22
   1a1a8:	b7 0b       	sbc	r27, r23
   1a1aa:	80 8b       	std	Z+16, r24	; 0x10
   1a1ac:	91 8b       	std	Z+17, r25	; 0x11
   1a1ae:	a2 8b       	std	Z+18, r26	; 0x12
   1a1b0:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a1b2:	80 8f       	std	Z+24, r24	; 0x18
   1a1b4:	91 8f       	std	Z+25, r25	; 0x19
   1a1b6:	a2 8f       	std	Z+26, r26	; 0x1a
   1a1b8:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a1ba:	14 8a       	std	Z+20, r1	; 0x14
   1a1bc:	15 8a       	std	Z+21, r1	; 0x15
   1a1be:	16 8a       	std	Z+22, r1	; 0x16
   1a1c0:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a1c2:	17 8e       	std	Z+31, r1	; 0x1f
   1a1c4:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a1c6:	15 8e       	std	Z+29, r1	; 0x1d
   1a1c8:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a1ca:	11 a2       	std	Z+33, r1	; 0x21
   1a1cc:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a1ce:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1a1d0:	12 a2       	std	Z+34, r1	; 0x22
   1a1d2:	c7 01       	movw	r24, r14
   1a1d4:	de d9       	rcall	.-3140   	; 0x19592 <lif_updatefree>
   1a1d6:	8c 01       	movw	r16, r24
   1a1d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a1dc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a1e0:	01 15       	cp	r16, r1
   1a1e2:	11 05       	cpc	r17, r1
    {
        if(debuglevel & GPIB_PPR)
   1a1e4:	a1 f4       	brne	.+40     	; 0x1a20e <lif_open_volume+0x1d8>
   1a1e6:	81 ff       	sbrs	r24, 1
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a1e8:	0f c0       	rjmp	.+30     	; 0x1a208 <lif_open_volume+0x1d2>
   1a1ea:	f7 01       	movw	r30, r14
   1a1ec:	80 81       	ld	r24, Z
   1a1ee:	91 81       	ldd	r25, Z+1	; 0x01
   1a1f0:	ed b7       	in	r30, 0x3d	; 61
   1a1f2:	fe b7       	in	r31, 0x3e	; 62
   1a1f4:	95 83       	std	Z+5, r25	; 0x05
   1a1f6:	84 83       	std	Z+4, r24	; 0x04
   1a1f8:	87 ea       	ldi	r24, 0xA7	; 167
   1a1fa:	97 e3       	ldi	r25, 0x37	; 55
   1a1fc:	a0 e0       	ldi	r26, 0x00	; 0
   1a1fe:	81 83       	std	Z+1, r24	; 0x01
   1a200:	92 83       	std	Z+2, r25	; 0x02
   1a202:	a3 83       	std	Z+3, r26	; 0x03
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a204:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1a208:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a20a:	5a d8       	rcall	.-3916   	; 0x192c0 <lif_close_volume>
    }

    if(debuglevel &LIF_DEBUG)
   1a20c:	08 c0       	rjmp	.+16     	; 0x1a21e <lif_open_volume+0x1e8>
   1a20e:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF, "Volume Listing");
   1a210:	05 c0       	rjmp	.+10     	; 0x1a21c <lif_open_volume+0x1e6>
   1a212:	6e e5       	ldi	r22, 0x5E	; 94
   1a214:	76 e1       	ldi	r23, 0x16	; 22
   1a216:	c7 01       	movw	r24, r14
   1a218:	0e 94 16 c5 	call	0x18a2c	; 0x18a2c <lif_dump_vol>
    return( LIF );
}
   1a21c:	87 01       	movw	r16, r14
   1a21e:	c8 01       	movw	r24, r16
   1a220:	c7 5c       	subi	r28, 0xC7	; 199
   1a222:	de 4f       	sbci	r29, 0xFE	; 254
   1a224:	ec e0       	ldi	r30, 0x0C	; 12
   1a226:	0c 94 0b e4 	jmp	0x1c816	; 0x1c816 <__epilogue_restores__+0xc>

0001a22a <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a22a:	2f 92       	push	r2
   1a22c:	3f 92       	push	r3
   1a22e:	4f 92       	push	r4
   1a230:	5f 92       	push	r5
   1a232:	6f 92       	push	r6
   1a234:	8f 92       	push	r8
   1a236:	9f 92       	push	r9
   1a238:	af 92       	push	r10
   1a23a:	bf 92       	push	r11
   1a23c:	cf 92       	push	r12
   1a23e:	df 92       	push	r13
   1a240:	ef 92       	push	r14
   1a242:	0f 93       	push	r16
   1a244:	1f 93       	push	r17
   1a246:	cf 93       	push	r28
   1a248:	df 93       	push	r29
   1a24a:	cd b7       	in	r28, 0x3d	; 61
   1a24c:	de b7       	in	r29, 0x3e	; 62
   1a24e:	af 97       	sbiw	r28, 0x2f	; 47
   1a250:	0f b6       	in	r0, 0x3f	; 63
   1a252:	f8 94       	cli
   1a254:	de bf       	out	0x3e, r29	; 62
   1a256:	0f be       	out	0x3f, r0	; 63
   1a258:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a25a:	63 e0       	ldi	r22, 0x03	; 3
   1a25c:	79 e0       	ldi	r23, 0x09	; 9
   1a25e:	eb de       	rcall	.-554    	; 0x1a036 <lif_open_volume>
   1a260:	9f a7       	std	Y+47, r25	; 0x2f
   1a262:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a264:	00 97       	sbiw	r24, 0x00	; 0
   1a266:	09 f4       	brne	.+2      	; 0x1a26a <lif_dir+0x40>
   1a268:	9e c1       	rjmp	.+828    	; 0x1a5a6 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a26a:	fc 01       	movw	r30, r24
   1a26c:	86 a1       	ldd	r24, Z+38	; 0x26
   1a26e:	88 23       	and	r24, r24
   1a270:	21 f0       	breq	.+8      	; 0x1a27a <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a272:	8f 01       	movw	r16, r30
   1a274:	0a 5d       	subi	r16, 0xDA	; 218
   1a276:	1f 4f       	sbci	r17, 0xFF	; 255
   1a278:	02 c0       	rjmp	.+4      	; 0x1a27e <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a27a:	00 e1       	ldi	r16, 0x10	; 16
   1a27c:	16 e1       	ldi	r17, 0x16	; 22

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a27e:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a280:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a282:	87 5b       	subi	r24, 0xB7	; 183
   1a284:	9f 4f       	sbci	r25, 0xFF	; 255
   1a286:	0e 94 da c4 	call	0x189b4	; 0x189b4 <lif_lifbcd2timestr>
   1a28a:	ed b7       	in	r30, 0x3d	; 61
   1a28c:	fe b7       	in	r31, 0x3e	; 62
   1a28e:	97 83       	std	Z+7, r25	; 0x07
   1a290:	86 83       	std	Z+6, r24	; 0x06
   1a292:	15 83       	std	Z+5, r17	; 0x05
   1a294:	04 83       	std	Z+4, r16	; 0x04
   1a296:	80 e9       	ldi	r24, 0x90	; 144
   1a298:	97 e3       	ldi	r25, 0x37	; 55
   1a29a:	a0 e0       	ldi	r26, 0x00	; 0
   1a29c:	81 83       	std	Z+1, r24	; 0x01
   1a29e:	92 83       	std	Z+2, r25	; 0x02
   1a2a0:	a3 83       	std	Z+3, r26	; 0x03
   1a2a2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a2a6:	80 e5       	ldi	r24, 0x50	; 80
   1a2a8:	97 e3       	ldi	r25, 0x37	; 55
   1a2aa:	a0 e0       	ldi	r26, 0x00	; 0
   1a2ac:	ed b7       	in	r30, 0x3d	; 61
   1a2ae:	fe b7       	in	r31, 0x3e	; 62
   1a2b0:	81 83       	std	Z+1, r24	; 0x01
   1a2b2:	92 83       	std	Z+2, r25	; 0x02
   1a2b4:	a3 83       	std	Z+3, r26	; 0x03
   1a2b6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a2ba:	00 e2       	ldi	r16, 0x20	; 32
   1a2bc:	10 e0       	ldi	r17, 0x00	; 0
   1a2be:	1f 8b       	std	Y+23, r17	; 0x17
   1a2c0:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a2c2:	21 2c       	mov	r2, r1
   1a2c4:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a2c6:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a2c8:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a2ca:	06 5a       	subi	r16, 0xA6	; 166
   1a2cc:	1f 4f       	sbci	r17, 0xFF	; 255
   1a2ce:	1d 8f       	std	Y+29, r17	; 0x1d
   1a2d0:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a2d2:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a2d4:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a2d6:	00 5a       	subi	r16, 0xA0	; 160
   1a2d8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a2da:	1d a3       	std	Y+37, r17	; 0x25
   1a2dc:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a2de:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a2e0:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a2e2:	04 59       	subi	r16, 0x94	; 148
   1a2e4:	1f 4f       	sbci	r17, 0xFF	; 255
   1a2e6:	1f a3       	std	Y+39, r17	; 0x27
   1a2e8:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a2ea:	84 e0       	ldi	r24, 0x04	; 4
   1a2ec:	97 e3       	ldi	r25, 0x37	; 55
   1a2ee:	6c 01       	movw	r12, r24
   1a2f0:	e1 2c       	mov	r14, r1
   1a2f2:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a2f4:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a2f6:	01 5b       	subi	r16, 0xB1	; 177
   1a2f8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a2fa:	1f 8f       	std	Y+31, r17	; 0x1f
   1a2fc:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a2fe:	84 ed       	ldi	r24, 0xD4	; 212
   1a300:	96 e3       	ldi	r25, 0x36	; 54
   1a302:	2c 01       	movw	r4, r24
   1a304:	61 2c       	mov	r6, r1
   1a306:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a308:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a30a:	04 5a       	subi	r16, 0xA4	; 164
   1a30c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a30e:	19 a7       	std	Y+41, r17	; 0x29
   1a310:	08 a7       	std	Y+40, r16	; 0x28
   1a312:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a314:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a316:	02 59       	subi	r16, 0x92	; 146
   1a318:	1f 4f       	sbci	r17, 0xFF	; 255
   1a31a:	1b a7       	std	Y+43, r17	; 0x2b
   1a31c:	0a a7       	std	Y+42, r16	; 0x2a
   1a31e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a320:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a322:	0c 59       	subi	r16, 0x9C	; 156
   1a324:	1f 4f       	sbci	r17, 0xFF	; 255
   1a326:	1d a7       	std	Y+45, r17	; 0x2d
   1a328:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a32a:	b1 01       	movw	r22, r2
   1a32c:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a32e:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a330:	55 d8       	rcall	.-3926   	; 0x193dc <lif_readdirindex>
   1a332:	89 2b       	or	r24, r25
   1a334:	09 f4       	brne	.+2      	; 0x1a338 <lif_dir+0x10e>
   1a336:	ad c0       	rjmp	.+346    	; 0x1a492 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a338:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a33a:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a33c:	8d 91       	ld	r24, X+
   1a33e:	9c 91       	ld	r25, X
   1a340:	8f 3f       	cpi	r24, 0xFF	; 255
   1a342:	bf ef       	ldi	r27, 0xFF	; 255
   1a344:	9b 07       	cpc	r25, r27
   1a346:	09 f4       	brne	.+2      	; 0x1a34a <lif_dir+0x120>
   1a348:	a4 c0       	rjmp	.+328    	; 0x1a492 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a34a:	ec a1       	ldd	r30, Y+36	; 0x24
   1a34c:	fd a1       	ldd	r31, Y+37	; 0x25
   1a34e:	40 81       	ld	r20, Z
   1a350:	51 81       	ldd	r21, Z+1	; 0x01
   1a352:	62 81       	ldd	r22, Z+2	; 0x02
   1a354:	73 81       	ldd	r23, Z+3	; 0x03
   1a356:	00 27       	eor	r16, r16
   1a358:	14 2f       	mov	r17, r20
   1a35a:	25 2f       	mov	r18, r21
   1a35c:	36 2f       	mov	r19, r22
   1a35e:	08 8f       	std	Y+24, r16	; 0x18
   1a360:	19 8f       	std	Y+25, r17	; 0x19
   1a362:	2a 8f       	std	Y+26, r18	; 0x1a
   1a364:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a366:	8c 7f       	andi	r24, 0xFC	; 252
   1a368:	80 31       	cpi	r24, 0x10	; 16
   1a36a:	90 4e       	sbci	r25, 0xE0	; 224
   1a36c:	09 f0       	breq	.+2      	; 0x1a370 <lif_dir+0x146>
   1a36e:	4b c0       	rjmp	.+150    	; 0x1a406 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a370:	ae a1       	ldd	r26, Y+38	; 0x26
   1a372:	bf a1       	ldd	r27, Y+39	; 0x27
   1a374:	8d 91       	ld	r24, X+
   1a376:	9c 91       	ld	r25, X
   1a378:	00 97       	sbiw	r24, 0x00	; 0
   1a37a:	b9 f0       	breq	.+46     	; 0x1a3aa <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a37c:	4c 01       	movw	r8, r24
   1a37e:	a1 2c       	mov	r10, r1
   1a380:	b1 2c       	mov	r11, r1
   1a382:	33 27       	eor	r19, r19
   1a384:	2b 2d       	mov	r18, r11
   1a386:	1a 2d       	mov	r17, r10
   1a388:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a38a:	88 23       	and	r24, r24
   1a38c:	21 f0       	breq	.+8      	; 0x1a396 <lif_dir+0x16c>
        ++sectors;
   1a38e:	0f 5f       	subi	r16, 0xFF	; 255
   1a390:	1f 4f       	sbci	r17, 0xFF	; 255
   1a392:	2f 4f       	sbci	r18, 0xFF	; 255
   1a394:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a396:	40 17       	cp	r20, r16
   1a398:	51 07       	cpc	r21, r17
   1a39a:	62 07       	cpc	r22, r18
   1a39c:	73 07       	cpc	r23, r19
   1a39e:	29 f4       	brne	.+10     	; 0x1a3aa <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a3a0:	88 8e       	std	Y+24, r8	; 0x18
   1a3a2:	99 8e       	std	Y+25, r9	; 0x19
   1a3a4:	aa 8e       	std	Y+26, r10	; 0x1a
   1a3a6:	bb 8e       	std	Y+27, r11	; 0x1b
   1a3a8:	2e c0       	rjmp	.+92     	; 0x1a406 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a3aa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a3ae:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3b2:	32 ff       	sbrs	r19, 2
   1a3b4:	24 c0       	rjmp	.+72     	; 0x1a3fe <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a3b6:	4c 01       	movw	r8, r24
   1a3b8:	a1 2c       	mov	r10, r1
   1a3ba:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a3bc:	33 27       	eor	r19, r19
   1a3be:	2b 2d       	mov	r18, r11
   1a3c0:	1a 2d       	mov	r17, r10
   1a3c2:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a3c4:	88 23       	and	r24, r24
   1a3c6:	21 f0       	breq	.+8      	; 0x1a3d0 <lif_dir+0x1a6>
        ++sectors;
   1a3c8:	0f 5f       	subi	r16, 0xFF	; 255
   1a3ca:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3cc:	2f 4f       	sbci	r18, 0xFF	; 255
   1a3ce:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a3d0:	ed b7       	in	r30, 0x3d	; 61
   1a3d2:	fe b7       	in	r31, 0x3e	; 62
   1a3d4:	46 87       	std	Z+14, r20	; 0x0e
   1a3d6:	57 87       	std	Z+15, r21	; 0x0f
   1a3d8:	60 8b       	std	Z+16, r22	; 0x10
   1a3da:	71 8b       	std	Z+17, r23	; 0x11
   1a3dc:	02 87       	std	Z+10, r16	; 0x0a
   1a3de:	13 87       	std	Z+11, r17	; 0x0b
   1a3e0:	24 87       	std	Z+12, r18	; 0x0c
   1a3e2:	35 87       	std	Z+13, r19	; 0x0d
   1a3e4:	86 82       	std	Z+6, r8	; 0x06
   1a3e6:	97 82       	std	Z+7, r9	; 0x07
   1a3e8:	a0 86       	std	Z+8, r10	; 0x08
   1a3ea:	b1 86       	std	Z+9, r11	; 0x09
   1a3ec:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a3ee:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a3f0:	15 83       	std	Z+5, r17	; 0x05
   1a3f2:	04 83       	std	Z+4, r16	; 0x04
   1a3f4:	c1 82       	std	Z+1, r12	; 0x01
   1a3f6:	d2 82       	std	Z+2, r13	; 0x02
   1a3f8:	e3 82       	std	Z+3, r14	; 0x03
   1a3fa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a3fe:	01 e2       	ldi	r16, 0x21	; 33
   1a400:	10 e0       	ldi	r17, 0x00	; 0
   1a402:	1f 8b       	std	Y+23, r17	; 0x17
   1a404:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a406:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a408:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a40a:	8d 90       	ld	r8, X+
   1a40c:	9c 90       	ld	r9, X
   1a40e:	81 14       	cp	r8, r1
   1a410:	91 04       	cpc	r9, r1
   1a412:	19 f0       	breq	.+6      	; 0x1a41a <lif_dir+0x1f0>
   1a414:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a416:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a418:	02 c0       	rjmp	.+4      	; 0x1a41e <lif_dir+0x1f4>
   1a41a:	0d e6       	ldi	r16, 0x6D	; 109
   1a41c:	16 e1       	ldi	r17, 0x16	; 22
   1a41e:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a420:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a422:	8d 91       	ld	r24, X+
   1a424:	9d 91       	ld	r25, X+
   1a426:	0d 90       	ld	r0, X+
   1a428:	bc 91       	ld	r27, X
   1a42a:	a0 2d       	mov	r26, r0
   1a42c:	88 a3       	std	Y+32, r24	; 0x20
   1a42e:	99 a3       	std	Y+33, r25	; 0x21
   1a430:	aa a3       	std	Y+34, r26	; 0x22
   1a432:	bb a3       	std	Y+35, r27	; 0x23
   1a434:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a436:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a438:	a0 80       	ld	r10, Z
   1a43a:	b1 80       	ldd	r11, Z+1	; 0x01
   1a43c:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a43e:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a440:	0e 94 da c4 	call	0x189b4	; 0x189b4 <lif_lifbcd2timestr>
   1a444:	ed b7       	in	r30, 0x3d	; 61
   1a446:	fe b7       	in	r31, 0x3e	; 62
   1a448:	95 8b       	std	Z+21, r25	; 0x15
   1a44a:	84 8b       	std	Z+20, r24	; 0x14
   1a44c:	b3 8a       	std	Z+19, r11	; 0x13
   1a44e:	a2 8a       	std	Z+18, r10	; 0x12
   1a450:	2e 89       	ldd	r18, Y+22	; 0x16
   1a452:	3f 89       	ldd	r19, Y+23	; 0x17
   1a454:	31 8b       	std	Z+17, r19	; 0x11
   1a456:	20 8b       	std	Z+16, r18	; 0x10
   1a458:	88 8d       	ldd	r24, Y+24	; 0x18
   1a45a:	99 8d       	ldd	r25, Y+25	; 0x19
   1a45c:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a45e:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a460:	84 87       	std	Z+12, r24	; 0x0c
   1a462:	95 87       	std	Z+13, r25	; 0x0d
   1a464:	a6 87       	std	Z+14, r26	; 0x0e
   1a466:	b7 87       	std	Z+15, r27	; 0x0f
   1a468:	88 a1       	ldd	r24, Y+32	; 0x20
   1a46a:	99 a1       	ldd	r25, Y+33	; 0x21
   1a46c:	aa a1       	ldd	r26, Y+34	; 0x22
   1a46e:	bb a1       	ldd	r27, Y+35	; 0x23
   1a470:	80 87       	std	Z+8, r24	; 0x08
   1a472:	91 87       	std	Z+9, r25	; 0x09
   1a474:	a2 87       	std	Z+10, r26	; 0x0a
   1a476:	b3 87       	std	Z+11, r27	; 0x0b
   1a478:	97 82       	std	Z+7, r9	; 0x07
   1a47a:	86 82       	std	Z+6, r8	; 0x06
   1a47c:	15 83       	std	Z+5, r17	; 0x05
   1a47e:	04 83       	std	Z+4, r16	; 0x04
   1a480:	41 82       	std	Z+1, r4	; 0x01
   1a482:	52 82       	std	Z+2, r5	; 0x02
   1a484:	63 82       	std	Z+3, r6	; 0x03
   1a486:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a48a:	ff ef       	ldi	r31, 0xFF	; 255
   1a48c:	2f 1a       	sub	r2, r31
   1a48e:	3f 0a       	sbc	r3, r31
    }
   1a490:	4c cf       	rjmp	.-360    	; 0x1a32a <lif_dir+0x100>

    printf("\n");
   1a492:	82 ed       	ldi	r24, 0xD2	; 210
   1a494:	96 e3       	ldi	r25, 0x36	; 54
   1a496:	a0 e0       	ldi	r26, 0x00	; 0
   1a498:	ed b7       	in	r30, 0x3d	; 61
   1a49a:	fe b7       	in	r31, 0x3e	; 62
   1a49c:	81 83       	std	Z+1, r24	; 0x01
   1a49e:	92 83       	std	Z+2, r25	; 0x02
   1a4a0:	a3 83       	std	Z+3, r26	; 0x03
   1a4a2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a4a6:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a4a8:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a4aa:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a4ac:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a4ae:	09 2e       	mov	r0, r25
   1a4b0:	00 0c       	add	r0, r0
   1a4b2:	aa 0b       	sbc	r26, r26
   1a4b4:	bb 0b       	sbc	r27, r27
   1a4b6:	ed b7       	in	r30, 0x3d	; 61
   1a4b8:	fe b7       	in	r31, 0x3e	; 62
   1a4ba:	84 83       	std	Z+4, r24	; 0x04
   1a4bc:	95 83       	std	Z+5, r25	; 0x05
   1a4be:	a6 83       	std	Z+6, r26	; 0x06
   1a4c0:	b7 83       	std	Z+7, r27	; 0x07
   1a4c2:	86 ec       	ldi	r24, 0xC6	; 198
   1a4c4:	96 e3       	ldi	r25, 0x36	; 54
   1a4c6:	a0 e0       	ldi	r26, 0x00	; 0
   1a4c8:	81 83       	std	Z+1, r24	; 0x01
   1a4ca:	92 83       	std	Z+2, r25	; 0x02
   1a4cc:	a3 83       	std	Z+3, r26	; 0x03
   1a4ce:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a4d2:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a4d4:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a4d6:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a4d8:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a4da:	09 2e       	mov	r0, r25
   1a4dc:	00 0c       	add	r0, r0
   1a4de:	aa 0b       	sbc	r26, r26
   1a4e0:	bb 0b       	sbc	r27, r27
   1a4e2:	ed b7       	in	r30, 0x3d	; 61
   1a4e4:	fe b7       	in	r31, 0x3e	; 62
   1a4e6:	84 83       	std	Z+4, r24	; 0x04
   1a4e8:	95 83       	std	Z+5, r25	; 0x05
   1a4ea:	a6 83       	std	Z+6, r26	; 0x06
   1a4ec:	b7 83       	std	Z+7, r27	; 0x07
   1a4ee:	89 eb       	ldi	r24, 0xB9	; 185
   1a4f0:	96 e3       	ldi	r25, 0x36	; 54
   1a4f2:	a0 e0       	ldi	r26, 0x00	; 0
   1a4f4:	81 83       	std	Z+1, r24	; 0x01
   1a4f6:	92 83       	std	Z+2, r25	; 0x02
   1a4f8:	a3 83       	std	Z+3, r26	; 0x03
   1a4fa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a4fe:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a500:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a502:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a504:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a506:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a508:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a50a:	ed b7       	in	r30, 0x3d	; 61
   1a50c:	fe b7       	in	r31, 0x3e	; 62
   1a50e:	84 83       	std	Z+4, r24	; 0x04
   1a510:	95 83       	std	Z+5, r25	; 0x05
   1a512:	a6 83       	std	Z+6, r26	; 0x06
   1a514:	b7 83       	std	Z+7, r27	; 0x07
   1a516:	88 ea       	ldi	r24, 0xA8	; 168
   1a518:	96 e3       	ldi	r25, 0x36	; 54
   1a51a:	a0 e0       	ldi	r26, 0x00	; 0
   1a51c:	81 83       	std	Z+1, r24	; 0x01
   1a51e:	92 83       	std	Z+2, r25	; 0x02
   1a520:	a3 83       	std	Z+3, r26	; 0x03
   1a522:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a526:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a528:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a52a:	85 a9       	ldd	r24, Z+53	; 0x35
   1a52c:	96 a9       	ldd	r25, Z+54	; 0x36
   1a52e:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a530:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a532:	ed b7       	in	r30, 0x3d	; 61
   1a534:	fe b7       	in	r31, 0x3e	; 62
   1a536:	84 83       	std	Z+4, r24	; 0x04
   1a538:	95 83       	std	Z+5, r25	; 0x05
   1a53a:	a6 83       	std	Z+6, r26	; 0x06
   1a53c:	b7 83       	std	Z+7, r27	; 0x07
   1a53e:	85 e9       	ldi	r24, 0x95	; 149
   1a540:	96 e3       	ldi	r25, 0x36	; 54
   1a542:	a0 e0       	ldi	r26, 0x00	; 0
   1a544:	81 83       	std	Z+1, r24	; 0x01
   1a546:	92 83       	std	Z+2, r25	; 0x02
   1a548:	a3 83       	std	Z+3, r26	; 0x03
   1a54a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a54e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a550:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a552:	84 89       	ldd	r24, Z+20	; 0x14
   1a554:	95 89       	ldd	r25, Z+21	; 0x15
   1a556:	a6 89       	ldd	r26, Z+22	; 0x16
   1a558:	b7 89       	ldd	r27, Z+23	; 0x17
   1a55a:	ed b7       	in	r30, 0x3d	; 61
   1a55c:	fe b7       	in	r31, 0x3e	; 62
   1a55e:	84 83       	std	Z+4, r24	; 0x04
   1a560:	95 83       	std	Z+5, r25	; 0x05
   1a562:	a6 83       	std	Z+6, r26	; 0x06
   1a564:	b7 83       	std	Z+7, r27	; 0x07
   1a566:	82 e8       	ldi	r24, 0x82	; 130
   1a568:	96 e3       	ldi	r25, 0x36	; 54
   1a56a:	a0 e0       	ldi	r26, 0x00	; 0
   1a56c:	81 83       	std	Z+1, r24	; 0x01
   1a56e:	92 83       	std	Z+2, r25	; 0x02
   1a570:	a3 83       	std	Z+3, r26	; 0x03
   1a572:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a576:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a578:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a57a:	80 8d       	ldd	r24, Z+24	; 0x18
   1a57c:	91 8d       	ldd	r25, Z+25	; 0x19
   1a57e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a580:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a582:	ed b7       	in	r30, 0x3d	; 61
   1a584:	fe b7       	in	r31, 0x3e	; 62
   1a586:	84 83       	std	Z+4, r24	; 0x04
   1a588:	95 83       	std	Z+5, r25	; 0x05
   1a58a:	a6 83       	std	Z+6, r26	; 0x06
   1a58c:	b7 83       	std	Z+7, r27	; 0x07
   1a58e:	8f e6       	ldi	r24, 0x6F	; 111
   1a590:	96 e3       	ldi	r25, 0x36	; 54
   1a592:	a0 e0       	ldi	r26, 0x00	; 0
   1a594:	81 83       	std	Z+1, r24	; 0x01
   1a596:	92 83       	std	Z+2, r25	; 0x02
   1a598:	a3 83       	std	Z+3, r26	; 0x03
   1a59a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a59e:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a5a0:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a5a2:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a5a6:	af 96       	adiw	r28, 0x2f	; 47
   1a5a8:	0f b6       	in	r0, 0x3f	; 63
   1a5aa:	f8 94       	cli
   1a5ac:	de bf       	out	0x3e, r29	; 62
   1a5ae:	0f be       	out	0x3f, r0	; 63
   1a5b0:	cd bf       	out	0x3d, r28	; 61
   1a5b2:	df 91       	pop	r29
   1a5b4:	cf 91       	pop	r28
   1a5b6:	1f 91       	pop	r17
   1a5b8:	0f 91       	pop	r16
   1a5ba:	ef 90       	pop	r14
   1a5bc:	df 90       	pop	r13
   1a5be:	cf 90       	pop	r12
   1a5c0:	bf 90       	pop	r11
   1a5c2:	af 90       	pop	r10
   1a5c4:	9f 90       	pop	r9
   1a5c6:	8f 90       	pop	r8
   1a5c8:	6f 90       	pop	r6
   1a5ca:	5f 90       	pop	r5
   1a5cc:	4f 90       	pop	r4
   1a5ce:	3f 90       	pop	r3
   1a5d0:	2f 90       	pop	r2
   1a5d2:	08 95       	ret

0001a5d4 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a5d4:	a5 e0       	ldi	r26, 0x05	; 5
   1a5d6:	b0 e0       	ldi	r27, 0x00	; 0
   1a5d8:	e0 ef       	ldi	r30, 0xF0	; 240
   1a5da:	f2 ed       	ldi	r31, 0xD2	; 210
   1a5dc:	0c 94 f1 e3 	jmp	0x1c7e2	; 0x1c7e2 <__prologue_saves__+0x10>
   1a5e0:	7c 01       	movw	r14, r24
   1a5e2:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a5e4:	cb 01       	movw	r24, r22
   1a5e6:	0e 94 cb c1 	call	0x18396	; 0x18396 <lif_checkname>
   1a5ea:	89 2b       	or	r24, r25
   1a5ec:	59 f4       	brne	.+22     	; 0x1a604 <lif_find_file+0x30>
    {
        if(debuglevel & GPIB_PPR)
   1a5ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a5f2:	81 ff       	sbrs	r24, 1
   1a5f4:	46 c0       	rjmp	.+140    	; 0x1a682 <lif_find_file+0xae>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a5f6:	ed b7       	in	r30, 0x3d	; 61
   1a5f8:	fe b7       	in	r31, 0x3e	; 62
   1a5fa:	d5 83       	std	Z+5, r29	; 0x05
   1a5fc:	c4 83       	std	Z+4, r28	; 0x04
   1a5fe:	88 e4       	ldi	r24, 0x48	; 72
   1a600:	96 e3       	ldi	r25, 0x36	; 54
   1a602:	13 c0       	rjmp	.+38     	; 0x1a62a <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a604:	fe 01       	movw	r30, r28
   1a606:	01 90       	ld	r0, Z+
   1a608:	00 20       	and	r0, r0
   1a60a:	e9 f7       	brne	.-6      	; 0x1a606 <lif_find_file+0x32>
   1a60c:	31 97       	sbiw	r30, 0x01	; 1
   1a60e:	ec 1b       	sub	r30, r28
   1a610:	fd 0b       	sbc	r31, r29
   1a612:	3b 97       	sbiw	r30, 0x0b	; 11
   1a614:	88 f0       	brcs	.+34     	; 0x1a638 <lif_find_file+0x64>
    {
        if(debuglevel & GPIB_PPR)
   1a616:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a61a:	81 ff       	sbrs	r24, 1
   1a61c:	32 c0       	rjmp	.+100    	; 0x1a682 <lif_find_file+0xae>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a61e:	ed b7       	in	r30, 0x3d	; 61
   1a620:	fe b7       	in	r31, 0x3e	; 62
   1a622:	d5 83       	std	Z+5, r29	; 0x05
   1a624:	c4 83       	std	Z+4, r28	; 0x04
   1a626:	83 e2       	ldi	r24, 0x23	; 35
   1a628:	96 e3       	ldi	r25, 0x36	; 54
   1a62a:	a0 e0       	ldi	r26, 0x00	; 0
   1a62c:	81 83       	std	Z+1, r24	; 0x01
   1a62e:	92 83       	std	Z+2, r25	; 0x02
   1a630:	a3 83       	std	Z+3, r26	; 0x03
   1a632:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1a636:	25 c0       	rjmp	.+74     	; 0x1a682 <lif_find_file+0xae>
        return(-1);
    }

    if(LIF == NULL)
   1a638:	e1 14       	cp	r14, r1
   1a63a:	f1 04       	cpc	r15, r1
   1a63c:	11 f1       	breq	.+68     	; 0x1a682 <lif_find_file+0xae>
   1a63e:	00 e0       	ldi	r16, 0x00	; 0
   1a640:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a642:	67 01       	movw	r12, r14
   1a644:	fa e5       	ldi	r31, 0x5A	; 90
   1a646:	cf 0e       	add	r12, r31
   1a648:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a64a:	57 01       	movw	r10, r14
   1a64c:	2f e4       	ldi	r18, 0x4F	; 79
   1a64e:	a2 0e       	add	r10, r18
   1a650:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a652:	b8 01       	movw	r22, r16
   1a654:	c7 01       	movw	r24, r14
   1a656:	0e 94 ee c9 	call	0x193dc	; 0x193dc <lif_readdirindex>
   1a65a:	89 2b       	or	r24, r25
   1a65c:	91 f0       	breq	.+36     	; 0x1a682 <lif_find_file+0xae>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a65e:	f6 01       	movw	r30, r12
   1a660:	80 81       	ld	r24, Z
   1a662:	91 81       	ldd	r25, Z+1	; 0x01
   1a664:	8f 3f       	cpi	r24, 0xFF	; 255
   1a666:	ff ef       	ldi	r31, 0xFF	; 255
   1a668:	9f 07       	cpc	r25, r31
   1a66a:	59 f0       	breq	.+22     	; 0x1a682 <lif_find_file+0xae>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a66c:	89 2b       	or	r24, r25
   1a66e:	31 f0       	breq	.+12     	; 0x1a67c <lif_find_file+0xa8>
   1a670:	be 01       	movw	r22, r28
   1a672:	c5 01       	movw	r24, r10
   1a674:	0e 94 fe 32 	call	0x65fc	; 0x65fc <strcasecmp>
   1a678:	89 2b       	or	r24, r25
   1a67a:	31 f0       	breq	.+12     	; 0x1a688 <lif_find_file+0xb4>
            break;
        ++index;
   1a67c:	0f 5f       	subi	r16, 0xFF	; 255
   1a67e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a680:	e8 cf       	rjmp	.-48     	; 0x1a652 <lif_find_file+0x7e>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a682:	8f ef       	ldi	r24, 0xFF	; 255
   1a684:	9f ef       	ldi	r25, 0xFF	; 255
   1a686:	01 c0       	rjmp	.+2      	; 0x1a68a <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a688:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a68a:	cd b7       	in	r28, 0x3d	; 61
   1a68c:	de b7       	in	r29, 0x3e	; 62
   1a68e:	25 96       	adiw	r28, 0x05	; 5
   1a690:	ea e0       	ldi	r30, 0x0A	; 10
   1a692:	0c 94 0d e4 	jmp	0x1c81a	; 0x1c81a <__epilogue_restores__+0x10>

0001a696 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a696:	a5 e0       	ldi	r26, 0x05	; 5
   1a698:	b0 e0       	ldi	r27, 0x00	; 0
   1a69a:	e1 e5       	ldi	r30, 0x51	; 81
   1a69c:	f3 ed       	ldi	r31, 0xD3	; 211
   1a69e:	0c 94 f3 e3 	jmp	0x1c7e6	; 0x1c7e6 <__prologue_saves__+0x14>
   1a6a2:	6b 01       	movw	r12, r22
   1a6a4:	7c 01       	movw	r14, r24
   1a6a6:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a6a8:	20 e0       	ldi	r18, 0x00	; 0
   1a6aa:	31 e0       	ldi	r19, 0x01	; 1
   1a6ac:	40 e0       	ldi	r20, 0x00	; 0
   1a6ae:	50 e0       	ldi	r21, 0x00	; 0
   1a6b0:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
    if(!pos)
   1a6b4:	61 15       	cp	r22, r1
   1a6b6:	71 05       	cpc	r23, r1
   1a6b8:	d1 f1       	breq	.+116    	; 0x1a72e <lif_e010_pad_sector+0x98>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a6ba:	c0 e0       	ldi	r28, 0x00	; 0
   1a6bc:	d1 e0       	ldi	r29, 0x01	; 1
   1a6be:	c6 1b       	sub	r28, r22
   1a6c0:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a6c2:	f8 01       	movw	r30, r16
   1a6c4:	8f ee       	ldi	r24, 0xEF	; 239
   1a6c6:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a6c8:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a6ca:	cf 01       	movw	r24, r30
   1a6cc:	80 1b       	sub	r24, r16
   1a6ce:	91 0b       	sbc	r25, r17
   1a6d0:	8c 17       	cp	r24, r28
   1a6d2:	9d 07       	cpc	r25, r29
   1a6d4:	14 f4       	brge	.+4      	; 0x1a6da <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a6d6:	21 93       	st	Z+, r18
   1a6d8:	f8 cf       	rjmp	.-16     	; 0x1a6ca <lif_e010_pad_sector+0x34>
   1a6da:	1c 16       	cp	r1, r28
   1a6dc:	1d 06       	cpc	r1, r29
   1a6de:	14 f0       	brlt	.+4      	; 0x1a6e4 <lif_e010_pad_sector+0x4e>
   1a6e0:	c1 e0       	ldi	r28, 0x01	; 1
   1a6e2:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a6e4:	ce 01       	movw	r24, r28
   1a6e6:	0d 2e       	mov	r0, r29
   1a6e8:	00 0c       	add	r0, r0
   1a6ea:	aa 0b       	sbc	r26, r26
   1a6ec:	bb 0b       	sbc	r27, r27
   1a6ee:	bc 01       	movw	r22, r24
   1a6f0:	cd 01       	movw	r24, r26
   1a6f2:	6c 0d       	add	r22, r12
   1a6f4:	7d 1d       	adc	r23, r13
   1a6f6:	8e 1d       	adc	r24, r14
   1a6f8:	9f 1d       	adc	r25, r15
   1a6fa:	20 e0       	ldi	r18, 0x00	; 0
   1a6fc:	31 e0       	ldi	r19, 0x01	; 1
   1a6fe:	40 e0       	ldi	r20, 0x00	; 0
   1a700:	50 e0       	ldi	r21, 0x00	; 0
   1a702:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a706:	61 15       	cp	r22, r1
   1a708:	71 05       	cpc	r23, r1
   1a70a:	a1 f0       	breq	.+40     	; 0x1a734 <lif_e010_pad_sector+0x9e>
    {
        if(debuglevel & GPIB_PPR)
   1a70c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a710:	21 ff       	sbrs	r18, 1
   1a712:	12 c0       	rjmp	.+36     	; 0x1a738 <lif_e010_pad_sector+0xa2>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a714:	ed b7       	in	r30, 0x3d	; 61
   1a716:	fe b7       	in	r31, 0x3e	; 62
   1a718:	75 83       	std	Z+5, r23	; 0x05
   1a71a:	64 83       	std	Z+4, r22	; 0x04
   1a71c:	8a ee       	ldi	r24, 0xEA	; 234
   1a71e:	95 e3       	ldi	r25, 0x35	; 53
   1a720:	a0 e0       	ldi	r26, 0x00	; 0
   1a722:	81 83       	std	Z+1, r24	; 0x01
   1a724:	92 83       	std	Z+2, r25	; 0x02
   1a726:	a3 83       	std	Z+3, r26	; 0x03
   1a728:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1a72c:	05 c0       	rjmp	.+10     	; 0x1a738 <lif_e010_pad_sector+0xa2>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a72e:	80 e0       	ldi	r24, 0x00	; 0
   1a730:	90 e0       	ldi	r25, 0x00	; 0
   1a732:	04 c0       	rjmp	.+8      	; 0x1a73c <lif_e010_pad_sector+0xa6>
   1a734:	ce 01       	movw	r24, r28
   1a736:	02 c0       	rjmp	.+4      	; 0x1a73c <lif_e010_pad_sector+0xa6>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a738:	8f ef       	ldi	r24, 0xFF	; 255
   1a73a:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a73c:	cd b7       	in	r28, 0x3d	; 61
   1a73e:	de b7       	in	r29, 0x3e	; 62
   1a740:	25 96       	adiw	r28, 0x05	; 5
   1a742:	e8 e0       	ldi	r30, 0x08	; 8
   1a744:	0c 94 0f e4 	jmp	0x1c81e	; 0x1c81e <__epilogue_restores__+0x14>

0001a748 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a748:	a5 e0       	ldi	r26, 0x05	; 5
   1a74a:	b0 e0       	ldi	r27, 0x00	; 0
   1a74c:	ea ea       	ldi	r30, 0xAA	; 170
   1a74e:	f3 ed       	ldi	r31, 0xD3	; 211
   1a750:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
   1a754:	ec 01       	movw	r28, r24
   1a756:	4a 01       	movw	r8, r20
   1a758:	5b 01       	movw	r10, r22
   1a75a:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a75c:	fc 01       	movw	r30, r24
   1a75e:	01 90       	ld	r0, Z+
   1a760:	00 20       	and	r0, r0
   1a762:	e9 f7       	brne	.-6      	; 0x1a75e <lif_ascii_string_to_e010+0x16>
   1a764:	31 97       	sbiw	r30, 0x01	; 1
   1a766:	6f 01       	movw	r12, r30
   1a768:	c8 1a       	sub	r12, r24
   1a76a:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a76c:	41 2c       	mov	r4, r1
   1a76e:	51 2c       	mov	r5, r1
   1a770:	32 01       	movw	r6, r4
   1a772:	53 94       	inc	r5
   1a774:	cb 01       	movw	r24, r22
   1a776:	ba 01       	movw	r22, r20
   1a778:	a3 01       	movw	r20, r6
   1a77a:	92 01       	movw	r18, r4
   1a77c:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
   1a780:	21 2c       	mov	r2, r1
   1a782:	33 24       	eor	r3, r3
   1a784:	33 94       	inc	r3
   1a786:	c1 01       	movw	r24, r2
   1a788:	86 1b       	sub	r24, r22
   1a78a:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a78c:	86 30       	cpi	r24, 0x06	; 6
   1a78e:	91 05       	cpc	r25, r1
   1a790:	20 f0       	brcs	.+8      	; 0x1a79a <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a792:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a794:	00 e0       	ldi	r16, 0x00	; 0
   1a796:	10 e0       	ldi	r17, 0x00	; 0
   1a798:	17 c0       	rjmp	.+46     	; 0x1a7c8 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a79a:	a7 01       	movw	r20, r14
   1a79c:	c5 01       	movw	r24, r10
   1a79e:	b4 01       	movw	r22, r8
   1a7a0:	7a df       	rcall	.-268    	; 0x1a696 <lif_e010_pad_sector>
   1a7a2:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a7a4:	97 fd       	sbrc	r25, 7
   1a7a6:	81 c0       	rjmp	.+258    	; 0x1a8aa <lif_ascii_string_to_e010+0x162>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a7a8:	09 2e       	mov	r0, r25
   1a7aa:	00 0c       	add	r0, r0
   1a7ac:	aa 0b       	sbc	r26, r26
   1a7ae:	bb 0b       	sbc	r27, r27
   1a7b0:	bc 01       	movw	r22, r24
   1a7b2:	cd 01       	movw	r24, r26
   1a7b4:	68 0d       	add	r22, r8
   1a7b6:	79 1d       	adc	r23, r9
   1a7b8:	8a 1d       	adc	r24, r10
   1a7ba:	9b 1d       	adc	r25, r11
   1a7bc:	a3 01       	movw	r20, r6
   1a7be:	92 01       	movw	r18, r4
   1a7c0:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
   1a7c4:	26 1a       	sub	r2, r22
   1a7c6:	37 0a       	sbc	r3, r23
   1a7c8:	f7 01       	movw	r30, r14
   1a7ca:	e0 0f       	add	r30, r16
   1a7cc:	f1 1f       	adc	r31, r17
   1a7ce:	0d 5f       	subi	r16, 0xFD	; 253
   1a7d0:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a7d2:	c6 01       	movw	r24, r12
   1a7d4:	02 96       	adiw	r24, 0x02	; 2
   1a7d6:	82 15       	cp	r24, r2
   1a7d8:	93 05       	cpc	r25, r3
   1a7da:	84 f4       	brge	.+32     	; 0x1a7fc <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a7dc:	8f ed       	ldi	r24, 0xDF	; 223
   1a7de:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a7e0:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a7e2:	d2 82       	std	Z+2, r13	; 0x02
   1a7e4:	f7 01       	movw	r30, r14
   1a7e6:	e0 0f       	add	r30, r16
   1a7e8:	f1 1f       	adc	r31, r17
   1a7ea:	cf 01       	movw	r24, r30
   1a7ec:	8e 19       	sub	r24, r14
   1a7ee:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a7f0:	29 91       	ld	r18, Y+
   1a7f2:	22 23       	and	r18, r18
   1a7f4:	09 f4       	brne	.+2      	; 0x1a7f8 <lif_ascii_string_to_e010+0xb0>
   1a7f6:	59 c0       	rjmp	.+178    	; 0x1a8aa <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a7f8:	21 93       	st	Z+, r18
   1a7fa:	f7 cf       	rjmp	.-18     	; 0x1a7ea <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a7fc:	8f ec       	ldi	r24, 0xCF	; 207
   1a7fe:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a800:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a802:	d2 82       	std	Z+2, r13	; 0x02
   1a804:	d7 01       	movw	r26, r14
   1a806:	a0 0f       	add	r26, r16
   1a808:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a80a:	fe 01       	movw	r30, r28
   1a80c:	81 91       	ld	r24, Z+
   1a80e:	81 11       	cpse	r24, r1
   1a810:	0e c0       	rjmp	.+28     	; 0x1a82e <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a812:	c8 01       	movw	r24, r16
   1a814:	01 2e       	mov	r0, r17
   1a816:	00 0c       	add	r0, r0
   1a818:	aa 0b       	sbc	r26, r26
   1a81a:	bb 0b       	sbc	r27, r27
   1a81c:	bc 01       	movw	r22, r24
   1a81e:	cd 01       	movw	r24, r26
   1a820:	68 0d       	add	r22, r8
   1a822:	79 1d       	adc	r23, r9
   1a824:	8a 1d       	adc	r24, r10
   1a826:	9b 1d       	adc	r25, r11
   1a828:	61 11       	cpse	r22, r1
   1a82a:	09 c0       	rjmp	.+18     	; 0x1a83e <lif_ascii_string_to_e010+0xf6>
   1a82c:	1f c0       	rjmp	.+62     	; 0x1a86c <lif_ascii_string_to_e010+0x124>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a82e:	02 15       	cp	r16, r2
   1a830:	13 05       	cpc	r17, r3
   1a832:	7c f7       	brge	.-34     	; 0x1a812 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a834:	0f 5f       	subi	r16, 0xFF	; 255
   1a836:	1f 4f       	sbci	r17, 0xFF	; 255
   1a838:	8d 93       	st	X+, r24
   1a83a:	ef 01       	movw	r28, r30
   1a83c:	e6 cf       	rjmp	.-52     	; 0x1a80a <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
   1a83e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a842:	21 ff       	sbrs	r18, 1
   1a844:	30 c0       	rjmp	.+96     	; 0x1a8a6 <lif_ascii_string_to_e010+0x15e>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a846:	20 e0       	ldi	r18, 0x00	; 0
   1a848:	31 e0       	ldi	r19, 0x01	; 1
   1a84a:	40 e0       	ldi	r20, 0x00	; 0
   1a84c:	50 e0       	ldi	r21, 0x00	; 0
   1a84e:	0e 94 9e e3 	call	0x1c73c	; 0x1c73c <__divmodsi4>
   1a852:	ed b7       	in	r30, 0x3d	; 61
   1a854:	fe b7       	in	r31, 0x3e	; 62
   1a856:	75 83       	std	Z+5, r23	; 0x05
   1a858:	64 83       	std	Z+4, r22	; 0x04
   1a85a:	86 ec       	ldi	r24, 0xC6	; 198
   1a85c:	95 e3       	ldi	r25, 0x35	; 53
   1a85e:	a0 e0       	ldi	r26, 0x00	; 0
   1a860:	81 83       	std	Z+1, r24	; 0x01
   1a862:	92 83       	std	Z+2, r25	; 0x02
   1a864:	a3 83       	std	Z+3, r26	; 0x03
   1a866:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1a86a:	1d c0       	rjmp	.+58     	; 0x1a8a6 <lif_ascii_string_to_e010+0x15e>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a86c:	fe 01       	movw	r30, r28
   1a86e:	01 90       	ld	r0, Z+
   1a870:	00 20       	and	r0, r0
   1a872:	e9 f7       	brne	.-6      	; 0x1a86e <lif_ascii_string_to_e010+0x126>
   1a874:	31 97       	sbiw	r30, 0x01	; 1
   1a876:	9f 01       	movw	r18, r30
   1a878:	2c 1b       	sub	r18, r28
   1a87a:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a87c:	d7 01       	movw	r26, r14
   1a87e:	a0 0f       	add	r26, r16
   1a880:	b1 1f       	adc	r27, r17
   1a882:	8f e6       	ldi	r24, 0x6F	; 111
   1a884:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a886:	fd 01       	movw	r30, r26
   1a888:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a88a:	32 83       	std	Z+2, r19	; 0x02
   1a88c:	0d 5f       	subi	r16, 0xFD	; 253
   1a88e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a890:	f7 01       	movw	r30, r14
   1a892:	e0 0f       	add	r30, r16
   1a894:	f1 1f       	adc	r31, r17
   1a896:	cf 01       	movw	r24, r30
   1a898:	8e 19       	sub	r24, r14
   1a89a:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a89c:	29 91       	ld	r18, Y+
   1a89e:	22 23       	and	r18, r18
   1a8a0:	21 f0       	breq	.+8      	; 0x1a8aa <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a8a2:	21 93       	st	Z+, r18
   1a8a4:	f8 cf       	rjmp	.-16     	; 0x1a896 <lif_ascii_string_to_e010+0x14e>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a8a6:	8f ef       	ldi	r24, 0xFF	; 255
   1a8a8:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a8aa:	cd b7       	in	r28, 0x3d	; 61
   1a8ac:	de b7       	in	r29, 0x3e	; 62
   1a8ae:	25 96       	adiw	r28, 0x05	; 5
   1a8b0:	e2 e1       	ldi	r30, 0x12	; 18
   1a8b2:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0001a8b6 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a8b6:	ad e0       	ldi	r26, 0x0D	; 13
   1a8b8:	b3 e0       	ldi	r27, 0x03	; 3
   1a8ba:	e1 e6       	ldi	r30, 0x61	; 97
   1a8bc:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8be:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
   1a8c2:	5c 01       	movw	r10, r24
   1a8c4:	2a 01       	movw	r4, r20
   1a8c6:	3b 01       	movw	r6, r22
   1a8c8:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a8ca:	69 ef       	ldi	r22, 0xF9	; 249
   1a8cc:	78 e0       	ldi	r23, 0x08	; 8
   1a8ce:	0e 94 30 c0 	call	0x18060	; 0x18060 <lif_open>
   1a8d2:	c7 5f       	subi	r28, 0xF7	; 247
   1a8d4:	dc 4f       	sbci	r29, 0xFC	; 252
   1a8d6:	99 83       	std	Y+1, r25	; 0x01
   1a8d8:	88 83       	st	Y, r24
   1a8da:	c9 50       	subi	r28, 0x09	; 9
   1a8dc:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a8de:	89 2b       	or	r24, r25
   1a8e0:	09 f4       	brne	.+2      	; 0x1a8e4 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a8e2:	63 c0       	rjmp	.+198    	; 0x1a9aa <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a8e4:	81 2c       	mov	r8, r1
   1a8e6:	91 2c       	mov	r9, r1
   1a8e8:	c1 2c       	mov	r12, r1
   1a8ea:	d1 2c       	mov	r13, r1
   1a8ec:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a8ee:	88 eb       	ldi	r24, 0xB8	; 184
   1a8f0:	95 e3       	ldi	r25, 0x35	; 53
   1a8f2:	9c 01       	movw	r18, r24
   1a8f4:	40 e0       	ldi	r20, 0x00	; 0
   1a8f6:	c5 5f       	subi	r28, 0xF5	; 245
   1a8f8:	dc 4f       	sbci	r29, 0xFC	; 252
   1a8fa:	28 83       	st	Y, r18
   1a8fc:	39 83       	std	Y+1, r19	; 0x01
   1a8fe:	4a 83       	std	Y+2, r20	; 0x02
   1a900:	cb 50       	subi	r28, 0x0B	; 11
   1a902:	d3 40       	sbci	r29, 0x03	; 3
   1a904:	14 c0       	rjmp	.+40     	; 0x1a92e <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a906:	c1 01       	movw	r24, r2
   1a908:	03 2c       	mov	r0, r3
   1a90a:	00 0c       	add	r0, r0
   1a90c:	aa 0b       	sbc	r26, r26
   1a90e:	bb 0b       	sbc	r27, r27
   1a910:	48 0e       	add	r4, r24
   1a912:	59 1e       	adc	r5, r25
   1a914:	6a 1e       	adc	r6, r26
   1a916:	7b 1e       	adc	r7, r27
        bytes += size;
   1a918:	c8 0e       	add	r12, r24
   1a91a:	d9 1e       	adc	r13, r25
   1a91c:	ea 1e       	adc	r14, r26
   1a91e:	fb 1e       	adc	r15, r27
        count += size;
   1a920:	82 0c       	add	r8, r2
   1a922:	93 1c       	adc	r9, r3

        if(count > 256)
   1a924:	31 e0       	ldi	r19, 0x01	; 1
   1a926:	83 16       	cp	r8, r19
   1a928:	93 06       	cpc	r9, r19
   1a92a:	0c f0       	brlt	.+2      	; 0x1a92e <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a92c:	43 c0       	rjmp	.+134    	; 0x1a9b4 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a92e:	c7 5f       	subi	r28, 0xF7	; 247
   1a930:	dc 4f       	sbci	r29, 0xFC	; 252
   1a932:	48 81       	ld	r20, Y
   1a934:	59 81       	ldd	r21, Y+1	; 0x01
   1a936:	c9 50       	subi	r28, 0x09	; 9
   1a938:	d3 40       	sbci	r29, 0x03	; 3
   1a93a:	6d ef       	ldi	r22, 0xFD	; 253
   1a93c:	70 e0       	ldi	r23, 0x00	; 0
   1a93e:	ce 01       	movw	r24, r28
   1a940:	88 5f       	subi	r24, 0xF8	; 248
   1a942:	9d 4f       	sbci	r25, 0xFD	; 253
   1a944:	0e 94 f5 77 	call	0xefea	; 0xefea <fgets>
   1a948:	89 2b       	or	r24, r25
   1a94a:	09 f4       	brne	.+2      	; 0x1a94e <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a94c:	4b c0       	rjmp	.+150    	; 0x1a9e4 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a94e:	ce 01       	movw	r24, r28
   1a950:	88 5f       	subi	r24, 0xF8	; 248
   1a952:	9d 4f       	sbci	r25, 0xFD	; 253
   1a954:	0e 94 75 33 	call	0x66ea	; 0x66ea <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a958:	66 e7       	ldi	r22, 0x76	; 118
   1a95a:	76 e1       	ldi	r23, 0x16	; 22
   1a95c:	ce 01       	movw	r24, r28
   1a95e:	88 5f       	subi	r24, 0xF8	; 248
   1a960:	9d 4f       	sbci	r25, 0xFD	; 253
   1a962:	0e 94 b8 32 	call	0x6570	; 0x6570 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a966:	9e 01       	movw	r18, r28
   1a968:	28 5f       	subi	r18, 0xF8	; 248
   1a96a:	3f 4f       	sbci	r19, 0xFF	; 255
   1a96c:	b3 01       	movw	r22, r6
   1a96e:	a2 01       	movw	r20, r4
   1a970:	ce 01       	movw	r24, r28
   1a972:	88 5f       	subi	r24, 0xF8	; 248
   1a974:	9d 4f       	sbci	r25, 0xFD	; 253
   1a976:	e8 de       	rcall	.-560    	; 0x1a748 <lif_ascii_string_to_e010>
   1a978:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a97a:	a1 14       	cp	r10, r1
   1a97c:	b1 04       	cpc	r11, r1
   1a97e:	19 f2       	breq	.-122    	; 0x1a906 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a980:	8c 01       	movw	r16, r24
   1a982:	a3 01       	movw	r20, r6
   1a984:	92 01       	movw	r18, r4
   1a986:	be 01       	movw	r22, r28
   1a988:	68 5f       	subi	r22, 0xF8	; 248
   1a98a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a98c:	c5 01       	movw	r24, r10
   1a98e:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
            if(len < size)
   1a992:	82 15       	cp	r24, r2
   1a994:	93 05       	cpc	r25, r3
   1a996:	0c f0       	brlt	.+2      	; 0x1a99a <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a998:	b6 cf       	rjmp	.-148    	; 0x1a906 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a99a:	c7 5f       	subi	r28, 0xF7	; 247
   1a99c:	dc 4f       	sbci	r29, 0xFC	; 252
   1a99e:	88 81       	ld	r24, Y
   1a9a0:	99 81       	ldd	r25, Y+1	; 0x01
   1a9a2:	c9 50       	subi	r28, 0x09	; 9
   1a9a4:	d3 40       	sbci	r29, 0x03	; 3
   1a9a6:	0e 94 87 7e 	call	0xfd0e	; 0xfd0e <fclose>
                return(-1);
   1a9aa:	6f ef       	ldi	r22, 0xFF	; 255
   1a9ac:	7f ef       	ldi	r23, 0xFF	; 255
   1a9ae:	8f ef       	ldi	r24, 0xFF	; 255
   1a9b0:	9f ef       	ldi	r25, 0xFF	; 255
   1a9b2:	84 c0       	rjmp	.+264    	; 0x1aabc <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a9b4:	a1 14       	cp	r10, r1
   1a9b6:	b1 04       	cpc	r11, r1
   1a9b8:	91 f0       	breq	.+36     	; 0x1a9de <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a9ba:	ed b7       	in	r30, 0x3d	; 61
   1a9bc:	fe b7       	in	r31, 0x3e	; 62
   1a9be:	c4 82       	std	Z+4, r12	; 0x04
   1a9c0:	d5 82       	std	Z+5, r13	; 0x05
   1a9c2:	e6 82       	std	Z+6, r14	; 0x06
   1a9c4:	f7 82       	std	Z+7, r15	; 0x07
   1a9c6:	c5 5f       	subi	r28, 0xF5	; 245
   1a9c8:	dc 4f       	sbci	r29, 0xFC	; 252
   1a9ca:	28 81       	ld	r18, Y
   1a9cc:	39 81       	ldd	r19, Y+1	; 0x01
   1a9ce:	4a 81       	ldd	r20, Y+2	; 0x02
   1a9d0:	cb 50       	subi	r28, 0x0B	; 11
   1a9d2:	d3 40       	sbci	r29, 0x03	; 3
   1a9d4:	21 83       	std	Z+1, r18	; 0x01
   1a9d6:	32 83       	std	Z+2, r19	; 0x02
   1a9d8:	43 83       	std	Z+3, r20	; 0x03
   1a9da:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a9de:	81 2c       	mov	r8, r1
   1a9e0:	91 2c       	mov	r9, r1
   1a9e2:	a5 cf       	rjmp	.-182    	; 0x1a92e <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a9e4:	c7 5f       	subi	r28, 0xF7	; 247
   1a9e6:	dc 4f       	sbci	r29, 0xFC	; 252
   1a9e8:	88 81       	ld	r24, Y
   1a9ea:	99 81       	ldd	r25, Y+1	; 0x01
   1a9ec:	c9 50       	subi	r28, 0x09	; 9
   1a9ee:	d3 40       	sbci	r29, 0x03	; 3
   1a9f0:	0e 94 87 7e 	call	0xfd0e	; 0xfd0e <fclose>

// Write EOF
    str[0] = 0;
   1a9f4:	c8 5f       	subi	r28, 0xF8	; 248
   1a9f6:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9f8:	18 82       	st	Y, r1
   1a9fa:	c8 50       	subi	r28, 0x08	; 8
   1a9fc:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a9fe:	9e 01       	movw	r18, r28
   1aa00:	28 5f       	subi	r18, 0xF8	; 248
   1aa02:	3f 4f       	sbci	r19, 0xFF	; 255
   1aa04:	b3 01       	movw	r22, r6
   1aa06:	a2 01       	movw	r20, r4
   1aa08:	ce 01       	movw	r24, r28
   1aa0a:	88 5f       	subi	r24, 0xF8	; 248
   1aa0c:	9d 4f       	sbci	r25, 0xFD	; 253
   1aa0e:	9c de       	rcall	.-712    	; 0x1a748 <lif_ascii_string_to_e010>
   1aa10:	4c 01       	movw	r8, r24

    if(LIF)
   1aa12:	a1 14       	cp	r10, r1
   1aa14:	b1 04       	cpc	r11, r1
   1aa16:	d1 f4       	brne	.+52     	; 0x1aa4c <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1aa18:	c4 01       	movw	r24, r8
   1aa1a:	09 2c       	mov	r0, r9
   1aa1c:	00 0c       	add	r0, r0
   1aa1e:	aa 0b       	sbc	r26, r26
   1aa20:	bb 0b       	sbc	r27, r27
   1aa22:	c8 0e       	add	r12, r24
   1aa24:	d9 1e       	adc	r13, r25
   1aa26:	ea 1e       	adc	r14, r26
   1aa28:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1aa2a:	12 01       	movw	r2, r4
   1aa2c:	23 01       	movw	r4, r6
   1aa2e:	28 0e       	add	r2, r24
   1aa30:	39 1e       	adc	r3, r25
   1aa32:	4a 1e       	adc	r4, r26
   1aa34:	5b 1e       	adc	r5, r27
   1aa36:	ae 01       	movw	r20, r28
   1aa38:	48 5f       	subi	r20, 0xF8	; 248
   1aa3a:	5f 4f       	sbci	r21, 0xFF	; 255
   1aa3c:	c2 01       	movw	r24, r4
   1aa3e:	b1 01       	movw	r22, r2
   1aa40:	2a de       	rcall	.-940    	; 0x1a696 <lif_e010_pad_sector>
   1aa42:	3c 01       	movw	r6, r24
    if(LIF)
   1aa44:	a1 14       	cp	r10, r1
   1aa46:	b1 04       	cpc	r11, r1
   1aa48:	e1 f4       	brne	.+56     	; 0x1aa82 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1aa4a:	36 c0       	rjmp	.+108    	; 0x1aab8 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1aa4c:	ed b7       	in	r30, 0x3d	; 61
   1aa4e:	fe b7       	in	r31, 0x3e	; 62
   1aa50:	c4 82       	std	Z+4, r12	; 0x04
   1aa52:	d5 82       	std	Z+5, r13	; 0x05
   1aa54:	e6 82       	std	Z+6, r14	; 0x06
   1aa56:	f7 82       	std	Z+7, r15	; 0x07
   1aa58:	8a ea       	ldi	r24, 0xAA	; 170
   1aa5a:	95 e3       	ldi	r25, 0x35	; 53
   1aa5c:	a0 e0       	ldi	r26, 0x00	; 0
   1aa5e:	81 83       	std	Z+1, r24	; 0x01
   1aa60:	92 83       	std	Z+2, r25	; 0x02
   1aa62:	a3 83       	std	Z+3, r26	; 0x03
   1aa64:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1aa68:	84 01       	movw	r16, r8
   1aa6a:	a3 01       	movw	r20, r6
   1aa6c:	92 01       	movw	r18, r4
   1aa6e:	be 01       	movw	r22, r28
   1aa70:	68 5f       	subi	r22, 0xF8	; 248
   1aa72:	7f 4f       	sbci	r23, 0xFF	; 255
   1aa74:	c5 01       	movw	r24, r10
   1aa76:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
        if(len < size)
   1aa7a:	88 15       	cp	r24, r8
   1aa7c:	99 05       	cpc	r25, r9
   1aa7e:	64 f6       	brge	.-104    	; 0x1aa18 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1aa80:	94 cf       	rjmp	.-216    	; 0x1a9aa <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1aa82:	8c 01       	movw	r16, r24
   1aa84:	a2 01       	movw	r20, r4
   1aa86:	91 01       	movw	r18, r2
   1aa88:	be 01       	movw	r22, r28
   1aa8a:	68 5f       	subi	r22, 0xF8	; 248
   1aa8c:	7f 4f       	sbci	r23, 0xFF	; 255
   1aa8e:	c5 01       	movw	r24, r10
   1aa90:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
        if(len < size)
   1aa94:	86 15       	cp	r24, r6
   1aa96:	97 05       	cpc	r25, r7
   1aa98:	0c f4       	brge	.+2      	; 0x1aa9c <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1aa9a:	87 cf       	rjmp	.-242    	; 0x1a9aa <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1aa9c:	ed b7       	in	r30, 0x3d	; 61
   1aa9e:	fe b7       	in	r31, 0x3e	; 62
   1aaa0:	c4 82       	std	Z+4, r12	; 0x04
   1aaa2:	d5 82       	std	Z+5, r13	; 0x05
   1aaa4:	e6 82       	std	Z+6, r14	; 0x06
   1aaa6:	f7 82       	std	Z+7, r15	; 0x07
   1aaa8:	8c e9       	ldi	r24, 0x9C	; 156
   1aaaa:	95 e3       	ldi	r25, 0x35	; 53
   1aaac:	a0 e0       	ldi	r26, 0x00	; 0
   1aaae:	81 83       	std	Z+1, r24	; 0x01
   1aab0:	92 83       	std	Z+2, r25	; 0x02
   1aab2:	a3 83       	std	Z+3, r26	; 0x03
   1aab4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    return(bytes);
   1aab8:	b6 01       	movw	r22, r12
   1aaba:	c7 01       	movw	r24, r14
}
   1aabc:	c3 5f       	subi	r28, 0xF3	; 243
   1aabe:	dc 4f       	sbci	r29, 0xFC	; 252
   1aac0:	e2 e1       	ldi	r30, 0x12	; 18
   1aac2:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0001aac6 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1aac6:	ab e3       	ldi	r26, 0x3B	; 59
   1aac8:	b0 e0       	ldi	r27, 0x00	; 0
   1aaca:	e9 e6       	ldi	r30, 0x69	; 105
   1aacc:	f5 ed       	ldi	r31, 0xD5	; 213
   1aace:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
   1aad2:	6c 01       	movw	r12, r24
   1aad4:	1b 01       	movw	r2, r22
   1aad6:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1aad8:	fc 01       	movw	r30, r24
   1aada:	80 81       	ld	r24, Z
   1aadc:	81 11       	cpse	r24, r1
   1aade:	03 c0       	rjmp	.+6      	; 0x1aae6 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1aae0:	89 e6       	ldi	r24, 0x69	; 105
   1aae2:	95 e3       	ldi	r25, 0x35	; 53
   1aae4:	1a c0       	rjmp	.+52     	; 0x1ab1a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1aae6:	fb 01       	movw	r30, r22
   1aae8:	80 81       	ld	r24, Z
   1aaea:	81 11       	cpse	r24, r1
   1aaec:	03 c0       	rjmp	.+6      	; 0x1aaf4 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1aaee:	8b e3       	ldi	r24, 0x3B	; 59
   1aaf0:	95 e3       	ldi	r25, 0x35	; 53
   1aaf2:	13 c0       	rjmp	.+38     	; 0x1ab1a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1aaf4:	fa 01       	movw	r30, r20
   1aaf6:	80 81       	ld	r24, Z
   1aaf8:	81 11       	cpse	r24, r1
   1aafa:	03 c0       	rjmp	.+6      	; 0x1ab02 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1aafc:	8c e0       	ldi	r24, 0x0C	; 12
   1aafe:	95 e3       	ldi	r25, 0x35	; 53
   1ab00:	0c c0       	rjmp	.+24     	; 0x1ab1a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ab02:	be 01       	movw	r22, r28
   1ab04:	66 5f       	subi	r22, 0xF6	; 246
   1ab06:	7f 4f       	sbci	r23, 0xFF	; 255
   1ab08:	ca 01       	movw	r24, r20
   1ab0a:	0e 94 5a c0 	call	0x180b4	; 0x180b4 <lif_stat>
   1ab0e:	9b af       	std	Y+59, r25	; 0x3b
   1ab10:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1ab12:	89 2b       	or	r24, r25
   1ab14:	59 f4       	brne	.+22     	; 0x1ab2c <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1ab16:	8c ed       	ldi	r24, 0xDC	; 220
   1ab18:	94 e3       	ldi	r25, 0x34	; 52
   1ab1a:	a0 e0       	ldi	r26, 0x00	; 0
   1ab1c:	ed b7       	in	r30, 0x3d	; 61
   1ab1e:	fe b7       	in	r31, 0x3e	; 62
   1ab20:	81 83       	std	Z+1, r24	; 0x01
   1ab22:	92 83       	std	Z+2, r25	; 0x02
   1ab24:	a3 83       	std	Z+3, r26	; 0x03
   1ab26:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1ab2a:	01 c1       	rjmp	.+514    	; 0x1ad2e <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1ab2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ab30:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ab34:	92 ff       	sbrs	r25, 2
   1ab36:	10 c0       	rjmp	.+32     	; 0x1ab58 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1ab38:	ed b7       	in	r30, 0x3d	; 61
   1ab3a:	fe b7       	in	r31, 0x3e	; 62
   1ab3c:	f1 86       	std	Z+9, r15	; 0x09
   1ab3e:	e0 86       	std	Z+8, r14	; 0x08
   1ab40:	37 82       	std	Z+7, r3	; 0x07
   1ab42:	26 82       	std	Z+6, r2	; 0x06
   1ab44:	d5 82       	std	Z+5, r13	; 0x05
   1ab46:	c4 82       	std	Z+4, r12	; 0x04
   1ab48:	8d ea       	ldi	r24, 0xAD	; 173
   1ab4a:	94 e3       	ldi	r25, 0x34	; 52
   1ab4c:	a0 e0       	ldi	r26, 0x00	; 0
   1ab4e:	81 83       	std	Z+1, r24	; 0x01
   1ab50:	92 83       	std	Z+2, r25	; 0x02
   1ab52:	a3 83       	std	Z+3, r26	; 0x03
   1ab54:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1ab58:	97 01       	movw	r18, r14
   1ab5a:	40 e0       	ldi	r20, 0x00	; 0
   1ab5c:	50 e0       	ldi	r21, 0x00	; 0
   1ab5e:	ba 01       	movw	r22, r20
   1ab60:	80 e0       	ldi	r24, 0x00	; 0
   1ab62:	90 e0       	ldi	r25, 0x00	; 0
   1ab64:	a8 de       	rcall	.-688    	; 0x1a8b6 <lif_add_ascii_file_as_e010_wrapper>
   1ab66:	4b 01       	movw	r8, r22
   1ab68:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ab6a:	47 2e       	mov	r4, r23
   1ab6c:	58 2e       	mov	r5, r24
   1ab6e:	69 2e       	mov	r6, r25
   1ab70:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ab72:	66 23       	and	r22, r22
   1ab74:	29 f0       	breq	.+10     	; 0x1ab80 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1ab76:	ff ef       	ldi	r31, 0xFF	; 255
   1ab78:	4f 1a       	sub	r4, r31
   1ab7a:	5f 0a       	sbc	r5, r31
   1ab7c:	6f 0a       	sbc	r6, r31
   1ab7e:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1ab80:	6c ef       	ldi	r22, 0xFC	; 252
   1ab82:	78 e0       	ldi	r23, 0x08	; 8
   1ab84:	c6 01       	movw	r24, r12
   1ab86:	57 da       	rcall	.-2898   	; 0x1a036 <lif_open_volume>
   1ab88:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1ab8a:	00 97       	sbiw	r24, 0x00	; 0
   1ab8c:	09 f4       	brne	.+2      	; 0x1ab90 <lif_add_ascii_file_as_e010+0xca>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1ab8e:	cf c0       	rjmp	.+414    	; 0x1ad2e <lif_add_ascii_file_as_e010+0x268>
   1ab90:	b3 01       	movw	r22, r6
   1ab92:	a2 01       	movw	r20, r4
   1ab94:	f0 d8       	rcall	.-3616   	; 0x19d76 <lif_newdir>
    if(index == -1)
   1ab96:	3c 01       	movw	r6, r24
   1ab98:	8f ef       	ldi	r24, 0xFF	; 255
   1ab9a:	68 16       	cp	r6, r24
   1ab9c:	78 06       	cpc	r7, r24
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1ab9e:	79 f4       	brne	.+30     	; 0x1abbe <lif_add_ascii_file_as_e010+0xf8>
   1aba0:	ed b7       	in	r30, 0x3d	; 61
   1aba2:	fe b7       	in	r31, 0x3e	; 62
   1aba4:	f7 82       	std	Z+7, r15	; 0x07
   1aba6:	e6 82       	std	Z+6, r14	; 0x06
   1aba8:	d5 82       	std	Z+5, r13	; 0x05
   1abaa:	c4 82       	std	Z+4, r12	; 0x04
   1abac:	8d e7       	ldi	r24, 0x7D	; 125
   1abae:	94 e3       	ldi	r25, 0x34	; 52
   1abb0:	a0 e0       	ldi	r26, 0x00	; 0
   1abb2:	81 83       	std	Z+1, r24	; 0x01
   1abb4:	92 83       	std	Z+2, r25	; 0x02
   1abb6:	a3 83       	std	Z+3, r26	; 0x03
   1abb8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1abbc:	a0 c0       	rjmp	.+320    	; 0x1acfe <lif_add_ascii_file_as_e010+0x238>
   1abbe:	68 01       	movw	r12, r16
   1abc0:	ff e4       	ldi	r31, 0x4F	; 79
   1abc2:	cf 0e       	add	r12, r31
   1abc4:	d1 1c       	adc	r13, r1
   1abc6:	4a e0       	ldi	r20, 0x0A	; 10
   1abc8:	50 e0       	ldi	r21, 0x00	; 0
   1abca:	b1 01       	movw	r22, r2
   1abcc:	c6 01       	movw	r24, r12
   1abce:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1abd2:	80 e1       	ldi	r24, 0x10	; 16
   1abd4:	90 ee       	ldi	r25, 0xE0	; 224
   1abd6:	f8 01       	movw	r30, r16
   1abd8:	e6 5a       	subi	r30, 0xA6	; 166
   1abda:	ff 4f       	sbci	r31, 0xFF	; 255
   1abdc:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1abde:	80 83       	st	Z, r24
   1abe0:	ea ad       	ldd	r30, Y+58	; 0x3a
   1abe2:	fb ad       	ldd	r31, Y+59	; 0x3b
   1abe4:	60 a5       	ldd	r22, Z+40	; 0x28
   1abe6:	71 a5       	ldd	r23, Z+41	; 0x29
   1abe8:	82 a5       	ldd	r24, Z+42	; 0x2a
   1abea:	93 a5       	ldd	r25, Z+43	; 0x2b
   1abec:	a8 01       	movw	r20, r16
   1abee:	4c 59       	subi	r20, 0x9C	; 156
   1abf0:	5f 4f       	sbci	r21, 0xFF	; 255
   1abf2:	0e 94 2a c4 	call	0x18854	; 0x18854 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1abf6:	81 e0       	ldi	r24, 0x01	; 1
   1abf8:	90 e8       	ldi	r25, 0x80	; 128
   1abfa:	f8 01       	movw	r30, r16
   1abfc:	e6 59       	subi	r30, 0x96	; 150
   1abfe:	ff 4f       	sbci	r31, 0xFF	; 255
   1ac00:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                   // 28
   1ac02:	80 83       	st	Z, r24
   1ac04:	32 96       	adiw	r30, 0x02	; 2
   1ac06:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1ac08:	80 82       	st	Z, r8
   1ac0a:	80 e0       	ldi	r24, 0x00	; 0
   1ac0c:	91 e0       	ldi	r25, 0x01	; 1
   1ac0e:	32 96       	adiw	r30, 0x02	; 2
   1ac10:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ac12:	80 83       	st	Z, r24
   1ac14:	58 01       	movw	r10, r16
   1ac16:	fc e5       	ldi	r31, 0x5C	; 92
   1ac18:	af 0e       	add	r10, r31
   1ac1a:	b1 1c       	adc	r11, r1
   1ac1c:	f5 01       	movw	r30, r10
   1ac1e:	80 81       	ld	r24, Z
   1ac20:	91 81       	ldd	r25, Z+1	; 0x01
   1ac22:	a2 81       	ldd	r26, Z+2	; 0x02
   1ac24:	b3 81       	ldd	r27, Z+3	; 0x03
   1ac26:	22 24       	eor	r2, r2
   1ac28:	38 2e       	mov	r3, r24
   1ac2a:	49 2e       	mov	r4, r25

    if(debuglevel & LIF_DEBUG)
   1ac2c:	5a 2e       	mov	r5, r26
   1ac2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ac32:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ac36:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1ac38:	05 c0       	rjmp	.+10     	; 0x1ac44 <lif_add_ascii_file_as_e010+0x17e>
   1ac3a:	68 e7       	ldi	r22, 0x78	; 120
   1ac3c:	76 e1       	ldi	r23, 0x16	; 22
   1ac3e:	c8 01       	movw	r24, r16
   1ac40:	0e 94 16 c5 	call	0x18a2c	; 0x18a2c <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1ac44:	97 01       	movw	r18, r14
   1ac46:	b2 01       	movw	r22, r4
   1ac48:	a1 01       	movw	r20, r2
   1ac4a:	c8 01       	movw	r24, r16
   1ac4c:	34 de       	rcall	.-920    	; 0x1a8b6 <lif_add_ascii_file_as_e010_wrapper>
   1ac4e:	4b 01       	movw	r8, r22

    if(debuglevel & LIF_DEBUG)
   1ac50:	7c 01       	movw	r14, r24
   1ac52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ac56:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ac5a:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1ac5c:	4a c0       	rjmp	.+148    	; 0x1acf2 <lif_add_ascii_file_as_e010+0x22c>
   1ac5e:	86 e5       	ldi	r24, 0x56	; 86
   1ac60:	94 e3       	ldi	r25, 0x34	; 52
   1ac62:	a0 e0       	ldi	r26, 0x00	; 0
   1ac64:	ed b7       	in	r30, 0x3d	; 61
   1ac66:	fe b7       	in	r31, 0x3e	; 62
   1ac68:	81 83       	std	Z+1, r24	; 0x01
   1ac6a:	92 83       	std	Z+2, r25	; 0x02
   1ac6c:	a3 83       	std	Z+3, r26	; 0x03
   1ac6e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1ac72:	ed b7       	in	r30, 0x3d	; 61
   1ac74:	fe b7       	in	r31, 0x3e	; 62
   1ac76:	d5 82       	std	Z+5, r13	; 0x05
   1ac78:	c4 82       	std	Z+4, r12	; 0x04
   1ac7a:	8f e3       	ldi	r24, 0x3F	; 63
   1ac7c:	94 e3       	ldi	r25, 0x34	; 52
   1ac7e:	a0 e0       	ldi	r26, 0x00	; 0
   1ac80:	81 83       	std	Z+1, r24	; 0x01
   1ac82:	92 83       	std	Z+2, r25	; 0x02
   1ac84:	a3 83       	std	Z+3, r26	; 0x03
   1ac86:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1ac8a:	ed b7       	in	r30, 0x3d	; 61
   1ac8c:	fe b7       	in	r31, 0x3e	; 62
   1ac8e:	75 82       	std	Z+5, r7	; 0x05
   1ac90:	64 82       	std	Z+4, r6	; 0x04
   1ac92:	88 e2       	ldi	r24, 0x28	; 40
   1ac94:	94 e3       	ldi	r25, 0x34	; 52
   1ac96:	a0 e0       	ldi	r26, 0x00	; 0
   1ac98:	81 83       	std	Z+1, r24	; 0x01
   1ac9a:	92 83       	std	Z+2, r25	; 0x02
   1ac9c:	a3 83       	std	Z+3, r26	; 0x03
   1ac9e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1aca2:	f5 01       	movw	r30, r10
   1aca4:	80 81       	ld	r24, Z
   1aca6:	91 81       	ldd	r25, Z+1	; 0x01
   1aca8:	a2 81       	ldd	r26, Z+2	; 0x02
   1acaa:	b3 81       	ldd	r27, Z+3	; 0x03
   1acac:	ed b7       	in	r30, 0x3d	; 61
   1acae:	fe b7       	in	r31, 0x3e	; 62
   1acb0:	84 83       	std	Z+4, r24	; 0x04
   1acb2:	95 83       	std	Z+5, r25	; 0x05
   1acb4:	a6 83       	std	Z+6, r26	; 0x06
   1acb6:	b7 83       	std	Z+7, r27	; 0x07
   1acb8:	8f e0       	ldi	r24, 0x0F	; 15
   1acba:	94 e3       	ldi	r25, 0x34	; 52
   1acbc:	a0 e0       	ldi	r26, 0x00	; 0
   1acbe:	81 83       	std	Z+1, r24	; 0x01
   1acc0:	92 83       	std	Z+2, r25	; 0x02
   1acc2:	a3 83       	std	Z+3, r26	; 0x03
   1acc4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1acc8:	f8 01       	movw	r30, r16
   1acca:	e0 5a       	subi	r30, 0xA0	; 160
   1accc:	ff 4f       	sbci	r31, 0xFF	; 255
   1acce:	80 81       	ld	r24, Z
   1acd0:	91 81       	ldd	r25, Z+1	; 0x01
   1acd2:	a2 81       	ldd	r26, Z+2	; 0x02
   1acd4:	b3 81       	ldd	r27, Z+3	; 0x03
   1acd6:	ed b7       	in	r30, 0x3d	; 61
   1acd8:	fe b7       	in	r31, 0x3e	; 62
   1acda:	84 83       	std	Z+4, r24	; 0x04
   1acdc:	95 83       	std	Z+5, r25	; 0x05
   1acde:	a6 83       	std	Z+6, r26	; 0x06
   1ace0:	b7 83       	std	Z+7, r27	; 0x07
   1ace2:	86 ef       	ldi	r24, 0xF6	; 246
   1ace4:	93 e3       	ldi	r25, 0x33	; 51
   1ace6:	a0 e0       	ldi	r26, 0x00	; 0
   1ace8:	81 83       	std	Z+1, r24	; 0x01
   1acea:	92 83       	std	Z+2, r25	; 0x02
   1acec:	a3 83       	std	Z+3, r26	; 0x03
   1acee:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1acf2:	b3 01       	movw	r22, r6
   1acf4:	c8 01       	movw	r24, r16
   1acf6:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_writedirindex>
   1acfa:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1acfc:	21 f4       	brne	.+8      	; 0x1ad06 <lif_add_ascii_file_as_e010+0x240>
   1acfe:	c8 01       	movw	r24, r16
   1ad00:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
   1ad04:	14 c0       	rjmp	.+40     	; 0x1ad2e <lif_add_ascii_file_as_e010+0x268>
   1ad06:	c8 01       	movw	r24, r16
   1ad08:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1ad0c:	ed b7       	in	r30, 0x3d	; 61
   1ad0e:	fe b7       	in	r31, 0x3e	; 62
   1ad10:	84 82       	std	Z+4, r8	; 0x04
   1ad12:	95 82       	std	Z+5, r9	; 0x05
   1ad14:	e6 82       	std	Z+6, r14	; 0x06
   1ad16:	f7 82       	std	Z+7, r15	; 0x07
   1ad18:	88 ee       	ldi	r24, 0xE8	; 232
   1ad1a:	93 e3       	ldi	r25, 0x33	; 51
   1ad1c:	a0 e0       	ldi	r26, 0x00	; 0
   1ad1e:	81 83       	std	Z+1, r24	; 0x01
   1ad20:	92 83       	std	Z+2, r25	; 0x02
   1ad22:	a3 83       	std	Z+3, r26	; 0x03
   1ad24:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

// Return file size
    return(bytes);
   1ad28:	b4 01       	movw	r22, r8
   1ad2a:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1ad2c:	04 c0       	rjmp	.+8      	; 0x1ad36 <lif_add_ascii_file_as_e010+0x270>
   1ad2e:	6f ef       	ldi	r22, 0xFF	; 255
   1ad30:	7f ef       	ldi	r23, 0xFF	; 255
   1ad32:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1ad34:	9f ef       	ldi	r25, 0xFF	; 255
   1ad36:	eb 96       	adiw	r28, 0x3b	; 59
   1ad38:	e2 e1       	ldi	r30, 0x12	; 18
   1ad3a:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0001ad3e <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1ad3e:	a7 e3       	ldi	r26, 0x37	; 55
   1ad40:	b2 e0       	ldi	r27, 0x02	; 2
   1ad42:	e5 ea       	ldi	r30, 0xA5	; 165
   1ad44:	f6 ed       	ldi	r31, 0xD6	; 214
   1ad46:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
   1ad4a:	7c 01       	movw	r14, r24
   1ad4c:	8b 01       	movw	r16, r22
   1ad4e:	ca 5d       	subi	r28, 0xDA	; 218
   1ad50:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad52:	59 83       	std	Y+1, r21	; 0x01
   1ad54:	48 83       	st	Y, r20
   1ad56:	c6 52       	subi	r28, 0x26	; 38
   1ad58:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1ad5a:	6d e3       	ldi	r22, 0x3D	; 61
   1ad5c:	73 e0       	ldi	r23, 0x03	; 3
   1ad5e:	6b d9       	rcall	.-3370   	; 0x1a036 <lif_open_volume>
   1ad60:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1ad62:	00 97       	sbiw	r24, 0x00	; 0
   1ad64:	69 f4       	brne	.+26     	; 0x1ad80 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1ad66:	ed b7       	in	r30, 0x3d	; 61
   1ad68:	fe b7       	in	r31, 0x3e	; 62
   1ad6a:	f5 82       	std	Z+5, r15	; 0x05
   1ad6c:	e4 82       	std	Z+4, r14	; 0x04
   1ad6e:	80 ed       	ldi	r24, 0xD0	; 208
   1ad70:	93 e3       	ldi	r25, 0x33	; 51
   1ad72:	a0 e0       	ldi	r26, 0x00	; 0
   1ad74:	81 83       	std	Z+1, r24	; 0x01
   1ad76:	92 83       	std	Z+2, r25	; 0x02
   1ad78:	a3 83       	std	Z+3, r26	; 0x03
   1ad7a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1ad7e:	13 c0       	rjmp	.+38     	; 0x1ada6 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1ad80:	b8 01       	movw	r22, r16
   1ad82:	28 dc       	rcall	.-1968   	; 0x1a5d4 <lif_find_file>
    if(index == -1)
   1ad84:	01 96       	adiw	r24, 0x01	; 1
   1ad86:	91 f4       	brne	.+36     	; 0x1adac <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1ad88:	ed b7       	in	r30, 0x3d	; 61
   1ad8a:	fe b7       	in	r31, 0x3e	; 62
   1ad8c:	15 83       	std	Z+5, r17	; 0x05
   1ad8e:	04 83       	std	Z+4, r16	; 0x04
   1ad90:	89 eb       	ldi	r24, 0xB9	; 185
   1ad92:	93 e3       	ldi	r25, 0x33	; 51
   1ad94:	a0 e0       	ldi	r26, 0x00	; 0
   1ad96:	81 83       	std	Z+1, r24	; 0x01
   1ad98:	92 83       	std	Z+2, r25	; 0x02
   1ad9a:	a3 83       	std	Z+3, r26	; 0x03
   1ad9c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ada0:	c6 01       	movw	r24, r12
   1ada2:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ada6:	80 e0       	ldi	r24, 0x00	; 0
   1ada8:	90 e0       	ldi	r25, 0x00	; 0
   1adaa:	73 c2       	rjmp	.+1254   	; 0x1b292 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1adac:	f6 01       	movw	r30, r12
   1adae:	e6 5a       	subi	r30, 0xA6	; 166
   1adb0:	ff 4f       	sbci	r31, 0xFF	; 255
   1adb2:	80 81       	ld	r24, Z
   1adb4:	91 81       	ldd	r25, Z+1	; 0x01
   1adb6:	9c 01       	movw	r18, r24
   1adb8:	2c 7f       	andi	r18, 0xFC	; 252
   1adba:	20 31       	cpi	r18, 0x10	; 16
   1adbc:	30 4e       	sbci	r19, 0xE0	; 224
   1adbe:	a9 f0       	breq	.+42     	; 0x1adea <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1adc0:	ed b7       	in	r30, 0x3d	; 61
   1adc2:	fe b7       	in	r31, 0x3e	; 62
   1adc4:	97 83       	std	Z+7, r25	; 0x07
   1adc6:	86 83       	std	Z+6, r24	; 0x06
   1adc8:	ca 5d       	subi	r28, 0xDA	; 218
   1adca:	dd 4f       	sbci	r29, 0xFD	; 253
   1adcc:	28 81       	ld	r18, Y
   1adce:	39 81       	ldd	r19, Y+1	; 0x01
   1add0:	c6 52       	subi	r28, 0x26	; 38
   1add2:	d2 40       	sbci	r29, 0x02	; 2
   1add4:	35 83       	std	Z+5, r19	; 0x05
   1add6:	24 83       	std	Z+4, r18	; 0x04
   1add8:	81 e8       	ldi	r24, 0x81	; 129
   1adda:	93 e3       	ldi	r25, 0x33	; 51
   1addc:	a0 e0       	ldi	r26, 0x00	; 0
   1adde:	81 83       	std	Z+1, r24	; 0x01
   1ade0:	92 83       	std	Z+2, r25	; 0x02
   1ade2:	a3 83       	std	Z+3, r26	; 0x03
   1ade4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1ade8:	db cf       	rjmp	.-74     	; 0x1ada0 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1adea:	f6 01       	movw	r30, r12
   1adec:	e4 5a       	subi	r30, 0xA4	; 164
   1adee:	ff 4f       	sbci	r31, 0xFF	; 255
   1adf0:	80 80       	ld	r8, Z
   1adf2:	91 80       	ldd	r9, Z+1	; 0x01
   1adf4:	a2 80       	ldd	r10, Z+2	; 0x02
   1adf6:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1adf8:	34 96       	adiw	r30, 0x04	; 4
   1adfa:	80 81       	ld	r24, Z
   1adfc:	91 81       	ldd	r25, Z+1	; 0x01
   1adfe:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae00:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae02:	a5 01       	movw	r20, r10
   1ae04:	94 01       	movw	r18, r8
   1ae06:	28 0f       	add	r18, r24
   1ae08:	39 1f       	adc	r19, r25
   1ae0a:	4a 1f       	adc	r20, r26
   1ae0c:	5b 1f       	adc	r21, r27
   1ae0e:	c4 5d       	subi	r28, 0xD4	; 212
   1ae10:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae12:	28 83       	st	Y, r18
   1ae14:	39 83       	std	Y+1, r19	; 0x01
   1ae16:	4a 83       	std	Y+2, r20	; 0x02
   1ae18:	5b 83       	std	Y+3, r21	; 0x03
   1ae1a:	cc 52       	subi	r28, 0x2C	; 44
   1ae1c:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1ae1e:	c6 01       	movw	r24, r12
   1ae20:	8c 59       	subi	r24, 0x9C	; 156
   1ae22:	9f 4f       	sbci	r25, 0xFF	; 255
   1ae24:	0e 94 6c c4 	call	0x188d8	; 0x188d8 <lif_lifbcd2time>
   1ae28:	c8 5d       	subi	r28, 0xD8	; 216
   1ae2a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae2c:	68 83       	st	Y, r22
   1ae2e:	79 83       	std	Y+1, r23	; 0x01
   1ae30:	8a 83       	std	Y+2, r24	; 0x02
   1ae32:	9b 83       	std	Y+3, r25	; 0x03
   1ae34:	c8 52       	subi	r28, 0x28	; 40
   1ae36:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1ae38:	ba 2d       	mov	r27, r10
   1ae3a:	a9 2d       	mov	r26, r9
   1ae3c:	98 2d       	mov	r25, r8
   1ae3e:	88 27       	eor	r24, r24
   1ae40:	c2 5e       	subi	r28, 0xE2	; 226
   1ae42:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae44:	88 83       	st	Y, r24
   1ae46:	99 83       	std	Y+1, r25	; 0x01
   1ae48:	aa 83       	std	Y+2, r26	; 0x02
   1ae4a:	bb 83       	std	Y+3, r27	; 0x03
   1ae4c:	ce 51       	subi	r28, 0x1E	; 30
   1ae4e:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1ae50:	67 e0       	ldi	r22, 0x07	; 7
   1ae52:	79 e0       	ldi	r23, 0x09	; 9
   1ae54:	ca 5d       	subi	r28, 0xDA	; 218
   1ae56:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae58:	88 81       	ld	r24, Y
   1ae5a:	99 81       	ldd	r25, Y+1	; 0x01
   1ae5c:	c6 52       	subi	r28, 0x26	; 38
   1ae5e:	d2 40       	sbci	r29, 0x02	; 2
   1ae60:	0e 94 30 c0 	call	0x18060	; 0x18060 <lif_open>
   1ae64:	cc 5d       	subi	r28, 0xDC	; 220
   1ae66:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae68:	99 83       	std	Y+1, r25	; 0x01
   1ae6a:	88 83       	st	Y, r24
   1ae6c:	c4 52       	subi	r28, 0x24	; 36
   1ae6e:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1ae70:	89 2b       	or	r24, r25
   1ae72:	09 f4       	brne	.+2      	; 0x1ae76 <lif_extract_e010_as_ascii+0x138>
   1ae74:	95 cf       	rjmp	.-214    	; 0x1ada0 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1ae76:	ca 5d       	subi	r28, 0xDA	; 218
   1ae78:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae7a:	28 81       	ld	r18, Y
   1ae7c:	39 81       	ldd	r19, Y+1	; 0x01
   1ae7e:	c6 52       	subi	r28, 0x26	; 38
   1ae80:	d2 40       	sbci	r29, 0x02	; 2
   1ae82:	ed b7       	in	r30, 0x3d	; 61
   1ae84:	fe b7       	in	r31, 0x3e	; 62
   1ae86:	35 83       	std	Z+5, r19	; 0x05
   1ae88:	24 83       	std	Z+4, r18	; 0x04
   1ae8a:	81 e7       	ldi	r24, 0x71	; 113
   1ae8c:	93 e3       	ldi	r25, 0x33	; 51
   1ae8e:	a0 e0       	ldi	r26, 0x00	; 0
   1ae90:	81 83       	std	Z+1, r24	; 0x01
   1ae92:	92 83       	std	Z+2, r25	; 0x02
   1ae94:	a3 83       	std	Z+3, r26	; 0x03
   1ae96:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    bytes = 0;
    wind = 0;
   1ae9a:	21 2c       	mov	r2, r1
   1ae9c:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1ae9e:	ce 5d       	subi	r28, 0xDE	; 222
   1aea0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aea2:	19 82       	std	Y+1, r1	; 0x01
   1aea4:	18 82       	st	Y, r1
   1aea6:	c2 52       	subi	r28, 0x22	; 34
   1aea8:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1aeaa:	ee 24       	eor	r14, r14
   1aeac:	e3 94       	inc	r14
   1aeae:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1aeb0:	41 2c       	mov	r4, r1
   1aeb2:	51 2c       	mov	r5, r1
   1aeb4:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1aeb6:	80 eb       	ldi	r24, 0xB0	; 176
   1aeb8:	92 e3       	ldi	r25, 0x32	; 50
   1aeba:	9c 01       	movw	r18, r24
   1aebc:	40 e0       	ldi	r20, 0x00	; 0
   1aebe:	ce 5c       	subi	r28, 0xCE	; 206
   1aec0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aec2:	28 83       	st	Y, r18
   1aec4:	39 83       	std	Y+1, r19	; 0x01
   1aec6:	4a 83       	std	Y+2, r20	; 0x02
   1aec8:	c2 53       	subi	r28, 0x32	; 50
   1aeca:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1aecc:	8e eb       	ldi	r24, 0xBE	; 190
   1aece:	92 e3       	ldi	r25, 0x32	; 50
   1aed0:	9c 01       	movw	r18, r24
   1aed2:	40 e0       	ldi	r20, 0x00	; 0
   1aed4:	cb 5c       	subi	r28, 0xCB	; 203
   1aed6:	dd 4f       	sbci	r29, 0xFD	; 253
   1aed8:	28 83       	st	Y, r18
   1aeda:	39 83       	std	Y+1, r19	; 0x01
   1aedc:	4a 83       	std	Y+2, r20	; 0x02
   1aede:	c5 53       	subi	r28, 0x35	; 53
   1aee0:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1aee2:	c2 5e       	subi	r28, 0xE2	; 226
   1aee4:	dd 4f       	sbci	r29, 0xFD	; 253
   1aee6:	28 81       	ld	r18, Y
   1aee8:	39 81       	ldd	r19, Y+1	; 0x01
   1aeea:	4a 81       	ldd	r20, Y+2	; 0x02
   1aeec:	5b 81       	ldd	r21, Y+3	; 0x03
   1aeee:	ce 51       	subi	r28, 0x1E	; 30
   1aef0:	d2 40       	sbci	r29, 0x02	; 2
   1aef2:	bb 27       	eor	r27, r27
   1aef4:	a5 2f       	mov	r26, r21
   1aef6:	94 2f       	mov	r25, r20
   1aef8:	83 2f       	mov	r24, r19
   1aefa:	c4 5d       	subi	r28, 0xD4	; 212
   1aefc:	dd 4f       	sbci	r29, 0xFD	; 253
   1aefe:	28 81       	ld	r18, Y
   1af00:	39 81       	ldd	r19, Y+1	; 0x01
   1af02:	4a 81       	ldd	r20, Y+2	; 0x02
   1af04:	5b 81       	ldd	r21, Y+3	; 0x03
   1af06:	cc 52       	subi	r28, 0x2C	; 44
   1af08:	d2 40       	sbci	r29, 0x02	; 2
   1af0a:	28 17       	cp	r18, r24
   1af0c:	39 07       	cpc	r19, r25
   1af0e:	4a 07       	cpc	r20, r26
   1af10:	5b 07       	cpc	r21, r27
   1af12:	08 f4       	brcc	.+2      	; 0x1af16 <lif_extract_e010_as_ascii+0x1d8>
   1af14:	51 c1       	rjmp	.+674    	; 0x1b1b8 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1af16:	00 e0       	ldi	r16, 0x00	; 0
   1af18:	11 e0       	ldi	r17, 0x01	; 1
   1af1a:	c2 5e       	subi	r28, 0xE2	; 226
   1af1c:	dd 4f       	sbci	r29, 0xFD	; 253
   1af1e:	28 81       	ld	r18, Y
   1af20:	39 81       	ldd	r19, Y+1	; 0x01
   1af22:	4a 81       	ldd	r20, Y+2	; 0x02
   1af24:	5b 81       	ldd	r21, Y+3	; 0x03
   1af26:	ce 51       	subi	r28, 0x1E	; 30
   1af28:	d2 40       	sbci	r29, 0x02	; 2
   1af2a:	be 01       	movw	r22, r28
   1af2c:	60 5f       	subi	r22, 0xF0	; 240
   1af2e:	7e 4f       	sbci	r23, 0xFE	; 254
   1af30:	c6 01       	movw	r24, r12
   1af32:	0e 94 b4 c0 	call	0x18168	; 0x18168 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1af36:	6f 3f       	cpi	r22, 0xFF	; 255
   1af38:	71 05       	cpc	r23, r1
   1af3a:	09 f0       	breq	.+2      	; 0x1af3e <lif_extract_e010_as_ascii+0x200>
   1af3c:	0c f4       	brge	.+2      	; 0x1af40 <lif_extract_e010_as_ascii+0x202>
   1af3e:	3a c1       	rjmp	.+628    	; 0x1b1b4 <lif_extract_e010_as_ascii+0x476>
   1af40:	00 e0       	ldi	r16, 0x00	; 0
   1af42:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1af44:	ce 5d       	subi	r28, 0xDE	; 222
   1af46:	dd 4f       	sbci	r29, 0xFD	; 253
   1af48:	88 81       	ld	r24, Y
   1af4a:	99 81       	ldd	r25, Y+1	; 0x01
   1af4c:	c2 52       	subi	r28, 0x22	; 34
   1af4e:	d2 40       	sbci	r29, 0x02	; 2
   1af50:	89 2b       	or	r24, r25
   1af52:	09 f0       	breq	.+2      	; 0x1af56 <lif_extract_e010_as_ascii+0x218>
   1af54:	1b c1       	rjmp	.+566    	; 0x1b18c <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1af56:	e0 e1       	ldi	r30, 0x10	; 16
   1af58:	f1 e0       	ldi	r31, 0x01	; 1
   1af5a:	ec 0f       	add	r30, r28
   1af5c:	fd 1f       	adc	r31, r29
   1af5e:	e0 0f       	add	r30, r16
   1af60:	f1 1f       	adc	r31, r17
   1af62:	80 81       	ld	r24, Z
   1af64:	98 2f       	mov	r25, r24
   1af66:	9f 7e       	andi	r25, 0xEF	; 239
   1af68:	9f 3c       	cpi	r25, 0xCF	; 207
   1af6a:	11 f0       	breq	.+4      	; 0x1af70 <lif_extract_e010_as_ascii+0x232>
   1af6c:	8f 36       	cpi	r24, 0x6F	; 111
   1af6e:	c9 f5       	brne	.+114    	; 0x1afe2 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1af70:	e0 e1       	ldi	r30, 0x10	; 16
   1af72:	f1 e0       	ldi	r31, 0x01	; 1
   1af74:	ec 0f       	add	r30, r28
   1af76:	fd 1f       	adc	r31, r29
   1af78:	e0 0f       	add	r30, r16
   1af7a:	f1 1f       	adc	r31, r17
   1af7c:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1af7e:	f8 01       	movw	r30, r16
   1af80:	32 96       	adiw	r30, 0x02	; 2
   1af82:	40 e1       	ldi	r20, 0x10	; 16
   1af84:	51 e0       	ldi	r21, 0x01	; 1
   1af86:	4c 0f       	add	r20, r28
   1af88:	5d 1f       	adc	r21, r29
   1af8a:	e4 0f       	add	r30, r20
   1af8c:	f5 1f       	adc	r31, r21
   1af8e:	0d 5f       	subi	r16, 0xFD	; 253
   1af90:	1f 4f       	sbci	r17, 0xFF	; 255
   1af92:	80 81       	ld	r24, Z
   1af94:	b1 2c       	mov	r11, r1
   1af96:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1af98:	a1 14       	cp	r10, r1
   1af9a:	b1 04       	cpc	r11, r1
   1af9c:	09 f4       	brne	.+2      	; 0x1afa0 <lif_extract_e010_as_ascii+0x262>
   1af9e:	ee c0       	rjmp	.+476    	; 0x1b17c <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1afa0:	5f ef       	ldi	r21, 0xFF	; 255
   1afa2:	a5 16       	cp	r10, r21
   1afa4:	b1 04       	cpc	r11, r1
   1afa6:	09 f0       	breq	.+2      	; 0x1afaa <lif_extract_e010_as_ascii+0x26c>
   1afa8:	7c f4       	brge	.+30     	; 0x1afc8 <lif_extract_e010_as_ascii+0x28a>
   1afaa:	c4 5e       	subi	r28, 0xE4	; 228
   1afac:	dd 4f       	sbci	r29, 0xFD	; 253
   1afae:	19 82       	std	Y+1, r1	; 0x01
   1afb0:	18 82       	st	Y, r1
   1afb2:	cc 51       	subi	r28, 0x1C	; 28
   1afb4:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1afb6:	c5 01       	movw	r24, r10
   1afb8:	01 97       	sbiw	r24, 0x01	; 1
   1afba:	c0 5d       	subi	r28, 0xD0	; 208
   1afbc:	dd 4f       	sbci	r29, 0xFD	; 253
   1afbe:	99 83       	std	Y+1, r25	; 0x01
   1afc0:	88 83       	st	Y, r24
   1afc2:	c0 53       	subi	r28, 0x30	; 48
   1afc4:	d2 40       	sbci	r29, 0x02	; 2
   1afc6:	68 c0       	rjmp	.+208    	; 0x1b098 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1afc8:	ed b7       	in	r30, 0x3d	; 61
   1afca:	fe b7       	in	r31, 0x3e	; 62
   1afcc:	b5 82       	std	Z+5, r11	; 0x05
   1afce:	a4 82       	std	Z+4, r10	; 0x04
   1afd0:	8c e3       	ldi	r24, 0x3C	; 60
   1afd2:	93 e3       	ldi	r25, 0x33	; 51
   1afd4:	a0 e0       	ldi	r26, 0x00	; 0
   1afd6:	81 83       	std	Z+1, r24	; 0x01
   1afd8:	92 83       	std	Z+2, r25	; 0x02
   1afda:	a3 83       	std	Z+3, r26	; 0x03
   1afdc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1afe0:	1e c0       	rjmp	.+60     	; 0x1b01e <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1afe2:	8f 3e       	cpi	r24, 0xEF	; 239
   1afe4:	09 f4       	brne	.+2      	; 0x1afe8 <lif_extract_e010_as_ascii+0x2aa>
   1afe6:	d2 c0       	rjmp	.+420    	; 0x1b18c <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1afe8:	ed b7       	in	r30, 0x3d	; 61
   1afea:	fe b7       	in	r31, 0x3e	; 62
   1afec:	13 87       	std	Z+11, r17	; 0x0b
   1afee:	02 87       	std	Z+10, r16	; 0x0a
   1aff0:	c2 5e       	subi	r28, 0xE2	; 226
   1aff2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aff4:	28 81       	ld	r18, Y
   1aff6:	39 81       	ldd	r19, Y+1	; 0x01
   1aff8:	4a 81       	ldd	r20, Y+2	; 0x02
   1affa:	5b 81       	ldd	r21, Y+3	; 0x03
   1affc:	ce 51       	subi	r28, 0x1E	; 30
   1affe:	d2 40       	sbci	r29, 0x02	; 2
   1b000:	26 83       	std	Z+6, r18	; 0x06
   1b002:	37 83       	std	Z+7, r19	; 0x07
   1b004:	40 87       	std	Z+8, r20	; 0x08
   1b006:	51 87       	std	Z+9, r21	; 0x09
   1b008:	90 e0       	ldi	r25, 0x00	; 0
   1b00a:	95 83       	std	Z+5, r25	; 0x05
   1b00c:	84 83       	std	Z+4, r24	; 0x04
   1b00e:	86 ee       	ldi	r24, 0xE6	; 230
   1b010:	92 e3       	ldi	r25, 0x32	; 50
   1b012:	a0 e0       	ldi	r26, 0x00	; 0
   1b014:	81 83       	std	Z+1, r24	; 0x01
   1b016:	92 83       	std	Z+2, r25	; 0x02
   1b018:	a3 83       	std	Z+3, r26	; 0x03
   1b01a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
                status = 0;
                done = 1;
   1b01e:	21 e0       	ldi	r18, 0x01	; 1
   1b020:	30 e0       	ldi	r19, 0x00	; 0
   1b022:	ce 5d       	subi	r28, 0xDE	; 222
   1b024:	dd 4f       	sbci	r29, 0xFD	; 253
   1b026:	39 83       	std	Y+1, r19	; 0x01
   1b028:	28 83       	st	Y, r18
   1b02a:	c2 52       	subi	r28, 0x22	; 34
   1b02c:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b02e:	e1 2c       	mov	r14, r1
   1b030:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b032:	ac c0       	rjmp	.+344    	; 0x1b18c <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b034:	0f 3f       	cpi	r16, 0xFF	; 255
   1b036:	11 05       	cpc	r17, r1
   1b038:	11 f0       	breq	.+4      	; 0x1b03e <lif_extract_e010_as_ascii+0x300>
   1b03a:	0c f0       	brlt	.+2      	; 0x1b03e <lif_extract_e010_as_ascii+0x300>
   1b03c:	a7 c0       	rjmp	.+334    	; 0x1b18c <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b03e:	e0 e1       	ldi	r30, 0x10	; 16
   1b040:	f1 e0       	ldi	r31, 0x01	; 1
   1b042:	ec 0f       	add	r30, r28
   1b044:	fd 1f       	adc	r31, r29
   1b046:	e0 0f       	add	r30, r16
   1b048:	f1 1f       	adc	r31, r17
   1b04a:	20 81       	ld	r18, Z
   1b04c:	a1 01       	movw	r20, r2
   1b04e:	4f 5f       	subi	r20, 0xFF	; 255
   1b050:	5f 4f       	sbci	r21, 0xFF	; 255
   1b052:	4a 01       	movw	r8, r20
   1b054:	2d 30       	cpi	r18, 0x0D	; 13
   1b056:	51 f1       	breq	.+84     	; 0x1b0ac <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b058:	98 2d       	mov	r25, r8
   1b05a:	89 2d       	mov	r24, r9
   1b05c:	0f 5f       	subi	r16, 0xFF	; 255
   1b05e:	1f 4f       	sbci	r17, 0xFF	; 255
   1b060:	ec e0       	ldi	r30, 0x0C	; 12
   1b062:	f0 e0       	ldi	r31, 0x00	; 0
   1b064:	ec 0f       	add	r30, r28
   1b066:	fd 1f       	adc	r31, r29
   1b068:	e2 0d       	add	r30, r2
   1b06a:	f3 1d       	adc	r31, r3
   1b06c:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b06e:	ef ef       	ldi	r30, 0xFF	; 255
   1b070:	8e 16       	cp	r8, r30
   1b072:	91 04       	cpc	r9, r1
   1b074:	09 f0       	breq	.+2      	; 0x1b078 <lif_extract_e010_as_ascii+0x33a>
   1b076:	ac f5       	brge	.+106    	; 0x1b0e2 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b078:	c4 5e       	subi	r28, 0xE4	; 228
   1b07a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b07c:	28 81       	ld	r18, Y
   1b07e:	39 81       	ldd	r19, Y+1	; 0x01
   1b080:	cc 51       	subi	r28, 0x1C	; 28
   1b082:	d2 40       	sbci	r29, 0x02	; 2
   1b084:	2f 5f       	subi	r18, 0xFF	; 255
   1b086:	3f 4f       	sbci	r19, 0xFF	; 255
   1b088:	c4 5e       	subi	r28, 0xE4	; 228
   1b08a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b08c:	39 83       	std	Y+1, r19	; 0x01
   1b08e:	28 83       	st	Y, r18
   1b090:	cc 51       	subi	r28, 0x1C	; 28
   1b092:	d2 40       	sbci	r29, 0x02	; 2
   1b094:	29 2e       	mov	r2, r25
   1b096:	38 2e       	mov	r3, r24
   1b098:	c4 5e       	subi	r28, 0xE4	; 228
   1b09a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b09c:	48 81       	ld	r20, Y
   1b09e:	59 81       	ldd	r21, Y+1	; 0x01
   1b0a0:	cc 51       	subi	r28, 0x1C	; 28
   1b0a2:	d2 40       	sbci	r29, 0x02	; 2
   1b0a4:	4a 15       	cp	r20, r10
   1b0a6:	5b 05       	cpc	r21, r11
   1b0a8:	2c f2       	brlt	.-118    	; 0x1b034 <lif_extract_e010_as_ascii+0x2f6>
   1b0aa:	62 c0       	rjmp	.+196    	; 0x1b170 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b0ac:	c4 5e       	subi	r28, 0xE4	; 228
   1b0ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0b0:	88 81       	ld	r24, Y
   1b0b2:	99 81       	ldd	r25, Y+1	; 0x01
   1b0b4:	cc 51       	subi	r28, 0x1C	; 28
   1b0b6:	d2 40       	sbci	r29, 0x02	; 2
   1b0b8:	c0 5d       	subi	r28, 0xD0	; 208
   1b0ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0bc:	a8 81       	ld	r26, Y
   1b0be:	b9 81       	ldd	r27, Y+1	; 0x01
   1b0c0:	c0 53       	subi	r28, 0x30	; 48
   1b0c2:	d2 40       	sbci	r29, 0x02	; 2
   1b0c4:	8a 17       	cp	r24, r26
   1b0c6:	9b 07       	cpc	r25, r27
   1b0c8:	39 f6       	brne	.-114    	; 0x1b058 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b0ca:	ec e0       	ldi	r30, 0x0C	; 12
   1b0cc:	f0 e0       	ldi	r31, 0x00	; 0
   1b0ce:	ec 0f       	add	r30, r28
   1b0d0:	fd 1f       	adc	r31, r29
   1b0d2:	e2 0d       	add	r30, r2
   1b0d4:	f3 1d       	adc	r31, r3
   1b0d6:	ba e0       	ldi	r27, 0x0A	; 10
   1b0d8:	b0 83       	st	Z, r27
                    ++ind;
   1b0da:	0f 5f       	subi	r16, 0xFF	; 255
   1b0dc:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b0de:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b0e0:	47 c0       	rjmp	.+142    	; 0x1b170 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b0e2:	cc 5d       	subi	r28, 0xDC	; 220
   1b0e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0e6:	28 81       	ld	r18, Y
   1b0e8:	39 81       	ldd	r19, Y+1	; 0x01
   1b0ea:	c4 52       	subi	r28, 0x24	; 36
   1b0ec:	d2 40       	sbci	r29, 0x02	; 2
   1b0ee:	a4 01       	movw	r20, r8
   1b0f0:	61 e0       	ldi	r22, 0x01	; 1
   1b0f2:	70 e0       	ldi	r23, 0x00	; 0
   1b0f4:	ce 01       	movw	r24, r28
   1b0f6:	0c 96       	adiw	r24, 0x0c	; 12
   1b0f8:	0e 94 05 7e 	call	0xfc0a	; 0xfc0a <fwrite>
                    if(size < wind)
   1b0fc:	88 15       	cp	r24, r8
   1b0fe:	99 05       	cpc	r25, r9
   1b100:	d4 f4       	brge	.+52     	; 0x1b136 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b102:	cb 5c       	subi	r28, 0xCB	; 203
   1b104:	dd 4f       	sbci	r29, 0xFD	; 253
   1b106:	28 81       	ld	r18, Y
   1b108:	39 81       	ldd	r19, Y+1	; 0x01
   1b10a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b10c:	c5 53       	subi	r28, 0x35	; 53
   1b10e:	d2 40       	sbci	r29, 0x02	; 2
   1b110:	ed b7       	in	r30, 0x3d	; 61
   1b112:	fe b7       	in	r31, 0x3e	; 62
   1b114:	21 83       	std	Z+1, r18	; 0x01
   1b116:	32 83       	std	Z+2, r19	; 0x02
   1b118:	43 83       	std	Z+3, r20	; 0x03
   1b11a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b11e:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b120:	21 e0       	ldi	r18, 0x01	; 1
   1b122:	30 e0       	ldi	r19, 0x00	; 0
   1b124:	ce 5d       	subi	r28, 0xDE	; 222
   1b126:	dd 4f       	sbci	r29, 0xFD	; 253
   1b128:	39 83       	std	Y+1, r19	; 0x01
   1b12a:	28 83       	st	Y, r18
   1b12c:	c2 52       	subi	r28, 0x22	; 34
   1b12e:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b130:	e1 2c       	mov	r14, r1
   1b132:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b134:	1d c0       	rjmp	.+58     	; 0x1b170 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b136:	09 2e       	mov	r0, r25
   1b138:	00 0c       	add	r0, r0
   1b13a:	aa 0b       	sbc	r26, r26
   1b13c:	bb 0b       	sbc	r27, r27
   1b13e:	48 0e       	add	r4, r24
   1b140:	59 1e       	adc	r5, r25
   1b142:	6a 1e       	adc	r6, r26
   1b144:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b146:	ed b7       	in	r30, 0x3d	; 61
   1b148:	fe b7       	in	r31, 0x3e	; 62
   1b14a:	44 82       	std	Z+4, r4	; 0x04
   1b14c:	55 82       	std	Z+5, r5	; 0x05
   1b14e:	66 82       	std	Z+6, r6	; 0x06
   1b150:	77 82       	std	Z+7, r7	; 0x07
   1b152:	ce 5c       	subi	r28, 0xCE	; 206
   1b154:	dd 4f       	sbci	r29, 0xFD	; 253
   1b156:	28 81       	ld	r18, Y
   1b158:	39 81       	ldd	r19, Y+1	; 0x01
   1b15a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b15c:	c2 53       	subi	r28, 0x32	; 50
   1b15e:	d2 40       	sbci	r29, 0x02	; 2
   1b160:	21 83       	std	Z+1, r18	; 0x01
   1b162:	32 83       	std	Z+2, r19	; 0x02
   1b164:	43 83       	std	Z+3, r20	; 0x03
   1b166:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
                    wind = 0;
   1b16a:	90 e0       	ldi	r25, 0x00	; 0
   1b16c:	80 e0       	ldi	r24, 0x00	; 0
   1b16e:	84 cf       	rjmp	.-248    	; 0x1b078 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b170:	0f 3f       	cpi	r16, 0xFF	; 255
   1b172:	11 05       	cpc	r17, r1
   1b174:	09 f0       	breq	.+2      	; 0x1b178 <lif_extract_e010_as_ascii+0x43a>
   1b176:	0c f4       	brge	.+2      	; 0x1b17a <lif_extract_e010_as_ascii+0x43c>
   1b178:	e5 ce       	rjmp	.-566    	; 0x1af44 <lif_extract_e010_as_ascii+0x206>
   1b17a:	08 c0       	rjmp	.+16     	; 0x1b18c <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b17c:	a1 e0       	ldi	r26, 0x01	; 1
   1b17e:	b0 e0       	ldi	r27, 0x00	; 0
   1b180:	ce 5d       	subi	r28, 0xDE	; 222
   1b182:	dd 4f       	sbci	r29, 0xFD	; 253
   1b184:	b9 83       	std	Y+1, r27	; 0x01
   1b186:	a8 83       	st	Y, r26
   1b188:	c2 52       	subi	r28, 0x22	; 34
   1b18a:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b18c:	c2 5e       	subi	r28, 0xE2	; 226
   1b18e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b190:	28 81       	ld	r18, Y
   1b192:	39 81       	ldd	r19, Y+1	; 0x01
   1b194:	4a 81       	ldd	r20, Y+2	; 0x02
   1b196:	5b 81       	ldd	r21, Y+3	; 0x03
   1b198:	ce 51       	subi	r28, 0x1E	; 30
   1b19a:	d2 40       	sbci	r29, 0x02	; 2
   1b19c:	3f 5f       	subi	r19, 0xFF	; 255
   1b19e:	4f 4f       	sbci	r20, 0xFF	; 255
   1b1a0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b1a2:	c2 5e       	subi	r28, 0xE2	; 226
   1b1a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1a6:	28 83       	st	Y, r18
   1b1a8:	39 83       	std	Y+1, r19	; 0x01
   1b1aa:	4a 83       	std	Y+2, r20	; 0x02
   1b1ac:	5b 83       	std	Y+3, r21	; 0x03
   1b1ae:	ce 51       	subi	r28, 0x1E	; 30
   1b1b0:	d2 40       	sbci	r29, 0x02	; 2
   1b1b2:	97 ce       	rjmp	.-722    	; 0x1aee2 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b1b4:	e1 2c       	mov	r14, r1
   1b1b6:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1b8:	c6 01       	movw	r24, r12
   1b1ba:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b1be:	21 14       	cp	r2, r1
   1b1c0:	31 04       	cpc	r3, r1
   1b1c2:	31 f1       	breq	.+76     	; 0x1b210 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b1c4:	cc 5d       	subi	r28, 0xDC	; 220
   1b1c6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1c8:	28 81       	ld	r18, Y
   1b1ca:	39 81       	ldd	r19, Y+1	; 0x01
   1b1cc:	c4 52       	subi	r28, 0x24	; 36
   1b1ce:	d2 40       	sbci	r29, 0x02	; 2
   1b1d0:	a1 01       	movw	r20, r2
   1b1d2:	61 e0       	ldi	r22, 0x01	; 1
   1b1d4:	70 e0       	ldi	r23, 0x00	; 0
   1b1d6:	ce 01       	movw	r24, r28
   1b1d8:	0c 96       	adiw	r24, 0x0c	; 12
   1b1da:	0e 94 05 7e 	call	0xfc0a	; 0xfc0a <fwrite>
   1b1de:	8c 01       	movw	r16, r24
        if(size < wind)
   1b1e0:	82 15       	cp	r24, r2
   1b1e2:	93 05       	cpc	r25, r3
   1b1e4:	64 f4       	brge	.+24     	; 0x1b1fe <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b1e6:	88 e8       	ldi	r24, 0x88	; 136
   1b1e8:	92 e3       	ldi	r25, 0x32	; 50
   1b1ea:	a0 e0       	ldi	r26, 0x00	; 0
   1b1ec:	ed b7       	in	r30, 0x3d	; 61
   1b1ee:	fe b7       	in	r31, 0x3e	; 62
   1b1f0:	81 83       	std	Z+1, r24	; 0x01
   1b1f2:	92 83       	std	Z+2, r25	; 0x02
   1b1f4:	a3 83       	std	Z+3, r26	; 0x03
   1b1f6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            status = 0;
   1b1fa:	e1 2c       	mov	r14, r1
   1b1fc:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b1fe:	c8 01       	movw	r24, r16
   1b200:	01 2e       	mov	r0, r17
   1b202:	00 0c       	add	r0, r0
   1b204:	aa 0b       	sbc	r26, r26
   1b206:	bb 0b       	sbc	r27, r27
   1b208:	48 0e       	add	r4, r24
   1b20a:	59 1e       	adc	r5, r25
   1b20c:	6a 1e       	adc	r6, r26
   1b20e:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b210:	cc 5d       	subi	r28, 0xDC	; 220
   1b212:	dd 4f       	sbci	r29, 0xFD	; 253
   1b214:	88 81       	ld	r24, Y
   1b216:	99 81       	ldd	r25, Y+1	; 0x01
   1b218:	c4 52       	subi	r28, 0x24	; 36
   1b21a:	d2 40       	sbci	r29, 0x02	; 2
   1b21c:	0e 94 87 7e 	call	0xfd0e	; 0xfd0e <fclose>
    if(t)
   1b220:	c8 5d       	subi	r28, 0xD8	; 216
   1b222:	dd 4f       	sbci	r29, 0xFD	; 253
   1b224:	28 81       	ld	r18, Y
   1b226:	39 81       	ldd	r19, Y+1	; 0x01
   1b228:	4a 81       	ldd	r20, Y+2	; 0x02
   1b22a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b22c:	c8 52       	subi	r28, 0x28	; 40
   1b22e:	d2 40       	sbci	r29, 0x02	; 2
   1b230:	21 15       	cp	r18, r1
   1b232:	31 05       	cpc	r19, r1
   1b234:	41 05       	cpc	r20, r1
   1b236:	51 05       	cpc	r21, r1
   1b238:	d9 f0       	breq	.+54     	; 0x1b270 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b23a:	c8 5e       	subi	r28, 0xE8	; 232
   1b23c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b23e:	28 83       	st	Y, r18
   1b240:	39 83       	std	Y+1, r19	; 0x01
   1b242:	4a 83       	std	Y+2, r20	; 0x02
   1b244:	5b 83       	std	Y+3, r21	; 0x03
   1b246:	c8 51       	subi	r28, 0x18	; 24
   1b248:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b24a:	cc 5e       	subi	r28, 0xEC	; 236
   1b24c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b24e:	28 83       	st	Y, r18
   1b250:	39 83       	std	Y+1, r19	; 0x01
   1b252:	4a 83       	std	Y+2, r20	; 0x02
   1b254:	5b 83       	std	Y+3, r21	; 0x03
   1b256:	c4 51       	subi	r28, 0x14	; 20
   1b258:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b25a:	be 01       	movw	r22, r28
   1b25c:	6c 5e       	subi	r22, 0xEC	; 236
   1b25e:	7d 4f       	sbci	r23, 0xFD	; 253
   1b260:	ca 5d       	subi	r28, 0xDA	; 218
   1b262:	dd 4f       	sbci	r29, 0xFD	; 253
   1b264:	88 81       	ld	r24, Y
   1b266:	99 81       	ldd	r25, Y+1	; 0x01
   1b268:	c6 52       	subi	r28, 0x26	; 38
   1b26a:	d2 40       	sbci	r29, 0x02	; 2
   1b26c:	0e 94 c4 7b 	call	0xf788	; 0xf788 <utime>
    }
    sync();
   1b270:	0e 94 82 7d 	call	0xfb04	; 0xfb04 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b274:	ed b7       	in	r30, 0x3d	; 61
   1b276:	fe b7       	in	r31, 0x3e	; 62
   1b278:	44 82       	std	Z+4, r4	; 0x04
   1b27a:	55 82       	std	Z+5, r5	; 0x05
   1b27c:	66 82       	std	Z+6, r6	; 0x06
   1b27e:	77 82       	std	Z+7, r7	; 0x07
   1b280:	8a e7       	ldi	r24, 0x7A	; 122
   1b282:	92 e3       	ldi	r25, 0x32	; 50
   1b284:	a0 e0       	ldi	r26, 0x00	; 0
   1b286:	81 83       	std	Z+1, r24	; 0x01
   1b288:	92 83       	std	Z+2, r25	; 0x02
   1b28a:	a3 83       	std	Z+3, r26	; 0x03
   1b28c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    return(status);
   1b290:	c7 01       	movw	r24, r14
}
   1b292:	c9 5c       	subi	r28, 0xC9	; 201
   1b294:	dd 4f       	sbci	r29, 0xFD	; 253
   1b296:	e2 e1       	ldi	r30, 0x12	; 18
   1b298:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0001b29c <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b29c:	a4 e1       	ldi	r26, 0x14	; 20
   1b29e:	b1 e0       	ldi	r27, 0x01	; 1
   1b2a0:	e4 e5       	ldi	r30, 0x54	; 84
   1b2a2:	f9 ed       	ldi	r31, 0xD9	; 217
   1b2a4:	0c 94 e9 e3 	jmp	0x1c7d2	; 0x1c7d2 <__prologue_saves__>
   1b2a8:	7c 01       	movw	r14, r24
   1b2aa:	8b 01       	movw	r16, r22
   1b2ac:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b2ae:	6d e3       	ldi	r22, 0x3D	; 61
   1b2b0:	73 e0       	ldi	r23, 0x03	; 3
   1b2b2:	0e 94 1b d0 	call	0x1a036	; 0x1a036 <lif_open_volume>
   1b2b6:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b2b8:	00 97       	sbiw	r24, 0x00	; 0
   1b2ba:	69 f4       	brne	.+26     	; 0x1b2d6 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b2bc:	ed b7       	in	r30, 0x3d	; 61
   1b2be:	fe b7       	in	r31, 0x3e	; 62
   1b2c0:	f5 82       	std	Z+5, r15	; 0x05
   1b2c2:	e4 82       	std	Z+4, r14	; 0x04
   1b2c4:	82 e6       	ldi	r24, 0x62	; 98
   1b2c6:	92 e3       	ldi	r25, 0x32	; 50
   1b2c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b2ca:	81 83       	std	Z+1, r24	; 0x01
   1b2cc:	92 83       	std	Z+2, r25	; 0x02
   1b2ce:	a3 83       	std	Z+3, r26	; 0x03
   1b2d0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1b2d4:	13 c0       	rjmp	.+38     	; 0x1b2fc <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b2d6:	b8 01       	movw	r22, r16
   1b2d8:	7d d9       	rcall	.-3334   	; 0x1a5d4 <lif_find_file>
    if(index == -1)
   1b2da:	01 96       	adiw	r24, 0x01	; 1
   1b2dc:	91 f4       	brne	.+36     	; 0x1b302 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b2de:	ed b7       	in	r30, 0x3d	; 61
   1b2e0:	fe b7       	in	r31, 0x3e	; 62
   1b2e2:	15 83       	std	Z+5, r17	; 0x05
   1b2e4:	04 83       	std	Z+4, r16	; 0x04
   1b2e6:	8f e4       	ldi	r24, 0x4F	; 79
   1b2e8:	92 e3       	ldi	r25, 0x32	; 50
   1b2ea:	a0 e0       	ldi	r26, 0x00	; 0
   1b2ec:	81 83       	std	Z+1, r24	; 0x01
   1b2ee:	92 83       	std	Z+2, r25	; 0x02
   1b2f0:	a3 83       	std	Z+3, r26	; 0x03
   1b2f2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2f6:	c4 01       	movw	r24, r8
   1b2f8:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b2fc:	00 e0       	ldi	r16, 0x00	; 0
   1b2fe:	10 e0       	ldi	r17, 0x00	; 0
   1b300:	ff c0       	rjmp	.+510    	; 0x1b500 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b302:	94 01       	movw	r18, r8
   1b304:	20 5a       	subi	r18, 0xA0	; 160
   1b306:	3f 4f       	sbci	r19, 0xFF	; 255
   1b308:	c0 5f       	subi	r28, 0xF0	; 240
   1b30a:	de 4f       	sbci	r29, 0xFE	; 254
   1b30c:	39 83       	std	Y+1, r19	; 0x01
   1b30e:	28 83       	st	Y, r18
   1b310:	c0 51       	subi	r28, 0x10	; 16
   1b312:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b314:	f9 01       	movw	r30, r18
   1b316:	a0 80       	ld	r10, Z
   1b318:	b1 80       	ldd	r11, Z+1	; 0x01
   1b31a:	0b 2c       	mov	r0, r11
   1b31c:	00 0c       	add	r0, r0
   1b31e:	cc 08       	sbc	r12, r12
   1b320:	dd 08       	sbc	r13, r13
   1b322:	e1 2c       	mov	r14, r1
   1b324:	f1 2c       	mov	r15, r1
   1b326:	87 01       	movw	r16, r14
   1b328:	e3 94       	inc	r14
   1b32a:	21 e0       	ldi	r18, 0x01	; 1
   1b32c:	30 e0       	ldi	r19, 0x00	; 0
   1b32e:	40 e0       	ldi	r20, 0x00	; 0
   1b330:	50 e0       	ldi	r21, 0x00	; 0
   1b332:	6d e8       	ldi	r22, 0x8D	; 141
   1b334:	76 e1       	ldi	r23, 0x16	; 22
   1b336:	c3 01       	movw	r24, r6
   1b338:	0e 94 d1 cb 	call	0x197a2	; 0x197a2 <lif_create_volume>
   1b33c:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b33e:	89 2b       	or	r24, r25
   1b340:	d1 f2       	breq	.-76     	; 0x1b2f6 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b342:	81 e2       	ldi	r24, 0x21	; 33
   1b344:	f4 01       	movw	r30, r8
   1b346:	e1 5b       	subi	r30, 0xB1	; 177
   1b348:	ff 4f       	sbci	r31, 0xFF	; 255
   1b34a:	d7 01       	movw	r26, r14
   1b34c:	a1 5b       	subi	r26, 0xB1	; 177
   1b34e:	bf 4f       	sbci	r27, 0xFF	; 255
   1b350:	01 90       	ld	r0, Z+
   1b352:	0d 92       	st	X+, r0
   1b354:	8a 95       	dec	r24
   1b356:	e1 f7       	brne	.-8      	; 0x1b350 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b358:	82 e0       	ldi	r24, 0x02	; 2
   1b35a:	90 e0       	ldi	r25, 0x00	; 0
   1b35c:	a0 e0       	ldi	r26, 0x00	; 0
   1b35e:	b0 e0       	ldi	r27, 0x00	; 0
   1b360:	f7 01       	movw	r30, r14
   1b362:	e4 5a       	subi	r30, 0xA4	; 164
   1b364:	ff 4f       	sbci	r31, 0xFF	; 255
   1b366:	80 83       	st	Z, r24
   1b368:	91 83       	std	Z+1, r25	; 0x01
   1b36a:	a2 83       	std	Z+2, r26	; 0x02
   1b36c:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b36e:	c0 5f       	subi	r28, 0xF0	; 240
   1b370:	de 4f       	sbci	r29, 0xFE	; 254
   1b372:	e8 81       	ld	r30, Y
   1b374:	f9 81       	ldd	r31, Y+1	; 0x01
   1b376:	c0 51       	subi	r28, 0x10	; 16
   1b378:	d1 40       	sbci	r29, 0x01	; 1
   1b37a:	80 81       	ld	r24, Z
   1b37c:	91 81       	ldd	r25, Z+1	; 0x01
   1b37e:	a2 81       	ldd	r26, Z+2	; 0x02
   1b380:	b3 81       	ldd	r27, Z+3	; 0x03
   1b382:	f7 01       	movw	r30, r14
   1b384:	80 8b       	std	Z+16, r24	; 0x10
   1b386:	91 8b       	std	Z+17, r25	; 0x11
   1b388:	a2 8b       	std	Z+18, r26	; 0x12
   1b38a:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b38c:	60 e0       	ldi	r22, 0x00	; 0
   1b38e:	70 e0       	ldi	r23, 0x00	; 0
   1b390:	c7 01       	movw	r24, r14
   1b392:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_writedirindex>
   1b396:	8c 01       	movw	r16, r24
   1b398:	89 2b       	or	r24, r25
   1b39a:	41 f0       	breq	.+16     	; 0x1b3ac <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b39c:	61 e0       	ldi	r22, 0x01	; 1
   1b39e:	70 e0       	ldi	r23, 0x00	; 0
   1b3a0:	c7 01       	movw	r24, r14
   1b3a2:	0e 94 b1 ca 	call	0x19562	; 0x19562 <lif_writedirEOF>
   1b3a6:	8c 01       	movw	r16, r24
   1b3a8:	89 2b       	or	r24, r25
   1b3aa:	39 f4       	brne	.+14     	; 0x1b3ba <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b3ac:	c4 01       	movw	r24, r8
   1b3ae:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
   1b3b2:	c7 01       	movw	r24, r14
   1b3b4:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b3b8:	a3 c0       	rjmp	.+326    	; 0x1b500 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b3ba:	f7 01       	movw	r30, r14
   1b3bc:	44 84       	ldd	r4, Z+12	; 0x0c
   1b3be:	55 84       	ldd	r5, Z+13	; 0x0d
   1b3c0:	66 84       	ldd	r6, Z+14	; 0x0e
   1b3c2:	77 84       	ldd	r7, Z+15	; 0x0f
   1b3c4:	76 2c       	mov	r7, r6
   1b3c6:	65 2c       	mov	r6, r5
   1b3c8:	54 2c       	mov	r5, r4
   1b3ca:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b3cc:	f4 01       	movw	r30, r8
   1b3ce:	e4 5a       	subi	r30, 0xA4	; 164
   1b3d0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b3d2:	80 81       	ld	r24, Z
   1b3d4:	91 81       	ldd	r25, Z+1	; 0x01
   1b3d6:	a2 81       	ldd	r26, Z+2	; 0x02
   1b3d8:	b3 81       	ldd	r27, Z+3	; 0x03
   1b3da:	22 27       	eor	r18, r18
   1b3dc:	38 2f       	mov	r19, r24
   1b3de:	49 2f       	mov	r20, r25
   1b3e0:	5a 2f       	mov	r21, r26
   1b3e2:	c4 5f       	subi	r28, 0xF4	; 244
   1b3e4:	de 4f       	sbci	r29, 0xFE	; 254
   1b3e6:	28 83       	st	Y, r18
   1b3e8:	39 83       	std	Y+1, r19	; 0x01
   1b3ea:	4a 83       	std	Y+2, r20	; 0x02
   1b3ec:	5b 83       	std	Y+3, r21	; 0x03
   1b3ee:	cc 50       	subi	r28, 0x0C	; 12
   1b3f0:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b3f2:	21 2c       	mov	r2, r1
   1b3f4:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b3f6:	81 e4       	ldi	r24, 0x41	; 65
   1b3f8:	92 e3       	ldi	r25, 0x32	; 50
   1b3fa:	9c 01       	movw	r18, r24
   1b3fc:	40 e0       	ldi	r20, 0x00	; 0
   1b3fe:	ce 5e       	subi	r28, 0xEE	; 238
   1b400:	de 4f       	sbci	r29, 0xFE	; 254
   1b402:	28 83       	st	Y, r18
   1b404:	39 83       	std	Y+1, r19	; 0x01
   1b406:	4a 83       	std	Y+2, r20	; 0x02
   1b408:	c2 51       	subi	r28, 0x12	; 18
   1b40a:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b40c:	c0 5f       	subi	r28, 0xF0	; 240
   1b40e:	de 4f       	sbci	r29, 0xFE	; 254
   1b410:	e8 81       	ld	r30, Y
   1b412:	f9 81       	ldd	r31, Y+1	; 0x01
   1b414:	c0 51       	subi	r28, 0x10	; 16
   1b416:	d1 40       	sbci	r29, 0x01	; 1
   1b418:	80 81       	ld	r24, Z
   1b41a:	91 81       	ldd	r25, Z+1	; 0x01
   1b41c:	28 16       	cp	r2, r24
   1b41e:	39 06       	cpc	r3, r25
   1b420:	0c f0       	brlt	.+2      	; 0x1b424 <lif_extract_lif_as_lif+0x188>
   1b422:	58 c0       	rjmp	.+176    	; 0x1b4d4 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b424:	00 e0       	ldi	r16, 0x00	; 0
   1b426:	11 e0       	ldi	r17, 0x01	; 1
   1b428:	c4 5f       	subi	r28, 0xF4	; 244
   1b42a:	de 4f       	sbci	r29, 0xFE	; 254
   1b42c:	28 81       	ld	r18, Y
   1b42e:	39 81       	ldd	r19, Y+1	; 0x01
   1b430:	4a 81       	ldd	r20, Y+2	; 0x02
   1b432:	5b 81       	ldd	r21, Y+3	; 0x03
   1b434:	cc 50       	subi	r28, 0x0C	; 12
   1b436:	d1 40       	sbci	r29, 0x01	; 1
   1b438:	be 01       	movw	r22, r28
   1b43a:	68 5f       	subi	r22, 0xF8	; 248
   1b43c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b43e:	c4 01       	movw	r24, r8
   1b440:	0e 94 b4 c0 	call	0x18168	; 0x18168 <lif_read>
   1b444:	5b 01       	movw	r10, r22
   1b446:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b448:	6f 3f       	cpi	r22, 0xFF	; 255
   1b44a:	71 05       	cpc	r23, r1
   1b44c:	09 f0       	breq	.+2      	; 0x1b450 <lif_extract_lif_as_lif+0x1b4>
   1b44e:	2c f4       	brge	.+10     	; 0x1b45a <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b450:	c4 01       	movw	r24, r8
   1b452:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
   1b456:	c7 01       	movw	r24, r14
   1b458:	4f cf       	rjmp	.-354    	; 0x1b2f8 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b45a:	00 e0       	ldi	r16, 0x00	; 0
   1b45c:	11 e0       	ldi	r17, 0x01	; 1
   1b45e:	a3 01       	movw	r20, r6
   1b460:	92 01       	movw	r18, r4
   1b462:	be 01       	movw	r22, r28
   1b464:	68 5f       	subi	r22, 0xF8	; 248
   1b466:	7f 4f       	sbci	r23, 0xFF	; 255
   1b468:	c7 01       	movw	r24, r14
   1b46a:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b46e:	c5 01       	movw	r24, r10
   1b470:	0b 2c       	mov	r0, r11
   1b472:	00 0c       	add	r0, r0
   1b474:	aa 0b       	sbc	r26, r26
   1b476:	bb 0b       	sbc	r27, r27
   1b478:	48 0e       	add	r4, r24
   1b47a:	59 1e       	adc	r5, r25
   1b47c:	6a 1e       	adc	r6, r26
   1b47e:	7b 1e       	adc	r7, r27
        offset += size;
   1b480:	c4 5f       	subi	r28, 0xF4	; 244
   1b482:	de 4f       	sbci	r29, 0xFE	; 254
   1b484:	28 81       	ld	r18, Y
   1b486:	39 81       	ldd	r19, Y+1	; 0x01
   1b488:	4a 81       	ldd	r20, Y+2	; 0x02
   1b48a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b48c:	cc 50       	subi	r28, 0x0C	; 12
   1b48e:	d1 40       	sbci	r29, 0x01	; 1
   1b490:	28 0f       	add	r18, r24
   1b492:	39 1f       	adc	r19, r25
   1b494:	4a 1f       	adc	r20, r26
   1b496:	5b 1f       	adc	r21, r27
   1b498:	c4 5f       	subi	r28, 0xF4	; 244
   1b49a:	de 4f       	sbci	r29, 0xFE	; 254
   1b49c:	28 83       	st	Y, r18
   1b49e:	39 83       	std	Y+1, r19	; 0x01
   1b4a0:	4a 83       	std	Y+2, r20	; 0x02
   1b4a2:	5b 83       	std	Y+3, r21	; 0x03
   1b4a4:	cc 50       	subi	r28, 0x0C	; 12
   1b4a6:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b4a8:	ed b7       	in	r30, 0x3d	; 61
   1b4aa:	fe b7       	in	r31, 0x3e	; 62
   1b4ac:	44 82       	std	Z+4, r4	; 0x04
   1b4ae:	55 82       	std	Z+5, r5	; 0x05
   1b4b0:	66 82       	std	Z+6, r6	; 0x06
   1b4b2:	77 82       	std	Z+7, r7	; 0x07
   1b4b4:	ce 5e       	subi	r28, 0xEE	; 238
   1b4b6:	de 4f       	sbci	r29, 0xFE	; 254
   1b4b8:	28 81       	ld	r18, Y
   1b4ba:	39 81       	ldd	r19, Y+1	; 0x01
   1b4bc:	4a 81       	ldd	r20, Y+2	; 0x02
   1b4be:	c2 51       	subi	r28, 0x12	; 18
   1b4c0:	d1 40       	sbci	r29, 0x01	; 1
   1b4c2:	21 83       	std	Z+1, r18	; 0x01
   1b4c4:	32 83       	std	Z+2, r19	; 0x02
   1b4c6:	43 83       	std	Z+3, r20	; 0x03
   1b4c8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b4cc:	ff ef       	ldi	r31, 0xFF	; 255
   1b4ce:	2f 1a       	sub	r2, r31
   1b4d0:	3f 0a       	sbc	r3, r31
   1b4d2:	9c cf       	rjmp	.-200    	; 0x1b40c <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4d4:	c4 01       	movw	r24, r8
   1b4d6:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
   1b4da:	c7 01       	movw	r24, r14
   1b4dc:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b4e0:	ed b7       	in	r30, 0x3d	; 61
   1b4e2:	fe b7       	in	r31, 0x3e	; 62
   1b4e4:	44 82       	std	Z+4, r4	; 0x04
   1b4e6:	55 82       	std	Z+5, r5	; 0x05
   1b4e8:	66 82       	std	Z+6, r6	; 0x06
   1b4ea:	77 82       	std	Z+7, r7	; 0x07
   1b4ec:	83 e3       	ldi	r24, 0x33	; 51
   1b4ee:	92 e3       	ldi	r25, 0x32	; 50
   1b4f0:	a0 e0       	ldi	r26, 0x00	; 0
   1b4f2:	81 83       	std	Z+1, r24	; 0x01
   1b4f4:	92 83       	std	Z+2, r25	; 0x02
   1b4f6:	a3 83       	std	Z+3, r26	; 0x03
   1b4f8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    return(1);
   1b4fc:	01 e0       	ldi	r16, 0x01	; 1
   1b4fe:	10 e0       	ldi	r17, 0x00	; 0
}
   1b500:	c8 01       	movw	r24, r16
   1b502:	cc 5e       	subi	r28, 0xEC	; 236
   1b504:	de 4f       	sbci	r29, 0xFE	; 254
   1b506:	e2 e1       	ldi	r30, 0x12	; 18
   1b508:	0c 94 05 e4 	jmp	0x1c80a	; 0x1c80a <__epilogue_restores__>

0001b50c <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b50c:	2f 92       	push	r2
   1b50e:	3f 92       	push	r3
   1b510:	4f 92       	push	r4
   1b512:	5f 92       	push	r5
   1b514:	6f 92       	push	r6
   1b516:	8f 92       	push	r8
   1b518:	9f 92       	push	r9
   1b51a:	af 92       	push	r10
   1b51c:	bf 92       	push	r11
   1b51e:	cf 92       	push	r12
   1b520:	df 92       	push	r13
   1b522:	ef 92       	push	r14
   1b524:	ff 92       	push	r15
   1b526:	0f 93       	push	r16
   1b528:	1f 93       	push	r17
   1b52a:	cf 93       	push	r28
   1b52c:	df 93       	push	r29
   1b52e:	cd b7       	in	r28, 0x3d	; 61
   1b530:	de b7       	in	r29, 0x3e	; 62
   1b532:	cd 51       	subi	r28, 0x1D	; 29
   1b534:	d1 40       	sbci	r29, 0x01	; 1
   1b536:	0f b6       	in	r0, 0x3f	; 63
   1b538:	f8 94       	cli
   1b53a:	de bf       	out	0x3e, r29	; 62
   1b53c:	0f be       	out	0x3f, r0	; 63
   1b53e:	cd bf       	out	0x3d, r28	; 61
   1b540:	5c 01       	movw	r10, r24
   1b542:	7b 01       	movw	r14, r22
   1b544:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b546:	dc 01       	movw	r26, r24
   1b548:	8c 91       	ld	r24, X
   1b54a:	81 11       	cpse	r24, r1
   1b54c:	03 c0       	rjmp	.+6      	; 0x1b554 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b54e:	83 e1       	ldi	r24, 0x13	; 19
   1b550:	92 e3       	ldi	r25, 0x32	; 50
   1b552:	06 c0       	rjmp	.+12     	; 0x1b560 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b554:	db 01       	movw	r26, r22
   1b556:	8c 91       	ld	r24, X
   1b558:	81 11       	cpse	r24, r1
   1b55a:	0b c0       	rjmp	.+22     	; 0x1b572 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b55c:	88 ef       	ldi	r24, 0xF8	; 248
   1b55e:	91 e3       	ldi	r25, 0x31	; 49
   1b560:	a0 e0       	ldi	r26, 0x00	; 0
   1b562:	ed b7       	in	r30, 0x3d	; 61
   1b564:	fe b7       	in	r31, 0x3e	; 62
   1b566:	81 83       	std	Z+1, r24	; 0x01
   1b568:	92 83       	std	Z+2, r25	; 0x02
   1b56a:	a3 83       	std	Z+3, r26	; 0x03
   1b56c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1b570:	25 c1       	rjmp	.+586    	; 0x1b7bc <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b572:	da 01       	movw	r26, r20
   1b574:	8c 91       	ld	r24, X
   1b576:	81 11       	cpse	r24, r1
   1b578:	03 c0       	rjmp	.+6      	; 0x1b580 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b57a:	8c ed       	ldi	r24, 0xDC	; 220
   1b57c:	91 e3       	ldi	r25, 0x31	; 49
   1b57e:	f0 cf       	rjmp	.-32     	; 0x1b560 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b580:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b584:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b588:	92 ff       	sbrs	r25, 2
   1b58a:	10 c0       	rjmp	.+32     	; 0x1b5ac <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b58c:	ed b7       	in	r30, 0x3d	; 61
   1b58e:	fe b7       	in	r31, 0x3e	; 62
   1b590:	51 87       	std	Z+9, r21	; 0x09
   1b592:	40 87       	std	Z+8, r20	; 0x08
   1b594:	77 83       	std	Z+7, r23	; 0x07
   1b596:	66 83       	std	Z+6, r22	; 0x06
   1b598:	b5 82       	std	Z+5, r11	; 0x05
   1b59a:	a4 82       	std	Z+4, r10	; 0x04
   1b59c:	8d ea       	ldi	r24, 0xAD	; 173
   1b59e:	91 e3       	ldi	r25, 0x31	; 49
   1b5a0:	a0 e0       	ldi	r26, 0x00	; 0
   1b5a2:	81 83       	std	Z+1, r24	; 0x01
   1b5a4:	92 83       	std	Z+2, r25	; 0x02
   1b5a6:	a3 83       	std	Z+3, r26	; 0x03
   1b5a8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b5ac:	63 e0       	ldi	r22, 0x03	; 3
   1b5ae:	79 e0       	ldi	r23, 0x09	; 9
   1b5b0:	c4 01       	movw	r24, r8
   1b5b2:	0e 94 1b d0 	call	0x1a036	; 0x1a036 <lif_open_volume>
   1b5b6:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b5b8:	00 97       	sbiw	r24, 0x00	; 0
   1b5ba:	09 f4       	brne	.+2      	; 0x1b5be <lif_add_lif_file+0xb2>
   1b5bc:	ff c0       	rjmp	.+510    	; 0x1b7bc <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b5be:	b7 01       	movw	r22, r14
   1b5c0:	09 d8       	rcall	.-4078   	; 0x1a5d4 <lif_find_file>
    if(index == -1)
   1b5c2:	01 96       	adiw	r24, 0x01	; 1
   1b5c4:	a1 f4       	brne	.+40     	; 0x1b5ee <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b5c6:	ed b7       	in	r30, 0x3d	; 61
   1b5c8:	fe b7       	in	r31, 0x3e	; 62
   1b5ca:	f5 82       	std	Z+5, r15	; 0x05
   1b5cc:	e4 82       	std	Z+4, r14	; 0x04
   1b5ce:	8a e9       	ldi	r24, 0x9A	; 154
   1b5d0:	91 e3       	ldi	r25, 0x31	; 49
   1b5d2:	a0 e0       	ldi	r26, 0x00	; 0
   1b5d4:	81 83       	std	Z+1, r24	; 0x01
   1b5d6:	92 83       	std	Z+2, r25	; 0x02
   1b5d8:	a3 83       	std	Z+3, r26	; 0x03
   1b5da:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5de:	c6 01       	movw	r24, r12
   1b5e0:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b5e4:	60 e0       	ldi	r22, 0x00	; 0
   1b5e6:	70 e0       	ldi	r23, 0x00	; 0
   1b5e8:	80 e0       	ldi	r24, 0x00	; 0
   1b5ea:	90 e0       	ldi	r25, 0x00	; 0
   1b5ec:	ff c0       	rjmp	.+510    	; 0x1b7ec <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b5ee:	63 e0       	ldi	r22, 0x03	; 3
   1b5f0:	79 e0       	ldi	r23, 0x09	; 9
   1b5f2:	c5 01       	movw	r24, r10
   1b5f4:	0e 94 1b d0 	call	0x1a036	; 0x1a036 <lif_open_volume>
   1b5f8:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b5fa:	00 97       	sbiw	r24, 0x00	; 0
   1b5fc:	09 f4       	brne	.+2      	; 0x1b600 <lif_add_lif_file+0xf4>
   1b5fe:	de c0       	rjmp	.+444    	; 0x1b7bc <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b600:	f6 01       	movw	r30, r12
   1b602:	e0 5a       	subi	r30, 0xA0	; 160
   1b604:	ff 4f       	sbci	r31, 0xFF	; 255
   1b606:	40 81       	ld	r20, Z
   1b608:	51 81       	ldd	r21, Z+1	; 0x01
   1b60a:	62 81       	ldd	r22, Z+2	; 0x02
   1b60c:	73 81       	ldd	r23, Z+3	; 0x03
   1b60e:	0e 94 bb ce 	call	0x19d76	; 0x19d76 <lif_newdir>
   1b612:	ca 5e       	subi	r28, 0xEA	; 234
   1b614:	de 4f       	sbci	r29, 0xFE	; 254
   1b616:	99 83       	std	Y+1, r25	; 0x01
   1b618:	88 83       	st	Y, r24
   1b61a:	c6 51       	subi	r28, 0x16	; 22
   1b61c:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b61e:	01 96       	adiw	r24, 0x01	; 1
   1b620:	79 f4       	brne	.+30     	; 0x1b640 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b622:	ed b7       	in	r30, 0x3d	; 61
   1b624:	fe b7       	in	r31, 0x3e	; 62
   1b626:	97 82       	std	Z+7, r9	; 0x07
   1b628:	86 82       	std	Z+6, r8	; 0x06
   1b62a:	b5 82       	std	Z+5, r11	; 0x05
   1b62c:	a4 82       	std	Z+4, r10	; 0x04
   1b62e:	8a e6       	ldi	r24, 0x6A	; 106
   1b630:	91 e3       	ldi	r25, 0x31	; 49
   1b632:	a0 e0       	ldi	r26, 0x00	; 0
   1b634:	81 83       	std	Z+1, r24	; 0x01
   1b636:	92 83       	std	Z+2, r25	; 0x02
   1b638:	a3 83       	std	Z+3, r26	; 0x03
   1b63a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1b63e:	a8 c0       	rjmp	.+336    	; 0x1b790 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b640:	c7 01       	movw	r24, r14
   1b642:	84 5a       	subi	r24, 0xA4	; 164
   1b644:	9f 4f       	sbci	r25, 0xFF	; 255
   1b646:	dc 01       	movw	r26, r24
   1b648:	4d 91       	ld	r20, X+
   1b64a:	5d 91       	ld	r21, X+
   1b64c:	6d 91       	ld	r22, X+
   1b64e:	7c 91       	ld	r23, X
   1b650:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b652:	21 e2       	ldi	r18, 0x21	; 33
   1b654:	f6 01       	movw	r30, r12
   1b656:	e1 5b       	subi	r30, 0xB1	; 177
   1b658:	ff 4f       	sbci	r31, 0xFF	; 255
   1b65a:	1d 97       	sbiw	r26, 0x0d	; 13
   1b65c:	01 90       	ld	r0, Z+
   1b65e:	0d 92       	st	X+, r0
   1b660:	2a 95       	dec	r18
   1b662:	e1 f7       	brne	.-8      	; 0x1b65c <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b664:	fc 01       	movw	r30, r24
   1b666:	40 83       	st	Z, r20
   1b668:	51 83       	std	Z+1, r21	; 0x01
   1b66a:	62 83       	std	Z+2, r22	; 0x02
   1b66c:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b66e:	b6 2f       	mov	r27, r22
   1b670:	a5 2f       	mov	r26, r21
   1b672:	94 2f       	mov	r25, r20
   1b674:	88 27       	eor	r24, r24
   1b676:	c2 5f       	subi	r28, 0xF2	; 242
   1b678:	de 4f       	sbci	r29, 0xFE	; 254
   1b67a:	88 83       	st	Y, r24
   1b67c:	99 83       	std	Y+1, r25	; 0x01
   1b67e:	aa 83       	std	Y+2, r26	; 0x02
   1b680:	bb 83       	std	Y+3, r27	; 0x03
   1b682:	ce 50       	subi	r28, 0x0E	; 14
   1b684:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b686:	f6 01       	movw	r30, r12
   1b688:	e4 5a       	subi	r30, 0xA4	; 164
   1b68a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b68c:	80 81       	ld	r24, Z
   1b68e:	91 81       	ldd	r25, Z+1	; 0x01
   1b690:	a2 81       	ldd	r26, Z+2	; 0x02
   1b692:	b3 81       	ldd	r27, Z+3	; 0x03
   1b694:	22 27       	eor	r18, r18
   1b696:	38 2f       	mov	r19, r24
   1b698:	49 2f       	mov	r20, r25
   1b69a:	5a 2f       	mov	r21, r26
   1b69c:	ce 5e       	subi	r28, 0xEE	; 238
   1b69e:	de 4f       	sbci	r29, 0xFE	; 254
   1b6a0:	28 83       	st	Y, r18
   1b6a2:	39 83       	std	Y+1, r19	; 0x01
   1b6a4:	4a 83       	std	Y+2, r20	; 0x02
   1b6a6:	5b 83       	std	Y+3, r21	; 0x03
   1b6a8:	c2 51       	subi	r28, 0x12	; 18
   1b6aa:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b6ac:	21 2c       	mov	r2, r1
   1b6ae:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b6b0:	81 2c       	mov	r8, r1
   1b6b2:	91 2c       	mov	r9, r1
   1b6b4:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b6b6:	a7 01       	movw	r20, r14
   1b6b8:	40 5a       	subi	r20, 0xA0	; 160
   1b6ba:	5f 4f       	sbci	r21, 0xFF	; 255
   1b6bc:	c4 5e       	subi	r28, 0xE4	; 228
   1b6be:	de 4f       	sbci	r29, 0xFE	; 254
   1b6c0:	59 83       	std	Y+1, r21	; 0x01
   1b6c2:	48 83       	st	Y, r20
   1b6c4:	cc 51       	subi	r28, 0x1C	; 28
   1b6c6:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b6c8:	8c e5       	ldi	r24, 0x5C	; 92
   1b6ca:	91 e3       	ldi	r25, 0x31	; 49
   1b6cc:	2c 01       	movw	r4, r24
   1b6ce:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b6d0:	27 c0       	rjmp	.+78     	; 0x1b720 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b6d2:	00 e0       	ldi	r16, 0x00	; 0
   1b6d4:	11 e0       	ldi	r17, 0x01	; 1
   1b6d6:	c8 5e       	subi	r28, 0xE8	; 232
   1b6d8:	de 4f       	sbci	r29, 0xFE	; 254
   1b6da:	28 81       	ld	r18, Y
   1b6dc:	39 81       	ldd	r19, Y+1	; 0x01
   1b6de:	4a 81       	ldd	r20, Y+2	; 0x02
   1b6e0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b6e2:	c8 51       	subi	r28, 0x18	; 24
   1b6e4:	d1 40       	sbci	r29, 0x01	; 1
   1b6e6:	be 01       	movw	r22, r28
   1b6e8:	66 5f       	subi	r22, 0xF6	; 246
   1b6ea:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6ec:	c7 01       	movw	r24, r14
   1b6ee:	0e 94 05 c1 	call	0x1820a	; 0x1820a <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b6f2:	8f 3f       	cpi	r24, 0xFF	; 255
   1b6f4:	91 05       	cpc	r25, r1
   1b6f6:	09 f0       	breq	.+2      	; 0x1b6fa <lif_add_lif_file+0x1ee>
   1b6f8:	0c f4       	brge	.+2      	; 0x1b6fc <lif_add_lif_file+0x1f0>
   1b6fa:	4a c0       	rjmp	.+148    	; 0x1b790 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b6fc:	5f ef       	ldi	r21, 0xFF	; 255
   1b6fe:	95 1a       	sub	r9, r21
   1b700:	a5 0a       	sbc	r10, r21
   1b702:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b704:	ed b7       	in	r30, 0x3d	; 61
   1b706:	fe b7       	in	r31, 0x3e	; 62
   1b708:	84 82       	std	Z+4, r8	; 0x04
   1b70a:	95 82       	std	Z+5, r9	; 0x05
   1b70c:	a6 82       	std	Z+6, r10	; 0x06
   1b70e:	b7 82       	std	Z+7, r11	; 0x07
   1b710:	41 82       	std	Z+1, r4	; 0x01
   1b712:	52 82       	std	Z+2, r5	; 0x02
   1b714:	63 82       	std	Z+3, r6	; 0x03
   1b716:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b71a:	ff ef       	ldi	r31, 0xFF	; 255
   1b71c:	2f 1a       	sub	r2, r31
   1b71e:	3f 0a       	sbc	r3, r31
   1b720:	ce 5e       	subi	r28, 0xEE	; 238
   1b722:	de 4f       	sbci	r29, 0xFE	; 254
   1b724:	28 81       	ld	r18, Y
   1b726:	39 81       	ldd	r19, Y+1	; 0x01
   1b728:	4a 81       	ldd	r20, Y+2	; 0x02
   1b72a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b72c:	c2 51       	subi	r28, 0x12	; 18
   1b72e:	d1 40       	sbci	r29, 0x01	; 1
   1b730:	28 0d       	add	r18, r8
   1b732:	39 1d       	adc	r19, r9
   1b734:	4a 1d       	adc	r20, r10
   1b736:	5b 1d       	adc	r21, r11
   1b738:	c2 5f       	subi	r28, 0xF2	; 242
   1b73a:	de 4f       	sbci	r29, 0xFE	; 254
   1b73c:	88 81       	ld	r24, Y
   1b73e:	99 81       	ldd	r25, Y+1	; 0x01
   1b740:	aa 81       	ldd	r26, Y+2	; 0x02
   1b742:	bb 81       	ldd	r27, Y+3	; 0x03
   1b744:	ce 50       	subi	r28, 0x0E	; 14
   1b746:	d1 40       	sbci	r29, 0x01	; 1
   1b748:	88 0d       	add	r24, r8
   1b74a:	99 1d       	adc	r25, r9
   1b74c:	aa 1d       	adc	r26, r10
   1b74e:	bb 1d       	adc	r27, r11
   1b750:	c8 5e       	subi	r28, 0xE8	; 232
   1b752:	de 4f       	sbci	r29, 0xFE	; 254
   1b754:	88 83       	st	Y, r24
   1b756:	99 83       	std	Y+1, r25	; 0x01
   1b758:	aa 83       	std	Y+2, r26	; 0x02
   1b75a:	bb 83       	std	Y+3, r27	; 0x03
   1b75c:	c8 51       	subi	r28, 0x18	; 24
   1b75e:	d1 40       	sbci	r29, 0x01	; 1
   1b760:	c4 5e       	subi	r28, 0xE4	; 228
   1b762:	de 4f       	sbci	r29, 0xFE	; 254
   1b764:	a8 81       	ld	r26, Y
   1b766:	b9 81       	ldd	r27, Y+1	; 0x01
   1b768:	cc 51       	subi	r28, 0x1C	; 28
   1b76a:	d1 40       	sbci	r29, 0x01	; 1
   1b76c:	8d 91       	ld	r24, X+
   1b76e:	9c 91       	ld	r25, X
   1b770:	28 16       	cp	r2, r24
   1b772:	39 06       	cpc	r3, r25
   1b774:	94 f4       	brge	.+36     	; 0x1b79a <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b776:	00 e0       	ldi	r16, 0x00	; 0
   1b778:	11 e0       	ldi	r17, 0x01	; 1
   1b77a:	be 01       	movw	r22, r28
   1b77c:	66 5f       	subi	r22, 0xF6	; 246
   1b77e:	7f 4f       	sbci	r23, 0xFF	; 255
   1b780:	c6 01       	movw	r24, r12
   1b782:	0e 94 b4 c0 	call	0x18168	; 0x18168 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b786:	6f 3f       	cpi	r22, 0xFF	; 255
   1b788:	71 05       	cpc	r23, r1
   1b78a:	11 f0       	breq	.+4      	; 0x1b790 <lif_add_lif_file+0x284>
   1b78c:	0c f0       	brlt	.+2      	; 0x1b790 <lif_add_lif_file+0x284>
   1b78e:	a1 cf       	rjmp	.-190    	; 0x1b6d2 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b790:	c7 01       	movw	r24, r14
   1b792:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
   1b796:	c6 01       	movw	r24, r12
   1b798:	0f c0       	rjmp	.+30     	; 0x1b7b8 <lif_add_lif_file+0x2ac>
   1b79a:	c6 01       	movw	r24, r12
   1b79c:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b7a0:	ca 5e       	subi	r28, 0xEA	; 234
   1b7a2:	de 4f       	sbci	r29, 0xFE	; 254
   1b7a4:	68 81       	ld	r22, Y
   1b7a6:	79 81       	ldd	r23, Y+1	; 0x01
   1b7a8:	c6 51       	subi	r28, 0x16	; 22
   1b7aa:	d1 40       	sbci	r29, 0x01	; 1
   1b7ac:	c7 01       	movw	r24, r14
   1b7ae:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_writedirindex>
   1b7b2:	89 2b       	or	r24, r25
   1b7b4:	41 f4       	brne	.+16     	; 0x1b7c6 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7b6:	c7 01       	movw	r24, r14
   1b7b8:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b7bc:	6f ef       	ldi	r22, 0xFF	; 255
   1b7be:	7f ef       	ldi	r23, 0xFF	; 255
   1b7c0:	8f ef       	ldi	r24, 0xFF	; 255
   1b7c2:	9f ef       	ldi	r25, 0xFF	; 255
   1b7c4:	13 c0       	rjmp	.+38     	; 0x1b7ec <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7c6:	c7 01       	movw	r24, r14
   1b7c8:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b7cc:	ed b7       	in	r30, 0x3d	; 61
   1b7ce:	fe b7       	in	r31, 0x3e	; 62
   1b7d0:	84 82       	std	Z+4, r8	; 0x04
   1b7d2:	95 82       	std	Z+5, r9	; 0x05
   1b7d4:	a6 82       	std	Z+6, r10	; 0x06
   1b7d6:	b7 82       	std	Z+7, r11	; 0x07
   1b7d8:	8e e4       	ldi	r24, 0x4E	; 78
   1b7da:	91 e3       	ldi	r25, 0x31	; 49
   1b7dc:	a0 e0       	ldi	r26, 0x00	; 0
   1b7de:	81 83       	std	Z+1, r24	; 0x01
   1b7e0:	92 83       	std	Z+2, r25	; 0x02
   1b7e2:	a3 83       	std	Z+3, r26	; 0x03
   1b7e4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    return(bytes);
   1b7e8:	b4 01       	movw	r22, r8
   1b7ea:	c5 01       	movw	r24, r10
}
   1b7ec:	c3 5e       	subi	r28, 0xE3	; 227
   1b7ee:	de 4f       	sbci	r29, 0xFE	; 254
   1b7f0:	0f b6       	in	r0, 0x3f	; 63
   1b7f2:	f8 94       	cli
   1b7f4:	de bf       	out	0x3e, r29	; 62
   1b7f6:	0f be       	out	0x3f, r0	; 63
   1b7f8:	cd bf       	out	0x3d, r28	; 61
   1b7fa:	df 91       	pop	r29
   1b7fc:	cf 91       	pop	r28
   1b7fe:	1f 91       	pop	r17
   1b800:	0f 91       	pop	r16
   1b802:	ff 90       	pop	r15
   1b804:	ef 90       	pop	r14
   1b806:	df 90       	pop	r13
   1b808:	cf 90       	pop	r12
   1b80a:	bf 90       	pop	r11
   1b80c:	af 90       	pop	r10
   1b80e:	9f 90       	pop	r9
   1b810:	8f 90       	pop	r8
   1b812:	6f 90       	pop	r6
   1b814:	5f 90       	pop	r5
   1b816:	4f 90       	pop	r4
   1b818:	3f 90       	pop	r3
   1b81a:	2f 90       	pop	r2
   1b81c:	08 95       	ret

0001b81e <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b81e:	ef 92       	push	r14
   1b820:	ff 92       	push	r15
   1b822:	0f 93       	push	r16
   1b824:	1f 93       	push	r17
   1b826:	cf 93       	push	r28
   1b828:	df 93       	push	r29
   1b82a:	ad b7       	in	r26, 0x3d	; 61
   1b82c:	be b7       	in	r27, 0x3e	; 62
   1b82e:	17 97       	sbiw	r26, 0x07	; 7
   1b830:	0f b6       	in	r0, 0x3f	; 63
   1b832:	f8 94       	cli
   1b834:	be bf       	out	0x3e, r27	; 62
   1b836:	0f be       	out	0x3f, r0	; 63
   1b838:	ad bf       	out	0x3d, r26	; 61
   1b83a:	7c 01       	movw	r14, r24
   1b83c:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b83e:	fc 01       	movw	r30, r24
   1b840:	80 81       	ld	r24, Z
   1b842:	81 11       	cpse	r24, r1
   1b844:	03 c0       	rjmp	.+6      	; 0x1b84c <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b846:	89 e2       	ldi	r24, 0x29	; 41
   1b848:	91 e3       	ldi	r25, 0x31	; 49
   1b84a:	06 c0       	rjmp	.+12     	; 0x1b858 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b84c:	fb 01       	movw	r30, r22
   1b84e:	80 81       	ld	r24, Z
   1b850:	81 11       	cpse	r24, r1
   1b852:	0b c0       	rjmp	.+22     	; 0x1b86a <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b854:	89 e0       	ldi	r24, 0x09	; 9
   1b856:	91 e3       	ldi	r25, 0x31	; 49
   1b858:	a0 e0       	ldi	r26, 0x00	; 0
   1b85a:	ed b7       	in	r30, 0x3d	; 61
   1b85c:	fe b7       	in	r31, 0x3e	; 62
   1b85e:	81 83       	std	Z+1, r24	; 0x01
   1b860:	92 83       	std	Z+2, r25	; 0x02
   1b862:	a3 83       	std	Z+3, r26	; 0x03
   1b864:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1b868:	68 c0       	rjmp	.+208    	; 0x1b93a <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b86a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b86e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b872:	92 ff       	sbrs	r25, 2
   1b874:	0e c0       	rjmp	.+28     	; 0x1b892 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b876:	ed b7       	in	r30, 0x3d	; 61
   1b878:	fe b7       	in	r31, 0x3e	; 62
   1b87a:	77 83       	std	Z+7, r23	; 0x07
   1b87c:	66 83       	std	Z+6, r22	; 0x06
   1b87e:	f5 82       	std	Z+5, r15	; 0x05
   1b880:	e4 82       	std	Z+4, r14	; 0x04
   1b882:	8a ee       	ldi	r24, 0xEA	; 234
   1b884:	90 e3       	ldi	r25, 0x30	; 48
   1b886:	a0 e0       	ldi	r26, 0x00	; 0
   1b888:	81 83       	std	Z+1, r24	; 0x01
   1b88a:	92 83       	std	Z+2, r25	; 0x02
   1b88c:	a3 83       	std	Z+3, r26	; 0x03
   1b88e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b892:	63 e0       	ldi	r22, 0x03	; 3
   1b894:	79 e0       	ldi	r23, 0x09	; 9
   1b896:	c7 01       	movw	r24, r14
   1b898:	0e 94 1b d0 	call	0x1a036	; 0x1a036 <lif_open_volume>
   1b89c:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b89e:	00 97       	sbiw	r24, 0x00	; 0
   1b8a0:	09 f4       	brne	.+2      	; 0x1b8a4 <lif_del_file+0x86>
   1b8a2:	4b c0       	rjmp	.+150    	; 0x1b93a <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b8a4:	b8 01       	movw	r22, r16
   1b8a6:	0e 94 ea d2 	call	0x1a5d4	; 0x1a5d4 <lif_find_file>
    if(index == -1)
   1b8aa:	8f 3f       	cpi	r24, 0xFF	; 255
   1b8ac:	ff ef       	ldi	r31, 0xFF	; 255
   1b8ae:	9f 07       	cpc	r25, r31
   1b8b0:	a1 f4       	brne	.+40     	; 0x1b8da <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b8b2:	ce 01       	movw	r24, r28
   1b8b4:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b8b8:	ed b7       	in	r30, 0x3d	; 61
   1b8ba:	fe b7       	in	r31, 0x3e	; 62
   1b8bc:	17 83       	std	Z+7, r17	; 0x07
   1b8be:	06 83       	std	Z+6, r16	; 0x06
   1b8c0:	f5 82       	std	Z+5, r15	; 0x05
   1b8c2:	e4 82       	std	Z+4, r14	; 0x04
   1b8c4:	82 ec       	ldi	r24, 0xC2	; 194
   1b8c6:	90 e3       	ldi	r25, 0x30	; 48
   1b8c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b8ca:	81 83       	std	Z+1, r24	; 0x01
   1b8cc:	92 83       	std	Z+2, r25	; 0x02
   1b8ce:	a3 83       	std	Z+3, r26	; 0x03
   1b8d0:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        return(0);
   1b8d4:	80 e0       	ldi	r24, 0x00	; 0
   1b8d6:	90 e0       	ldi	r25, 0x00	; 0
   1b8d8:	32 c0       	rjmp	.+100    	; 0x1b93e <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b8da:	2a a1       	ldd	r18, Y+34	; 0x22
   1b8dc:	3b a1       	ldd	r19, Y+35	; 0x23
   1b8de:	21 50       	subi	r18, 0x01	; 1
   1b8e0:	31 09       	sbc	r19, r1
   1b8e2:	fe 01       	movw	r30, r28
   1b8e4:	e6 5a       	subi	r30, 0xA6	; 166
   1b8e6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8e8:	82 17       	cp	r24, r18
   1b8ea:	93 07       	cpc	r25, r19
   1b8ec:	2c f0       	brlt	.+10     	; 0x1b8f8 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b8ee:	2f ef       	ldi	r18, 0xFF	; 255
   1b8f0:	3f ef       	ldi	r19, 0xFF	; 255
   1b8f2:	31 83       	std	Z+1, r19	; 0x01
   1b8f4:	20 83       	st	Z, r18
   1b8f6:	02 c0       	rjmp	.+4      	; 0x1b8fc <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b8f8:	11 82       	std	Z+1, r1	; 0x01
   1b8fa:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b8fc:	bc 01       	movw	r22, r24
   1b8fe:	ce 01       	movw	r24, r28
   1b900:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_writedirindex>
   1b904:	89 2b       	or	r24, r25
   1b906:	21 f4       	brne	.+8      	; 0x1b910 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b908:	ce 01       	movw	r24, r28
   1b90a:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
   1b90e:	15 c0       	rjmp	.+42     	; 0x1b93a <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b910:	ce 01       	movw	r24, r28
   1b912:	0e 94 c9 ca 	call	0x19592	; 0x19592 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b916:	ce 01       	movw	r24, r28
   1b918:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b91c:	ed b7       	in	r30, 0x3d	; 61
   1b91e:	fe b7       	in	r31, 0x3e	; 62
   1b920:	15 83       	std	Z+5, r17	; 0x05
   1b922:	04 83       	std	Z+4, r16	; 0x04
   1b924:	83 eb       	ldi	r24, 0xB3	; 179
   1b926:	90 e3       	ldi	r25, 0x30	; 48
   1b928:	a0 e0       	ldi	r26, 0x00	; 0
   1b92a:	81 83       	std	Z+1, r24	; 0x01
   1b92c:	92 83       	std	Z+2, r25	; 0x02
   1b92e:	a3 83       	std	Z+3, r26	; 0x03
   1b930:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    return(1);
   1b934:	81 e0       	ldi	r24, 0x01	; 1
   1b936:	90 e0       	ldi	r25, 0x00	; 0
   1b938:	02 c0       	rjmp	.+4      	; 0x1b93e <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b93a:	8f ef       	ldi	r24, 0xFF	; 255
   1b93c:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b93e:	cd b7       	in	r28, 0x3d	; 61
   1b940:	de b7       	in	r29, 0x3e	; 62
   1b942:	27 96       	adiw	r28, 0x07	; 7
   1b944:	e6 e0       	ldi	r30, 0x06	; 6
   1b946:	6d c7       	rjmp	.+3802   	; 0x1c822 <__epilogue_restores__+0x18>

0001b948 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b948:	a7 e0       	ldi	r26, 0x07	; 7
   1b94a:	b0 e0       	ldi	r27, 0x00	; 0
   1b94c:	e9 ea       	ldi	r30, 0xA9	; 169
   1b94e:	fc ed       	ldi	r31, 0xDC	; 220
   1b950:	48 c7       	rjmp	.+3728   	; 0x1c7e2 <__prologue_saves__+0x10>
   1b952:	6c 01       	movw	r12, r24
   1b954:	8b 01       	movw	r16, r22
   1b956:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b958:	fc 01       	movw	r30, r24
   1b95a:	80 81       	ld	r24, Z
   1b95c:	81 11       	cpse	r24, r1
   1b95e:	03 c0       	rjmp	.+6      	; 0x1b966 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b960:	8b e8       	ldi	r24, 0x8B	; 139
   1b962:	90 e3       	ldi	r25, 0x30	; 48
   1b964:	06 c0       	rjmp	.+12     	; 0x1b972 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1b966:	fb 01       	movw	r30, r22
   1b968:	80 81       	ld	r24, Z
   1b96a:	81 11       	cpse	r24, r1
   1b96c:	0b c0       	rjmp	.+22     	; 0x1b984 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b96e:	84 e6       	ldi	r24, 0x64	; 100
   1b970:	90 e3       	ldi	r25, 0x30	; 48
   1b972:	a0 e0       	ldi	r26, 0x00	; 0
   1b974:	ed b7       	in	r30, 0x3d	; 61
   1b976:	fe b7       	in	r31, 0x3e	; 62
   1b978:	81 83       	std	Z+1, r24	; 0x01
   1b97a:	92 83       	std	Z+2, r25	; 0x02
   1b97c:	a3 83       	std	Z+3, r26	; 0x03
   1b97e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1b982:	58 c0       	rjmp	.+176    	; 0x1ba34 <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1b984:	fa 01       	movw	r30, r20
   1b986:	80 81       	ld	r24, Z
   1b988:	81 11       	cpse	r24, r1
   1b98a:	03 c0       	rjmp	.+6      	; 0x1b992 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b98c:	8d e3       	ldi	r24, 0x3D	; 61
   1b98e:	90 e3       	ldi	r25, 0x30	; 48
   1b990:	f0 cf       	rjmp	.-32     	; 0x1b972 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b992:	ca 01       	movw	r24, r20
   1b994:	0e 94 cb c1 	call	0x18396	; 0x18396 <lif_checkname>
   1b998:	89 2b       	or	r24, r25
   1b99a:	19 f4       	brne	.+6      	; 0x1b9a2 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b99c:	87 e0       	ldi	r24, 0x07	; 7
   1b99e:	90 e3       	ldi	r25, 0x30	; 48
   1b9a0:	e8 cf       	rjmp	.-48     	; 0x1b972 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b9a2:	63 e0       	ldi	r22, 0x03	; 3
   1b9a4:	79 e0       	ldi	r23, 0x09	; 9
   1b9a6:	c6 01       	movw	r24, r12
   1b9a8:	0e 94 1b d0 	call	0x1a036	; 0x1a036 <lif_open_volume>
   1b9ac:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b9ae:	00 97       	sbiw	r24, 0x00	; 0
   1b9b0:	09 f4       	brne	.+2      	; 0x1b9b4 <lif_rename_file+0x6c>
   1b9b2:	40 c0       	rjmp	.+128    	; 0x1ba34 <lif_rename_file+0xec>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b9b4:	b8 01       	movw	r22, r16
   1b9b6:	0e 94 ea d2 	call	0x1a5d4	; 0x1a5d4 <lif_find_file>
   1b9ba:	5c 01       	movw	r10, r24
    if(index == -1)
   1b9bc:	01 96       	adiw	r24, 0x01	; 1
   1b9be:	a1 f4       	brne	.+40     	; 0x1b9e8 <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b9c0:	ed b7       	in	r30, 0x3d	; 61
   1b9c2:	fe b7       	in	r31, 0x3e	; 62
   1b9c4:	17 83       	std	Z+7, r17	; 0x07
   1b9c6:	06 83       	std	Z+6, r16	; 0x06
   1b9c8:	d5 82       	std	Z+5, r13	; 0x05
   1b9ca:	c4 82       	std	Z+4, r12	; 0x04
   1b9cc:	8e ed       	ldi	r24, 0xDE	; 222
   1b9ce:	9f e2       	ldi	r25, 0x2F	; 47
   1b9d0:	a0 e0       	ldi	r26, 0x00	; 0
   1b9d2:	81 83       	std	Z+1, r24	; 0x01
   1b9d4:	92 83       	std	Z+2, r25	; 0x02
   1b9d6:	a3 83       	std	Z+3, r26	; 0x03
   1b9d8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9dc:	ce 01       	movw	r24, r28
   1b9de:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b9e2:	80 e0       	ldi	r24, 0x00	; 0
   1b9e4:	90 e0       	ldi	r25, 0x00	; 0
   1b9e6:	28 c0       	rjmp	.+80     	; 0x1ba38 <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b9e8:	4a e0       	ldi	r20, 0x0A	; 10
   1b9ea:	50 e0       	ldi	r21, 0x00	; 0
   1b9ec:	b7 01       	movw	r22, r14
   1b9ee:	ce 01       	movw	r24, r28
   1b9f0:	81 5b       	subi	r24, 0xB1	; 177
   1b9f2:	9f 4f       	sbci	r25, 0xFF	; 255
   1b9f4:	0e 94 05 c2 	call	0x1840a	; 0x1840a <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b9f8:	b5 01       	movw	r22, r10
   1b9fa:	ce 01       	movw	r24, r28
   1b9fc:	0e 94 55 ca 	call	0x194aa	; 0x194aa <lif_writedirindex>
   1ba00:	89 2b       	or	r24, r25
   1ba02:	21 f4       	brne	.+8      	; 0x1ba0c <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba04:	ce 01       	movw	r24, r28
   1ba06:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
   1ba0a:	14 c0       	rjmp	.+40     	; 0x1ba34 <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1ba0c:	ed b7       	in	r30, 0x3d	; 61
   1ba0e:	fe b7       	in	r31, 0x3e	; 62
   1ba10:	f7 82       	std	Z+7, r15	; 0x07
   1ba12:	e6 82       	std	Z+6, r14	; 0x06
   1ba14:	15 83       	std	Z+5, r17	; 0x05
   1ba16:	04 83       	std	Z+4, r16	; 0x04
   1ba18:	87 ec       	ldi	r24, 0xC7	; 199
   1ba1a:	9f e2       	ldi	r25, 0x2F	; 47
   1ba1c:	a0 e0       	ldi	r26, 0x00	; 0
   1ba1e:	81 83       	std	Z+1, r24	; 0x01
   1ba20:	92 83       	std	Z+2, r25	; 0x02
   1ba22:	a3 83       	std	Z+3, r26	; 0x03
   1ba24:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba28:	ce 01       	movw	r24, r28
   1ba2a:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1ba2e:	81 e0       	ldi	r24, 0x01	; 1
   1ba30:	90 e0       	ldi	r25, 0x00	; 0
   1ba32:	02 c0       	rjmp	.+4      	; 0x1ba38 <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1ba34:	8f ef       	ldi	r24, 0xFF	; 255
   1ba36:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1ba38:	cd b7       	in	r28, 0x3d	; 61
   1ba3a:	de b7       	in	r29, 0x3e	; 62
   1ba3c:	27 96       	adiw	r28, 0x07	; 7
   1ba3e:	ea e0       	ldi	r30, 0x0A	; 10
   1ba40:	ec c6       	rjmp	.+3544   	; 0x1c81a <__epilogue_restores__+0x10>

0001ba42 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1ba42:	4f 92       	push	r4
   1ba44:	5f 92       	push	r5
   1ba46:	6f 92       	push	r6
   1ba48:	7f 92       	push	r7
   1ba4a:	af 92       	push	r10
   1ba4c:	bf 92       	push	r11
   1ba4e:	cf 92       	push	r12
   1ba50:	df 92       	push	r13
   1ba52:	ef 92       	push	r14
   1ba54:	ff 92       	push	r15
   1ba56:	0f 93       	push	r16
   1ba58:	1f 93       	push	r17
   1ba5a:	cf 93       	push	r28
   1ba5c:	df 93       	push	r29
   1ba5e:	ad b7       	in	r26, 0x3d	; 61
   1ba60:	be b7       	in	r27, 0x3e	; 62
   1ba62:	17 97       	sbiw	r26, 0x07	; 7
   1ba64:	0f b6       	in	r0, 0x3f	; 63
   1ba66:	f8 94       	cli
   1ba68:	be bf       	out	0x3e, r27	; 62
   1ba6a:	0f be       	out	0x3f, r0	; 63
   1ba6c:	ad bf       	out	0x3d, r26	; 61
   1ba6e:	27 01       	movw	r4, r14
   1ba70:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1ba72:	dc 01       	movw	r26, r24
   1ba74:	ec 91       	ld	r30, X
   1ba76:	e1 11       	cpse	r30, r1
   1ba78:	03 c0       	rjmp	.+6      	; 0x1ba80 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1ba7a:	8e e9       	ldi	r24, 0x9E	; 158
   1ba7c:	9f e2       	ldi	r25, 0x2F	; 47
   1ba7e:	16 c0       	rjmp	.+44     	; 0x1baac <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1ba80:	db 01       	movw	r26, r22
   1ba82:	ec 91       	ld	r30, X
   1ba84:	e1 11       	cpse	r30, r1
   1ba86:	03 c0       	rjmp	.+6      	; 0x1ba8e <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1ba88:	89 e7       	ldi	r24, 0x79	; 121
   1ba8a:	9f e2       	ldi	r25, 0x2F	; 47
   1ba8c:	0f c0       	rjmp	.+30     	; 0x1baac <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1ba8e:	21 15       	cp	r18, r1
   1ba90:	31 05       	cpc	r19, r1
   1ba92:	41 05       	cpc	r20, r1
   1ba94:	51 05       	cpc	r21, r1
   1ba96:	19 f4       	brne	.+6      	; 0x1ba9e <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1ba98:	86 e5       	ldi	r24, 0x56	; 86
   1ba9a:	9f e2       	ldi	r25, 0x2F	; 47
   1ba9c:	07 c0       	rjmp	.+14     	; 0x1baac <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1ba9e:	e1 14       	cp	r14, r1
   1baa0:	f1 04       	cpc	r15, r1
   1baa2:	01 05       	cpc	r16, r1
   1baa4:	11 05       	cpc	r17, r1
   1baa6:	59 f4       	brne	.+22     	; 0x1babe <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1baa8:	86 e3       	ldi	r24, 0x36	; 54
   1baaa:	9f e2       	ldi	r25, 0x2F	; 47
   1baac:	a0 e0       	ldi	r26, 0x00	; 0
   1baae:	ed b7       	in	r30, 0x3d	; 61
   1bab0:	fe b7       	in	r31, 0x3e	; 62
   1bab2:	81 83       	std	Z+1, r24	; 0x01
   1bab4:	92 83       	std	Z+2, r25	; 0x02
   1bab6:	a3 83       	std	Z+3, r26	; 0x03
   1bab8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1babc:	2b c0       	rjmp	.+86     	; 0x1bb14 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1babe:	67 01       	movw	r12, r14
   1bac0:	78 01       	movw	r14, r16
   1bac2:	f2 e0       	ldi	r31, 0x02	; 2
   1bac4:	cf 1a       	sub	r12, r31
   1bac6:	d1 08       	sbc	r13, r1
   1bac8:	e1 08       	sbc	r14, r1
   1baca:	f1 08       	sbc	r15, r1
   1bacc:	56 01       	movw	r10, r12
   1bace:	67 01       	movw	r12, r14
   1bad0:	a2 1a       	sub	r10, r18
   1bad2:	b3 0a       	sbc	r11, r19
   1bad4:	c4 0a       	sbc	r12, r20
   1bad6:	d5 0a       	sbc	r13, r21
   1bad8:	79 01       	movw	r14, r18
   1bada:	8a 01       	movw	r16, r20
   1badc:	22 e0       	ldi	r18, 0x02	; 2
   1bade:	30 e0       	ldi	r19, 0x00	; 0
   1bae0:	40 e0       	ldi	r20, 0x00	; 0
   1bae2:	50 e0       	ldi	r21, 0x00	; 0
   1bae4:	0e 94 d1 cb 	call	0x197a2	; 0x197a2 <lif_create_volume>
    if(LIF == NULL)
   1bae8:	00 97       	sbiw	r24, 0x00	; 0
   1baea:	a1 f0       	breq	.+40     	; 0x1bb14 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1baec:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1baf0:	82 01       	movw	r16, r4
   1baf2:	d6 2d       	mov	r29, r6
   1baf4:	c7 2d       	mov	r28, r7
   1baf6:	ed b7       	in	r30, 0x3d	; 61
   1baf8:	fe b7       	in	r31, 0x3e	; 62
   1bafa:	44 82       	std	Z+4, r4	; 0x04
   1bafc:	15 83       	std	Z+5, r17	; 0x05
   1bafe:	66 82       	std	Z+6, r6	; 0x06
   1bb00:	77 82       	std	Z+7, r7	; 0x07
   1bb02:	86 e1       	ldi	r24, 0x16	; 22
   1bb04:	9f e2       	ldi	r25, 0x2F	; 47
   1bb06:	a0 e0       	ldi	r26, 0x00	; 0
   1bb08:	81 83       	std	Z+1, r24	; 0x01
   1bb0a:	92 83       	std	Z+2, r25	; 0x02
   1bb0c:	a3 83       	std	Z+3, r26	; 0x03
   1bb0e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    return(end);
   1bb12:	04 c0       	rjmp	.+8      	; 0x1bb1c <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bb14:	0f ef       	ldi	r16, 0xFF	; 255
   1bb16:	1f ef       	ldi	r17, 0xFF	; 255
   1bb18:	df ef       	ldi	r29, 0xFF	; 255
   1bb1a:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bb1c:	b8 01       	movw	r22, r16
   1bb1e:	8d 2f       	mov	r24, r29
   1bb20:	9c 2f       	mov	r25, r28
   1bb22:	ad b7       	in	r26, 0x3d	; 61
   1bb24:	be b7       	in	r27, 0x3e	; 62
   1bb26:	17 96       	adiw	r26, 0x07	; 7
   1bb28:	0f b6       	in	r0, 0x3f	; 63
   1bb2a:	f8 94       	cli
   1bb2c:	be bf       	out	0x3e, r27	; 62
   1bb2e:	0f be       	out	0x3f, r0	; 63
   1bb30:	ad bf       	out	0x3d, r26	; 61
   1bb32:	df 91       	pop	r29
   1bb34:	cf 91       	pop	r28
   1bb36:	1f 91       	pop	r17
   1bb38:	0f 91       	pop	r16
   1bb3a:	ff 90       	pop	r15
   1bb3c:	ef 90       	pop	r14
   1bb3e:	df 90       	pop	r13
   1bb40:	cf 90       	pop	r12
   1bb42:	bf 90       	pop	r11
   1bb44:	af 90       	pop	r10
   1bb46:	7f 90       	pop	r7
   1bb48:	6f 90       	pop	r6
   1bb4a:	5f 90       	pop	r5
   1bb4c:	4f 90       	pop	r4
   1bb4e:	08 95       	ret

0001bb50 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bb50:	8f 92       	push	r8
   1bb52:	9f 92       	push	r9
   1bb54:	af 92       	push	r10
   1bb56:	bf 92       	push	r11
   1bb58:	ef 92       	push	r14
   1bb5a:	ff 92       	push	r15
   1bb5c:	0f 93       	push	r16
   1bb5e:	1f 93       	push	r17
   1bb60:	cf 93       	push	r28
   1bb62:	df 93       	push	r29
   1bb64:	00 d0       	rcall	.+0      	; 0x1bb66 <lif_tests+0x16>
   1bb66:	00 d0       	rcall	.+0      	; 0x1bb68 <lif_tests+0x18>
   1bb68:	1f 92       	push	r1
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1bb6a:	82 30       	cpi	r24, 0x02	; 2
   1bb6c:	91 05       	cpc	r25, r1
   1bb6e:	0c f4       	brge	.+2      	; 0x1bb72 <lif_tests+0x22>
   1bb70:	17 c1       	rjmp	.+558    	; 0x1bda0 <lif_tests+0x250>
        return (1);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bb72:	fb 01       	movw	r30, r22
   1bb74:	02 81       	ldd	r16, Z+2	; 0x02
   1bb76:	13 81       	ldd	r17, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1bb78:	01 15       	cp	r16, r1
   1bb7a:	11 05       	cpc	r17, r1
   1bb7c:	09 f4       	brne	.+2      	; 0x1bb80 <lif_tests+0x30>
   1bb7e:	10 c1       	rjmp	.+544    	; 0x1bda0 <lif_tests+0x250>
   1bb80:	f8 01       	movw	r30, r16
   1bb82:	20 81       	ld	r18, Z
   1bb84:	22 23       	and	r18, r18
   1bb86:	09 f4       	brne	.+2      	; 0x1bb8a <lif_tests+0x3a>
   1bb88:	0b c1       	rjmp	.+534    	; 0x1bda0 <lif_tests+0x250>
   1bb8a:	eb 01       	movw	r28, r22
   1bb8c:	7c 01       	movw	r14, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bb8e:	65 e9       	ldi	r22, 0x95	; 149
   1bb90:	76 e1       	ldi	r23, 0x16	; 22
   1bb92:	c8 01       	movw	r24, r16
   1bb94:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   1bb98:	89 2b       	or	r24, r25
   1bb9a:	29 f0       	breq	.+10     	; 0x1bba6 <lif_tests+0x56>
    {
        lif_help(1);
   1bb9c:	81 e0       	ldi	r24, 0x01	; 1
   1bb9e:	90 e0       	ldi	r25, 0x00	; 0
   1bba0:	0e 94 a5 bf 	call	0x17f4a	; 0x17f4a <lif_help>
   1bba4:	fd c0       	rjmp	.+506    	; 0x1bda0 <lif_tests+0x250>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bba6:	64 e9       	ldi	r22, 0x94	; 148
   1bba8:	76 e1       	ldi	r23, 0x16	; 22
   1bbaa:	c8 01       	movw	r24, r16
   1bbac:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   1bbb0:	89 2b       	or	r24, r25
   1bbb2:	a1 f7       	brne	.-24     	; 0x1bb9c <lif_tests+0x4c>
   1bbb4:	6a e9       	ldi	r22, 0x9A	; 154
   1bbb6:	76 e1       	ldi	r23, 0x16	; 22
   1bbb8:	c8 01       	movw	r24, r16
   1bbba:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   1bbbe:	89 2b       	or	r24, r25
   1bbc0:	69 f7       	brne	.-38     	; 0x1bb9c <lif_tests+0x4c>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1bbc2:	97 01       	movw	r18, r14
   1bbc4:	42 e0       	ldi	r20, 0x02	; 2
   1bbc6:	50 e0       	ldi	r21, 0x00	; 0
   1bbc8:	6d e9       	ldi	r22, 0x9D	; 157
   1bbca:	76 e1       	ldi	r23, 0x16	; 22
   1bbcc:	c8 01       	movw	r24, r16
   1bbce:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bbd2:	89 2b       	or	r24, r25
   1bbd4:	39 f0       	breq	.+14     	; 0x1bbe4 <lif_tests+0x94>
    {
        debuglevel = 0xffff;
   1bbd6:	8f ef       	ldi	r24, 0xFF	; 255
   1bbd8:	9f ef       	ldi	r25, 0xFF	; 255
   1bbda:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bbde:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
   1bbe2:	de c0       	rjmp	.+444    	; 0x1bda0 <lif_tests+0x250>
        return(1);
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1bbe4:	97 01       	movw	r18, r14
   1bbe6:	45 e0       	ldi	r20, 0x05	; 5
   1bbe8:	50 e0       	ldi	r21, 0x00	; 0
   1bbea:	60 ea       	ldi	r22, 0xA0	; 160
   1bbec:	76 e1       	ldi	r23, 0x16	; 22
   1bbee:	c8 01       	movw	r24, r16
   1bbf0:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bbf4:	89 2b       	or	r24, r25
   1bbf6:	41 f0       	breq	.+16     	; 0x1bc08 <lif_tests+0xb8>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bbf8:	48 85       	ldd	r20, Y+8	; 0x08
   1bbfa:	59 85       	ldd	r21, Y+9	; 0x09
   1bbfc:	6e 81       	ldd	r22, Y+6	; 0x06
   1bbfe:	7f 81       	ldd	r23, Y+7	; 0x07
   1bc00:	8c 81       	ldd	r24, Y+4	; 0x04
   1bc02:	9d 81       	ldd	r25, Y+5	; 0x05
   1bc04:	83 dc       	rcall	.-1786   	; 0x1b50c <lif_add_lif_file>
   1bc06:	cc c0       	rjmp	.+408    	; 0x1bda0 <lif_tests+0x250>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1bc08:	97 01       	movw	r18, r14
   1bc0a:	45 e0       	ldi	r20, 0x05	; 5
   1bc0c:	50 e0       	ldi	r21, 0x00	; 0
   1bc0e:	67 ea       	ldi	r22, 0xA7	; 167
   1bc10:	76 e1       	ldi	r23, 0x16	; 22
   1bc12:	c8 01       	movw	r24, r16
   1bc14:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bc18:	89 2b       	or	r24, r25
   1bc1a:	49 f0       	breq	.+18     	; 0x1bc2e <lif_tests+0xde>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1bc1c:	48 85       	ldd	r20, Y+8	; 0x08
   1bc1e:	59 85       	ldd	r21, Y+9	; 0x09
   1bc20:	6e 81       	ldd	r22, Y+6	; 0x06
   1bc22:	7f 81       	ldd	r23, Y+7	; 0x07
   1bc24:	8c 81       	ldd	r24, Y+4	; 0x04
   1bc26:	9d 81       	ldd	r25, Y+5	; 0x05
   1bc28:	0e 94 63 d5 	call	0x1aac6	; 0x1aac6 <lif_add_ascii_file_as_e010>
   1bc2c:	b9 c0       	rjmp	.+370    	; 0x1bda0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bc2e:	97 01       	movw	r18, r14
   1bc30:	45 e0       	ldi	r20, 0x05	; 5
   1bc32:	50 e0       	ldi	r21, 0x00	; 0
   1bc34:	6b ea       	ldi	r22, 0xAB	; 171
   1bc36:	76 e1       	ldi	r23, 0x16	; 22
   1bc38:	c8 01       	movw	r24, r16
   1bc3a:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bc3e:	89 2b       	or	r24, r25
   1bc40:	e1 f1       	breq	.+120    	; 0x1bcba <lif_tests+0x16a>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1bc42:	ac 80       	ldd	r10, Y+4	; 0x04
   1bc44:	bd 80       	ldd	r11, Y+5	; 0x05
        char *label = argv[ind+1];
   1bc46:	8e 80       	ldd	r8, Y+6	; 0x06
   1bc48:	9f 80       	ldd	r9, Y+7	; 0x07
        char *model = argv[ind+2];
   1bc4a:	08 84       	ldd	r0, Y+8	; 0x08
   1bc4c:	d9 85       	ldd	r29, Y+9	; 0x09
   1bc4e:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1bc50:	66 eb       	ldi	r22, 0xB6	; 182
   1bc52:	76 e1       	ldi	r23, 0x16	; 22
   1bc54:	ce 01       	movw	r24, r28
   1bc56:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <MATCHI_LEN>
   1bc5a:	89 2b       	or	r24, r25
   1bc5c:	09 f0       	breq	.+2      	; 0x1bc60 <lif_tests+0x110>
            model +=2;
   1bc5e:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1bc60:	40 e0       	ldi	r20, 0x00	; 0
   1bc62:	50 e0       	ldi	r21, 0x00	; 0
   1bc64:	60 e0       	ldi	r22, 0x00	; 0
   1bc66:	70 e0       	ldi	r23, 0x00	; 0
   1bc68:	ce 01       	movw	r24, r28
   1bc6a:	0e 94 f8 a2 	call	0x145f0	; 0x145f0 <hpdir_find_drive>
   1bc6e:	89 2b       	or	r24, r25
   1bc70:	b9 f0       	breq	.+46     	; 0x1bca0 <lif_tests+0x150>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1bc72:	60 91 b0 21 	lds	r22, 0x21B0	; 0x8021b0 <hpdir+0xac>
   1bc76:	70 91 b1 21 	lds	r23, 0x21B1	; 0x8021b1 <hpdir+0xad>
   1bc7a:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <hpdir+0xae>
   1bc7e:	90 91 b3 21 	lds	r25, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   1bc82:	0e 94 db a2 	call	0x145b6	; 0x145b6 <lif_dir_count>
   1bc86:	9b 01       	movw	r18, r22
   1bc88:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1bc8a:	e0 90 b0 21 	lds	r14, 0x21B0	; 0x8021b0 <hpdir+0xac>
   1bc8e:	f0 90 b1 21 	lds	r15, 0x21B1	; 0x8021b1 <hpdir+0xad>
   1bc92:	00 91 b2 21 	lds	r16, 0x21B2	; 0x8021b2 <hpdir+0xae>
   1bc96:	10 91 b3 21 	lds	r17, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   1bc9a:	b4 01       	movw	r22, r8
   1bc9c:	c5 01       	movw	r24, r10
   1bc9e:	29 c0       	rjmp	.+82     	; 0x1bcf2 <lif_tests+0x1a2>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1bca0:	ed b7       	in	r30, 0x3d	; 61
   1bca2:	fe b7       	in	r31, 0x3e	; 62
   1bca4:	d5 83       	std	Z+5, r29	; 0x05
   1bca6:	c4 83       	std	Z+4, r28	; 0x04
   1bca8:	8a e4       	ldi	r24, 0x4A	; 74
   1bcaa:	91 e4       	ldi	r25, 0x41	; 65
   1bcac:	a0 e0       	ldi	r26, 0x00	; 0
   1bcae:	81 83       	std	Z+1, r24	; 0x01
   1bcb0:	92 83       	std	Z+2, r25	; 0x02
   1bcb2:	a3 83       	std	Z+3, r26	; 0x03
   1bcb4:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1bcb8:	73 c0       	rjmp	.+230    	; 0x1bda0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1bcba:	97 01       	movw	r18, r14
   1bcbc:	46 e0       	ldi	r20, 0x06	; 6
   1bcbe:	50 e0       	ldi	r21, 0x00	; 0
   1bcc0:	69 eb       	ldi	r22, 0xB9	; 185
   1bcc2:	76 e1       	ldi	r23, 0x16	; 22
   1bcc4:	c8 01       	movw	r24, r16
   1bcc6:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bcca:	89 2b       	or	r24, r25
   1bccc:	a1 f0       	breq	.+40     	; 0x1bcf6 <lif_tests+0x1a6>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1bcce:	88 85       	ldd	r24, Y+8	; 0x08
   1bcd0:	99 85       	ldd	r25, Y+9	; 0x09
   1bcd2:	0e 94 39 48 	call	0x9072	; 0x9072 <atol>
   1bcd6:	4b 01       	movw	r8, r22
   1bcd8:	5c 01       	movw	r10, r24
   1bcda:	8a 85       	ldd	r24, Y+10	; 0x0a
   1bcdc:	9b 85       	ldd	r25, Y+11	; 0x0b
   1bcde:	0e 94 39 48 	call	0x9072	; 0x9072 <atol>
   1bce2:	7b 01       	movw	r14, r22
   1bce4:	8c 01       	movw	r16, r24
   1bce6:	6e 81       	ldd	r22, Y+6	; 0x06
   1bce8:	7f 81       	ldd	r23, Y+7	; 0x07
   1bcea:	a5 01       	movw	r20, r10
   1bcec:	94 01       	movw	r18, r8
   1bcee:	8c 81       	ldd	r24, Y+4	; 0x04
   1bcf0:	9d 81       	ldd	r25, Y+5	; 0x05
   1bcf2:	a7 de       	rcall	.-690    	; 0x1ba42 <lif_create_image>
   1bcf4:	55 c0       	rjmp	.+170    	; 0x1bda0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1bcf6:	97 01       	movw	r18, r14
   1bcf8:	44 e0       	ldi	r20, 0x04	; 4
   1bcfa:	50 e0       	ldi	r21, 0x00	; 0
   1bcfc:	60 ec       	ldi	r22, 0xC0	; 192
   1bcfe:	76 e1       	ldi	r23, 0x16	; 22
   1bd00:	c8 01       	movw	r24, r16
   1bd02:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bd06:	89 2b       	or	r24, r25
   1bd08:	31 f0       	breq	.+12     	; 0x1bd16 <lif_tests+0x1c6>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1bd0a:	6e 81       	ldd	r22, Y+6	; 0x06
   1bd0c:	7f 81       	ldd	r23, Y+7	; 0x07
   1bd0e:	8c 81       	ldd	r24, Y+4	; 0x04
   1bd10:	9d 81       	ldd	r25, Y+5	; 0x05
   1bd12:	85 dd       	rcall	.-1270   	; 0x1b81e <lif_del_file>
   1bd14:	45 c0       	rjmp	.+138    	; 0x1bda0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1bd16:	97 01       	movw	r18, r14
   1bd18:	43 e0       	ldi	r20, 0x03	; 3
   1bd1a:	50 e0       	ldi	r21, 0x00	; 0
   1bd1c:	60 ed       	ldi	r22, 0xD0	; 208
   1bd1e:	7b e0       	ldi	r23, 0x0B	; 11
   1bd20:	c8 01       	movw	r24, r16
   1bd22:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bd26:	89 2b       	or	r24, r25
   1bd28:	29 f0       	breq	.+10     	; 0x1bd34 <lif_tests+0x1e4>
    {
        lif_dir(argv[ind]);
   1bd2a:	8c 81       	ldd	r24, Y+4	; 0x04
   1bd2c:	9d 81       	ldd	r25, Y+5	; 0x05
   1bd2e:	0e 94 15 d1 	call	0x1a22a	; 0x1a22a <lif_dir>
   1bd32:	36 c0       	rjmp	.+108    	; 0x1bda0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1bd34:	97 01       	movw	r18, r14
   1bd36:	45 e0       	ldi	r20, 0x05	; 5
   1bd38:	50 e0       	ldi	r21, 0x00	; 0
   1bd3a:	64 ec       	ldi	r22, 0xC4	; 196
   1bd3c:	76 e1       	ldi	r23, 0x16	; 22
   1bd3e:	c8 01       	movw	r24, r16
   1bd40:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bd44:	89 2b       	or	r24, r25
   1bd46:	41 f0       	breq	.+16     	; 0x1bd58 <lif_tests+0x208>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1bd48:	48 85       	ldd	r20, Y+8	; 0x08
   1bd4a:	59 85       	ldd	r21, Y+9	; 0x09
   1bd4c:	6e 81       	ldd	r22, Y+6	; 0x06
   1bd4e:	7f 81       	ldd	r23, Y+7	; 0x07
   1bd50:	8c 81       	ldd	r24, Y+4	; 0x04
   1bd52:	9d 81       	ldd	r25, Y+5	; 0x05
   1bd54:	a3 da       	rcall	.-2746   	; 0x1b29c <lif_extract_lif_as_lif>
   1bd56:	24 c0       	rjmp	.+72     	; 0x1bda0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1bd58:	97 01       	movw	r18, r14
   1bd5a:	45 e0       	ldi	r20, 0x05	; 5
   1bd5c:	50 e0       	ldi	r21, 0x00	; 0
   1bd5e:	6f ec       	ldi	r22, 0xCF	; 207
   1bd60:	76 e1       	ldi	r23, 0x16	; 22
   1bd62:	c8 01       	movw	r24, r16
   1bd64:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bd68:	89 2b       	or	r24, r25
   1bd6a:	49 f0       	breq	.+18     	; 0x1bd7e <lif_tests+0x22e>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1bd6c:	48 85       	ldd	r20, Y+8	; 0x08
   1bd6e:	59 85       	ldd	r21, Y+9	; 0x09
   1bd70:	6e 81       	ldd	r22, Y+6	; 0x06
   1bd72:	7f 81       	ldd	r23, Y+7	; 0x07
   1bd74:	8c 81       	ldd	r24, Y+4	; 0x04
   1bd76:	9d 81       	ldd	r25, Y+5	; 0x05
   1bd78:	0e 94 9f d6 	call	0x1ad3e	; 0x1ad3e <lif_extract_e010_as_ascii>
   1bd7c:	11 c0       	rjmp	.+34     	; 0x1bda0 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1bd7e:	97 01       	movw	r18, r14
   1bd80:	45 e0       	ldi	r20, 0x05	; 5
   1bd82:	50 e0       	ldi	r21, 0x00	; 0
   1bd84:	6d ed       	ldi	r22, 0xDD	; 221
   1bd86:	7b e0       	ldi	r23, 0x0B	; 11
   1bd88:	c8 01       	movw	r24, r16
   1bd8a:	0e 94 b7 33 	call	0x676e	; 0x676e <MATCHARGS>
   1bd8e:	00 97       	sbiw	r24, 0x00	; 0
   1bd90:	49 f0       	breq	.+18     	; 0x1bda4 <lif_tests+0x254>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bd92:	48 85       	ldd	r20, Y+8	; 0x08
   1bd94:	59 85       	ldd	r21, Y+9	; 0x09
   1bd96:	6e 81       	ldd	r22, Y+6	; 0x06
   1bd98:	7f 81       	ldd	r23, Y+7	; 0x07
   1bd9a:	8c 81       	ldd	r24, Y+4	; 0x04
   1bd9c:	9d 81       	ldd	r25, Y+5	; 0x05
   1bd9e:	d4 dd       	rcall	.-1112   	; 0x1b948 <lif_rename_file>
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
        return (1);
   1bda0:	81 e0       	ldi	r24, 0x01	; 1
   1bda2:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1bda4:	0f 90       	pop	r0
   1bda6:	0f 90       	pop	r0
   1bda8:	0f 90       	pop	r0
   1bdaa:	0f 90       	pop	r0
   1bdac:	0f 90       	pop	r0
   1bdae:	df 91       	pop	r29
   1bdb0:	cf 91       	pop	r28
   1bdb2:	1f 91       	pop	r17
   1bdb4:	0f 91       	pop	r16
   1bdb6:	ff 90       	pop	r15
   1bdb8:	ef 90       	pop	r14
   1bdba:	bf 90       	pop	r11
   1bdbc:	af 90       	pop	r10
   1bdbe:	9f 90       	pop	r9
   1bdc0:	8f 90       	pop	r8
   1bdc2:	08 95       	ret

0001bdc4 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1bdc4:	80 91 f7 19 	lds	r24, 0x19F7	; 0x8019f7 <lcd_display_time>
   1bdc8:	90 91 f8 19 	lds	r25, 0x19F8	; 0x8019f8 <lcd_display_time+0x1>
   1bdcc:	01 96       	adiw	r24, 0x01	; 1
   1bdce:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <lcd_display_time+0x1>
   1bdd2:	80 93 f7 19 	sts	0x19F7, r24	; 0x8019f7 <lcd_display_time>
   1bdd6:	08 95       	ret

0001bdd8 <copyright>:
#endif

///@brief Display Copyright
///@return void
void copyright()
{
   1bdd8:	00 d0       	rcall	.+0      	; 0x1bdda <copyright+0x2>
   1bdda:	00 d0       	rcall	.+0      	; 0x1bddc <copyright+0x4>
   1bddc:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1bdde:	83 e0       	ldi	r24, 0x03	; 3
   1bde0:	97 e4       	ldi	r25, 0x47	; 71
   1bde2:	a0 e0       	ldi	r26, 0x00	; 0
   1bde4:	ed b7       	in	r30, 0x3d	; 61
   1bde6:	fe b7       	in	r31, 0x3e	; 62
   1bde8:	81 83       	std	Z+1, r24	; 0x01
   1bdea:	92 83       	std	Z+2, r25	; 0x02
   1bdec:	a3 83       	std	Z+3, r26	; 0x03
   1bdee:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1bdf2:	84 ee       	ldi	r24, 0xE4	; 228
   1bdf4:	96 e4       	ldi	r25, 0x46	; 70
   1bdf6:	a0 e0       	ldi	r26, 0x00	; 0
   1bdf8:	ed b7       	in	r30, 0x3d	; 61
   1bdfa:	fe b7       	in	r31, 0x3e	; 62
   1bdfc:	81 83       	std	Z+1, r24	; 0x01
   1bdfe:	92 83       	std	Z+2, r25	; 0x02
   1be00:	a3 83       	std	Z+3, r26	; 0x03
   1be02:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1be06:	87 ec       	ldi	r24, 0xC7	; 199
   1be08:	96 e4       	ldi	r25, 0x46	; 70
   1be0a:	a0 e0       	ldi	r26, 0x00	; 0
   1be0c:	ed b7       	in	r30, 0x3d	; 61
   1be0e:	fe b7       	in	r31, 0x3e	; 62
   1be10:	81 83       	std	Z+1, r24	; 0x01
   1be12:	92 83       	std	Z+2, r25	; 0x02
   1be14:	a3 83       	std	Z+3, r26	; 0x03
   1be16:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf(" GNU version 3\n");
   1be1a:	87 eb       	ldi	r24, 0xB7	; 183
   1be1c:	96 e4       	ldi	r25, 0x46	; 70
   1be1e:	a0 e0       	ldi	r26, 0x00	; 0
   1be20:	ed b7       	in	r30, 0x3d	; 61
   1be22:	fe b7       	in	r31, 0x3e	; 62
   1be24:	81 83       	std	Z+1, r24	; 0x01
   1be26:	92 83       	std	Z+2, r25	; 0x02
   1be28:	a3 83       	std	Z+3, r26	; 0x03
   1be2a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1be2e:	80 e9       	ldi	r24, 0x90	; 144
   1be30:	96 e4       	ldi	r25, 0x46	; 70
   1be32:	a0 e0       	ldi	r26, 0x00	; 0
   1be34:	ed b7       	in	r30, 0x3d	; 61
   1be36:	fe b7       	in	r31, 0x3e	; 62
   1be38:	81 83       	std	Z+1, r24	; 0x01
   1be3a:	92 83       	std	Z+2, r25	; 0x02
   1be3c:	a3 83       	std	Z+3, r26	; 0x03
   1be3e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1be42:	87 ed       	ldi	r24, 0xD7	; 215
   1be44:	96 e1       	ldi	r25, 0x16	; 22
   1be46:	ed b7       	in	r30, 0x3d	; 61
   1be48:	fe b7       	in	r31, 0x3e	; 62
   1be4a:	95 83       	std	Z+5, r25	; 0x05
   1be4c:	84 83       	std	Z+4, r24	; 0x04
   1be4e:	86 e7       	ldi	r24, 0x76	; 118
   1be50:	96 e4       	ldi	r25, 0x46	; 70
   1be52:	a0 e0       	ldi	r26, 0x00	; 0
   1be54:	81 83       	std	Z+1, r24	; 0x01
   1be56:	92 83       	std	Z+2, r25	; 0x02
   1be58:	a3 83       	std	Z+3, r26	; 0x03
   1be5a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1be5e:	8b ef       	ldi	r24, 0xFB	; 251
   1be60:	96 e1       	ldi	r25, 0x16	; 22
   1be62:	ed b7       	in	r30, 0x3d	; 61
   1be64:	fe b7       	in	r31, 0x3e	; 62
   1be66:	95 83       	std	Z+5, r25	; 0x05
   1be68:	84 83       	std	Z+4, r24	; 0x04
   1be6a:	8c e5       	ldi	r24, 0x5C	; 92
   1be6c:	96 e4       	ldi	r25, 0x46	; 70
   1be6e:	a0 e0       	ldi	r26, 0x00	; 0
   1be70:	81 83       	std	Z+1, r24	; 0x01
   1be72:	92 83       	std	Z+2, r25	; 0x02
   1be74:	a3 83       	std	Z+3, r26	; 0x03
   1be76:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("\n");
   1be7a:	8a e5       	ldi	r24, 0x5A	; 90
   1be7c:	96 e4       	ldi	r25, 0x46	; 70
   1be7e:	a0 e0       	ldi	r26, 0x00	; 0
   1be80:	ed b7       	in	r30, 0x3d	; 61
   1be82:	fe b7       	in	r31, 0x3e	; 62
   1be84:	81 83       	std	Z+1, r24	; 0x01
   1be86:	92 83       	std	Z+2, r25	; 0x02
   1be88:	a3 83       	std	Z+3, r26	; 0x03
   1be8a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
}
   1be8e:	0f 90       	pop	r0
   1be90:	0f 90       	pop	r0
   1be92:	0f 90       	pop	r0
   1be94:	0f 90       	pop	r0
   1be96:	0f 90       	pop	r0
   1be98:	08 95       	ret

0001be9a <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1be9a:	a1 e1       	ldi	r26, 0x11	; 17
   1be9c:	b0 e0       	ldi	r27, 0x00	; 0
   1be9e:	e2 e5       	ldi	r30, 0x52	; 82
   1bea0:	ff ed       	ldi	r31, 0xDF	; 223
   1bea2:	a3 c4       	rjmp	.+2374   	; 0x1c7ea <__prologue_saves__+0x18>
   1bea4:	ec 01       	movw	r28, r24
   1bea6:	7b 01       	movw	r14, r22
   1bea8:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1beaa:	60 e0       	ldi	r22, 0x00	; 0
   1beac:	70 e0       	ldi	r23, 0x00	; 0
   1beae:	0e 94 f5 39 	call	0x73ea	; 0x73ea <normalize>
    memset(buf,0,max);
   1beb2:	a8 01       	movw	r20, r16
   1beb4:	60 e0       	ldi	r22, 0x00	; 0
   1beb6:	70 e0       	ldi	r23, 0x00	; 0
   1beb8:	c7 01       	movw	r24, r14
   1beba:	0e 94 c4 e8 	call	0x1d188	; 0x1d188 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1bebe:	88 85       	ldd	r24, Y+8	; 0x08
   1bec0:	99 85       	ldd	r25, Y+9	; 0x09
   1bec2:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <tm_mon_to_ascii>
   1bec6:	28 81       	ld	r18, Y
   1bec8:	39 81       	ldd	r19, Y+1	; 0x01
   1beca:	ed b7       	in	r30, 0x3d	; 61
   1becc:	fe b7       	in	r31, 0x3e	; 62
   1bece:	31 8b       	std	Z+17, r19	; 0x11
   1bed0:	20 8b       	std	Z+16, r18	; 0x10
   1bed2:	2a 81       	ldd	r18, Y+2	; 0x02
   1bed4:	3b 81       	ldd	r19, Y+3	; 0x03
   1bed6:	37 87       	std	Z+15, r19	; 0x0f
   1bed8:	26 87       	std	Z+14, r18	; 0x0e
   1beda:	2c 81       	ldd	r18, Y+4	; 0x04
   1bedc:	3d 81       	ldd	r19, Y+5	; 0x05
   1bede:	35 87       	std	Z+13, r19	; 0x0d
   1bee0:	24 87       	std	Z+12, r18	; 0x0c
   1bee2:	2e 81       	ldd	r18, Y+6	; 0x06
   1bee4:	3f 81       	ldd	r19, Y+7	; 0x07
   1bee6:	33 87       	std	Z+11, r19	; 0x0b
   1bee8:	22 87       	std	Z+10, r18	; 0x0a
   1beea:	91 87       	std	Z+9, r25	; 0x09
   1beec:	80 87       	std	Z+8, r24	; 0x08
   1beee:	84 e4       	ldi	r24, 0x44	; 68
   1bef0:	96 e4       	ldi	r25, 0x46	; 70
   1bef2:	a0 e0       	ldi	r26, 0x00	; 0
   1bef4:	85 83       	std	Z+5, r24	; 0x05
   1bef6:	96 83       	std	Z+6, r25	; 0x06
   1bef8:	a7 83       	std	Z+7, r26	; 0x07
   1befa:	01 50       	subi	r16, 0x01	; 1
   1befc:	11 09       	sbc	r17, r1
   1befe:	14 83       	std	Z+4, r17	; 0x04
   1bf00:	03 83       	std	Z+3, r16	; 0x03
   1bf02:	f2 82       	std	Z+2, r15	; 0x02
   1bf04:	e1 82       	std	Z+1, r14	; 0x01
   1bf06:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1bf0a:	c7 01       	movw	r24, r14
   1bf0c:	cd b7       	in	r28, 0x3d	; 61
   1bf0e:	de b7       	in	r29, 0x3e	; 62
   1bf10:	61 96       	adiw	r28, 0x11	; 17
   1bf12:	e6 e0       	ldi	r30, 0x06	; 6
   1bf14:	86 c4       	rjmp	.+2316   	; 0x1c822 <__epilogue_restores__+0x18>

0001bf16 <setup_lcd>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C task structure 
/// Passes the structures to the interrupt handler
void setup_lcd()
{
   1bf16:	cf 93       	push	r28
   1bf18:	ad b7       	in	r26, 0x3d	; 61
   1bf1a:	be b7       	in	r27, 0x3e	; 62
   1bf1c:	17 97       	sbiw	r26, 0x07	; 7
   1bf1e:	0f b6       	in	r0, 0x3f	; 63
   1bf20:	f8 94       	cli
   1bf22:	be bf       	out	0x3e, r27	; 62
   1bf24:	0f be       	out	0x3f, r0	; 63
   1bf26:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1bf28:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1bf2a:	86 e2       	ldi	r24, 0x26	; 38
   1bf2c:	96 e4       	ldi	r25, 0x46	; 70
   1bf2e:	a0 e0       	ldi	r26, 0x00	; 0
   1bf30:	ed b7       	in	r30, 0x3d	; 61
   1bf32:	fe b7       	in	r31, 0x3e	; 62
   1bf34:	81 83       	std	Z+1, r24	; 0x01
   1bf36:	92 83       	std	Z+2, r25	; 0x02
   1bf38:	a3 83       	std	Z+3, r26	; 0x03
   1bf3a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1bf3e:	61 e0       	ldi	r22, 0x01	; 1
   1bf40:	70 e0       	ldi	r23, 0x00	; 0
   1bf42:	82 ee       	ldi	r24, 0xE2	; 226
   1bf44:	9e ed       	ldi	r25, 0xDE	; 222
   1bf46:	0e 94 04 36 	call	0x6c08	; 0x6c08 <set_timers>
   1bf4a:	01 96       	adiw	r24, 0x01	; 1
   1bf4c:	51 f4       	brne	.+20     	; 0x1bf62 <setup_lcd+0x4c>
        printf("lcd_task init failed\n");
   1bf4e:	80 e1       	ldi	r24, 0x10	; 16
   1bf50:	96 e4       	ldi	r25, 0x46	; 70
   1bf52:	a0 e0       	ldi	r26, 0x00	; 0
   1bf54:	ed b7       	in	r30, 0x3d	; 61
   1bf56:	fe b7       	in	r31, 0x3e	; 62
   1bf58:	81 83       	std	Z+1, r24	; 0x01
   1bf5a:	92 83       	std	Z+2, r25	; 0x02
   1bf5c:	a3 83       	std	Z+3, r26	; 0x03
   1bf5e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

	i2c_init(100000);
   1bf62:	60 ea       	ldi	r22, 0xA0	; 160
   1bf64:	76 e8       	ldi	r23, 0x86	; 134
   1bf66:	81 e0       	ldi	r24, 0x01	; 1
   1bf68:	90 e0       	ldi	r25, 0x00	; 0
   1bf6a:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <i2c_init>

	cli();
   1bf6e:	f8 94       	cli

	i2c_task_init();
   1bf70:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <i2c_task_init>

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1bf74:	8f e1       	ldi	r24, 0x1F	; 31
   1bf76:	97 e1       	ldi	r25, 0x17	; 23
   1bf78:	ed b7       	in	r30, 0x3d	; 61
   1bf7a:	fe b7       	in	r31, 0x3e	; 62
   1bf7c:	97 83       	std	Z+7, r25	; 0x07
   1bf7e:	86 83       	std	Z+6, r24	; 0x06
   1bf80:	8a e0       	ldi	r24, 0x0A	; 10
   1bf82:	96 e4       	ldi	r25, 0x46	; 70
   1bf84:	a0 e0       	ldi	r26, 0x00	; 0
   1bf86:	83 83       	std	Z+3, r24	; 0x03
   1bf88:	94 83       	std	Z+4, r25	; 0x04
   1bf8a:	a5 83       	std	Z+5, r26	; 0x05
   1bf8c:	87 e0       	ldi	r24, 0x07	; 7
   1bf8e:	93 e0       	ldi	r25, 0x03	; 3
   1bf90:	92 83       	std	Z+2, r25	; 0x02
   1bf92:	81 83       	std	Z+1, r24	; 0x01
   1bf94:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bf98:	8b e2       	ldi	r24, 0x2B	; 43
   1bf9a:	97 e1       	ldi	r25, 0x17	; 23
   1bf9c:	ed b7       	in	r30, 0x3d	; 61
   1bf9e:	fe b7       	in	r31, 0x3e	; 62
   1bfa0:	97 83       	std	Z+7, r25	; 0x07
   1bfa2:	86 83       	std	Z+6, r24	; 0x06
   1bfa4:	84 e0       	ldi	r24, 0x04	; 4
   1bfa6:	96 e4       	ldi	r25, 0x46	; 70
   1bfa8:	a0 e0       	ldi	r26, 0x00	; 0
   1bfaa:	83 83       	std	Z+3, r24	; 0x03
   1bfac:	94 83       	std	Z+4, r25	; 0x04
   1bfae:	a5 83       	std	Z+5, r26	; 0x05
   1bfb0:	80 ef       	ldi	r24, 0xF0	; 240
   1bfb2:	92 e0       	ldi	r25, 0x02	; 2
   1bfb4:	92 83       	std	Z+2, r25	; 0x02
   1bfb6:	81 83       	std	Z+1, r24	; 0x01
   1bfb8:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, 2);
   1bfbc:	22 e0       	ldi	r18, 0x02	; 2
   1bfbe:	4c e1       	ldi	r20, 0x1C	; 28
   1bfc0:	53 e0       	ldi	r21, 0x03	; 3
   1bfc2:	60 e0       	ldi	r22, 0x00	; 0
   1bfc4:	82 e7       	ldi	r24, 0x72	; 114
   1bfc6:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <i2c_task_op_add>
   1bfca:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <i2c_task_op+0x1>
   1bfce:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1bfd2:	20 e1       	ldi	r18, 0x10	; 16
   1bfd4:	47 e0       	ldi	r20, 0x07	; 7
   1bfd6:	53 e0       	ldi	r21, 0x03	; 3
   1bfd8:	60 e0       	ldi	r22, 0x00	; 0
   1bfda:	82 e7       	ldi	r24, 0x72	; 114
   1bfdc:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <i2c_task_op_add>
   1bfe0:	90 93 67 17 	sts	0x1767, r25	; 0x801767 <i2c_task_op+0x3>
   1bfe4:	80 93 66 17 	sts	0x1766, r24	; 0x801766 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, 2);
   1bfe8:	22 e0       	ldi	r18, 0x02	; 2
   1bfea:	45 e0       	ldi	r20, 0x05	; 5
   1bfec:	53 e0       	ldi	r21, 0x03	; 3
   1bfee:	60 e0       	ldi	r22, 0x00	; 0
   1bff0:	82 e7       	ldi	r24, 0x72	; 114
   1bff2:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <i2c_task_op_add>
   1bff6:	90 93 69 17 	sts	0x1769, r25	; 0x801769 <i2c_task_op+0x5>
   1bffa:	80 93 68 17 	sts	0x1768, r24	; 0x801768 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1bffe:	20 e1       	ldi	r18, 0x10	; 16
   1c000:	40 ef       	ldi	r20, 0xF0	; 240
   1c002:	52 e0       	ldi	r21, 0x02	; 2
   1c004:	60 e0       	ldi	r22, 0x00	; 0
   1c006:	82 e7       	ldi	r24, 0x72	; 114
   1c008:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <i2c_task_op_add>
   1c00c:	90 93 6b 17 	sts	0x176B, r25	; 0x80176b <i2c_task_op+0x7>
   1c010:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <i2c_task_op+0x6>

	SREG = sreg;
   1c014:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c016:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <i2c_task_run>
    delayms(1000);
   1c01a:	68 ee       	ldi	r22, 0xE8	; 232
   1c01c:	73 e0       	ldi	r23, 0x03	; 3
   1c01e:	80 e0       	ldi	r24, 0x00	; 0
   1c020:	90 e0       	ldi	r25, 0x00	; 0
   1c022:	0e 94 b1 29 	call	0x5362	; 0x5362 <delayms>
	
    if(!i2c_task_done())
   1c026:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <i2c_task_done>
   1c02a:	81 11       	cpse	r24, r1
   1c02c:	0c c0       	rjmp	.+24     	; 0x1c046 <setup_lcd+0x130>
	{
		i2c_display_task_errors();
   1c02e:	0e 94 71 30 	call	0x60e2	; 0x60e2 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c032:	8a ee       	ldi	r24, 0xEA	; 234
   1c034:	95 e4       	ldi	r25, 0x45	; 69
   1c036:	a0 e0       	ldi	r26, 0x00	; 0
   1c038:	ed b7       	in	r30, 0x3d	; 61
   1c03a:	fe b7       	in	r31, 0x3e	; 62
   1c03c:	81 83       	std	Z+1, r24	; 0x01
   1c03e:	92 83       	std	Z+2, r25	; 0x02
   1c040:	a3 83       	std	Z+3, r26	; 0x03
   1c042:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
	}

    sep();
   1c046:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>
}
   1c04a:	ad b7       	in	r26, 0x3d	; 61
   1c04c:	be b7       	in	r27, 0x3e	; 62
   1c04e:	17 96       	adiw	r26, 0x07	; 7
   1c050:	0f b6       	in	r0, 0x3f	; 63
   1c052:	f8 94       	cli
   1c054:	be bf       	out	0x3e, r27	; 62
   1c056:	0f be       	out	0x3f, r0	; 63
   1c058:	ad bf       	out	0x3d, r26	; 61
   1c05a:	cf 91       	pop	r28
   1c05c:	08 95       	ret

0001c05e <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c05e:	af e2       	ldi	r26, 0x2F	; 47
   1c060:	b0 e0       	ldi	r27, 0x00	; 0
   1c062:	e4 e3       	ldi	r30, 0x34	; 52
   1c064:	f0 ee       	ldi	r31, 0xE0	; 224
   1c066:	c4 c3       	rjmp	.+1928   	; 0x1c7f0 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c068:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c06a:	f8 94       	cli
	if(!mmc_ins_status())
   1c06c:	0e 94 b7 70 	call	0xe16e	; 0xe16e <mmc_ins_status>
   1c070:	89 2b       	or	r24, r25
   1c072:	49 f4       	brne	.+18     	; 0x1c086 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c074:	88 e3       	ldi	r24, 0x38	; 56
   1c076:	97 e1       	ldi	r25, 0x17	; 23
   1c078:	ed b7       	in	r30, 0x3d	; 61
   1c07a:	fe b7       	in	r31, 0x3e	; 62
   1c07c:	97 83       	std	Z+7, r25	; 0x07
   1c07e:	86 83       	std	Z+6, r24	; 0x06
   1c080:	84 ee       	ldi	r24, 0xE4	; 228
   1c082:	95 e4       	ldi	r25, 0x45	; 69
   1c084:	17 c0       	rjmp	.+46     	; 0x1c0b4 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c086:	be 01       	movw	r22, r28
   1c088:	68 5d       	subi	r22, 0xD8	; 216
   1c08a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c08c:	80 e0       	ldi	r24, 0x00	; 0
   1c08e:	90 e0       	ldi	r25, 0x00	; 0
   1c090:	0e 94 14 35 	call	0x6a28	; 0x6a28 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c094:	ce 01       	movw	r24, r28
   1c096:	88 96       	adiw	r24, 0x28	; 40
   1c098:	0e 94 fe 38 	call	0x71fc	; 0x71fc <gmtime>
   1c09c:	4f e1       	ldi	r20, 0x1F	; 31
   1c09e:	50 e0       	ldi	r21, 0x00	; 0
   1c0a0:	be 01       	movw	r22, r28
   1c0a2:	68 5f       	subi	r22, 0xF8	; 248
   1c0a4:	7f 4f       	sbci	r23, 0xFF	; 255
   1c0a6:	f9 de       	rcall	.-526    	; 0x1be9a <lcd_time>
   1c0a8:	ed b7       	in	r30, 0x3d	; 61
   1c0aa:	fe b7       	in	r31, 0x3e	; 62
   1c0ac:	97 83       	std	Z+7, r25	; 0x07
   1c0ae:	86 83       	std	Z+6, r24	; 0x06
   1c0b0:	8e ed       	ldi	r24, 0xDE	; 222
   1c0b2:	95 e4       	ldi	r25, 0x45	; 69
   1c0b4:	a0 e0       	ldi	r26, 0x00	; 0
   1c0b6:	83 83       	std	Z+3, r24	; 0x03
   1c0b8:	94 83       	std	Z+4, r25	; 0x04
   1c0ba:	a5 83       	std	Z+5, r26	; 0x05
   1c0bc:	80 ef       	ldi	r24, 0xF0	; 240
   1c0be:	92 e0       	ldi	r25, 0x02	; 2
   1c0c0:	92 83       	std	Z+2, r25	; 0x02
   1c0c2:	81 83       	std	Z+1, r24	; 0x01
   1c0c4:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c0c8:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c0ca:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <i2c_task_run>
}
   1c0ce:	af 96       	adiw	r28, 0x2f	; 47
   1c0d0:	e3 e0       	ldi	r30, 0x03	; 3
   1c0d2:	aa c3       	rjmp	.+1876   	; 0x1c828 <__epilogue_restores__+0x1e>

0001c0d4 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c0d4:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c0d6:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c0d8:	20 91 f7 19 	lds	r18, 0x19F7	; 0x8019f7 <lcd_display_time>
   1c0dc:	30 91 f8 19 	lds	r19, 0x19F8	; 0x8019f8 <lcd_display_time+0x1>
   1c0e0:	25 36       	cpi	r18, 0x65	; 101
   1c0e2:	31 05       	cpc	r19, r1
   1c0e4:	3c f0       	brlt	.+14     	; 0x1c0f4 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c0e6:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <lcd_display_time+0x1>
   1c0ea:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <lcd_display_time>
		SREG = sreg;
		i2c_lcd_task();
   1c0ee:	8f bf       	out	0x3f, r24	; 63
		return;
   1c0f0:	b6 cf       	rjmp	.-148    	; 0x1c05e <i2c_lcd_task>
	}
	SREG = sreg;
   1c0f2:	08 95       	ret
   1c0f4:	8f bf       	out	0x3f, r24	; 63
   1c0f6:	08 95       	ret

0001c0f8 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c0f8:	00 d0       	rcall	.+0      	; 0x1c0fa <help+0x2>

    copyright();
   1c0fa:	1f 92       	push	r1

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c0fc:	6d de       	rcall	.-806    	; 0x1bdd8 <copyright>
   1c0fe:	80 e0       	ldi	r24, 0x00	; 0
   1c100:	90 e0       	ldi	r25, 0x00	; 0
   1c102:	0e 94 bc 74 	call	0xe978	; 0xe978 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c106:	80 e0       	ldi	r24, 0x00	; 0
   1c108:	90 e0       	ldi	r25, 0x00	; 0
   1c10a:	0e 94 09 80 	call	0x10012	; 0x10012 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c10e:	80 e0       	ldi	r24, 0x00	; 0
   1c110:	90 e0       	ldi	r25, 0x00	; 0
   1c112:	0e 94 a5 bf 	call	0x17f4a	; 0x17f4a <lif_help>
#endif

    gpib_help(0);
   1c116:	80 e0       	ldi	r24, 0x00	; 0
   1c118:	90 e0       	ldi	r25, 0x00	; 0
   1c11a:	0e 94 5e 93 	call	0x126bc	; 0x126bc <gpib_help>

    printf(
   1c11e:	8c eb       	ldi	r24, 0xBC	; 188
   1c120:	95 e4       	ldi	r25, 0x45	; 69
   1c122:	a0 e0       	ldi	r26, 0x00	; 0
   1c124:	ed b7       	in	r30, 0x3d	; 61
   1c126:	fe b7       	in	r31, 0x3e	; 62
   1c128:	81 83       	std	Z+1, r24	; 0x01
   1c12a:	92 83       	std	Z+2, r25	; 0x02
   1c12c:	a3 83       	std	Z+3, r26	; 0x03
   1c12e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
        "setdate\n"
        "time\n"
        "reset\n"
        "\n"
        );
}
   1c132:	0f 90       	pop	r0
   1c134:	0f 90       	pop	r0
   1c136:	0f 90       	pop	r0
   1c138:	08 95       	ret

0001c13a <user_task.part.0>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c13a:	a9 e6       	ldi	r26, 0x69	; 105
   1c13c:	b1 e0       	ldi	r27, 0x01	; 1
   1c13e:	e2 ea       	ldi	r30, 0xA2	; 162
   1c140:	f0 ee       	ldi	r31, 0xE0	; 224
   1c142:	51 c3       	rjmp	.+1698   	; 0x1c7e6 <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c144:	89 eb       	ldi	r24, 0xB9	; 185
   1c146:	95 e4       	ldi	r25, 0x45	; 69
   1c148:	a0 e0       	ldi	r26, 0x00	; 0
   1c14a:	ed b7       	in	r30, 0x3d	; 61
   1c14c:	fe b7       	in	r31, 0x3e	; 62
   1c14e:	81 83       	std	Z+1, r24	; 0x01
   1c150:	92 83       	std	Z+2, r25	; 0x02
   1c152:	a3 83       	std	Z+3, r26	; 0x03
   1c154:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    fgets(line,sizeof(line)-2,stdin);
   1c158:	40 91 cb 1c 	lds	r20, 0x1CCB	; 0x801ccb <__iob>
   1c15c:	50 91 cc 1c 	lds	r21, 0x1CCC	; 0x801ccc <__iob+0x1>
   1c160:	6e ef       	ldi	r22, 0xFE	; 254
   1c162:	70 e0       	ldi	r23, 0x00	; 0
   1c164:	ce 01       	movw	r24, r28
   1c166:	06 96       	adiw	r24, 0x06	; 6
   1c168:	6c 01       	movw	r12, r24
   1c16a:	0e 94 f5 77 	call	0xefea	; 0xefea <fgets>
    trim_tail(line);
   1c16e:	c6 01       	movw	r24, r12
   1c170:	0e 94 75 33 	call	0x66ea	; 0x66ea <trim_tail>
    argc = split_args(line,argv,50);
   1c174:	42 e3       	ldi	r20, 0x32	; 50
   1c176:	50 e0       	ldi	r21, 0x00	; 0
   1c178:	be 01       	movw	r22, r28
   1c17a:	6a 5f       	subi	r22, 0xFA	; 250
   1c17c:	7e 4f       	sbci	r23, 0xFE	; 254
   1c17e:	c6 01       	movw	r24, r12
   1c180:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <split_args>
   1c184:	7c 01       	movw	r14, r24
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1c186:	ca 5f       	subi	r28, 0xFA	; 250
   1c188:	de 4f       	sbci	r29, 0xFE	; 254
   1c18a:	08 81       	ld	r16, Y
   1c18c:	19 81       	ldd	r17, Y+1	; 0x01
   1c18e:	c6 50       	subi	r28, 0x06	; 6
   1c190:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c192:	01 15       	cp	r16, r1
   1c194:	11 05       	cpc	r17, r1
   1c196:	09 f4       	brne	.+2      	; 0x1c19a <user_task.part.0+0x60>
   1c198:	6d c0       	rjmp	.+218    	; 0x1c274 <user_task.part.0+0x13a>
   1c19a:	18 16       	cp	r1, r24
   1c19c:	19 06       	cpc	r1, r25
   1c19e:	0c f0       	brlt	.+2      	; 0x1c1a2 <user_task.part.0+0x68>
   1c1a0:	69 c0       	rjmp	.+210    	; 0x1c274 <user_task.part.0+0x13a>
        delay_tests();
        result = 1;

    }
#endif
    else if ( MATCHI(ptr,"time") )
   1c1a2:	66 e4       	ldi	r22, 0x46	; 70
   1c1a4:	77 e1       	ldi	r23, 0x17	; 23
   1c1a6:	c8 01       	movw	r24, r16
   1c1a8:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   1c1ac:	89 2b       	or	r24, r25
   1c1ae:	19 f5       	brne	.+70     	; 0x1c1f6 <user_task.part.0+0xbc>
    {
        display_clock();
        result = 1;
    }
#ifdef LCD_SUPPORT
    else if ( MATCHI(ptr,"lcd") )
   1c1b0:	6b e4       	ldi	r22, 0x4B	; 75
   1c1b2:	77 e1       	ldi	r23, 0x17	; 23
   1c1b4:	c8 01       	movw	r24, r16
   1c1b6:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   1c1ba:	89 2b       	or	r24, r25
    {
		i2c_lcd_task();
   1c1bc:	11 f0       	breq	.+4      	; 0x1c1c2 <user_task.part.0+0x88>
   1c1be:	4f df       	rcall	.-354    	; 0x1c05e <i2c_lcd_task>
   1c1c0:	59 c0       	rjmp	.+178    	; 0x1c274 <user_task.part.0+0x13a>
        result = 1;
    }
#endif
    else if ( MATCHI(ptr,"reset") )
   1c1c2:	62 ed       	ldi	r22, 0xD2	; 210
   1c1c4:	7d e0       	ldi	r23, 0x0D	; 13
   1c1c6:	c8 01       	movw	r24, r16
   1c1c8:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   1c1cc:	89 2b       	or	r24, r25
   1c1ce:	51 f0       	breq	.+20     	; 0x1c1e4 <user_task.part.0+0xaa>
    {
        cli();
   1c1d0:	f8 94       	cli
        uart_rx_flush(0);
   1c1d2:	80 e0       	ldi	r24, 0x00	; 0
   1c1d4:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <uart_rx_flush>
        cli();
   1c1d8:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c1da:	82 e0       	ldi	r24, 0x02	; 2
   1c1dc:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c1de:	e0 e0       	ldi	r30, 0x00	; 0
   1c1e0:	fc ef       	ldi	r31, 0xFC	; 252
   1c1e2:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c1e4:	6f e4       	ldi	r22, 0x4F	; 79
   1c1e6:	77 e1       	ldi	r23, 0x17	; 23
   1c1e8:	c8 01       	movw	r24, r16
   1c1ea:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   1c1ee:	89 2b       	or	r24, r25
   1c1f0:	29 f0       	breq	.+10     	; 0x1c1fc <user_task.part.0+0xc2>
    {
        setdate();
   1c1f2:	0e 94 de 3c 	call	0x79bc	; 0x79bc <setdate>
        display_clock();
   1c1f6:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <display_clock>
   1c1fa:	3c c0       	rjmp	.+120    	; 0x1c274 <user_task.part.0+0x13a>
        result = 1;
    }
    else if ( MATCH(ptr,"mem") )
   1c1fc:	67 e5       	ldi	r22, 0x57	; 87
   1c1fe:	77 e1       	ldi	r23, 0x17	; 23
   1c200:	c8 01       	movw	r24, r16
   1c202:	0e 94 8f 33 	call	0x671e	; 0x671e <MATCH>
   1c206:	89 2b       	or	r24, r25
   1c208:	19 f0       	breq	.+6      	; 0x1c210 <user_task.part.0+0xd6>
    {
        PrintFree();
   1c20a:	0e 94 72 28 	call	0x50e4	; 0x50e4 <PrintFree>
   1c20e:	32 c0       	rjmp	.+100    	; 0x1c274 <user_task.part.0+0x13a>
        result = 1;

    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c210:	65 e9       	ldi	r22, 0x95	; 149
   1c212:	76 e1       	ldi	r23, 0x16	; 22
   1c214:	c8 01       	movw	r24, r16
   1c216:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   1c21a:	89 2b       	or	r24, r25
    {
        help();
   1c21c:	11 f0       	breq	.+4      	; 0x1c222 <user_task.part.0+0xe8>
   1c21e:	6c df       	rcall	.-296    	; 0x1c0f8 <help>
   1c220:	29 c0       	rjmp	.+82     	; 0x1c274 <user_task.part.0+0x13a>
    {
        PrintFree();
        result = 1;

    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c222:	6b e9       	ldi	r22, 0x9B	; 155
   1c224:	76 e1       	ldi	r23, 0x16	; 22
   1c226:	c8 01       	movw	r24, r16
   1c228:	0e 94 a3 33 	call	0x6746	; 0x6746 <MATCHI>
   1c22c:	89 2b       	or	r24, r25
   1c22e:	b9 f7       	brne	.-18     	; 0x1c21e <user_task.part.0+0xe4>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1c230:	be 01       	movw	r22, r28
   1c232:	6a 5f       	subi	r22, 0xFA	; 250
   1c234:	7e 4f       	sbci	r23, 0xFE	; 254
   1c236:	c7 01       	movw	r24, r14
   1c238:	0e 94 7f 93 	call	0x126fe	; 0x126fe <gpib_tests>
   1c23c:	89 2b       	or	r24, r25
   1c23e:	19 f0       	breq	.+6      	; 0x1c246 <user_task.part.0+0x10c>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1c240:	0e 94 93 8e 	call	0x11d26	; 0x11d26 <gpib_init_devices>
   1c244:	17 c0       	rjmp	.+46     	; 0x1c274 <user_task.part.0+0x13a>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1c246:	be 01       	movw	r22, r28
   1c248:	6a 5f       	subi	r22, 0xFA	; 250
   1c24a:	7e 4f       	sbci	r23, 0xFE	; 254
   1c24c:	c7 01       	movw	r24, r14
   1c24e:	0e 94 7b 83 	call	0x106f6	; 0x106f6 <posix_tests>
   1c252:	89 2b       	or	r24, r25
   1c254:	79 f4       	brne	.+30     	; 0x1c274 <user_task.part.0+0x13a>
        result = 1;
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1c256:	be 01       	movw	r22, r28
   1c258:	6a 5f       	subi	r22, 0xFA	; 250
   1c25a:	7e 4f       	sbci	r23, 0xFE	; 254
   1c25c:	c7 01       	movw	r24, r14
   1c25e:	0e 94 d6 75 	call	0xebac	; 0xebac <fatfs_tests>
   1c262:	89 2b       	or	r24, r25
   1c264:	39 f4       	brne	.+14     	; 0x1c274 <user_task.part.0+0x13a>
        result = 1;
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1c266:	be 01       	movw	r22, r28
   1c268:	6a 5f       	subi	r22, 0xFA	; 250
   1c26a:	7e 4f       	sbci	r23, 0xFE	; 254
   1c26c:	c7 01       	movw	r24, r14
   1c26e:	70 dc       	rcall	.-1824   	; 0x1bb50 <lif_tests>
   1c270:	89 2b       	or	r24, r25
   1c272:	59 f0       	breq	.+22     	; 0x1c28a <user_task.part.0+0x150>
        result = 1;
#endif
    if(result)
        printf("OK\n");
   1c274:	85 eb       	ldi	r24, 0xB5	; 181
   1c276:	95 e4       	ldi	r25, 0x45	; 69
   1c278:	a0 e0       	ldi	r26, 0x00	; 0
   1c27a:	ed b7       	in	r30, 0x3d	; 61
   1c27c:	fe b7       	in	r31, 0x3e	; 62
   1c27e:	81 83       	std	Z+1, r24	; 0x01
   1c280:	92 83       	std	Z+2, r25	; 0x02
   1c282:	a3 83       	std	Z+3, r26	; 0x03
   1c284:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
   1c288:	0c c0       	rjmp	.+24     	; 0x1c2a2 <user_task.part.0+0x168>
    else
        printf("Error:[%s]\n",line);
   1c28a:	ed b7       	in	r30, 0x3d	; 61
   1c28c:	fe b7       	in	r31, 0x3e	; 62
   1c28e:	d5 82       	std	Z+5, r13	; 0x05
   1c290:	c4 82       	std	Z+4, r12	; 0x04
   1c292:	89 ea       	ldi	r24, 0xA9	; 169
   1c294:	95 e4       	ldi	r25, 0x45	; 69
   1c296:	a0 e0       	ldi	r26, 0x00	; 0
   1c298:	81 83       	std	Z+1, r24	; 0x01
   1c29a:	92 83       	std	Z+2, r25	; 0x02
   1c29c:	a3 83       	std	Z+3, r26	; 0x03
   1c29e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
}
   1c2a2:	c7 59       	subi	r28, 0x97	; 151
   1c2a4:	de 4f       	sbci	r29, 0xFE	; 254
   1c2a6:	e8 e0       	ldi	r30, 0x08	; 8
   1c2a8:	ba c2       	rjmp	.+1396   	; 0x1c81e <__epilogue_restores__+0x14>

0001c2aa <user_task>:
    int result = 0;
    char *argv[50];
    char line[256];


    if(gpib)
   1c2aa:	81 11       	cpse	r24, r1
        gpib_task();
   1c2ac:	0e 94 fe 92 	call	0x125fc	; 0x125fc <gpib_task>

    if(!kbhit(0))
   1c2b0:	80 e0       	ldi	r24, 0x00	; 0
   1c2b2:	0e 94 38 2b 	call	0x5670	; 0x5670 <uart_rx_count>
   1c2b6:	89 2b       	or	r24, r25
   1c2b8:	09 f0       	breq	.+2      	; 0x1c2bc <user_task+0x12>
   1c2ba:	3f cf       	rjmp	.-386    	; 0x1c13a <user_task.part.0>
   1c2bc:	08 95       	ret

0001c2be <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c2be:	a3 e3       	ldi	r26, 0x33	; 51
   1c2c0:	b0 e0       	ldi	r27, 0x00	; 0
   1c2c2:	e4 e6       	ldi	r30, 0x64	; 100
   1c2c4:	f1 ee       	ldi	r31, 0xE1	; 225
   1c2c6:	8f c2       	rjmp	.+1310   	; 0x1c7e6 <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1c2c8:	0e 94 56 28 	call	0x50ac	; 0x50ac <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c2cc:	46 98       	cbi	0x08, 6	; 8
   1c2ce:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c2d0:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c2d4:	40 e0       	ldi	r20, 0x00	; 0
   1c2d6:	52 ec       	ldi	r21, 0xC2	; 194
   1c2d8:	61 e0       	ldi	r22, 0x01	; 1
   1c2da:	70 e0       	ldi	r23, 0x00	; 0
   1c2dc:	80 e0       	ldi	r24, 0x00	; 0
   1c2de:	0e 94 a4 2a 	call	0x5548	; 0x5548 <uart_init>
   1c2e2:	6b 01       	movw	r12, r22
   1c2e4:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c2e6:	68 ec       	ldi	r22, 0xC8	; 200
   1c2e8:	70 e0       	ldi	r23, 0x00	; 0
   1c2ea:	80 e0       	ldi	r24, 0x00	; 0
   1c2ec:	90 e0       	ldi	r25, 0x00	; 0
   1c2ee:	0e 94 b1 29 	call	0x5362	; 0x5362 <delayms>

    sep();
   1c2f2:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>
    printf("Start\n");
   1c2f6:	82 ea       	ldi	r24, 0xA2	; 162
   1c2f8:	95 e4       	ldi	r25, 0x45	; 69
   1c2fa:	a0 e0       	ldi	r26, 0x00	; 0
   1c2fc:	ed b7       	in	r30, 0x3d	; 61
   1c2fe:	fe b7       	in	r31, 0x3e	; 62
   1c300:	81 83       	std	Z+1, r24	; 0x01
   1c302:	92 83       	std	Z+2, r25	; 0x02
   1c304:	a3 83       	std	Z+3, r26	; 0x03
   1c306:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c30a:	80 e0       	ldi	r24, 0x00	; 0
   1c30c:	9d e2       	ldi	r25, 0x2D	; 45
   1c30e:	a1 e3       	ldi	r26, 0x31	; 49
   1c310:	b1 e0       	ldi	r27, 0x01	; 1
   1c312:	ed b7       	in	r30, 0x3d	; 61
   1c314:	fe b7       	in	r31, 0x3e	; 62
   1c316:	84 83       	std	Z+4, r24	; 0x04
   1c318:	95 83       	std	Z+5, r25	; 0x05
   1c31a:	a6 83       	std	Z+6, r26	; 0x06
   1c31c:	b7 83       	std	Z+7, r27	; 0x07
   1c31e:	81 e9       	ldi	r24, 0x91	; 145
   1c320:	95 e4       	ldi	r25, 0x45	; 69
   1c322:	a0 e0       	ldi	r26, 0x00	; 0
   1c324:	81 83       	std	Z+1, r24	; 0x01
   1c326:	92 83       	std	Z+2, r25	; 0x02
   1c328:	a3 83       	std	Z+3, r26	; 0x03
   1c32a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c32e:	ed b7       	in	r30, 0x3d	; 61
   1c330:	fe b7       	in	r31, 0x3e	; 62
   1c332:	c0 86       	std	Z+8, r12	; 0x08
   1c334:	d1 86       	std	Z+9, r13	; 0x09
   1c336:	e2 86       	std	Z+10, r14	; 0x0a
   1c338:	f3 86       	std	Z+11, r15	; 0x0b
   1c33a:	80 e0       	ldi	r24, 0x00	; 0
   1c33c:	92 ec       	ldi	r25, 0xC2	; 194
   1c33e:	a1 e0       	ldi	r26, 0x01	; 1
   1c340:	b0 e0       	ldi	r27, 0x00	; 0
   1c342:	84 83       	std	Z+4, r24	; 0x04
   1c344:	95 83       	std	Z+5, r25	; 0x05
   1c346:	a6 83       	std	Z+6, r26	; 0x06
   1c348:	b7 83       	std	Z+7, r27	; 0x07
   1c34a:	8a e6       	ldi	r24, 0x6A	; 106
   1c34c:	95 e4       	ldi	r25, 0x45	; 69
   1c34e:	a0 e0       	ldi	r26, 0x00	; 0
   1c350:	81 83       	std	Z+1, r24	; 0x01
   1c352:	92 83       	std	Z+2, r25	; 0x02
   1c354:	a3 83       	std	Z+3, r26	; 0x03
   1c356:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    init_timers();
   1c35a:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <init_timers>

    sep();
   1c35e:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c362:	8b e4       	ldi	r24, 0x4B	; 75
   1c364:	95 e4       	ldi	r25, 0x45	; 69
   1c366:	a0 e0       	ldi	r26, 0x00	; 0
   1c368:	ed b7       	in	r30, 0x3d	; 61
   1c36a:	fe b7       	in	r31, 0x3e	; 62
   1c36c:	81 83       	std	Z+1, r24	; 0x01
   1c36e:	92 83       	std	Z+2, r25	; 0x02
   1c370:	a3 83       	std	Z+3, r26	; 0x03
   1c372:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c376:	8e e2       	ldi	r24, 0x2E	; 46
   1c378:	95 e4       	ldi	r25, 0x45	; 69
   1c37a:	a0 e0       	ldi	r26, 0x00	; 0
   1c37c:	ed b7       	in	r30, 0x3d	; 61
   1c37e:	fe b7       	in	r31, 0x3e	; 62
   1c380:	81 83       	std	Z+1, r24	; 0x01
   1c382:	92 83       	std	Z+2, r25	; 0x02
   1c384:	a3 83       	std	Z+3, r26	; 0x03
   1c386:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf(" GNU version 3\n");
   1c38a:	8e e1       	ldi	r24, 0x1E	; 30
   1c38c:	95 e4       	ldi	r25, 0x45	; 69
   1c38e:	a0 e0       	ldi	r26, 0x00	; 0
   1c390:	ed b7       	in	r30, 0x3d	; 61
   1c392:	fe b7       	in	r31, 0x3e	; 62
   1c394:	81 83       	std	Z+1, r24	; 0x01
   1c396:	92 83       	std	Z+2, r25	; 0x02
   1c398:	a3 83       	std	Z+3, r26	; 0x03
   1c39a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c39e:	87 ef       	ldi	r24, 0xF7	; 247
   1c3a0:	94 e4       	ldi	r25, 0x44	; 68
   1c3a2:	a0 e0       	ldi	r26, 0x00	; 0
   1c3a4:	ed b7       	in	r30, 0x3d	; 61
   1c3a6:	fe b7       	in	r31, 0x3e	; 62
   1c3a8:	81 83       	std	Z+1, r24	; 0x01
   1c3aa:	92 83       	std	Z+2, r25	; 0x02
   1c3ac:	a3 83       	std	Z+3, r26	; 0x03
   1c3ae:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c3b2:	87 ed       	ldi	r24, 0xD7	; 215
   1c3b4:	96 e1       	ldi	r25, 0x16	; 22
   1c3b6:	ed b7       	in	r30, 0x3d	; 61
   1c3b8:	fe b7       	in	r31, 0x3e	; 62
   1c3ba:	95 83       	std	Z+5, r25	; 0x05
   1c3bc:	84 83       	std	Z+4, r24	; 0x04
   1c3be:	8d ed       	ldi	r24, 0xDD	; 221
   1c3c0:	94 e4       	ldi	r25, 0x44	; 68
   1c3c2:	a0 e0       	ldi	r26, 0x00	; 0
   1c3c4:	81 83       	std	Z+1, r24	; 0x01
   1c3c6:	92 83       	std	Z+2, r25	; 0x02
   1c3c8:	a3 83       	std	Z+3, r26	; 0x03
   1c3ca:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c3ce:	8b ef       	ldi	r24, 0xFB	; 251
   1c3d0:	96 e1       	ldi	r25, 0x16	; 22
   1c3d2:	ed b7       	in	r30, 0x3d	; 61
   1c3d4:	fe b7       	in	r31, 0x3e	; 62
   1c3d6:	95 83       	std	Z+5, r25	; 0x05
   1c3d8:	84 83       	std	Z+4, r24	; 0x04
   1c3da:	83 ec       	ldi	r24, 0xC3	; 195
   1c3dc:	94 e4       	ldi	r25, 0x44	; 68
   1c3de:	a0 e0       	ldi	r26, 0x00	; 0
   1c3e0:	81 83       	std	Z+1, r24	; 0x01
   1c3e2:	92 83       	std	Z+2, r25	; 0x02
   1c3e4:	a3 83       	std	Z+3, r26	; 0x03
   1c3e6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

    sep();
   1c3ea:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>
    PrintFree();
   1c3ee:	0e 94 72 28 	call	0x50e4	; 0x50e4 <PrintFree>

    sep();
   1c3f2:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c3f6:	8d ea       	ldi	r24, 0xAD	; 173
   1c3f8:	94 e4       	ldi	r25, 0x44	; 68
   1c3fa:	a0 e0       	ldi	r26, 0x00	; 0
   1c3fc:	ed b7       	in	r30, 0x3d	; 61
   1c3fe:	fe b7       	in	r31, 0x3e	; 62
   1c400:	81 83       	std	Z+1, r24	; 0x01
   1c402:	92 83       	std	Z+2, r25	; 0x02
   1c404:	a3 83       	std	Z+3, r26	; 0x03
   1c406:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c40a:	4b e0       	ldi	r20, 0x0B	; 11
   1c40c:	50 e0       	ldi	r21, 0x00	; 0
   1c40e:	60 e2       	ldi	r22, 0x20	; 32
   1c410:	71 ea       	ldi	r23, 0xA1	; 161
   1c412:	87 e0       	ldi	r24, 0x07	; 7
   1c414:	90 e0       	ldi	r25, 0x00	; 0
   1c416:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c41a:	87 e9       	ldi	r24, 0x97	; 151
   1c41c:	94 e4       	ldi	r25, 0x44	; 68
   1c41e:	a0 e0       	ldi	r26, 0x00	; 0
   1c420:	ed b7       	in	r30, 0x3d	; 61
   1c422:	fe b7       	in	r31, 0x3e	; 62
   1c424:	81 83       	std	Z+1, r24	; 0x01
   1c426:	92 83       	std	Z+2, r25	; 0x02
   1c428:	a3 83       	std	Z+3, r26	; 0x03
   1c42a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
	i2c_init(100000);
   1c42e:	60 ea       	ldi	r22, 0xA0	; 160
   1c430:	76 e8       	ldi	r23, 0x86	; 134
   1c432:	81 e0       	ldi	r24, 0x01	; 1
   1c434:	90 e0       	ldi	r25, 0x00	; 0
   1c436:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <i2c_init>
    sep();
   1c43a:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c43e:	85 e8       	ldi	r24, 0x85	; 133
   1c440:	94 e4       	ldi	r25, 0x44	; 68
   1c442:	a0 e0       	ldi	r26, 0x00	; 0
   1c444:	ed b7       	in	r30, 0x3d	; 61
   1c446:	fe b7       	in	r31, 0x3e	; 62
   1c448:	81 83       	std	Z+1, r24	; 0x01
   1c44a:	92 83       	std	Z+2, r25	; 0x02
   1c44c:	a3 83       	std	Z+3, r26	; 0x03
   1c44e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    clock_clear();
   1c452:	0e 94 08 37 	call	0x6e10	; 0x6e10 <clock_clear>
    printf("Clock cleared\n");
   1c456:	86 e7       	ldi	r24, 0x76	; 118
   1c458:	94 e4       	ldi	r25, 0x44	; 68
   1c45a:	a0 e0       	ldi	r26, 0x00	; 0
   1c45c:	ed b7       	in	r30, 0x3d	; 61
   1c45e:	fe b7       	in	r31, 0x3e	; 62
   1c460:	81 83       	std	Z+1, r24	; 0x01
   1c462:	92 83       	std	Z+2, r25	; 0x02
   1c464:	a3 83       	std	Z+3, r26	; 0x03
   1c466:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c46a:	be 01       	movw	r22, r28
   1c46c:	64 5d       	subi	r22, 0xD4	; 212
   1c46e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c470:	80 e0       	ldi	r24, 0x00	; 0
   1c472:	90 e0       	ldi	r25, 0x00	; 0
   1c474:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1c478:	88 a9       	ldd	r24, Y+48	; 0x30
   1c47a:	99 a9       	ldd	r25, Y+49	; 0x31
   1c47c:	aa a9       	ldd	r26, Y+50	; 0x32
   1c47e:	bb a9       	ldd	r27, Y+51	; 0x33
   1c480:	ed b7       	in	r30, 0x3d	; 61
   1c482:	fe b7       	in	r31, 0x3e	; 62
   1c484:	84 83       	std	Z+4, r24	; 0x04
   1c486:	95 83       	std	Z+5, r25	; 0x05
   1c488:	a6 83       	std	Z+6, r26	; 0x06
   1c48a:	b7 83       	std	Z+7, r27	; 0x07
   1c48c:	88 e4       	ldi	r24, 0x48	; 72
   1c48e:	94 e4       	ldi	r25, 0x44	; 68
   1c490:	a0 e0       	ldi	r26, 0x00	; 0
   1c492:	81 83       	std	Z+1, r24	; 0x01
   1c494:	92 83       	std	Z+2, r25	; 0x02
   1c496:	a3 83       	std	Z+3, r26	; 0x03
   1c498:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1c49c:	80 e0       	ldi	r24, 0x00	; 0
   1c49e:	90 e0       	ldi	r25, 0x00	; 0
   1c4a0:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <initialize_clock>
    display_clock();
   1c4a4:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <display_clock>
    sep();
   1c4a8:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	setup_lcd();
   1c4ac:	34 dd       	rcall	.-1432   	; 0x1bf16 <setup_lcd>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c4ae:	80 e3       	ldi	r24, 0x30	; 48
   1c4b0:	94 e4       	ldi	r25, 0x44	; 68
   1c4b2:	a0 e0       	ldi	r26, 0x00	; 0
   1c4b4:	ed b7       	in	r30, 0x3d	; 61
   1c4b6:	fe b7       	in	r31, 0x3e	; 62
   1c4b8:	81 83       	std	Z+1, r24	; 0x01
   1c4ba:	92 83       	std	Z+2, r25	; 0x02
   1c4bc:	a3 83       	std	Z+3, r26	; 0x03
   1c4be:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    if ( !mmc_init(1) )
   1c4c2:	81 e0       	ldi	r24, 0x01	; 1
   1c4c4:	90 e0       	ldi	r25, 0x00	; 0
   1c4c6:	0e 94 e8 70 	call	0xe1d0	; 0xe1d0 <mmc_init>
   1c4ca:	89 2b       	or	r24, r25
   1c4cc:	51 f4       	brne	.+20     	; 0x1c4e2 <main+0x224>
		printf("MMC initialized\n");
   1c4ce:	8f e1       	ldi	r24, 0x1F	; 31
   1c4d0:	94 e4       	ldi	r25, 0x44	; 68
   1c4d2:	a0 e0       	ldi	r26, 0x00	; 0
   1c4d4:	ed b7       	in	r30, 0x3d	; 61
   1c4d6:	fe b7       	in	r31, 0x3e	; 62
   1c4d8:	81 83       	std	Z+1, r24	; 0x01
   1c4da:	92 83       	std	Z+2, r25	; 0x02
   1c4dc:	a3 83       	std	Z+3, r26	; 0x03
   1c4de:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    sep();
   1c4e2:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c4e6:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c4ea:	89 e0       	ldi	r24, 0x09	; 9
   1c4ec:	94 e4       	ldi	r25, 0x44	; 68
   1c4ee:	a0 e0       	ldi	r26, 0x00	; 0
   1c4f0:	ed b7       	in	r30, 0x3d	; 61
   1c4f2:	fe b7       	in	r31, 0x3e	; 62
   1c4f4:	81 83       	std	Z+1, r24	; 0x01
   1c4f6:	92 83       	std	Z+2, r25	; 0x02
   1c4f8:	a3 83       	std	Z+3, r26	; 0x03
   1c4fa:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c4fe:	0e 94 21 bd 	call	0x17a42	; 0x17a42 <printer_init>
    printf("Printer initialized\n");
   1c502:	84 ef       	ldi	r24, 0xF4	; 244
   1c504:	93 e4       	ldi	r25, 0x43	; 67
   1c506:	a0 e0       	ldi	r26, 0x00	; 0
   1c508:	ed b7       	in	r30, 0x3d	; 61
   1c50a:	fe b7       	in	r31, 0x3e	; 62
   1c50c:	81 83       	std	Z+1, r24	; 0x01
   1c50e:	92 83       	std	Z+2, r25	; 0x02
   1c510:	a3 83       	std	Z+3, r26	; 0x03
   1c512:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c516:	82 ee       	ldi	r24, 0xE2	; 226
   1c518:	93 e4       	ldi	r25, 0x43	; 67
   1c51a:	a0 e0       	ldi	r26, 0x00	; 0
   1c51c:	ed b7       	in	r30, 0x3d	; 61
   1c51e:	fe b7       	in	r31, 0x3e	; 62
   1c520:	81 83       	std	Z+1, r24	; 0x01
   1c522:	92 83       	std	Z+2, r25	; 0x02
   1c524:	a3 83       	std	Z+3, r26	; 0x03
   1c526:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    gpib_timer_init();
   1c52a:	0e 94 50 85 	call	0x10aa0	; 0x10aa0 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c52e:	8a ec       	ldi	r24, 0xCA	; 202
   1c530:	93 e4       	ldi	r25, 0x43	; 67
   1c532:	a0 e0       	ldi	r26, 0x00	; 0
   1c534:	ed b7       	in	r30, 0x3d	; 61
   1c536:	fe b7       	in	r31, 0x3e	; 62
   1c538:	81 83       	std	Z+1, r24	; 0x01
   1c53a:	92 83       	std	Z+2, r25	; 0x02
   1c53c:	a3 83       	std	Z+3, r26	; 0x03
   1c53e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c542:	0e 94 be 8d 	call	0x11b7c	; 0x11b7c <gpib_file_init>
    printf("GPIB File init done\n");
   1c546:	85 eb       	ldi	r24, 0xB5	; 181
   1c548:	93 e4       	ldi	r25, 0x43	; 67
   1c54a:	a0 e0       	ldi	r26, 0x00	; 0
   1c54c:	ed b7       	in	r30, 0x3d	; 61
   1c54e:	fe b7       	in	r31, 0x3e	; 62
   1c550:	81 83       	std	Z+1, r24	; 0x01
   1c552:	92 83       	std	Z+2, r25	; 0x02
   1c554:	a3 83       	std	Z+3, r26	; 0x03
   1c556:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c55a:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_state_init>
    printf("GPIB State init done\n");
   1c55e:	8f e9       	ldi	r24, 0x9F	; 159
   1c560:	93 e4       	ldi	r25, 0x43	; 67
   1c562:	a0 e0       	ldi	r26, 0x00	; 0
   1c564:	ed b7       	in	r30, 0x3d	; 61
   1c566:	fe b7       	in	r31, 0x3e	; 62
   1c568:	81 83       	std	Z+1, r24	; 0x01
   1c56a:	92 83       	std	Z+2, r25	; 0x02
   1c56c:	a3 83       	std	Z+3, r26	; 0x03
   1c56e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    sep();
   1c572:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c576:	80 e0       	ldi	r24, 0x00	; 0
   1c578:	90 e0       	ldi	r25, 0x00	; 0
   1c57a:	0e 94 4c 95 	call	0x12a98	; 0x12a98 <display_Addresses>
    sep();
   1c57e:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c582:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c586:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c58a:	ed b7       	in	r30, 0x3d	; 61
   1c58c:	fe b7       	in	r31, 0x3e	; 62
   1c58e:	95 83       	std	Z+5, r25	; 0x05
   1c590:	84 83       	std	Z+4, r24	; 0x04
   1c592:	89 e8       	ldi	r24, 0x89	; 137
   1c594:	93 e4       	ldi	r25, 0x43	; 67
   1c596:	a0 e0       	ldi	r26, 0x00	; 0
   1c598:	81 83       	std	Z+1, r24	; 0x01
   1c59a:	92 83       	std	Z+2, r25	; 0x02
   1c59c:	a3 83       	std	Z+3, r26	; 0x03
   1c59e:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
    sep();
   1c5a2:	0e 94 65 33 	call	0x66ca	; 0x66ca <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c5a6:	0e 94 e4 a0 	call	0x141c8	; 0x141c8 <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c5aa:	83 e0       	ldi	r24, 0x03	; 3
   1c5ac:	0e 94 c1 98 	call	0x13182	; 0x13182 <count_drive_types>
   1c5b0:	8c 01       	movw	r16, r24
   1c5b2:	81 e0       	ldi	r24, 0x01	; 1
   1c5b4:	0e 94 c1 98 	call	0x13182	; 0x13182 <count_drive_types>
   1c5b8:	ed b7       	in	r30, 0x3d	; 61
   1c5ba:	fe b7       	in	r31, 0x3e	; 62
   1c5bc:	91 87       	std	Z+9, r25	; 0x09
   1c5be:	80 87       	std	Z+8, r24	; 0x08
   1c5c0:	17 83       	std	Z+7, r17	; 0x07
   1c5c2:	06 83       	std	Z+6, r16	; 0x06
   1c5c4:	88 e7       	ldi	r24, 0x78	; 120
   1c5c6:	93 e4       	ldi	r25, 0x43	; 67
   1c5c8:	a0 e0       	ldi	r26, 0x00	; 0
   1c5ca:	83 83       	std	Z+3, r24	; 0x03
   1c5cc:	94 83       	std	Z+4, r25	; 0x04
   1c5ce:	a5 83       	std	Z+5, r26	; 0x05
   1c5d0:	8e 01       	movw	r16, r28
   1c5d2:	04 5f       	subi	r16, 0xF4	; 244
   1c5d4:	1f 4f       	sbci	r17, 0xFF	; 255
   1c5d6:	12 83       	std	Z+2, r17	; 0x02
   1c5d8:	01 83       	std	Z+1, r16	; 0x01
   1c5da:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c5de:	ed b7       	in	r30, 0x3d	; 61
   1c5e0:	fe b7       	in	r31, 0x3e	; 62
   1c5e2:	17 83       	std	Z+7, r17	; 0x07
   1c5e4:	06 83       	std	Z+6, r16	; 0x06
   1c5e6:	82 e7       	ldi	r24, 0x72	; 114
   1c5e8:	93 e4       	ldi	r25, 0x43	; 67
   1c5ea:	a0 e0       	ldi	r26, 0x00	; 0
   1c5ec:	83 83       	std	Z+3, r24	; 0x03
   1c5ee:	94 83       	std	Z+4, r25	; 0x04
   1c5f0:	a5 83       	std	Z+5, r26	; 0x05
   1c5f2:	87 e0       	ldi	r24, 0x07	; 7
   1c5f4:	93 e0       	ldi	r25, 0x03	; 3
   1c5f6:	92 83       	std	Z+2, r25	; 0x02
   1c5f8:	81 83       	std	Z+1, r24	; 0x01
   1c5fa:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c5fe:	8b e2       	ldi	r24, 0x2B	; 43
   1c600:	97 e1       	ldi	r25, 0x17	; 23
   1c602:	ed b7       	in	r30, 0x3d	; 61
   1c604:	fe b7       	in	r31, 0x3e	; 62
   1c606:	97 83       	std	Z+7, r25	; 0x07
   1c608:	86 83       	std	Z+6, r24	; 0x06
   1c60a:	8c e6       	ldi	r24, 0x6C	; 108
   1c60c:	93 e4       	ldi	r25, 0x43	; 67
   1c60e:	a0 e0       	ldi	r26, 0x00	; 0
   1c610:	83 83       	std	Z+3, r24	; 0x03
   1c612:	94 83       	std	Z+4, r25	; 0x04
   1c614:	a5 83       	std	Z+5, r26	; 0x05
   1c616:	80 ef       	ldi	r24, 0xF0	; 240
   1c618:	92 e0       	ldi	r25, 0x02	; 2
   1c61a:	92 83       	std	Z+2, r25	; 0x02
   1c61c:	81 83       	std	Z+1, r24	; 0x01
   1c61e:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <sprintf_P>

	i2c_task_run();
   1c622:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <i2c_task_run>
	delayms(1000);
   1c626:	68 ee       	ldi	r22, 0xE8	; 232
   1c628:	73 e0       	ldi	r23, 0x03	; 3
   1c62a:	80 e0       	ldi	r24, 0x00	; 0
   1c62c:	90 e0       	ldi	r25, 0x00	; 0
   1c62e:	0e 94 b1 29 	call	0x5362	; 0x5362 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c632:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <i2c_task+0x2>
   1c636:	88 23       	and	r24, r24
   1c638:	21 f0       	breq	.+8      	; 0x1c642 <main+0x384>
   1c63a:	80 91 87 17 	lds	r24, 0x1787	; 0x801787 <i2c_task+0x3>
   1c63e:	88 23       	and	r24, r24
   1c640:	61 f0       	breq	.+24     	; 0x1c65a <main+0x39c>
	{
		i2c_display_task_errors();
   1c642:	0e 94 71 30 	call	0x60e2	; 0x60e2 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c646:	82 e5       	ldi	r24, 0x52	; 82
   1c648:	93 e4       	ldi	r25, 0x43	; 67
   1c64a:	a0 e0       	ldi	r26, 0x00	; 0
   1c64c:	ed b7       	in	r30, 0x3d	; 61
   1c64e:	fe b7       	in	r31, 0x3e	; 62
   1c650:	81 83       	std	Z+1, r24	; 0x01
   1c652:	92 83       	std	Z+2, r25	; 0x02
   1c654:	a3 83       	std	Z+3, r26	; 0x03
   1c656:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c65a:	8e e3       	ldi	r24, 0x3E	; 62
   1c65c:	93 e4       	ldi	r25, 0x43	; 67
   1c65e:	a0 e0       	ldi	r26, 0x00	; 0
   1c660:	ed b7       	in	r30, 0x3d	; 61
   1c662:	fe b7       	in	r31, 0x3e	; 62
   1c664:	81 83       	std	Z+1, r24	; 0x01
   1c666:	92 83       	std	Z+2, r25	; 0x02
   1c668:	a3 83       	std	Z+3, r26	; 0x03
   1c66a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c66e:	81 e0       	ldi	r24, 0x01	; 1
   1c670:	1c de       	rcall	.-968    	; 0x1c2aa <user_task>
   1c672:	fd cf       	rjmp	.-6      	; 0x1c66e <main+0x3b0>

0001c674 <__mulsi3>:
   1c674:	db 01       	movw	r26, r22
   1c676:	8f 93       	push	r24
   1c678:	9f 93       	push	r25
   1c67a:	8b d0       	rcall	.+278    	; 0x1c792 <__muluhisi3>
   1c67c:	bf 91       	pop	r27
   1c67e:	af 91       	pop	r26
   1c680:	a2 9f       	mul	r26, r18
   1c682:	80 0d       	add	r24, r0
   1c684:	91 1d       	adc	r25, r1
   1c686:	a3 9f       	mul	r26, r19
   1c688:	90 0d       	add	r25, r0
   1c68a:	b2 9f       	mul	r27, r18
   1c68c:	90 0d       	add	r25, r0
   1c68e:	11 24       	eor	r1, r1
   1c690:	08 95       	ret

0001c692 <__udivmodqi4>:
   1c692:	99 1b       	sub	r25, r25
   1c694:	79 e0       	ldi	r23, 0x09	; 9
   1c696:	04 c0       	rjmp	.+8      	; 0x1c6a0 <__udivmodqi4_ep>

0001c698 <__udivmodqi4_loop>:
   1c698:	99 1f       	adc	r25, r25
   1c69a:	96 17       	cp	r25, r22
   1c69c:	08 f0       	brcs	.+2      	; 0x1c6a0 <__udivmodqi4_ep>
   1c69e:	96 1b       	sub	r25, r22

0001c6a0 <__udivmodqi4_ep>:
   1c6a0:	88 1f       	adc	r24, r24
   1c6a2:	7a 95       	dec	r23
   1c6a4:	c9 f7       	brne	.-14     	; 0x1c698 <__udivmodqi4_loop>
   1c6a6:	80 95       	com	r24
   1c6a8:	08 95       	ret

0001c6aa <__udivmodhi4>:
   1c6aa:	aa 1b       	sub	r26, r26
   1c6ac:	bb 1b       	sub	r27, r27
   1c6ae:	51 e1       	ldi	r21, 0x11	; 17
   1c6b0:	07 c0       	rjmp	.+14     	; 0x1c6c0 <__udivmodhi4_ep>

0001c6b2 <__udivmodhi4_loop>:
   1c6b2:	aa 1f       	adc	r26, r26
   1c6b4:	bb 1f       	adc	r27, r27
   1c6b6:	a6 17       	cp	r26, r22
   1c6b8:	b7 07       	cpc	r27, r23
   1c6ba:	10 f0       	brcs	.+4      	; 0x1c6c0 <__udivmodhi4_ep>
   1c6bc:	a6 1b       	sub	r26, r22
   1c6be:	b7 0b       	sbc	r27, r23

0001c6c0 <__udivmodhi4_ep>:
   1c6c0:	88 1f       	adc	r24, r24
   1c6c2:	99 1f       	adc	r25, r25
   1c6c4:	5a 95       	dec	r21
   1c6c6:	a9 f7       	brne	.-22     	; 0x1c6b2 <__udivmodhi4_loop>
   1c6c8:	80 95       	com	r24
   1c6ca:	90 95       	com	r25
   1c6cc:	bc 01       	movw	r22, r24
   1c6ce:	cd 01       	movw	r24, r26
   1c6d0:	08 95       	ret

0001c6d2 <__divmodhi4>:
   1c6d2:	97 fb       	bst	r25, 7
   1c6d4:	07 2e       	mov	r0, r23
   1c6d6:	16 f4       	brtc	.+4      	; 0x1c6dc <__divmodhi4+0xa>
   1c6d8:	00 94       	com	r0
   1c6da:	06 d0       	rcall	.+12     	; 0x1c6e8 <__divmodhi4_neg1>
   1c6dc:	77 fd       	sbrc	r23, 7
   1c6de:	08 d0       	rcall	.+16     	; 0x1c6f0 <__divmodhi4_neg2>
   1c6e0:	e4 df       	rcall	.-56     	; 0x1c6aa <__udivmodhi4>
   1c6e2:	07 fc       	sbrc	r0, 7
   1c6e4:	05 d0       	rcall	.+10     	; 0x1c6f0 <__divmodhi4_neg2>
   1c6e6:	3e f4       	brtc	.+14     	; 0x1c6f6 <__divmodhi4_exit>

0001c6e8 <__divmodhi4_neg1>:
   1c6e8:	90 95       	com	r25
   1c6ea:	81 95       	neg	r24
   1c6ec:	9f 4f       	sbci	r25, 0xFF	; 255
   1c6ee:	08 95       	ret

0001c6f0 <__divmodhi4_neg2>:
   1c6f0:	70 95       	com	r23
   1c6f2:	61 95       	neg	r22
   1c6f4:	7f 4f       	sbci	r23, 0xFF	; 255

0001c6f6 <__divmodhi4_exit>:
   1c6f6:	08 95       	ret

0001c6f8 <__udivmodsi4>:
   1c6f8:	a1 e2       	ldi	r26, 0x21	; 33
   1c6fa:	1a 2e       	mov	r1, r26
   1c6fc:	aa 1b       	sub	r26, r26
   1c6fe:	bb 1b       	sub	r27, r27
   1c700:	fd 01       	movw	r30, r26
   1c702:	0d c0       	rjmp	.+26     	; 0x1c71e <__udivmodsi4_ep>

0001c704 <__udivmodsi4_loop>:
   1c704:	aa 1f       	adc	r26, r26
   1c706:	bb 1f       	adc	r27, r27
   1c708:	ee 1f       	adc	r30, r30
   1c70a:	ff 1f       	adc	r31, r31
   1c70c:	a2 17       	cp	r26, r18
   1c70e:	b3 07       	cpc	r27, r19
   1c710:	e4 07       	cpc	r30, r20
   1c712:	f5 07       	cpc	r31, r21
   1c714:	20 f0       	brcs	.+8      	; 0x1c71e <__udivmodsi4_ep>
   1c716:	a2 1b       	sub	r26, r18
   1c718:	b3 0b       	sbc	r27, r19
   1c71a:	e4 0b       	sbc	r30, r20
   1c71c:	f5 0b       	sbc	r31, r21

0001c71e <__udivmodsi4_ep>:
   1c71e:	66 1f       	adc	r22, r22
   1c720:	77 1f       	adc	r23, r23
   1c722:	88 1f       	adc	r24, r24
   1c724:	99 1f       	adc	r25, r25
   1c726:	1a 94       	dec	r1
   1c728:	69 f7       	brne	.-38     	; 0x1c704 <__udivmodsi4_loop>
   1c72a:	60 95       	com	r22
   1c72c:	70 95       	com	r23
   1c72e:	80 95       	com	r24
   1c730:	90 95       	com	r25
   1c732:	9b 01       	movw	r18, r22
   1c734:	ac 01       	movw	r20, r24
   1c736:	bd 01       	movw	r22, r26
   1c738:	cf 01       	movw	r24, r30
   1c73a:	08 95       	ret

0001c73c <__divmodsi4>:
   1c73c:	05 2e       	mov	r0, r21
   1c73e:	97 fb       	bst	r25, 7
   1c740:	16 f4       	brtc	.+4      	; 0x1c746 <__divmodsi4+0xa>
   1c742:	00 94       	com	r0
   1c744:	0f d0       	rcall	.+30     	; 0x1c764 <__negsi2>
   1c746:	57 fd       	sbrc	r21, 7
   1c748:	05 d0       	rcall	.+10     	; 0x1c754 <__divmodsi4_neg2>
   1c74a:	d6 df       	rcall	.-84     	; 0x1c6f8 <__udivmodsi4>
   1c74c:	07 fc       	sbrc	r0, 7
   1c74e:	02 d0       	rcall	.+4      	; 0x1c754 <__divmodsi4_neg2>
   1c750:	46 f4       	brtc	.+16     	; 0x1c762 <__divmodsi4_exit>
   1c752:	08 c0       	rjmp	.+16     	; 0x1c764 <__negsi2>

0001c754 <__divmodsi4_neg2>:
   1c754:	50 95       	com	r21
   1c756:	40 95       	com	r20
   1c758:	30 95       	com	r19
   1c75a:	21 95       	neg	r18
   1c75c:	3f 4f       	sbci	r19, 0xFF	; 255
   1c75e:	4f 4f       	sbci	r20, 0xFF	; 255
   1c760:	5f 4f       	sbci	r21, 0xFF	; 255

0001c762 <__divmodsi4_exit>:
   1c762:	08 95       	ret

0001c764 <__negsi2>:
   1c764:	90 95       	com	r25
   1c766:	80 95       	com	r24
   1c768:	70 95       	com	r23
   1c76a:	61 95       	neg	r22
   1c76c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c76e:	8f 4f       	sbci	r24, 0xFF	; 255
   1c770:	9f 4f       	sbci	r25, 0xFF	; 255
   1c772:	08 95       	ret

0001c774 <__tablejump2__>:
   1c774:	ee 0f       	add	r30, r30
   1c776:	ff 1f       	adc	r31, r31
   1c778:	00 24       	eor	r0, r0
   1c77a:	00 1c       	adc	r0, r0
   1c77c:	0b be       	out	0x3b, r0	; 59
   1c77e:	07 90       	elpm	r0, Z+
   1c780:	f6 91       	elpm	r31, Z
   1c782:	e0 2d       	mov	r30, r0
   1c784:	09 94       	ijmp

0001c786 <__usmulhisi3>:
   1c786:	6f d0       	rcall	.+222    	; 0x1c866 <__umulhisi3>

0001c788 <__usmulhisi3_tail>:
   1c788:	b7 ff       	sbrs	r27, 7
   1c78a:	08 95       	ret
   1c78c:	82 1b       	sub	r24, r18
   1c78e:	93 0b       	sbc	r25, r19
   1c790:	08 95       	ret

0001c792 <__muluhisi3>:
   1c792:	69 d0       	rcall	.+210    	; 0x1c866 <__umulhisi3>
   1c794:	a5 9f       	mul	r26, r21
   1c796:	90 0d       	add	r25, r0
   1c798:	b4 9f       	mul	r27, r20
   1c79a:	90 0d       	add	r25, r0
   1c79c:	a4 9f       	mul	r26, r20
   1c79e:	80 0d       	add	r24, r0
   1c7a0:	91 1d       	adc	r25, r1
   1c7a2:	11 24       	eor	r1, r1
   1c7a4:	08 95       	ret

0001c7a6 <__mulshisi3>:
   1c7a6:	b7 ff       	sbrs	r27, 7
   1c7a8:	f4 cf       	rjmp	.-24     	; 0x1c792 <__muluhisi3>

0001c7aa <__mulohisi3>:
   1c7aa:	f3 df       	rcall	.-26     	; 0x1c792 <__muluhisi3>
   1c7ac:	82 1b       	sub	r24, r18
   1c7ae:	93 0b       	sbc	r25, r19
   1c7b0:	08 95       	ret

0001c7b2 <__negdi2>:
   1c7b2:	60 95       	com	r22
   1c7b4:	70 95       	com	r23
   1c7b6:	80 95       	com	r24
   1c7b8:	90 95       	com	r25
   1c7ba:	30 95       	com	r19
   1c7bc:	40 95       	com	r20
   1c7be:	50 95       	com	r21
   1c7c0:	21 95       	neg	r18
   1c7c2:	3f 4f       	sbci	r19, 0xFF	; 255
   1c7c4:	4f 4f       	sbci	r20, 0xFF	; 255
   1c7c6:	5f 4f       	sbci	r21, 0xFF	; 255
   1c7c8:	6f 4f       	sbci	r22, 0xFF	; 255
   1c7ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1c7cc:	8f 4f       	sbci	r24, 0xFF	; 255
   1c7ce:	9f 4f       	sbci	r25, 0xFF	; 255
   1c7d0:	08 95       	ret

0001c7d2 <__prologue_saves__>:
   1c7d2:	2f 92       	push	r2
   1c7d4:	3f 92       	push	r3
   1c7d6:	4f 92       	push	r4
   1c7d8:	5f 92       	push	r5
   1c7da:	6f 92       	push	r6
   1c7dc:	7f 92       	push	r7
   1c7de:	8f 92       	push	r8
   1c7e0:	9f 92       	push	r9
   1c7e2:	af 92       	push	r10
   1c7e4:	bf 92       	push	r11
   1c7e6:	cf 92       	push	r12
   1c7e8:	df 92       	push	r13
   1c7ea:	ef 92       	push	r14
   1c7ec:	ff 92       	push	r15
   1c7ee:	0f 93       	push	r16
   1c7f0:	1f 93       	push	r17
   1c7f2:	cf 93       	push	r28
   1c7f4:	df 93       	push	r29
   1c7f6:	cd b7       	in	r28, 0x3d	; 61
   1c7f8:	de b7       	in	r29, 0x3e	; 62
   1c7fa:	ca 1b       	sub	r28, r26
   1c7fc:	db 0b       	sbc	r29, r27
   1c7fe:	0f b6       	in	r0, 0x3f	; 63
   1c800:	f8 94       	cli
   1c802:	de bf       	out	0x3e, r29	; 62
   1c804:	0f be       	out	0x3f, r0	; 63
   1c806:	cd bf       	out	0x3d, r28	; 61
   1c808:	09 94       	ijmp

0001c80a <__epilogue_restores__>:
   1c80a:	2a 88       	ldd	r2, Y+18	; 0x12
   1c80c:	39 88       	ldd	r3, Y+17	; 0x11
   1c80e:	48 88       	ldd	r4, Y+16	; 0x10
   1c810:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c812:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c814:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c816:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c818:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c81a:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c81c:	b9 84       	ldd	r11, Y+9	; 0x09
   1c81e:	c8 84       	ldd	r12, Y+8	; 0x08
   1c820:	df 80       	ldd	r13, Y+7	; 0x07
   1c822:	ee 80       	ldd	r14, Y+6	; 0x06
   1c824:	fd 80       	ldd	r15, Y+5	; 0x05
   1c826:	0c 81       	ldd	r16, Y+4	; 0x04
   1c828:	1b 81       	ldd	r17, Y+3	; 0x03
   1c82a:	aa 81       	ldd	r26, Y+2	; 0x02
   1c82c:	b9 81       	ldd	r27, Y+1	; 0x01
   1c82e:	ce 0f       	add	r28, r30
   1c830:	d1 1d       	adc	r29, r1
   1c832:	0f b6       	in	r0, 0x3f	; 63
   1c834:	f8 94       	cli
   1c836:	de bf       	out	0x3e, r29	; 62
   1c838:	0f be       	out	0x3f, r0	; 63
   1c83a:	cd bf       	out	0x3d, r28	; 61
   1c83c:	ed 01       	movw	r28, r26
   1c83e:	08 95       	ret

0001c840 <__xload_1>:
   1c840:	57 fd       	sbrc	r21, 7
   1c842:	03 c0       	rjmp	.+6      	; 0x1c84a <__xload_1+0xa>
   1c844:	5b bf       	out	0x3b, r21	; 59
   1c846:	67 91       	elpm	r22, Z+
   1c848:	08 95       	ret
   1c84a:	60 81       	ld	r22, Z
   1c84c:	08 95       	ret

0001c84e <__cmpdi2_s8>:
   1c84e:	00 24       	eor	r0, r0
   1c850:	a7 fd       	sbrc	r26, 7
   1c852:	00 94       	com	r0
   1c854:	2a 17       	cp	r18, r26
   1c856:	30 05       	cpc	r19, r0
   1c858:	40 05       	cpc	r20, r0
   1c85a:	50 05       	cpc	r21, r0
   1c85c:	60 05       	cpc	r22, r0
   1c85e:	70 05       	cpc	r23, r0
   1c860:	80 05       	cpc	r24, r0
   1c862:	90 05       	cpc	r25, r0
   1c864:	08 95       	ret

0001c866 <__umulhisi3>:
   1c866:	a2 9f       	mul	r26, r18
   1c868:	b0 01       	movw	r22, r0
   1c86a:	b3 9f       	mul	r27, r19
   1c86c:	c0 01       	movw	r24, r0
   1c86e:	a3 9f       	mul	r26, r19
   1c870:	70 0d       	add	r23, r0
   1c872:	81 1d       	adc	r24, r1
   1c874:	11 24       	eor	r1, r1
   1c876:	91 1d       	adc	r25, r1
   1c878:	b2 9f       	mul	r27, r18
   1c87a:	70 0d       	add	r23, r0
   1c87c:	81 1d       	adc	r24, r1
   1c87e:	11 24       	eor	r1, r1
   1c880:	91 1d       	adc	r25, r1
   1c882:	08 95       	ret

0001c884 <__subsf3>:
   1c884:	50 58       	subi	r21, 0x80	; 128

0001c886 <__addsf3>:
   1c886:	bb 27       	eor	r27, r27
   1c888:	aa 27       	eor	r26, r26
   1c88a:	0e d0       	rcall	.+28     	; 0x1c8a8 <__addsf3x>
   1c88c:	75 c1       	rjmp	.+746    	; 0x1cb78 <__fp_round>
   1c88e:	66 d1       	rcall	.+716    	; 0x1cb5c <__fp_pscA>
   1c890:	30 f0       	brcs	.+12     	; 0x1c89e <__addsf3+0x18>
   1c892:	6b d1       	rcall	.+726    	; 0x1cb6a <__fp_pscB>
   1c894:	20 f0       	brcs	.+8      	; 0x1c89e <__addsf3+0x18>
   1c896:	31 f4       	brne	.+12     	; 0x1c8a4 <__addsf3+0x1e>
   1c898:	9f 3f       	cpi	r25, 0xFF	; 255
   1c89a:	11 f4       	brne	.+4      	; 0x1c8a0 <__addsf3+0x1a>
   1c89c:	1e f4       	brtc	.+6      	; 0x1c8a4 <__addsf3+0x1e>
   1c89e:	5b c1       	rjmp	.+694    	; 0x1cb56 <__fp_nan>
   1c8a0:	0e f4       	brtc	.+2      	; 0x1c8a4 <__addsf3+0x1e>
   1c8a2:	e0 95       	com	r30
   1c8a4:	e7 fb       	bst	r30, 7
   1c8a6:	51 c1       	rjmp	.+674    	; 0x1cb4a <__fp_inf>

0001c8a8 <__addsf3x>:
   1c8a8:	e9 2f       	mov	r30, r25
   1c8aa:	77 d1       	rcall	.+750    	; 0x1cb9a <__fp_split3>
   1c8ac:	80 f3       	brcs	.-32     	; 0x1c88e <__addsf3+0x8>
   1c8ae:	ba 17       	cp	r27, r26
   1c8b0:	62 07       	cpc	r22, r18
   1c8b2:	73 07       	cpc	r23, r19
   1c8b4:	84 07       	cpc	r24, r20
   1c8b6:	95 07       	cpc	r25, r21
   1c8b8:	18 f0       	brcs	.+6      	; 0x1c8c0 <__addsf3x+0x18>
   1c8ba:	71 f4       	brne	.+28     	; 0x1c8d8 <__addsf3x+0x30>
   1c8bc:	9e f5       	brtc	.+102    	; 0x1c924 <__addsf3x+0x7c>
   1c8be:	8f c1       	rjmp	.+798    	; 0x1cbde <__fp_zero>
   1c8c0:	0e f4       	brtc	.+2      	; 0x1c8c4 <__addsf3x+0x1c>
   1c8c2:	e0 95       	com	r30
   1c8c4:	0b 2e       	mov	r0, r27
   1c8c6:	ba 2f       	mov	r27, r26
   1c8c8:	a0 2d       	mov	r26, r0
   1c8ca:	0b 01       	movw	r0, r22
   1c8cc:	b9 01       	movw	r22, r18
   1c8ce:	90 01       	movw	r18, r0
   1c8d0:	0c 01       	movw	r0, r24
   1c8d2:	ca 01       	movw	r24, r20
   1c8d4:	a0 01       	movw	r20, r0
   1c8d6:	11 24       	eor	r1, r1
   1c8d8:	ff 27       	eor	r31, r31
   1c8da:	59 1b       	sub	r21, r25
   1c8dc:	99 f0       	breq	.+38     	; 0x1c904 <__addsf3x+0x5c>
   1c8de:	59 3f       	cpi	r21, 0xF9	; 249
   1c8e0:	50 f4       	brcc	.+20     	; 0x1c8f6 <__addsf3x+0x4e>
   1c8e2:	50 3e       	cpi	r21, 0xE0	; 224
   1c8e4:	68 f1       	brcs	.+90     	; 0x1c940 <__addsf3x+0x98>
   1c8e6:	1a 16       	cp	r1, r26
   1c8e8:	f0 40       	sbci	r31, 0x00	; 0
   1c8ea:	a2 2f       	mov	r26, r18
   1c8ec:	23 2f       	mov	r18, r19
   1c8ee:	34 2f       	mov	r19, r20
   1c8f0:	44 27       	eor	r20, r20
   1c8f2:	58 5f       	subi	r21, 0xF8	; 248
   1c8f4:	f3 cf       	rjmp	.-26     	; 0x1c8dc <__addsf3x+0x34>
   1c8f6:	46 95       	lsr	r20
   1c8f8:	37 95       	ror	r19
   1c8fa:	27 95       	ror	r18
   1c8fc:	a7 95       	ror	r26
   1c8fe:	f0 40       	sbci	r31, 0x00	; 0
   1c900:	53 95       	inc	r21
   1c902:	c9 f7       	brne	.-14     	; 0x1c8f6 <__addsf3x+0x4e>
   1c904:	7e f4       	brtc	.+30     	; 0x1c924 <__addsf3x+0x7c>
   1c906:	1f 16       	cp	r1, r31
   1c908:	ba 0b       	sbc	r27, r26
   1c90a:	62 0b       	sbc	r22, r18
   1c90c:	73 0b       	sbc	r23, r19
   1c90e:	84 0b       	sbc	r24, r20
   1c910:	ba f0       	brmi	.+46     	; 0x1c940 <__addsf3x+0x98>
   1c912:	91 50       	subi	r25, 0x01	; 1
   1c914:	a1 f0       	breq	.+40     	; 0x1c93e <__addsf3x+0x96>
   1c916:	ff 0f       	add	r31, r31
   1c918:	bb 1f       	adc	r27, r27
   1c91a:	66 1f       	adc	r22, r22
   1c91c:	77 1f       	adc	r23, r23
   1c91e:	88 1f       	adc	r24, r24
   1c920:	c2 f7       	brpl	.-16     	; 0x1c912 <__addsf3x+0x6a>
   1c922:	0e c0       	rjmp	.+28     	; 0x1c940 <__addsf3x+0x98>
   1c924:	ba 0f       	add	r27, r26
   1c926:	62 1f       	adc	r22, r18
   1c928:	73 1f       	adc	r23, r19
   1c92a:	84 1f       	adc	r24, r20
   1c92c:	48 f4       	brcc	.+18     	; 0x1c940 <__addsf3x+0x98>
   1c92e:	87 95       	ror	r24
   1c930:	77 95       	ror	r23
   1c932:	67 95       	ror	r22
   1c934:	b7 95       	ror	r27
   1c936:	f7 95       	ror	r31
   1c938:	9e 3f       	cpi	r25, 0xFE	; 254
   1c93a:	08 f0       	brcs	.+2      	; 0x1c93e <__addsf3x+0x96>
   1c93c:	b3 cf       	rjmp	.-154    	; 0x1c8a4 <__addsf3+0x1e>
   1c93e:	93 95       	inc	r25
   1c940:	88 0f       	add	r24, r24
   1c942:	08 f0       	brcs	.+2      	; 0x1c946 <__addsf3x+0x9e>
   1c944:	99 27       	eor	r25, r25
   1c946:	ee 0f       	add	r30, r30
   1c948:	97 95       	ror	r25
   1c94a:	87 95       	ror	r24
   1c94c:	08 95       	ret

0001c94e <__cmpsf2>:
   1c94e:	d9 d0       	rcall	.+434    	; 0x1cb02 <__fp_cmp>
   1c950:	08 f4       	brcc	.+2      	; 0x1c954 <__cmpsf2+0x6>
   1c952:	81 e0       	ldi	r24, 0x01	; 1
   1c954:	08 95       	ret

0001c956 <__divsf3>:
   1c956:	0c d0       	rcall	.+24     	; 0x1c970 <__divsf3x>
   1c958:	0f c1       	rjmp	.+542    	; 0x1cb78 <__fp_round>
   1c95a:	07 d1       	rcall	.+526    	; 0x1cb6a <__fp_pscB>
   1c95c:	40 f0       	brcs	.+16     	; 0x1c96e <__divsf3+0x18>
   1c95e:	fe d0       	rcall	.+508    	; 0x1cb5c <__fp_pscA>
   1c960:	30 f0       	brcs	.+12     	; 0x1c96e <__divsf3+0x18>
   1c962:	21 f4       	brne	.+8      	; 0x1c96c <__divsf3+0x16>
   1c964:	5f 3f       	cpi	r21, 0xFF	; 255
   1c966:	19 f0       	breq	.+6      	; 0x1c96e <__divsf3+0x18>
   1c968:	f0 c0       	rjmp	.+480    	; 0x1cb4a <__fp_inf>
   1c96a:	51 11       	cpse	r21, r1
   1c96c:	39 c1       	rjmp	.+626    	; 0x1cbe0 <__fp_szero>
   1c96e:	f3 c0       	rjmp	.+486    	; 0x1cb56 <__fp_nan>

0001c970 <__divsf3x>:
   1c970:	14 d1       	rcall	.+552    	; 0x1cb9a <__fp_split3>
   1c972:	98 f3       	brcs	.-26     	; 0x1c95a <__divsf3+0x4>

0001c974 <__divsf3_pse>:
   1c974:	99 23       	and	r25, r25
   1c976:	c9 f3       	breq	.-14     	; 0x1c96a <__divsf3+0x14>
   1c978:	55 23       	and	r21, r21
   1c97a:	b1 f3       	breq	.-20     	; 0x1c968 <__divsf3+0x12>
   1c97c:	95 1b       	sub	r25, r21
   1c97e:	55 0b       	sbc	r21, r21
   1c980:	bb 27       	eor	r27, r27
   1c982:	aa 27       	eor	r26, r26
   1c984:	62 17       	cp	r22, r18
   1c986:	73 07       	cpc	r23, r19
   1c988:	84 07       	cpc	r24, r20
   1c98a:	38 f0       	brcs	.+14     	; 0x1c99a <__divsf3_pse+0x26>
   1c98c:	9f 5f       	subi	r25, 0xFF	; 255
   1c98e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c990:	22 0f       	add	r18, r18
   1c992:	33 1f       	adc	r19, r19
   1c994:	44 1f       	adc	r20, r20
   1c996:	aa 1f       	adc	r26, r26
   1c998:	a9 f3       	breq	.-22     	; 0x1c984 <__divsf3_pse+0x10>
   1c99a:	33 d0       	rcall	.+102    	; 0x1ca02 <__divsf3_pse+0x8e>
   1c99c:	0e 2e       	mov	r0, r30
   1c99e:	3a f0       	brmi	.+14     	; 0x1c9ae <__divsf3_pse+0x3a>
   1c9a0:	e0 e8       	ldi	r30, 0x80	; 128
   1c9a2:	30 d0       	rcall	.+96     	; 0x1ca04 <__divsf3_pse+0x90>
   1c9a4:	91 50       	subi	r25, 0x01	; 1
   1c9a6:	50 40       	sbci	r21, 0x00	; 0
   1c9a8:	e6 95       	lsr	r30
   1c9aa:	00 1c       	adc	r0, r0
   1c9ac:	ca f7       	brpl	.-14     	; 0x1c9a0 <__divsf3_pse+0x2c>
   1c9ae:	29 d0       	rcall	.+82     	; 0x1ca02 <__divsf3_pse+0x8e>
   1c9b0:	fe 2f       	mov	r31, r30
   1c9b2:	27 d0       	rcall	.+78     	; 0x1ca02 <__divsf3_pse+0x8e>
   1c9b4:	66 0f       	add	r22, r22
   1c9b6:	77 1f       	adc	r23, r23
   1c9b8:	88 1f       	adc	r24, r24
   1c9ba:	bb 1f       	adc	r27, r27
   1c9bc:	26 17       	cp	r18, r22
   1c9be:	37 07       	cpc	r19, r23
   1c9c0:	48 07       	cpc	r20, r24
   1c9c2:	ab 07       	cpc	r26, r27
   1c9c4:	b0 e8       	ldi	r27, 0x80	; 128
   1c9c6:	09 f0       	breq	.+2      	; 0x1c9ca <__divsf3_pse+0x56>
   1c9c8:	bb 0b       	sbc	r27, r27
   1c9ca:	80 2d       	mov	r24, r0
   1c9cc:	bf 01       	movw	r22, r30
   1c9ce:	ff 27       	eor	r31, r31
   1c9d0:	93 58       	subi	r25, 0x83	; 131
   1c9d2:	5f 4f       	sbci	r21, 0xFF	; 255
   1c9d4:	2a f0       	brmi	.+10     	; 0x1c9e0 <__divsf3_pse+0x6c>
   1c9d6:	9e 3f       	cpi	r25, 0xFE	; 254
   1c9d8:	51 05       	cpc	r21, r1
   1c9da:	68 f0       	brcs	.+26     	; 0x1c9f6 <__divsf3_pse+0x82>
   1c9dc:	b6 c0       	rjmp	.+364    	; 0x1cb4a <__fp_inf>
   1c9de:	00 c1       	rjmp	.+512    	; 0x1cbe0 <__fp_szero>
   1c9e0:	5f 3f       	cpi	r21, 0xFF	; 255
   1c9e2:	ec f3       	brlt	.-6      	; 0x1c9de <__divsf3_pse+0x6a>
   1c9e4:	98 3e       	cpi	r25, 0xE8	; 232
   1c9e6:	dc f3       	brlt	.-10     	; 0x1c9de <__divsf3_pse+0x6a>
   1c9e8:	86 95       	lsr	r24
   1c9ea:	77 95       	ror	r23
   1c9ec:	67 95       	ror	r22
   1c9ee:	b7 95       	ror	r27
   1c9f0:	f7 95       	ror	r31
   1c9f2:	9f 5f       	subi	r25, 0xFF	; 255
   1c9f4:	c9 f7       	brne	.-14     	; 0x1c9e8 <__divsf3_pse+0x74>
   1c9f6:	88 0f       	add	r24, r24
   1c9f8:	91 1d       	adc	r25, r1
   1c9fa:	96 95       	lsr	r25
   1c9fc:	87 95       	ror	r24
   1c9fe:	97 f9       	bld	r25, 7
   1ca00:	08 95       	ret
   1ca02:	e1 e0       	ldi	r30, 0x01	; 1
   1ca04:	66 0f       	add	r22, r22
   1ca06:	77 1f       	adc	r23, r23
   1ca08:	88 1f       	adc	r24, r24
   1ca0a:	bb 1f       	adc	r27, r27
   1ca0c:	62 17       	cp	r22, r18
   1ca0e:	73 07       	cpc	r23, r19
   1ca10:	84 07       	cpc	r24, r20
   1ca12:	ba 07       	cpc	r27, r26
   1ca14:	20 f0       	brcs	.+8      	; 0x1ca1e <__divsf3_pse+0xaa>
   1ca16:	62 1b       	sub	r22, r18
   1ca18:	73 0b       	sbc	r23, r19
   1ca1a:	84 0b       	sbc	r24, r20
   1ca1c:	ba 0b       	sbc	r27, r26
   1ca1e:	ee 1f       	adc	r30, r30
   1ca20:	88 f7       	brcc	.-30     	; 0x1ca04 <__divsf3_pse+0x90>
   1ca22:	e0 95       	com	r30
   1ca24:	08 95       	ret

0001ca26 <__fixsfsi>:
   1ca26:	04 d0       	rcall	.+8      	; 0x1ca30 <__fixunssfsi>
   1ca28:	68 94       	set
   1ca2a:	b1 11       	cpse	r27, r1
   1ca2c:	d9 c0       	rjmp	.+434    	; 0x1cbe0 <__fp_szero>
   1ca2e:	08 95       	ret

0001ca30 <__fixunssfsi>:
   1ca30:	bc d0       	rcall	.+376    	; 0x1cbaa <__fp_splitA>
   1ca32:	88 f0       	brcs	.+34     	; 0x1ca56 <__fixunssfsi+0x26>
   1ca34:	9f 57       	subi	r25, 0x7F	; 127
   1ca36:	90 f0       	brcs	.+36     	; 0x1ca5c <__fixunssfsi+0x2c>
   1ca38:	b9 2f       	mov	r27, r25
   1ca3a:	99 27       	eor	r25, r25
   1ca3c:	b7 51       	subi	r27, 0x17	; 23
   1ca3e:	a0 f0       	brcs	.+40     	; 0x1ca68 <__fixunssfsi+0x38>
   1ca40:	d1 f0       	breq	.+52     	; 0x1ca76 <__fixunssfsi+0x46>
   1ca42:	66 0f       	add	r22, r22
   1ca44:	77 1f       	adc	r23, r23
   1ca46:	88 1f       	adc	r24, r24
   1ca48:	99 1f       	adc	r25, r25
   1ca4a:	1a f0       	brmi	.+6      	; 0x1ca52 <__fixunssfsi+0x22>
   1ca4c:	ba 95       	dec	r27
   1ca4e:	c9 f7       	brne	.-14     	; 0x1ca42 <__fixunssfsi+0x12>
   1ca50:	12 c0       	rjmp	.+36     	; 0x1ca76 <__fixunssfsi+0x46>
   1ca52:	b1 30       	cpi	r27, 0x01	; 1
   1ca54:	81 f0       	breq	.+32     	; 0x1ca76 <__fixunssfsi+0x46>
   1ca56:	c3 d0       	rcall	.+390    	; 0x1cbde <__fp_zero>
   1ca58:	b1 e0       	ldi	r27, 0x01	; 1
   1ca5a:	08 95       	ret
   1ca5c:	c0 c0       	rjmp	.+384    	; 0x1cbde <__fp_zero>
   1ca5e:	67 2f       	mov	r22, r23
   1ca60:	78 2f       	mov	r23, r24
   1ca62:	88 27       	eor	r24, r24
   1ca64:	b8 5f       	subi	r27, 0xF8	; 248
   1ca66:	39 f0       	breq	.+14     	; 0x1ca76 <__fixunssfsi+0x46>
   1ca68:	b9 3f       	cpi	r27, 0xF9	; 249
   1ca6a:	cc f3       	brlt	.-14     	; 0x1ca5e <__fixunssfsi+0x2e>
   1ca6c:	86 95       	lsr	r24
   1ca6e:	77 95       	ror	r23
   1ca70:	67 95       	ror	r22
   1ca72:	b3 95       	inc	r27
   1ca74:	d9 f7       	brne	.-10     	; 0x1ca6c <__fixunssfsi+0x3c>
   1ca76:	3e f4       	brtc	.+14     	; 0x1ca86 <__fixunssfsi+0x56>
   1ca78:	90 95       	com	r25
   1ca7a:	80 95       	com	r24
   1ca7c:	70 95       	com	r23
   1ca7e:	61 95       	neg	r22
   1ca80:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca82:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca84:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca86:	08 95       	ret

0001ca88 <__floatunsisf>:
   1ca88:	e8 94       	clt
   1ca8a:	09 c0       	rjmp	.+18     	; 0x1ca9e <__floatsisf+0x12>

0001ca8c <__floatsisf>:
   1ca8c:	97 fb       	bst	r25, 7
   1ca8e:	3e f4       	brtc	.+14     	; 0x1ca9e <__floatsisf+0x12>
   1ca90:	90 95       	com	r25
   1ca92:	80 95       	com	r24
   1ca94:	70 95       	com	r23
   1ca96:	61 95       	neg	r22
   1ca98:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca9a:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca9c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca9e:	99 23       	and	r25, r25
   1caa0:	a9 f0       	breq	.+42     	; 0x1cacc <__floatsisf+0x40>
   1caa2:	f9 2f       	mov	r31, r25
   1caa4:	96 e9       	ldi	r25, 0x96	; 150
   1caa6:	bb 27       	eor	r27, r27
   1caa8:	93 95       	inc	r25
   1caaa:	f6 95       	lsr	r31
   1caac:	87 95       	ror	r24
   1caae:	77 95       	ror	r23
   1cab0:	67 95       	ror	r22
   1cab2:	b7 95       	ror	r27
   1cab4:	f1 11       	cpse	r31, r1
   1cab6:	f8 cf       	rjmp	.-16     	; 0x1caa8 <__floatsisf+0x1c>
   1cab8:	fa f4       	brpl	.+62     	; 0x1caf8 <__floatsisf+0x6c>
   1caba:	bb 0f       	add	r27, r27
   1cabc:	11 f4       	brne	.+4      	; 0x1cac2 <__floatsisf+0x36>
   1cabe:	60 ff       	sbrs	r22, 0
   1cac0:	1b c0       	rjmp	.+54     	; 0x1caf8 <__floatsisf+0x6c>
   1cac2:	6f 5f       	subi	r22, 0xFF	; 255
   1cac4:	7f 4f       	sbci	r23, 0xFF	; 255
   1cac6:	8f 4f       	sbci	r24, 0xFF	; 255
   1cac8:	9f 4f       	sbci	r25, 0xFF	; 255
   1caca:	16 c0       	rjmp	.+44     	; 0x1caf8 <__floatsisf+0x6c>
   1cacc:	88 23       	and	r24, r24
   1cace:	11 f0       	breq	.+4      	; 0x1cad4 <__floatsisf+0x48>
   1cad0:	96 e9       	ldi	r25, 0x96	; 150
   1cad2:	11 c0       	rjmp	.+34     	; 0x1caf6 <__floatsisf+0x6a>
   1cad4:	77 23       	and	r23, r23
   1cad6:	21 f0       	breq	.+8      	; 0x1cae0 <__floatsisf+0x54>
   1cad8:	9e e8       	ldi	r25, 0x8E	; 142
   1cada:	87 2f       	mov	r24, r23
   1cadc:	76 2f       	mov	r23, r22
   1cade:	05 c0       	rjmp	.+10     	; 0x1caea <__floatsisf+0x5e>
   1cae0:	66 23       	and	r22, r22
   1cae2:	71 f0       	breq	.+28     	; 0x1cb00 <__floatsisf+0x74>
   1cae4:	96 e8       	ldi	r25, 0x86	; 134
   1cae6:	86 2f       	mov	r24, r22
   1cae8:	70 e0       	ldi	r23, 0x00	; 0
   1caea:	60 e0       	ldi	r22, 0x00	; 0
   1caec:	2a f0       	brmi	.+10     	; 0x1caf8 <__floatsisf+0x6c>
   1caee:	9a 95       	dec	r25
   1caf0:	66 0f       	add	r22, r22
   1caf2:	77 1f       	adc	r23, r23
   1caf4:	88 1f       	adc	r24, r24
   1caf6:	da f7       	brpl	.-10     	; 0x1caee <__floatsisf+0x62>
   1caf8:	88 0f       	add	r24, r24
   1cafa:	96 95       	lsr	r25
   1cafc:	87 95       	ror	r24
   1cafe:	97 f9       	bld	r25, 7
   1cb00:	08 95       	ret

0001cb02 <__fp_cmp>:
   1cb02:	99 0f       	add	r25, r25
   1cb04:	00 08       	sbc	r0, r0
   1cb06:	55 0f       	add	r21, r21
   1cb08:	aa 0b       	sbc	r26, r26
   1cb0a:	e0 e8       	ldi	r30, 0x80	; 128
   1cb0c:	fe ef       	ldi	r31, 0xFE	; 254
   1cb0e:	16 16       	cp	r1, r22
   1cb10:	17 06       	cpc	r1, r23
   1cb12:	e8 07       	cpc	r30, r24
   1cb14:	f9 07       	cpc	r31, r25
   1cb16:	c0 f0       	brcs	.+48     	; 0x1cb48 <__fp_cmp+0x46>
   1cb18:	12 16       	cp	r1, r18
   1cb1a:	13 06       	cpc	r1, r19
   1cb1c:	e4 07       	cpc	r30, r20
   1cb1e:	f5 07       	cpc	r31, r21
   1cb20:	98 f0       	brcs	.+38     	; 0x1cb48 <__fp_cmp+0x46>
   1cb22:	62 1b       	sub	r22, r18
   1cb24:	73 0b       	sbc	r23, r19
   1cb26:	84 0b       	sbc	r24, r20
   1cb28:	95 0b       	sbc	r25, r21
   1cb2a:	39 f4       	brne	.+14     	; 0x1cb3a <__fp_cmp+0x38>
   1cb2c:	0a 26       	eor	r0, r26
   1cb2e:	61 f0       	breq	.+24     	; 0x1cb48 <__fp_cmp+0x46>
   1cb30:	23 2b       	or	r18, r19
   1cb32:	24 2b       	or	r18, r20
   1cb34:	25 2b       	or	r18, r21
   1cb36:	21 f4       	brne	.+8      	; 0x1cb40 <__fp_cmp+0x3e>
   1cb38:	08 95       	ret
   1cb3a:	0a 26       	eor	r0, r26
   1cb3c:	09 f4       	brne	.+2      	; 0x1cb40 <__fp_cmp+0x3e>
   1cb3e:	a1 40       	sbci	r26, 0x01	; 1
   1cb40:	a6 95       	lsr	r26
   1cb42:	8f ef       	ldi	r24, 0xFF	; 255
   1cb44:	81 1d       	adc	r24, r1
   1cb46:	81 1d       	adc	r24, r1
   1cb48:	08 95       	ret

0001cb4a <__fp_inf>:
   1cb4a:	97 f9       	bld	r25, 7
   1cb4c:	9f 67       	ori	r25, 0x7F	; 127
   1cb4e:	80 e8       	ldi	r24, 0x80	; 128
   1cb50:	70 e0       	ldi	r23, 0x00	; 0
   1cb52:	60 e0       	ldi	r22, 0x00	; 0
   1cb54:	08 95       	ret

0001cb56 <__fp_nan>:
   1cb56:	9f ef       	ldi	r25, 0xFF	; 255
   1cb58:	80 ec       	ldi	r24, 0xC0	; 192
   1cb5a:	08 95       	ret

0001cb5c <__fp_pscA>:
   1cb5c:	00 24       	eor	r0, r0
   1cb5e:	0a 94       	dec	r0
   1cb60:	16 16       	cp	r1, r22
   1cb62:	17 06       	cpc	r1, r23
   1cb64:	18 06       	cpc	r1, r24
   1cb66:	09 06       	cpc	r0, r25
   1cb68:	08 95       	ret

0001cb6a <__fp_pscB>:
   1cb6a:	00 24       	eor	r0, r0
   1cb6c:	0a 94       	dec	r0
   1cb6e:	12 16       	cp	r1, r18
   1cb70:	13 06       	cpc	r1, r19
   1cb72:	14 06       	cpc	r1, r20
   1cb74:	05 06       	cpc	r0, r21
   1cb76:	08 95       	ret

0001cb78 <__fp_round>:
   1cb78:	09 2e       	mov	r0, r25
   1cb7a:	03 94       	inc	r0
   1cb7c:	00 0c       	add	r0, r0
   1cb7e:	11 f4       	brne	.+4      	; 0x1cb84 <__fp_round+0xc>
   1cb80:	88 23       	and	r24, r24
   1cb82:	52 f0       	brmi	.+20     	; 0x1cb98 <__fp_round+0x20>
   1cb84:	bb 0f       	add	r27, r27
   1cb86:	40 f4       	brcc	.+16     	; 0x1cb98 <__fp_round+0x20>
   1cb88:	bf 2b       	or	r27, r31
   1cb8a:	11 f4       	brne	.+4      	; 0x1cb90 <__fp_round+0x18>
   1cb8c:	60 ff       	sbrs	r22, 0
   1cb8e:	04 c0       	rjmp	.+8      	; 0x1cb98 <__fp_round+0x20>
   1cb90:	6f 5f       	subi	r22, 0xFF	; 255
   1cb92:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb94:	8f 4f       	sbci	r24, 0xFF	; 255
   1cb96:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb98:	08 95       	ret

0001cb9a <__fp_split3>:
   1cb9a:	57 fd       	sbrc	r21, 7
   1cb9c:	90 58       	subi	r25, 0x80	; 128
   1cb9e:	44 0f       	add	r20, r20
   1cba0:	55 1f       	adc	r21, r21
   1cba2:	59 f0       	breq	.+22     	; 0x1cbba <__fp_splitA+0x10>
   1cba4:	5f 3f       	cpi	r21, 0xFF	; 255
   1cba6:	71 f0       	breq	.+28     	; 0x1cbc4 <__fp_splitA+0x1a>
   1cba8:	47 95       	ror	r20

0001cbaa <__fp_splitA>:
   1cbaa:	88 0f       	add	r24, r24
   1cbac:	97 fb       	bst	r25, 7
   1cbae:	99 1f       	adc	r25, r25
   1cbb0:	61 f0       	breq	.+24     	; 0x1cbca <__fp_splitA+0x20>
   1cbb2:	9f 3f       	cpi	r25, 0xFF	; 255
   1cbb4:	79 f0       	breq	.+30     	; 0x1cbd4 <__fp_splitA+0x2a>
   1cbb6:	87 95       	ror	r24
   1cbb8:	08 95       	ret
   1cbba:	12 16       	cp	r1, r18
   1cbbc:	13 06       	cpc	r1, r19
   1cbbe:	14 06       	cpc	r1, r20
   1cbc0:	55 1f       	adc	r21, r21
   1cbc2:	f2 cf       	rjmp	.-28     	; 0x1cba8 <__fp_split3+0xe>
   1cbc4:	46 95       	lsr	r20
   1cbc6:	f1 df       	rcall	.-30     	; 0x1cbaa <__fp_splitA>
   1cbc8:	08 c0       	rjmp	.+16     	; 0x1cbda <__fp_splitA+0x30>
   1cbca:	16 16       	cp	r1, r22
   1cbcc:	17 06       	cpc	r1, r23
   1cbce:	18 06       	cpc	r1, r24
   1cbd0:	99 1f       	adc	r25, r25
   1cbd2:	f1 cf       	rjmp	.-30     	; 0x1cbb6 <__fp_splitA+0xc>
   1cbd4:	86 95       	lsr	r24
   1cbd6:	71 05       	cpc	r23, r1
   1cbd8:	61 05       	cpc	r22, r1
   1cbda:	08 94       	sec
   1cbdc:	08 95       	ret

0001cbde <__fp_zero>:
   1cbde:	e8 94       	clt

0001cbe0 <__fp_szero>:
   1cbe0:	bb 27       	eor	r27, r27
   1cbe2:	66 27       	eor	r22, r22
   1cbe4:	77 27       	eor	r23, r23
   1cbe6:	cb 01       	movw	r24, r22
   1cbe8:	97 f9       	bld	r25, 7
   1cbea:	08 95       	ret

0001cbec <__gesf2>:
   1cbec:	8a df       	rcall	.-236    	; 0x1cb02 <__fp_cmp>
   1cbee:	08 f4       	brcc	.+2      	; 0x1cbf2 <__gesf2+0x6>
   1cbf0:	8f ef       	ldi	r24, 0xFF	; 255
   1cbf2:	08 95       	ret

0001cbf4 <__mulsf3>:
   1cbf4:	0b d0       	rcall	.+22     	; 0x1cc0c <__mulsf3x>
   1cbf6:	c0 cf       	rjmp	.-128    	; 0x1cb78 <__fp_round>
   1cbf8:	b1 df       	rcall	.-158    	; 0x1cb5c <__fp_pscA>
   1cbfa:	28 f0       	brcs	.+10     	; 0x1cc06 <__mulsf3+0x12>
   1cbfc:	b6 df       	rcall	.-148    	; 0x1cb6a <__fp_pscB>
   1cbfe:	18 f0       	brcs	.+6      	; 0x1cc06 <__mulsf3+0x12>
   1cc00:	95 23       	and	r25, r21
   1cc02:	09 f0       	breq	.+2      	; 0x1cc06 <__mulsf3+0x12>
   1cc04:	a2 cf       	rjmp	.-188    	; 0x1cb4a <__fp_inf>
   1cc06:	a7 cf       	rjmp	.-178    	; 0x1cb56 <__fp_nan>
   1cc08:	11 24       	eor	r1, r1
   1cc0a:	ea cf       	rjmp	.-44     	; 0x1cbe0 <__fp_szero>

0001cc0c <__mulsf3x>:
   1cc0c:	c6 df       	rcall	.-116    	; 0x1cb9a <__fp_split3>
   1cc0e:	a0 f3       	brcs	.-24     	; 0x1cbf8 <__mulsf3+0x4>

0001cc10 <__mulsf3_pse>:
   1cc10:	95 9f       	mul	r25, r21
   1cc12:	d1 f3       	breq	.-12     	; 0x1cc08 <__mulsf3+0x14>
   1cc14:	95 0f       	add	r25, r21
   1cc16:	50 e0       	ldi	r21, 0x00	; 0
   1cc18:	55 1f       	adc	r21, r21
   1cc1a:	62 9f       	mul	r22, r18
   1cc1c:	f0 01       	movw	r30, r0
   1cc1e:	72 9f       	mul	r23, r18
   1cc20:	bb 27       	eor	r27, r27
   1cc22:	f0 0d       	add	r31, r0
   1cc24:	b1 1d       	adc	r27, r1
   1cc26:	63 9f       	mul	r22, r19
   1cc28:	aa 27       	eor	r26, r26
   1cc2a:	f0 0d       	add	r31, r0
   1cc2c:	b1 1d       	adc	r27, r1
   1cc2e:	aa 1f       	adc	r26, r26
   1cc30:	64 9f       	mul	r22, r20
   1cc32:	66 27       	eor	r22, r22
   1cc34:	b0 0d       	add	r27, r0
   1cc36:	a1 1d       	adc	r26, r1
   1cc38:	66 1f       	adc	r22, r22
   1cc3a:	82 9f       	mul	r24, r18
   1cc3c:	22 27       	eor	r18, r18
   1cc3e:	b0 0d       	add	r27, r0
   1cc40:	a1 1d       	adc	r26, r1
   1cc42:	62 1f       	adc	r22, r18
   1cc44:	73 9f       	mul	r23, r19
   1cc46:	b0 0d       	add	r27, r0
   1cc48:	a1 1d       	adc	r26, r1
   1cc4a:	62 1f       	adc	r22, r18
   1cc4c:	83 9f       	mul	r24, r19
   1cc4e:	a0 0d       	add	r26, r0
   1cc50:	61 1d       	adc	r22, r1
   1cc52:	22 1f       	adc	r18, r18
   1cc54:	74 9f       	mul	r23, r20
   1cc56:	33 27       	eor	r19, r19
   1cc58:	a0 0d       	add	r26, r0
   1cc5a:	61 1d       	adc	r22, r1
   1cc5c:	23 1f       	adc	r18, r19
   1cc5e:	84 9f       	mul	r24, r20
   1cc60:	60 0d       	add	r22, r0
   1cc62:	21 1d       	adc	r18, r1
   1cc64:	82 2f       	mov	r24, r18
   1cc66:	76 2f       	mov	r23, r22
   1cc68:	6a 2f       	mov	r22, r26
   1cc6a:	11 24       	eor	r1, r1
   1cc6c:	9f 57       	subi	r25, 0x7F	; 127
   1cc6e:	50 40       	sbci	r21, 0x00	; 0
   1cc70:	8a f0       	brmi	.+34     	; 0x1cc94 <__mulsf3_pse+0x84>
   1cc72:	e1 f0       	breq	.+56     	; 0x1ccac <__mulsf3_pse+0x9c>
   1cc74:	88 23       	and	r24, r24
   1cc76:	4a f0       	brmi	.+18     	; 0x1cc8a <__mulsf3_pse+0x7a>
   1cc78:	ee 0f       	add	r30, r30
   1cc7a:	ff 1f       	adc	r31, r31
   1cc7c:	bb 1f       	adc	r27, r27
   1cc7e:	66 1f       	adc	r22, r22
   1cc80:	77 1f       	adc	r23, r23
   1cc82:	88 1f       	adc	r24, r24
   1cc84:	91 50       	subi	r25, 0x01	; 1
   1cc86:	50 40       	sbci	r21, 0x00	; 0
   1cc88:	a9 f7       	brne	.-22     	; 0x1cc74 <__mulsf3_pse+0x64>
   1cc8a:	9e 3f       	cpi	r25, 0xFE	; 254
   1cc8c:	51 05       	cpc	r21, r1
   1cc8e:	70 f0       	brcs	.+28     	; 0x1ccac <__mulsf3_pse+0x9c>
   1cc90:	5c cf       	rjmp	.-328    	; 0x1cb4a <__fp_inf>
   1cc92:	a6 cf       	rjmp	.-180    	; 0x1cbe0 <__fp_szero>
   1cc94:	5f 3f       	cpi	r21, 0xFF	; 255
   1cc96:	ec f3       	brlt	.-6      	; 0x1cc92 <__mulsf3_pse+0x82>
   1cc98:	98 3e       	cpi	r25, 0xE8	; 232
   1cc9a:	dc f3       	brlt	.-10     	; 0x1cc92 <__mulsf3_pse+0x82>
   1cc9c:	86 95       	lsr	r24
   1cc9e:	77 95       	ror	r23
   1cca0:	67 95       	ror	r22
   1cca2:	b7 95       	ror	r27
   1cca4:	f7 95       	ror	r31
   1cca6:	e7 95       	ror	r30
   1cca8:	9f 5f       	subi	r25, 0xFF	; 255
   1ccaa:	c1 f7       	brne	.-16     	; 0x1cc9c <__mulsf3_pse+0x8c>
   1ccac:	fe 2b       	or	r31, r30
   1ccae:	88 0f       	add	r24, r24
   1ccb0:	91 1d       	adc	r25, r1
   1ccb2:	96 95       	lsr	r25
   1ccb4:	87 95       	ror	r24
   1ccb6:	97 f9       	bld	r25, 7
   1ccb8:	08 95       	ret

0001ccba <round>:
   1ccba:	77 df       	rcall	.-274    	; 0x1cbaa <__fp_splitA>
   1ccbc:	e0 f0       	brcs	.+56     	; 0x1ccf6 <round+0x3c>
   1ccbe:	9e 37       	cpi	r25, 0x7E	; 126
   1ccc0:	d8 f0       	brcs	.+54     	; 0x1ccf8 <round+0x3e>
   1ccc2:	96 39       	cpi	r25, 0x96	; 150
   1ccc4:	b8 f4       	brcc	.+46     	; 0x1ccf4 <round+0x3a>
   1ccc6:	9e 38       	cpi	r25, 0x8E	; 142
   1ccc8:	48 f4       	brcc	.+18     	; 0x1ccdc <round+0x22>
   1ccca:	67 2f       	mov	r22, r23
   1cccc:	78 2f       	mov	r23, r24
   1ccce:	88 27       	eor	r24, r24
   1ccd0:	98 5f       	subi	r25, 0xF8	; 248
   1ccd2:	f9 cf       	rjmp	.-14     	; 0x1ccc6 <round+0xc>
   1ccd4:	86 95       	lsr	r24
   1ccd6:	77 95       	ror	r23
   1ccd8:	67 95       	ror	r22
   1ccda:	93 95       	inc	r25
   1ccdc:	95 39       	cpi	r25, 0x95	; 149
   1ccde:	d0 f3       	brcs	.-12     	; 0x1ccd4 <round+0x1a>
   1cce0:	b6 2f       	mov	r27, r22
   1cce2:	b1 70       	andi	r27, 0x01	; 1
   1cce4:	6b 0f       	add	r22, r27
   1cce6:	71 1d       	adc	r23, r1
   1cce8:	81 1d       	adc	r24, r1
   1ccea:	20 f4       	brcc	.+8      	; 0x1ccf4 <round+0x3a>
   1ccec:	87 95       	ror	r24
   1ccee:	77 95       	ror	r23
   1ccf0:	67 95       	ror	r22
   1ccf2:	93 95       	inc	r25
   1ccf4:	02 c0       	rjmp	.+4      	; 0x1ccfa <__fp_mintl>
   1ccf6:	1c c0       	rjmp	.+56     	; 0x1cd30 <__fp_mpack>
   1ccf8:	73 cf       	rjmp	.-282    	; 0x1cbe0 <__fp_szero>

0001ccfa <__fp_mintl>:
   1ccfa:	88 23       	and	r24, r24
   1ccfc:	71 f4       	brne	.+28     	; 0x1cd1a <__fp_mintl+0x20>
   1ccfe:	77 23       	and	r23, r23
   1cd00:	21 f0       	breq	.+8      	; 0x1cd0a <__fp_mintl+0x10>
   1cd02:	98 50       	subi	r25, 0x08	; 8
   1cd04:	87 2b       	or	r24, r23
   1cd06:	76 2f       	mov	r23, r22
   1cd08:	07 c0       	rjmp	.+14     	; 0x1cd18 <__fp_mintl+0x1e>
   1cd0a:	66 23       	and	r22, r22
   1cd0c:	11 f4       	brne	.+4      	; 0x1cd12 <__fp_mintl+0x18>
   1cd0e:	99 27       	eor	r25, r25
   1cd10:	0d c0       	rjmp	.+26     	; 0x1cd2c <__fp_mintl+0x32>
   1cd12:	90 51       	subi	r25, 0x10	; 16
   1cd14:	86 2b       	or	r24, r22
   1cd16:	70 e0       	ldi	r23, 0x00	; 0
   1cd18:	60 e0       	ldi	r22, 0x00	; 0
   1cd1a:	2a f0       	brmi	.+10     	; 0x1cd26 <__fp_mintl+0x2c>
   1cd1c:	9a 95       	dec	r25
   1cd1e:	66 0f       	add	r22, r22
   1cd20:	77 1f       	adc	r23, r23
   1cd22:	88 1f       	adc	r24, r24
   1cd24:	da f7       	brpl	.-10     	; 0x1cd1c <__fp_mintl+0x22>
   1cd26:	88 0f       	add	r24, r24
   1cd28:	96 95       	lsr	r25
   1cd2a:	87 95       	ror	r24
   1cd2c:	97 f9       	bld	r25, 7
   1cd2e:	08 95       	ret

0001cd30 <__fp_mpack>:
   1cd30:	9f 3f       	cpi	r25, 0xFF	; 255
   1cd32:	31 f0       	breq	.+12     	; 0x1cd40 <__fp_mpack_finite+0xc>

0001cd34 <__fp_mpack_finite>:
   1cd34:	91 50       	subi	r25, 0x01	; 1
   1cd36:	20 f4       	brcc	.+8      	; 0x1cd40 <__fp_mpack_finite+0xc>
   1cd38:	87 95       	ror	r24
   1cd3a:	77 95       	ror	r23
   1cd3c:	67 95       	ror	r22
   1cd3e:	b7 95       	ror	r27
   1cd40:	88 0f       	add	r24, r24
   1cd42:	91 1d       	adc	r25, r1
   1cd44:	96 95       	lsr	r25
   1cd46:	87 95       	ror	r24
   1cd48:	97 f9       	bld	r25, 7
   1cd4a:	08 95       	ret

0001cd4c <calloc>:
   1cd4c:	0f 93       	push	r16
   1cd4e:	1f 93       	push	r17
   1cd50:	cf 93       	push	r28
   1cd52:	df 93       	push	r29
   1cd54:	86 9f       	mul	r24, r22
   1cd56:	80 01       	movw	r16, r0
   1cd58:	87 9f       	mul	r24, r23
   1cd5a:	10 0d       	add	r17, r0
   1cd5c:	96 9f       	mul	r25, r22
   1cd5e:	10 0d       	add	r17, r0
   1cd60:	11 24       	eor	r1, r1
   1cd62:	c8 01       	movw	r24, r16
   1cd64:	0d d0       	rcall	.+26     	; 0x1cd80 <malloc>
   1cd66:	ec 01       	movw	r28, r24
   1cd68:	00 97       	sbiw	r24, 0x00	; 0
   1cd6a:	21 f0       	breq	.+8      	; 0x1cd74 <calloc+0x28>
   1cd6c:	a8 01       	movw	r20, r16
   1cd6e:	60 e0       	ldi	r22, 0x00	; 0
   1cd70:	70 e0       	ldi	r23, 0x00	; 0
   1cd72:	0a d2       	rcall	.+1044   	; 0x1d188 <memset>
   1cd74:	ce 01       	movw	r24, r28
   1cd76:	df 91       	pop	r29
   1cd78:	cf 91       	pop	r28
   1cd7a:	1f 91       	pop	r17
   1cd7c:	0f 91       	pop	r16
   1cd7e:	08 95       	ret

0001cd80 <malloc>:
   1cd80:	0f 93       	push	r16
   1cd82:	1f 93       	push	r17
   1cd84:	cf 93       	push	r28
   1cd86:	df 93       	push	r29
   1cd88:	82 30       	cpi	r24, 0x02	; 2
   1cd8a:	91 05       	cpc	r25, r1
   1cd8c:	10 f4       	brcc	.+4      	; 0x1cd92 <malloc+0x12>
   1cd8e:	82 e0       	ldi	r24, 0x02	; 2
   1cd90:	90 e0       	ldi	r25, 0x00	; 0
   1cd92:	e0 91 ba 21 	lds	r30, 0x21BA	; 0x8021ba <__flp>
   1cd96:	f0 91 bb 21 	lds	r31, 0x21BB	; 0x8021bb <__flp+0x1>
   1cd9a:	20 e0       	ldi	r18, 0x00	; 0
   1cd9c:	30 e0       	ldi	r19, 0x00	; 0
   1cd9e:	a0 e0       	ldi	r26, 0x00	; 0
   1cda0:	b0 e0       	ldi	r27, 0x00	; 0
   1cda2:	30 97       	sbiw	r30, 0x00	; 0
   1cda4:	19 f1       	breq	.+70     	; 0x1cdec <malloc+0x6c>
   1cda6:	40 81       	ld	r20, Z
   1cda8:	51 81       	ldd	r21, Z+1	; 0x01
   1cdaa:	02 81       	ldd	r16, Z+2	; 0x02
   1cdac:	13 81       	ldd	r17, Z+3	; 0x03
   1cdae:	48 17       	cp	r20, r24
   1cdb0:	59 07       	cpc	r21, r25
   1cdb2:	c8 f0       	brcs	.+50     	; 0x1cde6 <malloc+0x66>
   1cdb4:	84 17       	cp	r24, r20
   1cdb6:	95 07       	cpc	r25, r21
   1cdb8:	69 f4       	brne	.+26     	; 0x1cdd4 <malloc+0x54>
   1cdba:	10 97       	sbiw	r26, 0x00	; 0
   1cdbc:	31 f0       	breq	.+12     	; 0x1cdca <malloc+0x4a>
   1cdbe:	12 96       	adiw	r26, 0x02	; 2
   1cdc0:	0c 93       	st	X, r16
   1cdc2:	12 97       	sbiw	r26, 0x02	; 2
   1cdc4:	13 96       	adiw	r26, 0x03	; 3
   1cdc6:	1c 93       	st	X, r17
   1cdc8:	27 c0       	rjmp	.+78     	; 0x1ce18 <malloc+0x98>
   1cdca:	00 93 ba 21 	sts	0x21BA, r16	; 0x8021ba <__flp>
   1cdce:	10 93 bb 21 	sts	0x21BB, r17	; 0x8021bb <__flp+0x1>
   1cdd2:	22 c0       	rjmp	.+68     	; 0x1ce18 <malloc+0x98>
   1cdd4:	21 15       	cp	r18, r1
   1cdd6:	31 05       	cpc	r19, r1
   1cdd8:	19 f0       	breq	.+6      	; 0x1cde0 <malloc+0x60>
   1cdda:	42 17       	cp	r20, r18
   1cddc:	53 07       	cpc	r21, r19
   1cdde:	18 f4       	brcc	.+6      	; 0x1cde6 <malloc+0x66>
   1cde0:	9a 01       	movw	r18, r20
   1cde2:	bd 01       	movw	r22, r26
   1cde4:	ef 01       	movw	r28, r30
   1cde6:	df 01       	movw	r26, r30
   1cde8:	f8 01       	movw	r30, r16
   1cdea:	db cf       	rjmp	.-74     	; 0x1cda2 <malloc+0x22>
   1cdec:	21 15       	cp	r18, r1
   1cdee:	31 05       	cpc	r19, r1
   1cdf0:	f9 f0       	breq	.+62     	; 0x1ce30 <malloc+0xb0>
   1cdf2:	28 1b       	sub	r18, r24
   1cdf4:	39 0b       	sbc	r19, r25
   1cdf6:	24 30       	cpi	r18, 0x04	; 4
   1cdf8:	31 05       	cpc	r19, r1
   1cdfa:	80 f4       	brcc	.+32     	; 0x1ce1c <malloc+0x9c>
   1cdfc:	8a 81       	ldd	r24, Y+2	; 0x02
   1cdfe:	9b 81       	ldd	r25, Y+3	; 0x03
   1ce00:	61 15       	cp	r22, r1
   1ce02:	71 05       	cpc	r23, r1
   1ce04:	21 f0       	breq	.+8      	; 0x1ce0e <malloc+0x8e>
   1ce06:	fb 01       	movw	r30, r22
   1ce08:	93 83       	std	Z+3, r25	; 0x03
   1ce0a:	82 83       	std	Z+2, r24	; 0x02
   1ce0c:	04 c0       	rjmp	.+8      	; 0x1ce16 <malloc+0x96>
   1ce0e:	90 93 bb 21 	sts	0x21BB, r25	; 0x8021bb <__flp+0x1>
   1ce12:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <__flp>
   1ce16:	fe 01       	movw	r30, r28
   1ce18:	32 96       	adiw	r30, 0x02	; 2
   1ce1a:	44 c0       	rjmp	.+136    	; 0x1cea4 <malloc+0x124>
   1ce1c:	fe 01       	movw	r30, r28
   1ce1e:	e2 0f       	add	r30, r18
   1ce20:	f3 1f       	adc	r31, r19
   1ce22:	81 93       	st	Z+, r24
   1ce24:	91 93       	st	Z+, r25
   1ce26:	22 50       	subi	r18, 0x02	; 2
   1ce28:	31 09       	sbc	r19, r1
   1ce2a:	39 83       	std	Y+1, r19	; 0x01
   1ce2c:	28 83       	st	Y, r18
   1ce2e:	3a c0       	rjmp	.+116    	; 0x1cea4 <malloc+0x124>
   1ce30:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
   1ce34:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1ce38:	23 2b       	or	r18, r19
   1ce3a:	41 f4       	brne	.+16     	; 0x1ce4c <malloc+0xcc>
   1ce3c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1ce40:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1ce44:	30 93 b9 21 	sts	0x21B9, r19	; 0x8021b9 <__brkval+0x1>
   1ce48:	20 93 b8 21 	sts	0x21B8, r18	; 0x8021b8 <__brkval>
   1ce4c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
   1ce50:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
   1ce54:	21 15       	cp	r18, r1
   1ce56:	31 05       	cpc	r19, r1
   1ce58:	41 f4       	brne	.+16     	; 0x1ce6a <malloc+0xea>
   1ce5a:	2d b7       	in	r18, 0x3d	; 61
   1ce5c:	3e b7       	in	r19, 0x3e	; 62
   1ce5e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1ce62:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1ce66:	24 1b       	sub	r18, r20
   1ce68:	35 0b       	sbc	r19, r21
   1ce6a:	e0 91 b8 21 	lds	r30, 0x21B8	; 0x8021b8 <__brkval>
   1ce6e:	f0 91 b9 21 	lds	r31, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1ce72:	e2 17       	cp	r30, r18
   1ce74:	f3 07       	cpc	r31, r19
   1ce76:	a0 f4       	brcc	.+40     	; 0x1cea0 <malloc+0x120>
   1ce78:	2e 1b       	sub	r18, r30
   1ce7a:	3f 0b       	sbc	r19, r31
   1ce7c:	28 17       	cp	r18, r24
   1ce7e:	39 07       	cpc	r19, r25
   1ce80:	78 f0       	brcs	.+30     	; 0x1cea0 <malloc+0x120>
   1ce82:	ac 01       	movw	r20, r24
   1ce84:	4e 5f       	subi	r20, 0xFE	; 254
   1ce86:	5f 4f       	sbci	r21, 0xFF	; 255
   1ce88:	24 17       	cp	r18, r20
   1ce8a:	35 07       	cpc	r19, r21
   1ce8c:	48 f0       	brcs	.+18     	; 0x1cea0 <malloc+0x120>
   1ce8e:	4e 0f       	add	r20, r30
   1ce90:	5f 1f       	adc	r21, r31
   1ce92:	50 93 b9 21 	sts	0x21B9, r21	; 0x8021b9 <__brkval+0x1>
   1ce96:	40 93 b8 21 	sts	0x21B8, r20	; 0x8021b8 <__brkval>
   1ce9a:	81 93       	st	Z+, r24
   1ce9c:	91 93       	st	Z+, r25
   1ce9e:	02 c0       	rjmp	.+4      	; 0x1cea4 <malloc+0x124>
   1cea0:	e0 e0       	ldi	r30, 0x00	; 0
   1cea2:	f0 e0       	ldi	r31, 0x00	; 0
   1cea4:	cf 01       	movw	r24, r30
   1cea6:	df 91       	pop	r29
   1cea8:	cf 91       	pop	r28
   1ceaa:	1f 91       	pop	r17
   1ceac:	0f 91       	pop	r16
   1ceae:	08 95       	ret

0001ceb0 <free>:
   1ceb0:	cf 93       	push	r28
   1ceb2:	df 93       	push	r29
   1ceb4:	00 97       	sbiw	r24, 0x00	; 0
   1ceb6:	09 f4       	brne	.+2      	; 0x1ceba <free+0xa>
   1ceb8:	81 c0       	rjmp	.+258    	; 0x1cfbc <free+0x10c>
   1ceba:	fc 01       	movw	r30, r24
   1cebc:	32 97       	sbiw	r30, 0x02	; 2
   1cebe:	13 82       	std	Z+3, r1	; 0x03
   1cec0:	12 82       	std	Z+2, r1	; 0x02
   1cec2:	a0 91 ba 21 	lds	r26, 0x21BA	; 0x8021ba <__flp>
   1cec6:	b0 91 bb 21 	lds	r27, 0x21BB	; 0x8021bb <__flp+0x1>
   1ceca:	10 97       	sbiw	r26, 0x00	; 0
   1cecc:	81 f4       	brne	.+32     	; 0x1ceee <free+0x3e>
   1cece:	20 81       	ld	r18, Z
   1ced0:	31 81       	ldd	r19, Z+1	; 0x01
   1ced2:	82 0f       	add	r24, r18
   1ced4:	93 1f       	adc	r25, r19
   1ced6:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
   1ceda:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1cede:	28 17       	cp	r18, r24
   1cee0:	39 07       	cpc	r19, r25
   1cee2:	51 f5       	brne	.+84     	; 0x1cf38 <free+0x88>
   1cee4:	f0 93 b9 21 	sts	0x21B9, r31	; 0x8021b9 <__brkval+0x1>
   1cee8:	e0 93 b8 21 	sts	0x21B8, r30	; 0x8021b8 <__brkval>
   1ceec:	67 c0       	rjmp	.+206    	; 0x1cfbc <free+0x10c>
   1ceee:	ed 01       	movw	r28, r26
   1cef0:	20 e0       	ldi	r18, 0x00	; 0
   1cef2:	30 e0       	ldi	r19, 0x00	; 0
   1cef4:	ce 17       	cp	r28, r30
   1cef6:	df 07       	cpc	r29, r31
   1cef8:	40 f4       	brcc	.+16     	; 0x1cf0a <free+0x5a>
   1cefa:	4a 81       	ldd	r20, Y+2	; 0x02
   1cefc:	5b 81       	ldd	r21, Y+3	; 0x03
   1cefe:	9e 01       	movw	r18, r28
   1cf00:	41 15       	cp	r20, r1
   1cf02:	51 05       	cpc	r21, r1
   1cf04:	f1 f0       	breq	.+60     	; 0x1cf42 <free+0x92>
   1cf06:	ea 01       	movw	r28, r20
   1cf08:	f5 cf       	rjmp	.-22     	; 0x1cef4 <free+0x44>
   1cf0a:	d3 83       	std	Z+3, r29	; 0x03
   1cf0c:	c2 83       	std	Z+2, r28	; 0x02
   1cf0e:	40 81       	ld	r20, Z
   1cf10:	51 81       	ldd	r21, Z+1	; 0x01
   1cf12:	84 0f       	add	r24, r20
   1cf14:	95 1f       	adc	r25, r21
   1cf16:	c8 17       	cp	r28, r24
   1cf18:	d9 07       	cpc	r29, r25
   1cf1a:	59 f4       	brne	.+22     	; 0x1cf32 <free+0x82>
   1cf1c:	88 81       	ld	r24, Y
   1cf1e:	99 81       	ldd	r25, Y+1	; 0x01
   1cf20:	84 0f       	add	r24, r20
   1cf22:	95 1f       	adc	r25, r21
   1cf24:	02 96       	adiw	r24, 0x02	; 2
   1cf26:	91 83       	std	Z+1, r25	; 0x01
   1cf28:	80 83       	st	Z, r24
   1cf2a:	8a 81       	ldd	r24, Y+2	; 0x02
   1cf2c:	9b 81       	ldd	r25, Y+3	; 0x03
   1cf2e:	93 83       	std	Z+3, r25	; 0x03
   1cf30:	82 83       	std	Z+2, r24	; 0x02
   1cf32:	21 15       	cp	r18, r1
   1cf34:	31 05       	cpc	r19, r1
   1cf36:	29 f4       	brne	.+10     	; 0x1cf42 <free+0x92>
   1cf38:	f0 93 bb 21 	sts	0x21BB, r31	; 0x8021bb <__flp+0x1>
   1cf3c:	e0 93 ba 21 	sts	0x21BA, r30	; 0x8021ba <__flp>
   1cf40:	3d c0       	rjmp	.+122    	; 0x1cfbc <free+0x10c>
   1cf42:	e9 01       	movw	r28, r18
   1cf44:	fb 83       	std	Y+3, r31	; 0x03
   1cf46:	ea 83       	std	Y+2, r30	; 0x02
   1cf48:	49 91       	ld	r20, Y+
   1cf4a:	59 91       	ld	r21, Y+
   1cf4c:	c4 0f       	add	r28, r20
   1cf4e:	d5 1f       	adc	r29, r21
   1cf50:	ec 17       	cp	r30, r28
   1cf52:	fd 07       	cpc	r31, r29
   1cf54:	61 f4       	brne	.+24     	; 0x1cf6e <free+0xbe>
   1cf56:	80 81       	ld	r24, Z
   1cf58:	91 81       	ldd	r25, Z+1	; 0x01
   1cf5a:	84 0f       	add	r24, r20
   1cf5c:	95 1f       	adc	r25, r21
   1cf5e:	02 96       	adiw	r24, 0x02	; 2
   1cf60:	e9 01       	movw	r28, r18
   1cf62:	99 83       	std	Y+1, r25	; 0x01
   1cf64:	88 83       	st	Y, r24
   1cf66:	82 81       	ldd	r24, Z+2	; 0x02
   1cf68:	93 81       	ldd	r25, Z+3	; 0x03
   1cf6a:	9b 83       	std	Y+3, r25	; 0x03
   1cf6c:	8a 83       	std	Y+2, r24	; 0x02
   1cf6e:	e0 e0       	ldi	r30, 0x00	; 0
   1cf70:	f0 e0       	ldi	r31, 0x00	; 0
   1cf72:	12 96       	adiw	r26, 0x02	; 2
   1cf74:	8d 91       	ld	r24, X+
   1cf76:	9c 91       	ld	r25, X
   1cf78:	13 97       	sbiw	r26, 0x03	; 3
   1cf7a:	00 97       	sbiw	r24, 0x00	; 0
   1cf7c:	19 f0       	breq	.+6      	; 0x1cf84 <free+0xd4>
   1cf7e:	fd 01       	movw	r30, r26
   1cf80:	dc 01       	movw	r26, r24
   1cf82:	f7 cf       	rjmp	.-18     	; 0x1cf72 <free+0xc2>
   1cf84:	8d 91       	ld	r24, X+
   1cf86:	9c 91       	ld	r25, X
   1cf88:	11 97       	sbiw	r26, 0x01	; 1
   1cf8a:	9d 01       	movw	r18, r26
   1cf8c:	2e 5f       	subi	r18, 0xFE	; 254
   1cf8e:	3f 4f       	sbci	r19, 0xFF	; 255
   1cf90:	82 0f       	add	r24, r18
   1cf92:	93 1f       	adc	r25, r19
   1cf94:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
   1cf98:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1cf9c:	28 17       	cp	r18, r24
   1cf9e:	39 07       	cpc	r19, r25
   1cfa0:	69 f4       	brne	.+26     	; 0x1cfbc <free+0x10c>
   1cfa2:	30 97       	sbiw	r30, 0x00	; 0
   1cfa4:	29 f4       	brne	.+10     	; 0x1cfb0 <free+0x100>
   1cfa6:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <__flp+0x1>
   1cfaa:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <__flp>
   1cfae:	02 c0       	rjmp	.+4      	; 0x1cfb4 <free+0x104>
   1cfb0:	13 82       	std	Z+3, r1	; 0x03
   1cfb2:	12 82       	std	Z+2, r1	; 0x02
   1cfb4:	b0 93 b9 21 	sts	0x21B9, r27	; 0x8021b9 <__brkval+0x1>
   1cfb8:	a0 93 b8 21 	sts	0x21B8, r26	; 0x8021b8 <__brkval>
   1cfbc:	df 91       	pop	r29
   1cfbe:	cf 91       	pop	r28
   1cfc0:	08 95       	ret

0001cfc2 <__ftoa_engine>:
   1cfc2:	28 30       	cpi	r18, 0x08	; 8
   1cfc4:	08 f0       	brcs	.+2      	; 0x1cfc8 <__ftoa_engine+0x6>
   1cfc6:	27 e0       	ldi	r18, 0x07	; 7
   1cfc8:	33 27       	eor	r19, r19
   1cfca:	da 01       	movw	r26, r20
   1cfcc:	99 0f       	add	r25, r25
   1cfce:	31 1d       	adc	r19, r1
   1cfd0:	87 fd       	sbrc	r24, 7
   1cfd2:	91 60       	ori	r25, 0x01	; 1
   1cfd4:	00 96       	adiw	r24, 0x00	; 0
   1cfd6:	61 05       	cpc	r22, r1
   1cfd8:	71 05       	cpc	r23, r1
   1cfda:	39 f4       	brne	.+14     	; 0x1cfea <__ftoa_engine+0x28>
   1cfdc:	32 60       	ori	r19, 0x02	; 2
   1cfde:	2e 5f       	subi	r18, 0xFE	; 254
   1cfe0:	3d 93       	st	X+, r19
   1cfe2:	30 e3       	ldi	r19, 0x30	; 48
   1cfe4:	2a 95       	dec	r18
   1cfe6:	e1 f7       	brne	.-8      	; 0x1cfe0 <__ftoa_engine+0x1e>
   1cfe8:	08 95       	ret
   1cfea:	9f 3f       	cpi	r25, 0xFF	; 255
   1cfec:	30 f0       	brcs	.+12     	; 0x1cffa <__ftoa_engine+0x38>
   1cfee:	80 38       	cpi	r24, 0x80	; 128
   1cff0:	71 05       	cpc	r23, r1
   1cff2:	61 05       	cpc	r22, r1
   1cff4:	09 f0       	breq	.+2      	; 0x1cff8 <__ftoa_engine+0x36>
   1cff6:	3c 5f       	subi	r19, 0xFC	; 252
   1cff8:	3c 5f       	subi	r19, 0xFC	; 252
   1cffa:	3d 93       	st	X+, r19
   1cffc:	91 30       	cpi	r25, 0x01	; 1
   1cffe:	08 f0       	brcs	.+2      	; 0x1d002 <__ftoa_engine+0x40>
   1d000:	80 68       	ori	r24, 0x80	; 128
   1d002:	91 1d       	adc	r25, r1
   1d004:	df 93       	push	r29
   1d006:	cf 93       	push	r28
   1d008:	1f 93       	push	r17
   1d00a:	0f 93       	push	r16
   1d00c:	ff 92       	push	r15
   1d00e:	ef 92       	push	r14
   1d010:	19 2f       	mov	r17, r25
   1d012:	98 7f       	andi	r25, 0xF8	; 248
   1d014:	96 95       	lsr	r25
   1d016:	e9 2f       	mov	r30, r25
   1d018:	96 95       	lsr	r25
   1d01a:	96 95       	lsr	r25
   1d01c:	e9 0f       	add	r30, r25
   1d01e:	ff 27       	eor	r31, r31
   1d020:	e8 5c       	subi	r30, 0xC8	; 200
   1d022:	fd 4f       	sbci	r31, 0xFD	; 253
   1d024:	99 27       	eor	r25, r25
   1d026:	33 27       	eor	r19, r19
   1d028:	ee 24       	eor	r14, r14
   1d02a:	ff 24       	eor	r15, r15
   1d02c:	a7 01       	movw	r20, r14
   1d02e:	e7 01       	movw	r28, r14
   1d030:	05 90       	lpm	r0, Z+
   1d032:	08 94       	sec
   1d034:	07 94       	ror	r0
   1d036:	28 f4       	brcc	.+10     	; 0x1d042 <__ftoa_engine+0x80>
   1d038:	36 0f       	add	r19, r22
   1d03a:	e7 1e       	adc	r14, r23
   1d03c:	f8 1e       	adc	r15, r24
   1d03e:	49 1f       	adc	r20, r25
   1d040:	51 1d       	adc	r21, r1
   1d042:	66 0f       	add	r22, r22
   1d044:	77 1f       	adc	r23, r23
   1d046:	88 1f       	adc	r24, r24
   1d048:	99 1f       	adc	r25, r25
   1d04a:	06 94       	lsr	r0
   1d04c:	a1 f7       	brne	.-24     	; 0x1d036 <__ftoa_engine+0x74>
   1d04e:	05 90       	lpm	r0, Z+
   1d050:	07 94       	ror	r0
   1d052:	28 f4       	brcc	.+10     	; 0x1d05e <__ftoa_engine+0x9c>
   1d054:	e7 0e       	add	r14, r23
   1d056:	f8 1e       	adc	r15, r24
   1d058:	49 1f       	adc	r20, r25
   1d05a:	56 1f       	adc	r21, r22
   1d05c:	c1 1d       	adc	r28, r1
   1d05e:	77 0f       	add	r23, r23
   1d060:	88 1f       	adc	r24, r24
   1d062:	99 1f       	adc	r25, r25
   1d064:	66 1f       	adc	r22, r22
   1d066:	06 94       	lsr	r0
   1d068:	a1 f7       	brne	.-24     	; 0x1d052 <__ftoa_engine+0x90>
   1d06a:	05 90       	lpm	r0, Z+
   1d06c:	07 94       	ror	r0
   1d06e:	28 f4       	brcc	.+10     	; 0x1d07a <__ftoa_engine+0xb8>
   1d070:	f8 0e       	add	r15, r24
   1d072:	49 1f       	adc	r20, r25
   1d074:	56 1f       	adc	r21, r22
   1d076:	c7 1f       	adc	r28, r23
   1d078:	d1 1d       	adc	r29, r1
   1d07a:	88 0f       	add	r24, r24
   1d07c:	99 1f       	adc	r25, r25
   1d07e:	66 1f       	adc	r22, r22
   1d080:	77 1f       	adc	r23, r23
   1d082:	06 94       	lsr	r0
   1d084:	a1 f7       	brne	.-24     	; 0x1d06e <__ftoa_engine+0xac>
   1d086:	05 90       	lpm	r0, Z+
   1d088:	07 94       	ror	r0
   1d08a:	20 f4       	brcc	.+8      	; 0x1d094 <__ftoa_engine+0xd2>
   1d08c:	49 0f       	add	r20, r25
   1d08e:	56 1f       	adc	r21, r22
   1d090:	c7 1f       	adc	r28, r23
   1d092:	d8 1f       	adc	r29, r24
   1d094:	99 0f       	add	r25, r25
   1d096:	66 1f       	adc	r22, r22
   1d098:	77 1f       	adc	r23, r23
   1d09a:	88 1f       	adc	r24, r24
   1d09c:	06 94       	lsr	r0
   1d09e:	a9 f7       	brne	.-22     	; 0x1d08a <__ftoa_engine+0xc8>
   1d0a0:	84 91       	lpm	r24, Z
   1d0a2:	10 95       	com	r17
   1d0a4:	17 70       	andi	r17, 0x07	; 7
   1d0a6:	41 f0       	breq	.+16     	; 0x1d0b8 <__ftoa_engine+0xf6>
   1d0a8:	d6 95       	lsr	r29
   1d0aa:	c7 95       	ror	r28
   1d0ac:	57 95       	ror	r21
   1d0ae:	47 95       	ror	r20
   1d0b0:	f7 94       	ror	r15
   1d0b2:	e7 94       	ror	r14
   1d0b4:	1a 95       	dec	r17
   1d0b6:	c1 f7       	brne	.-16     	; 0x1d0a8 <__ftoa_engine+0xe6>
   1d0b8:	ee ed       	ldi	r30, 0xDE	; 222
   1d0ba:	f1 e0       	ldi	r31, 0x01	; 1
   1d0bc:	68 94       	set
   1d0be:	15 90       	lpm	r1, Z+
   1d0c0:	15 91       	lpm	r17, Z+
   1d0c2:	35 91       	lpm	r19, Z+
   1d0c4:	65 91       	lpm	r22, Z+
   1d0c6:	95 91       	lpm	r25, Z+
   1d0c8:	05 90       	lpm	r0, Z+
   1d0ca:	7f e2       	ldi	r23, 0x2F	; 47
   1d0cc:	73 95       	inc	r23
   1d0ce:	e1 18       	sub	r14, r1
   1d0d0:	f1 0a       	sbc	r15, r17
   1d0d2:	43 0b       	sbc	r20, r19
   1d0d4:	56 0b       	sbc	r21, r22
   1d0d6:	c9 0b       	sbc	r28, r25
   1d0d8:	d0 09       	sbc	r29, r0
   1d0da:	c0 f7       	brcc	.-16     	; 0x1d0cc <__ftoa_engine+0x10a>
   1d0dc:	e1 0c       	add	r14, r1
   1d0de:	f1 1e       	adc	r15, r17
   1d0e0:	43 1f       	adc	r20, r19
   1d0e2:	56 1f       	adc	r21, r22
   1d0e4:	c9 1f       	adc	r28, r25
   1d0e6:	d0 1d       	adc	r29, r0
   1d0e8:	7e f4       	brtc	.+30     	; 0x1d108 <__ftoa_engine+0x146>
   1d0ea:	70 33       	cpi	r23, 0x30	; 48
   1d0ec:	11 f4       	brne	.+4      	; 0x1d0f2 <__ftoa_engine+0x130>
   1d0ee:	8a 95       	dec	r24
   1d0f0:	e6 cf       	rjmp	.-52     	; 0x1d0be <__ftoa_engine+0xfc>
   1d0f2:	e8 94       	clt
   1d0f4:	01 50       	subi	r16, 0x01	; 1
   1d0f6:	30 f0       	brcs	.+12     	; 0x1d104 <__ftoa_engine+0x142>
   1d0f8:	08 0f       	add	r16, r24
   1d0fa:	0a f4       	brpl	.+2      	; 0x1d0fe <__ftoa_engine+0x13c>
   1d0fc:	00 27       	eor	r16, r16
   1d0fe:	02 17       	cp	r16, r18
   1d100:	08 f4       	brcc	.+2      	; 0x1d104 <__ftoa_engine+0x142>
   1d102:	20 2f       	mov	r18, r16
   1d104:	23 95       	inc	r18
   1d106:	02 2f       	mov	r16, r18
   1d108:	7a 33       	cpi	r23, 0x3A	; 58
   1d10a:	28 f0       	brcs	.+10     	; 0x1d116 <__ftoa_engine+0x154>
   1d10c:	79 e3       	ldi	r23, 0x39	; 57
   1d10e:	7d 93       	st	X+, r23
   1d110:	2a 95       	dec	r18
   1d112:	e9 f7       	brne	.-6      	; 0x1d10e <__ftoa_engine+0x14c>
   1d114:	10 c0       	rjmp	.+32     	; 0x1d136 <__ftoa_engine+0x174>
   1d116:	7d 93       	st	X+, r23
   1d118:	2a 95       	dec	r18
   1d11a:	89 f6       	brne	.-94     	; 0x1d0be <__ftoa_engine+0xfc>
   1d11c:	06 94       	lsr	r0
   1d11e:	97 95       	ror	r25
   1d120:	67 95       	ror	r22
   1d122:	37 95       	ror	r19
   1d124:	17 95       	ror	r17
   1d126:	17 94       	ror	r1
   1d128:	e1 18       	sub	r14, r1
   1d12a:	f1 0a       	sbc	r15, r17
   1d12c:	43 0b       	sbc	r20, r19
   1d12e:	56 0b       	sbc	r21, r22
   1d130:	c9 0b       	sbc	r28, r25
   1d132:	d0 09       	sbc	r29, r0
   1d134:	98 f0       	brcs	.+38     	; 0x1d15c <__ftoa_engine+0x19a>
   1d136:	23 95       	inc	r18
   1d138:	7e 91       	ld	r23, -X
   1d13a:	73 95       	inc	r23
   1d13c:	7a 33       	cpi	r23, 0x3A	; 58
   1d13e:	08 f0       	brcs	.+2      	; 0x1d142 <__ftoa_engine+0x180>
   1d140:	70 e3       	ldi	r23, 0x30	; 48
   1d142:	7c 93       	st	X, r23
   1d144:	20 13       	cpse	r18, r16
   1d146:	b8 f7       	brcc	.-18     	; 0x1d136 <__ftoa_engine+0x174>
   1d148:	7e 91       	ld	r23, -X
   1d14a:	70 61       	ori	r23, 0x10	; 16
   1d14c:	7d 93       	st	X+, r23
   1d14e:	30 f0       	brcs	.+12     	; 0x1d15c <__ftoa_engine+0x19a>
   1d150:	83 95       	inc	r24
   1d152:	71 e3       	ldi	r23, 0x31	; 49
   1d154:	7d 93       	st	X+, r23
   1d156:	70 e3       	ldi	r23, 0x30	; 48
   1d158:	2a 95       	dec	r18
   1d15a:	e1 f7       	brne	.-8      	; 0x1d154 <__ftoa_engine+0x192>
   1d15c:	11 24       	eor	r1, r1
   1d15e:	ef 90       	pop	r14
   1d160:	ff 90       	pop	r15
   1d162:	0f 91       	pop	r16
   1d164:	1f 91       	pop	r17
   1d166:	cf 91       	pop	r28
   1d168:	df 91       	pop	r29
   1d16a:	99 27       	eor	r25, r25
   1d16c:	87 fd       	sbrc	r24, 7
   1d16e:	90 95       	com	r25
   1d170:	08 95       	ret

0001d172 <strnlen_P>:
   1d172:	fc 01       	movw	r30, r24
   1d174:	05 90       	lpm	r0, Z+
   1d176:	61 50       	subi	r22, 0x01	; 1
   1d178:	70 40       	sbci	r23, 0x00	; 0
   1d17a:	01 10       	cpse	r0, r1
   1d17c:	d8 f7       	brcc	.-10     	; 0x1d174 <strnlen_P+0x2>
   1d17e:	80 95       	com	r24
   1d180:	90 95       	com	r25
   1d182:	8e 0f       	add	r24, r30
   1d184:	9f 1f       	adc	r25, r31
   1d186:	08 95       	ret

0001d188 <memset>:
   1d188:	dc 01       	movw	r26, r24
   1d18a:	01 c0       	rjmp	.+2      	; 0x1d18e <memset+0x6>
   1d18c:	6d 93       	st	X+, r22
   1d18e:	41 50       	subi	r20, 0x01	; 1
   1d190:	50 40       	sbci	r21, 0x00	; 0
   1d192:	e0 f7       	brcc	.-8      	; 0x1d18c <memset+0x4>
   1d194:	08 95       	ret

0001d196 <strnlen>:
   1d196:	fc 01       	movw	r30, r24
   1d198:	61 50       	subi	r22, 0x01	; 1
   1d19a:	70 40       	sbci	r23, 0x00	; 0
   1d19c:	01 90       	ld	r0, Z+
   1d19e:	01 10       	cpse	r0, r1
   1d1a0:	d8 f7       	brcc	.-10     	; 0x1d198 <strnlen+0x2>
   1d1a2:	80 95       	com	r24
   1d1a4:	90 95       	com	r25
   1d1a6:	8e 0f       	add	r24, r30
   1d1a8:	9f 1f       	adc	r25, r31
   1d1aa:	08 95       	ret

0001d1ac <__ultoa_invert>:
   1d1ac:	fa 01       	movw	r30, r20
   1d1ae:	aa 27       	eor	r26, r26
   1d1b0:	28 30       	cpi	r18, 0x08	; 8
   1d1b2:	51 f1       	breq	.+84     	; 0x1d208 <__ultoa_invert+0x5c>
   1d1b4:	20 31       	cpi	r18, 0x10	; 16
   1d1b6:	81 f1       	breq	.+96     	; 0x1d218 <__ultoa_invert+0x6c>
   1d1b8:	e8 94       	clt
   1d1ba:	6f 93       	push	r22
   1d1bc:	6e 7f       	andi	r22, 0xFE	; 254
   1d1be:	6e 5f       	subi	r22, 0xFE	; 254
   1d1c0:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1c2:	8f 4f       	sbci	r24, 0xFF	; 255
   1d1c4:	9f 4f       	sbci	r25, 0xFF	; 255
   1d1c6:	af 4f       	sbci	r26, 0xFF	; 255
   1d1c8:	b1 e0       	ldi	r27, 0x01	; 1
   1d1ca:	3e d0       	rcall	.+124    	; 0x1d248 <__ultoa_invert+0x9c>
   1d1cc:	b4 e0       	ldi	r27, 0x04	; 4
   1d1ce:	3c d0       	rcall	.+120    	; 0x1d248 <__ultoa_invert+0x9c>
   1d1d0:	67 0f       	add	r22, r23
   1d1d2:	78 1f       	adc	r23, r24
   1d1d4:	89 1f       	adc	r24, r25
   1d1d6:	9a 1f       	adc	r25, r26
   1d1d8:	a1 1d       	adc	r26, r1
   1d1da:	68 0f       	add	r22, r24
   1d1dc:	79 1f       	adc	r23, r25
   1d1de:	8a 1f       	adc	r24, r26
   1d1e0:	91 1d       	adc	r25, r1
   1d1e2:	a1 1d       	adc	r26, r1
   1d1e4:	6a 0f       	add	r22, r26
   1d1e6:	71 1d       	adc	r23, r1
   1d1e8:	81 1d       	adc	r24, r1
   1d1ea:	91 1d       	adc	r25, r1
   1d1ec:	a1 1d       	adc	r26, r1
   1d1ee:	20 d0       	rcall	.+64     	; 0x1d230 <__ultoa_invert+0x84>
   1d1f0:	09 f4       	brne	.+2      	; 0x1d1f4 <__ultoa_invert+0x48>
   1d1f2:	68 94       	set
   1d1f4:	3f 91       	pop	r19
   1d1f6:	2a e0       	ldi	r18, 0x0A	; 10
   1d1f8:	26 9f       	mul	r18, r22
   1d1fa:	11 24       	eor	r1, r1
   1d1fc:	30 19       	sub	r19, r0
   1d1fe:	30 5d       	subi	r19, 0xD0	; 208
   1d200:	31 93       	st	Z+, r19
   1d202:	de f6       	brtc	.-74     	; 0x1d1ba <__ultoa_invert+0xe>
   1d204:	cf 01       	movw	r24, r30
   1d206:	08 95       	ret
   1d208:	46 2f       	mov	r20, r22
   1d20a:	47 70       	andi	r20, 0x07	; 7
   1d20c:	40 5d       	subi	r20, 0xD0	; 208
   1d20e:	41 93       	st	Z+, r20
   1d210:	b3 e0       	ldi	r27, 0x03	; 3
   1d212:	0f d0       	rcall	.+30     	; 0x1d232 <__ultoa_invert+0x86>
   1d214:	c9 f7       	brne	.-14     	; 0x1d208 <__ultoa_invert+0x5c>
   1d216:	f6 cf       	rjmp	.-20     	; 0x1d204 <__ultoa_invert+0x58>
   1d218:	46 2f       	mov	r20, r22
   1d21a:	4f 70       	andi	r20, 0x0F	; 15
   1d21c:	40 5d       	subi	r20, 0xD0	; 208
   1d21e:	4a 33       	cpi	r20, 0x3A	; 58
   1d220:	18 f0       	brcs	.+6      	; 0x1d228 <__ultoa_invert+0x7c>
   1d222:	49 5d       	subi	r20, 0xD9	; 217
   1d224:	31 fd       	sbrc	r19, 1
   1d226:	40 52       	subi	r20, 0x20	; 32
   1d228:	41 93       	st	Z+, r20
   1d22a:	02 d0       	rcall	.+4      	; 0x1d230 <__ultoa_invert+0x84>
   1d22c:	a9 f7       	brne	.-22     	; 0x1d218 <__ultoa_invert+0x6c>
   1d22e:	ea cf       	rjmp	.-44     	; 0x1d204 <__ultoa_invert+0x58>
   1d230:	b4 e0       	ldi	r27, 0x04	; 4
   1d232:	a6 95       	lsr	r26
   1d234:	97 95       	ror	r25
   1d236:	87 95       	ror	r24
   1d238:	77 95       	ror	r23
   1d23a:	67 95       	ror	r22
   1d23c:	ba 95       	dec	r27
   1d23e:	c9 f7       	brne	.-14     	; 0x1d232 <__ultoa_invert+0x86>
   1d240:	00 97       	sbiw	r24, 0x00	; 0
   1d242:	61 05       	cpc	r22, r1
   1d244:	71 05       	cpc	r23, r1
   1d246:	08 95       	ret
   1d248:	9b 01       	movw	r18, r22
   1d24a:	ac 01       	movw	r20, r24
   1d24c:	0a 2e       	mov	r0, r26
   1d24e:	06 94       	lsr	r0
   1d250:	57 95       	ror	r21
   1d252:	47 95       	ror	r20
   1d254:	37 95       	ror	r19
   1d256:	27 95       	ror	r18
   1d258:	ba 95       	dec	r27
   1d25a:	c9 f7       	brne	.-14     	; 0x1d24e <__ultoa_invert+0xa2>
   1d25c:	62 0f       	add	r22, r18
   1d25e:	73 1f       	adc	r23, r19
   1d260:	84 1f       	adc	r24, r20
   1d262:	95 1f       	adc	r25, r21
   1d264:	a0 1d       	adc	r26, r0
   1d266:	08 95       	ret

0001d268 <_exit>:
   1d268:	f8 94       	cli

0001d26a <__stop_program>:
   1d26a:	ff cf       	rjmp	.-2      	; 0x1d26a <__stop_program>
