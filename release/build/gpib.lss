
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000165c  00800100  0001c786  0001c81a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001c786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a60  0080175c  0080175c  0001de76  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001de76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001de88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016c8  00000000  00000000  0001dec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000284a9  00000000  00000000  0001f590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000060d5  00000000  00000000  00047a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00011ff4  00000000  00000000  0004db0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004ff4  00000000  00000000  0005fb04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000481a  00000000  00000000  00064af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023608  00000000  00000000  00069312  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016b0  00000000  00000000  0008c91a  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
0080175c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d6 l     O .text	0000001e __c.3631
000001f4 l     O .text	0000001d __c.3626
0080175c l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000673c l     F .text	0000002a IS_Leap
00800383 l     O .data	00000018 __days
008017d4 l     O .bss	00000016 t.3685
008017ea l     O .bss	00000002 p.3686
008017b6 l     O .bss	00000008 ts.3764
008017be l     O .bss	00000016 t.3697
0080039b l     O .data	0000001a __days_sum
0000072d l     O .text	00000012 __c.3804
0000071c l     O .text	00000011 __c.3806
0000070b l     O .text	00000011 __c.3808
000006f9 l     O .text	00000012 __c.3810
000006e8 l     O .text	00000011 __c.3812
000006d1 l     O .text	00000017 __c.3814
0000073f l     O .text	00000021 __c.3783
00000760 l     O .text	0000001d __c.3658
0080180c l     O .bss	00000020 buf.3663
008017ec l     O .bss	00000020 buf.3675
000006bf l     O .text	00000012 __c.3860
000006aa l     O .text	00000015 __c.3862
00000693 l     O .text	00000017 __c.3864
00000679 l     O .text	0000001a __c.3866
00000655 l     O .text	00000024 __c.3868
00000643 l     O .text	00000012 __c.3875
00000632 l     O .text	00000011 __c.3877
00000621 l     O .text	00000011 __c.3879
0000060f l     O .text	00000012 __c.3881
000005fe l     O .text	00000011 __c.3883
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000cecc l     F .text	00000004 xchg_spi
0000ced0 l     F .text	0000000c deselect
0000cedc l     F .text	00000046 rcvr_datablock
0000cf46 l     F .text	00000044 select
0000077d l     O .text	00000010 __c.3626
0000cf8a l     F .text	00000086 send_cmd
0000d010 l     F .text	0000004e xmit_datablock
00801831 l     O .bss	00000001 CardType
00801833 l     O .bss	00000001 Timer1
00801832 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ba1 l     O .data	00000014 CSWTCH.97
00000bd8 l     O .text	00000018 __c.3603
00000bc0 l     O .text	00000018 __c.3610
0000e76a l     F .text	0000001a _fprintf_putc
0080193d l     O .bss	0000002e _dp
0080183e l     O .bss	000000ff _de
00000bac l     O .text	00000008 __c.3926
00000ba8 l     O .text	00000004 __c.3928
00000bb4 l     O .text	0000000c __c.3681
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e5a l     O .text	0000000c __c.3627
00000d94 l     O .text	000000c6 __c.3629
00000d15 l     O .text	0000000c __c.3690
00000d05 l     O .text	00000010 __c.3692
00000cf8 l     O .text	0000000d __c.3694
00000ce8 l     O .text	00000010 __c.3696
00000cdb l     O .text	0000000d __c.3698
00000cbf l     O .text	0000000f __c.3703
00000cce l     O .text	0000000d __c.3700
00000cac l     O .text	00000013 __c.3707
00800180 l     O .data	00000002 _pagesize
00000ca5 l     O .text	00000007 __c.3717
00000ca3 l     O .text	00000002 __c.3719
00000d2e l     O .text	00000010 __c.3672
00000d2c l     O .text	00000002 __c.3677
00000d21 l     O .text	0000000b __c.3679
00000c91 l     O .text	00000012 __c.3731
00000c8d l     O .text	00000004 __c.3733
00000c73 l     O .text	0000001a __c.3738
00000c52 l     O .text	00000021 __c.3751
00000c44 l     O .text	0000000e __c.3753
00000c2e l     O .text	00000016 __c.3755
00000bfb l     O .text	00000023 __c.3763
00000c1e l     O .text	00000010 __c.3760
00000bf0 l     O .text	0000000b __c.3767
00000d83 l     O .text	00000011 __c.3645
00000d72 l     O .text	00000011 __c.3653
00000d6e l     O .text	00000004 __c.3656
00000d5d l     O .text	00000011 __c.3658
00000d4f l     O .text	0000000e __c.3660
00000d3e l     O .text	00000011 __c.3662
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000011a7 l     O .text	00000011 __c.4229
00001194 l     O .text	00000013 __c.4234
0000116e l     O .text	00000026 __c.4239
00001153 l     O .text	0000001b __c.4241
0000112c l     O .text	00000027 __c.4246
00001111 l     O .text	0000001b __c.4248
00001105 l     O .text	0000000c __c.4266
000010d7 l     O .text	0000002e __c.4278
00001007 l     O .text	0000001a __c.4315
00001021 l     O .text	0000001b __c.4311
0000103c l     O .text	0000001b __c.4308
00001057 l     O .text	00000028 __c.4303
0000107f l     O .text	0000001a __c.4299
000010b8 l     O .text	0000001f __c.4293
00001099 l     O .text	0000001f __c.4296
00000ff4 l     O .text	00000013 __c.4319
00000fb3 l     O .text	00000009 __c.4367
00000fad l     O .text	00000006 __c.4369
00000fa2 l     O .text	0000000b __c.4373
00000f97 l     O .text	0000000b __c.4375
00000f8c l     O .text	0000000b __c.4377
00000fda l     O .text	0000001a __c.4335
00000fbc l     O .text	0000001e __c.4338
00000f73 l     O .text	00000019 __c.4393
00000f46 l     O .text	0000002d __c.4396
00000f1f l     O .text	00000027 __c.4400
00000f05 l     O .text	0000001a __c.4410
00000edd l     O .text	00000028 __c.4415
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000145a l     O .text	00000012 __c.4236
00001449 l     O .text	00000011 __c.4238
00001430 l     O .text	00000019 __c.4240
00001416 l     O .text	0000001a __c.4286
000013eb l     O .text	0000002b __c.4288
000013d4 l     O .text	00000017 __c.4290
000013c8 l     O .text	0000000c __c.4292
000013c2 l     O .text	00000006 __c.4296
000013b0 l     O .text	00000012 __c.4298
000013a9 l     O .text	00000007 __c.4303
0000139e l     O .text	0000000b __c.4305
00001397 l     O .text	00000007 __c.4307
0000138a l     O .text	0000000d __c.4309
00001379 l     O .text	00000011 __c.4311
00001358 l     O .text	00000021 __c.4338
0000133e l     O .text	0000001a __c.4340
00001326 l     O .text	00000018 __c.4345
0000130e l     O .text	00000018 __c.4347
00001307 l     O .text	00000007 __c.4349
00001300 l     O .text	00000007 __c.4351
000012f9 l     O .text	00000007 __c.4353
000012ed l     O .text	0000000c __c.4355
000012e0 l     O .text	0000000d __c.4357
000012d9 l     O .text	00000007 __c.4359
000012b8 l     O .text	00000021 __c.4361
00001265 l     O .text	00000007 __c.4381
00001254 l     O .text	00000011 __c.4383
00001242 l     O .text	00000012 __c.4385
0000122e l     O .text	00000014 __c.4387
0000121e l     O .text	00000010 __c.4389
00001212 l     O .text	0000000c __c.4391
00001201 l     O .text	00000011 __c.4396
000011ef l     O .text	00000012 __c.4398
000011c9 l     O .text	00000026 __c.4400
000011b8 l     O .text	00000011 __c.4405
000012b1 l     O .text	00000007 __c.4366
000012af l     O .text	00000002 __c.4368
0000129d l     O .text	00000012 __c.4370
0000128c l     O .text	00000011 __c.4372
00001278 l     O .text	00000014 __c.4374
0000126c l     O .text	0000000c __c.4376
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001cd5 l     O .text	00000015 __c.4455
00001cc9 l     O .text	0000000c __c.4466
00001cc5 l     O .text	00000004 __c.4476
0000198f l     O .text	00000012 __c.4620
00001971 l     O .text	00000002 __c.4629
00001973 l     O .text	00000009 __c.4627
0000197c l     O .text	0000000a __c.4625
00001986 l     O .text	00000009 __c.4623
0000196f l     O .text	00000002 __c.4634
0000194f l     O .text	00000020 __c.4643
000018d4 l     O .text	00000002 __c.4658
00001909 l     O .text	0000000a __c.4652
000018ea l     O .text	0000001f __c.4654
000018d6 l     O .text	00000014 __c.4656
00001946 l     O .text	00000009 __c.4646
00001927 l     O .text	0000001f __c.4648
00001913 l     O .text	00000014 __c.4650
000018d2 l     O .text	00000002 __c.4663
000018ad l     O .text	00000025 __c.4702
00001874 l     O .text	00000039 __c.4704
0000183f l     O .text	00000035 __c.4706
0000180a l     O .text	00000035 __c.4708
000017d2 l     O .text	00000038 __c.4710
000017a7 l     O .text	0000002b __c.4712
00001783 l     O .text	00000024 __c.4725
00001761 l     O .text	00000022 __c.4733
00801983 l     O .bss	00000002 stack_ind
00801979 l     O .bss	0000000a stack_p
00001742 l     O .text	0000001f __c.4769
000016d5 l     O .text	00000037 __c.4784
0000170c l     O .text	00000036 __c.4782
00001cb8 l     O .text	0000000d __c.4495
00001a07 l     O .text	00000022 __c.4606
00001a29 l     O .text	00000030 __c.4603
00001a59 l     O .text	0000002f __c.4594
00001a88 l     O .text	00000030 __c.4591
00001ab8 l     O .text	0000002e __c.4582
00001ae6 l     O .text	0000002e __c.4574
00001c9a l     O .text	0000001e __c.4497
00001c78 l     O .text	00000022 __c.4500
00001c56 l     O .text	00000022 __c.4511
00001c2c l     O .text	0000002a __c.4515
00001bfb l     O .text	00000031 __c.4518
00001bce l     O .text	0000002d __c.4528
00001ba0 l     O .text	0000002e __c.4536
00001b72 l     O .text	0000002e __c.4539
00001b40 l     O .text	00000032 __c.4547
00001b14 l     O .text	0000002c __c.4564
000019e5 l     O .text	00000022 __c.4610
000019c8 l     O .text	0000001d __c.4612
000019a1 l     O .text	00000027 __c.4614
00001655 l     O .text	0000001a __c.4809
0000164d l     O .text	00000008 __c.4811
0000166f l     O .text	00000022 __c.4807
00001699 l     O .text	0000001a __c.4803
00001691 l     O .text	00000008 __c.4805
000016b3 l     O .text	00000022 __c.4801
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019a5 l     O .bss	00000005 B.4241
00801992 l     O .bss	00000013 B.4245
00801985 l     O .bss	0000000d B.4249
0000235b l     O .text	00000005 __c.4352
00002350 l     O .text	0000000b __c.4354
0000233c l     O .text	00000014 __c.4364
00002321 l     O .text	0000001b __c.4366
00002310 l     O .text	00000011 __c.4374
000022ed l     O .text	00000023 __c.4376
000022d0 l     O .text	0000001d __c.4378
000022b1 l     O .text	0000001f __c.4380
00002299 l     O .text	00000018 __c.4385
0000227f l     O .text	0000001a __c.4390
00002259 l     O .text	00000026 __c.4399
00002240 l     O .text	00000019 __c.4401
00002144 l     O .text	00000025 __c.4423
00002169 l     O .text	0000001a __c.4421
00002183 l     O .text	00000016 __c.4419
00002199 l     O .text	0000000e __c.4417
000021a7 l     O .text	0000001c __c.4415
000021c3 l     O .text	0000001d __c.4413
0000222a l     O .text	00000016 __c.4403
00002211 l     O .text	00000019 __c.4406
000021f9 l     O .text	00000018 __c.4408
000021e0 l     O .text	00000019 __c.4411
00002123 l     O .text	00000021 __c.4425
0000210d l     O .text	00000016 __c.4427
000020f0 l     O .text	0000001d __c.4429
000020d4 l     O .text	0000001c __c.4431
000020c3 l     O .text	00000011 __c.4433
000020a5 l     O .text	0000001e __c.4435
00002086 l     O .text	0000001f __c.4437
0000206b l     O .text	0000001b __c.4439
00002052 l     O .text	00000019 __c.4441
0000203b l     O .text	00000017 __c.4443
00002018 l     O .text	00000023 __c.4445
00001ff8 l     O .text	00000020 __c.4447
00001fc0 l     O .text	00000038 __c.4450
00001e7d l     O .text	00000020 __c.4483
00001e69 l     O .text	00000014 __c.4485
00002400 l     O .text	00000029 __c.4313
000023b3 l     O .text	00000026 __c.4321
000023d9 l     O .text	00000014 __c.4319
000023ed l     O .text	00000013 __c.4315
0000238b l     O .text	00000028 __c.4325
00002360 l     O .text	0000002b __c.4327
00001e4f l     O .text	0000001a __c.4492
00001e3c l     O .text	00000013 __c.4494
00002509 l     O .text	00000013 __c.4255
00001e30 l     O .text	0000000c __c.4508
00001e1d l     O .text	00000013 __c.4515
00001e0e l     O .text	0000000f __c.4517
00001fad l     O .text	00000013 __c.4459
00001f94 l     O .text	00000019 __c.4461
00001f6f l     O .text	00000025 __c.4464
00001f52 l     O .text	0000001d __c.4467
00001f34 l     O .text	0000001e __c.4469
00001f0d l     O .text	00000027 __c.4471
00001ef9 l     O .text	00000014 __c.4473
00001ed9 l     O .text	00000020 __c.4475
00001e9d l     O .text	0000003c __c.4478
00001deb l     O .text	00000023 __c.4531
000024c5 l     O .text	00000028 __c.4288
000024a7 l     O .text	0000001e __c.4290
00002476 l     O .text	00000019 __c.4294
0000248f l     O .text	00000018 __c.4292
00002451 l     O .text	00000025 __c.4299
00002429 l     O .text	00000028 __c.4301
000024ed l     O .text	0000001c __c.4271
00001dd5 l     O .text	00000016 __c.4536
00001dbf l     O .text	00000016 __c.4538
00001daa l     O .text	00000015 __c.4540
00001d9b l     O .text	0000000f __c.4542
00001d87 l     O .text	00000014 __c.4544
00001d53 l     O .text	00000034 __c.4546
00001d1f l     O .text	00000034 __c.4548
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019f7 l     O .bss	00000002 lcd_display_time
00004601 l     O .text	00000030 __c.4453
000045e2 l     O .text	0000001f __c.4455
000045c5 l     O .text	0000001d __c.4457
000045b5 l     O .text	00000010 __c.4459
0000458e l     O .text	00000027 __c.4461
00004574 l     O .text	0000001a __c.4463
0000455a l     O .text	0000001a __c.4465
00004558 l     O .text	00000002 __c.4467
00004542 l     O .text	00000016 __c.4481
00004524 l     O .text	0000001e __c.4487
0000450e l     O .text	00000016 __c.4489
00004508 l     O .text	00000006 __c.4491
00004502 l     O .text	00000006 __c.4493
000044e8 l     O .text	0000001a __c.4495
000044e2 l     O .text	00000006 __c.4502
000044dc l     O .text	00000006 __c.4504
000044ba l     O .text	00000022 __c.4511
0001b8ec l     F .text	00000170 user_task.part.0
000044b7 l     O .text	00000003 __c.4522
000044b3 l     O .text	00000004 __c.4524
000044a7 l     O .text	0000000c __c.4526
000044a0 l     O .text	00000007 __c.4535
0000448f l     O .text	00000011 __c.4537
00004468 l     O .text	00000027 __c.4539
00004449 l     O .text	0000001f __c.4541
0000442c l     O .text	0000001d __c.4543
0000441c l     O .text	00000010 __c.4545
000043f5 l     O .text	00000027 __c.4547
000043db l     O .text	0000001a __c.4549
000043c1 l     O .text	0000001a __c.4551
000043ab l     O .text	00000016 __c.4553
00004395 l     O .text	00000016 __c.4555
00004383 l     O .text	00000012 __c.4557
00004374 l     O .text	0000000f __c.4559
00004346 l     O .text	0000002e __c.4561
0000432e l     O .text	00000018 __c.4563
0000431d l     O .text	00000011 __c.4565
00004307 l     O .text	00000016 __c.4567
000042f2 l     O .text	00000015 __c.4569
000042e0 l     O .text	00000012 __c.4571
000042c8 l     O .text	00000018 __c.4573
000042b3 l     O .text	00000015 __c.4575
0000429d l     O .text	00000016 __c.4577
00004287 l     O .text	00000016 __c.4579
00004276 l     O .text	00000011 __c.4581
00004270 l     O .text	00000006 __c.4583
0000426a l     O .text	00000006 __c.4585
00004250 l     O .text	0000001a __c.4587
0000423c l     O .text	00000014 __c.4589
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000043d l     O .text	00000018 __c.3602
00000424 l     O .text	00000019 __c.3604
0000040e l     O .text	00000016 __c.3606
000003f2 l     O .text	0000001c __c.3649
00801763 l     O .bss	00000001 i2c_init_status
000003db l     O .text	00000017 __c.3655
000055be l     F .text	00000014 i2c_next
000003d5 l     O .text	00000006 __c.3705
000003c7 l     O .text	0000000e __c.3707
000003bd l     O .text	0000000a __c.3709
000003b1 l     O .text	0000000c __c.3711
0000039f l     O .text	00000012 __c.3713
0000038d l     O .text	00000012 __c.3715
0000037a l     O .text	00000013 __c.3717
00000378 l     O .text	00000002 __c.3719
00000365 l     O .text	00000013 __c.3724
00000351 l     O .text	00000014 __c.3726
00000347 l     O .text	0000000a __c.3728
00000345 l     O .text	00000002 __c.3730
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000532 l     O .text	00000020 __c.3595
0000050c l     O .text	00000026 __c.3638
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000076b0 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008830 l     F .text	0000002a ld_dword
0000885a l     F .text	0000000c st_dword
00008866 l     F .text	00000012 mem_set
00008878 l     F .text	0000001e mem_cmp
00008896 l     F .text	0000010c tchar2uni
000089a2 l     F .text	00000050 clst2sect
000089f2 l     F .text	00000078 clmt_clust
00008a6a l     F .text	0000001e sum_sfn
00008a88 l     F .text	00000058 get_ldnumber
0080182c l     O .bss	00000001 CurrVol
00008ae0 l     F .text	00000058 validate
00008b38 l     F .text	00000016 mem_cpy.part.0
00008b4e l     F .text	0000015a put_utf
00008ca8 l     F .text	00000220 get_fileinfo
00008ec8 l     F .text	0000002a ld_clust.isra.4
00008ef2 l     F .text	0000001a st_clust.isra.5
00008f0c l     F .text	000000a6 sync_window.part.6
00008fb2 l     F .text	000000e4 sync_fs
00009096 l     F .text	00000150 dir_clear
000091e6 l     F .text	00000076 move_window
0000925c l     F .text	00000080 check_fs
000092dc l     F .text	000004b4 mount_volume
0080182f l     O .bss	00000002 FatFs
0080182d l     O .bss	00000002 Fsid
00009790 l     F .text	000001f6 put_fat
00009986 l     F .text	00000168 get_fat.isra.10
00009aee l     F .text	00000182 dir_sdi
00009c70 l     F .text	0000024c create_chain
00009ebc l     F .text	00000122 remove_chain
00009fde l     F .text	000001d0 dir_next
0000a1ae l     F .text	00000072 dir_alloc
0000a220 l     F .text	00000192 dir_read
008004e6 l     O .data	0000000d LfnOfs
0000a3b2 l     F .text	00000090 dir_remove
0000a442 l     F .text	0000021c dir_find
0000a65e l     F .text	0000031c dir_register
0000a97a l     F .text	00000462 follow_path
00800466 l     O .data	00000080 ExCvt
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008007a1 l     O .data	00000100 uc437
008004f3 l     O .data	000000bc cvt2.1843
008005af l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d93a l     F .text	00000048 mmc_task
0000083b l     O .text	0000001c __c.3603
0000082e l     O .text	0000000d __c.3631
0000081e l     O .text	00000010 __c.3644
00801834 l     O .bss	00000002 mmc_init_flag
000007fe l     O .text	00000020 __c.3646
000007eb l     O .text	00000013 __c.3648
000007df l     O .text	0000000c __c.3650
000007ce l     O .text	00000011 __c.3652
000007b0 l     O .text	0000001e __c.3655
0000079b l     O .text	00000015 __c.3657
0000078d l     O .text	0000000e __c.3659
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a4b l     O .text	00000007 __c.3605
008008c5 l     O .data	00000008 CSWTCH.25
00000a3a l     O .text	00000011 __c.3641
00000a1c l     O .text	0000001e __c.3643
000009fd l     O .text	0000001f __c.3645
000009df l     O .text	0000001e __c.3647
000009c1 l     O .text	0000001e __c.3649
000009a2 l     O .text	0000001f __c.3651
00000983 l     O .text	0000001f __c.3653
00000964 l     O .text	0000001f __c.3655
00000945 l     O .text	0000001f __c.3657
00000926 l     O .text	0000001f __c.3659
00000908 l     O .text	0000001e __c.3661
000008e3 l     O .text	00000025 __c.3663
00000896 l     O .text	0000004d __c.3665
0000087b l     O .text	0000001b __c.3671
00000859 l     O .text	00000022 __c.3673
00000857 l     O .text	00000002 __c.3675
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b9c l     O .text	0000000c __c.3596
00000b20 l     O .text	0000007c __c.3598
00000a90 l     O .text	0000000e __c.3637
00000a67 l     O .text	00000029 __c.3641
00000a52 l     O .text	00000015 __c.3643
00000af0 l     O .text	00000020 __c.3616
00000ae0 l     O .text	00000010 __c.3618
00000acc l     O .text	00000014 __c.3620
00000abe l     O .text	0000000e __c.3622
00000a9e l     O .text	00000020 __c.3624
00000b10 l     O .text	00000010 __c.3608
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001642 l     O .text	0000000b __c.4421
00001479 l     O .text	000001c9 __c.4423
0000146c l     O .text	0000000d __c.4431
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001cfb l     O .text	00000007 __c.3650
00001d02 l     O .text	0000001d __c.3646
00001cea l     O .text	00000011 __c.3652
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00015ad0 l     F .text	000000ac amigo_overflow_check
00002cb7 l     O .text	00000019 __c.4178
00015b7c l     F .text	000000e8 amigo_chs_to_logical
00002c64 l     O .text	0000002b __c.4171
00002d37 l     O .text	00000018 __c.4148
00002d19 l     O .text	0000001e __c.4154
00002cff l     O .text	0000001a __c.4156
00002cea l     O .text	00000015 __c.4162
00002cd0 l     O .text	0000001a __c.4164
00002c8f l     O .text	00000028 __c.4201
00002c54 l     O .text	00000010 __c.4212
00002c3f l     O .text	00000015 __c.4216
00002c2d l     O .text	00000012 __c.4222
00002c13 l     O .text	0000001a __c.4228
00002c01 l     O .text	00000012 __c.4235
00002be2 l     O .text	0000001f __c.4237
00002bc8 l     O .text	0000001a __c.4244
00002bbb l     O .text	0000000d __c.4246
00002bac l     O .text	0000000f __c.4259
00002b45 l     O .text	00000067 __c.4266
00002ade l     O .text	00000067 __c.4268
00002a77 l     O .text	00000067 __c.4270
00002a12 l     O .text	00000065 __c.4272
000029c2 l     O .text	00000050 __c.4277
00002972 l     O .text	00000050 __c.4279
00002922 l     O .text	00000050 __c.4281
000028d1 l     O .text	00000051 __c.4283
0000289f l     O .text	00000032 __c.4295
0000287d l     O .text	00000022 __c.4297
0000285c l     O .text	00000021 __c.4299
0000283b l     O .text	00000021 __c.4301
0000280c l     O .text	0000002f __c.4303
000027ec l     O .text	00000020 __c.4306
000027d8 l     O .text	00000014 __c.4309
000027c4 l     O .text	00000014 __c.4312
0000279b l     O .text	00000029 __c.4314
0000277a l     O .text	00000021 __c.4316
0000276a l     O .text	00000010 __c.4319
00002748 l     O .text	00000022 __c.4321
0000272c l     O .text	0000001c __c.4323
00002703 l     O .text	00000029 __c.4325
000026e3 l     O .text	00000020 __c.4327
000026b8 l     O .text	0000002b __c.4329
00002699 l     O .text	0000001f __c.4331
00002689 l     O .text	00000010 __c.4334
00002657 l     O .text	00000032 __c.4339
00002637 l     O .text	00000020 __c.4343
00002616 l     O .text	00000021 __c.4346
000025f7 l     O .text	0000001f __c.4349
000025d5 l     O .text	00000022 __c.4352
000025b9 l     O .text	0000001c __c.4355
00002599 l     O .text	00000020 __c.4358
00002570 l     O .text	00000029 __c.4363
00002545 l     O .text	0000002b __c.4366
0000251c l     O .text	00000029 __c.4369
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002d8c l     O .text	00000021 __c.4135
00002dbb l     O .text	00000015 __c.4127
00002dad l     O .text	0000000e __c.4129
00002df2 l     O .text	00000022 __c.4117
00002ddc l     O .text	00000016 __c.4119
00002dd0 l     O .text	0000000c __c.4121
00002d85 l     O .text	00000007 __c.4141
00002d69 l     O .text	0000001c __c.4146
00002d4f l     O .text	0000001a __c.4148
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004232 l     O .text	0000000a __c.3854
00004069 l     O .text	000001c9 __c.3856
0000401f l     O .text	00000029 __c.3875
00004007 l     O .text	00000018 __c.3880
00003fe2 l     O .text	00000025 __c.3892
00003fc9 l     O .text	00000019 __c.3898
00003fa8 l     O .text	00000021 __c.3905
00003f6c l     O .text	0000003c __c.3914
00003f2f l     O .text	0000003d __c.3923
008019d7 l     O .bss	00000020 _lif_ctime_buf.4026
008019b7 l     O .bss	00000020 _timestr.4031
00003f2a l     O .text	00000005 __c.4046
00003f10 l     O .text	0000001a __c.4048
00003ef3 l     O .text	0000001d __c.4050
00003ed6 l     O .text	0000001d __c.4052
00003eb9 l     O .text	0000001d __c.4054
00003e9c l     O .text	0000001d __c.4056
00003e7f l     O .text	0000001d __c.4058
00003e62 l     O .text	0000001d __c.4060
00003e45 l     O .text	0000001d __c.4062
00003e28 l     O .text	0000001d __c.4064
00003e0e l     O .text	0000001a __c.4066
00003df2 l     O .text	0000001c __c.4068
00003dd5 l     O .text	0000001d __c.4070
00003db8 l     O .text	0000001d __c.4072
00003d9c l     O .text	0000001c __c.4074
00003d80 l     O .text	0000001c __c.4076
00003d66 l     O .text	0000001a __c.4078
00003d4c l     O .text	0000001a __c.4080
00003d30 l     O .text	0000001c __c.4082
00003d14 l     O .text	0000001c __c.4084
00003cf7 l     O .text	0000001d __c.4086
00003cda l     O .text	0000001d __c.4088
00003cbd l     O .text	0000001d __c.4090
00003ca1 l     O .text	0000001c __c.4092
00003c87 l     O .text	0000001a __c.4094
00003c85 l     O .text	00000002 __c.4096
00003c66 l     O .text	0000001f __c.4103
00003c2d l     O .text	00000039 __c.4105
00003c15 l     O .text	00000018 __c.4107
00003bdc l     O .text	00000039 __c.4109
00003ba3 l     O .text	00000039 __c.4111
00003b7e l     O .text	00000025 __c.4113
00003b4f l     O .text	0000002f __c.4115
00003b23 l     O .text	0000002c __c.4117
00003b02 l     O .text	00000021 __c.4123
00003abe l     O .text	00000044 __c.4125
00003a7d l     O .text	00000041 __c.4127
00003a4f l     O .text	0000002e __c.4129
00003a04 l     O .text	0000004b __c.4131
000039b9 l     O .text	0000004b __c.4133
0000398e l     O .text	0000002b __c.4135
00003962 l     O .text	0000002c __c.4137
0000389f l     O .text	0000003a __c.4192
0000387f l     O .text	00000020 __c.4201
00003832 l     O .text	0000004d __c.4226
0000390d l     O .text	00000055 __c.4153
00003900 l     O .text	0000000d __c.4155
000038f3 l     O .text	0000000d __c.4163
000038e6 l     O .text	0000000d __c.4168
000038d9 l     O .text	0000000d __c.4173
000037fa l     O .text	00000038 __c.4238
000037d1 l     O .text	00000029 __c.4240
00003780 l     O .text	00000051 __c.4243
00003741 l     O .text	0000003f __c.4256
0000370b l     O .text	00000036 __c.4258
000036d8 l     O .text	00000033 __c.4260
000036a5 l     O .text	00000033 __c.4262
0000368e l     O .text	00000017 __c.4272
0000364e l     O .text	00000040 __c.4274
00003602 l     O .text	0000004c __c.4277
000035d2 l     O .text	00000030 __c.4279
000035d0 l     O .text	00000002 __c.4282
000035c4 l     O .text	0000000c __c.4284
000035b7 l     O .text	0000000d __c.4286
000035a6 l     O .text	00000011 __c.4288
00003593 l     O .text	00000013 __c.4290
00003580 l     O .text	00000013 __c.4292
0000356d l     O .text	00000013 __c.4294
00003546 l     O .text	00000027 __c.4301
00003521 l     O .text	00000025 __c.4303
000034e8 l     O .text	00000039 __c.4317
000034c4 l     O .text	00000024 __c.4334
000034b6 l     O .text	0000000e __c.4351
000034a8 l     O .text	0000000e __c.4356
0000349a l     O .text	0000000e __c.4358
00003467 l     O .text	00000033 __c.4372
00003439 l     O .text	0000002e __c.4374
0000340a l     O .text	0000002f __c.4376
000033da l     O .text	00000030 __c.4378
000033ab l     O .text	0000002f __c.4380
0000337b l     O .text	00000030 __c.4382
00003354 l     O .text	00000027 __c.4384
0000333d l     O .text	00000017 __c.4386
00003326 l     O .text	00000017 __c.4388
0000330d l     O .text	00000019 __c.4390
000032f4 l     O .text	00000019 __c.4392
000032e6 l     O .text	0000000e __c.4394
000032ce l     O .text	00000018 __c.4418
000032b7 l     O .text	00000017 __c.4420
0000327f l     O .text	00000038 __c.4422
0000326f l     O .text	00000010 __c.4424
000031ae l     O .text	0000000e __c.4435
000031bc l     O .text	00000028 __c.4433
0000323a l     O .text	00000035 __c.4428
000031e4 l     O .text	00000056 __c.4430
00003186 l     O .text	00000028 __c.4443
00003178 l     O .text	0000000e __c.4446
00003160 l     O .text	00000018 __c.4463
0000314d l     O .text	00000013 __c.4465
0000313f l     O .text	0000000e __c.4467
00003131 l     O .text	0000000e __c.4472
00003111 l     O .text	00000020 __c.4489
000030f6 l     O .text	0000001b __c.4491
000030da l     O .text	0000001c __c.4493
000030ab l     O .text	0000002f __c.4495
00003098 l     O .text	00000013 __c.4497
00003068 l     O .text	00000030 __c.4499
0000305a l     O .text	0000000e __c.4501
0000304c l     O .text	0000000e __c.4506
00003027 l     O .text	00000025 __c.4514
00003007 l     O .text	00000020 __c.4516
00002fe8 l     O .text	0000001f __c.4518
00002fc0 l     O .text	00000028 __c.4520
00002fb1 l     O .text	0000000f __c.4522
00002f89 l     O .text	00000028 __c.4531
00002f62 l     O .text	00000027 __c.4533
00002f3b l     O .text	00000027 __c.4535
00002f05 l     O .text	00000036 __c.4537
00002edc l     O .text	00000029 __c.4539
00002ec5 l     O .text	00000017 __c.4541
00002e9c l     O .text	00000029 __c.4554
00002e77 l     O .text	00000025 __c.4556
00002e54 l     O .text	00000023 __c.4558
00002e34 l     O .text	00000020 __c.4560
00002e14 l     O .text	00000020 __c.4562
00004048 l     O .text	00000021 __c.3869
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000031b l     O .text	0000000d __c.3613
00000308 l     O .text	00000013 __c.3615
000002f5 l     O .text	00000013 __c.3617
000002d7 l     O .text	0000001e __c.3619
000002b9 l     O .text	0000001e __c.3621
0000029b l     O .text	0000001e __c.3623
0000027d l     O .text	0000001e __c.3625
00000269 l     O .text	00000014 __c.3627
0000024e l     O .text	0000001b __c.3642
00000236 l     O .text	00000018 __c.3648
00000211 l     O .text	00000025 __c.3657
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080175f l     O .bss	00000004 SPI0_Speed_value
00000328 l     O .text	0000001d __c.3611
0080175d l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004f2 l     O .text	0000001a __c.3610
000004d6 l     O .text	0000001c __c.3618
000004bd l     O .text	00000019 __c.3620
000004ac l     O .text	00000011 __c.3628
0000049c l     O .text	00000010 __c.3634
00000488 l     O .text	00000014 __c.3640
00000473 l     O .text	00000015 __c.3642
00000455 l     O .text	0000001e __c.3652
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000633e l     F .text	0000007c clock_settime.part.2
000005e1 l     O .text	0000001d __c.3608
000005d7 l     O .text	0000000a __c.3628
00801792 l     O .bss	00000020 _ts_to_str
0080178a l     O .bss	00000008 __clock_elapsed
000005c9 l     O .text	0000000e __c.3642
000005be l     O .text	0000000b __c.3644
008017b2 l     O .bss	00000002 timers_configured
008017b4 l     O .bss	00000002 timers_enabled
000005aa l     O .text	00000014 __c.3664
00000597 l     O .text	00000013 __c.3666
0000058b l     O .text	0000000c __c.3668
00000573 l     O .text	00000018 __c.3670
00000562 l     O .text	00000011 __c.3672
00000552 l     O .text	00000010 __c.3674
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ec0 l     O .text	0000001d __c.3756
0080196b l     O .bss	00000001 _ppr_reg
00000ead l     O .text	00000013 __c.3774
00000e9c l     O .text	00000011 __c.3788
00000e8f l     O .text	0000000d __c.3797
00000e81 l     O .text	0000000e __c.3806
00000e74 l     O .text	0000000d __c.3813
00000e66 l     O .text	0000000e __c.3819
00000000 l    df *ABS*	00000000 _clear_bss.o
00004662 l       .text	00000000 .do_clear_bss_start
00004660 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001be52 l       .text	00000000 __udivmodqi4_ep
0001be4a l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001be72 l       .text	00000000 __udivmodhi4_ep
0001be64 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001be9a l       .text	00000000 __divmodhi4_neg1
0001bea2 l       .text	00000000 __divmodhi4_neg2
0001bea8 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001bed0 l       .text	00000000 __udivmodsi4_ep
0001beb6 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001bf06 l       .text	00000000 __divmodsi4_neg2
0001bf14 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001c784 l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 --library=m
00015206 g     F .text	0000004a SS80_Selected_Device_Clear
0001bf38 g       .text	00000002 .hidden __usmulhisi3
0000e790 g     F .text	0000000c putchar
000113ea g     F .text	00000022 SS80_is_MTA
000061da g     F .text	000000ea clock_gettime
00005894 g     F .text	000000d4 i2c_display_task_errors
00005c2c g     F .text	00000084 rtc_init
00011728 g     F .text	000000a8 GPIB_COMMANDS
00004670  w      .text	00000000 __vector_22
00010842 g     F .text	00000054 gpib_unread
00004854 g     F .text	0000000a set_error
000143f6 g     F .text	00000034 SS80_test_extended_status
00005ce0  w    F .text	00000016 strcpy
0000748e g     F .text	00000008 asctime
00006766 g     F .text	00000020 tm_mon_to_ascii
00801a8c g     O .bss	00000235 Fatfs
0000e8c4 g     F .text	0000004a mctime
00004670  w      .text	00000000 __vector_28
0000d89a g     F .text	0000001a mmc_fast
00005a6c g     F .text	0000008c rtc_write
0000548c g     F .text	00000058 i2c_fn
000152f8 g     F .text	00000218 SS80_Transparent_State
0080196c g     O .bss	00000001 gpib_unread_f
0000473e g     F .text	00000004 spi_RX_buffer
00011e6e g     F .text	00000042 gpib_help
0001506e g     F .text	0000009a SS80_Report
0000f3f4 g     F .text	0000006a free_file_descriptor
0001b6c8 g     F .text	00000148 setup_lcd
0000e584 g     F .text	00000096 fatfs_putc
0001c018 g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004670  w      .text	00000000 __vector_1
00011896 g     F .text	00000184 GPIB
0000e12a g     F .text	00000042 fatfs_help
00006430 g     F .text	00000016 delete_all_timers
0000506e g     F .text	0000000c SPI0_TXRX_Byte
0001c4e6 g       .text	00000000 __fp_mpack_finite
0000ef3a g     F .text	00000086 utime
00801a5c g     O .bss	00000008 __clock
0001b64c g     F .text	0000007c lcd_time
0001298c g     F .text	00000054 find_device
000072bc g     F .text	00000128 set_dst
0000ec58 g     F .text	00000096 fdevopen
0001140c g     F .text	00000022 SS80_is_MSA
000046da g     F .text	00000060 spi_end
00017e4e g     F .text	000000d6 lif_dir2str
0001c46c g     F .text	00000040 round
00012c9a g     F .text	0000017e alloc_device
00004a50 g     F .text	0000006a safefree
00011a1a g     F .text	00000130 GPIB_TALK
00004670  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001c108 g     F .text	00000004 __divsf3
0001bfbc g       .text	00000036 .hidden __epilogue_restores__
00004e22 g     F .text	00000018 uart_rx_count
00013d68 g     F .text	0000003a lif_dir_count
00801ceb g     O .bss	00000009 gpib_timer
00011b4a g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
000181d0 g     F .text	0000000e lif_vol_clear
000062c4 g     F .text	0000007a clock_task
00010c9e g     F .text	00000284 gpib_trace_display
0001b0fa g     F .text	000000fa lif_rename_file
0001312a g     F .text	00000850 Read_Config
0001290c g     F .text	00000028 find_type
0001c32a g     F .text	00000022 __fp_round
00012934 g     F .text	0000001e count_drive_types
00006786 g     F .text	00000042 Days_Per_Month
00006620 g     F .text	00000028 execute_timers
0000fb0a g     F .text	00000176 ls_info
00004670  w      .text	00000000 __vector_34
0000d854 g     F .text	0000001a mmc_spi_begin
0001c1d8 g     F .text	0000000a __fixsfsi
0000653a g     F .text	0000000c clock_elapsed_begin
00005d48  w    F .text	00000032 reverse
0000d1a8 g     F .text	00000006 mmc_disk_status
0001c34c g     F .text	00000044 __fp_split3
00010616 g     F .text	00000014 gpib_timeout_set
0001be5c g       .text	00000028 .hidden __udivmodhi4
000046d6 g     F .text	00000004 chip_select_init
000064c8 g     F .text	00000072 ts_to_str
00008824 g     F .text	0000000c atol
00007810 g     F .text	000000aa p_ntoa
0000db0a g     F .text	000000d8 tm_to_fat
00004896 g     F .text	00000122 PrintFree
000165ce g     F .text	000000c2 amigo_cmd_dsj
0000cf22 g     F .text	00000024 wait_ready
000001d6 g       .text	00000000 __trampolines_start
00012ec2 g     F .text	0000011c hpdir_set_device
0001c2b4 g     F .text	00000048 __fp_cmp
00011244 g     F .text	000000ea gpib_write_str
00801cc9 g     O .bss	00000002 errno
000152d6 g     F .text	00000022 SS80_Cancel
0001c786 g       .text	00000000 _etext
0000d358 g     F .text	00000488 mmc_disk_ioctl
00005ed0 g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
00018c5c g     F .text	000000b8 lif_writedirindex
00004f2c g     F .text	000000ce SPI0_Speed
000053c6 g     F .text	000000c6 i2c_task_run
00006546 g     F .text	0000007c clock_elapsed_end
0000cd9c g     F .text	000000c4 ff_wtoupper
0001c036 g     F .text	0000000a __subsf3
0001acbe g     F .text	00000312 lif_add_lif_file
00801cf4 g     O .bss	00000002 lastcmd
00004670  w      .text	00000000 __vector_24
00012ec0 g     F .text	00000002 set_Config_Defaults
000059fe g     F .text	00000062 i2c_rtc_read
00005ebc g     F .text	00000014 skipspaces
0000b970 g     F .text	0000026c f_getcwd
00004670  w      .text	00000000 __vector_12
00010252 g     F .text	00000032 gpib_timer_init
000102b4 g     F .text	0000002c ppr_init
0000e79c g     F .text	00000068 fgets
00004e3a g     F .text	0000004c uart_get_tail
00004a0c g     F .text	00000044 safemalloc
0001afd0 g     F .text	0000012a lif_del_file
0000767e g     F .text	00000032 _putc_buffer_fn
00019efa g     F .text	0000016e lif_ascii_string_to_e010
0000d920 g     F .text	0000001a mmc_ins_status
00800305 g     O .data	00000002 _cmd2
00018166 g     F .text	0000004e lif_lifbcd2timestr
00801cf6 g     O .bss	00000200 gpib_iobuff
0001762c g     F .text	00000028 V2B_MSB
00018006 g     F .text	00000084 lif_time2lifbcd
00012984 g     F .text	00000008 find_free
00005364 g     F .text	00000024 i2c_done
00018720 g     F .text	00000352 lif_check_dir
00004670 g       .text	00000000 __bad_interrupt
00004b14 g     F .text	00000090 delayms
000151d2 g     F .text	00000018 SS80_Channel_Independent_Clear
0000fa32 g     F .text	000000d8 cat
00008694 g     F .text	00000028 snprintf_P
000166e0 g     F .text	00000132 amigo_todo_op
00015250 g     F .text	00000086 SS80_Amigo_Clear
0000ebce g     F .text	0000008a perror
0001b886 g     F .text	00000024 gpib_user_task
0001dde2 g       *ABS*	00000000 __data_load_end
0000ce6c g     F .text	0000000c disk_initialize
008019aa g     O .bss	0000000d plot
000105c4 g     F .text	00000006 gpib_timer_elapsed_end
000177aa g     F .text	0000002a lif_free
0000e834 g     F .text	0000002e puts
0000f806 g     F .text	000001bc copy
0000672c g     F .text	00000010 clock_settime
000177d4 g     F .text	0000003e lif_stralloc
00005cb0  w    F .text	00000016 islower
00004868 g     F .text	0000002e freeRam
00015cec g     F .text	0000001c amigo_request_logical_address
000054e4 g     F .text	0000001c i2c_send_stop
0000c852 g     F .text	0000022a f_rename
00004670  w      .text	00000000 __vector_6
000105a6 g     F .text	0000001e gpib_timer_reset
00018f54 g     F .text	000005d4 lif_create_volume
0001c532 g     F .text	00000130 malloc
00004762 g     F .text	00000040 spi_init
0000f7c4 g     F .text	00000042 posix_help
00004670  w      .text	00000000 __vector_31
00010316 g     F .text	00000046 dbf_open
0001b58a g     F .text	000000c2 copyright
0000b8ba g     F .text	000000b6 f_chdir
0001c100 g       .text	00000000 __lesf2
000046a6 g     F .text	00000030 chip_deselect
000175b6 g     F .text	00000076 PRINTER_COMMANDS
000065c2 g     F .text	00000036 clock_clear
000074b8 g     F .text	000000ee initialize_clock
0000d91e g     F .text	00000002 mmc_power_off
0000db04 g     F .text	00000006 mmc_wp_status
0000e47e g     F .text	00000106 fatfs_getc
00801ef6 g     O .bss	00000001 listening_last
0000ce60 g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001d6 g       .text	00000000 __trampolines_end
00006702 g     F .text	0000002a clock_getres
00801784 g     O .bss	00000004 i2c_task
0001a068 g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
000107fc g     F .text	00000046 gpib_assert_ifc
00017ff0 g     F .text	00000016 lif_BCD2BIN
00017812 g     F .text	00000054 lif_open
000075a6 g     F .text	000000d8 display_clock
000102e0 g     F .text	0000001a ppr_bit_set
00004670  w      .text	00000000 __vector_3
000102ac g     F .text	00000008 ppr_reg
000110f8 g     F .text	00000008 gpib_decode
00004ba4 g     F .text	00000022 uart_rx_flush
0000eadc g     F .text	00000004 rmdir
000063ba g     F .text	00000076 set_timers
00801a80 g     O .bss	0000000c dst
0000eb52 g     F .text	0000007c readdir
0001c390 g     F .text	0000000e __fp_zero
0000c236 g     F .text	0000002a f_closedir
0000ceb8 g     F .text	00000014 disk_ioctl
0001b302 g     F .text	00000274 lif_tests
00007da0 g     F .text	00000084 _puts_pad
00004742 g     F .text	00000020 spi_TX
000181de g     F .text	0000038c lif_dump_vol
00011c40 g     F .text	0000004c listen_cleanup
0001808a g     F .text	000000a0 lif_lifbcd2time
00017f24 g     F .text	000000be lif_str2dir
000050fc g     F .text	0000002c SPI0_TXRX
00800307 g     O .data	00000015 _line1
0001c100 g       .text	00000000 __nesf2
00012fde g     F .text	00000020 hpdir_set_parameters
00005968 g     F .text	0000000e BINtoBCD
0000f020 g     F .text	000000d0 lseek
00004670  w      .text	00000000 __vector_23
0001c786 g       *ABS*	00000000 __data_load_start
00801838 g     O .bss	00000004 _mmc_clock
00004632 g       .text	00000000 __dtors_end
000114d8 g     F .text	00000012 gpib_init_devices
00005dec  w    F .text	00000050 strncasecmp
008021bc g       .bss	00000000 __bss_end
00017a7e g     F .text	00000056 lif_chars
0001bf44 g       .text	00000014 .hidden __muluhisi3
00012194 g     F .text	0000006a print_tok_str
00004670  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0001397a g     F .text	000002f2 format_drives
00004670  w      .text	00000000 __vector_25
008021b8 g     O .bss	00000002 __brkval
00006984 g     F .text	0000002a gmtime_r
0000e968 g     F .text	00000052 chmod
00006648 g     F .text	000000ba init_timers
00011472 g     F .text	00000022 AMIGO_is_MSA
00018abe g     F .text	000000d0 lif_checkdirindex
0000c524 g     F .text	0000014e f_unlink
000108a2 g     F .text	00000020 gpib_control_pin_read
00010444 g     F .text	000000ae dbf_open_read
00005988 g     F .text	00000076 i2c_rtc_write
0000d91c g     F .text	00000002 mmc_power_on
0000875a g     F .text	000000bc strtol
000105a0 g     F .text	00000006 gpib_timer_elapsed_begin
00004bc6 g     F .text	00000134 uart_ubr
0000cd0c g     F .text	00000066 ff_uni2oem
0000517e g     F .text	0000009e i2c_check_op
00019e48 g     F .text	000000b2 lif_e010_pad_sector
000176fc g     F .text	00000042 lif_help
00005fa8 g     F .text	000000b8 split_args
0000ea60 g     F .text	0000003e rename
0001040a g     F .text	0000003a dbf_close
00017210 g     F .text	000000be receive_plot_flush
0001c122 g     F .text	000000d4 __divsf3x
00004670  w      .text	00000000 __vector_11
00801ef7 g     O .bss	00000001 spoll
0000e90e g     F .text	0000001c basename
0001442a g     F .text	000000c6 SS80_display_extended_status
000170c4 g     F .text	00000130 AMIGO_COMMANDS
00017bbc g     F .text	0000007a lif_fixname
0000d270 g     F .text	000000e8 mmc_disk_write
00004632  w      .text	00000000 __init
0001c4fe g     F .text	00000034 calloc
0001aa4e g     F .text	00000270 lif_extract_lif_as_lif
00006166 g     F .text	00000026 install_timers_isr
00012ffe g     F .text	0000012c Post_Config
00010284 g     F .text	00000014 reverse_8bits
000145f2 g     F .text	000000e0 SS80_describe
00004ebe g     F .text	0000002c uart_getchar
000078ba g     F .text	0000020e p_ftoa
0000f2e0 g     F .text	000000dc write
00017ad4 g     F .text	00000074 lif_B2S
0001c39e g       .text	00000000 __gtsf2
0000f784 g     F .text	00000040 fprintf
00010bfa g     F .text	000000a4 gpib_decode_header
00010f22 g     F .text	000001d6 gpib_read_byte
00012092 g     F .text	00000044 tok_index
000151ea g     F .text	0000001c SS80_Universal_Device_Clear
0001a278 g     F .text	00000278 lif_add_ascii_file_as_e010
0000618c g     F .text	0000004e __vector_13
00005d22  w    F .text	00000026 strcat
008019fb g     O .bss	00000057 uarts
0000485e g     F .text	0000000a clear_error
0001c3c2 g       .text	00000000 __mulsf3_pse
00004670  w      .text	00000000 __vector_17
00004832 g     F .text	00000022 spi_TXRX
0001c308 g     F .text	00000006 __fp_nan
000129e0 g     F .text	000001c6 set_active_device
00004670  w      .text	00000000 __vector_19
000060e6 g     F .text	0000007c get_value
000050d4 g     F .text	00000028 SPI0_TX
00017b48 g     F .text	0000003a lif_checkname
0000e92a g     F .text	0000003e chdir
00004670  w      .text	00000000 __vector_7
00016358 g     F .text	000000c8 amigo_buffered_read_execute
0000d982 g     F .text	00000182 mmc_init
0000e16c g     F .text	00000176 fatfs_ls
0001c2fc g     F .text	0000000c __fp_inf
000086bc g     F .text	00000028 sprintf_P
0001c000 g       .text	00000018 .hidden __cmpdi2_s8
0000ecee g     F .text	00000088 fat_time_to_unix
0000f0f0 g     F .text	0000004e fseek
00801cc1 g     O .bss	00000004 AccSize
000181b4 g     F .text	0000000c lif_image_clear
0000d8c6 g     F .text	0000000e mmc_set_ms_timeout
00006162 g     F .text	00000004 enable_system_task
0000d8ba g     F .text	00000006 mmc_spi_RX_buffer
00005388 g     F .text	00000024 i2c_task_done
00006aa4 g     F .text	00000058 is_dst
00004cfa g     F .text	0000008e uart_init
0001412e g     F .text	00000078 SS80ControllerPack
00801f00 g     O .bss	00000204 Devices
00004658 g       .text	00000010 .hidden __do_clear_bss
00004ffa g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
000197e8 g     F .text	000001f4 lif_open_volume
0000f9c2 g     F .text	00000070 testpage
000174c4 g     F .text	000000f2 printer_buffer
0000b888 g     F .text	00000032 f_close
0001c3be g     F .text	000000ca __mulsf3x
000171f4 g     F .text	0000001c printer_init
0000d876 g     F .text	0000001a mmc_slow
00005e7c g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
00010298 g     F .text	00000014 ppr_set
0001611a g     F .text	0000012a amigo_format
0000f13e g     F .text	000000da read
00018d14 g     F .text	00000030 lif_writedirEOF
0000d86e g     F .text	00000008 mmc_spi_end
0001c23e g       .text	00000000 __floatsisf
00016690 g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00018d44 g     F .text	00000210 lif_updatefree
00005128 g     F .text	0000002a SPI0_RX
0000b1c4 g     F .text	00000296 f_read
008019f9 g     O .bss	00000002 rtc_ok
000113c8 g     F .text	00000022 SS80_is_MLA
00004d88 g     F .text	00000046 uart_rx_interrupt
00004eea g     F .text	00000006 uart0_getchar
00004670  w      .text	00000000 __vector_27
00010790 g     F .text	0000006c gpib_disable_PPR
0000dc32 g     F .text	000000e0 fatfs_scan_files
00004674 g     F .text	00000032 chip_select
0080175c g       .data	00000000 __data_end
000103d0 g     F .text	0000003a dbf_lseek
000158fc g     F .text	000001d4 SS80_COMMANDS
00005e3c g     F .text	00000040 stralloc
0000c260 g     F .text	00000088 f_readdir
00801ef8 g     O .bss	00000002 current
00014724 g     F .text	0000004e SS80_Check_Volume
0000d81c g     F .text	00000038 mmc_install_timer
000077da g     F .text	00000036 pch
0000871e g     F .text	0000003c atodigit
0001be26 g       .text	0000001e .hidden __mulsi3
00005cf6  w    F .text	0000002c strncpy
0000ea9e g     F .text	0000003e unlink
0000f2b6 g     F .text	0000002a sync
00015146 g     F .text	0000008c SS80_init
0001c100 g       .text	00000000 __eqsf2
0000f4d0 g     F .text	0000008a new_file_descriptor
00005dae  w    F .text	0000003e strcasecmp
0001bf64 g       .text	00000020 .hidden __negdi2
000176bc g     F .text	00000040 B2V_LSB
0000e024 g     F .text	00000106 fatfs_filinfo_list
0000ca7c g     F .text	0000009a f_chmod
00801a64 g     O .bss	00000018 timer_irq
000053ac g     F .text	0000001a i2c_send_start
00012952 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001be84 g       .text	00000026 .hidden __divmodhi4
000141a6 g     F .text	00000198 SS80UnitPack
000104f2 g     F .text	000000ae dbf_open_write
00004670  w      .text	00000000 __vector_5
0000d7e0 g     F .text	0000003c mmc_disk_timerproc
00801a52 g     O .bss	0000000a i2c
000071b0 g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004670  w      .text	00000000 __vector_33
000120d6 g     F .text	0000003e tok_name
00011100 g     F .text	00000144 gpib_read_str
000199dc g     F .text	000003aa lif_dir
00016420 g     F .text	000001ae amigo_buffered_write
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
000144f0 g     F .text	00000102 SS80_send_status
0001bf26 g       .text	00000012 .hidden __tablejump2__
000114ea g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000eeaa g     F .text	00000090 unix_time_to_fat
00004632 g       .text	00000000 __ctors_start
0000d05e g     F .text	0000014a mmc_disk_initialize
00801a7c g     O .bss	00000004 __tzone
0000dbe2 g     F .text	00000026 get_fattime
0080031c g     O .data	00000002 _cmd1
0000f218 g     F .text	00000038 fread
000181c0 g     F .text	00000010 lif_dir_clear
00015f3a g     F .text	00000052 amigo_increment
00011c8c g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
0080183c g     O .bss	00000002 _mmc_timeout
0000463e g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000f698 g     F .text	000000d4 posix_fopen_modes_to_open
0001767e g     F .text	0000003e B2V_MSB
00801788 g     O .bss	00000002 i2c_callback
00017fe2 g     F .text	0000000e lif_BIN2BCD
0001c4ac g     F .text	00000036 __fp_mintl
0001c100 g     F .text	00000008 __cmpsf2
0001bff2 g       .text	0000000e .hidden __xload_1
00006a06 g     F .text	0000005c gettimeofday
0001c31c g     F .text	0000000e __fp_pscB
0001c35c g       .text	00000000 __fp_splitA
0001812a g     F .text	0000003c lif_ctime_gmt
0001791a g     F .text	000000a2 lif_read
0000f76c g     F .text	00000018 fopen
0080175c g       .bss	00000000 __bss_start
000073e4 g     F .text	000000aa asctime_r
00006b94 g     F .text	00000008 localtime
0001c774 g     F .text	0000000e memset
00016812 g     F .text	00000108 amigo_todo
00012e60 g     F .text	00000032 push_state
0000716e g     F .text	00000042 setdate
0001ba70 g     F .text	000003b6 main
008002f0 g     O .data	00000015 _line2
00011e6c g     F .text	00000002 talk_cleanup
00005b9e g     F .text	0000008e rtc_run
0000efea g     F .text	00000036 ftell
00801efa g     O .bss	00000001 talking
0000b788 g     F .text	00000100 f_sync
0080196f g     O .bss	00000002 AMIGOs
0001c100 g       .text	00000000 __ltsf2
00004f28 g     F .text	00000004 uart_keyhit
00012e18 g     F .text	00000048 init_Devices
00004670  w      .text	00000000 __vector_4
00018a72 g     F .text	0000004c lif_close_volume
0000d890 g     F .text	0000000a mmc_spi_init
00018b8e g     F .text	000000ce lif_readdirindex
00016942 g     F .text	000005cc Amigo_Command
0000f4c0 g     F .text	00000010 fclose
0000e784 g     F .text	0000000c getchar
00015e7e g     F .text	000000bc amigo_send_status
00015c64 g     F .text	00000088 amigo_init
00800136 g     O .data	0000004a sys_errlist
00006a62 g     F .text	00000042 time
0000eb16 g     F .text	0000003c opendir
0001c4e2 g     F .text	0000001c __fp_mpack
00012ba6 g     F .text	000000f4 SS80_Set_Defaults
00005a60 g     F .text	0000000c i2c_rtc_init
000069e2 g     F .text	00000024 settimezone
0000addc g     F .text	00000078 f_mount
0000dd30 g     F .text	000002f4 fatfs_status
00011450 g     F .text	00000022 AMIGO_is_MTA
0001bf16 g       .text	00000010 .hidden __negsi2
0000c154 g     F .text	000000e2 f_opendir
00015108 g     F .text	0000003e Clear_Common
0001b8aa g     F .text	00000042 help
00010724 g     F .text	0000006c gpib_enable_PPR
00015fe2 g     F .text	00000138 amigo_verify
0001c3a6 g     F .text	00000004 __mulsf3
00006060 g     F .text	00000086 get_token
00015d08 g     F .text	000000ba amigo_request_status
0001224a g     F .text	000001b6 display_Addresses
0000efc0 g     F .text	0000002a fileno_to_fatfs
0000cd72 g     F .text	0000002a ff_oem2uni
00005d94  w    F .text	0000001a strcmp
000106ca g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
000105ca g     F .text	0000004c gpib_timer_task
00004aba g     F .text	0000005a delayus
00012e92 g     F .text	0000002e pop_state
00004670  w      .text	00000000 __vector_9
0000e9ba g     F .text	0000004a getcwd
00004670  w      .text	00000000 __vector_2
00005ef8 g     F .text	00000028 MATCHI
0001691a g     F .text	00000028 amigo_check_unit
0001c05a g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000bbdc g     F .text	00000578 f_lseek
0000e61a g     F .text	000000ac fgetc
00801efb g     O .bss	00000001 secondary
00008648 g     F .text	0000004c vsnprintf_P
00007496 g     F .text	00000022 ctime_gm
0001c39e g     F .text	00000008 __gesf2
00013c6c g     F .text	000000fc hpdir_init
00015dc2 g     F .text	000000bc amigo_send_logical_address
000146d2 g     F .text	00000052 SS80_Check_Unit
0001132e g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
0080196d g     O .bss	00000002 gpib_log_fp
00004670  w      .text	00000000 __vector_21
00004670  w      .text	00000000 __vector_15
00007ac8 g     F .text	000002d8 p_etoa
000121fe g     F .text	0000004c print_tok
00801764 g     O .bss	00000020 i2c_task_op
00015584 g     F .text	000002c4 SS80_locate_and_read
0000529a g     F .text	000000ca i2c_init
00011eb0 g     F .text	000001e2 gpib_tests
00801cc5 g     O .bss	00000002 AccDirs
0000cd06 g     F .text	00000006 ff_memfree
00801977 g     O .bss	00000002 PRINTERp
0001c30e g     F .text	0000000e __fp_pscA
0001be44 g       .text	00000018 .hidden __udivmodqi4
00801efc g     O .bss	00000001 listening
0001160e g     F .text	0000011a gpib_error_test
00801973 g     O .bss	00000002 SS80s
0000c2e8 g     F .text	0000007c f_stat
00010670 g     F .text	0000005a gpib_bus_init
00005152 g     F .text	0000002c i2c_timer
0000e6c6 g     F .text	000000a4 fputc
00004670  w      .text	00000000 __vector_29
00004f14 g     F .text	00000014 uart0_putchar
000086e4 g     F .text	0000003a printf_P
0001bf5c g       .text	00000006 .hidden __mulohisi3
00015848 g     F .text	000000b4 SS80_Execute_State
00006f2c g     F .text	00000008 timegm
00014772 g     F .text	000004ee SS80_Command_State
000069c4 g     F .text	0000001e gettimezone
008021bc g       .comment	00000000 __heap_start
00005e9c g     F .text	00000020 trim_tail
000108da g     F .text	00000320 gpib_write_byte
000172ce g     F .text	000000b0 printer_close
00005246 g     F .text	00000054 i2c_task_op_add
0001856a g     F .text	000001b6 lif_check_volume
00006afc g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801cc7 g     O .bss	00000002 AccFiles
00005af8 g     F .text	000000a6 rtc_read
00004632 g       .text	00000000 __dtors_start
0001062a g     F .text	00000046 gpib_bus_read_init
00004632 g       .text	00000000 __ctors_end
0001beee g       .text	00000028 .hidden __divmodsi4
00010896 g     F .text	0000000c gpib_bus_read
0000ed76 g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f250 g     F .text	00000066 syncfs
0001773e g     F .text	0000006c lif_calloc
0000f3bc g     F .text	00000038 fwrite
000117d0 g     F .text	000000c6 Send_Identify
00801836 g     O .bss	00000002 _mmc_pre
0000d8c0 g     F .text	00000006 mmc_spi_TXRX
0080175c g       .data	00000000 _edata
0000cb16 g     F .text	000000b2 f_utime
00012400 g     F .text	0000050c display_Config
0001bf3a g       .text	00000008 .hidden __usmulhisi3_tail
008021bc g       .comment	00000000 _end
000178b0 g     F .text	0000006a lif_seek_msg
000047a2 g     F .text	00000090 spi_begin
0001737e g     F .text	00000146 printer_open
0000b45a g     F .text	0000032e f_write
00004670  w      .text	00000000 __vector_8
00019d86 g     F .text	000000c2 lif_find_file
000055d2 g     F .text	000001d4 __vector_26
000076c8 g     F .text	00000112 bin2num
0001c126 g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
00801971 g     O .bss	00000002 AMIGOp
0000d8b4 g     F .text	00000006 mmc_spi_TX_buffer
0000ae54 g     F .text	00000370 f_open
00017c36 g     F .text	0000011c lif_vol2str
0000ce98 g     F .text	00000020 disk_write
0000fc80 g     F .text	00000228 ls
0001c782  w      .text	00000000 .hidden exit
00011dae g     F .text	000000be gpib_task
00005500 g     F .text	000000be i2c_task_next_op
0001c23a g     F .text	0000007a __floatunsisf
00016244 g     F .text	00000114 amigo_buffered_read_command
00006446 g     F .text	00000082 subtract_timespec
0001be84 g       .text	00000000 .hidden _div
000057a6 g     F .text	000000ee i2c_print_error
00016f0e g     F .text	000001b6 Amigo_Execute
00005d7a  w    F .text	0000001a strupper
008021ba g     O .bss	00000002 __flp
00012114 g     F .text	00000080 print_tok_val
0001beaa g       .text	00000044 .hidden __udivmodsi4
000114b6 g     F .text	00000022 PRINTER_is_MTA
00019528 g     F .text	000002c0 lif_newdir
00013da2 g     F .text	0000038c hpdir_find_drive
00011494 g     F .text	00000022 PRINTER_is_MLA
00008816 g     F .text	0000000e atoi
000067c8 g     F .text	000001bc time_to_tm
0000dc08 g     F .text	0000002a put_rc
0000e862 g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
0000507a g     F .text	0000005a SPI0_Init
0000c672 g     F .text	000001e0 f_mkdir
0001c1e2 g     F .text	00000058 __fixunssfsi
00802104 g     O .bss	000000b4 hpdir
00006f34 g     F .text	0000023a setdate_r
00005f20 g     F .text	00000054 MATCHARGS
0000473a g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001c782 g       .text	00000000 .hidden _exit
000179bc g     F .text	000000c2 lif_write
00017b82 g     F .text	0000003a lif_S2B
0001ba5c g     F .text	00000014 user_task
00801efd g     O .bss	00000001 talking_last
0001035c g     F .text	0000003a dbf_read
00005976 g     F .text	00000012 BCDtoBIN
0001b810 g     F .text	00000076 i2c_lcd_task
00006b9c g     F .text	00000390 normalize
000069ae g     F .text	00000016 gmtime
00004670  w      .text	00000000 __vector_14
0000e35e g     F .text	00000120 fatfs_tests
0001b1f4 g     F .text	0000010e lif_create_image
0000ce78 g     F .text	00000020 disk_read
0000f55a g     F .text	0000013e open
00005cc6  w    F .text	0000001a toupper
00014d4a g     F .text	00000324 SS80_locate_and_write
0001b576 g     F .text	00000014 lcd_task
00007e24 g     F .text	00000824 _printf_fn
00004670  w      .text	00000000 __vector_10
000102fa g     F .text	0000001c ppr_bit_clr
00801ccb g     O .bss	00000020 __iob
0000cbc8 g     F .text	00000138 f_getlabel
00017d52 g     F .text	000000fc lif_str2vol
0000c364 g     F .text	000001c0 f_getfree
0000e804 g     F .text	00000030 fputs
00004670  w      .text	00000000 __vector_16
00005f74 g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
000049b8 g     F .text	00000054 safecalloc
0000e89a g     F .text	0000002a fileno_to_stream
00014c60 g     F .text	000000ea SS80_cmd_seek
0000eae0 g     F .text	00000036 closedir
00004670  w      .text	00000000 __vector_18
0000521c g     F .text	0000002a i2c_task_init
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
0001433e g     F .text	000000b8 SS80VolumePack
0000d1ae g     F .text	000000c2 mmc_disk_read
0000e2e2 g     F .text	0000007c mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00017866 g     F .text	0000004a lif_stat
00004e86 g     F .text	00000006 uart_rx_byte
00015510 g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
00004dce g     F .text	00000054 __vector_20
0000ea04 g     F .text	0000005c mkdir
00004ef0 g     F .text	00000024 uart_putchar
0000fea8 g     F .text	000003aa posix_tests
00801efe g     O .bss	00000002 gpib_unread_data
0000f45e g     F .text	00000062 close
0001c038 g       .text	00000000 __addsf3
0001bf84 g       .text	00000038 .hidden __prologue_saves__
0001142e g     F .text	00000022 AMIGO_is_MLA
0000d8d4 g     F .text	00000048 mmc_test_timeout
0001a4f0 g     F .text	0000055e lif_extract_e010_as_ascii
00015f8c g     F .text	00000056 amigo_seek
000108c2 g     F .text	00000018 gpib_handshake_pin_read
000065f8 g     F .text	00000028 enable_timers
0000dd12 g     F .text	0000001e fatfs_fstype
00017654 g     F .text	0000002a V2B_LSB
00010396 g     F .text	0000003a dbf_write
00801975 g     O .bss	00000002 SS80p
0000cd00 g     F .text	00000006 ff_memalloc
0001c662 g     F .text	00000112 free
0001c392 g       .text	00000000 __fp_szero
00004e8c g     F .text	00000032 uart_tx_byte
0001bf58 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 23 	jmp	0x4632	; 0x4632 <__ctors_end>
       4:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
       8:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
       c:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      10:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      14:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      18:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      1c:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      20:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      24:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      28:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      2c:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      30:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      34:	0c 94 c6 30 	jmp	0x618c	; 0x618c <__vector_13>
      38:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      3c:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      40:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      44:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      48:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      4c:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      50:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <__vector_20>
      54:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      58:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      5c:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      60:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      64:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      68:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__vector_26>
      6c:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      70:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      74:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      78:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      7c:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      80:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      84:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      88:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__bad_interrupt>
      8c:	8b 40       	sbci	r24, 0x0B	; 11
      8e:	de 41       	sbci	r29, 0x1E	; 30
      90:	bb 40       	sbci	r27, 0x0B	; 11
      92:	b7 41       	sbci	r27, 0x17	; 23
      94:	b7 41       	sbci	r27, 0x17	; 23
      96:	de 41       	sbci	r29, 0x1E	; 30
      98:	de 41       	sbci	r29, 0x1E	; 30
      9a:	de 41       	sbci	r29, 0x1E	; 30
      9c:	de 41       	sbci	r29, 0x1E	; 30
      9e:	de 41       	sbci	r29, 0x1E	; 30
      a0:	de 41       	sbci	r29, 0x1E	; 30
      a2:	de 41       	sbci	r29, 0x1E	; 30
      a4:	de 41       	sbci	r29, 0x1E	; 30
      a6:	8b 40       	sbci	r24, 0x0B	; 11
      a8:	85 40       	sbci	r24, 0x05	; 5
      aa:	de 41       	sbci	r29, 0x1E	; 30
      ac:	de 41       	sbci	r29, 0x1E	; 30
      ae:	de 41       	sbci	r29, 0x1E	; 30
      b0:	de 41       	sbci	r29, 0x1E	; 30
      b2:	b5 40       	sbci	r27, 0x05	; 5
      b4:	de 41       	sbci	r29, 0x1E	; 30
      b6:	de 41       	sbci	r29, 0x1E	; 30
      b8:	8b 40       	sbci	r24, 0x0B	; 11
      ba:	de 41       	sbci	r29, 0x1E	; 30
      bc:	de 41       	sbci	r29, 0x1E	; 30
      be:	de 41       	sbci	r29, 0x1E	; 30
      c0:	de 41       	sbci	r29, 0x1E	; 30
      c2:	de 41       	sbci	r29, 0x1E	; 30
      c4:	de 41       	sbci	r29, 0x1E	; 30
      c6:	de 41       	sbci	r29, 0x1E	; 30
      c8:	de 41       	sbci	r29, 0x1E	; 30
      ca:	de 41       	sbci	r29, 0x1E	; 30
      cc:	8b 40       	sbci	r24, 0x0B	; 11
      ce:	d9 41       	sbci	r29, 0x19	; 25
      d0:	bb 40       	sbci	r27, 0x0B	; 11
      d2:	b7 41       	sbci	r27, 0x17	; 23
      d4:	b7 41       	sbci	r27, 0x17	; 23
      d6:	de 41       	sbci	r29, 0x1E	; 30
      d8:	de 41       	sbci	r29, 0x1E	; 30
      da:	de 41       	sbci	r29, 0x1E	; 30
      dc:	de 41       	sbci	r29, 0x1E	; 30
      de:	de 41       	sbci	r29, 0x1E	; 30
      e0:	de 41       	sbci	r29, 0x1E	; 30
      e2:	de 41       	sbci	r29, 0x1E	; 30
      e4:	de 41       	sbci	r29, 0x1E	; 30
      e6:	8b 40       	sbci	r24, 0x0B	; 11
      e8:	85 40       	sbci	r24, 0x05	; 5
      ea:	de 41       	sbci	r29, 0x1E	; 30
      ec:	de 41       	sbci	r29, 0x1E	; 30
      ee:	d4 41       	sbci	r29, 0x14	; 20
      f0:	de 41       	sbci	r29, 0x1E	; 30
      f2:	b5 40       	sbci	r27, 0x05	; 5
      f4:	de 41       	sbci	r29, 0x1E	; 30
      f6:	de 41       	sbci	r29, 0x1E	; 30
      f8:	8b 40       	sbci	r24, 0x0B	; 11
      fa:	00 42       	sbci	r16, 0x20	; 32
      fc:	e7 42       	sbci	r30, 0x27	; 39
      fe:	f6 41       	sbci	r31, 0x16	; 22
     100:	54 42       	sbci	r21, 0x24	; 36
     102:	3b 42       	sbci	r19, 0x2B	; 43
     104:	e7 42       	sbci	r30, 0x27	; 39
     106:	e7 42       	sbci	r30, 0x27	; 39
     108:	e7 42       	sbci	r30, 0x27	; 39
     10a:	e7 42       	sbci	r30, 0x27	; 39
     10c:	e7 42       	sbci	r30, 0x27	; 39
     10e:	e7 42       	sbci	r30, 0x27	; 39
     110:	e7 42       	sbci	r30, 0x27	; 39
     112:	e7 42       	sbci	r30, 0x27	; 39
     114:	0a 42       	sbci	r16, 0x2A	; 42
     116:	1e 42       	sbci	r17, 0x2E	; 46
     118:	e7 42       	sbci	r30, 0x27	; 39
     11a:	e7 42       	sbci	r30, 0x27	; 39
     11c:	e7 42       	sbci	r30, 0x27	; 39
     11e:	e7 42       	sbci	r30, 0x27	; 39
     120:	f2 41       	sbci	r31, 0x12	; 18
     122:	e7 42       	sbci	r30, 0x27	; 39
     124:	e7 42       	sbci	r30, 0x27	; 39
     126:	1e 42       	sbci	r17, 0x2E	; 46
     128:	e7 42       	sbci	r30, 0x27	; 39
     12a:	e7 42       	sbci	r30, 0x27	; 39
     12c:	e7 42       	sbci	r30, 0x27	; 39
     12e:	e7 42       	sbci	r30, 0x27	; 39
     130:	e7 42       	sbci	r30, 0x27	; 39
     132:	e7 42       	sbci	r30, 0x27	; 39
     134:	e7 42       	sbci	r30, 0x27	; 39
     136:	e7 42       	sbci	r30, 0x27	; 39
     138:	e7 42       	sbci	r30, 0x27	; 39
     13a:	00 42       	sbci	r16, 0x20	; 32
     13c:	82 42       	sbci	r24, 0x22	; 34
     13e:	f6 41       	sbci	r31, 0x16	; 22
     140:	54 42       	sbci	r21, 0x24	; 36
     142:	3b 42       	sbci	r19, 0x2B	; 43
     144:	e7 42       	sbci	r30, 0x27	; 39
     146:	e7 42       	sbci	r30, 0x27	; 39
     148:	e7 42       	sbci	r30, 0x27	; 39
     14a:	e7 42       	sbci	r30, 0x27	; 39
     14c:	e7 42       	sbci	r30, 0x27	; 39
     14e:	e7 42       	sbci	r30, 0x27	; 39
     150:	e7 42       	sbci	r30, 0x27	; 39
     152:	e7 42       	sbci	r30, 0x27	; 39
     154:	0a 42       	sbci	r16, 0x2A	; 42
     156:	1e 42       	sbci	r17, 0x2E	; 46
     158:	e7 42       	sbci	r30, 0x27	; 39
     15a:	e7 42       	sbci	r30, 0x27	; 39
     15c:	82 42       	sbci	r24, 0x22	; 34
     15e:	e7 42       	sbci	r30, 0x27	; 39
     160:	f2 41       	sbci	r31, 0x12	; 18
     162:	e7 42       	sbci	r30, 0x27	; 39
     164:	e7 42       	sbci	r30, 0x27	; 39
     166:	1e 42       	sbci	r17, 0x2E	; 46
     168:	fe 66       	ori	r31, 0x6E	; 110
     16a:	08 67       	ori	r16, 0x78	; 120
     16c:	10 67       	ori	r17, 0x70	; 112
     16e:	13 67       	ori	r17, 0x73	; 115
     170:	16 67       	ori	r17, 0x76	; 118
     172:	19 67       	ori	r17, 0x79	; 121
     174:	1c 67       	ori	r17, 0x7C	; 124
     176:	1f 67       	ori	r17, 0x7F	; 127
     178:	22 67       	ori	r18, 0x72	; 114
     17a:	e4 84       	ldd	r14, Z+12	; 0x0c
     17c:	09 85       	ldd	r16, Y+9	; 0x09
     17e:	30 85       	ldd	r19, Z+8	; 0x08
     180:	4a 85       	ldd	r20, Y+10	; 0x0a
     182:	53 85       	ldd	r21, Z+11	; 0x0b
     184:	75 85       	ldd	r23, Z+13	; 0x0d
     186:	90 85       	ldd	r25, Z+8	; 0x08
     188:	a0 85       	ldd	r26, Z+8	; 0x08
     18a:	e8 85       	ldd	r30, Y+8	; 0x08
     18c:	bc 85       	ldd	r27, Y+12	; 0x0c
     18e:	f2 87       	std	Z+10, r31	; 0x0a
     190:	fa 87       	std	Y+10, r31	; 0x0a
     192:	fe 87       	std	Y+14, r31	; 0x0e
     194:	22 88       	ldd	r2, Z+18	; 0x12
     196:	2b 88       	ldd	r2, Y+19	; 0x13
     198:	70 88       	ldd	r7, Z+16	; 0x10
     19a:	3d 88       	ldd	r3, Y+21	; 0x15
     19c:	3d 88       	ldd	r3, Y+21	; 0x15
     19e:	35 88       	ldd	r3, Z+21	; 0x15
     1a0:	89 99       	sbic	0x11, 1	; 17
     1a2:	5b 9a       	sbi	0x0b, 3	; 11
     1a4:	97 9a       	sbi	0x12, 7	; 18
     1a6:	c6 9a       	sbi	0x18, 6	; 24
     1a8:	d6 9a       	sbi	0x1a, 6	; 26
     1aa:	f3 9a       	sbi	0x1e, 3	; 30
     1ac:	53 9b       	sbis	0x0a, 3	; 10
     1ae:	62 9c       	mul	r6, r2
     1b0:	62 9c       	mul	r6, r2
     1b2:	62 9c       	mul	r6, r2
     1b4:	87 9b       	sbis	0x10, 7	; 16
     1b6:	b3 9b       	sbis	0x16, 3	; 22
     1b8:	01 9c       	mul	r0, r1
     1ba:	1d 9c       	mul	r1, r13
     1bc:	26 9a       	sbi	0x04, 6	; 4
     1be:	39 9a       	sbi	0x07, 1	; 7
     1c0:	5a b8       	out	0x0a, r5	; 10
     1c2:	19 b8       	out	0x09, r1	; 9
     1c4:	19 b8       	out	0x09, r1	; 9
     1c6:	19 b8       	out	0x09, r1	; 9
     1c8:	19 b8       	out	0x09, r1	; 9
     1ca:	dd b7       	in	r29, 0x3d	; 61
     1cc:	e4 b7       	in	r30, 0x34	; 52
     1ce:	eb b7       	in	r30, 0x3b	; 59
     1d0:	fb b7       	in	r31, 0x3b	; 59
     1d2:	09 b8       	out	0x09, r0	; 9
     1d4:	02 b8       	out	0x02, r0	; 2

000001d6 <__trampolines_end>:
     1d6:	63 73       	andi	r22, 0x33	; 51
     1d8:	5f 64       	ori	r21, 0x4F	; 79
     1da:	69 73       	andi	r22, 0x39	; 57
     1dc:	61 62       	ori	r22, 0x21	; 33
     1de:	6c 65       	ori	r22, 0x5C	; 92
     1e0:	20 77       	andi	r18, 0x70	; 112
     1e2:	61 73       	andi	r22, 0x31	; 49
     1e4:	3a 20       	and	r3, r10
     1e6:	25 64       	ori	r18, 0x45	; 69
     1e8:	2c 20       	and	r2, r12
     1ea:	77 61       	ori	r23, 0x17	; 23
     1ec:	6e 74       	andi	r22, 0x4E	; 78
     1ee:	3a 20       	and	r3, r10
     1f0:	25 64       	ori	r18, 0x45	; 69
     1f2:	0a 00       	.word	0x000a	; ????

000001f4 <__c.3626>:
     1f4:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     204:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000211 <__c.3657>:
     211:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     221:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     231:	25 75 29 0a 00                                      %u)..

00000236 <__c.3648>:
     236:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     246:	61 69 6c 65 64 21 0a 00                             ailed!..

0000024e <__c.3642>:
     24e:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     25e:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000269 <__c.3627>:
     269:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     279:	35 75 0a 00                                         5u..

0000027d <__c.3625>:
     27d:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     28d:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000029b <__c.3623>:
     29b:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     2ab:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002b9 <__c.3621>:
     2b9:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2c9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002d7 <__c.3619>:
     2d7:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2e7:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002f5 <__c.3617>:
     2f5:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     305:	75 0a 00                                            u..

00000308 <__c.3615>:
     308:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     318:	75 0a 00                                            u..

0000031b <__c.3613>:
     31b:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000328 <__c.3611>:
     328:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     338:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000345 <__c.3730>:
     345:	0a 00                                               ..

00000347 <__c.3728>:
     347:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

00000351 <__c.3726>:
     351:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     361:	25 64 0a 00                                         %d..

00000365 <__c.3724>:
     365:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     375:	64 0a 00                                            d..

00000378 <__c.3719>:
     378:	0a 00                                               ..

0000037a <__c.3717>:
     37a:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     38a:	4b 0a 00                                            K..

0000038d <__c.3715>:
     38d:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     39d:	0a 00                                               ..

0000039f <__c.3713>:
     39f:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     3af:	0a 00                                               ..

000003b1 <__c.3711>:
     3b1:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003bd <__c.3709>:
     3bd:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003c7 <__c.3707>:
     3c7:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003d5 <__c.3705>:
     3d5:	20 20 25 73 0a 00                                     %s..

000003db <__c.3655>:
     3db:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3eb:	61 69 6c 65 64 0a 00                                ailed..

000003f2 <__c.3649>:
     3f2:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     402:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

0000040e <__c.3606>:
     40e:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     41e:	3d 3d 20 30 0a 00                                   == 0..

00000424 <__c.3604>:
     424:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     434:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

0000043d <__c.3602>:
     43d:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     44d:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000455 <__c.3652>:
     455:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     465:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000473 <__c.3642>:
     473:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     483:	72 6f 72 0a 00                                      ror..

00000488 <__c.3640>:
     488:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     498:	6f 72 0a 00                                         or..

0000049c <__c.3634>:
     49c:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

000004ac <__c.3628>:
     4ac:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004bd <__c.3620>:
     4bd:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4cd:	61 20 65 72 72 6f 72 0a 00                          a error..

000004d6 <__c.3618>:
     4d6:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4e6:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004f2 <__c.3610>:
     4f2:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     502:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

0000050c <__c.3638>:
     50c:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     51c:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     52c:	74 20 25 64 0a 00                                   t %d..

00000532 <__c.3595>:
     532:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     542:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000552 <__c.3674>:
     552:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000562 <__c.3672>:
     562:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000573 <__c.3670>:
     573:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     583:	66 61 69 6c 65 64 0a 00                             failed..

0000058b <__c.3668>:
     58b:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000597 <__c.3666>:
     597:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     5a7:	64 0a 00                                            d..

000005aa <__c.3664>:
     5aa:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5ba:	65 64 0a 00                                         ed..

000005be <__c.3644>:
     5be:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005c9 <__c.3642>:
     5c9:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005d7 <__c.3628>:
     5d7:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005e1 <__c.3608>:
     5e1:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5f1:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005fe <__c.3883>:
     5fe:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

0000060f <__c.3881>:
     60f:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     61f:	0a 00                                               ..

00000621 <__c.3879>:
     621:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

00000632 <__c.3877>:
     632:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

00000643 <__c.3875>:
     643:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     653:	0a 00                                               ..

00000655 <__c.3868>:
     655:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     665:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     675:	6d 65 0a 00                                         me..

00000679 <__c.3866>:
     679:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     689:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000693 <__c.3864>:
     693:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6a3:	61 69 6c 65 64 0a 00                                ailed..

000006aa <__c.3862>:
     6aa:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6ba:	6e 69 74 0a 00                                      nit..

000006bf <__c.3860>:
     6bf:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6cf:	0a 00                                               ..

000006d1 <__c.3814>:
     6d1:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6e1:	61 69 6c 65 64 0a 00                                ailed..

000006e8 <__c.3812>:
     6e8:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006f9 <__c.3810>:
     6f9:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     709:	0a 00                                               ..

0000070b <__c.3808>:
     70b:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000071c <__c.3806>:
     71c:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000072d <__c.3804>:
     72d:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     73d:	0a 00                                               ..

0000073f <__c.3783>:
     73f:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     74f:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

00000760 <__c.3658>:
     760:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     770:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

0000077d <__c.3626>:
     77d:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

0000078d <__c.3659>:
     78d:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

0000079b <__c.3657>:
     79b:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ab:	25 6c 64 0a 00                                      %ld..

000007b0 <__c.3655>:
     7b0:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7c0:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ce <__c.3652>:
     7ce:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007df <__c.3650>:
     7df:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007eb <__c.3648>:
     7eb:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7fb:	64 0a 00                                            d..

000007fe <__c.3646>:
     7fe:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     80e:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000081e <__c.3644>:
     81e:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000082e <__c.3631>:
     82e:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

0000083b <__c.3603>:
     83b:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     84b:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000857 <__c.3675>:
     857:	0a 00                                               ..

00000859 <__c.3673>:
     859:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     869:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     879:	73 00                                               s.

0000087b <__c.3671>:
     87b:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     88b:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000896 <__c.3665>:
     896:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8a6:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8b6:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8c6:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8d6:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008e3 <__c.3663>:
     8e3:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8f3:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     903:	30 34 58 0a 00                                      04X..

00000908 <__c.3661>:
     908:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     918:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000926 <__c.3659>:
     926:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     936:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000945 <__c.3657>:
     945:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     955:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000964 <__c.3655>:
     964:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     974:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000983 <__c.3653>:
     983:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     993:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009a2 <__c.3651>:
     9a2:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9b2:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009c1 <__c.3649>:
     9c1:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9d1:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009df <__c.3647>:
     9df:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9ef:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009fd <__c.3645>:
     9fd:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a0d:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a1c <__c.3643>:
     a1c:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a2c:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a3a <__c.3641>:
     a3a:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a4b <__c.3605>:
     a4b:	72 63 3d 25 75 0a 00                                rc=%u..

00000a52 <__c.3643>:
     a52:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a62:	72 65 65 0a 00                                      ree..

00000a67 <__c.3641>:
     a67:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a77:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a87:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a90 <__c.3637>:
     a90:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a9e <__c.3624>:
     a9e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aae:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000abe <__c.3622>:
     abe:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000acc <__c.3620>:
     acc:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     adc:	73 74 0a 00                                         st..

00000ae0 <__c.3618>:
     ae0:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000af0 <__c.3616>:
     af0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b00:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b10 <__c.3608>:
     b10:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b20 <__c.3598>:
     b20:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b30:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b40:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b50:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b60:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b70:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b80:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b90:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000b9c <__c.3596>:
     b9c:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000ba8 <__c.3928>:
     ba8:	25 73 0a 00                                         %s..

00000bac <__c.3926>:
     bac:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bb4 <__c.3681>:
     bb4:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bc0 <__c.3610>:
     bc0:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bd0:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bd8 <__c.3603>:
     bd8:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     be8:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bf0 <__c.3767>:
     bf0:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bfb <__c.3763>:
     bfb:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c0b:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c1b:	68 0a 00                                            h..

00000c1e <__c.3760>:
     c1e:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c2e <__c.3755>:
     c2e:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c3e:	5b 25 73 5d 0a 00                                   [%s]..

00000c44 <__c.3753>:
     c44:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c52 <__c.3751>:
     c52:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c62:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c73 <__c.3738>:
     c73:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c83:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c8d <__c.3733>:
     c8d:	25 73 0a 00                                         %s..

00000c91 <__c.3731>:
     c91:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     ca1:	0a 00                                               ..

00000ca3 <__c.3719>:
     ca3:	0d 00                                               ..

00000ca5 <__c.3717>:
     ca5:	4d 6f 72 65 2e 2e 00                                More...

00000cac <__c.3707>:
     cac:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cbc:	2e 0a 00                                            ...

00000cbf <__c.3703>:
     cbf:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cce <__c.3700>:
     cce:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cdb <__c.3698>:
     cdb:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000ce8 <__c.3696>:
     ce8:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cf8 <__c.3694>:
     cf8:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000d05 <__c.3692>:
     d05:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d15 <__c.3690>:
     d15:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d21 <__c.3679>:
     d21:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d2c <__c.3677>:
     d2c:	0a 00                                               ..

00000d2e <__c.3672>:
     d2e:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d3e <__c.3662>:
     d3e:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d4f <__c.3660>:
     d4f:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d5d <__c.3658>:
     d5d:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d6e <__c.3656>:
     d6e:	25 73 0a 00                                         %s..

00000d72 <__c.3653>:
     d72:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d83 <__c.3645>:
     d83:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d94 <__c.3629>:
     d94:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     da4:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     db4:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dc4:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dd4:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     de4:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     df4:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e04:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e14:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e24:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e34:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e44:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e54:	6e 65 77 0a 0a 00                                   new...

00000e5a <__c.3627>:
     e5a:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e66 <__c.3819>:
     e66:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e74 <__c.3813>:
     e74:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e81 <__c.3806>:
     e81:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e8f <__c.3797>:
     e8f:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e9c <__c.3788>:
     e9c:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ead <__c.3774>:
     ead:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ebd:	5d 0a 00                                            ]..

00000ec0 <__c.3756>:
     ec0:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     ed0:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000edd <__c.4415>:
     edd:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     eed:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     efd:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f05 <__c.4410>:
     f05:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f15:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f1f <__c.4400>:
     f1f:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f2f:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f3f:	28 25 64 29 5d 0a 00                                (%d)]..

00000f46 <__c.4396>:
     f46:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f56:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f66:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000f73 <__c.4393>:
     f73:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     f83:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000f8c <__c.4377>:
     f8c:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000f97 <__c.4375>:
     f97:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fa2 <__c.4373>:
     fa2:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000fad <__c.4369>:
     fad:	20 20 20 20 20 00                                        .

00000fb3 <__c.4367>:
     fb3:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000fbc <__c.4338>:
     fbc:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
     fcc:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00000fda <__c.4335>:
     fda:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
     fea:	73 74 61 74 65 3d 25 64 0a 00                       state=%d..

00000ff4 <__c.4319>:
     ff4:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1004:	3e 0a 00                                            >..

00001007 <__c.4315>:
    1007:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1017:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001021 <__c.4311>:
    1021:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1031:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

0000103c <__c.4308>:
    103c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    104c:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001057 <__c.4303>:
    1057:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1067:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1077:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000107f <__c.4299>:
    107f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    108f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001099 <__c.4296>:
    1099:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10a9:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

000010b8 <__c.4293>:
    10b8:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10c8:	20 4b 45 59 20 73 74 61 74 65 3d 25 64 0a 00         KEY state=%d..

000010d7 <__c.4278>:
    10d7:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    10e7:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    10f7:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001105 <__c.4266>:
    1105:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

00001111 <__c.4248>:
    1111:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1121:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000112c <__c.4246>:
    112c:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    113c:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    114c:	72 61 6e 67 65 0a 00                                range..

00001153 <__c.4241>:
    1153:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1163:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000116e <__c.4239>:
    116e:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    117e:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    118e:	61 6e 67 65 0a 00                                   ange..

00001194 <__c.4234>:
    1194:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11a4:	5d 0a 00                                            ]..

000011a7 <__c.4229>:
    11a7:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011b8 <__c.4405>:
    11b8:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011c9 <__c.4400>:
    11c9:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    11d9:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    11e9:	32 58 48 5d 0a 00                                   2XH]..

000011ef <__c.4398>:
    11ef:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    11ff:	0a 00                                               ..

00001201 <__c.4396>:
    1201:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001212 <__c.4391>:
    1212:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000121e <__c.4389>:
    121e:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000122e <__c.4387>:
    122e:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    123e:	52 5d 0a 00                                         R]..

00001242 <__c.4385>:
    1242:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1252:	0a 00                                               ..

00001254 <__c.4383>:
    1254:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001265 <__c.4381>:
    1265:	5b 55 4e 54 5d 0a 00                                [UNT]..

0000126c <__c.4376>:
    126c:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

00001278 <__c.4374>:
    1278:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1288:	52 5d 0a 00                                         R]..

0000128c <__c.4372>:
    128c:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000129d <__c.4370>:
    129d:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12ad:	0a 00                                               ..

000012af <__c.4368>:
    12af:	0a 00                                               ..

000012b1 <__c.4366>:
    12b1:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012b8 <__c.4361>:
    12b8:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    12c8:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

000012d9 <__c.4359>:
    12d9:	5b 44 43 4c 5d 0a 00                                [DCL]..

000012e0 <__c.4357>:
    12e0:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000012ed <__c.4355>:
    12ed:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

000012f9 <__c.4353>:
    12f9:	5b 53 44 43 5d 0a 00                                [SDC]..

00001300 <__c.4351>:
    1300:	5b 53 50 44 5d 0a 00                                [SPD]..

00001307 <__c.4349>:
    1307:	5b 53 50 45 5d 0a 00                                [SPE]..

0000130e <__c.4347>:
    130e:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    131e:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001326 <__c.4345>:
    1326:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1336:	20 54 4f 44 4f 5d 0a 00                              TODO]..

0000133e <__c.4340>:
    133e:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    134e:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001358 <__c.4338>:
    1358:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1368:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001379 <__c.4311>:
    1379:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

0000138a <__c.4309>:
    138a:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001397 <__c.4307>:
    1397:	3c 42 55 53 3e 0a 00                                <BUS>..

0000139e <__c.4305>:
    139e:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013a9 <__c.4303>:
    13a9:	3c 49 46 43 3e 0a 00                                <IFC>..

000013b0 <__c.4298>:
    13b0:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13c0:	0a 00                                               ..

000013c2 <__c.4296>:
    13c2:	44 6f 6e 65 0a 00                                   Done..

000013c8 <__c.4292>:
    13c8:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000013d4 <__c.4290>:
    13d4:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    13e4:	20 65 78 69 74 0a 00                                 exit..

000013eb <__c.4288>:
    13eb:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    13fb:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    140b:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001416 <__c.4286>:
    1416:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1426:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001430 <__c.4240>:
    1430:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1440:	6f 74 65 63 74 65 64 0a 00                          otected..

00001449 <__c.4238>:
    1449:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

0000145a <__c.4236>:
    145a:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    146a:	0a 00                                               ..

0000146c <__c.4431>:
    146c:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001479 <__c.4423>:
    1479:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1489:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1499:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    14a9:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    14b9:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    14c9:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    14d9:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    14e9:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    14f9:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1509:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1519:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    1529:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    1539:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    1549:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    1559:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    1569:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    1579:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1589:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1599:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    15a9:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    15b9:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    15c9:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    15d9:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    15e9:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    15f9:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1609:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1619:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    1629:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    1639:	74 61 74 65 73 0a 0a 0a 00                          tates....

00001642 <__c.4421>:
    1642:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000164d <__c.4811>:
    164d:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001655 <__c.4809>:
    1655:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1665:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000166f <__c.4807>:
    166f:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    167f:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    168f:	0a 00                                               ..

00001691 <__c.4805>:
    1691:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001699 <__c.4803>:
    1699:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    16a9:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000016b3 <__c.4801>:
    16b3:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    16c3:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    16d3:	0a 00                                               ..

000016d5 <__c.4784>:
    16d5:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    16e5:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    16f5:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1705:	6f 20 32 35 36 0a 00                                o 256..

0000170c <__c.4782>:
    170c:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    171c:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    172c:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    173c:	20 32 35 36 0a 00                                    256..

00001742 <__c.4769>:
    1742:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1752:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001761 <__c.4733>:
    1761:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1771:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1781:	0a 00                                               ..

00001783 <__c.4725>:
    1783:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1793:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    17a3:	6c 6c 0a 00                                         ll..

000017a7 <__c.4712>:
    17a7:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    17b7:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    17c7:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

000017d2 <__c.4710>:
    17d2:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    17e2:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    17f2:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1802:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

0000180a <__c.4708>:
    180a:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    181a:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    182a:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    183a:	3a 25 73 0a 00                                      :%s..

0000183f <__c.4706>:
    183f:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    184f:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    185f:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    186f:	55 4c 4c 0a 00                                      ULL..

00001874 <__c.4704>:
    1874:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1884:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1894:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    18a4:	66 20 72 61 6e 67 65 0a 00                          f range..

000018ad <__c.4702>:
    18ad:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18bd:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    18cd:	6e 67 65 0a 00                                      nge..

000018d2 <__c.4663>:
    18d2:	0a 00                                               ..

000018d4 <__c.4658>:
    18d4:	0a 00                                               ..

000018d6 <__c.4656>:
    18d6:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    18e6:	6c 64 0a 00                                         ld..

000018ea <__c.4654>:
    18ea:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    18fa:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001909 <__c.4652>:
    1909:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001913 <__c.4650>:
    1913:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1923:	6c 64 0a 00                                         ld..

00001927 <__c.4648>:
    1927:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1937:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001946 <__c.4646>:
    1946:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

0000194f <__c.4643>:
    194f:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    195f:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

0000196f <__c.4634>:
    196f:	0a 00                                               ..

00001971 <__c.4629>:
    1971:	0a 00                                               ..

00001973 <__c.4627>:
    1973:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

0000197c <__c.4625>:
    197c:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001986 <__c.4623>:
    1986:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

0000198f <__c.4620>:
    198f:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    199f:	0a 00                                               ..

000019a1 <__c.4614>:
    19a1:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    19b1:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    19c1:	2a 2a 2a 2a 2a 0a 00                                *****..

000019c8 <__c.4612>:
    19c8:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    19d8:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

000019e5 <__c.4610>:
    19e5:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    19f5:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1a05:	0a 00                                               ..

00001a07 <__c.4606>:
    1a07:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1a17:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1a27:	0a 00                                               ..

00001a29 <__c.4603>:
    1a29:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a39:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1a49:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001a59 <__c.4594>:
    1a59:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a69:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1a79:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001a88 <__c.4591>:
    1a88:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1a98:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1aa8:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ab8 <__c.4582>:
    1ab8:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ac8:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1ad8:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ae6 <__c.4574>:
    1ae6:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1af6:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1b06:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b14 <__c.4564>:
    1b14:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b24:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1b34:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001b40 <__c.4547>:
    1b40:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b50:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1b60:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b70:	0a 00                                               ..

00001b72 <__c.4539>:
    1b72:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b82:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1b92:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ba0 <__c.4536>:
    1ba0:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bb0:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bc0:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bce <__c.4528>:
    1bce:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bde:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1bee:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001bfb <__c.4518>:
    1bfb:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c0b:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c1b:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001c2c <__c.4515>:
    1c2c:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c3c:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1c4c:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001c56 <__c.4511>:
    1c56:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1c66:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c76:	0a 00                                               ..

00001c78 <__c.4500>:
    1c78:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1c88:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c98:	0a 00                                               ..

00001c9a <__c.4497>:
    1c9a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1caa:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001cb8 <__c.4495>:
    1cb8:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001cc5 <__c.4476>:
    1cc5:	25 73 0a 00                                         %s..

00001cc9 <__c.4466>:
    1cc9:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001cd5 <__c.4455>:
    1cd5:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1ce5:	6c 64 29 0a 00                                      ld)..

00001cea <__c.3652>:
    1cea:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001cfb <__c.3650>:
    1cfb:	25 73 20 25 73 0a 00                                %s %s..

00001d02 <__c.3646>:
    1d02:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1d12:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001d1f <__c.4548>:
    1d1f:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1d2f:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1d3f:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1d4f:	48 5d 0a 00                                         H]..

00001d53 <__c.4546>:
    1d53:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1d63:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1d73:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1d83:	48 5d 0a 00                                         H]..

00001d87 <__c.4544>:
    1d87:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1d97:	74 5d 0a 00                                         t]..

00001d9b <__c.4542>:
    1d9b:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001daa <__c.4540>:
    1daa:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1dba:	74 65 5d 0a 00                                      te]..

00001dbf <__c.4538>:
    1dbf:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1dcf:	61 74 65 5d 0a 00                                   ate]..

00001dd5 <__c.4536>:
    1dd5:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1de5:	61 74 65 5d 0a 00                                   ate]..

00001deb <__c.4531>:
    1deb:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1dfb:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1e0b:	5d 0a 00                                            ]..

00001e0e <__c.4517>:
    1e0e:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e1d <__c.4515>:
    1e1d:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1e2d:	5d 0a 00                                            ]..

00001e30 <__c.4508>:
    1e30:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001e3c <__c.4494>:
    1e3c:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1e4c:	5d 0a 00                                            ]..

00001e4f <__c.4492>:
    1e4f:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1e5f:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001e69 <__c.4485>:
    1e69:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1e79:	48 5d 0a 00                                         H]..

00001e7d <__c.4483>:
    1e7d:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1e8d:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001e9d <__c.4478>:
    1e9d:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1ead:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1ebd:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1ecd:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001ed9 <__c.4475>:
    1ed9:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1ee9:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001ef9 <__c.4473>:
    1ef9:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1f09:	29 5d 0a 00                                         )]..

00001f0d <__c.4471>:
    1f0d:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1f1d:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1f2d:	28 25 64 29 5d 0a 00                                (%d)]..

00001f34 <__c.4469>:
    1f34:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1f44:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001f52 <__c.4467>:
    1f52:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1f62:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001f6f <__c.4464>:
    1f6f:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1f7f:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1f8f:	44 4f 5d 0a 00                                      DO]..

00001f94 <__c.4461>:
    1f94:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1fa4:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001fad <__c.4459>:
    1fad:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1fbd:	5d 0a 00                                            ]..

00001fc0 <__c.4450>:
    1fc0:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1fd0:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1fe0:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1ff0:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001ff8 <__c.4447>:
    1ff8:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2008:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002018 <__c.4445>:
    2018:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    2028:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    2038:	5d 0a 00                                            ]..

0000203b <__c.4443>:
    203b:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    204b:	61 74 75 73 5d 0a 00                                atus]..

00002052 <__c.4441>:
    2052:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    2062:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

0000206b <__c.4439>:
    206b:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    207b:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002086 <__c.4437>:
    2086:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2096:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000020a5 <__c.4435>:
    20a5:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    20b5:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000020c3 <__c.4433>:
    20c3:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000020d4 <__c.4431>:
    20d4:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    20e4:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000020f0 <__c.4429>:
    20f0:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2100:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

0000210d <__c.4427>:
    210d:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    211d:	2d 4f 50 5d 0a 00                                   -OP]..

00002123 <__c.4425>:
    2123:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2133:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002144 <__c.4423>:
    2144:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2154:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2164:	44 4f 5d 0a 00                                      DO]..

00002169 <__c.4421>:
    2169:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2179:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00002183 <__c.4419>:
    2183:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    2193:	2d 4f 50 5d 0a 00                                   -OP]..

00002199 <__c.4417>:
    2199:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000021a7 <__c.4415>:
    21a7:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    21b7:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000021c3 <__c.4413>:
    21c3:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    21d3:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000021e0 <__c.4411>:
    21e0:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    21f0:	20 57 72 69 74 65 5d 0a 00                           Write]..

000021f9 <__c.4408>:
    21f9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2209:	20 52 65 61 64 5d 0a 00                              Read]..

00002211 <__c.4406>:
    2211:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2221:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000222a <__c.4403>:
    222a:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    223a:	25 64 29 5d 0a 00                                   %d)]..

00002240 <__c.4401>:
    2240:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2250:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002259 <__c.4399>:
    2259:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2269:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2279:	52 4f 52 5d 0a 00                                   ROR]..

0000227f <__c.4390>:
    227f:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    228f:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002299 <__c.4385>:
    2299:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    22a9:	76 61 6c 69 64 5d 0a 00                             valid]..

000022b1 <__c.4380>:
    22b1:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    22c1:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000022d0 <__c.4378>:
    22d0:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    22e0:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000022ed <__c.4376>:
    22ed:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    22fd:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    230d:	5d 0a 00                                            ]..

00002310 <__c.4374>:
    2310:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002321 <__c.4366>:
    2321:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2331:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

0000233c <__c.4364>:
    233c:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    234c:	73 5d 0a 00                                         s]..

00002350 <__c.4354>:
    2350:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

0000235b <__c.4352>:
    235b:	25 73 3a 0a 00                                      %s:..

00002360 <__c.4327>:
    2360:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2370:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2380:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

0000238b <__c.4325>:
    238b:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    239b:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    23ab:	49 4e 49 53 48 5d 0a 00                             INISH]..

000023b3 <__c.4321>:
    23b3:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    23c3:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    23d3:	58 48 29 5d 0a 00                                   XH)]..

000023d9 <__c.4319>:
    23d9:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    23e9:	72 5d 0a 00                                         r]..

000023ed <__c.4315>:
    23ed:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    23fd:	5d 0a 00                                            ]..

00002400 <__c.4313>:
    2400:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2410:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2420:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002429 <__c.4301>:
    2429:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2439:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2449:	62 79 74 65 73 5d 0a 00                             bytes]..

00002451 <__c.4299>:
    2451:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2461:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2471:	53 48 5d 0a 00                                      SH]..

00002476 <__c.4294>:
    2476:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2486:	20 45 72 72 6f 72 5d 0a 00                           Error]..

0000248f <__c.4292>:
    248f:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    249f:	45 72 72 6f 72 5d 0a 00                             Error]..

000024a7 <__c.4290>:
    24a7:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    24b7:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000024c5 <__c.4288>:
    24c5:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24d5:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    24e5:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000024ed <__c.4271>:
    24ed:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    24fd:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002509 <__c.4255>:
    2509:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2519:	5d 0a 00                                            ]..

0000251c <__c.4369>:
    251c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    252c:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    253c:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002545 <__c.4366>:
    2545:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    2555:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    2565:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002570 <__c.4363>:
    2570:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2580:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2590:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002599 <__c.4358>:
    2599:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    25a9:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000025b9 <__c.4355>:
    25b9:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    25c9:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000025d5 <__c.4352>:
    25d5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    25e5:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    25f5:	0a 00                                               ..

000025f7 <__c.4349>:
    25f7:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2607:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002616 <__c.4346>:
    2616:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2626:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002637 <__c.4343>:
    2637:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2647:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002657 <__c.4339>:
    2657:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2667:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2677:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2687:	0a 00                                               ..

00002689 <__c.4334>:
    2689:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002699 <__c.4331>:
    2699:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    26a9:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000026b8 <__c.4329>:
    26b8:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    26c8:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    26d8:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000026e3 <__c.4327>:
    26e3:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    26f3:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002703 <__c.4325>:
    2703:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2713:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2723:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

0000272c <__c.4323>:
    272c:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    273c:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002748 <__c.4321>:
    2748:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2758:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2768:	0a 00                                               ..

0000276a <__c.4319>:
    276a:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

0000277a <__c.4316>:
    277a:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    278a:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

0000279b <__c.4314>:
    279b:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    27ab:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    27bb:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000027c4 <__c.4312>:
    27c4:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    27d4:	36 5d 0a 00                                         6]..

000027d8 <__c.4309>:
    27d8:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    27e8:	35 5d 0a 00                                         5]..

000027ec <__c.4306>:
    27ec:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    27fc:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

0000280c <__c.4303>:
    280c:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    281c:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    282c:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

0000283b <__c.4301>:
    283b:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    284b:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

0000285c <__c.4299>:
    285c:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    286c:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

0000287d <__c.4297>:
    287d:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    288d:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    289d:	0a 00                                               ..

0000289f <__c.4295>:
    289f:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    28af:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    28bf:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    28cf:	0a 00                                               ..

000028d1 <__c.4283>:
    28d1:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    28e1:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    28f1:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2901:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2911:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002922 <__c.4281>:
    2922:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2932:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2942:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2952:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2962:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002972 <__c.4279>:
    2972:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2982:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2992:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    29a2:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    29b2:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000029c2 <__c.4277>:
    29c2:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    29d2:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    29e2:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    29f2:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a02:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a12 <__c.4272>:
    2a12:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2a22:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2a32:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2a42:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2a52:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2a62:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2a72:	58 48 5d 0a 00                                      XH]..

00002a77 <__c.4270>:
    2a77:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2a87:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a97:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2aa7:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ab7:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2ac7:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ad7:	30 32 58 48 5d 0a 00                                02XH]..

00002ade <__c.4268>:
    2ade:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2aee:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2afe:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b0e:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b1e:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b2e:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2b3e:	30 32 58 48 5d 0a 00                                02XH]..

00002b45 <__c.4266>:
    2b45:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2b55:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b65:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b75:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b85:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b95:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ba5:	30 32 58 48 5d 0a 00                                02XH]..

00002bac <__c.4259>:
    2bac:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002bbb <__c.4246>:
    2bbb:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002bc8 <__c.4244>:
    2bc8:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2bd8:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002be2 <__c.4237>:
    2be2:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2bf2:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002c01 <__c.4235>:
    2c01:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2c11:	0a 00                                               ..

00002c13 <__c.4228>:
    2c13:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2c23:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002c2d <__c.4222>:
    2c2d:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2c3d:	0a 00                                               ..

00002c3f <__c.4216>:
    2c3f:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2c4f:	6e 65 5d 0a 00                                      ne]..

00002c54 <__c.4212>:
    2c54:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002c64 <__c.4171>:
    2c64:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2c74:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2c84:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002c8f <__c.4201>:
    2c8f:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2c9f:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2caf:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002cb7 <__c.4178>:
    2cb7:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2cc7:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002cd0 <__c.4164>:
    2cd0:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2ce0:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002cea <__c.4162>:
    2cea:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2cfa:	75 73 5d 0a 00                                      us]..

00002cff <__c.4156>:
    2cff:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d0f:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d19 <__c.4154>:
    2d19:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2d29:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002d37 <__c.4148>:
    2d37:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2d47:	74 61 74 75 73 5d 0a 00                             tatus]..

00002d4f <__c.4148>:
    2d4f:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2d5f:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002d69 <__c.4146>:
    2d69:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2d79:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002d85 <__c.4141>:
    2d85:	25 30 38 6c 64 0d 00                                %08ld..

00002d8c <__c.4135>:
    2d8c:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2d9c:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002dad <__c.4129>:
    2dad:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002dbb <__c.4127>:
    2dbb:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2dcb:	69 74 65 0a 00                                      ite..

00002dd0 <__c.4121>:
    2dd0:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002ddc <__c.4119>:
    2ddc:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2dec:	6f 3a 25 73 0a 00                                   o:%s..

00002df2 <__c.4117>:
    2df2:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2e02:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2e12:	74 00                                               t.

00002e14 <__c.4562>:
    2e14:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2e24:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002e34 <__c.4560>:
    2e34:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2e44:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002e54 <__c.4558>:
    2e54:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2e64:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2e74:	30 0a 00                                            0..

00002e77 <__c.4556>:
    2e77:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2e87:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2e97:	70 74 79 0a 00                                      pty..

00002e9c <__c.4554>:
    2e9c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2eac:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2ebc:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002ec5 <__c.4541>:
    2ec5:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2ed5:	20 25 31 30 73 0a 00                                 %10s..

00002edc <__c.4539>:
    2edc:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2eec:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2efc:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002f05 <__c.4537>:
    2f05:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f15:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    2f25:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    2f35:	74 65 72 73 0a 00                                   ters..

00002f3b <__c.4535>:
    2f3b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f4b:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    2f5b:	65 6d 70 74 79 0a 00                                empty..

00002f62 <__c.4533>:
    2f62:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f72:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    2f82:	65 6d 70 74 79 0a 00                                empty..

00002f89 <__c.4531>:
    2f89:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f99:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    2fa9:	20 65 6d 70 74 79 0a 00                              empty..

00002fb1 <__c.4522>:
    2fb1:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00002fc0 <__c.4520>:
    2fc0:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    2fd0:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    2fe0:	20 66 6f 75 6e 64 0a 00                              found..

00002fe8 <__c.4518>:
    2fe8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    2ff8:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00003007 <__c.4516>:
    3007:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3017:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003027 <__c.4514>:
    3027:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3037:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3047:	70 74 79 0a 00                                      pty..

0000304c <__c.4506>:
    304c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000305a <__c.4501>:
    305a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003068 <__c.4499>:
    3068:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3078:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3088:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003098 <__c.4497>:
    3098:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    30a8:	73 0a 00                                            s..

000030ab <__c.4495>:
    30ab:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30bb:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    30cb:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000030da <__c.4493>:
    30da:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    30ea:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000030f6 <__c.4491>:
    30f6:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    3106:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003111 <__c.4489>:
    3111:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3121:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003131 <__c.4472>:
    3131:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000313f <__c.4467>:
    313f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000314d <__c.4465>:
    314d:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    315d:	73 0a 00                                            s..

00003160 <__c.4463>:
    3160:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3170:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003178 <__c.4446>:
    3178:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003186 <__c.4443>:
    3186:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3196:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    31a6:	20 65 72 72 6f 72 0a 00                              error..

000031ae <__c.4435>:
    31ae:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000031bc <__c.4433>:
    31bc:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    31cc:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    31dc:	20 65 72 72 6f 72 0a 00                              error..

000031e4 <__c.4430>:
    31e4:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    31f4:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3204:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3214:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3224:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3234:	30 32 58 48 0a 00                                   02XH..

0000323a <__c.4428>:
    323a:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    324a:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    325a:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    326a:	20 25 64 0a 00                                       %d..

0000326f <__c.4424>:
    326f:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

0000327f <__c.4422>:
    327f:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    328f:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    329f:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    32af:	30 78 45 30 31 33 0a 00                             0xE013..

000032b7 <__c.4420>:
    32b7:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    32c7:	6e 64 3a 25 73 0a 00                                nd:%s..

000032ce <__c.4418>:
    32ce:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    32de:	75 6e 64 3a 25 73 0a 00                             und:%s..

000032e6 <__c.4394>:
    32e6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000032f4 <__c.4392>:
    32f4:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3304:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000330d <__c.4390>:
    330d:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    331d:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003326 <__c.4388>:
    3326:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3336:	20 20 25 34 64 0a 00                                  %4d..

0000333d <__c.4386>:
    333d:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    334d:	20 20 20 25 73 0a 00                                   %s..

00003354 <__c.4384>:
    3354:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3364:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3374:	77 72 69 74 65 0a 00                                write..

0000337b <__c.4382>:
    337b:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    338b:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    339b:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000033ab <__c.4380>:
    33ab:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    33bb:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    33cb:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000033da <__c.4378>:
    33da:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    33ea:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    33fa:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000340a <__c.4376>:
    340a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    341a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    342a:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003439 <__c.4374>:
    3439:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3449:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3459:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003467 <__c.4372>:
    3467:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3477:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3487:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3497:	79 0a 00                                            y..

0000349a <__c.4358>:
    349a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034a8 <__c.4356>:
    34a8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034b6 <__c.4351>:
    34b6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034c4 <__c.4334>:
    34c4:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    34d4:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    34e4:	25 64 0a 00                                         %d..

000034e8 <__c.4317>:
    34e8:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    34f8:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3508:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3518:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003521 <__c.4303>:
    3521:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3531:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3541:	62 69 67 0a 00                                      big..

00003546 <__c.4301>:
    3546:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3556:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3566:	63 74 65 72 73 0a 00                                cters..

0000356d <__c.4294>:
    356d:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    357d:	73 0a 00                                            s..

00003580 <__c.4292>:
    3580:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3590:	73 0a 00                                            s..

00003593 <__c.4290>:
    3593:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    35a3:	73 0a 00                                            s..

000035a6 <__c.4288>:
    35a6:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000035b7 <__c.4286>:
    35b7:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000035c4 <__c.4284>:
    35c4:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000035d0 <__c.4282>:
    35d0:	0a 00                                               ..

000035d2 <__c.4279>:
    35d2:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    35e2:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    35f2:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003602 <__c.4277>:
    3602:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3612:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3622:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3632:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3642:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

0000364e <__c.4274>:
    364e:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    365e:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    366e:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    367e:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

0000368e <__c.4272>:
    368e:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    369e:	3a 5b 25 73 5d 0a 00                                :[%s]..

000036a5 <__c.4262>:
    36a5:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    36b5:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    36c5:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    36d5:	64 0a 00                                            d..

000036d8 <__c.4260>:
    36d8:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    36e8:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    36f8:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3708:	64 0a 00                                            d..

0000370b <__c.4258>:
    370b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    371b:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    372b:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    373b:	69 6c 65 64 0a 00                                   iled..

00003741 <__c.4256>:
    3741:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3751:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3761:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3771:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003780 <__c.4243>:
    3780:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3790:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    37a0:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    37b0:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    37c0:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000037d1 <__c.4240>:
    37d1:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    37e1:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    37f1:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000037fa <__c.4238>:
    37fa:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    380a:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    381a:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    382a:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003832 <__c.4226>:
    3832:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3842:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3852:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3862:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3872:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

0000387f <__c.4201>:
    387f:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    388f:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

0000389f <__c.4192>:
    389f:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    38af:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    38bf:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    38cf:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000038d9 <__c.4173>:
    38d9:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000038e6 <__c.4168>:
    38e6:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000038f3 <__c.4163>:
    38f3:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003900 <__c.4155>:
    3900:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

0000390d <__c.4153>:
    390d:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    391d:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    392d:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    393d:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    394d:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    395d:	25 6c 64 0a 00                                      %ld..

00003962 <__c.4137>:
    3962:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3972:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3982:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

0000398e <__c.4135>:
    398e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    399e:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    39ae:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

000039b9 <__c.4133>:
    39b9:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39c9:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    39d9:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    39e9:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    39f9:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003a04 <__c.4131>:
    3a04:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a14:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3a24:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a34:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3a44:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003a4f <__c.4129>:
    3a4f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a5f:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3a6f:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003a7d <__c.4127>:
    3a7d:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a8d:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3a9d:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3aad:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003abe <__c.4125>:
    3abe:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ace:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3ade:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3aee:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3afe:	58 68 0a 00                                         Xh..

00003b02 <__c.4123>:
    3b02:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b12:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003b23 <__c.4117>:
    3b23:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b33:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3b43:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003b4f <__c.4115>:
    3b4f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b5f:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3b6f:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003b7e <__c.4113>:
    3b7e:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b8e:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3b9e:	25 6c 64 0a 00                                      %ld..

00003ba3 <__c.4111>:
    3ba3:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3bb3:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3bc3:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3bd3:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003bdc <__c.4109>:
    3bdc:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3bec:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3bfc:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3c0c:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003c15 <__c.4107>:
    3c15:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3c25:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003c2d <__c.4105>:
    3c2d:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c3d:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3c4d:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3c5d:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003c66 <__c.4103>:
    3c66:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c76:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003c85 <__c.4096>:
    3c85:	0a 00                                               ..

00003c87 <__c.4094>:
    3c87:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3c97:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003ca1 <__c.4092>:
    3ca1:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3cb1:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003cbd <__c.4090>:
    3cbd:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3ccd:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003cda <__c.4088>:
    3cda:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3cea:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003cf7 <__c.4086>:
    3cf7:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3d07:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d14 <__c.4084>:
    3d14:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3d24:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003d30 <__c.4082>:
    3d30:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3d40:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003d4c <__c.4080>:
    3d4c:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3d5c:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d66 <__c.4078>:
    3d66:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3d76:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d80 <__c.4076>:
    3d80:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3d90:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003d9c <__c.4074>:
    3d9c:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3dac:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003db8 <__c.4072>:
    3db8:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3dc8:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dd5 <__c.4070>:
    3dd5:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3de5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003df2 <__c.4068>:
    3df2:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3e02:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e0e <__c.4066>:
    3e0e:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3e1e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e28 <__c.4064>:
    3e28:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3e38:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e45 <__c.4062>:
    3e45:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3e55:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e62 <__c.4060>:
    3e62:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3e72:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e7f <__c.4058>:
    3e7f:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3e8f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e9c <__c.4056>:
    3e9c:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3eac:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003eb9 <__c.4054>:
    3eb9:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3ec9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ed6 <__c.4052>:
    3ed6:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3ee6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ef3 <__c.4050>:
    3ef3:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3f03:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f10 <__c.4048>:
    3f10:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    3f20:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f2a <__c.4046>:
    3f2a:	0a 25 73 0a 00                                      .%s..

00003f2f <__c.3923>:
    3f2f:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    3f3f:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    3f4f:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    3f5f:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00003f6c <__c.3914>:
    3f6c:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    3f7c:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    3f8c:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    3f9c:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00003fa8 <__c.3905>:
    3fa8:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    3fb8:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00003fc9 <__c.3898>:
    3fc9:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    3fd9:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00003fe2 <__c.3892>:
    3fe2:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    3ff2:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4002:	25 73 5d 0a 00                                      %s]..

00004007 <__c.3880>:
    4007:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4017:	6f 69 6e 74 65 72 0a 00                             ointer..

0000401f <__c.3875>:
    401f:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    402f:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    403f:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004048 <__c.3869>:
    4048:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4058:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004069 <__c.3856>:
    4069:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4079:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4089:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4099:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    40a9:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    40b9:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    40c9:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    40d9:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    40e9:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    40f9:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4109:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4119:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4129:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4139:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4149:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4159:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4169:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4179:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4189:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4199:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    41a9:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    41b9:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    41c9:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    41d9:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    41e9:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    41f9:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    4209:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    4219:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    4229:	75 67 67 69 6e 67 0a 0a 00                          ugging...

00004232 <__c.3854>:
    4232:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

0000423c <__c.4589>:
    423c:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    424c:	53 4b 0a 00                                         SK..

00004250 <__c.4587>:
    4250:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4260:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000426a <__c.4585>:
    426a:	25 2d 31 36 73 00                                   %-16s.

00004270 <__c.4583>:
    4270:	25 2d 31 36 73 00                                   %-16s.

00004276 <__c.4581>:
    4276:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

00004287 <__c.4579>:
    4287:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4297:	30 34 78 48 0a 00                                   04xH..

0000429d <__c.4577>:
    429d:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    42ad:	64 6f 6e 65 0a 00                                   done..

000042b3 <__c.4575>:
    42b3:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    42c3:	6f 6e 65 0a 00                                      one..

000042c8 <__c.4573>:
    42c8:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    42d8:	61 6c 69 7a 65 64 0a 00                             alized..

000042e0 <__c.4571>:
    42e0:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    42f0:	0a 00                                               ..

000042f2 <__c.4569>:
    42f2:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4302:	7a 65 64 0a 00                                      zed..

00004307 <__c.4567>:
    4307:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4317:	69 7a 65 64 0a 00                                   ized..

0000431d <__c.4565>:
    431d:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

0000432e <__c.4563>:
    432e:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    433e:	20 73 74 61 72 74 0a 00                              start..

00004346 <__c.4561>:
    4346:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    4356:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    4366:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

00004374 <__c.4559>:
    4374:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004383 <__c.4557>:
    4383:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4393:	0a 00                                               ..

00004395 <__c.4555>:
    4395:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    43a5:	20 62 75 73 0a 00                                    bus..

000043ab <__c.4553>:
    43ab:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    43bb:	20 62 75 73 0a 00                                    bus..

000043c1 <__c.4551>:
    43c1:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    43d1:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000043db <__c.4549>:
    43db:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    43eb:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000043f5 <__c.4547>:
    43f5:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4405:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4415:	35 64 69 73 6b 0a 00                                5disk..

0000441c <__c.4545>:
    441c:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000442c <__c.4543>:
    442c:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    443c:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004449 <__c.4541>:
    4449:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4459:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004468 <__c.4539>:
    4468:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4478:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4488:	3a 20 25 6c 64 0a 00                                : %ld..

0000448f <__c.4537>:
    448f:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000044a0 <__c.4535>:
    44a0:	53 74 61 72 74 0a 00                                Start..

000044a7 <__c.4526>:
    44a7:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

000044b3 <__c.4524>:
    44b3:	4f 4b 0a 00                                         OK..

000044b7 <__c.4522>:
    44b7:	0a 3e 00                                            .>.

000044ba <__c.4511>:
    44ba:	68 65 6c 70 0a 6c 65 64 0a 6d 65 6d 0a 73 65 74     help.led.mem.set
    44ca:	64 61 74 65 0a 74 69 6d 65 0a 72 65 73 65 74 0a     date.time.reset.
    44da:	0a 00                                               ..

000044dc <__c.4504>:
    44dc:	25 2d 31 36 73 00                                   %-16s.

000044e2 <__c.4502>:
    44e2:	25 2d 31 36 73 00                                   %-16s.

000044e8 <__c.4495>:
    44e8:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    44f8:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004502 <__c.4493>:
    4502:	25 2d 31 36 73 00                                   %-16s.

00004508 <__c.4491>:
    4508:	25 2d 31 36 73 00                                   %-16s.

0000450e <__c.4489>:
    450e:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    451e:	69 6c 65 64 0a 00                                   iled..

00004524 <__c.4487>:
    4524:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4534:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004542 <__c.4481>:
    4542:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4552:	3a 25 30 32 64 00                                   :%02d.

00004558 <__c.4467>:
    4558:	0a 00                                               ..

0000455a <__c.4465>:
    455a:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    456a:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004574 <__c.4463>:
    4574:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4584:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000458e <__c.4461>:
    458e:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    459e:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    45ae:	35 64 69 73 6b 0a 00                                5disk..

000045b5 <__c.4459>:
    45b5:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000045c5 <__c.4457>:
    45c5:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    45d5:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000045e2 <__c.4455>:
    45e2:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    45f2:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004601 <__c.4453>:
    4601:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4611:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4621:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

00004632 <__ctors_end>:
    4632:	11 24       	eor	r1, r1
    4634:	1f be       	out	0x3f, r1	; 63
    4636:	cf ef       	ldi	r28, 0xFF	; 255
    4638:	d0 e4       	ldi	r29, 0x40	; 64
    463a:	de bf       	out	0x3e, r29	; 62
    463c:	cd bf       	out	0x3d, r28	; 61

0000463e <__do_copy_data>:
    463e:	17 e1       	ldi	r17, 0x17	; 23
    4640:	a0 e0       	ldi	r26, 0x00	; 0
    4642:	b1 e0       	ldi	r27, 0x01	; 1
    4644:	e6 e8       	ldi	r30, 0x86	; 134
    4646:	f7 ec       	ldi	r31, 0xC7	; 199
    4648:	01 e0       	ldi	r16, 0x01	; 1
    464a:	0b bf       	out	0x3b, r16	; 59
    464c:	02 c0       	rjmp	.+4      	; 0x4652 <__do_copy_data+0x14>
    464e:	07 90       	elpm	r0, Z+
    4650:	0d 92       	st	X+, r0
    4652:	ac 35       	cpi	r26, 0x5C	; 92
    4654:	b1 07       	cpc	r27, r17
    4656:	d9 f7       	brne	.-10     	; 0x464e <__do_copy_data+0x10>

00004658 <__do_clear_bss>:
    4658:	21 e2       	ldi	r18, 0x21	; 33
    465a:	ac e5       	ldi	r26, 0x5C	; 92
    465c:	b7 e1       	ldi	r27, 0x17	; 23
    465e:	01 c0       	rjmp	.+2      	; 0x4662 <.do_clear_bss_start>

00004660 <.do_clear_bss_loop>:
    4660:	1d 92       	st	X+, r1

00004662 <.do_clear_bss_start>:
    4662:	ac 3b       	cpi	r26, 0xBC	; 188
    4664:	b2 07       	cpc	r27, r18
    4666:	e1 f7       	brne	.-8      	; 0x4660 <.do_clear_bss_loop>
    4668:	0e 94 38 dd 	call	0x1ba70	; 0x1ba70 <main>
    466c:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <_exit>

00004670 <__bad_interrupt>:
    4670:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004674 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    4674:	e8 2f       	mov	r30, r24
    4676:	e6 95       	lsr	r30
    4678:	e6 95       	lsr	r30
    467a:	e6 95       	lsr	r30
    467c:	93 e0       	ldi	r25, 0x03	; 3
    467e:	e9 9f       	mul	r30, r25
    4680:	f0 01       	movw	r30, r0
    4682:	11 24       	eor	r1, r1
    4684:	32 a1       	ldd	r19, Z+34	; 0x22
    4686:	28 2f       	mov	r18, r24
    4688:	27 70       	andi	r18, 0x07	; 7
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	01 c0       	rjmp	.+2      	; 0x4692 <chip_select+0x1e>
    4690:	88 0f       	add	r24, r24
    4692:	2a 95       	dec	r18
    4694:	ea f7       	brpl	.-6      	; 0x4690 <chip_select+0x1c>
    4696:	98 2f       	mov	r25, r24
    4698:	90 95       	com	r25
    469a:	93 23       	and	r25, r19
    469c:	92 a3       	std	Z+34, r25	; 0x22
    469e:	91 a1       	ldd	r25, Z+33	; 0x21
    46a0:	89 2b       	or	r24, r25
    46a2:	81 a3       	std	Z+33, r24	; 0x21
    46a4:	08 95       	ret

000046a6 <chip_deselect>:
    46a6:	e8 2f       	mov	r30, r24
    46a8:	e6 95       	lsr	r30
    46aa:	e6 95       	lsr	r30
    46ac:	e6 95       	lsr	r30
    46ae:	93 e0       	ldi	r25, 0x03	; 3
    46b0:	e9 9f       	mul	r30, r25
    46b2:	f0 01       	movw	r30, r0
    46b4:	11 24       	eor	r1, r1
    46b6:	32 a1       	ldd	r19, Z+34	; 0x22
    46b8:	28 2f       	mov	r18, r24
    46ba:	27 70       	andi	r18, 0x07	; 7
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	01 c0       	rjmp	.+2      	; 0x46c4 <chip_deselect+0x1e>
    46c2:	88 0f       	add	r24, r24
    46c4:	2a 95       	dec	r18
    46c6:	ea f7       	brpl	.-6      	; 0x46c2 <chip_deselect+0x1c>
    46c8:	93 2f       	mov	r25, r19
    46ca:	98 2b       	or	r25, r24
    46cc:	92 a3       	std	Z+34, r25	; 0x22
    46ce:	91 a1       	ldd	r25, Z+33	; 0x21
    46d0:	89 2b       	or	r24, r25
    46d2:	81 a3       	std	Z+33, r24	; 0x21
    46d4:	08 95       	ret

000046d6 <chip_select_init>:
    46d6:	e7 cf       	rjmp	.-50     	; 0x46a6 <chip_deselect>
    46d8:	08 95       	ret

000046da <spi_end>:
    46da:	cf 93       	push	r28
    46dc:	ad b7       	in	r26, 0x3d	; 61
    46de:	be b7       	in	r27, 0x3e	; 62
    46e0:	17 97       	sbiw	r26, 0x07	; 7
    46e2:	0f b6       	in	r0, 0x3f	; 63
    46e4:	f8 94       	cli
    46e6:	be bf       	out	0x3e, r27	; 62
    46e8:	0f be       	out	0x3f, r0	; 63
    46ea:	ad bf       	out	0x3d, r26	; 61
    46ec:	c8 2f       	mov	r28, r24
    46ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    46f2:	8c 17       	cp	r24, r28
    46f4:	99 f0       	breq	.+38     	; 0x471c <spi_end+0x42>
    46f6:	8f 3f       	cpi	r24, 0xFF	; 255
    46f8:	89 f0       	breq	.+34     	; 0x471c <spi_end+0x42>
    46fa:	2c 2f       	mov	r18, r28
    46fc:	30 e0       	ldi	r19, 0x00	; 0
    46fe:	ed b7       	in	r30, 0x3d	; 61
    4700:	fe b7       	in	r31, 0x3e	; 62
    4702:	37 83       	std	Z+7, r19	; 0x07
    4704:	26 83       	std	Z+6, r18	; 0x06
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	95 83       	std	Z+5, r25	; 0x05
    470a:	84 83       	std	Z+4, r24	; 0x04
    470c:	86 ed       	ldi	r24, 0xD6	; 214
    470e:	91 e0       	ldi	r25, 0x01	; 1
    4710:	a0 e0       	ldi	r26, 0x00	; 0
    4712:	81 83       	std	Z+1, r24	; 0x01
    4714:	92 83       	std	Z+2, r25	; 0x02
    4716:	a3 83       	std	Z+3, r26	; 0x03
    4718:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    471c:	8c 2f       	mov	r24, r28
    471e:	c3 df       	rcall	.-122    	; 0x46a6 <chip_deselect>
    4720:	8f ef       	ldi	r24, 0xFF	; 255
    4722:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4726:	ad b7       	in	r26, 0x3d	; 61
    4728:	be b7       	in	r27, 0x3e	; 62
    472a:	17 96       	adiw	r26, 0x07	; 7
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	f8 94       	cli
    4730:	be bf       	out	0x3e, r27	; 62
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	ad bf       	out	0x3d, r26	; 61
    4736:	cf 91       	pop	r28
    4738:	08 95       	ret

0000473a <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    473a:	cc c4       	rjmp	.+2456   	; 0x50d4 <SPI0_TX>
    473c:	08 95       	ret

0000473e <spi_RX_buffer>:
    473e:	f4 c4       	rjmp	.+2536   	; 0x5128 <SPI0_RX>
    4740:	08 95       	ret

00004742 <spi_TX>:
    4742:	a1 e0       	ldi	r26, 0x01	; 1
    4744:	b0 e0       	ldi	r27, 0x00	; 0
    4746:	e7 ea       	ldi	r30, 0xA7	; 167
    4748:	f3 e2       	ldi	r31, 0x23	; 35
    474a:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    474e:	89 83       	std	Y+1, r24	; 0x01
    4750:	61 e0       	ldi	r22, 0x01	; 1
    4752:	70 e0       	ldi	r23, 0x00	; 0
    4754:	ce 01       	movw	r24, r28
    4756:	01 96       	adiw	r24, 0x01	; 1
    4758:	bd d4       	rcall	.+2426   	; 0x50d4 <SPI0_TX>
    475a:	21 96       	adiw	r28, 0x01	; 1
    475c:	e2 e0       	ldi	r30, 0x02	; 2
    475e:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00004762 <spi_init>:
    4762:	cf 92       	push	r12
    4764:	df 92       	push	r13
    4766:	ef 92       	push	r14
    4768:	ff 92       	push	r15
    476a:	6b 01       	movw	r12, r22
    476c:	7c 01       	movw	r14, r24
    476e:	84 2f       	mov	r24, r20
    4770:	9a df       	rcall	.-204    	; 0x46a6 <chip_deselect>
    4772:	8f ef       	ldi	r24, 0xFF	; 255
    4774:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4778:	c7 01       	movw	r24, r14
    477a:	b6 01       	movw	r22, r12
    477c:	7e d4       	rcall	.+2300   	; 0x507a <SPI0_Init>
    477e:	80 e0       	ldi	r24, 0x00	; 0
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	3b d4       	rcall	.+2166   	; 0x4ffa <SPI0_Mode>
    4784:	8f ef       	ldi	r24, 0xFF	; 255
    4786:	dd df       	rcall	.-70     	; 0x4742 <spi_TX>
    4788:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    478c:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4790:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4794:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
    4798:	ff 90       	pop	r15
    479a:	ef 90       	pop	r14
    479c:	df 90       	pop	r13
    479e:	cf 90       	pop	r12
    47a0:	08 95       	ret

000047a2 <spi_begin>:
    47a2:	cf 92       	push	r12
    47a4:	df 92       	push	r13
    47a6:	ef 92       	push	r14
    47a8:	ff 92       	push	r15
    47aa:	cf 93       	push	r28
    47ac:	df 93       	push	r29
    47ae:	ad b7       	in	r26, 0x3d	; 61
    47b0:	be b7       	in	r27, 0x3e	; 62
    47b2:	17 97       	sbiw	r26, 0x07	; 7
    47b4:	0f b6       	in	r0, 0x3f	; 63
    47b6:	f8 94       	cli
    47b8:	be bf       	out	0x3e, r27	; 62
    47ba:	0f be       	out	0x3f, r0	; 63
    47bc:	ad bf       	out	0x3d, r26	; 61
    47be:	6b 01       	movw	r12, r22
    47c0:	7c 01       	movw	r14, r24
    47c2:	ea 01       	movw	r28, r20
    47c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    47c8:	8f 3f       	cpi	r24, 0xFF	; 255
    47ca:	79 f0       	breq	.+30     	; 0x47ea <spi_begin+0x48>
    47cc:	ed b7       	in	r30, 0x3d	; 61
    47ce:	fe b7       	in	r31, 0x3e	; 62
    47d0:	46 83       	std	Z+6, r20	; 0x06
    47d2:	d7 83       	std	Z+7, r29	; 0x07
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	95 83       	std	Z+5, r25	; 0x05
    47d8:	84 83       	std	Z+4, r24	; 0x04
    47da:	84 ef       	ldi	r24, 0xF4	; 244
    47dc:	91 e0       	ldi	r25, 0x01	; 1
    47de:	a0 e0       	ldi	r26, 0x00	; 0
    47e0:	81 83       	std	Z+1, r24	; 0x01
    47e2:	92 83       	std	Z+2, r25	; 0x02
    47e4:	a3 83       	std	Z+3, r26	; 0x03
    47e6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    47ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    47ee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    47f2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    47f6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    47fa:	8c 15       	cp	r24, r12
    47fc:	9d 05       	cpc	r25, r13
    47fe:	ae 05       	cpc	r26, r14
    4800:	bf 05       	cpc	r27, r15
    4802:	21 f0       	breq	.+8      	; 0x480c <spi_begin+0x6a>
    4804:	ae 01       	movw	r20, r28
    4806:	c7 01       	movw	r24, r14
    4808:	b6 01       	movw	r22, r12
    480a:	ab df       	rcall	.-170    	; 0x4762 <spi_init>
    480c:	8c 2f       	mov	r24, r28
    480e:	32 df       	rcall	.-412    	; 0x4674 <chip_select>
    4810:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
    4814:	ad b7       	in	r26, 0x3d	; 61
    4816:	be b7       	in	r27, 0x3e	; 62
    4818:	17 96       	adiw	r26, 0x07	; 7
    481a:	0f b6       	in	r0, 0x3f	; 63
    481c:	f8 94       	cli
    481e:	be bf       	out	0x3e, r27	; 62
    4820:	0f be       	out	0x3f, r0	; 63
    4822:	ad bf       	out	0x3d, r26	; 61
    4824:	df 91       	pop	r29
    4826:	cf 91       	pop	r28
    4828:	ff 90       	pop	r15
    482a:	ef 90       	pop	r14
    482c:	df 90       	pop	r13
    482e:	cf 90       	pop	r12
    4830:	08 95       	ret

00004832 <spi_TXRX>:
    4832:	a1 e0       	ldi	r26, 0x01	; 1
    4834:	b0 e0       	ldi	r27, 0x00	; 0
    4836:	ef e1       	ldi	r30, 0x1F	; 31
    4838:	f4 e2       	ldi	r31, 0x24	; 36
    483a:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    483e:	89 83       	std	Y+1, r24	; 0x01
    4840:	61 e0       	ldi	r22, 0x01	; 1
    4842:	70 e0       	ldi	r23, 0x00	; 0
    4844:	ce 01       	movw	r24, r28
    4846:	01 96       	adiw	r24, 0x01	; 1
    4848:	59 d4       	rcall	.+2226   	; 0x50fc <SPI0_TXRX>
    484a:	89 81       	ldd	r24, Y+1	; 0x01
    484c:	21 96       	adiw	r28, 0x01	; 1
    484e:	e2 e0       	ldi	r30, 0x02	; 2
    4850:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00004854 <set_error>:
    4854:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <__data_end>
    4858:	2c 9a       	sbi	0x05, 4	; 5
    485a:	24 9a       	sbi	0x04, 4	; 4
    485c:	08 95       	ret

0000485e <clear_error>:
    485e:	10 92 5c 17 	sts	0x175C, r1	; 0x80175c <__data_end>
    4862:	2c 98       	cbi	0x05, 4	; 5
    4864:	24 9a       	sbi	0x04, 4	; 4
    4866:	08 95       	ret

00004868 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4868:	a2 e0       	ldi	r26, 0x02	; 2
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	ea e3       	ldi	r30, 0x3A	; 58
    486e:	f4 e2       	ldi	r31, 0x24	; 36
    4870:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4874:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
    4878:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
    487c:	21 15       	cp	r18, r1
    487e:	31 05       	cpc	r19, r1
    4880:	11 f4       	brne	.+4      	; 0x4886 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4882:	2c eb       	ldi	r18, 0xBC	; 188
    4884:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4886:	ce 01       	movw	r24, r28
    4888:	01 96       	adiw	r24, 0x01	; 1
    488a:	82 1b       	sub	r24, r18
    488c:	93 0b       	sbc	r25, r19
    488e:	22 96       	adiw	r28, 0x02	; 2
    4890:	e2 e0       	ldi	r30, 0x02	; 2
    4892:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00004896 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4896:	a9 e0       	ldi	r26, 0x09	; 9
    4898:	b0 e0       	ldi	r27, 0x00	; 0
    489a:	e1 e5       	ldi	r30, 0x51	; 81
    489c:	f4 e2       	ldi	r31, 0x24	; 36
    489e:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    48a2:	e2 df       	rcall	.-60     	; 0x4868 <freeRam>
    48a4:	99 87       	std	Y+9, r25	; 0x09

    printf("Free Ram:%u\n", ram);
    48a6:	88 87       	std	Y+8, r24	; 0x08
    48a8:	ed b7       	in	r30, 0x3d	; 61
    48aa:	fe b7       	in	r31, 0x3e	; 62
    48ac:	95 83       	std	Z+5, r25	; 0x05
    48ae:	84 83       	std	Z+4, r24	; 0x04
    48b0:	8b e1       	ldi	r24, 0x1B	; 27
    48b2:	93 e0       	ldi	r25, 0x03	; 3
    48b4:	a0 e0       	ldi	r26, 0x00	; 0
    48b6:	81 83       	std	Z+1, r24	; 0x01
    48b8:	92 83       	std	Z+2, r25	; 0x02
    48ba:	a3 83       	std	Z+3, r26	; 0x03
    48bc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    48c0:	8f ef       	ldi	r24, 0xFF	; 255
    48c2:	90 e4       	ldi	r25, 0x40	; 64
    48c4:	ed b7       	in	r30, 0x3d	; 61
    48c6:	fe b7       	in	r31, 0x3e	; 62
    48c8:	95 83       	std	Z+5, r25	; 0x05
    48ca:	84 83       	std	Z+4, r24	; 0x04
    48cc:	88 e0       	ldi	r24, 0x08	; 8
    48ce:	93 e0       	ldi	r25, 0x03	; 3
    48d0:	a0 e0       	ldi	r26, 0x00	; 0
    48d2:	81 83       	std	Z+1, r24	; 0x01
    48d4:	92 83       	std	Z+2, r25	; 0x02
    48d6:	a3 83       	std	Z+3, r26	; 0x03
    48d8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    48dc:	ce 01       	movw	r24, r28
    48de:	08 96       	adiw	r24, 0x08	; 8
    48e0:	ed b7       	in	r30, 0x3d	; 61
    48e2:	fe b7       	in	r31, 0x3e	; 62
    48e4:	95 83       	std	Z+5, r25	; 0x05
    48e6:	84 83       	std	Z+4, r24	; 0x04
    48e8:	85 ef       	ldi	r24, 0xF5	; 245
    48ea:	92 e0       	ldi	r25, 0x02	; 2
    48ec:	a0 e0       	ldi	r26, 0x00	; 0
    48ee:	81 83       	std	Z+1, r24	; 0x01
    48f0:	92 83       	std	Z+2, r25	; 0x02
    48f2:	a3 83       	std	Z+3, r26	; 0x03
    48f4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    48f8:	8c eb       	ldi	r24, 0xBC	; 188
    48fa:	91 e2       	ldi	r25, 0x21	; 33
    48fc:	ed b7       	in	r30, 0x3d	; 61
    48fe:	fe b7       	in	r31, 0x3e	; 62
    4900:	97 83       	std	Z+7, r25	; 0x07
    4902:	86 83       	std	Z+6, r24	; 0x06
    4904:	8c e5       	ldi	r24, 0x5C	; 92
    4906:	97 e1       	ldi	r25, 0x17	; 23
    4908:	95 83       	std	Z+5, r25	; 0x05
    490a:	84 83       	std	Z+4, r24	; 0x04
    490c:	87 ed       	ldi	r24, 0xD7	; 215
    490e:	92 e0       	ldi	r25, 0x02	; 2
    4910:	a0 e0       	ldi	r26, 0x00	; 0
    4912:	81 83       	std	Z+1, r24	; 0x01
    4914:	92 83       	std	Z+2, r25	; 0x02
    4916:	a3 83       	std	Z+3, r26	; 0x03
    4918:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    491c:	8c e5       	ldi	r24, 0x5C	; 92
    491e:	97 e1       	ldi	r25, 0x17	; 23
    4920:	ed b7       	in	r30, 0x3d	; 61
    4922:	fe b7       	in	r31, 0x3e	; 62
    4924:	97 83       	std	Z+7, r25	; 0x07
    4926:	86 83       	std	Z+6, r24	; 0x06
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	91 e0       	ldi	r25, 0x01	; 1
    492c:	95 83       	std	Z+5, r25	; 0x05
    492e:	84 83       	std	Z+4, r24	; 0x04
    4930:	89 eb       	ldi	r24, 0xB9	; 185
    4932:	92 e0       	ldi	r25, 0x02	; 2
    4934:	a0 e0       	ldi	r26, 0x00	; 0
    4936:	81 83       	std	Z+1, r24	; 0x01
    4938:	92 83       	std	Z+2, r25	; 0x02
    493a:	a3 83       	std	Z+3, r26	; 0x03
    493c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4940:	80 e0       	ldi	r24, 0x00	; 0
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	ed b7       	in	r30, 0x3d	; 61
    4946:	fe b7       	in	r31, 0x3e	; 62
    4948:	97 83       	std	Z+7, r25	; 0x07
    494a:	86 83       	std	Z+6, r24	; 0x06
    494c:	8c eb       	ldi	r24, 0xBC	; 188
    494e:	91 e2       	ldi	r25, 0x21	; 33
    4950:	95 83       	std	Z+5, r25	; 0x05
    4952:	84 83       	std	Z+4, r24	; 0x04
    4954:	8b e9       	ldi	r24, 0x9B	; 155
    4956:	92 e0       	ldi	r25, 0x02	; 2
    4958:	a0 e0       	ldi	r26, 0x00	; 0
    495a:	81 83       	std	Z+1, r24	; 0x01
    495c:	92 83       	std	Z+2, r25	; 0x02
    495e:	a3 83       	std	Z+3, r26	; 0x03
    4960:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4964:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4968:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    496c:	ed b7       	in	r30, 0x3d	; 61
    496e:	fe b7       	in	r31, 0x3e	; 62
    4970:	97 83       	std	Z+7, r25	; 0x07
    4972:	86 83       	std	Z+6, r24	; 0x06
    4974:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4978:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    497c:	95 83       	std	Z+5, r25	; 0x05
    497e:	84 83       	std	Z+4, r24	; 0x04
    4980:	8d e7       	ldi	r24, 0x7D	; 125
    4982:	92 e0       	ldi	r25, 0x02	; 2
    4984:	a0 e0       	ldi	r26, 0x00	; 0
    4986:	81 83       	std	Z+1, r24	; 0x01
    4988:	92 83       	std	Z+2, r25	; 0x02
    498a:	a3 83       	std	Z+3, r26	; 0x03
    498c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4990:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <__brkval>
    4994:	90 91 b9 21 	lds	r25, 0x21B9	; 0x8021b9 <__brkval+0x1>
    4998:	ed b7       	in	r30, 0x3d	; 61
    499a:	fe b7       	in	r31, 0x3e	; 62
    499c:	95 83       	std	Z+5, r25	; 0x05
    499e:	84 83       	std	Z+4, r24	; 0x04
    49a0:	89 e6       	ldi	r24, 0x69	; 105
    49a2:	92 e0       	ldi	r25, 0x02	; 2
    49a4:	a0 e0       	ldi	r26, 0x00	; 0
    49a6:	81 83       	std	Z+1, r24	; 0x01
    49a8:	92 83       	std	Z+2, r25	; 0x02
    49aa:	a3 83       	std	Z+3, r26	; 0x03
    49ac:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

}
    49b0:	29 96       	adiw	r28, 0x09	; 9
    49b2:	e2 e0       	ldi	r30, 0x02	; 2
    49b4:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000049b8 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    49b8:	ef 92       	push	r14
    49ba:	ff 92       	push	r15
    49bc:	0f 93       	push	r16
    49be:	1f 93       	push	r17
    49c0:	cf 93       	push	r28
    49c2:	df 93       	push	r29
    49c4:	ad b7       	in	r26, 0x3d	; 61
    49c6:	be b7       	in	r27, 0x3e	; 62
    49c8:	17 97       	sbiw	r26, 0x07	; 7
    49ca:	0f b6       	in	r0, 0x3f	; 63
    49cc:	f8 94       	cli
    49ce:	be bf       	out	0x3e, r27	; 62
    49d0:	0f be       	out	0x3f, r0	; 63
    49d2:	ad bf       	out	0x3d, r26	; 61
    49d4:	8c 01       	movw	r16, r24
    49d6:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    49d8:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <calloc>
    49dc:	ec 01       	movw	r28, r24
    if(!p)
    49de:	89 2b       	or	r24, r25
    49e0:	71 f4       	brne	.+28     	; 0x49fe <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    49e2:	ed b7       	in	r30, 0x3d	; 61
    49e4:	fe b7       	in	r31, 0x3e	; 62
    49e6:	f7 82       	std	Z+7, r15	; 0x07
    49e8:	e6 82       	std	Z+6, r14	; 0x06
    49ea:	15 83       	std	Z+5, r17	; 0x05
    49ec:	04 83       	std	Z+4, r16	; 0x04
    49ee:	8e e4       	ldi	r24, 0x4E	; 78
    49f0:	92 e0       	ldi	r25, 0x02	; 2
    49f2:	a0 e0       	ldi	r26, 0x00	; 0
    49f4:	81 83       	std	Z+1, r24	; 0x01
    49f6:	92 83       	std	Z+2, r25	; 0x02
    49f8:	a3 83       	std	Z+3, r26	; 0x03
    49fa:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }
    return(p);
}
    49fe:	ce 01       	movw	r24, r28
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	27 96       	adiw	r28, 0x07	; 7
    4a06:	e6 e0       	ldi	r30, 0x06	; 6
    4a08:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00004a0c <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4a0c:	0f 93       	push	r16
    4a0e:	1f 93       	push	r17
    4a10:	cf 93       	push	r28
    4a12:	df 93       	push	r29
    4a14:	00 d0       	rcall	.+0      	; 0x4a16 <safemalloc+0xa>
    4a16:	00 d0       	rcall	.+0      	; 0x4a18 <safemalloc+0xc>
    4a18:	1f 92       	push	r1
    4a1a:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4a1c:	61 e0       	ldi	r22, 0x01	; 1
    4a1e:	70 e0       	ldi	r23, 0x00	; 0
    4a20:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <calloc>
    4a24:	ec 01       	movw	r28, r24
    if(!p)
    4a26:	89 2b       	or	r24, r25
    4a28:	61 f4       	brne	.+24     	; 0x4a42 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4a2a:	ed b7       	in	r30, 0x3d	; 61
    4a2c:	fe b7       	in	r31, 0x3e	; 62
    4a2e:	15 83       	std	Z+5, r17	; 0x05
    4a30:	04 83       	std	Z+4, r16	; 0x04
    4a32:	86 e3       	ldi	r24, 0x36	; 54
    4a34:	92 e0       	ldi	r25, 0x02	; 2
    4a36:	a0 e0       	ldi	r26, 0x00	; 0
    4a38:	81 83       	std	Z+1, r24	; 0x01
    4a3a:	92 83       	std	Z+2, r25	; 0x02
    4a3c:	a3 83       	std	Z+3, r26	; 0x03
    4a3e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }
    return(p);
}
    4a42:	ce 01       	movw	r24, r28
    4a44:	cd b7       	in	r28, 0x3d	; 61
    4a46:	de b7       	in	r29, 0x3e	; 62
    4a48:	25 96       	adiw	r28, 0x05	; 5
    4a4a:	e4 e0       	ldi	r30, 0x04	; 4
    4a4c:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00004a50 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4a50:	ad b7       	in	r26, 0x3d	; 61
    4a52:	be b7       	in	r27, 0x3e	; 62
    4a54:	17 97       	sbiw	r26, 0x07	; 7
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	f8 94       	cli
    4a5a:	be bf       	out	0x3e, r27	; 62
    4a5c:	0f be       	out	0x3f, r0	; 63
    4a5e:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4a60:	00 97       	sbiw	r24, 0x00	; 0
    4a62:	11 f1       	breq	.+68     	; 0x4aa8 <safefree+0x58>
        return;

    if(__brkval)
    4a64:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
    4a68:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
    4a6c:	21 15       	cp	r18, r1
    4a6e:	31 05       	cpc	r19, r1
    4a70:	11 f4       	brne	.+4      	; 0x4a76 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4a72:	2c eb       	ldi	r18, 0xBC	; 188
    4a74:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4a76:	41 e2       	ldi	r20, 0x21	; 33
    4a78:	8c 3b       	cpi	r24, 0xBC	; 188
    4a7a:	94 07       	cpc	r25, r20
    4a7c:	30 f0       	brcs	.+12     	; 0x4a8a <safefree+0x3a>
    4a7e:	28 17       	cp	r18, r24
    4a80:	39 07       	cpc	r19, r25
    4a82:	18 f0       	brcs	.+6      	; 0x4a8a <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4a84:	0e 94 31 e3 	call	0x1c662	; 0x1c662 <free>
        return;
    4a88:	0f c0       	rjmp	.+30     	; 0x4aa8 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4a8a:	ed b7       	in	r30, 0x3d	; 61
    4a8c:	fe b7       	in	r31, 0x3e	; 62
    4a8e:	37 83       	std	Z+7, r19	; 0x07
    4a90:	26 83       	std	Z+6, r18	; 0x06
    4a92:	95 83       	std	Z+5, r25	; 0x05
    4a94:	84 83       	std	Z+4, r24	; 0x04
    4a96:	81 e1       	ldi	r24, 0x11	; 17
    4a98:	92 e0       	ldi	r25, 0x02	; 2
    4a9a:	a0 e0       	ldi	r26, 0x00	; 0
    4a9c:	81 83       	std	Z+1, r24	; 0x01
    4a9e:	92 83       	std	Z+2, r25	; 0x02
    4aa0:	a3 83       	std	Z+3, r26	; 0x03
    4aa2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    PrintFree();
}
    4aa6:	f7 de       	rcall	.-530    	; 0x4896 <PrintFree>
    4aa8:	ad b7       	in	r26, 0x3d	; 61
    4aaa:	be b7       	in	r27, 0x3e	; 62
    4aac:	17 96       	adiw	r26, 0x07	; 7
    4aae:	0f b6       	in	r0, 0x3f	; 63
    4ab0:	f8 94       	cli
    4ab2:	be bf       	out	0x3e, r27	; 62
    4ab4:	0f be       	out	0x3f, r0	; 63
    4ab6:	ad bf       	out	0x3d, r26	; 61
    4ab8:	08 95       	ret

00004aba <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4aba:	64 36       	cpi	r22, 0x64	; 100
    4abc:	71 05       	cpc	r23, r1
    4abe:	81 05       	cpc	r24, r1
    4ac0:	91 05       	cpc	r25, r1
    4ac2:	58 f0       	brcs	.+22     	; 0x4ada <delayus+0x20>
    {
        us -= 100U;
    4ac4:	64 56       	subi	r22, 0x64	; 100
    4ac6:	71 09       	sbc	r23, r1
    4ac8:	81 09       	sbc	r24, r1
    4aca:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4acc:	e3 ef       	ldi	r30, 0xF3	; 243
    4ace:	f1 e0       	ldi	r31, 0x01	; 1
    4ad0:	31 97       	sbiw	r30, 0x01	; 1
    4ad2:	f1 f7       	brne	.-4      	; 0x4ad0 <delayus+0x16>
    4ad4:	00 c0       	rjmp	.+0      	; 0x4ad6 <delayus+0x1c>
    4ad6:	00 00       	nop
    4ad8:	f0 cf       	rjmp	.-32     	; 0x4aba <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4ada:	6a 30       	cpi	r22, 0x0A	; 10
    4adc:	71 05       	cpc	r23, r1
    4ade:	81 05       	cpc	r24, r1
    4ae0:	91 05       	cpc	r25, r1
    4ae2:	48 f0       	brcs	.+18     	; 0x4af6 <delayus+0x3c>
    {
        us -= 10U;
    4ae4:	6a 50       	subi	r22, 0x0A	; 10
    4ae6:	71 09       	sbc	r23, r1
    4ae8:	81 09       	sbc	r24, r1
    4aea:	91 09       	sbc	r25, r1
    4aec:	f2 e4       	ldi	r31, 0x42	; 66
    4aee:	fa 95       	dec	r31
    4af0:	f1 f7       	brne	.-4      	; 0x4aee <delayus+0x34>
    4af2:	00 c0       	rjmp	.+0      	; 0x4af4 <delayus+0x3a>
    4af4:	f2 cf       	rjmp	.-28     	; 0x4ada <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4af6:	61 15       	cp	r22, r1
    4af8:	71 05       	cpc	r23, r1
    4afa:	81 05       	cpc	r24, r1
    4afc:	91 05       	cpc	r25, r1
    4afe:	49 f0       	breq	.+18     	; 0x4b12 <delayus+0x58>
    {
        --us;
    4b00:	61 50       	subi	r22, 0x01	; 1
    4b02:	71 09       	sbc	r23, r1
    4b04:	81 09       	sbc	r24, r1
    4b06:	91 09       	sbc	r25, r1
    4b08:	26 e0       	ldi	r18, 0x06	; 6
    4b0a:	2a 95       	dec	r18
    4b0c:	f1 f7       	brne	.-4      	; 0x4b0a <delayus+0x50>
    4b0e:	00 c0       	rjmp	.+0      	; 0x4b10 <delayus+0x56>
    4b10:	f2 cf       	rjmp	.-28     	; 0x4af6 <delayus+0x3c>
        _delay_us(1);
    }
}
    4b12:	08 95       	ret

00004b14 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4b14:	61 15       	cp	r22, r1
    4b16:	71 05       	cpc	r23, r1
    4b18:	81 05       	cpc	r24, r1
    4b1a:	91 05       	cpc	r25, r1
    4b1c:	09 f4       	brne	.+2      	; 0x4b20 <delayms+0xc>
    4b1e:	41 c0       	rjmp	.+130    	; 0x4ba2 <delayms+0x8e>
    4b20:	e3 ef       	ldi	r30, 0xF3	; 243
    4b22:	f1 e0       	ldi	r31, 0x01	; 1
    4b24:	31 97       	sbiw	r30, 0x01	; 1
    4b26:	f1 f7       	brne	.-4      	; 0x4b24 <delayms+0x10>
    4b28:	00 c0       	rjmp	.+0      	; 0x4b2a <delayms+0x16>
    4b2a:	00 00       	nop
    4b2c:	e3 ef       	ldi	r30, 0xF3	; 243
    4b2e:	f1 e0       	ldi	r31, 0x01	; 1
    4b30:	31 97       	sbiw	r30, 0x01	; 1
    4b32:	f1 f7       	brne	.-4      	; 0x4b30 <delayms+0x1c>
    4b34:	00 c0       	rjmp	.+0      	; 0x4b36 <delayms+0x22>
    4b36:	00 00       	nop
    4b38:	e3 ef       	ldi	r30, 0xF3	; 243
    4b3a:	f1 e0       	ldi	r31, 0x01	; 1
    4b3c:	31 97       	sbiw	r30, 0x01	; 1
    4b3e:	f1 f7       	brne	.-4      	; 0x4b3c <delayms+0x28>
    4b40:	00 c0       	rjmp	.+0      	; 0x4b42 <delayms+0x2e>
    4b42:	00 00       	nop
    4b44:	e3 ef       	ldi	r30, 0xF3	; 243
    4b46:	f1 e0       	ldi	r31, 0x01	; 1
    4b48:	31 97       	sbiw	r30, 0x01	; 1
    4b4a:	f1 f7       	brne	.-4      	; 0x4b48 <delayms+0x34>
    4b4c:	00 c0       	rjmp	.+0      	; 0x4b4e <delayms+0x3a>
    4b4e:	00 00       	nop
    4b50:	e3 ef       	ldi	r30, 0xF3	; 243
    4b52:	f1 e0       	ldi	r31, 0x01	; 1
    4b54:	31 97       	sbiw	r30, 0x01	; 1
    4b56:	f1 f7       	brne	.-4      	; 0x4b54 <delayms+0x40>
    4b58:	00 c0       	rjmp	.+0      	; 0x4b5a <delayms+0x46>
    4b5a:	00 00       	nop
    4b5c:	e3 ef       	ldi	r30, 0xF3	; 243
    4b5e:	f1 e0       	ldi	r31, 0x01	; 1
    4b60:	31 97       	sbiw	r30, 0x01	; 1
    4b62:	f1 f7       	brne	.-4      	; 0x4b60 <delayms+0x4c>
    4b64:	00 c0       	rjmp	.+0      	; 0x4b66 <delayms+0x52>
    4b66:	00 00       	nop
    4b68:	e3 ef       	ldi	r30, 0xF3	; 243
    4b6a:	f1 e0       	ldi	r31, 0x01	; 1
    4b6c:	31 97       	sbiw	r30, 0x01	; 1
    4b6e:	f1 f7       	brne	.-4      	; 0x4b6c <delayms+0x58>
    4b70:	00 c0       	rjmp	.+0      	; 0x4b72 <delayms+0x5e>
    4b72:	00 00       	nop
    4b74:	e3 ef       	ldi	r30, 0xF3	; 243
    4b76:	f1 e0       	ldi	r31, 0x01	; 1
    4b78:	31 97       	sbiw	r30, 0x01	; 1
    4b7a:	f1 f7       	brne	.-4      	; 0x4b78 <delayms+0x64>
    4b7c:	00 c0       	rjmp	.+0      	; 0x4b7e <delayms+0x6a>
    4b7e:	00 00       	nop
    4b80:	e3 ef       	ldi	r30, 0xF3	; 243
    4b82:	f1 e0       	ldi	r31, 0x01	; 1
    4b84:	31 97       	sbiw	r30, 0x01	; 1
    4b86:	f1 f7       	brne	.-4      	; 0x4b84 <delayms+0x70>
    4b88:	00 c0       	rjmp	.+0      	; 0x4b8a <delayms+0x76>
    4b8a:	00 00       	nop
    4b8c:	e3 ef       	ldi	r30, 0xF3	; 243
    4b8e:	f1 e0       	ldi	r31, 0x01	; 1
    4b90:	31 97       	sbiw	r30, 0x01	; 1
    4b92:	f1 f7       	brne	.-4      	; 0x4b90 <delayms+0x7c>
    4b94:	00 c0       	rjmp	.+0      	; 0x4b96 <delayms+0x82>
    4b96:	00 00       	nop
    4b98:	61 50       	subi	r22, 0x01	; 1
    4b9a:	71 09       	sbc	r23, r1
    4b9c:	81 09       	sbc	r24, r1
    4b9e:	91 09       	sbc	r25, r1
    4ba0:	b9 cf       	rjmp	.-142    	; 0x4b14 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4ba2:	08 95       	ret

00004ba4 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4ba4:	81 11       	cpse	r24, r1
    4ba6:	0e c0       	rjmp	.+28     	; 0x4bc4 <uart_rx_flush+0x20>
    4ba8:	f8 94       	cli
    4baa:	10 92 ff 19 	sts	0x19FF, r1	; 0x8019ff <uarts+0x4>
    4bae:	10 92 fe 19 	sts	0x19FE, r1	; 0x8019fe <uarts+0x3>
    4bb2:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts>
    4bb6:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x1>
    4bba:	10 92 fd 19 	sts	0x19FD, r1	; 0x8019fd <uarts+0x2>
    4bbe:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <uarts+0x5>
    4bc2:	78 94       	sei
    4bc4:	08 95       	ret

00004bc6 <uart_ubr>:
    4bc6:	4f 92       	push	r4
    4bc8:	5f 92       	push	r5
    4bca:	6f 92       	push	r6
    4bcc:	7f 92       	push	r7
    4bce:	8f 92       	push	r8
    4bd0:	9f 92       	push	r9
    4bd2:	af 92       	push	r10
    4bd4:	bf 92       	push	r11
    4bd6:	cf 92       	push	r12
    4bd8:	df 92       	push	r13
    4bda:	ef 92       	push	r14
    4bdc:	ff 92       	push	r15
    4bde:	cf 93       	push	r28
    4be0:	df 93       	push	r29
    4be2:	5a 01       	movw	r10, r20
    4be4:	e9 01       	movw	r28, r18
    4be6:	0e 94 1d e1 	call	0x1c23a	; 0x1c23a <__floatunsisf>
    4bea:	2b 01       	movw	r4, r22
    4bec:	3c 01       	movw	r6, r24
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	40 e0       	ldi	r20, 0x00	; 0
    4bf4:	51 e4       	ldi	r21, 0x41	; 65
    4bf6:	0e 94 d3 e1 	call	0x1c3a6	; 0x1c3a6 <__mulsf3>
    4bfa:	9b 01       	movw	r18, r22
    4bfc:	ac 01       	movw	r20, r24
    4bfe:	60 e8       	ldi	r22, 0x80	; 128
    4c00:	76 e9       	ldi	r23, 0x96	; 150
    4c02:	88 e9       	ldi	r24, 0x98	; 152
    4c04:	9b e4       	ldi	r25, 0x4B	; 75
    4c06:	0e 94 84 e0 	call	0x1c108	; 0x1c108 <__divsf3>
    4c0a:	20 e0       	ldi	r18, 0x00	; 0
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	40 e8       	ldi	r20, 0x80	; 128
    4c10:	5f e3       	ldi	r21, 0x3F	; 63
    4c12:	0e 94 1b e0 	call	0x1c036	; 0x1c036 <__subsf3>
    4c16:	0e 94 36 e2 	call	0x1c46c	; 0x1c46c <round>
    4c1a:	0e 94 f1 e0 	call	0x1c1e2	; 0x1c1e2 <__fixunssfsi>
    4c1e:	6b 01       	movw	r12, r22
    4c20:	7c 01       	movw	r14, r24
    4c22:	c1 14       	cp	r12, r1
    4c24:	80 e1       	ldi	r24, 0x10	; 16
    4c26:	d8 06       	cpc	r13, r24
    4c28:	e1 04       	cpc	r14, r1
    4c2a:	f1 04       	cpc	r15, r1
    4c2c:	58 f4       	brcc	.+22     	; 0x4c44 <uart_ubr+0x7e>
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	f5 01       	movw	r30, r10
    4c34:	91 83       	std	Z+1, r25	; 0x01
    4c36:	80 83       	st	Z, r24
    4c38:	81 2c       	mov	r8, r1
    4c3a:	91 2c       	mov	r9, r1
    4c3c:	a1 2c       	mov	r10, r1
    4c3e:	21 e4       	ldi	r18, 0x41	; 65
    4c40:	b2 2e       	mov	r11, r18
    4c42:	31 c0       	rjmp	.+98     	; 0x4ca6 <uart_ubr+0xe0>
    4c44:	f5 01       	movw	r30, r10
    4c46:	11 82       	std	Z+1, r1	; 0x01
    4c48:	10 82       	st	Z, r1
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	40 e8       	ldi	r20, 0x80	; 128
    4c50:	51 e4       	ldi	r21, 0x41	; 65
    4c52:	c3 01       	movw	r24, r6
    4c54:	b2 01       	movw	r22, r4
    4c56:	0e 94 d3 e1 	call	0x1c3a6	; 0x1c3a6 <__mulsf3>
    4c5a:	9b 01       	movw	r18, r22
    4c5c:	ac 01       	movw	r20, r24
    4c5e:	60 e8       	ldi	r22, 0x80	; 128
    4c60:	76 e9       	ldi	r23, 0x96	; 150
    4c62:	88 e9       	ldi	r24, 0x98	; 152
    4c64:	9b e4       	ldi	r25, 0x4B	; 75
    4c66:	0e 94 84 e0 	call	0x1c108	; 0x1c108 <__divsf3>
    4c6a:	20 e0       	ldi	r18, 0x00	; 0
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	40 e8       	ldi	r20, 0x80	; 128
    4c70:	5f e3       	ldi	r21, 0x3F	; 63
    4c72:	0e 94 1b e0 	call	0x1c036	; 0x1c036 <__subsf3>
    4c76:	0e 94 36 e2 	call	0x1c46c	; 0x1c46c <round>
    4c7a:	0e 94 f1 e0 	call	0x1c1e2	; 0x1c1e2 <__fixunssfsi>
    4c7e:	6b 01       	movw	r12, r22
    4c80:	7c 01       	movw	r14, r24
    4c82:	81 2c       	mov	r8, r1
    4c84:	91 2c       	mov	r9, r1
    4c86:	90 e8       	ldi	r25, 0x80	; 128
    4c88:	a9 2e       	mov	r10, r25
    4c8a:	91 e4       	ldi	r25, 0x41	; 65
    4c8c:	b9 2e       	mov	r11, r25
    4c8e:	c1 14       	cp	r12, r1
    4c90:	f0 e1       	ldi	r31, 0x10	; 16
    4c92:	df 06       	cpc	r13, r31
    4c94:	e1 04       	cpc	r14, r1
    4c96:	f1 04       	cpc	r15, r1
    4c98:	30 f0       	brcs	.+12     	; 0x4ca6 <uart_ubr+0xe0>
    4c9a:	cc 24       	eor	r12, r12
    4c9c:	ca 94       	dec	r12
    4c9e:	8f e0       	ldi	r24, 0x0F	; 15
    4ca0:	d8 2e       	mov	r13, r24
    4ca2:	e1 2c       	mov	r14, r1
    4ca4:	f1 2c       	mov	r15, r1
    4ca6:	c7 01       	movw	r24, r14
    4ca8:	b6 01       	movw	r22, r12
    4caa:	6f 5f       	subi	r22, 0xFF	; 255
    4cac:	7f 4f       	sbci	r23, 0xFF	; 255
    4cae:	8f 4f       	sbci	r24, 0xFF	; 255
    4cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb2:	0e 94 1d e1 	call	0x1c23a	; 0x1c23a <__floatunsisf>
    4cb6:	a5 01       	movw	r20, r10
    4cb8:	94 01       	movw	r18, r8
    4cba:	0e 94 d3 e1 	call	0x1c3a6	; 0x1c3a6 <__mulsf3>
    4cbe:	9b 01       	movw	r18, r22
    4cc0:	ac 01       	movw	r20, r24
    4cc2:	60 e8       	ldi	r22, 0x80	; 128
    4cc4:	76 e9       	ldi	r23, 0x96	; 150
    4cc6:	88 e9       	ldi	r24, 0x98	; 152
    4cc8:	9b e4       	ldi	r25, 0x4B	; 75
    4cca:	0e 94 84 e0 	call	0x1c108	; 0x1c108 <__divsf3>
    4cce:	0e 94 f1 e0 	call	0x1c1e2	; 0x1c1e2 <__fixunssfsi>
    4cd2:	68 83       	st	Y, r22
    4cd4:	79 83       	std	Y+1, r23	; 0x01
    4cd6:	8a 83       	std	Y+2, r24	; 0x02
    4cd8:	9b 83       	std	Y+3, r25	; 0x03
    4cda:	c6 01       	movw	r24, r12
    4cdc:	df 91       	pop	r29
    4cde:	cf 91       	pop	r28
    4ce0:	ff 90       	pop	r15
    4ce2:	ef 90       	pop	r14
    4ce4:	df 90       	pop	r13
    4ce6:	cf 90       	pop	r12
    4ce8:	bf 90       	pop	r11
    4cea:	af 90       	pop	r10
    4cec:	9f 90       	pop	r9
    4cee:	8f 90       	pop	r8
    4cf0:	7f 90       	pop	r7
    4cf2:	6f 90       	pop	r6
    4cf4:	5f 90       	pop	r5
    4cf6:	4f 90       	pop	r4
    4cf8:	08 95       	ret

00004cfa <uart_init>:
    4cfa:	a6 e0       	ldi	r26, 0x06	; 6
    4cfc:	b0 e0       	ldi	r27, 0x00	; 0
    4cfe:	e3 e8       	ldi	r30, 0x83	; 131
    4d00:	f6 e2       	ldi	r31, 0x26	; 38
    4d02:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    4d06:	1e 82       	std	Y+6, r1	; 0x06
    4d08:	1d 82       	std	Y+5, r1	; 0x05
    4d0a:	81 11       	cpse	r24, r1
    4d0c:	36 c0       	rjmp	.+108    	; 0x4d7a <uart_init+0x80>
    4d0e:	cb 01       	movw	r24, r22
    4d10:	ba 01       	movw	r22, r20
    4d12:	9e 01       	movw	r18, r28
    4d14:	2f 5f       	subi	r18, 0xFF	; 255
    4d16:	3f 4f       	sbci	r19, 0xFF	; 255
    4d18:	ae 01       	movw	r20, r28
    4d1a:	4b 5f       	subi	r20, 0xFB	; 251
    4d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d1e:	53 df       	rcall	.-346    	; 0x4bc6 <uart_ubr>
    4d20:	f8 94       	cli
    4d22:	10 92 ff 19 	sts	0x19FF, r1	; 0x8019ff <uarts+0x4>
    4d26:	10 92 fe 19 	sts	0x19FE, r1	; 0x8019fe <uarts+0x3>
    4d2a:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts>
    4d2e:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x1>
    4d32:	10 92 fd 19 	sts	0x19FD, r1	; 0x8019fd <uarts+0x2>
    4d36:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <uarts+0x5>
    4d3a:	78 94       	sei
    4d3c:	f8 94       	cli
    4d3e:	58 9a       	sbi	0x0b, 0	; 11
    4d40:	59 9a       	sbi	0x0b, 1	; 11
    4d42:	50 98       	cbi	0x0a, 0	; 10
    4d44:	51 9a       	sbi	0x0a, 1	; 10
    4d46:	28 e9       	ldi	r18, 0x98	; 152
    4d48:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4d4c:	2d 81       	ldd	r18, Y+5	; 0x05
    4d4e:	3e 81       	ldd	r19, Y+6	; 0x06
    4d50:	23 2b       	or	r18, r19
    4d52:	19 f0       	breq	.+6      	; 0x4d5a <uart_init+0x60>
    4d54:	22 e0       	ldi	r18, 0x02	; 2
    4d56:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4d5a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4d5e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4d62:	78 94       	sei
    4d64:	65 e7       	ldi	r22, 0x75	; 117
    4d66:	77 e2       	ldi	r23, 0x27	; 39
    4d68:	8a e8       	ldi	r24, 0x8A	; 138
    4d6a:	97 e2       	ldi	r25, 0x27	; 39
    4d6c:	0e 94 2c 76 	call	0xec58	; 0xec58 <fdevopen>
    4d70:	69 81       	ldd	r22, Y+1	; 0x01
    4d72:	7a 81       	ldd	r23, Y+2	; 0x02
    4d74:	8b 81       	ldd	r24, Y+3	; 0x03
    4d76:	9c 81       	ldd	r25, Y+4	; 0x04
    4d78:	03 c0       	rjmp	.+6      	; 0x4d80 <uart_init+0x86>
    4d7a:	60 e0       	ldi	r22, 0x00	; 0
    4d7c:	70 e0       	ldi	r23, 0x00	; 0
    4d7e:	cb 01       	movw	r24, r22
    4d80:	26 96       	adiw	r28, 0x06	; 6
    4d82:	e2 e0       	ldi	r30, 0x02	; 2
    4d84:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00004d88 <uart_rx_interrupt>:
    4d88:	cf 93       	push	r28
    4d8a:	df 93       	push	r29
    4d8c:	27 e5       	ldi	r18, 0x57	; 87
    4d8e:	82 9f       	mul	r24, r18
    4d90:	c0 01       	movw	r24, r0
    4d92:	11 24       	eor	r1, r1
    4d94:	fc 01       	movw	r30, r24
    4d96:	e5 50       	subi	r30, 0x05	; 5
    4d98:	f6 4e       	sbci	r31, 0xE6	; 230
    4d9a:	83 81       	ldd	r24, Z+3	; 0x03
    4d9c:	94 81       	ldd	r25, Z+4	; 0x04
    4d9e:	80 35       	cpi	r24, 0x50	; 80
    4da0:	91 05       	cpc	r25, r1
    4da2:	7c f4       	brge	.+30     	; 0x4dc2 <uart_rx_interrupt+0x3a>
    4da4:	30 81       	ld	r19, Z
    4da6:	21 e0       	ldi	r18, 0x01	; 1
    4da8:	23 0f       	add	r18, r19
    4daa:	20 83       	st	Z, r18
    4dac:	ef 01       	movw	r28, r30
    4dae:	c3 0f       	add	r28, r19
    4db0:	d1 1d       	adc	r29, r1
    4db2:	6e 83       	std	Y+6, r22	; 0x06
    4db4:	01 96       	adiw	r24, 0x01	; 1
    4db6:	94 83       	std	Z+4, r25	; 0x04
    4db8:	83 83       	std	Z+3, r24	; 0x03
    4dba:	20 35       	cpi	r18, 0x50	; 80
    4dbc:	28 f0       	brcs	.+10     	; 0x4dc8 <uart_rx_interrupt+0x40>
    4dbe:	10 82       	st	Z, r1
    4dc0:	03 c0       	rjmp	.+6      	; 0x4dc8 <uart_rx_interrupt+0x40>
    4dc2:	85 81       	ldd	r24, Z+5	; 0x05
    4dc4:	81 60       	ori	r24, 0x01	; 1
    4dc6:	85 83       	std	Z+5, r24	; 0x05
    4dc8:	df 91       	pop	r29
    4dca:	cf 91       	pop	r28
    4dcc:	08 95       	ret

00004dce <__vector_20>:
    4dce:	1f 92       	push	r1
    4dd0:	0f 92       	push	r0
    4dd2:	0f b6       	in	r0, 0x3f	; 63
    4dd4:	0f 92       	push	r0
    4dd6:	11 24       	eor	r1, r1
    4dd8:	0b b6       	in	r0, 0x3b	; 59
    4dda:	0f 92       	push	r0
    4ddc:	2f 93       	push	r18
    4dde:	3f 93       	push	r19
    4de0:	4f 93       	push	r20
    4de2:	5f 93       	push	r21
    4de4:	6f 93       	push	r22
    4de6:	7f 93       	push	r23
    4de8:	8f 93       	push	r24
    4dea:	9f 93       	push	r25
    4dec:	af 93       	push	r26
    4dee:	bf 93       	push	r27
    4df0:	ef 93       	push	r30
    4df2:	ff 93       	push	r31
    4df4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4df8:	80 e0       	ldi	r24, 0x00	; 0
    4dfa:	c6 df       	rcall	.-116    	; 0x4d88 <uart_rx_interrupt>
    4dfc:	ff 91       	pop	r31
    4dfe:	ef 91       	pop	r30
    4e00:	bf 91       	pop	r27
    4e02:	af 91       	pop	r26
    4e04:	9f 91       	pop	r25
    4e06:	8f 91       	pop	r24
    4e08:	7f 91       	pop	r23
    4e0a:	6f 91       	pop	r22
    4e0c:	5f 91       	pop	r21
    4e0e:	4f 91       	pop	r20
    4e10:	3f 91       	pop	r19
    4e12:	2f 91       	pop	r18
    4e14:	0f 90       	pop	r0
    4e16:	0b be       	out	0x3b, r0	; 59
    4e18:	0f 90       	pop	r0
    4e1a:	0f be       	out	0x3f, r0	; 63
    4e1c:	0f 90       	pop	r0
    4e1e:	1f 90       	pop	r1
    4e20:	18 95       	reti

00004e22 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    4e22:	81 11       	cpse	r24, r1
    4e24:	07 c0       	rjmp	.+14     	; 0x4e34 <uart_rx_count+0x12>
        return(EOF);

    cli();
    4e26:	f8 94       	cli

    count = uarts[uart].rx_count;
    4e28:	80 91 fe 19 	lds	r24, 0x19FE	; 0x8019fe <uarts+0x3>
    4e2c:	90 91 ff 19 	lds	r25, 0x19FF	; 0x8019ff <uarts+0x4>

    sei();
    4e30:	78 94       	sei

    return (count );
    4e32:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    4e34:	8f ef       	ldi	r24, 0xFF	; 255
    4e36:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    4e38:	08 95       	ret

00004e3a <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    4e3a:	81 11       	cpse	r24, r1
    4e3c:	21 c0       	rjmp	.+66     	; 0x4e80 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	f0 df       	rcall	.-32     	; 0x4e22 <uart_rx_count>
    4e42:	18 16       	cp	r1, r24
    4e44:	19 06       	cpc	r1, r25
    4e46:	dc f7       	brge	.-10     	; 0x4e3e <uart_get_tail+0x4>
        ;

    cli();
    4e48:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    4e4a:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <uarts+0x1>
    4e4e:	91 e0       	ldi	r25, 0x01	; 1
    4e50:	9e 0f       	add	r25, r30
    4e52:	90 93 fc 19 	sts	0x19FC, r25	; 0x8019fc <uarts+0x1>
    4e56:	f0 e0       	ldi	r31, 0x00	; 0
    4e58:	e5 50       	subi	r30, 0x05	; 5
    4e5a:	f6 4e       	sbci	r31, 0xE6	; 230
    4e5c:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    4e5e:	90 35       	cpi	r25, 0x50	; 80
    4e60:	10 f0       	brcs	.+4      	; 0x4e66 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    4e62:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x1>
    uarts[uart].rx_count--;
    4e66:	20 91 fe 19 	lds	r18, 0x19FE	; 0x8019fe <uarts+0x3>
    4e6a:	30 91 ff 19 	lds	r19, 0x19FF	; 0x8019ff <uarts+0x4>
    4e6e:	21 50       	subi	r18, 0x01	; 1
    4e70:	31 09       	sbc	r19, r1
    4e72:	30 93 ff 19 	sts	0x19FF, r19	; 0x8019ff <uarts+0x4>
    4e76:	20 93 fe 19 	sts	0x19FE, r18	; 0x8019fe <uarts+0x3>
    sei();
    4e7a:	78 94       	sei

    return (c & 0xff);
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    4e80:	8f ef       	ldi	r24, 0xFF	; 255
    4e82:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    4e84:	08 95       	ret

00004e86 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    4e86:	d9 df       	rcall	.-78     	; 0x4e3a <uart_get_tail>
    4e88:	99 27       	eor	r25, r25
    4e8a:	08 95       	ret

00004e8c <uart_tx_byte>:
    4e8c:	61 11       	cpse	r22, r1
    4e8e:	09 c0       	rjmp	.+18     	; 0x4ea2 <uart_tx_byte+0x16>
    4e90:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4e94:	25 ff       	sbrs	r18, 5
    4e96:	fc cf       	rjmp	.-8      	; 0x4e90 <uart_tx_byte+0x4>
    4e98:	28 2f       	mov	r18, r24
    4e9a:	2f 77       	andi	r18, 0x7F	; 127
    4e9c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4ea0:	08 95       	ret
    4ea2:	61 30       	cpi	r22, 0x01	; 1
    4ea4:	49 f4       	brne	.+18     	; 0x4eb8 <uart_tx_byte+0x2c>
    4ea6:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4eaa:	25 ff       	sbrs	r18, 5
    4eac:	fc cf       	rjmp	.-8      	; 0x4ea6 <uart_tx_byte+0x1a>
    4eae:	28 2f       	mov	r18, r24
    4eb0:	2f 77       	andi	r18, 0x7F	; 127
    4eb2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4eb6:	08 95       	ret
    4eb8:	8f ef       	ldi	r24, 0xFF	; 255
    4eba:	9f ef       	ldi	r25, 0xFF	; 255
    4ebc:	08 95       	ret

00004ebe <uart_getchar>:
    4ebe:	cf 93       	push	r28
    4ec0:	81 11       	cpse	r24, r1
    4ec2:	0f c0       	rjmp	.+30     	; 0x4ee2 <uart_getchar+0x24>
    4ec4:	e0 df       	rcall	.-64     	; 0x4e86 <uart_rx_byte>
    4ec6:	c8 2f       	mov	r28, r24
    4ec8:	60 e0       	ldi	r22, 0x00	; 0
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	df df       	rcall	.-66     	; 0x4e8c <uart_tx_byte>
    4ece:	cd 30       	cpi	r28, 0x0D	; 13
    4ed0:	29 f4       	brne	.+10     	; 0x4edc <uart_getchar+0x1e>
    4ed2:	60 e0       	ldi	r22, 0x00	; 0
    4ed4:	8a e0       	ldi	r24, 0x0A	; 10
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	d9 df       	rcall	.-78     	; 0x4e8c <uart_tx_byte>
    4eda:	ca e0       	ldi	r28, 0x0A	; 10
    4edc:	8c 2f       	mov	r24, r28
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	02 c0       	rjmp	.+4      	; 0x4ee6 <uart_getchar+0x28>
    4ee2:	8f ef       	ldi	r24, 0xFF	; 255
    4ee4:	9f ef       	ldi	r25, 0xFF	; 255
    4ee6:	cf 91       	pop	r28
    4ee8:	08 95       	ret

00004eea <uart0_getchar>:
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	e8 cf       	rjmp	.-48     	; 0x4ebe <uart_getchar>
    4eee:	08 95       	ret

00004ef0 <uart_putchar>:
    4ef0:	1f 93       	push	r17
    4ef2:	cf 93       	push	r28
    4ef4:	df 93       	push	r29
    4ef6:	ec 01       	movw	r28, r24
    4ef8:	16 2f       	mov	r17, r22
    4efa:	c8 df       	rcall	.-112    	; 0x4e8c <uart_tx_byte>
    4efc:	ca 30       	cpi	r28, 0x0A	; 10
    4efe:	d1 05       	cpc	r29, r1
    4f00:	21 f4       	brne	.+8      	; 0x4f0a <uart_putchar+0x1a>
    4f02:	61 2f       	mov	r22, r17
    4f04:	8d e0       	ldi	r24, 0x0D	; 13
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	c1 df       	rcall	.-126    	; 0x4e8c <uart_tx_byte>
    4f0a:	ce 01       	movw	r24, r28
    4f0c:	df 91       	pop	r29
    4f0e:	cf 91       	pop	r28
    4f10:	1f 91       	pop	r17
    4f12:	08 95       	ret

00004f14 <uart0_putchar>:
    4f14:	cf 93       	push	r28
    4f16:	df 93       	push	r29
    4f18:	ec 01       	movw	r28, r24
    4f1a:	60 e0       	ldi	r22, 0x00	; 0
    4f1c:	70 e0       	ldi	r23, 0x00	; 0
    4f1e:	e8 df       	rcall	.-48     	; 0x4ef0 <uart_putchar>
    4f20:	ce 01       	movw	r24, r28
    4f22:	df 91       	pop	r29
    4f24:	cf 91       	pop	r28
    4f26:	08 95       	ret

00004f28 <uart_keyhit>:
    4f28:	7c cf       	rjmp	.-264    	; 0x4e22 <uart_rx_count>
    4f2a:	08 95       	ret

00004f2c <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    4f2c:	cf 92       	push	r12
    4f2e:	df 92       	push	r13
    4f30:	ef 92       	push	r14
    4f32:	ff 92       	push	r15
    4f34:	6b 01       	movw	r12, r22
    4f36:	7c 01       	movw	r14, r24
    4f38:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <SPI0_Speed_value>
    4f3c:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <SPI0_Speed_value+0x1>
    4f40:	a0 91 61 17 	lds	r26, 0x1761	; 0x801761 <SPI0_Speed_value+0x2>
    4f44:	b0 91 62 17 	lds	r27, 0x1762	; 0x801762 <SPI0_Speed_value+0x3>
    4f48:	8c 15       	cp	r24, r12
    4f4a:	9d 05       	cpc	r25, r13
    4f4c:	ae 05       	cpc	r26, r14
    4f4e:	bf 05       	cpc	r27, r15
    4f50:	09 f4       	brne	.+2      	; 0x4f54 <SPI0_Speed+0x28>
    4f52:	4e c0       	rjmp	.+156    	; 0x4ff0 <SPI0_Speed+0xc4>
    4f54:	60 e0       	ldi	r22, 0x00	; 0
    4f56:	7d e2       	ldi	r23, 0x2D	; 45
    4f58:	81 e3       	ldi	r24, 0x31	; 49
    4f5a:	91 e0       	ldi	r25, 0x01	; 1
    4f5c:	a7 01       	movw	r20, r14
    4f5e:	96 01       	movw	r18, r12
    4f60:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    4f64:	20 38       	cpi	r18, 0x80	; 128
    4f66:	31 05       	cpc	r19, r1
    4f68:	41 05       	cpc	r20, r1
    4f6a:	51 05       	cpc	r21, r1
    4f6c:	28 f4       	brcc	.+10     	; 0x4f78 <SPI0_Speed+0x4c>
    4f6e:	20 34       	cpi	r18, 0x40	; 64
    4f70:	31 05       	cpc	r19, r1
    4f72:	41 05       	cpc	r20, r1
    4f74:	51 05       	cpc	r21, r1
    4f76:	30 f0       	brcs	.+12     	; 0x4f84 <SPI0_Speed+0x58>
    4f78:	8d b5       	in	r24, 0x2d	; 45
    4f7a:	8e 7f       	andi	r24, 0xFE	; 254
    4f7c:	8d bd       	out	0x2d, r24	; 45
    4f7e:	8c b5       	in	r24, 0x2c	; 44
    4f80:	82 60       	ori	r24, 0x02	; 2
    4f82:	1b c0       	rjmp	.+54     	; 0x4fba <SPI0_Speed+0x8e>
    4f84:	8d b5       	in	r24, 0x2d	; 45
    4f86:	20 32       	cpi	r18, 0x20	; 32
    4f88:	31 05       	cpc	r19, r1
    4f8a:	41 05       	cpc	r20, r1
    4f8c:	51 05       	cpc	r21, r1
    4f8e:	28 f0       	brcs	.+10     	; 0x4f9a <SPI0_Speed+0x6e>
    4f90:	81 60       	ori	r24, 0x01	; 1
    4f92:	8d bd       	out	0x2d, r24	; 45
    4f94:	8c b5       	in	r24, 0x2c	; 44
    4f96:	82 60       	ori	r24, 0x02	; 2
    4f98:	1f c0       	rjmp	.+62     	; 0x4fd8 <SPI0_Speed+0xac>
    4f9a:	20 31       	cpi	r18, 0x10	; 16
    4f9c:	31 05       	cpc	r19, r1
    4f9e:	41 05       	cpc	r20, r1
    4fa0:	51 05       	cpc	r21, r1
    4fa2:	10 f0       	brcs	.+4      	; 0x4fa8 <SPI0_Speed+0x7c>
    4fa4:	8e 7f       	andi	r24, 0xFE	; 254
    4fa6:	06 c0       	rjmp	.+12     	; 0x4fb4 <SPI0_Speed+0x88>
    4fa8:	28 30       	cpi	r18, 0x08	; 8
    4faa:	31 05       	cpc	r19, r1
    4fac:	41 05       	cpc	r20, r1
    4fae:	51 05       	cpc	r21, r1
    4fb0:	40 f0       	brcs	.+16     	; 0x4fc2 <SPI0_Speed+0x96>
    4fb2:	81 60       	ori	r24, 0x01	; 1
    4fb4:	8d bd       	out	0x2d, r24	; 45
    4fb6:	8c b5       	in	r24, 0x2c	; 44
    4fb8:	8d 7f       	andi	r24, 0xFD	; 253
    4fba:	8c bd       	out	0x2c, r24	; 44
    4fbc:	8c b5       	in	r24, 0x2c	; 44
    4fbe:	81 60       	ori	r24, 0x01	; 1
    4fc0:	0e c0       	rjmp	.+28     	; 0x4fde <SPI0_Speed+0xb2>
    4fc2:	24 30       	cpi	r18, 0x04	; 4
    4fc4:	31 05       	cpc	r19, r1
    4fc6:	41 05       	cpc	r20, r1
    4fc8:	51 05       	cpc	r21, r1
    4fca:	10 f0       	brcs	.+4      	; 0x4fd0 <SPI0_Speed+0xa4>
    4fcc:	8e 7f       	andi	r24, 0xFE	; 254
    4fce:	01 c0       	rjmp	.+2      	; 0x4fd2 <SPI0_Speed+0xa6>
    4fd0:	81 60       	ori	r24, 0x01	; 1
    4fd2:	8d bd       	out	0x2d, r24	; 45
    4fd4:	8c b5       	in	r24, 0x2c	; 44
    4fd6:	8d 7f       	andi	r24, 0xFD	; 253
    4fd8:	8c bd       	out	0x2c, r24	; 44
    4fda:	8c b5       	in	r24, 0x2c	; 44
    4fdc:	8e 7f       	andi	r24, 0xFE	; 254
    4fde:	8c bd       	out	0x2c, r24	; 44
    4fe0:	c0 92 5f 17 	sts	0x175F, r12	; 0x80175f <SPI0_Speed_value>
    4fe4:	d0 92 60 17 	sts	0x1760, r13	; 0x801760 <SPI0_Speed_value+0x1>
    4fe8:	e0 92 61 17 	sts	0x1761, r14	; 0x801761 <SPI0_Speed_value+0x2>
    4fec:	f0 92 62 17 	sts	0x1762, r15	; 0x801762 <SPI0_Speed_value+0x3>
    4ff0:	ff 90       	pop	r15
    4ff2:	ef 90       	pop	r14
    4ff4:	df 90       	pop	r13
    4ff6:	cf 90       	pop	r12
    4ff8:	08 95       	ret

00004ffa <SPI0_Mode>:
    4ffa:	cf 93       	push	r28
    4ffc:	df 93       	push	r29
    4ffe:	00 d0       	rcall	.+0      	; 0x5000 <SPI0_Mode+0x6>
    5000:	00 d0       	rcall	.+0      	; 0x5002 <SPI0_Mode+0x8>
    5002:	1f 92       	push	r1
    5004:	ec 01       	movw	r28, r24
    5006:	81 30       	cpi	r24, 0x01	; 1
    5008:	91 05       	cpc	r25, r1
    500a:	71 f0       	breq	.+28     	; 0x5028 <SPI0_Mode+0x2e>
    500c:	2c f4       	brge	.+10     	; 0x5018 <SPI0_Mode+0x1e>
    500e:	89 2b       	or	r24, r25
    5010:	c1 f4       	brne	.+48     	; 0x5042 <SPI0_Mode+0x48>
    5012:	8c b5       	in	r24, 0x2c	; 44
    5014:	87 7f       	andi	r24, 0xF7	; 247
    5016:	11 c0       	rjmp	.+34     	; 0x503a <SPI0_Mode+0x40>
    5018:	82 30       	cpi	r24, 0x02	; 2
    501a:	91 05       	cpc	r25, r1
    501c:	61 f0       	breq	.+24     	; 0x5036 <SPI0_Mode+0x3c>
    501e:	03 97       	sbiw	r24, 0x03	; 3
    5020:	81 f4       	brne	.+32     	; 0x5042 <SPI0_Mode+0x48>
    5022:	8c b5       	in	r24, 0x2c	; 44
    5024:	88 60       	ori	r24, 0x08	; 8
    5026:	02 c0       	rjmp	.+4      	; 0x502c <SPI0_Mode+0x32>
    5028:	8c b5       	in	r24, 0x2c	; 44
    502a:	87 7f       	andi	r24, 0xF7	; 247
    502c:	8c bd       	out	0x2c, r24	; 44
    502e:	8c b5       	in	r24, 0x2c	; 44
    5030:	84 60       	ori	r24, 0x04	; 4
    5032:	8c bd       	out	0x2c, r24	; 44
    5034:	12 c0       	rjmp	.+36     	; 0x505a <SPI0_Mode+0x60>
    5036:	8c b5       	in	r24, 0x2c	; 44
    5038:	88 60       	ori	r24, 0x08	; 8
    503a:	8c bd       	out	0x2c, r24	; 44
    503c:	8c b5       	in	r24, 0x2c	; 44
    503e:	8b 7f       	andi	r24, 0xFB	; 251
    5040:	f8 cf       	rjmp	.-16     	; 0x5032 <SPI0_Mode+0x38>
    5042:	ed b7       	in	r30, 0x3d	; 61
    5044:	fe b7       	in	r31, 0x3e	; 62
    5046:	d5 83       	std	Z+5, r29	; 0x05
    5048:	c4 83       	std	Z+4, r28	; 0x04
    504a:	88 e2       	ldi	r24, 0x28	; 40
    504c:	93 e0       	ldi	r25, 0x03	; 3
    504e:	a0 e0       	ldi	r26, 0x00	; 0
    5050:	81 83       	std	Z+1, r24	; 0x01
    5052:	92 83       	std	Z+2, r25	; 0x02
    5054:	a3 83       	std	Z+3, r26	; 0x03
    5056:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    505a:	d0 93 5e 17 	sts	0x175E, r29	; 0x80175e <SPI0_Mode_value+0x1>
    505e:	c0 93 5d 17 	sts	0x175D, r28	; 0x80175d <SPI0_Mode_value>
    5062:	cd b7       	in	r28, 0x3d	; 61
    5064:	de b7       	in	r29, 0x3e	; 62
    5066:	25 96       	adiw	r28, 0x05	; 5
    5068:	e2 e0       	ldi	r30, 0x02	; 2
    506a:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000506e <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    506e:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5070:	0d b4       	in	r0, 0x2d	; 45
    5072:	07 fe       	sbrs	r0, 7
    5074:	fd cf       	rjmp	.-6      	; 0x5070 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5076:	8e b5       	in	r24, 0x2e	; 46
}
    5078:	08 95       	ret

0000507a <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    507a:	cf 92       	push	r12
    507c:	df 92       	push	r13
    507e:	ef 92       	push	r14
    5080:	ff 92       	push	r15
    5082:	cf 93       	push	r28
    5084:	df 93       	push	r29
    5086:	1f 92       	push	r1
    5088:	cd b7       	in	r28, 0x3d	; 61
    508a:	de b7       	in	r29, 0x3e	; 62
    508c:	6b 01       	movw	r12, r22
    508e:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5090:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    5092:	2f 9a       	sbi	0x05, 7	; 5
    5094:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5096:	2d 9a       	sbi	0x05, 5	; 5
    5098:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    509a:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    509c:	2c 98       	cbi	0x05, 4	; 5
    509e:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    50a0:	8c b5       	in	r24, 0x2c	; 44
    50a2:	80 61       	ori	r24, 0x10	; 16
    50a4:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    50a6:	8c b5       	in	r24, 0x2c	; 44
    50a8:	80 64       	ori	r24, 0x40	; 64
    50aa:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    50ac:	8d b5       	in	r24, 0x2d	; 45
    50ae:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    50b0:	8e b5       	in	r24, 0x2e	; 46
    50b2:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	a0 df       	rcall	.-192    	; 0x4ffa <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    50ba:	c7 01       	movw	r24, r14
    50bc:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    50be:	36 df       	rcall	.-404    	; 0x4f2c <SPI0_Speed>
    50c0:	8f ef       	ldi	r24, 0xFF	; 255
    50c2:	d5 df       	rcall	.-86     	; 0x506e <SPI0_TXRX_Byte>
    SPI0_Init_state = 1;

}
    50c4:	0f 90       	pop	r0
    50c6:	df 91       	pop	r29
    50c8:	cf 91       	pop	r28
    50ca:	ff 90       	pop	r15
    50cc:	ef 90       	pop	r14
    50ce:	df 90       	pop	r13
    50d0:	cf 90       	pop	r12
    50d2:	08 95       	ret

000050d4 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    50d4:	0f 93       	push	r16
    50d6:	1f 93       	push	r17
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	8c 01       	movw	r16, r24
    50de:	eb 01       	movw	r28, r22

    while(count > 0)
    50e0:	1c 16       	cp	r1, r28
    50e2:	1d 06       	cpc	r1, r29
    50e4:	34 f4       	brge	.+12     	; 0x50f2 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    50e6:	f8 01       	movw	r30, r16
    50e8:	81 91       	ld	r24, Z+
    50ea:	8f 01       	movw	r16, r30
    50ec:	c0 df       	rcall	.-128    	; 0x506e <SPI0_TXRX_Byte>
        ++data;
        --count;
    50ee:	21 97       	sbiw	r28, 0x01	; 1
    50f0:	f7 cf       	rjmp	.-18     	; 0x50e0 <SPI0_TX+0xc>
    }
}
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
    50f6:	1f 91       	pop	r17
    50f8:	0f 91       	pop	r16
    50fa:	08 95       	ret

000050fc <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    50fc:	0f 93       	push	r16
    50fe:	1f 93       	push	r17
    5100:	cf 93       	push	r28
    5102:	df 93       	push	r29
    5104:	8c 01       	movw	r16, r24
    5106:	eb 01       	movw	r28, r22

    while(count > 0)
    5108:	1c 16       	cp	r1, r28
    510a:	1d 06       	cpc	r1, r29
    510c:	44 f4       	brge	.+16     	; 0x511e <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    510e:	f8 01       	movw	r30, r16
    5110:	80 81       	ld	r24, Z
    5112:	ad df       	rcall	.-166    	; 0x506e <SPI0_TXRX_Byte>
    5114:	f8 01       	movw	r30, r16
    5116:	81 93       	st	Z+, r24
    5118:	8f 01       	movw	r16, r30
        ++data;
        --count;
    511a:	21 97       	sbiw	r28, 0x01	; 1
    511c:	f5 cf       	rjmp	.-22     	; 0x5108 <SPI0_TXRX+0xc>
    }
}
    511e:	df 91       	pop	r29
    5120:	cf 91       	pop	r28
    5122:	1f 91       	pop	r17
    5124:	0f 91       	pop	r16
    5126:	08 95       	ret

00005128 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5128:	0f 93       	push	r16
    512a:	1f 93       	push	r17
    512c:	cf 93       	push	r28
    512e:	df 93       	push	r29
    5130:	8c 01       	movw	r16, r24
    5132:	eb 01       	movw	r28, r22

    while(count > 0)
    5134:	1c 16       	cp	r1, r28
    5136:	1d 06       	cpc	r1, r29
    5138:	3c f4       	brge	.+14     	; 0x5148 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    513a:	8f ef       	ldi	r24, 0xFF	; 255
    513c:	98 df       	rcall	.-208    	; 0x506e <SPI0_TXRX_Byte>
    513e:	f8 01       	movw	r30, r16
    5140:	81 93       	st	Z+, r24
    5142:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5144:	21 97       	sbiw	r28, 0x01	; 1
    5146:	f6 cf       	rjmp	.-20     	; 0x5134 <SPI0_RX+0xc>
    }
}
    5148:	df 91       	pop	r29
    514a:	cf 91       	pop	r28
    514c:	1f 91       	pop	r17
    514e:	0f 91       	pop	r16
    5150:	08 95       	ret

00005152 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    5152:	2f b7       	in	r18, 0x3f	; 63
    5154:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <i2c+0x1>
    5158:	81 11       	cpse	r24, r1
    515a:	04 c0       	rjmp	.+8      	; 0x5164 <i2c_timer+0x12>
    515c:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <i2c+0x2>
    5160:	81 11       	cpse	r24, r1
    5162:	0b c0       	rjmp	.+22     	; 0x517a <i2c_timer+0x28>
    5164:	80 91 56 1a 	lds	r24, 0x1A56	; 0x801a56 <i2c+0x4>
    5168:	90 91 57 1a 	lds	r25, 0x1A57	; 0x801a57 <i2c+0x5>
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	29 f0       	breq	.+10     	; 0x517a <i2c_timer+0x28>
    5170:	01 97       	sbiw	r24, 0x01	; 1
    5172:	90 93 57 1a 	sts	0x1A57, r25	; 0x801a57 <i2c+0x5>
    5176:	80 93 56 1a 	sts	0x1A56, r24	; 0x801a56 <i2c+0x4>
    517a:	2f bf       	out	0x3f, r18	; 63
    517c:	08 95       	ret

0000517e <i2c_check_op>:
    517e:	ad b7       	in	r26, 0x3d	; 61
    5180:	be b7       	in	r27, 0x3e	; 62
    5182:	17 97       	sbiw	r26, 0x07	; 7
    5184:	0f b6       	in	r0, 0x3f	; 63
    5186:	f8 94       	cli
    5188:	be bf       	out	0x3e, r27	; 62
    518a:	0f be       	out	0x3f, r0	; 63
    518c:	ad bf       	out	0x3d, r26	; 61
    518e:	28 2f       	mov	r18, r24
    5190:	08 2e       	mov	r0, r24
    5192:	00 0c       	add	r0, r0
    5194:	33 0b       	sbc	r19, r19
    5196:	80 31       	cpi	r24, 0x10	; 16
    5198:	88 f0       	brcs	.+34     	; 0x51bc <i2c_check_op+0x3e>
    519a:	80 e1       	ldi	r24, 0x10	; 16
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	ed b7       	in	r30, 0x3d	; 61
    51a0:	fe b7       	in	r31, 0x3e	; 62
    51a2:	97 83       	std	Z+7, r25	; 0x07
    51a4:	86 83       	std	Z+6, r24	; 0x06
    51a6:	35 83       	std	Z+5, r19	; 0x05
    51a8:	24 83       	std	Z+4, r18	; 0x04
    51aa:	8d e3       	ldi	r24, 0x3D	; 61
    51ac:	94 e0       	ldi	r25, 0x04	; 4
    51ae:	a0 e0       	ldi	r26, 0x00	; 0
    51b0:	81 83       	std	Z+1, r24	; 0x01
    51b2:	92 83       	std	Z+2, r25	; 0x02
    51b4:	a3 83       	std	Z+3, r26	; 0x03
    51b6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    51ba:	24 c0       	rjmp	.+72     	; 0x5204 <i2c_check_op+0x86>
    51bc:	f9 01       	movw	r30, r18
    51be:	ee 0f       	add	r30, r30
    51c0:	ff 1f       	adc	r31, r31
    51c2:	ec 59       	subi	r30, 0x9C	; 156
    51c4:	f8 4e       	sbci	r31, 0xE8	; 232
    51c6:	01 90       	ld	r0, Z+
    51c8:	f0 81       	ld	r31, Z
    51ca:	e0 2d       	mov	r30, r0
    51cc:	30 97       	sbiw	r30, 0x00	; 0
    51ce:	d1 f0       	breq	.+52     	; 0x5204 <i2c_check_op+0x86>
    51d0:	80 85       	ldd	r24, Z+8	; 0x08
    51d2:	91 85       	ldd	r25, Z+9	; 0x09
    51d4:	89 2b       	or	r24, r25
    51d6:	39 f4       	brne	.+14     	; 0x51e6 <i2c_check_op+0x68>
    51d8:	ed b7       	in	r30, 0x3d	; 61
    51da:	fe b7       	in	r31, 0x3e	; 62
    51dc:	35 83       	std	Z+5, r19	; 0x05
    51de:	24 83       	std	Z+4, r18	; 0x04
    51e0:	84 e2       	ldi	r24, 0x24	; 36
    51e2:	94 e0       	ldi	r25, 0x04	; 4
    51e4:	09 c0       	rjmp	.+18     	; 0x51f8 <i2c_check_op+0x7a>
    51e6:	86 81       	ldd	r24, Z+6	; 0x06
    51e8:	81 11       	cpse	r24, r1
    51ea:	0e c0       	rjmp	.+28     	; 0x5208 <i2c_check_op+0x8a>
    51ec:	ed b7       	in	r30, 0x3d	; 61
    51ee:	fe b7       	in	r31, 0x3e	; 62
    51f0:	35 83       	std	Z+5, r19	; 0x05
    51f2:	24 83       	std	Z+4, r18	; 0x04
    51f4:	8e e0       	ldi	r24, 0x0E	; 14
    51f6:	94 e0       	ldi	r25, 0x04	; 4
    51f8:	a0 e0       	ldi	r26, 0x00	; 0
    51fa:	81 83       	std	Z+1, r24	; 0x01
    51fc:	92 83       	std	Z+2, r25	; 0x02
    51fe:	a3 83       	std	Z+3, r26	; 0x03
    5200:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	01 c0       	rjmp	.+2      	; 0x520a <i2c_check_op+0x8c>
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	ad b7       	in	r26, 0x3d	; 61
    520c:	be b7       	in	r27, 0x3e	; 62
    520e:	17 96       	adiw	r26, 0x07	; 7
    5210:	0f b6       	in	r0, 0x3f	; 63
    5212:	f8 94       	cli
    5214:	be bf       	out	0x3e, r27	; 62
    5216:	0f be       	out	0x3f, r0	; 63
    5218:	ad bf       	out	0x3d, r26	; 61
    521a:	08 95       	ret

0000521c <i2c_task_init>:
    521c:	8f b7       	in	r24, 0x3f	; 63
    521e:	f8 94       	cli
    5220:	e4 e6       	ldi	r30, 0x64	; 100
    5222:	f7 e1       	ldi	r31, 0x17	; 23
    5224:	11 92       	st	Z+, r1
    5226:	11 92       	st	Z+, r1
    5228:	97 e1       	ldi	r25, 0x17	; 23
    522a:	e4 38       	cpi	r30, 0x84	; 132
    522c:	f9 07       	cpc	r31, r25
    522e:	d1 f7       	brne	.-12     	; 0x5224 <i2c_task_init+0x8>
    5230:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
    5234:	91 e0       	ldi	r25, 0x01	; 1
    5236:	90 93 86 17 	sts	0x1786, r25	; 0x801786 <i2c_task+0x2>
    523a:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <i2c_task+0x1>
    523e:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <i2c_task+0x3>
    5242:	8f bf       	out	0x3f, r24	; 63
    5244:	08 95       	ret

00005246 <i2c_task_op_add>:
    5246:	ef 92       	push	r14
    5248:	ff 92       	push	r15
    524a:	0f 93       	push	r16
    524c:	1f 93       	push	r17
    524e:	cf 93       	push	r28
    5250:	df 93       	push	r29
    5252:	d8 2f       	mov	r29, r24
    5254:	c6 2f       	mov	r28, r22
    5256:	7a 01       	movw	r14, r20
    5258:	02 2f       	mov	r16, r18
    525a:	1f b7       	in	r17, 0x3f	; 63
    525c:	6a e0       	ldi	r22, 0x0A	; 10
    525e:	70 e0       	ldi	r23, 0x00	; 0
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	a9 db       	rcall	.-2222   	; 0x49b8 <safecalloc>
    5266:	fc 01       	movw	r30, r24
    5268:	89 2b       	or	r24, r25
    526a:	89 f0       	breq	.+34     	; 0x528e <i2c_task_op_add+0x48>
    526c:	f8 94       	cli
    526e:	11 82       	std	Z+1, r1	; 0x01
    5270:	12 82       	std	Z+2, r1	; 0x02
    5272:	dd 0f       	add	r29, r29
    5274:	c1 70       	andi	r28, 0x01	; 1
    5276:	cd 2b       	or	r28, r29
    5278:	c0 83       	st	Z, r28
    527a:	84 e1       	ldi	r24, 0x14	; 20
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	95 83       	std	Z+5, r25	; 0x05
    5280:	84 83       	std	Z+4, r24	; 0x04
    5282:	13 82       	std	Z+3, r1	; 0x03
    5284:	06 83       	std	Z+6, r16	; 0x06
    5286:	17 82       	std	Z+7, r1	; 0x07
    5288:	f1 86       	std	Z+9, r15	; 0x09
    528a:	e0 86       	std	Z+8, r14	; 0x08
    528c:	1f bf       	out	0x3f, r17	; 63
    528e:	cf 01       	movw	r24, r30
    5290:	cd b7       	in	r28, 0x3d	; 61
    5292:	de b7       	in	r29, 0x3e	; 62
    5294:	e6 e0       	ldi	r30, 0x06	; 6
    5296:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

0000529a <i2c_init>:
    529a:	cf 93       	push	r28
    529c:	00 d0       	rcall	.+0      	; 0x529e <i2c_init+0x4>
    529e:	1f 92       	push	r1
    52a0:	9b 01       	movw	r18, r22
    52a2:	ac 01       	movw	r20, r24
    52a4:	cf b7       	in	r28, 0x3f	; 63
    52a6:	60 e0       	ldi	r22, 0x00	; 0
    52a8:	7d e2       	ldi	r23, 0x2D	; 45
    52aa:	81 e3       	ldi	r24, 0x31	; 49
    52ac:	91 e0       	ldi	r25, 0x01	; 1
    52ae:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    52b2:	da 01       	movw	r26, r20
    52b4:	c9 01       	movw	r24, r18
    52b6:	40 97       	sbiw	r24, 0x10	; 16
    52b8:	a1 09       	sbc	r26, r1
    52ba:	b1 09       	sbc	r27, r1
    52bc:	ac 01       	movw	r20, r24
    52be:	bd 01       	movw	r22, r26
    52c0:	76 95       	lsr	r23
    52c2:	67 95       	ror	r22
    52c4:	57 95       	ror	r21
    52c6:	47 95       	ror	r20
    52c8:	ca 01       	movw	r24, r20
    52ca:	88 27       	eor	r24, r24
    52cc:	89 2b       	or	r24, r25
    52ce:	59 f0       	breq	.+22     	; 0x52e6 <i2c_init+0x4c>
    52d0:	82 ef       	ldi	r24, 0xF2	; 242
    52d2:	93 e0       	ldi	r25, 0x03	; 3
    52d4:	a0 e0       	ldi	r26, 0x00	; 0
    52d6:	ed b7       	in	r30, 0x3d	; 61
    52d8:	fe b7       	in	r31, 0x3e	; 62
    52da:	81 83       	std	Z+1, r24	; 0x01
    52dc:	92 83       	std	Z+2, r25	; 0x02
    52de:	a3 83       	std	Z+3, r26	; 0x03
    52e0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    52e4:	3a c0       	rjmp	.+116    	; 0x535a <i2c_init+0xc0>
    52e6:	f8 94       	cli
    52e8:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    52ec:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
    52f6:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
    52fa:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <i2c_task+0x2>
    52fe:	40 9a       	sbi	0x08, 0	; 8
    5300:	41 9a       	sbi	0x08, 1	; 8
    5302:	84 e8       	ldi	r24, 0x84	; 132
    5304:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5308:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    530c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5310:	8c 7f       	andi	r24, 0xFC	; 252
    5312:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5316:	80 91 63 17 	lds	r24, 0x1763	; 0x801763 <i2c_init_status>
    531a:	81 11       	cpse	r24, r1
    531c:	1d c0       	rjmp	.+58     	; 0x5358 <i2c_init+0xbe>
    531e:	e4 e6       	ldi	r30, 0x64	; 100
    5320:	f7 e1       	ldi	r31, 0x17	; 23
    5322:	11 92       	st	Z+, r1
    5324:	11 92       	st	Z+, r1
    5326:	27 e1       	ldi	r18, 0x17	; 23
    5328:	e4 38       	cpi	r30, 0x84	; 132
    532a:	f2 07       	cpc	r31, r18
    532c:	d1 f7       	brne	.-12     	; 0x5322 <i2c_init+0x88>
    532e:	61 e0       	ldi	r22, 0x01	; 1
    5330:	70 e0       	ldi	r23, 0x00	; 0
    5332:	89 ea       	ldi	r24, 0xA9	; 169
    5334:	98 e2       	ldi	r25, 0x28	; 40
    5336:	0e 94 dd 31 	call	0x63ba	; 0x63ba <set_timers>
    533a:	01 96       	adiw	r24, 0x01	; 1
    533c:	51 f4       	brne	.+20     	; 0x5352 <i2c_init+0xb8>
    533e:	8b ed       	ldi	r24, 0xDB	; 219
    5340:	93 e0       	ldi	r25, 0x03	; 3
    5342:	a0 e0       	ldi	r26, 0x00	; 0
    5344:	ed b7       	in	r30, 0x3d	; 61
    5346:	fe b7       	in	r31, 0x3e	; 62
    5348:	81 83       	std	Z+1, r24	; 0x01
    534a:	92 83       	std	Z+2, r25	; 0x02
    534c:	a3 83       	std	Z+3, r26	; 0x03
    534e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <i2c_init_status>
    5358:	cf bf       	out	0x3f, r28	; 63
    535a:	0f 90       	pop	r0
    535c:	0f 90       	pop	r0
    535e:	0f 90       	pop	r0
    5360:	cf 91       	pop	r28
    5362:	08 95       	ret

00005364 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5364:	61 e0       	ldi	r22, 0x01	; 1
    5366:	70 e0       	ldi	r23, 0x00	; 0
    5368:	80 e0       	ldi	r24, 0x00	; 0
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	a6 db       	rcall	.-2228   	; 0x4aba <delayus>
	if(!i2c.enable || i2c.done )
    536e:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <i2c+0x1>
    5372:	88 23       	and	r24, r24
    5374:	39 f0       	breq	.+14     	; 0x5384 <i2c_done+0x20>
		return(1);
    5376:	81 e0       	ldi	r24, 0x01	; 1
    5378:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <i2c+0x2>
    537c:	91 11       	cpse	r25, r1
    537e:	03 c0       	rjmp	.+6      	; 0x5386 <i2c_done+0x22>
    5380:	80 e0       	ldi	r24, 0x00	; 0
    5382:	08 95       	ret
    5384:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5386:	08 95       	ret

00005388 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5388:	61 e0       	ldi	r22, 0x01	; 1
    538a:	70 e0       	ldi	r23, 0x00	; 0
    538c:	80 e0       	ldi	r24, 0x00	; 0
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	94 db       	rcall	.-2264   	; 0x4aba <delayus>
	if(!i2c_task.enable || i2c_task.done )
    5392:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <i2c_task>
    5396:	88 23       	and	r24, r24
    5398:	39 f0       	breq	.+14     	; 0x53a8 <i2c_task_done+0x20>
		return(1);
    539a:	81 e0       	ldi	r24, 0x01	; 1
    539c:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <i2c_task+0x2>
    53a0:	91 11       	cpse	r25, r1
    53a2:	03 c0       	rjmp	.+6      	; 0x53aa <i2c_task_done+0x22>
    53a4:	80 e0       	ldi	r24, 0x00	; 0
    53a6:	08 95       	ret
    53a8:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    53aa:	08 95       	ret

000053ac <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    53ac:	e2 e5       	ldi	r30, 0x52	; 82
    53ae:	fa e1       	ldi	r31, 0x1A	; 26
    53b0:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    53b2:	81 e0       	ldi	r24, 0x01	; 1
    53b4:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    53b6:	84 e1       	ldi	r24, 0x14	; 20
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	95 83       	std	Z+5, r25	; 0x05
    53bc:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    53be:	85 ea       	ldi	r24, 0xA5	; 165
    53c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    53c4:	08 95       	ret

000053c6 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    53c6:	ef 92       	push	r14
    53c8:	ff 92       	push	r15
    53ca:	0f 93       	push	r16
    53cc:	1f 93       	push	r17
    53ce:	cf 93       	push	r28
    53d0:	df 93       	push	r29
	uint8_t sreg = SREG;
    53d2:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    53d4:	f8 94       	cli
	i2c_task.done = 0;
    53d6:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <i2c_task+0x2>
	i2c_task.error = 0;
    53da:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <i2c_task+0x3>
	i2c_task.ind = 0;
    53de:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    53e2:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    53e4:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    53e6:	ee 24       	eor	r14, r14
    53e8:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    53ea:	04 e1       	ldi	r16, 0x14	; 20
    53ec:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    53ee:	8c 2f       	mov	r24, r28
    53f0:	c6 de       	rcall	.-628    	; 0x517e <i2c_check_op>
    53f2:	88 23       	and	r24, r24
    53f4:	d1 f0       	breq	.+52     	; 0x542a <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    53f6:	ec 2f       	mov	r30, r28
    53f8:	ee 0f       	add	r30, r30
    53fa:	ff 0b       	sbc	r31, r31
    53fc:	ec 59       	subi	r30, 0x9C	; 156
    53fe:	f8 4e       	sbci	r31, 0xE8	; 232
    5400:	01 90       	ld	r0, Z+
    5402:	f0 81       	ld	r31, Z
    5404:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5406:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5408:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    540a:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    540c:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    540e:	15 83       	std	Z+5, r17	; 0x05
    5410:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    5412:	d1 11       	cpse	r29, r1
    5414:	07 c0       	rjmp	.+14     	; 0x5424 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5416:	8a e0       	ldi	r24, 0x0A	; 10
    5418:	a2 e5       	ldi	r26, 0x52	; 82
    541a:	ba e1       	ldi	r27, 0x1A	; 26
    541c:	01 90       	ld	r0, Z+
    541e:	0d 92       	st	X+, r0
    5420:	8a 95       	dec	r24
    5422:	e1 f7       	brne	.-8      	; 0x541c <i2c_task_run+0x56>
    5424:	cf 5f       	subi	r28, 0xFF	; 255
    5426:	d1 e0       	ldi	r29, 0x01	; 1
    5428:	e2 cf       	rjmp	.-60     	; 0x53ee <i2c_task_run+0x28>
		}
	}

	if(run)
    542a:	dd 23       	and	r29, r29
    542c:	91 f0       	breq	.+36     	; 0x5452 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    542e:	80 e8       	ldi	r24, 0x80	; 128
    5430:	9a e2       	ldi	r25, 0x2A	; 42
    5432:	90 93 89 17 	sts	0x1789, r25	; 0x801789 <i2c_callback+0x1>
    5436:	80 93 88 17 	sts	0x1788, r24	; 0x801788 <i2c_callback>

		i2c_task.enable = 1;
    543a:	81 e0       	ldi	r24, 0x01	; 1
    543c:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <i2c_task>
		i2c_task.done = 0;
    5440:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5444:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5448:	8c 7f       	andi	r24, 0xFC	; 252
    544a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    544e:	ae df       	rcall	.-164    	; 0x53ac <i2c_send_start>
    5450:	15 c0       	rjmp	.+42     	; 0x547c <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5452:	10 92 89 17 	sts	0x1789, r1	; 0x801789 <i2c_callback+0x1>
    5456:	10 92 88 17 	sts	0x1788, r1	; 0x801788 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    545a:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
		i2c_task.done = 1;
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5464:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
        i2c.enable = 0;
    5468:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    546c:	84 e8       	ldi	r24, 0x84	; 132
    546e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5472:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5476:	8c 7f       	andi	r24, 0xFC	; 252
    5478:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    547c:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5480:	ff be       	out	0x3f, r15	; 63

}
    5482:	cd b7       	in	r28, 0x3d	; 61
    5484:	de b7       	in	r29, 0x3e	; 62
    5486:	e6 e0       	ldi	r30, 0x06	; 6
    5488:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

0000548c <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    548c:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    548e:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5490:	10 92 89 17 	sts	0x1789, r1	; 0x801789 <i2c_callback+0x1>
    5494:	10 92 88 17 	sts	0x1788, r1	; 0x801788 <i2c_callback>

	i2c.enable = 1; // Enabled
    5498:	31 e0       	ldi	r19, 0x01	; 1
    549a:	30 93 53 1a 	sts	0x1A53, r19	; 0x801a53 <i2c+0x1>
	i2c.done = 0;
    549e:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    54a2:	88 0f       	add	r24, r24
    54a4:	61 70       	andi	r22, 0x01	; 1
    54a6:	68 2b       	or	r22, r24
    54a8:	60 93 52 1a 	sts	0x1A52, r22	; 0x801a52 <i2c>
	i2c.flags = 0;
    54ac:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x3>
    i2c.len = len;
    54b0:	20 93 58 1a 	sts	0x1A58, r18	; 0x801a58 <i2c+0x6>
    i2c.ind = 0;
    54b4:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <i2c+0x7>
    i2c.buf = buf;
    54b8:	50 93 5b 1a 	sts	0x1A5B, r21	; 0x801a5b <i2c+0x9>
    54bc:	40 93 5a 1a 	sts	0x1A5A, r20	; 0x801a5a <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    54c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    54c4:	8c 7f       	andi	r24, 0xFC	; 252
    54c6:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    54ca:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    54ce:	9f bf       	out	0x3f, r25	; 63
    54d0:	6d df       	rcall	.-294    	; 0x53ac <i2c_send_start>
    54d2:	48 df       	rcall	.-368    	; 0x5364 <i2c_done>
    54d4:	88 23       	and	r24, r24
		;
#endif
	return( i2c.flags ? 0 : 1);
    54d6:	e9 f3       	breq	.-6      	; 0x54d2 <i2c_fn+0x46>
    54d8:	81 e0       	ldi	r24, 0x01	; 1
    54da:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <i2c+0x3>
    54de:	91 11       	cpse	r25, r1
}
    54e0:	80 e0       	ldi	r24, 0x00	; 0
    54e2:	08 95       	ret

000054e4 <i2c_send_stop>:
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    54e4:	e2 e5       	ldi	r30, 0x52	; 82
    54e6:	fa e1       	ldi	r31, 0x1A	; 26
    54e8:	81 e0       	ldi	r24, 0x01	; 1
    54ea:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    54ec:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    54ee:	84 e9       	ldi	r24, 0x94	; 148
    54f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    54f4:	6a e0       	ldi	r22, 0x0A	; 10
    54f6:	70 e0       	ldi	r23, 0x00	; 0
    54f8:	80 e0       	ldi	r24, 0x00	; 0
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	de ca       	rjmp	.-2628   	; 0x4aba <delayus>
    54fe:	08 95       	ret

00005500 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5500:	cf 93       	push	r28
    5502:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5504:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <i2c_task>
    5508:	88 23       	and	r24, r24
    550a:	09 f4       	brne	.+2      	; 0x550e <i2c_task_next_op+0xe>
    550c:	46 c0       	rjmp	.+140    	; 0x559a <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    550e:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <i2c_task+0x1>
    5512:	35 de       	rcall	.-918    	; 0x517e <i2c_check_op>
    5514:	88 23       	and	r24, r24
    5516:	b1 f0       	breq	.+44     	; 0x5544 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5518:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <i2c_task+0x1>
    551c:	ee 0f       	add	r30, r30
    551e:	ff 0b       	sbc	r31, r31
    5520:	ec 59       	subi	r30, 0x9C	; 156
    5522:	f8 4e       	sbci	r31, 0xE8	; 232
    5524:	c0 81       	ld	r28, Z
    5526:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5528:	8a e0       	ldi	r24, 0x0A	; 10
    552a:	e2 e5       	ldi	r30, 0x52	; 82
    552c:	fa e1       	ldi	r31, 0x1A	; 26
    552e:	de 01       	movw	r26, r28
    5530:	01 90       	ld	r0, Z+
    5532:	0d 92       	st	X+, r0
    5534:	8a 95       	dec	r24
    5536:	e1 f7       	brne	.-8      	; 0x5530 <i2c_task_next_op+0x30>
			if(o->flags)
    5538:	8b 81       	ldd	r24, Y+3	; 0x03
    553a:	88 23       	and	r24, r24
    553c:	19 f0       	breq	.+6      	; 0x5544 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	80 93 87 17 	sts	0x1787, r24	; 0x801787 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5544:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <i2c_task+0x1>
    5548:	8f 5f       	subi	r24, 0xFF	; 255
    554a:	19 de       	rcall	.-974    	; 0x517e <i2c_check_op>
    554c:	88 23       	and	r24, r24
    554e:	29 f1       	breq	.+74     	; 0x559a <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5550:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <i2c_task+0x1>
    5554:	ef 5f       	subi	r30, 0xFF	; 255
    5556:	e0 93 85 17 	sts	0x1785, r30	; 0x801785 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    555a:	ee 0f       	add	r30, r30
    555c:	ff 0b       	sbc	r31, r31
    555e:	ec 59       	subi	r30, 0x9C	; 156
    5560:	f8 4e       	sbci	r31, 0xE8	; 232
    5562:	01 90       	ld	r0, Z+
    5564:	f0 81       	ld	r31, Z
    5566:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5568:	81 81       	ldd	r24, Z+1	; 0x01
    556a:	81 30       	cpi	r24, 0x01	; 1
    556c:	19 f0       	breq	.+6      	; 0x5574 <i2c_task_next_op+0x74>
    556e:	82 81       	ldd	r24, Z+2	; 0x02
    5570:	81 11       	cpse	r24, r1
    5572:	13 c0       	rjmp	.+38     	; 0x559a <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5574:	84 e1       	ldi	r24, 0x14	; 20
    5576:	90 e0       	ldi	r25, 0x00	; 0
    5578:	95 83       	std	Z+5, r25	; 0x05
    557a:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    557c:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    557e:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5584:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5586:	8a e0       	ldi	r24, 0x0A	; 10
    5588:	a2 e5       	ldi	r26, 0x52	; 82
    558a:	ba e1       	ldi	r27, 0x1A	; 26
    558c:	01 90       	ld	r0, Z+
    558e:	0d 92       	st	X+, r0
    5590:	8a 95       	dec	r24

				i2c_send_start();
    5592:	e1 f7       	brne	.-8      	; 0x558c <i2c_task_next_op+0x8c>
    5594:	0b df       	rcall	.-490    	; 0x53ac <i2c_send_start>

				return(1);
    5596:	81 e0       	ldi	r24, 0x01	; 1
    5598:	0f c0       	rjmp	.+30     	; 0x55b8 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    559a:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
	i2c_task.done = 1;
    559e:	81 e0       	ldi	r24, 0x01	; 1
    55a0:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    55a4:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
	i2c.enable = 0;
    55a8:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
	i2c.flags = 0;
    55ac:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x3>
	i2c.ind = 0;
    55b0:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <i2c+0x7>

	i2c_send_stop();
    55b4:	97 df       	rcall	.-210    	; 0x54e4 <i2c_send_stop>

	return(0);
    55b6:	80 e0       	ldi	r24, 0x00	; 0
}
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    55bc:	08 95       	ret

000055be <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    55be:	e0 91 88 17 	lds	r30, 0x1788	; 0x801788 <i2c_callback>
    55c2:	f0 91 89 17 	lds	r31, 0x1789	; 0x801789 <i2c_callback+0x1>
    55c6:	30 97       	sbiw	r30, 0x00	; 0
    55c8:	11 f0       	breq	.+4      	; 0x55ce <i2c_next+0x10>
	    i2c_callback();
    55ca:	09 95       	icall
	else
		i2c_send_stop();
    55cc:	08 95       	ret
    55ce:	8a cf       	rjmp	.-236    	; 0x54e4 <i2c_send_stop>
    55d0:	08 95       	ret

000055d2 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    55d2:	1f 92       	push	r1
    55d4:	0f 92       	push	r0
    55d6:	0f b6       	in	r0, 0x3f	; 63
    55d8:	0f 92       	push	r0
    55da:	11 24       	eor	r1, r1
    55dc:	0b b6       	in	r0, 0x3b	; 59
    55de:	0f 92       	push	r0
    55e0:	2f 93       	push	r18
    55e2:	3f 93       	push	r19
    55e4:	4f 93       	push	r20
    55e6:	5f 93       	push	r21
    55e8:	6f 93       	push	r22
    55ea:	7f 93       	push	r23
    55ec:	8f 93       	push	r24
    55ee:	9f 93       	push	r25
    55f0:	af 93       	push	r26
    55f2:	bf 93       	push	r27
    55f4:	ef 93       	push	r30
    55f6:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    55f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    55fc:	90 91 53 1a 	lds	r25, 0x1A53	; 0x801a53 <i2c+0x1>
    5600:	99 23       	and	r25, r25
    5602:	09 f1       	breq	.+66     	; 0x5646 <__vector_26+0x74>
    5604:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <i2c+0x2>
    5608:	91 11       	cpse	r25, r1
    560a:	1d c0       	rjmp	.+58     	; 0x5646 <__vector_26+0x74>
    560c:	20 91 5a 1a 	lds	r18, 0x1A5A	; 0x801a5a <i2c+0x8>
    5610:	30 91 5b 1a 	lds	r19, 0x1A5B	; 0x801a5b <i2c+0x9>
    5614:	21 15       	cp	r18, r1
    5616:	31 05       	cpc	r19, r1
    5618:	b1 f0       	breq	.+44     	; 0x5646 <__vector_26+0x74>
    561a:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <i2c+0x6>
    561e:	99 23       	and	r25, r25
    5620:	91 f0       	breq	.+36     	; 0x5646 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5622:	40 91 56 1a 	lds	r20, 0x1A56	; 0x801a56 <i2c+0x4>
    5626:	50 91 57 1a 	lds	r21, 0x1A57	; 0x801a57 <i2c+0x5>
    562a:	45 2b       	or	r20, r21
    562c:	71 f4       	brne	.+28     	; 0x564a <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    562e:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5632:	81 60       	ori	r24, 0x01	; 1
    5634:	80 93 55 1a 	sts	0x1A55, r24	; 0x801a55 <i2c+0x3>
		i2c_task.enable = 0;
    5638:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task>
		i2c_task.done = 1;
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <i2c_task+0x2>
		i2c_task.error = 1;
    5642:	80 93 87 17 	sts	0x1787, r24	; 0x801787 <i2c_task+0x3>
		i2c_send_stop();
		return;
    5646:	4e df       	rcall	.-356    	; 0x54e4 <i2c_send_stop>
	}

	// Master Receiver mode
	switch (status)
    5648:	9b c0       	rjmp	.+310    	; 0x5780 <__vector_26+0x1ae>
    564a:	88 7f       	andi	r24, 0xF8	; 248
    564c:	80 33       	cpi	r24, 0x30	; 48
    564e:	09 f4       	brne	.+2      	; 0x5652 <__vector_26+0x80>
    5650:	83 c0       	rjmp	.+262    	; 0x5758 <__vector_26+0x186>
    5652:	70 f4       	brcc	.+28     	; 0x5670 <__vector_26+0x9e>
    5654:	88 31       	cpi	r24, 0x18	; 24
    5656:	09 f1       	breq	.+66     	; 0x569a <__vector_26+0xc8>
    5658:	28 f4       	brcc	.+10     	; 0x5664 <__vector_26+0x92>
    565a:	88 30       	cpi	r24, 0x08	; 8
    565c:	c9 f0       	breq	.+50     	; 0x5690 <__vector_26+0xbe>
    565e:	80 31       	cpi	r24, 0x10	; 16
    5660:	b9 f0       	breq	.+46     	; 0x5690 <__vector_26+0xbe>
    5662:	83 c0       	rjmp	.+262    	; 0x576a <__vector_26+0x198>
    5664:	80 32       	cpi	r24, 0x20	; 32
    5666:	09 f4       	brne	.+2      	; 0x566a <__vector_26+0x98>
    5668:	65 c0       	rjmp	.+202    	; 0x5734 <__vector_26+0x162>
    566a:	88 32       	cpi	r24, 0x28	; 40
    566c:	b1 f0       	breq	.+44     	; 0x569a <__vector_26+0xc8>
    566e:	7d c0       	rjmp	.+250    	; 0x576a <__vector_26+0x198>
    5670:	88 34       	cpi	r24, 0x48	; 72
    5672:	09 f4       	brne	.+2      	; 0x5676 <__vector_26+0xa4>
    5674:	68 c0       	rjmp	.+208    	; 0x5746 <__vector_26+0x174>
    5676:	38 f4       	brcc	.+14     	; 0x5686 <__vector_26+0xb4>
    5678:	88 33       	cpi	r24, 0x38	; 56
    567a:	09 f4       	brne	.+2      	; 0x567e <__vector_26+0xac>
    567c:	57 c0       	rjmp	.+174    	; 0x572c <__vector_26+0x15a>
    567e:	80 34       	cpi	r24, 0x40	; 64
    5680:	09 f4       	brne	.+2      	; 0x5684 <__vector_26+0xb2>
    5682:	42 c0       	rjmp	.+132    	; 0x5708 <__vector_26+0x136>
    5684:	72 c0       	rjmp	.+228    	; 0x576a <__vector_26+0x198>
    5686:	80 35       	cpi	r24, 0x50	; 80
    5688:	79 f1       	breq	.+94     	; 0x56e8 <__vector_26+0x116>
    568a:	88 35       	cpi	r24, 0x58	; 88
    568c:	b9 f0       	breq	.+46     	; 0x56bc <__vector_26+0xea>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    568e:	6d c0       	rjmp	.+218    	; 0x576a <__vector_26+0x198>
    5690:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <i2c+0x7>
			TWDR = i2c.address;
    5694:	80 91 52 1a 	lds	r24, 0x1A52	; 0x801a52 <i2c>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5698:	0e c0       	rjmp	.+28     	; 0x56b6 <__vector_26+0xe4>
    569a:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    569e:	89 17       	cp	r24, r25
			{
				TWDR = i2c.buf[i2c.ind++];
    56a0:	ec f4       	brge	.+58     	; 0x56dc <__vector_26+0x10a>
    56a2:	91 e0       	ldi	r25, 0x01	; 1
    56a4:	98 0f       	add	r25, r24
    56a6:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <i2c+0x7>
    56aa:	f9 01       	movw	r30, r18
    56ac:	e8 0f       	add	r30, r24
    56ae:	f1 1d       	adc	r31, r1
    56b0:	87 fd       	sbrc	r24, 7
    56b2:	fa 95       	dec	r31
    56b4:	80 81       	ld	r24, Z
    56b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    56ba:	36 c0       	rjmp	.+108    	; 0x5728 <__vector_26+0x156>
    56bc:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    56c0:	89 17       	cp	r24, r25
				i2c.buf[i2c.ind++] = TWDR;
    56c2:	64 f4       	brge	.+24     	; 0x56dc <__vector_26+0x10a>
    56c4:	91 e0       	ldi	r25, 0x01	; 1
    56c6:	98 0f       	add	r25, r24
    56c8:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <i2c+0x7>
    56cc:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    56d0:	f9 01       	movw	r30, r18
    56d2:	e8 0f       	add	r30, r24
    56d4:	f1 1d       	adc	r31, r1
    56d6:	87 fd       	sbrc	r24, 7
    56d8:	fa 95       	dec	r31
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    56da:	90 83       	st	Z, r25
    56dc:	81 e0       	ldi	r24, 0x01	; 1
    56de:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
				i2c.enable = 0;
    56e2:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    56e6:	4b c0       	rjmp	.+150    	; 0x577e <__vector_26+0x1ac>
    56e8:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    56ec:	89 17       	cp	r24, r25
				i2c.buf[i2c.ind++] = TWDR;
    56ee:	64 f4       	brge	.+24     	; 0x5708 <__vector_26+0x136>
    56f0:	91 e0       	ldi	r25, 0x01	; 1
    56f2:	98 0f       	add	r25, r24
    56f4:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <i2c+0x7>
    56f8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    56fc:	f9 01       	movw	r30, r18
    56fe:	e8 0f       	add	r30, r24
    5700:	f1 1d       	adc	r31, r1
    5702:	87 fd       	sbrc	r24, 7
    5704:	fa 95       	dec	r31
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5706:	90 83       	st	Z, r25
    5708:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    570c:	08 2e       	mov	r0, r24
    570e:	00 0c       	add	r0, r0
    5710:	99 0b       	sbc	r25, r25
    5712:	01 96       	adiw	r24, 0x01	; 1
    5714:	20 91 58 1a 	lds	r18, 0x1A58	; 0x801a58 <i2c+0x6>
    5718:	02 2e       	mov	r0, r18
    571a:	00 0c       	add	r0, r0
    571c:	33 0b       	sbc	r19, r19
    571e:	82 17       	cp	r24, r18
    5720:	93 07       	cpc	r25, r19
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5722:	14 f4       	brge	.+4      	; 0x5728 <__vector_26+0x156>
    5724:	85 ec       	ldi	r24, 0xC5	; 197
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5726:	03 c0       	rjmp	.+6      	; 0x572e <__vector_26+0x15c>
    5728:	85 e8       	ldi	r24, 0x85	; 133
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    572a:	01 c0       	rjmp	.+2      	; 0x572e <__vector_26+0x15c>
    572c:	85 ea       	ldi	r24, 0xA5	; 165
    572e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5732:	26 c0       	rjmp	.+76     	; 0x5780 <__vector_26+0x1ae>
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    573a:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    573e:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5742:	88 60       	ori	r24, 0x08	; 8
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5744:	1a c0       	rjmp	.+52     	; 0x577a <__vector_26+0x1a8>
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    574c:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5750:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5754:	80 61       	ori	r24, 0x10	; 16
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5756:	11 c0       	rjmp	.+34     	; 0x577a <__vector_26+0x1a8>
    5758:	81 e0       	ldi	r24, 0x01	; 1
    575a:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    575e:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5762:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5766:	80 62       	ori	r24, 0x20	; 32
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5768:	08 c0       	rjmp	.+16     	; 0x577a <__vector_26+0x1a8>
    576a:	81 e0       	ldi	r24, 0x01	; 1
    576c:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    5770:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5774:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5778:	80 64       	ori	r24, 0x40	; 64
			i2c_next();
    577a:	80 93 55 1a 	sts	0x1A55, r24	; 0x801a55 <i2c+0x3>
			break;
	}
}
    577e:	1f df       	rcall	.-450    	; 0x55be <i2c_next>
    5780:	ff 91       	pop	r31
    5782:	ef 91       	pop	r30
    5784:	bf 91       	pop	r27
    5786:	af 91       	pop	r26
    5788:	9f 91       	pop	r25
    578a:	8f 91       	pop	r24
    578c:	7f 91       	pop	r23
    578e:	6f 91       	pop	r22
    5790:	5f 91       	pop	r21
    5792:	4f 91       	pop	r20
    5794:	3f 91       	pop	r19
    5796:	2f 91       	pop	r18
    5798:	0f 90       	pop	r0
    579a:	0b be       	out	0x3b, r0	; 59
    579c:	0f 90       	pop	r0
    579e:	0f be       	out	0x3f, r0	; 63
    57a0:	0f 90       	pop	r0
    57a2:	1f 90       	pop	r1
    57a4:	18 95       	reti

000057a6 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    57a6:	cf 93       	push	r28
    57a8:	00 d0       	rcall	.+0      	; 0x57aa <i2c_print_error+0x4>
    57aa:	00 d0       	rcall	.+0      	; 0x57ac <i2c_print_error+0x6>
    57ac:	1f 92       	push	r1
    int flags = o->flags;
    57ae:	fc 01       	movw	r30, r24
    57b0:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    57b2:	cc 23       	and	r28, r28
    57b4:	09 f4       	brne	.+2      	; 0x57b8 <i2c_print_error+0x12>
    57b6:	67 c0       	rjmp	.+206    	; 0x5886 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    57b8:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <i2c+0x2>
    57bc:	81 11       	cpse	r24, r1
    57be:	03 c0       	rjmp	.+6      	; 0x57c6 <i2c_print_error+0x20>
    57c0:	83 e2       	ldi	r24, 0x23	; 35
    57c2:	93 e0       	ldi	r25, 0x03	; 3
    57c4:	02 c0       	rjmp	.+4      	; 0x57ca <i2c_print_error+0x24>
    57c6:	8e e1       	ldi	r24, 0x1E	; 30
    57c8:	93 e0       	ldi	r25, 0x03	; 3
    57ca:	ed b7       	in	r30, 0x3d	; 61
    57cc:	fe b7       	in	r31, 0x3e	; 62
    57ce:	95 83       	std	Z+5, r25	; 0x05
    57d0:	84 83       	std	Z+4, r24	; 0x04
    57d2:	85 ed       	ldi	r24, 0xD5	; 213
    57d4:	93 e0       	ldi	r25, 0x03	; 3
    57d6:	a0 e0       	ldi	r26, 0x00	; 0
    57d8:	81 83       	std	Z+1, r24	; 0x01
    57da:	92 83       	std	Z+2, r25	; 0x02
    57dc:	a3 83       	std	Z+3, r26	; 0x03
    57de:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    57e2:	c0 ff       	sbrs	r28, 0
    57e4:	0a c0       	rjmp	.+20     	; 0x57fa <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    57e6:	87 ec       	ldi	r24, 0xC7	; 199
    57e8:	93 e0       	ldi	r25, 0x03	; 3
    57ea:	a0 e0       	ldi	r26, 0x00	; 0
    57ec:	ed b7       	in	r30, 0x3d	; 61
    57ee:	fe b7       	in	r31, 0x3e	; 62
    57f0:	81 83       	std	Z+1, r24	; 0x01
    57f2:	92 83       	std	Z+2, r25	; 0x02
    57f4:	a3 83       	std	Z+3, r26	; 0x03
    57f6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
		if(flags & I2C_OP_LEN)
    57fa:	c1 ff       	sbrs	r28, 1
    57fc:	0a c0       	rjmp	.+20     	; 0x5812 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    57fe:	8d eb       	ldi	r24, 0xBD	; 189
    5800:	93 e0       	ldi	r25, 0x03	; 3
    5802:	a0 e0       	ldi	r26, 0x00	; 0
    5804:	ed b7       	in	r30, 0x3d	; 61
    5806:	fe b7       	in	r31, 0x3e	; 62
    5808:	81 83       	std	Z+1, r24	; 0x01
    580a:	92 83       	std	Z+2, r25	; 0x02
    580c:	a3 83       	std	Z+3, r26	; 0x03
    580e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
		if(flags & I2C_OP_ERROR)
    5812:	c2 ff       	sbrs	r28, 2
    5814:	0a c0       	rjmp	.+20     	; 0x582a <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5816:	81 eb       	ldi	r24, 0xB1	; 177
    5818:	93 e0       	ldi	r25, 0x03	; 3
    581a:	a0 e0       	ldi	r26, 0x00	; 0
    581c:	ed b7       	in	r30, 0x3d	; 61
    581e:	fe b7       	in	r31, 0x3e	; 62
    5820:	81 83       	std	Z+1, r24	; 0x01
    5822:	92 83       	std	Z+2, r25	; 0x02
    5824:	a3 83       	std	Z+3, r26	; 0x03
    5826:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    582a:	c4 ff       	sbrs	r28, 4
    582c:	0a c0       	rjmp	.+20     	; 0x5842 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    582e:	8f e9       	ldi	r24, 0x9F	; 159
    5830:	93 e0       	ldi	r25, 0x03	; 3
    5832:	a0 e0       	ldi	r26, 0x00	; 0
    5834:	ed b7       	in	r30, 0x3d	; 61
    5836:	fe b7       	in	r31, 0x3e	; 62
    5838:	81 83       	std	Z+1, r24	; 0x01
    583a:	92 83       	std	Z+2, r25	; 0x02
    583c:	a3 83       	std	Z+3, r26	; 0x03
    583e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5842:	c3 ff       	sbrs	r28, 3
    5844:	0a c0       	rjmp	.+20     	; 0x585a <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5846:	8d e8       	ldi	r24, 0x8D	; 141
    5848:	93 e0       	ldi	r25, 0x03	; 3
    584a:	a0 e0       	ldi	r26, 0x00	; 0
    584c:	ed b7       	in	r30, 0x3d	; 61
    584e:	fe b7       	in	r31, 0x3e	; 62
    5850:	81 83       	std	Z+1, r24	; 0x01
    5852:	92 83       	std	Z+2, r25	; 0x02
    5854:	a3 83       	std	Z+3, r26	; 0x03
    5856:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    585a:	c5 ff       	sbrs	r28, 5
    585c:	0a c0       	rjmp	.+20     	; 0x5872 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    585e:	8a e7       	ldi	r24, 0x7A	; 122
    5860:	93 e0       	ldi	r25, 0x03	; 3
    5862:	a0 e0       	ldi	r26, 0x00	; 0
    5864:	ed b7       	in	r30, 0x3d	; 61
    5866:	fe b7       	in	r31, 0x3e	; 62
    5868:	81 83       	std	Z+1, r24	; 0x01
    586a:	92 83       	std	Z+2, r25	; 0x02
    586c:	a3 83       	std	Z+3, r26	; 0x03
    586e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
		printf("\n");
    5872:	88 e7       	ldi	r24, 0x78	; 120
    5874:	93 e0       	ldi	r25, 0x03	; 3
    5876:	a0 e0       	ldi	r26, 0x00	; 0
    5878:	ed b7       	in	r30, 0x3d	; 61
    587a:	fe b7       	in	r31, 0x3e	; 62
    587c:	81 83       	std	Z+1, r24	; 0x01
    587e:	92 83       	std	Z+2, r25	; 0x02
    5880:	a3 83       	std	Z+3, r26	; 0x03
    5882:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
	}
}
    5886:	0f 90       	pop	r0
    5888:	0f 90       	pop	r0
    588a:	0f 90       	pop	r0
    588c:	0f 90       	pop	r0
    588e:	0f 90       	pop	r0
    5890:	cf 91       	pop	r28
    5892:	08 95       	ret

00005894 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5894:	6f 92       	push	r6
    5896:	7f 92       	push	r7
    5898:	8f 92       	push	r8
    589a:	af 92       	push	r10
    589c:	bf 92       	push	r11
    589e:	cf 92       	push	r12
    58a0:	df 92       	push	r13
    58a2:	ef 92       	push	r14
    58a4:	0f 93       	push	r16
    58a6:	1f 93       	push	r17
    58a8:	cf 93       	push	r28
    58aa:	df 93       	push	r29
    58ac:	00 d0       	rcall	.+0      	; 0x58ae <i2c_display_task_errors+0x1a>
    58ae:	00 d0       	rcall	.+0      	; 0x58b0 <i2c_display_task_errors+0x1c>
    58b0:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    58b2:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <i2c_task+0x2>
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	ed b7       	in	r30, 0x3d	; 61
    58ba:	fe b7       	in	r31, 0x3e	; 62
    58bc:	95 83       	std	Z+5, r25	; 0x05
    58be:	84 83       	std	Z+4, r24	; 0x04
    58c0:	85 e6       	ldi	r24, 0x65	; 101
    58c2:	93 e0       	ldi	r25, 0x03	; 3
    58c4:	a0 e0       	ldi	r26, 0x00	; 0
    58c6:	81 83       	std	Z+1, r24	; 0x01
    58c8:	92 83       	std	Z+2, r25	; 0x02
    58ca:	a3 83       	std	Z+3, r26	; 0x03
    58cc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    58d0:	80 91 87 17 	lds	r24, 0x1787	; 0x801787 <i2c_task+0x3>
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	ed b7       	in	r30, 0x3d	; 61
    58d8:	fe b7       	in	r31, 0x3e	; 62
    58da:	95 83       	std	Z+5, r25	; 0x05
    58dc:	84 83       	std	Z+4, r24	; 0x04
    58de:	81 e5       	ldi	r24, 0x51	; 81
    58e0:	93 e0       	ldi	r25, 0x03	; 3
    58e2:	a0 e0       	ldi	r26, 0x00	; 0
    58e4:	81 83       	std	Z+1, r24	; 0x01
    58e6:	92 83       	std	Z+2, r25	; 0x02
    58e8:	a3 83       	std	Z+3, r26	; 0x03
    58ea:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    58ee:	c4 e6       	ldi	r28, 0x64	; 100
    58f0:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    58f2:	00 e0       	ldi	r16, 0x00	; 0
    58f4:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    58f6:	87 e4       	ldi	r24, 0x47	; 71
    58f8:	93 e0       	ldi	r25, 0x03	; 3
    58fa:	6c 01       	movw	r12, r24
    58fc:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    58fe:	85 e4       	ldi	r24, 0x45	; 69
    5900:	93 e0       	ldi	r25, 0x03	; 3
    5902:	3c 01       	movw	r6, r24
    5904:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5906:	30 2f       	mov	r19, r16
    5908:	21 2f       	mov	r18, r17
    590a:	5e 01       	movw	r10, r28
    590c:	0f 5f       	subi	r16, 0xFF	; 255
    590e:	1f 4f       	sbci	r17, 0xFF	; 255
    5910:	88 81       	ld	r24, Y
    5912:	99 81       	ldd	r25, Y+1	; 0x01
    5914:	89 2b       	or	r24, r25
    5916:	b1 f0       	breq	.+44     	; 0x5944 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5918:	ed b7       	in	r30, 0x3d	; 61
    591a:	fe b7       	in	r31, 0x3e	; 62
    591c:	34 83       	std	Z+4, r19	; 0x04
    591e:	25 83       	std	Z+5, r18	; 0x05
    5920:	c1 82       	std	Z+1, r12	; 0x01
    5922:	d2 82       	std	Z+2, r13	; 0x02
    5924:	e3 82       	std	Z+3, r14	; 0x03
    5926:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    592a:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    592c:	f5 01       	movw	r30, r10
    592e:	80 81       	ld	r24, Z
    5930:	91 81       	ldd	r25, Z+1	; 0x01
    5932:	39 df       	rcall	.-398    	; 0x57a6 <i2c_print_error>
		printf("\n");
    5934:	ed b7       	in	r30, 0x3d	; 61
    5936:	fe b7       	in	r31, 0x3e	; 62
    5938:	61 82       	std	Z+1, r6	; 0x01
    593a:	72 82       	std	Z+2, r7	; 0x02
    593c:	83 82       	std	Z+3, r8	; 0x03
    593e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5942:	e1 cf       	rjmp	.-62     	; 0x5906 <i2c_display_task_errors+0x72>
	}
}
    5944:	0f 90       	pop	r0
    5946:	0f 90       	pop	r0
    5948:	0f 90       	pop	r0
    594a:	0f 90       	pop	r0
    594c:	0f 90       	pop	r0
    594e:	df 91       	pop	r29
    5950:	cf 91       	pop	r28
    5952:	1f 91       	pop	r17
    5954:	0f 91       	pop	r16
    5956:	ef 90       	pop	r14
    5958:	df 90       	pop	r13
    595a:	cf 90       	pop	r12
    595c:	bf 90       	pop	r11
    595e:	af 90       	pop	r10
    5960:	8f 90       	pop	r8
    5962:	7f 90       	pop	r7
    5964:	6f 90       	pop	r6
    5966:	08 95       	ret

00005968 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5968:	6a e0       	ldi	r22, 0x0A	; 10
    596a:	0e 94 22 df 	call	0x1be44	; 0x1be44 <__udivmodqi4>
    596e:	82 95       	swap	r24
    5970:	80 7f       	andi	r24, 0xF0	; 240
    5972:	89 2b       	or	r24, r25
    5974:	08 95       	ret

00005976 <BCDtoBIN>:
    5976:	98 2f       	mov	r25, r24
    5978:	92 95       	swap	r25
    597a:	9f 70       	andi	r25, 0x0F	; 15
    597c:	8f 70       	andi	r24, 0x0F	; 15
    597e:	2a e0       	ldi	r18, 0x0A	; 10
    5980:	92 9f       	mul	r25, r18
    5982:	80 0d       	add	r24, r0
    5984:	11 24       	eor	r1, r1
    5986:	08 95       	ret

00005988 <i2c_rtc_write>:
    5988:	ac e0       	ldi	r26, 0x0C	; 12
    598a:	b0 e0       	ldi	r27, 0x00	; 0
    598c:	ea ec       	ldi	r30, 0xCA	; 202
    598e:	fc e2       	ldi	r31, 0x2C	; 44
    5990:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    5994:	9f ef       	ldi	r25, 0xFF	; 255
    5996:	92 0f       	add	r25, r18
    5998:	98 30       	cpi	r25, 0x08	; 8
    599a:	50 f5       	brcc	.+84     	; 0x59f0 <i2c_rtc_write+0x68>
    599c:	6c 83       	std	Y+4, r22	; 0x04
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	02 2f       	mov	r16, r18
    59a2:	10 e0       	ldi	r17, 0x00	; 0
    59a4:	69 2f       	mov	r22, r25
    59a6:	09 2e       	mov	r0, r25
    59a8:	00 0c       	add	r0, r0
    59aa:	77 0b       	sbc	r23, r23
    59ac:	60 17       	cp	r22, r16
    59ae:	71 07       	cpc	r23, r17
    59b0:	6c f4       	brge	.+26     	; 0x59cc <i2c_rtc_write+0x44>
    59b2:	a5 e0       	ldi	r26, 0x05	; 5
    59b4:	b0 e0       	ldi	r27, 0x00	; 0
    59b6:	ac 0f       	add	r26, r28
    59b8:	bd 1f       	adc	r27, r29
    59ba:	a6 0f       	add	r26, r22
    59bc:	b7 1f       	adc	r27, r23
    59be:	64 0f       	add	r22, r20
    59c0:	75 1f       	adc	r23, r21
    59c2:	fb 01       	movw	r30, r22
    59c4:	30 81       	ld	r19, Z
    59c6:	3c 93       	st	X, r19
    59c8:	9f 5f       	subi	r25, 0xFF	; 255
    59ca:	ec cf       	rjmp	.-40     	; 0x59a4 <i2c_rtc_write+0x1c>
    59cc:	2f 5f       	subi	r18, 0xFF	; 255
    59ce:	ae 01       	movw	r20, r28
    59d0:	4c 5f       	subi	r20, 0xFC	; 252
    59d2:	5f 4f       	sbci	r21, 0xFF	; 255
    59d4:	60 e0       	ldi	r22, 0x00	; 0
    59d6:	5a dd       	rcall	.-1356   	; 0x548c <i2c_fn>
    59d8:	81 11       	cpse	r24, r1
    59da:	0c c0       	rjmp	.+24     	; 0x59f4 <i2c_rtc_write+0x6c>
    59dc:	82 ef       	ldi	r24, 0xF2	; 242
    59de:	94 e0       	ldi	r25, 0x04	; 4
    59e0:	a0 e0       	ldi	r26, 0x00	; 0
    59e2:	ed b7       	in	r30, 0x3d	; 61
    59e4:	fe b7       	in	r31, 0x3e	; 62
    59e6:	81 83       	std	Z+1, r24	; 0x01
    59e8:	92 83       	std	Z+2, r25	; 0x02
    59ea:	a3 83       	std	Z+3, r26	; 0x03
    59ec:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    59f0:	80 e0       	ldi	r24, 0x00	; 0
    59f2:	01 c0       	rjmp	.+2      	; 0x59f6 <i2c_rtc_write+0x6e>
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	2c 96       	adiw	r28, 0x0c	; 12
    59f8:	e4 e0       	ldi	r30, 0x04	; 4
    59fa:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

000059fe <i2c_rtc_read>:
    59fe:	a4 e0       	ldi	r26, 0x04	; 4
    5a00:	b0 e0       	ldi	r27, 0x00	; 0
    5a02:	e5 e0       	ldi	r30, 0x05	; 5
    5a04:	fd e2       	ldi	r31, 0x2D	; 45
    5a06:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
    5a0a:	6c 83       	std	Y+4, r22	; 0x04
    5a0c:	9f ef       	ldi	r25, 0xFF	; 255
    5a0e:	92 0f       	add	r25, r18
    5a10:	98 30       	cpi	r25, 0x08	; 8
    5a12:	f8 f4       	brcc	.+62     	; 0x5a52 <i2c_rtc_read+0x54>
    5a14:	02 2f       	mov	r16, r18
    5a16:	7a 01       	movw	r14, r20
    5a18:	18 2f       	mov	r17, r24
    5a1a:	21 e0       	ldi	r18, 0x01	; 1
    5a1c:	ae 01       	movw	r20, r28
    5a1e:	4c 5f       	subi	r20, 0xFC	; 252
    5a20:	5f 4f       	sbci	r21, 0xFF	; 255
    5a22:	60 e0       	ldi	r22, 0x00	; 0
    5a24:	33 dd       	rcall	.-1434   	; 0x548c <i2c_fn>
    5a26:	81 11       	cpse	r24, r1
    5a28:	03 c0       	rjmp	.+6      	; 0x5a30 <i2c_rtc_read+0x32>
    5a2a:	86 ed       	ldi	r24, 0xD6	; 214
    5a2c:	94 e0       	ldi	r25, 0x04	; 4
    5a2e:	09 c0       	rjmp	.+18     	; 0x5a42 <i2c_rtc_read+0x44>
    5a30:	20 2f       	mov	r18, r16
    5a32:	a7 01       	movw	r20, r14
    5a34:	61 e0       	ldi	r22, 0x01	; 1
    5a36:	81 2f       	mov	r24, r17
    5a38:	29 dd       	rcall	.-1454   	; 0x548c <i2c_fn>
    5a3a:	81 11       	cpse	r24, r1
    5a3c:	0c c0       	rjmp	.+24     	; 0x5a56 <i2c_rtc_read+0x58>
    5a3e:	8d eb       	ldi	r24, 0xBD	; 189
    5a40:	94 e0       	ldi	r25, 0x04	; 4
    5a42:	a0 e0       	ldi	r26, 0x00	; 0
    5a44:	ed b7       	in	r30, 0x3d	; 61
    5a46:	fe b7       	in	r31, 0x3e	; 62
    5a48:	81 83       	std	Z+1, r24	; 0x01
    5a4a:	92 83       	std	Z+2, r25	; 0x02
    5a4c:	a3 83       	std	Z+3, r26	; 0x03
    5a4e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5a52:	80 e0       	ldi	r24, 0x00	; 0
    5a54:	01 c0       	rjmp	.+2      	; 0x5a58 <i2c_rtc_read+0x5a>
    5a56:	81 e0       	ldi	r24, 0x01	; 1
    5a58:	24 96       	adiw	r28, 0x04	; 4
    5a5a:	e6 e0       	ldi	r30, 0x06	; 6
    5a5c:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00005a60 <i2c_rtc_init>:
    5a60:	60 ea       	ldi	r22, 0xA0	; 160
    5a62:	76 e8       	ldi	r23, 0x86	; 134
    5a64:	81 e0       	ldi	r24, 0x01	; 1
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	18 cc       	rjmp	.-2000   	; 0x529a <i2c_init>
    5a6a:	08 95       	ret

00005a6c <rtc_write>:
    5a6c:	ab e0       	ldi	r26, 0x0B	; 11
    5a6e:	b0 e0       	ldi	r27, 0x00	; 0
    5a70:	ec e3       	ldi	r30, 0x3C	; 60
    5a72:	fd e2       	ldi	r31, 0x2D	; 45
    5a74:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    5a78:	8c 01       	movw	r16, r24
    5a7a:	fc 01       	movw	r30, r24
    5a7c:	80 81       	ld	r24, Z
    5a7e:	74 df       	rcall	.-280    	; 0x5968 <BINtoBCD>
    5a80:	8f 77       	andi	r24, 0x7F	; 127
    5a82:	8c 83       	std	Y+4, r24	; 0x04
    5a84:	f8 01       	movw	r30, r16
    5a86:	82 81       	ldd	r24, Z+2	; 0x02
    5a88:	6f df       	rcall	.-290    	; 0x5968 <BINtoBCD>
    5a8a:	8f 77       	andi	r24, 0x7F	; 127
    5a8c:	8d 83       	std	Y+5, r24	; 0x05
    5a8e:	f8 01       	movw	r30, r16
    5a90:	84 81       	ldd	r24, Z+4	; 0x04
    5a92:	6a df       	rcall	.-300    	; 0x5968 <BINtoBCD>
    5a94:	8f 73       	andi	r24, 0x3F	; 63
    5a96:	8e 83       	std	Y+6, r24	; 0x06
    5a98:	f8 01       	movw	r30, r16
    5a9a:	84 85       	ldd	r24, Z+12	; 0x0c
    5a9c:	87 70       	andi	r24, 0x07	; 7
    5a9e:	8f 5f       	subi	r24, 0xFF	; 255
    5aa0:	8f 83       	std	Y+7, r24	; 0x07
    5aa2:	86 81       	ldd	r24, Z+6	; 0x06
    5aa4:	61 df       	rcall	.-318    	; 0x5968 <BINtoBCD>
    5aa6:	8f 73       	andi	r24, 0x3F	; 63
    5aa8:	88 87       	std	Y+8, r24	; 0x08
    5aaa:	f8 01       	movw	r30, r16
    5aac:	80 85       	ldd	r24, Z+8	; 0x08
    5aae:	8f 5f       	subi	r24, 0xFF	; 255
    5ab0:	5b df       	rcall	.-330    	; 0x5968 <BINtoBCD>
    5ab2:	8f 71       	andi	r24, 0x1F	; 31
    5ab4:	89 87       	std	Y+9, r24	; 0x09
    5ab6:	f8 01       	movw	r30, r16
    5ab8:	82 85       	ldd	r24, Z+10	; 0x0a
    5aba:	84 56       	subi	r24, 0x64	; 100
    5abc:	55 df       	rcall	.-342    	; 0x5968 <BINtoBCD>
    5abe:	8a 87       	std	Y+10, r24	; 0x0a
    5ac0:	83 e9       	ldi	r24, 0x93	; 147
    5ac2:	8b 87       	std	Y+11, r24	; 0x0b
    5ac4:	28 e0       	ldi	r18, 0x08	; 8
    5ac6:	ae 01       	movw	r20, r28
    5ac8:	4c 5f       	subi	r20, 0xFC	; 252
    5aca:	5f 4f       	sbci	r21, 0xFF	; 255
    5acc:	60 e0       	ldi	r22, 0x00	; 0
    5ace:	88 e6       	ldi	r24, 0x68	; 104
    5ad0:	5b df       	rcall	.-330    	; 0x5988 <i2c_rtc_write>
    5ad2:	81 11       	cpse	r24, r1
    5ad4:	0c c0       	rjmp	.+24     	; 0x5aee <rtc_write+0x82>
    5ad6:	8c ea       	ldi	r24, 0xAC	; 172
    5ad8:	94 e0       	ldi	r25, 0x04	; 4
    5ada:	a0 e0       	ldi	r26, 0x00	; 0
    5adc:	ed b7       	in	r30, 0x3d	; 61
    5ade:	fe b7       	in	r31, 0x3e	; 62
    5ae0:	81 83       	std	Z+1, r24	; 0x01
    5ae2:	92 83       	std	Z+2, r25	; 0x02
    5ae4:	a3 83       	std	Z+3, r26	; 0x03
    5ae6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5aea:	80 e0       	ldi	r24, 0x00	; 0
    5aec:	01 c0       	rjmp	.+2      	; 0x5af0 <rtc_write+0x84>
    5aee:	81 e0       	ldi	r24, 0x01	; 1
    5af0:	2b 96       	adiw	r28, 0x0b	; 11
    5af2:	e4 e0       	ldi	r30, 0x04	; 4
    5af4:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00005af8 <rtc_read>:
    5af8:	ab e0       	ldi	r26, 0x0B	; 11
    5afa:	b0 e0       	ldi	r27, 0x00	; 0
    5afc:	e2 e8       	ldi	r30, 0x82	; 130
    5afe:	fd e2       	ldi	r31, 0x2D	; 45
    5b00:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    5b04:	8c 01       	movw	r16, r24
    5b06:	28 e0       	ldi	r18, 0x08	; 8
    5b08:	ae 01       	movw	r20, r28
    5b0a:	4c 5f       	subi	r20, 0xFC	; 252
    5b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b0e:	60 e0       	ldi	r22, 0x00	; 0
    5b10:	88 e6       	ldi	r24, 0x68	; 104
    5b12:	75 df       	rcall	.-278    	; 0x59fe <i2c_rtc_read>
    5b14:	81 11       	cpse	r24, r1
    5b16:	0c c0       	rjmp	.+24     	; 0x5b30 <rtc_read+0x38>
    5b18:	8c e9       	ldi	r24, 0x9C	; 156
    5b1a:	94 e0       	ldi	r25, 0x04	; 4
    5b1c:	a0 e0       	ldi	r26, 0x00	; 0
    5b1e:	ed b7       	in	r30, 0x3d	; 61
    5b20:	fe b7       	in	r31, 0x3e	; 62
    5b22:	81 83       	std	Z+1, r24	; 0x01
    5b24:	92 83       	std	Z+2, r25	; 0x02
    5b26:	a3 83       	std	Z+3, r26	; 0x03
    5b28:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5b2c:	80 e0       	ldi	r24, 0x00	; 0
    5b2e:	33 c0       	rjmp	.+102    	; 0x5b96 <rtc_read+0x9e>
    5b30:	8c 81       	ldd	r24, Y+4	; 0x04
    5b32:	8f 77       	andi	r24, 0x7F	; 127
    5b34:	20 df       	rcall	.-448    	; 0x5976 <BCDtoBIN>
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	f8 01       	movw	r30, r16
    5b3a:	91 83       	std	Z+1, r25	; 0x01
    5b3c:	80 83       	st	Z, r24
    5b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b40:	8f 77       	andi	r24, 0x7F	; 127
    5b42:	19 df       	rcall	.-462    	; 0x5976 <BCDtoBIN>
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	f8 01       	movw	r30, r16
    5b48:	93 83       	std	Z+3, r25	; 0x03
    5b4a:	82 83       	std	Z+2, r24	; 0x02
    5b4c:	8e 81       	ldd	r24, Y+6	; 0x06
    5b4e:	8f 73       	andi	r24, 0x3F	; 63
    5b50:	12 df       	rcall	.-476    	; 0x5976 <BCDtoBIN>
    5b52:	90 e0       	ldi	r25, 0x00	; 0
    5b54:	f8 01       	movw	r30, r16
    5b56:	95 83       	std	Z+5, r25	; 0x05
    5b58:	84 83       	std	Z+4, r24	; 0x04
    5b5a:	8f 81       	ldd	r24, Y+7	; 0x07
    5b5c:	87 70       	andi	r24, 0x07	; 7
    5b5e:	90 e0       	ldi	r25, 0x00	; 0
    5b60:	01 97       	sbiw	r24, 0x01	; 1
    5b62:	95 87       	std	Z+13, r25	; 0x0d
    5b64:	84 87       	std	Z+12, r24	; 0x0c
    5b66:	88 85       	ldd	r24, Y+8	; 0x08
    5b68:	8f 73       	andi	r24, 0x3F	; 63
    5b6a:	05 df       	rcall	.-502    	; 0x5976 <BCDtoBIN>
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	f8 01       	movw	r30, r16
    5b70:	97 83       	std	Z+7, r25	; 0x07
    5b72:	86 83       	std	Z+6, r24	; 0x06
    5b74:	89 85       	ldd	r24, Y+9	; 0x09
    5b76:	8f 71       	andi	r24, 0x1F	; 31
    5b78:	fe de       	rcall	.-516    	; 0x5976 <BCDtoBIN>
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	01 97       	sbiw	r24, 0x01	; 1
    5b7e:	f8 01       	movw	r30, r16
    5b80:	91 87       	std	Z+9, r25	; 0x09
    5b82:	80 87       	std	Z+8, r24	; 0x08
    5b84:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b86:	f7 de       	rcall	.-530    	; 0x5976 <BCDtoBIN>
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	8c 59       	subi	r24, 0x9C	; 156
    5b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b8e:	f8 01       	movw	r30, r16
    5b90:	93 87       	std	Z+11, r25	; 0x0b
    5b92:	82 87       	std	Z+10, r24	; 0x0a
    5b94:	81 e0       	ldi	r24, 0x01	; 1
    5b96:	2b 96       	adiw	r28, 0x0b	; 11
    5b98:	e4 e0       	ldi	r30, 0x04	; 4
    5b9a:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00005b9e <rtc_run>:
    5b9e:	a4 e0       	ldi	r26, 0x04	; 4
    5ba0:	b0 e0       	ldi	r27, 0x00	; 0
    5ba2:	e5 ed       	ldi	r30, 0xD5	; 213
    5ba4:	fd e2       	ldi	r31, 0x2D	; 45
    5ba6:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    5baa:	8c 01       	movw	r16, r24
    5bac:	21 e0       	ldi	r18, 0x01	; 1
    5bae:	ae 01       	movw	r20, r28
    5bb0:	4c 5f       	subi	r20, 0xFC	; 252
    5bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    5bb4:	60 e0       	ldi	r22, 0x00	; 0
    5bb6:	88 e6       	ldi	r24, 0x68	; 104
    5bb8:	22 df       	rcall	.-444    	; 0x59fe <i2c_rtc_read>
    5bba:	81 11       	cpse	r24, r1
    5bbc:	03 c0       	rjmp	.+6      	; 0x5bc4 <rtc_run+0x26>
    5bbe:	88 e8       	ldi	r24, 0x88	; 136
    5bc0:	94 e0       	ldi	r25, 0x04	; 4
    5bc2:	24 c0       	rjmp	.+72     	; 0x5c0c <rtc_run+0x6e>
    5bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    5bc6:	0f 3f       	cpi	r16, 0xFF	; 255
    5bc8:	ff ef       	ldi	r31, 0xFF	; 255
    5bca:	1f 07       	cpc	r17, r31
    5bcc:	59 f4       	brne	.+22     	; 0x5be4 <rtc_run+0x46>
    5bce:	08 2e       	mov	r0, r24
    5bd0:	00 0c       	add	r0, r0
    5bd2:	99 0b       	sbc	r25, r25
    5bd4:	80 95       	com	r24
    5bd6:	90 95       	com	r25
    5bd8:	89 2f       	mov	r24, r25
    5bda:	88 1f       	adc	r24, r24
    5bdc:	88 27       	eor	r24, r24
    5bde:	88 1f       	adc	r24, r24
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	20 c0       	rjmp	.+64     	; 0x5c24 <rtc_run+0x86>
    5be4:	8f 77       	andi	r24, 0x7F	; 127
    5be6:	01 15       	cp	r16, r1
    5be8:	11 05       	cpc	r17, r1
    5bea:	11 f4       	brne	.+4      	; 0x5bf0 <rtc_run+0x52>
    5bec:	90 e8       	ldi	r25, 0x80	; 128
    5bee:	01 c0       	rjmp	.+2      	; 0x5bf2 <rtc_run+0x54>
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	89 2b       	or	r24, r25
    5bf4:	8c 83       	std	Y+4, r24	; 0x04
    5bf6:	21 e0       	ldi	r18, 0x01	; 1
    5bf8:	ae 01       	movw	r20, r28
    5bfa:	4c 5f       	subi	r20, 0xFC	; 252
    5bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    5bfe:	60 e0       	ldi	r22, 0x00	; 0
    5c00:	88 e6       	ldi	r24, 0x68	; 104
    5c02:	c2 de       	rcall	.-636    	; 0x5988 <i2c_rtc_write>
    5c04:	81 11       	cpse	r24, r1
    5c06:	0d c0       	rjmp	.+26     	; 0x5c22 <rtc_run+0x84>
    5c08:	83 e7       	ldi	r24, 0x73	; 115
    5c0a:	94 e0       	ldi	r25, 0x04	; 4
    5c0c:	a0 e0       	ldi	r26, 0x00	; 0
    5c0e:	ed b7       	in	r30, 0x3d	; 61
    5c10:	fe b7       	in	r31, 0x3e	; 62
    5c12:	81 83       	std	Z+1, r24	; 0x01
    5c14:	92 83       	std	Z+2, r25	; 0x02
    5c16:	a3 83       	std	Z+3, r26	; 0x03
    5c18:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5c1c:	8f ef       	ldi	r24, 0xFF	; 255
    5c1e:	9f ef       	ldi	r25, 0xFF	; 255
    5c20:	01 c0       	rjmp	.+2      	; 0x5c24 <rtc_run+0x86>
    5c22:	c8 01       	movw	r24, r16
    5c24:	24 96       	adiw	r28, 0x04	; 4
    5c26:	e4 e0       	ldi	r30, 0x04	; 4
    5c28:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00005c2c <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5c2c:	a7 e0       	ldi	r26, 0x07	; 7
    5c2e:	b0 e0       	ldi	r27, 0x00	; 0
    5c30:	ec e1       	ldi	r30, 0x1C	; 28
    5c32:	fe e2       	ldi	r31, 0x2E	; 46
    5c34:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    5c38:	8c 01       	movw	r16, r24
    5c3a:	4c 83       	std	Y+4, r20	; 0x04
    5c3c:	5d 83       	std	Y+5, r21	; 0x05
    5c3e:	6e 83       	std	Y+6, r22	; 0x06
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5c40:	7f 83       	std	Y+7, r23	; 0x07

    if(!force)
    5c42:	0e df       	rcall	.-484    	; 0x5a60 <i2c_rtc_init>
    5c44:	01 15       	cp	r16, r1
    5c46:	11 05       	cpc	r17, r1
    {
        state = rtc_run(-1);
    5c48:	39 f4       	brne	.+14     	; 0x5c58 <rtc_init+0x2c>
    5c4a:	8f ef       	ldi	r24, 0xFF	; 255
    5c4c:	9f ef       	ldi	r25, 0xFF	; 255
        if(state < 0)
    5c4e:	a7 df       	rcall	.-178    	; 0x5b9e <rtc_run>
    5c50:	87 fd       	sbrc	r24, 7
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5c52:	16 c0       	rjmp	.+44     	; 0x5c80 <rtc_init+0x54>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5c54:	81 11       	cpse	r24, r1
    5c56:	22 c0       	rjmp	.+68     	; 0x5c9c <rtc_init+0x70>
    5c58:	80 e0       	ldi	r24, 0x00	; 0
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5c5c:	a0 df       	rcall	.-192    	; 0x5b9e <rtc_run>
    5c5e:	97 fd       	sbrc	r25, 7
    5c60:	0f c0       	rjmp	.+30     	; 0x5c80 <rtc_init+0x54>
    5c62:	ce 01       	movw	r24, r28

        if(tmp == NULL || !rtc_write(tmp))
    5c64:	04 96       	adiw	r24, 0x04	; 4
    5c66:	a3 d6       	rcall	.+3398   	; 0x69ae <gmtime>
        {
            printf("rtc_init  write epoch failed\n");
    5c68:	00 97       	sbiw	r24, 0x00	; 0
    5c6a:	81 f4       	brne	.+32     	; 0x5c8c <rtc_init+0x60>
    5c6c:	85 e5       	ldi	r24, 0x55	; 85
    5c6e:	94 e0       	ldi	r25, 0x04	; 4
    5c70:	a0 e0       	ldi	r26, 0x00	; 0
    5c72:	ed b7       	in	r30, 0x3d	; 61
    5c74:	fe b7       	in	r31, 0x3e	; 62
    5c76:	81 83       	std	Z+1, r24	; 0x01
    5c78:	92 83       	std	Z+2, r25	; 0x02
    5c7a:	a3 83       	std	Z+3, r26	; 0x03
            rtc_ok = 0;
    5c7c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5c80:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <rtc_ok+0x1>
            return 0;
    5c84:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <rtc_ok>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5c88:	80 e0       	ldi	r24, 0x00	; 0
    5c8a:	0e c0       	rjmp	.+28     	; 0x5ca8 <rtc_init+0x7c>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5c8c:	ef de       	rcall	.-546    	; 0x5a6c <rtc_write>
    5c8e:	88 23       	and	r24, r24
    5c90:	69 f3       	breq	.-38     	; 0x5c6c <rtc_init+0x40>
    5c92:	81 e0       	ldi	r24, 0x01	; 1
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	83 df       	rcall	.-250    	; 0x5b9e <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5c98:	97 fd       	sbrc	r25, 7
    5c9a:	f2 cf       	rjmp	.-28     	; 0x5c80 <rtc_init+0x54>
    5c9c:	81 e0       	ldi	r24, 0x01	; 1
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	90 93 fa 19 	sts	0x19FA, r25	; 0x8019fa <rtc_ok+0x1>
    return 1;
}
    5ca4:	80 93 f9 19 	sts	0x19F9, r24	; 0x8019f9 <rtc_ok>
    5ca8:	27 96       	adiw	r28, 0x07	; 7
    5caa:	e4 e0       	ldi	r30, 0x04	; 4
    5cac:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00005cb0 <islower>:
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5cb0:	9c 01       	movw	r18, r24
    5cb2:	21 56       	subi	r18, 0x61	; 97
    5cb4:	31 09       	sbc	r19, r1
    5cb6:	81 e0       	ldi	r24, 0x01	; 1
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
    5cba:	2a 31       	cpi	r18, 0x1A	; 26
    5cbc:	31 05       	cpc	r19, r1
    5cbe:	10 f0       	brcs	.+4      	; 0x5cc4 <islower+0x14>
    5cc0:	80 e0       	ldi	r24, 0x00	; 0
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	08 95       	ret

00005cc6 <toupper>:
    5cc6:	cf 93       	push	r28
    5cc8:	df 93       	push	r29
    5cca:	ec 01       	movw	r28, r24
    5ccc:	f1 df       	rcall	.-30     	; 0x5cb0 <islower>
    5cce:	89 2b       	or	r24, r25
    5cd0:	19 f0       	breq	.+6      	; 0x5cd8 <toupper+0x12>
    5cd2:	ce 01       	movw	r24, r28
    5cd4:	80 97       	sbiw	r24, 0x20	; 32
    5cd6:	01 c0       	rjmp	.+2      	; 0x5cda <toupper+0x14>
    5cd8:	ce 01       	movw	r24, r28
    5cda:	df 91       	pop	r29
    5cdc:	cf 91       	pop	r28
    5cde:	08 95       	ret

00005ce0 <strcpy>:
    5ce0:	fc 01       	movw	r30, r24
    5ce2:	db 01       	movw	r26, r22
    5ce4:	2d 91       	ld	r18, X+
    5ce6:	bd 01       	movw	r22, r26
    5ce8:	01 96       	adiw	r24, 0x01	; 1
    5cea:	22 23       	and	r18, r18
    5cec:	11 f0       	breq	.+4      	; 0x5cf2 <strcpy+0x12>
    5cee:	20 83       	st	Z, r18
    5cf0:	f7 cf       	rjmp	.-18     	; 0x5ce0 <strcpy>
    5cf2:	10 82       	st	Z, r1
    5cf4:	08 95       	ret

00005cf6 <strncpy>:
    5cf6:	db 01       	movw	r26, r22
    5cf8:	fc 01       	movw	r30, r24
    5cfa:	2d 91       	ld	r18, X+
    5cfc:	21 11       	cpse	r18, r1
    5cfe:	03 c0       	rjmp	.+6      	; 0x5d06 <strncpy+0x10>
    5d00:	4e 0f       	add	r20, r30
    5d02:	5f 1f       	adc	r21, r31
    5d04:	08 c0       	rjmp	.+16     	; 0x5d16 <strncpy+0x20>
    5d06:	41 15       	cp	r20, r1
    5d08:	51 05       	cpc	r21, r1
    5d0a:	21 f0       	breq	.+8      	; 0x5d14 <strncpy+0x1e>
    5d0c:	21 93       	st	Z+, r18
    5d0e:	41 50       	subi	r20, 0x01	; 1
    5d10:	51 09       	sbc	r21, r1
    5d12:	f3 cf       	rjmp	.-26     	; 0x5cfa <strncpy+0x4>
    5d14:	08 95       	ret
    5d16:	4e 17       	cp	r20, r30
    5d18:	5f 07       	cpc	r21, r31
    5d1a:	11 f0       	breq	.+4      	; 0x5d20 <strncpy+0x2a>
    5d1c:	11 92       	st	Z+, r1
    5d1e:	fb cf       	rjmp	.-10     	; 0x5d16 <strncpy+0x20>
    5d20:	08 95       	ret

00005d22 <strcat>:
    5d22:	cf 93       	push	r28
    5d24:	df 93       	push	r29
    5d26:	d8 2f       	mov	r29, r24
    5d28:	c9 2f       	mov	r28, r25
    5d2a:	28 2f       	mov	r18, r24
    5d2c:	39 2f       	mov	r19, r25
    5d2e:	c9 01       	movw	r24, r18
    5d30:	2f 5f       	subi	r18, 0xFF	; 255
    5d32:	3f 4f       	sbci	r19, 0xFF	; 255
    5d34:	fc 01       	movw	r30, r24
    5d36:	40 81       	ld	r20, Z
    5d38:	41 11       	cpse	r20, r1
    5d3a:	f9 cf       	rjmp	.-14     	; 0x5d2e <strcat+0xc>
    5d3c:	d1 df       	rcall	.-94     	; 0x5ce0 <strcpy>
    5d3e:	8d 2f       	mov	r24, r29
    5d40:	9c 2f       	mov	r25, r28
    5d42:	df 91       	pop	r29
    5d44:	cf 91       	pop	r28
    5d46:	08 95       	ret

00005d48 <reverse>:
    5d48:	fc 01       	movw	r30, r24
    5d4a:	01 90       	ld	r0, Z+
    5d4c:	00 20       	and	r0, r0
    5d4e:	e9 f7       	brne	.-6      	; 0x5d4a <reverse+0x2>
    5d50:	31 97       	sbiw	r30, 0x01	; 1
    5d52:	e8 1b       	sub	r30, r24
    5d54:	f9 0b       	sbc	r31, r25
    5d56:	af 01       	movw	r20, r30
    5d58:	55 95       	asr	r21
    5d5a:	47 95       	ror	r20
    5d5c:	e8 0f       	add	r30, r24
    5d5e:	f9 1f       	adc	r31, r25
    5d60:	dc 01       	movw	r26, r24
    5d62:	9d 01       	movw	r18, r26
    5d64:	28 1b       	sub	r18, r24
    5d66:	39 0b       	sbc	r19, r25
    5d68:	24 17       	cp	r18, r20
    5d6a:	35 07       	cpc	r19, r21
    5d6c:	2c f4       	brge	.+10     	; 0x5d78 <reverse+0x30>
    5d6e:	22 91       	ld	r18, -Z
    5d70:	3c 91       	ld	r19, X
    5d72:	30 83       	st	Z, r19
    5d74:	2d 93       	st	X+, r18
    5d76:	f5 cf       	rjmp	.-22     	; 0x5d62 <reverse+0x1a>
    5d78:	08 95       	ret

00005d7a <strupper>:
    5d7a:	cf 93       	push	r28
    5d7c:	df 93       	push	r29
    5d7e:	ec 01       	movw	r28, r24
    5d80:	88 81       	ld	r24, Y
    5d82:	88 23       	and	r24, r24
    5d84:	21 f0       	breq	.+8      	; 0x5d8e <strupper+0x14>
    5d86:	90 e0       	ldi	r25, 0x00	; 0
    5d88:	9e df       	rcall	.-196    	; 0x5cc6 <toupper>
    5d8a:	89 93       	st	Y+, r24
    5d8c:	f9 cf       	rjmp	.-14     	; 0x5d80 <strupper+0x6>
    5d8e:	df 91       	pop	r29
    5d90:	cf 91       	pop	r28
    5d92:	08 95       	ret

00005d94 <strcmp>:
    5d94:	dc 01       	movw	r26, r24
    5d96:	fb 01       	movw	r30, r22
    5d98:	2d 91       	ld	r18, X+
    5d9a:	41 91       	ld	r20, Z+
    5d9c:	50 e0       	ldi	r21, 0x00	; 0
    5d9e:	30 e0       	ldi	r19, 0x00	; 0
    5da0:	c9 01       	movw	r24, r18
    5da2:	84 1b       	sub	r24, r20
    5da4:	95 0b       	sbc	r25, r21
    5da6:	11 f4       	brne	.+4      	; 0x5dac <strcmp+0x18>
    5da8:	45 2b       	or	r20, r21
    5daa:	b1 f7       	brne	.-20     	; 0x5d98 <strcmp+0x4>
    5dac:	08 95       	ret

00005dae <strcasecmp>:
    5dae:	ef 92       	push	r14
    5db0:	ff 92       	push	r15
    5db2:	0f 93       	push	r16
    5db4:	1f 93       	push	r17
    5db6:	cf 93       	push	r28
    5db8:	df 93       	push	r29
    5dba:	7c 01       	movw	r14, r24
    5dbc:	8b 01       	movw	r16, r22
    5dbe:	f7 01       	movw	r30, r14
    5dc0:	81 91       	ld	r24, Z+
    5dc2:	7f 01       	movw	r14, r30
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	7f df       	rcall	.-258    	; 0x5cc6 <toupper>
    5dc8:	ec 01       	movw	r28, r24
    5dca:	f8 01       	movw	r30, r16
    5dcc:	81 91       	ld	r24, Z+
    5dce:	8f 01       	movw	r16, r30
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	79 df       	rcall	.-270    	; 0x5cc6 <toupper>
    5dd4:	9c 01       	movw	r18, r24
    5dd6:	ce 01       	movw	r24, r28
    5dd8:	82 1b       	sub	r24, r18
    5dda:	93 0b       	sbc	r25, r19
    5ddc:	11 f4       	brne	.+4      	; 0x5de2 <strcasecmp+0x34>
    5dde:	23 2b       	or	r18, r19
    5de0:	71 f7       	brne	.-36     	; 0x5dbe <strcasecmp+0x10>
    5de2:	cd b7       	in	r28, 0x3d	; 61
    5de4:	de b7       	in	r29, 0x3e	; 62
    5de6:	e6 e0       	ldi	r30, 0x06	; 6
    5de8:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00005dec <strncasecmp>:
    5dec:	a0 e0       	ldi	r26, 0x00	; 0
    5dee:	b0 e0       	ldi	r27, 0x00	; 0
    5df0:	ec ef       	ldi	r30, 0xFC	; 252
    5df2:	fe e2       	ldi	r31, 0x2E	; 46
    5df4:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    5df8:	8c 01       	movw	r16, r24
    5dfa:	7b 01       	movw	r14, r22
    5dfc:	6c 01       	movw	r12, r24
    5dfe:	c4 0e       	add	r12, r20
    5e00:	d5 1e       	adc	r13, r21
    5e02:	0c 15       	cp	r16, r12
    5e04:	1d 05       	cpc	r17, r13
    5e06:	99 f0       	breq	.+38     	; 0x5e2e <strncasecmp+0x42>
    5e08:	f8 01       	movw	r30, r16
    5e0a:	81 91       	ld	r24, Z+
    5e0c:	8f 01       	movw	r16, r30
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	5a df       	rcall	.-332    	; 0x5cc6 <toupper>
    5e12:	ec 01       	movw	r28, r24
    5e14:	f7 01       	movw	r30, r14
    5e16:	81 91       	ld	r24, Z+
    5e18:	7f 01       	movw	r14, r30
    5e1a:	90 e0       	ldi	r25, 0x00	; 0
    5e1c:	54 df       	rcall	.-344    	; 0x5cc6 <toupper>
    5e1e:	9c 01       	movw	r18, r24
    5e20:	ce 01       	movw	r24, r28
    5e22:	82 1b       	sub	r24, r18
    5e24:	93 0b       	sbc	r25, r19
    5e26:	29 f4       	brne	.+10     	; 0x5e32 <strncasecmp+0x46>
    5e28:	23 2b       	or	r18, r19
    5e2a:	59 f7       	brne	.-42     	; 0x5e02 <strncasecmp+0x16>
    5e2c:	02 c0       	rjmp	.+4      	; 0x5e32 <strncasecmp+0x46>
    5e2e:	80 e0       	ldi	r24, 0x00	; 0
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	cd b7       	in	r28, 0x3d	; 61
    5e34:	de b7       	in	r29, 0x3e	; 62
    5e36:	e8 e0       	ldi	r30, 0x08	; 8
    5e38:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

00005e3c <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    5e3c:	0f 93       	push	r16
    5e3e:	1f 93       	push	r17
    5e40:	cf 93       	push	r28
    5e42:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    5e44:	00 97       	sbiw	r24, 0x00	; 0
    5e46:	99 f0       	breq	.+38     	; 0x5e6e <stralloc+0x32>
    5e48:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    5e4a:	fc 01       	movw	r30, r24
    5e4c:	01 90       	ld	r0, Z+
    5e4e:	00 20       	and	r0, r0
    5e50:	e9 f7       	brne	.-6      	; 0x5e4c <stralloc+0x10>
    5e52:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    5e54:	61 e0       	ldi	r22, 0x01	; 1
    5e56:	70 e0       	ldi	r23, 0x00	; 0
    5e58:	8c 1b       	sub	r24, r28
    5e5a:	9d 0b       	sbc	r25, r29
    5e5c:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
    5e60:	8c 01       	movw	r16, r24
    if(!ptr)
    5e62:	00 97       	sbiw	r24, 0x00	; 0
    5e64:	21 f0       	breq	.+8      	; 0x5e6e <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    5e66:	be 01       	movw	r22, r28
    5e68:	3b df       	rcall	.-394    	; 0x5ce0 <strcpy>
    return(ptr);
    5e6a:	c8 01       	movw	r24, r16
    5e6c:	02 c0       	rjmp	.+4      	; 0x5e72 <stralloc+0x36>
    5e6e:	80 e0       	ldi	r24, 0x00	; 0
    5e70:	90 e0       	ldi	r25, 0x00	; 0
}
    5e72:	df 91       	pop	r29
    5e74:	cf 91       	pop	r28
    5e76:	1f 91       	pop	r17
    5e78:	0f 91       	pop	r16
    5e7a:	08 95       	ret

00005e7c <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    5e7c:	00 d0       	rcall	.+0      	; 0x5e7e <sep+0x2>
    5e7e:	1f 92       	push	r1
    5e80:	82 e3       	ldi	r24, 0x32	; 50
    5e82:	95 e0       	ldi	r25, 0x05	; 5
    5e84:	a0 e0       	ldi	r26, 0x00	; 0
    5e86:	ed b7       	in	r30, 0x3d	; 61
    5e88:	fe b7       	in	r31, 0x3e	; 62
    5e8a:	81 83       	std	Z+1, r24	; 0x01
    5e8c:	92 83       	std	Z+2, r25	; 0x02
    5e8e:	a3 83       	std	Z+3, r26	; 0x03
    5e90:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5e94:	0f 90       	pop	r0
    5e96:	0f 90       	pop	r0
    5e98:	0f 90       	pop	r0
    5e9a:	08 95       	ret

00005e9c <trim_tail>:
    5e9c:	00 97       	sbiw	r24, 0x00	; 0
    5e9e:	69 f0       	breq	.+26     	; 0x5eba <trim_tail+0x1e>
    5ea0:	fc 01       	movw	r30, r24
    5ea2:	01 90       	ld	r0, Z+
    5ea4:	00 20       	and	r0, r0
    5ea6:	e9 f7       	brne	.-6      	; 0x5ea2 <trim_tail+0x6>
    5ea8:	31 97       	sbiw	r30, 0x01	; 1
    5eaa:	e8 17       	cp	r30, r24
    5eac:	f9 07       	cpc	r31, r25
    5eae:	29 f0       	breq	.+10     	; 0x5eba <trim_tail+0x1e>
    5eb0:	22 91       	ld	r18, -Z
    5eb2:	21 32       	cpi	r18, 0x21	; 33
    5eb4:	10 f4       	brcc	.+4      	; 0x5eba <trim_tail+0x1e>
    5eb6:	10 82       	st	Z, r1
    5eb8:	f8 cf       	rjmp	.-16     	; 0x5eaa <trim_tail+0xe>
    5eba:	08 95       	ret

00005ebc <skipspaces>:
    5ebc:	00 97       	sbiw	r24, 0x00	; 0
    5ebe:	39 f0       	breq	.+14     	; 0x5ece <skipspaces+0x12>
    5ec0:	fc 01       	movw	r30, r24
    5ec2:	cf 01       	movw	r24, r30
    5ec4:	21 91       	ld	r18, Z+
    5ec6:	20 32       	cpi	r18, 0x20	; 32
    5ec8:	e1 f3       	breq	.-8      	; 0x5ec2 <skipspaces+0x6>
    5eca:	29 30       	cpi	r18, 0x09	; 9
    5ecc:	d1 f3       	breq	.-12     	; 0x5ec2 <skipspaces+0x6>
    5ece:	08 95       	ret

00005ed0 <MATCH>:
    5ed0:	cf 93       	push	r28
    5ed2:	df 93       	push	r29
    5ed4:	fb 01       	movw	r30, r22
    5ed6:	01 90       	ld	r0, Z+
    5ed8:	00 20       	and	r0, r0
    5eda:	e9 f7       	brne	.-6      	; 0x5ed6 <MATCH+0x6>
    5edc:	31 97       	sbiw	r30, 0x01	; 1
    5ede:	ef 01       	movw	r28, r30
    5ee0:	c6 1b       	sub	r28, r22
    5ee2:	d7 0b       	sbc	r29, r23
    5ee4:	57 df       	rcall	.-338    	; 0x5d94 <strcmp>
    5ee6:	89 2b       	or	r24, r25
    5ee8:	11 f4       	brne	.+4      	; 0x5eee <MATCH+0x1e>
    5eea:	ce 01       	movw	r24, r28
    5eec:	02 c0       	rjmp	.+4      	; 0x5ef2 <MATCH+0x22>
    5eee:	80 e0       	ldi	r24, 0x00	; 0
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	df 91       	pop	r29
    5ef4:	cf 91       	pop	r28
    5ef6:	08 95       	ret

00005ef8 <MATCHI>:
    5ef8:	cf 93       	push	r28
    5efa:	df 93       	push	r29
    5efc:	fb 01       	movw	r30, r22
    5efe:	01 90       	ld	r0, Z+
    5f00:	00 20       	and	r0, r0
    5f02:	e9 f7       	brne	.-6      	; 0x5efe <MATCHI+0x6>
    5f04:	31 97       	sbiw	r30, 0x01	; 1
    5f06:	ef 01       	movw	r28, r30
    5f08:	c6 1b       	sub	r28, r22
    5f0a:	d7 0b       	sbc	r29, r23
    5f0c:	50 df       	rcall	.-352    	; 0x5dae <strcasecmp>
    5f0e:	89 2b       	or	r24, r25
    5f10:	11 f4       	brne	.+4      	; 0x5f16 <MATCHI+0x1e>
    5f12:	ce 01       	movw	r24, r28
    5f14:	02 c0       	rjmp	.+4      	; 0x5f1a <MATCHI+0x22>
    5f16:	80 e0       	ldi	r24, 0x00	; 0
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	df 91       	pop	r29
    5f1c:	cf 91       	pop	r28
    5f1e:	08 95       	ret

00005f20 <MATCHARGS>:
    5f20:	a9 e0       	ldi	r26, 0x09	; 9
    5f22:	b0 e0       	ldi	r27, 0x00	; 0
    5f24:	e6 e9       	ldi	r30, 0x96	; 150
    5f26:	ff e2       	ldi	r31, 0x2F	; 47
    5f28:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
    5f2c:	eb 01       	movw	r28, r22
    5f2e:	8a 01       	movw	r16, r20
    5f30:	79 01       	movw	r14, r18
    5f32:	e2 df       	rcall	.-60     	; 0x5ef8 <MATCHI>
    5f34:	00 97       	sbiw	r24, 0x00	; 0
    5f36:	c1 f0       	breq	.+48     	; 0x5f68 <MATCHARGS+0x48>
    5f38:	e0 16       	cp	r14, r16
    5f3a:	f1 06       	cpc	r15, r17
    5f3c:	9c f4       	brge	.+38     	; 0x5f64 <MATCHARGS+0x44>
    5f3e:	ed b7       	in	r30, 0x3d	; 61
    5f40:	fe b7       	in	r31, 0x3e	; 62
    5f42:	f1 86       	std	Z+9, r15	; 0x09
    5f44:	e0 86       	std	Z+8, r14	; 0x08
    5f46:	17 83       	std	Z+7, r17	; 0x07
    5f48:	06 83       	std	Z+6, r16	; 0x06
    5f4a:	d5 83       	std	Z+5, r29	; 0x05
    5f4c:	c4 83       	std	Z+4, r28	; 0x04
    5f4e:	8c e0       	ldi	r24, 0x0C	; 12
    5f50:	95 e0       	ldi	r25, 0x05	; 5
    5f52:	a0 e0       	ldi	r26, 0x00	; 0
    5f54:	81 83       	std	Z+1, r24	; 0x01
    5f56:	92 83       	std	Z+2, r25	; 0x02
    5f58:	a3 83       	std	Z+3, r26	; 0x03
    5f5a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    5f5e:	80 e0       	ldi	r24, 0x00	; 0
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	02 c0       	rjmp	.+4      	; 0x5f68 <MATCHARGS+0x48>
    5f64:	81 e0       	ldi	r24, 0x01	; 1
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	cd b7       	in	r28, 0x3d	; 61
    5f6a:	de b7       	in	r29, 0x3e	; 62
    5f6c:	29 96       	adiw	r28, 0x09	; 9
    5f6e:	e6 e0       	ldi	r30, 0x06	; 6
    5f70:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00005f74 <MATCHI_LEN>:
    5f74:	cf 93       	push	r28
    5f76:	df 93       	push	r29
    5f78:	00 97       	sbiw	r24, 0x00	; 0
    5f7a:	89 f0       	breq	.+34     	; 0x5f9e <MATCHI_LEN+0x2a>
    5f7c:	61 15       	cp	r22, r1
    5f7e:	71 05       	cpc	r23, r1
    5f80:	71 f0       	breq	.+28     	; 0x5f9e <MATCHI_LEN+0x2a>
    5f82:	eb 01       	movw	r28, r22
    5f84:	09 90       	ld	r0, Y+
    5f86:	00 20       	and	r0, r0
    5f88:	e9 f7       	brne	.-6      	; 0x5f84 <MATCHI_LEN+0x10>
    5f8a:	21 97       	sbiw	r28, 0x01	; 1
    5f8c:	c6 1b       	sub	r28, r22
    5f8e:	d7 0b       	sbc	r29, r23
    5f90:	31 f0       	breq	.+12     	; 0x5f9e <MATCHI_LEN+0x2a>
    5f92:	ae 01       	movw	r20, r28
    5f94:	2b df       	rcall	.-426    	; 0x5dec <strncasecmp>
    5f96:	89 2b       	or	r24, r25
    5f98:	11 f4       	brne	.+4      	; 0x5f9e <MATCHI_LEN+0x2a>
    5f9a:	ce 01       	movw	r24, r28
    5f9c:	02 c0       	rjmp	.+4      	; 0x5fa2 <MATCHI_LEN+0x2e>
    5f9e:	80 e0       	ldi	r24, 0x00	; 0
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	df 91       	pop	r29
    5fa4:	cf 91       	pop	r28
    5fa6:	08 95       	ret

00005fa8 <split_args>:
    5fa8:	a0 e0       	ldi	r26, 0x00	; 0
    5faa:	b0 e0       	ldi	r27, 0x00	; 0
    5fac:	ea ed       	ldi	r30, 0xDA	; 218
    5fae:	ff e2       	ldi	r31, 0x2F	; 47
    5fb0:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    5fb4:	dc 01       	movw	r26, r24
    5fb6:	6a 01       	movw	r12, r20
    5fb8:	8b 01       	movw	r16, r22
    5fba:	fb 01       	movw	r30, r22
    5fbc:	80 e0       	ldi	r24, 0x00	; 0
    5fbe:	90 e0       	ldi	r25, 0x00	; 0
    5fc0:	8c 15       	cp	r24, r12
    5fc2:	9d 05       	cpc	r25, r13
    5fc4:	24 f4       	brge	.+8      	; 0x5fce <split_args+0x26>
    5fc6:	11 92       	st	Z+, r1
    5fc8:	11 92       	st	Z+, r1
    5fca:	01 96       	adiw	r24, 0x01	; 1
    5fcc:	f9 cf       	rjmp	.-14     	; 0x5fc0 <split_args+0x18>
    5fce:	c1 14       	cp	r12, r1
    5fd0:	d1 04       	cpc	r13, r1
    5fd2:	d9 f1       	breq	.+118    	; 0x604a <split_args+0xa2>
    5fd4:	10 97       	sbiw	r26, 0x00	; 0
    5fd6:	c9 f1       	breq	.+114    	; 0x604a <split_args+0xa2>
    5fd8:	ee 24       	eor	r14, r14
    5fda:	e3 94       	inc	r14
    5fdc:	f1 2c       	mov	r15, r1
    5fde:	c0 e0       	ldi	r28, 0x00	; 0
    5fe0:	d0 e0       	ldi	r29, 0x00	; 0
    5fe2:	8c 91       	ld	r24, X
    5fe4:	88 23       	and	r24, r24
    5fe6:	b1 f1       	breq	.+108    	; 0x6054 <split_args+0xac>
    5fe8:	cc 15       	cp	r28, r12
    5fea:	dd 05       	cpc	r29, r13
    5fec:	9c f5       	brge	.+102    	; 0x6054 <split_args+0xac>
    5fee:	cd 01       	movw	r24, r26
    5ff0:	65 df       	rcall	.-310    	; 0x5ebc <skipspaces>
    5ff2:	dc 01       	movw	r26, r24
    5ff4:	2c 91       	ld	r18, X
    5ff6:	22 23       	and	r18, r18
    5ff8:	69 f1       	breq	.+90     	; 0x6054 <split_args+0xac>
    5ffa:	22 32       	cpi	r18, 0x22	; 34
    5ffc:	79 f4       	brne	.+30     	; 0x601c <split_args+0x74>
    5ffe:	fc 01       	movw	r30, r24
    6000:	31 96       	adiw	r30, 0x01	; 1
    6002:	d8 01       	movw	r26, r16
    6004:	ed 93       	st	X+, r30
    6006:	fc 93       	st	X, r31
    6008:	df 01       	movw	r26, r30
    600a:	80 81       	ld	r24, Z
    600c:	31 96       	adiw	r30, 0x01	; 1
    600e:	88 23       	and	r24, r24
    6010:	a9 f0       	breq	.+42     	; 0x603c <split_args+0x94>
    6012:	82 32       	cpi	r24, 0x22	; 34
    6014:	c9 f7       	brne	.-14     	; 0x6008 <split_args+0x60>
    6016:	1c 92       	st	X, r1
    6018:	df 01       	movw	r26, r30
    601a:	10 c0       	rjmp	.+32     	; 0x603c <split_args+0x94>
    601c:	f8 01       	movw	r30, r16
    601e:	91 83       	std	Z+1, r25	; 0x01
    6020:	80 83       	st	Z, r24
    6022:	fc 01       	movw	r30, r24
    6024:	2e 2f       	mov	r18, r30
    6026:	9f 2f       	mov	r25, r31
    6028:	81 91       	ld	r24, Z+
    602a:	3f ed       	ldi	r19, 0xDF	; 223
    602c:	38 0f       	add	r19, r24
    602e:	3e 35       	cpi	r19, 0x5E	; 94
    6030:	c8 f3       	brcs	.-14     	; 0x6024 <split_args+0x7c>
    6032:	88 23       	and	r24, r24
    6034:	69 f0       	breq	.+26     	; 0x6050 <split_args+0xa8>
    6036:	a2 2f       	mov	r26, r18
    6038:	b9 2f       	mov	r27, r25
    603a:	1d 92       	st	X+, r1
    603c:	21 96       	adiw	r28, 0x01	; 1
    603e:	ff ef       	ldi	r31, 0xFF	; 255
    6040:	ef 1a       	sub	r14, r31
    6042:	ff 0a       	sbc	r15, r31
    6044:	0e 5f       	subi	r16, 0xFE	; 254
    6046:	1f 4f       	sbci	r17, 0xFF	; 255
    6048:	cc cf       	rjmp	.-104    	; 0x5fe2 <split_args+0x3a>
    604a:	80 e0       	ldi	r24, 0x00	; 0
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	03 c0       	rjmp	.+6      	; 0x6056 <split_args+0xae>
    6050:	c7 01       	movw	r24, r14
    6052:	01 c0       	rjmp	.+2      	; 0x6056 <split_args+0xae>
    6054:	ce 01       	movw	r24, r28
    6056:	cd b7       	in	r28, 0x3d	; 61
    6058:	de b7       	in	r29, 0x3e	; 62
    605a:	e8 e0       	ldi	r30, 0x08	; 8
    605c:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

00006060 <get_token>:
    6060:	ef 92       	push	r14
    6062:	ff 92       	push	r15
    6064:	0f 93       	push	r16
    6066:	1f 93       	push	r17
    6068:	cf 93       	push	r28
    606a:	df 93       	push	r29
    606c:	eb 01       	movw	r28, r22
    606e:	8a 01       	movw	r16, r20
    6070:	18 82       	st	Y, r1
    6072:	00 97       	sbiw	r24, 0x00	; 0
    6074:	89 f1       	breq	.+98     	; 0x60d8 <get_token+0x78>
    6076:	fc 01       	movw	r30, r24
    6078:	20 81       	ld	r18, Z
    607a:	22 23       	and	r18, r18
    607c:	79 f1       	breq	.+94     	; 0x60dc <get_token+0x7c>
    607e:	1e df       	rcall	.-452    	; 0x5ebc <skipspaces>
    6080:	7c 01       	movw	r14, r24
    6082:	0c df       	rcall	.-488    	; 0x5e9c <trim_tail>
    6084:	f7 01       	movw	r30, r14
    6086:	cf 01       	movw	r24, r30
    6088:	21 91       	ld	r18, Z+
    608a:	21 32       	cpi	r18, 0x21	; 33
    608c:	e0 f0       	brcs	.+56     	; 0x60c6 <get_token+0x66>
    608e:	10 16       	cp	r1, r16
    6090:	11 06       	cpc	r1, r17
    6092:	cc f4       	brge	.+50     	; 0x60c6 <get_token+0x66>
    6094:	22 32       	cpi	r18, 0x22	; 34
    6096:	79 f4       	brne	.+30     	; 0x60b6 <get_token+0x56>
    6098:	fc 01       	movw	r30, r24
    609a:	31 96       	adiw	r30, 0x01	; 1
    609c:	0c 0f       	add	r16, r28
    609e:	1d 1f       	adc	r17, r29
    60a0:	cf 01       	movw	r24, r30
    60a2:	21 91       	ld	r18, Z+
    60a4:	22 23       	and	r18, r18
    60a6:	79 f0       	breq	.+30     	; 0x60c6 <get_token+0x66>
    60a8:	22 32       	cpi	r18, 0x22	; 34
    60aa:	59 f0       	breq	.+22     	; 0x60c2 <get_token+0x62>
    60ac:	c0 17       	cp	r28, r16
    60ae:	d1 07       	cpc	r29, r17
    60b0:	51 f0       	breq	.+20     	; 0x60c6 <get_token+0x66>
    60b2:	29 93       	st	Y+, r18
    60b4:	f5 cf       	rjmp	.-22     	; 0x60a0 <get_token+0x40>
    60b6:	2c 32       	cpi	r18, 0x2C	; 44
    60b8:	31 f0       	breq	.+12     	; 0x60c6 <get_token+0x66>
    60ba:	29 93       	st	Y+, r18
    60bc:	01 50       	subi	r16, 0x01	; 1
    60be:	11 09       	sbc	r17, r1
    60c0:	e2 cf       	rjmp	.-60     	; 0x6086 <get_token+0x26>
    60c2:	cf 01       	movw	r24, r30
    60c4:	18 82       	st	Y, r1
    60c6:	fa de       	rcall	.-524    	; 0x5ebc <skipspaces>
    60c8:	fc 01       	movw	r30, r24
    60ca:	80 81       	ld	r24, Z
    60cc:	8c 32       	cpi	r24, 0x2C	; 44
    60ce:	09 f4       	brne	.+2      	; 0x60d2 <get_token+0x72>
    60d0:	31 96       	adiw	r30, 0x01	; 1
    60d2:	18 82       	st	Y, r1
    60d4:	cf 01       	movw	r24, r30
    60d6:	02 c0       	rjmp	.+4      	; 0x60dc <get_token+0x7c>
    60d8:	80 e0       	ldi	r24, 0x00	; 0
    60da:	90 e0       	ldi	r25, 0x00	; 0
    60dc:	cd b7       	in	r28, 0x3d	; 61
    60de:	de b7       	in	r29, 0x3e	; 62
    60e0:	e6 e0       	ldi	r30, 0x06	; 6
    60e2:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

000060e6 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    60e6:	a2 e0       	ldi	r26, 0x02	; 2
    60e8:	b0 e0       	ldi	r27, 0x00	; 0
    60ea:	e9 e7       	ldi	r30, 0x79	; 121
    60ec:	f0 e3       	ldi	r31, 0x30	; 48
    60ee:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    60f2:	00 97       	sbiw	r24, 0x00	; 0
    60f4:	79 f1       	breq	.+94     	; 0x6154 <get_value+0x6e>
    60f6:	fc 01       	movw	r30, r24
    60f8:	20 81       	ld	r18, Z
    60fa:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    60fc:	59 f1       	breq	.+86     	; 0x6154 <get_value+0x6e>
    60fe:	de de       	rcall	.-580    	; 0x5ebc <skipspaces>
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6100:	8c 01       	movw	r16, r24
    6102:	6a e2       	ldi	r22, 0x2A	; 42
    6104:	73 e0       	ldi	r23, 0x03	; 3
    6106:	36 df       	rcall	.-404    	; 0x5f74 <MATCHI_LEN>
    6108:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    610a:	29 f0       	breq	.+10     	; 0x6116 <get_value+0x30>
    610c:	08 0f       	add	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    610e:	19 1f       	adc	r17, r25
    6110:	40 e1       	ldi	r20, 0x10	; 16
    6112:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6114:	18 c0       	rjmp	.+48     	; 0x6146 <get_value+0x60>
    6116:	6d e2       	ldi	r22, 0x2D	; 45
    6118:	73 e0       	ldi	r23, 0x03	; 3
    611a:	c8 01       	movw	r24, r16
    611c:	2b df       	rcall	.-426    	; 0x5f74 <MATCHI_LEN>
    611e:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    6120:	29 f0       	breq	.+10     	; 0x612c <get_value+0x46>
    6122:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6124:	19 1f       	adc	r17, r25
    6126:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6128:	50 e0       	ldi	r21, 0x00	; 0
    612a:	0d c0       	rjmp	.+26     	; 0x6146 <get_value+0x60>
    612c:	60 e3       	ldi	r22, 0x30	; 48
    612e:	73 e0       	ldi	r23, 0x03	; 3
    6130:	c8 01       	movw	r24, r16
    6132:	20 df       	rcall	.-448    	; 0x5f74 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    6134:	00 97       	sbiw	r24, 0x00	; 0
    6136:	29 f0       	breq	.+10     	; 0x6142 <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6138:	08 0f       	add	r16, r24
    613a:	19 1f       	adc	r17, r25
    613c:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    613e:	50 e0       	ldi	r21, 0x00	; 0
    6140:	02 c0       	rjmp	.+4      	; 0x6146 <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6142:	4a e0       	ldi	r20, 0x0A	; 10
    6144:	50 e0       	ldi	r21, 0x00	; 0
    6146:	be 01       	movw	r22, r28
    6148:	6f 5f       	subi	r22, 0xFF	; 255
    614a:	7f 4f       	sbci	r23, 0xFF	; 255
    614c:	c8 01       	movw	r24, r16
    614e:	0e 94 ad 43 	call	0x875a	; 0x875a <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6152:	03 c0       	rjmp	.+6      	; 0x615a <get_value+0x74>
    6154:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6156:	70 e0       	ldi	r23, 0x00	; 0
    6158:	cb 01       	movw	r24, r22
    615a:	22 96       	adiw	r28, 0x02	; 2
    615c:	e4 e0       	ldi	r30, 0x04	; 4
    615e:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00006162 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6162:	78 94       	sei
    6164:	08 95       	ret

00006166 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6166:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6168:	89 e0       	ldi	r24, 0x09	; 9
    616a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    616e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    6172:	8f e1       	ldi	r24, 0x1F	; 31
    6174:	9e e4       	ldi	r25, 0x4E	; 78
    6176:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    617a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    617e:	ef e6       	ldi	r30, 0x6F	; 111
    6180:	f0 e0       	ldi	r31, 0x00	; 0
    6182:	80 81       	ld	r24, Z
    6184:	82 60       	ori	r24, 0x02	; 2
    6186:	80 83       	st	Z, r24
    sei();
    6188:	78 94       	sei
    618a:	08 95       	ret

0000618c <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    618c:	1f 92       	push	r1
    618e:	0f 92       	push	r0
    6190:	0f b6       	in	r0, 0x3f	; 63
    6192:	0f 92       	push	r0
    6194:	11 24       	eor	r1, r1
    6196:	0b b6       	in	r0, 0x3b	; 59
    6198:	0f 92       	push	r0
    619a:	2f 93       	push	r18
    619c:	3f 93       	push	r19
    619e:	4f 93       	push	r20
    61a0:	5f 93       	push	r21
    61a2:	6f 93       	push	r22
    61a4:	7f 93       	push	r23
    61a6:	8f 93       	push	r24
    61a8:	9f 93       	push	r25
    61aa:	af 93       	push	r26
    61ac:	bf 93       	push	r27
    61ae:	ef 93       	push	r30
    execute_timers();
    61b0:	ff 93       	push	r31
}
    61b2:	36 d2       	rcall	.+1132   	; 0x6620 <execute_timers>
    61b4:	ff 91       	pop	r31
    61b6:	ef 91       	pop	r30
    61b8:	bf 91       	pop	r27
    61ba:	af 91       	pop	r26
    61bc:	9f 91       	pop	r25
    61be:	8f 91       	pop	r24
    61c0:	7f 91       	pop	r23
    61c2:	6f 91       	pop	r22
    61c4:	5f 91       	pop	r21
    61c6:	4f 91       	pop	r20
    61c8:	3f 91       	pop	r19
    61ca:	2f 91       	pop	r18
    61cc:	0f 90       	pop	r0
    61ce:	0b be       	out	0x3b, r0	; 59
    61d0:	0f 90       	pop	r0
    61d2:	0f be       	out	0x3f, r0	; 63
    61d4:	0f 90       	pop	r0
    61d6:	1f 90       	pop	r1
    61d8:	18 95       	reti

000061da <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    61da:	0f 93       	push	r16
    61dc:	1f 93       	push	r17
    61de:	cf 93       	push	r28
    61e0:	df 93       	push	r29
    61e2:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    61e4:	f8 94       	cli

    count1 = TCNT1;
    61e6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    61ea:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    61ee:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock>
    61f2:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x1>
    61f6:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x2>
    61fa:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x3>
    61fe:	80 83       	st	Z, r24
    6200:	91 83       	std	Z+1, r25	; 0x01
    6202:	a2 83       	std	Z+2, r26	; 0x02
    6204:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6206:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    620a:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    620e:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    6212:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    6216:	84 83       	std	Z+4, r24	; 0x04
    6218:	95 83       	std	Z+5, r25	; 0x05
    621a:	a6 83       	std	Z+6, r26	; 0x06
    621c:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    621e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6222:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6226:	b1 9b       	sbis	0x16, 1	; 22
    6228:	03 c0       	rjmp	.+6      	; 0x6230 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    622a:	c0 e0       	ldi	r28, 0x00	; 0
    622c:	d0 e0       	ldi	r29, 0x00	; 0
    622e:	3f c0       	rjmp	.+126    	; 0x62ae <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6230:	82 17       	cp	r24, r18
    6232:	93 07       	cpc	r25, r19
    6234:	d0 f1       	brcs	.+116    	; 0x62aa <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6236:	c0 e0       	ldi	r28, 0x00	; 0
    6238:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    623a:	40 e0       	ldi	r20, 0x00	; 0
    623c:	50 e0       	ldi	r21, 0x00	; 0
    623e:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6240:	9a 01       	movw	r18, r20
    6242:	ab 01       	movw	r20, r22
    6244:	28 0f       	add	r18, r24
    6246:	39 1f       	adc	r19, r25
    6248:	41 1d       	adc	r20, r1
    624a:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    624c:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    624e:	a2 e3       	ldi	r26, 0x32	; 50
    6250:	b0 e0       	ldi	r27, 0x00	; 0
    6252:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
    6256:	04 81       	ldd	r16, Z+4	; 0x04
    6258:	15 81       	ldd	r17, Z+5	; 0x05
    625a:	26 81       	ldd	r18, Z+6	; 0x06
    625c:	37 81       	ldd	r19, Z+7	; 0x07
    625e:	dc 01       	movw	r26, r24
    6260:	cb 01       	movw	r24, r22
    6262:	80 0f       	add	r24, r16
    6264:	91 1f       	adc	r25, r17
    6266:	a2 1f       	adc	r26, r18
    6268:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    626a:	81 15       	cp	r24, r1
    626c:	2a ec       	ldi	r18, 0xCA	; 202
    626e:	92 07       	cpc	r25, r18
    6270:	2a e9       	ldi	r18, 0x9A	; 154
    6272:	a2 07       	cpc	r26, r18
    6274:	2b e3       	ldi	r18, 0x3B	; 59
    6276:	b2 07       	cpc	r27, r18
    6278:	2c f4       	brge	.+10     	; 0x6284 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    627a:	84 83       	std	Z+4, r24	; 0x04
    627c:	95 83       	std	Z+5, r25	; 0x05
    627e:	a6 83       	std	Z+6, r26	; 0x06
    6280:	b7 83       	std	Z+7, r27	; 0x07
    6282:	1a c0       	rjmp	.+52     	; 0x62b8 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6284:	9a 5c       	subi	r25, 0xCA	; 202
    6286:	aa 49       	sbci	r26, 0x9A	; 154
    6288:	bb 43       	sbci	r27, 0x3B	; 59
    628a:	84 83       	std	Z+4, r24	; 0x04
    628c:	95 83       	std	Z+5, r25	; 0x05
    628e:	a6 83       	std	Z+6, r26	; 0x06
    6290:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6292:	80 81       	ld	r24, Z
    6294:	91 81       	ldd	r25, Z+1	; 0x01
    6296:	a2 81       	ldd	r26, Z+2	; 0x02
    6298:	b3 81       	ldd	r27, Z+3	; 0x03
    629a:	01 96       	adiw	r24, 0x01	; 1
    629c:	a1 1d       	adc	r26, r1
    629e:	b1 1d       	adc	r27, r1
    62a0:	80 83       	st	Z, r24
    62a2:	91 83       	std	Z+1, r25	; 0x01
    62a4:	a2 83       	std	Z+2, r26	; 0x02
    62a6:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    62a8:	07 c0       	rjmp	.+14     	; 0x62b8 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    62aa:	cf ef       	ldi	r28, 0xFF	; 255
    62ac:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    62ae:	40 e2       	ldi	r20, 0x20	; 32
    62b0:	5e e4       	ldi	r21, 0x4E	; 78
    62b2:	60 e0       	ldi	r22, 0x00	; 0
    62b4:	70 e0       	ldi	r23, 0x00	; 0
    62b6:	c4 cf       	rjmp	.-120    	; 0x6240 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    62b8:	ce 01       	movw	r24, r28
    62ba:	df 91       	pop	r29
    62bc:	cf 91       	pop	r28
    62be:	1f 91       	pop	r17
    62c0:	0f 91       	pop	r16
    62c2:	08 95       	ret

000062c4 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    62c4:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    62c8:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    62cc:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    62d0:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    62d4:	80 5c       	subi	r24, 0xC0	; 192
    62d6:	9d 4b       	sbci	r25, 0xBD	; 189
    62d8:	a0 4f       	sbci	r26, 0xF0	; 240
    62da:	bf 4f       	sbci	r27, 0xFF	; 255
    62dc:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <__clock+0x4>
    62e0:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <__clock+0x5>
    62e4:	a0 93 62 1a 	sts	0x1A62, r26	; 0x801a62 <__clock+0x6>
    62e8:	b0 93 63 1a 	sts	0x1A63, r27	; 0x801a63 <__clock+0x7>
    62ec:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    62f0:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    62f4:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    62f8:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    62fc:	81 15       	cp	r24, r1
    62fe:	9a 4c       	sbci	r25, 0xCA	; 202
    6300:	aa 49       	sbci	r26, 0x9A	; 154
    6302:	bb 43       	sbci	r27, 0x3B	; 59
    6304:	dc f0       	brlt	.+54     	; 0x633c <clock_task+0x78>
    6306:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock>
    630a:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x1>
    630e:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x2>
    6312:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x3>
    6316:	01 96       	adiw	r24, 0x01	; 1
    6318:	a1 1d       	adc	r26, r1
    631a:	b1 1d       	adc	r27, r1
    631c:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock>
    6320:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x1>
    6324:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x2>
    6328:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x3>
    632c:	10 92 60 1a 	sts	0x1A60, r1	; 0x801a60 <__clock+0x4>
    6330:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <__clock+0x5>
    6334:	10 92 62 1a 	sts	0x1A62, r1	; 0x801a62 <__clock+0x6>
    6338:	10 92 63 1a 	sts	0x1A63, r1	; 0x801a63 <__clock+0x7>
    633c:	08 95       	ret

0000633e <clock_settime.part.2>:
    633e:	fc 01       	movw	r30, r24
    6340:	84 81       	ldd	r24, Z+4	; 0x04
    6342:	95 81       	ldd	r25, Z+5	; 0x05
    6344:	a6 81       	ldd	r26, Z+6	; 0x06
    6346:	b7 81       	ldd	r27, Z+7	; 0x07
    6348:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <__clock+0x4>
    634c:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <__clock+0x5>
    6350:	a0 93 62 1a 	sts	0x1A62, r26	; 0x801a62 <__clock+0x6>
    6354:	b0 93 63 1a 	sts	0x1A63, r27	; 0x801a63 <__clock+0x7>
    6358:	80 81       	ld	r24, Z
    635a:	91 81       	ldd	r25, Z+1	; 0x01
    635c:	a2 81       	ldd	r26, Z+2	; 0x02
    635e:	b3 81       	ldd	r27, Z+3	; 0x03
    6360:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock>
    6364:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x1>
    6368:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x2>
    636c:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x3>
    6370:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    6374:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    6378:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    637c:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    6380:	44 81       	ldd	r20, Z+4	; 0x04
    6382:	55 81       	ldd	r21, Z+5	; 0x05
    6384:	66 81       	ldd	r22, Z+6	; 0x06
    6386:	77 81       	ldd	r23, Z+7	; 0x07
    6388:	48 17       	cp	r20, r24
    638a:	59 07       	cpc	r21, r25
    638c:	6a 07       	cpc	r22, r26
    638e:	7b 07       	cpc	r23, r27
    6390:	b9 f6       	brne	.-82     	; 0x6340 <clock_settime.part.2+0x2>
    6392:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock>
    6396:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x1>
    639a:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x2>
    639e:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x3>
    63a2:	40 81       	ld	r20, Z
    63a4:	51 81       	ldd	r21, Z+1	; 0x01
    63a6:	62 81       	ldd	r22, Z+2	; 0x02
    63a8:	73 81       	ldd	r23, Z+3	; 0x03
    63aa:	48 17       	cp	r20, r24
    63ac:	59 07       	cpc	r21, r25
    63ae:	6a 07       	cpc	r22, r26
    63b0:	7b 07       	cpc	r23, r27
    63b2:	31 f6       	brne	.-116    	; 0x6340 <clock_settime.part.2+0x2>
    63b4:	80 e0       	ldi	r24, 0x00	; 0
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	08 95       	ret

000063ba <set_timers>:
    63ba:	00 d0       	rcall	.+0      	; 0x63bc <set_timers+0x2>
    63bc:	1f 92       	push	r1
    63be:	00 97       	sbiw	r24, 0x00	; 0
    63c0:	79 f1       	breq	.+94     	; 0x6420 <set_timers+0x66>
    63c2:	e4 e6       	ldi	r30, 0x64	; 100
    63c4:	fa e1       	ldi	r31, 0x1A	; 26
    63c6:	4f ef       	ldi	r20, 0xFF	; 255
    63c8:	5f ef       	ldi	r21, 0xFF	; 255
    63ca:	20 e0       	ldi	r18, 0x00	; 0
    63cc:	30 e0       	ldi	r19, 0x00	; 0
    63ce:	60 81       	ld	r22, Z
    63d0:	71 81       	ldd	r23, Z+1	; 0x01
    63d2:	86 17       	cp	r24, r22
    63d4:	97 07       	cpc	r25, r23
    63d6:	79 f0       	breq	.+30     	; 0x63f6 <set_timers+0x3c>
    63d8:	67 2b       	or	r22, r23
    63da:	71 f4       	brne	.+28     	; 0x63f8 <set_timers+0x3e>
    63dc:	f9 01       	movw	r30, r18
    63de:	ee 0f       	add	r30, r30
    63e0:	ff 1f       	adc	r31, r31
    63e2:	e2 0f       	add	r30, r18
    63e4:	f3 1f       	adc	r31, r19
    63e6:	ec 59       	subi	r30, 0x9C	; 156
    63e8:	f5 4e       	sbci	r31, 0xE5	; 229
    63ea:	91 83       	std	Z+1, r25	; 0x01
    63ec:	80 83       	st	Z, r24
    63ee:	81 e0       	ldi	r24, 0x01	; 1
    63f0:	82 83       	std	Z+2, r24	; 0x02
    63f2:	c9 01       	movw	r24, r18
    63f4:	19 c0       	rjmp	.+50     	; 0x6428 <set_timers+0x6e>
    63f6:	a9 01       	movw	r20, r18
    63f8:	2f 5f       	subi	r18, 0xFF	; 255
    63fa:	3f 4f       	sbci	r19, 0xFF	; 255
    63fc:	33 96       	adiw	r30, 0x03	; 3
    63fe:	28 30       	cpi	r18, 0x08	; 8
    6400:	31 05       	cpc	r19, r1
    6402:	29 f7       	brne	.-54     	; 0x63ce <set_timers+0x14>
    6404:	4f 3f       	cpi	r20, 0xFF	; 255
    6406:	8f ef       	ldi	r24, 0xFF	; 255
    6408:	58 07       	cpc	r21, r24
    640a:	69 f4       	brne	.+26     	; 0x6426 <set_timers+0x6c>
    640c:	81 ee       	ldi	r24, 0xE1	; 225
    640e:	95 e0       	ldi	r25, 0x05	; 5
    6410:	a0 e0       	ldi	r26, 0x00	; 0
    6412:	ed b7       	in	r30, 0x3d	; 61
    6414:	fe b7       	in	r31, 0x3e	; 62
    6416:	81 83       	std	Z+1, r24	; 0x01
    6418:	92 83       	std	Z+2, r25	; 0x02
    641a:	a3 83       	std	Z+3, r26	; 0x03
    641c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    6420:	8f ef       	ldi	r24, 0xFF	; 255
    6422:	9f ef       	ldi	r25, 0xFF	; 255
    6424:	01 c0       	rjmp	.+2      	; 0x6428 <set_timers+0x6e>
    6426:	ca 01       	movw	r24, r20
    6428:	0f 90       	pop	r0
    642a:	0f 90       	pop	r0
    642c:	0f 90       	pop	r0
    642e:	08 95       	ret

00006430 <delete_all_timers>:
    6430:	e4 e6       	ldi	r30, 0x64	; 100
    6432:	fa e1       	ldi	r31, 0x1A	; 26
    6434:	12 82       	std	Z+2, r1	; 0x02
    6436:	11 82       	std	Z+1, r1	; 0x01
    6438:	10 82       	st	Z, r1
    643a:	33 96       	adiw	r30, 0x03	; 3
    643c:	8a e1       	ldi	r24, 0x1A	; 26
    643e:	ec 37       	cpi	r30, 0x7C	; 124
    6440:	f8 07       	cpc	r31, r24
    6442:	c1 f7       	brne	.-16     	; 0x6434 <delete_all_timers+0x4>
    6444:	08 95       	ret

00006446 <subtract_timespec>:
    6446:	0f 93       	push	r16
    6448:	1f 93       	push	r17
    644a:	cf 93       	push	r28
    644c:	df 93       	push	r29
    644e:	fc 01       	movw	r30, r24
    6450:	84 81       	ldd	r24, Z+4	; 0x04
    6452:	95 81       	ldd	r25, Z+5	; 0x05
    6454:	a6 81       	ldd	r26, Z+6	; 0x06
    6456:	b7 81       	ldd	r27, Z+7	; 0x07
    6458:	eb 01       	movw	r28, r22
    645a:	0c 81       	ldd	r16, Y+4	; 0x04
    645c:	1d 81       	ldd	r17, Y+5	; 0x05
    645e:	2e 81       	ldd	r18, Y+6	; 0x06
    6460:	3f 81       	ldd	r19, Y+7	; 0x07
    6462:	80 1b       	sub	r24, r16
    6464:	91 0b       	sbc	r25, r17
    6466:	a2 0b       	sbc	r26, r18
    6468:	b3 0b       	sbc	r27, r19
    646a:	b7 fd       	sbrc	r27, 7
    646c:	05 c0       	rjmp	.+10     	; 0x6478 <subtract_timespec+0x32>
    646e:	84 83       	std	Z+4, r24	; 0x04
    6470:	95 83       	std	Z+5, r25	; 0x05
    6472:	a6 83       	std	Z+6, r26	; 0x06
    6474:	b7 83       	std	Z+7, r27	; 0x07
    6476:	12 c0       	rjmp	.+36     	; 0x649c <subtract_timespec+0x56>
    6478:	96 53       	subi	r25, 0x36	; 54
    647a:	a5 46       	sbci	r26, 0x65	; 101
    647c:	b4 4c       	sbci	r27, 0xC4	; 196
    647e:	84 83       	std	Z+4, r24	; 0x04
    6480:	95 83       	std	Z+5, r25	; 0x05
    6482:	a6 83       	std	Z+6, r26	; 0x06
    6484:	b7 83       	std	Z+7, r27	; 0x07
    6486:	80 81       	ld	r24, Z
    6488:	91 81       	ldd	r25, Z+1	; 0x01
    648a:	a2 81       	ldd	r26, Z+2	; 0x02
    648c:	b3 81       	ldd	r27, Z+3	; 0x03
    648e:	01 97       	sbiw	r24, 0x01	; 1
    6490:	a1 09       	sbc	r26, r1
    6492:	b1 09       	sbc	r27, r1
    6494:	80 83       	st	Z, r24
    6496:	91 83       	std	Z+1, r25	; 0x01
    6498:	a2 83       	std	Z+2, r26	; 0x02
    649a:	b3 83       	std	Z+3, r27	; 0x03
    649c:	80 81       	ld	r24, Z
    649e:	91 81       	ldd	r25, Z+1	; 0x01
    64a0:	a2 81       	ldd	r26, Z+2	; 0x02
    64a2:	b3 81       	ldd	r27, Z+3	; 0x03
    64a4:	eb 01       	movw	r28, r22
    64a6:	48 81       	ld	r20, Y
    64a8:	59 81       	ldd	r21, Y+1	; 0x01
    64aa:	6a 81       	ldd	r22, Y+2	; 0x02
    64ac:	7b 81       	ldd	r23, Y+3	; 0x03
    64ae:	84 1b       	sub	r24, r20
    64b0:	95 0b       	sbc	r25, r21
    64b2:	a6 0b       	sbc	r26, r22
    64b4:	b7 0b       	sbc	r27, r23
    64b6:	80 83       	st	Z, r24
    64b8:	91 83       	std	Z+1, r25	; 0x01
    64ba:	a2 83       	std	Z+2, r26	; 0x02
    64bc:	b3 83       	std	Z+3, r27	; 0x03
    64be:	df 91       	pop	r29
    64c0:	cf 91       	pop	r28
    64c2:	1f 91       	pop	r17
    64c4:	0f 91       	pop	r16
    64c6:	08 95       	ret

000064c8 <ts_to_str>:
    64c8:	ad b7       	in	r26, 0x3d	; 61
    64ca:	be b7       	in	r27, 0x3e	; 62
    64cc:	1f 97       	sbiw	r26, 0x0f	; 15
    64ce:	0f b6       	in	r0, 0x3f	; 63
    64d0:	f8 94       	cli
    64d2:	be bf       	out	0x3e, r27	; 62
    64d4:	0f be       	out	0x3f, r0	; 63
    64d6:	ad bf       	out	0x3d, r26	; 61
    64d8:	fc 01       	movw	r30, r24
    64da:	44 81       	ldd	r20, Z+4	; 0x04
    64dc:	55 81       	ldd	r21, Z+5	; 0x05
    64de:	66 81       	ldd	r22, Z+6	; 0x06
    64e0:	77 81       	ldd	r23, Z+7	; 0x07
    64e2:	ed b7       	in	r30, 0x3d	; 61
    64e4:	fe b7       	in	r31, 0x3e	; 62
    64e6:	44 87       	std	Z+12, r20	; 0x0c
    64e8:	55 87       	std	Z+13, r21	; 0x0d
    64ea:	66 87       	std	Z+14, r22	; 0x0e
    64ec:	77 87       	std	Z+15, r23	; 0x0f
    64ee:	fc 01       	movw	r30, r24
    64f0:	80 81       	ld	r24, Z
    64f2:	91 81       	ldd	r25, Z+1	; 0x01
    64f4:	a2 81       	ldd	r26, Z+2	; 0x02
    64f6:	b3 81       	ldd	r27, Z+3	; 0x03
    64f8:	ed b7       	in	r30, 0x3d	; 61
    64fa:	fe b7       	in	r31, 0x3e	; 62
    64fc:	80 87       	std	Z+8, r24	; 0x08
    64fe:	91 87       	std	Z+9, r25	; 0x09
    6500:	a2 87       	std	Z+10, r26	; 0x0a
    6502:	b3 87       	std	Z+11, r27	; 0x0b
    6504:	87 ed       	ldi	r24, 0xD7	; 215
    6506:	95 e0       	ldi	r25, 0x05	; 5
    6508:	a0 e0       	ldi	r26, 0x00	; 0
    650a:	85 83       	std	Z+5, r24	; 0x05
    650c:	96 83       	std	Z+6, r25	; 0x06
    650e:	a7 83       	std	Z+7, r26	; 0x07
    6510:	8f e1       	ldi	r24, 0x1F	; 31
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	94 83       	std	Z+4, r25	; 0x04
    6516:	83 83       	std	Z+3, r24	; 0x03
    6518:	82 e9       	ldi	r24, 0x92	; 146
    651a:	97 e1       	ldi	r25, 0x17	; 23
    651c:	92 83       	std	Z+2, r25	; 0x02
    651e:	81 83       	std	Z+1, r24	; 0x01
    6520:	0e 94 4a 43 	call	0x8694	; 0x8694 <snprintf_P>
    6524:	82 e9       	ldi	r24, 0x92	; 146
    6526:	97 e1       	ldi	r25, 0x17	; 23
    6528:	ad b7       	in	r26, 0x3d	; 61
    652a:	be b7       	in	r27, 0x3e	; 62
    652c:	1f 96       	adiw	r26, 0x0f	; 15
    652e:	0f b6       	in	r0, 0x3f	; 63
    6530:	f8 94       	cli
    6532:	be bf       	out	0x3e, r27	; 62
    6534:	0f be       	out	0x3f, r0	; 63
    6536:	ad bf       	out	0x3d, r26	; 61
    6538:	08 95       	ret

0000653a <clock_elapsed_begin>:
    653a:	6a e8       	ldi	r22, 0x8A	; 138
    653c:	77 e1       	ldi	r23, 0x17	; 23
    653e:	80 e0       	ldi	r24, 0x00	; 0
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	4b ce       	rjmp	.-874    	; 0x61da <clock_gettime>
    6544:	08 95       	ret

00006546 <clock_elapsed_end>:
    6546:	af e0       	ldi	r26, 0x0F	; 15
    6548:	b0 e0       	ldi	r27, 0x00	; 0
    654a:	e9 ea       	ldi	r30, 0xA9	; 169
    654c:	f2 e3       	ldi	r31, 0x32	; 50
    654e:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    6552:	8c 01       	movw	r16, r24
    6554:	be 01       	movw	r22, r28
    6556:	68 5f       	subi	r22, 0xF8	; 248
    6558:	7f 4f       	sbci	r23, 0xFF	; 255
    655a:	80 e0       	ldi	r24, 0x00	; 0
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	3d de       	rcall	.-902    	; 0x61da <clock_gettime>
    6560:	6a e8       	ldi	r22, 0x8A	; 138
    6562:	77 e1       	ldi	r23, 0x17	; 23
    6564:	ce 01       	movw	r24, r28
    6566:	08 96       	adiw	r24, 0x08	; 8
    6568:	6e df       	rcall	.-292    	; 0x6446 <subtract_timespec>
    656a:	01 15       	cp	r16, r1
    656c:	11 05       	cpc	r17, r1
    656e:	b1 f0       	breq	.+44     	; 0x659c <clock_elapsed_end+0x56>
    6570:	f8 01       	movw	r30, r16
    6572:	80 81       	ld	r24, Z
    6574:	88 23       	and	r24, r24
    6576:	91 f0       	breq	.+36     	; 0x659c <clock_elapsed_end+0x56>
    6578:	ce 01       	movw	r24, r28
    657a:	08 96       	adiw	r24, 0x08	; 8
    657c:	a5 df       	rcall	.-182    	; 0x64c8 <ts_to_str>
    657e:	ed b7       	in	r30, 0x3d	; 61
    6580:	fe b7       	in	r31, 0x3e	; 62
    6582:	97 83       	std	Z+7, r25	; 0x07
    6584:	86 83       	std	Z+6, r24	; 0x06
    6586:	15 83       	std	Z+5, r17	; 0x05
    6588:	04 83       	std	Z+4, r16	; 0x04
    658a:	89 ec       	ldi	r24, 0xC9	; 201
    658c:	95 e0       	ldi	r25, 0x05	; 5
    658e:	a0 e0       	ldi	r26, 0x00	; 0
    6590:	81 83       	std	Z+1, r24	; 0x01
    6592:	92 83       	std	Z+2, r25	; 0x02
    6594:	a3 83       	std	Z+3, r26	; 0x03
    6596:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    659a:	0f c0       	rjmp	.+30     	; 0x65ba <clock_elapsed_end+0x74>
    659c:	ce 01       	movw	r24, r28
    659e:	08 96       	adiw	r24, 0x08	; 8
    65a0:	93 df       	rcall	.-218    	; 0x64c8 <ts_to_str>
    65a2:	ed b7       	in	r30, 0x3d	; 61
    65a4:	fe b7       	in	r31, 0x3e	; 62
    65a6:	95 83       	std	Z+5, r25	; 0x05
    65a8:	84 83       	std	Z+4, r24	; 0x04
    65aa:	8e eb       	ldi	r24, 0xBE	; 190
    65ac:	95 e0       	ldi	r25, 0x05	; 5
    65ae:	a0 e0       	ldi	r26, 0x00	; 0
    65b0:	81 83       	std	Z+1, r24	; 0x01
    65b2:	92 83       	std	Z+2, r25	; 0x02
    65b4:	a3 83       	std	Z+3, r26	; 0x03
    65b6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    65ba:	2f 96       	adiw	r28, 0x0f	; 15
    65bc:	e4 e0       	ldi	r30, 0x04	; 4
    65be:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

000065c2 <clock_clear>:
    65c2:	a8 e0       	ldi	r26, 0x08	; 8
    65c4:	b0 e0       	ldi	r27, 0x00	; 0
    65c6:	e7 ee       	ldi	r30, 0xE7	; 231
    65c8:	f2 e3       	ldi	r31, 0x32	; 50
    65ca:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    65ce:	1d 82       	std	Y+5, r1	; 0x05
    65d0:	1e 82       	std	Y+6, r1	; 0x06
    65d2:	1f 82       	std	Y+7, r1	; 0x07
    65d4:	18 86       	std	Y+8, r1	; 0x08
    65d6:	19 82       	std	Y+1, r1	; 0x01
    65d8:	1a 82       	std	Y+2, r1	; 0x02
    65da:	1b 82       	std	Y+3, r1	; 0x03
    65dc:	1c 82       	std	Y+4, r1	; 0x04
    65de:	ce 01       	movw	r24, r28
    65e0:	01 96       	adiw	r24, 0x01	; 1
    65e2:	ad de       	rcall	.-678    	; 0x633e <clock_settime.part.2>
    65e4:	ec e7       	ldi	r30, 0x7C	; 124
    65e6:	fa e1       	ldi	r31, 0x1A	; 26
    65e8:	11 82       	std	Z+1, r1	; 0x01
    65ea:	10 82       	st	Z, r1
    65ec:	13 82       	std	Z+3, r1	; 0x03
    65ee:	12 82       	std	Z+2, r1	; 0x02
    65f0:	28 96       	adiw	r28, 0x08	; 8
    65f2:	e2 e0       	ldi	r30, 0x02	; 2
    65f4:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000065f8 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    65f8:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <timers_configured>
    65fc:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <timers_configured+0x1>
    6600:	89 2b       	or	r24, r25
    6602:	69 f0       	breq	.+26     	; 0x661e <enable_timers+0x26>
    6604:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <timers_enabled>
    6608:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <timers_enabled+0x1>
    660c:	89 2b       	or	r24, r25
    {
        enable_system_task();
    660e:	39 f4       	brne	.+14     	; 0x661e <enable_timers+0x26>
        timers_enabled = 1;
    6610:	a8 dd       	rcall	.-1200   	; 0x6162 <enable_system_task>
    6612:	81 e0       	ldi	r24, 0x01	; 1
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	90 93 b5 17 	sts	0x17B5, r25	; 0x8017b5 <timers_enabled+0x1>
    661a:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <timers_enabled>
    661e:	08 95       	ret

00006620 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6620:	cf 93       	push	r28
    6622:	df 93       	push	r29
    6624:	c4 e6       	ldi	r28, 0x64	; 100
    6626:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6628:	8a 81       	ldd	r24, Y+2	; 0x02
    662a:	88 23       	and	r24, r24
    662c:	29 f0       	breq	.+10     	; 0x6638 <execute_timers+0x18>
    662e:	e8 81       	ld	r30, Y
    6630:	f9 81       	ldd	r31, Y+1	; 0x01
    6632:	30 97       	sbiw	r30, 0x00	; 0
    6634:	09 f0       	breq	.+2      	; 0x6638 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6636:	09 95       	icall
    6638:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    663a:	8a e1       	ldi	r24, 0x1A	; 26
    663c:	cc 37       	cpi	r28, 0x7C	; 124
    663e:	d8 07       	cpc	r29, r24
    6640:	99 f7       	brne	.-26     	; 0x6628 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6642:	df 91       	pop	r29
    6644:	cf 91       	pop	r28
    6646:	08 95       	ret

00006648 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6648:	00 d0       	rcall	.+0      	; 0x664a <init_timers+0x2>
    664a:	1f 92       	push	r1
    printf("Timers init called\n");
    664c:	8a ea       	ldi	r24, 0xAA	; 170
    664e:	95 e0       	ldi	r25, 0x05	; 5
    6650:	a0 e0       	ldi	r26, 0x00	; 0
    6652:	ed b7       	in	r30, 0x3d	; 61
    6654:	fe b7       	in	r31, 0x3e	; 62
    6656:	81 83       	std	Z+1, r24	; 0x01
    6658:	92 83       	std	Z+2, r25	; 0x02
    665a:	a3 83       	std	Z+3, r26	; 0x03
    665c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    if(!timers_configured)
    6660:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <timers_configured>
    6664:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <timers_configured+0x1>
    6668:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    666a:	a9 f4       	brne	.+42     	; 0x6696 <init_timers+0x4e>
        timers_configured = 1;
    666c:	7c dd       	rcall	.-1288   	; 0x6166 <install_timers_isr>
    666e:	81 e0       	ldi	r24, 0x01	; 1
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	90 93 b3 17 	sts	0x17B3, r25	; 0x8017b3 <timers_configured+0x1>
    6676:	80 93 b2 17 	sts	0x17B2, r24	; 0x8017b2 <timers_configured>
        timers_enabled = 0;
    667a:	10 92 b5 17 	sts	0x17B5, r1	; 0x8017b5 <timers_enabled+0x1>
    667e:	10 92 b4 17 	sts	0x17B4, r1	; 0x8017b4 <timers_enabled>
        printf("Timers configured\n");
    6682:	87 e9       	ldi	r24, 0x97	; 151
    6684:	95 e0       	ldi	r25, 0x05	; 5
    6686:	a0 e0       	ldi	r26, 0x00	; 0
    6688:	ed b7       	in	r30, 0x3d	; 61
    668a:	fe b7       	in	r31, 0x3e	; 62
    668c:	81 83       	std	Z+1, r24	; 0x01
    668e:	92 83       	std	Z+2, r25	; 0x02
    }

    delete_all_timers();
    6690:	a3 83       	std	Z+3, r26	; 0x03

    clock_clear();
    6692:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("Clock Init\n");
    6696:	cc de       	rcall	.-616    	; 0x6430 <delete_all_timers>
    6698:	94 df       	rcall	.-216    	; 0x65c2 <clock_clear>
    669a:	8b e8       	ldi	r24, 0x8B	; 139
    669c:	95 e0       	ldi	r25, 0x05	; 5
    669e:	a0 e0       	ldi	r26, 0x00	; 0
    66a0:	ed b7       	in	r30, 0x3d	; 61
    66a2:	fe b7       	in	r31, 0x3e	; 62
    66a4:	81 83       	std	Z+1, r24	; 0x01
    66a6:	92 83       	std	Z+2, r25	; 0x02
    66a8:	a3 83       	std	Z+3, r26	; 0x03

///  See time.c
    if(set_timers(clock_task,1) == -1)
    66aa:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    66ae:	61 e0       	ldi	r22, 0x01	; 1
    66b0:	70 e0       	ldi	r23, 0x00	; 0
    66b2:	82 e6       	ldi	r24, 0x62	; 98
    66b4:	91 e3       	ldi	r25, 0x31	; 49
    66b6:	81 de       	rcall	.-766    	; 0x63ba <set_timers>
        printf("Clock task init failed\n");
    66b8:	01 96       	adiw	r24, 0x01	; 1
    66ba:	51 f4       	brne	.+20     	; 0x66d0 <init_timers+0x88>
    66bc:	83 e7       	ldi	r24, 0x73	; 115
    66be:	95 e0       	ldi	r25, 0x05	; 5
    66c0:	a0 e0       	ldi	r26, 0x00	; 0
    66c2:	ed b7       	in	r30, 0x3d	; 61
    66c4:	fe b7       	in	r31, 0x3e	; 62
    66c6:	81 83       	std	Z+1, r24	; 0x01
    66c8:	92 83       	std	Z+2, r25	; 0x02
    66ca:	a3 83       	std	Z+3, r26	; 0x03
    printf("Clock Installed\n");
    66cc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    66d0:	82 e6       	ldi	r24, 0x62	; 98
    66d2:	95 e0       	ldi	r25, 0x05	; 5
    66d4:	a0 e0       	ldi	r26, 0x00	; 0
    66d6:	ed b7       	in	r30, 0x3d	; 61
    66d8:	fe b7       	in	r31, 0x3e	; 62
    66da:	81 83       	std	Z+1, r24	; 0x01
    66dc:	92 83       	std	Z+2, r25	; 0x02

    enable_timers();
    66de:	a3 83       	std	Z+3, r26	; 0x03
    66e0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    printf("Timers enabled\n");
    66e4:	89 df       	rcall	.-238    	; 0x65f8 <enable_timers>
    66e6:	82 e5       	ldi	r24, 0x52	; 82
    66e8:	95 e0       	ldi	r25, 0x05	; 5
    66ea:	a0 e0       	ldi	r26, 0x00	; 0
    66ec:	ed b7       	in	r30, 0x3d	; 61
    66ee:	fe b7       	in	r31, 0x3e	; 62
    66f0:	81 83       	std	Z+1, r24	; 0x01
    66f2:	92 83       	std	Z+2, r25	; 0x02
    66f4:	a3 83       	std	Z+3, r26	; 0x03
}
    66f6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    66fa:	0f 90       	pop	r0
    66fc:	0f 90       	pop	r0
    66fe:	0f 90       	pop	r0
    6700:	08 95       	ret

00006702 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6702:	89 2b       	or	r24, r25
    6704:	81 f4       	brne	.+32     	; 0x6726 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6706:	fb 01       	movw	r30, r22
    6708:	10 82       	st	Z, r1
    670a:	11 82       	std	Z+1, r1	; 0x01
    670c:	12 82       	std	Z+2, r1	; 0x02
    670e:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6710:	80 e4       	ldi	r24, 0x40	; 64
    6712:	92 e4       	ldi	r25, 0x42	; 66
    6714:	af e0       	ldi	r26, 0x0F	; 15
    6716:	b0 e0       	ldi	r27, 0x00	; 0
    6718:	84 83       	std	Z+4, r24	; 0x04
    671a:	95 83       	std	Z+5, r25	; 0x05
    671c:	a6 83       	std	Z+6, r26	; 0x06
    671e:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6720:	80 e0       	ldi	r24, 0x00	; 0
    6722:	90 e0       	ldi	r25, 0x00	; 0
    6724:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6726:	8f ef       	ldi	r24, 0xFF	; 255
    6728:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    672a:	08 95       	ret

0000672c <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    672c:	89 2b       	or	r24, r25
    672e:	19 f4       	brne	.+6      	; 0x6736 <clock_settime+0xa>
    6730:	cb 01       	movw	r24, r22
    6732:	05 ce       	rjmp	.-1014   	; 0x633e <clock_settime.part.2>
    6734:	08 95       	ret
        return(-1);
    6736:	8f ef       	ldi	r24, 0xFF	; 255
    6738:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    673a:	08 95       	ret

0000673c <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    673c:	9c 01       	movw	r18, r24
    673e:	83 70       	andi	r24, 0x03	; 3
    6740:	99 27       	eor	r25, r25
    6742:	00 97       	sbiw	r24, 0x00	; 0
    6744:	69 f4       	brne	.+26     	; 0x6760 <IS_Leap+0x24>
    6746:	2c 36       	cpi	r18, 0x6C	; 108
    6748:	47 e0       	ldi	r20, 0x07	; 7
    674a:	34 07       	cpc	r19, r20
    674c:	59 f0       	breq	.+22     	; 0x6764 <IS_Leap+0x28>
    674e:	51 e0       	ldi	r21, 0x01	; 1
    6750:	40 e0       	ldi	r20, 0x00	; 0
    6752:	24 33       	cpi	r18, 0x34	; 52
    6754:	38 40       	sbci	r19, 0x08	; 8
    6756:	09 f4       	brne	.+2      	; 0x675a <IS_Leap+0x1e>
    6758:	50 e0       	ldi	r21, 0x00	; 0
    675a:	85 2f       	mov	r24, r21
    675c:	94 2f       	mov	r25, r20
    675e:	08 95       	ret
    6760:	80 e0       	ldi	r24, 0x00	; 0
    6762:	90 e0       	ldi	r25, 0x00	; 0
    6764:	08 95       	ret

00006766 <tm_mon_to_ascii>:
    6766:	8c 30       	cpi	r24, 0x0C	; 12
    6768:	91 05       	cpc	r25, r1
    676a:	40 f4       	brcc	.+16     	; 0x677c <tm_mon_to_ascii+0x16>
    676c:	88 0f       	add	r24, r24
    676e:	99 1f       	adc	r25, r25
    6770:	fc 01       	movw	r30, r24
    6772:	e5 5f       	subi	r30, 0xF5	; 245
    6774:	fe 4f       	sbci	r31, 0xFE	; 254
    6776:	80 81       	ld	r24, Z
    6778:	91 81       	ldd	r25, Z+1	; 0x01
    677a:	08 95       	ret
    677c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6780:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6784:	08 95       	ret

00006786 <Days_Per_Month>:
    6786:	cf 93       	push	r28
    6788:	df 93       	push	r29
    678a:	8c 30       	cpi	r24, 0x0C	; 12
    678c:	91 05       	cpc	r25, r1
    678e:	24 f0       	brlt	.+8      	; 0x6798 <Days_Per_Month+0x12>
    6790:	6f 5f       	subi	r22, 0xFF	; 255
    6792:	7f 4f       	sbci	r23, 0xFF	; 255
    6794:	0c 97       	sbiw	r24, 0x0c	; 12
    6796:	f9 cf       	rjmp	.-14     	; 0x678a <Days_Per_Month+0x4>
    6798:	97 ff       	sbrs	r25, 7
    679a:	04 c0       	rjmp	.+8      	; 0x67a4 <Days_Per_Month+0x1e>
    679c:	61 50       	subi	r22, 0x01	; 1
    679e:	71 09       	sbc	r23, r1
    67a0:	0c 96       	adiw	r24, 0x0c	; 12
    67a2:	fa cf       	rjmp	.-12     	; 0x6798 <Days_Per_Month+0x12>
    67a4:	fc 01       	movw	r30, r24
    67a6:	ee 0f       	add	r30, r30
    67a8:	ff 1f       	adc	r31, r31
    67aa:	ed 57       	subi	r30, 0x7D	; 125
    67ac:	fc 4f       	sbci	r31, 0xFC	; 252
    67ae:	c0 81       	ld	r28, Z
    67b0:	d1 81       	ldd	r29, Z+1	; 0x01
    67b2:	01 97       	sbiw	r24, 0x01	; 1
    67b4:	29 f4       	brne	.+10     	; 0x67c0 <Days_Per_Month+0x3a>
    67b6:	cb 01       	movw	r24, r22
    67b8:	c1 df       	rcall	.-126    	; 0x673c <IS_Leap>
    67ba:	89 2b       	or	r24, r25
    67bc:	09 f0       	breq	.+2      	; 0x67c0 <Days_Per_Month+0x3a>
    67be:	21 96       	adiw	r28, 0x01	; 1
    67c0:	ce 01       	movw	r24, r28
    67c2:	df 91       	pop	r29
    67c4:	cf 91       	pop	r28
    67c6:	08 95       	ret

000067c8 <time_to_tm>:
    67c8:	a0 e0       	ldi	r26, 0x00	; 0
    67ca:	b0 e0       	ldi	r27, 0x00	; 0
    67cc:	ea ee       	ldi	r30, 0xEA	; 234
    67ce:	f3 e3       	ldi	r31, 0x33	; 51
    67d0:	0c 94 c4 df 	jmp	0x1bf88	; 0x1bf88 <__prologue_saves__+0x4>
    67d4:	e8 01       	movw	r28, r16
    67d6:	e6 e1       	ldi	r30, 0x16	; 22
    67d8:	d8 01       	movw	r26, r16
    67da:	1d 92       	st	X+, r1
    67dc:	ea 95       	dec	r30
    67de:	e9 f7       	brne	.-6      	; 0x67da <time_to_tm+0x12>
    67e0:	61 15       	cp	r22, r1
    67e2:	bd e5       	ldi	r27, 0x5D	; 93
    67e4:	7b 07       	cpc	r23, r27
    67e6:	bd ef       	ldi	r27, 0xFD	; 253
    67e8:	8b 07       	cpc	r24, r27
    67ea:	bf ef       	ldi	r27, 0xFF	; 255
    67ec:	9b 07       	cpc	r25, r27
    67ee:	08 f0       	brcs	.+2      	; 0x67f2 <time_to_tm+0x2a>
    67f0:	c0 c0       	rjmp	.+384    	; 0x6972 <time_to_tm+0x1aa>
    67f2:	6b 01       	movw	r12, r22
    67f4:	7c 01       	movw	r14, r24
    67f6:	c2 1a       	sub	r12, r18
    67f8:	d3 0a       	sbc	r13, r19
    67fa:	e4 0a       	sbc	r14, r20
    67fc:	f5 0a       	sbc	r15, r21
    67fe:	46 01       	movw	r8, r12
    6800:	57 01       	movw	r10, r14
    6802:	e0 e8       	ldi	r30, 0x80	; 128
    6804:	ce 16       	cp	r12, r30
    6806:	ee ea       	ldi	r30, 0xAE	; 174
    6808:	de 06       	cpc	r13, r30
    680a:	ee ef       	ldi	r30, 0xFE	; 254
    680c:	ee 06       	cpc	r14, r30
    680e:	ef ef       	ldi	r30, 0xFF	; 255
    6810:	fe 06       	cpc	r15, r30
    6812:	50 f0       	brcs	.+20     	; 0x6828 <time_to_tm+0x60>
    6814:	80 e8       	ldi	r24, 0x80	; 128
    6816:	88 0e       	add	r8, r24
    6818:	81 e5       	ldi	r24, 0x51	; 81
    681a:	98 1e       	adc	r9, r24
    681c:	81 e0       	ldi	r24, 0x01	; 1
    681e:	a8 1e       	adc	r10, r24
    6820:	b1 1c       	adc	r11, r1
    6822:	01 e0       	ldi	r16, 0x01	; 1
    6824:	10 e0       	ldi	r17, 0x00	; 0
    6826:	02 c0       	rjmp	.+4      	; 0x682c <time_to_tm+0x64>
    6828:	00 e0       	ldi	r16, 0x00	; 0
    682a:	10 e0       	ldi	r17, 0x00	; 0
    682c:	8c e3       	ldi	r24, 0x3C	; 60
    682e:	48 2e       	mov	r4, r24
    6830:	51 2c       	mov	r5, r1
    6832:	61 2c       	mov	r6, r1
    6834:	71 2c       	mov	r7, r1
    6836:	c5 01       	movw	r24, r10
    6838:	b4 01       	movw	r22, r8
    683a:	a3 01       	movw	r20, r6
    683c:	92 01       	movw	r18, r4
    683e:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    6842:	79 83       	std	Y+1, r23	; 0x01
    6844:	68 83       	st	Y, r22
    6846:	ca 01       	movw	r24, r20
    6848:	b9 01       	movw	r22, r18
    684a:	a3 01       	movw	r20, r6
    684c:	92 01       	movw	r18, r4
    684e:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    6852:	7b 83       	std	Y+3, r23	; 0x03
    6854:	6a 83       	std	Y+2, r22	; 0x02
    6856:	c5 01       	movw	r24, r10
    6858:	b4 01       	movw	r22, r8
    685a:	20 e1       	ldi	r18, 0x10	; 16
    685c:	3e e0       	ldi	r19, 0x0E	; 14
    685e:	40 e0       	ldi	r20, 0x00	; 0
    6860:	50 e0       	ldi	r21, 0x00	; 0
    6862:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    6866:	ca 01       	movw	r24, r20
    6868:	b9 01       	movw	r22, r18
    686a:	28 e1       	ldi	r18, 0x18	; 24
    686c:	30 e0       	ldi	r19, 0x00	; 0
    686e:	40 e0       	ldi	r20, 0x00	; 0
    6870:	50 e0       	ldi	r21, 0x00	; 0
    6872:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    6876:	7d 83       	std	Y+5, r23	; 0x05
    6878:	6c 83       	std	Y+4, r22	; 0x04
    687a:	01 15       	cp	r16, r1
    687c:	11 05       	cpc	r17, r1
    687e:	89 f0       	breq	.+34     	; 0x68a2 <time_to_tm+0xda>
    6880:	85 e4       	ldi	r24, 0x45	; 69
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	9b 87       	std	Y+11, r25	; 0x0b
    6886:	8a 87       	std	Y+10, r24	; 0x0a
    6888:	8b e0       	ldi	r24, 0x0B	; 11
    688a:	90 e0       	ldi	r25, 0x00	; 0
    688c:	99 87       	std	Y+9, r25	; 0x09
    688e:	88 87       	std	Y+8, r24	; 0x08
    6890:	8f e1       	ldi	r24, 0x1F	; 31
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	9f 83       	std	Y+7, r25	; 0x07
    6896:	8e 83       	std	Y+6, r24	; 0x06
    6898:	83 e0       	ldi	r24, 0x03	; 3
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	9d 87       	std	Y+13, r25	; 0x0d
    689e:	8c 87       	std	Y+12, r24	; 0x0c
    68a0:	65 c0       	rjmp	.+202    	; 0x696c <time_to_tm+0x1a4>
    68a2:	c5 01       	movw	r24, r10
    68a4:	b4 01       	movw	r22, r8
    68a6:	20 e8       	ldi	r18, 0x80	; 128
    68a8:	31 e5       	ldi	r19, 0x51	; 81
    68aa:	41 e0       	ldi	r20, 0x01	; 1
    68ac:	50 e0       	ldi	r21, 0x00	; 0
    68ae:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    68b2:	49 01       	movw	r8, r18
    68b4:	5a 01       	movw	r10, r20
    68b6:	ca 01       	movw	r24, r20
    68b8:	b9 01       	movw	r22, r18
    68ba:	6c 5f       	subi	r22, 0xFC	; 252
    68bc:	7f 4f       	sbci	r23, 0xFF	; 255
    68be:	8f 4f       	sbci	r24, 0xFF	; 255
    68c0:	9f 4f       	sbci	r25, 0xFF	; 255
    68c2:	27 e0       	ldi	r18, 0x07	; 7
    68c4:	30 e0       	ldi	r19, 0x00	; 0
    68c6:	40 e0       	ldi	r20, 0x00	; 0
    68c8:	50 e0       	ldi	r21, 0x00	; 0
    68ca:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
    68ce:	7d 87       	std	Y+13, r23	; 0x0d
    68d0:	6c 87       	std	Y+12, r22	; 0x0c
    68d2:	02 eb       	ldi	r16, 0xB2	; 178
    68d4:	17 e0       	ldi	r17, 0x07	; 7
    68d6:	c8 01       	movw	r24, r16
    68d8:	31 df       	rcall	.-414    	; 0x673c <IS_Leap>
    68da:	00 97       	sbiw	r24, 0x00	; 0
    68dc:	19 f4       	brne	.+6      	; 0x68e4 <time_to_tm+0x11c>
    68de:	4d e6       	ldi	r20, 0x6D	; 109
    68e0:	51 e0       	ldi	r21, 0x01	; 1
    68e2:	02 c0       	rjmp	.+4      	; 0x68e8 <time_to_tm+0x120>
    68e4:	4e e6       	ldi	r20, 0x6E	; 110
    68e6:	51 e0       	ldi	r21, 0x01	; 1
    68e8:	05 2e       	mov	r0, r21
    68ea:	00 0c       	add	r0, r0
    68ec:	66 0b       	sbc	r22, r22
    68ee:	77 0b       	sbc	r23, r23
    68f0:	84 16       	cp	r8, r20
    68f2:	95 06       	cpc	r9, r21
    68f4:	a6 06       	cpc	r10, r22
    68f6:	b7 06       	cpc	r11, r23
    68f8:	3c f0       	brlt	.+14     	; 0x6908 <time_to_tm+0x140>
    68fa:	0f 5f       	subi	r16, 0xFF	; 255
    68fc:	1f 4f       	sbci	r17, 0xFF	; 255
    68fe:	84 1a       	sub	r8, r20
    6900:	95 0a       	sbc	r9, r21
    6902:	a6 0a       	sbc	r10, r22
    6904:	b7 0a       	sbc	r11, r23
    6906:	e7 cf       	rjmp	.-50     	; 0x68d6 <time_to_tm+0x10e>
    6908:	0c 56       	subi	r16, 0x6C	; 108
    690a:	17 40       	sbci	r17, 0x07	; 7
    690c:	1b 87       	std	Y+11, r17	; 0x0b
    690e:	0a 87       	std	Y+10, r16	; 0x0a
    6910:	9f 86       	std	Y+15, r9	; 0x0f
    6912:	8e 86       	std	Y+14, r8	; 0x0e
    6914:	e3 e8       	ldi	r30, 0x83	; 131
    6916:	f3 e0       	ldi	r31, 0x03	; 3
    6918:	20 e0       	ldi	r18, 0x00	; 0
    691a:	30 e0       	ldi	r19, 0x00	; 0
    691c:	18 14       	cp	r1, r8
    691e:	19 04       	cpc	r1, r9
    6920:	1a 04       	cpc	r1, r10
    6922:	1b 04       	cpc	r1, r11
    6924:	e4 f4       	brge	.+56     	; 0x695e <time_to_tm+0x196>
    6926:	2c 30       	cpi	r18, 0x0C	; 12
    6928:	31 05       	cpc	r19, r1
    692a:	c9 f0       	breq	.+50     	; 0x695e <time_to_tm+0x196>
    692c:	41 91       	ld	r20, Z+
    692e:	51 91       	ld	r21, Z+
    6930:	21 30       	cpi	r18, 0x01	; 1
    6932:	31 05       	cpc	r19, r1
    6934:	21 f4       	brne	.+8      	; 0x693e <time_to_tm+0x176>
    6936:	00 97       	sbiw	r24, 0x00	; 0
    6938:	11 f0       	breq	.+4      	; 0x693e <time_to_tm+0x176>
    693a:	4f 5f       	subi	r20, 0xFF	; 255
    693c:	5f 4f       	sbci	r21, 0xFF	; 255
    693e:	05 2e       	mov	r0, r21
    6940:	00 0c       	add	r0, r0
    6942:	66 0b       	sbc	r22, r22
    6944:	77 0b       	sbc	r23, r23
    6946:	84 16       	cp	r8, r20
    6948:	95 06       	cpc	r9, r21
    694a:	a6 06       	cpc	r10, r22
    694c:	b7 06       	cpc	r11, r23
    694e:	3c f0       	brlt	.+14     	; 0x695e <time_to_tm+0x196>
    6950:	84 1a       	sub	r8, r20
    6952:	95 0a       	sbc	r9, r21
    6954:	a6 0a       	sbc	r10, r22
    6956:	b7 0a       	sbc	r11, r23
    6958:	2f 5f       	subi	r18, 0xFF	; 255
    695a:	3f 4f       	sbci	r19, 0xFF	; 255
    695c:	df cf       	rjmp	.-66     	; 0x691c <time_to_tm+0x154>
    695e:	39 87       	std	Y+9, r19	; 0x09
    6960:	28 87       	std	Y+8, r18	; 0x08
    6962:	af ef       	ldi	r26, 0xFF	; 255
    6964:	8a 1a       	sub	r8, r26
    6966:	9a 0a       	sbc	r9, r26
    6968:	9f 82       	std	Y+7, r9	; 0x07
    696a:	8e 82       	std	Y+6, r8	; 0x06
    696c:	b6 01       	movw	r22, r12
    696e:	c7 01       	movw	r24, r14
    6970:	04 c0       	rjmp	.+8      	; 0x697a <time_to_tm+0x1b2>
    6972:	6f ef       	ldi	r22, 0xFF	; 255
    6974:	7f ef       	ldi	r23, 0xFF	; 255
    6976:	8f ef       	ldi	r24, 0xFF	; 255
    6978:	9f ef       	ldi	r25, 0xFF	; 255
    697a:	cd b7       	in	r28, 0x3d	; 61
    697c:	de b7       	in	r29, 0x3e	; 62
    697e:	e0 e1       	ldi	r30, 0x10	; 16
    6980:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__epilogue_restores__+0x4>

00006984 <gmtime_r>:
    6984:	0f 93       	push	r16
    6986:	1f 93       	push	r17
    6988:	cf 93       	push	r28
    698a:	df 93       	push	r29
    698c:	eb 01       	movw	r28, r22
    698e:	fc 01       	movw	r30, r24
    6990:	60 81       	ld	r22, Z
    6992:	71 81       	ldd	r23, Z+1	; 0x01
    6994:	82 81       	ldd	r24, Z+2	; 0x02
    6996:	93 81       	ldd	r25, Z+3	; 0x03
    6998:	8e 01       	movw	r16, r28
    699a:	20 e0       	ldi	r18, 0x00	; 0
    699c:	30 e0       	ldi	r19, 0x00	; 0
    699e:	a9 01       	movw	r20, r18
    69a0:	13 df       	rcall	.-474    	; 0x67c8 <time_to_tm>
    69a2:	ce 01       	movw	r24, r28
    69a4:	df 91       	pop	r29
    69a6:	cf 91       	pop	r28
    69a8:	1f 91       	pop	r17
    69aa:	0f 91       	pop	r16
    69ac:	08 95       	ret

000069ae <gmtime>:
    69ae:	24 ed       	ldi	r18, 0xD4	; 212
    69b0:	37 e1       	ldi	r19, 0x17	; 23
    69b2:	30 93 eb 17 	sts	0x17EB, r19	; 0x8017eb <p.3686+0x1>
    69b6:	20 93 ea 17 	sts	0x17EA, r18	; 0x8017ea <p.3686>
    69ba:	b9 01       	movw	r22, r18
    69bc:	e3 df       	rcall	.-58     	; 0x6984 <gmtime_r>
    69be:	84 ed       	ldi	r24, 0xD4	; 212
    69c0:	97 e1       	ldi	r25, 0x17	; 23
    69c2:	08 95       	ret

000069c4 <gettimezone>:
    69c4:	ec e7       	ldi	r30, 0x7C	; 124
    69c6:	fa e1       	ldi	r31, 0x1A	; 26
    69c8:	20 81       	ld	r18, Z
    69ca:	31 81       	ldd	r19, Z+1	; 0x01
    69cc:	dc 01       	movw	r26, r24
    69ce:	2d 93       	st	X+, r18
    69d0:	3c 93       	st	X, r19
    69d2:	22 81       	ldd	r18, Z+2	; 0x02
    69d4:	33 81       	ldd	r19, Z+3	; 0x03
    69d6:	fc 01       	movw	r30, r24
    69d8:	33 83       	std	Z+3, r19	; 0x03
    69da:	22 83       	std	Z+2, r18	; 0x02
    69dc:	80 e0       	ldi	r24, 0x00	; 0
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	08 95       	ret

000069e2 <settimezone>:
    69e2:	cf 93       	push	r28
    69e4:	df 93       	push	r29
    69e6:	ec 01       	movw	r28, r24
    69e8:	28 81       	ld	r18, Y
    69ea:	39 81       	ldd	r19, Y+1	; 0x01
    69ec:	ec e7       	ldi	r30, 0x7C	; 124
    69ee:	fa e1       	ldi	r31, 0x1A	; 26
    69f0:	31 83       	std	Z+1, r19	; 0x01
    69f2:	20 83       	st	Z, r18
    69f4:	8a 81       	ldd	r24, Y+2	; 0x02
    69f6:	9b 81       	ldd	r25, Y+3	; 0x03
    69f8:	93 83       	std	Z+3, r25	; 0x03
    69fa:	82 83       	std	Z+2, r24	; 0x02
    69fc:	80 e0       	ldi	r24, 0x00	; 0
    69fe:	90 e0       	ldi	r25, 0x00	; 0
    6a00:	df 91       	pop	r29
    6a02:	cf 91       	pop	r28
    6a04:	08 95       	ret

00006a06 <gettimeofday>:
    6a06:	a8 e0       	ldi	r26, 0x08	; 8
    6a08:	b0 e0       	ldi	r27, 0x00	; 0
    6a0a:	e9 e0       	ldi	r30, 0x09	; 9
    6a0c:	f5 e3       	ldi	r31, 0x35	; 53
    6a0e:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
    6a12:	8c 01       	movw	r16, r24
    6a14:	7b 01       	movw	r14, r22
    6a16:	be 01       	movw	r22, r28
    6a18:	6f 5f       	subi	r22, 0xFF	; 255
    6a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a1c:	80 e0       	ldi	r24, 0x00	; 0
    6a1e:	90 e0       	ldi	r25, 0x00	; 0
    6a20:	dc db       	rcall	.-2120   	; 0x61da <clock_gettime>
    6a22:	89 81       	ldd	r24, Y+1	; 0x01
    6a24:	9a 81       	ldd	r25, Y+2	; 0x02
    6a26:	ab 81       	ldd	r26, Y+3	; 0x03
    6a28:	bc 81       	ldd	r27, Y+4	; 0x04
    6a2a:	f8 01       	movw	r30, r16
    6a2c:	80 83       	st	Z, r24
    6a2e:	91 83       	std	Z+1, r25	; 0x01
    6a30:	a2 83       	std	Z+2, r26	; 0x02
    6a32:	b3 83       	std	Z+3, r27	; 0x03
    6a34:	6d 81       	ldd	r22, Y+5	; 0x05
    6a36:	7e 81       	ldd	r23, Y+6	; 0x06
    6a38:	8f 81       	ldd	r24, Y+7	; 0x07
    6a3a:	98 85       	ldd	r25, Y+8	; 0x08
    6a3c:	28 ee       	ldi	r18, 0xE8	; 232
    6a3e:	33 e0       	ldi	r19, 0x03	; 3
    6a40:	40 e0       	ldi	r20, 0x00	; 0
    6a42:	50 e0       	ldi	r21, 0x00	; 0
    6a44:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
    6a48:	f8 01       	movw	r30, r16
    6a4a:	24 83       	std	Z+4, r18	; 0x04
    6a4c:	35 83       	std	Z+5, r19	; 0x05
    6a4e:	46 83       	std	Z+6, r20	; 0x06
    6a50:	57 83       	std	Z+7, r21	; 0x07
    6a52:	c7 01       	movw	r24, r14
    6a54:	b7 df       	rcall	.-146    	; 0x69c4 <gettimezone>
    6a56:	80 e0       	ldi	r24, 0x00	; 0
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	28 96       	adiw	r28, 0x08	; 8
    6a5c:	e6 e0       	ldi	r30, 0x06	; 6
    6a5e:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00006a62 <time>:
    6a62:	cf 93       	push	r28
    6a64:	df 93       	push	r29
    6a66:	ec 01       	movw	r28, r24
    6a68:	66 eb       	ldi	r22, 0xB6	; 182
    6a6a:	77 e1       	ldi	r23, 0x17	; 23
    6a6c:	80 e0       	ldi	r24, 0x00	; 0
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	b4 db       	rcall	.-2200   	; 0x61da <clock_gettime>
    6a72:	20 97       	sbiw	r28, 0x00	; 0
    6a74:	61 f0       	breq	.+24     	; 0x6a8e <time+0x2c>
    6a76:	80 91 b6 17 	lds	r24, 0x17B6	; 0x8017b6 <ts.3764>
    6a7a:	90 91 b7 17 	lds	r25, 0x17B7	; 0x8017b7 <ts.3764+0x1>
    6a7e:	a0 91 b8 17 	lds	r26, 0x17B8	; 0x8017b8 <ts.3764+0x2>
    6a82:	b0 91 b9 17 	lds	r27, 0x17B9	; 0x8017b9 <ts.3764+0x3>
    6a86:	88 83       	st	Y, r24
    6a88:	99 83       	std	Y+1, r25	; 0x01
    6a8a:	aa 83       	std	Y+2, r26	; 0x02
    6a8c:	bb 83       	std	Y+3, r27	; 0x03
    6a8e:	60 91 b6 17 	lds	r22, 0x17B6	; 0x8017b6 <ts.3764>
    6a92:	70 91 b7 17 	lds	r23, 0x17B7	; 0x8017b7 <ts.3764+0x1>
    6a96:	80 91 b8 17 	lds	r24, 0x17B8	; 0x8017b8 <ts.3764+0x2>
    6a9a:	90 91 b9 17 	lds	r25, 0x17B9	; 0x8017b9 <ts.3764+0x3>
    6a9e:	df 91       	pop	r29
    6aa0:	cf 91       	pop	r28
    6aa2:	08 95       	ret

00006aa4 <is_dst>:
    6aa4:	cf 92       	push	r12
    6aa6:	df 92       	push	r13
    6aa8:	ef 92       	push	r14
    6aaa:	ff 92       	push	r15
    6aac:	6b 01       	movw	r12, r22
    6aae:	7c 01       	movw	r14, r24
    6ab0:	05 d4       	rcall	.+2058   	; 0x72bc <set_dst>
    6ab2:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <dst>
    6ab6:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <dst+0x1>
    6aba:	a0 91 82 1a 	lds	r26, 0x1A82	; 0x801a82 <dst+0x2>
    6abe:	b0 91 83 1a 	lds	r27, 0x1A83	; 0x801a83 <dst+0x3>
    6ac2:	c8 16       	cp	r12, r24
    6ac4:	d9 06       	cpc	r13, r25
    6ac6:	ea 06       	cpc	r14, r26
    6ac8:	fb 06       	cpc	r15, r27
    6aca:	88 f0       	brcs	.+34     	; 0x6aee <is_dst+0x4a>
    6acc:	81 e0       	ldi	r24, 0x01	; 1
    6ace:	90 e0       	ldi	r25, 0x00	; 0
    6ad0:	40 91 84 1a 	lds	r20, 0x1A84	; 0x801a84 <dst+0x4>
    6ad4:	50 91 85 1a 	lds	r21, 0x1A85	; 0x801a85 <dst+0x5>
    6ad8:	60 91 86 1a 	lds	r22, 0x1A86	; 0x801a86 <dst+0x6>
    6adc:	70 91 87 1a 	lds	r23, 0x1A87	; 0x801a87 <dst+0x7>
    6ae0:	4c 15       	cp	r20, r12
    6ae2:	5d 05       	cpc	r21, r13
    6ae4:	6e 05       	cpc	r22, r14
    6ae6:	7f 05       	cpc	r23, r15
    6ae8:	20 f4       	brcc	.+8      	; 0x6af2 <is_dst+0x4e>
    6aea:	80 e0       	ldi	r24, 0x00	; 0
    6aec:	02 c0       	rjmp	.+4      	; 0x6af2 <is_dst+0x4e>
    6aee:	80 e0       	ldi	r24, 0x00	; 0
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	ff 90       	pop	r15
    6af4:	ef 90       	pop	r14
    6af6:	df 90       	pop	r13
    6af8:	cf 90       	pop	r12
    6afa:	08 95       	ret

00006afc <localtime_r>:
    6afc:	4f 92       	push	r4
    6afe:	5f 92       	push	r5
    6b00:	6f 92       	push	r6
    6b02:	7f 92       	push	r7
    6b04:	af 92       	push	r10
    6b06:	bf 92       	push	r11
    6b08:	cf 92       	push	r12
    6b0a:	df 92       	push	r13
    6b0c:	ef 92       	push	r14
    6b0e:	ff 92       	push	r15
    6b10:	0f 93       	push	r16
    6b12:	1f 93       	push	r17
    6b14:	cf 93       	push	r28
    6b16:	df 93       	push	r29
    6b18:	00 d0       	rcall	.+0      	; 0x6b1a <localtime_r+0x1e>
    6b1a:	00 d0       	rcall	.+0      	; 0x6b1c <localtime_r+0x20>
    6b1c:	cd b7       	in	r28, 0x3d	; 61
    6b1e:	de b7       	in	r29, 0x3e	; 62
    6b20:	5b 01       	movw	r10, r22
    6b22:	fc 01       	movw	r30, r24
    6b24:	40 80       	ld	r4, Z
    6b26:	51 80       	ldd	r5, Z+1	; 0x01
    6b28:	62 80       	ldd	r6, Z+2	; 0x02
    6b2a:	73 80       	ldd	r7, Z+3	; 0x03
    6b2c:	ce 01       	movw	r24, r28
    6b2e:	01 96       	adiw	r24, 0x01	; 1
    6b30:	49 df       	rcall	.-366    	; 0x69c4 <gettimezone>
    6b32:	a9 81       	ldd	r26, Y+1	; 0x01
    6b34:	ba 81       	ldd	r27, Y+2	; 0x02
    6b36:	2c e3       	ldi	r18, 0x3C	; 60
    6b38:	30 e0       	ldi	r19, 0x00	; 0
    6b3a:	0e 94 9c df 	call	0x1bf38	; 0x1bf38 <__usmulhisi3>
    6b3e:	6b 01       	movw	r12, r22
    6b40:	7c 01       	movw	r14, r24
    6b42:	c3 01       	movw	r24, r6
    6b44:	b2 01       	movw	r22, r4
    6b46:	6c 19       	sub	r22, r12
    6b48:	7d 09       	sbc	r23, r13
    6b4a:	8e 09       	sbc	r24, r14
    6b4c:	9f 09       	sbc	r25, r15
    6b4e:	aa df       	rcall	.-172    	; 0x6aa4 <is_dst>
    6b50:	89 2b       	or	r24, r25
    6b52:	31 f0       	breq	.+12     	; 0x6b60 <localtime_r+0x64>
    6b54:	f0 e1       	ldi	r31, 0x10	; 16
    6b56:	cf 1a       	sub	r12, r31
    6b58:	fe e0       	ldi	r31, 0x0E	; 14
    6b5a:	df 0a       	sbc	r13, r31
    6b5c:	e1 08       	sbc	r14, r1
    6b5e:	f1 08       	sbc	r15, r1
    6b60:	85 01       	movw	r16, r10
    6b62:	a7 01       	movw	r20, r14
    6b64:	96 01       	movw	r18, r12
    6b66:	c3 01       	movw	r24, r6
    6b68:	b2 01       	movw	r22, r4
    6b6a:	2e de       	rcall	.-932    	; 0x67c8 <time_to_tm>
    6b6c:	c5 01       	movw	r24, r10
    6b6e:	0f 90       	pop	r0
    6b70:	0f 90       	pop	r0
    6b72:	0f 90       	pop	r0
    6b74:	0f 90       	pop	r0
    6b76:	df 91       	pop	r29
    6b78:	cf 91       	pop	r28
    6b7a:	1f 91       	pop	r17
    6b7c:	0f 91       	pop	r16
    6b7e:	ff 90       	pop	r15
    6b80:	ef 90       	pop	r14
    6b82:	df 90       	pop	r13
    6b84:	cf 90       	pop	r12
    6b86:	bf 90       	pop	r11
    6b88:	af 90       	pop	r10
    6b8a:	7f 90       	pop	r7
    6b8c:	6f 90       	pop	r6
    6b8e:	5f 90       	pop	r5
    6b90:	4f 90       	pop	r4
    6b92:	08 95       	ret

00006b94 <localtime>:
    6b94:	6e eb       	ldi	r22, 0xBE	; 190
    6b96:	77 e1       	ldi	r23, 0x17	; 23
    6b98:	b1 cf       	rjmp	.-158    	; 0x6afc <localtime_r>
    6b9a:	08 95       	ret

00006b9c <normalize>:
    6b9c:	aa e0       	ldi	r26, 0x0A	; 10
    6b9e:	b0 e0       	ldi	r27, 0x00	; 0
    6ba0:	e4 ed       	ldi	r30, 0xD4	; 212
    6ba2:	f5 e3       	ldi	r31, 0x35	; 53
    6ba4:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    6ba8:	7c 01       	movw	r14, r24
    6baa:	7a 87       	std	Y+10, r23	; 0x0a
    6bac:	69 87       	std	Y+9, r22	; 0x09
    6bae:	f7 01       	movw	r30, r14
    6bb0:	80 81       	ld	r24, Z
    6bb2:	91 81       	ldd	r25, Z+1	; 0x01
    6bb4:	8c 33       	cpi	r24, 0x3C	; 60
    6bb6:	91 05       	cpc	r25, r1
    6bb8:	5c f0       	brlt	.+22     	; 0x6bd0 <normalize+0x34>
    6bba:	f7 01       	movw	r30, r14
    6bbc:	22 81       	ldd	r18, Z+2	; 0x02
    6bbe:	33 81       	ldd	r19, Z+3	; 0x03
    6bc0:	2f 5f       	subi	r18, 0xFF	; 255
    6bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    6bc4:	33 83       	std	Z+3, r19	; 0x03
    6bc6:	22 83       	std	Z+2, r18	; 0x02
    6bc8:	cc 97       	sbiw	r24, 0x3c	; 60
    6bca:	91 83       	std	Z+1, r25	; 0x01
    6bcc:	80 83       	st	Z, r24
    6bce:	ef cf       	rjmp	.-34     	; 0x6bae <normalize+0x12>
    6bd0:	f7 01       	movw	r30, r14
    6bd2:	01 90       	ld	r0, Z+
    6bd4:	f0 81       	ld	r31, Z
    6bd6:	e0 2d       	mov	r30, r0
    6bd8:	fe 83       	std	Y+6, r31	; 0x06
    6bda:	ed 83       	std	Y+5, r30	; 0x05
    6bdc:	f7 ff       	sbrs	r31, 7
    6bde:	0d c0       	rjmp	.+26     	; 0x6bfa <normalize+0x5e>
    6be0:	f7 01       	movw	r30, r14
    6be2:	82 81       	ldd	r24, Z+2	; 0x02
    6be4:	93 81       	ldd	r25, Z+3	; 0x03
    6be6:	01 97       	sbiw	r24, 0x01	; 1
    6be8:	93 83       	std	Z+3, r25	; 0x03
    6bea:	82 83       	std	Z+2, r24	; 0x02
    6bec:	6d 81       	ldd	r22, Y+5	; 0x05
    6bee:	7e 81       	ldd	r23, Y+6	; 0x06
    6bf0:	64 5c       	subi	r22, 0xC4	; 196
    6bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    6bf4:	71 83       	std	Z+1, r23	; 0x01
    6bf6:	60 83       	st	Z, r22
    6bf8:	eb cf       	rjmp	.-42     	; 0x6bd0 <normalize+0x34>
    6bfa:	f7 01       	movw	r30, r14
    6bfc:	82 81       	ldd	r24, Z+2	; 0x02
    6bfe:	93 81       	ldd	r25, Z+3	; 0x03
    6c00:	8c 33       	cpi	r24, 0x3C	; 60
    6c02:	91 05       	cpc	r25, r1
    6c04:	5c f0       	brlt	.+22     	; 0x6c1c <normalize+0x80>
    6c06:	f7 01       	movw	r30, r14
    6c08:	24 81       	ldd	r18, Z+4	; 0x04
    6c0a:	35 81       	ldd	r19, Z+5	; 0x05
    6c0c:	2f 5f       	subi	r18, 0xFF	; 255
    6c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c10:	35 83       	std	Z+5, r19	; 0x05
    6c12:	24 83       	std	Z+4, r18	; 0x04
    6c14:	cc 97       	sbiw	r24, 0x3c	; 60
    6c16:	93 83       	std	Z+3, r25	; 0x03
    6c18:	82 83       	std	Z+2, r24	; 0x02
    6c1a:	ef cf       	rjmp	.-34     	; 0x6bfa <normalize+0x5e>
    6c1c:	f7 01       	movw	r30, r14
    6c1e:	22 80       	ldd	r2, Z+2	; 0x02
    6c20:	33 80       	ldd	r3, Z+3	; 0x03
    6c22:	37 fe       	sbrs	r3, 7
    6c24:	0d c0       	rjmp	.+26     	; 0x6c40 <normalize+0xa4>
    6c26:	f7 01       	movw	r30, r14
    6c28:	84 81       	ldd	r24, Z+4	; 0x04
    6c2a:	95 81       	ldd	r25, Z+5	; 0x05
    6c2c:	01 97       	sbiw	r24, 0x01	; 1
    6c2e:	95 83       	std	Z+5, r25	; 0x05
    6c30:	84 83       	std	Z+4, r24	; 0x04
    6c32:	fc e3       	ldi	r31, 0x3C	; 60
    6c34:	2f 0e       	add	r2, r31
    6c36:	31 1c       	adc	r3, r1
    6c38:	f7 01       	movw	r30, r14
    6c3a:	33 82       	std	Z+3, r3	; 0x03
    6c3c:	22 82       	std	Z+2, r2	; 0x02
    6c3e:	ee cf       	rjmp	.-36     	; 0x6c1c <normalize+0x80>
    6c40:	f7 01       	movw	r30, r14
    6c42:	84 81       	ldd	r24, Z+4	; 0x04
    6c44:	95 81       	ldd	r25, Z+5	; 0x05
    6c46:	88 31       	cpi	r24, 0x18	; 24
    6c48:	91 05       	cpc	r25, r1
    6c4a:	5c f0       	brlt	.+22     	; 0x6c62 <normalize+0xc6>
    6c4c:	f7 01       	movw	r30, r14
    6c4e:	26 81       	ldd	r18, Z+6	; 0x06
    6c50:	37 81       	ldd	r19, Z+7	; 0x07
    6c52:	2f 5f       	subi	r18, 0xFF	; 255
    6c54:	3f 4f       	sbci	r19, 0xFF	; 255
    6c56:	37 83       	std	Z+7, r19	; 0x07
    6c58:	26 83       	std	Z+6, r18	; 0x06
    6c5a:	48 97       	sbiw	r24, 0x18	; 24
    6c5c:	95 83       	std	Z+5, r25	; 0x05
    6c5e:	84 83       	std	Z+4, r24	; 0x04
    6c60:	ef cf       	rjmp	.-34     	; 0x6c40 <normalize+0xa4>
    6c62:	f7 01       	movw	r30, r14
    6c64:	04 81       	ldd	r16, Z+4	; 0x04
    6c66:	15 81       	ldd	r17, Z+5	; 0x05
    6c68:	17 ff       	sbrs	r17, 7
    6c6a:	0b c0       	rjmp	.+22     	; 0x6c82 <normalize+0xe6>
    6c6c:	f7 01       	movw	r30, r14
    6c6e:	86 81       	ldd	r24, Z+6	; 0x06
    6c70:	97 81       	ldd	r25, Z+7	; 0x07
    6c72:	01 97       	sbiw	r24, 0x01	; 1
    6c74:	97 83       	std	Z+7, r25	; 0x07
    6c76:	86 83       	std	Z+6, r24	; 0x06
    6c78:	08 5e       	subi	r16, 0xE8	; 232
    6c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    6c7c:	15 83       	std	Z+5, r17	; 0x05
    6c7e:	04 83       	std	Z+4, r16	; 0x04
    6c80:	f0 cf       	rjmp	.-32     	; 0x6c62 <normalize+0xc6>
    6c82:	f7 01       	movw	r30, r14
    6c84:	80 85       	ldd	r24, Z+8	; 0x08
    6c86:	91 85       	ldd	r25, Z+9	; 0x09
    6c88:	8c 30       	cpi	r24, 0x0C	; 12
    6c8a:	91 05       	cpc	r25, r1
    6c8c:	5c f0       	brlt	.+22     	; 0x6ca4 <normalize+0x108>
    6c8e:	f7 01       	movw	r30, r14
    6c90:	22 85       	ldd	r18, Z+10	; 0x0a
    6c92:	33 85       	ldd	r19, Z+11	; 0x0b
    6c94:	2f 5f       	subi	r18, 0xFF	; 255
    6c96:	3f 4f       	sbci	r19, 0xFF	; 255
    6c98:	33 87       	std	Z+11, r19	; 0x0b
    6c9a:	22 87       	std	Z+10, r18	; 0x0a
    6c9c:	0c 97       	sbiw	r24, 0x0c	; 12
    6c9e:	91 87       	std	Z+9, r25	; 0x09
    6ca0:	80 87       	std	Z+8, r24	; 0x08
    6ca2:	ef cf       	rjmp	.-34     	; 0x6c82 <normalize+0xe6>
    6ca4:	f7 01       	movw	r30, r14
    6ca6:	80 85       	ldd	r24, Z+8	; 0x08
    6ca8:	91 85       	ldd	r25, Z+9	; 0x09
    6caa:	97 ff       	sbrs	r25, 7
    6cac:	2d c0       	rjmp	.+90     	; 0x6d08 <normalize+0x16c>
    6cae:	f7 01       	movw	r30, r14
    6cb0:	22 85       	ldd	r18, Z+10	; 0x0a
    6cb2:	33 85       	ldd	r19, Z+11	; 0x0b
    6cb4:	21 50       	subi	r18, 0x01	; 1
    6cb6:	31 09       	sbc	r19, r1
    6cb8:	33 87       	std	Z+11, r19	; 0x0b
    6cba:	22 87       	std	Z+10, r18	; 0x0a
    6cbc:	0c 96       	adiw	r24, 0x0c	; 12
    6cbe:	91 87       	std	Z+9, r25	; 0x09
    6cc0:	80 87       	std	Z+8, r24	; 0x08
    6cc2:	f0 cf       	rjmp	.-32     	; 0x6ca4 <normalize+0x108>
    6cc4:	f7 01       	movw	r30, r14
    6cc6:	c6 80       	ldd	r12, Z+6	; 0x06
    6cc8:	d7 80       	ldd	r13, Z+7	; 0x07
    6cca:	a0 84       	ldd	r10, Z+8	; 0x08
    6ccc:	b1 84       	ldd	r11, Z+9	; 0x09
    6cce:	b4 01       	movw	r22, r8
    6cd0:	c5 01       	movw	r24, r10
    6cd2:	59 dd       	rcall	.-1358   	; 0x6786 <Days_Per_Month>
    6cd4:	8c 15       	cp	r24, r12
    6cd6:	9d 05       	cpc	r25, r13
    6cd8:	84 f5       	brge	.+96     	; 0x6d3a <normalize+0x19e>
    6cda:	c8 1a       	sub	r12, r24
    6cdc:	d9 0a       	sbc	r13, r25
    6cde:	f7 01       	movw	r30, r14
    6ce0:	d7 82       	std	Z+7, r13	; 0x07
    6ce2:	c6 82       	std	Z+6, r12	; 0x06
    6ce4:	c5 01       	movw	r24, r10
    6ce6:	01 96       	adiw	r24, 0x01	; 1
    6ce8:	91 87       	std	Z+9, r25	; 0x09
    6cea:	80 87       	std	Z+8, r24	; 0x08
    6cec:	0c 97       	sbiw	r24, 0x0c	; 12
    6cee:	54 f3       	brlt	.-44     	; 0x6cc4 <normalize+0x128>
    6cf0:	fb e0       	ldi	r31, 0x0B	; 11
    6cf2:	af 1a       	sub	r10, r31
    6cf4:	b1 08       	sbc	r11, r1
    6cf6:	f7 01       	movw	r30, r14
    6cf8:	b1 86       	std	Z+9, r11	; 0x09
    6cfa:	a0 86       	std	Z+8, r10	; 0x08
    6cfc:	ff ef       	ldi	r31, 0xFF	; 255
    6cfe:	8f 1a       	sub	r8, r31
    6d00:	9f 0a       	sbc	r9, r31
    6d02:	f7 01       	movw	r30, r14
    6d04:	93 86       	std	Z+11, r9	; 0x0b
    6d06:	82 86       	std	Z+10, r8	; 0x0a
    6d08:	f7 01       	movw	r30, r14
    6d0a:	82 84       	ldd	r8, Z+10	; 0x0a
    6d0c:	93 84       	ldd	r9, Z+11	; 0x0b
    6d0e:	da cf       	rjmp	.-76     	; 0x6cc4 <normalize+0x128>
    6d10:	f7 01       	movw	r30, r14
    6d12:	80 85       	ldd	r24, Z+8	; 0x08
    6d14:	91 85       	ldd	r25, Z+9	; 0x09
    6d16:	9c 01       	movw	r18, r24
    6d18:	21 50       	subi	r18, 0x01	; 1
    6d1a:	31 09       	sbc	r19, r1
    6d1c:	37 fd       	sbrc	r19, 7
    6d1e:	16 c0       	rjmp	.+44     	; 0x6d4c <normalize+0x1b0>
    6d20:	31 87       	std	Z+9, r19	; 0x09
    6d22:	20 87       	std	Z+8, r18	; 0x08
    6d24:	f7 01       	movw	r30, r14
    6d26:	62 85       	ldd	r22, Z+10	; 0x0a
    6d28:	73 85       	ldd	r23, Z+11	; 0x0b
    6d2a:	80 85       	ldd	r24, Z+8	; 0x08
    6d2c:	91 85       	ldd	r25, Z+9	; 0x09
    6d2e:	2b dd       	rcall	.-1450   	; 0x6786 <Days_Per_Month>
    6d30:	88 0d       	add	r24, r8
    6d32:	99 1d       	adc	r25, r9
    6d34:	f7 01       	movw	r30, r14
    6d36:	97 83       	std	Z+7, r25	; 0x07
    6d38:	86 83       	std	Z+6, r24	; 0x06
    6d3a:	f7 01       	movw	r30, r14
    6d3c:	86 80       	ldd	r8, Z+6	; 0x06
    6d3e:	97 80       	ldd	r9, Z+7	; 0x07
    6d40:	a2 84       	ldd	r10, Z+10	; 0x0a
    6d42:	b3 84       	ldd	r11, Z+11	; 0x0b
    6d44:	18 14       	cp	r1, r8
    6d46:	19 04       	cpc	r1, r9
    6d48:	1c f7       	brge	.-58     	; 0x6d10 <normalize+0x174>
    6d4a:	0b c0       	rjmp	.+22     	; 0x6d62 <normalize+0x1c6>
    6d4c:	0b 96       	adiw	r24, 0x0b	; 11
    6d4e:	f7 01       	movw	r30, r14
    6d50:	91 87       	std	Z+9, r25	; 0x09
    6d52:	80 87       	std	Z+8, r24	; 0x08
    6d54:	f1 e0       	ldi	r31, 0x01	; 1
    6d56:	af 1a       	sub	r10, r31
    6d58:	b1 08       	sbc	r11, r1
    6d5a:	f7 01       	movw	r30, r14
    6d5c:	b3 86       	std	Z+11, r11	; 0x0b
    6d5e:	a2 86       	std	Z+10, r10	; 0x0a
    6d60:	e1 cf       	rjmp	.-62     	; 0x6d24 <normalize+0x188>
    6d62:	a5 01       	movw	r20, r10
    6d64:	44 59       	subi	r20, 0x94	; 148
    6d66:	58 4f       	sbci	r21, 0xF8	; 248
    6d68:	58 87       	std	Y+8, r21	; 0x08
    6d6a:	4f 83       	std	Y+7, r20	; 0x07
    6d6c:	35 01       	movw	r6, r10
    6d6e:	56 e4       	ldi	r21, 0x46	; 70
    6d70:	65 1a       	sub	r6, r21
    6d72:	71 08       	sbc	r7, r1
    6d74:	89 e8       	ldi	r24, 0x89	; 137
    6d76:	68 16       	cp	r6, r24
    6d78:	71 04       	cpc	r7, r1
    6d7a:	08 f0       	brcs	.+2      	; 0x6d7e <normalize+0x1e2>
    6d7c:	9b c0       	rjmp	.+310    	; 0x6eb4 <normalize+0x318>
    6d7e:	c0 84       	ldd	r12, Z+8	; 0x08
    6d80:	d1 84       	ldd	r13, Z+9	; 0x09
    6d82:	9c e0       	ldi	r25, 0x0C	; 12
    6d84:	c9 16       	cp	r12, r25
    6d86:	d1 04       	cpc	r13, r1
    6d88:	08 f0       	brcs	.+2      	; 0x6d8c <normalize+0x1f0>
    6d8a:	94 c0       	rjmp	.+296    	; 0x6eb4 <normalize+0x318>
    6d8c:	24 01       	movw	r4, r8
    6d8e:	e1 e0       	ldi	r30, 0x01	; 1
    6d90:	4e 1a       	sub	r4, r30
    6d92:	51 08       	sbc	r5, r1
    6d94:	6f 81       	ldd	r22, Y+7	; 0x07
    6d96:	78 85       	ldd	r23, Y+8	; 0x08
    6d98:	c6 01       	movw	r24, r12
    6d9a:	f5 dc       	rcall	.-1558   	; 0x6786 <Days_Per_Month>
    6d9c:	48 16       	cp	r4, r24
    6d9e:	59 06       	cpc	r5, r25
    6da0:	0c f0       	brlt	.+2      	; 0x6da4 <normalize+0x208>
    6da2:	88 c0       	rjmp	.+272    	; 0x6eb4 <normalize+0x318>
    6da4:	08 31       	cpi	r16, 0x18	; 24
    6da6:	11 05       	cpc	r17, r1
    6da8:	0c f0       	brlt	.+2      	; 0x6dac <normalize+0x210>
    6daa:	84 c0       	rjmp	.+264    	; 0x6eb4 <normalize+0x318>
    6dac:	fc e3       	ldi	r31, 0x3C	; 60
    6dae:	2f 16       	cp	r2, r31
    6db0:	31 04       	cpc	r3, r1
    6db2:	0c f0       	brlt	.+2      	; 0x6db6 <normalize+0x21a>
    6db4:	7f c0       	rjmp	.+254    	; 0x6eb4 <normalize+0x318>
    6db6:	4d 81       	ldd	r20, Y+5	; 0x05
    6db8:	5e 81       	ldd	r21, Y+6	; 0x06
    6dba:	4c 33       	cpi	r20, 0x3C	; 60
    6dbc:	51 05       	cpc	r21, r1
    6dbe:	0c f0       	brlt	.+2      	; 0x6dc2 <normalize+0x226>
    6dc0:	79 c0       	rjmp	.+242    	; 0x6eb4 <normalize+0x318>
    6dc2:	2d e6       	ldi	r18, 0x6D	; 109
    6dc4:	31 e0       	ldi	r19, 0x01	; 1
    6dc6:	d3 01       	movw	r26, r6
    6dc8:	0e 94 9c df 	call	0x1bf38	; 0x1bf38 <__usmulhisi3>
    6dcc:	f6 01       	movw	r30, r12
    6dce:	ee 0f       	add	r30, r30
    6dd0:	ff 1f       	adc	r31, r31
    6dd2:	e5 56       	subi	r30, 0x65	; 101
    6dd4:	fc 4f       	sbci	r31, 0xFC	; 252
    6dd6:	20 81       	ld	r18, Z
    6dd8:	31 81       	ldd	r19, Z+1	; 0x01
    6dda:	dc 01       	movw	r26, r24
    6ddc:	cb 01       	movw	r24, r22
    6dde:	82 0f       	add	r24, r18
    6de0:	93 1f       	adc	r25, r19
    6de2:	a1 1d       	adc	r26, r1
    6de4:	b1 1d       	adc	r27, r1
    6de6:	05 2c       	mov	r0, r5
    6de8:	00 0c       	add	r0, r0
    6dea:	66 08       	sbc	r6, r6
    6dec:	77 08       	sbc	r7, r7
    6dee:	48 0e       	add	r4, r24
    6df0:	59 1e       	adc	r5, r25
    6df2:	6a 1e       	adc	r6, r26
    6df4:	7b 1e       	adc	r7, r27
    6df6:	1a 14       	cp	r1, r10
    6df8:	1b 04       	cpc	r1, r11
    6dfa:	1c f4       	brge	.+6      	; 0x6e02 <normalize+0x266>
    6dfc:	51 e0       	ldi	r21, 0x01	; 1
    6dfe:	a5 1a       	sub	r10, r21
    6e00:	b1 08       	sbc	r11, r1
    6e02:	45 01       	movw	r8, r10
    6e04:	95 94       	asr	r9
    6e06:	87 94       	ror	r8
    6e08:	95 94       	asr	r9
    6e0a:	87 94       	ror	r8
    6e0c:	88 ec       	ldi	r24, 0xC8	; 200
    6e0e:	a8 16       	cp	r10, r24
    6e10:	b1 04       	cpc	r11, r1
    6e12:	1c f0       	brlt	.+6      	; 0x6e1a <normalize+0x27e>
    6e14:	91 e0       	ldi	r25, 0x01	; 1
    6e16:	89 1a       	sub	r8, r25
    6e18:	91 08       	sbc	r9, r1
    6e1a:	09 2c       	mov	r0, r9
    6e1c:	00 0c       	add	r0, r0
    6e1e:	aa 08       	sbc	r10, r10
    6e20:	bb 08       	sbc	r11, r11
    6e22:	84 0c       	add	r8, r4
    6e24:	95 1c       	adc	r9, r5
    6e26:	a6 1c       	adc	r10, r6
    6e28:	b7 1c       	adc	r11, r7
    6e2a:	24 01       	movw	r4, r8
    6e2c:	35 01       	movw	r6, r10
    6e2e:	e1 e1       	ldi	r30, 0x11	; 17
    6e30:	4e 1a       	sub	r4, r30
    6e32:	51 08       	sbc	r5, r1
    6e34:	61 08       	sbc	r6, r1
    6e36:	71 08       	sbc	r7, r1
    6e38:	f2 e0       	ldi	r31, 0x02	; 2
    6e3a:	cf 16       	cp	r12, r31
    6e3c:	d1 04       	cpc	r13, r1
    6e3e:	64 f0       	brlt	.+24     	; 0x6e58 <normalize+0x2bc>
    6e40:	8f 81       	ldd	r24, Y+7	; 0x07
    6e42:	98 85       	ldd	r25, Y+8	; 0x08
    6e44:	7b dc       	rcall	.-1802   	; 0x673c <IS_Leap>
    6e46:	89 2b       	or	r24, r25
    6e48:	39 f0       	breq	.+14     	; 0x6e58 <normalize+0x2bc>
    6e4a:	24 01       	movw	r4, r8
    6e4c:	35 01       	movw	r6, r10
    6e4e:	40 e1       	ldi	r20, 0x10	; 16
    6e50:	44 1a       	sub	r4, r20
    6e52:	51 08       	sbc	r5, r1
    6e54:	61 08       	sbc	r6, r1
    6e56:	71 08       	sbc	r7, r1
    6e58:	a8 e1       	ldi	r26, 0x18	; 24
    6e5a:	b0 e0       	ldi	r27, 0x00	; 0
    6e5c:	a3 01       	movw	r20, r6
    6e5e:	92 01       	movw	r18, r4
    6e60:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
    6e64:	01 2e       	mov	r0, r17
    6e66:	00 0c       	add	r0, r0
    6e68:	22 0b       	sbc	r18, r18
    6e6a:	33 0b       	sbc	r19, r19
    6e6c:	a9 01       	movw	r20, r18
    6e6e:	98 01       	movw	r18, r16
    6e70:	26 0f       	add	r18, r22
    6e72:	37 1f       	adc	r19, r23
    6e74:	48 1f       	adc	r20, r24
    6e76:	59 1f       	adc	r21, r25
    6e78:	ac e3       	ldi	r26, 0x3C	; 60
    6e7a:	b0 e0       	ldi	r27, 0x00	; 0
    6e7c:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
    6e80:	81 01       	movw	r16, r2
    6e82:	03 2c       	mov	r0, r3
    6e84:	00 0c       	add	r0, r0
    6e86:	22 0b       	sbc	r18, r18
    6e88:	33 0b       	sbc	r19, r19
    6e8a:	a9 01       	movw	r20, r18
    6e8c:	98 01       	movw	r18, r16
    6e8e:	26 0f       	add	r18, r22
    6e90:	37 1f       	adc	r19, r23
    6e92:	48 1f       	adc	r20, r24
    6e94:	59 1f       	adc	r21, r25
    6e96:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
    6e9a:	ed 81       	ldd	r30, Y+5	; 0x05
    6e9c:	fe 81       	ldd	r31, Y+6	; 0x06
    6e9e:	8f 01       	movw	r16, r30
    6ea0:	ff 0f       	add	r31, r31
    6ea2:	22 0b       	sbc	r18, r18
    6ea4:	33 0b       	sbc	r19, r19
    6ea6:	48 01       	movw	r8, r16
    6ea8:	59 01       	movw	r10, r18
    6eaa:	86 0e       	add	r8, r22
    6eac:	97 1e       	adc	r9, r23
    6eae:	a8 1e       	adc	r10, r24
    6eb0:	b9 1e       	adc	r11, r25
    6eb2:	04 c0       	rjmp	.+8      	; 0x6ebc <normalize+0x320>
    6eb4:	88 24       	eor	r8, r8
    6eb6:	8a 94       	dec	r8
    6eb8:	98 2c       	mov	r9, r8
    6eba:	54 01       	movw	r10, r8
    6ebc:	49 85       	ldd	r20, Y+9	; 0x09
    6ebe:	5a 85       	ldd	r21, Y+10	; 0x0a
    6ec0:	45 2b       	or	r20, r21
    6ec2:	e9 f0       	breq	.+58     	; 0x6efe <normalize+0x362>
    6ec4:	ce 01       	movw	r24, r28
    6ec6:	01 96       	adiw	r24, 0x01	; 1
    6ec8:	7d dd       	rcall	.-1286   	; 0x69c4 <gettimezone>
    6eca:	a9 81       	ldd	r26, Y+1	; 0x01
    6ecc:	ba 81       	ldd	r27, Y+2	; 0x02
    6ece:	2c e3       	ldi	r18, 0x3C	; 60
    6ed0:	30 e0       	ldi	r19, 0x00	; 0
    6ed2:	0e 94 9c df 	call	0x1bf38	; 0x1bf38 <__usmulhisi3>
    6ed6:	2b 01       	movw	r4, r22
    6ed8:	3c 01       	movw	r6, r24
    6eda:	c5 01       	movw	r24, r10
    6edc:	b4 01       	movw	r22, r8
    6ede:	e2 dd       	rcall	.-1084   	; 0x6aa4 <is_dst>
    6ee0:	89 2b       	or	r24, r25
    6ee2:	51 f0       	breq	.+20     	; 0x6ef8 <normalize+0x35c>
    6ee4:	50 e1       	ldi	r21, 0x10	; 16
    6ee6:	45 1a       	sub	r4, r21
    6ee8:	5e e0       	ldi	r21, 0x0E	; 14
    6eea:	55 0a       	sbc	r5, r21
    6eec:	61 08       	sbc	r6, r1
    6eee:	71 08       	sbc	r7, r1
    6ef0:	cc 24       	eor	r12, r12
    6ef2:	c3 94       	inc	r12
    6ef4:	d1 2c       	mov	r13, r1
    6ef6:	08 c0       	rjmp	.+16     	; 0x6f08 <normalize+0x36c>
    6ef8:	c1 2c       	mov	r12, r1
    6efa:	d1 2c       	mov	r13, r1
    6efc:	05 c0       	rjmp	.+10     	; 0x6f08 <normalize+0x36c>
    6efe:	c1 2c       	mov	r12, r1
    6f00:	d1 2c       	mov	r13, r1
    6f02:	41 2c       	mov	r4, r1
    6f04:	51 2c       	mov	r5, r1
    6f06:	32 01       	movw	r6, r4
    6f08:	87 01       	movw	r16, r14
    6f0a:	a3 01       	movw	r20, r6
    6f0c:	92 01       	movw	r18, r4
    6f0e:	c5 01       	movw	r24, r10
    6f10:	b4 01       	movw	r22, r8
    6f12:	5a dc       	rcall	.-1868   	; 0x67c8 <time_to_tm>
    6f14:	c1 14       	cp	r12, r1
    6f16:	d1 04       	cpc	r13, r1
    6f18:	29 f0       	breq	.+10     	; 0x6f24 <normalize+0x388>
    6f1a:	21 e0       	ldi	r18, 0x01	; 1
    6f1c:	30 e0       	ldi	r19, 0x00	; 0
    6f1e:	f7 01       	movw	r30, r14
    6f20:	31 8b       	std	Z+17, r19	; 0x11
    6f22:	20 8b       	std	Z+16, r18	; 0x10
    6f24:	2a 96       	adiw	r28, 0x0a	; 10
    6f26:	e2 e1       	ldi	r30, 0x12	; 18
    6f28:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

00006f2c <timegm>:
    6f2c:	60 e0       	ldi	r22, 0x00	; 0
    6f2e:	70 e0       	ldi	r23, 0x00	; 0
    6f30:	35 ce       	rjmp	.-918    	; 0x6b9c <normalize>
    6f32:	08 95       	ret

00006f34 <setdate_r>:
    6f34:	cf 92       	push	r12
    6f36:	df 92       	push	r13
    6f38:	ef 92       	push	r14
    6f3a:	ff 92       	push	r15
    6f3c:	cf 93       	push	r28
    6f3e:	df 93       	push	r29
    6f40:	cd b7       	in	r28, 0x3d	; 61
    6f42:	de b7       	in	r29, 0x3e	; 62
    6f44:	a5 97       	sbiw	r28, 0x25	; 37
    6f46:	0f b6       	in	r0, 0x3f	; 63
    6f48:	f8 94       	cli
    6f4a:	de bf       	out	0x3e, r29	; 62
    6f4c:	0f be       	out	0x3f, r0	; 63
    6f4e:	cd bf       	out	0x3d, r28	; 61
    6f50:	9d a3       	std	Y+37, r25	; 0x25
    6f52:	8c a3       	std	Y+36, r24	; 0x24
    6f54:	1f 82       	std	Y+7, r1	; 0x07
    6f56:	1e 82       	std	Y+6, r1	; 0x06
    6f58:	19 86       	std	Y+9, r1	; 0x09
    6f5a:	18 86       	std	Y+8, r1	; 0x08
    6f5c:	1b 86       	std	Y+11, r1	; 0x0b
    6f5e:	1a 86       	std	Y+10, r1	; 0x0a
    6f60:	1d 86       	std	Y+13, r1	; 0x0d
    6f62:	1c 86       	std	Y+12, r1	; 0x0c
    6f64:	1f 86       	std	Y+15, r1	; 0x0f
    6f66:	1e 86       	std	Y+14, r1	; 0x0e
    6f68:	19 8a       	std	Y+17, r1	; 0x11
    6f6a:	18 8a       	std	Y+16, r1	; 0x10
    6f6c:	8c a1       	ldd	r24, Y+36	; 0x24
    6f6e:	9d a1       	ldd	r25, Y+37	; 0x25
    6f70:	fc 01       	movw	r30, r24
    6f72:	20 81       	ld	r18, Z
    6f74:	20 32       	cpi	r18, 0x20	; 32
    6f76:	21 f4       	brne	.+8      	; 0x6f80 <setdate_r+0x4c>
    6f78:	01 96       	adiw	r24, 0x01	; 1
    6f7a:	9d a3       	std	Y+37, r25	; 0x25
    6f7c:	8c a3       	std	Y+36, r24	; 0x24
    6f7e:	f6 cf       	rjmp	.-20     	; 0x6f6c <setdate_r+0x38>
    6f80:	4a e0       	ldi	r20, 0x0A	; 10
    6f82:	50 e0       	ldi	r21, 0x00	; 0
    6f84:	be 01       	movw	r22, r28
    6f86:	6c 5d       	subi	r22, 0xDC	; 220
    6f88:	7f 4f       	sbci	r23, 0xFF	; 255
    6f8a:	0e 94 ad 43 	call	0x875a	; 0x875a <strtol>
    6f8e:	79 8b       	std	Y+17, r23	; 0x11
    6f90:	68 8b       	std	Y+16, r22	; 0x10
    6f92:	8c a1       	ldd	r24, Y+36	; 0x24
    6f94:	9d a1       	ldd	r25, Y+37	; 0x25
    6f96:	fc 01       	movw	r30, r24
    6f98:	20 81       	ld	r18, Z
    6f9a:	20 32       	cpi	r18, 0x20	; 32
    6f9c:	21 f4       	brne	.+8      	; 0x6fa6 <setdate_r+0x72>
    6f9e:	01 96       	adiw	r24, 0x01	; 1
    6fa0:	9d a3       	std	Y+37, r25	; 0x25
    6fa2:	8c a3       	std	Y+36, r24	; 0x24
    6fa4:	f6 cf       	rjmp	.-20     	; 0x6f92 <setdate_r+0x5e>
    6fa6:	4a e0       	ldi	r20, 0x0A	; 10
    6fa8:	50 e0       	ldi	r21, 0x00	; 0
    6faa:	be 01       	movw	r22, r28
    6fac:	6c 5d       	subi	r22, 0xDC	; 220
    6fae:	7f 4f       	sbci	r23, 0xFF	; 255
    6fb0:	0e 94 ad 43 	call	0x875a	; 0x875a <strtol>
    6fb4:	7f 87       	std	Y+15, r23	; 0x0f
    6fb6:	6e 87       	std	Y+14, r22	; 0x0e
    6fb8:	8c a1       	ldd	r24, Y+36	; 0x24
    6fba:	9d a1       	ldd	r25, Y+37	; 0x25
    6fbc:	fc 01       	movw	r30, r24
    6fbe:	20 81       	ld	r18, Z
    6fc0:	20 32       	cpi	r18, 0x20	; 32
    6fc2:	21 f4       	brne	.+8      	; 0x6fcc <setdate_r+0x98>
    6fc4:	01 96       	adiw	r24, 0x01	; 1
    6fc6:	9d a3       	std	Y+37, r25	; 0x25
    6fc8:	8c a3       	std	Y+36, r24	; 0x24
    6fca:	f6 cf       	rjmp	.-20     	; 0x6fb8 <setdate_r+0x84>
    6fcc:	4a e0       	ldi	r20, 0x0A	; 10
    6fce:	50 e0       	ldi	r21, 0x00	; 0
    6fd0:	be 01       	movw	r22, r28
    6fd2:	6c 5d       	subi	r22, 0xDC	; 220
    6fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    6fd6:	0e 94 ad 43 	call	0x875a	; 0x875a <strtol>
    6fda:	7d 87       	std	Y+13, r23	; 0x0d
    6fdc:	6c 87       	std	Y+12, r22	; 0x0c
    6fde:	8c a1       	ldd	r24, Y+36	; 0x24
    6fe0:	9d a1       	ldd	r25, Y+37	; 0x25
    6fe2:	fc 01       	movw	r30, r24
    6fe4:	20 81       	ld	r18, Z
    6fe6:	20 32       	cpi	r18, 0x20	; 32
    6fe8:	21 f4       	brne	.+8      	; 0x6ff2 <setdate_r+0xbe>
    6fea:	01 96       	adiw	r24, 0x01	; 1
    6fec:	9d a3       	std	Y+37, r25	; 0x25
    6fee:	8c a3       	std	Y+36, r24	; 0x24
    6ff0:	f6 cf       	rjmp	.-20     	; 0x6fde <setdate_r+0xaa>
    6ff2:	4a e0       	ldi	r20, 0x0A	; 10
    6ff4:	50 e0       	ldi	r21, 0x00	; 0
    6ff6:	be 01       	movw	r22, r28
    6ff8:	6c 5d       	subi	r22, 0xDC	; 220
    6ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    6ffc:	0e 94 ad 43 	call	0x875a	; 0x875a <strtol>
    7000:	7b 87       	std	Y+11, r23	; 0x0b
    7002:	6a 87       	std	Y+10, r22	; 0x0a
    7004:	ec a1       	ldd	r30, Y+36	; 0x24
    7006:	fd a1       	ldd	r31, Y+37	; 0x25
    7008:	80 81       	ld	r24, Z
    700a:	88 23       	and	r24, r24
    700c:	39 f0       	breq	.+14     	; 0x701c <setdate_r+0xe8>
    700e:	80 32       	cpi	r24, 0x20	; 32
    7010:	11 f0       	breq	.+4      	; 0x7016 <setdate_r+0xe2>
    7012:	8a 33       	cpi	r24, 0x3A	; 58
    7014:	19 f4       	brne	.+6      	; 0x701c <setdate_r+0xe8>
    7016:	31 96       	adiw	r30, 0x01	; 1
    7018:	fd a3       	std	Y+37, r31	; 0x25
    701a:	ec a3       	std	Y+36, r30	; 0x24
    701c:	4a e0       	ldi	r20, 0x0A	; 10
    701e:	50 e0       	ldi	r21, 0x00	; 0
    7020:	be 01       	movw	r22, r28
    7022:	6c 5d       	subi	r22, 0xDC	; 220
    7024:	7f 4f       	sbci	r23, 0xFF	; 255
    7026:	8c a1       	ldd	r24, Y+36	; 0x24
    7028:	9d a1       	ldd	r25, Y+37	; 0x25
    702a:	0e 94 ad 43 	call	0x875a	; 0x875a <strtol>
    702e:	79 87       	std	Y+9, r23	; 0x09
    7030:	68 87       	std	Y+8, r22	; 0x08
    7032:	ec a1       	ldd	r30, Y+36	; 0x24
    7034:	fd a1       	ldd	r31, Y+37	; 0x25
    7036:	80 81       	ld	r24, Z
    7038:	88 23       	and	r24, r24
    703a:	39 f0       	breq	.+14     	; 0x704a <setdate_r+0x116>
    703c:	80 32       	cpi	r24, 0x20	; 32
    703e:	11 f0       	breq	.+4      	; 0x7044 <setdate_r+0x110>
    7040:	8a 33       	cpi	r24, 0x3A	; 58
    7042:	19 f4       	brne	.+6      	; 0x704a <setdate_r+0x116>
    7044:	31 96       	adiw	r30, 0x01	; 1
    7046:	fd a3       	std	Y+37, r31	; 0x25
    7048:	ec a3       	std	Y+36, r30	; 0x24
    704a:	4a e0       	ldi	r20, 0x0A	; 10
    704c:	50 e0       	ldi	r21, 0x00	; 0
    704e:	be 01       	movw	r22, r28
    7050:	6c 5d       	subi	r22, 0xDC	; 220
    7052:	7f 4f       	sbci	r23, 0xFF	; 255
    7054:	8c a1       	ldd	r24, Y+36	; 0x24
    7056:	9d a1       	ldd	r25, Y+37	; 0x25
    7058:	0e 94 ad 43 	call	0x875a	; 0x875a <strtol>
    705c:	7f 83       	std	Y+7, r23	; 0x07
    705e:	6e 83       	std	Y+6, r22	; 0x06
    7060:	2e 85       	ldd	r18, Y+14	; 0x0e
    7062:	3f 85       	ldd	r19, Y+15	; 0x0f
    7064:	21 50       	subi	r18, 0x01	; 1
    7066:	31 09       	sbc	r19, r1
    7068:	3f 87       	std	Y+15, r19	; 0x0f
    706a:	2e 87       	std	Y+14, r18	; 0x0e
    706c:	88 89       	ldd	r24, Y+16	; 0x10
    706e:	99 89       	ldd	r25, Y+17	; 0x11
    7070:	ac 01       	movw	r20, r24
    7072:	42 5b       	subi	r20, 0xB2	; 178
    7074:	57 40       	sbci	r21, 0x07	; 7
    7076:	45 34       	cpi	r20, 0x45	; 69
    7078:	51 05       	cpc	r21, r1
    707a:	38 f0       	brcs	.+14     	; 0x708a <setdate_r+0x156>
    707c:	ed b7       	in	r30, 0x3d	; 61
    707e:	fe b7       	in	r31, 0x3e	; 62
    7080:	95 83       	std	Z+5, r25	; 0x05
    7082:	84 83       	std	Z+4, r24	; 0x04
    7084:	8d e2       	ldi	r24, 0x2D	; 45
    7086:	97 e0       	ldi	r25, 0x07	; 7
    7088:	34 c0       	rjmp	.+104    	; 0x70f2 <setdate_r+0x1be>
    708a:	8c 56       	subi	r24, 0x6C	; 108
    708c:	97 40       	sbci	r25, 0x07	; 7
    708e:	99 8b       	std	Y+17, r25	; 0x11
    7090:	88 8b       	std	Y+16, r24	; 0x10
    7092:	2c 30       	cpi	r18, 0x0C	; 12
    7094:	31 05       	cpc	r19, r1
    7096:	38 f0       	brcs	.+14     	; 0x70a6 <setdate_r+0x172>
    7098:	ed b7       	in	r30, 0x3d	; 61
    709a:	fe b7       	in	r31, 0x3e	; 62
    709c:	95 83       	std	Z+5, r25	; 0x05
    709e:	84 83       	std	Z+4, r24	; 0x04
    70a0:	8c e1       	ldi	r24, 0x1C	; 28
    70a2:	97 e0       	ldi	r25, 0x07	; 7
    70a4:	26 c0       	rjmp	.+76     	; 0x70f2 <setdate_r+0x1be>
    70a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    70a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    70aa:	9c 01       	movw	r18, r24
    70ac:	21 50       	subi	r18, 0x01	; 1
    70ae:	31 09       	sbc	r19, r1
    70b0:	2f 31       	cpi	r18, 0x1F	; 31
    70b2:	31 05       	cpc	r19, r1
    70b4:	38 f0       	brcs	.+14     	; 0x70c4 <setdate_r+0x190>
    70b6:	ed b7       	in	r30, 0x3d	; 61
    70b8:	fe b7       	in	r31, 0x3e	; 62
    70ba:	95 83       	std	Z+5, r25	; 0x05
    70bc:	84 83       	std	Z+4, r24	; 0x04
    70be:	8b e0       	ldi	r24, 0x0B	; 11
    70c0:	97 e0       	ldi	r25, 0x07	; 7
    70c2:	17 c0       	rjmp	.+46     	; 0x70f2 <setdate_r+0x1be>
    70c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    70c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    70c8:	88 31       	cpi	r24, 0x18	; 24
    70ca:	91 05       	cpc	r25, r1
    70cc:	38 f0       	brcs	.+14     	; 0x70dc <setdate_r+0x1a8>
    70ce:	ed b7       	in	r30, 0x3d	; 61
    70d0:	fe b7       	in	r31, 0x3e	; 62
    70d2:	95 83       	std	Z+5, r25	; 0x05
    70d4:	84 83       	std	Z+4, r24	; 0x04
    70d6:	89 ef       	ldi	r24, 0xF9	; 249
    70d8:	96 e0       	ldi	r25, 0x06	; 6
    70da:	0b c0       	rjmp	.+22     	; 0x70f2 <setdate_r+0x1be>
    70dc:	88 85       	ldd	r24, Y+8	; 0x08
    70de:	99 85       	ldd	r25, Y+9	; 0x09
    70e0:	8c 33       	cpi	r24, 0x3C	; 60
    70e2:	91 05       	cpc	r25, r1
    70e4:	68 f0       	brcs	.+26     	; 0x7100 <setdate_r+0x1cc>
    70e6:	ed b7       	in	r30, 0x3d	; 61
    70e8:	fe b7       	in	r31, 0x3e	; 62
    70ea:	95 83       	std	Z+5, r25	; 0x05
    70ec:	84 83       	std	Z+4, r24	; 0x04
    70ee:	88 ee       	ldi	r24, 0xE8	; 232
    70f0:	96 e0       	ldi	r25, 0x06	; 6
    70f2:	a0 e0       	ldi	r26, 0x00	; 0
    70f4:	81 83       	std	Z+1, r24	; 0x01
    70f6:	92 83       	std	Z+2, r25	; 0x02
    70f8:	a3 83       	std	Z+3, r26	; 0x03
    70fa:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    70fe:	25 c0       	rjmp	.+74     	; 0x714a <setdate_r+0x216>
    7100:	ce 01       	movw	r24, r28
    7102:	06 96       	adiw	r24, 0x06	; 6
    7104:	13 df       	rcall	.-474    	; 0x6f2c <timegm>
    7106:	6b 01       	movw	r12, r22
    7108:	7c 01       	movw	r14, r24
    710a:	6c 8f       	std	Y+28, r22	; 0x1c
    710c:	7d 8f       	std	Y+29, r23	; 0x1d
    710e:	8e 8f       	std	Y+30, r24	; 0x1e
    7110:	9f 8f       	std	Y+31, r25	; 0x1f
    7112:	18 a2       	std	Y+32, r1	; 0x20
    7114:	19 a2       	std	Y+33, r1	; 0x21
    7116:	1a a2       	std	Y+34, r1	; 0x22
    7118:	1b a2       	std	Y+35, r1	; 0x23
    711a:	be 01       	movw	r22, r28
    711c:	64 5e       	subi	r22, 0xE4	; 228
    711e:	7f 4f       	sbci	r23, 0xFF	; 255
    7120:	80 e0       	ldi	r24, 0x00	; 0
    7122:	90 e0       	ldi	r25, 0x00	; 0
    7124:	03 db       	rcall	.-2554   	; 0x672c <clock_settime>
    7126:	b7 01       	movw	r22, r14
    7128:	a6 01       	movw	r20, r12
    712a:	81 e0       	ldi	r24, 0x01	; 1
    712c:	90 e0       	ldi	r25, 0x00	; 0
    712e:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <rtc_init>
    7132:	81 11       	cpse	r24, r1
    7134:	0d c0       	rjmp	.+26     	; 0x7150 <setdate_r+0x21c>
    7136:	81 ed       	ldi	r24, 0xD1	; 209
    7138:	96 e0       	ldi	r25, 0x06	; 6
    713a:	a0 e0       	ldi	r26, 0x00	; 0
    713c:	ed b7       	in	r30, 0x3d	; 61
    713e:	fe b7       	in	r31, 0x3e	; 62
    7140:	81 83       	std	Z+1, r24	; 0x01
    7142:	92 83       	std	Z+2, r25	; 0x02
    7144:	a3 83       	std	Z+3, r26	; 0x03
    7146:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    714a:	8f ef       	ldi	r24, 0xFF	; 255
    714c:	9f ef       	ldi	r25, 0xFF	; 255
    714e:	02 c0       	rjmp	.+4      	; 0x7154 <setdate_r+0x220>
    7150:	80 e0       	ldi	r24, 0x00	; 0
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	a5 96       	adiw	r28, 0x25	; 37
    7156:	0f b6       	in	r0, 0x3f	; 63
    7158:	f8 94       	cli
    715a:	de bf       	out	0x3e, r29	; 62
    715c:	0f be       	out	0x3f, r0	; 63
    715e:	cd bf       	out	0x3d, r28	; 61
    7160:	df 91       	pop	r29
    7162:	cf 91       	pop	r28
    7164:	ff 90       	pop	r15
    7166:	ef 90       	pop	r14
    7168:	df 90       	pop	r13
    716a:	cf 90       	pop	r12
    716c:	08 95       	ret

0000716e <setdate>:
    716e:	ab e2       	ldi	r26, 0x2B	; 43
    7170:	b0 e0       	ldi	r27, 0x00	; 0
    7172:	ed eb       	ldi	r30, 0xBD	; 189
    7174:	f8 e3       	ldi	r31, 0x38	; 56
    7176:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    717a:	8f e3       	ldi	r24, 0x3F	; 63
    717c:	97 e0       	ldi	r25, 0x07	; 7
    717e:	a0 e0       	ldi	r26, 0x00	; 0
    7180:	ed b7       	in	r30, 0x3d	; 61
    7182:	fe b7       	in	r31, 0x3e	; 62
    7184:	81 83       	std	Z+1, r24	; 0x01
    7186:	92 83       	std	Z+2, r25	; 0x02
    7188:	a3 83       	std	Z+3, r26	; 0x03
    718a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    718e:	40 91 cb 1c 	lds	r20, 0x1CCB	; 0x801ccb <__iob>
    7192:	50 91 cc 1c 	lds	r21, 0x1CCC	; 0x801ccc <__iob+0x1>
    7196:	66 e2       	ldi	r22, 0x26	; 38
    7198:	70 e0       	ldi	r23, 0x00	; 0
    719a:	ce 01       	movw	r24, r28
    719c:	04 96       	adiw	r24, 0x04	; 4
    719e:	0e 94 ce 73 	call	0xe79c	; 0xe79c <fgets>
    71a2:	ce 01       	movw	r24, r28
    71a4:	04 96       	adiw	r24, 0x04	; 4
    71a6:	c6 de       	rcall	.-628    	; 0x6f34 <setdate_r>
    71a8:	ab 96       	adiw	r28, 0x2b	; 43
    71aa:	e2 e0       	ldi	r30, 0x02	; 2
    71ac:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000071b0 <find_dst>:
    71b0:	a8 e2       	ldi	r26, 0x28	; 40
    71b2:	b0 e0       	ldi	r27, 0x00	; 0
    71b4:	ee ed       	ldi	r30, 0xDE	; 222
    71b6:	f8 e3       	ldi	r31, 0x38	; 56
    71b8:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    71bc:	3c 01       	movw	r6, r24
    71be:	1a 01       	movw	r2, r20
    71c0:	2b 01       	movw	r4, r22
    71c2:	49 01       	movw	r8, r18
    71c4:	1c a3       	std	Y+36, r17	; 0x24
    71c6:	0b a3       	std	Y+35, r16	; 0x23
    71c8:	de a2       	std	Y+38, r13	; 0x26
    71ca:	cd a2       	std	Y+37, r12	; 0x25
    71cc:	b8 a6       	std	Y+40, r11	; 0x28
    71ce:	af a2       	std	Y+39, r10	; 0x27
    71d0:	be 01       	movw	r22, r28
    71d2:	61 5e       	subi	r22, 0xE1	; 225
    71d4:	7f 4f       	sbci	r23, 0xFF	; 255
    71d6:	ce 01       	movw	r24, r28
    71d8:	47 96       	adiw	r24, 0x17	; 23
    71da:	15 dc       	rcall	.-2006   	; 0x6a06 <gettimeofday>
    71dc:	af 8d       	ldd	r26, Y+31	; 0x1f
    71de:	b8 a1       	ldd	r27, Y+32	; 0x20
    71e0:	2c e3       	ldi	r18, 0x3C	; 60
    71e2:	30 e0       	ldi	r19, 0x00	; 0
    71e4:	0e 94 9c df 	call	0x1bf38	; 0x1bf38 <__usmulhisi3>
    71e8:	5b 01       	movw	r10, r22
    71ea:	6c 01       	movw	r12, r24
    71ec:	61 14       	cp	r6, r1
    71ee:	71 04       	cpc	r7, r1
    71f0:	31 f0       	breq	.+12     	; 0x71fe <find_dst+0x4e>
    71f2:	20 e1       	ldi	r18, 0x10	; 16
    71f4:	a2 1a       	sub	r10, r18
    71f6:	2e e0       	ldi	r18, 0x0E	; 14
    71f8:	b2 0a       	sbc	r11, r18
    71fa:	c1 08       	sbc	r12, r1
    71fc:	d1 08       	sbc	r13, r1
    71fe:	81 14       	cp	r8, r1
    7200:	91 04       	cpc	r9, r1
    7202:	39 f0       	breq	.+14     	; 0x7212 <find_dst+0x62>
    7204:	4c e6       	ldi	r20, 0x6C	; 108
    7206:	84 1a       	sub	r8, r20
    7208:	47 e0       	ldi	r20, 0x07	; 7
    720a:	94 0a       	sbc	r9, r20
    720c:	9c 86       	std	Y+12, r9	; 0x0c
    720e:	8b 86       	std	Y+11, r8	; 0x0b
    7210:	11 c0       	rjmp	.+34     	; 0x7234 <find_dst+0x84>
    7212:	21 14       	cp	r2, r1
    7214:	31 04       	cpc	r3, r1
    7216:	41 04       	cpc	r4, r1
    7218:	51 04       	cpc	r5, r1
    721a:	21 f4       	brne	.+8      	; 0x7224 <find_dst+0x74>
    721c:	2f 88       	ldd	r2, Y+23	; 0x17
    721e:	38 8c       	ldd	r3, Y+24	; 0x18
    7220:	49 8c       	ldd	r4, Y+25	; 0x19
    7222:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7224:	8e 01       	movw	r16, r28
    7226:	0f 5f       	subi	r16, 0xFF	; 255
    7228:	1f 4f       	sbci	r17, 0xFF	; 255
    722a:	a6 01       	movw	r20, r12
    722c:	95 01       	movw	r18, r10
    722e:	c2 01       	movw	r24, r4
    7230:	b1 01       	movw	r22, r2
    7232:	ca da       	rcall	.-2668   	; 0x67c8 <time_to_tm>
    7234:	8b a1       	ldd	r24, Y+35	; 0x23
    7236:	9c a1       	ldd	r25, Y+36	; 0x24
    7238:	01 97       	sbiw	r24, 0x01	; 1
    723a:	9a 87       	std	Y+10, r25	; 0x0a
    723c:	89 87       	std	Y+9, r24	; 0x09
    723e:	81 e0       	ldi	r24, 0x01	; 1
    7240:	90 e0       	ldi	r25, 0x00	; 0
    7242:	98 87       	std	Y+8, r25	; 0x08
    7244:	8f 83       	std	Y+7, r24	; 0x07
    7246:	8f a1       	ldd	r24, Y+39	; 0x27
    7248:	98 a5       	ldd	r25, Y+40	; 0x28
    724a:	9e 83       	std	Y+6, r25	; 0x06
    724c:	8d 83       	std	Y+5, r24	; 0x05
    724e:	1c 82       	std	Y+4, r1	; 0x04
    7250:	1b 82       	std	Y+3, r1	; 0x03
    7252:	1a 82       	std	Y+2, r1	; 0x02
    7254:	19 82       	std	Y+1, r1	; 0x01
    7256:	ce 01       	movw	r24, r28
    7258:	01 96       	adiw	r24, 0x01	; 1
    725a:	68 de       	rcall	.-816    	; 0x6f2c <timegm>
    725c:	45 01       	movw	r8, r10
    725e:	56 01       	movw	r10, r12
    7260:	86 0e       	add	r8, r22
    7262:	97 1e       	adc	r9, r23
    7264:	a8 1e       	adc	r10, r24
    7266:	b9 1e       	adc	r11, r25
    7268:	8e 01       	movw	r16, r28
    726a:	0f 5f       	subi	r16, 0xFF	; 255
    726c:	1f 4f       	sbci	r17, 0xFF	; 255
    726e:	20 e0       	ldi	r18, 0x00	; 0
    7270:	30 e0       	ldi	r19, 0x00	; 0
    7272:	a9 01       	movw	r20, r18
    7274:	c5 01       	movw	r24, r10
    7276:	b4 01       	movw	r22, r8
    7278:	a7 da       	rcall	.-2738   	; 0x67c8 <time_to_tm>
    727a:	2d 85       	ldd	r18, Y+13	; 0x0d
    727c:	3e 85       	ldd	r19, Y+14	; 0x0e
    727e:	e7 e0       	ldi	r30, 0x07	; 7
    7280:	f0 e0       	ldi	r31, 0x00	; 0
    7282:	c9 01       	movw	r24, r18
    7284:	bf 01       	movw	r22, r30
    7286:	0e 94 42 df 	call	0x1be84	; 0x1be84 <__divmodhi4>
    728a:	4d a1       	ldd	r20, Y+37	; 0x25
    728c:	5e a1       	ldd	r21, Y+38	; 0x26
    728e:	48 17       	cp	r20, r24
    7290:	59 07       	cpc	r21, r25
    7292:	21 f4       	brne	.+8      	; 0x729c <find_dst+0xec>
    7294:	51 e0       	ldi	r21, 0x01	; 1
    7296:	e5 1a       	sub	r14, r21
    7298:	f1 08       	sbc	r15, r1
    729a:	51 f0       	breq	.+20     	; 0x72b0 <find_dst+0x100>
    729c:	80 e8       	ldi	r24, 0x80	; 128
    729e:	88 0e       	add	r8, r24
    72a0:	81 e5       	ldi	r24, 0x51	; 81
    72a2:	98 1e       	adc	r9, r24
    72a4:	81 e0       	ldi	r24, 0x01	; 1
    72a6:	a8 1e       	adc	r10, r24
    72a8:	b1 1c       	adc	r11, r1
    72aa:	2f 5f       	subi	r18, 0xFF	; 255
    72ac:	3f 4f       	sbci	r19, 0xFF	; 255
    72ae:	e9 cf       	rjmp	.-46     	; 0x7282 <find_dst+0xd2>
    72b0:	c5 01       	movw	r24, r10
    72b2:	b4 01       	movw	r22, r8
    72b4:	a8 96       	adiw	r28, 0x28	; 40
    72b6:	e2 e1       	ldi	r30, 0x12	; 18
    72b8:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

000072bc <set_dst>:
    72bc:	4f 92       	push	r4
    72be:	5f 92       	push	r5
    72c0:	6f 92       	push	r6
    72c2:	7f 92       	push	r7
    72c4:	af 92       	push	r10
    72c6:	bf 92       	push	r11
    72c8:	cf 92       	push	r12
    72ca:	df 92       	push	r13
    72cc:	ef 92       	push	r14
    72ce:	ff 92       	push	r15
    72d0:	0f 93       	push	r16
    72d2:	1f 93       	push	r17
    72d4:	cf 93       	push	r28
    72d6:	df 93       	push	r29
    72d8:	cd b7       	in	r28, 0x3d	; 61
    72da:	de b7       	in	r29, 0x3e	; 62
    72dc:	2c 97       	sbiw	r28, 0x0c	; 12
    72de:	0f b6       	in	r0, 0x3f	; 63
    72e0:	f8 94       	cli
    72e2:	de bf       	out	0x3e, r29	; 62
    72e4:	0f be       	out	0x3f, r0	; 63
    72e6:	cd bf       	out	0x3d, r28	; 61
    72e8:	2b 01       	movw	r4, r22
    72ea:	3c 01       	movw	r6, r24
    72ec:	67 2b       	or	r22, r23
    72ee:	68 2b       	or	r22, r24
    72f0:	69 2b       	or	r22, r25
    72f2:	51 f4       	brne	.+20     	; 0x7308 <set_dst+0x4c>
    72f4:	be 01       	movw	r22, r28
    72f6:	67 5f       	subi	r22, 0xF7	; 247
    72f8:	7f 4f       	sbci	r23, 0xFF	; 255
    72fa:	ce 01       	movw	r24, r28
    72fc:	01 96       	adiw	r24, 0x01	; 1
    72fe:	83 db       	rcall	.-2298   	; 0x6a06 <gettimeofday>
    7300:	49 80       	ldd	r4, Y+1	; 0x01
    7302:	5a 80       	ldd	r5, Y+2	; 0x02
    7304:	6b 80       	ldd	r6, Y+3	; 0x03
    7306:	7c 80       	ldd	r7, Y+4	; 0x04
    7308:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <dst+0x8>
    730c:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <dst+0x9>
    7310:	a0 91 8a 1a 	lds	r26, 0x1A8A	; 0x801a8a <dst+0xa>
    7314:	b0 91 8b 1a 	lds	r27, 0x1A8B	; 0x801a8b <dst+0xb>
    7318:	84 15       	cp	r24, r4
    731a:	95 05       	cpc	r25, r5
    731c:	a6 05       	cpc	r26, r6
    731e:	b7 05       	cpc	r27, r7
    7320:	50 f0       	brcs	.+20     	; 0x7336 <set_dst+0x7a>
    7322:	84 19       	sub	r24, r4
    7324:	95 09       	sbc	r25, r5
    7326:	a6 09       	sbc	r26, r6
    7328:	b7 09       	sbc	r27, r7
    732a:	80 38       	cpi	r24, 0x80	; 128
    732c:	91 45       	sbci	r25, 0x51	; 81
    732e:	a1 40       	sbci	r26, 0x01	; 1
    7330:	b1 05       	cpc	r27, r1
    7332:	70 f4       	brcc	.+28     	; 0x7350 <set_dst+0x94>
    7334:	42 c0       	rjmp	.+132    	; 0x73ba <set_dst+0xfe>
    7336:	a3 01       	movw	r20, r6
    7338:	92 01       	movw	r18, r4
    733a:	28 1b       	sub	r18, r24
    733c:	39 0b       	sbc	r19, r25
    733e:	4a 0b       	sbc	r20, r26
    7340:	5b 0b       	sbc	r21, r27
    7342:	da 01       	movw	r26, r20
    7344:	c9 01       	movw	r24, r18
    7346:	80 38       	cpi	r24, 0x80	; 128
    7348:	91 45       	sbci	r25, 0x51	; 81
    734a:	a1 40       	sbci	r26, 0x01	; 1
    734c:	b1 05       	cpc	r27, r1
    734e:	a8 f1       	brcs	.+106    	; 0x73ba <set_dst+0xfe>
    7350:	40 92 88 1a 	sts	0x1A88, r4	; 0x801a88 <dst+0x8>
    7354:	50 92 89 1a 	sts	0x1A89, r5	; 0x801a89 <dst+0x9>
    7358:	60 92 8a 1a 	sts	0x1A8A, r6	; 0x801a8a <dst+0xa>
    735c:	70 92 8b 1a 	sts	0x1A8B, r7	; 0x801a8b <dst+0xb>
    7360:	82 e0       	ldi	r24, 0x02	; 2
    7362:	a8 2e       	mov	r10, r24
    7364:	b1 2c       	mov	r11, r1
    7366:	c1 2c       	mov	r12, r1
    7368:	d1 2c       	mov	r13, r1
    736a:	92 e0       	ldi	r25, 0x02	; 2
    736c:	e9 2e       	mov	r14, r25
    736e:	f1 2c       	mov	r15, r1
    7370:	03 e0       	ldi	r16, 0x03	; 3
    7372:	10 e0       	ldi	r17, 0x00	; 0
    7374:	20 e0       	ldi	r18, 0x00	; 0
    7376:	30 e0       	ldi	r19, 0x00	; 0
    7378:	b3 01       	movw	r22, r6
    737a:	a2 01       	movw	r20, r4
    737c:	80 e0       	ldi	r24, 0x00	; 0
    737e:	90 e0       	ldi	r25, 0x00	; 0
    7380:	17 df       	rcall	.-466    	; 0x71b0 <find_dst>
    7382:	60 93 80 1a 	sts	0x1A80, r22	; 0x801a80 <dst>
    7386:	70 93 81 1a 	sts	0x1A81, r23	; 0x801a81 <dst+0x1>
    738a:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <dst+0x2>
    738e:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <dst+0x3>
    7392:	ee 24       	eor	r14, r14
    7394:	e3 94       	inc	r14
    7396:	f1 2c       	mov	r15, r1
    7398:	0b e0       	ldi	r16, 0x0B	; 11
    739a:	10 e0       	ldi	r17, 0x00	; 0
    739c:	20 e0       	ldi	r18, 0x00	; 0
    739e:	30 e0       	ldi	r19, 0x00	; 0
    73a0:	b3 01       	movw	r22, r6
    73a2:	a2 01       	movw	r20, r4
    73a4:	81 e0       	ldi	r24, 0x01	; 1
    73a6:	90 e0       	ldi	r25, 0x00	; 0
    73a8:	03 df       	rcall	.-506    	; 0x71b0 <find_dst>
    73aa:	60 93 84 1a 	sts	0x1A84, r22	; 0x801a84 <dst+0x4>
    73ae:	70 93 85 1a 	sts	0x1A85, r23	; 0x801a85 <dst+0x5>
    73b2:	80 93 86 1a 	sts	0x1A86, r24	; 0x801a86 <dst+0x6>
    73b6:	90 93 87 1a 	sts	0x1A87, r25	; 0x801a87 <dst+0x7>
    73ba:	2c 96       	adiw	r28, 0x0c	; 12
    73bc:	0f b6       	in	r0, 0x3f	; 63
    73be:	f8 94       	cli
    73c0:	de bf       	out	0x3e, r29	; 62
    73c2:	0f be       	out	0x3f, r0	; 63
    73c4:	cd bf       	out	0x3d, r28	; 61
    73c6:	df 91       	pop	r29
    73c8:	cf 91       	pop	r28
    73ca:	1f 91       	pop	r17
    73cc:	0f 91       	pop	r16
    73ce:	ff 90       	pop	r15
    73d0:	ef 90       	pop	r14
    73d2:	df 90       	pop	r13
    73d4:	cf 90       	pop	r12
    73d6:	bf 90       	pop	r11
    73d8:	af 90       	pop	r10
    73da:	7f 90       	pop	r7
    73dc:	6f 90       	pop	r6
    73de:	5f 90       	pop	r5
    73e0:	4f 90       	pop	r4
    73e2:	08 95       	ret

000073e4 <asctime_r>:
    73e4:	a5 e1       	ldi	r26, 0x15	; 21
    73e6:	b0 e0       	ldi	r27, 0x00	; 0
    73e8:	e8 ef       	ldi	r30, 0xF8	; 248
    73ea:	f9 e3       	ldi	r31, 0x39	; 57
    73ec:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    73f0:	ec 01       	movw	r28, r24
    73f2:	8b 01       	movw	r16, r22
    73f4:	60 e0       	ldi	r22, 0x00	; 0
    73f6:	70 e0       	ldi	r23, 0x00	; 0
    73f8:	d1 db       	rcall	.-2142   	; 0x6b9c <normalize>
    73fa:	80 e2       	ldi	r24, 0x20	; 32
    73fc:	f8 01       	movw	r30, r16
    73fe:	11 92       	st	Z+, r1
    7400:	8a 95       	dec	r24
    7402:	e9 f7       	brne	.-6      	; 0x73fe <asctime_r+0x1a>
    7404:	8a 85       	ldd	r24, Y+10	; 0x0a
    7406:	9b 85       	ldd	r25, Y+11	; 0x0b
    7408:	84 59       	subi	r24, 0x94	; 148
    740a:	98 4f       	sbci	r25, 0xF8	; 248
    740c:	ed b7       	in	r30, 0x3d	; 61
    740e:	fe b7       	in	r31, 0x3e	; 62
    7410:	95 8b       	std	Z+21, r25	; 0x15
    7412:	84 8b       	std	Z+20, r24	; 0x14
    7414:	88 81       	ld	r24, Y
    7416:	99 81       	ldd	r25, Y+1	; 0x01
    7418:	93 8b       	std	Z+19, r25	; 0x13
    741a:	82 8b       	std	Z+18, r24	; 0x12
    741c:	8a 81       	ldd	r24, Y+2	; 0x02
    741e:	9b 81       	ldd	r25, Y+3	; 0x03
    7420:	91 8b       	std	Z+17, r25	; 0x11
    7422:	80 8b       	std	Z+16, r24	; 0x10
    7424:	8c 81       	ldd	r24, Y+4	; 0x04
    7426:	9d 81       	ldd	r25, Y+5	; 0x05
    7428:	97 87       	std	Z+15, r25	; 0x0f
    742a:	86 87       	std	Z+14, r24	; 0x0e
    742c:	8e 81       	ldd	r24, Y+6	; 0x06
    742e:	9f 81       	ldd	r25, Y+7	; 0x07
    7430:	95 87       	std	Z+13, r25	; 0x0d
    7432:	84 87       	std	Z+12, r24	; 0x0c
    7434:	e8 85       	ldd	r30, Y+8	; 0x08
    7436:	f9 85       	ldd	r31, Y+9	; 0x09
    7438:	ee 0f       	add	r30, r30
    743a:	ff 1f       	adc	r31, r31
    743c:	e5 5f       	subi	r30, 0xF5	; 245
    743e:	fe 4f       	sbci	r31, 0xFE	; 254
    7440:	80 81       	ld	r24, Z
    7442:	91 81       	ldd	r25, Z+1	; 0x01
    7444:	ed b7       	in	r30, 0x3d	; 61
    7446:	fe b7       	in	r31, 0x3e	; 62
    7448:	93 87       	std	Z+11, r25	; 0x0b
    744a:	82 87       	std	Z+10, r24	; 0x0a
    744c:	ec 85       	ldd	r30, Y+12	; 0x0c
    744e:	fd 85       	ldd	r31, Y+13	; 0x0d
    7450:	ee 0f       	add	r30, r30
    7452:	ff 1f       	adc	r31, r31
    7454:	eb 5d       	subi	r30, 0xDB	; 219
    7456:	fe 4f       	sbci	r31, 0xFE	; 254
    7458:	80 81       	ld	r24, Z
    745a:	91 81       	ldd	r25, Z+1	; 0x01
    745c:	ed b7       	in	r30, 0x3d	; 61
    745e:	fe b7       	in	r31, 0x3e	; 62
    7460:	91 87       	std	Z+9, r25	; 0x09
    7462:	80 87       	std	Z+8, r24	; 0x08
    7464:	80 e6       	ldi	r24, 0x60	; 96
    7466:	97 e0       	ldi	r25, 0x07	; 7
    7468:	a0 e0       	ldi	r26, 0x00	; 0
    746a:	85 83       	std	Z+5, r24	; 0x05
    746c:	96 83       	std	Z+6, r25	; 0x06
    746e:	a7 83       	std	Z+7, r26	; 0x07
    7470:	80 e2       	ldi	r24, 0x20	; 32
    7472:	90 e0       	ldi	r25, 0x00	; 0
    7474:	94 83       	std	Z+4, r25	; 0x04
    7476:	83 83       	std	Z+3, r24	; 0x03
    7478:	12 83       	std	Z+2, r17	; 0x02
    747a:	01 83       	std	Z+1, r16	; 0x01
    747c:	0e 94 4a 43 	call	0x8694	; 0x8694 <snprintf_P>
    7480:	c8 01       	movw	r24, r16
    7482:	cd b7       	in	r28, 0x3d	; 61
    7484:	de b7       	in	r29, 0x3e	; 62
    7486:	65 96       	adiw	r28, 0x15	; 21
    7488:	e4 e0       	ldi	r30, 0x04	; 4
    748a:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

0000748e <asctime>:
    748e:	6c e0       	ldi	r22, 0x0C	; 12
    7490:	78 e1       	ldi	r23, 0x18	; 24
    7492:	a8 cf       	rjmp	.-176    	; 0x73e4 <asctime_r>
    7494:	08 95       	ret

00007496 <ctime_gm>:
    7496:	a6 e1       	ldi	r26, 0x16	; 22
    7498:	b0 e0       	ldi	r27, 0x00	; 0
    749a:	e1 e5       	ldi	r30, 0x51	; 81
    749c:	fa e3       	ldi	r31, 0x3A	; 58
    749e:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    74a2:	be 01       	movw	r22, r28
    74a4:	6f 5f       	subi	r22, 0xFF	; 255
    74a6:	7f 4f       	sbci	r23, 0xFF	; 255
    74a8:	6d da       	rcall	.-2854   	; 0x6984 <gmtime_r>
    74aa:	6c ee       	ldi	r22, 0xEC	; 236
    74ac:	77 e1       	ldi	r23, 0x17	; 23
    74ae:	9a df       	rcall	.-204    	; 0x73e4 <asctime_r>
    74b0:	66 96       	adiw	r28, 0x16	; 22
    74b2:	e2 e0       	ldi	r30, 0x02	; 2
    74b4:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000074b8 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    74b8:	a5 e2       	ldi	r26, 0x25	; 37
    74ba:	b0 e0       	ldi	r27, 0x00	; 0
    74bc:	e2 e6       	ldi	r30, 0x62	; 98
    74be:	fa e3       	ldi	r31, 0x3A	; 58
    74c0:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    74c4:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    74c6:	40 e0       	ldi	r20, 0x00	; 0
    74c8:	50 e0       	ldi	r21, 0x00	; 0
    74ca:	ba 01       	movw	r22, r20
    74cc:	80 e0       	ldi	r24, 0x00	; 0
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <rtc_init>
    74d4:	81 11       	cpse	r24, r1
    74d6:	27 c0       	rjmp	.+78     	; 0x7526 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    74d8:	8f eb       	ldi	r24, 0xBF	; 191
    74da:	96 e0       	ldi	r25, 0x06	; 6
    74dc:	a0 e0       	ldi	r26, 0x00	; 0
    74de:	ed b7       	in	r30, 0x3d	; 61
    74e0:	fe b7       	in	r31, 0x3e	; 62
    74e2:	81 83       	std	Z+1, r24	; 0x01
    74e4:	92 83       	std	Z+2, r25	; 0x02
    74e6:	a3 83       	std	Z+3, r26	; 0x03
    74e8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        printf("attempting rtc init\n");
    74ec:	8a ea       	ldi	r24, 0xAA	; 170
    74ee:	96 e0       	ldi	r25, 0x06	; 6
    74f0:	a0 e0       	ldi	r26, 0x00	; 0
    74f2:	ed b7       	in	r30, 0x3d	; 61
    74f4:	fe b7       	in	r31, 0x3e	; 62
    74f6:	81 83       	std	Z+1, r24	; 0x01
    74f8:	92 83       	std	Z+2, r25	; 0x02
    74fa:	a3 83       	std	Z+3, r26	; 0x03
    74fc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7500:	40 e0       	ldi	r20, 0x00	; 0
    7502:	50 e0       	ldi	r21, 0x00	; 0
    7504:	ba 01       	movw	r22, r20
    7506:	81 e0       	ldi	r24, 0x01	; 1
    7508:	90 e0       	ldi	r25, 0x00	; 0
    750a:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <rtc_init>
    750e:	81 11       	cpse	r24, r1
    7510:	0a c0       	rjmp	.+20     	; 0x7526 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7512:	83 e9       	ldi	r24, 0x93	; 147
    7514:	96 e0       	ldi	r25, 0x06	; 6
    7516:	a0 e0       	ldi	r26, 0x00	; 0
    7518:	ed b7       	in	r30, 0x3d	; 61
    751a:	fe b7       	in	r31, 0x3e	; 62
    751c:	81 83       	std	Z+1, r24	; 0x01
    751e:	92 83       	std	Z+2, r25	; 0x02
    7520:	a3 83       	std	Z+3, r26	; 0x03
    7522:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7526:	ce 01       	movw	r24, r28
    7528:	04 96       	adiw	r24, 0x04	; 4
    752a:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <rtc_read>
    752e:	88 23       	and	r24, r24
    7530:	51 f0       	breq	.+20     	; 0x7546 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7532:	ce 01       	movw	r24, r28
    7534:	04 96       	adiw	r24, 0x04	; 4
    7536:	fa dc       	rcall	.-1548   	; 0x6f2c <timegm>
    7538:	6b 01       	movw	r12, r22
    753a:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    753c:	67 2b       	or	r22, r23
    753e:	68 2b       	or	r22, r24
    7540:	69 2b       	or	r22, r25
    7542:	c1 f4       	brne	.+48     	; 0x7574 <initialize_clock+0xbc>
    7544:	0a c0       	rjmp	.+20     	; 0x755a <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7546:	89 e7       	ldi	r24, 0x79	; 121
    7548:	96 e0       	ldi	r25, 0x06	; 6
    754a:	a0 e0       	ldi	r26, 0x00	; 0
    754c:	ed b7       	in	r30, 0x3d	; 61
    754e:	fe b7       	in	r31, 0x3e	; 62
    7550:	81 83       	std	Z+1, r24	; 0x01
    7552:	92 83       	std	Z+2, r25	; 0x02
    7554:	a3 83       	std	Z+3, r26	; 0x03
    7556:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    755a:	85 e5       	ldi	r24, 0x55	; 85
    755c:	96 e0       	ldi	r25, 0x06	; 6
    755e:	a0 e0       	ldi	r26, 0x00	; 0
    7560:	ed b7       	in	r30, 0x3d	; 61
    7562:	fe b7       	in	r31, 0x3e	; 62
    7564:	81 83       	std	Z+1, r24	; 0x01
    7566:	92 83       	std	Z+2, r25	; 0x02
    7568:	a3 83       	std	Z+3, r26	; 0x03
    756a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    756e:	c1 2c       	mov	r12, r1
    7570:	d1 2c       	mov	r13, r1
    7572:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7574:	1b a3       	std	Y+35, r17	; 0x23
    7576:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7578:	1d a2       	std	Y+37, r1	; 0x25
    757a:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    757c:	ce 01       	movw	r24, r28
    757e:	82 96       	adiw	r24, 0x22	; 34
    7580:	30 da       	rcall	.-2976   	; 0x69e2 <settimezone>

    ts.tv_sec = seconds;
    7582:	ca 8e       	std	Y+26, r12	; 0x1a
    7584:	db 8e       	std	Y+27, r13	; 0x1b
    7586:	ec 8e       	std	Y+28, r14	; 0x1c
    7588:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    758a:	1e 8e       	std	Y+30, r1	; 0x1e
    758c:	1f 8e       	std	Y+31, r1	; 0x1f
    758e:	18 a2       	std	Y+32, r1	; 0x20
    7590:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7592:	be 01       	movw	r22, r28
    7594:	66 5e       	subi	r22, 0xE6	; 230
    7596:	7f 4f       	sbci	r23, 0xFF	; 255
    7598:	80 e0       	ldi	r24, 0x00	; 0
    759a:	90 e0       	ldi	r25, 0x00	; 0
    759c:	c7 d8       	rcall	.-3698   	; 0x672c <clock_settime>
}
    759e:	a5 96       	adiw	r28, 0x25	; 37
    75a0:	e8 e0       	ldi	r30, 0x08	; 8
    75a2:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

000075a6 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    75a6:	a9 e2       	ldi	r26, 0x29	; 41
    75a8:	b0 e0       	ldi	r27, 0x00	; 0
    75aa:	e9 ed       	ldi	r30, 0xD9	; 217
    75ac:	fa e3       	ldi	r31, 0x3A	; 58
    75ae:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    75b2:	ce 01       	movw	r24, r28
    75b4:	08 96       	adiw	r24, 0x08	; 8
    75b6:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <rtc_read>
    75ba:	88 23       	and	r24, r24
    75bc:	29 f1       	breq	.+74     	; 0x7608 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    75be:	ce 01       	movw	r24, r28
    75c0:	08 96       	adiw	r24, 0x08	; 8
    75c2:	b4 dc       	rcall	.-1688   	; 0x6f2c <timegm>
    75c4:	6e a3       	std	Y+38, r22	; 0x26
    75c6:	7f a3       	std	Y+39, r23	; 0x27
    75c8:	88 a7       	std	Y+40, r24	; 0x28
    75ca:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    75cc:	ed b7       	in	r30, 0x3d	; 61
    75ce:	fe b7       	in	r31, 0x3e	; 62
    75d0:	64 83       	std	Z+4, r22	; 0x04
    75d2:	75 83       	std	Z+5, r23	; 0x05
    75d4:	86 83       	std	Z+6, r24	; 0x06
    75d6:	97 83       	std	Z+7, r25	; 0x07
    75d8:	83 e4       	ldi	r24, 0x43	; 67
    75da:	96 e0       	ldi	r25, 0x06	; 6
    75dc:	a0 e0       	ldi	r26, 0x00	; 0
    75de:	81 83       	std	Z+1, r24	; 0x01
    75e0:	92 83       	std	Z+2, r25	; 0x02
    75e2:	a3 83       	std	Z+3, r26	; 0x03
    75e4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    75e8:	ce 01       	movw	r24, r28
    75ea:	08 96       	adiw	r24, 0x08	; 8
    75ec:	50 df       	rcall	.-352    	; 0x748e <asctime>
    75ee:	ed b7       	in	r30, 0x3d	; 61
    75f0:	fe b7       	in	r31, 0x3e	; 62
    75f2:	95 83       	std	Z+5, r25	; 0x05
    75f4:	84 83       	std	Z+4, r24	; 0x04
    75f6:	82 e3       	ldi	r24, 0x32	; 50
    75f8:	96 e0       	ldi	r25, 0x06	; 6
    75fa:	a0 e0       	ldi	r26, 0x00	; 0
    75fc:	81 83       	std	Z+1, r24	; 0x01
    75fe:	92 83       	std	Z+2, r25	; 0x02
    7600:	a3 83       	std	Z+3, r26	; 0x03
    7602:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    7606:	0a c0       	rjmp	.+20     	; 0x761c <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7608:	81 e2       	ldi	r24, 0x21	; 33
    760a:	96 e0       	ldi	r25, 0x06	; 6
    760c:	a0 e0       	ldi	r26, 0x00	; 0
    760e:	ed b7       	in	r30, 0x3d	; 61
    7610:	fe b7       	in	r31, 0x3e	; 62
    7612:	81 83       	std	Z+1, r24	; 0x01
    7614:	92 83       	std	Z+2, r25	; 0x02
    7616:	a3 83       	std	Z+3, r26	; 0x03
    7618:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    761c:	be 01       	movw	r22, r28
    761e:	62 5e       	subi	r22, 0xE2	; 226
    7620:	7f 4f       	sbci	r23, 0xFF	; 255
    7622:	80 e0       	ldi	r24, 0x00	; 0
    7624:	90 e0       	ldi	r25, 0x00	; 0
    7626:	0e 94 ed 30 	call	0x61da	; 0x61da <clock_gettime>
    seconds = ts.tv_sec;
    762a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    762c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    762e:	a8 a1       	ldd	r26, Y+32	; 0x20
    7630:	b9 a1       	ldd	r27, Y+33	; 0x21
    7632:	8e a3       	std	Y+38, r24	; 0x26
    7634:	9f a3       	std	Y+39, r25	; 0x27
    7636:	a8 a7       	std	Y+40, r26	; 0x28
    7638:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    763a:	ed b7       	in	r30, 0x3d	; 61
    763c:	fe b7       	in	r31, 0x3e	; 62
    763e:	84 83       	std	Z+4, r24	; 0x04
    7640:	95 83       	std	Z+5, r25	; 0x05
    7642:	a6 83       	std	Z+6, r26	; 0x06
    7644:	b7 83       	std	Z+7, r27	; 0x07
    7646:	8f e0       	ldi	r24, 0x0F	; 15
    7648:	96 e0       	ldi	r25, 0x06	; 6
    764a:	a0 e0       	ldi	r26, 0x00	; 0
    764c:	81 83       	std	Z+1, r24	; 0x01
    764e:	92 83       	std	Z+2, r25	; 0x02
    7650:	a3 83       	std	Z+3, r26	; 0x03
    7652:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7656:	ce 01       	movw	r24, r28
    7658:	86 96       	adiw	r24, 0x26	; 38
    765a:	a9 d9       	rcall	.-3246   	; 0x69ae <gmtime>
    765c:	18 df       	rcall	.-464    	; 0x748e <asctime>
    765e:	ed b7       	in	r30, 0x3d	; 61
    7660:	fe b7       	in	r31, 0x3e	; 62
    7662:	95 83       	std	Z+5, r25	; 0x05
    7664:	84 83       	std	Z+4, r24	; 0x04
    7666:	8e ef       	ldi	r24, 0xFE	; 254
    7668:	95 e0       	ldi	r25, 0x05	; 5
    766a:	a0 e0       	ldi	r26, 0x00	; 0
    766c:	81 83       	std	Z+1, r24	; 0x01
    766e:	92 83       	std	Z+2, r25	; 0x02
    7670:	a3 83       	std	Z+3, r26	; 0x03
    7672:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
}
    7676:	a9 96       	adiw	r28, 0x29	; 41
    7678:	e2 e0       	ldi	r30, 0x02	; 2
    767a:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000767e <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    767e:	fc 01       	movw	r30, r24
    7680:	84 81       	ldd	r24, Z+4	; 0x04
    7682:	95 81       	ldd	r25, Z+5	; 0x05
    7684:	00 97       	sbiw	r24, 0x00	; 0
    7686:	79 f0       	breq	.+30     	; 0x76a6 <_putc_buffer_fn+0x28>
    7688:	66 23       	and	r22, r22
    768a:	69 f0       	breq	.+26     	; 0x76a6 <_putc_buffer_fn+0x28>
    768c:	01 97       	sbiw	r24, 0x01	; 1
    768e:	95 83       	std	Z+5, r25	; 0x05
    7690:	84 83       	std	Z+4, r24	; 0x04
    7692:	86 81       	ldd	r24, Z+6	; 0x06
    7694:	97 81       	ldd	r25, Z+7	; 0x07
    7696:	01 96       	adiw	r24, 0x01	; 1
    7698:	97 83       	std	Z+7, r25	; 0x07
    769a:	86 83       	std	Z+6, r24	; 0x06
    769c:	a2 81       	ldd	r26, Z+2	; 0x02
    769e:	b3 81       	ldd	r27, Z+3	; 0x03
    76a0:	6d 93       	st	X+, r22
    76a2:	b3 83       	std	Z+3, r27	; 0x03
    76a4:	a2 83       	std	Z+2, r26	; 0x02
    76a6:	02 80       	ldd	r0, Z+2	; 0x02
    76a8:	f3 81       	ldd	r31, Z+3	; 0x03
    76aa:	e0 2d       	mov	r30, r0
    76ac:	10 82       	st	Z, r1
    76ae:	08 95       	ret

000076b0 <_putc_fn>:
    76b0:	fc 01       	movw	r30, r24
    76b2:	26 81       	ldd	r18, Z+6	; 0x06
    76b4:	37 81       	ldd	r19, Z+7	; 0x07
    76b6:	2f 5f       	subi	r18, 0xFF	; 255
    76b8:	3f 4f       	sbci	r19, 0xFF	; 255
    76ba:	37 83       	std	Z+7, r19	; 0x07
    76bc:	26 83       	std	Z+6, r18	; 0x06
    76be:	86 2f       	mov	r24, r22
    76c0:	90 e0       	ldi	r25, 0x00	; 0
    76c2:	0c 94 c8 73 	jmp	0xe790	; 0xe790 <putchar>
    76c6:	08 95       	ret

000076c8 <bin2num>:
    76c8:	a0 e0       	ldi	r26, 0x00	; 0
    76ca:	b0 e0       	ldi	r27, 0x00	; 0
    76cc:	ea e6       	ldi	r30, 0x6A	; 106
    76ce:	fb e3       	ldi	r31, 0x3B	; 59
    76d0:	0c 94 c9 df 	jmp	0x1bf92	; 0x1bf92 <__prologue_saves__+0xe>
    76d4:	ea 01       	movw	r28, r20
    76d6:	53 e0       	ldi	r21, 0x03	; 3
    76d8:	ee 0c       	add	r14, r14
    76da:	ff 1c       	adc	r15, r15
    76dc:	5a 95       	dec	r21
    76de:	e1 f7       	brne	.-8      	; 0x76d8 <bin2num+0x10>
    76e0:	fc 01       	movw	r30, r24
    76e2:	af 01       	movw	r20, r30
    76e4:	48 1b       	sub	r20, r24
    76e6:	59 0b       	sbc	r21, r25
    76e8:	c4 17       	cp	r28, r20
    76ea:	d5 07       	cpc	r29, r21
    76ec:	14 f0       	brlt	.+4      	; 0x76f2 <bin2num+0x2a>
    76ee:	11 92       	st	Z+, r1
    76f0:	f8 cf       	rjmp	.-16     	; 0x76e2 <bin2num+0x1a>
    76f2:	41 e0       	ldi	r20, 0x01	; 1
    76f4:	e4 1a       	sub	r14, r20
    76f6:	f1 08       	sbc	r15, r1
    76f8:	5b 01       	movw	r10, r22
    76fa:	42 e0       	ldi	r20, 0x02	; 2
    76fc:	a4 1a       	sub	r10, r20
    76fe:	b1 08       	sbc	r11, r1
    7700:	f7 fc       	sbrc	r15, 7
    7702:	3b c0       	rjmp	.+118    	; 0x777a <bin2num+0xb2>
    7704:	f7 01       	movw	r30, r14
    7706:	43 e0       	ldi	r20, 0x03	; 3
    7708:	f5 95       	asr	r31
    770a:	e7 95       	ror	r30
    770c:	4a 95       	dec	r20
    770e:	e1 f7       	brne	.-8      	; 0x7708 <bin2num+0x40>
    7710:	e0 0f       	add	r30, r16
    7712:	f1 1f       	adc	r31, r17
    7714:	40 81       	ld	r20, Z
    7716:	50 e0       	ldi	r21, 0x00	; 0
    7718:	f7 01       	movw	r30, r14
    771a:	e7 70       	andi	r30, 0x07	; 7
    771c:	ff 27       	eor	r31, r31
    771e:	02 c0       	rjmp	.+4      	; 0x7724 <bin2num+0x5c>
    7720:	55 95       	asr	r21
    7722:	47 95       	ror	r20
    7724:	ea 95       	dec	r30
    7726:	e2 f7       	brpl	.-8      	; 0x7720 <bin2num+0x58>
    7728:	41 70       	andi	r20, 0x01	; 1
    772a:	55 27       	eor	r21, r21
    772c:	dc 01       	movw	r26, r24
    772e:	e0 e0       	ldi	r30, 0x00	; 0
    7730:	f0 e0       	ldi	r31, 0x00	; 0
    7732:	ec 17       	cp	r30, r28
    7734:	fd 07       	cpc	r31, r29
    7736:	ec f4       	brge	.+58     	; 0x7772 <bin2num+0xaa>
    7738:	ea 15       	cp	r30, r10
    773a:	fb 05       	cpc	r31, r11
    773c:	4c f0       	brlt	.+18     	; 0x7750 <bin2num+0x88>
    773e:	dc 01       	movw	r26, r24
    7740:	ae 0f       	add	r26, r30
    7742:	bf 1f       	adc	r27, r31
    7744:	1c 92       	st	X, r1
    7746:	41 e0       	ldi	r20, 0x01	; 1
    7748:	e4 1a       	sub	r14, r20
    774a:	f1 08       	sbc	r15, r1
    774c:	ef 01       	movw	r28, r30
    774e:	d8 cf       	rjmp	.-80     	; 0x7700 <bin2num+0x38>
    7750:	9c 90       	ld	r9, X
    7752:	99 0c       	add	r9, r9
    7754:	94 2a       	or	r9, r20
    7756:	49 2d       	mov	r20, r9
    7758:	50 e0       	ldi	r21, 0x00	; 0
    775a:	42 17       	cp	r20, r18
    775c:	53 07       	cpc	r21, r19
    775e:	24 f0       	brlt	.+8      	; 0x7768 <bin2num+0xa0>
    7760:	92 1a       	sub	r9, r18
    7762:	41 e0       	ldi	r20, 0x01	; 1
    7764:	50 e0       	ldi	r21, 0x00	; 0
    7766:	02 c0       	rjmp	.+4      	; 0x776c <bin2num+0xa4>
    7768:	40 e0       	ldi	r20, 0x00	; 0
    776a:	50 e0       	ldi	r21, 0x00	; 0
    776c:	9d 92       	st	X+, r9
    776e:	31 96       	adiw	r30, 0x01	; 1
    7770:	e0 cf       	rjmp	.-64     	; 0x7732 <bin2num+0x6a>
    7772:	41 15       	cp	r20, r1
    7774:	51 05       	cpc	r21, r1
    7776:	01 f7       	brne	.-64     	; 0x7738 <bin2num+0x70>
    7778:	e2 cf       	rjmp	.-60     	; 0x773e <bin2num+0x76>
    777a:	fc 01       	movw	r30, r24
    777c:	9f 01       	movw	r18, r30
    777e:	28 1b       	sub	r18, r24
    7780:	39 0b       	sbc	r19, r25
    7782:	2c 17       	cp	r18, r28
    7784:	3d 07       	cpc	r19, r29
    7786:	4c f4       	brge	.+18     	; 0x779a <bin2num+0xd2>
    7788:	20 81       	ld	r18, Z
    778a:	2a 30       	cpi	r18, 0x0A	; 10
    778c:	10 f4       	brcc	.+4      	; 0x7792 <bin2num+0xca>
    778e:	20 5d       	subi	r18, 0xD0	; 208
    7790:	01 c0       	rjmp	.+2      	; 0x7794 <bin2num+0xcc>
    7792:	29 5a       	subi	r18, 0xA9	; 169
    7794:	20 83       	st	Z, r18
    7796:	31 96       	adiw	r30, 0x01	; 1
    7798:	f1 cf       	rjmp	.-30     	; 0x777c <bin2num+0xb4>
    779a:	9e 01       	movw	r18, r28
    779c:	d7 ff       	sbrs	r29, 7
    779e:	02 c0       	rjmp	.+4      	; 0x77a4 <bin2num+0xdc>
    77a0:	20 e0       	ldi	r18, 0x00	; 0
    77a2:	30 e0       	ldi	r19, 0x00	; 0
    77a4:	c1 14       	cp	r12, r1
    77a6:	d1 04       	cpc	r13, r1
    77a8:	61 f0       	breq	.+24     	; 0x77c2 <bin2num+0xfa>
    77aa:	61 50       	subi	r22, 0x01	; 1
    77ac:	71 09       	sbc	r23, r1
    77ae:	26 17       	cp	r18, r22
    77b0:	37 07       	cpc	r19, r23
    77b2:	3c f4       	brge	.+14     	; 0x77c2 <bin2num+0xfa>
    77b4:	fc 01       	movw	r30, r24
    77b6:	e2 0f       	add	r30, r18
    77b8:	f3 1f       	adc	r31, r19
    77ba:	c0 82       	st	Z, r12
    77bc:	21 96       	adiw	r28, 0x01	; 1
    77be:	2f 5f       	subi	r18, 0xFF	; 255
    77c0:	3f 4f       	sbci	r19, 0xFF	; 255
    77c2:	fc 01       	movw	r30, r24
    77c4:	e2 0f       	add	r30, r18
    77c6:	f3 1f       	adc	r31, r19
    77c8:	10 82       	st	Z, r1
    77ca:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <reverse>
    77ce:	ce 01       	movw	r24, r28
    77d0:	cd b7       	in	r28, 0x3d	; 61
    77d2:	de b7       	in	r29, 0x3e	; 62
    77d4:	eb e0       	ldi	r30, 0x0B	; 11
    77d6:	0c 94 e5 df 	jmp	0x1bfca	; 0x1bfca <__epilogue_restores__+0xe>

000077da <pch>:
    77da:	fc 01       	movw	r30, r24
    77dc:	22 81       	ldd	r18, Z+2	; 0x02
    77de:	33 81       	ldd	r19, Z+3	; 0x03
    77e0:	44 81       	ldd	r20, Z+4	; 0x04
    77e2:	55 81       	ldd	r21, Z+5	; 0x05
    77e4:	80 81       	ld	r24, Z
    77e6:	91 81       	ldd	r25, Z+1	; 0x01
    77e8:	24 17       	cp	r18, r20
    77ea:	35 07       	cpc	r19, r21
    77ec:	54 f4       	brge	.+20     	; 0x7802 <pch+0x28>
    77ee:	a9 01       	movw	r20, r18
    77f0:	4f 5f       	subi	r20, 0xFF	; 255
    77f2:	5f 4f       	sbci	r21, 0xFF	; 255
    77f4:	53 83       	std	Z+3, r21	; 0x03
    77f6:	42 83       	std	Z+2, r20	; 0x02
    77f8:	dc 01       	movw	r26, r24
    77fa:	a2 0f       	add	r26, r18
    77fc:	b3 1f       	adc	r27, r19
    77fe:	6c 93       	st	X, r22
    7800:	04 c0       	rjmp	.+8      	; 0x780a <pch+0x30>
    7802:	dc 01       	movw	r26, r24
    7804:	a2 0f       	add	r26, r18
    7806:	b3 1f       	adc	r27, r19
    7808:	1c 92       	st	X, r1
    780a:	82 81       	ldd	r24, Z+2	; 0x02
    780c:	93 81       	ldd	r25, Z+3	; 0x03
    780e:	08 95       	ret

00007810 <p_ntoa>:
    7810:	af 92       	push	r10
    7812:	cf 92       	push	r12
    7814:	df 92       	push	r13
    7816:	ef 92       	push	r14
    7818:	ff 92       	push	r15
    781a:	0f 93       	push	r16
    781c:	1f 93       	push	r17
    781e:	cf 93       	push	r28
    7820:	df 93       	push	r29
    7822:	dc 01       	movw	r26, r24
    7824:	eb 01       	movw	r28, r22
    7826:	fa 01       	movw	r30, r20
    7828:	b9 01       	movw	r22, r18
    782a:	98 01       	movw	r18, r16
    782c:	a6 01       	movw	r20, r12
    782e:	9a 2d       	mov	r25, r10
    7830:	a5 fa       	bst	r10, 5
    7832:	cc 24       	eor	r12, r12
    7834:	c0 f8       	bld	r12, 0
    7836:	a6 fc       	sbrc	r10, 6
    7838:	07 c0       	rjmp	.+14     	; 0x7848 <p_ntoa+0x38>
    783a:	a2 fc       	sbrc	r10, 2
    783c:	08 c0       	rjmp	.+16     	; 0x784e <p_ntoa+0x3e>
    783e:	a4 fe       	sbrs	r10, 4
    7840:	09 c0       	rjmp	.+18     	; 0x7854 <p_ntoa+0x44>
    7842:	00 e2       	ldi	r16, 0x20	; 32
    7844:	10 e0       	ldi	r17, 0x00	; 0
    7846:	08 c0       	rjmp	.+16     	; 0x7858 <p_ntoa+0x48>
    7848:	0d e2       	ldi	r16, 0x2D	; 45
    784a:	10 e0       	ldi	r17, 0x00	; 0
    784c:	05 c0       	rjmp	.+10     	; 0x7858 <p_ntoa+0x48>
    784e:	0b e2       	ldi	r16, 0x2B	; 43
    7850:	10 e0       	ldi	r17, 0x00	; 0
    7852:	02 c0       	rjmp	.+4      	; 0x7858 <p_ntoa+0x48>
    7854:	00 e0       	ldi	r16, 0x00	; 0
    7856:	10 e0       	ldi	r17, 0x00	; 0
    7858:	95 ff       	sbrs	r25, 5
    785a:	04 c0       	rjmp	.+8      	; 0x7864 <p_ntoa+0x54>
    785c:	89 2f       	mov	r24, r25
    785e:	8a 70       	andi	r24, 0x0A	; 10
    7860:	09 f0       	breq	.+2      	; 0x7864 <p_ntoa+0x54>
    7862:	c1 2c       	mov	r12, r1
    7864:	c0 fa       	bst	r12, 0
    7866:	95 f9       	bld	r25, 5
    7868:	89 2f       	mov	r24, r25
    786a:	82 70       	andi	r24, 0x02	; 2
    786c:	c8 2e       	mov	r12, r24
    786e:	91 fd       	sbrc	r25, 1
    7870:	02 c0       	rjmp	.+4      	; 0x7876 <p_ntoa+0x66>
    7872:	40 e0       	ldi	r20, 0x00	; 0
    7874:	50 e0       	ldi	r21, 0x00	; 0
    7876:	89 2f       	mov	r24, r25
    7878:	83 70       	andi	r24, 0x03	; 3
    787a:	11 f4       	brne	.+4      	; 0x7880 <p_ntoa+0x70>
    787c:	41 e0       	ldi	r20, 0x01	; 1
    787e:	50 e0       	ldi	r21, 0x00	; 0
    7880:	90 ff       	sbrs	r25, 0
    7882:	0c c0       	rjmp	.+24     	; 0x789c <p_ntoa+0x8c>
    7884:	95 fd       	sbrc	r25, 5
    7886:	05 c0       	rjmp	.+10     	; 0x7892 <p_ntoa+0x82>
    7888:	c1 10       	cpse	r12, r1
    788a:	08 c0       	rjmp	.+16     	; 0x789c <p_ntoa+0x8c>
    788c:	41 e0       	ldi	r20, 0x01	; 1
    788e:	50 e0       	ldi	r21, 0x00	; 0
    7890:	05 c0       	rjmp	.+10     	; 0x789c <p_ntoa+0x8c>
    7892:	94 75       	andi	r25, 0x54	; 84
    7894:	a7 01       	movw	r20, r14
    7896:	11 f0       	breq	.+4      	; 0x789c <p_ntoa+0x8c>
    7898:	41 50       	subi	r20, 0x01	; 1
    789a:	51 09       	sbc	r21, r1
    789c:	68 01       	movw	r12, r16
    789e:	7e 01       	movw	r14, r28
    78a0:	8d 01       	movw	r16, r26
    78a2:	cf 01       	movw	r24, r30
    78a4:	11 df       	rcall	.-478    	; 0x76c8 <bin2num>
    78a6:	df 91       	pop	r29
    78a8:	cf 91       	pop	r28
    78aa:	1f 91       	pop	r17
    78ac:	0f 91       	pop	r16
    78ae:	ff 90       	pop	r15
    78b0:	ef 90       	pop	r14
    78b2:	df 90       	pop	r13
    78b4:	cf 90       	pop	r12
    78b6:	af 90       	pop	r10
    78b8:	08 95       	ret

000078ba <p_ftoa>:
    78ba:	aa e0       	ldi	r26, 0x0A	; 10
    78bc:	b0 e0       	ldi	r27, 0x00	; 0
    78be:	e3 e6       	ldi	r30, 0x63	; 99
    78c0:	fc e3       	ldi	r31, 0x3C	; 60
    78c2:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    78c6:	4b 01       	movw	r8, r22
    78c8:	5c 01       	movw	r10, r24
    78ca:	1a 01       	movw	r2, r20
    78cc:	28 01       	movw	r4, r16
    78ce:	c6 fa       	bst	r12, 6
    78d0:	11 27       	eor	r17, r17
    78d2:	10 f9       	bld	r17, 0
    78d4:	5a 83       	std	Y+2, r21	; 0x02
    78d6:	49 83       	std	Y+1, r20	; 0x01
    78d8:	1c 82       	std	Y+4, r1	; 0x04
    78da:	1b 82       	std	Y+3, r1	; 0x03
    78dc:	21 50       	subi	r18, 0x01	; 1
    78de:	31 09       	sbc	r19, r1
    78e0:	3e 83       	std	Y+6, r19	; 0x06
    78e2:	2d 83       	std	Y+5, r18	; 0x05
    78e4:	fa 01       	movw	r30, r20
    78e6:	10 82       	st	Z, r1
    78e8:	20 e0       	ldi	r18, 0x00	; 0
    78ea:	30 e0       	ldi	r19, 0x00	; 0
    78ec:	a9 01       	movw	r20, r18
    78ee:	0e 94 80 e0 	call	0x1c100	; 0x1c100 <__cmpsf2>
    78f2:	87 ff       	sbrs	r24, 7
    78f4:	05 c0       	rjmp	.+10     	; 0x7900 <p_ftoa+0x46>
    78f6:	b7 fa       	bst	r11, 7
    78f8:	b0 94       	com	r11
    78fa:	b7 f8       	bld	r11, 7
    78fc:	b0 94       	com	r11
    78fe:	11 e0       	ldi	r17, 0x01	; 1
    7900:	10 fb       	bst	r17, 0
    7902:	c6 f8       	bld	r12, 6
    7904:	c6 fe       	sbrs	r12, 6
    7906:	02 c0       	rjmp	.+4      	; 0x790c <p_ftoa+0x52>
    7908:	6d e2       	ldi	r22, 0x2D	; 45
    790a:	07 c0       	rjmp	.+14     	; 0x791a <p_ftoa+0x60>
    790c:	c2 fe       	sbrs	r12, 2
    790e:	02 c0       	rjmp	.+4      	; 0x7914 <p_ftoa+0x5a>
    7910:	6b e2       	ldi	r22, 0x2B	; 43
    7912:	03 c0       	rjmp	.+6      	; 0x791a <p_ftoa+0x60>
    7914:	c4 fe       	sbrs	r12, 4
    7916:	04 c0       	rjmp	.+8      	; 0x7920 <p_ftoa+0x66>
    7918:	60 e2       	ldi	r22, 0x20	; 32
    791a:	ce 01       	movw	r24, r28
    791c:	01 96       	adiw	r24, 0x01	; 1
    791e:	5d df       	rcall	.-326    	; 0x77da <pch>
    7920:	37 01       	movw	r6, r14
    7922:	f7 fe       	sbrs	r15, 7
    7924:	02 c0       	rjmp	.+4      	; 0x792a <p_ftoa+0x70>
    7926:	61 2c       	mov	r6, r1
    7928:	71 2c       	mov	r7, r1
    792a:	20 e0       	ldi	r18, 0x00	; 0
    792c:	30 e0       	ldi	r19, 0x00	; 0
    792e:	a9 01       	movw	r20, r18
    7930:	c5 01       	movw	r24, r10
    7932:	b4 01       	movw	r22, r8
    7934:	0e 94 80 e0 	call	0x1c100	; 0x1c100 <__cmpsf2>
    7938:	88 23       	and	r24, r24
    793a:	d1 f1       	breq	.+116    	; 0x79b0 <p_ftoa+0xf6>
    793c:	c1 fe       	sbrs	r12, 1
    793e:	11 c0       	rjmp	.+34     	; 0x7962 <p_ftoa+0xa8>
    7940:	83 01       	movw	r16, r6
    7942:	60 e0       	ldi	r22, 0x00	; 0
    7944:	70 e0       	ldi	r23, 0x00	; 0
    7946:	80 e0       	ldi	r24, 0x00	; 0
    7948:	9f e3       	ldi	r25, 0x3F	; 63
    794a:	01 15       	cp	r16, r1
    794c:	11 05       	cpc	r17, r1
    794e:	69 f0       	breq	.+26     	; 0x796a <p_ftoa+0xb0>
    7950:	20 e0       	ldi	r18, 0x00	; 0
    7952:	30 e0       	ldi	r19, 0x00	; 0
    7954:	40 e2       	ldi	r20, 0x20	; 32
    7956:	51 e4       	ldi	r21, 0x41	; 65
    7958:	0e 94 84 e0 	call	0x1c108	; 0x1c108 <__divsf3>
    795c:	01 50       	subi	r16, 0x01	; 1
    795e:	11 09       	sbc	r17, r1
    7960:	f4 cf       	rjmp	.-24     	; 0x794a <p_ftoa+0x90>
    7962:	60 e0       	ldi	r22, 0x00	; 0
    7964:	70 e0       	ldi	r23, 0x00	; 0
    7966:	80 e0       	ldi	r24, 0x00	; 0
    7968:	9f e3       	ldi	r25, 0x3F	; 63
    796a:	9b 01       	movw	r18, r22
    796c:	ac 01       	movw	r20, r24
    796e:	c5 01       	movw	r24, r10
    7970:	b4 01       	movw	r22, r8
    7972:	0e 94 1c e0 	call	0x1c038	; 0x1c038 <__addsf3>
    7976:	4b 01       	movw	r8, r22
    7978:	5c 01       	movw	r10, r24
    797a:	ee 24       	eor	r14, r14
    797c:	e3 94       	inc	r14
    797e:	f1 2c       	mov	r15, r1
    7980:	20 e0       	ldi	r18, 0x00	; 0
    7982:	30 e0       	ldi	r19, 0x00	; 0
    7984:	40 e2       	ldi	r20, 0x20	; 32
    7986:	51 e4       	ldi	r21, 0x41	; 65
    7988:	c5 01       	movw	r24, r10
    798a:	b4 01       	movw	r22, r8
    798c:	0e 94 cf e1 	call	0x1c39e	; 0x1c39e <__gesf2>
    7990:	87 fd       	sbrc	r24, 7
    7992:	11 c0       	rjmp	.+34     	; 0x79b6 <p_ftoa+0xfc>
    7994:	ff ef       	ldi	r31, 0xFF	; 255
    7996:	ef 1a       	sub	r14, r31
    7998:	ff 0a       	sbc	r15, r31
    799a:	20 e0       	ldi	r18, 0x00	; 0
    799c:	30 e0       	ldi	r19, 0x00	; 0
    799e:	40 e2       	ldi	r20, 0x20	; 32
    79a0:	51 e4       	ldi	r21, 0x41	; 65
    79a2:	c5 01       	movw	r24, r10
    79a4:	b4 01       	movw	r22, r8
    79a6:	0e 94 84 e0 	call	0x1c108	; 0x1c108 <__divsf3>
    79aa:	4b 01       	movw	r8, r22
    79ac:	5c 01       	movw	r10, r24
    79ae:	e8 cf       	rjmp	.-48     	; 0x7980 <p_ftoa+0xc6>
    79b0:	ee 24       	eor	r14, r14
    79b2:	e3 94       	inc	r14
    79b4:	f1 2c       	mov	r15, r1
    79b6:	8c 2d       	mov	r24, r12
    79b8:	88 72       	andi	r24, 0x28	; 40
    79ba:	80 32       	cpi	r24, 0x20	; 32
    79bc:	c1 f4       	brne	.+48     	; 0x79ee <p_ftoa+0x134>
    79be:	82 01       	movw	r16, r4
    79c0:	0e 19       	sub	r16, r14
    79c2:	1f 09       	sbc	r17, r15
    79c4:	8b 81       	ldd	r24, Y+3	; 0x03
    79c6:	9c 81       	ldd	r25, Y+4	; 0x04
    79c8:	08 1b       	sub	r16, r24
    79ca:	19 0b       	sbc	r17, r25
    79cc:	c1 fe       	sbrs	r12, 1
    79ce:	07 c0       	rjmp	.+14     	; 0x79de <p_ftoa+0x124>
    79d0:	61 14       	cp	r6, r1
    79d2:	71 04       	cpc	r7, r1
    79d4:	21 f0       	breq	.+8      	; 0x79de <p_ftoa+0x124>
    79d6:	06 19       	sub	r16, r6
    79d8:	17 09       	sbc	r17, r7
    79da:	01 50       	subi	r16, 0x01	; 1
    79dc:	11 09       	sbc	r17, r1
    79de:	10 16       	cp	r1, r16
    79e0:	11 06       	cpc	r1, r17
    79e2:	2c f4       	brge	.+10     	; 0x79ee <p_ftoa+0x134>
    79e4:	60 e3       	ldi	r22, 0x30	; 48
    79e6:	ce 01       	movw	r24, r28
    79e8:	01 96       	adiw	r24, 0x01	; 1
    79ea:	f7 de       	rcall	.-530    	; 0x77da <pch>
    79ec:	f6 cf       	rjmp	.-20     	; 0x79da <p_ftoa+0x120>
    79ee:	c5 01       	movw	r24, r10
    79f0:	b4 01       	movw	r22, r8
    79f2:	0e 94 ec e0 	call	0x1c1d8	; 0x1c1d8 <__fixsfsi>
    79f6:	6f 83       	std	Y+7, r22	; 0x07
    79f8:	78 87       	std	Y+8, r23	; 0x08
    79fa:	89 87       	std	Y+9, r24	; 0x09
    79fc:	9a 87       	std	Y+10, r25	; 0x0a
    79fe:	6f 81       	ldd	r22, Y+7	; 0x07
    7a00:	60 5d       	subi	r22, 0xD0	; 208
    7a02:	ce 01       	movw	r24, r28
    7a04:	01 96       	adiw	r24, 0x01	; 1
    7a06:	e9 de       	rcall	.-558    	; 0x77da <pch>
    7a08:	2f 81       	ldd	r18, Y+7	; 0x07
    7a0a:	38 85       	ldd	r19, Y+8	; 0x08
    7a0c:	b9 01       	movw	r22, r18
    7a0e:	33 0f       	add	r19, r19
    7a10:	88 0b       	sbc	r24, r24
    7a12:	99 0b       	sbc	r25, r25
    7a14:	0e 94 1f e1 	call	0x1c23e	; 0x1c23e <__floatsisf>
    7a18:	9b 01       	movw	r18, r22
    7a1a:	ac 01       	movw	r20, r24
    7a1c:	c5 01       	movw	r24, r10
    7a1e:	b4 01       	movw	r22, r8
    7a20:	0e 94 1b e0 	call	0x1c036	; 0x1c036 <__subsf3>
    7a24:	31 e0       	ldi	r19, 0x01	; 1
    7a26:	e3 1a       	sub	r14, r19
    7a28:	f1 08       	sbc	r15, r1
    7a2a:	20 e0       	ldi	r18, 0x00	; 0
    7a2c:	30 e0       	ldi	r19, 0x00	; 0
    7a2e:	40 e2       	ldi	r20, 0x20	; 32
    7a30:	51 e4       	ldi	r21, 0x41	; 65
    7a32:	0e 94 d3 e1 	call	0x1c3a6	; 0x1c3a6 <__mulsf3>
    7a36:	4b 01       	movw	r8, r22
    7a38:	5c 01       	movw	r10, r24
    7a3a:	e1 14       	cp	r14, r1
    7a3c:	f1 04       	cpc	r15, r1
    7a3e:	b9 f6       	brne	.-82     	; 0x79ee <p_ftoa+0x134>
    7a40:	c1 fc       	sbrc	r12, 1
    7a42:	10 c0       	rjmp	.+32     	; 0x7a64 <p_ftoa+0x1aa>
    7a44:	60 e0       	ldi	r22, 0x00	; 0
    7a46:	ce 01       	movw	r24, r28
    7a48:	01 96       	adiw	r24, 0x01	; 1
    7a4a:	c7 de       	rcall	.-626    	; 0x77da <pch>
    7a4c:	f1 01       	movw	r30, r2
    7a4e:	01 90       	ld	r0, Z+
    7a50:	00 20       	and	r0, r0
    7a52:	e9 f7       	brne	.-6      	; 0x7a4e <p_ftoa+0x194>
    7a54:	31 97       	sbiw	r30, 0x01	; 1
    7a56:	cf 01       	movw	r24, r30
    7a58:	82 19       	sub	r24, r2
    7a5a:	93 09       	sbc	r25, r3
    7a5c:	2a 96       	adiw	r28, 0x0a	; 10
    7a5e:	e2 e1       	ldi	r30, 0x12	; 18
    7a60:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>
    7a64:	61 14       	cp	r6, r1
    7a66:	71 04       	cpc	r7, r1
    7a68:	69 f3       	breq	.-38     	; 0x7a44 <p_ftoa+0x18a>
    7a6a:	6e e2       	ldi	r22, 0x2E	; 46
    7a6c:	ce 01       	movw	r24, r28
    7a6e:	01 96       	adiw	r24, 0x01	; 1
    7a70:	b4 de       	rcall	.-664    	; 0x77da <pch>
    7a72:	c5 01       	movw	r24, r10
    7a74:	b4 01       	movw	r22, r8
    7a76:	0e 94 ec e0 	call	0x1c1d8	; 0x1c1d8 <__fixsfsi>
    7a7a:	6b 01       	movw	r12, r22
    7a7c:	7c 01       	movw	r14, r24
    7a7e:	07 2e       	mov	r0, r23
    7a80:	00 0c       	add	r0, r0
    7a82:	88 0b       	sbc	r24, r24
    7a84:	99 0b       	sbc	r25, r25
    7a86:	0e 94 1f e1 	call	0x1c23e	; 0x1c23e <__floatsisf>
    7a8a:	9b 01       	movw	r18, r22
    7a8c:	ac 01       	movw	r20, r24
    7a8e:	c5 01       	movw	r24, r10
    7a90:	b4 01       	movw	r22, r8
    7a92:	0e 94 1b e0 	call	0x1c036	; 0x1c036 <__subsf3>
    7a96:	4b 01       	movw	r8, r22
    7a98:	5c 01       	movw	r10, r24
    7a9a:	b6 01       	movw	r22, r12
    7a9c:	60 5d       	subi	r22, 0xD0	; 208
    7a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    7aa0:	ce 01       	movw	r24, r28
    7aa2:	01 96       	adiw	r24, 0x01	; 1
    7aa4:	9a de       	rcall	.-716    	; 0x77da <pch>
    7aa6:	81 e0       	ldi	r24, 0x01	; 1
    7aa8:	68 1a       	sub	r6, r24
    7aaa:	71 08       	sbc	r7, r1
    7aac:	20 e0       	ldi	r18, 0x00	; 0
    7aae:	30 e0       	ldi	r19, 0x00	; 0
    7ab0:	40 e2       	ldi	r20, 0x20	; 32
    7ab2:	51 e4       	ldi	r21, 0x41	; 65
    7ab4:	c5 01       	movw	r24, r10
    7ab6:	b4 01       	movw	r22, r8
    7ab8:	0e 94 d3 e1 	call	0x1c3a6	; 0x1c3a6 <__mulsf3>
    7abc:	4b 01       	movw	r8, r22
    7abe:	5c 01       	movw	r10, r24
    7ac0:	61 14       	cp	r6, r1
    7ac2:	71 04       	cpc	r7, r1
    7ac4:	b1 f6       	brne	.-84     	; 0x7a72 <p_ftoa+0x1b8>
    7ac6:	be cf       	rjmp	.-132    	; 0x7a44 <p_ftoa+0x18a>

00007ac8 <p_etoa>:
    7ac8:	a3 e1       	ldi	r26, 0x13	; 19
    7aca:	b0 e0       	ldi	r27, 0x00	; 0
    7acc:	ea e6       	ldi	r30, 0x6A	; 106
    7ace:	fd e3       	ldi	r31, 0x3D	; 61
    7ad0:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    7ad4:	4b 01       	movw	r8, r22
    7ad6:	5c 01       	movw	r10, r24
    7ad8:	59 8b       	std	Y+17, r21	; 0x11
    7ada:	48 8b       	std	Y+16, r20	; 0x10
    7adc:	1b 8b       	std	Y+19, r17	; 0x13
    7ade:	0a 8b       	std	Y+18, r16	; 0x12
    7ae0:	3c 2c       	mov	r3, r12
    7ae2:	c6 fa       	bst	r12, 6
    7ae4:	11 27       	eor	r17, r17
    7ae6:	10 f9       	bld	r17, 0
    7ae8:	59 87       	std	Y+9, r21	; 0x09
    7aea:	48 87       	std	Y+8, r20	; 0x08
    7aec:	1b 86       	std	Y+11, r1	; 0x0b
    7aee:	1a 86       	std	Y+10, r1	; 0x0a
    7af0:	21 50       	subi	r18, 0x01	; 1
    7af2:	31 09       	sbc	r19, r1
    7af4:	3d 87       	std	Y+13, r19	; 0x0d
    7af6:	2c 87       	std	Y+12, r18	; 0x0c
    7af8:	fa 01       	movw	r30, r20
    7afa:	10 82       	st	Z, r1
    7afc:	20 e0       	ldi	r18, 0x00	; 0
    7afe:	30 e0       	ldi	r19, 0x00	; 0
    7b00:	a9 01       	movw	r20, r18
    7b02:	0e 94 80 e0 	call	0x1c100	; 0x1c100 <__cmpsf2>
    7b06:	87 ff       	sbrs	r24, 7
    7b08:	05 c0       	rjmp	.+10     	; 0x7b14 <p_etoa+0x4c>
    7b0a:	b7 fa       	bst	r11, 7
    7b0c:	b0 94       	com	r11
    7b0e:	b7 f8       	bld	r11, 7
    7b10:	b0 94       	com	r11
    7b12:	11 e0       	ldi	r17, 0x01	; 1
    7b14:	10 fb       	bst	r17, 0
    7b16:	36 f8       	bld	r3, 6
    7b18:	36 fe       	sbrs	r3, 6
    7b1a:	02 c0       	rjmp	.+4      	; 0x7b20 <p_etoa+0x58>
    7b1c:	6d e2       	ldi	r22, 0x2D	; 45
    7b1e:	07 c0       	rjmp	.+14     	; 0x7b2e <p_etoa+0x66>
    7b20:	32 fe       	sbrs	r3, 2
    7b22:	02 c0       	rjmp	.+4      	; 0x7b28 <p_etoa+0x60>
    7b24:	6b e2       	ldi	r22, 0x2B	; 43
    7b26:	03 c0       	rjmp	.+6      	; 0x7b2e <p_etoa+0x66>
    7b28:	34 fe       	sbrs	r3, 4
    7b2a:	04 c0       	rjmp	.+8      	; 0x7b34 <p_etoa+0x6c>
    7b2c:	60 e2       	ldi	r22, 0x20	; 32
    7b2e:	ce 01       	movw	r24, r28
    7b30:	08 96       	adiw	r24, 0x08	; 8
    7b32:	53 de       	rcall	.-858    	; 0x77da <pch>
    7b34:	37 01       	movw	r6, r14
    7b36:	f7 fe       	sbrs	r15, 7
    7b38:	02 c0       	rjmp	.+4      	; 0x7b3e <p_etoa+0x76>
    7b3a:	61 2c       	mov	r6, r1
    7b3c:	71 2c       	mov	r7, r1
    7b3e:	1f 86       	std	Y+15, r1	; 0x0f
    7b40:	1e 86       	std	Y+14, r1	; 0x0e
    7b42:	20 e0       	ldi	r18, 0x00	; 0
    7b44:	30 e0       	ldi	r19, 0x00	; 0
    7b46:	a9 01       	movw	r20, r18
    7b48:	c5 01       	movw	r24, r10
    7b4a:	b4 01       	movw	r22, r8
    7b4c:	0e 94 80 e0 	call	0x1c100	; 0x1c100 <__cmpsf2>
    7b50:	f3 2d       	mov	r31, r3
    7b52:	f2 70       	andi	r31, 0x02	; 2
    7b54:	2f 2e       	mov	r2, r31
    7b56:	88 23       	and	r24, r24
    7b58:	09 f4       	brne	.+2      	; 0x7b5c <p_etoa+0x94>
    7b5a:	70 c0       	rjmp	.+224    	; 0x7c3c <p_etoa+0x174>
    7b5c:	ff 23       	and	r31, r31
    7b5e:	b1 f0       	breq	.+44     	; 0x7b8c <p_etoa+0xc4>
    7b60:	83 01       	movw	r16, r6
    7b62:	c1 2c       	mov	r12, r1
    7b64:	d1 2c       	mov	r13, r1
    7b66:	e1 2c       	mov	r14, r1
    7b68:	2f e3       	ldi	r18, 0x3F	; 63
    7b6a:	f2 2e       	mov	r15, r18
    7b6c:	01 15       	cp	r16, r1
    7b6e:	11 05       	cpc	r17, r1
    7b70:	91 f0       	breq	.+36     	; 0x7b96 <p_etoa+0xce>
    7b72:	20 e0       	ldi	r18, 0x00	; 0
    7b74:	30 e0       	ldi	r19, 0x00	; 0
    7b76:	40 e2       	ldi	r20, 0x20	; 32
    7b78:	51 e4       	ldi	r21, 0x41	; 65
    7b7a:	c7 01       	movw	r24, r14
    7b7c:	b6 01       	movw	r22, r12
    7b7e:	0e 94 84 e0 	call	0x1c108	; 0x1c108 <__divsf3>
    7b82:	6b 01       	movw	r12, r22
    7b84:	7c 01       	movw	r14, r24
    7b86:	01 50       	subi	r16, 0x01	; 1
    7b88:	11 09       	sbc	r17, r1
    7b8a:	f0 cf       	rjmp	.-32     	; 0x7b6c <p_etoa+0xa4>
    7b8c:	c1 2c       	mov	r12, r1
    7b8e:	d1 2c       	mov	r13, r1
    7b90:	e1 2c       	mov	r14, r1
    7b92:	9f e3       	ldi	r25, 0x3F	; 63
    7b94:	f9 2e       	mov	r15, r25
    7b96:	41 2c       	mov	r4, r1
    7b98:	51 2c       	mov	r5, r1
    7b9a:	82 01       	movw	r16, r4
    7b9c:	01 50       	subi	r16, 0x01	; 1
    7b9e:	11 09       	sbc	r17, r1
    7ba0:	20 e0       	ldi	r18, 0x00	; 0
    7ba2:	30 e0       	ldi	r19, 0x00	; 0
    7ba4:	40 e8       	ldi	r20, 0x80	; 128
    7ba6:	5f e3       	ldi	r21, 0x3F	; 63
    7ba8:	c5 01       	movw	r24, r10
    7baa:	b4 01       	movw	r22, r8
    7bac:	0e 94 80 e0 	call	0x1c100	; 0x1c100 <__cmpsf2>
    7bb0:	87 ff       	sbrs	r24, 7
    7bb2:	0c c0       	rjmp	.+24     	; 0x7bcc <p_etoa+0x104>
    7bb4:	20 e0       	ldi	r18, 0x00	; 0
    7bb6:	30 e0       	ldi	r19, 0x00	; 0
    7bb8:	40 e2       	ldi	r20, 0x20	; 32
    7bba:	51 e4       	ldi	r21, 0x41	; 65
    7bbc:	c5 01       	movw	r24, r10
    7bbe:	b4 01       	movw	r22, r8
    7bc0:	0e 94 d3 e1 	call	0x1c3a6	; 0x1c3a6 <__mulsf3>
    7bc4:	4b 01       	movw	r8, r22
    7bc6:	5c 01       	movw	r10, r24
    7bc8:	28 01       	movw	r4, r16
    7bca:	e7 cf       	rjmp	.-50     	; 0x7b9a <p_etoa+0xd2>
    7bcc:	82 01       	movw	r16, r4
    7bce:	0f 5f       	subi	r16, 0xFF	; 255
    7bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    7bd2:	20 e0       	ldi	r18, 0x00	; 0
    7bd4:	30 e0       	ldi	r19, 0x00	; 0
    7bd6:	40 e2       	ldi	r20, 0x20	; 32
    7bd8:	51 e4       	ldi	r21, 0x41	; 65
    7bda:	c5 01       	movw	r24, r10
    7bdc:	b4 01       	movw	r22, r8
    7bde:	0e 94 cf e1 	call	0x1c39e	; 0x1c39e <__gesf2>
    7be2:	87 fd       	sbrc	r24, 7
    7be4:	0c c0       	rjmp	.+24     	; 0x7bfe <p_etoa+0x136>
    7be6:	20 e0       	ldi	r18, 0x00	; 0
    7be8:	30 e0       	ldi	r19, 0x00	; 0
    7bea:	40 e2       	ldi	r20, 0x20	; 32
    7bec:	51 e4       	ldi	r21, 0x41	; 65
    7bee:	c5 01       	movw	r24, r10
    7bf0:	b4 01       	movw	r22, r8
    7bf2:	0e 94 84 e0 	call	0x1c108	; 0x1c108 <__divsf3>
    7bf6:	4b 01       	movw	r8, r22
    7bf8:	5c 01       	movw	r10, r24
    7bfa:	28 01       	movw	r4, r16
    7bfc:	e7 cf       	rjmp	.-50     	; 0x7bcc <p_etoa+0x104>
    7bfe:	a7 01       	movw	r20, r14
    7c00:	96 01       	movw	r18, r12
    7c02:	c5 01       	movw	r24, r10
    7c04:	b4 01       	movw	r22, r8
    7c06:	0e 94 1c e0 	call	0x1c038	; 0x1c038 <__addsf3>
    7c0a:	4b 01       	movw	r8, r22
    7c0c:	5c 01       	movw	r10, r24
    7c0e:	82 01       	movw	r16, r4
    7c10:	2f ef       	ldi	r18, 0xFF	; 255
    7c12:	42 1a       	sub	r4, r18
    7c14:	52 0a       	sbc	r5, r18
    7c16:	20 e0       	ldi	r18, 0x00	; 0
    7c18:	30 e0       	ldi	r19, 0x00	; 0
    7c1a:	40 e2       	ldi	r20, 0x20	; 32
    7c1c:	51 e4       	ldi	r21, 0x41	; 65
    7c1e:	0e 94 cf e1 	call	0x1c39e	; 0x1c39e <__gesf2>
    7c22:	87 fd       	sbrc	r24, 7
    7c24:	09 c0       	rjmp	.+18     	; 0x7c38 <p_etoa+0x170>
    7c26:	20 e0       	ldi	r18, 0x00	; 0
    7c28:	30 e0       	ldi	r19, 0x00	; 0
    7c2a:	40 e2       	ldi	r20, 0x20	; 32
    7c2c:	51 e4       	ldi	r21, 0x41	; 65
    7c2e:	c5 01       	movw	r24, r10
    7c30:	b4 01       	movw	r22, r8
    7c32:	0e 94 84 e0 	call	0x1c108	; 0x1c108 <__divsf3>
    7c36:	e9 cf       	rjmp	.-46     	; 0x7c0a <p_etoa+0x142>
    7c38:	0e 87       	std	Y+14, r16	; 0x0e
    7c3a:	1f 87       	std	Y+15, r17	; 0x0f
    7c3c:	85 e6       	ldi	r24, 0x65	; 101
    7c3e:	89 83       	std	Y+1, r24	; 0x01
    7c40:	8e 85       	ldd	r24, Y+14	; 0x0e
    7c42:	9f 85       	ldd	r25, Y+15	; 0x0f
    7c44:	97 ff       	sbrs	r25, 7
    7c46:	08 c0       	rjmp	.+16     	; 0x7c58 <p_etoa+0x190>
    7c48:	91 95       	neg	r25
    7c4a:	81 95       	neg	r24
    7c4c:	91 09       	sbc	r25, r1
    7c4e:	9f 87       	std	Y+15, r25	; 0x0f
    7c50:	8e 87       	std	Y+14, r24	; 0x0e
    7c52:	8d e2       	ldi	r24, 0x2D	; 45
    7c54:	90 e0       	ldi	r25, 0x00	; 0
    7c56:	02 c0       	rjmp	.+4      	; 0x7c5c <p_etoa+0x194>
    7c58:	8b e2       	ldi	r24, 0x2B	; 43
    7c5a:	90 e0       	ldi	r25, 0x00	; 0
    7c5c:	6c 01       	movw	r12, r24
    7c5e:	82 e0       	ldi	r24, 0x02	; 2
    7c60:	e8 2e       	mov	r14, r24
    7c62:	f1 2c       	mov	r15, r1
    7c64:	8e 01       	movw	r16, r28
    7c66:	02 5f       	subi	r16, 0xF2	; 242
    7c68:	1f 4f       	sbci	r17, 0xFF	; 255
    7c6a:	2a e0       	ldi	r18, 0x0A	; 10
    7c6c:	30 e0       	ldi	r19, 0x00	; 0
    7c6e:	42 e0       	ldi	r20, 0x02	; 2
    7c70:	50 e0       	ldi	r21, 0x00	; 0
    7c72:	65 e0       	ldi	r22, 0x05	; 5
    7c74:	70 e0       	ldi	r23, 0x00	; 0
    7c76:	ce 01       	movw	r24, r28
    7c78:	02 96       	adiw	r24, 0x02	; 2
    7c7a:	26 dd       	rcall	.-1460   	; 0x76c8 <bin2num>
    7c7c:	9c 01       	movw	r18, r24
    7c7e:	93 2d       	mov	r25, r3
    7c80:	98 72       	andi	r25, 0x28	; 40
    7c82:	90 32       	cpi	r25, 0x20	; 32
    7c84:	71 f0       	breq	.+28     	; 0x7ca2 <p_etoa+0x1da>
    7c86:	c5 01       	movw	r24, r10
    7c88:	b4 01       	movw	r22, r8
    7c8a:	0e 94 ec e0 	call	0x1c1d8	; 0x1c1d8 <__fixsfsi>
    7c8e:	6b 01       	movw	r12, r22
    7c90:	7c 01       	movw	r14, r24
    7c92:	60 e3       	ldi	r22, 0x30	; 48
    7c94:	6c 0d       	add	r22, r12
    7c96:	ce 01       	movw	r24, r28
    7c98:	08 96       	adiw	r24, 0x08	; 8
    7c9a:	9f dd       	rcall	.-1218   	; 0x77da <pch>
    7c9c:	21 10       	cpse	r2, r1
    7c9e:	20 c0       	rjmp	.+64     	; 0x7ce0 <p_etoa+0x218>
    7ca0:	63 c0       	rjmp	.+198    	; 0x7d68 <p_etoa+0x2a0>
    7ca2:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ca4:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ca6:	0a 89       	ldd	r16, Y+18	; 0x12
    7ca8:	1b 89       	ldd	r17, Y+19	; 0x13
    7caa:	08 1b       	sub	r16, r24
    7cac:	19 0b       	sbc	r17, r25
    7cae:	22 20       	and	r2, r2
    7cb0:	41 f0       	breq	.+16     	; 0x7cc2 <p_etoa+0x1fa>
    7cb2:	61 14       	cp	r6, r1
    7cb4:	71 04       	cpc	r7, r1
    7cb6:	29 f0       	breq	.+10     	; 0x7cc2 <p_etoa+0x1fa>
    7cb8:	06 19       	sub	r16, r6
    7cba:	17 09       	sbc	r17, r7
    7cbc:	06 50       	subi	r16, 0x06	; 6
    7cbe:	11 09       	sbc	r17, r1
    7cc0:	02 c0       	rjmp	.+4      	; 0x7cc6 <p_etoa+0x1fe>
    7cc2:	05 50       	subi	r16, 0x05	; 5
    7cc4:	11 09       	sbc	r17, r1
    7cc6:	24 30       	cpi	r18, 0x04	; 4
    7cc8:	31 05       	cpc	r19, r1
    7cca:	14 f0       	brlt	.+4      	; 0x7cd0 <p_etoa+0x208>
    7ccc:	01 50       	subi	r16, 0x01	; 1
    7cce:	11 09       	sbc	r17, r1
    7cd0:	10 16       	cp	r1, r16
    7cd2:	11 06       	cpc	r1, r17
    7cd4:	c4 f6       	brge	.-80     	; 0x7c86 <p_etoa+0x1be>
    7cd6:	60 e3       	ldi	r22, 0x30	; 48
    7cd8:	ce 01       	movw	r24, r28
    7cda:	08 96       	adiw	r24, 0x08	; 8
    7cdc:	7e dd       	rcall	.-1284   	; 0x77da <pch>
    7cde:	f6 cf       	rjmp	.-20     	; 0x7ccc <p_etoa+0x204>
    7ce0:	61 14       	cp	r6, r1
    7ce2:	71 04       	cpc	r7, r1
    7ce4:	09 f4       	brne	.+2      	; 0x7ce8 <p_etoa+0x220>
    7ce6:	40 c0       	rjmp	.+128    	; 0x7d68 <p_etoa+0x2a0>
    7ce8:	b6 01       	movw	r22, r12
    7cea:	dd 0c       	add	r13, r13
    7cec:	88 0b       	sbc	r24, r24
    7cee:	99 0b       	sbc	r25, r25
    7cf0:	0e 94 1f e1 	call	0x1c23e	; 0x1c23e <__floatsisf>
    7cf4:	9b 01       	movw	r18, r22
    7cf6:	ac 01       	movw	r20, r24
    7cf8:	c5 01       	movw	r24, r10
    7cfa:	b4 01       	movw	r22, r8
    7cfc:	0e 94 1b e0 	call	0x1c036	; 0x1c036 <__subsf3>
    7d00:	20 e0       	ldi	r18, 0x00	; 0
    7d02:	30 e0       	ldi	r19, 0x00	; 0
    7d04:	40 e2       	ldi	r20, 0x20	; 32
    7d06:	51 e4       	ldi	r21, 0x41	; 65
    7d08:	0e 94 d3 e1 	call	0x1c3a6	; 0x1c3a6 <__mulsf3>
    7d0c:	4b 01       	movw	r8, r22
    7d0e:	5c 01       	movw	r10, r24
    7d10:	6e e2       	ldi	r22, 0x2E	; 46
    7d12:	ce 01       	movw	r24, r28
    7d14:	08 96       	adiw	r24, 0x08	; 8
    7d16:	61 dd       	rcall	.-1342   	; 0x77da <pch>
    7d18:	c5 01       	movw	r24, r10
    7d1a:	b4 01       	movw	r22, r8
    7d1c:	0e 94 ec e0 	call	0x1c1d8	; 0x1c1d8 <__fixsfsi>
    7d20:	6b 01       	movw	r12, r22
    7d22:	7c 01       	movw	r14, r24
    7d24:	07 2e       	mov	r0, r23
    7d26:	00 0c       	add	r0, r0
    7d28:	88 0b       	sbc	r24, r24
    7d2a:	99 0b       	sbc	r25, r25
    7d2c:	0e 94 1f e1 	call	0x1c23e	; 0x1c23e <__floatsisf>
    7d30:	9b 01       	movw	r18, r22
    7d32:	ac 01       	movw	r20, r24
    7d34:	c5 01       	movw	r24, r10
    7d36:	b4 01       	movw	r22, r8
    7d38:	0e 94 1b e0 	call	0x1c036	; 0x1c036 <__subsf3>
    7d3c:	4b 01       	movw	r8, r22
    7d3e:	5c 01       	movw	r10, r24
    7d40:	b6 01       	movw	r22, r12
    7d42:	60 5d       	subi	r22, 0xD0	; 208
    7d44:	7f 4f       	sbci	r23, 0xFF	; 255
    7d46:	ce 01       	movw	r24, r28
    7d48:	08 96       	adiw	r24, 0x08	; 8
    7d4a:	47 dd       	rcall	.-1394   	; 0x77da <pch>
    7d4c:	20 e0       	ldi	r18, 0x00	; 0
    7d4e:	30 e0       	ldi	r19, 0x00	; 0
    7d50:	40 e2       	ldi	r20, 0x20	; 32
    7d52:	51 e4       	ldi	r21, 0x41	; 65
    7d54:	c5 01       	movw	r24, r10
    7d56:	b4 01       	movw	r22, r8
    7d58:	0e 94 d3 e1 	call	0x1c3a6	; 0x1c3a6 <__mulsf3>
    7d5c:	4b 01       	movw	r8, r22
    7d5e:	5c 01       	movw	r10, r24
    7d60:	31 e0       	ldi	r19, 0x01	; 1
    7d62:	63 1a       	sub	r6, r19
    7d64:	71 08       	sbc	r7, r1
    7d66:	c1 f6       	brne	.-80     	; 0x7d18 <p_etoa+0x250>
    7d68:	8e 01       	movw	r16, r28
    7d6a:	0f 5f       	subi	r16, 0xFF	; 255
    7d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    7d6e:	f8 01       	movw	r30, r16
    7d70:	61 91       	ld	r22, Z+
    7d72:	8f 01       	movw	r16, r30
    7d74:	ce 01       	movw	r24, r28
    7d76:	08 96       	adiw	r24, 0x08	; 8
    7d78:	66 23       	and	r22, r22
    7d7a:	11 f0       	breq	.+4      	; 0x7d80 <p_etoa+0x2b8>
    7d7c:	2e dd       	rcall	.-1444   	; 0x77da <pch>
    7d7e:	f7 cf       	rjmp	.-18     	; 0x7d6e <p_etoa+0x2a6>
    7d80:	2c dd       	rcall	.-1448   	; 0x77da <pch>
    7d82:	e8 89       	ldd	r30, Y+16	; 0x10
    7d84:	f9 89       	ldd	r31, Y+17	; 0x11
    7d86:	01 90       	ld	r0, Z+
    7d88:	00 20       	and	r0, r0
    7d8a:	e9 f7       	brne	.-6      	; 0x7d86 <p_etoa+0x2be>
    7d8c:	cf 01       	movw	r24, r30
    7d8e:	01 97       	sbiw	r24, 0x01	; 1
    7d90:	28 89       	ldd	r18, Y+16	; 0x10
    7d92:	39 89       	ldd	r19, Y+17	; 0x11
    7d94:	82 1b       	sub	r24, r18
    7d96:	93 0b       	sbc	r25, r19
    7d98:	63 96       	adiw	r28, 0x13	; 19
    7d9a:	e2 e1       	ldi	r30, 0x12	; 18
    7d9c:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

00007da0 <_puts_pad>:
    7da0:	a0 e0       	ldi	r26, 0x00	; 0
    7da2:	b0 e0       	ldi	r27, 0x00	; 0
    7da4:	e6 ed       	ldi	r30, 0xD6	; 214
    7da6:	fe e3       	ldi	r31, 0x3E	; 62
    7da8:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
    7dac:	6c 01       	movw	r12, r24
    7dae:	4b 01       	movw	r8, r22
    7db0:	79 01       	movw	r14, r18
    7db2:	24 17       	cp	r18, r20
    7db4:	35 07       	cpc	r19, r21
    7db6:	24 f4       	brge	.+8      	; 0x7dc0 <_puts_pad+0x20>
    7db8:	ea 01       	movw	r28, r20
    7dba:	c2 1b       	sub	r28, r18
    7dbc:	d3 0b       	sbc	r29, r19
    7dbe:	02 c0       	rjmp	.+4      	; 0x7dc4 <_puts_pad+0x24>
    7dc0:	c0 e0       	ldi	r28, 0x00	; 0
    7dc2:	d0 e0       	ldi	r29, 0x00	; 0
    7dc4:	01 15       	cp	r16, r1
    7dc6:	11 05       	cpc	r17, r1
    7dc8:	49 f4       	brne	.+18     	; 0x7ddc <_puts_pad+0x3c>
    7dca:	21 97       	sbiw	r28, 0x01	; 1
    7dcc:	38 f0       	brcs	.+14     	; 0x7ddc <_puts_pad+0x3c>
    7dce:	d6 01       	movw	r26, r12
    7dd0:	ed 91       	ld	r30, X+
    7dd2:	fc 91       	ld	r31, X
    7dd4:	60 e2       	ldi	r22, 0x20	; 32
    7dd6:	c6 01       	movw	r24, r12
    7dd8:	09 95       	icall
    7dda:	f7 cf       	rjmp	.-18     	; 0x7dca <_puts_pad+0x2a>
    7ddc:	54 01       	movw	r10, r8
    7dde:	f5 01       	movw	r30, r10
    7de0:	61 91       	ld	r22, Z+
    7de2:	5f 01       	movw	r10, r30
    7de4:	66 23       	and	r22, r22
    7de6:	61 f0       	breq	.+24     	; 0x7e00 <_puts_pad+0x60>
    7de8:	e1 14       	cp	r14, r1
    7dea:	f1 04       	cpc	r15, r1
    7dec:	49 f0       	breq	.+18     	; 0x7e00 <_puts_pad+0x60>
    7dee:	d6 01       	movw	r26, r12
    7df0:	ed 91       	ld	r30, X+
    7df2:	fc 91       	ld	r31, X
    7df4:	c6 01       	movw	r24, r12
    7df6:	09 95       	icall
    7df8:	b1 e0       	ldi	r27, 0x01	; 1
    7dfa:	eb 1a       	sub	r14, r27
    7dfc:	f1 08       	sbc	r15, r1
    7dfe:	ef cf       	rjmp	.-34     	; 0x7dde <_puts_pad+0x3e>
    7e00:	01 15       	cp	r16, r1
    7e02:	11 05       	cpc	r17, r1
    7e04:	51 f0       	breq	.+20     	; 0x7e1a <_puts_pad+0x7a>
    7e06:	20 97       	sbiw	r28, 0x00	; 0
    7e08:	41 f0       	breq	.+16     	; 0x7e1a <_puts_pad+0x7a>
    7e0a:	d6 01       	movw	r26, r12
    7e0c:	ed 91       	ld	r30, X+
    7e0e:	fc 91       	ld	r31, X
    7e10:	60 e2       	ldi	r22, 0x20	; 32
    7e12:	c6 01       	movw	r24, r12
    7e14:	09 95       	icall
    7e16:	21 97       	sbiw	r28, 0x01	; 1
    7e18:	f6 cf       	rjmp	.-20     	; 0x7e06 <_puts_pad+0x66>
    7e1a:	cd b7       	in	r28, 0x3d	; 61
    7e1c:	de b7       	in	r29, 0x3e	; 62
    7e1e:	ec e0       	ldi	r30, 0x0C	; 12
    7e20:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

00007e24 <_printf_fn>:
    7e24:	ab e6       	ldi	r26, 0x6B	; 107
    7e26:	b0 e0       	ldi	r27, 0x00	; 0
    7e28:	e8 e1       	ldi	r30, 0x18	; 24
    7e2a:	ff e3       	ldi	r31, 0x3F	; 63
    7e2c:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    7e30:	a5 96       	adiw	r28, 0x25	; 37
    7e32:	9f af       	std	Y+63, r25	; 0x3f
    7e34:	8e af       	std	Y+62, r24	; 0x3e
    7e36:	a5 97       	sbiw	r28, 0x25	; 37
    7e38:	6a 01       	movw	r12, r20
    7e3a:	e6 2e       	mov	r14, r22
    7e3c:	19 01       	movw	r2, r18
    7e3e:	a9 96       	adiw	r28, 0x29	; 41
    7e40:	1c ae       	std	Y+60, r1	; 0x3c
    7e42:	1d ae       	std	Y+61, r1	; 0x3d
    7e44:	1e ae       	std	Y+62, r1	; 0x3e
    7e46:	1f ae       	std	Y+63, r1	; 0x3f
    7e48:	a9 97       	sbiw	r28, 0x29	; 41
    7e4a:	9e 01       	movw	r18, r28
    7e4c:	2f 5a       	subi	r18, 0xAF	; 175
    7e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    7e50:	67 96       	adiw	r28, 0x17	; 23
    7e52:	3f af       	std	Y+63, r19	; 0x3f
    7e54:	2e af       	std	Y+62, r18	; 0x3e
    7e56:	67 97       	sbiw	r28, 0x17	; 23
    7e58:	ae 01       	movw	r20, r28
    7e5a:	4d 5b       	subi	r20, 0xBD	; 189
    7e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    7e5e:	69 96       	adiw	r28, 0x19	; 25
    7e60:	5f af       	std	Y+63, r21	; 0x3f
    7e62:	4e af       	std	Y+62, r20	; 0x3e
    7e64:	69 97       	sbiw	r28, 0x19	; 25
    7e66:	ce 01       	movw	r24, r28
    7e68:	85 5b       	subi	r24, 0xB5	; 181
    7e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    7e6c:	6b 96       	adiw	r28, 0x1b	; 27
    7e6e:	9f af       	std	Y+63, r25	; 0x3f
    7e70:	8e af       	std	Y+62, r24	; 0x3e
    7e72:	6b 97       	sbiw	r28, 0x1b	; 27
    7e74:	de 01       	movw	r26, r28
    7e76:	ad 5a       	subi	r26, 0xAD	; 173
    7e78:	bf 4f       	sbci	r27, 0xFF	; 255
    7e7a:	6d 96       	adiw	r28, 0x1d	; 29
    7e7c:	bf af       	std	Y+63, r27	; 0x3f
    7e7e:	ae af       	std	Y+62, r26	; 0x3e
    7e80:	6d 97       	sbiw	r28, 0x1d	; 29
    7e82:	f6 01       	movw	r30, r12
    7e84:	5e 2d       	mov	r21, r14
    7e86:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    7e8a:	66 23       	and	r22, r22
    7e8c:	09 f4       	brne	.+2      	; 0x7e90 <_printf_fn+0x6c>
    7e8e:	d7 c3       	rjmp	.+1966   	; 0x863e <_printf_fn+0x81a>
    7e90:	ae 2d       	mov	r26, r14
    7e92:	c6 01       	movw	r24, r12
    7e94:	01 96       	adiw	r24, 0x01	; 1
    7e96:	a1 1d       	adc	r26, r1
    7e98:	3c 01       	movw	r6, r24
    7e9a:	8a 2e       	mov	r8, r26
    7e9c:	65 32       	cpi	r22, 0x25	; 37
    7e9e:	51 f0       	breq	.+20     	; 0x7eb4 <_printf_fn+0x90>
    7ea0:	a5 96       	adiw	r28, 0x25	; 37
    7ea2:	ae ad       	ldd	r26, Y+62	; 0x3e
    7ea4:	bf ad       	ldd	r27, Y+63	; 0x3f
    7ea6:	a5 97       	sbiw	r28, 0x25	; 37
    7ea8:	ed 91       	ld	r30, X+
    7eaa:	fc 91       	ld	r31, X
    7eac:	11 97       	sbiw	r26, 0x01	; 1
    7eae:	cd 01       	movw	r24, r26
    7eb0:	09 95       	icall
    7eb2:	91 c3       	rjmp	.+1826   	; 0x85d6 <_printf_fn+0x7b2>
    7eb4:	91 2c       	mov	r9, r1
    7eb6:	f3 01       	movw	r30, r6
    7eb8:	58 2d       	mov	r21, r8
    7eba:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    7ebe:	63 32       	cpi	r22, 0x23	; 35
    7ec0:	19 f4       	brne	.+6      	; 0x7ec8 <_printf_fn+0xa4>
    7ec2:	68 94       	set
    7ec4:	97 f8       	bld	r9, 7
    7ec6:	04 c0       	rjmp	.+8      	; 0x7ed0 <_printf_fn+0xac>
    7ec8:	6b 32       	cpi	r22, 0x2B	; 43
    7eca:	39 f4       	brne	.+14     	; 0x7eda <_printf_fn+0xb6>
    7ecc:	68 94       	set
    7ece:	92 f8       	bld	r9, 2
    7ed0:	bf ef       	ldi	r27, 0xFF	; 255
    7ed2:	6b 1a       	sub	r6, r27
    7ed4:	7b 0a       	sbc	r7, r27
    7ed6:	8b 0a       	sbc	r8, r27
    7ed8:	ee cf       	rjmp	.-36     	; 0x7eb6 <_printf_fn+0x92>
    7eda:	6d 32       	cpi	r22, 0x2D	; 45
    7edc:	a9 f4       	brne	.+42     	; 0x7f08 <_printf_fn+0xe4>
    7ede:	93 fc       	sbrc	r9, 3
    7ee0:	05 c0       	rjmp	.+10     	; 0x7eec <_printf_fn+0xc8>
    7ee2:	6d 32       	cpi	r22, 0x2D	; 45
    7ee4:	19 f4       	brne	.+6      	; 0x7eec <_printf_fn+0xc8>
    7ee6:	68 94       	set
    7ee8:	93 f8       	bld	r9, 3
    7eea:	f2 cf       	rjmp	.-28     	; 0x7ed0 <_printf_fn+0xac>
    7eec:	94 fc       	sbrc	r9, 4
    7eee:	05 c0       	rjmp	.+10     	; 0x7efa <_printf_fn+0xd6>
    7ef0:	60 32       	cpi	r22, 0x20	; 32
    7ef2:	19 f4       	brne	.+6      	; 0x7efa <_printf_fn+0xd6>
    7ef4:	68 94       	set
    7ef6:	94 f8       	bld	r9, 4
    7ef8:	eb cf       	rjmp	.-42     	; 0x7ed0 <_printf_fn+0xac>
    7efa:	95 fc       	sbrc	r9, 5
    7efc:	e9 cf       	rjmp	.-46     	; 0x7ed0 <_printf_fn+0xac>
    7efe:	60 33       	cpi	r22, 0x30	; 48
    7f00:	39 f7       	brne	.-50     	; 0x7ed0 <_printf_fn+0xac>
    7f02:	68 94       	set
    7f04:	95 f8       	bld	r9, 5
    7f06:	e4 cf       	rjmp	.-56     	; 0x7ed0 <_printf_fn+0xac>
    7f08:	86 2f       	mov	r24, r22
    7f0a:	8f 7e       	andi	r24, 0xEF	; 239
    7f0c:	80 32       	cpi	r24, 0x20	; 32
    7f0e:	39 f3       	breq	.-50     	; 0x7ede <_printf_fn+0xba>
    7f10:	70 e0       	ldi	r23, 0x00	; 0
    7f12:	60 53       	subi	r22, 0x30	; 48
    7f14:	71 09       	sbc	r23, r1
    7f16:	41 2c       	mov	r4, r1
    7f18:	51 2c       	mov	r5, r1
    7f1a:	6a 30       	cpi	r22, 0x0A	; 10
    7f1c:	71 05       	cpc	r23, r1
    7f1e:	e0 f4       	brcc	.+56     	; 0x7f58 <_printf_fn+0x134>
    7f20:	2a e0       	ldi	r18, 0x0A	; 10
    7f22:	f3 01       	movw	r30, r6
    7f24:	58 2d       	mov	r21, r8
    7f26:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    7f2a:	70 e0       	ldi	r23, 0x00	; 0
    7f2c:	cb 01       	movw	r24, r22
    7f2e:	c0 97       	sbiw	r24, 0x30	; 48
    7f30:	0a 97       	sbiw	r24, 0x0a	; 10
    7f32:	80 f4       	brcc	.+32     	; 0x7f54 <_printf_fn+0x130>
    7f34:	ef ef       	ldi	r30, 0xFF	; 255
    7f36:	6e 1a       	sub	r6, r30
    7f38:	7e 0a       	sbc	r7, r30
    7f3a:	8e 0a       	sbc	r8, r30
    7f3c:	24 9d       	mul	r18, r4
    7f3e:	c0 01       	movw	r24, r0
    7f40:	25 9d       	mul	r18, r5
    7f42:	90 0d       	add	r25, r0
    7f44:	11 24       	eor	r1, r1
    7f46:	68 0f       	add	r22, r24
    7f48:	79 1f       	adc	r23, r25
    7f4a:	2b 01       	movw	r4, r22
    7f4c:	f0 e3       	ldi	r31, 0x30	; 48
    7f4e:	4f 1a       	sub	r4, r31
    7f50:	51 08       	sbc	r5, r1
    7f52:	e7 cf       	rjmp	.-50     	; 0x7f22 <_printf_fn+0xfe>
    7f54:	68 94       	set
    7f56:	90 f8       	bld	r9, 0
    7f58:	f3 01       	movw	r30, r6
    7f5a:	58 2d       	mov	r21, r8
    7f5c:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    7f60:	6e 32       	cpi	r22, 0x2E	; 46
    7f62:	59 f5       	brne	.+86     	; 0x7fba <_printf_fn+0x196>
    7f64:	2f ef       	ldi	r18, 0xFF	; 255
    7f66:	62 1a       	sub	r6, r18
    7f68:	72 0a       	sbc	r7, r18
    7f6a:	82 0a       	sbc	r8, r18
    7f6c:	a1 96       	adiw	r28, 0x21	; 33
    7f6e:	1f ae       	std	Y+63, r1	; 0x3f
    7f70:	1e ae       	std	Y+62, r1	; 0x3e
    7f72:	a1 97       	sbiw	r28, 0x21	; 33
    7f74:	2a e0       	ldi	r18, 0x0A	; 10
    7f76:	f3 01       	movw	r30, r6
    7f78:	58 2d       	mov	r21, r8
    7f7a:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    7f7e:	70 e0       	ldi	r23, 0x00	; 0
    7f80:	cb 01       	movw	r24, r22
    7f82:	c0 97       	sbiw	r24, 0x30	; 48
    7f84:	0a 97       	sbiw	r24, 0x0a	; 10
    7f86:	b0 f4       	brcc	.+44     	; 0x7fb4 <_printf_fn+0x190>
    7f88:	3f ef       	ldi	r19, 0xFF	; 255
    7f8a:	63 1a       	sub	r6, r19
    7f8c:	73 0a       	sbc	r7, r19
    7f8e:	83 0a       	sbc	r8, r19
    7f90:	a1 96       	adiw	r28, 0x21	; 33
    7f92:	4e ad       	ldd	r20, Y+62	; 0x3e
    7f94:	5f ad       	ldd	r21, Y+63	; 0x3f
    7f96:	a1 97       	sbiw	r28, 0x21	; 33
    7f98:	24 9f       	mul	r18, r20
    7f9a:	c0 01       	movw	r24, r0
    7f9c:	25 9f       	mul	r18, r21
    7f9e:	90 0d       	add	r25, r0
    7fa0:	11 24       	eor	r1, r1
    7fa2:	68 0f       	add	r22, r24
    7fa4:	79 1f       	adc	r23, r25
    7fa6:	cb 01       	movw	r24, r22
    7fa8:	c0 97       	sbiw	r24, 0x30	; 48
    7faa:	a1 96       	adiw	r28, 0x21	; 33
    7fac:	9f af       	std	Y+63, r25	; 0x3f
    7fae:	8e af       	std	Y+62, r24	; 0x3e
    7fb0:	a1 97       	sbiw	r28, 0x21	; 33
    7fb2:	e1 cf       	rjmp	.-62     	; 0x7f76 <_printf_fn+0x152>
    7fb4:	68 94       	set
    7fb6:	91 f8       	bld	r9, 1
    7fb8:	04 c0       	rjmp	.+8      	; 0x7fc2 <_printf_fn+0x19e>
    7fba:	a1 96       	adiw	r28, 0x21	; 33
    7fbc:	1f ae       	std	Y+63, r1	; 0x3f
    7fbe:	1e ae       	std	Y+62, r1	; 0x3e
    7fc0:	a1 97       	sbiw	r28, 0x21	; 33
    7fc2:	f3 01       	movw	r30, r6
    7fc4:	58 2d       	mov	r21, r8
    7fc6:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    7fca:	69 34       	cpi	r22, 0x49	; 73
    7fcc:	09 f0       	breq	.+2      	; 0x7fd0 <_printf_fn+0x1ac>
    7fce:	45 c0       	rjmp	.+138    	; 0x805a <_printf_fn+0x236>
    7fd0:	9f ef       	ldi	r25, 0xFF	; 255
    7fd2:	69 1a       	sub	r6, r25
    7fd4:	79 0a       	sbc	r7, r25
    7fd6:	89 0a       	sbc	r8, r25
    7fd8:	6f 96       	adiw	r28, 0x1f	; 31
    7fda:	1f ae       	std	Y+63, r1	; 0x3f
    7fdc:	1e ae       	std	Y+62, r1	; 0x3e
    7fde:	6f 97       	sbiw	r28, 0x1f	; 31
    7fe0:	2a e0       	ldi	r18, 0x0A	; 10
    7fe2:	f3 01       	movw	r30, r6
    7fe4:	58 2d       	mov	r21, r8
    7fe6:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    7fea:	70 e0       	ldi	r23, 0x00	; 0
    7fec:	cb 01       	movw	r24, r22
    7fee:	c0 97       	sbiw	r24, 0x30	; 48
    7ff0:	0a 97       	sbiw	r24, 0x0a	; 10
    7ff2:	b8 f4       	brcc	.+46     	; 0x8022 <_printf_fn+0x1fe>
    7ff4:	af ef       	ldi	r26, 0xFF	; 255
    7ff6:	6a 1a       	sub	r6, r26
    7ff8:	7a 0a       	sbc	r7, r26
    7ffa:	8a 0a       	sbc	r8, r26
    7ffc:	6f 96       	adiw	r28, 0x1f	; 31
    7ffe:	ee ad       	ldd	r30, Y+62	; 0x3e
    8000:	ff ad       	ldd	r31, Y+63	; 0x3f
    8002:	6f 97       	sbiw	r28, 0x1f	; 31
    8004:	2e 9f       	mul	r18, r30
    8006:	c0 01       	movw	r24, r0
    8008:	2f 9f       	mul	r18, r31
    800a:	90 0d       	add	r25, r0
    800c:	11 24       	eor	r1, r1
    800e:	68 0f       	add	r22, r24
    8010:	79 1f       	adc	r23, r25
    8012:	ab 01       	movw	r20, r22
    8014:	40 53       	subi	r20, 0x30	; 48
    8016:	51 09       	sbc	r21, r1
    8018:	6f 96       	adiw	r28, 0x1f	; 31
    801a:	5f af       	std	Y+63, r21	; 0x3f
    801c:	4e af       	std	Y+62, r20	; 0x3e
    801e:	6f 97       	sbiw	r28, 0x1f	; 31
    8020:	e0 cf       	rjmp	.-64     	; 0x7fe2 <_printf_fn+0x1be>
    8022:	6f 96       	adiw	r28, 0x1f	; 31
    8024:	8e ad       	ldd	r24, Y+62	; 0x3e
    8026:	9f ad       	ldd	r25, Y+63	; 0x3f
    8028:	6f 97       	sbiw	r28, 0x1f	; 31
    802a:	00 97       	sbiw	r24, 0x00	; 0
    802c:	09 f4       	brne	.+2      	; 0x8030 <_printf_fn+0x20c>
    802e:	4f c0       	rjmp	.+158    	; 0x80ce <_printf_fn+0x2aa>
    8030:	87 70       	andi	r24, 0x07	; 7
    8032:	99 27       	eor	r25, r25
    8034:	89 2b       	or	r24, r25
    8036:	09 f0       	breq	.+2      	; 0x803a <_printf_fn+0x216>
    8038:	46 c0       	rjmp	.+140    	; 0x80c6 <_printf_fn+0x2a2>
    803a:	6f 96       	adiw	r28, 0x1f	; 31
    803c:	ae ad       	ldd	r26, Y+62	; 0x3e
    803e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8040:	6f 97       	sbiw	r28, 0x1f	; 31
    8042:	83 e0       	ldi	r24, 0x03	; 3
    8044:	b5 95       	asr	r27
    8046:	a7 95       	ror	r26
    8048:	8a 95       	dec	r24
    804a:	e1 f7       	brne	.-8      	; 0x8044 <_printf_fn+0x220>
    804c:	6f 96       	adiw	r28, 0x1f	; 31
    804e:	bf af       	std	Y+63, r27	; 0x3f
    8050:	ae af       	std	Y+62, r26	; 0x3e
    8052:	6f 97       	sbiw	r28, 0x1f	; 31
    8054:	ab 2b       	or	r26, r27
    8056:	d9 f1       	breq	.+118    	; 0x80ce <_printf_fn+0x2aa>
    8058:	27 c0       	rjmp	.+78     	; 0x80a8 <_printf_fn+0x284>
    805a:	68 36       	cpi	r22, 0x68	; 104
    805c:	29 f4       	brne	.+10     	; 0x8068 <_printf_fn+0x244>
    805e:	bf ef       	ldi	r27, 0xFF	; 255
    8060:	6b 1a       	sub	r6, r27
    8062:	7b 0a       	sbc	r7, r27
    8064:	8b 0a       	sbc	r8, r27
    8066:	ba c2       	rjmp	.+1396   	; 0x85dc <_printf_fn+0x7b8>
    8068:	6c 36       	cpi	r22, 0x6C	; 108
    806a:	09 f0       	breq	.+2      	; 0x806e <_printf_fn+0x24a>
    806c:	b7 c2       	rjmp	.+1390   	; 0x85dc <_printf_fn+0x7b8>
    806e:	a8 2d       	mov	r26, r8
    8070:	c3 01       	movw	r24, r6
    8072:	01 96       	adiw	r24, 0x01	; 1
    8074:	a1 1d       	adc	r26, r1
    8076:	fc 01       	movw	r30, r24
    8078:	5a 2f       	mov	r21, r26
    807a:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    807e:	6c 36       	cpi	r22, 0x6C	; 108
    8080:	49 f0       	breq	.+18     	; 0x8094 <_printf_fn+0x270>
    8082:	3c 01       	movw	r6, r24
    8084:	8a 2e       	mov	r8, r26
    8086:	24 e0       	ldi	r18, 0x04	; 4
    8088:	30 e0       	ldi	r19, 0x00	; 0
    808a:	6f 96       	adiw	r28, 0x1f	; 31
    808c:	3f af       	std	Y+63, r19	; 0x3f
    808e:	2e af       	std	Y+62, r18	; 0x3e
    8090:	6f 97       	sbiw	r28, 0x1f	; 31
    8092:	0a c0       	rjmp	.+20     	; 0x80a8 <_printf_fn+0x284>
    8094:	32 e0       	ldi	r19, 0x02	; 2
    8096:	63 0e       	add	r6, r19
    8098:	71 1c       	adc	r7, r1
    809a:	81 1c       	adc	r8, r1
    809c:	48 e0       	ldi	r20, 0x08	; 8
    809e:	50 e0       	ldi	r21, 0x00	; 0
    80a0:	6f 96       	adiw	r28, 0x1f	; 31
    80a2:	5f af       	std	Y+63, r21	; 0x3f
    80a4:	4e af       	std	Y+62, r20	; 0x3e
    80a6:	6f 97       	sbiw	r28, 0x1f	; 31
    80a8:	f3 01       	movw	r30, r6
    80aa:	58 2d       	mov	r21, r8
    80ac:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    80b0:	86 2f       	mov	r24, r22
    80b2:	90 e0       	ldi	r25, 0x00	; 0
    80b4:	a3 96       	adiw	r28, 0x23	; 35
    80b6:	9f af       	std	Y+63, r25	; 0x3f
    80b8:	8e af       	std	Y+62, r24	; 0x3e
    80ba:	a3 97       	sbiw	r28, 0x23	; 35
    80bc:	84 36       	cpi	r24, 0x64	; 100
    80be:	91 05       	cpc	r25, r1
    80c0:	09 f4       	brne	.+2      	; 0x80c4 <_printf_fn+0x2a0>
    80c2:	93 c2       	rjmp	.+1318   	; 0x85ea <_printf_fn+0x7c6>
    80c4:	08 c0       	rjmp	.+16     	; 0x80d6 <_printf_fn+0x2b2>
    80c6:	6f 96       	adiw	r28, 0x1f	; 31
    80c8:	1f ae       	std	Y+63, r1	; 0x3f
    80ca:	1e ae       	std	Y+62, r1	; 0x3e
    80cc:	6f 97       	sbiw	r28, 0x1f	; 31
    80ce:	a3 96       	adiw	r28, 0x23	; 35
    80d0:	1f ae       	std	Y+63, r1	; 0x3f
    80d2:	1e ae       	std	Y+62, r1	; 0x3e
    80d4:	a3 97       	sbiw	r28, 0x23	; 35
    80d6:	31 e0       	ldi	r19, 0x01	; 1
    80d8:	20 e0       	ldi	r18, 0x00	; 0
    80da:	a3 96       	adiw	r28, 0x23	; 35
    80dc:	ae ad       	ldd	r26, Y+62	; 0x3e
    80de:	bf ad       	ldd	r27, Y+63	; 0x3f
    80e0:	a3 97       	sbiw	r28, 0x23	; 35
    80e2:	a4 34       	cpi	r26, 0x44	; 68
    80e4:	b1 05       	cpc	r27, r1
    80e6:	09 f0       	breq	.+2      	; 0x80ea <_printf_fn+0x2c6>
    80e8:	30 e0       	ldi	r19, 0x00	; 0
    80ea:	83 2f       	mov	r24, r19
    80ec:	92 2f       	mov	r25, r18
    80ee:	a3 96       	adiw	r28, 0x23	; 35
    80f0:	ee ad       	ldd	r30, Y+62	; 0x3e
    80f2:	ff ad       	ldd	r31, Y+63	; 0x3f
    80f4:	a3 97       	sbiw	r28, 0x23	; 35
    80f6:	e2 54       	subi	r30, 0x42	; 66
    80f8:	f1 09       	sbc	r31, r1
    80fa:	e7 33       	cpi	r30, 0x37	; 55
    80fc:	f1 05       	cpc	r31, r1
    80fe:	08 f0       	brcs	.+2      	; 0x8102 <_printf_fn+0x2de>
    8100:	5d c1       	rjmp	.+698    	; 0x83bc <_printf_fn+0x598>
    8102:	ea 5b       	subi	r30, 0xBA	; 186
    8104:	ff 4f       	sbci	r31, 0xFF	; 255
    8106:	0c 94 93 df 	jmp	0x1bf26	; 0x1bf26 <__tablejump2__>
    810a:	e2 e0       	ldi	r30, 0x02	; 2
    810c:	f0 e0       	ldi	r31, 0x00	; 0
    810e:	6f 96       	adiw	r28, 0x1f	; 31
    8110:	ff af       	std	Y+63, r31	; 0x3f
    8112:	ee af       	std	Y+62, r30	; 0x3e
    8114:	6f 97       	sbiw	r28, 0x1f	; 31
    8116:	29 2d       	mov	r18, r9
    8118:	28 72       	andi	r18, 0x28	; 40
    811a:	28 32       	cpi	r18, 0x28	; 40
    811c:	11 f4       	brne	.+4      	; 0x8122 <_printf_fn+0x2fe>
    811e:	e8 94       	clt
    8120:	95 f8       	bld	r9, 5
    8122:	29 2d       	mov	r18, r9
    8124:	22 72       	andi	r18, 0x22	; 34
    8126:	22 32       	cpi	r18, 0x22	; 34
    8128:	11 f4       	brne	.+4      	; 0x812e <_printf_fn+0x30a>
    812a:	e8 94       	clt
    812c:	95 f8       	bld	r9, 5
    812e:	29 2d       	mov	r18, r9
    8130:	21 72       	andi	r18, 0x21	; 33
    8132:	21 32       	cpi	r18, 0x21	; 33
    8134:	59 f4       	brne	.+22     	; 0x814c <_printf_fn+0x328>
    8136:	a1 96       	adiw	r28, 0x21	; 33
    8138:	2e ad       	ldd	r18, Y+62	; 0x3e
    813a:	3f ad       	ldd	r19, Y+63	; 0x3f
    813c:	a1 97       	sbiw	r28, 0x21	; 33
    813e:	24 15       	cp	r18, r4
    8140:	35 05       	cpc	r19, r5
    8142:	24 f4       	brge	.+8      	; 0x814c <_printf_fn+0x328>
    8144:	a1 96       	adiw	r28, 0x21	; 33
    8146:	5f ae       	std	Y+63, r5	; 0x3f
    8148:	4e ae       	std	Y+62, r4	; 0x3e
    814a:	a1 97       	sbiw	r28, 0x21	; 33
    814c:	29 2d       	mov	r18, r9
    814e:	23 72       	andi	r18, 0x23	; 35
    8150:	23 32       	cpi	r18, 0x23	; 35
    8152:	59 f4       	brne	.+22     	; 0x816a <_printf_fn+0x346>
    8154:	a1 96       	adiw	r28, 0x21	; 33
    8156:	4e ad       	ldd	r20, Y+62	; 0x3e
    8158:	5f ad       	ldd	r21, Y+63	; 0x3f
    815a:	a1 97       	sbiw	r28, 0x21	; 33
    815c:	44 15       	cp	r20, r4
    815e:	55 05       	cpc	r21, r5
    8160:	24 f4       	brge	.+8      	; 0x816a <_printf_fn+0x346>
    8162:	a1 96       	adiw	r28, 0x21	; 33
    8164:	5f ae       	std	Y+63, r5	; 0x3f
    8166:	4e ae       	std	Y+62, r4	; 0x3e
    8168:	a1 97       	sbiw	r28, 0x21	; 33
    816a:	e8 94       	clt
    816c:	94 f8       	bld	r9, 4
    816e:	e8 94       	clt
    8170:	92 f8       	bld	r9, 2
    8172:	e8 94       	clt
    8174:	96 f8       	bld	r9, 6
    8176:	6f 96       	adiw	r28, 0x1f	; 31
    8178:	ae ad       	ldd	r26, Y+62	; 0x3e
    817a:	bf ad       	ldd	r27, Y+63	; 0x3f
    817c:	6f 97       	sbiw	r28, 0x1f	; 31
    817e:	12 97       	sbiw	r26, 0x02	; 2
    8180:	29 f5       	brne	.+74     	; 0x81cc <_printf_fn+0x3a8>
    8182:	51 01       	movw	r10, r2
    8184:	b2 e0       	ldi	r27, 0x02	; 2
    8186:	ab 0e       	add	r10, r27
    8188:	b1 1c       	adc	r11, r1
    818a:	f1 01       	movw	r30, r2
    818c:	80 81       	ld	r24, Z
    818e:	91 81       	ldd	r25, Z+1	; 0x01
    8190:	65 96       	adiw	r28, 0x15	; 21
    8192:	9f af       	std	Y+63, r25	; 0x3f
    8194:	8e af       	std	Y+62, r24	; 0x3e
    8196:	65 97       	sbiw	r28, 0x15	; 21
    8198:	a3 96       	adiw	r28, 0x23	; 35
    819a:	2e ad       	ldd	r18, Y+62	; 0x3e
    819c:	3f ad       	ldd	r19, Y+63	; 0x3f
    819e:	a3 97       	sbiw	r28, 0x23	; 35
    81a0:	24 34       	cpi	r18, 0x44	; 68
    81a2:	31 05       	cpc	r19, r1
    81a4:	09 f0       	breq	.+2      	; 0x81a8 <_printf_fn+0x384>
    81a6:	b8 c0       	rjmp	.+368    	; 0x8318 <_printf_fn+0x4f4>
    81a8:	97 ff       	sbrs	r25, 7
    81aa:	b0 c0       	rjmp	.+352    	; 0x830c <_printf_fn+0x4e8>
    81ac:	68 94       	set
    81ae:	96 f8       	bld	r9, 6
    81b0:	91 95       	neg	r25
    81b2:	81 95       	neg	r24
    81b4:	91 09       	sbc	r25, r1
    81b6:	65 96       	adiw	r28, 0x15	; 21
    81b8:	9f af       	std	Y+63, r25	; 0x3f
    81ba:	8e af       	std	Y+62, r24	; 0x3e
    81bc:	65 97       	sbiw	r28, 0x15	; 21
    81be:	42 e0       	ldi	r20, 0x02	; 2
    81c0:	50 e0       	ldi	r21, 0x00	; 0
    81c2:	6f 96       	adiw	r28, 0x1f	; 31
    81c4:	5f af       	std	Y+63, r21	; 0x3f
    81c6:	4e af       	std	Y+62, r20	; 0x3e
    81c8:	6f 97       	sbiw	r28, 0x1f	; 31
    81ca:	a6 c0       	rjmp	.+332    	; 0x8318 <_printf_fn+0x4f4>
    81cc:	6f 96       	adiw	r28, 0x1f	; 31
    81ce:	ae ad       	ldd	r26, Y+62	; 0x3e
    81d0:	bf ad       	ldd	r27, Y+63	; 0x3f
    81d2:	6f 97       	sbiw	r28, 0x1f	; 31
    81d4:	14 97       	sbiw	r26, 0x04	; 4
    81d6:	59 f5       	brne	.+86     	; 0x822e <_printf_fn+0x40a>
    81d8:	51 01       	movw	r10, r2
    81da:	b4 e0       	ldi	r27, 0x04	; 4
    81dc:	ab 0e       	add	r10, r27
    81de:	b1 1c       	adc	r11, r1
    81e0:	f1 01       	movw	r30, r2
    81e2:	80 81       	ld	r24, Z
    81e4:	91 81       	ldd	r25, Z+1	; 0x01
    81e6:	a2 81       	ldd	r26, Z+2	; 0x02
    81e8:	b3 81       	ldd	r27, Z+3	; 0x03
    81ea:	2f 96       	adiw	r28, 0x0f	; 15
    81ec:	8c af       	std	Y+60, r24	; 0x3c
    81ee:	9d af       	std	Y+61, r25	; 0x3d
    81f0:	ae af       	std	Y+62, r26	; 0x3e
    81f2:	bf af       	std	Y+63, r27	; 0x3f
    81f4:	2f 97       	sbiw	r28, 0x0f	; 15
    81f6:	a3 96       	adiw	r28, 0x23	; 35
    81f8:	2e ad       	ldd	r18, Y+62	; 0x3e
    81fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    81fc:	a3 97       	sbiw	r28, 0x23	; 35
    81fe:	24 34       	cpi	r18, 0x44	; 68
    8200:	31 05       	cpc	r19, r1
    8202:	09 f0       	breq	.+2      	; 0x8206 <_printf_fn+0x3e2>
    8204:	96 c0       	rjmp	.+300    	; 0x8332 <_printf_fn+0x50e>
    8206:	b7 ff       	sbrs	r27, 7
    8208:	8e c0       	rjmp	.+284    	; 0x8326 <_printf_fn+0x502>
    820a:	68 94       	set
    820c:	96 f8       	bld	r9, 6
    820e:	b0 95       	com	r27
    8210:	a0 95       	com	r26
    8212:	90 95       	com	r25
    8214:	81 95       	neg	r24
    8216:	9f 4f       	sbci	r25, 0xFF	; 255
    8218:	af 4f       	sbci	r26, 0xFF	; 255
    821a:	bf 4f       	sbci	r27, 0xFF	; 255
    821c:	2f 96       	adiw	r28, 0x0f	; 15
    821e:	8c af       	std	Y+60, r24	; 0x3c
    8220:	9d af       	std	Y+61, r25	; 0x3d
    8222:	ae af       	std	Y+62, r26	; 0x3e
    8224:	bf af       	std	Y+63, r27	; 0x3f
    8226:	2f 97       	sbiw	r28, 0x0f	; 15
    8228:	7e c0       	rjmp	.+252    	; 0x8326 <_printf_fn+0x502>
    822a:	81 e0       	ldi	r24, 0x01	; 1
    822c:	90 e0       	ldi	r25, 0x00	; 0
    822e:	6f 96       	adiw	r28, 0x1f	; 31
    8230:	ae ad       	ldd	r26, Y+62	; 0x3e
    8232:	bf ad       	ldd	r27, Y+63	; 0x3f
    8234:	6f 97       	sbiw	r28, 0x1f	; 31
    8236:	51 01       	movw	r10, r2
    8238:	18 97       	sbiw	r26, 0x08	; 8
    823a:	09 f0       	breq	.+2      	; 0x823e <_printf_fn+0x41a>
    823c:	81 c0       	rjmp	.+258    	; 0x8340 <_printf_fn+0x51c>
    823e:	b8 e0       	ldi	r27, 0x08	; 8
    8240:	ab 0e       	add	r10, r27
    8242:	b1 1c       	adc	r11, r1
    8244:	f1 01       	movw	r30, r2
    8246:	f0 81       	ld	r31, Z
    8248:	aa 96       	adiw	r28, 0x2a	; 42
    824a:	ff af       	std	Y+63, r31	; 0x3f
    824c:	aa 97       	sbiw	r28, 0x2a	; 42
    824e:	f1 01       	movw	r30, r2
    8250:	f1 80       	ldd	r15, Z+1	; 0x01
    8252:	02 81       	ldd	r16, Z+2	; 0x02
    8254:	13 81       	ldd	r17, Z+3	; 0x03
    8256:	b4 81       	ldd	r27, Z+4	; 0x04
    8258:	f5 81       	ldd	r31, Z+5	; 0x05
    825a:	ab 96       	adiw	r28, 0x2b	; 43
    825c:	ff af       	std	Y+63, r31	; 0x3f
    825e:	ab 97       	sbiw	r28, 0x2b	; 43
    8260:	f1 01       	movw	r30, r2
    8262:	f6 81       	ldd	r31, Z+6	; 0x06
    8264:	ac 96       	adiw	r28, 0x2c	; 44
    8266:	ff af       	std	Y+63, r31	; 0x3f
    8268:	ac 97       	sbiw	r28, 0x2c	; 44
    826a:	f1 01       	movw	r30, r2
    826c:	37 80       	ldd	r3, Z+7	; 0x07
    826e:	aa 96       	adiw	r28, 0x2a	; 42
    8270:	ff ad       	ldd	r31, Y+63	; 0x3f
    8272:	aa 97       	sbiw	r28, 0x2a	; 42
    8274:	24 96       	adiw	r28, 0x04	; 4
    8276:	ff af       	std	Y+63, r31	; 0x3f
    8278:	24 97       	sbiw	r28, 0x04	; 4
    827a:	25 96       	adiw	r28, 0x05	; 5
    827c:	ff ae       	std	Y+63, r15	; 0x3f
    827e:	25 97       	sbiw	r28, 0x05	; 5
    8280:	26 96       	adiw	r28, 0x06	; 6
    8282:	0f af       	std	Y+63, r16	; 0x3f
    8284:	26 97       	sbiw	r28, 0x06	; 6
    8286:	27 96       	adiw	r28, 0x07	; 7
    8288:	1f af       	std	Y+63, r17	; 0x3f
    828a:	27 97       	sbiw	r28, 0x07	; 7
    828c:	28 96       	adiw	r28, 0x08	; 8
    828e:	bf af       	std	Y+63, r27	; 0x3f
    8290:	28 97       	sbiw	r28, 0x08	; 8
    8292:	ab 96       	adiw	r28, 0x2b	; 43
    8294:	ef ad       	ldd	r30, Y+63	; 0x3f
    8296:	ab 97       	sbiw	r28, 0x2b	; 43
    8298:	29 96       	adiw	r28, 0x09	; 9
    829a:	ef af       	std	Y+63, r30	; 0x3f
    829c:	29 97       	sbiw	r28, 0x09	; 9
    829e:	ac 96       	adiw	r28, 0x2c	; 44
    82a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    82a2:	ac 97       	sbiw	r28, 0x2c	; 44
    82a4:	2a 96       	adiw	r28, 0x0a	; 10
    82a6:	ff af       	std	Y+63, r31	; 0x3f
    82a8:	2a 97       	sbiw	r28, 0x0a	; 10
    82aa:	2b 96       	adiw	r28, 0x0b	; 11
    82ac:	3f ae       	std	Y+63, r3	; 0x3f
    82ae:	2b 97       	sbiw	r28, 0x0b	; 11
    82b0:	89 2b       	or	r24, r25
    82b2:	09 f4       	brne	.+2      	; 0x82b6 <_printf_fn+0x492>
    82b4:	50 c0       	rjmp	.+160    	; 0x8356 <_printf_fn+0x532>
    82b6:	aa 96       	adiw	r28, 0x2a	; 42
    82b8:	2f ad       	ldd	r18, Y+63	; 0x3f
    82ba:	aa 97       	sbiw	r28, 0x2a	; 42
    82bc:	3f 2d       	mov	r19, r15
    82be:	a8 01       	movw	r20, r16
    82c0:	6b 2f       	mov	r22, r27
    82c2:	7e 2f       	mov	r23, r30
    82c4:	8f 2f       	mov	r24, r31
    82c6:	93 2d       	mov	r25, r3
    82c8:	a0 e0       	ldi	r26, 0x00	; 0
    82ca:	0e 94 00 e0 	call	0x1c000	; 0x1c000 <__cmpdi2_s8>
    82ce:	0c f0       	brlt	.+2      	; 0x82d2 <_printf_fn+0x4ae>
    82d0:	42 c0       	rjmp	.+132    	; 0x8356 <_printf_fn+0x532>
    82d2:	68 94       	set
    82d4:	96 f8       	bld	r9, 6
    82d6:	0e 94 b2 df 	call	0x1bf64	; 0x1bf64 <__negdi2>
    82da:	24 96       	adiw	r28, 0x04	; 4
    82dc:	2f af       	std	Y+63, r18	; 0x3f
    82de:	24 97       	sbiw	r28, 0x04	; 4
    82e0:	25 96       	adiw	r28, 0x05	; 5
    82e2:	3f af       	std	Y+63, r19	; 0x3f
    82e4:	25 97       	sbiw	r28, 0x05	; 5
    82e6:	26 96       	adiw	r28, 0x06	; 6
    82e8:	4f af       	std	Y+63, r20	; 0x3f
    82ea:	26 97       	sbiw	r28, 0x06	; 6
    82ec:	27 96       	adiw	r28, 0x07	; 7
    82ee:	5f af       	std	Y+63, r21	; 0x3f
    82f0:	27 97       	sbiw	r28, 0x07	; 7
    82f2:	28 96       	adiw	r28, 0x08	; 8
    82f4:	6f af       	std	Y+63, r22	; 0x3f
    82f6:	28 97       	sbiw	r28, 0x08	; 8
    82f8:	29 96       	adiw	r28, 0x09	; 9
    82fa:	7f af       	std	Y+63, r23	; 0x3f
    82fc:	29 97       	sbiw	r28, 0x09	; 9
    82fe:	2a 96       	adiw	r28, 0x0a	; 10
    8300:	8f af       	std	Y+63, r24	; 0x3f
    8302:	2a 97       	sbiw	r28, 0x0a	; 10
    8304:	2b 96       	adiw	r28, 0x0b	; 11
    8306:	9f af       	std	Y+63, r25	; 0x3f
    8308:	2b 97       	sbiw	r28, 0x0b	; 11
    830a:	25 c0       	rjmp	.+74     	; 0x8356 <_printf_fn+0x532>
    830c:	22 e0       	ldi	r18, 0x02	; 2
    830e:	30 e0       	ldi	r19, 0x00	; 0
    8310:	6f 96       	adiw	r28, 0x1f	; 31
    8312:	3f af       	std	Y+63, r19	; 0x3f
    8314:	2e af       	std	Y+62, r18	; 0x3e
    8316:	6f 97       	sbiw	r28, 0x1f	; 31
    8318:	6c 96       	adiw	r28, 0x1c	; 28
    831a:	8f ad       	ldd	r24, Y+63	; 0x3f
    831c:	6c 97       	sbiw	r28, 0x1c	; 28
    831e:	6d 96       	adiw	r28, 0x1d	; 29
    8320:	9f ad       	ldd	r25, Y+63	; 0x3f
    8322:	6d 97       	sbiw	r28, 0x1d	; 29
    8324:	1e c0       	rjmp	.+60     	; 0x8362 <_printf_fn+0x53e>
    8326:	44 e0       	ldi	r20, 0x04	; 4
    8328:	50 e0       	ldi	r21, 0x00	; 0
    832a:	6f 96       	adiw	r28, 0x1f	; 31
    832c:	5f af       	std	Y+63, r21	; 0x3f
    832e:	4e af       	std	Y+62, r20	; 0x3e
    8330:	6f 97       	sbiw	r28, 0x1f	; 31
    8332:	6a 96       	adiw	r28, 0x1a	; 26
    8334:	8f ad       	ldd	r24, Y+63	; 0x3f
    8336:	6a 97       	sbiw	r28, 0x1a	; 26
    8338:	6b 96       	adiw	r28, 0x1b	; 27
    833a:	9f ad       	ldd	r25, Y+63	; 0x3f
    833c:	6b 97       	sbiw	r28, 0x1b	; 27
    833e:	11 c0       	rjmp	.+34     	; 0x8362 <_printf_fn+0x53e>
    8340:	66 96       	adiw	r28, 0x16	; 22
    8342:	8f ad       	ldd	r24, Y+63	; 0x3f
    8344:	66 97       	sbiw	r28, 0x16	; 22
    8346:	67 96       	adiw	r28, 0x17	; 23
    8348:	9f ad       	ldd	r25, Y+63	; 0x3f
    834a:	67 97       	sbiw	r28, 0x17	; 23
    834c:	a3 96       	adiw	r28, 0x23	; 35
    834e:	1f ae       	std	Y+63, r1	; 0x3f
    8350:	1e ae       	std	Y+62, r1	; 0x3e
    8352:	a3 97       	sbiw	r28, 0x23	; 35
    8354:	06 c0       	rjmp	.+12     	; 0x8362 <_printf_fn+0x53e>
    8356:	68 96       	adiw	r28, 0x18	; 24
    8358:	8f ad       	ldd	r24, Y+63	; 0x3f
    835a:	68 97       	sbiw	r28, 0x18	; 24
    835c:	69 96       	adiw	r28, 0x19	; 25
    835e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8360:	69 97       	sbiw	r28, 0x19	; 25
    8362:	5f ef       	ldi	r21, 0xFF	; 255
    8364:	65 1a       	sub	r6, r21
    8366:	75 0a       	sbc	r7, r21
    8368:	85 0a       	sbc	r8, r21
    836a:	15 01       	movw	r2, r10
    836c:	2d c0       	rjmp	.+90     	; 0x83c8 <_printf_fn+0x5a4>
    836e:	91 fc       	sbrc	r9, 1
    8370:	08 c0       	rjmp	.+16     	; 0x8382 <_printf_fn+0x55e>
    8372:	68 94       	set
    8374:	91 f8       	bld	r9, 1
    8376:	86 e0       	ldi	r24, 0x06	; 6
    8378:	90 e0       	ldi	r25, 0x00	; 0
    837a:	a1 96       	adiw	r28, 0x21	; 33
    837c:	9f af       	std	Y+63, r25	; 0x3f
    837e:	8e af       	std	Y+62, r24	; 0x3e
    8380:	a1 97       	sbiw	r28, 0x21	; 33
    8382:	d1 01       	movw	r26, r2
    8384:	2d 91       	ld	r18, X+
    8386:	3d 91       	ld	r19, X+
    8388:	4d 91       	ld	r20, X+
    838a:	5c 91       	ld	r21, X
    838c:	a9 96       	adiw	r28, 0x29	; 41
    838e:	2c af       	std	Y+60, r18	; 0x3c
    8390:	3d af       	std	Y+61, r19	; 0x3d
    8392:	4e af       	std	Y+62, r20	; 0x3e
    8394:	5f af       	std	Y+63, r21	; 0x3f
    8396:	a9 97       	sbiw	r28, 0x29	; 41
    8398:	bf ef       	ldi	r27, 0xFF	; 255
    839a:	6b 1a       	sub	r6, r27
    839c:	7b 0a       	sbc	r7, r27
    839e:	8b 0a       	sbc	r8, r27
    83a0:	f1 01       	movw	r30, r2
    83a2:	34 96       	adiw	r30, 0x04	; 4
    83a4:	1f 01       	movw	r2, r30
    83a6:	0a c0       	rjmp	.+20     	; 0x83bc <_printf_fn+0x598>
    83a8:	ff ef       	ldi	r31, 0xFF	; 255
    83aa:	6f 1a       	sub	r6, r31
    83ac:	7f 0a       	sbc	r7, r31
    83ae:	8f 0a       	sbc	r8, r31
    83b0:	b0 c0       	rjmp	.+352    	; 0x8512 <_printf_fn+0x6ee>
    83b2:	2f ef       	ldi	r18, 0xFF	; 255
    83b4:	62 1a       	sub	r6, r18
    83b6:	72 0a       	sbc	r7, r18
    83b8:	82 0a       	sbc	r8, r18
    83ba:	b8 c0       	rjmp	.+368    	; 0x852c <_printf_fn+0x708>
    83bc:	66 96       	adiw	r28, 0x16	; 22
    83be:	8f ad       	ldd	r24, Y+63	; 0x3f
    83c0:	66 97       	sbiw	r28, 0x16	; 22
    83c2:	67 96       	adiw	r28, 0x17	; 23
    83c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    83c6:	67 97       	sbiw	r28, 0x17	; 23
    83c8:	a3 96       	adiw	r28, 0x23	; 35
    83ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    83cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    83ce:	a3 97       	sbiw	r28, 0x23	; 35
    83d0:	e2 54       	subi	r30, 0x42	; 66
    83d2:	f1 09       	sbc	r31, r1
    83d4:	e7 33       	cpi	r30, 0x37	; 55
    83d6:	f1 05       	cpc	r31, r1
    83d8:	08 f0       	brcs	.+2      	; 0x83dc <_printf_fn+0x5b8>
    83da:	f9 c0       	rjmp	.+498    	; 0x85ce <_printf_fn+0x7aa>
    83dc:	e3 58       	subi	r30, 0x83	; 131
    83de:	ff 4f       	sbci	r31, 0xFF	; 255
    83e0:	0c 94 93 df 	jmp	0x1bf26	; 0x1bf26 <__tablejump2__>
    83e4:	e8 94       	clt
    83e6:	94 f8       	bld	r9, 4
    83e8:	e8 94       	clt
    83ea:	92 f8       	bld	r9, 2
    83ec:	a9 2c       	mov	r10, r9
    83ee:	b1 2c       	mov	r11, r1
    83f0:	a1 96       	adiw	r28, 0x21	; 33
    83f2:	ce ac       	ldd	r12, Y+62	; 0x3e
    83f4:	df ac       	ldd	r13, Y+63	; 0x3f
    83f6:	a1 97       	sbiw	r28, 0x21	; 33
    83f8:	72 01       	movw	r14, r4
    83fa:	0a e0       	ldi	r16, 0x0A	; 10
    83fc:	10 e0       	ldi	r17, 0x00	; 0
    83fe:	13 c0       	rjmp	.+38     	; 0x8426 <_printf_fn+0x602>
    8400:	a9 2c       	mov	r10, r9
    8402:	b1 2c       	mov	r11, r1
    8404:	a1 96       	adiw	r28, 0x21	; 33
    8406:	ce ac       	ldd	r12, Y+62	; 0x3e
    8408:	df ac       	ldd	r13, Y+63	; 0x3f
    840a:	a1 97       	sbiw	r28, 0x21	; 33
    840c:	72 01       	movw	r14, r4
    840e:	02 e0       	ldi	r16, 0x02	; 2
    8410:	10 e0       	ldi	r17, 0x00	; 0
    8412:	09 c0       	rjmp	.+18     	; 0x8426 <_printf_fn+0x602>
    8414:	a9 2c       	mov	r10, r9
    8416:	b1 2c       	mov	r11, r1
    8418:	a1 96       	adiw	r28, 0x21	; 33
    841a:	ce ac       	ldd	r12, Y+62	; 0x3e
    841c:	df ac       	ldd	r13, Y+63	; 0x3f
    841e:	a1 97       	sbiw	r28, 0x21	; 33
    8420:	72 01       	movw	r14, r4
    8422:	08 e0       	ldi	r16, 0x08	; 8
    8424:	10 e0       	ldi	r17, 0x00	; 0
    8426:	22 e4       	ldi	r18, 0x42	; 66
    8428:	30 e0       	ldi	r19, 0x00	; 0
    842a:	ae 01       	movw	r20, r28
    842c:	4f 5f       	subi	r20, 0xFF	; 255
    842e:	5f 4f       	sbci	r21, 0xFF	; 255
    8430:	6f 96       	adiw	r28, 0x1f	; 31
    8432:	6e ad       	ldd	r22, Y+62	; 0x3e
    8434:	7f ad       	ldd	r23, Y+63	; 0x3f
    8436:	6f 97       	sbiw	r28, 0x1f	; 31
    8438:	eb d9       	rcall	.-3114   	; 0x7810 <p_ntoa>
    843a:	30 c0       	rjmp	.+96     	; 0x849c <_printf_fn+0x678>
    843c:	a9 2c       	mov	r10, r9
    843e:	b1 2c       	mov	r11, r1
    8440:	a1 96       	adiw	r28, 0x21	; 33
    8442:	ce ac       	ldd	r12, Y+62	; 0x3e
    8444:	df ac       	ldd	r13, Y+63	; 0x3f
    8446:	a1 97       	sbiw	r28, 0x21	; 33
    8448:	72 01       	movw	r14, r4
    844a:	00 e1       	ldi	r16, 0x10	; 16
    844c:	10 e0       	ldi	r17, 0x00	; 0
    844e:	22 e4       	ldi	r18, 0x42	; 66
    8450:	30 e0       	ldi	r19, 0x00	; 0
    8452:	ae 01       	movw	r20, r28
    8454:	4f 5f       	subi	r20, 0xFF	; 255
    8456:	5f 4f       	sbci	r21, 0xFF	; 255
    8458:	6f 96       	adiw	r28, 0x1f	; 31
    845a:	6e ad       	ldd	r22, Y+62	; 0x3e
    845c:	7f ad       	ldd	r23, Y+63	; 0x3f
    845e:	6f 97       	sbiw	r28, 0x1f	; 31
    8460:	d7 d9       	rcall	.-3154   	; 0x7810 <p_ntoa>
    8462:	7c 01       	movw	r14, r24
    8464:	a3 96       	adiw	r28, 0x23	; 35
    8466:	6e ad       	ldd	r22, Y+62	; 0x3e
    8468:	7f ad       	ldd	r23, Y+63	; 0x3f
    846a:	a3 97       	sbiw	r28, 0x23	; 35
    846c:	67 7f       	andi	r22, 0xF7	; 247
    846e:	60 35       	cpi	r22, 0x50	; 80
    8470:	71 05       	cpc	r23, r1
    8472:	c9 f5       	brne	.+114    	; 0x84e6 <_printf_fn+0x6c2>
    8474:	34 c0       	rjmp	.+104    	; 0x84de <_printf_fn+0x6ba>
    8476:	c9 2c       	mov	r12, r9
    8478:	d1 2c       	mov	r13, r1
    847a:	a1 96       	adiw	r28, 0x21	; 33
    847c:	ee ac       	ldd	r14, Y+62	; 0x3e
    847e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8480:	a1 97       	sbiw	r28, 0x21	; 33
    8482:	82 01       	movw	r16, r4
    8484:	22 e4       	ldi	r18, 0x42	; 66
    8486:	30 e0       	ldi	r19, 0x00	; 0
    8488:	ae 01       	movw	r20, r28
    848a:	4f 5f       	subi	r20, 0xFF	; 255
    848c:	5f 4f       	sbci	r21, 0xFF	; 255
    848e:	a9 96       	adiw	r28, 0x29	; 41
    8490:	6c ad       	ldd	r22, Y+60	; 0x3c
    8492:	7d ad       	ldd	r23, Y+61	; 0x3d
    8494:	8e ad       	ldd	r24, Y+62	; 0x3e
    8496:	9f ad       	ldd	r25, Y+63	; 0x3f
    8498:	a9 97       	sbiw	r28, 0x29	; 41
    849a:	0f da       	rcall	.-3042   	; 0x78ba <p_ftoa>
    849c:	93 fa       	bst	r9, 3
    849e:	00 27       	eor	r16, r16
    84a0:	00 f9       	bld	r16, 0
    84a2:	10 e0       	ldi	r17, 0x00	; 0
    84a4:	9c 01       	movw	r18, r24
    84a6:	24 c0       	rjmp	.+72     	; 0x84f0 <_printf_fn+0x6cc>
    84a8:	c9 2c       	mov	r12, r9
    84aa:	d1 2c       	mov	r13, r1
    84ac:	a1 96       	adiw	r28, 0x21	; 33
    84ae:	ee ac       	ldd	r14, Y+62	; 0x3e
    84b0:	ff ac       	ldd	r15, Y+63	; 0x3f
    84b2:	a1 97       	sbiw	r28, 0x21	; 33
    84b4:	82 01       	movw	r16, r4
    84b6:	22 e4       	ldi	r18, 0x42	; 66
    84b8:	30 e0       	ldi	r19, 0x00	; 0
    84ba:	ae 01       	movw	r20, r28
    84bc:	4f 5f       	subi	r20, 0xFF	; 255
    84be:	5f 4f       	sbci	r21, 0xFF	; 255
    84c0:	a9 96       	adiw	r28, 0x29	; 41
    84c2:	6c ad       	ldd	r22, Y+60	; 0x3c
    84c4:	7d ad       	ldd	r23, Y+61	; 0x3d
    84c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    84c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    84ca:	a9 97       	sbiw	r28, 0x29	; 41
    84cc:	fd da       	rcall	.-2566   	; 0x7ac8 <p_etoa>
    84ce:	7c 01       	movw	r14, r24
    84d0:	a3 96       	adiw	r28, 0x23	; 35
    84d2:	4e ad       	ldd	r20, Y+62	; 0x3e
    84d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    84d6:	a3 97       	sbiw	r28, 0x23	; 35
    84d8:	45 34       	cpi	r20, 0x45	; 69
    84da:	51 05       	cpc	r21, r1
    84dc:	21 f4       	brne	.+8      	; 0x84e6 <_printf_fn+0x6c2>
    84de:	ce 01       	movw	r24, r28
    84e0:	01 96       	adiw	r24, 0x01	; 1
    84e2:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <strupper>
    84e6:	93 fa       	bst	r9, 3
    84e8:	00 27       	eor	r16, r16
    84ea:	00 f9       	bld	r16, 0
    84ec:	10 e0       	ldi	r17, 0x00	; 0
    84ee:	97 01       	movw	r18, r14
    84f0:	a2 01       	movw	r20, r4
    84f2:	be 01       	movw	r22, r28
    84f4:	6f 5f       	subi	r22, 0xFF	; 255
    84f6:	7f 4f       	sbci	r23, 0xFF	; 255
    84f8:	a5 96       	adiw	r28, 0x25	; 37
    84fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    84fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    84fe:	a5 97       	sbiw	r28, 0x25	; 37
    8500:	4f dc       	rcall	.-1890   	; 0x7da0 <_puts_pad>
    8502:	69 c0       	rjmp	.+210    	; 0x85d6 <_printf_fn+0x7b2>
    8504:	a3 96       	adiw	r28, 0x23	; 35
    8506:	8e ad       	ldd	r24, Y+62	; 0x3e
    8508:	9f ad       	ldd	r25, Y+63	; 0x3f
    850a:	a3 97       	sbiw	r28, 0x23	; 35
    850c:	83 37       	cpi	r24, 0x73	; 115
    850e:	91 05       	cpc	r25, r1
    8510:	69 f4       	brne	.+26     	; 0x852c <_printf_fn+0x708>
    8512:	71 01       	movw	r14, r2
    8514:	92 e0       	ldi	r25, 0x02	; 2
    8516:	e9 0e       	add	r14, r25
    8518:	f1 1c       	adc	r15, r1
    851a:	d1 01       	movw	r26, r2
    851c:	6d 91       	ld	r22, X+
    851e:	7c 91       	ld	r23, X
    8520:	61 15       	cp	r22, r1
    8522:	71 05       	cpc	r23, r1
    8524:	91 f4       	brne	.+36     	; 0x854a <_printf_fn+0x726>
    8526:	65 e1       	ldi	r22, 0x15	; 21
    8528:	74 e0       	ldi	r23, 0x04	; 4
    852a:	0f c0       	rjmp	.+30     	; 0x854a <_printf_fn+0x726>
    852c:	71 01       	movw	r14, r2
    852e:	b2 e0       	ldi	r27, 0x02	; 2
    8530:	eb 0e       	add	r14, r27
    8532:	f1 1c       	adc	r15, r1
    8534:	f1 01       	movw	r30, r2
    8536:	80 81       	ld	r24, Z
    8538:	60 96       	adiw	r28, 0x10	; 16
    853a:	8f af       	std	Y+63, r24	; 0x3f
    853c:	60 97       	sbiw	r28, 0x10	; 16
    853e:	61 96       	adiw	r28, 0x11	; 17
    8540:	1f ae       	std	Y+63, r1	; 0x3f
    8542:	61 97       	sbiw	r28, 0x11	; 17
    8544:	be 01       	movw	r22, r28
    8546:	61 5b       	subi	r22, 0xB1	; 177
    8548:	7f 4f       	sbci	r23, 0xFF	; 255
    854a:	fb 01       	movw	r30, r22
    854c:	01 90       	ld	r0, Z+
    854e:	00 20       	and	r0, r0
    8550:	e9 f7       	brne	.-6      	; 0x854c <_printf_fn+0x728>
    8552:	31 97       	sbiw	r30, 0x01	; 1
    8554:	e6 1b       	sub	r30, r22
    8556:	f7 0b       	sbc	r31, r23
    8558:	a1 96       	adiw	r28, 0x21	; 33
    855a:	2e ad       	ldd	r18, Y+62	; 0x3e
    855c:	3f ad       	ldd	r19, Y+63	; 0x3f
    855e:	a1 97       	sbiw	r28, 0x21	; 33
    8560:	23 2b       	or	r18, r19
    8562:	21 f4       	brne	.+8      	; 0x856c <_printf_fn+0x748>
    8564:	a1 96       	adiw	r28, 0x21	; 33
    8566:	ff af       	std	Y+63, r31	; 0x3f
    8568:	ee af       	std	Y+62, r30	; 0x3e
    856a:	a1 97       	sbiw	r28, 0x21	; 33
    856c:	a1 96       	adiw	r28, 0x21	; 33
    856e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8570:	5f ad       	ldd	r21, Y+63	; 0x3f
    8572:	a1 97       	sbiw	r28, 0x21	; 33
    8574:	44 16       	cp	r4, r20
    8576:	55 06       	cpc	r5, r21
    8578:	3c f4       	brge	.+14     	; 0x8588 <_printf_fn+0x764>
    857a:	41 14       	cp	r4, r1
    857c:	51 04       	cpc	r5, r1
    857e:	21 f0       	breq	.+8      	; 0x8588 <_printf_fn+0x764>
    8580:	a1 96       	adiw	r28, 0x21	; 33
    8582:	5f ae       	std	Y+63, r5	; 0x3f
    8584:	4e ae       	std	Y+62, r4	; 0x3e
    8586:	a1 97       	sbiw	r28, 0x21	; 33
    8588:	93 fa       	bst	r9, 3
    858a:	00 27       	eor	r16, r16
    858c:	00 f9       	bld	r16, 0
    858e:	10 e0       	ldi	r17, 0x00	; 0
    8590:	a1 96       	adiw	r28, 0x21	; 33
    8592:	2e ad       	ldd	r18, Y+62	; 0x3e
    8594:	3f ad       	ldd	r19, Y+63	; 0x3f
    8596:	a1 97       	sbiw	r28, 0x21	; 33
    8598:	a2 01       	movw	r20, r4
    859a:	a5 96       	adiw	r28, 0x25	; 37
    859c:	8e ad       	ldd	r24, Y+62	; 0x3e
    859e:	9f ad       	ldd	r25, Y+63	; 0x3f
    85a0:	a5 97       	sbiw	r28, 0x25	; 37
    85a2:	fe db       	rcall	.-2052   	; 0x7da0 <_puts_pad>
    85a4:	17 01       	movw	r2, r14
    85a6:	17 c0       	rjmp	.+46     	; 0x85d6 <_printf_fn+0x7b2>
    85a8:	f6 01       	movw	r30, r12
    85aa:	5e 2d       	mov	r21, r14
    85ac:	0e 94 f9 df 	call	0x1bff2	; 0x1bff2 <__xload_1>
    85b0:	66 23       	and	r22, r22
    85b2:	89 f0       	breq	.+34     	; 0x85d6 <_printf_fn+0x7b2>
    85b4:	5f ef       	ldi	r21, 0xFF	; 255
    85b6:	c5 1a       	sub	r12, r21
    85b8:	d5 0a       	sbc	r13, r21
    85ba:	e5 0a       	sbc	r14, r21
    85bc:	a5 96       	adiw	r28, 0x25	; 37
    85be:	ae ad       	ldd	r26, Y+62	; 0x3e
    85c0:	bf ad       	ldd	r27, Y+63	; 0x3f
    85c2:	a5 97       	sbiw	r28, 0x25	; 37
    85c4:	ed 91       	ld	r30, X+
    85c6:	fc 91       	ld	r31, X
    85c8:	11 97       	sbiw	r26, 0x01	; 1
    85ca:	cd 01       	movw	r24, r26
    85cc:	09 95       	icall
    85ce:	6c 14       	cp	r6, r12
    85d0:	7d 04       	cpc	r7, r13
    85d2:	8e 04       	cpc	r8, r14
    85d4:	48 f7       	brcc	.-46     	; 0x85a8 <_printf_fn+0x784>
    85d6:	e8 2c       	mov	r14, r8
    85d8:	63 01       	movw	r12, r6
    85da:	53 cc       	rjmp	.-1882   	; 0x7e82 <_printf_fn+0x5e>
    85dc:	e2 e0       	ldi	r30, 0x02	; 2
    85de:	f0 e0       	ldi	r31, 0x00	; 0
    85e0:	6f 96       	adiw	r28, 0x1f	; 31
    85e2:	ff af       	std	Y+63, r31	; 0x3f
    85e4:	ee af       	std	Y+62, r30	; 0x3e
    85e6:	6f 97       	sbiw	r28, 0x1f	; 31
    85e8:	5f cd       	rjmp	.-1346   	; 0x80a8 <_printf_fn+0x284>
    85ea:	6f 96       	adiw	r28, 0x1f	; 31
    85ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    85ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    85f0:	6f 97       	sbiw	r28, 0x1f	; 31
    85f2:	32 97       	sbiw	r30, 0x02	; 2
    85f4:	61 f4       	brne	.+24     	; 0x860e <_printf_fn+0x7ea>
    85f6:	51 01       	movw	r10, r2
    85f8:	f2 e0       	ldi	r31, 0x02	; 2
    85fa:	af 0e       	add	r10, r31
    85fc:	b1 1c       	adc	r11, r1
    85fe:	d1 01       	movw	r26, r2
    8600:	8d 91       	ld	r24, X+
    8602:	9c 91       	ld	r25, X
    8604:	65 96       	adiw	r28, 0x15	; 21
    8606:	9f af       	std	Y+63, r25	; 0x3f
    8608:	8e af       	std	Y+62, r24	; 0x3e
    860a:	65 97       	sbiw	r28, 0x15	; 21
    860c:	cd cd       	rjmp	.-1126   	; 0x81a8 <_printf_fn+0x384>
    860e:	6f 96       	adiw	r28, 0x1f	; 31
    8610:	2e ad       	ldd	r18, Y+62	; 0x3e
    8612:	3f ad       	ldd	r19, Y+63	; 0x3f
    8614:	6f 97       	sbiw	r28, 0x1f	; 31
    8616:	24 30       	cpi	r18, 0x04	; 4
    8618:	31 05       	cpc	r19, r1
    861a:	09 f0       	breq	.+2      	; 0x861e <_printf_fn+0x7fa>
    861c:	06 ce       	rjmp	.-1012   	; 0x822a <_printf_fn+0x406>
    861e:	51 01       	movw	r10, r2
    8620:	f4 e0       	ldi	r31, 0x04	; 4
    8622:	af 0e       	add	r10, r31
    8624:	b1 1c       	adc	r11, r1
    8626:	f1 01       	movw	r30, r2
    8628:	80 81       	ld	r24, Z
    862a:	91 81       	ldd	r25, Z+1	; 0x01
    862c:	a2 81       	ldd	r26, Z+2	; 0x02
    862e:	b3 81       	ldd	r27, Z+3	; 0x03
    8630:	2f 96       	adiw	r28, 0x0f	; 15
    8632:	8c af       	std	Y+60, r24	; 0x3c
    8634:	9d af       	std	Y+61, r25	; 0x3d
    8636:	ae af       	std	Y+62, r26	; 0x3e
    8638:	bf af       	std	Y+63, r27	; 0x3f
    863a:	2f 97       	sbiw	r28, 0x0f	; 15
    863c:	e4 cd       	rjmp	.-1080   	; 0x8206 <_printf_fn+0x3e2>
    863e:	c5 59       	subi	r28, 0x95	; 149
    8640:	df 4f       	sbci	r29, 0xFF	; 255
    8642:	e2 e1       	ldi	r30, 0x12	; 18
    8644:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

00008648 <vsnprintf_P>:
    8648:	a8 e0       	ldi	r26, 0x08	; 8
    864a:	b0 e0       	ldi	r27, 0x00	; 0
    864c:	ea e2       	ldi	r30, 0x2A	; 42
    864e:	f3 e4       	ldi	r31, 0x43	; 67
    8650:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
    8654:	7c 01       	movw	r14, r24
    8656:	cb 01       	movw	r24, r22
    8658:	64 2f       	mov	r22, r20
    865a:	a9 01       	movw	r20, r18
    865c:	98 01       	movw	r18, r16
    865e:	f7 01       	movw	r30, r14
    8660:	10 82       	st	Z, r1
    8662:	ef e3       	ldi	r30, 0x3F	; 63
    8664:	fb e3       	ldi	r31, 0x3B	; 59
    8666:	fa 83       	std	Y+2, r31	; 0x02
    8668:	e9 83       	std	Y+1, r30	; 0x01
    866a:	9e 83       	std	Y+6, r25	; 0x06
    866c:	8d 83       	std	Y+5, r24	; 0x05
    866e:	18 86       	std	Y+8, r1	; 0x08
    8670:	1f 82       	std	Y+7, r1	; 0x07
    8672:	fc 82       	std	Y+4, r15	; 0x04
    8674:	eb 82       	std	Y+3, r14	; 0x03
    8676:	ce 01       	movw	r24, r28
    8678:	01 96       	adiw	r24, 0x01	; 1
    867a:	d4 db       	rcall	.-2136   	; 0x7e24 <_printf_fn>
    867c:	f7 01       	movw	r30, r14
    867e:	01 90       	ld	r0, Z+
    8680:	00 20       	and	r0, r0
    8682:	e9 f7       	brne	.-6      	; 0x867e <vsnprintf_P+0x36>
    8684:	cf 01       	movw	r24, r30
    8686:	01 97       	sbiw	r24, 0x01	; 1
    8688:	8e 19       	sub	r24, r14
    868a:	9f 09       	sbc	r25, r15
    868c:	28 96       	adiw	r28, 0x08	; 8
    868e:	e6 e0       	ldi	r30, 0x06	; 6
    8690:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00008694 <snprintf_P>:
    8694:	a0 e0       	ldi	r26, 0x00	; 0
    8696:	b0 e0       	ldi	r27, 0x00	; 0
    8698:	e0 e5       	ldi	r30, 0x50	; 80
    869a:	f3 e4       	ldi	r31, 0x43	; 67
    869c:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    86a0:	8e 01       	movw	r16, r28
    86a2:	02 5f       	subi	r16, 0xF2	; 242
    86a4:	1f 4f       	sbci	r17, 0xFF	; 255
    86a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    86a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    86aa:	4d 85       	ldd	r20, Y+13	; 0x0d
    86ac:	69 85       	ldd	r22, Y+9	; 0x09
    86ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    86b0:	8f 81       	ldd	r24, Y+7	; 0x07
    86b2:	98 85       	ldd	r25, Y+8	; 0x08
    86b4:	c9 df       	rcall	.-110    	; 0x8648 <vsnprintf_P>
    86b6:	e4 e0       	ldi	r30, 0x04	; 4
    86b8:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

000086bc <sprintf_P>:
    86bc:	a0 e0       	ldi	r26, 0x00	; 0
    86be:	b0 e0       	ldi	r27, 0x00	; 0
    86c0:	e4 e6       	ldi	r30, 0x64	; 100
    86c2:	f3 e4       	ldi	r31, 0x43	; 67
    86c4:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    86c8:	8e 01       	movw	r16, r28
    86ca:	04 5f       	subi	r16, 0xF4	; 244
    86cc:	1f 4f       	sbci	r17, 0xFF	; 255
    86ce:	29 85       	ldd	r18, Y+9	; 0x09
    86d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    86d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    86d4:	60 e0       	ldi	r22, 0x00	; 0
    86d6:	74 e0       	ldi	r23, 0x04	; 4
    86d8:	8f 81       	ldd	r24, Y+7	; 0x07
    86da:	98 85       	ldd	r25, Y+8	; 0x08
    86dc:	b5 df       	rcall	.-150    	; 0x8648 <vsnprintf_P>
    86de:	e4 e0       	ldi	r30, 0x04	; 4
    86e0:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

000086e4 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    86e4:	a8 e0       	ldi	r26, 0x08	; 8
    86e6:	b0 e0       	ldi	r27, 0x00	; 0
    86e8:	e8 e7       	ldi	r30, 0x78	; 120
    86ea:	f3 e4       	ldi	r31, 0x43	; 67
    86ec:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    86f0:	9e 01       	movw	r18, r28
    86f2:	23 5f       	subi	r18, 0xF3	; 243
    86f4:	3f 4f       	sbci	r19, 0xFF	; 255
    86f6:	f9 01       	movw	r30, r18
    86f8:	41 91       	ld	r20, Z+
    86fa:	51 91       	ld	r21, Z+
    86fc:	61 91       	ld	r22, Z+
    86fe:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8700:	88 e5       	ldi	r24, 0x58	; 88
    8702:	9b e3       	ldi	r25, 0x3B	; 59
    8704:	9a 83       	std	Y+2, r25	; 0x02
    8706:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8708:	18 86       	std	Y+8, r1	; 0x08
    870a:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    870c:	ce 01       	movw	r24, r28
    870e:	01 96       	adiw	r24, 0x01	; 1
    8710:	89 db       	rcall	.-2286   	; 0x7e24 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8712:	8f 81       	ldd	r24, Y+7	; 0x07
    8714:	98 85       	ldd	r25, Y+8	; 0x08
    8716:	28 96       	adiw	r28, 0x08	; 8
    8718:	e2 e0       	ldi	r30, 0x02	; 2
    871a:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000871e <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    871e:	9c 01       	movw	r18, r24
    8720:	20 53       	subi	r18, 0x30	; 48
    8722:	31 09       	sbc	r19, r1
    8724:	2a 30       	cpi	r18, 0x0A	; 10
    8726:	31 05       	cpc	r19, r1
    8728:	10 f4       	brcc	.+4      	; 0x872e <atodigit+0x10>
    872a:	c9 01       	movw	r24, r18
    872c:	10 c0       	rjmp	.+32     	; 0x874e <atodigit+0x30>
    872e:	9c 01       	movw	r18, r24
    8730:	21 54       	subi	r18, 0x41	; 65
    8732:	31 09       	sbc	r19, r1
    8734:	26 30       	cpi	r18, 0x06	; 6
    8736:	31 05       	cpc	r19, r1
    8738:	10 f4       	brcc	.+4      	; 0x873e <atodigit+0x20>
    873a:	c7 97       	sbiw	r24, 0x37	; 55
    873c:	08 c0       	rjmp	.+16     	; 0x874e <atodigit+0x30>
    873e:	9c 01       	movw	r18, r24
    8740:	21 56       	subi	r18, 0x61	; 97
    8742:	31 09       	sbc	r19, r1
    8744:	26 30       	cpi	r18, 0x06	; 6
    8746:	31 05       	cpc	r19, r1
    8748:	28 f4       	brcc	.+10     	; 0x8754 <atodigit+0x36>
    874a:	87 55       	subi	r24, 0x57	; 87
    874c:	91 09       	sbc	r25, r1
    874e:	86 17       	cp	r24, r22
    8750:	97 07       	cpc	r25, r23
    8752:	14 f0       	brlt	.+4      	; 0x8758 <atodigit+0x3a>
    8754:	8f ef       	ldi	r24, 0xFF	; 255
    8756:	9f ef       	ldi	r25, 0xFF	; 255
    8758:	08 95       	ret

0000875a <strtol>:
    875a:	a0 e0       	ldi	r26, 0x00	; 0
    875c:	b0 e0       	ldi	r27, 0x00	; 0
    875e:	e3 eb       	ldi	r30, 0xB3	; 179
    8760:	f3 e4       	ldi	r31, 0x43	; 67
    8762:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    8766:	2b 01       	movw	r4, r22
    8768:	8a 01       	movw	r16, r20
    876a:	ec 01       	movw	r28, r24
    876c:	28 81       	ld	r18, Y
    876e:	01 96       	adiw	r24, 0x01	; 1
    8770:	20 32       	cpi	r18, 0x20	; 32
    8772:	d9 f3       	breq	.-10     	; 0x876a <strtol+0x10>
    8774:	29 30       	cpi	r18, 0x09	; 9
    8776:	c9 f3       	breq	.-14     	; 0x876a <strtol+0x10>
    8778:	2d 32       	cpi	r18, 0x2D	; 45
    877a:	29 f4       	brne	.+10     	; 0x8786 <strtol+0x2c>
    877c:	ec 01       	movw	r28, r24
    877e:	66 24       	eor	r6, r6
    8780:	63 94       	inc	r6
    8782:	71 2c       	mov	r7, r1
    8784:	05 c0       	rjmp	.+10     	; 0x8790 <strtol+0x36>
    8786:	2b 32       	cpi	r18, 0x2B	; 43
    8788:	09 f4       	brne	.+2      	; 0x878c <strtol+0x32>
    878a:	ec 01       	movw	r28, r24
    878c:	61 2c       	mov	r6, r1
    878e:	71 2c       	mov	r7, r1
    8790:	9e 01       	movw	r18, r28
    8792:	2f 5f       	subi	r18, 0xFF	; 255
    8794:	3f 4f       	sbci	r19, 0xFF	; 255
    8796:	88 81       	ld	r24, Y
    8798:	80 33       	cpi	r24, 0x30	; 48
    879a:	11 f4       	brne	.+4      	; 0x87a0 <strtol+0x46>
    879c:	e9 01       	movw	r28, r18
    879e:	f8 cf       	rjmp	.-16     	; 0x8790 <strtol+0x36>
    87a0:	c1 2c       	mov	r12, r1
    87a2:	d1 2c       	mov	r13, r1
    87a4:	76 01       	movw	r14, r12
    87a6:	48 01       	movw	r8, r16
    87a8:	01 2e       	mov	r0, r17
    87aa:	00 0c       	add	r0, r0
    87ac:	aa 08       	sbc	r10, r10
    87ae:	bb 08       	sbc	r11, r11
    87b0:	3c 2e       	mov	r3, r28
    87b2:	2d 2e       	mov	r2, r29
    87b4:	89 91       	ld	r24, Y+
    87b6:	88 23       	and	r24, r24
    87b8:	31 f0       	breq	.+12     	; 0x87c6 <strtol+0x6c>
    87ba:	b8 01       	movw	r22, r16
    87bc:	90 e0       	ldi	r25, 0x00	; 0
    87be:	af df       	rcall	.-162    	; 0x871e <atodigit>
    87c0:	fc 01       	movw	r30, r24
    87c2:	97 ff       	sbrs	r25, 7
    87c4:	0c c0       	rjmp	.+24     	; 0x87de <strtol+0x84>
    87c6:	61 14       	cp	r6, r1
    87c8:	71 04       	cpc	r7, r1
    87ca:	c1 f0       	breq	.+48     	; 0x87fc <strtol+0xa2>
    87cc:	f0 94       	com	r15
    87ce:	e0 94       	com	r14
    87d0:	d0 94       	com	r13
    87d2:	c0 94       	com	r12
    87d4:	c1 1c       	adc	r12, r1
    87d6:	d1 1c       	adc	r13, r1
    87d8:	e1 1c       	adc	r14, r1
    87da:	f1 1c       	adc	r15, r1
    87dc:	0f c0       	rjmp	.+30     	; 0x87fc <strtol+0xa2>
    87de:	a5 01       	movw	r20, r10
    87e0:	94 01       	movw	r18, r8
    87e2:	c7 01       	movw	r24, r14
    87e4:	b6 01       	movw	r22, r12
    87e6:	0e 94 13 df 	call	0x1be26	; 0x1be26 <__mulsi3>
    87ea:	6f 01       	movw	r12, r30
    87ec:	ff 0f       	add	r31, r31
    87ee:	ee 08       	sbc	r14, r14
    87f0:	ff 08       	sbc	r15, r15
    87f2:	c6 0e       	add	r12, r22
    87f4:	d7 1e       	adc	r13, r23
    87f6:	e8 1e       	adc	r14, r24
    87f8:	f9 1e       	adc	r15, r25
    87fa:	da cf       	rjmp	.-76     	; 0x87b0 <strtol+0x56>
    87fc:	41 14       	cp	r4, r1
    87fe:	51 04       	cpc	r5, r1
    8800:	19 f0       	breq	.+6      	; 0x8808 <strtol+0xae>
    8802:	f2 01       	movw	r30, r4
    8804:	30 82       	st	Z, r3
    8806:	21 82       	std	Z+1, r2	; 0x01
    8808:	c7 01       	movw	r24, r14
    880a:	b6 01       	movw	r22, r12
    880c:	cd b7       	in	r28, 0x3d	; 61
    880e:	de b7       	in	r29, 0x3e	; 62
    8810:	e2 e1       	ldi	r30, 0x12	; 18
    8812:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

00008816 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8816:	4a e0       	ldi	r20, 0x0A	; 10
    8818:	50 e0       	ldi	r21, 0x00	; 0
    881a:	60 e0       	ldi	r22, 0x00	; 0
    881c:	70 e0       	ldi	r23, 0x00	; 0
    881e:	9d df       	rcall	.-198    	; 0x875a <strtol>
    return((int)num);
}
    8820:	cb 01       	movw	r24, r22
    8822:	08 95       	ret

00008824 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8824:	4a e0       	ldi	r20, 0x0A	; 10
    8826:	50 e0       	ldi	r21, 0x00	; 0
    8828:	60 e0       	ldi	r22, 0x00	; 0
    882a:	70 e0       	ldi	r23, 0x00	; 0
    882c:	96 cf       	rjmp	.-212    	; 0x875a <strtol>
    return(num);
}
    882e:	08 95       	ret

00008830 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8830:	fc 01       	movw	r30, r24
    8832:	62 81       	ldd	r22, Z+2	; 0x02
    8834:	73 81       	ldd	r23, Z+3	; 0x03
    8836:	cb 01       	movw	r24, r22
    8838:	a0 e0       	ldi	r26, 0x00	; 0
    883a:	b0 e0       	ldi	r27, 0x00	; 0
    883c:	ba 2f       	mov	r27, r26
    883e:	a9 2f       	mov	r26, r25
    8840:	98 2f       	mov	r25, r24
    8842:	88 27       	eor	r24, r24
    8844:	21 81       	ldd	r18, Z+1	; 0x01
    8846:	82 2b       	or	r24, r18
    8848:	ba 2f       	mov	r27, r26
    884a:	a9 2f       	mov	r26, r25
    884c:	98 2f       	mov	r25, r24
    884e:	88 27       	eor	r24, r24
    8850:	20 81       	ld	r18, Z
    8852:	bc 01       	movw	r22, r24
    8854:	cd 01       	movw	r24, r26
    8856:	62 2b       	or	r22, r18
    8858:	08 95       	ret

0000885a <st_dword>:
    885a:	fc 01       	movw	r30, r24
    885c:	40 83       	st	Z, r20
    885e:	51 83       	std	Z+1, r21	; 0x01
    8860:	62 83       	std	Z+2, r22	; 0x02
    8862:	73 83       	std	Z+3, r23	; 0x03
    8864:	08 95       	ret

00008866 <mem_set>:
    8866:	48 0f       	add	r20, r24
    8868:	59 1f       	adc	r21, r25
    886a:	fc 01       	movw	r30, r24
    886c:	61 93       	st	Z+, r22
    886e:	cf 01       	movw	r24, r30
    8870:	e4 17       	cp	r30, r20
    8872:	f5 07       	cpc	r31, r21
    8874:	d1 f7       	brne	.-12     	; 0x886a <mem_set+0x4>
    8876:	08 95       	ret

00008878 <mem_cmp>:
    8878:	dc 01       	movw	r26, r24
    887a:	fb 01       	movw	r30, r22
    887c:	2d 91       	ld	r18, X+
    887e:	81 91       	ld	r24, Z+
    8880:	30 e0       	ldi	r19, 0x00	; 0
    8882:	b9 01       	movw	r22, r18
    8884:	68 1b       	sub	r22, r24
    8886:	71 09       	sbc	r23, r1
    8888:	cb 01       	movw	r24, r22
    888a:	41 50       	subi	r20, 0x01	; 1
    888c:	51 09       	sbc	r21, r1
    888e:	11 f0       	breq	.+4      	; 0x8894 <mem_cmp+0x1c>
    8890:	00 97       	sbiw	r24, 0x00	; 0
    8892:	a1 f3       	breq	.-24     	; 0x887c <mem_cmp+0x4>
    8894:	08 95       	ret

00008896 <tchar2uni>:
    8896:	0f 93       	push	r16
    8898:	1f 93       	push	r17
    889a:	fc 01       	movw	r30, r24
    889c:	a0 81       	ld	r26, Z
    889e:	b1 81       	ldd	r27, Z+1	; 0x01
    88a0:	fd 01       	movw	r30, r26
    88a2:	31 96       	adiw	r30, 0x01	; 1
    88a4:	4c 91       	ld	r20, X
    88a6:	47 fd       	sbrc	r20, 7
    88a8:	04 c0       	rjmp	.+8      	; 0x88b2 <tchar2uni+0x1c>
    88aa:	50 e0       	ldi	r21, 0x00	; 0
    88ac:	60 e0       	ldi	r22, 0x00	; 0
    88ae:	70 e0       	ldi	r23, 0x00	; 0
    88b0:	68 c0       	rjmp	.+208    	; 0x8982 <tchar2uni+0xec>
    88b2:	24 2f       	mov	r18, r20
    88b4:	20 7e       	andi	r18, 0xE0	; 224
    88b6:	20 3c       	cpi	r18, 0xC0	; 192
    88b8:	39 f4       	brne	.+14     	; 0x88c8 <tchar2uni+0x32>
    88ba:	4f 71       	andi	r20, 0x1F	; 31
    88bc:	50 e0       	ldi	r21, 0x00	; 0
    88be:	60 e0       	ldi	r22, 0x00	; 0
    88c0:	70 e0       	ldi	r23, 0x00	; 0
    88c2:	21 e0       	ldi	r18, 0x01	; 1
    88c4:	30 e0       	ldi	r19, 0x00	; 0
    88c6:	16 c0       	rjmp	.+44     	; 0x88f4 <tchar2uni+0x5e>
    88c8:	24 2f       	mov	r18, r20
    88ca:	20 7f       	andi	r18, 0xF0	; 240
    88cc:	20 3e       	cpi	r18, 0xE0	; 224
    88ce:	39 f4       	brne	.+14     	; 0x88de <tchar2uni+0x48>
    88d0:	4f 70       	andi	r20, 0x0F	; 15
    88d2:	50 e0       	ldi	r21, 0x00	; 0
    88d4:	60 e0       	ldi	r22, 0x00	; 0
    88d6:	70 e0       	ldi	r23, 0x00	; 0
    88d8:	22 e0       	ldi	r18, 0x02	; 2
    88da:	30 e0       	ldi	r19, 0x00	; 0
    88dc:	0b c0       	rjmp	.+22     	; 0x88f4 <tchar2uni+0x5e>
    88de:	24 2f       	mov	r18, r20
    88e0:	28 7f       	andi	r18, 0xF8	; 248
    88e2:	20 3f       	cpi	r18, 0xF0	; 240
    88e4:	09 f0       	breq	.+2      	; 0x88e8 <tchar2uni+0x52>
    88e6:	54 c0       	rjmp	.+168    	; 0x8990 <tchar2uni+0xfa>
    88e8:	47 70       	andi	r20, 0x07	; 7
    88ea:	50 e0       	ldi	r21, 0x00	; 0
    88ec:	60 e0       	ldi	r22, 0x00	; 0
    88ee:	70 e0       	ldi	r23, 0x00	; 0
    88f0:	23 e0       	ldi	r18, 0x03	; 3
    88f2:	30 e0       	ldi	r19, 0x00	; 0
    88f4:	31 96       	adiw	r30, 0x01	; 1
    88f6:	df 01       	movw	r26, r30
    88f8:	11 97       	sbiw	r26, 0x01	; 1
    88fa:	ac 91       	ld	r26, X
    88fc:	ba 2f       	mov	r27, r26
    88fe:	b0 7c       	andi	r27, 0xC0	; 192
    8900:	b0 38       	cpi	r27, 0x80	; 128
    8902:	09 f0       	breq	.+2      	; 0x8906 <tchar2uni+0x70>
    8904:	45 c0       	rjmp	.+138    	; 0x8990 <tchar2uni+0xfa>
    8906:	b6 e0       	ldi	r27, 0x06	; 6
    8908:	44 0f       	add	r20, r20
    890a:	55 1f       	adc	r21, r21
    890c:	66 1f       	adc	r22, r22
    890e:	77 1f       	adc	r23, r23
    8910:	ba 95       	dec	r27
    8912:	d1 f7       	brne	.-12     	; 0x8908 <tchar2uni+0x72>
    8914:	af 73       	andi	r26, 0x3F	; 63
    8916:	4a 2b       	or	r20, r26
    8918:	21 50       	subi	r18, 0x01	; 1
    891a:	31 09       	sbc	r19, r1
    891c:	59 f7       	brne	.-42     	; 0x88f4 <tchar2uni+0x5e>
    891e:	8a 01       	movw	r16, r20
    8920:	9b 01       	movw	r18, r22
    8922:	00 58       	subi	r16, 0x80	; 128
    8924:	11 09       	sbc	r17, r1
    8926:	21 09       	sbc	r18, r1
    8928:	31 09       	sbc	r19, r1
    892a:	00 38       	cpi	r16, 0x80	; 128
    892c:	1f 4f       	sbci	r17, 0xFF	; 255
    892e:	20 41       	sbci	r18, 0x10	; 16
    8930:	31 05       	cpc	r19, r1
    8932:	70 f5       	brcc	.+92     	; 0x8990 <tchar2uni+0xfa>
    8934:	8a 01       	movw	r16, r20
    8936:	9b 01       	movw	r18, r22
    8938:	18 5d       	subi	r17, 0xD8	; 216
    893a:	21 09       	sbc	r18, r1
    893c:	31 09       	sbc	r19, r1
    893e:	01 15       	cp	r16, r1
    8940:	18 40       	sbci	r17, 0x08	; 8
    8942:	21 05       	cpc	r18, r1
    8944:	31 05       	cpc	r19, r1
    8946:	20 f1       	brcs	.+72     	; 0x8990 <tchar2uni+0xfa>
    8948:	41 15       	cp	r20, r1
    894a:	51 05       	cpc	r21, r1
    894c:	21 e0       	ldi	r18, 0x01	; 1
    894e:	62 07       	cpc	r22, r18
    8950:	71 05       	cpc	r23, r1
    8952:	b8 f0       	brcs	.+46     	; 0x8982 <tchar2uni+0xec>
    8954:	8a 01       	movw	r16, r20
    8956:	9b 01       	movw	r18, r22
    8958:	21 50       	subi	r18, 0x01	; 1
    895a:	31 09       	sbc	r19, r1
    895c:	a6 e0       	ldi	r26, 0x06	; 6
    895e:	00 0f       	add	r16, r16
    8960:	11 1f       	adc	r17, r17
    8962:	22 1f       	adc	r18, r18
    8964:	33 1f       	adc	r19, r19
    8966:	aa 95       	dec	r26
    8968:	d1 f7       	brne	.-12     	; 0x895e <tchar2uni+0xc8>
    896a:	00 27       	eor	r16, r16
    896c:	11 27       	eor	r17, r17
    896e:	33 70       	andi	r19, 0x03	; 3
    8970:	53 70       	andi	r21, 0x03	; 3
    8972:	66 27       	eor	r22, r22
    8974:	77 27       	eor	r23, r23
    8976:	5c 6d       	ori	r21, 0xDC	; 220
    8978:	78 6d       	ori	r23, 0xD8	; 216
    897a:	40 2b       	or	r20, r16
    897c:	51 2b       	or	r21, r17
    897e:	62 2b       	or	r22, r18
    8980:	73 2b       	or	r23, r19
    8982:	dc 01       	movw	r26, r24
    8984:	ed 93       	st	X+, r30
    8986:	fc 93       	st	X, r31
    8988:	34 2f       	mov	r19, r20
    898a:	25 2f       	mov	r18, r21
    898c:	cb 01       	movw	r24, r22
    898e:	04 c0       	rjmp	.+8      	; 0x8998 <tchar2uni+0x102>
    8990:	3f ef       	ldi	r19, 0xFF	; 255
    8992:	2f ef       	ldi	r18, 0xFF	; 255
    8994:	8f ef       	ldi	r24, 0xFF	; 255
    8996:	9f ef       	ldi	r25, 0xFF	; 255
    8998:	63 2f       	mov	r22, r19
    899a:	72 2f       	mov	r23, r18
    899c:	1f 91       	pop	r17
    899e:	0f 91       	pop	r16
    89a0:	08 95       	ret

000089a2 <clst2sect>:
    89a2:	0f 93       	push	r16
    89a4:	1f 93       	push	r17
    89a6:	fc 01       	movw	r30, r24
    89a8:	9a 01       	movw	r18, r20
    89aa:	ab 01       	movw	r20, r22
    89ac:	22 50       	subi	r18, 0x02	; 2
    89ae:	31 09       	sbc	r19, r1
    89b0:	41 09       	sbc	r20, r1
    89b2:	51 09       	sbc	r21, r1
    89b4:	81 8d       	ldd	r24, Z+25	; 0x19
    89b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    89b8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    89ba:	b4 8d       	ldd	r27, Z+28	; 0x1c
    89bc:	02 97       	sbiw	r24, 0x02	; 2
    89be:	a1 09       	sbc	r26, r1
    89c0:	b1 09       	sbc	r27, r1
    89c2:	28 17       	cp	r18, r24
    89c4:	39 07       	cpc	r19, r25
    89c6:	4a 07       	cpc	r20, r26
    89c8:	5b 07       	cpc	r21, r27
    89ca:	68 f4       	brcc	.+26     	; 0x89e6 <clst2sect+0x44>
    89cc:	a1 85       	ldd	r26, Z+9	; 0x09
    89ce:	b2 85       	ldd	r27, Z+10	; 0x0a
    89d0:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
    89d4:	05 a5       	ldd	r16, Z+45	; 0x2d
    89d6:	16 a5       	ldd	r17, Z+46	; 0x2e
    89d8:	27 a5       	ldd	r18, Z+47	; 0x2f
    89da:	30 a9       	ldd	r19, Z+48	; 0x30
    89dc:	60 0f       	add	r22, r16
    89de:	71 1f       	adc	r23, r17
    89e0:	82 1f       	adc	r24, r18
    89e2:	93 1f       	adc	r25, r19
    89e4:	03 c0       	rjmp	.+6      	; 0x89ec <clst2sect+0x4a>
    89e6:	60 e0       	ldi	r22, 0x00	; 0
    89e8:	70 e0       	ldi	r23, 0x00	; 0
    89ea:	cb 01       	movw	r24, r22
    89ec:	1f 91       	pop	r17
    89ee:	0f 91       	pop	r16
    89f0:	08 95       	ret

000089f2 <clmt_clust>:
    89f2:	cf 93       	push	r28
    89f4:	df 93       	push	r29
    89f6:	fc 01       	movw	r30, r24
    89f8:	c2 a1       	ldd	r28, Z+34	; 0x22
    89fa:	d3 a1       	ldd	r29, Z+35	; 0x23
    89fc:	24 96       	adiw	r28, 0x04	; 4
    89fe:	cb 01       	movw	r24, r22
    8a00:	ba 01       	movw	r22, r20
    8a02:	29 e0       	ldi	r18, 0x09	; 9
    8a04:	96 95       	lsr	r25
    8a06:	87 95       	ror	r24
    8a08:	77 95       	ror	r23
    8a0a:	67 95       	ror	r22
    8a0c:	2a 95       	dec	r18
    8a0e:	d1 f7       	brne	.-12     	; 0x8a04 <clmt_clust+0x12>
    8a10:	01 90       	ld	r0, Z+
    8a12:	f0 81       	ld	r31, Z
    8a14:	e0 2d       	mov	r30, r0
    8a16:	21 85       	ldd	r18, Z+9	; 0x09
    8a18:	32 85       	ldd	r19, Z+10	; 0x0a
    8a1a:	40 e0       	ldi	r20, 0x00	; 0
    8a1c:	50 e0       	ldi	r21, 0x00	; 0
    8a1e:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    8a22:	88 81       	ld	r24, Y
    8a24:	99 81       	ldd	r25, Y+1	; 0x01
    8a26:	aa 81       	ldd	r26, Y+2	; 0x02
    8a28:	bb 81       	ldd	r27, Y+3	; 0x03
    8a2a:	00 97       	sbiw	r24, 0x00	; 0
    8a2c:	a1 05       	cpc	r26, r1
    8a2e:	b1 05       	cpc	r27, r1
    8a30:	b1 f0       	breq	.+44     	; 0x8a5e <clmt_clust+0x6c>
    8a32:	28 17       	cp	r18, r24
    8a34:	39 07       	cpc	r19, r25
    8a36:	4a 07       	cpc	r20, r26
    8a38:	5b 07       	cpc	r21, r27
    8a3a:	30 f0       	brcs	.+12     	; 0x8a48 <clmt_clust+0x56>
    8a3c:	28 1b       	sub	r18, r24
    8a3e:	39 0b       	sbc	r19, r25
    8a40:	4a 0b       	sbc	r20, r26
    8a42:	5b 0b       	sbc	r21, r27
    8a44:	28 96       	adiw	r28, 0x08	; 8
    8a46:	ed cf       	rjmp	.-38     	; 0x8a22 <clmt_clust+0x30>
    8a48:	8c 81       	ldd	r24, Y+4	; 0x04
    8a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    8a4c:	ae 81       	ldd	r26, Y+6	; 0x06
    8a4e:	bf 81       	ldd	r27, Y+7	; 0x07
    8a50:	bc 01       	movw	r22, r24
    8a52:	cd 01       	movw	r24, r26
    8a54:	62 0f       	add	r22, r18
    8a56:	73 1f       	adc	r23, r19
    8a58:	84 1f       	adc	r24, r20
    8a5a:	95 1f       	adc	r25, r21
    8a5c:	03 c0       	rjmp	.+6      	; 0x8a64 <clmt_clust+0x72>
    8a5e:	60 e0       	ldi	r22, 0x00	; 0
    8a60:	70 e0       	ldi	r23, 0x00	; 0
    8a62:	cb 01       	movw	r24, r22
    8a64:	df 91       	pop	r29
    8a66:	cf 91       	pop	r28
    8a68:	08 95       	ret

00008a6a <sum_sfn>:
    8a6a:	fc 01       	movw	r30, r24
    8a6c:	9c 01       	movw	r18, r24
    8a6e:	25 5f       	subi	r18, 0xF5	; 245
    8a70:	3f 4f       	sbci	r19, 0xFF	; 255
    8a72:	80 e0       	ldi	r24, 0x00	; 0
    8a74:	98 2f       	mov	r25, r24
    8a76:	90 fb       	bst	r25, 0
    8a78:	97 95       	ror	r25
    8a7a:	97 f9       	bld	r25, 7
    8a7c:	81 91       	ld	r24, Z+
    8a7e:	89 0f       	add	r24, r25
    8a80:	e2 17       	cp	r30, r18
    8a82:	f3 07       	cpc	r31, r19
    8a84:	b9 f7       	brne	.-18     	; 0x8a74 <sum_sfn+0xa>
    8a86:	08 95       	ret

00008a88 <get_ldnumber>:
    8a88:	cf 93       	push	r28
    8a8a:	df 93       	push	r29
    8a8c:	dc 01       	movw	r26, r24
    8a8e:	ed 91       	ld	r30, X+
    8a90:	fc 91       	ld	r31, X
    8a92:	11 97       	sbiw	r26, 0x01	; 1
    8a94:	30 97       	sbiw	r30, 0x00	; 0
    8a96:	f9 f0       	breq	.+62     	; 0x8ad6 <get_ldnumber+0x4e>
    8a98:	9f 01       	movw	r18, r30
    8a9a:	2f 5f       	subi	r18, 0xFF	; 255
    8a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    8a9e:	e9 01       	movw	r28, r18
    8aa0:	21 97       	sbiw	r28, 0x01	; 1
    8aa2:	88 81       	ld	r24, Y
    8aa4:	80 32       	cpi	r24, 0x20	; 32
    8aa6:	18 f0       	brcs	.+6      	; 0x8aae <get_ldnumber+0x26>
    8aa8:	8a 33       	cpi	r24, 0x3A	; 58
    8aaa:	b9 f7       	brne	.-18     	; 0x8a9a <get_ldnumber+0x12>
    8aac:	04 c0       	rjmp	.+8      	; 0x8ab6 <get_ldnumber+0x2e>
    8aae:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <CurrVol>
    8ab2:	90 e0       	ldi	r25, 0x00	; 0
    8ab4:	12 c0       	rjmp	.+36     	; 0x8ada <get_ldnumber+0x52>
    8ab6:	90 81       	ld	r25, Z
    8ab8:	80 ed       	ldi	r24, 0xD0	; 208
    8aba:	89 0f       	add	r24, r25
    8abc:	8a 30       	cpi	r24, 0x0A	; 10
    8abe:	58 f4       	brcc	.+22     	; 0x8ad6 <get_ldnumber+0x4e>
    8ac0:	32 96       	adiw	r30, 0x02	; 2
    8ac2:	2e 17       	cp	r18, r30
    8ac4:	3f 07       	cpc	r19, r31
    8ac6:	39 f4       	brne	.+14     	; 0x8ad6 <get_ldnumber+0x4e>
    8ac8:	90 33       	cpi	r25, 0x30	; 48
    8aca:	29 f4       	brne	.+10     	; 0x8ad6 <get_ldnumber+0x4e>
    8acc:	2d 93       	st	X+, r18
    8ace:	3c 93       	st	X, r19
    8ad0:	80 e0       	ldi	r24, 0x00	; 0
    8ad2:	90 e0       	ldi	r25, 0x00	; 0
    8ad4:	02 c0       	rjmp	.+4      	; 0x8ada <get_ldnumber+0x52>
    8ad6:	8f ef       	ldi	r24, 0xFF	; 255
    8ad8:	9f ef       	ldi	r25, 0xFF	; 255
    8ada:	df 91       	pop	r29
    8adc:	cf 91       	pop	r28
    8ade:	08 95       	ret

00008ae0 <validate>:
    8ae0:	0f 93       	push	r16
    8ae2:	1f 93       	push	r17
    8ae4:	cf 93       	push	r28
    8ae6:	df 93       	push	r29
    8ae8:	ec 01       	movw	r28, r24
    8aea:	8b 01       	movw	r16, r22
    8aec:	89 2b       	or	r24, r25
    8aee:	f9 f0       	breq	.+62     	; 0x8b2e <validate+0x4e>
    8af0:	e8 81       	ld	r30, Y
    8af2:	f9 81       	ldd	r31, Y+1	; 0x01
    8af4:	30 97       	sbiw	r30, 0x00	; 0
    8af6:	d9 f0       	breq	.+54     	; 0x8b2e <validate+0x4e>
    8af8:	80 81       	ld	r24, Z
    8afa:	88 23       	and	r24, r24
    8afc:	c1 f0       	breq	.+48     	; 0x8b2e <validate+0x4e>
    8afe:	2a 81       	ldd	r18, Y+2	; 0x02
    8b00:	3b 81       	ldd	r19, Y+3	; 0x03
    8b02:	85 81       	ldd	r24, Z+5	; 0x05
    8b04:	96 81       	ldd	r25, Z+6	; 0x06
    8b06:	28 17       	cp	r18, r24
    8b08:	39 07       	cpc	r19, r25
    8b0a:	89 f4       	brne	.+34     	; 0x8b2e <validate+0x4e>
    8b0c:	81 81       	ldd	r24, Z+1	; 0x01
    8b0e:	0e 94 30 67 	call	0xce60	; 0xce60 <disk_status>
    8b12:	80 fd       	sbrc	r24, 0
    8b14:	0c c0       	rjmp	.+24     	; 0x8b2e <validate+0x4e>
    8b16:	28 81       	ld	r18, Y
    8b18:	39 81       	ldd	r19, Y+1	; 0x01
    8b1a:	80 e0       	ldi	r24, 0x00	; 0
    8b1c:	90 e0       	ldi	r25, 0x00	; 0
    8b1e:	f8 01       	movw	r30, r16
    8b20:	31 83       	std	Z+1, r19	; 0x01
    8b22:	20 83       	st	Z, r18
    8b24:	df 91       	pop	r29
    8b26:	cf 91       	pop	r28
    8b28:	1f 91       	pop	r17
    8b2a:	0f 91       	pop	r16
    8b2c:	08 95       	ret
    8b2e:	89 e0       	ldi	r24, 0x09	; 9
    8b30:	90 e0       	ldi	r25, 0x00	; 0
    8b32:	20 e0       	ldi	r18, 0x00	; 0
    8b34:	30 e0       	ldi	r19, 0x00	; 0
    8b36:	f3 cf       	rjmp	.-26     	; 0x8b1e <validate+0x3e>

00008b38 <mem_cpy.part.0>:
    8b38:	fb 01       	movw	r30, r22
    8b3a:	48 0f       	add	r20, r24
    8b3c:	59 1f       	adc	r21, r25
    8b3e:	21 91       	ld	r18, Z+
    8b40:	dc 01       	movw	r26, r24
    8b42:	2d 93       	st	X+, r18
    8b44:	cd 01       	movw	r24, r26
    8b46:	a4 17       	cp	r26, r20
    8b48:	b5 07       	cpc	r27, r21
    8b4a:	c9 f7       	brne	.-14     	; 0x8b3e <mem_cpy.part.0+0x6>
    8b4c:	08 95       	ret

00008b4e <put_utf>:
    8b4e:	0f 93       	push	r16
    8b50:	1f 93       	push	r17
    8b52:	fa 01       	movw	r30, r20
    8b54:	60 38       	cpi	r22, 0x80	; 128
    8b56:	71 05       	cpc	r23, r1
    8b58:	81 05       	cpc	r24, r1
    8b5a:	91 05       	cpc	r25, r1
    8b5c:	30 f4       	brcc	.+12     	; 0x8b6a <put_utf+0x1c>
    8b5e:	23 2b       	or	r18, r19
    8b60:	09 f4       	brne	.+2      	; 0x8b64 <put_utf+0x16>
    8b62:	9e c0       	rjmp	.+316    	; 0x8ca0 <put_utf+0x152>
    8b64:	60 83       	st	Z, r22
    8b66:	81 e0       	ldi	r24, 0x01	; 1
    8b68:	9c c0       	rjmp	.+312    	; 0x8ca2 <put_utf+0x154>
    8b6a:	61 15       	cp	r22, r1
    8b6c:	48 e0       	ldi	r20, 0x08	; 8
    8b6e:	74 07       	cpc	r23, r20
    8b70:	81 05       	cpc	r24, r1
    8b72:	91 05       	cpc	r25, r1
    8b74:	a0 f4       	brcc	.+40     	; 0x8b9e <put_utf+0x50>
    8b76:	22 30       	cpi	r18, 0x02	; 2
    8b78:	31 05       	cpc	r19, r1
    8b7a:	08 f4       	brcc	.+2      	; 0x8b7e <put_utf+0x30>
    8b7c:	91 c0       	rjmp	.+290    	; 0x8ca0 <put_utf+0x152>
    8b7e:	8b 01       	movw	r16, r22
    8b80:	9c 01       	movw	r18, r24
    8b82:	76 e0       	ldi	r23, 0x06	; 6
    8b84:	36 95       	lsr	r19
    8b86:	27 95       	ror	r18
    8b88:	17 95       	ror	r17
    8b8a:	07 95       	ror	r16
    8b8c:	7a 95       	dec	r23
    8b8e:	d1 f7       	brne	.-12     	; 0x8b84 <put_utf+0x36>
    8b90:	00 6c       	ori	r16, 0xC0	; 192
    8b92:	00 83       	st	Z, r16
    8b94:	6f 73       	andi	r22, 0x3F	; 63
    8b96:	60 68       	ori	r22, 0x80	; 128
    8b98:	61 83       	std	Z+1, r22	; 0x01
    8b9a:	82 e0       	ldi	r24, 0x02	; 2
    8b9c:	82 c0       	rjmp	.+260    	; 0x8ca2 <put_utf+0x154>
    8b9e:	61 15       	cp	r22, r1
    8ba0:	71 05       	cpc	r23, r1
    8ba2:	41 e0       	ldi	r20, 0x01	; 1
    8ba4:	84 07       	cpc	r24, r20
    8ba6:	91 05       	cpc	r25, r1
    8ba8:	58 f5       	brcc	.+86     	; 0x8c00 <put_utf+0xb2>
    8baa:	23 30       	cpi	r18, 0x03	; 3
    8bac:	31 05       	cpc	r19, r1
    8bae:	08 f4       	brcc	.+2      	; 0x8bb2 <put_utf+0x64>
    8bb0:	77 c0       	rjmp	.+238    	; 0x8ca0 <put_utf+0x152>
    8bb2:	8b 01       	movw	r16, r22
    8bb4:	9c 01       	movw	r18, r24
    8bb6:	18 5d       	subi	r17, 0xD8	; 216
    8bb8:	21 09       	sbc	r18, r1
    8bba:	31 09       	sbc	r19, r1
    8bbc:	01 15       	cp	r16, r1
    8bbe:	18 40       	sbci	r17, 0x08	; 8
    8bc0:	21 05       	cpc	r18, r1
    8bc2:	31 05       	cpc	r19, r1
    8bc4:	08 f4       	brcc	.+2      	; 0x8bc8 <put_utf+0x7a>
    8bc6:	6c c0       	rjmp	.+216    	; 0x8ca0 <put_utf+0x152>
    8bc8:	8b 01       	movw	r16, r22
    8bca:	9c 01       	movw	r18, r24
    8bcc:	4c e0       	ldi	r20, 0x0C	; 12
    8bce:	36 95       	lsr	r19
    8bd0:	27 95       	ror	r18
    8bd2:	17 95       	ror	r17
    8bd4:	07 95       	ror	r16
    8bd6:	4a 95       	dec	r20
    8bd8:	d1 f7       	brne	.-12     	; 0x8bce <put_utf+0x80>
    8bda:	00 6e       	ori	r16, 0xE0	; 224
    8bdc:	00 83       	st	Z, r16
    8bde:	8b 01       	movw	r16, r22
    8be0:	9c 01       	movw	r18, r24
    8be2:	56 e0       	ldi	r21, 0x06	; 6
    8be4:	36 95       	lsr	r19
    8be6:	27 95       	ror	r18
    8be8:	17 95       	ror	r17
    8bea:	07 95       	ror	r16
    8bec:	5a 95       	dec	r21
    8bee:	d1 f7       	brne	.-12     	; 0x8be4 <put_utf+0x96>
    8bf0:	0f 73       	andi	r16, 0x3F	; 63
    8bf2:	00 68       	ori	r16, 0x80	; 128
    8bf4:	01 83       	std	Z+1, r16	; 0x01
    8bf6:	6f 73       	andi	r22, 0x3F	; 63
    8bf8:	60 68       	ori	r22, 0x80	; 128
    8bfa:	62 83       	std	Z+2, r22	; 0x02
    8bfc:	83 e0       	ldi	r24, 0x03	; 3
    8bfe:	51 c0       	rjmp	.+162    	; 0x8ca2 <put_utf+0x154>
    8c00:	24 30       	cpi	r18, 0x04	; 4
    8c02:	31 05       	cpc	r19, r1
    8c04:	08 f4       	brcc	.+2      	; 0x8c08 <put_utf+0xba>
    8c06:	4c c0       	rjmp	.+152    	; 0x8ca0 <put_utf+0x152>
    8c08:	8b 01       	movw	r16, r22
    8c0a:	9c 01       	movw	r18, r24
    8c0c:	00 27       	eor	r16, r16
    8c0e:	11 27       	eor	r17, r17
    8c10:	38 5d       	subi	r19, 0xD8	; 216
    8c12:	b6 e0       	ldi	r27, 0x06	; 6
    8c14:	36 95       	lsr	r19
    8c16:	27 95       	ror	r18
    8c18:	17 95       	ror	r17
    8c1a:	07 95       	ror	r16
    8c1c:	ba 95       	dec	r27
    8c1e:	d1 f7       	brne	.-12     	; 0x8c14 <put_utf+0xc6>
    8c20:	01 15       	cp	r16, r1
    8c22:	11 05       	cpc	r17, r1
    8c24:	40 e1       	ldi	r20, 0x10	; 16
    8c26:	24 07       	cpc	r18, r20
    8c28:	31 05       	cpc	r19, r1
    8c2a:	d0 f5       	brcc	.+116    	; 0x8ca0 <put_utf+0x152>
    8c2c:	dc 01       	movw	r26, r24
    8c2e:	cb 01       	movw	r24, r22
    8c30:	aa 27       	eor	r26, r26
    8c32:	bb 27       	eor	r27, r27
    8c34:	9c 5d       	subi	r25, 0xDC	; 220
    8c36:	a1 09       	sbc	r26, r1
    8c38:	b1 09       	sbc	r27, r1
    8c3a:	81 15       	cp	r24, r1
    8c3c:	44 e0       	ldi	r20, 0x04	; 4
    8c3e:	94 07       	cpc	r25, r20
    8c40:	a1 05       	cpc	r26, r1
    8c42:	b1 05       	cpc	r27, r1
    8c44:	68 f5       	brcc	.+90     	; 0x8ca0 <put_utf+0x152>
    8c46:	80 2b       	or	r24, r16
    8c48:	91 2b       	or	r25, r17
    8c4a:	a2 2b       	or	r26, r18
    8c4c:	b3 2b       	or	r27, r19
    8c4e:	11 96       	adiw	r26, 0x01	; 1
    8c50:	ac 01       	movw	r20, r24
    8c52:	bd 01       	movw	r22, r26
    8c54:	22 e1       	ldi	r18, 0x12	; 18
    8c56:	76 95       	lsr	r23
    8c58:	67 95       	ror	r22
    8c5a:	57 95       	ror	r21
    8c5c:	47 95       	ror	r20
    8c5e:	2a 95       	dec	r18
    8c60:	d1 f7       	brne	.-12     	; 0x8c56 <put_utf+0x108>
    8c62:	40 6f       	ori	r20, 0xF0	; 240
    8c64:	40 83       	st	Z, r20
    8c66:	ac 01       	movw	r20, r24
    8c68:	bd 01       	movw	r22, r26
    8c6a:	3c e0       	ldi	r19, 0x0C	; 12
    8c6c:	76 95       	lsr	r23
    8c6e:	67 95       	ror	r22
    8c70:	57 95       	ror	r21
    8c72:	47 95       	ror	r20
    8c74:	3a 95       	dec	r19
    8c76:	d1 f7       	brne	.-12     	; 0x8c6c <put_utf+0x11e>
    8c78:	4f 73       	andi	r20, 0x3F	; 63
    8c7a:	40 68       	ori	r20, 0x80	; 128
    8c7c:	41 83       	std	Z+1, r20	; 0x01
    8c7e:	ac 01       	movw	r20, r24
    8c80:	bd 01       	movw	r22, r26
    8c82:	a6 e0       	ldi	r26, 0x06	; 6
    8c84:	76 95       	lsr	r23
    8c86:	67 95       	ror	r22
    8c88:	57 95       	ror	r21
    8c8a:	47 95       	ror	r20
    8c8c:	aa 95       	dec	r26
    8c8e:	d1 f7       	brne	.-12     	; 0x8c84 <put_utf+0x136>
    8c90:	4f 73       	andi	r20, 0x3F	; 63
    8c92:	40 68       	ori	r20, 0x80	; 128
    8c94:	42 83       	std	Z+2, r20	; 0x02
    8c96:	8f 73       	andi	r24, 0x3F	; 63
    8c98:	80 68       	ori	r24, 0x80	; 128
    8c9a:	83 83       	std	Z+3, r24	; 0x03
    8c9c:	84 e0       	ldi	r24, 0x04	; 4
    8c9e:	01 c0       	rjmp	.+2      	; 0x8ca2 <put_utf+0x154>
    8ca0:	80 e0       	ldi	r24, 0x00	; 0
    8ca2:	1f 91       	pop	r17
    8ca4:	0f 91       	pop	r16
    8ca6:	08 95       	ret

00008ca8 <get_fileinfo>:
    8ca8:	a0 e0       	ldi	r26, 0x00	; 0
    8caa:	b0 e0       	ldi	r27, 0x00	; 0
    8cac:	ea e5       	ldi	r30, 0x5A	; 90
    8cae:	f6 e4       	ldi	r31, 0x46	; 70
    8cb0:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    8cb4:	fc 01       	movw	r30, r24
    8cb6:	60 80       	ld	r6, Z
    8cb8:	71 80       	ldd	r7, Z+1	; 0x01
    8cba:	fb 01       	movw	r30, r22
    8cbc:	16 8a       	std	Z+22, r1	; 0x16
    8cbe:	fc 01       	movw	r30, r24
    8cc0:	06 89       	ldd	r16, Z+22	; 0x16
    8cc2:	17 89       	ldd	r17, Z+23	; 0x17
    8cc4:	20 8d       	ldd	r18, Z+24	; 0x18
    8cc6:	31 8d       	ldd	r19, Z+25	; 0x19
    8cc8:	01 15       	cp	r16, r1
    8cca:	11 05       	cpc	r17, r1
    8ccc:	21 05       	cpc	r18, r1
    8cce:	31 05       	cpc	r19, r1
    8cd0:	09 f4       	brne	.+2      	; 0x8cd4 <get_fileinfo+0x2c>
    8cd2:	f5 c0       	rjmp	.+490    	; 0x8ebe <get_fileinfo+0x216>
    8cd4:	eb 01       	movw	r28, r22
    8cd6:	8c 01       	movw	r16, r24
    8cd8:	80 a5       	ldd	r24, Z+40	; 0x28
    8cda:	91 a5       	ldd	r25, Z+41	; 0x29
    8cdc:	a2 a5       	ldd	r26, Z+42	; 0x2a
    8cde:	b3 a5       	ldd	r27, Z+43	; 0x2b
    8ce0:	8f 3f       	cpi	r24, 0xFF	; 255
    8ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ce4:	af 4f       	sbci	r26, 0xFF	; 255
    8ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    8ce8:	09 f4       	brne	.+2      	; 0x8cec <get_fileinfo+0x44>
    8cea:	48 c0       	rjmp	.+144    	; 0x8d7c <get_fileinfo+0xd4>
    8cec:	a1 2c       	mov	r10, r1
    8cee:	b1 2c       	mov	r11, r1
    8cf0:	c1 2c       	mov	r12, r1
    8cf2:	d1 2c       	mov	r13, r1
    8cf4:	e1 2c       	mov	r14, r1
    8cf6:	f1 2c       	mov	r15, r1
    8cf8:	88 24       	eor	r8, r8
    8cfa:	8a 94       	dec	r8
    8cfc:	91 2c       	mov	r9, r1
    8cfe:	f3 01       	movw	r30, r6
    8d00:	83 85       	ldd	r24, Z+11	; 0x0b
    8d02:	94 85       	ldd	r25, Z+12	; 0x0c
    8d04:	fc 01       	movw	r30, r24
    8d06:	ea 0d       	add	r30, r10
    8d08:	fb 1d       	adc	r31, r11
    8d0a:	80 81       	ld	r24, Z
    8d0c:	91 81       	ldd	r25, Z+1	; 0x01
    8d0e:	00 97       	sbiw	r24, 0x00	; 0
    8d10:	69 f1       	breq	.+90     	; 0x8d6c <get_fileinfo+0xc4>
    8d12:	c1 14       	cp	r12, r1
    8d14:	d1 04       	cpc	r13, r1
    8d16:	29 f4       	brne	.+10     	; 0x8d22 <get_fileinfo+0x7a>
    8d18:	9c 01       	movw	r18, r24
    8d1a:	38 5d       	subi	r19, 0xD8	; 216
    8d1c:	21 15       	cp	r18, r1
    8d1e:	38 40       	sbci	r19, 0x08	; 8
    8d20:	f0 f0       	brcs	.+60     	; 0x8d5e <get_fileinfo+0xb6>
    8d22:	a7 01       	movw	r20, r14
    8d24:	4a 5e       	subi	r20, 0xEA	; 234
    8d26:	5f 4f       	sbci	r21, 0xFF	; 255
    8d28:	4c 0f       	add	r20, r28
    8d2a:	5d 1f       	adc	r21, r29
    8d2c:	16 01       	movw	r2, r12
    8d2e:	41 2c       	mov	r4, r1
    8d30:	51 2c       	mov	r5, r1
    8d32:	21 01       	movw	r4, r2
    8d34:	33 24       	eor	r3, r3
    8d36:	22 24       	eor	r2, r2
    8d38:	a0 e0       	ldi	r26, 0x00	; 0
    8d3a:	b0 e0       	ldi	r27, 0x00	; 0
    8d3c:	bc 01       	movw	r22, r24
    8d3e:	cd 01       	movw	r24, r26
    8d40:	62 29       	or	r22, r2
    8d42:	73 29       	or	r23, r3
    8d44:	84 29       	or	r24, r4
    8d46:	95 29       	or	r25, r5
    8d48:	94 01       	movw	r18, r8
    8d4a:	2e 19       	sub	r18, r14
    8d4c:	3f 09       	sbc	r19, r15
    8d4e:	ff de       	rcall	.-514    	; 0x8b4e <put_utf>
    8d50:	90 e0       	ldi	r25, 0x00	; 0
    8d52:	00 97       	sbiw	r24, 0x00	; 0
    8d54:	49 f0       	breq	.+18     	; 0x8d68 <get_fileinfo+0xc0>
    8d56:	e8 0e       	add	r14, r24
    8d58:	f9 1e       	adc	r15, r25
    8d5a:	80 e0       	ldi	r24, 0x00	; 0
    8d5c:	90 e0       	ldi	r25, 0x00	; 0
    8d5e:	e2 e0       	ldi	r30, 0x02	; 2
    8d60:	ae 0e       	add	r10, r30
    8d62:	b1 1c       	adc	r11, r1
    8d64:	6c 01       	movw	r12, r24
    8d66:	cb cf       	rjmp	.-106    	; 0x8cfe <get_fileinfo+0x56>
    8d68:	e1 2c       	mov	r14, r1
    8d6a:	f1 2c       	mov	r15, r1
    8d6c:	cd 28       	or	r12, r13
    8d6e:	11 f0       	breq	.+4      	; 0x8d74 <get_fileinfo+0xcc>
    8d70:	e1 2c       	mov	r14, r1
    8d72:	f1 2c       	mov	r15, r1
    8d74:	fe 01       	movw	r30, r28
    8d76:	ee 0d       	add	r30, r14
    8d78:	ff 1d       	adc	r31, r15
    8d7a:	16 8a       	std	Z+22, r1	; 0x16
    8d7c:	e1 2c       	mov	r14, r1
    8d7e:	f1 2c       	mov	r15, r1
    8d80:	80 e0       	ldi	r24, 0x00	; 0
    8d82:	90 e0       	ldi	r25, 0x00	; 0
    8d84:	2c e0       	ldi	r18, 0x0C	; 12
    8d86:	a2 2e       	mov	r10, r18
    8d88:	b1 2c       	mov	r11, r1
    8d8a:	3e e2       	ldi	r19, 0x2E	; 46
    8d8c:	93 2e       	mov	r9, r19
    8d8e:	6c 01       	movw	r12, r24
    8d90:	ff ef       	ldi	r31, 0xFF	; 255
    8d92:	cf 1a       	sub	r12, r31
    8d94:	df 0a       	sbc	r13, r31
    8d96:	f8 01       	movw	r30, r16
    8d98:	22 8d       	ldd	r18, Z+26	; 0x1a
    8d9a:	33 8d       	ldd	r19, Z+27	; 0x1b
    8d9c:	f9 01       	movw	r30, r18
    8d9e:	e8 0f       	add	r30, r24
    8da0:	f9 1f       	adc	r31, r25
    8da2:	80 81       	ld	r24, Z
    8da4:	90 e0       	ldi	r25, 0x00	; 0
    8da6:	80 32       	cpi	r24, 0x20	; 32
    8da8:	91 05       	cpc	r25, r1
    8daa:	71 f1       	breq	.+92     	; 0x8e08 <get_fileinfo+0x160>
    8dac:	85 30       	cpi	r24, 0x05	; 5
    8dae:	91 05       	cpc	r25, r1
    8db0:	11 f4       	brne	.+4      	; 0x8db6 <get_fileinfo+0x10e>
    8db2:	85 ee       	ldi	r24, 0xE5	; 229
    8db4:	90 e0       	ldi	r25, 0x00	; 0
    8db6:	f9 e0       	ldi	r31, 0x09	; 9
    8db8:	cf 16       	cp	r12, r31
    8dba:	d1 04       	cpc	r13, r1
    8dbc:	59 f4       	brne	.+22     	; 0x8dd4 <get_fileinfo+0x12c>
    8dbe:	2c e0       	ldi	r18, 0x0C	; 12
    8dc0:	e2 16       	cp	r14, r18
    8dc2:	f1 04       	cpc	r15, r1
    8dc4:	38 f4       	brcc	.+14     	; 0x8dd4 <get_fileinfo+0x12c>
    8dc6:	fe 01       	movw	r30, r28
    8dc8:	ee 0d       	add	r30, r14
    8dca:	ff 1d       	adc	r31, r15
    8dcc:	91 86       	std	Z+9, r9	; 0x09
    8dce:	f7 01       	movw	r30, r14
    8dd0:	31 96       	adiw	r30, 0x01	; 1
    8dd2:	7f 01       	movw	r14, r30
    8dd4:	65 eb       	ldi	r22, 0xB5	; 181
    8dd6:	71 e0       	ldi	r23, 0x01	; 1
    8dd8:	0e 94 b9 66 	call	0xcd72	; 0xcd72 <ff_oem2uni>
    8ddc:	00 97       	sbiw	r24, 0x00	; 0
    8dde:	19 f4       	brne	.+6      	; 0x8de6 <get_fileinfo+0x13e>
    8de0:	e1 2c       	mov	r14, r1
    8de2:	f1 2c       	mov	r15, r1
    8de4:	16 c0       	rjmp	.+44     	; 0x8e12 <get_fileinfo+0x16a>
    8de6:	a7 01       	movw	r20, r14
    8de8:	47 5f       	subi	r20, 0xF7	; 247
    8dea:	5f 4f       	sbci	r21, 0xFF	; 255
    8dec:	4c 0f       	add	r20, r28
    8dee:	5d 1f       	adc	r21, r29
    8df0:	bc 01       	movw	r22, r24
    8df2:	80 e0       	ldi	r24, 0x00	; 0
    8df4:	90 e0       	ldi	r25, 0x00	; 0
    8df6:	95 01       	movw	r18, r10
    8df8:	2e 19       	sub	r18, r14
    8dfa:	3f 09       	sbc	r19, r15
    8dfc:	a8 de       	rcall	.-688    	; 0x8b4e <put_utf>
    8dfe:	90 e0       	ldi	r25, 0x00	; 0
    8e00:	00 97       	sbiw	r24, 0x00	; 0
    8e02:	71 f3       	breq	.-36     	; 0x8de0 <get_fileinfo+0x138>
    8e04:	e8 0e       	add	r14, r24
    8e06:	f9 1e       	adc	r15, r25
    8e08:	c6 01       	movw	r24, r12
    8e0a:	8b 30       	cpi	r24, 0x0B	; 11
    8e0c:	91 05       	cpc	r25, r1
    8e0e:	09 f0       	breq	.+2      	; 0x8e12 <get_fileinfo+0x16a>
    8e10:	be cf       	rjmp	.-132    	; 0x8d8e <get_fileinfo+0xe6>
    8e12:	fe 01       	movw	r30, r28
    8e14:	ee 0d       	add	r30, r14
    8e16:	ff 1d       	adc	r31, r15
    8e18:	11 86       	std	Z+9, r1	; 0x09
    8e1a:	8e 89       	ldd	r24, Y+22	; 0x16
    8e1c:	81 11       	cpse	r24, r1
    8e1e:	36 c0       	rjmp	.+108    	; 0x8e8c <get_fileinfo+0x1e4>
    8e20:	e1 14       	cp	r14, r1
    8e22:	f1 04       	cpc	r15, r1
    8e24:	31 f0       	breq	.+12     	; 0x8e32 <get_fileinfo+0x18a>
    8e26:	de 01       	movw	r26, r28
    8e28:	19 96       	adiw	r26, 0x09	; 9
    8e2a:	58 e0       	ldi	r21, 0x08	; 8
    8e2c:	20 e0       	ldi	r18, 0x00	; 0
    8e2e:	30 e0       	ldi	r19, 0x00	; 0
    8e30:	14 c0       	rjmp	.+40     	; 0x8e5a <get_fileinfo+0x1b2>
    8e32:	8f e3       	ldi	r24, 0x3F	; 63
    8e34:	8e 8b       	std	Y+22, r24	; 0x16
    8e36:	21 e0       	ldi	r18, 0x01	; 1
    8e38:	30 e0       	ldi	r19, 0x00	; 0
    8e3a:	1c c0       	rjmp	.+56     	; 0x8e74 <get_fileinfo+0x1cc>
    8e3c:	90 e0       	ldi	r25, 0x00	; 0
    8e3e:	8e 32       	cpi	r24, 0x2E	; 46
    8e40:	91 05       	cpc	r25, r1
    8e42:	09 f4       	brne	.+2      	; 0x8e46 <get_fileinfo+0x19e>
    8e44:	50 e1       	ldi	r21, 0x10	; 16
    8e46:	bc 01       	movw	r22, r24
    8e48:	61 54       	subi	r22, 0x41	; 65
    8e4a:	71 09       	sbc	r23, r1
    8e4c:	6a 31       	cpi	r22, 0x1A	; 26
    8e4e:	71 05       	cpc	r23, r1
    8e50:	40 f0       	brcs	.+16     	; 0x8e62 <get_fileinfo+0x1ba>
    8e52:	fd 01       	movw	r30, r26
    8e54:	84 87       	std	Z+12, r24	; 0x0c
    8e56:	2f 5f       	subi	r18, 0xFF	; 255
    8e58:	3f 4f       	sbci	r19, 0xFF	; 255
    8e5a:	8d 91       	ld	r24, X+
    8e5c:	81 11       	cpse	r24, r1
    8e5e:	ee cf       	rjmp	.-36     	; 0x8e3c <get_fileinfo+0x194>
    8e60:	09 c0       	rjmp	.+18     	; 0x8e74 <get_fileinfo+0x1cc>
    8e62:	f8 01       	movw	r30, r16
    8e64:	62 8d       	ldd	r22, Z+26	; 0x1a
    8e66:	73 8d       	ldd	r23, Z+27	; 0x1b
    8e68:	fb 01       	movw	r30, r22
    8e6a:	44 85       	ldd	r20, Z+12	; 0x0c
    8e6c:	45 23       	and	r20, r21
    8e6e:	89 f3       	breq	.-30     	; 0x8e52 <get_fileinfo+0x1aa>
    8e70:	80 96       	adiw	r24, 0x20	; 32
    8e72:	ef cf       	rjmp	.-34     	; 0x8e52 <get_fileinfo+0x1aa>
    8e74:	fe 01       	movw	r30, r28
    8e76:	e2 0f       	add	r30, r18
    8e78:	f3 1f       	adc	r31, r19
    8e7a:	16 8a       	std	Z+22, r1	; 0x16
    8e7c:	f8 01       	movw	r30, r16
    8e7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    8e80:	93 8d       	ldd	r25, Z+27	; 0x1b
    8e82:	fc 01       	movw	r30, r24
    8e84:	84 85       	ldd	r24, Z+12	; 0x0c
    8e86:	81 11       	cpse	r24, r1
    8e88:	01 c0       	rjmp	.+2      	; 0x8e8c <get_fileinfo+0x1e4>
    8e8a:	19 86       	std	Y+9, r1	; 0x09
    8e8c:	f8 01       	movw	r30, r16
    8e8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    8e90:	93 8d       	ldd	r25, Z+27	; 0x1b
    8e92:	fc 01       	movw	r30, r24
    8e94:	83 85       	ldd	r24, Z+11	; 0x0b
    8e96:	88 87       	std	Y+8, r24	; 0x08
    8e98:	f8 01       	movw	r30, r16
    8e9a:	02 8d       	ldd	r16, Z+26	; 0x1a
    8e9c:	13 8d       	ldd	r17, Z+27	; 0x1b
    8e9e:	c8 01       	movw	r24, r16
    8ea0:	4c 96       	adiw	r24, 0x1c	; 28
    8ea2:	c6 dc       	rcall	.-1652   	; 0x8830 <ld_dword>
    8ea4:	68 83       	st	Y, r22
    8ea6:	79 83       	std	Y+1, r23	; 0x01
    8ea8:	8a 83       	std	Y+2, r24	; 0x02
    8eaa:	9b 83       	std	Y+3, r25	; 0x03
    8eac:	f8 01       	movw	r30, r16
    8eae:	86 89       	ldd	r24, Z+22	; 0x16
    8eb0:	97 89       	ldd	r25, Z+23	; 0x17
    8eb2:	9f 83       	std	Y+7, r25	; 0x07
    8eb4:	8e 83       	std	Y+6, r24	; 0x06
    8eb6:	80 8d       	ldd	r24, Z+24	; 0x18
    8eb8:	91 8d       	ldd	r25, Z+25	; 0x19
    8eba:	9d 83       	std	Y+5, r25	; 0x05
    8ebc:	8c 83       	std	Y+4, r24	; 0x04
    8ebe:	cd b7       	in	r28, 0x3d	; 61
    8ec0:	de b7       	in	r29, 0x3e	; 62
    8ec2:	e2 e1       	ldi	r30, 0x12	; 18
    8ec4:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

00008ec8 <ld_clust.isra.4>:
    8ec8:	fb 01       	movw	r30, r22
    8eca:	42 8d       	ldd	r20, Z+26	; 0x1a
    8ecc:	53 8d       	ldd	r21, Z+27	; 0x1b
    8ece:	60 e0       	ldi	r22, 0x00	; 0
    8ed0:	70 e0       	ldi	r23, 0x00	; 0
    8ed2:	83 30       	cpi	r24, 0x03	; 3
    8ed4:	59 f4       	brne	.+22     	; 0x8eec <ld_clust.isra.4+0x24>
    8ed6:	84 89       	ldd	r24, Z+20	; 0x14
    8ed8:	95 89       	ldd	r25, Z+21	; 0x15
    8eda:	a0 e0       	ldi	r26, 0x00	; 0
    8edc:	b0 e0       	ldi	r27, 0x00	; 0
    8ede:	dc 01       	movw	r26, r24
    8ee0:	99 27       	eor	r25, r25
    8ee2:	88 27       	eor	r24, r24
    8ee4:	48 2b       	or	r20, r24
    8ee6:	59 2b       	or	r21, r25
    8ee8:	6a 2b       	or	r22, r26
    8eea:	7b 2b       	or	r23, r27
    8eec:	cb 01       	movw	r24, r22
    8eee:	ba 01       	movw	r22, r20
    8ef0:	08 95       	ret

00008ef2 <st_clust.isra.5>:
    8ef2:	fb 01       	movw	r30, r22
    8ef4:	22 8f       	std	Z+26, r18	; 0x1a
    8ef6:	33 8f       	std	Z+27, r19	; 0x1b
    8ef8:	dc 01       	movw	r26, r24
    8efa:	8c 91       	ld	r24, X
    8efc:	83 30       	cpi	r24, 0x03	; 3
    8efe:	29 f4       	brne	.+10     	; 0x8f0a <st_clust.isra.5+0x18>
    8f00:	ca 01       	movw	r24, r20
    8f02:	aa 27       	eor	r26, r26
    8f04:	bb 27       	eor	r27, r27
    8f06:	84 8b       	std	Z+20, r24	; 0x14
    8f08:	95 8b       	std	Z+21, r25	; 0x15
    8f0a:	08 95       	ret

00008f0c <sync_window.part.6>:
    8f0c:	8f 92       	push	r8
    8f0e:	9f 92       	push	r9
    8f10:	af 92       	push	r10
    8f12:	bf 92       	push	r11
    8f14:	ef 92       	push	r14
    8f16:	ff 92       	push	r15
    8f18:	0f 93       	push	r16
    8f1a:	1f 93       	push	r17
    8f1c:	cf 93       	push	r28
    8f1e:	df 93       	push	r29
    8f20:	ec 01       	movw	r28, r24
    8f22:	7c 01       	movw	r14, r24
    8f24:	45 e3       	ldi	r20, 0x35	; 53
    8f26:	e4 0e       	add	r14, r20
    8f28:	f1 1c       	adc	r15, r1
    8f2a:	29 a9       	ldd	r18, Y+49	; 0x31
    8f2c:	3a a9       	ldd	r19, Y+50	; 0x32
    8f2e:	4b a9       	ldd	r20, Y+51	; 0x33
    8f30:	5c a9       	ldd	r21, Y+52	; 0x34
    8f32:	01 e0       	ldi	r16, 0x01	; 1
    8f34:	10 e0       	ldi	r17, 0x00	; 0
    8f36:	b7 01       	movw	r22, r14
    8f38:	89 81       	ldd	r24, Y+1	; 0x01
    8f3a:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    8f3e:	89 2b       	or	r24, r25
    8f40:	41 f5       	brne	.+80     	; 0x8f92 <sync_window.part.6+0x86>
    8f42:	1b 82       	std	Y+3, r1	; 0x03
    8f44:	09 a9       	ldd	r16, Y+49	; 0x31
    8f46:	1a a9       	ldd	r17, Y+50	; 0x32
    8f48:	2b a9       	ldd	r18, Y+51	; 0x33
    8f4a:	3c a9       	ldd	r19, Y+52	; 0x34
    8f4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8f4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8f50:	af 8d       	ldd	r26, Y+31	; 0x1f
    8f52:	b8 a1       	ldd	r27, Y+32	; 0x20
    8f54:	8d a0       	ldd	r8, Y+37	; 0x25
    8f56:	9e a0       	ldd	r9, Y+38	; 0x26
    8f58:	af a0       	ldd	r10, Y+39	; 0x27
    8f5a:	b8 a4       	ldd	r11, Y+40	; 0x28
    8f5c:	b9 01       	movw	r22, r18
    8f5e:	a8 01       	movw	r20, r16
    8f60:	48 19       	sub	r20, r8
    8f62:	59 09       	sbc	r21, r9
    8f64:	6a 09       	sbc	r22, r10
    8f66:	7b 09       	sbc	r23, r11
    8f68:	48 17       	cp	r20, r24
    8f6a:	59 07       	cpc	r21, r25
    8f6c:	6a 07       	cpc	r22, r26
    8f6e:	7b 07       	cpc	r23, r27
    8f70:	98 f4       	brcc	.+38     	; 0x8f98 <sync_window.part.6+0x8c>
    8f72:	6a 81       	ldd	r22, Y+2	; 0x02
    8f74:	62 30       	cpi	r22, 0x02	; 2
    8f76:	81 f4       	brne	.+32     	; 0x8f98 <sync_window.part.6+0x8c>
    8f78:	a9 01       	movw	r20, r18
    8f7a:	98 01       	movw	r18, r16
    8f7c:	28 0f       	add	r18, r24
    8f7e:	39 1f       	adc	r19, r25
    8f80:	4a 1f       	adc	r20, r26
    8f82:	5b 1f       	adc	r21, r27
    8f84:	01 e0       	ldi	r16, 0x01	; 1
    8f86:	10 e0       	ldi	r17, 0x00	; 0
    8f88:	b7 01       	movw	r22, r14
    8f8a:	89 81       	ldd	r24, Y+1	; 0x01
    8f8c:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    8f90:	03 c0       	rjmp	.+6      	; 0x8f98 <sync_window.part.6+0x8c>
    8f92:	81 e0       	ldi	r24, 0x01	; 1
    8f94:	90 e0       	ldi	r25, 0x00	; 0
    8f96:	02 c0       	rjmp	.+4      	; 0x8f9c <sync_window.part.6+0x90>
    8f98:	80 e0       	ldi	r24, 0x00	; 0
    8f9a:	90 e0       	ldi	r25, 0x00	; 0
    8f9c:	df 91       	pop	r29
    8f9e:	cf 91       	pop	r28
    8fa0:	1f 91       	pop	r17
    8fa2:	0f 91       	pop	r16
    8fa4:	ff 90       	pop	r15
    8fa6:	ef 90       	pop	r14
    8fa8:	bf 90       	pop	r11
    8faa:	af 90       	pop	r10
    8fac:	9f 90       	pop	r9
    8fae:	8f 90       	pop	r8
    8fb0:	08 95       	ret

00008fb2 <sync_fs>:
    8fb2:	ef 92       	push	r14
    8fb4:	ff 92       	push	r15
    8fb6:	0f 93       	push	r16
    8fb8:	1f 93       	push	r17
    8fba:	cf 93       	push	r28
    8fbc:	df 93       	push	r29
    8fbe:	ec 01       	movw	r28, r24
    8fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    8fc2:	81 11       	cpse	r24, r1
    8fc4:	05 c0       	rjmp	.+10     	; 0x8fd0 <sync_fs+0x1e>
    8fc6:	88 81       	ld	r24, Y
    8fc8:	83 30       	cpi	r24, 0x03	; 3
    8fca:	09 f0       	breq	.+2      	; 0x8fce <sync_fs+0x1c>
    8fcc:	52 c0       	rjmp	.+164    	; 0x9072 <sync_fs+0xc0>
    8fce:	06 c0       	rjmp	.+12     	; 0x8fdc <sync_fs+0x2a>
    8fd0:	ce 01       	movw	r24, r28
    8fd2:	9c df       	rcall	.-200    	; 0x8f0c <sync_window.part.6>
    8fd4:	00 97       	sbiw	r24, 0x00	; 0
    8fd6:	09 f0       	breq	.+2      	; 0x8fda <sync_fs+0x28>
    8fd8:	59 c0       	rjmp	.+178    	; 0x908c <sync_fs+0xda>
    8fda:	f5 cf       	rjmp	.-22     	; 0x8fc6 <sync_fs+0x14>
    8fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    8fde:	81 30       	cpi	r24, 0x01	; 1
    8fe0:	09 f0       	breq	.+2      	; 0x8fe4 <sync_fs+0x32>
    8fe2:	47 c0       	rjmp	.+142    	; 0x9072 <sync_fs+0xc0>
    8fe4:	40 e0       	ldi	r20, 0x00	; 0
    8fe6:	52 e0       	ldi	r21, 0x02	; 2
    8fe8:	60 e0       	ldi	r22, 0x00	; 0
    8fea:	70 e0       	ldi	r23, 0x00	; 0
    8fec:	7e 01       	movw	r14, r28
    8fee:	85 e3       	ldi	r24, 0x35	; 53
    8ff0:	e8 0e       	add	r14, r24
    8ff2:	f1 1c       	adc	r15, r1
    8ff4:	c7 01       	movw	r24, r14
    8ff6:	37 dc       	rcall	.-1938   	; 0x8866 <mem_set>
    8ff8:	85 e5       	ldi	r24, 0x55	; 85
    8ffa:	fe 01       	movw	r30, r28
    8ffc:	ed 5c       	subi	r30, 0xCD	; 205
    8ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    9000:	80 83       	st	Z, r24
    9002:	8a ea       	ldi	r24, 0xAA	; 170
    9004:	31 96       	adiw	r30, 0x01	; 1
    9006:	80 83       	st	Z, r24
    9008:	82 e5       	ldi	r24, 0x52	; 82
    900a:	8d ab       	std	Y+53, r24	; 0x35
    900c:	8e ab       	std	Y+54, r24	; 0x36
    900e:	81 e6       	ldi	r24, 0x61	; 97
    9010:	8f ab       	std	Y+55, r24	; 0x37
    9012:	91 e4       	ldi	r25, 0x41	; 65
    9014:	98 af       	std	Y+56, r25	; 0x38
    9016:	22 e7       	ldi	r18, 0x72	; 114
    9018:	7b 97       	sbiw	r30, 0x1b	; 27
    901a:	20 83       	st	Z, r18
    901c:	31 96       	adiw	r30, 0x01	; 1
    901e:	20 83       	st	Z, r18
    9020:	31 96       	adiw	r30, 0x01	; 1
    9022:	90 83       	st	Z, r25
    9024:	31 96       	adiw	r30, 0x01	; 1
    9026:	80 83       	st	Z, r24
    9028:	49 89       	ldd	r20, Y+17	; 0x11
    902a:	5a 89       	ldd	r21, Y+18	; 0x12
    902c:	6b 89       	ldd	r22, Y+19	; 0x13
    902e:	7c 89       	ldd	r23, Y+20	; 0x14
    9030:	ce 01       	movw	r24, r28
    9032:	83 5e       	subi	r24, 0xE3	; 227
    9034:	9d 4f       	sbci	r25, 0xFD	; 253
    9036:	11 dc       	rcall	.-2014   	; 0x885a <st_dword>
    9038:	4d 85       	ldd	r20, Y+13	; 0x0d
    903a:	5e 85       	ldd	r21, Y+14	; 0x0e
    903c:	6f 85       	ldd	r22, Y+15	; 0x0f
    903e:	78 89       	ldd	r23, Y+16	; 0x10
    9040:	ce 01       	movw	r24, r28
    9042:	8f 5d       	subi	r24, 0xDF	; 223
    9044:	9d 4f       	sbci	r25, 0xFD	; 253
    9046:	09 dc       	rcall	.-2030   	; 0x885a <st_dword>
    9048:	89 a1       	ldd	r24, Y+33	; 0x21
    904a:	9a a1       	ldd	r25, Y+34	; 0x22
    904c:	ab a1       	ldd	r26, Y+35	; 0x23
    904e:	bc a1       	ldd	r27, Y+36	; 0x24
    9050:	9c 01       	movw	r18, r24
    9052:	ad 01       	movw	r20, r26
    9054:	2f 5f       	subi	r18, 0xFF	; 255
    9056:	3f 4f       	sbci	r19, 0xFF	; 255
    9058:	4f 4f       	sbci	r20, 0xFF	; 255
    905a:	5f 4f       	sbci	r21, 0xFF	; 255
    905c:	29 ab       	std	Y+49, r18	; 0x31
    905e:	3a ab       	std	Y+50, r19	; 0x32
    9060:	4b ab       	std	Y+51, r20	; 0x33
    9062:	5c ab       	std	Y+52, r21	; 0x34
    9064:	01 e0       	ldi	r16, 0x01	; 1
    9066:	10 e0       	ldi	r17, 0x00	; 0
    9068:	b7 01       	movw	r22, r14
    906a:	89 81       	ldd	r24, Y+1	; 0x01
    906c:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    9070:	1c 82       	std	Y+4, r1	; 0x04
    9072:	40 e0       	ldi	r20, 0x00	; 0
    9074:	50 e0       	ldi	r21, 0x00	; 0
    9076:	60 e0       	ldi	r22, 0x00	; 0
    9078:	89 81       	ldd	r24, Y+1	; 0x01
    907a:	0e 94 5c 67 	call	0xceb8	; 0xceb8 <disk_ioctl>
    907e:	31 e0       	ldi	r19, 0x01	; 1
    9080:	20 e0       	ldi	r18, 0x00	; 0
    9082:	89 2b       	or	r24, r25
    9084:	09 f4       	brne	.+2      	; 0x9088 <sync_fs+0xd6>
    9086:	30 e0       	ldi	r19, 0x00	; 0
    9088:	83 2f       	mov	r24, r19
    908a:	92 2f       	mov	r25, r18
    908c:	cd b7       	in	r28, 0x3d	; 61
    908e:	de b7       	in	r29, 0x3e	; 62
    9090:	e6 e0       	ldi	r30, 0x06	; 6
    9092:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00009096 <dir_clear>:
    9096:	4f 92       	push	r4
    9098:	5f 92       	push	r5
    909a:	6f 92       	push	r6
    909c:	7f 92       	push	r7
    909e:	af 92       	push	r10
    90a0:	bf 92       	push	r11
    90a2:	cf 92       	push	r12
    90a4:	df 92       	push	r13
    90a6:	ef 92       	push	r14
    90a8:	ff 92       	push	r15
    90aa:	0f 93       	push	r16
    90ac:	1f 93       	push	r17
    90ae:	cf 93       	push	r28
    90b0:	df 93       	push	r29
    90b2:	ec 01       	movw	r28, r24
    90b4:	6a 01       	movw	r12, r20
    90b6:	7b 01       	movw	r14, r22
    90b8:	8b 81       	ldd	r24, Y+3	; 0x03
    90ba:	81 11       	cpse	r24, r1
    90bc:	28 c0       	rjmp	.+80     	; 0x910e <dir_clear+0x78>
    90be:	b7 01       	movw	r22, r14
    90c0:	a6 01       	movw	r20, r12
    90c2:	ce 01       	movw	r24, r28
    90c4:	6e dc       	rcall	.-1828   	; 0x89a2 <clst2sect>
    90c6:	2b 01       	movw	r4, r22
    90c8:	3c 01       	movw	r6, r24
    90ca:	69 ab       	std	Y+49, r22	; 0x31
    90cc:	7a ab       	std	Y+50, r23	; 0x32
    90ce:	8b ab       	std	Y+51, r24	; 0x33
    90d0:	9c ab       	std	Y+52, r25	; 0x34
    90d2:	5e 01       	movw	r10, r28
    90d4:	25 e3       	ldi	r18, 0x35	; 53
    90d6:	a2 0e       	add	r10, r18
    90d8:	b1 1c       	adc	r11, r1
    90da:	40 e0       	ldi	r20, 0x00	; 0
    90dc:	52 e0       	ldi	r21, 0x02	; 2
    90de:	60 e0       	ldi	r22, 0x00	; 0
    90e0:	70 e0       	ldi	r23, 0x00	; 0
    90e2:	c5 01       	movw	r24, r10
    90e4:	c0 db       	rcall	.-2176   	; 0x8866 <mem_set>
    90e6:	09 85       	ldd	r16, Y+9	; 0x09
    90e8:	1a 85       	ldd	r17, Y+10	; 0x0a
    90ea:	c8 01       	movw	r24, r16
    90ec:	a0 e0       	ldi	r26, 0x00	; 0
    90ee:	b0 e0       	ldi	r27, 0x00	; 0
    90f0:	39 e0       	ldi	r19, 0x09	; 9
    90f2:	88 0f       	add	r24, r24
    90f4:	99 1f       	adc	r25, r25
    90f6:	aa 1f       	adc	r26, r26
    90f8:	bb 1f       	adc	r27, r27
    90fa:	3a 95       	dec	r19
    90fc:	d1 f7       	brne	.-12     	; 0x90f2 <dir_clear+0x5c>
    90fe:	81 15       	cp	r24, r1
    9100:	90 48       	sbci	r25, 0x80	; 128
    9102:	a1 05       	cpc	r26, r1
    9104:	b1 05       	cpc	r27, r1
    9106:	50 f0       	brcs	.+20     	; 0x911c <dir_clear+0x86>
    9108:	00 e0       	ldi	r16, 0x00	; 0
    910a:	10 e8       	ldi	r17, 0x80	; 128
    910c:	14 c0       	rjmp	.+40     	; 0x9136 <dir_clear+0xa0>
    910e:	ce 01       	movw	r24, r28
    9110:	fd de       	rcall	.-518    	; 0x8f0c <sync_window.part.6>
    9112:	89 2b       	or	r24, r25
    9114:	a1 f2       	breq	.-88     	; 0x90be <dir_clear+0x28>
    9116:	81 e0       	ldi	r24, 0x01	; 1
    9118:	90 e0       	ldi	r25, 0x00	; 0
    911a:	56 c0       	rjmp	.+172    	; 0x91c8 <dir_clear+0x132>
    911c:	10 2f       	mov	r17, r16
    911e:	00 27       	eor	r16, r16
    9120:	11 0f       	add	r17, r17
    9122:	09 c0       	rjmp	.+18     	; 0x9136 <dir_clear+0xa0>
    9124:	c8 01       	movw	r24, r16
    9126:	0e 94 80 66 	call	0xcd00	; 0xcd00 <ff_memalloc>
    912a:	6c 01       	movw	r12, r24
    912c:	00 97       	sbiw	r24, 0x00	; 0
    912e:	09 f0       	breq	.+2      	; 0x9132 <dir_clear+0x9c>
    9130:	40 c0       	rjmp	.+128    	; 0x91b2 <dir_clear+0x11c>
    9132:	16 95       	lsr	r17
    9134:	07 95       	ror	r16
    9136:	01 30       	cpi	r16, 0x01	; 1
    9138:	82 e0       	ldi	r24, 0x02	; 2
    913a:	18 07       	cpc	r17, r24
    913c:	98 f7       	brcc	.-26     	; 0x9124 <dir_clear+0x8e>
    913e:	e1 2c       	mov	r14, r1
    9140:	f1 2c       	mov	r15, r1
    9142:	11 c0       	rjmp	.+34     	; 0x9166 <dir_clear+0xd0>
    9144:	01 e0       	ldi	r16, 0x01	; 1
    9146:	10 e0       	ldi	r17, 0x00	; 0
    9148:	a3 01       	movw	r20, r6
    914a:	92 01       	movw	r18, r4
    914c:	2e 0d       	add	r18, r14
    914e:	3f 1d       	adc	r19, r15
    9150:	41 1d       	adc	r20, r1
    9152:	51 1d       	adc	r21, r1
    9154:	b5 01       	movw	r22, r10
    9156:	89 81       	ldd	r24, Y+1	; 0x01
    9158:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    915c:	89 2b       	or	r24, r25
    915e:	01 f5       	brne	.+64     	; 0x91a0 <dir_clear+0x10a>
    9160:	2f ef       	ldi	r18, 0xFF	; 255
    9162:	e2 1a       	sub	r14, r18
    9164:	f2 0a       	sbc	r15, r18
    9166:	89 85       	ldd	r24, Y+9	; 0x09
    9168:	9a 85       	ldd	r25, Y+10	; 0x0a
    916a:	e8 16       	cp	r14, r24
    916c:	f9 06       	cpc	r15, r25
    916e:	50 f3       	brcs	.-44     	; 0x9144 <dir_clear+0xae>
    9170:	17 c0       	rjmp	.+46     	; 0x91a0 <dir_clear+0x10a>
    9172:	85 01       	movw	r16, r10
    9174:	a3 01       	movw	r20, r6
    9176:	92 01       	movw	r18, r4
    9178:	2e 0d       	add	r18, r14
    917a:	3f 1d       	adc	r19, r15
    917c:	41 1d       	adc	r20, r1
    917e:	51 1d       	adc	r21, r1
    9180:	b6 01       	movw	r22, r12
    9182:	89 81       	ldd	r24, Y+1	; 0x01
    9184:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    9188:	89 2b       	or	r24, r25
    918a:	39 f4       	brne	.+14     	; 0x919a <dir_clear+0x104>
    918c:	ea 0c       	add	r14, r10
    918e:	fb 1c       	adc	r15, r11
    9190:	89 85       	ldd	r24, Y+9	; 0x09
    9192:	9a 85       	ldd	r25, Y+10	; 0x0a
    9194:	e8 16       	cp	r14, r24
    9196:	f9 06       	cpc	r15, r25
    9198:	60 f3       	brcs	.-40     	; 0x9172 <dir_clear+0xdc>
    919a:	c6 01       	movw	r24, r12
    919c:	0e 94 83 66 	call	0xcd06	; 0xcd06 <ff_memfree>
    91a0:	81 e0       	ldi	r24, 0x01	; 1
    91a2:	90 e0       	ldi	r25, 0x00	; 0
    91a4:	29 85       	ldd	r18, Y+9	; 0x09
    91a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    91a8:	2e 15       	cp	r18, r14
    91aa:	3f 05       	cpc	r19, r15
    91ac:	69 f4       	brne	.+26     	; 0x91c8 <dir_clear+0x132>
    91ae:	80 e0       	ldi	r24, 0x00	; 0
    91b0:	0b c0       	rjmp	.+22     	; 0x91c8 <dir_clear+0x132>
    91b2:	a8 01       	movw	r20, r16
    91b4:	60 e0       	ldi	r22, 0x00	; 0
    91b6:	70 e0       	ldi	r23, 0x00	; 0
    91b8:	56 db       	rcall	.-2388   	; 0x8866 <mem_set>
    91ba:	58 01       	movw	r10, r16
    91bc:	ab 2c       	mov	r10, r11
    91be:	bb 24       	eor	r11, r11
    91c0:	a6 94       	lsr	r10
    91c2:	e1 2c       	mov	r14, r1
    91c4:	f1 2c       	mov	r15, r1
    91c6:	e4 cf       	rjmp	.-56     	; 0x9190 <dir_clear+0xfa>
    91c8:	df 91       	pop	r29
    91ca:	cf 91       	pop	r28
    91cc:	1f 91       	pop	r17
    91ce:	0f 91       	pop	r16
    91d0:	ff 90       	pop	r15
    91d2:	ef 90       	pop	r14
    91d4:	df 90       	pop	r13
    91d6:	cf 90       	pop	r12
    91d8:	bf 90       	pop	r11
    91da:	af 90       	pop	r10
    91dc:	7f 90       	pop	r7
    91de:	6f 90       	pop	r6
    91e0:	5f 90       	pop	r5
    91e2:	4f 90       	pop	r4
    91e4:	08 95       	ret

000091e6 <move_window>:
    91e6:	a0 e0       	ldi	r26, 0x00	; 0
    91e8:	b0 e0       	ldi	r27, 0x00	; 0
    91ea:	e9 ef       	ldi	r30, 0xF9	; 249
    91ec:	f8 e4       	ldi	r31, 0x48	; 72
    91ee:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    91f2:	ec 01       	movw	r28, r24
    91f4:	6a 01       	movw	r12, r20
    91f6:	7b 01       	movw	r14, r22
    91f8:	89 a9       	ldd	r24, Y+49	; 0x31
    91fa:	9a a9       	ldd	r25, Y+50	; 0x32
    91fc:	ab a9       	ldd	r26, Y+51	; 0x33
    91fe:	bc a9       	ldd	r27, Y+52	; 0x34
    9200:	84 17       	cp	r24, r20
    9202:	95 07       	cpc	r25, r21
    9204:	a6 07       	cpc	r26, r22
    9206:	b7 07       	cpc	r27, r23
    9208:	11 f1       	breq	.+68     	; 0x924e <move_window+0x68>
    920a:	8b 81       	ldd	r24, Y+3	; 0x03
    920c:	81 11       	cpse	r24, r1
    920e:	13 c0       	rjmp	.+38     	; 0x9236 <move_window+0x50>
    9210:	01 e0       	ldi	r16, 0x01	; 1
    9212:	10 e0       	ldi	r17, 0x00	; 0
    9214:	a7 01       	movw	r20, r14
    9216:	96 01       	movw	r18, r12
    9218:	be 01       	movw	r22, r28
    921a:	6b 5c       	subi	r22, 0xCB	; 203
    921c:	7f 4f       	sbci	r23, 0xFF	; 255
    921e:	89 81       	ldd	r24, Y+1	; 0x01
    9220:	0e 94 3c 67 	call	0xce78	; 0xce78 <disk_read>
    9224:	89 2b       	or	r24, r25
    9226:	61 f0       	breq	.+24     	; 0x9240 <move_window+0x5a>
    9228:	81 e0       	ldi	r24, 0x01	; 1
    922a:	90 e0       	ldi	r25, 0x00	; 0
    922c:	cc 24       	eor	r12, r12
    922e:	ca 94       	dec	r12
    9230:	dc 2c       	mov	r13, r12
    9232:	76 01       	movw	r14, r12
    9234:	07 c0       	rjmp	.+14     	; 0x9244 <move_window+0x5e>
    9236:	ce 01       	movw	r24, r28
    9238:	69 de       	rcall	.-814    	; 0x8f0c <sync_window.part.6>
    923a:	00 97       	sbiw	r24, 0x00	; 0
    923c:	51 f4       	brne	.+20     	; 0x9252 <move_window+0x6c>
    923e:	e8 cf       	rjmp	.-48     	; 0x9210 <move_window+0x2a>
    9240:	80 e0       	ldi	r24, 0x00	; 0
    9242:	90 e0       	ldi	r25, 0x00	; 0
    9244:	c9 aa       	std	Y+49, r12	; 0x31
    9246:	da aa       	std	Y+50, r13	; 0x32
    9248:	eb aa       	std	Y+51, r14	; 0x33
    924a:	fc aa       	std	Y+52, r15	; 0x34
    924c:	02 c0       	rjmp	.+4      	; 0x9252 <move_window+0x6c>
    924e:	80 e0       	ldi	r24, 0x00	; 0
    9250:	90 e0       	ldi	r25, 0x00	; 0
    9252:	cd b7       	in	r28, 0x3d	; 61
    9254:	de b7       	in	r29, 0x3e	; 62
    9256:	e8 e0       	ldi	r30, 0x08	; 8
    9258:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000925c <check_fs>:
    925c:	cf 93       	push	r28
    925e:	df 93       	push	r29
    9260:	ec 01       	movw	r28, r24
    9262:	1b 82       	std	Y+3, r1	; 0x03
    9264:	8f ef       	ldi	r24, 0xFF	; 255
    9266:	9f ef       	ldi	r25, 0xFF	; 255
    9268:	dc 01       	movw	r26, r24
    926a:	89 ab       	std	Y+49, r24	; 0x31
    926c:	9a ab       	std	Y+50, r25	; 0x32
    926e:	ab ab       	std	Y+51, r26	; 0x33
    9270:	bc ab       	std	Y+52, r27	; 0x34
    9272:	ce 01       	movw	r24, r28
    9274:	b8 df       	rcall	.-144    	; 0x91e6 <move_window>
    9276:	89 2b       	or	r24, r25
    9278:	19 f5       	brne	.+70     	; 0x92c0 <check_fs+0x64>
    927a:	fe 01       	movw	r30, r28
    927c:	ed 5c       	subi	r30, 0xCD	; 205
    927e:	fd 4f       	sbci	r31, 0xFD	; 253
    9280:	80 81       	ld	r24, Z
    9282:	91 81       	ldd	r25, Z+1	; 0x01
    9284:	85 35       	cpi	r24, 0x55	; 85
    9286:	9a 4a       	sbci	r25, 0xAA	; 170
    9288:	f1 f4       	brne	.+60     	; 0x92c6 <check_fs+0x6a>
    928a:	8d a9       	ldd	r24, Y+53	; 0x35
    928c:	8b 3e       	cpi	r24, 0xEB	; 235
    928e:	19 f0       	breq	.+6      	; 0x9296 <check_fs+0x3a>
    9290:	88 5e       	subi	r24, 0xE8	; 232
    9292:	82 30       	cpi	r24, 0x02	; 2
    9294:	f0 f4       	brcc	.+60     	; 0x92d2 <check_fs+0x76>
    9296:	43 e0       	ldi	r20, 0x03	; 3
    9298:	50 e0       	ldi	r21, 0x00	; 0
    929a:	61 ec       	ldi	r22, 0xC1	; 193
    929c:	78 e0       	ldi	r23, 0x08	; 8
    929e:	ce 01       	movw	r24, r28
    92a0:	85 59       	subi	r24, 0x95	; 149
    92a2:	9f 4f       	sbci	r25, 0xFF	; 255
    92a4:	e9 da       	rcall	.-2606   	; 0x8878 <mem_cmp>
    92a6:	89 2b       	or	r24, r25
    92a8:	89 f0       	breq	.+34     	; 0x92cc <check_fs+0x70>
    92aa:	45 e0       	ldi	r20, 0x05	; 5
    92ac:	50 e0       	ldi	r21, 0x00	; 0
    92ae:	6c e1       	ldi	r22, 0x1C	; 28
    92b0:	74 e0       	ldi	r23, 0x04	; 4
    92b2:	ce 01       	movw	r24, r28
    92b4:	89 57       	subi	r24, 0x79	; 121
    92b6:	9f 4f       	sbci	r25, 0xFF	; 255
    92b8:	df da       	rcall	.-2626   	; 0x8878 <mem_cmp>
    92ba:	89 2b       	or	r24, r25
    92bc:	51 f4       	brne	.+20     	; 0x92d2 <check_fs+0x76>
    92be:	06 c0       	rjmp	.+12     	; 0x92cc <check_fs+0x70>
    92c0:	84 e0       	ldi	r24, 0x04	; 4
    92c2:	90 e0       	ldi	r25, 0x00	; 0
    92c4:	08 c0       	rjmp	.+16     	; 0x92d6 <check_fs+0x7a>
    92c6:	83 e0       	ldi	r24, 0x03	; 3
    92c8:	90 e0       	ldi	r25, 0x00	; 0
    92ca:	05 c0       	rjmp	.+10     	; 0x92d6 <check_fs+0x7a>
    92cc:	80 e0       	ldi	r24, 0x00	; 0
    92ce:	90 e0       	ldi	r25, 0x00	; 0
    92d0:	02 c0       	rjmp	.+4      	; 0x92d6 <check_fs+0x7a>
    92d2:	82 e0       	ldi	r24, 0x02	; 2
    92d4:	90 e0       	ldi	r25, 0x00	; 0
    92d6:	df 91       	pop	r29
    92d8:	cf 91       	pop	r28
    92da:	08 95       	ret

000092dc <mount_volume>:
    92dc:	a0 e2       	ldi	r26, 0x20	; 32
    92de:	b0 e0       	ldi	r27, 0x00	; 0
    92e0:	e4 e7       	ldi	r30, 0x74	; 116
    92e2:	f9 e4       	ldi	r31, 0x49	; 73
    92e4:	0c 94 c4 df 	jmp	0x1bf88	; 0x1bf88 <__prologue_saves__+0x4>
    92e8:	5b 01       	movw	r10, r22
    92ea:	f4 2e       	mov	r15, r20
    92ec:	db 01       	movw	r26, r22
    92ee:	1d 92       	st	X+, r1
    92f0:	1c 92       	st	X, r1
    92f2:	ca db       	rcall	.-2156   	; 0x8a88 <get_ldnumber>
    92f4:	6c 01       	movw	r12, r24
    92f6:	97 fd       	sbrc	r25, 7
    92f8:	39 c2       	rjmp	.+1138   	; 0x976c <mount_volume+0x490>
    92fa:	fc 01       	movw	r30, r24
    92fc:	ee 0f       	add	r30, r30
    92fe:	ff 1f       	adc	r31, r31
    9300:	e1 5d       	subi	r30, 0xD1	; 209
    9302:	f7 4e       	sbci	r31, 0xE7	; 231
    9304:	00 81       	ld	r16, Z
    9306:	11 81       	ldd	r17, Z+1	; 0x01
    9308:	01 15       	cp	r16, r1
    930a:	11 05       	cpc	r17, r1
    930c:	09 f4       	brne	.+2      	; 0x9310 <mount_volume+0x34>
    930e:	31 c2       	rjmp	.+1122   	; 0x9772 <mount_volume+0x496>
    9310:	f5 01       	movw	r30, r10
    9312:	11 83       	std	Z+1, r17	; 0x01
    9314:	00 83       	st	Z, r16
    9316:	ff 2d       	mov	r31, r15
    9318:	fe 7f       	andi	r31, 0xFE	; 254
    931a:	ff 2e       	mov	r15, r31
    931c:	d8 01       	movw	r26, r16
    931e:	8c 91       	ld	r24, X
    9320:	88 23       	and	r24, r24
    9322:	71 f0       	breq	.+28     	; 0x9340 <mount_volume+0x64>
    9324:	f8 01       	movw	r30, r16
    9326:	81 81       	ldd	r24, Z+1	; 0x01
    9328:	0e 94 30 67 	call	0xce60	; 0xce60 <disk_status>
    932c:	80 fd       	sbrc	r24, 0
    932e:	08 c0       	rjmp	.+16     	; 0x9340 <mount_volume+0x64>
    9330:	ff 20       	and	r15, r15
    9332:	09 f4       	brne	.+2      	; 0x9336 <mount_volume+0x5a>
    9334:	21 c2       	rjmp	.+1090   	; 0x9778 <mount_volume+0x49c>
    9336:	82 ff       	sbrs	r24, 2
    9338:	1f c2       	rjmp	.+1086   	; 0x9778 <mount_volume+0x49c>
    933a:	8a e0       	ldi	r24, 0x0A	; 10
    933c:	90 e0       	ldi	r25, 0x00	; 0
    933e:	24 c2       	rjmp	.+1096   	; 0x9788 <mount_volume+0x4ac>
    9340:	d8 01       	movw	r26, r16
    9342:	1c 92       	st	X, r1
    9344:	f8 01       	movw	r30, r16
    9346:	c1 82       	std	Z+1, r12	; 0x01
    9348:	8c 2d       	mov	r24, r12
    934a:	0e 94 36 67 	call	0xce6c	; 0xce6c <disk_initialize>
    934e:	80 fd       	sbrc	r24, 0
    9350:	16 c2       	rjmp	.+1068   	; 0x977e <mount_volume+0x4a2>
    9352:	ff 20       	and	r15, r15
    9354:	11 f0       	breq	.+4      	; 0x935a <mount_volume+0x7e>
    9356:	82 fd       	sbrc	r24, 2
    9358:	f0 cf       	rjmp	.-32     	; 0x933a <mount_volume+0x5e>
    935a:	40 e0       	ldi	r20, 0x00	; 0
    935c:	50 e0       	ldi	r21, 0x00	; 0
    935e:	ba 01       	movw	r22, r20
    9360:	c8 01       	movw	r24, r16
    9362:	7c df       	rcall	.-264    	; 0x925c <check_fs>
    9364:	82 30       	cpi	r24, 0x02	; 2
    9366:	91 05       	cpc	r25, r1
    9368:	b9 f5       	brne	.+110    	; 0x93d8 <mount_volume+0xfc>
    936a:	68 01       	movw	r12, r16
    936c:	f5 e0       	ldi	r31, 0x05	; 5
    936e:	cf 1a       	sub	r12, r31
    9370:	fe ef       	ldi	r31, 0xFE	; 254
    9372:	df 0a       	sbc	r13, r31
    9374:	9e 01       	movw	r18, r28
    9376:	2f 5f       	subi	r18, 0xFF	; 255
    9378:	3f 4f       	sbci	r19, 0xFF	; 255
    937a:	79 01       	movw	r14, r18
    937c:	48 01       	movw	r8, r16
    937e:	35 ec       	ldi	r19, 0xC5	; 197
    9380:	83 1a       	sub	r8, r19
    9382:	3d ef       	ldi	r19, 0xFD	; 253
    9384:	93 0a       	sbc	r9, r19
    9386:	57 01       	movw	r10, r14
    9388:	c6 01       	movw	r24, r12
    938a:	52 da       	rcall	.-2908   	; 0x8830 <ld_dword>
    938c:	d5 01       	movw	r26, r10
    938e:	6d 93       	st	X+, r22
    9390:	7d 93       	st	X+, r23
    9392:	8d 93       	st	X+, r24
    9394:	9d 93       	st	X+, r25
    9396:	5d 01       	movw	r10, r26
    9398:	b0 e1       	ldi	r27, 0x10	; 16
    939a:	cb 0e       	add	r12, r27
    939c:	d1 1c       	adc	r13, r1
    939e:	c8 14       	cp	r12, r8
    93a0:	d9 04       	cpc	r13, r9
    93a2:	91 f7       	brne	.-28     	; 0x9388 <mount_volume+0xac>
    93a4:	6e 01       	movw	r12, r28
    93a6:	e1 e1       	ldi	r30, 0x11	; 17
    93a8:	ce 0e       	add	r12, r30
    93aa:	d1 1c       	adc	r13, r1
    93ac:	d7 01       	movw	r26, r14
    93ae:	4d 91       	ld	r20, X+
    93b0:	5d 91       	ld	r21, X+
    93b2:	6d 91       	ld	r22, X+
    93b4:	7d 91       	ld	r23, X+
    93b6:	7d 01       	movw	r14, r26
    93b8:	41 15       	cp	r20, r1
    93ba:	51 05       	cpc	r21, r1
    93bc:	61 05       	cpc	r22, r1
    93be:	71 05       	cpc	r23, r1
    93c0:	31 f0       	breq	.+12     	; 0x93ce <mount_volume+0xf2>
    93c2:	c8 01       	movw	r24, r16
    93c4:	4b df       	rcall	.-362    	; 0x925c <check_fs>
    93c6:	82 30       	cpi	r24, 0x02	; 2
    93c8:	91 05       	cpc	r25, r1
    93ca:	18 f4       	brcc	.+6      	; 0x93d2 <mount_volume+0xf6>
    93cc:	05 c0       	rjmp	.+10     	; 0x93d8 <mount_volume+0xfc>
    93ce:	83 e0       	ldi	r24, 0x03	; 3
    93d0:	90 e0       	ldi	r25, 0x00	; 0
    93d2:	ce 14       	cp	r12, r14
    93d4:	df 04       	cpc	r13, r15
    93d6:	51 f7       	brne	.-44     	; 0x93ac <mount_volume+0xd0>
    93d8:	84 30       	cpi	r24, 0x04	; 4
    93da:	91 05       	cpc	r25, r1
    93dc:	09 f4       	brne	.+2      	; 0x93e0 <mount_volume+0x104>
    93de:	d2 c1       	rjmp	.+932    	; 0x9784 <mount_volume+0x4a8>
    93e0:	02 97       	sbiw	r24, 0x02	; 2
    93e2:	18 f0       	brcs	.+6      	; 0x93ea <mount_volume+0x10e>
    93e4:	8d e0       	ldi	r24, 0x0D	; 13
    93e6:	90 e0       	ldi	r25, 0x00	; 0
    93e8:	cf c1       	rjmp	.+926    	; 0x9788 <mount_volume+0x4ac>
    93ea:	f8 01       	movw	r30, r16
    93ec:	e0 5c       	subi	r30, 0xC0	; 192
    93ee:	ff 4f       	sbci	r31, 0xFF	; 255
    93f0:	80 81       	ld	r24, Z
    93f2:	91 81       	ldd	r25, Z+1	; 0x01
    93f4:	81 15       	cp	r24, r1
    93f6:	92 40       	sbci	r25, 0x02	; 2
    93f8:	a9 f7       	brne	.-22     	; 0x93e4 <mount_volume+0x108>
    93fa:	3b 96       	adiw	r30, 0x0b	; 11
    93fc:	40 80       	ld	r4, Z
    93fe:	51 80       	ldd	r5, Z+1	; 0x01
    9400:	41 14       	cp	r4, r1
    9402:	51 04       	cpc	r5, r1
    9404:	19 f0       	breq	.+6      	; 0x940c <mount_volume+0x130>
    9406:	61 2c       	mov	r6, r1
    9408:	71 2c       	mov	r7, r1
    940a:	06 c0       	rjmp	.+12     	; 0x9418 <mount_volume+0x13c>
    940c:	c8 01       	movw	r24, r16
    940e:	87 5a       	subi	r24, 0xA7	; 167
    9410:	9f 4f       	sbci	r25, 0xFF	; 255
    9412:	0e da       	rcall	.-3044   	; 0x8830 <ld_dword>
    9414:	2b 01       	movw	r4, r22
    9416:	3c 01       	movw	r6, r24
    9418:	f8 01       	movw	r30, r16
    941a:	21 a9       	ldd	r18, Z+49	; 0x31
    941c:	32 a9       	ldd	r19, Z+50	; 0x32
    941e:	43 a9       	ldd	r20, Z+51	; 0x33
    9420:	54 a9       	ldd	r21, Z+52	; 0x34
    9422:	29 8b       	std	Y+17, r18	; 0x11
    9424:	3a 8b       	std	Y+18, r19	; 0x12
    9426:	4b 8b       	std	Y+19, r20	; 0x13
    9428:	5c 8b       	std	Y+20, r21	; 0x14
    942a:	45 8e       	std	Z+29, r4	; 0x1d
    942c:	56 8e       	std	Z+30, r5	; 0x1e
    942e:	67 8e       	std	Z+31, r6	; 0x1f
    9430:	70 a2       	std	Z+32, r7	; 0x20
    9432:	eb 5b       	subi	r30, 0xBB	; 187
    9434:	ff 4f       	sbci	r31, 0xFF	; 255
    9436:	a0 80       	ld	r10, Z
    9438:	f8 01       	movw	r30, r16
    943a:	a2 82       	std	Z+2, r10	; 0x02
    943c:	8f ef       	ldi	r24, 0xFF	; 255
    943e:	8a 0d       	add	r24, r10
    9440:	82 30       	cpi	r24, 0x02	; 2
    9442:	80 f6       	brcc	.-96     	; 0x93e4 <mount_volume+0x108>
    9444:	ee 5b       	subi	r30, 0xBE	; 190
    9446:	ff 4f       	sbci	r31, 0xFF	; 255
    9448:	b0 80       	ld	r11, Z
    944a:	8b 2d       	mov	r24, r11
    944c:	90 e0       	ldi	r25, 0x00	; 0
    944e:	f8 01       	movw	r30, r16
    9450:	92 87       	std	Z+10, r25	; 0x0a
    9452:	81 87       	std	Z+9, r24	; 0x09
    9454:	00 97       	sbiw	r24, 0x00	; 0
    9456:	31 f2       	breq	.-116    	; 0x93e4 <mount_volume+0x108>
    9458:	9c 01       	movw	r18, r24
    945a:	21 50       	subi	r18, 0x01	; 1
    945c:	31 09       	sbc	r19, r1
    945e:	82 23       	and	r24, r18
    9460:	93 23       	and	r25, r19
    9462:	89 2b       	or	r24, r25
    9464:	09 f0       	breq	.+2      	; 0x9468 <mount_volume+0x18c>
    9466:	be cf       	rjmp	.-132    	; 0x93e4 <mount_volume+0x108>
    9468:	ea 5b       	subi	r30, 0xBA	; 186
    946a:	ff 4f       	sbci	r31, 0xFF	; 255
    946c:	80 80       	ld	r8, Z
    946e:	91 80       	ldd	r9, Z+1	; 0x01
    9470:	f8 01       	movw	r30, r16
    9472:	90 86       	std	Z+8, r9	; 0x08
    9474:	87 82       	std	Z+7, r8	; 0x07
    9476:	c4 01       	movw	r24, r8
    9478:	8f 70       	andi	r24, 0x0F	; 15
    947a:	99 27       	eor	r25, r25
    947c:	89 2b       	or	r24, r25
    947e:	09 f0       	breq	.+2      	; 0x9482 <mount_volume+0x1a6>
    9480:	b1 cf       	rjmp	.-158    	; 0x93e4 <mount_volume+0x108>
    9482:	e8 5b       	subi	r30, 0xB8	; 184
    9484:	ff 4f       	sbci	r31, 0xFF	; 255
    9486:	80 81       	ld	r24, Z
    9488:	91 81       	ldd	r25, Z+1	; 0x01
    948a:	6c 01       	movw	r12, r24
    948c:	e1 2c       	mov	r14, r1
    948e:	f1 2c       	mov	r15, r1
    9490:	89 2b       	or	r24, r25
    9492:	31 f4       	brne	.+12     	; 0x94a0 <mount_volume+0x1c4>
    9494:	c8 01       	movw	r24, r16
    9496:	8b 5a       	subi	r24, 0xAB	; 171
    9498:	9f 4f       	sbci	r25, 0xFF	; 255
    949a:	ca d9       	rcall	.-3180   	; 0x8830 <ld_dword>
    949c:	6b 01       	movw	r12, r22
    949e:	7c 01       	movw	r14, r24
    94a0:	f8 01       	movw	r30, r16
    94a2:	ed 5b       	subi	r30, 0xBD	; 189
    94a4:	ff 4f       	sbci	r31, 0xFF	; 255
    94a6:	01 90       	ld	r0, Z+
    94a8:	f0 81       	ld	r31, Z
    94aa:	e0 2d       	mov	r30, r0
    94ac:	30 97       	sbiw	r30, 0x00	; 0
    94ae:	09 f4       	brne	.+2      	; 0x94b2 <mount_volume+0x1d6>
    94b0:	99 cf       	rjmp	.-206    	; 0x93e4 <mount_volume+0x108>
    94b2:	aa 2d       	mov	r26, r10
    94b4:	b0 e0       	ldi	r27, 0x00	; 0
    94b6:	a3 01       	movw	r20, r6
    94b8:	92 01       	movw	r18, r4
    94ba:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
    94be:	69 8f       	std	Y+25, r22	; 0x19
    94c0:	7a 8f       	std	Y+26, r23	; 0x1a
    94c2:	8b 8f       	std	Y+27, r24	; 0x1b
    94c4:	9c 8f       	std	Y+28, r25	; 0x1c
    94c6:	9f 01       	movw	r18, r30
    94c8:	40 e0       	ldi	r20, 0x00	; 0
    94ca:	50 e0       	ldi	r21, 0x00	; 0
    94cc:	2d 8f       	std	Y+29, r18	; 0x1d
    94ce:	3e 8f       	std	Y+30, r19	; 0x1e
    94d0:	4f 8f       	std	Y+31, r20	; 0x1f
    94d2:	58 a3       	std	Y+32, r21	; 0x20
    94d4:	c4 01       	movw	r24, r8
    94d6:	f4 e0       	ldi	r31, 0x04	; 4
    94d8:	96 95       	lsr	r25
    94da:	87 95       	ror	r24
    94dc:	fa 95       	dec	r31
    94de:	e1 f7       	brne	.-8      	; 0x94d8 <mount_volume+0x1fc>
    94e0:	28 0f       	add	r18, r24
    94e2:	39 1f       	adc	r19, r25
    94e4:	41 1d       	adc	r20, r1
    94e6:	51 1d       	adc	r21, r1
    94e8:	da 01       	movw	r26, r20
    94ea:	c9 01       	movw	r24, r18
    94ec:	29 8d       	ldd	r18, Y+25	; 0x19
    94ee:	3a 8d       	ldd	r19, Y+26	; 0x1a
    94f0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    94f2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    94f4:	28 0f       	add	r18, r24
    94f6:	39 1f       	adc	r19, r25
    94f8:	4a 1f       	adc	r20, r26
    94fa:	5b 1f       	adc	r21, r27
    94fc:	2d 8b       	std	Y+21, r18	; 0x15
    94fe:	3e 8b       	std	Y+22, r19	; 0x16
    9500:	4f 8b       	std	Y+23, r20	; 0x17
    9502:	58 8f       	std	Y+24, r21	; 0x18
    9504:	c2 16       	cp	r12, r18
    9506:	d3 06       	cpc	r13, r19
    9508:	e4 06       	cpc	r14, r20
    950a:	f5 06       	cpc	r15, r21
    950c:	08 f4       	brcc	.+2      	; 0x9510 <mount_volume+0x234>
    950e:	6a cf       	rjmp	.-300    	; 0x93e4 <mount_volume+0x108>
    9510:	c7 01       	movw	r24, r14
    9512:	b6 01       	movw	r22, r12
    9514:	62 1b       	sub	r22, r18
    9516:	73 0b       	sbc	r23, r19
    9518:	84 0b       	sbc	r24, r20
    951a:	95 0b       	sbc	r25, r21
    951c:	2b 2d       	mov	r18, r11
    951e:	30 e0       	ldi	r19, 0x00	; 0
    9520:	40 e0       	ldi	r20, 0x00	; 0
    9522:	50 e0       	ldi	r21, 0x00	; 0
    9524:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    9528:	da 01       	movw	r26, r20
    952a:	c9 01       	movw	r24, r18
    952c:	01 97       	sbiw	r24, 0x01	; 1
    952e:	a1 09       	sbc	r26, r1
    9530:	b1 09       	sbc	r27, r1
    9532:	85 3f       	cpi	r24, 0xF5	; 245
    9534:	9f 4f       	sbci	r25, 0xFF	; 255
    9536:	af 4f       	sbci	r26, 0xFF	; 255
    9538:	bf 40       	sbci	r27, 0x0F	; 15
    953a:	08 f0       	brcs	.+2      	; 0x953e <mount_volume+0x262>
    953c:	53 cf       	rjmp	.-346    	; 0x93e4 <mount_volume+0x108>
    953e:	26 3f       	cpi	r18, 0xF6	; 246
    9540:	8f ef       	ldi	r24, 0xFF	; 255
    9542:	38 07       	cpc	r19, r24
    9544:	41 05       	cpc	r20, r1
    9546:	51 05       	cpc	r21, r1
    9548:	50 f4       	brcc	.+20     	; 0x955e <mount_volume+0x282>
    954a:	26 3f       	cpi	r18, 0xF6	; 246
    954c:	9f e0       	ldi	r25, 0x0F	; 15
    954e:	39 07       	cpc	r19, r25
    9550:	41 05       	cpc	r20, r1
    9552:	51 05       	cpc	r21, r1
    9554:	40 f4       	brcc	.+16     	; 0x9566 <mount_volume+0x28a>
    9556:	aa 24       	eor	r10, r10
    9558:	a3 94       	inc	r10
    955a:	b1 2c       	mov	r11, r1
    955c:	07 c0       	rjmp	.+14     	; 0x956c <mount_volume+0x290>
    955e:	73 e0       	ldi	r23, 0x03	; 3
    9560:	a7 2e       	mov	r10, r23
    9562:	b1 2c       	mov	r11, r1
    9564:	03 c0       	rjmp	.+6      	; 0x956c <mount_volume+0x290>
    9566:	62 e0       	ldi	r22, 0x02	; 2
    9568:	a6 2e       	mov	r10, r22
    956a:	b1 2c       	mov	r11, r1
    956c:	69 01       	movw	r12, r18
    956e:	7a 01       	movw	r14, r20
    9570:	a2 e0       	ldi	r26, 0x02	; 2
    9572:	ca 0e       	add	r12, r26
    9574:	d1 1c       	adc	r13, r1
    9576:	e1 1c       	adc	r14, r1
    9578:	f1 1c       	adc	r15, r1
    957a:	f8 01       	movw	r30, r16
    957c:	c1 8e       	std	Z+25, r12	; 0x19
    957e:	d2 8e       	std	Z+26, r13	; 0x1a
    9580:	e3 8e       	std	Z+27, r14	; 0x1b
    9582:	f4 8e       	std	Z+28, r15	; 0x1c
    9584:	29 89       	ldd	r18, Y+17	; 0x11
    9586:	3a 89       	ldd	r19, Y+18	; 0x12
    9588:	4b 89       	ldd	r20, Y+19	; 0x13
    958a:	5c 89       	ldd	r21, Y+20	; 0x14
    958c:	21 a3       	std	Z+33, r18	; 0x21
    958e:	32 a3       	std	Z+34, r19	; 0x22
    9590:	43 a3       	std	Z+35, r20	; 0x23
    9592:	54 a3       	std	Z+36, r21	; 0x24
    9594:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9596:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9598:	af 8d       	ldd	r26, Y+31	; 0x1f
    959a:	b8 a1       	ldd	r27, Y+32	; 0x20
    959c:	28 0f       	add	r18, r24
    959e:	39 1f       	adc	r19, r25
    95a0:	4a 1f       	adc	r20, r26
    95a2:	5b 1f       	adc	r21, r27
    95a4:	2d 8f       	std	Y+29, r18	; 0x1d
    95a6:	3e 8f       	std	Y+30, r19	; 0x1e
    95a8:	4f 8f       	std	Y+31, r20	; 0x1f
    95aa:	58 a3       	std	Y+32, r21	; 0x20
    95ac:	25 a3       	std	Z+37, r18	; 0x25
    95ae:	36 a3       	std	Z+38, r19	; 0x26
    95b0:	47 a3       	std	Z+39, r20	; 0x27
    95b2:	50 a7       	std	Z+40, r21	; 0x28
    95b4:	49 89       	ldd	r20, Y+17	; 0x11
    95b6:	5a 89       	ldd	r21, Y+18	; 0x12
    95b8:	6b 89       	ldd	r22, Y+19	; 0x13
    95ba:	7c 89       	ldd	r23, Y+20	; 0x14
    95bc:	8d 89       	ldd	r24, Y+21	; 0x15
    95be:	9e 89       	ldd	r25, Y+22	; 0x16
    95c0:	af 89       	ldd	r26, Y+23	; 0x17
    95c2:	b8 8d       	ldd	r27, Y+24	; 0x18
    95c4:	48 0f       	add	r20, r24
    95c6:	59 1f       	adc	r21, r25
    95c8:	6a 1f       	adc	r22, r26
    95ca:	7b 1f       	adc	r23, r27
    95cc:	45 a7       	std	Z+45, r20	; 0x2d
    95ce:	56 a7       	std	Z+46, r21	; 0x2e
    95d0:	67 a7       	std	Z+47, r22	; 0x2f
    95d2:	70 ab       	std	Z+48, r23	; 0x30
    95d4:	f3 e0       	ldi	r31, 0x03	; 3
    95d6:	af 16       	cp	r10, r31
    95d8:	b1 04       	cpc	r11, r1
    95da:	e9 f4       	brne	.+58     	; 0x9616 <mount_volume+0x33a>
    95dc:	f8 01       	movw	r30, r16
    95de:	e1 5a       	subi	r30, 0xA1	; 161
    95e0:	ff 4f       	sbci	r31, 0xFF	; 255
    95e2:	80 81       	ld	r24, Z
    95e4:	91 81       	ldd	r25, Z+1	; 0x01
    95e6:	89 2b       	or	r24, r25
    95e8:	09 f0       	breq	.+2      	; 0x95ec <mount_volume+0x310>
    95ea:	fc ce       	rjmp	.-520    	; 0x93e4 <mount_volume+0x108>
    95ec:	81 14       	cp	r8, r1
    95ee:	91 04       	cpc	r9, r1
    95f0:	09 f0       	breq	.+2      	; 0x95f4 <mount_volume+0x318>
    95f2:	f8 ce       	rjmp	.-528    	; 0x93e4 <mount_volume+0x108>
    95f4:	c8 01       	movw	r24, r16
    95f6:	8f 59       	subi	r24, 0x9F	; 159
    95f8:	9f 4f       	sbci	r25, 0xFF	; 255
    95fa:	1a d9       	rcall	.-3532   	; 0x8830 <ld_dword>
    95fc:	f8 01       	movw	r30, r16
    95fe:	61 a7       	std	Z+41, r22	; 0x29
    9600:	72 a7       	std	Z+42, r23	; 0x2a
    9602:	83 a7       	std	Z+43, r24	; 0x2b
    9604:	94 a7       	std	Z+44, r25	; 0x2c
    9606:	42 e0       	ldi	r20, 0x02	; 2
    9608:	cc 0c       	add	r12, r12
    960a:	dd 1c       	adc	r13, r13
    960c:	ee 1c       	adc	r14, r14
    960e:	ff 1c       	adc	r15, r15
    9610:	4a 95       	dec	r20
    9612:	d1 f7       	brne	.-12     	; 0x9608 <mount_volume+0x32c>
    9614:	33 c0       	rjmp	.+102    	; 0x967c <mount_volume+0x3a0>
    9616:	81 14       	cp	r8, r1
    9618:	91 04       	cpc	r9, r1
    961a:	09 f4       	brne	.+2      	; 0x961e <mount_volume+0x342>
    961c:	e3 ce       	rjmp	.-570    	; 0x93e4 <mount_volume+0x108>
    961e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9620:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9622:	af 8d       	ldd	r26, Y+31	; 0x1f
    9624:	b8 a1       	ldd	r27, Y+32	; 0x20
    9626:	29 8d       	ldd	r18, Y+25	; 0x19
    9628:	3a 8d       	ldd	r19, Y+26	; 0x1a
    962a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    962c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    962e:	82 0f       	add	r24, r18
    9630:	93 1f       	adc	r25, r19
    9632:	a4 1f       	adc	r26, r20
    9634:	b5 1f       	adc	r27, r21
    9636:	f8 01       	movw	r30, r16
    9638:	81 a7       	std	Z+41, r24	; 0x29
    963a:	92 a7       	std	Z+42, r25	; 0x2a
    963c:	a3 a7       	std	Z+43, r26	; 0x2b
    963e:	b4 a7       	std	Z+44, r27	; 0x2c
    9640:	f2 e0       	ldi	r31, 0x02	; 2
    9642:	af 16       	cp	r10, r31
    9644:	b1 04       	cpc	r11, r1
    9646:	29 f4       	brne	.+10     	; 0x9652 <mount_volume+0x376>
    9648:	cc 0c       	add	r12, r12
    964a:	dd 1c       	adc	r13, r13
    964c:	ee 1c       	adc	r14, r14
    964e:	ff 1c       	adc	r15, r15
    9650:	15 c0       	rjmp	.+42     	; 0x967c <mount_volume+0x3a0>
    9652:	a3 e0       	ldi	r26, 0x03	; 3
    9654:	b0 e0       	ldi	r27, 0x00	; 0
    9656:	a7 01       	movw	r20, r14
    9658:	96 01       	movw	r18, r12
    965a:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
    965e:	dc 01       	movw	r26, r24
    9660:	cb 01       	movw	r24, r22
    9662:	b6 95       	lsr	r27
    9664:	a7 95       	ror	r26
    9666:	97 95       	ror	r25
    9668:	87 95       	ror	r24
    966a:	21 e0       	ldi	r18, 0x01	; 1
    966c:	c2 22       	and	r12, r18
    966e:	dd 24       	eor	r13, r13
    9670:	ee 24       	eor	r14, r14
    9672:	ff 24       	eor	r15, r15
    9674:	c8 0e       	add	r12, r24
    9676:	d9 1e       	adc	r13, r25
    9678:	ea 1e       	adc	r14, r26
    967a:	fb 1e       	adc	r15, r27
    967c:	3f ef       	ldi	r19, 0xFF	; 255
    967e:	c3 0e       	add	r12, r19
    9680:	31 e0       	ldi	r19, 0x01	; 1
    9682:	d3 1e       	adc	r13, r19
    9684:	e1 1c       	adc	r14, r1
    9686:	f1 1c       	adc	r15, r1
    9688:	89 e0       	ldi	r24, 0x09	; 9
    968a:	f6 94       	lsr	r15
    968c:	e7 94       	ror	r14
    968e:	d7 94       	ror	r13
    9690:	c7 94       	ror	r12
    9692:	8a 95       	dec	r24
    9694:	d1 f7       	brne	.-12     	; 0x968a <mount_volume+0x3ae>
    9696:	4c 14       	cp	r4, r12
    9698:	5d 04       	cpc	r5, r13
    969a:	6e 04       	cpc	r6, r14
    969c:	7f 04       	cpc	r7, r15
    969e:	08 f4       	brcc	.+2      	; 0x96a2 <mount_volume+0x3c6>
    96a0:	a1 ce       	rjmp	.-702    	; 0x93e4 <mount_volume+0x108>
    96a2:	8f ef       	ldi	r24, 0xFF	; 255
    96a4:	9f ef       	ldi	r25, 0xFF	; 255
    96a6:	dc 01       	movw	r26, r24
    96a8:	f8 01       	movw	r30, r16
    96aa:	81 8b       	std	Z+17, r24	; 0x11
    96ac:	92 8b       	std	Z+18, r25	; 0x12
    96ae:	a3 8b       	std	Z+19, r26	; 0x13
    96b0:	b4 8b       	std	Z+20, r27	; 0x14
    96b2:	85 87       	std	Z+13, r24	; 0x0d
    96b4:	96 87       	std	Z+14, r25	; 0x0e
    96b6:	a7 87       	std	Z+15, r26	; 0x0f
    96b8:	b0 8b       	std	Z+16, r27	; 0x10
    96ba:	80 e8       	ldi	r24, 0x80	; 128
    96bc:	84 83       	std	Z+4, r24	; 0x04
    96be:	f3 e0       	ldi	r31, 0x03	; 3
    96c0:	af 16       	cp	r10, r31
    96c2:	b1 04       	cpc	r11, r1
    96c4:	09 f0       	breq	.+2      	; 0x96c8 <mount_volume+0x3ec>
    96c6:	3f c0       	rjmp	.+126    	; 0x9746 <mount_volume+0x46a>
    96c8:	f8 01       	movw	r30, r16
    96ca:	eb 59       	subi	r30, 0x9B	; 155
    96cc:	ff 4f       	sbci	r31, 0xFF	; 255
    96ce:	80 81       	ld	r24, Z
    96d0:	91 81       	ldd	r25, Z+1	; 0x01
    96d2:	01 97       	sbiw	r24, 0x01	; 1
    96d4:	c1 f5       	brne	.+112    	; 0x9746 <mount_volume+0x46a>
    96d6:	49 89       	ldd	r20, Y+17	; 0x11
    96d8:	5a 89       	ldd	r21, Y+18	; 0x12
    96da:	6b 89       	ldd	r22, Y+19	; 0x13
    96dc:	7c 89       	ldd	r23, Y+20	; 0x14
    96de:	4f 5f       	subi	r20, 0xFF	; 255
    96e0:	5f 4f       	sbci	r21, 0xFF	; 255
    96e2:	6f 4f       	sbci	r22, 0xFF	; 255
    96e4:	7f 4f       	sbci	r23, 0xFF	; 255
    96e6:	c8 01       	movw	r24, r16
    96e8:	7e dd       	rcall	.-1284   	; 0x91e6 <move_window>
    96ea:	89 2b       	or	r24, r25
    96ec:	61 f5       	brne	.+88     	; 0x9746 <mount_volume+0x46a>
    96ee:	f8 01       	movw	r30, r16
    96f0:	14 82       	std	Z+4, r1	; 0x04
    96f2:	ed 5c       	subi	r30, 0xCD	; 205
    96f4:	fd 4f       	sbci	r31, 0xFD	; 253
    96f6:	80 81       	ld	r24, Z
    96f8:	91 81       	ldd	r25, Z+1	; 0x01
    96fa:	85 35       	cpi	r24, 0x55	; 85
    96fc:	9a 4a       	sbci	r25, 0xAA	; 170
    96fe:	19 f5       	brne	.+70     	; 0x9746 <mount_volume+0x46a>
    9700:	c8 01       	movw	r24, r16
    9702:	c5 96       	adiw	r24, 0x35	; 53
    9704:	95 d8       	rcall	.-3798   	; 0x8830 <ld_dword>
    9706:	62 35       	cpi	r22, 0x52	; 82
    9708:	72 45       	sbci	r23, 0x52	; 82
    970a:	81 46       	sbci	r24, 0x61	; 97
    970c:	91 44       	sbci	r25, 0x41	; 65
    970e:	d9 f4       	brne	.+54     	; 0x9746 <mount_volume+0x46a>
    9710:	c8 01       	movw	r24, r16
    9712:	87 5e       	subi	r24, 0xE7	; 231
    9714:	9d 4f       	sbci	r25, 0xFD	; 253
    9716:	8c d8       	rcall	.-3816   	; 0x8830 <ld_dword>
    9718:	62 37       	cpi	r22, 0x72	; 114
    971a:	72 47       	sbci	r23, 0x72	; 114
    971c:	81 44       	sbci	r24, 0x41	; 65
    971e:	91 46       	sbci	r25, 0x61	; 97
    9720:	91 f4       	brne	.+36     	; 0x9746 <mount_volume+0x46a>
    9722:	c8 01       	movw	r24, r16
    9724:	83 5e       	subi	r24, 0xE3	; 227
    9726:	9d 4f       	sbci	r25, 0xFD	; 253
    9728:	83 d8       	rcall	.-3834   	; 0x8830 <ld_dword>
    972a:	f8 01       	movw	r30, r16
    972c:	61 8b       	std	Z+17, r22	; 0x11
    972e:	72 8b       	std	Z+18, r23	; 0x12
    9730:	83 8b       	std	Z+19, r24	; 0x13
    9732:	94 8b       	std	Z+20, r25	; 0x14
    9734:	c8 01       	movw	r24, r16
    9736:	8f 5d       	subi	r24, 0xDF	; 223
    9738:	9d 4f       	sbci	r25, 0xFD	; 253
    973a:	7a d8       	rcall	.-3852   	; 0x8830 <ld_dword>
    973c:	f8 01       	movw	r30, r16
    973e:	65 87       	std	Z+13, r22	; 0x0d
    9740:	76 87       	std	Z+14, r23	; 0x0e
    9742:	87 87       	std	Z+15, r24	; 0x0f
    9744:	90 8b       	std	Z+16, r25	; 0x10
    9746:	d8 01       	movw	r26, r16
    9748:	ac 92       	st	X, r10
    974a:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <Fsid>
    974e:	90 91 2e 18 	lds	r25, 0x182E	; 0x80182e <Fsid+0x1>
    9752:	01 96       	adiw	r24, 0x01	; 1
    9754:	90 93 2e 18 	sts	0x182E, r25	; 0x80182e <Fsid+0x1>
    9758:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <Fsid>
    975c:	f8 01       	movw	r30, r16
    975e:	96 83       	std	Z+6, r25	; 0x06
    9760:	85 83       	std	Z+5, r24	; 0x05
    9762:	15 8a       	std	Z+21, r1	; 0x15
    9764:	16 8a       	std	Z+22, r1	; 0x16
    9766:	17 8a       	std	Z+23, r1	; 0x17
    9768:	10 8e       	std	Z+24, r1	; 0x18
    976a:	06 c0       	rjmp	.+12     	; 0x9778 <mount_volume+0x49c>
    976c:	8b e0       	ldi	r24, 0x0B	; 11
    976e:	90 e0       	ldi	r25, 0x00	; 0
    9770:	0b c0       	rjmp	.+22     	; 0x9788 <mount_volume+0x4ac>
    9772:	8c e0       	ldi	r24, 0x0C	; 12
    9774:	90 e0       	ldi	r25, 0x00	; 0
    9776:	08 c0       	rjmp	.+16     	; 0x9788 <mount_volume+0x4ac>
    9778:	80 e0       	ldi	r24, 0x00	; 0
    977a:	90 e0       	ldi	r25, 0x00	; 0
    977c:	05 c0       	rjmp	.+10     	; 0x9788 <mount_volume+0x4ac>
    977e:	83 e0       	ldi	r24, 0x03	; 3
    9780:	90 e0       	ldi	r25, 0x00	; 0
    9782:	02 c0       	rjmp	.+4      	; 0x9788 <mount_volume+0x4ac>
    9784:	81 e0       	ldi	r24, 0x01	; 1
    9786:	90 e0       	ldi	r25, 0x00	; 0
    9788:	a0 96       	adiw	r28, 0x20	; 32
    978a:	e0 e1       	ldi	r30, 0x10	; 16
    978c:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__epilogue_restores__+0x4>

00009790 <put_fat>:
    9790:	a6 e0       	ldi	r26, 0x06	; 6
    9792:	b0 e0       	ldi	r27, 0x00	; 0
    9794:	ee ec       	ldi	r30, 0xCE	; 206
    9796:	fb e4       	ldi	r31, 0x4B	; 75
    9798:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    979c:	42 30       	cpi	r20, 0x02	; 2
    979e:	51 05       	cpc	r21, r1
    97a0:	61 05       	cpc	r22, r1
    97a2:	71 05       	cpc	r23, r1
    97a4:	08 f4       	brcc	.+2      	; 0x97a8 <put_fat+0x18>
    97a6:	e7 c0       	rjmp	.+462    	; 0x9976 <put_fat+0x1e6>
    97a8:	fc 01       	movw	r30, r24
    97aa:	c1 8c       	ldd	r12, Z+25	; 0x19
    97ac:	d2 8c       	ldd	r13, Z+26	; 0x1a
    97ae:	e3 8c       	ldd	r14, Z+27	; 0x1b
    97b0:	f4 8c       	ldd	r15, Z+28	; 0x1c
    97b2:	4c 15       	cp	r20, r12
    97b4:	5d 05       	cpc	r21, r13
    97b6:	6e 05       	cpc	r22, r14
    97b8:	7f 05       	cpc	r23, r15
    97ba:	08 f0       	brcs	.+2      	; 0x97be <put_fat+0x2e>
    97bc:	dc c0       	rjmp	.+440    	; 0x9976 <put_fat+0x1e6>
    97be:	28 01       	movw	r4, r16
    97c0:	39 01       	movw	r6, r18
    97c2:	6a 01       	movw	r12, r20
    97c4:	7b 01       	movw	r14, r22
    97c6:	9e 83       	std	Y+6, r25	; 0x06
    97c8:	8d 83       	std	Y+5, r24	; 0x05
    97ca:	80 81       	ld	r24, Z
    97cc:	82 30       	cpi	r24, 0x02	; 2
    97ce:	09 f4       	brne	.+2      	; 0x97d2 <put_fat+0x42>
    97d0:	73 c0       	rjmp	.+230    	; 0x98b8 <put_fat+0x128>
    97d2:	83 30       	cpi	r24, 0x03	; 3
    97d4:	09 f4       	brne	.+2      	; 0x97d8 <put_fat+0x48>
    97d6:	92 c0       	rjmp	.+292    	; 0x98fc <put_fat+0x16c>
    97d8:	81 30       	cpi	r24, 0x01	; 1
    97da:	09 f0       	breq	.+2      	; 0x97de <put_fat+0x4e>
    97dc:	cc c0       	rjmp	.+408    	; 0x9976 <put_fat+0x1e6>
    97de:	4a 01       	movw	r8, r20
    97e0:	96 94       	lsr	r9
    97e2:	87 94       	ror	r8
    97e4:	84 0e       	add	r8, r20
    97e6:	95 1e       	adc	r9, r21
    97e8:	c4 01       	movw	r24, r8
    97ea:	89 2f       	mov	r24, r25
    97ec:	99 27       	eor	r25, r25
    97ee:	86 95       	lsr	r24
    97f0:	45 a1       	ldd	r20, Z+37	; 0x25
    97f2:	56 a1       	ldd	r21, Z+38	; 0x26
    97f4:	67 a1       	ldd	r22, Z+39	; 0x27
    97f6:	70 a5       	ldd	r23, Z+40	; 0x28
    97f8:	48 0f       	add	r20, r24
    97fa:	59 1f       	adc	r21, r25
    97fc:	61 1d       	adc	r22, r1
    97fe:	71 1d       	adc	r23, r1
    9800:	cf 01       	movw	r24, r30
    9802:	f1 dc       	rcall	.-1566   	; 0x91e6 <move_window>
    9804:	5c 01       	movw	r10, r24
    9806:	89 2b       	or	r24, r25
    9808:	09 f0       	breq	.+2      	; 0x980c <put_fat+0x7c>
    980a:	b8 c0       	rjmp	.+368    	; 0x997c <put_fat+0x1ec>
    980c:	2d 80       	ldd	r2, Y+5	; 0x05
    980e:	3e 80       	ldd	r3, Y+6	; 0x06
    9810:	f5 e3       	ldi	r31, 0x35	; 53
    9812:	2f 0e       	add	r2, r31
    9814:	31 1c       	adc	r3, r1
    9816:	84 01       	movw	r16, r8
    9818:	0f 5f       	subi	r16, 0xFF	; 255
    981a:	1f 4f       	sbci	r17, 0xFF	; 255
    981c:	21 e0       	ldi	r18, 0x01	; 1
    981e:	92 22       	and	r9, r18
    9820:	f1 01       	movw	r30, r2
    9822:	e8 0d       	add	r30, r8
    9824:	f9 1d       	adc	r31, r9
    9826:	d7 01       	movw	r26, r14
    9828:	c6 01       	movw	r24, r12
    982a:	81 70       	andi	r24, 0x01	; 1
    982c:	99 27       	eor	r25, r25
    982e:	aa 27       	eor	r26, r26
    9830:	bb 27       	eor	r27, r27
    9832:	89 83       	std	Y+1, r24	; 0x01
    9834:	9a 83       	std	Y+2, r25	; 0x02
    9836:	ab 83       	std	Y+3, r26	; 0x03
    9838:	bc 83       	std	Y+4, r27	; 0x04
    983a:	c0 fe       	sbrs	r12, 0
    983c:	09 c0       	rjmp	.+18     	; 0x9850 <put_fat+0xc0>
    983e:	80 81       	ld	r24, Z
    9840:	28 2f       	mov	r18, r24
    9842:	2f 70       	andi	r18, 0x0F	; 15
    9844:	a0 e1       	ldi	r26, 0x10	; 16
    9846:	4a 9e       	mul	r4, r26
    9848:	c0 01       	movw	r24, r0
    984a:	11 24       	eor	r1, r1
    984c:	82 2b       	or	r24, r18
    984e:	01 c0       	rjmp	.+2      	; 0x9852 <put_fat+0xc2>
    9850:	84 2d       	mov	r24, r4
    9852:	80 83       	st	Z, r24
    9854:	81 e0       	ldi	r24, 0x01	; 1
    9856:	ed 81       	ldd	r30, Y+5	; 0x05
    9858:	fe 81       	ldd	r31, Y+6	; 0x06
    985a:	83 83       	std	Z+3, r24	; 0x03
    985c:	45 a1       	ldd	r20, Z+37	; 0x25
    985e:	56 a1       	ldd	r21, Z+38	; 0x26
    9860:	67 a1       	ldd	r22, Z+39	; 0x27
    9862:	70 a5       	ldd	r23, Z+40	; 0x28
    9864:	c8 01       	movw	r24, r16
    9866:	89 2f       	mov	r24, r25
    9868:	99 27       	eor	r25, r25
    986a:	86 95       	lsr	r24
    986c:	48 0f       	add	r20, r24
    986e:	59 1f       	adc	r21, r25
    9870:	61 1d       	adc	r22, r1
    9872:	71 1d       	adc	r23, r1
    9874:	cf 01       	movw	r24, r30
    9876:	b7 dc       	rcall	.-1682   	; 0x91e6 <move_window>
    9878:	5c 01       	movw	r10, r24
    987a:	89 2b       	or	r24, r25
    987c:	09 f0       	breq	.+2      	; 0x9880 <put_fat+0xf0>
    987e:	7e c0       	rjmp	.+252    	; 0x997c <put_fat+0x1ec>
    9880:	11 70       	andi	r17, 0x01	; 1
    9882:	f1 01       	movw	r30, r2
    9884:	e0 0f       	add	r30, r16
    9886:	f1 1f       	adc	r31, r17
    9888:	89 81       	ldd	r24, Y+1	; 0x01
    988a:	9a 81       	ldd	r25, Y+2	; 0x02
    988c:	ab 81       	ldd	r26, Y+3	; 0x03
    988e:	bc 81       	ldd	r27, Y+4	; 0x04
    9890:	89 2b       	or	r24, r25
    9892:	8a 2b       	or	r24, r26
    9894:	8b 2b       	or	r24, r27
    9896:	41 f0       	breq	.+16     	; 0x98a8 <put_fat+0x118>
    9898:	54 e0       	ldi	r21, 0x04	; 4
    989a:	76 94       	lsr	r7
    989c:	67 94       	ror	r6
    989e:	57 94       	ror	r5
    98a0:	47 94       	ror	r4
    98a2:	5a 95       	dec	r21
    98a4:	d1 f7       	brne	.-12     	; 0x989a <put_fat+0x10a>
    98a6:	06 c0       	rjmp	.+12     	; 0x98b4 <put_fat+0x124>
    98a8:	00 81       	ld	r16, Z
    98aa:	00 7f       	andi	r16, 0xF0	; 240
    98ac:	85 2d       	mov	r24, r5
    98ae:	8f 70       	andi	r24, 0x0F	; 15
    98b0:	40 2e       	mov	r4, r16
    98b2:	48 2a       	or	r4, r24
    98b4:	40 82       	st	Z, r4
    98b6:	5a c0       	rjmp	.+180    	; 0x996c <put_fat+0x1dc>
    98b8:	77 27       	eor	r23, r23
    98ba:	6f 2d       	mov	r22, r15
    98bc:	5e 2d       	mov	r21, r14
    98be:	4d 2d       	mov	r20, r13
    98c0:	ed 81       	ldd	r30, Y+5	; 0x05
    98c2:	fe 81       	ldd	r31, Y+6	; 0x06
    98c4:	85 a1       	ldd	r24, Z+37	; 0x25
    98c6:	96 a1       	ldd	r25, Z+38	; 0x26
    98c8:	a7 a1       	ldd	r26, Z+39	; 0x27
    98ca:	b0 a5       	ldd	r27, Z+40	; 0x28
    98cc:	48 0f       	add	r20, r24
    98ce:	59 1f       	adc	r21, r25
    98d0:	6a 1f       	adc	r22, r26
    98d2:	7b 1f       	adc	r23, r27
    98d4:	cf 01       	movw	r24, r30
    98d6:	87 dc       	rcall	.-1778   	; 0x91e6 <move_window>
    98d8:	5c 01       	movw	r10, r24
    98da:	89 2b       	or	r24, r25
    98dc:	09 f0       	breq	.+2      	; 0x98e0 <put_fat+0x150>
    98de:	4e c0       	rjmp	.+156    	; 0x997c <put_fat+0x1ec>
    98e0:	ed 81       	ldd	r30, Y+5	; 0x05
    98e2:	fe 81       	ldd	r31, Y+6	; 0x06
    98e4:	f5 96       	adiw	r30, 0x35	; 53
    98e6:	cc 0c       	add	r12, r12
    98e8:	dd 1c       	adc	r13, r13
    98ea:	e8 94       	clt
    98ec:	c0 f8       	bld	r12, 0
    98ee:	21 e0       	ldi	r18, 0x01	; 1
    98f0:	d2 22       	and	r13, r18
    98f2:	ec 0d       	add	r30, r12
    98f4:	fd 1d       	adc	r31, r13
    98f6:	40 82       	st	Z, r4
    98f8:	51 82       	std	Z+1, r5	; 0x01
    98fa:	38 c0       	rjmp	.+112    	; 0x996c <put_fat+0x1dc>
    98fc:	ed 81       	ldd	r30, Y+5	; 0x05
    98fe:	fe 81       	ldd	r31, Y+6	; 0x06
    9900:	85 a1       	ldd	r24, Z+37	; 0x25
    9902:	96 a1       	ldd	r25, Z+38	; 0x26
    9904:	a7 a1       	ldd	r26, Z+39	; 0x27
    9906:	b0 a5       	ldd	r27, Z+40	; 0x28
    9908:	27 e0       	ldi	r18, 0x07	; 7
    990a:	76 95       	lsr	r23
    990c:	67 95       	ror	r22
    990e:	57 95       	ror	r21
    9910:	47 95       	ror	r20
    9912:	2a 95       	dec	r18
    9914:	d1 f7       	brne	.-12     	; 0x990a <put_fat+0x17a>
    9916:	48 0f       	add	r20, r24
    9918:	59 1f       	adc	r21, r25
    991a:	6a 1f       	adc	r22, r26
    991c:	7b 1f       	adc	r23, r27
    991e:	cf 01       	movw	r24, r30
    9920:	62 dc       	rcall	.-1852   	; 0x91e6 <move_window>
    9922:	5c 01       	movw	r10, r24
    9924:	89 2b       	or	r24, r25
    9926:	51 f5       	brne	.+84     	; 0x997c <put_fat+0x1ec>
    9928:	4d 81       	ldd	r20, Y+5	; 0x05
    992a:	5e 81       	ldd	r21, Y+6	; 0x06
    992c:	4b 5c       	subi	r20, 0xCB	; 203
    992e:	5f 4f       	sbci	r21, 0xFF	; 255
    9930:	cc 0c       	add	r12, r12
    9932:	dd 1c       	adc	r13, r13
    9934:	cc 0c       	add	r12, r12
    9936:	dd 1c       	adc	r13, r13
    9938:	fc ef       	ldi	r31, 0xFC	; 252
    993a:	cf 22       	and	r12, r31
    993c:	f1 e0       	ldi	r31, 0x01	; 1
    993e:	df 22       	and	r13, r31
    9940:	c4 0e       	add	r12, r20
    9942:	d5 1e       	adc	r13, r21
    9944:	c6 01       	movw	r24, r12
    9946:	0e 94 18 44 	call	0x8830	; 0x8830 <ld_dword>
    994a:	2f e0       	ldi	r18, 0x0F	; 15
    994c:	72 22       	and	r7, r18
    994e:	dc 01       	movw	r26, r24
    9950:	cb 01       	movw	r24, r22
    9952:	88 27       	eor	r24, r24
    9954:	99 27       	eor	r25, r25
    9956:	aa 27       	eor	r26, r26
    9958:	b0 7f       	andi	r27, 0xF0	; 240
    995a:	b3 01       	movw	r22, r6
    995c:	a2 01       	movw	r20, r4
    995e:	48 2b       	or	r20, r24
    9960:	59 2b       	or	r21, r25
    9962:	6a 2b       	or	r22, r26
    9964:	7b 2b       	or	r23, r27
    9966:	c6 01       	movw	r24, r12
    9968:	0e 94 2d 44 	call	0x885a	; 0x885a <st_dword>
    996c:	81 e0       	ldi	r24, 0x01	; 1
    996e:	ed 81       	ldd	r30, Y+5	; 0x05
    9970:	fe 81       	ldd	r31, Y+6	; 0x06
    9972:	83 83       	std	Z+3, r24	; 0x03
    9974:	03 c0       	rjmp	.+6      	; 0x997c <put_fat+0x1ec>
    9976:	82 e0       	ldi	r24, 0x02	; 2
    9978:	a8 2e       	mov	r10, r24
    997a:	b1 2c       	mov	r11, r1
    997c:	c5 01       	movw	r24, r10
    997e:	26 96       	adiw	r28, 0x06	; 6
    9980:	e2 e1       	ldi	r30, 0x12	; 18
    9982:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

00009986 <get_fat.isra.10>:
    9986:	a0 e0       	ldi	r26, 0x00	; 0
    9988:	b0 e0       	ldi	r27, 0x00	; 0
    998a:	e9 ec       	ldi	r30, 0xC9	; 201
    998c:	fc e4       	ldi	r31, 0x4C	; 76
    998e:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
    9992:	42 30       	cpi	r20, 0x02	; 2
    9994:	51 05       	cpc	r21, r1
    9996:	61 05       	cpc	r22, r1
    9998:	71 05       	cpc	r23, r1
    999a:	08 f4       	brcc	.+2      	; 0x999e <get_fat.isra.10+0x18>
    999c:	9f c0       	rjmp	.+318    	; 0x9adc <get_fat.isra.10+0x156>
    999e:	fc 01       	movw	r30, r24
    99a0:	01 8d       	ldd	r16, Z+25	; 0x19
    99a2:	12 8d       	ldd	r17, Z+26	; 0x1a
    99a4:	23 8d       	ldd	r18, Z+27	; 0x1b
    99a6:	34 8d       	ldd	r19, Z+28	; 0x1c
    99a8:	40 17       	cp	r20, r16
    99aa:	51 07       	cpc	r21, r17
    99ac:	62 07       	cpc	r22, r18
    99ae:	73 07       	cpc	r23, r19
    99b0:	08 f0       	brcs	.+2      	; 0x99b4 <get_fat.isra.10+0x2e>
    99b2:	94 c0       	rjmp	.+296    	; 0x9adc <get_fat.isra.10+0x156>
    99b4:	6a 01       	movw	r12, r20
    99b6:	7b 01       	movw	r14, r22
    99b8:	8c 01       	movw	r16, r24
    99ba:	80 81       	ld	r24, Z
    99bc:	82 30       	cpi	r24, 0x02	; 2
    99be:	09 f4       	brne	.+2      	; 0x99c2 <get_fat.isra.10+0x3c>
    99c0:	4b c0       	rjmp	.+150    	; 0x9a58 <get_fat.isra.10+0xd2>
    99c2:	83 30       	cpi	r24, 0x03	; 3
    99c4:	09 f4       	brne	.+2      	; 0x99c8 <get_fat.isra.10+0x42>
    99c6:	67 c0       	rjmp	.+206    	; 0x9a96 <get_fat.isra.10+0x110>
    99c8:	81 30       	cpi	r24, 0x01	; 1
    99ca:	09 f0       	breq	.+2      	; 0x99ce <get_fat.isra.10+0x48>
    99cc:	87 c0       	rjmp	.+270    	; 0x9adc <get_fat.isra.10+0x156>
    99ce:	ea 01       	movw	r28, r20
    99d0:	d6 95       	lsr	r29
    99d2:	c7 95       	ror	r28
    99d4:	cc 0d       	add	r28, r12
    99d6:	dd 1d       	adc	r29, r13
    99d8:	ce 01       	movw	r24, r28
    99da:	89 2f       	mov	r24, r25
    99dc:	99 27       	eor	r25, r25
    99de:	86 95       	lsr	r24
    99e0:	45 a1       	ldd	r20, Z+37	; 0x25
    99e2:	56 a1       	ldd	r21, Z+38	; 0x26
    99e4:	67 a1       	ldd	r22, Z+39	; 0x27
    99e6:	70 a5       	ldd	r23, Z+40	; 0x28
    99e8:	48 0f       	add	r20, r24
    99ea:	59 1f       	adc	r21, r25
    99ec:	61 1d       	adc	r22, r1
    99ee:	71 1d       	adc	r23, r1
    99f0:	cf 01       	movw	r24, r30
    99f2:	f9 db       	rcall	.-2062   	; 0x91e6 <move_window>
    99f4:	89 2b       	or	r24, r25
    99f6:	21 f0       	breq	.+8      	; 0x9a00 <get_fat.isra.10+0x7a>
    99f8:	6f ef       	ldi	r22, 0xFF	; 255
    99fa:	7f ef       	ldi	r23, 0xFF	; 255
    99fc:	cb 01       	movw	r24, r22
    99fe:	72 c0       	rjmp	.+228    	; 0x9ae4 <get_fat.isra.10+0x15e>
    9a00:	5e 01       	movw	r10, r28
    9a02:	ff ef       	ldi	r31, 0xFF	; 255
    9a04:	af 1a       	sub	r10, r31
    9a06:	bf 0a       	sbc	r11, r31
    9a08:	d1 70       	andi	r29, 0x01	; 1
    9a0a:	c0 0f       	add	r28, r16
    9a0c:	d1 1f       	adc	r29, r17
    9a0e:	cd a9       	ldd	r28, Y+53	; 0x35
    9a10:	c5 01       	movw	r24, r10
    9a12:	89 2f       	mov	r24, r25
    9a14:	99 27       	eor	r25, r25
    9a16:	86 95       	lsr	r24
    9a18:	f8 01       	movw	r30, r16
    9a1a:	45 a1       	ldd	r20, Z+37	; 0x25
    9a1c:	56 a1       	ldd	r21, Z+38	; 0x26
    9a1e:	67 a1       	ldd	r22, Z+39	; 0x27
    9a20:	70 a5       	ldd	r23, Z+40	; 0x28
    9a22:	48 0f       	add	r20, r24
    9a24:	59 1f       	adc	r21, r25
    9a26:	61 1d       	adc	r22, r1
    9a28:	71 1d       	adc	r23, r1
    9a2a:	c8 01       	movw	r24, r16
    9a2c:	dc db       	rcall	.-2120   	; 0x91e6 <move_window>
    9a2e:	89 2b       	or	r24, r25
    9a30:	19 f7       	brne	.-58     	; 0x99f8 <get_fat.isra.10+0x72>
    9a32:	f1 e0       	ldi	r31, 0x01	; 1
    9a34:	bf 22       	and	r11, r31
    9a36:	f8 01       	movw	r30, r16
    9a38:	ea 0d       	add	r30, r10
    9a3a:	fb 1d       	adc	r31, r11
    9a3c:	85 a9       	ldd	r24, Z+53	; 0x35
    9a3e:	6c 2f       	mov	r22, r28
    9a40:	70 e0       	ldi	r23, 0x00	; 0
    9a42:	78 2b       	or	r23, r24
    9a44:	c0 fe       	sbrs	r12, 0
    9a46:	06 c0       	rjmp	.+12     	; 0x9a54 <get_fat.isra.10+0xce>
    9a48:	54 e0       	ldi	r21, 0x04	; 4
    9a4a:	76 95       	lsr	r23
    9a4c:	67 95       	ror	r22
    9a4e:	5a 95       	dec	r21
    9a50:	e1 f7       	brne	.-8      	; 0x9a4a <get_fat.isra.10+0xc4>
    9a52:	1e c0       	rjmp	.+60     	; 0x9a90 <get_fat.isra.10+0x10a>
    9a54:	7f 70       	andi	r23, 0x0F	; 15
    9a56:	1c c0       	rjmp	.+56     	; 0x9a90 <get_fat.isra.10+0x10a>
    9a58:	77 27       	eor	r23, r23
    9a5a:	6f 2d       	mov	r22, r15
    9a5c:	5e 2d       	mov	r21, r14
    9a5e:	4d 2d       	mov	r20, r13
    9a60:	85 a1       	ldd	r24, Z+37	; 0x25
    9a62:	96 a1       	ldd	r25, Z+38	; 0x26
    9a64:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a66:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a68:	48 0f       	add	r20, r24
    9a6a:	59 1f       	adc	r21, r25
    9a6c:	6a 1f       	adc	r22, r26
    9a6e:	7b 1f       	adc	r23, r27
    9a70:	cf 01       	movw	r24, r30
    9a72:	b9 db       	rcall	.-2190   	; 0x91e6 <move_window>
    9a74:	89 2b       	or	r24, r25
    9a76:	09 f0       	breq	.+2      	; 0x9a7a <get_fat.isra.10+0xf4>
    9a78:	bf cf       	rjmp	.-130    	; 0x99f8 <get_fat.isra.10+0x72>
    9a7a:	cc 0c       	add	r12, r12
    9a7c:	dd 1c       	adc	r13, r13
    9a7e:	e8 94       	clt
    9a80:	c0 f8       	bld	r12, 0
    9a82:	f1 e0       	ldi	r31, 0x01	; 1
    9a84:	df 22       	and	r13, r31
    9a86:	f8 01       	movw	r30, r16
    9a88:	ec 0d       	add	r30, r12
    9a8a:	fd 1d       	adc	r31, r13
    9a8c:	65 a9       	ldd	r22, Z+53	; 0x35
    9a8e:	76 a9       	ldd	r23, Z+54	; 0x36
    9a90:	80 e0       	ldi	r24, 0x00	; 0
    9a92:	90 e0       	ldi	r25, 0x00	; 0
    9a94:	27 c0       	rjmp	.+78     	; 0x9ae4 <get_fat.isra.10+0x15e>
    9a96:	85 a1       	ldd	r24, Z+37	; 0x25
    9a98:	96 a1       	ldd	r25, Z+38	; 0x26
    9a9a:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a9c:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a9e:	27 e0       	ldi	r18, 0x07	; 7
    9aa0:	76 95       	lsr	r23
    9aa2:	67 95       	ror	r22
    9aa4:	57 95       	ror	r21
    9aa6:	47 95       	ror	r20
    9aa8:	2a 95       	dec	r18
    9aaa:	d1 f7       	brne	.-12     	; 0x9aa0 <get_fat.isra.10+0x11a>
    9aac:	48 0f       	add	r20, r24
    9aae:	59 1f       	adc	r21, r25
    9ab0:	6a 1f       	adc	r22, r26
    9ab2:	7b 1f       	adc	r23, r27
    9ab4:	cf 01       	movw	r24, r30
    9ab6:	97 db       	rcall	.-2258   	; 0x91e6 <move_window>
    9ab8:	89 2b       	or	r24, r25
    9aba:	09 f0       	breq	.+2      	; 0x9abe <get_fat.isra.10+0x138>
    9abc:	9d cf       	rjmp	.-198    	; 0x99f8 <get_fat.isra.10+0x72>
    9abe:	0b 5c       	subi	r16, 0xCB	; 203
    9ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    9ac2:	cc 0c       	add	r12, r12
    9ac4:	dd 1c       	adc	r13, r13
    9ac6:	cc 0c       	add	r12, r12
    9ac8:	dd 1c       	adc	r13, r13
    9aca:	c6 01       	movw	r24, r12
    9acc:	8c 7f       	andi	r24, 0xFC	; 252
    9ace:	91 70       	andi	r25, 0x01	; 1
    9ad0:	80 0f       	add	r24, r16
    9ad2:	91 1f       	adc	r25, r17
    9ad4:	0e 94 18 44 	call	0x8830	; 0x8830 <ld_dword>
    9ad8:	9f 70       	andi	r25, 0x0F	; 15
    9ada:	04 c0       	rjmp	.+8      	; 0x9ae4 <get_fat.isra.10+0x15e>
    9adc:	61 e0       	ldi	r22, 0x01	; 1
    9ade:	70 e0       	ldi	r23, 0x00	; 0
    9ae0:	80 e0       	ldi	r24, 0x00	; 0
    9ae2:	90 e0       	ldi	r25, 0x00	; 0
    9ae4:	cd b7       	in	r28, 0x3d	; 61
    9ae6:	de b7       	in	r29, 0x3e	; 62
    9ae8:	ea e0       	ldi	r30, 0x0A	; 10
    9aea:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

00009aee <dir_sdi>:
    9aee:	a0 e0       	ldi	r26, 0x00	; 0
    9af0:	b0 e0       	ldi	r27, 0x00	; 0
    9af2:	ed e7       	ldi	r30, 0x7D	; 125
    9af4:	fd e4       	ldi	r31, 0x4D	; 77
    9af6:	0c 94 c4 df 	jmp	0x1bf88	; 0x1bf88 <__prologue_saves__+0x4>
    9afa:	ec 01       	movw	r28, r24
    9afc:	6a 01       	movw	r12, r20
    9afe:	7b 01       	movw	r14, r22
    9b00:	41 15       	cp	r20, r1
    9b02:	51 05       	cpc	r21, r1
    9b04:	80 e2       	ldi	r24, 0x20	; 32
    9b06:	68 07       	cpc	r22, r24
    9b08:	71 05       	cpc	r23, r1
    9b0a:	18 f0       	brcs	.+6      	; 0x9b12 <dir_sdi+0x24>
    9b0c:	82 e0       	ldi	r24, 0x02	; 2
    9b0e:	90 e0       	ldi	r25, 0x00	; 0
    9b10:	aa c0       	rjmp	.+340    	; 0x9c66 <dir_sdi+0x178>
    9b12:	db 01       	movw	r26, r22
    9b14:	ca 01       	movw	r24, r20
    9b16:	8f 71       	andi	r24, 0x1F	; 31
    9b18:	99 27       	eor	r25, r25
    9b1a:	aa 27       	eor	r26, r26
    9b1c:	bb 27       	eor	r27, r27
    9b1e:	89 2b       	or	r24, r25
    9b20:	8a 2b       	or	r24, r26
    9b22:	8b 2b       	or	r24, r27
    9b24:	99 f7       	brne	.-26     	; 0x9b0c <dir_sdi+0x1e>
    9b26:	08 81       	ld	r16, Y
    9b28:	19 81       	ldd	r17, Y+1	; 0x01
    9b2a:	4e 87       	std	Y+14, r20	; 0x0e
    9b2c:	5f 87       	std	Y+15, r21	; 0x0f
    9b2e:	68 8b       	std	Y+16, r22	; 0x10
    9b30:	79 8b       	std	Y+17, r23	; 0x11
    9b32:	8e 80       	ldd	r8, Y+6	; 0x06
    9b34:	9f 80       	ldd	r9, Y+7	; 0x07
    9b36:	a8 84       	ldd	r10, Y+8	; 0x08
    9b38:	b9 84       	ldd	r11, Y+9	; 0x09
    9b3a:	81 14       	cp	r8, r1
    9b3c:	91 04       	cpc	r9, r1
    9b3e:	a1 04       	cpc	r10, r1
    9b40:	b1 04       	cpc	r11, r1
    9b42:	51 f5       	brne	.+84     	; 0x9b98 <dir_sdi+0xaa>
    9b44:	f8 01       	movw	r30, r16
    9b46:	80 81       	ld	r24, Z
    9b48:	83 30       	cpi	r24, 0x03	; 3
    9b4a:	40 f0       	brcs	.+16     	; 0x9b5c <dir_sdi+0x6e>
    9b4c:	81 a5       	ldd	r24, Z+41	; 0x29
    9b4e:	92 a5       	ldd	r25, Z+42	; 0x2a
    9b50:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9b52:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9b54:	00 97       	sbiw	r24, 0x00	; 0
    9b56:	a1 05       	cpc	r26, r1
    9b58:	b1 05       	cpc	r27, r1
    9b5a:	e1 f4       	brne	.+56     	; 0x9b94 <dir_sdi+0xa6>
    9b5c:	f8 01       	movw	r30, r16
    9b5e:	87 81       	ldd	r24, Z+7	; 0x07
    9b60:	90 85       	ldd	r25, Z+8	; 0x08
    9b62:	a0 e0       	ldi	r26, 0x00	; 0
    9b64:	b0 e0       	ldi	r27, 0x00	; 0
    9b66:	b7 01       	movw	r22, r14
    9b68:	a6 01       	movw	r20, r12
    9b6a:	25 e0       	ldi	r18, 0x05	; 5
    9b6c:	76 95       	lsr	r23
    9b6e:	67 95       	ror	r22
    9b70:	57 95       	ror	r21
    9b72:	47 95       	ror	r20
    9b74:	2a 95       	dec	r18
    9b76:	d1 f7       	brne	.-12     	; 0x9b6c <dir_sdi+0x7e>
    9b78:	48 17       	cp	r20, r24
    9b7a:	59 07       	cpc	r21, r25
    9b7c:	6a 07       	cpc	r22, r26
    9b7e:	7b 07       	cpc	r23, r27
    9b80:	28 f6       	brcc	.-118    	; 0x9b0c <dir_sdi+0x1e>
    9b82:	81 a5       	ldd	r24, Z+41	; 0x29
    9b84:	92 a5       	ldd	r25, Z+42	; 0x2a
    9b86:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9b88:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9b8a:	8e 8b       	std	Y+22, r24	; 0x16
    9b8c:	9f 8b       	std	Y+23, r25	; 0x17
    9b8e:	a8 8f       	std	Y+24, r26	; 0x18
    9b90:	b9 8f       	std	Y+25, r27	; 0x19
    9b92:	3e c0       	rjmp	.+124    	; 0x9c10 <dir_sdi+0x122>
    9b94:	4c 01       	movw	r8, r24
    9b96:	5d 01       	movw	r10, r26
    9b98:	f8 01       	movw	r30, r16
    9b9a:	41 84       	ldd	r4, Z+9	; 0x09
    9b9c:	52 84       	ldd	r5, Z+10	; 0x0a
    9b9e:	61 2c       	mov	r6, r1
    9ba0:	71 2c       	mov	r7, r1
    9ba2:	39 e0       	ldi	r19, 0x09	; 9
    9ba4:	44 0c       	add	r4, r4
    9ba6:	55 1c       	adc	r5, r5
    9ba8:	66 1c       	adc	r6, r6
    9baa:	77 1c       	adc	r7, r7
    9bac:	3a 95       	dec	r19
    9bae:	d1 f7       	brne	.-12     	; 0x9ba4 <dir_sdi+0xb6>
    9bb0:	b5 01       	movw	r22, r10
    9bb2:	a4 01       	movw	r20, r8
    9bb4:	c4 14       	cp	r12, r4
    9bb6:	d5 04       	cpc	r13, r5
    9bb8:	e6 04       	cpc	r14, r6
    9bba:	f7 04       	cpc	r15, r7
    9bbc:	10 f1       	brcs	.+68     	; 0x9c02 <dir_sdi+0x114>
    9bbe:	88 81       	ld	r24, Y
    9bc0:	99 81       	ldd	r25, Y+1	; 0x01
    9bc2:	e1 de       	rcall	.-574    	; 0x9986 <get_fat.isra.10>
    9bc4:	4b 01       	movw	r8, r22
    9bc6:	5c 01       	movw	r10, r24
    9bc8:	6f 3f       	cpi	r22, 0xFF	; 255
    9bca:	7f 4f       	sbci	r23, 0xFF	; 255
    9bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    9bce:	9f 4f       	sbci	r25, 0xFF	; 255
    9bd0:	09 f4       	brne	.+2      	; 0x9bd4 <dir_sdi+0xe6>
    9bd2:	47 c0       	rjmp	.+142    	; 0x9c62 <dir_sdi+0x174>
    9bd4:	82 e0       	ldi	r24, 0x02	; 2
    9bd6:	88 16       	cp	r8, r24
    9bd8:	91 04       	cpc	r9, r1
    9bda:	a1 04       	cpc	r10, r1
    9bdc:	b1 04       	cpc	r11, r1
    9bde:	08 f4       	brcc	.+2      	; 0x9be2 <dir_sdi+0xf4>
    9be0:	95 cf       	rjmp	.-214    	; 0x9b0c <dir_sdi+0x1e>
    9be2:	f8 01       	movw	r30, r16
    9be4:	81 8d       	ldd	r24, Z+25	; 0x19
    9be6:	92 8d       	ldd	r25, Z+26	; 0x1a
    9be8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9bea:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9bec:	88 16       	cp	r8, r24
    9bee:	99 06       	cpc	r9, r25
    9bf0:	aa 06       	cpc	r10, r26
    9bf2:	bb 06       	cpc	r11, r27
    9bf4:	08 f0       	brcs	.+2      	; 0x9bf8 <dir_sdi+0x10a>
    9bf6:	8a cf       	rjmp	.-236    	; 0x9b0c <dir_sdi+0x1e>
    9bf8:	c4 18       	sub	r12, r4
    9bfa:	d5 08       	sbc	r13, r5
    9bfc:	e6 08       	sbc	r14, r6
    9bfe:	f7 08       	sbc	r15, r7
    9c00:	d7 cf       	rjmp	.-82     	; 0x9bb0 <dir_sdi+0xc2>
    9c02:	c8 01       	movw	r24, r16
    9c04:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <clst2sect>
    9c08:	6e 8b       	std	Y+22, r22	; 0x16
    9c0a:	7f 8b       	std	Y+23, r23	; 0x17
    9c0c:	88 8f       	std	Y+24, r24	; 0x18
    9c0e:	99 8f       	std	Y+25, r25	; 0x19
    9c10:	8a 8a       	std	Y+18, r8	; 0x12
    9c12:	9b 8a       	std	Y+19, r9	; 0x13
    9c14:	ac 8a       	std	Y+20, r10	; 0x14
    9c16:	bd 8a       	std	Y+21, r11	; 0x15
    9c18:	8e 89       	ldd	r24, Y+22	; 0x16
    9c1a:	9f 89       	ldd	r25, Y+23	; 0x17
    9c1c:	a8 8d       	ldd	r26, Y+24	; 0x18
    9c1e:	b9 8d       	ldd	r27, Y+25	; 0x19
    9c20:	00 97       	sbiw	r24, 0x00	; 0
    9c22:	a1 05       	cpc	r26, r1
    9c24:	b1 05       	cpc	r27, r1
    9c26:	09 f4       	brne	.+2      	; 0x9c2a <dir_sdi+0x13c>
    9c28:	71 cf       	rjmp	.-286    	; 0x9b0c <dir_sdi+0x1e>
    9c2a:	b7 01       	movw	r22, r14
    9c2c:	a6 01       	movw	r20, r12
    9c2e:	29 e0       	ldi	r18, 0x09	; 9
    9c30:	76 95       	lsr	r23
    9c32:	67 95       	ror	r22
    9c34:	57 95       	ror	r21
    9c36:	47 95       	ror	r20
    9c38:	2a 95       	dec	r18
    9c3a:	d1 f7       	brne	.-12     	; 0x9c30 <dir_sdi+0x142>
    9c3c:	84 0f       	add	r24, r20
    9c3e:	95 1f       	adc	r25, r21
    9c40:	a6 1f       	adc	r26, r22
    9c42:	b7 1f       	adc	r27, r23
    9c44:	8e 8b       	std	Y+22, r24	; 0x16
    9c46:	9f 8b       	std	Y+23, r25	; 0x17
    9c48:	a8 8f       	std	Y+24, r26	; 0x18
    9c4a:	b9 8f       	std	Y+25, r27	; 0x19
    9c4c:	0b 5c       	subi	r16, 0xCB	; 203
    9c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    9c50:	f1 e0       	ldi	r31, 0x01	; 1
    9c52:	df 22       	and	r13, r31
    9c54:	c0 0e       	add	r12, r16
    9c56:	d1 1e       	adc	r13, r17
    9c58:	db 8e       	std	Y+27, r13	; 0x1b
    9c5a:	ca 8e       	std	Y+26, r12	; 0x1a
    9c5c:	80 e0       	ldi	r24, 0x00	; 0
    9c5e:	90 e0       	ldi	r25, 0x00	; 0
    9c60:	02 c0       	rjmp	.+4      	; 0x9c66 <dir_sdi+0x178>
    9c62:	81 e0       	ldi	r24, 0x01	; 1
    9c64:	90 e0       	ldi	r25, 0x00	; 0
    9c66:	cd b7       	in	r28, 0x3d	; 61
    9c68:	de b7       	in	r29, 0x3e	; 62
    9c6a:	e0 e1       	ldi	r30, 0x10	; 16
    9c6c:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__epilogue_restores__+0x4>

00009c70 <create_chain>:
    9c70:	a0 e0       	ldi	r26, 0x00	; 0
    9c72:	b0 e0       	ldi	r27, 0x00	; 0
    9c74:	ee e3       	ldi	r30, 0x3E	; 62
    9c76:	fe e4       	ldi	r31, 0x4E	; 78
    9c78:	0c 94 c4 df 	jmp	0x1bf88	; 0x1bf88 <__prologue_saves__+0x4>
    9c7c:	8c 01       	movw	r16, r24
    9c7e:	2a 01       	movw	r4, r20
    9c80:	3b 01       	movw	r6, r22
    9c82:	fc 01       	movw	r30, r24
    9c84:	c0 81       	ld	r28, Z
    9c86:	d1 81       	ldd	r29, Z+1	; 0x01
    9c88:	41 15       	cp	r20, r1
    9c8a:	51 05       	cpc	r21, r1
    9c8c:	61 05       	cpc	r22, r1
    9c8e:	71 05       	cpc	r23, r1
    9c90:	99 f4       	brne	.+38     	; 0x9cb8 <create_chain+0x48>
    9c92:	8d 84       	ldd	r8, Y+13	; 0x0d
    9c94:	9e 84       	ldd	r9, Y+14	; 0x0e
    9c96:	af 84       	ldd	r10, Y+15	; 0x0f
    9c98:	b8 88       	ldd	r11, Y+16	; 0x10
    9c9a:	81 14       	cp	r8, r1
    9c9c:	91 04       	cpc	r9, r1
    9c9e:	a1 04       	cpc	r10, r1
    9ca0:	b1 04       	cpc	r11, r1
    9ca2:	51 f1       	breq	.+84     	; 0x9cf8 <create_chain+0x88>
    9ca4:	89 8d       	ldd	r24, Y+25	; 0x19
    9ca6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9ca8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9caa:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9cac:	88 16       	cp	r8, r24
    9cae:	99 06       	cpc	r9, r25
    9cb0:	aa 06       	cpc	r10, r26
    9cb2:	bb 06       	cpc	r11, r27
    9cb4:	28 f1       	brcs	.+74     	; 0x9d00 <create_chain+0x90>
    9cb6:	20 c0       	rjmp	.+64     	; 0x9cf8 <create_chain+0x88>
    9cb8:	ce 01       	movw	r24, r28
    9cba:	65 de       	rcall	.-822    	; 0x9986 <get_fat.isra.10>
    9cbc:	62 30       	cpi	r22, 0x02	; 2
    9cbe:	71 05       	cpc	r23, r1
    9cc0:	81 05       	cpc	r24, r1
    9cc2:	91 05       	cpc	r25, r1
    9cc4:	08 f4       	brcc	.+2      	; 0x9cc8 <create_chain+0x58>
    9cc6:	ea c0       	rjmp	.+468    	; 0x9e9c <create_chain+0x22c>
    9cc8:	6f 3f       	cpi	r22, 0xFF	; 255
    9cca:	ff ef       	ldi	r31, 0xFF	; 255
    9ccc:	7f 07       	cpc	r23, r31
    9cce:	8f 07       	cpc	r24, r31
    9cd0:	9f 07       	cpc	r25, r31
    9cd2:	29 f4       	brne	.+10     	; 0x9cde <create_chain+0x6e>
    9cd4:	4f ef       	ldi	r20, 0xFF	; 255
    9cd6:	3f ef       	ldi	r19, 0xFF	; 255
    9cd8:	2f ef       	ldi	r18, 0xFF	; 255
    9cda:	9f ef       	ldi	r25, 0xFF	; 255
    9cdc:	e7 c0       	rjmp	.+462    	; 0x9eac <create_chain+0x23c>
    9cde:	c9 8c       	ldd	r12, Y+25	; 0x19
    9ce0:	da 8c       	ldd	r13, Y+26	; 0x1a
    9ce2:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9ce4:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9ce6:	6c 15       	cp	r22, r12
    9ce8:	7d 05       	cpc	r23, r13
    9cea:	8e 05       	cpc	r24, r14
    9cec:	9f 05       	cpc	r25, r15
    9cee:	08 f4       	brcc	.+2      	; 0x9cf2 <create_chain+0x82>
    9cf0:	da c0       	rjmp	.+436    	; 0x9ea6 <create_chain+0x236>
    9cf2:	53 01       	movw	r10, r6
    9cf4:	42 01       	movw	r8, r4
    9cf6:	04 c0       	rjmp	.+8      	; 0x9d00 <create_chain+0x90>
    9cf8:	81 2c       	mov	r8, r1
    9cfa:	91 2c       	mov	r9, r1
    9cfc:	54 01       	movw	r10, r8
    9cfe:	83 94       	inc	r8
    9d00:	89 89       	ldd	r24, Y+17	; 0x11
    9d02:	9a 89       	ldd	r25, Y+18	; 0x12
    9d04:	ab 89       	ldd	r26, Y+19	; 0x13
    9d06:	bc 89       	ldd	r27, Y+20	; 0x14
    9d08:	89 2b       	or	r24, r25
    9d0a:	8a 2b       	or	r24, r26
    9d0c:	8b 2b       	or	r24, r27
    9d0e:	11 f4       	brne	.+4      	; 0x9d14 <create_chain+0xa4>
    9d10:	40 e0       	ldi	r20, 0x00	; 0
    9d12:	c5 c0       	rjmp	.+394    	; 0x9e9e <create_chain+0x22e>
    9d14:	84 14       	cp	r8, r4
    9d16:	95 04       	cpc	r9, r5
    9d18:	a6 04       	cpc	r10, r6
    9d1a:	b7 04       	cpc	r11, r7
    9d1c:	09 f0       	breq	.+2      	; 0x9d20 <create_chain+0xb0>
    9d1e:	46 c0       	rjmp	.+140    	; 0x9dac <create_chain+0x13c>
    9d20:	75 01       	movw	r14, r10
    9d22:	64 01       	movw	r12, r8
    9d24:	2f ef       	ldi	r18, 0xFF	; 255
    9d26:	c2 1a       	sub	r12, r18
    9d28:	d2 0a       	sbc	r13, r18
    9d2a:	e2 0a       	sbc	r14, r18
    9d2c:	f2 0a       	sbc	r15, r18
    9d2e:	89 8d       	ldd	r24, Y+25	; 0x19
    9d30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9d32:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9d34:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9d36:	c8 16       	cp	r12, r24
    9d38:	d9 06       	cpc	r13, r25
    9d3a:	ea 06       	cpc	r14, r26
    9d3c:	fb 06       	cpc	r15, r27
    9d3e:	28 f0       	brcs	.+10     	; 0x9d4a <create_chain+0xda>
    9d40:	92 e0       	ldi	r25, 0x02	; 2
    9d42:	c9 2e       	mov	r12, r25
    9d44:	d1 2c       	mov	r13, r1
    9d46:	e1 2c       	mov	r14, r1
    9d48:	f1 2c       	mov	r15, r1
    9d4a:	b7 01       	movw	r22, r14
    9d4c:	a6 01       	movw	r20, r12
    9d4e:	f8 01       	movw	r30, r16
    9d50:	80 81       	ld	r24, Z
    9d52:	91 81       	ldd	r25, Z+1	; 0x01
    9d54:	18 de       	rcall	.-976    	; 0x9986 <get_fat.isra.10>
    9d56:	61 30       	cpi	r22, 0x01	; 1
    9d58:	71 05       	cpc	r23, r1
    9d5a:	81 05       	cpc	r24, r1
    9d5c:	91 05       	cpc	r25, r1
    9d5e:	09 f4       	brne	.+2      	; 0x9d62 <create_chain+0xf2>
    9d60:	9d c0       	rjmp	.+314    	; 0x9e9c <create_chain+0x22c>
    9d62:	6f 3f       	cpi	r22, 0xFF	; 255
    9d64:	ff ef       	ldi	r31, 0xFF	; 255
    9d66:	7f 07       	cpc	r23, r31
    9d68:	8f 07       	cpc	r24, r31
    9d6a:	9f 07       	cpc	r25, r31
    9d6c:	09 f4       	brne	.+2      	; 0x9d70 <create_chain+0x100>
    9d6e:	b2 cf       	rjmp	.-156    	; 0x9cd4 <create_chain+0x64>
    9d70:	67 2b       	or	r22, r23
    9d72:	68 2b       	or	r22, r24
    9d74:	69 2b       	or	r22, r25
    9d76:	a9 f0       	breq	.+42     	; 0x9da2 <create_chain+0x132>
    9d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    9d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    9d7c:	af 85       	ldd	r26, Y+15	; 0x0f
    9d7e:	b8 89       	ldd	r27, Y+16	; 0x10
    9d80:	82 30       	cpi	r24, 0x02	; 2
    9d82:	91 05       	cpc	r25, r1
    9d84:	a1 05       	cpc	r26, r1
    9d86:	b1 05       	cpc	r27, r1
    9d88:	88 f0       	brcs	.+34     	; 0x9dac <create_chain+0x13c>
    9d8a:	49 8d       	ldd	r20, Y+25	; 0x19
    9d8c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9d8e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9d90:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9d92:	84 17       	cp	r24, r20
    9d94:	95 07       	cpc	r25, r21
    9d96:	a6 07       	cpc	r26, r22
    9d98:	b7 07       	cpc	r27, r23
    9d9a:	40 f4       	brcc	.+16     	; 0x9dac <create_chain+0x13c>
    9d9c:	4c 01       	movw	r8, r24
    9d9e:	5d 01       	movw	r10, r26
    9da0:	05 c0       	rjmp	.+10     	; 0x9dac <create_chain+0x13c>
    9da2:	c1 14       	cp	r12, r1
    9da4:	d1 04       	cpc	r13, r1
    9da6:	e1 04       	cpc	r14, r1
    9da8:	f1 04       	cpc	r15, r1
    9daa:	c9 f5       	brne	.+114    	; 0x9e1e <create_chain+0x1ae>
    9dac:	75 01       	movw	r14, r10
    9dae:	64 01       	movw	r12, r8
    9db0:	2f ef       	ldi	r18, 0xFF	; 255
    9db2:	c2 1a       	sub	r12, r18
    9db4:	d2 0a       	sbc	r13, r18
    9db6:	e2 0a       	sbc	r14, r18
    9db8:	f2 0a       	sbc	r15, r18
    9dba:	89 8d       	ldd	r24, Y+25	; 0x19
    9dbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9dbe:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9dc0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9dc2:	c8 16       	cp	r12, r24
    9dc4:	d9 06       	cpc	r13, r25
    9dc6:	ea 06       	cpc	r14, r26
    9dc8:	fb 06       	cpc	r15, r27
    9dca:	60 f0       	brcs	.+24     	; 0x9de4 <create_chain+0x174>
    9dcc:	82 e0       	ldi	r24, 0x02	; 2
    9dce:	88 16       	cp	r8, r24
    9dd0:	91 04       	cpc	r9, r1
    9dd2:	a1 04       	cpc	r10, r1
    9dd4:	b1 04       	cpc	r11, r1
    9dd6:	08 f4       	brcc	.+2      	; 0x9dda <create_chain+0x16a>
    9dd8:	9b cf       	rjmp	.-202    	; 0x9d10 <create_chain+0xa0>
    9dda:	82 e0       	ldi	r24, 0x02	; 2
    9ddc:	c8 2e       	mov	r12, r24
    9dde:	d1 2c       	mov	r13, r1
    9de0:	e1 2c       	mov	r14, r1
    9de2:	f1 2c       	mov	r15, r1
    9de4:	b7 01       	movw	r22, r14
    9de6:	a6 01       	movw	r20, r12
    9de8:	f8 01       	movw	r30, r16
    9dea:	80 81       	ld	r24, Z
    9dec:	91 81       	ldd	r25, Z+1	; 0x01
    9dee:	cb dd       	rcall	.-1130   	; 0x9986 <get_fat.isra.10>
    9df0:	61 15       	cp	r22, r1
    9df2:	71 05       	cpc	r23, r1
    9df4:	81 05       	cpc	r24, r1
    9df6:	91 05       	cpc	r25, r1
    9df8:	91 f0       	breq	.+36     	; 0x9e1e <create_chain+0x1ae>
    9dfa:	61 30       	cpi	r22, 0x01	; 1
    9dfc:	71 05       	cpc	r23, r1
    9dfe:	81 05       	cpc	r24, r1
    9e00:	91 05       	cpc	r25, r1
    9e02:	09 f4       	brne	.+2      	; 0x9e06 <create_chain+0x196>
    9e04:	4b c0       	rjmp	.+150    	; 0x9e9c <create_chain+0x22c>
    9e06:	6f 3f       	cpi	r22, 0xFF	; 255
    9e08:	7f 4f       	sbci	r23, 0xFF	; 255
    9e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    9e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    9e0e:	09 f4       	brne	.+2      	; 0x9e12 <create_chain+0x1a2>
    9e10:	61 cf       	rjmp	.-318    	; 0x9cd4 <create_chain+0x64>
    9e12:	c8 14       	cp	r12, r8
    9e14:	d9 04       	cpc	r13, r9
    9e16:	ea 04       	cpc	r14, r10
    9e18:	fb 04       	cpc	r15, r11
    9e1a:	51 f6       	brne	.-108    	; 0x9db0 <create_chain+0x140>
    9e1c:	79 cf       	rjmp	.-270    	; 0x9d10 <create_chain+0xa0>
    9e1e:	0f ef       	ldi	r16, 0xFF	; 255
    9e20:	1f ef       	ldi	r17, 0xFF	; 255
    9e22:	98 01       	movw	r18, r16
    9e24:	b7 01       	movw	r22, r14
    9e26:	a6 01       	movw	r20, r12
    9e28:	ce 01       	movw	r24, r28
    9e2a:	b2 dc       	rcall	.-1692   	; 0x9790 <put_fat>
    9e2c:	00 97       	sbiw	r24, 0x00	; 0
    9e2e:	99 f5       	brne	.+102    	; 0x9e96 <create_chain+0x226>
    9e30:	41 14       	cp	r4, r1
    9e32:	51 04       	cpc	r5, r1
    9e34:	61 04       	cpc	r6, r1
    9e36:	71 04       	cpc	r7, r1
    9e38:	e9 f4       	brne	.+58     	; 0x9e74 <create_chain+0x204>
    9e3a:	cd 86       	std	Y+13, r12	; 0x0d
    9e3c:	de 86       	std	Y+14, r13	; 0x0e
    9e3e:	ef 86       	std	Y+15, r14	; 0x0f
    9e40:	f8 8a       	std	Y+16, r15	; 0x10
    9e42:	89 89       	ldd	r24, Y+17	; 0x11
    9e44:	9a 89       	ldd	r25, Y+18	; 0x12
    9e46:	ab 89       	ldd	r26, Y+19	; 0x13
    9e48:	bc 89       	ldd	r27, Y+20	; 0x14
    9e4a:	49 8d       	ldd	r20, Y+25	; 0x19
    9e4c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9e4e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9e50:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9e52:	42 50       	subi	r20, 0x02	; 2
    9e54:	51 09       	sbc	r21, r1
    9e56:	61 09       	sbc	r22, r1
    9e58:	71 09       	sbc	r23, r1
    9e5a:	48 17       	cp	r20, r24
    9e5c:	59 07       	cpc	r21, r25
    9e5e:	6a 07       	cpc	r22, r26
    9e60:	7b 07       	cpc	r23, r27
    9e62:	88 f0       	brcs	.+34     	; 0x9e86 <create_chain+0x216>
    9e64:	01 97       	sbiw	r24, 0x01	; 1
    9e66:	a1 09       	sbc	r26, r1
    9e68:	b1 09       	sbc	r27, r1
    9e6a:	89 8b       	std	Y+17, r24	; 0x11
    9e6c:	9a 8b       	std	Y+18, r25	; 0x12
    9e6e:	ab 8b       	std	Y+19, r26	; 0x13
    9e70:	bc 8b       	std	Y+20, r27	; 0x14
    9e72:	09 c0       	rjmp	.+18     	; 0x9e86 <create_chain+0x216>
    9e74:	97 01       	movw	r18, r14
    9e76:	86 01       	movw	r16, r12
    9e78:	b3 01       	movw	r22, r6
    9e7a:	a2 01       	movw	r20, r4
    9e7c:	ce 01       	movw	r24, r28
    9e7e:	88 dc       	rcall	.-1776   	; 0x9790 <put_fat>
    9e80:	00 97       	sbiw	r24, 0x00	; 0
    9e82:	d9 f2       	breq	.-74     	; 0x9e3a <create_chain+0x1ca>
    9e84:	08 c0       	rjmp	.+16     	; 0x9e96 <create_chain+0x226>
    9e86:	8c 81       	ldd	r24, Y+4	; 0x04
    9e88:	81 60       	ori	r24, 0x01	; 1
    9e8a:	8c 83       	std	Y+4, r24	; 0x04
    9e8c:	4c 2d       	mov	r20, r12
    9e8e:	3d 2d       	mov	r19, r13
    9e90:	2e 2d       	mov	r18, r14
    9e92:	9f 2d       	mov	r25, r15
    9e94:	0b c0       	rjmp	.+22     	; 0x9eac <create_chain+0x23c>
    9e96:	01 97       	sbiw	r24, 0x01	; 1
    9e98:	09 f4       	brne	.+2      	; 0x9e9c <create_chain+0x22c>
    9e9a:	1c cf       	rjmp	.-456    	; 0x9cd4 <create_chain+0x64>
    9e9c:	41 e0       	ldi	r20, 0x01	; 1
    9e9e:	30 e0       	ldi	r19, 0x00	; 0
    9ea0:	20 e0       	ldi	r18, 0x00	; 0
    9ea2:	90 e0       	ldi	r25, 0x00	; 0
    9ea4:	03 c0       	rjmp	.+6      	; 0x9eac <create_chain+0x23c>
    9ea6:	46 2f       	mov	r20, r22
    9ea8:	37 2f       	mov	r19, r23
    9eaa:	28 2f       	mov	r18, r24
    9eac:	64 2f       	mov	r22, r20
    9eae:	73 2f       	mov	r23, r19
    9eb0:	82 2f       	mov	r24, r18
    9eb2:	cd b7       	in	r28, 0x3d	; 61
    9eb4:	de b7       	in	r29, 0x3e	; 62
    9eb6:	e0 e1       	ldi	r30, 0x10	; 16
    9eb8:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__epilogue_restores__+0x4>

00009ebc <remove_chain>:
    9ebc:	4f 92       	push	r4
    9ebe:	5f 92       	push	r5
    9ec0:	6f 92       	push	r6
    9ec2:	7f 92       	push	r7
    9ec4:	af 92       	push	r10
    9ec6:	bf 92       	push	r11
    9ec8:	cf 92       	push	r12
    9eca:	df 92       	push	r13
    9ecc:	ef 92       	push	r14
    9ece:	ff 92       	push	r15
    9ed0:	0f 93       	push	r16
    9ed2:	1f 93       	push	r17
    9ed4:	cf 93       	push	r28
    9ed6:	df 93       	push	r29
    9ed8:	5c 01       	movw	r10, r24
    9eda:	6a 01       	movw	r12, r20
    9edc:	7b 01       	movw	r14, r22
    9ede:	b9 01       	movw	r22, r18
    9ee0:	a8 01       	movw	r20, r16
    9ee2:	22 e0       	ldi	r18, 0x02	; 2
    9ee4:	c2 16       	cp	r12, r18
    9ee6:	d1 04       	cpc	r13, r1
    9ee8:	e1 04       	cpc	r14, r1
    9eea:	f1 04       	cpc	r15, r1
    9eec:	10 f4       	brcc	.+4      	; 0x9ef2 <remove_chain+0x36>
    9eee:	22 e0       	ldi	r18, 0x02	; 2
    9ef0:	27 c0       	rjmp	.+78     	; 0x9f40 <remove_chain+0x84>
    9ef2:	fc 01       	movw	r30, r24
    9ef4:	c0 81       	ld	r28, Z
    9ef6:	d1 81       	ldd	r29, Z+1	; 0x01
    9ef8:	89 8d       	ldd	r24, Y+25	; 0x19
    9efa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9efc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9efe:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f00:	c8 16       	cp	r12, r24
    9f02:	d9 06       	cpc	r13, r25
    9f04:	ea 06       	cpc	r14, r26
    9f06:	fb 06       	cpc	r15, r27
    9f08:	90 f7       	brcc	.-28     	; 0x9eee <remove_chain+0x32>
    9f0a:	41 15       	cp	r20, r1
    9f0c:	51 05       	cpc	r21, r1
    9f0e:	61 05       	cpc	r22, r1
    9f10:	71 05       	cpc	r23, r1
    9f12:	41 f0       	breq	.+16     	; 0x9f24 <remove_chain+0x68>
    9f14:	0f ef       	ldi	r16, 0xFF	; 255
    9f16:	1f ef       	ldi	r17, 0xFF	; 255
    9f18:	98 01       	movw	r18, r16
    9f1a:	ce 01       	movw	r24, r28
    9f1c:	39 dc       	rcall	.-1934   	; 0x9790 <put_fat>
    9f1e:	00 97       	sbiw	r24, 0x00	; 0
    9f20:	09 f0       	breq	.+2      	; 0x9f24 <remove_chain+0x68>
    9f22:	4c c0       	rjmp	.+152    	; 0x9fbc <remove_chain+0x100>
    9f24:	b7 01       	movw	r22, r14
    9f26:	a6 01       	movw	r20, r12
    9f28:	f5 01       	movw	r30, r10
    9f2a:	80 81       	ld	r24, Z
    9f2c:	91 81       	ldd	r25, Z+1	; 0x01
    9f2e:	2b dd       	rcall	.-1450   	; 0x9986 <get_fat.isra.10>
    9f30:	2b 01       	movw	r4, r22
    9f32:	3c 01       	movw	r6, r24
    9f34:	61 15       	cp	r22, r1
    9f36:	71 05       	cpc	r23, r1
    9f38:	81 05       	cpc	r24, r1
    9f3a:	91 05       	cpc	r25, r1
    9f3c:	19 f4       	brne	.+6      	; 0x9f44 <remove_chain+0x88>
    9f3e:	20 e0       	ldi	r18, 0x00	; 0
    9f40:	90 e0       	ldi	r25, 0x00	; 0
    9f42:	3d c0       	rjmp	.+122    	; 0x9fbe <remove_chain+0x102>
    9f44:	61 30       	cpi	r22, 0x01	; 1
    9f46:	71 05       	cpc	r23, r1
    9f48:	81 05       	cpc	r24, r1
    9f4a:	91 05       	cpc	r25, r1
    9f4c:	81 f2       	breq	.-96     	; 0x9eee <remove_chain+0x32>
    9f4e:	6f 3f       	cpi	r22, 0xFF	; 255
    9f50:	7f 4f       	sbci	r23, 0xFF	; 255
    9f52:	8f 4f       	sbci	r24, 0xFF	; 255
    9f54:	9f 4f       	sbci	r25, 0xFF	; 255
    9f56:	81 f1       	breq	.+96     	; 0x9fb8 <remove_chain+0xfc>
    9f58:	00 e0       	ldi	r16, 0x00	; 0
    9f5a:	10 e0       	ldi	r17, 0x00	; 0
    9f5c:	98 01       	movw	r18, r16
    9f5e:	b7 01       	movw	r22, r14
    9f60:	a6 01       	movw	r20, r12
    9f62:	ce 01       	movw	r24, r28
    9f64:	15 dc       	rcall	.-2006   	; 0x9790 <put_fat>
    9f66:	00 97       	sbiw	r24, 0x00	; 0
    9f68:	49 f5       	brne	.+82     	; 0x9fbc <remove_chain+0x100>
    9f6a:	89 89       	ldd	r24, Y+17	; 0x11
    9f6c:	9a 89       	ldd	r25, Y+18	; 0x12
    9f6e:	ab 89       	ldd	r26, Y+19	; 0x13
    9f70:	bc 89       	ldd	r27, Y+20	; 0x14
    9f72:	49 8d       	ldd	r20, Y+25	; 0x19
    9f74:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9f76:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9f78:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9f7a:	6a 01       	movw	r12, r20
    9f7c:	7b 01       	movw	r14, r22
    9f7e:	e2 e0       	ldi	r30, 0x02	; 2
    9f80:	ce 1a       	sub	r12, r30
    9f82:	d1 08       	sbc	r13, r1
    9f84:	e1 08       	sbc	r14, r1
    9f86:	f1 08       	sbc	r15, r1
    9f88:	8c 15       	cp	r24, r12
    9f8a:	9d 05       	cpc	r25, r13
    9f8c:	ae 05       	cpc	r26, r14
    9f8e:	bf 05       	cpc	r27, r15
    9f90:	50 f4       	brcc	.+20     	; 0x9fa6 <remove_chain+0xea>
    9f92:	01 96       	adiw	r24, 0x01	; 1
    9f94:	a1 1d       	adc	r26, r1
    9f96:	b1 1d       	adc	r27, r1
    9f98:	89 8b       	std	Y+17, r24	; 0x11
    9f9a:	9a 8b       	std	Y+18, r25	; 0x12
    9f9c:	ab 8b       	std	Y+19, r26	; 0x13
    9f9e:	bc 8b       	std	Y+20, r27	; 0x14
    9fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    9fa2:	81 60       	ori	r24, 0x01	; 1
    9fa4:	8c 83       	std	Y+4, r24	; 0x04
    9fa6:	73 01       	movw	r14, r6
    9fa8:	62 01       	movw	r12, r4
    9faa:	44 16       	cp	r4, r20
    9fac:	55 06       	cpc	r5, r21
    9fae:	66 06       	cpc	r6, r22
    9fb0:	77 06       	cpc	r7, r23
    9fb2:	08 f4       	brcc	.+2      	; 0x9fb6 <remove_chain+0xfa>
    9fb4:	b7 cf       	rjmp	.-146    	; 0x9f24 <remove_chain+0x68>
    9fb6:	c3 cf       	rjmp	.-122    	; 0x9f3e <remove_chain+0x82>
    9fb8:	21 e0       	ldi	r18, 0x01	; 1
    9fba:	c2 cf       	rjmp	.-124    	; 0x9f40 <remove_chain+0x84>
    9fbc:	28 2f       	mov	r18, r24
    9fbe:	82 2f       	mov	r24, r18
    9fc0:	df 91       	pop	r29
    9fc2:	cf 91       	pop	r28
    9fc4:	1f 91       	pop	r17
    9fc6:	0f 91       	pop	r16
    9fc8:	ff 90       	pop	r15
    9fca:	ef 90       	pop	r14
    9fcc:	df 90       	pop	r13
    9fce:	cf 90       	pop	r12
    9fd0:	bf 90       	pop	r11
    9fd2:	af 90       	pop	r10
    9fd4:	7f 90       	pop	r7
    9fd6:	6f 90       	pop	r6
    9fd8:	5f 90       	pop	r5
    9fda:	4f 90       	pop	r4
    9fdc:	08 95       	ret

00009fde <dir_next>:
    9fde:	4f 92       	push	r4
    9fe0:	5f 92       	push	r5
    9fe2:	6f 92       	push	r6
    9fe4:	7f 92       	push	r7
    9fe6:	af 92       	push	r10
    9fe8:	bf 92       	push	r11
    9fea:	cf 92       	push	r12
    9fec:	df 92       	push	r13
    9fee:	ef 92       	push	r14
    9ff0:	ff 92       	push	r15
    9ff2:	0f 93       	push	r16
    9ff4:	1f 93       	push	r17
    9ff6:	cf 93       	push	r28
    9ff8:	df 93       	push	r29
    9ffa:	ec 01       	movw	r28, r24
    9ffc:	08 81       	ld	r16, Y
    9ffe:	19 81       	ldd	r17, Y+1	; 0x01
    a000:	ce 84       	ldd	r12, Y+14	; 0x0e
    a002:	df 84       	ldd	r13, Y+15	; 0x0f
    a004:	e8 88       	ldd	r14, Y+16	; 0x10
    a006:	f9 88       	ldd	r15, Y+17	; 0x11
    a008:	80 e2       	ldi	r24, 0x20	; 32
    a00a:	c8 0e       	add	r12, r24
    a00c:	d1 1c       	adc	r13, r1
    a00e:	e1 1c       	adc	r14, r1
    a010:	f1 1c       	adc	r15, r1
    a012:	c1 14       	cp	r12, r1
    a014:	d1 04       	cpc	r13, r1
    a016:	e0 e2       	ldi	r30, 0x20	; 32
    a018:	ee 06       	cpc	r14, r30
    a01a:	f1 04       	cpc	r15, r1
    a01c:	20 f0       	brcs	.+8      	; 0xa026 <dir_next+0x48>
    a01e:	1e 8a       	std	Y+22, r1	; 0x16
    a020:	1f 8a       	std	Y+23, r1	; 0x17
    a022:	18 8e       	std	Y+24, r1	; 0x18
    a024:	19 8e       	std	Y+25, r1	; 0x19
    a026:	8e 89       	ldd	r24, Y+22	; 0x16
    a028:	9f 89       	ldd	r25, Y+23	; 0x17
    a02a:	a8 8d       	ldd	r26, Y+24	; 0x18
    a02c:	b9 8d       	ldd	r27, Y+25	; 0x19
    a02e:	00 97       	sbiw	r24, 0x00	; 0
    a030:	a1 05       	cpc	r26, r1
    a032:	b1 05       	cpc	r27, r1
    a034:	09 f4       	brne	.+2      	; 0xa038 <dir_next+0x5a>
    a036:	a7 c0       	rjmp	.+334    	; 0xa186 <dir_next+0x1a8>
    a038:	5b 01       	movw	r10, r22
    a03a:	b7 01       	movw	r22, r14
    a03c:	a6 01       	movw	r20, r12
    a03e:	51 70       	andi	r21, 0x01	; 1
    a040:	66 27       	eor	r22, r22
    a042:	77 27       	eor	r23, r23
    a044:	45 2b       	or	r20, r21
    a046:	46 2b       	or	r20, r22
    a048:	47 2b       	or	r20, r23
    a04a:	09 f0       	breq	.+2      	; 0xa04e <dir_next+0x70>
    a04c:	8d c0       	rjmp	.+282    	; 0xa168 <dir_next+0x18a>
    a04e:	01 96       	adiw	r24, 0x01	; 1
    a050:	a1 1d       	adc	r26, r1
    a052:	b1 1d       	adc	r27, r1
    a054:	8e 8b       	std	Y+22, r24	; 0x16
    a056:	9f 8b       	std	Y+23, r25	; 0x17
    a058:	a8 8f       	std	Y+24, r26	; 0x18
    a05a:	b9 8f       	std	Y+25, r27	; 0x19
    a05c:	4a 89       	ldd	r20, Y+18	; 0x12
    a05e:	5b 89       	ldd	r21, Y+19	; 0x13
    a060:	6c 89       	ldd	r22, Y+20	; 0x14
    a062:	7d 89       	ldd	r23, Y+21	; 0x15
    a064:	f8 01       	movw	r30, r16
    a066:	41 15       	cp	r20, r1
    a068:	51 05       	cpc	r21, r1
    a06a:	61 05       	cpc	r22, r1
    a06c:	71 05       	cpc	r23, r1
    a06e:	c1 f4       	brne	.+48     	; 0xa0a0 <dir_next+0xc2>
    a070:	87 81       	ldd	r24, Z+7	; 0x07
    a072:	90 85       	ldd	r25, Z+8	; 0x08
    a074:	a0 e0       	ldi	r26, 0x00	; 0
    a076:	b0 e0       	ldi	r27, 0x00	; 0
    a078:	b7 01       	movw	r22, r14
    a07a:	a6 01       	movw	r20, r12
    a07c:	35 e0       	ldi	r19, 0x05	; 5
    a07e:	76 95       	lsr	r23
    a080:	67 95       	ror	r22
    a082:	57 95       	ror	r21
    a084:	47 95       	ror	r20
    a086:	3a 95       	dec	r19
    a088:	d1 f7       	brne	.-12     	; 0xa07e <dir_next+0xa0>
    a08a:	48 17       	cp	r20, r24
    a08c:	59 07       	cpc	r21, r25
    a08e:	6a 07       	cpc	r22, r26
    a090:	7b 07       	cpc	r23, r27
    a092:	08 f4       	brcc	.+2      	; 0xa096 <dir_next+0xb8>
    a094:	69 c0       	rjmp	.+210    	; 0xa168 <dir_next+0x18a>
    a096:	1e 8a       	std	Y+22, r1	; 0x16
    a098:	1f 8a       	std	Y+23, r1	; 0x17
    a09a:	18 8e       	std	Y+24, r1	; 0x18
    a09c:	19 8e       	std	Y+25, r1	; 0x19
    a09e:	73 c0       	rjmp	.+230    	; 0xa186 <dir_next+0x1a8>
    a0a0:	81 85       	ldd	r24, Z+9	; 0x09
    a0a2:	92 85       	ldd	r25, Z+10	; 0x0a
    a0a4:	01 97       	sbiw	r24, 0x01	; 1
    a0a6:	a0 e0       	ldi	r26, 0x00	; 0
    a0a8:	b0 e0       	ldi	r27, 0x00	; 0
    a0aa:	26 01       	movw	r4, r12
    a0ac:	37 01       	movw	r6, r14
    a0ae:	29 e0       	ldi	r18, 0x09	; 9
    a0b0:	76 94       	lsr	r7
    a0b2:	67 94       	ror	r6
    a0b4:	57 94       	ror	r5
    a0b6:	47 94       	ror	r4
    a0b8:	2a 95       	dec	r18
    a0ba:	d1 f7       	brne	.-12     	; 0xa0b0 <dir_next+0xd2>
    a0bc:	84 21       	and	r24, r4
    a0be:	95 21       	and	r25, r5
    a0c0:	a6 21       	and	r26, r6
    a0c2:	b7 21       	and	r27, r7
    a0c4:	89 2b       	or	r24, r25
    a0c6:	8a 2b       	or	r24, r26
    a0c8:	8b 2b       	or	r24, r27
    a0ca:	09 f0       	breq	.+2      	; 0xa0ce <dir_next+0xf0>
    a0cc:	4d c0       	rjmp	.+154    	; 0xa168 <dir_next+0x18a>
    a0ce:	c8 01       	movw	r24, r16
    a0d0:	5a dc       	rcall	.-1868   	; 0x9986 <get_fat.isra.10>
    a0d2:	2b 01       	movw	r4, r22
    a0d4:	3c 01       	movw	r6, r24
    a0d6:	62 30       	cpi	r22, 0x02	; 2
    a0d8:	71 05       	cpc	r23, r1
    a0da:	81 05       	cpc	r24, r1
    a0dc:	91 05       	cpc	r25, r1
    a0de:	18 f4       	brcc	.+6      	; 0xa0e6 <dir_next+0x108>
    a0e0:	82 e0       	ldi	r24, 0x02	; 2
    a0e2:	90 e0       	ldi	r25, 0x00	; 0
    a0e4:	55 c0       	rjmp	.+170    	; 0xa190 <dir_next+0x1b2>
    a0e6:	8f ef       	ldi	r24, 0xFF	; 255
    a0e8:	48 16       	cp	r4, r24
    a0ea:	58 06       	cpc	r5, r24
    a0ec:	68 06       	cpc	r6, r24
    a0ee:	78 06       	cpc	r7, r24
    a0f0:	19 f4       	brne	.+6      	; 0xa0f8 <dir_next+0x11a>
    a0f2:	81 e0       	ldi	r24, 0x01	; 1
    a0f4:	90 e0       	ldi	r25, 0x00	; 0
    a0f6:	4c c0       	rjmp	.+152    	; 0xa190 <dir_next+0x1b2>
    a0f8:	f8 01       	movw	r30, r16
    a0fa:	81 8d       	ldd	r24, Z+25	; 0x19
    a0fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    a0fe:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a100:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a102:	48 16       	cp	r4, r24
    a104:	59 06       	cpc	r5, r25
    a106:	6a 06       	cpc	r6, r26
    a108:	7b 06       	cpc	r7, r27
    a10a:	08 f1       	brcs	.+66     	; 0xa14e <dir_next+0x170>
    a10c:	ab 28       	or	r10, r11
    a10e:	19 f2       	breq	.-122    	; 0xa096 <dir_next+0xb8>
    a110:	4a 89       	ldd	r20, Y+18	; 0x12
    a112:	5b 89       	ldd	r21, Y+19	; 0x13
    a114:	6c 89       	ldd	r22, Y+20	; 0x14
    a116:	7d 89       	ldd	r23, Y+21	; 0x15
    a118:	ce 01       	movw	r24, r28
    a11a:	aa dd       	rcall	.-1196   	; 0x9c70 <create_chain>
    a11c:	2b 01       	movw	r4, r22
    a11e:	3c 01       	movw	r6, r24
    a120:	61 15       	cp	r22, r1
    a122:	71 05       	cpc	r23, r1
    a124:	81 05       	cpc	r24, r1
    a126:	91 05       	cpc	r25, r1
    a128:	89 f1       	breq	.+98     	; 0xa18c <dir_next+0x1ae>
    a12a:	61 30       	cpi	r22, 0x01	; 1
    a12c:	71 05       	cpc	r23, r1
    a12e:	81 05       	cpc	r24, r1
    a130:	91 05       	cpc	r25, r1
    a132:	b1 f2       	breq	.-84     	; 0xa0e0 <dir_next+0x102>
    a134:	8f ef       	ldi	r24, 0xFF	; 255
    a136:	48 16       	cp	r4, r24
    a138:	58 06       	cpc	r5, r24
    a13a:	68 06       	cpc	r6, r24
    a13c:	78 06       	cpc	r7, r24
    a13e:	c9 f2       	breq	.-78     	; 0xa0f2 <dir_next+0x114>
    a140:	b3 01       	movw	r22, r6
    a142:	a2 01       	movw	r20, r4
    a144:	c8 01       	movw	r24, r16
    a146:	0e 94 4b 48 	call	0x9096	; 0x9096 <dir_clear>
    a14a:	89 2b       	or	r24, r25
    a14c:	91 f6       	brne	.-92     	; 0xa0f2 <dir_next+0x114>
    a14e:	4a 8a       	std	Y+18, r4	; 0x12
    a150:	5b 8a       	std	Y+19, r5	; 0x13
    a152:	6c 8a       	std	Y+20, r6	; 0x14
    a154:	7d 8a       	std	Y+21, r7	; 0x15
    a156:	b3 01       	movw	r22, r6
    a158:	a2 01       	movw	r20, r4
    a15a:	c8 01       	movw	r24, r16
    a15c:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <clst2sect>
    a160:	6e 8b       	std	Y+22, r22	; 0x16
    a162:	7f 8b       	std	Y+23, r23	; 0x17
    a164:	88 8f       	std	Y+24, r24	; 0x18
    a166:	99 8f       	std	Y+25, r25	; 0x19
    a168:	ce 86       	std	Y+14, r12	; 0x0e
    a16a:	df 86       	std	Y+15, r13	; 0x0f
    a16c:	e8 8a       	std	Y+16, r14	; 0x10
    a16e:	f9 8a       	std	Y+17, r15	; 0x11
    a170:	0b 5c       	subi	r16, 0xCB	; 203
    a172:	1f 4f       	sbci	r17, 0xFF	; 255
    a174:	e1 e0       	ldi	r30, 0x01	; 1
    a176:	de 22       	and	r13, r30
    a178:	c0 0e       	add	r12, r16
    a17a:	d1 1e       	adc	r13, r17
    a17c:	db 8e       	std	Y+27, r13	; 0x1b
    a17e:	ca 8e       	std	Y+26, r12	; 0x1a
    a180:	80 e0       	ldi	r24, 0x00	; 0
    a182:	90 e0       	ldi	r25, 0x00	; 0
    a184:	05 c0       	rjmp	.+10     	; 0xa190 <dir_next+0x1b2>
    a186:	84 e0       	ldi	r24, 0x04	; 4
    a188:	90 e0       	ldi	r25, 0x00	; 0
    a18a:	02 c0       	rjmp	.+4      	; 0xa190 <dir_next+0x1b2>
    a18c:	87 e0       	ldi	r24, 0x07	; 7
    a18e:	90 e0       	ldi	r25, 0x00	; 0
    a190:	df 91       	pop	r29
    a192:	cf 91       	pop	r28
    a194:	1f 91       	pop	r17
    a196:	0f 91       	pop	r16
    a198:	ff 90       	pop	r15
    a19a:	ef 90       	pop	r14
    a19c:	df 90       	pop	r13
    a19e:	cf 90       	pop	r12
    a1a0:	bf 90       	pop	r11
    a1a2:	af 90       	pop	r10
    a1a4:	7f 90       	pop	r7
    a1a6:	6f 90       	pop	r6
    a1a8:	5f 90       	pop	r5
    a1aa:	4f 90       	pop	r4
    a1ac:	08 95       	ret

0000a1ae <dir_alloc>:
    a1ae:	a0 e0       	ldi	r26, 0x00	; 0
    a1b0:	b0 e0       	ldi	r27, 0x00	; 0
    a1b2:	ed ed       	ldi	r30, 0xDD	; 221
    a1b4:	f0 e5       	ldi	r31, 0x50	; 80
    a1b6:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    a1ba:	ec 01       	movw	r28, r24
    a1bc:	6b 01       	movw	r12, r22
    a1be:	e8 80       	ld	r14, Y
    a1c0:	f9 80       	ldd	r15, Y+1	; 0x01
    a1c2:	40 e0       	ldi	r20, 0x00	; 0
    a1c4:	50 e0       	ldi	r21, 0x00	; 0
    a1c6:	ba 01       	movw	r22, r20
    a1c8:	92 dc       	rcall	.-1756   	; 0x9aee <dir_sdi>
    a1ca:	00 97       	sbiw	r24, 0x00	; 0
    a1cc:	f9 f4       	brne	.+62     	; 0xa20c <dir_alloc+0x5e>
    a1ce:	00 e0       	ldi	r16, 0x00	; 0
    a1d0:	10 e0       	ldi	r17, 0x00	; 0
    a1d2:	4e 89       	ldd	r20, Y+22	; 0x16
    a1d4:	5f 89       	ldd	r21, Y+23	; 0x17
    a1d6:	68 8d       	ldd	r22, Y+24	; 0x18
    a1d8:	79 8d       	ldd	r23, Y+25	; 0x19
    a1da:	c7 01       	movw	r24, r14
    a1dc:	04 d8       	rcall	.-4088   	; 0x91e6 <move_window>
    a1de:	00 97       	sbiw	r24, 0x00	; 0
    a1e0:	a9 f4       	brne	.+42     	; 0xa20c <dir_alloc+0x5e>
    a1e2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a1e4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a1e6:	20 81       	ld	r18, Z
    a1e8:	25 3e       	cpi	r18, 0xE5	; 229
    a1ea:	11 f0       	breq	.+4      	; 0xa1f0 <dir_alloc+0x42>
    a1ec:	21 11       	cpse	r18, r1
    a1ee:	06 c0       	rjmp	.+12     	; 0xa1fc <dir_alloc+0x4e>
    a1f0:	0f 5f       	subi	r16, 0xFF	; 255
    a1f2:	1f 4f       	sbci	r17, 0xFF	; 255
    a1f4:	0c 15       	cp	r16, r12
    a1f6:	1d 05       	cpc	r17, r13
    a1f8:	19 f4       	brne	.+6      	; 0xa200 <dir_alloc+0x52>
    a1fa:	0d c0       	rjmp	.+26     	; 0xa216 <dir_alloc+0x68>
    a1fc:	00 e0       	ldi	r16, 0x00	; 0
    a1fe:	10 e0       	ldi	r17, 0x00	; 0
    a200:	61 e0       	ldi	r22, 0x01	; 1
    a202:	70 e0       	ldi	r23, 0x00	; 0
    a204:	ce 01       	movw	r24, r28
    a206:	eb de       	rcall	.-554    	; 0x9fde <dir_next>
    a208:	00 97       	sbiw	r24, 0x00	; 0
    a20a:	19 f3       	breq	.-58     	; 0xa1d2 <dir_alloc+0x24>
    a20c:	84 30       	cpi	r24, 0x04	; 4
    a20e:	91 05       	cpc	r25, r1
    a210:	11 f4       	brne	.+4      	; 0xa216 <dir_alloc+0x68>
    a212:	87 e0       	ldi	r24, 0x07	; 7
    a214:	90 e0       	ldi	r25, 0x00	; 0
    a216:	cd b7       	in	r28, 0x3d	; 61
    a218:	de b7       	in	r29, 0x3e	; 62
    a21a:	e8 e0       	ldi	r30, 0x08	; 8
    a21c:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000a220 <dir_read>:
    a220:	a0 e0       	ldi	r26, 0x00	; 0
    a222:	b0 e0       	ldi	r27, 0x00	; 0
    a224:	e6 e1       	ldi	r30, 0x16	; 22
    a226:	f1 e5       	ldi	r31, 0x51	; 81
    a228:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
    a22c:	ec 01       	movw	r28, r24
    a22e:	7b 01       	movw	r14, r22
    a230:	a8 80       	ld	r10, Y
    a232:	b9 80       	ldd	r11, Y+1	; 0x01
    a234:	dd 24       	eor	r13, r13
    a236:	da 94       	dec	r13
    a238:	1f ef       	ldi	r17, 0xFF	; 255
    a23a:	84 e0       	ldi	r24, 0x04	; 4
    a23c:	90 e0       	ldi	r25, 0x00	; 0
    a23e:	fd e0       	ldi	r31, 0x0D	; 13
    a240:	cf 2e       	mov	r12, r31
    a242:	4e 89       	ldd	r20, Y+22	; 0x16
    a244:	5f 89       	ldd	r21, Y+23	; 0x17
    a246:	68 8d       	ldd	r22, Y+24	; 0x18
    a248:	79 8d       	ldd	r23, Y+25	; 0x19
    a24a:	41 15       	cp	r20, r1
    a24c:	51 05       	cpc	r21, r1
    a24e:	61 05       	cpc	r22, r1
    a250:	71 05       	cpc	r23, r1
    a252:	09 f4       	brne	.+2      	; 0xa256 <dir_read+0x36>
    a254:	9a c0       	rjmp	.+308    	; 0xa38a <dir_read+0x16a>
    a256:	c5 01       	movw	r24, r10
    a258:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    a25c:	00 97       	sbiw	r24, 0x00	; 0
    a25e:	09 f0       	breq	.+2      	; 0xa262 <dir_read+0x42>
    a260:	96 c0       	rjmp	.+300    	; 0xa38e <dir_read+0x16e>
    a262:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a264:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a266:	f4 01       	movw	r30, r8
    a268:	00 81       	ld	r16, Z
    a26a:	00 23       	and	r16, r16
    a26c:	09 f4       	brne	.+2      	; 0xa270 <dir_read+0x50>
    a26e:	97 c0       	rjmp	.+302    	; 0xa39e <dir_read+0x17e>
    a270:	83 85       	ldd	r24, Z+11	; 0x0b
    a272:	8f 73       	andi	r24, 0x3F	; 63
    a274:	8c 83       	std	Y+4, r24	; 0x04
    a276:	05 3e       	cpi	r16, 0xE5	; 229
    a278:	09 f4       	brne	.+2      	; 0xa27c <dir_read+0x5c>
    a27a:	7e c0       	rjmp	.+252    	; 0xa378 <dir_read+0x158>
    a27c:	0e 32       	cpi	r16, 0x2E	; 46
    a27e:	09 f4       	brne	.+2      	; 0xa282 <dir_read+0x62>
    a280:	7b c0       	rjmp	.+246    	; 0xa378 <dir_read+0x158>
    a282:	21 e0       	ldi	r18, 0x01	; 1
    a284:	30 e0       	ldi	r19, 0x00	; 0
    a286:	98 2f       	mov	r25, r24
    a288:	9f 71       	andi	r25, 0x1F	; 31
    a28a:	98 30       	cpi	r25, 0x08	; 8
    a28c:	11 f0       	breq	.+4      	; 0xa292 <dir_read+0x72>
    a28e:	20 e0       	ldi	r18, 0x00	; 0
    a290:	30 e0       	ldi	r19, 0x00	; 0
    a292:	2e 15       	cp	r18, r14
    a294:	3f 05       	cpc	r19, r15
    a296:	09 f0       	breq	.+2      	; 0xa29a <dir_read+0x7a>
    a298:	6f c0       	rjmp	.+222    	; 0xa378 <dir_read+0x158>
    a29a:	8f 30       	cpi	r24, 0x0F	; 15
    a29c:	09 f0       	breq	.+2      	; 0xa2a0 <dir_read+0x80>
    a29e:	5c c0       	rjmp	.+184    	; 0xa358 <dir_read+0x138>
    a2a0:	06 ff       	sbrs	r16, 6
    a2a2:	0c c0       	rjmp	.+24     	; 0xa2bc <dir_read+0x9c>
    a2a4:	f4 01       	movw	r30, r8
    a2a6:	85 85       	ldd	r24, Z+13	; 0x0d
    a2a8:	0f 7b       	andi	r16, 0xBF	; 191
    a2aa:	4e 85       	ldd	r20, Y+14	; 0x0e
    a2ac:	5f 85       	ldd	r21, Y+15	; 0x0f
    a2ae:	68 89       	ldd	r22, Y+16	; 0x10
    a2b0:	79 89       	ldd	r23, Y+17	; 0x11
    a2b2:	48 a7       	std	Y+40, r20	; 0x28
    a2b4:	59 a7       	std	Y+41, r21	; 0x29
    a2b6:	6a a7       	std	Y+42, r22	; 0x2a
    a2b8:	7b a7       	std	Y+43, r23	; 0x2b
    a2ba:	03 c0       	rjmp	.+6      	; 0xa2c2 <dir_read+0xa2>
    a2bc:	10 13       	cpse	r17, r16
    a2be:	5c c0       	rjmp	.+184    	; 0xa378 <dir_read+0x158>
    a2c0:	8d 2d       	mov	r24, r13
    a2c2:	f4 01       	movw	r30, r8
    a2c4:	d5 84       	ldd	r13, Z+13	; 0x0d
    a2c6:	d8 12       	cpse	r13, r24
    a2c8:	56 c0       	rjmp	.+172    	; 0xa376 <dir_read+0x156>
    a2ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    a2cc:	93 8d       	ldd	r25, Z+27	; 0x1b
    a2ce:	89 2b       	or	r24, r25
    a2d0:	09 f0       	breq	.+2      	; 0xa2d4 <dir_read+0xb4>
    a2d2:	52 c0       	rjmp	.+164    	; 0xa378 <dir_read+0x158>
    a2d4:	f5 01       	movw	r30, r10
    a2d6:	63 85       	ldd	r22, Z+11	; 0x0b
    a2d8:	74 85       	ldd	r23, Z+12	; 0x0c
    a2da:	f4 01       	movw	r30, r8
    a2dc:	80 81       	ld	r24, Z
    a2de:	90 e0       	ldi	r25, 0x00	; 0
    a2e0:	8f 7b       	andi	r24, 0xBF	; 191
    a2e2:	01 97       	sbiw	r24, 0x01	; 1
    a2e4:	c8 9e       	mul	r12, r24
    a2e6:	90 01       	movw	r18, r0
    a2e8:	c9 9e       	mul	r12, r25
    a2ea:	30 0d       	add	r19, r0
    a2ec:	11 24       	eor	r1, r1
    a2ee:	a6 ee       	ldi	r26, 0xE6	; 230
    a2f0:	b4 e0       	ldi	r27, 0x04	; 4
    a2f2:	81 e0       	ldi	r24, 0x01	; 1
    a2f4:	90 e0       	ldi	r25, 0x00	; 0
    a2f6:	4d 91       	ld	r20, X+
    a2f8:	f4 01       	movw	r30, r8
    a2fa:	e4 0f       	add	r30, r20
    a2fc:	f1 1d       	adc	r31, r1
    a2fe:	40 81       	ld	r20, Z
    a300:	51 81       	ldd	r21, Z+1	; 0x01
    a302:	00 97       	sbiw	r24, 0x00	; 0
    a304:	81 f0       	breq	.+32     	; 0xa326 <dir_read+0x106>
    a306:	2f 3f       	cpi	r18, 0xFF	; 255
    a308:	31 05       	cpc	r19, r1
    a30a:	09 f0       	breq	.+2      	; 0xa30e <dir_read+0xee>
    a30c:	a8 f5       	brcc	.+106    	; 0xa378 <dir_read+0x158>
    a30e:	c9 01       	movw	r24, r18
    a310:	88 0f       	add	r24, r24
    a312:	99 1f       	adc	r25, r25
    a314:	86 0f       	add	r24, r22
    a316:	97 1f       	adc	r25, r23
    a318:	fc 01       	movw	r30, r24
    a31a:	51 83       	std	Z+1, r21	; 0x01
    a31c:	40 83       	st	Z, r20
    a31e:	ca 01       	movw	r24, r20
    a320:	2f 5f       	subi	r18, 0xFF	; 255
    a322:	3f 4f       	sbci	r19, 0xFF	; 255
    a324:	03 c0       	rjmp	.+6      	; 0xa32c <dir_read+0x10c>
    a326:	4f 3f       	cpi	r20, 0xFF	; 255
    a328:	5f 4f       	sbci	r21, 0xFF	; 255
    a32a:	31 f5       	brne	.+76     	; 0xa378 <dir_read+0x158>
    a32c:	44 e0       	ldi	r20, 0x04	; 4
    a32e:	a3 3f       	cpi	r26, 0xF3	; 243
    a330:	b4 07       	cpc	r27, r20
    a332:	09 f7       	brne	.-62     	; 0xa2f6 <dir_read+0xd6>
    a334:	f4 01       	movw	r30, r8
    a336:	40 81       	ld	r20, Z
    a338:	46 ff       	sbrs	r20, 6
    a33a:	2e c0       	rjmp	.+92     	; 0xa398 <dir_read+0x178>
    a33c:	89 2b       	or	r24, r25
    a33e:	61 f1       	breq	.+88     	; 0xa398 <dir_read+0x178>
    a340:	2f 3f       	cpi	r18, 0xFF	; 255
    a342:	31 05       	cpc	r19, r1
    a344:	09 f0       	breq	.+2      	; 0xa348 <dir_read+0x128>
    a346:	c0 f4       	brcc	.+48     	; 0xa378 <dir_read+0x158>
    a348:	22 0f       	add	r18, r18
    a34a:	33 1f       	adc	r19, r19
    a34c:	fb 01       	movw	r30, r22
    a34e:	e2 0f       	add	r30, r18
    a350:	f3 1f       	adc	r31, r19
    a352:	11 82       	std	Z+1, r1	; 0x01
    a354:	10 82       	st	Z, r1
    a356:	20 c0       	rjmp	.+64     	; 0xa398 <dir_read+0x178>
    a358:	11 11       	cpse	r17, r1
    a35a:	05 c0       	rjmp	.+10     	; 0xa366 <dir_read+0x146>
    a35c:	c4 01       	movw	r24, r8
    a35e:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <sum_sfn>
    a362:	d8 16       	cp	r13, r24
    a364:	f9 f0       	breq	.+62     	; 0xa3a4 <dir_read+0x184>
    a366:	8f ef       	ldi	r24, 0xFF	; 255
    a368:	9f ef       	ldi	r25, 0xFF	; 255
    a36a:	dc 01       	movw	r26, r24
    a36c:	88 a7       	std	Y+40, r24	; 0x28
    a36e:	99 a7       	std	Y+41, r25	; 0x29
    a370:	aa a7       	std	Y+42, r26	; 0x2a
    a372:	bb a7       	std	Y+43, r27	; 0x2b
    a374:	17 c0       	rjmp	.+46     	; 0xa3a4 <dir_read+0x184>
    a376:	d8 2e       	mov	r13, r24
    a378:	1f ef       	ldi	r17, 0xFF	; 255
    a37a:	60 e0       	ldi	r22, 0x00	; 0
    a37c:	70 e0       	ldi	r23, 0x00	; 0
    a37e:	ce 01       	movw	r24, r28
    a380:	2e de       	rcall	.-932    	; 0x9fde <dir_next>
    a382:	00 97       	sbiw	r24, 0x00	; 0
    a384:	09 f4       	brne	.+2      	; 0xa388 <dir_read+0x168>
    a386:	5d cf       	rjmp	.-326    	; 0xa242 <dir_read+0x22>
    a388:	02 c0       	rjmp	.+4      	; 0xa38e <dir_read+0x16e>
    a38a:	00 97       	sbiw	r24, 0x00	; 0
    a38c:	59 f0       	breq	.+22     	; 0xa3a4 <dir_read+0x184>
    a38e:	1e 8a       	std	Y+22, r1	; 0x16
    a390:	1f 8a       	std	Y+23, r1	; 0x17
    a392:	18 8e       	std	Y+24, r1	; 0x18
    a394:	19 8e       	std	Y+25, r1	; 0x19
    a396:	08 c0       	rjmp	.+16     	; 0xa3a8 <dir_read+0x188>
    a398:	1f ef       	ldi	r17, 0xFF	; 255
    a39a:	10 0f       	add	r17, r16
    a39c:	ee cf       	rjmp	.-36     	; 0xa37a <dir_read+0x15a>
    a39e:	84 e0       	ldi	r24, 0x04	; 4
    a3a0:	90 e0       	ldi	r25, 0x00	; 0
    a3a2:	f5 cf       	rjmp	.-22     	; 0xa38e <dir_read+0x16e>
    a3a4:	80 e0       	ldi	r24, 0x00	; 0
    a3a6:	90 e0       	ldi	r25, 0x00	; 0
    a3a8:	cd b7       	in	r28, 0x3d	; 61
    a3aa:	de b7       	in	r29, 0x3e	; 62
    a3ac:	ec e0       	ldi	r30, 0x0C	; 12
    a3ae:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

0000a3b2 <dir_remove>:
    a3b2:	a0 e0       	ldi	r26, 0x00	; 0
    a3b4:	b0 e0       	ldi	r27, 0x00	; 0
    a3b6:	ef ed       	ldi	r30, 0xDF	; 223
    a3b8:	f1 e5       	ldi	r31, 0x51	; 81
    a3ba:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
    a3be:	ec 01       	movw	r28, r24
    a3c0:	08 81       	ld	r16, Y
    a3c2:	19 81       	ldd	r17, Y+1	; 0x01
    a3c4:	ce 84       	ldd	r12, Y+14	; 0x0e
    a3c6:	df 84       	ldd	r13, Y+15	; 0x0f
    a3c8:	e8 88       	ldd	r14, Y+16	; 0x10
    a3ca:	f9 88       	ldd	r15, Y+17	; 0x11
    a3cc:	48 a5       	ldd	r20, Y+40	; 0x28
    a3ce:	59 a5       	ldd	r21, Y+41	; 0x29
    a3d0:	6a a5       	ldd	r22, Y+42	; 0x2a
    a3d2:	7b a5       	ldd	r23, Y+43	; 0x2b
    a3d4:	4f 3f       	cpi	r20, 0xFF	; 255
    a3d6:	8f ef       	ldi	r24, 0xFF	; 255
    a3d8:	58 07       	cpc	r21, r24
    a3da:	68 07       	cpc	r22, r24
    a3dc:	78 07       	cpc	r23, r24
    a3de:	29 f4       	brne	.+10     	; 0xa3ea <dir_remove+0x38>
    a3e0:	85 ee       	ldi	r24, 0xE5	; 229
    a3e2:	b8 2e       	mov	r11, r24
    a3e4:	aa 24       	eor	r10, r10
    a3e6:	a3 94       	inc	r10
    a3e8:	19 c0       	rjmp	.+50     	; 0xa41c <dir_remove+0x6a>
    a3ea:	ce 01       	movw	r24, r28
    a3ec:	80 db       	rcall	.-2304   	; 0x9aee <dir_sdi>
    a3ee:	00 97       	sbiw	r24, 0x00	; 0
    a3f0:	19 f5       	brne	.+70     	; 0xa438 <dir_remove+0x86>
    a3f2:	f6 cf       	rjmp	.-20     	; 0xa3e0 <dir_remove+0x2e>
    a3f4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a3f6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a3f8:	b0 82       	st	Z, r11
    a3fa:	f8 01       	movw	r30, r16
    a3fc:	a3 82       	std	Z+3, r10	; 0x03
    a3fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    a400:	5f 85       	ldd	r21, Y+15	; 0x0f
    a402:	68 89       	ldd	r22, Y+16	; 0x10
    a404:	79 89       	ldd	r23, Y+17	; 0x11
    a406:	4c 15       	cp	r20, r12
    a408:	5d 05       	cpc	r21, r13
    a40a:	6e 05       	cpc	r22, r14
    a40c:	7f 05       	cpc	r23, r15
    a40e:	a0 f4       	brcc	.+40     	; 0xa438 <dir_remove+0x86>
    a410:	60 e0       	ldi	r22, 0x00	; 0
    a412:	70 e0       	ldi	r23, 0x00	; 0
    a414:	ce 01       	movw	r24, r28
    a416:	e3 dd       	rcall	.-1082   	; 0x9fde <dir_next>
    a418:	00 97       	sbiw	r24, 0x00	; 0
    a41a:	49 f4       	brne	.+18     	; 0xa42e <dir_remove+0x7c>
    a41c:	4e 89       	ldd	r20, Y+22	; 0x16
    a41e:	5f 89       	ldd	r21, Y+23	; 0x17
    a420:	68 8d       	ldd	r22, Y+24	; 0x18
    a422:	79 8d       	ldd	r23, Y+25	; 0x19
    a424:	c8 01       	movw	r24, r16
    a426:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    a42a:	00 97       	sbiw	r24, 0x00	; 0
    a42c:	19 f3       	breq	.-58     	; 0xa3f4 <dir_remove+0x42>
    a42e:	84 30       	cpi	r24, 0x04	; 4
    a430:	91 05       	cpc	r25, r1
    a432:	11 f4       	brne	.+4      	; 0xa438 <dir_remove+0x86>
    a434:	82 e0       	ldi	r24, 0x02	; 2
    a436:	90 e0       	ldi	r25, 0x00	; 0
    a438:	cd b7       	in	r28, 0x3d	; 61
    a43a:	de b7       	in	r29, 0x3e	; 62
    a43c:	ea e0       	ldi	r30, 0x0A	; 10
    a43e:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

0000a442 <dir_find>:
    a442:	ac e0       	ldi	r26, 0x0C	; 12
    a444:	b0 e0       	ldi	r27, 0x00	; 0
    a446:	e7 e2       	ldi	r30, 0x27	; 39
    a448:	f2 e5       	ldi	r31, 0x52	; 82
    a44a:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    a44e:	9c 87       	std	Y+12, r25	; 0x0c
    a450:	8b 87       	std	Y+11, r24	; 0x0b
    a452:	fc 01       	movw	r30, r24
    a454:	01 90       	ld	r0, Z+
    a456:	f0 81       	ld	r31, Z
    a458:	e0 2d       	mov	r30, r0
    a45a:	fc 83       	std	Y+4, r31	; 0x04
    a45c:	eb 83       	std	Y+3, r30	; 0x03
    a45e:	40 e0       	ldi	r20, 0x00	; 0
    a460:	50 e0       	ldi	r21, 0x00	; 0
    a462:	ba 01       	movw	r22, r20
    a464:	44 db       	rcall	.-2424   	; 0x9aee <dir_sdi>
    a466:	00 97       	sbiw	r24, 0x00	; 0
    a468:	09 f0       	breq	.+2      	; 0xa46c <dir_find+0x2a>
    a46a:	e7 c0       	rjmp	.+462    	; 0xa63a <dir_find+0x1f8>
    a46c:	8f ef       	ldi	r24, 0xFF	; 255
    a46e:	9f ef       	ldi	r25, 0xFF	; 255
    a470:	dc 01       	movw	r26, r24
    a472:	eb 85       	ldd	r30, Y+11	; 0x0b
    a474:	fc 85       	ldd	r31, Y+12	; 0x0c
    a476:	80 a7       	std	Z+40, r24	; 0x28
    a478:	91 a7       	std	Z+41, r25	; 0x29
    a47a:	a2 a7       	std	Z+42, r26	; 0x2a
    a47c:	b3 a7       	std	Z+43, r27	; 0x2b
    a47e:	0f ef       	ldi	r16, 0xFF	; 255
    a480:	1f ef       	ldi	r17, 0xFF	; 255
    a482:	44 24       	eor	r4, r4
    a484:	4a 94       	dec	r4
    a486:	54 2c       	mov	r5, r4
    a488:	32 01       	movw	r6, r4
    a48a:	7c 96       	adiw	r30, 0x1c	; 28
    a48c:	fa 87       	std	Y+10, r31	; 0x0a
    a48e:	e9 87       	std	Y+9, r30	; 0x09
    a490:	eb 85       	ldd	r30, Y+11	; 0x0b
    a492:	fc 85       	ldd	r31, Y+12	; 0x0c
    a494:	46 89       	ldd	r20, Z+22	; 0x16
    a496:	57 89       	ldd	r21, Z+23	; 0x17
    a498:	60 8d       	ldd	r22, Z+24	; 0x18
    a49a:	71 8d       	ldd	r23, Z+25	; 0x19
    a49c:	8b 81       	ldd	r24, Y+3	; 0x03
    a49e:	9c 81       	ldd	r25, Y+4	; 0x04
    a4a0:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    a4a4:	00 97       	sbiw	r24, 0x00	; 0
    a4a6:	09 f0       	breq	.+2      	; 0xa4aa <dir_find+0x68>
    a4a8:	c8 c0       	rjmp	.+400    	; 0xa63a <dir_find+0x1f8>
    a4aa:	eb 85       	ldd	r30, Y+11	; 0x0b
    a4ac:	fc 85       	ldd	r31, Y+12	; 0x0c
    a4ae:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a4b0:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a4b2:	f7 01       	movw	r30, r14
    a4b4:	d0 80       	ld	r13, Z
    a4b6:	dd 20       	and	r13, r13
    a4b8:	09 f4       	brne	.+2      	; 0xa4bc <dir_find+0x7a>
    a4ba:	c1 c0       	rjmp	.+386    	; 0xa63e <dir_find+0x1fc>
    a4bc:	93 85       	ldd	r25, Z+11	; 0x0b
    a4be:	89 2f       	mov	r24, r25
    a4c0:	8f 73       	andi	r24, 0x3F	; 63
    a4c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    a4c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    a4c6:	84 83       	std	Z+4, r24	; 0x04
    a4c8:	f5 ee       	ldi	r31, 0xE5	; 229
    a4ca:	df 16       	cp	r13, r31
    a4cc:	09 f4       	brne	.+2      	; 0xa4d0 <dir_find+0x8e>
    a4ce:	a6 c0       	rjmp	.+332    	; 0xa61c <dir_find+0x1da>
    a4d0:	93 ff       	sbrs	r25, 3
    a4d2:	04 c0       	rjmp	.+8      	; 0xa4dc <dir_find+0x9a>
    a4d4:	8f 30       	cpi	r24, 0x0F	; 15
    a4d6:	09 f0       	breq	.+2      	; 0xa4da <dir_find+0x98>
    a4d8:	a1 c0       	rjmp	.+322    	; 0xa61c <dir_find+0x1da>
    a4da:	03 c0       	rjmp	.+6      	; 0xa4e2 <dir_find+0xa0>
    a4dc:	8f 30       	cpi	r24, 0x0F	; 15
    a4de:	09 f0       	breq	.+2      	; 0xa4e2 <dir_find+0xa0>
    a4e0:	88 c0       	rjmp	.+272    	; 0xa5f2 <dir_find+0x1b0>
    a4e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    a4e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    a4e6:	87 a1       	ldd	r24, Z+39	; 0x27
    a4e8:	86 fd       	sbrc	r24, 6
    a4ea:	9f c0       	rjmp	.+318    	; 0xa62a <dir_find+0x1e8>
    a4ec:	d6 fe       	sbrs	r13, 6
    a4ee:	10 c0       	rjmp	.+32     	; 0xa510 <dir_find+0xce>
    a4f0:	f7 01       	movw	r30, r14
    a4f2:	05 85       	ldd	r16, Z+13	; 0x0d
    a4f4:	fd 2d       	mov	r31, r13
    a4f6:	ff 7b       	andi	r31, 0xBF	; 191
    a4f8:	df 2e       	mov	r13, r31
    a4fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    a4fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    a4fe:	86 85       	ldd	r24, Z+14	; 0x0e
    a500:	97 85       	ldd	r25, Z+15	; 0x0f
    a502:	a0 89       	ldd	r26, Z+16	; 0x10
    a504:	b1 89       	ldd	r27, Z+17	; 0x11
    a506:	80 a7       	std	Z+40, r24	; 0x28
    a508:	91 a7       	std	Z+41, r25	; 0x29
    a50a:	a2 a7       	std	Z+42, r26	; 0x2a
    a50c:	b3 a7       	std	Z+43, r27	; 0x2b
    a50e:	02 c0       	rjmp	.+4      	; 0xa514 <dir_find+0xd2>
    a510:	1d 11       	cpse	r17, r13
    a512:	8a c0       	rjmp	.+276    	; 0xa628 <dir_find+0x1e6>
    a514:	f7 01       	movw	r30, r14
    a516:	c5 84       	ldd	r12, Z+13	; 0x0d
    a518:	c0 12       	cpse	r12, r16
    a51a:	86 c0       	rjmp	.+268    	; 0xa628 <dir_find+0x1e6>
    a51c:	82 8d       	ldd	r24, Z+26	; 0x1a
    a51e:	93 8d       	ldd	r25, Z+27	; 0x1b
    a520:	89 2b       	or	r24, r25
    a522:	09 f0       	breq	.+2      	; 0xa526 <dir_find+0xe4>
    a524:	91 c0       	rjmp	.+290    	; 0xa648 <dir_find+0x206>
    a526:	eb 81       	ldd	r30, Y+3	; 0x03
    a528:	fc 81       	ldd	r31, Y+4	; 0x04
    a52a:	03 84       	ldd	r0, Z+11	; 0x0b
    a52c:	f4 85       	ldd	r31, Z+12	; 0x0c
    a52e:	e0 2d       	mov	r30, r0
    a530:	fe 83       	std	Y+6, r31	; 0x06
    a532:	ed 83       	std	Y+5, r30	; 0x05
    a534:	f7 01       	movw	r30, r14
    a536:	80 81       	ld	r24, Z
    a538:	8f 73       	andi	r24, 0x3F	; 63
    a53a:	90 e0       	ldi	r25, 0x00	; 0
    a53c:	01 97       	sbiw	r24, 0x01	; 1
    a53e:	fd e0       	ldi	r31, 0x0D	; 13
    a540:	f8 9f       	mul	r31, r24
    a542:	80 01       	movw	r16, r0
    a544:	f9 9f       	mul	r31, r25
    a546:	10 0d       	add	r17, r0
    a548:	11 24       	eor	r1, r1
    a54a:	26 ee       	ldi	r18, 0xE6	; 230
    a54c:	34 e0       	ldi	r19, 0x04	; 4
    a54e:	3a 83       	std	Y+2, r19	; 0x02
    a550:	29 83       	std	Y+1, r18	; 0x01
    a552:	81 e0       	ldi	r24, 0x01	; 1
    a554:	90 e0       	ldi	r25, 0x00	; 0
    a556:	e9 81       	ldd	r30, Y+1	; 0x01
    a558:	fa 81       	ldd	r31, Y+2	; 0x02
    a55a:	21 91       	ld	r18, Z+
    a55c:	fa 83       	std	Y+2, r31	; 0x02
    a55e:	e9 83       	std	Y+1, r30	; 0x01
    a560:	f7 01       	movw	r30, r14
    a562:	e2 0f       	add	r30, r18
    a564:	f1 1d       	adc	r31, r1
    a566:	20 80       	ld	r2, Z
    a568:	31 80       	ldd	r3, Z+1	; 0x01
    a56a:	00 97       	sbiw	r24, 0x00	; 0
    a56c:	39 f1       	breq	.+78     	; 0xa5bc <dir_find+0x17a>
    a56e:	0f 3f       	cpi	r16, 0xFF	; 255
    a570:	11 05       	cpc	r17, r1
    a572:	11 f0       	breq	.+4      	; 0xa578 <dir_find+0x136>
    a574:	08 f0       	brcs	.+2      	; 0xa578 <dir_find+0x136>
    a576:	68 c0       	rjmp	.+208    	; 0xa648 <dir_find+0x206>
    a578:	b1 01       	movw	r22, r2
    a57a:	80 e0       	ldi	r24, 0x00	; 0
    a57c:	90 e0       	ldi	r25, 0x00	; 0
    a57e:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <ff_wtoupper>
    a582:	4b 01       	movw	r8, r22
    a584:	5c 01       	movw	r10, r24
    a586:	98 01       	movw	r18, r16
    a588:	2f 5f       	subi	r18, 0xFF	; 255
    a58a:	3f 4f       	sbci	r19, 0xFF	; 255
    a58c:	38 87       	std	Y+8, r19	; 0x08
    a58e:	2f 83       	std	Y+7, r18	; 0x07
    a590:	00 0f       	add	r16, r16
    a592:	11 1f       	adc	r17, r17
    a594:	ed 81       	ldd	r30, Y+5	; 0x05
    a596:	fe 81       	ldd	r31, Y+6	; 0x06
    a598:	e0 0f       	add	r30, r16
    a59a:	f1 1f       	adc	r31, r17
    a59c:	60 81       	ld	r22, Z
    a59e:	71 81       	ldd	r23, Z+1	; 0x01
    a5a0:	80 e0       	ldi	r24, 0x00	; 0
    a5a2:	90 e0       	ldi	r25, 0x00	; 0
    a5a4:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <ff_wtoupper>
    a5a8:	86 16       	cp	r8, r22
    a5aa:	97 06       	cpc	r9, r23
    a5ac:	a8 06       	cpc	r10, r24
    a5ae:	b9 06       	cpc	r11, r25
    a5b0:	09 f0       	breq	.+2      	; 0xa5b4 <dir_find+0x172>
    a5b2:	4a c0       	rjmp	.+148    	; 0xa648 <dir_find+0x206>
    a5b4:	c1 01       	movw	r24, r2
    a5b6:	0f 81       	ldd	r16, Y+7	; 0x07
    a5b8:	18 85       	ldd	r17, Y+8	; 0x08
    a5ba:	05 c0       	rjmp	.+10     	; 0xa5c6 <dir_find+0x184>
    a5bc:	3f ef       	ldi	r19, 0xFF	; 255
    a5be:	23 16       	cp	r2, r19
    a5c0:	33 06       	cpc	r3, r19
    a5c2:	09 f0       	breq	.+2      	; 0xa5c6 <dir_find+0x184>
    a5c4:	41 c0       	rjmp	.+130    	; 0xa648 <dir_find+0x206>
    a5c6:	e9 81       	ldd	r30, Y+1	; 0x01
    a5c8:	fa 81       	ldd	r31, Y+2	; 0x02
    a5ca:	e3 5f       	subi	r30, 0xF3	; 243
    a5cc:	f4 40       	sbci	r31, 0x04	; 4
    a5ce:	19 f6       	brne	.-122    	; 0xa556 <dir_find+0x114>
    a5d0:	f7 01       	movw	r30, r14
    a5d2:	20 81       	ld	r18, Z
    a5d4:	26 ff       	sbrs	r18, 6
    a5d6:	3a c0       	rjmp	.+116    	; 0xa64c <dir_find+0x20a>
    a5d8:	89 2b       	or	r24, r25
    a5da:	c1 f1       	breq	.+112    	; 0xa64c <dir_find+0x20a>
    a5dc:	00 0f       	add	r16, r16
    a5de:	11 1f       	adc	r17, r17
    a5e0:	ed 81       	ldd	r30, Y+5	; 0x05
    a5e2:	fe 81       	ldd	r31, Y+6	; 0x06
    a5e4:	e0 0f       	add	r30, r16
    a5e6:	f1 1f       	adc	r31, r17
    a5e8:	80 81       	ld	r24, Z
    a5ea:	91 81       	ldd	r25, Z+1	; 0x01
    a5ec:	89 2b       	or	r24, r25
    a5ee:	71 f1       	breq	.+92     	; 0xa64c <dir_find+0x20a>
    a5f0:	2b c0       	rjmp	.+86     	; 0xa648 <dir_find+0x206>
    a5f2:	11 11       	cpse	r17, r1
    a5f4:	05 c0       	rjmp	.+10     	; 0xa600 <dir_find+0x1be>
    a5f6:	c7 01       	movw	r24, r14
    a5f8:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <sum_sfn>
    a5fc:	08 17       	cp	r16, r24
    a5fe:	09 f1       	breq	.+66     	; 0xa642 <dir_find+0x200>
    a600:	eb 85       	ldd	r30, Y+11	; 0x0b
    a602:	fc 85       	ldd	r31, Y+12	; 0x0c
    a604:	87 a1       	ldd	r24, Z+39	; 0x27
    a606:	80 fd       	sbrc	r24, 0
    a608:	09 c0       	rjmp	.+18     	; 0xa61c <dir_find+0x1da>
    a60a:	4b e0       	ldi	r20, 0x0B	; 11
    a60c:	50 e0       	ldi	r21, 0x00	; 0
    a60e:	69 85       	ldd	r22, Y+9	; 0x09
    a610:	7a 85       	ldd	r23, Y+10	; 0x0a
    a612:	c7 01       	movw	r24, r14
    a614:	0e 94 3c 44 	call	0x8878	; 0x8878 <mem_cmp>
    a618:	89 2b       	or	r24, r25
    a61a:	99 f0       	breq	.+38     	; 0xa642 <dir_find+0x200>
    a61c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a61e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a620:	40 a6       	std	Z+40, r4	; 0x28
    a622:	51 a6       	std	Z+41, r5	; 0x29
    a624:	62 a6       	std	Z+42, r6	; 0x2a
    a626:	73 a6       	std	Z+43, r7	; 0x2b
    a628:	1f ef       	ldi	r17, 0xFF	; 255
    a62a:	60 e0       	ldi	r22, 0x00	; 0
    a62c:	70 e0       	ldi	r23, 0x00	; 0
    a62e:	8b 85       	ldd	r24, Y+11	; 0x0b
    a630:	9c 85       	ldd	r25, Y+12	; 0x0c
    a632:	d5 dc       	rcall	.-1622   	; 0x9fde <dir_next>
    a634:	00 97       	sbiw	r24, 0x00	; 0
    a636:	09 f4       	brne	.+2      	; 0xa63a <dir_find+0x1f8>
    a638:	2b cf       	rjmp	.-426    	; 0xa490 <dir_find+0x4e>
    a63a:	28 2f       	mov	r18, r24
    a63c:	0b c0       	rjmp	.+22     	; 0xa654 <dir_find+0x212>
    a63e:	24 e0       	ldi	r18, 0x04	; 4
    a640:	01 c0       	rjmp	.+2      	; 0xa644 <dir_find+0x202>
    a642:	20 e0       	ldi	r18, 0x00	; 0
    a644:	90 e0       	ldi	r25, 0x00	; 0
    a646:	06 c0       	rjmp	.+12     	; 0xa654 <dir_find+0x212>
    a648:	0c 2d       	mov	r16, r12
    a64a:	ee cf       	rjmp	.-36     	; 0xa628 <dir_find+0x1e6>
    a64c:	1f ef       	ldi	r17, 0xFF	; 255
    a64e:	1d 0d       	add	r17, r13
    a650:	0c 2d       	mov	r16, r12
    a652:	eb cf       	rjmp	.-42     	; 0xa62a <dir_find+0x1e8>
    a654:	82 2f       	mov	r24, r18
    a656:	2c 96       	adiw	r28, 0x0c	; 12
    a658:	e2 e1       	ldi	r30, 0x12	; 18
    a65a:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0000a65e <dir_register>:
    a65e:	a6 e1       	ldi	r26, 0x16	; 22
    a660:	b0 e0       	ldi	r27, 0x00	; 0
    a662:	e5 e3       	ldi	r30, 0x35	; 53
    a664:	f3 e5       	ldi	r31, 0x53	; 83
    a666:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    a66a:	fc 01       	movw	r30, r24
    a66c:	27 a1       	ldd	r18, Z+39	; 0x27
    a66e:	20 7a       	andi	r18, 0xA0	; 160
    a670:	09 f0       	breq	.+2      	; 0xa674 <dir_register+0x16>
    a672:	53 c1       	rjmp	.+678    	; 0xa91a <dir_register+0x2bc>
    a674:	c0 80       	ld	r12, Z
    a676:	d1 80       	ldd	r13, Z+1	; 0x01
    a678:	f6 01       	movw	r30, r12
    a67a:	a3 85       	ldd	r26, Z+11	; 0x0b
    a67c:	b4 85       	ldd	r27, Z+12	; 0x0c
    a67e:	81 2c       	mov	r8, r1
    a680:	91 2c       	mov	r9, r1
    a682:	2d 91       	ld	r18, X+
    a684:	3d 91       	ld	r19, X+
    a686:	23 2b       	or	r18, r19
    a688:	21 f0       	breq	.+8      	; 0xa692 <dir_register+0x34>
    a68a:	ff ef       	ldi	r31, 0xFF	; 255
    a68c:	8f 1a       	sub	r8, r31
    a68e:	9f 0a       	sbc	r9, r31
    a690:	f8 cf       	rjmp	.-16     	; 0xa682 <dir_register+0x24>
    a692:	8c 01       	movw	r16, r24
    a694:	5c 01       	movw	r10, r24
    a696:	2c e1       	ldi	r18, 0x1C	; 28
    a698:	a2 0e       	add	r10, r18
    a69a:	b1 1c       	adc	r11, r1
    a69c:	4c e0       	ldi	r20, 0x0C	; 12
    a69e:	50 e0       	ldi	r21, 0x00	; 0
    a6a0:	b5 01       	movw	r22, r10
    a6a2:	ce 01       	movw	r24, r28
    a6a4:	01 96       	adiw	r24, 0x01	; 1
    a6a6:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
    a6aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    a6ac:	80 ff       	sbrs	r24, 0
    a6ae:	94 c0       	rjmp	.+296    	; 0xa7d8 <dir_register+0x17a>
    a6b0:	80 e4       	ldi	r24, 0x40	; 64
    a6b2:	f8 01       	movw	r30, r16
    a6b4:	87 a3       	std	Z+39, r24	; 0x27
    a6b6:	41 2c       	mov	r4, r1
    a6b8:	51 2c       	mov	r5, r1
    a6ba:	32 01       	movw	r6, r4
    a6bc:	43 94       	inc	r4
    a6be:	72 01       	movw	r14, r4
    a6c0:	f6 01       	movw	r30, r12
    a6c2:	23 84       	ldd	r2, Z+11	; 0x0b
    a6c4:	34 84       	ldd	r3, Z+12	; 0x0c
    a6c6:	4b e0       	ldi	r20, 0x0B	; 11
    a6c8:	50 e0       	ldi	r21, 0x00	; 0
    a6ca:	be 01       	movw	r22, r28
    a6cc:	6f 5f       	subi	r22, 0xFF	; 255
    a6ce:	7f 4f       	sbci	r23, 0xFF	; 255
    a6d0:	c5 01       	movw	r24, r10
    a6d2:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
    a6d6:	f6 e0       	ldi	r31, 0x06	; 6
    a6d8:	4f 16       	cp	r4, r31
    a6da:	51 04       	cpc	r5, r1
    a6dc:	18 f1       	brcs	.+70     	; 0xa724 <dir_register+0xc6>
    a6de:	f1 01       	movw	r30, r2
    a6e0:	b3 01       	movw	r22, r6
    a6e2:	a2 01       	movw	r20, r4
    a6e4:	81 91       	ld	r24, Z+
    a6e6:	91 91       	ld	r25, Z+
    a6e8:	00 97       	sbiw	r24, 0x00	; 0
    a6ea:	d9 f0       	breq	.+54     	; 0xa722 <dir_register+0xc4>
    a6ec:	20 e1       	ldi	r18, 0x10	; 16
    a6ee:	30 e0       	ldi	r19, 0x00	; 0
    a6f0:	44 0f       	add	r20, r20
    a6f2:	55 1f       	adc	r21, r21
    a6f4:	66 1f       	adc	r22, r22
    a6f6:	77 1f       	adc	r23, r23
    a6f8:	dc 01       	movw	r26, r24
    a6fa:	a1 70       	andi	r26, 0x01	; 1
    a6fc:	bb 27       	eor	r27, r27
    a6fe:	4a 0f       	add	r20, r26
    a700:	5b 1f       	adc	r21, r27
    a702:	61 1d       	adc	r22, r1
    a704:	71 1d       	adc	r23, r1
    a706:	96 95       	lsr	r25
    a708:	87 95       	ror	r24
    a70a:	60 ff       	sbrs	r22, 0
    a70c:	06 c0       	rjmp	.+12     	; 0xa71a <dir_register+0xbc>
    a70e:	a1 e2       	ldi	r26, 0x21	; 33
    a710:	4a 27       	eor	r20, r26
    a712:	a0 e1       	ldi	r26, 0x10	; 16
    a714:	5a 27       	eor	r21, r26
    a716:	a1 e0       	ldi	r26, 0x01	; 1
    a718:	6a 27       	eor	r22, r26
    a71a:	21 50       	subi	r18, 0x01	; 1
    a71c:	31 09       	sbc	r19, r1
    a71e:	41 f7       	brne	.-48     	; 0xa6f0 <dir_register+0x92>
    a720:	e1 cf       	rjmp	.-62     	; 0xa6e4 <dir_register+0x86>
    a722:	7a 01       	movw	r14, r20
    a724:	fe 01       	movw	r30, r28
    a726:	75 96       	adiw	r30, 0x15	; 21
    a728:	27 e0       	ldi	r18, 0x07	; 7
    a72a:	30 e0       	ldi	r19, 0x00	; 0
    a72c:	9e 2d       	mov	r25, r14
    a72e:	9f 70       	andi	r25, 0x0F	; 15
    a730:	80 e3       	ldi	r24, 0x30	; 48
    a732:	89 0f       	add	r24, r25
    a734:	8a 33       	cpi	r24, 0x3A	; 58
    a736:	10 f0       	brcs	.+4      	; 0xa73c <dir_register+0xde>
    a738:	87 e3       	ldi	r24, 0x37	; 55
    a73a:	89 0f       	add	r24, r25
    a73c:	21 50       	subi	r18, 0x01	; 1
    a73e:	31 09       	sbc	r19, r1
    a740:	82 93       	st	-Z, r24
    a742:	a4 e0       	ldi	r26, 0x04	; 4
    a744:	f6 94       	lsr	r15
    a746:	e7 94       	ror	r14
    a748:	aa 95       	dec	r26
    a74a:	e1 f7       	brne	.-8      	; 0xa744 <dir_register+0xe6>
    a74c:	e1 14       	cp	r14, r1
    a74e:	f1 04       	cpc	r15, r1
    a750:	69 f7       	brne	.-38     	; 0xa72c <dir_register+0xce>
    a752:	ed e0       	ldi	r30, 0x0D	; 13
    a754:	f0 e0       	ldi	r31, 0x00	; 0
    a756:	ec 0f       	add	r30, r28
    a758:	fd 1f       	adc	r31, r29
    a75a:	e2 0f       	add	r30, r18
    a75c:	f3 1f       	adc	r31, r19
    a75e:	4e e7       	ldi	r20, 0x7E	; 126
    a760:	40 83       	st	Z, r20
    a762:	f5 01       	movw	r30, r10
    a764:	80 e0       	ldi	r24, 0x00	; 0
    a766:	90 e0       	ldi	r25, 0x00	; 0
    a768:	28 17       	cp	r18, r24
    a76a:	39 07       	cpc	r19, r25
    a76c:	29 f0       	breq	.+10     	; 0xa778 <dir_register+0x11a>
    a76e:	41 91       	ld	r20, Z+
    a770:	40 32       	cpi	r20, 0x20	; 32
    a772:	11 f0       	breq	.+4      	; 0xa778 <dir_register+0x11a>
    a774:	01 96       	adiw	r24, 0x01	; 1
    a776:	f8 cf       	rjmp	.-16     	; 0xa768 <dir_register+0x10a>
    a778:	f5 01       	movw	r30, r10
    a77a:	e8 0f       	add	r30, r24
    a77c:	f9 1f       	adc	r31, r25
    a77e:	28 30       	cpi	r18, 0x08	; 8
    a780:	31 05       	cpc	r19, r1
    a782:	50 f4       	brcc	.+20     	; 0xa798 <dir_register+0x13a>
    a784:	ad e0       	ldi	r26, 0x0D	; 13
    a786:	b0 e0       	ldi	r27, 0x00	; 0
    a788:	ac 0f       	add	r26, r28
    a78a:	bd 1f       	adc	r27, r29
    a78c:	a2 0f       	add	r26, r18
    a78e:	b3 1f       	adc	r27, r19
    a790:	8c 91       	ld	r24, X
    a792:	2f 5f       	subi	r18, 0xFF	; 255
    a794:	3f 4f       	sbci	r19, 0xFF	; 255
    a796:	01 c0       	rjmp	.+2      	; 0xa79a <dir_register+0x13c>
    a798:	80 e2       	ldi	r24, 0x20	; 32
    a79a:	81 93       	st	Z+, r24
    a79c:	cf 01       	movw	r24, r30
    a79e:	8a 19       	sub	r24, r10
    a7a0:	9b 09       	sbc	r25, r11
    a7a2:	08 97       	sbiw	r24, 0x08	; 8
    a7a4:	60 f3       	brcs	.-40     	; 0xa77e <dir_register+0x120>
    a7a6:	c8 01       	movw	r24, r16
    a7a8:	4c de       	rcall	.-872    	; 0xa442 <dir_find>
    a7aa:	00 97       	sbiw	r24, 0x00	; 0
    a7ac:	71 f4       	brne	.+28     	; 0xa7ca <dir_register+0x16c>
    a7ae:	8f ef       	ldi	r24, 0xFF	; 255
    a7b0:	48 1a       	sub	r4, r24
    a7b2:	58 0a       	sbc	r5, r24
    a7b4:	68 0a       	sbc	r6, r24
    a7b6:	78 0a       	sbc	r7, r24
    a7b8:	94 e6       	ldi	r25, 0x64	; 100
    a7ba:	49 16       	cp	r4, r25
    a7bc:	51 04       	cpc	r5, r1
    a7be:	61 04       	cpc	r6, r1
    a7c0:	71 04       	cpc	r7, r1
    a7c2:	09 f0       	breq	.+2      	; 0xa7c6 <dir_register+0x168>
    a7c4:	7c cf       	rjmp	.-264    	; 0xa6be <dir_register+0x60>
    a7c6:	27 e0       	ldi	r18, 0x07	; 7
    a7c8:	a9 c0       	rjmp	.+338    	; 0xa91c <dir_register+0x2be>
    a7ca:	84 30       	cpi	r24, 0x04	; 4
    a7cc:	91 05       	cpc	r25, r1
    a7ce:	09 f0       	breq	.+2      	; 0xa7d2 <dir_register+0x174>
    a7d0:	ce c0       	rjmp	.+412    	; 0xa96e <dir_register+0x310>
    a7d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    a7d4:	f8 01       	movw	r30, r16
    a7d6:	87 a3       	std	Z+39, r24	; 0x27
    a7d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    a7da:	81 ff       	sbrs	r24, 1
    a7dc:	0b c0       	rjmp	.+22     	; 0xa7f4 <dir_register+0x196>
    a7de:	c4 01       	movw	r24, r8
    a7e0:	0c 96       	adiw	r24, 0x0c	; 12
    a7e2:	6d e0       	ldi	r22, 0x0D	; 13
    a7e4:	70 e0       	ldi	r23, 0x00	; 0
    a7e6:	0e 94 2e df 	call	0x1be5c	; 0x1be5c <__udivmodhi4>
    a7ea:	7b 01       	movw	r14, r22
    a7ec:	ff ef       	ldi	r31, 0xFF	; 255
    a7ee:	ef 1a       	sub	r14, r31
    a7f0:	ff 0a       	sbc	r15, r31
    a7f2:	03 c0       	rjmp	.+6      	; 0xa7fa <dir_register+0x19c>
    a7f4:	ee 24       	eor	r14, r14
    a7f6:	e3 94       	inc	r14
    a7f8:	f1 2c       	mov	r15, r1
    a7fa:	b7 01       	movw	r22, r14
    a7fc:	c8 01       	movw	r24, r16
    a7fe:	d7 dc       	rcall	.-1618   	; 0xa1ae <dir_alloc>
    a800:	00 97       	sbiw	r24, 0x00	; 0
    a802:	09 f0       	breq	.+2      	; 0xa806 <dir_register+0x1a8>
    a804:	b4 c0       	rjmp	.+360    	; 0xa96e <dir_register+0x310>
    a806:	21 e0       	ldi	r18, 0x01	; 1
    a808:	e2 1a       	sub	r14, r18
    a80a:	f1 08       	sbc	r15, r1
    a80c:	09 f4       	brne	.+2      	; 0xa810 <dir_register+0x1b2>
    a80e:	88 c0       	rjmp	.+272    	; 0xa920 <dir_register+0x2c2>
    a810:	f8 01       	movw	r30, r16
    a812:	46 85       	ldd	r20, Z+14	; 0x0e
    a814:	57 85       	ldd	r21, Z+15	; 0x0f
    a816:	60 89       	ldd	r22, Z+16	; 0x10
    a818:	71 89       	ldd	r23, Z+17	; 0x11
    a81a:	c7 01       	movw	r24, r14
    a81c:	e5 e0       	ldi	r30, 0x05	; 5
    a81e:	88 0f       	add	r24, r24
    a820:	99 1f       	adc	r25, r25
    a822:	ea 95       	dec	r30
    a824:	e1 f7       	brne	.-8      	; 0xa81e <dir_register+0x1c0>
    a826:	48 1b       	sub	r20, r24
    a828:	59 0b       	sbc	r21, r25
    a82a:	61 09       	sbc	r22, r1
    a82c:	71 09       	sbc	r23, r1
    a82e:	c8 01       	movw	r24, r16
    a830:	5e d9       	rcall	.-3396   	; 0x9aee <dir_sdi>
    a832:	00 97       	sbiw	r24, 0x00	; 0
    a834:	09 f0       	breq	.+2      	; 0xa838 <dir_register+0x1da>
    a836:	9b c0       	rjmp	.+310    	; 0xa96e <dir_register+0x310>
    a838:	c5 01       	movw	r24, r10
    a83a:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <sum_sfn>
    a83e:	68 2e       	mov	r6, r24
    a840:	5f e0       	ldi	r21, 0x0F	; 15
    a842:	35 2e       	mov	r3, r21
    a844:	6d e0       	ldi	r22, 0x0D	; 13
    a846:	46 2e       	mov	r4, r22
    a848:	73 ef       	ldi	r23, 0xF3	; 243
    a84a:	87 2e       	mov	r8, r23
    a84c:	74 e0       	ldi	r23, 0x04	; 4
    a84e:	97 2e       	mov	r9, r23
    a850:	55 24       	eor	r5, r5
    a852:	53 94       	inc	r5
    a854:	f8 01       	movw	r30, r16
    a856:	46 89       	ldd	r20, Z+22	; 0x16
    a858:	57 89       	ldd	r21, Z+23	; 0x17
    a85a:	60 8d       	ldd	r22, Z+24	; 0x18
    a85c:	71 8d       	ldd	r23, Z+25	; 0x19
    a85e:	c6 01       	movw	r24, r12
    a860:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    a864:	00 97       	sbiw	r24, 0x00	; 0
    a866:	09 f0       	breq	.+2      	; 0xa86a <dir_register+0x20c>
    a868:	82 c0       	rjmp	.+260    	; 0xa96e <dir_register+0x310>
    a86a:	f6 01       	movw	r30, r12
    a86c:	63 85       	ldd	r22, Z+11	; 0x0b
    a86e:	74 85       	ldd	r23, Z+12	; 0x0c
    a870:	f8 01       	movw	r30, r16
    a872:	02 8c       	ldd	r0, Z+26	; 0x1a
    a874:	f3 8d       	ldd	r31, Z+27	; 0x1b
    a876:	e0 2d       	mov	r30, r0
    a878:	fe 8b       	std	Y+22, r31	; 0x16
    a87a:	ed 8b       	std	Y+21, r30	; 0x15
    a87c:	7e 2c       	mov	r7, r14
    a87e:	65 86       	std	Z+13, r6	; 0x0d
    a880:	33 86       	std	Z+11, r3	; 0x0b
    a882:	14 86       	std	Z+12, r1	; 0x0c
    a884:	12 8e       	std	Z+26, r1	; 0x1a
    a886:	13 8e       	std	Z+27, r1	; 0x1b
    a888:	97 01       	movw	r18, r14
    a88a:	33 27       	eor	r19, r19
    a88c:	21 50       	subi	r18, 0x01	; 1
    a88e:	31 09       	sbc	r19, r1
    a890:	42 9e       	mul	r4, r18
    a892:	c0 01       	movw	r24, r0
    a894:	43 9e       	mul	r4, r19
    a896:	90 0d       	add	r25, r0
    a898:	11 24       	eor	r1, r1
    a89a:	a6 ee       	ldi	r26, 0xE6	; 230
    a89c:	b4 e0       	ldi	r27, 0x04	; 4
    a89e:	20 e0       	ldi	r18, 0x00	; 0
    a8a0:	30 e0       	ldi	r19, 0x00	; 0
    a8a2:	2f 3f       	cpi	r18, 0xFF	; 255
    a8a4:	ff ef       	ldi	r31, 0xFF	; 255
    a8a6:	3f 07       	cpc	r19, r31
    a8a8:	49 f0       	breq	.+18     	; 0xa8bc <dir_register+0x25e>
    a8aa:	9c 01       	movw	r18, r24
    a8ac:	22 0f       	add	r18, r18
    a8ae:	33 1f       	adc	r19, r19
    a8b0:	26 0f       	add	r18, r22
    a8b2:	37 1f       	adc	r19, r23
    a8b4:	f9 01       	movw	r30, r18
    a8b6:	20 81       	ld	r18, Z
    a8b8:	31 81       	ldd	r19, Z+1	; 0x01
    a8ba:	01 96       	adiw	r24, 0x01	; 1
    a8bc:	4d 91       	ld	r20, X+
    a8be:	ed 89       	ldd	r30, Y+21	; 0x15
    a8c0:	fe 89       	ldd	r31, Y+22	; 0x16
    a8c2:	e4 0f       	add	r30, r20
    a8c4:	f1 1d       	adc	r31, r1
    a8c6:	20 83       	st	Z, r18
    a8c8:	31 83       	std	Z+1, r19	; 0x01
    a8ca:	21 15       	cp	r18, r1
    a8cc:	31 05       	cpc	r19, r1
    a8ce:	11 f4       	brne	.+4      	; 0xa8d4 <dir_register+0x276>
    a8d0:	2f ef       	ldi	r18, 0xFF	; 255
    a8d2:	3f ef       	ldi	r19, 0xFF	; 255
    a8d4:	8a 16       	cp	r8, r26
    a8d6:	9b 06       	cpc	r9, r27
    a8d8:	21 f7       	brne	.-56     	; 0xa8a2 <dir_register+0x244>
    a8da:	2f 3f       	cpi	r18, 0xFF	; 255
    a8dc:	3f 4f       	sbci	r19, 0xFF	; 255
    a8de:	49 f0       	breq	.+18     	; 0xa8f2 <dir_register+0x294>
    a8e0:	88 0f       	add	r24, r24
    a8e2:	99 1f       	adc	r25, r25
    a8e4:	db 01       	movw	r26, r22
    a8e6:	a8 0f       	add	r26, r24
    a8e8:	b9 1f       	adc	r27, r25
    a8ea:	8d 91       	ld	r24, X+
    a8ec:	9c 91       	ld	r25, X
    a8ee:	89 2b       	or	r24, r25
    a8f0:	19 f4       	brne	.+6      	; 0xa8f8 <dir_register+0x29a>
    a8f2:	27 2d       	mov	r18, r7
    a8f4:	20 64       	ori	r18, 0x40	; 64
    a8f6:	72 2e       	mov	r7, r18
    a8f8:	ed 89       	ldd	r30, Y+21	; 0x15
    a8fa:	fe 89       	ldd	r31, Y+22	; 0x16
    a8fc:	70 82       	st	Z, r7
    a8fe:	f6 01       	movw	r30, r12
    a900:	53 82       	std	Z+3, r5	; 0x03
    a902:	60 e0       	ldi	r22, 0x00	; 0
    a904:	70 e0       	ldi	r23, 0x00	; 0
    a906:	c8 01       	movw	r24, r16
    a908:	6a db       	rcall	.-2348   	; 0x9fde <dir_next>
    a90a:	00 97       	sbiw	r24, 0x00	; 0
    a90c:	81 f5       	brne	.+96     	; 0xa96e <dir_register+0x310>
    a90e:	f1 e0       	ldi	r31, 0x01	; 1
    a910:	ef 1a       	sub	r14, r31
    a912:	f1 08       	sbc	r15, r1
    a914:	09 f0       	breq	.+2      	; 0xa918 <dir_register+0x2ba>
    a916:	9e cf       	rjmp	.-196    	; 0xa854 <dir_register+0x1f6>
    a918:	03 c0       	rjmp	.+6      	; 0xa920 <dir_register+0x2c2>
    a91a:	26 e0       	ldi	r18, 0x06	; 6
    a91c:	90 e0       	ldi	r25, 0x00	; 0
    a91e:	28 c0       	rjmp	.+80     	; 0xa970 <dir_register+0x312>
    a920:	f8 01       	movw	r30, r16
    a922:	46 89       	ldd	r20, Z+22	; 0x16
    a924:	57 89       	ldd	r21, Z+23	; 0x17
    a926:	60 8d       	ldd	r22, Z+24	; 0x18
    a928:	71 8d       	ldd	r23, Z+25	; 0x19
    a92a:	c6 01       	movw	r24, r12
    a92c:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    a930:	00 97       	sbiw	r24, 0x00	; 0
    a932:	e9 f4       	brne	.+58     	; 0xa96e <dir_register+0x310>
    a934:	40 e2       	ldi	r20, 0x20	; 32
    a936:	50 e0       	ldi	r21, 0x00	; 0
    a938:	60 e0       	ldi	r22, 0x00	; 0
    a93a:	70 e0       	ldi	r23, 0x00	; 0
    a93c:	f8 01       	movw	r30, r16
    a93e:	82 8d       	ldd	r24, Z+26	; 0x1a
    a940:	93 8d       	ldd	r25, Z+27	; 0x1b
    a942:	0e 94 33 44 	call	0x8866	; 0x8866 <mem_set>
    a946:	4b e0       	ldi	r20, 0x0B	; 11
    a948:	50 e0       	ldi	r21, 0x00	; 0
    a94a:	b5 01       	movw	r22, r10
    a94c:	f8 01       	movw	r30, r16
    a94e:	82 8d       	ldd	r24, Z+26	; 0x1a
    a950:	93 8d       	ldd	r25, Z+27	; 0x1b
    a952:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
    a956:	f8 01       	movw	r30, r16
    a958:	22 8d       	ldd	r18, Z+26	; 0x1a
    a95a:	33 8d       	ldd	r19, Z+27	; 0x1b
    a95c:	87 a1       	ldd	r24, Z+39	; 0x27
    a95e:	88 71       	andi	r24, 0x18	; 24
    a960:	f9 01       	movw	r30, r18
    a962:	84 87       	std	Z+12, r24	; 0x0c
    a964:	81 e0       	ldi	r24, 0x01	; 1
    a966:	f6 01       	movw	r30, r12
    a968:	83 83       	std	Z+3, r24	; 0x03
    a96a:	20 e0       	ldi	r18, 0x00	; 0
    a96c:	d7 cf       	rjmp	.-82     	; 0xa91c <dir_register+0x2be>
    a96e:	28 2f       	mov	r18, r24
    a970:	82 2f       	mov	r24, r18
    a972:	66 96       	adiw	r28, 0x16	; 22
    a974:	e2 e1       	ldi	r30, 0x12	; 18
    a976:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0000a97a <follow_path>:
    a97a:	aa e0       	ldi	r26, 0x0A	; 10
    a97c:	b0 e0       	ldi	r27, 0x00	; 0
    a97e:	e3 ec       	ldi	r30, 0xC3	; 195
    a980:	f4 e5       	ldi	r31, 0x54	; 84
    a982:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    a986:	7c 01       	movw	r14, r24
    a988:	3b 01       	movw	r6, r22
    a98a:	dc 01       	movw	r26, r24
    a98c:	0d 90       	ld	r0, X+
    a98e:	bc 91       	ld	r27, X
    a990:	a0 2d       	mov	r26, r0
    a992:	be 83       	std	Y+6, r27	; 0x06
    a994:	ad 83       	std	Y+5, r26	; 0x05
    a996:	fb 01       	movw	r30, r22
    a998:	80 81       	ld	r24, Z
    a99a:	8f 32       	cpi	r24, 0x2F	; 47
    a99c:	11 f0       	breq	.+4      	; 0xa9a2 <follow_path+0x28>
    a99e:	8c 35       	cpi	r24, 0x5C	; 92
    a9a0:	11 f4       	brne	.+4      	; 0xa9a6 <follow_path+0x2c>
    a9a2:	93 01       	movw	r18, r6
    a9a4:	0c c0       	rjmp	.+24     	; 0xa9be <follow_path+0x44>
    a9a6:	ed 81       	ldd	r30, Y+5	; 0x05
    a9a8:	fe 81       	ldd	r31, Y+6	; 0x06
    a9aa:	85 89       	ldd	r24, Z+21	; 0x15
    a9ac:	96 89       	ldd	r25, Z+22	; 0x16
    a9ae:	a7 89       	ldd	r26, Z+23	; 0x17
    a9b0:	b0 8d       	ldd	r27, Z+24	; 0x18
    a9b2:	f7 01       	movw	r30, r14
    a9b4:	86 83       	std	Z+6, r24	; 0x06
    a9b6:	97 83       	std	Z+7, r25	; 0x07
    a9b8:	a0 87       	std	Z+8, r26	; 0x08
    a9ba:	b1 87       	std	Z+9, r27	; 0x09
    a9bc:	0e c0       	rjmp	.+28     	; 0xa9da <follow_path+0x60>
    a9be:	39 01       	movw	r6, r18
    a9c0:	d9 01       	movw	r26, r18
    a9c2:	8c 91       	ld	r24, X
    a9c4:	2f 5f       	subi	r18, 0xFF	; 255
    a9c6:	3f 4f       	sbci	r19, 0xFF	; 255
    a9c8:	8f 32       	cpi	r24, 0x2F	; 47
    a9ca:	c9 f3       	breq	.-14     	; 0xa9be <follow_path+0x44>
    a9cc:	8c 35       	cpi	r24, 0x5C	; 92
    a9ce:	b9 f3       	breq	.-18     	; 0xa9be <follow_path+0x44>
    a9d0:	f7 01       	movw	r30, r14
    a9d2:	16 82       	std	Z+6, r1	; 0x06
    a9d4:	17 82       	std	Z+7, r1	; 0x07
    a9d6:	10 86       	std	Z+8, r1	; 0x08
    a9d8:	11 86       	std	Z+9, r1	; 0x09
    a9da:	d3 01       	movw	r26, r6
    a9dc:	8c 91       	ld	r24, X
    a9de:	80 32       	cpi	r24, 0x20	; 32
    a9e0:	58 f0       	brcs	.+22     	; 0xa9f8 <follow_path+0x7e>
    a9e2:	f7 01       	movw	r30, r14
    a9e4:	7c 96       	adiw	r30, 0x1c	; 28
    a9e6:	f8 87       	std	Y+8, r31	; 0x08
    a9e8:	ef 83       	std	Y+7, r30	; 0x07
    a9ea:	2d 81       	ldd	r18, Y+5	; 0x05
    a9ec:	3e 81       	ldd	r19, Y+6	; 0x06
    a9ee:	2b 5c       	subi	r18, 0xCB	; 203
    a9f0:	3f 4f       	sbci	r19, 0xFF	; 255
    a9f2:	3a 87       	std	Y+10, r19	; 0x0a
    a9f4:	29 87       	std	Y+9, r18	; 0x09
    a9f6:	96 c0       	rjmp	.+300    	; 0xab24 <follow_path+0x1aa>
    a9f8:	80 e8       	ldi	r24, 0x80	; 128
    a9fa:	f7 01       	movw	r30, r14
    a9fc:	87 a3       	std	Z+39, r24	; 0x27
    a9fe:	40 e0       	ldi	r20, 0x00	; 0
    aa00:	50 e0       	ldi	r21, 0x00	; 0
    aa02:	ba 01       	movw	r22, r20
    aa04:	c7 01       	movw	r24, r14
    aa06:	73 d8       	rcall	.-3866   	; 0x9aee <dir_sdi>
    aa08:	e5 c1       	rjmp	.+970    	; 0xadd4 <follow_path+0x45a>
    aa0a:	6c 35       	cpi	r22, 0x5C	; 92
    aa0c:	71 05       	cpc	r23, r1
    aa0e:	b9 f1       	breq	.+110    	; 0xaa7e <follow_path+0x104>
    aa10:	60 38       	cpi	r22, 0x80	; 128
    aa12:	71 05       	cpc	r23, r1
    aa14:	28 f4       	brcc	.+10     	; 0xaa20 <follow_path+0xa6>
    aa16:	e2 e2       	ldi	r30, 0x22	; 34
    aa18:	f4 e0       	ldi	r31, 0x04	; 4
    aa1a:	41 91       	ld	r20, Z+
    aa1c:	41 11       	cpse	r20, r1
    aa1e:	8c c0       	rjmp	.+280    	; 0xab38 <follow_path+0x1be>
    aa20:	0f 3f       	cpi	r16, 0xFF	; 255
    aa22:	11 05       	cpc	r17, r1
    aa24:	08 f0       	brcs	.+2      	; 0xaa28 <follow_path+0xae>
    aa26:	b9 c1       	rjmp	.+882    	; 0xad9a <follow_path+0x420>
    aa28:	f8 01       	movw	r30, r16
    aa2a:	ee 0f       	add	r30, r30
    aa2c:	ff 1f       	adc	r31, r31
    aa2e:	ea 0d       	add	r30, r10
    aa30:	fb 1d       	adc	r31, r11
    aa32:	71 83       	std	Z+1, r23	; 0x01
    aa34:	60 83       	st	Z, r22
    aa36:	0f 5f       	subi	r16, 0xFF	; 255
    aa38:	1f 4f       	sbci	r17, 0xFF	; 255
    aa3a:	ce 01       	movw	r24, r28
    aa3c:	01 96       	adiw	r24, 0x01	; 1
    aa3e:	0e 94 4b 44 	call	0x8896	; 0x8896 <tchar2uni>
    aa42:	6f 3f       	cpi	r22, 0xFF	; 255
    aa44:	bf ef       	ldi	r27, 0xFF	; 255
    aa46:	7b 07       	cpc	r23, r27
    aa48:	8b 07       	cpc	r24, r27
    aa4a:	9b 07       	cpc	r25, r27
    aa4c:	09 f4       	brne	.+2      	; 0xaa50 <follow_path+0xd6>
    aa4e:	a5 c1       	rjmp	.+842    	; 0xad9a <follow_path+0x420>
    aa50:	61 15       	cp	r22, r1
    aa52:	71 05       	cpc	r23, r1
    aa54:	e1 e0       	ldi	r30, 0x01	; 1
    aa56:	8e 07       	cpc	r24, r30
    aa58:	91 05       	cpc	r25, r1
    aa5a:	48 f0       	brcs	.+18     	; 0xaa6e <follow_path+0xf4>
    aa5c:	f8 01       	movw	r30, r16
    aa5e:	ee 0f       	add	r30, r30
    aa60:	ff 1f       	adc	r31, r31
    aa62:	ea 0d       	add	r30, r10
    aa64:	fb 1d       	adc	r31, r11
    aa66:	91 83       	std	Z+1, r25	; 0x01
    aa68:	80 83       	st	Z, r24
    aa6a:	0f 5f       	subi	r16, 0xFF	; 255
    aa6c:	1f 4f       	sbci	r17, 0xFF	; 255
    aa6e:	9b 01       	movw	r18, r22
    aa70:	60 32       	cpi	r22, 0x20	; 32
    aa72:	71 05       	cpc	r23, r1
    aa74:	08 f4       	brcc	.+2      	; 0xaa78 <follow_path+0xfe>
    aa76:	6a c0       	rjmp	.+212    	; 0xab4c <follow_path+0x1d2>
    aa78:	6f 32       	cpi	r22, 0x2F	; 47
    aa7a:	71 05       	cpc	r23, r1
    aa7c:	31 f6       	brne	.-116    	; 0xaa0a <follow_path+0x90>
    aa7e:	e9 81       	ldd	r30, Y+1	; 0x01
    aa80:	fa 81       	ldd	r31, Y+2	; 0x02
    aa82:	80 81       	ld	r24, Z
    aa84:	8f 32       	cpi	r24, 0x2F	; 47
    aa86:	09 f4       	brne	.+2      	; 0xaa8a <follow_path+0x110>
    aa88:	5d c0       	rjmp	.+186    	; 0xab44 <follow_path+0x1ca>
    aa8a:	8c 35       	cpi	r24, 0x5C	; 92
    aa8c:	09 f4       	brne	.+2      	; 0xaa90 <follow_path+0x116>
    aa8e:	5a c0       	rjmp	.+180    	; 0xab44 <follow_path+0x1ca>
    aa90:	1b 82       	std	Y+3, r1	; 0x03
    aa92:	69 80       	ldd	r6, Y+1	; 0x01
    aa94:	7a 80       	ldd	r7, Y+2	; 0x02
    aa96:	98 01       	movw	r18, r16
    aa98:	22 0f       	add	r18, r18
    aa9a:	33 1f       	adc	r19, r19
    aa9c:	01 30       	cpi	r16, 0x01	; 1
    aa9e:	11 05       	cpc	r17, r1
    aaa0:	09 f0       	breq	.+2      	; 0xaaa4 <follow_path+0x12a>
    aaa2:	57 c0       	rjmp	.+174    	; 0xab52 <follow_path+0x1d8>
    aaa4:	d5 01       	movw	r26, r10
    aaa6:	8d 91       	ld	r24, X+
    aaa8:	9c 91       	ld	r25, X
    aaaa:	8e 97       	sbiw	r24, 0x2e	; 46
    aaac:	09 f0       	breq	.+2      	; 0xaab0 <follow_path+0x136>
    aaae:	5c c0       	rjmp	.+184    	; 0xab68 <follow_path+0x1ee>
    aab0:	f9 01       	movw	r30, r18
    aab2:	ea 0d       	add	r30, r10
    aab4:	fb 1d       	adc	r31, r11
    aab6:	11 82       	std	Z+1, r1	; 0x01
    aab8:	10 82       	st	Z, r1
    aaba:	f7 01       	movw	r30, r14
    aabc:	7c 96       	adiw	r30, 0x1c	; 28
    aabe:	80 e0       	ldi	r24, 0x00	; 0
    aac0:	90 e0       	ldi	r25, 0x00	; 0
    aac2:	80 17       	cp	r24, r16
    aac4:	91 07       	cpc	r25, r17
    aac6:	08 f0       	brcs	.+2      	; 0xaaca <follow_path+0x150>
    aac8:	53 c0       	rjmp	.+166    	; 0xab70 <follow_path+0x1f6>
    aaca:	2e e2       	ldi	r18, 0x2E	; 46
    aacc:	21 93       	st	Z+, r18
    aace:	01 96       	adiw	r24, 0x01	; 1
    aad0:	8b 30       	cpi	r24, 0x0B	; 11
    aad2:	91 05       	cpc	r25, r1
    aad4:	b1 f7       	brne	.-20     	; 0xaac2 <follow_path+0x148>
    aad6:	8b 81       	ldd	r24, Y+3	; 0x03
    aad8:	80 62       	ori	r24, 0x20	; 32
    aada:	f7 01       	movw	r30, r14
    aadc:	87 a3       	std	Z+39, r24	; 0x27
    aade:	80 e0       	ldi	r24, 0x00	; 0
    aae0:	90 e0       	ldi	r25, 0x00	; 0
    aae2:	00 97       	sbiw	r24, 0x00	; 0
    aae4:	09 f0       	breq	.+2      	; 0xaae8 <follow_path+0x16e>
    aae6:	76 c1       	rjmp	.+748    	; 0xadd4 <follow_path+0x45a>
    aae8:	c7 01       	movw	r24, r14
    aaea:	ab dc       	rcall	.-1706   	; 0xa442 <dir_find>
    aaec:	f7 01       	movw	r30, r14
    aaee:	27 a1       	ldd	r18, Z+39	; 0x27
    aaf0:	00 97       	sbiw	r24, 0x00	; 0
    aaf2:	09 f0       	breq	.+2      	; 0xaaf6 <follow_path+0x17c>
    aaf4:	55 c1       	rjmp	.+682    	; 0xada0 <follow_path+0x426>
    aaf6:	22 fd       	sbrc	r18, 2
    aaf8:	6d c1       	rjmp	.+730    	; 0xadd4 <follow_path+0x45a>
    aafa:	f7 01       	movw	r30, r14
    aafc:	84 81       	ldd	r24, Z+4	; 0x04
    aafe:	84 ff       	sbrs	r24, 4
    ab00:	60 c1       	rjmp	.+704    	; 0xadc2 <follow_path+0x448>
    ab02:	66 85       	ldd	r22, Z+14	; 0x0e
    ab04:	77 85       	ldd	r23, Z+15	; 0x0f
    ab06:	71 70       	andi	r23, 0x01	; 1
    ab08:	29 85       	ldd	r18, Y+9	; 0x09
    ab0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    ab0c:	62 0f       	add	r22, r18
    ab0e:	73 1f       	adc	r23, r19
    ab10:	ad 81       	ldd	r26, Y+5	; 0x05
    ab12:	be 81       	ldd	r27, Y+6	; 0x06
    ab14:	8c 91       	ld	r24, X
    ab16:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <ld_clust.isra.4>
    ab1a:	f7 01       	movw	r30, r14
    ab1c:	66 83       	std	Z+6, r22	; 0x06
    ab1e:	77 83       	std	Z+7, r23	; 0x07
    ab20:	80 87       	std	Z+8, r24	; 0x08
    ab22:	91 87       	std	Z+9, r25	; 0x09
    ab24:	7a 82       	std	Y+2, r7	; 0x02
    ab26:	69 82       	std	Y+1, r6	; 0x01
    ab28:	d7 01       	movw	r26, r14
    ab2a:	ed 91       	ld	r30, X+
    ab2c:	fc 91       	ld	r31, X
    ab2e:	a3 84       	ldd	r10, Z+11	; 0x0b
    ab30:	b4 84       	ldd	r11, Z+12	; 0x0c
    ab32:	00 e0       	ldi	r16, 0x00	; 0
    ab34:	10 e0       	ldi	r17, 0x00	; 0
    ab36:	81 cf       	rjmp	.-254    	; 0xaa3a <follow_path+0xc0>
    ab38:	50 e0       	ldi	r21, 0x00	; 0
    ab3a:	24 17       	cp	r18, r20
    ab3c:	35 07       	cpc	r19, r21
    ab3e:	09 f0       	breq	.+2      	; 0xab42 <follow_path+0x1c8>
    ab40:	6c cf       	rjmp	.-296    	; 0xaa1a <follow_path+0xa0>
    ab42:	2b c1       	rjmp	.+598    	; 0xad9a <follow_path+0x420>
    ab44:	31 96       	adiw	r30, 0x01	; 1
    ab46:	fa 83       	std	Y+2, r31	; 0x02
    ab48:	e9 83       	std	Y+1, r30	; 0x01
    ab4a:	99 cf       	rjmp	.-206    	; 0xaa7e <follow_path+0x104>
    ab4c:	f4 e0       	ldi	r31, 0x04	; 4
    ab4e:	fb 83       	std	Y+3, r31	; 0x03
    ab50:	a0 cf       	rjmp	.-192    	; 0xaa92 <follow_path+0x118>
    ab52:	02 30       	cpi	r16, 0x02	; 2
    ab54:	11 05       	cpc	r17, r1
    ab56:	41 f4       	brne	.+16     	; 0xab68 <follow_path+0x1ee>
    ab58:	f5 01       	movw	r30, r10
    ab5a:	82 81       	ldd	r24, Z+2	; 0x02
    ab5c:	93 81       	ldd	r25, Z+3	; 0x03
    ab5e:	8e 97       	sbiw	r24, 0x2e	; 46
    ab60:	19 f4       	brne	.+6      	; 0xab68 <follow_path+0x1ee>
    ab62:	80 81       	ld	r24, Z
    ab64:	91 81       	ldd	r25, Z+1	; 0x01
    ab66:	a1 cf       	rjmp	.-190    	; 0xaaaa <follow_path+0x130>
    ab68:	f9 01       	movw	r30, r18
    ab6a:	ea 0d       	add	r30, r10
    ab6c:	fb 1d       	adc	r31, r11
    ab6e:	09 c0       	rjmp	.+18     	; 0xab82 <follow_path+0x208>
    ab70:	20 e2       	ldi	r18, 0x20	; 32
    ab72:	ac cf       	rjmp	.-168    	; 0xaacc <follow_path+0x152>
    ab74:	92 91       	ld	r25, -Z
    ab76:	82 91       	ld	r24, -Z
    ab78:	80 32       	cpi	r24, 0x20	; 32
    ab7a:	91 05       	cpc	r25, r1
    ab7c:	31 f4       	brne	.+12     	; 0xab8a <follow_path+0x210>
    ab7e:	01 50       	subi	r16, 0x01	; 1
    ab80:	11 09       	sbc	r17, r1
    ab82:	01 15       	cp	r16, r1
    ab84:	11 05       	cpc	r17, r1
    ab86:	b1 f7       	brne	.-20     	; 0xab74 <follow_path+0x1fa>
    ab88:	02 c0       	rjmp	.+4      	; 0xab8e <follow_path+0x214>
    ab8a:	8e 97       	sbiw	r24, 0x2e	; 46
    ab8c:	c1 f3       	breq	.-16     	; 0xab7e <follow_path+0x204>
    ab8e:	f8 01       	movw	r30, r16
    ab90:	ee 0f       	add	r30, r30
    ab92:	ff 1f       	adc	r31, r31
    ab94:	ea 0d       	add	r30, r10
    ab96:	fb 1d       	adc	r31, r11
    ab98:	11 82       	std	Z+1, r1	; 0x01
    ab9a:	10 82       	st	Z, r1
    ab9c:	01 15       	cp	r16, r1
    ab9e:	11 05       	cpc	r17, r1
    aba0:	09 f4       	brne	.+2      	; 0xaba4 <follow_path+0x22a>
    aba2:	fb c0       	rjmp	.+502    	; 0xad9a <follow_path+0x420>
    aba4:	d5 01       	movw	r26, r10
    aba6:	41 2c       	mov	r4, r1
    aba8:	51 2c       	mov	r5, r1
    abaa:	8d 91       	ld	r24, X+
    abac:	9d 91       	ld	r25, X+
    abae:	80 32       	cpi	r24, 0x20	; 32
    abb0:	91 05       	cpc	r25, r1
    abb2:	21 f4       	brne	.+8      	; 0xabbc <follow_path+0x242>
    abb4:	2f ef       	ldi	r18, 0xFF	; 255
    abb6:	42 1a       	sub	r4, r18
    abb8:	52 0a       	sbc	r5, r18
    abba:	f7 cf       	rjmp	.-18     	; 0xabaa <follow_path+0x230>
    abbc:	41 14       	cp	r4, r1
    abbe:	51 04       	cpc	r5, r1
    abc0:	11 f4       	brne	.+4      	; 0xabc6 <follow_path+0x24c>
    abc2:	8e 97       	sbiw	r24, 0x2e	; 46
    abc4:	39 f4       	brne	.+14     	; 0xabd4 <follow_path+0x25a>
    abc6:	3b 81       	ldd	r19, Y+3	; 0x03
    abc8:	33 60       	ori	r19, 0x03	; 3
    abca:	3b 83       	std	Y+3, r19	; 0x03
    abcc:	03 c0       	rjmp	.+6      	; 0xabd4 <follow_path+0x25a>
    abce:	01 50       	subi	r16, 0x01	; 1
    abd0:	11 09       	sbc	r17, r1
    abd2:	21 f0       	breq	.+8      	; 0xabdc <follow_path+0x262>
    abd4:	92 91       	ld	r25, -Z
    abd6:	82 91       	ld	r24, -Z
    abd8:	8e 97       	sbiw	r24, 0x2e	; 46
    abda:	c9 f7       	brne	.-14     	; 0xabce <follow_path+0x254>
    abdc:	4b e0       	ldi	r20, 0x0B	; 11
    abde:	50 e0       	ldi	r21, 0x00	; 0
    abe0:	60 e2       	ldi	r22, 0x20	; 32
    abe2:	70 e0       	ldi	r23, 0x00	; 0
    abe4:	8f 81       	ldd	r24, Y+7	; 0x07
    abe6:	98 85       	ldd	r25, Y+8	; 0x08
    abe8:	0e 94 33 44 	call	0x8866	; 0x8866 <mem_set>
    abec:	48 e0       	ldi	r20, 0x08	; 8
    abee:	84 2e       	mov	r8, r20
    abf0:	91 2c       	mov	r9, r1
    abf2:	c1 2c       	mov	r12, r1
    abf4:	d1 2c       	mov	r13, r1
    abf6:	1c 82       	std	Y+4, r1	; 0x04
    abf8:	12 01       	movw	r2, r4
    abfa:	8f ef       	ldi	r24, 0xFF	; 255
    abfc:	28 1a       	sub	r2, r24
    abfe:	38 0a       	sbc	r3, r24
    ac00:	44 0c       	add	r4, r4
    ac02:	55 1c       	adc	r5, r5
    ac04:	f5 01       	movw	r30, r10
    ac06:	e4 0d       	add	r30, r4
    ac08:	f5 1d       	adc	r31, r5
    ac0a:	80 81       	ld	r24, Z
    ac0c:	91 81       	ldd	r25, Z+1	; 0x01
    ac0e:	00 97       	sbiw	r24, 0x00	; 0
    ac10:	09 f4       	brne	.+2      	; 0xac14 <follow_path+0x29a>
    ac12:	98 c0       	rjmp	.+304    	; 0xad44 <follow_path+0x3ca>
    ac14:	80 32       	cpi	r24, 0x20	; 32
    ac16:	91 05       	cpc	r25, r1
    ac18:	31 f0       	breq	.+12     	; 0xac26 <follow_path+0x2ac>
    ac1a:	8e 32       	cpi	r24, 0x2E	; 46
    ac1c:	91 05       	cpc	r25, r1
    ac1e:	41 f4       	brne	.+16     	; 0xac30 <follow_path+0x2b6>
    ac20:	20 16       	cp	r2, r16
    ac22:	31 06       	cpc	r3, r17
    ac24:	61 f0       	breq	.+24     	; 0xac3e <follow_path+0x2c4>
    ac26:	9b 81       	ldd	r25, Y+3	; 0x03
    ac28:	93 60       	ori	r25, 0x03	; 3
    ac2a:	9b 83       	std	Y+3, r25	; 0x03
    ac2c:	21 01       	movw	r4, r2
    ac2e:	e4 cf       	rjmp	.-56     	; 0xabf8 <follow_path+0x27e>
    ac30:	c8 14       	cp	r12, r8
    ac32:	d9 04       	cpc	r13, r9
    ac34:	40 f4       	brcc	.+16     	; 0xac46 <follow_path+0x2cc>
    ac36:	20 16       	cp	r2, r16
    ac38:	31 06       	cpc	r3, r17
    ac3a:	31 f5       	brne	.+76     	; 0xac88 <follow_path+0x30e>
    ac3c:	c5 c0       	rjmp	.+394    	; 0xadc8 <follow_path+0x44e>
    ac3e:	c8 14       	cp	r12, r8
    ac40:	d9 04       	cpc	r13, r9
    ac42:	08 f4       	brcc	.+2      	; 0xac46 <follow_path+0x2cc>
    ac44:	c1 c0       	rjmp	.+386    	; 0xadc8 <follow_path+0x44e>
    ac46:	ab e0       	ldi	r26, 0x0B	; 11
    ac48:	8a 16       	cp	r8, r26
    ac4a:	91 04       	cpc	r9, r1
    ac4c:	39 f4       	brne	.+14     	; 0xac5c <follow_path+0x2e2>
    ac4e:	bb 81       	ldd	r27, Y+3	; 0x03
    ac50:	b3 60       	ori	r27, 0x03	; 3
    ac52:	bb 83       	std	Y+3, r27	; 0x03
    ac54:	2b e0       	ldi	r18, 0x0B	; 11
    ac56:	82 2e       	mov	r8, r18
    ac58:	91 2c       	mov	r9, r1
    ac5a:	74 c0       	rjmp	.+232    	; 0xad44 <follow_path+0x3ca>
    ac5c:	20 16       	cp	r2, r16
    ac5e:	31 06       	cpc	r3, r17
    ac60:	39 f0       	breq	.+14     	; 0xac70 <follow_path+0x2f6>
    ac62:	eb 81       	ldd	r30, Y+3	; 0x03
    ac64:	e3 60       	ori	r30, 0x03	; 3
    ac66:	eb 83       	std	Y+3, r30	; 0x03
    ac68:	02 15       	cp	r16, r2
    ac6a:	13 05       	cpc	r17, r3
    ac6c:	08 f4       	brcc	.+2      	; 0xac70 <follow_path+0x2f6>
    ac6e:	6a c0       	rjmp	.+212    	; 0xad44 <follow_path+0x3ca>
    ac70:	fc 81       	ldd	r31, Y+4	; 0x04
    ac72:	ff 0f       	add	r31, r31
    ac74:	ff 0f       	add	r31, r31
    ac76:	fc 83       	std	Y+4, r31	; 0x04
    ac78:	18 01       	movw	r2, r16
    ac7a:	8b e0       	ldi	r24, 0x0B	; 11
    ac7c:	88 2e       	mov	r8, r24
    ac7e:	91 2c       	mov	r9, r1
    ac80:	98 e0       	ldi	r25, 0x08	; 8
    ac82:	c9 2e       	mov	r12, r25
    ac84:	d1 2c       	mov	r13, r1
    ac86:	d2 cf       	rjmp	.-92     	; 0xac2c <follow_path+0x2b2>
    ac88:	80 38       	cpi	r24, 0x80	; 128
    ac8a:	91 05       	cpc	r25, r1
    ac8c:	78 f1       	brcs	.+94     	; 0xacec <follow_path+0x372>
    ac8e:	2b 81       	ldd	r18, Y+3	; 0x03
    ac90:	22 60       	ori	r18, 0x02	; 2
    ac92:	52 2e       	mov	r5, r18
    ac94:	bc 01       	movw	r22, r24
    ac96:	80 e0       	ldi	r24, 0x00	; 0
    ac98:	90 e0       	ldi	r25, 0x00	; 0
    ac9a:	45 eb       	ldi	r20, 0xB5	; 181
    ac9c:	51 e0       	ldi	r21, 0x01	; 1
    ac9e:	0e 94 86 66 	call	0xcd0c	; 0xcd0c <ff_uni2oem>
    aca2:	87 ff       	sbrs	r24, 7
    aca4:	08 c0       	rjmp	.+16     	; 0xacb6 <follow_path+0x33c>
    aca6:	8f 77       	andi	r24, 0x7F	; 127
    aca8:	99 27       	eor	r25, r25
    acaa:	fc 01       	movw	r30, r24
    acac:	ea 59       	subi	r30, 0x9A	; 154
    acae:	fb 4f       	sbci	r31, 0xFB	; 251
    acb0:	80 81       	ld	r24, Z
    acb2:	90 e0       	ldi	r25, 0x00	; 0
    acb4:	18 c0       	rjmp	.+48     	; 0xace6 <follow_path+0x36c>
    acb6:	8f 3f       	cpi	r24, 0xFF	; 255
    acb8:	91 05       	cpc	r25, r1
    acba:	a9 f0       	breq	.+42     	; 0xace6 <follow_path+0x36c>
    acbc:	a0 f0       	brcs	.+40     	; 0xace6 <follow_path+0x36c>
    acbe:	94 01       	movw	r18, r8
    acc0:	21 50       	subi	r18, 0x01	; 1
    acc2:	31 09       	sbc	r19, r1
    acc4:	c2 16       	cp	r12, r18
    acc6:	d3 06       	cpc	r13, r19
    acc8:	28 f0       	brcs	.+10     	; 0xacd4 <follow_path+0x35a>
    acca:	3b 81       	ldd	r19, Y+3	; 0x03
    accc:	33 60       	ori	r19, 0x03	; 3
    acce:	3b 83       	std	Y+3, r19	; 0x03
    acd0:	64 01       	movw	r12, r8
    acd2:	ac cf       	rjmp	.-168    	; 0xac2c <follow_path+0x2b2>
    acd4:	f7 01       	movw	r30, r14
    acd6:	ec 0d       	add	r30, r12
    acd8:	fd 1d       	adc	r31, r13
    acda:	94 8f       	std	Z+28, r25	; 0x1c
    acdc:	d6 01       	movw	r26, r12
    acde:	11 96       	adiw	r26, 0x01	; 1
    ace0:	6d 01       	movw	r12, r26
    ace2:	5b 82       	std	Y+3, r5	; 0x03
    ace4:	26 c0       	rjmp	.+76     	; 0xad32 <follow_path+0x3b8>
    ace6:	00 97       	sbiw	r24, 0x00	; 0
    ace8:	59 f0       	breq	.+22     	; 0xad00 <follow_path+0x386>
    acea:	5b 82       	std	Y+3, r5	; 0x03
    acec:	eb e2       	ldi	r30, 0x2B	; 43
    acee:	f4 e0       	ldi	r31, 0x04	; 4
    acf0:	21 91       	ld	r18, Z+
    acf2:	22 23       	and	r18, r18
    acf4:	59 f0       	breq	.+22     	; 0xad0c <follow_path+0x392>
    acf6:	30 e0       	ldi	r19, 0x00	; 0
    acf8:	82 17       	cp	r24, r18
    acfa:	93 07       	cpc	r25, r19
    acfc:	c9 f7       	brne	.-14     	; 0xacf0 <follow_path+0x376>
    acfe:	5b 80       	ldd	r5, Y+3	; 0x03
    ad00:	b5 2d       	mov	r27, r5
    ad02:	b3 60       	ori	r27, 0x03	; 3
    ad04:	bb 83       	std	Y+3, r27	; 0x03
    ad06:	8f e5       	ldi	r24, 0x5F	; 95
    ad08:	90 e0       	ldi	r25, 0x00	; 0
    ad0a:	13 c0       	rjmp	.+38     	; 0xad32 <follow_path+0x3b8>
    ad0c:	9c 01       	movw	r18, r24
    ad0e:	21 54       	subi	r18, 0x41	; 65
    ad10:	31 09       	sbc	r19, r1
    ad12:	2a 31       	cpi	r18, 0x1A	; 26
    ad14:	31 05       	cpc	r19, r1
    ad16:	18 f4       	brcc	.+6      	; 0xad1e <follow_path+0x3a4>
    ad18:	ec 81       	ldd	r30, Y+4	; 0x04
    ad1a:	e2 60       	ori	r30, 0x02	; 2
    ad1c:	ec 83       	std	Y+4, r30	; 0x04
    ad1e:	9c 01       	movw	r18, r24
    ad20:	21 56       	subi	r18, 0x61	; 97
    ad22:	31 09       	sbc	r19, r1
    ad24:	2a 31       	cpi	r18, 0x1A	; 26
    ad26:	31 05       	cpc	r19, r1
    ad28:	20 f4       	brcc	.+8      	; 0xad32 <follow_path+0x3b8>
    ad2a:	fc 81       	ldd	r31, Y+4	; 0x04
    ad2c:	f1 60       	ori	r31, 0x01	; 1
    ad2e:	fc 83       	std	Y+4, r31	; 0x04
    ad30:	80 97       	sbiw	r24, 0x20	; 32
    ad32:	f7 01       	movw	r30, r14
    ad34:	ec 0d       	add	r30, r12
    ad36:	fd 1d       	adc	r31, r13
    ad38:	84 8f       	std	Z+28, r24	; 0x1c
    ad3a:	96 01       	movw	r18, r12
    ad3c:	2f 5f       	subi	r18, 0xFF	; 255
    ad3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ad40:	69 01       	movw	r12, r18
    ad42:	74 cf       	rjmp	.-280    	; 0xac2c <follow_path+0x2b2>
    ad44:	f7 01       	movw	r30, r14
    ad46:	84 8d       	ldd	r24, Z+28	; 0x1c
    ad48:	85 3e       	cpi	r24, 0xE5	; 229
    ad4a:	11 f4       	brne	.+4      	; 0xad50 <follow_path+0x3d6>
    ad4c:	25 e0       	ldi	r18, 0x05	; 5
    ad4e:	24 8f       	std	Z+28, r18	; 0x1c
    ad50:	38 e0       	ldi	r19, 0x08	; 8
    ad52:	83 16       	cp	r8, r19
    ad54:	91 04       	cpc	r9, r1
    ad56:	21 f4       	brne	.+8      	; 0xad60 <follow_path+0x3e6>
    ad58:	8c 81       	ldd	r24, Y+4	; 0x04
    ad5a:	88 0f       	add	r24, r24
    ad5c:	88 0f       	add	r24, r24
    ad5e:	8c 83       	std	Y+4, r24	; 0x04
    ad60:	8c 81       	ldd	r24, Y+4	; 0x04
    ad62:	8c 70       	andi	r24, 0x0C	; 12
    ad64:	8c 30       	cpi	r24, 0x0C	; 12
    ad66:	21 f0       	breq	.+8      	; 0xad70 <follow_path+0x3f6>
    ad68:	8c 81       	ldd	r24, Y+4	; 0x04
    ad6a:	83 70       	andi	r24, 0x03	; 3
    ad6c:	83 30       	cpi	r24, 0x03	; 3
    ad6e:	19 f4       	brne	.+6      	; 0xad76 <follow_path+0x3fc>
    ad70:	9b 81       	ldd	r25, Y+3	; 0x03
    ad72:	92 60       	ori	r25, 0x02	; 2
    ad74:	9b 83       	std	Y+3, r25	; 0x03
    ad76:	ab 81       	ldd	r26, Y+3	; 0x03
    ad78:	a1 fd       	sbrc	r26, 1
    ad7a:	0b c0       	rjmp	.+22     	; 0xad92 <follow_path+0x418>
    ad7c:	bc 81       	ldd	r27, Y+4	; 0x04
    ad7e:	b0 ff       	sbrs	r27, 0
    ad80:	02 c0       	rjmp	.+4      	; 0xad86 <follow_path+0x40c>
    ad82:	a0 61       	ori	r26, 0x10	; 16
    ad84:	ab 83       	std	Y+3, r26	; 0x03
    ad86:	ec 81       	ldd	r30, Y+4	; 0x04
    ad88:	e2 ff       	sbrs	r30, 2
    ad8a:	03 c0       	rjmp	.+6      	; 0xad92 <follow_path+0x418>
    ad8c:	fb 81       	ldd	r31, Y+3	; 0x03
    ad8e:	f8 60       	ori	r31, 0x08	; 8
    ad90:	fb 83       	std	Y+3, r31	; 0x03
    ad92:	2b 81       	ldd	r18, Y+3	; 0x03
    ad94:	f7 01       	movw	r30, r14
    ad96:	27 a3       	std	Z+39, r18	; 0x27
    ad98:	a2 ce       	rjmp	.-700    	; 0xaade <follow_path+0x164>
    ad9a:	86 e0       	ldi	r24, 0x06	; 6
    ad9c:	90 e0       	ldi	r25, 0x00	; 0
    ad9e:	a1 ce       	rjmp	.-702    	; 0xaae2 <follow_path+0x168>
    ada0:	84 30       	cpi	r24, 0x04	; 4
    ada2:	91 05       	cpc	r25, r1
    ada4:	b9 f4       	brne	.+46     	; 0xadd4 <follow_path+0x45a>
    ada6:	32 2f       	mov	r19, r18
    ada8:	34 70       	andi	r19, 0x04	; 4
    adaa:	25 ff       	sbrs	r18, 5
    adac:	08 c0       	rjmp	.+16     	; 0xadbe <follow_path+0x444>
    adae:	33 23       	and	r19, r19
    adb0:	09 f4       	brne	.+2      	; 0xadb4 <follow_path+0x43a>
    adb2:	b8 ce       	rjmp	.-656    	; 0xab24 <follow_path+0x1aa>
    adb4:	80 e8       	ldi	r24, 0x80	; 128
    adb6:	87 a3       	std	Z+39, r24	; 0x27
    adb8:	80 e0       	ldi	r24, 0x00	; 0
    adba:	90 e0       	ldi	r25, 0x00	; 0
    adbc:	0b c0       	rjmp	.+22     	; 0xadd4 <follow_path+0x45a>
    adbe:	31 11       	cpse	r19, r1
    adc0:	09 c0       	rjmp	.+18     	; 0xadd4 <follow_path+0x45a>
    adc2:	85 e0       	ldi	r24, 0x05	; 5
    adc4:	90 e0       	ldi	r25, 0x00	; 0
    adc6:	06 c0       	rjmp	.+12     	; 0xadd4 <follow_path+0x45a>
    adc8:	fb e0       	ldi	r31, 0x0B	; 11
    adca:	8f 16       	cp	r8, r31
    adcc:	91 04       	cpc	r9, r1
    adce:	09 f0       	breq	.+2      	; 0xadd2 <follow_path+0x458>
    add0:	4f cf       	rjmp	.-354    	; 0xac70 <follow_path+0x2f6>
    add2:	3d cf       	rjmp	.-390    	; 0xac4e <follow_path+0x2d4>
    add4:	2a 96       	adiw	r28, 0x0a	; 10
    add6:	e2 e1       	ldi	r30, 0x12	; 18
    add8:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0000addc <f_mount>:
    addc:	a6 e0       	ldi	r26, 0x06	; 6
    adde:	b0 e0       	ldi	r27, 0x00	; 0
    ade0:	e4 ef       	ldi	r30, 0xF4	; 244
    ade2:	f6 e5       	ldi	r31, 0x56	; 86
    ade4:	0c 94 d1 df 	jmp	0x1bfa2	; 0x1bfa2 <__prologue_saves__+0x1e>
    ade8:	9c 83       	std	Y+4, r25	; 0x04
    adea:	8b 83       	std	Y+3, r24	; 0x03
    adec:	7e 83       	std	Y+6, r23	; 0x06
    adee:	6d 83       	std	Y+5, r22	; 0x05
    adf0:	14 2f       	mov	r17, r20
    adf2:	7a 83       	std	Y+2, r23	; 0x02
    adf4:	69 83       	std	Y+1, r22	; 0x01
    adf6:	ce 01       	movw	r24, r28
    adf8:	01 96       	adiw	r24, 0x01	; 1
    adfa:	0e 94 44 45 	call	0x8a88	; 0x8a88 <get_ldnumber>
    adfe:	97 fd       	sbrc	r25, 7
    ae00:	20 c0       	rjmp	.+64     	; 0xae42 <f_mount+0x66>
    ae02:	88 0f       	add	r24, r24
    ae04:	99 1f       	adc	r25, r25
    ae06:	fc 01       	movw	r30, r24
    ae08:	e1 5d       	subi	r30, 0xD1	; 209
    ae0a:	f7 4e       	sbci	r31, 0xE7	; 231
    ae0c:	01 90       	ld	r0, Z+
    ae0e:	f0 81       	ld	r31, Z
    ae10:	e0 2d       	mov	r30, r0
    ae12:	30 97       	sbiw	r30, 0x00	; 0
    ae14:	09 f0       	breq	.+2      	; 0xae18 <f_mount+0x3c>
    ae16:	10 82       	st	Z, r1
    ae18:	eb 81       	ldd	r30, Y+3	; 0x03
    ae1a:	fc 81       	ldd	r31, Y+4	; 0x04
    ae1c:	30 97       	sbiw	r30, 0x00	; 0
    ae1e:	09 f0       	breq	.+2      	; 0xae22 <f_mount+0x46>
    ae20:	10 82       	st	Z, r1
    ae22:	dc 01       	movw	r26, r24
    ae24:	a1 5d       	subi	r26, 0xD1	; 209
    ae26:	b7 4e       	sbci	r27, 0xE7	; 231
    ae28:	ed 93       	st	X+, r30
    ae2a:	fc 93       	st	X, r31
    ae2c:	11 23       	and	r17, r17
    ae2e:	61 f0       	breq	.+24     	; 0xae48 <f_mount+0x6c>
    ae30:	40 e0       	ldi	r20, 0x00	; 0
    ae32:	be 01       	movw	r22, r28
    ae34:	6d 5f       	subi	r22, 0xFD	; 253
    ae36:	7f 4f       	sbci	r23, 0xFF	; 255
    ae38:	ce 01       	movw	r24, r28
    ae3a:	05 96       	adiw	r24, 0x05	; 5
    ae3c:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
    ae40:	05 c0       	rjmp	.+10     	; 0xae4c <f_mount+0x70>
    ae42:	8b e0       	ldi	r24, 0x0B	; 11
    ae44:	90 e0       	ldi	r25, 0x00	; 0
    ae46:	02 c0       	rjmp	.+4      	; 0xae4c <f_mount+0x70>
    ae48:	80 e0       	ldi	r24, 0x00	; 0
    ae4a:	90 e0       	ldi	r25, 0x00	; 0
    ae4c:	26 96       	adiw	r28, 0x06	; 6
    ae4e:	e3 e0       	ldi	r30, 0x03	; 3
    ae50:	0c 94 ed df 	jmp	0x1bfda	; 0x1bfda <__epilogue_restores__+0x1e>

0000ae54 <f_open>:
    ae54:	a6 e3       	ldi	r26, 0x36	; 54
    ae56:	b0 e0       	ldi	r27, 0x00	; 0
    ae58:	e0 e3       	ldi	r30, 0x30	; 48
    ae5a:	f7 e5       	ldi	r31, 0x57	; 87
    ae5c:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    ae60:	7a ab       	std	Y+50, r23	; 0x32
    ae62:	69 ab       	std	Y+49, r22	; 0x31
    ae64:	00 97       	sbiw	r24, 0x00	; 0
    ae66:	09 f4       	brne	.+2      	; 0xae6a <f_open+0x16>
    ae68:	93 c1       	rjmp	.+806    	; 0xb190 <f_open+0x33c>
    ae6a:	74 2e       	mov	r7, r20
    ae6c:	7c 01       	movw	r14, r24
    ae6e:	24 2f       	mov	r18, r20
    ae70:	2f 73       	andi	r18, 0x3F	; 63
    ae72:	32 2e       	mov	r3, r18
    ae74:	42 2f       	mov	r20, r18
    ae76:	be 01       	movw	r22, r28
    ae78:	61 5d       	subi	r22, 0xD1	; 209
    ae7a:	7f 4f       	sbci	r23, 0xFF	; 255
    ae7c:	ce 01       	movw	r24, r28
    ae7e:	c1 96       	adiw	r24, 0x31	; 49
    ae80:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
    ae84:	00 97       	sbiw	r24, 0x00	; 0
    ae86:	09 f0       	breq	.+2      	; 0xae8a <f_open+0x36>
    ae88:	7d c1       	rjmp	.+762    	; 0xb184 <f_open+0x330>
    ae8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    ae8c:	98 a9       	ldd	r25, Y+48	; 0x30
    ae8e:	9a 83       	std	Y+2, r25	; 0x02
    ae90:	89 83       	std	Y+1, r24	; 0x01
    ae92:	80 e0       	ldi	r24, 0x00	; 0
    ae94:	92 e0       	ldi	r25, 0x02	; 2
    ae96:	0e 94 80 66 	call	0xcd00	; 0xcd00 <ff_memalloc>
    ae9a:	5c 01       	movw	r10, r24
    ae9c:	00 97       	sbiw	r24, 0x00	; 0
    ae9e:	09 f4       	brne	.+2      	; 0xaea2 <f_open+0x4e>
    aea0:	79 c1       	rjmp	.+754    	; 0xb194 <f_open+0x340>
    aea2:	ef a5       	ldd	r30, Y+47	; 0x2f
    aea4:	f8 a9       	ldd	r31, Y+48	; 0x30
    aea6:	94 87       	std	Z+12, r25	; 0x0c
    aea8:	83 87       	std	Z+11, r24	; 0x0b
    aeaa:	69 a9       	ldd	r22, Y+49	; 0x31
    aeac:	7a a9       	ldd	r23, Y+50	; 0x32
    aeae:	ce 01       	movw	r24, r28
    aeb0:	01 96       	adiw	r24, 0x01	; 1
    aeb2:	63 dd       	rcall	.-1338   	; 0xa97a <follow_path>
    aeb4:	8c 01       	movw	r16, r24
    aeb6:	89 2b       	or	r24, r25
    aeb8:	29 f4       	brne	.+10     	; 0xaec4 <f_open+0x70>
    aeba:	88 a5       	ldd	r24, Y+40	; 0x28
    aebc:	87 ff       	sbrs	r24, 7
    aebe:	02 c0       	rjmp	.+4      	; 0xaec4 <f_open+0x70>
    aec0:	06 e0       	ldi	r16, 0x06	; 6
    aec2:	10 e0       	ldi	r17, 0x00	; 0
    aec4:	87 2d       	mov	r24, r7
    aec6:	8c 71       	andi	r24, 0x1C	; 28
    aec8:	09 f4       	brne	.+2      	; 0xaecc <f_open+0x78>
    aeca:	75 c0       	rjmp	.+234    	; 0xafb6 <f_open+0x162>
    aecc:	01 15       	cp	r16, r1
    aece:	11 05       	cpc	r17, r1
    aed0:	79 f0       	breq	.+30     	; 0xaef0 <f_open+0x9c>
    aed2:	04 30       	cpi	r16, 0x04	; 4
    aed4:	11 05       	cpc	r17, r1
    aed6:	09 f0       	breq	.+2      	; 0xaeda <f_open+0x86>
    aed8:	6d c1       	rjmp	.+730    	; 0xb1b4 <f_open+0x360>
    aeda:	ce 01       	movw	r24, r28
    aedc:	01 96       	adiw	r24, 0x01	; 1
    aede:	bf db       	rcall	.-2178   	; 0xa65e <dir_register>
    aee0:	8c 01       	movw	r16, r24
    aee2:	89 2b       	or	r24, r25
    aee4:	09 f0       	breq	.+2      	; 0xaee8 <f_open+0x94>
    aee6:	66 c1       	rjmp	.+716    	; 0xb1b4 <f_open+0x360>
    aee8:	33 2d       	mov	r19, r3
    aeea:	38 60       	ori	r19, 0x08	; 8
    aeec:	33 2e       	mov	r3, r19
    aeee:	06 c0       	rjmp	.+12     	; 0xaefc <f_open+0xa8>
    aef0:	8d 81       	ldd	r24, Y+5	; 0x05
    aef2:	81 71       	andi	r24, 0x11	; 17
    aef4:	09 f0       	breq	.+2      	; 0xaef8 <f_open+0xa4>
    aef6:	5c c1       	rjmp	.+696    	; 0xb1b0 <f_open+0x35c>
    aef8:	72 fc       	sbrc	r7, 2
    aefa:	51 c1       	rjmp	.+674    	; 0xb19e <f_open+0x34a>
    aefc:	33 fe       	sbrs	r3, 3
    aefe:	6b c0       	rjmp	.+214    	; 0xafd6 <f_open+0x182>
    af00:	0b 8d       	ldd	r16, Y+27	; 0x1b
    af02:	1c 8d       	ldd	r17, Y+28	; 0x1c
    af04:	ef a5       	ldd	r30, Y+47	; 0x2f
    af06:	f8 a9       	ldd	r31, Y+48	; 0x30
    af08:	b8 01       	movw	r22, r16
    af0a:	80 81       	ld	r24, Z
    af0c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <ld_clust.isra.4>
    af10:	2b 01       	movw	r4, r22
    af12:	3c 01       	movw	r6, r24
    af14:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <get_fattime>
    af18:	ab 01       	movw	r20, r22
    af1a:	bc 01       	movw	r22, r24
    af1c:	c8 01       	movw	r24, r16
    af1e:	0e 96       	adiw	r24, 0x0e	; 14
    af20:	0e 94 2d 44 	call	0x885a	; 0x885a <st_dword>
    af24:	eb 8d       	ldd	r30, Y+27	; 0x1b
    af26:	fc 8d       	ldd	r31, Y+28	; 0x1c
    af28:	80 e2       	ldi	r24, 0x20	; 32
    af2a:	83 87       	std	Z+11, r24	; 0x0b
    af2c:	af a5       	ldd	r26, Y+47	; 0x2f
    af2e:	b8 a9       	ldd	r27, Y+48	; 0x30
    af30:	eb 8d       	ldd	r30, Y+27	; 0x1b
    af32:	fc 8d       	ldd	r31, Y+28	; 0x1c
    af34:	12 8e       	std	Z+26, r1	; 0x1a
    af36:	13 8e       	std	Z+27, r1	; 0x1b
    af38:	8c 91       	ld	r24, X
    af3a:	83 30       	cpi	r24, 0x03	; 3
    af3c:	11 f4       	brne	.+4      	; 0xaf42 <f_open+0xee>
    af3e:	14 8a       	std	Z+20, r1	; 0x14
    af40:	15 8a       	std	Z+21, r1	; 0x15
    af42:	eb 8d       	ldd	r30, Y+27	; 0x1b
    af44:	fc 8d       	ldd	r31, Y+28	; 0x1c
    af46:	14 8e       	std	Z+28, r1	; 0x1c
    af48:	15 8e       	std	Z+29, r1	; 0x1d
    af4a:	16 8e       	std	Z+30, r1	; 0x1e
    af4c:	17 8e       	std	Z+31, r1	; 0x1f
    af4e:	81 e0       	ldi	r24, 0x01	; 1
    af50:	fd 01       	movw	r30, r26
    af52:	83 83       	std	Z+3, r24	; 0x03
    af54:	41 14       	cp	r4, r1
    af56:	51 04       	cpc	r5, r1
    af58:	61 04       	cpc	r6, r1
    af5a:	71 04       	cpc	r7, r1
    af5c:	c9 f1       	breq	.+114    	; 0xafd0 <f_open+0x17c>
    af5e:	21 a9       	ldd	r18, Z+49	; 0x31
    af60:	32 a9       	ldd	r19, Z+50	; 0x32
    af62:	43 a9       	ldd	r20, Z+51	; 0x33
    af64:	54 a9       	ldd	r21, Z+52	; 0x34
    af66:	2b ab       	std	Y+51, r18	; 0x33
    af68:	3c ab       	std	Y+52, r19	; 0x34
    af6a:	4d ab       	std	Y+53, r20	; 0x35
    af6c:	5e ab       	std	Y+54, r21	; 0x36
    af6e:	00 e0       	ldi	r16, 0x00	; 0
    af70:	10 e0       	ldi	r17, 0x00	; 0
    af72:	98 01       	movw	r18, r16
    af74:	b3 01       	movw	r22, r6
    af76:	a2 01       	movw	r20, r4
    af78:	ce 01       	movw	r24, r28
    af7a:	01 96       	adiw	r24, 0x01	; 1
    af7c:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <remove_chain>
    af80:	8c 01       	movw	r16, r24
    af82:	89 2b       	or	r24, r25
    af84:	09 f0       	breq	.+2      	; 0xaf88 <f_open+0x134>
    af86:	16 c1       	rjmp	.+556    	; 0xb1b4 <f_open+0x360>
    af88:	4b a9       	ldd	r20, Y+51	; 0x33
    af8a:	5c a9       	ldd	r21, Y+52	; 0x34
    af8c:	6d a9       	ldd	r22, Y+53	; 0x35
    af8e:	7e a9       	ldd	r23, Y+54	; 0x36
    af90:	8f a5       	ldd	r24, Y+47	; 0x2f
    af92:	98 a9       	ldd	r25, Y+48	; 0x30
    af94:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    af98:	8c 01       	movw	r16, r24
    af9a:	ef a5       	ldd	r30, Y+47	; 0x2f
    af9c:	f8 a9       	ldd	r31, Y+48	; 0x30
    af9e:	21 e0       	ldi	r18, 0x01	; 1
    afa0:	42 1a       	sub	r4, r18
    afa2:	51 08       	sbc	r5, r1
    afa4:	61 08       	sbc	r6, r1
    afa6:	71 08       	sbc	r7, r1
    afa8:	45 86       	std	Z+13, r4	; 0x0d
    afaa:	56 86       	std	Z+14, r5	; 0x0e
    afac:	67 86       	std	Z+15, r6	; 0x0f
    afae:	70 8a       	std	Z+16, r7	; 0x10
    afb0:	89 2b       	or	r24, r25
    afb2:	61 f0       	breq	.+24     	; 0xafcc <f_open+0x178>
    afb4:	ff c0       	rjmp	.+510    	; 0xb1b4 <f_open+0x360>
    afb6:	01 15       	cp	r16, r1
    afb8:	11 05       	cpc	r17, r1
    afba:	09 f0       	breq	.+2      	; 0xafbe <f_open+0x16a>
    afbc:	fb c0       	rjmp	.+502    	; 0xb1b4 <f_open+0x360>
    afbe:	8d 81       	ldd	r24, Y+5	; 0x05
    afc0:	84 fd       	sbrc	r24, 4
    afc2:	f3 c0       	rjmp	.+486    	; 0xb1aa <f_open+0x356>
    afc4:	71 fe       	sbrs	r7, 1
    afc6:	02 c0       	rjmp	.+4      	; 0xafcc <f_open+0x178>
    afc8:	80 fd       	sbrc	r24, 0
    afca:	f2 c0       	rjmp	.+484    	; 0xb1b0 <f_open+0x35c>
    afcc:	33 fe       	sbrs	r3, 3
    afce:	03 c0       	rjmp	.+6      	; 0xafd6 <f_open+0x182>
    afd0:	33 2d       	mov	r19, r3
    afd2:	30 64       	ori	r19, 0x40	; 64
    afd4:	33 2e       	mov	r3, r19
    afd6:	0f a5       	ldd	r16, Y+47	; 0x2f
    afd8:	18 a9       	ldd	r17, Y+48	; 0x30
    afda:	f8 01       	movw	r30, r16
    afdc:	81 a9       	ldd	r24, Z+49	; 0x31
    afde:	92 a9       	ldd	r25, Z+50	; 0x32
    afe0:	a3 a9       	ldd	r26, Z+51	; 0x33
    afe2:	b4 a9       	ldd	r27, Z+52	; 0x34
    afe4:	f7 01       	movw	r30, r14
    afe6:	84 8f       	std	Z+28, r24	; 0x1c
    afe8:	95 8f       	std	Z+29, r25	; 0x1d
    afea:	a6 8f       	std	Z+30, r26	; 0x1e
    afec:	b7 8f       	std	Z+31, r27	; 0x1f
    afee:	6b 8c       	ldd	r6, Y+27	; 0x1b
    aff0:	7c 8c       	ldd	r7, Y+28	; 0x1c
    aff2:	71 a2       	std	Z+33, r7	; 0x21
    aff4:	60 a2       	std	Z+32, r6	; 0x20
    aff6:	b3 01       	movw	r22, r6
    aff8:	f8 01       	movw	r30, r16
    affa:	80 81       	ld	r24, Z
    affc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <ld_clust.isra.4>
    b000:	f7 01       	movw	r30, r14
    b002:	66 83       	std	Z+6, r22	; 0x06
    b004:	77 83       	std	Z+7, r23	; 0x07
    b006:	80 87       	std	Z+8, r24	; 0x08
    b008:	91 87       	std	Z+9, r25	; 0x09
    b00a:	c3 01       	movw	r24, r6
    b00c:	4c 96       	adiw	r24, 0x1c	; 28
    b00e:	0e 94 18 44 	call	0x8830	; 0x8830 <ld_dword>
    b012:	f7 01       	movw	r30, r14
    b014:	62 87       	std	Z+10, r22	; 0x0a
    b016:	73 87       	std	Z+11, r23	; 0x0b
    b018:	84 87       	std	Z+12, r24	; 0x0c
    b01a:	95 87       	std	Z+13, r25	; 0x0d
    b01c:	13 a2       	std	Z+35, r1	; 0x23
    b01e:	12 a2       	std	Z+34, r1	; 0x22
    b020:	11 83       	std	Z+1, r17	; 0x01
    b022:	00 83       	st	Z, r16
    b024:	f8 01       	movw	r30, r16
    b026:	85 81       	ldd	r24, Z+5	; 0x05
    b028:	96 81       	ldd	r25, Z+6	; 0x06
    b02a:	f7 01       	movw	r30, r14
    b02c:	93 83       	std	Z+3, r25	; 0x03
    b02e:	82 83       	std	Z+2, r24	; 0x02
    b030:	36 86       	std	Z+14, r3	; 0x0e
    b032:	17 86       	std	Z+15, r1	; 0x0f
    b034:	10 8e       	std	Z+24, r1	; 0x18
    b036:	11 8e       	std	Z+25, r1	; 0x19
    b038:	12 8e       	std	Z+26, r1	; 0x1a
    b03a:	13 8e       	std	Z+27, r1	; 0x1b
    b03c:	10 8a       	std	Z+16, r1	; 0x10
    b03e:	11 8a       	std	Z+17, r1	; 0x11
    b040:	12 8a       	std	Z+18, r1	; 0x12
    b042:	13 8a       	std	Z+19, r1	; 0x13
    b044:	67 01       	movw	r12, r14
    b046:	f4 e2       	ldi	r31, 0x24	; 36
    b048:	cf 0e       	add	r12, r31
    b04a:	d1 1c       	adc	r13, r1
    b04c:	40 e0       	ldi	r20, 0x00	; 0
    b04e:	52 e0       	ldi	r21, 0x02	; 2
    b050:	60 e0       	ldi	r22, 0x00	; 0
    b052:	70 e0       	ldi	r23, 0x00	; 0
    b054:	c6 01       	movw	r24, r12
    b056:	0e 94 33 44 	call	0x8866	; 0x8866 <mem_set>
    b05a:	35 fc       	sbrc	r3, 5
    b05c:	03 c0       	rjmp	.+6      	; 0xb064 <f_open+0x210>
    b05e:	00 e0       	ldi	r16, 0x00	; 0
    b060:	10 e0       	ldi	r17, 0x00	; 0
    b062:	89 c0       	rjmp	.+274    	; 0xb176 <f_open+0x322>
    b064:	f7 01       	movw	r30, r14
    b066:	62 84       	ldd	r6, Z+10	; 0x0a
    b068:	73 84       	ldd	r7, Z+11	; 0x0b
    b06a:	84 84       	ldd	r8, Z+12	; 0x0c
    b06c:	95 84       	ldd	r9, Z+13	; 0x0d
    b06e:	61 14       	cp	r6, r1
    b070:	71 04       	cpc	r7, r1
    b072:	81 04       	cpc	r8, r1
    b074:	91 04       	cpc	r9, r1
    b076:	99 f3       	breq	.-26     	; 0xb05e <f_open+0x20a>
    b078:	60 8a       	std	Z+16, r6	; 0x10
    b07a:	71 8a       	std	Z+17, r7	; 0x11
    b07c:	82 8a       	std	Z+18, r8	; 0x12
    b07e:	93 8a       	std	Z+19, r9	; 0x13
    b080:	ef a5       	ldd	r30, Y+47	; 0x2f
    b082:	f8 a9       	ldd	r31, Y+48	; 0x30
    b084:	21 84       	ldd	r2, Z+9	; 0x09
    b086:	32 84       	ldd	r3, Z+10	; 0x0a
    b088:	c1 01       	movw	r24, r2
    b08a:	a0 e0       	ldi	r26, 0x00	; 0
    b08c:	b0 e0       	ldi	r27, 0x00	; 0
    b08e:	1c 01       	movw	r2, r24
    b090:	2d 01       	movw	r4, r26
    b092:	59 e0       	ldi	r21, 0x09	; 9
    b094:	22 0c       	add	r2, r2
    b096:	33 1c       	adc	r3, r3
    b098:	44 1c       	adc	r4, r4
    b09a:	55 1c       	adc	r5, r5
    b09c:	5a 95       	dec	r21
    b09e:	d1 f7       	brne	.-12     	; 0xb094 <f_open+0x240>
    b0a0:	f7 01       	movw	r30, r14
    b0a2:	46 81       	ldd	r20, Z+6	; 0x06
    b0a4:	57 81       	ldd	r21, Z+7	; 0x07
    b0a6:	60 85       	ldd	r22, Z+8	; 0x08
    b0a8:	71 85       	ldd	r23, Z+9	; 0x09
    b0aa:	26 14       	cp	r2, r6
    b0ac:	37 04       	cpc	r3, r7
    b0ae:	48 04       	cpc	r4, r8
    b0b0:	59 04       	cpc	r5, r9
    b0b2:	f0 f4       	brcc	.+60     	; 0xb0f0 <f_open+0x29c>
    b0b4:	f7 01       	movw	r30, r14
    b0b6:	80 81       	ld	r24, Z
    b0b8:	91 81       	ldd	r25, Z+1	; 0x01
    b0ba:	0e 94 c3 4c 	call	0x9986	; 0x9986 <get_fat.isra.10>
    b0be:	ab 01       	movw	r20, r22
    b0c0:	bc 01       	movw	r22, r24
    b0c2:	d4 01       	movw	r26, r8
    b0c4:	c3 01       	movw	r24, r6
    b0c6:	82 19       	sub	r24, r2
    b0c8:	93 09       	sbc	r25, r3
    b0ca:	a4 09       	sbc	r26, r4
    b0cc:	b5 09       	sbc	r27, r5
    b0ce:	3c 01       	movw	r6, r24
    b0d0:	4d 01       	movw	r8, r26
    b0d2:	42 30       	cpi	r20, 0x02	; 2
    b0d4:	51 05       	cpc	r21, r1
    b0d6:	61 05       	cpc	r22, r1
    b0d8:	71 05       	cpc	r23, r1
    b0da:	08 f4       	brcc	.+2      	; 0xb0de <f_open+0x28a>
    b0dc:	63 c0       	rjmp	.+198    	; 0xb1a4 <f_open+0x350>
    b0de:	4f 3f       	cpi	r20, 0xFF	; 255
    b0e0:	ff ef       	ldi	r31, 0xFF	; 255
    b0e2:	5f 07       	cpc	r21, r31
    b0e4:	6f 07       	cpc	r22, r31
    b0e6:	7f 07       	cpc	r23, r31
    b0e8:	01 f7       	brne	.-64     	; 0xb0aa <f_open+0x256>
    b0ea:	01 e0       	ldi	r16, 0x01	; 1
    b0ec:	10 e0       	ldi	r17, 0x00	; 0
    b0ee:	02 c0       	rjmp	.+4      	; 0xb0f4 <f_open+0x2a0>
    b0f0:	00 e0       	ldi	r16, 0x00	; 0
    b0f2:	10 e0       	ldi	r17, 0x00	; 0
    b0f4:	f7 01       	movw	r30, r14
    b0f6:	44 8b       	std	Z+20, r20	; 0x14
    b0f8:	55 8b       	std	Z+21, r21	; 0x15
    b0fa:	66 8b       	std	Z+22, r22	; 0x16
    b0fc:	77 8b       	std	Z+23, r23	; 0x17
    b0fe:	01 15       	cp	r16, r1
    b100:	11 05       	cpc	r17, r1
    b102:	c9 f5       	brne	.+114    	; 0xb176 <f_open+0x322>
    b104:	d4 01       	movw	r26, r8
    b106:	c3 01       	movw	r24, r6
    b108:	91 70       	andi	r25, 0x01	; 1
    b10a:	aa 27       	eor	r26, r26
    b10c:	bb 27       	eor	r27, r27
    b10e:	89 2b       	or	r24, r25
    b110:	8a 2b       	or	r24, r26
    b112:	8b 2b       	or	r24, r27
    b114:	09 f4       	brne	.+2      	; 0xb118 <f_open+0x2c4>
    b116:	a3 cf       	rjmp	.-186    	; 0xb05e <f_open+0x20a>
    b118:	4f a4       	ldd	r4, Y+47	; 0x2f
    b11a:	58 a8       	ldd	r5, Y+48	; 0x30
    b11c:	c2 01       	movw	r24, r4
    b11e:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <clst2sect>
    b122:	61 15       	cp	r22, r1
    b124:	71 05       	cpc	r23, r1
    b126:	81 05       	cpc	r24, r1
    b128:	91 05       	cpc	r25, r1
    b12a:	19 f1       	breq	.+70     	; 0xb172 <f_open+0x31e>
    b12c:	94 01       	movw	r18, r8
    b12e:	83 01       	movw	r16, r6
    b130:	49 e0       	ldi	r20, 0x09	; 9
    b132:	36 95       	lsr	r19
    b134:	27 95       	ror	r18
    b136:	17 95       	ror	r17
    b138:	07 95       	ror	r16
    b13a:	4a 95       	dec	r20
    b13c:	d1 f7       	brne	.-12     	; 0xb132 <f_open+0x2de>
    b13e:	a9 01       	movw	r20, r18
    b140:	98 01       	movw	r18, r16
    b142:	26 0f       	add	r18, r22
    b144:	37 1f       	adc	r19, r23
    b146:	48 1f       	adc	r20, r24
    b148:	59 1f       	adc	r21, r25
    b14a:	f7 01       	movw	r30, r14
    b14c:	20 8f       	std	Z+24, r18	; 0x18
    b14e:	31 8f       	std	Z+25, r19	; 0x19
    b150:	42 8f       	std	Z+26, r20	; 0x1a
    b152:	53 8f       	std	Z+27, r21	; 0x1b
    b154:	01 e0       	ldi	r16, 0x01	; 1
    b156:	10 e0       	ldi	r17, 0x00	; 0
    b158:	b6 01       	movw	r22, r12
    b15a:	f2 01       	movw	r30, r4
    b15c:	81 81       	ldd	r24, Z+1	; 0x01
    b15e:	0e 94 3c 67 	call	0xce78	; 0xce78 <disk_read>
    b162:	31 e0       	ldi	r19, 0x01	; 1
    b164:	20 e0       	ldi	r18, 0x00	; 0
    b166:	89 2b       	or	r24, r25
    b168:	09 f4       	brne	.+2      	; 0xb16c <f_open+0x318>
    b16a:	30 e0       	ldi	r19, 0x00	; 0
    b16c:	03 2f       	mov	r16, r19
    b16e:	12 2f       	mov	r17, r18
    b170:	02 c0       	rjmp	.+4      	; 0xb176 <f_open+0x322>
    b172:	02 e0       	ldi	r16, 0x02	; 2
    b174:	10 e0       	ldi	r17, 0x00	; 0
    b176:	c5 01       	movw	r24, r10
    b178:	0e 94 83 66 	call	0xcd06	; 0xcd06 <ff_memfree>
    b17c:	01 15       	cp	r16, r1
    b17e:	11 05       	cpc	r17, r1
    b180:	59 f0       	breq	.+22     	; 0xb198 <f_open+0x344>
    b182:	01 c0       	rjmp	.+2      	; 0xb186 <f_open+0x332>
    b184:	8c 01       	movw	r16, r24
    b186:	f7 01       	movw	r30, r14
    b188:	11 82       	std	Z+1, r1	; 0x01
    b18a:	10 82       	st	Z, r1
    b18c:	c8 01       	movw	r24, r16
    b18e:	16 c0       	rjmp	.+44     	; 0xb1bc <f_open+0x368>
    b190:	89 e0       	ldi	r24, 0x09	; 9
    b192:	03 c0       	rjmp	.+6      	; 0xb19a <f_open+0x346>
    b194:	81 e1       	ldi	r24, 0x11	; 17
    b196:	01 c0       	rjmp	.+2      	; 0xb19a <f_open+0x346>
    b198:	80 e0       	ldi	r24, 0x00	; 0
    b19a:	90 e0       	ldi	r25, 0x00	; 0
    b19c:	0f c0       	rjmp	.+30     	; 0xb1bc <f_open+0x368>
    b19e:	08 e0       	ldi	r16, 0x08	; 8
    b1a0:	10 e0       	ldi	r17, 0x00	; 0
    b1a2:	08 c0       	rjmp	.+16     	; 0xb1b4 <f_open+0x360>
    b1a4:	02 e0       	ldi	r16, 0x02	; 2
    b1a6:	10 e0       	ldi	r17, 0x00	; 0
    b1a8:	a5 cf       	rjmp	.-182    	; 0xb0f4 <f_open+0x2a0>
    b1aa:	04 e0       	ldi	r16, 0x04	; 4
    b1ac:	10 e0       	ldi	r17, 0x00	; 0
    b1ae:	02 c0       	rjmp	.+4      	; 0xb1b4 <f_open+0x360>
    b1b0:	07 e0       	ldi	r16, 0x07	; 7
    b1b2:	10 e0       	ldi	r17, 0x00	; 0
    b1b4:	c5 01       	movw	r24, r10
    b1b6:	0e 94 83 66 	call	0xcd06	; 0xcd06 <ff_memfree>
    b1ba:	e5 cf       	rjmp	.-54     	; 0xb186 <f_open+0x332>
    b1bc:	e6 96       	adiw	r28, 0x36	; 54
    b1be:	e2 e1       	ldi	r30, 0x12	; 18
    b1c0:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0000b1c4 <f_read>:
    b1c4:	a6 e0       	ldi	r26, 0x06	; 6
    b1c6:	b0 e0       	ldi	r27, 0x00	; 0
    b1c8:	e8 ee       	ldi	r30, 0xE8	; 232
    b1ca:	f8 e5       	ldi	r31, 0x58	; 88
    b1cc:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    b1d0:	7c 01       	movw	r14, r24
    b1d2:	4b 01       	movw	r8, r22
    b1d4:	5a 01       	movw	r10, r20
    b1d6:	3e 83       	std	Y+6, r19	; 0x06
    b1d8:	2d 83       	std	Y+5, r18	; 0x05
    b1da:	f9 01       	movw	r30, r18
    b1dc:	11 82       	std	Z+1, r1	; 0x01
    b1de:	10 82       	st	Z, r1
    b1e0:	be 01       	movw	r22, r28
    b1e2:	6f 5f       	subi	r22, 0xFF	; 255
    b1e4:	7f 4f       	sbci	r23, 0xFF	; 255
    b1e6:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <validate>
    b1ea:	00 97       	sbiw	r24, 0x00	; 0
    b1ec:	09 f0       	breq	.+2      	; 0xb1f0 <f_read+0x2c>
    b1ee:	31 c1       	rjmp	.+610    	; 0xb452 <f_read+0x28e>
    b1f0:	f7 01       	movw	r30, r14
    b1f2:	87 85       	ldd	r24, Z+15	; 0x0f
    b1f4:	90 e0       	ldi	r25, 0x00	; 0
    b1f6:	00 97       	sbiw	r24, 0x00	; 0
    b1f8:	09 f0       	breq	.+2      	; 0xb1fc <f_read+0x38>
    b1fa:	2b c1       	rjmp	.+598    	; 0xb452 <f_read+0x28e>
    b1fc:	86 85       	ldd	r24, Z+14	; 0x0e
    b1fe:	80 ff       	sbrs	r24, 0
    b200:	26 c1       	rjmp	.+588    	; 0xb44e <f_read+0x28a>
    b202:	82 85       	ldd	r24, Z+10	; 0x0a
    b204:	93 85       	ldd	r25, Z+11	; 0x0b
    b206:	a4 85       	ldd	r26, Z+12	; 0x0c
    b208:	b5 85       	ldd	r27, Z+13	; 0x0d
    b20a:	40 89       	ldd	r20, Z+16	; 0x10
    b20c:	51 89       	ldd	r21, Z+17	; 0x11
    b20e:	62 89       	ldd	r22, Z+18	; 0x12
    b210:	73 89       	ldd	r23, Z+19	; 0x13
    b212:	84 1b       	sub	r24, r20
    b214:	95 0b       	sbc	r25, r21
    b216:	a6 0b       	sbc	r26, r22
    b218:	b7 0b       	sbc	r27, r23
    b21a:	a5 01       	movw	r20, r10
    b21c:	60 e0       	ldi	r22, 0x00	; 0
    b21e:	70 e0       	ldi	r23, 0x00	; 0
    b220:	84 17       	cp	r24, r20
    b222:	95 07       	cpc	r25, r21
    b224:	a6 07       	cpc	r26, r22
    b226:	b7 07       	cpc	r27, r23
    b228:	08 f4       	brcc	.+2      	; 0xb22c <f_read+0x68>
    b22a:	5c 01       	movw	r10, r24
    b22c:	17 01       	movw	r2, r14
    b22e:	f4 e2       	ldi	r31, 0x24	; 36
    b230:	2f 0e       	add	r2, r31
    b232:	31 1c       	adc	r3, r1
    b234:	a1 14       	cp	r10, r1
    b236:	b1 04       	cpc	r11, r1
    b238:	09 f4       	brne	.+2      	; 0xb23c <f_read+0x78>
    b23a:	07 c1       	rjmp	.+526    	; 0xb44a <f_read+0x286>
    b23c:	f7 01       	movw	r30, r14
    b23e:	40 89       	ldd	r20, Z+16	; 0x10
    b240:	51 89       	ldd	r21, Z+17	; 0x11
    b242:	62 89       	ldd	r22, Z+18	; 0x12
    b244:	73 89       	ldd	r23, Z+19	; 0x13
    b246:	db 01       	movw	r26, r22
    b248:	ca 01       	movw	r24, r20
    b24a:	91 70       	andi	r25, 0x01	; 1
    b24c:	aa 27       	eor	r26, r26
    b24e:	bb 27       	eor	r27, r27
    b250:	89 2b       	or	r24, r25
    b252:	8a 2b       	or	r24, r26
    b254:	8b 2b       	or	r24, r27
    b256:	09 f0       	breq	.+2      	; 0xb25a <f_read+0x96>
    b258:	cb c0       	rjmp	.+406    	; 0xb3f0 <f_read+0x22c>
    b25a:	e9 81       	ldd	r30, Y+1	; 0x01
    b25c:	fa 81       	ldd	r31, Y+2	; 0x02
    b25e:	01 85       	ldd	r16, Z+9	; 0x09
    b260:	12 85       	ldd	r17, Z+10	; 0x0a
    b262:	01 50       	subi	r16, 0x01	; 1
    b264:	11 09       	sbc	r17, r1
    b266:	db 01       	movw	r26, r22
    b268:	ca 01       	movw	r24, r20
    b26a:	e9 e0       	ldi	r30, 0x09	; 9
    b26c:	b6 95       	lsr	r27
    b26e:	a7 95       	ror	r26
    b270:	97 95       	ror	r25
    b272:	87 95       	ror	r24
    b274:	ea 95       	dec	r30
    b276:	d1 f7       	brne	.-12     	; 0xb26c <f_read+0xa8>
    b278:	08 23       	and	r16, r24
    b27a:	19 23       	and	r17, r25
    b27c:	01 15       	cp	r16, r1
    b27e:	11 05       	cpc	r17, r1
    b280:	91 f5       	brne	.+100    	; 0xb2e6 <f_read+0x122>
    b282:	f7 01       	movw	r30, r14
    b284:	41 15       	cp	r20, r1
    b286:	51 05       	cpc	r21, r1
    b288:	61 05       	cpc	r22, r1
    b28a:	71 05       	cpc	r23, r1
    b28c:	29 f4       	brne	.+10     	; 0xb298 <f_read+0xd4>
    b28e:	66 81       	ldd	r22, Z+6	; 0x06
    b290:	77 81       	ldd	r23, Z+7	; 0x07
    b292:	80 85       	ldd	r24, Z+8	; 0x08
    b294:	91 85       	ldd	r25, Z+9	; 0x09
    b296:	11 c0       	rjmp	.+34     	; 0xb2ba <f_read+0xf6>
    b298:	82 a1       	ldd	r24, Z+34	; 0x22
    b29a:	93 a1       	ldd	r25, Z+35	; 0x23
    b29c:	89 2b       	or	r24, r25
    b29e:	21 f0       	breq	.+8      	; 0xb2a8 <f_read+0xe4>
    b2a0:	c7 01       	movw	r24, r14
    b2a2:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <clmt_clust>
    b2a6:	09 c0       	rjmp	.+18     	; 0xb2ba <f_read+0xf6>
    b2a8:	f7 01       	movw	r30, r14
    b2aa:	44 89       	ldd	r20, Z+20	; 0x14
    b2ac:	55 89       	ldd	r21, Z+21	; 0x15
    b2ae:	66 89       	ldd	r22, Z+22	; 0x16
    b2b0:	77 89       	ldd	r23, Z+23	; 0x17
    b2b2:	80 81       	ld	r24, Z
    b2b4:	91 81       	ldd	r25, Z+1	; 0x01
    b2b6:	0e 94 c3 4c 	call	0x9986	; 0x9986 <get_fat.isra.10>
    b2ba:	62 30       	cpi	r22, 0x02	; 2
    b2bc:	71 05       	cpc	r23, r1
    b2be:	81 05       	cpc	r24, r1
    b2c0:	91 05       	cpc	r25, r1
    b2c2:	10 f4       	brcc	.+4      	; 0xb2c8 <f_read+0x104>
    b2c4:	82 e0       	ldi	r24, 0x02	; 2
    b2c6:	07 c0       	rjmp	.+14     	; 0xb2d6 <f_read+0x112>
    b2c8:	6f 3f       	cpi	r22, 0xFF	; 255
    b2ca:	ff ef       	ldi	r31, 0xFF	; 255
    b2cc:	7f 07       	cpc	r23, r31
    b2ce:	8f 07       	cpc	r24, r31
    b2d0:	9f 07       	cpc	r25, r31
    b2d2:	21 f4       	brne	.+8      	; 0xb2dc <f_read+0x118>
    b2d4:	81 e0       	ldi	r24, 0x01	; 1
    b2d6:	f7 01       	movw	r30, r14
    b2d8:	87 87       	std	Z+15, r24	; 0x0f
    b2da:	ba c0       	rjmp	.+372    	; 0xb450 <f_read+0x28c>
    b2dc:	f7 01       	movw	r30, r14
    b2de:	64 8b       	std	Z+20, r22	; 0x14
    b2e0:	75 8b       	std	Z+21, r23	; 0x15
    b2e2:	86 8b       	std	Z+22, r24	; 0x16
    b2e4:	97 8b       	std	Z+23, r25	; 0x17
    b2e6:	89 81       	ldd	r24, Y+1	; 0x01
    b2e8:	9a 81       	ldd	r25, Y+2	; 0x02
    b2ea:	9c 83       	std	Y+4, r25	; 0x04
    b2ec:	8b 83       	std	Y+3, r24	; 0x03
    b2ee:	f7 01       	movw	r30, r14
    b2f0:	44 89       	ldd	r20, Z+20	; 0x14
    b2f2:	55 89       	ldd	r21, Z+21	; 0x15
    b2f4:	66 89       	ldd	r22, Z+22	; 0x16
    b2f6:	77 89       	ldd	r23, Z+23	; 0x17
    b2f8:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <clst2sect>
    b2fc:	61 15       	cp	r22, r1
    b2fe:	71 05       	cpc	r23, r1
    b300:	81 05       	cpc	r24, r1
    b302:	91 05       	cpc	r25, r1
    b304:	f9 f2       	breq	.-66     	; 0xb2c4 <f_read+0x100>
    b306:	2b 01       	movw	r4, r22
    b308:	3c 01       	movw	r6, r24
    b30a:	40 0e       	add	r4, r16
    b30c:	51 1e       	adc	r5, r17
    b30e:	61 1c       	adc	r6, r1
    b310:	71 1c       	adc	r7, r1
    b312:	65 01       	movw	r12, r10
    b314:	cd 2c       	mov	r12, r13
    b316:	dd 24       	eor	r13, r13
    b318:	c6 94       	lsr	r12
    b31a:	c1 14       	cp	r12, r1
    b31c:	d1 04       	cpc	r13, r1
    b31e:	d1 f1       	breq	.+116    	; 0xb394 <f_read+0x1d0>
    b320:	eb 81       	ldd	r30, Y+3	; 0x03
    b322:	fc 81       	ldd	r31, Y+4	; 0x04
    b324:	81 85       	ldd	r24, Z+9	; 0x09
    b326:	92 85       	ldd	r25, Z+10	; 0x0a
    b328:	98 01       	movw	r18, r16
    b32a:	2c 0d       	add	r18, r12
    b32c:	3d 1d       	adc	r19, r13
    b32e:	82 17       	cp	r24, r18
    b330:	93 07       	cpc	r25, r19
    b332:	18 f4       	brcc	.+6      	; 0xb33a <f_read+0x176>
    b334:	6c 01       	movw	r12, r24
    b336:	c0 1a       	sub	r12, r16
    b338:	d1 0a       	sbc	r13, r17
    b33a:	86 01       	movw	r16, r12
    b33c:	a3 01       	movw	r20, r6
    b33e:	92 01       	movw	r18, r4
    b340:	b4 01       	movw	r22, r8
    b342:	eb 81       	ldd	r30, Y+3	; 0x03
    b344:	fc 81       	ldd	r31, Y+4	; 0x04
    b346:	81 81       	ldd	r24, Z+1	; 0x01
    b348:	0e 94 3c 67 	call	0xce78	; 0xce78 <disk_read>
    b34c:	89 2b       	or	r24, r25
    b34e:	11 f6       	brne	.-124    	; 0xb2d4 <f_read+0x110>
    b350:	f7 01       	movw	r30, r14
    b352:	86 85       	ldd	r24, Z+14	; 0x0e
    b354:	87 ff       	sbrs	r24, 7
    b356:	1a c0       	rjmp	.+52     	; 0xb38c <f_read+0x1c8>
    b358:	80 8d       	ldd	r24, Z+24	; 0x18
    b35a:	91 8d       	ldd	r25, Z+25	; 0x19
    b35c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b35e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b360:	84 19       	sub	r24, r4
    b362:	95 09       	sbc	r25, r5
    b364:	a6 09       	sbc	r26, r6
    b366:	b7 09       	sbc	r27, r7
    b368:	a6 01       	movw	r20, r12
    b36a:	60 e0       	ldi	r22, 0x00	; 0
    b36c:	70 e0       	ldi	r23, 0x00	; 0
    b36e:	84 17       	cp	r24, r20
    b370:	95 07       	cpc	r25, r21
    b372:	a6 07       	cpc	r26, r22
    b374:	b7 07       	cpc	r27, r23
    b376:	50 f4       	brcc	.+20     	; 0xb38c <f_read+0x1c8>
    b378:	98 2f       	mov	r25, r24
    b37a:	88 27       	eor	r24, r24
    b37c:	99 0f       	add	r25, r25
    b37e:	40 e0       	ldi	r20, 0x00	; 0
    b380:	52 e0       	ldi	r21, 0x02	; 2
    b382:	b1 01       	movw	r22, r2
    b384:	88 0d       	add	r24, r8
    b386:	99 1d       	adc	r25, r9
    b388:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
    b38c:	dc 2c       	mov	r13, r12
    b38e:	cc 24       	eor	r12, r12
    b390:	dd 0c       	add	r13, r13
    b392:	41 c0       	rjmp	.+130    	; 0xb416 <f_read+0x252>
    b394:	f7 01       	movw	r30, r14
    b396:	20 8d       	ldd	r18, Z+24	; 0x18
    b398:	31 8d       	ldd	r19, Z+25	; 0x19
    b39a:	42 8d       	ldd	r20, Z+26	; 0x1a
    b39c:	53 8d       	ldd	r21, Z+27	; 0x1b
    b39e:	42 16       	cp	r4, r18
    b3a0:	53 06       	cpc	r5, r19
    b3a2:	64 06       	cpc	r6, r20
    b3a4:	75 06       	cpc	r7, r21
    b3a6:	f9 f0       	breq	.+62     	; 0xb3e6 <f_read+0x222>
    b3a8:	86 85       	ldd	r24, Z+14	; 0x0e
    b3aa:	87 ff       	sbrs	r24, 7
    b3ac:	0f c0       	rjmp	.+30     	; 0xb3cc <f_read+0x208>
    b3ae:	01 e0       	ldi	r16, 0x01	; 1
    b3b0:	10 e0       	ldi	r17, 0x00	; 0
    b3b2:	b1 01       	movw	r22, r2
    b3b4:	eb 81       	ldd	r30, Y+3	; 0x03
    b3b6:	fc 81       	ldd	r31, Y+4	; 0x04
    b3b8:	81 81       	ldd	r24, Z+1	; 0x01
    b3ba:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    b3be:	89 2b       	or	r24, r25
    b3c0:	09 f0       	breq	.+2      	; 0xb3c4 <f_read+0x200>
    b3c2:	88 cf       	rjmp	.-240    	; 0xb2d4 <f_read+0x110>
    b3c4:	f7 01       	movw	r30, r14
    b3c6:	86 85       	ldd	r24, Z+14	; 0x0e
    b3c8:	8f 77       	andi	r24, 0x7F	; 127
    b3ca:	86 87       	std	Z+14, r24	; 0x0e
    b3cc:	e9 81       	ldd	r30, Y+1	; 0x01
    b3ce:	fa 81       	ldd	r31, Y+2	; 0x02
    b3d0:	01 e0       	ldi	r16, 0x01	; 1
    b3d2:	10 e0       	ldi	r17, 0x00	; 0
    b3d4:	a3 01       	movw	r20, r6
    b3d6:	92 01       	movw	r18, r4
    b3d8:	b1 01       	movw	r22, r2
    b3da:	81 81       	ldd	r24, Z+1	; 0x01
    b3dc:	0e 94 3c 67 	call	0xce78	; 0xce78 <disk_read>
    b3e0:	89 2b       	or	r24, r25
    b3e2:	09 f0       	breq	.+2      	; 0xb3e6 <f_read+0x222>
    b3e4:	77 cf       	rjmp	.-274    	; 0xb2d4 <f_read+0x110>
    b3e6:	f7 01       	movw	r30, r14
    b3e8:	40 8e       	std	Z+24, r4	; 0x18
    b3ea:	51 8e       	std	Z+25, r5	; 0x19
    b3ec:	62 8e       	std	Z+26, r6	; 0x1a
    b3ee:	73 8e       	std	Z+27, r7	; 0x1b
    b3f0:	f7 01       	movw	r30, r14
    b3f2:	60 89       	ldd	r22, Z+16	; 0x10
    b3f4:	71 89       	ldd	r23, Z+17	; 0x11
    b3f6:	71 70       	andi	r23, 0x01	; 1
    b3f8:	80 e0       	ldi	r24, 0x00	; 0
    b3fa:	92 e0       	ldi	r25, 0x02	; 2
    b3fc:	86 1b       	sub	r24, r22
    b3fe:	97 0b       	sbc	r25, r23
    b400:	65 01       	movw	r12, r10
    b402:	8a 15       	cp	r24, r10
    b404:	9b 05       	cpc	r25, r11
    b406:	08 f4       	brcc	.+2      	; 0xb40a <f_read+0x246>
    b408:	6c 01       	movw	r12, r24
    b40a:	62 0d       	add	r22, r2
    b40c:	73 1d       	adc	r23, r3
    b40e:	a6 01       	movw	r20, r12
    b410:	c4 01       	movw	r24, r8
    b412:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
    b416:	ac 18       	sub	r10, r12
    b418:	bd 08       	sbc	r11, r13
    b41a:	ed 81       	ldd	r30, Y+5	; 0x05
    b41c:	fe 81       	ldd	r31, Y+6	; 0x06
    b41e:	80 81       	ld	r24, Z
    b420:	91 81       	ldd	r25, Z+1	; 0x01
    b422:	8c 0d       	add	r24, r12
    b424:	9d 1d       	adc	r25, r13
    b426:	91 83       	std	Z+1, r25	; 0x01
    b428:	80 83       	st	Z, r24
    b42a:	8c 0c       	add	r8, r12
    b42c:	9d 1c       	adc	r9, r13
    b42e:	f7 01       	movw	r30, r14
    b430:	80 89       	ldd	r24, Z+16	; 0x10
    b432:	91 89       	ldd	r25, Z+17	; 0x11
    b434:	a2 89       	ldd	r26, Z+18	; 0x12
    b436:	b3 89       	ldd	r27, Z+19	; 0x13
    b438:	8c 0d       	add	r24, r12
    b43a:	9d 1d       	adc	r25, r13
    b43c:	a1 1d       	adc	r26, r1
    b43e:	b1 1d       	adc	r27, r1
    b440:	80 8b       	std	Z+16, r24	; 0x10
    b442:	91 8b       	std	Z+17, r25	; 0x11
    b444:	a2 8b       	std	Z+18, r26	; 0x12
    b446:	b3 8b       	std	Z+19, r27	; 0x13
    b448:	f5 ce       	rjmp	.-534    	; 0xb234 <f_read+0x70>
    b44a:	80 e0       	ldi	r24, 0x00	; 0
    b44c:	01 c0       	rjmp	.+2      	; 0xb450 <f_read+0x28c>
    b44e:	87 e0       	ldi	r24, 0x07	; 7
    b450:	90 e0       	ldi	r25, 0x00	; 0
    b452:	26 96       	adiw	r28, 0x06	; 6
    b454:	e2 e1       	ldi	r30, 0x12	; 18
    b456:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0000b45a <f_write>:
    b45a:	a8 e0       	ldi	r26, 0x08	; 8
    b45c:	b0 e0       	ldi	r27, 0x00	; 0
    b45e:	e3 e3       	ldi	r30, 0x33	; 51
    b460:	fa e5       	ldi	r31, 0x5A	; 90
    b462:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    b466:	7c 01       	movw	r14, r24
    b468:	3b 01       	movw	r6, r22
    b46a:	5a 01       	movw	r10, r20
    b46c:	38 87       	std	Y+8, r19	; 0x08
    b46e:	2f 83       	std	Y+7, r18	; 0x07
    b470:	f9 01       	movw	r30, r18
    b472:	11 82       	std	Z+1, r1	; 0x01
    b474:	10 82       	st	Z, r1
    b476:	be 01       	movw	r22, r28
    b478:	6f 5f       	subi	r22, 0xFF	; 255
    b47a:	7f 4f       	sbci	r23, 0xFF	; 255
    b47c:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <validate>
    b480:	00 97       	sbiw	r24, 0x00	; 0
    b482:	09 f0       	breq	.+2      	; 0xb486 <f_write+0x2c>
    b484:	7d c1       	rjmp	.+762    	; 0xb780 <f_write+0x326>
    b486:	f7 01       	movw	r30, r14
    b488:	87 85       	ldd	r24, Z+15	; 0x0f
    b48a:	90 e0       	ldi	r25, 0x00	; 0
    b48c:	00 97       	sbiw	r24, 0x00	; 0
    b48e:	09 f0       	breq	.+2      	; 0xb492 <f_write+0x38>
    b490:	77 c1       	rjmp	.+750    	; 0xb780 <f_write+0x326>
    b492:	86 85       	ldd	r24, Z+14	; 0x0e
    b494:	81 ff       	sbrs	r24, 1
    b496:	72 c1       	rjmp	.+740    	; 0xb77c <f_write+0x322>
    b498:	80 89       	ldd	r24, Z+16	; 0x10
    b49a:	91 89       	ldd	r25, Z+17	; 0x11
    b49c:	a2 89       	ldd	r26, Z+18	; 0x12
    b49e:	b3 89       	ldd	r27, Z+19	; 0x13
    b4a0:	ac 01       	movw	r20, r24
    b4a2:	bd 01       	movw	r22, r26
    b4a4:	4a 0d       	add	r20, r10
    b4a6:	5b 1d       	adc	r21, r11
    b4a8:	61 1d       	adc	r22, r1
    b4aa:	71 1d       	adc	r23, r1
    b4ac:	48 17       	cp	r20, r24
    b4ae:	59 07       	cpc	r21, r25
    b4b0:	6a 07       	cpc	r22, r26
    b4b2:	7b 07       	cpc	r23, r27
    b4b4:	18 f4       	brcc	.+6      	; 0xb4bc <f_write+0x62>
    b4b6:	5c 01       	movw	r10, r24
    b4b8:	a0 94       	com	r10
    b4ba:	b0 94       	com	r11
    b4bc:	97 01       	movw	r18, r14
    b4be:	2c 5d       	subi	r18, 0xDC	; 220
    b4c0:	3f 4f       	sbci	r19, 0xFF	; 255
    b4c2:	3e 83       	std	Y+6, r19	; 0x06
    b4c4:	2d 83       	std	Y+5, r18	; 0x05
    b4c6:	a1 14       	cp	r10, r1
    b4c8:	b1 04       	cpc	r11, r1
    b4ca:	09 f4       	brne	.+2      	; 0xb4ce <f_write+0x74>
    b4cc:	4d c0       	rjmp	.+154    	; 0xb568 <f_write+0x10e>
    b4ce:	f7 01       	movw	r30, r14
    b4d0:	40 89       	ldd	r20, Z+16	; 0x10
    b4d2:	51 89       	ldd	r21, Z+17	; 0x11
    b4d4:	62 89       	ldd	r22, Z+18	; 0x12
    b4d6:	73 89       	ldd	r23, Z+19	; 0x13
    b4d8:	db 01       	movw	r26, r22
    b4da:	ca 01       	movw	r24, r20
    b4dc:	91 70       	andi	r25, 0x01	; 1
    b4de:	aa 27       	eor	r26, r26
    b4e0:	bb 27       	eor	r27, r27
    b4e2:	89 2b       	or	r24, r25
    b4e4:	8a 2b       	or	r24, r26
    b4e6:	8b 2b       	or	r24, r27
    b4e8:	09 f0       	breq	.+2      	; 0xb4ec <f_write+0x92>
    b4ea:	05 c1       	rjmp	.+522    	; 0xb6f6 <f_write+0x29c>
    b4ec:	e9 81       	ldd	r30, Y+1	; 0x01
    b4ee:	fa 81       	ldd	r31, Y+2	; 0x02
    b4f0:	81 84       	ldd	r8, Z+9	; 0x09
    b4f2:	92 84       	ldd	r9, Z+10	; 0x0a
    b4f4:	f1 e0       	ldi	r31, 0x01	; 1
    b4f6:	8f 1a       	sub	r8, r31
    b4f8:	91 08       	sbc	r9, r1
    b4fa:	db 01       	movw	r26, r22
    b4fc:	ca 01       	movw	r24, r20
    b4fe:	e9 e0       	ldi	r30, 0x09	; 9
    b500:	b6 95       	lsr	r27
    b502:	a7 95       	ror	r26
    b504:	97 95       	ror	r25
    b506:	87 95       	ror	r24
    b508:	ea 95       	dec	r30
    b50a:	d1 f7       	brne	.-12     	; 0xb500 <f_write+0xa6>
    b50c:	88 22       	and	r8, r24
    b50e:	99 22       	and	r9, r25
    b510:	81 14       	cp	r8, r1
    b512:	91 04       	cpc	r9, r1
    b514:	09 f0       	breq	.+2      	; 0xb518 <f_write+0xbe>
    b516:	51 c0       	rjmp	.+162    	; 0xb5ba <f_write+0x160>
    b518:	f7 01       	movw	r30, r14
    b51a:	41 15       	cp	r20, r1
    b51c:	51 05       	cpc	r21, r1
    b51e:	61 05       	cpc	r22, r1
    b520:	71 05       	cpc	r23, r1
    b522:	69 f4       	brne	.+26     	; 0xb53e <f_write+0xe4>
    b524:	66 81       	ldd	r22, Z+6	; 0x06
    b526:	77 81       	ldd	r23, Z+7	; 0x07
    b528:	80 85       	ldd	r24, Z+8	; 0x08
    b52a:	91 85       	ldd	r25, Z+9	; 0x09
    b52c:	61 15       	cp	r22, r1
    b52e:	71 05       	cpc	r23, r1
    b530:	81 05       	cpc	r24, r1
    b532:	91 05       	cpc	r25, r1
    b534:	f9 f4       	brne	.+62     	; 0xb574 <f_write+0x11a>
    b536:	40 e0       	ldi	r20, 0x00	; 0
    b538:	50 e0       	ldi	r21, 0x00	; 0
    b53a:	ba 01       	movw	r22, r20
    b53c:	0d c0       	rjmp	.+26     	; 0xb558 <f_write+0xfe>
    b53e:	82 a1       	ldd	r24, Z+34	; 0x22
    b540:	93 a1       	ldd	r25, Z+35	; 0x23
    b542:	89 2b       	or	r24, r25
    b544:	21 f0       	breq	.+8      	; 0xb54e <f_write+0xf4>
    b546:	c7 01       	movw	r24, r14
    b548:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <clmt_clust>
    b54c:	08 c0       	rjmp	.+16     	; 0xb55e <f_write+0x104>
    b54e:	f7 01       	movw	r30, r14
    b550:	44 89       	ldd	r20, Z+20	; 0x14
    b552:	55 89       	ldd	r21, Z+21	; 0x15
    b554:	66 89       	ldd	r22, Z+22	; 0x16
    b556:	77 89       	ldd	r23, Z+23	; 0x17
    b558:	c7 01       	movw	r24, r14
    b55a:	0e 94 38 4e 	call	0x9c70	; 0x9c70 <create_chain>
    b55e:	61 15       	cp	r22, r1
    b560:	71 05       	cpc	r23, r1
    b562:	81 05       	cpc	r24, r1
    b564:	91 05       	cpc	r25, r1
    b566:	31 f4       	brne	.+12     	; 0xb574 <f_write+0x11a>
    b568:	f7 01       	movw	r30, r14
    b56a:	86 85       	ldd	r24, Z+14	; 0x0e
    b56c:	80 64       	ori	r24, 0x40	; 64
    b56e:	86 87       	std	Z+14, r24	; 0x0e
    b570:	80 e0       	ldi	r24, 0x00	; 0
    b572:	05 c1       	rjmp	.+522    	; 0xb77e <f_write+0x324>
    b574:	61 30       	cpi	r22, 0x01	; 1
    b576:	71 05       	cpc	r23, r1
    b578:	81 05       	cpc	r24, r1
    b57a:	91 05       	cpc	r25, r1
    b57c:	11 f4       	brne	.+4      	; 0xb582 <f_write+0x128>
    b57e:	82 e0       	ldi	r24, 0x02	; 2
    b580:	07 c0       	rjmp	.+14     	; 0xb590 <f_write+0x136>
    b582:	6f 3f       	cpi	r22, 0xFF	; 255
    b584:	ff ef       	ldi	r31, 0xFF	; 255
    b586:	7f 07       	cpc	r23, r31
    b588:	8f 07       	cpc	r24, r31
    b58a:	9f 07       	cpc	r25, r31
    b58c:	21 f4       	brne	.+8      	; 0xb596 <f_write+0x13c>
    b58e:	81 e0       	ldi	r24, 0x01	; 1
    b590:	f7 01       	movw	r30, r14
    b592:	87 87       	std	Z+15, r24	; 0x0f
    b594:	f4 c0       	rjmp	.+488    	; 0xb77e <f_write+0x324>
    b596:	f7 01       	movw	r30, r14
    b598:	64 8b       	std	Z+20, r22	; 0x14
    b59a:	75 8b       	std	Z+21, r23	; 0x15
    b59c:	86 8b       	std	Z+22, r24	; 0x16
    b59e:	97 8b       	std	Z+23, r25	; 0x17
    b5a0:	06 81       	ldd	r16, Z+6	; 0x06
    b5a2:	17 81       	ldd	r17, Z+7	; 0x07
    b5a4:	20 85       	ldd	r18, Z+8	; 0x08
    b5a6:	31 85       	ldd	r19, Z+9	; 0x09
    b5a8:	01 15       	cp	r16, r1
    b5aa:	11 05       	cpc	r17, r1
    b5ac:	21 05       	cpc	r18, r1
    b5ae:	31 05       	cpc	r19, r1
    b5b0:	21 f4       	brne	.+8      	; 0xb5ba <f_write+0x160>
    b5b2:	66 83       	std	Z+6, r22	; 0x06
    b5b4:	77 83       	std	Z+7, r23	; 0x07
    b5b6:	80 87       	std	Z+8, r24	; 0x08
    b5b8:	91 87       	std	Z+9, r25	; 0x09
    b5ba:	f7 01       	movw	r30, r14
    b5bc:	86 85       	ldd	r24, Z+14	; 0x0e
    b5be:	87 ff       	sbrs	r24, 7
    b5c0:	13 c0       	rjmp	.+38     	; 0xb5e8 <f_write+0x18e>
    b5c2:	20 8d       	ldd	r18, Z+24	; 0x18
    b5c4:	31 8d       	ldd	r19, Z+25	; 0x19
    b5c6:	42 8d       	ldd	r20, Z+26	; 0x1a
    b5c8:	53 8d       	ldd	r21, Z+27	; 0x1b
    b5ca:	e9 81       	ldd	r30, Y+1	; 0x01
    b5cc:	fa 81       	ldd	r31, Y+2	; 0x02
    b5ce:	01 e0       	ldi	r16, 0x01	; 1
    b5d0:	10 e0       	ldi	r17, 0x00	; 0
    b5d2:	6d 81       	ldd	r22, Y+5	; 0x05
    b5d4:	7e 81       	ldd	r23, Y+6	; 0x06
    b5d6:	81 81       	ldd	r24, Z+1	; 0x01
    b5d8:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    b5dc:	89 2b       	or	r24, r25
    b5de:	b9 f6       	brne	.-82     	; 0xb58e <f_write+0x134>
    b5e0:	f7 01       	movw	r30, r14
    b5e2:	86 85       	ldd	r24, Z+14	; 0x0e
    b5e4:	8f 77       	andi	r24, 0x7F	; 127
    b5e6:	86 87       	std	Z+14, r24	; 0x0e
    b5e8:	29 81       	ldd	r18, Y+1	; 0x01
    b5ea:	3a 81       	ldd	r19, Y+2	; 0x02
    b5ec:	3c 83       	std	Y+4, r19	; 0x04
    b5ee:	2b 83       	std	Y+3, r18	; 0x03
    b5f0:	f7 01       	movw	r30, r14
    b5f2:	44 89       	ldd	r20, Z+20	; 0x14
    b5f4:	55 89       	ldd	r21, Z+21	; 0x15
    b5f6:	66 89       	ldd	r22, Z+22	; 0x16
    b5f8:	77 89       	ldd	r23, Z+23	; 0x17
    b5fa:	c9 01       	movw	r24, r18
    b5fc:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <clst2sect>
    b600:	61 15       	cp	r22, r1
    b602:	71 05       	cpc	r23, r1
    b604:	81 05       	cpc	r24, r1
    b606:	91 05       	cpc	r25, r1
    b608:	09 f4       	brne	.+2      	; 0xb60c <f_write+0x1b2>
    b60a:	b9 cf       	rjmp	.-142    	; 0xb57e <f_write+0x124>
    b60c:	1b 01       	movw	r2, r22
    b60e:	2c 01       	movw	r4, r24
    b610:	28 0c       	add	r2, r8
    b612:	39 1c       	adc	r3, r9
    b614:	41 1c       	adc	r4, r1
    b616:	51 1c       	adc	r5, r1
    b618:	65 01       	movw	r12, r10
    b61a:	cd 2c       	mov	r12, r13
    b61c:	dd 24       	eor	r13, r13
    b61e:	c6 94       	lsr	r12
    b620:	c1 14       	cp	r12, r1
    b622:	d1 04       	cpc	r13, r1
    b624:	f1 f1       	breq	.+124    	; 0xb6a2 <f_write+0x248>
    b626:	eb 81       	ldd	r30, Y+3	; 0x03
    b628:	fc 81       	ldd	r31, Y+4	; 0x04
    b62a:	81 85       	ldd	r24, Z+9	; 0x09
    b62c:	92 85       	ldd	r25, Z+10	; 0x0a
    b62e:	94 01       	movw	r18, r8
    b630:	2c 0d       	add	r18, r12
    b632:	3d 1d       	adc	r19, r13
    b634:	82 17       	cp	r24, r18
    b636:	93 07       	cpc	r25, r19
    b638:	18 f4       	brcc	.+6      	; 0xb640 <f_write+0x1e6>
    b63a:	6c 01       	movw	r12, r24
    b63c:	c8 18       	sub	r12, r8
    b63e:	d9 08       	sbc	r13, r9
    b640:	86 01       	movw	r16, r12
    b642:	a2 01       	movw	r20, r4
    b644:	91 01       	movw	r18, r2
    b646:	b3 01       	movw	r22, r6
    b648:	eb 81       	ldd	r30, Y+3	; 0x03
    b64a:	fc 81       	ldd	r31, Y+4	; 0x04
    b64c:	81 81       	ldd	r24, Z+1	; 0x01
    b64e:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    b652:	89 2b       	or	r24, r25
    b654:	09 f0       	breq	.+2      	; 0xb658 <f_write+0x1fe>
    b656:	9b cf       	rjmp	.-202    	; 0xb58e <f_write+0x134>
    b658:	f7 01       	movw	r30, r14
    b65a:	80 8d       	ldd	r24, Z+24	; 0x18
    b65c:	91 8d       	ldd	r25, Z+25	; 0x19
    b65e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b660:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b662:	82 19       	sub	r24, r2
    b664:	93 09       	sbc	r25, r3
    b666:	a4 09       	sbc	r26, r4
    b668:	b5 09       	sbc	r27, r5
    b66a:	a6 01       	movw	r20, r12
    b66c:	60 e0       	ldi	r22, 0x00	; 0
    b66e:	70 e0       	ldi	r23, 0x00	; 0
    b670:	84 17       	cp	r24, r20
    b672:	95 07       	cpc	r25, r21
    b674:	a6 07       	cpc	r26, r22
    b676:	b7 07       	cpc	r27, r23
    b678:	80 f4       	brcc	.+32     	; 0xb69a <f_write+0x240>
    b67a:	98 2f       	mov	r25, r24
    b67c:	88 27       	eor	r24, r24
    b67e:	99 0f       	add	r25, r25
    b680:	b3 01       	movw	r22, r6
    b682:	68 0f       	add	r22, r24
    b684:	79 1f       	adc	r23, r25
    b686:	40 e0       	ldi	r20, 0x00	; 0
    b688:	52 e0       	ldi	r21, 0x02	; 2
    b68a:	8d 81       	ldd	r24, Y+5	; 0x05
    b68c:	9e 81       	ldd	r25, Y+6	; 0x06
    b68e:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
    b692:	f7 01       	movw	r30, r14
    b694:	86 85       	ldd	r24, Z+14	; 0x0e
    b696:	8f 77       	andi	r24, 0x7F	; 127
    b698:	86 87       	std	Z+14, r24	; 0x0e
    b69a:	dc 2c       	mov	r13, r12
    b69c:	cc 24       	eor	r12, r12
    b69e:	dd 0c       	add	r13, r13
    b6a0:	43 c0       	rjmp	.+134    	; 0xb728 <f_write+0x2ce>
    b6a2:	f7 01       	movw	r30, r14
    b6a4:	80 8d       	ldd	r24, Z+24	; 0x18
    b6a6:	91 8d       	ldd	r25, Z+25	; 0x19
    b6a8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b6aa:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b6ac:	28 16       	cp	r2, r24
    b6ae:	39 06       	cpc	r3, r25
    b6b0:	4a 06       	cpc	r4, r26
    b6b2:	5b 06       	cpc	r5, r27
    b6b4:	d9 f0       	breq	.+54     	; 0xb6ec <f_write+0x292>
    b6b6:	40 89       	ldd	r20, Z+16	; 0x10
    b6b8:	51 89       	ldd	r21, Z+17	; 0x11
    b6ba:	62 89       	ldd	r22, Z+18	; 0x12
    b6bc:	73 89       	ldd	r23, Z+19	; 0x13
    b6be:	82 85       	ldd	r24, Z+10	; 0x0a
    b6c0:	93 85       	ldd	r25, Z+11	; 0x0b
    b6c2:	a4 85       	ldd	r26, Z+12	; 0x0c
    b6c4:	b5 85       	ldd	r27, Z+13	; 0x0d
    b6c6:	48 17       	cp	r20, r24
    b6c8:	59 07       	cpc	r21, r25
    b6ca:	6a 07       	cpc	r22, r26
    b6cc:	7b 07       	cpc	r23, r27
    b6ce:	70 f4       	brcc	.+28     	; 0xb6ec <f_write+0x292>
    b6d0:	01 e0       	ldi	r16, 0x01	; 1
    b6d2:	10 e0       	ldi	r17, 0x00	; 0
    b6d4:	a2 01       	movw	r20, r4
    b6d6:	91 01       	movw	r18, r2
    b6d8:	6d 81       	ldd	r22, Y+5	; 0x05
    b6da:	7e 81       	ldd	r23, Y+6	; 0x06
    b6dc:	eb 81       	ldd	r30, Y+3	; 0x03
    b6de:	fc 81       	ldd	r31, Y+4	; 0x04
    b6e0:	81 81       	ldd	r24, Z+1	; 0x01
    b6e2:	0e 94 3c 67 	call	0xce78	; 0xce78 <disk_read>
    b6e6:	89 2b       	or	r24, r25
    b6e8:	09 f0       	breq	.+2      	; 0xb6ec <f_write+0x292>
    b6ea:	51 cf       	rjmp	.-350    	; 0xb58e <f_write+0x134>
    b6ec:	f7 01       	movw	r30, r14
    b6ee:	20 8e       	std	Z+24, r2	; 0x18
    b6f0:	31 8e       	std	Z+25, r3	; 0x19
    b6f2:	42 8e       	std	Z+26, r4	; 0x1a
    b6f4:	53 8e       	std	Z+27, r5	; 0x1b
    b6f6:	f7 01       	movw	r30, r14
    b6f8:	80 89       	ldd	r24, Z+16	; 0x10
    b6fa:	91 89       	ldd	r25, Z+17	; 0x11
    b6fc:	91 70       	andi	r25, 0x01	; 1
    b6fe:	20 e0       	ldi	r18, 0x00	; 0
    b700:	32 e0       	ldi	r19, 0x02	; 2
    b702:	28 1b       	sub	r18, r24
    b704:	39 0b       	sbc	r19, r25
    b706:	65 01       	movw	r12, r10
    b708:	2a 15       	cp	r18, r10
    b70a:	3b 05       	cpc	r19, r11
    b70c:	08 f4       	brcc	.+2      	; 0xb710 <f_write+0x2b6>
    b70e:	69 01       	movw	r12, r18
    b710:	a6 01       	movw	r20, r12
    b712:	b3 01       	movw	r22, r6
    b714:	2d 81       	ldd	r18, Y+5	; 0x05
    b716:	3e 81       	ldd	r19, Y+6	; 0x06
    b718:	82 0f       	add	r24, r18
    b71a:	93 1f       	adc	r25, r19
    b71c:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
    b720:	f7 01       	movw	r30, r14
    b722:	86 85       	ldd	r24, Z+14	; 0x0e
    b724:	80 68       	ori	r24, 0x80	; 128
    b726:	86 87       	std	Z+14, r24	; 0x0e
    b728:	ac 18       	sub	r10, r12
    b72a:	bd 08       	sbc	r11, r13
    b72c:	ef 81       	ldd	r30, Y+7	; 0x07
    b72e:	f8 85       	ldd	r31, Y+8	; 0x08
    b730:	80 81       	ld	r24, Z
    b732:	91 81       	ldd	r25, Z+1	; 0x01
    b734:	8c 0d       	add	r24, r12
    b736:	9d 1d       	adc	r25, r13
    b738:	91 83       	std	Z+1, r25	; 0x01
    b73a:	80 83       	st	Z, r24
    b73c:	6c 0c       	add	r6, r12
    b73e:	7d 1c       	adc	r7, r13
    b740:	f7 01       	movw	r30, r14
    b742:	80 89       	ldd	r24, Z+16	; 0x10
    b744:	91 89       	ldd	r25, Z+17	; 0x11
    b746:	a2 89       	ldd	r26, Z+18	; 0x12
    b748:	b3 89       	ldd	r27, Z+19	; 0x13
    b74a:	8c 0d       	add	r24, r12
    b74c:	9d 1d       	adc	r25, r13
    b74e:	a1 1d       	adc	r26, r1
    b750:	b1 1d       	adc	r27, r1
    b752:	80 8b       	std	Z+16, r24	; 0x10
    b754:	91 8b       	std	Z+17, r25	; 0x11
    b756:	a2 8b       	std	Z+18, r26	; 0x12
    b758:	b3 8b       	std	Z+19, r27	; 0x13
    b75a:	42 85       	ldd	r20, Z+10	; 0x0a
    b75c:	53 85       	ldd	r21, Z+11	; 0x0b
    b75e:	64 85       	ldd	r22, Z+12	; 0x0c
    b760:	75 85       	ldd	r23, Z+13	; 0x0d
    b762:	48 17       	cp	r20, r24
    b764:	59 07       	cpc	r21, r25
    b766:	6a 07       	cpc	r22, r26
    b768:	7b 07       	cpc	r23, r27
    b76a:	10 f4       	brcc	.+4      	; 0xb770 <f_write+0x316>
    b76c:	ac 01       	movw	r20, r24
    b76e:	bd 01       	movw	r22, r26
    b770:	f7 01       	movw	r30, r14
    b772:	42 87       	std	Z+10, r20	; 0x0a
    b774:	53 87       	std	Z+11, r21	; 0x0b
    b776:	64 87       	std	Z+12, r22	; 0x0c
    b778:	75 87       	std	Z+13, r23	; 0x0d
    b77a:	a5 ce       	rjmp	.-694    	; 0xb4c6 <f_write+0x6c>
    b77c:	87 e0       	ldi	r24, 0x07	; 7
    b77e:	90 e0       	ldi	r25, 0x00	; 0
    b780:	28 96       	adiw	r28, 0x08	; 8
    b782:	e2 e1       	ldi	r30, 0x12	; 18
    b784:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0000b788 <f_sync>:
    b788:	8f 92       	push	r8
    b78a:	9f 92       	push	r9
    b78c:	af 92       	push	r10
    b78e:	bf 92       	push	r11
    b790:	ef 92       	push	r14
    b792:	ff 92       	push	r15
    b794:	0f 93       	push	r16
    b796:	1f 93       	push	r17
    b798:	cf 93       	push	r28
    b79a:	df 93       	push	r29
    b79c:	00 d0       	rcall	.+0      	; 0xb79e <f_sync+0x16>
    b79e:	cd b7       	in	r28, 0x3d	; 61
    b7a0:	de b7       	in	r29, 0x3e	; 62
    b7a2:	7c 01       	movw	r14, r24
    b7a4:	be 01       	movw	r22, r28
    b7a6:	6f 5f       	subi	r22, 0xFF	; 255
    b7a8:	7f 4f       	sbci	r23, 0xFF	; 255
    b7aa:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <validate>
    b7ae:	00 97       	sbiw	r24, 0x00	; 0
    b7b0:	09 f0       	breq	.+2      	; 0xb7b4 <f_sync+0x2c>
    b7b2:	5d c0       	rjmp	.+186    	; 0xb86e <f_sync+0xe6>
    b7b4:	f7 01       	movw	r30, r14
    b7b6:	86 85       	ldd	r24, Z+14	; 0x0e
    b7b8:	86 ff       	sbrs	r24, 6
    b7ba:	55 c0       	rjmp	.+170    	; 0xb866 <f_sync+0xde>
    b7bc:	87 ff       	sbrs	r24, 7
    b7be:	15 c0       	rjmp	.+42     	; 0xb7ea <f_sync+0x62>
    b7c0:	20 8d       	ldd	r18, Z+24	; 0x18
    b7c2:	31 8d       	ldd	r19, Z+25	; 0x19
    b7c4:	42 8d       	ldd	r20, Z+26	; 0x1a
    b7c6:	53 8d       	ldd	r21, Z+27	; 0x1b
    b7c8:	e9 81       	ldd	r30, Y+1	; 0x01
    b7ca:	fa 81       	ldd	r31, Y+2	; 0x02
    b7cc:	01 e0       	ldi	r16, 0x01	; 1
    b7ce:	10 e0       	ldi	r17, 0x00	; 0
    b7d0:	b7 01       	movw	r22, r14
    b7d2:	6c 5d       	subi	r22, 0xDC	; 220
    b7d4:	7f 4f       	sbci	r23, 0xFF	; 255
    b7d6:	81 81       	ldd	r24, Z+1	; 0x01
    b7d8:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    b7dc:	89 2b       	or	r24, r25
    b7de:	09 f0       	breq	.+2      	; 0xb7e2 <f_sync+0x5a>
    b7e0:	44 c0       	rjmp	.+136    	; 0xb86a <f_sync+0xe2>
    b7e2:	f7 01       	movw	r30, r14
    b7e4:	86 85       	ldd	r24, Z+14	; 0x0e
    b7e6:	8f 77       	andi	r24, 0x7F	; 127
    b7e8:	86 87       	std	Z+14, r24	; 0x0e
    b7ea:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <get_fattime>
    b7ee:	4b 01       	movw	r8, r22
    b7f0:	5c 01       	movw	r10, r24
    b7f2:	f7 01       	movw	r30, r14
    b7f4:	44 8d       	ldd	r20, Z+28	; 0x1c
    b7f6:	55 8d       	ldd	r21, Z+29	; 0x1d
    b7f8:	66 8d       	ldd	r22, Z+30	; 0x1e
    b7fa:	77 8d       	ldd	r23, Z+31	; 0x1f
    b7fc:	89 81       	ldd	r24, Y+1	; 0x01
    b7fe:	9a 81       	ldd	r25, Y+2	; 0x02
    b800:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    b804:	00 97       	sbiw	r24, 0x00	; 0
    b806:	99 f5       	brne	.+102    	; 0xb86e <f_sync+0xe6>
    b808:	f7 01       	movw	r30, r14
    b80a:	00 a1       	ldd	r16, Z+32	; 0x20
    b80c:	11 a1       	ldd	r17, Z+33	; 0x21
    b80e:	f8 01       	movw	r30, r16
    b810:	83 85       	ldd	r24, Z+11	; 0x0b
    b812:	80 62       	ori	r24, 0x20	; 32
    b814:	83 87       	std	Z+11, r24	; 0x0b
    b816:	f7 01       	movw	r30, r14
    b818:	26 81       	ldd	r18, Z+6	; 0x06
    b81a:	37 81       	ldd	r19, Z+7	; 0x07
    b81c:	40 85       	ldd	r20, Z+8	; 0x08
    b81e:	51 85       	ldd	r21, Z+9	; 0x09
    b820:	b8 01       	movw	r22, r16
    b822:	80 81       	ld	r24, Z
    b824:	91 81       	ldd	r25, Z+1	; 0x01
    b826:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <st_clust.isra.5>
    b82a:	f7 01       	movw	r30, r14
    b82c:	42 85       	ldd	r20, Z+10	; 0x0a
    b82e:	53 85       	ldd	r21, Z+11	; 0x0b
    b830:	64 85       	ldd	r22, Z+12	; 0x0c
    b832:	75 85       	ldd	r23, Z+13	; 0x0d
    b834:	c8 01       	movw	r24, r16
    b836:	4c 96       	adiw	r24, 0x1c	; 28
    b838:	0e 94 2d 44 	call	0x885a	; 0x885a <st_dword>
    b83c:	b5 01       	movw	r22, r10
    b83e:	a4 01       	movw	r20, r8
    b840:	c8 01       	movw	r24, r16
    b842:	46 96       	adiw	r24, 0x16	; 22
    b844:	0e 94 2d 44 	call	0x885a	; 0x885a <st_dword>
    b848:	f8 01       	movw	r30, r16
    b84a:	12 8a       	std	Z+18, r1	; 0x12
    b84c:	13 8a       	std	Z+19, r1	; 0x13
    b84e:	89 81       	ldd	r24, Y+1	; 0x01
    b850:	9a 81       	ldd	r25, Y+2	; 0x02
    b852:	21 e0       	ldi	r18, 0x01	; 1
    b854:	fc 01       	movw	r30, r24
    b856:	23 83       	std	Z+3, r18	; 0x03
    b858:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sync_fs>
    b85c:	f7 01       	movw	r30, r14
    b85e:	26 85       	ldd	r18, Z+14	; 0x0e
    b860:	2f 7b       	andi	r18, 0xBF	; 191
    b862:	26 87       	std	Z+14, r18	; 0x0e
    b864:	04 c0       	rjmp	.+8      	; 0xb86e <f_sync+0xe6>
    b866:	80 e0       	ldi	r24, 0x00	; 0
    b868:	01 c0       	rjmp	.+2      	; 0xb86c <f_sync+0xe4>
    b86a:	81 e0       	ldi	r24, 0x01	; 1
    b86c:	90 e0       	ldi	r25, 0x00	; 0
    b86e:	0f 90       	pop	r0
    b870:	0f 90       	pop	r0
    b872:	df 91       	pop	r29
    b874:	cf 91       	pop	r28
    b876:	1f 91       	pop	r17
    b878:	0f 91       	pop	r16
    b87a:	ff 90       	pop	r15
    b87c:	ef 90       	pop	r14
    b87e:	bf 90       	pop	r11
    b880:	af 90       	pop	r10
    b882:	9f 90       	pop	r9
    b884:	8f 90       	pop	r8
    b886:	08 95       	ret

0000b888 <f_close>:
    b888:	a2 e0       	ldi	r26, 0x02	; 2
    b88a:	b0 e0       	ldi	r27, 0x00	; 0
    b88c:	ea e4       	ldi	r30, 0x4A	; 74
    b88e:	fc e5       	ldi	r31, 0x5C	; 92
    b890:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    b894:	8c 01       	movw	r16, r24
    b896:	78 df       	rcall	.-272    	; 0xb788 <f_sync>
    b898:	00 97       	sbiw	r24, 0x00	; 0
    b89a:	59 f4       	brne	.+22     	; 0xb8b2 <f_close+0x2a>
    b89c:	be 01       	movw	r22, r28
    b89e:	6f 5f       	subi	r22, 0xFF	; 255
    b8a0:	7f 4f       	sbci	r23, 0xFF	; 255
    b8a2:	c8 01       	movw	r24, r16
    b8a4:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <validate>
    b8a8:	00 97       	sbiw	r24, 0x00	; 0
    b8aa:	19 f4       	brne	.+6      	; 0xb8b2 <f_close+0x2a>
    b8ac:	f8 01       	movw	r30, r16
    b8ae:	11 82       	std	Z+1, r1	; 0x01
    b8b0:	10 82       	st	Z, r1
    b8b2:	22 96       	adiw	r28, 0x02	; 2
    b8b4:	e4 e0       	ldi	r30, 0x04	; 4
    b8b6:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

0000b8ba <f_chdir>:
    b8ba:	a2 e3       	ldi	r26, 0x32	; 50
    b8bc:	b0 e0       	ldi	r27, 0x00	; 0
    b8be:	e3 e6       	ldi	r30, 0x63	; 99
    b8c0:	fc e5       	ldi	r31, 0x5C	; 92
    b8c2:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    b8c6:	9a ab       	std	Y+50, r25	; 0x32
    b8c8:	89 ab       	std	Y+49, r24	; 0x31
    b8ca:	40 e0       	ldi	r20, 0x00	; 0
    b8cc:	be 01       	movw	r22, r28
    b8ce:	61 5d       	subi	r22, 0xD1	; 209
    b8d0:	7f 4f       	sbci	r23, 0xFF	; 255
    b8d2:	ce 01       	movw	r24, r28
    b8d4:	c1 96       	adiw	r24, 0x31	; 49
    b8d6:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
    b8da:	00 97       	sbiw	r24, 0x00	; 0
    b8dc:	09 f0       	breq	.+2      	; 0xb8e0 <f_chdir+0x26>
    b8de:	44 c0       	rjmp	.+136    	; 0xb968 <f_chdir+0xae>
    b8e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    b8e2:	98 a9       	ldd	r25, Y+48	; 0x30
    b8e4:	9a 83       	std	Y+2, r25	; 0x02
    b8e6:	89 83       	std	Y+1, r24	; 0x01
    b8e8:	80 e0       	ldi	r24, 0x00	; 0
    b8ea:	92 e0       	ldi	r25, 0x02	; 2
    b8ec:	0e 94 80 66 	call	0xcd00	; 0xcd00 <ff_memalloc>
    b8f0:	7c 01       	movw	r14, r24
    b8f2:	00 97       	sbiw	r24, 0x00	; 0
    b8f4:	a9 f1       	breq	.+106    	; 0xb960 <f_chdir+0xa6>
    b8f6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b8f8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b8fa:	94 87       	std	Z+12, r25	; 0x0c
    b8fc:	83 87       	std	Z+11, r24	; 0x0b
    b8fe:	69 a9       	ldd	r22, Y+49	; 0x31
    b900:	7a a9       	ldd	r23, Y+50	; 0x32
    b902:	ce 01       	movw	r24, r28
    b904:	01 96       	adiw	r24, 0x01	; 1
    b906:	39 d8       	rcall	.-3982   	; 0xa97a <follow_path>
    b908:	8c 01       	movw	r16, r24
    b90a:	89 2b       	or	r24, r25
    b90c:	09 f5       	brne	.+66     	; 0xb950 <f_chdir+0x96>
    b90e:	88 a5       	ldd	r24, Y+40	; 0x28
    b910:	87 ff       	sbrs	r24, 7
    b912:	0b c0       	rjmp	.+22     	; 0xb92a <f_chdir+0x70>
    b914:	ef a5       	ldd	r30, Y+47	; 0x2f
    b916:	f8 a9       	ldd	r31, Y+48	; 0x30
    b918:	8f 81       	ldd	r24, Y+7	; 0x07
    b91a:	98 85       	ldd	r25, Y+8	; 0x08
    b91c:	a9 85       	ldd	r26, Y+9	; 0x09
    b91e:	ba 85       	ldd	r27, Y+10	; 0x0a
    b920:	85 8b       	std	Z+21, r24	; 0x15
    b922:	96 8b       	std	Z+22, r25	; 0x16
    b924:	a7 8b       	std	Z+23, r26	; 0x17
    b926:	b0 8f       	std	Z+24, r27	; 0x18
    b928:	13 c0       	rjmp	.+38     	; 0xb950 <f_chdir+0x96>
    b92a:	8d 81       	ldd	r24, Y+5	; 0x05
    b92c:	84 ff       	sbrs	r24, 4
    b92e:	0e c0       	rjmp	.+28     	; 0xb94c <f_chdir+0x92>
    b930:	cf a4       	ldd	r12, Y+47	; 0x2f
    b932:	d8 a8       	ldd	r13, Y+48	; 0x30
    b934:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b936:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b938:	f6 01       	movw	r30, r12
    b93a:	80 81       	ld	r24, Z
    b93c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <ld_clust.isra.4>
    b940:	f6 01       	movw	r30, r12
    b942:	65 8b       	std	Z+21, r22	; 0x15
    b944:	76 8b       	std	Z+22, r23	; 0x16
    b946:	87 8b       	std	Z+23, r24	; 0x17
    b948:	90 8f       	std	Z+24, r25	; 0x18
    b94a:	02 c0       	rjmp	.+4      	; 0xb950 <f_chdir+0x96>
    b94c:	05 e0       	ldi	r16, 0x05	; 5
    b94e:	10 e0       	ldi	r17, 0x00	; 0
    b950:	c7 01       	movw	r24, r14
    b952:	0e 94 83 66 	call	0xcd06	; 0xcd06 <ff_memfree>
    b956:	04 30       	cpi	r16, 0x04	; 4
    b958:	11 05       	cpc	r17, r1
    b95a:	29 f4       	brne	.+10     	; 0xb966 <f_chdir+0xac>
    b95c:	85 e0       	ldi	r24, 0x05	; 5
    b95e:	01 c0       	rjmp	.+2      	; 0xb962 <f_chdir+0xa8>
    b960:	81 e1       	ldi	r24, 0x11	; 17
    b962:	90 e0       	ldi	r25, 0x00	; 0
    b964:	01 c0       	rjmp	.+2      	; 0xb968 <f_chdir+0xae>
    b966:	c8 01       	movw	r24, r16
    b968:	e2 96       	adiw	r28, 0x32	; 50
    b96a:	e8 e0       	ldi	r30, 0x08	; 8
    b96c:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000b970 <f_getcwd>:
    b970:	a8 e4       	ldi	r26, 0x48	; 72
    b972:	b1 e0       	ldi	r27, 0x01	; 1
    b974:	ee eb       	ldi	r30, 0xBE	; 190
    b976:	fc e5       	ldi	r31, 0x5C	; 92
    b978:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    b97c:	c9 5b       	subi	r28, 0xB9	; 185
    b97e:	de 4f       	sbci	r29, 0xFE	; 254
    b980:	99 83       	std	Y+1, r25	; 0x01
    b982:	88 83       	st	Y, r24
    b984:	c7 54       	subi	r28, 0x47	; 71
    b986:	d1 40       	sbci	r29, 0x01	; 1
    b988:	4b 01       	movw	r8, r22
    b98a:	7c 01       	movw	r14, r24
    b98c:	fc 01       	movw	r30, r24
    b98e:	10 82       	st	Z, r1
    b990:	40 e0       	ldi	r20, 0x00	; 0
    b992:	be 01       	movw	r22, r28
    b994:	6b 5b       	subi	r22, 0xBB	; 187
    b996:	7e 4f       	sbci	r23, 0xFE	; 254
    b998:	ce 01       	movw	r24, r28
    b99a:	89 5b       	subi	r24, 0xB9	; 185
    b99c:	9e 4f       	sbci	r25, 0xFE	; 254
    b99e:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
    b9a2:	1c 01       	movw	r2, r24
    b9a4:	89 2b       	or	r24, r25
    b9a6:	09 f0       	breq	.+2      	; 0xb9aa <f_getcwd+0x3a>
    b9a8:	03 c1       	rjmp	.+518    	; 0xbbb0 <f_getcwd+0x240>
    b9aa:	cb 5b       	subi	r28, 0xBB	; 187
    b9ac:	de 4f       	sbci	r29, 0xFE	; 254
    b9ae:	88 81       	ld	r24, Y
    b9b0:	99 81       	ldd	r25, Y+1	; 0x01
    b9b2:	c5 54       	subi	r28, 0x45	; 69
    b9b4:	d1 40       	sbci	r29, 0x01	; 1
    b9b6:	c9 5e       	subi	r28, 0xE9	; 233
    b9b8:	de 4f       	sbci	r29, 0xFE	; 254
    b9ba:	99 83       	std	Y+1, r25	; 0x01
    b9bc:	88 83       	st	Y, r24
    b9be:	c7 51       	subi	r28, 0x17	; 23
    b9c0:	d1 40       	sbci	r29, 0x01	; 1
    b9c2:	80 e0       	ldi	r24, 0x00	; 0
    b9c4:	92 e0       	ldi	r25, 0x02	; 2
    b9c6:	0e 94 80 66 	call	0xcd00	; 0xcd00 <ff_memalloc>
    b9ca:	5c 01       	movw	r10, r24
    b9cc:	00 97       	sbiw	r24, 0x00	; 0
    b9ce:	09 f4       	brne	.+2      	; 0xb9d2 <f_getcwd+0x62>
    b9d0:	f3 c0       	rjmp	.+486    	; 0xbbb8 <f_getcwd+0x248>
    b9d2:	cb 5b       	subi	r28, 0xBB	; 187
    b9d4:	de 4f       	sbci	r29, 0xFE	; 254
    b9d6:	e8 81       	ld	r30, Y
    b9d8:	f9 81       	ldd	r31, Y+1	; 0x01
    b9da:	c5 54       	subi	r28, 0x45	; 69
    b9dc:	d1 40       	sbci	r29, 0x01	; 1
    b9de:	94 87       	std	Z+12, r25	; 0x0c
    b9e0:	83 87       	std	Z+11, r24	; 0x0b
    b9e2:	85 89       	ldd	r24, Z+21	; 0x15
    b9e4:	96 89       	ldd	r25, Z+22	; 0x16
    b9e6:	a7 89       	ldd	r26, Z+23	; 0x17
    b9e8:	b0 8d       	ldd	r27, Z+24	; 0x18
    b9ea:	c3 5e       	subi	r28, 0xE3	; 227
    b9ec:	de 4f       	sbci	r29, 0xFE	; 254
    b9ee:	88 83       	st	Y, r24
    b9f0:	99 83       	std	Y+1, r25	; 0x01
    b9f2:	aa 83       	std	Y+2, r26	; 0x02
    b9f4:	bb 83       	std	Y+3, r27	; 0x03
    b9f6:	cd 51       	subi	r28, 0x1D	; 29
    b9f8:	d1 40       	sbci	r29, 0x01	; 1
    b9fa:	84 01       	movw	r16, r8
    b9fc:	ce 01       	movw	r24, r28
    b9fe:	01 96       	adiw	r24, 0x01	; 1
    ba00:	6c 01       	movw	r12, r24
    ba02:	c3 5e       	subi	r28, 0xE3	; 227
    ba04:	de 4f       	sbci	r29, 0xFE	; 254
    ba06:	48 80       	ld	r4, Y
    ba08:	59 80       	ldd	r5, Y+1	; 0x01
    ba0a:	6a 80       	ldd	r6, Y+2	; 0x02
    ba0c:	7b 80       	ldd	r7, Y+3	; 0x03
    ba0e:	cd 51       	subi	r28, 0x1D	; 29
    ba10:	d1 40       	sbci	r29, 0x01	; 1
    ba12:	41 14       	cp	r4, r1
    ba14:	51 04       	cpc	r5, r1
    ba16:	61 04       	cpc	r6, r1
    ba18:	71 04       	cpc	r7, r1
    ba1a:	09 f4       	brne	.+2      	; 0xba1e <f_getcwd+0xae>
    ba1c:	a3 c0       	rjmp	.+326    	; 0xbb64 <f_getcwd+0x1f4>
    ba1e:	40 e2       	ldi	r20, 0x20	; 32
    ba20:	50 e0       	ldi	r21, 0x00	; 0
    ba22:	60 e0       	ldi	r22, 0x00	; 0
    ba24:	70 e0       	ldi	r23, 0x00	; 0
    ba26:	ce 01       	movw	r24, r28
    ba28:	89 5e       	subi	r24, 0xE9	; 233
    ba2a:	9e 4f       	sbci	r25, 0xFE	; 254
    ba2c:	0e 94 77 4d 	call	0x9aee	; 0x9aee <dir_sdi>
    ba30:	00 97       	sbiw	r24, 0x00	; 0
    ba32:	09 f0       	breq	.+2      	; 0xba36 <f_getcwd+0xc6>
    ba34:	c6 c0       	rjmp	.+396    	; 0xbbc2 <f_getcwd+0x252>
    ba36:	c3 5d       	subi	r28, 0xD3	; 211
    ba38:	de 4f       	sbci	r29, 0xFE	; 254
    ba3a:	48 81       	ld	r20, Y
    ba3c:	59 81       	ldd	r21, Y+1	; 0x01
    ba3e:	6a 81       	ldd	r22, Y+2	; 0x02
    ba40:	7b 81       	ldd	r23, Y+3	; 0x03
    ba42:	cd 52       	subi	r28, 0x2D	; 45
    ba44:	d1 40       	sbci	r29, 0x01	; 1
    ba46:	cb 5b       	subi	r28, 0xBB	; 187
    ba48:	de 4f       	sbci	r29, 0xFE	; 254
    ba4a:	88 81       	ld	r24, Y
    ba4c:	99 81       	ldd	r25, Y+1	; 0x01
    ba4e:	c5 54       	subi	r28, 0x45	; 69
    ba50:	d1 40       	sbci	r29, 0x01	; 1
    ba52:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    ba56:	00 97       	sbiw	r24, 0x00	; 0
    ba58:	09 f0       	breq	.+2      	; 0xba5c <f_getcwd+0xec>
    ba5a:	b3 c0       	rjmp	.+358    	; 0xbbc2 <f_getcwd+0x252>
    ba5c:	cf 5c       	subi	r28, 0xCF	; 207
    ba5e:	de 4f       	sbci	r29, 0xFE	; 254
    ba60:	68 81       	ld	r22, Y
    ba62:	79 81       	ldd	r23, Y+1	; 0x01
    ba64:	c1 53       	subi	r28, 0x31	; 49
    ba66:	d1 40       	sbci	r29, 0x01	; 1
    ba68:	cb 5b       	subi	r28, 0xBB	; 187
    ba6a:	de 4f       	sbci	r29, 0xFE	; 254
    ba6c:	e8 81       	ld	r30, Y
    ba6e:	f9 81       	ldd	r31, Y+1	; 0x01
    ba70:	c5 54       	subi	r28, 0x45	; 69
    ba72:	d1 40       	sbci	r29, 0x01	; 1
    ba74:	80 81       	ld	r24, Z
    ba76:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <ld_clust.isra.4>
    ba7a:	c3 5e       	subi	r28, 0xE3	; 227
    ba7c:	de 4f       	sbci	r29, 0xFE	; 254
    ba7e:	68 83       	st	Y, r22
    ba80:	79 83       	std	Y+1, r23	; 0x01
    ba82:	8a 83       	std	Y+2, r24	; 0x02
    ba84:	9b 83       	std	Y+3, r25	; 0x03
    ba86:	cd 51       	subi	r28, 0x1D	; 29
    ba88:	d1 40       	sbci	r29, 0x01	; 1
    ba8a:	40 e0       	ldi	r20, 0x00	; 0
    ba8c:	50 e0       	ldi	r21, 0x00	; 0
    ba8e:	ba 01       	movw	r22, r20
    ba90:	ce 01       	movw	r24, r28
    ba92:	89 5e       	subi	r24, 0xE9	; 233
    ba94:	9e 4f       	sbci	r25, 0xFE	; 254
    ba96:	0e 94 77 4d 	call	0x9aee	; 0x9aee <dir_sdi>
    ba9a:	00 97       	sbiw	r24, 0x00	; 0
    ba9c:	09 f0       	breq	.+2      	; 0xbaa0 <f_getcwd+0x130>
    ba9e:	91 c0       	rjmp	.+290    	; 0xbbc2 <f_getcwd+0x252>
    baa0:	60 e0       	ldi	r22, 0x00	; 0
    baa2:	70 e0       	ldi	r23, 0x00	; 0
    baa4:	ce 01       	movw	r24, r28
    baa6:	89 5e       	subi	r24, 0xE9	; 233
    baa8:	9e 4f       	sbci	r25, 0xFE	; 254
    baaa:	0e 94 10 51 	call	0xa220	; 0xa220 <dir_read>
    baae:	00 97       	sbiw	r24, 0x00	; 0
    bab0:	09 f0       	breq	.+2      	; 0xbab4 <f_getcwd+0x144>
    bab2:	89 c0       	rjmp	.+274    	; 0xbbc6 <f_getcwd+0x256>
    bab4:	cf 5c       	subi	r28, 0xCF	; 207
    bab6:	de 4f       	sbci	r29, 0xFE	; 254
    bab8:	68 81       	ld	r22, Y
    baba:	79 81       	ldd	r23, Y+1	; 0x01
    babc:	c1 53       	subi	r28, 0x31	; 49
    babe:	d1 40       	sbci	r29, 0x01	; 1
    bac0:	cb 5b       	subi	r28, 0xBB	; 187
    bac2:	de 4f       	sbci	r29, 0xFE	; 254
    bac4:	e8 81       	ld	r30, Y
    bac6:	f9 81       	ldd	r31, Y+1	; 0x01
    bac8:	c5 54       	subi	r28, 0x45	; 69
    baca:	d1 40       	sbci	r29, 0x01	; 1
    bacc:	80 81       	ld	r24, Z
    bace:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <ld_clust.isra.4>
    bad2:	46 16       	cp	r4, r22
    bad4:	57 06       	cpc	r5, r23
    bad6:	68 06       	cpc	r6, r24
    bad8:	79 06       	cpc	r7, r25
    bada:	41 f4       	brne	.+16     	; 0xbaec <f_getcwd+0x17c>
    badc:	b6 01       	movw	r22, r12
    bade:	ce 01       	movw	r24, r28
    bae0:	89 5e       	subi	r24, 0xE9	; 233
    bae2:	9e 4f       	sbci	r25, 0xFE	; 254
    bae4:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <get_fileinfo>
    bae8:	f6 01       	movw	r30, r12
    baea:	0a c0       	rjmp	.+20     	; 0xbb00 <f_getcwd+0x190>
    baec:	60 e0       	ldi	r22, 0x00	; 0
    baee:	70 e0       	ldi	r23, 0x00	; 0
    baf0:	ce 01       	movw	r24, r28
    baf2:	89 5e       	subi	r24, 0xE9	; 233
    baf4:	9e 4f       	sbci	r25, 0xFE	; 254
    baf6:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <dir_next>
    bafa:	00 97       	sbiw	r24, 0x00	; 0
    bafc:	89 f2       	breq	.-94     	; 0xbaa0 <f_getcwd+0x130>
    bafe:	63 c0       	rjmp	.+198    	; 0xbbc6 <f_getcwd+0x256>
    bb00:	cf 01       	movw	r24, r30
    bb02:	8c 19       	sub	r24, r12
    bb04:	9d 09       	sbc	r25, r13
    bb06:	31 96       	adiw	r30, 0x01	; 1
    bb08:	25 89       	ldd	r18, Z+21	; 0x15
    bb0a:	21 11       	cpse	r18, r1
    bb0c:	f9 cf       	rjmp	.-14     	; 0xbb00 <f_getcwd+0x190>
    bb0e:	9c 01       	movw	r18, r24
    bb10:	2f 5f       	subi	r18, 0xFF	; 255
    bb12:	3f 4f       	sbci	r19, 0xFF	; 255
    bb14:	02 17       	cp	r16, r18
    bb16:	13 07       	cpc	r17, r19
    bb18:	08 f4       	brcc	.+2      	; 0xbb1c <f_getcwd+0x1ac>
    bb1a:	51 c0       	rjmp	.+162    	; 0xbbbe <f_getcwd+0x24e>
    bb1c:	f6 01       	movw	r30, r12
    bb1e:	e8 0f       	add	r30, r24
    bb20:	f9 1f       	adc	r31, r25
    bb22:	98 01       	movw	r18, r16
    bb24:	ce 16       	cp	r12, r30
    bb26:	df 06       	cpc	r13, r31
    bb28:	71 f0       	breq	.+28     	; 0xbb46 <f_getcwd+0x1d6>
    bb2a:	21 50       	subi	r18, 0x01	; 1
    bb2c:	31 09       	sbc	r19, r1
    bb2e:	45 89       	ldd	r20, Z+21	; 0x15
    bb30:	c9 5b       	subi	r28, 0xB9	; 185
    bb32:	de 4f       	sbci	r29, 0xFE	; 254
    bb34:	a8 81       	ld	r26, Y
    bb36:	b9 81       	ldd	r27, Y+1	; 0x01
    bb38:	c7 54       	subi	r28, 0x47	; 71
    bb3a:	d1 40       	sbci	r29, 0x01	; 1
    bb3c:	a2 0f       	add	r26, r18
    bb3e:	b3 1f       	adc	r27, r19
    bb40:	4c 93       	st	X, r20
    bb42:	31 97       	sbiw	r30, 0x01	; 1
    bb44:	ef cf       	rjmp	.-34     	; 0xbb24 <f_getcwd+0x1b4>
    bb46:	80 95       	com	r24
    bb48:	90 95       	com	r25
    bb4a:	08 0f       	add	r16, r24
    bb4c:	19 1f       	adc	r17, r25
    bb4e:	c9 5b       	subi	r28, 0xB9	; 185
    bb50:	de 4f       	sbci	r29, 0xFE	; 254
    bb52:	e8 81       	ld	r30, Y
    bb54:	f9 81       	ldd	r31, Y+1	; 0x01
    bb56:	c7 54       	subi	r28, 0x47	; 71
    bb58:	d1 40       	sbci	r29, 0x01	; 1
    bb5a:	e0 0f       	add	r30, r16
    bb5c:	f1 1f       	adc	r31, r17
    bb5e:	9f e2       	ldi	r25, 0x2F	; 47
    bb60:	90 83       	st	Z, r25
    bb62:	4f cf       	rjmp	.-354    	; 0xba02 <f_getcwd+0x92>
    bb64:	08 15       	cp	r16, r8
    bb66:	19 05       	cpc	r17, r9
    bb68:	61 f4       	brne	.+24     	; 0xbb82 <f_getcwd+0x212>
    bb6a:	01 50       	subi	r16, 0x01	; 1
    bb6c:	11 09       	sbc	r17, r1
    bb6e:	c9 5b       	subi	r28, 0xB9	; 185
    bb70:	de 4f       	sbci	r29, 0xFE	; 254
    bb72:	e8 81       	ld	r30, Y
    bb74:	f9 81       	ldd	r31, Y+1	; 0x01
    bb76:	c7 54       	subi	r28, 0x47	; 71
    bb78:	d1 40       	sbci	r29, 0x01	; 1
    bb7a:	e0 0f       	add	r30, r16
    bb7c:	f1 1f       	adc	r31, r17
    bb7e:	8f e2       	ldi	r24, 0x2F	; 47
    bb80:	80 83       	st	Z, r24
    bb82:	ef ef       	ldi	r30, 0xFF	; 255
    bb84:	ee 1a       	sub	r14, r30
    bb86:	fe 0a       	sbc	r15, r30
    bb88:	c9 5b       	subi	r28, 0xB9	; 185
    bb8a:	de 4f       	sbci	r29, 0xFE	; 254
    bb8c:	e8 81       	ld	r30, Y
    bb8e:	f9 81       	ldd	r31, Y+1	; 0x01
    bb90:	c7 54       	subi	r28, 0x47	; 71
    bb92:	d1 40       	sbci	r29, 0x01	; 1
    bb94:	e0 0f       	add	r30, r16
    bb96:	f1 1f       	adc	r31, r17
    bb98:	80 81       	ld	r24, Z
    bb9a:	f7 01       	movw	r30, r14
    bb9c:	31 97       	sbiw	r30, 0x01	; 1
    bb9e:	80 83       	st	Z, r24
    bba0:	0f 5f       	subi	r16, 0xFF	; 255
    bba2:	1f 4f       	sbci	r17, 0xFF	; 255
    bba4:	08 15       	cp	r16, r8
    bba6:	19 05       	cpc	r17, r9
    bba8:	60 f3       	brcs	.-40     	; 0xbb82 <f_getcwd+0x212>
    bbaa:	c5 01       	movw	r24, r10
    bbac:	0e 94 83 66 	call	0xcd06	; 0xcd06 <ff_memfree>
    bbb0:	f7 01       	movw	r30, r14
    bbb2:	10 82       	st	Z, r1
    bbb4:	c1 01       	movw	r24, r2
    bbb6:	0d c0       	rjmp	.+26     	; 0xbbd2 <f_getcwd+0x262>
    bbb8:	81 e1       	ldi	r24, 0x11	; 17
    bbba:	90 e0       	ldi	r25, 0x00	; 0
    bbbc:	0a c0       	rjmp	.+20     	; 0xbbd2 <f_getcwd+0x262>
    bbbe:	81 e1       	ldi	r24, 0x11	; 17
    bbc0:	90 e0       	ldi	r25, 0x00	; 0
    bbc2:	1c 01       	movw	r2, r24
    bbc4:	f2 cf       	rjmp	.-28     	; 0xbbaa <f_getcwd+0x23a>
    bbc6:	84 30       	cpi	r24, 0x04	; 4
    bbc8:	91 05       	cpc	r25, r1
    bbca:	d9 f7       	brne	.-10     	; 0xbbc2 <f_getcwd+0x252>
    bbcc:	82 e0       	ldi	r24, 0x02	; 2
    bbce:	90 e0       	ldi	r25, 0x00	; 0
    bbd0:	f8 cf       	rjmp	.-16     	; 0xbbc2 <f_getcwd+0x252>
    bbd2:	c8 5b       	subi	r28, 0xB8	; 184
    bbd4:	de 4f       	sbci	r29, 0xFE	; 254
    bbd6:	e2 e1       	ldi	r30, 0x12	; 18
    bbd8:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0000bbdc <f_lseek>:
    bbdc:	aa e0       	ldi	r26, 0x0A	; 10
    bbde:	b0 e0       	ldi	r27, 0x00	; 0
    bbe0:	e4 ef       	ldi	r30, 0xF4	; 244
    bbe2:	fd e5       	ldi	r31, 0x5D	; 93
    bbe4:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    bbe8:	1c 01       	movw	r2, r24
    bbea:	6a 01       	movw	r12, r20
    bbec:	7b 01       	movw	r14, r22
    bbee:	be 01       	movw	r22, r28
    bbf0:	6f 5f       	subi	r22, 0xFF	; 255
    bbf2:	7f 4f       	sbci	r23, 0xFF	; 255
    bbf4:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <validate>
    bbf8:	00 97       	sbiw	r24, 0x00	; 0
    bbfa:	09 f0       	breq	.+2      	; 0xbbfe <f_lseek+0x22>
    bbfc:	a7 c2       	rjmp	.+1358   	; 0xc14c <f_lseek+0x570>
    bbfe:	f1 01       	movw	r30, r2
    bc00:	87 85       	ldd	r24, Z+15	; 0x0f
    bc02:	90 e0       	ldi	r25, 0x00	; 0
    bc04:	00 97       	sbiw	r24, 0x00	; 0
    bc06:	09 f0       	breq	.+2      	; 0xbc0a <f_lseek+0x2e>
    bc08:	a1 c2       	rjmp	.+1346   	; 0xc14c <f_lseek+0x570>
    bc0a:	22 a1       	ldd	r18, Z+34	; 0x22
    bc0c:	33 a1       	ldd	r19, Z+35	; 0x23
    bc0e:	21 15       	cp	r18, r1
    bc10:	31 05       	cpc	r19, r1
    bc12:	09 f4       	brne	.+2      	; 0xbc16 <f_lseek+0x3a>
    bc14:	2e c1       	rjmp	.+604    	; 0xbe72 <f_lseek+0x296>
    bc16:	ff ef       	ldi	r31, 0xFF	; 255
    bc18:	cf 16       	cp	r12, r31
    bc1a:	df 06       	cpc	r13, r31
    bc1c:	ef 06       	cpc	r14, r31
    bc1e:	ff 06       	cpc	r15, r31
    bc20:	09 f0       	breq	.+2      	; 0xbc24 <f_lseek+0x48>
    bc22:	9a c0       	rjmp	.+308    	; 0xbd58 <f_lseek+0x17c>
    bc24:	89 01       	movw	r16, r18
    bc26:	0c 5f       	subi	r16, 0xFC	; 252
    bc28:	1f 4f       	sbci	r17, 0xFF	; 255
    bc2a:	d9 01       	movw	r26, r18
    bc2c:	4d 91       	ld	r20, X+
    bc2e:	5d 91       	ld	r21, X+
    bc30:	6d 91       	ld	r22, X+
    bc32:	7c 91       	ld	r23, X
    bc34:	4f 83       	std	Y+7, r20	; 0x07
    bc36:	58 87       	std	Y+8, r21	; 0x08
    bc38:	69 87       	std	Y+9, r22	; 0x09
    bc3a:	7a 87       	std	Y+10, r23	; 0x0a
    bc3c:	f1 01       	movw	r30, r2
    bc3e:	86 80       	ldd	r8, Z+6	; 0x06
    bc40:	97 80       	ldd	r9, Z+7	; 0x07
    bc42:	a0 84       	ldd	r10, Z+8	; 0x08
    bc44:	b1 84       	ldd	r11, Z+9	; 0x09
    bc46:	52 e0       	ldi	r21, 0x02	; 2
    bc48:	c5 2e       	mov	r12, r21
    bc4a:	d1 2c       	mov	r13, r1
    bc4c:	e1 2c       	mov	r14, r1
    bc4e:	f1 2c       	mov	r15, r1
    bc50:	81 14       	cp	r8, r1
    bc52:	91 04       	cpc	r9, r1
    bc54:	a1 04       	cpc	r10, r1
    bc56:	b1 04       	cpc	r11, r1
    bc58:	09 f4       	brne	.+2      	; 0xbc5c <f_lseek+0x80>
    bc5a:	65 c0       	rjmp	.+202    	; 0xbd26 <f_lseek+0x14a>
    bc5c:	24 01       	movw	r4, r8
    bc5e:	35 01       	movw	r6, r10
    bc60:	1b 82       	std	Y+3, r1	; 0x03
    bc62:	1c 82       	std	Y+4, r1	; 0x04
    bc64:	1d 82       	std	Y+5, r1	; 0x05
    bc66:	1e 82       	std	Y+6, r1	; 0x06
    bc68:	2b 81       	ldd	r18, Y+3	; 0x03
    bc6a:	3c 81       	ldd	r19, Y+4	; 0x04
    bc6c:	4d 81       	ldd	r20, Y+5	; 0x05
    bc6e:	5e 81       	ldd	r21, Y+6	; 0x06
    bc70:	2f 5f       	subi	r18, 0xFF	; 255
    bc72:	3f 4f       	sbci	r19, 0xFF	; 255
    bc74:	4f 4f       	sbci	r20, 0xFF	; 255
    bc76:	5f 4f       	sbci	r21, 0xFF	; 255
    bc78:	2b 83       	std	Y+3, r18	; 0x03
    bc7a:	3c 83       	std	Y+4, r19	; 0x04
    bc7c:	4d 83       	std	Y+5, r20	; 0x05
    bc7e:	5e 83       	std	Y+6, r21	; 0x06
    bc80:	b3 01       	movw	r22, r6
    bc82:	a2 01       	movw	r20, r4
    bc84:	d1 01       	movw	r26, r2
    bc86:	8d 91       	ld	r24, X+
    bc88:	9c 91       	ld	r25, X
    bc8a:	0e 94 c3 4c 	call	0x9986	; 0x9986 <get_fat.isra.10>
    bc8e:	62 30       	cpi	r22, 0x02	; 2
    bc90:	71 05       	cpc	r23, r1
    bc92:	81 05       	cpc	r24, r1
    bc94:	91 05       	cpc	r25, r1
    bc96:	10 f4       	brcc	.+4      	; 0xbc9c <f_lseek+0xc0>
    bc98:	82 e0       	ldi	r24, 0x02	; 2
    bc9a:	07 c0       	rjmp	.+14     	; 0xbcaa <f_lseek+0xce>
    bc9c:	6f 3f       	cpi	r22, 0xFF	; 255
    bc9e:	ff ef       	ldi	r31, 0xFF	; 255
    bca0:	7f 07       	cpc	r23, r31
    bca2:	8f 07       	cpc	r24, r31
    bca4:	9f 07       	cpc	r25, r31
    bca6:	29 f4       	brne	.+10     	; 0xbcb2 <f_lseek+0xd6>
    bca8:	81 e0       	ldi	r24, 0x01	; 1
    bcaa:	f1 01       	movw	r30, r2
    bcac:	87 87       	std	Z+15, r24	; 0x0f
    bcae:	90 e0       	ldi	r25, 0x00	; 0
    bcb0:	4d c2       	rjmp	.+1178   	; 0xc14c <f_lseek+0x570>
    bcb2:	a3 01       	movw	r20, r6
    bcb4:	92 01       	movw	r18, r4
    bcb6:	2f 5f       	subi	r18, 0xFF	; 255
    bcb8:	3f 4f       	sbci	r19, 0xFF	; 255
    bcba:	4f 4f       	sbci	r20, 0xFF	; 255
    bcbc:	5f 4f       	sbci	r21, 0xFF	; 255
    bcbe:	2b 01       	movw	r4, r22
    bcc0:	3c 01       	movw	r6, r24
    bcc2:	62 17       	cp	r22, r18
    bcc4:	73 07       	cpc	r23, r19
    bcc6:	84 07       	cpc	r24, r20
    bcc8:	95 07       	cpc	r25, r21
    bcca:	71 f2       	breq	.-100    	; 0xbc68 <f_lseek+0x8c>
    bccc:	f2 e0       	ldi	r31, 0x02	; 2
    bcce:	cf 0e       	add	r12, r31
    bcd0:	d1 1c       	adc	r13, r1
    bcd2:	e1 1c       	adc	r14, r1
    bcd4:	f1 1c       	adc	r15, r1
    bcd6:	2f 81       	ldd	r18, Y+7	; 0x07
    bcd8:	38 85       	ldd	r19, Y+8	; 0x08
    bcda:	49 85       	ldd	r20, Y+9	; 0x09
    bcdc:	5a 85       	ldd	r21, Y+10	; 0x0a
    bcde:	2c 15       	cp	r18, r12
    bce0:	3d 05       	cpc	r19, r13
    bce2:	4e 05       	cpc	r20, r14
    bce4:	5f 05       	cpc	r21, r15
    bce6:	88 f0       	brcs	.+34     	; 0xbd0a <f_lseek+0x12e>
    bce8:	2b 81       	ldd	r18, Y+3	; 0x03
    bcea:	3c 81       	ldd	r19, Y+4	; 0x04
    bcec:	4d 81       	ldd	r20, Y+5	; 0x05
    bcee:	5e 81       	ldd	r21, Y+6	; 0x06
    bcf0:	d8 01       	movw	r26, r16
    bcf2:	2d 93       	st	X+, r18
    bcf4:	3d 93       	st	X+, r19
    bcf6:	4d 93       	st	X+, r20
    bcf8:	5c 93       	st	X, r21
    bcfa:	13 97       	sbiw	r26, 0x03	; 3
    bcfc:	f8 01       	movw	r30, r16
    bcfe:	84 82       	std	Z+4, r8	; 0x04
    bd00:	95 82       	std	Z+5, r9	; 0x05
    bd02:	a6 82       	std	Z+6, r10	; 0x06
    bd04:	b7 82       	std	Z+7, r11	; 0x07
    bd06:	08 5f       	subi	r16, 0xF8	; 248
    bd08:	1f 4f       	sbci	r17, 0xFF	; 255
    bd0a:	e9 81       	ldd	r30, Y+1	; 0x01
    bd0c:	fa 81       	ldd	r31, Y+2	; 0x02
    bd0e:	81 8c       	ldd	r8, Z+25	; 0x19
    bd10:	92 8c       	ldd	r9, Z+26	; 0x1a
    bd12:	a3 8c       	ldd	r10, Z+27	; 0x1b
    bd14:	b4 8c       	ldd	r11, Z+28	; 0x1c
    bd16:	68 15       	cp	r22, r8
    bd18:	79 05       	cpc	r23, r9
    bd1a:	8a 05       	cpc	r24, r10
    bd1c:	9b 05       	cpc	r25, r11
    bd1e:	18 f4       	brcc	.+6      	; 0xbd26 <f_lseek+0x14a>
    bd20:	4b 01       	movw	r8, r22
    bd22:	5c 01       	movw	r10, r24
    bd24:	9b cf       	rjmp	.-202    	; 0xbc5c <f_lseek+0x80>
    bd26:	f1 01       	movw	r30, r2
    bd28:	a2 a1       	ldd	r26, Z+34	; 0x22
    bd2a:	b3 a1       	ldd	r27, Z+35	; 0x23
    bd2c:	cd 92       	st	X+, r12
    bd2e:	dd 92       	st	X+, r13
    bd30:	ed 92       	st	X+, r14
    bd32:	fc 92       	st	X, r15
    bd34:	13 97       	sbiw	r26, 0x03	; 3
    bd36:	2f 81       	ldd	r18, Y+7	; 0x07
    bd38:	38 85       	ldd	r19, Y+8	; 0x08
    bd3a:	49 85       	ldd	r20, Y+9	; 0x09
    bd3c:	5a 85       	ldd	r21, Y+10	; 0x0a
    bd3e:	2c 15       	cp	r18, r12
    bd40:	3d 05       	cpc	r19, r13
    bd42:	4e 05       	cpc	r20, r14
    bd44:	5f 05       	cpc	r21, r15
    bd46:	08 f4       	brcc	.+2      	; 0xbd4a <f_lseek+0x16e>
    bd48:	f8 c1       	rjmp	.+1008   	; 0xc13a <f_lseek+0x55e>
    bd4a:	d8 01       	movw	r26, r16
    bd4c:	1d 92       	st	X+, r1
    bd4e:	1d 92       	st	X+, r1
    bd50:	1d 92       	st	X+, r1
    bd52:	1c 92       	st	X, r1
    bd54:	13 97       	sbiw	r26, 0x03	; 3
    bd56:	ef c1       	rjmp	.+990    	; 0xc136 <f_lseek+0x55a>
    bd58:	f1 01       	movw	r30, r2
    bd5a:	82 85       	ldd	r24, Z+10	; 0x0a
    bd5c:	93 85       	ldd	r25, Z+11	; 0x0b
    bd5e:	a4 85       	ldd	r26, Z+12	; 0x0c
    bd60:	b5 85       	ldd	r27, Z+13	; 0x0d
    bd62:	46 01       	movw	r8, r12
    bd64:	57 01       	movw	r10, r14
    bd66:	8c 15       	cp	r24, r12
    bd68:	9d 05       	cpc	r25, r13
    bd6a:	ae 05       	cpc	r26, r14
    bd6c:	bf 05       	cpc	r27, r15
    bd6e:	10 f4       	brcc	.+4      	; 0xbd74 <f_lseek+0x198>
    bd70:	4c 01       	movw	r8, r24
    bd72:	5d 01       	movw	r10, r26
    bd74:	f1 01       	movw	r30, r2
    bd76:	80 8a       	std	Z+16, r8	; 0x10
    bd78:	91 8a       	std	Z+17, r9	; 0x11
    bd7a:	a2 8a       	std	Z+18, r10	; 0x12
    bd7c:	b3 8a       	std	Z+19, r11	; 0x13
    bd7e:	81 14       	cp	r8, r1
    bd80:	91 04       	cpc	r9, r1
    bd82:	a1 04       	cpc	r10, r1
    bd84:	b1 04       	cpc	r11, r1
    bd86:	09 f4       	brne	.+2      	; 0xbd8a <f_lseek+0x1ae>
    bd88:	d6 c1       	rjmp	.+940    	; 0xc136 <f_lseek+0x55a>
    bd8a:	24 01       	movw	r4, r8
    bd8c:	35 01       	movw	r6, r10
    bd8e:	f1 e0       	ldi	r31, 0x01	; 1
    bd90:	4f 1a       	sub	r4, r31
    bd92:	51 08       	sbc	r5, r1
    bd94:	61 08       	sbc	r6, r1
    bd96:	71 08       	sbc	r7, r1
    bd98:	b3 01       	movw	r22, r6
    bd9a:	a2 01       	movw	r20, r4
    bd9c:	c1 01       	movw	r24, r2
    bd9e:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <clmt_clust>
    bda2:	ab 01       	movw	r20, r22
    bda4:	bc 01       	movw	r22, r24
    bda6:	f1 01       	movw	r30, r2
    bda8:	44 8b       	std	Z+20, r20	; 0x14
    bdaa:	55 8b       	std	Z+21, r21	; 0x15
    bdac:	66 8b       	std	Z+22, r22	; 0x16
    bdae:	77 8b       	std	Z+23, r23	; 0x17
    bdb0:	e9 80       	ldd	r14, Y+1	; 0x01
    bdb2:	fa 80       	ldd	r15, Y+2	; 0x02
    bdb4:	c7 01       	movw	r24, r14
    bdb6:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <clst2sect>
    bdba:	61 15       	cp	r22, r1
    bdbc:	71 05       	cpc	r23, r1
    bdbe:	81 05       	cpc	r24, r1
    bdc0:	91 05       	cpc	r25, r1
    bdc2:	09 f4       	brne	.+2      	; 0xbdc6 <f_lseek+0x1ea>
    bdc4:	69 cf       	rjmp	.-302    	; 0xbc98 <f_lseek+0xbc>
    bdc6:	95 01       	movw	r18, r10
    bdc8:	84 01       	movw	r16, r8
    bdca:	11 70       	andi	r17, 0x01	; 1
    bdcc:	22 27       	eor	r18, r18
    bdce:	33 27       	eor	r19, r19
    bdd0:	01 15       	cp	r16, r1
    bdd2:	11 05       	cpc	r17, r1
    bdd4:	21 05       	cpc	r18, r1
    bdd6:	31 05       	cpc	r19, r1
    bdd8:	09 f4       	brne	.+2      	; 0xbddc <f_lseek+0x200>
    bdda:	ad c1       	rjmp	.+858    	; 0xc136 <f_lseek+0x55a>
    bddc:	f7 01       	movw	r30, r14
    bdde:	81 84       	ldd	r8, Z+9	; 0x09
    bde0:	92 84       	ldd	r9, Z+10	; 0x0a
    bde2:	f1 e0       	ldi	r31, 0x01	; 1
    bde4:	8f 1a       	sub	r8, r31
    bde6:	91 08       	sbc	r9, r1
    bde8:	a1 2c       	mov	r10, r1
    bdea:	b1 2c       	mov	r11, r1
    bdec:	49 e0       	ldi	r20, 0x09	; 9
    bdee:	76 94       	lsr	r7
    bdf0:	67 94       	ror	r6
    bdf2:	57 94       	ror	r5
    bdf4:	47 94       	ror	r4
    bdf6:	4a 95       	dec	r20
    bdf8:	d1 f7       	brne	.-12     	; 0xbdee <f_lseek+0x212>
    bdfa:	48 20       	and	r4, r8
    bdfc:	59 20       	and	r5, r9
    bdfe:	6a 20       	and	r6, r10
    be00:	7b 20       	and	r7, r11
    be02:	53 01       	movw	r10, r6
    be04:	42 01       	movw	r8, r4
    be06:	86 0e       	add	r8, r22
    be08:	97 1e       	adc	r9, r23
    be0a:	a8 1e       	adc	r10, r24
    be0c:	b9 1e       	adc	r11, r25
    be0e:	f1 01       	movw	r30, r2
    be10:	20 8d       	ldd	r18, Z+24	; 0x18
    be12:	31 8d       	ldd	r19, Z+25	; 0x19
    be14:	42 8d       	ldd	r20, Z+26	; 0x1a
    be16:	53 8d       	ldd	r21, Z+27	; 0x1b
    be18:	82 16       	cp	r8, r18
    be1a:	93 06       	cpc	r9, r19
    be1c:	a4 06       	cpc	r10, r20
    be1e:	b5 06       	cpc	r11, r21
    be20:	09 f4       	brne	.+2      	; 0xbe24 <f_lseek+0x248>
    be22:	89 c1       	rjmp	.+786    	; 0xc136 <f_lseek+0x55a>
    be24:	86 85       	ldd	r24, Z+14	; 0x0e
    be26:	b1 01       	movw	r22, r2
    be28:	6c 5d       	subi	r22, 0xDC	; 220
    be2a:	7f 4f       	sbci	r23, 0xFF	; 255
    be2c:	6b 01       	movw	r12, r22
    be2e:	87 ff       	sbrs	r24, 7
    be30:	0d c0       	rjmp	.+26     	; 0xbe4c <f_lseek+0x270>
    be32:	01 e0       	ldi	r16, 0x01	; 1
    be34:	10 e0       	ldi	r17, 0x00	; 0
    be36:	f7 01       	movw	r30, r14
    be38:	81 81       	ldd	r24, Z+1	; 0x01
    be3a:	0e 94 4c 67 	call	0xce98	; 0xce98 <disk_write>
    be3e:	89 2b       	or	r24, r25
    be40:	09 f0       	breq	.+2      	; 0xbe44 <f_lseek+0x268>
    be42:	32 cf       	rjmp	.-412    	; 0xbca8 <f_lseek+0xcc>
    be44:	f1 01       	movw	r30, r2
    be46:	86 85       	ldd	r24, Z+14	; 0x0e
    be48:	8f 77       	andi	r24, 0x7F	; 127
    be4a:	86 87       	std	Z+14, r24	; 0x0e
    be4c:	e9 81       	ldd	r30, Y+1	; 0x01
    be4e:	fa 81       	ldd	r31, Y+2	; 0x02
    be50:	01 e0       	ldi	r16, 0x01	; 1
    be52:	10 e0       	ldi	r17, 0x00	; 0
    be54:	a5 01       	movw	r20, r10
    be56:	94 01       	movw	r18, r8
    be58:	b6 01       	movw	r22, r12
    be5a:	81 81       	ldd	r24, Z+1	; 0x01
    be5c:	0e 94 3c 67 	call	0xce78	; 0xce78 <disk_read>
    be60:	89 2b       	or	r24, r25
    be62:	09 f0       	breq	.+2      	; 0xbe66 <f_lseek+0x28a>
    be64:	21 cf       	rjmp	.-446    	; 0xbca8 <f_lseek+0xcc>
    be66:	f1 01       	movw	r30, r2
    be68:	80 8e       	std	Z+24, r8	; 0x18
    be6a:	91 8e       	std	Z+25, r9	; 0x19
    be6c:	a2 8e       	std	Z+26, r10	; 0x1a
    be6e:	b3 8e       	std	Z+27, r11	; 0x1b
    be70:	62 c1       	rjmp	.+708    	; 0xc136 <f_lseek+0x55a>
    be72:	f1 01       	movw	r30, r2
    be74:	82 85       	ldd	r24, Z+10	; 0x0a
    be76:	93 85       	ldd	r25, Z+11	; 0x0b
    be78:	a4 85       	ldd	r26, Z+12	; 0x0c
    be7a:	b5 85       	ldd	r27, Z+13	; 0x0d
    be7c:	8c 15       	cp	r24, r12
    be7e:	9d 05       	cpc	r25, r13
    be80:	ae 05       	cpc	r26, r14
    be82:	bf 05       	cpc	r27, r15
    be84:	28 f4       	brcc	.+10     	; 0xbe90 <f_lseek+0x2b4>
    be86:	26 85       	ldd	r18, Z+14	; 0x0e
    be88:	21 fd       	sbrc	r18, 1
    be8a:	02 c0       	rjmp	.+4      	; 0xbe90 <f_lseek+0x2b4>
    be8c:	6c 01       	movw	r12, r24
    be8e:	7d 01       	movw	r14, r26
    be90:	f1 01       	movw	r30, r2
    be92:	40 88       	ldd	r4, Z+16	; 0x10
    be94:	51 88       	ldd	r5, Z+17	; 0x11
    be96:	62 88       	ldd	r6, Z+18	; 0x12
    be98:	73 88       	ldd	r7, Z+19	; 0x13
    be9a:	10 8a       	std	Z+16, r1	; 0x10
    be9c:	11 8a       	std	Z+17, r1	; 0x11
    be9e:	12 8a       	std	Z+18, r1	; 0x12
    bea0:	13 8a       	std	Z+19, r1	; 0x13
    bea2:	c1 14       	cp	r12, r1
    bea4:	d1 04       	cpc	r13, r1
    bea6:	e1 04       	cpc	r14, r1
    bea8:	f1 04       	cpc	r15, r1
    beaa:	09 f4       	brne	.+2      	; 0xbeae <f_lseek+0x2d2>
    beac:	48 c1       	rjmp	.+656    	; 0xc13e <f_lseek+0x562>
    beae:	e9 81       	ldd	r30, Y+1	; 0x01
    beb0:	fa 81       	ldd	r31, Y+2	; 0x02
    beb2:	81 84       	ldd	r8, Z+9	; 0x09
    beb4:	92 84       	ldd	r9, Z+10	; 0x0a
    beb6:	a1 2c       	mov	r10, r1
    beb8:	b1 2c       	mov	r11, r1
    beba:	39 e0       	ldi	r19, 0x09	; 9
    bebc:	88 0c       	add	r8, r8
    bebe:	99 1c       	adc	r9, r9
    bec0:	aa 1c       	adc	r10, r10
    bec2:	bb 1c       	adc	r11, r11
    bec4:	3a 95       	dec	r19
    bec6:	d1 f7       	brne	.-12     	; 0xbebc <f_lseek+0x2e0>
    bec8:	41 14       	cp	r4, r1
    beca:	51 04       	cpc	r5, r1
    becc:	61 04       	cpc	r6, r1
    bece:	71 04       	cpc	r7, r1
    bed0:	d9 f1       	breq	.+118    	; 0xbf48 <f_lseek+0x36c>
    bed2:	f1 e0       	ldi	r31, 0x01	; 1
    bed4:	4f 1a       	sub	r4, r31
    bed6:	51 08       	sbc	r5, r1
    bed8:	61 08       	sbc	r6, r1
    beda:	71 08       	sbc	r7, r1
    bedc:	c7 01       	movw	r24, r14
    bede:	b6 01       	movw	r22, r12
    bee0:	61 50       	subi	r22, 0x01	; 1
    bee2:	71 09       	sbc	r23, r1
    bee4:	81 09       	sbc	r24, r1
    bee6:	91 09       	sbc	r25, r1
    bee8:	a5 01       	movw	r20, r10
    beea:	94 01       	movw	r18, r8
    beec:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    bef0:	2b 83       	std	Y+3, r18	; 0x03
    bef2:	3c 83       	std	Y+4, r19	; 0x04
    bef4:	4d 83       	std	Y+5, r20	; 0x05
    bef6:	5e 83       	std	Y+6, r21	; 0x06
    bef8:	c3 01       	movw	r24, r6
    befa:	b2 01       	movw	r22, r4
    befc:	a5 01       	movw	r20, r10
    befe:	94 01       	movw	r18, r8
    bf00:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
    bf04:	6b 81       	ldd	r22, Y+3	; 0x03
    bf06:	7c 81       	ldd	r23, Y+4	; 0x04
    bf08:	8d 81       	ldd	r24, Y+5	; 0x05
    bf0a:	9e 81       	ldd	r25, Y+6	; 0x06
    bf0c:	62 17       	cp	r22, r18
    bf0e:	73 07       	cpc	r23, r19
    bf10:	84 07       	cpc	r24, r20
    bf12:	95 07       	cpc	r25, r21
    bf14:	c8 f0       	brcs	.+50     	; 0xbf48 <f_lseek+0x36c>
    bf16:	88 27       	eor	r24, r24
    bf18:	99 27       	eor	r25, r25
    bf1a:	dc 01       	movw	r26, r24
    bf1c:	88 19       	sub	r24, r8
    bf1e:	99 09       	sbc	r25, r9
    bf20:	aa 09       	sbc	r26, r10
    bf22:	bb 09       	sbc	r27, r11
    bf24:	48 22       	and	r4, r24
    bf26:	59 22       	and	r5, r25
    bf28:	6a 22       	and	r6, r26
    bf2a:	7b 22       	and	r7, r27
    bf2c:	f1 01       	movw	r30, r2
    bf2e:	40 8a       	std	Z+16, r4	; 0x10
    bf30:	51 8a       	std	Z+17, r5	; 0x11
    bf32:	62 8a       	std	Z+18, r6	; 0x12
    bf34:	73 8a       	std	Z+19, r7	; 0x13
    bf36:	c4 18       	sub	r12, r4
    bf38:	d5 08       	sbc	r13, r5
    bf3a:	e6 08       	sbc	r14, r6
    bf3c:	f7 08       	sbc	r15, r7
    bf3e:	44 89       	ldd	r20, Z+20	; 0x14
    bf40:	55 89       	ldd	r21, Z+21	; 0x15
    bf42:	66 89       	ldd	r22, Z+22	; 0x16
    bf44:	77 89       	ldd	r23, Z+23	; 0x17
    bf46:	29 c0       	rjmp	.+82     	; 0xbf9a <f_lseek+0x3be>
    bf48:	f1 01       	movw	r30, r2
    bf4a:	46 81       	ldd	r20, Z+6	; 0x06
    bf4c:	57 81       	ldd	r21, Z+7	; 0x07
    bf4e:	60 85       	ldd	r22, Z+8	; 0x08
    bf50:	71 85       	ldd	r23, Z+9	; 0x09
    bf52:	41 15       	cp	r20, r1
    bf54:	51 05       	cpc	r21, r1
    bf56:	61 05       	cpc	r22, r1
    bf58:	71 05       	cpc	r23, r1
    bf5a:	d1 f4       	brne	.+52     	; 0xbf90 <f_lseek+0x3b4>
    bf5c:	40 e0       	ldi	r20, 0x00	; 0
    bf5e:	50 e0       	ldi	r21, 0x00	; 0
    bf60:	ba 01       	movw	r22, r20
    bf62:	c1 01       	movw	r24, r2
    bf64:	0e 94 38 4e 	call	0x9c70	; 0x9c70 <create_chain>
    bf68:	ab 01       	movw	r20, r22
    bf6a:	bc 01       	movw	r22, r24
    bf6c:	41 30       	cpi	r20, 0x01	; 1
    bf6e:	51 05       	cpc	r21, r1
    bf70:	61 05       	cpc	r22, r1
    bf72:	71 05       	cpc	r23, r1
    bf74:	09 f4       	brne	.+2      	; 0xbf78 <f_lseek+0x39c>
    bf76:	90 ce       	rjmp	.-736    	; 0xbc98 <f_lseek+0xbc>
    bf78:	4f 3f       	cpi	r20, 0xFF	; 255
    bf7a:	ff ef       	ldi	r31, 0xFF	; 255
    bf7c:	5f 07       	cpc	r21, r31
    bf7e:	6f 07       	cpc	r22, r31
    bf80:	7f 07       	cpc	r23, r31
    bf82:	09 f4       	brne	.+2      	; 0xbf86 <f_lseek+0x3aa>
    bf84:	91 ce       	rjmp	.-734    	; 0xbca8 <f_lseek+0xcc>
    bf86:	f1 01       	movw	r30, r2
    bf88:	46 83       	std	Z+6, r20	; 0x06
    bf8a:	57 83       	std	Z+7, r21	; 0x07
    bf8c:	60 87       	std	Z+8, r22	; 0x08
    bf8e:	71 87       	std	Z+9, r23	; 0x09
    bf90:	f1 01       	movw	r30, r2
    bf92:	44 8b       	std	Z+20, r20	; 0x14
    bf94:	55 8b       	std	Z+21, r21	; 0x15
    bf96:	66 8b       	std	Z+22, r22	; 0x16
    bf98:	77 8b       	std	Z+23, r23	; 0x17
    bf9a:	41 15       	cp	r20, r1
    bf9c:	51 05       	cpc	r21, r1
    bf9e:	61 05       	cpc	r22, r1
    bfa0:	71 05       	cpc	r23, r1
    bfa2:	09 f0       	breq	.+2      	; 0xbfa6 <f_lseek+0x3ca>
    bfa4:	40 c0       	rjmp	.+128    	; 0xc026 <f_lseek+0x44a>
    bfa6:	c1 2c       	mov	r12, r1
    bfa8:	d1 2c       	mov	r13, r1
    bfaa:	76 01       	movw	r14, r12
    bfac:	79 c0       	rjmp	.+242    	; 0xc0a0 <f_lseek+0x4c4>
    bfae:	c8 18       	sub	r12, r8
    bfb0:	d9 08       	sbc	r13, r9
    bfb2:	ea 08       	sbc	r14, r10
    bfb4:	fb 08       	sbc	r15, r11
    bfb6:	f1 01       	movw	r30, r2
    bfb8:	80 89       	ldd	r24, Z+16	; 0x10
    bfba:	91 89       	ldd	r25, Z+17	; 0x11
    bfbc:	a2 89       	ldd	r26, Z+18	; 0x12
    bfbe:	b3 89       	ldd	r27, Z+19	; 0x13
    bfc0:	88 0d       	add	r24, r8
    bfc2:	99 1d       	adc	r25, r9
    bfc4:	aa 1d       	adc	r26, r10
    bfc6:	bb 1d       	adc	r27, r11
    bfc8:	80 8b       	std	Z+16, r24	; 0x10
    bfca:	91 8b       	std	Z+17, r25	; 0x11
    bfcc:	a2 8b       	std	Z+18, r26	; 0x12
    bfce:	b3 8b       	std	Z+19, r27	; 0x13
    bfd0:	86 85       	ldd	r24, Z+14	; 0x0e
    bfd2:	81 ff       	sbrs	r24, 1
    bfd4:	2f c0       	rjmp	.+94     	; 0xc034 <f_lseek+0x458>
    bfd6:	c1 01       	movw	r24, r2
    bfd8:	0e 94 38 4e 	call	0x9c70	; 0x9c70 <create_chain>
    bfdc:	ab 01       	movw	r20, r22
    bfde:	bc 01       	movw	r22, r24
    bfe0:	41 15       	cp	r20, r1
    bfe2:	51 05       	cpc	r21, r1
    bfe4:	61 05       	cpc	r22, r1
    bfe6:	71 05       	cpc	r23, r1
    bfe8:	61 f1       	breq	.+88     	; 0xc042 <f_lseek+0x466>
    bfea:	4f 3f       	cpi	r20, 0xFF	; 255
    bfec:	bf ef       	ldi	r27, 0xFF	; 255
    bfee:	5b 07       	cpc	r21, r27
    bff0:	6b 07       	cpc	r22, r27
    bff2:	7b 07       	cpc	r23, r27
    bff4:	09 f4       	brne	.+2      	; 0xbff8 <f_lseek+0x41c>
    bff6:	58 ce       	rjmp	.-848    	; 0xbca8 <f_lseek+0xcc>
    bff8:	42 30       	cpi	r20, 0x02	; 2
    bffa:	51 05       	cpc	r21, r1
    bffc:	61 05       	cpc	r22, r1
    bffe:	71 05       	cpc	r23, r1
    c000:	08 f4       	brcc	.+2      	; 0xc004 <f_lseek+0x428>
    c002:	4a ce       	rjmp	.-876    	; 0xbc98 <f_lseek+0xbc>
    c004:	e9 81       	ldd	r30, Y+1	; 0x01
    c006:	fa 81       	ldd	r31, Y+2	; 0x02
    c008:	81 8d       	ldd	r24, Z+25	; 0x19
    c00a:	92 8d       	ldd	r25, Z+26	; 0x1a
    c00c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c00e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c010:	48 17       	cp	r20, r24
    c012:	59 07       	cpc	r21, r25
    c014:	6a 07       	cpc	r22, r26
    c016:	7b 07       	cpc	r23, r27
    c018:	08 f0       	brcs	.+2      	; 0xc01c <f_lseek+0x440>
    c01a:	3e ce       	rjmp	.-900    	; 0xbc98 <f_lseek+0xbc>
    c01c:	f1 01       	movw	r30, r2
    c01e:	44 8b       	std	Z+20, r20	; 0x14
    c020:	55 8b       	std	Z+21, r21	; 0x15
    c022:	66 8b       	std	Z+22, r22	; 0x16
    c024:	77 8b       	std	Z+23, r23	; 0x17
    c026:	8c 14       	cp	r8, r12
    c028:	9d 04       	cpc	r9, r13
    c02a:	ae 04       	cpc	r10, r14
    c02c:	bf 04       	cpc	r11, r15
    c02e:	08 f4       	brcc	.+2      	; 0xc032 <f_lseek+0x456>
    c030:	be cf       	rjmp	.-132    	; 0xbfae <f_lseek+0x3d2>
    c032:	0a c0       	rjmp	.+20     	; 0xc048 <f_lseek+0x46c>
    c034:	80 81       	ld	r24, Z
    c036:	91 81       	ldd	r25, Z+1	; 0x01
    c038:	0e 94 c3 4c 	call	0x9986	; 0x9986 <get_fat.isra.10>
    c03c:	ab 01       	movw	r20, r22
    c03e:	bc 01       	movw	r22, r24
    c040:	d4 cf       	rjmp	.-88     	; 0xbfea <f_lseek+0x40e>
    c042:	c1 2c       	mov	r12, r1
    c044:	d1 2c       	mov	r13, r1
    c046:	76 01       	movw	r14, r12
    c048:	f1 01       	movw	r30, r2
    c04a:	80 89       	ldd	r24, Z+16	; 0x10
    c04c:	91 89       	ldd	r25, Z+17	; 0x11
    c04e:	a2 89       	ldd	r26, Z+18	; 0x12
    c050:	b3 89       	ldd	r27, Z+19	; 0x13
    c052:	8c 0d       	add	r24, r12
    c054:	9d 1d       	adc	r25, r13
    c056:	ae 1d       	adc	r26, r14
    c058:	bf 1d       	adc	r27, r15
    c05a:	80 8b       	std	Z+16, r24	; 0x10
    c05c:	91 8b       	std	Z+17, r25	; 0x11
    c05e:	a2 8b       	std	Z+18, r26	; 0x12
    c060:	b3 8b       	std	Z+19, r27	; 0x13
    c062:	d7 01       	movw	r26, r14
    c064:	c6 01       	movw	r24, r12
    c066:	91 70       	andi	r25, 0x01	; 1
    c068:	aa 27       	eor	r26, r26
    c06a:	bb 27       	eor	r27, r27
    c06c:	89 2b       	or	r24, r25
    c06e:	8a 2b       	or	r24, r26
    c070:	8b 2b       	or	r24, r27
    c072:	09 f4       	brne	.+2      	; 0xc076 <f_lseek+0x49a>
    c074:	98 cf       	rjmp	.-208    	; 0xbfa6 <f_lseek+0x3ca>
    c076:	89 81       	ldd	r24, Y+1	; 0x01
    c078:	9a 81       	ldd	r25, Y+2	; 0x02
    c07a:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <clst2sect>
    c07e:	61 15       	cp	r22, r1
    c080:	71 05       	cpc	r23, r1
    c082:	81 05       	cpc	r24, r1
    c084:	91 05       	cpc	r25, r1
    c086:	09 f4       	brne	.+2      	; 0xc08a <f_lseek+0x4ae>
    c088:	07 ce       	rjmp	.-1010   	; 0xbc98 <f_lseek+0xbc>
    c08a:	29 e0       	ldi	r18, 0x09	; 9
    c08c:	f6 94       	lsr	r15
    c08e:	e7 94       	ror	r14
    c090:	d7 94       	ror	r13
    c092:	c7 94       	ror	r12
    c094:	2a 95       	dec	r18
    c096:	d1 f7       	brne	.-12     	; 0xc08c <f_lseek+0x4b0>
    c098:	c6 0e       	add	r12, r22
    c09a:	d7 1e       	adc	r13, r23
    c09c:	e8 1e       	adc	r14, r24
    c09e:	f9 1e       	adc	r15, r25
    c0a0:	f1 01       	movw	r30, r2
    c0a2:	80 89       	ldd	r24, Z+16	; 0x10
    c0a4:	91 89       	ldd	r25, Z+17	; 0x11
    c0a6:	a2 89       	ldd	r26, Z+18	; 0x12
    c0a8:	b3 89       	ldd	r27, Z+19	; 0x13
    c0aa:	42 85       	ldd	r20, Z+10	; 0x0a
    c0ac:	53 85       	ldd	r21, Z+11	; 0x0b
    c0ae:	64 85       	ldd	r22, Z+12	; 0x0c
    c0b0:	75 85       	ldd	r23, Z+13	; 0x0d
    c0b2:	48 17       	cp	r20, r24
    c0b4:	59 07       	cpc	r21, r25
    c0b6:	6a 07       	cpc	r22, r26
    c0b8:	7b 07       	cpc	r23, r27
    c0ba:	38 f4       	brcc	.+14     	; 0xc0ca <f_lseek+0x4ee>
    c0bc:	82 87       	std	Z+10, r24	; 0x0a
    c0be:	93 87       	std	Z+11, r25	; 0x0b
    c0c0:	a4 87       	std	Z+12, r26	; 0x0c
    c0c2:	b5 87       	std	Z+13, r27	; 0x0d
    c0c4:	26 85       	ldd	r18, Z+14	; 0x0e
    c0c6:	20 64       	ori	r18, 0x40	; 64
    c0c8:	26 87       	std	Z+14, r18	; 0x0e
    c0ca:	91 70       	andi	r25, 0x01	; 1
    c0cc:	aa 27       	eor	r26, r26
    c0ce:	bb 27       	eor	r27, r27
    c0d0:	89 2b       	or	r24, r25
    c0d2:	8a 2b       	or	r24, r26
    c0d4:	8b 2b       	or	r24, r27
    c0d6:	79 f1       	breq	.+94     	; 0xc136 <f_lseek+0x55a>
    c0d8:	f1 01       	movw	r30, r2
    c0da:	20 8d       	ldd	r18, Z+24	; 0x18
    c0dc:	31 8d       	ldd	r19, Z+25	; 0x19
    c0de:	42 8d       	ldd	r20, Z+26	; 0x1a
    c0e0:	53 8d       	ldd	r21, Z+27	; 0x1b
    c0e2:	2c 15       	cp	r18, r12
    c0e4:	3d 05       	cpc	r19, r13
    c0e6:	4e 05       	cpc	r20, r14
    c0e8:	5f 05       	cpc	r21, r15
    c0ea:	29 f1       	breq	.+74     	; 0xc136 <f_lseek+0x55a>
    c0ec:	86 85       	ldd	r24, Z+14	; 0x0e
    c0ee:	b1 01       	movw	r22, r2
    c0f0:	6c 5d       	subi	r22, 0xDC	; 220
    c0f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c0f4:	5b 01       	movw	r10, r22
    c0f6:	87 ff       	sbrs	r24, 7
    c0f8:	0d c0       	rjmp	.+26     	; 0xc114 <f_lseek+0x538>
    c0fa:	e9 81       	ldd	r30, Y+1	; 0x01
    c0fc:	fa 81       	ldd	r31, Y+2	; 0x02
    c0fe:	01 e0       	ldi	r16, 0x01	; 1
    c100:	10 e0       	ldi	r17, 0x00	; 0
    c102:	81 81       	ldd	r24, Z+1	; 0x01
    c104:	c9 d6       	rcall	.+3474   	; 0xce98 <disk_write>
    c106:	89 2b       	or	r24, r25
    c108:	09 f0       	breq	.+2      	; 0xc10c <f_lseek+0x530>
    c10a:	ce cd       	rjmp	.-1124   	; 0xbca8 <f_lseek+0xcc>
    c10c:	f1 01       	movw	r30, r2
    c10e:	86 85       	ldd	r24, Z+14	; 0x0e
    c110:	8f 77       	andi	r24, 0x7F	; 127
    c112:	86 87       	std	Z+14, r24	; 0x0e
    c114:	e9 81       	ldd	r30, Y+1	; 0x01
    c116:	fa 81       	ldd	r31, Y+2	; 0x02
    c118:	01 e0       	ldi	r16, 0x01	; 1
    c11a:	10 e0       	ldi	r17, 0x00	; 0
    c11c:	a7 01       	movw	r20, r14
    c11e:	96 01       	movw	r18, r12
    c120:	b5 01       	movw	r22, r10
    c122:	81 81       	ldd	r24, Z+1	; 0x01
    c124:	a9 d6       	rcall	.+3410   	; 0xce78 <disk_read>
    c126:	89 2b       	or	r24, r25
    c128:	09 f0       	breq	.+2      	; 0xc12c <f_lseek+0x550>
    c12a:	be cd       	rjmp	.-1156   	; 0xbca8 <f_lseek+0xcc>
    c12c:	f1 01       	movw	r30, r2
    c12e:	c0 8e       	std	Z+24, r12	; 0x18
    c130:	d1 8e       	std	Z+25, r13	; 0x19
    c132:	e2 8e       	std	Z+26, r14	; 0x1a
    c134:	f3 8e       	std	Z+27, r15	; 0x1b
    c136:	80 e0       	ldi	r24, 0x00	; 0
    c138:	ba cd       	rjmp	.-1164   	; 0xbcae <f_lseek+0xd2>
    c13a:	81 e1       	ldi	r24, 0x11	; 17
    c13c:	b8 cd       	rjmp	.-1168   	; 0xbcae <f_lseek+0xd2>
    c13e:	80 e0       	ldi	r24, 0x00	; 0
    c140:	90 e0       	ldi	r25, 0x00	; 0
    c142:	dc 01       	movw	r26, r24
    c144:	c1 2c       	mov	r12, r1
    c146:	d1 2c       	mov	r13, r1
    c148:	76 01       	movw	r14, r12
    c14a:	bf cf       	rjmp	.-130    	; 0xc0ca <f_lseek+0x4ee>
    c14c:	2a 96       	adiw	r28, 0x0a	; 10
    c14e:	e2 e1       	ldi	r30, 0x12	; 18
    c150:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0000c154 <f_opendir>:
    c154:	a4 e0       	ldi	r26, 0x04	; 4
    c156:	b0 e0       	ldi	r27, 0x00	; 0
    c158:	e0 eb       	ldi	r30, 0xB0	; 176
    c15a:	f0 e6       	ldi	r31, 0x60	; 96
    c15c:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    c160:	7c 83       	std	Y+4, r23	; 0x04
    c162:	6b 83       	std	Y+3, r22	; 0x03
    c164:	00 97       	sbiw	r24, 0x00	; 0
    c166:	09 f4       	brne	.+2      	; 0xc16a <f_opendir+0x16>
    c168:	48 c0       	rjmp	.+144    	; 0xc1fa <f_opendir+0xa6>
    c16a:	8c 01       	movw	r16, r24
    c16c:	40 e0       	ldi	r20, 0x00	; 0
    c16e:	be 01       	movw	r22, r28
    c170:	6f 5f       	subi	r22, 0xFF	; 255
    c172:	7f 4f       	sbci	r23, 0xFF	; 255
    c174:	ce 01       	movw	r24, r28
    c176:	03 96       	adiw	r24, 0x03	; 3
    c178:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
    c17c:	7c 01       	movw	r14, r24
    c17e:	89 2b       	or	r24, r25
    c180:	b9 f5       	brne	.+110    	; 0xc1f0 <f_opendir+0x9c>
    c182:	89 81       	ldd	r24, Y+1	; 0x01
    c184:	9a 81       	ldd	r25, Y+2	; 0x02
    c186:	f8 01       	movw	r30, r16
    c188:	91 83       	std	Z+1, r25	; 0x01
    c18a:	80 83       	st	Z, r24
    c18c:	80 e0       	ldi	r24, 0x00	; 0
    c18e:	92 e0       	ldi	r25, 0x02	; 2
    c190:	b7 d5       	rcall	.+2926   	; 0xcd00 <ff_memalloc>
    c192:	6c 01       	movw	r12, r24
    c194:	00 97       	sbiw	r24, 0x00	; 0
    c196:	99 f1       	breq	.+102    	; 0xc1fe <f_opendir+0xaa>
    c198:	e9 81       	ldd	r30, Y+1	; 0x01
    c19a:	fa 81       	ldd	r31, Y+2	; 0x02
    c19c:	94 87       	std	Z+12, r25	; 0x0c
    c19e:	83 87       	std	Z+11, r24	; 0x0b
    c1a0:	6b 81       	ldd	r22, Y+3	; 0x03
    c1a2:	7c 81       	ldd	r23, Y+4	; 0x04
    c1a4:	c8 01       	movw	r24, r16
    c1a6:	0e 94 bd 54 	call	0xa97a	; 0xa97a <follow_path>
    c1aa:	7c 01       	movw	r14, r24
    c1ac:	89 2b       	or	r24, r25
    c1ae:	b9 f4       	brne	.+46     	; 0xc1de <f_opendir+0x8a>
    c1b0:	f8 01       	movw	r30, r16
    c1b2:	87 a1       	ldd	r24, Z+39	; 0x27
    c1b4:	87 fd       	sbrc	r24, 7
    c1b6:	28 c0       	rjmp	.+80     	; 0xc208 <f_opendir+0xb4>
    c1b8:	84 81       	ldd	r24, Z+4	; 0x04
    c1ba:	84 ff       	sbrs	r24, 4
    c1bc:	0d c0       	rjmp	.+26     	; 0xc1d8 <f_opendir+0x84>
    c1be:	62 8d       	ldd	r22, Z+26	; 0x1a
    c1c0:	73 8d       	ldd	r23, Z+27	; 0x1b
    c1c2:	e9 81       	ldd	r30, Y+1	; 0x01
    c1c4:	fa 81       	ldd	r31, Y+2	; 0x02
    c1c6:	80 81       	ld	r24, Z
    c1c8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <ld_clust.isra.4>
    c1cc:	f8 01       	movw	r30, r16
    c1ce:	66 83       	std	Z+6, r22	; 0x06
    c1d0:	77 83       	std	Z+7, r23	; 0x07
    c1d2:	80 87       	std	Z+8, r24	; 0x08
    c1d4:	91 87       	std	Z+9, r25	; 0x09
    c1d6:	18 c0       	rjmp	.+48     	; 0xc208 <f_opendir+0xb4>
    c1d8:	95 e0       	ldi	r25, 0x05	; 5
    c1da:	e9 2e       	mov	r14, r25
    c1dc:	f1 2c       	mov	r15, r1
    c1de:	c6 01       	movw	r24, r12
    c1e0:	92 d5       	rcall	.+2852   	; 0xcd06 <ff_memfree>
    c1e2:	f4 e0       	ldi	r31, 0x04	; 4
    c1e4:	ef 16       	cp	r14, r31
    c1e6:	f1 04       	cpc	r15, r1
    c1e8:	f1 f0       	breq	.+60     	; 0xc226 <f_opendir+0xd2>
    c1ea:	e1 14       	cp	r14, r1
    c1ec:	f1 04       	cpc	r15, r1
    c1ee:	49 f0       	breq	.+18     	; 0xc202 <f_opendir+0xae>
    c1f0:	f8 01       	movw	r30, r16
    c1f2:	11 82       	std	Z+1, r1	; 0x01
    c1f4:	10 82       	st	Z, r1
    c1f6:	c7 01       	movw	r24, r14
    c1f8:	1a c0       	rjmp	.+52     	; 0xc22e <f_opendir+0xda>
    c1fa:	89 e0       	ldi	r24, 0x09	; 9
    c1fc:	03 c0       	rjmp	.+6      	; 0xc204 <f_opendir+0xb0>
    c1fe:	81 e1       	ldi	r24, 0x11	; 17
    c200:	01 c0       	rjmp	.+2      	; 0xc204 <f_opendir+0xb0>
    c202:	80 e0       	ldi	r24, 0x00	; 0
    c204:	90 e0       	ldi	r25, 0x00	; 0
    c206:	13 c0       	rjmp	.+38     	; 0xc22e <f_opendir+0xda>
    c208:	e9 81       	ldd	r30, Y+1	; 0x01
    c20a:	fa 81       	ldd	r31, Y+2	; 0x02
    c20c:	85 81       	ldd	r24, Z+5	; 0x05
    c20e:	96 81       	ldd	r25, Z+6	; 0x06
    c210:	f8 01       	movw	r30, r16
    c212:	93 83       	std	Z+3, r25	; 0x03
    c214:	82 83       	std	Z+2, r24	; 0x02
    c216:	40 e0       	ldi	r20, 0x00	; 0
    c218:	50 e0       	ldi	r21, 0x00	; 0
    c21a:	ba 01       	movw	r22, r20
    c21c:	c8 01       	movw	r24, r16
    c21e:	0e 94 77 4d 	call	0x9aee	; 0x9aee <dir_sdi>
    c222:	7c 01       	movw	r14, r24
    c224:	dc cf       	rjmp	.-72     	; 0xc1de <f_opendir+0x8a>
    c226:	85 e0       	ldi	r24, 0x05	; 5
    c228:	e8 2e       	mov	r14, r24
    c22a:	f1 2c       	mov	r15, r1
    c22c:	e1 cf       	rjmp	.-62     	; 0xc1f0 <f_opendir+0x9c>
    c22e:	24 96       	adiw	r28, 0x04	; 4
    c230:	e8 e0       	ldi	r30, 0x08	; 8
    c232:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000c236 <f_closedir>:
    c236:	a2 e0       	ldi	r26, 0x02	; 2
    c238:	b0 e0       	ldi	r27, 0x00	; 0
    c23a:	e1 e2       	ldi	r30, 0x21	; 33
    c23c:	f1 e6       	ldi	r31, 0x61	; 97
    c23e:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    c242:	8c 01       	movw	r16, r24
    c244:	be 01       	movw	r22, r28
    c246:	6f 5f       	subi	r22, 0xFF	; 255
    c248:	7f 4f       	sbci	r23, 0xFF	; 255
    c24a:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <validate>
    c24e:	00 97       	sbiw	r24, 0x00	; 0
    c250:	19 f4       	brne	.+6      	; 0xc258 <f_closedir+0x22>
    c252:	f8 01       	movw	r30, r16
    c254:	11 82       	std	Z+1, r1	; 0x01
    c256:	10 82       	st	Z, r1
    c258:	22 96       	adiw	r28, 0x02	; 2
    c25a:	e4 e0       	ldi	r30, 0x04	; 4
    c25c:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

0000c260 <f_readdir>:
    c260:	a2 e0       	ldi	r26, 0x02	; 2
    c262:	b0 e0       	ldi	r27, 0x00	; 0
    c264:	e6 e3       	ldi	r30, 0x36	; 54
    c266:	f1 e6       	ldi	r31, 0x61	; 97
    c268:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
    c26c:	7c 01       	movw	r14, r24
    c26e:	5b 01       	movw	r10, r22
    c270:	be 01       	movw	r22, r28
    c272:	6f 5f       	subi	r22, 0xFF	; 255
    c274:	7f 4f       	sbci	r23, 0xFF	; 255
    c276:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <validate>
    c27a:	00 97       	sbiw	r24, 0x00	; 0
    c27c:	89 f5       	brne	.+98     	; 0xc2e0 <f_readdir+0x80>
    c27e:	a1 14       	cp	r10, r1
    c280:	b1 04       	cpc	r11, r1
    c282:	39 f4       	brne	.+14     	; 0xc292 <f_readdir+0x32>
    c284:	40 e0       	ldi	r20, 0x00	; 0
    c286:	50 e0       	ldi	r21, 0x00	; 0
    c288:	ba 01       	movw	r22, r20
    c28a:	c7 01       	movw	r24, r14
    c28c:	0e 94 77 4d 	call	0x9aee	; 0x9aee <dir_sdi>
    c290:	27 c0       	rjmp	.+78     	; 0xc2e0 <f_readdir+0x80>
    c292:	80 e0       	ldi	r24, 0x00	; 0
    c294:	92 e0       	ldi	r25, 0x02	; 2
    c296:	34 d5       	rcall	.+2664   	; 0xcd00 <ff_memalloc>
    c298:	6c 01       	movw	r12, r24
    c29a:	00 97       	sbiw	r24, 0x00	; 0
    c29c:	f9 f0       	breq	.+62     	; 0xc2dc <f_readdir+0x7c>
    c29e:	e9 81       	ldd	r30, Y+1	; 0x01
    c2a0:	fa 81       	ldd	r31, Y+2	; 0x02
    c2a2:	94 87       	std	Z+12, r25	; 0x0c
    c2a4:	83 87       	std	Z+11, r24	; 0x0b
    c2a6:	60 e0       	ldi	r22, 0x00	; 0
    c2a8:	70 e0       	ldi	r23, 0x00	; 0
    c2aa:	c7 01       	movw	r24, r14
    c2ac:	0e 94 10 51 	call	0xa220	; 0xa220 <dir_read>
    c2b0:	8c 01       	movw	r16, r24
    c2b2:	8b 7f       	andi	r24, 0xFB	; 251
    c2b4:	89 2b       	or	r24, r25
    c2b6:	71 f4       	brne	.+28     	; 0xc2d4 <f_readdir+0x74>
    c2b8:	b5 01       	movw	r22, r10
    c2ba:	c7 01       	movw	r24, r14
    c2bc:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <get_fileinfo>
    c2c0:	60 e0       	ldi	r22, 0x00	; 0
    c2c2:	70 e0       	ldi	r23, 0x00	; 0
    c2c4:	c7 01       	movw	r24, r14
    c2c6:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <dir_next>
    c2ca:	8c 01       	movw	r16, r24
    c2cc:	04 97       	sbiw	r24, 0x04	; 4
    c2ce:	11 f4       	brne	.+4      	; 0xc2d4 <f_readdir+0x74>
    c2d0:	00 e0       	ldi	r16, 0x00	; 0
    c2d2:	10 e0       	ldi	r17, 0x00	; 0
    c2d4:	c6 01       	movw	r24, r12
    c2d6:	17 d5       	rcall	.+2606   	; 0xcd06 <ff_memfree>
    c2d8:	c8 01       	movw	r24, r16
    c2da:	02 c0       	rjmp	.+4      	; 0xc2e0 <f_readdir+0x80>
    c2dc:	81 e1       	ldi	r24, 0x11	; 17
    c2de:	90 e0       	ldi	r25, 0x00	; 0
    c2e0:	22 96       	adiw	r28, 0x02	; 2
    c2e2:	ea e0       	ldi	r30, 0x0A	; 10
    c2e4:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

0000c2e8 <f_stat>:
    c2e8:	a0 e3       	ldi	r26, 0x30	; 48
    c2ea:	b0 e0       	ldi	r27, 0x00	; 0
    c2ec:	ea e7       	ldi	r30, 0x7A	; 122
    c2ee:	f1 e6       	ldi	r31, 0x61	; 97
    c2f0:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    c2f4:	98 ab       	std	Y+48, r25	; 0x30
    c2f6:	8f a7       	std	Y+47, r24	; 0x2f
    c2f8:	6b 01       	movw	r12, r22
    c2fa:	40 e0       	ldi	r20, 0x00	; 0
    c2fc:	be 01       	movw	r22, r28
    c2fe:	6f 5f       	subi	r22, 0xFF	; 255
    c300:	7f 4f       	sbci	r23, 0xFF	; 255
    c302:	ce 01       	movw	r24, r28
    c304:	8f 96       	adiw	r24, 0x2f	; 47
    c306:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
    c30a:	00 97       	sbiw	r24, 0x00	; 0
    c30c:	39 f5       	brne	.+78     	; 0xc35c <f_stat+0x74>
    c30e:	80 e0       	ldi	r24, 0x00	; 0
    c310:	92 e0       	ldi	r25, 0x02	; 2
    c312:	f6 d4       	rcall	.+2540   	; 0xcd00 <ff_memalloc>
    c314:	7c 01       	movw	r14, r24
    c316:	00 97       	sbiw	r24, 0x00	; 0
    c318:	f9 f0       	breq	.+62     	; 0xc358 <f_stat+0x70>
    c31a:	e9 81       	ldd	r30, Y+1	; 0x01
    c31c:	fa 81       	ldd	r31, Y+2	; 0x02
    c31e:	94 87       	std	Z+12, r25	; 0x0c
    c320:	83 87       	std	Z+11, r24	; 0x0b
    c322:	6f a5       	ldd	r22, Y+47	; 0x2f
    c324:	78 a9       	ldd	r23, Y+48	; 0x30
    c326:	ce 01       	movw	r24, r28
    c328:	01 96       	adiw	r24, 0x01	; 1
    c32a:	0e 94 bd 54 	call	0xa97a	; 0xa97a <follow_path>
    c32e:	8c 01       	movw	r16, r24
    c330:	89 2b       	or	r24, r25
    c332:	71 f4       	brne	.+28     	; 0xc350 <f_stat+0x68>
    c334:	88 a5       	ldd	r24, Y+40	; 0x28
    c336:	87 fd       	sbrc	r24, 7
    c338:	09 c0       	rjmp	.+18     	; 0xc34c <f_stat+0x64>
    c33a:	c1 14       	cp	r12, r1
    c33c:	d1 04       	cpc	r13, r1
    c33e:	41 f0       	breq	.+16     	; 0xc350 <f_stat+0x68>
    c340:	b6 01       	movw	r22, r12
    c342:	ce 01       	movw	r24, r28
    c344:	01 96       	adiw	r24, 0x01	; 1
    c346:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <get_fileinfo>
    c34a:	02 c0       	rjmp	.+4      	; 0xc350 <f_stat+0x68>
    c34c:	06 e0       	ldi	r16, 0x06	; 6
    c34e:	10 e0       	ldi	r17, 0x00	; 0
    c350:	c7 01       	movw	r24, r14
    c352:	d9 d4       	rcall	.+2482   	; 0xcd06 <ff_memfree>
    c354:	c8 01       	movw	r24, r16
    c356:	02 c0       	rjmp	.+4      	; 0xc35c <f_stat+0x74>
    c358:	81 e1       	ldi	r24, 0x11	; 17
    c35a:	90 e0       	ldi	r25, 0x00	; 0
    c35c:	e0 96       	adiw	r28, 0x30	; 48
    c35e:	e8 e0       	ldi	r30, 0x08	; 8
    c360:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000c364 <f_getfree>:
    c364:	aa e0       	ldi	r26, 0x0A	; 10
    c366:	b0 e0       	ldi	r27, 0x00	; 0
    c368:	e8 eb       	ldi	r30, 0xB8	; 184
    c36a:	f1 e6       	ldi	r31, 0x61	; 97
    c36c:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    c370:	9c 83       	std	Y+4, r25	; 0x04
    c372:	8b 83       	std	Y+3, r24	; 0x03
    c374:	7e 83       	std	Y+6, r23	; 0x06
    c376:	6d 83       	std	Y+5, r22	; 0x05
    c378:	7a 01       	movw	r14, r20
    c37a:	40 e0       	ldi	r20, 0x00	; 0
    c37c:	be 01       	movw	r22, r28
    c37e:	6f 5f       	subi	r22, 0xFF	; 255
    c380:	7f 4f       	sbci	r23, 0xFF	; 255
    c382:	ce 01       	movw	r24, r28
    c384:	03 96       	adiw	r24, 0x03	; 3
    c386:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
    c38a:	8c 01       	movw	r16, r24
    c38c:	89 2b       	or	r24, r25
    c38e:	09 f0       	breq	.+2      	; 0xc392 <f_getfree+0x2e>
    c390:	c4 c0       	rjmp	.+392    	; 0xc51a <f_getfree+0x1b6>
    c392:	69 80       	ldd	r6, Y+1	; 0x01
    c394:	7a 80       	ldd	r7, Y+2	; 0x02
    c396:	d7 01       	movw	r26, r14
    c398:	6d 92       	st	X+, r6
    c39a:	7c 92       	st	X, r7
    c39c:	f3 01       	movw	r30, r6
    c39e:	81 89       	ldd	r24, Z+17	; 0x11
    c3a0:	92 89       	ldd	r25, Z+18	; 0x12
    c3a2:	a3 89       	ldd	r26, Z+19	; 0x13
    c3a4:	b4 89       	ldd	r27, Z+20	; 0x14
    c3a6:	81 8c       	ldd	r8, Z+25	; 0x19
    c3a8:	92 8c       	ldd	r9, Z+26	; 0x1a
    c3aa:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c3ac:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c3ae:	b5 01       	movw	r22, r10
    c3b0:	a4 01       	movw	r20, r8
    c3b2:	42 50       	subi	r20, 0x02	; 2
    c3b4:	51 09       	sbc	r21, r1
    c3b6:	61 09       	sbc	r22, r1
    c3b8:	71 09       	sbc	r23, r1
    c3ba:	48 17       	cp	r20, r24
    c3bc:	59 07       	cpc	r21, r25
    c3be:	6a 07       	cpc	r22, r26
    c3c0:	7b 07       	cpc	r23, r27
    c3c2:	38 f0       	brcs	.+14     	; 0xc3d2 <f_getfree+0x6e>
    c3c4:	ed 81       	ldd	r30, Y+5	; 0x05
    c3c6:	fe 81       	ldd	r31, Y+6	; 0x06
    c3c8:	80 83       	st	Z, r24
    c3ca:	91 83       	std	Z+1, r25	; 0x01
    c3cc:	a2 83       	std	Z+2, r26	; 0x02
    c3ce:	b3 83       	std	Z+3, r27	; 0x03
    c3d0:	a4 c0       	rjmp	.+328    	; 0xc51a <f_getfree+0x1b6>
    c3d2:	80 81       	ld	r24, Z
    c3d4:	81 30       	cpi	r24, 0x01	; 1
    c3d6:	a1 f5       	brne	.+104    	; 0xc440 <f_getfree+0xdc>
    c3d8:	82 e0       	ldi	r24, 0x02	; 2
    c3da:	88 2e       	mov	r8, r24
    c3dc:	91 2c       	mov	r9, r1
    c3de:	a1 2c       	mov	r10, r1
    c3e0:	b1 2c       	mov	r11, r1
    c3e2:	c1 2c       	mov	r12, r1
    c3e4:	d1 2c       	mov	r13, r1
    c3e6:	76 01       	movw	r14, r12
    c3e8:	b5 01       	movw	r22, r10
    c3ea:	a4 01       	movw	r20, r8
    c3ec:	c3 01       	movw	r24, r6
    c3ee:	0e 94 c3 4c 	call	0x9986	; 0x9986 <get_fat.isra.10>
    c3f2:	6f 3f       	cpi	r22, 0xFF	; 255
    c3f4:	bf ef       	ldi	r27, 0xFF	; 255
    c3f6:	7b 07       	cpc	r23, r27
    c3f8:	8b 07       	cpc	r24, r27
    c3fa:	9b 07       	cpc	r25, r27
    c3fc:	09 f4       	brne	.+2      	; 0xc400 <f_getfree+0x9c>
    c3fe:	76 c0       	rjmp	.+236    	; 0xc4ec <f_getfree+0x188>
    c400:	61 30       	cpi	r22, 0x01	; 1
    c402:	71 05       	cpc	r23, r1
    c404:	81 05       	cpc	r24, r1
    c406:	91 05       	cpc	r25, r1
    c408:	09 f4       	brne	.+2      	; 0xc40c <f_getfree+0xa8>
    c40a:	73 c0       	rjmp	.+230    	; 0xc4f2 <f_getfree+0x18e>
    c40c:	67 2b       	or	r22, r23
    c40e:	68 2b       	or	r22, r24
    c410:	69 2b       	or	r22, r25
    c412:	29 f4       	brne	.+10     	; 0xc41e <f_getfree+0xba>
    c414:	ef ef       	ldi	r30, 0xFF	; 255
    c416:	ce 1a       	sub	r12, r30
    c418:	de 0a       	sbc	r13, r30
    c41a:	ee 0a       	sbc	r14, r30
    c41c:	fe 0a       	sbc	r15, r30
    c41e:	ff ef       	ldi	r31, 0xFF	; 255
    c420:	8f 1a       	sub	r8, r31
    c422:	9f 0a       	sbc	r9, r31
    c424:	af 0a       	sbc	r10, r31
    c426:	bf 0a       	sbc	r11, r31
    c428:	e9 81       	ldd	r30, Y+1	; 0x01
    c42a:	fa 81       	ldd	r31, Y+2	; 0x02
    c42c:	81 8d       	ldd	r24, Z+25	; 0x19
    c42e:	92 8d       	ldd	r25, Z+26	; 0x1a
    c430:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c432:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c434:	88 16       	cp	r8, r24
    c436:	99 06       	cpc	r9, r25
    c438:	aa 06       	cpc	r10, r26
    c43a:	bb 06       	cpc	r11, r27
    c43c:	a8 f2       	brcs	.-86     	; 0xc3e8 <f_getfree+0x84>
    c43e:	5d c0       	rjmp	.+186    	; 0xc4fa <f_getfree+0x196>
    c440:	f3 01       	movw	r30, r6
    c442:	45 a0       	ldd	r4, Z+37	; 0x25
    c444:	56 a0       	ldd	r5, Z+38	; 0x26
    c446:	67 a0       	ldd	r6, Z+39	; 0x27
    c448:	70 a4       	ldd	r7, Z+40	; 0x28
    c44a:	21 2c       	mov	r2, r1
    c44c:	31 2c       	mov	r3, r1
    c44e:	c1 2c       	mov	r12, r1
    c450:	d1 2c       	mov	r13, r1
    c452:	76 01       	movw	r14, r12
    c454:	21 14       	cp	r2, r1
    c456:	31 04       	cpc	r3, r1
    c458:	b1 f4       	brne	.+44     	; 0xc486 <f_getfree+0x122>
    c45a:	d3 01       	movw	r26, r6
    c45c:	c2 01       	movw	r24, r4
    c45e:	01 96       	adiw	r24, 0x01	; 1
    c460:	a1 1d       	adc	r26, r1
    c462:	b1 1d       	adc	r27, r1
    c464:	8f 83       	std	Y+7, r24	; 0x07
    c466:	98 87       	std	Y+8, r25	; 0x08
    c468:	a9 87       	std	Y+9, r26	; 0x09
    c46a:	ba 87       	std	Y+10, r27	; 0x0a
    c46c:	b3 01       	movw	r22, r6
    c46e:	a2 01       	movw	r20, r4
    c470:	89 81       	ldd	r24, Y+1	; 0x01
    c472:	9a 81       	ldd	r25, Y+2	; 0x02
    c474:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    c478:	00 97       	sbiw	r24, 0x00	; 0
    c47a:	09 f0       	breq	.+2      	; 0xc47e <f_getfree+0x11a>
    c47c:	3d c0       	rjmp	.+122    	; 0xc4f8 <f_getfree+0x194>
    c47e:	4f 80       	ldd	r4, Y+7	; 0x07
    c480:	58 84       	ldd	r5, Y+8	; 0x08
    c482:	69 84       	ldd	r6, Y+9	; 0x09
    c484:	7a 84       	ldd	r7, Y+10	; 0x0a
    c486:	e9 81       	ldd	r30, Y+1	; 0x01
    c488:	fa 81       	ldd	r31, Y+2	; 0x02
    c48a:	80 81       	ld	r24, Z
    c48c:	82 30       	cpi	r24, 0x02	; 2
    c48e:	79 f4       	brne	.+30     	; 0xc4ae <f_getfree+0x14a>
    c490:	e2 0d       	add	r30, r2
    c492:	f3 1d       	adc	r31, r3
    c494:	85 a9       	ldd	r24, Z+53	; 0x35
    c496:	96 a9       	ldd	r25, Z+54	; 0x36
    c498:	89 2b       	or	r24, r25
    c49a:	29 f4       	brne	.+10     	; 0xc4a6 <f_getfree+0x142>
    c49c:	9f ef       	ldi	r25, 0xFF	; 255
    c49e:	c9 1a       	sub	r12, r25
    c4a0:	d9 0a       	sbc	r13, r25
    c4a2:	e9 0a       	sbc	r14, r25
    c4a4:	f9 0a       	sbc	r15, r25
    c4a6:	a2 e0       	ldi	r26, 0x02	; 2
    c4a8:	2a 0e       	add	r2, r26
    c4aa:	31 1c       	adc	r3, r1
    c4ac:	15 c0       	rjmp	.+42     	; 0xc4d8 <f_getfree+0x174>
    c4ae:	cf 01       	movw	r24, r30
    c4b0:	c5 96       	adiw	r24, 0x35	; 53
    c4b2:	82 0d       	add	r24, r2
    c4b4:	93 1d       	adc	r25, r3
    c4b6:	0e 94 18 44 	call	0x8830	; 0x8830 <ld_dword>
    c4ba:	dc 01       	movw	r26, r24
    c4bc:	cb 01       	movw	r24, r22
    c4be:	bf 70       	andi	r27, 0x0F	; 15
    c4c0:	89 2b       	or	r24, r25
    c4c2:	8a 2b       	or	r24, r26
    c4c4:	8b 2b       	or	r24, r27
    c4c6:	29 f4       	brne	.+10     	; 0xc4d2 <f_getfree+0x16e>
    c4c8:	bf ef       	ldi	r27, 0xFF	; 255
    c4ca:	cb 1a       	sub	r12, r27
    c4cc:	db 0a       	sbc	r13, r27
    c4ce:	eb 0a       	sbc	r14, r27
    c4d0:	fb 0a       	sbc	r15, r27
    c4d2:	e4 e0       	ldi	r30, 0x04	; 4
    c4d4:	2e 0e       	add	r2, r30
    c4d6:	31 1c       	adc	r3, r1
    c4d8:	f1 e0       	ldi	r31, 0x01	; 1
    c4da:	3f 22       	and	r3, r31
    c4dc:	21 e0       	ldi	r18, 0x01	; 1
    c4de:	82 1a       	sub	r8, r18
    c4e0:	91 08       	sbc	r9, r1
    c4e2:	a1 08       	sbc	r10, r1
    c4e4:	b1 08       	sbc	r11, r1
    c4e6:	09 f0       	breq	.+2      	; 0xc4ea <f_getfree+0x186>
    c4e8:	b5 cf       	rjmp	.-150    	; 0xc454 <f_getfree+0xf0>
    c4ea:	07 c0       	rjmp	.+14     	; 0xc4fa <f_getfree+0x196>
    c4ec:	01 e0       	ldi	r16, 0x01	; 1
    c4ee:	10 e0       	ldi	r17, 0x00	; 0
    c4f0:	04 c0       	rjmp	.+8      	; 0xc4fa <f_getfree+0x196>
    c4f2:	02 e0       	ldi	r16, 0x02	; 2
    c4f4:	10 e0       	ldi	r17, 0x00	; 0
    c4f6:	01 c0       	rjmp	.+2      	; 0xc4fa <f_getfree+0x196>
    c4f8:	8c 01       	movw	r16, r24
    c4fa:	ad 81       	ldd	r26, Y+5	; 0x05
    c4fc:	be 81       	ldd	r27, Y+6	; 0x06
    c4fe:	cd 92       	st	X+, r12
    c500:	dd 92       	st	X+, r13
    c502:	ed 92       	st	X+, r14
    c504:	fc 92       	st	X, r15
    c506:	13 97       	sbiw	r26, 0x03	; 3
    c508:	e9 81       	ldd	r30, Y+1	; 0x01
    c50a:	fa 81       	ldd	r31, Y+2	; 0x02
    c50c:	c1 8a       	std	Z+17, r12	; 0x11
    c50e:	d2 8a       	std	Z+18, r13	; 0x12
    c510:	e3 8a       	std	Z+19, r14	; 0x13
    c512:	f4 8a       	std	Z+20, r15	; 0x14
    c514:	84 81       	ldd	r24, Z+4	; 0x04
    c516:	81 60       	ori	r24, 0x01	; 1
    c518:	84 83       	std	Z+4, r24	; 0x04
    c51a:	c8 01       	movw	r24, r16
    c51c:	2a 96       	adiw	r28, 0x0a	; 10
    c51e:	e2 e1       	ldi	r30, 0x12	; 18
    c520:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0000c524 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c524:	a0 e6       	ldi	r26, 0x60	; 96
    c526:	b0 e0       	ldi	r27, 0x00	; 0
    c528:	e8 e9       	ldi	r30, 0x98	; 152
    c52a:	f2 e6       	ldi	r31, 0x62	; 98
    c52c:	0c 94 c9 df 	jmp	0x1bf92	; 0x1bf92 <__prologue_saves__+0xe>
    c530:	a1 96       	adiw	r28, 0x21	; 33
    c532:	9f af       	std	Y+63, r25	; 0x3f
    c534:	8e af       	std	Y+62, r24	; 0x3e
    c536:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c538:	42 e0       	ldi	r20, 0x02	; 2
    c53a:	be 01       	movw	r22, r28
    c53c:	63 5a       	subi	r22, 0xA3	; 163
    c53e:	7f 4f       	sbci	r23, 0xFF	; 255
    c540:	ce 01       	movw	r24, r28
    c542:	81 5a       	subi	r24, 0xA1	; 161
    c544:	9f 4f       	sbci	r25, 0xFF	; 255
    c546:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
	if (res == FR_OK) {
    c54a:	00 97       	sbiw	r24, 0x00	; 0
    c54c:	09 f0       	breq	.+2      	; 0xc550 <f_unlink+0x2c>
    c54e:	8c c0       	rjmp	.+280    	; 0xc668 <f_unlink+0x144>
		dj.obj.fs = fs;
    c550:	6f 96       	adiw	r28, 0x1f	; 31
    c552:	8e ad       	ldd	r24, Y+62	; 0x3e
    c554:	9f ad       	ldd	r25, Y+63	; 0x3f
    c556:	6f 97       	sbiw	r28, 0x1f	; 31
    c558:	98 ab       	std	Y+48, r25	; 0x30
    c55a:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c55c:	80 e0       	ldi	r24, 0x00	; 0
    c55e:	92 e0       	ldi	r25, 0x02	; 2
    c560:	cf d3       	rcall	.+1950   	; 0xcd00 <ff_memalloc>
    c562:	5c 01       	movw	r10, r24
    c564:	00 97       	sbiw	r24, 0x00	; 0
    c566:	09 f4       	brne	.+2      	; 0xc56a <f_unlink+0x46>
    c568:	49 c0       	rjmp	.+146    	; 0xc5fc <f_unlink+0xd8>
    c56a:	6f 96       	adiw	r28, 0x1f	; 31
    c56c:	ee ad       	ldd	r30, Y+62	; 0x3e
    c56e:	ff ad       	ldd	r31, Y+63	; 0x3f
    c570:	6f 97       	sbiw	r28, 0x1f	; 31
    c572:	94 87       	std	Z+12, r25	; 0x0c
    c574:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c576:	a1 96       	adiw	r28, 0x21	; 33
    c578:	6e ad       	ldd	r22, Y+62	; 0x3e
    c57a:	7f ad       	ldd	r23, Y+63	; 0x3f
    c57c:	a1 97       	sbiw	r28, 0x21	; 33
    c57e:	ce 01       	movw	r24, r28
    c580:	8f 96       	adiw	r24, 0x2f	; 47
    c582:	0e 94 bd 54 	call	0xa97a	; 0xa97a <follow_path>
    c586:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c588:	89 2b       	or	r24, r25
    c58a:	a1 f5       	brne	.+104    	; 0xc5f4 <f_unlink+0xd0>
    c58c:	67 96       	adiw	r28, 0x17	; 23
    c58e:	8f ad       	ldd	r24, Y+63	; 0x3f
    c590:	67 97       	sbiw	r28, 0x17	; 23
    c592:	85 fd       	sbrc	r24, 5
    c594:	36 c0       	rjmp	.+108    	; 0xc602 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c596:	87 fd       	sbrc	r24, 7
    c598:	34 c0       	rjmp	.+104    	; 0xc602 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c59a:	9b a8       	ldd	r9, Y+51	; 0x33
    c59c:	90 fc       	sbrc	r9, 0
    c59e:	40 c0       	rjmp	.+128    	; 0xc620 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c5a0:	6f 96       	adiw	r28, 0x1f	; 31
    c5a2:	0e ad       	ldd	r16, Y+62	; 0x3e
    c5a4:	1f ad       	ldd	r17, Y+63	; 0x3f
    c5a6:	6f 97       	sbiw	r28, 0x1f	; 31
    c5a8:	2b 96       	adiw	r28, 0x0b	; 11
    c5aa:	6e ad       	ldd	r22, Y+62	; 0x3e
    c5ac:	7f ad       	ldd	r23, Y+63	; 0x3f
    c5ae:	2b 97       	sbiw	r28, 0x0b	; 11
    c5b0:	f8 01       	movw	r30, r16
    c5b2:	80 81       	ld	r24, Z
    c5b4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <ld_clust.isra.4>
    c5b8:	6b 01       	movw	r12, r22
    c5ba:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c5bc:	94 fe       	sbrs	r9, 4
    c5be:	33 c0       	rjmp	.+102    	; 0xc626 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c5c0:	f8 01       	movw	r30, r16
    c5c2:	85 89       	ldd	r24, Z+21	; 0x15
    c5c4:	96 89       	ldd	r25, Z+22	; 0x16
    c5c6:	a7 89       	ldd	r26, Z+23	; 0x17
    c5c8:	b0 8d       	ldd	r27, Z+24	; 0x18
    c5ca:	c8 16       	cp	r12, r24
    c5cc:	d9 06       	cpc	r13, r25
    c5ce:	ea 06       	cpc	r14, r26
    c5d0:	fb 06       	cpc	r15, r27
    c5d2:	31 f1       	breq	.+76     	; 0xc620 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c5d4:	1a 83       	std	Y+2, r17	; 0x02
    c5d6:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c5d8:	cf 82       	std	Y+7, r12	; 0x07
    c5da:	d8 86       	std	Y+8, r13	; 0x08
    c5dc:	e9 86       	std	Y+9, r14	; 0x09
    c5de:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c5e0:	40 e0       	ldi	r20, 0x00	; 0
    c5e2:	50 e0       	ldi	r21, 0x00	; 0
    c5e4:	ba 01       	movw	r22, r20
    c5e6:	ce 01       	movw	r24, r28
    c5e8:	01 96       	adiw	r24, 0x01	; 1
    c5ea:	0e 94 77 4d 	call	0x9aee	; 0x9aee <dir_sdi>
    c5ee:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c5f0:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c5f2:	51 f0       	breq	.+20     	; 0xc608 <f_unlink+0xe4>
    c5f4:	c5 01       	movw	r24, r10
    c5f6:	87 d3       	rcall	.+1806   	; 0xcd06 <ff_memfree>
    c5f8:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c5fa:	36 c0       	rjmp	.+108    	; 0xc668 <f_unlink+0x144>
    c5fc:	81 e1       	ldi	r24, 0x11	; 17
    c5fe:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c600:	33 c0       	rjmp	.+102    	; 0xc668 <f_unlink+0x144>
    c602:	06 e0       	ldi	r16, 0x06	; 6
    c604:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c606:	f6 cf       	rjmp	.-20     	; 0xc5f4 <f_unlink+0xd0>
    c608:	60 e0       	ldi	r22, 0x00	; 0
    c60a:	70 e0       	ldi	r23, 0x00	; 0
    c60c:	ce 01       	movw	r24, r28
    c60e:	01 96       	adiw	r24, 0x01	; 1
    c610:	0e 94 10 51 	call	0xa220	; 0xa220 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c614:	8c 01       	movw	r16, r24
    c616:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c618:	19 f0       	breq	.+6      	; 0xc620 <f_unlink+0xfc>
    c61a:	04 97       	sbiw	r24, 0x04	; 4
    c61c:	21 f0       	breq	.+8      	; 0xc626 <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c61e:	ea cf       	rjmp	.-44     	; 0xc5f4 <f_unlink+0xd0>
    c620:	07 e0       	ldi	r16, 0x07	; 7
    c622:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c624:	e7 cf       	rjmp	.-50     	; 0xc5f4 <f_unlink+0xd0>
    c626:	ce 01       	movw	r24, r28
    c628:	8f 96       	adiw	r24, 0x2f	; 47
    c62a:	0e 94 d9 51 	call	0xa3b2	; 0xa3b2 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c62e:	8c 01       	movw	r16, r24
    c630:	89 2b       	or	r24, r25
    c632:	01 f7       	brne	.-64     	; 0xc5f4 <f_unlink+0xd0>
    c634:	c1 14       	cp	r12, r1
    c636:	d1 04       	cpc	r13, r1
    c638:	e1 04       	cpc	r14, r1
    c63a:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c63c:	41 f4       	brne	.+16     	; 0xc64e <f_unlink+0x12a>
    c63e:	6f 96       	adiw	r28, 0x1f	; 31
    c640:	8e ad       	ldd	r24, Y+62	; 0x3e
    c642:	9f ad       	ldd	r25, Y+63	; 0x3f
    c644:	6f 97       	sbiw	r28, 0x1f	; 31
    c646:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sync_fs>
    c64a:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c64c:	d3 cf       	rjmp	.-90     	; 0xc5f4 <f_unlink+0xd0>
    c64e:	00 e0       	ldi	r16, 0x00	; 0
    c650:	10 e0       	ldi	r17, 0x00	; 0
    c652:	98 01       	movw	r18, r16
    c654:	b7 01       	movw	r22, r14
    c656:	a6 01       	movw	r20, r12
    c658:	ce 01       	movw	r24, r28
    c65a:	8f 96       	adiw	r24, 0x2f	; 47
    c65c:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c660:	8c 01       	movw	r16, r24
    c662:	89 2b       	or	r24, r25
    c664:	39 f6       	brne	.-114    	; 0xc5f4 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c666:	eb cf       	rjmp	.-42     	; 0xc63e <f_unlink+0x11a>
    c668:	c0 5a       	subi	r28, 0xA0	; 160
    c66a:	df 4f       	sbci	r29, 0xFF	; 255
    c66c:	eb e0       	ldi	r30, 0x0B	; 11
    c66e:	0c 94 e5 df 	jmp	0x1bfca	; 0x1bfca <__epilogue_restores__+0xe>

0000c672 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c672:	a0 e4       	ldi	r26, 0x40	; 64
    c674:	b0 e0       	ldi	r27, 0x00	; 0
    c676:	ef e3       	ldi	r30, 0x3F	; 63
    c678:	f3 e6       	ldi	r31, 0x63	; 99
    c67a:	0c 94 c4 df 	jmp	0x1bf88	; 0x1bf88 <__prologue_saves__+0x4>
    c67e:	21 96       	adiw	r28, 0x01	; 1
    c680:	9f af       	std	Y+63, r25	; 0x3f
    c682:	8e af       	std	Y+62, r24	; 0x3e
    c684:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c686:	42 e0       	ldi	r20, 0x02	; 2
    c688:	be 01       	movw	r22, r28
    c68a:	63 5c       	subi	r22, 0xC3	; 195
    c68c:	7f 4f       	sbci	r23, 0xFF	; 255
    c68e:	ce 01       	movw	r24, r28
    c690:	cf 96       	adiw	r24, 0x3f	; 63
    c692:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
	if (res == FR_OK) {
    c696:	00 97       	sbiw	r24, 0x00	; 0
    c698:	09 f0       	breq	.+2      	; 0xc69c <f_mkdir+0x2a>
    c69a:	d6 c0       	rjmp	.+428    	; 0xc848 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c69c:	8d ad       	ldd	r24, Y+61	; 0x3d
    c69e:	9e ad       	ldd	r25, Y+62	; 0x3e
    c6a0:	9a 83       	std	Y+2, r25	; 0x02
    c6a2:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c6a4:	80 e0       	ldi	r24, 0x00	; 0
    c6a6:	92 e0       	ldi	r25, 0x02	; 2
    c6a8:	2b d3       	rcall	.+1622   	; 0xcd00 <ff_memalloc>
    c6aa:	6c 01       	movw	r12, r24
    c6ac:	00 97       	sbiw	r24, 0x00	; 0
    c6ae:	e9 f0       	breq	.+58     	; 0xc6ea <f_mkdir+0x78>
    c6b0:	ed ad       	ldd	r30, Y+61	; 0x3d
    c6b2:	fe ad       	ldd	r31, Y+62	; 0x3e
    c6b4:	94 87       	std	Z+12, r25	; 0x0c
    c6b6:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    c6b8:	21 96       	adiw	r28, 0x01	; 1
    c6ba:	6e ad       	ldd	r22, Y+62	; 0x3e
    c6bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    c6be:	21 97       	sbiw	r28, 0x01	; 1
    c6c0:	ce 01       	movw	r24, r28
    c6c2:	01 96       	adiw	r24, 0x01	; 1
    c6c4:	0e 94 bd 54 	call	0xa97a	; 0xa97a <follow_path>
    c6c8:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c6ca:	89 2b       	or	r24, r25
    c6cc:	89 f0       	breq	.+34     	; 0xc6f0 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    c6ce:	84 e0       	ldi	r24, 0x04	; 4
    c6d0:	e8 16       	cp	r14, r24
    c6d2:	f1 04       	cpc	r15, r1
    c6d4:	31 f4       	brne	.+12     	; 0xc6e2 <f_mkdir+0x70>
    c6d6:	88 a5       	ldd	r24, Y+40	; 0x28
    c6d8:	85 ff       	sbrs	r24, 5
    c6da:	0e c0       	rjmp	.+28     	; 0xc6f8 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    c6dc:	26 e0       	ldi	r18, 0x06	; 6
    c6de:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    c6e0:	f1 2c       	mov	r15, r1
    c6e2:	c6 01       	movw	r24, r12
    c6e4:	10 d3       	rcall	.+1568   	; 0xcd06 <ff_memfree>
    c6e6:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c6e8:	af c0       	rjmp	.+350    	; 0xc848 <f_mkdir+0x1d6>
    c6ea:	81 e1       	ldi	r24, 0x11	; 17
    c6ec:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c6ee:	ac c0       	rjmp	.+344    	; 0xc848 <f_mkdir+0x1d6>
    c6f0:	38 e0       	ldi	r19, 0x08	; 8
    c6f2:	e3 2e       	mov	r14, r19
    c6f4:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    c6f6:	f5 cf       	rjmp	.-22     	; 0xc6e2 <f_mkdir+0x70>
    c6f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    c6fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    c6fc:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    c6fe:	8f a7       	std	Y+47, r24	; 0x2f
    c700:	40 e0       	ldi	r20, 0x00	; 0
    c702:	50 e0       	ldi	r21, 0x00	; 0
    c704:	ba 01       	movw	r22, r20
    c706:	ce 01       	movw	r24, r28
    c708:	8f 96       	adiw	r24, 0x2f	; 47
    c70a:	0e 94 38 4e 	call	0x9c70	; 0x9c70 <create_chain>
    c70e:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c710:	5c 01       	movw	r10, r24
    c712:	67 2b       	or	r22, r23
    c714:	68 2b       	or	r22, r24
    c716:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c718:	09 f1       	breq	.+66     	; 0xc75c <f_mkdir+0xea>
    c71a:	e1 e0       	ldi	r30, 0x01	; 1
    c71c:	8e 16       	cp	r8, r30
    c71e:	91 04       	cpc	r9, r1
    c720:	a1 04       	cpc	r10, r1
    c722:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    c724:	61 f0       	breq	.+24     	; 0xc73e <f_mkdir+0xcc>
    c726:	ff ef       	ldi	r31, 0xFF	; 255
    c728:	8f 16       	cp	r8, r31
    c72a:	9f 06       	cpc	r9, r31
    c72c:	af 06       	cpc	r10, r31
    c72e:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    c730:	d9 f4       	brne	.+54     	; 0xc768 <f_mkdir+0xf6>
    c732:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <get_fattime>
    c736:	ee 24       	eor	r14, r14
    c738:	e3 94       	inc	r14
    c73a:	f1 2c       	mov	r15, r1
    c73c:	05 c0       	rjmp	.+10     	; 0xc748 <f_mkdir+0xd6>
    c73e:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c742:	92 e0       	ldi	r25, 0x02	; 2
    c744:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    c746:	f1 2c       	mov	r15, r1
    c748:	00 e0       	ldi	r16, 0x00	; 0
    c74a:	10 e0       	ldi	r17, 0x00	; 0
    c74c:	98 01       	movw	r18, r16
    c74e:	b5 01       	movw	r22, r10
    c750:	a4 01       	movw	r20, r8
    c752:	ce 01       	movw	r24, r28
    c754:	8f 96       	adiw	r24, 0x2f	; 47
    c756:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c75a:	c3 cf       	rjmp	.-122    	; 0xc6e2 <f_mkdir+0x70>
    c75c:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c760:	87 e0       	ldi	r24, 0x07	; 7
    c762:	e8 2e       	mov	r14, r24
    c764:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c766:	f0 cf       	rjmp	.-32     	; 0xc748 <f_mkdir+0xd6>
    c768:	0e 94 f1 6d 	call	0xdbe2	; 0xdbe2 <get_fattime>
    c76c:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    c76e:	3c 01       	movw	r6, r24
    c770:	b5 01       	movw	r22, r10
    c772:	a4 01       	movw	r20, r8
    c774:	8d ad       	ldd	r24, Y+61	; 0x3d
    c776:	9e ad       	ldd	r25, Y+62	; 0x3e
    c778:	0e 94 4b 48 	call	0x9096	; 0x9096 <dir_clear>
				if (res == FR_OK) {
    c77c:	7c 01       	movw	r14, r24
    c77e:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    c780:	19 f7       	brne	.-58     	; 0xc748 <f_mkdir+0xd6>
    c782:	8d ad       	ldd	r24, Y+61	; 0x3d
    c784:	9e ad       	ldd	r25, Y+62	; 0x3e
    c786:	4b e0       	ldi	r20, 0x0B	; 11
    c788:	50 e0       	ldi	r21, 0x00	; 0
    c78a:	60 e2       	ldi	r22, 0x20	; 32
    c78c:	70 e0       	ldi	r23, 0x00	; 0
    c78e:	c5 96       	adiw	r24, 0x35	; 53
    c790:	0e 94 33 44 	call	0x8866	; 0x8866 <mem_set>
						fs->win[DIR_Name] = '.';
    c794:	8d ad       	ldd	r24, Y+61	; 0x3d
    c796:	9e ad       	ldd	r25, Y+62	; 0x3e
    c798:	1e e2       	ldi	r17, 0x2E	; 46
    c79a:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    c79c:	15 ab       	std	Z+53, r17	; 0x35
    c79e:	e0 5c       	subi	r30, 0xC0	; 192
    c7a0:	ff 4f       	sbci	r31, 0xFF	; 255
    c7a2:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    c7a4:	20 83       	st	Z, r18
    c7a6:	b3 01       	movw	r22, r6
    c7a8:	a2 01       	movw	r20, r4
    c7aa:	85 5b       	subi	r24, 0xB5	; 181
    c7ac:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ae:	0e 94 2d 44 	call	0x885a	; 0x885a <st_dword>
						st_clust(fs, fs->win, dcl);
    c7b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    c7b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    c7b6:	bc 01       	movw	r22, r24
    c7b8:	6b 5c       	subi	r22, 0xCB	; 203
    c7ba:	7f 4f       	sbci	r23, 0xFF	; 255
    c7bc:	a5 01       	movw	r20, r10
    c7be:	94 01       	movw	r18, r8
    c7c0:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    c7c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    c7c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    c7c8:	bc 01       	movw	r22, r24
    c7ca:	6b 5c       	subi	r22, 0xCB	; 203
    c7cc:	7f 4f       	sbci	r23, 0xFF	; 255
    c7ce:	40 e2       	ldi	r20, 0x20	; 32
    c7d0:	50 e0       	ldi	r21, 0x00	; 0
    c7d2:	8b 5a       	subi	r24, 0xAB	; 171
    c7d4:	9f 4f       	sbci	r25, 0xFF	; 255
    c7d6:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    c7da:	8d ad       	ldd	r24, Y+61	; 0x3d
    c7dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    c7de:	fc 01       	movw	r30, r24
    c7e0:	ea 5a       	subi	r30, 0xAA	; 170
    c7e2:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    c7e4:	10 83       	st	Z, r17
    c7e6:	2f 81       	ldd	r18, Y+7	; 0x07
    c7e8:	38 85       	ldd	r19, Y+8	; 0x08
    c7ea:	49 85       	ldd	r20, Y+9	; 0x09
    c7ec:	5a 85       	ldd	r21, Y+10	; 0x0a
    c7ee:	bc 01       	movw	r22, r24
    c7f0:	6b 5a       	subi	r22, 0xAB	; 171
    c7f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c7f4:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <st_clust.isra.5>
						fs->wflag = 1;
    c7f8:	ed ad       	ldd	r30, Y+61	; 0x3d
    c7fa:	fe ad       	ldd	r31, Y+62	; 0x3e
    c7fc:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    c7fe:	83 83       	std	Z+3, r24	; 0x03
    c800:	ce 01       	movw	r24, r28
    c802:	01 96       	adiw	r24, 0x01	; 1
    c804:	0e 94 2f 53 	call	0xa65e	; 0xa65e <dir_register>
				}
			}
			if (res == FR_OK) {
    c808:	7c 01       	movw	r14, r24
    c80a:	89 2b       	or	r24, r25
    c80c:	09 f0       	breq	.+2      	; 0xc810 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    c80e:	9c cf       	rjmp	.-200    	; 0xc748 <f_mkdir+0xd6>
    c810:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c812:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c814:	b3 01       	movw	r22, r6
    c816:	a2 01       	movw	r20, r4
    c818:	46 96       	adiw	r24, 0x16	; 22
    c81a:	0e 94 2d 44 	call	0x885a	; 0x885a <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    c81e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c820:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c822:	a5 01       	movw	r20, r10
    c824:	94 01       	movw	r18, r8
    c826:	8d ad       	ldd	r24, Y+61	; 0x3d
    c828:	9e ad       	ldd	r25, Y+62	; 0x3e
    c82a:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    c82e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    c830:	fc 8d       	ldd	r31, Y+28	; 0x1c
    c832:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    c834:	83 87       	std	Z+11, r24	; 0x0b
    c836:	8d ad       	ldd	r24, Y+61	; 0x3d
    c838:	9e ad       	ldd	r25, Y+62	; 0x3e
    c83a:	21 e0       	ldi	r18, 0x01	; 1
    c83c:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    c83e:	23 83       	std	Z+3, r18	; 0x03
    c840:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sync_fs>
    c844:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c846:	4d cf       	rjmp	.-358    	; 0xc6e2 <f_mkdir+0x70>
    c848:	c0 5c       	subi	r28, 0xC0	; 192
    c84a:	df 4f       	sbci	r29, 0xFF	; 255
    c84c:	e0 e1       	ldi	r30, 0x10	; 16
    c84e:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__epilogue_restores__+0x4>

0000c852 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    c852:	a2 e8       	ldi	r26, 0x82	; 130
    c854:	b0 e0       	ldi	r27, 0x00	; 0
    c856:	ef e2       	ldi	r30, 0x2F	; 47
    c858:	f4 e6       	ldi	r31, 0x64	; 100
    c85a:	0c 94 cb df 	jmp	0x1bf96	; 0x1bf96 <__prologue_saves__+0x12>
    c85e:	c1 58       	subi	r28, 0x81	; 129
    c860:	df 4f       	sbci	r29, 0xFF	; 255
    c862:	99 83       	std	Y+1, r25	; 0x01
    c864:	88 83       	st	Y, r24
    c866:	cf 57       	subi	r28, 0x7F	; 127
    c868:	d0 40       	sbci	r29, 0x00	; 0
    c86a:	cf 57       	subi	r28, 0x7F	; 127
    c86c:	df 4f       	sbci	r29, 0xFF	; 255
    c86e:	79 83       	std	Y+1, r23	; 0x01
    c870:	68 83       	st	Y, r22
    c872:	c1 58       	subi	r28, 0x81	; 129
    c874:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    c876:	ce 01       	movw	r24, r28
    c878:	8f 57       	subi	r24, 0x7F	; 127
    c87a:	9f 4f       	sbci	r25, 0xFF	; 255
    c87c:	0e 94 44 45 	call	0x8a88	; 0x8a88 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    c880:	42 e0       	ldi	r20, 0x02	; 2
    c882:	be 01       	movw	r22, r28
    c884:	63 58       	subi	r22, 0x83	; 131
    c886:	7f 4f       	sbci	r23, 0xFF	; 255
    c888:	ce 01       	movw	r24, r28
    c88a:	81 58       	subi	r24, 0x81	; 129
    c88c:	9f 4f       	sbci	r25, 0xFF	; 255
    c88e:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
	if (res == FR_OK) {
    c892:	00 97       	sbiw	r24, 0x00	; 0
    c894:	09 f0       	breq	.+2      	; 0xc898 <f_rename+0x46>
    c896:	ed c0       	rjmp	.+474    	; 0xca72 <f_rename+0x220>
		djo.obj.fs = fs;
    c898:	ef 96       	adiw	r28, 0x3f	; 63
    c89a:	8e ad       	ldd	r24, Y+62	; 0x3e
    c89c:	9f ad       	ldd	r25, Y+63	; 0x3f
    c89e:	ef 97       	sbiw	r28, 0x3f	; 63
    c8a0:	98 ab       	std	Y+48, r25	; 0x30
    c8a2:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c8a4:	80 e0       	ldi	r24, 0x00	; 0
    c8a6:	92 e0       	ldi	r25, 0x02	; 2
    c8a8:	2b d2       	rcall	.+1110   	; 0xcd00 <ff_memalloc>
    c8aa:	6c 01       	movw	r12, r24
    c8ac:	00 97       	sbiw	r24, 0x00	; 0
    c8ae:	f1 f0       	breq	.+60     	; 0xc8ec <f_rename+0x9a>
    c8b0:	ef 96       	adiw	r28, 0x3f	; 63
    c8b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    c8b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    c8b6:	ef 97       	sbiw	r28, 0x3f	; 63
    c8b8:	94 87       	std	Z+12, r25	; 0x0c
    c8ba:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    c8bc:	c1 58       	subi	r28, 0x81	; 129
    c8be:	df 4f       	sbci	r29, 0xFF	; 255
    c8c0:	68 81       	ld	r22, Y
    c8c2:	79 81       	ldd	r23, Y+1	; 0x01
    c8c4:	cf 57       	subi	r28, 0x7F	; 127
    c8c6:	d0 40       	sbci	r29, 0x00	; 0
    c8c8:	ce 01       	movw	r24, r28
    c8ca:	8f 96       	adiw	r24, 0x2f	; 47
    c8cc:	0e 94 bd 54 	call	0xa97a	; 0xa97a <follow_path>
    c8d0:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    c8d2:	89 2b       	or	r24, r25
    c8d4:	39 f4       	brne	.+14     	; 0xc8e4 <f_rename+0x92>
    c8d6:	67 96       	adiw	r28, 0x17	; 23
    c8d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    c8da:	67 97       	sbiw	r28, 0x17	; 23
    c8dc:	80 7a       	andi	r24, 0xA0	; 160
    c8de:	49 f0       	breq	.+18     	; 0xc8f2 <f_rename+0xa0>
    c8e0:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    c8e2:	10 e0       	ldi	r17, 0x00	; 0
    c8e4:	c6 01       	movw	r24, r12
    c8e6:	0f d2       	rcall	.+1054   	; 0xcd06 <ff_memfree>
    c8e8:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    c8ea:	c3 c0       	rjmp	.+390    	; 0xca72 <f_rename+0x220>
    c8ec:	81 e1       	ldi	r24, 0x11	; 17
    c8ee:	90 e0       	ldi	r25, 0x00	; 0
    c8f0:	c0 c0       	rjmp	.+384    	; 0xca72 <f_rename+0x220>
    c8f2:	2b 96       	adiw	r28, 0x0b	; 11
    c8f4:	6e ad       	ldd	r22, Y+62	; 0x3e
    c8f6:	7f ad       	ldd	r23, Y+63	; 0x3f
    c8f8:	2b 97       	sbiw	r28, 0x0b	; 11
    c8fa:	40 e2       	ldi	r20, 0x20	; 32
    c8fc:	50 e0       	ldi	r21, 0x00	; 0
    c8fe:	ce 01       	movw	r24, r28
    c900:	83 5a       	subi	r24, 0xA3	; 163
    c902:	9f 4f       	sbci	r25, 0xFF	; 255
    c904:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
    c908:	4e e2       	ldi	r20, 0x2E	; 46
    c90a:	50 e0       	ldi	r21, 0x00	; 0
    c90c:	be 01       	movw	r22, r28
    c90e:	61 5d       	subi	r22, 0xD1	; 209
    c910:	7f 4f       	sbci	r23, 0xFF	; 255
    c912:	ce 01       	movw	r24, r28
    c914:	01 96       	adiw	r24, 0x01	; 1
    c916:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    c91a:	cf 57       	subi	r28, 0x7F	; 127
    c91c:	df 4f       	sbci	r29, 0xFF	; 255
    c91e:	68 81       	ld	r22, Y
    c920:	79 81       	ldd	r23, Y+1	; 0x01
    c922:	c1 58       	subi	r28, 0x81	; 129
    c924:	d0 40       	sbci	r29, 0x00	; 0
    c926:	ce 01       	movw	r24, r28
    c928:	01 96       	adiw	r24, 0x01	; 1
    c92a:	0e 94 bd 54 	call	0xa97a	; 0xa97a <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    c92e:	8c 01       	movw	r16, r24
    c930:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    c932:	f9 f4       	brne	.+62     	; 0xc972 <f_rename+0x120>
    c934:	4f 81       	ldd	r20, Y+7	; 0x07
    c936:	58 85       	ldd	r21, Y+8	; 0x08
    c938:	69 85       	ldd	r22, Y+9	; 0x09
    c93a:	7a 85       	ldd	r23, Y+10	; 0x0a
    c93c:	8d a9       	ldd	r24, Y+53	; 0x35
    c93e:	9e a9       	ldd	r25, Y+54	; 0x36
    c940:	af a9       	ldd	r26, Y+55	; 0x37
    c942:	b8 ad       	ldd	r27, Y+56	; 0x38
    c944:	48 17       	cp	r20, r24
    c946:	59 07       	cpc	r21, r25
    c948:	6a 07       	cpc	r22, r26
    c94a:	7b 07       	cpc	r23, r27
    c94c:	09 f0       	breq	.+2      	; 0xc950 <f_rename+0xfe>
    c94e:	8b c0       	rjmp	.+278    	; 0xca66 <f_rename+0x214>
    c950:	4f 85       	ldd	r20, Y+15	; 0x0f
    c952:	58 89       	ldd	r21, Y+16	; 0x10
    c954:	69 89       	ldd	r22, Y+17	; 0x11
    c956:	7a 89       	ldd	r23, Y+18	; 0x12
    c958:	21 96       	adiw	r28, 0x01	; 1
    c95a:	8c ad       	ldd	r24, Y+60	; 0x3c
    c95c:	9d ad       	ldd	r25, Y+61	; 0x3d
    c95e:	ae ad       	ldd	r26, Y+62	; 0x3e
    c960:	bf ad       	ldd	r27, Y+63	; 0x3f
    c962:	21 97       	sbiw	r28, 0x01	; 1
    c964:	48 17       	cp	r20, r24
    c966:	59 07       	cpc	r21, r25
    c968:	6a 07       	cpc	r22, r26
    c96a:	7b 07       	cpc	r23, r27
    c96c:	09 f0       	breq	.+2      	; 0xc970 <f_rename+0x11e>
    c96e:	7b c0       	rjmp	.+246    	; 0xca66 <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    c970:	04 c0       	rjmp	.+8      	; 0xc97a <f_rename+0x128>
    c972:	04 30       	cpi	r16, 0x04	; 4
    c974:	11 05       	cpc	r17, r1
    c976:	09 f0       	breq	.+2      	; 0xc97a <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    c978:	b5 cf       	rjmp	.-150    	; 0xc8e4 <f_rename+0x92>
    c97a:	ce 01       	movw	r24, r28
    c97c:	01 96       	adiw	r24, 0x01	; 1
    c97e:	0e 94 2f 53 	call	0xa65e	; 0xa65e <dir_register>
					if (res == FR_OK) {
    c982:	8c 01       	movw	r16, r24
    c984:	89 2b       	or	r24, r25
    c986:	09 f0       	breq	.+2      	; 0xc98a <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    c988:	ad cf       	rjmp	.-166    	; 0xc8e4 <f_rename+0x92>
    c98a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    c98c:	1c 8d       	ldd	r17, Y+28	; 0x1c
    c98e:	6d e5       	ldi	r22, 0x5D	; 93
    c990:	70 e0       	ldi	r23, 0x00	; 0
    c992:	6c 0f       	add	r22, r28
    c994:	7d 1f       	adc	r23, r29
    c996:	63 5f       	subi	r22, 0xF3	; 243
    c998:	7f 4f       	sbci	r23, 0xFF	; 255
    c99a:	43 e1       	ldi	r20, 0x13	; 19
    c99c:	50 e0       	ldi	r21, 0x00	; 0
    c99e:	c8 01       	movw	r24, r16
    c9a0:	0d 96       	adiw	r24, 0x0d	; 13
    c9a2:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    c9a6:	a9 96       	adiw	r28, 0x29	; 41
    c9a8:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    c9aa:	a9 97       	sbiw	r28, 0x29	; 41
    c9ac:	84 ff       	sbrs	r24, 4
    c9ae:	80 62       	ori	r24, 0x20	; 32
    c9b0:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    c9b2:	83 87       	std	Z+11, r24	; 0x0b
    c9b4:	ef 96       	adiw	r28, 0x3f	; 63
    c9b6:	ee ac       	ldd	r14, Y+62	; 0x3e
    c9b8:	ff ac       	ldd	r15, Y+63	; 0x3f
    c9ba:	ef 97       	sbiw	r28, 0x3f	; 63
    c9bc:	bb 24       	eor	r11, r11
    c9be:	b3 94       	inc	r11
    c9c0:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    c9c2:	b3 82       	std	Z+3, r11	; 0x03
    c9c4:	f8 01       	movw	r30, r16
    c9c6:	83 85       	ldd	r24, Z+11	; 0x0b
    c9c8:	84 ff       	sbrs	r24, 4
    c9ca:	3d c0       	rjmp	.+122    	; 0xca46 <f_rename+0x1f4>
    c9cc:	4d a9       	ldd	r20, Y+53	; 0x35
    c9ce:	5e a9       	ldd	r21, Y+54	; 0x36
    c9d0:	6f a9       	ldd	r22, Y+55	; 0x37
    c9d2:	78 ad       	ldd	r23, Y+56	; 0x38
    c9d4:	8f 81       	ldd	r24, Y+7	; 0x07
    c9d6:	98 85       	ldd	r25, Y+8	; 0x08
    c9d8:	a9 85       	ldd	r26, Y+9	; 0x09
    c9da:	ba 85       	ldd	r27, Y+10	; 0x0a
    c9dc:	48 17       	cp	r20, r24
    c9de:	59 07       	cpc	r21, r25
    c9e0:	6a 07       	cpc	r22, r26
    c9e2:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    c9e4:	81 f1       	breq	.+96     	; 0xca46 <f_rename+0x1f4>
    c9e6:	b8 01       	movw	r22, r16
    c9e8:	f7 01       	movw	r30, r14
    c9ea:	80 81       	ld	r24, Z
    c9ec:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <ld_clust.isra.4>
    c9f0:	ab 01       	movw	r20, r22
    c9f2:	bc 01       	movw	r22, r24
    c9f4:	c7 01       	movw	r24, r14
    c9f6:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <clst2sect>
    c9fa:	ab 01       	movw	r20, r22
							if (sect == 0) {
    c9fc:	bc 01       	movw	r22, r24
    c9fe:	41 15       	cp	r20, r1
    ca00:	51 05       	cpc	r21, r1
    ca02:	61 05       	cpc	r22, r1
    ca04:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    ca06:	91 f1       	breq	.+100    	; 0xca6c <f_rename+0x21a>
    ca08:	c7 01       	movw	r24, r14
    ca0a:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    ca0e:	8c 01       	movw	r16, r24
    ca10:	89 2b       	or	r24, r25
    ca12:	09 f0       	breq	.+2      	; 0xca16 <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    ca14:	67 cf       	rjmp	.-306    	; 0xc8e4 <f_rename+0x92>
    ca16:	ef 96       	adiw	r28, 0x3f	; 63
    ca18:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca1a:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    ca1c:	ef 97       	sbiw	r28, 0x3f	; 63
    ca1e:	fc 01       	movw	r30, r24
    ca20:	ea 5a       	subi	r30, 0xAA	; 170
    ca22:	ff 4f       	sbci	r31, 0xFF	; 255
    ca24:	20 81       	ld	r18, Z
    ca26:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    ca28:	71 f4       	brne	.+28     	; 0xca46 <f_rename+0x1f4>
    ca2a:	2f 81       	ldd	r18, Y+7	; 0x07
    ca2c:	38 85       	ldd	r19, Y+8	; 0x08
    ca2e:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    ca30:	5a 85       	ldd	r21, Y+10	; 0x0a
    ca32:	bc 01       	movw	r22, r24
    ca34:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    ca36:	7f 4f       	sbci	r23, 0xFF	; 255
    ca38:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <st_clust.isra.5>
									fs->wflag = 1;
    ca3c:	ef 96       	adiw	r28, 0x3f	; 63
    ca3e:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca40:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca42:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    ca44:	b3 82       	std	Z+3, r11	; 0x03
    ca46:	ce 01       	movw	r24, r28
    ca48:	8f 96       	adiw	r24, 0x2f	; 47
    ca4a:	0e 94 d9 51 	call	0xa3b2	; 0xa3b2 <dir_remove>
				if (res == FR_OK) {
    ca4e:	8c 01       	movw	r16, r24
    ca50:	89 2b       	or	r24, r25
    ca52:	09 f0       	breq	.+2      	; 0xca56 <f_rename+0x204>
					res = sync_fs(fs);
    ca54:	47 cf       	rjmp	.-370    	; 0xc8e4 <f_rename+0x92>
    ca56:	ef 96       	adiw	r28, 0x3f	; 63
    ca58:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca5c:	ef 97       	sbiw	r28, 0x3f	; 63
    ca5e:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sync_fs>
    ca62:	8c 01       	movw	r16, r24
    ca64:	3f cf       	rjmp	.-386    	; 0xc8e4 <f_rename+0x92>
    ca66:	08 e0       	ldi	r16, 0x08	; 8
    ca68:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    ca6a:	3c cf       	rjmp	.-392    	; 0xc8e4 <f_rename+0x92>
    ca6c:	02 e0       	ldi	r16, 0x02	; 2
    ca6e:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ca70:	39 cf       	rjmp	.-398    	; 0xc8e4 <f_rename+0x92>
    ca72:	ce 57       	subi	r28, 0x7E	; 126
    ca74:	df 4f       	sbci	r29, 0xFF	; 255
    ca76:	e9 e0       	ldi	r30, 0x09	; 9
    ca78:	0c 94 e7 df 	jmp	0x1bfce	; 0x1bfce <__epilogue_restores__+0x12>

0000ca7c <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    ca7c:	a2 e3       	ldi	r26, 0x32	; 50
    ca7e:	b0 e0       	ldi	r27, 0x00	; 0
    ca80:	e4 e4       	ldi	r30, 0x44	; 68
    ca82:	f5 e6       	ldi	r31, 0x65	; 101
    ca84:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    ca88:	9a ab       	std	Y+50, r25	; 0x32
    ca8a:	89 ab       	std	Y+49, r24	; 0x31
    ca8c:	e6 2e       	mov	r14, r22
    ca8e:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ca90:	42 e0       	ldi	r20, 0x02	; 2
    ca92:	be 01       	movw	r22, r28
    ca94:	61 5d       	subi	r22, 0xD1	; 209
    ca96:	7f 4f       	sbci	r23, 0xFF	; 255
    ca98:	ce 01       	movw	r24, r28
    ca9a:	c1 96       	adiw	r24, 0x31	; 49
    ca9c:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
	if (res == FR_OK) {
    caa0:	00 97       	sbiw	r24, 0x00	; 0
    caa2:	a9 f5       	brne	.+106    	; 0xcb0e <f_chmod+0x92>
		dj.obj.fs = fs;
    caa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    caa6:	98 a9       	ldd	r25, Y+48	; 0x30
    caa8:	9a 83       	std	Y+2, r25	; 0x02
    caaa:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    caac:	80 e0       	ldi	r24, 0x00	; 0
    caae:	92 e0       	ldi	r25, 0x02	; 2
    cab0:	27 d1       	rcall	.+590    	; 0xcd00 <ff_memalloc>
    cab2:	6c 01       	movw	r12, r24
    cab4:	00 97       	sbiw	r24, 0x00	; 0
    cab6:	b1 f0       	breq	.+44     	; 0xcae4 <f_chmod+0x68>
    cab8:	ef a5       	ldd	r30, Y+47	; 0x2f
    caba:	f8 a9       	ldd	r31, Y+48	; 0x30
    cabc:	94 87       	std	Z+12, r25	; 0x0c
    cabe:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cac0:	69 a9       	ldd	r22, Y+49	; 0x31
    cac2:	7a a9       	ldd	r23, Y+50	; 0x32
    cac4:	ce 01       	movw	r24, r28
    cac6:	01 96       	adiw	r24, 0x01	; 1
    cac8:	0e 94 bd 54 	call	0xa97a	; 0xa97a <follow_path>
    cacc:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cace:	89 2b       	or	r24, r25
    cad0:	29 f4       	brne	.+10     	; 0xcadc <f_chmod+0x60>
    cad2:	88 a5       	ldd	r24, Y+40	; 0x28
    cad4:	80 7a       	andi	r24, 0xA0	; 160
    cad6:	49 f0       	breq	.+18     	; 0xcaea <f_chmod+0x6e>
    cad8:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cada:	10 e0       	ldi	r17, 0x00	; 0
    cadc:	c6 01       	movw	r24, r12
    cade:	13 d1       	rcall	.+550    	; 0xcd06 <ff_memfree>
    cae0:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cae2:	15 c0       	rjmp	.+42     	; 0xcb0e <f_chmod+0x92>
    cae4:	81 e1       	ldi	r24, 0x11	; 17
    cae6:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cae8:	12 c0       	rjmp	.+36     	; 0xcb0e <f_chmod+0x92>
    caea:	eb 8d       	ldd	r30, Y+27	; 0x1b
    caec:	fc 8d       	ldd	r31, Y+28	; 0x1c
    caee:	83 85       	ldd	r24, Z+11	; 0x0b
    caf0:	6e 2d       	mov	r22, r14
    caf2:	68 27       	eor	r22, r24
    caf4:	6f 21       	and	r22, r15
    caf6:	67 72       	andi	r22, 0x27	; 39
    caf8:	68 27       	eor	r22, r24
				fs->wflag = 1;
    cafa:	63 87       	std	Z+11, r22	; 0x0b
    cafc:	8f a5       	ldd	r24, Y+47	; 0x2f
    cafe:	98 a9       	ldd	r25, Y+48	; 0x30
    cb00:	21 e0       	ldi	r18, 0x01	; 1
    cb02:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cb04:	23 83       	std	Z+3, r18	; 0x03
    cb06:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sync_fs>
    cb0a:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cb0c:	e7 cf       	rjmp	.-50     	; 0xcadc <f_chmod+0x60>
    cb0e:	e2 96       	adiw	r28, 0x32	; 50
    cb10:	e8 e0       	ldi	r30, 0x08	; 8
    cb12:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000cb16 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    cb16:	a2 e3       	ldi	r26, 0x32	; 50
    cb18:	b0 e0       	ldi	r27, 0x00	; 0
    cb1a:	e1 e9       	ldi	r30, 0x91	; 145
    cb1c:	f5 e6       	ldi	r31, 0x65	; 101
    cb1e:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    cb22:	9a ab       	std	Y+50, r25	; 0x32
    cb24:	89 ab       	std	Y+49, r24	; 0x31
    cb26:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cb28:	42 e0       	ldi	r20, 0x02	; 2
    cb2a:	be 01       	movw	r22, r28
    cb2c:	61 5d       	subi	r22, 0xD1	; 209
    cb2e:	7f 4f       	sbci	r23, 0xFF	; 255
    cb30:	ce 01       	movw	r24, r28
    cb32:	c1 96       	adiw	r24, 0x31	; 49
    cb34:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
	if (res == FR_OK) {
    cb38:	00 97       	sbiw	r24, 0x00	; 0
    cb3a:	09 f0       	breq	.+2      	; 0xcb3e <f_utime+0x28>
    cb3c:	41 c0       	rjmp	.+130    	; 0xcbc0 <f_utime+0xaa>
		dj.obj.fs = fs;
    cb3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cb40:	98 a9       	ldd	r25, Y+48	; 0x30
    cb42:	9a 83       	std	Y+2, r25	; 0x02
    cb44:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cb46:	80 e0       	ldi	r24, 0x00	; 0
    cb48:	92 e0       	ldi	r25, 0x02	; 2
    cb4a:	da d0       	rcall	.+436    	; 0xcd00 <ff_memalloc>
    cb4c:	7c 01       	movw	r14, r24
    cb4e:	00 97       	sbiw	r24, 0x00	; 0
    cb50:	b1 f0       	breq	.+44     	; 0xcb7e <f_utime+0x68>
    cb52:	ef a5       	ldd	r30, Y+47	; 0x2f
    cb54:	f8 a9       	ldd	r31, Y+48	; 0x30
    cb56:	94 87       	std	Z+12, r25	; 0x0c
    cb58:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cb5a:	69 a9       	ldd	r22, Y+49	; 0x31
    cb5c:	7a a9       	ldd	r23, Y+50	; 0x32
    cb5e:	ce 01       	movw	r24, r28
    cb60:	01 96       	adiw	r24, 0x01	; 1
    cb62:	0e 94 bd 54 	call	0xa97a	; 0xa97a <follow_path>
    cb66:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cb68:	89 2b       	or	r24, r25
    cb6a:	29 f4       	brne	.+10     	; 0xcb76 <f_utime+0x60>
    cb6c:	88 a5       	ldd	r24, Y+40	; 0x28
    cb6e:	80 7a       	andi	r24, 0xA0	; 160
    cb70:	49 f0       	breq	.+18     	; 0xcb84 <f_utime+0x6e>
    cb72:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cb74:	10 e0       	ldi	r17, 0x00	; 0
    cb76:	c7 01       	movw	r24, r14
    cb78:	c6 d0       	rcall	.+396    	; 0xcd06 <ff_memfree>
    cb7a:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb7c:	21 c0       	rjmp	.+66     	; 0xcbc0 <f_utime+0xaa>
    cb7e:	81 e1       	ldi	r24, 0x11	; 17
    cb80:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cb82:	1e c0       	rjmp	.+60     	; 0xcbc0 <f_utime+0xaa>
    cb84:	f6 01       	movw	r30, r12
    cb86:	44 81       	ldd	r20, Z+4	; 0x04
    cb88:	55 81       	ldd	r21, Z+5	; 0x05
    cb8a:	60 e0       	ldi	r22, 0x00	; 0
    cb8c:	70 e0       	ldi	r23, 0x00	; 0
    cb8e:	ba 01       	movw	r22, r20
    cb90:	55 27       	eor	r21, r21
    cb92:	44 27       	eor	r20, r20
    cb94:	86 81       	ldd	r24, Z+6	; 0x06
    cb96:	97 81       	ldd	r25, Z+7	; 0x07
    cb98:	a0 e0       	ldi	r26, 0x00	; 0
    cb9a:	b0 e0       	ldi	r27, 0x00	; 0
    cb9c:	48 2b       	or	r20, r24
    cb9e:	59 2b       	or	r21, r25
    cba0:	6a 2b       	or	r22, r26
    cba2:	7b 2b       	or	r23, r27
    cba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cba6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cba8:	46 96       	adiw	r24, 0x16	; 22
    cbaa:	0e 94 2d 44 	call	0x885a	; 0x885a <st_dword>
				fs->wflag = 1;
    cbae:	8f a5       	ldd	r24, Y+47	; 0x2f
    cbb0:	98 a9       	ldd	r25, Y+48	; 0x30
    cbb2:	21 e0       	ldi	r18, 0x01	; 1
    cbb4:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cbb6:	23 83       	std	Z+3, r18	; 0x03
    cbb8:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sync_fs>
    cbbc:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cbbe:	db cf       	rjmp	.-74     	; 0xcb76 <f_utime+0x60>
    cbc0:	e2 96       	adiw	r28, 0x32	; 50
    cbc2:	e8 e0       	ldi	r30, 0x08	; 8
    cbc4:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000cbc8 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    cbc8:	a2 e3       	ldi	r26, 0x32	; 50
    cbca:	b0 e0       	ldi	r27, 0x00	; 0
    cbcc:	ea ee       	ldi	r30, 0xEA	; 234
    cbce:	f5 e6       	ldi	r31, 0x65	; 101
    cbd0:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
    cbd4:	9a ab       	std	Y+50, r25	; 0x32
    cbd6:	89 ab       	std	Y+49, r24	; 0x31
    cbd8:	6b 01       	movw	r12, r22
    cbda:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    cbdc:	40 e0       	ldi	r20, 0x00	; 0
    cbde:	be 01       	movw	r22, r28
    cbe0:	61 5d       	subi	r22, 0xD1	; 209
    cbe2:	7f 4f       	sbci	r23, 0xFF	; 255
    cbe4:	ce 01       	movw	r24, r28
    cbe6:	c1 96       	adiw	r24, 0x31	; 49
    cbe8:	0e 94 6e 49 	call	0x92dc	; 0x92dc <mount_volume>
    cbec:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    cbee:	89 2b       	or	r24, r25
    cbf0:	09 f0       	breq	.+2      	; 0xcbf4 <f_getlabel+0x2c>
    cbf2:	81 c0       	rjmp	.+258    	; 0xccf6 <f_getlabel+0x12e>
    cbf4:	c1 14       	cp	r12, r1
    cbf6:	d1 04       	cpc	r13, r1
    cbf8:	09 f4       	brne	.+2      	; 0xcbfc <f_getlabel+0x34>
    cbfa:	53 c0       	rjmp	.+166    	; 0xcca2 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    cbfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    cbfe:	98 a9       	ldd	r25, Y+48	; 0x30
    cc00:	9a 83       	std	Y+2, r25	; 0x02
    cc02:	89 83       	std	Y+1, r24	; 0x01
    cc04:	1f 82       	std	Y+7, r1	; 0x07
    cc06:	18 86       	std	Y+8, r1	; 0x08
    cc08:	19 86       	std	Y+9, r1	; 0x09
    cc0a:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    cc0c:	40 e0       	ldi	r20, 0x00	; 0
    cc0e:	50 e0       	ldi	r21, 0x00	; 0
    cc10:	ba 01       	movw	r22, r20
    cc12:	ce 01       	movw	r24, r28
    cc14:	01 96       	adiw	r24, 0x01	; 1
    cc16:	0e 94 77 4d 	call	0x9aee	; 0x9aee <dir_sdi>
		if (res == FR_OK) {
    cc1a:	00 97       	sbiw	r24, 0x00	; 0
    cc1c:	e9 f5       	brne	.+122    	; 0xcc98 <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    cc1e:	61 e0       	ldi	r22, 0x01	; 1
    cc20:	70 e0       	ldi	r23, 0x00	; 0
    cc22:	ce 01       	movw	r24, r28
    cc24:	01 96       	adiw	r24, 0x01	; 1
    cc26:	0e 94 10 51 	call	0xa220	; 0xa220 <dir_read>
		 	if (res == FR_OK) {
    cc2a:	00 97       	sbiw	r24, 0x00	; 0
    cc2c:	a9 f5       	brne	.+106    	; 0xcc98 <f_getlabel+0xd0>
    cc2e:	00 e0       	ldi	r16, 0x00	; 0
    cc30:	10 e0       	ldi	r17, 0x00	; 0
    cc32:	80 e0       	ldi	r24, 0x00	; 0
    cc34:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    cc36:	4c 01       	movw	r8, r24
    cc38:	2f ef       	ldi	r18, 0xFF	; 255
    cc3a:	82 1a       	sub	r8, r18
    cc3c:	92 0a       	sbc	r9, r18
    cc3e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    cc40:	3c 8d       	ldd	r19, Y+28	; 0x1c
    cc42:	f9 01       	movw	r30, r18
    cc44:	e8 0f       	add	r30, r24
    cc46:	f9 1f       	adc	r31, r25
    cc48:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    cc4a:	65 eb       	ldi	r22, 0xB5	; 181
    cc4c:	71 e0       	ldi	r23, 0x01	; 1
    cc4e:	90 e0       	ldi	r25, 0x00	; 0
    cc50:	90 d0       	rcall	.+288    	; 0xcd72 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cc52:	00 97       	sbiw	r24, 0x00	; 0
    cc54:	19 f4       	brne	.+6      	; 0xcc5c <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    cc56:	00 e0       	ldi	r16, 0x00	; 0
    cc58:	10 e0       	ldi	r17, 0x00	; 0
    cc5a:	13 c0       	rjmp	.+38     	; 0xcc82 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cc5c:	bc 01       	movw	r22, r24
    cc5e:	80 e0       	ldi	r24, 0x00	; 0
    cc60:	90 e0       	ldi	r25, 0x00	; 0
    cc62:	24 e0       	ldi	r18, 0x04	; 4
    cc64:	30 e0       	ldi	r19, 0x00	; 0
    cc66:	a6 01       	movw	r20, r12
    cc68:	40 0f       	add	r20, r16
    cc6a:	51 1f       	adc	r21, r17
    cc6c:	0e 94 a7 45 	call	0x8b4e	; 0x8b4e <put_utf>
    cc70:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    cc72:	00 97       	sbiw	r24, 0x00	; 0
    cc74:	81 f3       	breq	.-32     	; 0xcc56 <f_getlabel+0x8e>
						di += wc;
    cc76:	08 0f       	add	r16, r24
    cc78:	19 1f       	adc	r17, r25
    cc7a:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    cc7c:	8b 30       	cpi	r24, 0x0B	; 11
    cc7e:	91 05       	cpc	r25, r1
    cc80:	d1 f6       	brne	.-76     	; 0xcc36 <f_getlabel+0x6e>
    cc82:	f6 01       	movw	r30, r12
    cc84:	e0 0f       	add	r30, r16
    cc86:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    cc88:	10 82       	st	Z, r1
						if (di == 0) break;
    cc8a:	ce 16       	cp	r12, r30
    cc8c:	df 06       	cpc	r13, r31
    cc8e:	49 f0       	breq	.+18     	; 0xcca2 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    cc90:	82 91       	ld	r24, -Z
    cc92:	80 32       	cpi	r24, 0x20	; 32
    cc94:	c9 f3       	breq	.-14     	; 0xcc88 <f_getlabel+0xc0>
    cc96:	05 c0       	rjmp	.+10     	; 0xcca2 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cc98:	84 30       	cpi	r24, 0x04	; 4
    cc9a:	91 05       	cpc	r25, r1
    cc9c:	59 f5       	brne	.+86     	; 0xccf4 <f_getlabel+0x12c>
			label[0] = 0;
    cc9e:	f6 01       	movw	r30, r12
    cca0:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    cca2:	a1 14       	cp	r10, r1
    cca4:	b1 04       	cpc	r11, r1
    cca6:	39 f1       	breq	.+78     	; 0xccf6 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    cca8:	8f a5       	ldd	r24, Y+47	; 0x2f
    ccaa:	98 a9       	ldd	r25, Y+48	; 0x30
    ccac:	fc 01       	movw	r30, r24
    ccae:	41 a1       	ldd	r20, Z+33	; 0x21
    ccb0:	52 a1       	ldd	r21, Z+34	; 0x22
    ccb2:	63 a1       	ldd	r22, Z+35	; 0x23
    ccb4:	74 a1       	ldd	r23, Z+36	; 0x24
    ccb6:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <move_window>
    ccba:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    ccbc:	89 2b       	or	r24, r25
    ccbe:	d9 f4       	brne	.+54     	; 0xccf6 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    ccc0:	ef a5       	ldd	r30, Y+47	; 0x2f
    ccc2:	f8 a9       	ldd	r31, Y+48	; 0x30
    ccc4:	80 81       	ld	r24, Z
    ccc6:	83 30       	cpi	r24, 0x03	; 3
    ccc8:	29 f0       	breq	.+10     	; 0xccd4 <f_getlabel+0x10c>
    ccca:	84 30       	cpi	r24, 0x04	; 4
    cccc:	31 f0       	breq	.+12     	; 0xccda <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    ccce:	87 e2       	ldi	r24, 0x27	; 39
    ccd0:	90 e0       	ldi	r25, 0x00	; 0
    ccd2:	05 c0       	rjmp	.+10     	; 0xccde <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    ccd4:	83 e4       	ldi	r24, 0x43	; 67
    ccd6:	90 e0       	ldi	r25, 0x00	; 0
    ccd8:	02 c0       	rjmp	.+4      	; 0xccde <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    ccda:	84 e6       	ldi	r24, 0x64	; 100
    ccdc:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    ccde:	f5 96       	adiw	r30, 0x35	; 53
    cce0:	8e 0f       	add	r24, r30
    cce2:	9f 1f       	adc	r25, r31
    cce4:	0e 94 18 44 	call	0x8830	; 0x8830 <ld_dword>
    cce8:	f5 01       	movw	r30, r10
    ccea:	60 83       	st	Z, r22
    ccec:	71 83       	std	Z+1, r23	; 0x01
    ccee:	82 83       	std	Z+2, r24	; 0x02
    ccf0:	93 83       	std	Z+3, r25	; 0x03
    ccf2:	01 c0       	rjmp	.+2      	; 0xccf6 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    ccf4:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    ccf6:	c7 01       	movw	r24, r14
    ccf8:	e2 96       	adiw	r28, 0x32	; 50
    ccfa:	ec e0       	ldi	r30, 0x0C	; 12
    ccfc:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

0000cd00 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    cd00:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <safemalloc>
}
    cd04:	08 95       	ret

0000cd06 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    cd06:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <safefree>
    cd0a:	08 95       	ret

0000cd0c <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    cd0c:	cf 92       	push	r12
    cd0e:	df 92       	push	r13
    cd10:	ef 92       	push	r14
    cd12:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    cd14:	60 38       	cpi	r22, 0x80	; 128
    cd16:	71 05       	cpc	r23, r1
    cd18:	81 05       	cpc	r24, r1
    cd1a:	91 05       	cpc	r25, r1
    cd1c:	10 f4       	brcc	.+4      	; 0xcd22 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    cd1e:	cb 01       	movw	r24, r22
    cd20:	23 c0       	rjmp	.+70     	; 0xcd68 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    cd22:	61 15       	cp	r22, r1
    cd24:	71 05       	cpc	r23, r1
    cd26:	21 e0       	ldi	r18, 0x01	; 1
    cd28:	82 07       	cpc	r24, r18
    cd2a:	91 05       	cpc	r25, r1
    cd2c:	d8 f4       	brcc	.+54     	; 0xcd64 <ff_uni2oem+0x58>
    cd2e:	45 3b       	cpi	r20, 0xB5	; 181
    cd30:	51 40       	sbci	r21, 0x01	; 1
    cd32:	c1 f4       	brne	.+48     	; 0xcd64 <ff_uni2oem+0x58>
    cd34:	e1 ea       	ldi	r30, 0xA1	; 161
    cd36:	f7 e0       	ldi	r31, 0x07	; 7
    cd38:	20 e0       	ldi	r18, 0x00	; 0
    cd3a:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    cd3c:	c1 90       	ld	r12, Z+
    cd3e:	d1 90       	ld	r13, Z+
    cd40:	e1 2c       	mov	r14, r1
    cd42:	f1 2c       	mov	r15, r1
    cd44:	6c 15       	cp	r22, r12
    cd46:	7d 05       	cpc	r23, r13
    cd48:	8e 05       	cpc	r24, r14
    cd4a:	9f 05       	cpc	r25, r15
    cd4c:	29 f0       	breq	.+10     	; 0xcd58 <ff_uni2oem+0x4c>
    cd4e:	2f 5f       	subi	r18, 0xFF	; 255
    cd50:	3f 4f       	sbci	r19, 0xFF	; 255
    cd52:	20 38       	cpi	r18, 0x80	; 128
    cd54:	31 05       	cpc	r19, r1
    cd56:	91 f7       	brne	.-28     	; 0xcd3c <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    cd58:	b9 01       	movw	r22, r18
    cd5a:	60 58       	subi	r22, 0x80	; 128
    cd5c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd5e:	cb 01       	movw	r24, r22
    cd60:	99 27       	eor	r25, r25
    cd62:	02 c0       	rjmp	.+4      	; 0xcd68 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cd64:	80 e0       	ldi	r24, 0x00	; 0
    cd66:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    cd68:	ff 90       	pop	r15
    cd6a:	ef 90       	pop	r14
    cd6c:	df 90       	pop	r13
    cd6e:	cf 90       	pop	r12
    cd70:	08 95       	ret

0000cd72 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    cd72:	80 38       	cpi	r24, 0x80	; 128
    cd74:	91 05       	cpc	r25, r1
    cd76:	88 f0       	brcs	.+34     	; 0xcd9a <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    cd78:	65 3b       	cpi	r22, 0xB5	; 181
    cd7a:	71 40       	sbci	r23, 0x01	; 1
    cd7c:	61 f4       	brne	.+24     	; 0xcd96 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    cd7e:	8f 3f       	cpi	r24, 0xFF	; 255
    cd80:	91 05       	cpc	r25, r1
    cd82:	09 f0       	breq	.+2      	; 0xcd86 <ff_oem2uni+0x14>
    cd84:	40 f4       	brcc	.+16     	; 0xcd96 <ff_oem2uni+0x24>
    cd86:	88 0f       	add	r24, r24
    cd88:	99 1f       	adc	r25, r25
    cd8a:	fc 01       	movw	r30, r24
    cd8c:	ef 55       	subi	r30, 0x5F	; 95
    cd8e:	f9 4f       	sbci	r31, 0xF9	; 249
    cd90:	80 81       	ld	r24, Z
    cd92:	91 81       	ldd	r25, Z+1	; 0x01
    cd94:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cd96:	80 e0       	ldi	r24, 0x00	; 0
    cd98:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    cd9a:	08 95       	ret

0000cd9c <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    cd9c:	61 15       	cp	r22, r1
    cd9e:	71 05       	cpc	r23, r1
    cda0:	21 e0       	ldi	r18, 0x01	; 1
    cda2:	82 07       	cpc	r24, r18
    cda4:	91 05       	cpc	r25, r1
    cda6:	08 f0       	brcs	.+2      	; 0xcdaa <ff_wtoupper+0xe>
    cda8:	5a c0       	rjmp	.+180    	; 0xce5e <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    cdaa:	61 15       	cp	r22, r1
    cdac:	80 e1       	ldi	r24, 0x10	; 16
    cdae:	78 07       	cpc	r23, r24
    cdb0:	18 f0       	brcs	.+6      	; 0xcdb8 <ff_wtoupper+0x1c>
    cdb2:	a3 ef       	ldi	r26, 0xF3	; 243
    cdb4:	b4 e0       	ldi	r27, 0x04	; 4
    cdb6:	02 c0       	rjmp	.+4      	; 0xcdbc <ff_wtoupper+0x20>
    cdb8:	af ea       	ldi	r26, 0xAF	; 175
    cdba:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    cdbc:	2d 91       	ld	r18, X+
    cdbe:	3c 91       	ld	r19, X
    cdc0:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    cdc2:	21 15       	cp	r18, r1
    cdc4:	31 05       	cpc	r19, r1
    cdc6:	09 f4       	brne	.+2      	; 0xcdca <ff_wtoupper+0x2e>
    cdc8:	48 c0       	rjmp	.+144    	; 0xce5a <ff_wtoupper+0xbe>
    cdca:	62 17       	cp	r22, r18
    cdcc:	73 07       	cpc	r23, r19
    cdce:	08 f4       	brcc	.+2      	; 0xcdd2 <ff_wtoupper+0x36>
    cdd0:	44 c0       	rjmp	.+136    	; 0xce5a <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    cdd2:	14 96       	adiw	r26, 0x04	; 4
    cdd4:	fd 01       	movw	r30, r26
    cdd6:	32 97       	sbiw	r30, 0x02	; 2
    cdd8:	80 81       	ld	r24, Z
    cdda:	91 81       	ldd	r25, Z+1	; 0x01
    cddc:	e9 2f       	mov	r30, r25
    cdde:	ff 27       	eor	r31, r31
    cde0:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    cde2:	a9 01       	movw	r20, r18
    cde4:	48 0f       	add	r20, r24
    cde6:	59 1f       	adc	r21, r25
    cde8:	64 17       	cp	r22, r20
    cdea:	75 07       	cpc	r23, r21
    cdec:	70 f5       	brcc	.+92     	; 0xce4a <ff_wtoupper+0xae>
				switch (cmd) {
    cdee:	e9 30       	cpi	r30, 0x09	; 9
    cdf0:	f1 05       	cpc	r31, r1
    cdf2:	98 f5       	brcc	.+102    	; 0xce5a <ff_wtoupper+0xbe>
    cdf4:	ec 54       	subi	r30, 0x4C	; 76
    cdf6:	ff 4f       	sbci	r31, 0xFF	; 255
    cdf8:	0c 94 93 df 	jmp	0x1bf26	; 0x1bf26 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    cdfc:	62 1b       	sub	r22, r18
    cdfe:	73 0b       	sbc	r23, r19
    ce00:	fb 01       	movw	r30, r22
    ce02:	ee 0f       	add	r30, r30
    ce04:	ff 1f       	adc	r31, r31
    ce06:	ea 0f       	add	r30, r26
    ce08:	fb 1f       	adc	r31, r27
    ce0a:	60 81       	ld	r22, Z
    ce0c:	71 81       	ldd	r23, Z+1	; 0x01
    ce0e:	25 c0       	rjmp	.+74     	; 0xce5a <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    ce10:	cb 01       	movw	r24, r22
    ce12:	82 1b       	sub	r24, r18
    ce14:	93 0b       	sbc	r25, r19
    ce16:	81 70       	andi	r24, 0x01	; 1
    ce18:	99 27       	eor	r25, r25
    ce1a:	68 1b       	sub	r22, r24
    ce1c:	79 0b       	sbc	r23, r25
    ce1e:	1d c0       	rjmp	.+58     	; 0xce5a <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    ce20:	60 51       	subi	r22, 0x10	; 16
    ce22:	71 09       	sbc	r23, r1
    ce24:	1a c0       	rjmp	.+52     	; 0xce5a <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    ce26:	60 52       	subi	r22, 0x20	; 32
    ce28:	71 09       	sbc	r23, r1
    ce2a:	17 c0       	rjmp	.+46     	; 0xce5a <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    ce2c:	60 53       	subi	r22, 0x30	; 48
    ce2e:	71 09       	sbc	r23, r1
    ce30:	14 c0       	rjmp	.+40     	; 0xce5a <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    ce32:	6a 51       	subi	r22, 0x1A	; 26
    ce34:	71 09       	sbc	r23, r1
    ce36:	11 c0       	rjmp	.+34     	; 0xce5a <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    ce38:	68 5f       	subi	r22, 0xF8	; 248
    ce3a:	7f 4f       	sbci	r23, 0xFF	; 255
    ce3c:	0e c0       	rjmp	.+28     	; 0xce5a <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    ce3e:	60 55       	subi	r22, 0x50	; 80
    ce40:	71 09       	sbc	r23, r1
    ce42:	0b c0       	rjmp	.+22     	; 0xce5a <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    ce44:	60 56       	subi	r22, 0x60	; 96
    ce46:	7c 41       	sbci	r23, 0x1C	; 28
    ce48:	08 c0       	rjmp	.+16     	; 0xce5a <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    ce4a:	ef 2b       	or	r30, r31
    ce4c:	09 f0       	breq	.+2      	; 0xce50 <ff_wtoupper+0xb4>
    ce4e:	b6 cf       	rjmp	.-148    	; 0xcdbc <ff_wtoupper+0x20>
    ce50:	88 0f       	add	r24, r24
    ce52:	99 1f       	adc	r25, r25
    ce54:	a8 0f       	add	r26, r24
    ce56:	b9 1f       	adc	r27, r25
    ce58:	b1 cf       	rjmp	.-158    	; 0xcdbc <ff_wtoupper+0x20>
		}
		uni = uc;
    ce5a:	80 e0       	ldi	r24, 0x00	; 0
    ce5c:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    ce5e:	08 95       	ret

0000ce60 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    ce60:	81 11       	cpse	r24, r1
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    ce62:	02 c0       	rjmp	.+4      	; 0xce68 <disk_status+0x8>
    ce64:	a1 c1       	rjmp	.+834    	; 0xd1a8 <mmc_disk_status>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    ce66:	08 95       	ret
}
    ce68:	81 e0       	ldi	r24, 0x01	; 1
    ce6a:	08 95       	ret

0000ce6c <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    ce6c:	81 11       	cpse	r24, r1
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    ce6e:	02 c0       	rjmp	.+4      	; 0xce74 <disk_initialize+0x8>
    ce70:	f6 c0       	rjmp	.+492    	; 0xd05e <mmc_disk_initialize>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    ce72:	08 95       	ret
}
    ce74:	81 e0       	ldi	r24, 0x01	; 1
    ce76:	08 95       	ret

0000ce78 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    ce78:	0f 93       	push	r16
    ce7a:	1f 93       	push	r17
    ce7c:	fb 01       	movw	r30, r22
    switch (pdrv)
    ce7e:	81 11       	cpse	r24, r1
    ce80:	06 c0       	rjmp	.+12     	; 0xce8e <disk_read+0x16>
    ce82:	ba 01       	movw	r22, r20
    ce84:	a9 01       	movw	r20, r18
    ce86:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    ce88:	98 01       	movw	r18, r16
    ce8a:	91 d1       	rcall	.+802    	; 0xd1ae <mmc_disk_read>
    ce8c:	02 c0       	rjmp	.+4      	; 0xce92 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    ce8e:	84 e0       	ldi	r24, 0x04	; 4
    ce90:	90 e0       	ldi	r25, 0x00	; 0
}
    ce92:	1f 91       	pop	r17
    ce94:	0f 91       	pop	r16
    ce96:	08 95       	ret

0000ce98 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    ce98:	0f 93       	push	r16
    ce9a:	1f 93       	push	r17
    ce9c:	fb 01       	movw	r30, r22
    switch (pdrv)
    ce9e:	81 11       	cpse	r24, r1
    cea0:	06 c0       	rjmp	.+12     	; 0xceae <disk_write+0x16>
    cea2:	ba 01       	movw	r22, r20
    cea4:	a9 01       	movw	r20, r18
    cea6:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    cea8:	98 01       	movw	r18, r16
    ceaa:	e2 d1       	rcall	.+964    	; 0xd270 <mmc_disk_write>
    ceac:	02 c0       	rjmp	.+4      	; 0xceb2 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    ceae:	84 e0       	ldi	r24, 0x04	; 4
    ceb0:	90 e0       	ldi	r25, 0x00	; 0
}
    ceb2:	1f 91       	pop	r17
    ceb4:	0f 91       	pop	r16
    ceb6:	08 95       	ret

0000ceb8 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    ceb8:	96 2f       	mov	r25, r22
    switch (pdrv)
    ceba:	81 11       	cpse	r24, r1
    cebc:	04 c0       	rjmp	.+8      	; 0xcec6 <disk_ioctl+0xe>
    cebe:	ba 01       	movw	r22, r20
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    cec0:	89 2f       	mov	r24, r25
    cec2:	4a c2       	rjmp	.+1172   	; 0xd358 <mmc_disk_ioctl>
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    cec4:	08 95       	ret
    cec6:	84 e0       	ldi	r24, 0x04	; 4
}
    cec8:	90 e0       	ldi	r25, 0x00	; 0
    ceca:	08 95       	ret

0000cecc <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    cecc:	f9 c4       	rjmp	.+2546   	; 0xd8c0 <mmc_spi_TXRX>
    cece:	08 95       	ret

0000ced0 <deselect>:
    ced0:	ce d4       	rcall	.+2460   	; 0xd86e <mmc_spi_end>
    ced2:	8f ef       	ldi	r24, 0xFF	; 255
    ced4:	fb df       	rcall	.-10     	; 0xcecc <xchg_spi>
    ced6:	8f ef       	ldi	r24, 0xFF	; 255
    ced8:	f9 cf       	rjmp	.-14     	; 0xcecc <xchg_spi>
    ceda:	08 95       	ret

0000cedc <rcvr_datablock>:
    cedc:	0f 93       	push	r16
    cede:	1f 93       	push	r17
    cee0:	cf 93       	push	r28
    cee2:	df 93       	push	r29
    cee4:	ec 01       	movw	r28, r24
    cee6:	8b 01       	movw	r16, r22
    cee8:	88 ee       	ldi	r24, 0xE8	; 232
    ceea:	93 e0       	ldi	r25, 0x03	; 3
    ceec:	ec d4       	rcall	.+2520   	; 0xd8c6 <mmc_set_ms_timeout>
    ceee:	8f ef       	ldi	r24, 0xFF	; 255
    cef0:	e7 d4       	rcall	.+2510   	; 0xd8c0 <mmc_spi_TXRX>
    cef2:	8f 3f       	cpi	r24, 0xFF	; 255
    cef4:	31 f4       	brne	.+12     	; 0xcf02 <rcvr_datablock+0x26>
    cef6:	ee d4       	rcall	.+2524   	; 0xd8d4 <mmc_test_timeout>
    cef8:	89 2b       	or	r24, r25
    cefa:	c9 f3       	breq	.-14     	; 0xceee <rcvr_datablock+0x12>
    cefc:	80 e0       	ldi	r24, 0x00	; 0
    cefe:	90 e0       	ldi	r25, 0x00	; 0
    cf00:	0b c0       	rjmp	.+22     	; 0xcf18 <rcvr_datablock+0x3c>
    cf02:	8e 3f       	cpi	r24, 0xFE	; 254
    cf04:	d9 f7       	brne	.-10     	; 0xcefc <rcvr_datablock+0x20>
    cf06:	b8 01       	movw	r22, r16
    cf08:	ce 01       	movw	r24, r28
    cf0a:	d7 d4       	rcall	.+2478   	; 0xd8ba <mmc_spi_RX_buffer>
    cf0c:	8f ef       	ldi	r24, 0xFF	; 255
    cf0e:	de df       	rcall	.-68     	; 0xcecc <xchg_spi>
    cf10:	8f ef       	ldi	r24, 0xFF	; 255
    cf12:	dc df       	rcall	.-72     	; 0xcecc <xchg_spi>
    cf14:	81 e0       	ldi	r24, 0x01	; 1
    cf16:	90 e0       	ldi	r25, 0x00	; 0
    cf18:	df 91       	pop	r29
    cf1a:	cf 91       	pop	r28
    cf1c:	1f 91       	pop	r17
    cf1e:	0f 91       	pop	r16
    cf20:	08 95       	ret

0000cf22 <wait_ready>:
    cf22:	cf 93       	push	r28
    cf24:	d0 d4       	rcall	.+2464   	; 0xd8c6 <mmc_set_ms_timeout>
    cf26:	8f ef       	ldi	r24, 0xFF	; 255
    cf28:	cb d4       	rcall	.+2454   	; 0xd8c0 <mmc_spi_TXRX>
    cf2a:	c8 2f       	mov	r28, r24
    cf2c:	8f 3f       	cpi	r24, 0xFF	; 255
    cf2e:	19 f0       	breq	.+6      	; 0xcf36 <wait_ready+0x14>
    cf30:	d1 d4       	rcall	.+2466   	; 0xd8d4 <mmc_test_timeout>
    cf32:	89 2b       	or	r24, r25
    cf34:	c1 f3       	breq	.-16     	; 0xcf26 <wait_ready+0x4>
    cf36:	81 e0       	ldi	r24, 0x01	; 1
    cf38:	90 e0       	ldi	r25, 0x00	; 0
    cf3a:	cf 3f       	cpi	r28, 0xFF	; 255
    cf3c:	11 f0       	breq	.+4      	; 0xcf42 <wait_ready+0x20>
    cf3e:	80 e0       	ldi	r24, 0x00	; 0
    cf40:	90 e0       	ldi	r25, 0x00	; 0
    cf42:	cf 91       	pop	r28
    cf44:	08 95       	ret

0000cf46 <select>:
    cf46:	cf 93       	push	r28
    cf48:	df 93       	push	r29
    cf4a:	00 d0       	rcall	.+0      	; 0xcf4c <select+0x6>
    cf4c:	1f 92       	push	r1
    cf4e:	82 d4       	rcall	.+2308   	; 0xd854 <mmc_spi_begin>
    cf50:	8f ef       	ldi	r24, 0xFF	; 255
    cf52:	bc df       	rcall	.-136    	; 0xcecc <xchg_spi>
    cf54:	88 ee       	ldi	r24, 0xE8	; 232
    cf56:	93 e0       	ldi	r25, 0x03	; 3
    cf58:	e4 df       	rcall	.-56     	; 0xcf22 <wait_ready>
    cf5a:	ec 01       	movw	r28, r24
    cf5c:	89 2b       	or	r24, r25
    cf5e:	61 f4       	brne	.+24     	; 0xcf78 <select+0x32>
    cf60:	8d e7       	ldi	r24, 0x7D	; 125
    cf62:	97 e0       	ldi	r25, 0x07	; 7
    cf64:	a0 e0       	ldi	r26, 0x00	; 0
    cf66:	ed b7       	in	r30, 0x3d	; 61
    cf68:	fe b7       	in	r31, 0x3e	; 62
    cf6a:	81 83       	std	Z+1, r24	; 0x01
    cf6c:	92 83       	std	Z+2, r25	; 0x02
    cf6e:	a3 83       	std	Z+3, r26	; 0x03
    cf70:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    cf74:	ad df       	rcall	.-166    	; 0xced0 <deselect>
    cf76:	02 c0       	rjmp	.+4      	; 0xcf7c <select+0x36>
    cf78:	c1 e0       	ldi	r28, 0x01	; 1
    cf7a:	d0 e0       	ldi	r29, 0x00	; 0
    cf7c:	ce 01       	movw	r24, r28
    cf7e:	cd b7       	in	r28, 0x3d	; 61
    cf80:	de b7       	in	r29, 0x3e	; 62
    cf82:	23 96       	adiw	r28, 0x03	; 3
    cf84:	e2 e0       	ldi	r30, 0x02	; 2
    cf86:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000cf8a <send_cmd>:
    cf8a:	ff 92       	push	r15
    cf8c:	0f 93       	push	r16
    cf8e:	1f 93       	push	r17
    cf90:	cf 93       	push	r28
    cf92:	df 93       	push	r29
    cf94:	c8 2f       	mov	r28, r24
    cf96:	d4 2f       	mov	r29, r20
    cf98:	15 2f       	mov	r17, r21
    cf9a:	06 2f       	mov	r16, r22
    cf9c:	f7 2e       	mov	r15, r23
    cf9e:	87 ff       	sbrs	r24, 7
    cfa0:	08 c0       	rjmp	.+16     	; 0xcfb2 <send_cmd+0x28>
    cfa2:	40 e0       	ldi	r20, 0x00	; 0
    cfa4:	50 e0       	ldi	r21, 0x00	; 0
    cfa6:	ba 01       	movw	r22, r20
    cfa8:	87 e3       	ldi	r24, 0x37	; 55
    cfaa:	ef df       	rcall	.-34     	; 0xcf8a <send_cmd>
    cfac:	82 30       	cpi	r24, 0x02	; 2
    cfae:	58 f5       	brcc	.+86     	; 0xd006 <send_cmd+0x7c>
    cfb0:	cf 77       	andi	r28, 0x7F	; 127
    cfb2:	cc 30       	cpi	r28, 0x0C	; 12
    cfb4:	71 f4       	brne	.+28     	; 0xcfd2 <send_cmd+0x48>
    cfb6:	8c 2f       	mov	r24, r28
    cfb8:	80 64       	ori	r24, 0x40	; 64
    cfba:	88 df       	rcall	.-240    	; 0xcecc <xchg_spi>
    cfbc:	8f 2d       	mov	r24, r15
    cfbe:	86 df       	rcall	.-244    	; 0xcecc <xchg_spi>
    cfc0:	80 2f       	mov	r24, r16
    cfc2:	84 df       	rcall	.-248    	; 0xcecc <xchg_spi>
    cfc4:	81 2f       	mov	r24, r17
    cfc6:	82 df       	rcall	.-252    	; 0xcecc <xchg_spi>
    cfc8:	8d 2f       	mov	r24, r29
    cfca:	80 df       	rcall	.-256    	; 0xcecc <xchg_spi>
    cfcc:	cc 23       	and	r28, r28
    cfce:	c9 f0       	breq	.+50     	; 0xd002 <send_cmd+0x78>
    cfd0:	06 c0       	rjmp	.+12     	; 0xcfde <send_cmd+0x54>
    cfd2:	7e df       	rcall	.-260    	; 0xced0 <deselect>
    cfd4:	b8 df       	rcall	.-144    	; 0xcf46 <select>
    cfd6:	89 2b       	or	r24, r25
    cfd8:	71 f7       	brne	.-36     	; 0xcfb6 <send_cmd+0x2c>
    cfda:	8f ef       	ldi	r24, 0xFF	; 255
    cfdc:	14 c0       	rjmp	.+40     	; 0xd006 <send_cmd+0x7c>
    cfde:	c8 30       	cpi	r28, 0x08	; 8
    cfe0:	11 f4       	brne	.+4      	; 0xcfe6 <send_cmd+0x5c>
    cfe2:	87 e8       	ldi	r24, 0x87	; 135
    cfe4:	01 c0       	rjmp	.+2      	; 0xcfe8 <send_cmd+0x5e>
    cfe6:	81 e0       	ldi	r24, 0x01	; 1
    cfe8:	71 df       	rcall	.-286    	; 0xcecc <xchg_spi>
    cfea:	cc 30       	cpi	r28, 0x0C	; 12
    cfec:	11 f4       	brne	.+4      	; 0xcff2 <send_cmd+0x68>
    cfee:	8f ef       	ldi	r24, 0xFF	; 255
    cff0:	6d df       	rcall	.-294    	; 0xcecc <xchg_spi>
    cff2:	ca e0       	ldi	r28, 0x0A	; 10
    cff4:	8f ef       	ldi	r24, 0xFF	; 255
    cff6:	64 d4       	rcall	.+2248   	; 0xd8c0 <mmc_spi_TXRX>
    cff8:	87 ff       	sbrs	r24, 7
    cffa:	05 c0       	rjmp	.+10     	; 0xd006 <send_cmd+0x7c>
    cffc:	c1 50       	subi	r28, 0x01	; 1
    cffe:	d1 f7       	brne	.-12     	; 0xcff4 <send_cmd+0x6a>
    d000:	02 c0       	rjmp	.+4      	; 0xd006 <send_cmd+0x7c>
    d002:	85 e9       	ldi	r24, 0x95	; 149
    d004:	f5 cf       	rjmp	.-22     	; 0xcff0 <send_cmd+0x66>
    d006:	cd b7       	in	r28, 0x3d	; 61
    d008:	de b7       	in	r29, 0x3e	; 62
    d00a:	e5 e0       	ldi	r30, 0x05	; 5
    d00c:	0c 94 eb df 	jmp	0x1bfd6	; 0x1bfd6 <__epilogue_restores__+0x1a>

0000d010 <xmit_datablock>:
    d010:	0f 93       	push	r16
    d012:	1f 93       	push	r17
    d014:	cf 93       	push	r28
    d016:	8c 01       	movw	r16, r24
    d018:	c6 2f       	mov	r28, r22
    d01a:	88 ee       	ldi	r24, 0xE8	; 232
    d01c:	93 e0       	ldi	r25, 0x03	; 3
    d01e:	81 df       	rcall	.-254    	; 0xcf22 <wait_ready>
    d020:	00 97       	sbiw	r24, 0x00	; 0
    d022:	c9 f0       	breq	.+50     	; 0xd056 <xmit_datablock+0x46>
    d024:	8c 2f       	mov	r24, r28
    d026:	52 df       	rcall	.-348    	; 0xcecc <xchg_spi>
    d028:	cd 3f       	cpi	r28, 0xFD	; 253
    d02a:	99 f0       	breq	.+38     	; 0xd052 <xmit_datablock+0x42>
    d02c:	60 e0       	ldi	r22, 0x00	; 0
    d02e:	72 e0       	ldi	r23, 0x02	; 2
    d030:	c8 01       	movw	r24, r16
    d032:	40 d4       	rcall	.+2176   	; 0xd8b4 <mmc_spi_TX_buffer>
    d034:	8f ef       	ldi	r24, 0xFF	; 255
    d036:	4a df       	rcall	.-364    	; 0xcecc <xchg_spi>
    d038:	8f ef       	ldi	r24, 0xFF	; 255
    d03a:	48 df       	rcall	.-368    	; 0xcecc <xchg_spi>
    d03c:	8f ef       	ldi	r24, 0xFF	; 255
    d03e:	40 d4       	rcall	.+2176   	; 0xd8c0 <mmc_spi_TXRX>
    d040:	8f 71       	andi	r24, 0x1F	; 31
    d042:	31 e0       	ldi	r19, 0x01	; 1
    d044:	20 e0       	ldi	r18, 0x00	; 0
    d046:	85 30       	cpi	r24, 0x05	; 5
    d048:	09 f0       	breq	.+2      	; 0xd04c <xmit_datablock+0x3c>
    d04a:	30 e0       	ldi	r19, 0x00	; 0
    d04c:	83 2f       	mov	r24, r19
    d04e:	92 2f       	mov	r25, r18
    d050:	02 c0       	rjmp	.+4      	; 0xd056 <xmit_datablock+0x46>
    d052:	81 e0       	ldi	r24, 0x01	; 1
    d054:	90 e0       	ldi	r25, 0x00	; 0
    d056:	cf 91       	pop	r28
    d058:	1f 91       	pop	r17
    d05a:	0f 91       	pop	r16
    d05c:	08 95       	ret

0000d05e <mmc_disk_initialize>:
    d05e:	a4 e0       	ldi	r26, 0x04	; 4
    d060:	b0 e0       	ldi	r27, 0x00	; 0
    d062:	e5 e3       	ldi	r30, 0x35	; 53
    d064:	f8 e6       	ldi	r31, 0x68	; 104
    d066:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    d06a:	59 d4       	rcall	.+2226   	; 0xd91e <mmc_power_off>
    d06c:	64 e6       	ldi	r22, 0x64	; 100
    d06e:	70 e0       	ldi	r23, 0x00	; 0
    d070:	80 e0       	ldi	r24, 0x00	; 0
    d072:	90 e0       	ldi	r25, 0x00	; 0
    d074:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <delayms>
    d078:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d07c:	81 fd       	sbrc	r24, 1
    d07e:	8e c0       	rjmp	.+284    	; 0xd19c <mmc_disk_initialize+0x13e>
    d080:	4d d4       	rcall	.+2202   	; 0xd91c <mmc_power_on>
    d082:	f9 d3       	rcall	.+2034   	; 0xd876 <mmc_slow>
    d084:	1a e0       	ldi	r17, 0x0A	; 10
    d086:	8f ef       	ldi	r24, 0xFF	; 255
    d088:	21 df       	rcall	.-446    	; 0xcecc <xchg_spi>
    d08a:	11 50       	subi	r17, 0x01	; 1
    d08c:	e1 f7       	brne	.-8      	; 0xd086 <mmc_disk_initialize+0x28>
    d08e:	40 e0       	ldi	r20, 0x00	; 0
    d090:	50 e0       	ldi	r21, 0x00	; 0
    d092:	ba 01       	movw	r22, r20
    d094:	80 e0       	ldi	r24, 0x00	; 0
    d096:	79 df       	rcall	.-270    	; 0xcf8a <send_cmd>
    d098:	81 30       	cpi	r24, 0x01	; 1
    d09a:	09 f0       	breq	.+2      	; 0xd09e <mmc_disk_initialize+0x40>
    d09c:	6f c0       	rjmp	.+222    	; 0xd17c <mmc_disk_initialize+0x11e>
    d09e:	80 ed       	ldi	r24, 0xD0	; 208
    d0a0:	97 e0       	ldi	r25, 0x07	; 7
    d0a2:	11 d4       	rcall	.+2082   	; 0xd8c6 <mmc_set_ms_timeout>
    d0a4:	4a ea       	ldi	r20, 0xAA	; 170
    d0a6:	51 e0       	ldi	r21, 0x01	; 1
    d0a8:	60 e0       	ldi	r22, 0x00	; 0
    d0aa:	70 e0       	ldi	r23, 0x00	; 0
    d0ac:	88 e0       	ldi	r24, 0x08	; 8
    d0ae:	6d df       	rcall	.-294    	; 0xcf8a <send_cmd>
    d0b0:	81 30       	cpi	r24, 0x01	; 1
    d0b2:	09 f0       	breq	.+2      	; 0xd0b6 <mmc_disk_initialize+0x58>
    d0b4:	3d c0       	rjmp	.+122    	; 0xd130 <mmc_disk_initialize+0xd2>
    d0b6:	8e 01       	movw	r16, r28
    d0b8:	0f 5f       	subi	r16, 0xFF	; 255
    d0ba:	1f 4f       	sbci	r17, 0xFF	; 255
    d0bc:	6e 01       	movw	r12, r28
    d0be:	85 e0       	ldi	r24, 0x05	; 5
    d0c0:	c8 0e       	add	r12, r24
    d0c2:	d1 1c       	adc	r13, r1
    d0c4:	78 01       	movw	r14, r16
    d0c6:	8f ef       	ldi	r24, 0xFF	; 255
    d0c8:	fb d3       	rcall	.+2038   	; 0xd8c0 <mmc_spi_TXRX>
    d0ca:	f7 01       	movw	r30, r14
    d0cc:	81 93       	st	Z+, r24
    d0ce:	7f 01       	movw	r14, r30
    d0d0:	ce 16       	cp	r12, r30
    d0d2:	df 06       	cpc	r13, r31
    d0d4:	c1 f7       	brne	.-16     	; 0xd0c6 <mmc_disk_initialize+0x68>
    d0d6:	8b 81       	ldd	r24, Y+3	; 0x03
    d0d8:	81 30       	cpi	r24, 0x01	; 1
    d0da:	09 f0       	breq	.+2      	; 0xd0de <mmc_disk_initialize+0x80>
    d0dc:	4f c0       	rjmp	.+158    	; 0xd17c <mmc_disk_initialize+0x11e>
    d0de:	8c 81       	ldd	r24, Y+4	; 0x04
    d0e0:	8a 3a       	cpi	r24, 0xAA	; 170
    d0e2:	09 f0       	breq	.+2      	; 0xd0e6 <mmc_disk_initialize+0x88>
    d0e4:	4b c0       	rjmp	.+150    	; 0xd17c <mmc_disk_initialize+0x11e>
    d0e6:	f6 d3       	rcall	.+2028   	; 0xd8d4 <mmc_test_timeout>
    d0e8:	89 2b       	or	r24, r25
    d0ea:	29 f0       	breq	.+10     	; 0xd0f6 <mmc_disk_initialize+0x98>
    d0ec:	f3 d3       	rcall	.+2022   	; 0xd8d4 <mmc_test_timeout>
    d0ee:	89 2b       	or	r24, r25
    d0f0:	09 f0       	breq	.+2      	; 0xd0f4 <mmc_disk_initialize+0x96>
    d0f2:	44 c0       	rjmp	.+136    	; 0xd17c <mmc_disk_initialize+0x11e>
    d0f4:	09 c0       	rjmp	.+18     	; 0xd108 <mmc_disk_initialize+0xaa>
    d0f6:	40 e0       	ldi	r20, 0x00	; 0
    d0f8:	50 e0       	ldi	r21, 0x00	; 0
    d0fa:	60 e0       	ldi	r22, 0x00	; 0
    d0fc:	70 e4       	ldi	r23, 0x40	; 64
    d0fe:	89 ea       	ldi	r24, 0xA9	; 169
    d100:	44 df       	rcall	.-376    	; 0xcf8a <send_cmd>
    d102:	81 11       	cpse	r24, r1
    d104:	f0 cf       	rjmp	.-32     	; 0xd0e6 <mmc_disk_initialize+0x88>
    d106:	f2 cf       	rjmp	.-28     	; 0xd0ec <mmc_disk_initialize+0x8e>
    d108:	40 e0       	ldi	r20, 0x00	; 0
    d10a:	50 e0       	ldi	r21, 0x00	; 0
    d10c:	ba 01       	movw	r22, r20
    d10e:	8a e3       	ldi	r24, 0x3A	; 58
    d110:	3c df       	rcall	.-392    	; 0xcf8a <send_cmd>
    d112:	81 11       	cpse	r24, r1
    d114:	33 c0       	rjmp	.+102    	; 0xd17c <mmc_disk_initialize+0x11e>
    d116:	8f ef       	ldi	r24, 0xFF	; 255
    d118:	d3 d3       	rcall	.+1958   	; 0xd8c0 <mmc_spi_TXRX>
    d11a:	f8 01       	movw	r30, r16
    d11c:	81 93       	st	Z+, r24
    d11e:	8f 01       	movw	r16, r30
    d120:	ce 16       	cp	r12, r30
    d122:	df 06       	cpc	r13, r31
    d124:	c1 f7       	brne	.-16     	; 0xd116 <mmc_disk_initialize+0xb8>
    d126:	89 81       	ldd	r24, Y+1	; 0x01
    d128:	86 fd       	sbrc	r24, 6
    d12a:	2a c0       	rjmp	.+84     	; 0xd180 <mmc_disk_initialize+0x122>
    d12c:	14 e0       	ldi	r17, 0x04	; 4
    d12e:	29 c0       	rjmp	.+82     	; 0xd182 <mmc_disk_initialize+0x124>
    d130:	80 ed       	ldi	r24, 0xD0	; 208
    d132:	97 e0       	ldi	r25, 0x07	; 7
    d134:	c8 d3       	rcall	.+1936   	; 0xd8c6 <mmc_set_ms_timeout>
    d136:	40 e0       	ldi	r20, 0x00	; 0
    d138:	50 e0       	ldi	r21, 0x00	; 0
    d13a:	ba 01       	movw	r22, r20
    d13c:	89 ea       	ldi	r24, 0xA9	; 169
    d13e:	25 df       	rcall	.-438    	; 0xcf8a <send_cmd>
    d140:	82 30       	cpi	r24, 0x02	; 2
    d142:	18 f0       	brcs	.+6      	; 0xd14a <mmc_disk_initialize+0xec>
    d144:	11 e0       	ldi	r17, 0x01	; 1
    d146:	01 e0       	ldi	r16, 0x01	; 1
    d148:	02 c0       	rjmp	.+4      	; 0xd14e <mmc_disk_initialize+0xf0>
    d14a:	12 e0       	ldi	r17, 0x02	; 2
    d14c:	09 ea       	ldi	r16, 0xA9	; 169
    d14e:	c2 d3       	rcall	.+1924   	; 0xd8d4 <mmc_test_timeout>
    d150:	89 2b       	or	r24, r25
    d152:	21 f0       	breq	.+8      	; 0xd15c <mmc_disk_initialize+0xfe>
    d154:	bf d3       	rcall	.+1918   	; 0xd8d4 <mmc_test_timeout>
    d156:	89 2b       	or	r24, r25
    d158:	89 f4       	brne	.+34     	; 0xd17c <mmc_disk_initialize+0x11e>
    d15a:	08 c0       	rjmp	.+16     	; 0xd16c <mmc_disk_initialize+0x10e>
    d15c:	40 e0       	ldi	r20, 0x00	; 0
    d15e:	50 e0       	ldi	r21, 0x00	; 0
    d160:	ba 01       	movw	r22, r20
    d162:	80 2f       	mov	r24, r16
    d164:	12 df       	rcall	.-476    	; 0xcf8a <send_cmd>
    d166:	81 11       	cpse	r24, r1
    d168:	f2 cf       	rjmp	.-28     	; 0xd14e <mmc_disk_initialize+0xf0>
    d16a:	f4 cf       	rjmp	.-24     	; 0xd154 <mmc_disk_initialize+0xf6>
    d16c:	40 e0       	ldi	r20, 0x00	; 0
    d16e:	52 e0       	ldi	r21, 0x02	; 2
    d170:	60 e0       	ldi	r22, 0x00	; 0
    d172:	70 e0       	ldi	r23, 0x00	; 0
    d174:	80 e1       	ldi	r24, 0x10	; 16
    d176:	09 df       	rcall	.-494    	; 0xcf8a <send_cmd>
    d178:	88 23       	and	r24, r24
    d17a:	19 f0       	breq	.+6      	; 0xd182 <mmc_disk_initialize+0x124>
    d17c:	10 e0       	ldi	r17, 0x00	; 0
    d17e:	01 c0       	rjmp	.+2      	; 0xd182 <mmc_disk_initialize+0x124>
    d180:	1c e0       	ldi	r17, 0x0C	; 12
    d182:	10 93 31 18 	sts	0x1831, r17	; 0x801831 <CardType>
    d186:	a4 de       	rcall	.-696    	; 0xced0 <deselect>
    d188:	11 23       	and	r17, r17
    d18a:	39 f0       	breq	.+14     	; 0xd19a <mmc_disk_initialize+0x13c>
    d18c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d190:	8e 7f       	andi	r24, 0xFE	; 254
    d192:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d196:	81 d3       	rcall	.+1794   	; 0xd89a <mmc_fast>
    d198:	01 c0       	rjmp	.+2      	; 0xd19c <mmc_disk_initialize+0x13e>
    d19a:	c1 d3       	rcall	.+1922   	; 0xd91e <mmc_power_off>
    d19c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d1a0:	24 96       	adiw	r28, 0x04	; 4
    d1a2:	e8 e0       	ldi	r30, 0x08	; 8
    d1a4:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000d1a8 <mmc_disk_status>:
    d1a8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d1ac:	08 95       	ret

0000d1ae <mmc_disk_read>:
    d1ae:	8f 92       	push	r8
    d1b0:	9f 92       	push	r9
    d1b2:	af 92       	push	r10
    d1b4:	bf 92       	push	r11
    d1b6:	ef 92       	push	r14
    d1b8:	ff 92       	push	r15
    d1ba:	1f 93       	push	r17
    d1bc:	cf 93       	push	r28
    d1be:	df 93       	push	r29
    d1c0:	7c 01       	movw	r14, r24
    d1c2:	4a 01       	movw	r8, r20
    d1c4:	5b 01       	movw	r10, r22
    d1c6:	e9 01       	movw	r28, r18
    d1c8:	20 97       	sbiw	r28, 0x00	; 0
    d1ca:	19 f4       	brne	.+6      	; 0xd1d2 <mmc_disk_read+0x24>
    d1cc:	81 de       	rcall	.-766    	; 0xced0 <deselect>
    d1ce:	84 e0       	ldi	r24, 0x04	; 4
    d1d0:	0d c0       	rjmp	.+26     	; 0xd1ec <mmc_disk_read+0x3e>
    d1d2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d1d6:	88 23       	and	r24, r24
    d1d8:	19 f0       	breq	.+6      	; 0xd1e0 <mmc_disk_read+0x32>
    d1da:	81 e0       	ldi	r24, 0x01	; 1
    d1dc:	0e 94 2a 24 	call	0x4854	; 0x4854 <set_error>
    d1e0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d1e4:	80 ff       	sbrs	r24, 0
    d1e6:	04 c0       	rjmp	.+8      	; 0xd1f0 <mmc_disk_read+0x42>
    d1e8:	73 de       	rcall	.-794    	; 0xced0 <deselect>
    d1ea:	83 e0       	ldi	r24, 0x03	; 3
    d1ec:	90 e0       	ldi	r25, 0x00	; 0
    d1ee:	36 c0       	rjmp	.+108    	; 0xd25c <mmc_disk_read+0xae>
    d1f0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d1f4:	81 fd       	sbrc	r24, 1
    d1f6:	f8 cf       	rjmp	.-16     	; 0xd1e8 <mmc_disk_read+0x3a>
    d1f8:	46 9a       	sbi	0x08, 6	; 8
    d1fa:	3e 9a       	sbi	0x07, 6	; 7
    d1fc:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <CardType>
    d200:	83 fd       	sbrc	r24, 3
    d202:	07 c0       	rjmp	.+14     	; 0xd212 <mmc_disk_read+0x64>
    d204:	89 e0       	ldi	r24, 0x09	; 9
    d206:	88 0c       	add	r8, r8
    d208:	99 1c       	adc	r9, r9
    d20a:	aa 1c       	adc	r10, r10
    d20c:	bb 1c       	adc	r11, r11
    d20e:	8a 95       	dec	r24
    d210:	d1 f7       	brne	.-12     	; 0xd206 <mmc_disk_read+0x58>
    d212:	c2 30       	cpi	r28, 0x02	; 2
    d214:	d1 05       	cpc	r29, r1
    d216:	10 f4       	brcc	.+4      	; 0xd21c <mmc_disk_read+0x6e>
    d218:	11 e1       	ldi	r17, 0x11	; 17
    d21a:	01 c0       	rjmp	.+2      	; 0xd21e <mmc_disk_read+0x70>
    d21c:	12 e1       	ldi	r17, 0x12	; 18
    d21e:	b5 01       	movw	r22, r10
    d220:	a4 01       	movw	r20, r8
    d222:	81 2f       	mov	r24, r17
    d224:	b2 de       	rcall	.-668    	; 0xcf8a <send_cmd>
    d226:	81 11       	cpse	r24, r1
    d228:	11 c0       	rjmp	.+34     	; 0xd24c <mmc_disk_read+0x9e>
    d22a:	60 e0       	ldi	r22, 0x00	; 0
    d22c:	72 e0       	ldi	r23, 0x02	; 2
    d22e:	c7 01       	movw	r24, r14
    d230:	55 de       	rcall	.-854    	; 0xcedc <rcvr_datablock>
    d232:	89 2b       	or	r24, r25
    d234:	21 f0       	breq	.+8      	; 0xd23e <mmc_disk_read+0x90>
    d236:	8e ef       	ldi	r24, 0xFE	; 254
    d238:	f8 1a       	sub	r15, r24
    d23a:	21 97       	sbiw	r28, 0x01	; 1
    d23c:	b1 f7       	brne	.-20     	; 0xd22a <mmc_disk_read+0x7c>
    d23e:	12 31       	cpi	r17, 0x12	; 18
    d240:	29 f4       	brne	.+10     	; 0xd24c <mmc_disk_read+0x9e>
    d242:	40 e0       	ldi	r20, 0x00	; 0
    d244:	50 e0       	ldi	r21, 0x00	; 0
    d246:	ba 01       	movw	r22, r20
    d248:	8c e0       	ldi	r24, 0x0C	; 12
    d24a:	9f de       	rcall	.-706    	; 0xcf8a <send_cmd>
    d24c:	41 de       	rcall	.-894    	; 0xced0 <deselect>
    d24e:	46 98       	cbi	0x08, 6	; 8
    d250:	3e 9a       	sbi	0x07, 6	; 7
    d252:	81 e0       	ldi	r24, 0x01	; 1
    d254:	90 e0       	ldi	r25, 0x00	; 0
    d256:	cd 2b       	or	r28, r29
    d258:	09 f4       	brne	.+2      	; 0xd25c <mmc_disk_read+0xae>
    d25a:	80 e0       	ldi	r24, 0x00	; 0
    d25c:	df 91       	pop	r29
    d25e:	cf 91       	pop	r28
    d260:	1f 91       	pop	r17
    d262:	ff 90       	pop	r15
    d264:	ef 90       	pop	r14
    d266:	bf 90       	pop	r11
    d268:	af 90       	pop	r10
    d26a:	9f 90       	pop	r9
    d26c:	8f 90       	pop	r8
    d26e:	08 95       	ret

0000d270 <mmc_disk_write>:
    d270:	a0 e0       	ldi	r26, 0x00	; 0
    d272:	b0 e0       	ldi	r27, 0x00	; 0
    d274:	ee e3       	ldi	r30, 0x3E	; 62
    d276:	f9 e6       	ldi	r31, 0x69	; 105
    d278:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    d27c:	8c 01       	movw	r16, r24
    d27e:	6a 01       	movw	r12, r20
    d280:	7b 01       	movw	r14, r22
    d282:	e9 01       	movw	r28, r18
    d284:	20 97       	sbiw	r28, 0x00	; 0
    d286:	19 f4       	brne	.+6      	; 0xd28e <mmc_disk_write+0x1e>
    d288:	23 de       	rcall	.-954    	; 0xced0 <deselect>
    d28a:	84 e0       	ldi	r24, 0x04	; 4
    d28c:	18 c0       	rjmp	.+48     	; 0xd2be <mmc_disk_write+0x4e>
    d28e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d292:	88 23       	and	r24, r24
    d294:	19 f0       	breq	.+6      	; 0xd29c <mmc_disk_write+0x2c>
    d296:	81 e0       	ldi	r24, 0x01	; 1
    d298:	0e 94 2a 24 	call	0x4854	; 0x4854 <set_error>
    d29c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d2a0:	80 ff       	sbrs	r24, 0
    d2a2:	03 c0       	rjmp	.+6      	; 0xd2aa <mmc_disk_write+0x3a>
    d2a4:	15 de       	rcall	.-982    	; 0xced0 <deselect>
    d2a6:	83 e0       	ldi	r24, 0x03	; 3
    d2a8:	0a c0       	rjmp	.+20     	; 0xd2be <mmc_disk_write+0x4e>
    d2aa:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d2ae:	81 fd       	sbrc	r24, 1
    d2b0:	f9 cf       	rjmp	.-14     	; 0xd2a4 <mmc_disk_write+0x34>
    d2b2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d2b6:	82 ff       	sbrs	r24, 2
    d2b8:	04 c0       	rjmp	.+8      	; 0xd2c2 <mmc_disk_write+0x52>
    d2ba:	0a de       	rcall	.-1004   	; 0xced0 <deselect>
    d2bc:	82 e0       	ldi	r24, 0x02	; 2
    d2be:	90 e0       	ldi	r25, 0x00	; 0
    d2c0:	46 c0       	rjmp	.+140    	; 0xd34e <mmc_disk_write+0xde>
    d2c2:	46 9a       	sbi	0x08, 6	; 8
    d2c4:	3e 9a       	sbi	0x07, 6	; 7
    d2c6:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <CardType>
    d2ca:	83 fd       	sbrc	r24, 3
    d2cc:	07 c0       	rjmp	.+14     	; 0xd2dc <mmc_disk_write+0x6c>
    d2ce:	99 e0       	ldi	r25, 0x09	; 9
    d2d0:	cc 0c       	add	r12, r12
    d2d2:	dd 1c       	adc	r13, r13
    d2d4:	ee 1c       	adc	r14, r14
    d2d6:	ff 1c       	adc	r15, r15
    d2d8:	9a 95       	dec	r25
    d2da:	d1 f7       	brne	.-12     	; 0xd2d0 <mmc_disk_write+0x60>
    d2dc:	c1 30       	cpi	r28, 0x01	; 1
    d2de:	d1 05       	cpc	r29, r1
    d2e0:	89 f4       	brne	.+34     	; 0xd304 <mmc_disk_write+0x94>
    d2e2:	b7 01       	movw	r22, r14
    d2e4:	a6 01       	movw	r20, r12
    d2e6:	88 e1       	ldi	r24, 0x18	; 24
    d2e8:	50 de       	rcall	.-864    	; 0xcf8a <send_cmd>
    d2ea:	81 11       	cpse	r24, r1
    d2ec:	26 c0       	rjmp	.+76     	; 0xd33a <mmc_disk_write+0xca>
    d2ee:	6e ef       	ldi	r22, 0xFE	; 254
    d2f0:	c8 01       	movw	r24, r16
    d2f2:	8e de       	rcall	.-740    	; 0xd010 <xmit_datablock>
    d2f4:	31 e0       	ldi	r19, 0x01	; 1
    d2f6:	20 e0       	ldi	r18, 0x00	; 0
    d2f8:	89 2b       	or	r24, r25
    d2fa:	09 f0       	breq	.+2      	; 0xd2fe <mmc_disk_write+0x8e>
    d2fc:	30 e0       	ldi	r19, 0x00	; 0
    d2fe:	c3 2f       	mov	r28, r19
    d300:	d2 2f       	mov	r29, r18
    d302:	1d c0       	rjmp	.+58     	; 0xd33e <mmc_disk_write+0xce>
    d304:	86 70       	andi	r24, 0x06	; 6
    d306:	29 f0       	breq	.+10     	; 0xd312 <mmc_disk_write+0xa2>
    d308:	ae 01       	movw	r20, r28
    d30a:	60 e0       	ldi	r22, 0x00	; 0
    d30c:	70 e0       	ldi	r23, 0x00	; 0
    d30e:	87 e9       	ldi	r24, 0x97	; 151
    d310:	3c de       	rcall	.-904    	; 0xcf8a <send_cmd>
    d312:	b7 01       	movw	r22, r14
    d314:	a6 01       	movw	r20, r12
    d316:	89 e1       	ldi	r24, 0x19	; 25
    d318:	38 de       	rcall	.-912    	; 0xcf8a <send_cmd>
    d31a:	81 11       	cpse	r24, r1
    d31c:	10 c0       	rjmp	.+32     	; 0xd33e <mmc_disk_write+0xce>
    d31e:	6c ef       	ldi	r22, 0xFC	; 252
    d320:	c8 01       	movw	r24, r16
    d322:	76 de       	rcall	.-788    	; 0xd010 <xmit_datablock>
    d324:	89 2b       	or	r24, r25
    d326:	19 f0       	breq	.+6      	; 0xd32e <mmc_disk_write+0xbe>
    d328:	1e 5f       	subi	r17, 0xFE	; 254
    d32a:	21 97       	sbiw	r28, 0x01	; 1
    d32c:	c1 f7       	brne	.-16     	; 0xd31e <mmc_disk_write+0xae>
    d32e:	6d ef       	ldi	r22, 0xFD	; 253
    d330:	80 e0       	ldi	r24, 0x00	; 0
    d332:	90 e0       	ldi	r25, 0x00	; 0
    d334:	6d de       	rcall	.-806    	; 0xd010 <xmit_datablock>
    d336:	89 2b       	or	r24, r25
    d338:	11 f4       	brne	.+4      	; 0xd33e <mmc_disk_write+0xce>
    d33a:	c1 e0       	ldi	r28, 0x01	; 1
    d33c:	d0 e0       	ldi	r29, 0x00	; 0
    d33e:	c8 dd       	rcall	.-1136   	; 0xced0 <deselect>
    d340:	46 98       	cbi	0x08, 6	; 8
    d342:	3e 9a       	sbi	0x07, 6	; 7
    d344:	81 e0       	ldi	r24, 0x01	; 1
    d346:	90 e0       	ldi	r25, 0x00	; 0
    d348:	cd 2b       	or	r28, r29
    d34a:	09 f4       	brne	.+2      	; 0xd34e <mmc_disk_write+0xde>
    d34c:	80 e0       	ldi	r24, 0x00	; 0
    d34e:	cd b7       	in	r28, 0x3d	; 61
    d350:	de b7       	in	r29, 0x3e	; 62
    d352:	e8 e0       	ldi	r30, 0x08	; 8
    d354:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000d358 <mmc_disk_ioctl>:
    d358:	a0 e1       	ldi	r26, 0x10	; 16
    d35a:	b0 e0       	ldi	r27, 0x00	; 0
    d35c:	e2 eb       	ldi	r30, 0xB2	; 178
    d35e:	f9 e6       	ldi	r31, 0x69	; 105
    d360:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    d364:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d368:	90 fd       	sbrc	r25, 0
    d36a:	31 c2       	rjmp	.+1122   	; 0xd7ce <mmc_disk_ioctl+0x476>
    d36c:	8b 01       	movw	r16, r22
    d36e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d372:	91 ff       	sbrs	r25, 1
    d374:	02 c0       	rjmp	.+4      	; 0xd37a <mmc_disk_ioctl+0x22>
    d376:	ac dd       	rcall	.-1192   	; 0xced0 <deselect>
    d378:	2a c2       	rjmp	.+1108   	; 0xd7ce <mmc_disk_ioctl+0x476>
    d37a:	83 33       	cpi	r24, 0x33	; 51
    d37c:	09 f4       	brne	.+2      	; 0xd380 <mmc_disk_ioctl+0x28>
    d37e:	01 c1       	rjmp	.+514    	; 0xd582 <mmc_disk_ioctl+0x22a>
    d380:	a0 f4       	brcc	.+40     	; 0xd3aa <mmc_disk_ioctl+0x52>
    d382:	83 30       	cpi	r24, 0x03	; 3
    d384:	09 f4       	brne	.+2      	; 0xd388 <mmc_disk_ioctl+0x30>
    d386:	85 c0       	rjmp	.+266    	; 0xd492 <mmc_disk_ioctl+0x13a>
    d388:	28 f4       	brcc	.+10     	; 0xd394 <mmc_disk_ioctl+0x3c>
    d38a:	88 23       	and	r24, r24
    d38c:	11 f1       	breq	.+68     	; 0xd3d2 <mmc_disk_ioctl+0x7a>
    d38e:	81 30       	cpi	r24, 0x01	; 1
    d390:	11 f1       	breq	.+68     	; 0xd3d6 <mmc_disk_ioctl+0x7e>
    d392:	1f c2       	rjmp	.+1086   	; 0xd7d2 <mmc_disk_ioctl+0x47a>
    d394:	87 30       	cpi	r24, 0x07	; 7
    d396:	09 f4       	brne	.+2      	; 0xd39a <mmc_disk_ioctl+0x42>
    d398:	2a c1       	rjmp	.+596    	; 0xd5ee <mmc_disk_ioctl+0x296>
    d39a:	82 33       	cpi	r24, 0x32	; 50
    d39c:	09 f0       	breq	.+2      	; 0xd3a0 <mmc_disk_ioctl+0x48>
    d39e:	19 c2       	rjmp	.+1074   	; 0xd7d2 <mmc_disk_ioctl+0x47a>
    d3a0:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <CardType>
    d3a4:	fb 01       	movw	r30, r22
    d3a6:	80 83       	st	Z, r24
    d3a8:	28 c1       	rjmp	.+592    	; 0xd5fa <mmc_disk_ioctl+0x2a2>
    d3aa:	86 33       	cpi	r24, 0x36	; 54
    d3ac:	09 f4       	brne	.+2      	; 0xd3b0 <mmc_disk_ioctl+0x58>
    d3ae:	0c c1       	rjmp	.+536    	; 0xd5c8 <mmc_disk_ioctl+0x270>
    d3b0:	38 f4       	brcc	.+14     	; 0xd3c0 <mmc_disk_ioctl+0x68>
    d3b2:	84 33       	cpi	r24, 0x34	; 52
    d3b4:	09 f4       	brne	.+2      	; 0xd3b8 <mmc_disk_ioctl+0x60>
    d3b6:	ea c0       	rjmp	.+468    	; 0xd58c <mmc_disk_ioctl+0x234>
    d3b8:	85 33       	cpi	r24, 0x35	; 53
    d3ba:	09 f4       	brne	.+2      	; 0xd3be <mmc_disk_ioctl+0x66>
    d3bc:	f1 c0       	rjmp	.+482    	; 0xd5a0 <mmc_disk_ioctl+0x248>
    d3be:	09 c2       	rjmp	.+1042   	; 0xd7d2 <mmc_disk_ioctl+0x47a>
    d3c0:	88 33       	cpi	r24, 0x38	; 56
    d3c2:	09 f4       	brne	.+2      	; 0xd3c6 <mmc_disk_ioctl+0x6e>
    d3c4:	74 c1       	rjmp	.+744    	; 0xd6ae <mmc_disk_ioctl+0x356>
    d3c6:	08 f4       	brcc	.+2      	; 0xd3ca <mmc_disk_ioctl+0x72>
    d3c8:	1a c1       	rjmp	.+564    	; 0xd5fe <mmc_disk_ioctl+0x2a6>
    d3ca:	89 33       	cpi	r24, 0x39	; 57
    d3cc:	09 f4       	brne	.+2      	; 0xd3d0 <mmc_disk_ioctl+0x78>
    d3ce:	bc c1       	rjmp	.+888    	; 0xd748 <mmc_disk_ioctl+0x3f0>
    d3d0:	00 c2       	rjmp	.+1024   	; 0xd7d2 <mmc_disk_ioctl+0x47a>
    d3d2:	b9 dd       	rcall	.-1166   	; 0xcf46 <select>
    d3d4:	06 c1       	rjmp	.+524    	; 0xd5e2 <mmc_disk_ioctl+0x28a>
    d3d6:	40 e0       	ldi	r20, 0x00	; 0
    d3d8:	50 e0       	ldi	r21, 0x00	; 0
    d3da:	ba 01       	movw	r22, r20
    d3dc:	89 e0       	ldi	r24, 0x09	; 9
    d3de:	d5 dd       	rcall	.-1110   	; 0xcf8a <send_cmd>
    d3e0:	81 11       	cpse	r24, r1
    d3e2:	f1 c1       	rjmp	.+994    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d3e4:	60 e1       	ldi	r22, 0x10	; 16
    d3e6:	70 e0       	ldi	r23, 0x00	; 0
    d3e8:	ce 01       	movw	r24, r28
    d3ea:	01 96       	adiw	r24, 0x01	; 1
    d3ec:	77 dd       	rcall	.-1298   	; 0xcedc <rcvr_datablock>
    d3ee:	89 2b       	or	r24, r25
    d3f0:	09 f4       	brne	.+2      	; 0xd3f4 <mmc_disk_ioctl+0x9c>
    d3f2:	e9 c1       	rjmp	.+978    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d3f4:	99 81       	ldd	r25, Y+1	; 0x01
    d3f6:	92 95       	swap	r25
    d3f8:	96 95       	lsr	r25
    d3fa:	96 95       	lsr	r25
    d3fc:	93 70       	andi	r25, 0x03	; 3
    d3fe:	29 85       	ldd	r18, Y+9	; 0x09
    d400:	4a 85       	ldd	r20, Y+10	; 0x0a
    d402:	88 85       	ldd	r24, Y+8	; 0x08
    d404:	91 30       	cpi	r25, 0x01	; 1
    d406:	d9 f4       	brne	.+54     	; 0xd43e <mmc_disk_ioctl+0xe6>
    d408:	30 e0       	ldi	r19, 0x00	; 0
    d40a:	32 2f       	mov	r19, r18
    d40c:	22 27       	eor	r18, r18
    d40e:	24 0f       	add	r18, r20
    d410:	31 1d       	adc	r19, r1
    d412:	8f 73       	andi	r24, 0x3F	; 63
    d414:	90 e0       	ldi	r25, 0x00	; 0
    d416:	a0 e0       	ldi	r26, 0x00	; 0
    d418:	b0 e0       	ldi	r27, 0x00	; 0
    d41a:	dc 01       	movw	r26, r24
    d41c:	99 27       	eor	r25, r25
    d41e:	88 27       	eor	r24, r24
    d420:	01 96       	adiw	r24, 0x01	; 1
    d422:	a1 1d       	adc	r26, r1
    d424:	b1 1d       	adc	r27, r1
    d426:	82 0f       	add	r24, r18
    d428:	93 1f       	adc	r25, r19
    d42a:	a1 1d       	adc	r26, r1
    d42c:	b1 1d       	adc	r27, r1
    d42e:	fa e0       	ldi	r31, 0x0A	; 10
    d430:	88 0f       	add	r24, r24
    d432:	99 1f       	adc	r25, r25
    d434:	aa 1f       	adc	r26, r26
    d436:	bb 1f       	adc	r27, r27
    d438:	fa 95       	dec	r31
    d43a:	d1 f7       	brne	.-12     	; 0xd430 <mmc_disk_ioctl+0xd8>
    d43c:	9b c0       	rjmp	.+310    	; 0xd574 <mmc_disk_ioctl+0x21c>
    d43e:	22 95       	swap	r18
    d440:	26 95       	lsr	r18
    d442:	26 95       	lsr	r18
    d444:	23 70       	andi	r18, 0x03	; 3
    d446:	f4 e0       	ldi	r31, 0x04	; 4
    d448:	8f 9f       	mul	r24, r31
    d44a:	c0 01       	movw	r24, r0
    d44c:	11 24       	eor	r1, r1
    d44e:	82 0f       	add	r24, r18
    d450:	91 1d       	adc	r25, r1
    d452:	01 96       	adiw	r24, 0x01	; 1
    d454:	2f 81       	ldd	r18, Y+7	; 0x07
    d456:	23 70       	andi	r18, 0x03	; 3
    d458:	30 e0       	ldi	r19, 0x00	; 0
    d45a:	32 2f       	mov	r19, r18
    d45c:	22 27       	eor	r18, r18
    d45e:	33 0f       	add	r19, r19
    d460:	33 0f       	add	r19, r19
    d462:	82 0f       	add	r24, r18
    d464:	93 1f       	adc	r25, r19
    d466:	a0 e0       	ldi	r26, 0x00	; 0
    d468:	b0 e0       	ldi	r27, 0x00	; 0
    d46a:	2e 81       	ldd	r18, Y+6	; 0x06
    d46c:	32 2f       	mov	r19, r18
    d46e:	3f 70       	andi	r19, 0x0F	; 15
    d470:	2b 85       	ldd	r18, Y+11	; 0x0b
    d472:	22 1f       	adc	r18, r18
    d474:	22 27       	eor	r18, r18
    d476:	22 1f       	adc	r18, r18
    d478:	23 0f       	add	r18, r19
    d47a:	43 70       	andi	r20, 0x03	; 3
    d47c:	44 0f       	add	r20, r20
    d47e:	42 0f       	add	r20, r18
    d480:	47 50       	subi	r20, 0x07	; 7
    d482:	04 c0       	rjmp	.+8      	; 0xd48c <mmc_disk_ioctl+0x134>
    d484:	88 0f       	add	r24, r24
    d486:	99 1f       	adc	r25, r25
    d488:	aa 1f       	adc	r26, r26
    d48a:	bb 1f       	adc	r27, r27
    d48c:	4a 95       	dec	r20
    d48e:	d2 f7       	brpl	.-12     	; 0xd484 <mmc_disk_ioctl+0x12c>
    d490:	71 c0       	rjmp	.+226    	; 0xd574 <mmc_disk_ioctl+0x21c>
    d492:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <CardType>
    d496:	40 e0       	ldi	r20, 0x00	; 0
    d498:	50 e0       	ldi	r21, 0x00	; 0
    d49a:	ba 01       	movw	r22, r20
    d49c:	82 ff       	sbrs	r24, 2
    d49e:	24 c0       	rjmp	.+72     	; 0xd4e8 <mmc_disk_ioctl+0x190>
    d4a0:	8d e8       	ldi	r24, 0x8D	; 141
    d4a2:	73 dd       	rcall	.-1306   	; 0xcf8a <send_cmd>
    d4a4:	81 11       	cpse	r24, r1
    d4a6:	8f c1       	rjmp	.+798    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d4a8:	8f ef       	ldi	r24, 0xFF	; 255
    d4aa:	10 dd       	rcall	.-1504   	; 0xcecc <xchg_spi>
    d4ac:	60 e1       	ldi	r22, 0x10	; 16
    d4ae:	70 e0       	ldi	r23, 0x00	; 0
    d4b0:	ce 01       	movw	r24, r28
    d4b2:	01 96       	adiw	r24, 0x01	; 1
    d4b4:	13 dd       	rcall	.-1498   	; 0xcedc <rcvr_datablock>
    d4b6:	89 2b       	or	r24, r25
    d4b8:	09 f4       	brne	.+2      	; 0xd4bc <mmc_disk_ioctl+0x164>
    d4ba:	85 c1       	rjmp	.+778    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d4bc:	50 e3       	ldi	r21, 0x30	; 48
    d4be:	f5 2e       	mov	r15, r21
    d4c0:	8f ef       	ldi	r24, 0xFF	; 255
    d4c2:	04 dd       	rcall	.-1528   	; 0xcecc <xchg_spi>
    d4c4:	fa 94       	dec	r15
    d4c6:	f1 10       	cpse	r15, r1
    d4c8:	fb cf       	rjmp	.-10     	; 0xd4c0 <mmc_disk_ioctl+0x168>
    d4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    d4cc:	22 95       	swap	r18
    d4ce:	2f 70       	andi	r18, 0x0F	; 15
    d4d0:	80 e1       	ldi	r24, 0x10	; 16
    d4d2:	90 e0       	ldi	r25, 0x00	; 0
    d4d4:	a0 e0       	ldi	r26, 0x00	; 0
    d4d6:	b0 e0       	ldi	r27, 0x00	; 0
    d4d8:	04 c0       	rjmp	.+8      	; 0xd4e2 <mmc_disk_ioctl+0x18a>
    d4da:	88 0f       	add	r24, r24
    d4dc:	99 1f       	adc	r25, r25
    d4de:	aa 1f       	adc	r26, r26
    d4e0:	bb 1f       	adc	r27, r27
    d4e2:	2a 95       	dec	r18
    d4e4:	d2 f7       	brpl	.-12     	; 0xd4da <mmc_disk_ioctl+0x182>
    d4e6:	46 c0       	rjmp	.+140    	; 0xd574 <mmc_disk_ioctl+0x21c>
    d4e8:	89 e0       	ldi	r24, 0x09	; 9
    d4ea:	4f dd       	rcall	.-1378   	; 0xcf8a <send_cmd>
    d4ec:	81 11       	cpse	r24, r1
    d4ee:	6b c1       	rjmp	.+726    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d4f0:	60 e1       	ldi	r22, 0x10	; 16
    d4f2:	70 e0       	ldi	r23, 0x00	; 0
    d4f4:	ce 01       	movw	r24, r28
    d4f6:	01 96       	adiw	r24, 0x01	; 1
    d4f8:	f1 dc       	rcall	.-1566   	; 0xcedc <rcvr_datablock>
    d4fa:	89 2b       	or	r24, r25
    d4fc:	09 f4       	brne	.+2      	; 0xd500 <mmc_disk_ioctl+0x1a8>
    d4fe:	63 c1       	rjmp	.+710    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d500:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <CardType>
    d504:	2b 85       	ldd	r18, Y+11	; 0x0b
    d506:	8c 85       	ldd	r24, Y+12	; 0x0c
    d508:	91 ff       	sbrs	r25, 1
    d50a:	16 c0       	rjmp	.+44     	; 0xd538 <mmc_disk_ioctl+0x1e0>
    d50c:	2f 73       	andi	r18, 0x3F	; 63
    d50e:	88 1f       	adc	r24, r24
    d510:	88 27       	eor	r24, r24
    d512:	88 1f       	adc	r24, r24
    d514:	90 e0       	ldi	r25, 0x00	; 0
    d516:	01 96       	adiw	r24, 0x01	; 1
    d518:	82 0f       	add	r24, r18
    d51a:	91 1d       	adc	r25, r1
    d51c:	82 0f       	add	r24, r18
    d51e:	91 1d       	adc	r25, r1
    d520:	2e 85       	ldd	r18, Y+14	; 0x0e
    d522:	22 95       	swap	r18
    d524:	26 95       	lsr	r18
    d526:	26 95       	lsr	r18
    d528:	23 70       	andi	r18, 0x03	; 3
    d52a:	21 50       	subi	r18, 0x01	; 1
    d52c:	02 c0       	rjmp	.+4      	; 0xd532 <mmc_disk_ioctl+0x1da>
    d52e:	88 0f       	add	r24, r24
    d530:	99 1f       	adc	r25, r25
    d532:	2a 95       	dec	r18
    d534:	e2 f7       	brpl	.-8      	; 0xd52e <mmc_disk_ioctl+0x1d6>
    d536:	1c c0       	rjmp	.+56     	; 0xd570 <mmc_disk_ioctl+0x218>
    d538:	38 2f       	mov	r19, r24
    d53a:	33 70       	andi	r19, 0x03	; 3
    d53c:	82 95       	swap	r24
    d53e:	86 95       	lsr	r24
    d540:	87 70       	andi	r24, 0x07	; 7
    d542:	90 e0       	ldi	r25, 0x00	; 0
    d544:	f8 e0       	ldi	r31, 0x08	; 8
    d546:	3f 9f       	mul	r19, r31
    d548:	80 0d       	add	r24, r0
    d54a:	91 1d       	adc	r25, r1
    d54c:	11 24       	eor	r1, r1
    d54e:	01 96       	adiw	r24, 0x01	; 1
    d550:	2c 77       	andi	r18, 0x7C	; 124
    d552:	30 e0       	ldi	r19, 0x00	; 0
    d554:	35 95       	asr	r19
    d556:	27 95       	ror	r18
    d558:	35 95       	asr	r19
    d55a:	27 95       	ror	r18
    d55c:	2f 5f       	subi	r18, 0xFF	; 255
    d55e:	3f 4f       	sbci	r19, 0xFF	; 255
    d560:	82 9f       	mul	r24, r18
    d562:	a0 01       	movw	r20, r0
    d564:	83 9f       	mul	r24, r19
    d566:	50 0d       	add	r21, r0
    d568:	92 9f       	mul	r25, r18
    d56a:	50 0d       	add	r21, r0
    d56c:	11 24       	eor	r1, r1
    d56e:	ca 01       	movw	r24, r20
    d570:	a0 e0       	ldi	r26, 0x00	; 0
    d572:	b0 e0       	ldi	r27, 0x00	; 0
    d574:	f8 01       	movw	r30, r16
    d576:	80 83       	st	Z, r24
    d578:	91 83       	std	Z+1, r25	; 0x01
    d57a:	a2 83       	std	Z+2, r26	; 0x02
    d57c:	b3 83       	std	Z+3, r27	; 0x03
    d57e:	00 e0       	ldi	r16, 0x00	; 0
    d580:	23 c1       	rjmp	.+582    	; 0xd7c8 <mmc_disk_ioctl+0x470>
    d582:	40 e0       	ldi	r20, 0x00	; 0
    d584:	50 e0       	ldi	r21, 0x00	; 0
    d586:	ba 01       	movw	r22, r20
    d588:	89 e0       	ldi	r24, 0x09	; 9
    d58a:	04 c0       	rjmp	.+8      	; 0xd594 <mmc_disk_ioctl+0x23c>
    d58c:	40 e0       	ldi	r20, 0x00	; 0
    d58e:	50 e0       	ldi	r21, 0x00	; 0
    d590:	ba 01       	movw	r22, r20
    d592:	8a e0       	ldi	r24, 0x0A	; 10
    d594:	fa dc       	rcall	.-1548   	; 0xcf8a <send_cmd>
    d596:	81 11       	cpse	r24, r1
    d598:	16 c1       	rjmp	.+556    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d59a:	60 e1       	ldi	r22, 0x10	; 16
    d59c:	70 e0       	ldi	r23, 0x00	; 0
    d59e:	1f c0       	rjmp	.+62     	; 0xd5de <mmc_disk_ioctl+0x286>
    d5a0:	40 e0       	ldi	r20, 0x00	; 0
    d5a2:	50 e0       	ldi	r21, 0x00	; 0
    d5a4:	ba 01       	movw	r22, r20
    d5a6:	8a e3       	ldi	r24, 0x3A	; 58
    d5a8:	f0 dc       	rcall	.-1568   	; 0xcf8a <send_cmd>
    d5aa:	81 11       	cpse	r24, r1
    d5ac:	0c c1       	rjmp	.+536    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d5ae:	78 01       	movw	r14, r16
    d5b0:	f4 e0       	ldi	r31, 0x04	; 4
    d5b2:	ef 0e       	add	r14, r31
    d5b4:	f1 1c       	adc	r15, r1
    d5b6:	8f ef       	ldi	r24, 0xFF	; 255
    d5b8:	83 d1       	rcall	.+774    	; 0xd8c0 <mmc_spi_TXRX>
    d5ba:	f8 01       	movw	r30, r16
    d5bc:	81 93       	st	Z+, r24
    d5be:	8f 01       	movw	r16, r30
    d5c0:	ee 15       	cp	r30, r14
    d5c2:	ff 05       	cpc	r31, r15
    d5c4:	c1 f7       	brne	.-16     	; 0xd5b6 <mmc_disk_ioctl+0x25e>
    d5c6:	db cf       	rjmp	.-74     	; 0xd57e <mmc_disk_ioctl+0x226>
    d5c8:	40 e0       	ldi	r20, 0x00	; 0
    d5ca:	50 e0       	ldi	r21, 0x00	; 0
    d5cc:	ba 01       	movw	r22, r20
    d5ce:	8d e8       	ldi	r24, 0x8D	; 141
    d5d0:	dc dc       	rcall	.-1608   	; 0xcf8a <send_cmd>
    d5d2:	81 11       	cpse	r24, r1
    d5d4:	f8 c0       	rjmp	.+496    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d5d6:	8f ef       	ldi	r24, 0xFF	; 255
    d5d8:	79 dc       	rcall	.-1806   	; 0xcecc <xchg_spi>
    d5da:	60 e4       	ldi	r22, 0x40	; 64
    d5dc:	70 e0       	ldi	r23, 0x00	; 0
    d5de:	c8 01       	movw	r24, r16
    d5e0:	7d dc       	rcall	.-1798   	; 0xcedc <rcvr_datablock>
    d5e2:	01 e0       	ldi	r16, 0x01	; 1
    d5e4:	10 e0       	ldi	r17, 0x00	; 0
    d5e6:	89 2b       	or	r24, r25
    d5e8:	09 f4       	brne	.+2      	; 0xd5ec <mmc_disk_ioctl+0x294>
    d5ea:	ef c0       	rjmp	.+478    	; 0xd7ca <mmc_disk_ioctl+0x472>
    d5ec:	ea c0       	rjmp	.+468    	; 0xd7c2 <mmc_disk_ioctl+0x46a>
    d5ee:	97 d1       	rcall	.+814    	; 0xd91e <mmc_power_off>
    d5f0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5f4:	81 60       	ori	r24, 0x01	; 1
    d5f6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d5fa:	00 e0       	ldi	r16, 0x00	; 0
    d5fc:	eb c0       	rjmp	.+470    	; 0xd7d4 <mmc_disk_ioctl+0x47c>
    d5fe:	fb 01       	movw	r30, r22
    d600:	43 81       	ldd	r20, Z+3	; 0x03
    d602:	54 81       	ldd	r21, Z+4	; 0x04
    d604:	65 81       	ldd	r22, Z+5	; 0x05
    d606:	76 81       	ldd	r23, Z+6	; 0x06
    d608:	39 e0       	ldi	r19, 0x09	; 9
    d60a:	44 0f       	add	r20, r20
    d60c:	55 1f       	adc	r21, r21
    d60e:	66 1f       	adc	r22, r22
    d610:	77 1f       	adc	r23, r23
    d612:	3a 95       	dec	r19
    d614:	d1 f7       	brne	.-12     	; 0xd60a <mmc_disk_ioctl+0x2b2>
    d616:	70 68       	ori	r23, 0x80	; 128
    d618:	80 81       	ld	r24, Z
    d61a:	90 e0       	ldi	r25, 0x00	; 0
    d61c:	a0 e0       	ldi	r26, 0x00	; 0
    d61e:	b0 e0       	ldi	r27, 0x00	; 0
    d620:	2c e1       	ldi	r18, 0x1C	; 28
    d622:	88 0f       	add	r24, r24
    d624:	99 1f       	adc	r25, r25
    d626:	aa 1f       	adc	r26, r26
    d628:	bb 1f       	adc	r27, r27
    d62a:	2a 95       	dec	r18
    d62c:	d1 f7       	brne	.-12     	; 0xd622 <mmc_disk_ioctl+0x2ca>
    d62e:	48 2b       	or	r20, r24
    d630:	59 2b       	or	r21, r25
    d632:	6a 2b       	or	r22, r26
    d634:	7b 2b       	or	r23, r27
    d636:	81 81       	ldd	r24, Z+1	; 0x01
    d638:	92 81       	ldd	r25, Z+2	; 0x02
    d63a:	01 97       	sbiw	r24, 0x01	; 1
    d63c:	91 70       	andi	r25, 0x01	; 1
    d63e:	a0 e0       	ldi	r26, 0x00	; 0
    d640:	b0 e0       	ldi	r27, 0x00	; 0
    d642:	48 2b       	or	r20, r24
    d644:	59 2b       	or	r21, r25
    d646:	6a 2b       	or	r22, r26
    d648:	7b 2b       	or	r23, r27
    d64a:	80 e3       	ldi	r24, 0x30	; 48
    d64c:	9e dc       	rcall	.-1732   	; 0xcf8a <send_cmd>
    d64e:	81 11       	cpse	r24, r1
    d650:	ba c0       	rjmp	.+372    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d652:	88 ee       	ldi	r24, 0xE8	; 232
    d654:	93 e0       	ldi	r25, 0x03	; 3
    d656:	37 d1       	rcall	.+622    	; 0xd8c6 <mmc_set_ms_timeout>
    d658:	8f ef       	ldi	r24, 0xFF	; 255
    d65a:	32 d1       	rcall	.+612    	; 0xd8c0 <mmc_spi_TXRX>
    d65c:	8f 3f       	cpi	r24, 0xFF	; 255
    d65e:	21 f4       	brne	.+8      	; 0xd668 <mmc_disk_ioctl+0x310>
    d660:	39 d1       	rcall	.+626    	; 0xd8d4 <mmc_test_timeout>
    d662:	89 2b       	or	r24, r25
    d664:	c9 f3       	breq	.-14     	; 0xd658 <mmc_disk_ioctl+0x300>
    d666:	af c0       	rjmp	.+350    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d668:	8e 3f       	cpi	r24, 0xFE	; 254
    d66a:	09 f0       	breq	.+2      	; 0xd66e <mmc_disk_ioctl+0x316>
    d66c:	ac c0       	rjmp	.+344    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d66e:	f8 01       	movw	r30, r16
    d670:	e7 80       	ldd	r14, Z+7	; 0x07
    d672:	f0 84       	ldd	r15, Z+8	; 0x08
    d674:	c1 80       	ldd	r12, Z+1	; 0x01
    d676:	d2 80       	ldd	r13, Z+2	; 0x02
    d678:	ce 0c       	add	r12, r14
    d67a:	df 1c       	adc	r13, r15
    d67c:	ce 14       	cp	r12, r14
    d67e:	df 04       	cpc	r13, r15
    d680:	31 f0       	breq	.+12     	; 0xd68e <mmc_disk_ioctl+0x336>
    d682:	8f ef       	ldi	r24, 0xFF	; 255
    d684:	1d d1       	rcall	.+570    	; 0xd8c0 <mmc_spi_TXRX>
    d686:	f7 01       	movw	r30, r14
    d688:	81 93       	st	Z+, r24
    d68a:	7f 01       	movw	r14, r30
    d68c:	f7 cf       	rjmp	.-18     	; 0xd67c <mmc_disk_ioctl+0x324>
    d68e:	f8 01       	movw	r30, r16
    d690:	81 81       	ldd	r24, Z+1	; 0x01
    d692:	92 81       	ldd	r25, Z+2	; 0x02
    d694:	02 e0       	ldi	r16, 0x02	; 2
    d696:	12 e0       	ldi	r17, 0x02	; 2
    d698:	08 1b       	sub	r16, r24
    d69a:	19 0b       	sbc	r17, r25
    d69c:	01 15       	cp	r16, r1
    d69e:	11 05       	cpc	r17, r1
    d6a0:	09 f4       	brne	.+2      	; 0xd6a4 <mmc_disk_ioctl+0x34c>
    d6a2:	6d cf       	rjmp	.-294    	; 0xd57e <mmc_disk_ioctl+0x226>
    d6a4:	8f ef       	ldi	r24, 0xFF	; 255
    d6a6:	12 dc       	rcall	.-2012   	; 0xcecc <xchg_spi>
    d6a8:	01 50       	subi	r16, 0x01	; 1
    d6aa:	11 09       	sbc	r17, r1
    d6ac:	f7 cf       	rjmp	.-18     	; 0xd69c <mmc_disk_ioctl+0x344>
    d6ae:	fb 01       	movw	r30, r22
    d6b0:	43 81       	ldd	r20, Z+3	; 0x03
    d6b2:	54 81       	ldd	r21, Z+4	; 0x04
    d6b4:	65 81       	ldd	r22, Z+5	; 0x05
    d6b6:	76 81       	ldd	r23, Z+6	; 0x06
    d6b8:	39 e0       	ldi	r19, 0x09	; 9
    d6ba:	44 0f       	add	r20, r20
    d6bc:	55 1f       	adc	r21, r21
    d6be:	66 1f       	adc	r22, r22
    d6c0:	77 1f       	adc	r23, r23
    d6c2:	3a 95       	dec	r19
    d6c4:	d1 f7       	brne	.-12     	; 0xd6ba <mmc_disk_ioctl+0x362>
    d6c6:	70 68       	ori	r23, 0x80	; 128
    d6c8:	80 81       	ld	r24, Z
    d6ca:	90 e0       	ldi	r25, 0x00	; 0
    d6cc:	a0 e0       	ldi	r26, 0x00	; 0
    d6ce:	b0 e0       	ldi	r27, 0x00	; 0
    d6d0:	2c e1       	ldi	r18, 0x1C	; 28
    d6d2:	88 0f       	add	r24, r24
    d6d4:	99 1f       	adc	r25, r25
    d6d6:	aa 1f       	adc	r26, r26
    d6d8:	bb 1f       	adc	r27, r27
    d6da:	2a 95       	dec	r18
    d6dc:	d1 f7       	brne	.-12     	; 0xd6d2 <mmc_disk_ioctl+0x37a>
    d6de:	48 2b       	or	r20, r24
    d6e0:	59 2b       	or	r21, r25
    d6e2:	6a 2b       	or	r22, r26
    d6e4:	7b 2b       	or	r23, r27
    d6e6:	81 81       	ldd	r24, Z+1	; 0x01
    d6e8:	92 81       	ldd	r25, Z+2	; 0x02
    d6ea:	01 97       	sbiw	r24, 0x01	; 1
    d6ec:	91 70       	andi	r25, 0x01	; 1
    d6ee:	a0 e0       	ldi	r26, 0x00	; 0
    d6f0:	b0 e0       	ldi	r27, 0x00	; 0
    d6f2:	48 2b       	or	r20, r24
    d6f4:	59 2b       	or	r21, r25
    d6f6:	6a 2b       	or	r22, r26
    d6f8:	7b 2b       	or	r23, r27
    d6fa:	81 e3       	ldi	r24, 0x31	; 49
    d6fc:	46 dc       	rcall	.-1908   	; 0xcf8a <send_cmd>
    d6fe:	81 11       	cpse	r24, r1
    d700:	62 c0       	rjmp	.+196    	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d702:	8f ef       	ldi	r24, 0xFF	; 255
    d704:	e3 db       	rcall	.-2106   	; 0xcecc <xchg_spi>
    d706:	8e ef       	ldi	r24, 0xFE	; 254
    d708:	e1 db       	rcall	.-2110   	; 0xcecc <xchg_spi>
    d70a:	f8 01       	movw	r30, r16
    d70c:	e7 80       	ldd	r14, Z+7	; 0x07
    d70e:	f0 84       	ldd	r15, Z+8	; 0x08
    d710:	c1 80       	ldd	r12, Z+1	; 0x01
    d712:	d2 80       	ldd	r13, Z+2	; 0x02
    d714:	ce 0c       	add	r12, r14
    d716:	df 1c       	adc	r13, r15
    d718:	ec 14       	cp	r14, r12
    d71a:	fd 04       	cpc	r15, r13
    d71c:	29 f0       	breq	.+10     	; 0xd728 <mmc_disk_ioctl+0x3d0>
    d71e:	f7 01       	movw	r30, r14
    d720:	81 91       	ld	r24, Z+
    d722:	7f 01       	movw	r14, r30
    d724:	d3 db       	rcall	.-2138   	; 0xcecc <xchg_spi>
    d726:	f8 cf       	rjmp	.-16     	; 0xd718 <mmc_disk_ioctl+0x3c0>
    d728:	f8 01       	movw	r30, r16
    d72a:	81 81       	ldd	r24, Z+1	; 0x01
    d72c:	92 81       	ldd	r25, Z+2	; 0x02
    d72e:	02 e0       	ldi	r16, 0x02	; 2
    d730:	12 e0       	ldi	r17, 0x02	; 2
    d732:	08 1b       	sub	r16, r24
    d734:	19 0b       	sbc	r17, r25
    d736:	8f ef       	ldi	r24, 0xFF	; 255
    d738:	01 15       	cp	r16, r1
    d73a:	11 05       	cpc	r17, r1
    d73c:	09 f4       	brne	.+2      	; 0xd740 <mmc_disk_ioctl+0x3e8>
    d73e:	3b c0       	rjmp	.+118    	; 0xd7b6 <mmc_disk_ioctl+0x45e>
    d740:	c5 db       	rcall	.-2166   	; 0xcecc <xchg_spi>
    d742:	01 50       	subi	r16, 0x01	; 1
    d744:	11 09       	sbc	r17, r1
    d746:	f7 cf       	rjmp	.-18     	; 0xd736 <mmc_disk_ioctl+0x3de>
    d748:	fb 01       	movw	r30, r22
    d74a:	43 81       	ldd	r20, Z+3	; 0x03
    d74c:	54 81       	ldd	r21, Z+4	; 0x04
    d74e:	65 81       	ldd	r22, Z+5	; 0x05
    d750:	76 81       	ldd	r23, Z+6	; 0x06
    d752:	89 e0       	ldi	r24, 0x09	; 9
    d754:	44 0f       	add	r20, r20
    d756:	55 1f       	adc	r21, r21
    d758:	66 1f       	adc	r22, r22
    d75a:	77 1f       	adc	r23, r23
    d75c:	8a 95       	dec	r24
    d75e:	d1 f7       	brne	.-12     	; 0xd754 <mmc_disk_ioctl+0x3fc>
    d760:	74 68       	ori	r23, 0x84	; 132
    d762:	80 81       	ld	r24, Z
    d764:	90 e0       	ldi	r25, 0x00	; 0
    d766:	a0 e0       	ldi	r26, 0x00	; 0
    d768:	b0 e0       	ldi	r27, 0x00	; 0
    d76a:	2c e1       	ldi	r18, 0x1C	; 28
    d76c:	88 0f       	add	r24, r24
    d76e:	99 1f       	adc	r25, r25
    d770:	aa 1f       	adc	r26, r26
    d772:	bb 1f       	adc	r27, r27
    d774:	2a 95       	dec	r18
    d776:	d1 f7       	brne	.-12     	; 0xd76c <mmc_disk_ioctl+0x414>
    d778:	48 2b       	or	r20, r24
    d77a:	59 2b       	or	r21, r25
    d77c:	6a 2b       	or	r22, r26
    d77e:	7b 2b       	or	r23, r27
    d780:	82 81       	ldd	r24, Z+2	; 0x02
    d782:	90 e0       	ldi	r25, 0x00	; 0
    d784:	a0 e0       	ldi	r26, 0x00	; 0
    d786:	b0 e0       	ldi	r27, 0x00	; 0
    d788:	48 2b       	or	r20, r24
    d78a:	59 2b       	or	r21, r25
    d78c:	6a 2b       	or	r22, r26
    d78e:	7b 2b       	or	r23, r27
    d790:	81 e3       	ldi	r24, 0x31	; 49
    d792:	fb db       	rcall	.-2058   	; 0xcf8a <send_cmd>
    d794:	81 11       	cpse	r24, r1
    d796:	17 c0       	rjmp	.+46     	; 0xd7c6 <mmc_disk_ioctl+0x46e>
    d798:	8f ef       	ldi	r24, 0xFF	; 255
    d79a:	98 db       	rcall	.-2256   	; 0xcecc <xchg_spi>
    d79c:	8e ef       	ldi	r24, 0xFE	; 254
    d79e:	96 db       	rcall	.-2260   	; 0xcecc <xchg_spi>
    d7a0:	f8 01       	movw	r30, r16
    d7a2:	81 81       	ldd	r24, Z+1	; 0x01
    d7a4:	93 db       	rcall	.-2266   	; 0xcecc <xchg_spi>
    d7a6:	01 e0       	ldi	r16, 0x01	; 1
    d7a8:	12 e0       	ldi	r17, 0x02	; 2
    d7aa:	8f ef       	ldi	r24, 0xFF	; 255
    d7ac:	8f db       	rcall	.-2274   	; 0xcecc <xchg_spi>
    d7ae:	01 50       	subi	r16, 0x01	; 1
    d7b0:	11 09       	sbc	r17, r1
    d7b2:	d9 f7       	brne	.-10     	; 0xd7aa <mmc_disk_ioctl+0x452>
    d7b4:	8f ef       	ldi	r24, 0xFF	; 255
    d7b6:	84 d0       	rcall	.+264    	; 0xd8c0 <mmc_spi_TXRX>
    d7b8:	8f 71       	andi	r24, 0x1F	; 31
    d7ba:	01 e0       	ldi	r16, 0x01	; 1
    d7bc:	10 e0       	ldi	r17, 0x00	; 0
    d7be:	85 30       	cpi	r24, 0x05	; 5
    d7c0:	21 f4       	brne	.+8      	; 0xd7ca <mmc_disk_ioctl+0x472>
    d7c2:	00 e0       	ldi	r16, 0x00	; 0
    d7c4:	02 c0       	rjmp	.+4      	; 0xd7ca <mmc_disk_ioctl+0x472>
    d7c6:	01 e0       	ldi	r16, 0x01	; 1
    d7c8:	10 e0       	ldi	r17, 0x00	; 0
    d7ca:	82 db       	rcall	.-2300   	; 0xced0 <deselect>
    d7cc:	04 c0       	rjmp	.+8      	; 0xd7d6 <mmc_disk_ioctl+0x47e>
    d7ce:	03 e0       	ldi	r16, 0x03	; 3
    d7d0:	01 c0       	rjmp	.+2      	; 0xd7d4 <mmc_disk_ioctl+0x47c>
    d7d2:	04 e0       	ldi	r16, 0x04	; 4
    d7d4:	10 e0       	ldi	r17, 0x00	; 0
    d7d6:	c8 01       	movw	r24, r16
    d7d8:	60 96       	adiw	r28, 0x10	; 16
    d7da:	e8 e0       	ldi	r30, 0x08	; 8
    d7dc:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000d7e0 <mmc_disk_timerproc>:
    d7e0:	cf 93       	push	r28
    d7e2:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <Timer1>
    d7e6:	88 23       	and	r24, r24
    d7e8:	19 f0       	breq	.+6      	; 0xd7f0 <mmc_disk_timerproc+0x10>
    d7ea:	81 50       	subi	r24, 0x01	; 1
    d7ec:	80 93 33 18 	sts	0x1833, r24	; 0x801833 <Timer1>
    d7f0:	80 91 32 18 	lds	r24, 0x1832	; 0x801832 <Timer2>
    d7f4:	88 23       	and	r24, r24
    d7f6:	19 f0       	breq	.+6      	; 0xd7fe <mmc_disk_timerproc+0x1e>
    d7f8:	81 50       	subi	r24, 0x01	; 1
    d7fa:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <Timer2>
    d7fe:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
    d802:	8e d0       	rcall	.+284    	; 0xd920 <mmc_ins_status>
    d804:	89 2b       	or	r24, r25
    d806:	11 f0       	breq	.+4      	; 0xd80c <mmc_disk_timerproc+0x2c>
    d808:	cd 7f       	andi	r28, 0xFD	; 253
    d80a:	04 c0       	rjmp	.+8      	; 0xd814 <mmc_disk_timerproc+0x34>
    d80c:	c3 60       	ori	r28, 0x03	; 3
    d80e:	81 e0       	ldi	r24, 0x01	; 1
    d810:	0e 94 2a 24 	call	0x4854	; 0x4854 <set_error>
    d814:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
    d818:	cf 91       	pop	r28
    d81a:	08 95       	ret

0000d81c <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    d81c:	00 d0       	rcall	.+0      	; 0xd81e <mmc_install_timer+0x2>
    d81e:	1f 92       	push	r1
    d820:	10 92 3d 18 	sts	0x183D, r1	; 0x80183d <_mmc_timeout+0x1>
    d824:	10 92 3c 18 	sts	0x183C, r1	; 0x80183c <_mmc_timeout>
    d828:	61 e0       	ldi	r22, 0x01	; 1
    d82a:	70 e0       	ldi	r23, 0x00	; 0
    d82c:	8d e9       	ldi	r24, 0x9D	; 157
    d82e:	9c e6       	ldi	r25, 0x6C	; 108
    d830:	0e 94 dd 31 	call	0x63ba	; 0x63ba <set_timers>
    d834:	01 96       	adiw	r24, 0x01	; 1
    d836:	51 f4       	brne	.+20     	; 0xd84c <mmc_install_timer+0x30>
    d838:	8b e3       	ldi	r24, 0x3B	; 59
    d83a:	98 e0       	ldi	r25, 0x08	; 8
    d83c:	a0 e0       	ldi	r26, 0x00	; 0
    d83e:	ed b7       	in	r30, 0x3d	; 61
    d840:	fe b7       	in	r31, 0x3e	; 62
    d842:	81 83       	std	Z+1, r24	; 0x01
    d844:	92 83       	std	Z+2, r25	; 0x02
    d846:	a3 83       	std	Z+3, r26	; 0x03
    d848:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    d84c:	0f 90       	pop	r0
    d84e:	0f 90       	pop	r0
    d850:	0f 90       	pop	r0
    d852:	08 95       	ret

0000d854 <mmc_spi_begin>:
    d854:	60 91 38 18 	lds	r22, 0x1838	; 0x801838 <_mmc_clock>
    d858:	70 91 39 18 	lds	r23, 0x1839	; 0x801839 <_mmc_clock+0x1>
    d85c:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <_mmc_clock+0x2>
    d860:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <_mmc_clock+0x3>
    d864:	4b e0       	ldi	r20, 0x0B	; 11
    d866:	50 e0       	ldi	r21, 0x00	; 0
    d868:	0c 94 d1 23 	jmp	0x47a2	; 0x47a2 <spi_begin>
    d86c:	08 95       	ret

0000d86e <mmc_spi_end>:
    d86e:	8b e0       	ldi	r24, 0x0B	; 11
    d870:	0c 94 6d 23 	jmp	0x46da	; 0x46da <spi_end>
    d874:	08 95       	ret

0000d876 <mmc_slow>:
    d876:	80 e2       	ldi	r24, 0x20	; 32
    d878:	91 ea       	ldi	r25, 0xA1	; 161
    d87a:	a7 e0       	ldi	r26, 0x07	; 7
    d87c:	b0 e0       	ldi	r27, 0x00	; 0
    d87e:	80 93 38 18 	sts	0x1838, r24	; 0x801838 <_mmc_clock>
    d882:	90 93 39 18 	sts	0x1839, r25	; 0x801839 <_mmc_clock+0x1>
    d886:	a0 93 3a 18 	sts	0x183A, r26	; 0x80183a <_mmc_clock+0x2>
    d88a:	b0 93 3b 18 	sts	0x183B, r27	; 0x80183b <_mmc_clock+0x3>
    d88e:	08 95       	ret

0000d890 <mmc_spi_init>:
    d890:	8b e0       	ldi	r24, 0x0B	; 11
    d892:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <chip_select_init>
    d896:	ef cf       	rjmp	.-34     	; 0xd876 <mmc_slow>
    d898:	08 95       	ret

0000d89a <mmc_fast>:
    d89a:	80 ea       	ldi	r24, 0xA0	; 160
    d89c:	95 e2       	ldi	r25, 0x25	; 37
    d89e:	a6 e2       	ldi	r26, 0x26	; 38
    d8a0:	b0 e0       	ldi	r27, 0x00	; 0
    d8a2:	80 93 38 18 	sts	0x1838, r24	; 0x801838 <_mmc_clock>
    d8a6:	90 93 39 18 	sts	0x1839, r25	; 0x801839 <_mmc_clock+0x1>
    d8aa:	a0 93 3a 18 	sts	0x183A, r26	; 0x80183a <_mmc_clock+0x2>
    d8ae:	b0 93 3b 18 	sts	0x183B, r27	; 0x80183b <_mmc_clock+0x3>
    d8b2:	08 95       	ret

0000d8b4 <mmc_spi_TX_buffer>:
    d8b4:	0c 94 9d 23 	jmp	0x473a	; 0x473a <spi_TX_buffer>
    d8b8:	08 95       	ret

0000d8ba <mmc_spi_RX_buffer>:
    d8ba:	0c 94 9f 23 	jmp	0x473e	; 0x473e <spi_RX_buffer>
    d8be:	08 95       	ret

0000d8c0 <mmc_spi_TXRX>:
    d8c0:	0c 94 19 24 	jmp	0x4832	; 0x4832 <spi_TXRX>
    d8c4:	08 95       	ret

0000d8c6 <mmc_set_ms_timeout>:
    d8c6:	f8 94       	cli
    d8c8:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <_mmc_timeout+0x1>
    d8cc:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <_mmc_timeout>
    d8d0:	78 94       	sei
    d8d2:	08 95       	ret

0000d8d4 <mmc_test_timeout>:
    d8d4:	00 d0       	rcall	.+0      	; 0xd8d6 <mmc_test_timeout+0x2>
    d8d6:	1f 92       	push	r1
    d8d8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d8dc:	81 fd       	sbrc	r24, 1
    d8de:	15 c0       	rjmp	.+42     	; 0xd90a <mmc_test_timeout+0x36>
    d8e0:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <_mmc_timeout>
    d8e4:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <_mmc_timeout+0x1>
    d8e8:	89 2b       	or	r24, r25
    d8ea:	91 f4       	brne	.+36     	; 0xd910 <mmc_test_timeout+0x3c>
    d8ec:	8e e2       	ldi	r24, 0x2E	; 46
    d8ee:	98 e0       	ldi	r25, 0x08	; 8
    d8f0:	a0 e0       	ldi	r26, 0x00	; 0
    d8f2:	ed b7       	in	r30, 0x3d	; 61
    d8f4:	fe b7       	in	r31, 0x3e	; 62
    d8f6:	81 83       	std	Z+1, r24	; 0x01
    d8f8:	92 83       	std	Z+2, r25	; 0x02
    d8fa:	a3 83       	std	Z+3, r26	; 0x03
    d8fc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    d900:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d904:	83 60       	ori	r24, 0x03	; 3
    d906:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d90a:	81 e0       	ldi	r24, 0x01	; 1
    d90c:	90 e0       	ldi	r25, 0x00	; 0
    d90e:	02 c0       	rjmp	.+4      	; 0xd914 <mmc_test_timeout+0x40>
    d910:	80 e0       	ldi	r24, 0x00	; 0
    d912:	90 e0       	ldi	r25, 0x00	; 0
    d914:	0f 90       	pop	r0
    d916:	0f 90       	pop	r0
    d918:	0f 90       	pop	r0
    d91a:	08 95       	ret

0000d91c <mmc_power_on>:
    d91c:	08 95       	ret

0000d91e <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    d91e:	08 95       	ret

0000d920 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    d920:	3f 98       	cbi	0x07, 7	; 7
    d922:	86 b1       	in	r24, 0x06	; 6
    d924:	08 2e       	mov	r0, r24
    d926:	00 0c       	add	r0, r0
    d928:	99 0b       	sbc	r25, r25
    d92a:	80 95       	com	r24
    d92c:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    d92e:	89 2f       	mov	r24, r25
    d930:	88 1f       	adc	r24, r24
    d932:	88 27       	eor	r24, r24
    d934:	88 1f       	adc	r24, r24
    d936:	90 e0       	ldi	r25, 0x00	; 0
    d938:	08 95       	ret

0000d93a <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    d93a:	80 91 3c 18 	lds	r24, 0x183C	; 0x80183c <_mmc_timeout>
    d93e:	90 91 3d 18 	lds	r25, 0x183D	; 0x80183d <_mmc_timeout+0x1>
    d942:	00 97       	sbiw	r24, 0x00	; 0
    d944:	29 f0       	breq	.+10     	; 0xd950 <mmc_task+0x16>
        _mmc_timeout--;
    d946:	01 97       	sbiw	r24, 0x01	; 1
    d948:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <_mmc_timeout+0x1>
    d94c:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    d950:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_pre>
    d954:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_pre+0x1>
    d958:	8a 30       	cpi	r24, 0x0A	; 10
    d95a:	91 05       	cpc	r25, r1
    d95c:	30 f4       	brcc	.+12     	; 0xd96a <mmc_task+0x30>
    d95e:	01 96       	adiw	r24, 0x01	; 1
    d960:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_pre+0x1>
    d964:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_pre>
    d968:	08 95       	ret
        return;

    _mmc_pre = 0;
    d96a:	10 92 37 18 	sts	0x1837, r1	; 0x801837 <_mmc_pre+0x1>
    d96e:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_mmc_pre>

	if(!mmc_ins_status())
    d972:	d6 df       	rcall	.-84     	; 0xd920 <mmc_ins_status>
    d974:	89 2b       	or	r24, r25
		set_error(1);
    d976:	19 f4       	brne	.+6      	; 0xd97e <mmc_task+0x44>
    d978:	81 e0       	ldi	r24, 0x01	; 1

    mmc_disk_timerproc();
    d97a:	0e 94 2a 24 	call	0x4854	; 0x4854 <set_error>
    d97e:	30 cf       	rjmp	.-416    	; 0xd7e0 <mmc_disk_timerproc>
    d980:	08 95       	ret

0000d982 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    d982:	ab e0       	ldi	r26, 0x0B	; 11
    d984:	b0 e0       	ldi	r27, 0x00	; 0
    d986:	e7 ec       	ldi	r30, 0xC7	; 199
    d988:	fc e6       	ldi	r31, 0x6C	; 108
    d98a:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
    d98e:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    d990:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    d994:	0e 94 2f 24 	call	0x485e	; 0x485e <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    d998:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);

    mmc_spi_init();
    d99a:	3f 98       	cbi	0x07, 7	; 7

    if( verbose)
    d99c:	79 df       	rcall	.-270    	; 0xd890 <mmc_spi_init>
    d99e:	e1 14       	cp	r14, r1
    d9a0:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    d9a2:	51 f0       	breq	.+20     	; 0xd9b8 <mmc_init+0x36>
    d9a4:	8e e1       	ldi	r24, 0x1E	; 30
    d9a6:	98 e0       	ldi	r25, 0x08	; 8
    d9a8:	a0 e0       	ldi	r26, 0x00	; 0
    d9aa:	ed b7       	in	r30, 0x3d	; 61
    d9ac:	fe b7       	in	r31, 0x3e	; 62
    d9ae:	81 83       	std	Z+1, r24	; 0x01
    d9b0:	92 83       	std	Z+2, r25	; 0x02
    d9b2:	a3 83       	std	Z+3, r26	; 0x03
    d9b4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    d9b8:	80 91 34 18 	lds	r24, 0x1834	; 0x801834 <mmc_init_flag>
    d9bc:	90 91 35 18 	lds	r25, 0x1835	; 0x801835 <mmc_init_flag+0x1>
        mmc_install_timer();

	if(!mmc_ins_status())
    d9c0:	89 2b       	or	r24, r25
    d9c2:	09 f4       	brne	.+2      	; 0xd9c6 <mmc_init+0x44>
    d9c4:	2b df       	rcall	.-426    	; 0xd81c <mmc_install_timer>
    d9c6:	ac df       	rcall	.-168    	; 0xd920 <mmc_ins_status>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    d9c8:	89 2b       	or	r24, r25
    d9ca:	61 f4       	brne	.+24     	; 0xd9e4 <mmc_init+0x62>
    d9cc:	8e ef       	ldi	r24, 0xFE	; 254
    d9ce:	97 e0       	ldi	r25, 0x07	; 7
    d9d0:	a0 e0       	ldi	r26, 0x00	; 0
    d9d2:	ed b7       	in	r30, 0x3d	; 61
    d9d4:	fe b7       	in	r31, 0x3e	; 62
    d9d6:	81 83       	std	Z+1, r24	; 0x01
    d9d8:	92 83       	std	Z+2, r25	; 0x02
    d9da:	a3 83       	std	Z+3, r26	; 0x03
		return(RES_NOTRDY);	
    d9dc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
	}


    if( verbose)
    d9e0:	83 e0       	ldi	r24, 0x03	; 3
    d9e2:	8b c0       	rjmp	.+278    	; 0xdafa <mmc_init+0x178>
    d9e4:	e1 14       	cp	r14, r1
    {
		printf("MMC Card Inserted\n");
    d9e6:	f1 04       	cpc	r15, r1
    d9e8:	11 f1       	breq	.+68     	; 0xda2e <mmc_init+0xac>
    d9ea:	8b ee       	ldi	r24, 0xEB	; 235
    d9ec:	97 e0       	ldi	r25, 0x07	; 7
    d9ee:	a0 e0       	ldi	r26, 0x00	; 0
    d9f0:	ed b7       	in	r30, 0x3d	; 61
    d9f2:	fe b7       	in	r31, 0x3e	; 62
    d9f4:	81 83       	std	Z+1, r24	; 0x01
    d9f6:	92 83       	std	Z+2, r25	; 0x02
    d9f8:	a3 83       	std	Z+3, r26	; 0x03

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    d9fa:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    d9fe:	8f ed       	ldi	r24, 0xDF	; 223
    da00:	97 e0       	ldi	r25, 0x07	; 7
    da02:	a0 e0       	ldi	r26, 0x00	; 0
    da04:	ed b7       	in	r30, 0x3d	; 61
    da06:	fe b7       	in	r31, 0x3e	; 62
    da08:	81 83       	std	Z+1, r24	; 0x01
    da0a:	92 83       	std	Z+2, r25	; 0x02
    da0c:	a3 83       	std	Z+3, r26	; 0x03
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    da0e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    da12:	85 eb       	ldi	r24, 0xB5	; 181
    da14:	91 e0       	ldi	r25, 0x01	; 1
    da16:	ed b7       	in	r30, 0x3d	; 61
    da18:	fe b7       	in	r31, 0x3e	; 62
    da1a:	95 83       	std	Z+5, r25	; 0x05
    da1c:	84 83       	std	Z+4, r24	; 0x04
    da1e:	8e ec       	ldi	r24, 0xCE	; 206
    da20:	97 e0       	ldi	r25, 0x07	; 7
    da22:	a0 e0       	ldi	r26, 0x00	; 0
    da24:	81 83       	std	Z+1, r24	; 0x01
    da26:	92 83       	std	Z+2, r25	; 0x02
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    da28:	a3 83       	std	Z+3, r26	; 0x03
    da2a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    da2e:	80 e0       	ldi	r24, 0x00	; 0

    if( rc != RES_OK  )
    da30:	1d da       	rcall	.-3014   	; 0xce6c <disk_initialize>
    da32:	08 2f       	mov	r16, r24
        put_rc(rc);
    da34:	10 e0       	ldi	r17, 0x00	; 0
    da36:	01 15       	cp	r16, r1
    da38:	11 05       	cpc	r17, r1
    da3a:	19 f0       	breq	.+6      	; 0xda42 <mmc_init+0xc0>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    da3c:	c8 01       	movw	r24, r16
    da3e:	e4 d0       	rcall	.+456    	; 0xdc08 <put_rc>
    da40:	0e c0       	rjmp	.+28     	; 0xda5e <mmc_init+0xdc>
    da42:	40 e0       	ldi	r20, 0x00	; 0
    da44:	61 ea       	ldi	r22, 0xA1	; 161
    da46:	78 e0       	ldi	r23, 0x08	; 8
    da48:	8c e8       	ldi	r24, 0x8C	; 140
    da4a:	9a e1       	ldi	r25, 0x1A	; 26

    if( rc != RES_OK || verbose)
    da4c:	0e 94 ee 56 	call	0xaddc	; 0xaddc <f_mount>
    da50:	8c 01       	movw	r16, r24
    da52:	89 2b       	or	r24, r25
        put_rc( rc );
    da54:	21 f4       	brne	.+8      	; 0xda5e <mmc_init+0xdc>
    da56:	e1 14       	cp	r14, r1
    da58:	f1 04       	cpc	r15, r1

    if (verbose )
    da5a:	09 f4       	brne	.+2      	; 0xda5e <mmc_init+0xdc>
    da5c:	40 c0       	rjmp	.+128    	; 0xdade <mmc_init+0x15c>
    da5e:	c8 01       	movw	r24, r16
    {
        DWORD blksize = 0;
    da60:	d3 d0       	rcall	.+422    	; 0xdc08 <put_rc>
    da62:	e1 14       	cp	r14, r1
    da64:	f1 04       	cpc	r15, r1
    da66:	d9 f1       	breq	.+118    	; 0xdade <mmc_init+0x15c>
        if(rc == RES_OK)
    da68:	18 86       	std	Y+8, r1	; 0x08
    da6a:	19 86       	std	Y+9, r1	; 0x09
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    da6c:	1a 86       	std	Y+10, r1	; 0x0a
    da6e:	1b 86       	std	Y+11, r1	; 0x0b
    da70:	01 15       	cp	r16, r1
    da72:	11 05       	cpc	r17, r1
    da74:	51 f5       	brne	.+84     	; 0xdaca <mmc_init+0x148>
    da76:	ae 01       	movw	r20, r28
    da78:	48 5f       	subi	r20, 0xF8	; 248
            if( rc != RES_OK)
    da7a:	5f 4f       	sbci	r21, 0xFF	; 255
    da7c:	63 e0       	ldi	r22, 0x03	; 3
            {
                put_rc( rc );
    da7e:	80 e0       	ldi	r24, 0x00	; 0
    da80:	1b da       	rcall	.-3018   	; 0xceb8 <disk_ioctl>
                printf("MMC Block Size - read failed\n");
    da82:	8c 01       	movw	r16, r24
    da84:	00 97       	sbiw	r24, 0x00	; 0
    da86:	61 f0       	breq	.+24     	; 0xdaa0 <mmc_init+0x11e>
    da88:	bf d0       	rcall	.+382    	; 0xdc08 <put_rc>
    da8a:	80 eb       	ldi	r24, 0xB0	; 176
    da8c:	97 e0       	ldi	r25, 0x07	; 7
    da8e:	a0 e0       	ldi	r26, 0x00	; 0
    da90:	ed b7       	in	r30, 0x3d	; 61
    da92:	fe b7       	in	r31, 0x3e	; 62
    da94:	81 83       	std	Z+1, r24	; 0x01
    da96:	92 83       	std	Z+2, r25	; 0x02
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    da98:	a3 83       	std	Z+3, r26	; 0x03
    da9a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    da9e:	15 c0       	rjmp	.+42     	; 0xdaca <mmc_init+0x148>
    daa0:	88 85       	ldd	r24, Y+8	; 0x08
    daa2:	99 85       	ldd	r25, Y+9	; 0x09
    daa4:	aa 85       	ldd	r26, Y+10	; 0x0a
    daa6:	bb 85       	ldd	r27, Y+11	; 0x0b
    daa8:	ed b7       	in	r30, 0x3d	; 61
    daaa:	fe b7       	in	r31, 0x3e	; 62
    daac:	84 83       	std	Z+4, r24	; 0x04
    daae:	95 83       	std	Z+5, r25	; 0x05
    dab0:	a6 83       	std	Z+6, r26	; 0x06
    dab2:	b7 83       	std	Z+7, r27	; 0x07
    dab4:	8b e9       	ldi	r24, 0x9B	; 155
    dab6:	97 e0       	ldi	r25, 0x07	; 7
    dab8:	a0 e0       	ldi	r26, 0x00	; 0
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    daba:	81 83       	std	Z+1, r24	; 0x01
    dabc:	92 83       	std	Z+2, r25	; 0x02
    dabe:	a3 83       	std	Z+3, r26	; 0x03
    dac0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            }
        }
        printf("END MMC INIT\n");
    dac4:	81 ea       	ldi	r24, 0xA1	; 161
    dac6:	98 e0       	ldi	r25, 0x08	; 8
    dac8:	33 d1       	rcall	.+614    	; 0xdd30 <fatfs_status>
    daca:	8d e8       	ldi	r24, 0x8D	; 141
    dacc:	97 e0       	ldi	r25, 0x07	; 7
    dace:	a0 e0       	ldi	r26, 0x00	; 0
    dad0:	ed b7       	in	r30, 0x3d	; 61
    dad2:	fe b7       	in	r31, 0x3e	; 62
    dad4:	81 83       	std	Z+1, r24	; 0x01
    }
    mmc_init_flag = 1;
    dad6:	92 83       	std	Z+2, r25	; 0x02
    dad8:	a3 83       	std	Z+3, r26	; 0x03
    dada:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    dade:	81 e0       	ldi	r24, 0x01	; 1
    dae0:	90 e0       	ldi	r25, 0x00	; 0

	if(rc != RES_OK)
    dae2:	90 93 35 18 	sts	0x1835, r25	; 0x801835 <mmc_init_flag+0x1>
    dae6:	80 93 34 18 	sts	0x1834, r24	; 0x801834 <mmc_init_flag>
		set_error(1);
    daea:	01 15       	cp	r16, r1
    daec:	11 05       	cpc	r17, r1
    daee:	21 f0       	breq	.+8      	; 0xdaf8 <mmc_init+0x176>
    daf0:	0e 94 2a 24 	call	0x4854	; 0x4854 <set_error>

    return( rc ) ;
}
    daf4:	c8 01       	movw	r24, r16
    daf6:	02 c0       	rjmp	.+4      	; 0xdafc <mmc_init+0x17a>
    daf8:	80 e0       	ldi	r24, 0x00	; 0
    dafa:	90 e0       	ldi	r25, 0x00	; 0
    dafc:	2b 96       	adiw	r28, 0x0b	; 11
    dafe:	e6 e0       	ldi	r30, 0x06	; 6
    db00:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

0000db04 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    db04:	80 e0       	ldi	r24, 0x00	; 0
    db06:	90 e0       	ldi	r25, 0x00	; 0
    db08:	08 95       	ret

0000db0a <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    db0a:	0f 93       	push	r16
    db0c:	1f 93       	push	r17
    db0e:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    db10:	46 81       	ldd	r20, Z+6	; 0x06
    db12:	57 81       	ldd	r21, Z+7	; 0x07
    db14:	05 2e       	mov	r0, r21
    db16:	00 0c       	add	r0, r0
    db18:	66 0b       	sbc	r22, r22
    db1a:	77 0b       	sbc	r23, r23
    db1c:	ba 01       	movw	r22, r20
    db1e:	55 27       	eor	r21, r21
    db20:	44 27       	eor	r20, r20
    db22:	84 81       	ldd	r24, Z+4	; 0x04
    db24:	95 81       	ldd	r25, Z+5	; 0x05
    db26:	09 2e       	mov	r0, r25
    db28:	00 0c       	add	r0, r0
    db2a:	aa 0b       	sbc	r26, r26
    db2c:	bb 0b       	sbc	r27, r27
    db2e:	2b e0       	ldi	r18, 0x0B	; 11
    db30:	88 0f       	add	r24, r24
    db32:	99 1f       	adc	r25, r25
    db34:	aa 1f       	adc	r26, r26
    db36:	bb 1f       	adc	r27, r27
    db38:	2a 95       	dec	r18
    db3a:	d1 f7       	brne	.-12     	; 0xdb30 <tm_to_fat+0x26>
    db3c:	48 2b       	or	r20, r24
    db3e:	59 2b       	or	r21, r25
    db40:	6a 2b       	or	r22, r26
    db42:	7b 2b       	or	r23, r27
    db44:	82 81       	ldd	r24, Z+2	; 0x02
    db46:	93 81       	ldd	r25, Z+3	; 0x03
    db48:	09 2e       	mov	r0, r25
    db4a:	00 0c       	add	r0, r0
    db4c:	aa 0b       	sbc	r26, r26
    db4e:	bb 0b       	sbc	r27, r27
    db50:	35 e0       	ldi	r19, 0x05	; 5
    db52:	88 0f       	add	r24, r24
    db54:	99 1f       	adc	r25, r25
    db56:	aa 1f       	adc	r26, r26
    db58:	bb 1f       	adc	r27, r27
    db5a:	3a 95       	dec	r19
    db5c:	d1 f7       	brne	.-12     	; 0xdb52 <tm_to_fat+0x48>
    db5e:	48 2b       	or	r20, r24
    db60:	59 2b       	or	r21, r25
    db62:	6a 2b       	or	r22, r26
    db64:	7b 2b       	or	r23, r27
    db66:	80 81       	ld	r24, Z
    db68:	91 81       	ldd	r25, Z+1	; 0x01
    db6a:	09 2e       	mov	r0, r25
    db6c:	00 0c       	add	r0, r0
    db6e:	aa 0b       	sbc	r26, r26
    db70:	bb 0b       	sbc	r27, r27
    db72:	b6 95       	lsr	r27
    db74:	a7 95       	ror	r26
    db76:	97 95       	ror	r25
    db78:	87 95       	ror	r24
    db7a:	84 2b       	or	r24, r20
    db7c:	95 2b       	or	r25, r21
    db7e:	a6 2b       	or	r26, r22
    db80:	b7 2b       	or	r27, r23
    db82:	02 85       	ldd	r16, Z+10	; 0x0a
    db84:	13 85       	ldd	r17, Z+11	; 0x0b
    db86:	00 55       	subi	r16, 0x50	; 80
    db88:	11 09       	sbc	r17, r1
    db8a:	01 2e       	mov	r0, r17
    db8c:	00 0c       	add	r0, r0
    db8e:	22 0b       	sbc	r18, r18
    db90:	33 0b       	sbc	r19, r19
    db92:	49 e1       	ldi	r20, 0x19	; 25
    db94:	00 0f       	add	r16, r16
    db96:	11 1f       	adc	r17, r17
    db98:	22 1f       	adc	r18, r18
    db9a:	33 1f       	adc	r19, r19
    db9c:	4a 95       	dec	r20
    db9e:	d1 f7       	brne	.-12     	; 0xdb94 <tm_to_fat+0x8a>
    dba0:	ac 01       	movw	r20, r24
    dba2:	bd 01       	movw	r22, r26
    dba4:	40 2b       	or	r20, r16
    dba6:	51 2b       	or	r21, r17
    dba8:	62 2b       	or	r22, r18
    dbaa:	73 2b       	or	r23, r19
    dbac:	80 85       	ldd	r24, Z+8	; 0x08
    dbae:	91 85       	ldd	r25, Z+9	; 0x09
    dbb0:	09 2e       	mov	r0, r25
    dbb2:	00 0c       	add	r0, r0
    dbb4:	aa 0b       	sbc	r26, r26
    dbb6:	bb 0b       	sbc	r27, r27
    dbb8:	01 96       	adiw	r24, 0x01	; 1
    dbba:	a1 1d       	adc	r26, r1
    dbbc:	b1 1d       	adc	r27, r1
    dbbe:	e5 e1       	ldi	r30, 0x15	; 21
    dbc0:	88 0f       	add	r24, r24
    dbc2:	99 1f       	adc	r25, r25
    dbc4:	aa 1f       	adc	r26, r26
    dbc6:	bb 1f       	adc	r27, r27
    dbc8:	ea 95       	dec	r30
    dbca:	d1 f7       	brne	.-12     	; 0xdbc0 <tm_to_fat+0xb6>
    dbcc:	8a 01       	movw	r16, r20
    dbce:	9b 01       	movw	r18, r22
    dbd0:	08 2b       	or	r16, r24
    dbd2:	19 2b       	or	r17, r25
    dbd4:	2a 2b       	or	r18, r26
    dbd6:	3b 2b       	or	r19, r27
    dbd8:	c9 01       	movw	r24, r18
    dbda:	b8 01       	movw	r22, r16
}
    dbdc:	1f 91       	pop	r17
    dbde:	0f 91       	pop	r16
    dbe0:	08 95       	ret

0000dbe2 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    dbe2:	a4 e0       	ldi	r26, 0x04	; 4
    dbe4:	b0 e0       	ldi	r27, 0x00	; 0
    dbe6:	e7 ef       	ldi	r30, 0xF7	; 247
    dbe8:	fd e6       	ldi	r31, 0x6D	; 109
    dbea:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    dbee:	ce 01       	movw	r24, r28
    dbf0:	01 96       	adiw	r24, 0x01	; 1
    dbf2:	0e 94 31 35 	call	0x6a62	; 0x6a62 <time>
    return( tm_to_fat(localtime(&t)));
    dbf6:	ce 01       	movw	r24, r28
    dbf8:	01 96       	adiw	r24, 0x01	; 1
    dbfa:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <localtime>
    dbfe:	85 df       	rcall	.-246    	; 0xdb0a <tm_to_fat>
}
    dc00:	24 96       	adiw	r28, 0x04	; 4
    dc02:	e2 e0       	ldi	r30, 0x02	; 2
    dc04:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000dc08 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    dc08:	00 d0       	rcall	.+0      	; 0xdc0a <put_rc+0x2>
    dc0a:	00 d0       	rcall	.+0      	; 0xdc0c <put_rc+0x4>
    dc0c:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    dc0e:	ed b7       	in	r30, 0x3d	; 61
    dc10:	fe b7       	in	r31, 0x3e	; 62
    dc12:	95 83       	std	Z+5, r25	; 0x05
    dc14:	84 83       	std	Z+4, r24	; 0x04
    dc16:	8b e4       	ldi	r24, 0x4B	; 75
    dc18:	9a e0       	ldi	r25, 0x0A	; 10
    dc1a:	a0 e0       	ldi	r26, 0x00	; 0
    dc1c:	81 83       	std	Z+1, r24	; 0x01
    dc1e:	92 83       	std	Z+2, r25	; 0x02
    dc20:	a3 83       	std	Z+3, r26	; 0x03
    dc22:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
}
    dc26:	0f 90       	pop	r0
    dc28:	0f 90       	pop	r0
    dc2a:	0f 90       	pop	r0
    dc2c:	0f 90       	pop	r0
    dc2e:	0f 90       	pop	r0
    dc30:	08 95       	ret

0000dc32 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    dc32:	a4 e4       	ldi	r26, 0x44	; 68
    dc34:	b1 e0       	ldi	r27, 0x01	; 1
    dc36:	ef e1       	ldi	r30, 0x1F	; 31
    dc38:	fe e6       	ldi	r31, 0x6E	; 110
    dc3a:	0c 94 cd df 	jmp	0x1bf9a	; 0x1bf9a <__prologue_saves__+0x16>
    dc3e:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    dc40:	bc 01       	movw	r22, r24
    dc42:	ce 01       	movw	r24, r28
    dc44:	89 5e       	subi	r24, 0xE9	; 233
    dc46:	9e 4f       	sbci	r25, 0xFE	; 254
    dc48:	0e 94 aa 60 	call	0xc154	; 0xc154 <f_opendir>
    if (fr == FR_OK)
    dc4c:	00 97       	sbiw	r24, 0x00	; 0
    dc4e:	09 f0       	breq	.+2      	; 0xdc52 <fatfs_scan_files+0x20>
    dc50:	5b c0       	rjmp	.+182    	; 0xdd08 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    dc52:	8f e2       	ldi	r24, 0x2F	; 47
    dc54:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    dc56:	be 01       	movw	r22, r28
    dc58:	6f 5f       	subi	r22, 0xFF	; 255
    dc5a:	7f 4f       	sbci	r23, 0xFF	; 255
    dc5c:	ce 01       	movw	r24, r28
    dc5e:	89 5e       	subi	r24, 0xE9	; 233
    dc60:	9e 4f       	sbci	r25, 0xFE	; 254
    dc62:	0e 94 30 61 	call	0xc260	; 0xc260 <f_readdir>
    dc66:	00 97       	sbiw	r24, 0x00	; 0
    dc68:	09 f0       	breq	.+2      	; 0xdc6c <fatfs_scan_files+0x3a>
    dc6a:	4e c0       	rjmp	.+156    	; 0xdd08 <fatfs_scan_files+0xd6>
    dc6c:	2f 89       	ldd	r18, Y+23	; 0x17
    dc6e:	22 23       	and	r18, r18
    dc70:	09 f4       	brne	.+2      	; 0xdc74 <fatfs_scan_files+0x42>
    dc72:	4a c0       	rjmp	.+148    	; 0xdd08 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    dc74:	89 85       	ldd	r24, Y+9	; 0x09
    dc76:	84 ff       	sbrs	r24, 4
    dc78:	25 c0       	rjmp	.+74     	; 0xdcc4 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    dc7a:	80 91 c5 1c 	lds	r24, 0x1CC5	; 0x801cc5 <AccDirs>
    dc7e:	90 91 c6 1c 	lds	r25, 0x1CC6	; 0x801cc6 <AccDirs+0x1>
    dc82:	01 96       	adiw	r24, 0x01	; 1
    dc84:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <AccDirs+0x1>
    dc88:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <AccDirs>
                i = strlen(path);
    dc8c:	f8 01       	movw	r30, r16
    dc8e:	01 90       	ld	r0, Z+
    dc90:	00 20       	and	r0, r0
    dc92:	e9 f7       	brne	.-6      	; 0xdc8e <fatfs_scan_files+0x5c>
    dc94:	31 97       	sbiw	r30, 0x01	; 1
    dc96:	e0 1b       	sub	r30, r16
    dc98:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    dc9a:	78 01       	movw	r14, r16
    dc9c:	ee 0e       	add	r14, r30
    dc9e:	ff 1e       	adc	r15, r31
    dca0:	d7 01       	movw	r26, r14
    dca2:	dc 92       	st	X, r13
    dca4:	cf 01       	movw	r24, r30
    dca6:	01 96       	adiw	r24, 0x01	; 1
    dca8:	be 01       	movw	r22, r28
    dcaa:	69 5e       	subi	r22, 0xE9	; 233
    dcac:	7f 4f       	sbci	r23, 0xFF	; 255
    dcae:	80 0f       	add	r24, r16
    dcb0:	91 1f       	adc	r25, r17
    dcb2:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <strcpy>
                fr = fatfs_scan_files(path);
    dcb6:	c8 01       	movw	r24, r16
    dcb8:	bc df       	rcall	.-136    	; 0xdc32 <fatfs_scan_files>
                path[i] = 0;
    dcba:	f7 01       	movw	r30, r14
    dcbc:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    dcbe:	00 97       	sbiw	r24, 0x00	; 0
    dcc0:	51 f2       	breq	.-108    	; 0xdc56 <fatfs_scan_files+0x24>
    dcc2:	22 c0       	rjmp	.+68     	; 0xdd08 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    dcc4:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <AccFiles>
    dcc8:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <AccFiles+0x1>
    dccc:	01 96       	adiw	r24, 0x01	; 1
    dcce:	90 93 c8 1c 	sts	0x1CC8, r25	; 0x801cc8 <AccFiles+0x1>
    dcd2:	80 93 c7 1c 	sts	0x1CC7, r24	; 0x801cc7 <AccFiles>
                AccSize += info.fsize;
    dcd6:	40 91 c1 1c 	lds	r20, 0x1CC1	; 0x801cc1 <AccSize>
    dcda:	50 91 c2 1c 	lds	r21, 0x1CC2	; 0x801cc2 <AccSize+0x1>
    dcde:	60 91 c3 1c 	lds	r22, 0x1CC3	; 0x801cc3 <AccSize+0x2>
    dce2:	70 91 c4 1c 	lds	r23, 0x1CC4	; 0x801cc4 <AccSize+0x3>
    dce6:	89 81       	ldd	r24, Y+1	; 0x01
    dce8:	9a 81       	ldd	r25, Y+2	; 0x02
    dcea:	ab 81       	ldd	r26, Y+3	; 0x03
    dcec:	bc 81       	ldd	r27, Y+4	; 0x04
    dcee:	84 0f       	add	r24, r20
    dcf0:	95 1f       	adc	r25, r21
    dcf2:	a6 1f       	adc	r26, r22
    dcf4:	b7 1f       	adc	r27, r23
    dcf6:	80 93 c1 1c 	sts	0x1CC1, r24	; 0x801cc1 <AccSize>
    dcfa:	90 93 c2 1c 	sts	0x1CC2, r25	; 0x801cc2 <AccSize+0x1>
    dcfe:	a0 93 c3 1c 	sts	0x1CC3, r26	; 0x801cc3 <AccSize+0x2>
    dd02:	b0 93 c4 1c 	sts	0x1CC4, r27	; 0x801cc4 <AccSize+0x3>
    dd06:	a7 cf       	rjmp	.-178    	; 0xdc56 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    dd08:	cc 5b       	subi	r28, 0xBC	; 188
    dd0a:	de 4f       	sbci	r29, 0xFE	; 254
    dd0c:	e7 e0       	ldi	r30, 0x07	; 7
    dd0e:	0c 94 e9 df 	jmp	0x1bfd2	; 0x1bfd2 <__epilogue_restores__+0x16>

0000dd12 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    dd12:	01 97       	sbiw	r24, 0x01	; 1
    dd14:	84 30       	cpi	r24, 0x04	; 4
    dd16:	91 05       	cpc	r25, r1
    dd18:	40 f4       	brcc	.+16     	; 0xdd2a <fatfs_fstype+0x18>
    dd1a:	88 0f       	add	r24, r24
    dd1c:	99 1f       	adc	r25, r25
    dd1e:	fc 01       	movw	r30, r24
    dd20:	eb 53       	subi	r30, 0x3B	; 59
    dd22:	f7 4f       	sbci	r31, 0xF7	; 247
    dd24:	80 81       	ld	r24, Z
    dd26:	91 81       	ldd	r25, Z+1	; 0x01
    dd28:	08 95       	ret
    char *ptr;
    switch(type)
    dd2a:	83 ea       	ldi	r24, 0xA3	; 163
    dd2c:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    dd2e:	08 95       	ret

0000dd30 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    dd30:	a7 e3       	ldi	r26, 0x37	; 55
    dd32:	b0 e0       	ldi	r27, 0x00	; 0
    dd34:	ee e9       	ldi	r30, 0x9E	; 158
    dd36:	fe e6       	ldi	r31, 0x6E	; 110
    dd38:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    dd3c:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    dd3e:	fc 01       	movw	r30, r24
    dd40:	21 91       	ld	r18, Z+
    dd42:	cf 01       	movw	r24, r30
    dd44:	20 32       	cpi	r18, 0x20	; 32
    dd46:	d1 f3       	breq	.-12     	; 0xdd3c <fatfs_status+0xc>
    dd48:	29 30       	cpi	r18, 0x09	; 9
    dd4a:	c1 f3       	breq	.-16     	; 0xdd3c <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    dd4c:	ed b7       	in	r30, 0x3d	; 61
    dd4e:	fe b7       	in	r31, 0x3e	; 62
    dd50:	e4 82       	std	Z+4, r14	; 0x04
    dd52:	f5 82       	std	Z+5, r15	; 0x05
    dd54:	8a e3       	ldi	r24, 0x3A	; 58
    dd56:	9a e0       	ldi	r25, 0x0A	; 10
    dd58:	a0 e0       	ldi	r26, 0x00	; 0
    dd5a:	81 83       	std	Z+1, r24	; 0x01
    dd5c:	92 83       	std	Z+2, r25	; 0x02
    dd5e:	a3 83       	std	Z+3, r26	; 0x03
    dd60:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    dd64:	ae 01       	movw	r20, r28
    dd66:	4a 5c       	subi	r20, 0xCA	; 202
    dd68:	5f 4f       	sbci	r21, 0xFF	; 255
    dd6a:	be 01       	movw	r22, r28
    dd6c:	6e 5c       	subi	r22, 0xCE	; 206
    dd6e:	7f 4f       	sbci	r23, 0xFF	; 255
    dd70:	c7 01       	movw	r24, r14
    dd72:	0e 94 b2 61 	call	0xc364	; 0xc364 <f_getfree>
    if (res)
    dd76:	00 97       	sbiw	r24, 0x00	; 0
    dd78:	09 f0       	breq	.+2      	; 0xdd7c <fatfs_status+0x4c>
    dd7a:	f8 c0       	rjmp	.+496    	; 0xdf6c <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    dd7c:	ee a9       	ldd	r30, Y+54	; 0x36
    dd7e:	ff a9       	ldd	r31, Y+55	; 0x37
    dd80:	80 81       	ld	r24, Z
    dd82:	90 e0       	ldi	r25, 0x00	; 0
    dd84:	c6 df       	rcall	.-116    	; 0xdd12 <fatfs_fstype>
    dd86:	ed b7       	in	r30, 0x3d	; 61
    dd88:	fe b7       	in	r31, 0x3e	; 62
    dd8a:	95 83       	std	Z+5, r25	; 0x05
    dd8c:	84 83       	std	Z+4, r24	; 0x04
    dd8e:	8c e1       	ldi	r24, 0x1C	; 28
    dd90:	9a e0       	ldi	r25, 0x0A	; 10
    dd92:	a0 e0       	ldi	r26, 0x00	; 0
    dd94:	81 83       	std	Z+1, r24	; 0x01
    dd96:	92 83       	std	Z+2, r25	; 0x02
    dd98:	a3 83       	std	Z+3, r26	; 0x03
    dd9a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    dd9e:	ee a9       	ldd	r30, Y+54	; 0x36
    dda0:	ff a9       	ldd	r31, Y+55	; 0x37
    dda2:	81 85       	ldd	r24, Z+9	; 0x09
    dda4:	92 85       	ldd	r25, Z+10	; 0x0a
    dda6:	a0 e0       	ldi	r26, 0x00	; 0
    dda8:	b0 e0       	ldi	r27, 0x00	; 0
    ddaa:	39 e0       	ldi	r19, 0x09	; 9
    ddac:	88 0f       	add	r24, r24
    ddae:	99 1f       	adc	r25, r25
    ddb0:	aa 1f       	adc	r26, r26
    ddb2:	bb 1f       	adc	r27, r27
    ddb4:	3a 95       	dec	r19
    ddb6:	d1 f7       	brne	.-12     	; 0xddac <fatfs_status+0x7c>
    ddb8:	ed b7       	in	r30, 0x3d	; 61
    ddba:	fe b7       	in	r31, 0x3e	; 62
    ddbc:	84 83       	std	Z+4, r24	; 0x04
    ddbe:	95 83       	std	Z+5, r25	; 0x05
    ddc0:	a6 83       	std	Z+6, r26	; 0x06
    ddc2:	b7 83       	std	Z+7, r27	; 0x07
    ddc4:	8d ef       	ldi	r24, 0xFD	; 253
    ddc6:	99 e0       	ldi	r25, 0x09	; 9
    ddc8:	a0 e0       	ldi	r26, 0x00	; 0
    ddca:	81 83       	std	Z+1, r24	; 0x01
    ddcc:	92 83       	std	Z+2, r25	; 0x02
    ddce:	a3 83       	std	Z+3, r26	; 0x03
    ddd0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    ddd4:	ee a9       	ldd	r30, Y+54	; 0x36
    ddd6:	ff a9       	ldd	r31, Y+55	; 0x37
    ddd8:	82 81       	ldd	r24, Z+2	; 0x02
    ddda:	90 e0       	ldi	r25, 0x00	; 0
    dddc:	ed b7       	in	r30, 0x3d	; 61
    ddde:	fe b7       	in	r31, 0x3e	; 62
    dde0:	95 83       	std	Z+5, r25	; 0x05
    dde2:	84 83       	std	Z+4, r24	; 0x04
    dde4:	8f ed       	ldi	r24, 0xDF	; 223
    dde6:	99 e0       	ldi	r25, 0x09	; 9
    dde8:	a0 e0       	ldi	r26, 0x00	; 0
    ddea:	81 83       	std	Z+1, r24	; 0x01
    ddec:	92 83       	std	Z+2, r25	; 0x02
    ddee:	a3 83       	std	Z+3, r26	; 0x03
    ddf0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    ddf4:	ee a9       	ldd	r30, Y+54	; 0x36
    ddf6:	ff a9       	ldd	r31, Y+55	; 0x37
    ddf8:	87 81       	ldd	r24, Z+7	; 0x07
    ddfa:	90 85       	ldd	r25, Z+8	; 0x08
    ddfc:	ed b7       	in	r30, 0x3d	; 61
    ddfe:	fe b7       	in	r31, 0x3e	; 62
    de00:	95 83       	std	Z+5, r25	; 0x05
    de02:	84 83       	std	Z+4, r24	; 0x04
    de04:	81 ec       	ldi	r24, 0xC1	; 193
    de06:	99 e0       	ldi	r25, 0x09	; 9
    de08:	a0 e0       	ldi	r26, 0x00	; 0
    de0a:	81 83       	std	Z+1, r24	; 0x01
    de0c:	92 83       	std	Z+2, r25	; 0x02
    de0e:	a3 83       	std	Z+3, r26	; 0x03
    de10:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    de14:	ee a9       	ldd	r30, Y+54	; 0x36
    de16:	ff a9       	ldd	r31, Y+55	; 0x37
    de18:	85 8d       	ldd	r24, Z+29	; 0x1d
    de1a:	96 8d       	ldd	r25, Z+30	; 0x1e
    de1c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    de1e:	b0 a1       	ldd	r27, Z+32	; 0x20
    de20:	ed b7       	in	r30, 0x3d	; 61
    de22:	fe b7       	in	r31, 0x3e	; 62
    de24:	84 83       	std	Z+4, r24	; 0x04
    de26:	95 83       	std	Z+5, r25	; 0x05
    de28:	a6 83       	std	Z+6, r26	; 0x06
    de2a:	b7 83       	std	Z+7, r27	; 0x07
    de2c:	82 ea       	ldi	r24, 0xA2	; 162
    de2e:	99 e0       	ldi	r25, 0x09	; 9
    de30:	a0 e0       	ldi	r26, 0x00	; 0
    de32:	81 83       	std	Z+1, r24	; 0x01
    de34:	92 83       	std	Z+2, r25	; 0x02
    de36:	a3 83       	std	Z+3, r26	; 0x03
    de38:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    de3c:	ee a9       	ldd	r30, Y+54	; 0x36
    de3e:	ff a9       	ldd	r31, Y+55	; 0x37
    de40:	81 8d       	ldd	r24, Z+25	; 0x19
    de42:	92 8d       	ldd	r25, Z+26	; 0x1a
    de44:	a3 8d       	ldd	r26, Z+27	; 0x1b
    de46:	b4 8d       	ldd	r27, Z+28	; 0x1c
    de48:	02 97       	sbiw	r24, 0x02	; 2
    de4a:	a1 09       	sbc	r26, r1
    de4c:	b1 09       	sbc	r27, r1
    de4e:	ed b7       	in	r30, 0x3d	; 61
    de50:	fe b7       	in	r31, 0x3e	; 62
    de52:	84 83       	std	Z+4, r24	; 0x04
    de54:	95 83       	std	Z+5, r25	; 0x05
    de56:	a6 83       	std	Z+6, r26	; 0x06
    de58:	b7 83       	std	Z+7, r27	; 0x07
    de5a:	83 e8       	ldi	r24, 0x83	; 131
    de5c:	99 e0       	ldi	r25, 0x09	; 9
    de5e:	a0 e0       	ldi	r26, 0x00	; 0
    de60:	81 83       	std	Z+1, r24	; 0x01
    de62:	92 83       	std	Z+2, r25	; 0x02
    de64:	a3 83       	std	Z+3, r26	; 0x03
    de66:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    de6a:	ee a9       	ldd	r30, Y+54	; 0x36
    de6c:	ff a9       	ldd	r31, Y+55	; 0x37
    de6e:	85 a1       	ldd	r24, Z+37	; 0x25
    de70:	96 a1       	ldd	r25, Z+38	; 0x26
    de72:	a7 a1       	ldd	r26, Z+39	; 0x27
    de74:	b0 a5       	ldd	r27, Z+40	; 0x28
    de76:	ed b7       	in	r30, 0x3d	; 61
    de78:	fe b7       	in	r31, 0x3e	; 62
    de7a:	84 83       	std	Z+4, r24	; 0x04
    de7c:	95 83       	std	Z+5, r25	; 0x05
    de7e:	a6 83       	std	Z+6, r26	; 0x06
    de80:	b7 83       	std	Z+7, r27	; 0x07
    de82:	84 e6       	ldi	r24, 0x64	; 100
    de84:	99 e0       	ldi	r25, 0x09	; 9
    de86:	a0 e0       	ldi	r26, 0x00	; 0
    de88:	81 83       	std	Z+1, r24	; 0x01
    de8a:	92 83       	std	Z+2, r25	; 0x02
    de8c:	a3 83       	std	Z+3, r26	; 0x03
    de8e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    de92:	ee a9       	ldd	r30, Y+54	; 0x36
    de94:	ff a9       	ldd	r31, Y+55	; 0x37
    de96:	81 a5       	ldd	r24, Z+41	; 0x29
    de98:	92 a5       	ldd	r25, Z+42	; 0x2a
    de9a:	a3 a5       	ldd	r26, Z+43	; 0x2b
    de9c:	b4 a5       	ldd	r27, Z+44	; 0x2c
    de9e:	ed b7       	in	r30, 0x3d	; 61
    dea0:	fe b7       	in	r31, 0x3e	; 62
    dea2:	84 83       	std	Z+4, r24	; 0x04
    dea4:	95 83       	std	Z+5, r25	; 0x05
    dea6:	a6 83       	std	Z+6, r26	; 0x06
    dea8:	b7 83       	std	Z+7, r27	; 0x07
    deaa:	85 e4       	ldi	r24, 0x45	; 69
    deac:	99 e0       	ldi	r25, 0x09	; 9
    deae:	a0 e0       	ldi	r26, 0x00	; 0
    deb0:	81 83       	std	Z+1, r24	; 0x01
    deb2:	92 83       	std	Z+2, r25	; 0x02
    deb4:	a3 83       	std	Z+3, r26	; 0x03
    deb6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    deba:	ee a9       	ldd	r30, Y+54	; 0x36
    debc:	ff a9       	ldd	r31, Y+55	; 0x37
    debe:	85 a5       	ldd	r24, Z+45	; 0x2d
    dec0:	96 a5       	ldd	r25, Z+46	; 0x2e
    dec2:	a7 a5       	ldd	r26, Z+47	; 0x2f
    dec4:	b0 a9       	ldd	r27, Z+48	; 0x30
    dec6:	ed b7       	in	r30, 0x3d	; 61
    dec8:	fe b7       	in	r31, 0x3e	; 62
    deca:	84 83       	std	Z+4, r24	; 0x04
    decc:	95 83       	std	Z+5, r25	; 0x05
    dece:	a6 83       	std	Z+6, r26	; 0x06
    ded0:	b7 83       	std	Z+7, r27	; 0x07
    ded2:	86 e2       	ldi	r24, 0x26	; 38
    ded4:	99 e0       	ldi	r25, 0x09	; 9
    ded6:	a0 e0       	ldi	r26, 0x00	; 0
    ded8:	81 83       	std	Z+1, r24	; 0x01
    deda:	92 83       	std	Z+2, r25	; 0x02
    dedc:	a3 83       	std	Z+3, r26	; 0x03
    dede:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    dee2:	ae 01       	movw	r20, r28
    dee4:	42 5d       	subi	r20, 0xD2	; 210
    dee6:	5f 4f       	sbci	r21, 0xFF	; 255
    dee8:	be 01       	movw	r22, r28
    deea:	6c 5e       	subi	r22, 0xEC	; 236
    deec:	7f 4f       	sbci	r23, 0xFF	; 255
    deee:	c7 01       	movw	r24, r14
    def0:	0e 94 e4 65 	call	0xcbc8	; 0xcbc8 <f_getlabel>
    if (res)
    def4:	00 97       	sbiw	r24, 0x00	; 0
    def6:	d1 f5       	brne	.+116    	; 0xdf6c <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    def8:	8c 89       	ldd	r24, Y+20	; 0x14
    defa:	81 11       	cpse	r24, r1
    defc:	03 c0       	rjmp	.+6      	; 0xdf04 <fatfs_status+0x1d4>
    defe:	8b ea       	ldi	r24, 0xAB	; 171
    df00:	98 e0       	ldi	r25, 0x08	; 8
    df02:	02 c0       	rjmp	.+4      	; 0xdf08 <fatfs_status+0x1d8>
    df04:	ce 01       	movw	r24, r28
    df06:	44 96       	adiw	r24, 0x14	; 20
    df08:	ed b7       	in	r30, 0x3d	; 61
    df0a:	fe b7       	in	r31, 0x3e	; 62
    df0c:	95 83       	std	Z+5, r25	; 0x05
    df0e:	84 83       	std	Z+4, r24	; 0x04
    df10:	88 e0       	ldi	r24, 0x08	; 8
    df12:	99 e0       	ldi	r25, 0x09	; 9
    df14:	a0 e0       	ldi	r26, 0x00	; 0
    df16:	81 83       	std	Z+1, r24	; 0x01
    df18:	92 83       	std	Z+2, r25	; 0x02
    df1a:	a3 83       	std	Z+3, r26	; 0x03
    df1c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    df20:	8e a5       	ldd	r24, Y+46	; 0x2e
    df22:	9f a5       	ldd	r25, Y+47	; 0x2f
    df24:	a8 a9       	ldd	r26, Y+48	; 0x30
    df26:	b9 a9       	ldd	r27, Y+49	; 0x31
    df28:	ed b7       	in	r30, 0x3d	; 61
    df2a:	fe b7       	in	r31, 0x3e	; 62
    df2c:	97 83       	std	Z+7, r25	; 0x07
    df2e:	86 83       	std	Z+6, r24	; 0x06
    df30:	b5 83       	std	Z+5, r27	; 0x05
    df32:	a4 83       	std	Z+4, r26	; 0x04
    df34:	83 ee       	ldi	r24, 0xE3	; 227
    df36:	98 e0       	ldi	r25, 0x08	; 8
    df38:	a0 e0       	ldi	r26, 0x00	; 0
    df3a:	81 83       	std	Z+1, r24	; 0x01
    df3c:	92 83       	std	Z+2, r25	; 0x02
    df3e:	a3 83       	std	Z+3, r26	; 0x03
    df40:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    df44:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <AccDirs+0x1>
    df48:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <AccDirs>
    df4c:	10 92 c8 1c 	sts	0x1CC8, r1	; 0x801cc8 <AccFiles+0x1>
    df50:	10 92 c7 1c 	sts	0x1CC7, r1	; 0x801cc7 <AccFiles>
    df54:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <AccSize>
    df58:	10 92 c2 1c 	sts	0x1CC2, r1	; 0x801cc2 <AccSize+0x1>
    df5c:	10 92 c3 1c 	sts	0x1CC3, r1	; 0x801cc3 <AccSize+0x2>
    df60:	10 92 c4 1c 	sts	0x1CC4, r1	; 0x801cc4 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    if (res)
    df64:	c7 01       	movw	r24, r14
    {
        put_rc(res);
    df66:	65 de       	rcall	.-822    	; 0xdc32 <fatfs_scan_files>
    df68:	00 97       	sbiw	r24, 0x00	; 0
        return;
    df6a:	11 f0       	breq	.+4      	; 0xdf70 <fatfs_status+0x240>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    df6c:	4d de       	rcall	.-870    	; 0xdc08 <put_rc>
    df6e:	56 c0       	rjmp	.+172    	; 0xe01c <fatfs_status+0x2ec>
    df70:	0e a9       	ldd	r16, Y+54	; 0x36
    df72:	1f a9       	ldd	r17, Y+55	; 0x37
    df74:	f8 01       	movw	r30, r16
    df76:	c1 84       	ldd	r12, Z+9	; 0x09
    df78:	d2 84       	ldd	r13, Z+10	; 0x0a
    df7a:	e1 2c       	mov	r14, r1
    df7c:	f1 2c       	mov	r15, r1
    df7e:	6a a9       	ldd	r22, Y+50	; 0x32
    df80:	7b a9       	ldd	r23, Y+51	; 0x33
    df82:	8c a9       	ldd	r24, Y+52	; 0x34
    df84:	9d a9       	ldd	r25, Y+53	; 0x35
    df86:	a7 01       	movw	r20, r14
    df88:	96 01       	movw	r18, r12
    df8a:	0e 94 13 df 	call	0x1be26	; 0x1be26 <__mulsi3>
    df8e:	22 e0       	ldi	r18, 0x02	; 2
    df90:	30 e0       	ldi	r19, 0x00	; 0
    df92:	40 e0       	ldi	r20, 0x00	; 0
    df94:	50 e0       	ldi	r21, 0x00	; 0
    df96:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
    df9a:	ed b7       	in	r30, 0x3d	; 61
    df9c:	fe b7       	in	r31, 0x3e	; 62
    df9e:	20 8b       	std	Z+16, r18	; 0x10
    dfa0:	31 8b       	std	Z+17, r19	; 0x11
    dfa2:	42 8b       	std	Z+18, r20	; 0x12
    dfa4:	53 8b       	std	Z+19, r21	; 0x13
    dfa6:	f8 01       	movw	r30, r16
    dfa8:	81 8d       	ldd	r24, Z+25	; 0x19
    dfaa:	92 8d       	ldd	r25, Z+26	; 0x1a
    dfac:	a3 8d       	ldd	r26, Z+27	; 0x1b
    dfae:	b4 8d       	ldd	r27, Z+28	; 0x1c
    dfb0:	9c 01       	movw	r18, r24
    dfb2:	ad 01       	movw	r20, r26
    dfb4:	22 50       	subi	r18, 0x02	; 2
    dfb6:	31 09       	sbc	r19, r1
    dfb8:	41 09       	sbc	r20, r1
    dfba:	51 09       	sbc	r21, r1
    dfbc:	c7 01       	movw	r24, r14
    dfbe:	b6 01       	movw	r22, r12
    dfc0:	0e 94 13 df 	call	0x1be26	; 0x1be26 <__mulsi3>
    dfc4:	dc 01       	movw	r26, r24
    dfc6:	cb 01       	movw	r24, r22
    dfc8:	b6 95       	lsr	r27
    dfca:	a7 95       	ror	r26
    dfcc:	97 95       	ror	r25
    dfce:	87 95       	ror	r24
    dfd0:	ed b7       	in	r30, 0x3d	; 61
    dfd2:	fe b7       	in	r31, 0x3e	; 62
    dfd4:	84 87       	std	Z+12, r24	; 0x0c
    dfd6:	95 87       	std	Z+13, r25	; 0x0d
    dfd8:	a6 87       	std	Z+14, r26	; 0x0e
    dfda:	b7 87       	std	Z+15, r27	; 0x0f
    dfdc:	80 91 c5 1c 	lds	r24, 0x1CC5	; 0x801cc5 <AccDirs>
    dfe0:	90 91 c6 1c 	lds	r25, 0x1CC6	; 0x801cc6 <AccDirs+0x1>
    dfe4:	93 87       	std	Z+11, r25	; 0x0b
    dfe6:	82 87       	std	Z+10, r24	; 0x0a
    dfe8:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <AccSize>
    dfec:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <AccSize+0x1>
    dff0:	a0 91 c3 1c 	lds	r26, 0x1CC3	; 0x801cc3 <AccSize+0x2>
    dff4:	b0 91 c4 1c 	lds	r27, 0x1CC4	; 0x801cc4 <AccSize+0x3>
    dff8:	86 83       	std	Z+6, r24	; 0x06
    dffa:	97 83       	std	Z+7, r25	; 0x07
    dffc:	a0 87       	std	Z+8, r26	; 0x08
    dffe:	b1 87       	std	Z+9, r27	; 0x09
    e000:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <AccFiles>
    e004:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <AccFiles+0x1>
    e008:	95 83       	std	Z+5, r25	; 0x05
    e00a:	84 83       	std	Z+4, r24	; 0x04
    e00c:	86 e9       	ldi	r24, 0x96	; 150
    e00e:	98 e0       	ldi	r25, 0x08	; 8
    e010:	a0 e0       	ldi	r26, 0x00	; 0
    e012:	81 83       	std	Z+1, r24	; 0x01
    e014:	92 83       	std	Z+2, r25	; 0x02
    e016:	a3 83       	std	Z+3, r26	; 0x03
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e018:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    e01c:	e7 96       	adiw	r28, 0x37	; 55
    e01e:	e8 e0       	ldi	r30, 0x08	; 8
    e020:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000e024 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e024:	ab e1       	ldi	r26, 0x1B	; 27
    e026:	b0 e0       	ldi	r27, 0x00	; 0
    e028:	e8 e1       	ldi	r30, 0x18	; 24
    e02a:	f0 e7       	ldi	r31, 0x70	; 112
    e02c:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    e030:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e032:	fc 01       	movw	r30, r24
    e034:	86 89       	ldd	r24, Z+22	; 0x16
    e036:	81 11       	cpse	r24, r1
    e038:	03 c0       	rjmp	.+6      	; 0xe040 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e03a:	8b e7       	ldi	r24, 0x7B	; 123
    e03c:	98 e0       	ldi	r25, 0x08	; 8
    e03e:	69 c0       	rjmp	.+210    	; 0xe112 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e040:	fd 01       	movw	r30, r26
    e042:	80 85       	ldd	r24, Z+8	; 0x08
    e044:	84 fd       	sbrc	r24, 4
    e046:	02 c0       	rjmp	.+4      	; 0xe04c <fatfs_filinfo_list+0x28>
    e048:	9d e2       	ldi	r25, 0x2D	; 45
    e04a:	01 c0       	rjmp	.+2      	; 0xe04e <fatfs_filinfo_list+0x2a>
    e04c:	94 e4       	ldi	r25, 0x44	; 68
    e04e:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e050:	80 fd       	sbrc	r24, 0
    e052:	02 c0       	rjmp	.+4      	; 0xe058 <fatfs_filinfo_list+0x34>
    e054:	9d e2       	ldi	r25, 0x2D	; 45
    e056:	01 c0       	rjmp	.+2      	; 0xe05a <fatfs_filinfo_list+0x36>
    e058:	92 e5       	ldi	r25, 0x52	; 82
    e05a:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e05c:	81 fd       	sbrc	r24, 1
    e05e:	02 c0       	rjmp	.+4      	; 0xe064 <fatfs_filinfo_list+0x40>
    e060:	9d e2       	ldi	r25, 0x2D	; 45
    e062:	01 c0       	rjmp	.+2      	; 0xe066 <fatfs_filinfo_list+0x42>
    e064:	98 e4       	ldi	r25, 0x48	; 72
    e066:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e068:	82 fd       	sbrc	r24, 2
    e06a:	02 c0       	rjmp	.+4      	; 0xe070 <fatfs_filinfo_list+0x4c>
    e06c:	9d e2       	ldi	r25, 0x2D	; 45
    e06e:	01 c0       	rjmp	.+2      	; 0xe072 <fatfs_filinfo_list+0x4e>
    e070:	93 e5       	ldi	r25, 0x53	; 83
    e072:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e074:	85 fd       	sbrc	r24, 5
    e076:	02 c0       	rjmp	.+4      	; 0xe07c <fatfs_filinfo_list+0x58>
    e078:	8d e2       	ldi	r24, 0x2D	; 45
    e07a:	01 c0       	rjmp	.+2      	; 0xe07e <fatfs_filinfo_list+0x5a>
    e07c:	81 e4       	ldi	r24, 0x41	; 65
    e07e:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e080:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e082:	fd 01       	movw	r30, r26
    e084:	24 81       	ldd	r18, Z+4	; 0x04
    e086:	35 81       	ldd	r19, Z+5	; 0x05
    e088:	46 81       	ldd	r20, Z+6	; 0x06
    e08a:	57 81       	ldd	r21, Z+7	; 0x07
    e08c:	cd 01       	movw	r24, r26
    e08e:	46 96       	adiw	r24, 0x16	; 22
    e090:	ed b7       	in	r30, 0x3d	; 61
    e092:	fe b7       	in	r31, 0x3e	; 62
    e094:	95 8b       	std	Z+21, r25	; 0x15
    e096:	84 8b       	std	Z+20, r24	; 0x14
    e098:	8d 91       	ld	r24, X+
    e09a:	9d 91       	ld	r25, X+
    e09c:	0d 90       	ld	r0, X+
    e09e:	bc 91       	ld	r27, X
    e0a0:	a0 2d       	mov	r26, r0
    e0a2:	80 8b       	std	Z+16, r24	; 0x10
    e0a4:	91 8b       	std	Z+17, r25	; 0x11
    e0a6:	a2 8b       	std	Z+18, r26	; 0x12
    e0a8:	b3 8b       	std	Z+19, r27	; 0x13
    e0aa:	ca 01       	movw	r24, r20
    e0ac:	45 e0       	ldi	r20, 0x05	; 5
    e0ae:	96 95       	lsr	r25
    e0b0:	87 95       	ror	r24
    e0b2:	4a 95       	dec	r20
    e0b4:	e1 f7       	brne	.-8      	; 0xe0ae <fatfs_filinfo_list+0x8a>
    e0b6:	8f 73       	andi	r24, 0x3F	; 63
    e0b8:	99 27       	eor	r25, r25
    e0ba:	97 87       	std	Z+15, r25	; 0x0f
    e0bc:	86 87       	std	Z+14, r24	; 0x0e
    e0be:	85 2f       	mov	r24, r21
    e0c0:	86 95       	lsr	r24
    e0c2:	86 95       	lsr	r24
    e0c4:	86 95       	lsr	r24
    e0c6:	84 87       	std	Z+12, r24	; 0x0c
    e0c8:	15 86       	std	Z+13, r1	; 0x0d
    e0ca:	c9 01       	movw	r24, r18
    e0cc:	8f 71       	andi	r24, 0x1F	; 31
    e0ce:	99 27       	eor	r25, r25
    e0d0:	93 87       	std	Z+11, r25	; 0x0b
    e0d2:	82 87       	std	Z+10, r24	; 0x0a
    e0d4:	c9 01       	movw	r24, r18
    e0d6:	55 e0       	ldi	r21, 0x05	; 5
    e0d8:	96 95       	lsr	r25
    e0da:	87 95       	ror	r24
    e0dc:	5a 95       	dec	r21
    e0de:	e1 f7       	brne	.-8      	; 0xe0d8 <fatfs_filinfo_list+0xb4>
    e0e0:	8f 70       	andi	r24, 0x0F	; 15
    e0e2:	99 27       	eor	r25, r25
    e0e4:	91 87       	std	Z+9, r25	; 0x09
    e0e6:	80 87       	std	Z+8, r24	; 0x08
    e0e8:	23 2f       	mov	r18, r19
    e0ea:	33 27       	eor	r19, r19
    e0ec:	26 95       	lsr	r18
    e0ee:	24 54       	subi	r18, 0x44	; 68
    e0f0:	38 4f       	sbci	r19, 0xF8	; 248
    e0f2:	37 83       	std	Z+7, r19	; 0x07
    e0f4:	26 83       	std	Z+6, r18	; 0x06
    e0f6:	ce 01       	movw	r24, r28
    e0f8:	46 96       	adiw	r24, 0x16	; 22
    e0fa:	95 83       	std	Z+5, r25	; 0x05
    e0fc:	84 83       	std	Z+4, r24	; 0x04
    e0fe:	89 e5       	ldi	r24, 0x59	; 89
    e100:	98 e0       	ldi	r25, 0x08	; 8
    e102:	a0 e0       	ldi	r26, 0x00	; 0
    e104:	81 83       	std	Z+1, r24	; 0x01
    e106:	92 83       	std	Z+2, r25	; 0x02
    e108:	a3 83       	std	Z+3, r26	; 0x03
    e10a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e10e:	87 e5       	ldi	r24, 0x57	; 87
    e110:	98 e0       	ldi	r25, 0x08	; 8
    e112:	a0 e0       	ldi	r26, 0x00	; 0
    e114:	ed b7       	in	r30, 0x3d	; 61
    e116:	fe b7       	in	r31, 0x3e	; 62
    e118:	81 83       	std	Z+1, r24	; 0x01
    e11a:	92 83       	std	Z+2, r25	; 0x02
    e11c:	a3 83       	std	Z+3, r26	; 0x03
    e11e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
}
    e122:	6b 96       	adiw	r28, 0x1b	; 27
    e124:	e2 e0       	ldi	r30, 0x02	; 2
    e126:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000e12a <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e12a:	cf 93       	push	r28
    e12c:	df 93       	push	r29
    e12e:	00 d0       	rcall	.+0      	; 0xe130 <fatfs_help+0x6>
    e130:	1f 92       	push	r1
    e132:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e134:	8c e9       	ldi	r24, 0x9C	; 156
    e136:	9b e0       	ldi	r25, 0x0B	; 11
    e138:	a0 e0       	ldi	r26, 0x00	; 0
    e13a:	ed b7       	in	r30, 0x3d	; 61
    e13c:	fe b7       	in	r31, 0x3e	; 62
    e13e:	81 83       	std	Z+1, r24	; 0x01
    e140:	92 83       	std	Z+2, r25	; 0x02
    e142:	a3 83       	std	Z+3, r26	; 0x03
    e144:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    if(full)
    e148:	cd 2b       	or	r28, r29
    e14a:	51 f0       	breq	.+20     	; 0xe160 <fatfs_help+0x36>
    {
        printf(
    e14c:	80 e2       	ldi	r24, 0x20	; 32
    e14e:	9b e0       	ldi	r25, 0x0B	; 11
    e150:	a0 e0       	ldi	r26, 0x00	; 0
    e152:	ed b7       	in	r30, 0x3d	; 61
    e154:	fe b7       	in	r31, 0x3e	; 62
    e156:	81 83       	std	Z+1, r24	; 0x01
    e158:	92 83       	std	Z+2, r25	; 0x02
    e15a:	a3 83       	std	Z+3, r26	; 0x03
    e15c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    #endif
            "\n"
            );
    }

}
    e160:	cd b7       	in	r28, 0x3d	; 61
    e162:	de b7       	in	r29, 0x3e	; 62
    e164:	23 96       	adiw	r28, 0x03	; 3
    e166:	e2 e0       	ldi	r30, 0x02	; 2
    e168:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000e16c <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e16c:	a5 e5       	ldi	r26, 0x55	; 85
    e16e:	b2 e0       	ldi	r27, 0x02	; 2
    e170:	ec eb       	ldi	r30, 0xBC	; 188
    e172:	f0 e7       	ldi	r31, 0x70	; 112
    e174:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    e178:	8e 01       	movw	r16, r28
    e17a:	0e 5d       	subi	r16, 0xDE	; 222
    e17c:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256];

    if(!name || !*name)
    e17e:	00 97       	sbiw	r24, 0x00	; 0
    e180:	21 f0       	breq	.+8      	; 0xe18a <fatfs_ls+0x1e>
    e182:	fc 01       	movw	r30, r24
    e184:	20 81       	ld	r18, Z
    e186:	21 11       	cpse	r18, r1
    e188:	03 c0       	rjmp	.+6      	; 0xe190 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e18a:	63 ef       	ldi	r22, 0xF3	; 243
    e18c:	72 e1       	ldi	r23, 0x12	; 18
    e18e:	01 c0       	rjmp	.+2      	; 0xe192 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e190:	bc 01       	movw	r22, r24
    e192:	c8 01       	movw	r24, r16
    e194:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e198:	ed b7       	in	r30, 0x3d	; 61
    e19a:	fe b7       	in	r31, 0x3e	; 62
    e19c:	15 83       	std	Z+5, r17	; 0x05
    e19e:	04 83       	std	Z+4, r16	; 0x04
    e1a0:	80 e9       	ldi	r24, 0x90	; 144
    e1a2:	9a e0       	ldi	r25, 0x0A	; 10
    e1a4:	a0 e0       	ldi	r26, 0x00	; 0
    e1a6:	81 83       	std	Z+1, r24	; 0x01
    e1a8:	92 83       	std	Z+2, r25	; 0x02
    e1aa:	a3 83       	std	Z+3, r26	; 0x03
    e1ac:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    res = f_opendir(&dirs, buff);
    e1b0:	b8 01       	movw	r22, r16
    e1b2:	ce 01       	movw	r24, r28
    e1b4:	8e 5d       	subi	r24, 0xDE	; 222
    e1b6:	9d 4f       	sbci	r25, 0xFD	; 253
    e1b8:	0e 94 aa 60 	call	0xc154	; 0xc154 <f_opendir>
    if (res) { put_rc(res); return; }
    e1bc:	00 97       	sbiw	r24, 0x00	; 0
    e1be:	11 f0       	breq	.+4      	; 0xe1c4 <fatfs_ls+0x58>
    e1c0:	23 dd       	rcall	.-1466   	; 0xdc08 <put_rc>
    p1 = s1 = s2 = 0;
    e1c2:	8a c0       	rjmp	.+276    	; 0xe2d8 <fatfs_ls+0x16c>
    e1c4:	c0 5b       	subi	r28, 0xB0	; 176
    e1c6:	dd 4f       	sbci	r29, 0xFD	; 253
    e1c8:	18 82       	st	Y, r1
    e1ca:	19 82       	std	Y+1, r1	; 0x01
    e1cc:	1a 82       	std	Y+2, r1	; 0x02
    e1ce:	1b 82       	std	Y+3, r1	; 0x03
    e1d0:	c0 55       	subi	r28, 0x50	; 80
    e1d2:	d2 40       	sbci	r29, 0x02	; 2
    e1d4:	c1 2c       	mov	r12, r1
    e1d6:	d1 2c       	mov	r13, r1
    e1d8:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e1da:	f1 2c       	mov	r15, r1
    e1dc:	be 01       	movw	r22, r28
    e1de:	64 5f       	subi	r22, 0xF4	; 244
    e1e0:	7f 4f       	sbci	r23, 0xFF	; 255
    e1e2:	ce 01       	movw	r24, r28
    e1e4:	8e 5d       	subi	r24, 0xDE	; 222
    e1e6:	9d 4f       	sbci	r25, 0xFD	; 253
    e1e8:	0e 94 30 61 	call	0xc260	; 0xc260 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e1ec:	89 2b       	or	r24, r25
    e1ee:	49 f5       	brne	.+82     	; 0xe242 <fatfs_ls+0xd6>
    e1f0:	8a a1       	ldd	r24, Y+34	; 0x22
    e1f2:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e1f4:	31 f1       	breq	.+76     	; 0xe242 <fatfs_ls+0xd6>
    e1f6:	8c 89       	ldd	r24, Y+20	; 0x14
    e1f8:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e1fa:	04 c0       	rjmp	.+8      	; 0xe204 <fatfs_ls+0x98>
    e1fc:	ff ef       	ldi	r31, 0xFF	; 255
    e1fe:	cf 1a       	sub	r12, r31
    e200:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e202:	1b c0       	rjmp	.+54     	; 0xe23a <fatfs_ls+0xce>
    e204:	8f ef       	ldi	r24, 0xFF	; 255
    e206:	e8 1a       	sub	r14, r24
    e208:	f8 0a       	sbc	r15, r24
    e20a:	4c 85       	ldd	r20, Y+12	; 0x0c
    e20c:	5d 85       	ldd	r21, Y+13	; 0x0d
    e20e:	6e 85       	ldd	r22, Y+14	; 0x0e
    e210:	7f 85       	ldd	r23, Y+15	; 0x0f
    e212:	c0 5b       	subi	r28, 0xB0	; 176
    e214:	dd 4f       	sbci	r29, 0xFD	; 253
    e216:	88 81       	ld	r24, Y
    e218:	99 81       	ldd	r25, Y+1	; 0x01
    e21a:	aa 81       	ldd	r26, Y+2	; 0x02
    e21c:	bb 81       	ldd	r27, Y+3	; 0x03
    e21e:	c0 55       	subi	r28, 0x50	; 80
    e220:	d2 40       	sbci	r29, 0x02	; 2
    e222:	84 0f       	add	r24, r20
    e224:	95 1f       	adc	r25, r21
    e226:	a6 1f       	adc	r26, r22
    e228:	b7 1f       	adc	r27, r23
    e22a:	c0 5b       	subi	r28, 0xB0	; 176
    e22c:	dd 4f       	sbci	r29, 0xFD	; 253
    e22e:	88 83       	st	Y, r24
    e230:	99 83       	std	Y+1, r25	; 0x01
    e232:	aa 83       	std	Y+2, r26	; 0x02
    e234:	bb 83       	std	Y+3, r27	; 0x03
    e236:	c0 55       	subi	r28, 0x50	; 80
        }
        fatfs_filinfo_list(&fno);
    e238:	d2 40       	sbci	r29, 0x02	; 2
    e23a:	ce 01       	movw	r24, r28
    e23c:	0c 96       	adiw	r24, 0x0c	; 12
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e23e:	f2 de       	rcall	.-540    	; 0xe024 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e240:	cd cf       	rjmp	.-102    	; 0xe1dc <fatfs_ls+0x70>
    e242:	ed b7       	in	r30, 0x3d	; 61
    e244:	fe b7       	in	r31, 0x3e	; 62
    e246:	d3 86       	std	Z+11, r13	; 0x0b
    e248:	c2 86       	std	Z+10, r12	; 0x0a
    e24a:	c0 5b       	subi	r28, 0xB0	; 176
    e24c:	dd 4f       	sbci	r29, 0xFD	; 253
    e24e:	88 81       	ld	r24, Y
    e250:	99 81       	ldd	r25, Y+1	; 0x01
    e252:	aa 81       	ldd	r26, Y+2	; 0x02
    e254:	bb 81       	ldd	r27, Y+3	; 0x03
    e256:	c0 55       	subi	r28, 0x50	; 80
    e258:	d2 40       	sbci	r29, 0x02	; 2
    e25a:	86 83       	std	Z+6, r24	; 0x06
    e25c:	97 83       	std	Z+7, r25	; 0x07
    e25e:	a0 87       	std	Z+8, r26	; 0x08
    e260:	b1 87       	std	Z+9, r27	; 0x09
    e262:	f5 82       	std	Z+5, r15	; 0x05
    e264:	e4 82       	std	Z+4, r14	; 0x04
    e266:	87 e6       	ldi	r24, 0x67	; 103
    e268:	9a e0       	ldi	r25, 0x0A	; 10
    e26a:	a0 e0       	ldi	r26, 0x00	; 0
    e26c:	81 83       	std	Z+1, r24	; 0x01
    e26e:	92 83       	std	Z+2, r25	; 0x02
    e270:	a3 83       	std	Z+3, r26	; 0x03
    e272:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e276:	ae 01       	movw	r20, r28
    e278:	4c 5a       	subi	r20, 0xAC	; 172
    e27a:	5d 4f       	sbci	r21, 0xFD	; 253
    e27c:	be 01       	movw	r22, r28
    e27e:	60 5b       	subi	r22, 0xB0	; 176
    e280:	7d 4f       	sbci	r23, 0xFD	; 253
    e282:	c8 01       	movw	r24, r16
    e284:	0e 94 b2 61 	call	0xc364	; 0xc364 <f_getfree>
    e288:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e28a:	31 f5       	brne	.+76     	; 0xe2d8 <fatfs_ls+0x16c>
    e28c:	cc 5a       	subi	r28, 0xAC	; 172
    e28e:	dd 4f       	sbci	r29, 0xFD	; 253
    e290:	e8 81       	ld	r30, Y
    e292:	f9 81       	ldd	r31, Y+1	; 0x01
    e294:	c4 55       	subi	r28, 0x54	; 84
    e296:	d2 40       	sbci	r29, 0x02	; 2
    e298:	a1 85       	ldd	r26, Z+9	; 0x09
    e29a:	b2 85       	ldd	r27, Z+10	; 0x0a
    e29c:	c0 5b       	subi	r28, 0xB0	; 176
    e29e:	dd 4f       	sbci	r29, 0xFD	; 253
    e2a0:	28 81       	ld	r18, Y
    e2a2:	39 81       	ldd	r19, Y+1	; 0x01
    e2a4:	4a 81       	ldd	r20, Y+2	; 0x02
    e2a6:	5b 81       	ldd	r21, Y+3	; 0x03
    e2a8:	c0 55       	subi	r28, 0x50	; 80
    e2aa:	d2 40       	sbci	r29, 0x02	; 2
    e2ac:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
    e2b0:	22 e0       	ldi	r18, 0x02	; 2
    e2b2:	30 e0       	ldi	r19, 0x00	; 0
    e2b4:	40 e0       	ldi	r20, 0x00	; 0
    e2b6:	50 e0       	ldi	r21, 0x00	; 0
    e2b8:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
    e2bc:	ed b7       	in	r30, 0x3d	; 61
    e2be:	fe b7       	in	r31, 0x3e	; 62
    e2c0:	24 83       	std	Z+4, r18	; 0x04
    e2c2:	35 83       	std	Z+5, r19	; 0x05
    e2c4:	46 83       	std	Z+6, r20	; 0x06
    e2c6:	57 83       	std	Z+7, r21	; 0x07
    e2c8:	82 e5       	ldi	r24, 0x52	; 82
    e2ca:	9a e0       	ldi	r25, 0x0A	; 10
    e2cc:	a0 e0       	ldi	r26, 0x00	; 0
    e2ce:	81 83       	std	Z+1, r24	; 0x01
    e2d0:	92 83       	std	Z+2, r25	; 0x02
    e2d2:	a3 83       	std	Z+3, r26	; 0x03
    e2d4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
}
    e2d8:	cb 5a       	subi	r28, 0xAB	; 171
    e2da:	dd 4f       	sbci	r29, 0xFD	; 253
    e2dc:	e8 e0       	ldi	r30, 0x08	; 8
    e2de:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000e2e2 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e2e2:	00 d0       	rcall	.+0      	; 0xe2e4 <mmc_test+0x2>
    e2e4:	1f 92       	push	r1
    printf("==============================\n");
    e2e6:	80 ef       	ldi	r24, 0xF0	; 240
    e2e8:	9a e0       	ldi	r25, 0x0A	; 10
    e2ea:	a0 e0       	ldi	r26, 0x00	; 0
    e2ec:	ed b7       	in	r30, 0x3d	; 61
    e2ee:	fe b7       	in	r31, 0x3e	; 62
    e2f0:	81 83       	std	Z+1, r24	; 0x01
    e2f2:	92 83       	std	Z+2, r25	; 0x02
    e2f4:	a3 83       	std	Z+3, r26	; 0x03
    e2f6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("START MMC TEST\n");
    e2fa:	80 ee       	ldi	r24, 0xE0	; 224
    e2fc:	9a e0       	ldi	r25, 0x0A	; 10
    e2fe:	a0 e0       	ldi	r26, 0x00	; 0
    e300:	ed b7       	in	r30, 0x3d	; 61
    e302:	fe b7       	in	r31, 0x3e	; 62
    e304:	81 83       	std	Z+1, r24	; 0x01
    e306:	92 83       	std	Z+2, r25	; 0x02
    e308:	a3 83       	std	Z+3, r26	; 0x03
    e30a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    fatfs_status("/");
    e30e:	81 ea       	ldi	r24, 0xA1	; 161
    e310:	98 e0       	ldi	r25, 0x08	; 8
    e312:	0e dd       	rcall	.-1508   	; 0xdd30 <fatfs_status>
    printf("MMC Directory List\n");
    e314:	8c ec       	ldi	r24, 0xCC	; 204
    e316:	9a e0       	ldi	r25, 0x0A	; 10
    e318:	a0 e0       	ldi	r26, 0x00	; 0
    e31a:	ed b7       	in	r30, 0x3d	; 61
    e31c:	fe b7       	in	r31, 0x3e	; 62
    e31e:	81 83       	std	Z+1, r24	; 0x01
    e320:	92 83       	std	Z+2, r25	; 0x02
    e322:	a3 83       	std	Z+3, r26	; 0x03
    e324:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    fatfs_ls("/");
    e328:	81 ea       	ldi	r24, 0xA1	; 161
    e32a:	98 e0       	ldi	r25, 0x08	; 8
    e32c:	1f df       	rcall	.-450    	; 0xe16c <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e32e:	8e eb       	ldi	r24, 0xBE	; 190
    e330:	9a e0       	ldi	r25, 0x0A	; 10
    e332:	a0 e0       	ldi	r26, 0x00	; 0
    e334:	ed b7       	in	r30, 0x3d	; 61
    e336:	fe b7       	in	r31, 0x3e	; 62
    e338:	81 83       	std	Z+1, r24	; 0x01
    e33a:	92 83       	std	Z+2, r25	; 0x02
    e33c:	a3 83       	std	Z+3, r26	; 0x03
    e33e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("==============================\n");
    e342:	8e e9       	ldi	r24, 0x9E	; 158
    e344:	9a e0       	ldi	r25, 0x0A	; 10
    e346:	a0 e0       	ldi	r26, 0x00	; 0
    e348:	ed b7       	in	r30, 0x3d	; 61
    e34a:	fe b7       	in	r31, 0x3e	; 62
    e34c:	81 83       	std	Z+1, r24	; 0x01
    e34e:	92 83       	std	Z+2, r25	; 0x02
    e350:	a3 83       	std	Z+3, r26	; 0x03
    e352:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
}
    e356:	0f 90       	pop	r0
    e358:	0f 90       	pop	r0
    e35a:	0f 90       	pop	r0
    e35c:	08 95       	ret

0000e35e <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e35e:	ef 92       	push	r14
    e360:	ff 92       	push	r15
    e362:	0f 93       	push	r16
    e364:	1f 93       	push	r17
    e366:	cf 93       	push	r28
    e368:	df 93       	push	r29
    e36a:	ad b7       	in	r26, 0x3d	; 61
    e36c:	be b7       	in	r27, 0x3e	; 62
    e36e:	17 97       	sbiw	r26, 0x07	; 7
    e370:	0f b6       	in	r0, 0x3f	; 63
    e372:	f8 94       	cli
    e374:	be bf       	out	0x3e, r27	; 62
    e376:	0f be       	out	0x3f, r0	; 63
    e378:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e37a:	fb 01       	movw	r30, r22
    e37c:	20 81       	ld	r18, Z
    e37e:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e380:	21 15       	cp	r18, r1
    e382:	31 05       	cpc	r19, r1
    e384:	19 f4       	brne	.+6      	; 0xe38c <fatfs_tests+0x2e>
        return(0);
    e386:	80 e0       	ldi	r24, 0x00	; 0
    e388:	90 e0       	ldi	r25, 0x00	; 0
    e38a:	73 c0       	rjmp	.+230    	; 0xe472 <fatfs_tests+0x114>
    e38c:	eb 01       	movw	r28, r22
    e38e:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e390:	6d ec       	ldi	r22, 0xCD	; 205
    e392:	78 e0       	ldi	r23, 0x08	; 8
    e394:	c9 01       	movw	r24, r18
    e396:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    e39a:	89 2b       	or	r24, r25
    e39c:	a1 f3       	breq	.-24     	; 0xe386 <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    e39e:	ea 80       	ldd	r14, Y+2	; 0x02
    e3a0:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e3a2:	e1 14       	cp	r14, r1
    e3a4:	f1 04       	cpc	r15, r1
    e3a6:	21 f4       	brne	.+8      	; 0xe3b0 <fatfs_tests+0x52>
        {
            fatfs_help(1);
    e3a8:	81 e0       	ldi	r24, 0x01	; 1
    e3aa:	90 e0       	ldi	r25, 0x00	; 0
    e3ac:	be de       	rcall	.-644    	; 0xe12a <fatfs_help>
    e3ae:	5f c0       	rjmp	.+190    	; 0xe46e <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e3b0:	65 e9       	ldi	r22, 0x95	; 149
    e3b2:	76 e1       	ldi	r23, 0x16	; 22
    e3b4:	c7 01       	movw	r24, r14
    e3b6:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    e3ba:	89 2b       	or	r24, r25
    e3bc:	a9 f7       	brne	.-22     	; 0xe3a8 <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e3be:	98 01       	movw	r18, r16
    e3c0:	42 e0       	ldi	r20, 0x02	; 2
    e3c2:	50 e0       	ldi	r21, 0x00	; 0
    e3c4:	63 ed       	ldi	r22, 0xD3	; 211
    e3c6:	78 e0       	ldi	r23, 0x08	; 8
    e3c8:	c7 01       	movw	r24, r14
    e3ca:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
    e3ce:	89 2b       	or	r24, r25
    e3d0:	31 f1       	breq	.+76     	; 0xe41e <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e3d2:	ed b7       	in	r30, 0x3d	; 61
    e3d4:	fe b7       	in	r31, 0x3e	; 62
    e3d6:	17 83       	std	Z+7, r17	; 0x07
    e3d8:	06 83       	std	Z+6, r16	; 0x06
    e3da:	82 e0       	ldi	r24, 0x02	; 2
    e3dc:	90 e0       	ldi	r25, 0x00	; 0
    e3de:	95 83       	std	Z+5, r25	; 0x05
    e3e0:	84 83       	std	Z+4, r24	; 0x04
    e3e2:	80 e1       	ldi	r24, 0x10	; 16
    e3e4:	9b e0       	ldi	r25, 0x0B	; 11
    e3e6:	a0 e0       	ldi	r26, 0x00	; 0
    e3e8:	81 83       	std	Z+1, r24	; 0x01
    e3ea:	92 83       	std	Z+2, r25	; 0x02
    e3ec:	a3 83       	std	Z+3, r26	; 0x03
    e3ee:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    e3f2:	7e 01       	movw	r14, r28
    e3f4:	f4 e0       	ldi	r31, 0x04	; 4
    e3f6:	ef 0e       	add	r14, r31
    e3f8:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    e3fa:	c2 e0       	ldi	r28, 0x02	; 2
    e3fc:	d0 e0       	ldi	r29, 0x00	; 0
    e3fe:	c0 17       	cp	r28, r16
    e400:	d1 07       	cpc	r29, r17
    e402:	3c f4       	brge	.+14     	; 0xe412 <fatfs_tests+0xb4>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e404:	f7 01       	movw	r30, r14
    e406:	81 91       	ld	r24, Z+
    e408:	91 91       	ld	r25, Z+
    e40a:	7f 01       	movw	r14, r30
    e40c:	af de       	rcall	.-674    	; 0xe16c <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e40e:	21 96       	adiw	r28, 0x01	; 1
    e410:	f6 cf       	rjmp	.-20     	; 0xe3fe <fatfs_tests+0xa0>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e412:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    e414:	61 f5       	brne	.+88     	; 0xe46e <fatfs_tests+0x110>
    e416:	85 e2       	ldi	r24, 0x25	; 37
    e418:	9c e0       	ldi	r25, 0x0C	; 12
    e41a:	a8 de       	rcall	.-688    	; 0xe16c <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e41c:	28 c0       	rjmp	.+80     	; 0xe46e <fatfs_tests+0x110>
    e41e:	98 01       	movw	r18, r16
    e420:	42 e0       	ldi	r20, 0x02	; 2
    e422:	50 e0       	ldi	r21, 0x00	; 0
    e424:	66 ed       	ldi	r22, 0xD6	; 214
    e426:	78 e0       	ldi	r23, 0x08	; 8
    e428:	c7 01       	movw	r24, r14
    e42a:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
    {
        mmc_test();
    e42e:	89 2b       	or	r24, r25
    e430:	11 f0       	breq	.+4      	; 0xe436 <fatfs_tests+0xd8>
    e432:	57 df       	rcall	.-338    	; 0xe2e2 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e434:	1c c0       	rjmp	.+56     	; 0xe46e <fatfs_tests+0x110>
    e436:	98 01       	movw	r18, r16
    e438:	42 e0       	ldi	r20, 0x02	; 2
    e43a:	50 e0       	ldi	r21, 0x00	; 0
    e43c:	6f ed       	ldi	r22, 0xDF	; 223
    e43e:	78 e0       	ldi	r23, 0x08	; 8
    e440:	c7 01       	movw	r24, r14
    e442:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
    {
        mmc_init(1);
    e446:	89 2b       	or	r24, r25
    e448:	21 f0       	breq	.+8      	; 0xe452 <fatfs_tests+0xf4>
    e44a:	81 e0       	ldi	r24, 0x01	; 1
    e44c:	90 e0       	ldi	r25, 0x00	; 0
    e44e:	99 da       	rcall	.-2766   	; 0xd982 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e450:	0e c0       	rjmp	.+28     	; 0xe46e <fatfs_tests+0x110>
    e452:	98 01       	movw	r18, r16
    e454:	43 e0       	ldi	r20, 0x03	; 3
    e456:	50 e0       	ldi	r21, 0x00	; 0
    e458:	68 ee       	ldi	r22, 0xE8	; 232
    e45a:	78 e0       	ldi	r23, 0x08	; 8
    e45c:	c7 01       	movw	r24, r14
    e45e:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
    e462:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    e464:	09 f4       	brne	.+2      	; 0xe468 <fatfs_tests+0x10a>
    e466:	8f cf       	rjmp	.-226    	; 0xe386 <fatfs_tests+0x28>
    e468:	8c 81       	ldd	r24, Y+4	; 0x04
    e46a:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e46c:	61 dc       	rcall	.-1854   	; 0xdd30 <fatfs_status>
    e46e:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    e470:	90 e0       	ldi	r25, 0x00	; 0
    e472:	cd b7       	in	r28, 0x3d	; 61
    e474:	de b7       	in	r29, 0x3e	; 62
    e476:	27 96       	adiw	r28, 0x07	; 7
    e478:	e6 e0       	ldi	r30, 0x06	; 6
    e47a:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

0000e47e <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e47e:	8f 92       	push	r8
    e480:	9f 92       	push	r9
    e482:	af 92       	push	r10
    e484:	bf 92       	push	r11
    e486:	ef 92       	push	r14
    e488:	ff 92       	push	r15
    e48a:	0f 93       	push	r16
    e48c:	1f 93       	push	r17
    e48e:	cf 93       	push	r28
    e490:	df 93       	push	r29
    e492:	00 d0       	rcall	.+0      	; 0xe494 <fatfs_getc+0x16>
    e494:	1f 92       	push	r1
    e496:	cd b7       	in	r28, 0x3d	; 61
    e498:	de b7       	in	r29, 0x3e	; 62
    e49a:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e49e:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e4a2:	00 97       	sbiw	r24, 0x00	; 0
    e4a4:	39 f4       	brne	.+14     	; 0xe4b4 <fatfs_getc+0x36>
    e4a6:	89 e0       	ldi	r24, 0x09	; 9
    e4a8:	90 e0       	ldi	r25, 0x00	; 0
    e4aa:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e4ae:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e4b2:	2f c0       	rjmp	.+94     	; 0xe512 <fatfs_getc+0x94>
    e4b4:	fc 01       	movw	r30, r24
    e4b6:	e4 84       	ldd	r14, Z+12	; 0x0c
    e4b8:	f5 84       	ldd	r15, Z+13	; 0x0d
    e4ba:	e1 14       	cp	r14, r1
    e4bc:	f1 04       	cpc	r15, r1
    e4be:	99 f3       	breq	.-26     	; 0xe4a6 <fatfs_getc+0x28>
    e4c0:	8c 01       	movw	r16, r24
    e4c2:	9e 01       	movw	r18, r28
    e4c4:	2f 5f       	subi	r18, 0xFF	; 255
    e4c6:	3f 4f       	sbci	r19, 0xFF	; 255
    e4c8:	41 e0       	ldi	r20, 0x01	; 1
    e4ca:	50 e0       	ldi	r21, 0x00	; 0
    e4cc:	be 01       	movw	r22, r28
    e4ce:	6d 5f       	subi	r22, 0xFD	; 253
    e4d0:	7f 4f       	sbci	r23, 0xFF	; 255
    e4d2:	c7 01       	movw	r24, r14
    e4d4:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <f_read>
    e4d8:	00 97       	sbiw	r24, 0x00	; 0
    e4da:	31 f4       	brne	.+12     	; 0xe4e8 <fatfs_getc+0x6a>
    e4dc:	29 81       	ldd	r18, Y+1	; 0x01
    e4de:	3a 81       	ldd	r19, Y+2	; 0x02
    e4e0:	21 30       	cpi	r18, 0x01	; 1
    e4e2:	31 05       	cpc	r19, r1
    e4e4:	c9 f0       	breq	.+50     	; 0xe518 <fatfs_getc+0x9a>
    e4e6:	03 c0       	rjmp	.+6      	; 0xe4ee <fatfs_getc+0x70>
    e4e8:	84 31       	cpi	r24, 0x14	; 20
    e4ea:	91 05       	cpc	r25, r1
    e4ec:	40 f4       	brcc	.+16     	; 0xe4fe <fatfs_getc+0x80>
    e4ee:	fc 01       	movw	r30, r24
    e4f0:	ef 55       	subi	r30, 0x5F	; 95
    e4f2:	f4 4f       	sbci	r31, 0xF4	; 244
    e4f4:	80 81       	ld	r24, Z
    e4f6:	08 2e       	mov	r0, r24
    e4f8:	00 0c       	add	r0, r0
    e4fa:	99 0b       	sbc	r25, r25
    e4fc:	02 c0       	rjmp	.+4      	; 0xe502 <fatfs_getc+0x84>
    e4fe:	83 e2       	ldi	r24, 0x23	; 35
    e500:	90 e0       	ldi	r25, 0x00	; 0
    e502:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e506:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e50a:	f8 01       	movw	r30, r16
    e50c:	83 81       	ldd	r24, Z+3	; 0x03
    e50e:	80 62       	ori	r24, 0x20	; 32
    e510:	83 83       	std	Z+3, r24	; 0x03
    e512:	8f ef       	ldi	r24, 0xFF	; 255
    e514:	9f ef       	ldi	r25, 0xFF	; 255
    e516:	28 c0       	rjmp	.+80     	; 0xe568 <fatfs_getc+0xea>
    e518:	8b 81       	ldd	r24, Y+3	; 0x03
    e51a:	8d 30       	cpi	r24, 0x0D	; 13
    e51c:	01 f5       	brne	.+64     	; 0xe55e <fatfs_getc+0xe0>
    e51e:	f7 01       	movw	r30, r14
    e520:	80 88       	ldd	r8, Z+16	; 0x10
    e522:	91 88       	ldd	r9, Z+17	; 0x11
    e524:	a2 88       	ldd	r10, Z+18	; 0x12
    e526:	b3 88       	ldd	r11, Z+19	; 0x13
    e528:	9e 01       	movw	r18, r28
    e52a:	2f 5f       	subi	r18, 0xFF	; 255
    e52c:	3f 4f       	sbci	r19, 0xFF	; 255
    e52e:	41 e0       	ldi	r20, 0x01	; 1
    e530:	50 e0       	ldi	r21, 0x00	; 0
    e532:	be 01       	movw	r22, r28
    e534:	6d 5f       	subi	r22, 0xFD	; 253
    e536:	7f 4f       	sbci	r23, 0xFF	; 255
    e538:	c7 01       	movw	r24, r14
    e53a:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <f_read>
    e53e:	89 2b       	or	r24, r25
    e540:	89 f4       	brne	.+34     	; 0xe564 <fatfs_getc+0xe6>
    e542:	89 81       	ldd	r24, Y+1	; 0x01
    e544:	9a 81       	ldd	r25, Y+2	; 0x02
    e546:	01 97       	sbiw	r24, 0x01	; 1
    e548:	69 f4       	brne	.+26     	; 0xe564 <fatfs_getc+0xe6>
    e54a:	8b 81       	ldd	r24, Y+3	; 0x03
    e54c:	8a 30       	cpi	r24, 0x0A	; 10
    e54e:	31 f0       	breq	.+12     	; 0xe55c <fatfs_getc+0xde>
    e550:	b5 01       	movw	r22, r10
    e552:	a4 01       	movw	r20, r8
    e554:	c7 01       	movw	r24, r14
    e556:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <f_lseek>
    e55a:	04 c0       	rjmp	.+8      	; 0xe564 <fatfs_getc+0xe6>
    e55c:	8b 83       	std	Y+3, r24	; 0x03
    e55e:	8b 81       	ldd	r24, Y+3	; 0x03
    e560:	90 e0       	ldi	r25, 0x00	; 0
    e562:	02 c0       	rjmp	.+4      	; 0xe568 <fatfs_getc+0xea>
    e564:	8a e0       	ldi	r24, 0x0A	; 10
    e566:	90 e0       	ldi	r25, 0x00	; 0
    e568:	0f 90       	pop	r0
    e56a:	0f 90       	pop	r0
    e56c:	0f 90       	pop	r0
    e56e:	df 91       	pop	r29
    e570:	cf 91       	pop	r28
    e572:	1f 91       	pop	r17
    e574:	0f 91       	pop	r16
    e576:	ff 90       	pop	r15
    e578:	ef 90       	pop	r14
    e57a:	bf 90       	pop	r11
    e57c:	af 90       	pop	r10
    e57e:	9f 90       	pop	r9
    e580:	8f 90       	pop	r8
    e582:	08 95       	ret

0000e584 <fatfs_putc>:
    e584:	a3 e0       	ldi	r26, 0x03	; 3
    e586:	b0 e0       	ldi	r27, 0x00	; 0
    e588:	e8 ec       	ldi	r30, 0xC8	; 200
    e58a:	f2 e7       	ldi	r31, 0x72	; 114
    e58c:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    e590:	8b 83       	std	Y+3, r24	; 0x03
    e592:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e596:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e59a:	61 15       	cp	r22, r1
    e59c:	71 05       	cpc	r23, r1
    e59e:	39 f4       	brne	.+14     	; 0xe5ae <fatfs_putc+0x2a>
    e5a0:	89 e0       	ldi	r24, 0x09	; 9
    e5a2:	90 e0       	ldi	r25, 0x00	; 0
    e5a4:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e5a8:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e5ac:	2d c0       	rjmp	.+90     	; 0xe608 <fatfs_putc+0x84>
    e5ae:	fb 01       	movw	r30, r22
    e5b0:	84 85       	ldd	r24, Z+12	; 0x0c
    e5b2:	95 85       	ldd	r25, Z+13	; 0x0d
    e5b4:	00 97       	sbiw	r24, 0x00	; 0
    e5b6:	a1 f3       	breq	.-24     	; 0xe5a0 <fatfs_putc+0x1c>
    e5b8:	8b 01       	movw	r16, r22
    e5ba:	9e 01       	movw	r18, r28
    e5bc:	2f 5f       	subi	r18, 0xFF	; 255
    e5be:	3f 4f       	sbci	r19, 0xFF	; 255
    e5c0:	41 e0       	ldi	r20, 0x01	; 1
    e5c2:	50 e0       	ldi	r21, 0x00	; 0
    e5c4:	be 01       	movw	r22, r28
    e5c6:	6d 5f       	subi	r22, 0xFD	; 253
    e5c8:	7f 4f       	sbci	r23, 0xFF	; 255
    e5ca:	0e 94 2d 5a 	call	0xb45a	; 0xb45a <f_write>
    e5ce:	00 97       	sbiw	r24, 0x00	; 0
    e5d0:	31 f4       	brne	.+12     	; 0xe5de <fatfs_putc+0x5a>
    e5d2:	29 81       	ldd	r18, Y+1	; 0x01
    e5d4:	3a 81       	ldd	r19, Y+2	; 0x02
    e5d6:	21 30       	cpi	r18, 0x01	; 1
    e5d8:	31 05       	cpc	r19, r1
    e5da:	c9 f0       	breq	.+50     	; 0xe60e <fatfs_putc+0x8a>
    e5dc:	03 c0       	rjmp	.+6      	; 0xe5e4 <fatfs_putc+0x60>
    e5de:	84 31       	cpi	r24, 0x14	; 20
    e5e0:	91 05       	cpc	r25, r1
    e5e2:	40 f4       	brcc	.+16     	; 0xe5f4 <fatfs_putc+0x70>
    e5e4:	fc 01       	movw	r30, r24
    e5e6:	ef 55       	subi	r30, 0x5F	; 95
    e5e8:	f4 4f       	sbci	r31, 0xF4	; 244
    e5ea:	80 81       	ld	r24, Z
    e5ec:	08 2e       	mov	r0, r24
    e5ee:	00 0c       	add	r0, r0
    e5f0:	99 0b       	sbc	r25, r25
    e5f2:	02 c0       	rjmp	.+4      	; 0xe5f8 <fatfs_putc+0x74>
    e5f4:	83 e2       	ldi	r24, 0x23	; 35
    e5f6:	90 e0       	ldi	r25, 0x00	; 0
    e5f8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e5fc:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e600:	f8 01       	movw	r30, r16
    e602:	83 81       	ldd	r24, Z+3	; 0x03
    e604:	80 62       	ori	r24, 0x20	; 32
    e606:	83 83       	std	Z+3, r24	; 0x03
    e608:	8f ef       	ldi	r24, 0xFF	; 255
    e60a:	9f ef       	ldi	r25, 0xFF	; 255
    e60c:	02 c0       	rjmp	.+4      	; 0xe612 <fatfs_putc+0x8e>
    e60e:	8b 81       	ldd	r24, Y+3	; 0x03
    e610:	90 e0       	ldi	r25, 0x00	; 0
    e612:	23 96       	adiw	r28, 0x03	; 3
    e614:	e4 e0       	ldi	r30, 0x04	; 4
    e616:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

0000e61a <fgetc>:
    e61a:	cf 93       	push	r28
    e61c:	df 93       	push	r29
    e61e:	00 d0       	rcall	.+0      	; 0xe620 <fgetc+0x6>
    e620:	1f 92       	push	r1
    e622:	ec 01       	movw	r28, r24
    e624:	00 97       	sbiw	r24, 0x00	; 0
    e626:	39 f4       	brne	.+14     	; 0xe636 <fgetc+0x1c>
    e628:	89 e0       	ldi	r24, 0x09	; 9
    e62a:	90 e0       	ldi	r25, 0x00	; 0
    e62c:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e630:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e634:	40 c0       	rjmp	.+128    	; 0xe6b6 <fgetc+0x9c>
    e636:	2b 81       	ldd	r18, Y+3	; 0x03
    e638:	20 ff       	sbrs	r18, 0
    e63a:	3d c0       	rjmp	.+122    	; 0xe6b6 <fgetc+0x9c>
    e63c:	26 ff       	sbrs	r18, 6
    e63e:	0a c0       	rjmp	.+20     	; 0xe654 <fgetc+0x3a>
    e640:	2f 7b       	andi	r18, 0xBF	; 191
    e642:	2b 83       	std	Y+3, r18	; 0x03
    e644:	8e 81       	ldd	r24, Y+6	; 0x06
    e646:	9f 81       	ldd	r25, Y+7	; 0x07
    e648:	01 96       	adiw	r24, 0x01	; 1
    e64a:	9f 83       	std	Y+7, r25	; 0x07
    e64c:	8e 83       	std	Y+6, r24	; 0x06
    e64e:	8a 81       	ldd	r24, Y+2	; 0x02
    e650:	90 e0       	ldi	r25, 0x00	; 0
    e652:	33 c0       	rjmp	.+102    	; 0xe6ba <fgetc+0xa0>
    e654:	22 ff       	sbrs	r18, 2
    e656:	0d c0       	rjmp	.+26     	; 0xe672 <fgetc+0x58>
    e658:	e8 81       	ld	r30, Y
    e65a:	f9 81       	ldd	r31, Y+1	; 0x01
    e65c:	80 81       	ld	r24, Z
    e65e:	90 e0       	ldi	r25, 0x00	; 0
    e660:	00 97       	sbiw	r24, 0x00	; 0
    e662:	19 f4       	brne	.+6      	; 0xe66a <fgetc+0x50>
    e664:	20 62       	ori	r18, 0x20	; 32
    e666:	2b 83       	std	Y+3, r18	; 0x03
    e668:	26 c0       	rjmp	.+76     	; 0xe6b6 <fgetc+0x9c>
    e66a:	31 96       	adiw	r30, 0x01	; 1
    e66c:	f9 83       	std	Y+1, r31	; 0x01
    e66e:	e8 83       	st	Y, r30
    e670:	1b c0       	rjmp	.+54     	; 0xe6a8 <fgetc+0x8e>
    e672:	ea 85       	ldd	r30, Y+10	; 0x0a
    e674:	fb 85       	ldd	r31, Y+11	; 0x0b
    e676:	30 97       	sbiw	r30, 0x00	; 0
    e678:	59 f4       	brne	.+22     	; 0xe690 <fgetc+0x76>
    e67a:	88 ed       	ldi	r24, 0xD8	; 216
    e67c:	9b e0       	ldi	r25, 0x0B	; 11
    e67e:	a0 e0       	ldi	r26, 0x00	; 0
    e680:	ed b7       	in	r30, 0x3d	; 61
    e682:	fe b7       	in	r31, 0x3e	; 62
    e684:	81 83       	std	Z+1, r24	; 0x01
    e686:	92 83       	std	Z+2, r25	; 0x02
    e688:	a3 83       	std	Z+3, r26	; 0x03
    e68a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    e68e:	13 c0       	rjmp	.+38     	; 0xe6b6 <fgetc+0x9c>
    e690:	09 95       	icall
    e692:	97 ff       	sbrs	r25, 7
    e694:	09 c0       	rjmp	.+18     	; 0xe6a8 <fgetc+0x8e>
    e696:	2b 81       	ldd	r18, Y+3	; 0x03
    e698:	02 96       	adiw	r24, 0x02	; 2
    e69a:	11 f0       	breq	.+4      	; 0xe6a0 <fgetc+0x86>
    e69c:	80 e2       	ldi	r24, 0x20	; 32
    e69e:	01 c0       	rjmp	.+2      	; 0xe6a2 <fgetc+0x88>
    e6a0:	80 e1       	ldi	r24, 0x10	; 16
    e6a2:	82 2b       	or	r24, r18
    e6a4:	8b 83       	std	Y+3, r24	; 0x03
    e6a6:	07 c0       	rjmp	.+14     	; 0xe6b6 <fgetc+0x9c>
    e6a8:	2e 81       	ldd	r18, Y+6	; 0x06
    e6aa:	3f 81       	ldd	r19, Y+7	; 0x07
    e6ac:	2f 5f       	subi	r18, 0xFF	; 255
    e6ae:	3f 4f       	sbci	r19, 0xFF	; 255
    e6b0:	3f 83       	std	Y+7, r19	; 0x07
    e6b2:	2e 83       	std	Y+6, r18	; 0x06
    e6b4:	02 c0       	rjmp	.+4      	; 0xe6ba <fgetc+0xa0>
    e6b6:	8f ef       	ldi	r24, 0xFF	; 255
    e6b8:	9f ef       	ldi	r25, 0xFF	; 255
    e6ba:	cd b7       	in	r28, 0x3d	; 61
    e6bc:	de b7       	in	r29, 0x3e	; 62
    e6be:	23 96       	adiw	r28, 0x03	; 3
    e6c0:	e2 e0       	ldi	r30, 0x02	; 2
    e6c2:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000e6c6 <fputc>:
    e6c6:	cf 93       	push	r28
    e6c8:	df 93       	push	r29
    e6ca:	00 d0       	rcall	.+0      	; 0xe6cc <fputc+0x6>
    e6cc:	1f 92       	push	r1
    e6ce:	eb 01       	movw	r28, r22
    e6d0:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e6d4:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e6d8:	20 91 cd 1c 	lds	r18, 0x1CCD	; 0x801ccd <__iob+0x2>
    e6dc:	30 91 ce 1c 	lds	r19, 0x1CCE	; 0x801cce <__iob+0x3>
    e6e0:	62 17       	cp	r22, r18
    e6e2:	73 07       	cpc	r23, r19
    e6e4:	49 f0       	breq	.+18     	; 0xe6f8 <fputc+0x32>
    e6e6:	20 91 cf 1c 	lds	r18, 0x1CCF	; 0x801ccf <__iob+0x4>
    e6ea:	30 91 d0 1c 	lds	r19, 0x1CD0	; 0x801cd0 <__iob+0x5>
    e6ee:	62 17       	cp	r22, r18
    e6f0:	73 07       	cpc	r23, r19
    e6f2:	11 f0       	breq	.+4      	; 0xe6f8 <fputc+0x32>
    e6f4:	47 df       	rcall	.-370    	; 0xe584 <fatfs_putc>
    e6f6:	33 c0       	rjmp	.+102    	; 0xe75e <fputc+0x98>
    e6f8:	2b 81       	ldd	r18, Y+3	; 0x03
    e6fa:	21 ff       	sbrs	r18, 1
    e6fc:	2e c0       	rjmp	.+92     	; 0xe75a <fputc+0x94>
    e6fe:	22 ff       	sbrs	r18, 2
    e700:	10 c0       	rjmp	.+32     	; 0xe722 <fputc+0x5c>
    e702:	4e 81       	ldd	r20, Y+6	; 0x06
    e704:	5f 81       	ldd	r21, Y+7	; 0x07
    e706:	2c 81       	ldd	r18, Y+4	; 0x04
    e708:	3d 81       	ldd	r19, Y+5	; 0x05
    e70a:	42 17       	cp	r20, r18
    e70c:	53 07       	cpc	r21, r19
    e70e:	f4 f4       	brge	.+60     	; 0xe74c <fputc+0x86>
    e710:	e8 81       	ld	r30, Y
    e712:	f9 81       	ldd	r31, Y+1	; 0x01
    e714:	9f 01       	movw	r18, r30
    e716:	2f 5f       	subi	r18, 0xFF	; 255
    e718:	3f 4f       	sbci	r19, 0xFF	; 255
    e71a:	39 83       	std	Y+1, r19	; 0x01
    e71c:	28 83       	st	Y, r18
    e71e:	80 83       	st	Z, r24
    e720:	15 c0       	rjmp	.+42     	; 0xe74c <fputc+0x86>
    e722:	e8 85       	ldd	r30, Y+8	; 0x08
    e724:	f9 85       	ldd	r31, Y+9	; 0x09
    e726:	30 97       	sbiw	r30, 0x00	; 0
    e728:	59 f4       	brne	.+22     	; 0xe740 <fputc+0x7a>
    e72a:	80 ec       	ldi	r24, 0xC0	; 192
    e72c:	9b e0       	ldi	r25, 0x0B	; 11
    e72e:	a0 e0       	ldi	r26, 0x00	; 0
    e730:	ed b7       	in	r30, 0x3d	; 61
    e732:	fe b7       	in	r31, 0x3e	; 62
    e734:	81 83       	std	Z+1, r24	; 0x01
    e736:	92 83       	std	Z+2, r25	; 0x02
    e738:	a3 83       	std	Z+3, r26	; 0x03
    e73a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    e73e:	0d c0       	rjmp	.+26     	; 0xe75a <fputc+0x94>
    e740:	be 01       	movw	r22, r28
    e742:	09 95       	icall
    e744:	8f 3f       	cpi	r24, 0xFF	; 255
    e746:	ff ef       	ldi	r31, 0xFF	; 255
    e748:	9f 07       	cpc	r25, r31
    e74a:	39 f0       	breq	.+14     	; 0xe75a <fputc+0x94>
    e74c:	2e 81       	ldd	r18, Y+6	; 0x06
    e74e:	3f 81       	ldd	r19, Y+7	; 0x07
    e750:	2f 5f       	subi	r18, 0xFF	; 255
    e752:	3f 4f       	sbci	r19, 0xFF	; 255
    e754:	3f 83       	std	Y+7, r19	; 0x07
    e756:	2e 83       	std	Y+6, r18	; 0x06
    e758:	02 c0       	rjmp	.+4      	; 0xe75e <fputc+0x98>
    e75a:	8f ef       	ldi	r24, 0xFF	; 255
    e75c:	9f ef       	ldi	r25, 0xFF	; 255
    e75e:	cd b7       	in	r28, 0x3d	; 61
    e760:	de b7       	in	r29, 0x3e	; 62
    e762:	23 96       	adiw	r28, 0x03	; 3
    e764:	e2 e0       	ldi	r30, 0x02	; 2
    e766:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000e76a <_fprintf_putc>:
    e76a:	fc 01       	movw	r30, r24
    e76c:	86 2f       	mov	r24, r22
    e76e:	26 81       	ldd	r18, Z+6	; 0x06
    e770:	37 81       	ldd	r19, Z+7	; 0x07
    e772:	2f 5f       	subi	r18, 0xFF	; 255
    e774:	3f 4f       	sbci	r19, 0xFF	; 255
    e776:	37 83       	std	Z+7, r19	; 0x07
    e778:	26 83       	std	Z+6, r18	; 0x06
    e77a:	62 81       	ldd	r22, Z+2	; 0x02
    e77c:	73 81       	ldd	r23, Z+3	; 0x03
    e77e:	90 e0       	ldi	r25, 0x00	; 0
    e780:	a2 cf       	rjmp	.-188    	; 0xe6c6 <fputc>
    e782:	08 95       	ret

0000e784 <getchar>:
    e784:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    e788:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    e78c:	46 cf       	rjmp	.-372    	; 0xe61a <fgetc>
    e78e:	08 95       	ret

0000e790 <putchar>:
    e790:	60 91 cd 1c 	lds	r22, 0x1CCD	; 0x801ccd <__iob+0x2>
    e794:	70 91 ce 1c 	lds	r23, 0x1CCE	; 0x801cce <__iob+0x3>
    e798:	96 cf       	rjmp	.-212    	; 0xe6c6 <fputc>
    e79a:	08 95       	ret

0000e79c <fgets>:
    e79c:	a0 e0       	ldi	r26, 0x00	; 0
    e79e:	b0 e0       	ldi	r27, 0x00	; 0
    e7a0:	e4 ed       	ldi	r30, 0xD4	; 212
    e7a2:	f3 e7       	ldi	r31, 0x73	; 115
    e7a4:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    e7a8:	7c 01       	movw	r14, r24
    e7aa:	6a 01       	movw	r12, r20
    e7ac:	8b 01       	movw	r16, r22
    e7ae:	c0 e0       	ldi	r28, 0x00	; 0
    e7b0:	d0 e0       	ldi	r29, 0x00	; 0
    e7b2:	01 15       	cp	r16, r1
    e7b4:	11 05       	cpc	r17, r1
    e7b6:	41 f0       	breq	.+16     	; 0xe7c8 <fgets+0x2c>
    e7b8:	c6 01       	movw	r24, r12
    e7ba:	2f df       	rcall	.-418    	; 0xe61a <fgetc>
    e7bc:	8f 3f       	cpi	r24, 0xFF	; 255
    e7be:	2f ef       	ldi	r18, 0xFF	; 255
    e7c0:	92 07       	cpc	r25, r18
    e7c2:	39 f4       	brne	.+14     	; 0xe7d2 <fgets+0x36>
    e7c4:	20 97       	sbiw	r28, 0x00	; 0
    e7c6:	b9 f0       	breq	.+46     	; 0xe7f6 <fgets+0x5a>
    e7c8:	ce 0d       	add	r28, r14
    e7ca:	df 1d       	adc	r29, r15
    e7cc:	18 82       	st	Y, r1
    e7ce:	c7 01       	movw	r24, r14
    e7d0:	14 c0       	rjmp	.+40     	; 0xe7fa <fgets+0x5e>
    e7d2:	8a 30       	cpi	r24, 0x0A	; 10
    e7d4:	91 05       	cpc	r25, r1
    e7d6:	c1 f3       	breq	.-16     	; 0xe7c8 <fgets+0x2c>
    e7d8:	88 30       	cpi	r24, 0x08	; 8
    e7da:	91 05       	cpc	r25, r1
    e7dc:	21 f4       	brne	.+8      	; 0xe7e6 <fgets+0x4a>
    e7de:	20 97       	sbiw	r28, 0x00	; 0
    e7e0:	39 f0       	breq	.+14     	; 0xe7f0 <fgets+0x54>
    e7e2:	21 97       	sbiw	r28, 0x01	; 1
    e7e4:	05 c0       	rjmp	.+10     	; 0xe7f0 <fgets+0x54>
    e7e6:	f7 01       	movw	r30, r14
    e7e8:	ec 0f       	add	r30, r28
    e7ea:	fd 1f       	adc	r31, r29
    e7ec:	80 83       	st	Z, r24
    e7ee:	21 96       	adiw	r28, 0x01	; 1
    e7f0:	01 50       	subi	r16, 0x01	; 1
    e7f2:	11 09       	sbc	r17, r1
    e7f4:	de cf       	rjmp	.-68     	; 0xe7b2 <fgets+0x16>
    e7f6:	80 e0       	ldi	r24, 0x00	; 0
    e7f8:	90 e0       	ldi	r25, 0x00	; 0
    e7fa:	cd b7       	in	r28, 0x3d	; 61
    e7fc:	de b7       	in	r29, 0x3e	; 62
    e7fe:	e8 e0       	ldi	r30, 0x08	; 8
    e800:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000e804 <fputs>:
    e804:	0f 93       	push	r16
    e806:	1f 93       	push	r17
    e808:	cf 93       	push	r28
    e80a:	df 93       	push	r29
    e80c:	8b 01       	movw	r16, r22
    e80e:	ec 01       	movw	r28, r24
    e810:	89 91       	ld	r24, Y+
    e812:	88 23       	and	r24, r24
    e814:	41 f0       	breq	.+16     	; 0xe826 <fputs+0x22>
    e816:	b8 01       	movw	r22, r16
    e818:	90 e0       	ldi	r25, 0x00	; 0
    e81a:	55 df       	rcall	.-342    	; 0xe6c6 <fputc>
    e81c:	8f 3f       	cpi	r24, 0xFF	; 255
    e81e:	2f ef       	ldi	r18, 0xFF	; 255
    e820:	92 07       	cpc	r25, r18
    e822:	b1 f7       	brne	.-20     	; 0xe810 <fputs+0xc>
    e824:	02 c0       	rjmp	.+4      	; 0xe82a <fputs+0x26>
    e826:	80 e0       	ldi	r24, 0x00	; 0
    e828:	90 e0       	ldi	r25, 0x00	; 0
    e82a:	df 91       	pop	r29
    e82c:	cf 91       	pop	r28
    e82e:	1f 91       	pop	r17
    e830:	0f 91       	pop	r16
    e832:	08 95       	ret

0000e834 <puts>:
    e834:	cf 93       	push	r28
    e836:	df 93       	push	r29
    e838:	ec 01       	movw	r28, r24
    e83a:	89 91       	ld	r24, Y+
    e83c:	60 91 cd 1c 	lds	r22, 0x1CCD	; 0x801ccd <__iob+0x2>
    e840:	70 91 ce 1c 	lds	r23, 0x1CCE	; 0x801cce <__iob+0x3>
    e844:	88 23       	and	r24, r24
    e846:	39 f0       	breq	.+14     	; 0xe856 <puts+0x22>
    e848:	90 e0       	ldi	r25, 0x00	; 0
    e84a:	3d df       	rcall	.-390    	; 0xe6c6 <fputc>
    e84c:	8f 3f       	cpi	r24, 0xFF	; 255
    e84e:	2f ef       	ldi	r18, 0xFF	; 255
    e850:	92 07       	cpc	r25, r18
    e852:	99 f7       	brne	.-26     	; 0xe83a <puts+0x6>
    e854:	03 c0       	rjmp	.+6      	; 0xe85c <puts+0x28>
    e856:	8a e0       	ldi	r24, 0x0A	; 10
    e858:	90 e0       	ldi	r25, 0x00	; 0
    e85a:	35 df       	rcall	.-406    	; 0xe6c6 <fputc>
    e85c:	df 91       	pop	r29
    e85e:	cf 91       	pop	r28
    e860:	08 95       	ret

0000e862 <fileno>:
    e862:	00 97       	sbiw	r24, 0x00	; 0
    e864:	39 f4       	brne	.+14     	; 0xe874 <fileno+0x12>
    e866:	89 e0       	ldi	r24, 0x09	; 9
    e868:	90 e0       	ldi	r25, 0x00	; 0
    e86a:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e86e:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e872:	0e c0       	rjmp	.+28     	; 0xe890 <fileno+0x2e>
    e874:	eb ec       	ldi	r30, 0xCB	; 203
    e876:	fc e1       	ldi	r31, 0x1C	; 28
    e878:	20 e0       	ldi	r18, 0x00	; 0
    e87a:	30 e0       	ldi	r19, 0x00	; 0
    e87c:	41 91       	ld	r20, Z+
    e87e:	51 91       	ld	r21, Z+
    e880:	84 17       	cp	r24, r20
    e882:	95 07       	cpc	r25, r21
    e884:	41 f0       	breq	.+16     	; 0xe896 <fileno+0x34>
    e886:	2f 5f       	subi	r18, 0xFF	; 255
    e888:	3f 4f       	sbci	r19, 0xFF	; 255
    e88a:	20 31       	cpi	r18, 0x10	; 16
    e88c:	31 05       	cpc	r19, r1
    e88e:	b1 f7       	brne	.-20     	; 0xe87c <fileno+0x1a>
    e890:	8f ef       	ldi	r24, 0xFF	; 255
    e892:	9f ef       	ldi	r25, 0xFF	; 255
    e894:	08 95       	ret
    e896:	c9 01       	movw	r24, r18
    e898:	08 95       	ret

0000e89a <fileno_to_stream>:
    e89a:	80 31       	cpi	r24, 0x10	; 16
    e89c:	91 05       	cpc	r25, r1
    e89e:	48 f4       	brcc	.+18     	; 0xe8b2 <fileno_to_stream+0x18>
    e8a0:	88 0f       	add	r24, r24
    e8a2:	99 1f       	adc	r25, r25
    e8a4:	fc 01       	movw	r30, r24
    e8a6:	e5 53       	subi	r30, 0x35	; 53
    e8a8:	f3 4e       	sbci	r31, 0xE3	; 227
    e8aa:	80 81       	ld	r24, Z
    e8ac:	91 81       	ldd	r25, Z+1	; 0x01
    e8ae:	00 97       	sbiw	r24, 0x00	; 0
    e8b0:	41 f4       	brne	.+16     	; 0xe8c2 <fileno_to_stream+0x28>
    e8b2:	89 e0       	ldi	r24, 0x09	; 9
    e8b4:	90 e0       	ldi	r25, 0x00	; 0
    e8b6:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e8ba:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e8be:	80 e0       	ldi	r24, 0x00	; 0
    e8c0:	90 e0       	ldi	r25, 0x00	; 0
    e8c2:	08 95       	ret

0000e8c4 <mctime>:
    e8c4:	a4 e0       	ldi	r26, 0x04	; 4
    e8c6:	b0 e0       	ldi	r27, 0x00	; 0
    e8c8:	e8 e6       	ldi	r30, 0x68	; 104
    e8ca:	f4 e7       	ldi	r31, 0x74	; 116
    e8cc:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    e8d0:	69 83       	std	Y+1, r22	; 0x01
    e8d2:	7a 83       	std	Y+2, r23	; 0x02
    e8d4:	8b 83       	std	Y+3, r24	; 0x03
    e8d6:	9c 83       	std	Y+4, r25	; 0x04
    e8d8:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e8dc:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e8e0:	ce 01       	movw	r24, r28
    e8e2:	01 96       	adiw	r24, 0x01	; 1
    e8e4:	0e 94 4b 3a 	call	0x7496	; 0x7496 <ctime_gm>
    e8e8:	fc 01       	movw	r30, r24
    e8ea:	01 90       	ld	r0, Z+
    e8ec:	00 20       	and	r0, r0
    e8ee:	e9 f7       	brne	.-6      	; 0xe8ea <mctime+0x26>
    e8f0:	31 97       	sbiw	r30, 0x01	; 1
    e8f2:	e8 1b       	sub	r30, r24
    e8f4:	f9 0b       	sbc	r31, r25
    e8f6:	39 f0       	breq	.+14     	; 0xe906 <mctime+0x42>
    e8f8:	31 97       	sbiw	r30, 0x01	; 1
    e8fa:	e8 0f       	add	r30, r24
    e8fc:	f9 1f       	adc	r31, r25
    e8fe:	20 81       	ld	r18, Z
    e900:	2a 30       	cpi	r18, 0x0A	; 10
    e902:	09 f4       	brne	.+2      	; 0xe906 <mctime+0x42>
    e904:	10 82       	st	Z, r1
    e906:	24 96       	adiw	r28, 0x04	; 4
    e908:	e2 e0       	ldi	r30, 0x02	; 2
    e90a:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000e90e <basename>:
    e90e:	00 97       	sbiw	r24, 0x00	; 0
    e910:	49 f0       	breq	.+18     	; 0xe924 <basename+0x16>
    e912:	fc 01       	movw	r30, r24
    e914:	21 91       	ld	r18, Z+
    e916:	22 23       	and	r18, r18
    e918:	21 f0       	breq	.+8      	; 0xe922 <basename+0x14>
    e91a:	2f 32       	cpi	r18, 0x2F	; 47
    e91c:	d9 f7       	brne	.-10     	; 0xe914 <basename+0x6>
    e91e:	cf 01       	movw	r24, r30
    e920:	f9 cf       	rjmp	.-14     	; 0xe914 <basename+0x6>
    e922:	08 95       	ret
    e924:	85 e2       	ldi	r24, 0x25	; 37
    e926:	9c e0       	ldi	r25, 0x0C	; 12
    e928:	08 95       	ret

0000e92a <chdir>:
    e92a:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e92e:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e932:	0e 94 5d 5c 	call	0xb8ba	; 0xb8ba <f_chdir>
    e936:	00 97       	sbiw	r24, 0x00	; 0
    e938:	a1 f0       	breq	.+40     	; 0xe962 <chdir+0x38>
    e93a:	84 31       	cpi	r24, 0x14	; 20
    e93c:	91 05       	cpc	r25, r1
    e93e:	40 f4       	brcc	.+16     	; 0xe950 <chdir+0x26>
    e940:	fc 01       	movw	r30, r24
    e942:	ef 55       	subi	r30, 0x5F	; 95
    e944:	f4 4f       	sbci	r31, 0xF4	; 244
    e946:	80 81       	ld	r24, Z
    e948:	08 2e       	mov	r0, r24
    e94a:	00 0c       	add	r0, r0
    e94c:	99 0b       	sbc	r25, r25
    e94e:	02 c0       	rjmp	.+4      	; 0xe954 <chdir+0x2a>
    e950:	83 e2       	ldi	r24, 0x23	; 35
    e952:	90 e0       	ldi	r25, 0x00	; 0
    e954:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e958:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e95c:	8f ef       	ldi	r24, 0xFF	; 255
    e95e:	9f ef       	ldi	r25, 0xFF	; 255
    e960:	08 95       	ret
    e962:	80 e0       	ldi	r24, 0x00	; 0
    e964:	90 e0       	ldi	r25, 0x00	; 0
    e966:	08 95       	ret

0000e968 <chmod>:
    e968:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e96c:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e970:	42 79       	andi	r20, 0x92	; 146
    e972:	55 27       	eor	r21, r21
    e974:	66 27       	eor	r22, r22
    e976:	77 27       	eor	r23, r23
    e978:	45 2b       	or	r20, r21
    e97a:	46 2b       	or	r20, r22
    e97c:	47 2b       	or	r20, r23
    e97e:	19 f0       	breq	.+6      	; 0xe986 <chmod+0x1e>
    e980:	80 e0       	ldi	r24, 0x00	; 0
    e982:	90 e0       	ldi	r25, 0x00	; 0
    e984:	08 95       	ret
    e986:	41 e0       	ldi	r20, 0x01	; 1
    e988:	61 e0       	ldi	r22, 0x01	; 1
    e98a:	0e 94 3e 65 	call	0xca7c	; 0xca7c <f_chmod>
    e98e:	00 97       	sbiw	r24, 0x00	; 0
    e990:	b9 f3       	breq	.-18     	; 0xe980 <chmod+0x18>
    e992:	84 31       	cpi	r24, 0x14	; 20
    e994:	91 05       	cpc	r25, r1
    e996:	40 f4       	brcc	.+16     	; 0xe9a8 <chmod+0x40>
    e998:	fc 01       	movw	r30, r24
    e99a:	ef 55       	subi	r30, 0x5F	; 95
    e99c:	f4 4f       	sbci	r31, 0xF4	; 244
    e99e:	80 81       	ld	r24, Z
    e9a0:	08 2e       	mov	r0, r24
    e9a2:	00 0c       	add	r0, r0
    e9a4:	99 0b       	sbc	r25, r25
    e9a6:	02 c0       	rjmp	.+4      	; 0xe9ac <chmod+0x44>
    e9a8:	83 e2       	ldi	r24, 0x23	; 35
    e9aa:	90 e0       	ldi	r25, 0x00	; 0
    e9ac:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e9b0:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e9b4:	8f ef       	ldi	r24, 0xFF	; 255
    e9b6:	9f ef       	ldi	r25, 0xFF	; 255
    e9b8:	08 95       	ret

0000e9ba <getcwd>:
    e9ba:	cf 93       	push	r28
    e9bc:	df 93       	push	r29
    e9be:	d8 2f       	mov	r29, r24
    e9c0:	c9 2f       	mov	r28, r25
    e9c2:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e9c6:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e9ca:	0e 94 b8 5c 	call	0xb970	; 0xb970 <f_getcwd>
    e9ce:	00 97       	sbiw	r24, 0x00	; 0
    e9d0:	a1 f0       	breq	.+40     	; 0xe9fa <getcwd+0x40>
    e9d2:	84 31       	cpi	r24, 0x14	; 20
    e9d4:	91 05       	cpc	r25, r1
    e9d6:	40 f4       	brcc	.+16     	; 0xe9e8 <getcwd+0x2e>
    e9d8:	fc 01       	movw	r30, r24
    e9da:	ef 55       	subi	r30, 0x5F	; 95
    e9dc:	f4 4f       	sbci	r31, 0xF4	; 244
    e9de:	80 81       	ld	r24, Z
    e9e0:	08 2e       	mov	r0, r24
    e9e2:	00 0c       	add	r0, r0
    e9e4:	99 0b       	sbc	r25, r25
    e9e6:	02 c0       	rjmp	.+4      	; 0xe9ec <getcwd+0x32>
    e9e8:	83 e2       	ldi	r24, 0x23	; 35
    e9ea:	90 e0       	ldi	r25, 0x00	; 0
    e9ec:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e9f0:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e9f4:	80 e0       	ldi	r24, 0x00	; 0
    e9f6:	90 e0       	ldi	r25, 0x00	; 0
    e9f8:	02 c0       	rjmp	.+4      	; 0xe9fe <getcwd+0x44>
    e9fa:	8d 2f       	mov	r24, r29
    e9fc:	9c 2f       	mov	r25, r28
    e9fe:	df 91       	pop	r29
    ea00:	cf 91       	pop	r28
    ea02:	08 95       	ret

0000ea04 <mkdir>:
    ea04:	cf 93       	push	r28
    ea06:	df 93       	push	r29
    ea08:	ec 01       	movw	r28, r24
    ea0a:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ea0e:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ea12:	41 15       	cp	r20, r1
    ea14:	51 05       	cpc	r21, r1
    ea16:	61 05       	cpc	r22, r1
    ea18:	71 05       	cpc	r23, r1
    ea1a:	41 f4       	brne	.+16     	; 0xea2c <mkdir+0x28>
    ea1c:	ce 01       	movw	r24, r28
    ea1e:	0e 94 39 63 	call	0xc672	; 0xc672 <f_mkdir>
    ea22:	00 97       	sbiw	r24, 0x00	; 0
    ea24:	39 f4       	brne	.+14     	; 0xea34 <mkdir+0x30>
    ea26:	80 e0       	ldi	r24, 0x00	; 0
    ea28:	90 e0       	ldi	r25, 0x00	; 0
    ea2a:	17 c0       	rjmp	.+46     	; 0xea5a <mkdir+0x56>
    ea2c:	9d df       	rcall	.-198    	; 0xe968 <chmod>
    ea2e:	89 2b       	or	r24, r25
    ea30:	a9 f3       	breq	.-22     	; 0xea1c <mkdir+0x18>
    ea32:	11 c0       	rjmp	.+34     	; 0xea56 <mkdir+0x52>
    ea34:	84 31       	cpi	r24, 0x14	; 20
    ea36:	91 05       	cpc	r25, r1
    ea38:	40 f4       	brcc	.+16     	; 0xea4a <mkdir+0x46>
    ea3a:	fc 01       	movw	r30, r24
    ea3c:	ef 55       	subi	r30, 0x5F	; 95
    ea3e:	f4 4f       	sbci	r31, 0xF4	; 244
    ea40:	80 81       	ld	r24, Z
    ea42:	08 2e       	mov	r0, r24
    ea44:	00 0c       	add	r0, r0
    ea46:	99 0b       	sbc	r25, r25
    ea48:	02 c0       	rjmp	.+4      	; 0xea4e <mkdir+0x4a>
    ea4a:	83 e2       	ldi	r24, 0x23	; 35
    ea4c:	90 e0       	ldi	r25, 0x00	; 0
    ea4e:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ea52:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ea56:	8f ef       	ldi	r24, 0xFF	; 255
    ea58:	9f ef       	ldi	r25, 0xFF	; 255
    ea5a:	df 91       	pop	r29
    ea5c:	cf 91       	pop	r28
    ea5e:	08 95       	ret

0000ea60 <rename>:
    ea60:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ea64:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ea68:	0e 94 29 64 	call	0xc852	; 0xc852 <f_rename>
    ea6c:	00 97       	sbiw	r24, 0x00	; 0
    ea6e:	a1 f0       	breq	.+40     	; 0xea98 <rename+0x38>
    ea70:	84 31       	cpi	r24, 0x14	; 20
    ea72:	91 05       	cpc	r25, r1
    ea74:	40 f4       	brcc	.+16     	; 0xea86 <rename+0x26>
    ea76:	fc 01       	movw	r30, r24
    ea78:	ef 55       	subi	r30, 0x5F	; 95
    ea7a:	f4 4f       	sbci	r31, 0xF4	; 244
    ea7c:	80 81       	ld	r24, Z
    ea7e:	08 2e       	mov	r0, r24
    ea80:	00 0c       	add	r0, r0
    ea82:	99 0b       	sbc	r25, r25
    ea84:	02 c0       	rjmp	.+4      	; 0xea8a <rename+0x2a>
    ea86:	83 e2       	ldi	r24, 0x23	; 35
    ea88:	90 e0       	ldi	r25, 0x00	; 0
    ea8a:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ea8e:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ea92:	8f ef       	ldi	r24, 0xFF	; 255
    ea94:	9f ef       	ldi	r25, 0xFF	; 255
    ea96:	08 95       	ret
    ea98:	80 e0       	ldi	r24, 0x00	; 0
    ea9a:	90 e0       	ldi	r25, 0x00	; 0
    ea9c:	08 95       	ret

0000ea9e <unlink>:
    ea9e:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    eaa2:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    eaa6:	0e 94 92 62 	call	0xc524	; 0xc524 <f_unlink>
    eaaa:	00 97       	sbiw	r24, 0x00	; 0
    eaac:	a1 f0       	breq	.+40     	; 0xead6 <unlink+0x38>
    eaae:	84 31       	cpi	r24, 0x14	; 20
    eab0:	91 05       	cpc	r25, r1
    eab2:	40 f4       	brcc	.+16     	; 0xeac4 <unlink+0x26>
    eab4:	fc 01       	movw	r30, r24
    eab6:	ef 55       	subi	r30, 0x5F	; 95
    eab8:	f4 4f       	sbci	r31, 0xF4	; 244
    eaba:	80 81       	ld	r24, Z
    eabc:	08 2e       	mov	r0, r24
    eabe:	00 0c       	add	r0, r0
    eac0:	99 0b       	sbc	r25, r25
    eac2:	02 c0       	rjmp	.+4      	; 0xeac8 <unlink+0x2a>
    eac4:	83 e2       	ldi	r24, 0x23	; 35
    eac6:	90 e0       	ldi	r25, 0x00	; 0
    eac8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    eacc:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ead0:	8f ef       	ldi	r24, 0xFF	; 255
    ead2:	9f ef       	ldi	r25, 0xFF	; 255
    ead4:	08 95       	ret
    ead6:	80 e0       	ldi	r24, 0x00	; 0
    ead8:	90 e0       	ldi	r25, 0x00	; 0
    eada:	08 95       	ret

0000eadc <rmdir>:
    eadc:	e0 cf       	rjmp	.-64     	; 0xea9e <unlink>
    eade:	08 95       	ret

0000eae0 <closedir>:
    eae0:	0e 94 1b 61 	call	0xc236	; 0xc236 <f_closedir>
    eae4:	00 97       	sbiw	r24, 0x00	; 0
    eae6:	a1 f0       	breq	.+40     	; 0xeb10 <closedir+0x30>
    eae8:	84 31       	cpi	r24, 0x14	; 20
    eaea:	91 05       	cpc	r25, r1
    eaec:	40 f4       	brcc	.+16     	; 0xeafe <closedir+0x1e>
    eaee:	fc 01       	movw	r30, r24
    eaf0:	ef 55       	subi	r30, 0x5F	; 95
    eaf2:	f4 4f       	sbci	r31, 0xF4	; 244
    eaf4:	80 81       	ld	r24, Z
    eaf6:	08 2e       	mov	r0, r24
    eaf8:	00 0c       	add	r0, r0
    eafa:	99 0b       	sbc	r25, r25
    eafc:	02 c0       	rjmp	.+4      	; 0xeb02 <closedir+0x22>
    eafe:	83 e2       	ldi	r24, 0x23	; 35
    eb00:	90 e0       	ldi	r25, 0x00	; 0
    eb02:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    eb06:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    eb0a:	8f ef       	ldi	r24, 0xFF	; 255
    eb0c:	9f ef       	ldi	r25, 0xFF	; 255
    eb0e:	08 95       	ret
    eb10:	80 e0       	ldi	r24, 0x00	; 0
    eb12:	90 e0       	ldi	r25, 0x00	; 0
    eb14:	08 95       	ret

0000eb16 <opendir>:
    eb16:	bc 01       	movw	r22, r24
    eb18:	8d e3       	ldi	r24, 0x3D	; 61
    eb1a:	99 e1       	ldi	r25, 0x19	; 25
    eb1c:	0e 94 aa 60 	call	0xc154	; 0xc154 <f_opendir>
    eb20:	00 97       	sbiw	r24, 0x00	; 0
    eb22:	a1 f0       	breq	.+40     	; 0xeb4c <opendir+0x36>
    eb24:	84 31       	cpi	r24, 0x14	; 20
    eb26:	91 05       	cpc	r25, r1
    eb28:	40 f4       	brcc	.+16     	; 0xeb3a <opendir+0x24>
    eb2a:	fc 01       	movw	r30, r24
    eb2c:	ef 55       	subi	r30, 0x5F	; 95
    eb2e:	f4 4f       	sbci	r31, 0xF4	; 244
    eb30:	80 81       	ld	r24, Z
    eb32:	08 2e       	mov	r0, r24
    eb34:	00 0c       	add	r0, r0
    eb36:	99 0b       	sbc	r25, r25
    eb38:	02 c0       	rjmp	.+4      	; 0xeb3e <opendir+0x28>
    eb3a:	83 e2       	ldi	r24, 0x23	; 35
    eb3c:	90 e0       	ldi	r25, 0x00	; 0
    eb3e:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    eb42:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    eb46:	80 e0       	ldi	r24, 0x00	; 0
    eb48:	90 e0       	ldi	r25, 0x00	; 0
    eb4a:	08 95       	ret
    eb4c:	8d e3       	ldi	r24, 0x3D	; 61
    eb4e:	99 e1       	ldi	r25, 0x19	; 25
    eb50:	08 95       	ret

0000eb52 <readdir>:
    eb52:	a6 e1       	ldi	r26, 0x16	; 22
    eb54:	b1 e0       	ldi	r27, 0x01	; 1
    eb56:	ef ea       	ldi	r30, 0xAF	; 175
    eb58:	f5 e7       	ldi	r31, 0x75	; 117
    eb5a:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    eb5e:	10 92 3e 18 	sts	0x183E, r1	; 0x80183e <_de>
    eb62:	be 01       	movw	r22, r28
    eb64:	6f 5f       	subi	r22, 0xFF	; 255
    eb66:	7f 4f       	sbci	r23, 0xFF	; 255
    eb68:	0e 94 30 61 	call	0xc260	; 0xc260 <f_readdir>
    eb6c:	00 97       	sbiw	r24, 0x00	; 0
    eb6e:	a1 f0       	breq	.+40     	; 0xeb98 <readdir+0x46>
    eb70:	84 31       	cpi	r24, 0x14	; 20
    eb72:	91 05       	cpc	r25, r1
    eb74:	40 f4       	brcc	.+16     	; 0xeb86 <readdir+0x34>
    eb76:	fc 01       	movw	r30, r24
    eb78:	ef 55       	subi	r30, 0x5F	; 95
    eb7a:	f4 4f       	sbci	r31, 0xF4	; 244
    eb7c:	80 81       	ld	r24, Z
    eb7e:	08 2e       	mov	r0, r24
    eb80:	00 0c       	add	r0, r0
    eb82:	99 0b       	sbc	r25, r25
    eb84:	02 c0       	rjmp	.+4      	; 0xeb8a <readdir+0x38>
    eb86:	83 e2       	ldi	r24, 0x23	; 35
    eb88:	90 e0       	ldi	r25, 0x00	; 0
    eb8a:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    eb8e:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    eb92:	80 e0       	ldi	r24, 0x00	; 0
    eb94:	90 e0       	ldi	r25, 0x00	; 0
    eb96:	16 c0       	rjmp	.+44     	; 0xebc4 <readdir+0x72>
    eb98:	be 01       	movw	r22, r28
    eb9a:	69 5e       	subi	r22, 0xE9	; 233
    eb9c:	7f 4f       	sbci	r23, 0xFF	; 255
    eb9e:	fb 01       	movw	r30, r22
    eba0:	01 90       	ld	r0, Z+
    eba2:	00 20       	and	r0, r0
    eba4:	e9 f7       	brne	.-6      	; 0xeba0 <readdir+0x4e>
    eba6:	31 97       	sbiw	r30, 0x01	; 1
    eba8:	8f 01       	movw	r16, r30
    ebaa:	06 1b       	sub	r16, r22
    ebac:	17 0b       	sbc	r17, r23
    ebae:	a8 01       	movw	r20, r16
    ebb0:	8e e3       	ldi	r24, 0x3E	; 62
    ebb2:	98 e1       	ldi	r25, 0x18	; 24
    ebb4:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <strncpy>
    ebb8:	f8 01       	movw	r30, r16
    ebba:	e2 5c       	subi	r30, 0xC2	; 194
    ebbc:	f7 4e       	sbci	r31, 0xE7	; 231
    ebbe:	10 82       	st	Z, r1
    ebc0:	8e e3       	ldi	r24, 0x3E	; 62
    ebc2:	98 e1       	ldi	r25, 0x18	; 24
    ebc4:	ca 5e       	subi	r28, 0xEA	; 234
    ebc6:	de 4f       	sbci	r29, 0xFE	; 254
    ebc8:	e4 e0       	ldi	r30, 0x04	; 4
    ebca:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

0000ebce <perror>:
    ebce:	ad b7       	in	r26, 0x3d	; 61
    ebd0:	be b7       	in	r27, 0x3e	; 62
    ebd2:	17 97       	sbiw	r26, 0x07	; 7
    ebd4:	0f b6       	in	r0, 0x3f	; 63
    ebd6:	f8 94       	cli
    ebd8:	be bf       	out	0x3e, r27	; 62
    ebda:	0f be       	out	0x3f, r0	; 63
    ebdc:	ad bf       	out	0x3d, r26	; 61
    ebde:	20 91 c9 1c 	lds	r18, 0x1CC9	; 0x801cc9 <errno>
    ebe2:	30 91 ca 1c 	lds	r19, 0x1CCA	; 0x801cca <errno+0x1>
    ebe6:	23 32       	cpi	r18, 0x23	; 35
    ebe8:	31 05       	cpc	r19, r1
    ebea:	40 f4       	brcc	.+16     	; 0xebfc <perror+0x2e>
    ebec:	22 0f       	add	r18, r18
    ebee:	33 1f       	adc	r19, r19
    ebf0:	f9 01       	movw	r30, r18
    ebf2:	ea 5c       	subi	r30, 0xCA	; 202
    ebf4:	fe 4f       	sbci	r31, 0xFE	; 254
    ebf6:	20 81       	ld	r18, Z
    ebf8:	31 81       	ldd	r19, Z+1	; 0x01
    ebfa:	04 c0       	rjmp	.+8      	; 0xec04 <perror+0x36>
    ebfc:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    ec00:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    ec04:	00 97       	sbiw	r24, 0x00	; 0
    ec06:	99 f0       	breq	.+38     	; 0xec2e <perror+0x60>
    ec08:	fc 01       	movw	r30, r24
    ec0a:	40 81       	ld	r20, Z
    ec0c:	44 23       	and	r20, r20
    ec0e:	79 f0       	breq	.+30     	; 0xec2e <perror+0x60>
    ec10:	ed b7       	in	r30, 0x3d	; 61
    ec12:	fe b7       	in	r31, 0x3e	; 62
    ec14:	37 83       	std	Z+7, r19	; 0x07
    ec16:	26 83       	std	Z+6, r18	; 0x06
    ec18:	95 83       	std	Z+5, r25	; 0x05
    ec1a:	84 83       	std	Z+4, r24	; 0x04
    ec1c:	8c ea       	ldi	r24, 0xAC	; 172
    ec1e:	9b e0       	ldi	r25, 0x0B	; 11
    ec20:	a0 e0       	ldi	r26, 0x00	; 0
    ec22:	81 83       	std	Z+1, r24	; 0x01
    ec24:	92 83       	std	Z+2, r25	; 0x02
    ec26:	a3 83       	std	Z+3, r26	; 0x03
    ec28:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    ec2c:	0c c0       	rjmp	.+24     	; 0xec46 <perror+0x78>
    ec2e:	ed b7       	in	r30, 0x3d	; 61
    ec30:	fe b7       	in	r31, 0x3e	; 62
    ec32:	35 83       	std	Z+5, r19	; 0x05
    ec34:	24 83       	std	Z+4, r18	; 0x04
    ec36:	88 ea       	ldi	r24, 0xA8	; 168
    ec38:	9b e0       	ldi	r25, 0x0B	; 11
    ec3a:	a0 e0       	ldi	r26, 0x00	; 0
    ec3c:	81 83       	std	Z+1, r24	; 0x01
    ec3e:	92 83       	std	Z+2, r25	; 0x02
    ec40:	a3 83       	std	Z+3, r26	; 0x03
    ec42:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    ec46:	ad b7       	in	r26, 0x3d	; 61
    ec48:	be b7       	in	r27, 0x3e	; 62
    ec4a:	17 96       	adiw	r26, 0x07	; 7
    ec4c:	0f b6       	in	r0, 0x3f	; 63
    ec4e:	f8 94       	cli
    ec50:	be bf       	out	0x3e, r27	; 62
    ec52:	0f be       	out	0x3f, r0	; 63
    ec54:	ad bf       	out	0x3d, r26	; 61
    ec56:	08 95       	ret

0000ec58 <fdevopen>:
    ec58:	0f 93       	push	r16
    ec5a:	1f 93       	push	r17
    ec5c:	cf 93       	push	r28
    ec5e:	df 93       	push	r29
    ec60:	00 97       	sbiw	r24, 0x00	; 0
    ec62:	31 f4       	brne	.+12     	; 0xec70 <fdevopen+0x18>
    ec64:	61 15       	cp	r22, r1
    ec66:	71 05       	cpc	r23, r1
    ec68:	19 f4       	brne	.+6      	; 0xec70 <fdevopen+0x18>
    ec6a:	80 e0       	ldi	r24, 0x00	; 0
    ec6c:	90 e0       	ldi	r25, 0x00	; 0
    ec6e:	3a c0       	rjmp	.+116    	; 0xece4 <fdevopen+0x8c>
    ec70:	8b 01       	movw	r16, r22
    ec72:	ec 01       	movw	r28, r24
    ec74:	6e e0       	ldi	r22, 0x0E	; 14
    ec76:	70 e0       	ldi	r23, 0x00	; 0
    ec78:	81 e0       	ldi	r24, 0x01	; 1
    ec7a:	90 e0       	ldi	r25, 0x00	; 0
    ec7c:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
    ec80:	fc 01       	movw	r30, r24
    ec82:	89 2b       	or	r24, r25
    ec84:	91 f3       	breq	.-28     	; 0xec6a <fdevopen+0x12>
    ec86:	80 e8       	ldi	r24, 0x80	; 128
    ec88:	83 83       	std	Z+3, r24	; 0x03
    ec8a:	01 15       	cp	r16, r1
    ec8c:	11 05       	cpc	r17, r1
    ec8e:	71 f0       	breq	.+28     	; 0xecac <fdevopen+0x54>
    ec90:	13 87       	std	Z+11, r17	; 0x0b
    ec92:	02 87       	std	Z+10, r16	; 0x0a
    ec94:	81 e8       	ldi	r24, 0x81	; 129
    ec96:	83 83       	std	Z+3, r24	; 0x03
    ec98:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    ec9c:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    eca0:	89 2b       	or	r24, r25
    eca2:	21 f4       	brne	.+8      	; 0xecac <fdevopen+0x54>
    eca4:	f0 93 cc 1c 	sts	0x1CCC, r31	; 0x801ccc <__iob+0x1>
    eca8:	e0 93 cb 1c 	sts	0x1CCB, r30	; 0x801ccb <__iob>
    ecac:	20 97       	sbiw	r28, 0x00	; 0
    ecae:	c9 f0       	breq	.+50     	; 0xece2 <fdevopen+0x8a>
    ecb0:	d1 87       	std	Z+9, r29	; 0x09
    ecb2:	c0 87       	std	Z+8, r28	; 0x08
    ecb4:	83 81       	ldd	r24, Z+3	; 0x03
    ecb6:	82 60       	ori	r24, 0x02	; 2
    ecb8:	83 83       	std	Z+3, r24	; 0x03
    ecba:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
    ecbe:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
    ecc2:	89 2b       	or	r24, r25
    ecc4:	21 f4       	brne	.+8      	; 0xecce <fdevopen+0x76>
    ecc6:	f0 93 ce 1c 	sts	0x1CCE, r31	; 0x801cce <__iob+0x3>
    ecca:	e0 93 cd 1c 	sts	0x1CCD, r30	; 0x801ccd <__iob+0x2>
    ecce:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x4>
    ecd2:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x5>
    ecd6:	89 2b       	or	r24, r25
    ecd8:	21 f4       	brne	.+8      	; 0xece2 <fdevopen+0x8a>
    ecda:	f0 93 d0 1c 	sts	0x1CD0, r31	; 0x801cd0 <__iob+0x5>
    ecde:	e0 93 cf 1c 	sts	0x1CCF, r30	; 0x801ccf <__iob+0x4>
    ece2:	cf 01       	movw	r24, r30
    ece4:	df 91       	pop	r29
    ece6:	cf 91       	pop	r28
    ece8:	1f 91       	pop	r17
    ecea:	0f 91       	pop	r16
    ecec:	08 95       	ret

0000ecee <fat_time_to_unix>:
    ecee:	a6 e1       	ldi	r26, 0x16	; 22
    ecf0:	b0 e0       	ldi	r27, 0x00	; 0
    ecf2:	ed e7       	ldi	r30, 0x7D	; 125
    ecf4:	f6 e7       	ldi	r31, 0x76	; 118
    ecf6:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    ecfa:	fe 01       	movw	r30, r28
    ecfc:	31 96       	adiw	r30, 0x01	; 1
    ecfe:	26 e1       	ldi	r18, 0x16	; 22
    ed00:	df 01       	movw	r26, r30
    ed02:	1d 92       	st	X+, r1
    ed04:	2a 95       	dec	r18
    ed06:	e9 f7       	brne	.-6      	; 0xed02 <fat_time_to_unix+0x14>
    ed08:	9b 01       	movw	r18, r22
    ed0a:	22 0f       	add	r18, r18
    ed0c:	33 1f       	adc	r19, r19
    ed0e:	2e 73       	andi	r18, 0x3E	; 62
    ed10:	33 27       	eor	r19, r19
    ed12:	3a 83       	std	Y+2, r19	; 0x02
    ed14:	29 83       	std	Y+1, r18	; 0x01
    ed16:	9b 01       	movw	r18, r22
    ed18:	55 e0       	ldi	r21, 0x05	; 5
    ed1a:	36 95       	lsr	r19
    ed1c:	27 95       	ror	r18
    ed1e:	5a 95       	dec	r21
    ed20:	e1 f7       	brne	.-8      	; 0xed1a <fat_time_to_unix+0x2c>
    ed22:	2f 73       	andi	r18, 0x3F	; 63
    ed24:	33 27       	eor	r19, r19
    ed26:	3c 83       	std	Y+4, r19	; 0x04
    ed28:	2b 83       	std	Y+3, r18	; 0x03
    ed2a:	27 2f       	mov	r18, r23
    ed2c:	26 95       	lsr	r18
    ed2e:	26 95       	lsr	r18
    ed30:	26 95       	lsr	r18
    ed32:	2d 83       	std	Y+5, r18	; 0x05
    ed34:	1e 82       	std	Y+6, r1	; 0x06
    ed36:	9c 01       	movw	r18, r24
    ed38:	2f 71       	andi	r18, 0x1F	; 31
    ed3a:	33 27       	eor	r19, r19
    ed3c:	38 87       	std	Y+8, r19	; 0x08
    ed3e:	2f 83       	std	Y+7, r18	; 0x07
    ed40:	9c 01       	movw	r18, r24
    ed42:	65 e0       	ldi	r22, 0x05	; 5
    ed44:	36 95       	lsr	r19
    ed46:	27 95       	ror	r18
    ed48:	6a 95       	dec	r22
    ed4a:	e1 f7       	brne	.-8      	; 0xed44 <fat_time_to_unix+0x56>
    ed4c:	2f 70       	andi	r18, 0x0F	; 15
    ed4e:	33 27       	eor	r19, r19
    ed50:	21 50       	subi	r18, 0x01	; 1
    ed52:	31 09       	sbc	r19, r1
    ed54:	3a 87       	std	Y+10, r19	; 0x0a
    ed56:	29 87       	std	Y+9, r18	; 0x09
    ed58:	9c 01       	movw	r18, r24
    ed5a:	23 2f       	mov	r18, r19
    ed5c:	33 27       	eor	r19, r19
    ed5e:	26 95       	lsr	r18
    ed60:	20 5b       	subi	r18, 0xB0	; 176
    ed62:	3f 4f       	sbci	r19, 0xFF	; 255
    ed64:	3c 87       	std	Y+12, r19	; 0x0c
    ed66:	2b 87       	std	Y+11, r18	; 0x0b
    ed68:	cf 01       	movw	r24, r30
    ed6a:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <timegm>
    ed6e:	66 96       	adiw	r28, 0x16	; 22
    ed70:	e2 e0       	ldi	r30, 0x02	; 2
    ed72:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000ed76 <stat>:
    ed76:	a6 e1       	ldi	r26, 0x16	; 22
    ed78:	b1 e0       	ldi	r27, 0x01	; 1
    ed7a:	e1 ec       	ldi	r30, 0xC1	; 193
    ed7c:	f6 e7       	ldi	r31, 0x76	; 118
    ed7e:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
    ed82:	6c 01       	movw	r12, r24
    ed84:	8b 01       	movw	r16, r22
    ed86:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ed8a:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ed8e:	67 ef       	ldi	r22, 0xF7	; 247
    ed90:	78 e0       	ldi	r23, 0x08	; 8
    ed92:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    ed96:	89 2b       	or	r24, r25
    ed98:	01 f1       	breq	.+64     	; 0xedda <stat+0x64>
    ed9a:	f8 01       	movw	r30, r16
    ed9c:	14 a2       	std	Z+36, r1	; 0x24
    ed9e:	15 a2       	std	Z+37, r1	; 0x25
    eda0:	16 a2       	std	Z+38, r1	; 0x26
    eda2:	17 a2       	std	Z+39, r1	; 0x27
    eda4:	10 a6       	std	Z+40, r1	; 0x28
    eda6:	11 a6       	std	Z+41, r1	; 0x29
    eda8:	12 a6       	std	Z+42, r1	; 0x2a
    edaa:	13 a6       	std	Z+43, r1	; 0x2b
    edac:	14 a6       	std	Z+44, r1	; 0x2c
    edae:	15 a6       	std	Z+45, r1	; 0x2d
    edb0:	16 a6       	std	Z+46, r1	; 0x2e
    edb2:	17 a6       	std	Z+47, r1	; 0x2f
    edb4:	11 8a       	std	Z+17, r1	; 0x11
    edb6:	10 8a       	std	Z+16, r1	; 0x10
    edb8:	13 8a       	std	Z+19, r1	; 0x13
    edba:	12 8a       	std	Z+18, r1	; 0x12
    edbc:	10 8e       	std	Z+24, r1	; 0x18
    edbe:	11 8e       	std	Z+25, r1	; 0x19
    edc0:	12 8e       	std	Z+26, r1	; 0x1a
    edc2:	13 8e       	std	Z+27, r1	; 0x1b
    edc4:	80 e0       	ldi	r24, 0x00	; 0
    edc6:	90 e4       	ldi	r25, 0x40	; 64
    edc8:	a0 e0       	ldi	r26, 0x00	; 0
    edca:	b0 e0       	ldi	r27, 0x00	; 0
    edcc:	80 87       	std	Z+8, r24	; 0x08
    edce:	91 87       	std	Z+9, r25	; 0x09
    edd0:	a2 87       	std	Z+10, r26	; 0x0a
    edd2:	b3 87       	std	Z+11, r27	; 0x0b
    edd4:	e1 2c       	mov	r14, r1
    edd6:	f1 2c       	mov	r15, r1
    edd8:	62 c0       	rjmp	.+196    	; 0xee9e <stat+0x128>
    edda:	61 ea       	ldi	r22, 0xA1	; 161
    eddc:	78 e0       	ldi	r23, 0x08	; 8
    edde:	c6 01       	movw	r24, r12
    ede0:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    ede4:	89 2b       	or	r24, r25
    ede6:	c9 f6       	brne	.-78     	; 0xed9a <stat+0x24>
    ede8:	63 ef       	ldi	r22, 0xF3	; 243
    edea:	72 e1       	ldi	r23, 0x12	; 18
    edec:	c6 01       	movw	r24, r12
    edee:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    edf2:	7c 01       	movw	r14, r24
    edf4:	89 2b       	or	r24, r25
    edf6:	89 f6       	brne	.-94     	; 0xed9a <stat+0x24>
    edf8:	be 01       	movw	r22, r28
    edfa:	6f 5f       	subi	r22, 0xFF	; 255
    edfc:	7f 4f       	sbci	r23, 0xFF	; 255
    edfe:	c6 01       	movw	r24, r12
    ee00:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <f_stat>
    ee04:	00 97       	sbiw	r24, 0x00	; 0
    ee06:	a9 f0       	breq	.+42     	; 0xee32 <stat+0xbc>
    ee08:	84 31       	cpi	r24, 0x14	; 20
    ee0a:	91 05       	cpc	r25, r1
    ee0c:	40 f4       	brcc	.+16     	; 0xee1e <stat+0xa8>
    ee0e:	fc 01       	movw	r30, r24
    ee10:	ef 55       	subi	r30, 0x5F	; 95
    ee12:	f4 4f       	sbci	r31, 0xF4	; 244
    ee14:	80 81       	ld	r24, Z
    ee16:	08 2e       	mov	r0, r24
    ee18:	00 0c       	add	r0, r0
    ee1a:	99 0b       	sbc	r25, r25
    ee1c:	02 c0       	rjmp	.+4      	; 0xee22 <stat+0xac>
    ee1e:	83 e2       	ldi	r24, 0x23	; 35
    ee20:	90 e0       	ldi	r25, 0x00	; 0
    ee22:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ee26:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ee2a:	ee 24       	eor	r14, r14
    ee2c:	ea 94       	dec	r14
    ee2e:	fe 2c       	mov	r15, r14
    ee30:	36 c0       	rjmp	.+108    	; 0xee9e <stat+0x128>
    ee32:	89 81       	ldd	r24, Y+1	; 0x01
    ee34:	9a 81       	ldd	r25, Y+2	; 0x02
    ee36:	ab 81       	ldd	r26, Y+3	; 0x03
    ee38:	bc 81       	ldd	r27, Y+4	; 0x04
    ee3a:	f8 01       	movw	r30, r16
    ee3c:	80 8f       	std	Z+24, r24	; 0x18
    ee3e:	91 8f       	std	Z+25, r25	; 0x19
    ee40:	a2 8f       	std	Z+26, r26	; 0x1a
    ee42:	b3 8f       	std	Z+27, r27	; 0x1b
    ee44:	6f 81       	ldd	r22, Y+7	; 0x07
    ee46:	78 85       	ldd	r23, Y+8	; 0x08
    ee48:	8d 81       	ldd	r24, Y+5	; 0x05
    ee4a:	9e 81       	ldd	r25, Y+6	; 0x06
    ee4c:	50 df       	rcall	.-352    	; 0xecee <fat_time_to_unix>
    ee4e:	f8 01       	movw	r30, r16
    ee50:	64 a3       	std	Z+36, r22	; 0x24
    ee52:	75 a3       	std	Z+37, r23	; 0x25
    ee54:	86 a3       	std	Z+38, r24	; 0x26
    ee56:	97 a3       	std	Z+39, r25	; 0x27
    ee58:	60 a7       	std	Z+40, r22	; 0x28
    ee5a:	71 a7       	std	Z+41, r23	; 0x29
    ee5c:	82 a7       	std	Z+42, r24	; 0x2a
    ee5e:	93 a7       	std	Z+43, r25	; 0x2b
    ee60:	64 a7       	std	Z+44, r22	; 0x2c
    ee62:	75 a7       	std	Z+45, r23	; 0x2d
    ee64:	86 a7       	std	Z+46, r24	; 0x2e
    ee66:	97 a7       	std	Z+47, r25	; 0x2f
    ee68:	29 85       	ldd	r18, Y+9	; 0x09
    ee6a:	20 fd       	sbrc	r18, 0
    ee6c:	03 c0       	rjmp	.+6      	; 0xee74 <stat+0xfe>
    ee6e:	8f ef       	ldi	r24, 0xFF	; 255
    ee70:	91 e0       	ldi	r25, 0x01	; 1
    ee72:	02 c0       	rjmp	.+4      	; 0xee78 <stat+0x102>
    ee74:	8d e6       	ldi	r24, 0x6D	; 109
    ee76:	91 e0       	ldi	r25, 0x01	; 1
    ee78:	48 ee       	ldi	r20, 0xE8	; 232
    ee7a:	53 e0       	ldi	r21, 0x03	; 3
    ee7c:	f8 01       	movw	r30, r16
    ee7e:	51 8b       	std	Z+17, r21	; 0x11
    ee80:	40 8b       	std	Z+16, r20	; 0x10
    ee82:	53 8b       	std	Z+19, r21	; 0x13
    ee84:	42 8b       	std	Z+18, r20	; 0x12
    ee86:	24 ff       	sbrs	r18, 4
    ee88:	02 c0       	rjmp	.+4      	; 0xee8e <stat+0x118>
    ee8a:	90 64       	ori	r25, 0x40	; 64
    ee8c:	01 c0       	rjmp	.+2      	; 0xee90 <stat+0x11a>
    ee8e:	90 68       	ori	r25, 0x80	; 128
    ee90:	a0 e0       	ldi	r26, 0x00	; 0
    ee92:	b0 e0       	ldi	r27, 0x00	; 0
    ee94:	f8 01       	movw	r30, r16
    ee96:	80 87       	std	Z+8, r24	; 0x08
    ee98:	91 87       	std	Z+9, r25	; 0x09
    ee9a:	a2 87       	std	Z+10, r26	; 0x0a
    ee9c:	b3 87       	std	Z+11, r27	; 0x0b
    ee9e:	c7 01       	movw	r24, r14
    eea0:	ca 5e       	subi	r28, 0xEA	; 234
    eea2:	de 4f       	sbci	r29, 0xFE	; 254
    eea4:	e8 e0       	ldi	r30, 0x08	; 8
    eea6:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0000eeaa <unix_time_to_fat>:
    eeaa:	a4 e0       	ldi	r26, 0x04	; 4
    eeac:	b0 e0       	ldi	r27, 0x00	; 0
    eeae:	eb e5       	ldi	r30, 0x5B	; 91
    eeb0:	f7 e7       	ldi	r31, 0x77	; 119
    eeb2:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
    eeb6:	69 83       	std	Y+1, r22	; 0x01
    eeb8:	7a 83       	std	Y+2, r23	; 0x02
    eeba:	8b 83       	std	Y+3, r24	; 0x03
    eebc:	9c 83       	std	Y+4, r25	; 0x04
    eebe:	7a 01       	movw	r14, r20
    eec0:	89 01       	movw	r16, r18
    eec2:	ce 01       	movw	r24, r28
    eec4:	01 96       	adiw	r24, 0x01	; 1
    eec6:	0e 94 d7 34 	call	0x69ae	; 0x69ae <gmtime>
    eeca:	fc 01       	movw	r30, r24
    eecc:	22 85       	ldd	r18, Z+10	; 0x0a
    eece:	33 85       	ldd	r19, Z+11	; 0x0b
    eed0:	20 55       	subi	r18, 0x50	; 80
    eed2:	31 09       	sbc	r19, r1
    eed4:	c9 01       	movw	r24, r18
    eed6:	98 2f       	mov	r25, r24
    eed8:	88 27       	eor	r24, r24
    eeda:	99 0f       	add	r25, r25
    eedc:	20 85       	ldd	r18, Z+8	; 0x08
    eede:	31 85       	ldd	r19, Z+9	; 0x09
    eee0:	2f 5f       	subi	r18, 0xFF	; 255
    eee2:	3f 4f       	sbci	r19, 0xFF	; 255
    eee4:	45 e0       	ldi	r20, 0x05	; 5
    eee6:	22 0f       	add	r18, r18
    eee8:	33 1f       	adc	r19, r19
    eeea:	4a 95       	dec	r20
    eeec:	e1 f7       	brne	.-8      	; 0xeee6 <unix_time_to_fat+0x3c>
    eeee:	28 2b       	or	r18, r24
    eef0:	39 2b       	or	r19, r25
    eef2:	86 81       	ldd	r24, Z+6	; 0x06
    eef4:	97 81       	ldd	r25, Z+7	; 0x07
    eef6:	28 2b       	or	r18, r24
    eef8:	39 2b       	or	r19, r25
    eefa:	d7 01       	movw	r26, r14
    eefc:	2d 93       	st	X+, r18
    eefe:	3c 93       	st	X, r19
    ef00:	84 81       	ldd	r24, Z+4	; 0x04
    ef02:	20 e0       	ldi	r18, 0x00	; 0
    ef04:	30 e0       	ldi	r19, 0x00	; 0
    ef06:	38 2f       	mov	r19, r24
    ef08:	33 0f       	add	r19, r19
    ef0a:	33 0f       	add	r19, r19
    ef0c:	33 0f       	add	r19, r19
    ef0e:	82 81       	ldd	r24, Z+2	; 0x02
    ef10:	93 81       	ldd	r25, Z+3	; 0x03
    ef12:	55 e0       	ldi	r21, 0x05	; 5
    ef14:	88 0f       	add	r24, r24
    ef16:	99 1f       	adc	r25, r25
    ef18:	5a 95       	dec	r21
    ef1a:	e1 f7       	brne	.-8      	; 0xef14 <unix_time_to_fat+0x6a>
    ef1c:	82 2b       	or	r24, r18
    ef1e:	93 2b       	or	r25, r19
    ef20:	20 81       	ld	r18, Z
    ef22:	31 81       	ldd	r19, Z+1	; 0x01
    ef24:	36 95       	lsr	r19
    ef26:	27 95       	ror	r18
    ef28:	82 2b       	or	r24, r18
    ef2a:	93 2b       	or	r25, r19
    ef2c:	f8 01       	movw	r30, r16
    ef2e:	91 83       	std	Z+1, r25	; 0x01
    ef30:	80 83       	st	Z, r24
    ef32:	24 96       	adiw	r28, 0x04	; 4
    ef34:	e6 e0       	ldi	r30, 0x06	; 6
    ef36:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

0000ef3a <utime>:
    ef3a:	aa e1       	ldi	r26, 0x1A	; 26
    ef3c:	b1 e0       	ldi	r27, 0x01	; 1
    ef3e:	e3 ea       	ldi	r30, 0xA3	; 163
    ef40:	f7 e7       	ldi	r31, 0x77	; 119
    ef42:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
    ef46:	8c 01       	movw	r16, r24
    ef48:	61 15       	cp	r22, r1
    ef4a:	71 05       	cpc	r23, r1
    ef4c:	31 f0       	breq	.+12     	; 0xef5a <utime+0x20>
    ef4e:	fb 01       	movw	r30, r22
    ef50:	64 81       	ldd	r22, Z+4	; 0x04
    ef52:	75 81       	ldd	r23, Z+5	; 0x05
    ef54:	86 81       	ldd	r24, Z+6	; 0x06
    ef56:	97 81       	ldd	r25, Z+7	; 0x07
    ef58:	04 c0       	rjmp	.+8      	; 0xef62 <utime+0x28>
    ef5a:	80 e0       	ldi	r24, 0x00	; 0
    ef5c:	90 e0       	ldi	r25, 0x00	; 0
    ef5e:	0e 94 31 35 	call	0x6a62	; 0x6a62 <time>
    ef62:	9e 01       	movw	r18, r28
    ef64:	29 5e       	subi	r18, 0xE9	; 233
    ef66:	3e 4f       	sbci	r19, 0xFE	; 254
    ef68:	ae 01       	movw	r20, r28
    ef6a:	47 5e       	subi	r20, 0xE7	; 231
    ef6c:	5e 4f       	sbci	r21, 0xFE	; 254
    ef6e:	9d df       	rcall	.-198    	; 0xeeaa <unix_time_to_fat>
    ef70:	c7 5e       	subi	r28, 0xE7	; 231
    ef72:	de 4f       	sbci	r29, 0xFE	; 254
    ef74:	88 81       	ld	r24, Y
    ef76:	99 81       	ldd	r25, Y+1	; 0x01
    ef78:	c9 51       	subi	r28, 0x19	; 25
    ef7a:	d1 40       	sbci	r29, 0x01	; 1
    ef7c:	9e 83       	std	Y+6, r25	; 0x06
    ef7e:	8d 83       	std	Y+5, r24	; 0x05
    ef80:	c9 5e       	subi	r28, 0xE9	; 233
    ef82:	de 4f       	sbci	r29, 0xFE	; 254
    ef84:	88 81       	ld	r24, Y
    ef86:	99 81       	ldd	r25, Y+1	; 0x01
    ef88:	c7 51       	subi	r28, 0x17	; 23
    ef8a:	d1 40       	sbci	r29, 0x01	; 1
    ef8c:	98 87       	std	Y+8, r25	; 0x08
    ef8e:	8f 83       	std	Y+7, r24	; 0x07
    ef90:	be 01       	movw	r22, r28
    ef92:	6f 5f       	subi	r22, 0xFF	; 255
    ef94:	7f 4f       	sbci	r23, 0xFF	; 255
    ef96:	c8 01       	movw	r24, r16
    ef98:	0e 94 8b 65 	call	0xcb16	; 0xcb16 <f_utime>
    ef9c:	84 31       	cpi	r24, 0x14	; 20
    ef9e:	91 05       	cpc	r25, r1
    efa0:	40 f4       	brcc	.+16     	; 0xefb2 <utime+0x78>
    efa2:	fc 01       	movw	r30, r24
    efa4:	ef 55       	subi	r30, 0x5F	; 95
    efa6:	f4 4f       	sbci	r31, 0xF4	; 244
    efa8:	80 81       	ld	r24, Z
    efaa:	08 2e       	mov	r0, r24
    efac:	00 0c       	add	r0, r0
    efae:	99 0b       	sbc	r25, r25
    efb0:	02 c0       	rjmp	.+4      	; 0xefb6 <utime+0x7c>
    efb2:	83 e2       	ldi	r24, 0x23	; 35
    efb4:	90 e0       	ldi	r25, 0x00	; 0
    efb6:	c6 5e       	subi	r28, 0xE6	; 230
    efb8:	de 4f       	sbci	r29, 0xFE	; 254
    efba:	e4 e0       	ldi	r30, 0x04	; 4
    efbc:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

0000efc0 <fileno_to_fatfs>:
    efc0:	83 30       	cpi	r24, 0x03	; 3
    efc2:	91 05       	cpc	r25, r1
    efc4:	48 f4       	brcc	.+18     	; 0xefd8 <fileno_to_fatfs+0x18>
    efc6:	89 e0       	ldi	r24, 0x09	; 9
    efc8:	90 e0       	ldi	r25, 0x00	; 0
    efca:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    efce:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    efd2:	80 e0       	ldi	r24, 0x00	; 0
    efd4:	90 e0       	ldi	r25, 0x00	; 0
    efd6:	08 95       	ret
    efd8:	60 dc       	rcall	.-1856   	; 0xe89a <fileno_to_stream>
    efda:	00 97       	sbiw	r24, 0x00	; 0
    efdc:	d1 f3       	breq	.-12     	; 0xefd2 <fileno_to_fatfs+0x12>
    efde:	fc 01       	movw	r30, r24
    efe0:	84 85       	ldd	r24, Z+12	; 0x0c
    efe2:	95 85       	ldd	r25, Z+13	; 0x0d
    efe4:	00 97       	sbiw	r24, 0x00	; 0
    efe6:	79 f3       	breq	.-34     	; 0xefc6 <fileno_to_fatfs+0x6>
    efe8:	08 95       	ret

0000efea <ftell>:
    efea:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    efee:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    eff2:	37 dc       	rcall	.-1938   	; 0xe862 <fileno>
    eff4:	83 30       	cpi	r24, 0x03	; 3
    eff6:	91 05       	cpc	r25, r1
    eff8:	48 f0       	brcs	.+18     	; 0xf00c <ftell+0x22>
    effa:	e2 df       	rcall	.-60     	; 0xefc0 <fileno_to_fatfs>
    effc:	00 97       	sbiw	r24, 0x00	; 0
    effe:	51 f4       	brne	.+20     	; 0xf014 <ftell+0x2a>
    f000:	89 e0       	ldi	r24, 0x09	; 9
    f002:	90 e0       	ldi	r25, 0x00	; 0
    f004:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f008:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f00c:	6f ef       	ldi	r22, 0xFF	; 255
    f00e:	7f ef       	ldi	r23, 0xFF	; 255
    f010:	cb 01       	movw	r24, r22
    f012:	08 95       	ret
    f014:	fc 01       	movw	r30, r24
    f016:	60 89       	ldd	r22, Z+16	; 0x10
    f018:	71 89       	ldd	r23, Z+17	; 0x11
    f01a:	82 89       	ldd	r24, Z+18	; 0x12
    f01c:	93 89       	ldd	r25, Z+19	; 0x13
    f01e:	08 95       	ret

0000f020 <lseek>:
    f020:	a3 e0       	ldi	r26, 0x03	; 3
    f022:	b0 e0       	ldi	r27, 0x00	; 0
    f024:	e6 e1       	ldi	r30, 0x16	; 22
    f026:	f8 e7       	ldi	r31, 0x78	; 120
    f028:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
    f02c:	5c 01       	movw	r10, r24
    f02e:	6a 01       	movw	r12, r20
    f030:	7b 01       	movw	r14, r22
    f032:	89 01       	movw	r16, r18
    f034:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f038:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f03c:	c1 df       	rcall	.-126    	; 0xefc0 <fileno_to_fatfs>
    f03e:	ec 01       	movw	r28, r24
    f040:	89 2b       	or	r24, r25
    f042:	19 f4       	brne	.+6      	; 0xf04a <lseek+0x2a>
    f044:	88 e1       	ldi	r24, 0x18	; 24
    f046:	90 e0       	ldi	r25, 0x00	; 0
    f048:	26 c0       	rjmp	.+76     	; 0xf096 <lseek+0x76>
    f04a:	83 e0       	ldi	r24, 0x03	; 3
    f04c:	a8 16       	cp	r10, r24
    f04e:	b1 04       	cpc	r11, r1
    f050:	d0 f1       	brcs	.+116    	; 0xf0c6 <lseek+0xa6>
    f052:	c5 01       	movw	r24, r10
    f054:	22 dc       	rcall	.-1980   	; 0xe89a <fileno_to_stream>
    f056:	fc 01       	movw	r30, r24
    f058:	93 81       	ldd	r25, Z+3	; 0x03
    f05a:	90 64       	ori	r25, 0x40	; 64
    f05c:	93 83       	std	Z+3, r25	; 0x03
    f05e:	02 30       	cpi	r16, 0x02	; 2
    f060:	11 05       	cpc	r17, r1
    f062:	a9 f5       	brne	.+106    	; 0xf0ce <lseek+0xae>
    f064:	8a 85       	ldd	r24, Y+10	; 0x0a
    f066:	9b 85       	ldd	r25, Y+11	; 0x0b
    f068:	ac 85       	ldd	r26, Y+12	; 0x0c
    f06a:	bd 85       	ldd	r27, Y+13	; 0x0d
    f06c:	c8 0e       	add	r12, r24
    f06e:	d9 1e       	adc	r13, r25
    f070:	ea 1e       	adc	r14, r26
    f072:	fb 1e       	adc	r15, r27
    f074:	b7 01       	movw	r22, r14
    f076:	a6 01       	movw	r20, r12
    f078:	ce 01       	movw	r24, r28
    f07a:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <f_lseek>
    f07e:	00 97       	sbiw	r24, 0x00	; 0
    f080:	79 f0       	breq	.+30     	; 0xf0a0 <lseek+0x80>
    f082:	84 31       	cpi	r24, 0x14	; 20
    f084:	91 05       	cpc	r25, r1
    f086:	58 f5       	brcc	.+86     	; 0xf0de <lseek+0xbe>
    f088:	fc 01       	movw	r30, r24
    f08a:	ef 55       	subi	r30, 0x5F	; 95
    f08c:	f4 4f       	sbci	r31, 0xF4	; 244
    f08e:	80 81       	ld	r24, Z
    f090:	08 2e       	mov	r0, r24
    f092:	00 0c       	add	r0, r0
    f094:	99 0b       	sbc	r25, r25
    f096:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f09a:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f09e:	13 c0       	rjmp	.+38     	; 0xf0c6 <lseek+0xa6>
    f0a0:	68 89       	ldd	r22, Y+16	; 0x10
    f0a2:	79 89       	ldd	r23, Y+17	; 0x11
    f0a4:	8a 89       	ldd	r24, Y+18	; 0x12
    f0a6:	9b 89       	ldd	r25, Y+19	; 0x13
    f0a8:	c6 16       	cp	r12, r22
    f0aa:	d7 06       	cpc	r13, r23
    f0ac:	e8 06       	cpc	r14, r24
    f0ae:	f9 06       	cpc	r15, r25
    f0b0:	c9 f0       	breq	.+50     	; 0xf0e4 <lseek+0xc4>
    f0b2:	84 eb       	ldi	r24, 0xB4	; 180
    f0b4:	9b e0       	ldi	r25, 0x0B	; 11
    f0b6:	a0 e0       	ldi	r26, 0x00	; 0
    f0b8:	ed b7       	in	r30, 0x3d	; 61
    f0ba:	fe b7       	in	r31, 0x3e	; 62
    f0bc:	81 83       	std	Z+1, r24	; 0x01
    f0be:	92 83       	std	Z+2, r25	; 0x02
    f0c0:	a3 83       	std	Z+3, r26	; 0x03
    f0c2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f0c6:	6f ef       	ldi	r22, 0xFF	; 255
    f0c8:	7f ef       	ldi	r23, 0xFF	; 255
    f0ca:	cb 01       	movw	r24, r22
    f0cc:	0b c0       	rjmp	.+22     	; 0xf0e4 <lseek+0xc4>
    f0ce:	01 30       	cpi	r16, 0x01	; 1
    f0d0:	11 05       	cpc	r17, r1
    f0d2:	81 f6       	brne	.-96     	; 0xf074 <lseek+0x54>
    f0d4:	88 89       	ldd	r24, Y+16	; 0x10
    f0d6:	99 89       	ldd	r25, Y+17	; 0x11
    f0d8:	aa 89       	ldd	r26, Y+18	; 0x12
    f0da:	bb 89       	ldd	r27, Y+19	; 0x13
    f0dc:	c7 cf       	rjmp	.-114    	; 0xf06c <lseek+0x4c>
    f0de:	83 e2       	ldi	r24, 0x23	; 35
    f0e0:	90 e0       	ldi	r25, 0x00	; 0
    f0e2:	d9 cf       	rjmp	.-78     	; 0xf096 <lseek+0x76>
    f0e4:	cd b7       	in	r28, 0x3d	; 61
    f0e6:	de b7       	in	r29, 0x3e	; 62
    f0e8:	23 96       	adiw	r28, 0x03	; 3
    f0ea:	ea e0       	ldi	r30, 0x0A	; 10
    f0ec:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

0000f0f0 <fseek>:
    f0f0:	cf 92       	push	r12
    f0f2:	df 92       	push	r13
    f0f4:	ef 92       	push	r14
    f0f6:	ff 92       	push	r15
    f0f8:	cf 93       	push	r28
    f0fa:	df 93       	push	r29
    f0fc:	6a 01       	movw	r12, r20
    f0fe:	7b 01       	movw	r14, r22
    f100:	e9 01       	movw	r28, r18
    f102:	af db       	rcall	.-2210   	; 0xe862 <fileno>
    f104:	97 fd       	sbrc	r25, 7
    f106:	12 c0       	rjmp	.+36     	; 0xf12c <fseek+0x3c>
    f108:	9e 01       	movw	r18, r28
    f10a:	b7 01       	movw	r22, r14
    f10c:	a6 01       	movw	r20, r12
    f10e:	88 df       	rcall	.-240    	; 0xf020 <lseek>
    f110:	21 e0       	ldi	r18, 0x01	; 1
    f112:	30 e0       	ldi	r19, 0x00	; 0
    f114:	6f 3f       	cpi	r22, 0xFF	; 255
    f116:	7f 4f       	sbci	r23, 0xFF	; 255
    f118:	8f 4f       	sbci	r24, 0xFF	; 255
    f11a:	9f 4f       	sbci	r25, 0xFF	; 255
    f11c:	11 f0       	breq	.+4      	; 0xf122 <fseek+0x32>
    f11e:	20 e0       	ldi	r18, 0x00	; 0
    f120:	30 e0       	ldi	r19, 0x00	; 0
    f122:	88 27       	eor	r24, r24
    f124:	99 27       	eor	r25, r25
    f126:	82 1b       	sub	r24, r18
    f128:	93 0b       	sbc	r25, r19
    f12a:	02 c0       	rjmp	.+4      	; 0xf130 <fseek+0x40>
    f12c:	8f ef       	ldi	r24, 0xFF	; 255
    f12e:	9f ef       	ldi	r25, 0xFF	; 255
    f130:	df 91       	pop	r29
    f132:	cf 91       	pop	r28
    f134:	ff 90       	pop	r15
    f136:	ef 90       	pop	r14
    f138:	df 90       	pop	r13
    f13a:	cf 90       	pop	r12
    f13c:	08 95       	ret

0000f13e <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f13e:	a2 e0       	ldi	r26, 0x02	; 2
    f140:	b0 e0       	ldi	r27, 0x00	; 0
    f142:	e5 ea       	ldi	r30, 0xA5	; 165
    f144:	f8 e7       	ldi	r31, 0x78	; 120
    f146:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
    f14a:	5c 01       	movw	r10, r24
    f14c:	8b 01       	movw	r16, r22
    f14e:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f150:	fb 01       	movw	r30, r22
    f152:	10 82       	st	Z, r1

    errno = 0;
    f154:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f158:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f15c:	9e db       	rcall	.-2244   	; 0xe89a <fileno_to_stream>
    if(stream == stdin)
    f15e:	7c 01       	movw	r14, r24
    f160:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    f164:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    f168:	e8 16       	cp	r14, r24
    f16a:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f16c:	c9 f4       	brne	.+50     	; 0xf1a0 <read+0x62>
    f16e:	f7 01       	movw	r30, r14
    f170:	83 81       	ldd	r24, Z+3	; 0x03
    f172:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f174:	83 83       	std	Z+3, r24	; 0x03
    f176:	1a 82       	std	Y+2, r1	; 0x02
    f178:	19 82       	std	Y+1, r1	; 0x01
    f17a:	c0 0e       	add	r12, r16
        while(count--)
    f17c:	d1 1e       	adc	r13, r17
    f17e:	0c 15       	cp	r16, r12
    f180:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f182:	09 f4       	brne	.+2      	; 0xf186 <read+0x48>
    f184:	3d c0       	rjmp	.+122    	; 0xf200 <read+0xc2>
            if(ret < 0)
    f186:	c7 01       	movw	r24, r14
    f188:	48 da       	rcall	.-2928   	; 0xe61a <fgetc>
                break;

            *ptr++ = ret;
    f18a:	97 fd       	sbrc	r25, 7
    f18c:	39 c0       	rjmp	.+114    	; 0xf200 <read+0xc2>
    f18e:	f8 01       	movw	r30, r16
            ++size;
    f190:	81 93       	st	Z+, r24
    f192:	8f 01       	movw	r16, r30
    f194:	89 81       	ldd	r24, Y+1	; 0x01
    f196:	9a 81       	ldd	r25, Y+2	; 0x02
    f198:	01 96       	adiw	r24, 0x01	; 1
    f19a:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f19c:	89 83       	std	Y+1, r24	; 0x01
    f19e:	ef cf       	rjmp	.-34     	; 0xf17e <read+0x40>
    f1a0:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
    f1a4:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
    f1a8:	e8 16       	cp	r14, r24
    f1aa:	f9 06       	cpc	r15, r25
    f1ac:	71 f1       	breq	.+92     	; 0xf20a <read+0xcc>
    f1ae:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x4>
    f1b2:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x5>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f1b6:	e8 16       	cp	r14, r24
    f1b8:	f9 06       	cpc	r15, r25
    f1ba:	39 f1       	breq	.+78     	; 0xf20a <read+0xcc>
    if ( fh == NULL )
    f1bc:	c5 01       	movw	r24, r10
    f1be:	00 df       	rcall	.-512    	; 0xefc0 <fileno_to_fatfs>
    {
        errno = EBADF;
    f1c0:	00 97       	sbiw	r24, 0x00	; 0
    f1c2:	19 f4       	brne	.+6      	; 0xf1ca <read+0x8c>
    f1c4:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f1c6:	90 e0       	ldi	r25, 0x00	; 0
    f1c8:	16 c0       	rjmp	.+44     	; 0xf1f6 <read+0xb8>
    f1ca:	9e 01       	movw	r18, r28
    f1cc:	2f 5f       	subi	r18, 0xFF	; 255
    f1ce:	3f 4f       	sbci	r19, 0xFF	; 255
    f1d0:	a6 01       	movw	r20, r12
    f1d2:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f1d4:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <f_read>
    f1d8:	00 97       	sbiw	r24, 0x00	; 0
    f1da:	91 f0       	breq	.+36     	; 0xf200 <read+0xc2>
    f1dc:	84 31       	cpi	r24, 0x14	; 20
    f1de:	91 05       	cpc	r25, r1
    f1e0:	40 f4       	brcc	.+16     	; 0xf1f2 <read+0xb4>
    f1e2:	fc 01       	movw	r30, r24
    f1e4:	ef 55       	subi	r30, 0x5F	; 95
    f1e6:	f4 4f       	sbci	r31, 0xF4	; 244
    f1e8:	80 81       	ld	r24, Z
    f1ea:	08 2e       	mov	r0, r24
    f1ec:	00 0c       	add	r0, r0
    f1ee:	99 0b       	sbc	r25, r25
    f1f0:	02 c0       	rjmp	.+4      	; 0xf1f6 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f1f2:	83 e2       	ldi	r24, 0x23	; 35
    f1f4:	90 e0       	ldi	r25, 0x00	; 0
    f1f6:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f1fa:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f1fe:	05 c0       	rjmp	.+10     	; 0xf20a <read+0xcc>
    f200:	69 81       	ldd	r22, Y+1	; 0x01
    f202:	7a 81       	ldd	r23, Y+2	; 0x02
    f204:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f206:	90 e0       	ldi	r25, 0x00	; 0
    f208:	03 c0       	rjmp	.+6      	; 0xf210 <read+0xd2>
    f20a:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f20c:	7f ef       	ldi	r23, 0xFF	; 255
    f20e:	cb 01       	movw	r24, r22
    f210:	22 96       	adiw	r28, 0x02	; 2
    f212:	ea e0       	ldi	r30, 0x0A	; 10
    f214:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

0000f218 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f218:	0f 93       	push	r16
    f21a:	1f 93       	push	r17
    f21c:	cf 93       	push	r28
    f21e:	df 93       	push	r29
    f220:	ec 01       	movw	r28, r24
    f222:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f224:	64 9f       	mul	r22, r20
    f226:	80 01       	movw	r16, r0
    f228:	65 9f       	mul	r22, r21
    f22a:	10 0d       	add	r17, r0
    f22c:	74 9f       	mul	r23, r20
    f22e:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f230:	11 24       	eor	r1, r1
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f232:	17 db       	rcall	.-2514   	; 0xe862 <fileno>
    f234:	a8 01       	movw	r20, r16
    f236:	be 01       	movw	r22, r28
    if(ret < 0)
    f238:	82 df       	rcall	.-252    	; 0xf13e <read>
    f23a:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f23c:	02 c0       	rjmp	.+4      	; 0xf242 <fread+0x2a>
    f23e:	cb 01       	movw	r24, r22
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f240:	02 c0       	rjmp	.+4      	; 0xf246 <fread+0x2e>
    f242:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f244:	90 e0       	ldi	r25, 0x00	; 0
    f246:	df 91       	pop	r29
    f248:	cf 91       	pop	r28
    f24a:	1f 91       	pop	r17
    f24c:	0f 91       	pop	r16
    f24e:	08 95       	ret

0000f250 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f250:	cf 93       	push	r28
    f252:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f254:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f258:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f25c:	83 30       	cpi	r24, 0x03	; 3
    f25e:	91 05       	cpc	r25, r1
    f260:	18 f4       	brcc	.+6      	; 0xf268 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f262:	89 e0       	ldi	r24, 0x09	; 9
    f264:	90 e0       	ldi	r25, 0x00	; 0
    f266:	18 c0       	rjmp	.+48     	; 0xf298 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f268:	ec 01       	movw	r28, r24
    f26a:	17 db       	rcall	.-2514   	; 0xe89a <fileno_to_stream>
// reset unget on sync
    stream->flags |= __SUNGET;
    f26c:	fc 01       	movw	r30, r24
    f26e:	93 81       	ldd	r25, Z+3	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f270:	90 64       	ori	r25, 0x40	; 64
    f272:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f274:	ce 01       	movw	r24, r28
    f276:	a4 de       	rcall	.-696    	; 0xefc0 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f278:	00 97       	sbiw	r24, 0x00	; 0
    f27a:	99 f3       	breq	.-26     	; 0xf262 <syncfs+0x12>
    if (res != FR_OK)
    f27c:	0e 94 c4 5b 	call	0xb788	; 0xb788 <f_sync>
    f280:	00 97       	sbiw	r24, 0x00	; 0
    f282:	a1 f0       	breq	.+40     	; 0xf2ac <syncfs+0x5c>
    f284:	84 31       	cpi	r24, 0x14	; 20
    f286:	91 05       	cpc	r25, r1
    f288:	70 f4       	brcc	.+28     	; 0xf2a6 <syncfs+0x56>
    f28a:	fc 01       	movw	r30, r24
    f28c:	ef 55       	subi	r30, 0x5F	; 95
    f28e:	f4 4f       	sbci	r31, 0xF4	; 244
    f290:	80 81       	ld	r24, Z
    f292:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f294:	00 0c       	add	r0, r0
    f296:	99 0b       	sbc	r25, r25
    f298:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
        return(-1);
    f29c:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f2a0:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f2a2:	9f ef       	ldi	r25, 0xFF	; 255
    f2a4:	05 c0       	rjmp	.+10     	; 0xf2b0 <syncfs+0x60>
    f2a6:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f2a8:	90 e0       	ldi	r25, 0x00	; 0
    f2aa:	f6 cf       	rjmp	.-20     	; 0xf298 <syncfs+0x48>
}
    f2ac:	80 e0       	ldi	r24, 0x00	; 0
    f2ae:	90 e0       	ldi	r25, 0x00	; 0
    f2b0:	df 91       	pop	r29
    f2b2:	cf 91       	pop	r28
    f2b4:	08 95       	ret

0000f2b6 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f2b6:	cf 93       	push	r28
    f2b8:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f2ba:	c0 e0       	ldi	r28, 0x00	; 0
    f2bc:	d0 e0       	ldi	r29, 0x00	; 0
    f2be:	21 96       	adiw	r28, 0x01	; 1
    f2c0:	c0 31       	cpi	r28, 0x10	; 16
    f2c2:	d1 05       	cpc	r29, r1
    f2c4:	51 f0       	breq	.+20     	; 0xf2da <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f2c6:	c3 30       	cpi	r28, 0x03	; 3
    f2c8:	d1 05       	cpc	r29, r1
    f2ca:	cc f3       	brlt	.-14     	; 0xf2be <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f2cc:	ce 01       	movw	r24, r28
    f2ce:	78 de       	rcall	.-784    	; 0xefc0 <fileno_to_fatfs>
        if(fh == NULL)
    f2d0:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f2d2:	a9 f3       	breq	.-22     	; 0xf2be <sync+0x8>
    f2d4:	ce 01       	movw	r24, r28
    f2d6:	bc df       	rcall	.-136    	; 0xf250 <syncfs>
    }
}
    f2d8:	f2 cf       	rjmp	.-28     	; 0xf2be <sync+0x8>
    f2da:	df 91       	pop	r29
    f2dc:	cf 91       	pop	r28
    f2de:	08 95       	ret

0000f2e0 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f2e0:	a2 e0       	ldi	r26, 0x02	; 2
    f2e2:	b0 e0       	ldi	r27, 0x00	; 0
    f2e4:	e6 e7       	ldi	r30, 0x76	; 118
    f2e6:	f9 e7       	ldi	r31, 0x79	; 121
    f2e8:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
    f2ec:	8c 01       	movw	r16, r24
    f2ee:	b6 2e       	mov	r11, r22
    f2f0:	f7 2e       	mov	r15, r23
    f2f2:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f2f4:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f2f8:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f2fc:	ce da       	rcall	.-2660   	; 0xe89a <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    f2fe:	6c 01       	movw	r12, r24
    f300:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
    f304:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
    f308:	c8 16       	cp	r12, r24
    f30a:	d9 06       	cpc	r13, r25
    f30c:	39 f0       	breq	.+14     	; 0xf31c <write+0x3c>
    f30e:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x4>
    f312:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x5>
    f316:	c8 16       	cp	r12, r24
    f318:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;
        size = 0;
    f31a:	d1 f4       	brne	.+52     	; 0xf350 <write+0x70>
    f31c:	1a 82       	std	Y+2, r1	; 0x02
    f31e:	19 82       	std	Y+1, r1	; 0x01
    f320:	0b 2d       	mov	r16, r11
    f322:	1f 2d       	mov	r17, r15
    f324:	78 01       	movw	r14, r16
    f326:	e8 0c       	add	r14, r8
        while(count--)
    f328:	f9 1c       	adc	r15, r9
    f32a:	0e 15       	cp	r16, r14
    f32c:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    f32e:	d1 f1       	breq	.+116    	; 0xf3a4 <write+0xc4>
    f330:	f8 01       	movw	r30, r16
    f332:	a1 90       	ld	r10, Z+
    f334:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    f336:	b1 2c       	mov	r11, r1
    f338:	b6 01       	movw	r22, r12
    f33a:	c5 01       	movw	r24, r10
            if(c != ret)
    f33c:	c4 d9       	rcall	.-3192   	; 0xe6c6 <fputc>
    f33e:	a8 16       	cp	r10, r24
    f340:	b9 06       	cpc	r11, r25
                break;

            ++size;
    f342:	81 f5       	brne	.+96     	; 0xf3a4 <write+0xc4>
    f344:	89 81       	ldd	r24, Y+1	; 0x01
    f346:	9a 81       	ldd	r25, Y+2	; 0x02
    f348:	01 96       	adiw	r24, 0x01	; 1
    f34a:	9a 83       	std	Y+2, r25	; 0x02
    f34c:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    f34e:	ed cf       	rjmp	.-38     	; 0xf32a <write+0x4a>
    f350:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    f354:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    f358:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f35a:	d9 06       	cpc	r13, r25
    f35c:	41 f1       	breq	.+80     	; 0xf3ae <write+0xce>
    f35e:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    f360:	2f de       	rcall	.-930    	; 0xefc0 <fileno_to_fatfs>
    f362:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    f364:	19 f4       	brne	.+6      	; 0xf36c <write+0x8c>
    f366:	89 e0       	ldi	r24, 0x09	; 9
    f368:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f36a:	17 c0       	rjmp	.+46     	; 0xf39a <write+0xba>
    f36c:	9e 01       	movw	r18, r28
    f36e:	2f 5f       	subi	r18, 0xFF	; 255
    f370:	3f 4f       	sbci	r19, 0xFF	; 255
    f372:	a4 01       	movw	r20, r8
    f374:	6b 2d       	mov	r22, r11
    f376:	7f 2d       	mov	r23, r15
    f378:	0e 94 2d 5a 	call	0xb45a	; 0xb45a <f_write>
    if(res != FR_OK)
    f37c:	00 97       	sbiw	r24, 0x00	; 0
    f37e:	91 f0       	breq	.+36     	; 0xf3a4 <write+0xc4>
    f380:	84 31       	cpi	r24, 0x14	; 20
    f382:	91 05       	cpc	r25, r1
    f384:	40 f4       	brcc	.+16     	; 0xf396 <write+0xb6>
    f386:	fc 01       	movw	r30, r24
    f388:	ef 55       	subi	r30, 0x5F	; 95
    f38a:	f4 4f       	sbci	r31, 0xF4	; 244
    f38c:	80 81       	ld	r24, Z
    f38e:	08 2e       	mov	r0, r24
    f390:	00 0c       	add	r0, r0
    f392:	99 0b       	sbc	r25, r25
    f394:	02 c0       	rjmp	.+4      	; 0xf39a <write+0xba>
    f396:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    f398:	90 e0       	ldi	r25, 0x00	; 0
    f39a:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f39e:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f3a2:	05 c0       	rjmp	.+10     	; 0xf3ae <write+0xce>
    f3a4:	69 81       	ldd	r22, Y+1	; 0x01
    f3a6:	7a 81       	ldd	r23, Y+2	; 0x02
    f3a8:	80 e0       	ldi	r24, 0x00	; 0
    f3aa:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f3ac:	03 c0       	rjmp	.+6      	; 0xf3b4 <write+0xd4>
    f3ae:	6f ef       	ldi	r22, 0xFF	; 255
    f3b0:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f3b2:	cb 01       	movw	r24, r22
    f3b4:	22 96       	adiw	r28, 0x02	; 2
    f3b6:	ec e0       	ldi	r30, 0x0C	; 12
    f3b8:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

0000f3bc <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f3bc:	0f 93       	push	r16
    f3be:	1f 93       	push	r17
    f3c0:	cf 93       	push	r28
    f3c2:	df 93       	push	r29
    f3c4:	ec 01       	movw	r28, r24
    f3c6:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f3c8:	64 9f       	mul	r22, r20
    f3ca:	80 01       	movw	r16, r0
    f3cc:	65 9f       	mul	r22, r21
    f3ce:	10 0d       	add	r17, r0
    f3d0:	74 9f       	mul	r23, r20
    f3d2:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f3d4:	11 24       	eor	r1, r1
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f3d6:	45 da       	rcall	.-2934   	; 0xe862 <fileno>
    f3d8:	a8 01       	movw	r20, r16
    f3da:	be 01       	movw	r22, r28

    if(ret < 0)
    f3dc:	81 df       	rcall	.-254    	; 0xf2e0 <write>
    f3de:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f3e0:	02 c0       	rjmp	.+4      	; 0xf3e6 <fwrite+0x2a>
    f3e2:	cb 01       	movw	r24, r22

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f3e4:	02 c0       	rjmp	.+4      	; 0xf3ea <fwrite+0x2e>
    f3e6:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f3e8:	90 e0       	ldi	r25, 0x00	; 0
    f3ea:	df 91       	pop	r29
    f3ec:	cf 91       	pop	r28
    f3ee:	1f 91       	pop	r17
    f3f0:	0f 91       	pop	r16
    f3f2:	08 95       	ret

0000f3f4 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f3f4:	0f 93       	push	r16
    f3f6:	1f 93       	push	r17
    f3f8:	cf 93       	push	r28
    f3fa:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f3fc:	83 30       	cpi	r24, 0x03	; 3
    f3fe:	91 05       	cpc	r25, r1
    f400:	48 f4       	brcc	.+18     	; 0xf414 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f402:	89 e0       	ldi	r24, 0x09	; 9
    f404:	90 e0       	ldi	r25, 0x00	; 0
    f406:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f40a:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
        return(-1);
    f40e:	8f ef       	ldi	r24, 0xFF	; 255
    f410:	9f ef       	ldi	r25, 0xFF	; 255
    f412:	20 c0       	rjmp	.+64     	; 0xf454 <free_file_descriptor+0x60>
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f414:	ec 01       	movw	r28, r24
    f416:	41 da       	rcall	.-2942   	; 0xe89a <fileno_to_stream>
    if(stream == NULL)
    f418:	8c 01       	movw	r16, r24
    f41a:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f41c:	c1 f3       	breq	.-16     	; 0xf40e <free_file_descriptor+0x1a>
    f41e:	f8 01       	movw	r30, r16
    f420:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    f422:	95 85       	ldd	r25, Z+13	; 0x0d
    f424:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    f426:	11 f0       	breq	.+4      	; 0xf42c <free_file_descriptor+0x38>
    f428:	0e 94 28 25 	call	0x4a50	; 0x4a50 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f42c:	f8 01       	movw	r30, r16
    f42e:	80 81       	ld	r24, Z
    f430:	91 81       	ldd	r25, Z+1	; 0x01
    f432:	00 97       	sbiw	r24, 0x00	; 0
    f434:	21 f0       	breq	.+8      	; 0xf43e <free_file_descriptor+0x4a>
    f436:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    f438:	27 fd       	sbrc	r18, 7
    f43a:	0e 94 28 25 	call	0x4a50	; 0x4a50 <safefree>
    }

    __iob[fileno]  = NULL;
    f43e:	fe 01       	movw	r30, r28
    f440:	ee 0f       	add	r30, r30
    f442:	ff 1f       	adc	r31, r31
    f444:	e5 53       	subi	r30, 0x35	; 53
    f446:	f3 4e       	sbci	r31, 0xE3	; 227
    f448:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    f44a:	10 82       	st	Z, r1
    f44c:	c8 01       	movw	r24, r16
    f44e:	0e 94 28 25 	call	0x4a50	; 0x4a50 <safefree>
    return(fileno);
}
    f452:	ce 01       	movw	r24, r28
    f454:	df 91       	pop	r29
    f456:	cf 91       	pop	r28
    f458:	1f 91       	pop	r17
    f45a:	0f 91       	pop	r16
    f45c:	08 95       	ret

0000f45e <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f45e:	0f 93       	push	r16
    f460:	1f 93       	push	r17
    f462:	cf 93       	push	r28
    f464:	df 93       	push	r29
    f466:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f468:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f46c:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f470:	14 da       	rcall	.-3032   	; 0xe89a <fileno_to_stream>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f472:	89 2b       	or	r24, r25
    f474:	d9 f0       	breq	.+54     	; 0xf4ac <close+0x4e>
    if(fh == NULL)
    f476:	c8 01       	movw	r24, r16
    f478:	a3 dd       	rcall	.-1210   	; 0xefc0 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    f47a:	00 97       	sbiw	r24, 0x00	; 0
    f47c:	b9 f0       	breq	.+46     	; 0xf4ac <close+0x4e>
    free_file_descriptor(fileno);
    f47e:	0e 94 44 5c 	call	0xb888	; 0xb888 <f_close>
    f482:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    f484:	c8 01       	movw	r24, r16
    f486:	b6 df       	rcall	.-148    	; 0xf3f4 <free_file_descriptor>
    f488:	20 97       	sbiw	r28, 0x00	; 0
    f48a:	99 f0       	breq	.+38     	; 0xf4b2 <close+0x54>
    f48c:	c4 31       	cpi	r28, 0x14	; 20
    f48e:	d1 05       	cpc	r29, r1
    f490:	38 f4       	brcc	.+14     	; 0xf4a0 <close+0x42>
    f492:	cf 55       	subi	r28, 0x5F	; 95
    f494:	d4 4f       	sbci	r29, 0xF4	; 244
    f496:	88 81       	ld	r24, Y
    f498:	08 2e       	mov	r0, r24
    f49a:	00 0c       	add	r0, r0
    f49c:	99 0b       	sbc	r25, r25
    f49e:	02 c0       	rjmp	.+4      	; 0xf4a4 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    f4a0:	83 e2       	ldi	r24, 0x23	; 35
    f4a2:	90 e0       	ldi	r25, 0x00	; 0
    f4a4:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
        return(-1);
    f4a8:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f4ac:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    f4ae:	9f ef       	ldi	r25, 0xFF	; 255
    f4b0:	02 c0       	rjmp	.+4      	; 0xf4b6 <close+0x58>
}
    f4b2:	80 e0       	ldi	r24, 0x00	; 0
    f4b4:	90 e0       	ldi	r25, 0x00	; 0
    f4b6:	df 91       	pop	r29
    f4b8:	cf 91       	pop	r28
    f4ba:	1f 91       	pop	r17
    f4bc:	0f 91       	pop	r16
    f4be:	08 95       	ret

0000f4c0 <fclose>:
    f4c0:	d0 d9       	rcall	.-3168   	; 0xe862 <fileno>
    f4c2:	97 fd       	sbrc	r25, 7
    f4c4:	02 c0       	rjmp	.+4      	; 0xf4ca <fclose+0xa>
    f4c6:	cb cf       	rjmp	.-106    	; 0xf45e <close>
    f4c8:	08 95       	ret
    f4ca:	8f ef       	ldi	r24, 0xFF	; 255
    f4cc:	9f ef       	ldi	r25, 0xFF	; 255
    f4ce:	08 95       	ret

0000f4d0 <new_file_descriptor>:
    f4d0:	0f 93       	push	r16
    f4d2:	1f 93       	push	r17
    f4d4:	cf 93       	push	r28
    f4d6:	df 93       	push	r29
    f4d8:	eb ec       	ldi	r30, 0xCB	; 203
    f4da:	fc e1       	ldi	r31, 0x1C	; 28
    f4dc:	c0 e0       	ldi	r28, 0x00	; 0
    f4de:	d0 e0       	ldi	r29, 0x00	; 0
    f4e0:	21 96       	adiw	r28, 0x01	; 1
    f4e2:	c0 31       	cpi	r28, 0x10	; 16
    f4e4:	d1 05       	cpc	r29, r1
    f4e6:	49 f0       	breq	.+18     	; 0xf4fa <new_file_descriptor+0x2a>
    f4e8:	c3 30       	cpi	r28, 0x03	; 3
    f4ea:	d1 05       	cpc	r29, r1
    f4ec:	24 f0       	brlt	.+8      	; 0xf4f6 <new_file_descriptor+0x26>
    f4ee:	82 81       	ldd	r24, Z+2	; 0x02
    f4f0:	93 81       	ldd	r25, Z+3	; 0x03
    f4f2:	89 2b       	or	r24, r25
    f4f4:	59 f0       	breq	.+22     	; 0xf50c <new_file_descriptor+0x3c>
    f4f6:	32 96       	adiw	r30, 0x02	; 2
    f4f8:	f3 cf       	rjmp	.-26     	; 0xf4e0 <new_file_descriptor+0x10>
    f4fa:	87 e1       	ldi	r24, 0x17	; 23
    f4fc:	90 e0       	ldi	r25, 0x00	; 0
    f4fe:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f502:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f506:	8f ef       	ldi	r24, 0xFF	; 255
    f508:	9f ef       	ldi	r25, 0xFF	; 255
    f50a:	22 c0       	rjmp	.+68     	; 0xf550 <new_file_descriptor+0x80>
    f50c:	61 e0       	ldi	r22, 0x01	; 1
    f50e:	70 e0       	ldi	r23, 0x00	; 0
    f510:	8e e0       	ldi	r24, 0x0E	; 14
    f512:	90 e0       	ldi	r25, 0x00	; 0
    f514:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
    f518:	8c 01       	movw	r16, r24
    f51a:	89 2b       	or	r24, r25
    f51c:	59 f0       	breq	.+22     	; 0xf534 <new_file_descriptor+0x64>
    f51e:	61 e0       	ldi	r22, 0x01	; 1
    f520:	70 e0       	ldi	r23, 0x00	; 0
    f522:	84 e2       	ldi	r24, 0x24	; 36
    f524:	92 e0       	ldi	r25, 0x02	; 2
    f526:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
    f52a:	00 97       	sbiw	r24, 0x00	; 0
    f52c:	31 f4       	brne	.+12     	; 0xf53a <new_file_descriptor+0x6a>
    f52e:	c8 01       	movw	r24, r16
    f530:	0e 94 28 25 	call	0x4a50	; 0x4a50 <safefree>
    f534:	8c e0       	ldi	r24, 0x0C	; 12
    f536:	90 e0       	ldi	r25, 0x00	; 0
    f538:	e2 cf       	rjmp	.-60     	; 0xf4fe <new_file_descriptor+0x2e>
    f53a:	fe 01       	movw	r30, r28
    f53c:	ee 0f       	add	r30, r30
    f53e:	ff 1f       	adc	r31, r31
    f540:	e5 53       	subi	r30, 0x35	; 53
    f542:	f3 4e       	sbci	r31, 0xE3	; 227
    f544:	11 83       	std	Z+1, r17	; 0x01
    f546:	00 83       	st	Z, r16
    f548:	f8 01       	movw	r30, r16
    f54a:	95 87       	std	Z+13, r25	; 0x0d
    f54c:	84 87       	std	Z+12, r24	; 0x0c
    f54e:	ce 01       	movw	r24, r28
    f550:	df 91       	pop	r29
    f552:	cf 91       	pop	r28
    f554:	1f 91       	pop	r17
    f556:	0f 91       	pop	r16
    f558:	08 95       	ret

0000f55a <open>:
    f55a:	a0 e0       	ldi	r26, 0x00	; 0
    f55c:	b0 e0       	ldi	r27, 0x00	; 0
    f55e:	e3 eb       	ldi	r30, 0xB3	; 179
    f560:	fa e7       	ldi	r31, 0x7A	; 122
    f562:	0c 94 c6 df 	jmp	0x1bf8c	; 0x1bf8c <__prologue_saves__+0x8>
    f566:	5c 01       	movw	r10, r24
    f568:	6b 01       	movw	r12, r22
    f56a:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f56e:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f572:	7b 01       	movw	r14, r22
    f574:	83 e0       	ldi	r24, 0x03	; 3
    f576:	e8 22       	and	r14, r24
    f578:	ff 24       	eor	r15, r15
    f57a:	e2 e0       	ldi	r30, 0x02	; 2
    f57c:	ee 16       	cp	r14, r30
    f57e:	f1 04       	cpc	r15, r1
    f580:	31 f0       	breq	.+12     	; 0xf58e <open+0x34>
    f582:	e1 14       	cp	r14, r1
    f584:	f1 04       	cpc	r15, r1
    f586:	31 f0       	breq	.+12     	; 0xf594 <open+0x3a>
    f588:	02 e0       	ldi	r16, 0x02	; 2
    f58a:	10 e0       	ldi	r17, 0x00	; 0
    f58c:	05 c0       	rjmp	.+10     	; 0xf598 <open+0x3e>
    f58e:	03 e0       	ldi	r16, 0x03	; 3
    f590:	10 e0       	ldi	r17, 0x00	; 0
    f592:	02 c0       	rjmp	.+4      	; 0xf598 <open+0x3e>
    f594:	01 e0       	ldi	r16, 0x01	; 1
    f596:	10 e0       	ldi	r17, 0x00	; 0
    f598:	c6 fe       	sbrs	r12, 6
    f59a:	05 c0       	rjmp	.+10     	; 0xf5a6 <open+0x4c>
    f59c:	d1 fe       	sbrs	r13, 1
    f59e:	02 c0       	rjmp	.+4      	; 0xf5a4 <open+0x4a>
    f5a0:	08 60       	ori	r16, 0x08	; 8
    f5a2:	01 c0       	rjmp	.+2      	; 0xf5a6 <open+0x4c>
    f5a4:	00 61       	ori	r16, 0x10	; 16
    f5a6:	94 df       	rcall	.-216    	; 0xf4d0 <new_file_descriptor>
    f5a8:	3c 01       	movw	r6, r24
    f5aa:	77 d9       	rcall	.-3346   	; 0xe89a <fileno_to_stream>
    f5ac:	ec 01       	movw	r28, r24
    f5ae:	c3 01       	movw	r24, r6
    f5b0:	20 97       	sbiw	r28, 0x00	; 0
    f5b2:	09 f4       	brne	.+2      	; 0xf5b6 <open+0x5c>
    f5b4:	48 c0       	rjmp	.+144    	; 0xf646 <open+0xec>
    f5b6:	04 dd       	rcall	.-1528   	; 0xefc0 <fileno_to_fatfs>
    f5b8:	4c 01       	movw	r8, r24
    f5ba:	00 97       	sbiw	r24, 0x00	; 0
    f5bc:	59 f4       	brne	.+22     	; 0xf5d4 <open+0x7a>
    f5be:	c3 01       	movw	r24, r6
    f5c0:	19 df       	rcall	.-462    	; 0xf3f4 <free_file_descriptor>
    f5c2:	89 e0       	ldi	r24, 0x09	; 9
    f5c4:	90 e0       	ldi	r25, 0x00	; 0
    f5c6:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f5ca:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f5ce:	8f ef       	ldi	r24, 0xFF	; 255
    f5d0:	9f ef       	ldi	r25, 0xFF	; 255
    f5d2:	5d c0       	rjmp	.+186    	; 0xf68e <open+0x134>
    f5d4:	40 2f       	mov	r20, r16
    f5d6:	b5 01       	movw	r22, r10
    f5d8:	0e 94 2a 57 	call	0xae54	; 0xae54 <f_open>
    f5dc:	00 97       	sbiw	r24, 0x00	; 0
    f5de:	91 f0       	breq	.+36     	; 0xf604 <open+0xaa>
    f5e0:	84 31       	cpi	r24, 0x14	; 20
    f5e2:	91 05       	cpc	r25, r1
    f5e4:	40 f4       	brcc	.+16     	; 0xf5f6 <open+0x9c>
    f5e6:	fc 01       	movw	r30, r24
    f5e8:	ef 55       	subi	r30, 0x5F	; 95
    f5ea:	f4 4f       	sbci	r31, 0xF4	; 244
    f5ec:	80 81       	ld	r24, Z
    f5ee:	08 2e       	mov	r0, r24
    f5f0:	00 0c       	add	r0, r0
    f5f2:	99 0b       	sbc	r25, r25
    f5f4:	02 c0       	rjmp	.+4      	; 0xf5fa <open+0xa0>
    f5f6:	83 e2       	ldi	r24, 0x23	; 35
    f5f8:	90 e0       	ldi	r25, 0x00	; 0
    f5fa:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f5fe:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f602:	20 c0       	rjmp	.+64     	; 0xf644 <open+0xea>
    f604:	d2 fe       	sbrs	r13, 2
    f606:	21 c0       	rjmp	.+66     	; 0xf64a <open+0xf0>
    f608:	f4 01       	movw	r30, r8
    f60a:	42 85       	ldd	r20, Z+10	; 0x0a
    f60c:	53 85       	ldd	r21, Z+11	; 0x0b
    f60e:	64 85       	ldd	r22, Z+12	; 0x0c
    f610:	75 85       	ldd	r23, Z+13	; 0x0d
    f612:	c4 01       	movw	r24, r8
    f614:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <f_lseek>
    f618:	00 97       	sbiw	r24, 0x00	; 0
    f61a:	b9 f0       	breq	.+46     	; 0xf64a <open+0xf0>
    f61c:	84 31       	cpi	r24, 0x14	; 20
    f61e:	91 05       	cpc	r25, r1
    f620:	40 f4       	brcc	.+16     	; 0xf632 <open+0xd8>
    f622:	fc 01       	movw	r30, r24
    f624:	ef 55       	subi	r30, 0x5F	; 95
    f626:	f4 4f       	sbci	r31, 0xF4	; 244
    f628:	80 81       	ld	r24, Z
    f62a:	08 2e       	mov	r0, r24
    f62c:	00 0c       	add	r0, r0
    f62e:	99 0b       	sbc	r25, r25
    f630:	02 c0       	rjmp	.+4      	; 0xf636 <open+0xdc>
    f632:	83 e2       	ldi	r24, 0x23	; 35
    f634:	90 e0       	ldi	r25, 0x00	; 0
    f636:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f63a:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f63e:	c4 01       	movw	r24, r8
    f640:	0e 94 44 5c 	call	0xb888	; 0xb888 <f_close>
    f644:	c3 01       	movw	r24, r6
    f646:	d6 de       	rcall	.-596    	; 0xf3f4 <free_file_descriptor>
    f648:	c2 cf       	rjmp	.-124    	; 0xf5ce <open+0x74>
    f64a:	f2 e0       	ldi	r31, 0x02	; 2
    f64c:	ef 16       	cp	r14, r31
    f64e:	f1 04       	cpc	r15, r1
    f650:	51 f4       	brne	.+20     	; 0xf666 <open+0x10c>
    f652:	82 ec       	ldi	r24, 0xC2	; 194
    f654:	92 e7       	ldi	r25, 0x72	; 114
    f656:	99 87       	std	Y+9, r25	; 0x09
    f658:	88 87       	std	Y+8, r24	; 0x08
    f65a:	8f e3       	ldi	r24, 0x3F	; 63
    f65c:	92 e7       	ldi	r25, 0x72	; 114
    f65e:	9b 87       	std	Y+11, r25	; 0x0b
    f660:	8a 87       	std	Y+10, r24	; 0x0a
    f662:	83 e0       	ldi	r24, 0x03	; 3
    f664:	12 c0       	rjmp	.+36     	; 0xf68a <open+0x130>
    f666:	e1 14       	cp	r14, r1
    f668:	f1 04       	cpc	r15, r1
    f66a:	41 f4       	brne	.+16     	; 0xf67c <open+0x122>
    f66c:	19 86       	std	Y+9, r1	; 0x09
    f66e:	18 86       	std	Y+8, r1	; 0x08
    f670:	8f e3       	ldi	r24, 0x3F	; 63
    f672:	92 e7       	ldi	r25, 0x72	; 114
    f674:	9b 87       	std	Y+11, r25	; 0x0b
    f676:	8a 87       	std	Y+10, r24	; 0x0a
    f678:	81 e0       	ldi	r24, 0x01	; 1
    f67a:	07 c0       	rjmp	.+14     	; 0xf68a <open+0x130>
    f67c:	82 ec       	ldi	r24, 0xC2	; 194
    f67e:	92 e7       	ldi	r25, 0x72	; 114
    f680:	99 87       	std	Y+9, r25	; 0x09
    f682:	88 87       	std	Y+8, r24	; 0x08
    f684:	1b 86       	std	Y+11, r1	; 0x0b
    f686:	1a 86       	std	Y+10, r1	; 0x0a
    f688:	82 e0       	ldi	r24, 0x02	; 2
    f68a:	8b 83       	std	Y+3, r24	; 0x03
    f68c:	c3 01       	movw	r24, r6
    f68e:	cd b7       	in	r28, 0x3d	; 61
    f690:	de b7       	in	r29, 0x3e	; 62
    f692:	ee e0       	ldi	r30, 0x0E	; 14
    f694:	0c 94 e2 df 	jmp	0x1bfc4	; 0x1bfc4 <__epilogue_restores__+0x8>

0000f698 <posix_fopen_modes_to_open>:
    f698:	cf 93       	push	r28
    f69a:	df 93       	push	r29
    f69c:	ec 01       	movw	r28, r24
    f69e:	6d e3       	ldi	r22, 0x3D	; 61
    f6a0:	73 e0       	ldi	r23, 0x03	; 3
    f6a2:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f6a6:	00 97       	sbiw	r24, 0x00	; 0
    f6a8:	09 f4       	brne	.+2      	; 0xf6ac <posix_fopen_modes_to_open+0x14>
    f6aa:	5d c0       	rjmp	.+186    	; 0xf766 <posix_fopen_modes_to_open+0xce>
    f6ac:	69 ef       	ldi	r22, 0xF9	; 249
    f6ae:	78 e0       	ldi	r23, 0x08	; 8
    f6b0:	ce 01       	movw	r24, r28
    f6b2:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f6b6:	00 97       	sbiw	r24, 0x00	; 0
    f6b8:	09 f4       	brne	.+2      	; 0xf6bc <posix_fopen_modes_to_open+0x24>
    f6ba:	55 c0       	rjmp	.+170    	; 0xf766 <posix_fopen_modes_to_open+0xce>
    f6bc:	6c ef       	ldi	r22, 0xFC	; 252
    f6be:	78 e0       	ldi	r23, 0x08	; 8
    f6c0:	ce 01       	movw	r24, r28
    f6c2:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f6c6:	89 2b       	or	r24, r25
    f6c8:	09 f4       	brne	.+2      	; 0xf6cc <posix_fopen_modes_to_open+0x34>
    f6ca:	42 c0       	rjmp	.+132    	; 0xf750 <posix_fopen_modes_to_open+0xb8>
    f6cc:	6f ef       	ldi	r22, 0xFF	; 255
    f6ce:	78 e0       	ldi	r23, 0x08	; 8
    f6d0:	ce 01       	movw	r24, r28
    f6d2:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f6d6:	89 2b       	or	r24, r25
    f6d8:	d9 f1       	breq	.+118    	; 0xf750 <posix_fopen_modes_to_open+0xb8>
    f6da:	63 e0       	ldi	r22, 0x03	; 3
    f6dc:	79 e0       	ldi	r23, 0x09	; 9
    f6de:	ce 01       	movw	r24, r28
    f6e0:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f6e4:	89 2b       	or	r24, r25
    f6e6:	a1 f1       	breq	.+104    	; 0xf750 <posix_fopen_modes_to_open+0xb8>
    f6e8:	68 eb       	ldi	r22, 0xB8	; 184
    f6ea:	7a e0       	ldi	r23, 0x0A	; 10
    f6ec:	ce 01       	movw	r24, r28
    f6ee:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f6f2:	89 2b       	or	r24, r25
    f6f4:	81 f1       	breq	.+96     	; 0xf756 <posix_fopen_modes_to_open+0xbe>
    f6f6:	67 e0       	ldi	r22, 0x07	; 7
    f6f8:	79 e0       	ldi	r23, 0x09	; 9
    f6fa:	ce 01       	movw	r24, r28
    f6fc:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f700:	89 2b       	or	r24, r25
    f702:	49 f1       	breq	.+82     	; 0xf756 <posix_fopen_modes_to_open+0xbe>
    f704:	6a e0       	ldi	r22, 0x0A	; 10
    f706:	79 e0       	ldi	r23, 0x09	; 9
    f708:	ce 01       	movw	r24, r28
    f70a:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f70e:	89 2b       	or	r24, r25
    f710:	29 f1       	breq	.+74     	; 0xf75c <posix_fopen_modes_to_open+0xc4>
    f712:	6d e0       	ldi	r22, 0x0D	; 13
    f714:	79 e0       	ldi	r23, 0x09	; 9
    f716:	ce 01       	movw	r24, r28
    f718:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f71c:	89 2b       	or	r24, r25
    f71e:	f1 f0       	breq	.+60     	; 0xf75c <posix_fopen_modes_to_open+0xc4>
    f720:	61 e1       	ldi	r22, 0x11	; 17
    f722:	79 e0       	ldi	r23, 0x09	; 9
    f724:	ce 01       	movw	r24, r28
    f726:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f72a:	89 2b       	or	r24, r25
    f72c:	b9 f0       	breq	.+46     	; 0xf75c <posix_fopen_modes_to_open+0xc4>
    f72e:	64 e2       	ldi	r22, 0x24	; 36
    f730:	73 e1       	ldi	r23, 0x13	; 19
    f732:	ce 01       	movw	r24, r28
    f734:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f738:	89 2b       	or	r24, r25
    f73a:	99 f0       	breq	.+38     	; 0xf762 <posix_fopen_modes_to_open+0xca>
    f73c:	65 e1       	ldi	r22, 0x15	; 21
    f73e:	79 e0       	ldi	r23, 0x09	; 9
    f740:	ce 01       	movw	r24, r28
    f742:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcmp>
    f746:	89 2b       	or	r24, r25
    f748:	61 f0       	breq	.+24     	; 0xf762 <posix_fopen_modes_to_open+0xca>
    f74a:	8f ef       	ldi	r24, 0xFF	; 255
    f74c:	9f ef       	ldi	r25, 0xFF	; 255
    f74e:	0b c0       	rjmp	.+22     	; 0xf766 <posix_fopen_modes_to_open+0xce>
    f750:	82 e0       	ldi	r24, 0x02	; 2
    f752:	92 e0       	ldi	r25, 0x02	; 2
    f754:	08 c0       	rjmp	.+16     	; 0xf766 <posix_fopen_modes_to_open+0xce>
    f756:	81 e4       	ldi	r24, 0x41	; 65
    f758:	92 e0       	ldi	r25, 0x02	; 2
    f75a:	05 c0       	rjmp	.+10     	; 0xf766 <posix_fopen_modes_to_open+0xce>
    f75c:	82 e4       	ldi	r24, 0x42	; 66
    f75e:	92 e0       	ldi	r25, 0x02	; 2
    f760:	02 c0       	rjmp	.+4      	; 0xf766 <posix_fopen_modes_to_open+0xce>
    f762:	81 e4       	ldi	r24, 0x41	; 65
    f764:	94 e0       	ldi	r25, 0x04	; 4
    f766:	df 91       	pop	r29
    f768:	cf 91       	pop	r28
    f76a:	08 95       	ret

0000f76c <fopen>:
    f76c:	cf 93       	push	r28
    f76e:	df 93       	push	r29
    f770:	ec 01       	movw	r28, r24
    f772:	cb 01       	movw	r24, r22
    f774:	91 df       	rcall	.-222    	; 0xf698 <posix_fopen_modes_to_open>
    f776:	bc 01       	movw	r22, r24
    f778:	ce 01       	movw	r24, r28
    f77a:	ef de       	rcall	.-546    	; 0xf55a <open>
    f77c:	8e d8       	rcall	.-3812   	; 0xe89a <fileno_to_stream>
    f77e:	df 91       	pop	r29
    f780:	cf 91       	pop	r28
    f782:	08 95       	ret

0000f784 <fprintf>:
    f784:	a8 e0       	ldi	r26, 0x08	; 8
    f786:	b0 e0       	ldi	r27, 0x00	; 0
    f788:	e8 ec       	ldi	r30, 0xC8	; 200
    f78a:	fb e7       	ldi	r31, 0x7B	; 123
    f78c:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
    f790:	85 eb       	ldi	r24, 0xB5	; 181
    f792:	93 e7       	ldi	r25, 0x73	; 115
    f794:	9a 83       	std	Y+2, r25	; 0x02
    f796:	89 83       	std	Y+1, r24	; 0x01
    f798:	18 86       	std	Y+8, r1	; 0x08
    f79a:	1f 82       	std	Y+7, r1	; 0x07
    f79c:	8d 85       	ldd	r24, Y+13	; 0x0d
    f79e:	9e 85       	ldd	r25, Y+14	; 0x0e
    f7a0:	9c 83       	std	Y+4, r25	; 0x04
    f7a2:	8b 83       	std	Y+3, r24	; 0x03
    f7a4:	4f 85       	ldd	r20, Y+15	; 0x0f
    f7a6:	58 89       	ldd	r21, Y+16	; 0x10
    f7a8:	60 e8       	ldi	r22, 0x80	; 128
    f7aa:	9e 01       	movw	r18, r28
    f7ac:	2f 5e       	subi	r18, 0xEF	; 239
    f7ae:	3f 4f       	sbci	r19, 0xFF	; 255
    f7b0:	ce 01       	movw	r24, r28
    f7b2:	01 96       	adiw	r24, 0x01	; 1
    f7b4:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <_printf_fn>
    f7b8:	8f 81       	ldd	r24, Y+7	; 0x07
    f7ba:	98 85       	ldd	r25, Y+8	; 0x08
    f7bc:	28 96       	adiw	r28, 0x08	; 8
    f7be:	e2 e0       	ldi	r30, 0x02	; 2
    f7c0:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000f7c4 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    f7c4:	cf 93       	push	r28
    f7c6:	df 93       	push	r29
    f7c8:	00 d0       	rcall	.+0      	; 0xf7ca <posix_help+0x6>
    f7ca:	1f 92       	push	r1
    f7cc:	ec 01       	movw	r28, r24
    f7ce:	8a e5       	ldi	r24, 0x5A	; 90
    f7d0:	9e e0       	ldi	r25, 0x0E	; 14
    f7d2:	a0 e0       	ldi	r26, 0x00	; 0
    f7d4:	ed b7       	in	r30, 0x3d	; 61
    f7d6:	fe b7       	in	r31, 0x3e	; 62
    f7d8:	81 83       	std	Z+1, r24	; 0x01
    f7da:	92 83       	std	Z+2, r25	; 0x02
    f7dc:	a3 83       	std	Z+3, r26	; 0x03
    f7de:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f7e2:	cd 2b       	or	r28, r29
    f7e4:	51 f0       	breq	.+20     	; 0xf7fa <posix_help+0x36>
    f7e6:	84 e9       	ldi	r24, 0x94	; 148
    f7e8:	9d e0       	ldi	r25, 0x0D	; 13
    f7ea:	a0 e0       	ldi	r26, 0x00	; 0
    f7ec:	ed b7       	in	r30, 0x3d	; 61
    f7ee:	fe b7       	in	r31, 0x3e	; 62
    f7f0:	81 83       	std	Z+1, r24	; 0x01
    f7f2:	92 83       	std	Z+2, r25	; 0x02
    f7f4:	a3 83       	std	Z+3, r26	; 0x03
    f7f6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f7fa:	cd b7       	in	r28, 0x3d	; 61
    f7fc:	de b7       	in	r29, 0x3e	; 62
    f7fe:	23 96       	adiw	r28, 0x03	; 3
    f800:	e2 e0       	ldi	r30, 0x02	; 2
    f802:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000f806 <copy>:
    f806:	4f 92       	push	r4
    f808:	5f 92       	push	r5
    f80a:	6f 92       	push	r6
    f80c:	8f 92       	push	r8
    f80e:	9f 92       	push	r9
    f810:	af 92       	push	r10
    f812:	bf 92       	push	r11
    f814:	cf 92       	push	r12
    f816:	df 92       	push	r13
    f818:	ef 92       	push	r14
    f81a:	ff 92       	push	r15
    f81c:	0f 93       	push	r16
    f81e:	1f 93       	push	r17
    f820:	cf 93       	push	r28
    f822:	df 93       	push	r29
    f824:	ad b7       	in	r26, 0x3d	; 61
    f826:	be b7       	in	r27, 0x3e	; 62
    f828:	17 97       	sbiw	r26, 0x07	; 7
    f82a:	0f b6       	in	r0, 0x3f	; 63
    f82c:	f8 94       	cli
    f82e:	be bf       	out	0x3e, r27	; 62
    f830:	0f be       	out	0x3f, r0	; 63
    f832:	ad bf       	out	0x3d, r26	; 61
    f834:	8c 01       	movw	r16, r24
    f836:	eb 01       	movw	r28, r22
    f838:	ed b7       	in	r30, 0x3d	; 61
    f83a:	fe b7       	in	r31, 0x3e	; 62
    f83c:	95 83       	std	Z+5, r25	; 0x05
    f83e:	84 83       	std	Z+4, r24	; 0x04
    f840:	85 e1       	ldi	r24, 0x15	; 21
    f842:	9d e0       	ldi	r25, 0x0D	; 13
    f844:	a0 e0       	ldi	r26, 0x00	; 0
    f846:	81 83       	std	Z+1, r24	; 0x01
    f848:	92 83       	std	Z+2, r25	; 0x02
    f84a:	a3 83       	std	Z+3, r26	; 0x03
    f84c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f850:	69 ef       	ldi	r22, 0xF9	; 249
    f852:	78 e0       	ldi	r23, 0x08	; 8
    f854:	c8 01       	movw	r24, r16
    f856:	8a df       	rcall	.-236    	; 0xf76c <fopen>
    f858:	7c 01       	movw	r14, r24
    f85a:	ed b7       	in	r30, 0x3d	; 61
    f85c:	fe b7       	in	r31, 0x3e	; 62
    f85e:	89 2b       	or	r24, r25
    f860:	59 f4       	brne	.+22     	; 0xf878 <copy+0x72>
    f862:	15 83       	std	Z+5, r17	; 0x05
    f864:	04 83       	std	Z+4, r16	; 0x04
    f866:	85 e0       	ldi	r24, 0x05	; 5
    f868:	9d e0       	ldi	r25, 0x0D	; 13
    f86a:	a0 e0       	ldi	r26, 0x00	; 0
    f86c:	81 83       	std	Z+1, r24	; 0x01
    f86e:	92 83       	std	Z+2, r25	; 0x02
    f870:	a3 83       	std	Z+3, r26	; 0x03
    f872:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f876:	20 c0       	rjmp	.+64     	; 0xf8b8 <copy+0xb2>
    f878:	d5 83       	std	Z+5, r29	; 0x05
    f87a:	c4 83       	std	Z+4, r28	; 0x04
    f87c:	88 ef       	ldi	r24, 0xF8	; 248
    f87e:	9c e0       	ldi	r25, 0x0C	; 12
    f880:	a0 e0       	ldi	r26, 0x00	; 0
    f882:	81 83       	std	Z+1, r24	; 0x01
    f884:	92 83       	std	Z+2, r25	; 0x02
    f886:	a3 83       	std	Z+3, r26	; 0x03
    f888:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f88c:	67 e0       	ldi	r22, 0x07	; 7
    f88e:	79 e0       	ldi	r23, 0x09	; 9
    f890:	ce 01       	movw	r24, r28
    f892:	6c df       	rcall	.-296    	; 0xf76c <fopen>
    f894:	8c 01       	movw	r16, r24
    f896:	89 2b       	or	r24, r25
    f898:	a1 f4       	brne	.+40     	; 0xf8c2 <copy+0xbc>
    f89a:	ed b7       	in	r30, 0x3d	; 61
    f89c:	fe b7       	in	r31, 0x3e	; 62
    f89e:	d5 83       	std	Z+5, r29	; 0x05
    f8a0:	c4 83       	std	Z+4, r28	; 0x04
    f8a2:	88 ee       	ldi	r24, 0xE8	; 232
    f8a4:	9c e0       	ldi	r25, 0x0C	; 12
    f8a6:	a0 e0       	ldi	r26, 0x00	; 0
    f8a8:	81 83       	std	Z+1, r24	; 0x01
    f8aa:	92 83       	std	Z+2, r25	; 0x02
    f8ac:	a3 83       	std	Z+3, r26	; 0x03
    f8ae:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f8b2:	80 e0       	ldi	r24, 0x00	; 0
    f8b4:	90 e0       	ldi	r25, 0x00	; 0
    f8b6:	04 de       	rcall	.-1016   	; 0xf4c0 <fclose>
    f8b8:	60 e0       	ldi	r22, 0x00	; 0
    f8ba:	70 e0       	ldi	r23, 0x00	; 0
    f8bc:	80 e0       	ldi	r24, 0x00	; 0
    f8be:	90 e0       	ldi	r25, 0x00	; 0
    f8c0:	68 c0       	rjmp	.+208    	; 0xf992 <copy+0x18c>
    f8c2:	61 e0       	ldi	r22, 0x01	; 1
    f8c4:	70 e0       	ldi	r23, 0x00	; 0
    f8c6:	80 e0       	ldi	r24, 0x00	; 0
    f8c8:	92 e0       	ldi	r25, 0x02	; 2
    f8ca:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
    f8ce:	6c 01       	movw	r12, r24
    f8d0:	89 2b       	or	r24, r25
    f8d2:	21 f4       	brne	.+8      	; 0xf8dc <copy+0xd6>
    f8d4:	c7 01       	movw	r24, r14
    f8d6:	f4 dd       	rcall	.-1048   	; 0xf4c0 <fclose>
    f8d8:	c8 01       	movw	r24, r16
    f8da:	ed cf       	rjmp	.-38     	; 0xf8b6 <copy+0xb0>
    f8dc:	8b ed       	ldi	r24, 0xDB	; 219
    f8de:	9c e0       	ldi	r25, 0x0C	; 12
    f8e0:	a0 e0       	ldi	r26, 0x00	; 0
    f8e2:	ed b7       	in	r30, 0x3d	; 61
    f8e4:	fe b7       	in	r31, 0x3e	; 62
    f8e6:	81 83       	std	Z+1, r24	; 0x01
    f8e8:	92 83       	std	Z+2, r25	; 0x02
    f8ea:	a3 83       	std	Z+3, r26	; 0x03
    f8ec:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f8f0:	81 2c       	mov	r8, r1
    f8f2:	91 2c       	mov	r9, r1
    f8f4:	54 01       	movw	r10, r8
    f8f6:	8f eb       	ldi	r24, 0xBF	; 191
    f8f8:	9c e0       	ldi	r25, 0x0C	; 12
    f8fa:	2c 01       	movw	r4, r24
    f8fc:	61 2c       	mov	r6, r1
    f8fe:	97 01       	movw	r18, r14
    f900:	40 e0       	ldi	r20, 0x00	; 0
    f902:	52 e0       	ldi	r21, 0x02	; 2
    f904:	61 e0       	ldi	r22, 0x01	; 1
    f906:	70 e0       	ldi	r23, 0x00	; 0
    f908:	c6 01       	movw	r24, r12
    f90a:	86 dc       	rcall	.-1780   	; 0xf218 <fread>
    f90c:	ec 01       	movw	r28, r24
    f90e:	18 16       	cp	r1, r24
    f910:	19 06       	cpc	r1, r25
    f912:	44 f5       	brge	.+80     	; 0xf964 <copy+0x15e>
    f914:	98 01       	movw	r18, r16
    f916:	ae 01       	movw	r20, r28
    f918:	61 e0       	ldi	r22, 0x01	; 1
    f91a:	70 e0       	ldi	r23, 0x00	; 0
    f91c:	c6 01       	movw	r24, r12
    f91e:	4e dd       	rcall	.-1380   	; 0xf3bc <fwrite>
    f920:	8c 17       	cp	r24, r28
    f922:	9d 07       	cpc	r25, r29
    f924:	5c f4       	brge	.+22     	; 0xf93c <copy+0x136>
    f926:	8e ec       	ldi	r24, 0xCE	; 206
    f928:	9c e0       	ldi	r25, 0x0C	; 12
    f92a:	a0 e0       	ldi	r26, 0x00	; 0
    f92c:	ed b7       	in	r30, 0x3d	; 61
    f92e:	fe b7       	in	r31, 0x3e	; 62
    f930:	81 83       	std	Z+1, r24	; 0x01
    f932:	92 83       	std	Z+2, r25	; 0x02
    f934:	a3 83       	std	Z+3, r26	; 0x03
    f936:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f93a:	14 c0       	rjmp	.+40     	; 0xf964 <copy+0x15e>
    f93c:	ce 01       	movw	r24, r28
    f93e:	dd 0f       	add	r29, r29
    f940:	aa 0b       	sbc	r26, r26
    f942:	bb 0b       	sbc	r27, r27
    f944:	88 0e       	add	r8, r24
    f946:	99 1e       	adc	r9, r25
    f948:	aa 1e       	adc	r10, r26
    f94a:	bb 1e       	adc	r11, r27
    f94c:	ed b7       	in	r30, 0x3d	; 61
    f94e:	fe b7       	in	r31, 0x3e	; 62
    f950:	84 82       	std	Z+4, r8	; 0x04
    f952:	95 82       	std	Z+5, r9	; 0x05
    f954:	a6 82       	std	Z+6, r10	; 0x06
    f956:	b7 82       	std	Z+7, r11	; 0x07
    f958:	41 82       	std	Z+1, r4	; 0x01
    f95a:	52 82       	std	Z+2, r5	; 0x02
    f95c:	63 82       	std	Z+3, r6	; 0x03
    f95e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f962:	cd cf       	rjmp	.-102    	; 0xf8fe <copy+0xf8>
    f964:	ed b7       	in	r30, 0x3d	; 61
    f966:	fe b7       	in	r31, 0x3e	; 62
    f968:	84 82       	std	Z+4, r8	; 0x04
    f96a:	95 82       	std	Z+5, r9	; 0x05
    f96c:	a6 82       	std	Z+6, r10	; 0x06
    f96e:	b7 82       	std	Z+7, r11	; 0x07
    f970:	8c ea       	ldi	r24, 0xAC	; 172
    f972:	9c e0       	ldi	r25, 0x0C	; 12
    f974:	a0 e0       	ldi	r26, 0x00	; 0
    f976:	81 83       	std	Z+1, r24	; 0x01
    f978:	92 83       	std	Z+2, r25	; 0x02
    f97a:	a3 83       	std	Z+3, r26	; 0x03
    f97c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    f980:	c6 01       	movw	r24, r12
    f982:	0e 94 28 25 	call	0x4a50	; 0x4a50 <safefree>
    f986:	c7 01       	movw	r24, r14
    f988:	9b dd       	rcall	.-1226   	; 0xf4c0 <fclose>
    f98a:	c8 01       	movw	r24, r16
    f98c:	99 dd       	rcall	.-1230   	; 0xf4c0 <fclose>
    f98e:	b4 01       	movw	r22, r8
    f990:	c5 01       	movw	r24, r10
    f992:	ad b7       	in	r26, 0x3d	; 61
    f994:	be b7       	in	r27, 0x3e	; 62
    f996:	17 96       	adiw	r26, 0x07	; 7
    f998:	0f b6       	in	r0, 0x3f	; 63
    f99a:	f8 94       	cli
    f99c:	be bf       	out	0x3e, r27	; 62
    f99e:	0f be       	out	0x3f, r0	; 63
    f9a0:	ad bf       	out	0x3d, r26	; 61
    f9a2:	df 91       	pop	r29
    f9a4:	cf 91       	pop	r28
    f9a6:	1f 91       	pop	r17
    f9a8:	0f 91       	pop	r16
    f9aa:	ff 90       	pop	r15
    f9ac:	ef 90       	pop	r14
    f9ae:	df 90       	pop	r13
    f9b0:	cf 90       	pop	r12
    f9b2:	bf 90       	pop	r11
    f9b4:	af 90       	pop	r10
    f9b6:	9f 90       	pop	r9
    f9b8:	8f 90       	pop	r8
    f9ba:	6f 90       	pop	r6
    f9bc:	5f 90       	pop	r5
    f9be:	4f 90       	pop	r4
    f9c0:	08 95       	ret

0000f9c2 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    f9c2:	cf 93       	push	r28
    f9c4:	df 93       	push	r29
    f9c6:	00 d0       	rcall	.+0      	; 0xf9c8 <testpage+0x6>
    f9c8:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    f9ca:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    f9ce:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    f9d2:	82 17       	cp	r24, r18
    f9d4:	93 07       	cpc	r25, r19
    f9d6:	3c f1       	brlt	.+78     	; 0xfa26 <testpage+0x64>
    {
        printf("More..");
    f9d8:	85 ea       	ldi	r24, 0xA5	; 165
    f9da:	9c e0       	ldi	r25, 0x0C	; 12
    f9dc:	a0 e0       	ldi	r26, 0x00	; 0
    f9de:	ed b7       	in	r30, 0x3d	; 61
    f9e0:	fe b7       	in	r31, 0x3e	; 62
    f9e2:	81 83       	std	Z+1, r24	; 0x01
    f9e4:	92 83       	std	Z+2, r25	; 0x02
    f9e6:	a3 83       	std	Z+3, r26	; 0x03
    f9e8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    f9ec:	0e 94 c2 73 	call	0xe784	; 0xe784 <getchar>
    f9f0:	ec 01       	movw	r28, r24
        printf("\r");
    f9f2:	83 ea       	ldi	r24, 0xA3	; 163
    f9f4:	9c e0       	ldi	r25, 0x0C	; 12
    f9f6:	a0 e0       	ldi	r26, 0x00	; 0
    f9f8:	ed b7       	in	r30, 0x3d	; 61
    f9fa:	fe b7       	in	r31, 0x3e	; 62
    f9fc:	81 83       	std	Z+1, r24	; 0x01
    f9fe:	92 83       	std	Z+2, r25	; 0x02
    fa00:	a3 83       	std	Z+3, r26	; 0x03
    fa02:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        if(c == 'q')
    fa06:	c1 37       	cpi	r28, 0x71	; 113
    fa08:	d1 05       	cpc	r29, r1
    fa0a:	41 f0       	breq	.+16     	; 0xfa1c <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fa0c:	2a 97       	sbiw	r28, 0x0a	; 10
    fa0e:	49 f4       	brne	.+18     	; 0xfa22 <testpage+0x60>
            return(_pagesize-1);                  // single line
    fa10:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fa14:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fa18:	01 97       	sbiw	r24, 0x01	; 1
    fa1a:	05 c0       	rjmp	.+10     	; 0xfa26 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fa1c:	8f ef       	ldi	r24, 0xFF	; 255
    fa1e:	9f ef       	ldi	r25, 0xFF	; 255
    fa20:	02 c0       	rjmp	.+4      	; 0xfa26 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fa22:	80 e0       	ldi	r24, 0x00	; 0
    fa24:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fa26:	cd b7       	in	r28, 0x3d	; 61
    fa28:	de b7       	in	r29, 0x3e	; 62
    fa2a:	23 96       	adiw	r28, 0x03	; 3
    fa2c:	e2 e0       	ldi	r30, 0x02	; 2
    fa2e:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0000fa32 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fa32:	a7 e0       	ldi	r26, 0x07	; 7
    fa34:	b1 e0       	ldi	r27, 0x01	; 1
    fa36:	ef e1       	ldi	r30, 0x1F	; 31
    fa38:	fd e7       	ldi	r31, 0x7D	; 125
    fa3a:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
    fa3e:	8c 01       	movw	r16, r24
    fa40:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fa42:	69 ef       	ldi	r22, 0xF9	; 249
    fa44:	78 e0       	ldi	r23, 0x08	; 8
    fa46:	92 de       	rcall	.-732    	; 0xf76c <fopen>
    fa48:	7c 01       	movw	r14, r24
    if (!fp)
    fa4a:	89 2b       	or	r24, r25
    fa4c:	41 f0       	breq	.+16     	; 0xfa5e <cat+0x2c>
    fa4e:	c1 2c       	mov	r12, r1
    fa50:	d1 2c       	mov	r13, r1
    fa52:	a1 2c       	mov	r10, r1
    fa54:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fa56:	8e 01       	movw	r16, r28
    fa58:	08 5f       	subi	r16, 0xF8	; 248
    fa5a:	1f 4f       	sbci	r17, 0xFF	; 255
    fa5c:	22 c0       	rjmp	.+68     	; 0xfaa2 <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fa5e:	ed b7       	in	r30, 0x3d	; 61
    fa60:	fe b7       	in	r31, 0x3e	; 62
    fa62:	15 83       	std	Z+5, r17	; 0x05
    fa64:	04 83       	std	Z+4, r16	; 0x04
    fa66:	8e e2       	ldi	r24, 0x2E	; 46
    fa68:	9d e0       	ldi	r25, 0x0D	; 13
    fa6a:	a0 e0       	ldi	r26, 0x00	; 0
    fa6c:	81 83       	std	Z+1, r24	; 0x01
    fa6e:	92 83       	std	Z+2, r25	; 0x02
    fa70:	a3 83       	std	Z+3, r26	; 0x03
    fa72:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        return(0);
    fa76:	c1 2c       	mov	r12, r1
    fa78:	d1 2c       	mov	r13, r1
    fa7a:	76 01       	movw	r14, r12
    fa7c:	3f c0       	rjmp	.+126    	; 0xfafc <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fa7e:	c8 01       	movw	r24, r16
    fa80:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <trim_tail>
        size += strlen(line);
    fa84:	f8 01       	movw	r30, r16
    fa86:	01 90       	ld	r0, Z+
    fa88:	00 20       	and	r0, r0
    fa8a:	e9 f7       	brne	.-6      	; 0xfa86 <cat+0x54>
    fa8c:	31 97       	sbiw	r30, 0x01	; 1
    fa8e:	e0 1b       	sub	r30, r16
    fa90:	f1 0b       	sbc	r31, r17
    fa92:	ce 0e       	add	r12, r30
    fa94:	df 1e       	adc	r13, r31
        puts(line);
    fa96:	c8 01       	movw	r24, r16
    fa98:	0e 94 1a 74 	call	0xe834	; 0xe834 <puts>
        if(dopage)
    fa9c:	81 14       	cp	r8, r1
    fa9e:	91 04       	cpc	r9, r1
    faa0:	49 f4       	brne	.+18     	; 0xfab4 <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    faa2:	a7 01       	movw	r20, r14
    faa4:	6e ef       	ldi	r22, 0xFE	; 254
    faa6:	70 e0       	ldi	r23, 0x00	; 0
    faa8:	c8 01       	movw	r24, r16
    faaa:	0e 94 ce 73 	call	0xe79c	; 0xe79c <fgets>
    faae:	89 2b       	or	r24, r25
    fab0:	31 f7       	brne	.-52     	; 0xfa7e <cat+0x4c>
    fab2:	06 c0       	rjmp	.+12     	; 0xfac0 <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fab4:	c5 01       	movw	r24, r10
    fab6:	01 96       	adiw	r24, 0x01	; 1
    fab8:	84 df       	rcall	.-248    	; 0xf9c2 <testpage>
    faba:	5c 01       	movw	r10, r24
            if(count < 0)
    fabc:	97 ff       	sbrs	r25, 7
    fabe:	f1 cf       	rjmp	.-30     	; 0xfaa2 <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fac0:	8c e2       	ldi	r24, 0x2C	; 44
    fac2:	9d e0       	ldi	r25, 0x0D	; 13
    fac4:	a0 e0       	ldi	r26, 0x00	; 0
    fac6:	ed b7       	in	r30, 0x3d	; 61
    fac8:	fe b7       	in	r31, 0x3e	; 62
    faca:	81 83       	std	Z+1, r24	; 0x01
    facc:	92 83       	std	Z+2, r25	; 0x02
    face:	a3 83       	std	Z+3, r26	; 0x03
    fad0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    fclose(fp);
    fad4:	c7 01       	movw	r24, r14
    fad6:	f4 dc       	rcall	.-1560   	; 0xf4c0 <fclose>
    printf("%ld bytes\n", (long)size);
    fad8:	0d 2c       	mov	r0, r13
    fada:	00 0c       	add	r0, r0
    fadc:	ee 08       	sbc	r14, r14
    fade:	ff 08       	sbc	r15, r15
    fae0:	ed b7       	in	r30, 0x3d	; 61
    fae2:	fe b7       	in	r31, 0x3e	; 62
    fae4:	c4 82       	std	Z+4, r12	; 0x04
    fae6:	d5 82       	std	Z+5, r13	; 0x05
    fae8:	e6 82       	std	Z+6, r14	; 0x06
    faea:	f7 82       	std	Z+7, r15	; 0x07
    faec:	81 e2       	ldi	r24, 0x21	; 33
    faee:	9d e0       	ldi	r25, 0x0D	; 13
    faf0:	a0 e0       	ldi	r26, 0x00	; 0
    faf2:	81 83       	std	Z+1, r24	; 0x01
    faf4:	92 83       	std	Z+2, r25	; 0x02
    faf6:	a3 83       	std	Z+3, r26	; 0x03
    faf8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    return(size);
}
    fafc:	c7 01       	movw	r24, r14
    fafe:	b6 01       	movw	r22, r12
    fb00:	c9 5f       	subi	r28, 0xF9	; 249
    fb02:	de 4f       	sbci	r29, 0xFE	; 254
    fb04:	ec e0       	ldi	r30, 0x0C	; 12
    fb06:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

0000fb0a <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fb0a:	4f 92       	push	r4
    fb0c:	5f 92       	push	r5
    fb0e:	6f 92       	push	r6
    fb10:	7f 92       	push	r7
    fb12:	af 92       	push	r10
    fb14:	bf 92       	push	r11
    fb16:	cf 92       	push	r12
    fb18:	df 92       	push	r13
    fb1a:	ef 92       	push	r14
    fb1c:	ff 92       	push	r15
    fb1e:	0f 93       	push	r16
    fb20:	1f 93       	push	r17
    fb22:	cf 93       	push	r28
    fb24:	df 93       	push	r29
    fb26:	cd b7       	in	r28, 0x3d	; 61
    fb28:	de b7       	in	r29, 0x3e	; 62
    fb2a:	c9 54       	subi	r28, 0x49	; 73
    fb2c:	d1 09       	sbc	r29, r1
    fb2e:	0f b6       	in	r0, 0x3f	; 63
    fb30:	f8 94       	cli
    fb32:	de bf       	out	0x3e, r29	; 62
    fb34:	0f be       	out	0x3f, r0	; 63
    fb36:	cd bf       	out	0x3d, r28	; 61
    fb38:	8c 01       	movw	r16, r24
    fb3a:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fb3c:	be 01       	movw	r22, r28
    fb3e:	62 5f       	subi	r22, 0xF2	; 242
    fb40:	7f 4f       	sbci	r23, 0xFF	; 255
    fb42:	19 d9       	rcall	.-3534   	; 0xed76 <stat>
    fb44:	01 96       	adiw	r24, 0x01	; 1
    fb46:	79 f4       	brne	.+30     	; 0xfb66 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fb48:	ed b7       	in	r30, 0x3d	; 61
    fb4a:	fe b7       	in	r31, 0x3e	; 62
    fb4c:	15 83       	std	Z+5, r17	; 0x05
    fb4e:	04 83       	std	Z+4, r16	; 0x04
    fb50:	81 e9       	ldi	r24, 0x91	; 145
    fb52:	9c e0       	ldi	r25, 0x0C	; 12
    fb54:	a0 e0       	ldi	r26, 0x00	; 0
    fb56:	81 83       	std	Z+1, r24	; 0x01
    fb58:	92 83       	std	Z+2, r25	; 0x02
    fb5a:	a3 83       	std	Z+3, r26	; 0x03
    fb5c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        return(0);
    fb60:	80 e0       	ldi	r24, 0x00	; 0
    fb62:	90 e0       	ldi	r25, 0x00	; 0
    fb64:	77 c0       	rjmp	.+238    	; 0xfc54 <ls_info+0x14a>
    }

    if(!verbose)
    fb66:	ef 28       	or	r14, r15
    fb68:	81 f4       	brne	.+32     	; 0xfb8a <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fb6a:	c8 01       	movw	r24, r16
    fb6c:	0e 94 87 74 	call	0xe90e	; 0xe90e <basename>
    fb70:	ed b7       	in	r30, 0x3d	; 61
    fb72:	fe b7       	in	r31, 0x3e	; 62
    fb74:	95 83       	std	Z+5, r25	; 0x05
    fb76:	84 83       	std	Z+4, r24	; 0x04
    fb78:	8d e8       	ldi	r24, 0x8D	; 141
    fb7a:	9c e0       	ldi	r25, 0x0C	; 12
    fb7c:	a0 e0       	ldi	r26, 0x00	; 0
    fb7e:	81 83       	std	Z+1, r24	; 0x01
    fb80:	92 83       	std	Z+2, r25	; 0x02
    fb82:	a3 83       	std	Z+3, r26	; 0x03
    fb84:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    fb88:	63 c0       	rjmp	.+198    	; 0xfc50 <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    fb8a:	4e 88       	ldd	r4, Y+22	; 0x16
    fb8c:	5f 88       	ldd	r5, Y+23	; 0x17
    fb8e:	68 8c       	ldd	r6, Y+24	; 0x18
    fb90:	79 8c       	ldd	r7, Y+25	; 0x19
    fb92:	d3 01       	movw	r26, r6
    fb94:	c2 01       	movw	r24, r4
    fb96:	88 27       	eor	r24, r24
    fb98:	90 7f       	andi	r25, 0xF0	; 240
    fb9a:	aa 27       	eor	r26, r26
    fb9c:	bb 27       	eor	r27, r27
    fb9e:	81 15       	cp	r24, r1
    fba0:	90 44       	sbci	r25, 0x40	; 64
    fba2:	a1 05       	cpc	r26, r1
    fba4:	b1 05       	cpc	r27, r1
    fba6:	11 f4       	brne	.+4      	; 0xfbac <ls_info+0xa2>
        *p++ = 'd';
    fba8:	84 e6       	ldi	r24, 0x64	; 100
    fbaa:	01 c0       	rjmp	.+2      	; 0xfbae <ls_info+0xa4>
    else
        *p++ = '-';
    fbac:	8d e2       	ldi	r24, 0x2D	; 45
    fbae:	8e af       	std	Y+62, r24	; 0x3e
    fbb0:	fe 01       	movw	r30, r28
    fbb2:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fbb4:	e1 2c       	mov	r14, r1
    fbb6:	ff 24       	eor	r15, r15
    fbb8:	f3 94       	inc	r15
    fbba:	20 e0       	ldi	r18, 0x00	; 0
    fbbc:	30 e0       	ldi	r19, 0x00	; 0
    fbbe:	be 2e       	mov	r11, r30
    fbc0:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    fbc2:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    fbc4:	53 e0       	ldi	r21, 0x03	; 3
    fbc6:	c5 2e       	mov	r12, r21
    fbc8:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    fbca:	c7 01       	movw	r24, r14
    fbcc:	a0 e0       	ldi	r26, 0x00	; 0
    fbce:	b0 e0       	ldi	r27, 0x00	; 0
    fbd0:	84 21       	and	r24, r4
    fbd2:	95 21       	and	r25, r5
    fbd4:	a6 21       	and	r26, r6
    fbd6:	b7 21       	and	r27, r7
    fbd8:	89 2b       	or	r24, r25
    fbda:	8a 2b       	or	r24, r26
    fbdc:	8b 2b       	or	r24, r27
    fbde:	51 f0       	breq	.+20     	; 0xfbf4 <ls_info+0xea>
            *p++ = cm[ i % 3];
    fbe0:	c9 01       	movw	r24, r18
    fbe2:	b6 01       	movw	r22, r12
    fbe4:	0e 94 42 df 	call	0x1be84	; 0x1be84 <__divmodhi4>
    fbe8:	dc 01       	movw	r26, r24
    fbea:	ab 54       	subi	r26, 0x4B	; 75
    fbec:	b4 4f       	sbci	r27, 0xF4	; 244
    fbee:	8c 91       	ld	r24, X
    fbf0:	81 83       	std	Z+1, r24	; 0x01
    fbf2:	01 c0       	rjmp	.+2      	; 0xfbf6 <ls_info+0xec>
        else
            *p++ = '-';
    fbf4:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    fbf6:	f6 94       	lsr	r15
    fbf8:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    fbfa:	2f 5f       	subi	r18, 0xFF	; 255
    fbfc:	3f 4f       	sbci	r19, 0xFF	; 255
    fbfe:	31 96       	adiw	r30, 0x01	; 1
    fc00:	29 30       	cpi	r18, 0x09	; 9
    fc02:	31 05       	cpc	r19, r1
    fc04:	11 f7       	brne	.-60     	; 0xfbca <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    fc06:	29 96       	adiw	r28, 0x09	; 9
    fc08:	1f ae       	std	Y+63, r1	; 0x3f
    fc0a:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    fc0c:	4e a0       	ldd	r4, Y+38	; 0x26
    fc0e:	5f a0       	ldd	r5, Y+39	; 0x27
    fc10:	68 a4       	ldd	r6, Y+40	; 0x28
    fc12:	79 a4       	ldd	r7, Y+41	; 0x29
    fc14:	6e a9       	ldd	r22, Y+54	; 0x36
    fc16:	7f a9       	ldd	r23, Y+55	; 0x37
    fc18:	88 ad       	ldd	r24, Y+56	; 0x38
    fc1a:	99 ad       	ldd	r25, Y+57	; 0x39
    fc1c:	0e 94 62 74 	call	0xe8c4	; 0xe8c4 <mctime>
    fc20:	7c 01       	movw	r14, r24
    fc22:	c8 01       	movw	r24, r16
    fc24:	0e 94 87 74 	call	0xe90e	; 0xe90e <basename>
    fc28:	ed b7       	in	r30, 0x3d	; 61
    fc2a:	fe b7       	in	r31, 0x3e	; 62
    fc2c:	95 87       	std	Z+13, r25	; 0x0d
    fc2e:	84 87       	std	Z+12, r24	; 0x0c
    fc30:	f3 86       	std	Z+11, r15	; 0x0b
    fc32:	e2 86       	std	Z+10, r14	; 0x0a
    fc34:	46 82       	std	Z+6, r4	; 0x06
    fc36:	57 82       	std	Z+7, r5	; 0x07
    fc38:	60 86       	std	Z+8, r6	; 0x08
    fc3a:	71 86       	std	Z+9, r7	; 0x09
    fc3c:	b4 82       	std	Z+4, r11	; 0x04
    fc3e:	a5 82       	std	Z+5, r10	; 0x05
    fc40:	83 e7       	ldi	r24, 0x73	; 115
    fc42:	9c e0       	ldi	r25, 0x0C	; 12
    fc44:	a0 e0       	ldi	r26, 0x00	; 0
    fc46:	81 83       	std	Z+1, r24	; 0x01
    fc48:	92 83       	std	Z+2, r25	; 0x02
    fc4a:	a3 83       	std	Z+3, r26	; 0x03
    fc4c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    fc50:	81 e0       	ldi	r24, 0x01	; 1
    fc52:	90 e0       	ldi	r25, 0x00	; 0
}
    fc54:	c7 5b       	subi	r28, 0xB7	; 183
    fc56:	df 4f       	sbci	r29, 0xFF	; 255
    fc58:	0f b6       	in	r0, 0x3f	; 63
    fc5a:	f8 94       	cli
    fc5c:	de bf       	out	0x3e, r29	; 62
    fc5e:	0f be       	out	0x3f, r0	; 63
    fc60:	cd bf       	out	0x3d, r28	; 61
    fc62:	df 91       	pop	r29
    fc64:	cf 91       	pop	r28
    fc66:	1f 91       	pop	r17
    fc68:	0f 91       	pop	r16
    fc6a:	ff 90       	pop	r15
    fc6c:	ef 90       	pop	r14
    fc6e:	df 90       	pop	r13
    fc70:	cf 90       	pop	r12
    fc72:	bf 90       	pop	r11
    fc74:	af 90       	pop	r10
    fc76:	7f 90       	pop	r7
    fc78:	6f 90       	pop	r6
    fc7a:	5f 90       	pop	r5
    fc7c:	4f 90       	pop	r4
    fc7e:	08 95       	ret

0000fc80 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
    fc80:	2f 92       	push	r2
    fc82:	3f 92       	push	r3
    fc84:	4f 92       	push	r4
    fc86:	5f 92       	push	r5
    fc88:	6f 92       	push	r6
    fc8a:	8f 92       	push	r8
    fc8c:	9f 92       	push	r9
    fc8e:	af 92       	push	r10
    fc90:	bf 92       	push	r11
    fc92:	cf 92       	push	r12
    fc94:	df 92       	push	r13
    fc96:	ef 92       	push	r14
    fc98:	ff 92       	push	r15
    fc9a:	0f 93       	push	r16
    fc9c:	1f 93       	push	r17
    fc9e:	cf 93       	push	r28
    fca0:	df 93       	push	r29
    fca2:	cd b7       	in	r28, 0x3d	; 61
    fca4:	de b7       	in	r29, 0x3e	; 62
    fca6:	c7 53       	subi	r28, 0x37	; 55
    fca8:	d1 40       	sbci	r29, 0x01	; 1
    fcaa:	0f b6       	in	r0, 0x3f	; 63
    fcac:	f8 94       	cli
    fcae:	de bf       	out	0x3e, r29	; 62
    fcb0:	0f be       	out	0x3f, r0	; 63
    fcb2:	cd bf       	out	0x3d, r28	; 61
    fcb4:	7c 01       	movw	r14, r24
    fcb6:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    fcb8:	1e 82       	std	Y+6, r1	; 0x06
    fcba:	8e 01       	movw	r16, r28
    fcbc:	0a 5f       	subi	r16, 0xFA	; 250
    fcbe:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    fcc0:	00 97       	sbiw	r24, 0x00	; 0
    fcc2:	91 f4       	brne	.+36     	; 0xfce8 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    fcc4:	6e ef       	ldi	r22, 0xFE	; 254
    fcc6:	70 e0       	ldi	r23, 0x00	; 0
    fcc8:	c8 01       	movw	r24, r16
    fcca:	0e 94 dd 74 	call	0xe9ba	; 0xe9ba <getcwd>
    fcce:	89 2b       	or	r24, r25
    fcd0:	d1 f4       	brne	.+52     	; 0xfd06 <ls+0x86>
        {
            printf("ls: Can't get current directory\n");
    fcd2:	82 e5       	ldi	r24, 0x52	; 82
    fcd4:	9c e0       	ldi	r25, 0x0C	; 12
    fcd6:	a0 e0       	ldi	r26, 0x00	; 0
    fcd8:	ed b7       	in	r30, 0x3d	; 61
    fcda:	fe b7       	in	r31, 0x3e	; 62
    fcdc:	81 83       	std	Z+1, r24	; 0x01
    fcde:	92 83       	std	Z+2, r25	; 0x02
    fce0:	a3 83       	std	Z+3, r26	; 0x03
    fce2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    fce6:	37 c0       	rjmp	.+110    	; 0xfd56 <ls+0xd6>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
    fce8:	fc 01       	movw	r30, r24
    fcea:	80 81       	ld	r24, Z
    fcec:	88 23       	and	r24, r24
    fcee:	51 f3       	breq	.-44     	; 0xfcc4 <ls+0x44>
    fcf0:	63 ef       	ldi	r22, 0xF3	; 243
    fcf2:	72 e1       	ldi	r23, 0x12	; 18
    fcf4:	c7 01       	movw	r24, r14
    fcf6:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    fcfa:	89 2b       	or	r24, r25
    fcfc:	19 f7       	brne	.-58     	; 0xfcc4 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
    fcfe:	b7 01       	movw	r22, r14
    fd00:	c8 01       	movw	r24, r16
    fd02:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <strcpy>
    }
    len = strlen(fullpath);
    fd06:	f8 01       	movw	r30, r16
    fd08:	01 90       	ld	r0, Z+
    fd0a:	00 20       	and	r0, r0
    fd0c:	e9 f7       	brne	.-6      	; 0xfd08 <ls+0x88>
    fd0e:	31 97       	sbiw	r30, 0x01	; 1
    fd10:	1f 01       	movw	r2, r30
    fd12:	20 1a       	sub	r2, r16
    fd14:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
    fd16:	ed b7       	in	r30, 0x3d	; 61
    fd18:	fe b7       	in	r31, 0x3e	; 62
    fd1a:	15 83       	std	Z+5, r17	; 0x05
    fd1c:	04 83       	std	Z+4, r16	; 0x04
    fd1e:	84 e4       	ldi	r24, 0x44	; 68
    fd20:	9c e0       	ldi	r25, 0x0C	; 12
    fd22:	a0 e0       	ldi	r26, 0x00	; 0
    fd24:	81 83       	std	Z+1, r24	; 0x01
    fd26:	92 83       	std	Z+2, r25	; 0x02
    fd28:	a3 83       	std	Z+3, r26	; 0x03
    fd2a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    if (stat(fullpath, &st))
    fd2e:	be 01       	movw	r22, r28
    fd30:	6a 5f       	subi	r22, 0xFA	; 250
    fd32:	7e 4f       	sbci	r23, 0xFE	; 254
    fd34:	c8 01       	movw	r24, r16
    fd36:	1f d8       	rcall	.-4034   	; 0xed76 <stat>
    fd38:	7c 01       	movw	r14, r24
    fd3a:	89 2b       	or	r24, r25
    fd3c:	79 f0       	breq	.+30     	; 0xfd5c <ls+0xdc>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    fd3e:	ed b7       	in	r30, 0x3d	; 61
    fd40:	fe b7       	in	r31, 0x3e	; 62
    fd42:	15 83       	std	Z+5, r17	; 0x05
    fd44:	04 83       	std	Z+4, r16	; 0x04
    fd46:	8e e2       	ldi	r24, 0x2E	; 46
    fd48:	9c e0       	ldi	r25, 0x0C	; 12
    fd4a:	a0 e0       	ldi	r26, 0x00	; 0
    fd4c:	81 83       	std	Z+1, r24	; 0x01
    fd4e:	92 83       	std	Z+2, r25	; 0x02
    fd50:	a3 83       	std	Z+3, r26	; 0x03
    fd52:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        return(0);
    fd56:	e1 2c       	mov	r14, r1
    fd58:	f1 2c       	mov	r15, r1
    fd5a:	8c c0       	rjmp	.+280    	; 0xfe74 <ls+0x1f4>
    }

    switch (st.st_mode & S_IFMT)
    fd5c:	c2 5f       	subi	r28, 0xF2	; 242
    fd5e:	de 4f       	sbci	r29, 0xFE	; 254
    fd60:	88 81       	ld	r24, Y
    fd62:	99 81       	ldd	r25, Y+1	; 0x01
    fd64:	aa 81       	ldd	r26, Y+2	; 0x02
    fd66:	bb 81       	ldd	r27, Y+3	; 0x03
    fd68:	ce 50       	subi	r28, 0x0E	; 14
    fd6a:	d1 40       	sbci	r29, 0x01	; 1
    fd6c:	88 27       	eor	r24, r24
    fd6e:	90 7f       	andi	r25, 0xF0	; 240
    fd70:	aa 27       	eor	r26, r26
    fd72:	bb 27       	eor	r27, r27
    fd74:	81 15       	cp	r24, r1
    fd76:	f0 e4       	ldi	r31, 0x40	; 64
    fd78:	9f 07       	cpc	r25, r31
    fd7a:	a1 05       	cpc	r26, r1
    fd7c:	b1 05       	cpc	r27, r1
    fd7e:	59 f0       	breq	.+22     	; 0xfd96 <ls+0x116>
    fd80:	81 15       	cp	r24, r1
    fd82:	90 48       	sbci	r25, 0x80	; 128
    fd84:	a1 05       	cpc	r26, r1
    fd86:	b1 05       	cpc	r27, r1
    fd88:	09 f0       	breq	.+2      	; 0xfd8c <ls+0x10c>
    fd8a:	66 c0       	rjmp	.+204    	; 0xfe58 <ls+0x1d8>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
    fd8c:	b4 01       	movw	r22, r8
    fd8e:	c8 01       	movw	r24, r16
    fd90:	bc de       	rcall	.-648    	; 0xfb0a <ls_info>
    fd92:	7c 01       	movw	r14, r24
            break;
    fd94:	63 c0       	rjmp	.+198    	; 0xfe5c <ls+0x1dc>
        case S_IFDIR:
            dirp = opendir(fullpath);
    fd96:	c8 01       	movw	r24, r16
    fd98:	0e 94 8b 75 	call	0xeb16	; 0xeb16 <opendir>
    fd9c:	5c 01       	movw	r10, r24
            if(!dirp)
    fd9e:	89 2b       	or	r24, r25
    fda0:	81 f0       	breq	.+32     	; 0xfdc2 <ls+0x142>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
    fda2:	e1 2c       	mov	r14, r1
    fda4:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
    fda6:	c8 01       	movw	r24, r16
    fda8:	82 0d       	add	r24, r2
    fdaa:	93 1d       	adc	r25, r3
    fdac:	ca 5c       	subi	r28, 0xCA	; 202
    fdae:	de 4f       	sbci	r29, 0xFE	; 254
    fdb0:	99 83       	std	Y+1, r25	; 0x01
    fdb2:	88 83       	st	Y, r24
    fdb4:	c6 53       	subi	r28, 0x36	; 54
    fdb6:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    fdb8:	8b ef       	ldi	r24, 0xFB	; 251
    fdba:	9b e0       	ldi	r25, 0x0B	; 11
    fdbc:	2c 01       	movw	r4, r24
    fdbe:	61 2c       	mov	r6, r1
    fdc0:	24 c0       	rjmp	.+72     	; 0xfe0a <ls+0x18a>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
    fdc2:	8e e1       	ldi	r24, 0x1E	; 30
    fdc4:	9c e0       	ldi	r25, 0x0C	; 12
    fdc6:	a0 e0       	ldi	r26, 0x00	; 0
    fdc8:	ed b7       	in	r30, 0x3d	; 61
    fdca:	fe b7       	in	r31, 0x3e	; 62
    fdcc:	81 83       	std	Z+1, r24	; 0x01
    fdce:	92 83       	std	Z+2, r25	; 0x02
    fdd0:	a3 83       	std	Z+3, r26	; 0x03
    fdd2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
                return(0);
    fdd6:	4e c0       	rjmp	.+156    	; 0xfe74 <ls+0x1f4>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
    fdd8:	f6 01       	movw	r30, r12
    fdda:	80 81       	ld	r24, Z
    fddc:	88 23       	and	r24, r24
    fdde:	d9 f0       	breq	.+54     	; 0xfe16 <ls+0x196>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
    fde0:	f6 01       	movw	r30, r12
    fde2:	01 90       	ld	r0, Z+
    fde4:	00 20       	and	r0, r0
    fde6:	e9 f7       	brne	.-6      	; 0xfde2 <ls+0x162>
    fde8:	31 97       	sbiw	r30, 0x01	; 1
    fdea:	ec 19       	sub	r30, r12
    fdec:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
    fdee:	e2 0d       	add	r30, r2
    fdf0:	f3 1d       	adc	r31, r3
    fdf2:	ef 3f       	cpi	r30, 0xFF	; 255
    fdf4:	f1 05       	cpc	r31, r1
    fdf6:	9c f0       	brlt	.+38     	; 0xfe1e <ls+0x19e>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    fdf8:	ed b7       	in	r30, 0x3d	; 61
    fdfa:	fe b7       	in	r31, 0x3e	; 62
    fdfc:	d5 82       	std	Z+5, r13	; 0x05
    fdfe:	c4 82       	std	Z+4, r12	; 0x04
    fe00:	41 82       	std	Z+1, r4	; 0x01
    fe02:	52 82       	std	Z+2, r5	; 0x02
    fe04:	63 82       	std	Z+3, r6	; 0x03
    fe06:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
    fe0a:	c5 01       	movw	r24, r10
    fe0c:	0e 94 a9 75 	call	0xeb52	; 0xeb52 <readdir>
    fe10:	6c 01       	movw	r12, r24
    fe12:	89 2b       	or	r24, r25
    fe14:	09 f7       	brne	.-62     	; 0xfdd8 <ls+0x158>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
    fe16:	c5 01       	movw	r24, r10
    fe18:	0e 94 70 75 	call	0xeae0	; 0xeae0 <closedir>
            break;
    fe1c:	1f c0       	rjmp	.+62     	; 0xfe5c <ls+0x1dc>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
    fe1e:	61 ea       	ldi	r22, 0xA1	; 161
    fe20:	78 e0       	ldi	r23, 0x08	; 8
    fe22:	c8 01       	movw	r24, r16
    fe24:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    fe28:	89 2b       	or	r24, r25
    fe2a:	29 f4       	brne	.+10     	; 0xfe36 <ls+0x1b6>
                {
                    strcat(fullpath,"/");
    fe2c:	61 ea       	ldi	r22, 0xA1	; 161
    fe2e:	78 e0       	ldi	r23, 0x08	; 8
    fe30:	c8 01       	movw	r24, r16
    fe32:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <strcat>
                }
                strcat(fullpath,de->d_name);
    fe36:	b6 01       	movw	r22, r12
    fe38:	c8 01       	movw	r24, r16
    fe3a:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <strcat>
                files +=ls_info(fullpath,verbose);
    fe3e:	b4 01       	movw	r22, r8
    fe40:	c8 01       	movw	r24, r16
    fe42:	63 de       	rcall	.-826    	; 0xfb0a <ls_info>
    fe44:	e8 0e       	add	r14, r24
    fe46:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
    fe48:	ca 5c       	subi	r28, 0xCA	; 202
    fe4a:	de 4f       	sbci	r29, 0xFE	; 254
    fe4c:	e8 81       	ld	r30, Y
    fe4e:	f9 81       	ldd	r31, Y+1	; 0x01
    fe50:	c6 53       	subi	r28, 0x36	; 54
    fe52:	d1 40       	sbci	r29, 0x01	; 1
    fe54:	10 82       	st	Z, r1
    fe56:	d9 cf       	rjmp	.-78     	; 0xfe0a <ls+0x18a>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
    fe58:	e1 2c       	mov	r14, r1
    fe5a:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
    fe5c:	ed b7       	in	r30, 0x3d	; 61
    fe5e:	fe b7       	in	r31, 0x3e	; 62
    fe60:	f5 82       	std	Z+5, r15	; 0x05
    fe62:	e4 82       	std	Z+4, r14	; 0x04
    fe64:	80 ef       	ldi	r24, 0xF0	; 240
    fe66:	9b e0       	ldi	r25, 0x0B	; 11
    fe68:	a0 e0       	ldi	r26, 0x00	; 0
    fe6a:	81 83       	std	Z+1, r24	; 0x01
    fe6c:	92 83       	std	Z+2, r25	; 0x02
    fe6e:	a3 83       	std	Z+3, r26	; 0x03
    fe70:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    return(files);
}
    fe74:	c7 01       	movw	r24, r14
    fe76:	c9 5c       	subi	r28, 0xC9	; 201
    fe78:	de 4f       	sbci	r29, 0xFE	; 254
    fe7a:	0f b6       	in	r0, 0x3f	; 63
    fe7c:	f8 94       	cli
    fe7e:	de bf       	out	0x3e, r29	; 62
    fe80:	0f be       	out	0x3f, r0	; 63
    fe82:	cd bf       	out	0x3d, r28	; 61
    fe84:	df 91       	pop	r29
    fe86:	cf 91       	pop	r28
    fe88:	1f 91       	pop	r17
    fe8a:	0f 91       	pop	r16
    fe8c:	ff 90       	pop	r15
    fe8e:	ef 90       	pop	r14
    fe90:	df 90       	pop	r13
    fe92:	cf 90       	pop	r12
    fe94:	bf 90       	pop	r11
    fe96:	af 90       	pop	r10
    fe98:	9f 90       	pop	r9
    fe9a:	8f 90       	pop	r8
    fe9c:	6f 90       	pop	r6
    fe9e:	5f 90       	pop	r5
    fea0:	4f 90       	pop	r4
    fea2:	3f 90       	pop	r3
    fea4:	2f 90       	pop	r2
    fea6:	08 95       	ret

0000fea8 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
    fea8:	a7 e0       	ldi	r26, 0x07	; 7
    feaa:	b1 e0       	ldi	r27, 0x01	; 1
    feac:	ea e5       	ldi	r30, 0x5A	; 90
    feae:	ff e7       	ldi	r31, 0x7F	; 127
    feb0:	0c 94 c4 df 	jmp	0x1bf88	; 0x1bf88 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    feb4:	fb 01       	movw	r30, r22
    feb6:	c0 80       	ld	r12, Z
    feb8:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
    feba:	c1 14       	cp	r12, r1
    febc:	d1 04       	cpc	r13, r1
    febe:	09 f4       	brne	.+2      	; 0xfec2 <posix_tests+0x1a>
    fec0:	9a c1       	rjmp	.+820    	; 0x101f6 <__EEPROM_REGION_LENGTH__+0x1f6>
    fec2:	2b 01       	movw	r4, r22
    fec4:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
    fec6:	69 eb       	ldi	r22, 0xB9	; 185
    fec8:	7b e0       	ldi	r23, 0x0B	; 11
    feca:	c6 01       	movw	r24, r12
    fecc:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    fed0:	89 2b       	or	r24, r25
    fed2:	a9 f0       	breq	.+42     	; 0xfefe <posix_tests+0x56>
    {
        ptr = argv[ind++];
    fed4:	f2 01       	movw	r30, r4
    fed6:	c2 80       	ldd	r12, Z+2	; 0x02
    fed8:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    feda:	c1 14       	cp	r12, r1
    fedc:	d1 04       	cpc	r13, r1
    fede:	21 f4       	brne	.+8      	; 0xfee8 <posix_tests+0x40>
        {
            posix_help(1);
    fee0:	81 e0       	ldi	r24, 0x01	; 1
    fee2:	90 e0       	ldi	r25, 0x00	; 0
    fee4:	6f dc       	rcall	.-1826   	; 0xf7c4 <posix_help>
    fee6:	28 c1       	rjmp	.+592    	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    fee8:	65 e9       	ldi	r22, 0x95	; 149
    feea:	76 e1       	ldi	r23, 0x16	; 22
    feec:	c6 01       	movw	r24, r12
    feee:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    fef2:	89 2b       	or	r24, r25
    fef4:	a9 f7       	brne	.-22     	; 0xfee0 <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
    fef6:	22 e0       	ldi	r18, 0x02	; 2
    fef8:	62 2e       	mov	r6, r18
    fefa:	71 2c       	mov	r7, r1
    fefc:	03 c0       	rjmp	.+6      	; 0xff04 <__DATA_REGION_LENGTH__+0x4>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    fefe:	66 24       	eor	r6, r6
    ff00:	63 94       	inc	r6
    ff02:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    ff04:	73 01       	movw	r14, r6
    ff06:	ff ef       	ldi	r31, 0xFF	; 255
    ff08:	ef 1a       	sub	r14, r31
    ff0a:	ff 0a       	sbc	r15, r31
    ff0c:	98 01       	movw	r18, r16
    ff0e:	a7 01       	movw	r20, r14
    ff10:	6f eb       	ldi	r22, 0xBF	; 191
    ff12:	7b e0       	ldi	r23, 0x0B	; 11
    ff14:	c6 01       	movw	r24, r12
    ff16:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
    ff1a:	89 2b       	or	r24, r25
    ff1c:	a1 f1       	breq	.+104    	; 0xff86 <__DATA_REGION_LENGTH__+0x86>
    ff1e:	73 01       	movw	r14, r6
    ff20:	ee 0c       	add	r14, r14
    ff22:	ff 1c       	adc	r15, r15
    ff24:	e4 0c       	add	r14, r4
    ff26:	f5 1c       	adc	r15, r5
    ff28:	57 01       	movw	r10, r14
    ff2a:	47 01       	movw	r8, r14
    ff2c:	63 01       	movw	r12, r6
    ff2e:	41 2c       	mov	r4, r1
    ff30:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
    ff32:	c0 16       	cp	r12, r16
    ff34:	d1 06       	cpc	r13, r17
    ff36:	1c f5       	brge	.+70     	; 0xff7e <__DATA_REGION_LENGTH__+0x7e>
        {
            if(MATCH(argv[i],"-p"))
    ff38:	63 ec       	ldi	r22, 0xC3	; 195
    ff3a:	7b e0       	ldi	r23, 0x0B	; 11
    ff3c:	f4 01       	movw	r30, r8
    ff3e:	81 91       	ld	r24, Z+
    ff40:	91 91       	ld	r25, Z+
    ff42:	4f 01       	movw	r8, r30
    ff44:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    ff48:	89 2b       	or	r24, r25
    ff4a:	19 f0       	breq	.+6      	; 0xff52 <__DATA_REGION_LENGTH__+0x52>
                page = 1;
    ff4c:	44 24       	eor	r4, r4
    ff4e:	43 94       	inc	r4
    ff50:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
    ff52:	ff ef       	ldi	r31, 0xFF	; 255
    ff54:	cf 1a       	sub	r12, r31
    ff56:	df 0a       	sbc	r13, r31
    ff58:	ec cf       	rjmp	.-40     	; 0xff32 <__DATA_REGION_LENGTH__+0x32>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
    ff5a:	63 ec       	ldi	r22, 0xC3	; 195
    ff5c:	7b e0       	ldi	r23, 0x0B	; 11
    ff5e:	f5 01       	movw	r30, r10
    ff60:	81 91       	ld	r24, Z+
    ff62:	91 91       	ld	r25, Z+
    ff64:	5f 01       	movw	r10, r30
    ff66:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
    ff6a:	89 2b       	or	r24, r25
    ff6c:	29 f4       	brne	.+10     	; 0xff78 <__DATA_REGION_LENGTH__+0x78>
                cat(argv[ind], page);
    ff6e:	b2 01       	movw	r22, r4
    ff70:	f7 01       	movw	r30, r14
    ff72:	80 81       	ld	r24, Z
    ff74:	91 81       	ldd	r25, Z+1	; 0x01
    ff76:	5d dd       	rcall	.-1350   	; 0xfa32 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
    ff78:	ff ef       	ldi	r31, 0xFF	; 255
    ff7a:	6f 1a       	sub	r6, r31
    ff7c:	7f 0a       	sbc	r7, r31
    ff7e:	60 16       	cp	r6, r16
    ff80:	71 06       	cpc	r7, r17
    ff82:	5c f3       	brlt	.-42     	; 0xff5a <__DATA_REGION_LENGTH__+0x5a>
    ff84:	d9 c0       	rjmp	.+434    	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
    ff86:	53 01       	movw	r10, r6
    ff88:	82 e0       	ldi	r24, 0x02	; 2
    ff8a:	a8 0e       	add	r10, r24
    ff8c:	b1 1c       	adc	r11, r1
    ff8e:	98 01       	movw	r18, r16
    ff90:	a5 01       	movw	r20, r10
    ff92:	66 ec       	ldi	r22, 0xC6	; 198
    ff94:	7b e0       	ldi	r23, 0x0B	; 11
    ff96:	c6 01       	movw	r24, r12
    ff98:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
    ff9c:	89 2b       	or	r24, r25
    ff9e:	59 f0       	breq	.+22     	; 0xffb6 <__DATA_REGION_LENGTH__+0xb6>
    {
        copy(argv[ind],argv[ind+1]);
    ffa0:	f3 01       	movw	r30, r6
    ffa2:	ee 0f       	add	r30, r30
    ffa4:	ff 1f       	adc	r31, r31
    ffa6:	e4 0d       	add	r30, r4
    ffa8:	f5 1d       	adc	r31, r5
    ffaa:	62 81       	ldd	r22, Z+2	; 0x02
    ffac:	73 81       	ldd	r23, Z+3	; 0x03
    ffae:	80 81       	ld	r24, Z
    ffb0:	91 81       	ldd	r25, Z+1	; 0x01
    ffb2:	29 dc       	rcall	.-1966   	; 0xf806 <copy>
    ffb4:	c1 c0       	rjmp	.+386    	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
    ffb6:	98 01       	movw	r18, r16
    ffb8:	a7 01       	movw	r20, r14
    ffba:	6c e4       	ldi	r22, 0x4C	; 76
    ffbc:	77 e1       	ldi	r23, 0x17	; 23
    ffbe:	c6 01       	movw	r24, r12
    ffc0:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
    ffc4:	89 2b       	or	r24, r25
    ffc6:	b9 f0       	breq	.+46     	; 0xfff6 <__DATA_REGION_LENGTH__+0xf6>
    {
        if ( chdir(argv[ind]) != 0)
    ffc8:	73 01       	movw	r14, r6
    ffca:	ee 0c       	add	r14, r14
    ffcc:	ff 1c       	adc	r15, r15
    ffce:	e4 0c       	add	r14, r4
    ffd0:	f5 1c       	adc	r15, r5
    ffd2:	f7 01       	movw	r30, r14
    ffd4:	80 81       	ld	r24, Z
    ffd6:	91 81       	ldd	r25, Z+1	; 0x01
    ffd8:	0e 94 95 74 	call	0xe92a	; 0xe92a <chdir>
    ffdc:	89 2b       	or	r24, r25
    ffde:	09 f4       	brne	.+2      	; 0xffe2 <__DATA_REGION_LENGTH__+0xe2>
    ffe0:	ab c0       	rjmp	.+342    	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
            printf("chdir %s failed\n", argv[ind]);
    ffe2:	f7 01       	movw	r30, r14
    ffe4:	80 81       	ld	r24, Z
    ffe6:	91 81       	ldd	r25, Z+1	; 0x01
    ffe8:	ed b7       	in	r30, 0x3d	; 61
    ffea:	fe b7       	in	r31, 0x3e	; 62
    ffec:	95 83       	std	Z+5, r25	; 0x05
    ffee:	84 83       	std	Z+4, r24	; 0x04
    fff0:	83 e8       	ldi	r24, 0x83	; 131
    fff2:	9d e0       	ldi	r25, 0x0D	; 13
    fff4:	9b c0       	rjmp	.+310    	; 0x1012c <__EEPROM_REGION_LENGTH__+0x12c>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    fff6:	98 01       	movw	r18, r16
    fff8:	a3 01       	movw	r20, r6
    fffa:	63 ed       	ldi	r22, 0xD3	; 211
    fffc:	78 e0       	ldi	r23, 0x08	; 8
    fffe:	c6 01       	movw	r24, r12
   10000:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   10004:	4c 01       	movw	r8, r24
   10006:	89 2b       	or	r24, r25
   10008:	69 f1       	breq	.+90     	; 0x10064 <__EEPROM_REGION_LENGTH__+0x64>
   1000a:	73 01       	movw	r14, r6
   1000c:	ee 0c       	add	r14, r14
   1000e:	ff 1c       	adc	r15, r15
   10010:	e4 0c       	add	r14, r4
   10012:	f5 1c       	adc	r15, r5
   10014:	c1 2c       	mov	r12, r1
   10016:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10018:	c6 01       	movw	r24, r12
   1001a:	86 0d       	add	r24, r6
   1001c:	97 1d       	adc	r25, r7
   1001e:	80 17       	cp	r24, r16
   10020:	91 07       	cpc	r25, r17
   10022:	b4 f4       	brge	.+44     	; 0x10050 <__EEPROM_REGION_LENGTH__+0x50>
        {
            if(!MATCH(argv[i],"-l"))
   10024:	6b ec       	ldi	r22, 0xCB	; 203
   10026:	7b e0       	ldi	r23, 0x0B	; 11
   10028:	f7 01       	movw	r30, r14
   1002a:	80 81       	ld	r24, Z
   1002c:	91 81       	ldd	r25, Z+1	; 0x01
   1002e:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   10032:	89 2b       	or	r24, r25
   10034:	31 f4       	brne	.+12     	; 0x10042 <__EEPROM_REGION_LENGTH__+0x42>
                ls(argv[i],1);
   10036:	61 e0       	ldi	r22, 0x01	; 1
   10038:	70 e0       	ldi	r23, 0x00	; 0
   1003a:	f7 01       	movw	r30, r14
   1003c:	80 81       	ld	r24, Z
   1003e:	91 81       	ldd	r25, Z+1	; 0x01
   10040:	1f de       	rcall	.-962    	; 0xfc80 <ls>
            ++args;
   10042:	ff ef       	ldi	r31, 0xFF	; 255
   10044:	cf 1a       	sub	r12, r31
   10046:	df 0a       	sbc	r13, r31
   10048:	82 e0       	ldi	r24, 0x02	; 2
   1004a:	e8 0e       	add	r14, r24
   1004c:	f1 1c       	adc	r15, r1
   1004e:	e4 cf       	rjmp	.-56     	; 0x10018 <__EEPROM_REGION_LENGTH__+0x18>
        }
        if(!args)
   10050:	c1 14       	cp	r12, r1
   10052:	d1 04       	cpc	r13, r1
   10054:	09 f0       	breq	.+2      	; 0x10058 <__EEPROM_REGION_LENGTH__+0x58>
        {
            ls("",1);
   10056:	70 c0       	rjmp	.+224    	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
   10058:	61 e0       	ldi	r22, 0x01	; 1
   1005a:	70 e0       	ldi	r23, 0x00	; 0
   1005c:	85 e2       	ldi	r24, 0x25	; 37
   1005e:	9c e0       	ldi	r25, 0x0C	; 12
   10060:	0f de       	rcall	.-994    	; 0xfc80 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10062:	6a c0       	rjmp	.+212    	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
   10064:	98 01       	movw	r18, r16
   10066:	a7 01       	movw	r20, r14
   10068:	6e ec       	ldi	r22, 0xCE	; 206
   1006a:	7b e0       	ldi	r23, 0x0B	; 11
   1006c:	c6 01       	movw	r24, r12
   1006e:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   10072:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10074:	71 f1       	breq	.+92     	; 0x100d2 <__EEPROM_REGION_LENGTH__+0xd2>
   10076:	e0 16       	cp	r14, r16
   10078:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   1007a:	7c f4       	brge	.+30     	; 0x1009a <__EEPROM_REGION_LENGTH__+0x9a>
   1007c:	ee 0c       	add	r14, r14
   1007e:	ff 1c       	adc	r15, r15
   10080:	f2 01       	movw	r30, r4
   10082:	ee 0d       	add	r30, r14
   10084:	ff 1d       	adc	r31, r15
   10086:	48 e0       	ldi	r20, 0x08	; 8
   10088:	50 e0       	ldi	r21, 0x00	; 0
   1008a:	60 e0       	ldi	r22, 0x00	; 0
   1008c:	70 e0       	ldi	r23, 0x00	; 0
   1008e:	80 81       	ld	r24, Z
   10090:	91 81       	ldd	r25, Z+1	; 0x01
   10092:	0e 94 ad 43 	call	0x875a	; 0x875a <strtol>
   10096:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10098:	02 c0       	rjmp	.+4      	; 0x1009e <__EEPROM_REGION_LENGTH__+0x9e>
   1009a:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   1009c:	51 e0       	ldi	r21, 0x01	; 1
   1009e:	73 01       	movw	r14, r6
   100a0:	ee 0c       	add	r14, r14
   100a2:	ff 1c       	adc	r15, r15
   100a4:	e4 0c       	add	r14, r4
   100a6:	f5 1c       	adc	r15, r5
   100a8:	05 2e       	mov	r0, r21
   100aa:	00 0c       	add	r0, r0
   100ac:	66 0b       	sbc	r22, r22
   100ae:	77 0b       	sbc	r23, r23
   100b0:	f7 01       	movw	r30, r14
   100b2:	80 81       	ld	r24, Z
   100b4:	91 81       	ldd	r25, Z+1	; 0x01
   100b6:	0e 94 02 75 	call	0xea04	; 0xea04 <mkdir>
   100ba:	89 2b       	or	r24, r25
        {
            printf("mkdir %s failed\n", argv[ind]);
   100bc:	e9 f1       	breq	.+122    	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
   100be:	f7 01       	movw	r30, r14
   100c0:	80 81       	ld	r24, Z
   100c2:	91 81       	ldd	r25, Z+1	; 0x01
   100c4:	ed b7       	in	r30, 0x3d	; 61
   100c6:	fe b7       	in	r31, 0x3e	; 62
   100c8:	95 83       	std	Z+5, r25	; 0x05
   100ca:	84 83       	std	Z+4, r24	; 0x04
   100cc:	82 e7       	ldi	r24, 0x72	; 114
   100ce:	9d e0       	ldi	r25, 0x0D	; 13
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   100d0:	b4 c0       	rjmp	.+360    	; 0x1023a <__EEPROM_REGION_LENGTH__+0x23a>
   100d2:	98 01       	movw	r18, r16
   100d4:	a7 01       	movw	r20, r14
   100d6:	64 ed       	ldi	r22, 0xD4	; 212
   100d8:	7b e0       	ldi	r23, 0x0B	; 11
   100da:	c6 01       	movw	r24, r12
   100dc:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   100e0:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   100e2:	71 f0       	breq	.+28     	; 0x10100 <__EEPROM_REGION_LENGTH__+0x100>
   100e4:	66 0c       	add	r6, r6
   100e6:	77 1c       	adc	r7, r7
   100e8:	f2 01       	movw	r30, r4
   100ea:	e6 0d       	add	r30, r6
   100ec:	f7 1d       	adc	r31, r7
   100ee:	80 81       	ld	r24, Z
   100f0:	91 81       	ldd	r25, Z+1	; 0x01
   100f2:	0e 94 0b 44 	call	0x8816	; 0x8816 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   100f6:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   100fa:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   100fe:	1c c0       	rjmp	.+56     	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
   10100:	98 01       	movw	r18, r16
   10102:	a3 01       	movw	r20, r6
   10104:	69 ed       	ldi	r22, 0xD9	; 217
   10106:	7b e0       	ldi	r23, 0x0B	; 11
   10108:	c6 01       	movw	r24, r12
   1010a:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1010e:	4c 01       	movw	r8, r24
   10110:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   10112:	b1 f0       	breq	.+44     	; 0x10140 <__EEPROM_REGION_LENGTH__+0x140>
   10114:	6e ef       	ldi	r22, 0xFE	; 254
   10116:	70 e0       	ldi	r23, 0x00	; 0
   10118:	ce 01       	movw	r24, r28
   1011a:	08 96       	adiw	r24, 0x08	; 8
   1011c:	0e 94 dd 74 	call	0xe9ba	; 0xe9ba <getcwd>
   10120:	ed b7       	in	r30, 0x3d	; 61
   10122:	fe b7       	in	r31, 0x3e	; 62
   10124:	95 83       	std	Z+5, r25	; 0x05
   10126:	84 83       	std	Z+4, r24	; 0x04
   10128:	8e e6       	ldi	r24, 0x6E	; 110
   1012a:	9d e0       	ldi	r25, 0x0D	; 13
   1012c:	a0 e0       	ldi	r26, 0x00	; 0
   1012e:	81 83       	std	Z+1, r24	; 0x01
   10130:	92 83       	std	Z+2, r25	; 0x02
   10132:	a3 83       	std	Z+3, r26	; 0x03
   10134:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        return(1);
   10138:	88 24       	eor	r8, r8
   1013a:	83 94       	inc	r8
   1013c:	91 2c       	mov	r9, r1
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1013e:	83 c0       	rjmp	.+262    	; 0x10246 <__EEPROM_REGION_LENGTH__+0x246>
   10140:	98 01       	movw	r18, r16
   10142:	a5 01       	movw	r20, r10
   10144:	6d ed       	ldi	r22, 0xDD	; 221
   10146:	7b e0       	ldi	r23, 0x0B	; 11
   10148:	c6 01       	movw	r24, r12
   1014a:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1014e:	89 2b       	or	r24, r25
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   10150:	61 f1       	breq	.+88     	; 0x101aa <__EEPROM_REGION_LENGTH__+0x1aa>
   10152:	66 0c       	add	r6, r6
   10154:	77 1c       	adc	r7, r7
   10156:	82 01       	movw	r16, r4
   10158:	06 0d       	add	r16, r6
   1015a:	17 1d       	adc	r17, r7
   1015c:	f2 e0       	ldi	r31, 0x02	; 2
   1015e:	6f 0e       	add	r6, r31
   10160:	71 1c       	adc	r7, r1
   10162:	72 01       	movw	r14, r4
   10164:	e6 0c       	add	r14, r6
   10166:	f7 1c       	adc	r15, r7
   10168:	f7 01       	movw	r30, r14
   1016a:	60 81       	ld	r22, Z
   1016c:	71 81       	ldd	r23, Z+1	; 0x01
   1016e:	f8 01       	movw	r30, r16
   10170:	80 81       	ld	r24, Z
   10172:	91 81       	ldd	r25, Z+1	; 0x01
   10174:	0e 94 30 75 	call	0xea60	; 0xea60 <rename>
   10178:	89 2b       	or	r24, r25
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   1017a:	f1 f2       	breq	.-68     	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
   1017c:	f7 01       	movw	r30, r14
   1017e:	80 81       	ld	r24, Z
   10180:	91 81       	ldd	r25, Z+1	; 0x01
   10182:	ed b7       	in	r30, 0x3d	; 61
   10184:	fe b7       	in	r31, 0x3e	; 62
   10186:	97 83       	std	Z+7, r25	; 0x07
   10188:	86 83       	std	Z+6, r24	; 0x06
   1018a:	f8 01       	movw	r30, r16
   1018c:	80 81       	ld	r24, Z
   1018e:	91 81       	ldd	r25, Z+1	; 0x01
   10190:	ed b7       	in	r30, 0x3d	; 61
   10192:	fe b7       	in	r31, 0x3e	; 62
   10194:	95 83       	std	Z+5, r25	; 0x05
   10196:	84 83       	std	Z+4, r24	; 0x04
   10198:	8d e5       	ldi	r24, 0x5D	; 93
   1019a:	9d e0       	ldi	r25, 0x0D	; 13
   1019c:	a0 e0       	ldi	r26, 0x00	; 0
   1019e:	81 83       	std	Z+1, r24	; 0x01
   101a0:	92 83       	std	Z+2, r25	; 0x02
   101a2:	a3 83       	std	Z+3, r26	; 0x03
   101a4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   101a8:	4e c0       	rjmp	.+156    	; 0x10246 <__EEPROM_REGION_LENGTH__+0x246>
   101aa:	98 01       	movw	r18, r16
   101ac:	a7 01       	movw	r20, r14
   101ae:	64 ee       	ldi	r22, 0xE4	; 228
   101b0:	7b e0       	ldi	r23, 0x0B	; 11
   101b2:	c6 01       	movw	r24, r12
   101b4:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   101b8:	4c 01       	movw	r8, r24
   101ba:	89 2b       	or	r24, r25
    {
        if ( unlink(argv[ind]) != 0)
   101bc:	f9 f0       	breq	.+62     	; 0x101fc <__EEPROM_REGION_LENGTH__+0x1fc>
   101be:	73 01       	movw	r14, r6
   101c0:	ee 0c       	add	r14, r14
   101c2:	ff 1c       	adc	r15, r15
   101c4:	e4 0c       	add	r14, r4
   101c6:	f5 1c       	adc	r15, r5
   101c8:	f7 01       	movw	r30, r14
   101ca:	80 81       	ld	r24, Z
   101cc:	91 81       	ldd	r25, Z+1	; 0x01
   101ce:	0e 94 4f 75 	call	0xea9e	; 0xea9e <unlink>
   101d2:	89 2b       	or	r24, r25
   101d4:	09 f4       	brne	.+2      	; 0x101d8 <__EEPROM_REGION_LENGTH__+0x1d8>
        {
            printf("rm %s failed\n", argv[ind]);
   101d6:	b0 cf       	rjmp	.-160    	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
   101d8:	f7 01       	movw	r30, r14
   101da:	80 81       	ld	r24, Z
   101dc:	91 81       	ldd	r25, Z+1	; 0x01
   101de:	ed b7       	in	r30, 0x3d	; 61
   101e0:	fe b7       	in	r31, 0x3e	; 62
   101e2:	95 83       	std	Z+5, r25	; 0x05
   101e4:	84 83       	std	Z+4, r24	; 0x04
   101e6:	8f e4       	ldi	r24, 0x4F	; 79
   101e8:	9d e0       	ldi	r25, 0x0D	; 13
   101ea:	a0 e0       	ldi	r26, 0x00	; 0
   101ec:	81 83       	std	Z+1, r24	; 0x01
   101ee:	92 83       	std	Z+2, r25	; 0x02
   101f0:	a3 83       	std	Z+3, r26	; 0x03
   101f2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            return(0);
   101f6:	81 2c       	mov	r8, r1
   101f8:	91 2c       	mov	r9, r1
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   101fa:	25 c0       	rjmp	.+74     	; 0x10246 <__EEPROM_REGION_LENGTH__+0x246>
   101fc:	98 01       	movw	r18, r16
   101fe:	a7 01       	movw	r20, r14
   10200:	67 ee       	ldi	r22, 0xE7	; 231
   10202:	7b e0       	ldi	r23, 0x0B	; 11
   10204:	c6 01       	movw	r24, r12
   10206:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1020a:	89 2b       	or	r24, r25
    {
        if ( rmdir(argv[ind]) != 0)
   1020c:	a1 f3       	breq	.-24     	; 0x101f6 <__EEPROM_REGION_LENGTH__+0x1f6>
   1020e:	73 01       	movw	r14, r6
   10210:	ee 0c       	add	r14, r14
   10212:	ff 1c       	adc	r15, r15
   10214:	e4 0c       	add	r14, r4
   10216:	f5 1c       	adc	r15, r5
   10218:	f7 01       	movw	r30, r14
   1021a:	80 81       	ld	r24, Z
   1021c:	91 81       	ldd	r25, Z+1	; 0x01
   1021e:	0e 94 6e 75 	call	0xeadc	; 0xeadc <rmdir>
   10222:	89 2b       	or	r24, r25
   10224:	09 f4       	brne	.+2      	; 0x10228 <__EEPROM_REGION_LENGTH__+0x228>
        {
            printf("rmdir %s failed\n", argv[ind]);
   10226:	88 cf       	rjmp	.-240    	; 0x10138 <__EEPROM_REGION_LENGTH__+0x138>
   10228:	f7 01       	movw	r30, r14
   1022a:	80 81       	ld	r24, Z
   1022c:	91 81       	ldd	r25, Z+1	; 0x01
   1022e:	ed b7       	in	r30, 0x3d	; 61
   10230:	fe b7       	in	r31, 0x3e	; 62
   10232:	95 83       	std	Z+5, r25	; 0x05
   10234:	84 83       	std	Z+4, r24	; 0x04
   10236:	8e e3       	ldi	r24, 0x3E	; 62
   10238:	9d e0       	ldi	r25, 0x0D	; 13
   1023a:	a0 e0       	ldi	r26, 0x00	; 0
   1023c:	81 83       	std	Z+1, r24	; 0x01
   1023e:	92 83       	std	Z+2, r25	; 0x02
   10240:	a3 83       	std	Z+3, r26	; 0x03
   10242:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        return(1);
    }
#endif

    return(0);
}
   10246:	c4 01       	movw	r24, r8
   10248:	c9 5f       	subi	r28, 0xF9	; 249
   1024a:	de 4f       	sbci	r29, 0xFE	; 254
   1024c:	e0 e1       	ldi	r30, 0x10	; 16
   1024e:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__epilogue_restores__+0x4>

00010252 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10252:	00 d0       	rcall	.+0      	; 0x10254 <gpib_timer_init+0x2>
   10254:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10256:	61 e0       	ldi	r22, 0x01	; 1
   10258:	70 e0       	ldi	r23, 0x00	; 0
   1025a:	85 ee       	ldi	r24, 0xE5	; 229
   1025c:	92 e8       	ldi	r25, 0x82	; 130
   1025e:	0e 94 dd 31 	call	0x63ba	; 0x63ba <set_timers>
   10262:	01 96       	adiw	r24, 0x01	; 1
   10264:	51 f4       	brne	.+20     	; 0x1027a <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   10266:	80 ec       	ldi	r24, 0xC0	; 192
   10268:	9e e0       	ldi	r25, 0x0E	; 14
   1026a:	a0 e0       	ldi	r26, 0x00	; 0
   1026c:	ed b7       	in	r30, 0x3d	; 61
   1026e:	fe b7       	in	r31, 0x3e	; 62
   10270:	81 83       	std	Z+1, r24	; 0x01
   10272:	92 83       	std	Z+2, r25	; 0x02
   10274:	a3 83       	std	Z+3, r26	; 0x03
   10276:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    gpib_timer_reset();
}
   1027a:	95 d1       	rcall	.+810    	; 0x105a6 <gpib_timer_reset>
   1027c:	0f 90       	pop	r0
   1027e:	0f 90       	pop	r0
   10280:	0f 90       	pop	r0
   10282:	08 95       	ret

00010284 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10284:	28 2f       	mov	r18, r24
   10286:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10288:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1028a:	88 0f       	add	r24, r24
        if(mask & 1)
   1028c:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   1028e:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10290:	26 95       	lsr	r18
   10292:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10294:	d1 f7       	brne	.-12     	; 0x1028a <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10296:	08 95       	ret

00010298 <ppr_set>:
   10298:	f5 df       	rcall	.-22     	; 0x10284 <reverse_8bits>
   1029a:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <_ppr_reg>
   1029e:	0e 94 37 28 	call	0x506e	; 0x506e <SPI0_TXRX_Byte>
   102a2:	2a 9a       	sbi	0x05, 2	; 5
   102a4:	22 9a       	sbi	0x04, 2	; 4
   102a6:	2a 98       	cbi	0x05, 2	; 5
   102a8:	22 9a       	sbi	0x04, 2	; 4
   102aa:	08 95       	ret

000102ac <ppr_reg>:
   102ac:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_ppr_reg>
   102b0:	e9 cf       	rjmp	.-46     	; 0x10284 <reverse_8bits>
   102b2:	08 95       	ret

000102b4 <ppr_init>:
   102b4:	00 d0       	rcall	.+0      	; 0x102b6 <ppr_init+0x2>
   102b6:	1f 92       	push	r1
   102b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   102bc:	81 ff       	sbrs	r24, 1
   102be:	0a c0       	rjmp	.+20     	; 0x102d4 <ppr_init+0x20>
   102c0:	8d ea       	ldi	r24, 0xAD	; 173
   102c2:	9e e0       	ldi	r25, 0x0E	; 14
   102c4:	a0 e0       	ldi	r26, 0x00	; 0
   102c6:	ed b7       	in	r30, 0x3d	; 61
   102c8:	fe b7       	in	r31, 0x3e	; 62
   102ca:	81 83       	std	Z+1, r24	; 0x01
   102cc:	92 83       	std	Z+2, r25	; 0x02
   102ce:	a3 83       	std	Z+3, r26	; 0x03
   102d0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   102d4:	80 e0       	ldi	r24, 0x00	; 0
   102d6:	e0 df       	rcall	.-64     	; 0x10298 <ppr_set>
   102d8:	0f 90       	pop	r0
   102da:	0f 90       	pop	r0
   102dc:	0f 90       	pop	r0
   102de:	08 95       	ret

000102e0 <ppr_bit_set>:
   102e0:	21 e0       	ldi	r18, 0x01	; 1
   102e2:	30 e0       	ldi	r19, 0x00	; 0
   102e4:	01 c0       	rjmp	.+2      	; 0x102e8 <ppr_bit_set+0x8>
   102e6:	22 0f       	add	r18, r18
   102e8:	8a 95       	dec	r24
   102ea:	ea f7       	brpl	.-6      	; 0x102e6 <ppr_bit_set+0x6>
   102ec:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_ppr_reg>
   102f0:	82 2b       	or	r24, r18
   102f2:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <_ppr_reg>
   102f6:	d0 cf       	rjmp	.-96     	; 0x10298 <ppr_set>
   102f8:	08 95       	ret

000102fa <ppr_bit_clr>:
   102fa:	21 e0       	ldi	r18, 0x01	; 1
   102fc:	30 e0       	ldi	r19, 0x00	; 0
   102fe:	01 c0       	rjmp	.+2      	; 0x10302 <ppr_bit_clr+0x8>
   10300:	22 0f       	add	r18, r18
   10302:	8a 95       	dec	r24
   10304:	ea f7       	brpl	.-6      	; 0x10300 <ppr_bit_clr+0x6>
   10306:	20 95       	com	r18
   10308:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <_ppr_reg>
   1030c:	82 23       	and	r24, r18
   1030e:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <_ppr_reg>
   10312:	c2 cf       	rjmp	.-124    	; 0x10298 <ppr_set>
   10314:	08 95       	ret

00010316 <dbf_open>:
   10316:	0f 93       	push	r16
   10318:	1f 93       	push	r17
   1031a:	cf 93       	push	r28
   1031c:	df 93       	push	r29
   1031e:	00 d0       	rcall	.+0      	; 0x10320 <dbf_open+0xa>
   10320:	00 d0       	rcall	.+0      	; 0x10322 <dbf_open+0xc>
   10322:	1f 92       	push	r1
   10324:	8b 01       	movw	r16, r22
   10326:	0e 94 2a 57 	call	0xae54	; 0xae54 <f_open>
   1032a:	ec 01       	movw	r28, r24
   1032c:	89 2b       	or	r24, r25
   1032e:	79 f0       	breq	.+30     	; 0x1034e <dbf_open+0x38>
   10330:	ed b7       	in	r30, 0x3d	; 61
   10332:	fe b7       	in	r31, 0x3e	; 62
   10334:	15 83       	std	Z+5, r17	; 0x05
   10336:	04 83       	std	Z+4, r16	; 0x04
   10338:	8c e9       	ldi	r24, 0x9C	; 156
   1033a:	9e e0       	ldi	r25, 0x0E	; 14
   1033c:	a0 e0       	ldi	r26, 0x00	; 0
   1033e:	81 83       	std	Z+1, r24	; 0x01
   10340:	92 83       	std	Z+2, r25	; 0x02
   10342:	a3 83       	std	Z+3, r26	; 0x03
   10344:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   10348:	ce 01       	movw	r24, r28
   1034a:	0e 94 04 6e 	call	0xdc08	; 0xdc08 <put_rc>
   1034e:	ce 01       	movw	r24, r28
   10350:	cd b7       	in	r28, 0x3d	; 61
   10352:	de b7       	in	r29, 0x3e	; 62
   10354:	25 96       	adiw	r28, 0x05	; 5
   10356:	e4 e0       	ldi	r30, 0x04	; 4
   10358:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

0001035c <dbf_read>:
   1035c:	cf 93       	push	r28
   1035e:	df 93       	push	r29
   10360:	00 d0       	rcall	.+0      	; 0x10362 <dbf_read+0x6>
   10362:	1f 92       	push	r1
   10364:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <f_read>
   10368:	ec 01       	movw	r28, r24
   1036a:	89 2b       	or	r24, r25
   1036c:	69 f0       	breq	.+26     	; 0x10388 <dbf_read+0x2c>
   1036e:	8f e8       	ldi	r24, 0x8F	; 143
   10370:	9e e0       	ldi	r25, 0x0E	; 14
   10372:	a0 e0       	ldi	r26, 0x00	; 0
   10374:	ed b7       	in	r30, 0x3d	; 61
   10376:	fe b7       	in	r31, 0x3e	; 62
   10378:	81 83       	std	Z+1, r24	; 0x01
   1037a:	92 83       	std	Z+2, r25	; 0x02
   1037c:	a3 83       	std	Z+3, r26	; 0x03
   1037e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   10382:	ce 01       	movw	r24, r28
   10384:	0e 94 04 6e 	call	0xdc08	; 0xdc08 <put_rc>
   10388:	ce 01       	movw	r24, r28
   1038a:	cd b7       	in	r28, 0x3d	; 61
   1038c:	de b7       	in	r29, 0x3e	; 62
   1038e:	23 96       	adiw	r28, 0x03	; 3
   10390:	e2 e0       	ldi	r30, 0x02	; 2
   10392:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00010396 <dbf_write>:
   10396:	cf 93       	push	r28
   10398:	df 93       	push	r29
   1039a:	00 d0       	rcall	.+0      	; 0x1039c <dbf_write+0x6>
   1039c:	1f 92       	push	r1
   1039e:	0e 94 2d 5a 	call	0xb45a	; 0xb45a <f_write>
   103a2:	ec 01       	movw	r28, r24
   103a4:	89 2b       	or	r24, r25
   103a6:	69 f0       	breq	.+26     	; 0x103c2 <dbf_write+0x2c>
   103a8:	81 e8       	ldi	r24, 0x81	; 129
   103aa:	9e e0       	ldi	r25, 0x0E	; 14
   103ac:	a0 e0       	ldi	r26, 0x00	; 0
   103ae:	ed b7       	in	r30, 0x3d	; 61
   103b0:	fe b7       	in	r31, 0x3e	; 62
   103b2:	81 83       	std	Z+1, r24	; 0x01
   103b4:	92 83       	std	Z+2, r25	; 0x02
   103b6:	a3 83       	std	Z+3, r26	; 0x03
   103b8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   103bc:	ce 01       	movw	r24, r28
   103be:	0e 94 04 6e 	call	0xdc08	; 0xdc08 <put_rc>
   103c2:	ce 01       	movw	r24, r28
   103c4:	cd b7       	in	r28, 0x3d	; 61
   103c6:	de b7       	in	r29, 0x3e	; 62
   103c8:	23 96       	adiw	r28, 0x03	; 3
   103ca:	e2 e0       	ldi	r30, 0x02	; 2
   103cc:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000103d0 <dbf_lseek>:
   103d0:	cf 93       	push	r28
   103d2:	df 93       	push	r29
   103d4:	00 d0       	rcall	.+0      	; 0x103d6 <dbf_lseek+0x6>
   103d6:	1f 92       	push	r1
   103d8:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <f_lseek>
   103dc:	ec 01       	movw	r28, r24
   103de:	89 2b       	or	r24, r25
   103e0:	69 f0       	breq	.+26     	; 0x103fc <dbf_lseek+0x2c>
   103e2:	84 e7       	ldi	r24, 0x74	; 116
   103e4:	9e e0       	ldi	r25, 0x0E	; 14
   103e6:	a0 e0       	ldi	r26, 0x00	; 0
   103e8:	ed b7       	in	r30, 0x3d	; 61
   103ea:	fe b7       	in	r31, 0x3e	; 62
   103ec:	81 83       	std	Z+1, r24	; 0x01
   103ee:	92 83       	std	Z+2, r25	; 0x02
   103f0:	a3 83       	std	Z+3, r26	; 0x03
   103f2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   103f6:	ce 01       	movw	r24, r28
   103f8:	0e 94 04 6e 	call	0xdc08	; 0xdc08 <put_rc>
   103fc:	ce 01       	movw	r24, r28
   103fe:	cd b7       	in	r28, 0x3d	; 61
   10400:	de b7       	in	r29, 0x3e	; 62
   10402:	23 96       	adiw	r28, 0x03	; 3
   10404:	e2 e0       	ldi	r30, 0x02	; 2
   10406:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0001040a <dbf_close>:
   1040a:	cf 93       	push	r28
   1040c:	df 93       	push	r29
   1040e:	00 d0       	rcall	.+0      	; 0x10410 <dbf_close+0x6>
   10410:	1f 92       	push	r1
   10412:	0e 94 44 5c 	call	0xb888	; 0xb888 <f_close>
   10416:	ec 01       	movw	r28, r24
   10418:	89 2b       	or	r24, r25
   1041a:	69 f0       	breq	.+26     	; 0x10436 <dbf_close+0x2c>
   1041c:	86 e6       	ldi	r24, 0x66	; 102
   1041e:	9e e0       	ldi	r25, 0x0E	; 14
   10420:	a0 e0       	ldi	r26, 0x00	; 0
   10422:	ed b7       	in	r30, 0x3d	; 61
   10424:	fe b7       	in	r31, 0x3e	; 62
   10426:	81 83       	std	Z+1, r24	; 0x01
   10428:	92 83       	std	Z+2, r25	; 0x02
   1042a:	a3 83       	std	Z+3, r26	; 0x03
   1042c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   10430:	ce 01       	movw	r24, r28
   10432:	0e 94 04 6e 	call	0xdc08	; 0xdc08 <put_rc>
   10436:	ce 01       	movw	r24, r28
   10438:	cd b7       	in	r28, 0x3d	; 61
   1043a:	de b7       	in	r29, 0x3e	; 62
   1043c:	23 96       	adiw	r28, 0x03	; 3
   1043e:	e2 e0       	ldi	r30, 0x02	; 2
   10440:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00010444 <dbf_open_read>:
   10444:	a6 e2       	ldi	r26, 0x26	; 38
   10446:	b2 e0       	ldi	r27, 0x02	; 2
   10448:	e8 e2       	ldi	r30, 0x28	; 40
   1044a:	f2 e8       	ldi	r31, 0x82	; 130
   1044c:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
   10450:	4a 01       	movw	r8, r20
   10452:	5b 01       	movw	r10, r22
   10454:	69 01       	movw	r12, r18
   10456:	cb 5d       	subi	r28, 0xDB	; 219
   10458:	dd 4f       	sbci	r29, 0xFD	; 253
   1045a:	19 82       	std	Y+1, r1	; 0x01
   1045c:	18 82       	st	Y, r1
   1045e:	c5 52       	subi	r28, 0x25	; 37
   10460:	d2 40       	sbci	r29, 0x02	; 2
   10462:	43 e0       	ldi	r20, 0x03	; 3
   10464:	bc 01       	movw	r22, r24
   10466:	ce 01       	movw	r24, r28
   10468:	01 96       	adiw	r24, 0x01	; 1
   1046a:	55 df       	rcall	.-342    	; 0x10316 <dbf_open>
   1046c:	89 2b       	or	r24, r25
   1046e:	19 f0       	breq	.+6      	; 0x10476 <dbf_open_read+0x32>
   10470:	81 e1       	ldi	r24, 0x11	; 17
   10472:	90 e0       	ldi	r25, 0x00	; 0
   10474:	2f c0       	rjmp	.+94     	; 0x104d4 <dbf_open_read+0x90>
   10476:	b5 01       	movw	r22, r10
   10478:	a4 01       	movw	r20, r8
   1047a:	ce 01       	movw	r24, r28
   1047c:	01 96       	adiw	r24, 0x01	; 1
   1047e:	a8 df       	rcall	.-176    	; 0x103d0 <dbf_lseek>
   10480:	89 2b       	or	r24, r25
   10482:	59 f0       	breq	.+22     	; 0x1049a <dbf_open_read+0x56>
   10484:	85 e0       	ldi	r24, 0x05	; 5
   10486:	90 e0       	ldi	r25, 0x00	; 0
   10488:	f7 01       	movw	r30, r14
   1048a:	91 83       	std	Z+1, r25	; 0x01
   1048c:	80 83       	st	Z, r24
   1048e:	ce 01       	movw	r24, r28
   10490:	01 96       	adiw	r24, 0x01	; 1
   10492:	bb df       	rcall	.-138    	; 0x1040a <dbf_close>
   10494:	8f ef       	ldi	r24, 0xFF	; 255
   10496:	9f ef       	ldi	r25, 0xFF	; 255
   10498:	27 c0       	rjmp	.+78     	; 0x104e8 <dbf_open_read+0xa4>
   1049a:	9e 01       	movw	r18, r28
   1049c:	2b 5d       	subi	r18, 0xDB	; 219
   1049e:	3d 4f       	sbci	r19, 0xFD	; 253
   104a0:	a8 01       	movw	r20, r16
   104a2:	b6 01       	movw	r22, r12
   104a4:	ce 01       	movw	r24, r28
   104a6:	01 96       	adiw	r24, 0x01	; 1
   104a8:	59 df       	rcall	.-334    	; 0x1035c <dbf_read>
   104aa:	89 2b       	or	r24, r25
   104ac:	49 f4       	brne	.+18     	; 0x104c0 <dbf_open_read+0x7c>
   104ae:	cb 5d       	subi	r28, 0xDB	; 219
   104b0:	dd 4f       	sbci	r29, 0xFD	; 253
   104b2:	88 81       	ld	r24, Y
   104b4:	99 81       	ldd	r25, Y+1	; 0x01
   104b6:	c5 52       	subi	r28, 0x25	; 37
   104b8:	d2 40       	sbci	r29, 0x02	; 2
   104ba:	08 17       	cp	r16, r24
   104bc:	19 07       	cpc	r17, r25
   104be:	19 f0       	breq	.+6      	; 0x104c6 <dbf_open_read+0x82>
   104c0:	81 e0       	ldi	r24, 0x01	; 1
   104c2:	90 e0       	ldi	r25, 0x00	; 0
   104c4:	e1 cf       	rjmp	.-62     	; 0x10488 <dbf_open_read+0x44>
   104c6:	ce 01       	movw	r24, r28
   104c8:	01 96       	adiw	r24, 0x01	; 1
   104ca:	9f df       	rcall	.-194    	; 0x1040a <dbf_close>
   104cc:	89 2b       	or	r24, r25
   104ce:	31 f0       	breq	.+12     	; 0x104dc <dbf_open_read+0x98>
   104d0:	80 e1       	ldi	r24, 0x10	; 16
   104d2:	90 e0       	ldi	r25, 0x00	; 0
   104d4:	f7 01       	movw	r30, r14
   104d6:	91 83       	std	Z+1, r25	; 0x01
   104d8:	80 83       	st	Z, r24
   104da:	dc cf       	rjmp	.-72     	; 0x10494 <dbf_open_read+0x50>
   104dc:	cb 5d       	subi	r28, 0xDB	; 219
   104de:	dd 4f       	sbci	r29, 0xFD	; 253
   104e0:	88 81       	ld	r24, Y
   104e2:	99 81       	ldd	r25, Y+1	; 0x01
   104e4:	c5 52       	subi	r28, 0x25	; 37
   104e6:	d2 40       	sbci	r29, 0x02	; 2
   104e8:	ca 5d       	subi	r28, 0xDA	; 218
   104ea:	dd 4f       	sbci	r29, 0xFD	; 253
   104ec:	ec e0       	ldi	r30, 0x0C	; 12
   104ee:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

000104f2 <dbf_open_write>:
   104f2:	a6 e2       	ldi	r26, 0x26	; 38
   104f4:	b2 e0       	ldi	r27, 0x02	; 2
   104f6:	ef e7       	ldi	r30, 0x7F	; 127
   104f8:	f2 e8       	ldi	r31, 0x82	; 130
   104fa:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
   104fe:	4a 01       	movw	r8, r20
   10500:	5b 01       	movw	r10, r22
   10502:	69 01       	movw	r12, r18
   10504:	cb 5d       	subi	r28, 0xDB	; 219
   10506:	dd 4f       	sbci	r29, 0xFD	; 253
   10508:	19 82       	std	Y+1, r1	; 0x01
   1050a:	18 82       	st	Y, r1
   1050c:	c5 52       	subi	r28, 0x25	; 37
   1050e:	d2 40       	sbci	r29, 0x02	; 2
   10510:	43 e0       	ldi	r20, 0x03	; 3
   10512:	bc 01       	movw	r22, r24
   10514:	ce 01       	movw	r24, r28
   10516:	01 96       	adiw	r24, 0x01	; 1
   10518:	fe de       	rcall	.-516    	; 0x10316 <dbf_open>
   1051a:	89 2b       	or	r24, r25
   1051c:	19 f0       	breq	.+6      	; 0x10524 <dbf_open_write+0x32>
   1051e:	81 e1       	ldi	r24, 0x11	; 17
   10520:	90 e0       	ldi	r25, 0x00	; 0
   10522:	2f c0       	rjmp	.+94     	; 0x10582 <dbf_open_write+0x90>
   10524:	b5 01       	movw	r22, r10
   10526:	a4 01       	movw	r20, r8
   10528:	ce 01       	movw	r24, r28
   1052a:	01 96       	adiw	r24, 0x01	; 1
   1052c:	51 df       	rcall	.-350    	; 0x103d0 <dbf_lseek>
   1052e:	89 2b       	or	r24, r25
   10530:	59 f0       	breq	.+22     	; 0x10548 <dbf_open_write+0x56>
   10532:	85 e0       	ldi	r24, 0x05	; 5
   10534:	90 e0       	ldi	r25, 0x00	; 0
   10536:	f7 01       	movw	r30, r14
   10538:	91 83       	std	Z+1, r25	; 0x01
   1053a:	80 83       	st	Z, r24
   1053c:	ce 01       	movw	r24, r28
   1053e:	01 96       	adiw	r24, 0x01	; 1
   10540:	64 df       	rcall	.-312    	; 0x1040a <dbf_close>
   10542:	8f ef       	ldi	r24, 0xFF	; 255
   10544:	9f ef       	ldi	r25, 0xFF	; 255
   10546:	27 c0       	rjmp	.+78     	; 0x10596 <dbf_open_write+0xa4>
   10548:	9e 01       	movw	r18, r28
   1054a:	2b 5d       	subi	r18, 0xDB	; 219
   1054c:	3d 4f       	sbci	r19, 0xFD	; 253
   1054e:	a8 01       	movw	r20, r16
   10550:	b6 01       	movw	r22, r12
   10552:	ce 01       	movw	r24, r28
   10554:	01 96       	adiw	r24, 0x01	; 1
   10556:	1f df       	rcall	.-450    	; 0x10396 <dbf_write>
   10558:	89 2b       	or	r24, r25
   1055a:	49 f4       	brne	.+18     	; 0x1056e <dbf_open_write+0x7c>
   1055c:	cb 5d       	subi	r28, 0xDB	; 219
   1055e:	dd 4f       	sbci	r29, 0xFD	; 253
   10560:	88 81       	ld	r24, Y
   10562:	99 81       	ldd	r25, Y+1	; 0x01
   10564:	c5 52       	subi	r28, 0x25	; 37
   10566:	d2 40       	sbci	r29, 0x02	; 2
   10568:	08 17       	cp	r16, r24
   1056a:	19 07       	cpc	r17, r25
   1056c:	19 f0       	breq	.+6      	; 0x10574 <dbf_open_write+0x82>
   1056e:	81 e0       	ldi	r24, 0x01	; 1
   10570:	90 e0       	ldi	r25, 0x00	; 0
   10572:	e1 cf       	rjmp	.-62     	; 0x10536 <dbf_open_write+0x44>
   10574:	ce 01       	movw	r24, r28
   10576:	01 96       	adiw	r24, 0x01	; 1
   10578:	48 df       	rcall	.-368    	; 0x1040a <dbf_close>
   1057a:	89 2b       	or	r24, r25
   1057c:	31 f0       	breq	.+12     	; 0x1058a <dbf_open_write+0x98>
   1057e:	80 e1       	ldi	r24, 0x10	; 16
   10580:	90 e0       	ldi	r25, 0x00	; 0
   10582:	f7 01       	movw	r30, r14
   10584:	91 83       	std	Z+1, r25	; 0x01
   10586:	80 83       	st	Z, r24
   10588:	dc cf       	rjmp	.-72     	; 0x10542 <dbf_open_write+0x50>
   1058a:	cb 5d       	subi	r28, 0xDB	; 219
   1058c:	dd 4f       	sbci	r29, 0xFD	; 253
   1058e:	88 81       	ld	r24, Y
   10590:	99 81       	ldd	r25, Y+1	; 0x01
   10592:	c5 52       	subi	r28, 0x25	; 37
   10594:	d2 40       	sbci	r29, 0x02	; 2
   10596:	ca 5d       	subi	r28, 0xDA	; 218
   10598:	dd 4f       	sbci	r29, 0xFD	; 253
   1059a:	ec e0       	ldi	r30, 0x0C	; 12
   1059c:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

000105a0 <gpib_timer_elapsed_begin>:
   105a0:	0c 94 9d 32 	jmp	0x653a	; 0x653a <clock_elapsed_begin>
   105a4:	08 95       	ret

000105a6 <gpib_timer_reset>:
   105a6:	f8 94       	cli
   105a8:	eb ee       	ldi	r30, 0xEB	; 235
   105aa:	fc e1       	ldi	r31, 0x1C	; 28
   105ac:	10 82       	st	Z, r1
   105ae:	11 82       	std	Z+1, r1	; 0x01
   105b0:	12 82       	std	Z+2, r1	; 0x02
   105b2:	13 82       	std	Z+3, r1	; 0x03
   105b4:	14 82       	std	Z+4, r1	; 0x04
   105b6:	15 82       	std	Z+5, r1	; 0x05
   105b8:	16 82       	std	Z+6, r1	; 0x06
   105ba:	17 82       	std	Z+7, r1	; 0x07
   105bc:	81 e0       	ldi	r24, 0x01	; 1
   105be:	80 87       	std	Z+8, r24	; 0x08
   105c0:	78 94       	sei
   105c2:	08 95       	ret

000105c4 <gpib_timer_elapsed_end>:
   105c4:	0c 94 a3 32 	jmp	0x6546	; 0x6546 <clock_elapsed_end>
   105c8:	08 95       	ret

000105ca <gpib_timer_task>:
   105ca:	f8 94       	cli
   105cc:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x4>
   105d0:	90 91 f0 1c 	lds	r25, 0x1CF0	; 0x801cf0 <gpib_timer+0x5>
   105d4:	a0 91 f1 1c 	lds	r26, 0x1CF1	; 0x801cf1 <gpib_timer+0x6>
   105d8:	b0 91 f2 1c 	lds	r27, 0x1CF2	; 0x801cf2 <gpib_timer+0x7>
   105dc:	89 2b       	or	r24, r25
   105de:	8a 2b       	or	r24, r26
   105e0:	8b 2b       	or	r24, r27
   105e2:	a1 f0       	breq	.+40     	; 0x1060c <gpib_timer_task+0x42>
   105e4:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x4>
   105e8:	90 91 f0 1c 	lds	r25, 0x1CF0	; 0x801cf0 <gpib_timer+0x5>
   105ec:	a0 91 f1 1c 	lds	r26, 0x1CF1	; 0x801cf1 <gpib_timer+0x6>
   105f0:	b0 91 f2 1c 	lds	r27, 0x1CF2	; 0x801cf2 <gpib_timer+0x7>
   105f4:	01 97       	sbiw	r24, 0x01	; 1
   105f6:	a1 09       	sbc	r26, r1
   105f8:	b1 09       	sbc	r27, r1
   105fa:	80 93 ef 1c 	sts	0x1CEF, r24	; 0x801cef <gpib_timer+0x4>
   105fe:	90 93 f0 1c 	sts	0x1CF0, r25	; 0x801cf0 <gpib_timer+0x5>
   10602:	a0 93 f1 1c 	sts	0x1CF1, r26	; 0x801cf1 <gpib_timer+0x6>
   10606:	b0 93 f2 1c 	sts	0x1CF2, r27	; 0x801cf2 <gpib_timer+0x7>
   1060a:	03 c0       	rjmp	.+6      	; 0x10612 <gpib_timer_task+0x48>
   1060c:	81 e0       	ldi	r24, 0x01	; 1
   1060e:	80 93 f3 1c 	sts	0x1CF3, r24	; 0x801cf3 <gpib_timer+0x8>
   10612:	78 94       	sei
   10614:	08 95       	ret

00010616 <gpib_timeout_set>:
   10616:	f8 94       	cli
   10618:	eb ee       	ldi	r30, 0xEB	; 235
   1061a:	fc e1       	ldi	r31, 0x1C	; 28
   1061c:	64 83       	std	Z+4, r22	; 0x04
   1061e:	75 83       	std	Z+5, r23	; 0x05
   10620:	86 83       	std	Z+6, r24	; 0x06
   10622:	97 83       	std	Z+7, r25	; 0x07
   10624:	10 86       	std	Z+8, r1	; 0x08
   10626:	78 94       	sei
   10628:	08 95       	ret

0001062a <gpib_bus_read_init>:
   1062a:	54 98       	cbi	0x0a, 4	; 10
   1062c:	57 98       	cbi	0x0a, 7	; 10
   1062e:	45 98       	cbi	0x08, 5	; 8
   10630:	3d 9a       	sbi	0x07, 5	; 7
   10632:	11 b8       	out	0x01, r1	; 1
   10634:	2f ef       	ldi	r18, 0xFF	; 255
   10636:	22 b9       	out	0x02, r18	; 2
   10638:	43 98       	cbi	0x08, 3	; 8
   1063a:	3b 9a       	sbi	0x07, 3	; 7
   1063c:	21 98       	cbi	0x04, 1	; 4
   1063e:	56 98       	cbi	0x0a, 6	; 10
   10640:	20 98       	cbi	0x04, 0	; 4
   10642:	55 98       	cbi	0x0a, 5	; 10
   10644:	89 2b       	or	r24, r25
   10646:	39 f4       	brne	.+14     	; 0x10656 <gpib_bus_read_init+0x2c>
   10648:	52 98       	cbi	0x0a, 2	; 10
   1064a:	53 98       	cbi	0x0a, 3	; 10
   1064c:	8d e0       	ldi	r24, 0x0D	; 13
   1064e:	8a 95       	dec	r24
   10650:	f1 f7       	brne	.-4      	; 0x1064e <gpib_bus_read_init+0x24>
   10652:	00 00       	nop
   10654:	04 c0       	rjmp	.+8      	; 0x1065e <gpib_bus_read_init+0x34>
   10656:	5b 98       	cbi	0x0b, 3	; 11
   10658:	53 9a       	sbi	0x0a, 3	; 10
   1065a:	5a 98       	cbi	0x0b, 2	; 11
   1065c:	52 9a       	sbi	0x0a, 2	; 10
   1065e:	42 98       	cbi	0x08, 2	; 8
   10660:	3a 9a       	sbi	0x07, 2	; 7
   10662:	44 9a       	sbi	0x08, 4	; 8
   10664:	3c 9a       	sbi	0x07, 4	; 7
   10666:	8d e0       	ldi	r24, 0x0D	; 13
   10668:	8a 95       	dec	r24
   1066a:	f1 f7       	brne	.-4      	; 0x10668 <gpib_bus_read_init+0x3e>
   1066c:	00 00       	nop
   1066e:	08 95       	ret

00010670 <gpib_bus_init>:
   10670:	00 d0       	rcall	.+0      	; 0x10672 <gpib_bus_init+0x2>
   10672:	1f 92       	push	r1
   10674:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <gpib_unread_f>
   10678:	11 b8       	out	0x01, r1	; 1
   1067a:	8f ef       	ldi	r24, 0xFF	; 255
   1067c:	82 b9       	out	0x02, r24	; 2
   1067e:	21 98       	cbi	0x04, 1	; 4
   10680:	52 98       	cbi	0x0a, 2	; 10
   10682:	53 98       	cbi	0x0a, 3	; 10
   10684:	54 98       	cbi	0x0a, 4	; 10
   10686:	57 98       	cbi	0x0a, 7	; 10
   10688:	56 98       	cbi	0x0a, 6	; 10
   1068a:	20 98       	cbi	0x04, 0	; 4
   1068c:	55 98       	cbi	0x0a, 5	; 10
   1068e:	45 98       	cbi	0x08, 5	; 8
   10690:	3d 9a       	sbi	0x07, 5	; 7
   10692:	43 98       	cbi	0x08, 3	; 8
   10694:	3b 9a       	sbi	0x07, 3	; 7
   10696:	42 98       	cbi	0x08, 2	; 8
   10698:	3a 9a       	sbi	0x07, 2	; 7
   1069a:	44 9a       	sbi	0x08, 4	; 8
   1069c:	3c 9a       	sbi	0x07, 4	; 7
   1069e:	8d e0       	ldi	r24, 0x0D	; 13
   106a0:	8a 95       	dec	r24
   106a2:	f1 f7       	brne	.-4      	; 0x106a0 <gpib_bus_init+0x30>
   106a4:	00 00       	nop
   106a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   106aa:	82 ff       	sbrs	r24, 2
   106ac:	0a c0       	rjmp	.+20     	; 0x106c2 <gpib_bus_init+0x52>
   106ae:	87 ea       	ldi	r24, 0xA7	; 167
   106b0:	91 e1       	ldi	r25, 0x11	; 17
   106b2:	a0 e0       	ldi	r26, 0x00	; 0
   106b4:	ed b7       	in	r30, 0x3d	; 61
   106b6:	fe b7       	in	r31, 0x3e	; 62
   106b8:	81 83       	std	Z+1, r24	; 0x01
   106ba:	92 83       	std	Z+2, r25	; 0x02
   106bc:	a3 83       	std	Z+3, r26	; 0x03
   106be:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   106c2:	0f 90       	pop	r0
   106c4:	0f 90       	pop	r0
   106c6:	0f 90       	pop	r0
   106c8:	08 95       	ret

000106ca <gpib_state_init>:
   106ca:	00 d0       	rcall	.+0      	; 0x106cc <gpib_state_init+0x2>
   106cc:	1f 92       	push	r1
   106ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   106d2:	82 ff       	sbrs	r24, 2
   106d4:	0a c0       	rjmp	.+20     	; 0x106ea <gpib_state_init+0x20>
   106d6:	84 e9       	ldi	r24, 0x94	; 148
   106d8:	91 e1       	ldi	r25, 0x11	; 17
   106da:	a0 e0       	ldi	r26, 0x00	; 0
   106dc:	ed b7       	in	r30, 0x3d	; 61
   106de:	fe b7       	in	r31, 0x3e	; 62
   106e0:	81 83       	std	Z+1, r24	; 0x01
   106e2:	92 83       	std	Z+2, r25	; 0x02
   106e4:	a3 83       	std	Z+3, r26	; 0x03
   106e6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   106ea:	e4 dd       	rcall	.-1080   	; 0x102b4 <ppr_init>
   106ec:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <listen_cleanup>
   106f0:	0e 94 36 8f 	call	0x11e6c	; 0x11e6c <talk_cleanup>
   106f4:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <spoll>
   106f8:	10 92 fa 1e 	sts	0x1EFA, r1	; 0x801efa <talking>
   106fc:	10 92 fd 1e 	sts	0x1EFD, r1	; 0x801efd <talking_last>
   10700:	10 92 fc 1e 	sts	0x1EFC, r1	; 0x801efc <listening>
   10704:	10 92 f6 1e 	sts	0x1EF6, r1	; 0x801ef6 <listening_last>
   10708:	10 92 f5 1c 	sts	0x1CF5, r1	; 0x801cf5 <lastcmd+0x1>
   1070c:	10 92 f4 1c 	sts	0x1CF4, r1	; 0x801cf4 <lastcmd>
   10710:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <current+0x1>
   10714:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <current>
   10718:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <secondary>
   1071c:	0f 90       	pop	r0
   1071e:	0f 90       	pop	r0
   10720:	0f 90       	pop	r0
   10722:	08 95       	ret

00010724 <gpib_enable_PPR>:
   10724:	cf 93       	push	r28
   10726:	df 93       	push	r29
   10728:	ad b7       	in	r26, 0x3d	; 61
   1072a:	be b7       	in	r27, 0x3e	; 62
   1072c:	17 97       	sbiw	r26, 0x07	; 7
   1072e:	0f b6       	in	r0, 0x3f	; 63
   10730:	f8 94       	cli
   10732:	be bf       	out	0x3e, r27	; 62
   10734:	0f be       	out	0x3f, r0	; 63
   10736:	ad bf       	out	0x3d, r26	; 61
   10738:	ec 01       	movw	r28, r24
   1073a:	88 30       	cpi	r24, 0x08	; 8
   1073c:	91 05       	cpc	r25, r1
   1073e:	68 f0       	brcs	.+26     	; 0x1075a <gpib_enable_PPR+0x36>
   10740:	ed b7       	in	r30, 0x3d	; 61
   10742:	fe b7       	in	r31, 0x3e	; 62
   10744:	95 83       	std	Z+5, r25	; 0x05
   10746:	84 83       	std	Z+4, r24	; 0x04
   10748:	8e e6       	ldi	r24, 0x6E	; 110
   1074a:	91 e1       	ldi	r25, 0x11	; 17
   1074c:	a0 e0       	ldi	r26, 0x00	; 0
   1074e:	81 83       	std	Z+1, r24	; 0x01
   10750:	92 83       	std	Z+2, r25	; 0x02
   10752:	a3 83       	std	Z+3, r26	; 0x03
   10754:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   10758:	15 c0       	rjmp	.+42     	; 0x10784 <gpib_enable_PPR+0x60>
   1075a:	c2 dd       	rcall	.-1148   	; 0x102e0 <ppr_bit_set>
   1075c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10760:	81 ff       	sbrs	r24, 1
   10762:	10 c0       	rjmp	.+32     	; 0x10784 <gpib_enable_PPR+0x60>
   10764:	a3 dd       	rcall	.-1210   	; 0x102ac <ppr_reg>
   10766:	90 e0       	ldi	r25, 0x00	; 0
   10768:	ed b7       	in	r30, 0x3d	; 61
   1076a:	fe b7       	in	r31, 0x3e	; 62
   1076c:	97 83       	std	Z+7, r25	; 0x07
   1076e:	86 83       	std	Z+6, r24	; 0x06
   10770:	d5 83       	std	Z+5, r29	; 0x05
   10772:	c4 83       	std	Z+4, r28	; 0x04
   10774:	83 e5       	ldi	r24, 0x53	; 83
   10776:	91 e1       	ldi	r25, 0x11	; 17
   10778:	a0 e0       	ldi	r26, 0x00	; 0
   1077a:	81 83       	std	Z+1, r24	; 0x01
   1077c:	92 83       	std	Z+2, r25	; 0x02
   1077e:	a3 83       	std	Z+3, r26	; 0x03
   10780:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   10784:	cd b7       	in	r28, 0x3d	; 61
   10786:	de b7       	in	r29, 0x3e	; 62
   10788:	27 96       	adiw	r28, 0x07	; 7
   1078a:	e2 e0       	ldi	r30, 0x02	; 2
   1078c:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00010790 <gpib_disable_PPR>:
   10790:	cf 93       	push	r28
   10792:	df 93       	push	r29
   10794:	ad b7       	in	r26, 0x3d	; 61
   10796:	be b7       	in	r27, 0x3e	; 62
   10798:	17 97       	sbiw	r26, 0x07	; 7
   1079a:	0f b6       	in	r0, 0x3f	; 63
   1079c:	f8 94       	cli
   1079e:	be bf       	out	0x3e, r27	; 62
   107a0:	0f be       	out	0x3f, r0	; 63
   107a2:	ad bf       	out	0x3d, r26	; 61
   107a4:	ec 01       	movw	r28, r24
   107a6:	88 30       	cpi	r24, 0x08	; 8
   107a8:	91 05       	cpc	r25, r1
   107aa:	68 f0       	brcs	.+26     	; 0x107c6 <gpib_disable_PPR+0x36>
   107ac:	ed b7       	in	r30, 0x3d	; 61
   107ae:	fe b7       	in	r31, 0x3e	; 62
   107b0:	95 83       	std	Z+5, r25	; 0x05
   107b2:	84 83       	std	Z+4, r24	; 0x04
   107b4:	8c e2       	ldi	r24, 0x2C	; 44
   107b6:	91 e1       	ldi	r25, 0x11	; 17
   107b8:	a0 e0       	ldi	r26, 0x00	; 0
   107ba:	81 83       	std	Z+1, r24	; 0x01
   107bc:	92 83       	std	Z+2, r25	; 0x02
   107be:	a3 83       	std	Z+3, r26	; 0x03
   107c0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   107c4:	15 c0       	rjmp	.+42     	; 0x107f0 <gpib_disable_PPR+0x60>
   107c6:	99 dd       	rcall	.-1230   	; 0x102fa <ppr_bit_clr>
   107c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   107cc:	81 ff       	sbrs	r24, 1
   107ce:	10 c0       	rjmp	.+32     	; 0x107f0 <gpib_disable_PPR+0x60>
   107d0:	6d dd       	rcall	.-1318   	; 0x102ac <ppr_reg>
   107d2:	90 e0       	ldi	r25, 0x00	; 0
   107d4:	ed b7       	in	r30, 0x3d	; 61
   107d6:	fe b7       	in	r31, 0x3e	; 62
   107d8:	97 83       	std	Z+7, r25	; 0x07
   107da:	86 83       	std	Z+6, r24	; 0x06
   107dc:	d5 83       	std	Z+5, r29	; 0x05
   107de:	c4 83       	std	Z+4, r28	; 0x04
   107e0:	81 e1       	ldi	r24, 0x11	; 17
   107e2:	91 e1       	ldi	r25, 0x11	; 17
   107e4:	a0 e0       	ldi	r26, 0x00	; 0
   107e6:	81 83       	std	Z+1, r24	; 0x01
   107e8:	92 83       	std	Z+2, r25	; 0x02
   107ea:	a3 83       	std	Z+3, r26	; 0x03
   107ec:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   107f0:	cd b7       	in	r28, 0x3d	; 61
   107f2:	de b7       	in	r29, 0x3e	; 62
   107f4:	27 96       	adiw	r28, 0x07	; 7
   107f6:	e2 e0       	ldi	r30, 0x02	; 2
   107f8:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000107fc <gpib_assert_ifc>:
   107fc:	00 d0       	rcall	.+0      	; 0x107fe <gpib_assert_ifc+0x2>
   107fe:	1f 92       	push	r1
   10800:	5c 98       	cbi	0x0b, 4	; 11
   10802:	54 9a       	sbi	0x0a, 4	; 10
   10804:	6a ef       	ldi	r22, 0xFA	; 250
   10806:	70 e0       	ldi	r23, 0x00	; 0
   10808:	80 e0       	ldi	r24, 0x00	; 0
   1080a:	90 e0       	ldi	r25, 0x00	; 0
   1080c:	0e 94 5d 25 	call	0x4aba	; 0x4aba <delayus>
   10810:	54 98       	cbi	0x0a, 4	; 10
   10812:	6a ef       	ldi	r22, 0xFA	; 250
   10814:	70 e0       	ldi	r23, 0x00	; 0
   10816:	80 e0       	ldi	r24, 0x00	; 0
   10818:	90 e0       	ldi	r25, 0x00	; 0
   1081a:	0e 94 5d 25 	call	0x4aba	; 0x4aba <delayus>
   1081e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10822:	82 ff       	sbrs	r24, 2
   10824:	0a c0       	rjmp	.+20     	; 0x1083a <gpib_assert_ifc+0x3e>
   10826:	85 e0       	ldi	r24, 0x05	; 5
   10828:	91 e1       	ldi	r25, 0x11	; 17
   1082a:	a0 e0       	ldi	r26, 0x00	; 0
   1082c:	ed b7       	in	r30, 0x3d	; 61
   1082e:	fe b7       	in	r31, 0x3e	; 62
   10830:	81 83       	std	Z+1, r24	; 0x01
   10832:	92 83       	std	Z+2, r25	; 0x02
   10834:	a3 83       	std	Z+3, r26	; 0x03
   10836:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1083a:	0f 90       	pop	r0
   1083c:	0f 90       	pop	r0
   1083e:	0f 90       	pop	r0
   10840:	08 95       	ret

00010842 <gpib_unread>:
   10842:	cf 93       	push	r28
   10844:	df 93       	push	r29
   10846:	00 d0       	rcall	.+0      	; 0x10848 <gpib_unread+0x6>
   10848:	1f 92       	push	r1
   1084a:	ec 01       	movw	r28, r24
   1084c:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <gpib_unread_f>
   10850:	81 11       	cpse	r24, r1
   10852:	08 c0       	rjmp	.+16     	; 0x10864 <gpib_unread+0x22>
   10854:	d0 93 ff 1e 	sts	0x1EFF, r29	; 0x801eff <gpib_unread_data+0x1>
   10858:	c0 93 fe 1e 	sts	0x1EFE, r28	; 0x801efe <gpib_unread_data>
   1085c:	81 e0       	ldi	r24, 0x01	; 1
   1085e:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <gpib_unread_f>
   10862:	12 c0       	rjmp	.+36     	; 0x10888 <gpib_unread+0x46>
   10864:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10868:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1086c:	85 70       	andi	r24, 0x05	; 5
   1086e:	99 27       	eor	r25, r25
   10870:	89 2b       	or	r24, r25
   10872:	51 f0       	breq	.+20     	; 0x10888 <gpib_unread+0x46>
   10874:	87 ed       	ldi	r24, 0xD7	; 215
   10876:	90 e1       	ldi	r25, 0x10	; 16
   10878:	a0 e0       	ldi	r26, 0x00	; 0
   1087a:	ed b7       	in	r30, 0x3d	; 61
   1087c:	fe b7       	in	r31, 0x3e	; 62
   1087e:	81 83       	std	Z+1, r24	; 0x01
   10880:	92 83       	std	Z+2, r25	; 0x02
   10882:	a3 83       	std	Z+3, r26	; 0x03
   10884:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   10888:	ce 01       	movw	r24, r28
   1088a:	cd b7       	in	r28, 0x3d	; 61
   1088c:	de b7       	in	r29, 0x3e	; 62
   1088e:	23 96       	adiw	r28, 0x03	; 3
   10890:	e2 e0       	ldi	r30, 0x02	; 2
   10892:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00010896 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10896:	11 b8       	out	0x01, r1	; 1
   10898:	80 b1       	in	r24, 0x00	; 0
   1089a:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   1089c:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   1089e:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   108a0:	08 95       	ret

000108a2 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   108a2:	4e 99       	sbic	0x09, 6	; 9
   108a4:	03 c0       	rjmp	.+6      	; 0x108ac <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   108a6:	80 e0       	ldi	r24, 0x00	; 0
   108a8:	94 e0       	ldi	r25, 0x04	; 4
   108aa:	02 c0       	rjmp	.+4      	; 0x108b0 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   108ac:	80 e0       	ldi	r24, 0x00	; 0
   108ae:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   108b0:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   108b2:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   108b4:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   108b6:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   108b8:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   108ba:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   108bc:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   108be:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   108c0:	08 95       	ret

000108c2 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   108c2:	19 99       	sbic	0x03, 1	; 3
   108c4:	03 c0       	rjmp	.+6      	; 0x108cc <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   108c6:	80 e0       	ldi	r24, 0x00	; 0
   108c8:	90 e2       	ldi	r25, 0x20	; 32
   108ca:	02 c0       	rjmp	.+4      	; 0x108d0 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   108cc:	80 e0       	ldi	r24, 0x00	; 0
   108ce:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   108d0:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   108d2:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   108d4:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   108d6:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   108d8:	08 95       	ret

000108da <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   108da:	2f 92       	push	r2
   108dc:	3f 92       	push	r3
   108de:	4f 92       	push	r4
   108e0:	6f 92       	push	r6
   108e2:	7f 92       	push	r7
   108e4:	8f 92       	push	r8
   108e6:	cf 92       	push	r12
   108e8:	df 92       	push	r13
   108ea:	ef 92       	push	r14
   108ec:	1f 93       	push	r17
   108ee:	cf 93       	push	r28
   108f0:	df 93       	push	r29
   108f2:	cd b7       	in	r28, 0x3d	; 61
   108f4:	de b7       	in	r29, 0x3e	; 62
   108f6:	2f 97       	sbiw	r28, 0x0f	; 15
   108f8:	0f b6       	in	r0, 0x3f	; 63
   108fa:	f8 94       	cli
   108fc:	de bf       	out	0x3e, r29	; 62
   108fe:	0f be       	out	0x3f, r0	; 63
   10900:	cd bf       	out	0x3d, r28	; 61
   10902:	9f 87       	std	Y+15, r25	; 0x0f
   10904:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t tx_state;

// Wait for DAV to be released before starting
// Read state for DAV
///@brief NRFD,NDAC SRQ are outputs
    gpib_bus_read_init(0);
   10906:	80 e0       	ldi	r24, 0x00	; 0
   10908:	90 e0       	ldi	r25, 0x00	; 0
   1090a:	8f de       	rcall	.-738    	; 0x1062a <gpib_bus_read_init>
// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   1090c:	64 ef       	ldi	r22, 0xF4	; 244
   1090e:	71 e0       	ldi	r23, 0x01	; 1
   10910:	80 e0       	ldi	r24, 0x00	; 0
   10912:	90 e0       	ldi	r25, 0x00	; 0
   10914:	80 de       	rcall	.-768    	; 0x10616 <gpib_timeout_set>

// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10916:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   10918:	87 e0       	ldi	r24, 0x07	; 7
   1091a:	90 e1       	ldi	r25, 0x10	; 16
   1091c:	6c 01       	movw	r12, r24
   1091e:	e1 2c       	mov	r14, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NDAC==1>\n");
   10920:	81 e2       	ldi	r24, 0x21	; 33
   10922:	90 e1       	ldi	r25, 0x10	; 16
   10924:	3c 01       	movw	r6, r24
   10926:	81 2c       	mov	r8, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==0>\n");
   10928:	8c e3       	ldi	r24, 0x3C	; 60
   1092a:	90 e1       	ldi	r25, 0x10	; 16
   1092c:	1c 01       	movw	r2, r24
   1092e:	41 2c       	mov	r4, r1
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10930:	87 e5       	ldi	r24, 0x57	; 87
   10932:	90 e1       	ldi	r25, 0x10	; 16
   10934:	9c 01       	movw	r18, r24
   10936:	40 e0       	ldi	r20, 0x00	; 0
   10938:	28 87       	std	Y+8, r18	; 0x08
   1093a:	39 87       	std	Y+9, r19	; 0x09
   1093c:	4a 87       	std	Y+10, r20	; 0x0a
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   1093e:	8f e7       	ldi	r24, 0x7F	; 127
   10940:	90 e1       	ldi	r25, 0x10	; 16
   10942:	9c 01       	movw	r18, r24
   10944:	40 e0       	ldi	r20, 0x00	; 0
   10946:	2b 87       	std	Y+11, r18	; 0x0b
   10948:	3c 87       	std	Y+12, r19	; 0x0c
   1094a:	4d 87       	std	Y+13, r20	; 0x0d
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
		if(uart_keyhit(0))
   1094c:	80 e0       	ldi	r24, 0x00	; 0
   1094e:	0e 94 94 27 	call	0x4f28	; 0x4f28 <uart_keyhit>
   10952:	89 2b       	or	r24, r25
   10954:	99 f0       	breq	.+38     	; 0x1097c <gpib_write_byte+0xa2>
		{
			if(debuglevel & GPIB_ERR)
   10956:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1095a:	80 ff       	sbrs	r24, 0
   1095c:	39 c1       	rjmp	.+626    	; 0x10bd0 <gpib_write_byte+0x2f6>
				printf("gpib_write_byte: KEY state=%d\n", tx_state);
   1095e:	81 2f       	mov	r24, r17
   10960:	90 e0       	ldi	r25, 0x00	; 0
   10962:	ed b7       	in	r30, 0x3d	; 61
   10964:	fe b7       	in	r31, 0x3e	; 62
   10966:	95 83       	std	Z+5, r25	; 0x05
   10968:	84 83       	std	Z+4, r24	; 0x04
   1096a:	88 eb       	ldi	r24, 0xB8	; 184
   1096c:	90 e1       	ldi	r25, 0x10	; 16
   1096e:	a0 e0       	ldi	r26, 0x00	; 0
   10970:	81 83       	std	Z+1, r24	; 0x01
   10972:	92 83       	std	Z+2, r25	; 0x02
   10974:	a3 83       	std	Z+3, r26	; 0x03
   10976:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1097a:	2a c1       	rjmp	.+596    	; 0x10bd0 <gpib_write_byte+0x2f6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   1097c:	4c 99       	sbic	0x09, 4	; 9
   1097e:	19 c0       	rjmp	.+50     	; 0x109b2 <gpib_write_byte+0xd8>
        {
            ch |= IFC_FLAG;
   10980:	2e 85       	ldd	r18, Y+14	; 0x0e
   10982:	3f 85       	ldd	r19, Y+15	; 0x0f
   10984:	30 61       	ori	r19, 0x10	; 16
   10986:	3f 87       	std	Y+15, r19	; 0x0f
   10988:	2e 87       	std	Y+14, r18	; 0x0e
			if(debuglevel & GPIB_ERR)
   1098a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1098e:	80 ff       	sbrs	r24, 0
   10990:	0e c0       	rjmp	.+28     	; 0x109ae <gpib_write_byte+0xd4>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10992:	81 2f       	mov	r24, r17
   10994:	90 e0       	ldi	r25, 0x00	; 0
   10996:	ed b7       	in	r30, 0x3d	; 61
   10998:	fe b7       	in	r31, 0x3e	; 62
   1099a:	95 83       	std	Z+5, r25	; 0x05
   1099c:	84 83       	std	Z+4, r24	; 0x04
   1099e:	89 e9       	ldi	r24, 0x99	; 153
   109a0:	90 e1       	ldi	r25, 0x10	; 16
   109a2:	a0 e0       	ldi	r26, 0x00	; 0
   109a4:	81 83       	std	Z+1, r24	; 0x01
   109a6:	92 83       	std	Z+2, r25	; 0x02
   109a8:	a3 83       	std	Z+3, r26	; 0x03
   109aa:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            gpib_bus_init();
   109ae:	60 de       	rcall	.-832    	; 0x10670 <gpib_bus_init>
            break;
   109b0:	0f c1       	rjmp	.+542    	; 0x10bd0 <gpib_write_byte+0x2f6>
        }

        switch(tx_state)
   109b2:	81 2f       	mov	r24, r17
   109b4:	90 e0       	ldi	r25, 0x00	; 0
   109b6:	8a 30       	cpi	r24, 0x0A	; 10
   109b8:	91 05       	cpc	r25, r1
   109ba:	08 f0       	brcs	.+2      	; 0x109be <gpib_write_byte+0xe4>
   109bc:	ff c0       	rjmp	.+510    	; 0x10bbc <gpib_write_byte+0x2e2>
   109be:	fc 01       	movw	r30, r24
   109c0:	e3 54       	subi	r30, 0x43	; 67
   109c2:	ff 4f       	sbci	r31, 0xFF	; 255
   109c4:	0c 94 93 df 	jmp	0x1bf26	; 0x1bf26 <__tablejump2__>
        {
            case GPIB_TX_START:
// Wait for release of DAV and EOI before starting
// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   109c8:	19 9b       	sbis	0x03, 1	; 3
   109ca:	12 c0       	rjmp	.+36     	; 0x109f0 <gpib_write_byte+0x116>
// We arrive here in Read Mode - see gpib_bus_read_init(0);

// Switch GBIB driver direction to Write
// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
                    GPIB_IO_HI(TE);               // BUS OUT, DAV OUT, NRFD and NDAC IN
   109cc:	42 9a       	sbi	0x08, 2	; 8
   109ce:	3a 9a       	sbi	0x07, 2	; 7
                    GPIB_IO_LOW(DC);              // ATN OUT, EOI OUT, SRQ IN
   109d0:	44 98       	cbi	0x08, 4	; 8
   109d2:	3c 9a       	sbi	0x07, 4	; 7
#endif
// My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   109d4:	2e 85       	ldd	r18, Y+14	; 0x0e
   109d6:	3f 85       	ldd	r19, Y+15	; 0x0f
   109d8:	32 ff       	sbrs	r19, 2
   109da:	02 c0       	rjmp	.+4      	; 0x109e0 <gpib_write_byte+0x106>
                        GPIB_IO_LOW(ATN);         // FYI: SS80 never sends ATN from a device
   109dc:	5e 98       	cbi	0x0b, 6	; 11
   109de:	01 c0       	rjmp	.+2      	; 0x109e2 <gpib_write_byte+0x108>
                    else
#if BOARD == 2
                        GPIB_IO_HI(ATN); 
   109e0:	5e 9a       	sbi	0x0b, 6	; 11
   109e2:	56 9a       	sbi	0x0a, 6	; 10
#else
                        GPIB_PIN_FLOAT_UP(ATN);
#endif

                    gpib_timeout_set(HTIMEOUT);
   109e4:	64 ef       	ldi	r22, 0xF4	; 244
   109e6:	71 e0       	ldi	r23, 0x01	; 1
   109e8:	80 e0       	ldi	r24, 0x00	; 0
   109ea:	90 e0       	ldi	r25, 0x00	; 0
   109ec:	14 de       	rcall	.-984    	; 0x10616 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   109ee:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   109f0:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
#endif

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   109f4:	88 23       	and	r24, r24
   109f6:	09 f4       	brne	.+2      	; 0x109fa <gpib_write_byte+0x120>
   109f8:	a9 cf       	rjmp	.-174    	; 0x1094c <gpib_write_byte+0x72>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   109fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   109fe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10a02:	85 70       	andi	r24, 0x05	; 5
   10a04:	99 27       	eor	r25, r25
   10a06:	89 2b       	or	r24, r25
   10a08:	29 f1       	breq	.+74     	; 0x10a54 <gpib_write_byte+0x17a>
                        printf("<BUS waiting for DAV==1>\n");
   10a0a:	8b 85       	ldd	r24, Y+11	; 0x0b
   10a0c:	9c 85       	ldd	r25, Y+12	; 0x0c
   10a0e:	ad 85       	ldd	r26, Y+13	; 0x0d
   10a10:	1a c0       	rjmp	.+52     	; 0x10a46 <gpib_write_byte+0x16c>
                }
                break;

            case GPIB_TX_WAIT_READY:
// Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10a12:	4a 9b       	sbis	0x09, 2	; 9
   10a14:	08 c0       	rjmp	.+16     	; 0x10a26 <gpib_write_byte+0x14c>
   10a16:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10a18:	06 c0       	rjmp	.+12     	; 0x10a26 <gpib_write_byte+0x14c>
   10a1a:	64 ef       	ldi	r22, 0xF4	; 244
   10a1c:	71 e0       	ldi	r23, 0x01	; 1
   10a1e:	80 e0       	ldi	r24, 0x00	; 0
   10a20:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   10a22:	f9 dd       	rcall	.-1038   	; 0x10616 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10a24:	12 e0       	ldi	r17, 0x02	; 2
   10a26:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10a2a:	88 23       	and	r24, r24
   10a2c:	09 f4       	brne	.+2      	; 0x10a30 <gpib_write_byte+0x156>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10a2e:	8e cf       	rjmp	.-228    	; 0x1094c <gpib_write_byte+0x72>
   10a30:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a34:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10a38:	85 70       	andi	r24, 0x05	; 5
   10a3a:	99 27       	eor	r25, r25
   10a3c:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10a3e:	51 f0       	breq	.+20     	; 0x10a54 <gpib_write_byte+0x17a>
   10a40:	88 85       	ldd	r24, Y+8	; 0x08
   10a42:	99 85       	ldd	r25, Y+9	; 0x09
   10a44:	aa 85       	ldd	r26, Y+10	; 0x0a
   10a46:	ed b7       	in	r30, 0x3d	; 61
   10a48:	fe b7       	in	r31, 0x3e	; 62
   10a4a:	81 83       	std	Z+1, r24	; 0x01
   10a4c:	92 83       	std	Z+2, r25	; 0x02
   10a4e:	a3 83       	std	Z+3, r26	; 0x03
   10a50:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10a54:	2e 85       	ldd	r18, Y+14	; 0x0e
   10a56:	3f 85       	ldd	r19, Y+15	; 0x0f
   10a58:	30 64       	ori	r19, 0x40	; 64
   10a5a:	3f 87       	std	Y+15, r19	; 0x0f
   10a5c:	2e 87       	std	Y+14, r18	; 0x0e
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10a5e:	b6 c0       	rjmp	.+364    	; 0x10bcc <gpib_write_byte+0x2f2>
   10a60:	8e 85       	ldd	r24, Y+14	; 0x0e
   10a62:	9f 85       	ldd	r25, Y+15	; 0x0f
   10a64:	90 ff       	sbrs	r25, 0
                    GPIB_IO_LOW(EOI);
   10a66:	02 c0       	rjmp	.+4      	; 0x10a6c <gpib_write_byte+0x192>
   10a68:	28 98       	cbi	0x05, 0	; 5
                else
#if BOARD == 2
                    GPIB_IO_HI(EOI);
   10a6a:	01 c0       	rjmp	.+2      	; 0x10a6e <gpib_write_byte+0x194>
   10a6c:	28 9a       	sbi	0x05, 0	; 5
#else
                    GPIB_PIN_FLOAT_UP(EOI);
#endif

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10a6e:	20 9a       	sbi	0x04, 0	; 4
   10a70:	8f ef       	ldi	r24, 0xFF	; 255
   10a72:	81 b9       	out	0x01, r24	; 1
   10a74:	8e 85       	ldd	r24, Y+14	; 0x0e
   10a76:	80 95       	com	r24
#if BOARD == 2
// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE);
   10a78:	82 b9       	out	0x02, r24	; 2
   10a7a:	43 9a       	sbi	0x08, 3	; 8
   10a7c:	3b 9a       	sbi	0x07, 3	; 7
   10a7e:	9d e0       	ldi	r25, 0x0D	; 13
   10a80:	9a 95       	dec	r25
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10a82:	f1 f7       	brne	.-4      	; 0x10a80 <gpib_write_byte+0x1a6>
   10a84:	00 00       	nop
   10a86:	64 ef       	ldi	r22, 0xF4	; 244
   10a88:	71 e0       	ldi	r23, 0x01	; 1
   10a8a:	80 e0       	ldi	r24, 0x00	; 0
   10a8c:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   10a8e:	c3 dd       	rcall	.-1146   	; 0x10616 <gpib_timeout_set>
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10a90:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   10a92:	5c cf       	rjmp	.-328    	; 0x1094c <gpib_write_byte+0x72>
   10a94:	29 98       	cbi	0x05, 1	; 5
   10a96:	21 9a       	sbi	0x04, 1	; 4
   10a98:	64 ef       	ldi	r22, 0xF4	; 244
   10a9a:	71 e0       	ldi	r23, 0x01	; 1
   10a9c:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   10a9e:	90 e0       	ldi	r25, 0x00	; 0
   10aa0:	ba dd       	rcall	.-1164   	; 0x10616 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   10aa2:	14 e0       	ldi	r17, 0x04	; 4
   10aa4:	53 cf       	rjmp	.-346    	; 0x1094c <gpib_write_byte+0x72>
   10aa6:	4a 99       	sbic	0x09, 2	; 9
   10aa8:	07 c0       	rjmp	.+14     	; 0x10ab8 <gpib_write_byte+0x1de>
   10aaa:	64 ef       	ldi	r22, 0xF4	; 244
   10aac:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10aae:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   10ab0:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10ab2:	b1 dd       	rcall	.-1182   	; 0x10616 <gpib_timeout_set>
   10ab4:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   10ab6:	4a cf       	rjmp	.-364    	; 0x1094c <gpib_write_byte+0x72>
   10ab8:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10abc:	88 23       	and	r24, r24
   10abe:	09 f4       	brne	.+2      	; 0x10ac2 <gpib_write_byte+0x1e8>
   10ac0:	45 cf       	rjmp	.-374    	; 0x1094c <gpib_write_byte+0x72>
   10ac2:	ee 85       	ldd	r30, Y+14	; 0x0e
   10ac4:	ff 85       	ldd	r31, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10ac6:	f0 64       	ori	r31, 0x40	; 64
   10ac8:	ff 87       	std	Y+15, r31	; 0x0f
   10aca:	ee 87       	std	Y+14, r30	; 0x0e
   10acc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ad0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10ad4:	85 70       	andi	r24, 0x05	; 5
   10ad6:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   10ad8:	89 2b       	or	r24, r25
   10ada:	09 f4       	brne	.+2      	; 0x10ade <gpib_write_byte+0x204>
   10adc:	77 c0       	rjmp	.+238    	; 0x10bcc <gpib_write_byte+0x2f2>
   10ade:	ed b7       	in	r30, 0x3d	; 61
   10ae0:	fe b7       	in	r31, 0x3e	; 62
   10ae2:	21 82       	std	Z+1, r2	; 0x01
                }
                break;

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10ae4:	32 82       	std	Z+2, r3	; 0x02
   10ae6:	43 82       	std	Z+3, r4	; 0x03
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10ae8:	44 c0       	rjmp	.+136    	; 0x10b72 <gpib_write_byte+0x298>
   10aea:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10aec:	6b c0       	rjmp	.+214    	; 0x10bc4 <gpib_write_byte+0x2ea>
   10aee:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10af2:	88 23       	and	r24, r24
   10af4:	09 f4       	brne	.+2      	; 0x10af8 <gpib_write_byte+0x21e>
   10af6:	2a cf       	rjmp	.-428    	; 0x1094c <gpib_write_byte+0x72>
   10af8:	2e 85       	ldd	r18, Y+14	; 0x0e
   10afa:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10afc:	30 64       	ori	r19, 0x40	; 64
   10afe:	3f 87       	std	Y+15, r19	; 0x0f
   10b00:	2e 87       	std	Y+14, r18	; 0x0e
   10b02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b06:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10b0a:	85 70       	andi	r24, 0x05	; 5
   10b0c:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   10b0e:	89 2b       	or	r24, r25
   10b10:	09 f4       	brne	.+2      	; 0x10b14 <gpib_write_byte+0x23a>
   10b12:	5c c0       	rjmp	.+184    	; 0x10bcc <gpib_write_byte+0x2f2>
   10b14:	ed b7       	in	r30, 0x3d	; 61
   10b16:	fe b7       	in	r31, 0x3e	; 62
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
#if BOARD == 2
                GPIB_IO_HI(DAV);
   10b18:	61 82       	std	Z+1, r6	; 0x01
   10b1a:	72 82       	std	Z+2, r7	; 0x02
   10b1c:	83 82       	std	Z+3, r8	; 0x03
   10b1e:	29 c0       	rjmp	.+82     	; 0x10b72 <gpib_write_byte+0x298>
#else
                GPIB_PIN_FLOAT_UP(DAV);
#endif
                GPIB_BUS_SETTLE();                // give some time

                gpib_bus_read_init(0);            // Free BUS, NOT busy
   10b20:	29 9a       	sbi	0x05, 1	; 5
   10b22:	21 9a       	sbi	0x04, 1	; 4
   10b24:	fd e0       	ldi	r31, 0x0D	; 13
   10b26:	fa 95       	dec	r31

                gpib_timeout_set(HTIMEOUT);
   10b28:	f1 f7       	brne	.-4      	; 0x10b26 <gpib_write_byte+0x24c>
   10b2a:	00 00       	nop
   10b2c:	80 e0       	ldi	r24, 0x00	; 0
   10b2e:	90 e0       	ldi	r25, 0x00	; 0
   10b30:	7c dd       	rcall	.-1288   	; 0x1062a <gpib_bus_read_init>
   10b32:	64 ef       	ldi	r22, 0xF4	; 244
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   10b34:	71 e0       	ldi	r23, 0x01	; 1
                break;
   10b36:	80 e0       	ldi	r24, 0x00	; 0

/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   10b38:	90 e0       	ldi	r25, 0x00	; 0
   10b3a:	6d dd       	rcall	.-1318   	; 0x10616 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10b3c:	17 e0       	ldi	r17, 0x07	; 7
   10b3e:	06 cf       	rjmp	.-500    	; 0x1094c <gpib_write_byte+0x72>
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   10b40:	19 99       	sbic	0x03, 1	; 3
   10b42:	42 c0       	rjmp	.+132    	; 0x10bc8 <gpib_write_byte+0x2ee>
   10b44:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10b48:	88 23       	and	r24, r24
   10b4a:	09 f4       	brne	.+2      	; 0x10b4e <gpib_write_byte+0x274>
   10b4c:	ff ce       	rjmp	.-514    	; 0x1094c <gpib_write_byte+0x72>
   10b4e:	2e 85       	ldd	r18, Y+14	; 0x0e
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10b50:	3f 85       	ldd	r19, Y+15	; 0x0f
   10b52:	30 64       	ori	r19, 0x40	; 64
   10b54:	3f 87       	std	Y+15, r19	; 0x0f
   10b56:	2e 87       	std	Y+14, r18	; 0x0e
   10b58:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b5c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
                        printf("<BUS waiting for DAV==1>\n");
   10b60:	85 70       	andi	r24, 0x05	; 5
   10b62:	99 27       	eor	r25, r25
   10b64:	89 2b       	or	r24, r25
   10b66:	91 f1       	breq	.+100    	; 0x10bcc <gpib_write_byte+0x2f2>
   10b68:	ed b7       	in	r30, 0x3d	; 61
   10b6a:	fe b7       	in	r31, 0x3e	; 62
   10b6c:	c1 82       	std	Z+1, r12	; 0x01
   10b6e:	d2 82       	std	Z+2, r13	; 0x02
            case GPIB_TX_FINISH:
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10b70:	e3 82       	std	Z+3, r14	; 0x03
   10b72:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   10b76:	2a c0       	rjmp	.+84     	; 0x10bcc <gpib_write_byte+0x2f2>
   10b78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b7c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   10b80:	85 70       	andi	r24, 0x05	; 5
   10b82:	99 27       	eor	r25, r25
   10b84:	89 2b       	or	r24, r25
   10b86:	b1 f0       	breq	.+44     	; 0x10bb4 <gpib_write_byte+0x2da>
   10b88:	89 b1       	in	r24, 0x09	; 9
   10b8a:	99 b1       	in	r25, 0x09	; 9
   10b8c:	93 fb       	bst	r25, 3
   10b8e:	99 27       	eor	r25, r25
   10b90:	90 f9       	bld	r25, 0
   10b92:	ed b7       	in	r30, 0x3d	; 61
   10b94:	fe b7       	in	r31, 0x3e	; 62
   10b96:	96 83       	std	Z+6, r25	; 0x06
   10b98:	17 82       	std	Z+7, r1	; 0x07
   10b9a:	82 fb       	bst	r24, 2
   10b9c:	88 27       	eor	r24, r24
   10b9e:	80 f9       	bld	r24, 0
   10ba0:	84 83       	std	Z+4, r24	; 0x04
   10ba2:	15 82       	std	Z+5, r1	; 0x05
   10ba4:	84 ef       	ldi	r24, 0xF4	; 244
   10ba6:	9f e0       	ldi	r25, 0x0F	; 15
   10ba8:	a0 e0       	ldi	r26, 0x00	; 0
// Free BUS, BUSY on error
                gpib_bus_read_init(1);
   10baa:	81 83       	std	Z+1, r24	; 0x01
   10bac:	92 83       	std	Z+2, r25	; 0x02
   10bae:	a3 83       	std	Z+3, r26	; 0x03
   10bb0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   10bb4:	81 e0       	ldi	r24, 0x01	; 1
   10bb6:	90 e0       	ldi	r25, 0x00	; 0
   10bb8:	38 dd       	rcall	.-1424   	; 0x1062a <gpib_bus_read_init>
   10bba:	0a c0       	rjmp	.+20     	; 0x10bd0 <gpib_write_byte+0x2f6>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10bbc:	1a 30       	cpi	r17, 0x0A	; 10
   10bbe:	09 f0       	breq	.+2      	; 0x10bc2 <gpib_write_byte+0x2e8>
/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   10bc0:	c5 ce       	rjmp	.-630    	; 0x1094c <gpib_write_byte+0x72>
   10bc2:	06 c0       	rjmp	.+12     	; 0x10bd0 <gpib_write_byte+0x2f6>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10bc4:	16 e0       	ldi	r17, 0x06	; 6
   10bc6:	c2 ce       	rjmp	.-636    	; 0x1094c <gpib_write_byte+0x72>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10bc8:	18 e0       	ldi	r17, 0x08	; 8
   10bca:	c0 ce       	rjmp	.-640    	; 0x1094c <gpib_write_byte+0x72>
   10bcc:	19 e0       	ldi	r17, 0x09	; 9
   10bce:	be ce       	rjmp	.-644    	; 0x1094c <gpib_write_byte+0x72>
   10bd0:	8e 85       	ldd	r24, Y+14	; 0x0e
   10bd2:	9f 85       	ldd	r25, Y+15	; 0x0f
   10bd4:	2f 96       	adiw	r28, 0x0f	; 15
   10bd6:	0f b6       	in	r0, 0x3f	; 63
   10bd8:	f8 94       	cli
   10bda:	de bf       	out	0x3e, r29	; 62
   10bdc:	0f be       	out	0x3f, r0	; 63
   10bde:	cd bf       	out	0x3d, r28	; 61
   10be0:	df 91       	pop	r29
   10be2:	cf 91       	pop	r28
   10be4:	1f 91       	pop	r17
   10be6:	ef 90       	pop	r14
   10be8:	df 90       	pop	r13
   10bea:	cf 90       	pop	r12
   10bec:	8f 90       	pop	r8
   10bee:	7f 90       	pop	r7
   10bf0:	6f 90       	pop	r6
   10bf2:	4f 90       	pop	r4
   10bf4:	3f 90       	pop	r3
   10bf6:	2f 90       	pop	r2
   10bf8:	08 95       	ret

00010bfa <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10bfa:	cf 93       	push	r28
   10bfc:	df 93       	push	r29
   10bfe:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10c00:	89 2b       	or	r24, r25
   10c02:	21 f4       	brne	.+8      	; 0x10c0c <gpib_decode_header+0x12>
        fo = stdout;
   10c04:	c0 91 cd 1c 	lds	r28, 0x1CCD	; 0x801ccd <__iob+0x2>
   10c08:	d0 91 ce 1c 	lds	r29, 0x1CCE	; 0x801cce <__iob+0x3>

    fprintf(fo,"===========================================\n");
   10c0c:	be 01       	movw	r22, r28
   10c0e:	89 ef       	ldi	r24, 0xF9	; 249
   10c10:	9b e0       	ldi	r25, 0x0B	; 11
   10c12:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"GPIB bus state\n");
   10c16:	be 01       	movw	r22, r28
   10c18:	86 e2       	ldi	r24, 0x26	; 38
   10c1a:	9c e0       	ldi	r25, 0x0C	; 12
   10c1c:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10c20:	be 01       	movw	r22, r28
   10c22:	86 e3       	ldi	r24, 0x36	; 54
   10c24:	9c e0       	ldi	r25, 0x0C	; 12
   10c26:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10c2a:	be 01       	movw	r22, r28
   10c2c:	8a e4       	ldi	r24, 0x4A	; 74
   10c2e:	9c e0       	ldi	r25, 0x0C	; 12
   10c30:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10c34:	be 01       	movw	r22, r28
   10c36:	8d e6       	ldi	r24, 0x6D	; 109
   10c38:	9c e0       	ldi	r25, 0x0C	; 12
   10c3a:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"     A = ATN\n");
   10c3e:	be 01       	movw	r22, r28
   10c40:	87 e9       	ldi	r24, 0x97	; 151
   10c42:	9c e0       	ldi	r25, 0x0C	; 12
   10c44:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"      E = EOI\n");
   10c48:	be 01       	movw	r22, r28
   10c4a:	85 ea       	ldi	r24, 0xA5	; 165
   10c4c:	9c e0       	ldi	r25, 0x0C	; 12
   10c4e:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"       S = SRQ\n");
   10c52:	be 01       	movw	r22, r28
   10c54:	84 eb       	ldi	r24, 0xB4	; 180
   10c56:	9c e0       	ldi	r25, 0x0C	; 12
   10c58:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"        R = REN\n");
   10c5c:	be 01       	movw	r22, r28
   10c5e:	84 ec       	ldi	r24, 0xC4	; 196
   10c60:	9c e0       	ldi	r25, 0x0C	; 12
   10c62:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"         I = IFC\n");
   10c66:	be 01       	movw	r22, r28
   10c68:	85 ed       	ldi	r24, 0xD5	; 213
   10c6a:	9c e0       	ldi	r25, 0x0C	; 12
   10c6c:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10c70:	be 01       	movw	r22, r28
   10c72:	87 ee       	ldi	r24, 0xE7	; 231
   10c74:	9c e0       	ldi	r25, 0x0C	; 12
   10c76:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10c7a:	be 01       	movw	r22, r28
   10c7c:	89 e0       	ldi	r24, 0x09	; 9
   10c7e:	9d e0       	ldi	r25, 0x0D	; 13
   10c80:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10c84:	be 01       	movw	r22, r28
   10c86:	81 e2       	ldi	r24, 0x21	; 33
   10c88:	9d e0       	ldi	r25, 0x0D	; 13
   10c8a:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
    fprintf(fo,"              GPIB commands\n");
   10c8e:	be 01       	movw	r22, r28
   10c90:	8c e3       	ldi	r24, 0x3C	; 60
   10c92:	9d e0       	ldi	r25, 0x0D	; 13
   10c94:	0e 94 02 74 	call	0xe804	; 0xe804 <fputs>
}
   10c98:	df 91       	pop	r29
   10c9a:	cf 91       	pop	r28
   10c9c:	08 95       	ret

00010c9e <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10c9e:	a9 e8       	ldi	r26, 0x89	; 137
   10ca0:	b0 e0       	ldi	r27, 0x00	; 0
   10ca2:	e5 e5       	ldi	r30, 0x55	; 85
   10ca4:	f6 e8       	ldi	r31, 0x86	; 134
   10ca6:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
   10caa:	8c 01       	movw	r16, r24
   10cac:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10cae:	1a 86       	std	Y+10, r1	; 0x0a
   10cb0:	4c 01       	movw	r8, r24
   10cb2:	88 24       	eor	r8, r8
   10cb4:	44 e0       	ldi	r20, 0x04	; 4
   10cb6:	94 22       	and	r9, r20
   10cb8:	ce 01       	movw	r24, r28
   10cba:	0a 96       	adiw	r24, 0x0a	; 10
   10cbc:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10cbe:	62 30       	cpi	r22, 0x02	; 2
   10cc0:	71 05       	cpc	r23, r1
   10cc2:	e8 f4       	brcc	.+58     	; 0x10cfe <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10cc4:	81 14       	cp	r8, r1
   10cc6:	91 04       	cpc	r9, r1
   10cc8:	29 f4       	brne	.+10     	; 0x10cd4 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10cca:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10ccc:	90 ee       	ldi	r25, 0xE0	; 224
   10cce:	90 0f       	add	r25, r16
   10cd0:	9f 35       	cpi	r25, 0x5F	; 95
   10cd2:	08 f0       	brcs	.+2      	; 0x10cd6 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10cd4:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10cd6:	90 e0       	ldi	r25, 0x00	; 0
   10cd8:	ed b7       	in	r30, 0x3d	; 61
   10cda:	fe b7       	in	r31, 0x3e	; 62
   10cdc:	91 87       	std	Z+9, r25	; 0x09
   10cde:	80 87       	std	Z+8, r24	; 0x08
   10ce0:	c8 01       	movw	r24, r16
   10ce2:	99 27       	eor	r25, r25
   10ce4:	97 83       	std	Z+7, r25	; 0x07
   10ce6:	86 83       	std	Z+6, r24	; 0x06
   10ce8:	83 eb       	ldi	r24, 0xB3	; 179
   10cea:	9f e0       	ldi	r25, 0x0F	; 15
   10cec:	a0 e0       	ldi	r26, 0x00	; 0
   10cee:	83 83       	std	Z+3, r24	; 0x03
   10cf0:	94 83       	std	Z+4, r25	; 0x04
   10cf2:	a5 83       	std	Z+5, r26	; 0x05
   10cf4:	f2 82       	std	Z+2, r15	; 0x02
   10cf6:	e1 82       	std	Z+1, r14	; 0x01
   10cf8:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
   10cfc:	0c c0       	rjmp	.+24     	; 0x10d16 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10cfe:	8d ea       	ldi	r24, 0xAD	; 173
   10d00:	9f e0       	ldi	r25, 0x0F	; 15
   10d02:	a0 e0       	ldi	r26, 0x00	; 0
   10d04:	ed b7       	in	r30, 0x3d	; 61
   10d06:	fe b7       	in	r31, 0x3e	; 62
   10d08:	83 83       	std	Z+3, r24	; 0x03
   10d0a:	94 83       	std	Z+4, r25	; 0x04
   10d0c:	a5 83       	std	Z+5, r26	; 0x05
   10d0e:	f2 82       	std	Z+2, r15	; 0x02
   10d10:	e1 82       	std	Z+1, r14	; 0x01
   10d12:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
    }

    tmp = str + strlen(str);
   10d16:	f7 01       	movw	r30, r14
   10d18:	01 90       	ld	r0, Z+
   10d1a:	00 20       	and	r0, r0
   10d1c:	e9 f7       	brne	.-6      	; 0x10d18 <gpib_trace_display+0x7a>
   10d1e:	31 97       	sbiw	r30, 0x01	; 1
   10d20:	cf 01       	movw	r24, r30
   10d22:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10d24:	81 14       	cp	r8, r1
   10d26:	91 04       	cpc	r9, r1
   10d28:	11 f0       	breq	.+4      	; 0x10d2e <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10d2a:	21 e4       	ldi	r18, 0x41	; 65
   10d2c:	01 c0       	rjmp	.+2      	; 0x10d30 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10d2e:	2d e2       	ldi	r18, 0x2D	; 45
   10d30:	20 83       	st	Z, r18
   10d32:	dc 01       	movw	r26, r24
   10d34:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10d36:	10 ff       	sbrs	r17, 0
   10d38:	02 c0       	rjmp	.+4      	; 0x10d3e <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10d3a:	25 e4       	ldi	r18, 0x45	; 69
   10d3c:	01 c0       	rjmp	.+2      	; 0x10d40 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10d3e:	2d e2       	ldi	r18, 0x2D	; 45
   10d40:	fc 01       	movw	r30, r24
   10d42:	20 83       	st	Z, r18
   10d44:	fd 01       	movw	r30, r26
   10d46:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10d48:	11 ff       	sbrs	r17, 1
   10d4a:	02 c0       	rjmp	.+4      	; 0x10d50 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10d4c:	83 e5       	ldi	r24, 0x53	; 83
   10d4e:	01 c0       	rjmp	.+2      	; 0x10d52 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10d50:	8d e2       	ldi	r24, 0x2D	; 45
   10d52:	8c 93       	st	X, r24
   10d54:	df 01       	movw	r26, r30
   10d56:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10d58:	13 ff       	sbrs	r17, 3
   10d5a:	02 c0       	rjmp	.+4      	; 0x10d60 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10d5c:	82 e5       	ldi	r24, 0x52	; 82
   10d5e:	01 c0       	rjmp	.+2      	; 0x10d62 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10d60:	8d e2       	ldi	r24, 0x2D	; 45
   10d62:	80 83       	st	Z, r24
   10d64:	fd 01       	movw	r30, r26
   10d66:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10d68:	14 ff       	sbrs	r17, 4
   10d6a:	02 c0       	rjmp	.+4      	; 0x10d70 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   10d6c:	89 e4       	ldi	r24, 0x49	; 73
   10d6e:	01 c0       	rjmp	.+2      	; 0x10d72 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   10d70:	8d e2       	ldi	r24, 0x2D	; 45
   10d72:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10d74:	a1 14       	cp	r10, r1
   10d76:	b1 04       	cpc	r11, r1
   10d78:	d1 f4       	brne	.+52     	; 0x10dae <gpib_trace_display+0x110>
   10d7a:	df 01       	movw	r26, r30
   10d7c:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10d7e:	15 ff       	sbrs	r17, 5
   10d80:	02 c0       	rjmp	.+4      	; 0x10d86 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   10d82:	80 e5       	ldi	r24, 0x50	; 80
   10d84:	01 c0       	rjmp	.+2      	; 0x10d88 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   10d86:	8d e2       	ldi	r24, 0x2D	; 45
   10d88:	80 83       	st	Z, r24
   10d8a:	fd 01       	movw	r30, r26
   10d8c:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10d8e:	16 ff       	sbrs	r17, 6
   10d90:	02 c0       	rjmp	.+4      	; 0x10d96 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   10d92:	84 e5       	ldi	r24, 0x54	; 84
   10d94:	01 c0       	rjmp	.+2      	; 0x10d98 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   10d96:	8d e2       	ldi	r24, 0x2D	; 45
   10d98:	8c 93       	st	X, r24
   10d9a:	cf 01       	movw	r24, r30
   10d9c:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   10d9e:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   10da0:	17 ff       	sbrs	r17, 7
   10da2:	02 c0       	rjmp	.+4      	; 0x10da8 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   10da4:	82 e4       	ldi	r24, 0x42	; 66
   10da6:	01 c0       	rjmp	.+2      	; 0x10daa <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   10da8:	8d e2       	ldi	r24, 0x2D	; 45
   10daa:	80 83       	st	Z, r24
   10dac:	08 c0       	rjmp	.+16     	; 0x10dbe <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   10dae:	8d e2       	ldi	r24, 0x2D	; 45
   10db0:	80 83       	st	Z, r24
        *tmp++ = '-';
   10db2:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   10db4:	6f 01       	movw	r12, r30
   10db6:	43 e0       	ldi	r20, 0x03	; 3
   10db8:	c4 0e       	add	r12, r20
   10dba:	d1 1c       	adc	r13, r1
   10dbc:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   10dbe:	f6 01       	movw	r30, r12
   10dc0:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   10dc2:	f1 e0       	ldi	r31, 0x01	; 1
   10dc4:	af 1a       	sub	r10, r31
   10dc6:	b1 08       	sbc	r11, r1
   10dc8:	42 e0       	ldi	r20, 0x02	; 2
   10dca:	a4 16       	cp	r10, r20
   10dcc:	b1 04       	cpc	r11, r1
   10dce:	f0 f4       	brcc	.+60     	; 0x10e0c <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   10dd0:	15 ff       	sbrs	r17, 5
   10dd2:	03 c0       	rjmp	.+6      	; 0x10dda <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   10dd4:	69 e5       	ldi	r22, 0x59	; 89
   10dd6:	7d e0       	ldi	r23, 0x0D	; 13
   10dd8:	02 c0       	rjmp	.+4      	; 0x10dde <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   10dda:	60 e6       	ldi	r22, 0x60	; 96
   10ddc:	74 e0       	ldi	r23, 0x04	; 4
   10dde:	c7 01       	movw	r24, r14
   10de0:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <strcat>
        if(status & NRFD_FLAG)
   10de4:	16 ff       	sbrs	r17, 6
   10de6:	03 c0       	rjmp	.+6      	; 0x10dee <gpib_trace_display+0x150>
            strcat(str," NRFD");
   10de8:	6f e5       	ldi	r22, 0x5F	; 95
   10dea:	7d e0       	ldi	r23, 0x0D	; 13
   10dec:	02 c0       	rjmp	.+4      	; 0x10df2 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   10dee:	60 e6       	ldi	r22, 0x60	; 96
   10df0:	74 e0       	ldi	r23, 0x04	; 4
   10df2:	c7 01       	movw	r24, r14
   10df4:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <strcat>
        if(status & NDAC_FLAG)
   10df8:	17 ff       	sbrs	r17, 7
   10dfa:	03 c0       	rjmp	.+6      	; 0x10e02 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   10dfc:	65 e6       	ldi	r22, 0x65	; 101
   10dfe:	7d e0       	ldi	r23, 0x0D	; 13
   10e00:	02 c0       	rjmp	.+4      	; 0x10e06 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   10e02:	60 e6       	ldi	r22, 0x60	; 96
   10e04:	74 e0       	ldi	r23, 0x04	; 4
   10e06:	c7 01       	movw	r24, r14
   10e08:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <strcat>
    }

    if( (status & ATN_FLAG) )
   10e0c:	81 14       	cp	r8, r1
   10e0e:	91 04       	cpc	r9, r1
   10e10:	09 f4       	brne	.+2      	; 0x10e14 <gpib_trace_display+0x176>
   10e12:	5a c0       	rjmp	.+180    	; 0x10ec8 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   10e14:	c8 01       	movw	r24, r16
   10e16:	8f 77       	andi	r24, 0x7F	; 127
   10e18:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   10e1a:	9c 01       	movw	r18, r24
   10e1c:	20 52       	subi	r18, 0x20	; 32
   10e1e:	31 09       	sbc	r19, r1
   10e20:	2f 31       	cpi	r18, 0x1F	; 31
   10e22:	31 05       	cpc	r19, r1
   10e24:	48 f4       	brcc	.+18     	; 0x10e38 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   10e26:	0f 71       	andi	r16, 0x1F	; 31
   10e28:	11 27       	eor	r17, r17
   10e2a:	ed b7       	in	r30, 0x3d	; 61
   10e2c:	fe b7       	in	r31, 0x3e	; 62
   10e2e:	17 83       	std	Z+7, r17	; 0x07
   10e30:	06 83       	std	Z+6, r16	; 0x06
   10e32:	82 ea       	ldi	r24, 0xA2	; 162
   10e34:	9f e0       	ldi	r25, 0x0F	; 15
   10e36:	0e c0       	rjmp	.+28     	; 0x10e54 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   10e38:	9c 01       	movw	r18, r24
   10e3a:	20 54       	subi	r18, 0x40	; 64
   10e3c:	31 09       	sbc	r19, r1
   10e3e:	2f 30       	cpi	r18, 0x0F	; 15
   10e40:	31 05       	cpc	r19, r1
   10e42:	88 f4       	brcc	.+34     	; 0x10e66 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   10e44:	0f 71       	andi	r16, 0x1F	; 31
   10e46:	11 27       	eor	r17, r17
   10e48:	ed b7       	in	r30, 0x3d	; 61
   10e4a:	fe b7       	in	r31, 0x3e	; 62
   10e4c:	17 83       	std	Z+7, r17	; 0x07
   10e4e:	06 83       	std	Z+6, r16	; 0x06
   10e50:	87 e9       	ldi	r24, 0x97	; 151
   10e52:	9f e0       	ldi	r25, 0x0F	; 15
   10e54:	a0 e0       	ldi	r26, 0x00	; 0
   10e56:	83 83       	std	Z+3, r24	; 0x03
   10e58:	94 83       	std	Z+4, r25	; 0x04
   10e5a:	a5 83       	std	Z+5, r26	; 0x05
   10e5c:	d2 82       	std	Z+2, r13	; 0x02
   10e5e:	c1 82       	std	Z+1, r12	; 0x01
   10e60:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
   10e64:	31 c0       	rjmp	.+98     	; 0x10ec8 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   10e66:	9c 01       	movw	r18, r24
   10e68:	20 56       	subi	r18, 0x60	; 96
   10e6a:	31 09       	sbc	r19, r1
   10e6c:	20 31       	cpi	r18, 0x10	; 16
   10e6e:	31 05       	cpc	r19, r1
   10e70:	28 f0       	brcs	.+10     	; 0x10e7c <gpib_trace_display+0x1de>
   10e72:	e2 e8       	ldi	r30, 0x82	; 130
   10e74:	f1 e0       	ldi	r31, 0x01	; 1
   10e76:	00 e0       	ldi	r16, 0x00	; 0
   10e78:	10 e0       	ldi	r17, 0x00	; 0
   10e7a:	0b c0       	rjmp	.+22     	; 0x10e92 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   10e7c:	0f 71       	andi	r16, 0x1F	; 31
   10e7e:	11 27       	eor	r17, r17
   10e80:	ed b7       	in	r30, 0x3d	; 61
   10e82:	fe b7       	in	r31, 0x3e	; 62
   10e84:	17 83       	std	Z+7, r17	; 0x07
   10e86:	06 83       	std	Z+6, r16	; 0x06
   10e88:	8c e8       	ldi	r24, 0x8C	; 140
   10e8a:	9f e0       	ldi	r25, 0x0F	; 15
   10e8c:	e3 cf       	rjmp	.-58     	; 0x10e54 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   10e8e:	0f 5f       	subi	r16, 0xFF	; 255
   10e90:	1f 4f       	sbci	r17, 0xFF	; 255
   10e92:	20 81       	ld	r18, Z
   10e94:	31 81       	ldd	r19, Z+1	; 0x01
   10e96:	2f 3f       	cpi	r18, 0xFF	; 255
   10e98:	4f ef       	ldi	r20, 0xFF	; 255
   10e9a:	34 07       	cpc	r19, r20
   10e9c:	a9 f0       	breq	.+42     	; 0x10ec8 <gpib_trace_display+0x22a>
   10e9e:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   10ea0:	82 17       	cp	r24, r18
   10ea2:	93 07       	cpc	r25, r19
   10ea4:	a1 f7       	brne	.-24     	; 0x10e8e <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   10ea6:	64 e6       	ldi	r22, 0x64	; 100
   10ea8:	74 e0       	ldi	r23, 0x04	; 4
   10eaa:	c6 01       	movw	r24, r12
   10eac:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   10eb0:	f8 01       	movw	r30, r16
   10eb2:	ee 0f       	add	r30, r30
   10eb4:	ff 1f       	adc	r31, r31
   10eb6:	ee 0f       	add	r30, r30
   10eb8:	ff 1f       	adc	r31, r31
   10eba:	ee 57       	subi	r30, 0x7E	; 126
   10ebc:	fe 4f       	sbci	r31, 0xFE	; 254
   10ebe:	62 81       	ldd	r22, Z+2	; 0x02
   10ec0:	73 81       	ldd	r23, Z+3	; 0x03
   10ec2:	c6 01       	movw	r24, r12
   10ec4:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   10ec8:	20 91 6d 19 	lds	r18, 0x196D	; 0x80196d <gpib_log_fp>
   10ecc:	30 91 6e 19 	lds	r19, 0x196E	; 0x80196e <gpib_log_fp+0x1>
   10ed0:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
   10ed4:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
   10ed8:	23 2b       	or	r18, r19
   10eda:	21 f4       	brne	.+8      	; 0x10ee4 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   10edc:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <gpib_log_fp+0x1>
   10ee0:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   10ee4:	20 91 6d 19 	lds	r18, 0x196D	; 0x80196d <gpib_log_fp>
   10ee8:	30 91 6e 19 	lds	r19, 0x196E	; 0x80196e <gpib_log_fp+0x1>
   10eec:	82 17       	cp	r24, r18
   10eee:	93 07       	cpc	r25, r19
   10ef0:	19 f0       	breq	.+6      	; 0x10ef8 <gpib_trace_display+0x25a>
        puts(str);
   10ef2:	c7 01       	movw	r24, r14
   10ef4:	0e 94 1a 74 	call	0xe834	; 0xe834 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   10ef8:	ed b7       	in	r30, 0x3d	; 61
   10efa:	fe b7       	in	r31, 0x3e	; 62
   10efc:	f6 82       	std	Z+6, r15	; 0x06
   10efe:	e5 82       	std	Z+5, r14	; 0x05
   10f00:	8b e6       	ldi	r24, 0x6B	; 107
   10f02:	9d e0       	ldi	r25, 0x0D	; 13
   10f04:	94 83       	std	Z+4, r25	; 0x04
   10f06:	83 83       	std	Z+3, r24	; 0x03
   10f08:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <gpib_log_fp>
   10f0c:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <gpib_log_fp+0x1>
   10f10:	92 83       	std	Z+2, r25	; 0x02
   10f12:	81 83       	std	Z+1, r24	; 0x01
   10f14:	0e 94 c2 7b 	call	0xf784	; 0xf784 <fprintf>
}
   10f18:	c7 57       	subi	r28, 0x77	; 119
   10f1a:	df 4f       	sbci	r29, 0xFF	; 255
   10f1c:	ec e0       	ldi	r30, 0x0C	; 12
   10f1e:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

00010f22 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   10f22:	a5 e0       	ldi	r26, 0x05	; 5
   10f24:	b0 e0       	ldi	r27, 0x00	; 0
   10f26:	e7 e9       	ldi	r30, 0x97	; 151
   10f28:	f7 e8       	ldi	r31, 0x87	; 135
   10f2a:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
    ch = 0;
    control_last = 0;


// If we have an unread state it has already been traced!
    if(gpib_unread_f)
   10f2e:	20 91 6c 19 	lds	r18, 0x196C	; 0x80196c <gpib_unread_f>
   10f32:	22 23       	and	r18, r18
   10f34:	39 f0       	breq	.+14     	; 0x10f44 <gpib_read_byte+0x22>
    {
        gpib_unread_f = 0;
   10f36:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <gpib_unread_f>
        return(gpib_unread_data);
   10f3a:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <gpib_unread_data>
   10f3e:	90 91 ff 1e 	lds	r25, 0x1EFF	; 0x801eff <gpib_unread_data+0x1>
   10f42:	d4 c0       	rjmp	.+424    	; 0x110ec <gpib_read_byte+0x1ca>
   10f44:	5c 01       	movw	r10, r24
    }

    gpib_bus_read_init(1);                        // Busy until we are ready
   10f46:	81 e0       	ldi	r24, 0x01	; 1
   10f48:	90 e0       	ldi	r25, 0x00	; 0
   10f4a:	6f db       	rcall	.-2338   	; 0x1062a <gpib_bus_read_init>

///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs

    if(trace)
   10f4c:	a1 14       	cp	r10, r1
   10f4e:	b1 04       	cpc	r11, r1
    {
        control_last = gpib_control_pin_read();
   10f50:	51 f0       	breq	.+20     	; 0x10f66 <gpib_read_byte+0x44>
   10f52:	a7 dc       	rcall	.-1714   	; 0x108a2 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   10f54:	7c 01       	movw	r14, r24
   10f56:	b5 dc       	rcall	.-1686   	; 0x108c2 <gpib_handshake_pin_read>
   10f58:	e8 2a       	or	r14, r24
        gpib_trace_display(control_last, TRACE_BUS);
   10f5a:	f9 2a       	or	r15, r25
   10f5c:	62 e0       	ldi	r22, 0x02	; 2
   10f5e:	70 e0       	ldi	r23, 0x00	; 0
   10f60:	c7 01       	movw	r24, r14
   10f62:	9d de       	rcall	.-710    	; 0x10c9e <gpib_trace_display>
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;
	extern void gpib_user_task();

    ch = 0;
    control_last = 0;
   10f64:	02 c0       	rjmp	.+4      	; 0x10f6a <gpib_read_byte+0x48>
   10f66:	e1 2c       	mov	r14, r1
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   10f68:	f1 2c       	mov	r15, r1
   10f6a:	00 e0       	ldi	r16, 0x00	; 0
   10f6c:	10 e0       	ldi	r17, 0x00	; 0
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {
gpib_user_task();
   10f6e:	c0 e0       	ldi	r28, 0x00	; 0
   10f70:	0e 94 43 dc 	call	0x1b886	; 0x1b886 <gpib_user_task>

        if(uart_keyhit(0))
   10f74:	80 e0       	ldi	r24, 0x00	; 0
   10f76:	0e 94 94 27 	call	0x4f28	; 0x4f28 <uart_keyhit>
   10f7a:	89 2b       	or	r24, r25
		{
			if(debuglevel & GPIB_ERR)
   10f7c:	91 f0       	breq	.+36     	; 0x10fa2 <gpib_read_byte+0x80>
   10f7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f82:	80 ff       	sbrs	r24, 0
				printf("gpib_read_byte: state=%d\n", rx_state);
   10f84:	90 c0       	rjmp	.+288    	; 0x110a6 <gpib_read_byte+0x184>
   10f86:	d0 e0       	ldi	r29, 0x00	; 0
   10f88:	ed b7       	in	r30, 0x3d	; 61
   10f8a:	fe b7       	in	r31, 0x3e	; 62
   10f8c:	d5 83       	std	Z+5, r29	; 0x05
   10f8e:	c4 83       	std	Z+4, r28	; 0x04
   10f90:	8a ed       	ldi	r24, 0xDA	; 218
   10f92:	9f e0       	ldi	r25, 0x0F	; 15
   10f94:	a0 e0       	ldi	r26, 0x00	; 0
   10f96:	81 83       	std	Z+1, r24	; 0x01
   10f98:	92 83       	std	Z+2, r25	; 0x02
   10f9a:	a3 83       	std	Z+3, r26	; 0x03
   10f9c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10fa0:	82 c0       	rjmp	.+260    	; 0x110a6 <gpib_read_byte+0x184>
   10fa2:	4c 99       	sbic	0x09, 4	; 9
        {
            ch |= IFC_FLAG;
   10fa4:	14 c0       	rjmp	.+40     	; 0x10fce <gpib_read_byte+0xac>
			if(debuglevel & GPIB_ERR)
   10fa6:	10 61       	ori	r17, 0x10	; 16
   10fa8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10fac:	80 ff       	sbrs	r24, 0
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   10fae:	0d c0       	rjmp	.+26     	; 0x10fca <gpib_read_byte+0xa8>
   10fb0:	d0 e0       	ldi	r29, 0x00	; 0
   10fb2:	ed b7       	in	r30, 0x3d	; 61
   10fb4:	fe b7       	in	r31, 0x3e	; 62
   10fb6:	d5 83       	std	Z+5, r29	; 0x05
   10fb8:	c4 83       	std	Z+4, r28	; 0x04
   10fba:	8c eb       	ldi	r24, 0xBC	; 188
   10fbc:	9f e0       	ldi	r25, 0x0F	; 15
   10fbe:	a0 e0       	ldi	r26, 0x00	; 0
   10fc0:	81 83       	std	Z+1, r24	; 0x01
   10fc2:	92 83       	std	Z+2, r25	; 0x02
   10fc4:	a3 83       	std	Z+3, r26	; 0x03
            gpib_bus_init();
   10fc6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   10fca:	52 db       	rcall	.-2396   	; 0x10670 <gpib_bus_init>
            break;
        }

        switch(rx_state)
   10fcc:	6c c0       	rjmp	.+216    	; 0x110a6 <gpib_read_byte+0x184>
   10fce:	8c 2f       	mov	r24, r28
   10fd0:	90 e0       	ldi	r25, 0x00	; 0
   10fd2:	89 30       	cpi	r24, 0x09	; 9
   10fd4:	91 05       	cpc	r25, r1
   10fd6:	08 f0       	brcs	.+2      	; 0x10fda <gpib_read_byte+0xb8>
   10fd8:	4c c0       	rjmp	.+152    	; 0x11072 <gpib_read_byte+0x150>
   10fda:	fc 01       	movw	r30, r24
   10fdc:	e9 53       	subi	r30, 0x39	; 57
   10fde:	ff 4f       	sbci	r31, 0xFF	; 255
   10fe0:	0c 94 93 df 	jmp	0x1bf26	; 0x1bf26 <__tablejump2__>
        {
            case GPIB_RX_START:
///@brief Signal that we are ready to ready
#if BOARD == 2
                GPIB_IO_HI(NRFD);
   10fe4:	5a 9a       	sbi	0x0b, 2	; 11
   10fe6:	52 9a       	sbi	0x0a, 2	; 10
   10fe8:	fd e0       	ldi	r31, 0x0D	; 13
   10fea:	fa 95       	dec	r31
   10fec:	f1 f7       	brne	.-4      	; 0x10fea <gpib_read_byte+0xc8>
#else
                GPIB_PIN_FLOAT_UP(NRFD);
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   10fee:	00 00       	nop
   10ff0:	c1 e0       	ldi	r28, 0x01	; 1
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   10ff2:	77 c0       	rjmp	.+238    	; 0x110e2 <gpib_read_byte+0x1c0>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   10ff4:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   10ff6:	75 c0       	rjmp	.+234    	; 0x110e2 <gpib_read_byte+0x1c0>

///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   10ff8:	c2 e0       	ldi	r28, 0x02	; 2
   10ffa:	73 c0       	rjmp	.+230    	; 0x110e2 <gpib_read_byte+0x1c0>
   10ffc:	5a 98       	cbi	0x0b, 2	; 11
   10ffe:	52 9a       	sbi	0x0a, 2	; 10
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   11000:	4a dc       	rcall	.-1900   	; 0x10896 <gpib_bus_read>
   11002:	c8 2e       	mov	r12, r24
   11004:	d1 2c       	mov	r13, r1
   11006:	4d dc       	rcall	.-1894   	; 0x108a2 <gpib_control_pin_read>
                ch |= control_last;
   11008:	7c 01       	movw	r14, r24
   1100a:	08 2b       	or	r16, r24

                if(trace)
   1100c:	19 2b       	or	r17, r25
   1100e:	0c 29       	or	r16, r12
   11010:	1d 29       	or	r17, r13
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   11012:	a1 14       	cp	r10, r1
   11014:	b1 04       	cpc	r11, r1
   11016:	49 f0       	breq	.+18     	; 0x1102a <gpib_read_byte+0x108>
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11018:	54 dc       	rcall	.-1880   	; 0x108c2 <gpib_handshake_pin_read>
   1101a:	e8 2a       	or	r14, r24
   1101c:	f9 2a       	or	r15, r25
   1101e:	61 e0       	ldi	r22, 0x01	; 1
   11020:	70 e0       	ldi	r23, 0x00	; 0
   11022:	c6 01       	movw	r24, r12
   11024:	8e 29       	or	r24, r14
                }

#if BOARD == 2
                GPIB_IO_HI(NDAC);
   11026:	9f 29       	or	r25, r15
   11028:	3a de       	rcall	.-908    	; 0x10c9e <gpib_trace_display>
   1102a:	5b 9a       	sbi	0x0b, 3	; 11
   1102c:	53 9a       	sbi	0x0a, 3	; 10
   1102e:	8d e0       	ldi	r24, 0x0D	; 13
#else
                GPIB_PIN_FLOAT_UP(NDAC);
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   11030:	8a 95       	dec	r24
   11032:	f1 f7       	brne	.-4      	; 0x11030 <gpib_read_byte+0x10e>
   11034:	00 00       	nop
   11036:	64 ef       	ldi	r22, 0xF4	; 244
   11038:	71 e0       	ldi	r23, 0x01	; 1
#if BOARD == 3
/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
#else
                rx_state = GPIB_RX_WAIT_FOR_NDAC_HI;
   1103a:	80 e0       	ldi	r24, 0x00	; 0
   1103c:	90 e0       	ldi	r25, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   1103e:	eb da       	rcall	.-2602   	; 0x10616 <gpib_timeout_set>
   11040:	c3 e0       	ldi	r28, 0x03	; 3
                {
                    gpib_timeout_set(HTIMEOUT);
   11042:	4f c0       	rjmp	.+158    	; 0x110e2 <gpib_read_byte+0x1c0>
   11044:	4b 9b       	sbis	0x09, 3	; 9
   11046:	09 c0       	rjmp	.+18     	; 0x1105a <gpib_read_byte+0x138>
   11048:	64 ef       	ldi	r22, 0xF4	; 244
   1104a:	71 e0       	ldi	r23, 0x01	; 1
   1104c:	80 e0       	ldi	r24, 0x00	; 0
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1104e:	90 e0       	ldi	r25, 0x00	; 0
   11050:	e2 da       	rcall	.-2620   	; 0x10616 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11052:	c4 e0       	ldi	r28, 0x04	; 4
   11054:	02 c0       	rjmp	.+4      	; 0x1105a <gpib_read_byte+0x138>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
                {
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11056:	19 99       	sbic	0x03, 1	; 3
   11058:	c5 e0       	ldi	r28, 0x05	; 5
   1105a:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
                    rx_state = GPIB_RX_ERROR;
   1105e:	88 23       	and	r24, r24
   11060:	09 f4       	brne	.+2      	; 0x11064 <gpib_read_byte+0x142>
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
   11062:	3f c0       	rjmp	.+126    	; 0x110e2 <gpib_read_byte+0x1c0>
   11064:	10 64       	ori	r17, 0x40	; 64
   11066:	c7 e0       	ldi	r28, 0x07	; 7
                break;
        }

        if(trace)
   11068:	3c c0       	rjmp	.+120    	; 0x110e2 <gpib_read_byte+0x1c0>
   1106a:	81 e0       	ldi	r24, 0x01	; 1
   1106c:	90 e0       	ldi	r25, 0x00	; 0
   1106e:	dd da       	rcall	.-2630   	; 0x1062a <gpib_bus_read_init>
   11070:	04 c0       	rjmp	.+8      	; 0x1107a <gpib_read_byte+0x158>
   11072:	a1 14       	cp	r10, r1
   11074:	b1 04       	cpc	r11, r1
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11076:	91 f0       	breq	.+36     	; 0x1109c <gpib_read_byte+0x17a>
   11078:	04 c0       	rjmp	.+8      	; 0x11082 <gpib_read_byte+0x160>
   1107a:	a1 14       	cp	r10, r1
            control |= gpib_handshake_pin_read();
   1107c:	b1 04       	cpc	r11, r1
   1107e:	99 f0       	breq	.+38     	; 0x110a6 <gpib_read_byte+0x184>
   11080:	c8 e0       	ldi	r28, 0x08	; 8
   11082:	0f dc       	rcall	.-2018   	; 0x108a2 <gpib_control_pin_read>
            if(control_last != control)
   11084:	6c 01       	movw	r12, r24
   11086:	1d dc       	rcall	.-1990   	; 0x108c2 <gpib_handshake_pin_read>
   11088:	c8 2a       	or	r12, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   1108a:	d9 2a       	or	r13, r25
   1108c:	ce 14       	cp	r12, r14
   1108e:	df 04       	cpc	r13, r15
   11090:	31 f0       	breq	.+12     	; 0x1109e <gpib_read_byte+0x17c>
   11092:	62 e0       	ldi	r22, 0x02	; 2
   11094:	70 e0       	ldi	r23, 0x00	; 0
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   11096:	c6 01       	movw	r24, r12
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11098:	02 de       	rcall	.-1020   	; 0x10c9e <gpib_trace_display>
   1109a:	01 c0       	rjmp	.+2      	; 0x1109e <gpib_read_byte+0x17c>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   1109c:	67 01       	movw	r12, r14
   1109e:	c8 30       	cpi	r28, 0x08	; 8
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   110a0:	11 f0       	breq	.+4      	; 0x110a6 <gpib_read_byte+0x184>
   110a2:	76 01       	movw	r14, r12
   110a4:	65 cf       	rjmp	.-310    	; 0x10f70 <gpib_read_byte+0x4e>
   110a6:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <current>
   110aa:	90 91 f9 1e 	lds	r25, 0x1EF9	; 0x801ef9 <current+0x1>
   110ae:	90 93 f5 1c 	sts	0x1CF5, r25	; 0x801cf5 <lastcmd+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   110b2:	80 93 f4 1c 	sts	0x1CF4, r24	; 0x801cf4 <lastcmd>
   110b6:	c8 01       	movw	r24, r16
   110b8:	88 27       	eor	r24, r24
   110ba:	90 7d       	andi	r25, 0xD0	; 208
   110bc:	89 2b       	or	r24, r25
        current = 0;
   110be:	11 f4       	brne	.+4      	; 0x110c4 <gpib_read_byte+0x1a2>
   110c0:	12 fd       	sbrc	r17, 2
   110c2:	05 c0       	rjmp	.+10     	; 0x110ce <gpib_read_byte+0x1ac>
   110c4:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <current+0x1>
    else
        current = ch & CMD_MASK;
   110c8:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <current>
   110cc:	07 c0       	rjmp	.+14     	; 0x110dc <gpib_read_byte+0x1ba>
   110ce:	c8 01       	movw	r24, r16
   110d0:	8f 77       	andi	r24, 0x7F	; 127
   110d2:	99 27       	eor	r25, r25
   110d4:	90 93 f9 1e 	sts	0x1EF9, r25	; 0x801ef9 <current+0x1>
   110d8:	80 93 f8 1e 	sts	0x1EF8, r24	; 0x801ef8 <current>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   110dc:	c8 01       	movw	r24, r16
   110de:	06 c0       	rjmp	.+12     	; 0x110ec <gpib_read_byte+0x1ca>
   110e0:	c6 e0       	ldi	r28, 0x06	; 6
   110e2:	a1 14       	cp	r10, r1
   110e4:	b1 04       	cpc	r11, r1
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   110e6:	69 f6       	brne	.-102    	; 0x11082 <gpib_read_byte+0x160>
   110e8:	67 01       	movw	r12, r14
   110ea:	db cf       	rjmp	.-74     	; 0x110a2 <gpib_read_byte+0x180>
   110ec:	cd b7       	in	r28, 0x3d	; 61
   110ee:	de b7       	in	r29, 0x3e	; 62
   110f0:	25 96       	adiw	r28, 0x05	; 5
   110f2:	ea e0       	ldi	r30, 0x0A	; 10
   110f4:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

000110f8 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   110f8:	60 e0       	ldi	r22, 0x00	; 0
   110fa:	70 e0       	ldi	r23, 0x00	; 0
   110fc:	d0 cd       	rjmp	.-1120   	; 0x10c9e <gpib_trace_display>
   110fe:	08 95       	ret

00011100 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11100:	a7 e0       	ldi	r26, 0x07	; 7
   11102:	b0 e0       	ldi	r27, 0x00	; 0
   11104:	e6 e8       	ldi	r30, 0x86	; 134
   11106:	f8 e8       	ldi	r31, 0x88	; 136
   11108:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
   1110c:	5b 01       	movw	r10, r22
   1110e:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11110:	fa 01       	movw	r30, r20
   11112:	20 81       	ld	r18, Z
   11114:	31 81       	ldd	r19, Z+1	; 0x01
   11116:	22 27       	eor	r18, r18
   11118:	31 83       	std	Z+1, r19	; 0x01
   1111a:	20 83       	st	Z, r18

    if(!size)
   1111c:	67 2b       	or	r22, r23
   1111e:	21 f0       	breq	.+8      	; 0x11128 <gpib_read_str+0x28>
   11120:	7c 01       	movw	r14, r24
   11122:	00 e0       	ldi	r16, 0x00	; 0
   11124:	10 e0       	ldi	r17, 0x00	; 0
   11126:	28 c0       	rjmp	.+80     	; 0x11178 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11128:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1112c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11130:	81 72       	andi	r24, 0x21	; 33
   11132:	91 70       	andi	r25, 0x01	; 1
   11134:	89 2b       	or	r24, r25
   11136:	09 f4       	brne	.+2      	; 0x1113a <gpib_read_str+0x3a>
   11138:	7c c0       	rjmp	.+248    	; 0x11232 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   1113a:	83 e7       	ldi	r24, 0x73	; 115
   1113c:	9f e0       	ldi	r25, 0x0F	; 15
   1113e:	a0 e0       	ldi	r26, 0x00	; 0
   11140:	ed b7       	in	r30, 0x3d	; 61
   11142:	fe b7       	in	r31, 0x3e	; 62
   11144:	81 83       	std	Z+1, r24	; 0x01
   11146:	92 83       	std	Z+2, r25	; 0x02
   11148:	a3 83       	std	Z+3, r26	; 0x03
   1114a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1114e:	71 c0       	rjmp	.+226    	; 0x11232 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11150:	8c 27       	eor	r24, r28
   11152:	9d 27       	eor	r25, r29
   11154:	92 fd       	sbrc	r25, 2
   11156:	2e c0       	rjmp	.+92     	; 0x111b4 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11158:	ce 01       	movw	r24, r28
   1115a:	88 27       	eor	r24, r24
   1115c:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   1115e:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11160:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11162:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11164:	f7 01       	movw	r30, r14
   11166:	20 83       	st	Z, r18
        ++ind;
   11168:	0f 5f       	subi	r16, 0xFF	; 255
   1116a:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1116c:	89 2b       	or	r24, r25
   1116e:	09 f4       	brne	.+2      	; 0x11172 <gpib_read_str+0x72>
   11170:	3c c0       	rjmp	.+120    	; 0x111ea <gpib_read_str+0xea>
   11172:	ff ef       	ldi	r31, 0xFF	; 255
   11174:	ef 1a       	sub	r14, r31
   11176:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11178:	0a 15       	cp	r16, r10
   1117a:	1b 05       	cpc	r17, r11
   1117c:	0c f0       	brlt	.+2      	; 0x11180 <gpib_read_str+0x80>
   1117e:	3f c0       	rjmp	.+126    	; 0x111fe <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11180:	80 e0       	ldi	r24, 0x00	; 0
   11182:	90 e0       	ldi	r25, 0x00	; 0
   11184:	ce de       	rcall	.-612    	; 0x10f22 <gpib_read_byte>
   11186:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11188:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1118c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11190:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   11192:	02 c0       	rjmp	.+4      	; 0x11198 <gpib_read_str+0x98>
   11194:	ce 01       	movw	r24, r28
#endif
        if(val & ERROR_MASK)
   11196:	b0 df       	rcall	.-160    	; 0x110f8 <gpib_decode>
   11198:	9e 01       	movw	r18, r28
   1119a:	22 27       	eor	r18, r18
   1119c:	30 7d       	andi	r19, 0xD0	; 208
   1119e:	f6 01       	movw	r30, r12
   111a0:	80 81       	ld	r24, Z
   111a2:	91 81       	ldd	r25, Z+1	; 0x01
   111a4:	21 15       	cp	r18, r1
   111a6:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   111a8:	99 f2       	breq	.-90     	; 0x11150 <gpib_read_str+0x50>
   111aa:	82 2b       	or	r24, r18
   111ac:	93 2b       	or	r25, r19
   111ae:	91 83       	std	Z+1, r25	; 0x01
            break;
   111b0:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   111b2:	28 c0       	rjmp	.+80     	; 0x11204 <gpib_read_str+0x104>
   111b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   111b8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   111bc:	81 72       	andi	r24, 0x21	; 33
   111be:	91 70       	andi	r25, 0x01	; 1
   111c0:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   111c2:	81 f0       	breq	.+32     	; 0x111e4 <gpib_read_str+0xe4>
   111c4:	ce 01       	movw	r24, r28
   111c6:	99 27       	eor	r25, r25
   111c8:	ed b7       	in	r30, 0x3d	; 61
   111ca:	fe b7       	in	r31, 0x3e	; 62
   111cc:	97 83       	std	Z+7, r25	; 0x07
   111ce:	86 83       	std	Z+6, r24	; 0x06
   111d0:	15 83       	std	Z+5, r17	; 0x05
   111d2:	04 83       	std	Z+4, r16	; 0x04
   111d4:	86 e4       	ldi	r24, 0x46	; 70
   111d6:	9f e0       	ldi	r25, 0x0F	; 15
   111d8:	a0 e0       	ldi	r26, 0x00	; 0
   111da:	81 83       	std	Z+1, r24	; 0x01
   111dc:	92 83       	std	Z+2, r25	; 0x02
   111de:	a3 83       	std	Z+3, r26	; 0x03
            gpib_unread(val);
   111e0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   111e4:	ce 01       	movw	r24, r28
            break;
   111e6:	2d db       	rcall	.-2470   	; 0x10842 <gpib_unread>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   111e8:	0d c0       	rjmp	.+26     	; 0x11204 <gpib_read_str+0x104>
   111ea:	d0 ff       	sbrs	r29, 0
        {

            if(*status & EOI_FLAG)
   111ec:	c2 cf       	rjmp	.-124    	; 0x11172 <gpib_read_str+0x72>
   111ee:	f6 01       	movw	r30, r12
   111f0:	80 81       	ld	r24, Z
   111f2:	91 81       	ldd	r25, Z+1	; 0x01
   111f4:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   111f6:	1f c0       	rjmp	.+62     	; 0x11236 <gpib_read_str+0x136>
   111f8:	91 60       	ori	r25, 0x01	; 1
   111fa:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   111fc:	80 83       	st	Z, r24
   111fe:	0a 15       	cp	r16, r10
   11200:	1b 05       	cpc	r17, r11
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   11202:	c9 f0       	breq	.+50     	; 0x11236 <gpib_read_str+0x136>
   11204:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11208:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1120c:	81 72       	andi	r24, 0x21	; 33
   1120e:	99 27       	eor	r25, r25
   11210:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11212:	89 f0       	breq	.+34     	; 0x11236 <gpib_read_str+0x136>
   11214:	ed b7       	in	r30, 0x3d	; 61
   11216:	fe b7       	in	r31, 0x3e	; 62
   11218:	b7 82       	std	Z+7, r11	; 0x07
   1121a:	a6 82       	std	Z+6, r10	; 0x06
   1121c:	15 83       	std	Z+5, r17	; 0x05
   1121e:	04 83       	std	Z+4, r16	; 0x04
   11220:	8f e1       	ldi	r24, 0x1F	; 31
   11222:	9f e0       	ldi	r25, 0x0F	; 15
   11224:	a0 e0       	ldi	r26, 0x00	; 0
   11226:	81 83       	std	Z+1, r24	; 0x01
   11228:	92 83       	std	Z+2, r25	; 0x02
   1122a:	a3 83       	std	Z+3, r26	; 0x03
   1122c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   11230:	02 c0       	rjmp	.+4      	; 0x11236 <gpib_read_str+0x136>
   11232:	00 e0       	ldi	r16, 0x00	; 0
    }
    return(ind);
}
   11234:	10 e0       	ldi	r17, 0x00	; 0
   11236:	c8 01       	movw	r24, r16
   11238:	cd b7       	in	r28, 0x3d	; 61
   1123a:	de b7       	in	r29, 0x3e	; 62
   1123c:	27 96       	adiw	r28, 0x07	; 7
   1123e:	ea e0       	ldi	r30, 0x0A	; 10
   11240:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

00011244 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11244:	a7 e0       	ldi	r26, 0x07	; 7
   11246:	b0 e0       	ldi	r27, 0x00	; 0
   11248:	e8 e2       	ldi	r30, 0x28	; 40
   1124a:	f9 e8       	ldi	r31, 0x89	; 137
   1124c:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
   11250:	8b 01       	movw	r16, r22
   11252:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11254:	fa 01       	movw	r30, r20
   11256:	20 81       	ld	r18, Z
   11258:	31 81       	ldd	r19, Z+1	; 0x01
   1125a:	22 27       	eor	r18, r18
   1125c:	31 83       	std	Z+1, r19	; 0x01
   1125e:	20 83       	st	Z, r18

    if(!size)
   11260:	67 2b       	or	r22, r23
   11262:	21 f0       	breq	.+8      	; 0x1126c <gpib_write_str+0x28>
   11264:	6c 01       	movw	r12, r24
   11266:	c0 e0       	ldi	r28, 0x00	; 0
   11268:	d0 e0       	ldi	r29, 0x00	; 0
   1126a:	35 c0       	rjmp	.+106    	; 0x112d6 <gpib_write_str+0x92>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1126c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11270:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11274:	81 72       	andi	r24, 0x21	; 33
   11276:	91 70       	andi	r25, 0x01	; 1
   11278:	89 2b       	or	r24, r25
   1127a:	09 f4       	brne	.+2      	; 0x1127e <gpib_write_str+0x3a>
   1127c:	4f c0       	rjmp	.+158    	; 0x1131c <gpib_write_str+0xd8>
            printf("gpib_write_str: size = 0\n");
   1127e:	85 e0       	ldi	r24, 0x05	; 5
   11280:	9f e0       	ldi	r25, 0x0F	; 15
   11282:	a0 e0       	ldi	r26, 0x00	; 0
   11284:	ed b7       	in	r30, 0x3d	; 61
   11286:	fe b7       	in	r31, 0x3e	; 62
   11288:	81 83       	std	Z+1, r24	; 0x01
   1128a:	92 83       	std	Z+2, r25	; 0x02
   1128c:	a3 83       	std	Z+3, r26	; 0x03
   1128e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   11292:	44 c0       	rjmp	.+136    	; 0x1131c <gpib_write_str+0xd8>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11294:	21 96       	adiw	r28, 0x01	; 1
   11296:	f6 01       	movw	r30, r12
   11298:	81 91       	ld	r24, Z+
   1129a:	6f 01       	movw	r12, r30
   1129c:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   1129e:	f7 01       	movw	r30, r14
   112a0:	20 81       	ld	r18, Z
   112a2:	31 81       	ldd	r19, Z+1	; 0x01
   112a4:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   112a6:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   112a8:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   112aa:	19 c0       	rjmp	.+50     	; 0x112de <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   112ac:	16 db       	rcall	.-2516   	; 0x108da <gpib_write_byte>
   112ae:	5c 01       	movw	r10, r24
   112b0:	aa 24       	eor	r10, r10
   112b2:	f0 ed       	ldi	r31, 0xD0	; 208
   112b4:	bf 22       	and	r11, r31
   112b6:	f7 01       	movw	r30, r14
   112b8:	20 81       	ld	r18, Z
   112ba:	31 81       	ldd	r19, Z+1	; 0x01
   112bc:	2a 29       	or	r18, r10
   112be:	3b 29       	or	r19, r11
   112c0:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   112c2:	20 83       	st	Z, r18
   112c4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   112c8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   112cc:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   112ce:	14 df       	rcall	.-472    	; 0x110f8 <gpib_decode>
   112d0:	a1 14       	cp	r10, r1
   112d2:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   112d4:	49 f4       	brne	.+18     	; 0x112e8 <gpib_write_str+0xa4>
   112d6:	c0 17       	cp	r28, r16
   112d8:	d1 07       	cpc	r29, r17
   112da:	e4 f2       	brlt	.-72     	; 0x11294 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   112dc:	05 c0       	rjmp	.+10     	; 0x112e8 <gpib_write_str+0xa4>
   112de:	0c 17       	cp	r16, r28
   112e0:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   112e2:	21 f7       	brne	.-56     	; 0x112ac <gpib_write_str+0x68>
   112e4:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   112e6:	e2 cf       	rjmp	.-60     	; 0x112ac <gpib_write_str+0x68>
   112e8:	c0 17       	cp	r28, r16
   112ea:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   112ec:	c9 f0       	breq	.+50     	; 0x11320 <gpib_write_str+0xdc>
   112ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   112f2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   112f6:	81 72       	andi	r24, 0x21	; 33
   112f8:	91 70       	andi	r25, 0x01	; 1
   112fa:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   112fc:	89 f0       	breq	.+34     	; 0x11320 <gpib_write_str+0xdc>
   112fe:	ed b7       	in	r30, 0x3d	; 61
   11300:	fe b7       	in	r31, 0x3e	; 62
   11302:	17 83       	std	Z+7, r17	; 0x07
   11304:	06 83       	std	Z+6, r16	; 0x06
   11306:	d5 83       	std	Z+5, r29	; 0x05
   11308:	c4 83       	std	Z+4, r28	; 0x04
   1130a:	8d ed       	ldi	r24, 0xDD	; 221
   1130c:	9e e0       	ldi	r25, 0x0E	; 14
   1130e:	a0 e0       	ldi	r26, 0x00	; 0
   11310:	81 83       	std	Z+1, r24	; 0x01
   11312:	92 83       	std	Z+2, r25	; 0x02
   11314:	a3 83       	std	Z+3, r26	; 0x03
   11316:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1131a:	02 c0       	rjmp	.+4      	; 0x11320 <gpib_write_str+0xdc>
   1131c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   1131e:	d0 e0       	ldi	r29, 0x00	; 0
   11320:	ce 01       	movw	r24, r28
   11322:	cd b7       	in	r28, 0x3d	; 61
   11324:	de b7       	in	r29, 0x3e	; 62
   11326:	27 96       	adiw	r28, 0x07	; 7
   11328:	ea e0       	ldi	r30, 0x0A	; 10
   1132a:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

0001132e <gpib_file_init>:
   1132e:	ad b7       	in	r26, 0x3d	; 61
   11330:	be b7       	in	r27, 0x3e	; 62
   11332:	17 97       	sbiw	r26, 0x07	; 7
   11334:	0f b6       	in	r0, 0x3f	; 63
   11336:	f8 94       	cli
   11338:	be bf       	out	0x3e, r27	; 62
   1133a:	0f be       	out	0x3f, r0	; 63
   1133c:	ad bf       	out	0x3d, r26	; 61
   1133e:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11342:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   11346:	88 eb       	ldi	r24, 0xB8	; 184
   11348:	91 e0       	ldi	r25, 0x01	; 1
   1134a:	0e 94 95 98 	call	0x1312a	; 0x1312a <Read_Config>
   1134e:	18 16       	cp	r1, r24
   11350:	19 06       	cpc	r1, r25
   11352:	8c f4       	brge	.+34     	; 0x11376 <gpib_file_init+0x48>
   11354:	ed b7       	in	r30, 0x3d	; 61
   11356:	fe b7       	in	r31, 0x3e	; 62
   11358:	97 83       	std	Z+7, r25	; 0x07
   1135a:	86 83       	std	Z+6, r24	; 0x06
   1135c:	88 eb       	ldi	r24, 0xB8	; 184
   1135e:	91 e0       	ldi	r25, 0x01	; 1
   11360:	95 83       	std	Z+5, r25	; 0x05
   11362:	84 83       	std	Z+4, r24	; 0x04
   11364:	8a e5       	ldi	r24, 0x5A	; 90
   11366:	94 e1       	ldi	r25, 0x14	; 20
   11368:	a0 e0       	ldi	r26, 0x00	; 0
   1136a:	81 83       	std	Z+1, r24	; 0x01
   1136c:	92 83       	std	Z+2, r25	; 0x02
   1136e:	a3 83       	std	Z+3, r26	; 0x03
   11370:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   11374:	10 c0       	rjmp	.+32     	; 0x11396 <gpib_file_init+0x68>
   11376:	89 2b       	or	r24, r25
   11378:	71 f0       	breq	.+28     	; 0x11396 <gpib_file_init+0x68>
   1137a:	88 eb       	ldi	r24, 0xB8	; 184
   1137c:	91 e0       	ldi	r25, 0x01	; 1
   1137e:	ed b7       	in	r30, 0x3d	; 61
   11380:	fe b7       	in	r31, 0x3e	; 62
   11382:	95 83       	std	Z+5, r25	; 0x05
   11384:	84 83       	std	Z+4, r24	; 0x04
   11386:	89 e4       	ldi	r24, 0x49	; 73
   11388:	94 e1       	ldi	r25, 0x14	; 20
   1138a:	a0 e0       	ldi	r26, 0x00	; 0
   1138c:	81 83       	std	Z+1, r24	; 0x01
   1138e:	92 83       	std	Z+2, r25	; 0x02
   11390:	a3 83       	std	Z+3, r26	; 0x03
   11392:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   11396:	0e 94 60 97 	call	0x12ec0	; 0x12ec0 <set_Config_Defaults>
   1139a:	0e 94 82 6d 	call	0xdb04	; 0xdb04 <mmc_wp_status>
   1139e:	89 2b       	or	r24, r25
   113a0:	51 f0       	breq	.+20     	; 0x113b6 <gpib_file_init+0x88>
   113a2:	80 e3       	ldi	r24, 0x30	; 48
   113a4:	94 e1       	ldi	r25, 0x14	; 20
   113a6:	a0 e0       	ldi	r26, 0x00	; 0
   113a8:	ed b7       	in	r30, 0x3d	; 61
   113aa:	fe b7       	in	r31, 0x3e	; 62
   113ac:	81 83       	std	Z+1, r24	; 0x01
   113ae:	92 83       	std	Z+2, r25	; 0x02
   113b0:	a3 83       	std	Z+3, r26	; 0x03
   113b2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   113b6:	ad b7       	in	r26, 0x3d	; 61
   113b8:	be b7       	in	r27, 0x3e	; 62
   113ba:	17 96       	adiw	r26, 0x07	; 7
   113bc:	0f b6       	in	r0, 0x3f	; 63
   113be:	f8 94       	cli
   113c0:	be bf       	out	0x3e, r27	; 62
   113c2:	0f be       	out	0x3f, r0	; 63
   113c4:	ad bf       	out	0x3d, r26	; 61
   113c6:	08 95       	ret

000113c8 <SS80_is_MLA>:
   113c8:	40 e2       	ldi	r20, 0x20	; 32
   113ca:	50 e0       	ldi	r21, 0x00	; 0
   113cc:	bc 01       	movw	r22, r24
   113ce:	83 e0       	ldi	r24, 0x03	; 3
   113d0:	90 e0       	ldi	r25, 0x00	; 0
   113d2:	0e 94 c6 94 	call	0x1298c	; 0x1298c <find_device>
   113d6:	8f 3f       	cpi	r24, 0xFF	; 255
   113d8:	2f ef       	ldi	r18, 0xFF	; 255
   113da:	92 07       	cpc	r25, r18
   113dc:	19 f0       	breq	.+6      	; 0x113e4 <SS80_is_MLA+0x1c>
   113de:	0c 94 f0 94 	jmp	0x129e0	; 0x129e0 <set_active_device>
   113e2:	08 95       	ret
   113e4:	80 e0       	ldi	r24, 0x00	; 0
   113e6:	90 e0       	ldi	r25, 0x00	; 0
   113e8:	08 95       	ret

000113ea <SS80_is_MTA>:
   113ea:	40 e4       	ldi	r20, 0x40	; 64
   113ec:	50 e0       	ldi	r21, 0x00	; 0
   113ee:	bc 01       	movw	r22, r24
   113f0:	83 e0       	ldi	r24, 0x03	; 3
   113f2:	90 e0       	ldi	r25, 0x00	; 0
   113f4:	0e 94 c6 94 	call	0x1298c	; 0x1298c <find_device>
   113f8:	8f 3f       	cpi	r24, 0xFF	; 255
   113fa:	2f ef       	ldi	r18, 0xFF	; 255
   113fc:	92 07       	cpc	r25, r18
   113fe:	19 f0       	breq	.+6      	; 0x11406 <SS80_is_MTA+0x1c>
   11400:	0c 94 f0 94 	jmp	0x129e0	; 0x129e0 <set_active_device>
   11404:	08 95       	ret
   11406:	80 e0       	ldi	r24, 0x00	; 0
   11408:	90 e0       	ldi	r25, 0x00	; 0
   1140a:	08 95       	ret

0001140c <SS80_is_MSA>:
   1140c:	40 e6       	ldi	r20, 0x60	; 96
   1140e:	50 e0       	ldi	r21, 0x00	; 0
   11410:	bc 01       	movw	r22, r24
   11412:	83 e0       	ldi	r24, 0x03	; 3
   11414:	90 e0       	ldi	r25, 0x00	; 0
   11416:	0e 94 c6 94 	call	0x1298c	; 0x1298c <find_device>
   1141a:	8f 3f       	cpi	r24, 0xFF	; 255
   1141c:	2f ef       	ldi	r18, 0xFF	; 255
   1141e:	92 07       	cpc	r25, r18
   11420:	19 f0       	breq	.+6      	; 0x11428 <SS80_is_MSA+0x1c>
   11422:	0c 94 f0 94 	jmp	0x129e0	; 0x129e0 <set_active_device>
   11426:	08 95       	ret
   11428:	80 e0       	ldi	r24, 0x00	; 0
   1142a:	90 e0       	ldi	r25, 0x00	; 0
   1142c:	08 95       	ret

0001142e <AMIGO_is_MLA>:
   1142e:	40 e2       	ldi	r20, 0x20	; 32
   11430:	50 e0       	ldi	r21, 0x00	; 0
   11432:	bc 01       	movw	r22, r24
   11434:	81 e0       	ldi	r24, 0x01	; 1
   11436:	90 e0       	ldi	r25, 0x00	; 0
   11438:	0e 94 c6 94 	call	0x1298c	; 0x1298c <find_device>
   1143c:	8f 3f       	cpi	r24, 0xFF	; 255
   1143e:	2f ef       	ldi	r18, 0xFF	; 255
   11440:	92 07       	cpc	r25, r18
   11442:	19 f0       	breq	.+6      	; 0x1144a <AMIGO_is_MLA+0x1c>
   11444:	0c 94 f0 94 	jmp	0x129e0	; 0x129e0 <set_active_device>
   11448:	08 95       	ret
   1144a:	80 e0       	ldi	r24, 0x00	; 0
   1144c:	90 e0       	ldi	r25, 0x00	; 0
   1144e:	08 95       	ret

00011450 <AMIGO_is_MTA>:
   11450:	40 e4       	ldi	r20, 0x40	; 64
   11452:	50 e0       	ldi	r21, 0x00	; 0
   11454:	bc 01       	movw	r22, r24
   11456:	81 e0       	ldi	r24, 0x01	; 1
   11458:	90 e0       	ldi	r25, 0x00	; 0
   1145a:	0e 94 c6 94 	call	0x1298c	; 0x1298c <find_device>
   1145e:	8f 3f       	cpi	r24, 0xFF	; 255
   11460:	2f ef       	ldi	r18, 0xFF	; 255
   11462:	92 07       	cpc	r25, r18
   11464:	19 f0       	breq	.+6      	; 0x1146c <AMIGO_is_MTA+0x1c>
   11466:	0c 94 f0 94 	jmp	0x129e0	; 0x129e0 <set_active_device>
   1146a:	08 95       	ret
   1146c:	80 e0       	ldi	r24, 0x00	; 0
   1146e:	90 e0       	ldi	r25, 0x00	; 0
   11470:	08 95       	ret

00011472 <AMIGO_is_MSA>:
   11472:	40 e6       	ldi	r20, 0x60	; 96
   11474:	50 e0       	ldi	r21, 0x00	; 0
   11476:	bc 01       	movw	r22, r24
   11478:	81 e0       	ldi	r24, 0x01	; 1
   1147a:	90 e0       	ldi	r25, 0x00	; 0
   1147c:	0e 94 c6 94 	call	0x1298c	; 0x1298c <find_device>
   11480:	8f 3f       	cpi	r24, 0xFF	; 255
   11482:	2f ef       	ldi	r18, 0xFF	; 255
   11484:	92 07       	cpc	r25, r18
   11486:	19 f0       	breq	.+6      	; 0x1148e <AMIGO_is_MSA+0x1c>
   11488:	0c 94 f0 94 	jmp	0x129e0	; 0x129e0 <set_active_device>
   1148c:	08 95       	ret
   1148e:	80 e0       	ldi	r24, 0x00	; 0
   11490:	90 e0       	ldi	r25, 0x00	; 0
   11492:	08 95       	ret

00011494 <PRINTER_is_MLA>:
   11494:	40 e2       	ldi	r20, 0x20	; 32
   11496:	50 e0       	ldi	r21, 0x00	; 0
   11498:	bc 01       	movw	r22, r24
   1149a:	84 e0       	ldi	r24, 0x04	; 4
   1149c:	90 e0       	ldi	r25, 0x00	; 0
   1149e:	0e 94 c6 94 	call	0x1298c	; 0x1298c <find_device>
   114a2:	8f 3f       	cpi	r24, 0xFF	; 255
   114a4:	2f ef       	ldi	r18, 0xFF	; 255
   114a6:	92 07       	cpc	r25, r18
   114a8:	19 f0       	breq	.+6      	; 0x114b0 <PRINTER_is_MLA+0x1c>
   114aa:	0c 94 f0 94 	jmp	0x129e0	; 0x129e0 <set_active_device>
   114ae:	08 95       	ret
   114b0:	80 e0       	ldi	r24, 0x00	; 0
   114b2:	90 e0       	ldi	r25, 0x00	; 0
   114b4:	08 95       	ret

000114b6 <PRINTER_is_MTA>:
   114b6:	40 e4       	ldi	r20, 0x40	; 64
   114b8:	50 e0       	ldi	r21, 0x00	; 0
   114ba:	bc 01       	movw	r22, r24
   114bc:	84 e0       	ldi	r24, 0x04	; 4
   114be:	90 e0       	ldi	r25, 0x00	; 0
   114c0:	0e 94 c6 94 	call	0x1298c	; 0x1298c <find_device>
   114c4:	8f 3f       	cpi	r24, 0xFF	; 255
   114c6:	2f ef       	ldi	r18, 0xFF	; 255
   114c8:	92 07       	cpc	r25, r18
   114ca:	19 f0       	breq	.+6      	; 0x114d2 <PRINTER_is_MTA+0x1c>
   114cc:	0c 94 f0 94 	jmp	0x129e0	; 0x129e0 <set_active_device>
   114d0:	08 95       	ret
   114d2:	80 e0       	ldi	r24, 0x00	; 0
   114d4:	90 e0       	ldi	r25, 0x00	; 0
   114d6:	08 95       	ret

000114d8 <gpib_init_devices>:
   114d8:	cb d8       	rcall	.-3690   	; 0x10670 <gpib_bus_init>
   114da:	f7 d8       	rcall	.-3602   	; 0x106ca <gpib_state_init>
   114dc:	0e 94 a3 a8 	call	0x15146	; 0x15146 <SS80_init>
   114e0:	0e 94 32 ae 	call	0x15c64	; 0x15c64 <amigo_init>
   114e4:	0c 94 67 b9 	jmp	0x172ce	; 0x172ce <printer_close>
   114e8:	08 95       	ret

000114ea <gpib_trace_task>:
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   114ea:	0f 93       	push	r16
   114ec:	1f 93       	push	r17
   114ee:	cf 93       	push	r28
   114f0:	df 93       	push	r29
   114f2:	00 d0       	rcall	.+0      	; 0x114f4 <gpib_trace_task+0xa>
   114f4:	00 d0       	rcall	.+0      	; 0x114f6 <gpib_trace_task+0xc>
   114f6:	1f 92       	push	r1
   114f8:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   114fa:	00 97       	sbiw	r24, 0x00	; 0
   114fc:	09 f4       	brne	.+2      	; 0x11500 <gpib_trace_task+0x16>
   114fe:	44 c0       	rjmp	.+136    	; 0x11588 <gpib_trace_task+0x9e>
   11500:	fc 01       	movw	r30, r24
   11502:	20 81       	ld	r18, Z
   11504:	22 23       	and	r18, r18
   11506:	09 f4       	brne	.+2      	; 0x1150a <gpib_trace_task+0x20>
   11508:	3f c0       	rjmp	.+126    	; 0x11588 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   1150a:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <skipspaces>
   1150e:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11510:	ed b7       	in	r30, 0x3d	; 61
   11512:	fe b7       	in	r31, 0x3e	; 62
   11514:	95 83       	std	Z+5, r25	; 0x05
   11516:	84 83       	std	Z+4, r24	; 0x04
   11518:	86 e1       	ldi	r24, 0x16	; 22
   1151a:	94 e1       	ldi	r25, 0x14	; 20
   1151c:	a0 e0       	ldi	r26, 0x00	; 0
   1151e:	81 83       	std	Z+1, r24	; 0x01
   11520:	92 83       	std	Z+2, r25	; 0x02
   11522:	a3 83       	std	Z+3, r26	; 0x03
   11524:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        if(detail)
   11528:	20 97       	sbiw	r28, 0x00	; 0
   1152a:	51 f0       	breq	.+20     	; 0x11540 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   1152c:	8b ee       	ldi	r24, 0xEB	; 235
   1152e:	93 e1       	ldi	r25, 0x13	; 19
   11530:	a0 e0       	ldi	r26, 0x00	; 0
   11532:	ed b7       	in	r30, 0x3d	; 61
   11534:	fe b7       	in	r31, 0x3e	; 62
   11536:	81 83       	std	Z+1, r24	; 0x01
   11538:	92 83       	std	Z+2, r25	; 0x02
   1153a:	a3 83       	std	Z+3, r26	; 0x03
   1153c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        printf("Press ANY key to exit\n");
   11540:	84 ed       	ldi	r24, 0xD4	; 212
   11542:	93 e1       	ldi	r25, 0x13	; 19
   11544:	a0 e0       	ldi	r26, 0x00	; 0
   11546:	ed b7       	in	r30, 0x3d	; 61
   11548:	fe b7       	in	r31, 0x3e	; 62
   1154a:	81 83       	std	Z+1, r24	; 0x01
   1154c:	92 83       	std	Z+2, r25	; 0x02
   1154e:	a3 83       	std	Z+3, r26	; 0x03
   11550:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11554:	67 e0       	ldi	r22, 0x07	; 7
   11556:	79 e0       	ldi	r23, 0x09	; 9
   11558:	c8 01       	movw	r24, r16
   1155a:	0e 94 b6 7b 	call	0xf76c	; 0xf76c <fopen>
   1155e:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <gpib_log_fp+0x1>
   11562:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11566:	89 2b       	or	r24, r25
   11568:	b9 f4       	brne	.+46     	; 0x11598 <gpib_trace_task+0xae>
        {
            perror("open failed");
   1156a:	8f e9       	ldi	r24, 0x9F	; 159
   1156c:	9d e0       	ldi	r25, 0x0D	; 13
   1156e:	0e 94 e7 75 	call	0xebce	; 0xebce <perror>
            printf("exiting...\n");
   11572:	88 ec       	ldi	r24, 0xC8	; 200
   11574:	93 e1       	ldi	r25, 0x13	; 19
   11576:	a0 e0       	ldi	r26, 0x00	; 0
   11578:	ed b7       	in	r30, 0x3d	; 61
   1157a:	fe b7       	in	r31, 0x3e	; 62
   1157c:	81 83       	std	Z+1, r24	; 0x01
   1157e:	92 83       	std	Z+2, r25	; 0x02
   11580:	a3 83       	std	Z+3, r26	; 0x03
   11582:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            return;
   11586:	3d c0       	rjmp	.+122    	; 0x11602 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11588:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
   1158c:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
   11590:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <gpib_log_fp+0x1>
   11594:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <gpib_log_fp>

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();

    gpib_decode_header(gpib_log_fp);
   11598:	9f df       	rcall	.-194    	; 0x114d8 <gpib_init_devices>
   1159a:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <gpib_log_fp>
   1159e:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <gpib_log_fp+0x1>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   115a2:	2b db       	rcall	.-2474   	; 0x10bfa <gpib_decode_header>
   115a4:	80 e0       	ldi	r24, 0x00	; 0
   115a6:	0e 94 94 27 	call	0x4f28	; 0x4f28 <uart_keyhit>
            break;

        ch = gpib_read_byte(detail);
   115aa:	89 2b       	or	r24, r25
   115ac:	31 f4       	brne	.+12     	; 0x115ba <gpib_trace_task+0xd0>
        if(!detail)
   115ae:	ce 01       	movw	r24, r28
   115b0:	b8 dc       	rcall	.-1680   	; 0x10f22 <gpib_read_byte>
            gpib_decode(ch);
   115b2:	20 97       	sbiw	r28, 0x00	; 0
   115b4:	b9 f7       	brne	.-18     	; 0x115a4 <gpib_trace_task+0xba>
   115b6:	a0 dd       	rcall	.-1216   	; 0x110f8 <gpib_decode>
    }

    printf("Done\n");
   115b8:	f5 cf       	rjmp	.-22     	; 0x115a4 <gpib_trace_task+0xba>
   115ba:	82 ec       	ldi	r24, 0xC2	; 194
   115bc:	93 e1       	ldi	r25, 0x13	; 19
   115be:	a0 e0       	ldi	r26, 0x00	; 0
   115c0:	ed b7       	in	r30, 0x3d	; 61
   115c2:	fe b7       	in	r31, 0x3e	; 62
   115c4:	81 83       	std	Z+1, r24	; 0x01
   115c6:	92 83       	std	Z+2, r25	; 0x02
   115c8:	a3 83       	std	Z+3, r26	; 0x03
   115ca:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    if(gpib_log_fp)
   115ce:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <gpib_log_fp>
   115d2:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <gpib_log_fp+0x1>
   115d6:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(gpib_log_fp);
   115d8:	a1 f0       	breq	.+40     	; 0x11602 <gpib_trace_task+0x118>
   115da:	0e 94 60 7a 	call	0xf4c0	; 0xf4c0 <fclose>
        printf("Capturing Closed\n");
   115de:	80 eb       	ldi	r24, 0xB0	; 176
   115e0:	93 e1       	ldi	r25, 0x13	; 19
   115e2:	a0 e0       	ldi	r26, 0x00	; 0
   115e4:	ed b7       	in	r30, 0x3d	; 61
   115e6:	fe b7       	in	r31, 0x3e	; 62
   115e8:	81 83       	std	Z+1, r24	; 0x01
   115ea:	92 83       	std	Z+2, r25	; 0x02
   115ec:	a3 83       	std	Z+3, r26	; 0x03
   115ee:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        gpib_log_fp = stdout;
   115f2:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
   115f6:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
   115fa:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <gpib_log_fp+0x1>
   115fe:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <gpib_log_fp>
    }
}
   11602:	cd b7       	in	r28, 0x3d	; 61
   11604:	de b7       	in	r29, 0x3e	; 62
   11606:	25 96       	adiw	r28, 0x05	; 5
   11608:	e4 e0       	ldi	r30, 0x04	; 4
   1160a:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

0001160e <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   1160e:	ef 92       	push	r14
   11610:	ff 92       	push	r15
   11612:	0f 93       	push	r16
   11614:	1f 93       	push	r17
   11616:	cf 93       	push	r28
   11618:	df 93       	push	r29
   1161a:	00 d0       	rcall	.+0      	; 0x1161c <gpib_error_test+0xe>
   1161c:	1f 92       	push	r1
   1161e:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11620:	ec 01       	movw	r28, r24
   11622:	cc 27       	eor	r28, r28
   11624:	d0 7d       	andi	r29, 0xD0	; 208
   11626:	20 97       	sbiw	r28, 0x00	; 0
   11628:	61 f0       	breq	.+24     	; 0x11642 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   1162a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1162e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11632:	8d 72       	andi	r24, 0x2D	; 45
   11634:	99 27       	eor	r25, r25
   11636:	87 01       	movw	r16, r14
   11638:	00 27       	eor	r16, r16
   1163a:	10 71       	andi	r17, 0x10	; 16
   1163c:	89 2b       	or	r24, r25
   1163e:	59 f4       	brne	.+22     	; 0x11656 <gpib_error_test+0x48>
   11640:	17 c0       	rjmp	.+46     	; 0x11670 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11642:	80 e0       	ldi	r24, 0x00	; 0
   11644:	0e 94 94 27 	call	0x4f28	; 0x4f28 <uart_keyhit>
   11648:	89 2b       	or	r24, r25
   1164a:	79 f7       	brne	.-34     	; 0x1162a <gpib_error_test+0x1c>
   1164c:	0e 94 90 6c 	call	0xd920	; 0xd920 <mmc_ins_status>
   11650:	01 97       	sbiw	r24, 0x01	; 1
   11652:	59 f7       	brne	.-42     	; 0x1162a <gpib_error_test+0x1c>
   11654:	62 c0       	rjmp	.+196    	; 0x1171a <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11656:	01 15       	cp	r16, r1
   11658:	11 05       	cpc	r17, r1
   1165a:	51 f0       	breq	.+20     	; 0x11670 <gpib_error_test+0x62>
                printf("<IFC>\n");
   1165c:	89 ea       	ldi	r24, 0xA9	; 169
   1165e:	93 e1       	ldi	r25, 0x13	; 19
   11660:	a0 e0       	ldi	r26, 0x00	; 0
   11662:	ed b7       	in	r30, 0x3d	; 61
   11664:	fe b7       	in	r31, 0x3e	; 62
   11666:	81 83       	std	Z+1, r24	; 0x01
   11668:	92 83       	std	Z+2, r25	; 0x02
   1166a:	a3 83       	std	Z+3, r26	; 0x03
   1166c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11670:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11674:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11678:	8d 72       	andi	r24, 0x2D	; 45
   1167a:	99 27       	eor	r25, r25
   1167c:	89 2b       	or	r24, r25
   1167e:	c1 f0       	breq	.+48     	; 0x116b0 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11680:	f6 fe       	sbrs	r15, 6
   11682:	0a c0       	rjmp	.+20     	; 0x11698 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11684:	8e e9       	ldi	r24, 0x9E	; 158
   11686:	93 e1       	ldi	r25, 0x13	; 19
   11688:	a0 e0       	ldi	r26, 0x00	; 0
   1168a:	ed b7       	in	r30, 0x3d	; 61
   1168c:	fe b7       	in	r31, 0x3e	; 62
   1168e:	81 83       	std	Z+1, r24	; 0x01
   11690:	92 83       	std	Z+2, r25	; 0x02
   11692:	a3 83       	std	Z+3, r26	; 0x03
   11694:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11698:	d7 ff       	sbrs	r29, 7
   1169a:	0a c0       	rjmp	.+20     	; 0x116b0 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   1169c:	87 e9       	ldi	r24, 0x97	; 151
   1169e:	93 e1       	ldi	r25, 0x13	; 19
   116a0:	a0 e0       	ldi	r26, 0x00	; 0
   116a2:	ed b7       	in	r30, 0x3d	; 61
   116a4:	fe b7       	in	r31, 0x3e	; 62
   116a6:	81 83       	std	Z+1, r24	; 0x01
   116a8:	92 83       	std	Z+2, r25	; 0x02
   116aa:	a3 83       	std	Z+3, r26	; 0x03
   116ac:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        }

        if(uart_keyhit(0))
   116b0:	80 e0       	ldi	r24, 0x00	; 0
   116b2:	0e 94 94 27 	call	0x4f28	; 0x4f28 <uart_keyhit>
   116b6:	89 2b       	or	r24, r25
   116b8:	51 f0       	breq	.+20     	; 0x116ce <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   116ba:	8a e8       	ldi	r24, 0x8A	; 138
   116bc:	93 e1       	ldi	r25, 0x13	; 19
   116be:	a0 e0       	ldi	r26, 0x00	; 0
   116c0:	ed b7       	in	r30, 0x3d	; 61
   116c2:	fe b7       	in	r31, 0x3e	; 62
   116c4:	81 83       	std	Z+1, r24	; 0x01
   116c6:	92 83       	std	Z+2, r25	; 0x02
   116c8:	a3 83       	std	Z+3, r26	; 0x03
   116ca:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

        if( mmc_ins_status() != 1 )
   116ce:	0e 94 90 6c 	call	0xd920	; 0xd920 <mmc_ins_status>
   116d2:	01 97       	sbiw	r24, 0x01	; 1
   116d4:	51 f0       	breq	.+20     	; 0x116ea <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   116d6:	89 e7       	ldi	r24, 0x79	; 121
   116d8:	93 e1       	ldi	r25, 0x13	; 19
   116da:	a0 e0       	ldi	r26, 0x00	; 0
   116dc:	ed b7       	in	r30, 0x3d	; 61
   116de:	fe b7       	in	r31, 0x3e	; 62
   116e0:	81 83       	std	Z+1, r24	; 0x01
   116e2:	92 83       	std	Z+2, r25	; 0x02
   116e4:	a3 83       	std	Z+3, r26	; 0x03
   116e6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

        if(val & IFC_FLAG)
   116ea:	01 15       	cp	r16, r1
   116ec:	11 05       	cpc	r17, r1
        {
            gpib_init_devices();
   116ee:	09 f0       	breq	.+2      	; 0x116f2 <gpib_error_test+0xe4>
        }

        if(uart_keyhit(0))
   116f0:	f3 de       	rcall	.-538    	; 0x114d8 <gpib_init_devices>
   116f2:	80 e0       	ldi	r24, 0x00	; 0
   116f4:	0e 94 94 27 	call	0x4f28	; 0x4f28 <uart_keyhit>
        {
            gpib_init_devices();
   116f8:	89 2b       	or	r24, r25
   116fa:	11 f0       	breq	.+4      	; 0x11700 <gpib_error_test+0xf2>
   116fc:	ed de       	rcall	.-550    	; 0x114d8 <gpib_init_devices>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   116fe:	0b c0       	rjmp	.+22     	; 0x11716 <gpib_error_test+0x108>
   11700:	0e 94 90 6c 	call	0xd920	; 0xd920 <mmc_ins_status>
   11704:	01 97       	sbiw	r24, 0x01	; 1
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11706:	39 f4       	brne	.+14     	; 0x11716 <gpib_error_test+0x108>
   11708:	01 15       	cp	r16, r1
   1170a:	11 05       	cpc	r17, r1
        {
            while(GPIB_IO_RD(IFC) == 0)
   1170c:	31 f0       	breq	.+12     	; 0x1171a <gpib_error_test+0x10c>
   1170e:	54 98       	cbi	0x0a, 4	; 10
   11710:	4c 9b       	sbis	0x09, 4	; 9
   11712:	fd cf       	rjmp	.-6      	; 0x1170e <gpib_error_test+0x100>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11714:	02 c0       	rjmp	.+4      	; 0x1171a <gpib_error_test+0x10c>
   11716:	c1 e0       	ldi	r28, 0x01	; 1
                ;
        }
        return(val);
    }
    return(0);
}
   11718:	d0 e0       	ldi	r29, 0x00	; 0
   1171a:	ce 01       	movw	r24, r28
   1171c:	cd b7       	in	r28, 0x3d	; 61
   1171e:	de b7       	in	r29, 0x3e	; 62
   11720:	23 96       	adiw	r28, 0x03	; 3
   11722:	e6 e0       	ldi	r30, 0x06	; 6
   11724:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00011728 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11728:	1f 93       	push	r17
   1172a:	cf 93       	push	r28
   1172c:	df 93       	push	r29
   1172e:	ec 01       	movw	r28, r24
   11730:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11732:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11736:	8f 35       	cpi	r24, 0x5F	; 95
   11738:	91 f0       	breq	.+36     	; 0x1175e <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   1173a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1173e:	90 e0       	ldi	r25, 0x00	; 0
   11740:	76 de       	rcall	.-788    	; 0x1142e <AMIGO_is_MLA>
   11742:	89 2b       	or	r24, r25
   11744:	c9 f4       	brne	.+50     	; 0x11778 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11746:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1174a:	90 e0       	ldi	r25, 0x00	; 0
   1174c:	3d de       	rcall	.-902    	; 0x113c8 <SS80_is_MLA>
   1174e:	89 2b       	or	r24, r25
   11750:	11 f5       	brne	.+68     	; 0x11796 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11752:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11756:	90 e0       	ldi	r25, 0x00	; 0
   11758:	9d de       	rcall	.-710    	; 0x11494 <PRINTER_is_MLA>
   1175a:	89 2b       	or	r24, r25
   1175c:	59 f5       	brne	.+86     	; 0x117b4 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   1175e:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11762:	8f 33       	cpi	r24, 0x3F	; 63
   11764:	19 f4       	brne	.+6      	; 0x1176c <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11766:	80 e0       	ldi	r24, 0x00	; 0
   11768:	90 e0       	ldi	r25, 0x00	; 0

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   1176a:	2e c0       	rjmp	.+92     	; 0x117c8 <GPIB_COMMANDS+0xa0>
   1176c:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11770:	90 e0       	ldi	r25, 0x00	; 0
   11772:	6e de       	rcall	.-804    	; 0x11450 <AMIGO_is_MTA>
        {
            if(unread)
   11774:	89 2b       	or	r24, r25
   11776:	49 f0       	breq	.+18     	; 0x1178a <GPIB_COMMANDS+0x62>
                gpib_unread(val);
   11778:	11 23       	and	r17, r17
   1177a:	11 f0       	breq	.+4      	; 0x11780 <GPIB_COMMANDS+0x58>
   1177c:	ce 01       	movw	r24, r28
            status = AMIGO_COMMANDS(secondary);
   1177e:	61 d8       	rcall	.-3902   	; 0x10842 <gpib_unread>
   11780:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
   11784:	0e 94 62 b8 	call	0x170c4	; 0x170c4 <AMIGO_COMMANDS>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11788:	1d c0       	rjmp	.+58     	; 0x117c4 <GPIB_COMMANDS+0x9c>
   1178a:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1178e:	90 e0       	ldi	r25, 0x00	; 0
   11790:	2c de       	rcall	.-936    	; 0x113ea <SS80_is_MTA>
        {
            if(unread)
   11792:	89 2b       	or	r24, r25
   11794:	49 f0       	breq	.+18     	; 0x117a8 <GPIB_COMMANDS+0x80>
                gpib_unread(val);
   11796:	11 23       	and	r17, r17
   11798:	11 f0       	breq	.+4      	; 0x1179e <GPIB_COMMANDS+0x76>
   1179a:	ce 01       	movw	r24, r28
            status = SS80_COMMANDS(secondary);
   1179c:	52 d8       	rcall	.-3932   	; 0x10842 <gpib_unread>
   1179e:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
   117a2:	0e 94 7e ac 	call	0x158fc	; 0x158fc <SS80_COMMANDS>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   117a6:	0e c0       	rjmp	.+28     	; 0x117c4 <GPIB_COMMANDS+0x9c>
   117a8:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   117ac:	90 e0       	ldi	r25, 0x00	; 0
   117ae:	83 de       	rcall	.-762    	; 0x114b6 <PRINTER_is_MTA>
        {
            if(unread)
   117b0:	89 2b       	or	r24, r25
   117b2:	c9 f2       	breq	.-78     	; 0x11766 <GPIB_COMMANDS+0x3e>
                gpib_unread(val);
   117b4:	11 23       	and	r17, r17
   117b6:	11 f0       	breq	.+4      	; 0x117bc <GPIB_COMMANDS+0x94>
   117b8:	ce 01       	movw	r24, r28
            status = PRINTER_COMMANDS(secondary);
   117ba:	43 d8       	rcall	.-3962   	; 0x10842 <gpib_unread>
   117bc:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
   117c0:	0e 94 db ba 	call	0x175b6	; 0x175b6 <PRINTER_COMMANDS>
            secondary = 0;
   117c4:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <secondary>
            return(status);
        }
    }
    return(0);
}
   117c8:	df 91       	pop	r29
   117ca:	cf 91       	pop	r28
   117cc:	1f 91       	pop	r17
   117ce:	08 95       	ret

000117d0 <Send_Identify>:
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   117d0:	cf 92       	push	r12
   117d2:	df 92       	push	r13
   117d4:	ff 92       	push	r15
   117d6:	0f 93       	push	r16
   117d8:	1f 93       	push	r17
   117da:	cf 93       	push	r28
   117dc:	df 93       	push	r29
   117de:	cd b7       	in	r28, 0x3d	; 61
   117e0:	de b7       	in	r29, 0x3e	; 62
   117e2:	2b 97       	sbiw	r28, 0x0b	; 11
   117e4:	0f b6       	in	r0, 0x3f	; 63
   117e6:	f8 94       	cli
   117e8:	de bf       	out	0x3e, r29	; 62
   117ea:	0f be       	out	0x3f, r0	; 63
   117ec:	cd bf       	out	0x3d, r28	; 61
   117ee:	f8 2e       	mov	r15, r24
   117f0:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   117f2:	80 e0       	ldi	r24, 0x00	; 0
   117f4:	91 e0       	ldi	r25, 0x01	; 1
   117f6:	9b 87       	std	Y+11, r25	; 0x0b
   117f8:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   117fa:	8b 01       	movw	r16, r22
   117fc:	20 e0       	ldi	r18, 0x00	; 0
   117fe:	30 e0       	ldi	r19, 0x00	; 0
   11800:	42 e0       	ldi	r20, 0x02	; 2
   11802:	50 e0       	ldi	r21, 0x00	; 0
   11804:	60 e0       	ldi	r22, 0x00	; 0
   11806:	70 e0       	ldi	r23, 0x00	; 0
   11808:	ce 01       	movw	r24, r28
   1180a:	08 96       	adiw	r24, 0x08	; 8
   1180c:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11810:	ae 01       	movw	r20, r28
   11812:	46 5f       	subi	r20, 0xF6	; 246
   11814:	5f 4f       	sbci	r21, 0xFF	; 255
   11816:	62 e0       	ldi	r22, 0x02	; 2
   11818:	70 e0       	ldi	r23, 0x00	; 0
   1181a:	ce 01       	movw	r24, r28
   1181c:	08 96       	adiw	r24, 0x08	; 8
   1181e:	12 dd       	rcall	.-1500   	; 0x11244 <gpib_write_str>
   11820:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11824:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11828:	02 97       	sbiw	r24, 0x02	; 2
   1182a:	79 f0       	breq	.+30     	; 0x1184a <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1182c:	25 72       	andi	r18, 0x25	; 37
   1182e:	33 27       	eor	r19, r19
   11830:	23 2b       	or	r18, r19
   11832:	f9 f0       	breq	.+62     	; 0x11872 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11834:	ed b7       	in	r30, 0x3d	; 61
   11836:	fe b7       	in	r31, 0x3e	; 62
   11838:	d7 82       	std	Z+7, r13	; 0x07
   1183a:	c6 82       	std	Z+6, r12	; 0x06
   1183c:	8f 2d       	mov	r24, r15
   1183e:	90 e0       	ldi	r25, 0x00	; 0
   11840:	95 83       	std	Z+5, r25	; 0x05
   11842:	84 83       	std	Z+4, r24	; 0x04
   11844:	88 e5       	ldi	r24, 0x58	; 88
   11846:	93 e1       	ldi	r25, 0x13	; 19
   11848:	0e c0       	rjmp	.+28     	; 0x11866 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1184a:	24 72       	andi	r18, 0x24	; 36
   1184c:	33 27       	eor	r19, r19
   1184e:	23 2b       	or	r18, r19
   11850:	81 f0       	breq	.+32     	; 0x11872 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11852:	ed b7       	in	r30, 0x3d	; 61
   11854:	fe b7       	in	r31, 0x3e	; 62
   11856:	d7 82       	std	Z+7, r13	; 0x07
   11858:	c6 82       	std	Z+6, r12	; 0x06
   1185a:	8f 2d       	mov	r24, r15
   1185c:	90 e0       	ldi	r25, 0x00	; 0
   1185e:	95 83       	std	Z+5, r25	; 0x05
   11860:	84 83       	std	Z+4, r24	; 0x04
   11862:	8e e3       	ldi	r24, 0x3E	; 62
   11864:	93 e1       	ldi	r25, 0x13	; 19
   11866:	a0 e0       	ldi	r26, 0x00	; 0
   11868:	81 83       	std	Z+1, r24	; 0x01
   1186a:	92 83       	std	Z+2, r25	; 0x02
   1186c:	a3 83       	std	Z+3, r26	; 0x03
   1186e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
    return (status & ERROR_MASK);
   11872:	8a 85       	ldd	r24, Y+10	; 0x0a
   11874:	9b 85       	ldd	r25, Y+11	; 0x0b
   11876:	88 27       	eor	r24, r24
   11878:	90 7d       	andi	r25, 0xD0	; 208
}
   1187a:	2b 96       	adiw	r28, 0x0b	; 11
   1187c:	0f b6       	in	r0, 0x3f	; 63
   1187e:	f8 94       	cli
   11880:	de bf       	out	0x3e, r29	; 62
   11882:	0f be       	out	0x3f, r0	; 63
   11884:	cd bf       	out	0x3d, r28	; 61
   11886:	df 91       	pop	r29
   11888:	cf 91       	pop	r28
   1188a:	1f 91       	pop	r17
   1188c:	0f 91       	pop	r16
   1188e:	ff 90       	pop	r15
   11890:	df 90       	pop	r13
   11892:	cf 90       	pop	r12
   11894:	08 95       	ret

00011896 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11896:	00 d0       	rcall	.+0      	; 0x11898 <GPIB+0x2>
   11898:	00 d0       	rcall	.+0      	; 0x1189a <GPIB+0x4>
   1189a:	1f 92       	push	r1
   1189c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   118a0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   118a4:	85 30       	cpi	r24, 0x05	; 5
   118a6:	89 f4       	brne	.+34     	; 0x118ca <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   118a8:	27 71       	andi	r18, 0x17	; 23
   118aa:	33 27       	eor	r19, r19
   118ac:	23 2b       	or	r18, r19
   118ae:	51 f0       	breq	.+20     	; 0x118c4 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   118b0:	86 e2       	ldi	r24, 0x26	; 38
   118b2:	93 e1       	ldi	r25, 0x13	; 19
   118b4:	a0 e0       	ldi	r26, 0x00	; 0
   118b6:	ed b7       	in	r30, 0x3d	; 61
   118b8:	fe b7       	in	r31, 0x3e	; 62
   118ba:	81 83       	std	Z+1, r24	; 0x01
   118bc:	92 83       	std	Z+2, r25	; 0x02
   118be:	a3 83       	std	Z+3, r26	; 0x03
   118c0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        spoll = 0;
   118c4:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <spoll>
   118c8:	a0 c0       	rjmp	.+320    	; 0x11a0a <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   118ca:	85 31       	cpi	r24, 0x15	; 21
   118cc:	39 f4       	brne	.+14     	; 0x118dc <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   118ce:	27 71       	andi	r18, 0x17	; 23
   118d0:	33 27       	eor	r19, r19
   118d2:	23 2b       	or	r18, r19
   118d4:	b9 f3       	breq	.-18     	; 0x118c4 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   118d6:	8e e0       	ldi	r24, 0x0E	; 14
   118d8:	93 e1       	ldi	r25, 0x13	; 19
   118da:	ec cf       	rjmp	.-40     	; 0x118b4 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   118dc:	88 31       	cpi	r24, 0x18	; 24
   118de:	d9 f4       	brne	.+54     	; 0x11916 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   118e0:	26 70       	andi	r18, 0x06	; 6
   118e2:	33 27       	eor	r19, r19
   118e4:	23 2b       	or	r18, r19
   118e6:	51 f0       	breq	.+20     	; 0x118fc <GPIB+0x66>
            printf("[SPE]\n");
   118e8:	87 e0       	ldi	r24, 0x07	; 7
   118ea:	93 e1       	ldi	r25, 0x13	; 19
   118ec:	a0 e0       	ldi	r26, 0x00	; 0
   118ee:	ed b7       	in	r30, 0x3d	; 61
   118f0:	fe b7       	in	r31, 0x3e	; 62
   118f2:	81 83       	std	Z+1, r24	; 0x01
   118f4:	92 83       	std	Z+2, r25	; 0x02
   118f6:	a3 83       	std	Z+3, r26	; 0x03
   118f8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
        spoll = 1;
   118fc:	81 e0       	ldi	r24, 0x01	; 1
   118fe:	80 93 f7 1e 	sts	0x1EF7, r24	; 0x801ef7 <spoll>
        if(SS80_is_MTA(talking))
   11902:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11906:	90 e0       	ldi	r25, 0x00	; 0
   11908:	70 dd       	rcall	.-1312   	; 0x113ea <SS80_is_MTA>
   1190a:	89 2b       	or	r24, r25
   1190c:	09 f4       	brne	.+2      	; 0x11910 <GPIB+0x7a>
   1190e:	7d c0       	rjmp	.+250    	; 0x11a0a <GPIB+0x174>
        {
            return( SS80_Report() );
   11910:	0e 94 37 a8 	call	0x1506e	; 0x1506e <SS80_Report>
   11914:	7c c0       	rjmp	.+248    	; 0x11a0e <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11916:	89 31       	cpi	r24, 0x19	; 25
   11918:	39 f4       	brne	.+14     	; 0x11928 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1191a:	26 70       	andi	r18, 0x06	; 6
   1191c:	33 27       	eor	r19, r19
   1191e:	23 2b       	or	r18, r19
   11920:	89 f2       	breq	.-94     	; 0x118c4 <GPIB+0x2e>
            printf("[SPD]\n");
   11922:	80 e0       	ldi	r24, 0x00	; 0
   11924:	93 e1       	ldi	r25, 0x13	; 19
   11926:	c6 cf       	rjmp	.-116    	; 0x118b4 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11928:	84 30       	cpi	r24, 0x04	; 4
   1192a:	09 f0       	breq	.+2      	; 0x1192e <GPIB+0x98>
   1192c:	48 c0       	rjmp	.+144    	; 0x119be <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1192e:	22 ff       	sbrs	r18, 2
   11930:	0a c0       	rjmp	.+20     	; 0x11946 <GPIB+0xb0>
            printf("[SDC]\n");
   11932:	89 ef       	ldi	r24, 0xF9	; 249
   11934:	92 e1       	ldi	r25, 0x12	; 18
   11936:	a0 e0       	ldi	r26, 0x00	; 0
   11938:	ed b7       	in	r30, 0x3d	; 61
   1193a:	fe b7       	in	r31, 0x3e	; 62
   1193c:	81 83       	std	Z+1, r24	; 0x01
   1193e:	92 83       	std	Z+2, r25	; 0x02
   11940:	a3 83       	std	Z+3, r26	; 0x03
   11942:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11946:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1194a:	90 e0       	ldi	r25, 0x00	; 0
   1194c:	3d dd       	rcall	.-1414   	; 0x113c8 <SS80_is_MLA>
   1194e:	89 2b       	or	r24, r25
   11950:	d9 f0       	breq	.+54     	; 0x11988 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11952:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11956:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1195a:	84 72       	andi	r24, 0x24	; 36
   1195c:	99 27       	eor	r25, r25
   1195e:	89 2b       	or	r24, r25
   11960:	51 f0       	breq	.+20     	; 0x11976 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11962:	8d ee       	ldi	r24, 0xED	; 237
   11964:	92 e1       	ldi	r25, 0x12	; 18
   11966:	a0 e0       	ldi	r26, 0x00	; 0
   11968:	ed b7       	in	r30, 0x3d	; 61
   1196a:	fe b7       	in	r31, 0x3e	; 62
   1196c:	81 83       	std	Z+1, r24	; 0x01
   1196e:	92 83       	std	Z+2, r25	; 0x02
   11970:	a3 83       	std	Z+3, r26	; 0x03
   11972:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11976:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1197a:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   1197e:	85 81       	ldd	r24, Z+5	; 0x05
   11980:	90 e0       	ldi	r25, 0x00	; 0
   11982:	0e 94 03 a9 	call	0x15206	; 0x15206 <SS80_Selected_Device_Clear>
   11986:	43 c0       	rjmp	.+134    	; 0x11a0e <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11988:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1198c:	90 e0       	ldi	r25, 0x00	; 0
   1198e:	4f dd       	rcall	.-1378   	; 0x1142e <AMIGO_is_MLA>
   11990:	89 2b       	or	r24, r25
   11992:	d9 f1       	breq	.+118    	; 0x11a0a <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11994:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11998:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1199c:	84 72       	andi	r24, 0x24	; 36
   1199e:	99 27       	eor	r25, r25
   119a0:	89 2b       	or	r24, r25
   119a2:	51 f0       	breq	.+20     	; 0x119b8 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   119a4:	80 ee       	ldi	r24, 0xE0	; 224
   119a6:	92 e1       	ldi	r25, 0x12	; 18
   119a8:	a0 e0       	ldi	r26, 0x00	; 0
   119aa:	ed b7       	in	r30, 0x3d	; 61
   119ac:	fe b7       	in	r31, 0x3e	; 62
   119ae:	81 83       	std	Z+1, r24	; 0x01
   119b0:	92 83       	std	Z+2, r25	; 0x02
   119b2:	a3 83       	std	Z+3, r26	; 0x03
   119b4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
            return( amigo_cmd_clear() );
   119b8:	0e 94 48 b3 	call	0x16690	; 0x16690 <amigo_cmd_clear>
   119bc:	28 c0       	rjmp	.+80     	; 0x11a0e <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   119be:	84 31       	cpi	r24, 0x14	; 20
   119c0:	99 f4       	brne	.+38     	; 0x119e8 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   119c2:	22 ff       	sbrs	r18, 2
   119c4:	0a c0       	rjmp	.+20     	; 0x119da <GPIB+0x144>
            printf("[DCL]\n");
   119c6:	89 ed       	ldi	r24, 0xD9	; 217
   119c8:	92 e1       	ldi	r25, 0x12	; 18
   119ca:	a0 e0       	ldi	r26, 0x00	; 0
   119cc:	ed b7       	in	r30, 0x3d	; 61
   119ce:	fe b7       	in	r31, 0x3e	; 62
   119d0:	81 83       	std	Z+1, r24	; 0x01
   119d2:	92 83       	std	Z+2, r25	; 0x02
   119d4:	a3 83       	std	Z+3, r26	; 0x03
   119d6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   119da:	0e 94 f5 a8 	call	0x151ea	; 0x151ea <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   119de:	0e 94 48 b3 	call	0x16690	; 0x16690 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   119e2:	0e 94 67 b9 	call	0x172ce	; 0x172ce <printer_close>
   119e6:	11 c0       	rjmp	.+34     	; 0x11a0a <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   119e8:	25 71       	andi	r18, 0x15	; 21
   119ea:	33 27       	eor	r19, r19
   119ec:	23 2b       	or	r18, r19
   119ee:	69 f0       	breq	.+26     	; 0x11a0a <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   119f0:	90 e0       	ldi	r25, 0x00	; 0
   119f2:	ed b7       	in	r30, 0x3d	; 61
   119f4:	fe b7       	in	r31, 0x3e	; 62
   119f6:	95 83       	std	Z+5, r25	; 0x05
   119f8:	84 83       	std	Z+4, r24	; 0x04
   119fa:	88 eb       	ldi	r24, 0xB8	; 184
   119fc:	92 e1       	ldi	r25, 0x12	; 18
   119fe:	a0 e0       	ldi	r26, 0x00	; 0
   11a00:	81 83       	std	Z+1, r24	; 0x01
   11a02:	92 83       	std	Z+2, r25	; 0x02
   11a04:	a3 83       	std	Z+3, r26	; 0x03
   11a06:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    return(0);
   11a0a:	80 e0       	ldi	r24, 0x00	; 0
   11a0c:	90 e0       	ldi	r25, 0x00	; 0
}
   11a0e:	0f 90       	pop	r0
   11a10:	0f 90       	pop	r0
   11a12:	0f 90       	pop	r0
   11a14:	0f 90       	pop	r0
   11a16:	0f 90       	pop	r0
   11a18:	08 95       	ret

00011a1a <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11a1a:	cf 93       	push	r28
   11a1c:	df 93       	push	r29
   11a1e:	00 d0       	rcall	.+0      	; 0x11a20 <GPIB_TALK+0x6>
   11a20:	00 d0       	rcall	.+0      	; 0x11a22 <GPIB_TALK+0x8>
   11a22:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11a24:	90 91 fa 1e 	lds	r25, 0x1EFA	; 0x801efa <talking>
   11a28:	90 93 fd 1e 	sts	0x1EFD, r25	; 0x801efd <talking_last>
    talking = ch;
   11a2c:	80 93 fa 1e 	sts	0x1EFA, r24	; 0x801efa <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11a30:	8f 35       	cpi	r24, 0x5F	; 95
   11a32:	79 f4       	brne	.+30     	; 0x11a52 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11a34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11a38:	82 ff       	sbrs	r24, 2
   11a3a:	7f c0       	rjmp	.+254    	; 0x11b3a <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11a3c:	85 e6       	ldi	r24, 0x65	; 101
   11a3e:	92 e1       	ldi	r25, 0x12	; 18
   11a40:	a0 e0       	ldi	r26, 0x00	; 0
   11a42:	ed b7       	in	r30, 0x3d	; 61
   11a44:	fe b7       	in	r31, 0x3e	; 62
   11a46:	81 83       	std	Z+1, r24	; 0x01
   11a48:	92 83       	std	Z+2, r25	; 0x02
   11a4a:	a3 83       	std	Z+3, r26	; 0x03
   11a4c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   11a50:	74 c0       	rjmp	.+232    	; 0x11b3a <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11a52:	c8 2f       	mov	r28, r24
   11a54:	d0 e0       	ldi	r29, 0x00	; 0
   11a56:	ce 01       	movw	r24, r28
   11a58:	c8 dc       	rcall	.-1648   	; 0x113ea <SS80_is_MTA>
   11a5a:	89 2b       	or	r24, r25
   11a5c:	e1 f0       	breq	.+56     	; 0x11a96 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11a5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11a62:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11a66:	84 72       	andi	r24, 0x24	; 36
   11a68:	99 27       	eor	r25, r25
   11a6a:	89 2b       	or	r24, r25
   11a6c:	61 f0       	breq	.+24     	; 0x11a86 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11a6e:	ed b7       	in	r30, 0x3d	; 61
   11a70:	fe b7       	in	r31, 0x3e	; 62
   11a72:	d5 83       	std	Z+5, r29	; 0x05
   11a74:	c4 83       	std	Z+4, r28	; 0x04
   11a76:	84 e5       	ldi	r24, 0x54	; 84
   11a78:	92 e1       	ldi	r25, 0x12	; 18
   11a7a:	a0 e0       	ldi	r26, 0x00	; 0
   11a7c:	81 83       	std	Z+1, r24	; 0x01
   11a7e:	92 83       	std	Z+2, r25	; 0x02
   11a80:	a3 83       	std	Z+3, r26	; 0x03
   11a82:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif

        if (spoll)
   11a86:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <spoll>
   11a8a:	88 23       	and	r24, r24
   11a8c:	09 f4       	brne	.+2      	; 0x11a90 <GPIB_TALK+0x76>
   11a8e:	55 c0       	rjmp	.+170    	; 0x11b3a <GPIB_TALK+0x120>
        {
            SS80_Report();
   11a90:	0e 94 37 a8 	call	0x1506e	; 0x1506e <SS80_Report>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11a94:	52 c0       	rjmp	.+164    	; 0x11b3a <GPIB_TALK+0x120>
   11a96:	ce 01       	movw	r24, r28
   11a98:	db dc       	rcall	.-1610   	; 0x11450 <AMIGO_is_MTA>
   11a9a:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11a9c:	81 f0       	breq	.+32     	; 0x11abe <GPIB_TALK+0xa4>
   11a9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11aa2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11aa6:	84 72       	andi	r24, 0x24	; 36
   11aa8:	99 27       	eor	r25, r25
   11aaa:	89 2b       	or	r24, r25
   11aac:	09 f4       	brne	.+2      	; 0x11ab0 <GPIB_TALK+0x96>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11aae:	45 c0       	rjmp	.+138    	; 0x11b3a <GPIB_TALK+0x120>
   11ab0:	ed b7       	in	r30, 0x3d	; 61
   11ab2:	fe b7       	in	r31, 0x3e	; 62
   11ab4:	d5 83       	std	Z+5, r29	; 0x05
   11ab6:	c4 83       	std	Z+4, r28	; 0x04
   11ab8:	82 e4       	ldi	r24, 0x42	; 66
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11aba:	92 e1       	ldi	r25, 0x12	; 18
   11abc:	38 c0       	rjmp	.+112    	; 0x11b2e <GPIB_TALK+0x114>
   11abe:	ce 01       	movw	r24, r28
   11ac0:	fa dc       	rcall	.-1548   	; 0x114b6 <PRINTER_is_MTA>
   11ac2:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ac4:	79 f0       	breq	.+30     	; 0x11ae4 <GPIB_TALK+0xca>
   11ac6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11aca:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ace:	84 72       	andi	r24, 0x24	; 36
   11ad0:	99 27       	eor	r25, r25
   11ad2:	89 2b       	or	r24, r25
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11ad4:	91 f1       	breq	.+100    	; 0x11b3a <GPIB_TALK+0x120>
   11ad6:	ed b7       	in	r30, 0x3d	; 61
   11ad8:	fe b7       	in	r31, 0x3e	; 62
   11ada:	d5 83       	std	Z+5, r29	; 0x05
   11adc:	c4 83       	std	Z+4, r28	; 0x04
   11ade:	8e e2       	ldi	r24, 0x2E	; 46
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11ae0:	92 e1       	ldi	r25, 0x12	; 18
   11ae2:	25 c0       	rjmp	.+74     	; 0x11b2e <GPIB_TALK+0x114>
   11ae4:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11ae8:	90 e0       	ldi	r25, 0x00	; 0
   11aea:	d4 dc       	rcall	.-1624   	; 0x11494 <PRINTER_is_MLA>
   11aec:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11af0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11af4:	89 2b       	or	r24, r25
   11af6:	99 f0       	breq	.+38     	; 0x11b1e <GPIB_TALK+0x104>
   11af8:	24 72       	andi	r18, 0x24	; 36
   11afa:	33 27       	eor	r19, r19
            printf("[PRINTER OPEN]\n");
   11afc:	23 2b       	or	r18, r19
   11afe:	51 f0       	breq	.+20     	; 0x11b14 <GPIB_TALK+0xfa>
   11b00:	8e e1       	ldi	r24, 0x1E	; 30
   11b02:	92 e1       	ldi	r25, 0x12	; 18
   11b04:	a0 e0       	ldi	r26, 0x00	; 0
   11b06:	ed b7       	in	r30, 0x3d	; 61
   11b08:	fe b7       	in	r31, 0x3e	; 62
   11b0a:	81 83       	std	Z+1, r24	; 0x01
   11b0c:	92 83       	std	Z+2, r25	; 0x02
   11b0e:	a3 83       	std	Z+3, r26	; 0x03
        printer_open(NULL);
   11b10:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   11b14:	80 e0       	ldi	r24, 0x00	; 0
   11b16:	90 e0       	ldi	r25, 0x00	; 0
   11b18:	0e 94 bf b9 	call	0x1737e	; 0x1737e <printer_open>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11b1c:	0e c0       	rjmp	.+28     	; 0x11b3a <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11b1e:	22 ff       	sbrs	r18, 2
   11b20:	0c c0       	rjmp	.+24     	; 0x11b3a <GPIB_TALK+0x120>
   11b22:	ed b7       	in	r30, 0x3d	; 61
   11b24:	fe b7       	in	r31, 0x3e	; 62
   11b26:	d5 83       	std	Z+5, r29	; 0x05
   11b28:	c4 83       	std	Z+4, r28	; 0x04
   11b2a:	82 e1       	ldi	r24, 0x12	; 18
   11b2c:	92 e1       	ldi	r25, 0x12	; 18
   11b2e:	a0 e0       	ldi	r26, 0x00	; 0
   11b30:	81 83       	std	Z+1, r24	; 0x01
   11b32:	92 83       	std	Z+2, r25	; 0x02
   11b34:	a3 83       	std	Z+3, r26	; 0x03
#endif
    return(0);
}                                                 // Talk Address primary address group
   11b36:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   11b3a:	80 e0       	ldi	r24, 0x00	; 0
   11b3c:	90 e0       	ldi	r25, 0x00	; 0
   11b3e:	cd b7       	in	r28, 0x3d	; 61
   11b40:	de b7       	in	r29, 0x3e	; 62
   11b42:	25 96       	adiw	r28, 0x05	; 5
   11b44:	e2 e0       	ldi	r30, 0x02	; 2
   11b46:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00011b4a <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11b4a:	a9 e0       	ldi	r26, 0x09	; 9
   11b4c:	b0 e0       	ldi	r27, 0x00	; 0
   11b4e:	eb ea       	ldi	r30, 0xAB	; 171
   11b50:	fd e8       	ldi	r31, 0x8D	; 141
   11b52:	0c 94 d1 df 	jmp	0x1bfa2	; 0x1bfa2 <__prologue_saves__+0x1e>
   11b56:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11b58:	c8 2f       	mov	r28, r24
   11b5a:	d0 e0       	ldi	r29, 0x00	; 0
   11b5c:	ce 01       	movw	r24, r28
   11b5e:	56 dc       	rcall	.-1876   	; 0x1140c <SS80_is_MSA>
   11b60:	89 2b       	or	r24, r25
   11b62:	09 f1       	breq	.+66     	; 0x11ba6 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b68:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b6c:	84 72       	andi	r24, 0x24	; 36
   11b6e:	99 27       	eor	r25, r25
   11b70:	89 2b       	or	r24, r25
   11b72:	61 f0       	breq	.+24     	; 0x11b8c <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11b74:	ed b7       	in	r30, 0x3d	; 61
   11b76:	fe b7       	in	r31, 0x3e	; 62
   11b78:	d5 83       	std	Z+5, r29	; 0x05
   11b7a:	c4 83       	std	Z+4, r28	; 0x04
   11b7c:	81 e0       	ldi	r24, 0x01	; 1
   11b7e:	92 e1       	ldi	r25, 0x12	; 18
   11b80:	a0 e0       	ldi	r26, 0x00	; 0
   11b82:	81 83       	std	Z+1, r24	; 0x01
   11b84:	92 83       	std	Z+2, r25	; 0x02
   11b86:	a3 83       	std	Z+3, r26	; 0x03
   11b88:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11b8c:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   11b90:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   11b94:	81 81       	ldd	r24, Z+1	; 0x01
   11b96:	90 e0       	ldi	r25, 0x00	; 0
   11b98:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11b9c:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   11ba0:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11ba4:	25 c0       	rjmp	.+74     	; 0x11bf0 <GPIB_SECONDARY_ADDRESS+0xa6>
   11ba6:	ce 01       	movw	r24, r28
   11ba8:	64 dc       	rcall	.-1848   	; 0x11472 <AMIGO_is_MSA>
   11baa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11bae:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11bb2:	89 2b       	or	r24, r25
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11bb4:	11 f1       	breq	.+68     	; 0x11bfa <GPIB_SECONDARY_ADDRESS+0xb0>
   11bb6:	c9 01       	movw	r24, r18
   11bb8:	84 72       	andi	r24, 0x24	; 36
   11bba:	99 27       	eor	r25, r25
   11bbc:	89 2b       	or	r24, r25
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11bbe:	61 f0       	breq	.+24     	; 0x11bd8 <GPIB_SECONDARY_ADDRESS+0x8e>
   11bc0:	ed b7       	in	r30, 0x3d	; 61
   11bc2:	fe b7       	in	r31, 0x3e	; 62
   11bc4:	d5 83       	std	Z+5, r29	; 0x05
   11bc6:	c4 83       	std	Z+4, r28	; 0x04
   11bc8:	8f ee       	ldi	r24, 0xEF	; 239
   11bca:	91 e1       	ldi	r25, 0x11	; 17
   11bcc:	a0 e0       	ldi	r26, 0x00	; 0
   11bce:	81 83       	std	Z+1, r24	; 0x01
   11bd0:	92 83       	std	Z+2, r25	; 0x02
   11bd2:	a3 83       	std	Z+3, r26	; 0x03
   11bd4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11bd8:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   11bdc:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   11be0:	81 81       	ldd	r24, Z+1	; 0x01
   11be2:	90 e0       	ldi	r25, 0x00	; 0
   11be4:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11be8:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   11bec:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   11bf0:	64 81       	ldd	r22, Z+4	; 0x04
   11bf2:	75 81       	ldd	r23, Z+5	; 0x05
   11bf4:	81 2f       	mov	r24, r17
   11bf6:	ec dd       	rcall	.-1064   	; 0x117d0 <Send_Identify>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11bf8:	1d c0       	rjmp	.+58     	; 0x11c34 <GPIB_SECONDARY_ADDRESS+0xea>
   11bfa:	c9 01       	movw	r24, r18
   11bfc:	84 72       	andi	r24, 0x24	; 36
   11bfe:	99 27       	eor	r25, r25
   11c00:	00 97       	sbiw	r24, 0x00	; 0
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11c02:	c1 f0       	breq	.+48     	; 0x11c34 <GPIB_SECONDARY_ADDRESS+0xea>
   11c04:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11c08:	90 e0       	ldi	r25, 0x00	; 0
   11c0a:	ed b7       	in	r30, 0x3d	; 61
   11c0c:	fe b7       	in	r31, 0x3e	; 62
   11c0e:	91 87       	std	Z+9, r25	; 0x09
   11c10:	80 87       	std	Z+8, r24	; 0x08
   11c12:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11c16:	90 e0       	ldi	r25, 0x00	; 0
   11c18:	97 83       	std	Z+7, r25	; 0x07
   11c1a:	86 83       	std	Z+6, r24	; 0x06
   11c1c:	d5 83       	std	Z+5, r29	; 0x05
   11c1e:	c4 83       	std	Z+4, r28	; 0x04
   11c20:	89 ec       	ldi	r24, 0xC9	; 201
   11c22:	91 e1       	ldi	r25, 0x11	; 17
   11c24:	a0 e0       	ldi	r26, 0x00	; 0
   11c26:	81 83       	std	Z+1, r24	; 0x01
   11c28:	92 83       	std	Z+2, r25	; 0x02
   11c2a:	a3 83       	std	Z+3, r26	; 0x03
   11c2c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11c30:	80 e0       	ldi	r24, 0x00	; 0
}
   11c32:	90 e0       	ldi	r25, 0x00	; 0
   11c34:	cd b7       	in	r28, 0x3d	; 61
   11c36:	de b7       	in	r29, 0x3e	; 62
   11c38:	29 96       	adiw	r28, 0x09	; 9
   11c3a:	e3 e0       	ldi	r30, 0x03	; 3
   11c3c:	0c 94 ed df 	jmp	0x1bfda	; 0x1bfda <__epilogue_restores__+0x1e>

00011c40 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11c40:	00 d0       	rcall	.+0      	; 0x11c42 <listen_cleanup+0x2>
   11c42:	1f 92       	push	r1
    if(listening_last)
   11c44:	60 91 f6 1e 	lds	r22, 0x1EF6	; 0x801ef6 <listening_last>
   11c48:	66 23       	and	r22, r22
   11c4a:	e1 f0       	breq	.+56     	; 0x11c84 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11c4c:	70 e0       	ldi	r23, 0x00	; 0
   11c4e:	40 e2       	ldi	r20, 0x20	; 32
   11c50:	50 e0       	ldi	r21, 0x00	; 0
   11c52:	84 e0       	ldi	r24, 0x04	; 4
   11c54:	90 e0       	ldi	r25, 0x00	; 0
   11c56:	9a d6       	rcall	.+3380   	; 0x1298c <find_device>
        if(index == -1)
   11c58:	01 96       	adiw	r24, 0x01	; 1
   11c5a:	a1 f0       	breq	.+40     	; 0x11c84 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c60:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c64:	84 72       	andi	r24, 0x24	; 36
   11c66:	99 27       	eor	r25, r25
   11c68:	89 2b       	or	r24, r25
   11c6a:	51 f0       	breq	.+20     	; 0x11c80 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11c6c:	88 eb       	ldi	r24, 0xB8	; 184
   11c6e:	91 e1       	ldi	r25, 0x11	; 17
   11c70:	a0 e0       	ldi	r26, 0x00	; 0
   11c72:	ed b7       	in	r30, 0x3d	; 61
   11c74:	fe b7       	in	r31, 0x3e	; 62
   11c76:	81 83       	std	Z+1, r24	; 0x01
   11c78:	92 83       	std	Z+2, r25	; 0x02
   11c7a:	a3 83       	std	Z+3, r26	; 0x03
   11c7c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        printer_close();
   11c80:	0e 94 67 b9 	call	0x172ce	; 0x172ce <printer_close>
    }
}
   11c84:	0f 90       	pop	r0
   11c86:	0f 90       	pop	r0
   11c88:	0f 90       	pop	r0
   11c8a:	08 95       	ret

00011c8c <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11c8c:	cf 93       	push	r28
   11c8e:	df 93       	push	r29
   11c90:	00 d0       	rcall	.+0      	; 0x11c92 <GPIB_LISTEN+0x6>
   11c92:	00 d0       	rcall	.+0      	; 0x11c94 <GPIB_LISTEN+0x8>
   11c94:	1f 92       	push	r1
   11c96:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11c98:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11c9c:	80 93 f6 1e 	sts	0x1EF6, r24	; 0x801ef6 <listening_last>
    listening = ch;
   11ca0:	c0 93 fc 1e 	sts	0x1EFC, r28	; 0x801efc <listening>
    listen_cleanup();

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   11ca4:	cd df       	rcall	.-102    	; 0x11c40 <listen_cleanup>
   11ca6:	cf 33       	cpi	r28, 0x3F	; 63
    {
        listening = 0;
   11ca8:	19 f5       	brne	.+70     	; 0x11cf0 <GPIB_LISTEN+0x64>
   11caa:	10 92 fc 1e 	sts	0x1EFC, r1	; 0x801efc <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11cae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11cb2:	82 ff       	sbrs	r24, 2
        {
            printf("[UNL]\n");
   11cb4:	74 c0       	rjmp	.+232    	; 0x11d9e <GPIB_LISTEN+0x112>
   11cb6:	81 eb       	ldi	r24, 0xB1	; 177
   11cb8:	92 e1       	ldi	r25, 0x12	; 18
   11cba:	a0 e0       	ldi	r26, 0x00	; 0
   11cbc:	ed b7       	in	r30, 0x3d	; 61
   11cbe:	fe b7       	in	r31, 0x3e	; 62
   11cc0:	81 83       	std	Z+1, r24	; 0x01
   11cc2:	92 83       	std	Z+2, r25	; 0x02
   11cc4:	a3 83       	std	Z+3, r26	; 0x03
   11cc6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   11cca:	80 91 f4 1c 	lds	r24, 0x1CF4	; 0x801cf4 <lastcmd>
   11cce:	90 91 f5 1c 	lds	r25, 0x1CF5	; 0x801cf5 <lastcmd+0x1>
   11cd2:	8f 35       	cpi	r24, 0x5F	; 95
   11cd4:	91 05       	cpc	r25, r1
   11cd6:	09 f0       	breq	.+2      	; 0x11cda <GPIB_LISTEN+0x4e>
                printf("\n");
   11cd8:	62 c0       	rjmp	.+196    	; 0x11d9e <GPIB_LISTEN+0x112>
   11cda:	8f ea       	ldi	r24, 0xAF	; 175
   11cdc:	92 e1       	ldi	r25, 0x12	; 18
   11cde:	a0 e0       	ldi	r26, 0x00	; 0
   11ce0:	ed b7       	in	r30, 0x3d	; 61
   11ce2:	fe b7       	in	r31, 0x3e	; 62
   11ce4:	81 83       	std	Z+1, r24	; 0x01
   11ce6:	92 83       	std	Z+2, r25	; 0x02
   11ce8:	a3 83       	std	Z+3, r26	; 0x03
   11cea:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   11cee:	57 c0       	rjmp	.+174    	; 0x11d9e <GPIB_LISTEN+0x112>
   11cf0:	d0 e0       	ldi	r29, 0x00	; 0
   11cf2:	ce 01       	movw	r24, r28
   11cf4:	9c db       	rcall	.-2248   	; 0x1142e <AMIGO_is_MLA>
   11cf6:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11cf8:	81 f0       	breq	.+32     	; 0x11d1a <GPIB_LISTEN+0x8e>
   11cfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11cfe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d02:	84 72       	andi	r24, 0x24	; 36
   11d04:	99 27       	eor	r25, r25
   11d06:	89 2b       	or	r24, r25
   11d08:	09 f4       	brne	.+2      	; 0x11d0c <GPIB_LISTEN+0x80>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   11d0a:	49 c0       	rjmp	.+146    	; 0x11d9e <GPIB_LISTEN+0x112>
   11d0c:	ed b7       	in	r30, 0x3d	; 61
   11d0e:	fe b7       	in	r31, 0x3e	; 62
   11d10:	d5 83       	std	Z+5, r29	; 0x05
   11d12:	c4 83       	std	Z+4, r28	; 0x04
   11d14:	8d e9       	ldi	r24, 0x9D	; 157
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   11d16:	92 e1       	ldi	r25, 0x12	; 18
   11d18:	3c c0       	rjmp	.+120    	; 0x11d92 <GPIB_LISTEN+0x106>
   11d1a:	ce 01       	movw	r24, r28
   11d1c:	55 db       	rcall	.-2390   	; 0x113c8 <SS80_is_MLA>
   11d1e:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d20:	79 f0       	breq	.+30     	; 0x11d40 <GPIB_LISTEN+0xb4>
   11d22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d26:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d2a:	84 72       	andi	r24, 0x24	; 36
   11d2c:	99 27       	eor	r25, r25
   11d2e:	89 2b       	or	r24, r25
            printf("[LA %02XH SS80]\n", 0xff & ch);
   11d30:	b1 f1       	breq	.+108    	; 0x11d9e <GPIB_LISTEN+0x112>
   11d32:	ed b7       	in	r30, 0x3d	; 61
   11d34:	fe b7       	in	r31, 0x3e	; 62
   11d36:	d5 83       	std	Z+5, r29	; 0x05
   11d38:	c4 83       	std	Z+4, r28	; 0x04
   11d3a:	8c e8       	ldi	r24, 0x8C	; 140
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   11d3c:	92 e1       	ldi	r25, 0x12	; 18
   11d3e:	29 c0       	rjmp	.+82     	; 0x11d92 <GPIB_LISTEN+0x106>
   11d40:	ce 01       	movw	r24, r28
   11d42:	a8 db       	rcall	.-2224   	; 0x11494 <PRINTER_is_MLA>
   11d44:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d48:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d4c:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d4e:	c9 f0       	breq	.+50     	; 0x11d82 <GPIB_LISTEN+0xf6>
   11d50:	24 72       	andi	r18, 0x24	; 36
   11d52:	33 27       	eor	r19, r19
   11d54:	23 2b       	or	r18, r19
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   11d56:	61 f0       	breq	.+24     	; 0x11d70 <GPIB_LISTEN+0xe4>
   11d58:	ed b7       	in	r30, 0x3d	; 61
   11d5a:	fe b7       	in	r31, 0x3e	; 62
   11d5c:	d5 83       	std	Z+5, r29	; 0x05
   11d5e:	c4 83       	std	Z+4, r28	; 0x04
   11d60:	88 e7       	ldi	r24, 0x78	; 120
   11d62:	92 e1       	ldi	r25, 0x12	; 18
   11d64:	a0 e0       	ldi	r26, 0x00	; 0
   11d66:	81 83       	std	Z+1, r24	; 0x01
   11d68:	92 83       	std	Z+2, r25	; 0x02
   11d6a:	a3 83       	std	Z+3, r26	; 0x03
   11d6c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
        if(talking != UNT)
   11d70:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11d74:	8f 35       	cpi	r24, 0x5F	; 95
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   11d76:	99 f0       	breq	.+38     	; 0x11d9e <GPIB_LISTEN+0x112>
   11d78:	80 e0       	ldi	r24, 0x00	; 0
   11d7a:	90 e0       	ldi	r25, 0x00	; 0
   11d7c:	0e 94 bf b9 	call	0x1737e	; 0x1737e <printer_open>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11d80:	0e c0       	rjmp	.+28     	; 0x11d9e <GPIB_LISTEN+0x112>
   11d82:	22 ff       	sbrs	r18, 2
        printf("[LA %02XH]\n", 0xff & ch);
   11d84:	0c c0       	rjmp	.+24     	; 0x11d9e <GPIB_LISTEN+0x112>
   11d86:	ed b7       	in	r30, 0x3d	; 61
   11d88:	fe b7       	in	r31, 0x3e	; 62
   11d8a:	d5 83       	std	Z+5, r29	; 0x05
   11d8c:	c4 83       	std	Z+4, r28	; 0x04
   11d8e:	8c e6       	ldi	r24, 0x6C	; 108
   11d90:	92 e1       	ldi	r25, 0x12	; 18
   11d92:	a0 e0       	ldi	r26, 0x00	; 0
   11d94:	81 83       	std	Z+1, r24	; 0x01
   11d96:	92 83       	std	Z+2, r25	; 0x02
   11d98:	a3 83       	std	Z+3, r26	; 0x03
   11d9a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   11d9e:	80 e0       	ldi	r24, 0x00	; 0
   11da0:	90 e0       	ldi	r25, 0x00	; 0
   11da2:	cd b7       	in	r28, 0x3d	; 61
   11da4:	de b7       	in	r29, 0x3e	; 62
   11da6:	25 96       	adiw	r28, 0x05	; 5
   11da8:	e2 e0       	ldi	r30, 0x02	; 2
   11daa:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00011dae <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   11dae:	cf 93       	push	r28
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   11db0:	df 93       	push	r29
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   11db2:	92 db       	rcall	.-2268   	; 0x114d8 <gpib_init_devices>
   11db4:	10 92 6e 19 	sts	0x196E, r1	; 0x80196e <gpib_log_fp+0x1>
   11db8:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   11dbc:	80 e0       	ldi	r24, 0x00	; 0
   11dbe:	90 e0       	ldi	r25, 0x00	; 0
   11dc0:	b0 d8       	rcall	.-3744   	; 0x10f22 <gpib_read_byte>

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   11dc2:	ec 01       	movw	r28, r24
   11dc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
            gpib_decode(val);
   11dc8:	83 ff       	sbrs	r24, 3
   11dca:	02 c0       	rjmp	.+4      	; 0x11dd0 <gpib_task+0x22>
#endif
        status = gpib_error_test(val);
   11dcc:	ce 01       	movw	r24, r28
   11dce:	94 d9       	rcall	.-3288   	; 0x110f8 <gpib_decode>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   11dd0:	ce 01       	movw	r24, r28
   11dd2:	1d dc       	rcall	.-1990   	; 0x1160e <gpib_error_test>
   11dd4:	9c 01       	movw	r18, r24
   11dd6:	23 70       	andi	r18, 0x03	; 3
   11dd8:	33 27       	eor	r19, r19
   11dda:	23 2b       	or	r18, r19
        {
            return;
        }
        else if(status)
   11ddc:	09 f0       	breq	.+2      	; 0x11de0 <gpib_task+0x32>
   11dde:	43 c0       	rjmp	.+134    	; 0x11e66 <gpib_task+0xb8>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   11de0:	89 2b       	or	r24, r25
   11de2:	61 f7       	brne	.-40     	; 0x11dbc <gpib_task+0xe>
        {
            ch = val & CMD_MASK;
   11de4:	d2 ff       	sbrs	r29, 2
            if(ch <= 0x1f)
   11de6:	26 c0       	rjmp	.+76     	; 0x11e34 <gpib_task+0x86>
            {
                GPIB(ch);
   11de8:	8c 2f       	mov	r24, r28
   11dea:	8f 77       	andi	r24, 0x7F	; 127
                continue;
   11dec:	80 32       	cpi	r24, 0x20	; 32
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   11dee:	10 f4       	brcc	.+4      	; 0x11df4 <gpib_task+0x46>
   11df0:	52 dd       	rcall	.-1372   	; 0x11896 <GPIB>
   11df2:	e4 cf       	rjmp	.-56     	; 0x11dbc <gpib_task+0xe>
            {
                GPIB_LISTEN(ch);
   11df4:	90 ee       	ldi	r25, 0xE0	; 224
   11df6:	98 0f       	add	r25, r24
                continue;
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   11df8:	90 32       	cpi	r25, 0x20	; 32
   11dfa:	10 f4       	brcc	.+4      	; 0x11e00 <gpib_task+0x52>
   11dfc:	47 df       	rcall	.-370    	; 0x11c8c <GPIB_LISTEN>
            {
                GPIB_TALK(ch);
   11dfe:	de cf       	rjmp	.-68     	; 0x11dbc <gpib_task+0xe>
   11e00:	90 ec       	ldi	r25, 0xC0	; 192
                continue;
   11e02:	98 0f       	add	r25, r24
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   11e04:	90 32       	cpi	r25, 0x20	; 32
   11e06:	10 f4       	brcc	.+4      	; 0x11e0c <gpib_task+0x5e>
   11e08:	08 de       	rcall	.-1008   	; 0x11a1a <GPIB_TALK>
   11e0a:	d8 cf       	rjmp	.-80     	; 0x11dbc <gpib_task+0xe>
   11e0c:	90 91 fc 1e 	lds	r25, 0x1EFC	; 0x801efc <listening>
   11e10:	99 23       	and	r25, r25
   11e12:	59 f0       	breq	.+22     	; 0x11e2a <gpib_task+0x7c>
   11e14:	20 91 f4 1c 	lds	r18, 0x1CF4	; 0x801cf4 <lastcmd>
            {
                secondary = 0;
   11e18:	30 91 f5 1c 	lds	r19, 0x1CF5	; 0x801cf5 <lastcmd+0x1>
                GPIB_SECONDARY_ADDRESS(ch);
   11e1c:	2f 35       	cpi	r18, 0x5F	; 95
   11e1e:	31 05       	cpc	r19, r1
                continue;
   11e20:	21 f4       	brne	.+8      	; 0x11e2a <gpib_task+0x7c>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   11e22:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   11e26:	91 de       	rcall	.-734    	; 0x11b4a <GPIB_SECONDARY_ADDRESS>
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   11e28:	c9 cf       	rjmp	.-110    	; 0x11dbc <gpib_task+0xe>
   11e2a:	80 93 fb 1e 	sts	0x1EFB, r24	; 0x801efb <secondary>
   11e2e:	60 e0       	ldi	r22, 0x00	; 0
   11e30:	90 e0       	ldi	r25, 0x00	; 0
   11e32:	12 c0       	rjmp	.+36     	; 0x11e58 <gpib_task+0xaa>
   11e34:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
            {
                printer_buffer( 0xff & val );
   11e38:	90 e0       	ldi	r25, 0x00	; 0
   11e3a:	2c db       	rcall	.-2472   	; 0x11494 <PRINTER_is_MLA>
   11e3c:	89 2b       	or	r24, r25
                continue;
            }

            if(!secondary)
   11e3e:	29 f0       	breq	.+10     	; 0x11e4a <gpib_task+0x9c>
   11e40:	ce 01       	movw	r24, r28
   11e42:	99 27       	eor	r25, r25
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   11e44:	0e 94 62 ba 	call	0x174c4	; 0x174c4 <printer_buffer>
   11e48:	b9 cf       	rjmp	.-142    	; 0x11dbc <gpib_task+0xe>
   11e4a:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
            status = gpib_error_test(status);
   11e4e:	88 23       	and	r24, r24

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   11e50:	09 f4       	brne	.+2      	; 0x11e54 <gpib_task+0xa6>
   11e52:	b4 cf       	rjmp	.-152    	; 0x11dbc <gpib_task+0xe>
   11e54:	61 e0       	ldi	r22, 0x01	; 1
   11e56:	ce 01       	movw	r24, r28
   11e58:	67 dc       	rcall	.-1842   	; 0x11728 <GPIB_COMMANDS>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   11e5a:	d9 db       	rcall	.-2126   	; 0x1160e <gpib_error_test>
   11e5c:	83 70       	andi	r24, 0x03	; 3
   11e5e:	99 27       	eor	r25, r25
   11e60:	89 2b       	or	r24, r25
   11e62:	09 f4       	brne	.+2      	; 0x11e66 <gpib_task+0xb8>
   11e64:	ab cf       	rjmp	.-170    	; 0x11dbc <gpib_task+0xe>
   11e66:	df 91       	pop	r29
   11e68:	cf 91       	pop	r28
   11e6a:	08 95       	ret

00011e6c <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   11e6c:	08 95       	ret

00011e6e <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   11e6e:	cf 93       	push	r28
   11e70:	df 93       	push	r29
   11e72:	00 d0       	rcall	.+0      	; 0x11e74 <gpib_help+0x6>
   11e74:	1f 92       	push	r1
   11e76:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   11e78:	82 e4       	ldi	r24, 0x42	; 66
   11e7a:	96 e1       	ldi	r25, 0x16	; 22
   11e7c:	a0 e0       	ldi	r26, 0x00	; 0
   11e7e:	ed b7       	in	r30, 0x3d	; 61
   11e80:	fe b7       	in	r31, 0x3e	; 62
   11e82:	81 83       	std	Z+1, r24	; 0x01
   11e84:	92 83       	std	Z+2, r25	; 0x02
   11e86:	a3 83       	std	Z+3, r26	; 0x03
   11e88:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    if(full)
   11e8c:	cd 2b       	or	r28, r29
   11e8e:	51 f0       	breq	.+20     	; 0x11ea4 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   11e90:	89 e7       	ldi	r24, 0x79	; 121
   11e92:	94 e1       	ldi	r25, 0x14	; 20
   11e94:	a0 e0       	ldi	r26, 0x00	; 0
   11e96:	ed b7       	in	r30, 0x3d	; 61
   11e98:	fe b7       	in	r31, 0x3e	; 62
   11e9a:	81 83       	std	Z+1, r24	; 0x01
   11e9c:	92 83       	std	Z+2, r25	; 0x02
   11e9e:	a3 83       	std	Z+3, r26	; 0x03
   11ea0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   11ea4:	cd b7       	in	r28, 0x3d	; 61
   11ea6:	de b7       	in	r29, 0x3e	; 62
   11ea8:	23 96       	adiw	r28, 0x03	; 3
   11eaa:	e2 e0       	ldi	r30, 0x02	; 2
   11eac:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00011eb0 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   11eb0:	a5 e0       	ldi	r26, 0x05	; 5
   11eb2:	b0 e0       	ldi	r27, 0x00	; 0
   11eb4:	ee e5       	ldi	r30, 0x5E	; 94
   11eb6:	ff e8       	ldi	r31, 0x8F	; 143
   11eb8:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   11ebc:	fb 01       	movw	r30, r22
   11ebe:	e0 80       	ld	r14, Z
   11ec0:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   11ec2:	e1 14       	cp	r14, r1
   11ec4:	f1 04       	cpc	r15, r1
   11ec6:	19 f4       	brne	.+6      	; 0x11ece <gpib_tests+0x1e>
        return(0);
   11ec8:	80 e0       	ldi	r24, 0x00	; 0
   11eca:	90 e0       	ldi	r25, 0x00	; 0
   11ecc:	dc c0       	rjmp	.+440    	; 0x12086 <gpib_tests+0x1d6>
   11ece:	6b 01       	movw	r12, r22
   11ed0:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   11ed2:	6b ea       	ldi	r22, 0xAB	; 171
   11ed4:	7d e0       	ldi	r23, 0x0D	; 13
   11ed6:	c7 01       	movw	r24, r14
   11ed8:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   11edc:	89 2b       	or	r24, r25
   11ede:	a1 f0       	breq	.+40     	; 0x11f08 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   11ee0:	f6 01       	movw	r30, r12
   11ee2:	e2 80       	ldd	r14, Z+2	; 0x02
   11ee4:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   11ee6:	e1 14       	cp	r14, r1
   11ee8:	f1 04       	cpc	r15, r1
   11eea:	21 f4       	brne	.+8      	; 0x11ef4 <gpib_tests+0x44>
        {
            gpib_help(1);
   11eec:	81 e0       	ldi	r24, 0x01	; 1
   11eee:	90 e0       	ldi	r25, 0x00	; 0
   11ef0:	be df       	rcall	.-132    	; 0x11e6e <gpib_help>
   11ef2:	c7 c0       	rjmp	.+398    	; 0x12082 <gpib_tests+0x1d2>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   11ef4:	65 e9       	ldi	r22, 0x95	; 149
   11ef6:	76 e1       	ldi	r23, 0x16	; 22
   11ef8:	c7 01       	movw	r24, r14
   11efa:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   11efe:	89 2b       	or	r24, r25
   11f00:	a9 f7       	brne	.-22     	; 0x11eec <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   11f02:	c2 e0       	ldi	r28, 0x02	; 2
   11f04:	d0 e0       	ldi	r29, 0x00	; 0
   11f06:	02 c0       	rjmp	.+4      	; 0x11f0c <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   11f08:	c1 e0       	ldi	r28, 0x01	; 1
   11f0a:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   11f0c:	60 eb       	ldi	r22, 0xB0	; 176
   11f0e:	7d e0       	ldi	r23, 0x0D	; 13
   11f10:	c7 01       	movw	r24, r14
   11f12:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   11f16:	89 2b       	or	r24, r25
   11f18:	29 f1       	breq	.+74     	; 0x11f64 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   11f1a:	fe 01       	movw	r30, r28
   11f1c:	ee 0f       	add	r30, r30
   11f1e:	ff 1f       	adc	r31, r31
   11f20:	ec 0d       	add	r30, r12
   11f22:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   11f24:	01 90       	ld	r0, Z+
   11f26:	f0 81       	ld	r31, Z
   11f28:	e0 2d       	mov	r30, r0
   11f2a:	80 81       	ld	r24, Z
   11f2c:	8d 33       	cpi	r24, 0x3D	; 61
   11f2e:	09 f4       	brne	.+2      	; 0x11f32 <gpib_tests+0x82>
            ++ind;
   11f30:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   11f32:	cc 0f       	add	r28, r28
   11f34:	dd 1f       	adc	r29, r29
   11f36:	cc 0d       	add	r28, r12
   11f38:	dd 1d       	adc	r29, r13
   11f3a:	88 81       	ld	r24, Y
   11f3c:	99 81       	ldd	r25, Y+1	; 0x01
   11f3e:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   11f42:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   11f46:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   11f4a:	ed b7       	in	r30, 0x3d	; 61
   11f4c:	fe b7       	in	r31, 0x3e	; 62
   11f4e:	75 83       	std	Z+5, r23	; 0x05
   11f50:	64 83       	std	Z+4, r22	; 0x04
   11f52:	8c e6       	ldi	r24, 0x6C	; 108
   11f54:	94 e1       	ldi	r25, 0x14	; 20
   11f56:	a0 e0       	ldi	r26, 0x00	; 0
   11f58:	81 83       	std	Z+1, r24	; 0x01
   11f5a:	92 83       	std	Z+2, r25	; 0x02
   11f5c:	a3 83       	std	Z+3, r26	; 0x03
   11f5e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   11f62:	8f c0       	rjmp	.+286    	; 0x12082 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"addresses") )
   11f64:	66 eb       	ldi	r22, 0xB6	; 182
   11f66:	7d e0       	ldi	r23, 0x0D	; 13
   11f68:	c7 01       	movw	r24, r14
   11f6a:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   11f6e:	89 2b       	or	r24, r25
   11f70:	c9 f0       	breq	.+50     	; 0x11fa4 <gpib_tests+0xf4>
    {
        ptr = argv[ind];
   11f72:	cc 0f       	add	r28, r28
   11f74:	dd 1f       	adc	r29, r29
   11f76:	cc 0d       	add	r28, r12
   11f78:	dd 1d       	adc	r29, r13
   11f7a:	88 81       	ld	r24, Y
   11f7c:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   11f7e:	00 97       	sbiw	r24, 0x00	; 0
   11f80:	69 f0       	breq	.+26     	; 0x11f9c <gpib_tests+0xec>
   11f82:	fc 01       	movw	r30, r24
   11f84:	20 81       	ld	r18, Z
   11f86:	22 23       	and	r18, r18
   11f88:	49 f0       	breq	.+18     	; 0x11f9c <gpib_tests+0xec>
   11f8a:	60 ec       	ldi	r22, 0xC0	; 192
   11f8c:	7d e0       	ldi	r23, 0x0D	; 13
   11f8e:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   11f92:	89 2b       	or	r24, r25
   11f94:	19 f0       	breq	.+6      	; 0x11f9c <gpib_tests+0xec>
            display_Addresses(1);
   11f96:	81 e0       	ldi	r24, 0x01	; 1
   11f98:	90 e0       	ldi	r25, 0x00	; 0
   11f9a:	02 c0       	rjmp	.+4      	; 0x11fa0 <gpib_tests+0xf0>
        else
            display_Addresses(0);
   11f9c:	80 e0       	ldi	r24, 0x00	; 0
   11f9e:	90 e0       	ldi	r25, 0x00	; 0
   11fa0:	54 d1       	rcall	.+680    	; 0x1224a <display_Addresses>
   11fa2:	6f c0       	rjmp	.+222    	; 0x12082 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   11fa4:	63 ec       	ldi	r22, 0xC3	; 195
   11fa6:	7d e0       	ldi	r23, 0x0D	; 13
   11fa8:	c7 01       	movw	r24, r14
   11faa:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   11fae:	89 2b       	or	r24, r25
   11fb0:	c9 f0       	breq	.+50     	; 0x11fe4 <gpib_tests+0x134>
    {
        ptr = argv[ind];
   11fb2:	cc 0f       	add	r28, r28
   11fb4:	dd 1f       	adc	r29, r29
   11fb6:	cc 0d       	add	r28, r12
   11fb8:	dd 1d       	adc	r29, r13
   11fba:	88 81       	ld	r24, Y
   11fbc:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   11fbe:	00 97       	sbiw	r24, 0x00	; 0
   11fc0:	69 f0       	breq	.+26     	; 0x11fdc <gpib_tests+0x12c>
   11fc2:	fc 01       	movw	r30, r24
   11fc4:	20 81       	ld	r18, Z
   11fc6:	22 23       	and	r18, r18
   11fc8:	49 f0       	breq	.+18     	; 0x11fdc <gpib_tests+0x12c>
   11fca:	60 ec       	ldi	r22, 0xC0	; 192
   11fcc:	7d e0       	ldi	r23, 0x0D	; 13
   11fce:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   11fd2:	89 2b       	or	r24, r25
   11fd4:	19 f0       	breq	.+6      	; 0x11fdc <gpib_tests+0x12c>
            display_Config(1);
   11fd6:	81 e0       	ldi	r24, 0x01	; 1
   11fd8:	90 e0       	ldi	r25, 0x00	; 0
        else
            display_Config(0);
   11fda:	02 c0       	rjmp	.+4      	; 0x11fe0 <gpib_tests+0x130>
   11fdc:	80 e0       	ldi	r24, 0x00	; 0
   11fde:	90 e0       	ldi	r25, 0x00	; 0
   11fe0:	0f d2       	rcall	.+1054   	; 0x12400 <display_Config>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   11fe2:	4f c0       	rjmp	.+158    	; 0x12082 <gpib_tests+0x1d2>
   11fe4:	6a ec       	ldi	r22, 0xCA	; 202
   11fe6:	7d e0       	ldi	r23, 0x0D	; 13
   11fe8:	c7 01       	movw	r24, r14
   11fea:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   11fee:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_begin();
   11ff0:	19 f0       	breq	.+6      	; 0x11ff8 <gpib_tests+0x148>
   11ff2:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   11ff6:	45 c0       	rjmp	.+138    	; 0x12082 <gpib_tests+0x1d2>
   11ff8:	68 ed       	ldi	r22, 0xD8	; 216
   11ffa:	7d e0       	ldi	r23, 0x0D	; 13
   11ffc:	c7 01       	movw	r24, r14
   11ffe:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   12002:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12004:	29 f0       	breq	.+10     	; 0x12010 <gpib_tests+0x160>
   12006:	80 ee       	ldi	r24, 0xE0	; 224
   12008:	9d e0       	ldi	r25, 0x0D	; 13
   1200a:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
        return(1);
    }

    if ( MATCHI(ptr, "ifc") )
   1200e:	39 c0       	rjmp	.+114    	; 0x12082 <gpib_tests+0x1d2>
   12010:	6e ee       	ldi	r22, 0xEE	; 238
   12012:	7d e0       	ldi	r23, 0x0D	; 13
   12014:	c7 01       	movw	r24, r14
   12016:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   1201a:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   1201c:	19 f0       	breq	.+6      	; 0x12024 <gpib_tests+0x174>
   1201e:	0e 94 fe 83 	call	0x107fc	; 0x107fc <gpib_assert_ifc>
        return(1);

    }

    if (MATCHI(ptr,"task") )
   12022:	2f c0       	rjmp	.+94     	; 0x12082 <gpib_tests+0x1d2>
   12024:	62 ef       	ldi	r22, 0xF2	; 242
   12026:	7d e0       	ldi	r23, 0x0D	; 13
   12028:	c7 01       	movw	r24, r14
   1202a:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
    {
        gpib_task();
   1202e:	89 2b       	or	r24, r25
   12030:	11 f0       	breq	.+4      	; 0x12036 <gpib_tests+0x186>
   12032:	bd de       	rcall	.-646    	; 0x11dae <gpib_task>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12034:	26 c0       	rjmp	.+76     	; 0x12082 <gpib_tests+0x1d2>
   12036:	8e 01       	movw	r16, r28
   12038:	0f 5f       	subi	r16, 0xFF	; 255
   1203a:	1f 4f       	sbci	r17, 0xFF	; 255
   1203c:	95 01       	movw	r18, r10
   1203e:	a8 01       	movw	r20, r16
   12040:	67 ef       	ldi	r22, 0xF7	; 247
   12042:	7d e0       	ldi	r23, 0x0D	; 13
   12044:	c7 01       	movw	r24, r14
   12046:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1204a:	89 2b       	or	r24, r25
   1204c:	09 f4       	brne	.+2      	; 0x12050 <gpib_tests+0x1a0>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1204e:	3c cf       	rjmp	.-392    	; 0x11ec8 <gpib_tests+0x18>
   12050:	00 0f       	add	r16, r16
   12052:	11 1f       	adc	r17, r17
   12054:	e6 01       	movw	r28, r12
   12056:	c0 0f       	add	r28, r16
   12058:	d1 1f       	adc	r29, r17
   1205a:	88 81       	ld	r24, Y
   1205c:	99 81       	ldd	r25, Y+1	; 0x01
   1205e:	00 97       	sbiw	r24, 0x00	; 0
   12060:	51 f0       	breq	.+20     	; 0x12076 <gpib_tests+0x1c6>
   12062:	6d ef       	ldi	r22, 0xFD	; 253
   12064:	7d e0       	ldi	r23, 0x0D	; 13
   12066:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   1206a:	61 e0       	ldi	r22, 0x01	; 1
   1206c:	70 e0       	ldi	r23, 0x00	; 0
   1206e:	89 2b       	or	r24, r25
   12070:	21 f4       	brne	.+8      	; 0x1207a <gpib_tests+0x1ca>
   12072:	60 e0       	ldi	r22, 0x00	; 0
   12074:	02 c0       	rjmp	.+4      	; 0x1207a <gpib_tests+0x1ca>
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12076:	60 e0       	ldi	r22, 0x00	; 0
   12078:	70 e0       	ldi	r23, 0x00	; 0
   1207a:	22 97       	sbiw	r28, 0x02	; 2
   1207c:	88 81       	ld	r24, Y
   1207e:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   12080:	34 da       	rcall	.-2968   	; 0x114ea <gpib_trace_task>
   12082:	81 e0       	ldi	r24, 0x01	; 1

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12084:	90 e0       	ldi	r25, 0x00	; 0
   12086:	cd b7       	in	r28, 0x3d	; 61
   12088:	de b7       	in	r29, 0x3e	; 62
   1208a:	25 96       	adiw	r28, 0x05	; 5
   1208c:	ea e0       	ldi	r30, 0x0A	; 10
   1208e:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

00012092 <tok_index>:
   12092:	ef 92       	push	r14
   12094:	ff 92       	push	r15
   12096:	0f 93       	push	r16
   12098:	1f 93       	push	r17
   1209a:	cf 93       	push	r28
   1209c:	df 93       	push	r29
   1209e:	7c 01       	movw	r14, r24
   120a0:	c4 ec       	ldi	r28, 0xC4	; 196
   120a2:	d1 e0       	ldi	r29, 0x01	; 1
   120a4:	00 e0       	ldi	r16, 0x00	; 0
   120a6:	10 e0       	ldi	r17, 0x00	; 0
   120a8:	8a 81       	ldd	r24, Y+2	; 0x02
   120aa:	9b 81       	ldd	r25, Y+3	; 0x03
   120ac:	8f 3f       	cpi	r24, 0xFF	; 255
   120ae:	2f ef       	ldi	r18, 0xFF	; 255
   120b0:	92 07       	cpc	r25, r18
   120b2:	61 f0       	breq	.+24     	; 0x120cc <tok_index+0x3a>
   120b4:	68 81       	ld	r22, Y
   120b6:	79 81       	ldd	r23, Y+1	; 0x01
   120b8:	c7 01       	movw	r24, r14
   120ba:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   120be:	24 96       	adiw	r28, 0x04	; 4
   120c0:	89 2b       	or	r24, r25
   120c2:	19 f4       	brne	.+6      	; 0x120ca <tok_index+0x38>
   120c4:	0f 5f       	subi	r16, 0xFF	; 255
   120c6:	1f 4f       	sbci	r17, 0xFF	; 255
   120c8:	ef cf       	rjmp	.-34     	; 0x120a8 <tok_index+0x16>
   120ca:	c8 01       	movw	r24, r16
   120cc:	cd b7       	in	r28, 0x3d	; 61
   120ce:	de b7       	in	r29, 0x3e	; 62
   120d0:	e6 e0       	ldi	r30, 0x06	; 6
   120d2:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

000120d6 <tok_name>:
   120d6:	e4 ec       	ldi	r30, 0xC4	; 196
   120d8:	f1 e0       	ldi	r31, 0x01	; 1
   120da:	20 e0       	ldi	r18, 0x00	; 0
   120dc:	30 e0       	ldi	r19, 0x00	; 0
   120de:	90 e0       	ldi	r25, 0x00	; 0
   120e0:	42 81       	ldd	r20, Z+2	; 0x02
   120e2:	53 81       	ldd	r21, Z+3	; 0x03
   120e4:	4f 3f       	cpi	r20, 0xFF	; 255
   120e6:	6f ef       	ldi	r22, 0xFF	; 255
   120e8:	56 07       	cpc	r21, r22
   120ea:	89 f0       	breq	.+34     	; 0x1210e <tok_name+0x38>
   120ec:	34 96       	adiw	r30, 0x04	; 4
   120ee:	48 17       	cp	r20, r24
   120f0:	59 07       	cpc	r21, r25
   120f2:	51 f4       	brne	.+20     	; 0x12108 <tok_name+0x32>
   120f4:	22 0f       	add	r18, r18
   120f6:	33 1f       	adc	r19, r19
   120f8:	22 0f       	add	r18, r18
   120fa:	33 1f       	adc	r19, r19
   120fc:	f9 01       	movw	r30, r18
   120fe:	ec 53       	subi	r30, 0x3C	; 60
   12100:	fe 4f       	sbci	r31, 0xFE	; 254
   12102:	80 81       	ld	r24, Z
   12104:	91 81       	ldd	r25, Z+1	; 0x01
   12106:	08 95       	ret
   12108:	2f 5f       	subi	r18, 0xFF	; 255
   1210a:	3f 4f       	sbci	r19, 0xFF	; 255
   1210c:	e9 cf       	rjmp	.-46     	; 0x120e0 <tok_name+0xa>
   1210e:	85 e2       	ldi	r24, 0x25	; 37
   12110:	9c e0       	ldi	r25, 0x0C	; 12
   12112:	08 95       	ret

00012114 <print_tok_val>:
   12114:	cf 92       	push	r12
   12116:	df 92       	push	r13
   12118:	ef 92       	push	r14
   1211a:	ff 92       	push	r15
   1211c:	0f 93       	push	r16
   1211e:	1f 93       	push	r17
   12120:	cf 93       	push	r28
   12122:	ad b7       	in	r26, 0x3d	; 61
   12124:	be b7       	in	r27, 0x3e	; 62
   12126:	1d 97       	sbiw	r26, 0x0d	; 13
   12128:	0f b6       	in	r0, 0x3f	; 63
   1212a:	f8 94       	cli
   1212c:	be bf       	out	0x3e, r27	; 62
   1212e:	0f be       	out	0x3f, r0	; 63
   12130:	ad bf       	out	0x3d, r26	; 61
   12132:	c6 2f       	mov	r28, r22
   12134:	69 01       	movw	r12, r18
   12136:	7a 01       	movw	r14, r20
   12138:	ce df       	rcall	.-100    	; 0x120d6 <tok_name>
   1213a:	8c 01       	movw	r16, r24
   1213c:	cc 23       	and	r28, r28
   1213e:	31 f0       	breq	.+12     	; 0x1214c <print_tok_val+0x38>
   12140:	80 e2       	ldi	r24, 0x20	; 32
   12142:	90 e0       	ldi	r25, 0x00	; 0
   12144:	0e 94 c8 73 	call	0xe790	; 0xe790 <putchar>
   12148:	c1 50       	subi	r28, 0x01	; 1
   1214a:	f8 cf       	rjmp	.-16     	; 0x1213c <print_tok_val+0x28>
   1214c:	ed b7       	in	r30, 0x3d	; 61
   1214e:	fe b7       	in	r31, 0x3e	; 62
   12150:	c2 86       	std	Z+10, r12	; 0x0a
   12152:	d3 86       	std	Z+11, r13	; 0x0b
   12154:	e4 86       	std	Z+12, r14	; 0x0c
   12156:	f5 86       	std	Z+13, r15	; 0x0d
   12158:	c6 82       	std	Z+6, r12	; 0x06
   1215a:	d7 82       	std	Z+7, r13	; 0x07
   1215c:	e0 86       	std	Z+8, r14	; 0x08
   1215e:	f1 86       	std	Z+9, r15	; 0x09
   12160:	15 83       	std	Z+5, r17	; 0x05
   12162:	04 83       	std	Z+4, r16	; 0x04
   12164:	85 ed       	ldi	r24, 0xD5	; 213
   12166:	9c e1       	ldi	r25, 0x1C	; 28
   12168:	a0 e0       	ldi	r26, 0x00	; 0
   1216a:	81 83       	std	Z+1, r24	; 0x01
   1216c:	92 83       	std	Z+2, r25	; 0x02
   1216e:	a3 83       	std	Z+3, r26	; 0x03
   12170:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12174:	ad b7       	in	r26, 0x3d	; 61
   12176:	be b7       	in	r27, 0x3e	; 62
   12178:	1d 96       	adiw	r26, 0x0d	; 13
   1217a:	0f b6       	in	r0, 0x3f	; 63
   1217c:	f8 94       	cli
   1217e:	be bf       	out	0x3e, r27	; 62
   12180:	0f be       	out	0x3f, r0	; 63
   12182:	ad bf       	out	0x3d, r26	; 61
   12184:	cf 91       	pop	r28
   12186:	1f 91       	pop	r17
   12188:	0f 91       	pop	r16
   1218a:	ff 90       	pop	r15
   1218c:	ef 90       	pop	r14
   1218e:	df 90       	pop	r13
   12190:	cf 90       	pop	r12
   12192:	08 95       	ret

00012194 <print_tok_str>:
   12194:	ef 92       	push	r14
   12196:	ff 92       	push	r15
   12198:	0f 93       	push	r16
   1219a:	1f 93       	push	r17
   1219c:	cf 93       	push	r28
   1219e:	ad b7       	in	r26, 0x3d	; 61
   121a0:	be b7       	in	r27, 0x3e	; 62
   121a2:	17 97       	sbiw	r26, 0x07	; 7
   121a4:	0f b6       	in	r0, 0x3f	; 63
   121a6:	f8 94       	cli
   121a8:	be bf       	out	0x3e, r27	; 62
   121aa:	0f be       	out	0x3f, r0	; 63
   121ac:	ad bf       	out	0x3d, r26	; 61
   121ae:	c6 2f       	mov	r28, r22
   121b0:	7a 01       	movw	r14, r20
   121b2:	91 df       	rcall	.-222    	; 0x120d6 <tok_name>
   121b4:	8c 01       	movw	r16, r24
   121b6:	cc 23       	and	r28, r28
   121b8:	31 f0       	breq	.+12     	; 0x121c6 <print_tok_str+0x32>
   121ba:	80 e2       	ldi	r24, 0x20	; 32
   121bc:	90 e0       	ldi	r25, 0x00	; 0
   121be:	0e 94 c8 73 	call	0xe790	; 0xe790 <putchar>
   121c2:	c1 50       	subi	r28, 0x01	; 1
   121c4:	f8 cf       	rjmp	.-16     	; 0x121b6 <print_tok_str+0x22>
   121c6:	ed b7       	in	r30, 0x3d	; 61
   121c8:	fe b7       	in	r31, 0x3e	; 62
   121ca:	f7 82       	std	Z+7, r15	; 0x07
   121cc:	e6 82       	std	Z+6, r14	; 0x06
   121ce:	15 83       	std	Z+5, r17	; 0x05
   121d0:	04 83       	std	Z+4, r16	; 0x04
   121d2:	89 ec       	ldi	r24, 0xC9	; 201
   121d4:	9c e1       	ldi	r25, 0x1C	; 28
   121d6:	a0 e0       	ldi	r26, 0x00	; 0
   121d8:	81 83       	std	Z+1, r24	; 0x01
   121da:	92 83       	std	Z+2, r25	; 0x02
   121dc:	a3 83       	std	Z+3, r26	; 0x03
   121de:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   121e2:	ad b7       	in	r26, 0x3d	; 61
   121e4:	be b7       	in	r27, 0x3e	; 62
   121e6:	17 96       	adiw	r26, 0x07	; 7
   121e8:	0f b6       	in	r0, 0x3f	; 63
   121ea:	f8 94       	cli
   121ec:	be bf       	out	0x3e, r27	; 62
   121ee:	0f be       	out	0x3f, r0	; 63
   121f0:	ad bf       	out	0x3d, r26	; 61
   121f2:	cf 91       	pop	r28
   121f4:	1f 91       	pop	r17
   121f6:	0f 91       	pop	r16
   121f8:	ff 90       	pop	r15
   121fa:	ef 90       	pop	r14
   121fc:	08 95       	ret

000121fe <print_tok>:
   121fe:	0f 93       	push	r16
   12200:	1f 93       	push	r17
   12202:	cf 93       	push	r28
   12204:	00 d0       	rcall	.+0      	; 0x12206 <print_tok+0x8>
   12206:	00 d0       	rcall	.+0      	; 0x12208 <print_tok+0xa>
   12208:	1f 92       	push	r1
   1220a:	c6 2f       	mov	r28, r22
   1220c:	64 df       	rcall	.-312    	; 0x120d6 <tok_name>
   1220e:	8c 01       	movw	r16, r24
   12210:	cc 23       	and	r28, r28
   12212:	31 f0       	breq	.+12     	; 0x12220 <print_tok+0x22>
   12214:	80 e2       	ldi	r24, 0x20	; 32
   12216:	90 e0       	ldi	r25, 0x00	; 0
   12218:	0e 94 c8 73 	call	0xe790	; 0xe790 <putchar>
   1221c:	c1 50       	subi	r28, 0x01	; 1
   1221e:	f8 cf       	rjmp	.-16     	; 0x12210 <print_tok+0x12>
   12220:	ed b7       	in	r30, 0x3d	; 61
   12222:	fe b7       	in	r31, 0x3e	; 62
   12224:	15 83       	std	Z+5, r17	; 0x05
   12226:	04 83       	std	Z+4, r16	; 0x04
   12228:	85 ec       	ldi	r24, 0xC5	; 197
   1222a:	9c e1       	ldi	r25, 0x1C	; 28
   1222c:	a0 e0       	ldi	r26, 0x00	; 0
   1222e:	81 83       	std	Z+1, r24	; 0x01
   12230:	92 83       	std	Z+2, r25	; 0x02
   12232:	a3 83       	std	Z+3, r26	; 0x03
   12234:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12238:	0f 90       	pop	r0
   1223a:	0f 90       	pop	r0
   1223c:	0f 90       	pop	r0
   1223e:	0f 90       	pop	r0
   12240:	0f 90       	pop	r0
   12242:	cf 91       	pop	r28
   12244:	1f 91       	pop	r17
   12246:	0f 91       	pop	r16
   12248:	08 95       	ret

0001224a <display_Addresses>:
   1224a:	2f 92       	push	r2
   1224c:	3f 92       	push	r3
   1224e:	4f 92       	push	r4
   12250:	6f 92       	push	r6
   12252:	7f 92       	push	r7
   12254:	8f 92       	push	r8
   12256:	cf 92       	push	r12
   12258:	df 92       	push	r13
   1225a:	ef 92       	push	r14
   1225c:	cf 93       	push	r28
   1225e:	df 93       	push	r29
   12260:	cd b7       	in	r28, 0x3d	; 61
   12262:	de b7       	in	r29, 0x3e	; 62
   12264:	2a 97       	sbiw	r28, 0x0a	; 10
   12266:	0f b6       	in	r0, 0x3f	; 63
   12268:	f8 94       	cli
   1226a:	de bf       	out	0x3e, r29	; 62
   1226c:	0f be       	out	0x3f, r0	; 63
   1226e:	cd bf       	out	0x3d, r28	; 61
   12270:	8f e8       	ldi	r24, 0x8F	; 143
   12272:	99 e1       	ldi	r25, 0x19	; 25
   12274:	a0 e0       	ldi	r26, 0x00	; 0
   12276:	ed b7       	in	r30, 0x3d	; 61
   12278:	fe b7       	in	r31, 0x3e	; 62
   1227a:	81 83       	std	Z+1, r24	; 0x01
   1227c:	92 83       	std	Z+2, r25	; 0x02
   1227e:	a3 83       	std	Z+3, r26	; 0x03
   12280:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12284:	20 e0       	ldi	r18, 0x00	; 0
   12286:	3f e1       	ldi	r19, 0x1F	; 31
   12288:	3a 87       	std	Y+10, r19	; 0x0a
   1228a:	29 87       	std	Y+9, r18	; 0x09
   1228c:	81 e7       	ldi	r24, 0x71	; 113
   1228e:	99 e1       	ldi	r25, 0x19	; 25
   12290:	6c 01       	movw	r12, r24
   12292:	e1 2c       	mov	r14, r1
   12294:	83 e7       	ldi	r24, 0x73	; 115
   12296:	99 e1       	ldi	r25, 0x19	; 25
   12298:	3c 01       	movw	r6, r24
   1229a:	81 2c       	mov	r8, r1
   1229c:	8c e7       	ldi	r24, 0x7C	; 124
   1229e:	99 e1       	ldi	r25, 0x19	; 25
   122a0:	1c 01       	movw	r2, r24
   122a2:	41 2c       	mov	r4, r1
   122a4:	86 e8       	ldi	r24, 0x86	; 134
   122a6:	99 e1       	ldi	r25, 0x19	; 25
   122a8:	9c 01       	movw	r18, r24
   122aa:	40 e0       	ldi	r20, 0x00	; 0
   122ac:	2e 83       	std	Y+6, r18	; 0x06
   122ae:	3f 83       	std	Y+7, r19	; 0x07
   122b0:	48 87       	std	Y+8, r20	; 0x08
   122b2:	e9 85       	ldd	r30, Y+9	; 0x09
   122b4:	fa 85       	ldd	r31, Y+10	; 0x0a
   122b6:	80 81       	ld	r24, Z
   122b8:	88 23       	and	r24, r24
   122ba:	09 f4       	brne	.+2      	; 0x122be <display_Addresses+0x74>
   122bc:	7b c0       	rjmp	.+246    	; 0x123b4 <display_Addresses+0x16a>
   122be:	83 30       	cpi	r24, 0x03	; 3
   122c0:	21 f0       	breq	.+8      	; 0x122ca <display_Addresses+0x80>
   122c2:	81 30       	cpi	r24, 0x01	; 1
   122c4:	09 f0       	breq	.+2      	; 0x122c8 <display_Addresses+0x7e>
   122c6:	5a c0       	rjmp	.+180    	; 0x1237c <display_Addresses+0x132>
   122c8:	1f c0       	rjmp	.+62     	; 0x12308 <display_Addresses+0xbe>
   122ca:	e9 85       	ldd	r30, Y+9	; 0x09
   122cc:	fa 85       	ldd	r31, Y+10	; 0x0a
   122ce:	87 a1       	ldd	r24, Z+39	; 0x27
   122d0:	90 a5       	ldd	r25, Z+40	; 0x28
   122d2:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <SS80p+0x1>
   122d6:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <SS80p>
   122da:	cf 01       	movw	r24, r30
   122dc:	07 96       	adiw	r24, 0x07	; 7
   122de:	ed b7       	in	r30, 0x3d	; 61
   122e0:	fe b7       	in	r31, 0x3e	; 62
   122e2:	95 83       	std	Z+5, r25	; 0x05
   122e4:	84 83       	std	Z+4, r24	; 0x04
   122e6:	2e 81       	ldd	r18, Y+6	; 0x06
   122e8:	3f 81       	ldd	r19, Y+7	; 0x07
   122ea:	48 85       	ldd	r20, Y+8	; 0x08
   122ec:	21 83       	std	Z+1, r18	; 0x01
   122ee:	32 83       	std	Z+2, r19	; 0x02
   122f0:	43 83       	std	Z+3, r20	; 0x03
   122f2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   122f6:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   122fa:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   122fe:	42 81       	ldd	r20, Z+2	; 0x02
   12300:	53 81       	ldd	r21, Z+3	; 0x03
   12302:	64 e0       	ldi	r22, 0x04	; 4
   12304:	82 e1       	ldi	r24, 0x12	; 18
   12306:	46 df       	rcall	.-372    	; 0x12194 <print_tok_str>
   12308:	e9 85       	ldd	r30, Y+9	; 0x09
   1230a:	fa 85       	ldd	r31, Y+10	; 0x0a
   1230c:	80 81       	ld	r24, Z
   1230e:	81 30       	cpi	r24, 0x01	; 1
   12310:	d1 f4       	brne	.+52     	; 0x12346 <display_Addresses+0xfc>
   12312:	87 a1       	ldd	r24, Z+39	; 0x27
   12314:	90 a5       	ldd	r25, Z+40	; 0x28
   12316:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <AMIGOp+0x1>
   1231a:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <AMIGOp>
   1231e:	cf 01       	movw	r24, r30
   12320:	07 96       	adiw	r24, 0x07	; 7
   12322:	ed b7       	in	r30, 0x3d	; 61
   12324:	fe b7       	in	r31, 0x3e	; 62
   12326:	95 83       	std	Z+5, r25	; 0x05
   12328:	84 83       	std	Z+4, r24	; 0x04
   1232a:	21 82       	std	Z+1, r2	; 0x01
   1232c:	32 82       	std	Z+2, r3	; 0x02
   1232e:	43 82       	std	Z+3, r4	; 0x03
   12330:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12334:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   12338:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1233c:	42 81       	ldd	r20, Z+2	; 0x02
   1233e:	53 81       	ldd	r21, Z+3	; 0x03
   12340:	64 e0       	ldi	r22, 0x04	; 4
   12342:	82 e1       	ldi	r24, 0x12	; 18
   12344:	27 df       	rcall	.-434    	; 0x12194 <print_tok_str>
   12346:	e9 85       	ldd	r30, Y+9	; 0x09
   12348:	fa 85       	ldd	r31, Y+10	; 0x0a
   1234a:	21 81       	ldd	r18, Z+1	; 0x01
   1234c:	30 e0       	ldi	r19, 0x00	; 0
   1234e:	40 e0       	ldi	r20, 0x00	; 0
   12350:	50 e0       	ldi	r21, 0x00	; 0
   12352:	64 e0       	ldi	r22, 0x04	; 4
   12354:	81 e0       	ldi	r24, 0x01	; 1
   12356:	de de       	rcall	.-580    	; 0x12114 <print_tok_val>
   12358:	e9 85       	ldd	r30, Y+9	; 0x09
   1235a:	fa 85       	ldd	r31, Y+10	; 0x0a
   1235c:	22 81       	ldd	r18, Z+2	; 0x02
   1235e:	30 e0       	ldi	r19, 0x00	; 0
   12360:	40 e0       	ldi	r20, 0x00	; 0
   12362:	50 e0       	ldi	r21, 0x00	; 0
   12364:	64 e0       	ldi	r22, 0x04	; 4
   12366:	8f e1       	ldi	r24, 0x1F	; 31
   12368:	d5 de       	rcall	.-598    	; 0x12114 <print_tok_val>
   1236a:	e9 85       	ldd	r30, Y+9	; 0x09
   1236c:	fa 85       	ldd	r31, Y+10	; 0x0a
   1236e:	23 81       	ldd	r18, Z+3	; 0x03
   12370:	34 81       	ldd	r19, Z+4	; 0x04
   12372:	45 81       	ldd	r20, Z+5	; 0x05
   12374:	56 81       	ldd	r21, Z+6	; 0x06
   12376:	64 e0       	ldi	r22, 0x04	; 4
   12378:	83 e0       	ldi	r24, 0x03	; 3
   1237a:	cc de       	rcall	.-616    	; 0x12114 <print_tok_val>
   1237c:	e9 85       	ldd	r30, Y+9	; 0x09
   1237e:	fa 85       	ldd	r31, Y+10	; 0x0a
   12380:	80 81       	ld	r24, Z
   12382:	84 30       	cpi	r24, 0x04	; 4
   12384:	81 f4       	brne	.+32     	; 0x123a6 <display_Addresses+0x15c>
   12386:	ed b7       	in	r30, 0x3d	; 61
   12388:	fe b7       	in	r31, 0x3e	; 62
   1238a:	61 82       	std	Z+1, r6	; 0x01
   1238c:	72 82       	std	Z+2, r7	; 0x02
   1238e:	83 82       	std	Z+3, r8	; 0x03
   12390:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12394:	e9 85       	ldd	r30, Y+9	; 0x09
   12396:	fa 85       	ldd	r31, Y+10	; 0x0a
   12398:	21 81       	ldd	r18, Z+1	; 0x01
   1239a:	30 e0       	ldi	r19, 0x00	; 0
   1239c:	40 e0       	ldi	r20, 0x00	; 0
   1239e:	50 e0       	ldi	r21, 0x00	; 0
   123a0:	64 e0       	ldi	r22, 0x04	; 4
   123a2:	81 e0       	ldi	r24, 0x01	; 1
   123a4:	b7 de       	rcall	.-658    	; 0x12114 <print_tok_val>
   123a6:	ed b7       	in	r30, 0x3d	; 61
   123a8:	fe b7       	in	r31, 0x3e	; 62
   123aa:	c1 82       	std	Z+1, r12	; 0x01
   123ac:	d2 82       	std	Z+2, r13	; 0x02
   123ae:	e3 82       	std	Z+3, r14	; 0x03
   123b0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   123b4:	29 85       	ldd	r18, Y+9	; 0x09
   123b6:	3a 85       	ldd	r19, Y+10	; 0x0a
   123b8:	25 5d       	subi	r18, 0xD5	; 213
   123ba:	3f 4f       	sbci	r19, 0xFF	; 255
   123bc:	3a 87       	std	Y+10, r19	; 0x0a
   123be:	29 87       	std	Y+9, r18	; 0x09
   123c0:	24 50       	subi	r18, 0x04	; 4
   123c2:	31 42       	sbci	r19, 0x21	; 33
   123c4:	09 f0       	breq	.+2      	; 0x123c8 <display_Addresses+0x17e>
   123c6:	75 cf       	rjmp	.-278    	; 0x122b2 <display_Addresses+0x68>
   123c8:	8f e6       	ldi	r24, 0x6F	; 111
   123ca:	99 e1       	ldi	r25, 0x19	; 25
   123cc:	a0 e0       	ldi	r26, 0x00	; 0
   123ce:	ed b7       	in	r30, 0x3d	; 61
   123d0:	fe b7       	in	r31, 0x3e	; 62
   123d2:	81 83       	std	Z+1, r24	; 0x01
   123d4:	92 83       	std	Z+2, r25	; 0x02
   123d6:	a3 83       	std	Z+3, r26	; 0x03
   123d8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   123dc:	2a 96       	adiw	r28, 0x0a	; 10
   123de:	0f b6       	in	r0, 0x3f	; 63
   123e0:	f8 94       	cli
   123e2:	de bf       	out	0x3e, r29	; 62
   123e4:	0f be       	out	0x3f, r0	; 63
   123e6:	cd bf       	out	0x3d, r28	; 61
   123e8:	df 91       	pop	r29
   123ea:	cf 91       	pop	r28
   123ec:	ef 90       	pop	r14
   123ee:	df 90       	pop	r13
   123f0:	cf 90       	pop	r12
   123f2:	8f 90       	pop	r8
   123f4:	7f 90       	pop	r7
   123f6:	6f 90       	pop	r6
   123f8:	4f 90       	pop	r4
   123fa:	3f 90       	pop	r3
   123fc:	2f 90       	pop	r2
   123fe:	08 95       	ret

00012400 <display_Config>:
   12400:	2f 92       	push	r2
   12402:	3f 92       	push	r3
   12404:	4f 92       	push	r4
   12406:	6f 92       	push	r6
   12408:	7f 92       	push	r7
   1240a:	8f 92       	push	r8
   1240c:	af 92       	push	r10
   1240e:	bf 92       	push	r11
   12410:	cf 92       	push	r12
   12412:	df 92       	push	r13
   12414:	ef 92       	push	r14
   12416:	0f 93       	push	r16
   12418:	1f 93       	push	r17
   1241a:	cf 93       	push	r28
   1241c:	df 93       	push	r29
   1241e:	cd b7       	in	r28, 0x3d	; 61
   12420:	de b7       	in	r29, 0x3e	; 62
   12422:	62 97       	sbiw	r28, 0x12	; 18
   12424:	0f b6       	in	r0, 0x3f	; 63
   12426:	f8 94       	cli
   12428:	de bf       	out	0x3e, r29	; 62
   1242a:	0f be       	out	0x3f, r0	; 63
   1242c:	cd bf       	out	0x3d, r28	; 61
   1242e:	5c 01       	movw	r10, r24
   12430:	8f e4       	ldi	r24, 0x4F	; 79
   12432:	99 e1       	ldi	r25, 0x19	; 25
   12434:	a0 e0       	ldi	r26, 0x00	; 0
   12436:	ed b7       	in	r30, 0x3d	; 61
   12438:	fe b7       	in	r31, 0x3e	; 62
   1243a:	81 83       	std	Z+1, r24	; 0x01
   1243c:	92 83       	std	Z+2, r25	; 0x02
   1243e:	a3 83       	std	Z+3, r26	; 0x03
   12440:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12444:	00 e0       	ldi	r16, 0x00	; 0
   12446:	1f e1       	ldi	r17, 0x1F	; 31
   12448:	84 ed       	ldi	r24, 0xD4	; 212
   1244a:	98 e1       	ldi	r25, 0x18	; 24
   1244c:	9c 01       	movw	r18, r24
   1244e:	40 e0       	ldi	r20, 0x00	; 0
   12450:	28 87       	std	Y+8, r18	; 0x08
   12452:	39 87       	std	Y+9, r19	; 0x09
   12454:	4a 87       	std	Y+10, r20	; 0x0a
   12456:	89 e0       	ldi	r24, 0x09	; 9
   12458:	99 e1       	ldi	r25, 0x19	; 25
   1245a:	9c 01       	movw	r18, r24
   1245c:	40 e0       	ldi	r20, 0x00	; 0
   1245e:	2b 87       	std	Y+11, r18	; 0x0b
   12460:	3c 87       	std	Y+12, r19	; 0x0c
   12462:	4d 87       	std	Y+13, r20	; 0x0d
   12464:	8a ee       	ldi	r24, 0xEA	; 234
   12466:	98 e1       	ldi	r25, 0x18	; 24
   12468:	9c 01       	movw	r18, r24
   1246a:	40 e0       	ldi	r20, 0x00	; 0
   1246c:	2e 87       	std	Y+14, r18	; 0x0e
   1246e:	3f 87       	std	Y+15, r19	; 0x0f
   12470:	48 8b       	std	Y+16, r20	; 0x10
   12472:	86 ed       	ldi	r24, 0xD6	; 214
   12474:	98 e1       	ldi	r25, 0x18	; 24
   12476:	1c 01       	movw	r2, r24
   12478:	41 2c       	mov	r4, r1
   1247a:	86 e4       	ldi	r24, 0x46	; 70
   1247c:	99 e1       	ldi	r25, 0x19	; 25
   1247e:	6c 01       	movw	r12, r24
   12480:	e1 2c       	mov	r14, r1
   12482:	87 e2       	ldi	r24, 0x27	; 39
   12484:	99 e1       	ldi	r25, 0x19	; 25
   12486:	3c 01       	movw	r6, r24
   12488:	81 2c       	mov	r8, r1
   1248a:	f8 01       	movw	r30, r16
   1248c:	80 81       	ld	r24, Z
   1248e:	88 23       	and	r24, r24
   12490:	09 f4       	brne	.+2      	; 0x12494 <display_Config+0x94>
   12492:	14 c2       	rjmp	.+1064   	; 0x128bc <display_Config+0x4bc>
   12494:	83 30       	cpi	r24, 0x03	; 3
   12496:	09 f0       	breq	.+2      	; 0x1249a <display_Config+0x9a>
   12498:	38 c1       	rjmp	.+624    	; 0x1270a <display_Config+0x30a>
   1249a:	27 a1       	ldd	r18, Z+39	; 0x27
   1249c:	30 a5       	ldd	r19, Z+40	; 0x28
   1249e:	3a 8b       	std	Y+18, r19	; 0x12
   124a0:	29 8b       	std	Y+17, r18	; 0x11
   124a2:	c8 01       	movw	r24, r16
   124a4:	07 96       	adiw	r24, 0x07	; 7
   124a6:	ed b7       	in	r30, 0x3d	; 61
   124a8:	fe b7       	in	r31, 0x3e	; 62
   124aa:	95 83       	std	Z+5, r25	; 0x05
   124ac:	84 83       	std	Z+4, r24	; 0x04
   124ae:	c1 82       	std	Z+1, r12	; 0x01
   124b0:	d2 82       	std	Z+2, r13	; 0x02
   124b2:	e3 82       	std	Z+3, r14	; 0x03
   124b4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   124b8:	e9 89       	ldd	r30, Y+17	; 0x11
   124ba:	fa 89       	ldd	r31, Y+18	; 0x12
   124bc:	80 81       	ld	r24, Z
   124be:	90 e0       	ldi	r25, 0x00	; 0
   124c0:	ed b7       	in	r30, 0x3d	; 61
   124c2:	fe b7       	in	r31, 0x3e	; 62
   124c4:	95 83       	std	Z+5, r25	; 0x05
   124c6:	84 83       	std	Z+4, r24	; 0x04
   124c8:	61 82       	std	Z+1, r6	; 0x01
   124ca:	72 82       	std	Z+2, r7	; 0x02
   124cc:	83 82       	std	Z+3, r8	; 0x03
   124ce:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   124d2:	64 e0       	ldi	r22, 0x04	; 4
   124d4:	89 e0       	ldi	r24, 0x09	; 9
   124d6:	93 de       	rcall	.-730    	; 0x121fe <print_tok>
   124d8:	e9 89       	ldd	r30, Y+17	; 0x11
   124da:	fa 89       	ldd	r31, Y+18	; 0x12
   124dc:	20 81       	ld	r18, Z
   124de:	30 e0       	ldi	r19, 0x00	; 0
   124e0:	40 e0       	ldi	r20, 0x00	; 0
   124e2:	50 e0       	ldi	r21, 0x00	; 0
   124e4:	68 e0       	ldi	r22, 0x08	; 8
   124e6:	81 e0       	ldi	r24, 0x01	; 1
   124e8:	15 de       	rcall	.-982    	; 0x12114 <print_tok_val>
   124ea:	e9 89       	ldd	r30, Y+17	; 0x11
   124ec:	fa 89       	ldd	r31, Y+18	; 0x12
   124ee:	21 81       	ldd	r18, Z+1	; 0x01
   124f0:	30 e0       	ldi	r19, 0x00	; 0
   124f2:	40 e0       	ldi	r20, 0x00	; 0
   124f4:	50 e0       	ldi	r21, 0x00	; 0
   124f6:	68 e0       	ldi	r22, 0x08	; 8
   124f8:	8f e1       	ldi	r24, 0x1F	; 31
   124fa:	0c de       	rcall	.-1000   	; 0x12114 <print_tok_val>
   124fc:	e9 89       	ldd	r30, Y+17	; 0x11
   124fe:	fa 89       	ldd	r31, Y+18	; 0x12
   12500:	42 81       	ldd	r20, Z+2	; 0x02
   12502:	53 81       	ldd	r21, Z+3	; 0x03
   12504:	68 e0       	ldi	r22, 0x08	; 8
   12506:	82 e1       	ldi	r24, 0x12	; 18
   12508:	45 de       	rcall	.-886    	; 0x12194 <print_tok_str>
   1250a:	64 e0       	ldi	r22, 0x04	; 4
   1250c:	81 e1       	ldi	r24, 0x11	; 17
   1250e:	77 de       	rcall	.-786    	; 0x121fe <print_tok>
   12510:	64 e0       	ldi	r22, 0x04	; 4
   12512:	85 e1       	ldi	r24, 0x15	; 21
   12514:	74 de       	rcall	.-792    	; 0x121fe <print_tok>
   12516:	e9 89       	ldd	r30, Y+17	; 0x11
   12518:	fa 89       	ldd	r31, Y+18	; 0x12
   1251a:	24 81       	ldd	r18, Z+4	; 0x04
   1251c:	35 81       	ldd	r19, Z+5	; 0x05
   1251e:	40 e0       	ldi	r20, 0x00	; 0
   12520:	50 e0       	ldi	r21, 0x00	; 0
   12522:	68 e0       	ldi	r22, 0x08	; 8
   12524:	87 e1       	ldi	r24, 0x17	; 23
   12526:	f6 dd       	rcall	.-1044   	; 0x12114 <print_tok_val>
   12528:	64 e0       	ldi	r22, 0x04	; 4
   1252a:	81 e1       	ldi	r24, 0x11	; 17
   1252c:	68 de       	rcall	.-816    	; 0x121fe <print_tok>
   1252e:	a1 14       	cp	r10, r1
   12530:	b1 04       	cpc	r11, r1
   12532:	09 f1       	breq	.+66     	; 0x12576 <display_Config+0x176>
   12534:	64 e0       	ldi	r22, 0x04	; 4
   12536:	8b e0       	ldi	r24, 0x0B	; 11
   12538:	62 de       	rcall	.-828    	; 0x121fe <print_tok>
   1253a:	e9 89       	ldd	r30, Y+17	; 0x11
   1253c:	fa 89       	ldd	r31, Y+18	; 0x12
   1253e:	26 81       	ldd	r18, Z+6	; 0x06
   12540:	37 81       	ldd	r19, Z+7	; 0x07
   12542:	40 e0       	ldi	r20, 0x00	; 0
   12544:	50 e0       	ldi	r21, 0x00	; 0
   12546:	68 e0       	ldi	r22, 0x08	; 8
   12548:	88 e2       	ldi	r24, 0x28	; 40
   1254a:	e4 dd       	rcall	.-1080   	; 0x12114 <print_tok_val>
   1254c:	e9 89       	ldd	r30, Y+17	; 0x11
   1254e:	fa 89       	ldd	r31, Y+18	; 0x12
   12550:	20 85       	ldd	r18, Z+8	; 0x08
   12552:	31 85       	ldd	r19, Z+9	; 0x09
   12554:	40 e0       	ldi	r20, 0x00	; 0
   12556:	50 e0       	ldi	r21, 0x00	; 0
   12558:	68 e0       	ldi	r22, 0x08	; 8
   1255a:	85 e2       	ldi	r24, 0x25	; 37
   1255c:	db dd       	rcall	.-1098   	; 0x12114 <print_tok_val>
   1255e:	e9 89       	ldd	r30, Y+17	; 0x11
   12560:	fa 89       	ldd	r31, Y+18	; 0x12
   12562:	22 85       	ldd	r18, Z+10	; 0x0a
   12564:	30 e0       	ldi	r19, 0x00	; 0
   12566:	40 e0       	ldi	r20, 0x00	; 0
   12568:	50 e0       	ldi	r21, 0x00	; 0
   1256a:	68 e0       	ldi	r22, 0x08	; 8
   1256c:	86 e2       	ldi	r24, 0x26	; 38
   1256e:	d2 dd       	rcall	.-1116   	; 0x12114 <print_tok_val>
   12570:	64 e0       	ldi	r22, 0x04	; 4
   12572:	81 e1       	ldi	r24, 0x11	; 17
   12574:	44 de       	rcall	.-888    	; 0x121fe <print_tok>
   12576:	64 e0       	ldi	r22, 0x04	; 4
   12578:	87 e2       	ldi	r24, 0x27	; 39
   1257a:	41 de       	rcall	.-894    	; 0x121fe <print_tok>
   1257c:	a1 14       	cp	r10, r1
   1257e:	b1 04       	cpc	r11, r1
   12580:	49 f0       	breq	.+18     	; 0x12594 <display_Config+0x194>
   12582:	e9 89       	ldd	r30, Y+17	; 0x11
   12584:	fa 89       	ldd	r31, Y+18	; 0x12
   12586:	23 85       	ldd	r18, Z+11	; 0x0b
   12588:	30 e0       	ldi	r19, 0x00	; 0
   1258a:	40 e0       	ldi	r20, 0x00	; 0
   1258c:	50 e0       	ldi	r21, 0x00	; 0
   1258e:	68 e0       	ldi	r22, 0x08	; 8
   12590:	89 e2       	ldi	r24, 0x29	; 41
   12592:	c0 dd       	rcall	.-1152   	; 0x12114 <print_tok_val>
   12594:	e9 89       	ldd	r30, Y+17	; 0x11
   12596:	fa 89       	ldd	r31, Y+18	; 0x12
   12598:	24 85       	ldd	r18, Z+12	; 0x0c
   1259a:	35 85       	ldd	r19, Z+13	; 0x0d
   1259c:	46 85       	ldd	r20, Z+14	; 0x0e
   1259e:	57 85       	ldd	r21, Z+15	; 0x0f
   125a0:	68 e0       	ldi	r22, 0x08	; 8
   125a2:	8f e0       	ldi	r24, 0x0F	; 15
   125a4:	b7 dd       	rcall	.-1170   	; 0x12114 <print_tok_val>
   125a6:	a1 14       	cp	r10, r1
   125a8:	b1 04       	cpc	r11, r1
   125aa:	09 f4       	brne	.+2      	; 0x125ae <display_Config+0x1ae>
   125ac:	5a c0       	rjmp	.+180    	; 0x12662 <display_Config+0x262>
   125ae:	e9 89       	ldd	r30, Y+17	; 0x11
   125b0:	fa 89       	ldd	r31, Y+18	; 0x12
   125b2:	20 89       	ldd	r18, Z+16	; 0x10
   125b4:	31 89       	ldd	r19, Z+17	; 0x11
   125b6:	40 e0       	ldi	r20, 0x00	; 0
   125b8:	50 e0       	ldi	r21, 0x00	; 0
   125ba:	68 e0       	ldi	r22, 0x08	; 8
   125bc:	87 e0       	ldi	r24, 0x07	; 7
   125be:	aa dd       	rcall	.-1196   	; 0x12114 <print_tok_val>
   125c0:	e9 89       	ldd	r30, Y+17	; 0x11
   125c2:	fa 89       	ldd	r31, Y+18	; 0x12
   125c4:	22 89       	ldd	r18, Z+18	; 0x12
   125c6:	30 e0       	ldi	r19, 0x00	; 0
   125c8:	40 e0       	ldi	r20, 0x00	; 0
   125ca:	50 e0       	ldi	r21, 0x00	; 0
   125cc:	68 e0       	ldi	r22, 0x08	; 8
   125ce:	85 e0       	ldi	r24, 0x05	; 5
   125d0:	a1 dd       	rcall	.-1214   	; 0x12114 <print_tok_val>
   125d2:	e9 89       	ldd	r30, Y+17	; 0x11
   125d4:	fa 89       	ldd	r31, Y+18	; 0x12
   125d6:	23 89       	ldd	r18, Z+19	; 0x13
   125d8:	30 e0       	ldi	r19, 0x00	; 0
   125da:	40 e0       	ldi	r20, 0x00	; 0
   125dc:	50 e0       	ldi	r21, 0x00	; 0
   125de:	68 e0       	ldi	r22, 0x08	; 8
   125e0:	86 e0       	ldi	r24, 0x06	; 6
   125e2:	98 dd       	rcall	.-1232   	; 0x12114 <print_tok_val>
   125e4:	e9 89       	ldd	r30, Y+17	; 0x11
   125e6:	fa 89       	ldd	r31, Y+18	; 0x12
   125e8:	24 89       	ldd	r18, Z+20	; 0x14
   125ea:	35 89       	ldd	r19, Z+21	; 0x15
   125ec:	40 e0       	ldi	r20, 0x00	; 0
   125ee:	50 e0       	ldi	r21, 0x00	; 0
   125f0:	68 e0       	ldi	r22, 0x08	; 8
   125f2:	84 e0       	ldi	r24, 0x04	; 4
   125f4:	8f dd       	rcall	.-1250   	; 0x12114 <print_tok_val>
   125f6:	e9 89       	ldd	r30, Y+17	; 0x11
   125f8:	fa 89       	ldd	r31, Y+18	; 0x12
   125fa:	26 89       	ldd	r18, Z+22	; 0x16
   125fc:	37 89       	ldd	r19, Z+23	; 0x17
   125fe:	40 e0       	ldi	r20, 0x00	; 0
   12600:	50 e0       	ldi	r21, 0x00	; 0
   12602:	68 e0       	ldi	r22, 0x08	; 8
   12604:	8a e0       	ldi	r24, 0x0A	; 10
   12606:	86 dd       	rcall	.-1268   	; 0x12114 <print_tok_val>
   12608:	e9 89       	ldd	r30, Y+17	; 0x11
   1260a:	fa 89       	ldd	r31, Y+18	; 0x12
   1260c:	20 8d       	ldd	r18, Z+24	; 0x18
   1260e:	31 8d       	ldd	r19, Z+25	; 0x19
   12610:	40 e0       	ldi	r20, 0x00	; 0
   12612:	50 e0       	ldi	r21, 0x00	; 0
   12614:	68 e0       	ldi	r22, 0x08	; 8
   12616:	8e e1       	ldi	r24, 0x1E	; 30
   12618:	7d dd       	rcall	.-1286   	; 0x12114 <print_tok_val>
   1261a:	e9 89       	ldd	r30, Y+17	; 0x11
   1261c:	fa 89       	ldd	r31, Y+18	; 0x12
   1261e:	22 8d       	ldd	r18, Z+26	; 0x1a
   12620:	33 8d       	ldd	r19, Z+27	; 0x1b
   12622:	40 e0       	ldi	r20, 0x00	; 0
   12624:	50 e0       	ldi	r21, 0x00	; 0
   12626:	68 e0       	ldi	r22, 0x08	; 8
   12628:	80 e0       	ldi	r24, 0x00	; 0
   1262a:	74 dd       	rcall	.-1304   	; 0x12114 <print_tok_val>
   1262c:	e9 89       	ldd	r30, Y+17	; 0x11
   1262e:	fa 89       	ldd	r31, Y+18	; 0x12
   12630:	24 8d       	ldd	r18, Z+28	; 0x1c
   12632:	30 e0       	ldi	r19, 0x00	; 0
   12634:	40 e0       	ldi	r20, 0x00	; 0
   12636:	50 e0       	ldi	r21, 0x00	; 0
   12638:	68 e0       	ldi	r22, 0x08	; 8
   1263a:	8c e1       	ldi	r24, 0x1C	; 28
   1263c:	6b dd       	rcall	.-1322   	; 0x12114 <print_tok_val>
   1263e:	e9 89       	ldd	r30, Y+17	; 0x11
   12640:	fa 89       	ldd	r31, Y+18	; 0x12
   12642:	25 8d       	ldd	r18, Z+29	; 0x1d
   12644:	30 e0       	ldi	r19, 0x00	; 0
   12646:	40 e0       	ldi	r20, 0x00	; 0
   12648:	50 e0       	ldi	r21, 0x00	; 0
   1264a:	68 e0       	ldi	r22, 0x08	; 8
   1264c:	83 e1       	ldi	r24, 0x13	; 19
   1264e:	62 dd       	rcall	.-1340   	; 0x12114 <print_tok_val>
   12650:	e9 89       	ldd	r30, Y+17	; 0x11
   12652:	fa 89       	ldd	r31, Y+18	; 0x12
   12654:	26 8d       	ldd	r18, Z+30	; 0x1e
   12656:	30 e0       	ldi	r19, 0x00	; 0
   12658:	40 e0       	ldi	r20, 0x00	; 0
   1265a:	50 e0       	ldi	r21, 0x00	; 0
   1265c:	68 e0       	ldi	r22, 0x08	; 8
   1265e:	81 e2       	ldi	r24, 0x21	; 33
   12660:	59 dd       	rcall	.-1358   	; 0x12114 <print_tok_val>
   12662:	64 e0       	ldi	r22, 0x04	; 4
   12664:	81 e1       	ldi	r24, 0x11	; 17
   12666:	cb dd       	rcall	.-1130   	; 0x121fe <print_tok>
   12668:	a1 14       	cp	r10, r1
   1266a:	b1 04       	cpc	r11, r1
   1266c:	99 f1       	breq	.+102    	; 0x126d4 <display_Config+0x2d4>
   1266e:	64 e0       	ldi	r22, 0x04	; 4
   12670:	8a e2       	ldi	r24, 0x2A	; 42
   12672:	c5 dd       	rcall	.-1142   	; 0x121fe <print_tok>
   12674:	e9 89       	ldd	r30, Y+17	; 0x11
   12676:	fa 89       	ldd	r31, Y+18	; 0x12
   12678:	27 8d       	ldd	r18, Z+31	; 0x1f
   1267a:	30 a1       	ldd	r19, Z+32	; 0x20
   1267c:	41 a1       	ldd	r20, Z+33	; 0x21
   1267e:	52 a1       	ldd	r21, Z+34	; 0x22
   12680:	68 e0       	ldi	r22, 0x08	; 8
   12682:	8a e1       	ldi	r24, 0x1A	; 26
   12684:	47 dd       	rcall	.-1394   	; 0x12114 <print_tok_val>
   12686:	e9 89       	ldd	r30, Y+17	; 0x11
   12688:	fa 89       	ldd	r31, Y+18	; 0x12
   1268a:	23 a1       	ldd	r18, Z+35	; 0x23
   1268c:	30 e0       	ldi	r19, 0x00	; 0
   1268e:	40 e0       	ldi	r20, 0x00	; 0
   12690:	50 e0       	ldi	r21, 0x00	; 0
   12692:	68 e0       	ldi	r22, 0x08	; 8
   12694:	8b e1       	ldi	r24, 0x1B	; 27
   12696:	3e dd       	rcall	.-1412   	; 0x12114 <print_tok_val>
   12698:	e9 89       	ldd	r30, Y+17	; 0x11
   1269a:	fa 89       	ldd	r31, Y+18	; 0x12
   1269c:	24 a1       	ldd	r18, Z+36	; 0x24
   1269e:	35 a1       	ldd	r19, Z+37	; 0x25
   126a0:	40 e0       	ldi	r20, 0x00	; 0
   126a2:	50 e0       	ldi	r21, 0x00	; 0
   126a4:	68 e0       	ldi	r22, 0x08	; 8
   126a6:	8d e1       	ldi	r24, 0x1D	; 29
   126a8:	35 dd       	rcall	.-1430   	; 0x12114 <print_tok_val>
   126aa:	e9 89       	ldd	r30, Y+17	; 0x11
   126ac:	fa 89       	ldd	r31, Y+18	; 0x12
   126ae:	26 a1       	ldd	r18, Z+38	; 0x26
   126b0:	37 a1       	ldd	r19, Z+39	; 0x27
   126b2:	40 a5       	ldd	r20, Z+40	; 0x28
   126b4:	51 a5       	ldd	r21, Z+41	; 0x29
   126b6:	68 e0       	ldi	r22, 0x08	; 8
   126b8:	89 e1       	ldi	r24, 0x19	; 25
   126ba:	2c dd       	rcall	.-1448   	; 0x12114 <print_tok_val>
   126bc:	e9 89       	ldd	r30, Y+17	; 0x11
   126be:	fa 89       	ldd	r31, Y+18	; 0x12
   126c0:	22 a5       	ldd	r18, Z+42	; 0x2a
   126c2:	30 e0       	ldi	r19, 0x00	; 0
   126c4:	40 e0       	ldi	r20, 0x00	; 0
   126c6:	50 e0       	ldi	r21, 0x00	; 0
   126c8:	68 e0       	ldi	r22, 0x08	; 8
   126ca:	88 e1       	ldi	r24, 0x18	; 24
   126cc:	23 dd       	rcall	.-1466   	; 0x12114 <print_tok_val>
   126ce:	64 e0       	ldi	r22, 0x04	; 4
   126d0:	81 e1       	ldi	r24, 0x11	; 17
   126d2:	95 dd       	rcall	.-1238   	; 0x121fe <print_tok>
   126d4:	e9 89       	ldd	r30, Y+17	; 0x11
   126d6:	fa 89       	ldd	r31, Y+18	; 0x12
   126d8:	86 a1       	ldd	r24, Z+38	; 0x26
   126da:	97 a1       	ldd	r25, Z+39	; 0x27
   126dc:	a0 a5       	ldd	r26, Z+40	; 0x28
   126de:	b1 a5       	ldd	r27, Z+41	; 0x29
   126e0:	01 96       	adiw	r24, 0x01	; 1
   126e2:	a1 1d       	adc	r26, r1
   126e4:	b1 1d       	adc	r27, r1
   126e6:	ed b7       	in	r30, 0x3d	; 61
   126e8:	fe b7       	in	r31, 0x3e	; 62
   126ea:	84 83       	std	Z+4, r24	; 0x04
   126ec:	95 83       	std	Z+5, r25	; 0x05
   126ee:	a6 83       	std	Z+6, r26	; 0x06
   126f0:	b7 83       	std	Z+7, r27	; 0x07
   126f2:	23 e1       	ldi	r18, 0x13	; 19
   126f4:	39 e1       	ldi	r19, 0x19	; 25
   126f6:	c9 01       	movw	r24, r18
   126f8:	a0 e0       	ldi	r26, 0x00	; 0
   126fa:	81 83       	std	Z+1, r24	; 0x01
   126fc:	92 83       	std	Z+2, r25	; 0x02
   126fe:	a3 83       	std	Z+3, r26	; 0x03
   12700:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12704:	60 e0       	ldi	r22, 0x00	; 0
   12706:	81 e1       	ldi	r24, 0x11	; 17
   12708:	7a dd       	rcall	.-1292   	; 0x121fe <print_tok>
   1270a:	f8 01       	movw	r30, r16
   1270c:	80 81       	ld	r24, Z
   1270e:	81 30       	cpi	r24, 0x01	; 1
   12710:	09 f0       	breq	.+2      	; 0x12714 <display_Config+0x314>
   12712:	ad c0       	rjmp	.+346    	; 0x1286e <display_Config+0x46e>
   12714:	27 a1       	ldd	r18, Z+39	; 0x27
   12716:	30 a5       	ldd	r19, Z+40	; 0x28
   12718:	3a 8b       	std	Y+18, r19	; 0x12
   1271a:	29 8b       	std	Y+17, r18	; 0x11
   1271c:	c8 01       	movw	r24, r16
   1271e:	07 96       	adiw	r24, 0x07	; 7
   12720:	ed b7       	in	r30, 0x3d	; 61
   12722:	fe b7       	in	r31, 0x3e	; 62
   12724:	95 83       	std	Z+5, r25	; 0x05
   12726:	84 83       	std	Z+4, r24	; 0x04
   12728:	2b 85       	ldd	r18, Y+11	; 0x0b
   1272a:	3c 85       	ldd	r19, Y+12	; 0x0c
   1272c:	4d 85       	ldd	r20, Y+13	; 0x0d
   1272e:	21 83       	std	Z+1, r18	; 0x01
   12730:	32 83       	std	Z+2, r19	; 0x02
   12732:	43 83       	std	Z+3, r20	; 0x03
   12734:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12738:	e9 89       	ldd	r30, Y+17	; 0x11
   1273a:	fa 89       	ldd	r31, Y+18	; 0x12
   1273c:	80 81       	ld	r24, Z
   1273e:	90 e0       	ldi	r25, 0x00	; 0
   12740:	ed b7       	in	r30, 0x3d	; 61
   12742:	fe b7       	in	r31, 0x3e	; 62
   12744:	95 83       	std	Z+5, r25	; 0x05
   12746:	84 83       	std	Z+4, r24	; 0x04
   12748:	2e 85       	ldd	r18, Y+14	; 0x0e
   1274a:	3f 85       	ldd	r19, Y+15	; 0x0f
   1274c:	48 89       	ldd	r20, Y+16	; 0x10
   1274e:	21 83       	std	Z+1, r18	; 0x01
   12750:	32 83       	std	Z+2, r19	; 0x02
   12752:	43 83       	std	Z+3, r20	; 0x03
   12754:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12758:	64 e0       	ldi	r22, 0x04	; 4
   1275a:	85 e1       	ldi	r24, 0x15	; 21
   1275c:	50 dd       	rcall	.-1376   	; 0x121fe <print_tok>
   1275e:	e9 89       	ldd	r30, Y+17	; 0x11
   12760:	fa 89       	ldd	r31, Y+18	; 0x12
   12762:	20 81       	ld	r18, Z
   12764:	30 e0       	ldi	r19, 0x00	; 0
   12766:	40 e0       	ldi	r20, 0x00	; 0
   12768:	50 e0       	ldi	r21, 0x00	; 0
   1276a:	68 e0       	ldi	r22, 0x08	; 8
   1276c:	81 e0       	ldi	r24, 0x01	; 1
   1276e:	d2 dc       	rcall	.-1628   	; 0x12114 <print_tok_val>
   12770:	e9 89       	ldd	r30, Y+17	; 0x11
   12772:	fa 89       	ldd	r31, Y+18	; 0x12
   12774:	21 81       	ldd	r18, Z+1	; 0x01
   12776:	30 e0       	ldi	r19, 0x00	; 0
   12778:	40 e0       	ldi	r20, 0x00	; 0
   1277a:	50 e0       	ldi	r21, 0x00	; 0
   1277c:	68 e0       	ldi	r22, 0x08	; 8
   1277e:	8f e1       	ldi	r24, 0x1F	; 31
   12780:	c9 dc       	rcall	.-1646   	; 0x12114 <print_tok_val>
   12782:	e9 89       	ldd	r30, Y+17	; 0x11
   12784:	fa 89       	ldd	r31, Y+18	; 0x12
   12786:	42 81       	ldd	r20, Z+2	; 0x02
   12788:	53 81       	ldd	r21, Z+3	; 0x03
   1278a:	68 e0       	ldi	r22, 0x08	; 8
   1278c:	82 e1       	ldi	r24, 0x12	; 18
   1278e:	02 dd       	rcall	.-1532   	; 0x12194 <print_tok_str>
   12790:	64 e0       	ldi	r22, 0x04	; 4
   12792:	81 e1       	ldi	r24, 0x11	; 17
   12794:	34 dd       	rcall	.-1432   	; 0x121fe <print_tok>
   12796:	64 e0       	ldi	r22, 0x04	; 4
   12798:	89 e0       	ldi	r24, 0x09	; 9
   1279a:	31 dd       	rcall	.-1438   	; 0x121fe <print_tok>
   1279c:	e9 89       	ldd	r30, Y+17	; 0x11
   1279e:	fa 89       	ldd	r31, Y+18	; 0x12
   127a0:	24 81       	ldd	r18, Z+4	; 0x04
   127a2:	35 81       	ldd	r19, Z+5	; 0x05
   127a4:	40 e0       	ldi	r20, 0x00	; 0
   127a6:	50 e0       	ldi	r21, 0x00	; 0
   127a8:	68 e0       	ldi	r22, 0x08	; 8
   127aa:	87 e1       	ldi	r24, 0x17	; 23
   127ac:	b3 dc       	rcall	.-1690   	; 0x12114 <print_tok_val>
   127ae:	64 e0       	ldi	r22, 0x04	; 4
   127b0:	81 e1       	ldi	r24, 0x11	; 17
   127b2:	25 dd       	rcall	.-1462   	; 0x121fe <print_tok>
   127b4:	a1 14       	cp	r10, r1
   127b6:	b1 04       	cpc	r11, r1
   127b8:	91 f1       	breq	.+100    	; 0x1281e <display_Config+0x41e>
   127ba:	64 e0       	ldi	r22, 0x04	; 4
   127bc:	84 e1       	ldi	r24, 0x14	; 20
   127be:	1f dd       	rcall	.-1474   	; 0x121fe <print_tok>
   127c0:	e9 89       	ldd	r30, Y+17	; 0x11
   127c2:	fa 89       	ldd	r31, Y+18	; 0x12
   127c4:	26 81       	ldd	r18, Z+6	; 0x06
   127c6:	37 81       	ldd	r19, Z+7	; 0x07
   127c8:	03 2e       	mov	r0, r19
   127ca:	00 0c       	add	r0, r0
   127cc:	44 0b       	sbc	r20, r20
   127ce:	55 0b       	sbc	r21, r21
   127d0:	68 e0       	ldi	r22, 0x08	; 8
   127d2:	88 e0       	ldi	r24, 0x08	; 8
   127d4:	9f dc       	rcall	.-1730   	; 0x12114 <print_tok_val>
   127d6:	e9 89       	ldd	r30, Y+17	; 0x11
   127d8:	fa 89       	ldd	r31, Y+18	; 0x12
   127da:	20 85       	ldd	r18, Z+8	; 0x08
   127dc:	31 85       	ldd	r19, Z+9	; 0x09
   127de:	03 2e       	mov	r0, r19
   127e0:	00 0c       	add	r0, r0
   127e2:	44 0b       	sbc	r20, r20
   127e4:	55 0b       	sbc	r21, r21
   127e6:	68 e0       	ldi	r22, 0x08	; 8
   127e8:	82 e2       	ldi	r24, 0x22	; 34
   127ea:	94 dc       	rcall	.-1752   	; 0x12114 <print_tok_val>
   127ec:	e9 89       	ldd	r30, Y+17	; 0x11
   127ee:	fa 89       	ldd	r31, Y+18	; 0x12
   127f0:	22 85       	ldd	r18, Z+10	; 0x0a
   127f2:	33 85       	ldd	r19, Z+11	; 0x0b
   127f4:	03 2e       	mov	r0, r19
   127f6:	00 0c       	add	r0, r0
   127f8:	44 0b       	sbc	r20, r20
   127fa:	55 0b       	sbc	r21, r21
   127fc:	68 e0       	ldi	r22, 0x08	; 8
   127fe:	86 e1       	ldi	r24, 0x16	; 22
   12800:	89 dc       	rcall	.-1774   	; 0x12114 <print_tok_val>
   12802:	e9 89       	ldd	r30, Y+17	; 0x11
   12804:	fa 89       	ldd	r31, Y+18	; 0x12
   12806:	24 85       	ldd	r18, Z+12	; 0x0c
   12808:	35 85       	ldd	r19, Z+13	; 0x0d
   1280a:	03 2e       	mov	r0, r19
   1280c:	00 0c       	add	r0, r0
   1280e:	44 0b       	sbc	r20, r20
   12810:	55 0b       	sbc	r21, r21
   12812:	68 e0       	ldi	r22, 0x08	; 8
   12814:	8d e0       	ldi	r24, 0x0D	; 13
   12816:	7e dc       	rcall	.-1796   	; 0x12114 <print_tok_val>
   12818:	64 e0       	ldi	r22, 0x04	; 4
   1281a:	81 e1       	ldi	r24, 0x11	; 17
   1281c:	f0 dc       	rcall	.-1568   	; 0x121fe <print_tok>
   1281e:	e9 89       	ldd	r30, Y+17	; 0x11
   12820:	fa 89       	ldd	r31, Y+18	; 0x12
   12822:	44 85       	ldd	r20, Z+12	; 0x0c
   12824:	55 85       	ldd	r21, Z+13	; 0x0d
   12826:	20 85       	ldd	r18, Z+8	; 0x08
   12828:	31 85       	ldd	r19, Z+9	; 0x09
   1282a:	42 9f       	mul	r20, r18
   1282c:	c0 01       	movw	r24, r0
   1282e:	43 9f       	mul	r20, r19
   12830:	90 0d       	add	r25, r0
   12832:	52 9f       	mul	r21, r18
   12834:	90 0d       	add	r25, r0
   12836:	11 24       	eor	r1, r1
   12838:	42 85       	ldd	r20, Z+10	; 0x0a
   1283a:	53 85       	ldd	r21, Z+11	; 0x0b
   1283c:	84 9f       	mul	r24, r20
   1283e:	90 01       	movw	r18, r0
   12840:	85 9f       	mul	r24, r21
   12842:	30 0d       	add	r19, r0
   12844:	94 9f       	mul	r25, r20
   12846:	30 0d       	add	r19, r0
   12848:	11 24       	eor	r1, r1
   1284a:	c9 01       	movw	r24, r18
   1284c:	33 0f       	add	r19, r19
   1284e:	aa 0b       	sbc	r26, r26
   12850:	bb 0b       	sbc	r27, r27
   12852:	ed b7       	in	r30, 0x3d	; 61
   12854:	fe b7       	in	r31, 0x3e	; 62
   12856:	84 83       	std	Z+4, r24	; 0x04
   12858:	95 83       	std	Z+5, r25	; 0x05
   1285a:	a6 83       	std	Z+6, r26	; 0x06
   1285c:	b7 83       	std	Z+7, r27	; 0x07
   1285e:	21 82       	std	Z+1, r2	; 0x01
   12860:	32 82       	std	Z+2, r3	; 0x02
   12862:	43 82       	std	Z+3, r4	; 0x03
   12864:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12868:	60 e0       	ldi	r22, 0x00	; 0
   1286a:	81 e1       	ldi	r24, 0x11	; 17
   1286c:	c8 dc       	rcall	.-1648   	; 0x121fe <print_tok>
   1286e:	f8 01       	movw	r30, r16
   12870:	80 81       	ld	r24, Z
   12872:	84 30       	cpi	r24, 0x04	; 4
   12874:	c9 f4       	brne	.+50     	; 0x128a8 <display_Config+0x4a8>
   12876:	27 a1       	ldd	r18, Z+39	; 0x27
   12878:	30 a5       	ldd	r19, Z+40	; 0x28
   1287a:	3a 8b       	std	Y+18, r19	; 0x12
   1287c:	29 8b       	std	Y+17, r18	; 0x11
   1287e:	60 e0       	ldi	r22, 0x00	; 0
   12880:	80 e2       	ldi	r24, 0x20	; 32
   12882:	bd dc       	rcall	.-1670   	; 0x121fe <print_tok>
   12884:	64 e0       	ldi	r22, 0x04	; 4
   12886:	89 e0       	ldi	r24, 0x09	; 9
   12888:	ba dc       	rcall	.-1676   	; 0x121fe <print_tok>
   1288a:	e9 89       	ldd	r30, Y+17	; 0x11
   1288c:	fa 89       	ldd	r31, Y+18	; 0x12
   1288e:	20 81       	ld	r18, Z
   12890:	30 e0       	ldi	r19, 0x00	; 0
   12892:	40 e0       	ldi	r20, 0x00	; 0
   12894:	50 e0       	ldi	r21, 0x00	; 0
   12896:	68 e0       	ldi	r22, 0x08	; 8
   12898:	81 e0       	ldi	r24, 0x01	; 1
   1289a:	3c dc       	rcall	.-1928   	; 0x12114 <print_tok_val>
   1289c:	64 e0       	ldi	r22, 0x04	; 4
   1289e:	81 e1       	ldi	r24, 0x11	; 17
   128a0:	ae dc       	rcall	.-1700   	; 0x121fe <print_tok>
   128a2:	60 e0       	ldi	r22, 0x00	; 0
   128a4:	81 e1       	ldi	r24, 0x11	; 17
   128a6:	ab dc       	rcall	.-1706   	; 0x121fe <print_tok>
   128a8:	28 85       	ldd	r18, Y+8	; 0x08
   128aa:	39 85       	ldd	r19, Y+9	; 0x09
   128ac:	4a 85       	ldd	r20, Y+10	; 0x0a
   128ae:	ed b7       	in	r30, 0x3d	; 61
   128b0:	fe b7       	in	r31, 0x3e	; 62
   128b2:	21 83       	std	Z+1, r18	; 0x01
   128b4:	32 83       	std	Z+2, r19	; 0x02
   128b6:	43 83       	std	Z+3, r20	; 0x03
   128b8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   128bc:	05 5d       	subi	r16, 0xD5	; 213
   128be:	1f 4f       	sbci	r17, 0xFF	; 255
   128c0:	24 e0       	ldi	r18, 0x04	; 4
   128c2:	31 e2       	ldi	r19, 0x21	; 33
   128c4:	20 17       	cp	r18, r16
   128c6:	31 07       	cpc	r19, r17
   128c8:	09 f0       	breq	.+2      	; 0x128cc <display_Config+0x4cc>
   128ca:	df cd       	rjmp	.-1090   	; 0x1248a <display_Config+0x8a>
   128cc:	82 ed       	ldi	r24, 0xD2	; 210
   128ce:	98 e1       	ldi	r25, 0x18	; 24
   128d0:	a0 e0       	ldi	r26, 0x00	; 0
   128d2:	ed b7       	in	r30, 0x3d	; 61
   128d4:	fe b7       	in	r31, 0x3e	; 62
   128d6:	81 83       	std	Z+1, r24	; 0x01
   128d8:	92 83       	std	Z+2, r25	; 0x02
   128da:	a3 83       	std	Z+3, r26	; 0x03
   128dc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   128e0:	62 96       	adiw	r28, 0x12	; 18
   128e2:	0f b6       	in	r0, 0x3f	; 63
   128e4:	f8 94       	cli
   128e6:	de bf       	out	0x3e, r29	; 62
   128e8:	0f be       	out	0x3f, r0	; 63
   128ea:	cd bf       	out	0x3d, r28	; 61
   128ec:	df 91       	pop	r29
   128ee:	cf 91       	pop	r28
   128f0:	1f 91       	pop	r17
   128f2:	0f 91       	pop	r16
   128f4:	ef 90       	pop	r14
   128f6:	df 90       	pop	r13
   128f8:	cf 90       	pop	r12
   128fa:	bf 90       	pop	r11
   128fc:	af 90       	pop	r10
   128fe:	8f 90       	pop	r8
   12900:	7f 90       	pop	r7
   12902:	6f 90       	pop	r6
   12904:	4f 90       	pop	r4
   12906:	3f 90       	pop	r3
   12908:	2f 90       	pop	r2
   1290a:	08 95       	ret

0001290c <find_type>:
   1290c:	e0 e0       	ldi	r30, 0x00	; 0
   1290e:	ff e1       	ldi	r31, 0x1F	; 31
   12910:	20 e0       	ldi	r18, 0x00	; 0
   12912:	30 e0       	ldi	r19, 0x00	; 0
   12914:	40 81       	ld	r20, Z
   12916:	50 e0       	ldi	r21, 0x00	; 0
   12918:	48 17       	cp	r20, r24
   1291a:	59 07       	cpc	r21, r25
   1291c:	49 f0       	breq	.+18     	; 0x12930 <find_type+0x24>
   1291e:	2f 5f       	subi	r18, 0xFF	; 255
   12920:	3f 4f       	sbci	r19, 0xFF	; 255
   12922:	bb 96       	adiw	r30, 0x2b	; 43
   12924:	2c 30       	cpi	r18, 0x0C	; 12
   12926:	31 05       	cpc	r19, r1
   12928:	a9 f7       	brne	.-22     	; 0x12914 <find_type+0x8>
   1292a:	8f ef       	ldi	r24, 0xFF	; 255
   1292c:	9f ef       	ldi	r25, 0xFF	; 255
   1292e:	08 95       	ret
   12930:	c9 01       	movw	r24, r18
   12932:	08 95       	ret

00012934 <count_drive_types>:
   12934:	28 2f       	mov	r18, r24
   12936:	e0 e0       	ldi	r30, 0x00	; 0
   12938:	ff e1       	ldi	r31, 0x1F	; 31
   1293a:	80 e0       	ldi	r24, 0x00	; 0
   1293c:	90 e0       	ldi	r25, 0x00	; 0
   1293e:	30 81       	ld	r19, Z
   12940:	32 13       	cpse	r19, r18
   12942:	01 c0       	rjmp	.+2      	; 0x12946 <count_drive_types+0x12>
   12944:	01 96       	adiw	r24, 0x01	; 1
   12946:	bb 96       	adiw	r30, 0x2b	; 43
   12948:	31 e2       	ldi	r19, 0x21	; 33
   1294a:	e4 30       	cpi	r30, 0x04	; 4
   1294c:	f3 07       	cpc	r31, r19
   1294e:	b9 f7       	brne	.-18     	; 0x1293e <count_drive_types+0xa>
   12950:	08 95       	ret

00012952 <type_to_str>:
   12952:	00 97       	sbiw	r24, 0x00	; 0
   12954:	59 f0       	breq	.+22     	; 0x1296c <type_to_str+0x1a>
   12956:	81 30       	cpi	r24, 0x01	; 1
   12958:	91 05       	cpc	r25, r1
   1295a:	59 f0       	breq	.+22     	; 0x12972 <type_to_str+0x20>
   1295c:	83 30       	cpi	r24, 0x03	; 3
   1295e:	91 05       	cpc	r25, r1
   12960:	59 f0       	breq	.+22     	; 0x12978 <type_to_str+0x26>
   12962:	04 97       	sbiw	r24, 0x04	; 4
   12964:	61 f0       	breq	.+24     	; 0x1297e <type_to_str+0x2c>
   12966:	8b e2       	ldi	r24, 0x2B	; 43
   12968:	9e e0       	ldi	r25, 0x0E	; 14
   1296a:	08 95       	ret
   1296c:	81 e0       	ldi	r24, 0x01	; 1
   1296e:	9e e0       	ldi	r25, 0x0E	; 14
   12970:	08 95       	ret
   12972:	89 e0       	ldi	r24, 0x09	; 9
   12974:	9e e0       	ldi	r25, 0x0E	; 14
   12976:	08 95       	ret
   12978:	81 e2       	ldi	r24, 0x21	; 33
   1297a:	9e e0       	ldi	r25, 0x0E	; 14
   1297c:	08 95       	ret
   1297e:	84 e1       	ldi	r24, 0x14	; 20
   12980:	9e e0       	ldi	r25, 0x0E	; 14
   12982:	08 95       	ret

00012984 <find_free>:
   12984:	80 e0       	ldi	r24, 0x00	; 0
   12986:	90 e0       	ldi	r25, 0x00	; 0
   12988:	c1 cf       	rjmp	.-126    	; 0x1290c <find_type>
   1298a:	08 95       	ret

0001298c <find_device>:
   1298c:	9b 01       	movw	r18, r22
   1298e:	20 52       	subi	r18, 0x20	; 32
   12990:	31 09       	sbc	r19, r1
   12992:	2f 35       	cpi	r18, 0x5F	; 95
   12994:	31 05       	cpc	r19, r1
   12996:	f8 f4       	brcc	.+62     	; 0x129d6 <find_device+0x4a>
   12998:	64 17       	cp	r22, r20
   1299a:	75 07       	cpc	r23, r21
   1299c:	e4 f0       	brlt	.+56     	; 0x129d6 <find_device+0x4a>
   1299e:	9a 01       	movw	r18, r20
   129a0:	22 5e       	subi	r18, 0xE2	; 226
   129a2:	3f 4f       	sbci	r19, 0xFF	; 255
   129a4:	26 17       	cp	r18, r22
   129a6:	37 07       	cpc	r19, r23
   129a8:	b4 f0       	brlt	.+44     	; 0x129d6 <find_device+0x4a>
   129aa:	64 1b       	sub	r22, r20
   129ac:	75 0b       	sbc	r23, r21
   129ae:	e0 e0       	ldi	r30, 0x00	; 0
   129b0:	ff e1       	ldi	r31, 0x1F	; 31
   129b2:	20 e0       	ldi	r18, 0x00	; 0
   129b4:	30 e0       	ldi	r19, 0x00	; 0
   129b6:	40 81       	ld	r20, Z
   129b8:	50 e0       	ldi	r21, 0x00	; 0
   129ba:	48 17       	cp	r20, r24
   129bc:	59 07       	cpc	r21, r25
   129be:	29 f4       	brne	.+10     	; 0x129ca <find_device+0x3e>
   129c0:	41 81       	ldd	r20, Z+1	; 0x01
   129c2:	50 e0       	ldi	r21, 0x00	; 0
   129c4:	64 17       	cp	r22, r20
   129c6:	75 07       	cpc	r23, r21
   129c8:	49 f0       	breq	.+18     	; 0x129dc <find_device+0x50>
   129ca:	2f 5f       	subi	r18, 0xFF	; 255
   129cc:	3f 4f       	sbci	r19, 0xFF	; 255
   129ce:	bb 96       	adiw	r30, 0x2b	; 43
   129d0:	2c 30       	cpi	r18, 0x0C	; 12
   129d2:	31 05       	cpc	r19, r1
   129d4:	81 f7       	brne	.-32     	; 0x129b6 <find_device+0x2a>
   129d6:	8f ef       	ldi	r24, 0xFF	; 255
   129d8:	9f ef       	ldi	r25, 0xFF	; 255
   129da:	08 95       	ret
   129dc:	c9 01       	movw	r24, r18
   129de:	08 95       	ret

000129e0 <set_active_device>:
   129e0:	a9 e0       	ldi	r26, 0x09	; 9
   129e2:	b0 e0       	ldi	r27, 0x00	; 0
   129e4:	e6 ef       	ldi	r30, 0xF6	; 246
   129e6:	f4 e9       	ldi	r31, 0x94	; 148
   129e8:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
   129ec:	8f 3f       	cpi	r24, 0xFF	; 255
   129ee:	2f ef       	ldi	r18, 0xFF	; 255
   129f0:	92 07       	cpc	r25, r18
   129f2:	09 f4       	brne	.+2      	; 0x129f6 <set_active_device+0x16>
   129f4:	d0 c0       	rjmp	.+416    	; 0x12b96 <set_active_device+0x1b6>
   129f6:	ec 01       	movw	r28, r24
   129f8:	0c 97       	sbiw	r24, 0x0c	; 12
   129fa:	b0 f0       	brcs	.+44     	; 0x12a28 <set_active_device+0x48>
   129fc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12a00:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12a04:	c9 01       	movw	r24, r18
   12a06:	81 70       	andi	r24, 0x01	; 1
   12a08:	99 27       	eor	r25, r25
   12a0a:	20 ff       	sbrs	r18, 0
   12a0c:	c6 c0       	rjmp	.+396    	; 0x12b9a <set_active_device+0x1ba>
   12a0e:	ed b7       	in	r30, 0x3d	; 61
   12a10:	fe b7       	in	r31, 0x3e	; 62
   12a12:	d5 83       	std	Z+5, r29	; 0x05
   12a14:	c4 83       	std	Z+4, r28	; 0x04
   12a16:	8d ea       	ldi	r24, 0xAD	; 173
   12a18:	98 e1       	ldi	r25, 0x18	; 24
   12a1a:	a0 e0       	ldi	r26, 0x00	; 0
   12a1c:	81 83       	std	Z+1, r24	; 0x01
   12a1e:	92 83       	std	Z+2, r25	; 0x02
   12a20:	a3 83       	std	Z+3, r26	; 0x03
   12a22:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12a26:	b7 c0       	rjmp	.+366    	; 0x12b96 <set_active_device+0x1b6>
   12a28:	8b e2       	ldi	r24, 0x2B	; 43
   12a2a:	8c 9f       	mul	r24, r28
   12a2c:	f0 01       	movw	r30, r0
   12a2e:	8d 9f       	mul	r24, r29
   12a30:	f0 0d       	add	r31, r0
   12a32:	11 24       	eor	r1, r1
   12a34:	e0 50       	subi	r30, 0x00	; 0
   12a36:	f1 4e       	sbci	r31, 0xE1	; 225
   12a38:	21 81       	ldd	r18, Z+1	; 0x01
   12a3a:	2f 31       	cpi	r18, 0x1F	; 31
   12a3c:	d0 f0       	brcs	.+52     	; 0x12a72 <set_active_device+0x92>
   12a3e:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12a42:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12a46:	ca 01       	movw	r24, r20
   12a48:	81 70       	andi	r24, 0x01	; 1
   12a4a:	99 27       	eor	r25, r25
   12a4c:	40 ff       	sbrs	r20, 0
   12a4e:	a5 c0       	rjmp	.+330    	; 0x12b9a <set_active_device+0x1ba>
   12a50:	82 2f       	mov	r24, r18
   12a52:	90 e0       	ldi	r25, 0x00	; 0
   12a54:	ed b7       	in	r30, 0x3d	; 61
   12a56:	fe b7       	in	r31, 0x3e	; 62
   12a58:	97 83       	std	Z+7, r25	; 0x07
   12a5a:	86 83       	std	Z+6, r24	; 0x06
   12a5c:	d5 83       	std	Z+5, r29	; 0x05
   12a5e:	c4 83       	std	Z+4, r28	; 0x04
   12a60:	84 e7       	ldi	r24, 0x74	; 116
   12a62:	98 e1       	ldi	r25, 0x18	; 24
   12a64:	a0 e0       	ldi	r26, 0x00	; 0
   12a66:	81 83       	std	Z+1, r24	; 0x01
   12a68:	92 83       	std	Z+2, r25	; 0x02
   12a6a:	a3 83       	std	Z+3, r26	; 0x03
   12a6c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12a70:	92 c0       	rjmp	.+292    	; 0x12b96 <set_active_device+0x1b6>
   12a72:	20 81       	ld	r18, Z
   12a74:	02 2f       	mov	r16, r18
   12a76:	10 e0       	ldi	r17, 0x00	; 0
   12a78:	87 a1       	ldd	r24, Z+39	; 0x27
   12a7a:	90 a5       	ldd	r25, Z+40	; 0x28
   12a7c:	00 97       	sbiw	r24, 0x00	; 0
   12a7e:	b1 f4       	brne	.+44     	; 0x12aac <set_active_device+0xcc>
   12a80:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12a84:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12a88:	c9 01       	movw	r24, r18
   12a8a:	81 70       	andi	r24, 0x01	; 1
   12a8c:	99 27       	eor	r25, r25
   12a8e:	20 ff       	sbrs	r18, 0
   12a90:	84 c0       	rjmp	.+264    	; 0x12b9a <set_active_device+0x1ba>
   12a92:	c8 01       	movw	r24, r16
   12a94:	5e df       	rcall	.-324    	; 0x12952 <type_to_str>
   12a96:	ed b7       	in	r30, 0x3d	; 61
   12a98:	fe b7       	in	r31, 0x3e	; 62
   12a9a:	91 87       	std	Z+9, r25	; 0x09
   12a9c:	80 87       	std	Z+8, r24	; 0x08
   12a9e:	17 83       	std	Z+7, r17	; 0x07
   12aa0:	06 83       	std	Z+6, r16	; 0x06
   12aa2:	d5 83       	std	Z+5, r29	; 0x05
   12aa4:	c4 83       	std	Z+4, r28	; 0x04
   12aa6:	8f e3       	ldi	r24, 0x3F	; 63
   12aa8:	98 e1       	ldi	r25, 0x18	; 24
   12aaa:	6f c0       	rjmp	.+222    	; 0x12b8a <set_active_device+0x1aa>
   12aac:	01 15       	cp	r16, r1
   12aae:	11 05       	cpc	r17, r1
   12ab0:	b9 f4       	brne	.+46     	; 0x12ae0 <set_active_device+0x100>
   12ab2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12ab6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12aba:	c9 01       	movw	r24, r18
   12abc:	81 70       	andi	r24, 0x01	; 1
   12abe:	99 27       	eor	r25, r25
   12ac0:	20 ff       	sbrs	r18, 0
   12ac2:	6b c0       	rjmp	.+214    	; 0x12b9a <set_active_device+0x1ba>
   12ac4:	80 e0       	ldi	r24, 0x00	; 0
   12ac6:	90 e0       	ldi	r25, 0x00	; 0
   12ac8:	44 df       	rcall	.-376    	; 0x12952 <type_to_str>
   12aca:	ed b7       	in	r30, 0x3d	; 61
   12acc:	fe b7       	in	r31, 0x3e	; 62
   12ace:	91 87       	std	Z+9, r25	; 0x09
   12ad0:	80 87       	std	Z+8, r24	; 0x08
   12ad2:	17 82       	std	Z+7, r1	; 0x07
   12ad4:	16 82       	std	Z+6, r1	; 0x06
   12ad6:	d5 83       	std	Z+5, r29	; 0x05
   12ad8:	c4 83       	std	Z+4, r28	; 0x04
   12ada:	8a e0       	ldi	r24, 0x0A	; 10
   12adc:	98 e1       	ldi	r25, 0x18	; 24
   12ade:	55 c0       	rjmp	.+170    	; 0x12b8a <set_active_device+0x1aa>
   12ae0:	04 30       	cpi	r16, 0x04	; 4
   12ae2:	11 05       	cpc	r17, r1
   12ae4:	29 f4       	brne	.+10     	; 0x12af0 <set_active_device+0x110>
   12ae6:	90 93 78 19 	sts	0x1978, r25	; 0x801978 <PRINTERp+0x1>
   12aea:	80 93 77 19 	sts	0x1977, r24	; 0x801977 <PRINTERp>
   12aee:	35 c0       	rjmp	.+106    	; 0x12b5a <set_active_device+0x17a>
   12af0:	2d 7f       	andi	r18, 0xFD	; 253
   12af2:	21 30       	cpi	r18, 0x01	; 1
   12af4:	a9 f5       	brne	.+106    	; 0x12b60 <set_active_device+0x180>
   12af6:	21 a5       	ldd	r18, Z+41	; 0x29
   12af8:	32 a5       	ldd	r19, Z+42	; 0x2a
   12afa:	21 15       	cp	r18, r1
   12afc:	31 05       	cpc	r19, r1
   12afe:	b1 f4       	brne	.+44     	; 0x12b2c <set_active_device+0x14c>
   12b00:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12b04:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12b08:	c9 01       	movw	r24, r18
   12b0a:	81 70       	andi	r24, 0x01	; 1
   12b0c:	99 27       	eor	r25, r25
   12b0e:	20 ff       	sbrs	r18, 0
   12b10:	44 c0       	rjmp	.+136    	; 0x12b9a <set_active_device+0x1ba>
   12b12:	c8 01       	movw	r24, r16
   12b14:	1e df       	rcall	.-452    	; 0x12952 <type_to_str>
   12b16:	ed b7       	in	r30, 0x3d	; 61
   12b18:	fe b7       	in	r31, 0x3e	; 62
   12b1a:	91 87       	std	Z+9, r25	; 0x09
   12b1c:	80 87       	std	Z+8, r24	; 0x08
   12b1e:	17 83       	std	Z+7, r17	; 0x07
   12b20:	06 83       	std	Z+6, r16	; 0x06
   12b22:	d5 83       	std	Z+5, r29	; 0x05
   12b24:	c4 83       	std	Z+4, r28	; 0x04
   12b26:	82 ed       	ldi	r24, 0xD2	; 210
   12b28:	97 e1       	ldi	r25, 0x17	; 23
   12b2a:	2f c0       	rjmp	.+94     	; 0x12b8a <set_active_device+0x1aa>
   12b2c:	01 30       	cpi	r16, 0x01	; 1
   12b2e:	11 05       	cpc	r17, r1
   12b30:	49 f4       	brne	.+18     	; 0x12b44 <set_active_device+0x164>
   12b32:	90 93 72 19 	sts	0x1972, r25	; 0x801972 <AMIGOp+0x1>
   12b36:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <AMIGOp>
   12b3a:	30 93 70 19 	sts	0x1970, r19	; 0x801970 <AMIGOs+0x1>
   12b3e:	20 93 6f 19 	sts	0x196F, r18	; 0x80196f <AMIGOs>
   12b42:	0b c0       	rjmp	.+22     	; 0x12b5a <set_active_device+0x17a>
   12b44:	03 30       	cpi	r16, 0x03	; 3
   12b46:	11 05       	cpc	r17, r1
   12b48:	59 f4       	brne	.+22     	; 0x12b60 <set_active_device+0x180>
   12b4a:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <SS80p+0x1>
   12b4e:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <SS80p>
   12b52:	30 93 74 19 	sts	0x1974, r19	; 0x801974 <SS80s+0x1>
   12b56:	20 93 73 19 	sts	0x1973, r18	; 0x801973 <SS80s>
   12b5a:	81 e0       	ldi	r24, 0x01	; 1
   12b5c:	90 e0       	ldi	r25, 0x00	; 0
   12b5e:	1d c0       	rjmp	.+58     	; 0x12b9a <set_active_device+0x1ba>
   12b60:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12b64:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12b68:	c9 01       	movw	r24, r18
   12b6a:	81 70       	andi	r24, 0x01	; 1
   12b6c:	99 27       	eor	r25, r25
   12b6e:	20 ff       	sbrs	r18, 0
   12b70:	14 c0       	rjmp	.+40     	; 0x12b9a <set_active_device+0x1ba>
   12b72:	c8 01       	movw	r24, r16
   12b74:	ee de       	rcall	.-548    	; 0x12952 <type_to_str>
   12b76:	ed b7       	in	r30, 0x3d	; 61
   12b78:	fe b7       	in	r31, 0x3e	; 62
   12b7a:	91 87       	std	Z+9, r25	; 0x09
   12b7c:	80 87       	std	Z+8, r24	; 0x08
   12b7e:	17 83       	std	Z+7, r17	; 0x07
   12b80:	06 83       	std	Z+6, r16	; 0x06
   12b82:	d5 83       	std	Z+5, r29	; 0x05
   12b84:	c4 83       	std	Z+4, r28	; 0x04
   12b86:	87 ea       	ldi	r24, 0xA7	; 167
   12b88:	97 e1       	ldi	r25, 0x17	; 23
   12b8a:	a0 e0       	ldi	r26, 0x00	; 0
   12b8c:	81 83       	std	Z+1, r24	; 0x01
   12b8e:	92 83       	std	Z+2, r25	; 0x02
   12b90:	a3 83       	std	Z+3, r26	; 0x03
   12b92:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12b96:	80 e0       	ldi	r24, 0x00	; 0
   12b98:	90 e0       	ldi	r25, 0x00	; 0
   12b9a:	cd b7       	in	r28, 0x3d	; 61
   12b9c:	de b7       	in	r29, 0x3e	; 62
   12b9e:	29 96       	adiw	r28, 0x09	; 9
   12ba0:	e4 e0       	ldi	r30, 0x04	; 4
   12ba2:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00012ba6 <SS80_Set_Defaults>:
   12ba6:	0f 93       	push	r16
   12ba8:	1f 93       	push	r17
   12baa:	cf 93       	push	r28
   12bac:	df 93       	push	r29
   12bae:	ec 01       	movw	r28, r24
   12bb0:	82 e0       	ldi	r24, 0x02	; 2
   12bb2:	90 e0       	ldi	r25, 0x00	; 0
   12bb4:	ab de       	rcall	.-682    	; 0x1290c <find_type>
   12bb6:	97 fd       	sbrc	r25, 7
   12bb8:	6b c0       	rjmp	.+214    	; 0x12c90 <SS80_Set_Defaults+0xea>
   12bba:	2b e2       	ldi	r18, 0x2B	; 43
   12bbc:	2c 9f       	mul	r18, r28
   12bbe:	f0 01       	movw	r30, r0
   12bc0:	2d 9f       	mul	r18, r29
   12bc2:	f0 0d       	add	r31, r0
   12bc4:	11 24       	eor	r1, r1
   12bc6:	e0 50       	subi	r30, 0x00	; 0
   12bc8:	f1 4e       	sbci	r31, 0xE1	; 225
   12bca:	c7 a1       	ldd	r28, Z+39	; 0x27
   12bcc:	d0 a5       	ldd	r29, Z+40	; 0x28
   12bce:	28 9f       	mul	r18, r24
   12bd0:	f0 01       	movw	r30, r0
   12bd2:	29 9f       	mul	r18, r25
   12bd4:	f0 0d       	add	r31, r0
   12bd6:	11 24       	eor	r1, r1
   12bd8:	e0 50       	subi	r30, 0x00	; 0
   12bda:	f1 4e       	sbci	r31, 0xE1	; 225
   12bdc:	07 a1       	ldd	r16, Z+39	; 0x27
   12bde:	10 a5       	ldd	r17, Z+40	; 0x28
   12be0:	f8 01       	movw	r30, r16
   12be2:	80 81       	ld	r24, Z
   12be4:	88 83       	st	Y, r24
   12be6:	81 81       	ldd	r24, Z+1	; 0x01
   12be8:	89 83       	std	Y+1, r24	; 0x01
   12bea:	82 81       	ldd	r24, Z+2	; 0x02
   12bec:	93 81       	ldd	r25, Z+3	; 0x03
   12bee:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <stralloc>
   12bf2:	9b 83       	std	Y+3, r25	; 0x03
   12bf4:	8a 83       	std	Y+2, r24	; 0x02
   12bf6:	f8 01       	movw	r30, r16
   12bf8:	84 81       	ldd	r24, Z+4	; 0x04
   12bfa:	95 81       	ldd	r25, Z+5	; 0x05
   12bfc:	9d 83       	std	Y+5, r25	; 0x05
   12bfe:	8c 83       	std	Y+4, r24	; 0x04
   12c00:	86 81       	ldd	r24, Z+6	; 0x06
   12c02:	97 81       	ldd	r25, Z+7	; 0x07
   12c04:	9f 83       	std	Y+7, r25	; 0x07
   12c06:	8e 83       	std	Y+6, r24	; 0x06
   12c08:	80 85       	ldd	r24, Z+8	; 0x08
   12c0a:	91 85       	ldd	r25, Z+9	; 0x09
   12c0c:	99 87       	std	Y+9, r25	; 0x09
   12c0e:	88 87       	std	Y+8, r24	; 0x08
   12c10:	82 85       	ldd	r24, Z+10	; 0x0a
   12c12:	8a 87       	std	Y+10, r24	; 0x0a
   12c14:	83 85       	ldd	r24, Z+11	; 0x0b
   12c16:	8b 87       	std	Y+11, r24	; 0x0b
   12c18:	84 85       	ldd	r24, Z+12	; 0x0c
   12c1a:	95 85       	ldd	r25, Z+13	; 0x0d
   12c1c:	a6 85       	ldd	r26, Z+14	; 0x0e
   12c1e:	b7 85       	ldd	r27, Z+15	; 0x0f
   12c20:	8c 87       	std	Y+12, r24	; 0x0c
   12c22:	9d 87       	std	Y+13, r25	; 0x0d
   12c24:	ae 87       	std	Y+14, r26	; 0x0e
   12c26:	bf 87       	std	Y+15, r27	; 0x0f
   12c28:	80 89       	ldd	r24, Z+16	; 0x10
   12c2a:	91 89       	ldd	r25, Z+17	; 0x11
   12c2c:	99 8b       	std	Y+17, r25	; 0x11
   12c2e:	88 8b       	std	Y+16, r24	; 0x10
   12c30:	82 89       	ldd	r24, Z+18	; 0x12
   12c32:	8a 8b       	std	Y+18, r24	; 0x12
   12c34:	83 89       	ldd	r24, Z+19	; 0x13
   12c36:	8b 8b       	std	Y+19, r24	; 0x13
   12c38:	84 89       	ldd	r24, Z+20	; 0x14
   12c3a:	95 89       	ldd	r25, Z+21	; 0x15
   12c3c:	9d 8b       	std	Y+21, r25	; 0x15
   12c3e:	8c 8b       	std	Y+20, r24	; 0x14
   12c40:	86 89       	ldd	r24, Z+22	; 0x16
   12c42:	97 89       	ldd	r25, Z+23	; 0x17
   12c44:	9f 8b       	std	Y+23, r25	; 0x17
   12c46:	8e 8b       	std	Y+22, r24	; 0x16
   12c48:	80 8d       	ldd	r24, Z+24	; 0x18
   12c4a:	91 8d       	ldd	r25, Z+25	; 0x19
   12c4c:	99 8f       	std	Y+25, r25	; 0x19
   12c4e:	88 8f       	std	Y+24, r24	; 0x18
   12c50:	82 8d       	ldd	r24, Z+26	; 0x1a
   12c52:	93 8d       	ldd	r25, Z+27	; 0x1b
   12c54:	9b 8f       	std	Y+27, r25	; 0x1b
   12c56:	8a 8f       	std	Y+26, r24	; 0x1a
   12c58:	84 8d       	ldd	r24, Z+28	; 0x1c
   12c5a:	8c 8f       	std	Y+28, r24	; 0x1c
   12c5c:	85 8d       	ldd	r24, Z+29	; 0x1d
   12c5e:	8d 8f       	std	Y+29, r24	; 0x1d
   12c60:	87 8d       	ldd	r24, Z+31	; 0x1f
   12c62:	90 a1       	ldd	r25, Z+32	; 0x20
   12c64:	a1 a1       	ldd	r26, Z+33	; 0x21
   12c66:	b2 a1       	ldd	r27, Z+34	; 0x22
   12c68:	8f 8f       	std	Y+31, r24	; 0x1f
   12c6a:	98 a3       	std	Y+32, r25	; 0x20
   12c6c:	a9 a3       	std	Y+33, r26	; 0x21
   12c6e:	ba a3       	std	Y+34, r27	; 0x22
   12c70:	83 a1       	ldd	r24, Z+35	; 0x23
   12c72:	8b a3       	std	Y+35, r24	; 0x23
   12c74:	84 a1       	ldd	r24, Z+36	; 0x24
   12c76:	95 a1       	ldd	r25, Z+37	; 0x25
   12c78:	9d a3       	std	Y+37, r25	; 0x25
   12c7a:	8c a3       	std	Y+36, r24	; 0x24
   12c7c:	86 a1       	ldd	r24, Z+38	; 0x26
   12c7e:	97 a1       	ldd	r25, Z+39	; 0x27
   12c80:	a0 a5       	ldd	r26, Z+40	; 0x28
   12c82:	b1 a5       	ldd	r27, Z+41	; 0x29
   12c84:	8e a3       	std	Y+38, r24	; 0x26
   12c86:	9f a3       	std	Y+39, r25	; 0x27
   12c88:	a8 a7       	std	Y+40, r26	; 0x28
   12c8a:	b9 a7       	std	Y+41, r27	; 0x29
   12c8c:	82 a5       	ldd	r24, Z+42	; 0x2a
   12c8e:	8a a7       	std	Y+42, r24	; 0x2a
   12c90:	df 91       	pop	r29
   12c92:	cf 91       	pop	r28
   12c94:	1f 91       	pop	r17
   12c96:	0f 91       	pop	r16
   12c98:	08 95       	ret

00012c9a <alloc_device>:
   12c9a:	0f 93       	push	r16
   12c9c:	1f 93       	push	r17
   12c9e:	cf 93       	push	r28
   12ca0:	df 93       	push	r29
   12ca2:	ad b7       	in	r26, 0x3d	; 61
   12ca4:	be b7       	in	r27, 0x3e	; 62
   12ca6:	17 97       	sbiw	r26, 0x07	; 7
   12ca8:	0f b6       	in	r0, 0x3f	; 63
   12caa:	f8 94       	cli
   12cac:	be bf       	out	0x3e, r27	; 62
   12cae:	0f be       	out	0x3f, r0	; 63
   12cb0:	ad bf       	out	0x3d, r26	; 61
   12cb2:	8c 01       	movw	r16, r24
   12cb4:	67 de       	rcall	.-818    	; 0x12984 <find_free>
   12cb6:	ec 01       	movw	r28, r24
   12cb8:	cf 3f       	cpi	r28, 0xFF	; 255
   12cba:	8f ef       	ldi	r24, 0xFF	; 255
   12cbc:	d8 07       	cpc	r29, r24
   12cbe:	89 f4       	brne	.+34     	; 0x12ce2 <alloc_device+0x48>
   12cc0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12cc4:	80 ff       	sbrs	r24, 0
   12cc6:	a1 c0       	rjmp	.+322    	; 0x12e0a <alloc_device+0x170>
   12cc8:	ed b7       	in	r30, 0x3d	; 61
   12cca:	fe b7       	in	r31, 0x3e	; 62
   12ccc:	15 83       	std	Z+5, r17	; 0x05
   12cce:	04 83       	std	Z+4, r16	; 0x04
   12cd0:	83 e8       	ldi	r24, 0x83	; 131
   12cd2:	97 e1       	ldi	r25, 0x17	; 23
   12cd4:	a0 e0       	ldi	r26, 0x00	; 0
   12cd6:	81 83       	std	Z+1, r24	; 0x01
   12cd8:	92 83       	std	Z+2, r25	; 0x02
   12cda:	a3 83       	std	Z+3, r26	; 0x03
   12cdc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12ce0:	94 c0       	rjmp	.+296    	; 0x12e0a <alloc_device+0x170>
   12ce2:	02 30       	cpi	r16, 0x02	; 2
   12ce4:	11 05       	cpc	r17, r1
   12ce6:	e1 f1       	breq	.+120    	; 0x12d60 <alloc_device+0xc6>
   12ce8:	ec f4       	brge	.+58     	; 0x12d24 <alloc_device+0x8a>
   12cea:	01 30       	cpi	r16, 0x01	; 1
   12cec:	11 05       	cpc	r17, r1
   12cee:	09 f0       	breq	.+2      	; 0x12cf2 <alloc_device+0x58>
   12cf0:	76 c0       	rjmp	.+236    	; 0x12dde <alloc_device+0x144>
   12cf2:	8b e2       	ldi	r24, 0x2B	; 43
   12cf4:	8c 9f       	mul	r24, r28
   12cf6:	80 01       	movw	r16, r0
   12cf8:	8d 9f       	mul	r24, r29
   12cfa:	10 0d       	add	r17, r0
   12cfc:	11 24       	eor	r1, r1
   12cfe:	00 50       	subi	r16, 0x00	; 0
   12d00:	11 4e       	sbci	r17, 0xE1	; 225
   12d02:	81 e0       	ldi	r24, 0x01	; 1
   12d04:	f8 01       	movw	r30, r16
   12d06:	80 83       	st	Z, r24
   12d08:	61 e0       	ldi	r22, 0x01	; 1
   12d0a:	70 e0       	ldi	r23, 0x00	; 0
   12d0c:	85 e1       	ldi	r24, 0x15	; 21
   12d0e:	90 e0       	ldi	r25, 0x00	; 0
   12d10:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
   12d14:	f8 01       	movw	r30, r16
   12d16:	90 a7       	std	Z+40, r25	; 0x28
   12d18:	87 a3       	std	Z+39, r24	; 0x27
   12d1a:	61 e0       	ldi	r22, 0x01	; 1
   12d1c:	70 e0       	ldi	r23, 0x00	; 0
   12d1e:	88 e1       	ldi	r24, 0x18	; 24
   12d20:	90 e0       	ldi	r25, 0x00	; 0
   12d22:	57 c0       	rjmp	.+174    	; 0x12dd2 <alloc_device+0x138>
   12d24:	03 30       	cpi	r16, 0x03	; 3
   12d26:	11 05       	cpc	r17, r1
   12d28:	a1 f1       	breq	.+104    	; 0x12d92 <alloc_device+0xf8>
   12d2a:	04 30       	cpi	r16, 0x04	; 4
   12d2c:	11 05       	cpc	r17, r1
   12d2e:	09 f0       	breq	.+2      	; 0x12d32 <alloc_device+0x98>
   12d30:	56 c0       	rjmp	.+172    	; 0x12dde <alloc_device+0x144>
   12d32:	8b e2       	ldi	r24, 0x2B	; 43
   12d34:	8c 9f       	mul	r24, r28
   12d36:	80 01       	movw	r16, r0
   12d38:	8d 9f       	mul	r24, r29
   12d3a:	10 0d       	add	r17, r0
   12d3c:	11 24       	eor	r1, r1
   12d3e:	00 50       	subi	r16, 0x00	; 0
   12d40:	11 4e       	sbci	r17, 0xE1	; 225
   12d42:	84 e0       	ldi	r24, 0x04	; 4
   12d44:	f8 01       	movw	r30, r16
   12d46:	80 83       	st	Z, r24
   12d48:	61 e0       	ldi	r22, 0x01	; 1
   12d4a:	70 e0       	ldi	r23, 0x00	; 0
   12d4c:	8b e0       	ldi	r24, 0x0B	; 11
   12d4e:	90 e0       	ldi	r25, 0x00	; 0
   12d50:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
   12d54:	f8 01       	movw	r30, r16
   12d56:	90 a7       	std	Z+40, r25	; 0x28
   12d58:	87 a3       	std	Z+39, r24	; 0x27
   12d5a:	12 a6       	std	Z+42, r1	; 0x2a
   12d5c:	11 a6       	std	Z+41, r1	; 0x29
   12d5e:	55 c0       	rjmp	.+170    	; 0x12e0a <alloc_device+0x170>
   12d60:	8b e2       	ldi	r24, 0x2B	; 43
   12d62:	8c 9f       	mul	r24, r28
   12d64:	80 01       	movw	r16, r0
   12d66:	8d 9f       	mul	r24, r29
   12d68:	10 0d       	add	r17, r0
   12d6a:	11 24       	eor	r1, r1
   12d6c:	00 50       	subi	r16, 0x00	; 0
   12d6e:	11 4e       	sbci	r17, 0xE1	; 225
   12d70:	82 e0       	ldi	r24, 0x02	; 2
   12d72:	f8 01       	movw	r30, r16
   12d74:	80 83       	st	Z, r24
   12d76:	61 e0       	ldi	r22, 0x01	; 1
   12d78:	70 e0       	ldi	r23, 0x00	; 0
   12d7a:	82 e3       	ldi	r24, 0x32	; 50
   12d7c:	90 e0       	ldi	r25, 0x00	; 0
   12d7e:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
   12d82:	f8 01       	movw	r30, r16
   12d84:	90 a7       	std	Z+40, r25	; 0x28
   12d86:	87 a3       	std	Z+39, r24	; 0x27
   12d88:	61 e0       	ldi	r22, 0x01	; 1
   12d8a:	70 e0       	ldi	r23, 0x00	; 0
   12d8c:	86 e1       	ldi	r24, 0x16	; 22
   12d8e:	90 e0       	ldi	r25, 0x00	; 0
   12d90:	20 c0       	rjmp	.+64     	; 0x12dd2 <alloc_device+0x138>
   12d92:	8b e2       	ldi	r24, 0x2B	; 43
   12d94:	8c 9f       	mul	r24, r28
   12d96:	80 01       	movw	r16, r0
   12d98:	8d 9f       	mul	r24, r29
   12d9a:	10 0d       	add	r17, r0
   12d9c:	11 24       	eor	r1, r1
   12d9e:	00 50       	subi	r16, 0x00	; 0
   12da0:	11 4e       	sbci	r17, 0xE1	; 225
   12da2:	83 e0       	ldi	r24, 0x03	; 3
   12da4:	f8 01       	movw	r30, r16
   12da6:	80 83       	st	Z, r24
   12da8:	61 e0       	ldi	r22, 0x01	; 1
   12daa:	70 e0       	ldi	r23, 0x00	; 0
   12dac:	82 e3       	ldi	r24, 0x32	; 50
   12dae:	90 e0       	ldi	r25, 0x00	; 0
   12db0:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
   12db4:	f8 01       	movw	r30, r16
   12db6:	90 a7       	std	Z+40, r25	; 0x28
   12db8:	87 a3       	std	Z+39, r24	; 0x27
   12dba:	61 e0       	ldi	r22, 0x01	; 1
   12dbc:	70 e0       	ldi	r23, 0x00	; 0
   12dbe:	86 e1       	ldi	r24, 0x16	; 22
   12dc0:	90 e0       	ldi	r25, 0x00	; 0
   12dc2:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
   12dc6:	f8 01       	movw	r30, r16
   12dc8:	92 a7       	std	Z+42, r25	; 0x2a
   12dca:	81 a7       	std	Z+41, r24	; 0x29
   12dcc:	ce 01       	movw	r24, r28
   12dce:	eb de       	rcall	.-554    	; 0x12ba6 <SS80_Set_Defaults>
   12dd0:	1c c0       	rjmp	.+56     	; 0x12e0a <alloc_device+0x170>
   12dd2:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
   12dd6:	f8 01       	movw	r30, r16
   12dd8:	92 a7       	std	Z+42, r25	; 0x2a
   12dda:	81 a7       	std	Z+41, r24	; 0x29
   12ddc:	16 c0       	rjmp	.+44     	; 0x12e0a <alloc_device+0x170>
   12dde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12de2:	80 ff       	sbrs	r24, 0
   12de4:	10 c0       	rjmp	.+32     	; 0x12e06 <alloc_device+0x16c>
   12de6:	c8 01       	movw	r24, r16
   12de8:	b4 dd       	rcall	.-1176   	; 0x12952 <type_to_str>
   12dea:	ed b7       	in	r30, 0x3d	; 61
   12dec:	fe b7       	in	r31, 0x3e	; 62
   12dee:	97 83       	std	Z+7, r25	; 0x07
   12df0:	86 83       	std	Z+6, r24	; 0x06
   12df2:	15 83       	std	Z+5, r17	; 0x05
   12df4:	04 83       	std	Z+4, r16	; 0x04
   12df6:	81 e6       	ldi	r24, 0x61	; 97
   12df8:	97 e1       	ldi	r25, 0x17	; 23
   12dfa:	a0 e0       	ldi	r26, 0x00	; 0
   12dfc:	81 83       	std	Z+1, r24	; 0x01
   12dfe:	92 83       	std	Z+2, r25	; 0x02
   12e00:	a3 83       	std	Z+3, r26	; 0x03
   12e02:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   12e06:	cf ef       	ldi	r28, 0xFF	; 255
   12e08:	df ef       	ldi	r29, 0xFF	; 255
   12e0a:	ce 01       	movw	r24, r28
   12e0c:	cd b7       	in	r28, 0x3d	; 61
   12e0e:	de b7       	in	r29, 0x3e	; 62
   12e10:	27 96       	adiw	r28, 0x07	; 7
   12e12:	e4 e0       	ldi	r30, 0x04	; 4
   12e14:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00012e18 <init_Devices>:
   12e18:	cf 93       	push	r28
   12e1a:	df 93       	push	r29
   12e1c:	10 92 84 19 	sts	0x1984, r1	; 0x801984 <stack_ind+0x1>
   12e20:	10 92 83 19 	sts	0x1983, r1	; 0x801983 <stack_ind>
   12e24:	e0 e0       	ldi	r30, 0x00	; 0
   12e26:	ff e1       	ldi	r31, 0x1F	; 31
   12e28:	9f ef       	ldi	r25, 0xFF	; 255
   12e2a:	80 e2       	ldi	r24, 0x20	; 32
   12e2c:	10 82       	st	Z, r1
   12e2e:	11 82       	std	Z+1, r1	; 0x01
   12e30:	92 83       	std	Z+2, r25	; 0x02
   12e32:	13 82       	std	Z+3, r1	; 0x03
   12e34:	14 82       	std	Z+4, r1	; 0x04
   12e36:	15 82       	std	Z+5, r1	; 0x05
   12e38:	16 82       	std	Z+6, r1	; 0x06
   12e3a:	df 01       	movw	r26, r30
   12e3c:	17 96       	adiw	r26, 0x07	; 7
   12e3e:	ed 01       	movw	r28, r26
   12e40:	28 2f       	mov	r18, r24
   12e42:	19 92       	st	Y+, r1
   12e44:	2a 95       	dec	r18
   12e46:	e9 f7       	brne	.-6      	; 0x12e42 <init_Devices+0x2a>
   12e48:	10 a6       	std	Z+40, r1	; 0x28
   12e4a:	17 a2       	std	Z+39, r1	; 0x27
   12e4c:	12 a6       	std	Z+42, r1	; 0x2a
   12e4e:	11 a6       	std	Z+41, r1	; 0x29
   12e50:	bb 96       	adiw	r30, 0x2b	; 43
   12e52:	c1 e2       	ldi	r28, 0x21	; 33
   12e54:	e4 30       	cpi	r30, 0x04	; 4
   12e56:	fc 07       	cpc	r31, r28
   12e58:	49 f7       	brne	.-46     	; 0x12e2c <init_Devices+0x14>
   12e5a:	df 91       	pop	r29
   12e5c:	cf 91       	pop	r28
   12e5e:	08 95       	ret

00012e60 <push_state>:
   12e60:	20 91 83 19 	lds	r18, 0x1983	; 0x801983 <stack_ind>
   12e64:	30 91 84 19 	lds	r19, 0x1984	; 0x801984 <stack_ind+0x1>
   12e68:	25 30       	cpi	r18, 0x05	; 5
   12e6a:	31 05       	cpc	r19, r1
   12e6c:	7c f4       	brge	.+30     	; 0x12e8c <push_state+0x2c>
   12e6e:	a9 01       	movw	r20, r18
   12e70:	4f 5f       	subi	r20, 0xFF	; 255
   12e72:	5f 4f       	sbci	r21, 0xFF	; 255
   12e74:	50 93 84 19 	sts	0x1984, r21	; 0x801984 <stack_ind+0x1>
   12e78:	40 93 83 19 	sts	0x1983, r20	; 0x801983 <stack_ind>
   12e7c:	22 0f       	add	r18, r18
   12e7e:	33 1f       	adc	r19, r19
   12e80:	f9 01       	movw	r30, r18
   12e82:	e7 58       	subi	r30, 0x87	; 135
   12e84:	f6 4e       	sbci	r31, 0xE6	; 230
   12e86:	80 83       	st	Z, r24
   12e88:	91 83       	std	Z+1, r25	; 0x01
   12e8a:	08 95       	ret
   12e8c:	80 e0       	ldi	r24, 0x00	; 0
   12e8e:	90 e0       	ldi	r25, 0x00	; 0
   12e90:	08 95       	ret

00012e92 <pop_state>:
   12e92:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <stack_ind>
   12e96:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <stack_ind+0x1>
   12e9a:	18 16       	cp	r1, r24
   12e9c:	19 06       	cpc	r1, r25
   12e9e:	6c f4       	brge	.+26     	; 0x12eba <pop_state+0x28>
   12ea0:	01 97       	sbiw	r24, 0x01	; 1
   12ea2:	90 93 84 19 	sts	0x1984, r25	; 0x801984 <stack_ind+0x1>
   12ea6:	80 93 83 19 	sts	0x1983, r24	; 0x801983 <stack_ind>
   12eaa:	88 0f       	add	r24, r24
   12eac:	99 1f       	adc	r25, r25
   12eae:	fc 01       	movw	r30, r24
   12eb0:	e7 58       	subi	r30, 0x87	; 135
   12eb2:	f6 4e       	sbci	r31, 0xE6	; 230
   12eb4:	80 81       	ld	r24, Z
   12eb6:	91 81       	ldd	r25, Z+1	; 0x01
   12eb8:	08 95       	ret
   12eba:	80 e0       	ldi	r24, 0x00	; 0
   12ebc:	90 e0       	ldi	r25, 0x00	; 0
   12ebe:	08 95       	ret

00012ec0 <set_Config_Defaults>:
   12ec0:	08 95       	ret

00012ec2 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   12ec2:	0f 93       	push	r16
   12ec4:	1f 93       	push	r17
   12ec6:	cf 93       	push	r28
   12ec8:	df 93       	push	r29
   12eca:	00 d0       	rcall	.+0      	; 0x12ecc <hpdir_set_device+0xa>
   12ecc:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   12ece:	2b e2       	ldi	r18, 0x2B	; 43
   12ed0:	ac 01       	movw	r20, r24
   12ed2:	24 9f       	mul	r18, r20
   12ed4:	c0 01       	movw	r24, r0
   12ed6:	25 9f       	mul	r18, r21
   12ed8:	90 0d       	add	r25, r0
   12eda:	11 24       	eor	r1, r1
   12edc:	ec 01       	movw	r28, r24
   12ede:	c0 50       	subi	r28, 0x00	; 0
   12ee0:	d1 4e       	sbci	r29, 0xE1	; 225
   12ee2:	28 81       	ld	r18, Y
   12ee4:	23 30       	cpi	r18, 0x03	; 3
   12ee6:	a1 f5       	brne	.+104    	; 0x12f50 <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   12ee8:	ef a1       	ldd	r30, Y+39	; 0x27
   12eea:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   12eec:	20 91 84 21 	lds	r18, 0x2184	; 0x802184 <hpdir+0x80>
   12ef0:	30 91 85 21 	lds	r19, 0x2185	; 0x802185 <hpdir+0x81>
   12ef4:	35 83       	std	Z+5, r19	; 0x05
   12ef6:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   12ef8:	40 91 90 21 	lds	r20, 0x2190	; 0x802190 <hpdir+0x8c>
   12efc:	50 91 91 21 	lds	r21, 0x2191	; 0x802191 <hpdir+0x8d>
   12f00:	60 91 92 21 	lds	r22, 0x2192	; 0x802192 <hpdir+0x8e>
   12f04:	70 91 93 21 	lds	r23, 0x2193	; 0x802193 <hpdir+0x8f>
   12f08:	44 87       	std	Z+12, r20	; 0x0c
   12f0a:	55 87       	std	Z+13, r21	; 0x0d
   12f0c:	66 87       	std	Z+14, r22	; 0x0e
   12f0e:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   12f10:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <hpdir+0xa0>
   12f14:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <hpdir+0xa1>
   12f18:	31 8b       	std	Z+17, r19	; 0x11
   12f1a:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   12f1c:	17 8e       	std	Z+31, r1	; 0x1f
   12f1e:	10 a2       	std	Z+32, r1	; 0x20
   12f20:	11 a2       	std	Z+33, r1	; 0x21
   12f22:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   12f24:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   12f26:	15 a2       	std	Z+37, r1	; 0x25
   12f28:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   12f2a:	40 91 b0 21 	lds	r20, 0x21B0	; 0x8021b0 <hpdir+0xac>
   12f2e:	50 91 b1 21 	lds	r21, 0x21B1	; 0x8021b1 <hpdir+0xad>
   12f32:	60 91 b2 21 	lds	r22, 0x21B2	; 0x8021b2 <hpdir+0xae>
   12f36:	70 91 b3 21 	lds	r23, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   12f3a:	8a 01       	movw	r16, r20
   12f3c:	9b 01       	movw	r18, r22
   12f3e:	01 50       	subi	r16, 0x01	; 1
   12f40:	11 09       	sbc	r17, r1
   12f42:	21 09       	sbc	r18, r1
   12f44:	31 09       	sbc	r19, r1
   12f46:	06 a3       	std	Z+38, r16	; 0x26
   12f48:	17 a3       	std	Z+39, r17	; 0x27
   12f4a:	20 a7       	std	Z+40, r18	; 0x28
   12f4c:	31 a7       	std	Z+41, r19	; 0x29
   12f4e:	2a c0       	rjmp	.+84     	; 0x12fa4 <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   12f50:	21 30       	cpi	r18, 0x01	; 1
   12f52:	a9 f5       	brne	.+106    	; 0x12fbe <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12f54:	ef a1       	ldd	r30, Y+39	; 0x27
   12f56:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   12f58:	20 91 84 21 	lds	r18, 0x2184	; 0x802184 <hpdir+0x80>
   12f5c:	30 91 85 21 	lds	r19, 0x2185	; 0x802185 <hpdir+0x81>
   12f60:	35 83       	std	Z+5, r19	; 0x05
   12f62:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   12f64:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <hpdir+0xa0>
   12f68:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <hpdir+0xa1>
   12f6c:	37 83       	std	Z+7, r19	; 0x07
   12f6e:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   12f70:	20 91 a0 21 	lds	r18, 0x21A0	; 0x8021a0 <hpdir+0x9c>
   12f74:	30 91 a1 21 	lds	r19, 0x21A1	; 0x8021a1 <hpdir+0x9d>
   12f78:	31 87       	std	Z+9, r19	; 0x09
   12f7a:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   12f7c:	20 91 9c 21 	lds	r18, 0x219C	; 0x80219c <hpdir+0x98>
   12f80:	30 91 9d 21 	lds	r19, 0x219D	; 0x80219d <hpdir+0x99>
   12f84:	33 87       	std	Z+11, r19	; 0x0b
   12f86:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   12f88:	20 91 98 21 	lds	r18, 0x2198	; 0x802198 <hpdir+0x94>
   12f8c:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <hpdir+0x95>
   12f90:	35 87       	std	Z+13, r19	; 0x0d
   12f92:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   12f94:	40 91 b0 21 	lds	r20, 0x21B0	; 0x8021b0 <hpdir+0xac>
   12f98:	50 91 b1 21 	lds	r21, 0x21B1	; 0x8021b1 <hpdir+0xad>
   12f9c:	60 91 b2 21 	lds	r22, 0x21B2	; 0x8021b2 <hpdir+0xae>
   12fa0:	70 91 b3 21 	lds	r23, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   12fa4:	4b 83       	std	Y+3, r20	; 0x03
   12fa6:	5c 83       	std	Y+4, r21	; 0x04
   12fa8:	6d 83       	std	Y+5, r22	; 0x05
   12faa:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   12fac:	4e e1       	ldi	r20, 0x1E	; 30
   12fae:	50 e0       	ldi	r21, 0x00	; 0
   12fb0:	64 e0       	ldi	r22, 0x04	; 4
   12fb2:	71 e2       	ldi	r23, 0x21	; 33
   12fb4:	89 5f       	subi	r24, 0xF9	; 249
   12fb6:	90 4e       	sbci	r25, 0xE0	; 224
   12fb8:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <strncpy>
   12fbc:	0a c0       	rjmp	.+20     	; 0x12fd2 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   12fbe:	82 e4       	ldi	r24, 0x42	; 66
   12fc0:	97 e1       	ldi	r25, 0x17	; 23
   12fc2:	a0 e0       	ldi	r26, 0x00	; 0
   12fc4:	ed b7       	in	r30, 0x3d	; 61
   12fc6:	fe b7       	in	r31, 0x3e	; 62
   12fc8:	81 83       	std	Z+1, r24	; 0x01
   12fca:	92 83       	std	Z+2, r25	; 0x02
   12fcc:	a3 83       	std	Z+3, r26	; 0x03
   12fce:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }

}
   12fd2:	cd b7       	in	r28, 0x3d	; 61
   12fd4:	de b7       	in	r29, 0x3e	; 62
   12fd6:	23 96       	adiw	r28, 0x03	; 3
   12fd8:	e4 e0       	ldi	r30, 0x04	; 4
   12fda:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00012fde <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   12fde:	cf 93       	push	r28
   12fe0:	df 93       	push	r29
   12fe2:	ec 01       	movw	r28, r24
   12fe4:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   12fe6:	41 e0       	ldi	r20, 0x01	; 1
   12fe8:	50 e0       	ldi	r21, 0x00	; 0
   12fea:	60 e0       	ldi	r22, 0x00	; 0
   12fec:	70 e0       	ldi	r23, 0x00	; 0
   12fee:	d9 d6       	rcall	.+3506   	; 0x13da2 <hpdir_find_drive>
   12ff0:	89 2b       	or	r24, r25
        hpdir_set_device(index);
   12ff2:	11 f0       	breq	.+4      	; 0x12ff8 <hpdir_set_parameters+0x1a>
   12ff4:	ce 01       	movw	r24, r28
}
   12ff6:	65 df       	rcall	.-310    	; 0x12ec2 <hpdir_set_device>
   12ff8:	df 91       	pop	r29
   12ffa:	cf 91       	pop	r28
   12ffc:	08 95       	ret

00012ffe <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   12ffe:	4f 92       	push	r4
   13000:	5f 92       	push	r5
   13002:	6f 92       	push	r6
   13004:	7f 92       	push	r7
   13006:	8f 92       	push	r8
   13008:	af 92       	push	r10
   1300a:	bf 92       	push	r11
   1300c:	cf 92       	push	r12
   1300e:	df 92       	push	r13
   13010:	ef 92       	push	r14
   13012:	0f 93       	push	r16
   13014:	1f 93       	push	r17
   13016:	cf 93       	push	r28
   13018:	df 93       	push	r29
   1301a:	00 d0       	rcall	.+0      	; 0x1301c <Post_Config+0x1e>
   1301c:	00 d0       	rcall	.+0      	; 0x1301e <Post_Config+0x20>
   1301e:	1f 92       	push	r1
   13020:	c0 e0       	ldi	r28, 0x00	; 0
   13022:	df e1       	ldi	r29, 0x1F	; 31
   13024:	84 e0       	ldi	r24, 0x04	; 4
   13026:	48 2e       	mov	r4, r24
   13028:	81 e2       	ldi	r24, 0x21	; 33
   1302a:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   1302c:	a1 2c       	mov	r10, r1
   1302e:	bb 24       	eor	r11, r11
   13030:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13032:	85 ed       	ldi	r24, 0xD5	; 213
   13034:	96 e1       	ldi	r25, 0x16	; 22
   13036:	6c 01       	movw	r12, r24
   13038:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   1303a:	8c e0       	ldi	r24, 0x0C	; 12
   1303c:	97 e1       	ldi	r25, 0x17	; 23
   1303e:	3c 01       	movw	r6, r24
   13040:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13042:	88 81       	ld	r24, Y
   13044:	88 23       	and	r24, r24
   13046:	09 f4       	brne	.+2      	; 0x1304a <Post_Config+0x4c>
   13048:	57 c0       	rjmp	.+174    	; 0x130f8 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   1304a:	83 30       	cpi	r24, 0x03	; 3
   1304c:	f9 f4       	brne	.+62     	; 0x1308c <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1304e:	0f a1       	ldd	r16, Y+39	; 0x27
   13050:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13052:	f8 01       	movw	r30, r16
   13054:	80 89       	ldd	r24, Z+16	; 0x10
   13056:	91 89       	ldd	r25, Z+17	; 0x11
   13058:	81 15       	cp	r24, r1
   1305a:	91 40       	sbci	r25, 0x01	; 1
   1305c:	59 f0       	breq	.+22     	; 0x13074 <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   1305e:	ce 01       	movw	r24, r28
   13060:	07 96       	adiw	r24, 0x07	; 7
   13062:	ed b7       	in	r30, 0x3d	; 61
   13064:	fe b7       	in	r31, 0x3e	; 62
   13066:	95 83       	std	Z+5, r25	; 0x05
   13068:	84 83       	std	Z+4, r24	; 0x04
   1306a:	61 82       	std	Z+1, r6	; 0x01
   1306c:	72 82       	std	Z+2, r7	; 0x02
   1306e:	83 82       	std	Z+3, r8	; 0x03
   13070:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   13074:	f8 01       	movw	r30, r16
   13076:	86 a1       	ldd	r24, Z+38	; 0x26
   13078:	97 a1       	ldd	r25, Z+39	; 0x27
   1307a:	a0 a5       	ldd	r26, Z+40	; 0x28
   1307c:	b1 a5       	ldd	r27, Z+41	; 0x29
   1307e:	01 96       	adiw	r24, 0x01	; 1
   13080:	a1 1d       	adc	r26, r1
   13082:	b1 1d       	adc	r27, r1
   13084:	8b 83       	std	Y+3, r24	; 0x03
   13086:	9c 83       	std	Y+4, r25	; 0x04
   13088:	ad 83       	std	Y+5, r26	; 0x05
   1308a:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1308c:	88 81       	ld	r24, Y
   1308e:	81 30       	cpi	r24, 0x01	; 1
   13090:	99 f5       	brne	.+102    	; 0x130f8 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   13092:	0f a1       	ldd	r16, Y+39	; 0x27
   13094:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13096:	f8 01       	movw	r30, r16
   13098:	86 81       	ldd	r24, Z+6	; 0x06
   1309a:	97 81       	ldd	r25, Z+7	; 0x07
   1309c:	81 15       	cp	r24, r1
   1309e:	91 40       	sbci	r25, 0x01	; 1
   130a0:	71 f0       	breq	.+28     	; 0x130be <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   130a2:	f8 01       	movw	r30, r16
   130a4:	b7 82       	std	Z+7, r11	; 0x07
   130a6:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   130a8:	ce 01       	movw	r24, r28
   130aa:	07 96       	adiw	r24, 0x07	; 7
   130ac:	ed b7       	in	r30, 0x3d	; 61
   130ae:	fe b7       	in	r31, 0x3e	; 62
   130b0:	95 83       	std	Z+5, r25	; 0x05
   130b2:	84 83       	std	Z+4, r24	; 0x04
   130b4:	c1 82       	std	Z+1, r12	; 0x01
   130b6:	d2 82       	std	Z+2, r13	; 0x02
   130b8:	e3 82       	std	Z+3, r14	; 0x03
   130ba:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   130be:	f8 01       	movw	r30, r16
   130c0:	20 85       	ldd	r18, Z+8	; 0x08
   130c2:	31 85       	ldd	r19, Z+9	; 0x09
   130c4:	82 85       	ldd	r24, Z+10	; 0x0a
   130c6:	93 85       	ldd	r25, Z+11	; 0x0b
   130c8:	28 9f       	mul	r18, r24
   130ca:	a0 01       	movw	r20, r0
   130cc:	29 9f       	mul	r18, r25
   130ce:	50 0d       	add	r21, r0
   130d0:	38 9f       	mul	r19, r24
   130d2:	50 0d       	add	r21, r0
   130d4:	11 24       	eor	r1, r1
   130d6:	24 85       	ldd	r18, Z+12	; 0x0c
   130d8:	35 85       	ldd	r19, Z+13	; 0x0d
   130da:	42 9f       	mul	r20, r18
   130dc:	c0 01       	movw	r24, r0
   130de:	43 9f       	mul	r20, r19
   130e0:	90 0d       	add	r25, r0
   130e2:	52 9f       	mul	r21, r18
   130e4:	90 0d       	add	r25, r0
   130e6:	11 24       	eor	r1, r1
   130e8:	09 2e       	mov	r0, r25
   130ea:	00 0c       	add	r0, r0
   130ec:	aa 0b       	sbc	r26, r26
   130ee:	bb 0b       	sbc	r27, r27
   130f0:	8b 83       	std	Y+3, r24	; 0x03
   130f2:	9c 83       	std	Y+4, r25	; 0x04
   130f4:	ad 83       	std	Y+5, r26	; 0x05
   130f6:	be 83       	std	Y+6, r27	; 0x06
   130f8:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   130fa:	4c 16       	cp	r4, r28
   130fc:	5d 06       	cpc	r5, r29
   130fe:	09 f0       	breq	.+2      	; 0x13102 <Post_Config+0x104>
   13100:	a0 cf       	rjmp	.-192    	; 0x13042 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   13102:	0f 90       	pop	r0
   13104:	0f 90       	pop	r0
   13106:	0f 90       	pop	r0
   13108:	0f 90       	pop	r0
   1310a:	0f 90       	pop	r0
   1310c:	df 91       	pop	r29
   1310e:	cf 91       	pop	r28
   13110:	1f 91       	pop	r17
   13112:	0f 91       	pop	r16
   13114:	ef 90       	pop	r14
   13116:	df 90       	pop	r13
   13118:	cf 90       	pop	r12
   1311a:	bf 90       	pop	r11
   1311c:	af 90       	pop	r10
   1311e:	8f 90       	pop	r8
   13120:	7f 90       	pop	r7
   13122:	6f 90       	pop	r6
   13124:	5f 90       	pop	r5
   13126:	4f 90       	pop	r4
   13128:	08 95       	ret

0001312a <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   1312a:	af e1       	ldi	r26, 0x1F	; 31
   1312c:	b1 e0       	ldi	r27, 0x01	; 1
   1312e:	eb e9       	ldi	r30, 0x9B	; 155
   13130:	f8 e9       	ldi	r31, 0x98	; 152
   13132:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   13136:	8c 01       	movw	r16, r24

    printf("Reading: %s\n", name);
   13138:	6f de       	rcall	.-802    	; 0x12e18 <init_Devices>
   1313a:	ed b7       	in	r30, 0x3d	; 61
   1313c:	fe b7       	in	r31, 0x3e	; 62
   1313e:	15 83       	std	Z+5, r17	; 0x05
   13140:	04 83       	std	Z+4, r16	; 0x04
   13142:	88 eb       	ldi	r24, 0xB8	; 184
   13144:	9c e1       	ldi	r25, 0x1C	; 28
   13146:	a0 e0       	ldi	r26, 0x00	; 0
   13148:	81 83       	std	Z+1, r24	; 0x01
   1314a:	92 83       	std	Z+2, r25	; 0x02
   1314c:	a3 83       	std	Z+3, r26	; 0x03
   1314e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    cfg = fopen(name, "rb");
   13152:	69 ef       	ldi	r22, 0xF9	; 249
   13154:	78 e0       	ldi	r23, 0x08	; 8
   13156:	c8 01       	movw	r24, r16
   13158:	0e 94 b6 7b 	call	0xf76c	; 0xf76c <fopen>
   1315c:	c4 5f       	subi	r28, 0xF4	; 244
   1315e:	de 4f       	sbci	r29, 0xFE	; 254
   13160:	99 83       	std	Y+1, r25	; 0x01
   13162:	88 83       	st	Y, r24
   13164:	cc 50       	subi	r28, 0x0C	; 12
    if(cfg == NULL)
   13166:	d1 40       	sbci	r29, 0x01	; 1
   13168:	89 2b       	or	r24, r25
   1316a:	09 f4       	brne	.+2      	; 0x1316e <Read_Config+0x44>
   1316c:	59 c0       	rjmp	.+178    	; 0x13220 <Read_Config+0xf6>
   1316e:	41 2c       	mov	r4, r1
   13170:	51 2c       	mov	r5, r1
   13172:	c1 2c       	mov	r12, r1
   13174:	d1 2c       	mov	r13, r1
   13176:	c8 5f       	subi	r28, 0xF8	; 248
   13178:	de 4f       	sbci	r29, 0xFE	; 254
   1317a:	19 82       	std	Y+1, r1	; 0x01
   1317c:	18 82       	st	Y, r1
   1317e:	c8 50       	subi	r28, 0x08	; 8
   13180:	d1 40       	sbci	r29, 0x01	; 1
   13182:	61 2c       	mov	r6, r1
   13184:	71 2c       	mov	r7, r1
   13186:	c6 5f       	subi	r28, 0xF6	; 246
   13188:	de 4f       	sbci	r29, 0xFE	; 254
   1318a:	19 82       	std	Y+1, r1	; 0x01
   1318c:	18 82       	st	Y, r1
   1318e:	ca 50       	subi	r28, 0x0A	; 10
   13190:	d1 40       	sbci	r29, 0x01	; 1
   13192:	e1 2c       	mov	r14, r1
   13194:	f1 2c       	mov	r15, r1
   13196:	21 2c       	mov	r2, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13198:	31 2c       	mov	r3, r1
   1319a:	87 e0       	ldi	r24, 0x07	; 7
   1319c:	9a e1       	ldi	r25, 0x1A	; 26
   1319e:	9c 01       	movw	r18, r24
   131a0:	40 e0       	ldi	r20, 0x00	; 0
   131a2:	c2 5f       	subi	r28, 0xF2	; 242
   131a4:	de 4f       	sbci	r29, 0xFE	; 254
   131a6:	28 83       	st	Y, r18
   131a8:	39 83       	std	Y+1, r19	; 0x01
   131aa:	4a 83       	std	Y+2, r20	; 0x02
   131ac:	ce 50       	subi	r28, 0x0E	; 14
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   131ae:	d1 40       	sbci	r29, 0x01	; 1
   131b0:	89 e2       	ldi	r24, 0x29	; 41
   131b2:	9a e1       	ldi	r25, 0x1A	; 26
   131b4:	9c 01       	movw	r18, r24
   131b6:	40 e0       	ldi	r20, 0x00	; 0
   131b8:	cf 5e       	subi	r28, 0xEF	; 239
   131ba:	de 4f       	sbci	r29, 0xFE	; 254
   131bc:	28 83       	st	Y, r18
   131be:	39 83       	std	Y+1, r19	; 0x01
   131c0:	4a 83       	std	Y+2, r20	; 0x02
   131c2:	c1 51       	subi	r28, 0x11	; 17
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   131c4:	d1 40       	sbci	r29, 0x01	; 1
   131c6:	89 e5       	ldi	r24, 0x59	; 89
   131c8:	9a e1       	ldi	r25, 0x1A	; 26
   131ca:	9c 01       	movw	r18, r24
   131cc:	40 e0       	ldi	r20, 0x00	; 0
   131ce:	cc 5e       	subi	r28, 0xEC	; 236
   131d0:	de 4f       	sbci	r29, 0xFE	; 254
   131d2:	28 83       	st	Y, r18
   131d4:	39 83       	std	Y+1, r19	; 0x01
   131d6:	4a 83       	std	Y+2, r20	; 0x02
   131d8:	c4 51       	subi	r28, 0x14	; 20
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   131da:	d1 40       	sbci	r29, 0x01	; 1
   131dc:	88 e8       	ldi	r24, 0x88	; 136
   131de:	9a e1       	ldi	r25, 0x1A	; 26
   131e0:	9c 01       	movw	r18, r24
   131e2:	40 e0       	ldi	r20, 0x00	; 0
   131e4:	c9 5e       	subi	r28, 0xE9	; 233
   131e6:	de 4f       	sbci	r29, 0xFE	; 254
   131e8:	28 83       	st	Y, r18
   131ea:	39 83       	std	Y+1, r19	; 0x01
   131ec:	4a 83       	std	Y+2, r20	; 0x02
   131ee:	c7 51       	subi	r28, 0x17	; 23
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   131f0:	d1 40       	sbci	r29, 0x01	; 1
   131f2:	88 eb       	ldi	r24, 0xB8	; 184
   131f4:	9a e1       	ldi	r25, 0x1A	; 26
   131f6:	9c 01       	movw	r18, r24
   131f8:	40 e0       	ldi	r20, 0x00	; 0
   131fa:	c6 5e       	subi	r28, 0xE6	; 230
   131fc:	de 4f       	sbci	r29, 0xFE	; 254
   131fe:	28 83       	st	Y, r18
   13200:	39 83       	std	Y+1, r19	; 0x01
   13202:	4a 83       	std	Y+2, r20	; 0x02
   13204:	ca 51       	subi	r28, 0x1A	; 26
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13206:	d1 40       	sbci	r29, 0x01	; 1
   13208:	86 ee       	ldi	r24, 0xE6	; 230
   1320a:	9a e1       	ldi	r25, 0x1A	; 26
   1320c:	9c 01       	movw	r18, r24
   1320e:	40 e0       	ldi	r20, 0x00	; 0
   13210:	c3 5e       	subi	r28, 0xE3	; 227
   13212:	de 4f       	sbci	r29, 0xFE	; 254
   13214:	28 83       	st	Y, r18
   13216:	39 83       	std	Y+1, r19	; 0x01
   13218:	4a 83       	std	Y+2, r20	; 0x02
   1321a:	cd 51       	subi	r28, 0x1D	; 29
   1321c:	d1 40       	sbci	r29, 0x01	; 1
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   1321e:	26 c0       	rjmp	.+76     	; 0x1326c <Read_Config+0x142>
   13220:	83 e5       	ldi	r24, 0x53	; 83
   13222:	9e e0       	ldi	r25, 0x0E	; 14
   13224:	0e 94 e7 75 	call	0xebce	; 0xebce <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13228:	ed b7       	in	r30, 0x3d	; 61
   1322a:	fe b7       	in	r31, 0x3e	; 62
   1322c:	15 83       	std	Z+5, r17	; 0x05
   1322e:	04 83       	std	Z+4, r16	; 0x04
   13230:	8a e9       	ldi	r24, 0x9A	; 154
   13232:	9c e1       	ldi	r25, 0x1C	; 28
   13234:	a0 e0       	ldi	r26, 0x00	; 0
   13236:	81 83       	std	Z+1, r24	; 0x01
   13238:	92 83       	std	Z+2, r25	; 0x02
   1323a:	a3 83       	std	Z+3, r26	; 0x03
   1323c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        set_Config_Defaults();
        return(errors);
   13240:	81 e0       	ldi	r24, 0x01	; 1
   13242:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13244:	95 c3       	rjmp	.+1834   	; 0x13970 <Read_Config+0x846>
   13246:	ff ef       	ldi	r31, 0xFF	; 255
   13248:	4f 1a       	sub	r4, r31

        ptr = get_token(str, token, sizeof(token)-2);
   1324a:	5f 0a       	sbc	r5, r31
   1324c:	4e e7       	ldi	r20, 0x7E	; 126
   1324e:	50 e0       	ldi	r21, 0x00	; 0
   13250:	9e 01       	movw	r18, r28
   13252:	28 5f       	subi	r18, 0xF8	; 248
   13254:	3f 4f       	sbci	r19, 0xFF	; 255
   13256:	49 01       	movw	r8, r18
   13258:	b9 01       	movw	r22, r18
   1325a:	ce 01       	movw	r24, r28
   1325c:	88 57       	subi	r24, 0x78	; 120
   1325e:	9f 4f       	sbci	r25, 0xFF	; 255
   13260:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13264:	5c 01       	movw	r10, r24
   13266:	88 85       	ldd	r24, Y+8	; 0x08
   13268:	81 11       	cpse	r24, r1
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1326a:	10 c0       	rjmp	.+32     	; 0x1328c <Read_Config+0x162>
   1326c:	c4 5f       	subi	r28, 0xF4	; 244
   1326e:	de 4f       	sbci	r29, 0xFE	; 254
   13270:	48 81       	ld	r20, Y
   13272:	59 81       	ldd	r21, Y+1	; 0x01
   13274:	cc 50       	subi	r28, 0x0C	; 12
   13276:	d1 40       	sbci	r29, 0x01	; 1
   13278:	6e e7       	ldi	r22, 0x7E	; 126
   1327a:	70 e0       	ldi	r23, 0x00	; 0
   1327c:	ce 01       	movw	r24, r28
   1327e:	88 57       	subi	r24, 0x78	; 120
   13280:	9f 4f       	sbci	r25, 0xFF	; 255
   13282:	0e 94 ce 73 	call	0xe79c	; 0xe79c <fgets>
   13286:	89 2b       	or	r24, r25
   13288:	f1 f6       	brne	.-68     	; 0x13246 <Read_Config+0x11c>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   1328a:	32 c3       	rjmp	.+1636   	; 0x138f0 <Read_Config+0x7c6>
   1328c:	83 32       	cpi	r24, 0x23	; 35
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   1328e:	71 f3       	breq	.-36     	; 0x1326c <Read_Config+0x142>
   13290:	c4 01       	movw	r24, r8
   13292:	0e 94 49 90 	call	0x12092	; 0x12092 <tok_index>
   13296:	8f 3f       	cpi	r24, 0xFF	; 255
   13298:	3f ef       	ldi	r19, 0xFF	; 255
   1329a:	93 07       	cpc	r25, r19
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   1329c:	49 f4       	brne	.+18     	; 0x132b0 <Read_Config+0x186>
   1329e:	ed b7       	in	r30, 0x3d	; 61
   132a0:	fe b7       	in	r31, 0x3e	; 62
   132a2:	57 82       	std	Z+7, r5	; 0x07
   132a4:	46 82       	std	Z+6, r4	; 0x06
   132a6:	95 82       	std	Z+5, r9	; 0x05
   132a8:	84 82       	std	Z+4, r8	; 0x04
   132aa:	88 e7       	ldi	r24, 0x78	; 120
   132ac:	9c e1       	ldi	r25, 0x1C	; 28
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   132ae:	c9 c0       	rjmp	.+402    	; 0x13442 <Read_Config+0x318>
   132b0:	88 0f       	add	r24, r24
   132b2:	99 1f       	adc	r25, r25
   132b4:	88 0f       	add	r24, r24
   132b6:	99 1f       	adc	r25, r25
   132b8:	fc 01       	movw	r30, r24
   132ba:	ec 53       	subi	r30, 0x3C	; 60
   132bc:	fe 4f       	sbci	r31, 0xFE	; 254
   132be:	02 81       	ldd	r16, Z+2	; 0x02

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   132c0:	13 81       	ldd	r17, Z+3	; 0x03
   132c2:	4e e7       	ldi	r20, 0x7E	; 126
   132c4:	50 e0       	ldi	r21, 0x00	; 0
   132c6:	b4 01       	movw	r22, r8
   132c8:	c5 01       	movw	r24, r10
   132ca:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        if(MATCH(token,"="))
   132ce:	5c 01       	movw	r10, r24
   132d0:	66 e6       	ldi	r22, 0x66	; 102
   132d2:	7e e0       	ldi	r23, 0x0E	; 14
   132d4:	c4 01       	movw	r24, r8
   132d6:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   132da:	89 2b       	or	r24, r25
            ptr = get_token(ptr, token, sizeof(token)-2);
   132dc:	39 f0       	breq	.+14     	; 0x132ec <Read_Config+0x1c2>
   132de:	4e e7       	ldi	r20, 0x7E	; 126
   132e0:	50 e0       	ldi	r21, 0x00	; 0
   132e2:	b4 01       	movw	r22, r8
   132e4:	c5 01       	movw	r24, r10
   132e6:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        val.l = get_value(token);
   132ea:	5c 01       	movw	r10, r24
   132ec:	c4 01       	movw	r24, r8
   132ee:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   132f2:	01 31       	cpi	r16, 0x11	; 17
        {
            state = pop_state();
   132f4:	11 05       	cpc	r17, r1
   132f6:	19 f4       	brne	.+6      	; 0x132fe <Read_Config+0x1d4>
   132f8:	cc dd       	rcall	.-1128   	; 0x12e92 <pop_state>
            continue;
   132fa:	1c 01       	movw	r2, r24
        }

        switch(state)
   132fc:	b7 cf       	rjmp	.-146    	; 0x1326c <Read_Config+0x142>
   132fe:	30 e1       	ldi	r19, 0x10	; 16
   13300:	23 16       	cp	r2, r19
   13302:	31 04       	cpc	r3, r1
   13304:	08 f0       	brcs	.+2      	; 0x13308 <Read_Config+0x1de>
   13306:	de c2       	rjmp	.+1468   	; 0x138c4 <Read_Config+0x79a>
   13308:	f1 01       	movw	r30, r2
   1330a:	e0 53       	subi	r30, 0x30	; 48
   1330c:	ff 4f       	sbci	r31, 0xFF	; 255
   1330e:	0c 94 93 df 	jmp	0x1bf26	; 0x1bf26 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13312:	0e 30       	cpi	r16, 0x0E	; 14
   13314:	11 05       	cpc	r17, r1
   13316:	09 f4       	brne	.+2      	; 0x1331a <Read_Config+0x1f0>
   13318:	87 c0       	rjmp	.+270    	; 0x13428 <Read_Config+0x2fe>
   1331a:	44 f4       	brge	.+16     	; 0x1332c <Read_Config+0x202>
   1331c:	02 30       	cpi	r16, 0x02	; 2
   1331e:	11 05       	cpc	r17, r1
   13320:	09 f4       	brne	.+2      	; 0x13324 <Read_Config+0x1fa>
   13322:	41 c0       	rjmp	.+130    	; 0x133a6 <Read_Config+0x27c>
   13324:	0c 30       	cpi	r16, 0x0C	; 12
   13326:	11 05       	cpc	r17, r1
   13328:	09 f1       	breq	.+66     	; 0x1336c <Read_Config+0x242>
   1332a:	83 c0       	rjmp	.+262    	; 0x13432 <Read_Config+0x308>
   1332c:	03 32       	cpi	r16, 0x23	; 35
   1332e:	11 05       	cpc	r17, r1
   13330:	e9 f0       	breq	.+58     	; 0x1336c <Read_Config+0x242>
   13332:	04 32       	cpi	r16, 0x24	; 36
   13334:	11 05       	cpc	r17, r1
   13336:	29 f0       	breq	.+10     	; 0x13342 <Read_Config+0x218>
   13338:	00 32       	cpi	r16, 0x20	; 32
   1333a:	11 05       	cpc	r17, r1
   1333c:	09 f0       	breq	.+2      	; 0x13340 <Read_Config+0x216>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   1333e:	79 c0       	rjmp	.+242    	; 0x13432 <Read_Config+0x308>
   13340:	55 c0       	rjmp	.+170    	; 0x133ec <Read_Config+0x2c2>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13342:	80 e0       	ldi	r24, 0x00	; 0
   13344:	90 e0       	ldi	r25, 0x00	; 0
   13346:	8c dd       	rcall	.-1256   	; 0x12e60 <push_state>
   13348:	82 e0       	ldi	r24, 0x02	; 2
   1334a:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   1334c:	a6 dc       	rcall	.-1716   	; 0x12c9a <alloc_device>
   1334e:	6c 01       	movw	r12, r24
   13350:	01 96       	adiw	r24, 0x01	; 1
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13352:	09 f4       	brne	.+2      	; 0x13356 <Read_Config+0x22c>
   13354:	8b cf       	rjmp	.-234    	; 0x1326c <Read_Config+0x142>
   13356:	8b e2       	ldi	r24, 0x2B	; 43
   13358:	8c 9d       	mul	r24, r12
   1335a:	f0 01       	movw	r30, r0
   1335c:	8d 9d       	mul	r24, r13
   1335e:	f0 0d       	add	r31, r0
   13360:	11 24       	eor	r1, r1
   13362:	e0 50       	subi	r30, 0x00	; 0
   13364:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13366:	67 a0       	ldd	r6, Z+39	; 0x27
   13368:	70 a4       	ldd	r7, Z+40	; 0x28
   1336a:	19 c0       	rjmp	.+50     	; 0x1339e <Read_Config+0x274>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   1336c:	80 e0       	ldi	r24, 0x00	; 0
   1336e:	90 e0       	ldi	r25, 0x00	; 0
   13370:	77 dd       	rcall	.-1298   	; 0x12e60 <push_state>
   13372:	83 e0       	ldi	r24, 0x03	; 3
   13374:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   13376:	91 dc       	rcall	.-1758   	; 0x12c9a <alloc_device>
   13378:	6c 01       	movw	r12, r24
   1337a:	8f ef       	ldi	r24, 0xFF	; 255
   1337c:	c8 16       	cp	r12, r24
   1337e:	d8 06       	cpc	r13, r24
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13380:	09 f4       	brne	.+2      	; 0x13384 <Read_Config+0x25a>
   13382:	74 cf       	rjmp	.-280    	; 0x1326c <Read_Config+0x142>
   13384:	8b e2       	ldi	r24, 0x2B	; 43
   13386:	8c 9d       	mul	r24, r12
   13388:	f0 01       	movw	r30, r0
   1338a:	8d 9d       	mul	r24, r13
   1338c:	f0 0d       	add	r31, r0
   1338e:	11 24       	eor	r1, r1
   13390:	e0 50       	subi	r30, 0x00	; 0
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   13392:	f1 4e       	sbci	r31, 0xE1	; 225
   13394:	67 a0       	ldd	r6, Z+39	; 0x27
   13396:	70 a4       	ldd	r7, Z+40	; 0x28
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13398:	b4 01       	movw	r22, r8
   1339a:	c6 01       	movw	r24, r12
   1339c:	20 de       	rcall	.-960    	; 0x12fde <hpdir_set_parameters>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   1339e:	22 24       	eor	r2, r2
   133a0:	23 94       	inc	r2
   133a2:	31 2c       	mov	r3, r1
   133a4:	63 cf       	rjmp	.-314    	; 0x1326c <Read_Config+0x142>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   133a6:	80 e0       	ldi	r24, 0x00	; 0
   133a8:	90 e0       	ldi	r25, 0x00	; 0
   133aa:	5a dd       	rcall	.-1356   	; 0x12e60 <push_state>
   133ac:	81 e0       	ldi	r24, 0x01	; 1
   133ae:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   133b0:	74 dc       	rcall	.-1816   	; 0x12c9a <alloc_device>
   133b2:	6c 01       	movw	r12, r24
   133b4:	9f ef       	ldi	r25, 0xFF	; 255
   133b6:	c9 16       	cp	r12, r25
   133b8:	d9 06       	cpc	r13, r25
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   133ba:	09 f4       	brne	.+2      	; 0x133be <Read_Config+0x294>
   133bc:	57 cf       	rjmp	.-338    	; 0x1326c <Read_Config+0x142>
   133be:	8b e2       	ldi	r24, 0x2B	; 43
   133c0:	8c 9d       	mul	r24, r12
   133c2:	f0 01       	movw	r30, r0
   133c4:	8d 9d       	mul	r24, r13
   133c6:	f0 0d       	add	r31, r0
   133c8:	11 24       	eor	r1, r1
   133ca:	e0 50       	subi	r30, 0x00	; 0
   133cc:	f1 4e       	sbci	r31, 0xE1	; 225
   133ce:	a7 a1       	ldd	r26, Z+39	; 0x27
   133d0:	b0 a5       	ldd	r27, Z+40	; 0x28
   133d2:	c8 5f       	subi	r28, 0xF8	; 248
   133d4:	de 4f       	sbci	r29, 0xFE	; 254
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   133d6:	b9 83       	std	Y+1, r27	; 0x01
   133d8:	a8 83       	st	Y, r26
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   133da:	c8 50       	subi	r28, 0x08	; 8
   133dc:	d1 40       	sbci	r29, 0x01	; 1
   133de:	b4 01       	movw	r22, r8
   133e0:	c6 01       	movw	r24, r12
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   133e2:	fd dd       	rcall	.-1030   	; 0x12fde <hpdir_set_parameters>
   133e4:	aa e0       	ldi	r26, 0x0A	; 10
   133e6:	2a 2e       	mov	r2, r26
   133e8:	31 2c       	mov	r3, r1
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   133ea:	40 cf       	rjmp	.-384    	; 0x1326c <Read_Config+0x142>
   133ec:	80 e0       	ldi	r24, 0x00	; 0
   133ee:	90 e0       	ldi	r25, 0x00	; 0
   133f0:	37 dd       	rcall	.-1426   	; 0x12e60 <push_state>
   133f2:	84 e0       	ldi	r24, 0x04	; 4
                        if(index == -1)
   133f4:	90 e0       	ldi	r25, 0x00	; 0
   133f6:	51 dc       	rcall	.-1886   	; 0x12c9a <alloc_device>
   133f8:	6c 01       	movw	r12, r24
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   133fa:	01 96       	adiw	r24, 0x01	; 1
   133fc:	09 f4       	brne	.+2      	; 0x13400 <Read_Config+0x2d6>
   133fe:	36 cf       	rjmp	.-404    	; 0x1326c <Read_Config+0x142>
   13400:	8b e2       	ldi	r24, 0x2B	; 43
   13402:	8c 9d       	mul	r24, r12
   13404:	f0 01       	movw	r30, r0
   13406:	8d 9d       	mul	r24, r13
   13408:	f0 0d       	add	r31, r0
   1340a:	11 24       	eor	r1, r1
   1340c:	e0 50       	subi	r30, 0x00	; 0
   1340e:	f1 4e       	sbci	r31, 0xE1	; 225
   13410:	27 a1       	ldd	r18, Z+39	; 0x27
   13412:	30 a5       	ldd	r19, Z+40	; 0x28
   13414:	c6 5f       	subi	r28, 0xF6	; 246
   13416:	de 4f       	sbci	r29, 0xFE	; 254
   13418:	39 83       	std	Y+1, r19	; 0x01
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   1341a:	28 83       	st	Y, r18
   1341c:	ca 50       	subi	r28, 0x0A	; 10
   1341e:	d1 40       	sbci	r29, 0x01	; 1
   13420:	fe e0       	ldi	r31, 0x0E	; 14
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13422:	2f 2e       	mov	r2, r31
   13424:	31 2c       	mov	r3, r1
   13426:	22 cf       	rjmp	.-444    	; 0x1326c <Read_Config+0x142>
   13428:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                        break;
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   1342c:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13430:	1d cf       	rjmp	.-454    	; 0x1326c <Read_Config+0x142>
   13432:	ed b7       	in	r30, 0x3d	; 61
   13434:	fe b7       	in	r31, 0x3e	; 62
   13436:	57 82       	std	Z+7, r5	; 0x07
   13438:	46 82       	std	Z+6, r4	; 0x06
   1343a:	b5 82       	std	Z+5, r11	; 0x05
   1343c:	a4 82       	std	Z+4, r10	; 0x04
   1343e:	86 e5       	ldi	r24, 0x56	; 86
   13440:	9c e1       	ldi	r25, 0x1C	; 28
   13442:	a0 e0       	ldi	r26, 0x00	; 0
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13444:	81 83       	std	Z+1, r24	; 0x01
   13446:	92 83       	std	Z+2, r25	; 0x02
   13448:	a3 83       	std	Z+3, r26	; 0x03
                {
                    push_state(state);
   1344a:	4c c2       	rjmp	.+1176   	; 0x138e4 <Read_Config+0x7ba>
   1344c:	09 30       	cpi	r16, 0x09	; 9
   1344e:	11 05       	cpc	r17, r1
   13450:	39 f4       	brne	.+14     	; 0x13460 <Read_Config+0x336>
                    state = PRINTER_CONFIG;
   13452:	8e e0       	ldi	r24, 0x0E	; 14
   13454:	90 e0       	ldi	r25, 0x00	; 0
   13456:	04 dd       	rcall	.-1528   	; 0x12e60 <push_state>
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13458:	ef e0       	ldi	r30, 0x0F	; 15
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   1345a:	2e 2e       	mov	r2, r30
   1345c:	31 2c       	mov	r3, r1
   1345e:	06 cf       	rjmp	.-500    	; 0x1326c <Read_Config+0x142>
   13460:	ed b7       	in	r30, 0x3d	; 61
   13462:	fe b7       	in	r31, 0x3e	; 62
   13464:	57 82       	std	Z+7, r5	; 0x07
   13466:	46 82       	std	Z+6, r4	; 0x06
   13468:	b5 82       	std	Z+5, r11	; 0x05
   1346a:	a4 82       	std	Z+4, r10	; 0x04
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   1346c:	8c e2       	ldi	r24, 0x2C	; 44
   1346e:	9c e1       	ldi	r25, 0x1C	; 28
   13470:	e8 cf       	rjmp	.-48     	; 0x13442 <Read_Config+0x318>
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   13472:	01 30       	cpi	r16, 0x01	; 1
   13474:	11 05       	cpc	r17, r1
   13476:	b1 f4       	brne	.+44     	; 0x134a4 <Read_Config+0x37a>
   13478:	6f 71       	andi	r22, 0x1F	; 31
   1347a:	8b e2       	ldi	r24, 0x2B	; 43
   1347c:	8c 9d       	mul	r24, r12
   1347e:	f0 01       	movw	r30, r0
   13480:	8d 9d       	mul	r24, r13
   13482:	f0 0d       	add	r31, r0
   13484:	11 24       	eor	r1, r1
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   13486:	e0 50       	subi	r30, 0x00	; 0
   13488:	f1 4e       	sbci	r31, 0xE1	; 225
   1348a:	61 83       	std	Z+1, r22	; 0x01
   1348c:	c6 5f       	subi	r28, 0xF6	; 246
   1348e:	de 4f       	sbci	r29, 0xFE	; 254
   13490:	a8 81       	ld	r26, Y
   13492:	b9 81       	ldd	r27, Y+1	; 0x01
// NO PPR
                    Devices[index].PPR = 0xff;
   13494:	ca 50       	subi	r28, 0x0A	; 10
   13496:	d1 40       	sbci	r29, 0x01	; 1
                    PRINTERp->HEADER.PPR = 0xff;
   13498:	6c 93       	st	X, r22
   1349a:	8f ef       	ldi	r24, 0xFF	; 255
   1349c:	82 83       	std	Z+2, r24	; 0x02
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   1349e:	fd 01       	movw	r30, r26
   134a0:	81 83       	std	Z+1, r24	; 0x01
   134a2:	e4 ce       	rjmp	.-568    	; 0x1326c <Read_Config+0x142>
   134a4:	ed b7       	in	r30, 0x3d	; 61
   134a6:	fe b7       	in	r31, 0x3e	; 62
   134a8:	57 82       	std	Z+7, r5	; 0x07
   134aa:	46 82       	std	Z+6, r4	; 0x06
   134ac:	b5 82       	std	Z+5, r11	; 0x05
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   134ae:	a4 82       	std	Z+4, r10	; 0x04
   134b0:	8b ef       	ldi	r24, 0xFB	; 251
   134b2:	9b e1       	ldi	r25, 0x1B	; 27
   134b4:	c6 cf       	rjmp	.-116    	; 0x13442 <Read_Config+0x318>
   134b6:	05 31       	cpi	r16, 0x15	; 21
   134b8:	11 05       	cpc	r17, r1
   134ba:	d9 f0       	breq	.+54     	; 0x134f2 <Read_Config+0x3c8>
   134bc:	6c f4       	brge	.+26     	; 0x134d8 <Read_Config+0x3ae>
   134be:	09 30       	cpi	r16, 0x09	; 9
   134c0:	11 05       	cpc	r17, r1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   134c2:	f1 f0       	breq	.+60     	; 0x13500 <Read_Config+0x3d6>
   134c4:	0b 30       	cpi	r16, 0x0B	; 11
   134c6:	11 05       	cpc	r17, r1
                        state = SS80_CONTROLLER;
   134c8:	49 f5       	brne	.+82     	; 0x1351c <Read_Config+0x3f2>
   134ca:	81 e0       	ldi	r24, 0x01	; 1
   134cc:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   134ce:	c8 dc       	rcall	.-1648   	; 0x12e60 <push_state>
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   134d0:	54 e0       	ldi	r21, 0x04	; 4
   134d2:	25 2e       	mov	r2, r21
   134d4:	31 2c       	mov	r3, r1
   134d6:	ca ce       	rjmp	.-620    	; 0x1326c <Read_Config+0x142>
   134d8:	07 32       	cpi	r16, 0x27	; 39
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   134da:	11 05       	cpc	r17, r1
   134dc:	c1 f0       	breq	.+48     	; 0x1350e <Read_Config+0x3e4>
   134de:	0a 32       	cpi	r16, 0x2A	; 42
                        state = SS80_VOLUME;
   134e0:	11 05       	cpc	r17, r1
   134e2:	e1 f4       	brne	.+56     	; 0x1351c <Read_Config+0x3f2>
   134e4:	81 e0       	ldi	r24, 0x01	; 1
                        break;
   134e6:	90 e0       	ldi	r25, 0x00	; 0

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   134e8:	bb dc       	rcall	.-1674   	; 0x12e60 <push_state>
   134ea:	36 e0       	ldi	r19, 0x06	; 6
   134ec:	23 2e       	mov	r2, r19
                        state = SS80_HEADER;
   134ee:	31 2c       	mov	r3, r1
   134f0:	bd ce       	rjmp	.-646    	; 0x1326c <Read_Config+0x142>
   134f2:	81 e0       	ldi	r24, 0x01	; 1
                        break;
   134f4:	90 e0       	ldi	r25, 0x00	; 0
                    case TOK_CONFIG:
                        push_state(state);
   134f6:	b4 dc       	rcall	.-1688   	; 0x12e60 <push_state>
   134f8:	72 e0       	ldi	r23, 0x02	; 2
   134fa:	27 2e       	mov	r2, r23
   134fc:	31 2c       	mov	r3, r1
                        state = SS80_CONFIG;
   134fe:	b6 ce       	rjmp	.-660    	; 0x1326c <Read_Config+0x142>
   13500:	81 e0       	ldi	r24, 0x01	; 1
   13502:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13504:	ad dc       	rcall	.-1702   	; 0x12e60 <push_state>
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13506:	63 e0       	ldi	r22, 0x03	; 3
   13508:	26 2e       	mov	r2, r22
   1350a:	31 2c       	mov	r3, r1
   1350c:	af ce       	rjmp	.-674    	; 0x1326c <Read_Config+0x142>
                        state = SS80_UNIT;
   1350e:	81 e0       	ldi	r24, 0x01	; 1
   13510:	90 e0       	ldi	r25, 0x00	; 0
   13512:	a6 dc       	rcall	.-1716   	; 0x12e60 <push_state>
                        break;
   13514:	45 e0       	ldi	r20, 0x05	; 5
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13516:	24 2e       	mov	r2, r20
   13518:	31 2c       	mov	r3, r1
   1351a:	a8 ce       	rjmp	.-688    	; 0x1326c <Read_Config+0x142>
   1351c:	ed b7       	in	r30, 0x3d	; 61
   1351e:	fe b7       	in	r31, 0x3e	; 62
   13520:	57 82       	std	Z+7, r5	; 0x07
   13522:	46 82       	std	Z+6, r4	; 0x06
   13524:	b5 82       	std	Z+5, r11	; 0x05
   13526:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   13528:	8e ec       	ldi	r24, 0xCE	; 206
   1352a:	9b e1       	ldi	r25, 0x1B	; 27
   1352c:	8a cf       	rjmp	.-236    	; 0x13442 <Read_Config+0x318>
   1352e:	02 31       	cpi	r16, 0x12	; 18
   13530:	11 05       	cpc	r17, r1
   13532:	f1 f0       	breq	.+60     	; 0x13570 <Read_Config+0x446>
   13534:	0f 31       	cpi	r16, 0x1F	; 31
   13536:	11 05       	cpc	r17, r1
   13538:	79 f0       	breq	.+30     	; 0x13558 <Read_Config+0x42e>
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   1353a:	01 30       	cpi	r16, 0x01	; 1
   1353c:	11 05       	cpc	r17, r1
   1353e:	e9 f4       	brne	.+58     	; 0x1357a <Read_Config+0x450>
   13540:	6f 71       	andi	r22, 0x1F	; 31
   13542:	8b e2       	ldi	r24, 0x2B	; 43
   13544:	8c 9d       	mul	r24, r12
   13546:	f0 01       	movw	r30, r0
   13548:	8d 9d       	mul	r24, r13
   1354a:	f0 0d       	add	r31, r0
   1354c:	11 24       	eor	r1, r1
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   1354e:	e0 50       	subi	r30, 0x00	; 0
   13550:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13552:	61 83       	std	Z+1, r22	; 0x01
   13554:	d3 01       	movw	r26, r6
   13556:	37 c1       	rjmp	.+622    	; 0x137c6 <Read_Config+0x69c>
   13558:	67 70       	andi	r22, 0x07	; 7
   1355a:	8b e2       	ldi	r24, 0x2B	; 43
   1355c:	8c 9d       	mul	r24, r12
   1355e:	f0 01       	movw	r30, r0
   13560:	8d 9d       	mul	r24, r13
   13562:	f0 0d       	add	r31, r0
   13564:	11 24       	eor	r1, r1
                        SS80p->HEADER.PPR = 0x07 & val.b;
   13566:	e0 50       	subi	r30, 0x00	; 0
   13568:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   1356a:	62 83       	std	Z+2, r22	; 0x02
   1356c:	f3 01       	movw	r30, r6
   1356e:	2d c1       	rjmp	.+602    	; 0x137ca <Read_Config+0x6a0>
   13570:	c4 01       	movw	r24, r8
   13572:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <stralloc>
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13576:	f3 01       	movw	r30, r6
   13578:	33 c1       	rjmp	.+614    	; 0x137e0 <Read_Config+0x6b6>
   1357a:	ed b7       	in	r30, 0x3d	; 61
   1357c:	fe b7       	in	r31, 0x3e	; 62
   1357e:	57 82       	std	Z+7, r5	; 0x07
   13580:	46 82       	std	Z+6, r4	; 0x06
   13582:	b5 82       	std	Z+5, r11	; 0x05
   13584:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   13586:	80 ea       	ldi	r24, 0xA0	; 160
   13588:	9b e1       	ldi	r25, 0x1B	; 27
   1358a:	5b cf       	rjmp	.-330    	; 0x13442 <Read_Config+0x318>
                {
                    SS80p->CONFIG.ID = val.w;
   1358c:	07 31       	cpi	r16, 0x17	; 23
   1358e:	11 05       	cpc	r17, r1
   13590:	21 f4       	brne	.+8      	; 0x1359a <Read_Config+0x470>
   13592:	96 2f       	mov	r25, r22
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13594:	87 2f       	mov	r24, r23
   13596:	f3 01       	movw	r30, r6
   13598:	3f c1       	rjmp	.+638    	; 0x13818 <Read_Config+0x6ee>
   1359a:	ed b7       	in	r30, 0x3d	; 61
   1359c:	fe b7       	in	r31, 0x3e	; 62
   1359e:	57 82       	std	Z+7, r5	; 0x07
   135a0:	46 82       	std	Z+6, r4	; 0x06
   135a2:	b5 82       	std	Z+5, r11	; 0x05
   135a4:	a4 82       	std	Z+4, r10	; 0x04
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   135a6:	82 e7       	ldi	r24, 0x72	; 114
   135a8:	9b e1       	ldi	r25, 0x1B	; 27
   135aa:	4b cf       	rjmp	.-362    	; 0x13442 <Read_Config+0x318>
   135ac:	06 32       	cpi	r16, 0x26	; 38
   135ae:	11 05       	cpc	r17, r1
   135b0:	71 f0       	breq	.+28     	; 0x135ce <Read_Config+0x4a4>
   135b2:	08 32       	cpi	r16, 0x28	; 40
   135b4:	11 05       	cpc	r17, r1
   135b6:	39 f0       	breq	.+14     	; 0x135c6 <Read_Config+0x49c>
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   135b8:	05 32       	cpi	r16, 0x25	; 37
   135ba:	11 05       	cpc	r17, r1
   135bc:	59 f4       	brne	.+22     	; 0x135d4 <Read_Config+0x4aa>
   135be:	96 2f       	mov	r25, r22

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   135c0:	87 2f       	mov	r24, r23
   135c2:	f3 01       	movw	r30, r6
   135c4:	5c c1       	rjmp	.+696    	; 0x1387e <Read_Config+0x754>
   135c6:	96 2f       	mov	r25, r22
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   135c8:	87 2f       	mov	r24, r23
   135ca:	f3 01       	movw	r30, r6
                        break;
   135cc:	55 c1       	rjmp	.+682    	; 0x13878 <Read_Config+0x74e>
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   135ce:	f3 01       	movw	r30, r6
   135d0:	62 87       	std	Z+10, r22	; 0x0a
   135d2:	4c ce       	rjmp	.-872    	; 0x1326c <Read_Config+0x142>
   135d4:	ed b7       	in	r30, 0x3d	; 61
   135d6:	fe b7       	in	r31, 0x3e	; 62
   135d8:	57 82       	std	Z+7, r5	; 0x07
   135da:	46 82       	std	Z+6, r4	; 0x06
   135dc:	b5 82       	std	Z+5, r11	; 0x05
   135de:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   135e0:	80 e4       	ldi	r24, 0x40	; 64
   135e2:	9b e1       	ldi	r25, 0x1B	; 27
   135e4:	2e cf       	rjmp	.-420    	; 0x13442 <Read_Config+0x318>
   135e6:	0a 30       	cpi	r16, 0x0A	; 10
   135e8:	11 05       	cpc	r17, r1
   135ea:	09 f4       	brne	.+2      	; 0x135ee <Read_Config+0x4c4>
   135ec:	45 c0       	rjmp	.+138    	; 0x13678 <Read_Config+0x54e>
   135ee:	d4 f4       	brge	.+52     	; 0x13624 <Read_Config+0x4fa>
   135f0:	05 30       	cpi	r16, 0x05	; 5
   135f2:	11 05       	cpc	r17, r1
   135f4:	d1 f1       	breq	.+116    	; 0x1366a <Read_Config+0x540>
   135f6:	64 f4       	brge	.+24     	; 0x13610 <Read_Config+0x4e6>
   135f8:	01 15       	cp	r16, r1
   135fa:	11 05       	cpc	r17, r1
   135fc:	09 f4       	brne	.+2      	; 0x13600 <Read_Config+0x4d6>
   135fe:	40 c0       	rjmp	.+128    	; 0x13680 <Read_Config+0x556>
   13600:	04 30       	cpi	r16, 0x04	; 4
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   13602:	11 05       	cpc	r17, r1
   13604:	09 f0       	breq	.+2      	; 0x13608 <Read_Config+0x4de>
   13606:	46 c0       	rjmp	.+140    	; 0x13694 <Read_Config+0x56a>
                        break;
   13608:	f3 01       	movw	r30, r6
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1360a:	64 8b       	std	Z+20, r22	; 0x14
   1360c:	75 8b       	std	Z+21, r23	; 0x15
   1360e:	2e ce       	rjmp	.-932    	; 0x1326c <Read_Config+0x142>
   13610:	06 30       	cpi	r16, 0x06	; 6
   13612:	11 05       	cpc	r17, r1
   13614:	71 f1       	breq	.+92     	; 0x13672 <Read_Config+0x548>
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13616:	07 30       	cpi	r16, 0x07	; 7
   13618:	11 05       	cpc	r17, r1
   1361a:	e1 f5       	brne	.+120    	; 0x13694 <Read_Config+0x56a>
                        break;
   1361c:	f3 01       	movw	r30, r6
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1361e:	60 8b       	std	Z+16, r22	; 0x10
   13620:	71 8b       	std	Z+17, r23	; 0x11
   13622:	24 ce       	rjmp	.-952    	; 0x1326c <Read_Config+0x142>
   13624:	0c 31       	cpi	r16, 0x1C	; 28
   13626:	11 05       	cpc	r17, r1
   13628:	79 f1       	breq	.+94     	; 0x13688 <Read_Config+0x55e>
   1362a:	4c f4       	brge	.+18     	; 0x1363e <Read_Config+0x514>
   1362c:	0f 30       	cpi	r16, 0x0F	; 15
   1362e:	11 05       	cpc	r17, r1
   13630:	b1 f0       	breq	.+44     	; 0x1365e <Read_Config+0x534>
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   13632:	03 31       	cpi	r16, 0x13	; 19
   13634:	11 05       	cpc	r17, r1
                        break;
   13636:	71 f5       	brne	.+92     	; 0x13694 <Read_Config+0x56a>
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13638:	f3 01       	movw	r30, r6
   1363a:	65 8f       	std	Z+29, r22	; 0x1d
   1363c:	17 ce       	rjmp	.-978    	; 0x1326c <Read_Config+0x142>
   1363e:	01 32       	cpi	r16, 0x21	; 33
   13640:	11 05       	cpc	r17, r1
   13642:	29 f1       	breq	.+74     	; 0x1368e <Read_Config+0x564>
   13644:	09 32       	cpi	r16, 0x29	; 41
   13646:	11 05       	cpc	r17, r1
   13648:	39 f0       	breq	.+14     	; 0x13658 <Read_Config+0x52e>
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   1364a:	0e 31       	cpi	r16, 0x1E	; 30
   1364c:	11 05       	cpc	r17, r1
   1364e:	11 f5       	brne	.+68     	; 0x13694 <Read_Config+0x56a>
                        break;
   13650:	f3 01       	movw	r30, r6

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   13652:	60 8f       	std	Z+24, r22	; 0x18
   13654:	71 8f       	std	Z+25, r23	; 0x19
                        break;
   13656:	0a ce       	rjmp	.-1004   	; 0x1326c <Read_Config+0x142>
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   13658:	f3 01       	movw	r30, r6
   1365a:	63 87       	std	Z+11, r22	; 0x0b
   1365c:	07 ce       	rjmp	.-1010   	; 0x1326c <Read_Config+0x142>
   1365e:	f3 01       	movw	r30, r6
   13660:	64 87       	std	Z+12, r22	; 0x0c
                        break;
   13662:	75 87       	std	Z+13, r23	; 0x0d
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   13664:	86 87       	std	Z+14, r24	; 0x0e
   13666:	97 87       	std	Z+15, r25	; 0x0f
   13668:	01 ce       	rjmp	.-1022   	; 0x1326c <Read_Config+0x142>
                        break;
   1366a:	61 70       	andi	r22, 0x01	; 1
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   1366c:	f3 01       	movw	r30, r6
   1366e:	62 8b       	std	Z+18, r22	; 0x12
                        break;
   13670:	fd cd       	rjmp	.-1030   	; 0x1326c <Read_Config+0x142>
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13672:	f3 01       	movw	r30, r6
   13674:	63 8b       	std	Z+19, r22	; 0x13
   13676:	fa cd       	rjmp	.-1036   	; 0x1326c <Read_Config+0x142>
                        break;
   13678:	f3 01       	movw	r30, r6
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   1367a:	66 8b       	std	Z+22, r22	; 0x16
   1367c:	77 8b       	std	Z+23, r23	; 0x17
   1367e:	f6 cd       	rjmp	.-1044   	; 0x1326c <Read_Config+0x142>
                        break;
   13680:	f3 01       	movw	r30, r6
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13682:	62 8f       	std	Z+26, r22	; 0x1a
   13684:	73 8f       	std	Z+27, r23	; 0x1b
                        break;
   13686:	f2 cd       	rjmp	.-1052   	; 0x1326c <Read_Config+0x142>
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13688:	f3 01       	movw	r30, r6
   1368a:	64 8f       	std	Z+28, r22	; 0x1c
                        break;
   1368c:	ef cd       	rjmp	.-1058   	; 0x1326c <Read_Config+0x142>
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   1368e:	f3 01       	movw	r30, r6
   13690:	66 8f       	std	Z+30, r22	; 0x1e
   13692:	ec cd       	rjmp	.-1064   	; 0x1326c <Read_Config+0x142>
   13694:	ed b7       	in	r30, 0x3d	; 61
   13696:	fe b7       	in	r31, 0x3e	; 62
   13698:	57 82       	std	Z+7, r5	; 0x07
   1369a:	46 82       	std	Z+6, r4	; 0x06
   1369c:	b5 82       	std	Z+5, r11	; 0x05
   1369e:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   136a0:	84 e1       	ldi	r24, 0x14	; 20
   136a2:	9b e1       	ldi	r25, 0x1B	; 27
   136a4:	ce ce       	rjmp	.-612    	; 0x13442 <Read_Config+0x318>
   136a6:	0a 31       	cpi	r16, 0x1A	; 26
   136a8:	11 05       	cpc	r17, r1
   136aa:	b9 f0       	breq	.+46     	; 0x136da <Read_Config+0x5b0>
   136ac:	64 f4       	brge	.+24     	; 0x136c6 <Read_Config+0x59c>
   136ae:	08 31       	cpi	r16, 0x18	; 24
   136b0:	11 05       	cpc	r17, r1
   136b2:	e1 f0       	breq	.+56     	; 0x136ec <Read_Config+0x5c2>
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   136b4:	09 31       	cpi	r16, 0x19	; 25
   136b6:	11 05       	cpc	r17, r1
   136b8:	e1 f4       	brne	.+56     	; 0x136f2 <Read_Config+0x5c8>
   136ba:	f3 01       	movw	r30, r6
   136bc:	66 a3       	std	Z+38, r22	; 0x26
                        break;
   136be:	77 a3       	std	Z+39, r23	; 0x27
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   136c0:	80 a7       	std	Z+40, r24	; 0x28
   136c2:	91 a7       	std	Z+41, r25	; 0x29
   136c4:	d3 cd       	rjmp	.-1114   	; 0x1326c <Read_Config+0x142>
   136c6:	0b 31       	cpi	r16, 0x1B	; 27
   136c8:	11 05       	cpc	r17, r1
   136ca:	69 f0       	breq	.+26     	; 0x136e6 <Read_Config+0x5bc>
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   136cc:	0d 31       	cpi	r16, 0x1D	; 29
   136ce:	11 05       	cpc	r17, r1
   136d0:	81 f4       	brne	.+32     	; 0x136f2 <Read_Config+0x5c8>
                        break;
   136d2:	f3 01       	movw	r30, r6

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   136d4:	64 a3       	std	Z+36, r22	; 0x24
   136d6:	75 a3       	std	Z+37, r23	; 0x25
   136d8:	c9 cd       	rjmp	.-1134   	; 0x1326c <Read_Config+0x142>
   136da:	f3 01       	movw	r30, r6
   136dc:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
   136de:	70 a3       	std	Z+32, r23	; 0x20
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   136e0:	81 a3       	std	Z+33, r24	; 0x21
   136e2:	92 a3       	std	Z+34, r25	; 0x22
                        break;
   136e4:	c3 cd       	rjmp	.-1146   	; 0x1326c <Read_Config+0x142>
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   136e6:	f3 01       	movw	r30, r6
   136e8:	63 a3       	std	Z+35, r22	; 0x23
                        break;
   136ea:	c0 cd       	rjmp	.-1152   	; 0x1326c <Read_Config+0x142>
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   136ec:	f3 01       	movw	r30, r6
   136ee:	62 a7       	std	Z+42, r22	; 0x2a
   136f0:	bd cd       	rjmp	.-1158   	; 0x1326c <Read_Config+0x142>
   136f2:	ed b7       	in	r30, 0x3d	; 61
   136f4:	fe b7       	in	r31, 0x3e	; 62
   136f6:	57 82       	std	Z+7, r5	; 0x07
   136f8:	46 82       	std	Z+6, r4	; 0x06
   136fa:	b5 82       	std	Z+5, r11	; 0x05
   136fc:	a4 82       	std	Z+4, r10	; 0x04
   136fe:	c3 5e       	subi	r28, 0xE3	; 227
   13700:	de 4f       	sbci	r29, 0xFE	; 254
   13702:	28 81       	ld	r18, Y
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   13704:	39 81       	ldd	r19, Y+1	; 0x01
   13706:	4a 81       	ldd	r20, Y+2	; 0x02
   13708:	cd 51       	subi	r28, 0x1D	; 29
   1370a:	d1 40       	sbci	r29, 0x01	; 1
   1370c:	e8 c0       	rjmp	.+464    	; 0x138de <Read_Config+0x7b4>
   1370e:	04 31       	cpi	r16, 0x14	; 20
   13710:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   13712:	a1 f0       	breq	.+40     	; 0x1373c <Read_Config+0x612>
   13714:	05 31       	cpi	r16, 0x15	; 21
   13716:	11 05       	cpc	r17, r1
   13718:	51 f0       	breq	.+20     	; 0x1372e <Read_Config+0x604>
                        state = AMIGO_CONFIG;
   1371a:	09 30       	cpi	r16, 0x09	; 9
   1371c:	11 05       	cpc	r17, r1
   1371e:	a9 f4       	brne	.+42     	; 0x1374a <Read_Config+0x620>
                        break;
   13720:	8a e0       	ldi	r24, 0x0A	; 10
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13722:	90 e0       	ldi	r25, 0x00	; 0
   13724:	9d db       	rcall	.-2246   	; 0x12e60 <push_state>
   13726:	9c e0       	ldi	r25, 0x0C	; 12
   13728:	29 2e       	mov	r2, r25
                        state = AMIGO_HEADER;
   1372a:	31 2c       	mov	r3, r1
   1372c:	9f cd       	rjmp	.-1218   	; 0x1326c <Read_Config+0x142>
   1372e:	8a e0       	ldi	r24, 0x0A	; 10
                        break;
   13730:	90 e0       	ldi	r25, 0x00	; 0
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   13732:	96 db       	rcall	.-2260   	; 0x12e60 <push_state>
   13734:	2b e0       	ldi	r18, 0x0B	; 11
   13736:	22 2e       	mov	r2, r18
   13738:	31 2c       	mov	r3, r1
                        state = AMIGO_GEOMETRY;
   1373a:	98 cd       	rjmp	.-1232   	; 0x1326c <Read_Config+0x142>
   1373c:	8a e0       	ldi	r24, 0x0A	; 10
   1373e:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13740:	8f db       	rcall	.-2274   	; 0x12e60 <push_state>
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13742:	8d e0       	ldi	r24, 0x0D	; 13
   13744:	28 2e       	mov	r2, r24
   13746:	31 2c       	mov	r3, r1
   13748:	91 cd       	rjmp	.-1246   	; 0x1326c <Read_Config+0x142>
   1374a:	ed b7       	in	r30, 0x3d	; 61
   1374c:	fe b7       	in	r31, 0x3e	; 62
   1374e:	57 82       	std	Z+7, r5	; 0x07
   13750:	46 82       	std	Z+6, r4	; 0x06
   13752:	b5 82       	std	Z+5, r11	; 0x05
   13754:	a4 82       	std	Z+4, r10	; 0x04
   13756:	c6 5e       	subi	r28, 0xE6	; 230
   13758:	de 4f       	sbci	r29, 0xFE	; 254
   1375a:	28 81       	ld	r18, Y
   1375c:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1375e:	4a 81       	ldd	r20, Y+2	; 0x02
   13760:	ca 51       	subi	r28, 0x1A	; 26
   13762:	d1 40       	sbci	r29, 0x01	; 1
   13764:	bc c0       	rjmp	.+376    	; 0x138de <Read_Config+0x7b4>
   13766:	00 31       	cpi	r16, 0x10	; 16
   13768:	11 05       	cpc	r17, r1
   1376a:	09 f4       	brne	.+2      	; 0x1376e <Read_Config+0x644>
   1376c:	7f cd       	rjmp	.-1282   	; 0x1326c <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   1376e:	a4 f4       	brge	.+40     	; 0x13798 <Read_Config+0x66e>
   13770:	01 30       	cpi	r16, 0x01	; 1
   13772:	11 05       	cpc	r17, r1
   13774:	c1 f5       	brne	.+112    	; 0x137e6 <Read_Config+0x6bc>
   13776:	6f 71       	andi	r22, 0x1F	; 31
   13778:	8b e2       	ldi	r24, 0x2B	; 43
   1377a:	8c 9d       	mul	r24, r12
   1377c:	f0 01       	movw	r30, r0
   1377e:	8d 9d       	mul	r24, r13
   13780:	f0 0d       	add	r31, r0
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13782:	11 24       	eor	r1, r1
   13784:	e0 50       	subi	r30, 0x00	; 0
   13786:	f1 4e       	sbci	r31, 0xE1	; 225
   13788:	61 83       	std	Z+1, r22	; 0x01
   1378a:	c8 5f       	subi	r28, 0xF8	; 248
   1378c:	de 4f       	sbci	r29, 0xFE	; 254
   1378e:	a8 81       	ld	r26, Y
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13790:	b9 81       	ldd	r27, Y+1	; 0x01
   13792:	c8 50       	subi	r28, 0x08	; 8
   13794:	d1 40       	sbci	r29, 0x01	; 1
   13796:	17 c0       	rjmp	.+46     	; 0x137c6 <Read_Config+0x69c>
   13798:	02 31       	cpi	r16, 0x12	; 18
   1379a:	11 05       	cpc	r17, r1
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   1379c:	c1 f0       	breq	.+48     	; 0x137ce <Read_Config+0x6a4>
   1379e:	0f 31       	cpi	r16, 0x1F	; 31
   137a0:	11 05       	cpc	r17, r1
   137a2:	09 f5       	brne	.+66     	; 0x137e6 <Read_Config+0x6bc>
   137a4:	67 70       	andi	r22, 0x07	; 7
   137a6:	8b e2       	ldi	r24, 0x2B	; 43
   137a8:	8c 9d       	mul	r24, r12
   137aa:	f0 01       	movw	r30, r0
   137ac:	8d 9d       	mul	r24, r13
   137ae:	f0 0d       	add	r31, r0
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   137b0:	11 24       	eor	r1, r1
   137b2:	e0 50       	subi	r30, 0x00	; 0
   137b4:	f1 4e       	sbci	r31, 0xE1	; 225
   137b6:	62 83       	std	Z+2, r22	; 0x02
   137b8:	c8 5f       	subi	r28, 0xF8	; 248
   137ba:	de 4f       	sbci	r29, 0xFE	; 254
   137bc:	e8 81       	ld	r30, Y
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   137be:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   137c0:	c8 50       	subi	r28, 0x08	; 8
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   137c2:	d1 40       	sbci	r29, 0x01	; 1
                        break;
   137c4:	02 c0       	rjmp	.+4      	; 0x137ca <Read_Config+0x6a0>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   137c6:	6c 93       	st	X, r22
   137c8:	51 cd       	rjmp	.-1374   	; 0x1326c <Read_Config+0x142>
   137ca:	61 83       	std	Z+1, r22	; 0x01
   137cc:	4f cd       	rjmp	.-1378   	; 0x1326c <Read_Config+0x142>
   137ce:	c4 01       	movw	r24, r8
   137d0:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <stralloc>
   137d4:	c8 5f       	subi	r28, 0xF8	; 248
   137d6:	de 4f       	sbci	r29, 0xFE	; 254
   137d8:	e8 81       	ld	r30, Y
   137da:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   137dc:	c8 50       	subi	r28, 0x08	; 8
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   137de:	d1 40       	sbci	r29, 0x01	; 1
   137e0:	93 83       	std	Z+3, r25	; 0x03
   137e2:	82 83       	std	Z+2, r24	; 0x02
   137e4:	43 cd       	rjmp	.-1402   	; 0x1326c <Read_Config+0x142>
   137e6:	ed b7       	in	r30, 0x3d	; 61
   137e8:	fe b7       	in	r31, 0x3e	; 62
   137ea:	57 82       	std	Z+7, r5	; 0x07
   137ec:	46 82       	std	Z+6, r4	; 0x06
   137ee:	b5 82       	std	Z+5, r11	; 0x05
   137f0:	a4 82       	std	Z+4, r10	; 0x04
   137f2:	c9 5e       	subi	r28, 0xE9	; 233
   137f4:	de 4f       	sbci	r29, 0xFE	; 254
   137f6:	28 81       	ld	r18, Y
   137f8:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   137fa:	4a 81       	ldd	r20, Y+2	; 0x02
   137fc:	c7 51       	subi	r28, 0x17	; 23
   137fe:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
   13800:	6e c0       	rjmp	.+220    	; 0x138de <Read_Config+0x7b4>
   13802:	07 31       	cpi	r16, 0x17	; 23
   13804:	11 05       	cpc	r17, r1
   13806:	59 f4       	brne	.+22     	; 0x1381e <Read_Config+0x6f4>
   13808:	96 2f       	mov	r25, r22
   1380a:	87 2f       	mov	r24, r23
   1380c:	c8 5f       	subi	r28, 0xF8	; 248
   1380e:	de 4f       	sbci	r29, 0xFE	; 254
   13810:	e8 81       	ld	r30, Y
   13812:	f9 81       	ldd	r31, Y+1	; 0x01
   13814:	c8 50       	subi	r28, 0x08	; 8
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13816:	d1 40       	sbci	r29, 0x01	; 1
   13818:	94 83       	std	Z+4, r25	; 0x04
   1381a:	85 83       	std	Z+5, r24	; 0x05
   1381c:	27 cd       	rjmp	.-1458   	; 0x1326c <Read_Config+0x142>
   1381e:	ed b7       	in	r30, 0x3d	; 61
   13820:	fe b7       	in	r31, 0x3e	; 62
   13822:	57 82       	std	Z+7, r5	; 0x07
   13824:	46 82       	std	Z+6, r4	; 0x06
   13826:	b5 82       	std	Z+5, r11	; 0x05
   13828:	a4 82       	std	Z+4, r10	; 0x04
   1382a:	cc 5e       	subi	r28, 0xEC	; 236
   1382c:	de 4f       	sbci	r29, 0xFE	; 254
   1382e:	28 81       	ld	r18, Y
   13830:	39 81       	ldd	r19, Y+1	; 0x01
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13832:	4a 81       	ldd	r20, Y+2	; 0x02
   13834:	c4 51       	subi	r28, 0x14	; 20
   13836:	d1 40       	sbci	r29, 0x01	; 1
   13838:	52 c0       	rjmp	.+164    	; 0x138de <Read_Config+0x7b4>
   1383a:	0d 30       	cpi	r16, 0x0D	; 13
   1383c:	11 05       	cpc	r17, r1
   1383e:	59 f1       	breq	.+86     	; 0x13896 <Read_Config+0x76c>
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13840:	64 f4       	brge	.+24     	; 0x1385a <Read_Config+0x730>
   13842:	08 30       	cpi	r16, 0x08	; 8
   13844:	11 05       	cpc	r17, r1
   13846:	81 f5       	brne	.+96     	; 0x138a8 <Read_Config+0x77e>
   13848:	96 2f       	mov	r25, r22
   1384a:	87 2f       	mov	r24, r23
   1384c:	c8 5f       	subi	r28, 0xF8	; 248
   1384e:	de 4f       	sbci	r29, 0xFE	; 254
   13850:	e8 81       	ld	r30, Y
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13852:	f9 81       	ldd	r31, Y+1	; 0x01
   13854:	c8 50       	subi	r28, 0x08	; 8
   13856:	d1 40       	sbci	r29, 0x01	; 1
   13858:	0f c0       	rjmp	.+30     	; 0x13878 <Read_Config+0x74e>
   1385a:	06 31       	cpi	r16, 0x16	; 22
   1385c:	11 05       	cpc	r17, r1
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   1385e:	91 f0       	breq	.+36     	; 0x13884 <Read_Config+0x75a>
   13860:	02 32       	cpi	r16, 0x22	; 34
   13862:	11 05       	cpc	r17, r1
   13864:	09 f5       	brne	.+66     	; 0x138a8 <Read_Config+0x77e>
   13866:	96 2f       	mov	r25, r22
   13868:	87 2f       	mov	r24, r23
   1386a:	c8 5f       	subi	r28, 0xF8	; 248
   1386c:	de 4f       	sbci	r29, 0xFE	; 254
   1386e:	e8 81       	ld	r30, Y

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13870:	f9 81       	ldd	r31, Y+1	; 0x01
   13872:	c8 50       	subi	r28, 0x08	; 8
                        break;
   13874:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13876:	03 c0       	rjmp	.+6      	; 0x1387e <Read_Config+0x754>
   13878:	96 83       	std	Z+6, r25	; 0x06
                        break;
   1387a:	87 83       	std	Z+7, r24	; 0x07
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   1387c:	f7 cc       	rjmp	.-1554   	; 0x1326c <Read_Config+0x142>
   1387e:	90 87       	std	Z+8, r25	; 0x08
   13880:	81 87       	std	Z+9, r24	; 0x09
   13882:	f4 cc       	rjmp	.-1560   	; 0x1326c <Read_Config+0x142>
   13884:	c8 5f       	subi	r28, 0xF8	; 248
   13886:	de 4f       	sbci	r29, 0xFE	; 254
   13888:	e8 81       	ld	r30, Y
   1388a:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   1388c:	c8 50       	subi	r28, 0x08	; 8
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   1388e:	d1 40       	sbci	r29, 0x01	; 1
   13890:	62 87       	std	Z+10, r22	; 0x0a
   13892:	73 87       	std	Z+11, r23	; 0x0b
   13894:	eb cc       	rjmp	.-1578   	; 0x1326c <Read_Config+0x142>
   13896:	c8 5f       	subi	r28, 0xF8	; 248
   13898:	de 4f       	sbci	r29, 0xFE	; 254
   1389a:	e8 81       	ld	r30, Y
   1389c:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   1389e:	c8 50       	subi	r28, 0x08	; 8
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   138a0:	d1 40       	sbci	r29, 0x01	; 1
   138a2:	64 87       	std	Z+12, r22	; 0x0c
   138a4:	75 87       	std	Z+13, r23	; 0x0d
   138a6:	e2 cc       	rjmp	.-1596   	; 0x1326c <Read_Config+0x142>
   138a8:	ed b7       	in	r30, 0x3d	; 61
   138aa:	fe b7       	in	r31, 0x3e	; 62
   138ac:	57 82       	std	Z+7, r5	; 0x07
   138ae:	46 82       	std	Z+6, r4	; 0x06
   138b0:	b5 82       	std	Z+5, r11	; 0x05
   138b2:	a4 82       	std	Z+4, r10	; 0x04
   138b4:	cf 5e       	subi	r28, 0xEF	; 239
   138b6:	de 4f       	sbci	r29, 0xFE	; 254
   138b8:	28 81       	ld	r18, Y
   138ba:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   138bc:	4a 81       	ldd	r20, Y+2	; 0x02
   138be:	c1 51       	subi	r28, 0x11	; 17
   138c0:	d1 40       	sbci	r29, 0x01	; 1
   138c2:	0d c0       	rjmp	.+26     	; 0x138de <Read_Config+0x7b4>
   138c4:	ed b7       	in	r30, 0x3d	; 61
   138c6:	fe b7       	in	r31, 0x3e	; 62
   138c8:	57 82       	std	Z+7, r5	; 0x07
   138ca:	46 82       	std	Z+6, r4	; 0x06
   138cc:	b5 82       	std	Z+5, r11	; 0x05
   138ce:	a4 82       	std	Z+4, r10	; 0x04
   138d0:	c2 5f       	subi	r28, 0xF2	; 242
   138d2:	de 4f       	sbci	r29, 0xFE	; 254
   138d4:	28 81       	ld	r18, Y
   138d6:	39 81       	ldd	r19, Y+1	; 0x01
   138d8:	4a 81       	ldd	r20, Y+2	; 0x02
   138da:	ce 50       	subi	r28, 0x0E	; 14
   138dc:	d1 40       	sbci	r29, 0x01	; 1
   138de:	21 83       	std	Z+1, r18	; 0x01
                ++errors;
   138e0:	32 83       	std	Z+2, r19	; 0x02
   138e2:	43 83       	std	Z+3, r20	; 0x03
   138e4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
                break;

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   138e8:	ff ef       	ldi	r31, 0xFF	; 255
   138ea:	ef 1a       	sub	r14, r31
   138ec:	ff 0a       	sbc	r15, r31
    {
        printf("Missing END statement at line:%d\n", lines);
   138ee:	be cc       	rjmp	.-1668   	; 0x1326c <Read_Config+0x142>
   138f0:	21 14       	cp	r2, r1
   138f2:	31 04       	cpc	r3, r1
   138f4:	79 f0       	breq	.+30     	; 0x13914 <Read_Config+0x7ea>
   138f6:	ed b7       	in	r30, 0x3d	; 61
   138f8:	fe b7       	in	r31, 0x3e	; 62
   138fa:	55 82       	std	Z+5, r5	; 0x05
   138fc:	44 82       	std	Z+4, r4	; 0x04
   138fe:	85 ee       	ldi	r24, 0xE5	; 229
   13900:	99 e1       	ldi	r25, 0x19	; 25
   13902:	a0 e0       	ldi	r26, 0x00	; 0
   13904:	81 83       	std	Z+1, r24	; 0x01
        ++errors;
   13906:	92 83       	std	Z+2, r25	; 0x02
   13908:	a3 83       	std	Z+3, r26	; 0x03
   1390a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   1390e:	ff ef       	ldi	r31, 0xFF	; 255
   13910:	ef 1a       	sub	r14, r31
   13912:	ff 0a       	sbc	r15, r31
   13914:	ed b7       	in	r30, 0x3d	; 61
   13916:	fe b7       	in	r31, 0x3e	; 62
   13918:	55 82       	std	Z+5, r5	; 0x05
   1391a:	44 82       	std	Z+4, r4	; 0x04
   1391c:	88 ec       	ldi	r24, 0xC8	; 200
   1391e:	99 e1       	ldi	r25, 0x19	; 25
   13920:	a0 e0       	ldi	r26, 0x00	; 0
   13922:	81 83       	std	Z+1, r24	; 0x01
    if(errors)
   13924:	92 83       	std	Z+2, r25	; 0x02
   13926:	a3 83       	std	Z+3, r26	; 0x03
   13928:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   1392c:	e1 14       	cp	r14, r1
   1392e:	f1 04       	cpc	r15, r1
   13930:	61 f0       	breq	.+24     	; 0x1394a <Read_Config+0x820>
   13932:	ed b7       	in	r30, 0x3d	; 61
   13934:	fe b7       	in	r31, 0x3e	; 62
   13936:	f5 82       	std	Z+5, r15	; 0x05
   13938:	e4 82       	std	Z+4, r14	; 0x04
   1393a:	81 ea       	ldi	r24, 0xA1	; 161
   1393c:	99 e1       	ldi	r25, 0x19	; 25
   1393e:	a0 e0       	ldi	r26, 0x00	; 0

    if(fclose(cfg) == EOF)
   13940:	81 83       	std	Z+1, r24	; 0x01
   13942:	92 83       	std	Z+2, r25	; 0x02
   13944:	a3 83       	std	Z+3, r26	; 0x03
   13946:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1394a:	c4 5f       	subi	r28, 0xF4	; 244
   1394c:	de 4f       	sbci	r29, 0xFE	; 254
   1394e:	88 81       	ld	r24, Y
   13950:	99 81       	ldd	r25, Y+1	; 0x01
   13952:	cc 50       	subi	r28, 0x0C	; 12
    {
        perror("Read_Config - close error");
   13954:	d1 40       	sbci	r29, 0x01	; 1
   13956:	0e 94 60 7a 	call	0xf4c0	; 0xf4c0 <fclose>
   1395a:	01 96       	adiw	r24, 0x01	; 1
        ++errors;
   1395c:	39 f4       	brne	.+14     	; 0x1396c <Read_Config+0x842>
   1395e:	88 e6       	ldi	r24, 0x68	; 104
   13960:	9e e0       	ldi	r25, 0x0E	; 14
    }

// Post process device values
    Post_Config();
   13962:	0e 94 e7 75 	call	0xebce	; 0xebce <perror>

    return(errors);
   13966:	2f ef       	ldi	r18, 0xFF	; 255
}
   13968:	e2 1a       	sub	r14, r18
   1396a:	f2 0a       	sbc	r15, r18
   1396c:	48 db       	rcall	.-2416   	; 0x12ffe <Post_Config>
   1396e:	c7 01       	movw	r24, r14
   13970:	c1 5e       	subi	r28, 0xE1	; 225
   13972:	de 4f       	sbci	r29, 0xFE	; 254
   13974:	e2 e1       	ldi	r30, 0x12	; 18
   13976:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0001397a <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   1397a:	2f 92       	push	r2
   1397c:	3f 92       	push	r3
   1397e:	4f 92       	push	r4
   13980:	5f 92       	push	r5
   13982:	6f 92       	push	r6
   13984:	7f 92       	push	r7
   13986:	8f 92       	push	r8
   13988:	af 92       	push	r10
   1398a:	bf 92       	push	r11
   1398c:	cf 92       	push	r12
   1398e:	df 92       	push	r13
   13990:	ef 92       	push	r14
   13992:	ff 92       	push	r15
   13994:	0f 93       	push	r16
   13996:	1f 93       	push	r17
   13998:	cf 93       	push	r28
   1399a:	df 93       	push	r29
   1399c:	cd b7       	in	r28, 0x3d	; 61
   1399e:	de b7       	in	r29, 0x3e	; 62
   139a0:	ce 56       	subi	r28, 0x6E	; 110
   139a2:	d1 09       	sbc	r29, r1
   139a4:	0f b6       	in	r0, 0x3f	; 63
   139a6:	f8 94       	cli
   139a8:	de bf       	out	0x3e, r29	; 62
   139aa:	0f be       	out	0x3f, r0	; 63
   139ac:	cd bf       	out	0x3d, r28	; 61
   139ae:	80 e0       	ldi	r24, 0x00	; 0
   139b0:	c8 2e       	mov	r12, r24
   139b2:	8f e1       	ldi	r24, 0x1F	; 31
   139b4:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   139b6:	a0 96       	adiw	r28, 0x20	; 32
   139b8:	1f ae       	std	Y+63, r1	; 0x3f
   139ba:	1e ae       	std	Y+62, r1	; 0x3e
   139bc:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   139be:	6e 96       	adiw	r28, 0x1e	; 30
   139c0:	1f ae       	std	Y+63, r1	; 0x3f
   139c2:	1e ae       	std	Y+62, r1	; 0x3e
   139c4:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   139c6:	6c 96       	adiw	r28, 0x1c	; 28
   139c8:	1f ae       	std	Y+63, r1	; 0x3f
   139ca:	1e ae       	std	Y+62, r1	; 0x3e
   139cc:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   139ce:	85 e5       	ldi	r24, 0x55	; 85
   139d0:	96 e1       	ldi	r25, 0x16	; 22
   139d2:	9c 01       	movw	r18, r24
   139d4:	40 e0       	ldi	r20, 0x00	; 0
   139d6:	a3 96       	adiw	r28, 0x23	; 35
   139d8:	2d af       	std	Y+61, r18	; 0x3d
   139da:	3e af       	std	Y+62, r19	; 0x3e
   139dc:	4f af       	std	Y+63, r20	; 0x3f
   139de:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   139e0:	8d e4       	ldi	r24, 0x4D	; 77
   139e2:	96 e1       	ldi	r25, 0x16	; 22
   139e4:	9c 01       	movw	r18, r24
   139e6:	40 e0       	ldi	r20, 0x00	; 0
   139e8:	a6 96       	adiw	r28, 0x26	; 38
   139ea:	2d af       	std	Y+61, r18	; 0x3d
   139ec:	3e af       	std	Y+62, r19	; 0x3e
   139ee:	4f af       	std	Y+63, r20	; 0x3f
   139f0:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   139f2:	8f e6       	ldi	r24, 0x6F	; 111
   139f4:	96 e1       	ldi	r25, 0x16	; 22
   139f6:	9c 01       	movw	r18, r24
   139f8:	40 e0       	ldi	r20, 0x00	; 0
   139fa:	a9 96       	adiw	r28, 0x29	; 41
   139fc:	2d af       	std	Y+61, r18	; 0x3d
   139fe:	3e af       	std	Y+62, r19	; 0x3e
   13a00:	4f af       	std	Y+63, r20	; 0x3f
   13a02:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13a04:	89 e9       	ldi	r24, 0x99	; 153
   13a06:	96 e1       	ldi	r25, 0x16	; 22
   13a08:	9c 01       	movw	r18, r24
   13a0a:	40 e0       	ldi	r20, 0x00	; 0
   13a0c:	ac 96       	adiw	r28, 0x2c	; 44
   13a0e:	2d af       	std	Y+61, r18	; 0x3d
   13a10:	3e af       	std	Y+62, r19	; 0x3e
   13a12:	4f af       	std	Y+63, r20	; 0x3f
   13a14:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13a16:	81 e9       	ldi	r24, 0x91	; 145
   13a18:	96 e1       	ldi	r25, 0x16	; 22
   13a1a:	9c 01       	movw	r18, r24
   13a1c:	40 e0       	ldi	r20, 0x00	; 0
   13a1e:	af 96       	adiw	r28, 0x2f	; 47
   13a20:	2d af       	std	Y+61, r18	; 0x3d
   13a22:	3e af       	std	Y+62, r19	; 0x3e
   13a24:	4f af       	std	Y+63, r20	; 0x3f
   13a26:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13a28:	83 eb       	ldi	r24, 0xB3	; 179
   13a2a:	96 e1       	ldi	r25, 0x16	; 22
   13a2c:	3c 01       	movw	r6, r24
   13a2e:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13a30:	f6 01       	movw	r30, r12
   13a32:	80 81       	ld	r24, Z
   13a34:	88 23       	and	r24, r24
   13a36:	09 f4       	brne	.+2      	; 0x13a3a <format_drives+0xc0>
   13a38:	ef c0       	rjmp	.+478    	; 0x13c18 <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13a3a:	83 30       	cpi	r24, 0x03	; 3
   13a3c:	09 f0       	breq	.+2      	; 0x13a40 <format_drives+0xc6>
   13a3e:	70 c0       	rjmp	.+224    	; 0x13b20 <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13a40:	a7 a0       	ldd	r10, Z+39	; 0x27
   13a42:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13a44:	be 01       	movw	r22, r28
   13a46:	66 5f       	subi	r22, 0xF6	; 246
   13a48:	7f 4f       	sbci	r23, 0xFF	; 255
   13a4a:	f5 01       	movw	r30, r10
   13a4c:	82 81       	ldd	r24, Z+2	; 0x02
   13a4e:	93 81       	ldd	r25, Z+3	; 0x03
   13a50:	0e 94 bb 76 	call	0xed76	; 0xed76 <stat>
   13a54:	01 96       	adiw	r24, 0x01	; 1
   13a56:	09 f0       	breq	.+2      	; 0x13a5a <format_drives+0xe0>
   13a58:	63 c0       	rjmp	.+198    	; 0x13b20 <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13a5a:	f5 01       	movw	r30, r10
   13a5c:	80 89       	ldd	r24, Z+16	; 0x10
   13a5e:	91 89       	ldd	r25, Z+17	; 0x11
   13a60:	81 15       	cp	r24, r1
   13a62:	91 40       	sbci	r25, 0x01	; 1
   13a64:	31 f0       	breq	.+12     	; 0x13a72 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13a66:	ed b7       	in	r30, 0x3d	; 61
   13a68:	fe b7       	in	r31, 0x3e	; 62
   13a6a:	61 82       	std	Z+1, r6	; 0x01
   13a6c:	72 82       	std	Z+2, r7	; 0x02
   13a6e:	83 82       	std	Z+3, r8	; 0x03
   13a70:	79 c0       	rjmp	.+242    	; 0x13b64 <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13a72:	f6 01       	movw	r30, r12
   13a74:	23 80       	ldd	r2, Z+3	; 0x03
   13a76:	34 80       	ldd	r3, Z+4	; 0x04
   13a78:	45 80       	ldd	r4, Z+5	; 0x05
   13a7a:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13a7c:	ed b7       	in	r30, 0x3d	; 61
   13a7e:	fe b7       	in	r31, 0x3e	; 62
   13a80:	26 82       	std	Z+6, r2	; 0x06
   13a82:	37 82       	std	Z+7, r3	; 0x07
   13a84:	40 86       	std	Z+8, r4	; 0x08
   13a86:	51 86       	std	Z+9, r5	; 0x09
   13a88:	f5 01       	movw	r30, r10
   13a8a:	82 81       	ldd	r24, Z+2	; 0x02
   13a8c:	93 81       	ldd	r25, Z+3	; 0x03
   13a8e:	ed b7       	in	r30, 0x3d	; 61
   13a90:	fe b7       	in	r31, 0x3e	; 62
   13a92:	95 83       	std	Z+5, r25	; 0x05
   13a94:	84 83       	std	Z+4, r24	; 0x04
   13a96:	ac 96       	adiw	r28, 0x2c	; 44
   13a98:	2d ad       	ldd	r18, Y+61	; 0x3d
   13a9a:	3e ad       	ldd	r19, Y+62	; 0x3e
   13a9c:	4f ad       	ldd	r20, Y+63	; 0x3f
   13a9e:	ac 97       	sbiw	r28, 0x2c	; 44
   13aa0:	21 83       	std	Z+1, r18	; 0x01
   13aa2:	32 83       	std	Z+2, r19	; 0x02
   13aa4:	43 83       	std	Z+3, r20	; 0x03
   13aa6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13aaa:	6e 96       	adiw	r28, 0x1e	; 30
   13aac:	2e ad       	ldd	r18, Y+62	; 0x3e
   13aae:	3f ad       	ldd	r19, Y+63	; 0x3f
   13ab0:	6e 97       	sbiw	r28, 0x1e	; 30
   13ab2:	ed b7       	in	r30, 0x3d	; 61
   13ab4:	fe b7       	in	r31, 0x3e	; 62
   13ab6:	37 83       	std	Z+7, r19	; 0x07
   13ab8:	26 83       	std	Z+6, r18	; 0x06
   13aba:	af 96       	adiw	r28, 0x2f	; 47
   13abc:	8d ad       	ldd	r24, Y+61	; 0x3d
   13abe:	9e ad       	ldd	r25, Y+62	; 0x3e
   13ac0:	af ad       	ldd	r26, Y+63	; 0x3f
   13ac2:	af 97       	sbiw	r28, 0x2f	; 47
   13ac4:	83 83       	std	Z+3, r24	; 0x03
   13ac6:	94 83       	std	Z+4, r25	; 0x04
   13ac8:	a5 83       	std	Z+5, r26	; 0x05
   13aca:	2a e3       	ldi	r18, 0x3A	; 58
   13acc:	30 e0       	ldi	r19, 0x00	; 0
   13ace:	2c 0f       	add	r18, r28
   13ad0:	3d 1f       	adc	r19, r29
   13ad2:	32 83       	std	Z+2, r19	; 0x02
   13ad4:	21 83       	std	Z+1, r18	; 0x01
   13ad6:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13ada:	f5 01       	movw	r30, r10
   13adc:	a2 80       	ldd	r10, Z+2	; 0x02
   13ade:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13ae0:	c2 01       	movw	r24, r4
   13ae2:	b1 01       	movw	r22, r2
   13ae4:	41 d1       	rcall	.+642    	; 0x13d68 <lif_dir_count>
   13ae6:	9b 01       	movw	r18, r22
   13ae8:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13aea:	82 01       	movw	r16, r4
   13aec:	71 01       	movw	r14, r2
   13aee:	be 01       	movw	r22, r28
   13af0:	66 5c       	subi	r22, 0xC6	; 198
   13af2:	7f 4f       	sbci	r23, 0xFF	; 255
   13af4:	c5 01       	movw	r24, r10
   13af6:	0e 94 fa d8 	call	0x1b1f4	; 0x1b1f4 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13afa:	6c 96       	adiw	r28, 0x1c	; 28
   13afc:	2e ad       	ldd	r18, Y+62	; 0x3e
   13afe:	3f ad       	ldd	r19, Y+63	; 0x3f
   13b00:	6c 97       	sbiw	r28, 0x1c	; 28
   13b02:	2f 5f       	subi	r18, 0xFF	; 255
   13b04:	3f 4f       	sbci	r19, 0xFF	; 255
   13b06:	6c 96       	adiw	r28, 0x1c	; 28
   13b08:	3f af       	std	Y+63, r19	; 0x3f
   13b0a:	2e af       	std	Y+62, r18	; 0x3e
   13b0c:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13b0e:	6e 96       	adiw	r28, 0x1e	; 30
   13b10:	8e ad       	ldd	r24, Y+62	; 0x3e
   13b12:	9f ad       	ldd	r25, Y+63	; 0x3f
   13b14:	6e 97       	sbiw	r28, 0x1e	; 30
   13b16:	01 96       	adiw	r24, 0x01	; 1
   13b18:	6e 96       	adiw	r28, 0x1e	; 30
   13b1a:	9f af       	std	Y+63, r25	; 0x3f
   13b1c:	8e af       	std	Y+62, r24	; 0x3e
   13b1e:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13b20:	f6 01       	movw	r30, r12
   13b22:	80 81       	ld	r24, Z
   13b24:	81 30       	cpi	r24, 0x01	; 1
   13b26:	09 f0       	breq	.+2      	; 0x13b2a <format_drives+0x1b0>
   13b28:	77 c0       	rjmp	.+238    	; 0x13c18 <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13b2a:	a7 a0       	ldd	r10, Z+39	; 0x27
   13b2c:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13b2e:	be 01       	movw	r22, r28
   13b30:	66 5f       	subi	r22, 0xF6	; 246
   13b32:	7f 4f       	sbci	r23, 0xFF	; 255
   13b34:	f5 01       	movw	r30, r10
   13b36:	82 81       	ldd	r24, Z+2	; 0x02
   13b38:	93 81       	ldd	r25, Z+3	; 0x03
   13b3a:	0e 94 bb 76 	call	0xed76	; 0xed76 <stat>
   13b3e:	01 96       	adiw	r24, 0x01	; 1
   13b40:	09 f0       	breq	.+2      	; 0x13b44 <format_drives+0x1ca>
   13b42:	6a c0       	rjmp	.+212    	; 0x13c18 <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13b44:	f5 01       	movw	r30, r10
   13b46:	86 81       	ldd	r24, Z+6	; 0x06
   13b48:	97 81       	ldd	r25, Z+7	; 0x07
   13b4a:	81 15       	cp	r24, r1
   13b4c:	91 40       	sbci	r25, 0x01	; 1
   13b4e:	69 f0       	breq	.+26     	; 0x13b6a <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13b50:	a9 96       	adiw	r28, 0x29	; 41
   13b52:	2d ad       	ldd	r18, Y+61	; 0x3d
   13b54:	3e ad       	ldd	r19, Y+62	; 0x3e
   13b56:	4f ad       	ldd	r20, Y+63	; 0x3f
   13b58:	a9 97       	sbiw	r28, 0x29	; 41
   13b5a:	ed b7       	in	r30, 0x3d	; 61
   13b5c:	fe b7       	in	r31, 0x3e	; 62
   13b5e:	21 83       	std	Z+1, r18	; 0x01
   13b60:	32 83       	std	Z+2, r19	; 0x02
   13b62:	43 83       	std	Z+3, r20	; 0x03
   13b64:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
                    continue;
   13b68:	57 c0       	rjmp	.+174    	; 0x13c18 <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13b6a:	f6 01       	movw	r30, r12
   13b6c:	23 80       	ldd	r2, Z+3	; 0x03
   13b6e:	34 80       	ldd	r3, Z+4	; 0x04
   13b70:	45 80       	ldd	r4, Z+5	; 0x05
   13b72:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13b74:	ed b7       	in	r30, 0x3d	; 61
   13b76:	fe b7       	in	r31, 0x3e	; 62
   13b78:	26 82       	std	Z+6, r2	; 0x06
   13b7a:	37 82       	std	Z+7, r3	; 0x07
   13b7c:	40 86       	std	Z+8, r4	; 0x08
   13b7e:	51 86       	std	Z+9, r5	; 0x09
   13b80:	f5 01       	movw	r30, r10
   13b82:	82 81       	ldd	r24, Z+2	; 0x02
   13b84:	93 81       	ldd	r25, Z+3	; 0x03
   13b86:	ed b7       	in	r30, 0x3d	; 61
   13b88:	fe b7       	in	r31, 0x3e	; 62
   13b8a:	95 83       	std	Z+5, r25	; 0x05
   13b8c:	84 83       	std	Z+4, r24	; 0x04
   13b8e:	a3 96       	adiw	r28, 0x23	; 35
   13b90:	2d ad       	ldd	r18, Y+61	; 0x3d
   13b92:	3e ad       	ldd	r19, Y+62	; 0x3e
   13b94:	4f ad       	ldd	r20, Y+63	; 0x3f
   13b96:	a3 97       	sbiw	r28, 0x23	; 35
   13b98:	21 83       	std	Z+1, r18	; 0x01
   13b9a:	32 83       	std	Z+2, r19	; 0x02
   13b9c:	43 83       	std	Z+3, r20	; 0x03
   13b9e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13ba2:	a0 96       	adiw	r28, 0x20	; 32
   13ba4:	2e ad       	ldd	r18, Y+62	; 0x3e
   13ba6:	3f ad       	ldd	r19, Y+63	; 0x3f
   13ba8:	a0 97       	sbiw	r28, 0x20	; 32
   13baa:	ed b7       	in	r30, 0x3d	; 61
   13bac:	fe b7       	in	r31, 0x3e	; 62
   13bae:	37 83       	std	Z+7, r19	; 0x07
   13bb0:	26 83       	std	Z+6, r18	; 0x06
   13bb2:	a6 96       	adiw	r28, 0x26	; 38
   13bb4:	8d ad       	ldd	r24, Y+61	; 0x3d
   13bb6:	9e ad       	ldd	r25, Y+62	; 0x3e
   13bb8:	af ad       	ldd	r26, Y+63	; 0x3f
   13bba:	a6 97       	sbiw	r28, 0x26	; 38
   13bbc:	83 83       	std	Z+3, r24	; 0x03
   13bbe:	94 83       	std	Z+4, r25	; 0x04
   13bc0:	a5 83       	std	Z+5, r26	; 0x05
   13bc2:	2a e3       	ldi	r18, 0x3A	; 58
   13bc4:	30 e0       	ldi	r19, 0x00	; 0
   13bc6:	2c 0f       	add	r18, r28
   13bc8:	3d 1f       	adc	r19, r29
   13bca:	32 83       	std	Z+2, r19	; 0x02
   13bcc:	21 83       	std	Z+1, r18	; 0x01
   13bce:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13bd2:	f5 01       	movw	r30, r10
   13bd4:	a2 80       	ldd	r10, Z+2	; 0x02
   13bd6:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13bd8:	c2 01       	movw	r24, r4
   13bda:	b1 01       	movw	r22, r2
   13bdc:	c5 d0       	rcall	.+394    	; 0x13d68 <lif_dir_count>
   13bde:	9b 01       	movw	r18, r22
   13be0:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13be2:	82 01       	movw	r16, r4
   13be4:	71 01       	movw	r14, r2
   13be6:	be 01       	movw	r22, r28
   13be8:	66 5c       	subi	r22, 0xC6	; 198
   13bea:	7f 4f       	sbci	r23, 0xFF	; 255
   13bec:	c5 01       	movw	r24, r10
   13bee:	0e 94 fa d8 	call	0x1b1f4	; 0x1b1f4 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13bf2:	6c 96       	adiw	r28, 0x1c	; 28
   13bf4:	2e ad       	ldd	r18, Y+62	; 0x3e
   13bf6:	3f ad       	ldd	r19, Y+63	; 0x3f
   13bf8:	6c 97       	sbiw	r28, 0x1c	; 28
   13bfa:	2f 5f       	subi	r18, 0xFF	; 255
   13bfc:	3f 4f       	sbci	r19, 0xFF	; 255
   13bfe:	6c 96       	adiw	r28, 0x1c	; 28
   13c00:	3f af       	std	Y+63, r19	; 0x3f
   13c02:	2e af       	std	Y+62, r18	; 0x3e
   13c04:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13c06:	a0 96       	adiw	r28, 0x20	; 32
   13c08:	8e ad       	ldd	r24, Y+62	; 0x3e
   13c0a:	9f ad       	ldd	r25, Y+63	; 0x3f
   13c0c:	a0 97       	sbiw	r28, 0x20	; 32
   13c0e:	01 96       	adiw	r24, 0x01	; 1
   13c10:	a0 96       	adiw	r28, 0x20	; 32
   13c12:	9f af       	std	Y+63, r25	; 0x3f
   13c14:	8e af       	std	Y+62, r24	; 0x3e
   13c16:	a0 97       	sbiw	r28, 0x20	; 32
   13c18:	9b e2       	ldi	r25, 0x2B	; 43
   13c1a:	c9 0e       	add	r12, r25
   13c1c:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13c1e:	a4 e0       	ldi	r26, 0x04	; 4
   13c20:	ca 16       	cp	r12, r26
   13c22:	a1 e2       	ldi	r26, 0x21	; 33
   13c24:	da 06       	cpc	r13, r26
   13c26:	09 f0       	breq	.+2      	; 0x13c2a <format_drives+0x2b0>
   13c28:	03 cf       	rjmp	.-506    	; 0x13a30 <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13c2a:	6c 96       	adiw	r28, 0x1c	; 28
   13c2c:	ee ad       	ldd	r30, Y+62	; 0x3e
   13c2e:	ff ad       	ldd	r31, Y+63	; 0x3f
   13c30:	6c 97       	sbiw	r28, 0x1c	; 28
   13c32:	ef 2b       	or	r30, r31
   13c34:	11 f0       	breq	.+4      	; 0x13c3a <format_drives+0x2c0>
        sep();
   13c36:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>
}
   13c3a:	c2 59       	subi	r28, 0x92	; 146
   13c3c:	df 4f       	sbci	r29, 0xFF	; 255
   13c3e:	0f b6       	in	r0, 0x3f	; 63
   13c40:	f8 94       	cli
   13c42:	de bf       	out	0x3e, r29	; 62
   13c44:	0f be       	out	0x3f, r0	; 63
   13c46:	cd bf       	out	0x3d, r28	; 61
   13c48:	df 91       	pop	r29
   13c4a:	cf 91       	pop	r28
   13c4c:	1f 91       	pop	r17
   13c4e:	0f 91       	pop	r16
   13c50:	ff 90       	pop	r15
   13c52:	ef 90       	pop	r14
   13c54:	df 90       	pop	r13
   13c56:	cf 90       	pop	r12
   13c58:	bf 90       	pop	r11
   13c5a:	af 90       	pop	r10
   13c5c:	8f 90       	pop	r8
   13c5e:	7f 90       	pop	r7
   13c60:	6f 90       	pop	r6
   13c62:	5f 90       	pop	r5
   13c64:	4f 90       	pop	r4
   13c66:	3f 90       	pop	r3
   13c68:	2f 90       	pop	r2
   13c6a:	08 95       	ret

00013c6c <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   13c6c:	8f e1       	ldi	r24, 0x1F	; 31
   13c6e:	e4 e0       	ldi	r30, 0x04	; 4
   13c70:	f1 e2       	ldi	r31, 0x21	; 33
   13c72:	df 01       	movw	r26, r30
   13c74:	98 2f       	mov	r25, r24
   13c76:	1d 92       	st	X+, r1
   13c78:	9a 95       	dec	r25
   13c7a:	e9 f7       	brne	.-6      	; 0x13c76 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   13c7c:	9f e3       	ldi	r25, 0x3F	; 63
   13c7e:	e4 e2       	ldi	r30, 0x24	; 36
   13c80:	f1 e2       	ldi	r31, 0x21	; 33
   13c82:	df 01       	movw	r26, r30
   13c84:	1d 92       	st	X+, r1
   13c86:	9a 95       	dec	r25
   13c88:	e9 f7       	brne	.-6      	; 0x13c84 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   13c8a:	e4 e6       	ldi	r30, 0x64	; 100
   13c8c:	f1 e2       	ldi	r31, 0x21	; 33
   13c8e:	df 01       	movw	r26, r30
   13c90:	1d 92       	st	X+, r1
   13c92:	8a 95       	dec	r24
   13c94:	e9 f7       	brne	.-6      	; 0x13c90 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   13c96:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x80>
   13c9a:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0x81>
   13c9e:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x82>
   13ca2:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   13ca6:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0x84>
   13caa:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x85>
   13cae:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x86>
   13cb2:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   13cb6:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0x88>
   13cba:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0x89>
   13cbe:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0x8a>
   13cc2:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   13cc6:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0x8c>
   13cca:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0x8d>
   13cce:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0x8e>
   13cd2:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   13cd6:	81 e0       	ldi	r24, 0x01	; 1
   13cd8:	90 e8       	ldi	r25, 0x80	; 128
   13cda:	a0 e0       	ldi	r26, 0x00	; 0
   13cdc:	b0 e0       	ldi	r27, 0x00	; 0
   13cde:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <hpdir+0x90>
   13ce2:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <hpdir+0x91>
   13ce6:	a0 93 96 21 	sts	0x2196, r26	; 0x802196 <hpdir+0x92>
   13cea:	b0 93 97 21 	sts	0x2197, r27	; 0x802197 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   13cee:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <hpdir+0x94>
   13cf2:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <hpdir+0x95>
   13cf6:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0x96>
   13cfa:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   13cfe:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0x98>
   13d02:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0x99>
   13d06:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <hpdir+0x9a>
   13d0a:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   13d0e:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <hpdir+0x9c>
   13d12:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <hpdir+0x9d>
   13d16:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <hpdir+0x9e>
   13d1a:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   13d1e:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <hpdir+0xa0>
   13d22:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <hpdir+0xa1>
   13d26:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <hpdir+0xa2>
   13d2a:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   13d2e:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <hpdir+0xa4>
   13d32:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <hpdir+0xa5>
   13d36:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <hpdir+0xa6>
   13d3a:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   13d3e:	81 e0       	ldi	r24, 0x01	; 1
   13d40:	90 e0       	ldi	r25, 0x00	; 0
   13d42:	a0 e0       	ldi	r26, 0x00	; 0
   13d44:	b0 e0       	ldi	r27, 0x00	; 0
   13d46:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <hpdir+0xa8>
   13d4a:	90 93 ad 21 	sts	0x21AD, r25	; 0x8021ad <hpdir+0xa9>
   13d4e:	a0 93 ae 21 	sts	0x21AE, r26	; 0x8021ae <hpdir+0xaa>
   13d52:	b0 93 af 21 	sts	0x21AF, r27	; 0x8021af <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   13d56:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <hpdir+0xac>
   13d5a:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <hpdir+0xad>
   13d5e:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <hpdir+0xae>
   13d62:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <hpdir+0xaf>
   13d66:	08 95       	ret

00013d68 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   13d68:	20 e0       	ldi	r18, 0x00	; 0
   13d6a:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   13d6c:	61 15       	cp	r22, r1
   13d6e:	71 05       	cpc	r23, r1
   13d70:	81 05       	cpc	r24, r1
   13d72:	91 05       	cpc	r25, r1
   13d74:	39 f0       	breq	.+14     	; 0x13d84 <lif_dir_count+0x1c>
    {
        scale++;
   13d76:	2f 5f       	subi	r18, 0xFF	; 255
   13d78:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   13d7a:	95 95       	asr	r25
   13d7c:	87 95       	ror	r24
   13d7e:	77 95       	ror	r23
   13d80:	67 95       	ror	r22
   13d82:	f4 cf       	rjmp	.-24     	; 0x13d6c <lif_dir_count+0x4>
    }
    scale>>=1;
   13d84:	35 95       	asr	r19
   13d86:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   13d88:	61 e0       	ldi	r22, 0x01	; 1
   13d8a:	70 e0       	ldi	r23, 0x00	; 0
   13d8c:	80 e0       	ldi	r24, 0x00	; 0
   13d8e:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   13d90:	21 50       	subi	r18, 0x01	; 1
   13d92:	31 09       	sbc	r19, r1
   13d94:	28 f0       	brcs	.+10     	; 0x13da0 <lif_dir_count+0x38>
        num <<=1;
   13d96:	66 0f       	add	r22, r22
   13d98:	77 1f       	adc	r23, r23
   13d9a:	88 1f       	adc	r24, r24
   13d9c:	99 1f       	adc	r25, r25
   13d9e:	f8 cf       	rjmp	.-16     	; 0x13d90 <lif_dir_count+0x28>
    return(num);
}
   13da0:	08 95       	ret

00013da2 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   13da2:	2f 92       	push	r2
   13da4:	3f 92       	push	r3
   13da6:	4f 92       	push	r4
   13da8:	5f 92       	push	r5
   13daa:	6f 92       	push	r6
   13dac:	8f 92       	push	r8
   13dae:	9f 92       	push	r9
   13db0:	af 92       	push	r10
   13db2:	bf 92       	push	r11
   13db4:	cf 92       	push	r12
   13db6:	df 92       	push	r13
   13db8:	ef 92       	push	r14
   13dba:	ff 92       	push	r15
   13dbc:	0f 93       	push	r16
   13dbe:	1f 93       	push	r17
   13dc0:	cf 93       	push	r28
   13dc2:	df 93       	push	r29
   13dc4:	cd b7       	in	r28, 0x3d	; 61
   13dc6:	de b7       	in	r29, 0x3e	; 62
   13dc8:	c9 58       	subi	r28, 0x89	; 137
   13dca:	d1 40       	sbci	r29, 0x01	; 1
   13dcc:	0f b6       	in	r0, 0x3f	; 63
   13dce:	f8 94       	cli
   13dd0:	de bf       	out	0x3e, r29	; 62
   13dd2:	0f be       	out	0x3f, r0	; 63
   13dd4:	cd bf       	out	0x3d, r28	; 61
   13dd6:	6c 01       	movw	r12, r24
   13dd8:	c8 57       	subi	r28, 0x78	; 120
   13dda:	de 4f       	sbci	r29, 0xFE	; 254
   13ddc:	79 83       	std	Y+1, r23	; 0x01
   13dde:	68 83       	st	Y, r22
   13de0:	c8 58       	subi	r28, 0x88	; 136
   13de2:	d1 40       	sbci	r29, 0x01	; 1
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   13de4:	5a 01       	movw	r10, r20

    cfg = fopen("hpdir.ini","rb");
   13de6:	42 df       	rcall	.-380    	; 0x13c6c <hpdir_init>
   13de8:	69 ef       	ldi	r22, 0xF9	; 249
   13dea:	78 e0       	ldi	r23, 0x08	; 8
   13dec:	89 e5       	ldi	r24, 0x59	; 89
   13dee:	90 e1       	ldi	r25, 0x10	; 16
   13df0:	0e 94 b6 7b 	call	0xf76c	; 0xf76c <fopen>

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   13df4:	7c 01       	movw	r14, r24
   13df6:	89 2b       	or	r24, r25
        cfg = fopen("/hpdir.ini","rb");
   13df8:	49 f4       	brne	.+18     	; 0x13e0c <hpdir_find_drive+0x6a>
   13dfa:	69 ef       	ldi	r22, 0xF9	; 249
   13dfc:	78 e0       	ldi	r23, 0x08	; 8
   13dfe:	88 e5       	ldi	r24, 0x58	; 88
   13e00:	90 e1       	ldi	r25, 0x10	; 16
   13e02:	0e 94 b6 7b 	call	0xf76c	; 0xf76c <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   13e06:	7c 01       	movw	r14, r24
   13e08:	89 2b       	or	r24, r25
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   13e0a:	51 f0       	breq	.+20     	; 0x13e20 <hpdir_find_drive+0x7e>
   13e0c:	21 2c       	mov	r2, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   13e0e:	31 2c       	mov	r3, r1
   13e10:	8e 01       	movw	r16, r28
   13e12:	08 5f       	subi	r16, 0xF8	; 248
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   13e14:	1e 4f       	sbci	r17, 0xFE	; 254
   13e16:	8b ef       	ldi	r24, 0xFB	; 251
   13e18:	9c e1       	ldi	r25, 0x1C	; 28
   13e1a:	2c 01       	movw	r4, r24
   13e1c:	61 2c       	mov	r6, r1
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   13e1e:	1e c0       	rjmp	.+60     	; 0x13e5c <hpdir_find_drive+0xba>
   13e20:	ab 28       	or	r10, r11
   13e22:	09 f4       	brne	.+2      	; 0x13e26 <hpdir_find_drive+0x84>
            printf("Error: hpdir.ini not found!\n");
   13e24:	69 c1       	rjmp	.+722    	; 0x140f8 <hpdir_find_drive+0x356>
   13e26:	82 e0       	ldi	r24, 0x02	; 2
   13e28:	9d e1       	ldi	r25, 0x1D	; 29
   13e2a:	a0 e0       	ldi	r26, 0x00	; 0
   13e2c:	ed b7       	in	r30, 0x3d	; 61
   13e2e:	fe b7       	in	r31, 0x3e	; 62
   13e30:	81 83       	std	Z+1, r24	; 0x01
   13e32:	92 83       	std	Z+2, r25	; 0x02
   13e34:	a3 83       	std	Z+3, r26	; 0x03
   13e36:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   13e3a:	5e c1       	rjmp	.+700    	; 0x140f8 <hpdir_find_drive+0x356>
   13e3c:	ce 01       	movw	r24, r28
   13e3e:	08 96       	adiw	r24, 0x08	; 8
   13e40:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <trim_tail>
        ptr = skipspaces(ptr);
   13e44:	ce 01       	movw	r24, r28
   13e46:	08 96       	adiw	r24, 0x08	; 8
   13e48:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <skipspaces>

        len = strlen(ptr);
   13e4c:	fc 01       	movw	r30, r24
   13e4e:	01 90       	ld	r0, Z+
   13e50:	00 20       	and	r0, r0
   13e52:	e9 f7       	brne	.-6      	; 0x13e4e <hpdir_find_drive+0xac>
        if(!len)
   13e54:	31 97       	sbiw	r30, 0x01	; 1
   13e56:	8e 17       	cp	r24, r30
   13e58:	9f 07       	cpc	r25, r31
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13e5a:	51 f4       	brne	.+20     	; 0x13e70 <hpdir_find_drive+0xce>
   13e5c:	a7 01       	movw	r20, r14
   13e5e:	6e ef       	ldi	r22, 0xFE	; 254
   13e60:	70 e0       	ldi	r23, 0x00	; 0
   13e62:	ce 01       	movw	r24, r28
   13e64:	08 96       	adiw	r24, 0x08	; 8
   13e66:	0e 94 ce 73 	call	0xe79c	; 0xe79c <fgets>
   13e6a:	89 2b       	or	r24, r25
   13e6c:	39 f7       	brne	.-50     	; 0x13e3c <hpdir_find_drive+0x9a>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   13e6e:	0c c0       	rjmp	.+24     	; 0x13e88 <hpdir_find_drive+0xe6>
   13e70:	fc 01       	movw	r30, r24
   13e72:	20 81       	ld	r18, Z
   13e74:	2b 33       	cpi	r18, 0x3B	; 59
   13e76:	91 f3       	breq	.-28     	; 0x13e5c <hpdir_find_drive+0xba>
   13e78:	23 32       	cpi	r18, 0x23	; 35
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   13e7a:	81 f3       	breq	.-32     	; 0x13e5c <hpdir_find_drive+0xba>
   13e7c:	2b 35       	cpi	r18, 0x5B	; 91
   13e7e:	31 f4       	brne	.+12     	; 0x13e8c <hpdir_find_drive+0xea>
   13e80:	f1 e0       	ldi	r31, 0x01	; 1
   13e82:	2f 16       	cp	r2, r31
   13e84:	31 04       	cpc	r3, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   13e86:	11 f4       	brne	.+4      	; 0x13e8c <hpdir_find_drive+0xea>
   13e88:	00 e0       	ldi	r16, 0x00	; 0

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   13e8a:	30 c1       	rjmp	.+608    	; 0x140ec <hpdir_find_drive+0x34a>
   13e8c:	4e e7       	ldi	r20, 0x7E	; 126
   13e8e:	50 e0       	ldi	r21, 0x00	; 0
   13e90:	b8 01       	movw	r22, r16
   13e92:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>

        if(MATCHI(token,"[driveinfo]"))
   13e96:	4c 01       	movw	r8, r24
   13e98:	63 e6       	ldi	r22, 0x63	; 99
   13e9a:	70 e1       	ldi	r23, 0x10	; 16
   13e9c:	c8 01       	movw	r24, r16
   13e9e:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   13ea2:	89 2b       	or	r24, r25
        {
            driveinfo = 1;
   13ea4:	21 f0       	breq	.+8      	; 0x13eae <hpdir_find_drive+0x10c>
   13ea6:	22 24       	eor	r2, r2
   13ea8:	23 94       	inc	r2
   13eaa:	31 2c       	mov	r3, r1
            continue;
        }

        if( driveinfo != 1)
   13eac:	d7 cf       	rjmp	.-82     	; 0x13e5c <hpdir_find_drive+0xba>
   13eae:	21 e0       	ldi	r18, 0x01	; 1
   13eb0:	22 16       	cp	r2, r18
   13eb2:	31 04       	cpc	r3, r1
            continue;

        if(list)
   13eb4:	99 f6       	brne	.-90     	; 0x13e5c <hpdir_find_drive+0xba>
   13eb6:	c8 57       	subi	r28, 0x78	; 120
   13eb8:	de 4f       	sbci	r29, 0xFE	; 254
   13eba:	88 81       	ld	r24, Y
   13ebc:	99 81       	ldd	r25, Y+1	; 0x01
   13ebe:	c8 58       	subi	r28, 0x88	; 136
   13ec0:	d1 40       	sbci	r29, 0x01	; 1
   13ec2:	89 2b       	or	r24, r25
        {
            printf("%s %s\n", token, ptr);
   13ec4:	61 f0       	breq	.+24     	; 0x13ede <hpdir_find_drive+0x13c>
   13ec6:	ed b7       	in	r30, 0x3d	; 61
   13ec8:	fe b7       	in	r31, 0x3e	; 62
   13eca:	97 82       	std	Z+7, r9	; 0x07
   13ecc:	86 82       	std	Z+6, r8	; 0x06
   13ece:	15 83       	std	Z+5, r17	; 0x05
   13ed0:	04 83       	std	Z+4, r16	; 0x04
   13ed2:	41 82       	std	Z+1, r4	; 0x01
   13ed4:	52 82       	std	Z+2, r5	; 0x02
   13ed6:	63 82       	std	Z+3, r6	; 0x03
   13ed8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            continue;
        }

        if ( ! MATCHI(model,token) )
   13edc:	bf cf       	rjmp	.-130    	; 0x13e5c <hpdir_find_drive+0xba>
   13ede:	b8 01       	movw	r22, r16
   13ee0:	c6 01       	movw	r24, r12
   13ee2:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
            continue;

        hpdir_init();
   13ee6:	89 2b       	or	r24, r25
   13ee8:	f1 f2       	breq	.-68     	; 0x13ea6 <hpdir_find_drive+0x104>

        if(verbose)
   13eea:	c0 de       	rcall	.-640    	; 0x13c6c <hpdir_init>
   13eec:	ab 28       	or	r10, r11
            printf("Found Model: %s\n", model);
   13eee:	61 f0       	breq	.+24     	; 0x13f08 <hpdir_find_drive+0x166>
   13ef0:	ed b7       	in	r30, 0x3d	; 61
   13ef2:	fe b7       	in	r31, 0x3e	; 62
   13ef4:	d5 82       	std	Z+5, r13	; 0x05
   13ef6:	c4 82       	std	Z+4, r12	; 0x04
   13ef8:	8a ee       	ldi	r24, 0xEA	; 234
   13efa:	9c e1       	ldi	r25, 0x1C	; 28
   13efc:	a0 e0       	ldi	r26, 0x00	; 0
   13efe:	81 83       	std	Z+1, r24	; 0x01
   13f00:	92 83       	std	Z+2, r25	; 0x02
   13f02:	a3 83       	std	Z+3, r26	; 0x03
   13f04:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   13f08:	4e e1       	ldi	r20, 0x1E	; 30
   13f0a:	50 e0       	ldi	r21, 0x00	; 0
   13f0c:	b8 01       	movw	r22, r16
   13f0e:	84 e0       	ldi	r24, 0x04	; 4
   13f10:	91 e2       	ldi	r25, 0x21	; 33
   13f12:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   13f16:	4e e7       	ldi	r20, 0x7E	; 126
   13f18:	50 e0       	ldi	r21, 0x00	; 0
   13f1a:	b8 01       	movw	r22, r16
   13f1c:	c4 01       	movw	r24, r8
   13f1e:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   13f22:	4e e3       	ldi	r20, 0x3E	; 62
   13f24:	50 e0       	ldi	r21, 0x00	; 0
   13f26:	64 e2       	ldi	r22, 0x24	; 36
   13f28:	71 e2       	ldi	r23, 0x21	; 33
   13f2a:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   13f2e:	4e e1       	ldi	r20, 0x1E	; 30
   13f30:	50 e0       	ldi	r21, 0x00	; 0
   13f32:	64 e6       	ldi	r22, 0x64	; 100
   13f34:	71 e2       	ldi	r23, 0x21	; 33
   13f36:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   13f3a:	4e e7       	ldi	r20, 0x7E	; 126
   13f3c:	50 e0       	ldi	r21, 0x00	; 0
   13f3e:	b8 01       	movw	r22, r16
   13f40:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.ID = get_value(token);
   13f44:	6c 01       	movw	r12, r24
   13f46:	c8 01       	movw	r24, r16
   13f48:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   13f4c:	60 93 84 21 	sts	0x2184, r22	; 0x802184 <hpdir+0x80>
   13f50:	70 93 85 21 	sts	0x2185, r23	; 0x802185 <hpdir+0x81>
   13f54:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <hpdir+0x82>
   13f58:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   13f5c:	4e e7       	ldi	r20, 0x7E	; 126
   13f5e:	50 e0       	ldi	r21, 0x00	; 0
   13f60:	b8 01       	movw	r22, r16
   13f62:	c6 01       	movw	r24, r12
   13f64:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.mask_stat2 = get_value(token);
   13f68:	6c 01       	movw	r12, r24
   13f6a:	c8 01       	movw	r24, r16
   13f6c:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   13f70:	60 93 88 21 	sts	0x2188, r22	; 0x802188 <hpdir+0x84>
   13f74:	70 93 89 21 	sts	0x2189, r23	; 0x802189 <hpdir+0x85>
   13f78:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <hpdir+0x86>
   13f7c:	90 93 8b 21 	sts	0x218B, r25	; 0x80218b <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   13f80:	4e e7       	ldi	r20, 0x7E	; 126
   13f82:	50 e0       	ldi	r21, 0x00	; 0
   13f84:	b8 01       	movw	r22, r16
   13f86:	c6 01       	movw	r24, r12
   13f88:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.id_stat2 = get_value(token);
   13f8c:	6c 01       	movw	r12, r24
   13f8e:	c8 01       	movw	r24, r16
   13f90:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   13f94:	60 93 8c 21 	sts	0x218C, r22	; 0x80218c <hpdir+0x88>
   13f98:	70 93 8d 21 	sts	0x218D, r23	; 0x80218d <hpdir+0x89>
   13f9c:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <hpdir+0x8a>
   13fa0:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   13fa4:	4e e7       	ldi	r20, 0x7E	; 126
   13fa6:	50 e0       	ldi	r21, 0x00	; 0
   13fa8:	b8 01       	movw	r22, r16
   13faa:	c6 01       	movw	r24, r12
   13fac:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.DEVICE_NUMBER = get_value(token);
   13fb0:	6c 01       	movw	r12, r24
   13fb2:	c8 01       	movw	r24, r16
   13fb4:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   13fb8:	60 93 90 21 	sts	0x2190, r22	; 0x802190 <hpdir+0x8c>
   13fbc:	70 93 91 21 	sts	0x2191, r23	; 0x802191 <hpdir+0x8d>
   13fc0:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <hpdir+0x8e>
   13fc4:	90 93 93 21 	sts	0x2193, r25	; 0x802193 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   13fc8:	4e e7       	ldi	r20, 0x7E	; 126
   13fca:	50 e0       	ldi	r21, 0x00	; 0
   13fcc:	b8 01       	movw	r22, r16
   13fce:	c6 01       	movw	r24, r12
   13fd0:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.UNITS_INSTALLED = get_value(token);
   13fd4:	6c 01       	movw	r12, r24
   13fd6:	c8 01       	movw	r24, r16
   13fd8:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   13fdc:	60 93 94 21 	sts	0x2194, r22	; 0x802194 <hpdir+0x90>
   13fe0:	70 93 95 21 	sts	0x2195, r23	; 0x802195 <hpdir+0x91>
   13fe4:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <hpdir+0x92>
   13fe8:	90 93 97 21 	sts	0x2197, r25	; 0x802197 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   13fec:	4e e7       	ldi	r20, 0x7E	; 126
   13fee:	50 e0       	ldi	r21, 0x00	; 0
   13ff0:	b8 01       	movw	r22, r16
   13ff2:	c6 01       	movw	r24, r12
   13ff4:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.CYLINDERS = get_value(token);
   13ff8:	6c 01       	movw	r12, r24
   13ffa:	c8 01       	movw	r24, r16
   13ffc:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   14000:	60 93 98 21 	sts	0x2198, r22	; 0x802198 <hpdir+0x94>
   14004:	70 93 99 21 	sts	0x2199, r23	; 0x802199 <hpdir+0x95>
   14008:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <hpdir+0x96>
   1400c:	90 93 9b 21 	sts	0x219B, r25	; 0x80219b <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14010:	4e e7       	ldi	r20, 0x7E	; 126
   14012:	50 e0       	ldi	r21, 0x00	; 0
   14014:	b8 01       	movw	r22, r16
   14016:	c6 01       	movw	r24, r12
   14018:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.HEADS = get_value(token);
   1401c:	6c 01       	movw	r12, r24
   1401e:	c8 01       	movw	r24, r16
   14020:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   14024:	60 93 9c 21 	sts	0x219C, r22	; 0x80219c <hpdir+0x98>
   14028:	70 93 9d 21 	sts	0x219D, r23	; 0x80219d <hpdir+0x99>
   1402c:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <hpdir+0x9a>
   14030:	90 93 9f 21 	sts	0x219F, r25	; 0x80219f <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14034:	4e e7       	ldi	r20, 0x7E	; 126
   14036:	50 e0       	ldi	r21, 0x00	; 0
   14038:	b8 01       	movw	r22, r16
   1403a:	c6 01       	movw	r24, r12
   1403c:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.SECTORS = get_value(token);
   14040:	6c 01       	movw	r12, r24
   14042:	c8 01       	movw	r24, r16
   14044:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   14048:	60 93 a0 21 	sts	0x21A0, r22	; 0x8021a0 <hpdir+0x9c>
   1404c:	70 93 a1 21 	sts	0x21A1, r23	; 0x8021a1 <hpdir+0x9d>
   14050:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <hpdir+0x9e>
   14054:	90 93 a3 21 	sts	0x21A3, r25	; 0x8021a3 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14058:	4e e7       	ldi	r20, 0x7E	; 126
   1405a:	50 e0       	ldi	r21, 0x00	; 0
   1405c:	b8 01       	movw	r22, r16
   1405e:	c6 01       	movw	r24, r12
   14060:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14064:	6c 01       	movw	r12, r24
   14066:	c8 01       	movw	r24, r16
   14068:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   1406c:	60 93 a4 21 	sts	0x21A4, r22	; 0x8021a4 <hpdir+0xa0>
   14070:	70 93 a5 21 	sts	0x21A5, r23	; 0x8021a5 <hpdir+0xa1>
   14074:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <hpdir+0xa2>
   14078:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1407c:	4e e7       	ldi	r20, 0x7E	; 126
   1407e:	50 e0       	ldi	r21, 0x00	; 0
   14080:	b8 01       	movw	r22, r16
   14082:	c6 01       	movw	r24, r12
   14084:	0e 94 30 30 	call	0x6060	; 0x6060 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14088:	c8 01       	movw	r24, r16
   1408a:	0e 94 73 30 	call	0x60e6	; 0x60e6 <get_value>
   1408e:	60 93 a8 21 	sts	0x21A8, r22	; 0x8021a8 <hpdir+0xa4>
   14092:	70 93 a9 21 	sts	0x21A9, r23	; 0x8021a9 <hpdir+0xa5>
   14096:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <hpdir+0xa6>
   1409a:	90 93 ab 21 	sts	0x21AB, r25	; 0x8021ab <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   1409e:	20 91 98 21 	lds	r18, 0x2198	; 0x802198 <hpdir+0x94>
   140a2:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <hpdir+0x95>
   140a6:	40 91 9a 21 	lds	r20, 0x219A	; 0x80219a <hpdir+0x96>
   140aa:	50 91 9b 21 	lds	r21, 0x219B	; 0x80219b <hpdir+0x97>
   140ae:	60 91 9c 21 	lds	r22, 0x219C	; 0x80219c <hpdir+0x98>
   140b2:	70 91 9d 21 	lds	r23, 0x219D	; 0x80219d <hpdir+0x99>
   140b6:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <hpdir+0x9a>
   140ba:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <hpdir+0x9b>
   140be:	0e 94 13 df 	call	0x1be26	; 0x1be26 <__mulsi3>
   140c2:	9b 01       	movw	r18, r22
   140c4:	ac 01       	movw	r20, r24
   140c6:	60 91 a0 21 	lds	r22, 0x21A0	; 0x8021a0 <hpdir+0x9c>
   140ca:	70 91 a1 21 	lds	r23, 0x21A1	; 0x8021a1 <hpdir+0x9d>
   140ce:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <hpdir+0x9e>
   140d2:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <hpdir+0x9f>
   140d6:	0e 94 13 df 	call	0x1be26	; 0x1be26 <__mulsi3>
   140da:	60 93 b0 21 	sts	0x21B0, r22	; 0x8021b0 <hpdir+0xac>
   140de:	70 93 b1 21 	sts	0x21B1, r23	; 0x8021b1 <hpdir+0xad>
   140e2:	80 93 b2 21 	sts	0x21B2, r24	; 0x8021b2 <hpdir+0xae>
   140e6:	90 93 b3 21 	sts	0x21B3, r25	; 0x8021b3 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   140ea:	01 e0       	ldi	r16, 0x01	; 1
        break;

    }                                             // while
    fclose(cfg);
   140ec:	10 e0       	ldi	r17, 0x00	; 0
   140ee:	c7 01       	movw	r24, r14
   140f0:	0e 94 60 7a 	call	0xf4c0	; 0xf4c0 <fclose>
    return(found);
   140f4:	c8 01       	movw	r24, r16

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   140f6:	02 c0       	rjmp	.+4      	; 0x140fc <hpdir_find_drive+0x35a>
   140f8:	80 e0       	ldi	r24, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   140fa:	90 e0       	ldi	r25, 0x00	; 0
   140fc:	c7 57       	subi	r28, 0x77	; 119
   140fe:	de 4f       	sbci	r29, 0xFE	; 254
   14100:	0f b6       	in	r0, 0x3f	; 63
   14102:	f8 94       	cli
   14104:	de bf       	out	0x3e, r29	; 62
   14106:	0f be       	out	0x3f, r0	; 63
   14108:	cd bf       	out	0x3d, r28	; 61
   1410a:	df 91       	pop	r29
   1410c:	cf 91       	pop	r28
   1410e:	1f 91       	pop	r17
   14110:	0f 91       	pop	r16
   14112:	ff 90       	pop	r15
   14114:	ef 90       	pop	r14
   14116:	df 90       	pop	r13
   14118:	cf 90       	pop	r12
   1411a:	bf 90       	pop	r11
   1411c:	af 90       	pop	r10
   1411e:	9f 90       	pop	r9
   14120:	8f 90       	pop	r8
   14122:	6f 90       	pop	r6
   14124:	5f 90       	pop	r5
   14126:	4f 90       	pop	r4
   14128:	3f 90       	pop	r3
   1412a:	2f 90       	pop	r2
   1412c:	08 95       	ret

0001412e <SS80ControllerPack>:
   1412e:	0f 93       	push	r16
   14130:	1f 93       	push	r17
   14132:	25 e0       	ldi	r18, 0x05	; 5
   14134:	30 e0       	ldi	r19, 0x00	; 0
   14136:	fc 01       	movw	r30, r24
   14138:	31 83       	std	Z+1, r19	; 0x01
   1413a:	20 83       	st	Z, r18
   1413c:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14140:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14144:	06 81       	ldd	r16, Z+6	; 0x06
   14146:	17 81       	ldd	r17, Z+7	; 0x07
   14148:	20 e0       	ldi	r18, 0x00	; 0
   1414a:	30 e0       	ldi	r19, 0x00	; 0
   1414c:	42 e0       	ldi	r20, 0x02	; 2
   1414e:	50 e0       	ldi	r21, 0x00	; 0
   14150:	60 e0       	ldi	r22, 0x00	; 0
   14152:	70 e0       	ldi	r23, 0x00	; 0
   14154:	85 ea       	ldi	r24, 0xA5	; 165
   14156:	99 e1       	ldi	r25, 0x19	; 25
   14158:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   1415c:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14160:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14164:	00 85       	ldd	r16, Z+8	; 0x08
   14166:	11 85       	ldd	r17, Z+9	; 0x09
   14168:	20 e0       	ldi	r18, 0x00	; 0
   1416a:	30 e0       	ldi	r19, 0x00	; 0
   1416c:	42 e0       	ldi	r20, 0x02	; 2
   1416e:	50 e0       	ldi	r21, 0x00	; 0
   14170:	61 e0       	ldi	r22, 0x01	; 1
   14172:	70 e0       	ldi	r23, 0x00	; 0
   14174:	85 ea       	ldi	r24, 0xA5	; 165
   14176:	99 e1       	ldi	r25, 0x19	; 25
   14178:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   1417c:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14180:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14184:	02 85       	ldd	r16, Z+10	; 0x0a
   14186:	10 e0       	ldi	r17, 0x00	; 0
   14188:	20 e0       	ldi	r18, 0x00	; 0
   1418a:	30 e0       	ldi	r19, 0x00	; 0
   1418c:	41 e0       	ldi	r20, 0x01	; 1
   1418e:	50 e0       	ldi	r21, 0x00	; 0
   14190:	64 e0       	ldi	r22, 0x04	; 4
   14192:	70 e0       	ldi	r23, 0x00	; 0
   14194:	85 ea       	ldi	r24, 0xA5	; 165
   14196:	99 e1       	ldi	r25, 0x19	; 25
   14198:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   1419c:	85 ea       	ldi	r24, 0xA5	; 165
   1419e:	99 e1       	ldi	r25, 0x19	; 25
   141a0:	1f 91       	pop	r17
   141a2:	0f 91       	pop	r16
   141a4:	08 95       	ret

000141a6 <SS80UnitPack>:
   141a6:	0f 93       	push	r16
   141a8:	1f 93       	push	r17
   141aa:	23 e1       	ldi	r18, 0x13	; 19
   141ac:	30 e0       	ldi	r19, 0x00	; 0
   141ae:	fc 01       	movw	r30, r24
   141b0:	31 83       	std	Z+1, r19	; 0x01
   141b2:	20 83       	st	Z, r18
   141b4:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   141b8:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   141bc:	03 85       	ldd	r16, Z+11	; 0x0b
   141be:	10 e0       	ldi	r17, 0x00	; 0
   141c0:	20 e0       	ldi	r18, 0x00	; 0
   141c2:	30 e0       	ldi	r19, 0x00	; 0
   141c4:	41 e0       	ldi	r20, 0x01	; 1
   141c6:	50 e0       	ldi	r21, 0x00	; 0
   141c8:	60 e0       	ldi	r22, 0x00	; 0
   141ca:	70 e0       	ldi	r23, 0x00	; 0
   141cc:	82 e9       	ldi	r24, 0x92	; 146
   141ce:	99 e1       	ldi	r25, 0x19	; 25
   141d0:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   141d4:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   141d8:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   141dc:	04 85       	ldd	r16, Z+12	; 0x0c
   141de:	15 85       	ldd	r17, Z+13	; 0x0d
   141e0:	26 85       	ldd	r18, Z+14	; 0x0e
   141e2:	37 85       	ldd	r19, Z+15	; 0x0f
   141e4:	43 e0       	ldi	r20, 0x03	; 3
   141e6:	50 e0       	ldi	r21, 0x00	; 0
   141e8:	61 e0       	ldi	r22, 0x01	; 1
   141ea:	70 e0       	ldi	r23, 0x00	; 0
   141ec:	82 e9       	ldi	r24, 0x92	; 146
   141ee:	99 e1       	ldi	r25, 0x19	; 25
   141f0:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   141f4:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   141f8:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   141fc:	00 89       	ldd	r16, Z+16	; 0x10
   141fe:	11 89       	ldd	r17, Z+17	; 0x11
   14200:	20 e0       	ldi	r18, 0x00	; 0
   14202:	30 e0       	ldi	r19, 0x00	; 0
   14204:	42 e0       	ldi	r20, 0x02	; 2
   14206:	50 e0       	ldi	r21, 0x00	; 0
   14208:	64 e0       	ldi	r22, 0x04	; 4
   1420a:	70 e0       	ldi	r23, 0x00	; 0
   1420c:	82 e9       	ldi	r24, 0x92	; 146
   1420e:	99 e1       	ldi	r25, 0x19	; 25
   14210:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   14214:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14218:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1421c:	02 89       	ldd	r16, Z+18	; 0x12
   1421e:	10 e0       	ldi	r17, 0x00	; 0
   14220:	20 e0       	ldi	r18, 0x00	; 0
   14222:	30 e0       	ldi	r19, 0x00	; 0
   14224:	41 e0       	ldi	r20, 0x01	; 1
   14226:	50 e0       	ldi	r21, 0x00	; 0
   14228:	66 e0       	ldi	r22, 0x06	; 6
   1422a:	70 e0       	ldi	r23, 0x00	; 0
   1422c:	82 e9       	ldi	r24, 0x92	; 146
   1422e:	99 e1       	ldi	r25, 0x19	; 25
   14230:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   14234:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14238:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1423c:	03 89       	ldd	r16, Z+19	; 0x13
   1423e:	10 e0       	ldi	r17, 0x00	; 0
   14240:	20 e0       	ldi	r18, 0x00	; 0
   14242:	30 e0       	ldi	r19, 0x00	; 0
   14244:	41 e0       	ldi	r20, 0x01	; 1
   14246:	50 e0       	ldi	r21, 0x00	; 0
   14248:	67 e0       	ldi	r22, 0x07	; 7
   1424a:	70 e0       	ldi	r23, 0x00	; 0
   1424c:	82 e9       	ldi	r24, 0x92	; 146
   1424e:	99 e1       	ldi	r25, 0x19	; 25
   14250:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   14254:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14258:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1425c:	04 89       	ldd	r16, Z+20	; 0x14
   1425e:	15 89       	ldd	r17, Z+21	; 0x15
   14260:	20 e0       	ldi	r18, 0x00	; 0
   14262:	30 e0       	ldi	r19, 0x00	; 0
   14264:	42 e0       	ldi	r20, 0x02	; 2
   14266:	50 e0       	ldi	r21, 0x00	; 0
   14268:	68 e0       	ldi	r22, 0x08	; 8
   1426a:	70 e0       	ldi	r23, 0x00	; 0
   1426c:	82 e9       	ldi	r24, 0x92	; 146
   1426e:	99 e1       	ldi	r25, 0x19	; 25
   14270:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   14274:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14278:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1427c:	06 89       	ldd	r16, Z+22	; 0x16
   1427e:	17 89       	ldd	r17, Z+23	; 0x17
   14280:	20 e0       	ldi	r18, 0x00	; 0
   14282:	30 e0       	ldi	r19, 0x00	; 0
   14284:	42 e0       	ldi	r20, 0x02	; 2
   14286:	50 e0       	ldi	r21, 0x00	; 0
   14288:	6a e0       	ldi	r22, 0x0A	; 10
   1428a:	70 e0       	ldi	r23, 0x00	; 0
   1428c:	82 e9       	ldi	r24, 0x92	; 146
   1428e:	99 e1       	ldi	r25, 0x19	; 25
   14290:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   14294:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14298:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1429c:	00 8d       	ldd	r16, Z+24	; 0x18
   1429e:	11 8d       	ldd	r17, Z+25	; 0x19
   142a0:	20 e0       	ldi	r18, 0x00	; 0
   142a2:	30 e0       	ldi	r19, 0x00	; 0
   142a4:	42 e0       	ldi	r20, 0x02	; 2
   142a6:	50 e0       	ldi	r21, 0x00	; 0
   142a8:	6c e0       	ldi	r22, 0x0C	; 12
   142aa:	70 e0       	ldi	r23, 0x00	; 0
   142ac:	82 e9       	ldi	r24, 0x92	; 146
   142ae:	99 e1       	ldi	r25, 0x19	; 25
   142b0:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   142b4:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   142b8:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   142bc:	02 8d       	ldd	r16, Z+26	; 0x1a
   142be:	13 8d       	ldd	r17, Z+27	; 0x1b
   142c0:	20 e0       	ldi	r18, 0x00	; 0
   142c2:	30 e0       	ldi	r19, 0x00	; 0
   142c4:	42 e0       	ldi	r20, 0x02	; 2
   142c6:	50 e0       	ldi	r21, 0x00	; 0
   142c8:	6e e0       	ldi	r22, 0x0E	; 14
   142ca:	70 e0       	ldi	r23, 0x00	; 0
   142cc:	82 e9       	ldi	r24, 0x92	; 146
   142ce:	99 e1       	ldi	r25, 0x19	; 25
   142d0:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   142d4:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   142d8:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   142dc:	04 8d       	ldd	r16, Z+28	; 0x1c
   142de:	10 e0       	ldi	r17, 0x00	; 0
   142e0:	20 e0       	ldi	r18, 0x00	; 0
   142e2:	30 e0       	ldi	r19, 0x00	; 0
   142e4:	41 e0       	ldi	r20, 0x01	; 1
   142e6:	50 e0       	ldi	r21, 0x00	; 0
   142e8:	60 e1       	ldi	r22, 0x10	; 16
   142ea:	70 e0       	ldi	r23, 0x00	; 0
   142ec:	82 e9       	ldi	r24, 0x92	; 146
   142ee:	99 e1       	ldi	r25, 0x19	; 25
   142f0:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   142f4:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   142f8:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   142fc:	05 8d       	ldd	r16, Z+29	; 0x1d
   142fe:	10 e0       	ldi	r17, 0x00	; 0
   14300:	20 e0       	ldi	r18, 0x00	; 0
   14302:	30 e0       	ldi	r19, 0x00	; 0
   14304:	41 e0       	ldi	r20, 0x01	; 1
   14306:	50 e0       	ldi	r21, 0x00	; 0
   14308:	61 e1       	ldi	r22, 0x11	; 17
   1430a:	70 e0       	ldi	r23, 0x00	; 0
   1430c:	82 e9       	ldi	r24, 0x92	; 146
   1430e:	99 e1       	ldi	r25, 0x19	; 25
   14310:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   14314:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14318:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1431c:	06 8d       	ldd	r16, Z+30	; 0x1e
   1431e:	10 e0       	ldi	r17, 0x00	; 0
   14320:	20 e0       	ldi	r18, 0x00	; 0
   14322:	30 e0       	ldi	r19, 0x00	; 0
   14324:	41 e0       	ldi	r20, 0x01	; 1
   14326:	50 e0       	ldi	r21, 0x00	; 0
   14328:	62 e1       	ldi	r22, 0x12	; 18
   1432a:	70 e0       	ldi	r23, 0x00	; 0
   1432c:	82 e9       	ldi	r24, 0x92	; 146
   1432e:	99 e1       	ldi	r25, 0x19	; 25
   14330:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   14334:	82 e9       	ldi	r24, 0x92	; 146
   14336:	99 e1       	ldi	r25, 0x19	; 25
   14338:	1f 91       	pop	r17
   1433a:	0f 91       	pop	r16
   1433c:	08 95       	ret

0001433e <SS80VolumePack>:
   1433e:	0f 93       	push	r16
   14340:	1f 93       	push	r17
   14342:	2d e0       	ldi	r18, 0x0D	; 13
   14344:	30 e0       	ldi	r19, 0x00	; 0
   14346:	fc 01       	movw	r30, r24
   14348:	31 83       	std	Z+1, r19	; 0x01
   1434a:	20 83       	st	Z, r18
   1434c:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14350:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14354:	07 8d       	ldd	r16, Z+31	; 0x1f
   14356:	10 a1       	ldd	r17, Z+32	; 0x20
   14358:	21 a1       	ldd	r18, Z+33	; 0x21
   1435a:	32 a1       	ldd	r19, Z+34	; 0x22
   1435c:	43 e0       	ldi	r20, 0x03	; 3
   1435e:	50 e0       	ldi	r21, 0x00	; 0
   14360:	60 e0       	ldi	r22, 0x00	; 0
   14362:	70 e0       	ldi	r23, 0x00	; 0
   14364:	85 e8       	ldi	r24, 0x85	; 133
   14366:	99 e1       	ldi	r25, 0x19	; 25
   14368:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   1436c:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14370:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14374:	03 a1       	ldd	r16, Z+35	; 0x23
   14376:	10 e0       	ldi	r17, 0x00	; 0
   14378:	20 e0       	ldi	r18, 0x00	; 0
   1437a:	30 e0       	ldi	r19, 0x00	; 0
   1437c:	41 e0       	ldi	r20, 0x01	; 1
   1437e:	50 e0       	ldi	r21, 0x00	; 0
   14380:	63 e0       	ldi	r22, 0x03	; 3
   14382:	70 e0       	ldi	r23, 0x00	; 0
   14384:	85 e8       	ldi	r24, 0x85	; 133
   14386:	99 e1       	ldi	r25, 0x19	; 25
   14388:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   1438c:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14390:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14394:	04 a1       	ldd	r16, Z+36	; 0x24
   14396:	15 a1       	ldd	r17, Z+37	; 0x25
   14398:	20 e0       	ldi	r18, 0x00	; 0
   1439a:	30 e0       	ldi	r19, 0x00	; 0
   1439c:	42 e0       	ldi	r20, 0x02	; 2
   1439e:	50 e0       	ldi	r21, 0x00	; 0
   143a0:	64 e0       	ldi	r22, 0x04	; 4
   143a2:	70 e0       	ldi	r23, 0x00	; 0
   143a4:	85 e8       	ldi	r24, 0x85	; 133
   143a6:	99 e1       	ldi	r25, 0x19	; 25
   143a8:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   143ac:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   143b0:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   143b4:	06 a1       	ldd	r16, Z+38	; 0x26
   143b6:	17 a1       	ldd	r17, Z+39	; 0x27
   143b8:	20 a5       	ldd	r18, Z+40	; 0x28
   143ba:	31 a5       	ldd	r19, Z+41	; 0x29
   143bc:	46 e0       	ldi	r20, 0x06	; 6
   143be:	50 e0       	ldi	r21, 0x00	; 0
   143c0:	66 e0       	ldi	r22, 0x06	; 6
   143c2:	70 e0       	ldi	r23, 0x00	; 0
   143c4:	85 e8       	ldi	r24, 0x85	; 133
   143c6:	99 e1       	ldi	r25, 0x19	; 25
   143c8:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   143cc:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   143d0:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   143d4:	02 a5       	ldd	r16, Z+42	; 0x2a
   143d6:	10 e0       	ldi	r17, 0x00	; 0
   143d8:	20 e0       	ldi	r18, 0x00	; 0
   143da:	30 e0       	ldi	r19, 0x00	; 0
   143dc:	41 e0       	ldi	r20, 0x01	; 1
   143de:	50 e0       	ldi	r21, 0x00	; 0
   143e0:	6c e0       	ldi	r22, 0x0C	; 12
   143e2:	70 e0       	ldi	r23, 0x00	; 0
   143e4:	85 e8       	ldi	r24, 0x85	; 133
   143e6:	99 e1       	ldi	r25, 0x19	; 25
   143e8:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   143ec:	85 e8       	ldi	r24, 0x85	; 133
   143ee:	99 e1       	ldi	r25, 0x19	; 25
   143f0:	1f 91       	pop	r17
   143f2:	0f 91       	pop	r16
   143f4:	08 95       	ret

000143f6 <SS80_test_extended_status>:
   143f6:	9b 01       	movw	r18, r22
   143f8:	43 e0       	ldi	r20, 0x03	; 3
   143fa:	35 95       	asr	r19
   143fc:	27 95       	ror	r18
   143fe:	4a 95       	dec	r20
   14400:	e1 f7       	brne	.-8      	; 0x143fa <SS80_test_extended_status+0x4>
   14402:	82 0f       	add	r24, r18
   14404:	93 1f       	adc	r25, r19
   14406:	67 70       	andi	r22, 0x07	; 7
   14408:	77 27       	eor	r23, r23
   1440a:	20 e8       	ldi	r18, 0x80	; 128
   1440c:	30 e0       	ldi	r19, 0x00	; 0
   1440e:	02 c0       	rjmp	.+4      	; 0x14414 <SS80_test_extended_status+0x1e>
   14410:	35 95       	asr	r19
   14412:	27 95       	ror	r18
   14414:	6a 95       	dec	r22
   14416:	e2 f7       	brpl	.-8      	; 0x14410 <SS80_test_extended_status+0x1a>
   14418:	fc 01       	movw	r30, r24
   1441a:	80 81       	ld	r24, Z
   1441c:	28 23       	and	r18, r24
   1441e:	81 e0       	ldi	r24, 0x01	; 1
   14420:	90 e0       	ldi	r25, 0x00	; 0
   14422:	11 f4       	brne	.+4      	; 0x14428 <SS80_test_extended_status+0x32>
   14424:	80 e0       	ldi	r24, 0x00	; 0
   14426:	90 e0       	ldi	r25, 0x00	; 0
   14428:	08 95       	ret

0001442a <SS80_display_extended_status>:
   1442a:	6f 92       	push	r6
   1442c:	7f 92       	push	r7
   1442e:	8f 92       	push	r8
   14430:	ef 92       	push	r14
   14432:	ff 92       	push	r15
   14434:	0f 93       	push	r16
   14436:	1f 93       	push	r17
   14438:	cf 93       	push	r28
   1443a:	df 93       	push	r29
   1443c:	ad b7       	in	r26, 0x3d	; 61
   1443e:	be b7       	in	r27, 0x3e	; 62
   14440:	17 97       	sbiw	r26, 0x07	; 7
   14442:	0f b6       	in	r0, 0x3f	; 63
   14444:	f8 94       	cli
   14446:	be bf       	out	0x3e, r27	; 62
   14448:	0f be       	out	0x3f, r0	; 63
   1444a:	ad bf       	out	0x3d, r26	; 61
   1444c:	fc 01       	movw	r30, r24
   1444e:	ac 01       	movw	r20, r24
   14450:	48 5f       	subi	r20, 0xF8	; 248
   14452:	5f 4f       	sbci	r21, 0xFF	; 255
   14454:	20 e0       	ldi	r18, 0x00	; 0
   14456:	30 e0       	ldi	r19, 0x00	; 0
   14458:	a1 91       	ld	r26, Z+
   1445a:	aa 23       	and	r26, r26
   1445c:	11 f0       	breq	.+4      	; 0x14462 <SS80_display_extended_status+0x38>
   1445e:	21 e0       	ldi	r18, 0x01	; 1
   14460:	30 e0       	ldi	r19, 0x00	; 0
   14462:	e4 17       	cp	r30, r20
   14464:	f5 07       	cpc	r31, r21
   14466:	c1 f7       	brne	.-16     	; 0x14458 <SS80_display_extended_status+0x2e>
   14468:	23 2b       	or	r18, r19
   1446a:	81 f1       	breq	.+96     	; 0x144cc <SS80_display_extended_status+0xa2>
   1446c:	ec 01       	movw	r28, r24
   1446e:	ed b7       	in	r30, 0x3d	; 61
   14470:	fe b7       	in	r31, 0x3e	; 62
   14472:	75 83       	std	Z+5, r23	; 0x05
   14474:	64 83       	std	Z+4, r22	; 0x04
   14476:	8b e5       	ldi	r24, 0x5B	; 91
   14478:	93 e2       	ldi	r25, 0x23	; 35
   1447a:	a0 e0       	ldi	r26, 0x00	; 0
   1447c:	81 83       	std	Z+1, r24	; 0x01
   1447e:	92 83       	std	Z+2, r25	; 0x02
   14480:	a3 83       	std	Z+3, r26	; 0x03
   14482:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14486:	0c e7       	ldi	r16, 0x7C	; 124
   14488:	12 e0       	ldi	r17, 0x02	; 2
   1448a:	80 e5       	ldi	r24, 0x50	; 80
   1448c:	93 e2       	ldi	r25, 0x23	; 35
   1448e:	3c 01       	movw	r6, r24
   14490:	81 2c       	mov	r8, r1
   14492:	f8 01       	movw	r30, r16
   14494:	e0 80       	ld	r14, Z
   14496:	f1 80       	ldd	r15, Z+1	; 0x01
   14498:	ff ef       	ldi	r31, 0xFF	; 255
   1449a:	ef 16       	cp	r14, r31
   1449c:	ff 06       	cpc	r15, r31
   1449e:	b1 f0       	breq	.+44     	; 0x144cc <SS80_display_extended_status+0xa2>
   144a0:	b7 01       	movw	r22, r14
   144a2:	ce 01       	movw	r24, r28
   144a4:	a8 df       	rcall	.-176    	; 0x143f6 <SS80_test_extended_status>
   144a6:	89 2b       	or	r24, r25
   144a8:	71 f0       	breq	.+28     	; 0x144c6 <SS80_display_extended_status+0x9c>
   144aa:	f8 01       	movw	r30, r16
   144ac:	82 81       	ldd	r24, Z+2	; 0x02
   144ae:	93 81       	ldd	r25, Z+3	; 0x03
   144b0:	ed b7       	in	r30, 0x3d	; 61
   144b2:	fe b7       	in	r31, 0x3e	; 62
   144b4:	97 83       	std	Z+7, r25	; 0x07
   144b6:	86 83       	std	Z+6, r24	; 0x06
   144b8:	f5 82       	std	Z+5, r15	; 0x05
   144ba:	e4 82       	std	Z+4, r14	; 0x04
   144bc:	61 82       	std	Z+1, r6	; 0x01
   144be:	72 82       	std	Z+2, r7	; 0x02
   144c0:	83 82       	std	Z+3, r8	; 0x03
   144c2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   144c6:	0c 5f       	subi	r16, 0xFC	; 252
   144c8:	1f 4f       	sbci	r17, 0xFF	; 255
   144ca:	e3 cf       	rjmp	.-58     	; 0x14492 <SS80_display_extended_status+0x68>
   144cc:	ad b7       	in	r26, 0x3d	; 61
   144ce:	be b7       	in	r27, 0x3e	; 62
   144d0:	17 96       	adiw	r26, 0x07	; 7
   144d2:	0f b6       	in	r0, 0x3f	; 63
   144d4:	f8 94       	cli
   144d6:	be bf       	out	0x3e, r27	; 62
   144d8:	0f be       	out	0x3f, r0	; 63
   144da:	ad bf       	out	0x3d, r26	; 61
   144dc:	df 91       	pop	r29
   144de:	cf 91       	pop	r28
   144e0:	1f 91       	pop	r17
   144e2:	0f 91       	pop	r16
   144e4:	ff 90       	pop	r15
   144e6:	ef 90       	pop	r14
   144e8:	8f 90       	pop	r8
   144ea:	7f 90       	pop	r7
   144ec:	6f 90       	pop	r6
   144ee:	08 95       	ret

000144f0 <SS80_send_status>:
   144f0:	a9 e1       	ldi	r26, 0x19	; 25
   144f2:	b0 e0       	ldi	r27, 0x00	; 0
   144f4:	ee e7       	ldi	r30, 0x7E	; 126
   144f6:	f2 ea       	ldi	r31, 0xA2	; 162
   144f8:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
   144fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14500:	85 ff       	sbrs	r24, 5
   14502:	0a c0       	rjmp	.+20     	; 0x14518 <SS80_send_status+0x28>
   14504:	8c e3       	ldi	r24, 0x3C	; 60
   14506:	93 e2       	ldi	r25, 0x23	; 35
   14508:	a0 e0       	ldi	r26, 0x00	; 0
   1450a:	ed b7       	in	r30, 0x3d	; 61
   1450c:	fe b7       	in	r31, 0x3e	; 62
   1450e:	81 83       	std	Z+1, r24	; 0x01
   14510:	92 83       	std	Z+2, r25	; 0x02
   14512:	a3 83       	std	Z+3, r26	; 0x03
   14514:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14518:	ce 01       	movw	r24, r28
   1451a:	04 96       	adiw	r24, 0x04	; 4
   1451c:	7c 01       	movw	r14, r24
   1451e:	84 e1       	ldi	r24, 0x14	; 20
   14520:	f7 01       	movw	r30, r14
   14522:	11 92       	st	Z+, r1
   14524:	8a 95       	dec	r24
   14526:	e9 f7       	brne	.-6      	; 0x14522 <SS80_send_status+0x32>
   14528:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1452c:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14530:	86 81       	ldd	r24, Z+6	; 0x06
   14532:	20 e1       	ldi	r18, 0x10	; 16
   14534:	82 9f       	mul	r24, r18
   14536:	c0 01       	movw	r24, r0
   14538:	11 24       	eor	r1, r1
   1453a:	95 81       	ldd	r25, Z+5	; 0x05
   1453c:	9f 70       	andi	r25, 0x0F	; 15
   1453e:	89 2b       	or	r24, r25
   14540:	8c 83       	std	Y+4, r24	; 0x04
   14542:	8f ef       	ldi	r24, 0xFF	; 255
   14544:	8d 83       	std	Y+5, r24	; 0x05
   14546:	83 81       	ldd	r24, Z+3	; 0x03
   14548:	86 ff       	sbrs	r24, 6
   1454a:	02 c0       	rjmp	.+4      	; 0x14550 <SS80_send_status+0x60>
   1454c:	92 e0       	ldi	r25, 0x02	; 2
   1454e:	9e 83       	std	Y+6, r25	; 0x06
   14550:	82 ff       	sbrs	r24, 2
   14552:	03 c0       	rjmp	.+6      	; 0x1455a <SS80_send_status+0x6a>
   14554:	9e 81       	ldd	r25, Y+6	; 0x06
   14556:	91 60       	ori	r25, 0x01	; 1
   14558:	9e 83       	std	Y+6, r25	; 0x06
   1455a:	80 ff       	sbrs	r24, 0
   1455c:	02 c0       	rjmp	.+4      	; 0x14562 <SS80_send_status+0x72>
   1455e:	82 e0       	ldi	r24, 0x02	; 2
   14560:	88 87       	std	Y+8, r24	; 0x08
   14562:	83 81       	ldd	r24, Z+3	; 0x03
   14564:	81 ff       	sbrs	r24, 1
   14566:	03 c0       	rjmp	.+6      	; 0x1456e <SS80_send_status+0x7e>
   14568:	88 85       	ldd	r24, Y+8	; 0x08
   1456a:	82 60       	ori	r24, 0x02	; 2
   1456c:	88 87       	std	Y+8, r24	; 0x08
   1456e:	83 81       	ldd	r24, Z+3	; 0x03
   14570:	83 ff       	sbrs	r24, 3
   14572:	02 c0       	rjmp	.+4      	; 0x14578 <SS80_send_status+0x88>
   14574:	88 e0       	ldi	r24, 0x08	; 8
   14576:	8a 87       	std	Y+10, r24	; 0x0a
   14578:	83 81       	ldd	r24, Z+3	; 0x03
   1457a:	94 81       	ldd	r25, Z+4	; 0x04
   1457c:	89 2b       	or	r24, r25
   1457e:	59 f4       	brne	.+22     	; 0x14596 <SS80_send_status+0xa6>
   14580:	07 81       	ldd	r16, Z+7	; 0x07
   14582:	10 85       	ldd	r17, Z+8	; 0x08
   14584:	21 85       	ldd	r18, Z+9	; 0x09
   14586:	32 85       	ldd	r19, Z+10	; 0x0a
   14588:	46 e0       	ldi	r20, 0x06	; 6
   1458a:	50 e0       	ldi	r21, 0x00	; 0
   1458c:	6a e0       	ldi	r22, 0x0A	; 10
   1458e:	70 e0       	ldi	r23, 0x00	; 0
   14590:	c7 01       	movw	r24, r14
   14592:	0e 94 16 bb 	call	0x1762c	; 0x1762c <V2B_MSB>
   14596:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1459a:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   1459e:	83 81       	ldd	r24, Z+3	; 0x03
   145a0:	94 81       	ldd	r25, Z+4	; 0x04
   145a2:	89 2b       	or	r24, r25
   145a4:	11 f0       	breq	.+4      	; 0x145aa <SS80_send_status+0xba>
   145a6:	81 e0       	ldi	r24, 0x01	; 1
   145a8:	82 83       	std	Z+2, r24	; 0x02
   145aa:	80 e0       	ldi	r24, 0x00	; 0
   145ac:	91 e0       	ldi	r25, 0x01	; 1
   145ae:	99 8f       	std	Y+25, r25	; 0x19
   145b0:	88 8f       	std	Y+24, r24	; 0x18
   145b2:	ae 01       	movw	r20, r28
   145b4:	48 5e       	subi	r20, 0xE8	; 232
   145b6:	5f 4f       	sbci	r21, 0xFF	; 255
   145b8:	64 e1       	ldi	r22, 0x14	; 20
   145ba:	70 e0       	ldi	r23, 0x00	; 0
   145bc:	c7 01       	movw	r24, r14
   145be:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   145c2:	44 97       	sbiw	r24, 0x14	; 20
   145c4:	71 f0       	breq	.+28     	; 0x145e2 <SS80_send_status+0xf2>
   145c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   145ca:	80 ff       	sbrs	r24, 0
   145cc:	0a c0       	rjmp	.+20     	; 0x145e2 <SS80_send_status+0xf2>
   145ce:	81 e2       	ldi	r24, 0x21	; 33
   145d0:	93 e2       	ldi	r25, 0x23	; 35
   145d2:	a0 e0       	ldi	r26, 0x00	; 0
   145d4:	ed b7       	in	r30, 0x3d	; 61
   145d6:	fe b7       	in	r31, 0x3e	; 62
   145d8:	81 83       	std	Z+1, r24	; 0x01
   145da:	92 83       	std	Z+2, r25	; 0x02
   145dc:	a3 83       	std	Z+3, r26	; 0x03
   145de:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   145e2:	88 8d       	ldd	r24, Y+24	; 0x18
   145e4:	99 8d       	ldd	r25, Y+25	; 0x19
   145e6:	88 27       	eor	r24, r24
   145e8:	90 7d       	andi	r25, 0xD0	; 208
   145ea:	69 96       	adiw	r28, 0x19	; 25
   145ec:	e6 e0       	ldi	r30, 0x06	; 6
   145ee:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

000145f2 <SS80_describe>:
   145f2:	a7 e0       	ldi	r26, 0x07	; 7
   145f4:	b0 e0       	ldi	r27, 0x00	; 0
   145f6:	ef ef       	ldi	r30, 0xFF	; 255
   145f8:	f2 ea       	ldi	r31, 0xA2	; 162
   145fa:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   145fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14602:	85 ff       	sbrs	r24, 5
   14604:	0a c0       	rjmp	.+20     	; 0x1461a <SS80_describe+0x28>
   14606:	80 e1       	ldi	r24, 0x10	; 16
   14608:	93 e2       	ldi	r25, 0x23	; 35
   1460a:	a0 e0       	ldi	r26, 0x00	; 0
   1460c:	ed b7       	in	r30, 0x3d	; 61
   1460e:	fe b7       	in	r31, 0x3e	; 62
   14610:	81 83       	std	Z+1, r24	; 0x01
   14612:	92 83       	std	Z+2, r25	; 0x02
   14614:	a3 83       	std	Z+3, r26	; 0x03
   14616:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1461a:	1f 82       	std	Y+7, r1	; 0x07
   1461c:	1e 82       	std	Y+6, r1	; 0x06
   1461e:	ce 01       	movw	r24, r28
   14620:	04 96       	adiw	r24, 0x04	; 4
   14622:	85 dd       	rcall	.-1270   	; 0x1412e <SS80ControllerPack>
   14624:	6c 81       	ldd	r22, Y+4	; 0x04
   14626:	7d 81       	ldd	r23, Y+5	; 0x05
   14628:	ae 01       	movw	r20, r28
   1462a:	4a 5f       	subi	r20, 0xFA	; 250
   1462c:	5f 4f       	sbci	r21, 0xFF	; 255
   1462e:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   14632:	2c 81       	ldd	r18, Y+4	; 0x04
   14634:	3d 81       	ldd	r19, Y+5	; 0x05
   14636:	82 17       	cp	r24, r18
   14638:	93 07       	cpc	r25, r19
   1463a:	39 f0       	breq	.+14     	; 0x1464a <SS80_describe+0x58>
   1463c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14640:	80 ff       	sbrs	r24, 0
   14642:	3c c0       	rjmp	.+120    	; 0x146bc <SS80_describe+0xca>
   14644:	8d ee       	ldi	r24, 0xED	; 237
   14646:	92 e2       	ldi	r25, 0x22	; 34
   14648:	31 c0       	rjmp	.+98     	; 0x146ac <SS80_describe+0xba>
   1464a:	1f 82       	std	Y+7, r1	; 0x07
   1464c:	1e 82       	std	Y+6, r1	; 0x06
   1464e:	ce 01       	movw	r24, r28
   14650:	04 96       	adiw	r24, 0x04	; 4
   14652:	a9 dd       	rcall	.-1198   	; 0x141a6 <SS80UnitPack>
   14654:	6c 81       	ldd	r22, Y+4	; 0x04
   14656:	7d 81       	ldd	r23, Y+5	; 0x05
   14658:	ae 01       	movw	r20, r28
   1465a:	4a 5f       	subi	r20, 0xFA	; 250
   1465c:	5f 4f       	sbci	r21, 0xFF	; 255
   1465e:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   14662:	2c 81       	ldd	r18, Y+4	; 0x04
   14664:	3d 81       	ldd	r19, Y+5	; 0x05
   14666:	82 17       	cp	r24, r18
   14668:	93 07       	cpc	r25, r19
   1466a:	39 f0       	breq	.+14     	; 0x1467a <SS80_describe+0x88>
   1466c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14670:	80 ff       	sbrs	r24, 0
   14672:	24 c0       	rjmp	.+72     	; 0x146bc <SS80_describe+0xca>
   14674:	80 ed       	ldi	r24, 0xD0	; 208
   14676:	92 e2       	ldi	r25, 0x22	; 34
   14678:	19 c0       	rjmp	.+50     	; 0x146ac <SS80_describe+0xba>
   1467a:	80 e0       	ldi	r24, 0x00	; 0
   1467c:	91 e0       	ldi	r25, 0x01	; 1
   1467e:	9f 83       	std	Y+7, r25	; 0x07
   14680:	8e 83       	std	Y+6, r24	; 0x06
   14682:	ce 01       	movw	r24, r28
   14684:	04 96       	adiw	r24, 0x04	; 4
   14686:	5b de       	rcall	.-842    	; 0x1433e <SS80VolumePack>
   14688:	6c 81       	ldd	r22, Y+4	; 0x04
   1468a:	7d 81       	ldd	r23, Y+5	; 0x05
   1468c:	ae 01       	movw	r20, r28
   1468e:	4a 5f       	subi	r20, 0xFA	; 250
   14690:	5f 4f       	sbci	r21, 0xFF	; 255
   14692:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   14696:	2c 81       	ldd	r18, Y+4	; 0x04
   14698:	3d 81       	ldd	r19, Y+5	; 0x05
   1469a:	82 17       	cp	r24, r18
   1469c:	93 07       	cpc	r25, r19
   1469e:	99 f0       	breq	.+38     	; 0x146c6 <SS80_describe+0xd4>
   146a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   146a4:	80 ff       	sbrs	r24, 0
   146a6:	0a c0       	rjmp	.+20     	; 0x146bc <SS80_describe+0xca>
   146a8:	81 eb       	ldi	r24, 0xB1	; 177
   146aa:	92 e2       	ldi	r25, 0x22	; 34
   146ac:	a0 e0       	ldi	r26, 0x00	; 0
   146ae:	ed b7       	in	r30, 0x3d	; 61
   146b0:	fe b7       	in	r31, 0x3e	; 62
   146b2:	81 83       	std	Z+1, r24	; 0x01
   146b4:	92 83       	std	Z+2, r25	; 0x02
   146b6:	a3 83       	std	Z+3, r26	; 0x03
   146b8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   146bc:	8e 81       	ldd	r24, Y+6	; 0x06
   146be:	9f 81       	ldd	r25, Y+7	; 0x07
   146c0:	88 27       	eor	r24, r24
   146c2:	90 7d       	andi	r25, 0xD0	; 208
   146c4:	02 c0       	rjmp	.+4      	; 0x146ca <SS80_describe+0xd8>
   146c6:	80 e0       	ldi	r24, 0x00	; 0
   146c8:	90 e0       	ldi	r25, 0x00	; 0
   146ca:	27 96       	adiw	r28, 0x07	; 7
   146cc:	e2 e0       	ldi	r30, 0x02	; 2
   146ce:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000146d2 <SS80_Check_Unit>:
   146d2:	00 d0       	rcall	.+0      	; 0x146d4 <SS80_Check_Unit+0x2>
   146d4:	00 d0       	rcall	.+0      	; 0x146d6 <SS80_Check_Unit+0x4>
   146d6:	1f 92       	push	r1
   146d8:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   146dc:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   146e0:	88 23       	and	r24, r24
   146e2:	c9 f0       	breq	.+50     	; 0x14716 <SS80_Check_Unit+0x44>
   146e4:	8f 30       	cpi	r24, 0x0F	; 15
   146e6:	b9 f0       	breq	.+46     	; 0x14716 <SS80_Check_Unit+0x44>
   146e8:	23 81       	ldd	r18, Z+3	; 0x03
   146ea:	34 81       	ldd	r19, Z+4	; 0x04
   146ec:	20 64       	ori	r18, 0x40	; 64
   146ee:	34 83       	std	Z+4, r19	; 0x04
   146f0:	23 83       	std	Z+3, r18	; 0x03
   146f2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   146f6:	90 ff       	sbrs	r25, 0
   146f8:	0f c0       	rjmp	.+30     	; 0x14718 <SS80_Check_Unit+0x46>
   146fa:	90 e0       	ldi	r25, 0x00	; 0
   146fc:	ed b7       	in	r30, 0x3d	; 61
   146fe:	fe b7       	in	r31, 0x3e	; 62
   14700:	95 83       	std	Z+5, r25	; 0x05
   14702:	84 83       	std	Z+4, r24	; 0x04
   14704:	89 e9       	ldi	r24, 0x99	; 153
   14706:	92 e2       	ldi	r25, 0x22	; 34
   14708:	a0 e0       	ldi	r26, 0x00	; 0
   1470a:	81 83       	std	Z+1, r24	; 0x01
   1470c:	92 83       	std	Z+2, r25	; 0x02
   1470e:	a3 83       	std	Z+3, r26	; 0x03
   14710:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14714:	01 c0       	rjmp	.+2      	; 0x14718 <SS80_Check_Unit+0x46>
   14716:	85 83       	std	Z+5, r24	; 0x05
   14718:	0f 90       	pop	r0
   1471a:	0f 90       	pop	r0
   1471c:	0f 90       	pop	r0
   1471e:	0f 90       	pop	r0
   14720:	0f 90       	pop	r0
   14722:	08 95       	ret

00014724 <SS80_Check_Volume>:
   14724:	00 d0       	rcall	.+0      	; 0x14726 <SS80_Check_Volume+0x2>
   14726:	00 d0       	rcall	.+0      	; 0x14728 <SS80_Check_Volume+0x4>
   14728:	1f 92       	push	r1
   1472a:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1472e:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14732:	88 23       	and	r24, r24
   14734:	b9 f0       	breq	.+46     	; 0x14764 <SS80_Check_Volume+0x40>
   14736:	23 81       	ldd	r18, Z+3	; 0x03
   14738:	34 81       	ldd	r19, Z+4	; 0x04
   1473a:	20 64       	ori	r18, 0x40	; 64
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   1473c:	34 83       	std	Z+4, r19	; 0x04
   1473e:	23 83       	std	Z+3, r18	; 0x03
   14740:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14744:	90 ff       	sbrs	r25, 0
   14746:	0f c0       	rjmp	.+30     	; 0x14766 <SS80_Check_Volume+0x42>
   14748:	90 e0       	ldi	r25, 0x00	; 0
   1474a:	ed b7       	in	r30, 0x3d	; 61
   1474c:	fe b7       	in	r31, 0x3e	; 62
   1474e:	95 83       	std	Z+5, r25	; 0x05
   14750:	84 83       	std	Z+4, r24	; 0x04
   14752:	8f e7       	ldi	r24, 0x7F	; 127
   14754:	92 e2       	ldi	r25, 0x22	; 34
   14756:	a0 e0       	ldi	r26, 0x00	; 0
   14758:	81 83       	std	Z+1, r24	; 0x01
   1475a:	92 83       	std	Z+2, r25	; 0x02
   1475c:	a3 83       	std	Z+3, r26	; 0x03
   1475e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14762:	01 c0       	rjmp	.+2      	; 0x14766 <SS80_Check_Volume+0x42>
   14764:	16 82       	std	Z+6, r1	; 0x06
   14766:	0f 90       	pop	r0
   14768:	0f 90       	pop	r0
   1476a:	0f 90       	pop	r0
   1476c:	0f 90       	pop	r0
   1476e:	0f 90       	pop	r0
   14770:	08 95       	ret

00014772 <SS80_Command_State>:
   14772:	2f 92       	push	r2
   14774:	3f 92       	push	r3
   14776:	4f 92       	push	r4
   14778:	6f 92       	push	r6
   1477a:	7f 92       	push	r7
   1477c:	8f 92       	push	r8
   1477e:	af 92       	push	r10
   14780:	bf 92       	push	r11
   14782:	cf 92       	push	r12
   14784:	ef 92       	push	r14
   14786:	ff 92       	push	r15
   14788:	0f 93       	push	r16
   1478a:	1f 93       	push	r17
   1478c:	cf 93       	push	r28
   1478e:	df 93       	push	r29
   14790:	cd b7       	in	r28, 0x3d	; 61
   14792:	de b7       	in	r29, 0x3e	; 62
   14794:	66 97       	sbiw	r28, 0x16	; 22
   14796:	0f b6       	in	r0, 0x3f	; 63
   14798:	f8 94       	cli
   1479a:	de bf       	out	0x3e, r29	; 62
   1479c:	0f be       	out	0x3f, r0	; 63
   1479e:	cd bf       	out	0x3d, r28	; 61
   147a0:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   147a4:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   147a8:	81 81       	ldd	r24, Z+1	; 0x01
   147aa:	90 e0       	ldi	r25, 0x00	; 0
   147ac:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
   147b0:	80 e0       	ldi	r24, 0x00	; 0
   147b2:	91 e0       	ldi	r25, 0x01	; 1
   147b4:	99 87       	std	Y+9, r25	; 0x09
   147b6:	88 87       	std	Y+8, r24	; 0x08
   147b8:	ae 01       	movw	r20, r28
   147ba:	48 5f       	subi	r20, 0xF8	; 248
   147bc:	5f 4f       	sbci	r21, 0xFF	; 255
   147be:	60 e0       	ldi	r22, 0x00	; 0
   147c0:	72 e0       	ldi	r23, 0x02	; 2
   147c2:	86 ef       	ldi	r24, 0xF6	; 246
   147c4:	9c e1       	ldi	r25, 0x1C	; 28
   147c6:	0e 94 80 88 	call	0x11100	; 0x11100 <gpib_read_str>
   147ca:	9b 87       	std	Y+11, r25	; 0x0b
   147cc:	8a 87       	std	Y+10, r24	; 0x0a
   147ce:	88 85       	ldd	r24, Y+8	; 0x08
   147d0:	99 85       	ldd	r25, Y+9	; 0x09
   147d2:	9c 01       	movw	r18, r24
   147d4:	22 27       	eor	r18, r18
   147d6:	30 7d       	andi	r19, 0xD0	; 208
   147d8:	23 2b       	or	r18, r19
   147da:	79 f0       	breq	.+30     	; 0x147fa <SS80_Command_State+0x88>
   147dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   147e0:	80 ff       	sbrs	r24, 0
   147e2:	21 c2       	rjmp	.+1090   	; 0x14c26 <SS80_Command_State+0x4b4>
   147e4:	89 e5       	ldi	r24, 0x59	; 89
   147e6:	92 e2       	ldi	r25, 0x22	; 34
   147e8:	a0 e0       	ldi	r26, 0x00	; 0
   147ea:	ed b7       	in	r30, 0x3d	; 61
   147ec:	fe b7       	in	r31, 0x3e	; 62
   147ee:	81 83       	std	Z+1, r24	; 0x01
   147f0:	92 83       	std	Z+2, r25	; 0x02
   147f2:	a3 83       	std	Z+3, r26	; 0x03
   147f4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   147f8:	16 c2       	rjmp	.+1068   	; 0x14c26 <SS80_Command_State+0x4b4>
   147fa:	2a 85       	ldd	r18, Y+10	; 0x0a
   147fc:	3b 85       	ldd	r19, Y+11	; 0x0b
   147fe:	23 2b       	or	r18, r19
   14800:	09 f4       	brne	.+2      	; 0x14804 <SS80_Command_State+0x92>
   14802:	16 c2       	rjmp	.+1068   	; 0x14c30 <SS80_Command_State+0x4be>
   14804:	90 fd       	sbrc	r25, 0
   14806:	0e c0       	rjmp	.+28     	; 0x14824 <SS80_Command_State+0xb2>
   14808:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1480c:	80 ff       	sbrs	r24, 0
   1480e:	0a c0       	rjmp	.+20     	; 0x14824 <SS80_Command_State+0xb2>
   14810:	80 e4       	ldi	r24, 0x40	; 64
   14812:	92 e2       	ldi	r25, 0x22	; 34
   14814:	a0 e0       	ldi	r26, 0x00	; 0
   14816:	ed b7       	in	r30, 0x3d	; 61
   14818:	fe b7       	in	r31, 0x3e	; 62
   1481a:	81 83       	std	Z+1, r24	; 0x01
   1481c:	92 83       	std	Z+2, r25	; 0x02
   1481e:	a3 83       	std	Z+3, r26	; 0x03
   14820:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14824:	e1 2c       	mov	r14, r1
   14826:	f1 2c       	mov	r15, r1
   14828:	84 e4       	ldi	r24, 0x44	; 68
   1482a:	91 e2       	ldi	r25, 0x21	; 33
   1482c:	9c 01       	movw	r18, r24
   1482e:	40 e0       	ldi	r20, 0x00	; 0
   14830:	2e 87       	std	Y+14, r18	; 0x0e
   14832:	3f 87       	std	Y+15, r19	; 0x0f
   14834:	48 8b       	std	Y+16, r20	; 0x10
   14836:	89 e6       	ldi	r24, 0x69	; 105
   14838:	91 e2       	ldi	r25, 0x21	; 33
   1483a:	9c 01       	movw	r18, r24
   1483c:	40 e0       	ldi	r20, 0x00	; 0
   1483e:	29 8b       	std	Y+17, r18	; 0x11
   14840:	3a 8b       	std	Y+18, r19	; 0x12
   14842:	4b 8b       	std	Y+19, r20	; 0x13
   14844:	83 e8       	ldi	r24, 0x83	; 131
   14846:	91 e2       	ldi	r25, 0x21	; 33
   14848:	9c 01       	movw	r18, r24
   1484a:	40 e0       	ldi	r20, 0x00	; 0
   1484c:	2c 8b       	std	Y+20, r18	; 0x14
   1484e:	3d 8b       	std	Y+21, r19	; 0x15
   14850:	4e 8b       	std	Y+22, r20	; 0x16
   14852:	89 e9       	ldi	r24, 0x99	; 153
   14854:	91 e2       	ldi	r25, 0x21	; 33
   14856:	3c 01       	movw	r6, r24
   14858:	81 2c       	mov	r8, r1
   1485a:	87 ea       	ldi	r24, 0xA7	; 167
   1485c:	91 e2       	ldi	r25, 0x21	; 33
   1485e:	5c 01       	movw	r10, r24
   14860:	c1 2c       	mov	r12, r1
   14862:	83 ec       	ldi	r24, 0xC3	; 195
   14864:	91 e2       	ldi	r25, 0x21	; 33
   14866:	1c 01       	movw	r2, r24
   14868:	41 2c       	mov	r4, r1
   1486a:	2a 85       	ldd	r18, Y+10	; 0x0a
   1486c:	3b 85       	ldd	r19, Y+11	; 0x0b
   1486e:	87 01       	movw	r16, r14
   14870:	e2 16       	cp	r14, r18
   14872:	f3 06       	cpc	r15, r19
   14874:	0c f0       	brlt	.+2      	; 0x14878 <SS80_Command_State+0x106>
   14876:	b6 c1       	rjmp	.+876    	; 0x14be4 <SS80_Command_State+0x472>
   14878:	0f 5f       	subi	r16, 0xFF	; 255
   1487a:	1f 4f       	sbci	r17, 0xFF	; 255
   1487c:	f7 01       	movw	r30, r14
   1487e:	ea 50       	subi	r30, 0x0A	; 10
   14880:	f3 4e       	sbci	r31, 0xE3	; 227
   14882:	80 81       	ld	r24, Z
   14884:	28 2f       	mov	r18, r24
   14886:	30 e0       	ldi	r19, 0x00	; 0
   14888:	a9 01       	movw	r20, r18
   1488a:	40 52       	subi	r20, 0x20	; 32
   1488c:	51 09       	sbc	r21, r1
   1488e:	40 31       	cpi	r20, 0x10	; 16
   14890:	51 05       	cpc	r21, r1
   14892:	98 f4       	brcc	.+38     	; 0x148ba <SS80_Command_State+0x148>
   14894:	80 52       	subi	r24, 0x20	; 32
   14896:	1d df       	rcall	.-454    	; 0x146d2 <SS80_Check_Unit>
   14898:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1489c:	85 ff       	sbrs	r24, 5
   1489e:	a0 c1       	rjmp	.+832    	; 0x14be0 <SS80_Command_State+0x46e>
   148a0:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   148a4:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   148a8:	85 81       	ldd	r24, Z+5	; 0x05
   148aa:	90 e0       	ldi	r25, 0x00	; 0
   148ac:	ed b7       	in	r30, 0x3d	; 61
   148ae:	fe b7       	in	r31, 0x3e	; 62
   148b0:	95 83       	std	Z+5, r25	; 0x05
   148b2:	84 83       	std	Z+4, r24	; 0x04
   148b4:	8a e2       	ldi	r24, 0x2A	; 42
   148b6:	92 e2       	ldi	r25, 0x22	; 34
   148b8:	19 c0       	rjmp	.+50     	; 0x148ec <SS80_Command_State+0x17a>
   148ba:	a9 01       	movw	r20, r18
   148bc:	40 54       	subi	r20, 0x40	; 64
   148be:	51 09       	sbc	r21, r1
   148c0:	40 31       	cpi	r20, 0x10	; 16
   148c2:	51 05       	cpc	r21, r1
   148c4:	d0 f4       	brcc	.+52     	; 0x148fa <SS80_Command_State+0x188>
   148c6:	80 54       	subi	r24, 0x40	; 64
   148c8:	2d df       	rcall	.-422    	; 0x14724 <SS80_Check_Volume>
   148ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   148ce:	85 ff       	sbrs	r24, 5
   148d0:	87 c1       	rjmp	.+782    	; 0x14be0 <SS80_Command_State+0x46e>
   148d2:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   148d6:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   148da:	86 81       	ldd	r24, Z+6	; 0x06
   148dc:	90 e0       	ldi	r25, 0x00	; 0
   148de:	ed b7       	in	r30, 0x3d	; 61
   148e0:	fe b7       	in	r31, 0x3e	; 62
   148e2:	95 83       	std	Z+5, r25	; 0x05
   148e4:	84 83       	std	Z+4, r24	; 0x04
   148e6:	21 e1       	ldi	r18, 0x11	; 17
   148e8:	32 e2       	ldi	r19, 0x22	; 34
   148ea:	c9 01       	movw	r24, r18
   148ec:	a0 e0       	ldi	r26, 0x00	; 0
   148ee:	81 83       	std	Z+1, r24	; 0x01
   148f0:	92 83       	std	Z+2, r25	; 0x02
   148f2:	a3 83       	std	Z+3, r26	; 0x03
   148f4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   148f8:	73 c1       	rjmp	.+742    	; 0x14be0 <SS80_Command_State+0x46e>
   148fa:	21 15       	cp	r18, r1
   148fc:	31 05       	cpc	r19, r1
   148fe:	79 f4       	brne	.+30     	; 0x1491e <SS80_Command_State+0x1ac>
   14900:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14904:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14908:	81 e0       	ldi	r24, 0x01	; 1
   1490a:	90 e0       	ldi	r25, 0x00	; 0
   1490c:	91 83       	std	Z+1, r25	; 0x01
   1490e:	80 83       	st	Z, r24
   14910:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14914:	85 ff       	sbrs	r24, 5
   14916:	66 c1       	rjmp	.+716    	; 0x14be4 <SS80_Command_State+0x472>
   14918:	89 ef       	ldi	r24, 0xF9	; 249
   1491a:	91 e2       	ldi	r25, 0x21	; 33
   1491c:	0f c0       	rjmp	.+30     	; 0x1493c <SS80_Command_State+0x1ca>
   1491e:	22 30       	cpi	r18, 0x02	; 2
   14920:	31 05       	cpc	r19, r1
   14922:	a9 f4       	brne	.+42     	; 0x1494e <SS80_Command_State+0x1dc>
   14924:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14928:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   1492c:	31 83       	std	Z+1, r19	; 0x01
   1492e:	20 83       	st	Z, r18
   14930:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14934:	85 ff       	sbrs	r24, 5
   14936:	56 c1       	rjmp	.+684    	; 0x14be4 <SS80_Command_State+0x472>
   14938:	80 ee       	ldi	r24, 0xE0	; 224
   1493a:	91 e2       	ldi	r25, 0x21	; 33
   1493c:	a0 e0       	ldi	r26, 0x00	; 0
   1493e:	ed b7       	in	r30, 0x3d	; 61
   14940:	fe b7       	in	r31, 0x3e	; 62
   14942:	81 83       	std	Z+1, r24	; 0x01
   14944:	92 83       	std	Z+2, r25	; 0x02
   14946:	a3 83       	std	Z+3, r26	; 0x03
   14948:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1494c:	4b c1       	rjmp	.+662    	; 0x14be4 <SS80_Command_State+0x472>
   1494e:	20 31       	cpi	r18, 0x10	; 16
   14950:	31 05       	cpc	r19, r1
   14952:	b1 f5       	brne	.+108    	; 0x149c0 <SS80_Command_State+0x24e>
   14954:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <SS80s>
   14958:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <SS80s+0x1>
   1495c:	3d 87       	std	Y+13, r19	; 0x0d
   1495e:	2c 87       	std	Y+12, r18	; 0x0c
   14960:	46 e0       	ldi	r20, 0x06	; 6
   14962:	50 e0       	ldi	r21, 0x00	; 0
   14964:	b8 01       	movw	r22, r16
   14966:	86 ef       	ldi	r24, 0xF6	; 246
   14968:	9c e1       	ldi	r25, 0x1C	; 28
   1496a:	0e 94 3f bb 	call	0x1767e	; 0x1767e <B2V_MSB>
   1496e:	ec 85       	ldd	r30, Y+12	; 0x0c
   14970:	fd 85       	ldd	r31, Y+13	; 0x0d
   14972:	67 83       	std	Z+7, r22	; 0x07
   14974:	70 87       	std	Z+8, r23	; 0x08
   14976:	81 87       	std	Z+9, r24	; 0x09
   14978:	92 87       	std	Z+10, r25	; 0x0a
   1497a:	87 01       	movw	r16, r14
   1497c:	09 5f       	subi	r16, 0xF9	; 249
   1497e:	1f 4f       	sbci	r17, 0xFF	; 255
   14980:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14984:	85 ff       	sbrs	r24, 5
   14986:	2c c1       	rjmp	.+600    	; 0x14be0 <SS80_Command_State+0x46e>
   14988:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <SS80s>
   1498c:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <SS80s+0x1>
   14990:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <SS80p>
   14994:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <SS80p+0x1>
   14998:	fc 01       	movw	r30, r24
   1499a:	a0 89       	ldd	r26, Z+16	; 0x10
   1499c:	b1 89       	ldd	r27, Z+17	; 0x11
   1499e:	f9 01       	movw	r30, r18
   149a0:	27 81       	ldd	r18, Z+7	; 0x07
   149a2:	30 85       	ldd	r19, Z+8	; 0x08
   149a4:	41 85       	ldd	r20, Z+9	; 0x09
   149a6:	52 85       	ldd	r21, Z+10	; 0x0a
   149a8:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
   149ac:	ed b7       	in	r30, 0x3d	; 61
   149ae:	fe b7       	in	r31, 0x3e	; 62
   149b0:	64 83       	std	Z+4, r22	; 0x04
   149b2:	75 83       	std	Z+5, r23	; 0x05
   149b4:	86 83       	std	Z+6, r24	; 0x06
   149b6:	97 83       	std	Z+7, r25	; 0x07
   149b8:	21 82       	std	Z+1, r2	; 0x01
   149ba:	32 82       	std	Z+2, r3	; 0x02
   149bc:	43 82       	std	Z+3, r4	; 0x03
   149be:	2e c0       	rjmp	.+92     	; 0x14a1c <SS80_Command_State+0x2aa>
   149c0:	28 31       	cpi	r18, 0x18	; 24
   149c2:	31 05       	cpc	r19, r1
   149c4:	71 f5       	brne	.+92     	; 0x14a22 <SS80_Command_State+0x2b0>
   149c6:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <SS80s>
   149ca:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <SS80s+0x1>
   149ce:	3d 87       	std	Y+13, r19	; 0x0d
   149d0:	2c 87       	std	Y+12, r18	; 0x0c
   149d2:	44 e0       	ldi	r20, 0x04	; 4
   149d4:	50 e0       	ldi	r21, 0x00	; 0
   149d6:	b8 01       	movw	r22, r16
   149d8:	86 ef       	ldi	r24, 0xF6	; 246
   149da:	9c e1       	ldi	r25, 0x1C	; 28
   149dc:	0e 94 3f bb 	call	0x1767e	; 0x1767e <B2V_MSB>
   149e0:	ec 85       	ldd	r30, Y+12	; 0x0c
   149e2:	fd 85       	ldd	r31, Y+13	; 0x0d
   149e4:	63 87       	std	Z+11, r22	; 0x0b
   149e6:	74 87       	std	Z+12, r23	; 0x0c
   149e8:	85 87       	std	Z+13, r24	; 0x0d
   149ea:	96 87       	std	Z+14, r25	; 0x0e
   149ec:	87 01       	movw	r16, r14
   149ee:	0b 5f       	subi	r16, 0xFB	; 251
   149f0:	1f 4f       	sbci	r17, 0xFF	; 255
   149f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149f6:	85 ff       	sbrs	r24, 5
   149f8:	f3 c0       	rjmp	.+486    	; 0x14be0 <SS80_Command_State+0x46e>
   149fa:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   149fe:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14a02:	83 85       	ldd	r24, Z+11	; 0x0b
   14a04:	94 85       	ldd	r25, Z+12	; 0x0c
   14a06:	a5 85       	ldd	r26, Z+13	; 0x0d
   14a08:	b6 85       	ldd	r27, Z+14	; 0x0e
   14a0a:	ed b7       	in	r30, 0x3d	; 61
   14a0c:	fe b7       	in	r31, 0x3e	; 62
   14a0e:	84 83       	std	Z+4, r24	; 0x04
   14a10:	95 83       	std	Z+5, r25	; 0x05
   14a12:	a6 83       	std	Z+6, r26	; 0x06
   14a14:	b7 83       	std	Z+7, r27	; 0x07
   14a16:	a1 82       	std	Z+1, r10	; 0x01
   14a18:	b2 82       	std	Z+2, r11	; 0x02
   14a1a:	c3 82       	std	Z+3, r12	; 0x03
   14a1c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14a20:	df c0       	rjmp	.+446    	; 0x14be0 <SS80_Command_State+0x46e>
   14a22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a26:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14a2a:	24 33       	cpi	r18, 0x34	; 52
   14a2c:	31 05       	cpc	r19, r1
   14a2e:	41 f4       	brne	.+16     	; 0x14a40 <SS80_Command_State+0x2ce>
   14a30:	85 ff       	sbrs	r24, 5
   14a32:	d6 c0       	rjmp	.+428    	; 0x14be0 <SS80_Command_State+0x46e>
   14a34:	ed b7       	in	r30, 0x3d	; 61
   14a36:	fe b7       	in	r31, 0x3e	; 62
   14a38:	61 82       	std	Z+1, r6	; 0x01
   14a3a:	72 82       	std	Z+2, r7	; 0x02
   14a3c:	83 82       	std	Z+3, r8	; 0x03
   14a3e:	2b c0       	rjmp	.+86     	; 0x14a96 <SS80_Command_State+0x324>
   14a40:	29 33       	cpi	r18, 0x39	; 57
   14a42:	31 05       	cpc	r19, r1
   14a44:	49 f4       	brne	.+18     	; 0x14a58 <SS80_Command_State+0x2e6>
   14a46:	87 01       	movw	r16, r14
   14a48:	0d 5f       	subi	r16, 0xFD	; 253
   14a4a:	1f 4f       	sbci	r17, 0xFF	; 255
   14a4c:	85 ff       	sbrs	r24, 5
   14a4e:	c8 c0       	rjmp	.+400    	; 0x14be0 <SS80_Command_State+0x46e>
   14a50:	2c 89       	ldd	r18, Y+20	; 0x14
   14a52:	3d 89       	ldd	r19, Y+21	; 0x15
   14a54:	4e 89       	ldd	r20, Y+22	; 0x16
   14a56:	1a c0       	rjmp	.+52     	; 0x14a8c <SS80_Command_State+0x31a>
   14a58:	2b 33       	cpi	r18, 0x3B	; 59
   14a5a:	31 05       	cpc	r19, r1
   14a5c:	49 f4       	brne	.+18     	; 0x14a70 <SS80_Command_State+0x2fe>
   14a5e:	87 01       	movw	r16, r14
   14a60:	0e 5f       	subi	r16, 0xFE	; 254
   14a62:	1f 4f       	sbci	r17, 0xFF	; 255
   14a64:	85 ff       	sbrs	r24, 5
   14a66:	bc c0       	rjmp	.+376    	; 0x14be0 <SS80_Command_State+0x46e>
   14a68:	29 89       	ldd	r18, Y+17	; 0x11
   14a6a:	3a 89       	ldd	r19, Y+18	; 0x12
   14a6c:	4b 89       	ldd	r20, Y+19	; 0x13
   14a6e:	0e c0       	rjmp	.+28     	; 0x14a8c <SS80_Command_State+0x31a>
   14a70:	28 34       	cpi	r18, 0x48	; 72
   14a72:	31 05       	cpc	r19, r1
   14a74:	99 f4       	brne	.+38     	; 0x14a9c <SS80_Command_State+0x32a>
   14a76:	87 01       	movw	r16, r14
   14a78:	0e 5f       	subi	r16, 0xFE	; 254
   14a7a:	1f 4f       	sbci	r17, 0xFF	; 255
   14a7c:	80 73       	andi	r24, 0x30	; 48
   14a7e:	99 27       	eor	r25, r25
   14a80:	89 2b       	or	r24, r25
   14a82:	09 f4       	brne	.+2      	; 0x14a86 <SS80_Command_State+0x314>
   14a84:	ad c0       	rjmp	.+346    	; 0x14be0 <SS80_Command_State+0x46e>
   14a86:	2e 85       	ldd	r18, Y+14	; 0x0e
   14a88:	3f 85       	ldd	r19, Y+15	; 0x0f
   14a8a:	48 89       	ldd	r20, Y+16	; 0x10
   14a8c:	ed b7       	in	r30, 0x3d	; 61
   14a8e:	fe b7       	in	r31, 0x3e	; 62
   14a90:	21 83       	std	Z+1, r18	; 0x01
   14a92:	32 83       	std	Z+2, r19	; 0x02
   14a94:	43 83       	std	Z+3, r20	; 0x03
   14a96:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14a9a:	a2 c0       	rjmp	.+324    	; 0x14be0 <SS80_Command_State+0x46e>
   14a9c:	24 30       	cpi	r18, 0x04	; 4
   14a9e:	31 05       	cpc	r19, r1
   14aa0:	41 f4       	brne	.+16     	; 0x14ab2 <SS80_Command_State+0x340>
   14aa2:	80 73       	andi	r24, 0x30	; 48
   14aa4:	99 27       	eor	r25, r25
   14aa6:	89 2b       	or	r24, r25
   14aa8:	09 f4       	brne	.+2      	; 0x14aac <SS80_Command_State+0x33a>
   14aaa:	9c c0       	rjmp	.+312    	; 0x14be4 <SS80_Command_State+0x472>
   14aac:	83 e2       	ldi	r24, 0x23	; 35
   14aae:	91 e2       	ldi	r25, 0x21	; 33
   14ab0:	45 cf       	rjmp	.-374    	; 0x1493c <SS80_Command_State+0x1ca>
   14ab2:	2e 30       	cpi	r18, 0x0E	; 14
   14ab4:	31 05       	cpc	r19, r1
   14ab6:	29 f4       	brne	.+10     	; 0x14ac2 <SS80_Command_State+0x350>
   14ab8:	85 ff       	sbrs	r24, 5
   14aba:	94 c0       	rjmp	.+296    	; 0x14be4 <SS80_Command_State+0x472>
   14abc:	8d e0       	ldi	r24, 0x0D	; 13
   14abe:	91 e2       	ldi	r25, 0x21	; 33
   14ac0:	3d cf       	rjmp	.-390    	; 0x1493c <SS80_Command_State+0x1ca>
   14ac2:	2f 30       	cpi	r18, 0x0F	; 15
   14ac4:	31 05       	cpc	r19, r1
   14ac6:	29 f4       	brne	.+10     	; 0x14ad2 <SS80_Command_State+0x360>
   14ac8:	85 ff       	sbrs	r24, 5
   14aca:	8c c0       	rjmp	.+280    	; 0x14be4 <SS80_Command_State+0x472>
   14acc:	80 ef       	ldi	r24, 0xF0	; 240
   14ace:	90 e2       	ldi	r25, 0x20	; 32
   14ad0:	35 cf       	rjmp	.-406    	; 0x1493c <SS80_Command_State+0x1ca>
   14ad2:	21 33       	cpi	r18, 0x31	; 49
   14ad4:	31 05       	cpc	r19, r1
   14ad6:	59 f4       	brne	.+22     	; 0x14aee <SS80_Command_State+0x37c>
   14ad8:	87 01       	movw	r16, r14
   14ada:	0d 5f       	subi	r16, 0xFD	; 253
   14adc:	1f 4f       	sbci	r17, 0xFF	; 255
   14ade:	80 73       	andi	r24, 0x30	; 48
   14ae0:	99 27       	eor	r25, r25
   14ae2:	89 2b       	or	r24, r25
   14ae4:	09 f4       	brne	.+2      	; 0x14ae8 <SS80_Command_State+0x376>
   14ae6:	7e c0       	rjmp	.+252    	; 0x14be4 <SS80_Command_State+0x472>
   14ae8:	84 ed       	ldi	r24, 0xD4	; 212
   14aea:	90 e2       	ldi	r25, 0x20	; 32
   14aec:	27 cf       	rjmp	.-434    	; 0x1493c <SS80_Command_State+0x1ca>
   14aee:	25 33       	cpi	r18, 0x35	; 53
   14af0:	31 05       	cpc	r19, r1
   14af2:	69 f4       	brne	.+26     	; 0x14b0e <SS80_Command_State+0x39c>
   14af4:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14af8:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14afc:	24 e0       	ldi	r18, 0x04	; 4
   14afe:	30 e0       	ldi	r19, 0x00	; 0
   14b00:	31 83       	std	Z+1, r19	; 0x01
   14b02:	20 83       	st	Z, r18
   14b04:	85 ff       	sbrs	r24, 5
   14b06:	6e c0       	rjmp	.+220    	; 0x14be4 <SS80_Command_State+0x472>
   14b08:	83 ec       	ldi	r24, 0xC3	; 195
   14b0a:	90 e2       	ldi	r25, 0x20	; 32
   14b0c:	17 cf       	rjmp	.-466    	; 0x1493c <SS80_Command_State+0x1ca>
   14b0e:	27 33       	cpi	r18, 0x37	; 55
   14b10:	31 05       	cpc	r19, r1
   14b12:	59 f4       	brne	.+22     	; 0x14b2a <SS80_Command_State+0x3b8>
   14b14:	87 01       	movw	r16, r14
   14b16:	0d 5f       	subi	r16, 0xFD	; 253
   14b18:	1f 4f       	sbci	r17, 0xFF	; 255
   14b1a:	80 73       	andi	r24, 0x30	; 48
   14b1c:	99 27       	eor	r25, r25
   14b1e:	89 2b       	or	r24, r25
   14b20:	09 f4       	brne	.+2      	; 0x14b24 <SS80_Command_State+0x3b2>
   14b22:	60 c0       	rjmp	.+192    	; 0x14be4 <SS80_Command_State+0x472>
   14b24:	85 ea       	ldi	r24, 0xA5	; 165
   14b26:	90 e2       	ldi	r25, 0x20	; 32
   14b28:	09 cf       	rjmp	.-494    	; 0x1493c <SS80_Command_State+0x1ca>
   14b2a:	2e 33       	cpi	r18, 0x3E	; 62
   14b2c:	31 05       	cpc	r19, r1
   14b2e:	c1 f4       	brne	.+48     	; 0x14b60 <SS80_Command_State+0x3ee>
   14b30:	80 73       	andi	r24, 0x30	; 48
   14b32:	99 27       	eor	r25, r25
   14b34:	89 2b       	or	r24, r25
   14b36:	81 f0       	breq	.+32     	; 0x14b58 <SS80_Command_State+0x3e6>
   14b38:	86 e8       	ldi	r24, 0x86	; 134
   14b3a:	90 e2       	ldi	r25, 0x20	; 32
   14b3c:	a0 e0       	ldi	r26, 0x00	; 0
   14b3e:	ed b7       	in	r30, 0x3d	; 61
   14b40:	fe b7       	in	r31, 0x3e	; 62
   14b42:	81 83       	std	Z+1, r24	; 0x01
   14b44:	92 83       	std	Z+2, r25	; 0x02
   14b46:	a3 83       	std	Z+3, r26	; 0x03
   14b48:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14b4c:	6f e6       	ldi	r22, 0x6F	; 111
   14b4e:	70 e1       	ldi	r23, 0x10	; 16
   14b50:	c8 01       	movw	r24, r16
   14b52:	8a 50       	subi	r24, 0x0A	; 10
   14b54:	93 4e       	sbci	r25, 0xE3	; 227
   14b56:	69 dc       	rcall	.-1838   	; 0x1442a <SS80_display_extended_status>
   14b58:	87 01       	movw	r16, r14
   14b5a:	07 5f       	subi	r16, 0xF7	; 247
   14b5c:	1f 4f       	sbci	r17, 0xFF	; 255
   14b5e:	42 c0       	rjmp	.+132    	; 0x14be4 <SS80_Command_State+0x472>
   14b60:	2c 34       	cpi	r18, 0x4C	; 76
   14b62:	31 05       	cpc	r19, r1
   14b64:	39 f4       	brne	.+14     	; 0x14b74 <SS80_Command_State+0x402>
   14b66:	80 73       	andi	r24, 0x30	; 48
   14b68:	99 27       	eor	r25, r25
   14b6a:	89 2b       	or	r24, r25
   14b6c:	d9 f1       	breq	.+118    	; 0x14be4 <SS80_Command_State+0x472>
   14b6e:	8b e6       	ldi	r24, 0x6B	; 107
   14b70:	90 e2       	ldi	r25, 0x20	; 32
   14b72:	e4 ce       	rjmp	.-568    	; 0x1493c <SS80_Command_State+0x1ca>
   14b74:	2d 34       	cpi	r18, 0x4D	; 77
   14b76:	31 05       	cpc	r19, r1
   14b78:	39 f4       	brne	.+14     	; 0x14b88 <SS80_Command_State+0x416>
   14b7a:	80 73       	andi	r24, 0x30	; 48
   14b7c:	99 27       	eor	r25, r25
   14b7e:	89 2b       	or	r24, r25
   14b80:	89 f1       	breq	.+98     	; 0x14be4 <SS80_Command_State+0x472>
   14b82:	82 e5       	ldi	r24, 0x52	; 82
   14b84:	90 e2       	ldi	r25, 0x20	; 32
   14b86:	da ce       	rjmp	.-588    	; 0x1493c <SS80_Command_State+0x1ca>
   14b88:	2d 30       	cpi	r18, 0x0D	; 13
   14b8a:	31 05       	cpc	r19, r1
   14b8c:	69 f4       	brne	.+26     	; 0x14ba8 <SS80_Command_State+0x436>
   14b8e:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14b92:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14b96:	23 e0       	ldi	r18, 0x03	; 3
   14b98:	30 e0       	ldi	r19, 0x00	; 0
   14b9a:	31 83       	std	Z+1, r19	; 0x01
   14b9c:	20 83       	st	Z, r18
   14b9e:	85 ff       	sbrs	r24, 5
   14ba0:	21 c0       	rjmp	.+66     	; 0x14be4 <SS80_Command_State+0x472>
   14ba2:	8b e3       	ldi	r24, 0x3B	; 59
   14ba4:	90 e2       	ldi	r25, 0x20	; 32
   14ba6:	ca ce       	rjmp	.-620    	; 0x1493c <SS80_Command_State+0x1ca>
   14ba8:	23 33       	cpi	r18, 0x33	; 51
   14baa:	31 05       	cpc	r19, r1
   14bac:	51 f4       	brne	.+20     	; 0x14bc2 <SS80_Command_State+0x450>
   14bae:	87 01       	movw	r16, r14
   14bb0:	0c 5f       	subi	r16, 0xFC	; 252
   14bb2:	1f 4f       	sbci	r17, 0xFF	; 255
   14bb4:	80 73       	andi	r24, 0x30	; 48
   14bb6:	99 27       	eor	r25, r25
   14bb8:	89 2b       	or	r24, r25
   14bba:	a1 f0       	breq	.+40     	; 0x14be4 <SS80_Command_State+0x472>
   14bbc:	88 e1       	ldi	r24, 0x18	; 24
   14bbe:	90 e2       	ldi	r25, 0x20	; 32
   14bc0:	bd ce       	rjmp	.-646    	; 0x1493c <SS80_Command_State+0x1ca>
   14bc2:	80 ff       	sbrs	r24, 0
   14bc4:	28 c0       	rjmp	.+80     	; 0x14c16 <SS80_Command_State+0x4a4>
   14bc6:	ed b7       	in	r30, 0x3d	; 61
   14bc8:	fe b7       	in	r31, 0x3e	; 62
   14bca:	35 83       	std	Z+5, r19	; 0x05
   14bcc:	24 83       	std	Z+4, r18	; 0x04
   14bce:	88 ef       	ldi	r24, 0xF8	; 248
   14bd0:	9f e1       	ldi	r25, 0x1F	; 31
   14bd2:	a0 e0       	ldi	r26, 0x00	; 0
   14bd4:	81 83       	std	Z+1, r24	; 0x01
   14bd6:	92 83       	std	Z+2, r25	; 0x02
   14bd8:	a3 83       	std	Z+3, r26	; 0x03
   14bda:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14bde:	02 c0       	rjmp	.+4      	; 0x14be4 <SS80_Command_State+0x472>
   14be0:	78 01       	movw	r14, r16
   14be2:	43 ce       	rjmp	.-890    	; 0x1486a <SS80_Command_State+0xf8>
   14be4:	8a 85       	ldd	r24, Y+10	; 0x0a
   14be6:	9b 85       	ldd	r25, Y+11	; 0x0b
   14be8:	08 17       	cp	r16, r24
   14bea:	19 07       	cpc	r17, r25
   14bec:	a1 f0       	breq	.+40     	; 0x14c16 <SS80_Command_State+0x4a4>
   14bee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bf2:	80 ff       	sbrs	r24, 0
   14bf4:	10 c0       	rjmp	.+32     	; 0x14c16 <SS80_Command_State+0x4a4>
   14bf6:	2a 85       	ldd	r18, Y+10	; 0x0a
   14bf8:	3b 85       	ldd	r19, Y+11	; 0x0b
   14bfa:	ed b7       	in	r30, 0x3d	; 61
   14bfc:	fe b7       	in	r31, 0x3e	; 62
   14bfe:	37 83       	std	Z+7, r19	; 0x07
   14c00:	26 83       	std	Z+6, r18	; 0x06
   14c02:	15 83       	std	Z+5, r17	; 0x05
   14c04:	04 83       	std	Z+4, r16	; 0x04
   14c06:	80 ec       	ldi	r24, 0xC0	; 192
   14c08:	9f e1       	ldi	r25, 0x1F	; 31
   14c0a:	a0 e0       	ldi	r26, 0x00	; 0
   14c0c:	81 83       	std	Z+1, r24	; 0x01
   14c0e:	92 83       	std	Z+2, r25	; 0x02
   14c10:	a3 83       	std	Z+3, r26	; 0x03
   14c12:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14c16:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14c1a:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14c1e:	81 81       	ldd	r24, Z+1	; 0x01
   14c20:	90 e0       	ldi	r25, 0x00	; 0
   14c22:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   14c26:	88 85       	ldd	r24, Y+8	; 0x08
   14c28:	99 85       	ldd	r25, Y+9	; 0x09
   14c2a:	88 27       	eor	r24, r24
   14c2c:	90 7d       	andi	r25, 0xD0	; 208
   14c2e:	02 c0       	rjmp	.+4      	; 0x14c34 <SS80_Command_State+0x4c2>
   14c30:	80 e0       	ldi	r24, 0x00	; 0
   14c32:	90 e0       	ldi	r25, 0x00	; 0
   14c34:	66 96       	adiw	r28, 0x16	; 22
   14c36:	0f b6       	in	r0, 0x3f	; 63
   14c38:	f8 94       	cli
   14c3a:	de bf       	out	0x3e, r29	; 62
   14c3c:	0f be       	out	0x3f, r0	; 63
   14c3e:	cd bf       	out	0x3d, r28	; 61
   14c40:	df 91       	pop	r29
   14c42:	cf 91       	pop	r28
   14c44:	1f 91       	pop	r17
   14c46:	0f 91       	pop	r16
   14c48:	ff 90       	pop	r15
   14c4a:	ef 90       	pop	r14
   14c4c:	cf 90       	pop	r12
   14c4e:	bf 90       	pop	r11
   14c50:	af 90       	pop	r10
   14c52:	8f 90       	pop	r8
   14c54:	7f 90       	pop	r7
   14c56:	6f 90       	pop	r6
   14c58:	4f 90       	pop	r4
   14c5a:	3f 90       	pop	r3
   14c5c:	2f 90       	pop	r2
   14c5e:	08 95       	ret

00014c60 <SS80_cmd_seek>:
   14c60:	a7 e0       	ldi	r26, 0x07	; 7
   14c62:	b0 e0       	ldi	r27, 0x00	; 0
   14c64:	e6 e3       	ldi	r30, 0x36	; 54
   14c66:	f6 ea       	ldi	r31, 0xA6	; 166
   14c68:	0c 94 c4 df 	jmp	0x1bf88	; 0x1bf88 <__prologue_saves__+0x4>
   14c6c:	c0 91 73 19 	lds	r28, 0x1973	; 0x801973 <SS80s>
   14c70:	d0 91 74 19 	lds	r29, 0x1974	; 0x801974 <SS80s+0x1>
   14c74:	8f 80       	ldd	r8, Y+7	; 0x07
   14c76:	98 84       	ldd	r9, Y+8	; 0x08
   14c78:	a9 84       	ldd	r10, Y+9	; 0x09
   14c7a:	ba 84       	ldd	r11, Y+10	; 0x0a
   14c7c:	00 91 75 19 	lds	r16, 0x1975	; 0x801975 <SS80p>
   14c80:	10 91 76 19 	lds	r17, 0x1976	; 0x801976 <SS80p+0x1>
   14c84:	f8 01       	movw	r30, r16
   14c86:	c0 88       	ldd	r12, Z+16	; 0x10
   14c88:	d1 88       	ldd	r13, Z+17	; 0x11
   14c8a:	e1 2c       	mov	r14, r1
   14c8c:	f1 2c       	mov	r15, r1
   14c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
   14c90:	7c 85       	ldd	r23, Y+12	; 0x0c
   14c92:	8d 85       	ldd	r24, Y+13	; 0x0d
   14c94:	9e 85       	ldd	r25, Y+14	; 0x0e
   14c96:	a7 01       	movw	r20, r14
   14c98:	96 01       	movw	r18, r12
   14c9a:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
   14c9e:	da 01       	movw	r26, r20
   14ca0:	c9 01       	movw	r24, r18
   14ca2:	88 0d       	add	r24, r8
   14ca4:	99 1d       	adc	r25, r9
   14ca6:	aa 1d       	adc	r26, r10
   14ca8:	bb 1d       	adc	r27, r11
   14caa:	f8 01       	movw	r30, r16
   14cac:	46 a0       	ldd	r4, Z+38	; 0x26
   14cae:	57 a0       	ldd	r5, Z+39	; 0x27
   14cb0:	60 a4       	ldd	r6, Z+40	; 0x28
   14cb2:	71 a4       	ldd	r7, Z+41	; 0x29
   14cb4:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   14cb8:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14cbc:	48 16       	cp	r4, r24
   14cbe:	59 06       	cpc	r5, r25
   14cc0:	6a 06       	cpc	r6, r26
   14cc2:	7b 06       	cpc	r7, r27
   14cc4:	f0 f4       	brcc	.+60     	; 0x14d02 <SS80_cmd_seek+0xa2>
   14cc6:	81 e0       	ldi	r24, 0x01	; 1
   14cc8:	8a 83       	std	Y+2, r24	; 0x02
   14cca:	8b 81       	ldd	r24, Y+3	; 0x03
   14ccc:	9c 81       	ldd	r25, Y+4	; 0x04
   14cce:	84 60       	ori	r24, 0x04	; 4
   14cd0:	9c 83       	std	Y+4, r25	; 0x04
   14cd2:	8b 83       	std	Y+3, r24	; 0x03
   14cd4:	40 ff       	sbrs	r20, 0
   14cd6:	31 c0       	rjmp	.+98     	; 0x14d3a <SS80_cmd_seek+0xda>
   14cd8:	a0 89       	ldd	r26, Z+16	; 0x10
   14cda:	b1 89       	ldd	r27, Z+17	; 0x11
   14cdc:	a5 01       	movw	r20, r10
   14cde:	94 01       	movw	r18, r8
   14ce0:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
   14ce4:	ed b7       	in	r30, 0x3d	; 61
   14ce6:	fe b7       	in	r31, 0x3e	; 62
   14ce8:	64 83       	std	Z+4, r22	; 0x04
   14cea:	75 83       	std	Z+5, r23	; 0x05
   14cec:	86 83       	std	Z+6, r24	; 0x06
   14cee:	97 83       	std	Z+7, r25	; 0x07
   14cf0:	8d e7       	ldi	r24, 0x7D	; 125
   14cf2:	9e e1       	ldi	r25, 0x1E	; 30
   14cf4:	a0 e0       	ldi	r26, 0x00	; 0
   14cf6:	81 83       	std	Z+1, r24	; 0x01
   14cf8:	92 83       	std	Z+2, r25	; 0x02
   14cfa:	a3 83       	std	Z+3, r26	; 0x03
   14cfc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14d00:	1c c0       	rjmp	.+56     	; 0x14d3a <SS80_cmd_seek+0xda>
   14d02:	ca 01       	movw	r24, r20
   14d04:	80 72       	andi	r24, 0x20	; 32
   14d06:	99 27       	eor	r25, r25
   14d08:	45 ff       	sbrs	r20, 5
   14d0a:	19 c0       	rjmp	.+50     	; 0x14d3e <SS80_cmd_seek+0xde>
   14d0c:	a5 01       	movw	r20, r10
   14d0e:	94 01       	movw	r18, r8
   14d10:	c7 01       	movw	r24, r14
   14d12:	b6 01       	movw	r22, r12
   14d14:	0e 94 13 df 	call	0x1be26	; 0x1be26 <__mulsi3>
   14d18:	ed b7       	in	r30, 0x3d	; 61
   14d1a:	fe b7       	in	r31, 0x3e	; 62
   14d1c:	64 83       	std	Z+4, r22	; 0x04
   14d1e:	75 83       	std	Z+5, r23	; 0x05
   14d20:	86 83       	std	Z+6, r24	; 0x06
   14d22:	97 83       	std	Z+7, r25	; 0x07
   14d24:	89 e6       	ldi	r24, 0x69	; 105
   14d26:	9e e1       	ldi	r25, 0x1E	; 30
   14d28:	a0 e0       	ldi	r26, 0x00	; 0
   14d2a:	81 83       	std	Z+1, r24	; 0x01
   14d2c:	92 83       	std	Z+2, r25	; 0x02
   14d2e:	a3 83       	std	Z+3, r26	; 0x03
   14d30:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14d34:	80 e0       	ldi	r24, 0x00	; 0
   14d36:	90 e0       	ldi	r25, 0x00	; 0
   14d38:	02 c0       	rjmp	.+4      	; 0x14d3e <SS80_cmd_seek+0xde>
   14d3a:	81 e0       	ldi	r24, 0x01	; 1
   14d3c:	90 e0       	ldi	r25, 0x00	; 0
   14d3e:	cd b7       	in	r28, 0x3d	; 61
   14d40:	de b7       	in	r29, 0x3e	; 62
   14d42:	27 96       	adiw	r28, 0x07	; 7
   14d44:	e0 e1       	ldi	r30, 0x10	; 16
   14d46:	0c 94 e0 df 	jmp	0x1bfc0	; 0x1bfc0 <__epilogue_restores__+0x4>

00014d4a <SS80_locate_and_write>:
   14d4a:	a3 e1       	ldi	r26, 0x13	; 19
   14d4c:	b0 e0       	ldi	r27, 0x00	; 0
   14d4e:	eb ea       	ldi	r30, 0xAB	; 171
   14d50:	f6 ea       	ldi	r31, 0xA6	; 166
   14d52:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
   14d56:	00 91 73 19 	lds	r16, 0x1973	; 0x801973 <SS80s>
   14d5a:	10 91 74 19 	lds	r17, 0x1974	; 0x801974 <SS80s+0x1>
   14d5e:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <SS80p>
   14d62:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <SS80p+0x1>
   14d66:	fc 01       	movw	r30, r24
   14d68:	a0 89       	ldd	r26, Z+16	; 0x10
   14d6a:	b1 89       	ldd	r27, Z+17	; 0x11
   14d6c:	f8 01       	movw	r30, r16
   14d6e:	27 81       	ldd	r18, Z+7	; 0x07
   14d70:	30 85       	ldd	r19, Z+8	; 0x08
   14d72:	41 85       	ldd	r20, Z+9	; 0x09
   14d74:	52 85       	ldd	r21, Z+10	; 0x0a
   14d76:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
   14d7a:	4b 01       	movw	r8, r22
   14d7c:	5c 01       	movw	r10, r24
   14d7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d82:	85 ff       	sbrs	r24, 5
   14d84:	16 c0       	rjmp	.+44     	; 0x14db2 <SS80_locate_and_write+0x68>
   14d86:	83 85       	ldd	r24, Z+11	; 0x0b
   14d88:	94 85       	ldd	r25, Z+12	; 0x0c
   14d8a:	a5 85       	ldd	r26, Z+13	; 0x0d
   14d8c:	b6 85       	ldd	r27, Z+14	; 0x0e
   14d8e:	ed b7       	in	r30, 0x3d	; 61
   14d90:	fe b7       	in	r31, 0x3e	; 62
   14d92:	80 87       	std	Z+8, r24	; 0x08
   14d94:	91 87       	std	Z+9, r25	; 0x09
   14d96:	a2 87       	std	Z+10, r26	; 0x0a
   14d98:	b3 87       	std	Z+11, r27	; 0x0b
   14d9a:	84 82       	std	Z+4, r8	; 0x04
   14d9c:	95 82       	std	Z+5, r9	; 0x05
   14d9e:	a6 82       	std	Z+6, r10	; 0x06
   14da0:	b7 82       	std	Z+7, r11	; 0x07
   14da2:	80 e0       	ldi	r24, 0x00	; 0
   14da4:	94 e2       	ldi	r25, 0x24	; 36
   14da6:	a0 e0       	ldi	r26, 0x00	; 0
   14da8:	81 83       	std	Z+1, r24	; 0x01
   14daa:	92 83       	std	Z+2, r25	; 0x02
   14dac:	a3 83       	std	Z+3, r26	; 0x03
   14dae:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14db2:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14db6:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14dba:	12 82       	std	Z+2, r1	; 0x02
   14dbc:	54 98       	cbi	0x0a, 4	; 10
   14dbe:	4c 99       	sbic	0x09, 4	; 9
   14dc0:	03 c0       	rjmp	.+6      	; 0x14dc8 <SS80_locate_and_write+0x7e>
   14dc2:	80 e0       	ldi	r24, 0x00	; 0
   14dc4:	90 e1       	ldi	r25, 0x10	; 16
   14dc6:	4f c1       	rjmp	.+670    	; 0x15066 <SS80_locate_and_write+0x31c>
   14dc8:	4b df       	rcall	.-362    	; 0x14c60 <SS80_cmd_seek>
   14dca:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14dce:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14dd2:	89 2b       	or	r24, r25
   14dd4:	41 f0       	breq	.+16     	; 0x14de6 <SS80_locate_and_write+0x9c>
   14dd6:	83 81       	ldd	r24, Z+3	; 0x03
   14dd8:	94 81       	ldd	r25, Z+4	; 0x04
   14dda:	82 60       	ori	r24, 0x02	; 2
   14ddc:	94 83       	std	Z+4, r25	; 0x04
   14dde:	83 83       	std	Z+3, r24	; 0x03
   14de0:	01 e0       	ldi	r16, 0x01	; 1
   14de2:	10 e0       	ldi	r17, 0x00	; 0
   14de4:	02 c0       	rjmp	.+4      	; 0x14dea <SS80_locate_and_write+0xa0>
   14de6:	00 e0       	ldi	r16, 0x00	; 0
   14de8:	10 e0       	ldi	r17, 0x00	; 0
   14dea:	23 84       	ldd	r2, Z+11	; 0x0b
   14dec:	34 84       	ldd	r3, Z+12	; 0x0c
   14dee:	1d 86       	std	Y+13, r1	; 0x0d
   14df0:	1c 86       	std	Y+12, r1	; 0x0c
   14df2:	41 2c       	mov	r4, r1
   14df4:	51 2c       	mov	r5, r1
   14df6:	32 01       	movw	r6, r4
   14df8:	83 eb       	ldi	r24, 0xB3	; 179
   14dfa:	93 e2       	ldi	r25, 0x23	; 35
   14dfc:	9c 01       	movw	r18, r24
   14dfe:	40 e0       	ldi	r20, 0x00	; 0
   14e00:	2e 87       	std	Y+14, r18	; 0x0e
   14e02:	3f 87       	std	Y+15, r19	; 0x0f
   14e04:	48 8b       	std	Y+16, r20	; 0x10
   14e06:	89 ed       	ldi	r24, 0xD9	; 217
   14e08:	93 e2       	ldi	r25, 0x23	; 35
   14e0a:	9c 01       	movw	r18, r24
   14e0c:	40 e0       	ldi	r20, 0x00	; 0
   14e0e:	29 8b       	std	Y+17, r18	; 0x11
   14e10:	3a 8b       	std	Y+18, r19	; 0x12
   14e12:	4b 8b       	std	Y+19, r20	; 0x13
   14e14:	12 14       	cp	r1, r2
   14e16:	13 04       	cpc	r1, r3
   14e18:	0c f0       	brlt	.+2      	; 0x14e1c <SS80_locate_and_write+0xd2>
   14e1a:	f5 c0       	rjmp	.+490    	; 0x15006 <SS80_locate_and_write+0x2bc>
   14e1c:	54 98       	cbi	0x0a, 4	; 10
   14e1e:	4c 9b       	sbis	0x09, 4	; 9
   14e20:	d0 cf       	rjmp	.-96     	; 0x14dc2 <SS80_locate_and_write+0x78>
   14e22:	71 01       	movw	r14, r2
   14e24:	31 e0       	ldi	r19, 0x01	; 1
   14e26:	23 16       	cp	r2, r19
   14e28:	33 06       	cpc	r3, r19
   14e2a:	1c f0       	brlt	.+6      	; 0x14e32 <SS80_locate_and_write+0xe8>
   14e2c:	e1 2c       	mov	r14, r1
   14e2e:	ff 24       	eor	r15, r15
   14e30:	f3 94       	inc	r15
   14e32:	e6 ef       	ldi	r30, 0xF6	; 246
   14e34:	fc e1       	ldi	r31, 0x1C	; 28
   14e36:	20 e0       	ldi	r18, 0x00	; 0
   14e38:	32 e0       	ldi	r19, 0x02	; 2
   14e3a:	11 92       	st	Z+, r1
   14e3c:	21 50       	subi	r18, 0x01	; 1
   14e3e:	30 40       	sbci	r19, 0x00	; 0
   14e40:	e1 f7       	brne	.-8      	; 0x14e3a <SS80_locate_and_write+0xf0>
   14e42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e46:	87 fd       	sbrc	r24, 7
   14e48:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   14e4c:	ae 01       	movw	r20, r28
   14e4e:	44 5f       	subi	r20, 0xF4	; 244
   14e50:	5f 4f       	sbci	r21, 0xFF	; 255
   14e52:	b7 01       	movw	r22, r14
   14e54:	86 ef       	ldi	r24, 0xF6	; 246
   14e56:	9c e1       	ldi	r25, 0x1C	; 28
   14e58:	0e 94 80 88 	call	0x11100	; 0x11100 <gpib_read_str>
   14e5c:	6c 01       	movw	r12, r24
   14e5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e62:	87 ff       	sbrs	r24, 7
   14e64:	04 c0       	rjmp	.+8      	; 0x14e6e <SS80_locate_and_write+0x124>
   14e66:	8b e8       	ldi	r24, 0x8B	; 139
   14e68:	90 e1       	ldi	r25, 0x10	; 16
   14e6a:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   14e6e:	ce 14       	cp	r12, r14
   14e70:	df 04       	cpc	r13, r15
   14e72:	39 f1       	breq	.+78     	; 0x14ec2 <SS80_locate_and_write+0x178>
   14e74:	8c 85       	ldd	r24, Y+12	; 0x0c
   14e76:	9d 85       	ldd	r25, Y+13	; 0x0d
   14e78:	9c 01       	movw	r18, r24
   14e7a:	22 27       	eor	r18, r18
   14e7c:	30 7d       	andi	r19, 0xD0	; 208
   14e7e:	23 2b       	or	r18, r19
   14e80:	d1 f0       	breq	.+52     	; 0x14eb6 <SS80_locate_and_write+0x16c>
   14e82:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e86:	80 ff       	sbrs	r24, 0
   14e88:	0a c0       	rjmp	.+20     	; 0x14e9e <SS80_locate_and_write+0x154>
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   14e8a:	8d ee       	ldi	r24, 0xED	; 237
   14e8c:	93 e2       	ldi	r25, 0x23	; 35
   14e8e:	a0 e0       	ldi	r26, 0x00	; 0
   14e90:	ed b7       	in	r30, 0x3d	; 61
   14e92:	fe b7       	in	r31, 0x3e	; 62
   14e94:	81 83       	std	Z+1, r24	; 0x01
   14e96:	92 83       	std	Z+2, r25	; 0x02
   14e98:	a3 83       	std	Z+3, r26	; 0x03
   14e9a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14e9e:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14ea2:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14ea6:	83 81       	ldd	r24, Z+3	; 0x03
   14ea8:	94 81       	ldd	r25, Z+4	; 0x04
   14eaa:	82 60       	ori	r24, 0x02	; 2
   14eac:	94 83       	std	Z+4, r25	; 0x04
   14eae:	83 83       	std	Z+3, r24	; 0x03
   14eb0:	81 e0       	ldi	r24, 0x01	; 1
   14eb2:	82 83       	std	Z+2, r24	; 0x02
   14eb4:	99 c0       	rjmp	.+306    	; 0x14fe8 <SS80_locate_and_write+0x29e>
   14eb6:	c1 14       	cp	r12, r1
   14eb8:	d1 04       	cpc	r13, r1
   14eba:	09 f0       	breq	.+2      	; 0x14ebe <SS80_locate_and_write+0x174>
   14ebc:	d0 c0       	rjmp	.+416    	; 0x1505e <SS80_locate_and_write+0x314>
   14ebe:	90 fd       	sbrc	r25, 0
   14ec0:	93 c0       	rjmp	.+294    	; 0x14fe8 <SS80_locate_and_write+0x29e>
   14ec2:	01 15       	cp	r16, r1
   14ec4:	11 05       	cpc	r17, r1
   14ec6:	09 f0       	breq	.+2      	; 0x14eca <SS80_locate_and_write+0x180>
   14ec8:	84 c0       	rjmp	.+264    	; 0x14fd2 <SS80_locate_and_write+0x288>
   14eca:	c1 14       	cp	r12, r1
   14ecc:	d1 04       	cpc	r13, r1
   14ece:	09 f4       	brne	.+2      	; 0x14ed2 <SS80_locate_and_write+0x188>
   14ed0:	82 c0       	rjmp	.+260    	; 0x14fd6 <SS80_locate_and_write+0x28c>
   14ed2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ed6:	86 fd       	sbrc	r24, 6
   14ed8:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   14edc:	e0 90 73 19 	lds	r14, 0x1973	; 0x801973 <SS80s>
   14ee0:	f0 90 74 19 	lds	r15, 0x1974	; 0x801974 <SS80s+0x1>
   14ee4:	f3 e0       	ldi	r31, 0x03	; 3
   14ee6:	ef 0e       	add	r14, r31
   14ee8:	f1 1c       	adc	r15, r1
   14eea:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   14eee:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   14ef2:	86 01       	movw	r16, r12
   14ef4:	26 ef       	ldi	r18, 0xF6	; 246
   14ef6:	3c e1       	ldi	r19, 0x1C	; 28
   14ef8:	b5 01       	movw	r22, r10
   14efa:	a4 01       	movw	r20, r8
   14efc:	82 81       	ldd	r24, Z+2	; 0x02
   14efe:	93 81       	ldd	r25, Z+3	; 0x03
   14f00:	0e 94 79 82 	call	0x104f2	; 0x104f2 <dbf_open_write>
   14f04:	7c 01       	movw	r14, r24
   14f06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f0a:	86 ff       	sbrs	r24, 6
   14f0c:	04 c0       	rjmp	.+8      	; 0x14f16 <SS80_locate_and_write+0x1cc>
   14f0e:	86 e9       	ldi	r24, 0x96	; 150
   14f10:	90 e1       	ldi	r25, 0x10	; 16
   14f12:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   14f16:	ce 14       	cp	r12, r14
   14f18:	df 04       	cpc	r13, r15
   14f1a:	39 f1       	breq	.+78     	; 0x14f6a <SS80_locate_and_write+0x220>
   14f1c:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14f20:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14f24:	83 81       	ldd	r24, Z+3	; 0x03
    return ( uart_rx_count( uart ) );
   14f26:	94 81       	ldd	r25, Z+4	; 0x04
}
   14f28:	82 60       	ori	r24, 0x02	; 2
   14f2a:	94 83       	std	Z+4, r25	; 0x04
   14f2c:	83 83       	std	Z+3, r24	; 0x03
   14f2e:	0e 94 82 6d 	call	0xdb04	; 0xdb04 <mmc_wp_status>
   14f32:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   14f36:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   14f3a:	89 2b       	or	r24, r25
   14f3c:	29 f0       	breq	.+10     	; 0x14f48 <SS80_locate_and_write+0x1fe>
   14f3e:	83 81       	ldd	r24, Z+3	; 0x03
   14f40:	94 81       	ldd	r25, Z+4	; 0x04
   14f42:	88 60       	ori	r24, 0x08	; 8
   14f44:	94 83       	std	Z+4, r25	; 0x04
   14f46:	83 83       	std	Z+3, r24	; 0x03
   14f48:	21 e0       	ldi	r18, 0x01	; 1
   14f4a:	22 83       	std	Z+2, r18	; 0x02
   14f4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f50:	80 ff       	sbrs	r24, 0
   14f52:	27 c0       	rjmp	.+78     	; 0x14fa2 <SS80_locate_and_write+0x258>
   14f54:	89 89       	ldd	r24, Y+17	; 0x11
   14f56:	9a 89       	ldd	r25, Y+18	; 0x12
   14f58:	ab 89       	ldd	r26, Y+19	; 0x13
   14f5a:	ed b7       	in	r30, 0x3d	; 61
   14f5c:	fe b7       	in	r31, 0x3e	; 62
   14f5e:	81 83       	std	Z+1, r24	; 0x01
   14f60:	92 83       	std	Z+2, r25	; 0x02
   14f62:	a3 83       	std	Z+3, r26	; 0x03
   14f64:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14f68:	1c c0       	rjmp	.+56     	; 0x14fa2 <SS80_locate_and_write+0x258>
   14f6a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f6e:	85 ff       	sbrs	r24, 5
   14f70:	0c c0       	rjmp	.+24     	; 0x14f8a <SS80_locate_and_write+0x240>
   14f72:	ed b7       	in	r30, 0x3d	; 61
   14f74:	fe b7       	in	r31, 0x3e	; 62
   14f76:	d5 82       	std	Z+5, r13	; 0x05
   14f78:	c4 82       	std	Z+4, r12	; 0x04
   14f7a:	2e 85       	ldd	r18, Y+14	; 0x0e
   14f7c:	3f 85       	ldd	r19, Y+15	; 0x0f
   14f7e:	48 89       	ldd	r20, Y+16	; 0x10
   14f80:	21 83       	std	Z+1, r18	; 0x01
   14f82:	32 83       	std	Z+2, r19	; 0x02
   14f84:	43 83       	std	Z+3, r20	; 0x03
   14f86:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   14f8a:	c6 01       	movw	r24, r12
   14f8c:	0d 2c       	mov	r0, r13
   14f8e:	00 0c       	add	r0, r0
   14f90:	aa 0b       	sbc	r26, r26
   14f92:	bb 0b       	sbc	r27, r27
   14f94:	88 0e       	add	r8, r24
   14f96:	99 1e       	adc	r9, r25
   14f98:	aa 1e       	adc	r10, r26
   14f9a:	bb 1e       	adc	r11, r27
   14f9c:	00 e0       	ldi	r16, 0x00	; 0
   14f9e:	10 e0       	ldi	r17, 0x00	; 0
   14fa0:	05 c0       	rjmp	.+10     	; 0x14fac <SS80_locate_and_write+0x262>
   14fa2:	ec 14       	cp	r14, r12
   14fa4:	fd 04       	cpc	r15, r13
   14fa6:	64 f0       	brlt	.+24     	; 0x14fc0 <SS80_locate_and_write+0x276>
   14fa8:	01 e0       	ldi	r16, 0x01	; 1
   14faa:	10 e0       	ldi	r17, 0x00	; 0
   14fac:	c7 01       	movw	r24, r14
   14fae:	0f 2c       	mov	r0, r15
   14fb0:	00 0c       	add	r0, r0
   14fb2:	aa 0b       	sbc	r26, r26
   14fb4:	bb 0b       	sbc	r27, r27
   14fb6:	48 0e       	add	r4, r24
   14fb8:	59 1e       	adc	r5, r25
   14fba:	6a 1e       	adc	r6, r26
   14fbc:	7b 1e       	adc	r7, r27
   14fbe:	0b c0       	rjmp	.+22     	; 0x14fd6 <SS80_locate_and_write+0x28c>
   14fc0:	c6 01       	movw	r24, r12
   14fc2:	0d 2c       	mov	r0, r13
   14fc4:	00 0c       	add	r0, r0
   14fc6:	aa 0b       	sbc	r26, r26
   14fc8:	bb 0b       	sbc	r27, r27
   14fca:	48 0e       	add	r4, r24
   14fcc:	59 1e       	adc	r5, r25
   14fce:	6a 1e       	adc	r6, r26
   14fd0:	7b 1e       	adc	r7, r27
   14fd2:	01 e0       	ldi	r16, 0x01	; 1
   14fd4:	10 e0       	ldi	r17, 0x00	; 0
   14fd6:	2c 18       	sub	r2, r12
   14fd8:	3d 08       	sbc	r3, r13
   14fda:	8c 85       	ldd	r24, Y+12	; 0x0c
   14fdc:	9d 85       	ldd	r25, Y+13	; 0x0d
   14fde:	90 ff       	sbrs	r25, 0
   14fe0:	19 cf       	rjmp	.-462    	; 0x14e14 <SS80_locate_and_write+0xca>
   14fe2:	12 14       	cp	r1, r2
   14fe4:	13 04       	cpc	r1, r3
   14fe6:	7c f4       	brge	.+30     	; 0x15006 <SS80_locate_and_write+0x2bc>
   14fe8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fec:	80 ff       	sbrs	r24, 0
   14fee:	1d c0       	rjmp	.+58     	; 0x1502a <SS80_locate_and_write+0x2e0>
   14ff0:	8b e8       	ldi	r24, 0x8B	; 139
   14ff2:	93 e2       	ldi	r25, 0x23	; 35
   14ff4:	a0 e0       	ldi	r26, 0x00	; 0
   14ff6:	ed b7       	in	r30, 0x3d	; 61
   14ff8:	fe b7       	in	r31, 0x3e	; 62
   14ffa:	81 83       	std	Z+1, r24	; 0x01
   14ffc:	92 83       	std	Z+2, r25	; 0x02
   14ffe:	a3 83       	std	Z+3, r26	; 0x03
   15000:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15004:	12 c0       	rjmp	.+36     	; 0x1502a <SS80_locate_and_write+0x2e0>
   15006:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1500a:	85 ff       	sbrs	r24, 5
   1500c:	0e c0       	rjmp	.+28     	; 0x1502a <SS80_locate_and_write+0x2e0>
   1500e:	ed b7       	in	r30, 0x3d	; 61
   15010:	fe b7       	in	r31, 0x3e	; 62
   15012:	44 82       	std	Z+4, r4	; 0x04
   15014:	55 82       	std	Z+5, r5	; 0x05
   15016:	66 82       	std	Z+6, r6	; 0x06
   15018:	77 82       	std	Z+7, r7	; 0x07
   1501a:	80 e6       	ldi	r24, 0x60	; 96
   1501c:	93 e2       	ldi	r25, 0x23	; 35
   1501e:	a0 e0       	ldi	r26, 0x00	; 0
   15020:	81 83       	std	Z+1, r24	; 0x01
   15022:	92 83       	std	Z+2, r25	; 0x02
   15024:	a3 83       	std	Z+3, r26	; 0x03
   15026:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1502a:	00 91 73 19 	lds	r16, 0x1973	; 0x801973 <SS80s>
   1502e:	10 91 74 19 	lds	r17, 0x1974	; 0x801974 <SS80s+0x1>
   15032:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15036:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1503a:	20 89       	ldd	r18, Z+16	; 0x10
   1503c:	31 89       	ldd	r19, Z+17	; 0x11
   1503e:	40 e0       	ldi	r20, 0x00	; 0
   15040:	50 e0       	ldi	r21, 0x00	; 0
   15042:	c5 01       	movw	r24, r10
   15044:	b4 01       	movw	r22, r8
   15046:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
   1504a:	f8 01       	movw	r30, r16
   1504c:	27 83       	std	Z+7, r18	; 0x07
   1504e:	30 87       	std	Z+8, r19	; 0x08
   15050:	41 87       	std	Z+9, r20	; 0x09
   15052:	52 87       	std	Z+10, r21	; 0x0a
   15054:	8c 85       	ldd	r24, Y+12	; 0x0c
   15056:	9d 85       	ldd	r25, Y+13	; 0x0d
   15058:	88 27       	eor	r24, r24
   1505a:	90 7d       	andi	r25, 0xD0	; 208
   1505c:	04 c0       	rjmp	.+8      	; 0x15066 <SS80_locate_and_write+0x31c>
   1505e:	01 2b       	or	r16, r17
   15060:	09 f4       	brne	.+2      	; 0x15064 <SS80_locate_and_write+0x31a>
   15062:	37 cf       	rjmp	.-402    	; 0x14ed2 <SS80_locate_and_write+0x188>
   15064:	b6 cf       	rjmp	.-148    	; 0x14fd2 <SS80_locate_and_write+0x288>
   15066:	63 96       	adiw	r28, 0x13	; 19
   15068:	e2 e1       	ldi	r30, 0x12	; 18
   1506a:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0001506e <SS80_Report>:
   1506e:	a8 e0       	ldi	r26, 0x08	; 8
   15070:	b0 e0       	ldi	r27, 0x00	; 0
   15072:	ed e3       	ldi	r30, 0x3D	; 61
   15074:	f8 ea       	ldi	r31, 0xA8	; 168
   15076:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   1507a:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1507e:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15082:	82 81       	ldd	r24, Z+2	; 0x02
   15084:	88 87       	std	Y+8, r24	; 0x08
   15086:	80 e0       	ldi	r24, 0x00	; 0
   15088:	91 e0       	ldi	r25, 0x01	; 1
   1508a:	9f 83       	std	Y+7, r25	; 0x07
   1508c:	8e 83       	std	Y+6, r24	; 0x06
   1508e:	ae 01       	movw	r20, r28
   15090:	4a 5f       	subi	r20, 0xFA	; 250
   15092:	5f 4f       	sbci	r21, 0xFF	; 255
   15094:	61 e0       	ldi	r22, 0x01	; 1
   15096:	70 e0       	ldi	r23, 0x00	; 0
   15098:	ce 01       	movw	r24, r28
   1509a:	08 96       	adiw	r24, 0x08	; 8
   1509c:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   150a0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   150a4:	01 97       	sbiw	r24, 0x01	; 1
   150a6:	89 f0       	breq	.+34     	; 0x150ca <SS80_Report+0x5c>
   150a8:	20 ff       	sbrs	r18, 0
   150aa:	0a c0       	rjmp	.+20     	; 0x150c0 <SS80_Report+0x52>
   150ac:	8f e4       	ldi	r24, 0x4F	; 79
   150ae:	9e e1       	ldi	r25, 0x1E	; 30
   150b0:	a0 e0       	ldi	r26, 0x00	; 0
   150b2:	ed b7       	in	r30, 0x3d	; 61
   150b4:	fe b7       	in	r31, 0x3e	; 62
   150b6:	81 83       	std	Z+1, r24	; 0x01
   150b8:	92 83       	std	Z+2, r25	; 0x02
   150ba:	a3 83       	std	Z+3, r26	; 0x03
   150bc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   150c0:	8e 81       	ldd	r24, Y+6	; 0x06
   150c2:	9f 81       	ldd	r25, Y+7	; 0x07
   150c4:	88 27       	eor	r24, r24
   150c6:	90 7d       	andi	r25, 0xD0	; 208
   150c8:	1b c0       	rjmp	.+54     	; 0x15100 <SS80_Report+0x92>
   150ca:	25 ff       	sbrs	r18, 5
   150cc:	12 c0       	rjmp	.+36     	; 0x150f2 <SS80_Report+0x84>
   150ce:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   150d2:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   150d6:	82 81       	ldd	r24, Z+2	; 0x02
   150d8:	90 e0       	ldi	r25, 0x00	; 0
   150da:	ed b7       	in	r30, 0x3d	; 61
   150dc:	fe b7       	in	r31, 0x3e	; 62
   150de:	95 83       	std	Z+5, r25	; 0x05
   150e0:	84 83       	std	Z+4, r24	; 0x04
   150e2:	8c e3       	ldi	r24, 0x3C	; 60
   150e4:	9e e1       	ldi	r25, 0x1E	; 30
   150e6:	a0 e0       	ldi	r26, 0x00	; 0
   150e8:	81 83       	std	Z+1, r24	; 0x01
   150ea:	92 83       	std	Z+2, r25	; 0x02
   150ec:	a3 83       	std	Z+3, r26	; 0x03
   150ee:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   150f2:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   150f6:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   150fa:	12 82       	std	Z+2, r1	; 0x02
   150fc:	80 e0       	ldi	r24, 0x00	; 0
   150fe:	90 e0       	ldi	r25, 0x00	; 0
   15100:	28 96       	adiw	r28, 0x08	; 8
   15102:	e2 e0       	ldi	r30, 0x02	; 2
   15104:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00015108 <Clear_Common>:
   15108:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1510c:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15110:	25 81       	ldd	r18, Z+5	; 0x05
   15112:	30 e0       	ldi	r19, 0x00	; 0
   15114:	28 17       	cp	r18, r24
   15116:	39 07       	cpc	r19, r25
   15118:	19 f0       	breq	.+6      	; 0x15120 <Clear_Common+0x18>
   1511a:	0f 97       	sbiw	r24, 0x0f	; 15
   1511c:	99 f4       	brne	.+38     	; 0x15144 <Clear_Common+0x3c>
   1511e:	03 c0       	rjmp	.+6      	; 0x15126 <Clear_Common+0x1e>
   15120:	2f 30       	cpi	r18, 0x0F	; 15
   15122:	31 05       	cpc	r19, r1
   15124:	09 f4       	brne	.+2      	; 0x15128 <Clear_Common+0x20>
   15126:	15 82       	std	Z+5, r1	; 0x05
   15128:	16 82       	std	Z+6, r1	; 0x06
   1512a:	17 82       	std	Z+7, r1	; 0x07
   1512c:	10 86       	std	Z+8, r1	; 0x08
   1512e:	11 86       	std	Z+9, r1	; 0x09
   15130:	12 86       	std	Z+10, r1	; 0x0a
   15132:	13 86       	std	Z+11, r1	; 0x0b
   15134:	14 86       	std	Z+12, r1	; 0x0c
   15136:	15 86       	std	Z+13, r1	; 0x0d
   15138:	16 86       	std	Z+14, r1	; 0x0e
   1513a:	11 82       	std	Z+1, r1	; 0x01
   1513c:	10 82       	st	Z, r1
   1513e:	14 82       	std	Z+4, r1	; 0x04
   15140:	13 82       	std	Z+3, r1	; 0x03
   15142:	12 82       	std	Z+2, r1	; 0x02
   15144:	08 95       	ret

00015146 <SS80_init>:
   15146:	a5 e0       	ldi	r26, 0x05	; 5
   15148:	b0 e0       	ldi	r27, 0x00	; 0
   1514a:	e9 ea       	ldi	r30, 0xA9	; 169
   1514c:	f8 ea       	ldi	r31, 0xA8	; 168
   1514e:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
   15152:	09 ed       	ldi	r16, 0xD9	; 217
   15154:	10 e2       	ldi	r17, 0x20	; 32
   15156:	cb e0       	ldi	r28, 0x0B	; 11
   15158:	d0 e0       	ldi	r29, 0x00	; 0
   1515a:	82 e0       	ldi	r24, 0x02	; 2
   1515c:	f8 2e       	mov	r15, r24
   1515e:	89 e0       	ldi	r24, 0x09	; 9
   15160:	95 e2       	ldi	r25, 0x25	; 37
   15162:	6c 01       	movw	r12, r24
   15164:	e1 2c       	mov	r14, r1
   15166:	f8 01       	movw	r30, r16
   15168:	80 81       	ld	r24, Z
   1516a:	83 30       	cpi	r24, 0x03	; 3
   1516c:	29 f5       	brne	.+74     	; 0x151b8 <SS80_init+0x72>
   1516e:	ce 01       	movw	r24, r28
   15170:	0e 94 f0 94 	call	0x129e0	; 0x129e0 <set_active_device>
   15174:	89 2b       	or	r24, r25
   15176:	01 f1       	breq	.+64     	; 0x151b8 <SS80_init+0x72>
   15178:	8f e0       	ldi	r24, 0x0F	; 15
   1517a:	90 e0       	ldi	r25, 0x00	; 0
   1517c:	c5 df       	rcall	.-118    	; 0x15108 <Clear_Common>
   1517e:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15182:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15186:	f2 82       	std	Z+2, r15	; 0x02
   15188:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1518c:	85 ff       	sbrs	r24, 5
   1518e:	0c c0       	rjmp	.+24     	; 0x151a8 <SS80_init+0x62>
   15190:	f8 01       	movw	r30, r16
   15192:	81 81       	ldd	r24, Z+1	; 0x01
   15194:	90 e0       	ldi	r25, 0x00	; 0
   15196:	ed b7       	in	r30, 0x3d	; 61
   15198:	fe b7       	in	r31, 0x3e	; 62
   1519a:	95 83       	std	Z+5, r25	; 0x05
   1519c:	84 83       	std	Z+4, r24	; 0x04
   1519e:	c1 82       	std	Z+1, r12	; 0x01
   151a0:	d2 82       	std	Z+2, r13	; 0x02
   151a2:	e3 82       	std	Z+3, r14	; 0x03
   151a4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   151a8:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   151ac:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   151b0:	81 81       	ldd	r24, Z+1	; 0x01
   151b2:	90 e0       	ldi	r25, 0x00	; 0
   151b4:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
   151b8:	21 97       	sbiw	r28, 0x01	; 1
   151ba:	0b 52       	subi	r16, 0x2B	; 43
   151bc:	11 09       	sbc	r17, r1
   151be:	cf 3f       	cpi	r28, 0xFF	; 255
   151c0:	ff ef       	ldi	r31, 0xFF	; 255
   151c2:	df 07       	cpc	r29, r31
   151c4:	81 f6       	brne	.-96     	; 0x15166 <SS80_init+0x20>
   151c6:	cd b7       	in	r28, 0x3d	; 61
   151c8:	de b7       	in	r29, 0x3e	; 62
   151ca:	25 96       	adiw	r28, 0x05	; 5
   151cc:	e8 e0       	ldi	r30, 0x08	; 8
   151ce:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

000151d2 <SS80_Channel_Independent_Clear>:
   151d2:	9a df       	rcall	.-204    	; 0x15108 <Clear_Common>
   151d4:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   151d8:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   151dc:	81 81       	ldd	r24, Z+1	; 0x01
   151de:	90 e0       	ldi	r25, 0x00	; 0
   151e0:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   151e4:	80 e0       	ldi	r24, 0x00	; 0
   151e6:	90 e0       	ldi	r25, 0x00	; 0
   151e8:	08 95       	ret

000151ea <SS80_Universal_Device_Clear>:
   151ea:	8f e0       	ldi	r24, 0x0F	; 15
   151ec:	90 e0       	ldi	r25, 0x00	; 0
   151ee:	8c df       	rcall	.-232    	; 0x15108 <Clear_Common>
   151f0:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   151f4:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   151f8:	81 81       	ldd	r24, Z+1	; 0x01
   151fa:	90 e0       	ldi	r25, 0x00	; 0
   151fc:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   15200:	80 e0       	ldi	r24, 0x00	; 0
   15202:	90 e0       	ldi	r25, 0x00	; 0
   15204:	08 95       	ret

00015206 <SS80_Selected_Device_Clear>:
   15206:	cf 93       	push	r28
   15208:	df 93       	push	r29
   1520a:	00 d0       	rcall	.+0      	; 0x1520c <SS80_Selected_Device_Clear+0x6>
   1520c:	1f 92       	push	r1
   1520e:	ec 01       	movw	r28, r24
   15210:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15214:	85 ff       	sbrs	r24, 5
   15216:	0a c0       	rjmp	.+20     	; 0x1522c <SS80_Selected_Device_Clear+0x26>
   15218:	80 e3       	ldi	r24, 0x30	; 48
   1521a:	9e e1       	ldi	r25, 0x1E	; 30
   1521c:	a0 e0       	ldi	r26, 0x00	; 0
   1521e:	ed b7       	in	r30, 0x3d	; 61
   15220:	fe b7       	in	r31, 0x3e	; 62
   15222:	81 83       	std	Z+1, r24	; 0x01
   15224:	92 83       	std	Z+2, r25	; 0x02
   15226:	a3 83       	std	Z+3, r26	; 0x03
   15228:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1522c:	ce 01       	movw	r24, r28
   1522e:	6c df       	rcall	.-296    	; 0x15108 <Clear_Common>
   15230:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15234:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15238:	81 81       	ldd	r24, Z+1	; 0x01
   1523a:	90 e0       	ldi	r25, 0x00	; 0
   1523c:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   15240:	80 e0       	ldi	r24, 0x00	; 0
   15242:	90 e0       	ldi	r25, 0x00	; 0
   15244:	cd b7       	in	r28, 0x3d	; 61
   15246:	de b7       	in	r29, 0x3e	; 62
   15248:	23 96       	adiw	r28, 0x03	; 3
   1524a:	e2 e0       	ldi	r30, 0x02	; 2
   1524c:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00015250 <SS80_Amigo_Clear>:
   15250:	a6 e0       	ldi	r26, 0x06	; 6
   15252:	b0 e0       	ldi	r27, 0x00	; 0
   15254:	ee e2       	ldi	r30, 0x2E	; 46
   15256:	f9 ea       	ldi	r31, 0xA9	; 169
   15258:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   1525c:	1d 82       	std	Y+5, r1	; 0x05
   1525e:	1c 82       	std	Y+4, r1	; 0x04
   15260:	ae 01       	movw	r20, r28
   15262:	4c 5f       	subi	r20, 0xFC	; 252
   15264:	5f 4f       	sbci	r21, 0xFF	; 255
   15266:	61 e0       	ldi	r22, 0x01	; 1
   15268:	70 e0       	ldi	r23, 0x00	; 0
   1526a:	ce 01       	movw	r24, r28
   1526c:	06 96       	adiw	r24, 0x06	; 6
   1526e:	0e 94 80 88 	call	0x11100	; 0x11100 <gpib_read_str>
   15272:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15276:	01 97       	sbiw	r24, 0x01	; 1
   15278:	89 f0       	breq	.+34     	; 0x1529c <SS80_Amigo_Clear+0x4c>
   1527a:	20 ff       	sbrs	r18, 0
   1527c:	0a c0       	rjmp	.+20     	; 0x15292 <SS80_Amigo_Clear+0x42>
   1527e:	8d e1       	ldi	r24, 0x1D	; 29
   15280:	9e e1       	ldi	r25, 0x1E	; 30
   15282:	a0 e0       	ldi	r26, 0x00	; 0
   15284:	ed b7       	in	r30, 0x3d	; 61
   15286:	fe b7       	in	r31, 0x3e	; 62
   15288:	81 83       	std	Z+1, r24	; 0x01
   1528a:	92 83       	std	Z+2, r25	; 0x02
   1528c:	a3 83       	std	Z+3, r26	; 0x03
   1528e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15292:	8c 81       	ldd	r24, Y+4	; 0x04
   15294:	9d 81       	ldd	r25, Y+5	; 0x05
   15296:	88 27       	eor	r24, r24
   15298:	90 7d       	andi	r25, 0xD0	; 208
   1529a:	19 c0       	rjmp	.+50     	; 0x152ce <SS80_Amigo_Clear+0x7e>
   1529c:	25 ff       	sbrs	r18, 5
   1529e:	0a c0       	rjmp	.+20     	; 0x152b4 <SS80_Amigo_Clear+0x64>
   152a0:	8e e0       	ldi	r24, 0x0E	; 14
   152a2:	9e e1       	ldi	r25, 0x1E	; 30
   152a4:	a0 e0       	ldi	r26, 0x00	; 0
   152a6:	ed b7       	in	r30, 0x3d	; 61
   152a8:	fe b7       	in	r31, 0x3e	; 62
   152aa:	81 83       	std	Z+1, r24	; 0x01
   152ac:	92 83       	std	Z+2, r25	; 0x02
   152ae:	a3 83       	std	Z+3, r26	; 0x03
   152b0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   152b4:	8f e0       	ldi	r24, 0x0F	; 15
   152b6:	90 e0       	ldi	r25, 0x00	; 0
   152b8:	27 df       	rcall	.-434    	; 0x15108 <Clear_Common>
   152ba:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   152be:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   152c2:	81 81       	ldd	r24, Z+1	; 0x01
   152c4:	90 e0       	ldi	r25, 0x00	; 0
   152c6:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   152ca:	80 e0       	ldi	r24, 0x00	; 0
   152cc:	90 e0       	ldi	r25, 0x00	; 0
   152ce:	26 96       	adiw	r28, 0x06	; 6
   152d0:	e2 e0       	ldi	r30, 0x02	; 2
   152d2:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000152d6 <SS80_Cancel>:
   152d6:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   152da:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   152de:	11 82       	std	Z+1, r1	; 0x01
   152e0:	10 82       	st	Z, r1
   152e2:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   152e6:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   152ea:	81 81       	ldd	r24, Z+1	; 0x01
   152ec:	90 e0       	ldi	r25, 0x00	; 0
   152ee:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   152f2:	80 e0       	ldi	r24, 0x00	; 0
   152f4:	90 e0       	ldi	r25, 0x00	; 0
   152f6:	08 95       	ret

000152f8 <SS80_Transparent_State>:
   152f8:	a9 e0       	ldi	r26, 0x09	; 9
   152fa:	b0 e0       	ldi	r27, 0x00	; 0
   152fc:	e2 e8       	ldi	r30, 0x82	; 130
   152fe:	f9 ea       	ldi	r31, 0xA9	; 169
   15300:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
   15304:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15308:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1530c:	81 81       	ldd	r24, Z+1	; 0x01
   1530e:	90 e0       	ldi	r25, 0x00	; 0
   15310:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
   15314:	80 e0       	ldi	r24, 0x00	; 0
   15316:	91 e0       	ldi	r25, 0x01	; 1
   15318:	99 87       	std	Y+9, r25	; 0x09
   1531a:	88 87       	std	Y+8, r24	; 0x08
   1531c:	ae 01       	movw	r20, r28
   1531e:	48 5f       	subi	r20, 0xF8	; 248
   15320:	5f 4f       	sbci	r21, 0xFF	; 255
   15322:	60 e0       	ldi	r22, 0x00	; 0
   15324:	72 e0       	ldi	r23, 0x02	; 2
   15326:	86 ef       	ldi	r24, 0xF6	; 246
   15328:	9c e1       	ldi	r25, 0x1C	; 28
   1532a:	0e 94 80 88 	call	0x11100	; 0x11100 <gpib_read_str>
   1532e:	7c 01       	movw	r14, r24
   15330:	88 85       	ldd	r24, Y+8	; 0x08
   15332:	99 85       	ldd	r25, Y+9	; 0x09
   15334:	9c 01       	movw	r18, r24
   15336:	22 27       	eor	r18, r18
   15338:	30 7d       	andi	r19, 0xD0	; 208
   1533a:	23 2b       	or	r18, r19
   1533c:	79 f0       	breq	.+30     	; 0x1535c <SS80_Transparent_State+0x64>
   1533e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15342:	80 ff       	sbrs	r24, 0
   15344:	da c0       	rjmp	.+436    	; 0x154fa <SS80_Transparent_State+0x202>
   15346:	8d ea       	ldi	r24, 0xAD	; 173
   15348:	9f e1       	ldi	r25, 0x1F	; 31
   1534a:	a0 e0       	ldi	r26, 0x00	; 0
   1534c:	ed b7       	in	r30, 0x3d	; 61
   1534e:	fe b7       	in	r31, 0x3e	; 62
   15350:	81 83       	std	Z+1, r24	; 0x01
   15352:	92 83       	std	Z+2, r25	; 0x02
   15354:	a3 83       	std	Z+3, r26	; 0x03
   15356:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1535a:	cf c0       	rjmp	.+414    	; 0x154fa <SS80_Transparent_State+0x202>
   1535c:	e1 14       	cp	r14, r1
   1535e:	f1 04       	cpc	r15, r1
   15360:	09 f4       	brne	.+2      	; 0x15364 <SS80_Transparent_State+0x6c>
   15362:	d0 c0       	rjmp	.+416    	; 0x15504 <SS80_Transparent_State+0x20c>
   15364:	90 fd       	sbrc	r25, 0
   15366:	0e c0       	rjmp	.+28     	; 0x15384 <SS80_Transparent_State+0x8c>
   15368:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1536c:	80 ff       	sbrs	r24, 0
   1536e:	0a c0       	rjmp	.+20     	; 0x15384 <SS80_Transparent_State+0x8c>
   15370:	84 e9       	ldi	r24, 0x94	; 148
   15372:	9f e1       	ldi	r25, 0x1F	; 31
   15374:	a0 e0       	ldi	r26, 0x00	; 0
   15376:	ed b7       	in	r30, 0x3d	; 61
   15378:	fe b7       	in	r31, 0x3e	; 62
   1537a:	81 83       	std	Z+1, r24	; 0x01
   1537c:	92 83       	std	Z+2, r25	; 0x02
   1537e:	a3 83       	std	Z+3, r26	; 0x03
   15380:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15384:	86 ef       	ldi	r24, 0xF6	; 246
   15386:	a8 2e       	mov	r10, r24
   15388:	8c e1       	ldi	r24, 0x1C	; 28
   1538a:	b8 2e       	mov	r11, r24
   1538c:	00 e0       	ldi	r16, 0x00	; 0
   1538e:	10 e0       	ldi	r17, 0x00	; 0
   15390:	0e 15       	cp	r16, r14
   15392:	1f 05       	cpc	r17, r15
   15394:	0c f0       	brlt	.+2      	; 0x15398 <SS80_Transparent_State+0xa0>
   15396:	9c c0       	rjmp	.+312    	; 0x154d0 <SS80_Transparent_State+0x1d8>
   15398:	68 01       	movw	r12, r16
   1539a:	ff ef       	ldi	r31, 0xFF	; 255
   1539c:	cf 1a       	sub	r12, r31
   1539e:	df 0a       	sbc	r13, r31
   153a0:	f5 01       	movw	r30, r10
   153a2:	81 91       	ld	r24, Z+
   153a4:	5f 01       	movw	r10, r30
   153a6:	28 2f       	mov	r18, r24
   153a8:	30 e0       	ldi	r19, 0x00	; 0
   153aa:	a9 01       	movw	r20, r18
   153ac:	40 52       	subi	r20, 0x20	; 32
   153ae:	51 09       	sbc	r21, r1
   153b0:	40 31       	cpi	r20, 0x10	; 16
   153b2:	51 05       	cpc	r21, r1
   153b4:	20 f4       	brcc	.+8      	; 0x153be <SS80_Transparent_State+0xc6>
   153b6:	80 52       	subi	r24, 0x20	; 32
   153b8:	8c d9       	rcall	.-3304   	; 0x146d2 <SS80_Check_Unit>
   153ba:	86 01       	movw	r16, r12
   153bc:	e9 cf       	rjmp	.-46     	; 0x15390 <SS80_Transparent_State+0x98>
   153be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   153c6:	21 30       	cpi	r18, 0x01	; 1
   153c8:	31 05       	cpc	r19, r1
   153ca:	c9 f4       	brne	.+50     	; 0x153fe <SS80_Transparent_State+0x106>
   153cc:	0e 5f       	subi	r16, 0xFE	; 254
   153ce:	1f 4f       	sbci	r17, 0xFF	; 255
   153d0:	80 73       	andi	r24, 0x30	; 48
   153d2:	99 27       	eor	r25, r25
   153d4:	89 2b       	or	r24, r25
   153d6:	51 f0       	breq	.+20     	; 0x153ec <SS80_Transparent_State+0xf4>
   153d8:	8f e6       	ldi	r24, 0x6F	; 111
   153da:	9f e1       	ldi	r25, 0x1F	; 31
   153dc:	a0 e0       	ldi	r26, 0x00	; 0
   153de:	ed b7       	in	r30, 0x3d	; 61
   153e0:	fe b7       	in	r31, 0x3e	; 62
   153e2:	81 83       	std	Z+1, r24	; 0x01
   153e4:	92 83       	std	Z+2, r25	; 0x02
   153e6:	a3 83       	std	Z+3, r26	; 0x03
   153e8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   153ec:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   153f0:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   153f4:	81 81       	ldd	r24, Z+1	; 0x01
   153f6:	90 e0       	ldi	r25, 0x00	; 0
   153f8:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   153fc:	69 c0       	rjmp	.+210    	; 0x154d0 <SS80_Transparent_State+0x1d8>
   153fe:	22 30       	cpi	r18, 0x02	; 2
   15400:	31 05       	cpc	r19, r1
   15402:	51 f4       	brne	.+20     	; 0x15418 <SS80_Transparent_State+0x120>
   15404:	0b 5f       	subi	r16, 0xFB	; 251
   15406:	1f 4f       	sbci	r17, 0xFF	; 255
   15408:	80 73       	andi	r24, 0x30	; 48
   1540a:	99 27       	eor	r25, r25
   1540c:	89 2b       	or	r24, r25
   1540e:	09 f4       	brne	.+2      	; 0x15412 <SS80_Transparent_State+0x11a>
   15410:	5f c0       	rjmp	.+190    	; 0x154d0 <SS80_Transparent_State+0x1d8>
   15412:	82 e5       	ldi	r24, 0x52	; 82
   15414:	9f e1       	ldi	r25, 0x1F	; 31
   15416:	0c c0       	rjmp	.+24     	; 0x15430 <SS80_Transparent_State+0x138>
   15418:	23 30       	cpi	r18, 0x03	; 3
   1541a:	31 05       	cpc	r19, r1
   1541c:	91 f4       	brne	.+36     	; 0x15442 <SS80_Transparent_State+0x14a>
   1541e:	0b 5f       	subi	r16, 0xFB	; 251
   15420:	1f 4f       	sbci	r17, 0xFF	; 255
   15422:	80 73       	andi	r24, 0x30	; 48
   15424:	99 27       	eor	r25, r25
   15426:	89 2b       	or	r24, r25
   15428:	09 f4       	brne	.+2      	; 0x1542c <SS80_Transparent_State+0x134>
   1542a:	52 c0       	rjmp	.+164    	; 0x154d0 <SS80_Transparent_State+0x1d8>
   1542c:	84 e3       	ldi	r24, 0x34	; 52
   1542e:	9f e1       	ldi	r25, 0x1F	; 31
   15430:	a0 e0       	ldi	r26, 0x00	; 0
   15432:	ed b7       	in	r30, 0x3d	; 61
   15434:	fe b7       	in	r31, 0x3e	; 62
   15436:	81 83       	std	Z+1, r24	; 0x01
   15438:	92 83       	std	Z+2, r25	; 0x02
   1543a:	a3 83       	std	Z+3, r26	; 0x03
   1543c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15440:	47 c0       	rjmp	.+142    	; 0x154d0 <SS80_Transparent_State+0x1d8>
   15442:	28 30       	cpi	r18, 0x08	; 8
   15444:	31 05       	cpc	r19, r1
   15446:	e1 f4       	brne	.+56     	; 0x15480 <SS80_Transparent_State+0x188>
   15448:	85 ff       	sbrs	r24, 5
   1544a:	12 c0       	rjmp	.+36     	; 0x15470 <SS80_Transparent_State+0x178>
   1544c:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15450:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15454:	85 81       	ldd	r24, Z+5	; 0x05
   15456:	90 e0       	ldi	r25, 0x00	; 0
   15458:	ed b7       	in	r30, 0x3d	; 61
   1545a:	fe b7       	in	r31, 0x3e	; 62
   1545c:	95 83       	std	Z+5, r25	; 0x05
   1545e:	84 83       	std	Z+4, r24	; 0x04
   15460:	8d e0       	ldi	r24, 0x0D	; 13
   15462:	9f e1       	ldi	r25, 0x1F	; 31
   15464:	a0 e0       	ldi	r26, 0x00	; 0
   15466:	81 83       	std	Z+1, r24	; 0x01
   15468:	92 83       	std	Z+2, r25	; 0x02
   1546a:	a3 83       	std	Z+3, r26	; 0x03
   1546c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15470:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15474:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15478:	85 81       	ldd	r24, Z+5	; 0x05
   1547a:	90 e0       	ldi	r25, 0x00	; 0
   1547c:	aa de       	rcall	.-684    	; 0x151d2 <SS80_Channel_Independent_Clear>
   1547e:	44 c0       	rjmp	.+136    	; 0x15508 <SS80_Transparent_State+0x210>
   15480:	29 30       	cpi	r18, 0x09	; 9
   15482:	31 05       	cpc	r19, r1
   15484:	b1 f4       	brne	.+44     	; 0x154b2 <SS80_Transparent_State+0x1ba>
   15486:	85 ff       	sbrs	r24, 5
   15488:	12 c0       	rjmp	.+36     	; 0x154ae <SS80_Transparent_State+0x1b6>
   1548a:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1548e:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15492:	85 81       	ldd	r24, Z+5	; 0x05
   15494:	90 e0       	ldi	r25, 0x00	; 0
   15496:	ed b7       	in	r30, 0x3d	; 61
   15498:	fe b7       	in	r31, 0x3e	; 62
   1549a:	95 83       	std	Z+5, r25	; 0x05
   1549c:	84 83       	std	Z+4, r24	; 0x04
   1549e:	89 ef       	ldi	r24, 0xF9	; 249
   154a0:	9e e1       	ldi	r25, 0x1E	; 30
   154a2:	a0 e0       	ldi	r26, 0x00	; 0
   154a4:	81 83       	std	Z+1, r24	; 0x01
   154a6:	92 83       	std	Z+2, r25	; 0x02
   154a8:	a3 83       	std	Z+3, r26	; 0x03
   154aa:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   154ae:	13 df       	rcall	.-474    	; 0x152d6 <SS80_Cancel>
   154b0:	2b c0       	rjmp	.+86     	; 0x15508 <SS80_Transparent_State+0x210>
   154b2:	80 ff       	sbrs	r24, 0
   154b4:	22 c0       	rjmp	.+68     	; 0x154fa <SS80_Transparent_State+0x202>
   154b6:	ed b7       	in	r30, 0x3d	; 61
   154b8:	fe b7       	in	r31, 0x3e	; 62
   154ba:	35 83       	std	Z+5, r19	; 0x05
   154bc:	24 83       	std	Z+4, r18	; 0x04
   154be:	89 ed       	ldi	r24, 0xD9	; 217
   154c0:	9e e1       	ldi	r25, 0x1E	; 30
   154c2:	a0 e0       	ldi	r26, 0x00	; 0
   154c4:	81 83       	std	Z+1, r24	; 0x01
   154c6:	92 83       	std	Z+2, r25	; 0x02
   154c8:	a3 83       	std	Z+3, r26	; 0x03
   154ca:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   154ce:	86 01       	movw	r16, r12
   154d0:	0e 15       	cp	r16, r14
   154d2:	1f 05       	cpc	r17, r15
   154d4:	91 f0       	breq	.+36     	; 0x154fa <SS80_Transparent_State+0x202>
   154d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154da:	80 ff       	sbrs	r24, 0
   154dc:	0e c0       	rjmp	.+28     	; 0x154fa <SS80_Transparent_State+0x202>
   154de:	ed b7       	in	r30, 0x3d	; 61
   154e0:	fe b7       	in	r31, 0x3e	; 62
   154e2:	f7 82       	std	Z+7, r15	; 0x07
   154e4:	e6 82       	std	Z+6, r14	; 0x06
   154e6:	15 83       	std	Z+5, r17	; 0x05
   154e8:	04 83       	std	Z+4, r16	; 0x04
   154ea:	8d e9       	ldi	r24, 0x9D	; 157
   154ec:	9e e1       	ldi	r25, 0x1E	; 30
   154ee:	a0 e0       	ldi	r26, 0x00	; 0
   154f0:	81 83       	std	Z+1, r24	; 0x01
   154f2:	92 83       	std	Z+2, r25	; 0x02
   154f4:	a3 83       	std	Z+3, r26	; 0x03
   154f6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   154fa:	88 85       	ldd	r24, Y+8	; 0x08
   154fc:	99 85       	ldd	r25, Y+9	; 0x09
   154fe:	88 27       	eor	r24, r24
   15500:	90 7d       	andi	r25, 0xD0	; 208
   15502:	02 c0       	rjmp	.+4      	; 0x15508 <SS80_Transparent_State+0x210>
   15504:	80 e0       	ldi	r24, 0x00	; 0
   15506:	90 e0       	ldi	r25, 0x00	; 0
   15508:	29 96       	adiw	r28, 0x09	; 9
   1550a:	ea e0       	ldi	r30, 0x0A	; 10
   1550c:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

00015510 <SS80_error_return>:
   15510:	a6 e0       	ldi	r26, 0x06	; 6
   15512:	b0 e0       	ldi	r27, 0x00	; 0
   15514:	ee e8       	ldi	r30, 0x8E	; 142
   15516:	fa ea       	ldi	r31, 0xAA	; 170
   15518:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   1551c:	80 e0       	ldi	r24, 0x00	; 0
   1551e:	91 e0       	ldi	r25, 0x01	; 1
   15520:	9d 83       	std	Y+5, r25	; 0x05
   15522:	8c 83       	std	Y+4, r24	; 0x04
   15524:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15528:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   1552c:	81 e0       	ldi	r24, 0x01	; 1
   1552e:	82 83       	std	Z+2, r24	; 0x02
   15530:	8e 83       	std	Y+6, r24	; 0x06
   15532:	ae 01       	movw	r20, r28
   15534:	4c 5f       	subi	r20, 0xFC	; 252
   15536:	5f 4f       	sbci	r21, 0xFF	; 255
   15538:	61 e0       	ldi	r22, 0x01	; 1
   1553a:	70 e0       	ldi	r23, 0x00	; 0
   1553c:	ce 01       	movw	r24, r28
   1553e:	06 96       	adiw	r24, 0x06	; 6
   15540:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   15544:	01 97       	sbiw	r24, 0x01	; 1
   15546:	99 f0       	breq	.+38     	; 0x1556e <SS80_error_return+0x5e>
   15548:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1554c:	80 ff       	sbrs	r24, 0
   1554e:	0a c0       	rjmp	.+20     	; 0x15564 <SS80_error_return+0x54>
   15550:	8b ee       	ldi	r24, 0xEB	; 235
   15552:	9d e1       	ldi	r25, 0x1D	; 29
   15554:	a0 e0       	ldi	r26, 0x00	; 0
   15556:	ed b7       	in	r30, 0x3d	; 61
   15558:	fe b7       	in	r31, 0x3e	; 62
   1555a:	81 83       	std	Z+1, r24	; 0x01
   1555c:	92 83       	std	Z+2, r25	; 0x02
   1555e:	a3 83       	std	Z+3, r26	; 0x03
   15560:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15564:	8c 81       	ldd	r24, Y+4	; 0x04
   15566:	9d 81       	ldd	r25, Y+5	; 0x05
   15568:	88 27       	eor	r24, r24
   1556a:	90 7d       	andi	r25, 0xD0	; 208
   1556c:	07 c0       	rjmp	.+14     	; 0x1557c <SS80_error_return+0x6c>
   1556e:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15572:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15576:	12 82       	std	Z+2, r1	; 0x02
   15578:	80 e0       	ldi	r24, 0x00	; 0
   1557a:	90 e0       	ldi	r25, 0x00	; 0
   1557c:	26 96       	adiw	r28, 0x06	; 6
   1557e:	e2 e0       	ldi	r30, 0x02	; 2
   15580:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00015584 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   15584:	a7 e1       	ldi	r26, 0x17	; 23
   15586:	b0 e0       	ldi	r27, 0x00	; 0
   15588:	e8 ec       	ldi	r30, 0xC8	; 200
   1558a:	fa ea       	ldi	r31, 0xAA	; 170
   1558c:	0c 94 c3 df 	jmp	0x1bf86	; 0x1bf86 <__prologue_saves__+0x2>
   15590:	60 91 73 19 	lds	r22, 0x1973	; 0x801973 <SS80s>
   15594:	70 91 74 19 	lds	r23, 0x1974	; 0x801974 <SS80s+0x1>
   15598:	fb 01       	movw	r30, r22
   1559a:	27 81       	ldd	r18, Z+7	; 0x07
   1559c:	30 85       	ldd	r19, Z+8	; 0x08
   1559e:	41 85       	ldd	r20, Z+9	; 0x09
   155a0:	52 85       	ldd	r21, Z+10	; 0x0a
   155a2:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <SS80p>
   155a6:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <SS80p+0x1>
   155aa:	fc 01       	movw	r30, r24
   155ac:	a0 89       	ldd	r26, Z+16	; 0x10
   155ae:	b1 89       	ldd	r27, Z+17	; 0x11
   155b0:	fb 01       	movw	r30, r22
   155b2:	12 82       	std	Z+2, r1	; 0x02
   155b4:	1d 86       	std	Y+13, r1	; 0x0d
   155b6:	1c 86       	std	Y+12, r1	; 0x0c
   155b8:	54 98       	cbi	0x0a, 4	; 10
   155ba:	4c 99       	sbic	0x09, 4	; 9
   155bc:	03 c0       	rjmp	.+6      	; 0x155c4 <SS80_locate_and_read+0x40>
   155be:	80 e0       	ldi	r24, 0x00	; 0
   155c0:	90 e1       	ldi	r25, 0x10	; 16
   155c2:	3e c1       	rjmp	.+636    	; 0x15840 <SS80_locate_and_read+0x2bc>
   155c4:	0e 94 a2 df 	call	0x1bf44	; 0x1bf44 <__muluhisi3>
   155c8:	4b 01       	movw	r8, r22
   155ca:	5c 01       	movw	r10, r24
   155cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   155d0:	85 ff       	sbrs	r24, 5
   155d2:	1a c0       	rjmp	.+52     	; 0x15608 <SS80_locate_and_read+0x84>
   155d4:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   155d8:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   155dc:	83 85       	ldd	r24, Z+11	; 0x0b
   155de:	94 85       	ldd	r25, Z+12	; 0x0c
   155e0:	a5 85       	ldd	r26, Z+13	; 0x0d
   155e2:	b6 85       	ldd	r27, Z+14	; 0x0e
   155e4:	ed b7       	in	r30, 0x3d	; 61
   155e6:	fe b7       	in	r31, 0x3e	; 62
   155e8:	80 87       	std	Z+8, r24	; 0x08
   155ea:	91 87       	std	Z+9, r25	; 0x09
   155ec:	a2 87       	std	Z+10, r26	; 0x0a
   155ee:	b3 87       	std	Z+11, r27	; 0x0b
   155f0:	84 82       	std	Z+4, r8	; 0x04
   155f2:	95 82       	std	Z+5, r9	; 0x05
   155f4:	a6 82       	std	Z+6, r10	; 0x06
   155f6:	b7 82       	std	Z+7, r11	; 0x07
   155f8:	85 ec       	ldi	r24, 0xC5	; 197
   155fa:	94 e2       	ldi	r25, 0x24	; 36
   155fc:	a0 e0       	ldi	r26, 0x00	; 0
   155fe:	81 83       	std	Z+1, r24	; 0x01
   15600:	92 83       	std	Z+2, r25	; 0x02
   15602:	a3 83       	std	Z+3, r26	; 0x03
   15604:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15608:	2b db       	rcall	.-2474   	; 0x14c60 <SS80_cmd_seek>
   1560a:	89 2b       	or	r24, r25
   1560c:	09 f0       	breq	.+2      	; 0x15610 <SS80_locate_and_read+0x8c>
   1560e:	ae c0       	rjmp	.+348    	; 0x1576c <SS80_locate_and_read+0x1e8>
   15610:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15614:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15618:	43 84       	ldd	r4, Z+11	; 0x0b
   1561a:	54 84       	ldd	r5, Z+12	; 0x0c
   1561c:	65 84       	ldd	r6, Z+13	; 0x0d
   1561e:	76 84       	ldd	r7, Z+14	; 0x0e
   15620:	1e 86       	std	Y+14, r1	; 0x0e
   15622:	1f 86       	std	Y+15, r1	; 0x0f
   15624:	18 8a       	std	Y+16, r1	; 0x10
   15626:	19 8a       	std	Y+17, r1	; 0x11
   15628:	87 ea       	ldi	r24, 0xA7	; 167
   1562a:	94 e2       	ldi	r25, 0x24	; 36
   1562c:	9c 01       	movw	r18, r24
   1562e:	40 e0       	ldi	r20, 0x00	; 0
   15630:	2a 8b       	std	Y+18, r18	; 0x12
   15632:	3b 8b       	std	Y+19, r19	; 0x13
   15634:	4c 8b       	std	Y+20, r20	; 0x14
   15636:	33 24       	eor	r3, r3
   15638:	33 94       	inc	r3
   1563a:	86 e7       	ldi	r24, 0x76	; 118
   1563c:	94 e2       	ldi	r25, 0x24	; 36
   1563e:	9c 01       	movw	r18, r24
   15640:	40 e0       	ldi	r20, 0x00	; 0
   15642:	2d 8b       	std	Y+21, r18	; 0x15
   15644:	3e 8b       	std	Y+22, r19	; 0x16
   15646:	4f 8b       	std	Y+23, r20	; 0x17
   15648:	34 c0       	rjmp	.+104    	; 0x156b2 <SS80_locate_and_read+0x12e>
   1564a:	87 fd       	sbrc	r24, 7
   1564c:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   15650:	ae 01       	movw	r20, r28
   15652:	44 5f       	subi	r20, 0xF4	; 244
   15654:	5f 4f       	sbci	r21, 0xFF	; 255
   15656:	b6 01       	movw	r22, r12
   15658:	86 ef       	ldi	r24, 0xF6	; 246
   1565a:	9c e1       	ldi	r25, 0x1C	; 28
   1565c:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   15660:	8c 01       	movw	r16, r24
   15662:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15666:	87 ff       	sbrs	r24, 7
   15668:	04 c0       	rjmp	.+8      	; 0x15672 <SS80_locate_and_read+0xee>
   1566a:	8c ea       	ldi	r24, 0xAC	; 172
   1566c:	90 e1       	ldi	r25, 0x10	; 16
   1566e:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   15672:	c0 16       	cp	r12, r16
   15674:	d1 06       	cpc	r13, r17
   15676:	09 f0       	breq	.+2      	; 0x1567a <SS80_locate_and_read+0xf6>
   15678:	82 c0       	rjmp	.+260    	; 0x1577e <SS80_locate_and_read+0x1fa>
   1567a:	0d 2c       	mov	r0, r13
   1567c:	00 0c       	add	r0, r0
   1567e:	ee 08       	sbc	r14, r14
   15680:	ff 08       	sbc	r15, r15
   15682:	8c 0c       	add	r8, r12
   15684:	9d 1c       	adc	r9, r13
   15686:	ae 1c       	adc	r10, r14
   15688:	bf 1c       	adc	r11, r15
   1568a:	01 2e       	mov	r0, r17
   1568c:	00 0c       	add	r0, r0
   1568e:	22 0b       	sbc	r18, r18
   15690:	33 0b       	sbc	r19, r19
   15692:	8e 85       	ldd	r24, Y+14	; 0x0e
   15694:	9f 85       	ldd	r25, Y+15	; 0x0f
   15696:	a8 89       	ldd	r26, Y+16	; 0x10
   15698:	b9 89       	ldd	r27, Y+17	; 0x11
   1569a:	80 0f       	add	r24, r16
   1569c:	91 1f       	adc	r25, r17
   1569e:	a2 1f       	adc	r26, r18
   156a0:	b3 1f       	adc	r27, r19
   156a2:	8e 87       	std	Y+14, r24	; 0x0e
   156a4:	9f 87       	std	Y+15, r25	; 0x0f
   156a6:	a8 8b       	std	Y+16, r26	; 0x10
   156a8:	b9 8b       	std	Y+17, r27	; 0x11
   156aa:	40 1a       	sub	r4, r16
   156ac:	51 0a       	sbc	r5, r17
   156ae:	62 0a       	sbc	r6, r18
   156b0:	73 0a       	sbc	r7, r19
   156b2:	41 14       	cp	r4, r1
   156b4:	51 04       	cpc	r5, r1
   156b6:	61 04       	cpc	r6, r1
   156b8:	71 04       	cpc	r7, r1
   156ba:	09 f4       	brne	.+2      	; 0x156be <SS80_locate_and_read+0x13a>
   156bc:	92 c0       	rjmp	.+292    	; 0x157e2 <SS80_locate_and_read+0x25e>
   156be:	54 98       	cbi	0x0a, 4	; 10
   156c0:	4c 9b       	sbis	0x09, 4	; 9
   156c2:	7d cf       	rjmp	.-262    	; 0x155be <SS80_locate_and_read+0x3a>
   156c4:	31 e0       	ldi	r19, 0x01	; 1
   156c6:	43 16       	cp	r4, r19
   156c8:	53 06       	cpc	r5, r19
   156ca:	61 04       	cpc	r6, r1
   156cc:	71 04       	cpc	r7, r1
   156ce:	08 f4       	brcc	.+2      	; 0x156d2 <SS80_locate_and_read+0x14e>
   156d0:	4f c0       	rjmp	.+158    	; 0x15770 <SS80_locate_and_read+0x1ec>
   156d2:	1d 86       	std	Y+13, r1	; 0x0d
   156d4:	1c 86       	std	Y+12, r1	; 0x0c
   156d6:	c1 2c       	mov	r12, r1
   156d8:	dd 24       	eor	r13, r13
   156da:	d3 94       	inc	r13
   156dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156e0:	86 fd       	sbrc	r24, 6
   156e2:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   156e6:	e0 90 73 19 	lds	r14, 0x1973	; 0x801973 <SS80s>
   156ea:	f0 90 74 19 	lds	r15, 0x1974	; 0x801974 <SS80s+0x1>
   156ee:	43 e0       	ldi	r20, 0x03	; 3
   156f0:	e4 0e       	add	r14, r20
   156f2:	f1 1c       	adc	r15, r1
   156f4:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   156f8:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   156fc:	86 01       	movw	r16, r12
   156fe:	26 ef       	ldi	r18, 0xF6	; 246
   15700:	3c e1       	ldi	r19, 0x1C	; 28
   15702:	b5 01       	movw	r22, r10
   15704:	a4 01       	movw	r20, r8
   15706:	82 81       	ldd	r24, Z+2	; 0x02
   15708:	93 81       	ldd	r25, Z+3	; 0x03
   1570a:	0e 94 22 82 	call	0x10444	; 0x10444 <dbf_open_read>
   1570e:	8c 01       	movw	r16, r24
   15710:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15714:	86 ff       	sbrs	r24, 6
   15716:	04 c0       	rjmp	.+8      	; 0x15720 <SS80_locate_and_read+0x19c>
   15718:	81 ea       	ldi	r24, 0xA1	; 161
   1571a:	90 e1       	ldi	r25, 0x10	; 16
   1571c:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   15720:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15724:	85 ff       	sbrs	r24, 5
   15726:	0c c0       	rjmp	.+24     	; 0x15740 <SS80_locate_and_read+0x1bc>
   15728:	ed b7       	in	r30, 0x3d	; 61
   1572a:	fe b7       	in	r31, 0x3e	; 62
   1572c:	15 83       	std	Z+5, r17	; 0x05
   1572e:	04 83       	std	Z+4, r16	; 0x04
   15730:	2a 89       	ldd	r18, Y+18	; 0x12
   15732:	3b 89       	ldd	r19, Y+19	; 0x13
   15734:	4c 89       	ldd	r20, Y+20	; 0x14
   15736:	21 83       	std	Z+1, r18	; 0x01
   15738:	32 83       	std	Z+2, r19	; 0x02
   1573a:	43 83       	std	Z+3, r20	; 0x03
   1573c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15740:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15744:	17 ff       	sbrs	r17, 7
   15746:	81 cf       	rjmp	.-254    	; 0x1564a <SS80_locate_and_read+0xc6>
   15748:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   1574c:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15750:	91 e0       	ldi	r25, 0x01	; 1
   15752:	92 83       	std	Z+2, r25	; 0x02
   15754:	80 ff       	sbrs	r24, 0
   15756:	0a c0       	rjmp	.+20     	; 0x1576c <SS80_locate_and_read+0x1e8>
   15758:	8f e8       	ldi	r24, 0x8F	; 143
   1575a:	94 e2       	ldi	r25, 0x24	; 36
   1575c:	a0 e0       	ldi	r26, 0x00	; 0
   1575e:	ed b7       	in	r30, 0x3d	; 61
   15760:	fe b7       	in	r31, 0x3e	; 62
   15762:	81 83       	std	Z+1, r24	; 0x01
   15764:	92 83       	std	Z+2, r25	; 0x02
   15766:	a3 83       	std	Z+3, r26	; 0x03
   15768:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1576c:	d1 de       	rcall	.-606    	; 0x15510 <SS80_error_return>
   1576e:	68 c0       	rjmp	.+208    	; 0x15840 <SS80_locate_and_read+0x2bc>
   15770:	62 01       	movw	r12, r4
   15772:	8c 85       	ldd	r24, Y+12	; 0x0c
   15774:	9d 85       	ldd	r25, Y+13	; 0x0d
   15776:	91 60       	ori	r25, 0x01	; 1
   15778:	9d 87       	std	Y+13, r25	; 0x0d
   1577a:	8c 87       	std	Y+12, r24	; 0x0c
   1577c:	af cf       	rjmp	.-162    	; 0x156dc <SS80_locate_and_read+0x158>
   1577e:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15782:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   15786:	32 82       	std	Z+2, r3	; 0x02
   15788:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1578c:	80 ff       	sbrs	r24, 0
   1578e:	0a c0       	rjmp	.+20     	; 0x157a4 <SS80_locate_and_read+0x220>
   15790:	2d 89       	ldd	r18, Y+21	; 0x15
   15792:	3e 89       	ldd	r19, Y+22	; 0x16
   15794:	4f 89       	ldd	r20, Y+23	; 0x17
   15796:	ed b7       	in	r30, 0x3d	; 61
   15798:	fe b7       	in	r31, 0x3e	; 62
   1579a:	21 83       	std	Z+1, r18	; 0x01
   1579c:	32 83       	std	Z+2, r19	; 0x02
   1579e:	43 83       	std	Z+3, r20	; 0x03
   157a0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   157a4:	8c 85       	ldd	r24, Y+12	; 0x0c
   157a6:	9d 85       	ldd	r25, Y+13	; 0x0d
   157a8:	88 27       	eor	r24, r24
   157aa:	90 7d       	andi	r25, 0xD0	; 208
   157ac:	89 2b       	or	r24, r25
   157ae:	09 f4       	brne	.+2      	; 0x157b2 <SS80_locate_and_read+0x22e>
   157b0:	64 cf       	rjmp	.-312    	; 0x1567a <SS80_locate_and_read+0xf6>
   157b2:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   157b6:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   157ba:	83 81       	ldd	r24, Z+3	; 0x03
   157bc:	94 81       	ldd	r25, Z+4	; 0x04
   157be:	80 62       	ori	r24, 0x20	; 32
   157c0:	94 83       	std	Z+4, r25	; 0x04
   157c2:	83 83       	std	Z+3, r24	; 0x03
   157c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   157c8:	80 ff       	sbrs	r24, 0
   157ca:	21 c0       	rjmp	.+66     	; 0x1580e <SS80_locate_and_read+0x28a>
   157cc:	81 e5       	ldi	r24, 0x51	; 81
   157ce:	94 e2       	ldi	r25, 0x24	; 36
   157d0:	a0 e0       	ldi	r26, 0x00	; 0
   157d2:	ed b7       	in	r30, 0x3d	; 61
   157d4:	fe b7       	in	r31, 0x3e	; 62
   157d6:	81 83       	std	Z+1, r24	; 0x01
   157d8:	92 83       	std	Z+2, r25	; 0x02
   157da:	a3 83       	std	Z+3, r26	; 0x03
   157dc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   157e0:	16 c0       	rjmp	.+44     	; 0x1580e <SS80_locate_and_read+0x28a>
   157e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   157e6:	85 ff       	sbrs	r24, 5
   157e8:	12 c0       	rjmp	.+36     	; 0x1580e <SS80_locate_and_read+0x28a>
   157ea:	8e 85       	ldd	r24, Y+14	; 0x0e
   157ec:	9f 85       	ldd	r25, Y+15	; 0x0f
   157ee:	a8 89       	ldd	r26, Y+16	; 0x10
   157f0:	b9 89       	ldd	r27, Y+17	; 0x11
   157f2:	ed b7       	in	r30, 0x3d	; 61
   157f4:	fe b7       	in	r31, 0x3e	; 62
   157f6:	84 83       	std	Z+4, r24	; 0x04
   157f8:	95 83       	std	Z+5, r25	; 0x05
   157fa:	a6 83       	std	Z+6, r26	; 0x06
   157fc:	b7 83       	std	Z+7, r27	; 0x07
   157fe:	89 e2       	ldi	r24, 0x29	; 41
   15800:	94 e2       	ldi	r25, 0x24	; 36
   15802:	a0 e0       	ldi	r26, 0x00	; 0
   15804:	81 83       	std	Z+1, r24	; 0x01
   15806:	92 83       	std	Z+2, r25	; 0x02
   15808:	a3 83       	std	Z+3, r26	; 0x03
   1580a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1580e:	00 91 73 19 	lds	r16, 0x1973	; 0x801973 <SS80s>
   15812:	10 91 74 19 	lds	r17, 0x1974	; 0x801974 <SS80s+0x1>
   15816:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   1581a:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1581e:	20 89       	ldd	r18, Z+16	; 0x10
   15820:	31 89       	ldd	r19, Z+17	; 0x11
   15822:	40 e0       	ldi	r20, 0x00	; 0
   15824:	50 e0       	ldi	r21, 0x00	; 0
   15826:	c5 01       	movw	r24, r10
   15828:	b4 01       	movw	r22, r8
   1582a:	0e 94 55 df 	call	0x1beaa	; 0x1beaa <__udivmodsi4>
   1582e:	f8 01       	movw	r30, r16
   15830:	27 83       	std	Z+7, r18	; 0x07
   15832:	30 87       	std	Z+8, r19	; 0x08
   15834:	41 87       	std	Z+9, r20	; 0x09
   15836:	52 87       	std	Z+10, r21	; 0x0a
   15838:	8c 85       	ldd	r24, Y+12	; 0x0c
   1583a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1583c:	88 27       	eor	r24, r24
   1583e:	90 7d       	andi	r25, 0xD0	; 208
   15840:	67 96       	adiw	r28, 0x17	; 23
   15842:	e1 e1       	ldi	r30, 0x11	; 17
   15844:	0c 94 df df 	jmp	0x1bfbe	; 0x1bfbe <__epilogue_restores__+0x2>

00015848 <SS80_Execute_State>:
   15848:	cf 93       	push	r28
   1584a:	df 93       	push	r29
   1584c:	00 d0       	rcall	.+0      	; 0x1584e <SS80_Execute_State+0x6>
   1584e:	00 d0       	rcall	.+0      	; 0x15850 <SS80_Execute_State+0x8>
   15850:	1f 92       	push	r1
   15852:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15856:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   1585a:	81 81       	ldd	r24, Z+1	; 0x01
   1585c:	90 e0       	ldi	r25, 0x00	; 0
   1585e:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
   15862:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   15866:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   1586a:	80 81       	ld	r24, Z
   1586c:	91 81       	ldd	r25, Z+1	; 0x01
   1586e:	82 30       	cpi	r24, 0x02	; 2
   15870:	91 05       	cpc	r25, r1
   15872:	89 f0       	breq	.+34     	; 0x15896 <SS80_Execute_State+0x4e>
   15874:	3c f4       	brge	.+14     	; 0x15884 <SS80_Execute_State+0x3c>
   15876:	00 97       	sbiw	r24, 0x00	; 0
   15878:	81 f1       	breq	.+96     	; 0x158da <SS80_Execute_State+0x92>
   1587a:	81 30       	cpi	r24, 0x01	; 1
   1587c:	91 05       	cpc	r25, r1
   1587e:	b9 f4       	brne	.+46     	; 0x158ae <SS80_Execute_State+0x66>
   15880:	81 de       	rcall	.-766    	; 0x15584 <SS80_locate_and_read>
   15882:	0d c0       	rjmp	.+26     	; 0x1589e <SS80_Execute_State+0x56>
   15884:	83 30       	cpi	r24, 0x03	; 3
   15886:	91 05       	cpc	r25, r1
   15888:	41 f0       	breq	.+16     	; 0x1589a <SS80_Execute_State+0x52>
   1588a:	84 30       	cpi	r24, 0x04	; 4
   1588c:	91 05       	cpc	r25, r1
   1588e:	79 f4       	brne	.+30     	; 0x158ae <SS80_Execute_State+0x66>
   15890:	0e 94 f9 a2 	call	0x145f2	; 0x145f2 <SS80_describe>
   15894:	04 c0       	rjmp	.+8      	; 0x1589e <SS80_Execute_State+0x56>
   15896:	59 da       	rcall	.-2894   	; 0x14d4a <SS80_locate_and_write>
   15898:	02 c0       	rjmp	.+4      	; 0x1589e <SS80_Execute_State+0x56>
   1589a:	0e 94 78 a2 	call	0x144f0	; 0x144f0 <SS80_send_status>
   1589e:	ec 01       	movw	r28, r24
   158a0:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   158a4:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   158a8:	11 82       	std	Z+1, r1	; 0x01
   158aa:	10 82       	st	Z, r1
   158ac:	18 c0       	rjmp	.+48     	; 0x158de <SS80_Execute_State+0x96>
   158ae:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   158b2:	20 ff       	sbrs	r18, 0
   158b4:	0c c0       	rjmp	.+24     	; 0x158ce <SS80_Execute_State+0x86>
   158b6:	ed b7       	in	r30, 0x3d	; 61
   158b8:	fe b7       	in	r31, 0x3e	; 62
   158ba:	95 83       	std	Z+5, r25	; 0x05
   158bc:	84 83       	std	Z+4, r24	; 0x04
   158be:	8d ee       	ldi	r24, 0xED	; 237
   158c0:	94 e2       	ldi	r25, 0x24	; 36
   158c2:	a0 e0       	ldi	r26, 0x00	; 0
   158c4:	81 83       	std	Z+1, r24	; 0x01
   158c6:	92 83       	std	Z+2, r25	; 0x02
   158c8:	a3 83       	std	Z+3, r26	; 0x03
   158ca:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   158ce:	e0 91 73 19 	lds	r30, 0x1973	; 0x801973 <SS80s>
   158d2:	f0 91 74 19 	lds	r31, 0x1974	; 0x801974 <SS80s+0x1>
   158d6:	11 82       	std	Z+1, r1	; 0x01
   158d8:	10 82       	st	Z, r1
   158da:	c0 e0       	ldi	r28, 0x00	; 0
   158dc:	d0 e0       	ldi	r29, 0x00	; 0
   158de:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   158e2:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   158e6:	81 81       	ldd	r24, Z+1	; 0x01
   158e8:	90 e0       	ldi	r25, 0x00	; 0
   158ea:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   158ee:	ce 01       	movw	r24, r28
   158f0:	cd b7       	in	r28, 0x3d	; 61
   158f2:	de b7       	in	r29, 0x3e	; 62
   158f4:	25 96       	adiw	r28, 0x05	; 5
   158f6:	e2 e0       	ldi	r30, 0x02	; 2
   158f8:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000158fc <SS80_COMMANDS>:
   158fc:	a9 e0       	ldi	r26, 0x09	; 9
   158fe:	b0 e0       	ldi	r27, 0x00	; 0
   15900:	e4 e8       	ldi	r30, 0x84	; 132
   15902:	fc ea       	ldi	r31, 0xAC	; 172
   15904:	0c 94 d1 df 	jmp	0x1bfa2	; 0x1bfa2 <__prologue_saves__+0x1e>
   15908:	18 2f       	mov	r17, r24
   1590a:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1590e:	90 e0       	ldi	r25, 0x00	; 0
   15910:	0e 94 f5 89 	call	0x113ea	; 0x113ea <SS80_is_MTA>
   15914:	89 2b       	or	r24, r25
   15916:	19 f0       	breq	.+6      	; 0x1591e <SS80_COMMANDS+0x22>
   15918:	15 36       	cpi	r17, 0x65	; 101
   1591a:	19 f5       	brne	.+70     	; 0x15962 <SS80_COMMANDS+0x66>
   1591c:	09 c0       	rjmp	.+18     	; 0x15930 <SS80_COMMANDS+0x34>
   1591e:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15922:	90 e0       	ldi	r25, 0x00	; 0
   15924:	0e 94 e4 89 	call	0x113c8	; 0x113c8 <SS80_is_MLA>
   15928:	ec 01       	movw	r28, r24
   1592a:	89 2b       	or	r24, r25
   1592c:	a9 f7       	brne	.-22     	; 0x15918 <SS80_COMMANDS+0x1c>
   1592e:	ad c0       	rjmp	.+346    	; 0x15a8a <SS80_COMMANDS+0x18e>
   15930:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15934:	90 e0       	ldi	r25, 0x00	; 0
   15936:	0e 94 e4 89 	call	0x113c8	; 0x113c8 <SS80_is_MLA>
   1593a:	89 2b       	or	r24, r25
   1593c:	09 f4       	brne	.+2      	; 0x15940 <SS80_COMMANDS+0x44>
   1593e:	a2 c0       	rjmp	.+324    	; 0x15a84 <SS80_COMMANDS+0x188>
   15940:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15944:	85 ff       	sbrs	r24, 5
   15946:	0a c0       	rjmp	.+20     	; 0x1595c <SS80_COMMANDS+0x60>
   15948:	85 ed       	ldi	r24, 0xD5	; 213
   1594a:	9d e1       	ldi	r25, 0x1D	; 29
   1594c:	a0 e0       	ldi	r26, 0x00	; 0
   1594e:	ed b7       	in	r30, 0x3d	; 61
   15950:	fe b7       	in	r31, 0x3e	; 62
   15952:	81 83       	std	Z+1, r24	; 0x01
   15954:	92 83       	std	Z+2, r25	; 0x02
   15956:	a3 83       	std	Z+3, r26	; 0x03
   15958:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1595c:	0e 94 b9 a3 	call	0x14772	; 0x14772 <SS80_Command_State>
   15960:	73 c0       	rjmp	.+230    	; 0x15a48 <SS80_COMMANDS+0x14c>
   15962:	1e 36       	cpi	r17, 0x6E	; 110
   15964:	01 f5       	brne	.+64     	; 0x159a6 <SS80_COMMANDS+0xaa>
   15966:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1596a:	90 e0       	ldi	r25, 0x00	; 0
   1596c:	0e 94 e4 89 	call	0x113c8	; 0x113c8 <SS80_is_MLA>
   15970:	89 2b       	or	r24, r25
   15972:	79 f0       	breq	.+30     	; 0x15992 <SS80_COMMANDS+0x96>
   15974:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15978:	85 ff       	sbrs	r24, 5
   1597a:	13 c0       	rjmp	.+38     	; 0x159a2 <SS80_COMMANDS+0xa6>
   1597c:	8f eb       	ldi	r24, 0xBF	; 191
   1597e:	9d e1       	ldi	r25, 0x1D	; 29
   15980:	a0 e0       	ldi	r26, 0x00	; 0
   15982:	ed b7       	in	r30, 0x3d	; 61
   15984:	fe b7       	in	r31, 0x3e	; 62
   15986:	81 83       	std	Z+1, r24	; 0x01
   15988:	92 83       	std	Z+2, r25	; 0x02
   1598a:	a3 83       	std	Z+3, r26	; 0x03
   1598c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15990:	08 c0       	rjmp	.+16     	; 0x159a2 <SS80_COMMANDS+0xa6>
   15992:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   15996:	90 e0       	ldi	r25, 0x00	; 0
   15998:	0e 94 f5 89 	call	0x113ea	; 0x113ea <SS80_is_MTA>
   1599c:	89 2b       	or	r24, r25
   1599e:	51 f7       	brne	.-44     	; 0x15974 <SS80_COMMANDS+0x78>
   159a0:	71 c0       	rjmp	.+226    	; 0x15a84 <SS80_COMMANDS+0x188>
   159a2:	52 df       	rcall	.-348    	; 0x15848 <SS80_Execute_State>
   159a4:	51 c0       	rjmp	.+162    	; 0x15a48 <SS80_COMMANDS+0x14c>
   159a6:	10 37       	cpi	r17, 0x70	; 112
   159a8:	b9 f5       	brne	.+110    	; 0x15a18 <SS80_COMMANDS+0x11c>
   159aa:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   159ae:	90 e0       	ldi	r25, 0x00	; 0
   159b0:	0e 94 f5 89 	call	0x113ea	; 0x113ea <SS80_is_MTA>
   159b4:	89 2b       	or	r24, r25
   159b6:	81 f0       	breq	.+32     	; 0x159d8 <SS80_COMMANDS+0xdc>
   159b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159bc:	85 ff       	sbrs	r24, 5
   159be:	0a c0       	rjmp	.+20     	; 0x159d4 <SS80_COMMANDS+0xd8>
   159c0:	8a ea       	ldi	r24, 0xAA	; 170
   159c2:	9d e1       	ldi	r25, 0x1D	; 29
   159c4:	a0 e0       	ldi	r26, 0x00	; 0
   159c6:	ed b7       	in	r30, 0x3d	; 61
   159c8:	fe b7       	in	r31, 0x3e	; 62
   159ca:	81 83       	std	Z+1, r24	; 0x01
   159cc:	92 83       	std	Z+2, r25	; 0x02
   159ce:	a3 83       	std	Z+3, r26	; 0x03
   159d0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   159d4:	4c db       	rcall	.-2408   	; 0x1506e <SS80_Report>
   159d6:	38 c0       	rjmp	.+112    	; 0x15a48 <SS80_COMMANDS+0x14c>
   159d8:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   159dc:	90 e0       	ldi	r25, 0x00	; 0
   159de:	0e 94 e4 89 	call	0x113c8	; 0x113c8 <SS80_is_MLA>
   159e2:	89 2b       	or	r24, r25
   159e4:	09 f4       	brne	.+2      	; 0x159e8 <SS80_COMMANDS+0xec>
   159e6:	4e c0       	rjmp	.+156    	; 0x15a84 <SS80_COMMANDS+0x188>
   159e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159ec:	85 ff       	sbrs	r24, 5
   159ee:	0a c0       	rjmp	.+20     	; 0x15a04 <SS80_COMMANDS+0x108>
   159f0:	8b e9       	ldi	r24, 0x9B	; 155
   159f2:	9d e1       	ldi	r25, 0x1D	; 29
   159f4:	a0 e0       	ldi	r26, 0x00	; 0
   159f6:	ed b7       	in	r30, 0x3d	; 61
   159f8:	fe b7       	in	r31, 0x3e	; 62
   159fa:	81 83       	std	Z+1, r24	; 0x01
   159fc:	92 83       	std	Z+2, r25	; 0x02
   159fe:	a3 83       	std	Z+3, r26	; 0x03
   15a00:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15a04:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <SS80p>
   15a08:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <SS80p+0x1>
   15a0c:	81 81       	ldd	r24, Z+1	; 0x01
   15a0e:	90 e0       	ldi	r25, 0x00	; 0
   15a10:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
   15a14:	1d dc       	rcall	.-1990   	; 0x15250 <SS80_Amigo_Clear>
   15a16:	18 c0       	rjmp	.+48     	; 0x15a48 <SS80_COMMANDS+0x14c>
   15a18:	12 37       	cpi	r17, 0x72	; 114
   15a1a:	c1 f4       	brne	.+48     	; 0x15a4c <SS80_COMMANDS+0x150>
   15a1c:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15a20:	90 e0       	ldi	r25, 0x00	; 0
   15a22:	0e 94 e4 89 	call	0x113c8	; 0x113c8 <SS80_is_MLA>
   15a26:	89 2b       	or	r24, r25
   15a28:	89 f0       	breq	.+34     	; 0x15a4c <SS80_COMMANDS+0x150>
   15a2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a2e:	85 ff       	sbrs	r24, 5
   15a30:	0a c0       	rjmp	.+20     	; 0x15a46 <SS80_COMMANDS+0x14a>
   15a32:	87 e8       	ldi	r24, 0x87	; 135
   15a34:	9d e1       	ldi	r25, 0x1D	; 29
   15a36:	a0 e0       	ldi	r26, 0x00	; 0
   15a38:	ed b7       	in	r30, 0x3d	; 61
   15a3a:	fe b7       	in	r31, 0x3e	; 62
   15a3c:	81 83       	std	Z+1, r24	; 0x01
   15a3e:	92 83       	std	Z+2, r25	; 0x02
   15a40:	a3 83       	std	Z+3, r26	; 0x03
   15a42:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15a46:	58 dc       	rcall	.-1872   	; 0x152f8 <SS80_Transparent_State>
   15a48:	ec 01       	movw	r28, r24
   15a4a:	3b c0       	rjmp	.+118    	; 0x15ac2 <SS80_COMMANDS+0x1c6>
   15a4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a50:	80 ff       	sbrs	r24, 0
   15a52:	18 c0       	rjmp	.+48     	; 0x15a84 <SS80_COMMANDS+0x188>
   15a54:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   15a58:	90 e0       	ldi	r25, 0x00	; 0
   15a5a:	ed b7       	in	r30, 0x3d	; 61
   15a5c:	fe b7       	in	r31, 0x3e	; 62
   15a5e:	91 87       	std	Z+9, r25	; 0x09
   15a60:	80 87       	std	Z+8, r24	; 0x08
   15a62:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15a66:	90 e0       	ldi	r25, 0x00	; 0
   15a68:	97 83       	std	Z+7, r25	; 0x07
   15a6a:	86 83       	std	Z+6, r24	; 0x06
   15a6c:	81 2f       	mov	r24, r17
   15a6e:	90 e0       	ldi	r25, 0x00	; 0
   15a70:	95 83       	std	Z+5, r25	; 0x05
   15a72:	84 83       	std	Z+4, r24	; 0x04
   15a74:	83 e5       	ldi	r24, 0x53	; 83
   15a76:	9d e1       	ldi	r25, 0x1D	; 29
   15a78:	a0 e0       	ldi	r26, 0x00	; 0
   15a7a:	81 83       	std	Z+1, r24	; 0x01
   15a7c:	92 83       	std	Z+2, r25	; 0x02
   15a7e:	a3 83       	std	Z+3, r26	; 0x03
   15a80:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15a84:	c0 e0       	ldi	r28, 0x00	; 0
   15a86:	d0 e0       	ldi	r29, 0x00	; 0
   15a88:	1c c0       	rjmp	.+56     	; 0x15ac2 <SS80_COMMANDS+0x1c6>
   15a8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a8e:	80 ff       	sbrs	r24, 0
   15a90:	f9 cf       	rjmp	.-14     	; 0x15a84 <SS80_COMMANDS+0x188>
   15a92:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   15a96:	90 e0       	ldi	r25, 0x00	; 0
   15a98:	ed b7       	in	r30, 0x3d	; 61
   15a9a:	fe b7       	in	r31, 0x3e	; 62
   15a9c:	91 87       	std	Z+9, r25	; 0x09
   15a9e:	80 87       	std	Z+8, r24	; 0x08
   15aa0:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15aa4:	90 e0       	ldi	r25, 0x00	; 0
   15aa6:	97 83       	std	Z+7, r25	; 0x07
   15aa8:	86 83       	std	Z+6, r24	; 0x06
   15aaa:	81 2f       	mov	r24, r17
   15aac:	90 e0       	ldi	r25, 0x00	; 0
   15aae:	95 83       	std	Z+5, r25	; 0x05
   15ab0:	84 83       	std	Z+4, r24	; 0x04
   15ab2:	8f e1       	ldi	r24, 0x1F	; 31
   15ab4:	9d e1       	ldi	r25, 0x1D	; 29
   15ab6:	a0 e0       	ldi	r26, 0x00	; 0
   15ab8:	81 83       	std	Z+1, r24	; 0x01
   15aba:	92 83       	std	Z+2, r25	; 0x02
   15abc:	a3 83       	std	Z+3, r26	; 0x03
   15abe:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15ac2:	ce 01       	movw	r24, r28
   15ac4:	cd b7       	in	r28, 0x3d	; 61
   15ac6:	de b7       	in	r29, 0x3e	; 62
   15ac8:	29 96       	adiw	r28, 0x09	; 9
   15aca:	e3 e0       	ldi	r30, 0x03	; 3
   15acc:	0c 94 ed df 	jmp	0x1bfda	; 0x1bfda <__epilogue_restores__+0x1e>

00015ad0 <amigo_overflow_check>:
   15ad0:	cf 92       	push	r12
   15ad2:	df 92       	push	r13
   15ad4:	ef 92       	push	r14
   15ad6:	0f 93       	push	r16
   15ad8:	1f 93       	push	r17
   15ada:	cf 93       	push	r28
   15adc:	df 93       	push	r29
   15ade:	00 d0       	rcall	.+0      	; 0x15ae0 <amigo_overflow_check+0x10>
   15ae0:	00 d0       	rcall	.+0      	; 0x15ae2 <amigo_overflow_check+0x12>
   15ae2:	1f 92       	push	r1
   15ae4:	ec 01       	movw	r28, r24
   15ae6:	8b 01       	movw	r16, r22
   15ae8:	80 e0       	ldi	r24, 0x00	; 0
   15aea:	90 e0       	ldi	r25, 0x00	; 0
   15aec:	27 eb       	ldi	r18, 0xB7	; 183
   15aee:	3c e2       	ldi	r19, 0x2C	; 44
   15af0:	69 01       	movw	r12, r18
   15af2:	e1 2c       	mov	r14, r1
   15af4:	2d 81       	ldd	r18, Y+5	; 0x05
   15af6:	30 e0       	ldi	r19, 0x00	; 0
   15af8:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   15afc:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   15b00:	40 85       	ldd	r20, Z+8	; 0x08
   15b02:	51 85       	ldd	r21, Z+9	; 0x09
   15b04:	24 17       	cp	r18, r20
   15b06:	35 07       	cpc	r19, r21
   15b08:	64 f1       	brlt	.+88     	; 0x15b62 <amigo_overflow_check+0x92>
   15b0a:	1d 82       	std	Y+5, r1	; 0x05
   15b0c:	2c 81       	ldd	r18, Y+4	; 0x04
   15b0e:	2f 5f       	subi	r18, 0xFF	; 255
   15b10:	2c 83       	std	Y+4, r18	; 0x04
   15b12:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   15b16:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   15b1a:	2c 81       	ldd	r18, Y+4	; 0x04
   15b1c:	30 e0       	ldi	r19, 0x00	; 0
   15b1e:	42 85       	ldd	r20, Z+10	; 0x0a
   15b20:	53 85       	ldd	r21, Z+11	; 0x0b
   15b22:	24 17       	cp	r18, r20
   15b24:	35 07       	cpc	r19, r21
   15b26:	34 f3       	brlt	.-52     	; 0x15af4 <amigo_overflow_check+0x24>
   15b28:	1c 82       	std	Y+4, r1	; 0x04
   15b2a:	2b 81       	ldd	r18, Y+3	; 0x03
   15b2c:	2f 5f       	subi	r18, 0xFF	; 255
   15b2e:	2b 83       	std	Y+3, r18	; 0x03
   15b30:	30 e0       	ldi	r19, 0x00	; 0
   15b32:	44 85       	ldd	r20, Z+12	; 0x0c
   15b34:	55 85       	ldd	r21, Z+13	; 0x0d
   15b36:	24 17       	cp	r18, r20
   15b38:	35 07       	cpc	r19, r21
   15b3a:	5c f3       	brlt	.-42     	; 0x15b12 <amigo_overflow_check+0x42>
   15b3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b40:	80 ff       	sbrs	r24, 0
   15b42:	0c c0       	rjmp	.+24     	; 0x15b5c <amigo_overflow_check+0x8c>
   15b44:	01 15       	cp	r16, r1
   15b46:	11 05       	cpc	r17, r1
   15b48:	49 f0       	breq	.+18     	; 0x15b5c <amigo_overflow_check+0x8c>
   15b4a:	ed b7       	in	r30, 0x3d	; 61
   15b4c:	fe b7       	in	r31, 0x3e	; 62
   15b4e:	15 83       	std	Z+5, r17	; 0x05
   15b50:	04 83       	std	Z+4, r16	; 0x04
   15b52:	c1 82       	std	Z+1, r12	; 0x01
   15b54:	d2 82       	std	Z+2, r13	; 0x02
   15b56:	e3 82       	std	Z+3, r14	; 0x03
   15b58:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15b5c:	81 e0       	ldi	r24, 0x01	; 1
   15b5e:	90 e0       	ldi	r25, 0x00	; 0
   15b60:	d8 cf       	rjmp	.-80     	; 0x15b12 <amigo_overflow_check+0x42>
   15b62:	0f 90       	pop	r0
   15b64:	0f 90       	pop	r0
   15b66:	0f 90       	pop	r0
   15b68:	0f 90       	pop	r0
   15b6a:	0f 90       	pop	r0
   15b6c:	df 91       	pop	r29
   15b6e:	cf 91       	pop	r28
   15b70:	1f 91       	pop	r17
   15b72:	0f 91       	pop	r16
   15b74:	ef 90       	pop	r14
   15b76:	df 90       	pop	r13
   15b78:	cf 90       	pop	r12
   15b7a:	08 95       	ret

00015b7c <amigo_chs_to_logical>:
   15b7c:	a1 e1       	ldi	r26, 0x11	; 17
   15b7e:	b0 e0       	ldi	r27, 0x00	; 0
   15b80:	e4 ec       	ldi	r30, 0xC4	; 196
   15b82:	fd ea       	ldi	r31, 0xAD	; 173
   15b84:	0c 94 c6 df 	jmp	0x1bf8c	; 0x1bf8c <__prologue_saves__+0x8>
   15b88:	8b 01       	movw	r16, r22
   15b8a:	60 91 71 19 	lds	r22, 0x1971	; 0x801971 <AMIGOp>
   15b8e:	70 91 72 19 	lds	r23, 0x1972	; 0x801972 <AMIGOp+0x1>
   15b92:	fb 01       	movw	r30, r22
   15b94:	40 85       	ldd	r20, Z+8	; 0x08
   15b96:	51 85       	ldd	r21, Z+9	; 0x09
   15b98:	fc 01       	movw	r30, r24
   15b9a:	c4 81       	ldd	r28, Z+4	; 0x04
   15b9c:	d0 e0       	ldi	r29, 0x00	; 0
   15b9e:	4c 9f       	mul	r20, r28
   15ba0:	90 01       	movw	r18, r0
   15ba2:	4d 9f       	mul	r20, r29
   15ba4:	30 0d       	add	r19, r0
   15ba6:	5c 9f       	mul	r21, r28
   15ba8:	30 0d       	add	r19, r0
   15baa:	11 24       	eor	r1, r1
   15bac:	49 01       	movw	r8, r18
   15bae:	33 0f       	add	r19, r19
   15bb0:	aa 08       	sbc	r10, r10
   15bb2:	bb 08       	sbc	r11, r11
   15bb4:	63 80       	ldd	r6, Z+3	; 0x03
   15bb6:	71 2c       	mov	r7, r1
   15bb8:	fb 01       	movw	r30, r22
   15bba:	e2 84       	ldd	r14, Z+10	; 0x0a
   15bbc:	f3 84       	ldd	r15, Z+11	; 0x0b
   15bbe:	4e 9d       	mul	r20, r14
   15bc0:	d0 01       	movw	r26, r0
   15bc2:	4f 9d       	mul	r20, r15
   15bc4:	b0 0d       	add	r27, r0
   15bc6:	5e 9d       	mul	r21, r14
   15bc8:	b0 0d       	add	r27, r0
   15bca:	11 24       	eor	r1, r1
   15bcc:	a6 9d       	mul	r26, r6
   15bce:	90 01       	movw	r18, r0
   15bd0:	a7 9d       	mul	r26, r7
   15bd2:	30 0d       	add	r19, r0
   15bd4:	b6 9d       	mul	r27, r6
   15bd6:	30 0d       	add	r19, r0
   15bd8:	11 24       	eor	r1, r1
   15bda:	69 01       	movw	r12, r18
   15bdc:	33 0f       	add	r19, r19
   15bde:	ee 08       	sbc	r14, r14
   15be0:	ff 08       	sbc	r15, r15
   15be2:	8c 0c       	add	r8, r12
   15be4:	9d 1c       	adc	r9, r13
   15be6:	ae 1c       	adc	r10, r14
   15be8:	bf 1c       	adc	r11, r15
   15bea:	fc 01       	movw	r30, r24
   15bec:	f5 80       	ldd	r15, Z+5	; 0x05
   15bee:	a5 01       	movw	r20, r10
   15bf0:	94 01       	movw	r18, r8
   15bf2:	2f 0d       	add	r18, r15
   15bf4:	31 1d       	adc	r19, r1
   15bf6:	41 1d       	adc	r20, r1
   15bf8:	51 1d       	adc	r21, r1
   15bfa:	fb 01       	movw	r30, r22
   15bfc:	a6 81       	ldd	r26, Z+6	; 0x06
   15bfe:	b7 81       	ldd	r27, Z+7	; 0x07
   15c00:	0e 94 ac df 	call	0x1bf58	; 0x1bf58 <__mulshisi3>
   15c04:	4b 01       	movw	r8, r22
   15c06:	5c 01       	movw	r10, r24
   15c08:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c0c:	85 ff       	sbrs	r24, 5
   15c0e:	22 c0       	rjmp	.+68     	; 0x15c54 <amigo_chs_to_logical+0xd8>
   15c10:	8f 2d       	mov	r24, r15
   15c12:	90 e0       	ldi	r25, 0x00	; 0
   15c14:	ed b7       	in	r30, 0x3d	; 61
   15c16:	fe b7       	in	r31, 0x3e	; 62
   15c18:	91 8b       	std	Z+17, r25	; 0x11
   15c1a:	80 8b       	std	Z+16, r24	; 0x10
   15c1c:	d7 87       	std	Z+15, r29	; 0x0f
   15c1e:	c6 87       	std	Z+14, r28	; 0x0e
   15c20:	75 86       	std	Z+13, r7	; 0x0d
   15c22:	64 86       	std	Z+12, r6	; 0x0c
   15c24:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15c28:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15c2c:	81 81       	ldd	r24, Z+1	; 0x01
   15c2e:	90 e0       	ldi	r25, 0x00	; 0
   15c30:	ed b7       	in	r30, 0x3d	; 61
   15c32:	fe b7       	in	r31, 0x3e	; 62
   15c34:	93 87       	std	Z+11, r25	; 0x0b
   15c36:	82 87       	std	Z+10, r24	; 0x0a
   15c38:	86 82       	std	Z+6, r8	; 0x06
   15c3a:	97 82       	std	Z+7, r9	; 0x07
   15c3c:	a0 86       	std	Z+8, r10	; 0x08
   15c3e:	b1 86       	std	Z+9, r11	; 0x09
   15c40:	15 83       	std	Z+5, r17	; 0x05
   15c42:	04 83       	std	Z+4, r16	; 0x04
   15c44:	84 e6       	ldi	r24, 0x64	; 100
   15c46:	9c e2       	ldi	r25, 0x2C	; 44
   15c48:	a0 e0       	ldi	r26, 0x00	; 0
   15c4a:	81 83       	std	Z+1, r24	; 0x01
   15c4c:	92 83       	std	Z+2, r25	; 0x02
   15c4e:	a3 83       	std	Z+3, r26	; 0x03
   15c50:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15c54:	c5 01       	movw	r24, r10
   15c56:	b4 01       	movw	r22, r8
   15c58:	cd b7       	in	r28, 0x3d	; 61
   15c5a:	de b7       	in	r29, 0x3e	; 62
   15c5c:	61 96       	adiw	r28, 0x11	; 17
   15c5e:	ee e0       	ldi	r30, 0x0E	; 14
   15c60:	0c 94 e2 df 	jmp	0x1bfc4	; 0x1bfc4 <__epilogue_restores__+0x8>

00015c64 <amigo_init>:
   15c64:	ef 92       	push	r14
   15c66:	ff 92       	push	r15
   15c68:	0f 93       	push	r16
   15c6a:	1f 93       	push	r17
   15c6c:	cf 93       	push	r28
   15c6e:	df 93       	push	r29
   15c70:	09 ed       	ldi	r16, 0xD9	; 217
   15c72:	10 e2       	ldi	r17, 0x20	; 32
   15c74:	cb e0       	ldi	r28, 0x0B	; 11
   15c76:	d0 e0       	ldi	r29, 0x00	; 0
   15c78:	84 e0       	ldi	r24, 0x04	; 4
   15c7a:	f8 2e       	mov	r15, r24
   15c7c:	92 e0       	ldi	r25, 0x02	; 2
   15c7e:	e9 2e       	mov	r14, r25
   15c80:	d8 01       	movw	r26, r16
   15c82:	8c 91       	ld	r24, X
   15c84:	81 30       	cpi	r24, 0x01	; 1
   15c86:	31 f5       	brne	.+76     	; 0x15cd4 <amigo_init+0x70>
   15c88:	ce 01       	movw	r24, r28
   15c8a:	0e 94 f0 94 	call	0x129e0	; 0x129e0 <set_active_device>
   15c8e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15c92:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15c96:	10 82       	st	Z, r1
   15c98:	9f 01       	movw	r18, r30
   15c9a:	27 5f       	subi	r18, 0xF7	; 247
   15c9c:	3f 4f       	sbci	r19, 0xFF	; 255
   15c9e:	d9 01       	movw	r26, r18
   15ca0:	8f 2d       	mov	r24, r15
   15ca2:	1d 92       	st	X+, r1
   15ca4:	8a 95       	dec	r24
   15ca6:	e9 f7       	brne	.-6      	; 0x15ca2 <amigo_init+0x3e>
   15ca8:	2c 5f       	subi	r18, 0xFC	; 252
   15caa:	3f 4f       	sbci	r19, 0xFF	; 255
   15cac:	d9 01       	movw	r26, r18
   15cae:	8f 2d       	mov	r24, r15
   15cb0:	1d 92       	st	X+, r1
   15cb2:	8a 95       	dec	r24
   15cb4:	e9 f7       	brne	.-6      	; 0x15cb0 <amigo_init+0x4c>
   15cb6:	11 82       	std	Z+1, r1	; 0x01
   15cb8:	15 82       	std	Z+5, r1	; 0x05
   15cba:	14 82       	std	Z+4, r1	; 0x04
   15cbc:	13 82       	std	Z+3, r1	; 0x03
   15cbe:	e6 82       	std	Z+6, r14	; 0x06
   15cc0:	10 86       	std	Z+8, r1	; 0x08
   15cc2:	17 82       	std	Z+7, r1	; 0x07
   15cc4:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   15cc8:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   15ccc:	81 81       	ldd	r24, Z+1	; 0x01
   15cce:	90 e0       	ldi	r25, 0x00	; 0
   15cd0:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
   15cd4:	21 97       	sbiw	r28, 0x01	; 1
   15cd6:	0b 52       	subi	r16, 0x2B	; 43
   15cd8:	11 09       	sbc	r17, r1
   15cda:	cf 3f       	cpi	r28, 0xFF	; 255
   15cdc:	af ef       	ldi	r26, 0xFF	; 255
   15cde:	da 07       	cpc	r29, r26
   15ce0:	79 f6       	brne	.-98     	; 0x15c80 <amigo_init+0x1c>
   15ce2:	cd b7       	in	r28, 0x3d	; 61
   15ce4:	de b7       	in	r29, 0x3e	; 62
   15ce6:	e6 e0       	ldi	r30, 0x06	; 6
   15ce8:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00015cec <amigo_request_logical_address>:
   15cec:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15cf0:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15cf4:	15 86       	std	Z+13, r1	; 0x0d
   15cf6:	83 81       	ldd	r24, Z+3	; 0x03
   15cf8:	86 87       	std	Z+14, r24	; 0x0e
   15cfa:	84 81       	ldd	r24, Z+4	; 0x04
   15cfc:	87 87       	std	Z+15, r24	; 0x0f
   15cfe:	85 81       	ldd	r24, Z+5	; 0x05
   15d00:	80 8b       	std	Z+16, r24	; 0x10
   15d02:	80 e0       	ldi	r24, 0x00	; 0
   15d04:	90 e0       	ldi	r25, 0x00	; 0
   15d06:	08 95       	ret

00015d08 <amigo_request_status>:
   15d08:	00 d0       	rcall	.+0      	; 0x15d0a <amigo_request_status+0x2>
   15d0a:	1f 92       	push	r1
   15d0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d10:	85 ff       	sbrs	r24, 5
   15d12:	0a c0       	rjmp	.+20     	; 0x15d28 <amigo_request_status+0x20>
   15d14:	87 e3       	ldi	r24, 0x37	; 55
   15d16:	9d e2       	ldi	r25, 0x2D	; 45
   15d18:	a0 e0       	ldi	r26, 0x00	; 0
   15d1a:	ed b7       	in	r30, 0x3d	; 61
   15d1c:	fe b7       	in	r31, 0x3e	; 62
   15d1e:	81 83       	std	Z+1, r24	; 0x01
   15d20:	92 83       	std	Z+2, r25	; 0x02
   15d22:	a3 83       	std	Z+3, r26	; 0x03
   15d24:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15d28:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15d2c:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15d30:	11 86       	std	Z+9, r1	; 0x09
   15d32:	81 81       	ldd	r24, Z+1	; 0x01
   15d34:	82 87       	std	Z+10, r24	; 0x0a
   15d36:	8d e0       	ldi	r24, 0x0D	; 13
   15d38:	83 87       	std	Z+11, r24	; 0x0b
   15d3a:	14 86       	std	Z+12, r1	; 0x0c
   15d3c:	0e 94 82 6d 	call	0xdb04	; 0xdb04 <mmc_wp_status>
   15d40:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15d44:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15d48:	89 2b       	or	r24, r25
   15d4a:	19 f0       	breq	.+6      	; 0x15d52 <amigo_request_status+0x4a>
   15d4c:	84 85       	ldd	r24, Z+12	; 0x0c
   15d4e:	80 66       	ori	r24, 0x60	; 96
   15d50:	84 87       	std	Z+12, r24	; 0x0c
   15d52:	86 81       	ldd	r24, Z+6	; 0x06
   15d54:	82 30       	cpi	r24, 0x02	; 2
   15d56:	31 f4       	brne	.+12     	; 0x15d64 <amigo_request_status+0x5c>
   15d58:	83 e1       	ldi	r24, 0x13	; 19
   15d5a:	81 87       	std	Z+9, r24	; 0x09
   15d5c:	84 85       	ldd	r24, Z+12	; 0x0c
   15d5e:	88 60       	ori	r24, 0x08	; 8
   15d60:	84 87       	std	Z+12, r24	; 0x0c
   15d62:	21 c0       	rjmp	.+66     	; 0x15da6 <amigo_request_status+0x9e>
   15d64:	27 81       	ldd	r18, Z+7	; 0x07
   15d66:	30 85       	ldd	r19, Z+8	; 0x08
   15d68:	21 15       	cp	r18, r1
   15d6a:	31 05       	cpc	r19, r1
   15d6c:	11 f4       	brne	.+4      	; 0x15d72 <amigo_request_status+0x6a>
   15d6e:	81 30       	cpi	r24, 0x01	; 1
   15d70:	d1 f4       	brne	.+52     	; 0x15da6 <amigo_request_status+0x9e>
   15d72:	26 fd       	sbrc	r18, 6
   15d74:	0c c0       	rjmp	.+24     	; 0x15d8e <amigo_request_status+0x86>
   15d76:	25 ff       	sbrs	r18, 5
   15d78:	03 c0       	rjmp	.+6      	; 0x15d80 <amigo_request_status+0x78>
   15d7a:	8a e0       	ldi	r24, 0x0A	; 10
   15d7c:	81 87       	std	Z+9, r24	; 0x09
   15d7e:	0d c0       	rjmp	.+26     	; 0x15d9a <amigo_request_status+0x92>
   15d80:	84 85       	ldd	r24, Z+12	; 0x0c
   15d82:	24 ff       	sbrs	r18, 4
   15d84:	02 c0       	rjmp	.+4      	; 0x15d8a <amigo_request_status+0x82>
   15d86:	83 60       	ori	r24, 0x03	; 3
   15d88:	07 c0       	rjmp	.+14     	; 0x15d98 <amigo_request_status+0x90>
   15d8a:	21 ff       	sbrs	r18, 1
   15d8c:	02 c0       	rjmp	.+4      	; 0x15d92 <amigo_request_status+0x8a>
   15d8e:	83 e1       	ldi	r24, 0x13	; 19
   15d90:	f5 cf       	rjmp	.-22     	; 0x15d7c <amigo_request_status+0x74>
   15d92:	22 ff       	sbrs	r18, 2
   15d94:	02 c0       	rjmp	.+4      	; 0x15d9a <amigo_request_status+0x92>
   15d96:	84 60       	ori	r24, 0x04	; 4
   15d98:	84 87       	std	Z+12, r24	; 0x0c
   15d9a:	84 85       	ldd	r24, Z+12	; 0x0c
   15d9c:	80 61       	ori	r24, 0x10	; 16
   15d9e:	84 87       	std	Z+12, r24	; 0x0c
   15da0:	83 85       	ldd	r24, Z+11	; 0x0b
   15da2:	80 68       	ori	r24, 0x80	; 128
   15da4:	83 87       	std	Z+11, r24	; 0x0b
   15da6:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   15daa:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   15dae:	81 81       	ldd	r24, Z+1	; 0x01
   15db0:	90 e0       	ldi	r25, 0x00	; 0
   15db2:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   15db6:	80 e0       	ldi	r24, 0x00	; 0
   15db8:	90 e0       	ldi	r25, 0x00	; 0
   15dba:	0f 90       	pop	r0
   15dbc:	0f 90       	pop	r0
   15dbe:	0f 90       	pop	r0
   15dc0:	08 95       	ret

00015dc2 <amigo_send_logical_address>:
   15dc2:	a5 e0       	ldi	r26, 0x05	; 5
   15dc4:	b0 e0       	ldi	r27, 0x00	; 0
   15dc6:	e7 ee       	ldi	r30, 0xE7	; 231
   15dc8:	fe ea       	ldi	r31, 0xAE	; 174
   15dca:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   15dce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15dd2:	85 ff       	sbrs	r24, 5
   15dd4:	0a c0       	rjmp	.+20     	; 0x15dea <amigo_send_logical_address+0x28>
   15dd6:	89 e1       	ldi	r24, 0x19	; 25
   15dd8:	9d e2       	ldi	r25, 0x2D	; 45
   15dda:	a0 e0       	ldi	r26, 0x00	; 0
   15ddc:	ed b7       	in	r30, 0x3d	; 61
   15dde:	fe b7       	in	r31, 0x3e	; 62
   15de0:	81 83       	std	Z+1, r24	; 0x01
   15de2:	92 83       	std	Z+2, r25	; 0x02
   15de4:	a3 83       	std	Z+3, r26	; 0x03
   15de6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15dea:	80 e0       	ldi	r24, 0x00	; 0
   15dec:	91 e0       	ldi	r25, 0x01	; 1
   15dee:	9d 83       	std	Y+5, r25	; 0x05
   15df0:	8c 83       	std	Y+4, r24	; 0x04
   15df2:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   15df6:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   15dfa:	ae 01       	movw	r20, r28
   15dfc:	4c 5f       	subi	r20, 0xFC	; 252
   15dfe:	5f 4f       	sbci	r21, 0xFF	; 255
   15e00:	64 e0       	ldi	r22, 0x04	; 4
   15e02:	70 e0       	ldi	r23, 0x00	; 0
   15e04:	0d 96       	adiw	r24, 0x0d	; 13
   15e06:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   15e0a:	2c 81       	ldd	r18, Y+4	; 0x04
   15e0c:	3d 81       	ldd	r19, Y+5	; 0x05
   15e0e:	22 27       	eor	r18, r18
   15e10:	30 7d       	andi	r19, 0xD0	; 208
   15e12:	23 2b       	or	r18, r19
   15e14:	49 f0       	breq	.+18     	; 0x15e28 <amigo_send_logical_address+0x66>
   15e16:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15e1a:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15e1e:	27 81       	ldd	r18, Z+7	; 0x07
   15e20:	30 85       	ldd	r19, Z+8	; 0x08
   15e22:	20 62       	ori	r18, 0x20	; 32
   15e24:	30 87       	std	Z+8, r19	; 0x08
   15e26:	27 83       	std	Z+7, r18	; 0x07
   15e28:	04 97       	sbiw	r24, 0x04	; 4
   15e2a:	c9 f0       	breq	.+50     	; 0x15e5e <amigo_send_logical_address+0x9c>
   15e2c:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15e30:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15e34:	87 81       	ldd	r24, Z+7	; 0x07
   15e36:	90 85       	ldd	r25, Z+8	; 0x08
   15e38:	80 62       	ori	r24, 0x20	; 32
   15e3a:	90 87       	std	Z+8, r25	; 0x08
   15e3c:	87 83       	std	Z+7, r24	; 0x07
   15e3e:	81 e0       	ldi	r24, 0x01	; 1
   15e40:	86 83       	std	Z+6, r24	; 0x06
   15e42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e46:	80 ff       	sbrs	r24, 0
   15e48:	0a c0       	rjmp	.+20     	; 0x15e5e <amigo_send_logical_address+0x9c>
   15e4a:	8f ef       	ldi	r24, 0xFF	; 255
   15e4c:	9c e2       	ldi	r25, 0x2C	; 44
   15e4e:	a0 e0       	ldi	r26, 0x00	; 0
   15e50:	ed b7       	in	r30, 0x3d	; 61
   15e52:	fe b7       	in	r31, 0x3e	; 62
   15e54:	81 83       	std	Z+1, r24	; 0x01
   15e56:	92 83       	std	Z+2, r25	; 0x02
   15e58:	a3 83       	std	Z+3, r26	; 0x03
   15e5a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15e5e:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   15e62:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   15e66:	81 81       	ldd	r24, Z+1	; 0x01
   15e68:	90 e0       	ldi	r25, 0x00	; 0
   15e6a:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   15e6e:	8c 81       	ldd	r24, Y+4	; 0x04
   15e70:	9d 81       	ldd	r25, Y+5	; 0x05
   15e72:	88 27       	eor	r24, r24
   15e74:	90 7d       	andi	r25, 0xD0	; 208
   15e76:	25 96       	adiw	r28, 0x05	; 5
   15e78:	e2 e0       	ldi	r30, 0x02	; 2
   15e7a:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00015e7e <amigo_send_status>:
   15e7e:	a5 e0       	ldi	r26, 0x05	; 5
   15e80:	b0 e0       	ldi	r27, 0x00	; 0
   15e82:	e5 e4       	ldi	r30, 0x45	; 69
   15e84:	ff ea       	ldi	r31, 0xAF	; 175
   15e86:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   15e8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e8e:	85 ff       	sbrs	r24, 5
   15e90:	0a c0       	rjmp	.+20     	; 0x15ea6 <amigo_send_status+0x28>
   15e92:	8a ee       	ldi	r24, 0xEA	; 234
   15e94:	9c e2       	ldi	r25, 0x2C	; 44
   15e96:	a0 e0       	ldi	r26, 0x00	; 0
   15e98:	ed b7       	in	r30, 0x3d	; 61
   15e9a:	fe b7       	in	r31, 0x3e	; 62
   15e9c:	81 83       	std	Z+1, r24	; 0x01
   15e9e:	92 83       	std	Z+2, r25	; 0x02
   15ea0:	a3 83       	std	Z+3, r26	; 0x03
   15ea2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15ea6:	80 e0       	ldi	r24, 0x00	; 0
   15ea8:	91 e0       	ldi	r25, 0x01	; 1
   15eaa:	9d 83       	std	Y+5, r25	; 0x05
   15eac:	8c 83       	std	Y+4, r24	; 0x04
   15eae:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   15eb2:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   15eb6:	ae 01       	movw	r20, r28
   15eb8:	4c 5f       	subi	r20, 0xFC	; 252
   15eba:	5f 4f       	sbci	r21, 0xFF	; 255
   15ebc:	64 e0       	ldi	r22, 0x04	; 4
   15ebe:	70 e0       	ldi	r23, 0x00	; 0
   15ec0:	09 96       	adiw	r24, 0x09	; 9
   15ec2:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   15ec6:	2c 81       	ldd	r18, Y+4	; 0x04
   15ec8:	3d 81       	ldd	r19, Y+5	; 0x05
   15eca:	22 27       	eor	r18, r18
   15ecc:	30 7d       	andi	r19, 0xD0	; 208
   15ece:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15ed2:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15ed6:	23 2b       	or	r18, r19
   15ed8:	29 f0       	breq	.+10     	; 0x15ee4 <amigo_send_status+0x66>
   15eda:	27 81       	ldd	r18, Z+7	; 0x07
   15edc:	30 85       	ldd	r19, Z+8	; 0x08
   15ede:	20 62       	ori	r18, 0x20	; 32
   15ee0:	30 87       	std	Z+8, r19	; 0x08
   15ee2:	27 83       	std	Z+7, r18	; 0x07
   15ee4:	04 97       	sbiw	r24, 0x04	; 4
   15ee6:	b1 f0       	breq	.+44     	; 0x15f14 <amigo_send_status+0x96>
   15ee8:	87 81       	ldd	r24, Z+7	; 0x07
   15eea:	90 85       	ldd	r25, Z+8	; 0x08
   15eec:	80 62       	ori	r24, 0x20	; 32
   15eee:	90 87       	std	Z+8, r25	; 0x08
   15ef0:	87 83       	std	Z+7, r24	; 0x07
   15ef2:	81 e0       	ldi	r24, 0x01	; 1
   15ef4:	86 83       	std	Z+6, r24	; 0x06
   15ef6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15efa:	80 ff       	sbrs	r24, 0
   15efc:	0e c0       	rjmp	.+28     	; 0x15f1a <amigo_send_status+0x9c>
   15efe:	80 ed       	ldi	r24, 0xD0	; 208
   15f00:	9c e2       	ldi	r25, 0x2C	; 44
   15f02:	a0 e0       	ldi	r26, 0x00	; 0
   15f04:	ed b7       	in	r30, 0x3d	; 61
   15f06:	fe b7       	in	r31, 0x3e	; 62
   15f08:	81 83       	std	Z+1, r24	; 0x01
   15f0a:	92 83       	std	Z+2, r25	; 0x02
   15f0c:	a3 83       	std	Z+3, r26	; 0x03
   15f0e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   15f12:	03 c0       	rjmp	.+6      	; 0x15f1a <amigo_send_status+0x9c>
   15f14:	10 86       	std	Z+8, r1	; 0x08
   15f16:	17 82       	std	Z+7, r1	; 0x07
   15f18:	16 82       	std	Z+6, r1	; 0x06
   15f1a:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   15f1e:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   15f22:	81 81       	ldd	r24, Z+1	; 0x01
   15f24:	90 e0       	ldi	r25, 0x00	; 0
   15f26:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   15f2a:	8c 81       	ldd	r24, Y+4	; 0x04
   15f2c:	9d 81       	ldd	r25, Y+5	; 0x05
   15f2e:	88 27       	eor	r24, r24
   15f30:	90 7d       	andi	r25, 0xD0	; 208
   15f32:	25 96       	adiw	r28, 0x05	; 5
   15f34:	e2 e0       	ldi	r30, 0x02	; 2
   15f36:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00015f3a <amigo_increment>:
   15f3a:	a1 e1       	ldi	r26, 0x11	; 17
   15f3c:	b0 e0       	ldi	r27, 0x00	; 0
   15f3e:	e3 ea       	ldi	r30, 0xA3	; 163
   15f40:	ff ea       	ldi	r31, 0xAF	; 175
   15f42:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   15f46:	bc 01       	movw	r22, r24
   15f48:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15f4c:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15f50:	91 e1       	ldi	r25, 0x11	; 17
   15f52:	de 01       	movw	r26, r28
   15f54:	11 96       	adiw	r26, 0x01	; 1
   15f56:	01 90       	ld	r0, Z+
   15f58:	0d 92       	st	X+, r0
   15f5a:	9a 95       	dec	r25
   15f5c:	e1 f7       	brne	.-8      	; 0x15f56 <amigo_increment+0x1c>
   15f5e:	9e 81       	ldd	r25, Y+6	; 0x06
   15f60:	9f 5f       	subi	r25, 0xFF	; 255
   15f62:	9e 83       	std	Y+6, r25	; 0x06
   15f64:	ce 01       	movw	r24, r28
   15f66:	01 96       	adiw	r24, 0x01	; 1
   15f68:	b3 dd       	rcall	.-1178   	; 0x15ad0 <amigo_overflow_check>
   15f6a:	00 97       	sbiw	r24, 0x00	; 0
   15f6c:	59 f4       	brne	.+22     	; 0x15f84 <amigo_increment+0x4a>
   15f6e:	a0 91 6f 19 	lds	r26, 0x196F	; 0x80196f <AMIGOs>
   15f72:	b0 91 70 19 	lds	r27, 0x1970	; 0x801970 <AMIGOs+0x1>
   15f76:	21 e1       	ldi	r18, 0x11	; 17
   15f78:	fe 01       	movw	r30, r28
   15f7a:	31 96       	adiw	r30, 0x01	; 1
   15f7c:	01 90       	ld	r0, Z+
   15f7e:	0d 92       	st	X+, r0
   15f80:	2a 95       	dec	r18
   15f82:	e1 f7       	brne	.-8      	; 0x15f7c <amigo_increment+0x42>
   15f84:	61 96       	adiw	r28, 0x11	; 17
   15f86:	e2 e0       	ldi	r30, 0x02	; 2
   15f88:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00015f8c <amigo_seek>:
   15f8c:	0f 93       	push	r16
   15f8e:	1f 93       	push	r17
   15f90:	cf 93       	push	r28
   15f92:	df 93       	push	r29
   15f94:	ec 01       	movw	r28, r24
   15f96:	68 e8       	ldi	r22, 0x88	; 136
   15f98:	75 e1       	ldi	r23, 0x15	; 21
   15f9a:	9a dd       	rcall	.-1228   	; 0x15ad0 <amigo_overflow_check>
   15f9c:	8c 01       	movw	r16, r24
   15f9e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   15fa2:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   15fa6:	89 2b       	or	r24, r25
   15fa8:	41 f0       	breq	.+16     	; 0x15fba <amigo_seek+0x2e>
   15faa:	81 e0       	ldi	r24, 0x01	; 1
   15fac:	86 83       	std	Z+6, r24	; 0x06
   15fae:	87 81       	ldd	r24, Z+7	; 0x07
   15fb0:	90 85       	ldd	r25, Z+8	; 0x08
   15fb2:	84 60       	ori	r24, 0x04	; 4
   15fb4:	90 87       	std	Z+8, r25	; 0x08
   15fb6:	87 83       	std	Z+7, r24	; 0x07
   15fb8:	06 c0       	rjmp	.+12     	; 0x15fc6 <amigo_seek+0x3a>
   15fba:	8d 81       	ldd	r24, Y+5	; 0x05
   15fbc:	85 83       	std	Z+5, r24	; 0x05
   15fbe:	8c 81       	ldd	r24, Y+4	; 0x04
   15fc0:	84 83       	std	Z+4, r24	; 0x04
   15fc2:	8b 81       	ldd	r24, Y+3	; 0x03
   15fc4:	83 83       	std	Z+3, r24	; 0x03
   15fc6:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   15fca:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   15fce:	81 81       	ldd	r24, Z+1	; 0x01
   15fd0:	90 e0       	ldi	r25, 0x00	; 0
   15fd2:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   15fd6:	c8 01       	movw	r24, r16
   15fd8:	df 91       	pop	r29
   15fda:	cf 91       	pop	r28
   15fdc:	1f 91       	pop	r17
   15fde:	0f 91       	pop	r16
   15fe0:	08 95       	ret

00015fe2 <amigo_verify>:
   15fe2:	8f 92       	push	r8
   15fe4:	9f 92       	push	r9
   15fe6:	af 92       	push	r10
   15fe8:	bf 92       	push	r11
   15fea:	ef 92       	push	r14
   15fec:	ff 92       	push	r15
   15fee:	0f 93       	push	r16
   15ff0:	1f 93       	push	r17
   15ff2:	cf 93       	push	r28
   15ff4:	df 93       	push	r29
   15ff6:	ad b7       	in	r26, 0x3d	; 61
   15ff8:	be b7       	in	r27, 0x3e	; 62
   15ffa:	19 97       	sbiw	r26, 0x09	; 9
   15ffc:	0f b6       	in	r0, 0x3f	; 63
   15ffe:	f8 94       	cli
   16000:	be bf       	out	0x3e, r27	; 62
   16002:	0f be       	out	0x3f, r0	; 63
   16004:	ad bf       	out	0x3d, r26	; 61
   16006:	7c 01       	movw	r14, r24
   16008:	6d e8       	ldi	r22, 0x8D	; 141
   1600a:	75 e1       	ldi	r23, 0x15	; 21
   1600c:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   16010:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16014:	b3 dd       	rcall	.-1178   	; 0x15b7c <amigo_chs_to_logical>
   16016:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1601a:	25 ff       	sbrs	r18, 5
   1601c:	10 c0       	rjmp	.+32     	; 0x1603e <amigo_verify+0x5c>
   1601e:	ed b7       	in	r30, 0x3d	; 61
   16020:	fe b7       	in	r31, 0x3e	; 62
   16022:	e0 86       	std	Z+8, r14	; 0x08
   16024:	f1 86       	std	Z+9, r15	; 0x09
   16026:	64 83       	std	Z+4, r22	; 0x04
   16028:	75 83       	std	Z+5, r23	; 0x05
   1602a:	86 83       	std	Z+6, r24	; 0x06
   1602c:	97 83       	std	Z+7, r25	; 0x07
   1602e:	8f e8       	ldi	r24, 0x8F	; 143
   16030:	9c e2       	ldi	r25, 0x2C	; 44
   16032:	a0 e0       	ldi	r26, 0x00	; 0
   16034:	81 83       	std	Z+1, r24	; 0x01
   16036:	92 83       	std	Z+2, r25	; 0x02
   16038:	a3 83       	std	Z+3, r26	; 0x03
   1603a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1603e:	e7 01       	movw	r28, r14
   16040:	20 97       	sbiw	r28, 0x00	; 0
   16042:	09 f4       	brne	.+2      	; 0x16046 <amigo_verify+0x64>
   16044:	49 c0       	rjmp	.+146    	; 0x160d8 <amigo_verify+0xf6>
   16046:	6a e9       	ldi	r22, 0x9A	; 154
   16048:	75 e1       	ldi	r23, 0x15	; 21
   1604a:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   1604e:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16052:	94 dd       	rcall	.-1240   	; 0x15b7c <amigo_chs_to_logical>
   16054:	4b 01       	movw	r8, r22
   16056:	5c 01       	movw	r10, r24
   16058:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1605c:	86 fd       	sbrc	r24, 6
   1605e:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   16062:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16066:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1606a:	e0 90 6f 19 	lds	r14, 0x196F	; 0x80196f <AMIGOs>
   1606e:	f0 90 70 19 	lds	r15, 0x1970	; 0x801970 <AMIGOs+0x1>
   16072:	87 e0       	ldi	r24, 0x07	; 7
   16074:	e8 0e       	add	r14, r24
   16076:	f1 1c       	adc	r15, r1
   16078:	06 81       	ldd	r16, Z+6	; 0x06
   1607a:	17 81       	ldd	r17, Z+7	; 0x07
   1607c:	26 ef       	ldi	r18, 0xF6	; 246
   1607e:	3c e1       	ldi	r19, 0x1C	; 28
   16080:	b5 01       	movw	r22, r10
   16082:	a4 01       	movw	r20, r8
   16084:	82 81       	ldd	r24, Z+2	; 0x02
   16086:	93 81       	ldd	r25, Z+3	; 0x03
   16088:	0e 94 22 82 	call	0x10444	; 0x10444 <dbf_open_read>
   1608c:	7c 01       	movw	r14, r24
   1608e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16092:	86 ff       	sbrs	r24, 6
   16094:	04 c0       	rjmp	.+8      	; 0x1609e <amigo_verify+0xbc>
   16096:	81 ea       	ldi	r24, 0xA1	; 161
   16098:	90 e1       	ldi	r25, 0x10	; 16
   1609a:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   1609e:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   160a2:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   160a6:	86 81       	ldd	r24, Z+6	; 0x06
   160a8:	97 81       	ldd	r25, Z+7	; 0x07
   160aa:	e8 16       	cp	r14, r24
   160ac:	f9 06       	cpc	r15, r25
   160ae:	61 f0       	breq	.+24     	; 0x160c8 <amigo_verify+0xe6>
   160b0:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   160b4:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   160b8:	81 e0       	ldi	r24, 0x01	; 1
   160ba:	86 83       	std	Z+6, r24	; 0x06
   160bc:	87 81       	ldd	r24, Z+7	; 0x07
   160be:	90 85       	ldd	r25, Z+8	; 0x08
   160c0:	81 60       	ori	r24, 0x01	; 1
   160c2:	90 87       	std	Z+8, r25	; 0x08
   160c4:	87 83       	std	Z+7, r24	; 0x07
   160c6:	0b c0       	rjmp	.+22     	; 0x160de <amigo_verify+0xfc>
   160c8:	82 ea       	ldi	r24, 0xA2	; 162
   160ca:	95 e1       	ldi	r25, 0x15	; 21
   160cc:	36 df       	rcall	.-404    	; 0x15f3a <amigo_increment>
   160ce:	21 97       	sbiw	r28, 0x01	; 1
   160d0:	89 2b       	or	r24, r25
   160d2:	09 f4       	brne	.+2      	; 0x160d6 <amigo_verify+0xf4>
   160d4:	b5 cf       	rjmp	.-150    	; 0x16040 <amigo_verify+0x5e>
   160d6:	03 c0       	rjmp	.+6      	; 0x160de <amigo_verify+0xfc>
   160d8:	c0 e0       	ldi	r28, 0x00	; 0
   160da:	d0 e0       	ldi	r29, 0x00	; 0
   160dc:	02 c0       	rjmp	.+4      	; 0x160e2 <amigo_verify+0x100>
   160de:	c1 e0       	ldi	r28, 0x01	; 1
   160e0:	d0 e0       	ldi	r29, 0x00	; 0
   160e2:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   160e6:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   160ea:	81 81       	ldd	r24, Z+1	; 0x01
   160ec:	90 e0       	ldi	r25, 0x00	; 0
   160ee:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   160f2:	ce 01       	movw	r24, r28
   160f4:	ad b7       	in	r26, 0x3d	; 61
   160f6:	be b7       	in	r27, 0x3e	; 62
   160f8:	19 96       	adiw	r26, 0x09	; 9
   160fa:	0f b6       	in	r0, 0x3f	; 63
   160fc:	f8 94       	cli
   160fe:	be bf       	out	0x3e, r27	; 62
   16100:	0f be       	out	0x3f, r0	; 63
   16102:	ad bf       	out	0x3d, r26	; 61
   16104:	df 91       	pop	r29
   16106:	cf 91       	pop	r28
   16108:	1f 91       	pop	r17
   1610a:	0f 91       	pop	r16
   1610c:	ff 90       	pop	r15
   1610e:	ef 90       	pop	r14
   16110:	bf 90       	pop	r11
   16112:	af 90       	pop	r10
   16114:	9f 90       	pop	r9
   16116:	8f 90       	pop	r8
   16118:	08 95       	ret

0001611a <amigo_format>:
   1611a:	ef 92       	push	r14
   1611c:	ff 92       	push	r15
   1611e:	0f 93       	push	r16
   16120:	1f 93       	push	r17
   16122:	cf 93       	push	r28
   16124:	df 93       	push	r29
   16126:	00 d0       	rcall	.+0      	; 0x16128 <amigo_format+0xe>
   16128:	1f 92       	push	r1
   1612a:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1612e:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16132:	15 82       	std	Z+5, r1	; 0x05
   16134:	14 82       	std	Z+4, r1	; 0x04
   16136:	13 82       	std	Z+3, r1	; 0x03
   16138:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1613c:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16140:	46 81       	ldd	r20, Z+6	; 0x06
   16142:	57 81       	ldd	r21, Z+7	; 0x07
   16144:	68 2f       	mov	r22, r24
   16146:	70 e0       	ldi	r23, 0x00	; 0
   16148:	86 ef       	ldi	r24, 0xF6	; 246
   1614a:	9c e1       	ldi	r25, 0x1C	; 28
   1614c:	0e 94 ba e3 	call	0x1c774	; 0x1c774 <memset>
   16150:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16154:	85 ff       	sbrs	r24, 5
   16156:	0a c0       	rjmp	.+20     	; 0x1616c <amigo_format+0x52>
   16158:	84 e5       	ldi	r24, 0x54	; 84
   1615a:	9c e2       	ldi	r25, 0x2C	; 44
   1615c:	a0 e0       	ldi	r26, 0x00	; 0
   1615e:	ed b7       	in	r30, 0x3d	; 61
   16160:	fe b7       	in	r31, 0x3e	; 62
   16162:	81 83       	std	Z+1, r24	; 0x01
   16164:	92 83       	std	Z+2, r25	; 0x02
   16166:	a3 83       	std	Z+3, r26	; 0x03
   16168:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1616c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16170:	86 fd       	sbrc	r24, 6
   16172:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   16176:	69 ea       	ldi	r22, 0xA9	; 169
   16178:	75 e1       	ldi	r23, 0x15	; 21
   1617a:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   1617e:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16182:	fc dc       	rcall	.-1544   	; 0x15b7c <amigo_chs_to_logical>
   16184:	ab 01       	movw	r20, r22
   16186:	bc 01       	movw	r22, r24
   16188:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1618c:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16190:	e0 90 6f 19 	lds	r14, 0x196F	; 0x80196f <AMIGOs>
   16194:	f0 90 70 19 	lds	r15, 0x1970	; 0x801970 <AMIGOs+0x1>
   16198:	87 e0       	ldi	r24, 0x07	; 7
   1619a:	e8 0e       	add	r14, r24
   1619c:	f1 1c       	adc	r15, r1
   1619e:	06 81       	ldd	r16, Z+6	; 0x06
   161a0:	17 81       	ldd	r17, Z+7	; 0x07
   161a2:	26 ef       	ldi	r18, 0xF6	; 246
   161a4:	3c e1       	ldi	r19, 0x1C	; 28
   161a6:	82 81       	ldd	r24, Z+2	; 0x02
   161a8:	93 81       	ldd	r25, Z+3	; 0x03
   161aa:	0e 94 79 82 	call	0x104f2	; 0x104f2 <dbf_open_write>
   161ae:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   161b2:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   161b6:	26 81       	ldd	r18, Z+6	; 0x06
   161b8:	37 81       	ldd	r19, Z+7	; 0x07
   161ba:	82 17       	cp	r24, r18
   161bc:	93 07       	cpc	r25, r19
   161be:	71 f0       	breq	.+28     	; 0x161dc <amigo_format+0xc2>
   161c0:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   161c4:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   161c8:	87 81       	ldd	r24, Z+7	; 0x07
   161ca:	90 85       	ldd	r25, Z+8	; 0x08
   161cc:	82 60       	ori	r24, 0x02	; 2
   161ce:	90 87       	std	Z+8, r25	; 0x08
   161d0:	87 83       	std	Z+7, r24	; 0x07
   161d2:	81 e0       	ldi	r24, 0x01	; 1
   161d4:	86 83       	std	Z+6, r24	; 0x06
   161d6:	c1 e0       	ldi	r28, 0x01	; 1
   161d8:	d0 e0       	ldi	r29, 0x00	; 0
   161da:	0f c0       	rjmp	.+30     	; 0x161fa <amigo_format+0xe0>
   161dc:	80 e0       	ldi	r24, 0x00	; 0
   161de:	90 e0       	ldi	r25, 0x00	; 0
   161e0:	ac de       	rcall	.-680    	; 0x15f3a <amigo_increment>
   161e2:	89 2b       	or	r24, r25
   161e4:	41 f2       	breq	.-112    	; 0x16176 <amigo_format+0x5c>
   161e6:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   161ea:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   161ee:	15 82       	std	Z+5, r1	; 0x05
   161f0:	14 82       	std	Z+4, r1	; 0x04
   161f2:	13 82       	std	Z+3, r1	; 0x03
   161f4:	16 82       	std	Z+6, r1	; 0x06
   161f6:	c0 e0       	ldi	r28, 0x00	; 0
   161f8:	d0 e0       	ldi	r29, 0x00	; 0
   161fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161fe:	86 ff       	sbrs	r24, 6
   16200:	04 c0       	rjmp	.+8      	; 0x1620a <amigo_format+0xf0>
   16202:	89 ea       	ldi	r24, 0xA9	; 169
   16204:	95 e1       	ldi	r25, 0x15	; 21
   16206:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   1620a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1620e:	85 ff       	sbrs	r24, 5
   16210:	0a c0       	rjmp	.+20     	; 0x16226 <amigo_format+0x10c>
   16212:	8f e3       	ldi	r24, 0x3F	; 63
   16214:	9c e2       	ldi	r25, 0x2C	; 44
   16216:	a0 e0       	ldi	r26, 0x00	; 0
   16218:	ed b7       	in	r30, 0x3d	; 61
   1621a:	fe b7       	in	r31, 0x3e	; 62
   1621c:	81 83       	std	Z+1, r24	; 0x01
   1621e:	92 83       	std	Z+2, r25	; 0x02
   16220:	a3 83       	std	Z+3, r26	; 0x03
   16222:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16226:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1622a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1622e:	81 81       	ldd	r24, Z+1	; 0x01
   16230:	90 e0       	ldi	r25, 0x00	; 0
   16232:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   16236:	ce 01       	movw	r24, r28
   16238:	cd b7       	in	r28, 0x3d	; 61
   1623a:	de b7       	in	r29, 0x3e	; 62
   1623c:	23 96       	adiw	r28, 0x03	; 3
   1623e:	e6 e0       	ldi	r30, 0x06	; 6
   16240:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00016244 <amigo_buffered_read_command>:
   16244:	8f 92       	push	r8
   16246:	9f 92       	push	r9
   16248:	af 92       	push	r10
   1624a:	bf 92       	push	r11
   1624c:	ef 92       	push	r14
   1624e:	ff 92       	push	r15
   16250:	0f 93       	push	r16
   16252:	1f 93       	push	r17
   16254:	00 d0       	rcall	.+0      	; 0x16256 <amigo_buffered_read_command+0x12>
   16256:	00 d0       	rcall	.+0      	; 0x16258 <amigo_buffered_read_command+0x14>
   16258:	1f 92       	push	r1
   1625a:	60 eb       	ldi	r22, 0xB0	; 176
   1625c:	75 e1       	ldi	r23, 0x15	; 21
   1625e:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   16262:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16266:	8a dc       	rcall	.-1772   	; 0x15b7c <amigo_chs_to_logical>
   16268:	4b 01       	movw	r8, r22
   1626a:	5c 01       	movw	r10, r24
   1626c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16270:	85 ff       	sbrs	r24, 5
   16272:	12 c0       	rjmp	.+36     	; 0x16298 <amigo_buffered_read_command+0x54>
   16274:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16278:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1627c:	80 81       	ld	r24, Z
   1627e:	90 e0       	ldi	r25, 0x00	; 0
   16280:	ed b7       	in	r30, 0x3d	; 61
   16282:	fe b7       	in	r31, 0x3e	; 62
   16284:	95 83       	std	Z+5, r25	; 0x05
   16286:	84 83       	std	Z+4, r24	; 0x04
   16288:	8d e2       	ldi	r24, 0x2D	; 45
   1628a:	9c e2       	ldi	r25, 0x2C	; 44
   1628c:	a0 e0       	ldi	r26, 0x00	; 0
   1628e:	81 83       	std	Z+1, r24	; 0x01
   16290:	92 83       	std	Z+2, r25	; 0x02
   16292:	a3 83       	std	Z+3, r26	; 0x03
   16294:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16298:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1629c:	86 fd       	sbrc	r24, 6
   1629e:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   162a2:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   162a6:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   162aa:	e0 90 6f 19 	lds	r14, 0x196F	; 0x80196f <AMIGOs>
   162ae:	f0 90 70 19 	lds	r15, 0x1970	; 0x801970 <AMIGOs+0x1>
   162b2:	87 e0       	ldi	r24, 0x07	; 7
   162b4:	e8 0e       	add	r14, r24
   162b6:	f1 1c       	adc	r15, r1
   162b8:	06 81       	ldd	r16, Z+6	; 0x06
   162ba:	17 81       	ldd	r17, Z+7	; 0x07
   162bc:	26 ef       	ldi	r18, 0xF6	; 246
   162be:	3c e1       	ldi	r19, 0x1C	; 28
   162c0:	b5 01       	movw	r22, r10
   162c2:	a4 01       	movw	r20, r8
   162c4:	82 81       	ldd	r24, Z+2	; 0x02
   162c6:	93 81       	ldd	r25, Z+3	; 0x03
   162c8:	0e 94 22 82 	call	0x10444	; 0x10444 <dbf_open_read>
   162cc:	7c 01       	movw	r14, r24
   162ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162d2:	86 ff       	sbrs	r24, 6
   162d4:	04 c0       	rjmp	.+8      	; 0x162de <amigo_buffered_read_command+0x9a>
   162d6:	81 ea       	ldi	r24, 0xA1	; 161
   162d8:	90 e1       	ldi	r25, 0x10	; 16
   162da:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   162de:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   162e2:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   162e6:	86 81       	ldd	r24, Z+6	; 0x06
   162e8:	97 81       	ldd	r25, Z+7	; 0x07
   162ea:	e8 16       	cp	r14, r24
   162ec:	f9 06       	cpc	r15, r25
   162ee:	61 f0       	breq	.+24     	; 0x16308 <amigo_buffered_read_command+0xc4>
   162f0:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   162f4:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   162f8:	81 e0       	ldi	r24, 0x01	; 1
   162fa:	86 83       	std	Z+6, r24	; 0x06
   162fc:	87 81       	ldd	r24, Z+7	; 0x07
   162fe:	90 85       	ldd	r25, Z+8	; 0x08
   16300:	81 60       	ori	r24, 0x01	; 1
   16302:	90 87       	std	Z+8, r25	; 0x08
   16304:	87 83       	std	Z+7, r24	; 0x07
   16306:	18 c0       	rjmp	.+48     	; 0x16338 <amigo_buffered_read_command+0xf4>
   16308:	80 eb       	ldi	r24, 0xB0	; 176
   1630a:	95 e1       	ldi	r25, 0x15	; 21
   1630c:	16 de       	rcall	.-980    	; 0x15f3a <amigo_increment>
   1630e:	89 2b       	or	r24, r25
   16310:	59 f0       	breq	.+22     	; 0x16328 <amigo_buffered_read_command+0xe4>
   16312:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16316:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1631a:	81 e0       	ldi	r24, 0x01	; 1
   1631c:	86 83       	std	Z+6, r24	; 0x06
   1631e:	87 81       	ldd	r24, Z+7	; 0x07
   16320:	90 85       	ldd	r25, Z+8	; 0x08
   16322:	84 60       	ori	r24, 0x04	; 4
   16324:	90 87       	std	Z+8, r25	; 0x08
   16326:	87 83       	std	Z+7, r24	; 0x07
   16328:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1632c:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16330:	81 81       	ldd	r24, Z+1	; 0x01
   16332:	90 e0       	ldi	r25, 0x00	; 0
   16334:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   16338:	80 e0       	ldi	r24, 0x00	; 0
   1633a:	90 e0       	ldi	r25, 0x00	; 0
   1633c:	0f 90       	pop	r0
   1633e:	0f 90       	pop	r0
   16340:	0f 90       	pop	r0
   16342:	0f 90       	pop	r0
   16344:	0f 90       	pop	r0
   16346:	1f 91       	pop	r17
   16348:	0f 91       	pop	r16
   1634a:	ff 90       	pop	r15
   1634c:	ef 90       	pop	r14
   1634e:	bf 90       	pop	r11
   16350:	af 90       	pop	r10
   16352:	9f 90       	pop	r9
   16354:	8f 90       	pop	r8
   16356:	08 95       	ret

00016358 <amigo_buffered_read_execute>:
   16358:	a5 e0       	ldi	r26, 0x05	; 5
   1635a:	b0 e0       	ldi	r27, 0x00	; 0
   1635c:	e2 eb       	ldi	r30, 0xB2	; 178
   1635e:	f1 eb       	ldi	r31, 0xB1	; 177
   16360:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
   16364:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16368:	87 fd       	sbrc	r24, 7
   1636a:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   1636e:	80 e0       	ldi	r24, 0x00	; 0
   16370:	91 e0       	ldi	r25, 0x01	; 1
   16372:	9d 83       	std	Y+5, r25	; 0x05
   16374:	8c 83       	std	Y+4, r24	; 0x04
   16376:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   1637a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1637e:	66 81       	ldd	r22, Z+6	; 0x06
   16380:	77 81       	ldd	r23, Z+7	; 0x07
   16382:	ae 01       	movw	r20, r28
   16384:	4c 5f       	subi	r20, 0xFC	; 252
   16386:	5f 4f       	sbci	r21, 0xFF	; 255
   16388:	86 ef       	ldi	r24, 0xF6	; 246
   1638a:	9c e1       	ldi	r25, 0x1C	; 28
   1638c:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   16390:	8c 01       	movw	r16, r24
   16392:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16396:	87 ff       	sbrs	r24, 7
   16398:	04 c0       	rjmp	.+8      	; 0x163a2 <amigo_buffered_read_execute+0x4a>
   1639a:	8c ea       	ldi	r24, 0xAC	; 172
   1639c:	90 e1       	ldi	r25, 0x10	; 16
   1639e:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   163a2:	8c 81       	ldd	r24, Y+4	; 0x04
   163a4:	9d 81       	ldd	r25, Y+5	; 0x05
   163a6:	88 27       	eor	r24, r24
   163a8:	90 7d       	andi	r25, 0xD0	; 208
   163aa:	89 2b       	or	r24, r25
   163ac:	49 f4       	brne	.+18     	; 0x163c0 <amigo_buffered_read_execute+0x68>
   163ae:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   163b2:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   163b6:	86 81       	ldd	r24, Z+6	; 0x06
   163b8:	97 81       	ldd	r25, Z+7	; 0x07
   163ba:	08 17       	cp	r16, r24
   163bc:	19 07       	cpc	r17, r25
   163be:	31 f1       	breq	.+76     	; 0x1640c <amigo_buffered_read_execute+0xb4>
   163c0:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   163c4:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   163c8:	81 e0       	ldi	r24, 0x01	; 1
   163ca:	86 83       	std	Z+6, r24	; 0x06
   163cc:	87 81       	ldd	r24, Z+7	; 0x07
   163ce:	90 85       	ldd	r25, Z+8	; 0x08
   163d0:	80 62       	ori	r24, 0x20	; 32
   163d2:	90 87       	std	Z+8, r25	; 0x08
   163d4:	87 83       	std	Z+7, r24	; 0x07
   163d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163da:	80 ff       	sbrs	r24, 0
   163dc:	0a c0       	rjmp	.+20     	; 0x163f2 <amigo_buffered_read_execute+0x9a>
   163de:	83 e1       	ldi	r24, 0x13	; 19
   163e0:	9c e2       	ldi	r25, 0x2C	; 44
   163e2:	a0 e0       	ldi	r26, 0x00	; 0
   163e4:	ed b7       	in	r30, 0x3d	; 61
   163e6:	fe b7       	in	r31, 0x3e	; 62
   163e8:	81 83       	std	Z+1, r24	; 0x01
   163ea:	92 83       	std	Z+2, r25	; 0x02
   163ec:	a3 83       	std	Z+3, r26	; 0x03
   163ee:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   163f2:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   163f6:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   163fa:	81 81       	ldd	r24, Z+1	; 0x01
   163fc:	90 e0       	ldi	r25, 0x00	; 0
   163fe:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   16402:	8c 81       	ldd	r24, Y+4	; 0x04
   16404:	9d 81       	ldd	r25, Y+5	; 0x05
   16406:	88 27       	eor	r24, r24
   16408:	90 7d       	andi	r25, 0xD0	; 208
   1640a:	06 c0       	rjmp	.+12     	; 0x16418 <amigo_buffered_read_execute+0xc0>
   1640c:	81 81       	ldd	r24, Z+1	; 0x01
   1640e:	90 e0       	ldi	r25, 0x00	; 0
   16410:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   16414:	80 e0       	ldi	r24, 0x00	; 0
   16416:	90 e0       	ldi	r25, 0x00	; 0
   16418:	25 96       	adiw	r28, 0x05	; 5
   1641a:	e4 e0       	ldi	r30, 0x04	; 4
   1641c:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00016420 <amigo_buffered_write>:
   16420:	8f 92       	push	r8
   16422:	9f 92       	push	r9
   16424:	af 92       	push	r10
   16426:	bf 92       	push	r11
   16428:	ef 92       	push	r14
   1642a:	ff 92       	push	r15
   1642c:	0f 93       	push	r16
   1642e:	1f 93       	push	r17
   16430:	cf 93       	push	r28
   16432:	df 93       	push	r29
   16434:	cd b7       	in	r28, 0x3d	; 61
   16436:	de b7       	in	r29, 0x3e	; 62
   16438:	27 97       	sbiw	r28, 0x07	; 7
   1643a:	0f b6       	in	r0, 0x3f	; 63
   1643c:	f8 94       	cli
   1643e:	de bf       	out	0x3e, r29	; 62
   16440:	0f be       	out	0x3f, r0	; 63
   16442:	cd bf       	out	0x3d, r28	; 61
   16444:	6e eb       	ldi	r22, 0xBE	; 190
   16446:	75 e1       	ldi	r23, 0x15	; 21
   16448:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <AMIGOs>
   1644c:	90 91 70 19 	lds	r25, 0x1970	; 0x801970 <AMIGOs+0x1>
   16450:	95 db       	rcall	.-2262   	; 0x15b7c <amigo_chs_to_logical>
   16452:	4b 01       	movw	r8, r22
   16454:	5c 01       	movw	r10, r24
   16456:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1645a:	87 fd       	sbrc	r24, 7
   1645c:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   16460:	1f 82       	std	Y+7, r1	; 0x07
   16462:	1e 82       	std	Y+6, r1	; 0x06
   16464:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16468:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1646c:	66 81       	ldd	r22, Z+6	; 0x06
   1646e:	77 81       	ldd	r23, Z+7	; 0x07
   16470:	ae 01       	movw	r20, r28
   16472:	4a 5f       	subi	r20, 0xFA	; 250
   16474:	5f 4f       	sbci	r21, 0xFF	; 255
   16476:	86 ef       	ldi	r24, 0xF6	; 246
   16478:	9c e1       	ldi	r25, 0x1C	; 28
   1647a:	0e 94 80 88 	call	0x11100	; 0x11100 <gpib_read_str>
   1647e:	7c 01       	movw	r14, r24
   16480:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16484:	85 ff       	sbrs	r24, 5
   16486:	12 c0       	rjmp	.+36     	; 0x164ac <amigo_buffered_write+0x8c>
   16488:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1648c:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16490:	80 81       	ld	r24, Z
   16492:	90 e0       	ldi	r25, 0x00	; 0
   16494:	ed b7       	in	r30, 0x3d	; 61
   16496:	fe b7       	in	r31, 0x3e	; 62
   16498:	95 83       	std	Z+5, r25	; 0x05
   1649a:	84 83       	std	Z+4, r24	; 0x04
   1649c:	81 e0       	ldi	r24, 0x01	; 1
   1649e:	9c e2       	ldi	r25, 0x2C	; 44
   164a0:	a0 e0       	ldi	r26, 0x00	; 0
   164a2:	81 83       	std	Z+1, r24	; 0x01
   164a4:	92 83       	std	Z+2, r25	; 0x02
   164a6:	a3 83       	std	Z+3, r26	; 0x03
   164a8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   164ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164b0:	87 ff       	sbrs	r24, 7
   164b2:	04 c0       	rjmp	.+8      	; 0x164bc <amigo_buffered_write+0x9c>
   164b4:	8d ec       	ldi	r24, 0xCD	; 205
   164b6:	95 e1       	ldi	r25, 0x15	; 21
   164b8:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   164bc:	8e 81       	ldd	r24, Y+6	; 0x06
   164be:	9f 81       	ldd	r25, Y+7	; 0x07
   164c0:	88 27       	eor	r24, r24
   164c2:	90 7d       	andi	r25, 0xD0	; 208
   164c4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   164c8:	89 2b       	or	r24, r25
   164ca:	49 f4       	brne	.+18     	; 0x164de <amigo_buffered_write+0xbe>
   164cc:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   164d0:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   164d4:	86 81       	ldd	r24, Z+6	; 0x06
   164d6:	97 81       	ldd	r25, Z+7	; 0x07
   164d8:	e8 16       	cp	r14, r24
   164da:	f9 06       	cpc	r15, r25
   164dc:	c1 f0       	breq	.+48     	; 0x1650e <amigo_buffered_write+0xee>
   164de:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   164e2:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   164e6:	81 e0       	ldi	r24, 0x01	; 1
   164e8:	86 83       	std	Z+6, r24	; 0x06
   164ea:	87 81       	ldd	r24, Z+7	; 0x07
   164ec:	90 85       	ldd	r25, Z+8	; 0x08
   164ee:	80 62       	ori	r24, 0x20	; 32
   164f0:	90 87       	std	Z+8, r25	; 0x08
   164f2:	87 83       	std	Z+7, r24	; 0x07
   164f4:	20 ff       	sbrs	r18, 0
   164f6:	4e c0       	rjmp	.+156    	; 0x16594 <amigo_buffered_write+0x174>
   164f8:	82 ee       	ldi	r24, 0xE2	; 226
   164fa:	9b e2       	ldi	r25, 0x2B	; 43
   164fc:	a0 e0       	ldi	r26, 0x00	; 0
   164fe:	ed b7       	in	r30, 0x3d	; 61
   16500:	fe b7       	in	r31, 0x3e	; 62
   16502:	81 83       	std	Z+1, r24	; 0x01
   16504:	92 83       	std	Z+2, r25	; 0x02
   16506:	a3 83       	std	Z+3, r26	; 0x03
   16508:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1650c:	43 c0       	rjmp	.+134    	; 0x16594 <amigo_buffered_write+0x174>
   1650e:	26 fd       	sbrc	r18, 6
   16510:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
   16514:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16518:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1651c:	e0 90 6f 19 	lds	r14, 0x196F	; 0x80196f <AMIGOs>
   16520:	f0 90 70 19 	lds	r15, 0x1970	; 0x801970 <AMIGOs+0x1>
   16524:	87 e0       	ldi	r24, 0x07	; 7
   16526:	e8 0e       	add	r14, r24
   16528:	f1 1c       	adc	r15, r1
   1652a:	06 81       	ldd	r16, Z+6	; 0x06
   1652c:	17 81       	ldd	r17, Z+7	; 0x07
   1652e:	26 ef       	ldi	r18, 0xF6	; 246
   16530:	3c e1       	ldi	r19, 0x1C	; 28
   16532:	b5 01       	movw	r22, r10
   16534:	a4 01       	movw	r20, r8
   16536:	82 81       	ldd	r24, Z+2	; 0x02
   16538:	93 81       	ldd	r25, Z+3	; 0x03
   1653a:	0e 94 79 82 	call	0x104f2	; 0x104f2 <dbf_open_write>
   1653e:	7c 01       	movw	r14, r24
   16540:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16544:	86 ff       	sbrs	r24, 6
   16546:	04 c0       	rjmp	.+8      	; 0x16550 <amigo_buffered_write+0x130>
   16548:	86 e9       	ldi	r24, 0x96	; 150
   1654a:	90 e1       	ldi	r25, 0x10	; 16
   1654c:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
   16550:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16554:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16558:	86 81       	ldd	r24, Z+6	; 0x06
   1655a:	97 81       	ldd	r25, Z+7	; 0x07
   1655c:	e8 16       	cp	r14, r24
   1655e:	f9 06       	cpc	r15, r25
   16560:	49 f0       	breq	.+18     	; 0x16574 <amigo_buffered_write+0x154>
   16562:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16566:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1656a:	81 e0       	ldi	r24, 0x01	; 1
   1656c:	86 83       	std	Z+6, r24	; 0x06
   1656e:	80 e0       	ldi	r24, 0x00	; 0
   16570:	90 e0       	ldi	r25, 0x00	; 0
   16572:	1c c0       	rjmp	.+56     	; 0x165ac <amigo_buffered_write+0x18c>
   16574:	8e eb       	ldi	r24, 0xBE	; 190
   16576:	95 e1       	ldi	r25, 0x15	; 21
   16578:	e0 dc       	rcall	.-1600   	; 0x15f3a <amigo_increment>
   1657a:	89 2b       	or	r24, r25
   1657c:	59 f0       	breq	.+22     	; 0x16594 <amigo_buffered_write+0x174>
   1657e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16582:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16586:	81 e0       	ldi	r24, 0x01	; 1
   16588:	86 83       	std	Z+6, r24	; 0x06
   1658a:	87 81       	ldd	r24, Z+7	; 0x07
   1658c:	90 85       	ldd	r25, Z+8	; 0x08
   1658e:	84 60       	ori	r24, 0x04	; 4
   16590:	90 87       	std	Z+8, r25	; 0x08
   16592:	87 83       	std	Z+7, r24	; 0x07
   16594:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16598:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   1659c:	81 81       	ldd	r24, Z+1	; 0x01
   1659e:	90 e0       	ldi	r25, 0x00	; 0
   165a0:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   165a4:	8e 81       	ldd	r24, Y+6	; 0x06
   165a6:	9f 81       	ldd	r25, Y+7	; 0x07
   165a8:	88 27       	eor	r24, r24
   165aa:	90 7d       	andi	r25, 0xD0	; 208
   165ac:	27 96       	adiw	r28, 0x07	; 7
   165ae:	0f b6       	in	r0, 0x3f	; 63
   165b0:	f8 94       	cli
   165b2:	de bf       	out	0x3e, r29	; 62
   165b4:	0f be       	out	0x3f, r0	; 63
   165b6:	cd bf       	out	0x3d, r28	; 61
   165b8:	df 91       	pop	r29
   165ba:	cf 91       	pop	r28
   165bc:	1f 91       	pop	r17
   165be:	0f 91       	pop	r16
   165c0:	ff 90       	pop	r15
   165c2:	ef 90       	pop	r14
   165c4:	bf 90       	pop	r11
   165c6:	af 90       	pop	r10
   165c8:	9f 90       	pop	r9
   165ca:	8f 90       	pop	r8
   165cc:	08 95       	ret

000165ce <amigo_cmd_dsj>:
   165ce:	a8 e0       	ldi	r26, 0x08	; 8
   165d0:	b0 e0       	ldi	r27, 0x00	; 0
   165d2:	ed ee       	ldi	r30, 0xED	; 237
   165d4:	f2 eb       	ldi	r31, 0xB2	; 178
   165d6:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   165da:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   165de:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   165e2:	86 81       	ldd	r24, Z+6	; 0x06
   165e4:	88 87       	std	Y+8, r24	; 0x08
   165e6:	80 e0       	ldi	r24, 0x00	; 0
   165e8:	91 e0       	ldi	r25, 0x01	; 1
   165ea:	9f 83       	std	Y+7, r25	; 0x07
   165ec:	8e 83       	std	Y+6, r24	; 0x06
   165ee:	ae 01       	movw	r20, r28
   165f0:	4a 5f       	subi	r20, 0xFA	; 250
   165f2:	5f 4f       	sbci	r21, 0xFF	; 255
   165f4:	61 e0       	ldi	r22, 0x01	; 1
   165f6:	70 e0       	ldi	r23, 0x00	; 0
   165f8:	ce 01       	movw	r24, r28
   165fa:	08 96       	adiw	r24, 0x08	; 8
   165fc:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
   16600:	2e 81       	ldd	r18, Y+6	; 0x06
   16602:	3f 81       	ldd	r19, Y+7	; 0x07
   16604:	22 27       	eor	r18, r18
   16606:	30 7d       	andi	r19, 0xD0	; 208
   16608:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1660c:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16610:	23 2b       	or	r18, r19
   16612:	29 f0       	breq	.+10     	; 0x1661e <amigo_cmd_dsj+0x50>
   16614:	27 81       	ldd	r18, Z+7	; 0x07
   16616:	30 85       	ldd	r19, Z+8	; 0x08
   16618:	20 62       	ori	r18, 0x20	; 32
   1661a:	30 87       	std	Z+8, r19	; 0x08
   1661c:	27 83       	std	Z+7, r18	; 0x07
   1661e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16622:	01 97       	sbiw	r24, 0x01	; 1
   16624:	c1 f0       	breq	.+48     	; 0x16656 <amigo_cmd_dsj+0x88>
   16626:	81 e0       	ldi	r24, 0x01	; 1
   16628:	86 83       	std	Z+6, r24	; 0x06
   1662a:	87 81       	ldd	r24, Z+7	; 0x07
   1662c:	90 85       	ldd	r25, Z+8	; 0x08
   1662e:	80 62       	ori	r24, 0x20	; 32
   16630:	90 87       	std	Z+8, r25	; 0x08
   16632:	87 83       	std	Z+7, r24	; 0x07
   16634:	20 ff       	sbrs	r18, 0
   16636:	0a c0       	rjmp	.+20     	; 0x1664c <amigo_cmd_dsj+0x7e>
   16638:	88 ec       	ldi	r24, 0xC8	; 200
   1663a:	9b e2       	ldi	r25, 0x2B	; 43
   1663c:	a0 e0       	ldi	r26, 0x00	; 0
   1663e:	ed b7       	in	r30, 0x3d	; 61
   16640:	fe b7       	in	r31, 0x3e	; 62
   16642:	81 83       	std	Z+1, r24	; 0x01
   16644:	92 83       	std	Z+2, r25	; 0x02
   16646:	a3 83       	std	Z+3, r26	; 0x03
   16648:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1664c:	8e 81       	ldd	r24, Y+6	; 0x06
   1664e:	9f 81       	ldd	r25, Y+7	; 0x07
   16650:	88 27       	eor	r24, r24
   16652:	90 7d       	andi	r25, 0xD0	; 208
   16654:	19 c0       	rjmp	.+50     	; 0x16688 <amigo_cmd_dsj+0xba>
   16656:	25 ff       	sbrs	r18, 5
   16658:	0e c0       	rjmp	.+28     	; 0x16676 <amigo_cmd_dsj+0xa8>
   1665a:	86 81       	ldd	r24, Z+6	; 0x06
   1665c:	90 e0       	ldi	r25, 0x00	; 0
   1665e:	ed b7       	in	r30, 0x3d	; 61
   16660:	fe b7       	in	r31, 0x3e	; 62
   16662:	95 83       	std	Z+5, r25	; 0x05
   16664:	84 83       	std	Z+4, r24	; 0x04
   16666:	8b eb       	ldi	r24, 0xBB	; 187
   16668:	9b e2       	ldi	r25, 0x2B	; 43
   1666a:	a0 e0       	ldi	r26, 0x00	; 0
   1666c:	81 83       	std	Z+1, r24	; 0x01
   1666e:	92 83       	std	Z+2, r25	; 0x02
   16670:	a3 83       	std	Z+3, r26	; 0x03
   16672:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16676:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1667a:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1667e:	16 82       	std	Z+6, r1	; 0x06
   16680:	10 86       	std	Z+8, r1	; 0x08
   16682:	17 82       	std	Z+7, r1	; 0x07
   16684:	80 e0       	ldi	r24, 0x00	; 0
   16686:	90 e0       	ldi	r25, 0x00	; 0
   16688:	28 96       	adiw	r28, 0x08	; 8
   1668a:	e2 e0       	ldi	r30, 0x02	; 2
   1668c:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

00016690 <amigo_cmd_clear>:
   16690:	00 d0       	rcall	.+0      	; 0x16692 <amigo_cmd_clear+0x2>
   16692:	1f 92       	push	r1
   16694:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16698:	85 ff       	sbrs	r24, 5
   1669a:	0a c0       	rjmp	.+20     	; 0x166b0 <amigo_cmd_clear+0x20>
   1669c:	8c ea       	ldi	r24, 0xAC	; 172
   1669e:	9b e2       	ldi	r25, 0x2B	; 43
   166a0:	a0 e0       	ldi	r26, 0x00	; 0
   166a2:	ed b7       	in	r30, 0x3d	; 61
   166a4:	fe b7       	in	r31, 0x3e	; 62
   166a6:	81 83       	std	Z+1, r24	; 0x01
   166a8:	92 83       	std	Z+2, r25	; 0x02
   166aa:	a3 83       	std	Z+3, r26	; 0x03
   166ac:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   166b0:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   166b4:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   166b8:	15 82       	std	Z+5, r1	; 0x05
   166ba:	14 82       	std	Z+4, r1	; 0x04
   166bc:	13 82       	std	Z+3, r1	; 0x03
   166be:	16 82       	std	Z+6, r1	; 0x06
   166c0:	10 86       	std	Z+8, r1	; 0x08
   166c2:	17 82       	std	Z+7, r1	; 0x07
   166c4:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   166c8:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   166cc:	81 81       	ldd	r24, Z+1	; 0x01
   166ce:	90 e0       	ldi	r25, 0x00	; 0
   166d0:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
   166d4:	80 e0       	ldi	r24, 0x00	; 0
   166d6:	90 e0       	ldi	r25, 0x00	; 0
   166d8:	0f 90       	pop	r0
   166da:	0f 90       	pop	r0
   166dc:	0f 90       	pop	r0
   166de:	08 95       	ret

000166e0 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   166e0:	af e0       	ldi	r26, 0x0F	; 15
   166e2:	b0 e0       	ldi	r27, 0x00	; 0
   166e4:	e6 e7       	ldi	r30, 0x76	; 118
   166e6:	f3 eb       	ldi	r31, 0xB3	; 179
   166e8:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
   166ec:	c8 2f       	mov	r28, r24
   166ee:	e6 2e       	mov	r14, r22
   166f0:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   166f2:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   166f6:	90 e0       	ldi	r25, 0x00	; 0
   166f8:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   166fc:	20 91 fa 1e 	lds	r18, 0x1EFA	; 0x801efa <talking>
   16700:	f1 2c       	mov	r15, r1
   16702:	d0 e0       	ldi	r29, 0x00	; 0
   16704:	89 2b       	or	r24, r25
   16706:	f1 f0       	breq	.+60     	; 0x16744 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16708:	82 2f       	mov	r24, r18
   1670a:	90 e0       	ldi	r25, 0x00	; 0
   1670c:	ed b7       	in	r30, 0x3d	; 61
   1670e:	fe b7       	in	r31, 0x3e	; 62
   16710:	97 87       	std	Z+15, r25	; 0x0f
   16712:	86 87       	std	Z+14, r24	; 0x0e
   16714:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16718:	90 e0       	ldi	r25, 0x00	; 0
   1671a:	95 87       	std	Z+13, r25	; 0x0d
   1671c:	84 87       	std	Z+12, r24	; 0x0c
   1671e:	13 87       	std	Z+11, r17	; 0x0b
   16720:	02 87       	std	Z+10, r16	; 0x0a
   16722:	f1 86       	std	Z+9, r15	; 0x09
   16724:	e0 86       	std	Z+8, r14	; 0x08
   16726:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1672a:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   1672e:	80 81       	ld	r24, Z
   16730:	90 e0       	ldi	r25, 0x00	; 0
   16732:	ed b7       	in	r30, 0x3d	; 61
   16734:	fe b7       	in	r31, 0x3e	; 62
   16736:	97 83       	std	Z+7, r25	; 0x07
   16738:	86 83       	std	Z+6, r24	; 0x06
   1673a:	d5 83       	std	Z+5, r29	; 0x05
   1673c:	c4 83       	std	Z+4, r28	; 0x04
   1673e:	85 e4       	ldi	r24, 0x45	; 69
   16740:	9b e2       	ldi	r25, 0x2B	; 43
   16742:	51 c0       	rjmp	.+162    	; 0x167e6 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16744:	82 2f       	mov	r24, r18
   16746:	90 e0       	ldi	r25, 0x00	; 0
   16748:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
   1674c:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <listening>
   16750:	30 91 fa 1e 	lds	r19, 0x1EFA	; 0x801efa <talking>
   16754:	a0 91 6f 19 	lds	r26, 0x196F	; 0x80196f <AMIGOs>
   16758:	b0 91 70 19 	lds	r27, 0x1970	; 0x801970 <AMIGOs+0x1>
   1675c:	89 2b       	or	r24, r25
   1675e:	b1 f0       	breq	.+44     	; 0x1678c <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16760:	83 2f       	mov	r24, r19
   16762:	90 e0       	ldi	r25, 0x00	; 0
   16764:	ed b7       	in	r30, 0x3d	; 61
   16766:	fe b7       	in	r31, 0x3e	; 62
   16768:	97 87       	std	Z+15, r25	; 0x0f
   1676a:	86 87       	std	Z+14, r24	; 0x0e
   1676c:	30 e0       	ldi	r19, 0x00	; 0
   1676e:	35 87       	std	Z+13, r19	; 0x0d
   16770:	24 87       	std	Z+12, r18	; 0x0c
   16772:	13 87       	std	Z+11, r17	; 0x0b
   16774:	02 87       	std	Z+10, r16	; 0x0a
   16776:	f1 86       	std	Z+9, r15	; 0x09
   16778:	e0 86       	std	Z+8, r14	; 0x08
   1677a:	8c 91       	ld	r24, X
   1677c:	90 e0       	ldi	r25, 0x00	; 0
   1677e:	97 83       	std	Z+7, r25	; 0x07
   16780:	86 83       	std	Z+6, r24	; 0x06
   16782:	d5 83       	std	Z+5, r29	; 0x05
   16784:	c4 83       	std	Z+4, r28	; 0x04
   16786:	8e ed       	ldi	r24, 0xDE	; 222
   16788:	9a e2       	ldi	r25, 0x2A	; 42
   1678a:	2d c0       	rjmp	.+90     	; 0x167e6 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   1678c:	3f 35       	cpi	r19, 0x5F	; 95
   1678e:	b1 f4       	brne	.+44     	; 0x167bc <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16790:	8f e5       	ldi	r24, 0x5F	; 95
   16792:	90 e0       	ldi	r25, 0x00	; 0
   16794:	ed b7       	in	r30, 0x3d	; 61
   16796:	fe b7       	in	r31, 0x3e	; 62
   16798:	97 87       	std	Z+15, r25	; 0x0f
   1679a:	86 87       	std	Z+14, r24	; 0x0e
   1679c:	30 e0       	ldi	r19, 0x00	; 0
   1679e:	35 87       	std	Z+13, r19	; 0x0d
   167a0:	24 87       	std	Z+12, r18	; 0x0c
   167a2:	13 87       	std	Z+11, r17	; 0x0b
   167a4:	02 87       	std	Z+10, r16	; 0x0a
   167a6:	f1 86       	std	Z+9, r15	; 0x09
   167a8:	e0 86       	std	Z+8, r14	; 0x08
   167aa:	8c 91       	ld	r24, X
   167ac:	90 e0       	ldi	r25, 0x00	; 0
   167ae:	97 83       	std	Z+7, r25	; 0x07
   167b0:	86 83       	std	Z+6, r24	; 0x06
   167b2:	d5 83       	std	Z+5, r29	; 0x05
   167b4:	c4 83       	std	Z+4, r28	; 0x04
   167b6:	87 e7       	ldi	r24, 0x77	; 119
   167b8:	9a e2       	ldi	r25, 0x2A	; 42
   167ba:	15 c0       	rjmp	.+42     	; 0x167e6 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   167bc:	83 2f       	mov	r24, r19
   167be:	90 e0       	ldi	r25, 0x00	; 0
   167c0:	ed b7       	in	r30, 0x3d	; 61
   167c2:	fe b7       	in	r31, 0x3e	; 62
   167c4:	97 87       	std	Z+15, r25	; 0x0f
   167c6:	86 87       	std	Z+14, r24	; 0x0e
   167c8:	30 e0       	ldi	r19, 0x00	; 0
   167ca:	35 87       	std	Z+13, r19	; 0x0d
   167cc:	24 87       	std	Z+12, r18	; 0x0c
   167ce:	13 87       	std	Z+11, r17	; 0x0b
   167d0:	02 87       	std	Z+10, r16	; 0x0a
   167d2:	f1 86       	std	Z+9, r15	; 0x09
   167d4:	e0 86       	std	Z+8, r14	; 0x08
   167d6:	8c 91       	ld	r24, X
   167d8:	90 e0       	ldi	r25, 0x00	; 0
   167da:	97 83       	std	Z+7, r25	; 0x07
   167dc:	86 83       	std	Z+6, r24	; 0x06
   167de:	d5 83       	std	Z+5, r29	; 0x05
   167e0:	c4 83       	std	Z+4, r28	; 0x04
   167e2:	82 e1       	ldi	r24, 0x12	; 18
   167e4:	9a e2       	ldi	r25, 0x2A	; 42
   167e6:	a0 e0       	ldi	r26, 0x00	; 0
   167e8:	81 83       	std	Z+1, r24	; 0x01
   167ea:	92 83       	std	Z+2, r25	; 0x02
   167ec:	a3 83       	std	Z+3, r26	; 0x03
   167ee:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   167f2:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   167f6:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   167fa:	81 81       	ldd	r24, Z+1	; 0x01
   167fc:	90 e0       	ldi	r25, 0x00	; 0
   167fe:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
    return(0);
}
   16802:	80 e0       	ldi	r24, 0x00	; 0
   16804:	90 e0       	ldi	r25, 0x00	; 0
   16806:	cd b7       	in	r28, 0x3d	; 61
   16808:	de b7       	in	r29, 0x3e	; 62
   1680a:	2f 96       	adiw	r28, 0x0f	; 15
   1680c:	e6 e0       	ldi	r30, 0x06	; 6
   1680e:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00016812 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16812:	ab e0       	ldi	r26, 0x0B	; 11
   16814:	b0 e0       	ldi	r27, 0x00	; 0
   16816:	ef e0       	ldi	r30, 0x0F	; 15
   16818:	f4 eb       	ldi	r31, 0xB4	; 180
   1681a:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   1681e:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16820:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16824:	90 e0       	ldi	r25, 0x00	; 0
   16826:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   1682a:	20 91 fa 1e 	lds	r18, 0x1EFA	; 0x801efa <talking>
   1682e:	d0 e0       	ldi	r29, 0x00	; 0
   16830:	89 2b       	or	r24, r25
   16832:	d1 f0       	breq	.+52     	; 0x16868 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16834:	82 2f       	mov	r24, r18
   16836:	90 e0       	ldi	r25, 0x00	; 0
   16838:	ed b7       	in	r30, 0x3d	; 61
   1683a:	fe b7       	in	r31, 0x3e	; 62
   1683c:	93 87       	std	Z+11, r25	; 0x0b
   1683e:	82 87       	std	Z+10, r24	; 0x0a
   16840:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16844:	90 e0       	ldi	r25, 0x00	; 0
   16846:	91 87       	std	Z+9, r25	; 0x09
   16848:	80 87       	std	Z+8, r24	; 0x08
   1684a:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1684e:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16852:	80 81       	ld	r24, Z
   16854:	90 e0       	ldi	r25, 0x00	; 0
   16856:	ed b7       	in	r30, 0x3d	; 61
   16858:	fe b7       	in	r31, 0x3e	; 62
   1685a:	97 83       	std	Z+7, r25	; 0x07
   1685c:	86 83       	std	Z+6, r24	; 0x06
   1685e:	d5 83       	std	Z+5, r29	; 0x05
   16860:	c4 83       	std	Z+4, r28	; 0x04
   16862:	82 ec       	ldi	r24, 0xC2	; 194
   16864:	99 e2       	ldi	r25, 0x29	; 41
   16866:	43 c0       	rjmp	.+134    	; 0x168ee <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16868:	82 2f       	mov	r24, r18
   1686a:	90 e0       	ldi	r25, 0x00	; 0
   1686c:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
   16870:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <listening>
   16874:	40 91 fa 1e 	lds	r20, 0x1EFA	; 0x801efa <talking>
   16878:	a0 91 6f 19 	lds	r26, 0x196F	; 0x80196f <AMIGOs>
   1687c:	b0 91 70 19 	lds	r27, 0x1970	; 0x801970 <AMIGOs+0x1>
   16880:	89 2b       	or	r24, r25
   16882:	89 f0       	breq	.+34     	; 0x168a6 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16884:	50 e0       	ldi	r21, 0x00	; 0
   16886:	ed b7       	in	r30, 0x3d	; 61
   16888:	fe b7       	in	r31, 0x3e	; 62
   1688a:	53 87       	std	Z+11, r21	; 0x0b
   1688c:	42 87       	std	Z+10, r20	; 0x0a
   1688e:	30 e0       	ldi	r19, 0x00	; 0
   16890:	31 87       	std	Z+9, r19	; 0x09
   16892:	20 87       	std	Z+8, r18	; 0x08
   16894:	8c 91       	ld	r24, X
   16896:	90 e0       	ldi	r25, 0x00	; 0
   16898:	97 83       	std	Z+7, r25	; 0x07
   1689a:	86 83       	std	Z+6, r24	; 0x06
   1689c:	d5 83       	std	Z+5, r29	; 0x05
   1689e:	c4 83       	std	Z+4, r28	; 0x04
   168a0:	82 e7       	ldi	r24, 0x72	; 114
   168a2:	99 e2       	ldi	r25, 0x29	; 41
   168a4:	24 c0       	rjmp	.+72     	; 0x168ee <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   168a6:	4f 35       	cpi	r20, 0x5F	; 95
   168a8:	91 f4       	brne	.+36     	; 0x168ce <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   168aa:	8f e5       	ldi	r24, 0x5F	; 95
   168ac:	90 e0       	ldi	r25, 0x00	; 0
   168ae:	ed b7       	in	r30, 0x3d	; 61
   168b0:	fe b7       	in	r31, 0x3e	; 62
   168b2:	93 87       	std	Z+11, r25	; 0x0b
   168b4:	82 87       	std	Z+10, r24	; 0x0a
   168b6:	30 e0       	ldi	r19, 0x00	; 0
   168b8:	31 87       	std	Z+9, r19	; 0x09
   168ba:	20 87       	std	Z+8, r18	; 0x08
   168bc:	8c 91       	ld	r24, X
   168be:	90 e0       	ldi	r25, 0x00	; 0
   168c0:	97 83       	std	Z+7, r25	; 0x07
   168c2:	86 83       	std	Z+6, r24	; 0x06
   168c4:	d5 83       	std	Z+5, r29	; 0x05
   168c6:	c4 83       	std	Z+4, r28	; 0x04
   168c8:	82 e2       	ldi	r24, 0x22	; 34
   168ca:	99 e2       	ldi	r25, 0x29	; 41
   168cc:	10 c0       	rjmp	.+32     	; 0x168ee <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   168ce:	50 e0       	ldi	r21, 0x00	; 0
   168d0:	ed b7       	in	r30, 0x3d	; 61
   168d2:	fe b7       	in	r31, 0x3e	; 62
   168d4:	53 87       	std	Z+11, r21	; 0x0b
   168d6:	42 87       	std	Z+10, r20	; 0x0a
   168d8:	30 e0       	ldi	r19, 0x00	; 0
   168da:	31 87       	std	Z+9, r19	; 0x09
   168dc:	20 87       	std	Z+8, r18	; 0x08
   168de:	8c 91       	ld	r24, X
   168e0:	90 e0       	ldi	r25, 0x00	; 0
   168e2:	97 83       	std	Z+7, r25	; 0x07
   168e4:	86 83       	std	Z+6, r24	; 0x06
   168e6:	d5 83       	std	Z+5, r29	; 0x05
   168e8:	c4 83       	std	Z+4, r28	; 0x04
   168ea:	81 ed       	ldi	r24, 0xD1	; 209
   168ec:	98 e2       	ldi	r25, 0x28	; 40
   168ee:	a0 e0       	ldi	r26, 0x00	; 0
   168f0:	81 83       	std	Z+1, r24	; 0x01
   168f2:	92 83       	std	Z+2, r25	; 0x02
   168f4:	a3 83       	std	Z+3, r26	; 0x03
   168f6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   168fa:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   168fe:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16902:	81 81       	ldd	r24, Z+1	; 0x01
   16904:	90 e0       	ldi	r25, 0x00	; 0
   16906:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
    return(0);
}
   1690a:	80 e0       	ldi	r24, 0x00	; 0
   1690c:	90 e0       	ldi	r25, 0x00	; 0
   1690e:	cd b7       	in	r28, 0x3d	; 61
   16910:	de b7       	in	r29, 0x3e	; 62
   16912:	2b 96       	adiw	r28, 0x0b	; 11
   16914:	e2 e0       	ldi	r30, 0x02	; 2
   16916:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0001691a <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   1691a:	8f 30       	cpi	r24, 0x0F	; 15
   1691c:	29 f0       	breq	.+10     	; 0x16928 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   1691e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16922:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16926:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16928:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   1692c:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16930:	81 81       	ldd	r24, Z+1	; 0x01
   16932:	88 23       	and	r24, r24
   16934:	29 f0       	breq	.+10     	; 0x16940 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16936:	87 81       	ldd	r24, Z+7	; 0x07
   16938:	90 85       	ldd	r25, Z+8	; 0x08
   1693a:	80 64       	ori	r24, 0x40	; 64
   1693c:	90 87       	std	Z+8, r25	; 0x08
   1693e:	87 83       	std	Z+7, r24	; 0x07
   16940:	08 95       	ret

00016942 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16942:	ac e1       	ldi	r26, 0x1C	; 28
   16944:	b0 e0       	ldi	r27, 0x00	; 0
   16946:	e7 ea       	ldi	r30, 0xA7	; 167
   16948:	f4 eb       	ldi	r31, 0xB4	; 180
   1694a:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
   1694e:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16950:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16954:	85 ff       	sbrs	r24, 5
   16956:	16 c0       	rjmp	.+44     	; 0x16984 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16958:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1695c:	90 e0       	ldi	r25, 0x00	; 0
   1695e:	ed b7       	in	r30, 0x3d	; 61
   16960:	fe b7       	in	r31, 0x3e	; 62
   16962:	91 87       	std	Z+9, r25	; 0x09
   16964:	80 87       	std	Z+8, r24	; 0x08
   16966:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1696a:	90 e0       	ldi	r25, 0x00	; 0
   1696c:	97 83       	std	Z+7, r25	; 0x07
   1696e:	86 83       	std	Z+6, r24	; 0x06
   16970:	f5 82       	std	Z+5, r15	; 0x05
   16972:	e4 82       	std	Z+4, r14	; 0x04
   16974:	8f e9       	ldi	r24, 0x9F	; 159
   16976:	98 e2       	ldi	r25, 0x28	; 40
   16978:	a0 e0       	ldi	r26, 0x00	; 0
   1697a:	81 83       	std	Z+1, r24	; 0x01
   1697c:	92 83       	std	Z+2, r25	; 0x02
   1697e:	a3 83       	std	Z+3, r26	; 0x03
   16980:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16984:	fe e7       	ldi	r31, 0x7E	; 126
   16986:	ef 16       	cp	r14, r31
   16988:	f1 04       	cpc	r15, r1
   1698a:	f1 f5       	brne	.+124    	; 0x16a08 <Amigo_Command+0xc6>
   1698c:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   16990:	90 e0       	ldi	r25, 0x00	; 0
   16992:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
   16996:	89 2b       	or	r24, r25
   16998:	09 f4       	brne	.+2      	; 0x1699c <Amigo_Command+0x5a>
   1699a:	86 c0       	rjmp	.+268    	; 0x16aa8 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1699c:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   169a0:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   169a4:	81 81       	ldd	r24, Z+1	; 0x01
   169a6:	90 e0       	ldi	r25, 0x00	; 0
   169a8:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
        status = EOI_FLAG;
   169ac:	80 e0       	ldi	r24, 0x00	; 0
   169ae:	91 e0       	ldi	r25, 0x01	; 1
   169b0:	9c 8f       	std	Y+28, r25	; 0x1c
   169b2:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   169b4:	ae 01       	movw	r20, r28
   169b6:	45 5e       	subi	r20, 0xE5	; 229
   169b8:	5f 4f       	sbci	r21, 0xFF	; 255
   169ba:	60 e0       	ldi	r22, 0x00	; 0
   169bc:	72 e0       	ldi	r23, 0x02	; 2
   169be:	86 ef       	ldi	r24, 0xF6	; 246
   169c0:	9c e1       	ldi	r25, 0x1C	; 28
   169c2:	0e 94 22 89 	call	0x11244	; 0x11244 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   169c6:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   169ca:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   169ce:	81 81       	ldd	r24, Z+1	; 0x01
   169d0:	90 e0       	ldi	r25, 0x00	; 0
   169d2:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   169d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   169d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   169da:	88 27       	eor	r24, r24
   169dc:	90 7d       	andi	r25, 0xD0	; 208
   169de:	89 2b       	or	r24, r25
   169e0:	09 f4       	brne	.+2      	; 0x169e4 <Amigo_Command+0xa2>
   169e2:	89 c2       	rjmp	.+1298   	; 0x16ef6 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   169e4:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   169e8:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   169ec:	81 e0       	ldi	r24, 0x01	; 1
   169ee:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   169f0:	87 81       	ldd	r24, Z+7	; 0x07
   169f2:	90 85       	ldd	r25, Z+8	; 0x08
   169f4:	80 62       	ori	r24, 0x20	; 32
   169f6:	90 87       	std	Z+8, r25	; 0x08
   169f8:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   169fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169fe:	80 ff       	sbrs	r24, 0
   16a00:	7a c2       	rjmp	.+1268   	; 0x16ef6 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16a02:	8d e7       	ldi	r24, 0x7D	; 125
   16a04:	98 e2       	ldi	r25, 0x28	; 40
   16a06:	8e c0       	rjmp	.+284    	; 0x16b24 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16a08:	ff e7       	ldi	r31, 0x7F	; 127
   16a0a:	ef 16       	cp	r14, r31
   16a0c:	f1 04       	cpc	r15, r1
   16a0e:	09 f0       	breq	.+2      	; 0x16a12 <Amigo_Command+0xd0>
   16a10:	4b c0       	rjmp	.+150    	; 0x16aa8 <Amigo_Command+0x166>
   16a12:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16a16:	90 e0       	ldi	r25, 0x00	; 0
   16a18:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   16a1c:	89 2b       	or	r24, r25
   16a1e:	09 f4       	brne	.+2      	; 0x16a22 <Amigo_Command+0xe0>
   16a20:	43 c0       	rjmp	.+134    	; 0x16aa8 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16a22:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16a26:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16a2a:	81 81       	ldd	r24, Z+1	; 0x01
   16a2c:	90 e0       	ldi	r25, 0x00	; 0
   16a2e:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16a32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a36:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16a38:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16a3c:	80 e0       	ldi	r24, 0x00	; 0
   16a3e:	91 e0       	ldi	r25, 0x01	; 1
   16a40:	9c 8f       	std	Y+28, r25	; 0x1c
   16a42:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16a44:	ae 01       	movw	r20, r28
   16a46:	45 5e       	subi	r20, 0xE5	; 229
   16a48:	5f 4f       	sbci	r21, 0xFF	; 255
   16a4a:	60 e0       	ldi	r22, 0x00	; 0
   16a4c:	72 e0       	ldi	r23, 0x02	; 2
   16a4e:	86 ef       	ldi	r24, 0xF6	; 246
   16a50:	9c e1       	ldi	r25, 0x1C	; 28
   16a52:	0e 94 80 88 	call	0x11100	; 0x11100 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16a56:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a5a:	87 ff       	sbrs	r24, 7
   16a5c:	04 c0       	rjmp	.+8      	; 0x16a66 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16a5e:	8d ec       	ldi	r24, 0xCD	; 205
   16a60:	95 e1       	ldi	r25, 0x15	; 21
   16a62:	0e 94 e2 82 	call	0x105c4	; 0x105c4 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16a66:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16a6a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16a6e:	81 81       	ldd	r24, Z+1	; 0x01
   16a70:	90 e0       	ldi	r25, 0x00	; 0
   16a72:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16a76:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16a78:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16a7a:	88 27       	eor	r24, r24
   16a7c:	90 7d       	andi	r25, 0xD0	; 208
   16a7e:	89 2b       	or	r24, r25
   16a80:	09 f4       	brne	.+2      	; 0x16a84 <Amigo_Command+0x142>
   16a82:	39 c2       	rjmp	.+1138   	; 0x16ef6 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16a84:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16a88:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16a8c:	81 e0       	ldi	r24, 0x01	; 1
   16a8e:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16a90:	87 81       	ldd	r24, Z+7	; 0x07
   16a92:	90 85       	ldd	r25, Z+8	; 0x08
   16a94:	80 62       	ori	r24, 0x20	; 32
   16a96:	90 87       	std	Z+8, r25	; 0x08
   16a98:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16a9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a9e:	80 ff       	sbrs	r24, 0
   16aa0:	2a c2       	rjmp	.+1108   	; 0x16ef6 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16aa2:	8c e5       	ldi	r24, 0x5C	; 92
   16aa4:	98 e2       	ldi	r25, 0x28	; 40
   16aa6:	3e c0       	rjmp	.+124    	; 0x16b24 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16aa8:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16aac:	90 e0       	ldi	r25, 0x00	; 0
   16aae:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   16ab2:	89 2b       	or	r24, r25
   16ab4:	19 f4       	brne	.+6      	; 0x16abc <Amigo_Command+0x17a>
        return(0);
   16ab6:	80 e0       	ldi	r24, 0x00	; 0
   16ab8:	90 e0       	ldi	r25, 0x00	; 0
   16aba:	25 c2       	rjmp	.+1098   	; 0x16f06 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16abc:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   16ac0:	90 e0       	ldi	r25, 0x00	; 0
   16ac2:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
   16ac6:	89 2b       	or	r24, r25
   16ac8:	b1 f7       	brne	.-20     	; 0x16ab6 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16aca:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16ace:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16ad2:	81 81       	ldd	r24, Z+1	; 0x01
   16ad4:	90 e0       	ldi	r25, 0x00	; 0
   16ad6:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16ada:	80 e0       	ldi	r24, 0x00	; 0
   16adc:	91 e0       	ldi	r25, 0x01	; 1
   16ade:	9c 8f       	std	Y+28, r25	; 0x1c
   16ae0:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16ae2:	ae 01       	movw	r20, r28
   16ae4:	45 5e       	subi	r20, 0xE5	; 229
   16ae6:	5f 4f       	sbci	r21, 0xFF	; 255
   16ae8:	60 e0       	ldi	r22, 0x00	; 0
   16aea:	72 e0       	ldi	r23, 0x02	; 2
   16aec:	86 ef       	ldi	r24, 0xF6	; 246
   16aee:	9c e1       	ldi	r25, 0x1C	; 28
   16af0:	0e 94 80 88 	call	0x11100	; 0x11100 <gpib_read_str>
   16af4:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16afa:	88 27       	eor	r24, r24
   16afc:	90 7d       	andi	r25, 0xD0	; 208
   16afe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16b02:	89 2b       	or	r24, r25
   16b04:	c1 f0       	breq	.+48     	; 0x16b36 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16b06:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16b0a:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16b0e:	81 e0       	ldi	r24, 0x01	; 1
   16b10:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16b12:	87 81       	ldd	r24, Z+7	; 0x07
   16b14:	90 85       	ldd	r25, Z+8	; 0x08
   16b16:	80 62       	ori	r24, 0x20	; 32
   16b18:	90 87       	std	Z+8, r25	; 0x08
   16b1a:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   16b1c:	20 ff       	sbrs	r18, 0
   16b1e:	eb c1       	rjmp	.+982    	; 0x16ef6 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16b20:	8b e3       	ldi	r24, 0x3B	; 59
   16b22:	98 e2       	ldi	r25, 0x28	; 40
   16b24:	a0 e0       	ldi	r26, 0x00	; 0
   16b26:	ed b7       	in	r30, 0x3d	; 61
   16b28:	fe b7       	in	r31, 0x3e	; 62
   16b2a:	81 83       	std	Z+1, r24	; 0x01
   16b2c:	92 83       	std	Z+2, r25	; 0x02
   16b2e:	a3 83       	std	Z+3, r26	; 0x03
   16b30:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16b34:	e0 c1       	rjmp	.+960    	; 0x16ef6 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16b36:	25 ff       	sbrs	r18, 5
   16b38:	0e c0       	rjmp	.+28     	; 0x16b56 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16b3a:	ed b7       	in	r30, 0x3d	; 61
   16b3c:	fe b7       	in	r31, 0x3e	; 62
   16b3e:	17 83       	std	Z+7, r17	; 0x07
   16b40:	06 83       	std	Z+6, r16	; 0x06
   16b42:	f5 82       	std	Z+5, r15	; 0x05
   16b44:	e4 82       	std	Z+4, r14	; 0x04
   16b46:	8c e0       	ldi	r24, 0x0C	; 12
   16b48:	98 e2       	ldi	r25, 0x28	; 40
   16b4a:	a0 e0       	ldi	r26, 0x00	; 0
   16b4c:	81 83       	std	Z+1, r24	; 0x01
   16b4e:	92 83       	std	Z+2, r25	; 0x02
   16b50:	a3 83       	std	Z+3, r26	; 0x03
   16b52:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            secondary, len);
#endif
    if(!len)
   16b56:	01 15       	cp	r16, r1
   16b58:	11 05       	cpc	r17, r1
   16b5a:	61 f4       	brne	.+24     	; 0x16b74 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   16b5c:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16b60:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16b64:	81 e0       	ldi	r24, 0x01	; 1
   16b66:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16b68:	87 81       	ldd	r24, Z+7	; 0x07
   16b6a:	90 85       	ldd	r25, Z+8	; 0x08
   16b6c:	80 62       	ori	r24, 0x20	; 32
   16b6e:	90 87       	std	Z+8, r25	; 0x08
   16b70:	87 83       	std	Z+7, r24	; 0x07
   16b72:	c1 c1       	rjmp	.+898    	; 0x16ef6 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   16b74:	60 91 f6 1c 	lds	r22, 0x1CF6	; 0x801cf6 <gpib_iobuff>

    if (secondary == 0x68)
   16b78:	f8 e6       	ldi	r31, 0x68	; 104
   16b7a:	ef 16       	cp	r14, r31
   16b7c:	f1 04       	cpc	r15, r1
   16b7e:	09 f0       	breq	.+2      	; 0x16b82 <Amigo_Command+0x240>
   16b80:	28 c1       	rjmp	.+592    	; 0x16dd2 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   16b82:	61 11       	cpse	r22, r1
   16b84:	2e c0       	rjmp	.+92     	; 0x16be2 <Amigo_Command+0x2a0>
   16b86:	02 30       	cpi	r16, 0x02	; 2
   16b88:	11 05       	cpc	r17, r1
   16b8a:	09 f0       	breq	.+2      	; 0x16b8e <Amigo_Command+0x24c>
   16b8c:	b9 c1       	rjmp	.+882    	; 0x16f00 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16b8e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b92:	85 ff       	sbrs	r24, 5
   16b94:	0a c0       	rjmp	.+20     	; 0x16baa <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   16b96:	8c ee       	ldi	r24, 0xEC	; 236
   16b98:	97 e2       	ldi	r25, 0x27	; 39
   16b9a:	a0 e0       	ldi	r26, 0x00	; 0
   16b9c:	ed b7       	in	r30, 0x3d	; 61
   16b9e:	fe b7       	in	r31, 0x3e	; 62
   16ba0:	81 83       	std	Z+1, r24	; 0x01
   16ba2:	92 83       	std	Z+2, r25	; 0x02
   16ba4:	a3 83       	std	Z+3, r26	; 0x03
   16ba6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16baa:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16bae:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16bb2:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16bb4:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16bb6:	10 86       	std	Z+8, r1	; 0x08
   16bb8:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   16bba:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16bbc:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   16bc0:	98 2f       	mov	r25, r24
   16bc2:	92 95       	swap	r25
   16bc4:	96 95       	lsr	r25
   16bc6:	96 95       	lsr	r25
   16bc8:	93 70       	andi	r25, 0x03	; 3
   16bca:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   16bcc:	8f 73       	andi	r24, 0x3F	; 63
   16bce:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16bd0:	ce 01       	movw	r24, r28
   16bd2:	0a 96       	adiw	r24, 0x0a	; 10
   16bd4:	db d9       	rcall	.-3146   	; 0x15f8c <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16bd6:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16bda:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16bde:	85 e0       	ldi	r24, 0x05	; 5
   16be0:	19 c1       	rjmp	.+562    	; 0x16e14 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16be2:	62 30       	cpi	r22, 0x02	; 2
   16be4:	09 f0       	breq	.+2      	; 0x16be8 <Amigo_Command+0x2a6>
   16be6:	3f c0       	rjmp	.+126    	; 0x16c66 <Amigo_Command+0x324>
   16be8:	05 30       	cpi	r16, 0x05	; 5
   16bea:	11 05       	cpc	r17, r1
   16bec:	d1 f4       	brne	.+52     	; 0x16c22 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16bee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bf2:	85 ff       	sbrs	r24, 5
   16bf4:	0a c0       	rjmp	.+20     	; 0x16c0a <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   16bf6:	88 ed       	ldi	r24, 0xD8	; 216
   16bf8:	97 e2       	ldi	r25, 0x27	; 39
   16bfa:	a0 e0       	ldi	r26, 0x00	; 0
   16bfc:	ed b7       	in	r30, 0x3d	; 61
   16bfe:	fe b7       	in	r31, 0x3e	; 62
   16c00:	81 83       	std	Z+1, r24	; 0x01
   16c02:	92 83       	std	Z+2, r25	; 0x02
   16c04:	a3 83       	std	Z+3, r26	; 0x03
   16c06:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16c0a:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   16c0e:	85 de       	rcall	.-758    	; 0x1691a <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16c10:	80 91 f8 1c 	lds	r24, 0x1CF8	; 0x801cf8 <gpib_iobuff+0x2>
   16c14:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16c16:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x3>
   16c1a:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16c1c:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x4>
   16c20:	1d c0       	rjmp	.+58     	; 0x16c5c <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16c22:	06 30       	cpi	r16, 0x06	; 6
   16c24:	11 05       	cpc	r17, r1
   16c26:	09 f0       	breq	.+2      	; 0x16c2a <Amigo_Command+0x2e8>
   16c28:	6b c1       	rjmp	.+726    	; 0x16f00 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16c2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c2e:	85 ff       	sbrs	r24, 5
   16c30:	0a c0       	rjmp	.+20     	; 0x16c46 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   16c32:	84 ec       	ldi	r24, 0xC4	; 196
   16c34:	97 e2       	ldi	r25, 0x27	; 39
   16c36:	a0 e0       	ldi	r26, 0x00	; 0
   16c38:	ed b7       	in	r30, 0x3d	; 61
   16c3a:	fe b7       	in	r31, 0x3e	; 62
   16c3c:	81 83       	std	Z+1, r24	; 0x01
   16c3e:	92 83       	std	Z+2, r25	; 0x02
   16c40:	a3 83       	std	Z+3, r26	; 0x03
   16c42:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16c46:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   16c4a:	67 de       	rcall	.-818    	; 0x1691a <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   16c4c:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x3>
   16c50:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16c52:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x4>
   16c56:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16c58:	80 91 fb 1c 	lds	r24, 0x1CFB	; 0x801cfb <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   16c5c:	8f 87       	std	Y+15, r24	; 0x0f
   16c5e:	ce 01       	movw	r24, r28
   16c60:	0a 96       	adiw	r24, 0x0a	; 10
   16c62:	94 d9       	rcall	.-3288   	; 0x15f8c <amigo_seek>
   16c64:	d8 c0       	rjmp	.+432    	; 0x16e16 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   16c66:	63 30       	cpi	r22, 0x03	; 3
   16c68:	e9 f4       	brne	.+58     	; 0x16ca4 <Amigo_Command+0x362>
   16c6a:	02 30       	cpi	r16, 0x02	; 2
   16c6c:	11 05       	cpc	r17, r1
   16c6e:	09 f0       	breq	.+2      	; 0x16c72 <Amigo_Command+0x330>
   16c70:	47 c1       	rjmp	.+654    	; 0x16f00 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16c72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c76:	85 ff       	sbrs	r24, 5
   16c78:	0a c0       	rjmp	.+20     	; 0x16c8e <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   16c7a:	8b e9       	ldi	r24, 0x9B	; 155
   16c7c:	97 e2       	ldi	r25, 0x27	; 39
   16c7e:	a0 e0       	ldi	r26, 0x00	; 0
   16c80:	ed b7       	in	r30, 0x3d	; 61
   16c82:	fe b7       	in	r31, 0x3e	; 62
   16c84:	81 83       	std	Z+1, r24	; 0x01
   16c86:	92 83       	std	Z+2, r25	; 0x02
   16c88:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16c8a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16c8e:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            amigo_request_status();
   16c92:	43 de       	rcall	.-890    	; 0x1691a <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   16c94:	39 d8       	rcall	.-3982   	; 0x15d08 <amigo_request_status>
   16c96:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16c9a:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16c9e:	83 e0       	ldi	r24, 0x03	; 3
   16ca0:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   16ca2:	29 c1       	rjmp	.+594    	; 0x16ef6 <Amigo_Command+0x5b4>
   16ca4:	65 30       	cpi	r22, 0x05	; 5
   16ca6:	d9 f4       	brne	.+54     	; 0x16cde <Amigo_Command+0x39c>
   16ca8:	02 30       	cpi	r16, 0x02	; 2
   16caa:	11 05       	cpc	r17, r1
   16cac:	09 f0       	breq	.+2      	; 0x16cb0 <Amigo_Command+0x36e>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16cae:	28 c1       	rjmp	.+592    	; 0x16f00 <Amigo_Command+0x5be>
   16cb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cb4:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   16cb6:	0a c0       	rjmp	.+20     	; 0x16ccc <Amigo_Command+0x38a>
   16cb8:	8a e7       	ldi	r24, 0x7A	; 122
   16cba:	97 e2       	ldi	r25, 0x27	; 39
   16cbc:	a0 e0       	ldi	r26, 0x00	; 0
   16cbe:	ed b7       	in	r30, 0x3d	; 61
   16cc0:	fe b7       	in	r31, 0x3e	; 62
   16cc2:	81 83       	std	Z+1, r24	; 0x01
   16cc4:	92 83       	std	Z+2, r25	; 0x02
   16cc6:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16cc8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16ccc:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   16cd0:	24 de       	rcall	.-952    	; 0x1691a <amigo_check_unit>
   16cd2:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16cd6:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16cda:	86 e0       	ldi	r24, 0x06	; 6
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   16cdc:	e7 c0       	rjmp	.+462    	; 0x16eac <Amigo_Command+0x56a>
   16cde:	67 30       	cpi	r22, 0x07	; 7
   16ce0:	f9 f4       	brne	.+62     	; 0x16d20 <Amigo_Command+0x3de>
   16ce2:	04 30       	cpi	r16, 0x04	; 4
   16ce4:	11 05       	cpc	r17, r1
   16ce6:	09 f0       	breq	.+2      	; 0x16cea <Amigo_Command+0x3a8>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ce8:	0b c1       	rjmp	.+534    	; 0x16f00 <Amigo_Command+0x5be>
   16cea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cee:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   16cf0:	0a c0       	rjmp	.+20     	; 0x16d06 <Amigo_Command+0x3c4>
   16cf2:	8a e6       	ldi	r24, 0x6A	; 106
   16cf4:	97 e2       	ldi	r25, 0x27	; 39
   16cf6:	a0 e0       	ldi	r26, 0x00	; 0
   16cf8:	ed b7       	in	r30, 0x3d	; 61
   16cfa:	fe b7       	in	r31, 0x3e	; 62
   16cfc:	81 83       	std	Z+1, r24	; 0x01
   16cfe:	92 83       	std	Z+2, r25	; 0x02
   16d00:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16d02:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16d06:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   16d0a:	07 de       	rcall	.-1010   	; 0x1691a <amigo_check_unit>
   16d0c:	80 91 f8 1c 	lds	r24, 0x1CF8	; 0x801cf8 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   16d10:	90 e0       	ldi	r25, 0x00	; 0
   16d12:	98 2f       	mov	r25, r24
   16d14:	88 27       	eor	r24, r24
   16d16:	20 91 f9 1c 	lds	r18, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x3>
   16d1a:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   16d1c:	62 d9       	rcall	.-3388   	; 0x15fe2 <amigo_verify>
   16d1e:	f3 c0       	rjmp	.+486    	; 0x16f06 <Amigo_Command+0x5c4>
   16d20:	68 30       	cpi	r22, 0x08	; 8
   16d22:	d9 f4       	brne	.+54     	; 0x16d5a <Amigo_Command+0x418>
   16d24:	02 30       	cpi	r16, 0x02	; 2
   16d26:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16d28:	09 f0       	breq	.+2      	; 0x16d2c <Amigo_Command+0x3ea>
   16d2a:	ea c0       	rjmp	.+468    	; 0x16f00 <Amigo_Command+0x5be>
   16d2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   16d30:	85 ff       	sbrs	r24, 5
   16d32:	0a c0       	rjmp	.+20     	; 0x16d48 <Amigo_Command+0x406>
   16d34:	88 e4       	ldi	r24, 0x48	; 72
   16d36:	97 e2       	ldi	r25, 0x27	; 39
   16d38:	a0 e0       	ldi	r26, 0x00	; 0
   16d3a:	ed b7       	in	r30, 0x3d	; 61
   16d3c:	fe b7       	in	r31, 0x3e	; 62
   16d3e:	81 83       	std	Z+1, r24	; 0x01
   16d40:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16d42:	a3 83       	std	Z+3, r26	; 0x03
   16d44:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16d48:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   16d4c:	e6 dd       	rcall	.-1076   	; 0x1691a <amigo_check_unit>
   16d4e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16d52:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   16d56:	88 e0       	ldi	r24, 0x08	; 8
   16d58:	5d c0       	rjmp	.+186    	; 0x16e14 <Amigo_Command+0x4d2>
   16d5a:	86 2f       	mov	r24, r22
   16d5c:	8f 7d       	andi	r24, 0xDF	; 223
   16d5e:	8b 30       	cpi	r24, 0x0B	; 11
   16d60:	d9 f4       	brne	.+54     	; 0x16d98 <Amigo_Command+0x456>
   16d62:	02 30       	cpi	r16, 0x02	; 2
   16d64:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16d66:	09 f0       	breq	.+2      	; 0x16d6a <Amigo_Command+0x428>
   16d68:	cb c0       	rjmp	.+406    	; 0x16f00 <Amigo_Command+0x5be>
   16d6a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   16d6e:	85 ff       	sbrs	r24, 5
   16d70:	0a c0       	rjmp	.+20     	; 0x16d86 <Amigo_Command+0x444>
   16d72:	8c e2       	ldi	r24, 0x2C	; 44
   16d74:	97 e2       	ldi	r25, 0x27	; 39
   16d76:	a0 e0       	ldi	r26, 0x00	; 0
   16d78:	ed b7       	in	r30, 0x3d	; 61
   16d7a:	fe b7       	in	r31, 0x3e	; 62
   16d7c:	81 83       	std	Z+1, r24	; 0x01
   16d7e:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16d80:	a3 83       	std	Z+3, r26	; 0x03
   16d82:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16d86:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   16d8a:	c7 dd       	rcall	.-1138   	; 0x1691a <amigo_check_unit>
   16d8c:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16d90:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   16d94:	8a e0       	ldi	r24, 0x0A	; 10
   16d96:	3e c0       	rjmp	.+124    	; 0x16e14 <Amigo_Command+0x4d2>
   16d98:	64 31       	cpi	r22, 0x14	; 20
   16d9a:	09 f0       	breq	.+2      	; 0x16d9e <Amigo_Command+0x45c>
   16d9c:	b1 c0       	rjmp	.+354    	; 0x16f00 <Amigo_Command+0x5be>
   16d9e:	02 30       	cpi	r16, 0x02	; 2
   16da0:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16da2:	09 f0       	breq	.+2      	; 0x16da6 <Amigo_Command+0x464>
   16da4:	ad c0       	rjmp	.+346    	; 0x16f00 <Amigo_Command+0x5be>
   16da6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   16daa:	85 ff       	sbrs	r24, 5
   16dac:	0a c0       	rjmp	.+20     	; 0x16dc2 <Amigo_Command+0x480>
   16dae:	83 e0       	ldi	r24, 0x03	; 3
   16db0:	97 e2       	ldi	r25, 0x27	; 39
   16db2:	a0 e0       	ldi	r26, 0x00	; 0
   16db4:	ed b7       	in	r30, 0x3d	; 61
   16db6:	fe b7       	in	r31, 0x3e	; 62
   16db8:	81 83       	std	Z+1, r24	; 0x01
   16dba:	92 83       	std	Z+2, r25	; 0x02
   16dbc:	a3 83       	std	Z+3, r26	; 0x03
#endif
            amigo_request_logical_address();
   16dbe:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   16dc2:	0e 94 76 ae 	call	0x15cec	; 0x15cec <amigo_request_logical_address>
   16dc6:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16dca:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   16dce:	84 e0       	ldi	r24, 0x04	; 4
   16dd0:	21 c0       	rjmp	.+66     	; 0x16e14 <Amigo_Command+0x4d2>
   16dd2:	f9 e6       	ldi	r31, 0x69	; 105
   16dd4:	ef 16       	cp	r14, r31
    {
        if(op == 0x08 && len == 2)
   16dd6:	f1 04       	cpc	r15, r1
   16dd8:	39 f5       	brne	.+78     	; 0x16e28 <Amigo_Command+0x4e6>
   16dda:	68 30       	cpi	r22, 0x08	; 8
   16ddc:	09 f0       	breq	.+2      	; 0x16de0 <Amigo_Command+0x49e>
   16dde:	90 c0       	rjmp	.+288    	; 0x16f00 <Amigo_Command+0x5be>
   16de0:	02 30       	cpi	r16, 0x02	; 2
   16de2:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16de4:	09 f0       	breq	.+2      	; 0x16de8 <Amigo_Command+0x4a6>
   16de6:	8c c0       	rjmp	.+280    	; 0x16f00 <Amigo_Command+0x5be>
   16de8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   16dec:	85 ff       	sbrs	r24, 5
   16dee:	0a c0       	rjmp	.+20     	; 0x16e04 <Amigo_Command+0x4c2>
   16df0:	83 ee       	ldi	r24, 0xE3	; 227
   16df2:	96 e2       	ldi	r25, 0x26	; 38
   16df4:	a0 e0       	ldi	r26, 0x00	; 0
   16df6:	ed b7       	in	r30, 0x3d	; 61
   16df8:	fe b7       	in	r31, 0x3e	; 62
   16dfa:	81 83       	std	Z+1, r24	; 0x01
   16dfc:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16dfe:	a3 83       	std	Z+3, r26	; 0x03
   16e00:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16e04:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   16e08:	88 dd       	rcall	.-1264   	; 0x1691a <amigo_check_unit>
   16e0a:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16e0e:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16e12:	89 e0       	ldi	r24, 0x09	; 9
   16e14:	80 83       	st	Z, r24
   16e16:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16e1a:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16e1e:	81 81       	ldd	r24, Z+1	; 0x01
   16e20:	90 e0       	ldi	r25, 0x00	; 0
   16e22:	0e 94 92 83 	call	0x10724	; 0x10724 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   16e26:	67 c0       	rjmp	.+206    	; 0x16ef6 <Amigo_Command+0x5b4>
   16e28:	fa e6       	ldi	r31, 0x6A	; 106
   16e2a:	ef 16       	cp	r14, r31
   16e2c:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   16e2e:	09 f0       	breq	.+2      	; 0x16e32 <Amigo_Command+0x4f0>
   16e30:	40 c0       	rjmp	.+128    	; 0x16eb2 <Amigo_Command+0x570>
   16e32:	68 30       	cpi	r22, 0x08	; 8
   16e34:	f1 f4       	brne	.+60     	; 0x16e72 <Amigo_Command+0x530>
   16e36:	02 30       	cpi	r16, 0x02	; 2
   16e38:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e3a:	09 f0       	breq	.+2      	; 0x16e3e <Amigo_Command+0x4fc>
   16e3c:	61 c0       	rjmp	.+194    	; 0x16f00 <Amigo_Command+0x5be>
   16e3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   16e42:	85 ff       	sbrs	r24, 5
   16e44:	0a c0       	rjmp	.+20     	; 0x16e5a <Amigo_Command+0x518>
   16e46:	88 eb       	ldi	r24, 0xB8	; 184
   16e48:	96 e2       	ldi	r25, 0x26	; 38
   16e4a:	a0 e0       	ldi	r26, 0x00	; 0
   16e4c:	ed b7       	in	r30, 0x3d	; 61
   16e4e:	fe b7       	in	r31, 0x3e	; 62
   16e50:	81 83       	std	Z+1, r24	; 0x01
   16e52:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16e54:	a3 83       	std	Z+3, r26	; 0x03
   16e56:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   16e5a:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   16e5e:	5d dd       	rcall	.-1350   	; 0x1691a <amigo_check_unit>
   16e60:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16e64:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
            amigo_request_status();
   16e68:	82 e0       	ldi	r24, 0x02	; 2
   16e6a:	80 83       	st	Z, r24
   16e6c:	0e 94 84 ae 	call	0x15d08	; 0x15d08 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   16e70:	42 c0       	rjmp	.+132    	; 0x16ef6 <Amigo_Command+0x5b4>
   16e72:	65 30       	cpi	r22, 0x05	; 5
   16e74:	09 f0       	breq	.+2      	; 0x16e78 <Amigo_Command+0x536>
   16e76:	44 c0       	rjmp	.+136    	; 0x16f00 <Amigo_Command+0x5be>
   16e78:	02 30       	cpi	r16, 0x02	; 2
   16e7a:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e7c:	09 f0       	breq	.+2      	; 0x16e80 <Amigo_Command+0x53e>
   16e7e:	40 c0       	rjmp	.+128    	; 0x16f00 <Amigo_Command+0x5be>
   16e80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   16e84:	85 ff       	sbrs	r24, 5
   16e86:	0a c0       	rjmp	.+20     	; 0x16e9c <Amigo_Command+0x55a>
   16e88:	89 e9       	ldi	r24, 0x99	; 153
   16e8a:	96 e2       	ldi	r25, 0x26	; 38
   16e8c:	a0 e0       	ldi	r26, 0x00	; 0
   16e8e:	ed b7       	in	r30, 0x3d	; 61
   16e90:	fe b7       	in	r31, 0x3e	; 62
   16e92:	81 83       	std	Z+1, r24	; 0x01
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16e94:	92 83       	std	Z+2, r25	; 0x02
   16e96:	a3 83       	std	Z+3, r26	; 0x03
   16e98:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   16e9c:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   16ea0:	3c dd       	rcall	.-1416   	; 0x1691a <amigo_check_unit>
   16ea2:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16ea6:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   16eaa:	87 e0       	ldi	r24, 0x07	; 7
   16eac:	80 83       	st	Z, r24
#endif
        }
    }
    else if (secondary == 0x6C)
   16eae:	ca d9       	rcall	.-3180   	; 0x16244 <amigo_buffered_read_command>
   16eb0:	2a c0       	rjmp	.+84     	; 0x16f06 <Amigo_Command+0x5c4>
   16eb2:	fc e6       	ldi	r31, 0x6C	; 108
   16eb4:	ef 16       	cp	r14, r31
    {
        if(op == 0x18 && len == 5)
   16eb6:	f1 04       	cpc	r15, r1
   16eb8:	d1 f4       	brne	.+52     	; 0x16eee <Amigo_Command+0x5ac>
   16eba:	68 31       	cpi	r22, 0x18	; 24
   16ebc:	09 f5       	brne	.+66     	; 0x16f00 <Amigo_Command+0x5be>
   16ebe:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ec0:	11 05       	cpc	r17, r1
   16ec2:	f1 f4       	brne	.+60     	; 0x16f00 <Amigo_Command+0x5be>
   16ec4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Format]\n");
   16ec8:	85 ff       	sbrs	r24, 5
   16eca:	0a c0       	rjmp	.+20     	; 0x16ee0 <Amigo_Command+0x59e>
   16ecc:	89 e8       	ldi	r24, 0x89	; 137
   16ece:	96 e2       	ldi	r25, 0x26	; 38
   16ed0:	a0 e0       	ldi	r26, 0x00	; 0
   16ed2:	ed b7       	in	r30, 0x3d	; 61
   16ed4:	fe b7       	in	r31, 0x3e	; 62
   16ed6:	81 83       	std	Z+1, r24	; 0x01
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16ed8:	92 83       	std	Z+2, r25	; 0x02
   16eda:	a3 83       	std	Z+3, r26	; 0x03
   16edc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   16ee0:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   16ee4:	1a dd       	rcall	.-1484   	; 0x1691a <amigo_check_unit>
   16ee6:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   16eea:	17 d9       	rcall	.-3538   	; 0x1611a <amigo_format>
   16eec:	04 c0       	rjmp	.+8      	; 0x16ef6 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   16eee:	f0 e7       	ldi	r31, 0x70	; 112
   16ef0:	ef 16       	cp	r14, r31
   16ef2:	f1 04       	cpc	r15, r1
   16ef4:	29 f4       	brne	.+10     	; 0x16f00 <Amigo_Command+0x5be>
   16ef6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    }
    return ( amigo_todo_op(secondary, op, len) );
   16ef8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16efa:	88 27       	eor	r24, r24
   16efc:	90 7d       	andi	r25, 0xD0	; 208
   16efe:	03 c0       	rjmp	.+6      	; 0x16f06 <Amigo_Command+0x5c4>
}
   16f00:	a8 01       	movw	r20, r16
   16f02:	8e 2d       	mov	r24, r14
   16f04:	ed db       	rcall	.-2086   	; 0x166e0 <amigo_todo_op>
   16f06:	6c 96       	adiw	r28, 0x1c	; 28
   16f08:	e6 e0       	ldi	r30, 0x06	; 6
   16f0a:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00016f0e <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   16f0e:	a9 e0       	ldi	r26, 0x09	; 9
   16f10:	b0 e0       	ldi	r27, 0x00	; 0
   16f12:	ed e8       	ldi	r30, 0x8D	; 141
   16f14:	f7 eb       	ldi	r31, 0xB7	; 183
   16f16:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   16f1a:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f20:	85 ff       	sbrs	r24, 5
   16f22:	16 c0       	rjmp	.+44     	; 0x16f50 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   16f24:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   16f28:	90 e0       	ldi	r25, 0x00	; 0
   16f2a:	ed b7       	in	r30, 0x3d	; 61
   16f2c:	fe b7       	in	r31, 0x3e	; 62
   16f2e:	91 87       	std	Z+9, r25	; 0x09
   16f30:	80 87       	std	Z+8, r24	; 0x08
   16f32:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16f36:	90 e0       	ldi	r25, 0x00	; 0
   16f38:	97 83       	std	Z+7, r25	; 0x07
   16f3a:	86 83       	std	Z+6, r24	; 0x06
   16f3c:	d5 83       	std	Z+5, r29	; 0x05
   16f3e:	c4 83       	std	Z+4, r28	; 0x04
   16f40:	87 e5       	ldi	r24, 0x57	; 87
   16f42:	96 e2       	ldi	r25, 0x26	; 38
   16f44:	a0 e0       	ldi	r26, 0x00	; 0
   16f46:	81 83       	std	Z+1, r24	; 0x01
   16f48:	92 83       	std	Z+2, r25	; 0x02
   16f4a:	a3 83       	std	Z+3, r26	; 0x03
   16f4c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   16f50:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   16f54:	8f 35       	cpi	r24, 0x5F	; 95
   16f56:	09 f4       	brne	.+2      	; 0x16f5a <Amigo_Execute+0x4c>
   16f58:	ad c0       	rjmp	.+346    	; 0x170b4 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   16f5a:	90 e0       	ldi	r25, 0x00	; 0
   16f5c:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
   16f60:	89 2b       	or	r24, r25
   16f62:	39 f0       	breq	.+14     	; 0x16f72 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   16f64:	ce 01       	movw	r24, r28
   16f66:	87 7f       	andi	r24, 0xF7	; 247
   16f68:	80 36       	cpi	r24, 0x60	; 96
   16f6a:	91 05       	cpc	r25, r1
   16f6c:	09 f0       	breq	.+2      	; 0x16f70 <Amigo_Execute+0x62>
   16f6e:	a2 c0       	rjmp	.+324    	; 0x170b4 <Amigo_Execute+0x1a6>
   16f70:	08 c0       	rjmp	.+16     	; 0x16f82 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   16f72:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16f76:	90 e0       	ldi	r25, 0x00	; 0
   16f78:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   16f7c:	89 2b       	or	r24, r25
   16f7e:	91 f7       	brne	.-28     	; 0x16f64 <Amigo_Execute+0x56>
   16f80:	99 c0       	rjmp	.+306    	; 0x170b4 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16f82:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   16f86:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   16f8a:	81 81       	ldd	r24, Z+1	; 0x01
   16f8c:	90 e0       	ldi	r25, 0x00	; 0
   16f8e:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>

    if(secondary == 0x60)
   16f92:	c0 36       	cpi	r28, 0x60	; 96
   16f94:	d1 05       	cpc	r29, r1
   16f96:	09 f0       	breq	.+2      	; 0x16f9a <Amigo_Execute+0x8c>
   16f98:	4e c0       	rjmp	.+156    	; 0x17036 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   16f9a:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   16f9e:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   16fa2:	e0 81       	ld	r30, Z
   16fa4:	8e 2f       	mov	r24, r30
   16fa6:	90 e0       	ldi	r25, 0x00	; 0
   16fa8:	8b 30       	cpi	r24, 0x0B	; 11
   16faa:	91 05       	cpc	r25, r1
   16fac:	08 f0       	brcs	.+2      	; 0x16fb0 <Amigo_Execute+0xa2>
   16fae:	41 c0       	rjmp	.+130    	; 0x17032 <Amigo_Execute+0x124>
   16fb0:	fc 01       	movw	r30, r24
   16fb2:	e0 52       	subi	r30, 0x20	; 32
   16fb4:	ff 4f       	sbci	r31, 0xFF	; 255
   16fb6:	0c 94 93 df 	jmp	0x1bf26	; 0x1bf26 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fbe:	85 ff       	sbrs	r24, 5
   16fc0:	18 c0       	rjmp	.+48     	; 0x16ff2 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   16fc2:	87 e3       	ldi	r24, 0x37	; 55
   16fc4:	96 e2       	ldi	r25, 0x26	; 38
   16fc6:	0d c0       	rjmp	.+26     	; 0x16fe2 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fc8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fcc:	85 ff       	sbrs	r24, 5
   16fce:	11 c0       	rjmp	.+34     	; 0x16ff2 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   16fd0:	86 e1       	ldi	r24, 0x16	; 22
   16fd2:	96 e2       	ldi	r25, 0x26	; 38
   16fd4:	06 c0       	rjmp	.+12     	; 0x16fe2 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fda:	85 ff       	sbrs	r24, 5
   16fdc:	0a c0       	rjmp	.+20     	; 0x16ff2 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   16fde:	87 ef       	ldi	r24, 0xF7	; 247
   16fe0:	95 e2       	ldi	r25, 0x25	; 37
   16fe2:	a0 e0       	ldi	r26, 0x00	; 0
   16fe4:	ed b7       	in	r30, 0x3d	; 61
   16fe6:	fe b7       	in	r31, 0x3e	; 62
   16fe8:	81 83       	std	Z+1, r24	; 0x01
   16fea:	92 83       	std	Z+2, r25	; 0x02
   16fec:	a3 83       	std	Z+3, r26	; 0x03
   16fee:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   16ff2:	b2 d9       	rcall	.-3228   	; 0x16358 <amigo_buffered_read_execute>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ff4:	61 c0       	rjmp	.+194    	; 0x170b8 <Amigo_Execute+0x1aa>
   16ff6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ffa:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   16ffc:	18 c0       	rjmp	.+48     	; 0x1702e <Amigo_Execute+0x120>
   16ffe:	85 ed       	ldi	r24, 0xD5	; 213
   17000:	95 e2       	ldi	r25, 0x25	; 37
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17002:	0d c0       	rjmp	.+26     	; 0x1701e <Amigo_Execute+0x110>
   17004:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17008:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   1700a:	11 c0       	rjmp	.+34     	; 0x1702e <Amigo_Execute+0x120>
   1700c:	89 eb       	ldi	r24, 0xB9	; 185
   1700e:	95 e2       	ldi	r25, 0x25	; 37
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17010:	06 c0       	rjmp	.+12     	; 0x1701e <Amigo_Execute+0x110>
   17012:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17016:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17018:	0a c0       	rjmp	.+20     	; 0x1702e <Amigo_Execute+0x120>
   1701a:	89 e9       	ldi	r24, 0x99	; 153
   1701c:	95 e2       	ldi	r25, 0x25	; 37
   1701e:	a0 e0       	ldi	r26, 0x00	; 0
   17020:	ed b7       	in	r30, 0x3d	; 61
   17022:	fe b7       	in	r31, 0x3e	; 62
   17024:	81 83       	std	Z+1, r24	; 0x01
   17026:	92 83       	std	Z+2, r25	; 0x02
   17028:	a3 83       	std	Z+3, r26	; 0x03
#endif
                return ( amigo_buffered_write() );
   1702a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1702e:	f8 d9       	rcall	.-3088   	; 0x16420 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17030:	43 c0       	rjmp	.+134    	; 0x170b8 <Amigo_Execute+0x1aa>
   17032:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17034:	3d c0       	rjmp	.+122    	; 0x170b0 <Amigo_Execute+0x1a2>
   17036:	c8 36       	cpi	r28, 0x68	; 104
   17038:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   1703a:	e1 f5       	brne	.+120    	; 0x170b4 <Amigo_Execute+0x1a6>
   1703c:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <AMIGOs>
   17040:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <AMIGOs+0x1>
   17044:	80 81       	ld	r24, Z
   17046:	82 30       	cpi	r24, 0x02	; 2
   17048:	81 f0       	breq	.+32     	; 0x1706a <Amigo_Execute+0x15c>
   1704a:	18 f4       	brcc	.+6      	; 0x17052 <Amigo_Execute+0x144>
   1704c:	88 23       	and	r24, r24
   1704e:	91 f1       	breq	.+100    	; 0x170b4 <Amigo_Execute+0x1a6>
   17050:	2e c0       	rjmp	.+92     	; 0x170ae <Amigo_Execute+0x1a0>
   17052:	83 30       	cpi	r24, 0x03	; 3
   17054:	19 f0       	breq	.+6      	; 0x1705c <Amigo_Execute+0x14e>
   17056:	84 30       	cpi	r24, 0x04	; 4
   17058:	c9 f0       	breq	.+50     	; 0x1708c <Amigo_Execute+0x17e>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1705a:	29 c0       	rjmp	.+82     	; 0x170ae <Amigo_Execute+0x1a0>
   1705c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17060:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17062:	11 c0       	rjmp	.+34     	; 0x17086 <Amigo_Execute+0x178>
   17064:	80 e7       	ldi	r24, 0x70	; 112
   17066:	95 e2       	ldi	r25, 0x25	; 37
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17068:	06 c0       	rjmp	.+12     	; 0x17076 <Amigo_Execute+0x168>
   1706a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1706e:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17070:	0a c0       	rjmp	.+20     	; 0x17086 <Amigo_Execute+0x178>
   17072:	85 e4       	ldi	r24, 0x45	; 69
   17074:	95 e2       	ldi	r25, 0x25	; 37
   17076:	a0 e0       	ldi	r26, 0x00	; 0
   17078:	ed b7       	in	r30, 0x3d	; 61
   1707a:	fe b7       	in	r31, 0x3e	; 62
   1707c:	81 83       	std	Z+1, r24	; 0x01
   1707e:	92 83       	std	Z+2, r25	; 0x02
   17080:	a3 83       	std	Z+3, r26	; 0x03
   17082:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
                return ( amigo_send_status() );
   17086:	0e 94 3f af 	call	0x15e7e	; 0x15e7e <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1708a:	16 c0       	rjmp	.+44     	; 0x170b8 <Amigo_Execute+0x1aa>
   1708c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17090:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17092:	0a c0       	rjmp	.+20     	; 0x170a8 <Amigo_Execute+0x19a>
   17094:	8c e1       	ldi	r24, 0x1C	; 28
   17096:	95 e2       	ldi	r25, 0x25	; 37
   17098:	a0 e0       	ldi	r26, 0x00	; 0
   1709a:	ed b7       	in	r30, 0x3d	; 61
   1709c:	fe b7       	in	r31, 0x3e	; 62
   1709e:	81 83       	std	Z+1, r24	; 0x01
   170a0:	92 83       	std	Z+2, r25	; 0x02
   170a2:	a3 83       	std	Z+3, r26	; 0x03
   170a4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   170a8:	0e 94 e1 ae 	call	0x15dc2	; 0x15dc2 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   170ac:	05 c0       	rjmp	.+10     	; 0x170b8 <Amigo_Execute+0x1aa>
   170ae:	88 e6       	ldi	r24, 0x68	; 104
   170b0:	b0 db       	rcall	.-2208   	; 0x16812 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   170b2:	02 c0       	rjmp	.+4      	; 0x170b8 <Amigo_Execute+0x1aa>
   170b4:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   170b6:	90 e0       	ldi	r25, 0x00	; 0
   170b8:	cd b7       	in	r28, 0x3d	; 61
   170ba:	de b7       	in	r29, 0x3e	; 62
   170bc:	29 96       	adiw	r28, 0x09	; 9
   170be:	e2 e0       	ldi	r30, 0x02	; 2
   170c0:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000170c4 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   170c4:	cf 93       	push	r28
   170c6:	df 93       	push	r29
   170c8:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   170ca:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   170ce:	90 e0       	ldi	r25, 0x00	; 0
   170d0:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
   170d4:	89 2b       	or	r24, r25
   170d6:	51 f0       	breq	.+20     	; 0x170ec <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   170d8:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   170dc:	8f 35       	cpi	r24, 0x5F	; 95
   170de:	71 f4       	brne	.+28     	; 0x170fc <AMIGO_COMMANDS+0x38>
   170e0:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   170e4:	90 e0       	ldi	r25, 0x00	; 0
   170e6:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   170ea:	08 c0       	rjmp	.+16     	; 0x170fc <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   170ec:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   170f0:	90 e0       	ldi	r25, 0x00	; 0
   170f2:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   170f6:	89 2b       	or	r24, r25
   170f8:	79 f7       	brne	.-34     	; 0x170d8 <AMIGO_COMMANDS+0x14>
   170fa:	76 c0       	rjmp	.+236    	; 0x171e8 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   170fc:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17100:	81 11       	cpse	r24, r1
   17102:	05 c0       	rjmp	.+10     	; 0x1710e <AMIGO_COMMANDS+0x4a>
   17104:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17108:	90 e0       	ldi	r25, 0x00	; 0
   1710a:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   1710e:	c0 36       	cpi	r28, 0x60	; 96
   17110:	99 f4       	brne	.+38     	; 0x17138 <AMIGO_COMMANDS+0x74>
   17112:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17116:	90 e0       	ldi	r25, 0x00	; 0
   17118:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
   1711c:	89 2b       	or	r24, r25
   1711e:	19 f0       	breq	.+6      	; 0x17126 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17120:	80 e6       	ldi	r24, 0x60	; 96
   17122:	90 e0       	ldi	r25, 0x00	; 0
   17124:	14 c0       	rjmp	.+40     	; 0x1714e <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17126:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1712a:	90 e0       	ldi	r25, 0x00	; 0
   1712c:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   17130:	89 2b       	or	r24, r25
   17132:	09 f4       	brne	.+2      	; 0x17136 <AMIGO_COMMANDS+0x72>
   17134:	59 c0       	rjmp	.+178    	; 0x171e8 <AMIGO_COMMANDS+0x124>
   17136:	f4 cf       	rjmp	.-24     	; 0x17120 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17138:	c8 36       	cpi	r28, 0x68	; 104
   1713a:	c1 f4       	brne	.+48     	; 0x1716c <AMIGO_COMMANDS+0xa8>
   1713c:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17140:	90 e0       	ldi	r25, 0x00	; 0
   17142:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
   17146:	89 2b       	or	r24, r25
   17148:	21 f0       	breq	.+8      	; 0x17152 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   1714a:	88 e6       	ldi	r24, 0x68	; 104
   1714c:	90 e0       	ldi	r25, 0x00	; 0
   1714e:	df de       	rcall	.-578    	; 0x16f0e <Amigo_Execute>
   17150:	0b c0       	rjmp	.+22     	; 0x17168 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17152:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17156:	90 e0       	ldi	r25, 0x00	; 0
   17158:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   1715c:	89 2b       	or	r24, r25
   1715e:	09 f4       	brne	.+2      	; 0x17162 <AMIGO_COMMANDS+0x9e>
   17160:	43 c0       	rjmp	.+134    	; 0x171e8 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17162:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17164:	90 e0       	ldi	r25, 0x00	; 0
   17166:	ed db       	rcall	.-2086   	; 0x16942 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17168:	ec 01       	movw	r28, r24
   1716a:	40 c0       	rjmp	.+128    	; 0x171ec <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   1716c:	c9 36       	cpi	r28, 0x69	; 105
   1716e:	51 f4       	brne	.+20     	; 0x17184 <AMIGO_COMMANDS+0xc0>
   17170:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17174:	90 e0       	ldi	r25, 0x00	; 0
   17176:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   1717a:	89 2b       	or	r24, r25
   1717c:	a9 f1       	breq	.+106    	; 0x171e8 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1717e:	89 e6       	ldi	r24, 0x69	; 105
   17180:	90 e0       	ldi	r25, 0x00	; 0
   17182:	f1 cf       	rjmp	.-30     	; 0x17166 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17184:	ca 36       	cpi	r28, 0x6A	; 106
   17186:	51 f4       	brne	.+20     	; 0x1719c <AMIGO_COMMANDS+0xd8>
   17188:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1718c:	90 e0       	ldi	r25, 0x00	; 0
   1718e:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   17192:	89 2b       	or	r24, r25
   17194:	49 f1       	breq	.+82     	; 0x171e8 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17196:	8a e6       	ldi	r24, 0x6A	; 106
   17198:	90 e0       	ldi	r25, 0x00	; 0
   1719a:	e5 cf       	rjmp	.-54     	; 0x17166 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   1719c:	cc 36       	cpi	r28, 0x6C	; 108
   1719e:	51 f4       	brne	.+20     	; 0x171b4 <AMIGO_COMMANDS+0xf0>
   171a0:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   171a4:	90 e0       	ldi	r25, 0x00	; 0
   171a6:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   171aa:	89 2b       	or	r24, r25
   171ac:	e9 f0       	breq	.+58     	; 0x171e8 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   171ae:	8c e6       	ldi	r24, 0x6C	; 108
   171b0:	90 e0       	ldi	r25, 0x00	; 0
   171b2:	d9 cf       	rjmp	.-78     	; 0x17166 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   171b4:	c0 37       	cpi	r28, 0x70	; 112
   171b6:	c1 f4       	brne	.+48     	; 0x171e8 <AMIGO_COMMANDS+0x124>
   171b8:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   171bc:	90 e0       	ldi	r25, 0x00	; 0
   171be:	0e 94 28 8a 	call	0x11450	; 0x11450 <AMIGO_is_MTA>
   171c2:	ec 01       	movw	r28, r24
   171c4:	89 2b       	or	r24, r25
   171c6:	51 f0       	breq	.+20     	; 0x171dc <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   171c8:	e0 91 71 19 	lds	r30, 0x1971	; 0x801971 <AMIGOp>
   171cc:	f0 91 72 19 	lds	r31, 0x1972	; 0x801972 <AMIGOp+0x1>
   171d0:	81 81       	ldd	r24, Z+1	; 0x01
   171d2:	90 e0       	ldi	r25, 0x00	; 0
   171d4:	0e 94 c8 83 	call	0x10790	; 0x10790 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   171d8:	fa d9       	rcall	.-3084   	; 0x165ce <amigo_cmd_dsj>
   171da:	c6 cf       	rjmp	.-116    	; 0x17168 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   171dc:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   171e0:	90 e0       	ldi	r25, 0x00	; 0
   171e2:	0e 94 17 8a 	call	0x1142e	; 0x1142e <AMIGO_is_MLA>
   171e6:	02 c0       	rjmp	.+4      	; 0x171ec <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   171e8:	c0 e0       	ldi	r28, 0x00	; 0
   171ea:	d0 e0       	ldi	r29, 0x00	; 0
}
   171ec:	ce 01       	movw	r24, r28
   171ee:	df 91       	pop	r29
   171f0:	cf 91       	pop	r28
   171f2:	08 95       	ret

000171f4 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   171f4:	ea ea       	ldi	r30, 0xAA	; 170
   171f6:	f9 e1       	ldi	r31, 0x19	; 25
   171f8:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   171fa:	10 82       	st	Z, r1
   171fc:	11 82       	std	Z+1, r1	; 0x01
   171fe:	12 82       	std	Z+2, r1	; 0x02
   17200:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17202:	15 82       	std	Z+5, r1	; 0x05
   17204:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17206:	12 86       	std	Z+10, r1	; 0x0a
   17208:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   1720a:	14 86       	std	Z+12, r1	; 0x0c
   1720c:	13 86       	std	Z+11, r1	; 0x0b
   1720e:	08 95       	ret

00017210 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17210:	cf 93       	push	r28
   17212:	df 93       	push	r29
   17214:	ad b7       	in	r26, 0x3d	; 61
   17216:	be b7       	in	r27, 0x3e	; 62
   17218:	17 97       	sbiw	r26, 0x07	; 7
   1721a:	0f b6       	in	r0, 0x3f	; 63
   1721c:	f8 94       	cli
   1721e:	be bf       	out	0x3e, r27	; 62
   17220:	0f be       	out	0x3f, r0	; 63
   17222:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17224:	20 91 b3 19 	lds	r18, 0x19B3	; 0x8019b3 <plot+0x9>
   17228:	30 91 b4 19 	lds	r19, 0x19B4	; 0x8019b4 <plot+0xa>
   1722c:	21 15       	cp	r18, r1
   1722e:	31 05       	cpc	r19, r1
   17230:	09 f4       	brne	.+2      	; 0x17234 <receive_plot_flush+0x24>
   17232:	45 c0       	rjmp	.+138    	; 0x172be <receive_plot_flush+0xae>
   17234:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x4>
   17238:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0x5>
   1723c:	00 97       	sbiw	r24, 0x00	; 0
   1723e:	09 f4       	brne	.+2      	; 0x17242 <receive_plot_flush+0x32>
   17240:	40 c0       	rjmp	.+128    	; 0x172c2 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17242:	ac 01       	movw	r20, r24
   17244:	61 e0       	ldi	r22, 0x01	; 1
   17246:	70 e0       	ldi	r23, 0x00	; 0
   17248:	80 91 b5 19 	lds	r24, 0x19B5	; 0x8019b5 <plot+0xb>
   1724c:	90 91 b6 19 	lds	r25, 0x19B6	; 0x8019b6 <plot+0xc>
   17250:	0e 94 de 79 	call	0xf3bc	; 0xf3bc <fwrite>
   17254:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17256:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x4>
   1725a:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0x5>
   1725e:	c8 17       	cp	r28, r24
   17260:	d9 07       	cpc	r29, r25
   17262:	09 f1       	breq	.+66     	; 0x172a6 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17264:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17268:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1726c:	81 72       	andi	r24, 0x21	; 33
   1726e:	99 27       	eor	r25, r25
   17270:	89 2b       	or	r24, r25
   17272:	b1 f0       	breq	.+44     	; 0x172a0 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17274:	87 ed       	ldi	r24, 0xD7	; 215
   17276:	95 e1       	ldi	r25, 0x15	; 21
   17278:	0e 94 e7 75 	call	0xebce	; 0xebce <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   1727c:	ed b7       	in	r30, 0x3d	; 61
   1727e:	fe b7       	in	r31, 0x3e	; 62
   17280:	d7 83       	std	Z+7, r29	; 0x07
   17282:	c6 83       	std	Z+6, r28	; 0x06
   17284:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x4>
   17288:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0x5>
   1728c:	95 83       	std	Z+5, r25	; 0x05
   1728e:	84 83       	std	Z+4, r24	; 0x04
   17290:	8c e8       	ldi	r24, 0x8C	; 140
   17292:	9d e2       	ldi	r25, 0x2D	; 45
   17294:	a0 e0       	ldi	r26, 0x00	; 0
   17296:	81 83       	std	Z+1, r24	; 0x01
   17298:	92 83       	std	Z+2, r25	; 0x02
   1729a:	a3 83       	std	Z+3, r26	; 0x03
   1729c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        }
        return(-1);
   172a0:	8f ef       	ldi	r24, 0xFF	; 255
   172a2:	9f ef       	ldi	r25, 0xFF	; 255
   172a4:	0e c0       	rjmp	.+28     	; 0x172c2 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   172a6:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <plot+0x9>
   172aa:	90 91 b4 19 	lds	r25, 0x19B4	; 0x8019b4 <plot+0xa>
   172ae:	0e 94 31 74 	call	0xe862	; 0xe862 <fileno>
    if(fno < 0)
   172b2:	97 fd       	sbrc	r25, 7
   172b4:	f5 cf       	rjmp	.-22     	; 0x172a0 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   172b6:	0e 94 28 79 	call	0xf250	; 0xf250 <syncfs>
    return (ret);
   172ba:	ce 01       	movw	r24, r28
   172bc:	02 c0       	rjmp	.+4      	; 0x172c2 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   172be:	80 e0       	ldi	r24, 0x00	; 0
   172c0:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   172c2:	cd b7       	in	r28, 0x3d	; 61
   172c4:	de b7       	in	r29, 0x3e	; 62
   172c6:	27 96       	adiw	r28, 0x07	; 7
   172c8:	e2 e0       	ldi	r30, 0x02	; 2
   172ca:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000172ce <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   172ce:	ad b7       	in	r26, 0x3d	; 61
   172d0:	be b7       	in	r27, 0x3e	; 62
   172d2:	17 97       	sbiw	r26, 0x07	; 7
   172d4:	0f b6       	in	r0, 0x3f	; 63
   172d6:	f8 94       	cli
   172d8:	be bf       	out	0x3e, r27	; 62
   172da:	0f be       	out	0x3f, r0	; 63
    if( receive_plot_flush() < 0 )
   172dc:	ad bf       	out	0x3d, r26	; 61
   172de:	98 df       	rcall	.-208    	; 0x17210 <receive_plot_flush>
   172e0:	97 ff       	sbrs	r25, 7
        plot.error = 1;
   172e2:	03 c0       	rjmp	.+6      	; 0x172ea <printer_close+0x1c>
   172e4:	81 e0       	ldi	r24, 0x01	; 1
   172e6:	80 93 b2 19 	sts	0x19B2, r24	; 0x8019b2 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   172ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   172f2:	81 72       	andi	r24, 0x21	; 33
   172f4:	99 27       	eor	r25, r25
   172f6:	89 2b       	or	r24, r25
    {
        if(plot.error)
   172f8:	71 f0       	breq	.+28     	; 0x17316 <printer_close+0x48>
   172fa:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <plot+0x8>
   172fe:	88 23       	and	r24, r24
            printf("ERROR durring write\n");
   17300:	51 f0       	breq	.+20     	; 0x17316 <printer_close+0x48>
   17302:	8b eb       	ldi	r24, 0xBB	; 187
   17304:	9d e2       	ldi	r25, 0x2D	; 45
   17306:	a0 e0       	ldi	r26, 0x00	; 0
   17308:	ed b7       	in	r30, 0x3d	; 61
   1730a:	fe b7       	in	r31, 0x3e	; 62
   1730c:	81 83       	std	Z+1, r24	; 0x01
   1730e:	92 83       	std	Z+2, r25	; 0x02
   17310:	a3 83       	std	Z+3, r26	; 0x03
   17312:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }

    if(plot.fp)
   17316:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <plot+0x9>
   1731a:	90 91 b4 19 	lds	r25, 0x19B4	; 0x8019b4 <plot+0xa>
   1731e:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(plot.fp);
   17320:	e1 f0       	breq	.+56     	; 0x1735a <printer_close+0x8c>
   17322:	0e 94 60 7a 	call	0xf4c0	; 0xf4c0 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17326:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1732a:	85 ff       	sbrs	r24, 5
            printf("\nDONE: %08ld\n",plot.count);
   1732c:	16 c0       	rjmp	.+44     	; 0x1735a <printer_close+0x8c>
   1732e:	80 91 aa 19 	lds	r24, 0x19AA	; 0x8019aa <plot>
   17332:	90 91 ab 19 	lds	r25, 0x19AB	; 0x8019ab <plot+0x1>
   17336:	a0 91 ac 19 	lds	r26, 0x19AC	; 0x8019ac <plot+0x2>
   1733a:	b0 91 ad 19 	lds	r27, 0x19AD	; 0x8019ad <plot+0x3>
   1733e:	ed b7       	in	r30, 0x3d	; 61
   17340:	fe b7       	in	r31, 0x3e	; 62
   17342:	84 83       	std	Z+4, r24	; 0x04
   17344:	95 83       	std	Z+5, r25	; 0x05
   17346:	a6 83       	std	Z+6, r26	; 0x06
   17348:	b7 83       	std	Z+7, r27	; 0x07
   1734a:	8d ea       	ldi	r24, 0xAD	; 173
   1734c:	9d e2       	ldi	r25, 0x2D	; 45
   1734e:	a0 e0       	ldi	r26, 0x00	; 0
   17350:	81 83       	std	Z+1, r24	; 0x01
   17352:	92 83       	std	Z+2, r25	; 0x02
   17354:	a3 83       	std	Z+3, r26	; 0x03
   17356:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }

    if(plot.buf)
   1735a:	80 91 b5 19 	lds	r24, 0x19B5	; 0x8019b5 <plot+0xb>
   1735e:	90 91 b6 19 	lds	r25, 0x19B6	; 0x8019b6 <plot+0xc>
   17362:	00 97       	sbiw	r24, 0x00	; 0
        safefree(plot.buf);
   17364:	11 f0       	breq	.+4      	; 0x1736a <printer_close+0x9c>
    printer_init();
   17366:	0e 94 28 25 	call	0x4a50	; 0x4a50 <safefree>
}
   1736a:	44 df       	rcall	.-376    	; 0x171f4 <printer_init>
   1736c:	ad b7       	in	r26, 0x3d	; 61
   1736e:	be b7       	in	r27, 0x3e	; 62
   17370:	17 96       	adiw	r26, 0x07	; 7
   17372:	0f b6       	in	r0, 0x3f	; 63
   17374:	f8 94       	cli
   17376:	be bf       	out	0x3e, r27	; 62
   17378:	0f be       	out	0x3f, r0	; 63
   1737a:	ad bf       	out	0x3d, r26	; 61
   1737c:	08 95       	ret

0001737e <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   1737e:	ad e5       	ldi	r26, 0x5D	; 93
   17380:	b0 e0       	ldi	r27, 0x00	; 0
   17382:	e5 ec       	ldi	r30, 0xC5	; 197
   17384:	f9 eb       	ldi	r31, 0xB9	; 185
   17386:	0c 94 ce df 	jmp	0x1bf9c	; 0x1bf9c <__prologue_saves__+0x18>
   1738a:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   1738c:	89 2b       	or	r24, r25
   1738e:	09 f0       	breq	.+2      	; 0x17392 <printer_open+0x14>
   17390:	4f c0       	rjmp	.+158    	; 0x17430 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17392:	be 01       	movw	r22, r28
   17394:	6e 5a       	subi	r22, 0xAE	; 174
   17396:	7f 4f       	sbci	r23, 0xFF	; 255
   17398:	80 e0       	ldi	r24, 0x00	; 0
   1739a:	90 e0       	ldi	r25, 0x00	; 0
   1739c:	0e 94 ed 30 	call	0x61da	; 0x61da <clock_gettime>
        seconds = ts.tv_sec;
   173a0:	66 96       	adiw	r28, 0x16	; 22
   173a2:	8c ad       	ldd	r24, Y+60	; 0x3c
   173a4:	9d ad       	ldd	r25, Y+61	; 0x3d
   173a6:	ae ad       	ldd	r26, Y+62	; 0x3e
   173a8:	bf ad       	ldd	r27, Y+63	; 0x3f
   173aa:	66 97       	sbiw	r28, 0x16	; 22
   173ac:	6e 96       	adiw	r28, 0x1e	; 30
   173ae:	8c af       	std	Y+60, r24	; 0x3c
   173b0:	9d af       	std	Y+61, r25	; 0x3d
   173b2:	ae af       	std	Y+62, r26	; 0x3e
   173b4:	bf af       	std	Y+63, r27	; 0x3f
   173b6:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   173b8:	ce 01       	movw	r24, r28
   173ba:	86 5a       	subi	r24, 0xA6	; 166
   173bc:	9f 4f       	sbci	r25, 0xFF	; 255
   173be:	0e 94 d7 34 	call	0x69ae	; 0x69ae <gmtime>
   173c2:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   173c4:	fc 01       	movw	r30, r24
   173c6:	e6 80       	ldd	r14, Z+6	; 0x06
   173c8:	f7 80       	ldd	r15, Z+7	; 0x07
   173ca:	80 85       	ldd	r24, Z+8	; 0x08
   173cc:	91 85       	ldd	r25, Z+9	; 0x09
   173ce:	0e 94 b3 33 	call	0x6766	; 0x6766 <tm_mon_to_ascii>
   173d2:	f8 01       	movw	r30, r16
   173d4:	20 81       	ld	r18, Z
   173d6:	31 81       	ldd	r19, Z+1	; 0x01
   173d8:	ed b7       	in	r30, 0x3d	; 61
   173da:	fe b7       	in	r31, 0x3e	; 62
   173dc:	31 8b       	std	Z+17, r19	; 0x11
   173de:	20 8b       	std	Z+16, r18	; 0x10
   173e0:	f8 01       	movw	r30, r16
   173e2:	22 81       	ldd	r18, Z+2	; 0x02
   173e4:	33 81       	ldd	r19, Z+3	; 0x03
   173e6:	ed b7       	in	r30, 0x3d	; 61
   173e8:	fe b7       	in	r31, 0x3e	; 62
   173ea:	37 87       	std	Z+15, r19	; 0x0f
   173ec:	26 87       	std	Z+14, r18	; 0x0e
   173ee:	f8 01       	movw	r30, r16
   173f0:	24 81       	ldd	r18, Z+4	; 0x04
   173f2:	35 81       	ldd	r19, Z+5	; 0x05
   173f4:	ed b7       	in	r30, 0x3d	; 61
   173f6:	fe b7       	in	r31, 0x3e	; 62
   173f8:	35 87       	std	Z+13, r19	; 0x0d
   173fa:	24 87       	std	Z+12, r18	; 0x0c
   173fc:	f8 01       	movw	r30, r16
   173fe:	22 85       	ldd	r18, Z+10	; 0x0a
   17400:	33 85       	ldd	r19, Z+11	; 0x0b
   17402:	24 59       	subi	r18, 0x94	; 148
   17404:	38 4f       	sbci	r19, 0xF8	; 248
   17406:	ed b7       	in	r30, 0x3d	; 61
   17408:	fe b7       	in	r31, 0x3e	; 62
   1740a:	33 87       	std	Z+11, r19	; 0x0b
   1740c:	22 87       	std	Z+10, r18	; 0x0a
   1740e:	91 87       	std	Z+9, r25	; 0x09
   17410:	80 87       	std	Z+8, r24	; 0x08
   17412:	f7 82       	std	Z+7, r15	; 0x07
   17414:	e6 82       	std	Z+6, r14	; 0x06
   17416:	82 ef       	ldi	r24, 0xF2	; 242
   17418:	9d e2       	ldi	r25, 0x2D	; 45
   1741a:	a0 e0       	ldi	r26, 0x00	; 0
   1741c:	83 83       	std	Z+3, r24	; 0x03
   1741e:	94 83       	std	Z+4, r25	; 0x04
   17420:	a5 83       	std	Z+5, r26	; 0x05
   17422:	8e 01       	movw	r16, r28
   17424:	0e 5e       	subi	r16, 0xEE	; 238
   17426:	1f 4f       	sbci	r17, 0xFF	; 255
   17428:	12 83       	std	Z+2, r17	; 0x02
   1742a:	01 83       	std	Z+1, r16	; 0x01
   1742c:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17430:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17434:	85 ff       	sbrs	r24, 5
   17436:	0c c0       	rjmp	.+24     	; 0x17450 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17438:	ed b7       	in	r30, 0x3d	; 61
   1743a:	fe b7       	in	r31, 0x3e	; 62
   1743c:	15 83       	std	Z+5, r17	; 0x05
   1743e:	04 83       	std	Z+4, r16	; 0x04
   17440:	8c ed       	ldi	r24, 0xDC	; 220
   17442:	9d e2       	ldi	r25, 0x2D	; 45
   17444:	a0 e0       	ldi	r26, 0x00	; 0
   17446:	81 83       	std	Z+1, r24	; 0x01
   17448:	92 83       	std	Z+2, r25	; 0x02
   1744a:	a3 83       	std	Z+3, r26	; 0x03
   1744c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17450:	67 e0       	ldi	r22, 0x07	; 7
   17452:	79 e0       	ldi	r23, 0x09	; 9
   17454:	c8 01       	movw	r24, r16
   17456:	0e 94 b6 7b 	call	0xf76c	; 0xf76c <fopen>
   1745a:	90 93 b4 19 	sts	0x19B4, r25	; 0x8019b4 <plot+0xa>
   1745e:	80 93 b3 19 	sts	0x19B3, r24	; 0x8019b3 <plot+0x9>
    if(plot.fp == NULL)
   17462:	89 2b       	or	r24, r25
   17464:	b9 f4       	brne	.+46     	; 0x17494 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17466:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1746a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1746e:	81 72       	andi	r24, 0x21	; 33
   17470:	99 27       	eor	r25, r25
   17472:	89 2b       	or	r24, r25
   17474:	11 f1       	breq	.+68     	; 0x174ba <printer_open+0x13c>
        {
            perror("open failed");
   17476:	8f e9       	ldi	r24, 0x9F	; 159
   17478:	9d e0       	ldi	r25, 0x0D	; 13
   1747a:	0e 94 e7 75 	call	0xebce	; 0xebce <perror>
            printf("exiting...\n");
   1747e:	80 ed       	ldi	r24, 0xD0	; 208
   17480:	9d e2       	ldi	r25, 0x2D	; 45
   17482:	a0 e0       	ldi	r26, 0x00	; 0
   17484:	ed b7       	in	r30, 0x3d	; 61
   17486:	fe b7       	in	r31, 0x3e	; 62
   17488:	81 83       	std	Z+1, r24	; 0x01
   1748a:	92 83       	std	Z+2, r25	; 0x02
   1748c:	a3 83       	std	Z+3, r26	; 0x03
   1748e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   17492:	13 c0       	rjmp	.+38     	; 0x174ba <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17494:	61 e0       	ldi	r22, 0x01	; 1
   17496:	70 e0       	ldi	r23, 0x00	; 0
   17498:	81 e0       	ldi	r24, 0x01	; 1
   1749a:	92 e0       	ldi	r25, 0x02	; 2
   1749c:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
   174a0:	90 93 b6 19 	sts	0x19B6, r25	; 0x8019b6 <plot+0xc>
   174a4:	80 93 b5 19 	sts	0x19B5, r24	; 0x8019b5 <plot+0xb>
    if(plot.buf == NULL)
   174a8:	89 2b       	or	r24, r25
        printer_close();
   174aa:	09 f4       	brne	.+2      	; 0x174ae <printer_open+0x130>
    plot.size = 512;
   174ac:	10 df       	rcall	.-480    	; 0x172ce <printer_close>
   174ae:	80 e0       	ldi	r24, 0x00	; 0
   174b0:	92 e0       	ldi	r25, 0x02	; 2
   174b2:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <plot+0x7>
   174b6:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <plot+0x6>
}
   174ba:	c3 5a       	subi	r28, 0xA3	; 163
   174bc:	df 4f       	sbci	r29, 0xFF	; 255
   174be:	e6 e0       	ldi	r30, 0x06	; 6
   174c0:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

000174c4 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   174c4:	cf 93       	push	r28
   174c6:	df 93       	push	r29
   174c8:	ad b7       	in	r26, 0x3d	; 61
   174ca:	be b7       	in	r27, 0x3e	; 62
   174cc:	17 97       	sbiw	r26, 0x07	; 7
   174ce:	0f b6       	in	r0, 0x3f	; 63
   174d0:	f8 94       	cli
   174d2:	be bf       	out	0x3e, r27	; 62
   174d4:	0f be       	out	0x3f, r0	; 63
   174d6:	ad bf       	out	0x3d, r26	; 61
   174d8:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   174da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174de:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   174e2:	81 72       	andi	r24, 0x21	; 33
   174e4:	99 27       	eor	r25, r25
   174e6:	89 2b       	or	r24, r25
   174e8:	c1 f0       	breq	.+48     	; 0x1751a <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   174ea:	80 91 aa 19 	lds	r24, 0x19AA	; 0x8019aa <plot>
   174ee:	30 91 ab 19 	lds	r19, 0x19AB	; 0x8019ab <plot+0x1>
   174f2:	20 91 ac 19 	lds	r18, 0x19AC	; 0x8019ac <plot+0x2>
   174f6:	90 91 ad 19 	lds	r25, 0x19AD	; 0x8019ad <plot+0x3>
   174fa:	81 11       	cpse	r24, r1
   174fc:	0e c0       	rjmp	.+28     	; 0x1751a <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   174fe:	ed b7       	in	r30, 0x3d	; 61
   17500:	fe b7       	in	r31, 0x3e	; 62
   17502:	84 83       	std	Z+4, r24	; 0x04
   17504:	35 83       	std	Z+5, r19	; 0x05
   17506:	26 83       	std	Z+6, r18	; 0x06
   17508:	97 83       	std	Z+7, r25	; 0x07
   1750a:	85 e8       	ldi	r24, 0x85	; 133
   1750c:	9d e2       	ldi	r25, 0x2D	; 45
   1750e:	a0 e0       	ldi	r26, 0x00	; 0
   17510:	81 83       	std	Z+1, r24	; 0x01
   17512:	92 83       	std	Z+2, r25	; 0x02
   17514:	a3 83       	std	Z+3, r26	; 0x03
   17516:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   1751a:	ce 01       	movw	r24, r28
   1751c:	88 27       	eor	r24, r24
   1751e:	97 7f       	andi	r25, 0xF7	; 247
   17520:	89 2b       	or	r24, r25
    {
        if( receive_plot_flush() )
   17522:	41 f0       	breq	.+16     	; 0x17534 <printer_buffer+0x70>
   17524:	75 de       	rcall	.-790    	; 0x17210 <receive_plot_flush>
   17526:	89 2b       	or	r24, r25
   17528:	09 f4       	brne	.+2      	; 0x1752c <printer_buffer+0x68>
            plot.error = 1;
   1752a:	3f c0       	rjmp	.+126    	; 0x175aa <printer_buffer+0xe6>
   1752c:	81 e0       	ldi	r24, 0x01	; 1
   1752e:	80 93 b2 19 	sts	0x19B2, r24	; 0x8019b2 <plot+0x8>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17532:	3b c0       	rjmp	.+118    	; 0x175aa <printer_buffer+0xe6>
   17534:	20 91 b5 19 	lds	r18, 0x19B5	; 0x8019b5 <plot+0xb>
   17538:	30 91 b6 19 	lds	r19, 0x19B6	; 0x8019b6 <plot+0xc>
   1753c:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x4>
   17540:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0x5>
   17544:	ac 01       	movw	r20, r24
   17546:	4f 5f       	subi	r20, 0xFF	; 255
   17548:	5f 4f       	sbci	r21, 0xFF	; 255
   1754a:	50 93 af 19 	sts	0x19AF, r21	; 0x8019af <plot+0x5>
   1754e:	40 93 ae 19 	sts	0x19AE, r20	; 0x8019ae <plot+0x4>
   17552:	f9 01       	movw	r30, r18
   17554:	e8 0f       	add	r30, r24
   17556:	f9 1f       	adc	r31, r25
        plot.count++;
   17558:	c0 83       	st	Z, r28
   1755a:	80 91 aa 19 	lds	r24, 0x19AA	; 0x8019aa <plot>
   1755e:	90 91 ab 19 	lds	r25, 0x19AB	; 0x8019ab <plot+0x1>
   17562:	a0 91 ac 19 	lds	r26, 0x19AC	; 0x8019ac <plot+0x2>
   17566:	b0 91 ad 19 	lds	r27, 0x19AD	; 0x8019ad <plot+0x3>
   1756a:	01 96       	adiw	r24, 0x01	; 1
   1756c:	a1 1d       	adc	r26, r1
   1756e:	b1 1d       	adc	r27, r1
   17570:	80 93 aa 19 	sts	0x19AA, r24	; 0x8019aa <plot>
   17574:	90 93 ab 19 	sts	0x19AB, r25	; 0x8019ab <plot+0x1>
   17578:	a0 93 ac 19 	sts	0x19AC, r26	; 0x8019ac <plot+0x2>
   1757c:	b0 93 ad 19 	sts	0x19AD, r27	; 0x8019ad <plot+0x3>

        if(plot.ind >= plot.size)
   17580:	20 91 ae 19 	lds	r18, 0x19AE	; 0x8019ae <plot+0x4>
   17584:	30 91 af 19 	lds	r19, 0x19AF	; 0x8019af <plot+0x5>
   17588:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <plot+0x6>
   1758c:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <plot+0x7>
   17590:	28 17       	cp	r18, r24
        {
            if( receive_plot_flush() < 0 )
   17592:	39 07       	cpc	r19, r25
   17594:	54 f0       	brlt	.+20     	; 0x175aa <printer_buffer+0xe6>
   17596:	3c de       	rcall	.-904    	; 0x17210 <receive_plot_flush>
   17598:	97 ff       	sbrs	r25, 7
                plot.error = 1;
   1759a:	03 c0       	rjmp	.+6      	; 0x175a2 <printer_buffer+0xde>
   1759c:	81 e0       	ldi	r24, 0x01	; 1
   1759e:	80 93 b2 19 	sts	0x19B2, r24	; 0x8019b2 <plot+0x8>
            plot.ind  = 0;
   175a2:	10 92 af 19 	sts	0x19AF, r1	; 0x8019af <plot+0x5>
   175a6:	10 92 ae 19 	sts	0x19AE, r1	; 0x8019ae <plot+0x4>
        }
    }
}
   175aa:	cd b7       	in	r28, 0x3d	; 61
   175ac:	de b7       	in	r29, 0x3e	; 62
   175ae:	27 96       	adiw	r28, 0x07	; 7
   175b0:	e2 e0       	ldi	r30, 0x02	; 2
   175b2:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000175b6 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   175b6:	cf 93       	push	r28
   175b8:	00 d0       	rcall	.+0      	; 0x175ba <PRINTER_COMMANDS+0x4>
   175ba:	00 d0       	rcall	.+0      	; 0x175bc <PRINTER_COMMANDS+0x6>
   175bc:	1f 92       	push	r1
   175be:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   175c0:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   175c4:	90 e0       	ldi	r25, 0x00	; 0
   175c6:	0e 94 4a 8a 	call	0x11494	; 0x11494 <PRINTER_is_MLA>
   175ca:	89 2b       	or	r24, r25
   175cc:	69 f0       	breq	.+26     	; 0x175e8 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175d2:	85 ff       	sbrs	r24, 5
   175d4:	22 c0       	rjmp	.+68     	; 0x1761a <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   175d6:	8c 2f       	mov	r24, r28
   175d8:	90 e0       	ldi	r25, 0x00	; 0
   175da:	ed b7       	in	r30, 0x3d	; 61
   175dc:	fe b7       	in	r31, 0x3e	; 62
   175de:	95 83       	std	Z+5, r25	; 0x05
   175e0:	84 83       	std	Z+4, r24	; 0x04
   175e2:	89 e6       	ldi	r24, 0x69	; 105
   175e4:	9d e2       	ldi	r25, 0x2D	; 45
   175e6:	13 c0       	rjmp	.+38     	; 0x1760e <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   175e8:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   175ec:	90 e0       	ldi	r25, 0x00	; 0
   175ee:	0e 94 5b 8a 	call	0x114b6	; 0x114b6 <PRINTER_is_MTA>
   175f2:	89 2b       	or	r24, r25
   175f4:	91 f0       	breq	.+36     	; 0x1761a <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175f6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175fa:	85 ff       	sbrs	r24, 5
   175fc:	0e c0       	rjmp	.+28     	; 0x1761a <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   175fe:	8c 2f       	mov	r24, r28
   17600:	90 e0       	ldi	r25, 0x00	; 0
   17602:	ed b7       	in	r30, 0x3d	; 61
   17604:	fe b7       	in	r31, 0x3e	; 62
   17606:	95 83       	std	Z+5, r25	; 0x05
   17608:	84 83       	std	Z+4, r24	; 0x04
   1760a:	8f e4       	ldi	r24, 0x4F	; 79
   1760c:	9d e2       	ldi	r25, 0x2D	; 45
   1760e:	a0 e0       	ldi	r26, 0x00	; 0
   17610:	81 83       	std	Z+1, r24	; 0x01
   17612:	92 83       	std	Z+2, r25	; 0x02
   17614:	a3 83       	std	Z+3, r26	; 0x03
   17616:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   1761a:	80 e0       	ldi	r24, 0x00	; 0
   1761c:	90 e0       	ldi	r25, 0x00	; 0
   1761e:	0f 90       	pop	r0
   17620:	0f 90       	pop	r0
   17622:	0f 90       	pop	r0
   17624:	0f 90       	pop	r0
   17626:	0f 90       	pop	r0
   17628:	cf 91       	pop	r28
   1762a:	08 95       	ret

0001762c <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   1762c:	0f 93       	push	r16
   1762e:	1f 93       	push	r17
   17630:	da 01       	movw	r26, r20
   17632:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17634:	b7 fd       	sbrc	r27, 7
   17636:	0b c0       	rjmp	.+22     	; 0x1764e <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17638:	fd 01       	movw	r30, r26
   1763a:	e6 0f       	add	r30, r22
   1763c:	f7 1f       	adc	r31, r23
   1763e:	e8 0f       	add	r30, r24
   17640:	f9 1f       	adc	r31, r25
   17642:	00 83       	st	Z, r16
        val >>= 8;
   17644:	01 2f       	mov	r16, r17
   17646:	12 2f       	mov	r17, r18
   17648:	23 2f       	mov	r18, r19
   1764a:	33 27       	eor	r19, r19
   1764c:	f2 cf       	rjmp	.-28     	; 0x17632 <V2B_MSB+0x6>
    }
}
   1764e:	1f 91       	pop	r17
   17650:	0f 91       	pop	r16
   17652:	08 95       	ret

00017654 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17654:	0f 93       	push	r16
   17656:	1f 93       	push	r17
   17658:	fc 01       	movw	r30, r24
   1765a:	e6 0f       	add	r30, r22
   1765c:	f7 1f       	adc	r31, r23
   1765e:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17660:	cf 01       	movw	r24, r30
   17662:	86 1b       	sub	r24, r22
   17664:	97 0b       	sbc	r25, r23
   17666:	84 17       	cp	r24, r20
   17668:	95 07       	cpc	r25, r21
   1766a:	34 f4       	brge	.+12     	; 0x17678 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   1766c:	01 93       	st	Z+, r16
        val >>= 8;
   1766e:	01 2f       	mov	r16, r17
   17670:	12 2f       	mov	r17, r18
   17672:	23 2f       	mov	r18, r19
   17674:	33 27       	eor	r19, r19
   17676:	f4 cf       	rjmp	.-24     	; 0x17660 <V2B_LSB+0xc>
    }
}
   17678:	1f 91       	pop	r17
   1767a:	0f 91       	pop	r16
   1767c:	08 95       	ret

0001767e <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   1767e:	cf 92       	push	r12
   17680:	df 92       	push	r13
   17682:	ef 92       	push	r14
   17684:	ff 92       	push	r15
   17686:	fc 01       	movw	r30, r24
   17688:	e6 0f       	add	r30, r22
   1768a:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   1768c:	60 e0       	ldi	r22, 0x00	; 0
   1768e:	70 e0       	ldi	r23, 0x00	; 0
   17690:	cb 01       	movw	r24, r22
   17692:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17694:	9f 01       	movw	r18, r30
   17696:	2a 1b       	sub	r18, r26
   17698:	3b 0b       	sbc	r19, r27
   1769a:	24 17       	cp	r18, r20
   1769c:	35 07       	cpc	r19, r21
   1769e:	4c f4       	brge	.+18     	; 0x176b2 <B2V_MSB+0x34>
    {
        val <<= 8;
   176a0:	cc 24       	eor	r12, r12
   176a2:	d6 2e       	mov	r13, r22
   176a4:	e7 2e       	mov	r14, r23
   176a6:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   176a8:	21 91       	ld	r18, Z+
   176aa:	c7 01       	movw	r24, r14
   176ac:	b6 01       	movw	r22, r12
   176ae:	62 2b       	or	r22, r18
   176b0:	f1 cf       	rjmp	.-30     	; 0x17694 <B2V_MSB+0x16>
    }
    return(val);
}
   176b2:	ff 90       	pop	r15
   176b4:	ef 90       	pop	r14
   176b6:	df 90       	pop	r13
   176b8:	cf 90       	pop	r12
   176ba:	08 95       	ret

000176bc <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   176bc:	cf 92       	push	r12
   176be:	df 92       	push	r13
   176c0:	ef 92       	push	r14
   176c2:	ff 92       	push	r15
   176c4:	9c 01       	movw	r18, r24
   176c6:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   176c8:	60 e0       	ldi	r22, 0x00	; 0
   176ca:	70 e0       	ldi	r23, 0x00	; 0
   176cc:	cb 01       	movw	r24, r22
   176ce:	41 50       	subi	r20, 0x01	; 1
   176d0:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   176d2:	57 fd       	sbrc	r21, 7
   176d4:	0e c0       	rjmp	.+28     	; 0x176f2 <B2V_LSB+0x36>
    {
        val <<= 8;
   176d6:	cc 24       	eor	r12, r12
   176d8:	d6 2e       	mov	r13, r22
   176da:	e7 2e       	mov	r14, r23
   176dc:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   176de:	fa 01       	movw	r30, r20
   176e0:	ea 0f       	add	r30, r26
   176e2:	fb 1f       	adc	r31, r27
   176e4:	e2 0f       	add	r30, r18
   176e6:	f3 1f       	adc	r31, r19
   176e8:	e0 81       	ld	r30, Z
   176ea:	c7 01       	movw	r24, r14
   176ec:	b6 01       	movw	r22, r12
   176ee:	6e 2b       	or	r22, r30
   176f0:	ee cf       	rjmp	.-36     	; 0x176ce <B2V_LSB+0x12>
    }
    return(val);
}
   176f2:	ff 90       	pop	r15
   176f4:	ef 90       	pop	r14
   176f6:	df 90       	pop	r13
   176f8:	cf 90       	pop	r12
   176fa:	08 95       	ret

000176fc <lif_help>:
   176fc:	cf 93       	push	r28
   176fe:	df 93       	push	r29
   17700:	00 d0       	rcall	.+0      	; 0x17702 <lif_help+0x6>
   17702:	1f 92       	push	r1
   17704:	ec 01       	movw	r28, r24
   17706:	82 e3       	ldi	r24, 0x32	; 50
   17708:	92 e4       	ldi	r25, 0x42	; 66
   1770a:	a0 e0       	ldi	r26, 0x00	; 0
   1770c:	ed b7       	in	r30, 0x3d	; 61
   1770e:	fe b7       	in	r31, 0x3e	; 62
   17710:	81 83       	std	Z+1, r24	; 0x01
   17712:	92 83       	std	Z+2, r25	; 0x02
   17714:	a3 83       	std	Z+3, r26	; 0x03
   17716:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1771a:	cd 2b       	or	r28, r29
   1771c:	51 f0       	breq	.+20     	; 0x17732 <lif_help+0x36>
   1771e:	89 e6       	ldi	r24, 0x69	; 105
   17720:	90 e4       	ldi	r25, 0x40	; 64
   17722:	a0 e0       	ldi	r26, 0x00	; 0
   17724:	ed b7       	in	r30, 0x3d	; 61
   17726:	fe b7       	in	r31, 0x3e	; 62
   17728:	81 83       	std	Z+1, r24	; 0x01
   1772a:	92 83       	std	Z+2, r25	; 0x02
   1772c:	a3 83       	std	Z+3, r26	; 0x03
   1772e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   17732:	cd b7       	in	r28, 0x3d	; 61
   17734:	de b7       	in	r29, 0x3e	; 62
   17736:	23 96       	adiw	r28, 0x03	; 3
   17738:	e2 e0       	ldi	r30, 0x02	; 2
   1773a:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0001773e <lif_calloc>:
   1773e:	cf 92       	push	r12
   17740:	df 92       	push	r13
   17742:	ef 92       	push	r14
   17744:	ff 92       	push	r15
   17746:	cf 93       	push	r28
   17748:	df 93       	push	r29
   1774a:	ad b7       	in	r26, 0x3d	; 61
   1774c:	be b7       	in	r27, 0x3e	; 62
   1774e:	17 97       	sbiw	r26, 0x07	; 7
   17750:	0f b6       	in	r0, 0x3f	; 63
   17752:	f8 94       	cli
   17754:	be bf       	out	0x3e, r27	; 62
   17756:	0f be       	out	0x3f, r0	; 63
   17758:	ad bf       	out	0x3d, r26	; 61
   1775a:	6b 01       	movw	r12, r22
   1775c:	7c 01       	movw	r14, r24
   1775e:	61 e0       	ldi	r22, 0x01	; 1
   17760:	70 e0       	ldi	r23, 0x00	; 0
   17762:	c6 01       	movw	r24, r12
   17764:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <safecalloc>
   17768:	ec 01       	movw	r28, r24
   1776a:	89 2b       	or	r24, r25
   1776c:	71 f4       	brne	.+28     	; 0x1778a <lif_calloc+0x4c>
   1776e:	ed b7       	in	r30, 0x3d	; 61
   17770:	fe b7       	in	r31, 0x3e	; 62
   17772:	c4 82       	std	Z+4, r12	; 0x04
   17774:	d5 82       	std	Z+5, r13	; 0x05
   17776:	e6 82       	std	Z+6, r14	; 0x06
   17778:	f7 82       	std	Z+7, r15	; 0x07
   1777a:	8f e1       	ldi	r24, 0x1F	; 31
   1777c:	90 e4       	ldi	r25, 0x40	; 64
   1777e:	a0 e0       	ldi	r26, 0x00	; 0
   17780:	81 83       	std	Z+1, r24	; 0x01
   17782:	92 83       	std	Z+2, r25	; 0x02
   17784:	a3 83       	std	Z+3, r26	; 0x03
   17786:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1778a:	ce 01       	movw	r24, r28
   1778c:	ad b7       	in	r26, 0x3d	; 61
   1778e:	be b7       	in	r27, 0x3e	; 62
   17790:	17 96       	adiw	r26, 0x07	; 7
   17792:	0f b6       	in	r0, 0x3f	; 63
   17794:	f8 94       	cli
   17796:	be bf       	out	0x3e, r27	; 62
   17798:	0f be       	out	0x3f, r0	; 63
   1779a:	ad bf       	out	0x3d, r26	; 61
   1779c:	df 91       	pop	r29
   1779e:	cf 91       	pop	r28
   177a0:	ff 90       	pop	r15
   177a2:	ef 90       	pop	r14
   177a4:	df 90       	pop	r13
   177a6:	cf 90       	pop	r12
   177a8:	08 95       	ret

000177aa <lif_free>:
   177aa:	00 d0       	rcall	.+0      	; 0x177ac <lif_free+0x2>
   177ac:	1f 92       	push	r1
   177ae:	00 97       	sbiw	r24, 0x00	; 0
   177b0:	59 f4       	brne	.+22     	; 0x177c8 <lif_free+0x1e>
   177b2:	87 e0       	ldi	r24, 0x07	; 7
   177b4:	90 e4       	ldi	r25, 0x40	; 64
   177b6:	a0 e0       	ldi	r26, 0x00	; 0
   177b8:	ed b7       	in	r30, 0x3d	; 61
   177ba:	fe b7       	in	r31, 0x3e	; 62
   177bc:	81 83       	std	Z+1, r24	; 0x01
   177be:	92 83       	std	Z+2, r25	; 0x02
   177c0:	a3 83       	std	Z+3, r26	; 0x03
   177c2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   177c6:	02 c0       	rjmp	.+4      	; 0x177cc <lif_free+0x22>
   177c8:	0e 94 28 25 	call	0x4a50	; 0x4a50 <safefree>
   177cc:	0f 90       	pop	r0
   177ce:	0f 90       	pop	r0
   177d0:	0f 90       	pop	r0
   177d2:	08 95       	ret

000177d4 <lif_stralloc>:
   177d4:	0f 93       	push	r16
   177d6:	1f 93       	push	r17
   177d8:	cf 93       	push	r28
   177da:	df 93       	push	r29
   177dc:	ec 01       	movw	r28, r24
   177de:	fc 01       	movw	r30, r24
   177e0:	01 90       	ld	r0, Z+
   177e2:	00 20       	and	r0, r0
   177e4:	e9 f7       	brne	.-6      	; 0x177e0 <lif_stralloc+0xc>
   177e6:	bf 01       	movw	r22, r30
   177e8:	68 1b       	sub	r22, r24
   177ea:	79 0b       	sbc	r23, r25
   177ec:	6d 5f       	subi	r22, 0xFD	; 253
   177ee:	7f 4f       	sbci	r23, 0xFF	; 255
   177f0:	07 2e       	mov	r0, r23
   177f2:	00 0c       	add	r0, r0
   177f4:	88 0b       	sbc	r24, r24
   177f6:	99 0b       	sbc	r25, r25
   177f8:	a2 df       	rcall	.-188    	; 0x1773e <lif_calloc>
   177fa:	8c 01       	movw	r16, r24
   177fc:	00 97       	sbiw	r24, 0x00	; 0
   177fe:	19 f0       	breq	.+6      	; 0x17806 <lif_stralloc+0x32>
   17800:	be 01       	movw	r22, r28
   17802:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <strcpy>
   17806:	c8 01       	movw	r24, r16
   17808:	df 91       	pop	r29
   1780a:	cf 91       	pop	r28
   1780c:	1f 91       	pop	r17
   1780e:	0f 91       	pop	r16
   17810:	08 95       	ret

00017812 <lif_open>:
   17812:	ef 92       	push	r14
   17814:	ff 92       	push	r15
   17816:	0f 93       	push	r16
   17818:	1f 93       	push	r17
   1781a:	cf 93       	push	r28
   1781c:	df 93       	push	r29
   1781e:	ad b7       	in	r26, 0x3d	; 61
   17820:	be b7       	in	r27, 0x3e	; 62
   17822:	17 97       	sbiw	r26, 0x07	; 7
   17824:	0f b6       	in	r0, 0x3f	; 63
   17826:	f8 94       	cli
   17828:	be bf       	out	0x3e, r27	; 62
   1782a:	0f be       	out	0x3f, r0	; 63
   1782c:	ad bf       	out	0x3d, r26	; 61
   1782e:	8c 01       	movw	r16, r24
   17830:	7b 01       	movw	r14, r22
   17832:	0e 94 b6 7b 	call	0xf76c	; 0xf76c <fopen>
   17836:	ec 01       	movw	r28, r24
   17838:	89 2b       	or	r24, r25
   1783a:	71 f4       	brne	.+28     	; 0x17858 <lif_open+0x46>
   1783c:	ed b7       	in	r30, 0x3d	; 61
   1783e:	fe b7       	in	r31, 0x3e	; 62
   17840:	f7 82       	std	Z+7, r15	; 0x07
   17842:	e6 82       	std	Z+6, r14	; 0x06
   17844:	15 83       	std	Z+5, r17	; 0x05
   17846:	04 83       	std	Z+4, r16	; 0x04
   17848:	82 ee       	ldi	r24, 0xE2	; 226
   1784a:	9f e3       	ldi	r25, 0x3F	; 63
   1784c:	a0 e0       	ldi	r26, 0x00	; 0
   1784e:	81 83       	std	Z+1, r24	; 0x01
   17850:	92 83       	std	Z+2, r25	; 0x02
   17852:	a3 83       	std	Z+3, r26	; 0x03
   17854:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   17858:	ce 01       	movw	r24, r28
   1785a:	cd b7       	in	r28, 0x3d	; 61
   1785c:	de b7       	in	r29, 0x3e	; 62
   1785e:	27 96       	adiw	r28, 0x07	; 7
   17860:	e6 e0       	ldi	r30, 0x06	; 6
   17862:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00017866 <lif_stat>:
   17866:	0f 93       	push	r16
   17868:	1f 93       	push	r17
   1786a:	cf 93       	push	r28
   1786c:	df 93       	push	r29
   1786e:	00 d0       	rcall	.+0      	; 0x17870 <lif_stat+0xa>
   17870:	00 d0       	rcall	.+0      	; 0x17872 <lif_stat+0xc>
   17872:	1f 92       	push	r1
   17874:	8c 01       	movw	r16, r24
   17876:	d6 2f       	mov	r29, r22
   17878:	c7 2f       	mov	r28, r23
   1787a:	0e 94 bb 76 	call	0xed76	; 0xed76 <stat>
   1787e:	97 ff       	sbrs	r25, 7
   17880:	0f c0       	rjmp	.+30     	; 0x178a0 <lif_stat+0x3a>
   17882:	ed b7       	in	r30, 0x3d	; 61
   17884:	fe b7       	in	r31, 0x3e	; 62
   17886:	15 83       	std	Z+5, r17	; 0x05
   17888:	04 83       	std	Z+4, r16	; 0x04
   1788a:	89 ec       	ldi	r24, 0xC9	; 201
   1788c:	9f e3       	ldi	r25, 0x3F	; 63
   1788e:	a0 e0       	ldi	r26, 0x00	; 0
   17890:	81 83       	std	Z+1, r24	; 0x01
   17892:	92 83       	std	Z+2, r25	; 0x02
   17894:	a3 83       	std	Z+3, r26	; 0x03
   17896:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1789a:	80 e0       	ldi	r24, 0x00	; 0
   1789c:	90 e0       	ldi	r25, 0x00	; 0
   1789e:	02 c0       	rjmp	.+4      	; 0x178a4 <lif_stat+0x3e>
   178a0:	8d 2f       	mov	r24, r29
   178a2:	9c 2f       	mov	r25, r28
   178a4:	cd b7       	in	r28, 0x3d	; 61
   178a6:	de b7       	in	r29, 0x3e	; 62
   178a8:	25 96       	adiw	r28, 0x05	; 5
   178aa:	e4 e0       	ldi	r30, 0x04	; 4
   178ac:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

000178b0 <lif_seek_msg>:
   178b0:	a9 e0       	ldi	r26, 0x09	; 9
   178b2:	b0 e0       	ldi	r27, 0x00	; 0
   178b4:	ee e5       	ldi	r30, 0x5E	; 94
   178b6:	fc eb       	ldi	r31, 0xBC	; 188
   178b8:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
   178bc:	ec 01       	movw	r28, r24
   178be:	6a 01       	movw	r12, r20
   178c0:	7b 01       	movw	r14, r22
   178c2:	89 01       	movw	r16, r18
   178c4:	0e 94 f5 77 	call	0xefea	; 0xefea <ftell>
   178c8:	6c 15       	cp	r22, r12
   178ca:	7d 05       	cpc	r23, r13
   178cc:	8e 05       	cpc	r24, r14
   178ce:	9f 05       	cpc	r25, r15
   178d0:	19 f4       	brne	.+6      	; 0x178d8 <lif_seek_msg+0x28>
   178d2:	81 e0       	ldi	r24, 0x01	; 1
   178d4:	90 e0       	ldi	r25, 0x00	; 0
   178d6:	1b c0       	rjmp	.+54     	; 0x1790e <lif_seek_msg+0x5e>
   178d8:	20 e0       	ldi	r18, 0x00	; 0
   178da:	30 e0       	ldi	r19, 0x00	; 0
   178dc:	b7 01       	movw	r22, r14
   178de:	a6 01       	movw	r20, r12
   178e0:	ce 01       	movw	r24, r28
   178e2:	0e 94 78 78 	call	0xf0f0	; 0xf0f0 <fseek>
   178e6:	97 ff       	sbrs	r25, 7
   178e8:	f4 cf       	rjmp	.-24     	; 0x178d2 <lif_seek_msg+0x22>
   178ea:	ed b7       	in	r30, 0x3d	; 61
   178ec:	fe b7       	in	r31, 0x3e	; 62
   178ee:	c6 82       	std	Z+6, r12	; 0x06
   178f0:	d7 82       	std	Z+7, r13	; 0x07
   178f2:	e0 86       	std	Z+8, r14	; 0x08
   178f4:	f1 86       	std	Z+9, r15	; 0x09
   178f6:	15 83       	std	Z+5, r17	; 0x05
   178f8:	04 83       	std	Z+4, r16	; 0x04
   178fa:	88 ea       	ldi	r24, 0xA8	; 168
   178fc:	9f e3       	ldi	r25, 0x3F	; 63
   178fe:	a0 e0       	ldi	r26, 0x00	; 0
   17900:	81 83       	std	Z+1, r24	; 0x01
   17902:	92 83       	std	Z+2, r25	; 0x02
   17904:	a3 83       	std	Z+3, r26	; 0x03
   17906:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1790a:	80 e0       	ldi	r24, 0x00	; 0
   1790c:	90 e0       	ldi	r25, 0x00	; 0
   1790e:	cd b7       	in	r28, 0x3d	; 61
   17910:	de b7       	in	r29, 0x3e	; 62
   17912:	29 96       	adiw	r28, 0x09	; 9
   17914:	e8 e0       	ldi	r30, 0x08	; 8
   17916:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

0001791a <lif_read>:
   1791a:	af e0       	ldi	r26, 0x0F	; 15
   1791c:	b0 e0       	ldi	r27, 0x00	; 0
   1791e:	e3 e9       	ldi	r30, 0x93	; 147
   17920:	fc eb       	ldi	r31, 0xBC	; 188
   17922:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
   17926:	ec 01       	movw	r28, r24
   17928:	7b 01       	movw	r14, r22
   1792a:	49 01       	movw	r8, r18
   1792c:	5a 01       	movw	r10, r20
   1792e:	28 81       	ld	r18, Y
   17930:	39 81       	ldd	r19, Y+1	; 0x01
   17932:	b5 01       	movw	r22, r10
   17934:	a4 01       	movw	r20, r8
   17936:	8a 81       	ldd	r24, Y+2	; 0x02
   17938:	9b 81       	ldd	r25, Y+3	; 0x03
   1793a:	ba df       	rcall	.-140    	; 0x178b0 <lif_seek_msg>
   1793c:	89 2b       	or	r24, r25
   1793e:	91 f1       	breq	.+100    	; 0x179a4 <lif_read+0x8a>
   17940:	2a 81       	ldd	r18, Y+2	; 0x02
   17942:	3b 81       	ldd	r19, Y+3	; 0x03
   17944:	a8 01       	movw	r20, r16
   17946:	61 e0       	ldi	r22, 0x01	; 1
   17948:	70 e0       	ldi	r23, 0x00	; 0
   1794a:	c7 01       	movw	r24, r14
   1794c:	0e 94 0c 79 	call	0xf218	; 0xf218 <fread>
   17950:	6c 01       	movw	r12, r24
   17952:	e1 2c       	mov	r14, r1
   17954:	f1 2c       	mov	r15, r1
   17956:	b8 01       	movw	r22, r16
   17958:	01 2e       	mov	r0, r17
   1795a:	00 0c       	add	r0, r0
   1795c:	88 0b       	sbc	r24, r24
   1795e:	99 0b       	sbc	r25, r25
   17960:	c6 16       	cp	r12, r22
   17962:	d7 06       	cpc	r13, r23
   17964:	e8 06       	cpc	r14, r24
   17966:	f9 06       	cpc	r15, r25
   17968:	19 f1       	breq	.+70     	; 0x179b0 <lif_read+0x96>
   1796a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1796e:	81 ff       	sbrs	r24, 1
   17970:	1d c0       	rjmp	.+58     	; 0x179ac <lif_read+0x92>
   17972:	ed b7       	in	r30, 0x3d	; 61
   17974:	fe b7       	in	r31, 0x3e	; 62
   17976:	17 87       	std	Z+15, r17	; 0x0f
   17978:	06 87       	std	Z+14, r16	; 0x0e
   1797a:	c2 86       	std	Z+10, r12	; 0x0a
   1797c:	d3 86       	std	Z+11, r13	; 0x0b
   1797e:	e4 86       	std	Z+12, r14	; 0x0c
   17980:	f5 86       	std	Z+13, r15	; 0x0d
   17982:	86 82       	std	Z+6, r8	; 0x06
   17984:	97 82       	std	Z+7, r9	; 0x07
   17986:	a0 86       	std	Z+8, r10	; 0x08
   17988:	b1 86       	std	Z+9, r11	; 0x09
   1798a:	88 81       	ld	r24, Y
   1798c:	99 81       	ldd	r25, Y+1	; 0x01
   1798e:	95 83       	std	Z+5, r25	; 0x05
   17990:	84 83       	std	Z+4, r24	; 0x04
   17992:	8c e6       	ldi	r24, 0x6C	; 108
   17994:	9f e3       	ldi	r25, 0x3F	; 63
   17996:	a0 e0       	ldi	r26, 0x00	; 0
   17998:	81 83       	std	Z+1, r24	; 0x01
   1799a:	92 83       	std	Z+2, r25	; 0x02
   1799c:	a3 83       	std	Z+3, r26	; 0x03
   1799e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   179a2:	04 c0       	rjmp	.+8      	; 0x179ac <lif_read+0x92>
   179a4:	60 e0       	ldi	r22, 0x00	; 0
   179a6:	70 e0       	ldi	r23, 0x00	; 0
   179a8:	cb 01       	movw	r24, r22
   179aa:	02 c0       	rjmp	.+4      	; 0x179b0 <lif_read+0x96>
   179ac:	c7 01       	movw	r24, r14
   179ae:	b6 01       	movw	r22, r12
   179b0:	cd b7       	in	r28, 0x3d	; 61
   179b2:	de b7       	in	r29, 0x3e	; 62
   179b4:	2f 96       	adiw	r28, 0x0f	; 15
   179b6:	ec e0       	ldi	r30, 0x0C	; 12
   179b8:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

000179bc <lif_write>:
   179bc:	8f 92       	push	r8
   179be:	9f 92       	push	r9
   179c0:	af 92       	push	r10
   179c2:	bf 92       	push	r11
   179c4:	ef 92       	push	r14
   179c6:	ff 92       	push	r15
   179c8:	0f 93       	push	r16
   179ca:	1f 93       	push	r17
   179cc:	cf 93       	push	r28
   179ce:	df 93       	push	r29
   179d0:	ad b7       	in	r26, 0x3d	; 61
   179d2:	be b7       	in	r27, 0x3e	; 62
   179d4:	1d 97       	sbiw	r26, 0x0d	; 13
   179d6:	0f b6       	in	r0, 0x3f	; 63
   179d8:	f8 94       	cli
   179da:	be bf       	out	0x3e, r27	; 62
   179dc:	0f be       	out	0x3f, r0	; 63
   179de:	ad bf       	out	0x3d, r26	; 61
   179e0:	7c 01       	movw	r14, r24
   179e2:	eb 01       	movw	r28, r22
   179e4:	49 01       	movw	r8, r18
   179e6:	5a 01       	movw	r10, r20
   179e8:	fc 01       	movw	r30, r24
   179ea:	20 81       	ld	r18, Z
   179ec:	31 81       	ldd	r19, Z+1	; 0x01
   179ee:	b5 01       	movw	r22, r10
   179f0:	a4 01       	movw	r20, r8
   179f2:	82 81       	ldd	r24, Z+2	; 0x02
   179f4:	93 81       	ldd	r25, Z+3	; 0x03
   179f6:	5c df       	rcall	.-328    	; 0x178b0 <lif_seek_msg>
   179f8:	00 97       	sbiw	r24, 0x00	; 0
   179fa:	71 f1       	breq	.+92     	; 0x17a58 <lif_write+0x9c>
   179fc:	f7 01       	movw	r30, r14
   179fe:	22 81       	ldd	r18, Z+2	; 0x02
   17a00:	33 81       	ldd	r19, Z+3	; 0x03
   17a02:	a8 01       	movw	r20, r16
   17a04:	61 e0       	ldi	r22, 0x01	; 1
   17a06:	70 e0       	ldi	r23, 0x00	; 0
   17a08:	ce 01       	movw	r24, r28
   17a0a:	0e 94 de 79 	call	0xf3bc	; 0xf3bc <fwrite>
   17a0e:	ec 01       	movw	r28, r24
   17a10:	08 17       	cp	r16, r24
   17a12:	19 07       	cpc	r17, r25
   17a14:	f1 f0       	breq	.+60     	; 0x17a52 <lif_write+0x96>
   17a16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a1a:	81 ff       	sbrs	r24, 1
   17a1c:	1c c0       	rjmp	.+56     	; 0x17a56 <lif_write+0x9a>
   17a1e:	ed b7       	in	r30, 0x3d	; 61
   17a20:	fe b7       	in	r31, 0x3e	; 62
   17a22:	15 87       	std	Z+13, r17	; 0x0d
   17a24:	04 87       	std	Z+12, r16	; 0x0c
   17a26:	d3 87       	std	Z+11, r29	; 0x0b
   17a28:	c2 87       	std	Z+10, r28	; 0x0a
   17a2a:	86 82       	std	Z+6, r8	; 0x06
   17a2c:	97 82       	std	Z+7, r9	; 0x07
   17a2e:	a0 86       	std	Z+8, r10	; 0x08
   17a30:	b1 86       	std	Z+9, r11	; 0x09
   17a32:	f7 01       	movw	r30, r14
   17a34:	80 81       	ld	r24, Z
   17a36:	91 81       	ldd	r25, Z+1	; 0x01
   17a38:	ed b7       	in	r30, 0x3d	; 61
   17a3a:	fe b7       	in	r31, 0x3e	; 62
   17a3c:	95 83       	std	Z+5, r25	; 0x05
   17a3e:	84 83       	std	Z+4, r24	; 0x04
   17a40:	8f e2       	ldi	r24, 0x2F	; 47
   17a42:	9f e3       	ldi	r25, 0x3F	; 63
   17a44:	a0 e0       	ldi	r26, 0x00	; 0
   17a46:	81 83       	std	Z+1, r24	; 0x01
   17a48:	92 83       	std	Z+2, r25	; 0x02
   17a4a:	a3 83       	std	Z+3, r26	; 0x03
   17a4c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   17a50:	02 c0       	rjmp	.+4      	; 0x17a56 <lif_write+0x9a>
   17a52:	c8 01       	movw	r24, r16
   17a54:	01 c0       	rjmp	.+2      	; 0x17a58 <lif_write+0x9c>
   17a56:	ce 01       	movw	r24, r28
   17a58:	ad b7       	in	r26, 0x3d	; 61
   17a5a:	be b7       	in	r27, 0x3e	; 62
   17a5c:	1d 96       	adiw	r26, 0x0d	; 13
   17a5e:	0f b6       	in	r0, 0x3f	; 63
   17a60:	f8 94       	cli
   17a62:	be bf       	out	0x3e, r27	; 62
   17a64:	0f be       	out	0x3f, r0	; 63
   17a66:	ad bf       	out	0x3d, r26	; 61
   17a68:	df 91       	pop	r29
   17a6a:	cf 91       	pop	r28
   17a6c:	1f 91       	pop	r17
   17a6e:	0f 91       	pop	r16
   17a70:	ff 90       	pop	r15
   17a72:	ef 90       	pop	r14
   17a74:	bf 90       	pop	r11
   17a76:	af 90       	pop	r10
   17a78:	9f 90       	pop	r9
   17a7a:	8f 90       	pop	r8
   17a7c:	08 95       	ret

00017a7e <lif_chars>:
   17a7e:	80 32       	cpi	r24, 0x20	; 32
   17a80:	91 05       	cpc	r25, r1
   17a82:	e1 f0       	breq	.+56     	; 0x17abc <lif_chars+0x3e>
   17a84:	9c 01       	movw	r18, r24
   17a86:	21 56       	subi	r18, 0x61	; 97
   17a88:	31 09       	sbc	r19, r1
   17a8a:	2a 31       	cpi	r18, 0x1A	; 26
   17a8c:	31 05       	cpc	r19, r1
   17a8e:	10 f4       	brcc	.+4      	; 0x17a94 <lif_chars+0x16>
   17a90:	80 97       	sbiw	r24, 0x20	; 32
   17a92:	08 95       	ret
   17a94:	9c 01       	movw	r18, r24
   17a96:	21 54       	subi	r18, 0x41	; 65
   17a98:	31 09       	sbc	r19, r1
   17a9a:	2a 31       	cpi	r18, 0x1A	; 26
   17a9c:	31 05       	cpc	r19, r1
   17a9e:	c8 f0       	brcs	.+50     	; 0x17ad2 <lif_chars+0x54>
   17aa0:	16 16       	cp	r1, r22
   17aa2:	17 06       	cpc	r1, r23
   17aa4:	74 f4       	brge	.+28     	; 0x17ac2 <lif_chars+0x44>
   17aa6:	2f 5e       	subi	r18, 0xEF	; 239
   17aa8:	3f 4f       	sbci	r19, 0xFF	; 255
   17aaa:	2a 30       	cpi	r18, 0x0A	; 10
   17aac:	31 05       	cpc	r19, r1
   17aae:	88 f0       	brcs	.+34     	; 0x17ad2 <lif_chars+0x54>
   17ab0:	8f 35       	cpi	r24, 0x5F	; 95
   17ab2:	91 05       	cpc	r25, r1
   17ab4:	49 f0       	breq	.+18     	; 0x17ac8 <lif_chars+0x4a>
   17ab6:	8d 97       	sbiw	r24, 0x2d	; 45
   17ab8:	21 f4       	brne	.+8      	; 0x17ac2 <lif_chars+0x44>
   17aba:	09 c0       	rjmp	.+18     	; 0x17ace <lif_chars+0x50>
   17abc:	80 e2       	ldi	r24, 0x20	; 32
   17abe:	90 e0       	ldi	r25, 0x00	; 0
   17ac0:	08 95       	ret
   17ac2:	80 e0       	ldi	r24, 0x00	; 0
   17ac4:	90 e0       	ldi	r25, 0x00	; 0
   17ac6:	08 95       	ret
   17ac8:	8f e5       	ldi	r24, 0x5F	; 95
   17aca:	90 e0       	ldi	r25, 0x00	; 0
   17acc:	08 95       	ret
   17ace:	8d e2       	ldi	r24, 0x2D	; 45
   17ad0:	90 e0       	ldi	r25, 0x00	; 0
   17ad2:	08 95       	ret

00017ad4 <lif_B2S>:
   17ad4:	a0 e0       	ldi	r26, 0x00	; 0
   17ad6:	b0 e0       	ldi	r27, 0x00	; 0
   17ad8:	e0 e7       	ldi	r30, 0x70	; 112
   17ada:	fd eb       	ldi	r31, 0xBD	; 189
   17adc:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
   17ae0:	5c 01       	movw	r10, r24
   17ae2:	6b 01       	movw	r12, r22
   17ae4:	ea 01       	movw	r28, r20
   17ae6:	4c 01       	movw	r8, r24
   17ae8:	ee 24       	eor	r14, r14
   17aea:	e3 94       	inc	r14
   17aec:	f1 2c       	mov	r15, r1
   17aee:	00 e0       	ldi	r16, 0x00	; 0
   17af0:	10 e0       	ldi	r17, 0x00	; 0
   17af2:	0c 17       	cp	r16, r28
   17af4:	1d 07       	cpc	r17, r29
   17af6:	6c f4       	brge	.+26     	; 0x17b12 <lif_B2S+0x3e>
   17af8:	f4 01       	movw	r30, r8
   17afa:	81 91       	ld	r24, Z+
   17afc:	4f 01       	movw	r8, r30
   17afe:	b8 01       	movw	r22, r16
   17b00:	90 e0       	ldi	r25, 0x00	; 0
   17b02:	bd df       	rcall	.-134    	; 0x17a7e <lif_chars>
   17b04:	89 2b       	or	r24, r25
   17b06:	11 f4       	brne	.+4      	; 0x17b0c <lif_B2S+0x38>
   17b08:	e1 2c       	mov	r14, r1
   17b0a:	f1 2c       	mov	r15, r1
   17b0c:	0f 5f       	subi	r16, 0xFF	; 255
   17b0e:	1f 4f       	sbci	r17, 0xFF	; 255
   17b10:	f0 cf       	rjmp	.-32     	; 0x17af2 <lif_B2S+0x1e>
   17b12:	d6 01       	movw	r26, r12
   17b14:	f5 01       	movw	r30, r10
   17b16:	cf 01       	movw	r24, r30
   17b18:	8a 19       	sub	r24, r10
   17b1a:	9b 09       	sbc	r25, r11
   17b1c:	8c 17       	cp	r24, r28
   17b1e:	9d 07       	cpc	r25, r29
   17b20:	1c f4       	brge	.+6      	; 0x17b28 <lif_B2S+0x54>
   17b22:	81 91       	ld	r24, Z+
   17b24:	8d 93       	st	X+, r24
   17b26:	f7 cf       	rjmp	.-18     	; 0x17b16 <lif_B2S+0x42>
   17b28:	d7 ff       	sbrs	r29, 7
   17b2a:	02 c0       	rjmp	.+4      	; 0x17b30 <lif_B2S+0x5c>
   17b2c:	c0 e0       	ldi	r28, 0x00	; 0
   17b2e:	d0 e0       	ldi	r29, 0x00	; 0
   17b30:	cc 0d       	add	r28, r12
   17b32:	dd 1d       	adc	r29, r13
   17b34:	18 82       	st	Y, r1
   17b36:	c6 01       	movw	r24, r12
   17b38:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <trim_tail>
   17b3c:	c7 01       	movw	r24, r14
   17b3e:	cd b7       	in	r28, 0x3d	; 61
   17b40:	de b7       	in	r29, 0x3e	; 62
   17b42:	ec e0       	ldi	r30, 0x0C	; 12
   17b44:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

00017b48 <lif_checkname>:
   17b48:	ef 92       	push	r14
   17b4a:	ff 92       	push	r15
   17b4c:	0f 93       	push	r16
   17b4e:	1f 93       	push	r17
   17b50:	cf 93       	push	r28
   17b52:	df 93       	push	r29
   17b54:	7c 01       	movw	r14, r24
   17b56:	ec 01       	movw	r28, r24
   17b58:	01 e0       	ldi	r16, 0x01	; 1
   17b5a:	10 e0       	ldi	r17, 0x00	; 0
   17b5c:	be 01       	movw	r22, r28
   17b5e:	6e 19       	sub	r22, r14
   17b60:	7f 09       	sbc	r23, r15
   17b62:	89 91       	ld	r24, Y+
   17b64:	88 23       	and	r24, r24
   17b66:	39 f0       	breq	.+14     	; 0x17b76 <lif_checkname+0x2e>
   17b68:	90 e0       	ldi	r25, 0x00	; 0
   17b6a:	89 df       	rcall	.-238    	; 0x17a7e <lif_chars>
   17b6c:	89 2b       	or	r24, r25
   17b6e:	b1 f7       	brne	.-20     	; 0x17b5c <lif_checkname+0x14>
   17b70:	00 e0       	ldi	r16, 0x00	; 0
   17b72:	10 e0       	ldi	r17, 0x00	; 0
   17b74:	f3 cf       	rjmp	.-26     	; 0x17b5c <lif_checkname+0x14>
   17b76:	c8 01       	movw	r24, r16
   17b78:	cd b7       	in	r28, 0x3d	; 61
   17b7a:	de b7       	in	r29, 0x3e	; 62
   17b7c:	e6 e0       	ldi	r30, 0x06	; 6
   17b7e:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00017b82 <lif_S2B>:
   17b82:	fb 01       	movw	r30, r22
   17b84:	dc 01       	movw	r26, r24
   17b86:	20 e0       	ldi	r18, 0x00	; 0
   17b88:	30 e0       	ldi	r19, 0x00	; 0
   17b8a:	61 91       	ld	r22, Z+
   17b8c:	61 11       	cpse	r22, r1
   17b8e:	05 c0       	rjmp	.+10     	; 0x17b9a <lif_S2B+0x18>
   17b90:	fc 01       	movw	r30, r24
   17b92:	e2 0f       	add	r30, r18
   17b94:	f3 1f       	adc	r31, r19
   17b96:	60 e2       	ldi	r22, 0x20	; 32
   17b98:	08 c0       	rjmp	.+16     	; 0x17baa <lif_S2B+0x28>
   17b9a:	24 17       	cp	r18, r20
   17b9c:	35 07       	cpc	r19, r21
   17b9e:	24 f4       	brge	.+8      	; 0x17ba8 <lif_S2B+0x26>
   17ba0:	6d 93       	st	X+, r22
   17ba2:	2f 5f       	subi	r18, 0xFF	; 255
   17ba4:	3f 4f       	sbci	r19, 0xFF	; 255
   17ba6:	f1 cf       	rjmp	.-30     	; 0x17b8a <lif_S2B+0x8>
   17ba8:	08 95       	ret
   17baa:	9f 01       	movw	r18, r30
   17bac:	28 1b       	sub	r18, r24
   17bae:	39 0b       	sbc	r19, r25
   17bb0:	24 17       	cp	r18, r20
   17bb2:	35 07       	cpc	r19, r21
   17bb4:	14 f4       	brge	.+4      	; 0x17bba <lif_S2B+0x38>
   17bb6:	61 93       	st	Z+, r22
   17bb8:	f8 cf       	rjmp	.-16     	; 0x17baa <lif_S2B+0x28>
   17bba:	08 95       	ret

00017bbc <lif_fixname>:
   17bbc:	a0 e0       	ldi	r26, 0x00	; 0
   17bbe:	b0 e0       	ldi	r27, 0x00	; 0
   17bc0:	e4 ee       	ldi	r30, 0xE4	; 228
   17bc2:	fd eb       	ldi	r31, 0xBD	; 189
   17bc4:	0c 94 cb df 	jmp	0x1bf96	; 0x1bf96 <__prologue_saves__+0x12>
   17bc8:	8c 01       	movw	r16, r24
   17bca:	cb 01       	movw	r24, r22
   17bcc:	7a 01       	movw	r14, r20
   17bce:	0e 94 87 74 	call	0xe90e	; 0xe90e <basename>
   17bd2:	6c 01       	movw	r12, r24
   17bd4:	e8 01       	movw	r28, r16
   17bd6:	80 e2       	ldi	r24, 0x20	; 32
   17bd8:	b8 2e       	mov	r11, r24
   17bda:	be 01       	movw	r22, r28
   17bdc:	60 1b       	sub	r22, r16
   17bde:	71 0b       	sbc	r23, r17
   17be0:	f6 01       	movw	r30, r12
   17be2:	81 91       	ld	r24, Z+
   17be4:	6f 01       	movw	r12, r30
   17be6:	81 11       	cpse	r24, r1
   17be8:	02 c0       	rjmp	.+4      	; 0x17bee <lif_fixname+0x32>
   17bea:	20 e2       	ldi	r18, 0x20	; 32
   17bec:	0e c0       	rjmp	.+28     	; 0x17c0a <lif_fixname+0x4e>
   17bee:	1e 14       	cp	r1, r14
   17bf0:	1f 04       	cpc	r1, r15
   17bf2:	dc f7       	brge	.-10     	; 0x17bea <lif_fixname+0x2e>
   17bf4:	8e 32       	cpi	r24, 0x2E	; 46
   17bf6:	c9 f3       	breq	.-14     	; 0x17bea <lif_fixname+0x2e>
   17bf8:	90 e0       	ldi	r25, 0x00	; 0
   17bfa:	41 df       	rcall	.-382    	; 0x17a7e <lif_chars>
   17bfc:	88 23       	and	r24, r24
   17bfe:	11 f0       	breq	.+4      	; 0x17c04 <lif_fixname+0x48>
   17c00:	88 83       	st	Y, r24
   17c02:	01 c0       	rjmp	.+2      	; 0x17c06 <lif_fixname+0x4a>
   17c04:	b8 82       	st	Y, r11
   17c06:	21 96       	adiw	r28, 0x01	; 1
   17c08:	e8 cf       	rjmp	.-48     	; 0x17bda <lif_fixname+0x1e>
   17c0a:	ce 01       	movw	r24, r28
   17c0c:	80 1b       	sub	r24, r16
   17c0e:	91 0b       	sbc	r25, r17
   17c10:	8e 15       	cp	r24, r14
   17c12:	9f 05       	cpc	r25, r15
   17c14:	14 f4       	brge	.+4      	; 0x17c1a <lif_fixname+0x5e>
   17c16:	29 93       	st	Y+, r18
   17c18:	f8 cf       	rjmp	.-16     	; 0x17c0a <lif_fixname+0x4e>
   17c1a:	18 82       	st	Y, r1
   17c1c:	f8 01       	movw	r30, r16
   17c1e:	01 90       	ld	r0, Z+
   17c20:	00 20       	and	r0, r0
   17c22:	e9 f7       	brne	.-6      	; 0x17c1e <lif_fixname+0x62>
   17c24:	cf 01       	movw	r24, r30
   17c26:	01 97       	sbiw	r24, 0x01	; 1
   17c28:	80 1b       	sub	r24, r16
   17c2a:	91 0b       	sbc	r25, r17
   17c2c:	cd b7       	in	r28, 0x3d	; 61
   17c2e:	de b7       	in	r29, 0x3e	; 62
   17c30:	e9 e0       	ldi	r30, 0x09	; 9
   17c32:	0c 94 e7 df 	jmp	0x1bfce	; 0x1bfce <__epilogue_restores__+0x12>

00017c36 <lif_vol2str>:
   17c36:	ef 92       	push	r14
   17c38:	ff 92       	push	r15
   17c3a:	0f 93       	push	r16
   17c3c:	1f 93       	push	r17
   17c3e:	cf 93       	push	r28
   17c40:	df 93       	push	r29
   17c42:	7c 01       	movw	r14, r24
   17c44:	eb 01       	movw	r28, r22
   17c46:	fc 01       	movw	r30, r24
   17c48:	04 a1       	ldd	r16, Z+36	; 0x24
   17c4a:	15 a1       	ldd	r17, Z+37	; 0x25
   17c4c:	20 e0       	ldi	r18, 0x00	; 0
   17c4e:	30 e0       	ldi	r19, 0x00	; 0
   17c50:	42 e0       	ldi	r20, 0x02	; 2
   17c52:	50 e0       	ldi	r21, 0x00	; 0
   17c54:	60 e0       	ldi	r22, 0x00	; 0
   17c56:	70 e0       	ldi	r23, 0x00	; 0
   17c58:	ce 01       	movw	r24, r28
   17c5a:	e8 dc       	rcall	.-1584   	; 0x1762c <V2B_MSB>
   17c5c:	b7 01       	movw	r22, r14
   17c5e:	6a 5d       	subi	r22, 0xDA	; 218
   17c60:	7f 4f       	sbci	r23, 0xFF	; 255
   17c62:	46 e0       	ldi	r20, 0x06	; 6
   17c64:	50 e0       	ldi	r21, 0x00	; 0
   17c66:	ce 01       	movw	r24, r28
   17c68:	02 96       	adiw	r24, 0x02	; 2
   17c6a:	8b df       	rcall	.-234    	; 0x17b82 <lif_S2B>
   17c6c:	f7 01       	movw	r30, r14
   17c6e:	05 a5       	ldd	r16, Z+45	; 0x2d
   17c70:	16 a5       	ldd	r17, Z+46	; 0x2e
   17c72:	27 a5       	ldd	r18, Z+47	; 0x2f
   17c74:	30 a9       	ldd	r19, Z+48	; 0x30
   17c76:	44 e0       	ldi	r20, 0x04	; 4
   17c78:	50 e0       	ldi	r21, 0x00	; 0
   17c7a:	68 e0       	ldi	r22, 0x08	; 8
   17c7c:	70 e0       	ldi	r23, 0x00	; 0
   17c7e:	ce 01       	movw	r24, r28
   17c80:	d5 dc       	rcall	.-1622   	; 0x1762c <V2B_MSB>
   17c82:	f7 01       	movw	r30, r14
   17c84:	01 a9       	ldd	r16, Z+49	; 0x31
   17c86:	12 a9       	ldd	r17, Z+50	; 0x32
   17c88:	20 e0       	ldi	r18, 0x00	; 0
   17c8a:	30 e0       	ldi	r19, 0x00	; 0
   17c8c:	42 e0       	ldi	r20, 0x02	; 2
   17c8e:	50 e0       	ldi	r21, 0x00	; 0
   17c90:	6c e0       	ldi	r22, 0x0C	; 12
   17c92:	70 e0       	ldi	r23, 0x00	; 0
   17c94:	ce 01       	movw	r24, r28
   17c96:	ca dc       	rcall	.-1644   	; 0x1762c <V2B_MSB>
   17c98:	00 e0       	ldi	r16, 0x00	; 0
   17c9a:	10 e0       	ldi	r17, 0x00	; 0
   17c9c:	98 01       	movw	r18, r16
   17c9e:	42 e0       	ldi	r20, 0x02	; 2
   17ca0:	50 e0       	ldi	r21, 0x00	; 0
   17ca2:	6e e0       	ldi	r22, 0x0E	; 14
   17ca4:	70 e0       	ldi	r23, 0x00	; 0
   17ca6:	ce 01       	movw	r24, r28
   17ca8:	c1 dc       	rcall	.-1662   	; 0x1762c <V2B_MSB>
   17caa:	f7 01       	movw	r30, r14
   17cac:	05 a9       	ldd	r16, Z+53	; 0x35
   17cae:	16 a9       	ldd	r17, Z+54	; 0x36
   17cb0:	27 a9       	ldd	r18, Z+55	; 0x37
   17cb2:	30 ad       	ldd	r19, Z+56	; 0x38
   17cb4:	44 e0       	ldi	r20, 0x04	; 4
   17cb6:	50 e0       	ldi	r21, 0x00	; 0
   17cb8:	60 e1       	ldi	r22, 0x10	; 16
   17cba:	70 e0       	ldi	r23, 0x00	; 0
   17cbc:	ce 01       	movw	r24, r28
   17cbe:	b6 dc       	rcall	.-1684   	; 0x1762c <V2B_MSB>
   17cc0:	f7 01       	movw	r30, r14
   17cc2:	01 ad       	ldd	r16, Z+57	; 0x39
   17cc4:	12 ad       	ldd	r17, Z+58	; 0x3a
   17cc6:	20 e0       	ldi	r18, 0x00	; 0
   17cc8:	30 e0       	ldi	r19, 0x00	; 0
   17cca:	42 e0       	ldi	r20, 0x02	; 2
   17ccc:	50 e0       	ldi	r21, 0x00	; 0
   17cce:	64 e1       	ldi	r22, 0x14	; 20
   17cd0:	70 e0       	ldi	r23, 0x00	; 0
   17cd2:	ce 01       	movw	r24, r28
   17cd4:	ab dc       	rcall	.-1706   	; 0x1762c <V2B_MSB>
   17cd6:	00 e0       	ldi	r16, 0x00	; 0
   17cd8:	10 e0       	ldi	r17, 0x00	; 0
   17cda:	98 01       	movw	r18, r16
   17cdc:	42 e0       	ldi	r20, 0x02	; 2
   17cde:	50 e0       	ldi	r21, 0x00	; 0
   17ce0:	66 e1       	ldi	r22, 0x16	; 22
   17ce2:	70 e0       	ldi	r23, 0x00	; 0
   17ce4:	ce 01       	movw	r24, r28
   17ce6:	a2 dc       	rcall	.-1724   	; 0x1762c <V2B_MSB>
   17ce8:	f7 01       	movw	r30, r14
   17cea:	fd 96       	adiw	r30, 0x3d	; 61
   17cec:	00 81       	ld	r16, Z
   17cee:	11 81       	ldd	r17, Z+1	; 0x01
   17cf0:	22 81       	ldd	r18, Z+2	; 0x02
   17cf2:	33 81       	ldd	r19, Z+3	; 0x03
   17cf4:	44 e0       	ldi	r20, 0x04	; 4
   17cf6:	50 e0       	ldi	r21, 0x00	; 0
   17cf8:	68 e1       	ldi	r22, 0x18	; 24
   17cfa:	70 e0       	ldi	r23, 0x00	; 0
   17cfc:	ce 01       	movw	r24, r28
   17cfe:	96 dc       	rcall	.-1748   	; 0x1762c <V2B_MSB>
   17d00:	f7 01       	movw	r30, r14
   17d02:	ef 5b       	subi	r30, 0xBF	; 191
   17d04:	ff 4f       	sbci	r31, 0xFF	; 255
   17d06:	00 81       	ld	r16, Z
   17d08:	11 81       	ldd	r17, Z+1	; 0x01
   17d0a:	22 81       	ldd	r18, Z+2	; 0x02
   17d0c:	33 81       	ldd	r19, Z+3	; 0x03
   17d0e:	44 e0       	ldi	r20, 0x04	; 4
   17d10:	50 e0       	ldi	r21, 0x00	; 0
   17d12:	6c e1       	ldi	r22, 0x1C	; 28
   17d14:	70 e0       	ldi	r23, 0x00	; 0
   17d16:	ce 01       	movw	r24, r28
   17d18:	89 dc       	rcall	.-1774   	; 0x1762c <V2B_MSB>
   17d1a:	f7 01       	movw	r30, r14
   17d1c:	eb 5b       	subi	r30, 0xBB	; 187
   17d1e:	ff 4f       	sbci	r31, 0xFF	; 255
   17d20:	00 81       	ld	r16, Z
   17d22:	11 81       	ldd	r17, Z+1	; 0x01
   17d24:	22 81       	ldd	r18, Z+2	; 0x02
   17d26:	33 81       	ldd	r19, Z+3	; 0x03
   17d28:	44 e0       	ldi	r20, 0x04	; 4
   17d2a:	50 e0       	ldi	r21, 0x00	; 0
   17d2c:	60 e2       	ldi	r22, 0x20	; 32
   17d2e:	70 e0       	ldi	r23, 0x00	; 0
   17d30:	ce 01       	movw	r24, r28
   17d32:	7c dc       	rcall	.-1800   	; 0x1762c <V2B_MSB>
   17d34:	de 01       	movw	r26, r28
   17d36:	94 96       	adiw	r26, 0x24	; 36
   17d38:	f7 01       	movw	r30, r14
   17d3a:	e7 5b       	subi	r30, 0xB7	; 183
   17d3c:	ff 4f       	sbci	r31, 0xFF	; 255
   17d3e:	86 e0       	ldi	r24, 0x06	; 6
   17d40:	01 90       	ld	r0, Z+
   17d42:	0d 92       	st	X+, r0
   17d44:	8a 95       	dec	r24
   17d46:	e1 f7       	brne	.-8      	; 0x17d40 <lif_vol2str+0x10a>
   17d48:	cd b7       	in	r28, 0x3d	; 61
   17d4a:	de b7       	in	r29, 0x3e	; 62
   17d4c:	e6 e0       	ldi	r30, 0x06	; 6
   17d4e:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00017d52 <lif_str2vol>:
   17d52:	0f 93       	push	r16
   17d54:	1f 93       	push	r17
   17d56:	cf 93       	push	r28
   17d58:	df 93       	push	r29
   17d5a:	8c 01       	movw	r16, r24
   17d5c:	eb 01       	movw	r28, r22
   17d5e:	42 e0       	ldi	r20, 0x02	; 2
   17d60:	50 e0       	ldi	r21, 0x00	; 0
   17d62:	60 e0       	ldi	r22, 0x00	; 0
   17d64:	70 e0       	ldi	r23, 0x00	; 0
   17d66:	8b dc       	rcall	.-1770   	; 0x1767e <B2V_MSB>
   17d68:	7d a3       	std	Y+37, r23	; 0x25
   17d6a:	6c a3       	std	Y+36, r22	; 0x24
   17d6c:	be 01       	movw	r22, r28
   17d6e:	6a 5d       	subi	r22, 0xDA	; 218
   17d70:	7f 4f       	sbci	r23, 0xFF	; 255
   17d72:	46 e0       	ldi	r20, 0x06	; 6
   17d74:	50 e0       	ldi	r21, 0x00	; 0
   17d76:	c8 01       	movw	r24, r16
   17d78:	02 96       	adiw	r24, 0x02	; 2
   17d7a:	ac de       	rcall	.-680    	; 0x17ad4 <lif_B2S>
   17d7c:	44 e0       	ldi	r20, 0x04	; 4
   17d7e:	50 e0       	ldi	r21, 0x00	; 0
   17d80:	68 e0       	ldi	r22, 0x08	; 8
   17d82:	70 e0       	ldi	r23, 0x00	; 0
   17d84:	c8 01       	movw	r24, r16
   17d86:	7b dc       	rcall	.-1802   	; 0x1767e <B2V_MSB>
   17d88:	6d a7       	std	Y+45, r22	; 0x2d
   17d8a:	7e a7       	std	Y+46, r23	; 0x2e
   17d8c:	8f a7       	std	Y+47, r24	; 0x2f
   17d8e:	98 ab       	std	Y+48, r25	; 0x30
   17d90:	42 e0       	ldi	r20, 0x02	; 2
   17d92:	50 e0       	ldi	r21, 0x00	; 0
   17d94:	6c e0       	ldi	r22, 0x0C	; 12
   17d96:	70 e0       	ldi	r23, 0x00	; 0
   17d98:	c8 01       	movw	r24, r16
   17d9a:	71 dc       	rcall	.-1822   	; 0x1767e <B2V_MSB>
   17d9c:	7a ab       	std	Y+50, r23	; 0x32
   17d9e:	69 ab       	std	Y+49, r22	; 0x31
   17da0:	42 e0       	ldi	r20, 0x02	; 2
   17da2:	50 e0       	ldi	r21, 0x00	; 0
   17da4:	6e e0       	ldi	r22, 0x0E	; 14
   17da6:	70 e0       	ldi	r23, 0x00	; 0
   17da8:	c8 01       	movw	r24, r16
   17daa:	69 dc       	rcall	.-1838   	; 0x1767e <B2V_MSB>
   17dac:	7c ab       	std	Y+52, r23	; 0x34
   17dae:	6b ab       	std	Y+51, r22	; 0x33
   17db0:	44 e0       	ldi	r20, 0x04	; 4
   17db2:	50 e0       	ldi	r21, 0x00	; 0
   17db4:	60 e1       	ldi	r22, 0x10	; 16
   17db6:	70 e0       	ldi	r23, 0x00	; 0
   17db8:	c8 01       	movw	r24, r16
   17dba:	61 dc       	rcall	.-1854   	; 0x1767e <B2V_MSB>
   17dbc:	6d ab       	std	Y+53, r22	; 0x35
   17dbe:	7e ab       	std	Y+54, r23	; 0x36
   17dc0:	8f ab       	std	Y+55, r24	; 0x37
   17dc2:	98 af       	std	Y+56, r25	; 0x38
   17dc4:	42 e0       	ldi	r20, 0x02	; 2
   17dc6:	50 e0       	ldi	r21, 0x00	; 0
   17dc8:	64 e1       	ldi	r22, 0x14	; 20
   17dca:	70 e0       	ldi	r23, 0x00	; 0
   17dcc:	c8 01       	movw	r24, r16
   17dce:	57 dc       	rcall	.-1874   	; 0x1767e <B2V_MSB>
   17dd0:	7a af       	std	Y+58, r23	; 0x3a
   17dd2:	69 af       	std	Y+57, r22	; 0x39
   17dd4:	42 e0       	ldi	r20, 0x02	; 2
   17dd6:	50 e0       	ldi	r21, 0x00	; 0
   17dd8:	66 e1       	ldi	r22, 0x16	; 22
   17dda:	70 e0       	ldi	r23, 0x00	; 0
   17ddc:	c8 01       	movw	r24, r16
   17dde:	4f dc       	rcall	.-1890   	; 0x1767e <B2V_MSB>
   17de0:	7c af       	std	Y+60, r23	; 0x3c
   17de2:	6b af       	std	Y+59, r22	; 0x3b
   17de4:	44 e0       	ldi	r20, 0x04	; 4
   17de6:	50 e0       	ldi	r21, 0x00	; 0
   17de8:	68 e1       	ldi	r22, 0x18	; 24
   17dea:	70 e0       	ldi	r23, 0x00	; 0
   17dec:	c8 01       	movw	r24, r16
   17dee:	47 dc       	rcall	.-1906   	; 0x1767e <B2V_MSB>
   17df0:	fe 01       	movw	r30, r28
   17df2:	fd 96       	adiw	r30, 0x3d	; 61
   17df4:	60 83       	st	Z, r22
   17df6:	71 83       	std	Z+1, r23	; 0x01
   17df8:	82 83       	std	Z+2, r24	; 0x02
   17dfa:	93 83       	std	Z+3, r25	; 0x03
   17dfc:	44 e0       	ldi	r20, 0x04	; 4
   17dfe:	50 e0       	ldi	r21, 0x00	; 0
   17e00:	6c e1       	ldi	r22, 0x1C	; 28
   17e02:	70 e0       	ldi	r23, 0x00	; 0
   17e04:	c8 01       	movw	r24, r16
   17e06:	3b dc       	rcall	.-1930   	; 0x1767e <B2V_MSB>
   17e08:	fe 01       	movw	r30, r28
   17e0a:	ef 5b       	subi	r30, 0xBF	; 191
   17e0c:	ff 4f       	sbci	r31, 0xFF	; 255
   17e0e:	60 83       	st	Z, r22
   17e10:	71 83       	std	Z+1, r23	; 0x01
   17e12:	82 83       	std	Z+2, r24	; 0x02
   17e14:	93 83       	std	Z+3, r25	; 0x03
   17e16:	44 e0       	ldi	r20, 0x04	; 4
   17e18:	50 e0       	ldi	r21, 0x00	; 0
   17e1a:	60 e2       	ldi	r22, 0x20	; 32
   17e1c:	70 e0       	ldi	r23, 0x00	; 0
   17e1e:	c8 01       	movw	r24, r16
   17e20:	2e dc       	rcall	.-1956   	; 0x1767e <B2V_MSB>
   17e22:	fe 01       	movw	r30, r28
   17e24:	eb 5b       	subi	r30, 0xBB	; 187
   17e26:	ff 4f       	sbci	r31, 0xFF	; 255
   17e28:	60 83       	st	Z, r22
   17e2a:	71 83       	std	Z+1, r23	; 0x01
   17e2c:	82 83       	std	Z+2, r24	; 0x02
   17e2e:	93 83       	std	Z+3, r25	; 0x03
   17e30:	de 01       	movw	r26, r28
   17e32:	a7 5b       	subi	r26, 0xB7	; 183
   17e34:	bf 4f       	sbci	r27, 0xFF	; 255
   17e36:	f8 01       	movw	r30, r16
   17e38:	b4 96       	adiw	r30, 0x24	; 36
   17e3a:	86 e0       	ldi	r24, 0x06	; 6
   17e3c:	01 90       	ld	r0, Z+
   17e3e:	0d 92       	st	X+, r0
   17e40:	8a 95       	dec	r24
   17e42:	e1 f7       	brne	.-8      	; 0x17e3c <lif_str2vol+0xea>
   17e44:	df 91       	pop	r29
   17e46:	cf 91       	pop	r28
   17e48:	1f 91       	pop	r17
   17e4a:	0f 91       	pop	r16
   17e4c:	08 95       	ret

00017e4e <lif_dir2str>:
   17e4e:	ef 92       	push	r14
   17e50:	ff 92       	push	r15
   17e52:	0f 93       	push	r16
   17e54:	1f 93       	push	r17
   17e56:	cf 93       	push	r28
   17e58:	df 93       	push	r29
   17e5a:	ec 01       	movw	r28, r24
   17e5c:	7b 01       	movw	r14, r22
   17e5e:	bc 01       	movw	r22, r24
   17e60:	61 5b       	subi	r22, 0xB1	; 177
   17e62:	7f 4f       	sbci	r23, 0xFF	; 255
   17e64:	4a e0       	ldi	r20, 0x0A	; 10
   17e66:	50 e0       	ldi	r21, 0x00	; 0
   17e68:	c7 01       	movw	r24, r14
   17e6a:	8b de       	rcall	.-746    	; 0x17b82 <lif_S2B>
   17e6c:	fe 01       	movw	r30, r28
   17e6e:	e6 5a       	subi	r30, 0xA6	; 166
   17e70:	ff 4f       	sbci	r31, 0xFF	; 255
   17e72:	00 81       	ld	r16, Z
   17e74:	11 81       	ldd	r17, Z+1	; 0x01
   17e76:	20 e0       	ldi	r18, 0x00	; 0
   17e78:	30 e0       	ldi	r19, 0x00	; 0
   17e7a:	42 e0       	ldi	r20, 0x02	; 2
   17e7c:	50 e0       	ldi	r21, 0x00	; 0
   17e7e:	6a e0       	ldi	r22, 0x0A	; 10
   17e80:	70 e0       	ldi	r23, 0x00	; 0
   17e82:	c7 01       	movw	r24, r14
   17e84:	d3 db       	rcall	.-2138   	; 0x1762c <V2B_MSB>
   17e86:	fe 01       	movw	r30, r28
   17e88:	e4 5a       	subi	r30, 0xA4	; 164
   17e8a:	ff 4f       	sbci	r31, 0xFF	; 255
   17e8c:	00 81       	ld	r16, Z
   17e8e:	11 81       	ldd	r17, Z+1	; 0x01
   17e90:	22 81       	ldd	r18, Z+2	; 0x02
   17e92:	33 81       	ldd	r19, Z+3	; 0x03
   17e94:	44 e0       	ldi	r20, 0x04	; 4
   17e96:	50 e0       	ldi	r21, 0x00	; 0
   17e98:	6c e0       	ldi	r22, 0x0C	; 12
   17e9a:	70 e0       	ldi	r23, 0x00	; 0
   17e9c:	c7 01       	movw	r24, r14
   17e9e:	c6 db       	rcall	.-2164   	; 0x1762c <V2B_MSB>
   17ea0:	fe 01       	movw	r30, r28
   17ea2:	e0 5a       	subi	r30, 0xA0	; 160
   17ea4:	ff 4f       	sbci	r31, 0xFF	; 255
   17ea6:	00 81       	ld	r16, Z
   17ea8:	11 81       	ldd	r17, Z+1	; 0x01
   17eaa:	22 81       	ldd	r18, Z+2	; 0x02
   17eac:	33 81       	ldd	r19, Z+3	; 0x03
   17eae:	44 e0       	ldi	r20, 0x04	; 4
   17eb0:	50 e0       	ldi	r21, 0x00	; 0
   17eb2:	60 e1       	ldi	r22, 0x10	; 16
   17eb4:	70 e0       	ldi	r23, 0x00	; 0
   17eb6:	c7 01       	movw	r24, r14
   17eb8:	b9 db       	rcall	.-2190   	; 0x1762c <V2B_MSB>
   17eba:	d7 01       	movw	r26, r14
   17ebc:	54 96       	adiw	r26, 0x14	; 20
   17ebe:	fe 01       	movw	r30, r28
   17ec0:	ec 59       	subi	r30, 0x9C	; 156
   17ec2:	ff 4f       	sbci	r31, 0xFF	; 255
   17ec4:	86 e0       	ldi	r24, 0x06	; 6
   17ec6:	01 90       	ld	r0, Z+
   17ec8:	0d 92       	st	X+, r0
   17eca:	8a 95       	dec	r24
   17ecc:	e1 f7       	brne	.-8      	; 0x17ec6 <lif_dir2str+0x78>
   17ece:	fe 01       	movw	r30, r28
   17ed0:	e6 59       	subi	r30, 0x96	; 150
   17ed2:	ff 4f       	sbci	r31, 0xFF	; 255
   17ed4:	00 81       	ld	r16, Z
   17ed6:	11 81       	ldd	r17, Z+1	; 0x01
   17ed8:	20 e0       	ldi	r18, 0x00	; 0
   17eda:	30 e0       	ldi	r19, 0x00	; 0
   17edc:	42 e0       	ldi	r20, 0x02	; 2
   17ede:	50 e0       	ldi	r21, 0x00	; 0
   17ee0:	6a e1       	ldi	r22, 0x1A	; 26
   17ee2:	70 e0       	ldi	r23, 0x00	; 0
   17ee4:	c7 01       	movw	r24, r14
   17ee6:	a2 db       	rcall	.-2236   	; 0x1762c <V2B_MSB>
   17ee8:	fe 01       	movw	r30, r28
   17eea:	e4 59       	subi	r30, 0x94	; 148
   17eec:	ff 4f       	sbci	r31, 0xFF	; 255
   17eee:	00 81       	ld	r16, Z
   17ef0:	11 81       	ldd	r17, Z+1	; 0x01
   17ef2:	20 e0       	ldi	r18, 0x00	; 0
   17ef4:	30 e0       	ldi	r19, 0x00	; 0
   17ef6:	42 e0       	ldi	r20, 0x02	; 2
   17ef8:	50 e0       	ldi	r21, 0x00	; 0
   17efa:	6c e1       	ldi	r22, 0x1C	; 28
   17efc:	70 e0       	ldi	r23, 0x00	; 0
   17efe:	c7 01       	movw	r24, r14
   17f00:	a9 db       	rcall	.-2222   	; 0x17654 <V2B_LSB>
   17f02:	c2 59       	subi	r28, 0x92	; 146
   17f04:	df 4f       	sbci	r29, 0xFF	; 255
   17f06:	08 81       	ld	r16, Y
   17f08:	19 81       	ldd	r17, Y+1	; 0x01
   17f0a:	20 e0       	ldi	r18, 0x00	; 0
   17f0c:	30 e0       	ldi	r19, 0x00	; 0
   17f0e:	42 e0       	ldi	r20, 0x02	; 2
   17f10:	50 e0       	ldi	r21, 0x00	; 0
   17f12:	6e e1       	ldi	r22, 0x1E	; 30
   17f14:	70 e0       	ldi	r23, 0x00	; 0
   17f16:	c7 01       	movw	r24, r14
   17f18:	9d db       	rcall	.-2246   	; 0x17654 <V2B_LSB>
   17f1a:	cd b7       	in	r28, 0x3d	; 61
   17f1c:	de b7       	in	r29, 0x3e	; 62
   17f1e:	e6 e0       	ldi	r30, 0x06	; 6
   17f20:	0c 94 ea df 	jmp	0x1bfd4	; 0x1bfd4 <__epilogue_restores__+0x18>

00017f24 <lif_str2dir>:
   17f24:	0f 93       	push	r16
   17f26:	1f 93       	push	r17
   17f28:	cf 93       	push	r28
   17f2a:	df 93       	push	r29
   17f2c:	8c 01       	movw	r16, r24
   17f2e:	eb 01       	movw	r28, r22
   17f30:	61 5b       	subi	r22, 0xB1	; 177
   17f32:	7f 4f       	sbci	r23, 0xFF	; 255
   17f34:	4a e0       	ldi	r20, 0x0A	; 10
   17f36:	50 e0       	ldi	r21, 0x00	; 0
   17f38:	cd dd       	rcall	.-1126   	; 0x17ad4 <lif_B2S>
   17f3a:	42 e0       	ldi	r20, 0x02	; 2
   17f3c:	50 e0       	ldi	r21, 0x00	; 0
   17f3e:	6a e0       	ldi	r22, 0x0A	; 10
   17f40:	70 e0       	ldi	r23, 0x00	; 0
   17f42:	c8 01       	movw	r24, r16
   17f44:	9c db       	rcall	.-2248   	; 0x1767e <B2V_MSB>
   17f46:	fe 01       	movw	r30, r28
   17f48:	e6 5a       	subi	r30, 0xA6	; 166
   17f4a:	ff 4f       	sbci	r31, 0xFF	; 255
   17f4c:	71 83       	std	Z+1, r23	; 0x01
   17f4e:	60 83       	st	Z, r22
   17f50:	44 e0       	ldi	r20, 0x04	; 4
   17f52:	50 e0       	ldi	r21, 0x00	; 0
   17f54:	6c e0       	ldi	r22, 0x0C	; 12
   17f56:	70 e0       	ldi	r23, 0x00	; 0
   17f58:	c8 01       	movw	r24, r16
   17f5a:	91 db       	rcall	.-2270   	; 0x1767e <B2V_MSB>
   17f5c:	fe 01       	movw	r30, r28
   17f5e:	e4 5a       	subi	r30, 0xA4	; 164
   17f60:	ff 4f       	sbci	r31, 0xFF	; 255
   17f62:	60 83       	st	Z, r22
   17f64:	71 83       	std	Z+1, r23	; 0x01
   17f66:	82 83       	std	Z+2, r24	; 0x02
   17f68:	93 83       	std	Z+3, r25	; 0x03
   17f6a:	44 e0       	ldi	r20, 0x04	; 4
   17f6c:	50 e0       	ldi	r21, 0x00	; 0
   17f6e:	60 e1       	ldi	r22, 0x10	; 16
   17f70:	70 e0       	ldi	r23, 0x00	; 0
   17f72:	c8 01       	movw	r24, r16
   17f74:	84 db       	rcall	.-2296   	; 0x1767e <B2V_MSB>
   17f76:	fe 01       	movw	r30, r28
   17f78:	e0 5a       	subi	r30, 0xA0	; 160
   17f7a:	ff 4f       	sbci	r31, 0xFF	; 255
   17f7c:	60 83       	st	Z, r22
   17f7e:	71 83       	std	Z+1, r23	; 0x01
   17f80:	82 83       	std	Z+2, r24	; 0x02
   17f82:	93 83       	std	Z+3, r25	; 0x03
   17f84:	de 01       	movw	r26, r28
   17f86:	ac 59       	subi	r26, 0x9C	; 156
   17f88:	bf 4f       	sbci	r27, 0xFF	; 255
   17f8a:	f8 01       	movw	r30, r16
   17f8c:	74 96       	adiw	r30, 0x14	; 20
   17f8e:	86 e0       	ldi	r24, 0x06	; 6
   17f90:	01 90       	ld	r0, Z+
   17f92:	0d 92       	st	X+, r0
   17f94:	8a 95       	dec	r24
   17f96:	e1 f7       	brne	.-8      	; 0x17f90 <lif_str2dir+0x6c>
   17f98:	42 e0       	ldi	r20, 0x02	; 2
   17f9a:	50 e0       	ldi	r21, 0x00	; 0
   17f9c:	6a e1       	ldi	r22, 0x1A	; 26
   17f9e:	70 e0       	ldi	r23, 0x00	; 0
   17fa0:	c8 01       	movw	r24, r16
   17fa2:	6d db       	rcall	.-2342   	; 0x1767e <B2V_MSB>
   17fa4:	fe 01       	movw	r30, r28
   17fa6:	e6 59       	subi	r30, 0x96	; 150
   17fa8:	ff 4f       	sbci	r31, 0xFF	; 255
   17faa:	71 83       	std	Z+1, r23	; 0x01
   17fac:	60 83       	st	Z, r22
   17fae:	42 e0       	ldi	r20, 0x02	; 2
   17fb0:	50 e0       	ldi	r21, 0x00	; 0
   17fb2:	6c e1       	ldi	r22, 0x1C	; 28
   17fb4:	70 e0       	ldi	r23, 0x00	; 0
   17fb6:	c8 01       	movw	r24, r16
   17fb8:	81 db       	rcall	.-2302   	; 0x176bc <B2V_LSB>
   17fba:	fe 01       	movw	r30, r28
   17fbc:	e4 59       	subi	r30, 0x94	; 148
   17fbe:	ff 4f       	sbci	r31, 0xFF	; 255
   17fc0:	71 83       	std	Z+1, r23	; 0x01
   17fc2:	60 83       	st	Z, r22
   17fc4:	42 e0       	ldi	r20, 0x02	; 2
   17fc6:	50 e0       	ldi	r21, 0x00	; 0
   17fc8:	6e e1       	ldi	r22, 0x1E	; 30
   17fca:	70 e0       	ldi	r23, 0x00	; 0
   17fcc:	c8 01       	movw	r24, r16
   17fce:	76 db       	rcall	.-2324   	; 0x176bc <B2V_LSB>
   17fd0:	c2 59       	subi	r28, 0x92	; 146
   17fd2:	df 4f       	sbci	r29, 0xFF	; 255
   17fd4:	79 83       	std	Y+1, r23	; 0x01
   17fd6:	68 83       	st	Y, r22
   17fd8:	df 91       	pop	r29
   17fda:	cf 91       	pop	r28
   17fdc:	1f 91       	pop	r17
   17fde:	0f 91       	pop	r16
   17fe0:	08 95       	ret

00017fe2 <lif_BIN2BCD>:
   17fe2:	6a e0       	ldi	r22, 0x0A	; 10
   17fe4:	0e 94 22 df 	call	0x1be44	; 0x1be44 <__udivmodqi4>
   17fe8:	82 95       	swap	r24
   17fea:	80 7f       	andi	r24, 0xF0	; 240
   17fec:	89 2b       	or	r24, r25
   17fee:	08 95       	ret

00017ff0 <lif_BCD2BIN>:
   17ff0:	28 2f       	mov	r18, r24
   17ff2:	22 95       	swap	r18
   17ff4:	2f 70       	andi	r18, 0x0F	; 15
   17ff6:	8f 70       	andi	r24, 0x0F	; 15
   17ff8:	90 e0       	ldi	r25, 0x00	; 0
   17ffa:	3a e0       	ldi	r19, 0x0A	; 10
   17ffc:	23 9f       	mul	r18, r19
   17ffe:	80 0d       	add	r24, r0
   18000:	91 1d       	adc	r25, r1
   18002:	11 24       	eor	r1, r1
   18004:	08 95       	ret

00018006 <lif_time2lifbcd>:
   18006:	aa e1       	ldi	r26, 0x1A	; 26
   18008:	b0 e0       	ldi	r27, 0x00	; 0
   1800a:	e9 e0       	ldi	r30, 0x09	; 9
   1800c:	f0 ec       	ldi	r31, 0xC0	; 192
   1800e:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
   18012:	8b 01       	movw	r16, r22
   18014:	9c 01       	movw	r18, r24
   18016:	6f 8b       	std	Y+23, r22	; 0x17
   18018:	78 8f       	std	Y+24, r23	; 0x18
   1801a:	89 8f       	std	Y+25, r24	; 0x19
   1801c:	9a 8f       	std	Y+26, r25	; 0x1a
   1801e:	67 2b       	or	r22, r23
   18020:	68 2b       	or	r22, r24
   18022:	69 2b       	or	r22, r25
   18024:	41 f4       	brne	.+16     	; 0x18036 <lif_time2lifbcd+0x30>
   18026:	fa 01       	movw	r30, r20
   18028:	ca 01       	movw	r24, r20
   1802a:	06 96       	adiw	r24, 0x06	; 6
   1802c:	11 92       	st	Z+, r1
   1802e:	e8 17       	cp	r30, r24
   18030:	f9 07       	cpc	r31, r25
   18032:	e1 f7       	brne	.-8      	; 0x1802c <lif_time2lifbcd+0x26>
   18034:	26 c0       	rjmp	.+76     	; 0x18082 <lif_time2lifbcd+0x7c>
   18036:	8a 01       	movw	r16, r20
   18038:	be 01       	movw	r22, r28
   1803a:	6f 5f       	subi	r22, 0xFF	; 255
   1803c:	7f 4f       	sbci	r23, 0xFF	; 255
   1803e:	ce 01       	movw	r24, r28
   18040:	47 96       	adiw	r24, 0x17	; 23
   18042:	0e 94 c2 34 	call	0x6984	; 0x6984 <gmtime_r>
   18046:	8b 85       	ldd	r24, Y+11	; 0x0b
   18048:	9c 85       	ldd	r25, Y+12	; 0x0c
   1804a:	64 e6       	ldi	r22, 0x64	; 100
   1804c:	70 e0       	ldi	r23, 0x00	; 0
   1804e:	0e 94 42 df 	call	0x1be84	; 0x1be84 <__divmodhi4>
   18052:	c7 df       	rcall	.-114    	; 0x17fe2 <lif_BIN2BCD>
   18054:	f8 01       	movw	r30, r16
   18056:	80 83       	st	Z, r24
   18058:	89 85       	ldd	r24, Y+9	; 0x09
   1805a:	8f 5f       	subi	r24, 0xFF	; 255
   1805c:	c2 df       	rcall	.-124    	; 0x17fe2 <lif_BIN2BCD>
   1805e:	f8 01       	movw	r30, r16
   18060:	81 83       	std	Z+1, r24	; 0x01
   18062:	8f 81       	ldd	r24, Y+7	; 0x07
   18064:	be df       	rcall	.-132    	; 0x17fe2 <lif_BIN2BCD>
   18066:	f8 01       	movw	r30, r16
   18068:	82 83       	std	Z+2, r24	; 0x02
   1806a:	8d 81       	ldd	r24, Y+5	; 0x05
   1806c:	ba df       	rcall	.-140    	; 0x17fe2 <lif_BIN2BCD>
   1806e:	f8 01       	movw	r30, r16
   18070:	83 83       	std	Z+3, r24	; 0x03
   18072:	8b 81       	ldd	r24, Y+3	; 0x03
   18074:	b6 df       	rcall	.-148    	; 0x17fe2 <lif_BIN2BCD>
   18076:	f8 01       	movw	r30, r16
   18078:	84 83       	std	Z+4, r24	; 0x04
   1807a:	89 81       	ldd	r24, Y+1	; 0x01
   1807c:	b2 df       	rcall	.-156    	; 0x17fe2 <lif_BIN2BCD>
   1807e:	f8 01       	movw	r30, r16
   18080:	85 83       	std	Z+5, r24	; 0x05
   18082:	6a 96       	adiw	r28, 0x1a	; 26
   18084:	e4 e0       	ldi	r30, 0x04	; 4
   18086:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

0001808a <lif_lifbcd2time>:
   1808a:	a6 e1       	ldi	r26, 0x16	; 22
   1808c:	b0 e0       	ldi	r27, 0x00	; 0
   1808e:	eb e4       	ldi	r30, 0x4B	; 75
   18090:	f0 ec       	ldi	r31, 0xC0	; 192
   18092:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
   18096:	8c 01       	movw	r16, r24
   18098:	7c 01       	movw	r14, r24
   1809a:	5c 01       	movw	r10, r24
   1809c:	26 e0       	ldi	r18, 0x06	; 6
   1809e:	a2 0e       	add	r10, r18
   180a0:	b1 1c       	adc	r11, r1
   180a2:	cc 24       	eor	r12, r12
   180a4:	c3 94       	inc	r12
   180a6:	d1 2c       	mov	r13, r1
   180a8:	f7 01       	movw	r30, r14
   180aa:	81 91       	ld	r24, Z+
   180ac:	7f 01       	movw	r14, r30
   180ae:	a0 df       	rcall	.-192    	; 0x17ff0 <lif_BCD2BIN>
   180b0:	89 2b       	or	r24, r25
   180b2:	11 f0       	breq	.+4      	; 0x180b8 <lif_lifbcd2time+0x2e>
   180b4:	c1 2c       	mov	r12, r1
   180b6:	d1 2c       	mov	r13, r1
   180b8:	ea 14       	cp	r14, r10
   180ba:	fb 04       	cpc	r15, r11
   180bc:	a9 f7       	brne	.-22     	; 0x180a8 <lif_lifbcd2time+0x1e>
   180be:	c1 14       	cp	r12, r1
   180c0:	d1 04       	cpc	r13, r1
   180c2:	61 f5       	brne	.+88     	; 0x1811c <lif_lifbcd2time+0x92>
   180c4:	f8 01       	movw	r30, r16
   180c6:	80 81       	ld	r24, Z
   180c8:	93 df       	rcall	.-218    	; 0x17ff0 <lif_BCD2BIN>
   180ca:	7c 01       	movw	r14, r24
   180cc:	f8 01       	movw	r30, r16
   180ce:	81 81       	ldd	r24, Z+1	; 0x01
   180d0:	8f df       	rcall	.-226    	; 0x17ff0 <lif_BCD2BIN>
   180d2:	01 97       	sbiw	r24, 0x01	; 1
   180d4:	f6 e4       	ldi	r31, 0x46	; 70
   180d6:	ef 16       	cp	r14, r31
   180d8:	f1 04       	cpc	r15, r1
   180da:	1c f4       	brge	.+6      	; 0x180e2 <lif_lifbcd2time+0x58>
   180dc:	24 e6       	ldi	r18, 0x64	; 100
   180de:	e2 0e       	add	r14, r18
   180e0:	f1 1c       	adc	r15, r1
   180e2:	fc 86       	std	Y+12, r15	; 0x0c
   180e4:	eb 86       	std	Y+11, r14	; 0x0b
   180e6:	9a 87       	std	Y+10, r25	; 0x0a
   180e8:	89 87       	std	Y+9, r24	; 0x09
   180ea:	f8 01       	movw	r30, r16
   180ec:	82 81       	ldd	r24, Z+2	; 0x02
   180ee:	80 df       	rcall	.-256    	; 0x17ff0 <lif_BCD2BIN>
   180f0:	98 87       	std	Y+8, r25	; 0x08
   180f2:	8f 83       	std	Y+7, r24	; 0x07
   180f4:	f8 01       	movw	r30, r16
   180f6:	83 81       	ldd	r24, Z+3	; 0x03
   180f8:	7b df       	rcall	.-266    	; 0x17ff0 <lif_BCD2BIN>
   180fa:	9e 83       	std	Y+6, r25	; 0x06
   180fc:	8d 83       	std	Y+5, r24	; 0x05
   180fe:	f8 01       	movw	r30, r16
   18100:	84 81       	ldd	r24, Z+4	; 0x04
   18102:	76 df       	rcall	.-276    	; 0x17ff0 <lif_BCD2BIN>
   18104:	9c 83       	std	Y+4, r25	; 0x04
   18106:	8b 83       	std	Y+3, r24	; 0x03
   18108:	f8 01       	movw	r30, r16
   1810a:	85 81       	ldd	r24, Z+5	; 0x05
   1810c:	71 df       	rcall	.-286    	; 0x17ff0 <lif_BCD2BIN>
   1810e:	9a 83       	std	Y+2, r25	; 0x02
   18110:	89 83       	std	Y+1, r24	; 0x01
   18112:	ce 01       	movw	r24, r28
   18114:	01 96       	adiw	r24, 0x01	; 1
   18116:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <timegm>
   1811a:	03 c0       	rjmp	.+6      	; 0x18122 <lif_lifbcd2time+0x98>
   1811c:	60 e0       	ldi	r22, 0x00	; 0
   1811e:	70 e0       	ldi	r23, 0x00	; 0
   18120:	cb 01       	movw	r24, r22
   18122:	66 96       	adiw	r28, 0x16	; 22
   18124:	ea e0       	ldi	r30, 0x0A	; 10
   18126:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

0001812a <lif_ctime_gmt>:
   1812a:	a6 e1       	ldi	r26, 0x16	; 22
   1812c:	b0 e0       	ldi	r27, 0x00	; 0
   1812e:	eb e9       	ldi	r30, 0x9B	; 155
   18130:	f0 ec       	ldi	r31, 0xC0	; 192
   18132:	0c 94 d0 df 	jmp	0x1bfa0	; 0x1bfa0 <__prologue_saves__+0x1c>
   18136:	20 e2       	ldi	r18, 0x20	; 32
   18138:	e7 ed       	ldi	r30, 0xD7	; 215
   1813a:	f9 e1       	ldi	r31, 0x19	; 25
   1813c:	df 01       	movw	r26, r30
   1813e:	1d 92       	st	X+, r1
   18140:	2a 95       	dec	r18
   18142:	e9 f7       	brne	.-6      	; 0x1813e <lif_ctime_gmt+0x14>
   18144:	be 01       	movw	r22, r28
   18146:	6f 5f       	subi	r22, 0xFF	; 255
   18148:	7f 4f       	sbci	r23, 0xFF	; 255
   1814a:	0e 94 c2 34 	call	0x6984	; 0x6984 <gmtime_r>
   1814e:	67 ed       	ldi	r22, 0xD7	; 215
   18150:	79 e1       	ldi	r23, 0x19	; 25
   18152:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <asctime_r>
   18156:	8c 01       	movw	r16, r24
   18158:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <trim_tail>
   1815c:	c8 01       	movw	r24, r16
   1815e:	66 96       	adiw	r28, 0x16	; 22
   18160:	e4 e0       	ldi	r30, 0x04	; 4
   18162:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00018166 <lif_lifbcd2timestr>:
   18166:	a4 e0       	ldi	r26, 0x04	; 4
   18168:	b0 e0       	ldi	r27, 0x00	; 0
   1816a:	e9 eb       	ldi	r30, 0xB9	; 185
   1816c:	f0 ec       	ldi	r31, 0xC0	; 192
   1816e:	0c 94 d2 df 	jmp	0x1bfa4	; 0x1bfa4 <__prologue_saves__+0x20>
   18172:	20 e2       	ldi	r18, 0x20	; 32
   18174:	e7 eb       	ldi	r30, 0xB7	; 183
   18176:	f9 e1       	ldi	r31, 0x19	; 25
   18178:	df 01       	movw	r26, r30
   1817a:	1d 92       	st	X+, r1
   1817c:	2a 95       	dec	r18
   1817e:	e9 f7       	brne	.-6      	; 0x1817a <lif_lifbcd2timestr+0x14>
   18180:	84 df       	rcall	.-248    	; 0x1808a <lif_lifbcd2time>
   18182:	69 83       	std	Y+1, r22	; 0x01
   18184:	7a 83       	std	Y+2, r23	; 0x02
   18186:	8b 83       	std	Y+3, r24	; 0x03
   18188:	9c 83       	std	Y+4, r25	; 0x04
   1818a:	67 2b       	or	r22, r23
   1818c:	68 2b       	or	r22, r24
   1818e:	69 2b       	or	r22, r25
   18190:	29 f0       	breq	.+10     	; 0x1819c <lif_lifbcd2timestr+0x36>
   18192:	ce 01       	movw	r24, r28
   18194:	01 96       	adiw	r24, 0x01	; 1
   18196:	c9 df       	rcall	.-110    	; 0x1812a <lif_ctime_gmt>
   18198:	bc 01       	movw	r22, r24
   1819a:	02 c0       	rjmp	.+4      	; 0x181a0 <lif_lifbcd2timestr+0x3a>
   1819c:	60 e1       	ldi	r22, 0x10	; 16
   1819e:	76 e1       	ldi	r23, 0x16	; 22
   181a0:	87 eb       	ldi	r24, 0xB7	; 183
   181a2:	99 e1       	ldi	r25, 0x19	; 25
   181a4:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <strcpy>
   181a8:	87 eb       	ldi	r24, 0xB7	; 183
   181aa:	99 e1       	ldi	r25, 0x19	; 25
   181ac:	24 96       	adiw	r28, 0x04	; 4
   181ae:	e2 e0       	ldi	r30, 0x02	; 2
   181b0:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

000181b4 <lif_image_clear>:
   181b4:	20 e7       	ldi	r18, 0x70	; 112
   181b6:	fc 01       	movw	r30, r24
   181b8:	11 92       	st	Z+, r1
   181ba:	2a 95       	dec	r18
   181bc:	e9 f7       	brne	.-6      	; 0x181b8 <lif_image_clear+0x4>
   181be:	08 95       	ret

000181c0 <lif_dir_clear>:
   181c0:	81 5b       	subi	r24, 0xB1	; 177
   181c2:	9f 4f       	sbci	r25, 0xFF	; 255
   181c4:	21 e2       	ldi	r18, 0x21	; 33
   181c6:	fc 01       	movw	r30, r24
   181c8:	11 92       	st	Z+, r1
   181ca:	2a 95       	dec	r18
   181cc:	e9 f7       	brne	.-6      	; 0x181c8 <lif_dir_clear+0x8>
   181ce:	08 95       	ret

000181d0 <lif_vol_clear>:
   181d0:	84 96       	adiw	r24, 0x24	; 36
   181d2:	2b e2       	ldi	r18, 0x2B	; 43
   181d4:	fc 01       	movw	r30, r24
   181d6:	11 92       	st	Z+, r1
   181d8:	2a 95       	dec	r18
   181da:	e9 f7       	brne	.-6      	; 0x181d6 <lif_vol_clear+0x6>
   181dc:	08 95       	ret

000181de <lif_dump_vol>:
   181de:	cf 93       	push	r28
   181e0:	df 93       	push	r29
   181e2:	ad b7       	in	r26, 0x3d	; 61
   181e4:	be b7       	in	r27, 0x3e	; 62
   181e6:	17 97       	sbiw	r26, 0x07	; 7
   181e8:	0f b6       	in	r0, 0x3f	; 63
   181ea:	f8 94       	cli
   181ec:	be bf       	out	0x3e, r27	; 62
   181ee:	0f be       	out	0x3f, r0	; 63
   181f0:	ad bf       	out	0x3d, r26	; 61
   181f2:	ec 01       	movw	r28, r24
   181f4:	ed b7       	in	r30, 0x3d	; 61
   181f6:	fe b7       	in	r31, 0x3e	; 62
   181f8:	75 83       	std	Z+5, r23	; 0x05
   181fa:	64 83       	std	Z+4, r22	; 0x04
   181fc:	8a e2       	ldi	r24, 0x2A	; 42
   181fe:	9f e3       	ldi	r25, 0x3F	; 63
   18200:	a0 e0       	ldi	r26, 0x00	; 0
   18202:	81 83       	std	Z+1, r24	; 0x01
   18204:	92 83       	std	Z+2, r25	; 0x02
   18206:	a3 83       	std	Z+3, r26	; 0x03
   18208:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1820c:	88 81       	ld	r24, Y
   1820e:	99 81       	ldd	r25, Y+1	; 0x01
   18210:	ed b7       	in	r30, 0x3d	; 61
   18212:	fe b7       	in	r31, 0x3e	; 62
   18214:	95 83       	std	Z+5, r25	; 0x05
   18216:	84 83       	std	Z+4, r24	; 0x04
   18218:	80 e1       	ldi	r24, 0x10	; 16
   1821a:	9f e3       	ldi	r25, 0x3F	; 63
   1821c:	a0 e0       	ldi	r26, 0x00	; 0
   1821e:	81 83       	std	Z+1, r24	; 0x01
   18220:	92 83       	std	Z+2, r25	; 0x02
   18222:	a3 83       	std	Z+3, r26	; 0x03
   18224:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18228:	8c 81       	ldd	r24, Y+4	; 0x04
   1822a:	9d 81       	ldd	r25, Y+5	; 0x05
   1822c:	ae 81       	ldd	r26, Y+6	; 0x06
   1822e:	bf 81       	ldd	r27, Y+7	; 0x07
   18230:	ed b7       	in	r30, 0x3d	; 61
   18232:	fe b7       	in	r31, 0x3e	; 62
   18234:	84 83       	std	Z+4, r24	; 0x04
   18236:	95 83       	std	Z+5, r25	; 0x05
   18238:	a6 83       	std	Z+6, r26	; 0x06
   1823a:	b7 83       	std	Z+7, r27	; 0x07
   1823c:	83 ef       	ldi	r24, 0xF3	; 243
   1823e:	9e e3       	ldi	r25, 0x3E	; 62
   18240:	a0 e0       	ldi	r26, 0x00	; 0
   18242:	81 83       	std	Z+1, r24	; 0x01
   18244:	92 83       	std	Z+2, r25	; 0x02
   18246:	a3 83       	std	Z+3, r26	; 0x03
   18248:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1824c:	88 85       	ldd	r24, Y+8	; 0x08
   1824e:	99 85       	ldd	r25, Y+9	; 0x09
   18250:	aa 85       	ldd	r26, Y+10	; 0x0a
   18252:	bb 85       	ldd	r27, Y+11	; 0x0b
   18254:	ed b7       	in	r30, 0x3d	; 61
   18256:	fe b7       	in	r31, 0x3e	; 62
   18258:	84 83       	std	Z+4, r24	; 0x04
   1825a:	95 83       	std	Z+5, r25	; 0x05
   1825c:	a6 83       	std	Z+6, r26	; 0x06
   1825e:	b7 83       	std	Z+7, r27	; 0x07
   18260:	86 ed       	ldi	r24, 0xD6	; 214
   18262:	9e e3       	ldi	r25, 0x3E	; 62
   18264:	a0 e0       	ldi	r26, 0x00	; 0
   18266:	81 83       	std	Z+1, r24	; 0x01
   18268:	92 83       	std	Z+2, r25	; 0x02
   1826a:	a3 83       	std	Z+3, r26	; 0x03
   1826c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18270:	8c 85       	ldd	r24, Y+12	; 0x0c
   18272:	9d 85       	ldd	r25, Y+13	; 0x0d
   18274:	ae 85       	ldd	r26, Y+14	; 0x0e
   18276:	bf 85       	ldd	r27, Y+15	; 0x0f
   18278:	ed b7       	in	r30, 0x3d	; 61
   1827a:	fe b7       	in	r31, 0x3e	; 62
   1827c:	84 83       	std	Z+4, r24	; 0x04
   1827e:	95 83       	std	Z+5, r25	; 0x05
   18280:	a6 83       	std	Z+6, r26	; 0x06
   18282:	b7 83       	std	Z+7, r27	; 0x07
   18284:	89 eb       	ldi	r24, 0xB9	; 185
   18286:	9e e3       	ldi	r25, 0x3E	; 62
   18288:	a0 e0       	ldi	r26, 0x00	; 0
   1828a:	81 83       	std	Z+1, r24	; 0x01
   1828c:	92 83       	std	Z+2, r25	; 0x02
   1828e:	a3 83       	std	Z+3, r26	; 0x03
   18290:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18294:	88 89       	ldd	r24, Y+16	; 0x10
   18296:	99 89       	ldd	r25, Y+17	; 0x11
   18298:	aa 89       	ldd	r26, Y+18	; 0x12
   1829a:	bb 89       	ldd	r27, Y+19	; 0x13
   1829c:	ed b7       	in	r30, 0x3d	; 61
   1829e:	fe b7       	in	r31, 0x3e	; 62
   182a0:	84 83       	std	Z+4, r24	; 0x04
   182a2:	95 83       	std	Z+5, r25	; 0x05
   182a4:	a6 83       	std	Z+6, r26	; 0x06
   182a6:	b7 83       	std	Z+7, r27	; 0x07
   182a8:	8c e9       	ldi	r24, 0x9C	; 156
   182aa:	9e e3       	ldi	r25, 0x3E	; 62
   182ac:	a0 e0       	ldi	r26, 0x00	; 0
   182ae:	81 83       	std	Z+1, r24	; 0x01
   182b0:	92 83       	std	Z+2, r25	; 0x02
   182b2:	a3 83       	std	Z+3, r26	; 0x03
   182b4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   182b8:	8c 89       	ldd	r24, Y+20	; 0x14
   182ba:	9d 89       	ldd	r25, Y+21	; 0x15
   182bc:	ae 89       	ldd	r26, Y+22	; 0x16
   182be:	bf 89       	ldd	r27, Y+23	; 0x17
   182c0:	ed b7       	in	r30, 0x3d	; 61
   182c2:	fe b7       	in	r31, 0x3e	; 62
   182c4:	84 83       	std	Z+4, r24	; 0x04
   182c6:	95 83       	std	Z+5, r25	; 0x05
   182c8:	a6 83       	std	Z+6, r26	; 0x06
   182ca:	b7 83       	std	Z+7, r27	; 0x07
   182cc:	8f e7       	ldi	r24, 0x7F	; 127
   182ce:	9e e3       	ldi	r25, 0x3E	; 62
   182d0:	a0 e0       	ldi	r26, 0x00	; 0
   182d2:	81 83       	std	Z+1, r24	; 0x01
   182d4:	92 83       	std	Z+2, r25	; 0x02
   182d6:	a3 83       	std	Z+3, r26	; 0x03
   182d8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   182dc:	88 8d       	ldd	r24, Y+24	; 0x18
   182de:	99 8d       	ldd	r25, Y+25	; 0x19
   182e0:	aa 8d       	ldd	r26, Y+26	; 0x1a
   182e2:	bb 8d       	ldd	r27, Y+27	; 0x1b
   182e4:	ed b7       	in	r30, 0x3d	; 61
   182e6:	fe b7       	in	r31, 0x3e	; 62
   182e8:	84 83       	std	Z+4, r24	; 0x04
   182ea:	95 83       	std	Z+5, r25	; 0x05
   182ec:	a6 83       	std	Z+6, r26	; 0x06
   182ee:	b7 83       	std	Z+7, r27	; 0x07
   182f0:	82 e6       	ldi	r24, 0x62	; 98
   182f2:	9e e3       	ldi	r25, 0x3E	; 62
   182f4:	a0 e0       	ldi	r26, 0x00	; 0
   182f6:	81 83       	std	Z+1, r24	; 0x01
   182f8:	92 83       	std	Z+2, r25	; 0x02
   182fa:	a3 83       	std	Z+3, r26	; 0x03
   182fc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18300:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18302:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18304:	09 2e       	mov	r0, r25
   18306:	00 0c       	add	r0, r0
   18308:	aa 0b       	sbc	r26, r26
   1830a:	bb 0b       	sbc	r27, r27
   1830c:	ed b7       	in	r30, 0x3d	; 61
   1830e:	fe b7       	in	r31, 0x3e	; 62
   18310:	84 83       	std	Z+4, r24	; 0x04
   18312:	95 83       	std	Z+5, r25	; 0x05
   18314:	a6 83       	std	Z+6, r26	; 0x06
   18316:	b7 83       	std	Z+7, r27	; 0x07
   18318:	85 e4       	ldi	r24, 0x45	; 69
   1831a:	9e e3       	ldi	r25, 0x3E	; 62
   1831c:	a0 e0       	ldi	r26, 0x00	; 0
   1831e:	81 83       	std	Z+1, r24	; 0x01
   18320:	92 83       	std	Z+2, r25	; 0x02
   18322:	a3 83       	std	Z+3, r26	; 0x03
   18324:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18328:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1832a:	9f 8d       	ldd	r25, Y+31	; 0x1f
   1832c:	09 2e       	mov	r0, r25
   1832e:	00 0c       	add	r0, r0
   18330:	aa 0b       	sbc	r26, r26
   18332:	bb 0b       	sbc	r27, r27
   18334:	ed b7       	in	r30, 0x3d	; 61
   18336:	fe b7       	in	r31, 0x3e	; 62
   18338:	84 83       	std	Z+4, r24	; 0x04
   1833a:	95 83       	std	Z+5, r25	; 0x05
   1833c:	a6 83       	std	Z+6, r26	; 0x06
   1833e:	b7 83       	std	Z+7, r27	; 0x07
   18340:	88 e2       	ldi	r24, 0x28	; 40
   18342:	9e e3       	ldi	r25, 0x3E	; 62
   18344:	a0 e0       	ldi	r26, 0x00	; 0
   18346:	81 83       	std	Z+1, r24	; 0x01
   18348:	92 83       	std	Z+2, r25	; 0x02
   1834a:	a3 83       	std	Z+3, r26	; 0x03
   1834c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18350:	ce 01       	movw	r24, r28
   18352:	86 96       	adiw	r24, 0x26	; 38
   18354:	ed b7       	in	r30, 0x3d	; 61
   18356:	fe b7       	in	r31, 0x3e	; 62
   18358:	95 83       	std	Z+5, r25	; 0x05
   1835a:	84 83       	std	Z+4, r24	; 0x04
   1835c:	8e e0       	ldi	r24, 0x0E	; 14
   1835e:	9e e3       	ldi	r25, 0x3E	; 62
   18360:	a0 e0       	ldi	r26, 0x00	; 0
   18362:	81 83       	std	Z+1, r24	; 0x01
   18364:	92 83       	std	Z+2, r25	; 0x02
   18366:	a3 83       	std	Z+3, r26	; 0x03
   18368:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1836c:	8c a1       	ldd	r24, Y+36	; 0x24
   1836e:	9d a1       	ldd	r25, Y+37	; 0x25
   18370:	ed b7       	in	r30, 0x3d	; 61
   18372:	fe b7       	in	r31, 0x3e	; 62
   18374:	95 83       	std	Z+5, r25	; 0x05
   18376:	84 83       	std	Z+4, r24	; 0x04
   18378:	82 ef       	ldi	r24, 0xF2	; 242
   1837a:	9d e3       	ldi	r25, 0x3D	; 61
   1837c:	a0 e0       	ldi	r26, 0x00	; 0
   1837e:	81 83       	std	Z+1, r24	; 0x01
   18380:	92 83       	std	Z+2, r25	; 0x02
   18382:	a3 83       	std	Z+3, r26	; 0x03
   18384:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18388:	8d a5       	ldd	r24, Y+45	; 0x2d
   1838a:	9e a5       	ldd	r25, Y+46	; 0x2e
   1838c:	af a5       	ldd	r26, Y+47	; 0x2f
   1838e:	b8 a9       	ldd	r27, Y+48	; 0x30
   18390:	ed b7       	in	r30, 0x3d	; 61
   18392:	fe b7       	in	r31, 0x3e	; 62
   18394:	84 83       	std	Z+4, r24	; 0x04
   18396:	95 83       	std	Z+5, r25	; 0x05
   18398:	a6 83       	std	Z+6, r26	; 0x06
   1839a:	b7 83       	std	Z+7, r27	; 0x07
   1839c:	85 ed       	ldi	r24, 0xD5	; 213
   1839e:	9d e3       	ldi	r25, 0x3D	; 61
   183a0:	a0 e0       	ldi	r26, 0x00	; 0
   183a2:	81 83       	std	Z+1, r24	; 0x01
   183a4:	92 83       	std	Z+2, r25	; 0x02
   183a6:	a3 83       	std	Z+3, r26	; 0x03
   183a8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   183ac:	8d a9       	ldd	r24, Y+53	; 0x35
   183ae:	9e a9       	ldd	r25, Y+54	; 0x36
   183b0:	af a9       	ldd	r26, Y+55	; 0x37
   183b2:	b8 ad       	ldd	r27, Y+56	; 0x38
   183b4:	ed b7       	in	r30, 0x3d	; 61
   183b6:	fe b7       	in	r31, 0x3e	; 62
   183b8:	84 83       	std	Z+4, r24	; 0x04
   183ba:	95 83       	std	Z+5, r25	; 0x05
   183bc:	a6 83       	std	Z+6, r26	; 0x06
   183be:	b7 83       	std	Z+7, r27	; 0x07
   183c0:	88 eb       	ldi	r24, 0xB8	; 184
   183c2:	9d e3       	ldi	r25, 0x3D	; 61
   183c4:	a0 e0       	ldi	r26, 0x00	; 0
   183c6:	81 83       	std	Z+1, r24	; 0x01
   183c8:	92 83       	std	Z+2, r25	; 0x02
   183ca:	a3 83       	std	Z+3, r26	; 0x03
   183cc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   183d0:	89 a9       	ldd	r24, Y+49	; 0x31
   183d2:	9a a9       	ldd	r25, Y+50	; 0x32
   183d4:	ed b7       	in	r30, 0x3d	; 61
   183d6:	fe b7       	in	r31, 0x3e	; 62
   183d8:	95 83       	std	Z+5, r25	; 0x05
   183da:	84 83       	std	Z+4, r24	; 0x04
   183dc:	8c e9       	ldi	r24, 0x9C	; 156
   183de:	9d e3       	ldi	r25, 0x3D	; 61
   183e0:	a0 e0       	ldi	r26, 0x00	; 0
   183e2:	81 83       	std	Z+1, r24	; 0x01
   183e4:	92 83       	std	Z+2, r25	; 0x02
   183e6:	a3 83       	std	Z+3, r26	; 0x03
   183e8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   183ec:	89 ad       	ldd	r24, Y+57	; 0x39
   183ee:	9a ad       	ldd	r25, Y+58	; 0x3a
   183f0:	ed b7       	in	r30, 0x3d	; 61
   183f2:	fe b7       	in	r31, 0x3e	; 62
   183f4:	95 83       	std	Z+5, r25	; 0x05
   183f6:	84 83       	std	Z+4, r24	; 0x04
   183f8:	80 e8       	ldi	r24, 0x80	; 128
   183fa:	9d e3       	ldi	r25, 0x3D	; 61
   183fc:	a0 e0       	ldi	r26, 0x00	; 0
   183fe:	81 83       	std	Z+1, r24	; 0x01
   18400:	92 83       	std	Z+2, r25	; 0x02
   18402:	a3 83       	std	Z+3, r26	; 0x03
   18404:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18408:	ce 01       	movw	r24, r28
   1840a:	87 5b       	subi	r24, 0xB7	; 183
   1840c:	9f 4f       	sbci	r25, 0xFF	; 255
   1840e:	ab de       	rcall	.-682    	; 0x18166 <lif_lifbcd2timestr>
   18410:	ed b7       	in	r30, 0x3d	; 61
   18412:	fe b7       	in	r31, 0x3e	; 62
   18414:	95 83       	std	Z+5, r25	; 0x05
   18416:	84 83       	std	Z+4, r24	; 0x04
   18418:	86 e6       	ldi	r24, 0x66	; 102
   1841a:	9d e3       	ldi	r25, 0x3D	; 61
   1841c:	a0 e0       	ldi	r26, 0x00	; 0
   1841e:	81 83       	std	Z+1, r24	; 0x01
   18420:	92 83       	std	Z+2, r25	; 0x02
   18422:	a3 83       	std	Z+3, r26	; 0x03
   18424:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18428:	ce 01       	movw	r24, r28
   1842a:	81 5b       	subi	r24, 0xB1	; 177
   1842c:	9f 4f       	sbci	r25, 0xFF	; 255
   1842e:	ed b7       	in	r30, 0x3d	; 61
   18430:	fe b7       	in	r31, 0x3e	; 62
   18432:	95 83       	std	Z+5, r25	; 0x05
   18434:	84 83       	std	Z+4, r24	; 0x04
   18436:	8c e4       	ldi	r24, 0x4C	; 76
   18438:	9d e3       	ldi	r25, 0x3D	; 61
   1843a:	a0 e0       	ldi	r26, 0x00	; 0
   1843c:	81 83       	std	Z+1, r24	; 0x01
   1843e:	92 83       	std	Z+2, r25	; 0x02
   18440:	a3 83       	std	Z+3, r26	; 0x03
   18442:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18446:	fe 01       	movw	r30, r28
   18448:	e6 5a       	subi	r30, 0xA6	; 166
   1844a:	ff 4f       	sbci	r31, 0xFF	; 255
   1844c:	80 81       	ld	r24, Z
   1844e:	91 81       	ldd	r25, Z+1	; 0x01
   18450:	ed b7       	in	r30, 0x3d	; 61
   18452:	fe b7       	in	r31, 0x3e	; 62
   18454:	95 83       	std	Z+5, r25	; 0x05
   18456:	84 83       	std	Z+4, r24	; 0x04
   18458:	80 e3       	ldi	r24, 0x30	; 48
   1845a:	9d e3       	ldi	r25, 0x3D	; 61
   1845c:	a0 e0       	ldi	r26, 0x00	; 0
   1845e:	81 83       	std	Z+1, r24	; 0x01
   18460:	92 83       	std	Z+2, r25	; 0x02
   18462:	a3 83       	std	Z+3, r26	; 0x03
   18464:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18468:	fe 01       	movw	r30, r28
   1846a:	e6 59       	subi	r30, 0x96	; 150
   1846c:	ff 4f       	sbci	r31, 0xFF	; 255
   1846e:	80 81       	ld	r24, Z
   18470:	91 81       	ldd	r25, Z+1	; 0x01
   18472:	ed b7       	in	r30, 0x3d	; 61
   18474:	fe b7       	in	r31, 0x3e	; 62
   18476:	95 83       	std	Z+5, r25	; 0x05
   18478:	84 83       	std	Z+4, r24	; 0x04
   1847a:	84 e1       	ldi	r24, 0x14	; 20
   1847c:	9d e3       	ldi	r25, 0x3D	; 61
   1847e:	a0 e0       	ldi	r26, 0x00	; 0
   18480:	81 83       	std	Z+1, r24	; 0x01
   18482:	92 83       	std	Z+2, r25	; 0x02
   18484:	a3 83       	std	Z+3, r26	; 0x03
   18486:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1848a:	fe 01       	movw	r30, r28
   1848c:	e4 5a       	subi	r30, 0xA4	; 164
   1848e:	ff 4f       	sbci	r31, 0xFF	; 255
   18490:	80 81       	ld	r24, Z
   18492:	91 81       	ldd	r25, Z+1	; 0x01
   18494:	a2 81       	ldd	r26, Z+2	; 0x02
   18496:	b3 81       	ldd	r27, Z+3	; 0x03
   18498:	ed b7       	in	r30, 0x3d	; 61
   1849a:	fe b7       	in	r31, 0x3e	; 62
   1849c:	84 83       	std	Z+4, r24	; 0x04
   1849e:	95 83       	std	Z+5, r25	; 0x05
   184a0:	a6 83       	std	Z+6, r26	; 0x06
   184a2:	b7 83       	std	Z+7, r27	; 0x07
   184a4:	87 ef       	ldi	r24, 0xF7	; 247
   184a6:	9c e3       	ldi	r25, 0x3C	; 60
   184a8:	a0 e0       	ldi	r26, 0x00	; 0
   184aa:	81 83       	std	Z+1, r24	; 0x01
   184ac:	92 83       	std	Z+2, r25	; 0x02
   184ae:	a3 83       	std	Z+3, r26	; 0x03
   184b0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   184b4:	fe 01       	movw	r30, r28
   184b6:	e0 5a       	subi	r30, 0xA0	; 160
   184b8:	ff 4f       	sbci	r31, 0xFF	; 255
   184ba:	80 81       	ld	r24, Z
   184bc:	91 81       	ldd	r25, Z+1	; 0x01
   184be:	a2 81       	ldd	r26, Z+2	; 0x02
   184c0:	b3 81       	ldd	r27, Z+3	; 0x03
   184c2:	ed b7       	in	r30, 0x3d	; 61
   184c4:	fe b7       	in	r31, 0x3e	; 62
   184c6:	84 83       	std	Z+4, r24	; 0x04
   184c8:	95 83       	std	Z+5, r25	; 0x05
   184ca:	a6 83       	std	Z+6, r26	; 0x06
   184cc:	b7 83       	std	Z+7, r27	; 0x07
   184ce:	8a ed       	ldi	r24, 0xDA	; 218
   184d0:	9c e3       	ldi	r25, 0x3C	; 60
   184d2:	a0 e0       	ldi	r26, 0x00	; 0
   184d4:	81 83       	std	Z+1, r24	; 0x01
   184d6:	92 83       	std	Z+2, r25	; 0x02
   184d8:	a3 83       	std	Z+3, r26	; 0x03
   184da:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   184de:	fe 01       	movw	r30, r28
   184e0:	e4 59       	subi	r30, 0x94	; 148
   184e2:	ff 4f       	sbci	r31, 0xFF	; 255
   184e4:	80 81       	ld	r24, Z
   184e6:	91 81       	ldd	r25, Z+1	; 0x01
   184e8:	a0 e0       	ldi	r26, 0x00	; 0
   184ea:	b0 e0       	ldi	r27, 0x00	; 0
   184ec:	ed b7       	in	r30, 0x3d	; 61
   184ee:	fe b7       	in	r31, 0x3e	; 62
   184f0:	84 83       	std	Z+4, r24	; 0x04
   184f2:	95 83       	std	Z+5, r25	; 0x05
   184f4:	a6 83       	std	Z+6, r26	; 0x06
   184f6:	b7 83       	std	Z+7, r27	; 0x07
   184f8:	8d eb       	ldi	r24, 0xBD	; 189
   184fa:	9c e3       	ldi	r25, 0x3C	; 60
   184fc:	a0 e0       	ldi	r26, 0x00	; 0
   184fe:	81 83       	std	Z+1, r24	; 0x01
   18500:	92 83       	std	Z+2, r25	; 0x02
   18502:	a3 83       	std	Z+3, r26	; 0x03
   18504:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18508:	fe 01       	movw	r30, r28
   1850a:	e2 59       	subi	r30, 0x92	; 146
   1850c:	ff 4f       	sbci	r31, 0xFF	; 255
   1850e:	80 81       	ld	r24, Z
   18510:	91 81       	ldd	r25, Z+1	; 0x01
   18512:	ed b7       	in	r30, 0x3d	; 61
   18514:	fe b7       	in	r31, 0x3e	; 62
   18516:	95 83       	std	Z+5, r25	; 0x05
   18518:	84 83       	std	Z+4, r24	; 0x04
   1851a:	81 ea       	ldi	r24, 0xA1	; 161
   1851c:	9c e3       	ldi	r25, 0x3C	; 60
   1851e:	a0 e0       	ldi	r26, 0x00	; 0
   18520:	81 83       	std	Z+1, r24	; 0x01
   18522:	92 83       	std	Z+2, r25	; 0x02
   18524:	a3 83       	std	Z+3, r26	; 0x03
   18526:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1852a:	ce 01       	movw	r24, r28
   1852c:	8c 59       	subi	r24, 0x9C	; 156
   1852e:	9f 4f       	sbci	r25, 0xFF	; 255
   18530:	1a de       	rcall	.-972    	; 0x18166 <lif_lifbcd2timestr>
   18532:	ed b7       	in	r30, 0x3d	; 61
   18534:	fe b7       	in	r31, 0x3e	; 62
   18536:	95 83       	std	Z+5, r25	; 0x05
   18538:	84 83       	std	Z+4, r24	; 0x04
   1853a:	87 e8       	ldi	r24, 0x87	; 135
   1853c:	9c e3       	ldi	r25, 0x3C	; 60
   1853e:	a0 e0       	ldi	r26, 0x00	; 0
   18540:	81 83       	std	Z+1, r24	; 0x01
   18542:	92 83       	std	Z+2, r25	; 0x02
   18544:	a3 83       	std	Z+3, r26	; 0x03
   18546:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1854a:	85 e8       	ldi	r24, 0x85	; 133
   1854c:	9c e3       	ldi	r25, 0x3C	; 60
   1854e:	a0 e0       	ldi	r26, 0x00	; 0
   18550:	ed b7       	in	r30, 0x3d	; 61
   18552:	fe b7       	in	r31, 0x3e	; 62
   18554:	81 83       	std	Z+1, r24	; 0x01
   18556:	92 83       	std	Z+2, r25	; 0x02
   18558:	a3 83       	std	Z+3, r26	; 0x03
   1855a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1855e:	cd b7       	in	r28, 0x3d	; 61
   18560:	de b7       	in	r29, 0x3e	; 62
   18562:	27 96       	adiw	r28, 0x07	; 7
   18564:	e2 e0       	ldi	r30, 0x02	; 2
   18566:	0c 94 ee df 	jmp	0x1bfdc	; 0x1bfdc <__epilogue_restores__+0x20>

0001856a <lif_check_volume>:
   1856a:	0f 93       	push	r16
   1856c:	1f 93       	push	r17
   1856e:	cf 93       	push	r28
   18570:	df 93       	push	r29
   18572:	ad b7       	in	r26, 0x3d	; 61
   18574:	be b7       	in	r27, 0x3e	; 62
   18576:	17 97       	sbiw	r26, 0x07	; 7
   18578:	0f b6       	in	r0, 0x3f	; 63
   1857a:	f8 94       	cli
   1857c:	be bf       	out	0x3e, r27	; 62
   1857e:	0f be       	out	0x3f, r0	; 63
   18580:	ad bf       	out	0x3d, r26	; 61
   18582:	ec 01       	movw	r28, r24
   18584:	86 96       	adiw	r24, 0x26	; 38
   18586:	e0 da       	rcall	.-2624   	; 0x17b48 <lif_checkname>
   18588:	89 2b       	or	r24, r25
   1858a:	79 f4       	brne	.+30     	; 0x185aa <lif_check_volume+0x40>
   1858c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18590:	81 ff       	sbrs	r24, 1
   18592:	0e c0       	rjmp	.+28     	; 0x185b0 <lif_check_volume+0x46>
   18594:	86 e6       	ldi	r24, 0x66	; 102
   18596:	9c e3       	ldi	r25, 0x3C	; 60
   18598:	a0 e0       	ldi	r26, 0x00	; 0
   1859a:	ed b7       	in	r30, 0x3d	; 61
   1859c:	fe b7       	in	r31, 0x3e	; 62
   1859e:	81 83       	std	Z+1, r24	; 0x01
   185a0:	92 83       	std	Z+2, r25	; 0x02
   185a2:	a3 83       	std	Z+3, r26	; 0x03
   185a4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   185a8:	03 c0       	rjmp	.+6      	; 0x185b0 <lif_check_volume+0x46>
   185aa:	81 e0       	ldi	r24, 0x01	; 1
   185ac:	90 e0       	ldi	r25, 0x00	; 0
   185ae:	02 c0       	rjmp	.+4      	; 0x185b4 <lif_check_volume+0x4a>
   185b0:	80 e0       	ldi	r24, 0x00	; 0
   185b2:	90 e0       	ldi	r25, 0x00	; 0
   185b4:	29 a9       	ldd	r18, Y+49	; 0x31
   185b6:	3a a9       	ldd	r19, Y+50	; 0x32
   185b8:	21 15       	cp	r18, r1
   185ba:	f0 e1       	ldi	r31, 0x10	; 16
   185bc:	3f 07       	cpc	r19, r31
   185be:	91 f0       	breq	.+36     	; 0x185e4 <lif_check_volume+0x7a>
   185c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   185c4:	81 ff       	sbrs	r24, 1
   185c6:	0c c0       	rjmp	.+24     	; 0x185e0 <lif_check_volume+0x76>
   185c8:	ed b7       	in	r30, 0x3d	; 61
   185ca:	fe b7       	in	r31, 0x3e	; 62
   185cc:	35 83       	std	Z+5, r19	; 0x05
   185ce:	24 83       	std	Z+4, r18	; 0x04
   185d0:	8d e2       	ldi	r24, 0x2D	; 45
   185d2:	9c e3       	ldi	r25, 0x3C	; 60
   185d4:	a0 e0       	ldi	r26, 0x00	; 0
   185d6:	81 83       	std	Z+1, r24	; 0x01
   185d8:	92 83       	std	Z+2, r25	; 0x02
   185da:	a3 83       	std	Z+3, r26	; 0x03
   185dc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   185e0:	80 e0       	ldi	r24, 0x00	; 0
   185e2:	90 e0       	ldi	r25, 0x00	; 0
   185e4:	29 ad       	ldd	r18, Y+57	; 0x39
   185e6:	3a ad       	ldd	r19, Y+58	; 0x3a
   185e8:	22 30       	cpi	r18, 0x02	; 2
   185ea:	31 05       	cpc	r19, r1
   185ec:	90 f0       	brcs	.+36     	; 0x18612 <lif_check_volume+0xa8>
   185ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   185f2:	81 ff       	sbrs	r24, 1
   185f4:	0c c0       	rjmp	.+24     	; 0x1860e <lif_check_volume+0xa4>
   185f6:	ed b7       	in	r30, 0x3d	; 61
   185f8:	fe b7       	in	r31, 0x3e	; 62
   185fa:	35 83       	std	Z+5, r19	; 0x05
   185fc:	24 83       	std	Z+4, r18	; 0x04
   185fe:	85 e1       	ldi	r24, 0x15	; 21
   18600:	9c e3       	ldi	r25, 0x3C	; 60
   18602:	a0 e0       	ldi	r26, 0x00	; 0
   18604:	81 83       	std	Z+1, r24	; 0x01
   18606:	92 83       	std	Z+2, r25	; 0x02
   18608:	a3 83       	std	Z+3, r26	; 0x03
   1860a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1860e:	80 e0       	ldi	r24, 0x00	; 0
   18610:	90 e0       	ldi	r25, 0x00	; 0
   18612:	2b a9       	ldd	r18, Y+51	; 0x33
   18614:	3c a9       	ldd	r19, Y+52	; 0x34
   18616:	23 2b       	or	r18, r19
   18618:	81 f0       	breq	.+32     	; 0x1863a <lif_check_volume+0xd0>
   1861a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1861e:	81 ff       	sbrs	r24, 1
   18620:	0a c0       	rjmp	.+20     	; 0x18636 <lif_check_volume+0xcc>
   18622:	8c ed       	ldi	r24, 0xDC	; 220
   18624:	9b e3       	ldi	r25, 0x3B	; 59
   18626:	a0 e0       	ldi	r26, 0x00	; 0
   18628:	ed b7       	in	r30, 0x3d	; 61
   1862a:	fe b7       	in	r31, 0x3e	; 62
   1862c:	81 83       	std	Z+1, r24	; 0x01
   1862e:	92 83       	std	Z+2, r25	; 0x02
   18630:	a3 83       	std	Z+3, r26	; 0x03
   18632:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18636:	80 e0       	ldi	r24, 0x00	; 0
   18638:	90 e0       	ldi	r25, 0x00	; 0
   1863a:	2b ad       	ldd	r18, Y+59	; 0x3b
   1863c:	3c ad       	ldd	r19, Y+60	; 0x3c
   1863e:	23 2b       	or	r18, r19
   18640:	81 f0       	breq	.+32     	; 0x18662 <lif_check_volume+0xf8>
   18642:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18646:	81 ff       	sbrs	r24, 1
   18648:	0a c0       	rjmp	.+20     	; 0x1865e <lif_check_volume+0xf4>
   1864a:	83 ea       	ldi	r24, 0xA3	; 163
   1864c:	9b e3       	ldi	r25, 0x3B	; 59
   1864e:	a0 e0       	ldi	r26, 0x00	; 0
   18650:	ed b7       	in	r30, 0x3d	; 61
   18652:	fe b7       	in	r31, 0x3e	; 62
   18654:	81 83       	std	Z+1, r24	; 0x01
   18656:	92 83       	std	Z+2, r25	; 0x02
   18658:	a3 83       	std	Z+3, r26	; 0x03
   1865a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1865e:	80 e0       	ldi	r24, 0x00	; 0
   18660:	90 e0       	ldi	r25, 0x00	; 0
   18662:	4d a5       	ldd	r20, Y+45	; 0x2d
   18664:	5e a5       	ldd	r21, Y+46	; 0x2e
   18666:	6f a5       	ldd	r22, Y+47	; 0x2f
   18668:	78 a9       	ldd	r23, Y+48	; 0x30
   1866a:	45 2b       	or	r20, r21
   1866c:	46 2b       	or	r20, r22
   1866e:	47 2b       	or	r20, r23
   18670:	a1 f4       	brne	.+40     	; 0x1869a <lif_check_volume+0x130>
   18672:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18676:	81 ff       	sbrs	r24, 1
   18678:	0e c0       	rjmp	.+28     	; 0x18696 <lif_check_volume+0x12c>
   1867a:	ed b7       	in	r30, 0x3d	; 61
   1867c:	fe b7       	in	r31, 0x3e	; 62
   1867e:	14 82       	std	Z+4, r1	; 0x04
   18680:	15 82       	std	Z+5, r1	; 0x05
   18682:	16 82       	std	Z+6, r1	; 0x06
   18684:	17 82       	std	Z+7, r1	; 0x07
   18686:	8e e7       	ldi	r24, 0x7E	; 126
   18688:	9b e3       	ldi	r25, 0x3B	; 59
   1868a:	a0 e0       	ldi	r26, 0x00	; 0
   1868c:	81 83       	std	Z+1, r24	; 0x01
   1868e:	92 83       	std	Z+2, r25	; 0x02
   18690:	a3 83       	std	Z+3, r26	; 0x03
   18692:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18696:	80 e0       	ldi	r24, 0x00	; 0
   18698:	90 e0       	ldi	r25, 0x00	; 0
   1869a:	4d a9       	ldd	r20, Y+53	; 0x35
   1869c:	5e a9       	ldd	r21, Y+54	; 0x36
   1869e:	6f a9       	ldd	r22, Y+55	; 0x37
   186a0:	78 ad       	ldd	r23, Y+56	; 0x38
   186a2:	45 2b       	or	r20, r21
   186a4:	46 2b       	or	r20, r22
   186a6:	47 2b       	or	r20, r23
   186a8:	81 f4       	brne	.+32     	; 0x186ca <lif_check_volume+0x160>
   186aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   186ae:	81 ff       	sbrs	r24, 1
   186b0:	0a c0       	rjmp	.+20     	; 0x186c6 <lif_check_volume+0x15c>
   186b2:	8f e4       	ldi	r24, 0x4F	; 79
   186b4:	9b e3       	ldi	r25, 0x3B	; 59
   186b6:	a0 e0       	ldi	r26, 0x00	; 0
   186b8:	ed b7       	in	r30, 0x3d	; 61
   186ba:	fe b7       	in	r31, 0x3e	; 62
   186bc:	81 83       	std	Z+1, r24	; 0x01
   186be:	92 83       	std	Z+2, r25	; 0x02
   186c0:	a3 83       	std	Z+3, r26	; 0x03
   186c2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   186c6:	80 e0       	ldi	r24, 0x00	; 0
   186c8:	90 e0       	ldi	r25, 0x00	; 0
   186ca:	0d a5       	ldd	r16, Y+45	; 0x2d
   186cc:	1e a5       	ldd	r17, Y+46	; 0x2e
   186ce:	2f a5       	ldd	r18, Y+47	; 0x2f
   186d0:	38 a9       	ldd	r19, Y+48	; 0x30
   186d2:	4d a9       	ldd	r20, Y+53	; 0x35
   186d4:	5e a9       	ldd	r21, Y+54	; 0x36
   186d6:	6f a9       	ldd	r22, Y+55	; 0x37
   186d8:	78 ad       	ldd	r23, Y+56	; 0x38
   186da:	40 0f       	add	r20, r16
   186dc:	51 1f       	adc	r21, r17
   186de:	62 1f       	adc	r22, r18
   186e0:	73 1f       	adc	r23, r19
   186e2:	0c 81       	ldd	r16, Y+4	; 0x04
   186e4:	1d 81       	ldd	r17, Y+5	; 0x05
   186e6:	2e 81       	ldd	r18, Y+6	; 0x06
   186e8:	3f 81       	ldd	r19, Y+7	; 0x07
   186ea:	04 17       	cp	r16, r20
   186ec:	15 07       	cpc	r17, r21
   186ee:	26 07       	cpc	r18, r22
   186f0:	37 07       	cpc	r19, r23
   186f2:	80 f4       	brcc	.+32     	; 0x18714 <lif_check_volume+0x1aa>
   186f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   186f8:	81 ff       	sbrs	r24, 1
   186fa:	0a c0       	rjmp	.+20     	; 0x18710 <lif_check_volume+0x1a6>
   186fc:	83 e2       	ldi	r24, 0x23	; 35
   186fe:	9b e3       	ldi	r25, 0x3B	; 59
   18700:	a0 e0       	ldi	r26, 0x00	; 0
   18702:	ed b7       	in	r30, 0x3d	; 61
   18704:	fe b7       	in	r31, 0x3e	; 62
   18706:	81 83       	std	Z+1, r24	; 0x01
   18708:	92 83       	std	Z+2, r25	; 0x02
   1870a:	a3 83       	std	Z+3, r26	; 0x03
   1870c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18710:	80 e0       	ldi	r24, 0x00	; 0
   18712:	90 e0       	ldi	r25, 0x00	; 0
   18714:	cd b7       	in	r28, 0x3d	; 61
   18716:	de b7       	in	r29, 0x3e	; 62
   18718:	27 96       	adiw	r28, 0x07	; 7
   1871a:	e4 e0       	ldi	r30, 0x04	; 4
   1871c:	0c 94 ec df 	jmp	0x1bfd8	; 0x1bfd8 <__epilogue_restores__+0x1c>

00018720 <lif_check_dir>:
   18720:	a5 e1       	ldi	r26, 0x15	; 21
   18722:	b0 e0       	ldi	r27, 0x00	; 0
   18724:	e6 e9       	ldi	r30, 0x96	; 150
   18726:	f3 ec       	ldi	r31, 0xC3	; 195
   18728:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
   1872c:	6c 01       	movw	r12, r24
   1872e:	2a e5       	ldi	r18, 0x5A	; 90
   18730:	c2 0e       	add	r12, r18
   18732:	d1 1c       	adc	r13, r1
   18734:	f6 01       	movw	r30, r12
   18736:	20 81       	ld	r18, Z
   18738:	31 81       	ldd	r19, Z+1	; 0x01
   1873a:	21 50       	subi	r18, 0x01	; 1
   1873c:	31 09       	sbc	r19, r1
   1873e:	2e 3f       	cpi	r18, 0xFE	; 254
   18740:	3f 4f       	sbci	r19, 0xFF	; 255
   18742:	08 f0       	brcs	.+2      	; 0x18746 <lif_check_dir+0x26>
   18744:	8e c1       	rjmp	.+796    	; 0x18a62 <lif_check_dir+0x342>
   18746:	9d 8b       	std	Y+21, r25	; 0x15
   18748:	8c 8b       	std	Y+20, r24	; 0x14
   1874a:	7c 01       	movw	r14, r24
   1874c:	2f e4       	ldi	r18, 0x4F	; 79
   1874e:	e2 0e       	add	r14, r18
   18750:	f1 1c       	adc	r15, r1
   18752:	c7 01       	movw	r24, r14
   18754:	f9 d9       	rcall	.-3086   	; 0x17b48 <lif_checkname>
   18756:	89 2b       	or	r24, r25
   18758:	89 f4       	brne	.+34     	; 0x1877c <lif_check_dir+0x5c>
   1875a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1875e:	81 ff       	sbrs	r24, 1
   18760:	0f c0       	rjmp	.+30     	; 0x18780 <lif_check_dir+0x60>
   18762:	ed b7       	in	r30, 0x3d	; 61
   18764:	fe b7       	in	r31, 0x3e	; 62
   18766:	f5 82       	std	Z+5, r15	; 0x05
   18768:	e4 82       	std	Z+4, r14	; 0x04
   1876a:	82 e0       	ldi	r24, 0x02	; 2
   1876c:	9b e3       	ldi	r25, 0x3B	; 59
   1876e:	a0 e0       	ldi	r26, 0x00	; 0
   18770:	81 83       	std	Z+1, r24	; 0x01
   18772:	92 83       	std	Z+2, r25	; 0x02
   18774:	a3 83       	std	Z+3, r26	; 0x03
   18776:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1877a:	02 c0       	rjmp	.+4      	; 0x18780 <lif_check_dir+0x60>
   1877c:	01 e0       	ldi	r16, 0x01	; 1
   1877e:	01 c0       	rjmp	.+2      	; 0x18782 <lif_check_dir+0x62>
   18780:	00 e0       	ldi	r16, 0x00	; 0
   18782:	10 e0       	ldi	r17, 0x00	; 0
   18784:	ec 89       	ldd	r30, Y+20	; 0x14
   18786:	fd 89       	ldd	r31, Y+21	; 0x15
   18788:	84 85       	ldd	r24, Z+12	; 0x0c
   1878a:	95 85       	ldd	r25, Z+13	; 0x0d
   1878c:	a6 85       	ldd	r26, Z+14	; 0x0e
   1878e:	b7 85       	ldd	r27, Z+15	; 0x0f
   18790:	00 97       	sbiw	r24, 0x00	; 0
   18792:	a1 05       	cpc	r26, r1
   18794:	b1 05       	cpc	r27, r1
   18796:	29 f1       	breq	.+74     	; 0x187e2 <lif_check_dir+0xc2>
   18798:	e4 5a       	subi	r30, 0xA4	; 164
   1879a:	ff 4f       	sbci	r31, 0xFF	; 255
   1879c:	40 81       	ld	r20, Z
   1879e:	51 81       	ldd	r21, Z+1	; 0x01
   187a0:	62 81       	ldd	r22, Z+2	; 0x02
   187a2:	73 81       	ldd	r23, Z+3	; 0x03
   187a4:	48 17       	cp	r20, r24
   187a6:	59 07       	cpc	r21, r25
   187a8:	6a 07       	cpc	r22, r26
   187aa:	7b 07       	cpc	r23, r27
   187ac:	d0 f4       	brcc	.+52     	; 0x187e2 <lif_check_dir+0xc2>
   187ae:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   187b2:	21 ff       	sbrs	r18, 1
   187b4:	14 c0       	rjmp	.+40     	; 0x187de <lif_check_dir+0xbe>
   187b6:	ed b7       	in	r30, 0x3d	; 61
   187b8:	fe b7       	in	r31, 0x3e	; 62
   187ba:	82 87       	std	Z+10, r24	; 0x0a
   187bc:	93 87       	std	Z+11, r25	; 0x0b
   187be:	a4 87       	std	Z+12, r26	; 0x0c
   187c0:	b5 87       	std	Z+13, r27	; 0x0d
   187c2:	46 83       	std	Z+6, r20	; 0x06
   187c4:	57 83       	std	Z+7, r21	; 0x07
   187c6:	60 87       	std	Z+8, r22	; 0x08
   187c8:	71 87       	std	Z+9, r23	; 0x09
   187ca:	f5 82       	std	Z+5, r15	; 0x05
   187cc:	e4 82       	std	Z+4, r14	; 0x04
   187ce:	8e eb       	ldi	r24, 0xBE	; 190
   187d0:	9a e3       	ldi	r25, 0x3A	; 58
   187d2:	a0 e0       	ldi	r26, 0x00	; 0
   187d4:	81 83       	std	Z+1, r24	; 0x01
   187d6:	92 83       	std	Z+2, r25	; 0x02
   187d8:	a3 83       	std	Z+3, r26	; 0x03
   187da:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   187de:	00 e0       	ldi	r16, 0x00	; 0
   187e0:	10 e0       	ldi	r17, 0x00	; 0
   187e2:	ec 89       	ldd	r30, Y+20	; 0x14
   187e4:	fd 89       	ldd	r31, Y+21	; 0x15
   187e6:	44 81       	ldd	r20, Z+4	; 0x04
   187e8:	55 81       	ldd	r21, Z+5	; 0x05
   187ea:	66 81       	ldd	r22, Z+6	; 0x06
   187ec:	77 81       	ldd	r23, Z+7	; 0x07
   187ee:	41 15       	cp	r20, r1
   187f0:	51 05       	cpc	r21, r1
   187f2:	61 05       	cpc	r22, r1
   187f4:	71 05       	cpc	r23, r1
   187f6:	89 f1       	breq	.+98     	; 0x1885a <lif_check_dir+0x13a>
   187f8:	e4 5a       	subi	r30, 0xA4	; 164
   187fa:	ff 4f       	sbci	r31, 0xFF	; 255
   187fc:	80 80       	ld	r8, Z
   187fe:	91 80       	ldd	r9, Z+1	; 0x01
   18800:	a2 80       	ldd	r10, Z+2	; 0x02
   18802:	b3 80       	ldd	r11, Z+3	; 0x03
   18804:	ec 89       	ldd	r30, Y+20	; 0x14
   18806:	fd 89       	ldd	r31, Y+21	; 0x15
   18808:	e0 5a       	subi	r30, 0xA0	; 160
   1880a:	ff 4f       	sbci	r31, 0xFF	; 255
   1880c:	80 81       	ld	r24, Z
   1880e:	91 81       	ldd	r25, Z+1	; 0x01
   18810:	a2 81       	ldd	r26, Z+2	; 0x02
   18812:	b3 81       	ldd	r27, Z+3	; 0x03
   18814:	88 0d       	add	r24, r8
   18816:	99 1d       	adc	r25, r9
   18818:	aa 1d       	adc	r26, r10
   1881a:	bb 1d       	adc	r27, r11
   1881c:	48 17       	cp	r20, r24
   1881e:	59 07       	cpc	r21, r25
   18820:	6a 07       	cpc	r22, r26
   18822:	7b 07       	cpc	r23, r27
   18824:	d0 f4       	brcc	.+52     	; 0x1885a <lif_check_dir+0x13a>
   18826:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1882a:	21 ff       	sbrs	r18, 1
   1882c:	14 c0       	rjmp	.+40     	; 0x18856 <lif_check_dir+0x136>
   1882e:	ed b7       	in	r30, 0x3d	; 61
   18830:	fe b7       	in	r31, 0x3e	; 62
   18832:	42 87       	std	Z+10, r20	; 0x0a
   18834:	53 87       	std	Z+11, r21	; 0x0b
   18836:	64 87       	std	Z+12, r22	; 0x0c
   18838:	75 87       	std	Z+13, r23	; 0x0d
   1883a:	86 83       	std	Z+6, r24	; 0x06
   1883c:	97 83       	std	Z+7, r25	; 0x07
   1883e:	a0 87       	std	Z+8, r26	; 0x08
   18840:	b1 87       	std	Z+9, r27	; 0x09
   18842:	f5 82       	std	Z+5, r15	; 0x05
   18844:	e4 82       	std	Z+4, r14	; 0x04
   18846:	8d e7       	ldi	r24, 0x7D	; 125
   18848:	9a e3       	ldi	r25, 0x3A	; 58
   1884a:	a0 e0       	ldi	r26, 0x00	; 0
   1884c:	81 83       	std	Z+1, r24	; 0x01
   1884e:	92 83       	std	Z+2, r25	; 0x02
   18850:	a3 83       	std	Z+3, r26	; 0x03
   18852:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18856:	00 e0       	ldi	r16, 0x00	; 0
   18858:	10 e0       	ldi	r17, 0x00	; 0
   1885a:	ec 89       	ldd	r30, Y+20	; 0x14
   1885c:	fd 89       	ldd	r31, Y+21	; 0x15
   1885e:	e6 59       	subi	r30, 0x96	; 150
   18860:	ff 4f       	sbci	r31, 0xFF	; 255
   18862:	80 81       	ld	r24, Z
   18864:	91 81       	ldd	r25, Z+1	; 0x01
   18866:	81 30       	cpi	r24, 0x01	; 1
   18868:	f0 e8       	ldi	r31, 0x80	; 128
   1886a:	9f 07       	cpc	r25, r31
   1886c:	a1 f0       	breq	.+40     	; 0x18896 <lif_check_dir+0x176>
   1886e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18872:	21 ff       	sbrs	r18, 1
   18874:	0e c0       	rjmp	.+28     	; 0x18892 <lif_check_dir+0x172>
   18876:	ed b7       	in	r30, 0x3d	; 61
   18878:	fe b7       	in	r31, 0x3e	; 62
   1887a:	97 83       	std	Z+7, r25	; 0x07
   1887c:	86 83       	std	Z+6, r24	; 0x06
   1887e:	f5 82       	std	Z+5, r15	; 0x05
   18880:	e4 82       	std	Z+4, r14	; 0x04
   18882:	8f e4       	ldi	r24, 0x4F	; 79
   18884:	9a e3       	ldi	r25, 0x3A	; 58
   18886:	a0 e0       	ldi	r26, 0x00	; 0
   18888:	81 83       	std	Z+1, r24	; 0x01
   1888a:	92 83       	std	Z+2, r25	; 0x02
   1888c:	a3 83       	std	Z+3, r26	; 0x03
   1888e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18892:	00 e0       	ldi	r16, 0x00	; 0
   18894:	10 e0       	ldi	r17, 0x00	; 0
   18896:	f6 01       	movw	r30, r12
   18898:	80 81       	ld	r24, Z
   1889a:	91 81       	ldd	r25, Z+1	; 0x01
   1889c:	8c 7f       	andi	r24, 0xFC	; 252
   1889e:	80 31       	cpi	r24, 0x10	; 16
   188a0:	90 4e       	sbci	r25, 0xE0	; 224
   188a2:	09 f0       	breq	.+2      	; 0x188a6 <lif_check_dir+0x186>
   188a4:	af c0       	rjmp	.+350    	; 0x18a04 <lif_check_dir+0x2e4>
   188a6:	cc 88       	ldd	r12, Y+20	; 0x14
   188a8:	dd 88       	ldd	r13, Y+21	; 0x15
   188aa:	2c e6       	ldi	r18, 0x6C	; 108
   188ac:	c2 0e       	add	r12, r18
   188ae:	d1 1c       	adc	r13, r1
   188b0:	f6 01       	movw	r30, r12
   188b2:	80 81       	ld	r24, Z
   188b4:	91 81       	ldd	r25, Z+1	; 0x01
   188b6:	00 97       	sbiw	r24, 0x00	; 0
   188b8:	09 f4       	brne	.+2      	; 0x188bc <lif_check_dir+0x19c>
   188ba:	a4 c0       	rjmp	.+328    	; 0x18a04 <lif_check_dir+0x2e4>
   188bc:	4c 01       	movw	r8, r24
   188be:	a1 2c       	mov	r10, r1
   188c0:	b1 2c       	mov	r11, r1
   188c2:	77 27       	eor	r23, r23
   188c4:	6b 2d       	mov	r22, r11
   188c6:	5a 2d       	mov	r21, r10
   188c8:	49 2d       	mov	r20, r9
   188ca:	9c 01       	movw	r18, r24
   188cc:	33 27       	eor	r19, r19
   188ce:	3b 8b       	std	Y+19, r19	; 0x13
   188d0:	2a 8b       	std	Y+18, r18	; 0x12
   188d2:	db 01       	movw	r26, r22
   188d4:	ca 01       	movw	r24, r20
   188d6:	23 2b       	or	r18, r19
   188d8:	19 f0       	breq	.+6      	; 0x188e0 <lif_check_dir+0x1c0>
   188da:	01 96       	adiw	r24, 0x01	; 1
   188dc:	a1 1d       	adc	r26, r1
   188de:	b1 1d       	adc	r27, r1
   188e0:	2c 88       	ldd	r2, Y+20	; 0x14
   188e2:	3d 88       	ldd	r3, Y+21	; 0x15
   188e4:	30 e6       	ldi	r19, 0x60	; 96
   188e6:	23 0e       	add	r2, r19
   188e8:	31 1c       	adc	r3, r1
   188ea:	f1 01       	movw	r30, r2
   188ec:	40 80       	ld	r4, Z
   188ee:	51 80       	ldd	r5, Z+1	; 0x01
   188f0:	62 80       	ldd	r6, Z+2	; 0x02
   188f2:	73 80       	ldd	r7, Z+3	; 0x03
   188f4:	48 16       	cp	r4, r24
   188f6:	59 06       	cpc	r5, r25
   188f8:	6a 06       	cpc	r6, r26
   188fa:	7b 06       	cpc	r7, r27
   188fc:	30 f5       	brcc	.+76     	; 0x1894a <lif_check_dir+0x22a>
   188fe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18902:	21 ff       	sbrs	r18, 1
   18904:	20 c0       	rjmp	.+64     	; 0x18946 <lif_check_dir+0x226>
   18906:	2a 89       	ldd	r18, Y+18	; 0x12
   18908:	3b 89       	ldd	r19, Y+19	; 0x13
   1890a:	23 2b       	or	r18, r19
   1890c:	21 f0       	breq	.+8      	; 0x18916 <lif_check_dir+0x1f6>
   1890e:	4f 5f       	subi	r20, 0xFF	; 255
   18910:	5f 4f       	sbci	r21, 0xFF	; 255
   18912:	6f 4f       	sbci	r22, 0xFF	; 255
   18914:	7f 4f       	sbci	r23, 0xFF	; 255
   18916:	ed b7       	in	r30, 0x3d	; 61
   18918:	fe b7       	in	r31, 0x3e	; 62
   1891a:	46 86       	std	Z+14, r4	; 0x0e
   1891c:	57 86       	std	Z+15, r5	; 0x0f
   1891e:	60 8a       	std	Z+16, r6	; 0x10
   18920:	71 8a       	std	Z+17, r7	; 0x11
   18922:	42 87       	std	Z+10, r20	; 0x0a
   18924:	53 87       	std	Z+11, r21	; 0x0b
   18926:	64 87       	std	Z+12, r22	; 0x0c
   18928:	75 87       	std	Z+13, r23	; 0x0d
   1892a:	86 82       	std	Z+6, r8	; 0x06
   1892c:	97 82       	std	Z+7, r9	; 0x07
   1892e:	a0 86       	std	Z+8, r10	; 0x08
   18930:	b1 86       	std	Z+9, r11	; 0x09
   18932:	f5 82       	std	Z+5, r15	; 0x05
   18934:	e4 82       	std	Z+4, r14	; 0x04
   18936:	84 e0       	ldi	r24, 0x04	; 4
   18938:	9a e3       	ldi	r25, 0x3A	; 58
   1893a:	a0 e0       	ldi	r26, 0x00	; 0
   1893c:	81 83       	std	Z+1, r24	; 0x01
   1893e:	92 83       	std	Z+2, r25	; 0x02
   18940:	a3 83       	std	Z+3, r26	; 0x03
   18942:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18946:	00 e0       	ldi	r16, 0x00	; 0
   18948:	10 e0       	ldi	r17, 0x00	; 0
   1894a:	f6 01       	movw	r30, r12
   1894c:	20 81       	ld	r18, Z
   1894e:	31 81       	ldd	r19, Z+1	; 0x01
   18950:	a9 01       	movw	r20, r18
   18952:	60 e0       	ldi	r22, 0x00	; 0
   18954:	70 e0       	ldi	r23, 0x00	; 0
   18956:	bb 27       	eor	r27, r27
   18958:	a7 2f       	mov	r26, r23
   1895a:	96 2f       	mov	r25, r22
   1895c:	85 2f       	mov	r24, r21
   1895e:	f9 01       	movw	r30, r18
   18960:	ff 27       	eor	r31, r31
   18962:	fb 8b       	std	Y+19, r31	; 0x13
   18964:	ea 8b       	std	Y+18, r30	; 0x12
   18966:	2c 01       	movw	r4, r24
   18968:	3d 01       	movw	r6, r26
   1896a:	ef 2b       	or	r30, r31
   1896c:	29 f0       	breq	.+10     	; 0x18978 <lif_check_dir+0x258>
   1896e:	ff ef       	ldi	r31, 0xFF	; 255
   18970:	4f 1a       	sub	r4, r31
   18972:	5f 0a       	sbc	r5, r31
   18974:	6f 0a       	sbc	r6, r31
   18976:	7f 0a       	sbc	r7, r31
   18978:	f1 01       	movw	r30, r2
   1897a:	80 80       	ld	r8, Z
   1897c:	91 80       	ldd	r9, Z+1	; 0x01
   1897e:	a2 80       	ldd	r10, Z+2	; 0x02
   18980:	b3 80       	ldd	r11, Z+3	; 0x03
   18982:	48 14       	cp	r4, r8
   18984:	59 04       	cpc	r5, r9
   18986:	6a 04       	cpc	r6, r10
   18988:	7b 04       	cpc	r7, r11
   1898a:	28 f5       	brcc	.+74     	; 0x189d6 <lif_check_dir+0x2b6>
   1898c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18990:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18994:	32 ff       	sbrs	r19, 2
   18996:	1f c0       	rjmp	.+62     	; 0x189d6 <lif_check_dir+0x2b6>
   18998:	2a 89       	ldd	r18, Y+18	; 0x12
   1899a:	3b 89       	ldd	r19, Y+19	; 0x13
   1899c:	23 2b       	or	r18, r19
   1899e:	19 f0       	breq	.+6      	; 0x189a6 <lif_check_dir+0x286>
   189a0:	01 96       	adiw	r24, 0x01	; 1
   189a2:	a1 1d       	adc	r26, r1
   189a4:	b1 1d       	adc	r27, r1
   189a6:	ed b7       	in	r30, 0x3d	; 61
   189a8:	fe b7       	in	r31, 0x3e	; 62
   189aa:	86 86       	std	Z+14, r8	; 0x0e
   189ac:	97 86       	std	Z+15, r9	; 0x0f
   189ae:	a0 8a       	std	Z+16, r10	; 0x10
   189b0:	b1 8a       	std	Z+17, r11	; 0x11
   189b2:	82 87       	std	Z+10, r24	; 0x0a
   189b4:	93 87       	std	Z+11, r25	; 0x0b
   189b6:	a4 87       	std	Z+12, r26	; 0x0c
   189b8:	b5 87       	std	Z+13, r27	; 0x0d
   189ba:	46 83       	std	Z+6, r20	; 0x06
   189bc:	57 83       	std	Z+7, r21	; 0x07
   189be:	60 87       	std	Z+8, r22	; 0x08
   189c0:	71 87       	std	Z+9, r23	; 0x09
   189c2:	f5 82       	std	Z+5, r15	; 0x05
   189c4:	e4 82       	std	Z+4, r14	; 0x04
   189c6:	89 eb       	ldi	r24, 0xB9	; 185
   189c8:	99 e3       	ldi	r25, 0x39	; 57
   189ca:	a0 e0       	ldi	r26, 0x00	; 0
   189cc:	81 83       	std	Z+1, r24	; 0x01
   189ce:	92 83       	std	Z+2, r25	; 0x02
   189d0:	a3 83       	std	Z+3, r26	; 0x03
   189d2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   189d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189da:	81 ff       	sbrs	r24, 1
   189dc:	13 c0       	rjmp	.+38     	; 0x18a04 <lif_check_dir+0x2e4>
   189de:	f6 01       	movw	r30, r12
   189e0:	80 81       	ld	r24, Z
   189e2:	91 81       	ldd	r25, Z+1	; 0x01
   189e4:	89 2b       	or	r24, r25
   189e6:	71 f4       	brne	.+28     	; 0x18a04 <lif_check_dir+0x2e4>
   189e8:	ed b7       	in	r30, 0x3d	; 61
   189ea:	fe b7       	in	r31, 0x3e	; 62
   189ec:	f5 82       	std	Z+5, r15	; 0x05
   189ee:	e4 82       	std	Z+4, r14	; 0x04
   189f0:	8e e8       	ldi	r24, 0x8E	; 142
   189f2:	99 e3       	ldi	r25, 0x39	; 57
   189f4:	a0 e0       	ldi	r26, 0x00	; 0
   189f6:	81 83       	std	Z+1, r24	; 0x01
   189f8:	92 83       	std	Z+2, r25	; 0x02
   189fa:	a3 83       	std	Z+3, r26	; 0x03
   189fc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18a00:	00 e0       	ldi	r16, 0x00	; 0
   18a02:	10 e0       	ldi	r17, 0x00	; 0
   18a04:	ec 89       	ldd	r30, Y+20	; 0x14
   18a06:	fd 89       	ldd	r31, Y+21	; 0x15
   18a08:	e2 59       	subi	r30, 0x92	; 146
   18a0a:	ff 4f       	sbci	r31, 0xFF	; 255
   18a0c:	20 81       	ld	r18, Z
   18a0e:	31 81       	ldd	r19, Z+1	; 0x01
   18a10:	21 15       	cp	r18, r1
   18a12:	f1 e0       	ldi	r31, 0x01	; 1
   18a14:	3f 07       	cpc	r19, r31
   18a16:	41 f1       	breq	.+80     	; 0x18a68 <lif_check_dir+0x348>
   18a18:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18a1c:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a20:	ca 01       	movw	r24, r20
   18a22:	82 70       	andi	r24, 0x02	; 2
   18a24:	99 27       	eor	r25, r25
   18a26:	41 ff       	sbrs	r20, 1
   18a28:	20 c0       	rjmp	.+64     	; 0x18a6a <lif_check_dir+0x34a>
   18a2a:	c9 01       	movw	r24, r18
   18a2c:	a0 e0       	ldi	r26, 0x00	; 0
   18a2e:	b0 e0       	ldi	r27, 0x00	; 0
   18a30:	ed b7       	in	r30, 0x3d	; 61
   18a32:	fe b7       	in	r31, 0x3e	; 62
   18a34:	86 83       	std	Z+6, r24	; 0x06
   18a36:	97 83       	std	Z+7, r25	; 0x07
   18a38:	a0 87       	std	Z+8, r26	; 0x08
   18a3a:	b1 87       	std	Z+9, r27	; 0x09
   18a3c:	ec 89       	ldd	r30, Y+20	; 0x14
   18a3e:	fd 89       	ldd	r31, Y+21	; 0x15
   18a40:	80 81       	ld	r24, Z
   18a42:	91 81       	ldd	r25, Z+1	; 0x01
   18a44:	ed b7       	in	r30, 0x3d	; 61
   18a46:	fe b7       	in	r31, 0x3e	; 62
   18a48:	95 83       	std	Z+5, r25	; 0x05
   18a4a:	84 83       	std	Z+4, r24	; 0x04
   18a4c:	82 e6       	ldi	r24, 0x62	; 98
   18a4e:	99 e3       	ldi	r25, 0x39	; 57
   18a50:	a0 e0       	ldi	r26, 0x00	; 0
   18a52:	81 83       	std	Z+1, r24	; 0x01
   18a54:	92 83       	std	Z+2, r25	; 0x02
   18a56:	a3 83       	std	Z+3, r26	; 0x03
   18a58:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18a5c:	80 e0       	ldi	r24, 0x00	; 0
   18a5e:	90 e0       	ldi	r25, 0x00	; 0
   18a60:	04 c0       	rjmp	.+8      	; 0x18a6a <lif_check_dir+0x34a>
   18a62:	81 e0       	ldi	r24, 0x01	; 1
   18a64:	90 e0       	ldi	r25, 0x00	; 0
   18a66:	01 c0       	rjmp	.+2      	; 0x18a6a <lif_check_dir+0x34a>
   18a68:	c8 01       	movw	r24, r16
   18a6a:	65 96       	adiw	r28, 0x15	; 21
   18a6c:	e2 e1       	ldi	r30, 0x12	; 18
   18a6e:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

00018a72 <lif_close_volume>:
   18a72:	cf 93       	push	r28
   18a74:	df 93       	push	r29
   18a76:	00 97       	sbiw	r24, 0x00	; 0
   18a78:	f9 f0       	breq	.+62     	; 0x18ab8 <lif_close_volume+0x46>
   18a7a:	ec 01       	movw	r28, r24
   18a7c:	8a 81       	ldd	r24, Y+2	; 0x02
   18a7e:	9b 81       	ldd	r25, Y+3	; 0x03
   18a80:	00 97       	sbiw	r24, 0x00	; 0
   18a82:	79 f0       	breq	.+30     	; 0x18aa2 <lif_close_volume+0x30>
   18a84:	22 e0       	ldi	r18, 0x02	; 2
   18a86:	30 e0       	ldi	r19, 0x00	; 0
   18a88:	40 e0       	ldi	r20, 0x00	; 0
   18a8a:	50 e0       	ldi	r21, 0x00	; 0
   18a8c:	ba 01       	movw	r22, r20
   18a8e:	0e 94 78 78 	call	0xf0f0	; 0xf0f0 <fseek>
   18a92:	8a 81       	ldd	r24, Y+2	; 0x02
   18a94:	9b 81       	ldd	r25, Y+3	; 0x03
   18a96:	0e 94 60 7a 	call	0xf4c0	; 0xf4c0 <fclose>
   18a9a:	1b 82       	std	Y+3, r1	; 0x03
   18a9c:	1a 82       	std	Y+2, r1	; 0x02
   18a9e:	0e 94 5b 79 	call	0xf2b6	; 0xf2b6 <sync>
   18aa2:	88 81       	ld	r24, Y
   18aa4:	99 81       	ldd	r25, Y+1	; 0x01
   18aa6:	00 97       	sbiw	r24, 0x00	; 0
   18aa8:	11 f0       	breq	.+4      	; 0x18aae <lif_close_volume+0x3c>
   18aaa:	0e 94 d5 bb 	call	0x177aa	; 0x177aa <lif_free>
   18aae:	ce 01       	movw	r24, r28
   18ab0:	8f db       	rcall	.-2274   	; 0x181d0 <lif_vol_clear>
   18ab2:	ce 01       	movw	r24, r28
   18ab4:	0e 94 d5 bb 	call	0x177aa	; 0x177aa <lif_free>
   18ab8:	df 91       	pop	r29
   18aba:	cf 91       	pop	r28
   18abc:	08 95       	ret

00018abe <lif_checkdirindex>:
   18abe:	cf 92       	push	r12
   18ac0:	df 92       	push	r13
   18ac2:	ef 92       	push	r14
   18ac4:	ff 92       	push	r15
   18ac6:	cf 93       	push	r28
   18ac8:	df 93       	push	r29
   18aca:	ad b7       	in	r26, 0x3d	; 61
   18acc:	be b7       	in	r27, 0x3e	; 62
   18ace:	17 97       	sbiw	r26, 0x07	; 7
   18ad0:	0f b6       	in	r0, 0x3f	; 63
   18ad2:	f8 94       	cli
   18ad4:	be bf       	out	0x3e, r27	; 62
   18ad6:	0f be       	out	0x3f, r0	; 63
   18ad8:	ad bf       	out	0x3d, r26	; 61
   18ada:	9b 01       	movw	r18, r22
   18adc:	77 fd       	sbrc	r23, 7
   18ade:	25 c0       	rjmp	.+74     	; 0x18b2a <lif_checkdirindex+0x6c>
   18ae0:	ab 01       	movw	r20, r22
   18ae2:	77 0f       	add	r23, r23
   18ae4:	66 0b       	sbc	r22, r22
   18ae6:	77 0b       	sbc	r23, r23
   18ae8:	e5 e0       	ldi	r30, 0x05	; 5
   18aea:	44 0f       	add	r20, r20
   18aec:	55 1f       	adc	r21, r21
   18aee:	66 1f       	adc	r22, r22
   18af0:	77 1f       	adc	r23, r23
   18af2:	ea 95       	dec	r30
   18af4:	d1 f7       	brne	.-12     	; 0x18aea <lif_checkdirindex+0x2c>
   18af6:	c5 2e       	mov	r12, r21
   18af8:	d6 2e       	mov	r13, r22
   18afa:	e7 2e       	mov	r14, r23
   18afc:	ff 24       	eor	r15, r15
   18afe:	55 27       	eor	r21, r21
   18b00:	66 27       	eor	r22, r22
   18b02:	77 27       	eor	r23, r23
   18b04:	45 2b       	or	r20, r21
   18b06:	46 2b       	or	r20, r22
   18b08:	47 2b       	or	r20, r23
   18b0a:	29 f0       	breq	.+10     	; 0x18b16 <lif_checkdirindex+0x58>
   18b0c:	4f ef       	ldi	r20, 0xFF	; 255
   18b0e:	c4 1a       	sub	r12, r20
   18b10:	d4 0a       	sbc	r13, r20
   18b12:	e4 0a       	sbc	r14, r20
   18b14:	f4 0a       	sbc	r15, r20
   18b16:	fc 01       	movw	r30, r24
   18b18:	45 a9       	ldd	r20, Z+53	; 0x35
   18b1a:	56 a9       	ldd	r21, Z+54	; 0x36
   18b1c:	67 a9       	ldd	r22, Z+55	; 0x37
   18b1e:	70 ad       	ldd	r23, Z+56	; 0x38
   18b20:	4c 15       	cp	r20, r12
   18b22:	5d 05       	cpc	r21, r13
   18b24:	6e 05       	cpc	r22, r14
   18b26:	7f 05       	cpc	r23, r15
   18b28:	08 f5       	brcc	.+66     	; 0x18b6c <lif_checkdirindex+0xae>
   18b2a:	ec 01       	movw	r28, r24
   18b2c:	ed b7       	in	r30, 0x3d	; 61
   18b2e:	fe b7       	in	r31, 0x3e	; 62
   18b30:	37 83       	std	Z+7, r19	; 0x07
   18b32:	26 83       	std	Z+6, r18	; 0x06
   18b34:	88 81       	ld	r24, Y
   18b36:	99 81       	ldd	r25, Y+1	; 0x01
   18b38:	95 83       	std	Z+5, r25	; 0x05
   18b3a:	84 83       	std	Z+4, r24	; 0x04
   18b3c:	8f e9       	ldi	r24, 0x9F	; 159
   18b3e:	98 e3       	ldi	r25, 0x38	; 56
   18b40:	a0 e0       	ldi	r26, 0x00	; 0
   18b42:	81 83       	std	Z+1, r24	; 0x01
   18b44:	92 83       	std	Z+2, r25	; 0x02
   18b46:	a3 83       	std	Z+3, r26	; 0x03
   18b48:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18b4c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18b50:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b54:	c9 01       	movw	r24, r18
   18b56:	88 27       	eor	r24, r24
   18b58:	94 70       	andi	r25, 0x04	; 4
   18b5a:	32 ff       	sbrs	r19, 2
   18b5c:	09 c0       	rjmp	.+18     	; 0x18b70 <lif_checkdirindex+0xb2>
   18b5e:	68 e1       	ldi	r22, 0x18	; 24
   18b60:	76 e1       	ldi	r23, 0x16	; 22
   18b62:	ce 01       	movw	r24, r28
   18b64:	3c db       	rcall	.-2440   	; 0x181de <lif_dump_vol>
   18b66:	80 e0       	ldi	r24, 0x00	; 0
   18b68:	90 e0       	ldi	r25, 0x00	; 0
   18b6a:	02 c0       	rjmp	.+4      	; 0x18b70 <lif_checkdirindex+0xb2>
   18b6c:	81 e0       	ldi	r24, 0x01	; 1
   18b6e:	90 e0       	ldi	r25, 0x00	; 0
   18b70:	ad b7       	in	r26, 0x3d	; 61
   18b72:	be b7       	in	r27, 0x3e	; 62
   18b74:	17 96       	adiw	r26, 0x07	; 7
   18b76:	0f b6       	in	r0, 0x3f	; 63
   18b78:	f8 94       	cli
   18b7a:	be bf       	out	0x3e, r27	; 62
   18b7c:	0f be       	out	0x3f, r0	; 63
   18b7e:	ad bf       	out	0x3d, r26	; 61
   18b80:	df 91       	pop	r29
   18b82:	cf 91       	pop	r28
   18b84:	ff 90       	pop	r15
   18b86:	ef 90       	pop	r14
   18b88:	df 90       	pop	r13
   18b8a:	cf 90       	pop	r12
   18b8c:	08 95       	ret

00018b8e <lif_readdirindex>:
   18b8e:	a5 e2       	ldi	r26, 0x25	; 37
   18b90:	b0 e0       	ldi	r27, 0x00	; 0
   18b92:	ed ec       	ldi	r30, 0xCD	; 205
   18b94:	f5 ec       	ldi	r31, 0xC5	; 197
   18b96:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
   18b9a:	7c 01       	movw	r14, r24
   18b9c:	6b 01       	movw	r12, r22
   18b9e:	8f df       	rcall	.-226    	; 0x18abe <lif_checkdirindex>
   18ba0:	89 2b       	or	r24, r25
   18ba2:	19 f4       	brne	.+6      	; 0x18baa <lif_readdirindex+0x1c>
   18ba4:	00 e0       	ldi	r16, 0x00	; 0
   18ba6:	10 e0       	ldi	r17, 0x00	; 0
   18ba8:	54 c0       	rjmp	.+168    	; 0x18c52 <lif_readdirindex+0xc4>
   18baa:	f7 01       	movw	r30, r14
   18bac:	85 a5       	ldd	r24, Z+45	; 0x2d
   18bae:	96 a5       	ldd	r25, Z+46	; 0x2e
   18bb0:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18bb2:	b0 a9       	ldd	r27, Z+48	; 0x30
   18bb4:	44 27       	eor	r20, r20
   18bb6:	58 2f       	mov	r21, r24
   18bb8:	69 2f       	mov	r22, r25
   18bba:	7a 2f       	mov	r23, r26
   18bbc:	c6 01       	movw	r24, r12
   18bbe:	0d 2c       	mov	r0, r13
   18bc0:	00 0c       	add	r0, r0
   18bc2:	aa 0b       	sbc	r26, r26
   18bc4:	bb 0b       	sbc	r27, r27
   18bc6:	35 e0       	ldi	r19, 0x05	; 5
   18bc8:	88 0f       	add	r24, r24
   18bca:	99 1f       	adc	r25, r25
   18bcc:	aa 1f       	adc	r26, r26
   18bce:	bb 1f       	adc	r27, r27
   18bd0:	3a 95       	dec	r19
   18bd2:	d1 f7       	brne	.-12     	; 0x18bc8 <lif_readdirindex+0x3a>
   18bd4:	9a 01       	movw	r18, r20
   18bd6:	ab 01       	movw	r20, r22
   18bd8:	28 0f       	add	r18, r24
   18bda:	39 1f       	adc	r19, r25
   18bdc:	4a 1f       	adc	r20, r26
   18bde:	5b 1f       	adc	r21, r27
   18be0:	00 e2       	ldi	r16, 0x20	; 32
   18be2:	10 e0       	ldi	r17, 0x00	; 0
   18be4:	be 01       	movw	r22, r28
   18be6:	6a 5f       	subi	r22, 0xFA	; 250
   18be8:	7f 4f       	sbci	r23, 0xFF	; 255
   18bea:	c7 01       	movw	r24, r14
   18bec:	0e 94 8d bc 	call	0x1791a	; 0x1791a <lif_read>
   18bf0:	60 32       	cpi	r22, 0x20	; 32
   18bf2:	71 05       	cpc	r23, r1
   18bf4:	81 05       	cpc	r24, r1
   18bf6:	91 05       	cpc	r25, r1
   18bf8:	a8 f2       	brcs	.-86     	; 0x18ba4 <lif_readdirindex+0x16>
   18bfa:	b7 01       	movw	r22, r14
   18bfc:	ce 01       	movw	r24, r28
   18bfe:	06 96       	adiw	r24, 0x06	; 6
   18c00:	91 d9       	rcall	.-3294   	; 0x17f24 <lif_str2dir>
   18c02:	f7 01       	movw	r30, r14
   18c04:	e6 5a       	subi	r30, 0xA6	; 166
   18c06:	ff 4f       	sbci	r31, 0xFF	; 255
   18c08:	80 81       	ld	r24, Z
   18c0a:	91 81       	ldd	r25, Z+1	; 0x01
   18c0c:	01 96       	adiw	r24, 0x01	; 1
   18c0e:	19 f4       	brne	.+6      	; 0x18c16 <lif_readdirindex+0x88>
   18c10:	f7 01       	movw	r30, r14
   18c12:	d3 a2       	std	Z+35, r13	; 0x23
   18c14:	c2 a2       	std	Z+34, r12	; 0x22
   18c16:	c7 01       	movw	r24, r14
   18c18:	83 dd       	rcall	.-1274   	; 0x18720 <lif_check_dir>
   18c1a:	8c 01       	movw	r16, r24
   18c1c:	89 2b       	or	r24, r25
   18c1e:	b9 f4       	brne	.+46     	; 0x18c4e <lif_readdirindex+0xc0>
   18c20:	ed b7       	in	r30, 0x3d	; 61
   18c22:	fe b7       	in	r31, 0x3e	; 62
   18c24:	d5 82       	std	Z+5, r13	; 0x05
   18c26:	c4 82       	std	Z+4, r12	; 0x04
   18c28:	8f e7       	ldi	r24, 0x7F	; 127
   18c2a:	98 e3       	ldi	r25, 0x38	; 56
   18c2c:	a0 e0       	ldi	r26, 0x00	; 0
   18c2e:	81 83       	std	Z+1, r24	; 0x01
   18c30:	92 83       	std	Z+2, r25	; 0x02
   18c32:	a3 83       	std	Z+3, r26	; 0x03
   18c34:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18c38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c3c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c40:	92 ff       	sbrs	r25, 2
   18c42:	b0 cf       	rjmp	.-160    	; 0x18ba4 <lif_readdirindex+0x16>
   18c44:	69 e2       	ldi	r22, 0x29	; 41
   18c46:	76 e1       	ldi	r23, 0x16	; 22
   18c48:	c7 01       	movw	r24, r14
   18c4a:	c9 da       	rcall	.-2670   	; 0x181de <lif_dump_vol>
   18c4c:	02 c0       	rjmp	.+4      	; 0x18c52 <lif_readdirindex+0xc4>
   18c4e:	01 e0       	ldi	r16, 0x01	; 1
   18c50:	10 e0       	ldi	r17, 0x00	; 0
   18c52:	c8 01       	movw	r24, r16
   18c54:	a5 96       	adiw	r28, 0x25	; 37
   18c56:	e8 e0       	ldi	r30, 0x08	; 8
   18c58:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

00018c5c <lif_writedirindex>:
   18c5c:	a0 e2       	ldi	r26, 0x20	; 32
   18c5e:	b0 e0       	ldi	r27, 0x00	; 0
   18c60:	e4 e3       	ldi	r30, 0x34	; 52
   18c62:	f6 ec       	ldi	r31, 0xC6	; 198
   18c64:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
   18c68:	5c 01       	movw	r10, r24
   18c6a:	6b 01       	movw	r12, r22
   18c6c:	59 dd       	rcall	.-1358   	; 0x18720 <lif_check_dir>
   18c6e:	7c 01       	movw	r14, r24
   18c70:	89 2b       	or	r24, r25
   18c72:	71 f4       	brne	.+28     	; 0x18c90 <lif_writedirindex+0x34>
   18c74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c78:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c7c:	92 fd       	sbrc	r25, 2
   18c7e:	03 c0       	rjmp	.+6      	; 0x18c86 <lif_writedirindex+0x2a>
   18c80:	e1 2c       	mov	r14, r1
   18c82:	f1 2c       	mov	r15, r1
   18c84:	42 c0       	rjmp	.+132    	; 0x18d0a <lif_writedirindex+0xae>
   18c86:	6a e3       	ldi	r22, 0x3A	; 58
   18c88:	76 e1       	ldi	r23, 0x16	; 22
   18c8a:	c5 01       	movw	r24, r10
   18c8c:	a8 da       	rcall	.-2736   	; 0x181de <lif_dump_vol>
   18c8e:	3d c0       	rjmp	.+122    	; 0x18d0a <lif_writedirindex+0xae>
   18c90:	b6 01       	movw	r22, r12
   18c92:	c5 01       	movw	r24, r10
   18c94:	14 df       	rcall	.-472    	; 0x18abe <lif_checkdirindex>
   18c96:	89 2b       	or	r24, r25
   18c98:	99 f3       	breq	.-26     	; 0x18c80 <lif_writedirindex+0x24>
   18c9a:	f5 01       	movw	r30, r10
   18c9c:	e6 5a       	subi	r30, 0xA6	; 166
   18c9e:	ff 4f       	sbci	r31, 0xFF	; 255
   18ca0:	80 81       	ld	r24, Z
   18ca2:	91 81       	ldd	r25, Z+1	; 0x01
   18ca4:	01 96       	adiw	r24, 0x01	; 1
   18ca6:	19 f4       	brne	.+6      	; 0x18cae <lif_writedirindex+0x52>
   18ca8:	f5 01       	movw	r30, r10
   18caa:	d3 a2       	std	Z+35, r13	; 0x23
   18cac:	c2 a2       	std	Z+34, r12	; 0x22
   18cae:	f5 01       	movw	r30, r10
   18cb0:	85 a5       	ldd	r24, Z+45	; 0x2d
   18cb2:	96 a5       	ldd	r25, Z+46	; 0x2e
   18cb4:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18cb6:	b0 a9       	ldd	r27, Z+48	; 0x30
   18cb8:	ba 2f       	mov	r27, r26
   18cba:	a9 2f       	mov	r26, r25
   18cbc:	98 2f       	mov	r25, r24
   18cbe:	88 27       	eor	r24, r24
   18cc0:	0d 2c       	mov	r0, r13
   18cc2:	00 0c       	add	r0, r0
   18cc4:	ee 08       	sbc	r14, r14
   18cc6:	ff 08       	sbc	r15, r15
   18cc8:	35 e0       	ldi	r19, 0x05	; 5
   18cca:	cc 0c       	add	r12, r12
   18ccc:	dd 1c       	adc	r13, r13
   18cce:	ee 1c       	adc	r14, r14
   18cd0:	ff 1c       	adc	r15, r15
   18cd2:	3a 95       	dec	r19
   18cd4:	d1 f7       	brne	.-12     	; 0x18cca <lif_writedirindex+0x6e>
   18cd6:	c8 0e       	add	r12, r24
   18cd8:	d9 1e       	adc	r13, r25
   18cda:	ea 1e       	adc	r14, r26
   18cdc:	fb 1e       	adc	r15, r27
   18cde:	be 01       	movw	r22, r28
   18ce0:	6f 5f       	subi	r22, 0xFF	; 255
   18ce2:	7f 4f       	sbci	r23, 0xFF	; 255
   18ce4:	c5 01       	movw	r24, r10
   18ce6:	b3 d8       	rcall	.-3738   	; 0x17e4e <lif_dir2str>
   18ce8:	00 e2       	ldi	r16, 0x20	; 32
   18cea:	10 e0       	ldi	r17, 0x00	; 0
   18cec:	a7 01       	movw	r20, r14
   18cee:	96 01       	movw	r18, r12
   18cf0:	be 01       	movw	r22, r28
   18cf2:	6f 5f       	subi	r22, 0xFF	; 255
   18cf4:	7f 4f       	sbci	r23, 0xFF	; 255
   18cf6:	c5 01       	movw	r24, r10
   18cf8:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
   18cfc:	31 e0       	ldi	r19, 0x01	; 1
   18cfe:	20 e0       	ldi	r18, 0x00	; 0
   18d00:	80 97       	sbiw	r24, 0x20	; 32
   18d02:	0c f4       	brge	.+2      	; 0x18d06 <lif_writedirindex+0xaa>
   18d04:	30 e0       	ldi	r19, 0x00	; 0
   18d06:	e3 2e       	mov	r14, r19
   18d08:	f2 2e       	mov	r15, r18
   18d0a:	c7 01       	movw	r24, r14
   18d0c:	a0 96       	adiw	r28, 0x20	; 32
   18d0e:	ea e0       	ldi	r30, 0x0A	; 10
   18d10:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

00018d14 <lif_writedirEOF>:
   18d14:	0f 93       	push	r16
   18d16:	1f 93       	push	r17
   18d18:	cf 93       	push	r28
   18d1a:	df 93       	push	r29
   18d1c:	ec 01       	movw	r28, r24
   18d1e:	8b 01       	movw	r16, r22
   18d20:	4f da       	rcall	.-2914   	; 0x181c0 <lif_dir_clear>
   18d22:	fe 01       	movw	r30, r28
   18d24:	e6 5a       	subi	r30, 0xA6	; 166
   18d26:	ff 4f       	sbci	r31, 0xFF	; 255
   18d28:	8f ef       	ldi	r24, 0xFF	; 255
   18d2a:	9f ef       	ldi	r25, 0xFF	; 255
   18d2c:	91 83       	std	Z+1, r25	; 0x01
   18d2e:	80 83       	st	Z, r24
   18d30:	1b a3       	std	Y+35, r17	; 0x23
   18d32:	0a a3       	std	Y+34, r16	; 0x22
   18d34:	b8 01       	movw	r22, r16
   18d36:	ce 01       	movw	r24, r28
   18d38:	91 df       	rcall	.-222    	; 0x18c5c <lif_writedirindex>
   18d3a:	df 91       	pop	r29
   18d3c:	cf 91       	pop	r28
   18d3e:	1f 91       	pop	r17
   18d40:	0f 91       	pop	r16
   18d42:	08 95       	ret

00018d44 <lif_updatefree>:
   18d44:	2f 92       	push	r2
   18d46:	3f 92       	push	r3
   18d48:	4f 92       	push	r4
   18d4a:	5f 92       	push	r5
   18d4c:	6f 92       	push	r6
   18d4e:	7f 92       	push	r7
   18d50:	8f 92       	push	r8
   18d52:	af 92       	push	r10
   18d54:	bf 92       	push	r11
   18d56:	cf 92       	push	r12
   18d58:	df 92       	push	r13
   18d5a:	ef 92       	push	r14
   18d5c:	ff 92       	push	r15
   18d5e:	0f 93       	push	r16
   18d60:	1f 93       	push	r17
   18d62:	cf 93       	push	r28
   18d64:	df 93       	push	r29
   18d66:	cd b7       	in	r28, 0x3d	; 61
   18d68:	de b7       	in	r29, 0x3e	; 62
   18d6a:	2f 97       	sbiw	r28, 0x0f	; 15
   18d6c:	0f b6       	in	r0, 0x3f	; 63
   18d6e:	f8 94       	cli
   18d70:	de bf       	out	0x3e, r29	; 62
   18d72:	0f be       	out	0x3f, r0	; 63
   18d74:	cd bf       	out	0x3d, r28	; 61
   18d76:	9f 87       	std	Y+15, r25	; 0x0f
   18d78:	8e 87       	std	Y+14, r24	; 0x0e
   18d7a:	fc 01       	movw	r30, r24
   18d7c:	24 84       	ldd	r2, Z+12	; 0x0c
   18d7e:	35 84       	ldd	r3, Z+13	; 0x0d
   18d80:	46 84       	ldd	r4, Z+14	; 0x0e
   18d82:	57 84       	ldd	r5, Z+15	; 0x0f
   18d84:	80 89       	ldd	r24, Z+16	; 0x10
   18d86:	91 89       	ldd	r25, Z+17	; 0x11
   18d88:	a2 89       	ldd	r26, Z+18	; 0x12
   18d8a:	b3 89       	ldd	r27, Z+19	; 0x13
   18d8c:	80 8f       	std	Z+24, r24	; 0x18
   18d8e:	91 8f       	std	Z+25, r25	; 0x19
   18d90:	a2 8f       	std	Z+26, r26	; 0x1a
   18d92:	b3 8f       	std	Z+27, r27	; 0x1b
   18d94:	14 8a       	std	Z+20, r1	; 0x14
   18d96:	15 8a       	std	Z+21, r1	; 0x15
   18d98:	16 8a       	std	Z+22, r1	; 0x16
   18d9a:	17 8a       	std	Z+23, r1	; 0x17
   18d9c:	17 8e       	std	Z+31, r1	; 0x1f
   18d9e:	16 8e       	std	Z+30, r1	; 0x1e
   18da0:	15 8e       	std	Z+29, r1	; 0x1d
   18da2:	14 8e       	std	Z+28, r1	; 0x1c
   18da4:	11 a2       	std	Z+33, r1	; 0x21
   18da6:	10 a2       	std	Z+32, r1	; 0x20
   18da8:	13 a2       	std	Z+35, r1	; 0x23
   18daa:	12 a2       	std	Z+34, r1	; 0x22
   18dac:	cc 24       	eor	r12, r12
   18dae:	c3 94       	inc	r12
   18db0:	d1 2c       	mov	r13, r1
   18db2:	0f ef       	ldi	r16, 0xFF	; 255
   18db4:	1f ef       	ldi	r17, 0xFF	; 255
   18db6:	e6 5a       	subi	r30, 0xA6	; 166
   18db8:	ff 4f       	sbci	r31, 0xFF	; 255
   18dba:	f9 87       	std	Y+9, r31	; 0x09
   18dbc:	e8 87       	std	Y+8, r30	; 0x08
   18dbe:	ae 84       	ldd	r10, Y+14	; 0x0e
   18dc0:	bf 84       	ldd	r11, Y+15	; 0x0f
   18dc2:	fc e5       	ldi	r31, 0x5C	; 92
   18dc4:	af 0e       	add	r10, r31
   18dc6:	b1 1c       	adc	r11, r1
   18dc8:	8e 85       	ldd	r24, Y+14	; 0x0e
   18dca:	9f 85       	ldd	r25, Y+15	; 0x0f
   18dcc:	80 5a       	subi	r24, 0xA0	; 160
   18dce:	9f 4f       	sbci	r25, 0xFF	; 255
   18dd0:	9b 87       	std	Y+11, r25	; 0x0b
   18dd2:	8a 87       	std	Y+10, r24	; 0x0a
   18dd4:	ee 85       	ldd	r30, Y+14	; 0x0e
   18dd6:	ff 85       	ldd	r31, Y+15	; 0x0f
   18dd8:	e1 5b       	subi	r30, 0xB1	; 177
   18dda:	ff 4f       	sbci	r31, 0xFF	; 255
   18ddc:	fd 87       	std	Y+13, r31	; 0x0d
   18dde:	ec 87       	std	Y+12, r30	; 0x0c
   18de0:	82 e3       	ldi	r24, 0x32	; 50
   18de2:	98 e3       	ldi	r25, 0x38	; 56
   18de4:	3c 01       	movw	r6, r24
   18de6:	81 2c       	mov	r8, r1
   18de8:	76 01       	movw	r14, r12
   18dea:	21 e0       	ldi	r18, 0x01	; 1
   18dec:	e2 1a       	sub	r14, r18
   18dee:	f1 08       	sbc	r15, r1
   18df0:	b7 01       	movw	r22, r14
   18df2:	8e 85       	ldd	r24, Y+14	; 0x0e
   18df4:	9f 85       	ldd	r25, Y+15	; 0x0f
   18df6:	cb de       	rcall	.-618    	; 0x18b8e <lif_readdirindex>
   18df8:	89 2b       	or	r24, r25
   18dfa:	19 f4       	brne	.+6      	; 0x18e02 <lif_updatefree+0xbe>
   18dfc:	80 e0       	ldi	r24, 0x00	; 0
   18dfe:	90 e0       	ldi	r25, 0x00	; 0
   18e00:	91 c0       	rjmp	.+290    	; 0x18f24 <lif_updatefree+0x1e0>
   18e02:	e8 85       	ldd	r30, Y+8	; 0x08
   18e04:	f9 85       	ldd	r31, Y+9	; 0x09
   18e06:	80 81       	ld	r24, Z
   18e08:	91 81       	ldd	r25, Z+1	; 0x01
   18e0a:	8f 3f       	cpi	r24, 0xFF	; 255
   18e0c:	ff ef       	ldi	r31, 0xFF	; 255
   18e0e:	9f 07       	cpc	r25, r31
   18e10:	c1 f4       	brne	.+48     	; 0x18e42 <lif_updatefree+0xfe>
   18e12:	ee 85       	ldd	r30, Y+14	; 0x0e
   18e14:	ff 85       	ldd	r31, Y+15	; 0x0f
   18e16:	0f 3f       	cpi	r16, 0xFF	; 255
   18e18:	2f ef       	ldi	r18, 0xFF	; 255
   18e1a:	12 07       	cpc	r17, r18
   18e1c:	09 f4       	brne	.+2      	; 0x18e20 <lif_updatefree+0xdc>
   18e1e:	78 c0       	rjmp	.+240    	; 0x18f10 <lif_updatefree+0x1cc>
   18e20:	13 a3       	std	Z+35, r17	; 0x23
   18e22:	02 a3       	std	Z+34, r16	; 0x22
   18e24:	e0 1a       	sub	r14, r16
   18e26:	f1 0a       	sbc	r15, r17
   18e28:	86 8d       	ldd	r24, Z+30	; 0x1e
   18e2a:	97 8d       	ldd	r25, Z+31	; 0x1f
   18e2c:	8e 19       	sub	r24, r14
   18e2e:	9f 09       	sbc	r25, r15
   18e30:	97 8f       	std	Z+31, r25	; 0x1f
   18e32:	86 8f       	std	Z+30, r24	; 0x1e
   18e34:	b8 01       	movw	r22, r16
   18e36:	cf 01       	movw	r24, r30
   18e38:	6d df       	rcall	.-294    	; 0x18d14 <lif_writedirEOF>
   18e3a:	89 2b       	or	r24, r25
   18e3c:	09 f0       	breq	.+2      	; 0x18e40 <lif_updatefree+0xfc>
   18e3e:	6a c0       	rjmp	.+212    	; 0x18f14 <lif_updatefree+0x1d0>
   18e40:	dd cf       	rjmp	.-70     	; 0x18dfc <lif_updatefree+0xb8>
   18e42:	89 2b       	or	r24, r25
   18e44:	81 f4       	brne	.+32     	; 0x18e66 <lif_updatefree+0x122>
   18e46:	0f 3f       	cpi	r16, 0xFF	; 255
   18e48:	ff ef       	ldi	r31, 0xFF	; 255
   18e4a:	1f 07       	cpc	r17, r31
   18e4c:	09 f4       	brne	.+2      	; 0x18e50 <lif_updatefree+0x10c>
   18e4e:	87 01       	movw	r16, r14
   18e50:	ee 85       	ldd	r30, Y+14	; 0x0e
   18e52:	ff 85       	ldd	r31, Y+15	; 0x0f
   18e54:	86 8d       	ldd	r24, Z+30	; 0x1e
   18e56:	97 8d       	ldd	r25, Z+31	; 0x1f
   18e58:	01 96       	adiw	r24, 0x01	; 1
   18e5a:	97 8f       	std	Z+31, r25	; 0x1f
   18e5c:	86 8f       	std	Z+30, r24	; 0x1e
   18e5e:	ff ef       	ldi	r31, 0xFF	; 255
   18e60:	cf 1a       	sub	r12, r31
   18e62:	df 0a       	sbc	r13, r31
   18e64:	c1 cf       	rjmp	.-126    	; 0x18de8 <lif_updatefree+0xa4>
   18e66:	f5 01       	movw	r30, r10
   18e68:	80 81       	ld	r24, Z
   18e6a:	91 81       	ldd	r25, Z+1	; 0x01
   18e6c:	a2 81       	ldd	r26, Z+2	; 0x02
   18e6e:	b3 81       	ldd	r27, Z+3	; 0x03
   18e70:	82 15       	cp	r24, r2
   18e72:	93 05       	cpc	r25, r3
   18e74:	a4 05       	cpc	r26, r4
   18e76:	b5 05       	cpc	r27, r5
   18e78:	b8 f4       	brcc	.+46     	; 0x18ea8 <lif_updatefree+0x164>
   18e7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18e7e:	81 ff       	sbrs	r24, 1
   18e80:	13 c0       	rjmp	.+38     	; 0x18ea8 <lif_updatefree+0x164>
   18e82:	8c 85       	ldd	r24, Y+12	; 0x0c
   18e84:	9d 85       	ldd	r25, Y+13	; 0x0d
   18e86:	ed b7       	in	r30, 0x3d	; 61
   18e88:	fe b7       	in	r31, 0x3e	; 62
   18e8a:	97 83       	std	Z+7, r25	; 0x07
   18e8c:	86 83       	std	Z+6, r24	; 0x06
   18e8e:	ee 85       	ldd	r30, Y+14	; 0x0e
   18e90:	ff 85       	ldd	r31, Y+15	; 0x0f
   18e92:	80 81       	ld	r24, Z
   18e94:	91 81       	ldd	r25, Z+1	; 0x01
   18e96:	ed b7       	in	r30, 0x3d	; 61
   18e98:	fe b7       	in	r31, 0x3e	; 62
   18e9a:	95 83       	std	Z+5, r25	; 0x05
   18e9c:	84 83       	std	Z+4, r24	; 0x04
   18e9e:	61 82       	std	Z+1, r6	; 0x01
   18ea0:	72 82       	std	Z+2, r7	; 0x02
   18ea2:	83 82       	std	Z+3, r8	; 0x03
   18ea4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   18ea8:	ea 85       	ldd	r30, Y+10	; 0x0a
   18eaa:	fb 85       	ldd	r31, Y+11	; 0x0b
   18eac:	80 81       	ld	r24, Z
   18eae:	91 81       	ldd	r25, Z+1	; 0x01
   18eb0:	a2 81       	ldd	r26, Z+2	; 0x02
   18eb2:	b3 81       	ldd	r27, Z+3	; 0x03
   18eb4:	ee 85       	ldd	r30, Y+14	; 0x0e
   18eb6:	ff 85       	ldd	r31, Y+15	; 0x0f
   18eb8:	44 89       	ldd	r20, Z+20	; 0x14
   18eba:	55 89       	ldd	r21, Z+21	; 0x15
   18ebc:	66 89       	ldd	r22, Z+22	; 0x16
   18ebe:	77 89       	ldd	r23, Z+23	; 0x17
   18ec0:	48 0f       	add	r20, r24
   18ec2:	59 1f       	adc	r21, r25
   18ec4:	6a 1f       	adc	r22, r26
   18ec6:	7b 1f       	adc	r23, r27
   18ec8:	44 8b       	std	Z+20, r20	; 0x14
   18eca:	55 8b       	std	Z+21, r21	; 0x15
   18ecc:	66 8b       	std	Z+22, r22	; 0x16
   18ece:	77 8b       	std	Z+23, r23	; 0x17
   18ed0:	40 8d       	ldd	r20, Z+24	; 0x18
   18ed2:	51 8d       	ldd	r21, Z+25	; 0x19
   18ed4:	62 8d       	ldd	r22, Z+26	; 0x1a
   18ed6:	73 8d       	ldd	r23, Z+27	; 0x1b
   18ed8:	48 1b       	sub	r20, r24
   18eda:	59 0b       	sbc	r21, r25
   18edc:	6a 0b       	sbc	r22, r26
   18ede:	7b 0b       	sbc	r23, r27
   18ee0:	40 8f       	std	Z+24, r20	; 0x18
   18ee2:	51 8f       	std	Z+25, r21	; 0x19
   18ee4:	62 8f       	std	Z+26, r22	; 0x1a
   18ee6:	73 8f       	std	Z+27, r23	; 0x1b
   18ee8:	24 8d       	ldd	r18, Z+28	; 0x1c
   18eea:	35 8d       	ldd	r19, Z+29	; 0x1d
   18eec:	2f 5f       	subi	r18, 0xFF	; 255
   18eee:	3f 4f       	sbci	r19, 0xFF	; 255
   18ef0:	35 8f       	std	Z+29, r19	; 0x1d
   18ef2:	24 8f       	std	Z+28, r18	; 0x1c
   18ef4:	f5 01       	movw	r30, r10
   18ef6:	40 81       	ld	r20, Z
   18ef8:	51 81       	ldd	r21, Z+1	; 0x01
   18efa:	62 81       	ldd	r22, Z+2	; 0x02
   18efc:	73 81       	ldd	r23, Z+3	; 0x03
   18efe:	1c 01       	movw	r2, r24
   18f00:	2d 01       	movw	r4, r26
   18f02:	24 0e       	add	r2, r20
   18f04:	35 1e       	adc	r3, r21
   18f06:	46 1e       	adc	r4, r22
   18f08:	57 1e       	adc	r5, r23
   18f0a:	0f ef       	ldi	r16, 0xFF	; 255
   18f0c:	1f ef       	ldi	r17, 0xFF	; 255
   18f0e:	a7 cf       	rjmp	.-178    	; 0x18e5e <lif_updatefree+0x11a>
   18f10:	f3 a2       	std	Z+35, r15	; 0x23
   18f12:	e2 a2       	std	Z+34, r14	; 0x22
   18f14:	8f ef       	ldi	r24, 0xFF	; 255
   18f16:	9f ef       	ldi	r25, 0xFF	; 255
   18f18:	ee 85       	ldd	r30, Y+14	; 0x0e
   18f1a:	ff 85       	ldd	r31, Y+15	; 0x0f
   18f1c:	91 a3       	std	Z+33, r25	; 0x21
   18f1e:	80 a3       	std	Z+32, r24	; 0x20
   18f20:	8e 85       	ldd	r24, Y+14	; 0x0e
   18f22:	9f 85       	ldd	r25, Y+15	; 0x0f
   18f24:	2f 96       	adiw	r28, 0x0f	; 15
   18f26:	0f b6       	in	r0, 0x3f	; 63
   18f28:	f8 94       	cli
   18f2a:	de bf       	out	0x3e, r29	; 62
   18f2c:	0f be       	out	0x3f, r0	; 63
   18f2e:	cd bf       	out	0x3d, r28	; 61
   18f30:	df 91       	pop	r29
   18f32:	cf 91       	pop	r28
   18f34:	1f 91       	pop	r17
   18f36:	0f 91       	pop	r16
   18f38:	ff 90       	pop	r15
   18f3a:	ef 90       	pop	r14
   18f3c:	df 90       	pop	r13
   18f3e:	cf 90       	pop	r12
   18f40:	bf 90       	pop	r11
   18f42:	af 90       	pop	r10
   18f44:	8f 90       	pop	r8
   18f46:	7f 90       	pop	r7
   18f48:	6f 90       	pop	r6
   18f4a:	5f 90       	pop	r5
   18f4c:	4f 90       	pop	r4
   18f4e:	3f 90       	pop	r3
   18f50:	2f 90       	pop	r2
   18f52:	08 95       	ret

00018f54 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   18f54:	a9 e2       	ldi	r26, 0x29	; 41
   18f56:	b1 e0       	ldi	r27, 0x01	; 1
   18f58:	e0 eb       	ldi	r30, 0xB0	; 176
   18f5a:	f7 ec       	ldi	r31, 0xC7	; 199
   18f5c:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
   18f60:	4c 01       	movw	r8, r24
   18f62:	3b 01       	movw	r6, r22
   18f64:	19 01       	movw	r2, r18
   18f66:	2a 01       	movw	r4, r20
   18f68:	ca 5d       	subi	r28, 0xDA	; 218
   18f6a:	de 4f       	sbci	r29, 0xFE	; 254
   18f6c:	e8 82       	st	Y, r14
   18f6e:	f9 82       	std	Y+1, r15	; 0x01
   18f70:	0a 83       	std	Y+2, r16	; 0x02
   18f72:	1b 83       	std	Y+3, r17	; 0x03
   18f74:	c6 52       	subi	r28, 0x26	; 38
   18f76:	d1 40       	sbci	r29, 0x01	; 1
   18f78:	c2 5e       	subi	r28, 0xE2	; 226
   18f7a:	de 4f       	sbci	r29, 0xFE	; 254
   18f7c:	a8 82       	st	Y, r10
   18f7e:	b9 82       	std	Y+1, r11	; 0x01
   18f80:	ca 82       	std	Y+2, r12	; 0x02
   18f82:	db 82       	std	Y+3, r13	; 0x03
   18f84:	ce 51       	subi	r28, 0x1E	; 30
   18f86:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   18f88:	80 e0       	ldi	r24, 0x00	; 0
   18f8a:	90 e0       	ldi	r25, 0x00	; 0
   18f8c:	0e 94 31 35 	call	0x6a62	; 0x6a62 <time>
   18f90:	5b 01       	movw	r10, r22
   18f92:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   18f94:	64 e7       	ldi	r22, 0x74	; 116
   18f96:	70 e0       	ldi	r23, 0x00	; 0
   18f98:	80 e0       	ldi	r24, 0x00	; 0
   18f9a:	90 e0       	ldi	r25, 0x00	; 0
   18f9c:	0e 94 9f bb 	call	0x1773e	; 0x1773e <lif_calloc>
   18fa0:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   18fa2:	89 2b       	or	r24, r25
   18fa4:	09 f4       	brne	.+2      	; 0x18fa8 <lif_create_volume+0x54>
   18fa6:	b6 c2       	rjmp	.+1388   	; 0x19514 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   18fa8:	c2 5e       	subi	r28, 0xE2	; 226
   18faa:	de 4f       	sbci	r29, 0xFE	; 254
   18fac:	28 81       	ld	r18, Y
   18fae:	39 81       	ldd	r19, Y+1	; 0x01
   18fb0:	4a 81       	ldd	r20, Y+2	; 0x02
   18fb2:	5b 81       	ldd	r21, Y+3	; 0x03
   18fb4:	ce 51       	subi	r28, 0x1E	; 30
   18fb6:	d1 40       	sbci	r29, 0x01	; 1
   18fb8:	ed b7       	in	r30, 0x3d	; 61
   18fba:	fe b7       	in	r31, 0x3e	; 62
   18fbc:	20 8b       	std	Z+16, r18	; 0x10
   18fbe:	31 8b       	std	Z+17, r19	; 0x11
   18fc0:	42 8b       	std	Z+18, r20	; 0x12
   18fc2:	53 8b       	std	Z+19, r21	; 0x13
   18fc4:	ca 5d       	subi	r28, 0xDA	; 218
   18fc6:	de 4f       	sbci	r29, 0xFE	; 254
   18fc8:	28 81       	ld	r18, Y
   18fca:	39 81       	ldd	r19, Y+1	; 0x01
   18fcc:	4a 81       	ldd	r20, Y+2	; 0x02
   18fce:	5b 81       	ldd	r21, Y+3	; 0x03
   18fd0:	c6 52       	subi	r28, 0x26	; 38
   18fd2:	d1 40       	sbci	r29, 0x01	; 1
   18fd4:	24 87       	std	Z+12, r18	; 0x0c
   18fd6:	35 87       	std	Z+13, r19	; 0x0d
   18fd8:	46 87       	std	Z+14, r20	; 0x0e
   18fda:	57 87       	std	Z+15, r21	; 0x0f
   18fdc:	20 86       	std	Z+8, r2	; 0x08
   18fde:	31 86       	std	Z+9, r3	; 0x09
   18fe0:	42 86       	std	Z+10, r4	; 0x0a
   18fe2:	53 86       	std	Z+11, r5	; 0x0b
   18fe4:	77 82       	std	Z+7, r7	; 0x07
   18fe6:	66 82       	std	Z+6, r6	; 0x06
   18fe8:	95 82       	std	Z+5, r9	; 0x05
   18fea:	84 82       	std	Z+4, r8	; 0x04
   18fec:	8d e0       	ldi	r24, 0x0D	; 13
   18fee:	99 e3       	ldi	r25, 0x39	; 57
   18ff0:	a0 e0       	ldi	r26, 0x00	; 0
   18ff2:	81 83       	std	Z+1, r24	; 0x01
   18ff4:	92 83       	std	Z+2, r25	; 0x02
   18ff6:	a3 83       	std	Z+3, r26	; 0x03
   18ff8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   18ffc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19000:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19004:	92 ff       	sbrs	r25, 2
   19006:	04 c0       	rjmp	.+8      	; 0x19010 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19008:	6c e4       	ldi	r22, 0x4C	; 76
   1900a:	76 e1       	ldi	r23, 0x16	; 22
   1900c:	c7 01       	movw	r24, r14

    lif_image_clear(LIF);
   1900e:	e7 d8       	rcall	.-3634   	; 0x181de <lif_dump_vol>
   19010:	c7 01       	movw	r24, r14

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19012:	d0 d8       	rcall	.-3680   	; 0x181b4 <lif_image_clear>
   19014:	80 e0       	ldi	r24, 0x00	; 0
   19016:	90 e8       	ldi	r25, 0x80	; 128
   19018:	f7 01       	movw	r30, r14
   1901a:	95 a3       	std	Z+37, r25	; 0x25
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1901c:	84 a3       	std	Z+36, r24	; 0x24
   1901e:	46 e0       	ldi	r20, 0x06	; 6
   19020:	50 e0       	ldi	r21, 0x00	; 0
   19022:	b3 01       	movw	r22, r6
   19024:	c7 01       	movw	r24, r14
   19026:	86 96       	adiw	r24, 0x26	; 38
   19028:	0e 94 de bd 	call	0x17bbc	; 0x17bbc <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1902c:	f7 01       	movw	r30, r14
   1902e:	25 a6       	std	Z+45, r2	; 0x2d
   19030:	36 a6       	std	Z+46, r3	; 0x2e
   19032:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19034:	50 aa       	std	Z+48, r5	; 0x30
   19036:	ca 5d       	subi	r28, 0xDA	; 218
   19038:	de 4f       	sbci	r29, 0xFE	; 254
   1903a:	28 81       	ld	r18, Y
   1903c:	39 81       	ldd	r19, Y+1	; 0x01
   1903e:	4a 81       	ldd	r20, Y+2	; 0x02
   19040:	5b 81       	ldd	r21, Y+3	; 0x03
   19042:	c6 52       	subi	r28, 0x26	; 38
   19044:	d1 40       	sbci	r29, 0x01	; 1
   19046:	25 ab       	std	Z+53, r18	; 0x35
   19048:	36 ab       	std	Z+54, r19	; 0x36
   1904a:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1904c:	50 af       	std	Z+56, r21	; 0x38
   1904e:	80 e0       	ldi	r24, 0x00	; 0
   19050:	90 e1       	ldi	r25, 0x10	; 16
   19052:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19054:	81 ab       	std	Z+49, r24	; 0x31
   19056:	fd 96       	adiw	r30, 0x3d	; 61
   19058:	10 82       	st	Z, r1
   1905a:	11 82       	std	Z+1, r1	; 0x01
   1905c:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   1905e:	13 82       	std	Z+3, r1	; 0x03
   19060:	34 96       	adiw	r30, 0x04	; 4
   19062:	10 82       	st	Z, r1
   19064:	11 82       	std	Z+1, r1	; 0x01
   19066:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   19068:	13 82       	std	Z+3, r1	; 0x03
   1906a:	34 96       	adiw	r30, 0x04	; 4
   1906c:	10 82       	st	Z, r1
   1906e:	11 82       	std	Z+1, r1	; 0x01
   19070:	12 82       	std	Z+2, r1	; 0x02
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19072:	13 82       	std	Z+3, r1	; 0x03
   19074:	a7 01       	movw	r20, r14
   19076:	47 5b       	subi	r20, 0xB7	; 183
   19078:	5f 4f       	sbci	r21, 0xFF	; 255
   1907a:	c6 01       	movw	r24, r12
   1907c:	b5 01       	movw	r22, r10
   1907e:	0e 94 03 c0 	call	0x18006	; 0x18006 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19082:	c4 01       	movw	r24, r8
   19084:	0e 94 ea bb 	call	0x177d4	; 0x177d4 <lif_stralloc>
   19088:	d7 01       	movw	r26, r14
   1908a:	8d 93       	st	X+, r24
    if(LIF->name == NULL)
   1908c:	9c 93       	st	X, r25
   1908e:	89 2b       	or	r24, r25
   19090:	09 f4       	brne	.+2      	; 0x19094 <lif_create_volume+0x140>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19092:	35 c2       	rjmp	.+1130   	; 0x194fe <lif_create_volume+0x5aa>
   19094:	c2 5e       	subi	r28, 0xE2	; 226
   19096:	de 4f       	sbci	r29, 0xFE	; 254
   19098:	28 81       	ld	r18, Y
   1909a:	39 81       	ldd	r19, Y+1	; 0x01
   1909c:	4a 81       	ldd	r20, Y+2	; 0x02
   1909e:	5b 81       	ldd	r21, Y+3	; 0x03
   190a0:	ce 51       	subi	r28, 0x1E	; 30
   190a2:	d1 40       	sbci	r29, 0x01	; 1
   190a4:	f7 01       	movw	r30, r14
   190a6:	20 8b       	std	Z+16, r18	; 0x10
   190a8:	31 8b       	std	Z+17, r19	; 0x11
   190aa:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   190ac:	53 8b       	std	Z+19, r21	; 0x13
   190ae:	ca 5d       	subi	r28, 0xDA	; 218
   190b0:	de 4f       	sbci	r29, 0xFE	; 254
   190b2:	88 81       	ld	r24, Y
   190b4:	99 81       	ldd	r25, Y+1	; 0x01
   190b6:	aa 81       	ldd	r26, Y+2	; 0x02
   190b8:	bb 81       	ldd	r27, Y+3	; 0x03
   190ba:	c6 52       	subi	r28, 0x26	; 38
   190bc:	d1 40       	sbci	r29, 0x01	; 1
   190be:	82 0d       	add	r24, r2
   190c0:	93 1d       	adc	r25, r3
   190c2:	a4 1d       	adc	r26, r4
   190c4:	b5 1d       	adc	r27, r5
   190c6:	84 87       	std	Z+12, r24	; 0x0c
   190c8:	95 87       	std	Z+13, r25	; 0x0d
   190ca:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   190cc:	b7 87       	std	Z+15, r27	; 0x0f
   190ce:	82 0f       	add	r24, r18
   190d0:	93 1f       	adc	r25, r19
   190d2:	a4 1f       	adc	r26, r20
   190d4:	b5 1f       	adc	r27, r21
   190d6:	84 83       	std	Z+4, r24	; 0x04
   190d8:	95 83       	std	Z+5, r25	; 0x05
   190da:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   190dc:	b7 83       	std	Z+7, r27	; 0x07
   190de:	ba 2f       	mov	r27, r26
   190e0:	a9 2f       	mov	r26, r25
   190e2:	98 2f       	mov	r25, r24
   190e4:	88 27       	eor	r24, r24
   190e6:	80 87       	std	Z+8, r24	; 0x08
   190e8:	91 87       	std	Z+9, r25	; 0x09
   190ea:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   190ec:	b3 87       	std	Z+11, r27	; 0x0b
   190ee:	20 8f       	std	Z+24, r18	; 0x18
   190f0:	31 8f       	std	Z+25, r19	; 0x19
   190f2:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   190f4:	53 8f       	std	Z+27, r21	; 0x1b
   190f6:	14 8a       	std	Z+20, r1	; 0x14
   190f8:	15 8a       	std	Z+21, r1	; 0x15
   190fa:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   190fc:	17 8a       	std	Z+23, r1	; 0x17
   190fe:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19100:	14 8e       	std	Z+28, r1	; 0x1c
   19102:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19104:	16 8e       	std	Z+30, r1	; 0x1e
   19106:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19108:	10 a2       	std	Z+32, r1	; 0x20
   1910a:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1910c:	12 a2       	std	Z+34, r1	; 0x22
   1910e:	61 2c       	mov	r6, r1
   19110:	77 24       	eor	r7, r7
   19112:	73 94       	inc	r7
   19114:	9e 01       	movw	r18, r28
   19116:	2c 5e       	subi	r18, 0xEC	; 236
   19118:	3f 4f       	sbci	r19, 0xFF	; 255
   1911a:	49 01       	movw	r8, r18
   1911c:	d9 01       	movw	r26, r18
   1911e:	f3 01       	movw	r30, r6
   19120:	1d 92       	st	X+, r1
   19122:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19124:	e9 f7       	brne	.-6      	; 0x19120 <lif_create_volume+0x1cc>
   19126:	b9 01       	movw	r22, r18
   19128:	c7 01       	movw	r24, r14
   1912a:	0e 94 1b be 	call	0x17c36	; 0x17c36 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1912e:	61 e1       	ldi	r22, 0x11	; 17
   19130:	79 e0       	ldi	r23, 0x09	; 9
   19132:	d7 01       	movw	r26, r14
   19134:	8d 91       	ld	r24, X+
   19136:	9c 91       	ld	r25, X
   19138:	0e 94 09 bc 	call	0x17812	; 0x17812 <lif_open>
   1913c:	f7 01       	movw	r30, r14
   1913e:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19140:	82 83       	std	Z+2, r24	; 0x02
   19142:	89 2b       	or	r24, r25
   19144:	09 f4       	brne	.+2      	; 0x19148 <lif_create_volume+0x1f4>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19146:	db c1       	rjmp	.+950    	; 0x194fe <lif_create_volume+0x5aa>
   19148:	00 e0       	ldi	r16, 0x00	; 0
   1914a:	11 e0       	ldi	r17, 0x01	; 1
   1914c:	20 e0       	ldi	r18, 0x00	; 0
   1914e:	30 e0       	ldi	r19, 0x00	; 0
   19150:	a9 01       	movw	r20, r18
   19152:	b4 01       	movw	r22, r8
   19154:	c7 01       	movw	r24, r14
   19156:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
   1915a:	9c 01       	movw	r18, r24
   1915c:	99 0f       	add	r25, r25
   1915e:	44 0b       	sbc	r20, r20
   19160:	55 0b       	sbc	r21, r21
   19162:	ca 5e       	subi	r28, 0xEA	; 234
   19164:	de 4f       	sbci	r29, 0xFE	; 254
   19166:	28 83       	st	Y, r18
   19168:	39 83       	std	Y+1, r19	; 0x01
   1916a:	4a 83       	std	Y+2, r20	; 0x02
   1916c:	5b 83       	std	Y+3, r21	; 0x03
   1916e:	c6 51       	subi	r28, 0x16	; 22

    if(size < LIF_SECTOR_SIZE)
   19170:	d1 40       	sbci	r29, 0x01	; 1
   19172:	2f 3f       	cpi	r18, 0xFF	; 255
   19174:	31 05       	cpc	r19, r1
   19176:	41 05       	cpc	r20, r1
   19178:	51 05       	cpc	r21, r1
   1917a:	09 f0       	breq	.+2      	; 0x1917e <lif_create_volume+0x22a>
   1917c:	0c f4       	brge	.+2      	; 0x19180 <lif_create_volume+0x22c>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   1917e:	bf c1       	rjmp	.+894    	; 0x194fe <lif_create_volume+0x5aa>
   19180:	d4 01       	movw	r26, r8
   19182:	f3 01       	movw	r30, r6
   19184:	1d 92       	st	X+, r1
   19186:	31 97       	sbiw	r30, 0x01	; 1

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19188:	e9 f7       	brne	.-6      	; 0x19184 <lif_create_volume+0x230>
   1918a:	21 e0       	ldi	r18, 0x01	; 1
   1918c:	30 e0       	ldi	r19, 0x00	; 0
   1918e:	40 e0       	ldi	r20, 0x00	; 0
   19190:	50 e0       	ldi	r21, 0x00	; 0
   19192:	c6 5e       	subi	r28, 0xE6	; 230
   19194:	de 4f       	sbci	r29, 0xFE	; 254
   19196:	28 83       	st	Y, r18
   19198:	39 83       	std	Y+1, r19	; 0x01
   1919a:	4a 83       	std	Y+2, r20	; 0x02
   1919c:	5b 83       	std	Y+3, r21	; 0x03
   1919e:	ca 51       	subi	r28, 0x1A	; 26
   191a0:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   191a2:	64 01       	movw	r12, r8
   191a4:	80 e0       	ldi	r24, 0x00	; 0
   191a6:	99 e3       	ldi	r25, 0x39	; 57
   191a8:	3c 01       	movw	r6, r24
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   191aa:	81 2c       	mov	r8, r1
   191ac:	c6 5e       	subi	r28, 0xE6	; 230
   191ae:	de 4f       	sbci	r29, 0xFE	; 254
   191b0:	88 81       	ld	r24, Y
   191b2:	99 81       	ldd	r25, Y+1	; 0x01
   191b4:	aa 81       	ldd	r26, Y+2	; 0x02
   191b6:	bb 81       	ldd	r27, Y+3	; 0x03
   191b8:	ca 51       	subi	r28, 0x1A	; 26
   191ba:	d1 40       	sbci	r29, 0x01	; 1
   191bc:	82 15       	cp	r24, r2
   191be:	93 05       	cpc	r25, r3
   191c0:	a4 05       	cpc	r26, r4
   191c2:	b5 05       	cpc	r27, r5
   191c4:	0c f0       	brlt	.+2      	; 0x191c8 <lif_create_volume+0x274>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   191c6:	55 c0       	rjmp	.+170    	; 0x19272 <lif_create_volume+0x31e>
   191c8:	00 e0       	ldi	r16, 0x00	; 0
   191ca:	11 e0       	ldi	r17, 0x01	; 1
   191cc:	ca 5e       	subi	r28, 0xEA	; 234
   191ce:	de 4f       	sbci	r29, 0xFE	; 254
   191d0:	28 81       	ld	r18, Y
   191d2:	39 81       	ldd	r19, Y+1	; 0x01
   191d4:	4a 81       	ldd	r20, Y+2	; 0x02
   191d6:	5b 81       	ldd	r21, Y+3	; 0x03
   191d8:	c6 51       	subi	r28, 0x16	; 22
   191da:	d1 40       	sbci	r29, 0x01	; 1
   191dc:	b6 01       	movw	r22, r12
   191de:	c7 01       	movw	r24, r14
   191e0:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
   191e4:	09 2e       	mov	r0, r25
   191e6:	00 0c       	add	r0, r0
   191e8:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   191ea:	bb 0b       	sbc	r27, r27
   191ec:	8f 3f       	cpi	r24, 0xFF	; 255
   191ee:	91 05       	cpc	r25, r1
   191f0:	a1 05       	cpc	r26, r1
   191f2:	b1 05       	cpc	r27, r1
   191f4:	09 f0       	breq	.+2      	; 0x191f8 <lif_create_volume+0x2a4>
   191f6:	0c f4       	brge	.+2      	; 0x191fa <lif_create_volume+0x2a6>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   191f8:	82 c1       	rjmp	.+772    	; 0x194fe <lif_create_volume+0x5aa>
   191fa:	ca 5e       	subi	r28, 0xEA	; 234
   191fc:	de 4f       	sbci	r29, 0xFE	; 254
   191fe:	28 81       	ld	r18, Y
   19200:	39 81       	ldd	r19, Y+1	; 0x01
   19202:	4a 81       	ldd	r20, Y+2	; 0x02
   19204:	5b 81       	ldd	r21, Y+3	; 0x03
   19206:	c6 51       	subi	r28, 0x16	; 22
   19208:	d1 40       	sbci	r29, 0x01	; 1
   1920a:	28 0f       	add	r18, r24
   1920c:	39 1f       	adc	r19, r25
   1920e:	4a 1f       	adc	r20, r26
   19210:	5b 1f       	adc	r21, r27
   19212:	ca 5e       	subi	r28, 0xEA	; 234
   19214:	de 4f       	sbci	r29, 0xFE	; 254
   19216:	28 83       	st	Y, r18
   19218:	39 83       	std	Y+1, r19	; 0x01
   1921a:	4a 83       	std	Y+2, r20	; 0x02
   1921c:	5b 83       	std	Y+3, r21	; 0x03
   1921e:	c6 51       	subi	r28, 0x16	; 22
        printf("\tWrote: %ld\r", count);
   19220:	d1 40       	sbci	r29, 0x01	; 1
   19222:	c6 5e       	subi	r28, 0xE6	; 230
   19224:	de 4f       	sbci	r29, 0xFE	; 254
   19226:	88 81       	ld	r24, Y
   19228:	99 81       	ldd	r25, Y+1	; 0x01
   1922a:	aa 81       	ldd	r26, Y+2	; 0x02
   1922c:	bb 81       	ldd	r27, Y+3	; 0x03
   1922e:	ca 51       	subi	r28, 0x1A	; 26
   19230:	d1 40       	sbci	r29, 0x01	; 1
   19232:	ed b7       	in	r30, 0x3d	; 61
   19234:	fe b7       	in	r31, 0x3e	; 62
   19236:	84 83       	std	Z+4, r24	; 0x04
   19238:	95 83       	std	Z+5, r25	; 0x05
   1923a:	a6 83       	std	Z+6, r26	; 0x06
   1923c:	b7 83       	std	Z+7, r27	; 0x07
   1923e:	61 82       	std	Z+1, r6	; 0x01
   19240:	72 82       	std	Z+2, r7	; 0x02
   19242:	83 82       	std	Z+3, r8	; 0x03
   19244:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19248:	c6 5e       	subi	r28, 0xE6	; 230
   1924a:	de 4f       	sbci	r29, 0xFE	; 254
   1924c:	28 81       	ld	r18, Y
   1924e:	39 81       	ldd	r19, Y+1	; 0x01
   19250:	4a 81       	ldd	r20, Y+2	; 0x02
   19252:	5b 81       	ldd	r21, Y+3	; 0x03
   19254:	ca 51       	subi	r28, 0x1A	; 26
   19256:	d1 40       	sbci	r29, 0x01	; 1
   19258:	2f 5f       	subi	r18, 0xFF	; 255
   1925a:	3f 4f       	sbci	r19, 0xFF	; 255
   1925c:	4f 4f       	sbci	r20, 0xFF	; 255
   1925e:	5f 4f       	sbci	r21, 0xFF	; 255
   19260:	c6 5e       	subi	r28, 0xE6	; 230
   19262:	de 4f       	sbci	r29, 0xFE	; 254
   19264:	28 83       	st	Y, r18
   19266:	39 83       	std	Y+1, r19	; 0x01
   19268:	4a 83       	std	Y+2, r20	; 0x02
   1926a:	5b 83       	std	Y+3, r21	; 0x03
   1926c:	ca 51       	subi	r28, 0x1A	; 26
   1926e:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19270:	9d cf       	rjmp	.-198    	; 0x191ac <lif_create_volume+0x258>
   19272:	c7 01       	movw	r24, r14
   19274:	0e 94 e0 c0 	call	0x181c0	; 0x181c0 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19278:	8f ef       	ldi	r24, 0xFF	; 255
   1927a:	9f ef       	ldi	r25, 0xFF	; 255
   1927c:	f7 01       	movw	r30, r14
   1927e:	e6 5a       	subi	r30, 0xA6	; 166
   19280:	ff 4f       	sbci	r31, 0xFF	; 255
   19282:	91 83       	std	Z+1, r25	; 0x01
   19284:	80 83       	st	Z, r24
   19286:	46 01       	movw	r8, r12
   19288:	6e 01       	movw	r12, r28
   1928a:	9c ee       	ldi	r25, 0xEC	; 236
   1928c:	c9 1a       	sub	r12, r25
   1928e:	9e ef       	ldi	r25, 0xFE	; 254

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19290:	d9 0a       	sbc	r13, r25
   19292:	b4 01       	movw	r22, r8
   19294:	c7 01       	movw	r24, r14
   19296:	0e 94 27 bf 	call	0x17e4e	; 0x17e4e <lif_dir2str>
   1929a:	a0 e2       	ldi	r26, 0x20	; 32
   1929c:	8a 0e       	add	r8, r26

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1929e:	91 1c       	adc	r9, r1
   192a0:	c8 14       	cp	r12, r8
   192a2:	d9 04       	cpc	r13, r9
   192a4:	b1 f7       	brne	.-20     	; 0x19292 <lif_create_volume+0x33e>
   192a6:	a1 2c       	mov	r10, r1
   192a8:	b1 2c       	mov	r11, r1
   192aa:	65 01       	movw	r12, r10
   192ac:	fe 01       	movw	r30, r28
   192ae:	74 96       	adiw	r30, 0x14	; 20
   192b0:	cc 5e       	subi	r28, 0xEC	; 236
   192b2:	de 4f       	sbci	r29, 0xFE	; 254
   192b4:	f9 83       	std	Y+1, r31	; 0x01
   192b6:	e8 83       	st	Y, r30
   192b8:	c4 51       	subi	r28, 0x14	; 20
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   192ba:	d1 40       	sbci	r29, 0x01	; 1
   192bc:	84 e6       	ldi	r24, 0x64	; 100
   192be:	28 2e       	mov	r2, r24
   192c0:	31 2c       	mov	r3, r1
   192c2:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   192c4:	51 2c       	mov	r5, r1
   192c6:	83 ef       	ldi	r24, 0xF3	; 243
   192c8:	98 e3       	ldi	r25, 0x38	; 56
   192ca:	3c 01       	movw	r6, r24
   192cc:	81 2c       	mov	r8, r1
   192ce:	c6 5e       	subi	r28, 0xE6	; 230
   192d0:	de 4f       	sbci	r29, 0xFE	; 254
   192d2:	28 81       	ld	r18, Y
   192d4:	39 81       	ldd	r19, Y+1	; 0x01
   192d6:	4a 81       	ldd	r20, Y+2	; 0x02
   192d8:	5b 81       	ldd	r21, Y+3	; 0x03
   192da:	ca 51       	subi	r28, 0x1A	; 26
   192dc:	d1 40       	sbci	r29, 0x01	; 1
   192de:	2a 0d       	add	r18, r10
   192e0:	3b 1d       	adc	r19, r11
   192e2:	4c 1d       	adc	r20, r12
   192e4:	5d 1d       	adc	r21, r13
   192e6:	ce 5d       	subi	r28, 0xDE	; 222
   192e8:	de 4f       	sbci	r29, 0xFE	; 254
   192ea:	28 83       	st	Y, r18
   192ec:	39 83       	std	Y+1, r19	; 0x01
   192ee:	4a 83       	std	Y+2, r20	; 0x02
   192f0:	5b 83       	std	Y+3, r21	; 0x03
   192f2:	c2 52       	subi	r28, 0x22	; 34
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   192f4:	d1 40       	sbci	r29, 0x01	; 1
   192f6:	ca 5d       	subi	r28, 0xDA	; 218
   192f8:	de 4f       	sbci	r29, 0xFE	; 254
   192fa:	88 81       	ld	r24, Y
   192fc:	99 81       	ldd	r25, Y+1	; 0x01
   192fe:	aa 81       	ldd	r26, Y+2	; 0x02
   19300:	bb 81       	ldd	r27, Y+3	; 0x03
   19302:	c6 52       	subi	r28, 0x26	; 38
   19304:	d1 40       	sbci	r29, 0x01	; 1
   19306:	a8 16       	cp	r10, r24
   19308:	b9 06       	cpc	r11, r25
   1930a:	ca 06       	cpc	r12, r26
   1930c:	db 06       	cpc	r13, r27
   1930e:	0c f0       	brlt	.+2      	; 0x19312 <lif_create_volume+0x3be>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19310:	58 c0       	rjmp	.+176    	; 0x193c2 <lif_create_volume+0x46e>
   19312:	00 e0       	ldi	r16, 0x00	; 0
   19314:	11 e0       	ldi	r17, 0x01	; 1
   19316:	ca 5e       	subi	r28, 0xEA	; 234
   19318:	de 4f       	sbci	r29, 0xFE	; 254
   1931a:	28 81       	ld	r18, Y
   1931c:	39 81       	ldd	r19, Y+1	; 0x01
   1931e:	4a 81       	ldd	r20, Y+2	; 0x02
   19320:	5b 81       	ldd	r21, Y+3	; 0x03
   19322:	c6 51       	subi	r28, 0x16	; 22
   19324:	d1 40       	sbci	r29, 0x01	; 1
   19326:	be 01       	movw	r22, r28
   19328:	6c 5e       	subi	r22, 0xEC	; 236
   1932a:	7f 4f       	sbci	r23, 0xFF	; 255
   1932c:	c7 01       	movw	r24, r14
   1932e:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
   19332:	09 2e       	mov	r0, r25
   19334:	00 0c       	add	r0, r0
   19336:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19338:	bb 0b       	sbc	r27, r27
   1933a:	8f 3f       	cpi	r24, 0xFF	; 255
   1933c:	91 05       	cpc	r25, r1
   1933e:	a1 05       	cpc	r26, r1
   19340:	b1 05       	cpc	r27, r1
   19342:	09 f0       	breq	.+2      	; 0x19346 <lif_create_volume+0x3f2>
   19344:	0c f4       	brge	.+2      	; 0x19348 <lif_create_volume+0x3f4>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19346:	db c0       	rjmp	.+438    	; 0x194fe <lif_create_volume+0x5aa>
   19348:	ca 5e       	subi	r28, 0xEA	; 234
   1934a:	de 4f       	sbci	r29, 0xFE	; 254
   1934c:	28 81       	ld	r18, Y
   1934e:	39 81       	ldd	r19, Y+1	; 0x01
   19350:	4a 81       	ldd	r20, Y+2	; 0x02
   19352:	5b 81       	ldd	r21, Y+3	; 0x03
   19354:	c6 51       	subi	r28, 0x16	; 22
   19356:	d1 40       	sbci	r29, 0x01	; 1
   19358:	28 0f       	add	r18, r24
   1935a:	39 1f       	adc	r19, r25
   1935c:	4a 1f       	adc	r20, r26
   1935e:	5b 1f       	adc	r21, r27
   19360:	ca 5e       	subi	r28, 0xEA	; 234
   19362:	de 4f       	sbci	r29, 0xFE	; 254
   19364:	28 83       	st	Y, r18
   19366:	39 83       	std	Y+1, r19	; 0x01
   19368:	4a 83       	std	Y+2, r20	; 0x02
   1936a:	5b 83       	std	Y+3, r21	; 0x03
   1936c:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   1936e:	d1 40       	sbci	r29, 0x01	; 1
   19370:	ce 5d       	subi	r28, 0xDE	; 222
   19372:	de 4f       	sbci	r29, 0xFE	; 254
   19374:	68 81       	ld	r22, Y
   19376:	79 81       	ldd	r23, Y+1	; 0x01
   19378:	8a 81       	ldd	r24, Y+2	; 0x02
   1937a:	9b 81       	ldd	r25, Y+3	; 0x03
   1937c:	c2 52       	subi	r28, 0x22	; 34
   1937e:	d1 40       	sbci	r29, 0x01	; 1
   19380:	a2 01       	movw	r20, r4
   19382:	91 01       	movw	r18, r2
   19384:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
   19388:	67 2b       	or	r22, r23
   1938a:	68 2b       	or	r22, r24
   1938c:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1938e:	99 f4       	brne	.+38     	; 0x193b6 <lif_create_volume+0x462>
   19390:	ce 5d       	subi	r28, 0xDE	; 222
   19392:	de 4f       	sbci	r29, 0xFE	; 254
   19394:	88 81       	ld	r24, Y
   19396:	99 81       	ldd	r25, Y+1	; 0x01
   19398:	aa 81       	ldd	r26, Y+2	; 0x02
   1939a:	bb 81       	ldd	r27, Y+3	; 0x03
   1939c:	c2 52       	subi	r28, 0x22	; 34
   1939e:	d1 40       	sbci	r29, 0x01	; 1
   193a0:	ed b7       	in	r30, 0x3d	; 61
   193a2:	fe b7       	in	r31, 0x3e	; 62
   193a4:	84 83       	std	Z+4, r24	; 0x04
   193a6:	95 83       	std	Z+5, r25	; 0x05
   193a8:	a6 83       	std	Z+6, r26	; 0x06
   193aa:	b7 83       	std	Z+7, r27	; 0x07
   193ac:	61 82       	std	Z+1, r6	; 0x01
   193ae:	72 82       	std	Z+2, r7	; 0x02
   193b0:	83 82       	std	Z+3, r8	; 0x03
   193b2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   193b6:	ff ef       	ldi	r31, 0xFF	; 255
   193b8:	af 1a       	sub	r10, r31
   193ba:	bf 0a       	sbc	r11, r31
   193bc:	cf 0a       	sbc	r12, r31
   193be:	df 0a       	sbc	r13, r31
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   193c0:	86 cf       	rjmp	.-244    	; 0x192ce <lif_create_volume+0x37a>
   193c2:	80 e0       	ldi	r24, 0x00	; 0
   193c4:	91 e0       	ldi	r25, 0x01	; 1
   193c6:	cc 5e       	subi	r28, 0xEC	; 236
   193c8:	de 4f       	sbci	r29, 0xFE	; 254
   193ca:	a8 81       	ld	r26, Y
   193cc:	b9 81       	ldd	r27, Y+1	; 0x01
   193ce:	c4 51       	subi	r28, 0x14	; 20
   193d0:	d1 40       	sbci	r29, 0x01	; 1
   193d2:	fc 01       	movw	r30, r24
   193d4:	1d 92       	st	X+, r1
   193d6:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   193d8:	e9 f7       	brne	.-6      	; 0x193d4 <lif_create_volume+0x480>
   193da:	81 2c       	mov	r8, r1
   193dc:	91 2c       	mov	r9, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   193de:	54 01       	movw	r10, r8
   193e0:	86 ee       	ldi	r24, 0xE6	; 230
   193e2:	98 e3       	ldi	r25, 0x38	; 56
   193e4:	9c 01       	movw	r18, r24
   193e6:	40 e0       	ldi	r20, 0x00	; 0
   193e8:	c6 5e       	subi	r28, 0xE6	; 230
   193ea:	de 4f       	sbci	r29, 0xFE	; 254
   193ec:	28 83       	st	Y, r18
   193ee:	39 83       	std	Y+1, r19	; 0x01
   193f0:	4a 83       	std	Y+2, r20	; 0x02
   193f2:	ca 51       	subi	r28, 0x1A	; 26
   193f4:	d1 40       	sbci	r29, 0x01	; 1
   193f6:	ce 5d       	subi	r28, 0xDE	; 222
   193f8:	de 4f       	sbci	r29, 0xFE	; 254
   193fa:	48 80       	ld	r4, Y
   193fc:	59 80       	ldd	r5, Y+1	; 0x01
   193fe:	6a 80       	ldd	r6, Y+2	; 0x02
   19400:	7b 80       	ldd	r7, Y+3	; 0x03
   19402:	c2 52       	subi	r28, 0x22	; 34
   19404:	d1 40       	sbci	r29, 0x01	; 1
   19406:	48 0c       	add	r4, r8
   19408:	59 1c       	adc	r5, r9
   1940a:	6a 1c       	adc	r6, r10
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1940c:	7b 1c       	adc	r7, r11
   1940e:	c2 5e       	subi	r28, 0xE2	; 226
   19410:	de 4f       	sbci	r29, 0xFE	; 254
   19412:	28 81       	ld	r18, Y
   19414:	39 81       	ldd	r19, Y+1	; 0x01
   19416:	4a 81       	ldd	r20, Y+2	; 0x02
   19418:	5b 81       	ldd	r21, Y+3	; 0x03
   1941a:	ce 51       	subi	r28, 0x1E	; 30
   1941c:	d1 40       	sbci	r29, 0x01	; 1
   1941e:	82 16       	cp	r8, r18
   19420:	93 06       	cpc	r9, r19
   19422:	a4 06       	cpc	r10, r20
   19424:	b5 06       	cpc	r11, r21
   19426:	0c f0       	brlt	.+2      	; 0x1942a <lif_create_volume+0x4d6>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19428:	53 c0       	rjmp	.+166    	; 0x194d0 <lif_create_volume+0x57c>
   1942a:	00 e0       	ldi	r16, 0x00	; 0
   1942c:	11 e0       	ldi	r17, 0x01	; 1
   1942e:	ca 5e       	subi	r28, 0xEA	; 234
   19430:	de 4f       	sbci	r29, 0xFE	; 254
   19432:	28 81       	ld	r18, Y
   19434:	39 81       	ldd	r19, Y+1	; 0x01
   19436:	4a 81       	ldd	r20, Y+2	; 0x02
   19438:	5b 81       	ldd	r21, Y+3	; 0x03
   1943a:	c6 51       	subi	r28, 0x16	; 22
   1943c:	d1 40       	sbci	r29, 0x01	; 1
   1943e:	be 01       	movw	r22, r28
   19440:	6c 5e       	subi	r22, 0xEC	; 236
   19442:	7f 4f       	sbci	r23, 0xFF	; 255
   19444:	c7 01       	movw	r24, r14
   19446:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
   1944a:	09 2e       	mov	r0, r25
   1944c:	00 0c       	add	r0, r0
   1944e:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19450:	bb 0b       	sbc	r27, r27
   19452:	8f 3f       	cpi	r24, 0xFF	; 255
   19454:	91 05       	cpc	r25, r1
   19456:	a1 05       	cpc	r26, r1
   19458:	b1 05       	cpc	r27, r1
   1945a:	09 f0       	breq	.+2      	; 0x1945e <lif_create_volume+0x50a>
   1945c:	0c f4       	brge	.+2      	; 0x19460 <lif_create_volume+0x50c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1945e:	4f c0       	rjmp	.+158    	; 0x194fe <lif_create_volume+0x5aa>
   19460:	ca 5e       	subi	r28, 0xEA	; 234
   19462:	de 4f       	sbci	r29, 0xFE	; 254
   19464:	28 81       	ld	r18, Y
   19466:	39 81       	ldd	r19, Y+1	; 0x01
   19468:	4a 81       	ldd	r20, Y+2	; 0x02
   1946a:	5b 81       	ldd	r21, Y+3	; 0x03
   1946c:	c6 51       	subi	r28, 0x16	; 22
   1946e:	d1 40       	sbci	r29, 0x01	; 1
   19470:	28 0f       	add	r18, r24
   19472:	39 1f       	adc	r19, r25
   19474:	4a 1f       	adc	r20, r26
   19476:	5b 1f       	adc	r21, r27
   19478:	ca 5e       	subi	r28, 0xEA	; 234
   1947a:	de 4f       	sbci	r29, 0xFE	; 254
   1947c:	28 83       	st	Y, r18
   1947e:	39 83       	std	Y+1, r19	; 0x01
   19480:	4a 83       	std	Y+2, r20	; 0x02
   19482:	5b 83       	std	Y+3, r21	; 0x03
   19484:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19486:	d1 40       	sbci	r29, 0x01	; 1
   19488:	c3 01       	movw	r24, r6
   1948a:	b2 01       	movw	r22, r4
   1948c:	24 e6       	ldi	r18, 0x64	; 100
   1948e:	30 e0       	ldi	r19, 0x00	; 0
   19490:	40 e0       	ldi	r20, 0x00	; 0
   19492:	50 e0       	ldi	r21, 0x00	; 0
   19494:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
   19498:	67 2b       	or	r22, r23
   1949a:	68 2b       	or	r22, r24
   1949c:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1949e:	91 f4       	brne	.+36     	; 0x194c4 <lif_create_volume+0x570>
   194a0:	ed b7       	in	r30, 0x3d	; 61
   194a2:	fe b7       	in	r31, 0x3e	; 62
   194a4:	44 82       	std	Z+4, r4	; 0x04
   194a6:	55 82       	std	Z+5, r5	; 0x05
   194a8:	66 82       	std	Z+6, r6	; 0x06
   194aa:	77 82       	std	Z+7, r7	; 0x07
   194ac:	c6 5e       	subi	r28, 0xE6	; 230
   194ae:	de 4f       	sbci	r29, 0xFE	; 254
   194b0:	28 81       	ld	r18, Y
   194b2:	39 81       	ldd	r19, Y+1	; 0x01
   194b4:	4a 81       	ldd	r20, Y+2	; 0x02
   194b6:	ca 51       	subi	r28, 0x1A	; 26
   194b8:	d1 40       	sbci	r29, 0x01	; 1
   194ba:	21 83       	std	Z+1, r18	; 0x01
   194bc:	32 83       	std	Z+2, r19	; 0x02
   194be:	43 83       	std	Z+3, r20	; 0x03
   194c0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   194c4:	ff ef       	ldi	r31, 0xFF	; 255
   194c6:	8f 1a       	sub	r8, r31
   194c8:	9f 0a       	sbc	r9, r31
   194ca:	af 0a       	sbc	r10, r31
   194cc:	bf 0a       	sbc	r11, r31
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   194ce:	93 cf       	rjmp	.-218    	; 0x193f6 <lif_create_volume+0x4a2>
   194d0:	ed b7       	in	r30, 0x3d	; 61
   194d2:	fe b7       	in	r31, 0x3e	; 62
   194d4:	44 82       	std	Z+4, r4	; 0x04
   194d6:	55 82       	std	Z+5, r5	; 0x05
   194d8:	66 82       	std	Z+6, r6	; 0x06
   194da:	77 82       	std	Z+7, r7	; 0x07
   194dc:	89 ed       	ldi	r24, 0xD9	; 217
   194de:	98 e3       	ldi	r25, 0x38	; 56
   194e0:	a0 e0       	ldi	r26, 0x00	; 0
   194e2:	81 83       	std	Z+1, r24	; 0x01
   194e4:	92 83       	std	Z+2, r25	; 0x02
   194e6:	a3 83       	std	Z+3, r26	; 0x03
   194e8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   194ec:	8f ef       	ldi	r24, 0xFF	; 255
   194ee:	9f ef       	ldi	r25, 0xFF	; 255
   194f0:	f7 01       	movw	r30, r14
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   194f2:	91 a3       	std	Z+33, r25	; 0x21
   194f4:	80 a3       	std	Z+32, r24	; 0x20
   194f6:	c7 01       	movw	r24, r14
   194f8:	38 d8       	rcall	.-3984   	; 0x1856a <lif_check_volume>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   194fa:	89 2b       	or	r24, r25
   194fc:	19 f4       	brne	.+6      	; 0x19504 <lif_create_volume+0x5b0>
   194fe:	c7 01       	movw	r24, r14
   19500:	b8 da       	rcall	.-2704   	; 0x18a72 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19502:	08 c0       	rjmp	.+16     	; 0x19514 <lif_create_volume+0x5c0>
   19504:	c7 01       	movw	r24, r14
   19506:	1e dc       	rcall	.-1988   	; 0x18d44 <lif_updatefree>
   19508:	6c 01       	movw	r12, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1950a:	89 2b       	or	r24, r25
   1950c:	31 f4       	brne	.+12     	; 0x1951a <lif_create_volume+0x5c6>
   1950e:	c7 01       	movw	r24, r14

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19510:	b0 da       	rcall	.-2720   	; 0x18a72 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19512:	04 c0       	rjmp	.+8      	; 0x1951c <lif_create_volume+0x5c8>
   19514:	c1 2c       	mov	r12, r1
   19516:	d1 2c       	mov	r13, r1
   19518:	01 c0       	rjmp	.+2      	; 0x1951c <lif_create_volume+0x5c8>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1951a:	67 01       	movw	r12, r14
   1951c:	c6 01       	movw	r24, r12
   1951e:	c7 5d       	subi	r28, 0xD7	; 215
   19520:	de 4f       	sbci	r29, 0xFE	; 254
   19522:	e2 e1       	ldi	r30, 0x12	; 18
   19524:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

00019528 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19528:	ad e1       	ldi	r26, 0x1D	; 29
   1952a:	b0 e0       	ldi	r27, 0x00	; 0
   1952c:	ea e9       	ldi	r30, 0x9A	; 154
   1952e:	fa ec       	ldi	r31, 0xCA	; 202
   19530:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
   19534:	9d 8f       	std	Y+29, r25	; 0x1d
   19536:	8c 8f       	std	Y+28, r24	; 0x1c
   19538:	4a 01       	movw	r8, r20
   1953a:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   1953c:	fc 01       	movw	r30, r24
   1953e:	c4 84       	ldd	r12, Z+12	; 0x0c
   19540:	d5 84       	ldd	r13, Z+13	; 0x0d
   19542:	e6 84       	ldd	r14, Z+14	; 0x0e

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19544:	f7 84       	ldd	r15, Z+15	; 0x0f
   19546:	fe db       	rcall	.-2052   	; 0x18d44 <lif_updatefree>
   19548:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1954a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1954c:	40 8d       	ldd	r20, Z+24	; 0x18
   1954e:	51 8d       	ldd	r21, Z+25	; 0x19
   19550:	62 8d       	ldd	r22, Z+26	; 0x1a
   19552:	73 8d       	ldd	r23, Z+27	; 0x1b
   19554:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19556:	99 f4       	brne	.+38     	; 0x1957e <lif_newdir+0x56>
   19558:	ed b7       	in	r30, 0x3d	; 61
   1955a:	fe b7       	in	r31, 0x3e	; 62
   1955c:	80 86       	std	Z+8, r8	; 0x08
   1955e:	91 86       	std	Z+9, r9	; 0x09
   19560:	a2 86       	std	Z+10, r10	; 0x0a
   19562:	b3 86       	std	Z+11, r11	; 0x0b
   19564:	44 83       	std	Z+4, r20	; 0x04
   19566:	55 83       	std	Z+5, r21	; 0x05
   19568:	66 83       	std	Z+6, r22	; 0x06
   1956a:	77 83       	std	Z+7, r23	; 0x07
   1956c:	8a ef       	ldi	r24, 0xFA	; 250
   1956e:	97 e3       	ldi	r25, 0x37	; 55
   19570:	a0 e0       	ldi	r26, 0x00	; 0
   19572:	81 83       	std	Z+1, r24	; 0x01
   19574:	92 83       	std	Z+2, r25	; 0x02
   19576:	a3 83       	std	Z+3, r26	; 0x03
   19578:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1957c:	2f c1       	rjmp	.+606    	; 0x197dc <lif_newdir+0x2b4>
   1957e:	48 15       	cp	r20, r8
   19580:	59 05       	cpc	r21, r9
   19582:	6a 05       	cpc	r22, r10
   19584:	7b 05       	cpc	r23, r11
   19586:	c4 f0       	brlt	.+48     	; 0x195b8 <lif_newdir+0x90>
   19588:	44 24       	eor	r4, r4
   1958a:	43 94       	inc	r4
   1958c:	51 2c       	mov	r5, r1
   1958e:	61 2c       	mov	r6, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19590:	71 2c       	mov	r7, r1
   19592:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19594:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19596:	86 5a       	subi	r24, 0xA6	; 166
   19598:	9f 4f       	sbci	r25, 0xFF	; 255
   1959a:	9d 8b       	std	Y+21, r25	; 0x15
   1959c:	8c 8b       	std	Y+20, r24	; 0x14
   1959e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   195a0:	fd 8d       	ldd	r31, Y+29	; 0x1d
   195a2:	e4 5a       	subi	r30, 0xA4	; 164
   195a4:	ff 4f       	sbci	r31, 0xFF	; 255
   195a6:	fb 8b       	std	Y+19, r31	; 0x13
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   195a8:	ea 8b       	std	Y+18, r30	; 0x12
   195aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
   195ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
   195ae:	80 5a       	subi	r24, 0xA0	; 160
   195b0:	9f 4f       	sbci	r25, 0xFF	; 255
   195b2:	9f 8b       	std	Y+23, r25	; 0x17
   195b4:	8e 8b       	std	Y+22, r24	; 0x16
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   195b6:	21 c0       	rjmp	.+66     	; 0x195fa <lif_newdir+0xd2>
   195b8:	ed b7       	in	r30, 0x3d	; 61
   195ba:	fe b7       	in	r31, 0x3e	; 62
   195bc:	44 83       	std	Z+4, r20	; 0x04
   195be:	55 83       	std	Z+5, r21	; 0x05
   195c0:	66 83       	std	Z+6, r22	; 0x06
   195c2:	77 83       	std	Z+7, r23	; 0x07
   195c4:	81 ed       	ldi	r24, 0xD1	; 209
   195c6:	97 e3       	ldi	r25, 0x37	; 55
   195c8:	a0 e0       	ldi	r26, 0x00	; 0
   195ca:	81 83       	std	Z+1, r24	; 0x01
   195cc:	92 83       	std	Z+2, r25	; 0x02
   195ce:	a3 83       	std	Z+3, r26	; 0x03
   195d0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   195d4:	03 c1       	rjmp	.+518    	; 0x197dc <lif_newdir+0x2b4>
   195d6:	ec 89       	ldd	r30, Y+20	; 0x14
   195d8:	fd 89       	ldd	r31, Y+21	; 0x15
   195da:	80 81       	ld	r24, Z
   195dc:	91 81       	ldd	r25, Z+1	; 0x01
   195de:	8f 3f       	cpi	r24, 0xFF	; 255
   195e0:	ff ef       	ldi	r31, 0xFF	; 255
   195e2:	9f 07       	cpc	r25, r31
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   195e4:	a1 f0       	breq	.+40     	; 0x1960e <lif_newdir+0xe6>
   195e6:	89 2b       	or	r24, r25
   195e8:	09 f0       	breq	.+2      	; 0x195ec <lif_newdir+0xc4>
        {
            if(freestate == 0)
   195ea:	ce c0       	rjmp	.+412    	; 0x19788 <lif_newdir+0x260>
   195ec:	61 14       	cp	r6, r1
   195ee:	71 04       	cpc	r7, r1
   195f0:	09 f4       	brne	.+2      	; 0x195f4 <lif_newdir+0xcc>
   195f2:	c1 c0       	rjmp	.+386    	; 0x19776 <lif_newdir+0x24e>
   195f4:	ff ef       	ldi	r31, 0xFF	; 255
   195f6:	4f 1a       	sub	r4, r31
   195f8:	5f 0a       	sbc	r5, r31
   195fa:	82 01       	movw	r16, r4
   195fc:	01 50       	subi	r16, 0x01	; 1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   195fe:	11 09       	sbc	r17, r1
   19600:	b8 01       	movw	r22, r16
   19602:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19604:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19606:	c3 da       	rcall	.-2682   	; 0x18b8e <lif_readdirindex>
   19608:	89 2b       	or	r24, r25
   1960a:	29 f7       	brne	.-54     	; 0x195d6 <lif_newdir+0xae>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1960c:	e7 c0       	rjmp	.+462    	; 0x197dc <lif_newdir+0x2b4>
   1960e:	22 e0       	ldi	r18, 0x02	; 2
   19610:	62 16       	cp	r6, r18
   19612:	71 04       	cpc	r7, r1
   19614:	09 f0       	breq	.+2      	; 0x19618 <lif_newdir+0xf0>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   19616:	46 c0       	rjmp	.+140    	; 0x196a4 <lif_newdir+0x17c>
   19618:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1961a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1961c:	0e 94 e0 c0 	call	0x181c0	; 0x181c0 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19620:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19622:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19624:	e4 5a       	subi	r30, 0xA4	; 164
   19626:	ff 4f       	sbci	r31, 0xFF	; 255
   19628:	88 8d       	ldd	r24, Y+24	; 0x18
   1962a:	80 83       	st	Z, r24
   1962c:	99 8d       	ldd	r25, Y+25	; 0x19
   1962e:	91 83       	std	Z+1, r25	; 0x01
   19630:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19632:	22 83       	std	Z+2, r18	; 0x02
   19634:	8b 8d       	ldd	r24, Y+27	; 0x1b
                LIF->DIR.FileSectors = sectors;
   19636:	83 83       	std	Z+3, r24	; 0x03
   19638:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1963a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1963c:	e0 5a       	subi	r30, 0xA0	; 160
   1963e:	ff 4f       	sbci	r31, 0xFF	; 255
   19640:	80 82       	st	Z, r8
   19642:	91 82       	std	Z+1, r9	; 0x01
   19644:	a2 82       	std	Z+2, r10	; 0x02
                LIF->usedsectors += sectors;
   19646:	b3 82       	std	Z+3, r11	; 0x03
   19648:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1964a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1964c:	84 89       	ldd	r24, Z+20	; 0x14
   1964e:	95 89       	ldd	r25, Z+21	; 0x15
   19650:	a6 89       	ldd	r26, Z+22	; 0x16
   19652:	b7 89       	ldd	r27, Z+23	; 0x17
   19654:	88 0d       	add	r24, r8
   19656:	99 1d       	adc	r25, r9
   19658:	aa 1d       	adc	r26, r10
   1965a:	bb 1d       	adc	r27, r11
   1965c:	84 8b       	std	Z+20, r24	; 0x14
   1965e:	95 8b       	std	Z+21, r25	; 0x15
   19660:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   19662:	b7 8b       	std	Z+23, r27	; 0x17
   19664:	80 8d       	ldd	r24, Z+24	; 0x18
   19666:	91 8d       	ldd	r25, Z+25	; 0x19
   19668:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1966a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1966c:	88 19       	sub	r24, r8
   1966e:	99 09       	sbc	r25, r9
   19670:	aa 09       	sbc	r26, r10
   19672:	bb 09       	sbc	r27, r11
   19674:	80 8f       	std	Z+24, r24	; 0x18
   19676:	91 8f       	std	Z+25, r25	; 0x19
   19678:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1967a:	b3 8f       	std	Z+27, r27	; 0x1b
   1967c:	84 8d       	ldd	r24, Z+28	; 0x1c
   1967e:	95 8d       	ldd	r25, Z+29	; 0x1d
   19680:	01 96       	adiw	r24, 0x01	; 1
   19682:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   19684:	84 8f       	std	Z+28, r24	; 0x1c
   19686:	86 8d       	ldd	r24, Z+30	; 0x1e
   19688:	97 8d       	ldd	r25, Z+31	; 0x1f
   1968a:	01 97       	sbiw	r24, 0x01	; 1
   1968c:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1968e:	86 8f       	std	Z+30, r24	; 0x1e
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19690:	20 a2       	std	Z+32, r2	; 0x20
   19692:	31 a2       	std	Z+33, r3	; 0x21
   19694:	b1 01       	movw	r22, r2
   19696:	cf 01       	movw	r24, r30
   19698:	e1 da       	rcall	.-2622   	; 0x18c5c <lif_writedirindex>
   1969a:	89 2b       	or	r24, r25
   1969c:	09 f4       	brne	.+2      	; 0x196a0 <lif_newdir+0x178>
   1969e:	9e c0       	rjmp	.+316    	; 0x197dc <lif_newdir+0x2b4>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   196a0:	c1 01       	movw	r24, r2
   196a2:	9e c0       	rjmp	.+316    	; 0x197e0 <lif_newdir+0x2b8>
   196a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   196a8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   196ac:	92 ff       	sbrs	r25, 2
   196ae:	1e c0       	rjmp	.+60     	; 0x196ec <lif_newdir+0x1c4>
   196b0:	ec 8d       	ldd	r30, Y+28	; 0x1c
   196b2:	fd 8d       	ldd	r31, Y+29	; 0x1d
   196b4:	80 8d       	ldd	r24, Z+24	; 0x18
   196b6:	91 8d       	ldd	r25, Z+25	; 0x19
   196b8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   196ba:	b3 8d       	ldd	r27, Z+27	; 0x1b
   196bc:	ed b7       	in	r30, 0x3d	; 61
   196be:	fe b7       	in	r31, 0x3e	; 62
   196c0:	86 87       	std	Z+14, r24	; 0x0e
   196c2:	97 87       	std	Z+15, r25	; 0x0f
   196c4:	a0 8b       	std	Z+16, r26	; 0x10
   196c6:	b1 8b       	std	Z+17, r27	; 0x11
   196c8:	82 86       	std	Z+10, r8	; 0x0a
   196ca:	93 86       	std	Z+11, r9	; 0x0b
   196cc:	a4 86       	std	Z+12, r10	; 0x0c
   196ce:	b5 86       	std	Z+13, r11	; 0x0d
   196d0:	c6 82       	std	Z+6, r12	; 0x06
   196d2:	d7 82       	std	Z+7, r13	; 0x07
   196d4:	e0 86       	std	Z+8, r14	; 0x08
   196d6:	f1 86       	std	Z+9, r15	; 0x09
   196d8:	15 83       	std	Z+5, r17	; 0x05
   196da:	04 83       	std	Z+4, r16	; 0x04
   196dc:	80 e8       	ldi	r24, 0x80	; 128
   196de:	97 e3       	ldi	r25, 0x37	; 55
   196e0:	a0 e0       	ldi	r26, 0x00	; 0
   196e2:	81 83       	std	Z+1, r24	; 0x01
   196e4:	92 83       	std	Z+2, r25	; 0x02
   196e6:	a3 83       	std	Z+3, r26	; 0x03
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   196e8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   196ec:	b8 01       	movw	r22, r16
   196ee:	6f 5f       	subi	r22, 0xFF	; 255
   196f0:	7f 4f       	sbci	r23, 0xFF	; 255
   196f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   196f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
   196f6:	0e db       	rcall	.-2532   	; 0x18d14 <lif_writedirEOF>
   196f8:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   196fa:	09 f4       	brne	.+2      	; 0x196fe <lif_newdir+0x1d6>
   196fc:	6f c0       	rjmp	.+222    	; 0x197dc <lif_newdir+0x2b4>
   196fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19700:	9d 8d       	ldd	r25, Y+29	; 0x1d
            LIF->DIR.FileStartSector = start;
   19702:	0e 94 e0 c0 	call	0x181c0	; 0x181c0 <lif_dir_clear>
   19706:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19708:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1970a:	e4 5a       	subi	r30, 0xA4	; 164
   1970c:	ff 4f       	sbci	r31, 0xFF	; 255
   1970e:	c0 82       	st	Z, r12
   19710:	d1 82       	std	Z+1, r13	; 0x01
            LIF->DIR.FileSectors = sectors;
   19712:	e2 82       	std	Z+2, r14	; 0x02
   19714:	f3 82       	std	Z+3, r15	; 0x03
   19716:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19718:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1971a:	e0 5a       	subi	r30, 0xA0	; 160
   1971c:	ff 4f       	sbci	r31, 0xFF	; 255
   1971e:	80 82       	st	Z, r8
   19720:	91 82       	std	Z+1, r9	; 0x01
            LIF->usedsectors += sectors;
   19722:	a2 82       	std	Z+2, r10	; 0x02
   19724:	b3 82       	std	Z+3, r11	; 0x03
   19726:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19728:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1972a:	84 89       	ldd	r24, Z+20	; 0x14
   1972c:	95 89       	ldd	r25, Z+21	; 0x15
   1972e:	a6 89       	ldd	r26, Z+22	; 0x16
   19730:	b7 89       	ldd	r27, Z+23	; 0x17
   19732:	88 0d       	add	r24, r8
   19734:	99 1d       	adc	r25, r9
   19736:	aa 1d       	adc	r26, r10
   19738:	bb 1d       	adc	r27, r11
   1973a:	84 8b       	std	Z+20, r24	; 0x14
   1973c:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1973e:	a6 8b       	std	Z+22, r26	; 0x16
   19740:	b7 8b       	std	Z+23, r27	; 0x17
   19742:	80 8d       	ldd	r24, Z+24	; 0x18
   19744:	91 8d       	ldd	r25, Z+25	; 0x19
   19746:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19748:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1974a:	88 19       	sub	r24, r8
   1974c:	99 09       	sbc	r25, r9
   1974e:	aa 09       	sbc	r26, r10
   19750:	bb 09       	sbc	r27, r11
   19752:	80 8f       	std	Z+24, r24	; 0x18
   19754:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   19756:	a2 8f       	std	Z+26, r26	; 0x1a
   19758:	b3 8f       	std	Z+27, r27	; 0x1b
   1975a:	84 8d       	ldd	r24, Z+28	; 0x1c
   1975c:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1975e:	01 96       	adiw	r24, 0x01	; 1
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19760:	95 8f       	std	Z+29, r25	; 0x1d
   19762:	84 8f       	std	Z+28, r24	; 0x1c
   19764:	11 a3       	std	Z+33, r17	; 0x21
   19766:	00 a3       	std	Z+32, r16	; 0x20
   19768:	b8 01       	movw	r22, r16
   1976a:	cf 01       	movw	r24, r30
   1976c:	77 da       	rcall	.-2834   	; 0x18c5c <lif_writedirindex>
   1976e:	89 2b       	or	r24, r25
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19770:	a9 f1       	breq	.+106    	; 0x197dc <lif_newdir+0x2b4>
   19772:	c8 01       	movw	r24, r16
   19774:	35 c0       	rjmp	.+106    	; 0x197e0 <lif_newdir+0x2b8>
   19776:	c8 8e       	std	Y+24, r12	; 0x18
   19778:	d9 8e       	std	Y+25, r13	; 0x19
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1977a:	ea 8e       	std	Y+26, r14	; 0x1a
   1977c:	fb 8e       	std	Y+27, r15	; 0x1b
   1977e:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   19780:	66 24       	eor	r6, r6
        }

// VALID record
        if(freestate == 1)
   19782:	63 94       	inc	r6
   19784:	71 2c       	mov	r7, r1
   19786:	36 cf       	rjmp	.-404    	; 0x195f4 <lif_newdir+0xcc>
   19788:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1978a:	6f 16       	cp	r6, r31
   1978c:	71 04       	cpc	r7, r1
   1978e:	a9 f4       	brne	.+42     	; 0x197ba <lif_newdir+0x292>
   19790:	ea 89       	ldd	r30, Y+18	; 0x12
   19792:	fb 89       	ldd	r31, Y+19	; 0x13
   19794:	80 81       	ld	r24, Z
   19796:	91 81       	ldd	r25, Z+1	; 0x01
   19798:	a2 81       	ldd	r26, Z+2	; 0x02
   1979a:	b3 81       	ldd	r27, Z+3	; 0x03
   1979c:	8c 19       	sub	r24, r12
   1979e:	9d 09       	sbc	r25, r13
   197a0:	ae 09       	sbc	r26, r14
   197a2:	bf 09       	sbc	r27, r15
   197a4:	88 15       	cp	r24, r8
   197a6:	99 05       	cpc	r25, r9
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   197a8:	aa 05       	cpc	r26, r10
   197aa:	bb 05       	cpc	r27, r11
   197ac:	1c f4       	brge	.+6      	; 0x197b4 <lif_newdir+0x28c>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   197ae:	61 2c       	mov	r6, r1
   197b0:	71 2c       	mov	r7, r1
   197b2:	03 c0       	rjmp	.+6      	; 0x197ba <lif_newdir+0x292>
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   197b4:	82 e0       	ldi	r24, 0x02	; 2
   197b6:	68 2e       	mov	r6, r24
   197b8:	71 2c       	mov	r7, r1
   197ba:	ea 89       	ldd	r30, Y+18	; 0x12
   197bc:	fb 89       	ldd	r31, Y+19	; 0x13
   197be:	c0 80       	ld	r12, Z
   197c0:	d1 80       	ldd	r13, Z+1	; 0x01
   197c2:	e2 80       	ldd	r14, Z+2	; 0x02
   197c4:	f3 80       	ldd	r15, Z+3	; 0x03
   197c6:	ee 89       	ldd	r30, Y+22	; 0x16
   197c8:	ff 89       	ldd	r31, Y+23	; 0x17
   197ca:	80 81       	ld	r24, Z
   197cc:	91 81       	ldd	r25, Z+1	; 0x01
   197ce:	a2 81       	ldd	r26, Z+2	; 0x02
   197d0:	b3 81       	ldd	r27, Z+3	; 0x03
   197d2:	c8 0e       	add	r12, r24
   197d4:	d9 1e       	adc	r13, r25
        ++index;
    }
// ERROR
    return(-1);
   197d6:	ea 1e       	adc	r14, r26
   197d8:	fb 1e       	adc	r15, r27
}
   197da:	0c cf       	rjmp	.-488    	; 0x195f4 <lif_newdir+0xcc>
   197dc:	8f ef       	ldi	r24, 0xFF	; 255
   197de:	9f ef       	ldi	r25, 0xFF	; 255
   197e0:	6d 96       	adiw	r28, 0x1d	; 29
   197e2:	e2 e1       	ldi	r30, 0x12	; 18
   197e4:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

000197e8 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   197e8:	a9 e3       	ldi	r26, 0x39	; 57
   197ea:	b1 e0       	ldi	r27, 0x01	; 1
   197ec:	ea ef       	ldi	r30, 0xFA	; 250
   197ee:	fb ec       	ldi	r31, 0xCB	; 203
   197f0:	0c 94 c8 df 	jmp	0x1bf90	; 0x1bf90 <__prologue_saves__+0xc>
   197f4:	6c 01       	movw	r12, r24
   197f6:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   197f8:	be 01       	movw	r22, r28
   197fa:	66 5f       	subi	r22, 0xF6	; 246
   197fc:	7e 4f       	sbci	r23, 0xFE	; 254
   197fe:	0e 94 33 bc 	call	0x17866	; 0x17866 <lif_stat>
   19802:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19804:	00 97       	sbiw	r24, 0x00	; 0
   19806:	f9 f0       	breq	.+62     	; 0x19846 <lif_open_volume+0x5e>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19808:	fc 01       	movw	r30, r24
   1980a:	80 8d       	ldd	r24, Z+24	; 0x18
   1980c:	91 8d       	ldd	r25, Z+25	; 0x19
   1980e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19810:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19812:	81 15       	cp	r24, r1
   19814:	f2 e0       	ldi	r31, 0x02	; 2
   19816:	9f 07       	cpc	r25, r31
   19818:	a1 05       	cpc	r26, r1
   1981a:	b1 05       	cpc	r27, r1
   1981c:	b8 f4       	brcc	.+46     	; 0x1984c <lif_open_volume+0x64>
    {
        if(debuglevel & GPIB_PPR)
   1981e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19822:	21 ff       	sbrs	r18, 1
   19824:	10 c0       	rjmp	.+32     	; 0x19846 <lif_open_volume+0x5e>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19826:	ed b7       	in	r30, 0x3d	; 61
   19828:	fe b7       	in	r31, 0x3e	; 62
   1982a:	86 83       	std	Z+6, r24	; 0x06
   1982c:	97 83       	std	Z+7, r25	; 0x07
   1982e:	a0 87       	std	Z+8, r26	; 0x08
   19830:	b1 87       	std	Z+9, r27	; 0x09
   19832:	d5 82       	std	Z+5, r13	; 0x05
   19834:	c4 82       	std	Z+4, r12	; 0x04
   19836:	81 e4       	ldi	r24, 0x41	; 65
   19838:	97 e3       	ldi	r25, 0x37	; 55
   1983a:	a0 e0       	ldi	r26, 0x00	; 0
   1983c:	81 83       	std	Z+1, r24	; 0x01
   1983e:	92 83       	std	Z+2, r25	; 0x02
   19840:	a3 83       	std	Z+3, r26	; 0x03
   19842:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        return(NULL);
   19846:	00 e0       	ldi	r16, 0x00	; 0
   19848:	10 e0       	ldi	r17, 0x00	; 0
   1984a:	c2 c0       	rjmp	.+388    	; 0x199d0 <lif_open_volume+0x1e8>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1984c:	64 e7       	ldi	r22, 0x74	; 116
   1984e:	70 e0       	ldi	r23, 0x00	; 0
   19850:	80 e0       	ldi	r24, 0x00	; 0
   19852:	90 e0       	ldi	r25, 0x00	; 0
   19854:	0e 94 9f bb 	call	0x1773e	; 0x1773e <lif_calloc>
   19858:	7c 01       	movw	r14, r24
    if(!LIF)
   1985a:	89 2b       	or	r24, r25
   1985c:	a1 f3       	breq	.-24     	; 0x19846 <lif_open_volume+0x5e>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1985e:	c6 01       	movw	r24, r12
   19860:	0e 94 ea bb 	call	0x177d4	; 0x177d4 <lif_stralloc>
   19864:	f7 01       	movw	r30, r14
   19866:	91 83       	std	Z+1, r25	; 0x01
   19868:	80 83       	st	Z, r24
    if(!LIF->name)
   1986a:	00 97       	sbiw	r24, 0x00	; 0
   1986c:	09 f4       	brne	.+2      	; 0x19870 <lif_open_volume+0x88>
   1986e:	5a c0       	rjmp	.+180    	; 0x19924 <lif_open_volume+0x13c>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19870:	f5 01       	movw	r30, r10
   19872:	80 8c       	ldd	r8, Z+24	; 0x18
   19874:	91 8c       	ldd	r9, Z+25	; 0x19
   19876:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19878:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1987a:	f7 01       	movw	r30, r14
   1987c:	80 86       	std	Z+8, r8	; 0x08
   1987e:	91 86       	std	Z+9, r9	; 0x09
   19880:	a2 86       	std	Z+10, r10	; 0x0a
   19882:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19884:	77 27       	eor	r23, r23
   19886:	6b 2d       	mov	r22, r11
   19888:	5a 2d       	mov	r21, r10
   1988a:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1988c:	88 20       	and	r8, r8
   1988e:	21 f0       	breq	.+8      	; 0x19898 <lif_open_volume+0xb0>
        ++sectors;
   19890:	4f 5f       	subi	r20, 0xFF	; 255
   19892:	5f 4f       	sbci	r21, 0xFF	; 255
   19894:	6f 4f       	sbci	r22, 0xFF	; 255
   19896:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19898:	f7 01       	movw	r30, r14
   1989a:	44 83       	std	Z+4, r20	; 0x04
   1989c:	55 83       	std	Z+5, r21	; 0x05
   1989e:	66 83       	std	Z+6, r22	; 0x06
   198a0:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   198a2:	b8 01       	movw	r22, r16
   198a4:	0e 94 09 bc 	call	0x17812	; 0x17812 <lif_open>
   198a8:	f7 01       	movw	r30, r14
   198aa:	93 83       	std	Z+3, r25	; 0x03
   198ac:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   198ae:	89 2b       	or	r24, r25
   198b0:	c9 f1       	breq	.+114    	; 0x19924 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   198b2:	00 e0       	ldi	r16, 0x00	; 0
   198b4:	11 e0       	ldi	r17, 0x01	; 1
   198b6:	20 e0       	ldi	r18, 0x00	; 0
   198b8:	30 e0       	ldi	r19, 0x00	; 0
   198ba:	a9 01       	movw	r20, r18
   198bc:	be 01       	movw	r22, r28
   198be:	66 5f       	subi	r22, 0xF6	; 246
   198c0:	7f 4f       	sbci	r23, 0xFF	; 255
   198c2:	c7 01       	movw	r24, r14
   198c4:	0e 94 8d bc 	call	0x1791a	; 0x1791a <lif_read>
   198c8:	6f 3f       	cpi	r22, 0xFF	; 255
   198ca:	71 05       	cpc	r23, r1
   198cc:	81 05       	cpc	r24, r1
   198ce:	91 05       	cpc	r25, r1
   198d0:	09 f0       	breq	.+2      	; 0x198d4 <lif_open_volume+0xec>
   198d2:	5c f4       	brge	.+22     	; 0x198ea <lif_open_volume+0x102>
    {
        if(debuglevel & GPIB_PPR)
   198d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   198d8:	81 ff       	sbrs	r24, 1
   198da:	24 c0       	rjmp	.+72     	; 0x19924 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   198dc:	ed b7       	in	r30, 0x3d	; 61
   198de:	fe b7       	in	r31, 0x3e	; 62
   198e0:	d5 82       	std	Z+5, r13	; 0x05
   198e2:	c4 82       	std	Z+4, r12	; 0x04
   198e4:	8b e0       	ldi	r24, 0x0B	; 11
   198e6:	97 e3       	ldi	r25, 0x37	; 55
   198e8:	17 c0       	rjmp	.+46     	; 0x19918 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   198ea:	b7 01       	movw	r22, r14
   198ec:	ce 01       	movw	r24, r28
   198ee:	0a 96       	adiw	r24, 0x0a	; 10
   198f0:	0e 94 a9 be 	call	0x17d52	; 0x17d52 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   198f4:	c7 01       	movw	r24, r14
   198f6:	0e 94 b5 c2 	call	0x1856a	; 0x1856a <lif_check_volume>
   198fa:	89 2b       	or	r24, r25
   198fc:	b1 f4       	brne	.+44     	; 0x1992a <lif_open_volume+0x142>
    {
        if(debuglevel & GPIB_PPR)
   198fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19902:	81 ff       	sbrs	r24, 1
   19904:	0f c0       	rjmp	.+30     	; 0x19924 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19906:	f7 01       	movw	r30, r14
   19908:	80 81       	ld	r24, Z
   1990a:	91 81       	ldd	r25, Z+1	; 0x01
   1990c:	ed b7       	in	r30, 0x3d	; 61
   1990e:	fe b7       	in	r31, 0x3e	; 62
   19910:	95 83       	std	Z+5, r25	; 0x05
   19912:	84 83       	std	Z+4, r24	; 0x04
   19914:	88 ed       	ldi	r24, 0xD8	; 216
   19916:	96 e3       	ldi	r25, 0x36	; 54
   19918:	a0 e0       	ldi	r26, 0x00	; 0
   1991a:	81 83       	std	Z+1, r24	; 0x01
   1991c:	92 83       	std	Z+2, r25	; 0x02
   1991e:	a3 83       	std	Z+3, r26	; 0x03
   19920:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19924:	c7 01       	movw	r24, r14
   19926:	a5 d8       	rcall	.-3766   	; 0x18a72 <lif_close_volume>
   19928:	8e cf       	rjmp	.-228    	; 0x19846 <lif_open_volume+0x5e>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1992a:	f7 01       	movw	r30, r14
   1992c:	45 a5       	ldd	r20, Z+45	; 0x2d
   1992e:	56 a5       	ldd	r21, Z+46	; 0x2e
   19930:	67 a5       	ldd	r22, Z+47	; 0x2f
   19932:	70 a9       	ldd	r23, Z+48	; 0x30
   19934:	85 a9       	ldd	r24, Z+53	; 0x35
   19936:	96 a9       	ldd	r25, Z+54	; 0x36
   19938:	a7 a9       	ldd	r26, Z+55	; 0x37
   1993a:	b0 ad       	ldd	r27, Z+56	; 0x38
   1993c:	48 0f       	add	r20, r24
   1993e:	59 1f       	adc	r21, r25
   19940:	6a 1f       	adc	r22, r26
   19942:	7b 1f       	adc	r23, r27
   19944:	44 87       	std	Z+12, r20	; 0x0c
   19946:	55 87       	std	Z+13, r21	; 0x0d
   19948:	66 87       	std	Z+14, r22	; 0x0e
   1994a:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1994c:	84 81       	ldd	r24, Z+4	; 0x04
   1994e:	95 81       	ldd	r25, Z+5	; 0x05
   19950:	a6 81       	ldd	r26, Z+6	; 0x06
   19952:	b7 81       	ldd	r27, Z+7	; 0x07
   19954:	84 1b       	sub	r24, r20
   19956:	95 0b       	sbc	r25, r21
   19958:	a6 0b       	sbc	r26, r22
   1995a:	b7 0b       	sbc	r27, r23
   1995c:	80 8b       	std	Z+16, r24	; 0x10
   1995e:	91 8b       	std	Z+17, r25	; 0x11
   19960:	a2 8b       	std	Z+18, r26	; 0x12
   19962:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19964:	80 8f       	std	Z+24, r24	; 0x18
   19966:	91 8f       	std	Z+25, r25	; 0x19
   19968:	a2 8f       	std	Z+26, r26	; 0x1a
   1996a:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1996c:	14 8a       	std	Z+20, r1	; 0x14
   1996e:	15 8a       	std	Z+21, r1	; 0x15
   19970:	16 8a       	std	Z+22, r1	; 0x16
   19972:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19974:	17 8e       	std	Z+31, r1	; 0x1f
   19976:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19978:	15 8e       	std	Z+29, r1	; 0x1d
   1997a:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1997c:	11 a2       	std	Z+33, r1	; 0x21
   1997e:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19980:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   19982:	12 a2       	std	Z+34, r1	; 0x22
   19984:	c7 01       	movw	r24, r14
   19986:	de d9       	rcall	.-3140   	; 0x18d44 <lif_updatefree>
   19988:	8c 01       	movw	r16, r24
   1998a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1998e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19992:	01 15       	cp	r16, r1
   19994:	11 05       	cpc	r17, r1
    {
        if(debuglevel & GPIB_PPR)
   19996:	a1 f4       	brne	.+40     	; 0x199c0 <lif_open_volume+0x1d8>
   19998:	81 ff       	sbrs	r24, 1
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1999a:	0f c0       	rjmp	.+30     	; 0x199ba <lif_open_volume+0x1d2>
   1999c:	f7 01       	movw	r30, r14
   1999e:	80 81       	ld	r24, Z
   199a0:	91 81       	ldd	r25, Z+1	; 0x01
   199a2:	ed b7       	in	r30, 0x3d	; 61
   199a4:	fe b7       	in	r31, 0x3e	; 62
   199a6:	95 83       	std	Z+5, r25	; 0x05
   199a8:	84 83       	std	Z+4, r24	; 0x04
   199aa:	85 ea       	ldi	r24, 0xA5	; 165
   199ac:	96 e3       	ldi	r25, 0x36	; 54
   199ae:	a0 e0       	ldi	r26, 0x00	; 0
   199b0:	81 83       	std	Z+1, r24	; 0x01
   199b2:	92 83       	std	Z+2, r25	; 0x02
   199b4:	a3 83       	std	Z+3, r26	; 0x03
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   199b6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   199ba:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   199bc:	5a d8       	rcall	.-3916   	; 0x18a72 <lif_close_volume>
    }

    if(debuglevel &LIF_DEBUG)
   199be:	08 c0       	rjmp	.+16     	; 0x199d0 <lif_open_volume+0x1e8>
   199c0:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF, "Volume Listing");
   199c2:	05 c0       	rjmp	.+10     	; 0x199ce <lif_open_volume+0x1e6>
   199c4:	6e e5       	ldi	r22, 0x5E	; 94
   199c6:	76 e1       	ldi	r23, 0x16	; 22
   199c8:	c7 01       	movw	r24, r14
   199ca:	0e 94 ef c0 	call	0x181de	; 0x181de <lif_dump_vol>
    return( LIF );
}
   199ce:	87 01       	movw	r16, r14
   199d0:	c8 01       	movw	r24, r16
   199d2:	c7 5c       	subi	r28, 0xC7	; 199
   199d4:	de 4f       	sbci	r29, 0xFE	; 254
   199d6:	ec e0       	ldi	r30, 0x0C	; 12
   199d8:	0c 94 e4 df 	jmp	0x1bfc8	; 0x1bfc8 <__epilogue_restores__+0xc>

000199dc <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   199dc:	2f 92       	push	r2
   199de:	3f 92       	push	r3
   199e0:	4f 92       	push	r4
   199e2:	5f 92       	push	r5
   199e4:	6f 92       	push	r6
   199e6:	8f 92       	push	r8
   199e8:	9f 92       	push	r9
   199ea:	af 92       	push	r10
   199ec:	bf 92       	push	r11
   199ee:	cf 92       	push	r12
   199f0:	df 92       	push	r13
   199f2:	ef 92       	push	r14
   199f4:	0f 93       	push	r16
   199f6:	1f 93       	push	r17
   199f8:	cf 93       	push	r28
   199fa:	df 93       	push	r29
   199fc:	cd b7       	in	r28, 0x3d	; 61
   199fe:	de b7       	in	r29, 0x3e	; 62
   19a00:	af 97       	sbiw	r28, 0x2f	; 47
   19a02:	0f b6       	in	r0, 0x3f	; 63
   19a04:	f8 94       	cli
   19a06:	de bf       	out	0x3e, r29	; 62
   19a08:	0f be       	out	0x3f, r0	; 63
   19a0a:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19a0c:	63 e0       	ldi	r22, 0x03	; 3
   19a0e:	79 e0       	ldi	r23, 0x09	; 9
   19a10:	eb de       	rcall	.-554    	; 0x197e8 <lif_open_volume>
   19a12:	9f a7       	std	Y+47, r25	; 0x2f
   19a14:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19a16:	00 97       	sbiw	r24, 0x00	; 0
   19a18:	09 f4       	brne	.+2      	; 0x19a1c <lif_dir+0x40>
   19a1a:	9e c1       	rjmp	.+828    	; 0x19d58 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19a1c:	fc 01       	movw	r30, r24
   19a1e:	86 a1       	ldd	r24, Z+38	; 0x26
   19a20:	88 23       	and	r24, r24
   19a22:	21 f0       	breq	.+8      	; 0x19a2c <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19a24:	8f 01       	movw	r16, r30
   19a26:	0a 5d       	subi	r16, 0xDA	; 218
   19a28:	1f 4f       	sbci	r17, 0xFF	; 255
   19a2a:	02 c0       	rjmp	.+4      	; 0x19a30 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19a2c:	00 e1       	ldi	r16, 0x10	; 16
   19a2e:	16 e1       	ldi	r17, 0x16	; 22

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19a30:	8e a5       	ldd	r24, Y+46	; 0x2e
   19a32:	9f a5       	ldd	r25, Y+47	; 0x2f
   19a34:	87 5b       	subi	r24, 0xB7	; 183
   19a36:	9f 4f       	sbci	r25, 0xFF	; 255
   19a38:	0e 94 b3 c0 	call	0x18166	; 0x18166 <lif_lifbcd2timestr>
   19a3c:	ed b7       	in	r30, 0x3d	; 61
   19a3e:	fe b7       	in	r31, 0x3e	; 62
   19a40:	97 83       	std	Z+7, r25	; 0x07
   19a42:	86 83       	std	Z+6, r24	; 0x06
   19a44:	15 83       	std	Z+5, r17	; 0x05
   19a46:	04 83       	std	Z+4, r16	; 0x04
   19a48:	8e e8       	ldi	r24, 0x8E	; 142
   19a4a:	96 e3       	ldi	r25, 0x36	; 54
   19a4c:	a0 e0       	ldi	r26, 0x00	; 0
   19a4e:	81 83       	std	Z+1, r24	; 0x01
   19a50:	92 83       	std	Z+2, r25	; 0x02
   19a52:	a3 83       	std	Z+3, r26	; 0x03
   19a54:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19a58:	8e e4       	ldi	r24, 0x4E	; 78
   19a5a:	96 e3       	ldi	r25, 0x36	; 54
   19a5c:	a0 e0       	ldi	r26, 0x00	; 0
   19a5e:	ed b7       	in	r30, 0x3d	; 61
   19a60:	fe b7       	in	r31, 0x3e	; 62
   19a62:	81 83       	std	Z+1, r24	; 0x01
   19a64:	92 83       	std	Z+2, r25	; 0x02
   19a66:	a3 83       	std	Z+3, r26	; 0x03
   19a68:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19a6c:	00 e2       	ldi	r16, 0x20	; 32
   19a6e:	10 e0       	ldi	r17, 0x00	; 0
   19a70:	1f 8b       	std	Y+23, r17	; 0x17
   19a72:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19a74:	21 2c       	mov	r2, r1
   19a76:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19a78:	0e a5       	ldd	r16, Y+46	; 0x2e
   19a7a:	1f a5       	ldd	r17, Y+47	; 0x2f
   19a7c:	06 5a       	subi	r16, 0xA6	; 166
   19a7e:	1f 4f       	sbci	r17, 0xFF	; 255
   19a80:	1d 8f       	std	Y+29, r17	; 0x1d
   19a82:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19a84:	0e a5       	ldd	r16, Y+46	; 0x2e
   19a86:	1f a5       	ldd	r17, Y+47	; 0x2f
   19a88:	00 5a       	subi	r16, 0xA0	; 160
   19a8a:	1f 4f       	sbci	r17, 0xFF	; 255
   19a8c:	1d a3       	std	Y+37, r17	; 0x25
   19a8e:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19a90:	0e a5       	ldd	r16, Y+46	; 0x2e
   19a92:	1f a5       	ldd	r17, Y+47	; 0x2f
   19a94:	04 59       	subi	r16, 0x94	; 148
   19a96:	1f 4f       	sbci	r17, 0xFF	; 255
   19a98:	1f a3       	std	Y+39, r17	; 0x27
   19a9a:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19a9c:	82 e0       	ldi	r24, 0x02	; 2
   19a9e:	96 e3       	ldi	r25, 0x36	; 54
   19aa0:	6c 01       	movw	r12, r24
   19aa2:	e1 2c       	mov	r14, r1
   19aa4:	0e a5       	ldd	r16, Y+46	; 0x2e
   19aa6:	1f a5       	ldd	r17, Y+47	; 0x2f
   19aa8:	01 5b       	subi	r16, 0xB1	; 177
   19aaa:	1f 4f       	sbci	r17, 0xFF	; 255
   19aac:	1f 8f       	std	Y+31, r17	; 0x1f
   19aae:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19ab0:	82 ed       	ldi	r24, 0xD2	; 210
   19ab2:	95 e3       	ldi	r25, 0x35	; 53
   19ab4:	2c 01       	movw	r4, r24
   19ab6:	61 2c       	mov	r6, r1
   19ab8:	0e a5       	ldd	r16, Y+46	; 0x2e
   19aba:	1f a5       	ldd	r17, Y+47	; 0x2f
   19abc:	04 5a       	subi	r16, 0xA4	; 164
   19abe:	1f 4f       	sbci	r17, 0xFF	; 255
   19ac0:	19 a7       	std	Y+41, r17	; 0x29
   19ac2:	08 a7       	std	Y+40, r16	; 0x28
   19ac4:	0e a5       	ldd	r16, Y+46	; 0x2e
   19ac6:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ac8:	02 59       	subi	r16, 0x92	; 146
   19aca:	1f 4f       	sbci	r17, 0xFF	; 255
   19acc:	1b a7       	std	Y+43, r17	; 0x2b
   19ace:	0a a7       	std	Y+42, r16	; 0x2a
   19ad0:	0e a5       	ldd	r16, Y+46	; 0x2e
   19ad2:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ad4:	0c 59       	subi	r16, 0x9C	; 156
   19ad6:	1f 4f       	sbci	r17, 0xFF	; 255
   19ad8:	1d a7       	std	Y+45, r17	; 0x2d
   19ada:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19adc:	b1 01       	movw	r22, r2
   19ade:	8e a5       	ldd	r24, Y+46	; 0x2e
   19ae0:	9f a5       	ldd	r25, Y+47	; 0x2f
   19ae2:	55 d8       	rcall	.-3926   	; 0x18b8e <lif_readdirindex>
   19ae4:	89 2b       	or	r24, r25
   19ae6:	09 f4       	brne	.+2      	; 0x19aea <lif_dir+0x10e>
   19ae8:	ad c0       	rjmp	.+346    	; 0x19c44 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   19aea:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19aec:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19aee:	8d 91       	ld	r24, X+
   19af0:	9c 91       	ld	r25, X
   19af2:	8f 3f       	cpi	r24, 0xFF	; 255
   19af4:	bf ef       	ldi	r27, 0xFF	; 255
   19af6:	9b 07       	cpc	r25, r27
   19af8:	09 f4       	brne	.+2      	; 0x19afc <lif_dir+0x120>
   19afa:	a4 c0       	rjmp	.+328    	; 0x19c44 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19afc:	ec a1       	ldd	r30, Y+36	; 0x24
   19afe:	fd a1       	ldd	r31, Y+37	; 0x25
   19b00:	40 81       	ld	r20, Z
   19b02:	51 81       	ldd	r21, Z+1	; 0x01
   19b04:	62 81       	ldd	r22, Z+2	; 0x02
   19b06:	73 81       	ldd	r23, Z+3	; 0x03
   19b08:	00 27       	eor	r16, r16
   19b0a:	14 2f       	mov	r17, r20
   19b0c:	25 2f       	mov	r18, r21
   19b0e:	36 2f       	mov	r19, r22
   19b10:	08 8f       	std	Y+24, r16	; 0x18
   19b12:	19 8f       	std	Y+25, r17	; 0x19
   19b14:	2a 8f       	std	Y+26, r18	; 0x1a
   19b16:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   19b18:	8c 7f       	andi	r24, 0xFC	; 252
   19b1a:	80 31       	cpi	r24, 0x10	; 16
   19b1c:	90 4e       	sbci	r25, 0xE0	; 224
   19b1e:	09 f0       	breq	.+2      	; 0x19b22 <lif_dir+0x146>
   19b20:	4b c0       	rjmp	.+150    	; 0x19bb8 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19b22:	ae a1       	ldd	r26, Y+38	; 0x26
   19b24:	bf a1       	ldd	r27, Y+39	; 0x27
   19b26:	8d 91       	ld	r24, X+
   19b28:	9c 91       	ld	r25, X
   19b2a:	00 97       	sbiw	r24, 0x00	; 0
   19b2c:	b9 f0       	breq	.+46     	; 0x19b5c <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19b2e:	4c 01       	movw	r8, r24
   19b30:	a1 2c       	mov	r10, r1
   19b32:	b1 2c       	mov	r11, r1
   19b34:	33 27       	eor	r19, r19
   19b36:	2b 2d       	mov	r18, r11
   19b38:	1a 2d       	mov	r17, r10
   19b3a:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19b3c:	88 23       	and	r24, r24
   19b3e:	21 f0       	breq	.+8      	; 0x19b48 <lif_dir+0x16c>
        ++sectors;
   19b40:	0f 5f       	subi	r16, 0xFF	; 255
   19b42:	1f 4f       	sbci	r17, 0xFF	; 255
   19b44:	2f 4f       	sbci	r18, 0xFF	; 255
   19b46:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19b48:	40 17       	cp	r20, r16
   19b4a:	51 07       	cpc	r21, r17
   19b4c:	62 07       	cpc	r22, r18
   19b4e:	73 07       	cpc	r23, r19
   19b50:	29 f4       	brne	.+10     	; 0x19b5c <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   19b52:	88 8e       	std	Y+24, r8	; 0x18
   19b54:	99 8e       	std	Y+25, r9	; 0x19
   19b56:	aa 8e       	std	Y+26, r10	; 0x1a
   19b58:	bb 8e       	std	Y+27, r11	; 0x1b
   19b5a:	2e c0       	rjmp	.+92     	; 0x19bb8 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   19b5c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19b60:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19b64:	32 ff       	sbrs	r19, 2
   19b66:	24 c0       	rjmp	.+72     	; 0x19bb0 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19b68:	4c 01       	movw	r8, r24
   19b6a:	a1 2c       	mov	r10, r1
   19b6c:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19b6e:	33 27       	eor	r19, r19
   19b70:	2b 2d       	mov	r18, r11
   19b72:	1a 2d       	mov	r17, r10
   19b74:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19b76:	88 23       	and	r24, r24
   19b78:	21 f0       	breq	.+8      	; 0x19b82 <lif_dir+0x1a6>
        ++sectors;
   19b7a:	0f 5f       	subi	r16, 0xFF	; 255
   19b7c:	1f 4f       	sbci	r17, 0xFF	; 255
   19b7e:	2f 4f       	sbci	r18, 0xFF	; 255
   19b80:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19b82:	ed b7       	in	r30, 0x3d	; 61
   19b84:	fe b7       	in	r31, 0x3e	; 62
   19b86:	46 87       	std	Z+14, r20	; 0x0e
   19b88:	57 87       	std	Z+15, r21	; 0x0f
   19b8a:	60 8b       	std	Z+16, r22	; 0x10
   19b8c:	71 8b       	std	Z+17, r23	; 0x11
   19b8e:	02 87       	std	Z+10, r16	; 0x0a
   19b90:	13 87       	std	Z+11, r17	; 0x0b
   19b92:	24 87       	std	Z+12, r18	; 0x0c
   19b94:	35 87       	std	Z+13, r19	; 0x0d
   19b96:	86 82       	std	Z+6, r8	; 0x06
   19b98:	97 82       	std	Z+7, r9	; 0x07
   19b9a:	a0 86       	std	Z+8, r10	; 0x08
   19b9c:	b1 86       	std	Z+9, r11	; 0x09
   19b9e:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19ba0:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19ba2:	15 83       	std	Z+5, r17	; 0x05
   19ba4:	04 83       	std	Z+4, r16	; 0x04
   19ba6:	c1 82       	std	Z+1, r12	; 0x01
   19ba8:	d2 82       	std	Z+2, r13	; 0x02
   19baa:	e3 82       	std	Z+3, r14	; 0x03
   19bac:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   19bb0:	01 e2       	ldi	r16, 0x21	; 33
   19bb2:	10 e0       	ldi	r17, 0x00	; 0
   19bb4:	1f 8b       	std	Y+23, r17	; 0x17
   19bb6:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19bb8:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19bba:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19bbc:	8d 90       	ld	r8, X+
   19bbe:	9c 90       	ld	r9, X
   19bc0:	81 14       	cp	r8, r1
   19bc2:	91 04       	cpc	r9, r1
   19bc4:	19 f0       	breq	.+6      	; 0x19bcc <lif_dir+0x1f0>
   19bc6:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19bc8:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19bca:	02 c0       	rjmp	.+4      	; 0x19bd0 <lif_dir+0x1f4>
   19bcc:	0d e6       	ldi	r16, 0x6D	; 109
   19bce:	16 e1       	ldi	r17, 0x16	; 22
   19bd0:	a8 a5       	ldd	r26, Y+40	; 0x28
   19bd2:	b9 a5       	ldd	r27, Y+41	; 0x29
   19bd4:	8d 91       	ld	r24, X+
   19bd6:	9d 91       	ld	r25, X+
   19bd8:	0d 90       	ld	r0, X+
   19bda:	bc 91       	ld	r27, X
   19bdc:	a0 2d       	mov	r26, r0
   19bde:	88 a3       	std	Y+32, r24	; 0x20
   19be0:	99 a3       	std	Y+33, r25	; 0x21
   19be2:	aa a3       	std	Y+34, r26	; 0x22
   19be4:	bb a3       	std	Y+35, r27	; 0x23
   19be6:	ea a5       	ldd	r30, Y+42	; 0x2a
   19be8:	fb a5       	ldd	r31, Y+43	; 0x2b
   19bea:	a0 80       	ld	r10, Z
   19bec:	b1 80       	ldd	r11, Z+1	; 0x01
   19bee:	8c a5       	ldd	r24, Y+44	; 0x2c
   19bf0:	9d a5       	ldd	r25, Y+45	; 0x2d
   19bf2:	0e 94 b3 c0 	call	0x18166	; 0x18166 <lif_lifbcd2timestr>
   19bf6:	ed b7       	in	r30, 0x3d	; 61
   19bf8:	fe b7       	in	r31, 0x3e	; 62
   19bfa:	95 8b       	std	Z+21, r25	; 0x15
   19bfc:	84 8b       	std	Z+20, r24	; 0x14
   19bfe:	b3 8a       	std	Z+19, r11	; 0x13
   19c00:	a2 8a       	std	Z+18, r10	; 0x12
   19c02:	2e 89       	ldd	r18, Y+22	; 0x16
   19c04:	3f 89       	ldd	r19, Y+23	; 0x17
   19c06:	31 8b       	std	Z+17, r19	; 0x11
   19c08:	20 8b       	std	Z+16, r18	; 0x10
   19c0a:	88 8d       	ldd	r24, Y+24	; 0x18
   19c0c:	99 8d       	ldd	r25, Y+25	; 0x19
   19c0e:	aa 8d       	ldd	r26, Y+26	; 0x1a
   19c10:	bb 8d       	ldd	r27, Y+27	; 0x1b
   19c12:	84 87       	std	Z+12, r24	; 0x0c
   19c14:	95 87       	std	Z+13, r25	; 0x0d
   19c16:	a6 87       	std	Z+14, r26	; 0x0e
   19c18:	b7 87       	std	Z+15, r27	; 0x0f
   19c1a:	88 a1       	ldd	r24, Y+32	; 0x20
   19c1c:	99 a1       	ldd	r25, Y+33	; 0x21
   19c1e:	aa a1       	ldd	r26, Y+34	; 0x22
   19c20:	bb a1       	ldd	r27, Y+35	; 0x23
   19c22:	80 87       	std	Z+8, r24	; 0x08
   19c24:	91 87       	std	Z+9, r25	; 0x09
   19c26:	a2 87       	std	Z+10, r26	; 0x0a
   19c28:	b3 87       	std	Z+11, r27	; 0x0b
   19c2a:	97 82       	std	Z+7, r9	; 0x07
   19c2c:	86 82       	std	Z+6, r8	; 0x06
   19c2e:	15 83       	std	Z+5, r17	; 0x05
   19c30:	04 83       	std	Z+4, r16	; 0x04
   19c32:	41 82       	std	Z+1, r4	; 0x01
   19c34:	52 82       	std	Z+2, r5	; 0x02
   19c36:	63 82       	std	Z+3, r6	; 0x03
   19c38:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   19c3c:	ff ef       	ldi	r31, 0xFF	; 255
   19c3e:	2f 1a       	sub	r2, r31
   19c40:	3f 0a       	sbc	r3, r31
    }
   19c42:	4c cf       	rjmp	.-360    	; 0x19adc <lif_dir+0x100>

    printf("\n");
   19c44:	80 ed       	ldi	r24, 0xD0	; 208
   19c46:	95 e3       	ldi	r25, 0x35	; 53
   19c48:	a0 e0       	ldi	r26, 0x00	; 0
   19c4a:	ed b7       	in	r30, 0x3d	; 61
   19c4c:	fe b7       	in	r31, 0x3e	; 62
   19c4e:	81 83       	std	Z+1, r24	; 0x01
   19c50:	92 83       	std	Z+2, r25	; 0x02
   19c52:	a3 83       	std	Z+3, r26	; 0x03
   19c54:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   19c58:	ee a5       	ldd	r30, Y+46	; 0x2e
   19c5a:	ff a5       	ldd	r31, Y+47	; 0x2f
   19c5c:	84 8d       	ldd	r24, Z+28	; 0x1c
   19c5e:	95 8d       	ldd	r25, Z+29	; 0x1d
   19c60:	09 2e       	mov	r0, r25
   19c62:	00 0c       	add	r0, r0
   19c64:	aa 0b       	sbc	r26, r26
   19c66:	bb 0b       	sbc	r27, r27
   19c68:	ed b7       	in	r30, 0x3d	; 61
   19c6a:	fe b7       	in	r31, 0x3e	; 62
   19c6c:	84 83       	std	Z+4, r24	; 0x04
   19c6e:	95 83       	std	Z+5, r25	; 0x05
   19c70:	a6 83       	std	Z+6, r26	; 0x06
   19c72:	b7 83       	std	Z+7, r27	; 0x07
   19c74:	84 ec       	ldi	r24, 0xC4	; 196
   19c76:	95 e3       	ldi	r25, 0x35	; 53
   19c78:	a0 e0       	ldi	r26, 0x00	; 0
   19c7a:	81 83       	std	Z+1, r24	; 0x01
   19c7c:	92 83       	std	Z+2, r25	; 0x02
   19c7e:	a3 83       	std	Z+3, r26	; 0x03
   19c80:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   19c84:	ee a5       	ldd	r30, Y+46	; 0x2e
   19c86:	ff a5       	ldd	r31, Y+47	; 0x2f
   19c88:	86 8d       	ldd	r24, Z+30	; 0x1e
   19c8a:	97 8d       	ldd	r25, Z+31	; 0x1f
   19c8c:	09 2e       	mov	r0, r25
   19c8e:	00 0c       	add	r0, r0
   19c90:	aa 0b       	sbc	r26, r26
   19c92:	bb 0b       	sbc	r27, r27
   19c94:	ed b7       	in	r30, 0x3d	; 61
   19c96:	fe b7       	in	r31, 0x3e	; 62
   19c98:	84 83       	std	Z+4, r24	; 0x04
   19c9a:	95 83       	std	Z+5, r25	; 0x05
   19c9c:	a6 83       	std	Z+6, r26	; 0x06
   19c9e:	b7 83       	std	Z+7, r27	; 0x07
   19ca0:	87 eb       	ldi	r24, 0xB7	; 183
   19ca2:	95 e3       	ldi	r25, 0x35	; 53
   19ca4:	a0 e0       	ldi	r26, 0x00	; 0
   19ca6:	81 83       	std	Z+1, r24	; 0x01
   19ca8:	92 83       	std	Z+2, r25	; 0x02
   19caa:	a3 83       	std	Z+3, r26	; 0x03
   19cac:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   19cb0:	ee a5       	ldd	r30, Y+46	; 0x2e
   19cb2:	ff a5       	ldd	r31, Y+47	; 0x2f
   19cb4:	85 a5       	ldd	r24, Z+45	; 0x2d
   19cb6:	96 a5       	ldd	r25, Z+46	; 0x2e
   19cb8:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19cba:	b0 a9       	ldd	r27, Z+48	; 0x30
   19cbc:	ed b7       	in	r30, 0x3d	; 61
   19cbe:	fe b7       	in	r31, 0x3e	; 62
   19cc0:	84 83       	std	Z+4, r24	; 0x04
   19cc2:	95 83       	std	Z+5, r25	; 0x05
   19cc4:	a6 83       	std	Z+6, r26	; 0x06
   19cc6:	b7 83       	std	Z+7, r27	; 0x07
   19cc8:	86 ea       	ldi	r24, 0xA6	; 166
   19cca:	95 e3       	ldi	r25, 0x35	; 53
   19ccc:	a0 e0       	ldi	r26, 0x00	; 0
   19cce:	81 83       	std	Z+1, r24	; 0x01
   19cd0:	92 83       	std	Z+2, r25	; 0x02
   19cd2:	a3 83       	std	Z+3, r26	; 0x03
   19cd4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   19cd8:	ee a5       	ldd	r30, Y+46	; 0x2e
   19cda:	ff a5       	ldd	r31, Y+47	; 0x2f
   19cdc:	85 a9       	ldd	r24, Z+53	; 0x35
   19cde:	96 a9       	ldd	r25, Z+54	; 0x36
   19ce0:	a7 a9       	ldd	r26, Z+55	; 0x37
   19ce2:	b0 ad       	ldd	r27, Z+56	; 0x38
   19ce4:	ed b7       	in	r30, 0x3d	; 61
   19ce6:	fe b7       	in	r31, 0x3e	; 62
   19ce8:	84 83       	std	Z+4, r24	; 0x04
   19cea:	95 83       	std	Z+5, r25	; 0x05
   19cec:	a6 83       	std	Z+6, r26	; 0x06
   19cee:	b7 83       	std	Z+7, r27	; 0x07
   19cf0:	83 e9       	ldi	r24, 0x93	; 147
   19cf2:	95 e3       	ldi	r25, 0x35	; 53
   19cf4:	a0 e0       	ldi	r26, 0x00	; 0
   19cf6:	81 83       	std	Z+1, r24	; 0x01
   19cf8:	92 83       	std	Z+2, r25	; 0x02
   19cfa:	a3 83       	std	Z+3, r26	; 0x03
   19cfc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   19d00:	ee a5       	ldd	r30, Y+46	; 0x2e
   19d02:	ff a5       	ldd	r31, Y+47	; 0x2f
   19d04:	84 89       	ldd	r24, Z+20	; 0x14
   19d06:	95 89       	ldd	r25, Z+21	; 0x15
   19d08:	a6 89       	ldd	r26, Z+22	; 0x16
   19d0a:	b7 89       	ldd	r27, Z+23	; 0x17
   19d0c:	ed b7       	in	r30, 0x3d	; 61
   19d0e:	fe b7       	in	r31, 0x3e	; 62
   19d10:	84 83       	std	Z+4, r24	; 0x04
   19d12:	95 83       	std	Z+5, r25	; 0x05
   19d14:	a6 83       	std	Z+6, r26	; 0x06
   19d16:	b7 83       	std	Z+7, r27	; 0x07
   19d18:	80 e8       	ldi	r24, 0x80	; 128
   19d1a:	95 e3       	ldi	r25, 0x35	; 53
   19d1c:	a0 e0       	ldi	r26, 0x00	; 0
   19d1e:	81 83       	std	Z+1, r24	; 0x01
   19d20:	92 83       	std	Z+2, r25	; 0x02
   19d22:	a3 83       	std	Z+3, r26	; 0x03
   19d24:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   19d28:	ee a5       	ldd	r30, Y+46	; 0x2e
   19d2a:	ff a5       	ldd	r31, Y+47	; 0x2f
   19d2c:	80 8d       	ldd	r24, Z+24	; 0x18
   19d2e:	91 8d       	ldd	r25, Z+25	; 0x19
   19d30:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19d32:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19d34:	ed b7       	in	r30, 0x3d	; 61
   19d36:	fe b7       	in	r31, 0x3e	; 62
   19d38:	84 83       	std	Z+4, r24	; 0x04
   19d3a:	95 83       	std	Z+5, r25	; 0x05
   19d3c:	a6 83       	std	Z+6, r26	; 0x06
   19d3e:	b7 83       	std	Z+7, r27	; 0x07
   19d40:	8d e6       	ldi	r24, 0x6D	; 109
   19d42:	95 e3       	ldi	r25, 0x35	; 53
   19d44:	a0 e0       	ldi	r26, 0x00	; 0
   19d46:	81 83       	std	Z+1, r24	; 0x01
   19d48:	92 83       	std	Z+2, r25	; 0x02
   19d4a:	a3 83       	std	Z+3, r26	; 0x03
   19d4c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19d50:	8e a5       	ldd	r24, Y+46	; 0x2e
   19d52:	9f a5       	ldd	r25, Y+47	; 0x2f
   19d54:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   19d58:	af 96       	adiw	r28, 0x2f	; 47
   19d5a:	0f b6       	in	r0, 0x3f	; 63
   19d5c:	f8 94       	cli
   19d5e:	de bf       	out	0x3e, r29	; 62
   19d60:	0f be       	out	0x3f, r0	; 63
   19d62:	cd bf       	out	0x3d, r28	; 61
   19d64:	df 91       	pop	r29
   19d66:	cf 91       	pop	r28
   19d68:	1f 91       	pop	r17
   19d6a:	0f 91       	pop	r16
   19d6c:	ef 90       	pop	r14
   19d6e:	df 90       	pop	r13
   19d70:	cf 90       	pop	r12
   19d72:	bf 90       	pop	r11
   19d74:	af 90       	pop	r10
   19d76:	9f 90       	pop	r9
   19d78:	8f 90       	pop	r8
   19d7a:	6f 90       	pop	r6
   19d7c:	5f 90       	pop	r5
   19d7e:	4f 90       	pop	r4
   19d80:	3f 90       	pop	r3
   19d82:	2f 90       	pop	r2
   19d84:	08 95       	ret

00019d86 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   19d86:	a5 e0       	ldi	r26, 0x05	; 5
   19d88:	b0 e0       	ldi	r27, 0x00	; 0
   19d8a:	e9 ec       	ldi	r30, 0xC9	; 201
   19d8c:	fe ec       	ldi	r31, 0xCE	; 206
   19d8e:	0c 94 ca df 	jmp	0x1bf94	; 0x1bf94 <__prologue_saves__+0x10>
   19d92:	7c 01       	movw	r14, r24
   19d94:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   19d96:	cb 01       	movw	r24, r22
   19d98:	0e 94 a4 bd 	call	0x17b48	; 0x17b48 <lif_checkname>
   19d9c:	89 2b       	or	r24, r25
   19d9e:	59 f4       	brne	.+22     	; 0x19db6 <lif_find_file+0x30>
    {
        if(debuglevel & GPIB_PPR)
   19da0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19da4:	81 ff       	sbrs	r24, 1
   19da6:	46 c0       	rjmp	.+140    	; 0x19e34 <lif_find_file+0xae>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   19da8:	ed b7       	in	r30, 0x3d	; 61
   19daa:	fe b7       	in	r31, 0x3e	; 62
   19dac:	d5 83       	std	Z+5, r29	; 0x05
   19dae:	c4 83       	std	Z+4, r28	; 0x04
   19db0:	86 e4       	ldi	r24, 0x46	; 70
   19db2:	95 e3       	ldi	r25, 0x35	; 53
   19db4:	13 c0       	rjmp	.+38     	; 0x19ddc <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   19db6:	fe 01       	movw	r30, r28
   19db8:	01 90       	ld	r0, Z+
   19dba:	00 20       	and	r0, r0
   19dbc:	e9 f7       	brne	.-6      	; 0x19db8 <lif_find_file+0x32>
   19dbe:	31 97       	sbiw	r30, 0x01	; 1
   19dc0:	ec 1b       	sub	r30, r28
   19dc2:	fd 0b       	sbc	r31, r29
   19dc4:	3b 97       	sbiw	r30, 0x0b	; 11
   19dc6:	88 f0       	brcs	.+34     	; 0x19dea <lif_find_file+0x64>
    {
        if(debuglevel & GPIB_PPR)
   19dc8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19dcc:	81 ff       	sbrs	r24, 1
   19dce:	32 c0       	rjmp	.+100    	; 0x19e34 <lif_find_file+0xae>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   19dd0:	ed b7       	in	r30, 0x3d	; 61
   19dd2:	fe b7       	in	r31, 0x3e	; 62
   19dd4:	d5 83       	std	Z+5, r29	; 0x05
   19dd6:	c4 83       	std	Z+4, r28	; 0x04
   19dd8:	81 e2       	ldi	r24, 0x21	; 33
   19dda:	95 e3       	ldi	r25, 0x35	; 53
   19ddc:	a0 e0       	ldi	r26, 0x00	; 0
   19dde:	81 83       	std	Z+1, r24	; 0x01
   19de0:	92 83       	std	Z+2, r25	; 0x02
   19de2:	a3 83       	std	Z+3, r26	; 0x03
   19de4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   19de8:	25 c0       	rjmp	.+74     	; 0x19e34 <lif_find_file+0xae>
        return(-1);
    }

    if(LIF == NULL)
   19dea:	e1 14       	cp	r14, r1
   19dec:	f1 04       	cpc	r15, r1
   19dee:	11 f1       	breq	.+68     	; 0x19e34 <lif_find_file+0xae>
   19df0:	00 e0       	ldi	r16, 0x00	; 0
   19df2:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   19df4:	67 01       	movw	r12, r14
   19df6:	fa e5       	ldi	r31, 0x5A	; 90
   19df8:	cf 0e       	add	r12, r31
   19dfa:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   19dfc:	57 01       	movw	r10, r14
   19dfe:	2f e4       	ldi	r18, 0x4F	; 79
   19e00:	a2 0e       	add	r10, r18
   19e02:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   19e04:	b8 01       	movw	r22, r16
   19e06:	c7 01       	movw	r24, r14
   19e08:	0e 94 c7 c5 	call	0x18b8e	; 0x18b8e <lif_readdirindex>
   19e0c:	89 2b       	or	r24, r25
   19e0e:	91 f0       	breq	.+36     	; 0x19e34 <lif_find_file+0xae>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   19e10:	f6 01       	movw	r30, r12
   19e12:	80 81       	ld	r24, Z
   19e14:	91 81       	ldd	r25, Z+1	; 0x01
   19e16:	8f 3f       	cpi	r24, 0xFF	; 255
   19e18:	ff ef       	ldi	r31, 0xFF	; 255
   19e1a:	9f 07       	cpc	r25, r31
   19e1c:	59 f0       	breq	.+22     	; 0x19e34 <lif_find_file+0xae>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   19e1e:	89 2b       	or	r24, r25
   19e20:	31 f0       	breq	.+12     	; 0x19e2e <lif_find_file+0xa8>
   19e22:	be 01       	movw	r22, r28
   19e24:	c5 01       	movw	r24, r10
   19e26:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <strcasecmp>
   19e2a:	89 2b       	or	r24, r25
   19e2c:	31 f0       	breq	.+12     	; 0x19e3a <lif_find_file+0xb4>
            break;
        ++index;
   19e2e:	0f 5f       	subi	r16, 0xFF	; 255
   19e30:	1f 4f       	sbci	r17, 0xFF	; 255
   19e32:	e8 cf       	rjmp	.-48     	; 0x19e04 <lif_find_file+0x7e>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   19e34:	8f ef       	ldi	r24, 0xFF	; 255
   19e36:	9f ef       	ldi	r25, 0xFF	; 255
   19e38:	01 c0       	rjmp	.+2      	; 0x19e3c <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   19e3a:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   19e3c:	cd b7       	in	r28, 0x3d	; 61
   19e3e:	de b7       	in	r29, 0x3e	; 62
   19e40:	25 96       	adiw	r28, 0x05	; 5
   19e42:	ea e0       	ldi	r30, 0x0A	; 10
   19e44:	0c 94 e6 df 	jmp	0x1bfcc	; 0x1bfcc <__epilogue_restores__+0x10>

00019e48 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   19e48:	a5 e0       	ldi	r26, 0x05	; 5
   19e4a:	b0 e0       	ldi	r27, 0x00	; 0
   19e4c:	ea e2       	ldi	r30, 0x2A	; 42
   19e4e:	ff ec       	ldi	r31, 0xCF	; 207
   19e50:	0c 94 cc df 	jmp	0x1bf98	; 0x1bf98 <__prologue_saves__+0x14>
   19e54:	6b 01       	movw	r12, r22
   19e56:	7c 01       	movw	r14, r24
   19e58:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   19e5a:	20 e0       	ldi	r18, 0x00	; 0
   19e5c:	31 e0       	ldi	r19, 0x01	; 1
   19e5e:	40 e0       	ldi	r20, 0x00	; 0
   19e60:	50 e0       	ldi	r21, 0x00	; 0
   19e62:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
    if(!pos)
   19e66:	61 15       	cp	r22, r1
   19e68:	71 05       	cpc	r23, r1
   19e6a:	d1 f1       	breq	.+116    	; 0x19ee0 <lif_e010_pad_sector+0x98>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   19e6c:	c0 e0       	ldi	r28, 0x00	; 0
   19e6e:	d1 e0       	ldi	r29, 0x01	; 1
   19e70:	c6 1b       	sub	r28, r22
   19e72:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   19e74:	f8 01       	movw	r30, r16
   19e76:	8f ee       	ldi	r24, 0xEF	; 239
   19e78:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   19e7a:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   19e7c:	cf 01       	movw	r24, r30
   19e7e:	80 1b       	sub	r24, r16
   19e80:	91 0b       	sbc	r25, r17
   19e82:	8c 17       	cp	r24, r28
   19e84:	9d 07       	cpc	r25, r29
   19e86:	14 f4       	brge	.+4      	; 0x19e8c <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   19e88:	21 93       	st	Z+, r18
   19e8a:	f8 cf       	rjmp	.-16     	; 0x19e7c <lif_e010_pad_sector+0x34>
   19e8c:	1c 16       	cp	r1, r28
   19e8e:	1d 06       	cpc	r1, r29
   19e90:	14 f0       	brlt	.+4      	; 0x19e96 <lif_e010_pad_sector+0x4e>
   19e92:	c1 e0       	ldi	r28, 0x01	; 1
   19e94:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   19e96:	ce 01       	movw	r24, r28
   19e98:	0d 2e       	mov	r0, r29
   19e9a:	00 0c       	add	r0, r0
   19e9c:	aa 0b       	sbc	r26, r26
   19e9e:	bb 0b       	sbc	r27, r27
   19ea0:	bc 01       	movw	r22, r24
   19ea2:	cd 01       	movw	r24, r26
   19ea4:	6c 0d       	add	r22, r12
   19ea6:	7d 1d       	adc	r23, r13
   19ea8:	8e 1d       	adc	r24, r14
   19eaa:	9f 1d       	adc	r25, r15
   19eac:	20 e0       	ldi	r18, 0x00	; 0
   19eae:	31 e0       	ldi	r19, 0x01	; 1
   19eb0:	40 e0       	ldi	r20, 0x00	; 0
   19eb2:	50 e0       	ldi	r21, 0x00	; 0
   19eb4:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   19eb8:	61 15       	cp	r22, r1
   19eba:	71 05       	cpc	r23, r1
   19ebc:	a1 f0       	breq	.+40     	; 0x19ee6 <lif_e010_pad_sector+0x9e>
    {
        if(debuglevel & GPIB_PPR)
   19ebe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19ec2:	21 ff       	sbrs	r18, 1
   19ec4:	12 c0       	rjmp	.+36     	; 0x19eea <lif_e010_pad_sector+0xa2>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   19ec6:	ed b7       	in	r30, 0x3d	; 61
   19ec8:	fe b7       	in	r31, 0x3e	; 62
   19eca:	75 83       	std	Z+5, r23	; 0x05
   19ecc:	64 83       	std	Z+4, r22	; 0x04
   19ece:	88 ee       	ldi	r24, 0xE8	; 232
   19ed0:	94 e3       	ldi	r25, 0x34	; 52
   19ed2:	a0 e0       	ldi	r26, 0x00	; 0
   19ed4:	81 83       	std	Z+1, r24	; 0x01
   19ed6:	92 83       	std	Z+2, r25	; 0x02
   19ed8:	a3 83       	std	Z+3, r26	; 0x03
   19eda:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   19ede:	05 c0       	rjmp	.+10     	; 0x19eea <lif_e010_pad_sector+0xa2>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   19ee0:	80 e0       	ldi	r24, 0x00	; 0
   19ee2:	90 e0       	ldi	r25, 0x00	; 0
   19ee4:	04 c0       	rjmp	.+8      	; 0x19eee <lif_e010_pad_sector+0xa6>
   19ee6:	ce 01       	movw	r24, r28
   19ee8:	02 c0       	rjmp	.+4      	; 0x19eee <lif_e010_pad_sector+0xa6>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   19eea:	8f ef       	ldi	r24, 0xFF	; 255
   19eec:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   19eee:	cd b7       	in	r28, 0x3d	; 61
   19ef0:	de b7       	in	r29, 0x3e	; 62
   19ef2:	25 96       	adiw	r28, 0x05	; 5
   19ef4:	e8 e0       	ldi	r30, 0x08	; 8
   19ef6:	0c 94 e8 df 	jmp	0x1bfd0	; 0x1bfd0 <__epilogue_restores__+0x14>

00019efa <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   19efa:	a5 e0       	ldi	r26, 0x05	; 5
   19efc:	b0 e0       	ldi	r27, 0x00	; 0
   19efe:	e3 e8       	ldi	r30, 0x83	; 131
   19f00:	ff ec       	ldi	r31, 0xCF	; 207
   19f02:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
   19f06:	ec 01       	movw	r28, r24
   19f08:	4a 01       	movw	r8, r20
   19f0a:	5b 01       	movw	r10, r22
   19f0c:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   19f0e:	fc 01       	movw	r30, r24
   19f10:	01 90       	ld	r0, Z+
   19f12:	00 20       	and	r0, r0
   19f14:	e9 f7       	brne	.-6      	; 0x19f10 <lif_ascii_string_to_e010+0x16>
   19f16:	31 97       	sbiw	r30, 0x01	; 1
   19f18:	6f 01       	movw	r12, r30
   19f1a:	c8 1a       	sub	r12, r24
   19f1c:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   19f1e:	41 2c       	mov	r4, r1
   19f20:	51 2c       	mov	r5, r1
   19f22:	32 01       	movw	r6, r4
   19f24:	53 94       	inc	r5
   19f26:	cb 01       	movw	r24, r22
   19f28:	ba 01       	movw	r22, r20
   19f2a:	a3 01       	movw	r20, r6
   19f2c:	92 01       	movw	r18, r4
   19f2e:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
   19f32:	21 2c       	mov	r2, r1
   19f34:	33 24       	eor	r3, r3
   19f36:	33 94       	inc	r3
   19f38:	c1 01       	movw	r24, r2
   19f3a:	86 1b       	sub	r24, r22
   19f3c:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   19f3e:	86 30       	cpi	r24, 0x06	; 6
   19f40:	91 05       	cpc	r25, r1
   19f42:	20 f0       	brcs	.+8      	; 0x19f4c <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   19f44:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   19f46:	00 e0       	ldi	r16, 0x00	; 0
   19f48:	10 e0       	ldi	r17, 0x00	; 0
   19f4a:	17 c0       	rjmp	.+46     	; 0x19f7a <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   19f4c:	a7 01       	movw	r20, r14
   19f4e:	c5 01       	movw	r24, r10
   19f50:	b4 01       	movw	r22, r8
   19f52:	7a df       	rcall	.-268    	; 0x19e48 <lif_e010_pad_sector>
   19f54:	8c 01       	movw	r16, r24
        if(ind < 0)
   19f56:	97 fd       	sbrc	r25, 7
   19f58:	81 c0       	rjmp	.+258    	; 0x1a05c <lif_ascii_string_to_e010+0x162>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   19f5a:	09 2e       	mov	r0, r25
   19f5c:	00 0c       	add	r0, r0
   19f5e:	aa 0b       	sbc	r26, r26
   19f60:	bb 0b       	sbc	r27, r27
   19f62:	bc 01       	movw	r22, r24
   19f64:	cd 01       	movw	r24, r26
   19f66:	68 0d       	add	r22, r8
   19f68:	79 1d       	adc	r23, r9
   19f6a:	8a 1d       	adc	r24, r10
   19f6c:	9b 1d       	adc	r25, r11
   19f6e:	a3 01       	movw	r20, r6
   19f70:	92 01       	movw	r18, r4
   19f72:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
   19f76:	26 1a       	sub	r2, r22
   19f78:	37 0a       	sbc	r3, r23
   19f7a:	f7 01       	movw	r30, r14
   19f7c:	e0 0f       	add	r30, r16
   19f7e:	f1 1f       	adc	r31, r17
   19f80:	0d 5f       	subi	r16, 0xFD	; 253
   19f82:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   19f84:	c6 01       	movw	r24, r12
   19f86:	02 96       	adiw	r24, 0x02	; 2
   19f88:	82 15       	cp	r24, r2
   19f8a:	93 05       	cpc	r25, r3
   19f8c:	84 f4       	brge	.+32     	; 0x19fae <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   19f8e:	8f ed       	ldi	r24, 0xDF	; 223
   19f90:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   19f92:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   19f94:	d2 82       	std	Z+2, r13	; 0x02
   19f96:	f7 01       	movw	r30, r14
   19f98:	e0 0f       	add	r30, r16
   19f9a:	f1 1f       	adc	r31, r17
   19f9c:	cf 01       	movw	r24, r30
   19f9e:	8e 19       	sub	r24, r14
   19fa0:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   19fa2:	29 91       	ld	r18, Y+
   19fa4:	22 23       	and	r18, r18
   19fa6:	09 f4       	brne	.+2      	; 0x19faa <lif_ascii_string_to_e010+0xb0>
   19fa8:	59 c0       	rjmp	.+178    	; 0x1a05c <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   19faa:	21 93       	st	Z+, r18
   19fac:	f7 cf       	rjmp	.-18     	; 0x19f9c <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   19fae:	8f ec       	ldi	r24, 0xCF	; 207
   19fb0:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   19fb2:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   19fb4:	d2 82       	std	Z+2, r13	; 0x02
   19fb6:	d7 01       	movw	r26, r14
   19fb8:	a0 0f       	add	r26, r16
   19fba:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   19fbc:	fe 01       	movw	r30, r28
   19fbe:	81 91       	ld	r24, Z+
   19fc0:	81 11       	cpse	r24, r1
   19fc2:	0e c0       	rjmp	.+28     	; 0x19fe0 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   19fc4:	c8 01       	movw	r24, r16
   19fc6:	01 2e       	mov	r0, r17
   19fc8:	00 0c       	add	r0, r0
   19fca:	aa 0b       	sbc	r26, r26
   19fcc:	bb 0b       	sbc	r27, r27
   19fce:	bc 01       	movw	r22, r24
   19fd0:	cd 01       	movw	r24, r26
   19fd2:	68 0d       	add	r22, r8
   19fd4:	79 1d       	adc	r23, r9
   19fd6:	8a 1d       	adc	r24, r10
   19fd8:	9b 1d       	adc	r25, r11
   19fda:	61 11       	cpse	r22, r1
   19fdc:	09 c0       	rjmp	.+18     	; 0x19ff0 <lif_ascii_string_to_e010+0xf6>
   19fde:	1f c0       	rjmp	.+62     	; 0x1a01e <lif_ascii_string_to_e010+0x124>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   19fe0:	02 15       	cp	r16, r2
   19fe2:	13 05       	cpc	r17, r3
   19fe4:	7c f7       	brge	.-34     	; 0x19fc4 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   19fe6:	0f 5f       	subi	r16, 0xFF	; 255
   19fe8:	1f 4f       	sbci	r17, 0xFF	; 255
   19fea:	8d 93       	st	X+, r24
   19fec:	ef 01       	movw	r28, r30
   19fee:	e6 cf       	rjmp	.-52     	; 0x19fbc <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
   19ff0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19ff4:	21 ff       	sbrs	r18, 1
   19ff6:	30 c0       	rjmp	.+96     	; 0x1a058 <lif_ascii_string_to_e010+0x15e>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   19ff8:	20 e0       	ldi	r18, 0x00	; 0
   19ffa:	31 e0       	ldi	r19, 0x01	; 1
   19ffc:	40 e0       	ldi	r20, 0x00	; 0
   19ffe:	50 e0       	ldi	r21, 0x00	; 0
   1a000:	0e 94 77 df 	call	0x1beee	; 0x1beee <__divmodsi4>
   1a004:	ed b7       	in	r30, 0x3d	; 61
   1a006:	fe b7       	in	r31, 0x3e	; 62
   1a008:	75 83       	std	Z+5, r23	; 0x05
   1a00a:	64 83       	std	Z+4, r22	; 0x04
   1a00c:	84 ec       	ldi	r24, 0xC4	; 196
   1a00e:	94 e3       	ldi	r25, 0x34	; 52
   1a010:	a0 e0       	ldi	r26, 0x00	; 0
   1a012:	81 83       	std	Z+1, r24	; 0x01
   1a014:	92 83       	std	Z+2, r25	; 0x02
   1a016:	a3 83       	std	Z+3, r26	; 0x03
   1a018:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1a01c:	1d c0       	rjmp	.+58     	; 0x1a058 <lif_ascii_string_to_e010+0x15e>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a01e:	fe 01       	movw	r30, r28
   1a020:	01 90       	ld	r0, Z+
   1a022:	00 20       	and	r0, r0
   1a024:	e9 f7       	brne	.-6      	; 0x1a020 <lif_ascii_string_to_e010+0x126>
   1a026:	31 97       	sbiw	r30, 0x01	; 1
   1a028:	9f 01       	movw	r18, r30
   1a02a:	2c 1b       	sub	r18, r28
   1a02c:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a02e:	d7 01       	movw	r26, r14
   1a030:	a0 0f       	add	r26, r16
   1a032:	b1 1f       	adc	r27, r17
   1a034:	8f e6       	ldi	r24, 0x6F	; 111
   1a036:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a038:	fd 01       	movw	r30, r26
   1a03a:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a03c:	32 83       	std	Z+2, r19	; 0x02
   1a03e:	0d 5f       	subi	r16, 0xFD	; 253
   1a040:	1f 4f       	sbci	r17, 0xFF	; 255
   1a042:	f7 01       	movw	r30, r14
   1a044:	e0 0f       	add	r30, r16
   1a046:	f1 1f       	adc	r31, r17
   1a048:	cf 01       	movw	r24, r30
   1a04a:	8e 19       	sub	r24, r14
   1a04c:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a04e:	29 91       	ld	r18, Y+
   1a050:	22 23       	and	r18, r18
   1a052:	21 f0       	breq	.+8      	; 0x1a05c <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a054:	21 93       	st	Z+, r18
   1a056:	f8 cf       	rjmp	.-16     	; 0x1a048 <lif_ascii_string_to_e010+0x14e>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a058:	8f ef       	ldi	r24, 0xFF	; 255
   1a05a:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a05c:	cd b7       	in	r28, 0x3d	; 61
   1a05e:	de b7       	in	r29, 0x3e	; 62
   1a060:	25 96       	adiw	r28, 0x05	; 5
   1a062:	e2 e1       	ldi	r30, 0x12	; 18
   1a064:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0001a068 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a068:	ad e0       	ldi	r26, 0x0D	; 13
   1a06a:	b3 e0       	ldi	r27, 0x03	; 3
   1a06c:	ea e3       	ldi	r30, 0x3A	; 58
   1a06e:	f0 ed       	ldi	r31, 0xD0	; 208
   1a070:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
   1a074:	5c 01       	movw	r10, r24
   1a076:	2a 01       	movw	r4, r20
   1a078:	3b 01       	movw	r6, r22
   1a07a:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a07c:	69 ef       	ldi	r22, 0xF9	; 249
   1a07e:	78 e0       	ldi	r23, 0x08	; 8
   1a080:	0e 94 09 bc 	call	0x17812	; 0x17812 <lif_open>
   1a084:	c7 5f       	subi	r28, 0xF7	; 247
   1a086:	dc 4f       	sbci	r29, 0xFC	; 252
   1a088:	99 83       	std	Y+1, r25	; 0x01
   1a08a:	88 83       	st	Y, r24
   1a08c:	c9 50       	subi	r28, 0x09	; 9
   1a08e:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a090:	89 2b       	or	r24, r25
   1a092:	09 f4       	brne	.+2      	; 0x1a096 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a094:	63 c0       	rjmp	.+198    	; 0x1a15c <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a096:	81 2c       	mov	r8, r1
   1a098:	91 2c       	mov	r9, r1
   1a09a:	c1 2c       	mov	r12, r1
   1a09c:	d1 2c       	mov	r13, r1
   1a09e:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a0a0:	86 eb       	ldi	r24, 0xB6	; 182
   1a0a2:	94 e3       	ldi	r25, 0x34	; 52
   1a0a4:	9c 01       	movw	r18, r24
   1a0a6:	40 e0       	ldi	r20, 0x00	; 0
   1a0a8:	c5 5f       	subi	r28, 0xF5	; 245
   1a0aa:	dc 4f       	sbci	r29, 0xFC	; 252
   1a0ac:	28 83       	st	Y, r18
   1a0ae:	39 83       	std	Y+1, r19	; 0x01
   1a0b0:	4a 83       	std	Y+2, r20	; 0x02
   1a0b2:	cb 50       	subi	r28, 0x0B	; 11
   1a0b4:	d3 40       	sbci	r29, 0x03	; 3
   1a0b6:	14 c0       	rjmp	.+40     	; 0x1a0e0 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a0b8:	c1 01       	movw	r24, r2
   1a0ba:	03 2c       	mov	r0, r3
   1a0bc:	00 0c       	add	r0, r0
   1a0be:	aa 0b       	sbc	r26, r26
   1a0c0:	bb 0b       	sbc	r27, r27
   1a0c2:	48 0e       	add	r4, r24
   1a0c4:	59 1e       	adc	r5, r25
   1a0c6:	6a 1e       	adc	r6, r26
   1a0c8:	7b 1e       	adc	r7, r27
        bytes += size;
   1a0ca:	c8 0e       	add	r12, r24
   1a0cc:	d9 1e       	adc	r13, r25
   1a0ce:	ea 1e       	adc	r14, r26
   1a0d0:	fb 1e       	adc	r15, r27
        count += size;
   1a0d2:	82 0c       	add	r8, r2
   1a0d4:	93 1c       	adc	r9, r3

        if(count > 256)
   1a0d6:	31 e0       	ldi	r19, 0x01	; 1
   1a0d8:	83 16       	cp	r8, r19
   1a0da:	93 06       	cpc	r9, r19
   1a0dc:	0c f0       	brlt	.+2      	; 0x1a0e0 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a0de:	43 c0       	rjmp	.+134    	; 0x1a166 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a0e0:	c7 5f       	subi	r28, 0xF7	; 247
   1a0e2:	dc 4f       	sbci	r29, 0xFC	; 252
   1a0e4:	48 81       	ld	r20, Y
   1a0e6:	59 81       	ldd	r21, Y+1	; 0x01
   1a0e8:	c9 50       	subi	r28, 0x09	; 9
   1a0ea:	d3 40       	sbci	r29, 0x03	; 3
   1a0ec:	6d ef       	ldi	r22, 0xFD	; 253
   1a0ee:	70 e0       	ldi	r23, 0x00	; 0
   1a0f0:	ce 01       	movw	r24, r28
   1a0f2:	88 5f       	subi	r24, 0xF8	; 248
   1a0f4:	9d 4f       	sbci	r25, 0xFD	; 253
   1a0f6:	0e 94 ce 73 	call	0xe79c	; 0xe79c <fgets>
   1a0fa:	89 2b       	or	r24, r25
   1a0fc:	09 f4       	brne	.+2      	; 0x1a100 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a0fe:	4b c0       	rjmp	.+150    	; 0x1a196 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a100:	ce 01       	movw	r24, r28
   1a102:	88 5f       	subi	r24, 0xF8	; 248
   1a104:	9d 4f       	sbci	r25, 0xFD	; 253
   1a106:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a10a:	66 e7       	ldi	r22, 0x76	; 118
   1a10c:	76 e1       	ldi	r23, 0x16	; 22
   1a10e:	ce 01       	movw	r24, r28
   1a110:	88 5f       	subi	r24, 0xF8	; 248
   1a112:	9d 4f       	sbci	r25, 0xFD	; 253
   1a114:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a118:	9e 01       	movw	r18, r28
   1a11a:	28 5f       	subi	r18, 0xF8	; 248
   1a11c:	3f 4f       	sbci	r19, 0xFF	; 255
   1a11e:	b3 01       	movw	r22, r6
   1a120:	a2 01       	movw	r20, r4
   1a122:	ce 01       	movw	r24, r28
   1a124:	88 5f       	subi	r24, 0xF8	; 248
   1a126:	9d 4f       	sbci	r25, 0xFD	; 253
   1a128:	e8 de       	rcall	.-560    	; 0x19efa <lif_ascii_string_to_e010>
   1a12a:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a12c:	a1 14       	cp	r10, r1
   1a12e:	b1 04       	cpc	r11, r1
   1a130:	19 f2       	breq	.-122    	; 0x1a0b8 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a132:	8c 01       	movw	r16, r24
   1a134:	a3 01       	movw	r20, r6
   1a136:	92 01       	movw	r18, r4
   1a138:	be 01       	movw	r22, r28
   1a13a:	68 5f       	subi	r22, 0xF8	; 248
   1a13c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a13e:	c5 01       	movw	r24, r10
   1a140:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
            if(len < size)
   1a144:	82 15       	cp	r24, r2
   1a146:	93 05       	cpc	r25, r3
   1a148:	0c f0       	brlt	.+2      	; 0x1a14c <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a14a:	b6 cf       	rjmp	.-148    	; 0x1a0b8 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a14c:	c7 5f       	subi	r28, 0xF7	; 247
   1a14e:	dc 4f       	sbci	r29, 0xFC	; 252
   1a150:	88 81       	ld	r24, Y
   1a152:	99 81       	ldd	r25, Y+1	; 0x01
   1a154:	c9 50       	subi	r28, 0x09	; 9
   1a156:	d3 40       	sbci	r29, 0x03	; 3
   1a158:	0e 94 60 7a 	call	0xf4c0	; 0xf4c0 <fclose>
                return(-1);
   1a15c:	6f ef       	ldi	r22, 0xFF	; 255
   1a15e:	7f ef       	ldi	r23, 0xFF	; 255
   1a160:	8f ef       	ldi	r24, 0xFF	; 255
   1a162:	9f ef       	ldi	r25, 0xFF	; 255
   1a164:	84 c0       	rjmp	.+264    	; 0x1a26e <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a166:	a1 14       	cp	r10, r1
   1a168:	b1 04       	cpc	r11, r1
   1a16a:	91 f0       	breq	.+36     	; 0x1a190 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a16c:	ed b7       	in	r30, 0x3d	; 61
   1a16e:	fe b7       	in	r31, 0x3e	; 62
   1a170:	c4 82       	std	Z+4, r12	; 0x04
   1a172:	d5 82       	std	Z+5, r13	; 0x05
   1a174:	e6 82       	std	Z+6, r14	; 0x06
   1a176:	f7 82       	std	Z+7, r15	; 0x07
   1a178:	c5 5f       	subi	r28, 0xF5	; 245
   1a17a:	dc 4f       	sbci	r29, 0xFC	; 252
   1a17c:	28 81       	ld	r18, Y
   1a17e:	39 81       	ldd	r19, Y+1	; 0x01
   1a180:	4a 81       	ldd	r20, Y+2	; 0x02
   1a182:	cb 50       	subi	r28, 0x0B	; 11
   1a184:	d3 40       	sbci	r29, 0x03	; 3
   1a186:	21 83       	std	Z+1, r18	; 0x01
   1a188:	32 83       	std	Z+2, r19	; 0x02
   1a18a:	43 83       	std	Z+3, r20	; 0x03
   1a18c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a190:	81 2c       	mov	r8, r1
   1a192:	91 2c       	mov	r9, r1
   1a194:	a5 cf       	rjmp	.-182    	; 0x1a0e0 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a196:	c7 5f       	subi	r28, 0xF7	; 247
   1a198:	dc 4f       	sbci	r29, 0xFC	; 252
   1a19a:	88 81       	ld	r24, Y
   1a19c:	99 81       	ldd	r25, Y+1	; 0x01
   1a19e:	c9 50       	subi	r28, 0x09	; 9
   1a1a0:	d3 40       	sbci	r29, 0x03	; 3
   1a1a2:	0e 94 60 7a 	call	0xf4c0	; 0xf4c0 <fclose>

// Write EOF
    str[0] = 0;
   1a1a6:	c8 5f       	subi	r28, 0xF8	; 248
   1a1a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1a1aa:	18 82       	st	Y, r1
   1a1ac:	c8 50       	subi	r28, 0x08	; 8
   1a1ae:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a1b0:	9e 01       	movw	r18, r28
   1a1b2:	28 5f       	subi	r18, 0xF8	; 248
   1a1b4:	3f 4f       	sbci	r19, 0xFF	; 255
   1a1b6:	b3 01       	movw	r22, r6
   1a1b8:	a2 01       	movw	r20, r4
   1a1ba:	ce 01       	movw	r24, r28
   1a1bc:	88 5f       	subi	r24, 0xF8	; 248
   1a1be:	9d 4f       	sbci	r25, 0xFD	; 253
   1a1c0:	9c de       	rcall	.-712    	; 0x19efa <lif_ascii_string_to_e010>
   1a1c2:	4c 01       	movw	r8, r24

    if(LIF)
   1a1c4:	a1 14       	cp	r10, r1
   1a1c6:	b1 04       	cpc	r11, r1
   1a1c8:	d1 f4       	brne	.+52     	; 0x1a1fe <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a1ca:	c4 01       	movw	r24, r8
   1a1cc:	09 2c       	mov	r0, r9
   1a1ce:	00 0c       	add	r0, r0
   1a1d0:	aa 0b       	sbc	r26, r26
   1a1d2:	bb 0b       	sbc	r27, r27
   1a1d4:	c8 0e       	add	r12, r24
   1a1d6:	d9 1e       	adc	r13, r25
   1a1d8:	ea 1e       	adc	r14, r26
   1a1da:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a1dc:	12 01       	movw	r2, r4
   1a1de:	23 01       	movw	r4, r6
   1a1e0:	28 0e       	add	r2, r24
   1a1e2:	39 1e       	adc	r3, r25
   1a1e4:	4a 1e       	adc	r4, r26
   1a1e6:	5b 1e       	adc	r5, r27
   1a1e8:	ae 01       	movw	r20, r28
   1a1ea:	48 5f       	subi	r20, 0xF8	; 248
   1a1ec:	5f 4f       	sbci	r21, 0xFF	; 255
   1a1ee:	c2 01       	movw	r24, r4
   1a1f0:	b1 01       	movw	r22, r2
   1a1f2:	2a de       	rcall	.-940    	; 0x19e48 <lif_e010_pad_sector>
   1a1f4:	3c 01       	movw	r6, r24
    if(LIF)
   1a1f6:	a1 14       	cp	r10, r1
   1a1f8:	b1 04       	cpc	r11, r1
   1a1fa:	e1 f4       	brne	.+56     	; 0x1a234 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a1fc:	36 c0       	rjmp	.+108    	; 0x1a26a <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a1fe:	ed b7       	in	r30, 0x3d	; 61
   1a200:	fe b7       	in	r31, 0x3e	; 62
   1a202:	c4 82       	std	Z+4, r12	; 0x04
   1a204:	d5 82       	std	Z+5, r13	; 0x05
   1a206:	e6 82       	std	Z+6, r14	; 0x06
   1a208:	f7 82       	std	Z+7, r15	; 0x07
   1a20a:	88 ea       	ldi	r24, 0xA8	; 168
   1a20c:	94 e3       	ldi	r25, 0x34	; 52
   1a20e:	a0 e0       	ldi	r26, 0x00	; 0
   1a210:	81 83       	std	Z+1, r24	; 0x01
   1a212:	92 83       	std	Z+2, r25	; 0x02
   1a214:	a3 83       	std	Z+3, r26	; 0x03
   1a216:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a21a:	84 01       	movw	r16, r8
   1a21c:	a3 01       	movw	r20, r6
   1a21e:	92 01       	movw	r18, r4
   1a220:	be 01       	movw	r22, r28
   1a222:	68 5f       	subi	r22, 0xF8	; 248
   1a224:	7f 4f       	sbci	r23, 0xFF	; 255
   1a226:	c5 01       	movw	r24, r10
   1a228:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
        if(len < size)
   1a22c:	88 15       	cp	r24, r8
   1a22e:	99 05       	cpc	r25, r9
   1a230:	64 f6       	brge	.-104    	; 0x1a1ca <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a232:	94 cf       	rjmp	.-216    	; 0x1a15c <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a234:	8c 01       	movw	r16, r24
   1a236:	a2 01       	movw	r20, r4
   1a238:	91 01       	movw	r18, r2
   1a23a:	be 01       	movw	r22, r28
   1a23c:	68 5f       	subi	r22, 0xF8	; 248
   1a23e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a240:	c5 01       	movw	r24, r10
   1a242:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
        if(len < size)
   1a246:	86 15       	cp	r24, r6
   1a248:	97 05       	cpc	r25, r7
   1a24a:	0c f4       	brge	.+2      	; 0x1a24e <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a24c:	87 cf       	rjmp	.-242    	; 0x1a15c <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a24e:	ed b7       	in	r30, 0x3d	; 61
   1a250:	fe b7       	in	r31, 0x3e	; 62
   1a252:	c4 82       	std	Z+4, r12	; 0x04
   1a254:	d5 82       	std	Z+5, r13	; 0x05
   1a256:	e6 82       	std	Z+6, r14	; 0x06
   1a258:	f7 82       	std	Z+7, r15	; 0x07
   1a25a:	8a e9       	ldi	r24, 0x9A	; 154
   1a25c:	94 e3       	ldi	r25, 0x34	; 52
   1a25e:	a0 e0       	ldi	r26, 0x00	; 0
   1a260:	81 83       	std	Z+1, r24	; 0x01
   1a262:	92 83       	std	Z+2, r25	; 0x02
   1a264:	a3 83       	std	Z+3, r26	; 0x03
   1a266:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    return(bytes);
   1a26a:	b6 01       	movw	r22, r12
   1a26c:	c7 01       	movw	r24, r14
}
   1a26e:	c3 5f       	subi	r28, 0xF3	; 243
   1a270:	dc 4f       	sbci	r29, 0xFC	; 252
   1a272:	e2 e1       	ldi	r30, 0x12	; 18
   1a274:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0001a278 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a278:	ab e3       	ldi	r26, 0x3B	; 59
   1a27a:	b0 e0       	ldi	r27, 0x00	; 0
   1a27c:	e2 e4       	ldi	r30, 0x42	; 66
   1a27e:	f1 ed       	ldi	r31, 0xD1	; 209
   1a280:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
   1a284:	6c 01       	movw	r12, r24
   1a286:	1b 01       	movw	r2, r22
   1a288:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a28a:	fc 01       	movw	r30, r24
   1a28c:	80 81       	ld	r24, Z
   1a28e:	81 11       	cpse	r24, r1
   1a290:	03 c0       	rjmp	.+6      	; 0x1a298 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a292:	87 e6       	ldi	r24, 0x67	; 103
   1a294:	94 e3       	ldi	r25, 0x34	; 52
   1a296:	1a c0       	rjmp	.+52     	; 0x1a2cc <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a298:	fb 01       	movw	r30, r22
   1a29a:	80 81       	ld	r24, Z
   1a29c:	81 11       	cpse	r24, r1
   1a29e:	03 c0       	rjmp	.+6      	; 0x1a2a6 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a2a0:	89 e3       	ldi	r24, 0x39	; 57
   1a2a2:	94 e3       	ldi	r25, 0x34	; 52
   1a2a4:	13 c0       	rjmp	.+38     	; 0x1a2cc <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a2a6:	fa 01       	movw	r30, r20
   1a2a8:	80 81       	ld	r24, Z
   1a2aa:	81 11       	cpse	r24, r1
   1a2ac:	03 c0       	rjmp	.+6      	; 0x1a2b4 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a2ae:	8a e0       	ldi	r24, 0x0A	; 10
   1a2b0:	94 e3       	ldi	r25, 0x34	; 52
   1a2b2:	0c c0       	rjmp	.+24     	; 0x1a2cc <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a2b4:	be 01       	movw	r22, r28
   1a2b6:	66 5f       	subi	r22, 0xF6	; 246
   1a2b8:	7f 4f       	sbci	r23, 0xFF	; 255
   1a2ba:	ca 01       	movw	r24, r20
   1a2bc:	0e 94 33 bc 	call	0x17866	; 0x17866 <lif_stat>
   1a2c0:	9b af       	std	Y+59, r25	; 0x3b
   1a2c2:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a2c4:	89 2b       	or	r24, r25
   1a2c6:	59 f4       	brne	.+22     	; 0x1a2de <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a2c8:	8a ed       	ldi	r24, 0xDA	; 218
   1a2ca:	93 e3       	ldi	r25, 0x33	; 51
   1a2cc:	a0 e0       	ldi	r26, 0x00	; 0
   1a2ce:	ed b7       	in	r30, 0x3d	; 61
   1a2d0:	fe b7       	in	r31, 0x3e	; 62
   1a2d2:	81 83       	std	Z+1, r24	; 0x01
   1a2d4:	92 83       	std	Z+2, r25	; 0x02
   1a2d6:	a3 83       	std	Z+3, r26	; 0x03
   1a2d8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1a2dc:	01 c1       	rjmp	.+514    	; 0x1a4e0 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a2de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a2e2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a2e6:	92 ff       	sbrs	r25, 2
   1a2e8:	10 c0       	rjmp	.+32     	; 0x1a30a <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a2ea:	ed b7       	in	r30, 0x3d	; 61
   1a2ec:	fe b7       	in	r31, 0x3e	; 62
   1a2ee:	f1 86       	std	Z+9, r15	; 0x09
   1a2f0:	e0 86       	std	Z+8, r14	; 0x08
   1a2f2:	37 82       	std	Z+7, r3	; 0x07
   1a2f4:	26 82       	std	Z+6, r2	; 0x06
   1a2f6:	d5 82       	std	Z+5, r13	; 0x05
   1a2f8:	c4 82       	std	Z+4, r12	; 0x04
   1a2fa:	8b ea       	ldi	r24, 0xAB	; 171
   1a2fc:	93 e3       	ldi	r25, 0x33	; 51
   1a2fe:	a0 e0       	ldi	r26, 0x00	; 0
   1a300:	81 83       	std	Z+1, r24	; 0x01
   1a302:	92 83       	std	Z+2, r25	; 0x02
   1a304:	a3 83       	std	Z+3, r26	; 0x03
   1a306:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a30a:	97 01       	movw	r18, r14
   1a30c:	40 e0       	ldi	r20, 0x00	; 0
   1a30e:	50 e0       	ldi	r21, 0x00	; 0
   1a310:	ba 01       	movw	r22, r20
   1a312:	80 e0       	ldi	r24, 0x00	; 0
   1a314:	90 e0       	ldi	r25, 0x00	; 0
   1a316:	a8 de       	rcall	.-688    	; 0x1a068 <lif_add_ascii_file_as_e010_wrapper>
   1a318:	4b 01       	movw	r8, r22
   1a31a:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a31c:	47 2e       	mov	r4, r23
   1a31e:	58 2e       	mov	r5, r24
   1a320:	69 2e       	mov	r6, r25
   1a322:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a324:	66 23       	and	r22, r22
   1a326:	29 f0       	breq	.+10     	; 0x1a332 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a328:	ff ef       	ldi	r31, 0xFF	; 255
   1a32a:	4f 1a       	sub	r4, r31
   1a32c:	5f 0a       	sbc	r5, r31
   1a32e:	6f 0a       	sbc	r6, r31
   1a330:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a332:	6c ef       	ldi	r22, 0xFC	; 252
   1a334:	78 e0       	ldi	r23, 0x08	; 8
   1a336:	c6 01       	movw	r24, r12
   1a338:	57 da       	rcall	.-2898   	; 0x197e8 <lif_open_volume>
   1a33a:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a33c:	00 97       	sbiw	r24, 0x00	; 0
   1a33e:	09 f4       	brne	.+2      	; 0x1a342 <lif_add_ascii_file_as_e010+0xca>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a340:	cf c0       	rjmp	.+414    	; 0x1a4e0 <lif_add_ascii_file_as_e010+0x268>
   1a342:	b3 01       	movw	r22, r6
   1a344:	a2 01       	movw	r20, r4
   1a346:	f0 d8       	rcall	.-3616   	; 0x19528 <lif_newdir>
    if(index == -1)
   1a348:	3c 01       	movw	r6, r24
   1a34a:	8f ef       	ldi	r24, 0xFF	; 255
   1a34c:	68 16       	cp	r6, r24
   1a34e:	78 06       	cpc	r7, r24
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a350:	79 f4       	brne	.+30     	; 0x1a370 <lif_add_ascii_file_as_e010+0xf8>
   1a352:	ed b7       	in	r30, 0x3d	; 61
   1a354:	fe b7       	in	r31, 0x3e	; 62
   1a356:	f7 82       	std	Z+7, r15	; 0x07
   1a358:	e6 82       	std	Z+6, r14	; 0x06
   1a35a:	d5 82       	std	Z+5, r13	; 0x05
   1a35c:	c4 82       	std	Z+4, r12	; 0x04
   1a35e:	8b e7       	ldi	r24, 0x7B	; 123
   1a360:	93 e3       	ldi	r25, 0x33	; 51
   1a362:	a0 e0       	ldi	r26, 0x00	; 0
   1a364:	81 83       	std	Z+1, r24	; 0x01
   1a366:	92 83       	std	Z+2, r25	; 0x02
   1a368:	a3 83       	std	Z+3, r26	; 0x03
   1a36a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a36e:	a0 c0       	rjmp	.+320    	; 0x1a4b0 <lif_add_ascii_file_as_e010+0x238>
   1a370:	68 01       	movw	r12, r16
   1a372:	ff e4       	ldi	r31, 0x4F	; 79
   1a374:	cf 0e       	add	r12, r31
   1a376:	d1 1c       	adc	r13, r1
   1a378:	4a e0       	ldi	r20, 0x0A	; 10
   1a37a:	50 e0       	ldi	r21, 0x00	; 0
   1a37c:	b1 01       	movw	r22, r2
   1a37e:	c6 01       	movw	r24, r12
   1a380:	0e 94 de bd 	call	0x17bbc	; 0x17bbc <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a384:	80 e1       	ldi	r24, 0x10	; 16
   1a386:	90 ee       	ldi	r25, 0xE0	; 224
   1a388:	f8 01       	movw	r30, r16
   1a38a:	e6 5a       	subi	r30, 0xA6	; 166
   1a38c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a38e:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a390:	80 83       	st	Z, r24
   1a392:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a394:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a396:	60 a5       	ldd	r22, Z+40	; 0x28
   1a398:	71 a5       	ldd	r23, Z+41	; 0x29
   1a39a:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a39c:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a39e:	a8 01       	movw	r20, r16
   1a3a0:	4c 59       	subi	r20, 0x9C	; 156
   1a3a2:	5f 4f       	sbci	r21, 0xFF	; 255
   1a3a4:	0e 94 03 c0 	call	0x18006	; 0x18006 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a3a8:	81 e0       	ldi	r24, 0x01	; 1
   1a3aa:	90 e8       	ldi	r25, 0x80	; 128
   1a3ac:	f8 01       	movw	r30, r16
   1a3ae:	e6 59       	subi	r30, 0x96	; 150
   1a3b0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a3b2:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                   // 28
   1a3b4:	80 83       	st	Z, r24
   1a3b6:	32 96       	adiw	r30, 0x02	; 2
   1a3b8:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a3ba:	80 82       	st	Z, r8
   1a3bc:	80 e0       	ldi	r24, 0x00	; 0
   1a3be:	91 e0       	ldi	r25, 0x01	; 1
   1a3c0:	32 96       	adiw	r30, 0x02	; 2
   1a3c2:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a3c4:	80 83       	st	Z, r24
   1a3c6:	58 01       	movw	r10, r16
   1a3c8:	fc e5       	ldi	r31, 0x5C	; 92
   1a3ca:	af 0e       	add	r10, r31
   1a3cc:	b1 1c       	adc	r11, r1
   1a3ce:	f5 01       	movw	r30, r10
   1a3d0:	80 81       	ld	r24, Z
   1a3d2:	91 81       	ldd	r25, Z+1	; 0x01
   1a3d4:	a2 81       	ldd	r26, Z+2	; 0x02
   1a3d6:	b3 81       	ldd	r27, Z+3	; 0x03
   1a3d8:	22 24       	eor	r2, r2
   1a3da:	38 2e       	mov	r3, r24
   1a3dc:	49 2e       	mov	r4, r25

    if(debuglevel & LIF_DEBUG)
   1a3de:	5a 2e       	mov	r5, r26
   1a3e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a3e4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3e8:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a3ea:	05 c0       	rjmp	.+10     	; 0x1a3f6 <lif_add_ascii_file_as_e010+0x17e>
   1a3ec:	68 e7       	ldi	r22, 0x78	; 120
   1a3ee:	76 e1       	ldi	r23, 0x16	; 22
   1a3f0:	c8 01       	movw	r24, r16
   1a3f2:	0e 94 ef c0 	call	0x181de	; 0x181de <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a3f6:	97 01       	movw	r18, r14
   1a3f8:	b2 01       	movw	r22, r4
   1a3fa:	a1 01       	movw	r20, r2
   1a3fc:	c8 01       	movw	r24, r16
   1a3fe:	34 de       	rcall	.-920    	; 0x1a068 <lif_add_ascii_file_as_e010_wrapper>
   1a400:	4b 01       	movw	r8, r22

    if(debuglevel & LIF_DEBUG)
   1a402:	7c 01       	movw	r14, r24
   1a404:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a408:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a40c:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1a40e:	4a c0       	rjmp	.+148    	; 0x1a4a4 <lif_add_ascii_file_as_e010+0x22c>
   1a410:	84 e5       	ldi	r24, 0x54	; 84
   1a412:	93 e3       	ldi	r25, 0x33	; 51
   1a414:	a0 e0       	ldi	r26, 0x00	; 0
   1a416:	ed b7       	in	r30, 0x3d	; 61
   1a418:	fe b7       	in	r31, 0x3e	; 62
   1a41a:	81 83       	std	Z+1, r24	; 0x01
   1a41c:	92 83       	std	Z+2, r25	; 0x02
   1a41e:	a3 83       	std	Z+3, r26	; 0x03
   1a420:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a424:	ed b7       	in	r30, 0x3d	; 61
   1a426:	fe b7       	in	r31, 0x3e	; 62
   1a428:	d5 82       	std	Z+5, r13	; 0x05
   1a42a:	c4 82       	std	Z+4, r12	; 0x04
   1a42c:	8d e3       	ldi	r24, 0x3D	; 61
   1a42e:	93 e3       	ldi	r25, 0x33	; 51
   1a430:	a0 e0       	ldi	r26, 0x00	; 0
   1a432:	81 83       	std	Z+1, r24	; 0x01
   1a434:	92 83       	std	Z+2, r25	; 0x02
   1a436:	a3 83       	std	Z+3, r26	; 0x03
   1a438:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a43c:	ed b7       	in	r30, 0x3d	; 61
   1a43e:	fe b7       	in	r31, 0x3e	; 62
   1a440:	75 82       	std	Z+5, r7	; 0x05
   1a442:	64 82       	std	Z+4, r6	; 0x04
   1a444:	86 e2       	ldi	r24, 0x26	; 38
   1a446:	93 e3       	ldi	r25, 0x33	; 51
   1a448:	a0 e0       	ldi	r26, 0x00	; 0
   1a44a:	81 83       	std	Z+1, r24	; 0x01
   1a44c:	92 83       	std	Z+2, r25	; 0x02
   1a44e:	a3 83       	std	Z+3, r26	; 0x03
   1a450:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a454:	f5 01       	movw	r30, r10
   1a456:	80 81       	ld	r24, Z
   1a458:	91 81       	ldd	r25, Z+1	; 0x01
   1a45a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a45c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a45e:	ed b7       	in	r30, 0x3d	; 61
   1a460:	fe b7       	in	r31, 0x3e	; 62
   1a462:	84 83       	std	Z+4, r24	; 0x04
   1a464:	95 83       	std	Z+5, r25	; 0x05
   1a466:	a6 83       	std	Z+6, r26	; 0x06
   1a468:	b7 83       	std	Z+7, r27	; 0x07
   1a46a:	8d e0       	ldi	r24, 0x0D	; 13
   1a46c:	93 e3       	ldi	r25, 0x33	; 51
   1a46e:	a0 e0       	ldi	r26, 0x00	; 0
   1a470:	81 83       	std	Z+1, r24	; 0x01
   1a472:	92 83       	std	Z+2, r25	; 0x02
   1a474:	a3 83       	std	Z+3, r26	; 0x03
   1a476:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a47a:	f8 01       	movw	r30, r16
   1a47c:	e0 5a       	subi	r30, 0xA0	; 160
   1a47e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a480:	80 81       	ld	r24, Z
   1a482:	91 81       	ldd	r25, Z+1	; 0x01
   1a484:	a2 81       	ldd	r26, Z+2	; 0x02
   1a486:	b3 81       	ldd	r27, Z+3	; 0x03
   1a488:	ed b7       	in	r30, 0x3d	; 61
   1a48a:	fe b7       	in	r31, 0x3e	; 62
   1a48c:	84 83       	std	Z+4, r24	; 0x04
   1a48e:	95 83       	std	Z+5, r25	; 0x05
   1a490:	a6 83       	std	Z+6, r26	; 0x06
   1a492:	b7 83       	std	Z+7, r27	; 0x07
   1a494:	84 ef       	ldi	r24, 0xF4	; 244
   1a496:	92 e3       	ldi	r25, 0x32	; 50
   1a498:	a0 e0       	ldi	r26, 0x00	; 0
   1a49a:	81 83       	std	Z+1, r24	; 0x01
   1a49c:	92 83       	std	Z+2, r25	; 0x02
   1a49e:	a3 83       	std	Z+3, r26	; 0x03
   1a4a0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a4a4:	b3 01       	movw	r22, r6
   1a4a6:	c8 01       	movw	r24, r16
   1a4a8:	0e 94 2e c6 	call	0x18c5c	; 0x18c5c <lif_writedirindex>
   1a4ac:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a4ae:	21 f4       	brne	.+8      	; 0x1a4b8 <lif_add_ascii_file_as_e010+0x240>
   1a4b0:	c8 01       	movw	r24, r16
   1a4b2:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
   1a4b6:	14 c0       	rjmp	.+40     	; 0x1a4e0 <lif_add_ascii_file_as_e010+0x268>
   1a4b8:	c8 01       	movw	r24, r16
   1a4ba:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a4be:	ed b7       	in	r30, 0x3d	; 61
   1a4c0:	fe b7       	in	r31, 0x3e	; 62
   1a4c2:	84 82       	std	Z+4, r8	; 0x04
   1a4c4:	95 82       	std	Z+5, r9	; 0x05
   1a4c6:	e6 82       	std	Z+6, r14	; 0x06
   1a4c8:	f7 82       	std	Z+7, r15	; 0x07
   1a4ca:	86 ee       	ldi	r24, 0xE6	; 230
   1a4cc:	92 e3       	ldi	r25, 0x32	; 50
   1a4ce:	a0 e0       	ldi	r26, 0x00	; 0
   1a4d0:	81 83       	std	Z+1, r24	; 0x01
   1a4d2:	92 83       	std	Z+2, r25	; 0x02
   1a4d4:	a3 83       	std	Z+3, r26	; 0x03
   1a4d6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

// Return file size
    return(bytes);
   1a4da:	b4 01       	movw	r22, r8
   1a4dc:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1a4de:	04 c0       	rjmp	.+8      	; 0x1a4e8 <lif_add_ascii_file_as_e010+0x270>
   1a4e0:	6f ef       	ldi	r22, 0xFF	; 255
   1a4e2:	7f ef       	ldi	r23, 0xFF	; 255
   1a4e4:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1a4e6:	9f ef       	ldi	r25, 0xFF	; 255
   1a4e8:	eb 96       	adiw	r28, 0x3b	; 59
   1a4ea:	e2 e1       	ldi	r30, 0x12	; 18
   1a4ec:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0001a4f0 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1a4f0:	a7 e3       	ldi	r26, 0x37	; 55
   1a4f2:	b2 e0       	ldi	r27, 0x02	; 2
   1a4f4:	ee e7       	ldi	r30, 0x7E	; 126
   1a4f6:	f2 ed       	ldi	r31, 0xD2	; 210
   1a4f8:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
   1a4fc:	7c 01       	movw	r14, r24
   1a4fe:	8b 01       	movw	r16, r22
   1a500:	ca 5d       	subi	r28, 0xDA	; 218
   1a502:	dd 4f       	sbci	r29, 0xFD	; 253
   1a504:	59 83       	std	Y+1, r21	; 0x01
   1a506:	48 83       	st	Y, r20
   1a508:	c6 52       	subi	r28, 0x26	; 38
   1a50a:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1a50c:	6d e3       	ldi	r22, 0x3D	; 61
   1a50e:	73 e0       	ldi	r23, 0x03	; 3
   1a510:	6b d9       	rcall	.-3370   	; 0x197e8 <lif_open_volume>
   1a512:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1a514:	00 97       	sbiw	r24, 0x00	; 0
   1a516:	69 f4       	brne	.+26     	; 0x1a532 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1a518:	ed b7       	in	r30, 0x3d	; 61
   1a51a:	fe b7       	in	r31, 0x3e	; 62
   1a51c:	f5 82       	std	Z+5, r15	; 0x05
   1a51e:	e4 82       	std	Z+4, r14	; 0x04
   1a520:	8e ec       	ldi	r24, 0xCE	; 206
   1a522:	92 e3       	ldi	r25, 0x32	; 50
   1a524:	a0 e0       	ldi	r26, 0x00	; 0
   1a526:	81 83       	std	Z+1, r24	; 0x01
   1a528:	92 83       	std	Z+2, r25	; 0x02
   1a52a:	a3 83       	std	Z+3, r26	; 0x03
   1a52c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1a530:	13 c0       	rjmp	.+38     	; 0x1a558 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1a532:	b8 01       	movw	r22, r16
   1a534:	28 dc       	rcall	.-1968   	; 0x19d86 <lif_find_file>
    if(index == -1)
   1a536:	01 96       	adiw	r24, 0x01	; 1
   1a538:	91 f4       	brne	.+36     	; 0x1a55e <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1a53a:	ed b7       	in	r30, 0x3d	; 61
   1a53c:	fe b7       	in	r31, 0x3e	; 62
   1a53e:	15 83       	std	Z+5, r17	; 0x05
   1a540:	04 83       	std	Z+4, r16	; 0x04
   1a542:	87 eb       	ldi	r24, 0xB7	; 183
   1a544:	92 e3       	ldi	r25, 0x32	; 50
   1a546:	a0 e0       	ldi	r26, 0x00	; 0
   1a548:	81 83       	std	Z+1, r24	; 0x01
   1a54a:	92 83       	std	Z+2, r25	; 0x02
   1a54c:	a3 83       	std	Z+3, r26	; 0x03
   1a54e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a552:	c6 01       	movw	r24, r12
   1a554:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1a558:	80 e0       	ldi	r24, 0x00	; 0
   1a55a:	90 e0       	ldi	r25, 0x00	; 0
   1a55c:	73 c2       	rjmp	.+1254   	; 0x1aa44 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1a55e:	f6 01       	movw	r30, r12
   1a560:	e6 5a       	subi	r30, 0xA6	; 166
   1a562:	ff 4f       	sbci	r31, 0xFF	; 255
   1a564:	80 81       	ld	r24, Z
   1a566:	91 81       	ldd	r25, Z+1	; 0x01
   1a568:	9c 01       	movw	r18, r24
   1a56a:	2c 7f       	andi	r18, 0xFC	; 252
   1a56c:	20 31       	cpi	r18, 0x10	; 16
   1a56e:	30 4e       	sbci	r19, 0xE0	; 224
   1a570:	a9 f0       	breq	.+42     	; 0x1a59c <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1a572:	ed b7       	in	r30, 0x3d	; 61
   1a574:	fe b7       	in	r31, 0x3e	; 62
   1a576:	97 83       	std	Z+7, r25	; 0x07
   1a578:	86 83       	std	Z+6, r24	; 0x06
   1a57a:	ca 5d       	subi	r28, 0xDA	; 218
   1a57c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a57e:	28 81       	ld	r18, Y
   1a580:	39 81       	ldd	r19, Y+1	; 0x01
   1a582:	c6 52       	subi	r28, 0x26	; 38
   1a584:	d2 40       	sbci	r29, 0x02	; 2
   1a586:	35 83       	std	Z+5, r19	; 0x05
   1a588:	24 83       	std	Z+4, r18	; 0x04
   1a58a:	8f e7       	ldi	r24, 0x7F	; 127
   1a58c:	92 e3       	ldi	r25, 0x32	; 50
   1a58e:	a0 e0       	ldi	r26, 0x00	; 0
   1a590:	81 83       	std	Z+1, r24	; 0x01
   1a592:	92 83       	std	Z+2, r25	; 0x02
   1a594:	a3 83       	std	Z+3, r26	; 0x03
   1a596:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1a59a:	db cf       	rjmp	.-74     	; 0x1a552 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1a59c:	f6 01       	movw	r30, r12
   1a59e:	e4 5a       	subi	r30, 0xA4	; 164
   1a5a0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a5a2:	80 80       	ld	r8, Z
   1a5a4:	91 80       	ldd	r9, Z+1	; 0x01
   1a5a6:	a2 80       	ldd	r10, Z+2	; 0x02
   1a5a8:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1a5aa:	34 96       	adiw	r30, 0x04	; 4
   1a5ac:	80 81       	ld	r24, Z
   1a5ae:	91 81       	ldd	r25, Z+1	; 0x01
   1a5b0:	a2 81       	ldd	r26, Z+2	; 0x02
   1a5b2:	b3 81       	ldd	r27, Z+3	; 0x03
   1a5b4:	a5 01       	movw	r20, r10
   1a5b6:	94 01       	movw	r18, r8
   1a5b8:	28 0f       	add	r18, r24
   1a5ba:	39 1f       	adc	r19, r25
   1a5bc:	4a 1f       	adc	r20, r26
   1a5be:	5b 1f       	adc	r21, r27
   1a5c0:	c4 5d       	subi	r28, 0xD4	; 212
   1a5c2:	dd 4f       	sbci	r29, 0xFD	; 253
   1a5c4:	28 83       	st	Y, r18
   1a5c6:	39 83       	std	Y+1, r19	; 0x01
   1a5c8:	4a 83       	std	Y+2, r20	; 0x02
   1a5ca:	5b 83       	std	Y+3, r21	; 0x03
   1a5cc:	cc 52       	subi	r28, 0x2C	; 44
   1a5ce:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1a5d0:	c6 01       	movw	r24, r12
   1a5d2:	8c 59       	subi	r24, 0x9C	; 156
   1a5d4:	9f 4f       	sbci	r25, 0xFF	; 255
   1a5d6:	0e 94 45 c0 	call	0x1808a	; 0x1808a <lif_lifbcd2time>
   1a5da:	c8 5d       	subi	r28, 0xD8	; 216
   1a5dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1a5de:	68 83       	st	Y, r22
   1a5e0:	79 83       	std	Y+1, r23	; 0x01
   1a5e2:	8a 83       	std	Y+2, r24	; 0x02
   1a5e4:	9b 83       	std	Y+3, r25	; 0x03
   1a5e6:	c8 52       	subi	r28, 0x28	; 40
   1a5e8:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1a5ea:	ba 2d       	mov	r27, r10
   1a5ec:	a9 2d       	mov	r26, r9
   1a5ee:	98 2d       	mov	r25, r8
   1a5f0:	88 27       	eor	r24, r24
   1a5f2:	c2 5e       	subi	r28, 0xE2	; 226
   1a5f4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a5f6:	88 83       	st	Y, r24
   1a5f8:	99 83       	std	Y+1, r25	; 0x01
   1a5fa:	aa 83       	std	Y+2, r26	; 0x02
   1a5fc:	bb 83       	std	Y+3, r27	; 0x03
   1a5fe:	ce 51       	subi	r28, 0x1E	; 30
   1a600:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1a602:	67 e0       	ldi	r22, 0x07	; 7
   1a604:	79 e0       	ldi	r23, 0x09	; 9
   1a606:	ca 5d       	subi	r28, 0xDA	; 218
   1a608:	dd 4f       	sbci	r29, 0xFD	; 253
   1a60a:	88 81       	ld	r24, Y
   1a60c:	99 81       	ldd	r25, Y+1	; 0x01
   1a60e:	c6 52       	subi	r28, 0x26	; 38
   1a610:	d2 40       	sbci	r29, 0x02	; 2
   1a612:	0e 94 09 bc 	call	0x17812	; 0x17812 <lif_open>
   1a616:	cc 5d       	subi	r28, 0xDC	; 220
   1a618:	dd 4f       	sbci	r29, 0xFD	; 253
   1a61a:	99 83       	std	Y+1, r25	; 0x01
   1a61c:	88 83       	st	Y, r24
   1a61e:	c4 52       	subi	r28, 0x24	; 36
   1a620:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1a622:	89 2b       	or	r24, r25
   1a624:	09 f4       	brne	.+2      	; 0x1a628 <lif_extract_e010_as_ascii+0x138>
   1a626:	95 cf       	rjmp	.-214    	; 0x1a552 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1a628:	ca 5d       	subi	r28, 0xDA	; 218
   1a62a:	dd 4f       	sbci	r29, 0xFD	; 253
   1a62c:	28 81       	ld	r18, Y
   1a62e:	39 81       	ldd	r19, Y+1	; 0x01
   1a630:	c6 52       	subi	r28, 0x26	; 38
   1a632:	d2 40       	sbci	r29, 0x02	; 2
   1a634:	ed b7       	in	r30, 0x3d	; 61
   1a636:	fe b7       	in	r31, 0x3e	; 62
   1a638:	35 83       	std	Z+5, r19	; 0x05
   1a63a:	24 83       	std	Z+4, r18	; 0x04
   1a63c:	8f e6       	ldi	r24, 0x6F	; 111
   1a63e:	92 e3       	ldi	r25, 0x32	; 50
   1a640:	a0 e0       	ldi	r26, 0x00	; 0
   1a642:	81 83       	std	Z+1, r24	; 0x01
   1a644:	92 83       	std	Z+2, r25	; 0x02
   1a646:	a3 83       	std	Z+3, r26	; 0x03
   1a648:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    bytes = 0;
    wind = 0;
   1a64c:	21 2c       	mov	r2, r1
   1a64e:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1a650:	ce 5d       	subi	r28, 0xDE	; 222
   1a652:	dd 4f       	sbci	r29, 0xFD	; 253
   1a654:	19 82       	std	Y+1, r1	; 0x01
   1a656:	18 82       	st	Y, r1
   1a658:	c2 52       	subi	r28, 0x22	; 34
   1a65a:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1a65c:	ee 24       	eor	r14, r14
   1a65e:	e3 94       	inc	r14
   1a660:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1a662:	41 2c       	mov	r4, r1
   1a664:	51 2c       	mov	r5, r1
   1a666:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1a668:	8e ea       	ldi	r24, 0xAE	; 174
   1a66a:	91 e3       	ldi	r25, 0x31	; 49
   1a66c:	9c 01       	movw	r18, r24
   1a66e:	40 e0       	ldi	r20, 0x00	; 0
   1a670:	ce 5c       	subi	r28, 0xCE	; 206
   1a672:	dd 4f       	sbci	r29, 0xFD	; 253
   1a674:	28 83       	st	Y, r18
   1a676:	39 83       	std	Y+1, r19	; 0x01
   1a678:	4a 83       	std	Y+2, r20	; 0x02
   1a67a:	c2 53       	subi	r28, 0x32	; 50
   1a67c:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1a67e:	8c eb       	ldi	r24, 0xBC	; 188
   1a680:	91 e3       	ldi	r25, 0x31	; 49
   1a682:	9c 01       	movw	r18, r24
   1a684:	40 e0       	ldi	r20, 0x00	; 0
   1a686:	cb 5c       	subi	r28, 0xCB	; 203
   1a688:	dd 4f       	sbci	r29, 0xFD	; 253
   1a68a:	28 83       	st	Y, r18
   1a68c:	39 83       	std	Y+1, r19	; 0x01
   1a68e:	4a 83       	std	Y+2, r20	; 0x02
   1a690:	c5 53       	subi	r28, 0x35	; 53
   1a692:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1a694:	c2 5e       	subi	r28, 0xE2	; 226
   1a696:	dd 4f       	sbci	r29, 0xFD	; 253
   1a698:	28 81       	ld	r18, Y
   1a69a:	39 81       	ldd	r19, Y+1	; 0x01
   1a69c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a69e:	5b 81       	ldd	r21, Y+3	; 0x03
   1a6a0:	ce 51       	subi	r28, 0x1E	; 30
   1a6a2:	d2 40       	sbci	r29, 0x02	; 2
   1a6a4:	bb 27       	eor	r27, r27
   1a6a6:	a5 2f       	mov	r26, r21
   1a6a8:	94 2f       	mov	r25, r20
   1a6aa:	83 2f       	mov	r24, r19
   1a6ac:	c4 5d       	subi	r28, 0xD4	; 212
   1a6ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1a6b0:	28 81       	ld	r18, Y
   1a6b2:	39 81       	ldd	r19, Y+1	; 0x01
   1a6b4:	4a 81       	ldd	r20, Y+2	; 0x02
   1a6b6:	5b 81       	ldd	r21, Y+3	; 0x03
   1a6b8:	cc 52       	subi	r28, 0x2C	; 44
   1a6ba:	d2 40       	sbci	r29, 0x02	; 2
   1a6bc:	28 17       	cp	r18, r24
   1a6be:	39 07       	cpc	r19, r25
   1a6c0:	4a 07       	cpc	r20, r26
   1a6c2:	5b 07       	cpc	r21, r27
   1a6c4:	08 f4       	brcc	.+2      	; 0x1a6c8 <lif_extract_e010_as_ascii+0x1d8>
   1a6c6:	51 c1       	rjmp	.+674    	; 0x1a96a <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1a6c8:	00 e0       	ldi	r16, 0x00	; 0
   1a6ca:	11 e0       	ldi	r17, 0x01	; 1
   1a6cc:	c2 5e       	subi	r28, 0xE2	; 226
   1a6ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1a6d0:	28 81       	ld	r18, Y
   1a6d2:	39 81       	ldd	r19, Y+1	; 0x01
   1a6d4:	4a 81       	ldd	r20, Y+2	; 0x02
   1a6d6:	5b 81       	ldd	r21, Y+3	; 0x03
   1a6d8:	ce 51       	subi	r28, 0x1E	; 30
   1a6da:	d2 40       	sbci	r29, 0x02	; 2
   1a6dc:	be 01       	movw	r22, r28
   1a6de:	60 5f       	subi	r22, 0xF0	; 240
   1a6e0:	7e 4f       	sbci	r23, 0xFE	; 254
   1a6e2:	c6 01       	movw	r24, r12
   1a6e4:	0e 94 8d bc 	call	0x1791a	; 0x1791a <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1a6e8:	6f 3f       	cpi	r22, 0xFF	; 255
   1a6ea:	71 05       	cpc	r23, r1
   1a6ec:	09 f0       	breq	.+2      	; 0x1a6f0 <lif_extract_e010_as_ascii+0x200>
   1a6ee:	0c f4       	brge	.+2      	; 0x1a6f2 <lif_extract_e010_as_ascii+0x202>
   1a6f0:	3a c1       	rjmp	.+628    	; 0x1a966 <lif_extract_e010_as_ascii+0x476>
   1a6f2:	00 e0       	ldi	r16, 0x00	; 0
   1a6f4:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1a6f6:	ce 5d       	subi	r28, 0xDE	; 222
   1a6f8:	dd 4f       	sbci	r29, 0xFD	; 253
   1a6fa:	88 81       	ld	r24, Y
   1a6fc:	99 81       	ldd	r25, Y+1	; 0x01
   1a6fe:	c2 52       	subi	r28, 0x22	; 34
   1a700:	d2 40       	sbci	r29, 0x02	; 2
   1a702:	89 2b       	or	r24, r25
   1a704:	09 f0       	breq	.+2      	; 0x1a708 <lif_extract_e010_as_ascii+0x218>
   1a706:	1b c1       	rjmp	.+566    	; 0x1a93e <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1a708:	e0 e1       	ldi	r30, 0x10	; 16
   1a70a:	f1 e0       	ldi	r31, 0x01	; 1
   1a70c:	ec 0f       	add	r30, r28
   1a70e:	fd 1f       	adc	r31, r29
   1a710:	e0 0f       	add	r30, r16
   1a712:	f1 1f       	adc	r31, r17
   1a714:	80 81       	ld	r24, Z
   1a716:	98 2f       	mov	r25, r24
   1a718:	9f 7e       	andi	r25, 0xEF	; 239
   1a71a:	9f 3c       	cpi	r25, 0xCF	; 207
   1a71c:	11 f0       	breq	.+4      	; 0x1a722 <lif_extract_e010_as_ascii+0x232>
   1a71e:	8f 36       	cpi	r24, 0x6F	; 111
   1a720:	c9 f5       	brne	.+114    	; 0x1a794 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1a722:	e0 e1       	ldi	r30, 0x10	; 16
   1a724:	f1 e0       	ldi	r31, 0x01	; 1
   1a726:	ec 0f       	add	r30, r28
   1a728:	fd 1f       	adc	r31, r29
   1a72a:	e0 0f       	add	r30, r16
   1a72c:	f1 1f       	adc	r31, r17
   1a72e:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1a730:	f8 01       	movw	r30, r16
   1a732:	32 96       	adiw	r30, 0x02	; 2
   1a734:	40 e1       	ldi	r20, 0x10	; 16
   1a736:	51 e0       	ldi	r21, 0x01	; 1
   1a738:	4c 0f       	add	r20, r28
   1a73a:	5d 1f       	adc	r21, r29
   1a73c:	e4 0f       	add	r30, r20
   1a73e:	f5 1f       	adc	r31, r21
   1a740:	0d 5f       	subi	r16, 0xFD	; 253
   1a742:	1f 4f       	sbci	r17, 0xFF	; 255
   1a744:	80 81       	ld	r24, Z
   1a746:	b1 2c       	mov	r11, r1
   1a748:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1a74a:	a1 14       	cp	r10, r1
   1a74c:	b1 04       	cpc	r11, r1
   1a74e:	09 f4       	brne	.+2      	; 0x1a752 <lif_extract_e010_as_ascii+0x262>
   1a750:	ee c0       	rjmp	.+476    	; 0x1a92e <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1a752:	5f ef       	ldi	r21, 0xFF	; 255
   1a754:	a5 16       	cp	r10, r21
   1a756:	b1 04       	cpc	r11, r1
   1a758:	09 f0       	breq	.+2      	; 0x1a75c <lif_extract_e010_as_ascii+0x26c>
   1a75a:	7c f4       	brge	.+30     	; 0x1a77a <lif_extract_e010_as_ascii+0x28a>
   1a75c:	c4 5e       	subi	r28, 0xE4	; 228
   1a75e:	dd 4f       	sbci	r29, 0xFD	; 253
   1a760:	19 82       	std	Y+1, r1	; 0x01
   1a762:	18 82       	st	Y, r1
   1a764:	cc 51       	subi	r28, 0x1C	; 28
   1a766:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1a768:	c5 01       	movw	r24, r10
   1a76a:	01 97       	sbiw	r24, 0x01	; 1
   1a76c:	c0 5d       	subi	r28, 0xD0	; 208
   1a76e:	dd 4f       	sbci	r29, 0xFD	; 253
   1a770:	99 83       	std	Y+1, r25	; 0x01
   1a772:	88 83       	st	Y, r24
   1a774:	c0 53       	subi	r28, 0x30	; 48
   1a776:	d2 40       	sbci	r29, 0x02	; 2
   1a778:	68 c0       	rjmp	.+208    	; 0x1a84a <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1a77a:	ed b7       	in	r30, 0x3d	; 61
   1a77c:	fe b7       	in	r31, 0x3e	; 62
   1a77e:	b5 82       	std	Z+5, r11	; 0x05
   1a780:	a4 82       	std	Z+4, r10	; 0x04
   1a782:	8a e3       	ldi	r24, 0x3A	; 58
   1a784:	92 e3       	ldi	r25, 0x32	; 50
   1a786:	a0 e0       	ldi	r26, 0x00	; 0
   1a788:	81 83       	std	Z+1, r24	; 0x01
   1a78a:	92 83       	std	Z+2, r25	; 0x02
   1a78c:	a3 83       	std	Z+3, r26	; 0x03
   1a78e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1a792:	1e c0       	rjmp	.+60     	; 0x1a7d0 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1a794:	8f 3e       	cpi	r24, 0xEF	; 239
   1a796:	09 f4       	brne	.+2      	; 0x1a79a <lif_extract_e010_as_ascii+0x2aa>
   1a798:	d2 c0       	rjmp	.+420    	; 0x1a93e <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1a79a:	ed b7       	in	r30, 0x3d	; 61
   1a79c:	fe b7       	in	r31, 0x3e	; 62
   1a79e:	13 87       	std	Z+11, r17	; 0x0b
   1a7a0:	02 87       	std	Z+10, r16	; 0x0a
   1a7a2:	c2 5e       	subi	r28, 0xE2	; 226
   1a7a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a7a6:	28 81       	ld	r18, Y
   1a7a8:	39 81       	ldd	r19, Y+1	; 0x01
   1a7aa:	4a 81       	ldd	r20, Y+2	; 0x02
   1a7ac:	5b 81       	ldd	r21, Y+3	; 0x03
   1a7ae:	ce 51       	subi	r28, 0x1E	; 30
   1a7b0:	d2 40       	sbci	r29, 0x02	; 2
   1a7b2:	26 83       	std	Z+6, r18	; 0x06
   1a7b4:	37 83       	std	Z+7, r19	; 0x07
   1a7b6:	40 87       	std	Z+8, r20	; 0x08
   1a7b8:	51 87       	std	Z+9, r21	; 0x09
   1a7ba:	90 e0       	ldi	r25, 0x00	; 0
   1a7bc:	95 83       	std	Z+5, r25	; 0x05
   1a7be:	84 83       	std	Z+4, r24	; 0x04
   1a7c0:	84 ee       	ldi	r24, 0xE4	; 228
   1a7c2:	91 e3       	ldi	r25, 0x31	; 49
   1a7c4:	a0 e0       	ldi	r26, 0x00	; 0
   1a7c6:	81 83       	std	Z+1, r24	; 0x01
   1a7c8:	92 83       	std	Z+2, r25	; 0x02
   1a7ca:	a3 83       	std	Z+3, r26	; 0x03
   1a7cc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
                status = 0;
                done = 1;
   1a7d0:	21 e0       	ldi	r18, 0x01	; 1
   1a7d2:	30 e0       	ldi	r19, 0x00	; 0
   1a7d4:	ce 5d       	subi	r28, 0xDE	; 222
   1a7d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1a7d8:	39 83       	std	Y+1, r19	; 0x01
   1a7da:	28 83       	st	Y, r18
   1a7dc:	c2 52       	subi	r28, 0x22	; 34
   1a7de:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1a7e0:	e1 2c       	mov	r14, r1
   1a7e2:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1a7e4:	ac c0       	rjmp	.+344    	; 0x1a93e <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1a7e6:	0f 3f       	cpi	r16, 0xFF	; 255
   1a7e8:	11 05       	cpc	r17, r1
   1a7ea:	11 f0       	breq	.+4      	; 0x1a7f0 <lif_extract_e010_as_ascii+0x300>
   1a7ec:	0c f0       	brlt	.+2      	; 0x1a7f0 <lif_extract_e010_as_ascii+0x300>
   1a7ee:	a7 c0       	rjmp	.+334    	; 0x1a93e <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1a7f0:	e0 e1       	ldi	r30, 0x10	; 16
   1a7f2:	f1 e0       	ldi	r31, 0x01	; 1
   1a7f4:	ec 0f       	add	r30, r28
   1a7f6:	fd 1f       	adc	r31, r29
   1a7f8:	e0 0f       	add	r30, r16
   1a7fa:	f1 1f       	adc	r31, r17
   1a7fc:	20 81       	ld	r18, Z
   1a7fe:	a1 01       	movw	r20, r2
   1a800:	4f 5f       	subi	r20, 0xFF	; 255
   1a802:	5f 4f       	sbci	r21, 0xFF	; 255
   1a804:	4a 01       	movw	r8, r20
   1a806:	2d 30       	cpi	r18, 0x0D	; 13
   1a808:	51 f1       	breq	.+84     	; 0x1a85e <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1a80a:	98 2d       	mov	r25, r8
   1a80c:	89 2d       	mov	r24, r9
   1a80e:	0f 5f       	subi	r16, 0xFF	; 255
   1a810:	1f 4f       	sbci	r17, 0xFF	; 255
   1a812:	ec e0       	ldi	r30, 0x0C	; 12
   1a814:	f0 e0       	ldi	r31, 0x00	; 0
   1a816:	ec 0f       	add	r30, r28
   1a818:	fd 1f       	adc	r31, r29
   1a81a:	e2 0d       	add	r30, r2
   1a81c:	f3 1d       	adc	r31, r3
   1a81e:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1a820:	ef ef       	ldi	r30, 0xFF	; 255
   1a822:	8e 16       	cp	r8, r30
   1a824:	91 04       	cpc	r9, r1
   1a826:	09 f0       	breq	.+2      	; 0x1a82a <lif_extract_e010_as_ascii+0x33a>
   1a828:	ac f5       	brge	.+106    	; 0x1a894 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1a82a:	c4 5e       	subi	r28, 0xE4	; 228
   1a82c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a82e:	28 81       	ld	r18, Y
   1a830:	39 81       	ldd	r19, Y+1	; 0x01
   1a832:	cc 51       	subi	r28, 0x1C	; 28
   1a834:	d2 40       	sbci	r29, 0x02	; 2
   1a836:	2f 5f       	subi	r18, 0xFF	; 255
   1a838:	3f 4f       	sbci	r19, 0xFF	; 255
   1a83a:	c4 5e       	subi	r28, 0xE4	; 228
   1a83c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a83e:	39 83       	std	Y+1, r19	; 0x01
   1a840:	28 83       	st	Y, r18
   1a842:	cc 51       	subi	r28, 0x1C	; 28
   1a844:	d2 40       	sbci	r29, 0x02	; 2
   1a846:	29 2e       	mov	r2, r25
   1a848:	38 2e       	mov	r3, r24
   1a84a:	c4 5e       	subi	r28, 0xE4	; 228
   1a84c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a84e:	48 81       	ld	r20, Y
   1a850:	59 81       	ldd	r21, Y+1	; 0x01
   1a852:	cc 51       	subi	r28, 0x1C	; 28
   1a854:	d2 40       	sbci	r29, 0x02	; 2
   1a856:	4a 15       	cp	r20, r10
   1a858:	5b 05       	cpc	r21, r11
   1a85a:	2c f2       	brlt	.-118    	; 0x1a7e6 <lif_extract_e010_as_ascii+0x2f6>
   1a85c:	62 c0       	rjmp	.+196    	; 0x1a922 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1a85e:	c4 5e       	subi	r28, 0xE4	; 228
   1a860:	dd 4f       	sbci	r29, 0xFD	; 253
   1a862:	88 81       	ld	r24, Y
   1a864:	99 81       	ldd	r25, Y+1	; 0x01
   1a866:	cc 51       	subi	r28, 0x1C	; 28
   1a868:	d2 40       	sbci	r29, 0x02	; 2
   1a86a:	c0 5d       	subi	r28, 0xD0	; 208
   1a86c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a86e:	a8 81       	ld	r26, Y
   1a870:	b9 81       	ldd	r27, Y+1	; 0x01
   1a872:	c0 53       	subi	r28, 0x30	; 48
   1a874:	d2 40       	sbci	r29, 0x02	; 2
   1a876:	8a 17       	cp	r24, r26
   1a878:	9b 07       	cpc	r25, r27
   1a87a:	39 f6       	brne	.-114    	; 0x1a80a <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1a87c:	ec e0       	ldi	r30, 0x0C	; 12
   1a87e:	f0 e0       	ldi	r31, 0x00	; 0
   1a880:	ec 0f       	add	r30, r28
   1a882:	fd 1f       	adc	r31, r29
   1a884:	e2 0d       	add	r30, r2
   1a886:	f3 1d       	adc	r31, r3
   1a888:	ba e0       	ldi	r27, 0x0A	; 10
   1a88a:	b0 83       	st	Z, r27
                    ++ind;
   1a88c:	0f 5f       	subi	r16, 0xFF	; 255
   1a88e:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1a890:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1a892:	47 c0       	rjmp	.+142    	; 0x1a922 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1a894:	cc 5d       	subi	r28, 0xDC	; 220
   1a896:	dd 4f       	sbci	r29, 0xFD	; 253
   1a898:	28 81       	ld	r18, Y
   1a89a:	39 81       	ldd	r19, Y+1	; 0x01
   1a89c:	c4 52       	subi	r28, 0x24	; 36
   1a89e:	d2 40       	sbci	r29, 0x02	; 2
   1a8a0:	a4 01       	movw	r20, r8
   1a8a2:	61 e0       	ldi	r22, 0x01	; 1
   1a8a4:	70 e0       	ldi	r23, 0x00	; 0
   1a8a6:	ce 01       	movw	r24, r28
   1a8a8:	0c 96       	adiw	r24, 0x0c	; 12
   1a8aa:	0e 94 de 79 	call	0xf3bc	; 0xf3bc <fwrite>
                    if(size < wind)
   1a8ae:	88 15       	cp	r24, r8
   1a8b0:	99 05       	cpc	r25, r9
   1a8b2:	d4 f4       	brge	.+52     	; 0x1a8e8 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1a8b4:	cb 5c       	subi	r28, 0xCB	; 203
   1a8b6:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8b8:	28 81       	ld	r18, Y
   1a8ba:	39 81       	ldd	r19, Y+1	; 0x01
   1a8bc:	4a 81       	ldd	r20, Y+2	; 0x02
   1a8be:	c5 53       	subi	r28, 0x35	; 53
   1a8c0:	d2 40       	sbci	r29, 0x02	; 2
   1a8c2:	ed b7       	in	r30, 0x3d	; 61
   1a8c4:	fe b7       	in	r31, 0x3e	; 62
   1a8c6:	21 83       	std	Z+1, r18	; 0x01
   1a8c8:	32 83       	std	Z+2, r19	; 0x02
   1a8ca:	43 83       	std	Z+3, r20	; 0x03
   1a8cc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1a8d0:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1a8d2:	21 e0       	ldi	r18, 0x01	; 1
   1a8d4:	30 e0       	ldi	r19, 0x00	; 0
   1a8d6:	ce 5d       	subi	r28, 0xDE	; 222
   1a8d8:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8da:	39 83       	std	Y+1, r19	; 0x01
   1a8dc:	28 83       	st	Y, r18
   1a8de:	c2 52       	subi	r28, 0x22	; 34
   1a8e0:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1a8e2:	e1 2c       	mov	r14, r1
   1a8e4:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1a8e6:	1d c0       	rjmp	.+58     	; 0x1a922 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1a8e8:	09 2e       	mov	r0, r25
   1a8ea:	00 0c       	add	r0, r0
   1a8ec:	aa 0b       	sbc	r26, r26
   1a8ee:	bb 0b       	sbc	r27, r27
   1a8f0:	48 0e       	add	r4, r24
   1a8f2:	59 1e       	adc	r5, r25
   1a8f4:	6a 1e       	adc	r6, r26
   1a8f6:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1a8f8:	ed b7       	in	r30, 0x3d	; 61
   1a8fa:	fe b7       	in	r31, 0x3e	; 62
   1a8fc:	44 82       	std	Z+4, r4	; 0x04
   1a8fe:	55 82       	std	Z+5, r5	; 0x05
   1a900:	66 82       	std	Z+6, r6	; 0x06
   1a902:	77 82       	std	Z+7, r7	; 0x07
   1a904:	ce 5c       	subi	r28, 0xCE	; 206
   1a906:	dd 4f       	sbci	r29, 0xFD	; 253
   1a908:	28 81       	ld	r18, Y
   1a90a:	39 81       	ldd	r19, Y+1	; 0x01
   1a90c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a90e:	c2 53       	subi	r28, 0x32	; 50
   1a910:	d2 40       	sbci	r29, 0x02	; 2
   1a912:	21 83       	std	Z+1, r18	; 0x01
   1a914:	32 83       	std	Z+2, r19	; 0x02
   1a916:	43 83       	std	Z+3, r20	; 0x03
   1a918:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
                    wind = 0;
   1a91c:	90 e0       	ldi	r25, 0x00	; 0
   1a91e:	80 e0       	ldi	r24, 0x00	; 0
   1a920:	84 cf       	rjmp	.-248    	; 0x1a82a <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1a922:	0f 3f       	cpi	r16, 0xFF	; 255
   1a924:	11 05       	cpc	r17, r1
   1a926:	09 f0       	breq	.+2      	; 0x1a92a <lif_extract_e010_as_ascii+0x43a>
   1a928:	0c f4       	brge	.+2      	; 0x1a92c <lif_extract_e010_as_ascii+0x43c>
   1a92a:	e5 ce       	rjmp	.-566    	; 0x1a6f6 <lif_extract_e010_as_ascii+0x206>
   1a92c:	08 c0       	rjmp	.+16     	; 0x1a93e <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1a92e:	a1 e0       	ldi	r26, 0x01	; 1
   1a930:	b0 e0       	ldi	r27, 0x00	; 0
   1a932:	ce 5d       	subi	r28, 0xDE	; 222
   1a934:	dd 4f       	sbci	r29, 0xFD	; 253
   1a936:	b9 83       	std	Y+1, r27	; 0x01
   1a938:	a8 83       	st	Y, r26
   1a93a:	c2 52       	subi	r28, 0x22	; 34
   1a93c:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1a93e:	c2 5e       	subi	r28, 0xE2	; 226
   1a940:	dd 4f       	sbci	r29, 0xFD	; 253
   1a942:	28 81       	ld	r18, Y
   1a944:	39 81       	ldd	r19, Y+1	; 0x01
   1a946:	4a 81       	ldd	r20, Y+2	; 0x02
   1a948:	5b 81       	ldd	r21, Y+3	; 0x03
   1a94a:	ce 51       	subi	r28, 0x1E	; 30
   1a94c:	d2 40       	sbci	r29, 0x02	; 2
   1a94e:	3f 5f       	subi	r19, 0xFF	; 255
   1a950:	4f 4f       	sbci	r20, 0xFF	; 255
   1a952:	5f 4f       	sbci	r21, 0xFF	; 255
   1a954:	c2 5e       	subi	r28, 0xE2	; 226
   1a956:	dd 4f       	sbci	r29, 0xFD	; 253
   1a958:	28 83       	st	Y, r18
   1a95a:	39 83       	std	Y+1, r19	; 0x01
   1a95c:	4a 83       	std	Y+2, r20	; 0x02
   1a95e:	5b 83       	std	Y+3, r21	; 0x03
   1a960:	ce 51       	subi	r28, 0x1E	; 30
   1a962:	d2 40       	sbci	r29, 0x02	; 2
   1a964:	97 ce       	rjmp	.-722    	; 0x1a694 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1a966:	e1 2c       	mov	r14, r1
   1a968:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a96a:	c6 01       	movw	r24, r12
   1a96c:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1a970:	21 14       	cp	r2, r1
   1a972:	31 04       	cpc	r3, r1
   1a974:	31 f1       	breq	.+76     	; 0x1a9c2 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1a976:	cc 5d       	subi	r28, 0xDC	; 220
   1a978:	dd 4f       	sbci	r29, 0xFD	; 253
   1a97a:	28 81       	ld	r18, Y
   1a97c:	39 81       	ldd	r19, Y+1	; 0x01
   1a97e:	c4 52       	subi	r28, 0x24	; 36
   1a980:	d2 40       	sbci	r29, 0x02	; 2
   1a982:	a1 01       	movw	r20, r2
   1a984:	61 e0       	ldi	r22, 0x01	; 1
   1a986:	70 e0       	ldi	r23, 0x00	; 0
   1a988:	ce 01       	movw	r24, r28
   1a98a:	0c 96       	adiw	r24, 0x0c	; 12
   1a98c:	0e 94 de 79 	call	0xf3bc	; 0xf3bc <fwrite>
   1a990:	8c 01       	movw	r16, r24
        if(size < wind)
   1a992:	82 15       	cp	r24, r2
   1a994:	93 05       	cpc	r25, r3
   1a996:	64 f4       	brge	.+24     	; 0x1a9b0 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1a998:	86 e8       	ldi	r24, 0x86	; 134
   1a99a:	91 e3       	ldi	r25, 0x31	; 49
   1a99c:	a0 e0       	ldi	r26, 0x00	; 0
   1a99e:	ed b7       	in	r30, 0x3d	; 61
   1a9a0:	fe b7       	in	r31, 0x3e	; 62
   1a9a2:	81 83       	std	Z+1, r24	; 0x01
   1a9a4:	92 83       	std	Z+2, r25	; 0x02
   1a9a6:	a3 83       	std	Z+3, r26	; 0x03
   1a9a8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            status = 0;
   1a9ac:	e1 2c       	mov	r14, r1
   1a9ae:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1a9b0:	c8 01       	movw	r24, r16
   1a9b2:	01 2e       	mov	r0, r17
   1a9b4:	00 0c       	add	r0, r0
   1a9b6:	aa 0b       	sbc	r26, r26
   1a9b8:	bb 0b       	sbc	r27, r27
   1a9ba:	48 0e       	add	r4, r24
   1a9bc:	59 1e       	adc	r5, r25
   1a9be:	6a 1e       	adc	r6, r26
   1a9c0:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1a9c2:	cc 5d       	subi	r28, 0xDC	; 220
   1a9c4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9c6:	88 81       	ld	r24, Y
   1a9c8:	99 81       	ldd	r25, Y+1	; 0x01
   1a9ca:	c4 52       	subi	r28, 0x24	; 36
   1a9cc:	d2 40       	sbci	r29, 0x02	; 2
   1a9ce:	0e 94 60 7a 	call	0xf4c0	; 0xf4c0 <fclose>
    if(t)
   1a9d2:	c8 5d       	subi	r28, 0xD8	; 216
   1a9d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9d6:	28 81       	ld	r18, Y
   1a9d8:	39 81       	ldd	r19, Y+1	; 0x01
   1a9da:	4a 81       	ldd	r20, Y+2	; 0x02
   1a9dc:	5b 81       	ldd	r21, Y+3	; 0x03
   1a9de:	c8 52       	subi	r28, 0x28	; 40
   1a9e0:	d2 40       	sbci	r29, 0x02	; 2
   1a9e2:	21 15       	cp	r18, r1
   1a9e4:	31 05       	cpc	r19, r1
   1a9e6:	41 05       	cpc	r20, r1
   1a9e8:	51 05       	cpc	r21, r1
   1a9ea:	d9 f0       	breq	.+54     	; 0x1aa22 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1a9ec:	c8 5e       	subi	r28, 0xE8	; 232
   1a9ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9f0:	28 83       	st	Y, r18
   1a9f2:	39 83       	std	Y+1, r19	; 0x01
   1a9f4:	4a 83       	std	Y+2, r20	; 0x02
   1a9f6:	5b 83       	std	Y+3, r21	; 0x03
   1a9f8:	c8 51       	subi	r28, 0x18	; 24
   1a9fa:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1a9fc:	cc 5e       	subi	r28, 0xEC	; 236
   1a9fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa00:	28 83       	st	Y, r18
   1aa02:	39 83       	std	Y+1, r19	; 0x01
   1aa04:	4a 83       	std	Y+2, r20	; 0x02
   1aa06:	5b 83       	std	Y+3, r21	; 0x03
   1aa08:	c4 51       	subi	r28, 0x14	; 20
   1aa0a:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1aa0c:	be 01       	movw	r22, r28
   1aa0e:	6c 5e       	subi	r22, 0xEC	; 236
   1aa10:	7d 4f       	sbci	r23, 0xFD	; 253
   1aa12:	ca 5d       	subi	r28, 0xDA	; 218
   1aa14:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa16:	88 81       	ld	r24, Y
   1aa18:	99 81       	ldd	r25, Y+1	; 0x01
   1aa1a:	c6 52       	subi	r28, 0x26	; 38
   1aa1c:	d2 40       	sbci	r29, 0x02	; 2
   1aa1e:	0e 94 9d 77 	call	0xef3a	; 0xef3a <utime>
    }
    sync();
   1aa22:	0e 94 5b 79 	call	0xf2b6	; 0xf2b6 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1aa26:	ed b7       	in	r30, 0x3d	; 61
   1aa28:	fe b7       	in	r31, 0x3e	; 62
   1aa2a:	44 82       	std	Z+4, r4	; 0x04
   1aa2c:	55 82       	std	Z+5, r5	; 0x05
   1aa2e:	66 82       	std	Z+6, r6	; 0x06
   1aa30:	77 82       	std	Z+7, r7	; 0x07
   1aa32:	88 e7       	ldi	r24, 0x78	; 120
   1aa34:	91 e3       	ldi	r25, 0x31	; 49
   1aa36:	a0 e0       	ldi	r26, 0x00	; 0
   1aa38:	81 83       	std	Z+1, r24	; 0x01
   1aa3a:	92 83       	std	Z+2, r25	; 0x02
   1aa3c:	a3 83       	std	Z+3, r26	; 0x03
   1aa3e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    return(status);
   1aa42:	c7 01       	movw	r24, r14
}
   1aa44:	c9 5c       	subi	r28, 0xC9	; 201
   1aa46:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa48:	e2 e1       	ldi	r30, 0x12	; 18
   1aa4a:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0001aa4e <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1aa4e:	a4 e1       	ldi	r26, 0x14	; 20
   1aa50:	b1 e0       	ldi	r27, 0x01	; 1
   1aa52:	ed e2       	ldi	r30, 0x2D	; 45
   1aa54:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa56:	0c 94 c2 df 	jmp	0x1bf84	; 0x1bf84 <__prologue_saves__>
   1aa5a:	7c 01       	movw	r14, r24
   1aa5c:	8b 01       	movw	r16, r22
   1aa5e:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1aa60:	6d e3       	ldi	r22, 0x3D	; 61
   1aa62:	73 e0       	ldi	r23, 0x03	; 3
   1aa64:	0e 94 f4 cb 	call	0x197e8	; 0x197e8 <lif_open_volume>
   1aa68:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1aa6a:	00 97       	sbiw	r24, 0x00	; 0
   1aa6c:	69 f4       	brne	.+26     	; 0x1aa88 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1aa6e:	ed b7       	in	r30, 0x3d	; 61
   1aa70:	fe b7       	in	r31, 0x3e	; 62
   1aa72:	f5 82       	std	Z+5, r15	; 0x05
   1aa74:	e4 82       	std	Z+4, r14	; 0x04
   1aa76:	80 e6       	ldi	r24, 0x60	; 96
   1aa78:	91 e3       	ldi	r25, 0x31	; 49
   1aa7a:	a0 e0       	ldi	r26, 0x00	; 0
   1aa7c:	81 83       	std	Z+1, r24	; 0x01
   1aa7e:	92 83       	std	Z+2, r25	; 0x02
   1aa80:	a3 83       	std	Z+3, r26	; 0x03
   1aa82:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1aa86:	13 c0       	rjmp	.+38     	; 0x1aaae <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1aa88:	b8 01       	movw	r22, r16
   1aa8a:	7d d9       	rcall	.-3334   	; 0x19d86 <lif_find_file>
    if(index == -1)
   1aa8c:	01 96       	adiw	r24, 0x01	; 1
   1aa8e:	91 f4       	brne	.+36     	; 0x1aab4 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1aa90:	ed b7       	in	r30, 0x3d	; 61
   1aa92:	fe b7       	in	r31, 0x3e	; 62
   1aa94:	15 83       	std	Z+5, r17	; 0x05
   1aa96:	04 83       	std	Z+4, r16	; 0x04
   1aa98:	8d e4       	ldi	r24, 0x4D	; 77
   1aa9a:	91 e3       	ldi	r25, 0x31	; 49
   1aa9c:	a0 e0       	ldi	r26, 0x00	; 0
   1aa9e:	81 83       	std	Z+1, r24	; 0x01
   1aaa0:	92 83       	std	Z+2, r25	; 0x02
   1aaa2:	a3 83       	std	Z+3, r26	; 0x03
   1aaa4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aaa8:	c4 01       	movw	r24, r8
   1aaaa:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1aaae:	00 e0       	ldi	r16, 0x00	; 0
   1aab0:	10 e0       	ldi	r17, 0x00	; 0
   1aab2:	ff c0       	rjmp	.+510    	; 0x1acb2 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1aab4:	94 01       	movw	r18, r8
   1aab6:	20 5a       	subi	r18, 0xA0	; 160
   1aab8:	3f 4f       	sbci	r19, 0xFF	; 255
   1aaba:	c0 5f       	subi	r28, 0xF0	; 240
   1aabc:	de 4f       	sbci	r29, 0xFE	; 254
   1aabe:	39 83       	std	Y+1, r19	; 0x01
   1aac0:	28 83       	st	Y, r18
   1aac2:	c0 51       	subi	r28, 0x10	; 16
   1aac4:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1aac6:	f9 01       	movw	r30, r18
   1aac8:	a0 80       	ld	r10, Z
   1aaca:	b1 80       	ldd	r11, Z+1	; 0x01
   1aacc:	0b 2c       	mov	r0, r11
   1aace:	00 0c       	add	r0, r0
   1aad0:	cc 08       	sbc	r12, r12
   1aad2:	dd 08       	sbc	r13, r13
   1aad4:	e1 2c       	mov	r14, r1
   1aad6:	f1 2c       	mov	r15, r1
   1aad8:	87 01       	movw	r16, r14
   1aada:	e3 94       	inc	r14
   1aadc:	21 e0       	ldi	r18, 0x01	; 1
   1aade:	30 e0       	ldi	r19, 0x00	; 0
   1aae0:	40 e0       	ldi	r20, 0x00	; 0
   1aae2:	50 e0       	ldi	r21, 0x00	; 0
   1aae4:	6d e8       	ldi	r22, 0x8D	; 141
   1aae6:	76 e1       	ldi	r23, 0x16	; 22
   1aae8:	c3 01       	movw	r24, r6
   1aaea:	0e 94 aa c7 	call	0x18f54	; 0x18f54 <lif_create_volume>
   1aaee:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1aaf0:	89 2b       	or	r24, r25
   1aaf2:	d1 f2       	breq	.-76     	; 0x1aaa8 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1aaf4:	81 e2       	ldi	r24, 0x21	; 33
   1aaf6:	f4 01       	movw	r30, r8
   1aaf8:	e1 5b       	subi	r30, 0xB1	; 177
   1aafa:	ff 4f       	sbci	r31, 0xFF	; 255
   1aafc:	d7 01       	movw	r26, r14
   1aafe:	a1 5b       	subi	r26, 0xB1	; 177
   1ab00:	bf 4f       	sbci	r27, 0xFF	; 255
   1ab02:	01 90       	ld	r0, Z+
   1ab04:	0d 92       	st	X+, r0
   1ab06:	8a 95       	dec	r24
   1ab08:	e1 f7       	brne	.-8      	; 0x1ab02 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1ab0a:	82 e0       	ldi	r24, 0x02	; 2
   1ab0c:	90 e0       	ldi	r25, 0x00	; 0
   1ab0e:	a0 e0       	ldi	r26, 0x00	; 0
   1ab10:	b0 e0       	ldi	r27, 0x00	; 0
   1ab12:	f7 01       	movw	r30, r14
   1ab14:	e4 5a       	subi	r30, 0xA4	; 164
   1ab16:	ff 4f       	sbci	r31, 0xFF	; 255
   1ab18:	80 83       	st	Z, r24
   1ab1a:	91 83       	std	Z+1, r25	; 0x01
   1ab1c:	a2 83       	std	Z+2, r26	; 0x02
   1ab1e:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1ab20:	c0 5f       	subi	r28, 0xF0	; 240
   1ab22:	de 4f       	sbci	r29, 0xFE	; 254
   1ab24:	e8 81       	ld	r30, Y
   1ab26:	f9 81       	ldd	r31, Y+1	; 0x01
   1ab28:	c0 51       	subi	r28, 0x10	; 16
   1ab2a:	d1 40       	sbci	r29, 0x01	; 1
   1ab2c:	80 81       	ld	r24, Z
   1ab2e:	91 81       	ldd	r25, Z+1	; 0x01
   1ab30:	a2 81       	ldd	r26, Z+2	; 0x02
   1ab32:	b3 81       	ldd	r27, Z+3	; 0x03
   1ab34:	f7 01       	movw	r30, r14
   1ab36:	80 8b       	std	Z+16, r24	; 0x10
   1ab38:	91 8b       	std	Z+17, r25	; 0x11
   1ab3a:	a2 8b       	std	Z+18, r26	; 0x12
   1ab3c:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1ab3e:	60 e0       	ldi	r22, 0x00	; 0
   1ab40:	70 e0       	ldi	r23, 0x00	; 0
   1ab42:	c7 01       	movw	r24, r14
   1ab44:	0e 94 2e c6 	call	0x18c5c	; 0x18c5c <lif_writedirindex>
   1ab48:	8c 01       	movw	r16, r24
   1ab4a:	89 2b       	or	r24, r25
   1ab4c:	41 f0       	breq	.+16     	; 0x1ab5e <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1ab4e:	61 e0       	ldi	r22, 0x01	; 1
   1ab50:	70 e0       	ldi	r23, 0x00	; 0
   1ab52:	c7 01       	movw	r24, r14
   1ab54:	0e 94 8a c6 	call	0x18d14	; 0x18d14 <lif_writedirEOF>
   1ab58:	8c 01       	movw	r16, r24
   1ab5a:	89 2b       	or	r24, r25
   1ab5c:	39 f4       	brne	.+14     	; 0x1ab6c <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ab5e:	c4 01       	movw	r24, r8
   1ab60:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
   1ab64:	c7 01       	movw	r24, r14
   1ab66:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1ab6a:	a3 c0       	rjmp	.+326    	; 0x1acb2 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1ab6c:	f7 01       	movw	r30, r14
   1ab6e:	44 84       	ldd	r4, Z+12	; 0x0c
   1ab70:	55 84       	ldd	r5, Z+13	; 0x0d
   1ab72:	66 84       	ldd	r6, Z+14	; 0x0e
   1ab74:	77 84       	ldd	r7, Z+15	; 0x0f
   1ab76:	76 2c       	mov	r7, r6
   1ab78:	65 2c       	mov	r6, r5
   1ab7a:	54 2c       	mov	r5, r4
   1ab7c:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ab7e:	f4 01       	movw	r30, r8
   1ab80:	e4 5a       	subi	r30, 0xA4	; 164
   1ab82:	ff 4f       	sbci	r31, 0xFF	; 255
   1ab84:	80 81       	ld	r24, Z
   1ab86:	91 81       	ldd	r25, Z+1	; 0x01
   1ab88:	a2 81       	ldd	r26, Z+2	; 0x02
   1ab8a:	b3 81       	ldd	r27, Z+3	; 0x03
   1ab8c:	22 27       	eor	r18, r18
   1ab8e:	38 2f       	mov	r19, r24
   1ab90:	49 2f       	mov	r20, r25
   1ab92:	5a 2f       	mov	r21, r26
   1ab94:	c4 5f       	subi	r28, 0xF4	; 244
   1ab96:	de 4f       	sbci	r29, 0xFE	; 254
   1ab98:	28 83       	st	Y, r18
   1ab9a:	39 83       	std	Y+1, r19	; 0x01
   1ab9c:	4a 83       	std	Y+2, r20	; 0x02
   1ab9e:	5b 83       	std	Y+3, r21	; 0x03
   1aba0:	cc 50       	subi	r28, 0x0C	; 12
   1aba2:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1aba4:	21 2c       	mov	r2, r1
   1aba6:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1aba8:	8f e3       	ldi	r24, 0x3F	; 63
   1abaa:	91 e3       	ldi	r25, 0x31	; 49
   1abac:	9c 01       	movw	r18, r24
   1abae:	40 e0       	ldi	r20, 0x00	; 0
   1abb0:	ce 5e       	subi	r28, 0xEE	; 238
   1abb2:	de 4f       	sbci	r29, 0xFE	; 254
   1abb4:	28 83       	st	Y, r18
   1abb6:	39 83       	std	Y+1, r19	; 0x01
   1abb8:	4a 83       	std	Y+2, r20	; 0x02
   1abba:	c2 51       	subi	r28, 0x12	; 18
   1abbc:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1abbe:	c0 5f       	subi	r28, 0xF0	; 240
   1abc0:	de 4f       	sbci	r29, 0xFE	; 254
   1abc2:	e8 81       	ld	r30, Y
   1abc4:	f9 81       	ldd	r31, Y+1	; 0x01
   1abc6:	c0 51       	subi	r28, 0x10	; 16
   1abc8:	d1 40       	sbci	r29, 0x01	; 1
   1abca:	80 81       	ld	r24, Z
   1abcc:	91 81       	ldd	r25, Z+1	; 0x01
   1abce:	28 16       	cp	r2, r24
   1abd0:	39 06       	cpc	r3, r25
   1abd2:	0c f0       	brlt	.+2      	; 0x1abd6 <lif_extract_lif_as_lif+0x188>
   1abd4:	58 c0       	rjmp	.+176    	; 0x1ac86 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1abd6:	00 e0       	ldi	r16, 0x00	; 0
   1abd8:	11 e0       	ldi	r17, 0x01	; 1
   1abda:	c4 5f       	subi	r28, 0xF4	; 244
   1abdc:	de 4f       	sbci	r29, 0xFE	; 254
   1abde:	28 81       	ld	r18, Y
   1abe0:	39 81       	ldd	r19, Y+1	; 0x01
   1abe2:	4a 81       	ldd	r20, Y+2	; 0x02
   1abe4:	5b 81       	ldd	r21, Y+3	; 0x03
   1abe6:	cc 50       	subi	r28, 0x0C	; 12
   1abe8:	d1 40       	sbci	r29, 0x01	; 1
   1abea:	be 01       	movw	r22, r28
   1abec:	68 5f       	subi	r22, 0xF8	; 248
   1abee:	7f 4f       	sbci	r23, 0xFF	; 255
   1abf0:	c4 01       	movw	r24, r8
   1abf2:	0e 94 8d bc 	call	0x1791a	; 0x1791a <lif_read>
   1abf6:	5b 01       	movw	r10, r22
   1abf8:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1abfa:	6f 3f       	cpi	r22, 0xFF	; 255
   1abfc:	71 05       	cpc	r23, r1
   1abfe:	09 f0       	breq	.+2      	; 0x1ac02 <lif_extract_lif_as_lif+0x1b4>
   1ac00:	2c f4       	brge	.+10     	; 0x1ac0c <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ac02:	c4 01       	movw	r24, r8
   1ac04:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
   1ac08:	c7 01       	movw	r24, r14
   1ac0a:	4f cf       	rjmp	.-354    	; 0x1aaaa <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1ac0c:	00 e0       	ldi	r16, 0x00	; 0
   1ac0e:	11 e0       	ldi	r17, 0x01	; 1
   1ac10:	a3 01       	movw	r20, r6
   1ac12:	92 01       	movw	r18, r4
   1ac14:	be 01       	movw	r22, r28
   1ac16:	68 5f       	subi	r22, 0xF8	; 248
   1ac18:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac1a:	c7 01       	movw	r24, r14
   1ac1c:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1ac20:	c5 01       	movw	r24, r10
   1ac22:	0b 2c       	mov	r0, r11
   1ac24:	00 0c       	add	r0, r0
   1ac26:	aa 0b       	sbc	r26, r26
   1ac28:	bb 0b       	sbc	r27, r27
   1ac2a:	48 0e       	add	r4, r24
   1ac2c:	59 1e       	adc	r5, r25
   1ac2e:	6a 1e       	adc	r6, r26
   1ac30:	7b 1e       	adc	r7, r27
        offset += size;
   1ac32:	c4 5f       	subi	r28, 0xF4	; 244
   1ac34:	de 4f       	sbci	r29, 0xFE	; 254
   1ac36:	28 81       	ld	r18, Y
   1ac38:	39 81       	ldd	r19, Y+1	; 0x01
   1ac3a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac3c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac3e:	cc 50       	subi	r28, 0x0C	; 12
   1ac40:	d1 40       	sbci	r29, 0x01	; 1
   1ac42:	28 0f       	add	r18, r24
   1ac44:	39 1f       	adc	r19, r25
   1ac46:	4a 1f       	adc	r20, r26
   1ac48:	5b 1f       	adc	r21, r27
   1ac4a:	c4 5f       	subi	r28, 0xF4	; 244
   1ac4c:	de 4f       	sbci	r29, 0xFE	; 254
   1ac4e:	28 83       	st	Y, r18
   1ac50:	39 83       	std	Y+1, r19	; 0x01
   1ac52:	4a 83       	std	Y+2, r20	; 0x02
   1ac54:	5b 83       	std	Y+3, r21	; 0x03
   1ac56:	cc 50       	subi	r28, 0x0C	; 12
   1ac58:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1ac5a:	ed b7       	in	r30, 0x3d	; 61
   1ac5c:	fe b7       	in	r31, 0x3e	; 62
   1ac5e:	44 82       	std	Z+4, r4	; 0x04
   1ac60:	55 82       	std	Z+5, r5	; 0x05
   1ac62:	66 82       	std	Z+6, r6	; 0x06
   1ac64:	77 82       	std	Z+7, r7	; 0x07
   1ac66:	ce 5e       	subi	r28, 0xEE	; 238
   1ac68:	de 4f       	sbci	r29, 0xFE	; 254
   1ac6a:	28 81       	ld	r18, Y
   1ac6c:	39 81       	ldd	r19, Y+1	; 0x01
   1ac6e:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac70:	c2 51       	subi	r28, 0x12	; 18
   1ac72:	d1 40       	sbci	r29, 0x01	; 1
   1ac74:	21 83       	std	Z+1, r18	; 0x01
   1ac76:	32 83       	std	Z+2, r19	; 0x02
   1ac78:	43 83       	std	Z+3, r20	; 0x03
   1ac7a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ac7e:	ff ef       	ldi	r31, 0xFF	; 255
   1ac80:	2f 1a       	sub	r2, r31
   1ac82:	3f 0a       	sbc	r3, r31
   1ac84:	9c cf       	rjmp	.-200    	; 0x1abbe <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ac86:	c4 01       	movw	r24, r8
   1ac88:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
   1ac8c:	c7 01       	movw	r24, r14
   1ac8e:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1ac92:	ed b7       	in	r30, 0x3d	; 61
   1ac94:	fe b7       	in	r31, 0x3e	; 62
   1ac96:	44 82       	std	Z+4, r4	; 0x04
   1ac98:	55 82       	std	Z+5, r5	; 0x05
   1ac9a:	66 82       	std	Z+6, r6	; 0x06
   1ac9c:	77 82       	std	Z+7, r7	; 0x07
   1ac9e:	81 e3       	ldi	r24, 0x31	; 49
   1aca0:	91 e3       	ldi	r25, 0x31	; 49
   1aca2:	a0 e0       	ldi	r26, 0x00	; 0
   1aca4:	81 83       	std	Z+1, r24	; 0x01
   1aca6:	92 83       	std	Z+2, r25	; 0x02
   1aca8:	a3 83       	std	Z+3, r26	; 0x03
   1acaa:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    return(1);
   1acae:	01 e0       	ldi	r16, 0x01	; 1
   1acb0:	10 e0       	ldi	r17, 0x00	; 0
}
   1acb2:	c8 01       	movw	r24, r16
   1acb4:	cc 5e       	subi	r28, 0xEC	; 236
   1acb6:	de 4f       	sbci	r29, 0xFE	; 254
   1acb8:	e2 e1       	ldi	r30, 0x12	; 18
   1acba:	0c 94 de df 	jmp	0x1bfbc	; 0x1bfbc <__epilogue_restores__>

0001acbe <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1acbe:	2f 92       	push	r2
   1acc0:	3f 92       	push	r3
   1acc2:	4f 92       	push	r4
   1acc4:	5f 92       	push	r5
   1acc6:	6f 92       	push	r6
   1acc8:	8f 92       	push	r8
   1acca:	9f 92       	push	r9
   1accc:	af 92       	push	r10
   1acce:	bf 92       	push	r11
   1acd0:	cf 92       	push	r12
   1acd2:	df 92       	push	r13
   1acd4:	ef 92       	push	r14
   1acd6:	ff 92       	push	r15
   1acd8:	0f 93       	push	r16
   1acda:	1f 93       	push	r17
   1acdc:	cf 93       	push	r28
   1acde:	df 93       	push	r29
   1ace0:	cd b7       	in	r28, 0x3d	; 61
   1ace2:	de b7       	in	r29, 0x3e	; 62
   1ace4:	cd 51       	subi	r28, 0x1D	; 29
   1ace6:	d1 40       	sbci	r29, 0x01	; 1
   1ace8:	0f b6       	in	r0, 0x3f	; 63
   1acea:	f8 94       	cli
   1acec:	de bf       	out	0x3e, r29	; 62
   1acee:	0f be       	out	0x3f, r0	; 63
   1acf0:	cd bf       	out	0x3d, r28	; 61
   1acf2:	5c 01       	movw	r10, r24
   1acf4:	7b 01       	movw	r14, r22
   1acf6:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1acf8:	dc 01       	movw	r26, r24
   1acfa:	8c 91       	ld	r24, X
   1acfc:	81 11       	cpse	r24, r1
   1acfe:	03 c0       	rjmp	.+6      	; 0x1ad06 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1ad00:	81 e1       	ldi	r24, 0x11	; 17
   1ad02:	91 e3       	ldi	r25, 0x31	; 49
   1ad04:	06 c0       	rjmp	.+12     	; 0x1ad12 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1ad06:	db 01       	movw	r26, r22
   1ad08:	8c 91       	ld	r24, X
   1ad0a:	81 11       	cpse	r24, r1
   1ad0c:	0b c0       	rjmp	.+22     	; 0x1ad24 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1ad0e:	86 ef       	ldi	r24, 0xF6	; 246
   1ad10:	90 e3       	ldi	r25, 0x30	; 48
   1ad12:	a0 e0       	ldi	r26, 0x00	; 0
   1ad14:	ed b7       	in	r30, 0x3d	; 61
   1ad16:	fe b7       	in	r31, 0x3e	; 62
   1ad18:	81 83       	std	Z+1, r24	; 0x01
   1ad1a:	92 83       	std	Z+2, r25	; 0x02
   1ad1c:	a3 83       	std	Z+3, r26	; 0x03
   1ad1e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1ad22:	25 c1       	rjmp	.+586    	; 0x1af6e <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1ad24:	da 01       	movw	r26, r20
   1ad26:	8c 91       	ld	r24, X
   1ad28:	81 11       	cpse	r24, r1
   1ad2a:	03 c0       	rjmp	.+6      	; 0x1ad32 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1ad2c:	8a ed       	ldi	r24, 0xDA	; 218
   1ad2e:	90 e3       	ldi	r25, 0x30	; 48
   1ad30:	f0 cf       	rjmp	.-32     	; 0x1ad12 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1ad32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ad36:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ad3a:	92 ff       	sbrs	r25, 2
   1ad3c:	10 c0       	rjmp	.+32     	; 0x1ad5e <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1ad3e:	ed b7       	in	r30, 0x3d	; 61
   1ad40:	fe b7       	in	r31, 0x3e	; 62
   1ad42:	51 87       	std	Z+9, r21	; 0x09
   1ad44:	40 87       	std	Z+8, r20	; 0x08
   1ad46:	77 83       	std	Z+7, r23	; 0x07
   1ad48:	66 83       	std	Z+6, r22	; 0x06
   1ad4a:	b5 82       	std	Z+5, r11	; 0x05
   1ad4c:	a4 82       	std	Z+4, r10	; 0x04
   1ad4e:	8b ea       	ldi	r24, 0xAB	; 171
   1ad50:	90 e3       	ldi	r25, 0x30	; 48
   1ad52:	a0 e0       	ldi	r26, 0x00	; 0
   1ad54:	81 83       	std	Z+1, r24	; 0x01
   1ad56:	92 83       	std	Z+2, r25	; 0x02
   1ad58:	a3 83       	std	Z+3, r26	; 0x03
   1ad5a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1ad5e:	63 e0       	ldi	r22, 0x03	; 3
   1ad60:	79 e0       	ldi	r23, 0x09	; 9
   1ad62:	c4 01       	movw	r24, r8
   1ad64:	0e 94 f4 cb 	call	0x197e8	; 0x197e8 <lif_open_volume>
   1ad68:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1ad6a:	00 97       	sbiw	r24, 0x00	; 0
   1ad6c:	09 f4       	brne	.+2      	; 0x1ad70 <lif_add_lif_file+0xb2>
   1ad6e:	ff c0       	rjmp	.+510    	; 0x1af6e <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1ad70:	b7 01       	movw	r22, r14
   1ad72:	09 d8       	rcall	.-4078   	; 0x19d86 <lif_find_file>
    if(index == -1)
   1ad74:	01 96       	adiw	r24, 0x01	; 1
   1ad76:	a1 f4       	brne	.+40     	; 0x1ada0 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1ad78:	ed b7       	in	r30, 0x3d	; 61
   1ad7a:	fe b7       	in	r31, 0x3e	; 62
   1ad7c:	f5 82       	std	Z+5, r15	; 0x05
   1ad7e:	e4 82       	std	Z+4, r14	; 0x04
   1ad80:	88 e9       	ldi	r24, 0x98	; 152
   1ad82:	90 e3       	ldi	r25, 0x30	; 48
   1ad84:	a0 e0       	ldi	r26, 0x00	; 0
   1ad86:	81 83       	std	Z+1, r24	; 0x01
   1ad88:	92 83       	std	Z+2, r25	; 0x02
   1ad8a:	a3 83       	std	Z+3, r26	; 0x03
   1ad8c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ad90:	c6 01       	movw	r24, r12
   1ad92:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1ad96:	60 e0       	ldi	r22, 0x00	; 0
   1ad98:	70 e0       	ldi	r23, 0x00	; 0
   1ad9a:	80 e0       	ldi	r24, 0x00	; 0
   1ad9c:	90 e0       	ldi	r25, 0x00	; 0
   1ad9e:	ff c0       	rjmp	.+510    	; 0x1af9e <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1ada0:	63 e0       	ldi	r22, 0x03	; 3
   1ada2:	79 e0       	ldi	r23, 0x09	; 9
   1ada4:	c5 01       	movw	r24, r10
   1ada6:	0e 94 f4 cb 	call	0x197e8	; 0x197e8 <lif_open_volume>
   1adaa:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1adac:	00 97       	sbiw	r24, 0x00	; 0
   1adae:	09 f4       	brne	.+2      	; 0x1adb2 <lif_add_lif_file+0xf4>
   1adb0:	de c0       	rjmp	.+444    	; 0x1af6e <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1adb2:	f6 01       	movw	r30, r12
   1adb4:	e0 5a       	subi	r30, 0xA0	; 160
   1adb6:	ff 4f       	sbci	r31, 0xFF	; 255
   1adb8:	40 81       	ld	r20, Z
   1adba:	51 81       	ldd	r21, Z+1	; 0x01
   1adbc:	62 81       	ldd	r22, Z+2	; 0x02
   1adbe:	73 81       	ldd	r23, Z+3	; 0x03
   1adc0:	0e 94 94 ca 	call	0x19528	; 0x19528 <lif_newdir>
   1adc4:	ca 5e       	subi	r28, 0xEA	; 234
   1adc6:	de 4f       	sbci	r29, 0xFE	; 254
   1adc8:	99 83       	std	Y+1, r25	; 0x01
   1adca:	88 83       	st	Y, r24
   1adcc:	c6 51       	subi	r28, 0x16	; 22
   1adce:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1add0:	01 96       	adiw	r24, 0x01	; 1
   1add2:	79 f4       	brne	.+30     	; 0x1adf2 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1add4:	ed b7       	in	r30, 0x3d	; 61
   1add6:	fe b7       	in	r31, 0x3e	; 62
   1add8:	97 82       	std	Z+7, r9	; 0x07
   1adda:	86 82       	std	Z+6, r8	; 0x06
   1addc:	b5 82       	std	Z+5, r11	; 0x05
   1adde:	a4 82       	std	Z+4, r10	; 0x04
   1ade0:	88 e6       	ldi	r24, 0x68	; 104
   1ade2:	90 e3       	ldi	r25, 0x30	; 48
   1ade4:	a0 e0       	ldi	r26, 0x00	; 0
   1ade6:	81 83       	std	Z+1, r24	; 0x01
   1ade8:	92 83       	std	Z+2, r25	; 0x02
   1adea:	a3 83       	std	Z+3, r26	; 0x03
   1adec:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1adf0:	a8 c0       	rjmp	.+336    	; 0x1af42 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1adf2:	c7 01       	movw	r24, r14
   1adf4:	84 5a       	subi	r24, 0xA4	; 164
   1adf6:	9f 4f       	sbci	r25, 0xFF	; 255
   1adf8:	dc 01       	movw	r26, r24
   1adfa:	4d 91       	ld	r20, X+
   1adfc:	5d 91       	ld	r21, X+
   1adfe:	6d 91       	ld	r22, X+
   1ae00:	7c 91       	ld	r23, X
   1ae02:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1ae04:	21 e2       	ldi	r18, 0x21	; 33
   1ae06:	f6 01       	movw	r30, r12
   1ae08:	e1 5b       	subi	r30, 0xB1	; 177
   1ae0a:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae0c:	1d 97       	sbiw	r26, 0x0d	; 13
   1ae0e:	01 90       	ld	r0, Z+
   1ae10:	0d 92       	st	X+, r0
   1ae12:	2a 95       	dec	r18
   1ae14:	e1 f7       	brne	.-8      	; 0x1ae0e <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1ae16:	fc 01       	movw	r30, r24
   1ae18:	40 83       	st	Z, r20
   1ae1a:	51 83       	std	Z+1, r21	; 0x01
   1ae1c:	62 83       	std	Z+2, r22	; 0x02
   1ae1e:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ae20:	b6 2f       	mov	r27, r22
   1ae22:	a5 2f       	mov	r26, r21
   1ae24:	94 2f       	mov	r25, r20
   1ae26:	88 27       	eor	r24, r24
   1ae28:	c2 5f       	subi	r28, 0xF2	; 242
   1ae2a:	de 4f       	sbci	r29, 0xFE	; 254
   1ae2c:	88 83       	st	Y, r24
   1ae2e:	99 83       	std	Y+1, r25	; 0x01
   1ae30:	aa 83       	std	Y+2, r26	; 0x02
   1ae32:	bb 83       	std	Y+3, r27	; 0x03
   1ae34:	ce 50       	subi	r28, 0x0E	; 14
   1ae36:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ae38:	f6 01       	movw	r30, r12
   1ae3a:	e4 5a       	subi	r30, 0xA4	; 164
   1ae3c:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae3e:	80 81       	ld	r24, Z
   1ae40:	91 81       	ldd	r25, Z+1	; 0x01
   1ae42:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae44:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae46:	22 27       	eor	r18, r18
   1ae48:	38 2f       	mov	r19, r24
   1ae4a:	49 2f       	mov	r20, r25
   1ae4c:	5a 2f       	mov	r21, r26
   1ae4e:	ce 5e       	subi	r28, 0xEE	; 238
   1ae50:	de 4f       	sbci	r29, 0xFE	; 254
   1ae52:	28 83       	st	Y, r18
   1ae54:	39 83       	std	Y+1, r19	; 0x01
   1ae56:	4a 83       	std	Y+2, r20	; 0x02
   1ae58:	5b 83       	std	Y+3, r21	; 0x03
   1ae5a:	c2 51       	subi	r28, 0x12	; 18
   1ae5c:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ae5e:	21 2c       	mov	r2, r1
   1ae60:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1ae62:	81 2c       	mov	r8, r1
   1ae64:	91 2c       	mov	r9, r1
   1ae66:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ae68:	a7 01       	movw	r20, r14
   1ae6a:	40 5a       	subi	r20, 0xA0	; 160
   1ae6c:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae6e:	c4 5e       	subi	r28, 0xE4	; 228
   1ae70:	de 4f       	sbci	r29, 0xFE	; 254
   1ae72:	59 83       	std	Y+1, r21	; 0x01
   1ae74:	48 83       	st	Y, r20
   1ae76:	cc 51       	subi	r28, 0x1C	; 28
   1ae78:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1ae7a:	8a e5       	ldi	r24, 0x5A	; 90
   1ae7c:	90 e3       	ldi	r25, 0x30	; 48
   1ae7e:	2c 01       	movw	r4, r24
   1ae80:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ae82:	27 c0       	rjmp	.+78     	; 0x1aed2 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1ae84:	00 e0       	ldi	r16, 0x00	; 0
   1ae86:	11 e0       	ldi	r17, 0x01	; 1
   1ae88:	c8 5e       	subi	r28, 0xE8	; 232
   1ae8a:	de 4f       	sbci	r29, 0xFE	; 254
   1ae8c:	28 81       	ld	r18, Y
   1ae8e:	39 81       	ldd	r19, Y+1	; 0x01
   1ae90:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae92:	5b 81       	ldd	r21, Y+3	; 0x03
   1ae94:	c8 51       	subi	r28, 0x18	; 24
   1ae96:	d1 40       	sbci	r29, 0x01	; 1
   1ae98:	be 01       	movw	r22, r28
   1ae9a:	66 5f       	subi	r22, 0xF6	; 246
   1ae9c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae9e:	c7 01       	movw	r24, r14
   1aea0:	0e 94 de bc 	call	0x179bc	; 0x179bc <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1aea4:	8f 3f       	cpi	r24, 0xFF	; 255
   1aea6:	91 05       	cpc	r25, r1
   1aea8:	09 f0       	breq	.+2      	; 0x1aeac <lif_add_lif_file+0x1ee>
   1aeaa:	0c f4       	brge	.+2      	; 0x1aeae <lif_add_lif_file+0x1f0>
   1aeac:	4a c0       	rjmp	.+148    	; 0x1af42 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1aeae:	5f ef       	ldi	r21, 0xFF	; 255
   1aeb0:	95 1a       	sub	r9, r21
   1aeb2:	a5 0a       	sbc	r10, r21
   1aeb4:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1aeb6:	ed b7       	in	r30, 0x3d	; 61
   1aeb8:	fe b7       	in	r31, 0x3e	; 62
   1aeba:	84 82       	std	Z+4, r8	; 0x04
   1aebc:	95 82       	std	Z+5, r9	; 0x05
   1aebe:	a6 82       	std	Z+6, r10	; 0x06
   1aec0:	b7 82       	std	Z+7, r11	; 0x07
   1aec2:	41 82       	std	Z+1, r4	; 0x01
   1aec4:	52 82       	std	Z+2, r5	; 0x02
   1aec6:	63 82       	std	Z+3, r6	; 0x03
   1aec8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1aecc:	ff ef       	ldi	r31, 0xFF	; 255
   1aece:	2f 1a       	sub	r2, r31
   1aed0:	3f 0a       	sbc	r3, r31
   1aed2:	ce 5e       	subi	r28, 0xEE	; 238
   1aed4:	de 4f       	sbci	r29, 0xFE	; 254
   1aed6:	28 81       	ld	r18, Y
   1aed8:	39 81       	ldd	r19, Y+1	; 0x01
   1aeda:	4a 81       	ldd	r20, Y+2	; 0x02
   1aedc:	5b 81       	ldd	r21, Y+3	; 0x03
   1aede:	c2 51       	subi	r28, 0x12	; 18
   1aee0:	d1 40       	sbci	r29, 0x01	; 1
   1aee2:	28 0d       	add	r18, r8
   1aee4:	39 1d       	adc	r19, r9
   1aee6:	4a 1d       	adc	r20, r10
   1aee8:	5b 1d       	adc	r21, r11
   1aeea:	c2 5f       	subi	r28, 0xF2	; 242
   1aeec:	de 4f       	sbci	r29, 0xFE	; 254
   1aeee:	88 81       	ld	r24, Y
   1aef0:	99 81       	ldd	r25, Y+1	; 0x01
   1aef2:	aa 81       	ldd	r26, Y+2	; 0x02
   1aef4:	bb 81       	ldd	r27, Y+3	; 0x03
   1aef6:	ce 50       	subi	r28, 0x0E	; 14
   1aef8:	d1 40       	sbci	r29, 0x01	; 1
   1aefa:	88 0d       	add	r24, r8
   1aefc:	99 1d       	adc	r25, r9
   1aefe:	aa 1d       	adc	r26, r10
   1af00:	bb 1d       	adc	r27, r11
   1af02:	c8 5e       	subi	r28, 0xE8	; 232
   1af04:	de 4f       	sbci	r29, 0xFE	; 254
   1af06:	88 83       	st	Y, r24
   1af08:	99 83       	std	Y+1, r25	; 0x01
   1af0a:	aa 83       	std	Y+2, r26	; 0x02
   1af0c:	bb 83       	std	Y+3, r27	; 0x03
   1af0e:	c8 51       	subi	r28, 0x18	; 24
   1af10:	d1 40       	sbci	r29, 0x01	; 1
   1af12:	c4 5e       	subi	r28, 0xE4	; 228
   1af14:	de 4f       	sbci	r29, 0xFE	; 254
   1af16:	a8 81       	ld	r26, Y
   1af18:	b9 81       	ldd	r27, Y+1	; 0x01
   1af1a:	cc 51       	subi	r28, 0x1C	; 28
   1af1c:	d1 40       	sbci	r29, 0x01	; 1
   1af1e:	8d 91       	ld	r24, X+
   1af20:	9c 91       	ld	r25, X
   1af22:	28 16       	cp	r2, r24
   1af24:	39 06       	cpc	r3, r25
   1af26:	94 f4       	brge	.+36     	; 0x1af4c <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1af28:	00 e0       	ldi	r16, 0x00	; 0
   1af2a:	11 e0       	ldi	r17, 0x01	; 1
   1af2c:	be 01       	movw	r22, r28
   1af2e:	66 5f       	subi	r22, 0xF6	; 246
   1af30:	7f 4f       	sbci	r23, 0xFF	; 255
   1af32:	c6 01       	movw	r24, r12
   1af34:	0e 94 8d bc 	call	0x1791a	; 0x1791a <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1af38:	6f 3f       	cpi	r22, 0xFF	; 255
   1af3a:	71 05       	cpc	r23, r1
   1af3c:	11 f0       	breq	.+4      	; 0x1af42 <lif_add_lif_file+0x284>
   1af3e:	0c f0       	brlt	.+2      	; 0x1af42 <lif_add_lif_file+0x284>
   1af40:	a1 cf       	rjmp	.-190    	; 0x1ae84 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af42:	c7 01       	movw	r24, r14
   1af44:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
   1af48:	c6 01       	movw	r24, r12
   1af4a:	0f c0       	rjmp	.+30     	; 0x1af6a <lif_add_lif_file+0x2ac>
   1af4c:	c6 01       	movw	r24, r12
   1af4e:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1af52:	ca 5e       	subi	r28, 0xEA	; 234
   1af54:	de 4f       	sbci	r29, 0xFE	; 254
   1af56:	68 81       	ld	r22, Y
   1af58:	79 81       	ldd	r23, Y+1	; 0x01
   1af5a:	c6 51       	subi	r28, 0x16	; 22
   1af5c:	d1 40       	sbci	r29, 0x01	; 1
   1af5e:	c7 01       	movw	r24, r14
   1af60:	0e 94 2e c6 	call	0x18c5c	; 0x18c5c <lif_writedirindex>
   1af64:	89 2b       	or	r24, r25
   1af66:	41 f4       	brne	.+16     	; 0x1af78 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af68:	c7 01       	movw	r24, r14
   1af6a:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1af6e:	6f ef       	ldi	r22, 0xFF	; 255
   1af70:	7f ef       	ldi	r23, 0xFF	; 255
   1af72:	8f ef       	ldi	r24, 0xFF	; 255
   1af74:	9f ef       	ldi	r25, 0xFF	; 255
   1af76:	13 c0       	rjmp	.+38     	; 0x1af9e <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af78:	c7 01       	movw	r24, r14
   1af7a:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1af7e:	ed b7       	in	r30, 0x3d	; 61
   1af80:	fe b7       	in	r31, 0x3e	; 62
   1af82:	84 82       	std	Z+4, r8	; 0x04
   1af84:	95 82       	std	Z+5, r9	; 0x05
   1af86:	a6 82       	std	Z+6, r10	; 0x06
   1af88:	b7 82       	std	Z+7, r11	; 0x07
   1af8a:	8c e4       	ldi	r24, 0x4C	; 76
   1af8c:	90 e3       	ldi	r25, 0x30	; 48
   1af8e:	a0 e0       	ldi	r26, 0x00	; 0
   1af90:	81 83       	std	Z+1, r24	; 0x01
   1af92:	92 83       	std	Z+2, r25	; 0x02
   1af94:	a3 83       	std	Z+3, r26	; 0x03
   1af96:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    return(bytes);
   1af9a:	b4 01       	movw	r22, r8
   1af9c:	c5 01       	movw	r24, r10
}
   1af9e:	c3 5e       	subi	r28, 0xE3	; 227
   1afa0:	de 4f       	sbci	r29, 0xFE	; 254
   1afa2:	0f b6       	in	r0, 0x3f	; 63
   1afa4:	f8 94       	cli
   1afa6:	de bf       	out	0x3e, r29	; 62
   1afa8:	0f be       	out	0x3f, r0	; 63
   1afaa:	cd bf       	out	0x3d, r28	; 61
   1afac:	df 91       	pop	r29
   1afae:	cf 91       	pop	r28
   1afb0:	1f 91       	pop	r17
   1afb2:	0f 91       	pop	r16
   1afb4:	ff 90       	pop	r15
   1afb6:	ef 90       	pop	r14
   1afb8:	df 90       	pop	r13
   1afba:	cf 90       	pop	r12
   1afbc:	bf 90       	pop	r11
   1afbe:	af 90       	pop	r10
   1afc0:	9f 90       	pop	r9
   1afc2:	8f 90       	pop	r8
   1afc4:	6f 90       	pop	r6
   1afc6:	5f 90       	pop	r5
   1afc8:	4f 90       	pop	r4
   1afca:	3f 90       	pop	r3
   1afcc:	2f 90       	pop	r2
   1afce:	08 95       	ret

0001afd0 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1afd0:	ef 92       	push	r14
   1afd2:	ff 92       	push	r15
   1afd4:	0f 93       	push	r16
   1afd6:	1f 93       	push	r17
   1afd8:	cf 93       	push	r28
   1afda:	df 93       	push	r29
   1afdc:	ad b7       	in	r26, 0x3d	; 61
   1afde:	be b7       	in	r27, 0x3e	; 62
   1afe0:	17 97       	sbiw	r26, 0x07	; 7
   1afe2:	0f b6       	in	r0, 0x3f	; 63
   1afe4:	f8 94       	cli
   1afe6:	be bf       	out	0x3e, r27	; 62
   1afe8:	0f be       	out	0x3f, r0	; 63
   1afea:	ad bf       	out	0x3d, r26	; 61
   1afec:	7c 01       	movw	r14, r24
   1afee:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1aff0:	fc 01       	movw	r30, r24
   1aff2:	80 81       	ld	r24, Z
   1aff4:	81 11       	cpse	r24, r1
   1aff6:	03 c0       	rjmp	.+6      	; 0x1affe <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1aff8:	87 e2       	ldi	r24, 0x27	; 39
   1affa:	90 e3       	ldi	r25, 0x30	; 48
   1affc:	06 c0       	rjmp	.+12     	; 0x1b00a <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1affe:	fb 01       	movw	r30, r22
   1b000:	80 81       	ld	r24, Z
   1b002:	81 11       	cpse	r24, r1
   1b004:	0b c0       	rjmp	.+22     	; 0x1b01c <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b006:	87 e0       	ldi	r24, 0x07	; 7
   1b008:	90 e3       	ldi	r25, 0x30	; 48
   1b00a:	a0 e0       	ldi	r26, 0x00	; 0
   1b00c:	ed b7       	in	r30, 0x3d	; 61
   1b00e:	fe b7       	in	r31, 0x3e	; 62
   1b010:	81 83       	std	Z+1, r24	; 0x01
   1b012:	92 83       	std	Z+2, r25	; 0x02
   1b014:	a3 83       	std	Z+3, r26	; 0x03
   1b016:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1b01a:	68 c0       	rjmp	.+208    	; 0x1b0ec <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b01c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b020:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b024:	92 ff       	sbrs	r25, 2
   1b026:	0e c0       	rjmp	.+28     	; 0x1b044 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b028:	ed b7       	in	r30, 0x3d	; 61
   1b02a:	fe b7       	in	r31, 0x3e	; 62
   1b02c:	77 83       	std	Z+7, r23	; 0x07
   1b02e:	66 83       	std	Z+6, r22	; 0x06
   1b030:	f5 82       	std	Z+5, r15	; 0x05
   1b032:	e4 82       	std	Z+4, r14	; 0x04
   1b034:	88 ee       	ldi	r24, 0xE8	; 232
   1b036:	9f e2       	ldi	r25, 0x2F	; 47
   1b038:	a0 e0       	ldi	r26, 0x00	; 0
   1b03a:	81 83       	std	Z+1, r24	; 0x01
   1b03c:	92 83       	std	Z+2, r25	; 0x02
   1b03e:	a3 83       	std	Z+3, r26	; 0x03
   1b040:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b044:	63 e0       	ldi	r22, 0x03	; 3
   1b046:	79 e0       	ldi	r23, 0x09	; 9
   1b048:	c7 01       	movw	r24, r14
   1b04a:	0e 94 f4 cb 	call	0x197e8	; 0x197e8 <lif_open_volume>
   1b04e:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b050:	00 97       	sbiw	r24, 0x00	; 0
   1b052:	09 f4       	brne	.+2      	; 0x1b056 <lif_del_file+0x86>
   1b054:	4b c0       	rjmp	.+150    	; 0x1b0ec <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b056:	b8 01       	movw	r22, r16
   1b058:	0e 94 c3 ce 	call	0x19d86	; 0x19d86 <lif_find_file>
    if(index == -1)
   1b05c:	8f 3f       	cpi	r24, 0xFF	; 255
   1b05e:	ff ef       	ldi	r31, 0xFF	; 255
   1b060:	9f 07       	cpc	r25, r31
   1b062:	a1 f4       	brne	.+40     	; 0x1b08c <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b064:	ce 01       	movw	r24, r28
   1b066:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b06a:	ed b7       	in	r30, 0x3d	; 61
   1b06c:	fe b7       	in	r31, 0x3e	; 62
   1b06e:	17 83       	std	Z+7, r17	; 0x07
   1b070:	06 83       	std	Z+6, r16	; 0x06
   1b072:	f5 82       	std	Z+5, r15	; 0x05
   1b074:	e4 82       	std	Z+4, r14	; 0x04
   1b076:	80 ec       	ldi	r24, 0xC0	; 192
   1b078:	9f e2       	ldi	r25, 0x2F	; 47
   1b07a:	a0 e0       	ldi	r26, 0x00	; 0
   1b07c:	81 83       	std	Z+1, r24	; 0x01
   1b07e:	92 83       	std	Z+2, r25	; 0x02
   1b080:	a3 83       	std	Z+3, r26	; 0x03
   1b082:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        return(0);
   1b086:	80 e0       	ldi	r24, 0x00	; 0
   1b088:	90 e0       	ldi	r25, 0x00	; 0
   1b08a:	32 c0       	rjmp	.+100    	; 0x1b0f0 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b08c:	2a a1       	ldd	r18, Y+34	; 0x22
   1b08e:	3b a1       	ldd	r19, Y+35	; 0x23
   1b090:	21 50       	subi	r18, 0x01	; 1
   1b092:	31 09       	sbc	r19, r1
   1b094:	fe 01       	movw	r30, r28
   1b096:	e6 5a       	subi	r30, 0xA6	; 166
   1b098:	ff 4f       	sbci	r31, 0xFF	; 255
   1b09a:	82 17       	cp	r24, r18
   1b09c:	93 07       	cpc	r25, r19
   1b09e:	2c f0       	brlt	.+10     	; 0x1b0aa <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b0a0:	2f ef       	ldi	r18, 0xFF	; 255
   1b0a2:	3f ef       	ldi	r19, 0xFF	; 255
   1b0a4:	31 83       	std	Z+1, r19	; 0x01
   1b0a6:	20 83       	st	Z, r18
   1b0a8:	02 c0       	rjmp	.+4      	; 0x1b0ae <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b0aa:	11 82       	std	Z+1, r1	; 0x01
   1b0ac:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b0ae:	bc 01       	movw	r22, r24
   1b0b0:	ce 01       	movw	r24, r28
   1b0b2:	0e 94 2e c6 	call	0x18c5c	; 0x18c5c <lif_writedirindex>
   1b0b6:	89 2b       	or	r24, r25
   1b0b8:	21 f4       	brne	.+8      	; 0x1b0c2 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0ba:	ce 01       	movw	r24, r28
   1b0bc:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
   1b0c0:	15 c0       	rjmp	.+42     	; 0x1b0ec <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b0c2:	ce 01       	movw	r24, r28
   1b0c4:	0e 94 a2 c6 	call	0x18d44	; 0x18d44 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0c8:	ce 01       	movw	r24, r28
   1b0ca:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b0ce:	ed b7       	in	r30, 0x3d	; 61
   1b0d0:	fe b7       	in	r31, 0x3e	; 62
   1b0d2:	15 83       	std	Z+5, r17	; 0x05
   1b0d4:	04 83       	std	Z+4, r16	; 0x04
   1b0d6:	81 eb       	ldi	r24, 0xB1	; 177
   1b0d8:	9f e2       	ldi	r25, 0x2F	; 47
   1b0da:	a0 e0       	ldi	r26, 0x00	; 0
   1b0dc:	81 83       	std	Z+1, r24	; 0x01
   1b0de:	92 83       	std	Z+2, r25	; 0x02
   1b0e0:	a3 83       	std	Z+3, r26	; 0x03
   1b0e2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    return(1);
   1b0e6:	81 e0       	ldi	r24, 0x01	; 1
   1b0e8:	90 e0       	ldi	r25, 0x00	; 0
   1b0ea:	02 c0       	rjmp	.+4      	; 0x1b0f0 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b0ec:	8f ef       	ldi	r24, 0xFF	; 255
   1b0ee:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b0f0:	cd b7       	in	r28, 0x3d	; 61
   1b0f2:	de b7       	in	r29, 0x3e	; 62
   1b0f4:	27 96       	adiw	r28, 0x07	; 7
   1b0f6:	e6 e0       	ldi	r30, 0x06	; 6
   1b0f8:	6d c7       	rjmp	.+3802   	; 0x1bfd4 <__epilogue_restores__+0x18>

0001b0fa <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b0fa:	a7 e0       	ldi	r26, 0x07	; 7
   1b0fc:	b0 e0       	ldi	r27, 0x00	; 0
   1b0fe:	e2 e8       	ldi	r30, 0x82	; 130
   1b100:	f8 ed       	ldi	r31, 0xD8	; 216
   1b102:	48 c7       	rjmp	.+3728   	; 0x1bf94 <__prologue_saves__+0x10>
   1b104:	6c 01       	movw	r12, r24
   1b106:	8b 01       	movw	r16, r22
   1b108:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b10a:	fc 01       	movw	r30, r24
   1b10c:	80 81       	ld	r24, Z
   1b10e:	81 11       	cpse	r24, r1
   1b110:	03 c0       	rjmp	.+6      	; 0x1b118 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b112:	89 e8       	ldi	r24, 0x89	; 137
   1b114:	9f e2       	ldi	r25, 0x2F	; 47
   1b116:	06 c0       	rjmp	.+12     	; 0x1b124 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1b118:	fb 01       	movw	r30, r22
   1b11a:	80 81       	ld	r24, Z
   1b11c:	81 11       	cpse	r24, r1
   1b11e:	0b c0       	rjmp	.+22     	; 0x1b136 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b120:	82 e6       	ldi	r24, 0x62	; 98
   1b122:	9f e2       	ldi	r25, 0x2F	; 47
   1b124:	a0 e0       	ldi	r26, 0x00	; 0
   1b126:	ed b7       	in	r30, 0x3d	; 61
   1b128:	fe b7       	in	r31, 0x3e	; 62
   1b12a:	81 83       	std	Z+1, r24	; 0x01
   1b12c:	92 83       	std	Z+2, r25	; 0x02
   1b12e:	a3 83       	std	Z+3, r26	; 0x03
   1b130:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1b134:	58 c0       	rjmp	.+176    	; 0x1b1e6 <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1b136:	fa 01       	movw	r30, r20
   1b138:	80 81       	ld	r24, Z
   1b13a:	81 11       	cpse	r24, r1
   1b13c:	03 c0       	rjmp	.+6      	; 0x1b144 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b13e:	8b e3       	ldi	r24, 0x3B	; 59
   1b140:	9f e2       	ldi	r25, 0x2F	; 47
   1b142:	f0 cf       	rjmp	.-32     	; 0x1b124 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b144:	ca 01       	movw	r24, r20
   1b146:	0e 94 a4 bd 	call	0x17b48	; 0x17b48 <lif_checkname>
   1b14a:	89 2b       	or	r24, r25
   1b14c:	19 f4       	brne	.+6      	; 0x1b154 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b14e:	85 e0       	ldi	r24, 0x05	; 5
   1b150:	9f e2       	ldi	r25, 0x2F	; 47
   1b152:	e8 cf       	rjmp	.-48     	; 0x1b124 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b154:	63 e0       	ldi	r22, 0x03	; 3
   1b156:	79 e0       	ldi	r23, 0x09	; 9
   1b158:	c6 01       	movw	r24, r12
   1b15a:	0e 94 f4 cb 	call	0x197e8	; 0x197e8 <lif_open_volume>
   1b15e:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b160:	00 97       	sbiw	r24, 0x00	; 0
   1b162:	09 f4       	brne	.+2      	; 0x1b166 <lif_rename_file+0x6c>
   1b164:	40 c0       	rjmp	.+128    	; 0x1b1e6 <lif_rename_file+0xec>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b166:	b8 01       	movw	r22, r16
   1b168:	0e 94 c3 ce 	call	0x19d86	; 0x19d86 <lif_find_file>
   1b16c:	5c 01       	movw	r10, r24
    if(index == -1)
   1b16e:	01 96       	adiw	r24, 0x01	; 1
   1b170:	a1 f4       	brne	.+40     	; 0x1b19a <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b172:	ed b7       	in	r30, 0x3d	; 61
   1b174:	fe b7       	in	r31, 0x3e	; 62
   1b176:	17 83       	std	Z+7, r17	; 0x07
   1b178:	06 83       	std	Z+6, r16	; 0x06
   1b17a:	d5 82       	std	Z+5, r13	; 0x05
   1b17c:	c4 82       	std	Z+4, r12	; 0x04
   1b17e:	8c ed       	ldi	r24, 0xDC	; 220
   1b180:	9e e2       	ldi	r25, 0x2E	; 46
   1b182:	a0 e0       	ldi	r26, 0x00	; 0
   1b184:	81 83       	std	Z+1, r24	; 0x01
   1b186:	92 83       	std	Z+2, r25	; 0x02
   1b188:	a3 83       	std	Z+3, r26	; 0x03
   1b18a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b18e:	ce 01       	movw	r24, r28
   1b190:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b194:	80 e0       	ldi	r24, 0x00	; 0
   1b196:	90 e0       	ldi	r25, 0x00	; 0
   1b198:	28 c0       	rjmp	.+80     	; 0x1b1ea <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b19a:	4a e0       	ldi	r20, 0x0A	; 10
   1b19c:	50 e0       	ldi	r21, 0x00	; 0
   1b19e:	b7 01       	movw	r22, r14
   1b1a0:	ce 01       	movw	r24, r28
   1b1a2:	81 5b       	subi	r24, 0xB1	; 177
   1b1a4:	9f 4f       	sbci	r25, 0xFF	; 255
   1b1a6:	0e 94 de bd 	call	0x17bbc	; 0x17bbc <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b1aa:	b5 01       	movw	r22, r10
   1b1ac:	ce 01       	movw	r24, r28
   1b1ae:	0e 94 2e c6 	call	0x18c5c	; 0x18c5c <lif_writedirindex>
   1b1b2:	89 2b       	or	r24, r25
   1b1b4:	21 f4       	brne	.+8      	; 0x1b1be <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1b6:	ce 01       	movw	r24, r28
   1b1b8:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
   1b1bc:	14 c0       	rjmp	.+40     	; 0x1b1e6 <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b1be:	ed b7       	in	r30, 0x3d	; 61
   1b1c0:	fe b7       	in	r31, 0x3e	; 62
   1b1c2:	f7 82       	std	Z+7, r15	; 0x07
   1b1c4:	e6 82       	std	Z+6, r14	; 0x06
   1b1c6:	15 83       	std	Z+5, r17	; 0x05
   1b1c8:	04 83       	std	Z+4, r16	; 0x04
   1b1ca:	85 ec       	ldi	r24, 0xC5	; 197
   1b1cc:	9e e2       	ldi	r25, 0x2E	; 46
   1b1ce:	a0 e0       	ldi	r26, 0x00	; 0
   1b1d0:	81 83       	std	Z+1, r24	; 0x01
   1b1d2:	92 83       	std	Z+2, r25	; 0x02
   1b1d4:	a3 83       	std	Z+3, r26	; 0x03
   1b1d6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1da:	ce 01       	movw	r24, r28
   1b1dc:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b1e0:	81 e0       	ldi	r24, 0x01	; 1
   1b1e2:	90 e0       	ldi	r25, 0x00	; 0
   1b1e4:	02 c0       	rjmp	.+4      	; 0x1b1ea <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b1e6:	8f ef       	ldi	r24, 0xFF	; 255
   1b1e8:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b1ea:	cd b7       	in	r28, 0x3d	; 61
   1b1ec:	de b7       	in	r29, 0x3e	; 62
   1b1ee:	27 96       	adiw	r28, 0x07	; 7
   1b1f0:	ea e0       	ldi	r30, 0x0A	; 10
   1b1f2:	ec c6       	rjmp	.+3544   	; 0x1bfcc <__epilogue_restores__+0x10>

0001b1f4 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b1f4:	4f 92       	push	r4
   1b1f6:	5f 92       	push	r5
   1b1f8:	6f 92       	push	r6
   1b1fa:	7f 92       	push	r7
   1b1fc:	af 92       	push	r10
   1b1fe:	bf 92       	push	r11
   1b200:	cf 92       	push	r12
   1b202:	df 92       	push	r13
   1b204:	ef 92       	push	r14
   1b206:	ff 92       	push	r15
   1b208:	0f 93       	push	r16
   1b20a:	1f 93       	push	r17
   1b20c:	cf 93       	push	r28
   1b20e:	df 93       	push	r29
   1b210:	ad b7       	in	r26, 0x3d	; 61
   1b212:	be b7       	in	r27, 0x3e	; 62
   1b214:	17 97       	sbiw	r26, 0x07	; 7
   1b216:	0f b6       	in	r0, 0x3f	; 63
   1b218:	f8 94       	cli
   1b21a:	be bf       	out	0x3e, r27	; 62
   1b21c:	0f be       	out	0x3f, r0	; 63
   1b21e:	ad bf       	out	0x3d, r26	; 61
   1b220:	27 01       	movw	r4, r14
   1b222:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b224:	dc 01       	movw	r26, r24
   1b226:	ec 91       	ld	r30, X
   1b228:	e1 11       	cpse	r30, r1
   1b22a:	03 c0       	rjmp	.+6      	; 0x1b232 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b22c:	8c e9       	ldi	r24, 0x9C	; 156
   1b22e:	9e e2       	ldi	r25, 0x2E	; 46
   1b230:	16 c0       	rjmp	.+44     	; 0x1b25e <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b232:	db 01       	movw	r26, r22
   1b234:	ec 91       	ld	r30, X
   1b236:	e1 11       	cpse	r30, r1
   1b238:	03 c0       	rjmp	.+6      	; 0x1b240 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b23a:	87 e7       	ldi	r24, 0x77	; 119
   1b23c:	9e e2       	ldi	r25, 0x2E	; 46
   1b23e:	0f c0       	rjmp	.+30     	; 0x1b25e <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b240:	21 15       	cp	r18, r1
   1b242:	31 05       	cpc	r19, r1
   1b244:	41 05       	cpc	r20, r1
   1b246:	51 05       	cpc	r21, r1
   1b248:	19 f4       	brne	.+6      	; 0x1b250 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b24a:	84 e5       	ldi	r24, 0x54	; 84
   1b24c:	9e e2       	ldi	r25, 0x2E	; 46
   1b24e:	07 c0       	rjmp	.+14     	; 0x1b25e <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b250:	e1 14       	cp	r14, r1
   1b252:	f1 04       	cpc	r15, r1
   1b254:	01 05       	cpc	r16, r1
   1b256:	11 05       	cpc	r17, r1
   1b258:	59 f4       	brne	.+22     	; 0x1b270 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b25a:	84 e3       	ldi	r24, 0x34	; 52
   1b25c:	9e e2       	ldi	r25, 0x2E	; 46
   1b25e:	a0 e0       	ldi	r26, 0x00	; 0
   1b260:	ed b7       	in	r30, 0x3d	; 61
   1b262:	fe b7       	in	r31, 0x3e	; 62
   1b264:	81 83       	std	Z+1, r24	; 0x01
   1b266:	92 83       	std	Z+2, r25	; 0x02
   1b268:	a3 83       	std	Z+3, r26	; 0x03
   1b26a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1b26e:	2b c0       	rjmp	.+86     	; 0x1b2c6 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b270:	67 01       	movw	r12, r14
   1b272:	78 01       	movw	r14, r16
   1b274:	f2 e0       	ldi	r31, 0x02	; 2
   1b276:	cf 1a       	sub	r12, r31
   1b278:	d1 08       	sbc	r13, r1
   1b27a:	e1 08       	sbc	r14, r1
   1b27c:	f1 08       	sbc	r15, r1
   1b27e:	56 01       	movw	r10, r12
   1b280:	67 01       	movw	r12, r14
   1b282:	a2 1a       	sub	r10, r18
   1b284:	b3 0a       	sbc	r11, r19
   1b286:	c4 0a       	sbc	r12, r20
   1b288:	d5 0a       	sbc	r13, r21
   1b28a:	79 01       	movw	r14, r18
   1b28c:	8a 01       	movw	r16, r20
   1b28e:	22 e0       	ldi	r18, 0x02	; 2
   1b290:	30 e0       	ldi	r19, 0x00	; 0
   1b292:	40 e0       	ldi	r20, 0x00	; 0
   1b294:	50 e0       	ldi	r21, 0x00	; 0
   1b296:	0e 94 aa c7 	call	0x18f54	; 0x18f54 <lif_create_volume>
    if(LIF == NULL)
   1b29a:	00 97       	sbiw	r24, 0x00	; 0
   1b29c:	a1 f0       	breq	.+40     	; 0x1b2c6 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b29e:	0e 94 39 c5 	call	0x18a72	; 0x18a72 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b2a2:	82 01       	movw	r16, r4
   1b2a4:	d6 2d       	mov	r29, r6
   1b2a6:	c7 2d       	mov	r28, r7
   1b2a8:	ed b7       	in	r30, 0x3d	; 61
   1b2aa:	fe b7       	in	r31, 0x3e	; 62
   1b2ac:	44 82       	std	Z+4, r4	; 0x04
   1b2ae:	15 83       	std	Z+5, r17	; 0x05
   1b2b0:	66 82       	std	Z+6, r6	; 0x06
   1b2b2:	77 82       	std	Z+7, r7	; 0x07
   1b2b4:	84 e1       	ldi	r24, 0x14	; 20
   1b2b6:	9e e2       	ldi	r25, 0x2E	; 46
   1b2b8:	a0 e0       	ldi	r26, 0x00	; 0
   1b2ba:	81 83       	std	Z+1, r24	; 0x01
   1b2bc:	92 83       	std	Z+2, r25	; 0x02
   1b2be:	a3 83       	std	Z+3, r26	; 0x03
   1b2c0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    return(end);
   1b2c4:	04 c0       	rjmp	.+8      	; 0x1b2ce <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b2c6:	0f ef       	ldi	r16, 0xFF	; 255
   1b2c8:	1f ef       	ldi	r17, 0xFF	; 255
   1b2ca:	df ef       	ldi	r29, 0xFF	; 255
   1b2cc:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b2ce:	b8 01       	movw	r22, r16
   1b2d0:	8d 2f       	mov	r24, r29
   1b2d2:	9c 2f       	mov	r25, r28
   1b2d4:	ad b7       	in	r26, 0x3d	; 61
   1b2d6:	be b7       	in	r27, 0x3e	; 62
   1b2d8:	17 96       	adiw	r26, 0x07	; 7
   1b2da:	0f b6       	in	r0, 0x3f	; 63
   1b2dc:	f8 94       	cli
   1b2de:	be bf       	out	0x3e, r27	; 62
   1b2e0:	0f be       	out	0x3f, r0	; 63
   1b2e2:	ad bf       	out	0x3d, r26	; 61
   1b2e4:	df 91       	pop	r29
   1b2e6:	cf 91       	pop	r28
   1b2e8:	1f 91       	pop	r17
   1b2ea:	0f 91       	pop	r16
   1b2ec:	ff 90       	pop	r15
   1b2ee:	ef 90       	pop	r14
   1b2f0:	df 90       	pop	r13
   1b2f2:	cf 90       	pop	r12
   1b2f4:	bf 90       	pop	r11
   1b2f6:	af 90       	pop	r10
   1b2f8:	7f 90       	pop	r7
   1b2fa:	6f 90       	pop	r6
   1b2fc:	5f 90       	pop	r5
   1b2fe:	4f 90       	pop	r4
   1b300:	08 95       	ret

0001b302 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b302:	8f 92       	push	r8
   1b304:	9f 92       	push	r9
   1b306:	af 92       	push	r10
   1b308:	bf 92       	push	r11
   1b30a:	ef 92       	push	r14
   1b30c:	ff 92       	push	r15
   1b30e:	0f 93       	push	r16
   1b310:	1f 93       	push	r17
   1b312:	cf 93       	push	r28
   1b314:	df 93       	push	r29
   1b316:	00 d0       	rcall	.+0      	; 0x1b318 <lif_tests+0x16>
   1b318:	00 d0       	rcall	.+0      	; 0x1b31a <lif_tests+0x18>
   1b31a:	1f 92       	push	r1
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b31c:	82 30       	cpi	r24, 0x02	; 2
   1b31e:	91 05       	cpc	r25, r1
   1b320:	0c f4       	brge	.+2      	; 0x1b324 <lif_tests+0x22>
   1b322:	17 c1       	rjmp	.+558    	; 0x1b552 <lif_tests+0x250>
        return (1);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b324:	fb 01       	movw	r30, r22
   1b326:	02 81       	ldd	r16, Z+2	; 0x02
   1b328:	13 81       	ldd	r17, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b32a:	01 15       	cp	r16, r1
   1b32c:	11 05       	cpc	r17, r1
   1b32e:	09 f4       	brne	.+2      	; 0x1b332 <lif_tests+0x30>
   1b330:	10 c1       	rjmp	.+544    	; 0x1b552 <lif_tests+0x250>
   1b332:	f8 01       	movw	r30, r16
   1b334:	20 81       	ld	r18, Z
   1b336:	22 23       	and	r18, r18
   1b338:	09 f4       	brne	.+2      	; 0x1b33c <lif_tests+0x3a>
   1b33a:	0b c1       	rjmp	.+534    	; 0x1b552 <lif_tests+0x250>
   1b33c:	eb 01       	movw	r28, r22
   1b33e:	7c 01       	movw	r14, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b340:	65 e9       	ldi	r22, 0x95	; 149
   1b342:	76 e1       	ldi	r23, 0x16	; 22
   1b344:	c8 01       	movw	r24, r16
   1b346:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   1b34a:	89 2b       	or	r24, r25
   1b34c:	29 f0       	breq	.+10     	; 0x1b358 <lif_tests+0x56>
    {
        lif_help(1);
   1b34e:	81 e0       	ldi	r24, 0x01	; 1
   1b350:	90 e0       	ldi	r25, 0x00	; 0
   1b352:	0e 94 7e bb 	call	0x176fc	; 0x176fc <lif_help>
   1b356:	fd c0       	rjmp	.+506    	; 0x1b552 <lif_tests+0x250>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b358:	64 e9       	ldi	r22, 0x94	; 148
   1b35a:	76 e1       	ldi	r23, 0x16	; 22
   1b35c:	c8 01       	movw	r24, r16
   1b35e:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   1b362:	89 2b       	or	r24, r25
   1b364:	a1 f7       	brne	.-24     	; 0x1b34e <lif_tests+0x4c>
   1b366:	6a e9       	ldi	r22, 0x9A	; 154
   1b368:	76 e1       	ldi	r23, 0x16	; 22
   1b36a:	c8 01       	movw	r24, r16
   1b36c:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   1b370:	89 2b       	or	r24, r25
   1b372:	69 f7       	brne	.-38     	; 0x1b34e <lif_tests+0x4c>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b374:	97 01       	movw	r18, r14
   1b376:	42 e0       	ldi	r20, 0x02	; 2
   1b378:	50 e0       	ldi	r21, 0x00	; 0
   1b37a:	6d e9       	ldi	r22, 0x9D	; 157
   1b37c:	76 e1       	ldi	r23, 0x16	; 22
   1b37e:	c8 01       	movw	r24, r16
   1b380:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b384:	89 2b       	or	r24, r25
   1b386:	39 f0       	breq	.+14     	; 0x1b396 <lif_tests+0x94>
    {
        debuglevel = 0xffff;
   1b388:	8f ef       	ldi	r24, 0xFF	; 255
   1b38a:	9f ef       	ldi	r25, 0xFF	; 255
   1b38c:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b390:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
   1b394:	de c0       	rjmp	.+444    	; 0x1b552 <lif_tests+0x250>
        return(1);
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b396:	97 01       	movw	r18, r14
   1b398:	45 e0       	ldi	r20, 0x05	; 5
   1b39a:	50 e0       	ldi	r21, 0x00	; 0
   1b39c:	60 ea       	ldi	r22, 0xA0	; 160
   1b39e:	76 e1       	ldi	r23, 0x16	; 22
   1b3a0:	c8 01       	movw	r24, r16
   1b3a2:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b3a6:	89 2b       	or	r24, r25
   1b3a8:	41 f0       	breq	.+16     	; 0x1b3ba <lif_tests+0xb8>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b3aa:	48 85       	ldd	r20, Y+8	; 0x08
   1b3ac:	59 85       	ldd	r21, Y+9	; 0x09
   1b3ae:	6e 81       	ldd	r22, Y+6	; 0x06
   1b3b0:	7f 81       	ldd	r23, Y+7	; 0x07
   1b3b2:	8c 81       	ldd	r24, Y+4	; 0x04
   1b3b4:	9d 81       	ldd	r25, Y+5	; 0x05
   1b3b6:	83 dc       	rcall	.-1786   	; 0x1acbe <lif_add_lif_file>
   1b3b8:	cc c0       	rjmp	.+408    	; 0x1b552 <lif_tests+0x250>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b3ba:	97 01       	movw	r18, r14
   1b3bc:	45 e0       	ldi	r20, 0x05	; 5
   1b3be:	50 e0       	ldi	r21, 0x00	; 0
   1b3c0:	67 ea       	ldi	r22, 0xA7	; 167
   1b3c2:	76 e1       	ldi	r23, 0x16	; 22
   1b3c4:	c8 01       	movw	r24, r16
   1b3c6:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b3ca:	89 2b       	or	r24, r25
   1b3cc:	49 f0       	breq	.+18     	; 0x1b3e0 <lif_tests+0xde>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b3ce:	48 85       	ldd	r20, Y+8	; 0x08
   1b3d0:	59 85       	ldd	r21, Y+9	; 0x09
   1b3d2:	6e 81       	ldd	r22, Y+6	; 0x06
   1b3d4:	7f 81       	ldd	r23, Y+7	; 0x07
   1b3d6:	8c 81       	ldd	r24, Y+4	; 0x04
   1b3d8:	9d 81       	ldd	r25, Y+5	; 0x05
   1b3da:	0e 94 3c d1 	call	0x1a278	; 0x1a278 <lif_add_ascii_file_as_e010>
   1b3de:	b9 c0       	rjmp	.+370    	; 0x1b552 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b3e0:	97 01       	movw	r18, r14
   1b3e2:	45 e0       	ldi	r20, 0x05	; 5
   1b3e4:	50 e0       	ldi	r21, 0x00	; 0
   1b3e6:	6b ea       	ldi	r22, 0xAB	; 171
   1b3e8:	76 e1       	ldi	r23, 0x16	; 22
   1b3ea:	c8 01       	movw	r24, r16
   1b3ec:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b3f0:	89 2b       	or	r24, r25
   1b3f2:	e1 f1       	breq	.+120    	; 0x1b46c <lif_tests+0x16a>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b3f4:	ac 80       	ldd	r10, Y+4	; 0x04
   1b3f6:	bd 80       	ldd	r11, Y+5	; 0x05
        char *label = argv[ind+1];
   1b3f8:	8e 80       	ldd	r8, Y+6	; 0x06
   1b3fa:	9f 80       	ldd	r9, Y+7	; 0x07
        char *model = argv[ind+2];
   1b3fc:	08 84       	ldd	r0, Y+8	; 0x08
   1b3fe:	d9 85       	ldd	r29, Y+9	; 0x09
   1b400:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b402:	66 eb       	ldi	r22, 0xB6	; 182
   1b404:	76 e1       	ldi	r23, 0x16	; 22
   1b406:	ce 01       	movw	r24, r28
   1b408:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <MATCHI_LEN>
   1b40c:	89 2b       	or	r24, r25
   1b40e:	09 f0       	breq	.+2      	; 0x1b412 <lif_tests+0x110>
            model +=2;
   1b410:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b412:	40 e0       	ldi	r20, 0x00	; 0
   1b414:	50 e0       	ldi	r21, 0x00	; 0
   1b416:	60 e0       	ldi	r22, 0x00	; 0
   1b418:	70 e0       	ldi	r23, 0x00	; 0
   1b41a:	ce 01       	movw	r24, r28
   1b41c:	0e 94 d1 9e 	call	0x13da2	; 0x13da2 <hpdir_find_drive>
   1b420:	89 2b       	or	r24, r25
   1b422:	b9 f0       	breq	.+46     	; 0x1b452 <lif_tests+0x150>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b424:	60 91 b0 21 	lds	r22, 0x21B0	; 0x8021b0 <hpdir+0xac>
   1b428:	70 91 b1 21 	lds	r23, 0x21B1	; 0x8021b1 <hpdir+0xad>
   1b42c:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <hpdir+0xae>
   1b430:	90 91 b3 21 	lds	r25, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   1b434:	0e 94 b4 9e 	call	0x13d68	; 0x13d68 <lif_dir_count>
   1b438:	9b 01       	movw	r18, r22
   1b43a:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b43c:	e0 90 b0 21 	lds	r14, 0x21B0	; 0x8021b0 <hpdir+0xac>
   1b440:	f0 90 b1 21 	lds	r15, 0x21B1	; 0x8021b1 <hpdir+0xad>
   1b444:	00 91 b2 21 	lds	r16, 0x21B2	; 0x8021b2 <hpdir+0xae>
   1b448:	10 91 b3 21 	lds	r17, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   1b44c:	b4 01       	movw	r22, r8
   1b44e:	c5 01       	movw	r24, r10
   1b450:	29 c0       	rjmp	.+82     	; 0x1b4a4 <lif_tests+0x1a2>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b452:	ed b7       	in	r30, 0x3d	; 61
   1b454:	fe b7       	in	r31, 0x3e	; 62
   1b456:	d5 83       	std	Z+5, r29	; 0x05
   1b458:	c4 83       	std	Z+4, r28	; 0x04
   1b45a:	88 e4       	ldi	r24, 0x48	; 72
   1b45c:	90 e4       	ldi	r25, 0x40	; 64
   1b45e:	a0 e0       	ldi	r26, 0x00	; 0
   1b460:	81 83       	std	Z+1, r24	; 0x01
   1b462:	92 83       	std	Z+2, r25	; 0x02
   1b464:	a3 83       	std	Z+3, r26	; 0x03
   1b466:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1b46a:	73 c0       	rjmp	.+230    	; 0x1b552 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b46c:	97 01       	movw	r18, r14
   1b46e:	46 e0       	ldi	r20, 0x06	; 6
   1b470:	50 e0       	ldi	r21, 0x00	; 0
   1b472:	69 eb       	ldi	r22, 0xB9	; 185
   1b474:	76 e1       	ldi	r23, 0x16	; 22
   1b476:	c8 01       	movw	r24, r16
   1b478:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b47c:	89 2b       	or	r24, r25
   1b47e:	a1 f0       	breq	.+40     	; 0x1b4a8 <lif_tests+0x1a6>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b480:	88 85       	ldd	r24, Y+8	; 0x08
   1b482:	99 85       	ldd	r25, Y+9	; 0x09
   1b484:	0e 94 12 44 	call	0x8824	; 0x8824 <atol>
   1b488:	4b 01       	movw	r8, r22
   1b48a:	5c 01       	movw	r10, r24
   1b48c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b48e:	9b 85       	ldd	r25, Y+11	; 0x0b
   1b490:	0e 94 12 44 	call	0x8824	; 0x8824 <atol>
   1b494:	7b 01       	movw	r14, r22
   1b496:	8c 01       	movw	r16, r24
   1b498:	6e 81       	ldd	r22, Y+6	; 0x06
   1b49a:	7f 81       	ldd	r23, Y+7	; 0x07
   1b49c:	a5 01       	movw	r20, r10
   1b49e:	94 01       	movw	r18, r8
   1b4a0:	8c 81       	ldd	r24, Y+4	; 0x04
   1b4a2:	9d 81       	ldd	r25, Y+5	; 0x05
   1b4a4:	a7 de       	rcall	.-690    	; 0x1b1f4 <lif_create_image>
   1b4a6:	55 c0       	rjmp	.+170    	; 0x1b552 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1b4a8:	97 01       	movw	r18, r14
   1b4aa:	44 e0       	ldi	r20, 0x04	; 4
   1b4ac:	50 e0       	ldi	r21, 0x00	; 0
   1b4ae:	60 ec       	ldi	r22, 0xC0	; 192
   1b4b0:	76 e1       	ldi	r23, 0x16	; 22
   1b4b2:	c8 01       	movw	r24, r16
   1b4b4:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b4b8:	89 2b       	or	r24, r25
   1b4ba:	31 f0       	breq	.+12     	; 0x1b4c8 <lif_tests+0x1c6>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1b4bc:	6e 81       	ldd	r22, Y+6	; 0x06
   1b4be:	7f 81       	ldd	r23, Y+7	; 0x07
   1b4c0:	8c 81       	ldd	r24, Y+4	; 0x04
   1b4c2:	9d 81       	ldd	r25, Y+5	; 0x05
   1b4c4:	85 dd       	rcall	.-1270   	; 0x1afd0 <lif_del_file>
   1b4c6:	45 c0       	rjmp	.+138    	; 0x1b552 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1b4c8:	97 01       	movw	r18, r14
   1b4ca:	43 e0       	ldi	r20, 0x03	; 3
   1b4cc:	50 e0       	ldi	r21, 0x00	; 0
   1b4ce:	60 ed       	ldi	r22, 0xD0	; 208
   1b4d0:	7b e0       	ldi	r23, 0x0B	; 11
   1b4d2:	c8 01       	movw	r24, r16
   1b4d4:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b4d8:	89 2b       	or	r24, r25
   1b4da:	29 f0       	breq	.+10     	; 0x1b4e6 <lif_tests+0x1e4>
    {
        lif_dir(argv[ind]);
   1b4dc:	8c 81       	ldd	r24, Y+4	; 0x04
   1b4de:	9d 81       	ldd	r25, Y+5	; 0x05
   1b4e0:	0e 94 ee cc 	call	0x199dc	; 0x199dc <lif_dir>
   1b4e4:	36 c0       	rjmp	.+108    	; 0x1b552 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1b4e6:	97 01       	movw	r18, r14
   1b4e8:	45 e0       	ldi	r20, 0x05	; 5
   1b4ea:	50 e0       	ldi	r21, 0x00	; 0
   1b4ec:	64 ec       	ldi	r22, 0xC4	; 196
   1b4ee:	76 e1       	ldi	r23, 0x16	; 22
   1b4f0:	c8 01       	movw	r24, r16
   1b4f2:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b4f6:	89 2b       	or	r24, r25
   1b4f8:	41 f0       	breq	.+16     	; 0x1b50a <lif_tests+0x208>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1b4fa:	48 85       	ldd	r20, Y+8	; 0x08
   1b4fc:	59 85       	ldd	r21, Y+9	; 0x09
   1b4fe:	6e 81       	ldd	r22, Y+6	; 0x06
   1b500:	7f 81       	ldd	r23, Y+7	; 0x07
   1b502:	8c 81       	ldd	r24, Y+4	; 0x04
   1b504:	9d 81       	ldd	r25, Y+5	; 0x05
   1b506:	a3 da       	rcall	.-2746   	; 0x1aa4e <lif_extract_lif_as_lif>
   1b508:	24 c0       	rjmp	.+72     	; 0x1b552 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1b50a:	97 01       	movw	r18, r14
   1b50c:	45 e0       	ldi	r20, 0x05	; 5
   1b50e:	50 e0       	ldi	r21, 0x00	; 0
   1b510:	6f ec       	ldi	r22, 0xCF	; 207
   1b512:	76 e1       	ldi	r23, 0x16	; 22
   1b514:	c8 01       	movw	r24, r16
   1b516:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b51a:	89 2b       	or	r24, r25
   1b51c:	49 f0       	breq	.+18     	; 0x1b530 <lif_tests+0x22e>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1b51e:	48 85       	ldd	r20, Y+8	; 0x08
   1b520:	59 85       	ldd	r21, Y+9	; 0x09
   1b522:	6e 81       	ldd	r22, Y+6	; 0x06
   1b524:	7f 81       	ldd	r23, Y+7	; 0x07
   1b526:	8c 81       	ldd	r24, Y+4	; 0x04
   1b528:	9d 81       	ldd	r25, Y+5	; 0x05
   1b52a:	0e 94 78 d2 	call	0x1a4f0	; 0x1a4f0 <lif_extract_e010_as_ascii>
   1b52e:	11 c0       	rjmp	.+34     	; 0x1b552 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1b530:	97 01       	movw	r18, r14
   1b532:	45 e0       	ldi	r20, 0x05	; 5
   1b534:	50 e0       	ldi	r21, 0x00	; 0
   1b536:	6d ed       	ldi	r22, 0xDD	; 221
   1b538:	7b e0       	ldi	r23, 0x0B	; 11
   1b53a:	c8 01       	movw	r24, r16
   1b53c:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHARGS>
   1b540:	00 97       	sbiw	r24, 0x00	; 0
   1b542:	49 f0       	breq	.+18     	; 0x1b556 <lif_tests+0x254>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b544:	48 85       	ldd	r20, Y+8	; 0x08
   1b546:	59 85       	ldd	r21, Y+9	; 0x09
   1b548:	6e 81       	ldd	r22, Y+6	; 0x06
   1b54a:	7f 81       	ldd	r23, Y+7	; 0x07
   1b54c:	8c 81       	ldd	r24, Y+4	; 0x04
   1b54e:	9d 81       	ldd	r25, Y+5	; 0x05
   1b550:	d4 dd       	rcall	.-1112   	; 0x1b0fa <lif_rename_file>
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
        return (1);
   1b552:	81 e0       	ldi	r24, 0x01	; 1
   1b554:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1b556:	0f 90       	pop	r0
   1b558:	0f 90       	pop	r0
   1b55a:	0f 90       	pop	r0
   1b55c:	0f 90       	pop	r0
   1b55e:	0f 90       	pop	r0
   1b560:	df 91       	pop	r29
   1b562:	cf 91       	pop	r28
   1b564:	1f 91       	pop	r17
   1b566:	0f 91       	pop	r16
   1b568:	ff 90       	pop	r15
   1b56a:	ef 90       	pop	r14
   1b56c:	bf 90       	pop	r11
   1b56e:	af 90       	pop	r10
   1b570:	9f 90       	pop	r9
   1b572:	8f 90       	pop	r8
   1b574:	08 95       	ret

0001b576 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1b576:	80 91 f7 19 	lds	r24, 0x19F7	; 0x8019f7 <lcd_display_time>
   1b57a:	90 91 f8 19 	lds	r25, 0x19F8	; 0x8019f8 <lcd_display_time+0x1>
   1b57e:	01 96       	adiw	r24, 0x01	; 1
   1b580:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <lcd_display_time+0x1>
   1b584:	80 93 f7 19 	sts	0x19F7, r24	; 0x8019f7 <lcd_display_time>
   1b588:	08 95       	ret

0001b58a <copyright>:
#endif

///@brief Display Copyright
///@return void
void copyright()
{
   1b58a:	00 d0       	rcall	.+0      	; 0x1b58c <copyright+0x2>
   1b58c:	00 d0       	rcall	.+0      	; 0x1b58e <copyright+0x4>
   1b58e:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1b590:	81 e0       	ldi	r24, 0x01	; 1
   1b592:	96 e4       	ldi	r25, 0x46	; 70
   1b594:	a0 e0       	ldi	r26, 0x00	; 0
   1b596:	ed b7       	in	r30, 0x3d	; 61
   1b598:	fe b7       	in	r31, 0x3e	; 62
   1b59a:	81 83       	std	Z+1, r24	; 0x01
   1b59c:	92 83       	std	Z+2, r25	; 0x02
   1b59e:	a3 83       	std	Z+3, r26	; 0x03
   1b5a0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1b5a4:	82 ee       	ldi	r24, 0xE2	; 226
   1b5a6:	95 e4       	ldi	r25, 0x45	; 69
   1b5a8:	a0 e0       	ldi	r26, 0x00	; 0
   1b5aa:	ed b7       	in	r30, 0x3d	; 61
   1b5ac:	fe b7       	in	r31, 0x3e	; 62
   1b5ae:	81 83       	std	Z+1, r24	; 0x01
   1b5b0:	92 83       	std	Z+2, r25	; 0x02
   1b5b2:	a3 83       	std	Z+3, r26	; 0x03
   1b5b4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1b5b8:	85 ec       	ldi	r24, 0xC5	; 197
   1b5ba:	95 e4       	ldi	r25, 0x45	; 69
   1b5bc:	a0 e0       	ldi	r26, 0x00	; 0
   1b5be:	ed b7       	in	r30, 0x3d	; 61
   1b5c0:	fe b7       	in	r31, 0x3e	; 62
   1b5c2:	81 83       	std	Z+1, r24	; 0x01
   1b5c4:	92 83       	std	Z+2, r25	; 0x02
   1b5c6:	a3 83       	std	Z+3, r26	; 0x03
   1b5c8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf(" GNU version 3\n");
   1b5cc:	85 eb       	ldi	r24, 0xB5	; 181
   1b5ce:	95 e4       	ldi	r25, 0x45	; 69
   1b5d0:	a0 e0       	ldi	r26, 0x00	; 0
   1b5d2:	ed b7       	in	r30, 0x3d	; 61
   1b5d4:	fe b7       	in	r31, 0x3e	; 62
   1b5d6:	81 83       	std	Z+1, r24	; 0x01
   1b5d8:	92 83       	std	Z+2, r25	; 0x02
   1b5da:	a3 83       	std	Z+3, r26	; 0x03
   1b5dc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1b5e0:	8e e8       	ldi	r24, 0x8E	; 142
   1b5e2:	95 e4       	ldi	r25, 0x45	; 69
   1b5e4:	a0 e0       	ldi	r26, 0x00	; 0
   1b5e6:	ed b7       	in	r30, 0x3d	; 61
   1b5e8:	fe b7       	in	r31, 0x3e	; 62
   1b5ea:	81 83       	std	Z+1, r24	; 0x01
   1b5ec:	92 83       	std	Z+2, r25	; 0x02
   1b5ee:	a3 83       	std	Z+3, r26	; 0x03
   1b5f0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1b5f4:	87 ed       	ldi	r24, 0xD7	; 215
   1b5f6:	96 e1       	ldi	r25, 0x16	; 22
   1b5f8:	ed b7       	in	r30, 0x3d	; 61
   1b5fa:	fe b7       	in	r31, 0x3e	; 62
   1b5fc:	95 83       	std	Z+5, r25	; 0x05
   1b5fe:	84 83       	std	Z+4, r24	; 0x04
   1b600:	84 e7       	ldi	r24, 0x74	; 116
   1b602:	95 e4       	ldi	r25, 0x45	; 69
   1b604:	a0 e0       	ldi	r26, 0x00	; 0
   1b606:	81 83       	std	Z+1, r24	; 0x01
   1b608:	92 83       	std	Z+2, r25	; 0x02
   1b60a:	a3 83       	std	Z+3, r26	; 0x03
   1b60c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1b610:	8b ef       	ldi	r24, 0xFB	; 251
   1b612:	96 e1       	ldi	r25, 0x16	; 22
   1b614:	ed b7       	in	r30, 0x3d	; 61
   1b616:	fe b7       	in	r31, 0x3e	; 62
   1b618:	95 83       	std	Z+5, r25	; 0x05
   1b61a:	84 83       	std	Z+4, r24	; 0x04
   1b61c:	8a e5       	ldi	r24, 0x5A	; 90
   1b61e:	95 e4       	ldi	r25, 0x45	; 69
   1b620:	a0 e0       	ldi	r26, 0x00	; 0
   1b622:	81 83       	std	Z+1, r24	; 0x01
   1b624:	92 83       	std	Z+2, r25	; 0x02
   1b626:	a3 83       	std	Z+3, r26	; 0x03
   1b628:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("\n");
   1b62c:	88 e5       	ldi	r24, 0x58	; 88
   1b62e:	95 e4       	ldi	r25, 0x45	; 69
   1b630:	a0 e0       	ldi	r26, 0x00	; 0
   1b632:	ed b7       	in	r30, 0x3d	; 61
   1b634:	fe b7       	in	r31, 0x3e	; 62
   1b636:	81 83       	std	Z+1, r24	; 0x01
   1b638:	92 83       	std	Z+2, r25	; 0x02
   1b63a:	a3 83       	std	Z+3, r26	; 0x03
   1b63c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
}
   1b640:	0f 90       	pop	r0
   1b642:	0f 90       	pop	r0
   1b644:	0f 90       	pop	r0
   1b646:	0f 90       	pop	r0
   1b648:	0f 90       	pop	r0
   1b64a:	08 95       	ret

0001b64c <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1b64c:	a1 e1       	ldi	r26, 0x11	; 17
   1b64e:	b0 e0       	ldi	r27, 0x00	; 0
   1b650:	eb e2       	ldi	r30, 0x2B	; 43
   1b652:	fb ed       	ldi	r31, 0xDB	; 219
   1b654:	a3 c4       	rjmp	.+2374   	; 0x1bf9c <__prologue_saves__+0x18>
   1b656:	ec 01       	movw	r28, r24
   1b658:	7b 01       	movw	r14, r22
   1b65a:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1b65c:	60 e0       	ldi	r22, 0x00	; 0
   1b65e:	70 e0       	ldi	r23, 0x00	; 0
   1b660:	0e 94 ce 35 	call	0x6b9c	; 0x6b9c <normalize>
    memset(buf,0,max);
   1b664:	a8 01       	movw	r20, r16
   1b666:	60 e0       	ldi	r22, 0x00	; 0
   1b668:	70 e0       	ldi	r23, 0x00	; 0
   1b66a:	c7 01       	movw	r24, r14
   1b66c:	0e 94 ba e3 	call	0x1c774	; 0x1c774 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1b670:	88 85       	ldd	r24, Y+8	; 0x08
   1b672:	99 85       	ldd	r25, Y+9	; 0x09
   1b674:	0e 94 b3 33 	call	0x6766	; 0x6766 <tm_mon_to_ascii>
   1b678:	28 81       	ld	r18, Y
   1b67a:	39 81       	ldd	r19, Y+1	; 0x01
   1b67c:	ed b7       	in	r30, 0x3d	; 61
   1b67e:	fe b7       	in	r31, 0x3e	; 62
   1b680:	31 8b       	std	Z+17, r19	; 0x11
   1b682:	20 8b       	std	Z+16, r18	; 0x10
   1b684:	2a 81       	ldd	r18, Y+2	; 0x02
   1b686:	3b 81       	ldd	r19, Y+3	; 0x03
   1b688:	37 87       	std	Z+15, r19	; 0x0f
   1b68a:	26 87       	std	Z+14, r18	; 0x0e
   1b68c:	2c 81       	ldd	r18, Y+4	; 0x04
   1b68e:	3d 81       	ldd	r19, Y+5	; 0x05
   1b690:	35 87       	std	Z+13, r19	; 0x0d
   1b692:	24 87       	std	Z+12, r18	; 0x0c
   1b694:	2e 81       	ldd	r18, Y+6	; 0x06
   1b696:	3f 81       	ldd	r19, Y+7	; 0x07
   1b698:	33 87       	std	Z+11, r19	; 0x0b
   1b69a:	22 87       	std	Z+10, r18	; 0x0a
   1b69c:	91 87       	std	Z+9, r25	; 0x09
   1b69e:	80 87       	std	Z+8, r24	; 0x08
   1b6a0:	82 e4       	ldi	r24, 0x42	; 66
   1b6a2:	95 e4       	ldi	r25, 0x45	; 69
   1b6a4:	a0 e0       	ldi	r26, 0x00	; 0
   1b6a6:	85 83       	std	Z+5, r24	; 0x05
   1b6a8:	96 83       	std	Z+6, r25	; 0x06
   1b6aa:	a7 83       	std	Z+7, r26	; 0x07
   1b6ac:	01 50       	subi	r16, 0x01	; 1
   1b6ae:	11 09       	sbc	r17, r1
   1b6b0:	14 83       	std	Z+4, r17	; 0x04
   1b6b2:	03 83       	std	Z+3, r16	; 0x03
   1b6b4:	f2 82       	std	Z+2, r15	; 0x02
   1b6b6:	e1 82       	std	Z+1, r14	; 0x01
   1b6b8:	0e 94 4a 43 	call	0x8694	; 0x8694 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1b6bc:	c7 01       	movw	r24, r14
   1b6be:	cd b7       	in	r28, 0x3d	; 61
   1b6c0:	de b7       	in	r29, 0x3e	; 62
   1b6c2:	61 96       	adiw	r28, 0x11	; 17
   1b6c4:	e6 e0       	ldi	r30, 0x06	; 6
   1b6c6:	86 c4       	rjmp	.+2316   	; 0x1bfd4 <__epilogue_restores__+0x18>

0001b6c8 <setup_lcd>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C task structure 
/// Passes the structures to the interrupt handler
void setup_lcd()
{
   1b6c8:	cf 93       	push	r28
   1b6ca:	ad b7       	in	r26, 0x3d	; 61
   1b6cc:	be b7       	in	r27, 0x3e	; 62
   1b6ce:	17 97       	sbiw	r26, 0x07	; 7
   1b6d0:	0f b6       	in	r0, 0x3f	; 63
   1b6d2:	f8 94       	cli
   1b6d4:	be bf       	out	0x3e, r27	; 62
   1b6d6:	0f be       	out	0x3f, r0	; 63
   1b6d8:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1b6da:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1b6dc:	84 e2       	ldi	r24, 0x24	; 36
   1b6de:	95 e4       	ldi	r25, 0x45	; 69
   1b6e0:	a0 e0       	ldi	r26, 0x00	; 0
   1b6e2:	ed b7       	in	r30, 0x3d	; 61
   1b6e4:	fe b7       	in	r31, 0x3e	; 62
   1b6e6:	81 83       	std	Z+1, r24	; 0x01
   1b6e8:	92 83       	std	Z+2, r25	; 0x02
   1b6ea:	a3 83       	std	Z+3, r26	; 0x03
   1b6ec:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1b6f0:	61 e0       	ldi	r22, 0x01	; 1
   1b6f2:	70 e0       	ldi	r23, 0x00	; 0
   1b6f4:	8b eb       	ldi	r24, 0xBB	; 187
   1b6f6:	9a ed       	ldi	r25, 0xDA	; 218
   1b6f8:	0e 94 dd 31 	call	0x63ba	; 0x63ba <set_timers>
   1b6fc:	01 96       	adiw	r24, 0x01	; 1
   1b6fe:	51 f4       	brne	.+20     	; 0x1b714 <setup_lcd+0x4c>
        printf("lcd_task init failed\n");
   1b700:	8e e0       	ldi	r24, 0x0E	; 14
   1b702:	95 e4       	ldi	r25, 0x45	; 69
   1b704:	a0 e0       	ldi	r26, 0x00	; 0
   1b706:	ed b7       	in	r30, 0x3d	; 61
   1b708:	fe b7       	in	r31, 0x3e	; 62
   1b70a:	81 83       	std	Z+1, r24	; 0x01
   1b70c:	92 83       	std	Z+2, r25	; 0x02
   1b70e:	a3 83       	std	Z+3, r26	; 0x03
   1b710:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

	i2c_init(100000);
   1b714:	60 ea       	ldi	r22, 0xA0	; 160
   1b716:	76 e8       	ldi	r23, 0x86	; 134
   1b718:	81 e0       	ldi	r24, 0x01	; 1
   1b71a:	90 e0       	ldi	r25, 0x00	; 0
   1b71c:	0e 94 4d 29 	call	0x529a	; 0x529a <i2c_init>

	cli();
   1b720:	f8 94       	cli

	i2c_task_init();
   1b722:	0e 94 0e 29 	call	0x521c	; 0x521c <i2c_task_init>

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1b726:	8f e1       	ldi	r24, 0x1F	; 31
   1b728:	97 e1       	ldi	r25, 0x17	; 23
   1b72a:	ed b7       	in	r30, 0x3d	; 61
   1b72c:	fe b7       	in	r31, 0x3e	; 62
   1b72e:	97 83       	std	Z+7, r25	; 0x07
   1b730:	86 83       	std	Z+6, r24	; 0x06
   1b732:	88 e0       	ldi	r24, 0x08	; 8
   1b734:	95 e4       	ldi	r25, 0x45	; 69
   1b736:	a0 e0       	ldi	r26, 0x00	; 0
   1b738:	83 83       	std	Z+3, r24	; 0x03
   1b73a:	94 83       	std	Z+4, r25	; 0x04
   1b73c:	a5 83       	std	Z+5, r26	; 0x05
   1b73e:	87 e0       	ldi	r24, 0x07	; 7
   1b740:	93 e0       	ldi	r25, 0x03	; 3
   1b742:	92 83       	std	Z+2, r25	; 0x02
   1b744:	81 83       	std	Z+1, r24	; 0x01
   1b746:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1b74a:	8b e2       	ldi	r24, 0x2B	; 43
   1b74c:	97 e1       	ldi	r25, 0x17	; 23
   1b74e:	ed b7       	in	r30, 0x3d	; 61
   1b750:	fe b7       	in	r31, 0x3e	; 62
   1b752:	97 83       	std	Z+7, r25	; 0x07
   1b754:	86 83       	std	Z+6, r24	; 0x06
   1b756:	82 e0       	ldi	r24, 0x02	; 2
   1b758:	95 e4       	ldi	r25, 0x45	; 69
   1b75a:	a0 e0       	ldi	r26, 0x00	; 0
   1b75c:	83 83       	std	Z+3, r24	; 0x03
   1b75e:	94 83       	std	Z+4, r25	; 0x04
   1b760:	a5 83       	std	Z+5, r26	; 0x05
   1b762:	80 ef       	ldi	r24, 0xF0	; 240
   1b764:	92 e0       	ldi	r25, 0x02	; 2
   1b766:	92 83       	std	Z+2, r25	; 0x02
   1b768:	81 83       	std	Z+1, r24	; 0x01
   1b76a:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, 2);
   1b76e:	22 e0       	ldi	r18, 0x02	; 2
   1b770:	4c e1       	ldi	r20, 0x1C	; 28
   1b772:	53 e0       	ldi	r21, 0x03	; 3
   1b774:	60 e0       	ldi	r22, 0x00	; 0
   1b776:	82 e7       	ldi	r24, 0x72	; 114
   1b778:	0e 94 23 29 	call	0x5246	; 0x5246 <i2c_task_op_add>
   1b77c:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <i2c_task_op+0x1>
   1b780:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1b784:	20 e1       	ldi	r18, 0x10	; 16
   1b786:	47 e0       	ldi	r20, 0x07	; 7
   1b788:	53 e0       	ldi	r21, 0x03	; 3
   1b78a:	60 e0       	ldi	r22, 0x00	; 0
   1b78c:	82 e7       	ldi	r24, 0x72	; 114
   1b78e:	0e 94 23 29 	call	0x5246	; 0x5246 <i2c_task_op_add>
   1b792:	90 93 67 17 	sts	0x1767, r25	; 0x801767 <i2c_task_op+0x3>
   1b796:	80 93 66 17 	sts	0x1766, r24	; 0x801766 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, 2);
   1b79a:	22 e0       	ldi	r18, 0x02	; 2
   1b79c:	45 e0       	ldi	r20, 0x05	; 5
   1b79e:	53 e0       	ldi	r21, 0x03	; 3
   1b7a0:	60 e0       	ldi	r22, 0x00	; 0
   1b7a2:	82 e7       	ldi	r24, 0x72	; 114
   1b7a4:	0e 94 23 29 	call	0x5246	; 0x5246 <i2c_task_op_add>
   1b7a8:	90 93 69 17 	sts	0x1769, r25	; 0x801769 <i2c_task_op+0x5>
   1b7ac:	80 93 68 17 	sts	0x1768, r24	; 0x801768 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1b7b0:	20 e1       	ldi	r18, 0x10	; 16
   1b7b2:	40 ef       	ldi	r20, 0xF0	; 240
   1b7b4:	52 e0       	ldi	r21, 0x02	; 2
   1b7b6:	60 e0       	ldi	r22, 0x00	; 0
   1b7b8:	82 e7       	ldi	r24, 0x72	; 114
   1b7ba:	0e 94 23 29 	call	0x5246	; 0x5246 <i2c_task_op_add>
   1b7be:	90 93 6b 17 	sts	0x176B, r25	; 0x80176b <i2c_task_op+0x7>
   1b7c2:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <i2c_task_op+0x6>

	SREG = sreg;
   1b7c6:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1b7c8:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <i2c_task_run>
    delayms(1000);
   1b7cc:	68 ee       	ldi	r22, 0xE8	; 232
   1b7ce:	73 e0       	ldi	r23, 0x03	; 3
   1b7d0:	80 e0       	ldi	r24, 0x00	; 0
   1b7d2:	90 e0       	ldi	r25, 0x00	; 0
   1b7d4:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <delayms>
	
    if(!i2c_task_done())
   1b7d8:	0e 94 c4 29 	call	0x5388	; 0x5388 <i2c_task_done>
   1b7dc:	81 11       	cpse	r24, r1
   1b7de:	0c c0       	rjmp	.+24     	; 0x1b7f8 <setup_lcd+0x130>
	{
		i2c_display_task_errors();
   1b7e0:	0e 94 4a 2c 	call	0x5894	; 0x5894 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1b7e4:	88 ee       	ldi	r24, 0xE8	; 232
   1b7e6:	94 e4       	ldi	r25, 0x44	; 68
   1b7e8:	a0 e0       	ldi	r26, 0x00	; 0
   1b7ea:	ed b7       	in	r30, 0x3d	; 61
   1b7ec:	fe b7       	in	r31, 0x3e	; 62
   1b7ee:	81 83       	std	Z+1, r24	; 0x01
   1b7f0:	92 83       	std	Z+2, r25	; 0x02
   1b7f2:	a3 83       	std	Z+3, r26	; 0x03
   1b7f4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
	}

    sep();
   1b7f8:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>
}
   1b7fc:	ad b7       	in	r26, 0x3d	; 61
   1b7fe:	be b7       	in	r27, 0x3e	; 62
   1b800:	17 96       	adiw	r26, 0x07	; 7
   1b802:	0f b6       	in	r0, 0x3f	; 63
   1b804:	f8 94       	cli
   1b806:	be bf       	out	0x3e, r27	; 62
   1b808:	0f be       	out	0x3f, r0	; 63
   1b80a:	ad bf       	out	0x3d, r26	; 61
   1b80c:	cf 91       	pop	r28
   1b80e:	08 95       	ret

0001b810 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1b810:	af e2       	ldi	r26, 0x2F	; 47
   1b812:	b0 e0       	ldi	r27, 0x00	; 0
   1b814:	ed e0       	ldi	r30, 0x0D	; 13
   1b816:	fc ed       	ldi	r31, 0xDC	; 220
   1b818:	c4 c3       	rjmp	.+1928   	; 0x1bfa2 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1b81a:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1b81c:	f8 94       	cli
	if(!mmc_ins_status())
   1b81e:	0e 94 90 6c 	call	0xd920	; 0xd920 <mmc_ins_status>
   1b822:	89 2b       	or	r24, r25
   1b824:	49 f4       	brne	.+18     	; 0x1b838 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1b826:	88 e3       	ldi	r24, 0x38	; 56
   1b828:	97 e1       	ldi	r25, 0x17	; 23
   1b82a:	ed b7       	in	r30, 0x3d	; 61
   1b82c:	fe b7       	in	r31, 0x3e	; 62
   1b82e:	97 83       	std	Z+7, r25	; 0x07
   1b830:	86 83       	std	Z+6, r24	; 0x06
   1b832:	82 ee       	ldi	r24, 0xE2	; 226
   1b834:	94 e4       	ldi	r25, 0x44	; 68
   1b836:	17 c0       	rjmp	.+46     	; 0x1b866 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1b838:	be 01       	movw	r22, r28
   1b83a:	68 5d       	subi	r22, 0xD8	; 216
   1b83c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b83e:	80 e0       	ldi	r24, 0x00	; 0
   1b840:	90 e0       	ldi	r25, 0x00	; 0
   1b842:	0e 94 ed 30 	call	0x61da	; 0x61da <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1b846:	ce 01       	movw	r24, r28
   1b848:	88 96       	adiw	r24, 0x28	; 40
   1b84a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <gmtime>
   1b84e:	4f e1       	ldi	r20, 0x1F	; 31
   1b850:	50 e0       	ldi	r21, 0x00	; 0
   1b852:	be 01       	movw	r22, r28
   1b854:	68 5f       	subi	r22, 0xF8	; 248
   1b856:	7f 4f       	sbci	r23, 0xFF	; 255
   1b858:	f9 de       	rcall	.-526    	; 0x1b64c <lcd_time>
   1b85a:	ed b7       	in	r30, 0x3d	; 61
   1b85c:	fe b7       	in	r31, 0x3e	; 62
   1b85e:	97 83       	std	Z+7, r25	; 0x07
   1b860:	86 83       	std	Z+6, r24	; 0x06
   1b862:	8c ed       	ldi	r24, 0xDC	; 220
   1b864:	94 e4       	ldi	r25, 0x44	; 68
   1b866:	a0 e0       	ldi	r26, 0x00	; 0
   1b868:	83 83       	std	Z+3, r24	; 0x03
   1b86a:	94 83       	std	Z+4, r25	; 0x04
   1b86c:	a5 83       	std	Z+5, r26	; 0x05
   1b86e:	80 ef       	ldi	r24, 0xF0	; 240
   1b870:	92 e0       	ldi	r25, 0x02	; 2
   1b872:	92 83       	std	Z+2, r25	; 0x02
   1b874:	81 83       	std	Z+1, r24	; 0x01
   1b876:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1b87a:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1b87c:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <i2c_task_run>
}
   1b880:	af 96       	adiw	r28, 0x2f	; 47
   1b882:	e3 e0       	ldi	r30, 0x03	; 3
   1b884:	aa c3       	rjmp	.+1876   	; 0x1bfda <__epilogue_restores__+0x1e>

0001b886 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1b886:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1b888:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1b88a:	20 91 f7 19 	lds	r18, 0x19F7	; 0x8019f7 <lcd_display_time>
   1b88e:	30 91 f8 19 	lds	r19, 0x19F8	; 0x8019f8 <lcd_display_time+0x1>
   1b892:	25 36       	cpi	r18, 0x65	; 101
   1b894:	31 05       	cpc	r19, r1
   1b896:	3c f0       	brlt	.+14     	; 0x1b8a6 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1b898:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <lcd_display_time+0x1>
   1b89c:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <lcd_display_time>
		SREG = sreg;
		i2c_lcd_task();
   1b8a0:	8f bf       	out	0x3f, r24	; 63
		return;
   1b8a2:	b6 cf       	rjmp	.-148    	; 0x1b810 <i2c_lcd_task>
	}
	SREG = sreg;
   1b8a4:	08 95       	ret
   1b8a6:	8f bf       	out	0x3f, r24	; 63
   1b8a8:	08 95       	ret

0001b8aa <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1b8aa:	00 d0       	rcall	.+0      	; 0x1b8ac <help+0x2>

    copyright();
   1b8ac:	1f 92       	push	r1

#ifdef FATFS_TESTS
    fatfs_help(0);
   1b8ae:	6d de       	rcall	.-806    	; 0x1b58a <copyright>
   1b8b0:	80 e0       	ldi	r24, 0x00	; 0
   1b8b2:	90 e0       	ldi	r25, 0x00	; 0
   1b8b4:	0e 94 95 70 	call	0xe12a	; 0xe12a <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1b8b8:	80 e0       	ldi	r24, 0x00	; 0
   1b8ba:	90 e0       	ldi	r25, 0x00	; 0
   1b8bc:	0e 94 e2 7b 	call	0xf7c4	; 0xf7c4 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1b8c0:	80 e0       	ldi	r24, 0x00	; 0
   1b8c2:	90 e0       	ldi	r25, 0x00	; 0
   1b8c4:	0e 94 7e bb 	call	0x176fc	; 0x176fc <lif_help>
#endif

    gpib_help(0);
   1b8c8:	80 e0       	ldi	r24, 0x00	; 0
   1b8ca:	90 e0       	ldi	r25, 0x00	; 0
   1b8cc:	0e 94 37 8f 	call	0x11e6e	; 0x11e6e <gpib_help>

    printf(
   1b8d0:	8a eb       	ldi	r24, 0xBA	; 186
   1b8d2:	94 e4       	ldi	r25, 0x44	; 68
   1b8d4:	a0 e0       	ldi	r26, 0x00	; 0
   1b8d6:	ed b7       	in	r30, 0x3d	; 61
   1b8d8:	fe b7       	in	r31, 0x3e	; 62
   1b8da:	81 83       	std	Z+1, r24	; 0x01
   1b8dc:	92 83       	std	Z+2, r25	; 0x02
   1b8de:	a3 83       	std	Z+3, r26	; 0x03
   1b8e0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
        "setdate\n"
        "time\n"
        "reset\n"
        "\n"
        );
}
   1b8e4:	0f 90       	pop	r0
   1b8e6:	0f 90       	pop	r0
   1b8e8:	0f 90       	pop	r0
   1b8ea:	08 95       	ret

0001b8ec <user_task.part.0>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1b8ec:	a9 e6       	ldi	r26, 0x69	; 105
   1b8ee:	b1 e0       	ldi	r27, 0x01	; 1
   1b8f0:	eb e7       	ldi	r30, 0x7B	; 123
   1b8f2:	fc ed       	ldi	r31, 0xDC	; 220
   1b8f4:	51 c3       	rjmp	.+1698   	; 0x1bf98 <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1b8f6:	87 eb       	ldi	r24, 0xB7	; 183
   1b8f8:	94 e4       	ldi	r25, 0x44	; 68
   1b8fa:	a0 e0       	ldi	r26, 0x00	; 0
   1b8fc:	ed b7       	in	r30, 0x3d	; 61
   1b8fe:	fe b7       	in	r31, 0x3e	; 62
   1b900:	81 83       	std	Z+1, r24	; 0x01
   1b902:	92 83       	std	Z+2, r25	; 0x02
   1b904:	a3 83       	std	Z+3, r26	; 0x03
   1b906:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    fgets(line,sizeof(line)-2,stdin);
   1b90a:	40 91 cb 1c 	lds	r20, 0x1CCB	; 0x801ccb <__iob>
   1b90e:	50 91 cc 1c 	lds	r21, 0x1CCC	; 0x801ccc <__iob+0x1>
   1b912:	6e ef       	ldi	r22, 0xFE	; 254
   1b914:	70 e0       	ldi	r23, 0x00	; 0
   1b916:	ce 01       	movw	r24, r28
   1b918:	06 96       	adiw	r24, 0x06	; 6
   1b91a:	6c 01       	movw	r12, r24
   1b91c:	0e 94 ce 73 	call	0xe79c	; 0xe79c <fgets>
    trim_tail(line);
   1b920:	c6 01       	movw	r24, r12
   1b922:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <trim_tail>
    argc = split_args(line,argv,50);
   1b926:	42 e3       	ldi	r20, 0x32	; 50
   1b928:	50 e0       	ldi	r21, 0x00	; 0
   1b92a:	be 01       	movw	r22, r28
   1b92c:	6a 5f       	subi	r22, 0xFA	; 250
   1b92e:	7e 4f       	sbci	r23, 0xFE	; 254
   1b930:	c6 01       	movw	r24, r12
   1b932:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <split_args>
   1b936:	7c 01       	movw	r14, r24
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1b938:	ca 5f       	subi	r28, 0xFA	; 250
   1b93a:	de 4f       	sbci	r29, 0xFE	; 254
   1b93c:	08 81       	ld	r16, Y
   1b93e:	19 81       	ldd	r17, Y+1	; 0x01
   1b940:	c6 50       	subi	r28, 0x06	; 6
   1b942:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1b944:	01 15       	cp	r16, r1
   1b946:	11 05       	cpc	r17, r1
   1b948:	09 f4       	brne	.+2      	; 0x1b94c <user_task.part.0+0x60>
   1b94a:	6d c0       	rjmp	.+218    	; 0x1ba26 <user_task.part.0+0x13a>
   1b94c:	18 16       	cp	r1, r24
   1b94e:	19 06       	cpc	r1, r25
   1b950:	0c f0       	brlt	.+2      	; 0x1b954 <user_task.part.0+0x68>
   1b952:	69 c0       	rjmp	.+210    	; 0x1ba26 <user_task.part.0+0x13a>
        delay_tests();
        result = 1;

    }
#endif
    else if ( MATCHI(ptr,"time") )
   1b954:	66 e4       	ldi	r22, 0x46	; 70
   1b956:	77 e1       	ldi	r23, 0x17	; 23
   1b958:	c8 01       	movw	r24, r16
   1b95a:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   1b95e:	89 2b       	or	r24, r25
   1b960:	19 f5       	brne	.+70     	; 0x1b9a8 <user_task.part.0+0xbc>
    {
        display_clock();
        result = 1;
    }
#ifdef LCD_SUPPORT
    else if ( MATCHI(ptr,"lcd") )
   1b962:	6b e4       	ldi	r22, 0x4B	; 75
   1b964:	77 e1       	ldi	r23, 0x17	; 23
   1b966:	c8 01       	movw	r24, r16
   1b968:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   1b96c:	89 2b       	or	r24, r25
    {
		i2c_lcd_task();
   1b96e:	11 f0       	breq	.+4      	; 0x1b974 <user_task.part.0+0x88>
   1b970:	4f df       	rcall	.-354    	; 0x1b810 <i2c_lcd_task>
   1b972:	59 c0       	rjmp	.+178    	; 0x1ba26 <user_task.part.0+0x13a>
        result = 1;
    }
#endif
    else if ( MATCHI(ptr,"reset") )
   1b974:	62 ed       	ldi	r22, 0xD2	; 210
   1b976:	7d e0       	ldi	r23, 0x0D	; 13
   1b978:	c8 01       	movw	r24, r16
   1b97a:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   1b97e:	89 2b       	or	r24, r25
   1b980:	51 f0       	breq	.+20     	; 0x1b996 <user_task.part.0+0xaa>
    {
        cli();
   1b982:	f8 94       	cli
        uart_rx_flush(0);
   1b984:	80 e0       	ldi	r24, 0x00	; 0
   1b986:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <uart_rx_flush>
        cli();
   1b98a:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1b98c:	82 e0       	ldi	r24, 0x02	; 2
   1b98e:	84 bf       	out	0x34, r24	; 52
        RESET();
   1b990:	e0 e0       	ldi	r30, 0x00	; 0
   1b992:	fc ef       	ldi	r31, 0xFC	; 252
   1b994:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1b996:	6f e4       	ldi	r22, 0x4F	; 79
   1b998:	77 e1       	ldi	r23, 0x17	; 23
   1b99a:	c8 01       	movw	r24, r16
   1b99c:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   1b9a0:	89 2b       	or	r24, r25
   1b9a2:	29 f0       	breq	.+10     	; 0x1b9ae <user_task.part.0+0xc2>
    {
        setdate();
   1b9a4:	0e 94 b7 38 	call	0x716e	; 0x716e <setdate>
        display_clock();
   1b9a8:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <display_clock>
   1b9ac:	3c c0       	rjmp	.+120    	; 0x1ba26 <user_task.part.0+0x13a>
        result = 1;
    }
    else if ( MATCH(ptr,"mem") )
   1b9ae:	67 e5       	ldi	r22, 0x57	; 87
   1b9b0:	77 e1       	ldi	r23, 0x17	; 23
   1b9b2:	c8 01       	movw	r24, r16
   1b9b4:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <MATCH>
   1b9b8:	89 2b       	or	r24, r25
   1b9ba:	19 f0       	breq	.+6      	; 0x1b9c2 <user_task.part.0+0xd6>
    {
        PrintFree();
   1b9bc:	0e 94 4b 24 	call	0x4896	; 0x4896 <PrintFree>
   1b9c0:	32 c0       	rjmp	.+100    	; 0x1ba26 <user_task.part.0+0x13a>
        result = 1;

    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1b9c2:	65 e9       	ldi	r22, 0x95	; 149
   1b9c4:	76 e1       	ldi	r23, 0x16	; 22
   1b9c6:	c8 01       	movw	r24, r16
   1b9c8:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   1b9cc:	89 2b       	or	r24, r25
    {
        help();
   1b9ce:	11 f0       	breq	.+4      	; 0x1b9d4 <user_task.part.0+0xe8>
   1b9d0:	6c df       	rcall	.-296    	; 0x1b8aa <help>
   1b9d2:	29 c0       	rjmp	.+82     	; 0x1ba26 <user_task.part.0+0x13a>
    {
        PrintFree();
        result = 1;

    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1b9d4:	6b e9       	ldi	r22, 0x9B	; 155
   1b9d6:	76 e1       	ldi	r23, 0x16	; 22
   1b9d8:	c8 01       	movw	r24, r16
   1b9da:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCHI>
   1b9de:	89 2b       	or	r24, r25
   1b9e0:	b9 f7       	brne	.-18     	; 0x1b9d0 <user_task.part.0+0xe4>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1b9e2:	be 01       	movw	r22, r28
   1b9e4:	6a 5f       	subi	r22, 0xFA	; 250
   1b9e6:	7e 4f       	sbci	r23, 0xFE	; 254
   1b9e8:	c7 01       	movw	r24, r14
   1b9ea:	0e 94 58 8f 	call	0x11eb0	; 0x11eb0 <gpib_tests>
   1b9ee:	89 2b       	or	r24, r25
   1b9f0:	19 f0       	breq	.+6      	; 0x1b9f8 <user_task.part.0+0x10c>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1b9f2:	0e 94 6c 8a 	call	0x114d8	; 0x114d8 <gpib_init_devices>
   1b9f6:	17 c0       	rjmp	.+46     	; 0x1ba26 <user_task.part.0+0x13a>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1b9f8:	be 01       	movw	r22, r28
   1b9fa:	6a 5f       	subi	r22, 0xFA	; 250
   1b9fc:	7e 4f       	sbci	r23, 0xFE	; 254
   1b9fe:	c7 01       	movw	r24, r14
   1ba00:	0e 94 54 7f 	call	0xfea8	; 0xfea8 <posix_tests>
   1ba04:	89 2b       	or	r24, r25
   1ba06:	79 f4       	brne	.+30     	; 0x1ba26 <user_task.part.0+0x13a>
        result = 1;
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1ba08:	be 01       	movw	r22, r28
   1ba0a:	6a 5f       	subi	r22, 0xFA	; 250
   1ba0c:	7e 4f       	sbci	r23, 0xFE	; 254
   1ba0e:	c7 01       	movw	r24, r14
   1ba10:	0e 94 af 71 	call	0xe35e	; 0xe35e <fatfs_tests>
   1ba14:	89 2b       	or	r24, r25
   1ba16:	39 f4       	brne	.+14     	; 0x1ba26 <user_task.part.0+0x13a>
        result = 1;
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1ba18:	be 01       	movw	r22, r28
   1ba1a:	6a 5f       	subi	r22, 0xFA	; 250
   1ba1c:	7e 4f       	sbci	r23, 0xFE	; 254
   1ba1e:	c7 01       	movw	r24, r14
   1ba20:	70 dc       	rcall	.-1824   	; 0x1b302 <lif_tests>
   1ba22:	89 2b       	or	r24, r25
   1ba24:	59 f0       	breq	.+22     	; 0x1ba3c <user_task.part.0+0x150>
        result = 1;
#endif
    if(result)
        printf("OK\n");
   1ba26:	83 eb       	ldi	r24, 0xB3	; 179
   1ba28:	94 e4       	ldi	r25, 0x44	; 68
   1ba2a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba2c:	ed b7       	in	r30, 0x3d	; 61
   1ba2e:	fe b7       	in	r31, 0x3e	; 62
   1ba30:	81 83       	std	Z+1, r24	; 0x01
   1ba32:	92 83       	std	Z+2, r25	; 0x02
   1ba34:	a3 83       	std	Z+3, r26	; 0x03
   1ba36:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
   1ba3a:	0c c0       	rjmp	.+24     	; 0x1ba54 <user_task.part.0+0x168>
    else
        printf("Error:[%s]\n",line);
   1ba3c:	ed b7       	in	r30, 0x3d	; 61
   1ba3e:	fe b7       	in	r31, 0x3e	; 62
   1ba40:	d5 82       	std	Z+5, r13	; 0x05
   1ba42:	c4 82       	std	Z+4, r12	; 0x04
   1ba44:	87 ea       	ldi	r24, 0xA7	; 167
   1ba46:	94 e4       	ldi	r25, 0x44	; 68
   1ba48:	a0 e0       	ldi	r26, 0x00	; 0
   1ba4a:	81 83       	std	Z+1, r24	; 0x01
   1ba4c:	92 83       	std	Z+2, r25	; 0x02
   1ba4e:	a3 83       	std	Z+3, r26	; 0x03
   1ba50:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
}
   1ba54:	c7 59       	subi	r28, 0x97	; 151
   1ba56:	de 4f       	sbci	r29, 0xFE	; 254
   1ba58:	e8 e0       	ldi	r30, 0x08	; 8
   1ba5a:	ba c2       	rjmp	.+1396   	; 0x1bfd0 <__epilogue_restores__+0x14>

0001ba5c <user_task>:
    int result = 0;
    char *argv[50];
    char line[256];


    if(gpib)
   1ba5c:	81 11       	cpse	r24, r1
        gpib_task();
   1ba5e:	0e 94 d7 8e 	call	0x11dae	; 0x11dae <gpib_task>

    if(!kbhit(0))
   1ba62:	80 e0       	ldi	r24, 0x00	; 0
   1ba64:	0e 94 11 27 	call	0x4e22	; 0x4e22 <uart_rx_count>
   1ba68:	89 2b       	or	r24, r25
   1ba6a:	09 f0       	breq	.+2      	; 0x1ba6e <user_task+0x12>
   1ba6c:	3f cf       	rjmp	.-386    	; 0x1b8ec <user_task.part.0>
   1ba6e:	08 95       	ret

0001ba70 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1ba70:	a3 e3       	ldi	r26, 0x33	; 51
   1ba72:	b0 e0       	ldi	r27, 0x00	; 0
   1ba74:	ed e3       	ldi	r30, 0x3D	; 61
   1ba76:	fd ed       	ldi	r31, 0xDD	; 221
   1ba78:	8f c2       	rjmp	.+1310   	; 0x1bf98 <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1ba7a:	0e 94 2f 24 	call	0x485e	; 0x485e <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1ba7e:	46 98       	cbi	0x08, 6	; 8
   1ba80:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1ba82:	0e 94 38 83 	call	0x10670	; 0x10670 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1ba86:	40 e0       	ldi	r20, 0x00	; 0
   1ba88:	52 ec       	ldi	r21, 0xC2	; 194
   1ba8a:	61 e0       	ldi	r22, 0x01	; 1
   1ba8c:	70 e0       	ldi	r23, 0x00	; 0
   1ba8e:	80 e0       	ldi	r24, 0x00	; 0
   1ba90:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <uart_init>
   1ba94:	6b 01       	movw	r12, r22
   1ba96:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1ba98:	68 ec       	ldi	r22, 0xC8	; 200
   1ba9a:	70 e0       	ldi	r23, 0x00	; 0
   1ba9c:	80 e0       	ldi	r24, 0x00	; 0
   1ba9e:	90 e0       	ldi	r25, 0x00	; 0
   1baa0:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <delayms>

    sep();
   1baa4:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>
    printf("Start\n");
   1baa8:	80 ea       	ldi	r24, 0xA0	; 160
   1baaa:	94 e4       	ldi	r25, 0x44	; 68
   1baac:	a0 e0       	ldi	r26, 0x00	; 0
   1baae:	ed b7       	in	r30, 0x3d	; 61
   1bab0:	fe b7       	in	r31, 0x3e	; 62
   1bab2:	81 83       	std	Z+1, r24	; 0x01
   1bab4:	92 83       	std	Z+2, r25	; 0x02
   1bab6:	a3 83       	std	Z+3, r26	; 0x03
   1bab8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1babc:	80 e0       	ldi	r24, 0x00	; 0
   1babe:	9d e2       	ldi	r25, 0x2D	; 45
   1bac0:	a1 e3       	ldi	r26, 0x31	; 49
   1bac2:	b1 e0       	ldi	r27, 0x01	; 1
   1bac4:	ed b7       	in	r30, 0x3d	; 61
   1bac6:	fe b7       	in	r31, 0x3e	; 62
   1bac8:	84 83       	std	Z+4, r24	; 0x04
   1baca:	95 83       	std	Z+5, r25	; 0x05
   1bacc:	a6 83       	std	Z+6, r26	; 0x06
   1bace:	b7 83       	std	Z+7, r27	; 0x07
   1bad0:	8f e8       	ldi	r24, 0x8F	; 143
   1bad2:	94 e4       	ldi	r25, 0x44	; 68
   1bad4:	a0 e0       	ldi	r26, 0x00	; 0
   1bad6:	81 83       	std	Z+1, r24	; 0x01
   1bad8:	92 83       	std	Z+2, r25	; 0x02
   1bada:	a3 83       	std	Z+3, r26	; 0x03
   1badc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1bae0:	ed b7       	in	r30, 0x3d	; 61
   1bae2:	fe b7       	in	r31, 0x3e	; 62
   1bae4:	c0 86       	std	Z+8, r12	; 0x08
   1bae6:	d1 86       	std	Z+9, r13	; 0x09
   1bae8:	e2 86       	std	Z+10, r14	; 0x0a
   1baea:	f3 86       	std	Z+11, r15	; 0x0b
   1baec:	80 e0       	ldi	r24, 0x00	; 0
   1baee:	92 ec       	ldi	r25, 0xC2	; 194
   1baf0:	a1 e0       	ldi	r26, 0x01	; 1
   1baf2:	b0 e0       	ldi	r27, 0x00	; 0
   1baf4:	84 83       	std	Z+4, r24	; 0x04
   1baf6:	95 83       	std	Z+5, r25	; 0x05
   1baf8:	a6 83       	std	Z+6, r26	; 0x06
   1bafa:	b7 83       	std	Z+7, r27	; 0x07
   1bafc:	88 e6       	ldi	r24, 0x68	; 104
   1bafe:	94 e4       	ldi	r25, 0x44	; 68
   1bb00:	a0 e0       	ldi	r26, 0x00	; 0
   1bb02:	81 83       	std	Z+1, r24	; 0x01
   1bb04:	92 83       	std	Z+2, r25	; 0x02
   1bb06:	a3 83       	std	Z+3, r26	; 0x03
   1bb08:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    init_timers();
   1bb0c:	0e 94 24 33 	call	0x6648	; 0x6648 <init_timers>

    sep();
   1bb10:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>
    printf("HP85 Disk and Device Emulator\n");
   1bb14:	89 e4       	ldi	r24, 0x49	; 73
   1bb16:	94 e4       	ldi	r25, 0x44	; 68
   1bb18:	a0 e0       	ldi	r26, 0x00	; 0
   1bb1a:	ed b7       	in	r30, 0x3d	; 61
   1bb1c:	fe b7       	in	r31, 0x3e	; 62
   1bb1e:	81 83       	std	Z+1, r24	; 0x01
   1bb20:	92 83       	std	Z+2, r25	; 0x02
   1bb22:	a3 83       	std	Z+3, r26	; 0x03
   1bb24:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1bb28:	8c e2       	ldi	r24, 0x2C	; 44
   1bb2a:	94 e4       	ldi	r25, 0x44	; 68
   1bb2c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb2e:	ed b7       	in	r30, 0x3d	; 61
   1bb30:	fe b7       	in	r31, 0x3e	; 62
   1bb32:	81 83       	std	Z+1, r24	; 0x01
   1bb34:	92 83       	std	Z+2, r25	; 0x02
   1bb36:	a3 83       	std	Z+3, r26	; 0x03
   1bb38:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf(" GNU version 3\n");
   1bb3c:	8c e1       	ldi	r24, 0x1C	; 28
   1bb3e:	94 e4       	ldi	r25, 0x44	; 68
   1bb40:	a0 e0       	ldi	r26, 0x00	; 0
   1bb42:	ed b7       	in	r30, 0x3d	; 61
   1bb44:	fe b7       	in	r31, 0x3e	; 62
   1bb46:	81 83       	std	Z+1, r24	; 0x01
   1bb48:	92 83       	std	Z+2, r25	; 0x02
   1bb4a:	a3 83       	std	Z+3, r26	; 0x03
   1bb4c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bb50:	85 ef       	ldi	r24, 0xF5	; 245
   1bb52:	93 e4       	ldi	r25, 0x43	; 67
   1bb54:	a0 e0       	ldi	r26, 0x00	; 0
   1bb56:	ed b7       	in	r30, 0x3d	; 61
   1bb58:	fe b7       	in	r31, 0x3e	; 62
   1bb5a:	81 83       	std	Z+1, r24	; 0x01
   1bb5c:	92 83       	std	Z+2, r25	; 0x02
   1bb5e:	a3 83       	std	Z+3, r26	; 0x03
   1bb60:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bb64:	87 ed       	ldi	r24, 0xD7	; 215
   1bb66:	96 e1       	ldi	r25, 0x16	; 22
   1bb68:	ed b7       	in	r30, 0x3d	; 61
   1bb6a:	fe b7       	in	r31, 0x3e	; 62
   1bb6c:	95 83       	std	Z+5, r25	; 0x05
   1bb6e:	84 83       	std	Z+4, r24	; 0x04
   1bb70:	8b ed       	ldi	r24, 0xDB	; 219
   1bb72:	93 e4       	ldi	r25, 0x43	; 67
   1bb74:	a0 e0       	ldi	r26, 0x00	; 0
   1bb76:	81 83       	std	Z+1, r24	; 0x01
   1bb78:	92 83       	std	Z+2, r25	; 0x02
   1bb7a:	a3 83       	std	Z+3, r26	; 0x03
   1bb7c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bb80:	8b ef       	ldi	r24, 0xFB	; 251
   1bb82:	96 e1       	ldi	r25, 0x16	; 22
   1bb84:	ed b7       	in	r30, 0x3d	; 61
   1bb86:	fe b7       	in	r31, 0x3e	; 62
   1bb88:	95 83       	std	Z+5, r25	; 0x05
   1bb8a:	84 83       	std	Z+4, r24	; 0x04
   1bb8c:	81 ec       	ldi	r24, 0xC1	; 193
   1bb8e:	93 e4       	ldi	r25, 0x43	; 67
   1bb90:	a0 e0       	ldi	r26, 0x00	; 0
   1bb92:	81 83       	std	Z+1, r24	; 0x01
   1bb94:	92 83       	std	Z+2, r25	; 0x02
   1bb96:	a3 83       	std	Z+3, r26	; 0x03
   1bb98:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

    sep();
   1bb9c:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>
    PrintFree();
   1bba0:	0e 94 4b 24 	call	0x4896	; 0x4896 <PrintFree>

    sep();
   1bba4:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1bba8:	8b ea       	ldi	r24, 0xAB	; 171
   1bbaa:	93 e4       	ldi	r25, 0x43	; 67
   1bbac:	a0 e0       	ldi	r26, 0x00	; 0
   1bbae:	ed b7       	in	r30, 0x3d	; 61
   1bbb0:	fe b7       	in	r31, 0x3e	; 62
   1bbb2:	81 83       	std	Z+1, r24	; 0x01
   1bbb4:	92 83       	std	Z+2, r25	; 0x02
   1bbb6:	a3 83       	std	Z+3, r26	; 0x03
   1bbb8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1bbbc:	4b e0       	ldi	r20, 0x0B	; 11
   1bbbe:	50 e0       	ldi	r21, 0x00	; 0
   1bbc0:	60 e2       	ldi	r22, 0x20	; 32
   1bbc2:	71 ea       	ldi	r23, 0xA1	; 161
   1bbc4:	87 e0       	ldi	r24, 0x07	; 7
   1bbc6:	90 e0       	ldi	r25, 0x00	; 0
   1bbc8:	0e 94 b1 23 	call	0x4762	; 0x4762 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1bbcc:	85 e9       	ldi	r24, 0x95	; 149
   1bbce:	93 e4       	ldi	r25, 0x43	; 67
   1bbd0:	a0 e0       	ldi	r26, 0x00	; 0
   1bbd2:	ed b7       	in	r30, 0x3d	; 61
   1bbd4:	fe b7       	in	r31, 0x3e	; 62
   1bbd6:	81 83       	std	Z+1, r24	; 0x01
   1bbd8:	92 83       	std	Z+2, r25	; 0x02
   1bbda:	a3 83       	std	Z+3, r26	; 0x03
   1bbdc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
	i2c_init(100000);
   1bbe0:	60 ea       	ldi	r22, 0xA0	; 160
   1bbe2:	76 e8       	ldi	r23, 0x86	; 134
   1bbe4:	81 e0       	ldi	r24, 0x01	; 1
   1bbe6:	90 e0       	ldi	r25, 0x00	; 0
   1bbe8:	0e 94 4d 29 	call	0x529a	; 0x529a <i2c_init>
    sep();
   1bbec:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1bbf0:	83 e8       	ldi	r24, 0x83	; 131
   1bbf2:	93 e4       	ldi	r25, 0x43	; 67
   1bbf4:	a0 e0       	ldi	r26, 0x00	; 0
   1bbf6:	ed b7       	in	r30, 0x3d	; 61
   1bbf8:	fe b7       	in	r31, 0x3e	; 62
   1bbfa:	81 83       	std	Z+1, r24	; 0x01
   1bbfc:	92 83       	std	Z+2, r25	; 0x02
   1bbfe:	a3 83       	std	Z+3, r26	; 0x03
   1bc00:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    clock_clear();
   1bc04:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <clock_clear>
    printf("Clock cleared\n");
   1bc08:	84 e7       	ldi	r24, 0x74	; 116
   1bc0a:	93 e4       	ldi	r25, 0x43	; 67
   1bc0c:	a0 e0       	ldi	r26, 0x00	; 0
   1bc0e:	ed b7       	in	r30, 0x3d	; 61
   1bc10:	fe b7       	in	r31, 0x3e	; 62
   1bc12:	81 83       	std	Z+1, r24	; 0x01
   1bc14:	92 83       	std	Z+2, r25	; 0x02
   1bc16:	a3 83       	std	Z+3, r26	; 0x03
   1bc18:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1bc1c:	be 01       	movw	r22, r28
   1bc1e:	64 5d       	subi	r22, 0xD4	; 212
   1bc20:	7f 4f       	sbci	r23, 0xFF	; 255
   1bc22:	80 e0       	ldi	r24, 0x00	; 0
   1bc24:	90 e0       	ldi	r25, 0x00	; 0
   1bc26:	0e 94 81 33 	call	0x6702	; 0x6702 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1bc2a:	88 a9       	ldd	r24, Y+48	; 0x30
   1bc2c:	99 a9       	ldd	r25, Y+49	; 0x31
   1bc2e:	aa a9       	ldd	r26, Y+50	; 0x32
   1bc30:	bb a9       	ldd	r27, Y+51	; 0x33
   1bc32:	ed b7       	in	r30, 0x3d	; 61
   1bc34:	fe b7       	in	r31, 0x3e	; 62
   1bc36:	84 83       	std	Z+4, r24	; 0x04
   1bc38:	95 83       	std	Z+5, r25	; 0x05
   1bc3a:	a6 83       	std	Z+6, r26	; 0x06
   1bc3c:	b7 83       	std	Z+7, r27	; 0x07
   1bc3e:	86 e4       	ldi	r24, 0x46	; 70
   1bc40:	93 e4       	ldi	r25, 0x43	; 67
   1bc42:	a0 e0       	ldi	r26, 0x00	; 0
   1bc44:	81 83       	std	Z+1, r24	; 0x01
   1bc46:	92 83       	std	Z+2, r25	; 0x02
   1bc48:	a3 83       	std	Z+3, r26	; 0x03
   1bc4a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1bc4e:	80 e0       	ldi	r24, 0x00	; 0
   1bc50:	90 e0       	ldi	r25, 0x00	; 0
   1bc52:	0e 94 5c 3a 	call	0x74b8	; 0x74b8 <initialize_clock>
    display_clock();
   1bc56:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <display_clock>
    sep();
   1bc5a:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	setup_lcd();
   1bc5e:	34 dd       	rcall	.-1432   	; 0x1b6c8 <setup_lcd>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1bc60:	8e e2       	ldi	r24, 0x2E	; 46
   1bc62:	93 e4       	ldi	r25, 0x43	; 67
   1bc64:	a0 e0       	ldi	r26, 0x00	; 0
   1bc66:	ed b7       	in	r30, 0x3d	; 61
   1bc68:	fe b7       	in	r31, 0x3e	; 62
   1bc6a:	81 83       	std	Z+1, r24	; 0x01
   1bc6c:	92 83       	std	Z+2, r25	; 0x02
   1bc6e:	a3 83       	std	Z+3, r26	; 0x03
   1bc70:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    if ( !mmc_init(1) )
   1bc74:	81 e0       	ldi	r24, 0x01	; 1
   1bc76:	90 e0       	ldi	r25, 0x00	; 0
   1bc78:	0e 94 c1 6c 	call	0xd982	; 0xd982 <mmc_init>
   1bc7c:	89 2b       	or	r24, r25
   1bc7e:	51 f4       	brne	.+20     	; 0x1bc94 <main+0x224>
		printf("MMC initialized\n");
   1bc80:	8d e1       	ldi	r24, 0x1D	; 29
   1bc82:	93 e4       	ldi	r25, 0x43	; 67
   1bc84:	a0 e0       	ldi	r26, 0x00	; 0
   1bc86:	ed b7       	in	r30, 0x3d	; 61
   1bc88:	fe b7       	in	r31, 0x3e	; 62
   1bc8a:	81 83       	std	Z+1, r24	; 0x01
   1bc8c:	92 83       	std	Z+2, r25	; 0x02
   1bc8e:	a3 83       	std	Z+3, r26	; 0x03
   1bc90:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    sep();
   1bc94:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1bc98:	0e 94 38 83 	call	0x10670	; 0x10670 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1bc9c:	87 e0       	ldi	r24, 0x07	; 7
   1bc9e:	93 e4       	ldi	r25, 0x43	; 67
   1bca0:	a0 e0       	ldi	r26, 0x00	; 0
   1bca2:	ed b7       	in	r30, 0x3d	; 61
   1bca4:	fe b7       	in	r31, 0x3e	; 62
   1bca6:	81 83       	std	Z+1, r24	; 0x01
   1bca8:	92 83       	std	Z+2, r25	; 0x02
   1bcaa:	a3 83       	std	Z+3, r26	; 0x03
   1bcac:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1bcb0:	0e 94 fa b8 	call	0x171f4	; 0x171f4 <printer_init>
    printf("Printer initialized\n");
   1bcb4:	82 ef       	ldi	r24, 0xF2	; 242
   1bcb6:	92 e4       	ldi	r25, 0x42	; 66
   1bcb8:	a0 e0       	ldi	r26, 0x00	; 0
   1bcba:	ed b7       	in	r30, 0x3d	; 61
   1bcbc:	fe b7       	in	r31, 0x3e	; 62
   1bcbe:	81 83       	std	Z+1, r24	; 0x01
   1bcc0:	92 83       	std	Z+2, r25	; 0x02
   1bcc2:	a3 83       	std	Z+3, r26	; 0x03
   1bcc4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1bcc8:	80 ee       	ldi	r24, 0xE0	; 224
   1bcca:	92 e4       	ldi	r25, 0x42	; 66
   1bccc:	a0 e0       	ldi	r26, 0x00	; 0
   1bcce:	ed b7       	in	r30, 0x3d	; 61
   1bcd0:	fe b7       	in	r31, 0x3e	; 62
   1bcd2:	81 83       	std	Z+1, r24	; 0x01
   1bcd4:	92 83       	std	Z+2, r25	; 0x02
   1bcd6:	a3 83       	std	Z+3, r26	; 0x03
   1bcd8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    gpib_timer_init();
   1bcdc:	0e 94 29 81 	call	0x10252	; 0x10252 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1bce0:	88 ec       	ldi	r24, 0xC8	; 200
   1bce2:	92 e4       	ldi	r25, 0x42	; 66
   1bce4:	a0 e0       	ldi	r26, 0x00	; 0
   1bce6:	ed b7       	in	r30, 0x3d	; 61
   1bce8:	fe b7       	in	r31, 0x3e	; 62
   1bcea:	81 83       	std	Z+1, r24	; 0x01
   1bcec:	92 83       	std	Z+2, r25	; 0x02
   1bcee:	a3 83       	std	Z+3, r26	; 0x03
   1bcf0:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1bcf4:	0e 94 97 89 	call	0x1132e	; 0x1132e <gpib_file_init>
    printf("GPIB File init done\n");
   1bcf8:	83 eb       	ldi	r24, 0xB3	; 179
   1bcfa:	92 e4       	ldi	r25, 0x42	; 66
   1bcfc:	a0 e0       	ldi	r26, 0x00	; 0
   1bcfe:	ed b7       	in	r30, 0x3d	; 61
   1bd00:	fe b7       	in	r31, 0x3e	; 62
   1bd02:	81 83       	std	Z+1, r24	; 0x01
   1bd04:	92 83       	std	Z+2, r25	; 0x02
   1bd06:	a3 83       	std	Z+3, r26	; 0x03
   1bd08:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1bd0c:	0e 94 65 83 	call	0x106ca	; 0x106ca <gpib_state_init>
    printf("GPIB State init done\n");
   1bd10:	8d e9       	ldi	r24, 0x9D	; 157
   1bd12:	92 e4       	ldi	r25, 0x42	; 66
   1bd14:	a0 e0       	ldi	r26, 0x00	; 0
   1bd16:	ed b7       	in	r30, 0x3d	; 61
   1bd18:	fe b7       	in	r31, 0x3e	; 62
   1bd1a:	81 83       	std	Z+1, r24	; 0x01
   1bd1c:	92 83       	std	Z+2, r25	; 0x02
   1bd1e:	a3 83       	std	Z+3, r26	; 0x03
   1bd20:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    sep();
   1bd24:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1bd28:	80 e0       	ldi	r24, 0x00	; 0
   1bd2a:	90 e0       	ldi	r25, 0x00	; 0
   1bd2c:	0e 94 25 91 	call	0x1224a	; 0x1224a <display_Addresses>
    sep();
   1bd30:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1bd34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bd38:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bd3c:	ed b7       	in	r30, 0x3d	; 61
   1bd3e:	fe b7       	in	r31, 0x3e	; 62
   1bd40:	95 83       	std	Z+5, r25	; 0x05
   1bd42:	84 83       	std	Z+4, r24	; 0x04
   1bd44:	87 e8       	ldi	r24, 0x87	; 135
   1bd46:	92 e4       	ldi	r25, 0x42	; 66
   1bd48:	a0 e0       	ldi	r26, 0x00	; 0
   1bd4a:	81 83       	std	Z+1, r24	; 0x01
   1bd4c:	92 83       	std	Z+2, r25	; 0x02
   1bd4e:	a3 83       	std	Z+3, r26	; 0x03
   1bd50:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
    sep();
   1bd54:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1bd58:	0e 94 bd 9c 	call	0x1397a	; 0x1397a <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1bd5c:	83 e0       	ldi	r24, 0x03	; 3
   1bd5e:	0e 94 9a 94 	call	0x12934	; 0x12934 <count_drive_types>
   1bd62:	8c 01       	movw	r16, r24
   1bd64:	81 e0       	ldi	r24, 0x01	; 1
   1bd66:	0e 94 9a 94 	call	0x12934	; 0x12934 <count_drive_types>
   1bd6a:	ed b7       	in	r30, 0x3d	; 61
   1bd6c:	fe b7       	in	r31, 0x3e	; 62
   1bd6e:	91 87       	std	Z+9, r25	; 0x09
   1bd70:	80 87       	std	Z+8, r24	; 0x08
   1bd72:	17 83       	std	Z+7, r17	; 0x07
   1bd74:	06 83       	std	Z+6, r16	; 0x06
   1bd76:	86 e7       	ldi	r24, 0x76	; 118
   1bd78:	92 e4       	ldi	r25, 0x42	; 66
   1bd7a:	a0 e0       	ldi	r26, 0x00	; 0
   1bd7c:	83 83       	std	Z+3, r24	; 0x03
   1bd7e:	94 83       	std	Z+4, r25	; 0x04
   1bd80:	a5 83       	std	Z+5, r26	; 0x05
   1bd82:	8e 01       	movw	r16, r28
   1bd84:	04 5f       	subi	r16, 0xF4	; 244
   1bd86:	1f 4f       	sbci	r17, 0xFF	; 255
   1bd88:	12 83       	std	Z+2, r17	; 0x02
   1bd8a:	01 83       	std	Z+1, r16	; 0x01
   1bd8c:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1bd90:	ed b7       	in	r30, 0x3d	; 61
   1bd92:	fe b7       	in	r31, 0x3e	; 62
   1bd94:	17 83       	std	Z+7, r17	; 0x07
   1bd96:	06 83       	std	Z+6, r16	; 0x06
   1bd98:	80 e7       	ldi	r24, 0x70	; 112
   1bd9a:	92 e4       	ldi	r25, 0x42	; 66
   1bd9c:	a0 e0       	ldi	r26, 0x00	; 0
   1bd9e:	83 83       	std	Z+3, r24	; 0x03
   1bda0:	94 83       	std	Z+4, r25	; 0x04
   1bda2:	a5 83       	std	Z+5, r26	; 0x05
   1bda4:	87 e0       	ldi	r24, 0x07	; 7
   1bda6:	93 e0       	ldi	r25, 0x03	; 3
   1bda8:	92 83       	std	Z+2, r25	; 0x02
   1bdaa:	81 83       	std	Z+1, r24	; 0x01
   1bdac:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bdb0:	8b e2       	ldi	r24, 0x2B	; 43
   1bdb2:	97 e1       	ldi	r25, 0x17	; 23
   1bdb4:	ed b7       	in	r30, 0x3d	; 61
   1bdb6:	fe b7       	in	r31, 0x3e	; 62
   1bdb8:	97 83       	std	Z+7, r25	; 0x07
   1bdba:	86 83       	std	Z+6, r24	; 0x06
   1bdbc:	8a e6       	ldi	r24, 0x6A	; 106
   1bdbe:	92 e4       	ldi	r25, 0x42	; 66
   1bdc0:	a0 e0       	ldi	r26, 0x00	; 0
   1bdc2:	83 83       	std	Z+3, r24	; 0x03
   1bdc4:	94 83       	std	Z+4, r25	; 0x04
   1bdc6:	a5 83       	std	Z+5, r26	; 0x05
   1bdc8:	80 ef       	ldi	r24, 0xF0	; 240
   1bdca:	92 e0       	ldi	r25, 0x02	; 2
   1bdcc:	92 83       	std	Z+2, r25	; 0x02
   1bdce:	81 83       	std	Z+1, r24	; 0x01
   1bdd0:	0e 94 5e 43 	call	0x86bc	; 0x86bc <sprintf_P>

	i2c_task_run();
   1bdd4:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <i2c_task_run>
	delayms(1000);
   1bdd8:	68 ee       	ldi	r22, 0xE8	; 232
   1bdda:	73 e0       	ldi	r23, 0x03	; 3
   1bddc:	80 e0       	ldi	r24, 0x00	; 0
   1bdde:	90 e0       	ldi	r25, 0x00	; 0
   1bde0:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1bde4:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <i2c_task+0x2>
   1bde8:	88 23       	and	r24, r24
   1bdea:	21 f0       	breq	.+8      	; 0x1bdf4 <main+0x384>
   1bdec:	80 91 87 17 	lds	r24, 0x1787	; 0x801787 <i2c_task+0x3>
   1bdf0:	88 23       	and	r24, r24
   1bdf2:	61 f0       	breq	.+24     	; 0x1be0c <main+0x39c>
	{
		i2c_display_task_errors();
   1bdf4:	0e 94 4a 2c 	call	0x5894	; 0x5894 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1bdf8:	80 e5       	ldi	r24, 0x50	; 80
   1bdfa:	92 e4       	ldi	r25, 0x42	; 66
   1bdfc:	a0 e0       	ldi	r26, 0x00	; 0
   1bdfe:	ed b7       	in	r30, 0x3d	; 61
   1be00:	fe b7       	in	r31, 0x3e	; 62
   1be02:	81 83       	std	Z+1, r24	; 0x01
   1be04:	92 83       	std	Z+2, r25	; 0x02
   1be06:	a3 83       	std	Z+3, r26	; 0x03
   1be08:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1be0c:	8c e3       	ldi	r24, 0x3C	; 60
   1be0e:	92 e4       	ldi	r25, 0x42	; 66
   1be10:	a0 e0       	ldi	r26, 0x00	; 0
   1be12:	ed b7       	in	r30, 0x3d	; 61
   1be14:	fe b7       	in	r31, 0x3e	; 62
   1be16:	81 83       	std	Z+1, r24	; 0x01
   1be18:	92 83       	std	Z+2, r25	; 0x02
   1be1a:	a3 83       	std	Z+3, r26	; 0x03
   1be1c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1be20:	81 e0       	ldi	r24, 0x01	; 1
   1be22:	1c de       	rcall	.-968    	; 0x1ba5c <user_task>
   1be24:	fd cf       	rjmp	.-6      	; 0x1be20 <main+0x3b0>

0001be26 <__mulsi3>:
   1be26:	db 01       	movw	r26, r22
   1be28:	8f 93       	push	r24
   1be2a:	9f 93       	push	r25
   1be2c:	8b d0       	rcall	.+278    	; 0x1bf44 <__muluhisi3>
   1be2e:	bf 91       	pop	r27
   1be30:	af 91       	pop	r26
   1be32:	a2 9f       	mul	r26, r18
   1be34:	80 0d       	add	r24, r0
   1be36:	91 1d       	adc	r25, r1
   1be38:	a3 9f       	mul	r26, r19
   1be3a:	90 0d       	add	r25, r0
   1be3c:	b2 9f       	mul	r27, r18
   1be3e:	90 0d       	add	r25, r0
   1be40:	11 24       	eor	r1, r1
   1be42:	08 95       	ret

0001be44 <__udivmodqi4>:
   1be44:	99 1b       	sub	r25, r25
   1be46:	79 e0       	ldi	r23, 0x09	; 9
   1be48:	04 c0       	rjmp	.+8      	; 0x1be52 <__udivmodqi4_ep>

0001be4a <__udivmodqi4_loop>:
   1be4a:	99 1f       	adc	r25, r25
   1be4c:	96 17       	cp	r25, r22
   1be4e:	08 f0       	brcs	.+2      	; 0x1be52 <__udivmodqi4_ep>
   1be50:	96 1b       	sub	r25, r22

0001be52 <__udivmodqi4_ep>:
   1be52:	88 1f       	adc	r24, r24
   1be54:	7a 95       	dec	r23
   1be56:	c9 f7       	brne	.-14     	; 0x1be4a <__udivmodqi4_loop>
   1be58:	80 95       	com	r24
   1be5a:	08 95       	ret

0001be5c <__udivmodhi4>:
   1be5c:	aa 1b       	sub	r26, r26
   1be5e:	bb 1b       	sub	r27, r27
   1be60:	51 e1       	ldi	r21, 0x11	; 17
   1be62:	07 c0       	rjmp	.+14     	; 0x1be72 <__udivmodhi4_ep>

0001be64 <__udivmodhi4_loop>:
   1be64:	aa 1f       	adc	r26, r26
   1be66:	bb 1f       	adc	r27, r27
   1be68:	a6 17       	cp	r26, r22
   1be6a:	b7 07       	cpc	r27, r23
   1be6c:	10 f0       	brcs	.+4      	; 0x1be72 <__udivmodhi4_ep>
   1be6e:	a6 1b       	sub	r26, r22
   1be70:	b7 0b       	sbc	r27, r23

0001be72 <__udivmodhi4_ep>:
   1be72:	88 1f       	adc	r24, r24
   1be74:	99 1f       	adc	r25, r25
   1be76:	5a 95       	dec	r21
   1be78:	a9 f7       	brne	.-22     	; 0x1be64 <__udivmodhi4_loop>
   1be7a:	80 95       	com	r24
   1be7c:	90 95       	com	r25
   1be7e:	bc 01       	movw	r22, r24
   1be80:	cd 01       	movw	r24, r26
   1be82:	08 95       	ret

0001be84 <__divmodhi4>:
   1be84:	97 fb       	bst	r25, 7
   1be86:	07 2e       	mov	r0, r23
   1be88:	16 f4       	brtc	.+4      	; 0x1be8e <__divmodhi4+0xa>
   1be8a:	00 94       	com	r0
   1be8c:	06 d0       	rcall	.+12     	; 0x1be9a <__divmodhi4_neg1>
   1be8e:	77 fd       	sbrc	r23, 7
   1be90:	08 d0       	rcall	.+16     	; 0x1bea2 <__divmodhi4_neg2>
   1be92:	e4 df       	rcall	.-56     	; 0x1be5c <__udivmodhi4>
   1be94:	07 fc       	sbrc	r0, 7
   1be96:	05 d0       	rcall	.+10     	; 0x1bea2 <__divmodhi4_neg2>
   1be98:	3e f4       	brtc	.+14     	; 0x1bea8 <__divmodhi4_exit>

0001be9a <__divmodhi4_neg1>:
   1be9a:	90 95       	com	r25
   1be9c:	81 95       	neg	r24
   1be9e:	9f 4f       	sbci	r25, 0xFF	; 255
   1bea0:	08 95       	ret

0001bea2 <__divmodhi4_neg2>:
   1bea2:	70 95       	com	r23
   1bea4:	61 95       	neg	r22
   1bea6:	7f 4f       	sbci	r23, 0xFF	; 255

0001bea8 <__divmodhi4_exit>:
   1bea8:	08 95       	ret

0001beaa <__udivmodsi4>:
   1beaa:	a1 e2       	ldi	r26, 0x21	; 33
   1beac:	1a 2e       	mov	r1, r26
   1beae:	aa 1b       	sub	r26, r26
   1beb0:	bb 1b       	sub	r27, r27
   1beb2:	fd 01       	movw	r30, r26
   1beb4:	0d c0       	rjmp	.+26     	; 0x1bed0 <__udivmodsi4_ep>

0001beb6 <__udivmodsi4_loop>:
   1beb6:	aa 1f       	adc	r26, r26
   1beb8:	bb 1f       	adc	r27, r27
   1beba:	ee 1f       	adc	r30, r30
   1bebc:	ff 1f       	adc	r31, r31
   1bebe:	a2 17       	cp	r26, r18
   1bec0:	b3 07       	cpc	r27, r19
   1bec2:	e4 07       	cpc	r30, r20
   1bec4:	f5 07       	cpc	r31, r21
   1bec6:	20 f0       	brcs	.+8      	; 0x1bed0 <__udivmodsi4_ep>
   1bec8:	a2 1b       	sub	r26, r18
   1beca:	b3 0b       	sbc	r27, r19
   1becc:	e4 0b       	sbc	r30, r20
   1bece:	f5 0b       	sbc	r31, r21

0001bed0 <__udivmodsi4_ep>:
   1bed0:	66 1f       	adc	r22, r22
   1bed2:	77 1f       	adc	r23, r23
   1bed4:	88 1f       	adc	r24, r24
   1bed6:	99 1f       	adc	r25, r25
   1bed8:	1a 94       	dec	r1
   1beda:	69 f7       	brne	.-38     	; 0x1beb6 <__udivmodsi4_loop>
   1bedc:	60 95       	com	r22
   1bede:	70 95       	com	r23
   1bee0:	80 95       	com	r24
   1bee2:	90 95       	com	r25
   1bee4:	9b 01       	movw	r18, r22
   1bee6:	ac 01       	movw	r20, r24
   1bee8:	bd 01       	movw	r22, r26
   1beea:	cf 01       	movw	r24, r30
   1beec:	08 95       	ret

0001beee <__divmodsi4>:
   1beee:	05 2e       	mov	r0, r21
   1bef0:	97 fb       	bst	r25, 7
   1bef2:	16 f4       	brtc	.+4      	; 0x1bef8 <__divmodsi4+0xa>
   1bef4:	00 94       	com	r0
   1bef6:	0f d0       	rcall	.+30     	; 0x1bf16 <__negsi2>
   1bef8:	57 fd       	sbrc	r21, 7
   1befa:	05 d0       	rcall	.+10     	; 0x1bf06 <__divmodsi4_neg2>
   1befc:	d6 df       	rcall	.-84     	; 0x1beaa <__udivmodsi4>
   1befe:	07 fc       	sbrc	r0, 7
   1bf00:	02 d0       	rcall	.+4      	; 0x1bf06 <__divmodsi4_neg2>
   1bf02:	46 f4       	brtc	.+16     	; 0x1bf14 <__divmodsi4_exit>
   1bf04:	08 c0       	rjmp	.+16     	; 0x1bf16 <__negsi2>

0001bf06 <__divmodsi4_neg2>:
   1bf06:	50 95       	com	r21
   1bf08:	40 95       	com	r20
   1bf0a:	30 95       	com	r19
   1bf0c:	21 95       	neg	r18
   1bf0e:	3f 4f       	sbci	r19, 0xFF	; 255
   1bf10:	4f 4f       	sbci	r20, 0xFF	; 255
   1bf12:	5f 4f       	sbci	r21, 0xFF	; 255

0001bf14 <__divmodsi4_exit>:
   1bf14:	08 95       	ret

0001bf16 <__negsi2>:
   1bf16:	90 95       	com	r25
   1bf18:	80 95       	com	r24
   1bf1a:	70 95       	com	r23
   1bf1c:	61 95       	neg	r22
   1bf1e:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf20:	8f 4f       	sbci	r24, 0xFF	; 255
   1bf22:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf24:	08 95       	ret

0001bf26 <__tablejump2__>:
   1bf26:	ee 0f       	add	r30, r30
   1bf28:	ff 1f       	adc	r31, r31
   1bf2a:	00 24       	eor	r0, r0
   1bf2c:	00 1c       	adc	r0, r0
   1bf2e:	0b be       	out	0x3b, r0	; 59
   1bf30:	07 90       	elpm	r0, Z+
   1bf32:	f6 91       	elpm	r31, Z
   1bf34:	e0 2d       	mov	r30, r0
   1bf36:	09 94       	ijmp

0001bf38 <__usmulhisi3>:
   1bf38:	6f d0       	rcall	.+222    	; 0x1c018 <__umulhisi3>

0001bf3a <__usmulhisi3_tail>:
   1bf3a:	b7 ff       	sbrs	r27, 7
   1bf3c:	08 95       	ret
   1bf3e:	82 1b       	sub	r24, r18
   1bf40:	93 0b       	sbc	r25, r19
   1bf42:	08 95       	ret

0001bf44 <__muluhisi3>:
   1bf44:	69 d0       	rcall	.+210    	; 0x1c018 <__umulhisi3>
   1bf46:	a5 9f       	mul	r26, r21
   1bf48:	90 0d       	add	r25, r0
   1bf4a:	b4 9f       	mul	r27, r20
   1bf4c:	90 0d       	add	r25, r0
   1bf4e:	a4 9f       	mul	r26, r20
   1bf50:	80 0d       	add	r24, r0
   1bf52:	91 1d       	adc	r25, r1
   1bf54:	11 24       	eor	r1, r1
   1bf56:	08 95       	ret

0001bf58 <__mulshisi3>:
   1bf58:	b7 ff       	sbrs	r27, 7
   1bf5a:	f4 cf       	rjmp	.-24     	; 0x1bf44 <__muluhisi3>

0001bf5c <__mulohisi3>:
   1bf5c:	f3 df       	rcall	.-26     	; 0x1bf44 <__muluhisi3>
   1bf5e:	82 1b       	sub	r24, r18
   1bf60:	93 0b       	sbc	r25, r19
   1bf62:	08 95       	ret

0001bf64 <__negdi2>:
   1bf64:	60 95       	com	r22
   1bf66:	70 95       	com	r23
   1bf68:	80 95       	com	r24
   1bf6a:	90 95       	com	r25
   1bf6c:	30 95       	com	r19
   1bf6e:	40 95       	com	r20
   1bf70:	50 95       	com	r21
   1bf72:	21 95       	neg	r18
   1bf74:	3f 4f       	sbci	r19, 0xFF	; 255
   1bf76:	4f 4f       	sbci	r20, 0xFF	; 255
   1bf78:	5f 4f       	sbci	r21, 0xFF	; 255
   1bf7a:	6f 4f       	sbci	r22, 0xFF	; 255
   1bf7c:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf7e:	8f 4f       	sbci	r24, 0xFF	; 255
   1bf80:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf82:	08 95       	ret

0001bf84 <__prologue_saves__>:
   1bf84:	2f 92       	push	r2
   1bf86:	3f 92       	push	r3
   1bf88:	4f 92       	push	r4
   1bf8a:	5f 92       	push	r5
   1bf8c:	6f 92       	push	r6
   1bf8e:	7f 92       	push	r7
   1bf90:	8f 92       	push	r8
   1bf92:	9f 92       	push	r9
   1bf94:	af 92       	push	r10
   1bf96:	bf 92       	push	r11
   1bf98:	cf 92       	push	r12
   1bf9a:	df 92       	push	r13
   1bf9c:	ef 92       	push	r14
   1bf9e:	ff 92       	push	r15
   1bfa0:	0f 93       	push	r16
   1bfa2:	1f 93       	push	r17
   1bfa4:	cf 93       	push	r28
   1bfa6:	df 93       	push	r29
   1bfa8:	cd b7       	in	r28, 0x3d	; 61
   1bfaa:	de b7       	in	r29, 0x3e	; 62
   1bfac:	ca 1b       	sub	r28, r26
   1bfae:	db 0b       	sbc	r29, r27
   1bfb0:	0f b6       	in	r0, 0x3f	; 63
   1bfb2:	f8 94       	cli
   1bfb4:	de bf       	out	0x3e, r29	; 62
   1bfb6:	0f be       	out	0x3f, r0	; 63
   1bfb8:	cd bf       	out	0x3d, r28	; 61
   1bfba:	09 94       	ijmp

0001bfbc <__epilogue_restores__>:
   1bfbc:	2a 88       	ldd	r2, Y+18	; 0x12
   1bfbe:	39 88       	ldd	r3, Y+17	; 0x11
   1bfc0:	48 88       	ldd	r4, Y+16	; 0x10
   1bfc2:	5f 84       	ldd	r5, Y+15	; 0x0f
   1bfc4:	6e 84       	ldd	r6, Y+14	; 0x0e
   1bfc6:	7d 84       	ldd	r7, Y+13	; 0x0d
   1bfc8:	8c 84       	ldd	r8, Y+12	; 0x0c
   1bfca:	9b 84       	ldd	r9, Y+11	; 0x0b
   1bfcc:	aa 84       	ldd	r10, Y+10	; 0x0a
   1bfce:	b9 84       	ldd	r11, Y+9	; 0x09
   1bfd0:	c8 84       	ldd	r12, Y+8	; 0x08
   1bfd2:	df 80       	ldd	r13, Y+7	; 0x07
   1bfd4:	ee 80       	ldd	r14, Y+6	; 0x06
   1bfd6:	fd 80       	ldd	r15, Y+5	; 0x05
   1bfd8:	0c 81       	ldd	r16, Y+4	; 0x04
   1bfda:	1b 81       	ldd	r17, Y+3	; 0x03
   1bfdc:	aa 81       	ldd	r26, Y+2	; 0x02
   1bfde:	b9 81       	ldd	r27, Y+1	; 0x01
   1bfe0:	ce 0f       	add	r28, r30
   1bfe2:	d1 1d       	adc	r29, r1
   1bfe4:	0f b6       	in	r0, 0x3f	; 63
   1bfe6:	f8 94       	cli
   1bfe8:	de bf       	out	0x3e, r29	; 62
   1bfea:	0f be       	out	0x3f, r0	; 63
   1bfec:	cd bf       	out	0x3d, r28	; 61
   1bfee:	ed 01       	movw	r28, r26
   1bff0:	08 95       	ret

0001bff2 <__xload_1>:
   1bff2:	57 fd       	sbrc	r21, 7
   1bff4:	03 c0       	rjmp	.+6      	; 0x1bffc <__xload_1+0xa>
   1bff6:	5b bf       	out	0x3b, r21	; 59
   1bff8:	67 91       	elpm	r22, Z+
   1bffa:	08 95       	ret
   1bffc:	60 81       	ld	r22, Z
   1bffe:	08 95       	ret

0001c000 <__cmpdi2_s8>:
   1c000:	00 24       	eor	r0, r0
   1c002:	a7 fd       	sbrc	r26, 7
   1c004:	00 94       	com	r0
   1c006:	2a 17       	cp	r18, r26
   1c008:	30 05       	cpc	r19, r0
   1c00a:	40 05       	cpc	r20, r0
   1c00c:	50 05       	cpc	r21, r0
   1c00e:	60 05       	cpc	r22, r0
   1c010:	70 05       	cpc	r23, r0
   1c012:	80 05       	cpc	r24, r0
   1c014:	90 05       	cpc	r25, r0
   1c016:	08 95       	ret

0001c018 <__umulhisi3>:
   1c018:	a2 9f       	mul	r26, r18
   1c01a:	b0 01       	movw	r22, r0
   1c01c:	b3 9f       	mul	r27, r19
   1c01e:	c0 01       	movw	r24, r0
   1c020:	a3 9f       	mul	r26, r19
   1c022:	70 0d       	add	r23, r0
   1c024:	81 1d       	adc	r24, r1
   1c026:	11 24       	eor	r1, r1
   1c028:	91 1d       	adc	r25, r1
   1c02a:	b2 9f       	mul	r27, r18
   1c02c:	70 0d       	add	r23, r0
   1c02e:	81 1d       	adc	r24, r1
   1c030:	11 24       	eor	r1, r1
   1c032:	91 1d       	adc	r25, r1
   1c034:	08 95       	ret

0001c036 <__subsf3>:
   1c036:	50 58       	subi	r21, 0x80	; 128

0001c038 <__addsf3>:
   1c038:	bb 27       	eor	r27, r27
   1c03a:	aa 27       	eor	r26, r26
   1c03c:	0e d0       	rcall	.+28     	; 0x1c05a <__addsf3x>
   1c03e:	75 c1       	rjmp	.+746    	; 0x1c32a <__fp_round>
   1c040:	66 d1       	rcall	.+716    	; 0x1c30e <__fp_pscA>
   1c042:	30 f0       	brcs	.+12     	; 0x1c050 <__addsf3+0x18>
   1c044:	6b d1       	rcall	.+726    	; 0x1c31c <__fp_pscB>
   1c046:	20 f0       	brcs	.+8      	; 0x1c050 <__addsf3+0x18>
   1c048:	31 f4       	brne	.+12     	; 0x1c056 <__addsf3+0x1e>
   1c04a:	9f 3f       	cpi	r25, 0xFF	; 255
   1c04c:	11 f4       	brne	.+4      	; 0x1c052 <__addsf3+0x1a>
   1c04e:	1e f4       	brtc	.+6      	; 0x1c056 <__addsf3+0x1e>
   1c050:	5b c1       	rjmp	.+694    	; 0x1c308 <__fp_nan>
   1c052:	0e f4       	brtc	.+2      	; 0x1c056 <__addsf3+0x1e>
   1c054:	e0 95       	com	r30
   1c056:	e7 fb       	bst	r30, 7
   1c058:	51 c1       	rjmp	.+674    	; 0x1c2fc <__fp_inf>

0001c05a <__addsf3x>:
   1c05a:	e9 2f       	mov	r30, r25
   1c05c:	77 d1       	rcall	.+750    	; 0x1c34c <__fp_split3>
   1c05e:	80 f3       	brcs	.-32     	; 0x1c040 <__addsf3+0x8>
   1c060:	ba 17       	cp	r27, r26
   1c062:	62 07       	cpc	r22, r18
   1c064:	73 07       	cpc	r23, r19
   1c066:	84 07       	cpc	r24, r20
   1c068:	95 07       	cpc	r25, r21
   1c06a:	18 f0       	brcs	.+6      	; 0x1c072 <__addsf3x+0x18>
   1c06c:	71 f4       	brne	.+28     	; 0x1c08a <__addsf3x+0x30>
   1c06e:	9e f5       	brtc	.+102    	; 0x1c0d6 <__addsf3x+0x7c>
   1c070:	8f c1       	rjmp	.+798    	; 0x1c390 <__fp_zero>
   1c072:	0e f4       	brtc	.+2      	; 0x1c076 <__addsf3x+0x1c>
   1c074:	e0 95       	com	r30
   1c076:	0b 2e       	mov	r0, r27
   1c078:	ba 2f       	mov	r27, r26
   1c07a:	a0 2d       	mov	r26, r0
   1c07c:	0b 01       	movw	r0, r22
   1c07e:	b9 01       	movw	r22, r18
   1c080:	90 01       	movw	r18, r0
   1c082:	0c 01       	movw	r0, r24
   1c084:	ca 01       	movw	r24, r20
   1c086:	a0 01       	movw	r20, r0
   1c088:	11 24       	eor	r1, r1
   1c08a:	ff 27       	eor	r31, r31
   1c08c:	59 1b       	sub	r21, r25
   1c08e:	99 f0       	breq	.+38     	; 0x1c0b6 <__addsf3x+0x5c>
   1c090:	59 3f       	cpi	r21, 0xF9	; 249
   1c092:	50 f4       	brcc	.+20     	; 0x1c0a8 <__addsf3x+0x4e>
   1c094:	50 3e       	cpi	r21, 0xE0	; 224
   1c096:	68 f1       	brcs	.+90     	; 0x1c0f2 <__addsf3x+0x98>
   1c098:	1a 16       	cp	r1, r26
   1c09a:	f0 40       	sbci	r31, 0x00	; 0
   1c09c:	a2 2f       	mov	r26, r18
   1c09e:	23 2f       	mov	r18, r19
   1c0a0:	34 2f       	mov	r19, r20
   1c0a2:	44 27       	eor	r20, r20
   1c0a4:	58 5f       	subi	r21, 0xF8	; 248
   1c0a6:	f3 cf       	rjmp	.-26     	; 0x1c08e <__addsf3x+0x34>
   1c0a8:	46 95       	lsr	r20
   1c0aa:	37 95       	ror	r19
   1c0ac:	27 95       	ror	r18
   1c0ae:	a7 95       	ror	r26
   1c0b0:	f0 40       	sbci	r31, 0x00	; 0
   1c0b2:	53 95       	inc	r21
   1c0b4:	c9 f7       	brne	.-14     	; 0x1c0a8 <__addsf3x+0x4e>
   1c0b6:	7e f4       	brtc	.+30     	; 0x1c0d6 <__addsf3x+0x7c>
   1c0b8:	1f 16       	cp	r1, r31
   1c0ba:	ba 0b       	sbc	r27, r26
   1c0bc:	62 0b       	sbc	r22, r18
   1c0be:	73 0b       	sbc	r23, r19
   1c0c0:	84 0b       	sbc	r24, r20
   1c0c2:	ba f0       	brmi	.+46     	; 0x1c0f2 <__addsf3x+0x98>
   1c0c4:	91 50       	subi	r25, 0x01	; 1
   1c0c6:	a1 f0       	breq	.+40     	; 0x1c0f0 <__addsf3x+0x96>
   1c0c8:	ff 0f       	add	r31, r31
   1c0ca:	bb 1f       	adc	r27, r27
   1c0cc:	66 1f       	adc	r22, r22
   1c0ce:	77 1f       	adc	r23, r23
   1c0d0:	88 1f       	adc	r24, r24
   1c0d2:	c2 f7       	brpl	.-16     	; 0x1c0c4 <__addsf3x+0x6a>
   1c0d4:	0e c0       	rjmp	.+28     	; 0x1c0f2 <__addsf3x+0x98>
   1c0d6:	ba 0f       	add	r27, r26
   1c0d8:	62 1f       	adc	r22, r18
   1c0da:	73 1f       	adc	r23, r19
   1c0dc:	84 1f       	adc	r24, r20
   1c0de:	48 f4       	brcc	.+18     	; 0x1c0f2 <__addsf3x+0x98>
   1c0e0:	87 95       	ror	r24
   1c0e2:	77 95       	ror	r23
   1c0e4:	67 95       	ror	r22
   1c0e6:	b7 95       	ror	r27
   1c0e8:	f7 95       	ror	r31
   1c0ea:	9e 3f       	cpi	r25, 0xFE	; 254
   1c0ec:	08 f0       	brcs	.+2      	; 0x1c0f0 <__addsf3x+0x96>
   1c0ee:	b3 cf       	rjmp	.-154    	; 0x1c056 <__addsf3+0x1e>
   1c0f0:	93 95       	inc	r25
   1c0f2:	88 0f       	add	r24, r24
   1c0f4:	08 f0       	brcs	.+2      	; 0x1c0f8 <__addsf3x+0x9e>
   1c0f6:	99 27       	eor	r25, r25
   1c0f8:	ee 0f       	add	r30, r30
   1c0fa:	97 95       	ror	r25
   1c0fc:	87 95       	ror	r24
   1c0fe:	08 95       	ret

0001c100 <__cmpsf2>:
   1c100:	d9 d0       	rcall	.+434    	; 0x1c2b4 <__fp_cmp>
   1c102:	08 f4       	brcc	.+2      	; 0x1c106 <__cmpsf2+0x6>
   1c104:	81 e0       	ldi	r24, 0x01	; 1
   1c106:	08 95       	ret

0001c108 <__divsf3>:
   1c108:	0c d0       	rcall	.+24     	; 0x1c122 <__divsf3x>
   1c10a:	0f c1       	rjmp	.+542    	; 0x1c32a <__fp_round>
   1c10c:	07 d1       	rcall	.+526    	; 0x1c31c <__fp_pscB>
   1c10e:	40 f0       	brcs	.+16     	; 0x1c120 <__divsf3+0x18>
   1c110:	fe d0       	rcall	.+508    	; 0x1c30e <__fp_pscA>
   1c112:	30 f0       	brcs	.+12     	; 0x1c120 <__divsf3+0x18>
   1c114:	21 f4       	brne	.+8      	; 0x1c11e <__divsf3+0x16>
   1c116:	5f 3f       	cpi	r21, 0xFF	; 255
   1c118:	19 f0       	breq	.+6      	; 0x1c120 <__divsf3+0x18>
   1c11a:	f0 c0       	rjmp	.+480    	; 0x1c2fc <__fp_inf>
   1c11c:	51 11       	cpse	r21, r1
   1c11e:	39 c1       	rjmp	.+626    	; 0x1c392 <__fp_szero>
   1c120:	f3 c0       	rjmp	.+486    	; 0x1c308 <__fp_nan>

0001c122 <__divsf3x>:
   1c122:	14 d1       	rcall	.+552    	; 0x1c34c <__fp_split3>
   1c124:	98 f3       	brcs	.-26     	; 0x1c10c <__divsf3+0x4>

0001c126 <__divsf3_pse>:
   1c126:	99 23       	and	r25, r25
   1c128:	c9 f3       	breq	.-14     	; 0x1c11c <__divsf3+0x14>
   1c12a:	55 23       	and	r21, r21
   1c12c:	b1 f3       	breq	.-20     	; 0x1c11a <__divsf3+0x12>
   1c12e:	95 1b       	sub	r25, r21
   1c130:	55 0b       	sbc	r21, r21
   1c132:	bb 27       	eor	r27, r27
   1c134:	aa 27       	eor	r26, r26
   1c136:	62 17       	cp	r22, r18
   1c138:	73 07       	cpc	r23, r19
   1c13a:	84 07       	cpc	r24, r20
   1c13c:	38 f0       	brcs	.+14     	; 0x1c14c <__divsf3_pse+0x26>
   1c13e:	9f 5f       	subi	r25, 0xFF	; 255
   1c140:	5f 4f       	sbci	r21, 0xFF	; 255
   1c142:	22 0f       	add	r18, r18
   1c144:	33 1f       	adc	r19, r19
   1c146:	44 1f       	adc	r20, r20
   1c148:	aa 1f       	adc	r26, r26
   1c14a:	a9 f3       	breq	.-22     	; 0x1c136 <__divsf3_pse+0x10>
   1c14c:	33 d0       	rcall	.+102    	; 0x1c1b4 <__divsf3_pse+0x8e>
   1c14e:	0e 2e       	mov	r0, r30
   1c150:	3a f0       	brmi	.+14     	; 0x1c160 <__divsf3_pse+0x3a>
   1c152:	e0 e8       	ldi	r30, 0x80	; 128
   1c154:	30 d0       	rcall	.+96     	; 0x1c1b6 <__divsf3_pse+0x90>
   1c156:	91 50       	subi	r25, 0x01	; 1
   1c158:	50 40       	sbci	r21, 0x00	; 0
   1c15a:	e6 95       	lsr	r30
   1c15c:	00 1c       	adc	r0, r0
   1c15e:	ca f7       	brpl	.-14     	; 0x1c152 <__divsf3_pse+0x2c>
   1c160:	29 d0       	rcall	.+82     	; 0x1c1b4 <__divsf3_pse+0x8e>
   1c162:	fe 2f       	mov	r31, r30
   1c164:	27 d0       	rcall	.+78     	; 0x1c1b4 <__divsf3_pse+0x8e>
   1c166:	66 0f       	add	r22, r22
   1c168:	77 1f       	adc	r23, r23
   1c16a:	88 1f       	adc	r24, r24
   1c16c:	bb 1f       	adc	r27, r27
   1c16e:	26 17       	cp	r18, r22
   1c170:	37 07       	cpc	r19, r23
   1c172:	48 07       	cpc	r20, r24
   1c174:	ab 07       	cpc	r26, r27
   1c176:	b0 e8       	ldi	r27, 0x80	; 128
   1c178:	09 f0       	breq	.+2      	; 0x1c17c <__divsf3_pse+0x56>
   1c17a:	bb 0b       	sbc	r27, r27
   1c17c:	80 2d       	mov	r24, r0
   1c17e:	bf 01       	movw	r22, r30
   1c180:	ff 27       	eor	r31, r31
   1c182:	93 58       	subi	r25, 0x83	; 131
   1c184:	5f 4f       	sbci	r21, 0xFF	; 255
   1c186:	2a f0       	brmi	.+10     	; 0x1c192 <__divsf3_pse+0x6c>
   1c188:	9e 3f       	cpi	r25, 0xFE	; 254
   1c18a:	51 05       	cpc	r21, r1
   1c18c:	68 f0       	brcs	.+26     	; 0x1c1a8 <__divsf3_pse+0x82>
   1c18e:	b6 c0       	rjmp	.+364    	; 0x1c2fc <__fp_inf>
   1c190:	00 c1       	rjmp	.+512    	; 0x1c392 <__fp_szero>
   1c192:	5f 3f       	cpi	r21, 0xFF	; 255
   1c194:	ec f3       	brlt	.-6      	; 0x1c190 <__divsf3_pse+0x6a>
   1c196:	98 3e       	cpi	r25, 0xE8	; 232
   1c198:	dc f3       	brlt	.-10     	; 0x1c190 <__divsf3_pse+0x6a>
   1c19a:	86 95       	lsr	r24
   1c19c:	77 95       	ror	r23
   1c19e:	67 95       	ror	r22
   1c1a0:	b7 95       	ror	r27
   1c1a2:	f7 95       	ror	r31
   1c1a4:	9f 5f       	subi	r25, 0xFF	; 255
   1c1a6:	c9 f7       	brne	.-14     	; 0x1c19a <__divsf3_pse+0x74>
   1c1a8:	88 0f       	add	r24, r24
   1c1aa:	91 1d       	adc	r25, r1
   1c1ac:	96 95       	lsr	r25
   1c1ae:	87 95       	ror	r24
   1c1b0:	97 f9       	bld	r25, 7
   1c1b2:	08 95       	ret
   1c1b4:	e1 e0       	ldi	r30, 0x01	; 1
   1c1b6:	66 0f       	add	r22, r22
   1c1b8:	77 1f       	adc	r23, r23
   1c1ba:	88 1f       	adc	r24, r24
   1c1bc:	bb 1f       	adc	r27, r27
   1c1be:	62 17       	cp	r22, r18
   1c1c0:	73 07       	cpc	r23, r19
   1c1c2:	84 07       	cpc	r24, r20
   1c1c4:	ba 07       	cpc	r27, r26
   1c1c6:	20 f0       	brcs	.+8      	; 0x1c1d0 <__divsf3_pse+0xaa>
   1c1c8:	62 1b       	sub	r22, r18
   1c1ca:	73 0b       	sbc	r23, r19
   1c1cc:	84 0b       	sbc	r24, r20
   1c1ce:	ba 0b       	sbc	r27, r26
   1c1d0:	ee 1f       	adc	r30, r30
   1c1d2:	88 f7       	brcc	.-30     	; 0x1c1b6 <__divsf3_pse+0x90>
   1c1d4:	e0 95       	com	r30
   1c1d6:	08 95       	ret

0001c1d8 <__fixsfsi>:
   1c1d8:	04 d0       	rcall	.+8      	; 0x1c1e2 <__fixunssfsi>
   1c1da:	68 94       	set
   1c1dc:	b1 11       	cpse	r27, r1
   1c1de:	d9 c0       	rjmp	.+434    	; 0x1c392 <__fp_szero>
   1c1e0:	08 95       	ret

0001c1e2 <__fixunssfsi>:
   1c1e2:	bc d0       	rcall	.+376    	; 0x1c35c <__fp_splitA>
   1c1e4:	88 f0       	brcs	.+34     	; 0x1c208 <__fixunssfsi+0x26>
   1c1e6:	9f 57       	subi	r25, 0x7F	; 127
   1c1e8:	90 f0       	brcs	.+36     	; 0x1c20e <__fixunssfsi+0x2c>
   1c1ea:	b9 2f       	mov	r27, r25
   1c1ec:	99 27       	eor	r25, r25
   1c1ee:	b7 51       	subi	r27, 0x17	; 23
   1c1f0:	a0 f0       	brcs	.+40     	; 0x1c21a <__fixunssfsi+0x38>
   1c1f2:	d1 f0       	breq	.+52     	; 0x1c228 <__fixunssfsi+0x46>
   1c1f4:	66 0f       	add	r22, r22
   1c1f6:	77 1f       	adc	r23, r23
   1c1f8:	88 1f       	adc	r24, r24
   1c1fa:	99 1f       	adc	r25, r25
   1c1fc:	1a f0       	brmi	.+6      	; 0x1c204 <__fixunssfsi+0x22>
   1c1fe:	ba 95       	dec	r27
   1c200:	c9 f7       	brne	.-14     	; 0x1c1f4 <__fixunssfsi+0x12>
   1c202:	12 c0       	rjmp	.+36     	; 0x1c228 <__fixunssfsi+0x46>
   1c204:	b1 30       	cpi	r27, 0x01	; 1
   1c206:	81 f0       	breq	.+32     	; 0x1c228 <__fixunssfsi+0x46>
   1c208:	c3 d0       	rcall	.+390    	; 0x1c390 <__fp_zero>
   1c20a:	b1 e0       	ldi	r27, 0x01	; 1
   1c20c:	08 95       	ret
   1c20e:	c0 c0       	rjmp	.+384    	; 0x1c390 <__fp_zero>
   1c210:	67 2f       	mov	r22, r23
   1c212:	78 2f       	mov	r23, r24
   1c214:	88 27       	eor	r24, r24
   1c216:	b8 5f       	subi	r27, 0xF8	; 248
   1c218:	39 f0       	breq	.+14     	; 0x1c228 <__fixunssfsi+0x46>
   1c21a:	b9 3f       	cpi	r27, 0xF9	; 249
   1c21c:	cc f3       	brlt	.-14     	; 0x1c210 <__fixunssfsi+0x2e>
   1c21e:	86 95       	lsr	r24
   1c220:	77 95       	ror	r23
   1c222:	67 95       	ror	r22
   1c224:	b3 95       	inc	r27
   1c226:	d9 f7       	brne	.-10     	; 0x1c21e <__fixunssfsi+0x3c>
   1c228:	3e f4       	brtc	.+14     	; 0x1c238 <__fixunssfsi+0x56>
   1c22a:	90 95       	com	r25
   1c22c:	80 95       	com	r24
   1c22e:	70 95       	com	r23
   1c230:	61 95       	neg	r22
   1c232:	7f 4f       	sbci	r23, 0xFF	; 255
   1c234:	8f 4f       	sbci	r24, 0xFF	; 255
   1c236:	9f 4f       	sbci	r25, 0xFF	; 255
   1c238:	08 95       	ret

0001c23a <__floatunsisf>:
   1c23a:	e8 94       	clt
   1c23c:	09 c0       	rjmp	.+18     	; 0x1c250 <__floatsisf+0x12>

0001c23e <__floatsisf>:
   1c23e:	97 fb       	bst	r25, 7
   1c240:	3e f4       	brtc	.+14     	; 0x1c250 <__floatsisf+0x12>
   1c242:	90 95       	com	r25
   1c244:	80 95       	com	r24
   1c246:	70 95       	com	r23
   1c248:	61 95       	neg	r22
   1c24a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c24c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c24e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c250:	99 23       	and	r25, r25
   1c252:	a9 f0       	breq	.+42     	; 0x1c27e <__floatsisf+0x40>
   1c254:	f9 2f       	mov	r31, r25
   1c256:	96 e9       	ldi	r25, 0x96	; 150
   1c258:	bb 27       	eor	r27, r27
   1c25a:	93 95       	inc	r25
   1c25c:	f6 95       	lsr	r31
   1c25e:	87 95       	ror	r24
   1c260:	77 95       	ror	r23
   1c262:	67 95       	ror	r22
   1c264:	b7 95       	ror	r27
   1c266:	f1 11       	cpse	r31, r1
   1c268:	f8 cf       	rjmp	.-16     	; 0x1c25a <__floatsisf+0x1c>
   1c26a:	fa f4       	brpl	.+62     	; 0x1c2aa <__floatsisf+0x6c>
   1c26c:	bb 0f       	add	r27, r27
   1c26e:	11 f4       	brne	.+4      	; 0x1c274 <__floatsisf+0x36>
   1c270:	60 ff       	sbrs	r22, 0
   1c272:	1b c0       	rjmp	.+54     	; 0x1c2aa <__floatsisf+0x6c>
   1c274:	6f 5f       	subi	r22, 0xFF	; 255
   1c276:	7f 4f       	sbci	r23, 0xFF	; 255
   1c278:	8f 4f       	sbci	r24, 0xFF	; 255
   1c27a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c27c:	16 c0       	rjmp	.+44     	; 0x1c2aa <__floatsisf+0x6c>
   1c27e:	88 23       	and	r24, r24
   1c280:	11 f0       	breq	.+4      	; 0x1c286 <__floatsisf+0x48>
   1c282:	96 e9       	ldi	r25, 0x96	; 150
   1c284:	11 c0       	rjmp	.+34     	; 0x1c2a8 <__floatsisf+0x6a>
   1c286:	77 23       	and	r23, r23
   1c288:	21 f0       	breq	.+8      	; 0x1c292 <__floatsisf+0x54>
   1c28a:	9e e8       	ldi	r25, 0x8E	; 142
   1c28c:	87 2f       	mov	r24, r23
   1c28e:	76 2f       	mov	r23, r22
   1c290:	05 c0       	rjmp	.+10     	; 0x1c29c <__floatsisf+0x5e>
   1c292:	66 23       	and	r22, r22
   1c294:	71 f0       	breq	.+28     	; 0x1c2b2 <__floatsisf+0x74>
   1c296:	96 e8       	ldi	r25, 0x86	; 134
   1c298:	86 2f       	mov	r24, r22
   1c29a:	70 e0       	ldi	r23, 0x00	; 0
   1c29c:	60 e0       	ldi	r22, 0x00	; 0
   1c29e:	2a f0       	brmi	.+10     	; 0x1c2aa <__floatsisf+0x6c>
   1c2a0:	9a 95       	dec	r25
   1c2a2:	66 0f       	add	r22, r22
   1c2a4:	77 1f       	adc	r23, r23
   1c2a6:	88 1f       	adc	r24, r24
   1c2a8:	da f7       	brpl	.-10     	; 0x1c2a0 <__floatsisf+0x62>
   1c2aa:	88 0f       	add	r24, r24
   1c2ac:	96 95       	lsr	r25
   1c2ae:	87 95       	ror	r24
   1c2b0:	97 f9       	bld	r25, 7
   1c2b2:	08 95       	ret

0001c2b4 <__fp_cmp>:
   1c2b4:	99 0f       	add	r25, r25
   1c2b6:	00 08       	sbc	r0, r0
   1c2b8:	55 0f       	add	r21, r21
   1c2ba:	aa 0b       	sbc	r26, r26
   1c2bc:	e0 e8       	ldi	r30, 0x80	; 128
   1c2be:	fe ef       	ldi	r31, 0xFE	; 254
   1c2c0:	16 16       	cp	r1, r22
   1c2c2:	17 06       	cpc	r1, r23
   1c2c4:	e8 07       	cpc	r30, r24
   1c2c6:	f9 07       	cpc	r31, r25
   1c2c8:	c0 f0       	brcs	.+48     	; 0x1c2fa <__fp_cmp+0x46>
   1c2ca:	12 16       	cp	r1, r18
   1c2cc:	13 06       	cpc	r1, r19
   1c2ce:	e4 07       	cpc	r30, r20
   1c2d0:	f5 07       	cpc	r31, r21
   1c2d2:	98 f0       	brcs	.+38     	; 0x1c2fa <__fp_cmp+0x46>
   1c2d4:	62 1b       	sub	r22, r18
   1c2d6:	73 0b       	sbc	r23, r19
   1c2d8:	84 0b       	sbc	r24, r20
   1c2da:	95 0b       	sbc	r25, r21
   1c2dc:	39 f4       	brne	.+14     	; 0x1c2ec <__fp_cmp+0x38>
   1c2de:	0a 26       	eor	r0, r26
   1c2e0:	61 f0       	breq	.+24     	; 0x1c2fa <__fp_cmp+0x46>
   1c2e2:	23 2b       	or	r18, r19
   1c2e4:	24 2b       	or	r18, r20
   1c2e6:	25 2b       	or	r18, r21
   1c2e8:	21 f4       	brne	.+8      	; 0x1c2f2 <__fp_cmp+0x3e>
   1c2ea:	08 95       	ret
   1c2ec:	0a 26       	eor	r0, r26
   1c2ee:	09 f4       	brne	.+2      	; 0x1c2f2 <__fp_cmp+0x3e>
   1c2f0:	a1 40       	sbci	r26, 0x01	; 1
   1c2f2:	a6 95       	lsr	r26
   1c2f4:	8f ef       	ldi	r24, 0xFF	; 255
   1c2f6:	81 1d       	adc	r24, r1
   1c2f8:	81 1d       	adc	r24, r1
   1c2fa:	08 95       	ret

0001c2fc <__fp_inf>:
   1c2fc:	97 f9       	bld	r25, 7
   1c2fe:	9f 67       	ori	r25, 0x7F	; 127
   1c300:	80 e8       	ldi	r24, 0x80	; 128
   1c302:	70 e0       	ldi	r23, 0x00	; 0
   1c304:	60 e0       	ldi	r22, 0x00	; 0
   1c306:	08 95       	ret

0001c308 <__fp_nan>:
   1c308:	9f ef       	ldi	r25, 0xFF	; 255
   1c30a:	80 ec       	ldi	r24, 0xC0	; 192
   1c30c:	08 95       	ret

0001c30e <__fp_pscA>:
   1c30e:	00 24       	eor	r0, r0
   1c310:	0a 94       	dec	r0
   1c312:	16 16       	cp	r1, r22
   1c314:	17 06       	cpc	r1, r23
   1c316:	18 06       	cpc	r1, r24
   1c318:	09 06       	cpc	r0, r25
   1c31a:	08 95       	ret

0001c31c <__fp_pscB>:
   1c31c:	00 24       	eor	r0, r0
   1c31e:	0a 94       	dec	r0
   1c320:	12 16       	cp	r1, r18
   1c322:	13 06       	cpc	r1, r19
   1c324:	14 06       	cpc	r1, r20
   1c326:	05 06       	cpc	r0, r21
   1c328:	08 95       	ret

0001c32a <__fp_round>:
   1c32a:	09 2e       	mov	r0, r25
   1c32c:	03 94       	inc	r0
   1c32e:	00 0c       	add	r0, r0
   1c330:	11 f4       	brne	.+4      	; 0x1c336 <__fp_round+0xc>
   1c332:	88 23       	and	r24, r24
   1c334:	52 f0       	brmi	.+20     	; 0x1c34a <__fp_round+0x20>
   1c336:	bb 0f       	add	r27, r27
   1c338:	40 f4       	brcc	.+16     	; 0x1c34a <__fp_round+0x20>
   1c33a:	bf 2b       	or	r27, r31
   1c33c:	11 f4       	brne	.+4      	; 0x1c342 <__fp_round+0x18>
   1c33e:	60 ff       	sbrs	r22, 0
   1c340:	04 c0       	rjmp	.+8      	; 0x1c34a <__fp_round+0x20>
   1c342:	6f 5f       	subi	r22, 0xFF	; 255
   1c344:	7f 4f       	sbci	r23, 0xFF	; 255
   1c346:	8f 4f       	sbci	r24, 0xFF	; 255
   1c348:	9f 4f       	sbci	r25, 0xFF	; 255
   1c34a:	08 95       	ret

0001c34c <__fp_split3>:
   1c34c:	57 fd       	sbrc	r21, 7
   1c34e:	90 58       	subi	r25, 0x80	; 128
   1c350:	44 0f       	add	r20, r20
   1c352:	55 1f       	adc	r21, r21
   1c354:	59 f0       	breq	.+22     	; 0x1c36c <__fp_splitA+0x10>
   1c356:	5f 3f       	cpi	r21, 0xFF	; 255
   1c358:	71 f0       	breq	.+28     	; 0x1c376 <__fp_splitA+0x1a>
   1c35a:	47 95       	ror	r20

0001c35c <__fp_splitA>:
   1c35c:	88 0f       	add	r24, r24
   1c35e:	97 fb       	bst	r25, 7
   1c360:	99 1f       	adc	r25, r25
   1c362:	61 f0       	breq	.+24     	; 0x1c37c <__fp_splitA+0x20>
   1c364:	9f 3f       	cpi	r25, 0xFF	; 255
   1c366:	79 f0       	breq	.+30     	; 0x1c386 <__fp_splitA+0x2a>
   1c368:	87 95       	ror	r24
   1c36a:	08 95       	ret
   1c36c:	12 16       	cp	r1, r18
   1c36e:	13 06       	cpc	r1, r19
   1c370:	14 06       	cpc	r1, r20
   1c372:	55 1f       	adc	r21, r21
   1c374:	f2 cf       	rjmp	.-28     	; 0x1c35a <__fp_split3+0xe>
   1c376:	46 95       	lsr	r20
   1c378:	f1 df       	rcall	.-30     	; 0x1c35c <__fp_splitA>
   1c37a:	08 c0       	rjmp	.+16     	; 0x1c38c <__fp_splitA+0x30>
   1c37c:	16 16       	cp	r1, r22
   1c37e:	17 06       	cpc	r1, r23
   1c380:	18 06       	cpc	r1, r24
   1c382:	99 1f       	adc	r25, r25
   1c384:	f1 cf       	rjmp	.-30     	; 0x1c368 <__fp_splitA+0xc>
   1c386:	86 95       	lsr	r24
   1c388:	71 05       	cpc	r23, r1
   1c38a:	61 05       	cpc	r22, r1
   1c38c:	08 94       	sec
   1c38e:	08 95       	ret

0001c390 <__fp_zero>:
   1c390:	e8 94       	clt

0001c392 <__fp_szero>:
   1c392:	bb 27       	eor	r27, r27
   1c394:	66 27       	eor	r22, r22
   1c396:	77 27       	eor	r23, r23
   1c398:	cb 01       	movw	r24, r22
   1c39a:	97 f9       	bld	r25, 7
   1c39c:	08 95       	ret

0001c39e <__gesf2>:
   1c39e:	8a df       	rcall	.-236    	; 0x1c2b4 <__fp_cmp>
   1c3a0:	08 f4       	brcc	.+2      	; 0x1c3a4 <__gesf2+0x6>
   1c3a2:	8f ef       	ldi	r24, 0xFF	; 255
   1c3a4:	08 95       	ret

0001c3a6 <__mulsf3>:
   1c3a6:	0b d0       	rcall	.+22     	; 0x1c3be <__mulsf3x>
   1c3a8:	c0 cf       	rjmp	.-128    	; 0x1c32a <__fp_round>
   1c3aa:	b1 df       	rcall	.-158    	; 0x1c30e <__fp_pscA>
   1c3ac:	28 f0       	brcs	.+10     	; 0x1c3b8 <__mulsf3+0x12>
   1c3ae:	b6 df       	rcall	.-148    	; 0x1c31c <__fp_pscB>
   1c3b0:	18 f0       	brcs	.+6      	; 0x1c3b8 <__mulsf3+0x12>
   1c3b2:	95 23       	and	r25, r21
   1c3b4:	09 f0       	breq	.+2      	; 0x1c3b8 <__mulsf3+0x12>
   1c3b6:	a2 cf       	rjmp	.-188    	; 0x1c2fc <__fp_inf>
   1c3b8:	a7 cf       	rjmp	.-178    	; 0x1c308 <__fp_nan>
   1c3ba:	11 24       	eor	r1, r1
   1c3bc:	ea cf       	rjmp	.-44     	; 0x1c392 <__fp_szero>

0001c3be <__mulsf3x>:
   1c3be:	c6 df       	rcall	.-116    	; 0x1c34c <__fp_split3>
   1c3c0:	a0 f3       	brcs	.-24     	; 0x1c3aa <__mulsf3+0x4>

0001c3c2 <__mulsf3_pse>:
   1c3c2:	95 9f       	mul	r25, r21
   1c3c4:	d1 f3       	breq	.-12     	; 0x1c3ba <__mulsf3+0x14>
   1c3c6:	95 0f       	add	r25, r21
   1c3c8:	50 e0       	ldi	r21, 0x00	; 0
   1c3ca:	55 1f       	adc	r21, r21
   1c3cc:	62 9f       	mul	r22, r18
   1c3ce:	f0 01       	movw	r30, r0
   1c3d0:	72 9f       	mul	r23, r18
   1c3d2:	bb 27       	eor	r27, r27
   1c3d4:	f0 0d       	add	r31, r0
   1c3d6:	b1 1d       	adc	r27, r1
   1c3d8:	63 9f       	mul	r22, r19
   1c3da:	aa 27       	eor	r26, r26
   1c3dc:	f0 0d       	add	r31, r0
   1c3de:	b1 1d       	adc	r27, r1
   1c3e0:	aa 1f       	adc	r26, r26
   1c3e2:	64 9f       	mul	r22, r20
   1c3e4:	66 27       	eor	r22, r22
   1c3e6:	b0 0d       	add	r27, r0
   1c3e8:	a1 1d       	adc	r26, r1
   1c3ea:	66 1f       	adc	r22, r22
   1c3ec:	82 9f       	mul	r24, r18
   1c3ee:	22 27       	eor	r18, r18
   1c3f0:	b0 0d       	add	r27, r0
   1c3f2:	a1 1d       	adc	r26, r1
   1c3f4:	62 1f       	adc	r22, r18
   1c3f6:	73 9f       	mul	r23, r19
   1c3f8:	b0 0d       	add	r27, r0
   1c3fa:	a1 1d       	adc	r26, r1
   1c3fc:	62 1f       	adc	r22, r18
   1c3fe:	83 9f       	mul	r24, r19
   1c400:	a0 0d       	add	r26, r0
   1c402:	61 1d       	adc	r22, r1
   1c404:	22 1f       	adc	r18, r18
   1c406:	74 9f       	mul	r23, r20
   1c408:	33 27       	eor	r19, r19
   1c40a:	a0 0d       	add	r26, r0
   1c40c:	61 1d       	adc	r22, r1
   1c40e:	23 1f       	adc	r18, r19
   1c410:	84 9f       	mul	r24, r20
   1c412:	60 0d       	add	r22, r0
   1c414:	21 1d       	adc	r18, r1
   1c416:	82 2f       	mov	r24, r18
   1c418:	76 2f       	mov	r23, r22
   1c41a:	6a 2f       	mov	r22, r26
   1c41c:	11 24       	eor	r1, r1
   1c41e:	9f 57       	subi	r25, 0x7F	; 127
   1c420:	50 40       	sbci	r21, 0x00	; 0
   1c422:	8a f0       	brmi	.+34     	; 0x1c446 <__mulsf3_pse+0x84>
   1c424:	e1 f0       	breq	.+56     	; 0x1c45e <__mulsf3_pse+0x9c>
   1c426:	88 23       	and	r24, r24
   1c428:	4a f0       	brmi	.+18     	; 0x1c43c <__mulsf3_pse+0x7a>
   1c42a:	ee 0f       	add	r30, r30
   1c42c:	ff 1f       	adc	r31, r31
   1c42e:	bb 1f       	adc	r27, r27
   1c430:	66 1f       	adc	r22, r22
   1c432:	77 1f       	adc	r23, r23
   1c434:	88 1f       	adc	r24, r24
   1c436:	91 50       	subi	r25, 0x01	; 1
   1c438:	50 40       	sbci	r21, 0x00	; 0
   1c43a:	a9 f7       	brne	.-22     	; 0x1c426 <__mulsf3_pse+0x64>
   1c43c:	9e 3f       	cpi	r25, 0xFE	; 254
   1c43e:	51 05       	cpc	r21, r1
   1c440:	70 f0       	brcs	.+28     	; 0x1c45e <__mulsf3_pse+0x9c>
   1c442:	5c cf       	rjmp	.-328    	; 0x1c2fc <__fp_inf>
   1c444:	a6 cf       	rjmp	.-180    	; 0x1c392 <__fp_szero>
   1c446:	5f 3f       	cpi	r21, 0xFF	; 255
   1c448:	ec f3       	brlt	.-6      	; 0x1c444 <__mulsf3_pse+0x82>
   1c44a:	98 3e       	cpi	r25, 0xE8	; 232
   1c44c:	dc f3       	brlt	.-10     	; 0x1c444 <__mulsf3_pse+0x82>
   1c44e:	86 95       	lsr	r24
   1c450:	77 95       	ror	r23
   1c452:	67 95       	ror	r22
   1c454:	b7 95       	ror	r27
   1c456:	f7 95       	ror	r31
   1c458:	e7 95       	ror	r30
   1c45a:	9f 5f       	subi	r25, 0xFF	; 255
   1c45c:	c1 f7       	brne	.-16     	; 0x1c44e <__mulsf3_pse+0x8c>
   1c45e:	fe 2b       	or	r31, r30
   1c460:	88 0f       	add	r24, r24
   1c462:	91 1d       	adc	r25, r1
   1c464:	96 95       	lsr	r25
   1c466:	87 95       	ror	r24
   1c468:	97 f9       	bld	r25, 7
   1c46a:	08 95       	ret

0001c46c <round>:
   1c46c:	77 df       	rcall	.-274    	; 0x1c35c <__fp_splitA>
   1c46e:	e0 f0       	brcs	.+56     	; 0x1c4a8 <round+0x3c>
   1c470:	9e 37       	cpi	r25, 0x7E	; 126
   1c472:	d8 f0       	brcs	.+54     	; 0x1c4aa <round+0x3e>
   1c474:	96 39       	cpi	r25, 0x96	; 150
   1c476:	b8 f4       	brcc	.+46     	; 0x1c4a6 <round+0x3a>
   1c478:	9e 38       	cpi	r25, 0x8E	; 142
   1c47a:	48 f4       	brcc	.+18     	; 0x1c48e <round+0x22>
   1c47c:	67 2f       	mov	r22, r23
   1c47e:	78 2f       	mov	r23, r24
   1c480:	88 27       	eor	r24, r24
   1c482:	98 5f       	subi	r25, 0xF8	; 248
   1c484:	f9 cf       	rjmp	.-14     	; 0x1c478 <round+0xc>
   1c486:	86 95       	lsr	r24
   1c488:	77 95       	ror	r23
   1c48a:	67 95       	ror	r22
   1c48c:	93 95       	inc	r25
   1c48e:	95 39       	cpi	r25, 0x95	; 149
   1c490:	d0 f3       	brcs	.-12     	; 0x1c486 <round+0x1a>
   1c492:	b6 2f       	mov	r27, r22
   1c494:	b1 70       	andi	r27, 0x01	; 1
   1c496:	6b 0f       	add	r22, r27
   1c498:	71 1d       	adc	r23, r1
   1c49a:	81 1d       	adc	r24, r1
   1c49c:	20 f4       	brcc	.+8      	; 0x1c4a6 <round+0x3a>
   1c49e:	87 95       	ror	r24
   1c4a0:	77 95       	ror	r23
   1c4a2:	67 95       	ror	r22
   1c4a4:	93 95       	inc	r25
   1c4a6:	02 c0       	rjmp	.+4      	; 0x1c4ac <__fp_mintl>
   1c4a8:	1c c0       	rjmp	.+56     	; 0x1c4e2 <__fp_mpack>
   1c4aa:	73 cf       	rjmp	.-282    	; 0x1c392 <__fp_szero>

0001c4ac <__fp_mintl>:
   1c4ac:	88 23       	and	r24, r24
   1c4ae:	71 f4       	brne	.+28     	; 0x1c4cc <__fp_mintl+0x20>
   1c4b0:	77 23       	and	r23, r23
   1c4b2:	21 f0       	breq	.+8      	; 0x1c4bc <__fp_mintl+0x10>
   1c4b4:	98 50       	subi	r25, 0x08	; 8
   1c4b6:	87 2b       	or	r24, r23
   1c4b8:	76 2f       	mov	r23, r22
   1c4ba:	07 c0       	rjmp	.+14     	; 0x1c4ca <__fp_mintl+0x1e>
   1c4bc:	66 23       	and	r22, r22
   1c4be:	11 f4       	brne	.+4      	; 0x1c4c4 <__fp_mintl+0x18>
   1c4c0:	99 27       	eor	r25, r25
   1c4c2:	0d c0       	rjmp	.+26     	; 0x1c4de <__fp_mintl+0x32>
   1c4c4:	90 51       	subi	r25, 0x10	; 16
   1c4c6:	86 2b       	or	r24, r22
   1c4c8:	70 e0       	ldi	r23, 0x00	; 0
   1c4ca:	60 e0       	ldi	r22, 0x00	; 0
   1c4cc:	2a f0       	brmi	.+10     	; 0x1c4d8 <__fp_mintl+0x2c>
   1c4ce:	9a 95       	dec	r25
   1c4d0:	66 0f       	add	r22, r22
   1c4d2:	77 1f       	adc	r23, r23
   1c4d4:	88 1f       	adc	r24, r24
   1c4d6:	da f7       	brpl	.-10     	; 0x1c4ce <__fp_mintl+0x22>
   1c4d8:	88 0f       	add	r24, r24
   1c4da:	96 95       	lsr	r25
   1c4dc:	87 95       	ror	r24
   1c4de:	97 f9       	bld	r25, 7
   1c4e0:	08 95       	ret

0001c4e2 <__fp_mpack>:
   1c4e2:	9f 3f       	cpi	r25, 0xFF	; 255
   1c4e4:	31 f0       	breq	.+12     	; 0x1c4f2 <__fp_mpack_finite+0xc>

0001c4e6 <__fp_mpack_finite>:
   1c4e6:	91 50       	subi	r25, 0x01	; 1
   1c4e8:	20 f4       	brcc	.+8      	; 0x1c4f2 <__fp_mpack_finite+0xc>
   1c4ea:	87 95       	ror	r24
   1c4ec:	77 95       	ror	r23
   1c4ee:	67 95       	ror	r22
   1c4f0:	b7 95       	ror	r27
   1c4f2:	88 0f       	add	r24, r24
   1c4f4:	91 1d       	adc	r25, r1
   1c4f6:	96 95       	lsr	r25
   1c4f8:	87 95       	ror	r24
   1c4fa:	97 f9       	bld	r25, 7
   1c4fc:	08 95       	ret

0001c4fe <calloc>:
   1c4fe:	0f 93       	push	r16
   1c500:	1f 93       	push	r17
   1c502:	cf 93       	push	r28
   1c504:	df 93       	push	r29
   1c506:	86 9f       	mul	r24, r22
   1c508:	80 01       	movw	r16, r0
   1c50a:	87 9f       	mul	r24, r23
   1c50c:	10 0d       	add	r17, r0
   1c50e:	96 9f       	mul	r25, r22
   1c510:	10 0d       	add	r17, r0
   1c512:	11 24       	eor	r1, r1
   1c514:	c8 01       	movw	r24, r16
   1c516:	0d d0       	rcall	.+26     	; 0x1c532 <malloc>
   1c518:	ec 01       	movw	r28, r24
   1c51a:	00 97       	sbiw	r24, 0x00	; 0
   1c51c:	21 f0       	breq	.+8      	; 0x1c526 <calloc+0x28>
   1c51e:	a8 01       	movw	r20, r16
   1c520:	60 e0       	ldi	r22, 0x00	; 0
   1c522:	70 e0       	ldi	r23, 0x00	; 0
   1c524:	27 d1       	rcall	.+590    	; 0x1c774 <memset>
   1c526:	ce 01       	movw	r24, r28
   1c528:	df 91       	pop	r29
   1c52a:	cf 91       	pop	r28
   1c52c:	1f 91       	pop	r17
   1c52e:	0f 91       	pop	r16
   1c530:	08 95       	ret

0001c532 <malloc>:
   1c532:	0f 93       	push	r16
   1c534:	1f 93       	push	r17
   1c536:	cf 93       	push	r28
   1c538:	df 93       	push	r29
   1c53a:	82 30       	cpi	r24, 0x02	; 2
   1c53c:	91 05       	cpc	r25, r1
   1c53e:	10 f4       	brcc	.+4      	; 0x1c544 <malloc+0x12>
   1c540:	82 e0       	ldi	r24, 0x02	; 2
   1c542:	90 e0       	ldi	r25, 0x00	; 0
   1c544:	e0 91 ba 21 	lds	r30, 0x21BA	; 0x8021ba <__flp>
   1c548:	f0 91 bb 21 	lds	r31, 0x21BB	; 0x8021bb <__flp+0x1>
   1c54c:	20 e0       	ldi	r18, 0x00	; 0
   1c54e:	30 e0       	ldi	r19, 0x00	; 0
   1c550:	a0 e0       	ldi	r26, 0x00	; 0
   1c552:	b0 e0       	ldi	r27, 0x00	; 0
   1c554:	30 97       	sbiw	r30, 0x00	; 0
   1c556:	19 f1       	breq	.+70     	; 0x1c59e <malloc+0x6c>
   1c558:	40 81       	ld	r20, Z
   1c55a:	51 81       	ldd	r21, Z+1	; 0x01
   1c55c:	02 81       	ldd	r16, Z+2	; 0x02
   1c55e:	13 81       	ldd	r17, Z+3	; 0x03
   1c560:	48 17       	cp	r20, r24
   1c562:	59 07       	cpc	r21, r25
   1c564:	c8 f0       	brcs	.+50     	; 0x1c598 <malloc+0x66>
   1c566:	84 17       	cp	r24, r20
   1c568:	95 07       	cpc	r25, r21
   1c56a:	69 f4       	brne	.+26     	; 0x1c586 <malloc+0x54>
   1c56c:	10 97       	sbiw	r26, 0x00	; 0
   1c56e:	31 f0       	breq	.+12     	; 0x1c57c <malloc+0x4a>
   1c570:	12 96       	adiw	r26, 0x02	; 2
   1c572:	0c 93       	st	X, r16
   1c574:	12 97       	sbiw	r26, 0x02	; 2
   1c576:	13 96       	adiw	r26, 0x03	; 3
   1c578:	1c 93       	st	X, r17
   1c57a:	27 c0       	rjmp	.+78     	; 0x1c5ca <malloc+0x98>
   1c57c:	00 93 ba 21 	sts	0x21BA, r16	; 0x8021ba <__flp>
   1c580:	10 93 bb 21 	sts	0x21BB, r17	; 0x8021bb <__flp+0x1>
   1c584:	22 c0       	rjmp	.+68     	; 0x1c5ca <malloc+0x98>
   1c586:	21 15       	cp	r18, r1
   1c588:	31 05       	cpc	r19, r1
   1c58a:	19 f0       	breq	.+6      	; 0x1c592 <malloc+0x60>
   1c58c:	42 17       	cp	r20, r18
   1c58e:	53 07       	cpc	r21, r19
   1c590:	18 f4       	brcc	.+6      	; 0x1c598 <malloc+0x66>
   1c592:	9a 01       	movw	r18, r20
   1c594:	bd 01       	movw	r22, r26
   1c596:	ef 01       	movw	r28, r30
   1c598:	df 01       	movw	r26, r30
   1c59a:	f8 01       	movw	r30, r16
   1c59c:	db cf       	rjmp	.-74     	; 0x1c554 <malloc+0x22>
   1c59e:	21 15       	cp	r18, r1
   1c5a0:	31 05       	cpc	r19, r1
   1c5a2:	f9 f0       	breq	.+62     	; 0x1c5e2 <malloc+0xb0>
   1c5a4:	28 1b       	sub	r18, r24
   1c5a6:	39 0b       	sbc	r19, r25
   1c5a8:	24 30       	cpi	r18, 0x04	; 4
   1c5aa:	31 05       	cpc	r19, r1
   1c5ac:	80 f4       	brcc	.+32     	; 0x1c5ce <malloc+0x9c>
   1c5ae:	8a 81       	ldd	r24, Y+2	; 0x02
   1c5b0:	9b 81       	ldd	r25, Y+3	; 0x03
   1c5b2:	61 15       	cp	r22, r1
   1c5b4:	71 05       	cpc	r23, r1
   1c5b6:	21 f0       	breq	.+8      	; 0x1c5c0 <malloc+0x8e>
   1c5b8:	fb 01       	movw	r30, r22
   1c5ba:	93 83       	std	Z+3, r25	; 0x03
   1c5bc:	82 83       	std	Z+2, r24	; 0x02
   1c5be:	04 c0       	rjmp	.+8      	; 0x1c5c8 <malloc+0x96>
   1c5c0:	90 93 bb 21 	sts	0x21BB, r25	; 0x8021bb <__flp+0x1>
   1c5c4:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <__flp>
   1c5c8:	fe 01       	movw	r30, r28
   1c5ca:	32 96       	adiw	r30, 0x02	; 2
   1c5cc:	44 c0       	rjmp	.+136    	; 0x1c656 <malloc+0x124>
   1c5ce:	fe 01       	movw	r30, r28
   1c5d0:	e2 0f       	add	r30, r18
   1c5d2:	f3 1f       	adc	r31, r19
   1c5d4:	81 93       	st	Z+, r24
   1c5d6:	91 93       	st	Z+, r25
   1c5d8:	22 50       	subi	r18, 0x02	; 2
   1c5da:	31 09       	sbc	r19, r1
   1c5dc:	39 83       	std	Y+1, r19	; 0x01
   1c5de:	28 83       	st	Y, r18
   1c5e0:	3a c0       	rjmp	.+116    	; 0x1c656 <malloc+0x124>
   1c5e2:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
   1c5e6:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1c5ea:	23 2b       	or	r18, r19
   1c5ec:	41 f4       	brne	.+16     	; 0x1c5fe <malloc+0xcc>
   1c5ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1c5f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1c5f6:	30 93 b9 21 	sts	0x21B9, r19	; 0x8021b9 <__brkval+0x1>
   1c5fa:	20 93 b8 21 	sts	0x21B8, r18	; 0x8021b8 <__brkval>
   1c5fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
   1c602:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
   1c606:	21 15       	cp	r18, r1
   1c608:	31 05       	cpc	r19, r1
   1c60a:	41 f4       	brne	.+16     	; 0x1c61c <malloc+0xea>
   1c60c:	2d b7       	in	r18, 0x3d	; 61
   1c60e:	3e b7       	in	r19, 0x3e	; 62
   1c610:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1c614:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1c618:	24 1b       	sub	r18, r20
   1c61a:	35 0b       	sbc	r19, r21
   1c61c:	e0 91 b8 21 	lds	r30, 0x21B8	; 0x8021b8 <__brkval>
   1c620:	f0 91 b9 21 	lds	r31, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1c624:	e2 17       	cp	r30, r18
   1c626:	f3 07       	cpc	r31, r19
   1c628:	a0 f4       	brcc	.+40     	; 0x1c652 <malloc+0x120>
   1c62a:	2e 1b       	sub	r18, r30
   1c62c:	3f 0b       	sbc	r19, r31
   1c62e:	28 17       	cp	r18, r24
   1c630:	39 07       	cpc	r19, r25
   1c632:	78 f0       	brcs	.+30     	; 0x1c652 <malloc+0x120>
   1c634:	ac 01       	movw	r20, r24
   1c636:	4e 5f       	subi	r20, 0xFE	; 254
   1c638:	5f 4f       	sbci	r21, 0xFF	; 255
   1c63a:	24 17       	cp	r18, r20
   1c63c:	35 07       	cpc	r19, r21
   1c63e:	48 f0       	brcs	.+18     	; 0x1c652 <malloc+0x120>
   1c640:	4e 0f       	add	r20, r30
   1c642:	5f 1f       	adc	r21, r31
   1c644:	50 93 b9 21 	sts	0x21B9, r21	; 0x8021b9 <__brkval+0x1>
   1c648:	40 93 b8 21 	sts	0x21B8, r20	; 0x8021b8 <__brkval>
   1c64c:	81 93       	st	Z+, r24
   1c64e:	91 93       	st	Z+, r25
   1c650:	02 c0       	rjmp	.+4      	; 0x1c656 <malloc+0x124>
   1c652:	e0 e0       	ldi	r30, 0x00	; 0
   1c654:	f0 e0       	ldi	r31, 0x00	; 0
   1c656:	cf 01       	movw	r24, r30
   1c658:	df 91       	pop	r29
   1c65a:	cf 91       	pop	r28
   1c65c:	1f 91       	pop	r17
   1c65e:	0f 91       	pop	r16
   1c660:	08 95       	ret

0001c662 <free>:
   1c662:	cf 93       	push	r28
   1c664:	df 93       	push	r29
   1c666:	00 97       	sbiw	r24, 0x00	; 0
   1c668:	09 f4       	brne	.+2      	; 0x1c66c <free+0xa>
   1c66a:	81 c0       	rjmp	.+258    	; 0x1c76e <free+0x10c>
   1c66c:	fc 01       	movw	r30, r24
   1c66e:	32 97       	sbiw	r30, 0x02	; 2
   1c670:	13 82       	std	Z+3, r1	; 0x03
   1c672:	12 82       	std	Z+2, r1	; 0x02
   1c674:	a0 91 ba 21 	lds	r26, 0x21BA	; 0x8021ba <__flp>
   1c678:	b0 91 bb 21 	lds	r27, 0x21BB	; 0x8021bb <__flp+0x1>
   1c67c:	10 97       	sbiw	r26, 0x00	; 0
   1c67e:	81 f4       	brne	.+32     	; 0x1c6a0 <free+0x3e>
   1c680:	20 81       	ld	r18, Z
   1c682:	31 81       	ldd	r19, Z+1	; 0x01
   1c684:	82 0f       	add	r24, r18
   1c686:	93 1f       	adc	r25, r19
   1c688:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
   1c68c:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1c690:	28 17       	cp	r18, r24
   1c692:	39 07       	cpc	r19, r25
   1c694:	51 f5       	brne	.+84     	; 0x1c6ea <free+0x88>
   1c696:	f0 93 b9 21 	sts	0x21B9, r31	; 0x8021b9 <__brkval+0x1>
   1c69a:	e0 93 b8 21 	sts	0x21B8, r30	; 0x8021b8 <__brkval>
   1c69e:	67 c0       	rjmp	.+206    	; 0x1c76e <free+0x10c>
   1c6a0:	ed 01       	movw	r28, r26
   1c6a2:	20 e0       	ldi	r18, 0x00	; 0
   1c6a4:	30 e0       	ldi	r19, 0x00	; 0
   1c6a6:	ce 17       	cp	r28, r30
   1c6a8:	df 07       	cpc	r29, r31
   1c6aa:	40 f4       	brcc	.+16     	; 0x1c6bc <free+0x5a>
   1c6ac:	4a 81       	ldd	r20, Y+2	; 0x02
   1c6ae:	5b 81       	ldd	r21, Y+3	; 0x03
   1c6b0:	9e 01       	movw	r18, r28
   1c6b2:	41 15       	cp	r20, r1
   1c6b4:	51 05       	cpc	r21, r1
   1c6b6:	f1 f0       	breq	.+60     	; 0x1c6f4 <free+0x92>
   1c6b8:	ea 01       	movw	r28, r20
   1c6ba:	f5 cf       	rjmp	.-22     	; 0x1c6a6 <free+0x44>
   1c6bc:	d3 83       	std	Z+3, r29	; 0x03
   1c6be:	c2 83       	std	Z+2, r28	; 0x02
   1c6c0:	40 81       	ld	r20, Z
   1c6c2:	51 81       	ldd	r21, Z+1	; 0x01
   1c6c4:	84 0f       	add	r24, r20
   1c6c6:	95 1f       	adc	r25, r21
   1c6c8:	c8 17       	cp	r28, r24
   1c6ca:	d9 07       	cpc	r29, r25
   1c6cc:	59 f4       	brne	.+22     	; 0x1c6e4 <free+0x82>
   1c6ce:	88 81       	ld	r24, Y
   1c6d0:	99 81       	ldd	r25, Y+1	; 0x01
   1c6d2:	84 0f       	add	r24, r20
   1c6d4:	95 1f       	adc	r25, r21
   1c6d6:	02 96       	adiw	r24, 0x02	; 2
   1c6d8:	91 83       	std	Z+1, r25	; 0x01
   1c6da:	80 83       	st	Z, r24
   1c6dc:	8a 81       	ldd	r24, Y+2	; 0x02
   1c6de:	9b 81       	ldd	r25, Y+3	; 0x03
   1c6e0:	93 83       	std	Z+3, r25	; 0x03
   1c6e2:	82 83       	std	Z+2, r24	; 0x02
   1c6e4:	21 15       	cp	r18, r1
   1c6e6:	31 05       	cpc	r19, r1
   1c6e8:	29 f4       	brne	.+10     	; 0x1c6f4 <free+0x92>
   1c6ea:	f0 93 bb 21 	sts	0x21BB, r31	; 0x8021bb <__flp+0x1>
   1c6ee:	e0 93 ba 21 	sts	0x21BA, r30	; 0x8021ba <__flp>
   1c6f2:	3d c0       	rjmp	.+122    	; 0x1c76e <free+0x10c>
   1c6f4:	e9 01       	movw	r28, r18
   1c6f6:	fb 83       	std	Y+3, r31	; 0x03
   1c6f8:	ea 83       	std	Y+2, r30	; 0x02
   1c6fa:	49 91       	ld	r20, Y+
   1c6fc:	59 91       	ld	r21, Y+
   1c6fe:	c4 0f       	add	r28, r20
   1c700:	d5 1f       	adc	r29, r21
   1c702:	ec 17       	cp	r30, r28
   1c704:	fd 07       	cpc	r31, r29
   1c706:	61 f4       	brne	.+24     	; 0x1c720 <free+0xbe>
   1c708:	80 81       	ld	r24, Z
   1c70a:	91 81       	ldd	r25, Z+1	; 0x01
   1c70c:	84 0f       	add	r24, r20
   1c70e:	95 1f       	adc	r25, r21
   1c710:	02 96       	adiw	r24, 0x02	; 2
   1c712:	e9 01       	movw	r28, r18
   1c714:	99 83       	std	Y+1, r25	; 0x01
   1c716:	88 83       	st	Y, r24
   1c718:	82 81       	ldd	r24, Z+2	; 0x02
   1c71a:	93 81       	ldd	r25, Z+3	; 0x03
   1c71c:	9b 83       	std	Y+3, r25	; 0x03
   1c71e:	8a 83       	std	Y+2, r24	; 0x02
   1c720:	e0 e0       	ldi	r30, 0x00	; 0
   1c722:	f0 e0       	ldi	r31, 0x00	; 0
   1c724:	12 96       	adiw	r26, 0x02	; 2
   1c726:	8d 91       	ld	r24, X+
   1c728:	9c 91       	ld	r25, X
   1c72a:	13 97       	sbiw	r26, 0x03	; 3
   1c72c:	00 97       	sbiw	r24, 0x00	; 0
   1c72e:	19 f0       	breq	.+6      	; 0x1c736 <free+0xd4>
   1c730:	fd 01       	movw	r30, r26
   1c732:	dc 01       	movw	r26, r24
   1c734:	f7 cf       	rjmp	.-18     	; 0x1c724 <free+0xc2>
   1c736:	8d 91       	ld	r24, X+
   1c738:	9c 91       	ld	r25, X
   1c73a:	11 97       	sbiw	r26, 0x01	; 1
   1c73c:	9d 01       	movw	r18, r26
   1c73e:	2e 5f       	subi	r18, 0xFE	; 254
   1c740:	3f 4f       	sbci	r19, 0xFF	; 255
   1c742:	82 0f       	add	r24, r18
   1c744:	93 1f       	adc	r25, r19
   1c746:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
   1c74a:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1c74e:	28 17       	cp	r18, r24
   1c750:	39 07       	cpc	r19, r25
   1c752:	69 f4       	brne	.+26     	; 0x1c76e <free+0x10c>
   1c754:	30 97       	sbiw	r30, 0x00	; 0
   1c756:	29 f4       	brne	.+10     	; 0x1c762 <free+0x100>
   1c758:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <__flp+0x1>
   1c75c:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <__flp>
   1c760:	02 c0       	rjmp	.+4      	; 0x1c766 <free+0x104>
   1c762:	13 82       	std	Z+3, r1	; 0x03
   1c764:	12 82       	std	Z+2, r1	; 0x02
   1c766:	b0 93 b9 21 	sts	0x21B9, r27	; 0x8021b9 <__brkval+0x1>
   1c76a:	a0 93 b8 21 	sts	0x21B8, r26	; 0x8021b8 <__brkval>
   1c76e:	df 91       	pop	r29
   1c770:	cf 91       	pop	r28
   1c772:	08 95       	ret

0001c774 <memset>:
   1c774:	dc 01       	movw	r26, r24
   1c776:	01 c0       	rjmp	.+2      	; 0x1c77a <memset+0x6>
   1c778:	6d 93       	st	X+, r22
   1c77a:	41 50       	subi	r20, 0x01	; 1
   1c77c:	50 40       	sbci	r21, 0x00	; 0
   1c77e:	e0 f7       	brcc	.-8      	; 0x1c778 <memset+0x4>
   1c780:	08 95       	ret

0001c782 <_exit>:
   1c782:	f8 94       	cli

0001c784 <__stop_program>:
   1c784:	ff cf       	rjmp	.-2      	; 0x1c784 <__stop_program>
