
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000164e  00800100  0001d62e  0001d6c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d62e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008e2  0080174e  0080174e  0001ed10  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ed10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ed24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001720  00000000  00000000  0001ed64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000290b5  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000616f  00000000  00000000  00049539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012555  00000000  00000000  0004f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005118  00000000  00000000  00061c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a5b  00000000  00000000  00066d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024569  00000000  00000000  0006b773  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001768  00000000  00000000  0008fcdc  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
0080174e l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001c2 l     O .text	0000001e __c.3622
000001e0 l     O .text	0000001d __c.3617
0080174e l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006d42 l     F .text	0000002a IS_Leap
00800388 l     O .data	00000018 __days
008017c6 l     O .bss	00000016 t.3676
008017dc l     O .bss	00000002 p.3677
008017a8 l     O .bss	00000008 ts.3755
008017b0 l     O .bss	00000016 t.3688
008003a0 l     O .data	0000001a __days_sum
00000719 l     O .text	00000012 __c.3795
00000708 l     O .text	00000011 __c.3797
000006f7 l     O .text	00000011 __c.3799
000006e5 l     O .text	00000012 __c.3801
000006d4 l     O .text	00000011 __c.3803
000006bd l     O .text	00000017 __c.3805
0000072b l     O .text	00000021 __c.3774
0000074c l     O .text	0000001d __c.3649
008017fe l     O .bss	00000020 buf.3654
008017de l     O .bss	00000020 buf.3666
000006ab l     O .text	00000012 __c.3851
00000696 l     O .text	00000015 __c.3853
0000067f l     O .text	00000017 __c.3855
00000665 l     O .text	0000001a __c.3857
00000641 l     O .text	00000024 __c.3859
0000062f l     O .text	00000012 __c.3866
0000061e l     O .text	00000011 __c.3868
0000060d l     O .text	00000011 __c.3870
000005fb l     O .text	00000012 __c.3872
000005ea l     O .text	00000011 __c.3874
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d3ec l     F .text	00000004 xchg_spi
0000d3f0 l     F .text	0000000c deselect
0000d3fc l     F .text	00000046 rcvr_datablock
0000d466 l     F .text	00000044 select
00000769 l     O .text	00000010 __c.3617
0000d4aa l     F .text	00000086 send_cmd
0000d530 l     F .text	0000004e xmit_datablock
00801823 l     O .bss	00000001 CardType
00801825 l     O .bss	00000001 Timer1
00801824 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ba6 l     O .data	00000014 CSWTCH.97
00000bda l     O .text	00000018 __c.3594
00000bc2 l     O .text	00000018 __c.3601
0000ece6 l     F .text	0000001a _fprintf_putc
00801930 l     O .bss	0000002e _dp
00801830 l     O .bss	00000100 _de
00000bae l     O .text	00000008 __c.3917
00000baa l     O .text	00000004 __c.3919
00000bb6 l     O .text	0000000c __c.3672
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e80 l     O .text	0000000c __c.3618
00000dba l     O .text	000000c6 __c.3620
00000d17 l     O .text	0000000c __c.3687
00000d07 l     O .text	00000010 __c.3689
00000cfa l     O .text	0000000d __c.3691
00000cea l     O .text	00000010 __c.3693
00000cdd l     O .text	0000000d __c.3695
00000cc1 l     O .text	0000000f __c.3700
00000cd0 l     O .text	0000000d __c.3697
00000cae l     O .text	00000013 __c.3704
00800180 l     O .data	00000002 _pagesize
00000ca7 l     O .text	00000007 __c.3714
00000ca5 l     O .text	00000002 __c.3716
00000d30 l     O .text	00000010 __c.3669
00000d2e l     O .text	00000002 __c.3674
00000d23 l     O .text	0000000b __c.3676
00000c93 l     O .text	00000012 __c.3728
00000c8f l     O .text	00000004 __c.3730
00000c75 l     O .text	0000001a __c.3735
00000c54 l     O .text	00000021 __c.3748
00000c3e l     O .text	00000016 __c.3750
00000c30 l     O .text	0000000e __c.3752
00000bfd l     O .text	00000023 __c.3760
00000c20 l     O .text	00000010 __c.3757
00000bf2 l     O .text	0000000b __c.3764
00000da9 l     O .text	00000011 __c.3636
00000d91 l     O .text	00000018 __c.3640
00000d80 l     O .text	00000011 __c.3647
00000d74 l     O .text	0000000c __c.3651
00000d70 l     O .text	00000004 __c.3653
00000d5f l     O .text	00000011 __c.3655
00000d51 l     O .text	0000000e __c.3657
00000d40 l     O .text	00000011 __c.3659
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001224 l     O .text	00000011 __c.4240
00001211 l     O .text	00000013 __c.4252
000011eb l     O .text	00000026 __c.4257
000011d0 l     O .text	0000001b __c.4259
000011a9 l     O .text	00000027 __c.4264
0000118e l     O .text	0000001b __c.4266
00001160 l     O .text	0000002e __c.4282
0000105b l     O .text	0000002f __c.4313
0000108a l     O .text	0000003c __c.4309
00001102 l     O .text	0000003f __c.4303
000010c6 l     O .text	0000003c __c.4305
00001141 l     O .text	0000001f __c.4298
00001048 l     O .text	00000013 __c.4318
00001021 l     O .text	00000009 __c.4360
0000101b l     O .text	00000006 __c.4362
00001010 l     O .text	0000000b __c.4366
00001005 l     O .text	0000000b __c.4368
00000ffa l     O .text	0000000b __c.4370
0000102a l     O .text	0000001e __c.4334
00000fe1 l     O .text	00000019 __c.4386
00000fb4 l     O .text	0000002d __c.4389
00000f8d l     O .text	00000027 __c.4393
00000f73 l     O .text	0000001a __c.4403
00000f45 l     O .text	0000002e __c.4405
00000f2b l     O .text	0000001a __c.4410
00000f03 l     O .text	00000028 __c.4418
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000014d7 l     O .text	00000012 __c.4248
000014c6 l     O .text	00000011 __c.4250
000014ad l     O .text	00000019 __c.4252
00001493 l     O .text	0000001a __c.4298
00001468 l     O .text	0000002b __c.4300
00001451 l     O .text	00000017 __c.4302
00001445 l     O .text	0000000c __c.4304
0000143f l     O .text	00000006 __c.4308
0000142d l     O .text	00000012 __c.4310
00001426 l     O .text	00000007 __c.4315
0000141b l     O .text	0000000b __c.4317
00001414 l     O .text	00000007 __c.4319
00001407 l     O .text	0000000d __c.4321
000013f6 l     O .text	00000011 __c.4323
000013d5 l     O .text	00000021 __c.4350
000013bb l     O .text	0000001a __c.4352
000013a3 l     O .text	00000018 __c.4357
0000138b l     O .text	00000018 __c.4359
00001384 l     O .text	00000007 __c.4361
0000137d l     O .text	00000007 __c.4363
00001376 l     O .text	00000007 __c.4365
0000136a l     O .text	0000000c __c.4367
0000135d l     O .text	0000000d __c.4369
00001356 l     O .text	00000007 __c.4371
00001335 l     O .text	00000021 __c.4373
000012e2 l     O .text	00000007 __c.4393
000012d1 l     O .text	00000011 __c.4395
000012bf l     O .text	00000012 __c.4397
000012ab l     O .text	00000014 __c.4399
0000129b l     O .text	00000010 __c.4401
0000128f l     O .text	0000000c __c.4403
0000127e l     O .text	00000011 __c.4408
0000126c l     O .text	00000012 __c.4410
00001246 l     O .text	00000026 __c.4412
00001235 l     O .text	00000011 __c.4417
0000132e l     O .text	00000007 __c.4378
0000132c l     O .text	00000002 __c.4380
0000131a l     O .text	00000012 __c.4382
00001309 l     O .text	00000011 __c.4384
000012f5 l     O .text	00000014 __c.4386
000012e9 l     O .text	0000000c __c.4388
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000214a l     O .text	00000015 __c.4467
0000213e l     O .text	0000000c __c.4478
0000213a l     O .text	00000004 __c.4488
00001e04 l     O .text	00000012 __c.4634
00001de6 l     O .text	00000002 __c.4643
00001de8 l     O .text	00000009 __c.4641
00001df1 l     O .text	0000000a __c.4639
00001dfb l     O .text	00000009 __c.4637
00001de4 l     O .text	00000002 __c.4648
00001dc4 l     O .text	00000020 __c.4657
00001d49 l     O .text	00000002 __c.4672
00001d7e l     O .text	0000000a __c.4666
00001d5f l     O .text	0000001f __c.4668
00001d4b l     O .text	00000014 __c.4670
00001dbb l     O .text	00000009 __c.4660
00001d9c l     O .text	0000001f __c.4662
00001d88 l     O .text	00000014 __c.4664
00001d47 l     O .text	00000002 __c.4677
00001d22 l     O .text	00000025 __c.4716
00001ce9 l     O .text	00000039 __c.4718
00001cb4 l     O .text	00000035 __c.4720
00001c7f l     O .text	00000035 __c.4722
00001c47 l     O .text	00000038 __c.4724
00001c1c l     O .text	0000002b __c.4726
00001bf8 l     O .text	00000024 __c.4747
00001bd6 l     O .text	00000022 __c.4755
00801976 l     O .bss	00000002 stack_ind
0080196c l     O .bss	0000000a stack_p
00001bae l     O .text	00000028 __c.4791
00001b86 l     O .text	00000028 __c.4797
00001a63 l     O .text	0000001a __c.4851
00001a5b l     O .text	00000008 __c.4853
00001a7d l     O .text	00000022 __c.4849
00001aa7 l     O .text	0000001a __c.4845
00001a9f l     O .text	00000008 __c.4847
00001ac1 l     O .text	00000022 __c.4843
00001a52 l     O .text	00000009 __c.4861
00001a41 l     O .text	00000011 __c.4863
00001a22 l     O .text	0000001f __c.4865
00001a04 l     O .text	0000001e __c.4867
00001a02 l     O .text	00000002 __c.4869
000019f0 l     O .text	00000012 __c.4871
000019db l     O .text	00000015 __c.4873
000019d9 l     O .text	00000002 __c.4875
000019be l     O .text	0000001b __c.4877
000019b3 l     O .text	0000000b __c.4879
000019ab l     O .text	00000008 __c.4915
00001999 l     O .text	00000012 __c.4917
00001976 l     O .text	00000023 __c.4919
00001957 l     O .text	0000001f __c.4921
00001876 l     O .text	00000015 __c.4952
00001861 l     O .text	00000015 __c.4954
0000184f l     O .text	00000012 __c.4956
00001b6b l     O .text	0000001b __c.4813
00001b35 l     O .text	00000036 __c.4819
00001afe l     O .text	00000037 __c.4821
00001ae3 l     O .text	0000001b __c.4823
0000212d l     O .text	0000000d __c.4509
00001e7c l     O .text	00000022 __c.4620
00001e9e l     O .text	00000030 __c.4617
00001ece l     O .text	0000002f __c.4608
00001efd l     O .text	00000030 __c.4605
00001f2d l     O .text	0000002e __c.4596
00001f5b l     O .text	0000002e __c.4588
0000210f l     O .text	0000001e __c.4511
000020ed l     O .text	00000022 __c.4514
000020cb l     O .text	00000022 __c.4525
000020a1 l     O .text	0000002a __c.4529
00002070 l     O .text	00000031 __c.4532
00002043 l     O .text	0000002d __c.4542
00002015 l     O .text	0000002e __c.4550
00001fe7 l     O .text	0000002e __c.4553
00001fb5 l     O .text	00000032 __c.4561
00001f89 l     O .text	0000002c __c.4578
00001e5a l     O .text	00000022 __c.4624
00001e3d l     O .text	0000001d __c.4626
00001e16 l     O .text	00000027 __c.4628
0000183f l     O .text	00000010 __c.4961
0000183d l     O .text	00000002 __c.4966
00001931 l     O .text	00000026 __c.4932
00001909 l     O .text	00000028 __c.4934
000018df l     O .text	0000002a __c.4938
000018b4 l     O .text	0000002b __c.4942
0000188b l     O .text	00000029 __c.4944
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801998 l     O .bss	00000005 B.4253
00801985 l     O .bss	00000013 B.4257
00801978 l     O .bss	0000000d B.4261
000027ff l     O .text	00000005 __c.4364
000027f4 l     O .text	0000000b __c.4366
000027e0 l     O .text	00000014 __c.4376
000027c5 l     O .text	0000001b __c.4378
000027b4 l     O .text	00000011 __c.4386
00002791 l     O .text	00000023 __c.4388
00002774 l     O .text	0000001d __c.4390
00002755 l     O .text	0000001f __c.4392
0000273d l     O .text	00000018 __c.4397
00002723 l     O .text	0000001a __c.4402
000026fd l     O .text	00000026 __c.4411
000026e4 l     O .text	00000019 __c.4413
000025e8 l     O .text	00000025 __c.4435
0000260d l     O .text	0000001a __c.4433
00002627 l     O .text	00000016 __c.4431
0000263d l     O .text	0000000e __c.4429
0000264b l     O .text	0000001c __c.4427
00002667 l     O .text	0000001d __c.4425
000026ce l     O .text	00000016 __c.4415
000026b5 l     O .text	00000019 __c.4418
0000269d l     O .text	00000018 __c.4420
00002684 l     O .text	00000019 __c.4423
000025c7 l     O .text	00000021 __c.4437
000025b1 l     O .text	00000016 __c.4439
00002594 l     O .text	0000001d __c.4441
00002578 l     O .text	0000001c __c.4443
00002567 l     O .text	00000011 __c.4445
00002549 l     O .text	0000001e __c.4447
0000252a l     O .text	0000001f __c.4449
0000250f l     O .text	0000001b __c.4451
000024f6 l     O .text	00000019 __c.4453
000024df l     O .text	00000017 __c.4455
000024bc l     O .text	00000023 __c.4457
0000249c l     O .text	00000020 __c.4459
00002464 l     O .text	00000038 __c.4462
00002321 l     O .text	00000020 __c.4495
0000230d l     O .text	00000014 __c.4497
000028a4 l     O .text	00000029 __c.4325
00002857 l     O .text	00000026 __c.4333
0000287d l     O .text	00000014 __c.4331
00002891 l     O .text	00000013 __c.4327
0000282f l     O .text	00000028 __c.4337
00002804 l     O .text	0000002b __c.4339
000022f3 l     O .text	0000001a __c.4504
000022e0 l     O .text	00000013 __c.4506
000029ad l     O .text	00000013 __c.4267
000022d4 l     O .text	0000000c __c.4520
000022c1 l     O .text	00000013 __c.4527
000022b2 l     O .text	0000000f __c.4529
00002451 l     O .text	00000013 __c.4471
00002438 l     O .text	00000019 __c.4473
00002413 l     O .text	00000025 __c.4476
000023f6 l     O .text	0000001d __c.4479
000023d8 l     O .text	0000001e __c.4481
000023b1 l     O .text	00000027 __c.4483
0000239d l     O .text	00000014 __c.4485
0000237d l     O .text	00000020 __c.4487
00002341 l     O .text	0000003c __c.4490
0000228f l     O .text	00000023 __c.4543
00002969 l     O .text	00000028 __c.4300
0000294b l     O .text	0000001e __c.4302
0000291a l     O .text	00000019 __c.4306
00002933 l     O .text	00000018 __c.4304
000028f5 l     O .text	00000025 __c.4311
000028cd l     O .text	00000028 __c.4313
00002991 l     O .text	0000001c __c.4283
00002279 l     O .text	00000016 __c.4548
00002263 l     O .text	00000016 __c.4550
0000224e l     O .text	00000015 __c.4552
0000223f l     O .text	0000000f __c.4554
0000222b l     O .text	00000014 __c.4556
000021f7 l     O .text	00000034 __c.4558
000021c3 l     O .text	00000034 __c.4560
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019ea l     O .bss	00000002 lcd_display_time
00004c06 l     O .text	00000030 __c.4466
00004be7 l     O .text	0000001f __c.4468
00004bca l     O .text	0000001d __c.4470
00004bba l     O .text	00000010 __c.4472
00004b93 l     O .text	00000027 __c.4474
00004b79 l     O .text	0000001a __c.4476
00004b5f l     O .text	0000001a __c.4478
00004b5d l     O .text	00000002 __c.4480
00004b47 l     O .text	00000016 __c.4494
00004b2d l     O .text	0000001a __c.4500
00004b0f l     O .text	0000001e __c.4506
00004af9 l     O .text	00000016 __c.4508
00004af3 l     O .text	00000006 __c.4510
00004aed l     O .text	00000006 __c.4512
00004ad3 l     O .text	0000001a __c.4514
00004acd l     O .text	00000006 __c.4521
00004ac7 l     O .text	00000006 __c.4523
00004a06 l     O .text	000000c1 __c.4530
0001c54e l     F .text	0000038e user_task.part.1
00004a03 l     O .text	00000003 __c.4543
000049ee l     O .text	00000015 __c.4545
000049e5 l     O .text	00000009 __c.4547
000049d0 l     O .text	00000015 __c.4552
000049cc l     O .text	00000004 __c.4560
000049bc l     O .text	00000010 __c.4562
000049ab l     O .text	00000011 __c.4564
00004992 l     O .text	00000019 __c.4566
00004985 l     O .text	0000000d __c.4568
00004974 l     O .text	00000011 __c.4576
0000496e l     O .text	00000006 __c.4578
00004967 l     O .text	00000007 __c.4586
00004956 l     O .text	00000011 __c.4588
0000492f l     O .text	00000027 __c.4590
00004910 l     O .text	0000001f __c.4592
000048f3 l     O .text	0000001d __c.4594
000048e3 l     O .text	00000010 __c.4596
000048bc l     O .text	00000027 __c.4598
000048a2 l     O .text	0000001a __c.4600
00004888 l     O .text	0000001a __c.4602
00004872 l     O .text	00000016 __c.4604
0000485c l     O .text	00000016 __c.4606
0000484a l     O .text	00000012 __c.4608
0000483b l     O .text	0000000f __c.4610
0000480d l     O .text	0000002e __c.4612
000047f5 l     O .text	00000018 __c.4614
000047e4 l     O .text	00000011 __c.4616
000047ce l     O .text	00000016 __c.4618
000047b9 l     O .text	00000015 __c.4620
000047a7 l     O .text	00000012 __c.4622
0000478f l     O .text	00000018 __c.4624
0000477a l     O .text	00000015 __c.4626
00004764 l     O .text	00000016 __c.4628
0000474e l     O .text	00000016 __c.4630
00004748 l     O .text	00000006 __c.4632
0000472e l     O .text	0000001a __c.4634
0000471a l     O .text	00000014 __c.4636
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000429 l     O .text	00000018 __c.3593
00000410 l     O .text	00000019 __c.3595
000003fa l     O .text	00000016 __c.3597
000003de l     O .text	0000001c __c.3640
00801755 l     O .bss	00000001 i2c_init_status
000003c7 l     O .text	00000017 __c.3646
00005bc4 l     F .text	00000014 i2c_next
000003c1 l     O .text	00000006 __c.3696
000003b3 l     O .text	0000000e __c.3698
000003a9 l     O .text	0000000a __c.3700
0000039d l     O .text	0000000c __c.3702
0000038b l     O .text	00000012 __c.3704
00000379 l     O .text	00000012 __c.3706
00000366 l     O .text	00000013 __c.3708
00000364 l     O .text	00000002 __c.3710
00000351 l     O .text	00000013 __c.3715
0000033d l     O .text	00000014 __c.3717
00000333 l     O .text	0000000a __c.3719
00000331 l     O .text	00000002 __c.3721
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000051e l     O .text	00000020 __c.3586
000004f8 l     O .text	00000026 __c.3629
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007cb6 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008fb0 l     F .text	0000002a ld_dword
00008fda l     F .text	0000000c st_dword
00008fe6 l     F .text	00000012 mem_set
00008ff8 l     F .text	0000001e mem_cmp
00009016 l     F .text	00000050 clst2sect
00009066 l     F .text	00000078 clmt_clust
000090de l     F .text	0000001e sum_sfn
0080046b l     O .data	00000080 ExCvt
000090fc l     F .text	00000058 get_ldnumber
0080181e l     O .bss	00000001 CurrVol
00009154 l     F .text	00000058 validate
000091ac l     F .text	00000254 get_fileinfo
00009400 l     F .text	00000016 mem_cpy.part.0
00009416 l     F .text	0000002a ld_clust.isra.3
00009440 l     F .text	0000001a st_clust.isra.4
0000945a l     F .text	000000a6 sync_window.part.5
00009500 l     F .text	000000e4 sync_fs
000095e4 l     F .text	00000150 dir_clear
00009734 l     F .text	00000076 move_window
000097aa l     F .text	00000080 check_fs
0000982a l     F .text	000004b4 mount_volume
00801821 l     O .bss	00000002 FatFs
0080181f l     O .bss	00000002 Fsid
00009cde l     F .text	000001f2 put_fat
00009ed0 l     F .text	00000168 get_fat.isra.9
0000a038 l     F .text	00000182 dir_sdi
0000a1ba l     F .text	0000024c create_chain
0000a406 l     F .text	00000122 remove_chain
0000a528 l     F .text	000001d0 dir_next
0000a6f8 l     F .text	00000072 dir_alloc
0000a76a l     F .text	00000192 dir_read
008004eb l     O .data	0000000d LfnOfs
0000a8fc l     F .text	00000090 dir_remove
0000a98c l     F .text	0000021c dir_find
0000aba8 l     F .text	0000031c dir_register
0000aec4 l     F .text	00000478 follow_path
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008007a6 l     O .data	00000100 uc437
008004f8 l     O .data	000000bc cvt2.1843
008005b4 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000de5a l     F .text	00000048 mmc_task
00000827 l     O .text	0000001c __c.3594
0000081a l     O .text	0000000d __c.3622
0000080a l     O .text	00000010 __c.3636
00801826 l     O .bss	00000002 mmc_init_flag
000007ea l     O .text	00000020 __c.3638
000007d7 l     O .text	00000013 __c.3640
000007cb l     O .text	0000000c __c.3642
000007ba l     O .text	00000011 __c.3644
0000079c l     O .text	0000001e __c.3647
00000787 l     O .text	00000015 __c.3649
00000779 l     O .text	0000000e __c.3651
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a9c l     O .text	00000007 __c.3596
008008ca l     O .data	00000008 CSWTCH.25
00000a8b l     O .text	00000011 __c.3632
00000a6c l     O .text	0000001f __c.3634
00000a4e l     O .text	0000001e __c.3636
00000a2f l     O .text	0000001f __c.3638
00000a11 l     O .text	0000001e __c.3640
000009f3 l     O .text	0000001e __c.3642
000009d4 l     O .text	0000001f __c.3644
000009b5 l     O .text	0000001f __c.3646
00000996 l     O .text	0000001f __c.3648
00000977 l     O .text	0000001f __c.3650
00000958 l     O .text	0000001f __c.3652
00000938 l     O .text	00000020 __c.3654
0000091a l     O .text	0000001e __c.3656
000008f5 l     O .text	00000025 __c.3658
000008cf l     O .text	00000026 __c.3660
00000882 l     O .text	0000004d __c.3662
00000867 l     O .text	0000001b __c.3668
00000845 l     O .text	00000022 __c.3670
00000843 l     O .text	00000002 __c.3672
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b2d l     O .text	0000007d __c.3587
00000b21 l     O .text	0000000c __c.3589
00000ae1 l     O .text	0000000e __c.3624
00000ab8 l     O .text	00000029 __c.3628
00000aa3 l     O .text	00000015 __c.3630
00000b11 l     O .text	00000010 __c.3607
00000afd l     O .text	00000014 __c.3609
00000aef l     O .text	0000000e __c.3611
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001831 l     O .text	0000000c __c.4433
000014f6 l     O .text	0000033b __c.4435
000014e9 l     O .text	0000000d __c.4443
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000219f l     O .text	00000007 __c.3641
000021a6 l     O .text	0000001d __c.3637
00002181 l     O .text	0000001e __c.3643
0000215f l     O .text	00000022 __c.3648
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000165c8 l     F .text	000000ac amigo_overflow_check
0000317b l     O .text	00000019 __c.4190
00016674 l     F .text	000000e8 amigo_chs_to_logical
00003128 l     O .text	0000002b __c.4183
000031fb l     O .text	00000018 __c.4160
000031dd l     O .text	0000001e __c.4166
000031c3 l     O .text	0000001a __c.4168
000031ae l     O .text	00000015 __c.4174
00003194 l     O .text	0000001a __c.4176
00003153 l     O .text	00000028 __c.4213
00003118 l     O .text	00000010 __c.4224
00003103 l     O .text	00000015 __c.4228
000030f1 l     O .text	00000012 __c.4234
000030d7 l     O .text	0000001a __c.4240
000030c5 l     O .text	00000012 __c.4247
000030a6 l     O .text	0000001f __c.4249
00003086 l     O .text	00000020 __c.4251
0000306c l     O .text	0000001a __c.4258
0000305f l     O .text	0000000d __c.4260
00003050 l     O .text	0000000f __c.4273
00002fe9 l     O .text	00000067 __c.4280
00002f82 l     O .text	00000067 __c.4282
00002f1b l     O .text	00000067 __c.4284
00002eb6 l     O .text	00000065 __c.4286
00002e66 l     O .text	00000050 __c.4291
00002e16 l     O .text	00000050 __c.4293
00002dc6 l     O .text	00000050 __c.4295
00002d75 l     O .text	00000051 __c.4297
00002d43 l     O .text	00000032 __c.4309
00002d21 l     O .text	00000022 __c.4311
00002d00 l     O .text	00000021 __c.4313
00002cdf l     O .text	00000021 __c.4315
00002cb0 l     O .text	0000002f __c.4317
00002c90 l     O .text	00000020 __c.4320
00002c7c l     O .text	00000014 __c.4323
00002c68 l     O .text	00000014 __c.4326
00002c3f l     O .text	00000029 __c.4328
00002c1e l     O .text	00000021 __c.4330
00002c0e l     O .text	00000010 __c.4333
00002bec l     O .text	00000022 __c.4335
00002bd0 l     O .text	0000001c __c.4337
00002ba7 l     O .text	00000029 __c.4339
00002b87 l     O .text	00000020 __c.4341
00002b5c l     O .text	0000002b __c.4343
00002b3d l     O .text	0000001f __c.4345
00002b2d l     O .text	00000010 __c.4348
00002afb l     O .text	00000032 __c.4353
00002adb l     O .text	00000020 __c.4357
00002aba l     O .text	00000021 __c.4360
00002a9b l     O .text	0000001f __c.4363
00002a79 l     O .text	00000022 __c.4366
00002a5d l     O .text	0000001c __c.4369
00002a3d l     O .text	00000020 __c.4372
00002a14 l     O .text	00000029 __c.4377
000029e9 l     O .text	0000002b __c.4380
000029c0 l     O .text	00000029 __c.4383
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00003250 l     O .text	00000021 __c.4132
0000327f l     O .text	00000015 __c.4124
00003271 l     O .text	0000000e __c.4126
000032b6 l     O .text	00000022 __c.4114
000032a0 l     O .text	00000016 __c.4116
00003294 l     O .text	0000000c __c.4118
00003249 l     O .text	00000007 __c.4138
0000322d l     O .text	0000001c __c.4143
00003213 l     O .text	0000001a __c.4145
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000470e l     O .text	0000000c __c.3845
0000454a l     O .text	000001c4 __c.3847
000044e3 l     O .text	00000029 __c.3868
000044cb l     O .text	00000018 __c.3873
000044a6 l     O .text	00000025 __c.3885
0000448d l     O .text	00000019 __c.3891
0000446c l     O .text	00000021 __c.3898
00004430 l     O .text	0000003c __c.3907
000043f3 l     O .text	0000003d __c.3916
008019ca l     O .bss	00000020 _lif_ctime_buf.4019
008019aa l     O .bss	00000020 _timestr.4024
000043ee l     O .text	00000005 __c.4039
000043d4 l     O .text	0000001a __c.4041
000043b7 l     O .text	0000001d __c.4043
0000439a l     O .text	0000001d __c.4045
0000437d l     O .text	0000001d __c.4047
00004360 l     O .text	0000001d __c.4049
00004343 l     O .text	0000001d __c.4051
00004326 l     O .text	0000001d __c.4053
00004309 l     O .text	0000001d __c.4055
000042ec l     O .text	0000001d __c.4057
000042d2 l     O .text	0000001a __c.4059
000042b6 l     O .text	0000001c __c.4061
00004299 l     O .text	0000001d __c.4063
0000427c l     O .text	0000001d __c.4065
00004260 l     O .text	0000001c __c.4067
00004244 l     O .text	0000001c __c.4069
0000422a l     O .text	0000001a __c.4071
00004210 l     O .text	0000001a __c.4073
000041f4 l     O .text	0000001c __c.4075
000041d8 l     O .text	0000001c __c.4077
000041bb l     O .text	0000001d __c.4079
0000419e l     O .text	0000001d __c.4081
00004181 l     O .text	0000001d __c.4083
00004165 l     O .text	0000001c __c.4085
0000414b l     O .text	0000001a __c.4087
00004149 l     O .text	00000002 __c.4089
0000412a l     O .text	0000001f __c.4096
000040f1 l     O .text	00000039 __c.4098
000040d9 l     O .text	00000018 __c.4100
000040a0 l     O .text	00000039 __c.4102
00004067 l     O .text	00000039 __c.4104
00004042 l     O .text	00000025 __c.4106
00004013 l     O .text	0000002f __c.4108
00003fe7 l     O .text	0000002c __c.4110
00003fc6 l     O .text	00000021 __c.4116
00003f82 l     O .text	00000044 __c.4118
00003f41 l     O .text	00000041 __c.4120
00003f13 l     O .text	0000002e __c.4122
00003ec8 l     O .text	0000004b __c.4124
00003e7d l     O .text	0000004b __c.4126
00003e52 l     O .text	0000002b __c.4128
00003e26 l     O .text	0000002c __c.4130
00003d63 l     O .text	0000003a __c.4185
00003d43 l     O .text	00000020 __c.4194
00003cf6 l     O .text	0000004d __c.4219
00003dd1 l     O .text	00000055 __c.4146
00003dc4 l     O .text	0000000d __c.4148
00003db7 l     O .text	0000000d __c.4156
00003daa l     O .text	0000000d __c.4161
00003d9d l     O .text	0000000d __c.4166
00003cbe l     O .text	00000038 __c.4231
00003c95 l     O .text	00000029 __c.4233
00003c44 l     O .text	00000051 __c.4236
00003c05 l     O .text	0000003f __c.4249
00003bcf l     O .text	00000036 __c.4251
00003b9c l     O .text	00000033 __c.4253
00003b69 l     O .text	00000033 __c.4255
00003b52 l     O .text	00000017 __c.4265
00003b12 l     O .text	00000040 __c.4267
00003ac6 l     O .text	0000004c __c.4270
00003a96 l     O .text	00000030 __c.4272
00003a94 l     O .text	00000002 __c.4275
00003a88 l     O .text	0000000c __c.4277
00003a7b l     O .text	0000000d __c.4279
00003a6a l     O .text	00000011 __c.4281
00003a57 l     O .text	00000013 __c.4283
00003a44 l     O .text	00000013 __c.4285
00003a31 l     O .text	00000013 __c.4287
00003a0a l     O .text	00000027 __c.4294
000039e5 l     O .text	00000025 __c.4296
000039ac l     O .text	00000039 __c.4310
00003988 l     O .text	00000024 __c.4327
0000397a l     O .text	0000000e __c.4344
0000396c l     O .text	0000000e __c.4349
0000395e l     O .text	0000000e __c.4351
0000392b l     O .text	00000033 __c.4365
000038fd l     O .text	0000002e __c.4367
000038ce l     O .text	0000002f __c.4369
0000389e l     O .text	00000030 __c.4371
0000386f l     O .text	0000002f __c.4373
0000383f l     O .text	00000030 __c.4375
00003818 l     O .text	00000027 __c.4377
00003801 l     O .text	00000017 __c.4379
000037ea l     O .text	00000017 __c.4381
000037d1 l     O .text	00000019 __c.4383
000037b8 l     O .text	00000019 __c.4385
000037aa l     O .text	0000000e __c.4387
00003792 l     O .text	00000018 __c.4411
0000377b l     O .text	00000017 __c.4413
00003743 l     O .text	00000038 __c.4415
00003733 l     O .text	00000010 __c.4417
00003672 l     O .text	0000000e __c.4428
00003680 l     O .text	00000028 __c.4426
000036fe l     O .text	00000035 __c.4421
000036a8 l     O .text	00000056 __c.4423
0000364a l     O .text	00000028 __c.4436
0000363c l     O .text	0000000e __c.4439
00003624 l     O .text	00000018 __c.4456
00003611 l     O .text	00000013 __c.4458
00003603 l     O .text	0000000e __c.4460
000035f5 l     O .text	0000000e __c.4465
000035d5 l     O .text	00000020 __c.4482
000035ba l     O .text	0000001b __c.4484
0000359e l     O .text	0000001c __c.4486
0000356f l     O .text	0000002f __c.4488
0000355c l     O .text	00000013 __c.4490
0000352c l     O .text	00000030 __c.4492
0000351e l     O .text	0000000e __c.4494
00003510 l     O .text	0000000e __c.4499
000034eb l     O .text	00000025 __c.4507
000034cb l     O .text	00000020 __c.4509
000034ac l     O .text	0000001f __c.4511
00003484 l     O .text	00000028 __c.4513
00003475 l     O .text	0000000f __c.4515
0000344d l     O .text	00000028 __c.4524
00003426 l     O .text	00000027 __c.4526
000033ff l     O .text	00000027 __c.4528
000033c9 l     O .text	00000036 __c.4530
000033a0 l     O .text	00000029 __c.4532
00003389 l     O .text	00000017 __c.4534
00003360 l     O .text	00000029 __c.4547
0000333b l     O .text	00000025 __c.4549
00003318 l     O .text	00000023 __c.4551
000032f8 l     O .text	00000020 __c.4553
000032d8 l     O .text	00000020 __c.4555
00004529 l     O .text	00000021 __c.3860
0000450c l     O .text	0000001d __c.3862
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000307 l     O .text	0000000d __c.3604
000002f4 l     O .text	00000013 __c.3606
000002e1 l     O .text	00000013 __c.3608
000002c3 l     O .text	0000001e __c.3610
000002a5 l     O .text	0000001e __c.3612
00000287 l     O .text	0000001e __c.3614
00000269 l     O .text	0000001e __c.3616
00000255 l     O .text	00000014 __c.3618
0000023a l     O .text	0000001b __c.3633
00000222 l     O .text	00000018 __c.3639
000001fd l     O .text	00000025 __c.3648
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801751 l     O .bss	00000004 SPI0_Speed_value
00000314 l     O .text	0000001d __c.3602
0080174f l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004de l     O .text	0000001a __c.3601
000004c2 l     O .text	0000001c __c.3609
000004a9 l     O .text	00000019 __c.3611
00000498 l     O .text	00000011 __c.3619
00000488 l     O .text	00000010 __c.3625
00000474 l     O .text	00000014 __c.3631
0000045f l     O .text	00000015 __c.3633
00000441 l     O .text	0000001e __c.3643
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006944 l     F .text	0000007c clock_settime.part.2
000005cd l     O .text	0000001d __c.3599
000005c3 l     O .text	0000000a __c.3619
00801784 l     O .bss	00000020 _ts_to_str
0080177c l     O .bss	00000008 __clock_elapsed
000005b5 l     O .text	0000000e __c.3633
000005aa l     O .text	0000000b __c.3635
008017a4 l     O .bss	00000002 timers_configured
008017a6 l     O .bss	00000002 timers_enabled
00000596 l     O .text	00000014 __c.3655
00000583 l     O .text	00000013 __c.3657
00000577 l     O .text	0000000c __c.3659
0000055f l     O .text	00000018 __c.3661
0000054e l     O .text	00000011 __c.3663
0000053e l     O .text	00000010 __c.3665
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ee6 l     O .text	0000001d __c.3744
0080195e l     O .bss	00000001 _ppr_reg
00000ed3 l     O .text	00000013 __c.3762
00000ec2 l     O .text	00000011 __c.3776
00000eb5 l     O .text	0000000d __c.3785
00000ea7 l     O .text	0000000e __c.3794
00000e9a l     O .text	0000000d __c.3801
00000e8c l     O .text	0000000e __c.3807
00000000 l    df *ABS*	00000000 _clear_bss.o
00004c66 l       .text	00000000 .do_clear_bss_start
00004c64 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001ccfa l       .text	00000000 __udivmodqi4_ep
0001ccf2 l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001cd1a l       .text	00000000 __udivmodhi4_ep
0001cd0c l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001cd42 l       .text	00000000 __divmodhi4_neg1
0001cd4a l       .text	00000000 __divmodhi4_neg2
0001cd50 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001cd78 l       .text	00000000 __udivmodsi4_ep
0001cd5e l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001cdae l       .text	00000000 __divmodsi4_neg2
0001cdbc l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d62c l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 --library=m
00015cfe g     F .text	0000004a SS80_Selected_Device_Clear
0001cde0 g       .text	00000002 .hidden __usmulhisi3
0000ed0c g     F .text	0000000c putchar
00011970 g     F .text	00000024 SS80_is_MTA
000067e0 g     F .text	000000ea clock_gettime
00005e9a g     F .text	000000d4 i2c_display_task_errors
00006232 g     F .text	00000084 rtc_init
00011cbc g     F .text	000000a8 GPIB_COMMANDS
00004c74  w      .text	00000000 __vector_22
00010dc4 g     F .text	00000054 gpib_unread
00004e58 g     F .text	0000000a set_error
00014ee2 g     F .text	00000034 SS80_test_extended_status
000062e6  w    F .text	00000016 strcpy
00007a94 g     F .text	00000008 asctime
00006d6c g     F .text	00000020 tm_mon_to_ascii
00801a80 g     O .bss	00000235 Fatfs
0000ee40 g     F .text	0000004a mctime
00004c74  w      .text	00000000 __vector_28
0000ddba g     F .text	0000001a mmc_fast
00006072 g     F .text	0000008c rtc_write
00005a92 g     F .text	00000058 i2c_fn
00015df0 g     F .text	00000218 SS80_Transparent_State
0080195f g     O .bss	00000001 gpib_unread_f
00004d42 g     F .text	00000004 spi_RX_buffer
00012402 g     F .text	00000042 gpib_help
00015b5a g     F .text	0000009a SS80_Report
0000f970 g     F .text	0000006a free_file_descriptor
0000eb00 g     F .text	00000096 fatfs_putc
0001cec0 g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004c74  w      .text	00000000 __vector_1
00011e2a g     F .text	00000184 GPIB
0000e68e g     F .text	0000002a fatfs_help
00006a36 g     F .text	00000016 delete_all_timers
00005674 g     F .text	0000000c SPI0_TXRX_Byte
0001d38e g       .text	00000000 __fp_mpack_finite
0000f4b6 g     F .text	00000086 utime
00801a50 g     O .bss	00000008 __clock
0001c260 g     F .text	0000007c lcd_time
00012f3a g     F .text	00000052 find_device
000078c2 g     F .text	00000128 set_dst
0000f1d4 g     F .text	00000096 fdevopen
00011994 g     F .text	00000024 SS80_is_MSA
00004cde g     F .text	00000060 spi_end
0001893a g     F .text	000000d6 lif_dir2str
0001d314 g     F .text	00000040 round
000132c8 g     F .text	00000172 alloc_device
00005054 g     F .text	0000006a safefree
00013912 g     F .text	000000d4 mount_usage
00011fae g     F .text	00000130 GPIB_TALK
00004c74  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001cfb0 g     F .text	00000004 __divsf3
0001ce64 g       .text	00000036 .hidden __epilogue_restores__
00005428 g     F .text	00000018 uart_rx_count
0001482c g     F .text	0000003a lif_dir_count
00801cdf g     O .bss	00000009 gpib_timer
000120de g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00000000 g       *ABS*	00000000 __TEXT_REGION_ORIGIN__
00018cbc g     F .text	0000000e lif_vol_clear
000068ca g     F .text	0000007a clock_task
00011170 g     F .text	00000284 gpib_trace_display
0001bc40 g     F .text	000000fe lif_rename_file
00013d3e g     F .text	00000804 Read_Config
00012eba g     F .text	00000026 find_type
0001d1d2 g     F .text	00000022 __fp_round
00012ee0 g     F .text	00000020 count_drive_types
00006d8c g     F .text	00000042 Days_Per_Month
00006c26 g     F .text	00000028 execute_timers
00010088 g     F .text	00000176 ls_info
00004c74  w      .text	00000000 __vector_34
0000dd74 g     F .text	0000001a mmc_spi_begin
0001d080 g     F .text	0000000a __fixsfsi
00006b40 g     F .text	0000000c clock_elapsed_begin
0000634e  w    F .text	00000032 reverse
0000d6c8 g     F .text	00000006 mmc_disk_status
0001d1f4 g     F .text	00000044 __fp_split3
00010bae g     F .text	00000014 gpib_timeout_set
0001cd04 g       .text	00000028 .hidden __udivmodhi4
00004cda g     F .text	00000004 chip_select_init
00006ace g     F .text	00000072 ts_to_str
00008fa4 g     F .text	0000000c atol
00007e16 g     F .text	000000aa p_ntoa
0000e04a g     F .text	000000d8 tm_to_fat
00004e9a g     F .text	00000122 PrintFree
000170bc g     F .text	000000b8 amigo_cmd_dsj
0000d442 g     F .text	00000024 wait_ready
000001c2 g       .text	00000000 __trampolines_start
000134cc g     F .text	00000112 hpdir_set_device
0001d15c g     F .text	00000048 __fp_cmp
0001174c g     F .text	00000166 gpib_write_str
008002f0 g     O .data	00000005 _backlight
00801cbd g     O .bss	00000002 errno
00015dce g     F .text	00000022 SS80_Cancel
0001d62e g       .text	00000000 _etext
0000d878 g     F .text	00000488 mmc_disk_ioctl
000064d6 g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
00019780 g     F .text	000000b8 lif_writedirindex
00005532 g     F .text	000000ce SPI0_Speed
000059cc g     F .text	000000c6 i2c_task_run
00006b4c g     F .text	0000007c clock_elapsed_end
0000d2bc g     F .text	000000c4 ff_wtoupper
0001cede g     F .text	0000000a __subsf3
0001b802 g     F .text	00000312 lif_add_lif_file
00801ce8 g     O .bss	00000002 lastcmd
00004c74  w      .text	00000000 __vector_24
000134ca g     F .text	00000002 set_Config_Defaults
00006004 g     F .text	00000062 i2c_rtc_read
000064c2 g     F .text	00000014 skipspaces
0000bed0 g     F .text	0000026c f_getcwd
00004c74  w      .text	00000000 __vector_12
000107ea g     F .text	00000032 gpib_timer_init
0001084c g     F .text	0000002c ppr_init
0000ed18 g     F .text	00000068 fgets
00005440 g     F .text	0000004c uart_get_tail
00005010 g     F .text	00000044 safemalloc
0001bb14 g     F .text	0000012c lif_del_file
00007c84 g     F .text	00000032 _putc_buffer_fn
0001aa3a g     F .text	00000172 lif_ascii_string_to_e010
0000de40 g     F .text	0000001a mmc_ins_status
0080030a g     O .data	00000002 _cmd2
00018c52 g     F .text	0000004e lif_lifbcd2timestr
00801cea g     O .bss	00000200 gpib_iobuff
00018110 g     F .text	00000028 V2B_MSB
00018af2 g     F .text	00000084 lif_time2lifbcd
00012f32 g     F .text	00000008 find_free
0000596a g     F .text	00000024 i2c_done
0001922c g     F .text	0000036a lif_check_dir
00004c74 g       .text	00000000 __bad_interrupt
00005118 g     F .text	00000090 delayms
00015cca g     F .text	00000018 SS80_Channel_Independent_Clear
0000ffae g     F .text	000000da cat
00008e14 g     F .text	00000028 snprintf_P
000171c4 g     F .text	00000132 amigo_todo_op
00015d48 g     F .text	00000086 SS80_Amigo_Clear
0000f14a g     F .text	0000008a perror
0001c4e8 g     F .text	00000024 gpib_user_task
0001ec7c g       *ABS*	00000000 __data_load_end
0000d38c g     F .text	0000000c disk_initialize
0080199d g     O .bss	0000000d plot
00010b5c g     F .text	00000006 gpib_timer_elapsed_end
0001828e g     F .text	0000002a lif_free
0000edb0 g     F .text	0000002e puts
0000fd82 g     F .text	000001bc copy
00006d32 g     F .text	00000010 clock_settime
000182b8 g     F .text	0000003e lif_stralloc
000062b6  w    F .text	00000016 islower
00004e6c g     F .text	0000002e freeRam
000167d8 g     F .text	0000001c amigo_request_logical_address
00005aea g     F .text	0000001c i2c_send_stop
0000cdb0 g     F .text	0000022a f_rename
00004c74  w      .text	00000000 __vector_6
00010b3e g     F .text	0000001e gpib_timer_reset
00019a7c g     F .text	000005d4 lif_create_volume
0001d3da g     F .text	00000130 malloc
00004d66 g     F .text	00000040 spi_init
0000fd40 g     F .text	00000042 posix_help
00004c74  w      .text	00000000 __vector_31
000108ae g     F .text	00000046 dbf_open
0001c19e g     F .text	000000c2 copyright
0000be1a g     F .text	000000b6 f_chdir
0001cfa8 g       .text	00000000 __lesf2
00004caa g     F .text	00000030 chip_deselect
0001809a g     F .text	00000076 PRINTER_COMMANDS
00006bc8 g     F .text	00000036 clock_clear
00007abe g     F .text	000000ee initialize_clock
0000de3e g     F .text	00000002 mmc_power_off
00014542 g     F .text	00000044 display_mounts
0000e044 g     F .text	00000006 mmc_wp_status
0000e9fa g     F .text	00000106 fatfs_getc
00801eea g     O .bss	00000001 listening_last
0000d380 g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001c2 g       .text	00000000 __trampolines_end
00006d08 g     F .text	0000002a clock_getres
00801776 g     O .bss	00000004 i2c_task
0001abac g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
000084e2  w    F .text	00000038 strlen_X
00018adc g     F .text	00000016 lif_BCD2BIN
000182f6 g     F .text	00000054 lif_open
00007bac g     F .text	000000d8 display_clock
00010878 g     F .text	0000001a ppr_bit_set
00004c74  w      .text	00000000 __vector_3
00010844 g     F .text	00000008 ppr_reg
00011600 g     F .text	00000008 gpib_decode
000051a8 g     F .text	00000022 uart_rx_flush
0000f058 g     F .text	00000004 rmdir
000069c0 g     F .text	00000076 set_timers
00801a74 g     O .bss	0000000c dst
0000f0ce g     F .text	0000007c readdir
0001d238 g     F .text	0000000e __fp_zero
0000c794 g     F .text	0000002a f_closedir
0001c32a g     F .text	00000148 lcd_setup
0000d3d8 g     F .text	00000014 disk_ioctl
0001be4c g     F .text	0000033e lif_tests
000083a6 g     F .text	00000084 _puts_pad
00004d46 g     F .text	00000020 spi_TX
008019ec g     O .bss	00000001 debug_input
00018cca g     F .text	0000038c lif_dump_vol
000121d4 g     F .text	0000004c listen_cleanup
00018b76 g     F .text	000000a0 lif_lifbcd2time
00018a10 g     F .text	000000be lif_str2dir
00013aa2 g     F .text	000000f2 display_mount
00005702 g     F .text	0000002c SPI0_TXRX
0080030c g     O .data	00000015 _line1
0001cfa8 g       .text	00000000 __nesf2
000135de g     F .text	00000040 hpdir_set_parameters
00005f6e g     F .text	0000000e BINtoBCD
0000f59c g     F .text	000000d0 lseek
00004c74  w      .text	00000000 __vector_23
0001d62e g       *ABS*	00000000 __data_load_start
0080182a g     O .bss	00000004 _mmc_clock
00004c36 g       .text	00000000 __dtors_end
000139e6 g     F .text	0000002c index_address
00011a6c g     F .text	00000012 gpib_init_devices
000063f2  w    F .text	00000050 strncasecmp
00802030 g       .bss	00000000 __bss_end
0001856a g     F .text	00000056 lif_chars
0001cdec g       .text	00000014 .hidden __muluhisi3
0001274c g     F .text	0000006a print_tok_str
00004c74  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0001361e g     F .text	000002f4 format_drives
00004c74  w      .text	00000000 __vector_25
0080202c g     O .bss	00000002 __brkval
00006f8a g     F .text	0000002a gmtime_r
0000eee4 g     F .text	00000052 chmod
00006c4e g     F .text	000000ba init_timers
00011a00 g     F .text	00000024 AMIGO_is_MSA
000195e2 g     F .text	000000d0 lif_checkdirindex
0000ca82 g     F .text	0000014e f_unlink
00010e24 g     F .text	00000020 gpib_control_pin_read
000109dc g     F .text	000000ae dbf_open_read
00005f8e g     F .text	00000076 i2c_rtc_write
0000de3c g     F .text	00000002 mmc_power_on
00008eda g     F .text	000000bc strtol
00010b38 g     F .text	00000006 gpib_timer_elapsed_begin
000051ca g     F .text	00000134 uart_ubr
0000d22c g     F .text	00000066 ff_uni2oem
00005784 g     F .text	0000009e i2c_check_op
0001a984 g     F .text	000000b6 lif_e010_pad_sector
000181e0 g     F .text	00000042 lif_help
000065ae g     F .text	000000b8 split_args
0000efdc g     F .text	0000003e rename
000109a2 g     F .text	0000003a dbf_close
00017cf4 g     F .text	000000be receive_plot_flush
0001cfca g     F .text	000000dc __divsf3x
00004c74  w      .text	00000000 __vector_11
00801eeb g     O .bss	00000001 spoll
0000ee8a g     F .text	0000001c basename
00014f16 g     F .text	000000c6 SS80_display_extended_status
00017ba8 g     F .text	00000130 AMIGO_COMMANDS
000186a8 g     F .text	0000007a lif_fixname
0000d790 g     F .text	000000e8 mmc_disk_write
00004c36  w      .text	00000000 __init
0001d3a6 g     F .text	00000034 calloc
0001b592 g     F .text	00000270 lif_extract_lif_as_lif
0000676c g     F .text	00000026 install_timers_isr
0001081c g     F .text	00000014 reverse_8bits
000150de g     F .text	000000e0 SS80_describe
000054c4 g     F .text	0000002c uart_getchar
00007ec0 g     F .text	0000020e p_ftoa
0000f85c g     F .text	000000dc write
000185c0 g     F .text	00000074 lif_B2S
0001d246 g       .text	00000000 __gtsf2
0000fd00 g     F .text	00000040 fprintf
000110cc g     F .text	000000a4 gpib_decode_header
000113f4 g     F .text	0000020c gpib_read_byte
00012650 g     F .text	0000003e tok_index
00015ce2 g     F .text	0000001c SS80_Universal_Device_Clear
0001adbc g     F .text	00000278 lif_add_ascii_file_as_e010
00006792 g     F .text	0000004e __vector_13
00006328  w    F .text	00000026 strcat
008019ef g     O .bss	00000057 uarts
00004e62 g     F .text	0000000a clear_error
0001d26a g       .text	00000000 __mulsf3_pse
00004c74  w      .text	00000000 __vector_17
00004e36 g     F .text	00000022 spi_TXRX
0001d1b0 g     F .text	00000006 __fp_nan
00012f8c g     F .text	0000018a set_active_device
00004c74  w      .text	00000000 __vector_19
000066ec g     F .text	0000007c get_value
000056da g     F .text	00000028 SPI0_TX
00018634 g     F .text	0000003a lif_checkname
0000eea6 g     F .text	0000003e chdir
00004c74  w      .text	00000000 __vector_7
00016e38 g     F .text	000000b6 amigo_buffered_read_execute
0000dea2 g     F .text	000001a2 mmc_init
0000e6b8 g     F .text	000001a6 fatfs_ls
0001d1a4 g     F .text	0000000c __fp_inf
00008e3c g     F .text	00000028 sprintf_P
0001cea8 g       .text	00000018 .hidden __cmpdi2_s8
0000f26a g     F .text	00000088 fat_time_to_unix
0000f66c g     F .text	0000004e fseek
00801cb5 g     O .bss	00000004 AccSize
00018ca0 g     F .text	0000000c lif_image_clear
0000dde6 g     F .text	0000000e mmc_set_ms_timeout
00006768 g     F .text	00000004 enable_system_task
0000ddda g     F .text	00000006 mmc_spi_RX_buffer
0000598e g     F .text	00000024 i2c_task_done
000070aa g     F .text	00000058 is_dst
000052fe g     F .text	0000008e uart_init
00014c1a g     F .text	00000078 SS80ControllerPack
00013d2c g     F .text	00000012 verify_devices
00801ef4 g     O .bss	00000084 Devices
00004c5c g       .text	00000010 .hidden __do_clear_bss
00005600 g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001a310 g     F .text	00000200 lif_open_volume
0000ff3e g     F .text	00000070 testpage
00017fa8 g     F .text	000000f2 printer_buffer
0000bde8 g     F .text	00000032 f_close
0001d266 g     F .text	000000d2 __mulsf3x
00017cd8 g     F .text	0000001c printer_init
0000dd96 g     F .text	0000001a mmc_slow
00006482 g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
00010830 g     F .text	00000014 ppr_set
00016bee g     F .text	00000130 amigo_format
0000f6ba g     F .text	000000da read
00019838 g     F .text	00000030 lif_writedirEOF
0000dd8e g     F .text	00000008 mmc_spi_end
0001d0e6 g       .text	00000000 __floatsisf
00017174 g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00019868 g     F .text	00000214 lif_updatefree
0000572e g     F .text	0000002a SPI0_RX
0000b724 g     F .text	00000296 f_read
008019ed g     O .bss	00000002 rtc_ok
00010c6e g     F .text	00000024 gpib_tx_init
0001194c g     F .text	00000024 SS80_is_MLA
0000538c g     F .text	00000048 uart_rx_interrupt
000054f0 g     F .text	00000006 uart0_getchar
00004c74  w      .text	00000000 __vector_27
00010d58 g     F .text	0000006c gpib_disable_PPR
0000e172 g     F .text	000000e0 fatfs_scan_files
00004c78 g     F .text	00000032 chip_select
0080174e g       .data	00000000 __data_end
00010968 g     F .text	0000003a dbf_lseek
000163f4 g     F .text	000001d4 SS80_COMMANDS
00006442 g     F .text	00000040 stralloc
0000c7be g     F .text	00000088 f_readdir
00801eec g     O .bss	00000002 current
00015210 g     F .text	0000004e SS80_Check_Volume
0000dd3c g     F .text	00000038 mmc_install_timer
00007de0 g     F .text	00000036 pch
00008e9e g     F .text	0000003c atodigit
0001ccce g       .text	0000001e .hidden __mulsi3
000062fc  w    F .text	0000002c strncpy
0000f01a g     F .text	0000003e unlink
0000f832 g     F .text	0000002a sync
00015c32 g     F .text	00000098 SS80_init
0001cfa8 g       .text	00000000 __eqsf2
0000fa4c g     F .text	0000008a new_file_descriptor
000063b4  w    F .text	0000003e strcasecmp
0001ce0c g       .text	00000020 .hidden __negdi2
000181a0 g     F .text	00000040 B2V_LSB
0000e588 g     F .text	00000106 fatfs_filinfo_list
0000cfda g     F .text	0000009a f_chmod
00801a58 g     O .bss	00000018 timer_irq
000059b2 g     F .text	0000001a i2c_send_start
00012f00 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001cd2c g       .text	00000026 .hidden __divmodhi4
00014c92 g     F .text	00000198 SS80UnitPack
00010a8a g     F .text	000000ae dbf_open_write
00004c74  w      .text	00000000 __vector_5
0000dd00 g     F .text	0000003c mmc_disk_timerproc
00801a46 g     O .bss	0000000a i2c
000077b6 g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004c74  w      .text	00000000 __vector_33
0001268e g     F .text	0000003e tok_name
00011608 g     F .text	00000144 gpib_read_str
0001a510 g     F .text	000003aa lif_dir
00016eee g     F .text	000001ce amigo_buffered_write
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014fdc g     F .text	00000102 SS80_send_status
0001cdce g       .text	00000012 .hidden __tablejump2__
00011a7e g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000f426 g     F .text	00000090 unix_time_to_fat
00004c36 g       .text	00000000 __ctors_start
0000d57e g     F .text	0000014a mmc_disk_initialize
00801a70 g     O .bss	00000004 __tzone
0000e122 g     F .text	00000026 get_fattime
00800321 g     O .data	00000002 _cmd1
0000f794 g     F .text	00000038 fread
00018cac g     F .text	00000010 lif_dir_clear
00016a0a g     F .text	00000052 amigo_increment
00012220 g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
0080182e g     O .bss	00000002 _mmc_timeout
00004c42 g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000fc14 g     F .text	000000d4 posix_fopen_modes_to_open
00018162 g     F .text	0000003e B2V_MSB
0080177a g     O .bss	00000002 i2c_callback
00018ace g     F .text	0000000e lif_BIN2BCD
0001d354 g     F .text	00000036 __fp_mintl
0001cfa8 g     F .text	00000008 __cmpsf2
0001ce9a g       .text	0000000e .hidden __xload_1
00010c32 g     F .text	0000003c gpib_rx_init
0000700c g     F .text	0000005c gettimeofday
0001d1c4 g     F .text	0000000e __fp_pscB
0001d204 g       .text	00000000 __fp_splitA
00018c16 g     F .text	0000003c lif_ctime_gmt
000183fe g     F .text	000000a6 lif_read
0000fce8 g     F .text	00000018 fopen
0080174e g       .bss	00000000 __bss_start
000079ea g     F .text	000000aa asctime_r
0000719a g     F .text	00000008 localtime
0001d61c g     F .text	0000000e memset
000172f6 g     F .text	00000108 amigo_todo
0001346a g     F .text	00000032 push_state
00007774 g     F .text	00000042 setdate
0001c960 g     F .text	0000036e main
008002f5 g     O .data	00000015 _line2
00012400 g     F .text	00000002 talk_cleanup
000061a4 g     F .text	0000008e rtc_run
00013b94 g     F .text	00000198 verify_device
0000f566 g     F .text	00000036 ftell
00801eee g     O .bss	00000001 talking
0000bce8 g     F .text	00000100 f_sync
00801962 g     O .bss	00000002 AMIGOs
0001cfa8 g       .text	00000000 __ltsf2
0000552e g     F .text	00000004 uart_keyhit
0001343a g     F .text	00000030 init_Devices
00004c74  w      .text	00000000 __vector_4
00019596 g     F .text	0000004c lif_close_volume
0000ddb0 g     F .text	0000000a mmc_spi_init
00800100 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
000196b2 g     F .text	000000ce lif_readdirindex
00017426 g     F .text	000005cc Amigo_Command
0000fa3c g     F .text	00000010 fclose
0000ed00 g     F .text	0000000c getchar
00016958 g     F .text	000000b2 amigo_send_status
0001675c g     F .text	0000007c amigo_init
00800136 g     O .data	0000004a sys_errlist
00007068 g     F .text	00000042 time
0000f092 g     F .text	0000003c opendir
0001d38a g     F .text	0000001c __fp_mpack
00013116 g     F .text	000000f0 SS80_Set_Defaults
00006066 g     F .text	0000000c i2c_rtc_init
00006fe8 g     F .text	00000024 settimezone
0000b33c g     F .text	00000078 f_mount
0000e270 g     F .text	00000318 fatfs_status
000119dc g     F .text	00000024 AMIGO_is_MTA
0001cdbe g       .text	00000010 .hidden __negsi2
0000c6b2 g     F .text	000000e2 f_opendir
00015bf4 g     F .text	0000003e Clear_Common
0001c50c g     F .text	00000042 help
00010cec g     F .text	0000006c gpib_enable_PPR
00014586 g     F .text	000001aa mount
00016ab2 g     F .text	0000013c amigo_verify
0001d24e g     F .text	00000004 __mulsf3
00006666 g     F .text	00000086 get_token
000167f4 g     F .text	000000ba amigo_request_status
00012802 g     F .text	000001a8 display_Addresses
0000f53c g     F .text	0000002a fileno_to_fatfs
0000d292 g     F .text	0000002a ff_oem2uni
0000639a  w    F .text	0000001a strcmp
00010c92 g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010b62 g     F .text	0000004c gpib_timer_task
000050be g     F .text	0000005a delayus
0001349c g     F .text	0000002e pop_state
00004c74  w      .text	00000000 __vector_9
0000ef36 g     F .text	0000004a getcwd
00004c74  w      .text	00000000 __vector_2
000064fe g     F .text	00000028 MATCHI
000173fe g     F .text	00000028 amigo_check_unit
0001cf02 g     F .text	000000cc __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c13c g     F .text	00000576 f_lseek
0000eb96 g     F .text	000000ac fgetc
00801eef g     O .bss	00000001 secondary
00008dc8 g     F .text	0000004c vsnprintf_P
00007a9c g     F .text	00000022 ctime_gm
0001d246 g     F .text	00000008 __gesf2
00014730 g     F .text	000000fc hpdir_init
000168ae g     F .text	000000aa amigo_send_logical_address
000151be g     F .text	00000052 SS80_Check_Unit
000118b2 g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
00013a12 g     F .text	00000090 umount
00801960 g     O .bss	00000002 gpib_log_fp
00004c74  w      .text	00000000 __vector_21
00004c74  w      .text	00000000 __vector_15
000080ce g     F .text	000002d8 p_etoa
000127b6 g     F .text	0000004c print_tok
00801756 g     O .bss	00000020 i2c_task_op
0001607c g     F .text	000002c4 SS80_locate_and_read
000058a0 g     F .text	000000ca i2c_init
00012444 g     F .text	0000020c gpib_tests
00013206 g     F .text	000000c2 free_device
00801cb9 g     O .bss	00000002 AccDirs
0000d226 g     F .text	00000006 ff_memfree
0080196a g     O .bss	00000002 PRINTERp
0001d1b6 g     F .text	0000000e __fp_pscA
0001ccec g       .text	00000018 .hidden __udivmodqi4
00801ef0 g     O .bss	00000001 listening
00011ba2 g     F .text	0000011a gpib_error_test
00801966 g     O .bss	00000002 SS80s
0000c846 g     F .text	0000007c f_stat
00010bc2 g     F .text	00000070 gpib_bus_init
00005758 g     F .text	0000002c i2c_timer
0000ec42 g     F .text	000000a4 fputc
00004c74  w      .text	00000000 __vector_29
0000551a g     F .text	00000014 uart0_putchar
00008e64 g     F .text	0000003a printf_P
0001ce04 g       .text	00000008 .hidden __mulohisi3
00016340 g     F .text	000000b4 SS80_Execute_State
00007532 g     F .text	00000008 timegm
0001525e g     F .text	000004ee SS80_Command_State
00006fca g     F .text	0000001e gettimezone
00802030 g       .comment	00000000 __heap_start
000064a2 g     F .text	00000020 trim_tail
00010e5c g     F .text	00000270 gpib_write_byte
00017db2 g     F .text	000000b0 printer_close
0000584c g     F .text	00000054 i2c_task_op_add
00019056 g     F .text	000001d6 lif_check_volume
00007102 g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801cbb g     O .bss	00000002 AccFiles
000060fe g     F .text	000000a6 rtc_read
00004c36 g       .text	00000000 __dtors_start
00004c36 g       .text	00000000 __ctors_end
0001cd96 g       .text	00000028 .hidden __divmodsi4
00010e18 g     F .text	0000000c gpib_bus_read
0000f2f2 g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f7cc g     F .text	00000066 syncfs
00018222 g     F .text	0000006c lif_calloc
0000f938 g     F .text	00000038 fwrite
00011d64 g     F .text	000000c6 Send_Identify
00801828 g     O .bss	00000002 _mmc_pre
0000dde0 g     F .text	00000006 mmc_spi_TXRX
0080174e g       .data	00000000 _edata
0000d074 g     F .text	000000b2 f_utime
000129aa g     F .text	00000510 display_Config
0001cde2 g       .text	0000000a .hidden __usmulhisi3_tail
00802030 g       .comment	00000000 _end
00018394 g     F .text	0000006a lif_seek_msg
00004da6 g     F .text	00000090 spi_begin
00017e62 g     F .text	00000146 printer_open
0000b9ba g     F .text	0000032e f_write
00004c74  w      .text	00000000 __vector_8
0001a8ba g     F .text	000000ca lif_find_file
00005bd8 g     F .text	000001d4 __vector_26
00007cce g     F .text	00000112 bin2num
0001cfce g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
0000842a g     F .text	000000b8 _puts_pad_X
00801964 g     O .bss	00000002 AMIGOp
0000ddd4 g     F .text	00000006 mmc_spi_TX_buffer
0000b3b4 g     F .text	00000370 f_open
00018722 g     F .text	0000011c lif_vol2str
0000d3b8 g     F .text	00000020 disk_write
000101fe g     F .text	00000210 ls
0001d62a  w      .text	00000000 .hidden exit
00012342 g     F .text	000000be gpib_task
00005b06 g     F .text	000000be i2c_task_next_op
0001d0e2 g     F .text	0000007a __floatunsisf
00016d1e g     F .text	0000011a amigo_buffered_read_command
00006a4c g     F .text	00000082 subtract_timespec
0001cd2c g       .text	00000000 .hidden _div
00005dac g     F .text	000000ee i2c_print_error
000179f2 g     F .text	000001b6 Amigo_Execute
00006380  w    F .text	0000001a strupper
0080202e g     O .bss	00000002 __flp
000126cc g     F .text	00000080 print_tok_val
0001cd52 g       .text	00000044 .hidden __udivmodsi4
00011a48 g     F .text	00000024 PRINTER_is_MTA
0001a050 g     F .text	000002c0 lif_newdir
00014866 g     F .text	000003b4 hpdir_find_drive
00011a24 g     F .text	00000024 PRINTER_is_MLA
00008f96 g     F .text	0000000e atoi
00006dce g     F .text	000001bc time_to_tm
0000e148 g     F .text	0000002a put_rc
0000edde g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
00005680 g     F .text	0000005a SPI0_Init
0000cbd0 g     F .text	000001e0 f_mkdir
0001d08a g     F .text	00000058 __fixunssfsi
00801f78 g     O .bss	000000b4 hpdir
0000753a g     F .text	0000023a setdate_r
00006526 g     F .text	00000054 MATCHARGS
00004d3e g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d62a g       .text	00000000 .hidden _exit
000184a4 g     F .text	000000c6 lif_write
0001866e g     F .text	0000003a lif_S2B
0001c8dc g     F .text	00000014 user_task
00801ef1 g     O .bss	00000001 talking_last
000108f4 g     F .text	0000003a dbf_read
00005f7c g     F .text	00000012 BCDtoBIN
0001c472 g     F .text	00000076 i2c_lcd_task
000071a2 g     F .text	00000390 normalize
00006fb4 g     F .text	00000016 gmtime
00004c74  w      .text	00000000 __vector_14
0000e8d0 g     F .text	0000012a fatfs_tests
0001bd3e g     F .text	0000010e lif_create_image
0000d398 g     F .text	00000020 disk_read
0000fad6 g     F .text	0000013e open
000062cc  w    F .text	0000001a toupper
00015836 g     F .text	00000324 SS80_locate_and_write
0001c18a g     F .text	00000014 lcd_task
0000851a g     F .text	000008ae _printf_fn
00004c74  w      .text	00000000 __vector_10
00010892 g     F .text	0000001c ppr_bit_clr
00801cbf g     O .bss	00000020 __iob
0000d126 g     F .text	000000fa f_getlabel
0001883e g     F .text	000000fc lif_str2vol
0000c8c2 g     F .text	000001c0 f_getfree
0000ed80 g     F .text	00000030 fputs
00004c74  w      .text	00000000 __vector_16
0000657a g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00004fbc g     F .text	00000054 safecalloc
0001c8f0 g     F .text	00000070 update_drive_counts
0000ee16 g     F .text	0000002a fileno_to_stream
0001574c g     F .text	000000ea SS80_cmd_seek
0000f05c g     F .text	00000036 closedir
00004c74  w      .text	00000000 __vector_18
00005822 g     F .text	0000002a i2c_task_init
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014e2a g     F .text	000000b8 SS80VolumePack
0000d6ce g     F .text	000000c2 mmc_disk_read
0000e85e g     F .text	00000072 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
0001834a g     F .text	0000004a lif_stat
0000548c g     F .text	00000006 uart_rx_byte
00016008 g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
000053d4 g     F .text	00000054 __vector_20
0000ef80 g     F .text	0000005c mkdir
0001c2dc g     F .text	0000004e lcd_backlight
000054f6 g     F .text	00000024 uart_putchar
0001040e g     F .text	000003dc posix_tests
00801ef2 g     O .bss	00000002 gpib_unread_data
0000f9da g     F .text	00000062 close
0001cee0 g       .text	00000000 __addsf3
0001ce2c g       .text	00000038 .hidden __prologue_saves__
000119b8 g     F .text	00000024 AMIGO_is_MLA
0000ddf4 g     F .text	00000048 mmc_test_timeout
0001b034 g     F .text	0000055e lif_extract_e010_as_ascii
00016a5c g     F .text	00000056 amigo_seek
00010e44 g     F .text	00000018 gpib_handshake_pin_read
00006bfe g     F .text	00000028 enable_timers
0000e252 g     F .text	0000001e fatfs_fstype
00018138 g     F .text	0000002a V2B_LSB
0001092e g     F .text	0000003a dbf_write
00801968 g     O .bss	00000002 SS80p
0000d220 g     F .text	00000006 ff_memalloc
0001d50a g     F .text	00000112 free
0001d23a g       .text	00000000 __fp_szero
00005492 g     F .text	00000032 uart_tx_byte
0001ce00 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 26 	jmp	0x4c36	; 0x4c36 <__ctors_end>
       4:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
       8:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
       c:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      10:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      14:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      18:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      1c:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      20:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      24:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      28:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      2c:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      30:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      34:	0c 94 c9 33 	jmp	0x6792	; 0x6792 <__vector_13>
      38:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      3c:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      40:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      44:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      48:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      4c:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      50:	0c 94 ea 29 	jmp	0x53d4	; 0x53d4 <__vector_20>
      54:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      58:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      5c:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      60:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      64:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      68:	0c 94 ec 2d 	jmp	0x5bd8	; 0x5bd8 <__vector_26>
      6c:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      70:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      74:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      78:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      7c:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      80:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      84:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      88:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__bad_interrupt>
      8c:	f9 43       	sbci	r31, 0x39	; 57
      8e:	49 45       	sbci	r20, 0x59	; 89
      90:	31 44       	sbci	r19, 0x41	; 65
      92:	1c 45       	sbci	r17, 0x5C	; 92
      94:	1c 45       	sbci	r17, 0x5C	; 92
      96:	49 45       	sbci	r20, 0x59	; 89
      98:	49 45       	sbci	r20, 0x59	; 89
      9a:	49 45       	sbci	r20, 0x59	; 89
      9c:	49 45       	sbci	r20, 0x59	; 89
      9e:	49 45       	sbci	r20, 0x59	; 89
      a0:	49 45       	sbci	r20, 0x59	; 89
      a2:	49 45       	sbci	r20, 0x59	; 89
      a4:	49 45       	sbci	r20, 0x59	; 89
      a6:	f9 43       	sbci	r31, 0x39	; 57
      a8:	f6 43       	sbci	r31, 0x36	; 54
      aa:	49 45       	sbci	r20, 0x59	; 89
      ac:	49 45       	sbci	r20, 0x59	; 89
      ae:	3f 45       	sbci	r19, 0x5F	; 95
      b0:	49 45       	sbci	r20, 0x59	; 89
      b2:	2b 44       	sbci	r18, 0x4B	; 75
      b4:	49 45       	sbci	r20, 0x59	; 89
      b6:	49 45       	sbci	r20, 0x59	; 89
      b8:	f9 43       	sbci	r31, 0x39	; 57
      ba:	49 45       	sbci	r20, 0x59	; 89
      bc:	49 45       	sbci	r20, 0x59	; 89
      be:	49 45       	sbci	r20, 0x59	; 89
      c0:	49 45       	sbci	r20, 0x59	; 89
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	49 45       	sbci	r20, 0x59	; 89
      c6:	49 45       	sbci	r20, 0x59	; 89
      c8:	49 45       	sbci	r20, 0x59	; 89
      ca:	49 45       	sbci	r20, 0x59	; 89
      cc:	f9 43       	sbci	r31, 0x39	; 57
      ce:	44 45       	sbci	r20, 0x54	; 84
      d0:	31 44       	sbci	r19, 0x41	; 65
      d2:	1c 45       	sbci	r17, 0x5C	; 92
      d4:	1c 45       	sbci	r17, 0x5C	; 92
      d6:	49 45       	sbci	r20, 0x59	; 89
      d8:	49 45       	sbci	r20, 0x59	; 89
      da:	49 45       	sbci	r20, 0x59	; 89
      dc:	49 45       	sbci	r20, 0x59	; 89
      de:	49 45       	sbci	r20, 0x59	; 89
      e0:	49 45       	sbci	r20, 0x59	; 89
      e2:	49 45       	sbci	r20, 0x59	; 89
      e4:	49 45       	sbci	r20, 0x59	; 89
      e6:	f9 43       	sbci	r31, 0x39	; 57
      e8:	f6 43       	sbci	r31, 0x36	; 54
      ea:	49 45       	sbci	r20, 0x59	; 89
      ec:	49 45       	sbci	r20, 0x59	; 89
      ee:	3a 45       	sbci	r19, 0x5A	; 90
      f0:	49 45       	sbci	r20, 0x59	; 89
      f2:	2b 44       	sbci	r18, 0x4B	; 75
      f4:	49 45       	sbci	r20, 0x59	; 89
      f6:	49 45       	sbci	r20, 0x59	; 89
      f8:	f9 43       	sbci	r31, 0x39	; 57
      fa:	6e 45       	sbci	r22, 0x5E	; 94
      fc:	af 46       	sbci	r26, 0x6F	; 111
      fe:	61 45       	sbci	r22, 0x51	; 81
     100:	c9 45       	sbci	r28, 0x59	; 89
     102:	ad 45       	sbci	r26, 0x5D	; 93
     104:	af 46       	sbci	r26, 0x6F	; 111
     106:	af 46       	sbci	r26, 0x6F	; 111
     108:	af 46       	sbci	r26, 0x6F	; 111
     10a:	af 46       	sbci	r26, 0x6F	; 111
     10c:	af 46       	sbci	r26, 0x6F	; 111
     10e:	af 46       	sbci	r26, 0x6F	; 111
     110:	af 46       	sbci	r26, 0x6F	; 111
     112:	af 46       	sbci	r26, 0x6F	; 111
     114:	7b 45       	sbci	r23, 0x5B	; 91
     116:	8f 45       	sbci	r24, 0x5F	; 95
     118:	af 46       	sbci	r26, 0x6F	; 111
     11a:	af 46       	sbci	r26, 0x6F	; 111
     11c:	55 46       	sbci	r21, 0x65	; 101
     11e:	af 46       	sbci	r26, 0x6F	; 111
     120:	5d 45       	sbci	r21, 0x5D	; 93
     122:	af 46       	sbci	r26, 0x6F	; 111
     124:	af 46       	sbci	r26, 0x6F	; 111
     126:	8f 45       	sbci	r24, 0x5F	; 95
     128:	af 46       	sbci	r26, 0x6F	; 111
     12a:	af 46       	sbci	r26, 0x6F	; 111
     12c:	af 46       	sbci	r26, 0x6F	; 111
     12e:	af 46       	sbci	r26, 0x6F	; 111
     130:	af 46       	sbci	r26, 0x6F	; 111
     132:	af 46       	sbci	r26, 0x6F	; 111
     134:	af 46       	sbci	r26, 0x6F	; 111
     136:	af 46       	sbci	r26, 0x6F	; 111
     138:	af 46       	sbci	r26, 0x6F	; 111
     13a:	6e 45       	sbci	r22, 0x5E	; 94
     13c:	fd 45       	sbci	r31, 0x5D	; 93
     13e:	61 45       	sbci	r22, 0x51	; 81
     140:	c9 45       	sbci	r28, 0x59	; 89
     142:	ad 45       	sbci	r26, 0x5D	; 93
     144:	af 46       	sbci	r26, 0x6F	; 111
     146:	af 46       	sbci	r26, 0x6F	; 111
     148:	af 46       	sbci	r26, 0x6F	; 111
     14a:	af 46       	sbci	r26, 0x6F	; 111
     14c:	af 46       	sbci	r26, 0x6F	; 111
     14e:	af 46       	sbci	r26, 0x6F	; 111
     150:	af 46       	sbci	r26, 0x6F	; 111
     152:	af 46       	sbci	r26, 0x6F	; 111
     154:	7b 45       	sbci	r23, 0x5B	; 91
     156:	8f 45       	sbci	r24, 0x5F	; 95
     158:	af 46       	sbci	r26, 0x6F	; 111
     15a:	af 46       	sbci	r26, 0x6F	; 111
     15c:	fd 45       	sbci	r31, 0x5D	; 93
     15e:	af 46       	sbci	r26, 0x6F	; 111
     160:	5d 45       	sbci	r21, 0x5D	; 93
     162:	af 46       	sbci	r26, 0x6F	; 111
     164:	af 46       	sbci	r26, 0x6F	; 111
     166:	8f 45       	sbci	r24, 0x5F	; 95
     168:	8e 69       	ori	r24, 0x9E	; 158
     16a:	98 69       	ori	r25, 0x98	; 152
     16c:	a0 69       	ori	r26, 0x90	; 144
     16e:	a3 69       	ori	r26, 0x93	; 147
     170:	a6 69       	ori	r26, 0x96	; 150
     172:	a9 69       	ori	r26, 0x99	; 153
     174:	ac 69       	ori	r26, 0x9C	; 156
     176:	af 69       	ori	r26, 0x9F	; 159
     178:	b2 69       	ori	r27, 0x92	; 146
     17a:	8e 87       	std	Y+14, r24	; 0x0e
     17c:	96 87       	std	Z+14, r25	; 0x0e
     17e:	c7 87       	std	Z+15, r28	; 0x0f
     180:	e0 87       	std	Z+8, r30	; 0x08
     182:	fc 87       	std	Y+12, r31	; 0x0c
     184:	09 88       	ldd	r0, Y+17	; 0x11
     186:	25 88       	ldd	r2, Z+21	; 0x15
     188:	4f 88       	ldd	r4, Y+23	; 0x17
     18a:	32 88       	ldd	r3, Z+18	; 0x12
     18c:	8f 9f       	mul	r24, r31
     18e:	5f a0       	ldd	r5, Y+39	; 0x27
     190:	9b a0       	ldd	r9, Y+35	; 0x23
     192:	ce a0       	ldd	r12, Y+38	; 0x26
     194:	de a0       	ldd	r13, Y+38	; 0x26
     196:	fb a0       	ldd	r15, Y+35	; 0x23
     198:	5b a1       	ldd	r21, Y+35	; 0x23
     19a:	46 a2       	std	Z+38, r4	; 0x26
     19c:	46 a2       	std	Z+38, r4	; 0x26
     19e:	46 a2       	std	Z+38, r4	; 0x26
     1a0:	8f a1       	ldd	r24, Y+39	; 0x27
     1a2:	bb a1       	ldd	r27, Y+35	; 0x23
     1a4:	fe a1       	ldd	r31, Y+38	; 0x26
     1a6:	15 a2       	std	Z+37, r1	; 0x25
     1a8:	28 a0       	ldd	r2, Y+32	; 0x20
     1aa:	3b a0       	ldd	r3, Y+35	; 0x23
     1ac:	cc bd       	out	0x2c, r28	; 44
     1ae:	8b bd       	out	0x2b, r24	; 43
     1b0:	8b bd       	out	0x2b, r24	; 43
     1b2:	8b bd       	out	0x2b, r24	; 43
     1b4:	8b bd       	out	0x2b, r24	; 43
     1b6:	4f bd       	out	0x2f, r20	; 47
     1b8:	56 bd       	out	0x26, r21	; 38
     1ba:	5d bd       	out	0x2d, r21	; 45
     1bc:	6d bd       	out	0x2d, r22	; 45
     1be:	7b bd       	out	0x2b, r23	; 43
     1c0:	74 bd       	out	0x24, r23	; 36

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3651>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3649>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3647>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3644>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3642>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3640>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3638>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3636>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3672>:
     843:	0a 00                                               ..

00000845 <__c.3670>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3668>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3662>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3660>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3658>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3656>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3654>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3652>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3650>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3648>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3646>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3644>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3642>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3640>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3638>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3636>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3634>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3632>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3596>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3630>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3628>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3624>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3611>:
     aef:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000afd <__c.3609>:
     afd:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b0d:	73 74 0a 00                                         st..

00000b11 <__c.3607>:
     b11:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b21 <__c.3589>:
     b21:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b2d <__c.3587>:
     b2d:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3d:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4d:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5d:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6d:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b7d:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b8d:	20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a 66 61      ls directory.fa
     b9d:	74 66 73 20 73 74 61 74 75 73 0a 0a 00              tfs status...

00000baa <__c.3919>:
     baa:	25 73 0a 00                                         %s..

00000bae <__c.3917>:
     bae:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bb6 <__c.3672>:
     bb6:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bc2 <__c.3601>:
     bc2:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bd2:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bda <__c.3594>:
     bda:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bea:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bf2 <__c.3764>:
     bf2:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bfd <__c.3760>:
     bfd:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c0d:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c1d:	68 0a 00                                            h..

00000c20 <__c.3757>:
     c20:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c30 <__c.3752>:
     c30:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c3e <__c.3750>:
     c3e:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c4e:	5b 25 73 5d 0a 00                                   [%s]..

00000c54 <__c.3748>:
     c54:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c64:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c75 <__c.3735>:
     c75:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c85:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c8f <__c.3730>:
     c8f:	25 73 0a 00                                         %s..

00000c93 <__c.3728>:
     c93:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     ca3:	0a 00                                               ..

00000ca5 <__c.3716>:
     ca5:	0d 00                                               ..

00000ca7 <__c.3714>:
     ca7:	4d 6f 72 65 2e 2e 00                                More...

00000cae <__c.3704>:
     cae:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cbe:	2e 0a 00                                            ...

00000cc1 <__c.3700>:
     cc1:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cd0 <__c.3697>:
     cd0:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cdd <__c.3695>:
     cdd:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cea <__c.3693>:
     cea:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cfa <__c.3691>:
     cfa:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000d07 <__c.3689>:
     d07:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d17 <__c.3687>:
     d17:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d23 <__c.3676>:
     d23:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d2e <__c.3674>:
     d2e:	0a 00                                               ..

00000d30 <__c.3669>:
     d30:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d40 <__c.3659>:
     d40:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d51 <__c.3657>:
     d51:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d5f <__c.3655>:
     d5f:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d70 <__c.3653>:
     d70:	25 73 0a 00                                         %s..

00000d74 <__c.3651>:
     d74:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d80 <__c.3647>:
     d80:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d91 <__c.3640>:
     d91:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     da1:	74 20 23 20 25 64 0a 00                             t # %d..

00000da9 <__c.3636>:
     da9:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dba <__c.3620>:
     dba:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     dca:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     dda:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dea:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dfa:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     e0a:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e1a:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e2a:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e3a:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e4a:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e5a:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e6a:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e7a:	6e 65 77 0a 0a 00                                   new...

00000e80 <__c.3618>:
     e80:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e8c <__c.3807>:
     e8c:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e9a <__c.3801>:
     e9a:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ea7 <__c.3794>:
     ea7:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000eb5 <__c.3785>:
     eb5:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000ec2 <__c.3776>:
     ec2:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ed3 <__c.3762>:
     ed3:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ee3:	5d 0a 00                                            ]..

00000ee6 <__c.3744>:
     ee6:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     ef6:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f03 <__c.4418>:
     f03:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f13:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f23:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f2b <__c.4410>:
     f2b:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f3b:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f45 <__c.4405>:
     f45:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f55:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f65:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f73 <__c.4403>:
     f73:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f83:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f8d <__c.4393>:
     f8d:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f9d:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fad:	28 25 64 29 5d 0a 00                                (%d)]..

00000fb4 <__c.4389>:
     fb4:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fc4:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fd4:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fe1 <__c.4386>:
     fe1:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     ff1:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000ffa <__c.4370>:
     ffa:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00001005 <__c.4368>:
    1005:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001010 <__c.4366>:
    1010:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

0000101b <__c.4362>:
    101b:	20 20 20 20 20 00                                        .

00001021 <__c.4360>:
    1021:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000102a <__c.4334>:
    102a:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    103a:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001048 <__c.4318>:
    1048:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    1058:	3e 0a 00                                            >..

0000105b <__c.4313>:
    105b:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    106b:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    107b:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000108a <__c.4309>:
    108a:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    109a:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10aa:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ba:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010c6 <__c.4305>:
    10c6:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10d6:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10e6:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10f6:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

00001102 <__c.4303>:
    1102:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1112:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1122:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1132:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001141 <__c.4298>:
    1141:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1151:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001160 <__c.4282>:
    1160:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1170:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1180:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

0000118e <__c.4266>:
    118e:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    119e:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011a9 <__c.4264>:
    11a9:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11b9:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11c9:	72 61 6e 67 65 0a 00                                range..

000011d0 <__c.4259>:
    11d0:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11e0:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011eb <__c.4257>:
    11eb:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11fb:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    120b:	61 6e 67 65 0a 00                                   ange..

00001211 <__c.4252>:
    1211:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1221:	5d 0a 00                                            ]..

00001224 <__c.4240>:
    1224:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001235 <__c.4417>:
    1235:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

00001246 <__c.4412>:
    1246:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1256:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1266:	32 58 48 5d 0a 00                                   2XH]..

0000126c <__c.4410>:
    126c:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    127c:	0a 00                                               ..

0000127e <__c.4408>:
    127e:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000128f <__c.4403>:
    128f:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000129b <__c.4401>:
    129b:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012ab <__c.4399>:
    12ab:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12bb:	52 5d 0a 00                                         R]..

000012bf <__c.4397>:
    12bf:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12cf:	0a 00                                               ..

000012d1 <__c.4395>:
    12d1:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012e2 <__c.4393>:
    12e2:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012e9 <__c.4388>:
    12e9:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012f5 <__c.4386>:
    12f5:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1305:	52 5d 0a 00                                         R]..

00001309 <__c.4384>:
    1309:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000131a <__c.4382>:
    131a:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    132a:	0a 00                                               ..

0000132c <__c.4380>:
    132c:	0a 00                                               ..

0000132e <__c.4378>:
    132e:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001335 <__c.4373>:
    1335:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1345:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001356 <__c.4371>:
    1356:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000135d <__c.4369>:
    135d:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000136a <__c.4367>:
    136a:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001376 <__c.4365>:
    1376:	5b 53 44 43 5d 0a 00                                [SDC]..

0000137d <__c.4363>:
    137d:	5b 53 50 44 5d 0a 00                                [SPD]..

00001384 <__c.4361>:
    1384:	5b 53 50 45 5d 0a 00                                [SPE]..

0000138b <__c.4359>:
    138b:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    139b:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013a3 <__c.4357>:
    13a3:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13b3:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013bb <__c.4352>:
    13bb:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13cb:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013d5 <__c.4350>:
    13d5:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13e5:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013f6 <__c.4323>:
    13f6:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001407 <__c.4321>:
    1407:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001414 <__c.4319>:
    1414:	3c 42 55 53 3e 0a 00                                <BUS>..

0000141b <__c.4317>:
    141b:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

00001426 <__c.4315>:
    1426:	3c 49 46 43 3e 0a 00                                <IFC>..

0000142d <__c.4310>:
    142d:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    143d:	0a 00                                               ..

0000143f <__c.4308>:
    143f:	44 6f 6e 65 0a 00                                   Done..

00001445 <__c.4304>:
    1445:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001451 <__c.4302>:
    1451:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1461:	20 65 78 69 74 0a 00                                 exit..

00001468 <__c.4300>:
    1468:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1478:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1488:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001493 <__c.4298>:
    1493:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14a3:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014ad <__c.4252>:
    14ad:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14bd:	6f 74 65 63 74 65 64 0a 00                          otected..

000014c6 <__c.4250>:
    14c6:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014d7 <__c.4248>:
    14d7:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14e7:	0a 00                                               ..

000014e9 <__c.4443>:
    14e9:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014f6 <__c.4435>:
    14f6:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1506:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1516:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    1526:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    1536:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    1546:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1556:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    1566:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    1576:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1586:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1596:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    15a6:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15b6:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15c6:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15d6:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15e6:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15f6:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1606:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1616:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    1626:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    1636:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    1646:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1656:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    1666:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    1676:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1686:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1696:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    16a6:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16b6:	74 61 74 65 73 0a 0a 0a 67 70 69 62 20 6d 6f 75     tates...gpib mou
    16c6:	6e 74 0a 20 20 20 20 20 64 69 73 70 6c 61 79 73     nt.     displays
    16d6:	20 61 20 6c 69 73 74 20 6f 66 20 6d 6f 75 6e 74      a list of mount
    16e6:	65 64 20 64 72 69 76 65 73 20 6f 6e 65 20 70 65     ed drives one pe
    16f6:	72 20 6c 69 6e 65 0a 67 70 69 62 20 6d 6f 75 6e     r line.gpib moun
    1706:	74 20 41 4d 49 47 4f 7c 53 53 38 30 20 6d 6f 64     t AMIGO|SS80 mod
    1716:	65 6c 20 61 64 64 72 65 73 73 20 66 69 6c 65 0a     el address file.
    1726:	20 20 20 20 20 45 78 61 6d 70 6c 65 3a 20 67 70          Example: gp
    1736:	69 62 20 6d 6f 75 6e 74 20 39 31 32 31 20 20 36     ib mount 9121  6
    1746:	20 2f 61 6d 69 67 6f 36 2e 6c 69 66 0a 20 20 20      /amigo6.lif.   
    1756:	20 20 45 78 61 6d 70 6c 65 3a 20 67 70 69 62 20       Example: gpib 
    1766:	6d 6f 75 6e 74 20 39 31 33 34 44 20 32 20 2f 61     mount 9134D 2 /a
    1776:	6d 69 67 6f 32 2e 6c 69 66 0a 20 20 20 20 20 4e     migo2.lif.     N
    1786:	6f 74 65 3a 20 64 72 69 76 65 20 6d 6f 64 65 6c     ote: drive model
    1796:	20 6d 75 73 74 20 65 78 69 73 74 20 69 6e 20 68      must exist in h
    17a6:	70 64 69 72 2e 69 6e 69 20 5b 64 72 69 76 65 69     pdir.ini [drivei
    17b6:	6e 66 6f 5d 20 73 65 63 74 69 6f 6e 0a 67 70 69     nfo] section.gpi
    17c6:	62 20 6d 6f 75 6e 74 20 50 52 49 4e 54 45 52 20     b mount PRINTER 
    17d6:	61 64 64 72 65 73 73 0a 20 20 20 20 20 45 78 61     address.     Exa
    17e6:	6d 70 6c 65 3a 20 67 70 69 62 20 6d 6f 75 6e 74     mple: gpib mount
    17f6:	20 50 52 49 4e 54 45 52 20 35 0a 67 70 69 62 20      PRINTER 5.gpib 
    1806:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 20 20     umount address  
    1816:	20 20 20 45 78 61 6d 70 6c 65 3a 20 67 70 69 62        Example: gpib
    1826:	20 75 6d 6f 75 6e 74 20 36 0a 00                     umount 6..

00001831 <__c.4433>:
    1831:	67 70 69 62 20 20 68 65 6c 70 0a 00                 gpib  help..

0000183d <__c.4966>:
    183d:	0a 00                                               ..

0000183f <__c.4961>:
    183f:	4d 6f 75 6e 74 65 64 20 64 72 69 76 65 73 0a 00     Mounted drives..

0000184f <__c.4956>:
    184f:	50 52 49 4e 54 45 52 20 25 2d 38 73 20 25 32 64     PRINTER %-8s %2d
    185f:	0a 00                                               ..

00001861 <__c.4954>:
    1861:	41 4d 49 47 4f 20 20 20 25 2d 38 73 20 25 32 64     AMIGO   %-8s %2d
    1871:	20 25 73 0a 00                                       %s..

00001876 <__c.4952>:
    1876:	53 53 38 30 20 20 20 20 25 2d 38 73 20 25 32 64     SS80    %-8s %2d
    1886:	20 25 73 0a 00                                       %s..

0000188b <__c.4944>:
    188b:	45 78 70 65 63 74 65 64 20 41 4d 49 47 4f 20 6f     Expected AMIGO o
    189b:	72 20 53 53 38 30 20 6f 72 20 43 53 38 30 20 66     r SS80 or CS80 f
    18ab:	6f 72 20 5b 25 73 5d 0a 00                          or [%s]..

000018b4 <__c.4942>:
    18b4:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    18c4:	74 65 20 41 4d 49 47 4f 20 73 74 72 75 63 74 75     te AMIGO structu
    18d4:	72 65 20 66 6f 72 20 25 73 0a 00                    re for %s..

000018df <__c.4938>:
    18df:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    18ef:	74 65 20 53 53 38 30 20 73 74 72 75 63 74 75 72     te SS80 structur
    18ff:	65 20 66 6f 72 20 25 73 0a 00                       e for %s..

00001909 <__c.4934>:
    1909:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1919:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1929:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001931 <__c.4932>:
    1931:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1941:	74 65 20 50 52 49 4e 54 45 52 20 73 74 72 75 63     te PRINTER struc
    1951:	74 75 72 65 0a 00                                   ture..

00001957 <__c.4921>:
    1957:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 3a 5b     umount address:[
    1967:	25 64 5d 20 4e 4f 54 20 66 6f 75 6e 64 0a 00        %d] NOT found..

00001976 <__c.4919>:
    1976:	20 20 2d 20 61 64 64 72 65 73 73 20 69 73 20 74       - address is t
    1986:	68 65 20 64 65 76 69 63 65 20 61 64 64 72 65 73     he device addres
    1996:	73 0a 00                                            s..

00001999 <__c.4917>:
    1999:	20 20 75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73       umount address
    19a9:	0a 00                                               ..

000019ab <__c.4915>:
    19ab:	55 73 61 67 65 3a 0a 00                             Usage:..

000019b3 <__c.4879>:
    19b3:	20 20 20 20 6d 6f 75 6e 74 0a 00                        mount..

000019be <__c.4877>:
    19be:	44 69 73 70 6c 61 79 69 6e 67 20 6d 6f 75 6e 74     Displaying mount
    19ce:	65 64 20 64 72 69 76 65 73 0a 00                    ed drives..

000019d9 <__c.4875>:
    19d9:	0a 00                                               ..

000019db <__c.4873>:
    19db:	20 20 20 20 6d 6f 75 6e 74 20 50 52 49 4e 54 45         mount PRINTE
    19eb:	52 20 35 0a 00                                      R 5..

000019f0 <__c.4871>:
    19f0:	4d 6f 75 6e 74 69 6e 67 20 70 72 69 6e 74 65 72     Mounting printer
    1a00:	0a 00                                               ..

00001a02 <__c.4869>:
    1a02:	0a 00                                               ..

00001a04 <__c.4867>:
    1a04:	20 20 20 20 6d 6f 75 6e 74 20 39 31 33 34 44 20         mount 9134D 
    1a14:	33 20 73 73 38 30 2d 33 2e 6c 69 66 0a 00           3 ss80-3.lif..

00001a22 <__c.4865>:
    1a22:	20 20 20 20 6d 6f 75 6e 74 20 39 31 32 31 20 32         mount 9121 2
    1a32:	20 61 6d 69 67 6f 2d 32 32 2e 6c 69 66 0a 00         amigo-22.lif..

00001a41 <__c.4863>:
    1a41:	4d 6f 75 6e 74 69 6e 67 20 64 72 69 76 65 73 0a     Mounting drives.
	...

00001a52 <__c.4861>:
    1a52:	55 73 61 67 65 3a 20 0a 00                          Usage: ..

00001a5b <__c.4853>:
    1a5b:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001a63 <__c.4851>:
    1a63:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1a73:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001a7d <__c.4849>:
    1a7d:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1a8d:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1a9d:	0a 00                                               ..

00001a9f <__c.4847>:
    1a9f:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001aa7 <__c.4845>:
    1aa7:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1ab7:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001ac1 <__c.4843>:
    1ac1:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1ad1:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1ae1:	0a 00                                               ..

00001ae3 <__c.4823>:
    1ae3:	44 65 76 69 63 65 20 65 72 72 6f 72 73 20 2d 20     Device errors - 
    1af3:	72 65 6d 6f 76 69 6e 67 3a 20 00                    removing: .

00001afe <__c.4821>:
    1afe:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1b0e:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1b1e:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1b2e:	6f 20 32 35 36 0a 00                                o 256..

00001b35 <__c.4819>:
    1b35:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1b45:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1b55:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1b65:	20 32 35 36 0a 00                                    256..

00001b6b <__c.4813>:
    1b6b:	41 64 64 72 65 73 73 20 28 25 64 29 20 6f 75 74     Address (%d) out
    1b7b:	20 6f 66 20 72 61 6e 67 65 0a 00                     of range..

00001b86 <__c.4797>:
    1b86:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1b96:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1ba6:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001bae <__c.4791>:
    1bae:	68 70 64 69 72 20 69 6e 76 61 6c 69 64 20 74 79     hpdir invalid ty
    1bbe:	70 65 20 2d 20 4e 4f 54 20 41 4d 49 47 4f 20 6f     pe - NOT AMIGO o
    1bce:	66 20 53 53 38 30 0a 00                             f SS80..

00001bd6 <__c.4755>:
    1bd6:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1be6:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1bf6:	0a 00                                               ..

00001bf8 <__c.4747>:
    1bf8:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1c08:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1c18:	6c 6c 0a 00                                         ll..

00001c1c <__c.4726>:
    1c1c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c2c:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1c3c:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001c47 <__c.4724>:
    1c47:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c57:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1c67:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1c77:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001c7f <__c.4722>:
    1c7f:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c8f:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1c9f:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1caf:	3a 25 73 0a 00                                      :%s..

00001cb4 <__c.4720>:
    1cb4:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1cc4:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1cd4:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1ce4:	55 4c 4c 0a 00                                      ULL..

00001ce9 <__c.4718>:
    1ce9:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1cf9:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1d09:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1d19:	66 20 72 61 6e 67 65 0a 00                          f range..

00001d22 <__c.4716>:
    1d22:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1d32:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1d42:	6e 67 65 0a 00                                      nge..

00001d47 <__c.4677>:
    1d47:	0a 00                                               ..

00001d49 <__c.4672>:
    1d49:	0a 00                                               ..

00001d4b <__c.4670>:
    1d4b:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1d5b:	6c 64 0a 00                                         ld..

00001d5f <__c.4668>:
    1d5f:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1d6f:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001d7e <__c.4666>:
    1d7e:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001d88 <__c.4664>:
    1d88:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1d98:	6c 64 0a 00                                         ld..

00001d9c <__c.4662>:
    1d9c:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1dac:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001dbb <__c.4660>:
    1dbb:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001dc4 <__c.4657>:
    1dc4:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1dd4:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001de4 <__c.4648>:
    1de4:	0a 00                                               ..

00001de6 <__c.4643>:
    1de6:	0a 00                                               ..

00001de8 <__c.4641>:
    1de8:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001df1 <__c.4639>:
    1df1:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001dfb <__c.4637>:
    1dfb:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001e04 <__c.4634>:
    1e04:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1e14:	0a 00                                               ..

00001e16 <__c.4628>:
    1e16:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1e26:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1e36:	2a 2a 2a 2a 2a 0a 00                                *****..

00001e3d <__c.4626>:
    1e3d:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1e4d:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001e5a <__c.4624>:
    1e5a:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1e6a:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1e7a:	0a 00                                               ..

00001e7c <__c.4620>:
    1e7c:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1e8c:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1e9c:	0a 00                                               ..

00001e9e <__c.4617>:
    1e9e:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1eae:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1ebe:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ece <__c.4608>:
    1ece:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ede:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1eee:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001efd <__c.4605>:
    1efd:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1f0d:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1f1d:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001f2d <__c.4596>:
    1f2d:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1f3d:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1f4d:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f5b <__c.4588>:
    1f5b:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f6b:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1f7b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f89 <__c.4578>:
    1f89:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f99:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1fa9:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001fb5 <__c.4561>:
    1fb5:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1fc5:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1fd5:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1fe5:	0a 00                                               ..

00001fe7 <__c.4553>:
    1fe7:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ff7:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2007:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002015 <__c.4550>:
    2015:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2025:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2035:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002043 <__c.4542>:
    2043:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2053:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2063:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00002070 <__c.4532>:
    2070:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2080:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    2090:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

000020a1 <__c.4529>:
    20a1:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    20b1:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    20c1:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

000020cb <__c.4525>:
    20cb:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    20db:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    20eb:	0a 00                                               ..

000020ed <__c.4514>:
    20ed:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    20fd:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    210d:	0a 00                                               ..

0000210f <__c.4511>:
    210f:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    211f:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

0000212d <__c.4509>:
    212d:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

0000213a <__c.4488>:
    213a:	25 73 0a 00                                         %s..

0000213e <__c.4478>:
    213e:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

0000214a <__c.4467>:
    214a:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    215a:	6c 64 29 0a 00                                      ld)..

0000215f <__c.3648>:
    215f:	4d 6f 64 65 6c 3a 20 25 73 20 4e 4f 54 20 66 6f     Model: %s NOT fo
    216f:	75 6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69     und in hpdir.ini
    217f:	0a 00                                               ..

00002181 <__c.3643>:
    2181:	4d 6f 64 65 6c 3a 20 25 73 20 66 6f 75 6e 64 20     Model: %s found 
    2191:	69 6e 20 68 70 64 69 72 2e 69 6e 69 0a 00           in hpdir.ini..

0000219f <__c.3641>:
    219f:	25 73 20 25 73 0a 00                                %s %s..

000021a6 <__c.3637>:
    21a6:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    21b6:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

000021c3 <__c.4560>:
    21c3:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    21d3:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    21e3:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    21f3:	48 5d 0a 00                                         H]..

000021f7 <__c.4558>:
    21f7:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    2207:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    2217:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2227:	48 5d 0a 00                                         H]..

0000222b <__c.4556>:
    222b:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    223b:	74 5d 0a 00                                         t]..

0000223f <__c.4554>:
    223f:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

0000224e <__c.4552>:
    224e:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    225e:	74 65 5d 0a 00                                      te]..

00002263 <__c.4550>:
    2263:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2273:	61 74 65 5d 0a 00                                   ate]..

00002279 <__c.4548>:
    2279:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2289:	61 74 65 5d 0a 00                                   ate]..

0000228f <__c.4543>:
    228f:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    229f:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    22af:	5d 0a 00                                            ]..

000022b2 <__c.4529>:
    22b2:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000022c1 <__c.4527>:
    22c1:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    22d1:	5d 0a 00                                            ]..

000022d4 <__c.4520>:
    22d4:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

000022e0 <__c.4506>:
    22e0:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    22f0:	5d 0a 00                                            ]..

000022f3 <__c.4504>:
    22f3:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    2303:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

0000230d <__c.4497>:
    230d:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    231d:	48 5d 0a 00                                         H]..

00002321 <__c.4495>:
    2321:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    2331:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00002341 <__c.4490>:
    2341:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2351:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2361:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2371:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

0000237d <__c.4487>:
    237d:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    238d:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000239d <__c.4485>:
    239d:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    23ad:	29 5d 0a 00                                         )]..

000023b1 <__c.4483>:
    23b1:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    23c1:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    23d1:	28 25 64 29 5d 0a 00                                (%d)]..

000023d8 <__c.4481>:
    23d8:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    23e8:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000023f6 <__c.4479>:
    23f6:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    2406:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002413 <__c.4476>:
    2413:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2423:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2433:	44 4f 5d 0a 00                                      DO]..

00002438 <__c.4473>:
    2438:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2448:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002451 <__c.4471>:
    2451:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2461:	5d 0a 00                                            ]..

00002464 <__c.4462>:
    2464:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2474:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2484:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2494:	43 6f 64 65 73 5d 0a 00                             Codes]..

0000249c <__c.4459>:
    249c:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    24ac:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000024bc <__c.4457>:
    24bc:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    24cc:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    24dc:	5d 0a 00                                            ]..

000024df <__c.4455>:
    24df:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    24ef:	61 74 75 73 5d 0a 00                                atus]..

000024f6 <__c.4453>:
    24f6:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    2506:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

0000250f <__c.4451>:
    250f:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    251f:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000252a <__c.4449>:
    252a:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    253a:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00002549 <__c.4447>:
    2549:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2559:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00002567 <__c.4445>:
    2567:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002578 <__c.4443>:
    2578:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2588:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002594 <__c.4441>:
    2594:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    25a4:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000025b1 <__c.4439>:
    25b1:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    25c1:	2d 4f 50 5d 0a 00                                   -OP]..

000025c7 <__c.4437>:
    25c7:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25d7:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000025e8 <__c.4435>:
    25e8:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    25f8:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2608:	44 4f 5d 0a 00                                      DO]..

0000260d <__c.4433>:
    260d:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    261d:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00002627 <__c.4431>:
    2627:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    2637:	2d 4f 50 5d 0a 00                                   -OP]..

0000263d <__c.4429>:
    263d:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

0000264b <__c.4427>:
    264b:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    265b:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00002667 <__c.4425>:
    2667:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    2677:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002684 <__c.4423>:
    2684:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2694:	20 57 72 69 74 65 5d 0a 00                           Write]..

0000269d <__c.4420>:
    269d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    26ad:	20 52 65 61 64 5d 0a 00                              Read]..

000026b5 <__c.4418>:
    26b5:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    26c5:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000026ce <__c.4415>:
    26ce:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    26de:	25 64 29 5d 0a 00                                   %d)]..

000026e4 <__c.4413>:
    26e4:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    26f4:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000026fd <__c.4411>:
    26fd:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    270d:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    271d:	52 4f 52 5d 0a 00                                   ROR]..

00002723 <__c.4402>:
    2723:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2733:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

0000273d <__c.4397>:
    273d:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    274d:	76 61 6c 69 64 5d 0a 00                             valid]..

00002755 <__c.4392>:
    2755:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2765:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002774 <__c.4390>:
    2774:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2784:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002791 <__c.4388>:
    2791:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    27a1:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    27b1:	5d 0a 00                                            ]..

000027b4 <__c.4386>:
    27b4:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000027c5 <__c.4378>:
    27c5:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    27d5:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000027e0 <__c.4376>:
    27e0:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    27f0:	73 5d 0a 00                                         s]..

000027f4 <__c.4366>:
    27f4:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000027ff <__c.4364>:
    27ff:	25 73 3a 0a 00                                      %s:..

00002804 <__c.4339>:
    2804:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2814:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2824:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

0000282f <__c.4337>:
    282f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    283f:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    284f:	49 4e 49 53 48 5d 0a 00                             INISH]..

00002857 <__c.4333>:
    2857:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2867:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    2877:	58 48 29 5d 0a 00                                   XH)]..

0000287d <__c.4331>:
    287d:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    288d:	72 5d 0a 00                                         r]..

00002891 <__c.4327>:
    2891:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    28a1:	5d 0a 00                                            ]..

000028a4 <__c.4325>:
    28a4:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    28b4:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    28c4:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000028cd <__c.4313>:
    28cd:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    28dd:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    28ed:	62 79 74 65 73 5d 0a 00                             bytes]..

000028f5 <__c.4311>:
    28f5:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2905:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2915:	53 48 5d 0a 00                                      SH]..

0000291a <__c.4306>:
    291a:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    292a:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002933 <__c.4304>:
    2933:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2943:	45 72 72 6f 72 5d 0a 00                             Error]..

0000294b <__c.4302>:
    294b:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    295b:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002969 <__c.4300>:
    2969:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2979:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2989:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002991 <__c.4283>:
    2991:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    29a1:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000029ad <__c.4267>:
    29ad:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    29bd:	5d 0a 00                                            ]..

000029c0 <__c.4383>:
    29c0:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29d0:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    29e0:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000029e9 <__c.4380>:
    29e9:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    29f9:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    2a09:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002a14 <__c.4377>:
    2a14:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a24:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2a34:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002a3d <__c.4372>:
    2a3d:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2a4d:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002a5d <__c.4369>:
    2a5d:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2a6d:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002a79 <__c.4366>:
    2a79:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2a89:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2a99:	0a 00                                               ..

00002a9b <__c.4363>:
    2a9b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2aab:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002aba <__c.4360>:
    2aba:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2aca:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002adb <__c.4357>:
    2adb:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2aeb:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002afb <__c.4353>:
    2afb:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2b0b:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2b1b:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2b2b:	0a 00                                               ..

00002b2d <__c.4348>:
    2b2d:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002b3d <__c.4345>:
    2b3d:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2b4d:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002b5c <__c.4343>:
    2b5c:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b6c:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2b7c:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002b87 <__c.4341>:
    2b87:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2b97:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002ba7 <__c.4339>:
    2ba7:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2bb7:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2bc7:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002bd0 <__c.4337>:
    2bd0:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2be0:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002bec <__c.4335>:
    2bec:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2bfc:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2c0c:	0a 00                                               ..

00002c0e <__c.4333>:
    2c0e:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002c1e <__c.4330>:
    2c1e:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2c2e:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002c3f <__c.4328>:
    2c3f:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2c4f:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2c5f:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002c68 <__c.4326>:
    2c68:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2c78:	36 5d 0a 00                                         6]..

00002c7c <__c.4323>:
    2c7c:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2c8c:	35 5d 0a 00                                         5]..

00002c90 <__c.4320>:
    2c90:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2ca0:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002cb0 <__c.4317>:
    2cb0:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2cc0:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2cd0:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002cdf <__c.4315>:
    2cdf:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2cef:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002d00 <__c.4313>:
    2d00:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2d10:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002d21 <__c.4311>:
    2d21:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2d31:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2d41:	0a 00                                               ..

00002d43 <__c.4309>:
    2d43:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2d53:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2d63:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2d73:	0a 00                                               ..

00002d75 <__c.4297>:
    2d75:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2d85:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2d95:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2da5:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2db5:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002dc6 <__c.4295>:
    2dc6:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2dd6:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2de6:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2df6:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e06:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e16 <__c.4293>:
    2e16:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2e26:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e36:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2e46:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e56:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e66 <__c.4291>:
    2e66:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2e76:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e86:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2e96:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2ea6:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002eb6 <__c.4286>:
    2eb6:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2ec6:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2ed6:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2ee6:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2ef6:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2f06:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2f16:	58 48 5d 0a 00                                      XH]..

00002f1b <__c.4284>:
    2f1b:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2f2b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f3b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f4b:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f5b:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f6b:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f7b:	30 32 58 48 5d 0a 00                                02XH]..

00002f82 <__c.4282>:
    2f82:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2f92:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2fa2:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2fb2:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2fc2:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2fd2:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2fe2:	30 32 58 48 5d 0a 00                                02XH]..

00002fe9 <__c.4280>:
    2fe9:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2ff9:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    3009:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    3019:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    3029:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    3039:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    3049:	30 32 58 48 5d 0a 00                                02XH]..

00003050 <__c.4273>:
    3050:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

0000305f <__c.4260>:
    305f:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

0000306c <__c.4258>:
    306c:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    307c:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00003086 <__c.4251>:
    3086:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    3096:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

000030a6 <__c.4249>:
    30a6:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    30b6:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

000030c5 <__c.4247>:
    30c5:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    30d5:	0a 00                                               ..

000030d7 <__c.4240>:
    30d7:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30e7:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030f1 <__c.4234>:
    30f1:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    3101:	0a 00                                               ..

00003103 <__c.4228>:
    3103:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    3113:	6e 65 5d 0a 00                                      ne]..

00003118 <__c.4224>:
    3118:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00003128 <__c.4183>:
    3128:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    3138:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    3148:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00003153 <__c.4213>:
    3153:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    3163:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    3173:	25 30 34 58 48 5d 0a 00                             %04XH]..

0000317b <__c.4190>:
    317b:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    318b:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00003194 <__c.4176>:
    3194:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    31a4:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000031ae <__c.4174>:
    31ae:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    31be:	75 73 5d 0a 00                                      us]..

000031c3 <__c.4168>:
    31c3:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    31d3:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000031dd <__c.4166>:
    31dd:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    31ed:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

000031fb <__c.4160>:
    31fb:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    320b:	74 61 74 75 73 5d 0a 00                             tatus]..

00003213 <__c.4145>:
    3213:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3223:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

0000322d <__c.4143>:
    322d:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    323d:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00003249 <__c.4138>:
    3249:	25 30 38 6c 64 0d 00                                %08ld..

00003250 <__c.4132>:
    3250:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3260:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003271 <__c.4126>:
    3271:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

0000327f <__c.4124>:
    327f:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    328f:	69 74 65 0a 00                                      ite..

00003294 <__c.4118>:
    3294:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000032a0 <__c.4116>:
    32a0:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    32b0:	6f 3a 25 73 0a 00                                   o:%s..

000032b6 <__c.4114>:
    32b6:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    32c6:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    32d6:	74 00                                               t.

000032d8 <__c.4555>:
    32d8:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    32e8:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

000032f8 <__c.4553>:
    32f8:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3308:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00003318 <__c.4551>:
    3318:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3328:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    3338:	30 0a 00                                            0..

0000333b <__c.4549>:
    333b:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    334b:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    335b:	70 74 79 0a 00                                      pty..

00003360 <__c.4547>:
    3360:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3370:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3380:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003389 <__c.4534>:
    3389:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3399:	20 25 31 30 73 0a 00                                 %10s..

000033a0 <__c.4532>:
    33a0:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    33b0:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    33c0:	74 20 66 6f 75 6e 64 0a 00                          t found..

000033c9 <__c.4530>:
    33c9:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33d9:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    33e9:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    33f9:	74 65 72 73 0a 00                                   ters..

000033ff <__c.4528>:
    33ff:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    340f:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    341f:	65 6d 70 74 79 0a 00                                empty..

00003426 <__c.4526>:
    3426:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3436:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3446:	65 6d 70 74 79 0a 00                                empty..

0000344d <__c.4524>:
    344d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    345d:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    346d:	20 65 6d 70 74 79 0a 00                              empty..

00003475 <__c.4515>:
    3475:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003484 <__c.4513>:
    3484:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3494:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    34a4:	20 66 6f 75 6e 64 0a 00                              found..

000034ac <__c.4511>:
    34ac:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34bc:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000034cb <__c.4509>:
    34cb:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34db:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000034eb <__c.4507>:
    34eb:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34fb:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    350b:	70 74 79 0a 00                                      pty..

00003510 <__c.4499>:
    3510:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000351e <__c.4494>:
    351e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000352c <__c.4492>:
    352c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    353c:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    354c:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000355c <__c.4490>:
    355c:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    356c:	73 0a 00                                            s..

0000356f <__c.4488>:
    356f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    357f:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    358f:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000359e <__c.4486>:
    359e:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    35ae:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000035ba <__c.4484>:
    35ba:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    35ca:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000035d5 <__c.4482>:
    35d5:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    35e5:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000035f5 <__c.4465>:
    35f5:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003603 <__c.4460>:
    3603:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003611 <__c.4458>:
    3611:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3621:	73 0a 00                                            s..

00003624 <__c.4456>:
    3624:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3634:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000363c <__c.4439>:
    363c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000364a <__c.4436>:
    364a:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    365a:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    366a:	20 65 72 72 6f 72 0a 00                              error..

00003672 <__c.4428>:
    3672:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003680 <__c.4426>:
    3680:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3690:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    36a0:	20 65 72 72 6f 72 0a 00                              error..

000036a8 <__c.4423>:
    36a8:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    36b8:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    36c8:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    36d8:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    36e8:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    36f8:	30 32 58 48 0a 00                                   02XH..

000036fe <__c.4421>:
    36fe:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    370e:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    371e:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    372e:	20 25 64 0a 00                                       %d..

00003733 <__c.4417>:
    3733:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003743 <__c.4415>:
    3743:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3753:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3763:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3773:	30 78 45 30 31 33 0a 00                             0xE013..

0000377b <__c.4413>:
    377b:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    378b:	6e 64 3a 25 73 0a 00                                nd:%s..

00003792 <__c.4411>:
    3792:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    37a2:	75 6e 64 3a 25 73 0a 00                             und:%s..

000037aa <__c.4387>:
    37aa:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000037b8 <__c.4385>:
    37b8:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    37c8:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037d1 <__c.4383>:
    37d1:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    37e1:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037ea <__c.4381>:
    37ea:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    37fa:	20 20 25 34 64 0a 00                                  %4d..

00003801 <__c.4379>:
    3801:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3811:	20 20 20 25 73 0a 00                                   %s..

00003818 <__c.4377>:
    3818:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3828:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3838:	77 72 69 74 65 0a 00                                write..

0000383f <__c.4375>:
    383f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    384f:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    385f:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000386f <__c.4373>:
    386f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    387f:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    388f:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000389e <__c.4371>:
    389e:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38ae:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38be:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000038ce <__c.4369>:
    38ce:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38de:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38ee:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000038fd <__c.4367>:
    38fd:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    390d:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    391d:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000392b <__c.4365>:
    392b:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    393b:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    394b:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    395b:	79 0a 00                                            y..

0000395e <__c.4351>:
    395e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000396c <__c.4349>:
    396c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000397a <__c.4344>:
    397a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003988 <__c.4327>:
    3988:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3998:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    39a8:	25 64 0a 00                                         %d..

000039ac <__c.4310>:
    39ac:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    39bc:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    39cc:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    39dc:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000039e5 <__c.4296>:
    39e5:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39f5:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3a05:	62 69 67 0a 00                                      big..

00003a0a <__c.4294>:
    3a0a:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3a1a:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3a2a:	63 74 65 72 73 0a 00                                cters..

00003a31 <__c.4287>:
    3a31:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3a41:	73 0a 00                                            s..

00003a44 <__c.4285>:
    3a44:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3a54:	73 0a 00                                            s..

00003a57 <__c.4283>:
    3a57:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3a67:	73 0a 00                                            s..

00003a6a <__c.4281>:
    3a6a:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003a7b <__c.4279>:
    3a7b:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003a88 <__c.4277>:
    3a88:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003a94 <__c.4275>:
    3a94:	0a 00                                               ..

00003a96 <__c.4272>:
    3a96:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3aa6:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3ab6:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003ac6 <__c.4270>:
    3ac6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ad6:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ae6:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3af6:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3b06:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003b12 <__c.4267>:
    3b12:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3b22:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3b32:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3b42:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003b52 <__c.4265>:
    3b52:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3b62:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003b69 <__c.4255>:
    3b69:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b79:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3b89:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3b99:	64 0a 00                                            d..

00003b9c <__c.4253>:
    3b9c:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3bac:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3bbc:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3bcc:	64 0a 00                                            d..

00003bcf <__c.4251>:
    3bcf:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3bdf:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3bef:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3bff:	69 6c 65 64 0a 00                                   iled..

00003c05 <__c.4249>:
    3c05:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3c15:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3c25:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3c35:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003c44 <__c.4236>:
    3c44:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3c54:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3c64:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3c74:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3c84:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003c95 <__c.4233>:
    3c95:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3ca5:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3cb5:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003cbe <__c.4231>:
    3cbe:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3cce:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3cde:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3cee:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003cf6 <__c.4219>:
    3cf6:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3d06:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3d16:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3d26:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3d36:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003d43 <__c.4194>:
    3d43:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3d53:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003d63 <__c.4185>:
    3d63:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3d73:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3d83:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3d93:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003d9d <__c.4166>:
    3d9d:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003daa <__c.4161>:
    3daa:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003db7 <__c.4156>:
    3db7:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003dc4 <__c.4148>:
    3dc4:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003dd1 <__c.4146>:
    3dd1:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3de1:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3df1:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3e01:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3e11:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3e21:	25 6c 64 0a 00                                      %ld..

00003e26 <__c.4130>:
    3e26:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e36:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3e46:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003e52 <__c.4128>:
    3e52:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e62:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e72:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003e7d <__c.4126>:
    3e7d:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e8d:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3e9d:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ead:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3ebd:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003ec8 <__c.4124>:
    3ec8:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ed8:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ee8:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ef8:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3f08:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003f13 <__c.4122>:
    3f13:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f23:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3f33:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003f41 <__c.4120>:
    3f41:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f51:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3f61:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3f71:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003f82 <__c.4118>:
    3f82:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f92:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3fa2:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3fb2:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3fc2:	58 68 0a 00                                         Xh..

00003fc6 <__c.4116>:
    3fc6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3fd6:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003fe7 <__c.4110>:
    3fe7:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ff7:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    4007:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00004013 <__c.4108>:
    4013:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4023:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    4033:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00004042 <__c.4106>:
    4042:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4052:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    4062:	25 6c 64 0a 00                                      %ld..

00004067 <__c.4104>:
    4067:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4077:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4087:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    4097:	62 65 20 7a 65 72 6f 0a 00                          be zero..

000040a0 <__c.4102>:
    40a0:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40b0:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    40c0:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    40d0:	62 65 20 7a 65 72 6f 0a 00                          be zero..

000040d9 <__c.4100>:
    40d9:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    40e9:	58 48 20 3e 20 31 0a 00                             XH > 1..

000040f1 <__c.4098>:
    40f1:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4101:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    4111:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    4121:	64 20 31 30 30 30 48 0a 00                          d 1000H..

0000412a <__c.4096>:
    412a:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    413a:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00004149 <__c.4089>:
    4149:	0a 00                                               ..

0000414b <__c.4087>:
    414b:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    415b:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004165 <__c.4085>:
    4165:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4175:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00004181 <__c.4083>:
    4181:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    4191:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000419e <__c.4081>:
    419e:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    41ae:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000041bb <__c.4079>:
    41bb:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    41cb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041d8 <__c.4077>:
    41d8:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    41e8:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

000041f4 <__c.4075>:
    41f4:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4204:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004210 <__c.4073>:
    4210:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    4220:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000422a <__c.4071>:
    422a:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    423a:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004244 <__c.4069>:
    4244:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4254:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004260 <__c.4067>:
    4260:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4270:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000427c <__c.4065>:
    427c:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    428c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004299 <__c.4063>:
    4299:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    42a9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042b6 <__c.4061>:
    42b6:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    42c6:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000042d2 <__c.4059>:
    42d2:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    42e2:	20 20 20 20 20 20 25 73 0a 00                             %s..

000042ec <__c.4057>:
    42ec:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    42fc:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004309 <__c.4055>:
    4309:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    4319:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004326 <__c.4053>:
    4326:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4336:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004343 <__c.4051>:
    4343:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4353:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004360 <__c.4049>:
    4360:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4370:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000437d <__c.4047>:
    437d:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    438d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000439a <__c.4045>:
    439a:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    43aa:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000043b7 <__c.4043>:
    43b7:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    43c7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000043d4 <__c.4041>:
    43d4:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    43e4:	20 20 20 20 20 20 25 73 0a 00                             %s..

000043ee <__c.4039>:
    43ee:	0a 25 73 0a 00                                      .%s..

000043f3 <__c.3916>:
    43f3:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4403:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4413:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4423:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004430 <__c.3907>:
    4430:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4440:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4450:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4460:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000446c <__c.3898>:
    446c:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    447c:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000448d <__c.3891>:
    448d:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    449d:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000044a6 <__c.3885>:
    44a6:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    44b6:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    44c6:	25 73 5d 0a 00                                      %s]..

000044cb <__c.3873>:
    44cb:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    44db:	6f 69 6e 74 65 72 0a 00                             ointer..

000044e3 <__c.3868>:
    44e3:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    44f3:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4503:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000450c <__c.3862>:
    450c:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    451c:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

00004529 <__c.3860>:
    4529:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4539:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

0000454a <__c.3847>:
    454a:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    455a:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    456a:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    457a:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    458a:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    459a:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    45aa:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    45ba:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    45ca:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    45da:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    45ea:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    45fa:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    460a:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    461a:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    462a:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    463a:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    464a:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    465a:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    466a:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    467a:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    468a:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    469a:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    46aa:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    46ba:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    46ca:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    46da:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    46ea:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    46fa:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    470a:	67 0a 0a 00                                         g...

0000470e <__c.3845>:
    470e:	6c 69 66 20 20 20 68 65 6c 70 0a 00                 lif   help..

0000471a <__c.4636>:
    471a:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    472a:	53 4b 0a 00                                         SK..

0000472e <__c.4634>:
    472e:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    473e:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004748 <__c.4632>:
    4748:	25 2d 31 36 73 00                                   %-16s.

0000474e <__c.4630>:
    474e:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    475e:	30 34 78 48 0a 00                                   04xH..

00004764 <__c.4628>:
    4764:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4774:	64 6f 6e 65 0a 00                                   done..

0000477a <__c.4626>:
    477a:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    478a:	6f 6e 65 0a 00                                      one..

0000478f <__c.4624>:
    478f:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    479f:	61 6c 69 7a 65 64 0a 00                             alized..

000047a7 <__c.4622>:
    47a7:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    47b7:	0a 00                                               ..

000047b9 <__c.4620>:
    47b9:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    47c9:	7a 65 64 0a 00                                      zed..

000047ce <__c.4618>:
    47ce:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    47de:	69 7a 65 64 0a 00                                   ized..

000047e4 <__c.4616>:
    47e4:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000047f5 <__c.4614>:
    47f5:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4805:	20 73 74 61 72 74 0a 00                              start..

0000480d <__c.4612>:
    480d:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    481d:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    482d:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

0000483b <__c.4610>:
    483b:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000484a <__c.4608>:
    484a:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    485a:	0a 00                                               ..

0000485c <__c.4606>:
    485c:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    486c:	20 62 75 73 0a 00                                    bus..

00004872 <__c.4604>:
    4872:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    4882:	20 62 75 73 0a 00                                    bus..

00004888 <__c.4602>:
    4888:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4898:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000048a2 <__c.4600>:
    48a2:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    48b2:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000048bc <__c.4598>:
    48bc:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    48cc:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    48dc:	35 64 69 73 6b 0a 00                                5disk..

000048e3 <__c.4596>:
    48e3:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000048f3 <__c.4594>:
    48f3:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4903:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004910 <__c.4592>:
    4910:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4920:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000492f <__c.4590>:
    492f:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    493f:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    494f:	3a 20 25 6c 64 0a 00                                : %ld..

00004956 <__c.4588>:
    4956:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004967 <__c.4586>:
    4967:	53 74 61 72 74 0a 00                                Start..

0000496e <__c.4578>:
    496e:	25 2d 31 36 73 00                                   %-16s.

00004974 <__c.4576>:
    4974:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

00004985 <__c.4568>:
    4985:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

00004992 <__c.4566>:
    4992:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    49a2:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

000049ab <__c.4564>:
    49ab:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

000049bc <__c.4562>:
    49bc:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

000049cc <__c.4560>:
    49cc:	4f 4b 0a 00                                         OK..

000049d0 <__c.4552>:
    49d0:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    49e0:	20 25 73 0a 00                                       %s..

000049e5 <__c.4547>:
    49e5:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

000049ee <__c.4545>:
    49ee:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    49fe:	20 25 64 0a 00                                       %d..

00004a03 <__c.4543>:
    4a03:	0a 3e 00                                            .>.

00004a06 <__c.4530>:
    4a06:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4a16:	42 42 0a 68 65 6c 70 0a 64 69 72 20 64 69 72 65     BB.help.dir dire
    4a26:	63 74 6f 72 69 65 73 20 6f 72 20 66 69 6c 65 20     ctories or file 
    4a36:	6c 69 73 74 0a 69 6e 70 75 74 20 20 20 2d 20 74     list.input   - t
    4a46:	6f 67 67 6c 65 20 69 6e 70 75 74 20 64 65 62 75     oggle input debu
    4a56:	67 67 69 6e 67 0a 6d 65 6d 20 20 20 20 20 2d 20     gging.mem     - 
    4a66:	64 69 73 70 6c 61 79 20 66 72 65 65 20 6d 65 6d     display free mem
    4a76:	6f 72 79 0a 72 65 73 65 74 20 20 20 2d 20 72 65     ory.reset   - re
    4a86:	73 65 74 20 65 6d 75 6c 61 74 6f 72 0a 73 65 74     set emulator.set
    4a96:	64 61 74 65 20 2d 20 73 65 74 20 64 61 74 65 0a     date - set date.
    4aa6:	74 69 6d 65 20 20 20 20 2d 20 64 69 73 70 6c 61     time    - displa
    4ab6:	79 20 63 75 72 72 65 6e 74 20 74 69 6d 65 0a 0a     y current time..
	...

00004ac7 <__c.4523>:
    4ac7:	25 2d 31 36 73 00                                   %-16s.

00004acd <__c.4521>:
    4acd:	25 2d 31 36 73 00                                   %-16s.

00004ad3 <__c.4514>:
    4ad3:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4ae3:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004aed <__c.4512>:
    4aed:	25 2d 31 36 73 00                                   %-16s.

00004af3 <__c.4510>:
    4af3:	25 2d 31 36 73 00                                   %-16s.

00004af9 <__c.4508>:
    4af9:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4b09:	69 6c 65 64 0a 00                                   iled..

00004b0f <__c.4506>:
    4b0f:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4b1f:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004b2d <__c.4500>:
    4b2d:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4b3d:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004b47 <__c.4494>:
    4b47:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4b57:	3a 25 30 32 64 00                                   :%02d.

00004b5d <__c.4480>:
    4b5d:	0a 00                                               ..

00004b5f <__c.4478>:
    4b5f:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4b6f:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004b79 <__c.4476>:
    4b79:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4b89:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004b93 <__c.4474>:
    4b93:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4ba3:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4bb3:	35 64 69 73 6b 0a 00                                5disk..

00004bba <__c.4472>:
    4bba:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004bca <__c.4470>:
    4bca:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4bda:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004be7 <__c.4468>:
    4be7:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4bf7:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004c06 <__c.4466>:
    4c06:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4c16:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4c26:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

00004c36 <__ctors_end>:
    4c36:	11 24       	eor	r1, r1
    4c38:	1f be       	out	0x3f, r1	; 63
    4c3a:	cf ef       	ldi	r28, 0xFF	; 255
    4c3c:	d0 e4       	ldi	r29, 0x40	; 64
    4c3e:	de bf       	out	0x3e, r29	; 62
    4c40:	cd bf       	out	0x3d, r28	; 61

00004c42 <__do_copy_data>:
    4c42:	17 e1       	ldi	r17, 0x17	; 23
    4c44:	a0 e0       	ldi	r26, 0x00	; 0
    4c46:	b1 e0       	ldi	r27, 0x01	; 1
    4c48:	ee e2       	ldi	r30, 0x2E	; 46
    4c4a:	f6 ed       	ldi	r31, 0xD6	; 214
    4c4c:	01 e0       	ldi	r16, 0x01	; 1
    4c4e:	0b bf       	out	0x3b, r16	; 59
    4c50:	02 c0       	rjmp	.+4      	; 0x4c56 <__do_copy_data+0x14>
    4c52:	07 90       	elpm	r0, Z+
    4c54:	0d 92       	st	X+, r0
    4c56:	ae 34       	cpi	r26, 0x4E	; 78
    4c58:	b1 07       	cpc	r27, r17
    4c5a:	d9 f7       	brne	.-10     	; 0x4c52 <__do_copy_data+0x10>

00004c5c <__do_clear_bss>:
    4c5c:	20 e2       	ldi	r18, 0x20	; 32
    4c5e:	ae e4       	ldi	r26, 0x4E	; 78
    4c60:	b7 e1       	ldi	r27, 0x17	; 23
    4c62:	01 c0       	rjmp	.+2      	; 0x4c66 <.do_clear_bss_start>

00004c64 <.do_clear_bss_loop>:
    4c64:	1d 92       	st	X+, r1

00004c66 <.do_clear_bss_start>:
    4c66:	a0 33       	cpi	r26, 0x30	; 48
    4c68:	b2 07       	cpc	r27, r18
    4c6a:	e1 f7       	brne	.-8      	; 0x4c64 <.do_clear_bss_loop>
    4c6c:	0e 94 b0 e4 	call	0x1c960	; 0x1c960 <main>
    4c70:	0c 94 15 eb 	jmp	0x1d62a	; 0x1d62a <_exit>

00004c74 <__bad_interrupt>:
    4c74:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004c78 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4c78:	e8 2f       	mov	r30, r24
    4c7a:	e6 95       	lsr	r30
    4c7c:	e6 95       	lsr	r30
    4c7e:	e6 95       	lsr	r30
    4c80:	93 e0       	ldi	r25, 0x03	; 3
    4c82:	e9 9f       	mul	r30, r25
    4c84:	f0 01       	movw	r30, r0
    4c86:	11 24       	eor	r1, r1
    4c88:	32 a1       	ldd	r19, Z+34	; 0x22
    4c8a:	28 2f       	mov	r18, r24
    4c8c:	27 70       	andi	r18, 0x07	; 7
    4c8e:	81 e0       	ldi	r24, 0x01	; 1
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	01 c0       	rjmp	.+2      	; 0x4c96 <chip_select+0x1e>
    4c94:	88 0f       	add	r24, r24
    4c96:	2a 95       	dec	r18
    4c98:	ea f7       	brpl	.-6      	; 0x4c94 <chip_select+0x1c>
    4c9a:	98 2f       	mov	r25, r24
    4c9c:	90 95       	com	r25
    4c9e:	93 23       	and	r25, r19
    4ca0:	92 a3       	std	Z+34, r25	; 0x22
    4ca2:	91 a1       	ldd	r25, Z+33	; 0x21
    4ca4:	89 2b       	or	r24, r25
    4ca6:	81 a3       	std	Z+33, r24	; 0x21
    4ca8:	08 95       	ret

00004caa <chip_deselect>:
    4caa:	e8 2f       	mov	r30, r24
    4cac:	e6 95       	lsr	r30
    4cae:	e6 95       	lsr	r30
    4cb0:	e6 95       	lsr	r30
    4cb2:	93 e0       	ldi	r25, 0x03	; 3
    4cb4:	e9 9f       	mul	r30, r25
    4cb6:	f0 01       	movw	r30, r0
    4cb8:	11 24       	eor	r1, r1
    4cba:	32 a1       	ldd	r19, Z+34	; 0x22
    4cbc:	28 2f       	mov	r18, r24
    4cbe:	27 70       	andi	r18, 0x07	; 7
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	01 c0       	rjmp	.+2      	; 0x4cc8 <chip_deselect+0x1e>
    4cc6:	88 0f       	add	r24, r24
    4cc8:	2a 95       	dec	r18
    4cca:	ea f7       	brpl	.-6      	; 0x4cc6 <chip_deselect+0x1c>
    4ccc:	93 2f       	mov	r25, r19
    4cce:	98 2b       	or	r25, r24
    4cd0:	92 a3       	std	Z+34, r25	; 0x22
    4cd2:	91 a1       	ldd	r25, Z+33	; 0x21
    4cd4:	89 2b       	or	r24, r25
    4cd6:	81 a3       	std	Z+33, r24	; 0x21
    4cd8:	08 95       	ret

00004cda <chip_select_init>:
    4cda:	e7 cf       	rjmp	.-50     	; 0x4caa <chip_deselect>
    4cdc:	08 95       	ret

00004cde <spi_end>:
    4cde:	cf 93       	push	r28
    4ce0:	ad b7       	in	r26, 0x3d	; 61
    4ce2:	be b7       	in	r27, 0x3e	; 62
    4ce4:	17 97       	sbiw	r26, 0x07	; 7
    4ce6:	0f b6       	in	r0, 0x3f	; 63
    4ce8:	f8 94       	cli
    4cea:	be bf       	out	0x3e, r27	; 62
    4cec:	0f be       	out	0x3f, r0	; 63
    4cee:	ad bf       	out	0x3d, r26	; 61
    4cf0:	c8 2f       	mov	r28, r24
    4cf2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4cf6:	8c 17       	cp	r24, r28
    4cf8:	99 f0       	breq	.+38     	; 0x4d20 <spi_end+0x42>
    4cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    4cfc:	89 f0       	breq	.+34     	; 0x4d20 <spi_end+0x42>
    4cfe:	2c 2f       	mov	r18, r28
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	ed b7       	in	r30, 0x3d	; 61
    4d04:	fe b7       	in	r31, 0x3e	; 62
    4d06:	37 83       	std	Z+7, r19	; 0x07
    4d08:	26 83       	std	Z+6, r18	; 0x06
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	95 83       	std	Z+5, r25	; 0x05
    4d0e:	84 83       	std	Z+4, r24	; 0x04
    4d10:	82 ec       	ldi	r24, 0xC2	; 194
    4d12:	91 e0       	ldi	r25, 0x01	; 1
    4d14:	a0 e0       	ldi	r26, 0x00	; 0
    4d16:	81 83       	std	Z+1, r24	; 0x01
    4d18:	92 83       	std	Z+2, r25	; 0x02
    4d1a:	a3 83       	std	Z+3, r26	; 0x03
    4d1c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    4d20:	8c 2f       	mov	r24, r28
    4d22:	c3 df       	rcall	.-122    	; 0x4caa <chip_deselect>
    4d24:	8f ef       	ldi	r24, 0xFF	; 255
    4d26:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4d2a:	ad b7       	in	r26, 0x3d	; 61
    4d2c:	be b7       	in	r27, 0x3e	; 62
    4d2e:	17 96       	adiw	r26, 0x07	; 7
    4d30:	0f b6       	in	r0, 0x3f	; 63
    4d32:	f8 94       	cli
    4d34:	be bf       	out	0x3e, r27	; 62
    4d36:	0f be       	out	0x3f, r0	; 63
    4d38:	ad bf       	out	0x3d, r26	; 61
    4d3a:	cf 91       	pop	r28
    4d3c:	08 95       	ret

00004d3e <spi_TX_buffer>:
    4d3e:	cd c4       	rjmp	.+2458   	; 0x56da <SPI0_TX>
    4d40:	08 95       	ret

00004d42 <spi_RX_buffer>:
    4d42:	f5 c4       	rjmp	.+2538   	; 0x572e <SPI0_RX>
    4d44:	08 95       	ret

00004d46 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4d46:	a1 e0       	ldi	r26, 0x01	; 1
    4d48:	b0 e0       	ldi	r27, 0x00	; 0
    4d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    4d4c:	f6 e2       	ldi	r31, 0x26	; 38
    4d4e:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    4d52:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4d54:	61 e0       	ldi	r22, 0x01	; 1
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	ce 01       	movw	r24, r28
    4d5a:	01 96       	adiw	r24, 0x01	; 1
    4d5c:	be d4       	rcall	.+2428   	; 0x56da <SPI0_TX>
#endif
}
    4d5e:	21 96       	adiw	r28, 0x01	; 1
    4d60:	e2 e0       	ldi	r30, 0x02	; 2
    4d62:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00004d66 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4d66:	cf 92       	push	r12
    4d68:	df 92       	push	r13
    4d6a:	ef 92       	push	r14
    4d6c:	ff 92       	push	r15
    4d6e:	6b 01       	movw	r12, r22
    4d70:	7c 01       	movw	r14, r24
    4d72:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4d74:	9a df       	rcall	.-204    	; 0x4caa <chip_deselect>
    _cs_pin = 0xff;
    4d76:	8f ef       	ldi	r24, 0xFF	; 255
    4d78:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4d7c:	c7 01       	movw	r24, r14
    4d7e:	b6 01       	movw	r22, r12
    4d80:	7f d4       	rcall	.+2302   	; 0x5680 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4d82:	80 e0       	ldi	r24, 0x00	; 0
    4d84:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4d86:	3c d4       	rcall	.+2168   	; 0x5600 <SPI0_Mode>
    4d88:	8f ef       	ldi	r24, 0xFF	; 255
    4d8a:	dd df       	rcall	.-70     	; 0x4d46 <spi_TX>
    _spi_clock = clock;
    4d8c:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4d90:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4d94:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4d98:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4d9c:	ff 90       	pop	r15
    4d9e:	ef 90       	pop	r14
    4da0:	df 90       	pop	r13
    4da2:	cf 90       	pop	r12
    4da4:	08 95       	ret

00004da6 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4da6:	cf 92       	push	r12
    4da8:	df 92       	push	r13
    4daa:	ef 92       	push	r14
    4dac:	ff 92       	push	r15
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	ad b7       	in	r26, 0x3d	; 61
    4db4:	be b7       	in	r27, 0x3e	; 62
    4db6:	17 97       	sbiw	r26, 0x07	; 7
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	f8 94       	cli
    4dbc:	be bf       	out	0x3e, r27	; 62
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	ad bf       	out	0x3d, r26	; 61
    4dc2:	6b 01       	movw	r12, r22
    4dc4:	7c 01       	movw	r14, r24
    4dc6:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4dc8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4dcc:	8f 3f       	cpi	r24, 0xFF	; 255
    4dce:	79 f0       	breq	.+30     	; 0x4dee <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4dd0:	ed b7       	in	r30, 0x3d	; 61
    4dd2:	fe b7       	in	r31, 0x3e	; 62
    4dd4:	46 83       	std	Z+6, r20	; 0x06
    4dd6:	d7 83       	std	Z+7, r29	; 0x07
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	95 83       	std	Z+5, r25	; 0x05
    4ddc:	84 83       	std	Z+4, r24	; 0x04
    4dde:	80 ee       	ldi	r24, 0xE0	; 224
    4de0:	91 e0       	ldi	r25, 0x01	; 1
    4de2:	a0 e0       	ldi	r26, 0x00	; 0
    4de4:	81 83       	std	Z+1, r24	; 0x01
    4de6:	92 83       	std	Z+2, r25	; 0x02
    4de8:	a3 83       	std	Z+3, r26	; 0x03
    4dea:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4dee:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4df2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4df6:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4dfa:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4dfe:	8c 15       	cp	r24, r12
    4e00:	9d 05       	cpc	r25, r13
    4e02:	ae 05       	cpc	r26, r14
    4e04:	bf 05       	cpc	r27, r15
    4e06:	21 f0       	breq	.+8      	; 0x4e10 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4e08:	ae 01       	movw	r20, r28
    4e0a:	c7 01       	movw	r24, r14
    4e0c:	b6 01       	movw	r22, r12
    4e0e:	ab df       	rcall	.-170    	; 0x4d66 <spi_init>
    }

    chip_select(pin);
    4e10:	8c 2f       	mov	r24, r28
    4e12:	32 df       	rcall	.-412    	; 0x4c78 <chip_select>
    _cs_pin = pin;
    4e14:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4e18:	ad b7       	in	r26, 0x3d	; 61
    4e1a:	be b7       	in	r27, 0x3e	; 62
    4e1c:	17 96       	adiw	r26, 0x07	; 7
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	f8 94       	cli
    4e22:	be bf       	out	0x3e, r27	; 62
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	ad bf       	out	0x3d, r26	; 61
    4e28:	df 91       	pop	r29
    4e2a:	cf 91       	pop	r28
    4e2c:	ff 90       	pop	r15
    4e2e:	ef 90       	pop	r14
    4e30:	df 90       	pop	r13
    4e32:	cf 90       	pop	r12
    4e34:	08 95       	ret

00004e36 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4e36:	a1 e0       	ldi	r26, 0x01	; 1
    4e38:	b0 e0       	ldi	r27, 0x00	; 0
    4e3a:	e1 e2       	ldi	r30, 0x21	; 33
    4e3c:	f7 e2       	ldi	r31, 0x27	; 39
    4e3e:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    4e42:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4e44:	61 e0       	ldi	r22, 0x01	; 1
    4e46:	70 e0       	ldi	r23, 0x00	; 0
    4e48:	ce 01       	movw	r24, r28
    4e4a:	01 96       	adiw	r24, 0x01	; 1
    4e4c:	5a d4       	rcall	.+2228   	; 0x5702 <SPI0_TXRX>
#endif
    return(data);
}
    4e4e:	89 81       	ldd	r24, Y+1	; 0x01
    4e50:	21 96       	adiw	r28, 0x01	; 1
    4e52:	e2 e0       	ldi	r30, 0x02	; 2
    4e54:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00004e58 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4e58:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <__data_end>
    GPIO_PIN_HI(LED2);
    4e5c:	2c 9a       	sbi	0x05, 4	; 5
    4e5e:	24 9a       	sbi	0x04, 4	; 4
    4e60:	08 95       	ret

00004e62 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4e62:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <__data_end>
    GPIO_PIN_LOW(LED2);
    4e66:	2c 98       	cbi	0x05, 4	; 5
    4e68:	24 9a       	sbi	0x04, 4	; 4
    4e6a:	08 95       	ret

00004e6c <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4e6c:	a2 e0       	ldi	r26, 0x02	; 2
    4e6e:	b0 e0       	ldi	r27, 0x00	; 0
    4e70:	ec e3       	ldi	r30, 0x3C	; 60
    4e72:	f7 e2       	ldi	r31, 0x27	; 39
    4e74:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4e78:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    4e7c:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    4e80:	21 15       	cp	r18, r1
    4e82:	31 05       	cpc	r19, r1
    4e84:	11 f4       	brne	.+4      	; 0x4e8a <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4e86:	20 e3       	ldi	r18, 0x30	; 48
    4e88:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4e8a:	ce 01       	movw	r24, r28
    4e8c:	01 96       	adiw	r24, 0x01	; 1
    4e8e:	82 1b       	sub	r24, r18
    4e90:	93 0b       	sbc	r25, r19
    4e92:	22 96       	adiw	r28, 0x02	; 2
    4e94:	e2 e0       	ldi	r30, 0x02	; 2
    4e96:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00004e9a <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4e9a:	a9 e0       	ldi	r26, 0x09	; 9
    4e9c:	b0 e0       	ldi	r27, 0x00	; 0
    4e9e:	e3 e5       	ldi	r30, 0x53	; 83
    4ea0:	f7 e2       	ldi	r31, 0x27	; 39
    4ea2:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4ea6:	e2 df       	rcall	.-60     	; 0x4e6c <freeRam>
    4ea8:	99 87       	std	Y+9, r25	; 0x09
    4eaa:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4eac:	ed b7       	in	r30, 0x3d	; 61
    4eae:	fe b7       	in	r31, 0x3e	; 62
    4eb0:	95 83       	std	Z+5, r25	; 0x05
    4eb2:	84 83       	std	Z+4, r24	; 0x04
    4eb4:	87 e0       	ldi	r24, 0x07	; 7
    4eb6:	93 e0       	ldi	r25, 0x03	; 3
    4eb8:	a0 e0       	ldi	r26, 0x00	; 0
    4eba:	81 83       	std	Z+1, r24	; 0x01
    4ebc:	92 83       	std	Z+2, r25	; 0x02
    4ebe:	a3 83       	std	Z+3, r26	; 0x03
    4ec0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4ec4:	8f ef       	ldi	r24, 0xFF	; 255
    4ec6:	90 e4       	ldi	r25, 0x40	; 64
    4ec8:	ed b7       	in	r30, 0x3d	; 61
    4eca:	fe b7       	in	r31, 0x3e	; 62
    4ecc:	95 83       	std	Z+5, r25	; 0x05
    4ece:	84 83       	std	Z+4, r24	; 0x04
    4ed0:	84 ef       	ldi	r24, 0xF4	; 244
    4ed2:	92 e0       	ldi	r25, 0x02	; 2
    4ed4:	a0 e0       	ldi	r26, 0x00	; 0
    4ed6:	81 83       	std	Z+1, r24	; 0x01
    4ed8:	92 83       	std	Z+2, r25	; 0x02
    4eda:	a3 83       	std	Z+3, r26	; 0x03
    4edc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4ee0:	ce 01       	movw	r24, r28
    4ee2:	08 96       	adiw	r24, 0x08	; 8
    4ee4:	ed b7       	in	r30, 0x3d	; 61
    4ee6:	fe b7       	in	r31, 0x3e	; 62
    4ee8:	95 83       	std	Z+5, r25	; 0x05
    4eea:	84 83       	std	Z+4, r24	; 0x04
    4eec:	81 ee       	ldi	r24, 0xE1	; 225
    4eee:	92 e0       	ldi	r25, 0x02	; 2
    4ef0:	a0 e0       	ldi	r26, 0x00	; 0
    4ef2:	81 83       	std	Z+1, r24	; 0x01
    4ef4:	92 83       	std	Z+2, r25	; 0x02
    4ef6:	a3 83       	std	Z+3, r26	; 0x03
    4ef8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4efc:	80 e3       	ldi	r24, 0x30	; 48
    4efe:	90 e2       	ldi	r25, 0x20	; 32
    4f00:	ed b7       	in	r30, 0x3d	; 61
    4f02:	fe b7       	in	r31, 0x3e	; 62
    4f04:	97 83       	std	Z+7, r25	; 0x07
    4f06:	86 83       	std	Z+6, r24	; 0x06
    4f08:	8e e4       	ldi	r24, 0x4E	; 78
    4f0a:	97 e1       	ldi	r25, 0x17	; 23
    4f0c:	95 83       	std	Z+5, r25	; 0x05
    4f0e:	84 83       	std	Z+4, r24	; 0x04
    4f10:	83 ec       	ldi	r24, 0xC3	; 195
    4f12:	92 e0       	ldi	r25, 0x02	; 2
    4f14:	a0 e0       	ldi	r26, 0x00	; 0
    4f16:	81 83       	std	Z+1, r24	; 0x01
    4f18:	92 83       	std	Z+2, r25	; 0x02
    4f1a:	a3 83       	std	Z+3, r26	; 0x03
    4f1c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4f20:	8e e4       	ldi	r24, 0x4E	; 78
    4f22:	97 e1       	ldi	r25, 0x17	; 23
    4f24:	ed b7       	in	r30, 0x3d	; 61
    4f26:	fe b7       	in	r31, 0x3e	; 62
    4f28:	97 83       	std	Z+7, r25	; 0x07
    4f2a:	86 83       	std	Z+6, r24	; 0x06
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	91 e0       	ldi	r25, 0x01	; 1
    4f30:	95 83       	std	Z+5, r25	; 0x05
    4f32:	84 83       	std	Z+4, r24	; 0x04
    4f34:	85 ea       	ldi	r24, 0xA5	; 165
    4f36:	92 e0       	ldi	r25, 0x02	; 2
    4f38:	a0 e0       	ldi	r26, 0x00	; 0
    4f3a:	81 83       	std	Z+1, r24	; 0x01
    4f3c:	92 83       	std	Z+2, r25	; 0x02
    4f3e:	a3 83       	std	Z+3, r26	; 0x03
    4f40:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	ed b7       	in	r30, 0x3d	; 61
    4f4a:	fe b7       	in	r31, 0x3e	; 62
    4f4c:	97 83       	std	Z+7, r25	; 0x07
    4f4e:	86 83       	std	Z+6, r24	; 0x06
    4f50:	80 e3       	ldi	r24, 0x30	; 48
    4f52:	90 e2       	ldi	r25, 0x20	; 32
    4f54:	95 83       	std	Z+5, r25	; 0x05
    4f56:	84 83       	std	Z+4, r24	; 0x04
    4f58:	87 e8       	ldi	r24, 0x87	; 135
    4f5a:	92 e0       	ldi	r25, 0x02	; 2
    4f5c:	a0 e0       	ldi	r26, 0x00	; 0
    4f5e:	81 83       	std	Z+1, r24	; 0x01
    4f60:	92 83       	std	Z+2, r25	; 0x02
    4f62:	a3 83       	std	Z+3, r26	; 0x03
    4f64:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4f68:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4f6c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4f70:	ed b7       	in	r30, 0x3d	; 61
    4f72:	fe b7       	in	r31, 0x3e	; 62
    4f74:	97 83       	std	Z+7, r25	; 0x07
    4f76:	86 83       	std	Z+6, r24	; 0x06
    4f78:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4f7c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4f80:	95 83       	std	Z+5, r25	; 0x05
    4f82:	84 83       	std	Z+4, r24	; 0x04
    4f84:	89 e6       	ldi	r24, 0x69	; 105
    4f86:	92 e0       	ldi	r25, 0x02	; 2
    4f88:	a0 e0       	ldi	r26, 0x00	; 0
    4f8a:	81 83       	std	Z+1, r24	; 0x01
    4f8c:	92 83       	std	Z+2, r25	; 0x02
    4f8e:	a3 83       	std	Z+3, r26	; 0x03
    4f90:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4f94:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__brkval>
    4f98:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <__brkval+0x1>
    4f9c:	ed b7       	in	r30, 0x3d	; 61
    4f9e:	fe b7       	in	r31, 0x3e	; 62
    4fa0:	95 83       	std	Z+5, r25	; 0x05
    4fa2:	84 83       	std	Z+4, r24	; 0x04
    4fa4:	85 e5       	ldi	r24, 0x55	; 85
    4fa6:	92 e0       	ldi	r25, 0x02	; 2
    4fa8:	a0 e0       	ldi	r26, 0x00	; 0
    4faa:	81 83       	std	Z+1, r24	; 0x01
    4fac:	92 83       	std	Z+2, r25	; 0x02
    4fae:	a3 83       	std	Z+3, r26	; 0x03
    4fb0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

}
    4fb4:	29 96       	adiw	r28, 0x09	; 9
    4fb6:	e2 e0       	ldi	r30, 0x02	; 2
    4fb8:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00004fbc <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4fbc:	ef 92       	push	r14
    4fbe:	ff 92       	push	r15
    4fc0:	0f 93       	push	r16
    4fc2:	1f 93       	push	r17
    4fc4:	cf 93       	push	r28
    4fc6:	df 93       	push	r29
    4fc8:	ad b7       	in	r26, 0x3d	; 61
    4fca:	be b7       	in	r27, 0x3e	; 62
    4fcc:	17 97       	sbiw	r26, 0x07	; 7
    4fce:	0f b6       	in	r0, 0x3f	; 63
    4fd0:	f8 94       	cli
    4fd2:	be bf       	out	0x3e, r27	; 62
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	ad bf       	out	0x3d, r26	; 61
    4fd8:	8c 01       	movw	r16, r24
    4fda:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4fdc:	0e 94 d3 e9 	call	0x1d3a6	; 0x1d3a6 <calloc>
    4fe0:	ec 01       	movw	r28, r24
    if(!p)
    4fe2:	89 2b       	or	r24, r25
    4fe4:	71 f4       	brne	.+28     	; 0x5002 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4fe6:	ed b7       	in	r30, 0x3d	; 61
    4fe8:	fe b7       	in	r31, 0x3e	; 62
    4fea:	f7 82       	std	Z+7, r15	; 0x07
    4fec:	e6 82       	std	Z+6, r14	; 0x06
    4fee:	15 83       	std	Z+5, r17	; 0x05
    4ff0:	04 83       	std	Z+4, r16	; 0x04
    4ff2:	8a e3       	ldi	r24, 0x3A	; 58
    4ff4:	92 e0       	ldi	r25, 0x02	; 2
    4ff6:	a0 e0       	ldi	r26, 0x00	; 0
    4ff8:	81 83       	std	Z+1, r24	; 0x01
    4ffa:	92 83       	std	Z+2, r25	; 0x02
    4ffc:	a3 83       	std	Z+3, r26	; 0x03
    4ffe:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }
    return(p);
}
    5002:	ce 01       	movw	r24, r28
    5004:	cd b7       	in	r28, 0x3d	; 61
    5006:	de b7       	in	r29, 0x3e	; 62
    5008:	27 96       	adiw	r28, 0x07	; 7
    500a:	e6 e0       	ldi	r30, 0x06	; 6
    500c:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

00005010 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    5010:	0f 93       	push	r16
    5012:	1f 93       	push	r17
    5014:	cf 93       	push	r28
    5016:	df 93       	push	r29
    5018:	00 d0       	rcall	.+0      	; 0x501a <safemalloc+0xa>
    501a:	00 d0       	rcall	.+0      	; 0x501c <safemalloc+0xc>
    501c:	1f 92       	push	r1
    501e:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    5020:	61 e0       	ldi	r22, 0x01	; 1
    5022:	70 e0       	ldi	r23, 0x00	; 0
    5024:	0e 94 d3 e9 	call	0x1d3a6	; 0x1d3a6 <calloc>
    5028:	ec 01       	movw	r28, r24
    if(!p)
    502a:	89 2b       	or	r24, r25
    502c:	61 f4       	brne	.+24     	; 0x5046 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    502e:	ed b7       	in	r30, 0x3d	; 61
    5030:	fe b7       	in	r31, 0x3e	; 62
    5032:	15 83       	std	Z+5, r17	; 0x05
    5034:	04 83       	std	Z+4, r16	; 0x04
    5036:	82 e2       	ldi	r24, 0x22	; 34
    5038:	92 e0       	ldi	r25, 0x02	; 2
    503a:	a0 e0       	ldi	r26, 0x00	; 0
    503c:	81 83       	std	Z+1, r24	; 0x01
    503e:	92 83       	std	Z+2, r25	; 0x02
    5040:	a3 83       	std	Z+3, r26	; 0x03
    5042:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }
    return(p);
}
    5046:	ce 01       	movw	r24, r28
    5048:	cd b7       	in	r28, 0x3d	; 61
    504a:	de b7       	in	r29, 0x3e	; 62
    504c:	25 96       	adiw	r28, 0x05	; 5
    504e:	e4 e0       	ldi	r30, 0x04	; 4
    5050:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00005054 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    5054:	ad b7       	in	r26, 0x3d	; 61
    5056:	be b7       	in	r27, 0x3e	; 62
    5058:	17 97       	sbiw	r26, 0x07	; 7
    505a:	0f b6       	in	r0, 0x3f	; 63
    505c:	f8 94       	cli
    505e:	be bf       	out	0x3e, r27	; 62
    5060:	0f be       	out	0x3f, r0	; 63
    5062:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5064:	00 97       	sbiw	r24, 0x00	; 0
    5066:	11 f1       	breq	.+68     	; 0x50ac <safefree+0x58>
        return;

    if(__brkval)
    5068:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    506c:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    5070:	21 15       	cp	r18, r1
    5072:	31 05       	cpc	r19, r1
    5074:	11 f4       	brne	.+4      	; 0x507a <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    5076:	20 e3       	ldi	r18, 0x30	; 48
    5078:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    507a:	40 e2       	ldi	r20, 0x20	; 32
    507c:	80 33       	cpi	r24, 0x30	; 48
    507e:	94 07       	cpc	r25, r20
    5080:	30 f0       	brcs	.+12     	; 0x508e <safefree+0x3a>
    5082:	28 17       	cp	r18, r24
    5084:	39 07       	cpc	r19, r25
    5086:	18 f0       	brcs	.+6      	; 0x508e <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    5088:	0e 94 85 ea 	call	0x1d50a	; 0x1d50a <free>
        return;
    508c:	0f c0       	rjmp	.+30     	; 0x50ac <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    508e:	ed b7       	in	r30, 0x3d	; 61
    5090:	fe b7       	in	r31, 0x3e	; 62
    5092:	37 83       	std	Z+7, r19	; 0x07
    5094:	26 83       	std	Z+6, r18	; 0x06
    5096:	95 83       	std	Z+5, r25	; 0x05
    5098:	84 83       	std	Z+4, r24	; 0x04
    509a:	8d ef       	ldi	r24, 0xFD	; 253
    509c:	91 e0       	ldi	r25, 0x01	; 1
    509e:	a0 e0       	ldi	r26, 0x00	; 0
    50a0:	81 83       	std	Z+1, r24	; 0x01
    50a2:	92 83       	std	Z+2, r25	; 0x02
    50a4:	a3 83       	std	Z+3, r26	; 0x03
    50a6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    PrintFree();
    50aa:	f7 de       	rcall	.-530    	; 0x4e9a <PrintFree>
}
    50ac:	ad b7       	in	r26, 0x3d	; 61
    50ae:	be b7       	in	r27, 0x3e	; 62
    50b0:	17 96       	adiw	r26, 0x07	; 7
    50b2:	0f b6       	in	r0, 0x3f	; 63
    50b4:	f8 94       	cli
    50b6:	be bf       	out	0x3e, r27	; 62
    50b8:	0f be       	out	0x3f, r0	; 63
    50ba:	ad bf       	out	0x3d, r26	; 61
    50bc:	08 95       	ret

000050be <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    50be:	64 36       	cpi	r22, 0x64	; 100
    50c0:	71 05       	cpc	r23, r1
    50c2:	81 05       	cpc	r24, r1
    50c4:	91 05       	cpc	r25, r1
    50c6:	58 f0       	brcs	.+22     	; 0x50de <delayus+0x20>
    {
        us -= 100U;
    50c8:	64 56       	subi	r22, 0x64	; 100
    50ca:	71 09       	sbc	r23, r1
    50cc:	81 09       	sbc	r24, r1
    50ce:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    50d0:	e3 ef       	ldi	r30, 0xF3	; 243
    50d2:	f1 e0       	ldi	r31, 0x01	; 1
    50d4:	31 97       	sbiw	r30, 0x01	; 1
    50d6:	f1 f7       	brne	.-4      	; 0x50d4 <delayus+0x16>
    50d8:	00 c0       	rjmp	.+0      	; 0x50da <delayus+0x1c>
    50da:	00 00       	nop
    50dc:	f0 cf       	rjmp	.-32     	; 0x50be <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    50de:	6a 30       	cpi	r22, 0x0A	; 10
    50e0:	71 05       	cpc	r23, r1
    50e2:	81 05       	cpc	r24, r1
    50e4:	91 05       	cpc	r25, r1
    50e6:	48 f0       	brcs	.+18     	; 0x50fa <delayus+0x3c>
    {
        us -= 10U;
    50e8:	6a 50       	subi	r22, 0x0A	; 10
    50ea:	71 09       	sbc	r23, r1
    50ec:	81 09       	sbc	r24, r1
    50ee:	91 09       	sbc	r25, r1
    50f0:	f2 e4       	ldi	r31, 0x42	; 66
    50f2:	fa 95       	dec	r31
    50f4:	f1 f7       	brne	.-4      	; 0x50f2 <delayus+0x34>
    50f6:	00 c0       	rjmp	.+0      	; 0x50f8 <delayus+0x3a>
    50f8:	f2 cf       	rjmp	.-28     	; 0x50de <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    50fa:	61 15       	cp	r22, r1
    50fc:	71 05       	cpc	r23, r1
    50fe:	81 05       	cpc	r24, r1
    5100:	91 05       	cpc	r25, r1
    5102:	49 f0       	breq	.+18     	; 0x5116 <delayus+0x58>
    {
        --us;
    5104:	61 50       	subi	r22, 0x01	; 1
    5106:	71 09       	sbc	r23, r1
    5108:	81 09       	sbc	r24, r1
    510a:	91 09       	sbc	r25, r1
    510c:	26 e0       	ldi	r18, 0x06	; 6
    510e:	2a 95       	dec	r18
    5110:	f1 f7       	brne	.-4      	; 0x510e <delayus+0x50>
    5112:	00 c0       	rjmp	.+0      	; 0x5114 <delayus+0x56>
    5114:	f2 cf       	rjmp	.-28     	; 0x50fa <delayus+0x3c>
        _delay_us(1);
    }
}
    5116:	08 95       	ret

00005118 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5118:	61 15       	cp	r22, r1
    511a:	71 05       	cpc	r23, r1
    511c:	81 05       	cpc	r24, r1
    511e:	91 05       	cpc	r25, r1
    5120:	09 f4       	brne	.+2      	; 0x5124 <delayms+0xc>
    5122:	41 c0       	rjmp	.+130    	; 0x51a6 <delayms+0x8e>
    5124:	e3 ef       	ldi	r30, 0xF3	; 243
    5126:	f1 e0       	ldi	r31, 0x01	; 1
    5128:	31 97       	sbiw	r30, 0x01	; 1
    512a:	f1 f7       	brne	.-4      	; 0x5128 <delayms+0x10>
    512c:	00 c0       	rjmp	.+0      	; 0x512e <delayms+0x16>
    512e:	00 00       	nop
    5130:	e3 ef       	ldi	r30, 0xF3	; 243
    5132:	f1 e0       	ldi	r31, 0x01	; 1
    5134:	31 97       	sbiw	r30, 0x01	; 1
    5136:	f1 f7       	brne	.-4      	; 0x5134 <delayms+0x1c>
    5138:	00 c0       	rjmp	.+0      	; 0x513a <delayms+0x22>
    513a:	00 00       	nop
    513c:	e3 ef       	ldi	r30, 0xF3	; 243
    513e:	f1 e0       	ldi	r31, 0x01	; 1
    5140:	31 97       	sbiw	r30, 0x01	; 1
    5142:	f1 f7       	brne	.-4      	; 0x5140 <delayms+0x28>
    5144:	00 c0       	rjmp	.+0      	; 0x5146 <delayms+0x2e>
    5146:	00 00       	nop
    5148:	e3 ef       	ldi	r30, 0xF3	; 243
    514a:	f1 e0       	ldi	r31, 0x01	; 1
    514c:	31 97       	sbiw	r30, 0x01	; 1
    514e:	f1 f7       	brne	.-4      	; 0x514c <delayms+0x34>
    5150:	00 c0       	rjmp	.+0      	; 0x5152 <delayms+0x3a>
    5152:	00 00       	nop
    5154:	e3 ef       	ldi	r30, 0xF3	; 243
    5156:	f1 e0       	ldi	r31, 0x01	; 1
    5158:	31 97       	sbiw	r30, 0x01	; 1
    515a:	f1 f7       	brne	.-4      	; 0x5158 <delayms+0x40>
    515c:	00 c0       	rjmp	.+0      	; 0x515e <delayms+0x46>
    515e:	00 00       	nop
    5160:	e3 ef       	ldi	r30, 0xF3	; 243
    5162:	f1 e0       	ldi	r31, 0x01	; 1
    5164:	31 97       	sbiw	r30, 0x01	; 1
    5166:	f1 f7       	brne	.-4      	; 0x5164 <delayms+0x4c>
    5168:	00 c0       	rjmp	.+0      	; 0x516a <delayms+0x52>
    516a:	00 00       	nop
    516c:	e3 ef       	ldi	r30, 0xF3	; 243
    516e:	f1 e0       	ldi	r31, 0x01	; 1
    5170:	31 97       	sbiw	r30, 0x01	; 1
    5172:	f1 f7       	brne	.-4      	; 0x5170 <delayms+0x58>
    5174:	00 c0       	rjmp	.+0      	; 0x5176 <delayms+0x5e>
    5176:	00 00       	nop
    5178:	e3 ef       	ldi	r30, 0xF3	; 243
    517a:	f1 e0       	ldi	r31, 0x01	; 1
    517c:	31 97       	sbiw	r30, 0x01	; 1
    517e:	f1 f7       	brne	.-4      	; 0x517c <delayms+0x64>
    5180:	00 c0       	rjmp	.+0      	; 0x5182 <delayms+0x6a>
    5182:	00 00       	nop
    5184:	e3 ef       	ldi	r30, 0xF3	; 243
    5186:	f1 e0       	ldi	r31, 0x01	; 1
    5188:	31 97       	sbiw	r30, 0x01	; 1
    518a:	f1 f7       	brne	.-4      	; 0x5188 <delayms+0x70>
    518c:	00 c0       	rjmp	.+0      	; 0x518e <delayms+0x76>
    518e:	00 00       	nop
    5190:	e3 ef       	ldi	r30, 0xF3	; 243
    5192:	f1 e0       	ldi	r31, 0x01	; 1
    5194:	31 97       	sbiw	r30, 0x01	; 1
    5196:	f1 f7       	brne	.-4      	; 0x5194 <delayms+0x7c>
    5198:	00 c0       	rjmp	.+0      	; 0x519a <delayms+0x82>
    519a:	00 00       	nop
    519c:	61 50       	subi	r22, 0x01	; 1
    519e:	71 09       	sbc	r23, r1
    51a0:	81 09       	sbc	r24, r1
    51a2:	91 09       	sbc	r25, r1
    51a4:	b9 cf       	rjmp	.-142    	; 0x5118 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    51a6:	08 95       	ret

000051a8 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    51a8:	81 11       	cpse	r24, r1
    51aa:	0e c0       	rjmp	.+28     	; 0x51c8 <uart_rx_flush+0x20>
    51ac:	f8 94       	cli
    51ae:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    51b2:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    51b6:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    51ba:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    51be:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    51c2:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    51c6:	78 94       	sei
    51c8:	08 95       	ret

000051ca <uart_ubr>:
    51ca:	4f 92       	push	r4
    51cc:	5f 92       	push	r5
    51ce:	6f 92       	push	r6
    51d0:	7f 92       	push	r7
    51d2:	8f 92       	push	r8
    51d4:	9f 92       	push	r9
    51d6:	af 92       	push	r10
    51d8:	bf 92       	push	r11
    51da:	cf 92       	push	r12
    51dc:	df 92       	push	r13
    51de:	ef 92       	push	r14
    51e0:	ff 92       	push	r15
    51e2:	cf 93       	push	r28
    51e4:	df 93       	push	r29
    51e6:	5a 01       	movw	r10, r20
    51e8:	e9 01       	movw	r28, r18
    51ea:	0e 94 71 e8 	call	0x1d0e2	; 0x1d0e2 <__floatunsisf>
    51ee:	2b 01       	movw	r4, r22
    51f0:	3c 01       	movw	r6, r24
    51f2:	20 e0       	ldi	r18, 0x00	; 0
    51f4:	30 e0       	ldi	r19, 0x00	; 0
    51f6:	40 e0       	ldi	r20, 0x00	; 0
    51f8:	51 e4       	ldi	r21, 0x41	; 65
    51fa:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <__mulsf3>
    51fe:	9b 01       	movw	r18, r22
    5200:	ac 01       	movw	r20, r24
    5202:	60 e8       	ldi	r22, 0x80	; 128
    5204:	76 e9       	ldi	r23, 0x96	; 150
    5206:	88 e9       	ldi	r24, 0x98	; 152
    5208:	9b e4       	ldi	r25, 0x4B	; 75
    520a:	0e 94 d8 e7 	call	0x1cfb0	; 0x1cfb0 <__divsf3>
    520e:	20 e0       	ldi	r18, 0x00	; 0
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	40 e8       	ldi	r20, 0x80	; 128
    5214:	5f e3       	ldi	r21, 0x3F	; 63
    5216:	0e 94 6f e7 	call	0x1cede	; 0x1cede <__subsf3>
    521a:	0e 94 8a e9 	call	0x1d314	; 0x1d314 <round>
    521e:	0e 94 45 e8 	call	0x1d08a	; 0x1d08a <__fixunssfsi>
    5222:	6b 01       	movw	r12, r22
    5224:	7c 01       	movw	r14, r24
    5226:	c1 14       	cp	r12, r1
    5228:	80 e1       	ldi	r24, 0x10	; 16
    522a:	d8 06       	cpc	r13, r24
    522c:	e1 04       	cpc	r14, r1
    522e:	f1 04       	cpc	r15, r1
    5230:	58 f4       	brcc	.+22     	; 0x5248 <uart_ubr+0x7e>
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	f5 01       	movw	r30, r10
    5238:	91 83       	std	Z+1, r25	; 0x01
    523a:	80 83       	st	Z, r24
    523c:	81 2c       	mov	r8, r1
    523e:	91 2c       	mov	r9, r1
    5240:	a1 2c       	mov	r10, r1
    5242:	21 e4       	ldi	r18, 0x41	; 65
    5244:	b2 2e       	mov	r11, r18
    5246:	31 c0       	rjmp	.+98     	; 0x52aa <uart_ubr+0xe0>
    5248:	f5 01       	movw	r30, r10
    524a:	11 82       	std	Z+1, r1	; 0x01
    524c:	10 82       	st	Z, r1
    524e:	20 e0       	ldi	r18, 0x00	; 0
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	40 e8       	ldi	r20, 0x80	; 128
    5254:	51 e4       	ldi	r21, 0x41	; 65
    5256:	c3 01       	movw	r24, r6
    5258:	b2 01       	movw	r22, r4
    525a:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <__mulsf3>
    525e:	9b 01       	movw	r18, r22
    5260:	ac 01       	movw	r20, r24
    5262:	60 e8       	ldi	r22, 0x80	; 128
    5264:	76 e9       	ldi	r23, 0x96	; 150
    5266:	88 e9       	ldi	r24, 0x98	; 152
    5268:	9b e4       	ldi	r25, 0x4B	; 75
    526a:	0e 94 d8 e7 	call	0x1cfb0	; 0x1cfb0 <__divsf3>
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	40 e8       	ldi	r20, 0x80	; 128
    5274:	5f e3       	ldi	r21, 0x3F	; 63
    5276:	0e 94 6f e7 	call	0x1cede	; 0x1cede <__subsf3>
    527a:	0e 94 8a e9 	call	0x1d314	; 0x1d314 <round>
    527e:	0e 94 45 e8 	call	0x1d08a	; 0x1d08a <__fixunssfsi>
    5282:	6b 01       	movw	r12, r22
    5284:	7c 01       	movw	r14, r24
    5286:	81 2c       	mov	r8, r1
    5288:	91 2c       	mov	r9, r1
    528a:	90 e8       	ldi	r25, 0x80	; 128
    528c:	a9 2e       	mov	r10, r25
    528e:	91 e4       	ldi	r25, 0x41	; 65
    5290:	b9 2e       	mov	r11, r25
    5292:	c1 14       	cp	r12, r1
    5294:	f0 e1       	ldi	r31, 0x10	; 16
    5296:	df 06       	cpc	r13, r31
    5298:	e1 04       	cpc	r14, r1
    529a:	f1 04       	cpc	r15, r1
    529c:	30 f0       	brcs	.+12     	; 0x52aa <uart_ubr+0xe0>
    529e:	cc 24       	eor	r12, r12
    52a0:	ca 94       	dec	r12
    52a2:	8f e0       	ldi	r24, 0x0F	; 15
    52a4:	d8 2e       	mov	r13, r24
    52a6:	e1 2c       	mov	r14, r1
    52a8:	f1 2c       	mov	r15, r1
    52aa:	c7 01       	movw	r24, r14
    52ac:	b6 01       	movw	r22, r12
    52ae:	6f 5f       	subi	r22, 0xFF	; 255
    52b0:	7f 4f       	sbci	r23, 0xFF	; 255
    52b2:	8f 4f       	sbci	r24, 0xFF	; 255
    52b4:	9f 4f       	sbci	r25, 0xFF	; 255
    52b6:	0e 94 71 e8 	call	0x1d0e2	; 0x1d0e2 <__floatunsisf>
    52ba:	a5 01       	movw	r20, r10
    52bc:	94 01       	movw	r18, r8
    52be:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <__mulsf3>
    52c2:	9b 01       	movw	r18, r22
    52c4:	ac 01       	movw	r20, r24
    52c6:	60 e8       	ldi	r22, 0x80	; 128
    52c8:	76 e9       	ldi	r23, 0x96	; 150
    52ca:	88 e9       	ldi	r24, 0x98	; 152
    52cc:	9b e4       	ldi	r25, 0x4B	; 75
    52ce:	0e 94 d8 e7 	call	0x1cfb0	; 0x1cfb0 <__divsf3>
    52d2:	0e 94 45 e8 	call	0x1d08a	; 0x1d08a <__fixunssfsi>
    52d6:	68 83       	st	Y, r22
    52d8:	79 83       	std	Y+1, r23	; 0x01
    52da:	8a 83       	std	Y+2, r24	; 0x02
    52dc:	9b 83       	std	Y+3, r25	; 0x03
    52de:	c6 01       	movw	r24, r12
    52e0:	df 91       	pop	r29
    52e2:	cf 91       	pop	r28
    52e4:	ff 90       	pop	r15
    52e6:	ef 90       	pop	r14
    52e8:	df 90       	pop	r13
    52ea:	cf 90       	pop	r12
    52ec:	bf 90       	pop	r11
    52ee:	af 90       	pop	r10
    52f0:	9f 90       	pop	r9
    52f2:	8f 90       	pop	r8
    52f4:	7f 90       	pop	r7
    52f6:	6f 90       	pop	r6
    52f8:	5f 90       	pop	r5
    52fa:	4f 90       	pop	r4
    52fc:	08 95       	ret

000052fe <uart_init>:
    52fe:	a6 e0       	ldi	r26, 0x06	; 6
    5300:	b0 e0       	ldi	r27, 0x00	; 0
    5302:	e5 e8       	ldi	r30, 0x85	; 133
    5304:	f9 e2       	ldi	r31, 0x29	; 41
    5306:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    530a:	1e 82       	std	Y+6, r1	; 0x06
    530c:	1d 82       	std	Y+5, r1	; 0x05
    530e:	81 11       	cpse	r24, r1
    5310:	36 c0       	rjmp	.+108    	; 0x537e <uart_init+0x80>
    5312:	cb 01       	movw	r24, r22
    5314:	ba 01       	movw	r22, r20
    5316:	9e 01       	movw	r18, r28
    5318:	2f 5f       	subi	r18, 0xFF	; 255
    531a:	3f 4f       	sbci	r19, 0xFF	; 255
    531c:	ae 01       	movw	r20, r28
    531e:	4b 5f       	subi	r20, 0xFB	; 251
    5320:	5f 4f       	sbci	r21, 0xFF	; 255
    5322:	53 df       	rcall	.-346    	; 0x51ca <uart_ubr>
    5324:	f8 94       	cli
    5326:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    532a:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    532e:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    5332:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    5336:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    533a:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    533e:	78 94       	sei
    5340:	f8 94       	cli
    5342:	58 9a       	sbi	0x0b, 0	; 11
    5344:	59 9a       	sbi	0x0b, 1	; 11
    5346:	50 98       	cbi	0x0a, 0	; 10
    5348:	51 9a       	sbi	0x0a, 1	; 10
    534a:	28 e9       	ldi	r18, 0x98	; 152
    534c:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5350:	2d 81       	ldd	r18, Y+5	; 0x05
    5352:	3e 81       	ldd	r19, Y+6	; 0x06
    5354:	23 2b       	or	r18, r19
    5356:	19 f0       	breq	.+6      	; 0x535e <uart_init+0x60>
    5358:	22 e0       	ldi	r18, 0x02	; 2
    535a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    535e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5362:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5366:	78 94       	sei
    5368:	68 e7       	ldi	r22, 0x78	; 120
    536a:	7a e2       	ldi	r23, 0x2A	; 42
    536c:	8d e8       	ldi	r24, 0x8D	; 141
    536e:	9a e2       	ldi	r25, 0x2A	; 42
    5370:	0e 94 ea 78 	call	0xf1d4	; 0xf1d4 <fdevopen>
    5374:	69 81       	ldd	r22, Y+1	; 0x01
    5376:	7a 81       	ldd	r23, Y+2	; 0x02
    5378:	8b 81       	ldd	r24, Y+3	; 0x03
    537a:	9c 81       	ldd	r25, Y+4	; 0x04
    537c:	03 c0       	rjmp	.+6      	; 0x5384 <uart_init+0x86>
    537e:	60 e0       	ldi	r22, 0x00	; 0
    5380:	70 e0       	ldi	r23, 0x00	; 0
    5382:	cb 01       	movw	r24, r22
    5384:	26 96       	adiw	r28, 0x06	; 6
    5386:	e2 e0       	ldi	r30, 0x02	; 2
    5388:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000538c <uart_rx_interrupt>:
    538c:	cf 93       	push	r28
    538e:	df 93       	push	r29
    5390:	27 e5       	ldi	r18, 0x57	; 87
    5392:	82 9f       	mul	r24, r18
    5394:	c0 01       	movw	r24, r0
    5396:	11 24       	eor	r1, r1
    5398:	fc 01       	movw	r30, r24
    539a:	e1 51       	subi	r30, 0x11	; 17
    539c:	f6 4e       	sbci	r31, 0xE6	; 230
    539e:	83 81       	ldd	r24, Z+3	; 0x03
    53a0:	94 81       	ldd	r25, Z+4	; 0x04
    53a2:	80 35       	cpi	r24, 0x50	; 80
    53a4:	91 05       	cpc	r25, r1
    53a6:	84 f4       	brge	.+32     	; 0x53c8 <uart_rx_interrupt+0x3c>
    53a8:	30 81       	ld	r19, Z
    53aa:	21 e0       	ldi	r18, 0x01	; 1
    53ac:	23 0f       	add	r18, r19
    53ae:	20 83       	st	Z, r18
    53b0:	ef 01       	movw	r28, r30
    53b2:	c3 0f       	add	r28, r19
    53b4:	d1 1d       	adc	r29, r1
    53b6:	6f 77       	andi	r22, 0x7F	; 127
    53b8:	6e 83       	std	Y+6, r22	; 0x06
    53ba:	01 96       	adiw	r24, 0x01	; 1
    53bc:	94 83       	std	Z+4, r25	; 0x04
    53be:	83 83       	std	Z+3, r24	; 0x03
    53c0:	20 35       	cpi	r18, 0x50	; 80
    53c2:	28 f0       	brcs	.+10     	; 0x53ce <uart_rx_interrupt+0x42>
    53c4:	10 82       	st	Z, r1
    53c6:	03 c0       	rjmp	.+6      	; 0x53ce <uart_rx_interrupt+0x42>
    53c8:	85 81       	ldd	r24, Z+5	; 0x05
    53ca:	81 60       	ori	r24, 0x01	; 1
    53cc:	85 83       	std	Z+5, r24	; 0x05
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	08 95       	ret

000053d4 <__vector_20>:
    53d4:	1f 92       	push	r1
    53d6:	0f 92       	push	r0
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	0f 92       	push	r0
    53dc:	11 24       	eor	r1, r1
    53de:	0b b6       	in	r0, 0x3b	; 59
    53e0:	0f 92       	push	r0
    53e2:	2f 93       	push	r18
    53e4:	3f 93       	push	r19
    53e6:	4f 93       	push	r20
    53e8:	5f 93       	push	r21
    53ea:	6f 93       	push	r22
    53ec:	7f 93       	push	r23
    53ee:	8f 93       	push	r24
    53f0:	9f 93       	push	r25
    53f2:	af 93       	push	r26
    53f4:	bf 93       	push	r27
    53f6:	ef 93       	push	r30
    53f8:	ff 93       	push	r31
    53fa:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    53fe:	80 e0       	ldi	r24, 0x00	; 0
    5400:	c5 df       	rcall	.-118    	; 0x538c <uart_rx_interrupt>
    5402:	ff 91       	pop	r31
    5404:	ef 91       	pop	r30
    5406:	bf 91       	pop	r27
    5408:	af 91       	pop	r26
    540a:	9f 91       	pop	r25
    540c:	8f 91       	pop	r24
    540e:	7f 91       	pop	r23
    5410:	6f 91       	pop	r22
    5412:	5f 91       	pop	r21
    5414:	4f 91       	pop	r20
    5416:	3f 91       	pop	r19
    5418:	2f 91       	pop	r18
    541a:	0f 90       	pop	r0
    541c:	0b be       	out	0x3b, r0	; 59
    541e:	0f 90       	pop	r0
    5420:	0f be       	out	0x3f, r0	; 63
    5422:	0f 90       	pop	r0
    5424:	1f 90       	pop	r1
    5426:	18 95       	reti

00005428 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5428:	81 11       	cpse	r24, r1
    542a:	07 c0       	rjmp	.+14     	; 0x543a <uart_rx_count+0x12>
        return(EOF);

    cli();
    542c:	f8 94       	cli

    count = uarts[uart].rx_count;
    542e:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <uarts+0x3>
    5432:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <uarts+0x4>

    sei();
    5436:	78 94       	sei

    return (count );
    5438:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    543a:	8f ef       	ldi	r24, 0xFF	; 255
    543c:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    543e:	08 95       	ret

00005440 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5440:	81 11       	cpse	r24, r1
    5442:	21 c0       	rjmp	.+66     	; 0x5486 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	f0 df       	rcall	.-32     	; 0x5428 <uart_rx_count>
    5448:	18 16       	cp	r1, r24
    544a:	19 06       	cpc	r1, r25
    544c:	dc f7       	brge	.-10     	; 0x5444 <uart_get_tail+0x4>
        ;

    cli();
    544e:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5450:	e0 91 f0 19 	lds	r30, 0x19F0	; 0x8019f0 <uarts+0x1>
    5454:	91 e0       	ldi	r25, 0x01	; 1
    5456:	9e 0f       	add	r25, r30
    5458:	90 93 f0 19 	sts	0x19F0, r25	; 0x8019f0 <uarts+0x1>
    545c:	f0 e0       	ldi	r31, 0x00	; 0
    545e:	e1 51       	subi	r30, 0x11	; 17
    5460:	f6 4e       	sbci	r31, 0xE6	; 230
    5462:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5464:	90 35       	cpi	r25, 0x50	; 80
    5466:	10 f0       	brcs	.+4      	; 0x546c <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5468:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    uarts[uart].rx_count--;
    546c:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <uarts+0x3>
    5470:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <uarts+0x4>
    5474:	21 50       	subi	r18, 0x01	; 1
    5476:	31 09       	sbc	r19, r1
    5478:	30 93 f3 19 	sts	0x19F3, r19	; 0x8019f3 <uarts+0x4>
    547c:	20 93 f2 19 	sts	0x19F2, r18	; 0x8019f2 <uarts+0x3>
    sei();
    5480:	78 94       	sei

    return (c & 0xff);
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    5486:	8f ef       	ldi	r24, 0xFF	; 255
    5488:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    548a:	08 95       	ret

0000548c <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    548c:	d9 df       	rcall	.-78     	; 0x5440 <uart_get_tail>
}
    548e:	99 27       	eor	r25, r25
    5490:	08 95       	ret

00005492 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    5492:	61 11       	cpse	r22, r1
    5494:	09 c0       	rjmp	.+18     	; 0x54a8 <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    5496:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    549a:	25 ff       	sbrs	r18, 5
    549c:	fc cf       	rjmp	.-8      	; 0x5496 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    549e:	28 2f       	mov	r18, r24
    54a0:	2f 77       	andi	r18, 0x7F	; 127
    54a2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    54a6:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    54a8:	61 30       	cpi	r22, 0x01	; 1
    54aa:	49 f4       	brne	.+18     	; 0x54be <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    54ac:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    54b0:	25 ff       	sbrs	r18, 5
    54b2:	fc cf       	rjmp	.-8      	; 0x54ac <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    54b4:	28 2f       	mov	r18, r24
    54b6:	2f 77       	andi	r18, 0x7F	; 127
    54b8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    54bc:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    54be:	8f ef       	ldi	r24, 0xFF	; 255
    54c0:	9f ef       	ldi	r25, 0xFF	; 255
}
    54c2:	08 95       	ret

000054c4 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    54c4:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    54c6:	81 11       	cpse	r24, r1
    54c8:	0f c0       	rjmp	.+30     	; 0x54e8 <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    54ca:	e0 df       	rcall	.-64     	; 0x548c <uart_rx_byte>
    54cc:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    54ce:	60 e0       	ldi	r22, 0x00	; 0
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	df df       	rcall	.-66     	; 0x5492 <uart_tx_byte>
    if(c == '\r')
    54d4:	cd 30       	cpi	r28, 0x0D	; 13
    54d6:	29 f4       	brne	.+10     	; 0x54e2 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    54d8:	60 e0       	ldi	r22, 0x00	; 0
    54da:	8a e0       	ldi	r24, 0x0A	; 10
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	d9 df       	rcall	.-78     	; 0x5492 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    54e0:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    54e2:	8c 2f       	mov	r24, r28
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	02 c0       	rjmp	.+4      	; 0x54ec <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    54e8:	8f ef       	ldi	r24, 0xFF	; 255
    54ea:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    54ec:	cf 91       	pop	r28
    54ee:	08 95       	ret

000054f0 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	e8 cf       	rjmp	.-48     	; 0x54c4 <uart_getchar>
}
    54f4:	08 95       	ret

000054f6 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    54f6:	1f 93       	push	r17
    54f8:	cf 93       	push	r28
    54fa:	df 93       	push	r29
    54fc:	ec 01       	movw	r28, r24
    54fe:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    5500:	c8 df       	rcall	.-112    	; 0x5492 <uart_tx_byte>

    if( c == '\n' )
    5502:	ca 30       	cpi	r28, 0x0A	; 10
    5504:	d1 05       	cpc	r29, r1
    5506:	21 f4       	brne	.+8      	; 0x5510 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    5508:	61 2f       	mov	r22, r17
    550a:	8d e0       	ldi	r24, 0x0D	; 13
    550c:	90 e0       	ldi	r25, 0x00	; 0
    550e:	c1 df       	rcall	.-126    	; 0x5492 <uart_tx_byte>

    return(c);
}
    5510:	ce 01       	movw	r24, r28
    5512:	df 91       	pop	r29
    5514:	cf 91       	pop	r28
    5516:	1f 91       	pop	r17
    5518:	08 95       	ret

0000551a <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    551a:	cf 93       	push	r28
    551c:	df 93       	push	r29
    551e:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    5520:	60 e0       	ldi	r22, 0x00	; 0
    5522:	70 e0       	ldi	r23, 0x00	; 0
    5524:	e8 df       	rcall	.-48     	; 0x54f6 <uart_putchar>
    return(c);
}
    5526:	ce 01       	movw	r24, r28
    5528:	df 91       	pop	r29
    552a:	cf 91       	pop	r28
    552c:	08 95       	ret

0000552e <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    552e:	7c cf       	rjmp	.-264    	; 0x5428 <uart_rx_count>
}
    5530:	08 95       	ret

00005532 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5532:	cf 92       	push	r12
    5534:	df 92       	push	r13
    5536:	ef 92       	push	r14
    5538:	ff 92       	push	r15
    553a:	6b 01       	movw	r12, r22
    553c:	7c 01       	movw	r14, r24
    553e:	80 91 51 17 	lds	r24, 0x1751	; 0x801751 <SPI0_Speed_value>
    5542:	90 91 52 17 	lds	r25, 0x1752	; 0x801752 <SPI0_Speed_value+0x1>
    5546:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <SPI0_Speed_value+0x2>
    554a:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <SPI0_Speed_value+0x3>
    554e:	8c 15       	cp	r24, r12
    5550:	9d 05       	cpc	r25, r13
    5552:	ae 05       	cpc	r26, r14
    5554:	bf 05       	cpc	r27, r15
    5556:	09 f4       	brne	.+2      	; 0x555a <SPI0_Speed+0x28>
    5558:	4e c0       	rjmp	.+156    	; 0x55f6 <SPI0_Speed+0xc4>
    555a:	60 e0       	ldi	r22, 0x00	; 0
    555c:	7d e2       	ldi	r23, 0x2D	; 45
    555e:	81 e3       	ldi	r24, 0x31	; 49
    5560:	91 e0       	ldi	r25, 0x01	; 1
    5562:	a7 01       	movw	r20, r14
    5564:	96 01       	movw	r18, r12
    5566:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    556a:	20 38       	cpi	r18, 0x80	; 128
    556c:	31 05       	cpc	r19, r1
    556e:	41 05       	cpc	r20, r1
    5570:	51 05       	cpc	r21, r1
    5572:	28 f4       	brcc	.+10     	; 0x557e <SPI0_Speed+0x4c>
    5574:	20 34       	cpi	r18, 0x40	; 64
    5576:	31 05       	cpc	r19, r1
    5578:	41 05       	cpc	r20, r1
    557a:	51 05       	cpc	r21, r1
    557c:	30 f0       	brcs	.+12     	; 0x558a <SPI0_Speed+0x58>
    557e:	8d b5       	in	r24, 0x2d	; 45
    5580:	8e 7f       	andi	r24, 0xFE	; 254
    5582:	8d bd       	out	0x2d, r24	; 45
    5584:	8c b5       	in	r24, 0x2c	; 44
    5586:	82 60       	ori	r24, 0x02	; 2
    5588:	1b c0       	rjmp	.+54     	; 0x55c0 <SPI0_Speed+0x8e>
    558a:	8d b5       	in	r24, 0x2d	; 45
    558c:	20 32       	cpi	r18, 0x20	; 32
    558e:	31 05       	cpc	r19, r1
    5590:	41 05       	cpc	r20, r1
    5592:	51 05       	cpc	r21, r1
    5594:	28 f0       	brcs	.+10     	; 0x55a0 <SPI0_Speed+0x6e>
    5596:	81 60       	ori	r24, 0x01	; 1
    5598:	8d bd       	out	0x2d, r24	; 45
    559a:	8c b5       	in	r24, 0x2c	; 44
    559c:	82 60       	ori	r24, 0x02	; 2
    559e:	1f c0       	rjmp	.+62     	; 0x55de <SPI0_Speed+0xac>
    55a0:	20 31       	cpi	r18, 0x10	; 16
    55a2:	31 05       	cpc	r19, r1
    55a4:	41 05       	cpc	r20, r1
    55a6:	51 05       	cpc	r21, r1
    55a8:	10 f0       	brcs	.+4      	; 0x55ae <SPI0_Speed+0x7c>
    55aa:	8e 7f       	andi	r24, 0xFE	; 254
    55ac:	06 c0       	rjmp	.+12     	; 0x55ba <SPI0_Speed+0x88>
    55ae:	28 30       	cpi	r18, 0x08	; 8
    55b0:	31 05       	cpc	r19, r1
    55b2:	41 05       	cpc	r20, r1
    55b4:	51 05       	cpc	r21, r1
    55b6:	40 f0       	brcs	.+16     	; 0x55c8 <SPI0_Speed+0x96>
    55b8:	81 60       	ori	r24, 0x01	; 1
    55ba:	8d bd       	out	0x2d, r24	; 45
    55bc:	8c b5       	in	r24, 0x2c	; 44
    55be:	8d 7f       	andi	r24, 0xFD	; 253
    55c0:	8c bd       	out	0x2c, r24	; 44
    55c2:	8c b5       	in	r24, 0x2c	; 44
    55c4:	81 60       	ori	r24, 0x01	; 1
    55c6:	0e c0       	rjmp	.+28     	; 0x55e4 <SPI0_Speed+0xb2>
    55c8:	24 30       	cpi	r18, 0x04	; 4
    55ca:	31 05       	cpc	r19, r1
    55cc:	41 05       	cpc	r20, r1
    55ce:	51 05       	cpc	r21, r1
    55d0:	10 f0       	brcs	.+4      	; 0x55d6 <SPI0_Speed+0xa4>
    55d2:	8e 7f       	andi	r24, 0xFE	; 254
    55d4:	01 c0       	rjmp	.+2      	; 0x55d8 <SPI0_Speed+0xa6>
    55d6:	81 60       	ori	r24, 0x01	; 1
    55d8:	8d bd       	out	0x2d, r24	; 45
    55da:	8c b5       	in	r24, 0x2c	; 44
    55dc:	8d 7f       	andi	r24, 0xFD	; 253
    55de:	8c bd       	out	0x2c, r24	; 44
    55e0:	8c b5       	in	r24, 0x2c	; 44
    55e2:	8e 7f       	andi	r24, 0xFE	; 254
    55e4:	8c bd       	out	0x2c, r24	; 44
    55e6:	c0 92 51 17 	sts	0x1751, r12	; 0x801751 <SPI0_Speed_value>
    55ea:	d0 92 52 17 	sts	0x1752, r13	; 0x801752 <SPI0_Speed_value+0x1>
    55ee:	e0 92 53 17 	sts	0x1753, r14	; 0x801753 <SPI0_Speed_value+0x2>
    55f2:	f0 92 54 17 	sts	0x1754, r15	; 0x801754 <SPI0_Speed_value+0x3>
    55f6:	ff 90       	pop	r15
    55f8:	ef 90       	pop	r14
    55fa:	df 90       	pop	r13
    55fc:	cf 90       	pop	r12
    55fe:	08 95       	ret

00005600 <SPI0_Mode>:
    5600:	cf 93       	push	r28
    5602:	df 93       	push	r29
    5604:	00 d0       	rcall	.+0      	; 0x5606 <SPI0_Mode+0x6>
    5606:	00 d0       	rcall	.+0      	; 0x5608 <SPI0_Mode+0x8>
    5608:	1f 92       	push	r1
    560a:	ec 01       	movw	r28, r24
    560c:	81 30       	cpi	r24, 0x01	; 1
    560e:	91 05       	cpc	r25, r1
    5610:	71 f0       	breq	.+28     	; 0x562e <SPI0_Mode+0x2e>
    5612:	2c f4       	brge	.+10     	; 0x561e <SPI0_Mode+0x1e>
    5614:	89 2b       	or	r24, r25
    5616:	c1 f4       	brne	.+48     	; 0x5648 <SPI0_Mode+0x48>
    5618:	8c b5       	in	r24, 0x2c	; 44
    561a:	87 7f       	andi	r24, 0xF7	; 247
    561c:	11 c0       	rjmp	.+34     	; 0x5640 <SPI0_Mode+0x40>
    561e:	82 30       	cpi	r24, 0x02	; 2
    5620:	91 05       	cpc	r25, r1
    5622:	61 f0       	breq	.+24     	; 0x563c <SPI0_Mode+0x3c>
    5624:	03 97       	sbiw	r24, 0x03	; 3
    5626:	81 f4       	brne	.+32     	; 0x5648 <SPI0_Mode+0x48>
    5628:	8c b5       	in	r24, 0x2c	; 44
    562a:	88 60       	ori	r24, 0x08	; 8
    562c:	02 c0       	rjmp	.+4      	; 0x5632 <SPI0_Mode+0x32>
    562e:	8c b5       	in	r24, 0x2c	; 44
    5630:	87 7f       	andi	r24, 0xF7	; 247
    5632:	8c bd       	out	0x2c, r24	; 44
    5634:	8c b5       	in	r24, 0x2c	; 44
    5636:	84 60       	ori	r24, 0x04	; 4
    5638:	8c bd       	out	0x2c, r24	; 44
    563a:	12 c0       	rjmp	.+36     	; 0x5660 <SPI0_Mode+0x60>
    563c:	8c b5       	in	r24, 0x2c	; 44
    563e:	88 60       	ori	r24, 0x08	; 8
    5640:	8c bd       	out	0x2c, r24	; 44
    5642:	8c b5       	in	r24, 0x2c	; 44
    5644:	8b 7f       	andi	r24, 0xFB	; 251
    5646:	f8 cf       	rjmp	.-16     	; 0x5638 <SPI0_Mode+0x38>
    5648:	ed b7       	in	r30, 0x3d	; 61
    564a:	fe b7       	in	r31, 0x3e	; 62
    564c:	d5 83       	std	Z+5, r29	; 0x05
    564e:	c4 83       	std	Z+4, r28	; 0x04
    5650:	84 e1       	ldi	r24, 0x14	; 20
    5652:	93 e0       	ldi	r25, 0x03	; 3
    5654:	a0 e0       	ldi	r26, 0x00	; 0
    5656:	81 83       	std	Z+1, r24	; 0x01
    5658:	92 83       	std	Z+2, r25	; 0x02
    565a:	a3 83       	std	Z+3, r26	; 0x03
    565c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    5660:	d0 93 50 17 	sts	0x1750, r29	; 0x801750 <SPI0_Mode_value+0x1>
    5664:	c0 93 4f 17 	sts	0x174F, r28	; 0x80174f <SPI0_Mode_value>
    5668:	cd b7       	in	r28, 0x3d	; 61
    566a:	de b7       	in	r29, 0x3e	; 62
    566c:	25 96       	adiw	r28, 0x05	; 5
    566e:	e2 e0       	ldi	r30, 0x02	; 2
    5670:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00005674 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5674:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5676:	0d b4       	in	r0, 0x2d	; 45
    5678:	07 fe       	sbrs	r0, 7
    567a:	fd cf       	rjmp	.-6      	; 0x5676 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    567c:	8e b5       	in	r24, 0x2e	; 46
}
    567e:	08 95       	ret

00005680 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5680:	cf 92       	push	r12
    5682:	df 92       	push	r13
    5684:	ef 92       	push	r14
    5686:	ff 92       	push	r15
    5688:	cf 93       	push	r28
    568a:	df 93       	push	r29
    568c:	1f 92       	push	r1
    568e:	cd b7       	in	r28, 0x3d	; 61
    5690:	de b7       	in	r29, 0x3e	; 62
    5692:	6b 01       	movw	r12, r22
    5694:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5696:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    5698:	2f 9a       	sbi	0x05, 7	; 5
    569a:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    569c:	2d 9a       	sbi	0x05, 5	; 5
    569e:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    56a0:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    56a2:	2c 98       	cbi	0x05, 4	; 5
    56a4:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    56a6:	8c b5       	in	r24, 0x2c	; 44
    56a8:	80 61       	ori	r24, 0x10	; 16
    56aa:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    56ac:	8c b5       	in	r24, 0x2c	; 44
    56ae:	80 64       	ori	r24, 0x40	; 64
    56b0:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    56b2:	8d b5       	in	r24, 0x2d	; 45
    56b4:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    56b6:	8e b5       	in	r24, 0x2e	; 46
    56b8:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    56ba:	80 e0       	ldi	r24, 0x00	; 0
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	a0 df       	rcall	.-192    	; 0x5600 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    56c0:	c7 01       	movw	r24, r14
    56c2:	b6 01       	movw	r22, r12
    56c4:	36 df       	rcall	.-404    	; 0x5532 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    56c6:	8f ef       	ldi	r24, 0xFF	; 255
    56c8:	d5 df       	rcall	.-86     	; 0x5674 <SPI0_TXRX_Byte>
    56ca:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    56cc:	df 91       	pop	r29
    56ce:	cf 91       	pop	r28
    56d0:	ff 90       	pop	r15
    56d2:	ef 90       	pop	r14
    56d4:	df 90       	pop	r13
    56d6:	cf 90       	pop	r12
    56d8:	08 95       	ret

000056da <SPI0_TX>:
    56da:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    56dc:	1f 93       	push	r17
    56de:	cf 93       	push	r28
    56e0:	df 93       	push	r29
    56e2:	8c 01       	movw	r16, r24
    56e4:	eb 01       	movw	r28, r22

    while(count > 0)
    56e6:	1c 16       	cp	r1, r28
    56e8:	1d 06       	cpc	r1, r29
    56ea:	34 f4       	brge	.+12     	; 0x56f8 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    56ec:	f8 01       	movw	r30, r16
    56ee:	81 91       	ld	r24, Z+
    56f0:	8f 01       	movw	r16, r30
    56f2:	c0 df       	rcall	.-128    	; 0x5674 <SPI0_TXRX_Byte>
        ++data;
        --count;
    56f4:	21 97       	sbiw	r28, 0x01	; 1
    56f6:	f7 cf       	rjmp	.-18     	; 0x56e6 <SPI0_TX+0xc>
    }
}
    56f8:	df 91       	pop	r29
    56fa:	cf 91       	pop	r28
    56fc:	1f 91       	pop	r17
    56fe:	0f 91       	pop	r16
    5700:	08 95       	ret

00005702 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5702:	0f 93       	push	r16
    5704:	1f 93       	push	r17
    5706:	cf 93       	push	r28
    5708:	df 93       	push	r29
    570a:	8c 01       	movw	r16, r24
    570c:	eb 01       	movw	r28, r22

    while(count > 0)
    570e:	1c 16       	cp	r1, r28
    5710:	1d 06       	cpc	r1, r29
    5712:	44 f4       	brge	.+16     	; 0x5724 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5714:	f8 01       	movw	r30, r16
    5716:	80 81       	ld	r24, Z
    5718:	ad df       	rcall	.-166    	; 0x5674 <SPI0_TXRX_Byte>
    571a:	f8 01       	movw	r30, r16
    571c:	81 93       	st	Z+, r24
    571e:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5720:	21 97       	sbiw	r28, 0x01	; 1
    5722:	f5 cf       	rjmp	.-22     	; 0x570e <SPI0_TXRX+0xc>
    }
}
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	1f 91       	pop	r17
    572a:	0f 91       	pop	r16
    572c:	08 95       	ret

0000572e <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    572e:	0f 93       	push	r16
    5730:	1f 93       	push	r17
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	8c 01       	movw	r16, r24
    5738:	eb 01       	movw	r28, r22

    while(count > 0)
    573a:	1c 16       	cp	r1, r28
    573c:	1d 06       	cpc	r1, r29
    573e:	3c f4       	brge	.+14     	; 0x574e <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5740:	8f ef       	ldi	r24, 0xFF	; 255
    5742:	98 df       	rcall	.-208    	; 0x5674 <SPI0_TXRX_Byte>
    5744:	f8 01       	movw	r30, r16
    5746:	81 93       	st	Z+, r24
    5748:	8f 01       	movw	r16, r30
        ++data;
        --count;
    574a:	21 97       	sbiw	r28, 0x01	; 1
    574c:	f6 cf       	rjmp	.-20     	; 0x573a <SPI0_RX+0xc>
    }
}
    574e:	df 91       	pop	r29
    5750:	cf 91       	pop	r28
    5752:	1f 91       	pop	r17
    5754:	0f 91       	pop	r16
    5756:	08 95       	ret

00005758 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    5758:	2f b7       	in	r18, 0x3f	; 63
    575a:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    575e:	81 11       	cpse	r24, r1
    5760:	04 c0       	rjmp	.+8      	; 0x576a <i2c_timer+0x12>
    5762:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    5766:	81 11       	cpse	r24, r1
    5768:	0b c0       	rjmp	.+22     	; 0x5780 <i2c_timer+0x28>
    576a:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x4>
    576e:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <i2c+0x5>
    5772:	00 97       	sbiw	r24, 0x00	; 0
    5774:	29 f0       	breq	.+10     	; 0x5780 <i2c_timer+0x28>
    5776:	01 97       	sbiw	r24, 0x01	; 1
    5778:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <i2c+0x5>
    577c:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <i2c+0x4>
    5780:	2f bf       	out	0x3f, r18	; 63
    5782:	08 95       	ret

00005784 <i2c_check_op>:
    5784:	ad b7       	in	r26, 0x3d	; 61
    5786:	be b7       	in	r27, 0x3e	; 62
    5788:	17 97       	sbiw	r26, 0x07	; 7
    578a:	0f b6       	in	r0, 0x3f	; 63
    578c:	f8 94       	cli
    578e:	be bf       	out	0x3e, r27	; 62
    5790:	0f be       	out	0x3f, r0	; 63
    5792:	ad bf       	out	0x3d, r26	; 61
    5794:	28 2f       	mov	r18, r24
    5796:	08 2e       	mov	r0, r24
    5798:	00 0c       	add	r0, r0
    579a:	33 0b       	sbc	r19, r19
    579c:	80 31       	cpi	r24, 0x10	; 16
    579e:	88 f0       	brcs	.+34     	; 0x57c2 <i2c_check_op+0x3e>
    57a0:	80 e1       	ldi	r24, 0x10	; 16
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	ed b7       	in	r30, 0x3d	; 61
    57a6:	fe b7       	in	r31, 0x3e	; 62
    57a8:	97 83       	std	Z+7, r25	; 0x07
    57aa:	86 83       	std	Z+6, r24	; 0x06
    57ac:	35 83       	std	Z+5, r19	; 0x05
    57ae:	24 83       	std	Z+4, r18	; 0x04
    57b0:	89 e2       	ldi	r24, 0x29	; 41
    57b2:	94 e0       	ldi	r25, 0x04	; 4
    57b4:	a0 e0       	ldi	r26, 0x00	; 0
    57b6:	81 83       	std	Z+1, r24	; 0x01
    57b8:	92 83       	std	Z+2, r25	; 0x02
    57ba:	a3 83       	std	Z+3, r26	; 0x03
    57bc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    57c0:	24 c0       	rjmp	.+72     	; 0x580a <i2c_check_op+0x86>
    57c2:	f9 01       	movw	r30, r18
    57c4:	ee 0f       	add	r30, r30
    57c6:	ff 1f       	adc	r31, r31
    57c8:	ea 5a       	subi	r30, 0xAA	; 170
    57ca:	f8 4e       	sbci	r31, 0xE8	; 232
    57cc:	01 90       	ld	r0, Z+
    57ce:	f0 81       	ld	r31, Z
    57d0:	e0 2d       	mov	r30, r0
    57d2:	30 97       	sbiw	r30, 0x00	; 0
    57d4:	d1 f0       	breq	.+52     	; 0x580a <i2c_check_op+0x86>
    57d6:	80 85       	ldd	r24, Z+8	; 0x08
    57d8:	91 85       	ldd	r25, Z+9	; 0x09
    57da:	89 2b       	or	r24, r25
    57dc:	39 f4       	brne	.+14     	; 0x57ec <i2c_check_op+0x68>
    57de:	ed b7       	in	r30, 0x3d	; 61
    57e0:	fe b7       	in	r31, 0x3e	; 62
    57e2:	35 83       	std	Z+5, r19	; 0x05
    57e4:	24 83       	std	Z+4, r18	; 0x04
    57e6:	80 e1       	ldi	r24, 0x10	; 16
    57e8:	94 e0       	ldi	r25, 0x04	; 4
    57ea:	09 c0       	rjmp	.+18     	; 0x57fe <i2c_check_op+0x7a>
    57ec:	86 81       	ldd	r24, Z+6	; 0x06
    57ee:	81 11       	cpse	r24, r1
    57f0:	0e c0       	rjmp	.+28     	; 0x580e <i2c_check_op+0x8a>
    57f2:	ed b7       	in	r30, 0x3d	; 61
    57f4:	fe b7       	in	r31, 0x3e	; 62
    57f6:	35 83       	std	Z+5, r19	; 0x05
    57f8:	24 83       	std	Z+4, r18	; 0x04
    57fa:	8a ef       	ldi	r24, 0xFA	; 250
    57fc:	93 e0       	ldi	r25, 0x03	; 3
    57fe:	a0 e0       	ldi	r26, 0x00	; 0
    5800:	81 83       	std	Z+1, r24	; 0x01
    5802:	92 83       	std	Z+2, r25	; 0x02
    5804:	a3 83       	std	Z+3, r26	; 0x03
    5806:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	01 c0       	rjmp	.+2      	; 0x5810 <i2c_check_op+0x8c>
    580e:	81 e0       	ldi	r24, 0x01	; 1
    5810:	ad b7       	in	r26, 0x3d	; 61
    5812:	be b7       	in	r27, 0x3e	; 62
    5814:	17 96       	adiw	r26, 0x07	; 7
    5816:	0f b6       	in	r0, 0x3f	; 63
    5818:	f8 94       	cli
    581a:	be bf       	out	0x3e, r27	; 62
    581c:	0f be       	out	0x3f, r0	; 63
    581e:	ad bf       	out	0x3d, r26	; 61
    5820:	08 95       	ret

00005822 <i2c_task_init>:
    5822:	8f b7       	in	r24, 0x3f	; 63
    5824:	f8 94       	cli
    5826:	e6 e5       	ldi	r30, 0x56	; 86
    5828:	f7 e1       	ldi	r31, 0x17	; 23
    582a:	11 92       	st	Z+, r1
    582c:	11 92       	st	Z+, r1
    582e:	97 e1       	ldi	r25, 0x17	; 23
    5830:	e6 37       	cpi	r30, 0x76	; 118
    5832:	f9 07       	cpc	r31, r25
    5834:	d1 f7       	brne	.-12     	; 0x582a <i2c_task_init+0x8>
    5836:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    583a:	91 e0       	ldi	r25, 0x01	; 1
    583c:	90 93 78 17 	sts	0x1778, r25	; 0x801778 <i2c_task+0x2>
    5840:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>
    5844:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
    5848:	8f bf       	out	0x3f, r24	; 63
    584a:	08 95       	ret

0000584c <i2c_task_op_add>:
    584c:	ef 92       	push	r14
    584e:	ff 92       	push	r15
    5850:	0f 93       	push	r16
    5852:	1f 93       	push	r17
    5854:	cf 93       	push	r28
    5856:	df 93       	push	r29
    5858:	d8 2f       	mov	r29, r24
    585a:	c6 2f       	mov	r28, r22
    585c:	7a 01       	movw	r14, r20
    585e:	02 2f       	mov	r16, r18
    5860:	1f b7       	in	r17, 0x3f	; 63
    5862:	6a e0       	ldi	r22, 0x0A	; 10
    5864:	70 e0       	ldi	r23, 0x00	; 0
    5866:	81 e0       	ldi	r24, 0x01	; 1
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	a8 db       	rcall	.-2224   	; 0x4fbc <safecalloc>
    586c:	fc 01       	movw	r30, r24
    586e:	89 2b       	or	r24, r25
    5870:	89 f0       	breq	.+34     	; 0x5894 <i2c_task_op_add+0x48>
    5872:	f8 94       	cli
    5874:	11 82       	std	Z+1, r1	; 0x01
    5876:	12 82       	std	Z+2, r1	; 0x02
    5878:	dd 0f       	add	r29, r29
    587a:	c1 70       	andi	r28, 0x01	; 1
    587c:	cd 2b       	or	r28, r29
    587e:	c0 83       	st	Z, r28
    5880:	8a e0       	ldi	r24, 0x0A	; 10
    5882:	90 e0       	ldi	r25, 0x00	; 0
    5884:	95 83       	std	Z+5, r25	; 0x05
    5886:	84 83       	std	Z+4, r24	; 0x04
    5888:	13 82       	std	Z+3, r1	; 0x03
    588a:	06 83       	std	Z+6, r16	; 0x06
    588c:	17 82       	std	Z+7, r1	; 0x07
    588e:	f1 86       	std	Z+9, r15	; 0x09
    5890:	e0 86       	std	Z+8, r14	; 0x08
    5892:	1f bf       	out	0x3f, r17	; 63
    5894:	cf 01       	movw	r24, r30
    5896:	cd b7       	in	r28, 0x3d	; 61
    5898:	de b7       	in	r29, 0x3e	; 62
    589a:	e6 e0       	ldi	r30, 0x06	; 6
    589c:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

000058a0 <i2c_init>:
    58a0:	cf 93       	push	r28
    58a2:	00 d0       	rcall	.+0      	; 0x58a4 <i2c_init+0x4>
    58a4:	1f 92       	push	r1
    58a6:	9b 01       	movw	r18, r22
    58a8:	ac 01       	movw	r20, r24
    58aa:	cf b7       	in	r28, 0x3f	; 63
    58ac:	60 e0       	ldi	r22, 0x00	; 0
    58ae:	7d e2       	ldi	r23, 0x2D	; 45
    58b0:	81 e3       	ldi	r24, 0x31	; 49
    58b2:	91 e0       	ldi	r25, 0x01	; 1
    58b4:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    58b8:	da 01       	movw	r26, r20
    58ba:	c9 01       	movw	r24, r18
    58bc:	40 97       	sbiw	r24, 0x10	; 16
    58be:	a1 09       	sbc	r26, r1
    58c0:	b1 09       	sbc	r27, r1
    58c2:	ac 01       	movw	r20, r24
    58c4:	bd 01       	movw	r22, r26
    58c6:	76 95       	lsr	r23
    58c8:	67 95       	ror	r22
    58ca:	57 95       	ror	r21
    58cc:	47 95       	ror	r20
    58ce:	ca 01       	movw	r24, r20
    58d0:	88 27       	eor	r24, r24
    58d2:	89 2b       	or	r24, r25
    58d4:	59 f0       	breq	.+22     	; 0x58ec <i2c_init+0x4c>
    58d6:	8e ed       	ldi	r24, 0xDE	; 222
    58d8:	93 e0       	ldi	r25, 0x03	; 3
    58da:	a0 e0       	ldi	r26, 0x00	; 0
    58dc:	ed b7       	in	r30, 0x3d	; 61
    58de:	fe b7       	in	r31, 0x3e	; 62
    58e0:	81 83       	std	Z+1, r24	; 0x01
    58e2:	92 83       	std	Z+2, r25	; 0x02
    58e4:	a3 83       	std	Z+3, r26	; 0x03
    58e6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    58ea:	3a c0       	rjmp	.+116    	; 0x5960 <i2c_init+0xc0>
    58ec:	f8 94       	cli
    58ee:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    58f2:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    58f6:	81 e0       	ldi	r24, 0x01	; 1
    58f8:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
    58fc:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    5900:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
    5904:	40 9a       	sbi	0x08, 0	; 8
    5906:	41 9a       	sbi	0x08, 1	; 8
    5908:	84 e8       	ldi	r24, 0x84	; 132
    590a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    590e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    5912:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5916:	8c 7f       	andi	r24, 0xFC	; 252
    5918:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    591c:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <i2c_init_status>
    5920:	81 11       	cpse	r24, r1
    5922:	1d c0       	rjmp	.+58     	; 0x595e <i2c_init+0xbe>
    5924:	e6 e5       	ldi	r30, 0x56	; 86
    5926:	f7 e1       	ldi	r31, 0x17	; 23
    5928:	11 92       	st	Z+, r1
    592a:	11 92       	st	Z+, r1
    592c:	27 e1       	ldi	r18, 0x17	; 23
    592e:	e6 37       	cpi	r30, 0x76	; 118
    5930:	f2 07       	cpc	r31, r18
    5932:	d1 f7       	brne	.-12     	; 0x5928 <i2c_init+0x88>
    5934:	61 e0       	ldi	r22, 0x01	; 1
    5936:	70 e0       	ldi	r23, 0x00	; 0
    5938:	8c ea       	ldi	r24, 0xAC	; 172
    593a:	9b e2       	ldi	r25, 0x2B	; 43
    593c:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <set_timers>
    5940:	01 96       	adiw	r24, 0x01	; 1
    5942:	51 f4       	brne	.+20     	; 0x5958 <i2c_init+0xb8>
    5944:	87 ec       	ldi	r24, 0xC7	; 199
    5946:	93 e0       	ldi	r25, 0x03	; 3
    5948:	a0 e0       	ldi	r26, 0x00	; 0
    594a:	ed b7       	in	r30, 0x3d	; 61
    594c:	fe b7       	in	r31, 0x3e	; 62
    594e:	81 83       	std	Z+1, r24	; 0x01
    5950:	92 83       	std	Z+2, r25	; 0x02
    5952:	a3 83       	std	Z+3, r26	; 0x03
    5954:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    5958:	81 e0       	ldi	r24, 0x01	; 1
    595a:	80 93 55 17 	sts	0x1755, r24	; 0x801755 <i2c_init_status>
    595e:	cf bf       	out	0x3f, r28	; 63
    5960:	0f 90       	pop	r0
    5962:	0f 90       	pop	r0
    5964:	0f 90       	pop	r0
    5966:	cf 91       	pop	r28
    5968:	08 95       	ret

0000596a <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    596a:	61 e0       	ldi	r22, 0x01	; 1
    596c:	70 e0       	ldi	r23, 0x00	; 0
    596e:	80 e0       	ldi	r24, 0x00	; 0
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	a5 db       	rcall	.-2230   	; 0x50be <delayus>
	if(!i2c.enable || i2c.done )
    5974:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    5978:	88 23       	and	r24, r24
    597a:	39 f0       	breq	.+14     	; 0x598a <i2c_done+0x20>
		return(1);
    597c:	81 e0       	ldi	r24, 0x01	; 1
    597e:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    5982:	91 11       	cpse	r25, r1
    5984:	03 c0       	rjmp	.+6      	; 0x598c <i2c_done+0x22>
    5986:	80 e0       	ldi	r24, 0x00	; 0
    5988:	08 95       	ret
    598a:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    598c:	08 95       	ret

0000598e <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    598e:	61 e0       	ldi	r22, 0x01	; 1
    5990:	70 e0       	ldi	r23, 0x00	; 0
    5992:	80 e0       	ldi	r24, 0x00	; 0
    5994:	90 e0       	ldi	r25, 0x00	; 0
    5996:	93 db       	rcall	.-2266   	; 0x50be <delayus>
	if(!i2c_task.enable || i2c_task.done )
    5998:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    599c:	88 23       	and	r24, r24
    599e:	39 f0       	breq	.+14     	; 0x59ae <i2c_task_done+0x20>
		return(1);
    59a0:	81 e0       	ldi	r24, 0x01	; 1
    59a2:	90 91 78 17 	lds	r25, 0x1778	; 0x801778 <i2c_task+0x2>
    59a6:	91 11       	cpse	r25, r1
    59a8:	03 c0       	rjmp	.+6      	; 0x59b0 <i2c_task_done+0x22>
    59aa:	80 e0       	ldi	r24, 0x00	; 0
    59ac:	08 95       	ret
    59ae:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    59b0:	08 95       	ret

000059b2 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    59b2:	e6 e4       	ldi	r30, 0x46	; 70
    59b4:	fa e1       	ldi	r31, 0x1A	; 26
    59b6:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    59b8:	81 e0       	ldi	r24, 0x01	; 1
    59ba:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    59bc:	8a e0       	ldi	r24, 0x0A	; 10
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	95 83       	std	Z+5, r25	; 0x05
    59c2:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    59c4:	85 ea       	ldi	r24, 0xA5	; 165
    59c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    59ca:	08 95       	ret

000059cc <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    59cc:	ef 92       	push	r14
    59ce:	ff 92       	push	r15
    59d0:	0f 93       	push	r16
    59d2:	1f 93       	push	r17
    59d4:	cf 93       	push	r28
    59d6:	df 93       	push	r29
	uint8_t sreg = SREG;
    59d8:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    59da:	f8 94       	cli
	i2c_task.done = 0;
    59dc:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>
	i2c_task.error = 0;
    59e0:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
	i2c_task.ind = 0;
    59e4:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    59e8:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    59ea:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    59ec:	ee 24       	eor	r14, r14
    59ee:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    59f0:	0a e0       	ldi	r16, 0x0A	; 10
    59f2:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    59f4:	8c 2f       	mov	r24, r28
    59f6:	c6 de       	rcall	.-628    	; 0x5784 <i2c_check_op>
    59f8:	88 23       	and	r24, r24
    59fa:	d1 f0       	breq	.+52     	; 0x5a30 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    59fc:	ec 2f       	mov	r30, r28
    59fe:	ee 0f       	add	r30, r30
    5a00:	ff 0b       	sbc	r31, r31
    5a02:	ea 5a       	subi	r30, 0xAA	; 170
    5a04:	f8 4e       	sbci	r31, 0xE8	; 232
    5a06:	01 90       	ld	r0, Z+
    5a08:	f0 81       	ld	r31, Z
    5a0a:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5a0c:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5a0e:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5a10:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5a12:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5a14:	15 83       	std	Z+5, r17	; 0x05
    5a16:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    5a18:	d1 11       	cpse	r29, r1
    5a1a:	07 c0       	rjmp	.+14     	; 0x5a2a <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5a1c:	8a e0       	ldi	r24, 0x0A	; 10
    5a1e:	a6 e4       	ldi	r26, 0x46	; 70
    5a20:	ba e1       	ldi	r27, 0x1A	; 26
    5a22:	01 90       	ld	r0, Z+
    5a24:	0d 92       	st	X+, r0
    5a26:	8a 95       	dec	r24
    5a28:	e1 f7       	brne	.-8      	; 0x5a22 <i2c_task_run+0x56>
    5a2a:	cf 5f       	subi	r28, 0xFF	; 255
    5a2c:	d1 e0       	ldi	r29, 0x01	; 1
    5a2e:	e2 cf       	rjmp	.-60     	; 0x59f4 <i2c_task_run+0x28>
		}
	}

	if(run)
    5a30:	dd 23       	and	r29, r29
    5a32:	91 f0       	breq	.+36     	; 0x5a58 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5a34:	83 e8       	ldi	r24, 0x83	; 131
    5a36:	9d e2       	ldi	r25, 0x2D	; 45
    5a38:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <i2c_callback+0x1>
    5a3c:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <i2c_callback>

		i2c_task.enable = 1;
    5a40:	81 e0       	ldi	r24, 0x01	; 1
    5a42:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task>
		i2c_task.done = 0;
    5a46:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a4a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a4e:	8c 7f       	andi	r24, 0xFC	; 252
    5a50:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5a54:	ae df       	rcall	.-164    	; 0x59b2 <i2c_send_start>
    5a56:	15 c0       	rjmp	.+42     	; 0x5a82 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5a58:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5a5c:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5a60:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5a64:	81 e0       	ldi	r24, 0x01	; 1
    5a66:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5a6a:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
        i2c.enable = 0;
    5a6e:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5a72:	84 e8       	ldi	r24, 0x84	; 132
    5a74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a78:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a7c:	8c 7f       	andi	r24, 0xFC	; 252
    5a7e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5a82:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5a86:	ff be       	out	0x3f, r15	; 63

}
    5a88:	cd b7       	in	r28, 0x3d	; 61
    5a8a:	de b7       	in	r29, 0x3e	; 62
    5a8c:	e6 e0       	ldi	r30, 0x06	; 6
    5a8e:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

00005a92 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5a92:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5a94:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5a96:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5a9a:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

	i2c.enable = 1; // Enabled
    5a9e:	31 e0       	ldi	r19, 0x01	; 1
    5aa0:	30 93 47 1a 	sts	0x1A47, r19	; 0x801a47 <i2c+0x1>
	i2c.done = 0;
    5aa4:	10 92 48 1a 	sts	0x1A48, r1	; 0x801a48 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5aa8:	88 0f       	add	r24, r24
    5aaa:	61 70       	andi	r22, 0x01	; 1
    5aac:	68 2b       	or	r22, r24
    5aae:	60 93 46 1a 	sts	0x1A46, r22	; 0x801a46 <i2c>
	i2c.flags = 0;
    5ab2:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
    i2c.len = len;
    5ab6:	20 93 4c 1a 	sts	0x1A4C, r18	; 0x801a4c <i2c+0x6>
    i2c.ind = 0;
    5aba:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
    i2c.buf = buf;
    5abe:	50 93 4f 1a 	sts	0x1A4F, r21	; 0x801a4f <i2c+0x9>
    5ac2:	40 93 4e 1a 	sts	0x1A4E, r20	; 0x801a4e <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5ac6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5aca:	8c 7f       	andi	r24, 0xFC	; 252
    5acc:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5ad0:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5ad4:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5ad6:	6d df       	rcall	.-294    	; 0x59b2 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5ad8:	48 df       	rcall	.-368    	; 0x596a <i2c_done>
    5ada:	88 23       	and	r24, r24
    5adc:	e9 f3       	breq	.-6      	; 0x5ad8 <i2c_fn+0x46>
    5ade:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5ae0:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <i2c+0x3>
    5ae4:	91 11       	cpse	r25, r1
    5ae6:	80 e0       	ldi	r24, 0x00	; 0
    5ae8:	08 95       	ret

00005aea <i2c_send_stop>:
}
    5aea:	e6 e4       	ldi	r30, 0x46	; 70
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5aec:	fa e1       	ldi	r31, 0x1A	; 26
    5aee:	81 e0       	ldi	r24, 0x01	; 1
    5af0:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5af2:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5af4:	84 e9       	ldi	r24, 0x94	; 148
    5af6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    5afa:	6a e0       	ldi	r22, 0x0A	; 10
    5afc:	70 e0       	ldi	r23, 0x00	; 0
    5afe:	80 e0       	ldi	r24, 0x00	; 0
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	dd ca       	rjmp	.-2630   	; 0x50be <delayus>
    5b04:	08 95       	ret

00005b06 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5b06:	cf 93       	push	r28
    5b08:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5b0a:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    5b0e:	88 23       	and	r24, r24
    5b10:	09 f4       	brne	.+2      	; 0x5b14 <i2c_task_next_op+0xe>
    5b12:	46 c0       	rjmp	.+140    	; 0x5ba0 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5b14:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5b18:	35 de       	rcall	.-918    	; 0x5784 <i2c_check_op>
    5b1a:	88 23       	and	r24, r24
    5b1c:	b1 f0       	breq	.+44     	; 0x5b4a <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5b1e:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5b22:	ee 0f       	add	r30, r30
    5b24:	ff 0b       	sbc	r31, r31
    5b26:	ea 5a       	subi	r30, 0xAA	; 170
    5b28:	f8 4e       	sbci	r31, 0xE8	; 232
    5b2a:	c0 81       	ld	r28, Z
    5b2c:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5b2e:	8a e0       	ldi	r24, 0x0A	; 10
    5b30:	e6 e4       	ldi	r30, 0x46	; 70
    5b32:	fa e1       	ldi	r31, 0x1A	; 26
    5b34:	de 01       	movw	r26, r28
    5b36:	01 90       	ld	r0, Z+
    5b38:	0d 92       	st	X+, r0
    5b3a:	8a 95       	dec	r24
    5b3c:	e1 f7       	brne	.-8      	; 0x5b36 <i2c_task_next_op+0x30>
			if(o->flags)
    5b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b40:	88 23       	and	r24, r24
    5b42:	19 f0       	breq	.+6      	; 0x5b4a <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5b4a:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5b4e:	8f 5f       	subi	r24, 0xFF	; 255
    5b50:	19 de       	rcall	.-974    	; 0x5784 <i2c_check_op>
    5b52:	88 23       	and	r24, r24
    5b54:	29 f1       	breq	.+74     	; 0x5ba0 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5b56:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5b5a:	ef 5f       	subi	r30, 0xFF	; 255
    5b5c:	e0 93 77 17 	sts	0x1777, r30	; 0x801777 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5b60:	ee 0f       	add	r30, r30
    5b62:	ff 0b       	sbc	r31, r31
    5b64:	ea 5a       	subi	r30, 0xAA	; 170
    5b66:	f8 4e       	sbci	r31, 0xE8	; 232
    5b68:	01 90       	ld	r0, Z+
    5b6a:	f0 81       	ld	r31, Z
    5b6c:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5b6e:	81 81       	ldd	r24, Z+1	; 0x01
    5b70:	81 30       	cpi	r24, 0x01	; 1
    5b72:	19 f0       	breq	.+6      	; 0x5b7a <i2c_task_next_op+0x74>
    5b74:	82 81       	ldd	r24, Z+2	; 0x02
    5b76:	81 11       	cpse	r24, r1
    5b78:	13 c0       	rjmp	.+38     	; 0x5ba0 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5b7a:	8a e0       	ldi	r24, 0x0A	; 10
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	95 83       	std	Z+5, r25	; 0x05
    5b80:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5b82:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5b84:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5b86:	81 e0       	ldi	r24, 0x01	; 1
    5b88:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5b8a:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5b8c:	8a e0       	ldi	r24, 0x0A	; 10
    5b8e:	a6 e4       	ldi	r26, 0x46	; 70
    5b90:	ba e1       	ldi	r27, 0x1A	; 26
    5b92:	01 90       	ld	r0, Z+
    5b94:	0d 92       	st	X+, r0
    5b96:	8a 95       	dec	r24

				i2c_send_start();
    5b98:	e1 f7       	brne	.-8      	; 0x5b92 <i2c_task_next_op+0x8c>
    5b9a:	0b df       	rcall	.-490    	; 0x59b2 <i2c_send_start>

				return(1);
    5b9c:	81 e0       	ldi	r24, 0x01	; 1
    5b9e:	0f c0       	rjmp	.+30     	; 0x5bbe <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5ba0:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
	i2c_task.done = 1;
    5ba4:	81 e0       	ldi	r24, 0x01	; 1
    5ba6:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5baa:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
	i2c.enable = 0;
    5bae:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
	i2c.flags = 0;
    5bb2:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
	i2c.ind = 0;
    5bb6:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>

	i2c_send_stop();
    5bba:	97 df       	rcall	.-210    	; 0x5aea <i2c_send_stop>

	return(0);
    5bbc:	80 e0       	ldi	r24, 0x00	; 0
}
    5bbe:	df 91       	pop	r29
    5bc0:	cf 91       	pop	r28
    5bc2:	08 95       	ret

00005bc4 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5bc4:	e0 91 7a 17 	lds	r30, 0x177A	; 0x80177a <i2c_callback>
    5bc8:	f0 91 7b 17 	lds	r31, 0x177B	; 0x80177b <i2c_callback+0x1>
    5bcc:	30 97       	sbiw	r30, 0x00	; 0
    5bce:	11 f0       	breq	.+4      	; 0x5bd4 <i2c_next+0x10>
	    i2c_callback();
    5bd0:	09 95       	icall
    5bd2:	08 95       	ret
	else
		i2c_send_stop();
    5bd4:	8a cf       	rjmp	.-236    	; 0x5aea <i2c_send_stop>
    5bd6:	08 95       	ret

00005bd8 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5bd8:	1f 92       	push	r1
    5bda:	0f 92       	push	r0
    5bdc:	0f b6       	in	r0, 0x3f	; 63
    5bde:	0f 92       	push	r0
    5be0:	11 24       	eor	r1, r1
    5be2:	0b b6       	in	r0, 0x3b	; 59
    5be4:	0f 92       	push	r0
    5be6:	2f 93       	push	r18
    5be8:	3f 93       	push	r19
    5bea:	4f 93       	push	r20
    5bec:	5f 93       	push	r21
    5bee:	6f 93       	push	r22
    5bf0:	7f 93       	push	r23
    5bf2:	8f 93       	push	r24
    5bf4:	9f 93       	push	r25
    5bf6:	af 93       	push	r26
    5bf8:	bf 93       	push	r27
    5bfa:	ef 93       	push	r30
    5bfc:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5bfe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5c02:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <i2c+0x1>
    5c06:	99 23       	and	r25, r25
    5c08:	09 f1       	breq	.+66     	; 0x5c4c <__vector_26+0x74>
    5c0a:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    5c0e:	91 11       	cpse	r25, r1
    5c10:	1d c0       	rjmp	.+58     	; 0x5c4c <__vector_26+0x74>
    5c12:	20 91 4e 1a 	lds	r18, 0x1A4E	; 0x801a4e <i2c+0x8>
    5c16:	30 91 4f 1a 	lds	r19, 0x1A4F	; 0x801a4f <i2c+0x9>
    5c1a:	21 15       	cp	r18, r1
    5c1c:	31 05       	cpc	r19, r1
    5c1e:	b1 f0       	breq	.+44     	; 0x5c4c <__vector_26+0x74>
    5c20:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <i2c+0x6>
    5c24:	99 23       	and	r25, r25
    5c26:	91 f0       	breq	.+36     	; 0x5c4c <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5c28:	40 91 4a 1a 	lds	r20, 0x1A4A	; 0x801a4a <i2c+0x4>
    5c2c:	50 91 4b 1a 	lds	r21, 0x1A4B	; 0x801a4b <i2c+0x5>
    5c30:	45 2b       	or	r20, r21
    5c32:	71 f4       	brne	.+28     	; 0x5c50 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5c34:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5c38:	81 60       	ori	r24, 0x01	; 1
    5c3a:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
		i2c_task.enable = 0;
    5c3e:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5c42:	81 e0       	ldi	r24, 0x01	; 1
    5c44:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
		i2c_task.error = 1;
    5c48:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		i2c_send_stop();
    5c4c:	4e df       	rcall	.-356    	; 0x5aea <i2c_send_stop>
		return;
    5c4e:	9b c0       	rjmp	.+310    	; 0x5d86 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5c50:	88 7f       	andi	r24, 0xF8	; 248
    5c52:	80 33       	cpi	r24, 0x30	; 48
    5c54:	09 f4       	brne	.+2      	; 0x5c58 <__vector_26+0x80>
    5c56:	83 c0       	rjmp	.+262    	; 0x5d5e <__vector_26+0x186>
    5c58:	70 f4       	brcc	.+28     	; 0x5c76 <__vector_26+0x9e>
    5c5a:	88 31       	cpi	r24, 0x18	; 24
    5c5c:	09 f1       	breq	.+66     	; 0x5ca0 <__vector_26+0xc8>
    5c5e:	28 f4       	brcc	.+10     	; 0x5c6a <__vector_26+0x92>
    5c60:	88 30       	cpi	r24, 0x08	; 8
    5c62:	c9 f0       	breq	.+50     	; 0x5c96 <__vector_26+0xbe>
    5c64:	80 31       	cpi	r24, 0x10	; 16
    5c66:	b9 f0       	breq	.+46     	; 0x5c96 <__vector_26+0xbe>
    5c68:	83 c0       	rjmp	.+262    	; 0x5d70 <__vector_26+0x198>
    5c6a:	80 32       	cpi	r24, 0x20	; 32
    5c6c:	09 f4       	brne	.+2      	; 0x5c70 <__vector_26+0x98>
    5c6e:	65 c0       	rjmp	.+202    	; 0x5d3a <__vector_26+0x162>
    5c70:	88 32       	cpi	r24, 0x28	; 40
    5c72:	b1 f0       	breq	.+44     	; 0x5ca0 <__vector_26+0xc8>
    5c74:	7d c0       	rjmp	.+250    	; 0x5d70 <__vector_26+0x198>
    5c76:	88 34       	cpi	r24, 0x48	; 72
    5c78:	09 f4       	brne	.+2      	; 0x5c7c <__vector_26+0xa4>
    5c7a:	68 c0       	rjmp	.+208    	; 0x5d4c <__vector_26+0x174>
    5c7c:	38 f4       	brcc	.+14     	; 0x5c8c <__vector_26+0xb4>
    5c7e:	88 33       	cpi	r24, 0x38	; 56
    5c80:	09 f4       	brne	.+2      	; 0x5c84 <__vector_26+0xac>
    5c82:	57 c0       	rjmp	.+174    	; 0x5d32 <__vector_26+0x15a>
    5c84:	80 34       	cpi	r24, 0x40	; 64
    5c86:	09 f4       	brne	.+2      	; 0x5c8a <__vector_26+0xb2>
    5c88:	42 c0       	rjmp	.+132    	; 0x5d0e <__vector_26+0x136>
    5c8a:	72 c0       	rjmp	.+228    	; 0x5d70 <__vector_26+0x198>
    5c8c:	80 35       	cpi	r24, 0x50	; 80
    5c8e:	79 f1       	breq	.+94     	; 0x5cee <__vector_26+0x116>
    5c90:	88 35       	cpi	r24, 0x58	; 88
    5c92:	b9 f0       	breq	.+46     	; 0x5cc2 <__vector_26+0xea>
    5c94:	6d c0       	rjmp	.+218    	; 0x5d70 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5c96:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
			TWDR = i2c.address;
    5c9a:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c>
    5c9e:	0e c0       	rjmp	.+28     	; 0x5cbc <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5ca0:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5ca4:	89 17       	cp	r24, r25
    5ca6:	ec f4       	brge	.+58     	; 0x5ce2 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5ca8:	91 e0       	ldi	r25, 0x01	; 1
    5caa:	98 0f       	add	r25, r24
    5cac:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5cb0:	f9 01       	movw	r30, r18
    5cb2:	e8 0f       	add	r30, r24
    5cb4:	f1 1d       	adc	r31, r1
    5cb6:	87 fd       	sbrc	r24, 7
    5cb8:	fa 95       	dec	r31
    5cba:	80 81       	ld	r24, Z
    5cbc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cc0:	36 c0       	rjmp	.+108    	; 0x5d2e <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5cc2:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5cc6:	89 17       	cp	r24, r25
    5cc8:	64 f4       	brge	.+24     	; 0x5ce2 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5cca:	91 e0       	ldi	r25, 0x01	; 1
    5ccc:	98 0f       	add	r25, r24
    5cce:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5cd2:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cd6:	f9 01       	movw	r30, r18
    5cd8:	e8 0f       	add	r30, r24
    5cda:	f1 1d       	adc	r31, r1
    5cdc:	87 fd       	sbrc	r24, 7
    5cde:	fa 95       	dec	r31
    5ce0:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
				i2c.enable = 0;
    5ce8:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    5cec:	4b c0       	rjmp	.+150    	; 0x5d84 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5cee:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5cf2:	89 17       	cp	r24, r25
    5cf4:	64 f4       	brge	.+24     	; 0x5d0e <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5cf6:	91 e0       	ldi	r25, 0x01	; 1
    5cf8:	98 0f       	add	r25, r24
    5cfa:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5cfe:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5d02:	f9 01       	movw	r30, r18
    5d04:	e8 0f       	add	r30, r24
    5d06:	f1 1d       	adc	r31, r1
    5d08:	87 fd       	sbrc	r24, 7
    5d0a:	fa 95       	dec	r31
    5d0c:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5d0e:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5d12:	08 2e       	mov	r0, r24
    5d14:	00 0c       	add	r0, r0
    5d16:	99 0b       	sbc	r25, r25
    5d18:	01 96       	adiw	r24, 0x01	; 1
    5d1a:	20 91 4c 1a 	lds	r18, 0x1A4C	; 0x801a4c <i2c+0x6>
    5d1e:	02 2e       	mov	r0, r18
    5d20:	00 0c       	add	r0, r0
    5d22:	33 0b       	sbc	r19, r19
    5d24:	82 17       	cp	r24, r18
    5d26:	93 07       	cpc	r25, r19
    5d28:	14 f4       	brge	.+4      	; 0x5d2e <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5d2a:	85 ec       	ldi	r24, 0xC5	; 197
    5d2c:	03 c0       	rjmp	.+6      	; 0x5d34 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5d2e:	85 e8       	ldi	r24, 0x85	; 133
    5d30:	01 c0       	rjmp	.+2      	; 0x5d34 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5d32:	85 ea       	ldi	r24, 0xA5	; 165
    5d34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5d38:	26 c0       	rjmp	.+76     	; 0x5d86 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5d3a:	81 e0       	ldi	r24, 0x01	; 1
    5d3c:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d40:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5d44:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d48:	88 60       	ori	r24, 0x08	; 8
    5d4a:	1a c0       	rjmp	.+52     	; 0x5d80 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5d4c:	81 e0       	ldi	r24, 0x01	; 1
    5d4e:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d52:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5d56:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d5a:	80 61       	ori	r24, 0x10	; 16
    5d5c:	11 c0       	rjmp	.+34     	; 0x5d80 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5d5e:	81 e0       	ldi	r24, 0x01	; 1
    5d60:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d64:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5d68:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d6c:	80 62       	ori	r24, 0x20	; 32
    5d6e:	08 c0       	rjmp	.+16     	; 0x5d80 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5d70:	81 e0       	ldi	r24, 0x01	; 1
    5d72:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d76:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5d7a:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d7e:	80 64       	ori	r24, 0x40	; 64
    5d80:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
			i2c_next();
    5d84:	1f df       	rcall	.-450    	; 0x5bc4 <i2c_next>
			break;
	}
}
    5d86:	ff 91       	pop	r31
    5d88:	ef 91       	pop	r30
    5d8a:	bf 91       	pop	r27
    5d8c:	af 91       	pop	r26
    5d8e:	9f 91       	pop	r25
    5d90:	8f 91       	pop	r24
    5d92:	7f 91       	pop	r23
    5d94:	6f 91       	pop	r22
    5d96:	5f 91       	pop	r21
    5d98:	4f 91       	pop	r20
    5d9a:	3f 91       	pop	r19
    5d9c:	2f 91       	pop	r18
    5d9e:	0f 90       	pop	r0
    5da0:	0b be       	out	0x3b, r0	; 59
    5da2:	0f 90       	pop	r0
    5da4:	0f be       	out	0x3f, r0	; 63
    5da6:	0f 90       	pop	r0
    5da8:	1f 90       	pop	r1
    5daa:	18 95       	reti

00005dac <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5dac:	cf 93       	push	r28
    5dae:	00 d0       	rcall	.+0      	; 0x5db0 <i2c_print_error+0x4>
    5db0:	00 d0       	rcall	.+0      	; 0x5db2 <i2c_print_error+0x6>
    5db2:	1f 92       	push	r1
    int flags = o->flags;
    5db4:	fc 01       	movw	r30, r24
    5db6:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5db8:	cc 23       	and	r28, r28
    5dba:	09 f4       	brne	.+2      	; 0x5dbe <i2c_print_error+0x12>
    5dbc:	67 c0       	rjmp	.+206    	; 0x5e8c <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5dbe:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    5dc2:	81 11       	cpse	r24, r1
    5dc4:	03 c0       	rjmp	.+6      	; 0x5dcc <i2c_print_error+0x20>
    5dc6:	88 e2       	ldi	r24, 0x28	; 40
    5dc8:	93 e0       	ldi	r25, 0x03	; 3
    5dca:	02 c0       	rjmp	.+4      	; 0x5dd0 <i2c_print_error+0x24>
    5dcc:	83 e2       	ldi	r24, 0x23	; 35
    5dce:	93 e0       	ldi	r25, 0x03	; 3
    5dd0:	ed b7       	in	r30, 0x3d	; 61
    5dd2:	fe b7       	in	r31, 0x3e	; 62
    5dd4:	95 83       	std	Z+5, r25	; 0x05
    5dd6:	84 83       	std	Z+4, r24	; 0x04
    5dd8:	81 ec       	ldi	r24, 0xC1	; 193
    5dda:	93 e0       	ldi	r25, 0x03	; 3
    5ddc:	a0 e0       	ldi	r26, 0x00	; 0
    5dde:	81 83       	std	Z+1, r24	; 0x01
    5de0:	92 83       	std	Z+2, r25	; 0x02
    5de2:	a3 83       	std	Z+3, r26	; 0x03
    5de4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5de8:	c0 ff       	sbrs	r28, 0
    5dea:	0a c0       	rjmp	.+20     	; 0x5e00 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5dec:	83 eb       	ldi	r24, 0xB3	; 179
    5dee:	93 e0       	ldi	r25, 0x03	; 3
    5df0:	a0 e0       	ldi	r26, 0x00	; 0
    5df2:	ed b7       	in	r30, 0x3d	; 61
    5df4:	fe b7       	in	r31, 0x3e	; 62
    5df6:	81 83       	std	Z+1, r24	; 0x01
    5df8:	92 83       	std	Z+2, r25	; 0x02
    5dfa:	a3 83       	std	Z+3, r26	; 0x03
    5dfc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		if(flags & I2C_OP_LEN)
    5e00:	c1 ff       	sbrs	r28, 1
    5e02:	0a c0       	rjmp	.+20     	; 0x5e18 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5e04:	89 ea       	ldi	r24, 0xA9	; 169
    5e06:	93 e0       	ldi	r25, 0x03	; 3
    5e08:	a0 e0       	ldi	r26, 0x00	; 0
    5e0a:	ed b7       	in	r30, 0x3d	; 61
    5e0c:	fe b7       	in	r31, 0x3e	; 62
    5e0e:	81 83       	std	Z+1, r24	; 0x01
    5e10:	92 83       	std	Z+2, r25	; 0x02
    5e12:	a3 83       	std	Z+3, r26	; 0x03
    5e14:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		if(flags & I2C_OP_ERROR)
    5e18:	c2 ff       	sbrs	r28, 2
    5e1a:	0a c0       	rjmp	.+20     	; 0x5e30 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5e1c:	8d e9       	ldi	r24, 0x9D	; 157
    5e1e:	93 e0       	ldi	r25, 0x03	; 3
    5e20:	a0 e0       	ldi	r26, 0x00	; 0
    5e22:	ed b7       	in	r30, 0x3d	; 61
    5e24:	fe b7       	in	r31, 0x3e	; 62
    5e26:	81 83       	std	Z+1, r24	; 0x01
    5e28:	92 83       	std	Z+2, r25	; 0x02
    5e2a:	a3 83       	std	Z+3, r26	; 0x03
    5e2c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5e30:	c4 ff       	sbrs	r28, 4
    5e32:	0a c0       	rjmp	.+20     	; 0x5e48 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5e34:	8b e8       	ldi	r24, 0x8B	; 139
    5e36:	93 e0       	ldi	r25, 0x03	; 3
    5e38:	a0 e0       	ldi	r26, 0x00	; 0
    5e3a:	ed b7       	in	r30, 0x3d	; 61
    5e3c:	fe b7       	in	r31, 0x3e	; 62
    5e3e:	81 83       	std	Z+1, r24	; 0x01
    5e40:	92 83       	std	Z+2, r25	; 0x02
    5e42:	a3 83       	std	Z+3, r26	; 0x03
    5e44:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5e48:	c3 ff       	sbrs	r28, 3
    5e4a:	0a c0       	rjmp	.+20     	; 0x5e60 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5e4c:	89 e7       	ldi	r24, 0x79	; 121
    5e4e:	93 e0       	ldi	r25, 0x03	; 3
    5e50:	a0 e0       	ldi	r26, 0x00	; 0
    5e52:	ed b7       	in	r30, 0x3d	; 61
    5e54:	fe b7       	in	r31, 0x3e	; 62
    5e56:	81 83       	std	Z+1, r24	; 0x01
    5e58:	92 83       	std	Z+2, r25	; 0x02
    5e5a:	a3 83       	std	Z+3, r26	; 0x03
    5e5c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5e60:	c5 ff       	sbrs	r28, 5
    5e62:	0a c0       	rjmp	.+20     	; 0x5e78 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5e64:	86 e6       	ldi	r24, 0x66	; 102
    5e66:	93 e0       	ldi	r25, 0x03	; 3
    5e68:	a0 e0       	ldi	r26, 0x00	; 0
    5e6a:	ed b7       	in	r30, 0x3d	; 61
    5e6c:	fe b7       	in	r31, 0x3e	; 62
    5e6e:	81 83       	std	Z+1, r24	; 0x01
    5e70:	92 83       	std	Z+2, r25	; 0x02
    5e72:	a3 83       	std	Z+3, r26	; 0x03
    5e74:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		printf("\n");
    5e78:	84 e6       	ldi	r24, 0x64	; 100
    5e7a:	93 e0       	ldi	r25, 0x03	; 3
    5e7c:	a0 e0       	ldi	r26, 0x00	; 0
    5e7e:	ed b7       	in	r30, 0x3d	; 61
    5e80:	fe b7       	in	r31, 0x3e	; 62
    5e82:	81 83       	std	Z+1, r24	; 0x01
    5e84:	92 83       	std	Z+2, r25	; 0x02
    5e86:	a3 83       	std	Z+3, r26	; 0x03
    5e88:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	}
}
    5e8c:	0f 90       	pop	r0
    5e8e:	0f 90       	pop	r0
    5e90:	0f 90       	pop	r0
    5e92:	0f 90       	pop	r0
    5e94:	0f 90       	pop	r0
    5e96:	cf 91       	pop	r28
    5e98:	08 95       	ret

00005e9a <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5e9a:	6f 92       	push	r6
    5e9c:	7f 92       	push	r7
    5e9e:	8f 92       	push	r8
    5ea0:	af 92       	push	r10
    5ea2:	bf 92       	push	r11
    5ea4:	cf 92       	push	r12
    5ea6:	df 92       	push	r13
    5ea8:	ef 92       	push	r14
    5eaa:	0f 93       	push	r16
    5eac:	1f 93       	push	r17
    5eae:	cf 93       	push	r28
    5eb0:	df 93       	push	r29
    5eb2:	00 d0       	rcall	.+0      	; 0x5eb4 <i2c_display_task_errors+0x1a>
    5eb4:	00 d0       	rcall	.+0      	; 0x5eb6 <i2c_display_task_errors+0x1c>
    5eb6:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5eb8:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	ed b7       	in	r30, 0x3d	; 61
    5ec0:	fe b7       	in	r31, 0x3e	; 62
    5ec2:	95 83       	std	Z+5, r25	; 0x05
    5ec4:	84 83       	std	Z+4, r24	; 0x04
    5ec6:	81 e5       	ldi	r24, 0x51	; 81
    5ec8:	93 e0       	ldi	r25, 0x03	; 3
    5eca:	a0 e0       	ldi	r26, 0x00	; 0
    5ecc:	81 83       	std	Z+1, r24	; 0x01
    5ece:	92 83       	std	Z+2, r25	; 0x02
    5ed0:	a3 83       	std	Z+3, r26	; 0x03
    5ed2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5ed6:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
    5eda:	90 e0       	ldi	r25, 0x00	; 0
    5edc:	ed b7       	in	r30, 0x3d	; 61
    5ede:	fe b7       	in	r31, 0x3e	; 62
    5ee0:	95 83       	std	Z+5, r25	; 0x05
    5ee2:	84 83       	std	Z+4, r24	; 0x04
    5ee4:	8d e3       	ldi	r24, 0x3D	; 61
    5ee6:	93 e0       	ldi	r25, 0x03	; 3
    5ee8:	a0 e0       	ldi	r26, 0x00	; 0
    5eea:	81 83       	std	Z+1, r24	; 0x01
    5eec:	92 83       	std	Z+2, r25	; 0x02
    5eee:	a3 83       	std	Z+3, r26	; 0x03
    5ef0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    5ef4:	c6 e5       	ldi	r28, 0x56	; 86
    5ef6:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ef8:	00 e0       	ldi	r16, 0x00	; 0
    5efa:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5efc:	83 e3       	ldi	r24, 0x33	; 51
    5efe:	93 e0       	ldi	r25, 0x03	; 3
    5f00:	6c 01       	movw	r12, r24
    5f02:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5f04:	81 e3       	ldi	r24, 0x31	; 49
    5f06:	93 e0       	ldi	r25, 0x03	; 3
    5f08:	3c 01       	movw	r6, r24
    5f0a:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5f0c:	30 2f       	mov	r19, r16
    5f0e:	21 2f       	mov	r18, r17
    5f10:	5e 01       	movw	r10, r28
    5f12:	0f 5f       	subi	r16, 0xFF	; 255
    5f14:	1f 4f       	sbci	r17, 0xFF	; 255
    5f16:	88 81       	ld	r24, Y
    5f18:	99 81       	ldd	r25, Y+1	; 0x01
    5f1a:	89 2b       	or	r24, r25
    5f1c:	b1 f0       	breq	.+44     	; 0x5f4a <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5f1e:	ed b7       	in	r30, 0x3d	; 61
    5f20:	fe b7       	in	r31, 0x3e	; 62
    5f22:	34 83       	std	Z+4, r19	; 0x04
    5f24:	25 83       	std	Z+5, r18	; 0x05
    5f26:	c1 82       	std	Z+1, r12	; 0x01
    5f28:	d2 82       	std	Z+2, r13	; 0x02
    5f2a:	e3 82       	std	Z+3, r14	; 0x03
    5f2c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    5f30:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5f32:	f5 01       	movw	r30, r10
    5f34:	80 81       	ld	r24, Z
    5f36:	91 81       	ldd	r25, Z+1	; 0x01
    5f38:	39 df       	rcall	.-398    	; 0x5dac <i2c_print_error>
		printf("\n");
    5f3a:	ed b7       	in	r30, 0x3d	; 61
    5f3c:	fe b7       	in	r31, 0x3e	; 62
    5f3e:	61 82       	std	Z+1, r6	; 0x01
    5f40:	72 82       	std	Z+2, r7	; 0x02
    5f42:	83 82       	std	Z+3, r8	; 0x03
    5f44:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    5f48:	e1 cf       	rjmp	.-62     	; 0x5f0c <i2c_display_task_errors+0x72>
	}
}
    5f4a:	0f 90       	pop	r0
    5f4c:	0f 90       	pop	r0
    5f4e:	0f 90       	pop	r0
    5f50:	0f 90       	pop	r0
    5f52:	0f 90       	pop	r0
    5f54:	df 91       	pop	r29
    5f56:	cf 91       	pop	r28
    5f58:	1f 91       	pop	r17
    5f5a:	0f 91       	pop	r16
    5f5c:	ef 90       	pop	r14
    5f5e:	df 90       	pop	r13
    5f60:	cf 90       	pop	r12
    5f62:	bf 90       	pop	r11
    5f64:	af 90       	pop	r10
    5f66:	8f 90       	pop	r8
    5f68:	7f 90       	pop	r7
    5f6a:	6f 90       	pop	r6
    5f6c:	08 95       	ret

00005f6e <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5f6e:	6a e0       	ldi	r22, 0x0A	; 10
    5f70:	0e 94 76 e6 	call	0x1ccec	; 0x1ccec <__udivmodqi4>
    5f74:	82 95       	swap	r24
    5f76:	80 7f       	andi	r24, 0xF0	; 240
    5f78:	89 2b       	or	r24, r25
    5f7a:	08 95       	ret

00005f7c <BCDtoBIN>:
    5f7c:	98 2f       	mov	r25, r24
    5f7e:	92 95       	swap	r25
    5f80:	9f 70       	andi	r25, 0x0F	; 15
    5f82:	8f 70       	andi	r24, 0x0F	; 15
    5f84:	2a e0       	ldi	r18, 0x0A	; 10
    5f86:	92 9f       	mul	r25, r18
    5f88:	80 0d       	add	r24, r0
    5f8a:	11 24       	eor	r1, r1
    5f8c:	08 95       	ret

00005f8e <i2c_rtc_write>:
    5f8e:	ac e0       	ldi	r26, 0x0C	; 12
    5f90:	b0 e0       	ldi	r27, 0x00	; 0
    5f92:	ed ec       	ldi	r30, 0xCD	; 205
    5f94:	ff e2       	ldi	r31, 0x2F	; 47
    5f96:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    5f9a:	9f ef       	ldi	r25, 0xFF	; 255
    5f9c:	92 0f       	add	r25, r18
    5f9e:	98 30       	cpi	r25, 0x08	; 8
    5fa0:	50 f5       	brcc	.+84     	; 0x5ff6 <i2c_rtc_write+0x68>
    5fa2:	6c 83       	std	Y+4, r22	; 0x04
    5fa4:	90 e0       	ldi	r25, 0x00	; 0
    5fa6:	02 2f       	mov	r16, r18
    5fa8:	10 e0       	ldi	r17, 0x00	; 0
    5faa:	69 2f       	mov	r22, r25
    5fac:	09 2e       	mov	r0, r25
    5fae:	00 0c       	add	r0, r0
    5fb0:	77 0b       	sbc	r23, r23
    5fb2:	60 17       	cp	r22, r16
    5fb4:	71 07       	cpc	r23, r17
    5fb6:	6c f4       	brge	.+26     	; 0x5fd2 <i2c_rtc_write+0x44>
    5fb8:	a5 e0       	ldi	r26, 0x05	; 5
    5fba:	b0 e0       	ldi	r27, 0x00	; 0
    5fbc:	ac 0f       	add	r26, r28
    5fbe:	bd 1f       	adc	r27, r29
    5fc0:	a6 0f       	add	r26, r22
    5fc2:	b7 1f       	adc	r27, r23
    5fc4:	64 0f       	add	r22, r20
    5fc6:	75 1f       	adc	r23, r21
    5fc8:	fb 01       	movw	r30, r22
    5fca:	30 81       	ld	r19, Z
    5fcc:	3c 93       	st	X, r19
    5fce:	9f 5f       	subi	r25, 0xFF	; 255
    5fd0:	ec cf       	rjmp	.-40     	; 0x5faa <i2c_rtc_write+0x1c>
    5fd2:	2f 5f       	subi	r18, 0xFF	; 255
    5fd4:	ae 01       	movw	r20, r28
    5fd6:	4c 5f       	subi	r20, 0xFC	; 252
    5fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    5fda:	60 e0       	ldi	r22, 0x00	; 0
    5fdc:	5a dd       	rcall	.-1356   	; 0x5a92 <i2c_fn>
    5fde:	81 11       	cpse	r24, r1
    5fe0:	0c c0       	rjmp	.+24     	; 0x5ffa <i2c_rtc_write+0x6c>
    5fe2:	8e ed       	ldi	r24, 0xDE	; 222
    5fe4:	94 e0       	ldi	r25, 0x04	; 4
    5fe6:	a0 e0       	ldi	r26, 0x00	; 0
    5fe8:	ed b7       	in	r30, 0x3d	; 61
    5fea:	fe b7       	in	r31, 0x3e	; 62
    5fec:	81 83       	std	Z+1, r24	; 0x01
    5fee:	92 83       	std	Z+2, r25	; 0x02
    5ff0:	a3 83       	std	Z+3, r26	; 0x03
    5ff2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    5ff6:	80 e0       	ldi	r24, 0x00	; 0
    5ff8:	01 c0       	rjmp	.+2      	; 0x5ffc <i2c_rtc_write+0x6e>
    5ffa:	81 e0       	ldi	r24, 0x01	; 1
    5ffc:	2c 96       	adiw	r28, 0x0c	; 12
    5ffe:	e4 e0       	ldi	r30, 0x04	; 4
    6000:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00006004 <i2c_rtc_read>:
    6004:	a4 e0       	ldi	r26, 0x04	; 4
    6006:	b0 e0       	ldi	r27, 0x00	; 0
    6008:	e8 e0       	ldi	r30, 0x08	; 8
    600a:	f0 e3       	ldi	r31, 0x30	; 48
    600c:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
    6010:	6c 83       	std	Y+4, r22	; 0x04
    6012:	9f ef       	ldi	r25, 0xFF	; 255
    6014:	92 0f       	add	r25, r18
    6016:	98 30       	cpi	r25, 0x08	; 8
    6018:	f8 f4       	brcc	.+62     	; 0x6058 <i2c_rtc_read+0x54>
    601a:	02 2f       	mov	r16, r18
    601c:	7a 01       	movw	r14, r20
    601e:	18 2f       	mov	r17, r24
    6020:	21 e0       	ldi	r18, 0x01	; 1
    6022:	ae 01       	movw	r20, r28
    6024:	4c 5f       	subi	r20, 0xFC	; 252
    6026:	5f 4f       	sbci	r21, 0xFF	; 255
    6028:	60 e0       	ldi	r22, 0x00	; 0
    602a:	33 dd       	rcall	.-1434   	; 0x5a92 <i2c_fn>
    602c:	81 11       	cpse	r24, r1
    602e:	03 c0       	rjmp	.+6      	; 0x6036 <i2c_rtc_read+0x32>
    6030:	82 ec       	ldi	r24, 0xC2	; 194
    6032:	94 e0       	ldi	r25, 0x04	; 4
    6034:	09 c0       	rjmp	.+18     	; 0x6048 <i2c_rtc_read+0x44>
    6036:	20 2f       	mov	r18, r16
    6038:	a7 01       	movw	r20, r14
    603a:	61 e0       	ldi	r22, 0x01	; 1
    603c:	81 2f       	mov	r24, r17
    603e:	29 dd       	rcall	.-1454   	; 0x5a92 <i2c_fn>
    6040:	81 11       	cpse	r24, r1
    6042:	0c c0       	rjmp	.+24     	; 0x605c <i2c_rtc_read+0x58>
    6044:	89 ea       	ldi	r24, 0xA9	; 169
    6046:	94 e0       	ldi	r25, 0x04	; 4
    6048:	a0 e0       	ldi	r26, 0x00	; 0
    604a:	ed b7       	in	r30, 0x3d	; 61
    604c:	fe b7       	in	r31, 0x3e	; 62
    604e:	81 83       	std	Z+1, r24	; 0x01
    6050:	92 83       	std	Z+2, r25	; 0x02
    6052:	a3 83       	std	Z+3, r26	; 0x03
    6054:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    6058:	80 e0       	ldi	r24, 0x00	; 0
    605a:	01 c0       	rjmp	.+2      	; 0x605e <i2c_rtc_read+0x5a>
    605c:	81 e0       	ldi	r24, 0x01	; 1
    605e:	24 96       	adiw	r28, 0x04	; 4
    6060:	e6 e0       	ldi	r30, 0x06	; 6
    6062:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

00006066 <i2c_rtc_init>:
    6066:	60 ea       	ldi	r22, 0xA0	; 160
    6068:	76 e8       	ldi	r23, 0x86	; 134
    606a:	81 e0       	ldi	r24, 0x01	; 1
    606c:	90 e0       	ldi	r25, 0x00	; 0
    606e:	18 cc       	rjmp	.-2000   	; 0x58a0 <i2c_init>
    6070:	08 95       	ret

00006072 <rtc_write>:
    6072:	ab e0       	ldi	r26, 0x0B	; 11
    6074:	b0 e0       	ldi	r27, 0x00	; 0
    6076:	ef e3       	ldi	r30, 0x3F	; 63
    6078:	f0 e3       	ldi	r31, 0x30	; 48
    607a:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    607e:	8c 01       	movw	r16, r24
    6080:	fc 01       	movw	r30, r24
    6082:	80 81       	ld	r24, Z
    6084:	74 df       	rcall	.-280    	; 0x5f6e <BINtoBCD>
    6086:	8f 77       	andi	r24, 0x7F	; 127
    6088:	8c 83       	std	Y+4, r24	; 0x04
    608a:	f8 01       	movw	r30, r16
    608c:	82 81       	ldd	r24, Z+2	; 0x02
    608e:	6f df       	rcall	.-290    	; 0x5f6e <BINtoBCD>
    6090:	8f 77       	andi	r24, 0x7F	; 127
    6092:	8d 83       	std	Y+5, r24	; 0x05
    6094:	f8 01       	movw	r30, r16
    6096:	84 81       	ldd	r24, Z+4	; 0x04
    6098:	6a df       	rcall	.-300    	; 0x5f6e <BINtoBCD>
    609a:	8f 73       	andi	r24, 0x3F	; 63
    609c:	8e 83       	std	Y+6, r24	; 0x06
    609e:	f8 01       	movw	r30, r16
    60a0:	84 85       	ldd	r24, Z+12	; 0x0c
    60a2:	87 70       	andi	r24, 0x07	; 7
    60a4:	8f 5f       	subi	r24, 0xFF	; 255
    60a6:	8f 83       	std	Y+7, r24	; 0x07
    60a8:	86 81       	ldd	r24, Z+6	; 0x06
    60aa:	61 df       	rcall	.-318    	; 0x5f6e <BINtoBCD>
    60ac:	8f 73       	andi	r24, 0x3F	; 63
    60ae:	88 87       	std	Y+8, r24	; 0x08
    60b0:	f8 01       	movw	r30, r16
    60b2:	80 85       	ldd	r24, Z+8	; 0x08
    60b4:	8f 5f       	subi	r24, 0xFF	; 255
    60b6:	5b df       	rcall	.-330    	; 0x5f6e <BINtoBCD>
    60b8:	8f 71       	andi	r24, 0x1F	; 31
    60ba:	89 87       	std	Y+9, r24	; 0x09
    60bc:	f8 01       	movw	r30, r16
    60be:	82 85       	ldd	r24, Z+10	; 0x0a
    60c0:	84 56       	subi	r24, 0x64	; 100
    60c2:	55 df       	rcall	.-342    	; 0x5f6e <BINtoBCD>
    60c4:	8a 87       	std	Y+10, r24	; 0x0a
    60c6:	83 e9       	ldi	r24, 0x93	; 147
    60c8:	8b 87       	std	Y+11, r24	; 0x0b
    60ca:	28 e0       	ldi	r18, 0x08	; 8
    60cc:	ae 01       	movw	r20, r28
    60ce:	4c 5f       	subi	r20, 0xFC	; 252
    60d0:	5f 4f       	sbci	r21, 0xFF	; 255
    60d2:	60 e0       	ldi	r22, 0x00	; 0
    60d4:	88 e6       	ldi	r24, 0x68	; 104
    60d6:	5b df       	rcall	.-330    	; 0x5f8e <i2c_rtc_write>
    60d8:	81 11       	cpse	r24, r1
    60da:	0c c0       	rjmp	.+24     	; 0x60f4 <rtc_write+0x82>
    60dc:	88 e9       	ldi	r24, 0x98	; 152
    60de:	94 e0       	ldi	r25, 0x04	; 4
    60e0:	a0 e0       	ldi	r26, 0x00	; 0
    60e2:	ed b7       	in	r30, 0x3d	; 61
    60e4:	fe b7       	in	r31, 0x3e	; 62
    60e6:	81 83       	std	Z+1, r24	; 0x01
    60e8:	92 83       	std	Z+2, r25	; 0x02
    60ea:	a3 83       	std	Z+3, r26	; 0x03
    60ec:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    60f0:	80 e0       	ldi	r24, 0x00	; 0
    60f2:	01 c0       	rjmp	.+2      	; 0x60f6 <rtc_write+0x84>
    60f4:	81 e0       	ldi	r24, 0x01	; 1
    60f6:	2b 96       	adiw	r28, 0x0b	; 11
    60f8:	e4 e0       	ldi	r30, 0x04	; 4
    60fa:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

000060fe <rtc_read>:
    60fe:	ab e0       	ldi	r26, 0x0B	; 11
    6100:	b0 e0       	ldi	r27, 0x00	; 0
    6102:	e5 e8       	ldi	r30, 0x85	; 133
    6104:	f0 e3       	ldi	r31, 0x30	; 48
    6106:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    610a:	8c 01       	movw	r16, r24
    610c:	28 e0       	ldi	r18, 0x08	; 8
    610e:	ae 01       	movw	r20, r28
    6110:	4c 5f       	subi	r20, 0xFC	; 252
    6112:	5f 4f       	sbci	r21, 0xFF	; 255
    6114:	60 e0       	ldi	r22, 0x00	; 0
    6116:	88 e6       	ldi	r24, 0x68	; 104
    6118:	75 df       	rcall	.-278    	; 0x6004 <i2c_rtc_read>
    611a:	81 11       	cpse	r24, r1
    611c:	0c c0       	rjmp	.+24     	; 0x6136 <rtc_read+0x38>
    611e:	88 e8       	ldi	r24, 0x88	; 136
    6120:	94 e0       	ldi	r25, 0x04	; 4
    6122:	a0 e0       	ldi	r26, 0x00	; 0
    6124:	ed b7       	in	r30, 0x3d	; 61
    6126:	fe b7       	in	r31, 0x3e	; 62
    6128:	81 83       	std	Z+1, r24	; 0x01
    612a:	92 83       	std	Z+2, r25	; 0x02
    612c:	a3 83       	std	Z+3, r26	; 0x03
    612e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    6132:	80 e0       	ldi	r24, 0x00	; 0
    6134:	33 c0       	rjmp	.+102    	; 0x619c <rtc_read+0x9e>
    6136:	8c 81       	ldd	r24, Y+4	; 0x04
    6138:	8f 77       	andi	r24, 0x7F	; 127
    613a:	20 df       	rcall	.-448    	; 0x5f7c <BCDtoBIN>
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	f8 01       	movw	r30, r16
    6140:	91 83       	std	Z+1, r25	; 0x01
    6142:	80 83       	st	Z, r24
    6144:	8d 81       	ldd	r24, Y+5	; 0x05
    6146:	8f 77       	andi	r24, 0x7F	; 127
    6148:	19 df       	rcall	.-462    	; 0x5f7c <BCDtoBIN>
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	f8 01       	movw	r30, r16
    614e:	93 83       	std	Z+3, r25	; 0x03
    6150:	82 83       	std	Z+2, r24	; 0x02
    6152:	8e 81       	ldd	r24, Y+6	; 0x06
    6154:	8f 73       	andi	r24, 0x3F	; 63
    6156:	12 df       	rcall	.-476    	; 0x5f7c <BCDtoBIN>
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	f8 01       	movw	r30, r16
    615c:	95 83       	std	Z+5, r25	; 0x05
    615e:	84 83       	std	Z+4, r24	; 0x04
    6160:	8f 81       	ldd	r24, Y+7	; 0x07
    6162:	87 70       	andi	r24, 0x07	; 7
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	01 97       	sbiw	r24, 0x01	; 1
    6168:	95 87       	std	Z+13, r25	; 0x0d
    616a:	84 87       	std	Z+12, r24	; 0x0c
    616c:	88 85       	ldd	r24, Y+8	; 0x08
    616e:	8f 73       	andi	r24, 0x3F	; 63
    6170:	05 df       	rcall	.-502    	; 0x5f7c <BCDtoBIN>
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	f8 01       	movw	r30, r16
    6176:	97 83       	std	Z+7, r25	; 0x07
    6178:	86 83       	std	Z+6, r24	; 0x06
    617a:	89 85       	ldd	r24, Y+9	; 0x09
    617c:	8f 71       	andi	r24, 0x1F	; 31
    617e:	fe de       	rcall	.-516    	; 0x5f7c <BCDtoBIN>
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	01 97       	sbiw	r24, 0x01	; 1
    6184:	f8 01       	movw	r30, r16
    6186:	91 87       	std	Z+9, r25	; 0x09
    6188:	80 87       	std	Z+8, r24	; 0x08
    618a:	8a 85       	ldd	r24, Y+10	; 0x0a
    618c:	f7 de       	rcall	.-530    	; 0x5f7c <BCDtoBIN>
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	8c 59       	subi	r24, 0x9C	; 156
    6192:	9f 4f       	sbci	r25, 0xFF	; 255
    6194:	f8 01       	movw	r30, r16
    6196:	93 87       	std	Z+11, r25	; 0x0b
    6198:	82 87       	std	Z+10, r24	; 0x0a
    619a:	81 e0       	ldi	r24, 0x01	; 1
    619c:	2b 96       	adiw	r28, 0x0b	; 11
    619e:	e4 e0       	ldi	r30, 0x04	; 4
    61a0:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

000061a4 <rtc_run>:
    61a4:	a4 e0       	ldi	r26, 0x04	; 4
    61a6:	b0 e0       	ldi	r27, 0x00	; 0
    61a8:	e8 ed       	ldi	r30, 0xD8	; 216
    61aa:	f0 e3       	ldi	r31, 0x30	; 48
    61ac:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    61b0:	8c 01       	movw	r16, r24
    61b2:	21 e0       	ldi	r18, 0x01	; 1
    61b4:	ae 01       	movw	r20, r28
    61b6:	4c 5f       	subi	r20, 0xFC	; 252
    61b8:	5f 4f       	sbci	r21, 0xFF	; 255
    61ba:	60 e0       	ldi	r22, 0x00	; 0
    61bc:	88 e6       	ldi	r24, 0x68	; 104
    61be:	22 df       	rcall	.-444    	; 0x6004 <i2c_rtc_read>
    61c0:	81 11       	cpse	r24, r1
    61c2:	03 c0       	rjmp	.+6      	; 0x61ca <rtc_run+0x26>
    61c4:	84 e7       	ldi	r24, 0x74	; 116
    61c6:	94 e0       	ldi	r25, 0x04	; 4
    61c8:	24 c0       	rjmp	.+72     	; 0x6212 <rtc_run+0x6e>
    61ca:	8c 81       	ldd	r24, Y+4	; 0x04
    61cc:	0f 3f       	cpi	r16, 0xFF	; 255
    61ce:	ff ef       	ldi	r31, 0xFF	; 255
    61d0:	1f 07       	cpc	r17, r31
    61d2:	59 f4       	brne	.+22     	; 0x61ea <rtc_run+0x46>
    61d4:	08 2e       	mov	r0, r24
    61d6:	00 0c       	add	r0, r0
    61d8:	99 0b       	sbc	r25, r25
    61da:	80 95       	com	r24
    61dc:	90 95       	com	r25
    61de:	89 2f       	mov	r24, r25
    61e0:	88 1f       	adc	r24, r24
    61e2:	88 27       	eor	r24, r24
    61e4:	88 1f       	adc	r24, r24
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	20 c0       	rjmp	.+64     	; 0x622a <rtc_run+0x86>
    61ea:	8f 77       	andi	r24, 0x7F	; 127
    61ec:	01 15       	cp	r16, r1
    61ee:	11 05       	cpc	r17, r1
    61f0:	11 f4       	brne	.+4      	; 0x61f6 <rtc_run+0x52>
    61f2:	90 e8       	ldi	r25, 0x80	; 128
    61f4:	01 c0       	rjmp	.+2      	; 0x61f8 <rtc_run+0x54>
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	89 2b       	or	r24, r25
    61fa:	8c 83       	std	Y+4, r24	; 0x04
    61fc:	21 e0       	ldi	r18, 0x01	; 1
    61fe:	ae 01       	movw	r20, r28
    6200:	4c 5f       	subi	r20, 0xFC	; 252
    6202:	5f 4f       	sbci	r21, 0xFF	; 255
    6204:	60 e0       	ldi	r22, 0x00	; 0
    6206:	88 e6       	ldi	r24, 0x68	; 104
    6208:	c2 de       	rcall	.-636    	; 0x5f8e <i2c_rtc_write>
    620a:	81 11       	cpse	r24, r1
    620c:	0d c0       	rjmp	.+26     	; 0x6228 <rtc_run+0x84>
    620e:	8f e5       	ldi	r24, 0x5F	; 95
    6210:	94 e0       	ldi	r25, 0x04	; 4
    6212:	a0 e0       	ldi	r26, 0x00	; 0
    6214:	ed b7       	in	r30, 0x3d	; 61
    6216:	fe b7       	in	r31, 0x3e	; 62
    6218:	81 83       	std	Z+1, r24	; 0x01
    621a:	92 83       	std	Z+2, r25	; 0x02
    621c:	a3 83       	std	Z+3, r26	; 0x03
    621e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    6222:	8f ef       	ldi	r24, 0xFF	; 255
    6224:	9f ef       	ldi	r25, 0xFF	; 255
    6226:	01 c0       	rjmp	.+2      	; 0x622a <rtc_run+0x86>
    6228:	c8 01       	movw	r24, r16
    622a:	24 96       	adiw	r28, 0x04	; 4
    622c:	e4 e0       	ldi	r30, 0x04	; 4
    622e:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00006232 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    6232:	a7 e0       	ldi	r26, 0x07	; 7
    6234:	b0 e0       	ldi	r27, 0x00	; 0
    6236:	ef e1       	ldi	r30, 0x1F	; 31
    6238:	f1 e3       	ldi	r31, 0x31	; 49
    623a:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    623e:	8c 01       	movw	r16, r24
    6240:	4c 83       	std	Y+4, r20	; 0x04
    6242:	5d 83       	std	Y+5, r21	; 0x05
    6244:	6e 83       	std	Y+6, r22	; 0x06
    6246:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    6248:	0e df       	rcall	.-484    	; 0x6066 <i2c_rtc_init>

    if(!force)
    624a:	01 15       	cp	r16, r1
    624c:	11 05       	cpc	r17, r1
    624e:	39 f4       	brne	.+14     	; 0x625e <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    6250:	8f ef       	ldi	r24, 0xFF	; 255
    6252:	9f ef       	ldi	r25, 0xFF	; 255
    6254:	a7 df       	rcall	.-178    	; 0x61a4 <rtc_run>
        if(state < 0)
    6256:	87 fd       	sbrc	r24, 7
    6258:	16 c0       	rjmp	.+44     	; 0x6286 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    625a:	81 11       	cpse	r24, r1
    625c:	22 c0       	rjmp	.+68     	; 0x62a2 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    625e:	80 e0       	ldi	r24, 0x00	; 0
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	a0 df       	rcall	.-192    	; 0x61a4 <rtc_run>
    6264:	97 fd       	sbrc	r25, 7
    6266:	0f c0       	rjmp	.+30     	; 0x6286 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    6268:	ce 01       	movw	r24, r28
    626a:	04 96       	adiw	r24, 0x04	; 4
    626c:	a3 d6       	rcall	.+3398   	; 0x6fb4 <gmtime>
    626e:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    6270:	81 f4       	brne	.+32     	; 0x6292 <rtc_init+0x60>
    6272:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    6274:	94 e0       	ldi	r25, 0x04	; 4
    6276:	a0 e0       	ldi	r26, 0x00	; 0
    6278:	ed b7       	in	r30, 0x3d	; 61
    627a:	fe b7       	in	r31, 0x3e	; 62
    627c:	81 83       	std	Z+1, r24	; 0x01
    627e:	92 83       	std	Z+2, r25	; 0x02
    6280:	a3 83       	std	Z+3, r26	; 0x03
    6282:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    6286:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <rtc_ok+0x1>
            rtc_ok = 0;
    628a:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <rtc_ok>
            return 0;
    628e:	80 e0       	ldi	r24, 0x00	; 0
    6290:	0e c0       	rjmp	.+28     	; 0x62ae <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    6292:	ef de       	rcall	.-546    	; 0x6072 <rtc_write>
    6294:	88 23       	and	r24, r24
    6296:	69 f3       	breq	.-38     	; 0x6272 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	90 e0       	ldi	r25, 0x00	; 0
    629c:	83 df       	rcall	.-250    	; 0x61a4 <rtc_run>
    629e:	97 fd       	sbrc	r25, 7
    62a0:	f2 cf       	rjmp	.-28     	; 0x6286 <rtc_init+0x54>
    62a2:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <rtc_ok+0x1>
    62aa:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <rtc_ok>
    62ae:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    62b0:	e4 e0       	ldi	r30, 0x04	; 4
    62b2:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

000062b6 <islower>:
    62b6:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    62b8:	21 56       	subi	r18, 0x61	; 97
    62ba:	31 09       	sbc	r19, r1
    62bc:	81 e0       	ldi	r24, 0x01	; 1
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	2a 31       	cpi	r18, 0x1A	; 26
    62c2:	31 05       	cpc	r19, r1
    62c4:	10 f0       	brcs	.+4      	; 0x62ca <islower+0x14>
    62c6:	80 e0       	ldi	r24, 0x00	; 0
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	08 95       	ret

000062cc <toupper>:
    62cc:	cf 93       	push	r28
    62ce:	df 93       	push	r29
    62d0:	ec 01       	movw	r28, r24
    62d2:	f1 df       	rcall	.-30     	; 0x62b6 <islower>
    62d4:	89 2b       	or	r24, r25
    62d6:	19 f0       	breq	.+6      	; 0x62de <toupper+0x12>
    62d8:	ce 01       	movw	r24, r28
    62da:	80 97       	sbiw	r24, 0x20	; 32
    62dc:	01 c0       	rjmp	.+2      	; 0x62e0 <toupper+0x14>
    62de:	ce 01       	movw	r24, r28
    62e0:	df 91       	pop	r29
    62e2:	cf 91       	pop	r28
    62e4:	08 95       	ret

000062e6 <strcpy>:
    62e6:	fc 01       	movw	r30, r24
    62e8:	db 01       	movw	r26, r22
    62ea:	2d 91       	ld	r18, X+
    62ec:	bd 01       	movw	r22, r26
    62ee:	01 96       	adiw	r24, 0x01	; 1
    62f0:	22 23       	and	r18, r18
    62f2:	11 f0       	breq	.+4      	; 0x62f8 <strcpy+0x12>
    62f4:	20 83       	st	Z, r18
    62f6:	f7 cf       	rjmp	.-18     	; 0x62e6 <strcpy>
    62f8:	10 82       	st	Z, r1
    62fa:	08 95       	ret

000062fc <strncpy>:
    62fc:	db 01       	movw	r26, r22
    62fe:	fc 01       	movw	r30, r24
    6300:	2d 91       	ld	r18, X+
    6302:	21 11       	cpse	r18, r1
    6304:	03 c0       	rjmp	.+6      	; 0x630c <strncpy+0x10>
    6306:	4e 0f       	add	r20, r30
    6308:	5f 1f       	adc	r21, r31
    630a:	08 c0       	rjmp	.+16     	; 0x631c <strncpy+0x20>
    630c:	41 15       	cp	r20, r1
    630e:	51 05       	cpc	r21, r1
    6310:	21 f0       	breq	.+8      	; 0x631a <strncpy+0x1e>
    6312:	21 93       	st	Z+, r18
    6314:	41 50       	subi	r20, 0x01	; 1
    6316:	51 09       	sbc	r21, r1
    6318:	f3 cf       	rjmp	.-26     	; 0x6300 <strncpy+0x4>
    631a:	08 95       	ret
    631c:	4e 17       	cp	r20, r30
    631e:	5f 07       	cpc	r21, r31
    6320:	11 f0       	breq	.+4      	; 0x6326 <strncpy+0x2a>
    6322:	11 92       	st	Z+, r1
    6324:	fb cf       	rjmp	.-10     	; 0x631c <strncpy+0x20>
    6326:	08 95       	ret

00006328 <strcat>:
    6328:	cf 93       	push	r28
    632a:	df 93       	push	r29
    632c:	d8 2f       	mov	r29, r24
    632e:	c9 2f       	mov	r28, r25
    6330:	28 2f       	mov	r18, r24
    6332:	39 2f       	mov	r19, r25
    6334:	c9 01       	movw	r24, r18
    6336:	2f 5f       	subi	r18, 0xFF	; 255
    6338:	3f 4f       	sbci	r19, 0xFF	; 255
    633a:	fc 01       	movw	r30, r24
    633c:	40 81       	ld	r20, Z
    633e:	41 11       	cpse	r20, r1
    6340:	f9 cf       	rjmp	.-14     	; 0x6334 <strcat+0xc>
    6342:	d1 df       	rcall	.-94     	; 0x62e6 <strcpy>
    6344:	8d 2f       	mov	r24, r29
    6346:	9c 2f       	mov	r25, r28
    6348:	df 91       	pop	r29
    634a:	cf 91       	pop	r28
    634c:	08 95       	ret

0000634e <reverse>:
    634e:	fc 01       	movw	r30, r24
    6350:	01 90       	ld	r0, Z+
    6352:	00 20       	and	r0, r0
    6354:	e9 f7       	brne	.-6      	; 0x6350 <reverse+0x2>
    6356:	31 97       	sbiw	r30, 0x01	; 1
    6358:	e8 1b       	sub	r30, r24
    635a:	f9 0b       	sbc	r31, r25
    635c:	af 01       	movw	r20, r30
    635e:	55 95       	asr	r21
    6360:	47 95       	ror	r20
    6362:	e8 0f       	add	r30, r24
    6364:	f9 1f       	adc	r31, r25
    6366:	dc 01       	movw	r26, r24
    6368:	9d 01       	movw	r18, r26
    636a:	28 1b       	sub	r18, r24
    636c:	39 0b       	sbc	r19, r25
    636e:	24 17       	cp	r18, r20
    6370:	35 07       	cpc	r19, r21
    6372:	2c f4       	brge	.+10     	; 0x637e <reverse+0x30>
    6374:	22 91       	ld	r18, -Z
    6376:	3c 91       	ld	r19, X
    6378:	30 83       	st	Z, r19
    637a:	2d 93       	st	X+, r18
    637c:	f5 cf       	rjmp	.-22     	; 0x6368 <reverse+0x1a>
    637e:	08 95       	ret

00006380 <strupper>:
    6380:	cf 93       	push	r28
    6382:	df 93       	push	r29
    6384:	ec 01       	movw	r28, r24
    6386:	88 81       	ld	r24, Y
    6388:	88 23       	and	r24, r24
    638a:	21 f0       	breq	.+8      	; 0x6394 <strupper+0x14>
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	9e df       	rcall	.-196    	; 0x62cc <toupper>
    6390:	89 93       	st	Y+, r24
    6392:	f9 cf       	rjmp	.-14     	; 0x6386 <strupper+0x6>
    6394:	df 91       	pop	r29
    6396:	cf 91       	pop	r28
    6398:	08 95       	ret

0000639a <strcmp>:
    639a:	dc 01       	movw	r26, r24
    639c:	fb 01       	movw	r30, r22
    639e:	2d 91       	ld	r18, X+
    63a0:	41 91       	ld	r20, Z+
    63a2:	50 e0       	ldi	r21, 0x00	; 0
    63a4:	30 e0       	ldi	r19, 0x00	; 0
    63a6:	c9 01       	movw	r24, r18
    63a8:	84 1b       	sub	r24, r20
    63aa:	95 0b       	sbc	r25, r21
    63ac:	11 f4       	brne	.+4      	; 0x63b2 <strcmp+0x18>
    63ae:	45 2b       	or	r20, r21
    63b0:	b1 f7       	brne	.-20     	; 0x639e <strcmp+0x4>
    63b2:	08 95       	ret

000063b4 <strcasecmp>:
    63b4:	ef 92       	push	r14
    63b6:	ff 92       	push	r15
    63b8:	0f 93       	push	r16
    63ba:	1f 93       	push	r17
    63bc:	cf 93       	push	r28
    63be:	df 93       	push	r29
    63c0:	7c 01       	movw	r14, r24
    63c2:	8b 01       	movw	r16, r22
    63c4:	f7 01       	movw	r30, r14
    63c6:	81 91       	ld	r24, Z+
    63c8:	7f 01       	movw	r14, r30
    63ca:	90 e0       	ldi	r25, 0x00	; 0
    63cc:	7f df       	rcall	.-258    	; 0x62cc <toupper>
    63ce:	ec 01       	movw	r28, r24
    63d0:	f8 01       	movw	r30, r16
    63d2:	81 91       	ld	r24, Z+
    63d4:	8f 01       	movw	r16, r30
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	79 df       	rcall	.-270    	; 0x62cc <toupper>
    63da:	9c 01       	movw	r18, r24
    63dc:	ce 01       	movw	r24, r28
    63de:	82 1b       	sub	r24, r18
    63e0:	93 0b       	sbc	r25, r19
    63e2:	11 f4       	brne	.+4      	; 0x63e8 <strcasecmp+0x34>
    63e4:	23 2b       	or	r18, r19
    63e6:	71 f7       	brne	.-36     	; 0x63c4 <strcasecmp+0x10>
    63e8:	cd b7       	in	r28, 0x3d	; 61
    63ea:	de b7       	in	r29, 0x3e	; 62
    63ec:	e6 e0       	ldi	r30, 0x06	; 6
    63ee:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

000063f2 <strncasecmp>:
    63f2:	a0 e0       	ldi	r26, 0x00	; 0
    63f4:	b0 e0       	ldi	r27, 0x00	; 0
    63f6:	ef ef       	ldi	r30, 0xFF	; 255
    63f8:	f1 e3       	ldi	r31, 0x31	; 49
    63fa:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    63fe:	8c 01       	movw	r16, r24
    6400:	7b 01       	movw	r14, r22
    6402:	6c 01       	movw	r12, r24
    6404:	c4 0e       	add	r12, r20
    6406:	d5 1e       	adc	r13, r21
    6408:	0c 15       	cp	r16, r12
    640a:	1d 05       	cpc	r17, r13
    640c:	99 f0       	breq	.+38     	; 0x6434 <strncasecmp+0x42>
    640e:	f8 01       	movw	r30, r16
    6410:	81 91       	ld	r24, Z+
    6412:	8f 01       	movw	r16, r30
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	5a df       	rcall	.-332    	; 0x62cc <toupper>
    6418:	ec 01       	movw	r28, r24
    641a:	f7 01       	movw	r30, r14
    641c:	81 91       	ld	r24, Z+
    641e:	7f 01       	movw	r14, r30
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	54 df       	rcall	.-344    	; 0x62cc <toupper>
    6424:	9c 01       	movw	r18, r24
    6426:	ce 01       	movw	r24, r28
    6428:	82 1b       	sub	r24, r18
    642a:	93 0b       	sbc	r25, r19
    642c:	29 f4       	brne	.+10     	; 0x6438 <strncasecmp+0x46>
    642e:	23 2b       	or	r18, r19
    6430:	59 f7       	brne	.-42     	; 0x6408 <strncasecmp+0x16>
    6432:	02 c0       	rjmp	.+4      	; 0x6438 <strncasecmp+0x46>
    6434:	80 e0       	ldi	r24, 0x00	; 0
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	cd b7       	in	r28, 0x3d	; 61
    643a:	de b7       	in	r29, 0x3e	; 62
    643c:	e8 e0       	ldi	r30, 0x08	; 8
    643e:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

00006442 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    6442:	0f 93       	push	r16
    6444:	1f 93       	push	r17
    6446:	cf 93       	push	r28
    6448:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    644a:	00 97       	sbiw	r24, 0x00	; 0
    644c:	99 f0       	breq	.+38     	; 0x6474 <stralloc+0x32>
    644e:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6450:	fc 01       	movw	r30, r24
    6452:	01 90       	ld	r0, Z+
    6454:	00 20       	and	r0, r0
    6456:	e9 f7       	brne	.-6      	; 0x6452 <stralloc+0x10>
    6458:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    645a:	61 e0       	ldi	r22, 0x01	; 1
    645c:	70 e0       	ldi	r23, 0x00	; 0
    645e:	8c 1b       	sub	r24, r28
    6460:	9d 0b       	sbc	r25, r29
    6462:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
    6466:	8c 01       	movw	r16, r24
    if(!ptr)
    6468:	00 97       	sbiw	r24, 0x00	; 0
    646a:	21 f0       	breq	.+8      	; 0x6474 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    646c:	be 01       	movw	r22, r28
    646e:	3b df       	rcall	.-394    	; 0x62e6 <strcpy>
    return(ptr);
    6470:	c8 01       	movw	r24, r16
    6472:	02 c0       	rjmp	.+4      	; 0x6478 <stralloc+0x36>
    6474:	80 e0       	ldi	r24, 0x00	; 0
    6476:	90 e0       	ldi	r25, 0x00	; 0
}
    6478:	df 91       	pop	r29
    647a:	cf 91       	pop	r28
    647c:	1f 91       	pop	r17
    647e:	0f 91       	pop	r16
    6480:	08 95       	ret

00006482 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6482:	00 d0       	rcall	.+0      	; 0x6484 <sep+0x2>
    6484:	1f 92       	push	r1
    6486:	8e e1       	ldi	r24, 0x1E	; 30
    6488:	95 e0       	ldi	r25, 0x05	; 5
    648a:	a0 e0       	ldi	r26, 0x00	; 0
    648c:	ed b7       	in	r30, 0x3d	; 61
    648e:	fe b7       	in	r31, 0x3e	; 62
    6490:	81 83       	std	Z+1, r24	; 0x01
    6492:	92 83       	std	Z+2, r25	; 0x02
    6494:	a3 83       	std	Z+3, r26	; 0x03
    6496:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    649a:	0f 90       	pop	r0
    649c:	0f 90       	pop	r0
    649e:	0f 90       	pop	r0
    64a0:	08 95       	ret

000064a2 <trim_tail>:
    64a2:	00 97       	sbiw	r24, 0x00	; 0
    64a4:	69 f0       	breq	.+26     	; 0x64c0 <trim_tail+0x1e>
    64a6:	fc 01       	movw	r30, r24
    64a8:	01 90       	ld	r0, Z+
    64aa:	00 20       	and	r0, r0
    64ac:	e9 f7       	brne	.-6      	; 0x64a8 <trim_tail+0x6>
    64ae:	31 97       	sbiw	r30, 0x01	; 1
    64b0:	e8 17       	cp	r30, r24
    64b2:	f9 07       	cpc	r31, r25
    64b4:	29 f0       	breq	.+10     	; 0x64c0 <trim_tail+0x1e>
    64b6:	22 91       	ld	r18, -Z
    64b8:	21 32       	cpi	r18, 0x21	; 33
    64ba:	10 f4       	brcc	.+4      	; 0x64c0 <trim_tail+0x1e>
    64bc:	10 82       	st	Z, r1
    64be:	f8 cf       	rjmp	.-16     	; 0x64b0 <trim_tail+0xe>
    64c0:	08 95       	ret

000064c2 <skipspaces>:
    64c2:	00 97       	sbiw	r24, 0x00	; 0
    64c4:	39 f0       	breq	.+14     	; 0x64d4 <skipspaces+0x12>
    64c6:	fc 01       	movw	r30, r24
    64c8:	cf 01       	movw	r24, r30
    64ca:	21 91       	ld	r18, Z+
    64cc:	20 32       	cpi	r18, 0x20	; 32
    64ce:	e1 f3       	breq	.-8      	; 0x64c8 <skipspaces+0x6>
    64d0:	29 30       	cpi	r18, 0x09	; 9
    64d2:	d1 f3       	breq	.-12     	; 0x64c8 <skipspaces+0x6>
    64d4:	08 95       	ret

000064d6 <MATCH>:
    64d6:	cf 93       	push	r28
    64d8:	df 93       	push	r29
    64da:	fb 01       	movw	r30, r22
    64dc:	01 90       	ld	r0, Z+
    64de:	00 20       	and	r0, r0
    64e0:	e9 f7       	brne	.-6      	; 0x64dc <MATCH+0x6>
    64e2:	31 97       	sbiw	r30, 0x01	; 1
    64e4:	ef 01       	movw	r28, r30
    64e6:	c6 1b       	sub	r28, r22
    64e8:	d7 0b       	sbc	r29, r23
    64ea:	57 df       	rcall	.-338    	; 0x639a <strcmp>
    64ec:	89 2b       	or	r24, r25
    64ee:	11 f4       	brne	.+4      	; 0x64f4 <MATCH+0x1e>
    64f0:	ce 01       	movw	r24, r28
    64f2:	02 c0       	rjmp	.+4      	; 0x64f8 <MATCH+0x22>
    64f4:	80 e0       	ldi	r24, 0x00	; 0
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	df 91       	pop	r29
    64fa:	cf 91       	pop	r28
    64fc:	08 95       	ret

000064fe <MATCHI>:
    64fe:	cf 93       	push	r28
    6500:	df 93       	push	r29
    6502:	fb 01       	movw	r30, r22
    6504:	01 90       	ld	r0, Z+
    6506:	00 20       	and	r0, r0
    6508:	e9 f7       	brne	.-6      	; 0x6504 <MATCHI+0x6>
    650a:	31 97       	sbiw	r30, 0x01	; 1
    650c:	ef 01       	movw	r28, r30
    650e:	c6 1b       	sub	r28, r22
    6510:	d7 0b       	sbc	r29, r23
    6512:	50 df       	rcall	.-352    	; 0x63b4 <strcasecmp>
    6514:	89 2b       	or	r24, r25
    6516:	11 f4       	brne	.+4      	; 0x651c <MATCHI+0x1e>
    6518:	ce 01       	movw	r24, r28
    651a:	02 c0       	rjmp	.+4      	; 0x6520 <MATCHI+0x22>
    651c:	80 e0       	ldi	r24, 0x00	; 0
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	df 91       	pop	r29
    6522:	cf 91       	pop	r28
    6524:	08 95       	ret

00006526 <MATCHARGS>:
    6526:	a9 e0       	ldi	r26, 0x09	; 9
    6528:	b0 e0       	ldi	r27, 0x00	; 0
    652a:	e9 e9       	ldi	r30, 0x99	; 153
    652c:	f2 e3       	ldi	r31, 0x32	; 50
    652e:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
    6532:	eb 01       	movw	r28, r22
    6534:	8a 01       	movw	r16, r20
    6536:	79 01       	movw	r14, r18
    6538:	e2 df       	rcall	.-60     	; 0x64fe <MATCHI>
    653a:	00 97       	sbiw	r24, 0x00	; 0
    653c:	c1 f0       	breq	.+48     	; 0x656e <MATCHARGS+0x48>
    653e:	e0 16       	cp	r14, r16
    6540:	f1 06       	cpc	r15, r17
    6542:	9c f4       	brge	.+38     	; 0x656a <MATCHARGS+0x44>
    6544:	ed b7       	in	r30, 0x3d	; 61
    6546:	fe b7       	in	r31, 0x3e	; 62
    6548:	f1 86       	std	Z+9, r15	; 0x09
    654a:	e0 86       	std	Z+8, r14	; 0x08
    654c:	17 83       	std	Z+7, r17	; 0x07
    654e:	06 83       	std	Z+6, r16	; 0x06
    6550:	d5 83       	std	Z+5, r29	; 0x05
    6552:	c4 83       	std	Z+4, r28	; 0x04
    6554:	88 ef       	ldi	r24, 0xF8	; 248
    6556:	94 e0       	ldi	r25, 0x04	; 4
    6558:	a0 e0       	ldi	r26, 0x00	; 0
    655a:	81 83       	std	Z+1, r24	; 0x01
    655c:	92 83       	std	Z+2, r25	; 0x02
    655e:	a3 83       	std	Z+3, r26	; 0x03
    6560:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    6564:	80 e0       	ldi	r24, 0x00	; 0
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	02 c0       	rjmp	.+4      	; 0x656e <MATCHARGS+0x48>
    656a:	81 e0       	ldi	r24, 0x01	; 1
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	cd b7       	in	r28, 0x3d	; 61
    6570:	de b7       	in	r29, 0x3e	; 62
    6572:	29 96       	adiw	r28, 0x09	; 9
    6574:	e6 e0       	ldi	r30, 0x06	; 6
    6576:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

0000657a <MATCHI_LEN>:
    657a:	cf 93       	push	r28
    657c:	df 93       	push	r29
    657e:	00 97       	sbiw	r24, 0x00	; 0
    6580:	89 f0       	breq	.+34     	; 0x65a4 <MATCHI_LEN+0x2a>
    6582:	61 15       	cp	r22, r1
    6584:	71 05       	cpc	r23, r1
    6586:	71 f0       	breq	.+28     	; 0x65a4 <MATCHI_LEN+0x2a>
    6588:	eb 01       	movw	r28, r22
    658a:	09 90       	ld	r0, Y+
    658c:	00 20       	and	r0, r0
    658e:	e9 f7       	brne	.-6      	; 0x658a <MATCHI_LEN+0x10>
    6590:	21 97       	sbiw	r28, 0x01	; 1
    6592:	c6 1b       	sub	r28, r22
    6594:	d7 0b       	sbc	r29, r23
    6596:	31 f0       	breq	.+12     	; 0x65a4 <MATCHI_LEN+0x2a>
    6598:	ae 01       	movw	r20, r28
    659a:	2b df       	rcall	.-426    	; 0x63f2 <strncasecmp>
    659c:	89 2b       	or	r24, r25
    659e:	11 f4       	brne	.+4      	; 0x65a4 <MATCHI_LEN+0x2a>
    65a0:	ce 01       	movw	r24, r28
    65a2:	02 c0       	rjmp	.+4      	; 0x65a8 <MATCHI_LEN+0x2e>
    65a4:	80 e0       	ldi	r24, 0x00	; 0
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	df 91       	pop	r29
    65aa:	cf 91       	pop	r28
    65ac:	08 95       	ret

000065ae <split_args>:
    65ae:	a0 e0       	ldi	r26, 0x00	; 0
    65b0:	b0 e0       	ldi	r27, 0x00	; 0
    65b2:	ed ed       	ldi	r30, 0xDD	; 221
    65b4:	f2 e3       	ldi	r31, 0x32	; 50
    65b6:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    65ba:	dc 01       	movw	r26, r24
    65bc:	6a 01       	movw	r12, r20
    65be:	8b 01       	movw	r16, r22
    65c0:	fb 01       	movw	r30, r22
    65c2:	80 e0       	ldi	r24, 0x00	; 0
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	8c 15       	cp	r24, r12
    65c8:	9d 05       	cpc	r25, r13
    65ca:	24 f4       	brge	.+8      	; 0x65d4 <split_args+0x26>
    65cc:	11 92       	st	Z+, r1
    65ce:	11 92       	st	Z+, r1
    65d0:	01 96       	adiw	r24, 0x01	; 1
    65d2:	f9 cf       	rjmp	.-14     	; 0x65c6 <split_args+0x18>
    65d4:	c1 14       	cp	r12, r1
    65d6:	d1 04       	cpc	r13, r1
    65d8:	d9 f1       	breq	.+118    	; 0x6650 <split_args+0xa2>
    65da:	10 97       	sbiw	r26, 0x00	; 0
    65dc:	c9 f1       	breq	.+114    	; 0x6650 <split_args+0xa2>
    65de:	ee 24       	eor	r14, r14
    65e0:	e3 94       	inc	r14
    65e2:	f1 2c       	mov	r15, r1
    65e4:	c0 e0       	ldi	r28, 0x00	; 0
    65e6:	d0 e0       	ldi	r29, 0x00	; 0
    65e8:	8c 91       	ld	r24, X
    65ea:	88 23       	and	r24, r24
    65ec:	b1 f1       	breq	.+108    	; 0x665a <split_args+0xac>
    65ee:	cc 15       	cp	r28, r12
    65f0:	dd 05       	cpc	r29, r13
    65f2:	9c f5       	brge	.+102    	; 0x665a <split_args+0xac>
    65f4:	cd 01       	movw	r24, r26
    65f6:	65 df       	rcall	.-310    	; 0x64c2 <skipspaces>
    65f8:	dc 01       	movw	r26, r24
    65fa:	2c 91       	ld	r18, X
    65fc:	22 23       	and	r18, r18
    65fe:	69 f1       	breq	.+90     	; 0x665a <split_args+0xac>
    6600:	22 32       	cpi	r18, 0x22	; 34
    6602:	79 f4       	brne	.+30     	; 0x6622 <split_args+0x74>
    6604:	fc 01       	movw	r30, r24
    6606:	31 96       	adiw	r30, 0x01	; 1
    6608:	d8 01       	movw	r26, r16
    660a:	ed 93       	st	X+, r30
    660c:	fc 93       	st	X, r31
    660e:	df 01       	movw	r26, r30
    6610:	80 81       	ld	r24, Z
    6612:	31 96       	adiw	r30, 0x01	; 1
    6614:	88 23       	and	r24, r24
    6616:	a9 f0       	breq	.+42     	; 0x6642 <split_args+0x94>
    6618:	82 32       	cpi	r24, 0x22	; 34
    661a:	c9 f7       	brne	.-14     	; 0x660e <split_args+0x60>
    661c:	1c 92       	st	X, r1
    661e:	df 01       	movw	r26, r30
    6620:	10 c0       	rjmp	.+32     	; 0x6642 <split_args+0x94>
    6622:	f8 01       	movw	r30, r16
    6624:	91 83       	std	Z+1, r25	; 0x01
    6626:	80 83       	st	Z, r24
    6628:	fc 01       	movw	r30, r24
    662a:	2e 2f       	mov	r18, r30
    662c:	9f 2f       	mov	r25, r31
    662e:	81 91       	ld	r24, Z+
    6630:	3f ed       	ldi	r19, 0xDF	; 223
    6632:	38 0f       	add	r19, r24
    6634:	3e 35       	cpi	r19, 0x5E	; 94
    6636:	c8 f3       	brcs	.-14     	; 0x662a <split_args+0x7c>
    6638:	88 23       	and	r24, r24
    663a:	69 f0       	breq	.+26     	; 0x6656 <split_args+0xa8>
    663c:	a2 2f       	mov	r26, r18
    663e:	b9 2f       	mov	r27, r25
    6640:	1d 92       	st	X+, r1
    6642:	21 96       	adiw	r28, 0x01	; 1
    6644:	ff ef       	ldi	r31, 0xFF	; 255
    6646:	ef 1a       	sub	r14, r31
    6648:	ff 0a       	sbc	r15, r31
    664a:	0e 5f       	subi	r16, 0xFE	; 254
    664c:	1f 4f       	sbci	r17, 0xFF	; 255
    664e:	cc cf       	rjmp	.-104    	; 0x65e8 <split_args+0x3a>
    6650:	80 e0       	ldi	r24, 0x00	; 0
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	03 c0       	rjmp	.+6      	; 0x665c <split_args+0xae>
    6656:	c7 01       	movw	r24, r14
    6658:	01 c0       	rjmp	.+2      	; 0x665c <split_args+0xae>
    665a:	ce 01       	movw	r24, r28
    665c:	cd b7       	in	r28, 0x3d	; 61
    665e:	de b7       	in	r29, 0x3e	; 62
    6660:	e8 e0       	ldi	r30, 0x08	; 8
    6662:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

00006666 <get_token>:
    6666:	ef 92       	push	r14
    6668:	ff 92       	push	r15
    666a:	0f 93       	push	r16
    666c:	1f 93       	push	r17
    666e:	cf 93       	push	r28
    6670:	df 93       	push	r29
    6672:	eb 01       	movw	r28, r22
    6674:	8a 01       	movw	r16, r20
    6676:	18 82       	st	Y, r1
    6678:	00 97       	sbiw	r24, 0x00	; 0
    667a:	89 f1       	breq	.+98     	; 0x66de <get_token+0x78>
    667c:	fc 01       	movw	r30, r24
    667e:	20 81       	ld	r18, Z
    6680:	22 23       	and	r18, r18
    6682:	79 f1       	breq	.+94     	; 0x66e2 <get_token+0x7c>
    6684:	1e df       	rcall	.-452    	; 0x64c2 <skipspaces>
    6686:	7c 01       	movw	r14, r24
    6688:	0c df       	rcall	.-488    	; 0x64a2 <trim_tail>
    668a:	f7 01       	movw	r30, r14
    668c:	cf 01       	movw	r24, r30
    668e:	21 91       	ld	r18, Z+
    6690:	21 32       	cpi	r18, 0x21	; 33
    6692:	e0 f0       	brcs	.+56     	; 0x66cc <get_token+0x66>
    6694:	10 16       	cp	r1, r16
    6696:	11 06       	cpc	r1, r17
    6698:	cc f4       	brge	.+50     	; 0x66cc <get_token+0x66>
    669a:	22 32       	cpi	r18, 0x22	; 34
    669c:	79 f4       	brne	.+30     	; 0x66bc <get_token+0x56>
    669e:	fc 01       	movw	r30, r24
    66a0:	31 96       	adiw	r30, 0x01	; 1
    66a2:	0c 0f       	add	r16, r28
    66a4:	1d 1f       	adc	r17, r29
    66a6:	cf 01       	movw	r24, r30
    66a8:	21 91       	ld	r18, Z+
    66aa:	22 23       	and	r18, r18
    66ac:	79 f0       	breq	.+30     	; 0x66cc <get_token+0x66>
    66ae:	22 32       	cpi	r18, 0x22	; 34
    66b0:	59 f0       	breq	.+22     	; 0x66c8 <get_token+0x62>
    66b2:	c0 17       	cp	r28, r16
    66b4:	d1 07       	cpc	r29, r17
    66b6:	51 f0       	breq	.+20     	; 0x66cc <get_token+0x66>
    66b8:	29 93       	st	Y+, r18
    66ba:	f5 cf       	rjmp	.-22     	; 0x66a6 <get_token+0x40>
    66bc:	2c 32       	cpi	r18, 0x2C	; 44
    66be:	31 f0       	breq	.+12     	; 0x66cc <get_token+0x66>
    66c0:	29 93       	st	Y+, r18
    66c2:	01 50       	subi	r16, 0x01	; 1
    66c4:	11 09       	sbc	r17, r1
    66c6:	e2 cf       	rjmp	.-60     	; 0x668c <get_token+0x26>
    66c8:	cf 01       	movw	r24, r30
    66ca:	18 82       	st	Y, r1
    66cc:	fa de       	rcall	.-524    	; 0x64c2 <skipspaces>
    66ce:	fc 01       	movw	r30, r24
    66d0:	80 81       	ld	r24, Z
    66d2:	8c 32       	cpi	r24, 0x2C	; 44
    66d4:	09 f4       	brne	.+2      	; 0x66d8 <get_token+0x72>
    66d6:	31 96       	adiw	r30, 0x01	; 1
    66d8:	18 82       	st	Y, r1
    66da:	cf 01       	movw	r24, r30
    66dc:	02 c0       	rjmp	.+4      	; 0x66e2 <get_token+0x7c>
    66de:	80 e0       	ldi	r24, 0x00	; 0
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	cd b7       	in	r28, 0x3d	; 61
    66e4:	de b7       	in	r29, 0x3e	; 62
    66e6:	e6 e0       	ldi	r30, 0x06	; 6
    66e8:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

000066ec <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    66ec:	a2 e0       	ldi	r26, 0x02	; 2
    66ee:	b0 e0       	ldi	r27, 0x00	; 0
    66f0:	ec e7       	ldi	r30, 0x7C	; 124
    66f2:	f3 e3       	ldi	r31, 0x33	; 51
    66f4:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    66f8:	00 97       	sbiw	r24, 0x00	; 0
    66fa:	79 f1       	breq	.+94     	; 0x675a <get_value+0x6e>
    66fc:	fc 01       	movw	r30, r24
    66fe:	20 81       	ld	r18, Z
    6700:	22 23       	and	r18, r18
    6702:	59 f1       	breq	.+86     	; 0x675a <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6704:	de de       	rcall	.-580    	; 0x64c2 <skipspaces>
    6706:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6708:	6f e2       	ldi	r22, 0x2F	; 47
    670a:	73 e0       	ldi	r23, 0x03	; 3
    670c:	36 df       	rcall	.-404    	; 0x657a <MATCHI_LEN>
    670e:	00 97       	sbiw	r24, 0x00	; 0
    6710:	29 f0       	breq	.+10     	; 0x671c <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    6712:	08 0f       	add	r16, r24
    6714:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6716:	40 e1       	ldi	r20, 0x10	; 16
    6718:	50 e0       	ldi	r21, 0x00	; 0
    671a:	18 c0       	rjmp	.+48     	; 0x674c <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    671c:	62 e3       	ldi	r22, 0x32	; 50
    671e:	73 e0       	ldi	r23, 0x03	; 3
    6720:	c8 01       	movw	r24, r16
    6722:	2b df       	rcall	.-426    	; 0x657a <MATCHI_LEN>
    6724:	00 97       	sbiw	r24, 0x00	; 0
    6726:	29 f0       	breq	.+10     	; 0x6732 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    6728:	08 0f       	add	r16, r24
    672a:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    672c:	48 e0       	ldi	r20, 0x08	; 8
    672e:	50 e0       	ldi	r21, 0x00	; 0
    6730:	0d c0       	rjmp	.+26     	; 0x674c <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6732:	65 e3       	ldi	r22, 0x35	; 53
    6734:	73 e0       	ldi	r23, 0x03	; 3
    6736:	c8 01       	movw	r24, r16
    6738:	20 df       	rcall	.-448    	; 0x657a <MATCHI_LEN>
    673a:	00 97       	sbiw	r24, 0x00	; 0
    673c:	29 f0       	breq	.+10     	; 0x6748 <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    673e:	08 0f       	add	r16, r24
    6740:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6742:	42 e0       	ldi	r20, 0x02	; 2
    6744:	50 e0       	ldi	r21, 0x00	; 0
    6746:	02 c0       	rjmp	.+4      	; 0x674c <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6748:	4a e0       	ldi	r20, 0x0A	; 10
    674a:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    674c:	be 01       	movw	r22, r28
    674e:	6f 5f       	subi	r22, 0xFF	; 255
    6750:	7f 4f       	sbci	r23, 0xFF	; 255
    6752:	c8 01       	movw	r24, r16
    6754:	0e 94 6d 47 	call	0x8eda	; 0x8eda <strtol>
    6758:	03 c0       	rjmp	.+6      	; 0x6760 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    675a:	60 e0       	ldi	r22, 0x00	; 0
    675c:	70 e0       	ldi	r23, 0x00	; 0
    675e:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6760:	22 96       	adiw	r28, 0x02	; 2
    6762:	e4 e0       	ldi	r30, 0x04	; 4
    6764:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00006768 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6768:	78 94       	sei
    676a:	08 95       	ret

0000676c <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    676c:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    676e:	89 e0       	ldi	r24, 0x09	; 9
    6770:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6774:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    6778:	8f e1       	ldi	r24, 0x1F	; 31
    677a:	9e e4       	ldi	r25, 0x4E	; 78
    677c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6780:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6784:	ef e6       	ldi	r30, 0x6F	; 111
    6786:	f0 e0       	ldi	r31, 0x00	; 0
    6788:	80 81       	ld	r24, Z
    678a:	82 60       	ori	r24, 0x02	; 2
    678c:	80 83       	st	Z, r24
    sei();
    678e:	78 94       	sei
    6790:	08 95       	ret

00006792 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6792:	1f 92       	push	r1
    6794:	0f 92       	push	r0
    6796:	0f b6       	in	r0, 0x3f	; 63
    6798:	0f 92       	push	r0
    679a:	11 24       	eor	r1, r1
    679c:	0b b6       	in	r0, 0x3b	; 59
    679e:	0f 92       	push	r0
    67a0:	2f 93       	push	r18
    67a2:	3f 93       	push	r19
    67a4:	4f 93       	push	r20
    67a6:	5f 93       	push	r21
    67a8:	6f 93       	push	r22
    67aa:	7f 93       	push	r23
    67ac:	8f 93       	push	r24
    67ae:	9f 93       	push	r25
    67b0:	af 93       	push	r26
    67b2:	bf 93       	push	r27
    67b4:	ef 93       	push	r30
    67b6:	ff 93       	push	r31
    execute_timers();
    67b8:	36 d2       	rcall	.+1132   	; 0x6c26 <execute_timers>
}
    67ba:	ff 91       	pop	r31
    67bc:	ef 91       	pop	r30
    67be:	bf 91       	pop	r27
    67c0:	af 91       	pop	r26
    67c2:	9f 91       	pop	r25
    67c4:	8f 91       	pop	r24
    67c6:	7f 91       	pop	r23
    67c8:	6f 91       	pop	r22
    67ca:	5f 91       	pop	r21
    67cc:	4f 91       	pop	r20
    67ce:	3f 91       	pop	r19
    67d0:	2f 91       	pop	r18
    67d2:	0f 90       	pop	r0
    67d4:	0b be       	out	0x3b, r0	; 59
    67d6:	0f 90       	pop	r0
    67d8:	0f be       	out	0x3f, r0	; 63
    67da:	0f 90       	pop	r0
    67dc:	1f 90       	pop	r1
    67de:	18 95       	reti

000067e0 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    67e0:	0f 93       	push	r16
    67e2:	1f 93       	push	r17
    67e4:	cf 93       	push	r28
    67e6:	df 93       	push	r29
    67e8:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    67ea:	f8 94       	cli

    count1 = TCNT1;
    67ec:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    67f0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    67f4:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    67f8:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    67fc:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6800:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    6804:	80 83       	st	Z, r24
    6806:	91 83       	std	Z+1, r25	; 0x01
    6808:	a2 83       	std	Z+2, r26	; 0x02
    680a:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    680c:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6810:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6814:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6818:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    681c:	84 83       	std	Z+4, r24	; 0x04
    681e:	95 83       	std	Z+5, r25	; 0x05
    6820:	a6 83       	std	Z+6, r26	; 0x06
    6822:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6824:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6828:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    682c:	b1 9b       	sbis	0x16, 1	; 22
    682e:	03 c0       	rjmp	.+6      	; 0x6836 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6830:	c0 e0       	ldi	r28, 0x00	; 0
    6832:	d0 e0       	ldi	r29, 0x00	; 0
    6834:	3f c0       	rjmp	.+126    	; 0x68b4 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6836:	82 17       	cp	r24, r18
    6838:	93 07       	cpc	r25, r19
    683a:	d0 f1       	brcs	.+116    	; 0x68b0 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    683c:	c0 e0       	ldi	r28, 0x00	; 0
    683e:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6840:	40 e0       	ldi	r20, 0x00	; 0
    6842:	50 e0       	ldi	r21, 0x00	; 0
    6844:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6846:	9a 01       	movw	r18, r20
    6848:	ab 01       	movw	r20, r22
    684a:	28 0f       	add	r18, r24
    684c:	39 1f       	adc	r19, r25
    684e:	41 1d       	adc	r20, r1
    6850:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    6852:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6854:	a2 e3       	ldi	r26, 0x32	; 50
    6856:	b0 e0       	ldi	r27, 0x00	; 0
    6858:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
    685c:	04 81       	ldd	r16, Z+4	; 0x04
    685e:	15 81       	ldd	r17, Z+5	; 0x05
    6860:	26 81       	ldd	r18, Z+6	; 0x06
    6862:	37 81       	ldd	r19, Z+7	; 0x07
    6864:	dc 01       	movw	r26, r24
    6866:	cb 01       	movw	r24, r22
    6868:	80 0f       	add	r24, r16
    686a:	91 1f       	adc	r25, r17
    686c:	a2 1f       	adc	r26, r18
    686e:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6870:	81 15       	cp	r24, r1
    6872:	2a ec       	ldi	r18, 0xCA	; 202
    6874:	92 07       	cpc	r25, r18
    6876:	2a e9       	ldi	r18, 0x9A	; 154
    6878:	a2 07       	cpc	r26, r18
    687a:	2b e3       	ldi	r18, 0x3B	; 59
    687c:	b2 07       	cpc	r27, r18
    687e:	2c f4       	brge	.+10     	; 0x688a <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6880:	84 83       	std	Z+4, r24	; 0x04
    6882:	95 83       	std	Z+5, r25	; 0x05
    6884:	a6 83       	std	Z+6, r26	; 0x06
    6886:	b7 83       	std	Z+7, r27	; 0x07
    6888:	1a c0       	rjmp	.+52     	; 0x68be <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    688a:	9a 5c       	subi	r25, 0xCA	; 202
    688c:	aa 49       	sbci	r26, 0x9A	; 154
    688e:	bb 43       	sbci	r27, 0x3B	; 59
    6890:	84 83       	std	Z+4, r24	; 0x04
    6892:	95 83       	std	Z+5, r25	; 0x05
    6894:	a6 83       	std	Z+6, r26	; 0x06
    6896:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6898:	80 81       	ld	r24, Z
    689a:	91 81       	ldd	r25, Z+1	; 0x01
    689c:	a2 81       	ldd	r26, Z+2	; 0x02
    689e:	b3 81       	ldd	r27, Z+3	; 0x03
    68a0:	01 96       	adiw	r24, 0x01	; 1
    68a2:	a1 1d       	adc	r26, r1
    68a4:	b1 1d       	adc	r27, r1
    68a6:	80 83       	st	Z, r24
    68a8:	91 83       	std	Z+1, r25	; 0x01
    68aa:	a2 83       	std	Z+2, r26	; 0x02
    68ac:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    68ae:	07 c0       	rjmp	.+14     	; 0x68be <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    68b0:	cf ef       	ldi	r28, 0xFF	; 255
    68b2:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    68b4:	40 e2       	ldi	r20, 0x20	; 32
    68b6:	5e e4       	ldi	r21, 0x4E	; 78
    68b8:	60 e0       	ldi	r22, 0x00	; 0
    68ba:	70 e0       	ldi	r23, 0x00	; 0
    68bc:	c4 cf       	rjmp	.-120    	; 0x6846 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    68be:	ce 01       	movw	r24, r28
    68c0:	df 91       	pop	r29
    68c2:	cf 91       	pop	r28
    68c4:	1f 91       	pop	r17
    68c6:	0f 91       	pop	r16
    68c8:	08 95       	ret

000068ca <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    68ca:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    68ce:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    68d2:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    68d6:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    68da:	80 5c       	subi	r24, 0xC0	; 192
    68dc:	9d 4b       	sbci	r25, 0xBD	; 189
    68de:	a0 4f       	sbci	r26, 0xF0	; 240
    68e0:	bf 4f       	sbci	r27, 0xFF	; 255
    68e2:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    68e6:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    68ea:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    68ee:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    68f2:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    68f6:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    68fa:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    68fe:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6902:	81 15       	cp	r24, r1
    6904:	9a 4c       	sbci	r25, 0xCA	; 202
    6906:	aa 49       	sbci	r26, 0x9A	; 154
    6908:	bb 43       	sbci	r27, 0x3B	; 59
    690a:	dc f0       	brlt	.+54     	; 0x6942 <clock_task+0x78>
    690c:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    6910:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6914:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6918:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    691c:	01 96       	adiw	r24, 0x01	; 1
    691e:	a1 1d       	adc	r26, r1
    6920:	b1 1d       	adc	r27, r1
    6922:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    6926:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    692a:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    692e:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    6932:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <__clock+0x4>
    6936:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <__clock+0x5>
    693a:	10 92 56 1a 	sts	0x1A56, r1	; 0x801a56 <__clock+0x6>
    693e:	10 92 57 1a 	sts	0x1A57, r1	; 0x801a57 <__clock+0x7>
    6942:	08 95       	ret

00006944 <clock_settime.part.2>:
    6944:	fc 01       	movw	r30, r24
    6946:	84 81       	ldd	r24, Z+4	; 0x04
    6948:	95 81       	ldd	r25, Z+5	; 0x05
    694a:	a6 81       	ldd	r26, Z+6	; 0x06
    694c:	b7 81       	ldd	r27, Z+7	; 0x07
    694e:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    6952:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    6956:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    695a:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    695e:	80 81       	ld	r24, Z
    6960:	91 81       	ldd	r25, Z+1	; 0x01
    6962:	a2 81       	ldd	r26, Z+2	; 0x02
    6964:	b3 81       	ldd	r27, Z+3	; 0x03
    6966:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    696a:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    696e:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    6972:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    6976:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    697a:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    697e:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6982:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6986:	44 81       	ldd	r20, Z+4	; 0x04
    6988:	55 81       	ldd	r21, Z+5	; 0x05
    698a:	66 81       	ldd	r22, Z+6	; 0x06
    698c:	77 81       	ldd	r23, Z+7	; 0x07
    698e:	48 17       	cp	r20, r24
    6990:	59 07       	cpc	r21, r25
    6992:	6a 07       	cpc	r22, r26
    6994:	7b 07       	cpc	r23, r27
    6996:	b9 f6       	brne	.-82     	; 0x6946 <clock_settime.part.2+0x2>
    6998:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    699c:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    69a0:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    69a4:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    69a8:	40 81       	ld	r20, Z
    69aa:	51 81       	ldd	r21, Z+1	; 0x01
    69ac:	62 81       	ldd	r22, Z+2	; 0x02
    69ae:	73 81       	ldd	r23, Z+3	; 0x03
    69b0:	48 17       	cp	r20, r24
    69b2:	59 07       	cpc	r21, r25
    69b4:	6a 07       	cpc	r22, r26
    69b6:	7b 07       	cpc	r23, r27
    69b8:	31 f6       	brne	.-116    	; 0x6946 <clock_settime.part.2+0x2>
    69ba:	80 e0       	ldi	r24, 0x00	; 0
    69bc:	90 e0       	ldi	r25, 0x00	; 0
    69be:	08 95       	ret

000069c0 <set_timers>:
    69c0:	00 d0       	rcall	.+0      	; 0x69c2 <set_timers+0x2>
    69c2:	1f 92       	push	r1
    69c4:	00 97       	sbiw	r24, 0x00	; 0
    69c6:	79 f1       	breq	.+94     	; 0x6a26 <set_timers+0x66>
    69c8:	e8 e5       	ldi	r30, 0x58	; 88
    69ca:	fa e1       	ldi	r31, 0x1A	; 26
    69cc:	4f ef       	ldi	r20, 0xFF	; 255
    69ce:	5f ef       	ldi	r21, 0xFF	; 255
    69d0:	20 e0       	ldi	r18, 0x00	; 0
    69d2:	30 e0       	ldi	r19, 0x00	; 0
    69d4:	60 81       	ld	r22, Z
    69d6:	71 81       	ldd	r23, Z+1	; 0x01
    69d8:	86 17       	cp	r24, r22
    69da:	97 07       	cpc	r25, r23
    69dc:	79 f0       	breq	.+30     	; 0x69fc <set_timers+0x3c>
    69de:	67 2b       	or	r22, r23
    69e0:	71 f4       	brne	.+28     	; 0x69fe <set_timers+0x3e>
    69e2:	f9 01       	movw	r30, r18
    69e4:	ee 0f       	add	r30, r30
    69e6:	ff 1f       	adc	r31, r31
    69e8:	e2 0f       	add	r30, r18
    69ea:	f3 1f       	adc	r31, r19
    69ec:	e8 5a       	subi	r30, 0xA8	; 168
    69ee:	f5 4e       	sbci	r31, 0xE5	; 229
    69f0:	91 83       	std	Z+1, r25	; 0x01
    69f2:	80 83       	st	Z, r24
    69f4:	81 e0       	ldi	r24, 0x01	; 1
    69f6:	82 83       	std	Z+2, r24	; 0x02
    69f8:	c9 01       	movw	r24, r18
    69fa:	19 c0       	rjmp	.+50     	; 0x6a2e <set_timers+0x6e>
    69fc:	a9 01       	movw	r20, r18
    69fe:	2f 5f       	subi	r18, 0xFF	; 255
    6a00:	3f 4f       	sbci	r19, 0xFF	; 255
    6a02:	33 96       	adiw	r30, 0x03	; 3
    6a04:	28 30       	cpi	r18, 0x08	; 8
    6a06:	31 05       	cpc	r19, r1
    6a08:	29 f7       	brne	.-54     	; 0x69d4 <set_timers+0x14>
    6a0a:	4f 3f       	cpi	r20, 0xFF	; 255
    6a0c:	8f ef       	ldi	r24, 0xFF	; 255
    6a0e:	58 07       	cpc	r21, r24
    6a10:	69 f4       	brne	.+26     	; 0x6a2c <set_timers+0x6c>
    6a12:	8d ec       	ldi	r24, 0xCD	; 205
    6a14:	95 e0       	ldi	r25, 0x05	; 5
    6a16:	a0 e0       	ldi	r26, 0x00	; 0
    6a18:	ed b7       	in	r30, 0x3d	; 61
    6a1a:	fe b7       	in	r31, 0x3e	; 62
    6a1c:	81 83       	std	Z+1, r24	; 0x01
    6a1e:	92 83       	std	Z+2, r25	; 0x02
    6a20:	a3 83       	std	Z+3, r26	; 0x03
    6a22:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    6a26:	8f ef       	ldi	r24, 0xFF	; 255
    6a28:	9f ef       	ldi	r25, 0xFF	; 255
    6a2a:	01 c0       	rjmp	.+2      	; 0x6a2e <set_timers+0x6e>
    6a2c:	ca 01       	movw	r24, r20
    6a2e:	0f 90       	pop	r0
    6a30:	0f 90       	pop	r0
    6a32:	0f 90       	pop	r0
    6a34:	08 95       	ret

00006a36 <delete_all_timers>:
    6a36:	e8 e5       	ldi	r30, 0x58	; 88
    6a38:	fa e1       	ldi	r31, 0x1A	; 26
    6a3a:	12 82       	std	Z+2, r1	; 0x02
    6a3c:	11 82       	std	Z+1, r1	; 0x01
    6a3e:	10 82       	st	Z, r1
    6a40:	33 96       	adiw	r30, 0x03	; 3
    6a42:	8a e1       	ldi	r24, 0x1A	; 26
    6a44:	e0 37       	cpi	r30, 0x70	; 112
    6a46:	f8 07       	cpc	r31, r24
    6a48:	c1 f7       	brne	.-16     	; 0x6a3a <delete_all_timers+0x4>
    6a4a:	08 95       	ret

00006a4c <subtract_timespec>:
    6a4c:	0f 93       	push	r16
    6a4e:	1f 93       	push	r17
    6a50:	cf 93       	push	r28
    6a52:	df 93       	push	r29
    6a54:	fc 01       	movw	r30, r24
    6a56:	84 81       	ldd	r24, Z+4	; 0x04
    6a58:	95 81       	ldd	r25, Z+5	; 0x05
    6a5a:	a6 81       	ldd	r26, Z+6	; 0x06
    6a5c:	b7 81       	ldd	r27, Z+7	; 0x07
    6a5e:	eb 01       	movw	r28, r22
    6a60:	0c 81       	ldd	r16, Y+4	; 0x04
    6a62:	1d 81       	ldd	r17, Y+5	; 0x05
    6a64:	2e 81       	ldd	r18, Y+6	; 0x06
    6a66:	3f 81       	ldd	r19, Y+7	; 0x07
    6a68:	80 1b       	sub	r24, r16
    6a6a:	91 0b       	sbc	r25, r17
    6a6c:	a2 0b       	sbc	r26, r18
    6a6e:	b3 0b       	sbc	r27, r19
    6a70:	b7 fd       	sbrc	r27, 7
    6a72:	05 c0       	rjmp	.+10     	; 0x6a7e <subtract_timespec+0x32>
    6a74:	84 83       	std	Z+4, r24	; 0x04
    6a76:	95 83       	std	Z+5, r25	; 0x05
    6a78:	a6 83       	std	Z+6, r26	; 0x06
    6a7a:	b7 83       	std	Z+7, r27	; 0x07
    6a7c:	12 c0       	rjmp	.+36     	; 0x6aa2 <subtract_timespec+0x56>
    6a7e:	96 53       	subi	r25, 0x36	; 54
    6a80:	a5 46       	sbci	r26, 0x65	; 101
    6a82:	b4 4c       	sbci	r27, 0xC4	; 196
    6a84:	84 83       	std	Z+4, r24	; 0x04
    6a86:	95 83       	std	Z+5, r25	; 0x05
    6a88:	a6 83       	std	Z+6, r26	; 0x06
    6a8a:	b7 83       	std	Z+7, r27	; 0x07
    6a8c:	80 81       	ld	r24, Z
    6a8e:	91 81       	ldd	r25, Z+1	; 0x01
    6a90:	a2 81       	ldd	r26, Z+2	; 0x02
    6a92:	b3 81       	ldd	r27, Z+3	; 0x03
    6a94:	01 97       	sbiw	r24, 0x01	; 1
    6a96:	a1 09       	sbc	r26, r1
    6a98:	b1 09       	sbc	r27, r1
    6a9a:	80 83       	st	Z, r24
    6a9c:	91 83       	std	Z+1, r25	; 0x01
    6a9e:	a2 83       	std	Z+2, r26	; 0x02
    6aa0:	b3 83       	std	Z+3, r27	; 0x03
    6aa2:	80 81       	ld	r24, Z
    6aa4:	91 81       	ldd	r25, Z+1	; 0x01
    6aa6:	a2 81       	ldd	r26, Z+2	; 0x02
    6aa8:	b3 81       	ldd	r27, Z+3	; 0x03
    6aaa:	eb 01       	movw	r28, r22
    6aac:	48 81       	ld	r20, Y
    6aae:	59 81       	ldd	r21, Y+1	; 0x01
    6ab0:	6a 81       	ldd	r22, Y+2	; 0x02
    6ab2:	7b 81       	ldd	r23, Y+3	; 0x03
    6ab4:	84 1b       	sub	r24, r20
    6ab6:	95 0b       	sbc	r25, r21
    6ab8:	a6 0b       	sbc	r26, r22
    6aba:	b7 0b       	sbc	r27, r23
    6abc:	80 83       	st	Z, r24
    6abe:	91 83       	std	Z+1, r25	; 0x01
    6ac0:	a2 83       	std	Z+2, r26	; 0x02
    6ac2:	b3 83       	std	Z+3, r27	; 0x03
    6ac4:	df 91       	pop	r29
    6ac6:	cf 91       	pop	r28
    6ac8:	1f 91       	pop	r17
    6aca:	0f 91       	pop	r16
    6acc:	08 95       	ret

00006ace <ts_to_str>:
    6ace:	ad b7       	in	r26, 0x3d	; 61
    6ad0:	be b7       	in	r27, 0x3e	; 62
    6ad2:	1f 97       	sbiw	r26, 0x0f	; 15
    6ad4:	0f b6       	in	r0, 0x3f	; 63
    6ad6:	f8 94       	cli
    6ad8:	be bf       	out	0x3e, r27	; 62
    6ada:	0f be       	out	0x3f, r0	; 63
    6adc:	ad bf       	out	0x3d, r26	; 61
    6ade:	fc 01       	movw	r30, r24
    6ae0:	44 81       	ldd	r20, Z+4	; 0x04
    6ae2:	55 81       	ldd	r21, Z+5	; 0x05
    6ae4:	66 81       	ldd	r22, Z+6	; 0x06
    6ae6:	77 81       	ldd	r23, Z+7	; 0x07
    6ae8:	ed b7       	in	r30, 0x3d	; 61
    6aea:	fe b7       	in	r31, 0x3e	; 62
    6aec:	44 87       	std	Z+12, r20	; 0x0c
    6aee:	55 87       	std	Z+13, r21	; 0x0d
    6af0:	66 87       	std	Z+14, r22	; 0x0e
    6af2:	77 87       	std	Z+15, r23	; 0x0f
    6af4:	fc 01       	movw	r30, r24
    6af6:	80 81       	ld	r24, Z
    6af8:	91 81       	ldd	r25, Z+1	; 0x01
    6afa:	a2 81       	ldd	r26, Z+2	; 0x02
    6afc:	b3 81       	ldd	r27, Z+3	; 0x03
    6afe:	ed b7       	in	r30, 0x3d	; 61
    6b00:	fe b7       	in	r31, 0x3e	; 62
    6b02:	80 87       	std	Z+8, r24	; 0x08
    6b04:	91 87       	std	Z+9, r25	; 0x09
    6b06:	a2 87       	std	Z+10, r26	; 0x0a
    6b08:	b3 87       	std	Z+11, r27	; 0x0b
    6b0a:	83 ec       	ldi	r24, 0xC3	; 195
    6b0c:	95 e0       	ldi	r25, 0x05	; 5
    6b0e:	a0 e0       	ldi	r26, 0x00	; 0
    6b10:	85 83       	std	Z+5, r24	; 0x05
    6b12:	96 83       	std	Z+6, r25	; 0x06
    6b14:	a7 83       	std	Z+7, r26	; 0x07
    6b16:	8f e1       	ldi	r24, 0x1F	; 31
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	94 83       	std	Z+4, r25	; 0x04
    6b1c:	83 83       	std	Z+3, r24	; 0x03
    6b1e:	84 e8       	ldi	r24, 0x84	; 132
    6b20:	97 e1       	ldi	r25, 0x17	; 23
    6b22:	92 83       	std	Z+2, r25	; 0x02
    6b24:	81 83       	std	Z+1, r24	; 0x01
    6b26:	0e 94 0a 47 	call	0x8e14	; 0x8e14 <snprintf_P>
    6b2a:	84 e8       	ldi	r24, 0x84	; 132
    6b2c:	97 e1       	ldi	r25, 0x17	; 23
    6b2e:	ad b7       	in	r26, 0x3d	; 61
    6b30:	be b7       	in	r27, 0x3e	; 62
    6b32:	1f 96       	adiw	r26, 0x0f	; 15
    6b34:	0f b6       	in	r0, 0x3f	; 63
    6b36:	f8 94       	cli
    6b38:	be bf       	out	0x3e, r27	; 62
    6b3a:	0f be       	out	0x3f, r0	; 63
    6b3c:	ad bf       	out	0x3d, r26	; 61
    6b3e:	08 95       	ret

00006b40 <clock_elapsed_begin>:
    6b40:	6c e7       	ldi	r22, 0x7C	; 124
    6b42:	77 e1       	ldi	r23, 0x17	; 23
    6b44:	80 e0       	ldi	r24, 0x00	; 0
    6b46:	90 e0       	ldi	r25, 0x00	; 0
    6b48:	4b ce       	rjmp	.-874    	; 0x67e0 <clock_gettime>
    6b4a:	08 95       	ret

00006b4c <clock_elapsed_end>:
    6b4c:	af e0       	ldi	r26, 0x0F	; 15
    6b4e:	b0 e0       	ldi	r27, 0x00	; 0
    6b50:	ec ea       	ldi	r30, 0xAC	; 172
    6b52:	f5 e3       	ldi	r31, 0x35	; 53
    6b54:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    6b58:	8c 01       	movw	r16, r24
    6b5a:	be 01       	movw	r22, r28
    6b5c:	68 5f       	subi	r22, 0xF8	; 248
    6b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6b60:	80 e0       	ldi	r24, 0x00	; 0
    6b62:	90 e0       	ldi	r25, 0x00	; 0
    6b64:	3d de       	rcall	.-902    	; 0x67e0 <clock_gettime>
    6b66:	6c e7       	ldi	r22, 0x7C	; 124
    6b68:	77 e1       	ldi	r23, 0x17	; 23
    6b6a:	ce 01       	movw	r24, r28
    6b6c:	08 96       	adiw	r24, 0x08	; 8
    6b6e:	6e df       	rcall	.-292    	; 0x6a4c <subtract_timespec>
    6b70:	01 15       	cp	r16, r1
    6b72:	11 05       	cpc	r17, r1
    6b74:	b1 f0       	breq	.+44     	; 0x6ba2 <clock_elapsed_end+0x56>
    6b76:	f8 01       	movw	r30, r16
    6b78:	80 81       	ld	r24, Z
    6b7a:	88 23       	and	r24, r24
    6b7c:	91 f0       	breq	.+36     	; 0x6ba2 <clock_elapsed_end+0x56>
    6b7e:	ce 01       	movw	r24, r28
    6b80:	08 96       	adiw	r24, 0x08	; 8
    6b82:	a5 df       	rcall	.-182    	; 0x6ace <ts_to_str>
    6b84:	ed b7       	in	r30, 0x3d	; 61
    6b86:	fe b7       	in	r31, 0x3e	; 62
    6b88:	97 83       	std	Z+7, r25	; 0x07
    6b8a:	86 83       	std	Z+6, r24	; 0x06
    6b8c:	15 83       	std	Z+5, r17	; 0x05
    6b8e:	04 83       	std	Z+4, r16	; 0x04
    6b90:	85 eb       	ldi	r24, 0xB5	; 181
    6b92:	95 e0       	ldi	r25, 0x05	; 5
    6b94:	a0 e0       	ldi	r26, 0x00	; 0
    6b96:	81 83       	std	Z+1, r24	; 0x01
    6b98:	92 83       	std	Z+2, r25	; 0x02
    6b9a:	a3 83       	std	Z+3, r26	; 0x03
    6b9c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    6ba0:	0f c0       	rjmp	.+30     	; 0x6bc0 <clock_elapsed_end+0x74>
    6ba2:	ce 01       	movw	r24, r28
    6ba4:	08 96       	adiw	r24, 0x08	; 8
    6ba6:	93 df       	rcall	.-218    	; 0x6ace <ts_to_str>
    6ba8:	ed b7       	in	r30, 0x3d	; 61
    6baa:	fe b7       	in	r31, 0x3e	; 62
    6bac:	95 83       	std	Z+5, r25	; 0x05
    6bae:	84 83       	std	Z+4, r24	; 0x04
    6bb0:	8a ea       	ldi	r24, 0xAA	; 170
    6bb2:	95 e0       	ldi	r25, 0x05	; 5
    6bb4:	a0 e0       	ldi	r26, 0x00	; 0
    6bb6:	81 83       	std	Z+1, r24	; 0x01
    6bb8:	92 83       	std	Z+2, r25	; 0x02
    6bba:	a3 83       	std	Z+3, r26	; 0x03
    6bbc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    6bc0:	2f 96       	adiw	r28, 0x0f	; 15
    6bc2:	e4 e0       	ldi	r30, 0x04	; 4
    6bc4:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00006bc8 <clock_clear>:
    6bc8:	a8 e0       	ldi	r26, 0x08	; 8
    6bca:	b0 e0       	ldi	r27, 0x00	; 0
    6bcc:	ea ee       	ldi	r30, 0xEA	; 234
    6bce:	f5 e3       	ldi	r31, 0x35	; 53
    6bd0:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    6bd4:	1d 82       	std	Y+5, r1	; 0x05
    6bd6:	1e 82       	std	Y+6, r1	; 0x06
    6bd8:	1f 82       	std	Y+7, r1	; 0x07
    6bda:	18 86       	std	Y+8, r1	; 0x08
    6bdc:	19 82       	std	Y+1, r1	; 0x01
    6bde:	1a 82       	std	Y+2, r1	; 0x02
    6be0:	1b 82       	std	Y+3, r1	; 0x03
    6be2:	1c 82       	std	Y+4, r1	; 0x04
    6be4:	ce 01       	movw	r24, r28
    6be6:	01 96       	adiw	r24, 0x01	; 1
    6be8:	ad de       	rcall	.-678    	; 0x6944 <clock_settime.part.2>
    6bea:	e0 e7       	ldi	r30, 0x70	; 112
    6bec:	fa e1       	ldi	r31, 0x1A	; 26
    6bee:	11 82       	std	Z+1, r1	; 0x01
    6bf0:	10 82       	st	Z, r1
    6bf2:	13 82       	std	Z+3, r1	; 0x03
    6bf4:	12 82       	std	Z+2, r1	; 0x02
    6bf6:	28 96       	adiw	r28, 0x08	; 8
    6bf8:	e2 e0       	ldi	r30, 0x02	; 2
    6bfa:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00006bfe <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6bfe:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6c02:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6c06:	89 2b       	or	r24, r25
    6c08:	69 f0       	breq	.+26     	; 0x6c24 <enable_timers+0x26>
    6c0a:	80 91 a6 17 	lds	r24, 0x17A6	; 0x8017a6 <timers_enabled>
    6c0e:	90 91 a7 17 	lds	r25, 0x17A7	; 0x8017a7 <timers_enabled+0x1>
    6c12:	89 2b       	or	r24, r25
    6c14:	39 f4       	brne	.+14     	; 0x6c24 <enable_timers+0x26>
    {
        enable_system_task();
    6c16:	a8 dd       	rcall	.-1200   	; 0x6768 <enable_system_task>
        timers_enabled = 1;
    6c18:	81 e0       	ldi	r24, 0x01	; 1
    6c1a:	90 e0       	ldi	r25, 0x00	; 0
    6c1c:	90 93 a7 17 	sts	0x17A7, r25	; 0x8017a7 <timers_enabled+0x1>
    6c20:	80 93 a6 17 	sts	0x17A6, r24	; 0x8017a6 <timers_enabled>
    6c24:	08 95       	ret

00006c26 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6c26:	cf 93       	push	r28
    6c28:	df 93       	push	r29
    6c2a:	c8 e5       	ldi	r28, 0x58	; 88
    6c2c:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    6c30:	88 23       	and	r24, r24
    6c32:	29 f0       	breq	.+10     	; 0x6c3e <execute_timers+0x18>
    6c34:	e8 81       	ld	r30, Y
    6c36:	f9 81       	ldd	r31, Y+1	; 0x01
    6c38:	30 97       	sbiw	r30, 0x00	; 0
    6c3a:	09 f0       	breq	.+2      	; 0x6c3e <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6c3c:	09 95       	icall
    6c3e:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6c40:	8a e1       	ldi	r24, 0x1A	; 26
    6c42:	c0 37       	cpi	r28, 0x70	; 112
    6c44:	d8 07       	cpc	r29, r24
    6c46:	99 f7       	brne	.-26     	; 0x6c2e <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6c48:	df 91       	pop	r29
    6c4a:	cf 91       	pop	r28
    6c4c:	08 95       	ret

00006c4e <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6c4e:	00 d0       	rcall	.+0      	; 0x6c50 <init_timers+0x2>
    6c50:	1f 92       	push	r1
    printf("Timers init called\n");
    6c52:	86 e9       	ldi	r24, 0x96	; 150
    6c54:	95 e0       	ldi	r25, 0x05	; 5
    6c56:	a0 e0       	ldi	r26, 0x00	; 0
    6c58:	ed b7       	in	r30, 0x3d	; 61
    6c5a:	fe b7       	in	r31, 0x3e	; 62
    6c5c:	81 83       	std	Z+1, r24	; 0x01
    6c5e:	92 83       	std	Z+2, r25	; 0x02
    6c60:	a3 83       	std	Z+3, r26	; 0x03
    6c62:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    if(!timers_configured)
    6c66:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6c6a:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6c6e:	89 2b       	or	r24, r25
    6c70:	a9 f4       	brne	.+42     	; 0x6c9c <init_timers+0x4e>
    {
        install_timers_isr();
    6c72:	7c dd       	rcall	.-1288   	; 0x676c <install_timers_isr>
        timers_configured = 1;
    6c74:	81 e0       	ldi	r24, 0x01	; 1
    6c76:	90 e0       	ldi	r25, 0x00	; 0
    6c78:	90 93 a5 17 	sts	0x17A5, r25	; 0x8017a5 <timers_configured+0x1>
    6c7c:	80 93 a4 17 	sts	0x17A4, r24	; 0x8017a4 <timers_configured>
        timers_enabled = 0;
    6c80:	10 92 a7 17 	sts	0x17A7, r1	; 0x8017a7 <timers_enabled+0x1>
    6c84:	10 92 a6 17 	sts	0x17A6, r1	; 0x8017a6 <timers_enabled>
        printf("Timers configured\n");
    6c88:	83 e8       	ldi	r24, 0x83	; 131
    6c8a:	95 e0       	ldi	r25, 0x05	; 5
    6c8c:	a0 e0       	ldi	r26, 0x00	; 0
    6c8e:	ed b7       	in	r30, 0x3d	; 61
    6c90:	fe b7       	in	r31, 0x3e	; 62
    6c92:	81 83       	std	Z+1, r24	; 0x01
    6c94:	92 83       	std	Z+2, r25	; 0x02
    6c96:	a3 83       	std	Z+3, r26	; 0x03
    6c98:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6c9c:	cc de       	rcall	.-616    	; 0x6a36 <delete_all_timers>
    6c9e:	94 df       	rcall	.-216    	; 0x6bc8 <clock_clear>
    printf("Clock Init\n");
    6ca0:	87 e7       	ldi	r24, 0x77	; 119
    6ca2:	95 e0       	ldi	r25, 0x05	; 5
    6ca4:	a0 e0       	ldi	r26, 0x00	; 0
    6ca6:	ed b7       	in	r30, 0x3d	; 61
    6ca8:	fe b7       	in	r31, 0x3e	; 62
    6caa:	81 83       	std	Z+1, r24	; 0x01
    6cac:	92 83       	std	Z+2, r25	; 0x02
    6cae:	a3 83       	std	Z+3, r26	; 0x03
    6cb0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6cb4:	61 e0       	ldi	r22, 0x01	; 1
    6cb6:	70 e0       	ldi	r23, 0x00	; 0
    6cb8:	85 e6       	ldi	r24, 0x65	; 101
    6cba:	94 e3       	ldi	r25, 0x34	; 52
    6cbc:	81 de       	rcall	.-766    	; 0x69c0 <set_timers>
    6cbe:	01 96       	adiw	r24, 0x01	; 1
    6cc0:	51 f4       	brne	.+20     	; 0x6cd6 <init_timers+0x88>
        printf("Clock task init failed\n");
    6cc2:	8f e5       	ldi	r24, 0x5F	; 95
    6cc4:	95 e0       	ldi	r25, 0x05	; 5
    6cc6:	a0 e0       	ldi	r26, 0x00	; 0
    6cc8:	ed b7       	in	r30, 0x3d	; 61
    6cca:	fe b7       	in	r31, 0x3e	; 62
    6ccc:	81 83       	std	Z+1, r24	; 0x01
    6cce:	92 83       	std	Z+2, r25	; 0x02
    6cd0:	a3 83       	std	Z+3, r26	; 0x03
    6cd2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("Clock Installed\n");
    6cd6:	8e e4       	ldi	r24, 0x4E	; 78
    6cd8:	95 e0       	ldi	r25, 0x05	; 5
    6cda:	a0 e0       	ldi	r26, 0x00	; 0
    6cdc:	ed b7       	in	r30, 0x3d	; 61
    6cde:	fe b7       	in	r31, 0x3e	; 62
    6ce0:	81 83       	std	Z+1, r24	; 0x01
    6ce2:	92 83       	std	Z+2, r25	; 0x02
    6ce4:	a3 83       	std	Z+3, r26	; 0x03
    6ce6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    enable_timers();
    6cea:	89 df       	rcall	.-238    	; 0x6bfe <enable_timers>

    printf("Timers enabled\n");
    6cec:	8e e3       	ldi	r24, 0x3E	; 62
    6cee:	95 e0       	ldi	r25, 0x05	; 5
    6cf0:	a0 e0       	ldi	r26, 0x00	; 0
    6cf2:	ed b7       	in	r30, 0x3d	; 61
    6cf4:	fe b7       	in	r31, 0x3e	; 62
    6cf6:	81 83       	std	Z+1, r24	; 0x01
    6cf8:	92 83       	std	Z+2, r25	; 0x02
    6cfa:	a3 83       	std	Z+3, r26	; 0x03
    6cfc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
}
    6d00:	0f 90       	pop	r0
    6d02:	0f 90       	pop	r0
    6d04:	0f 90       	pop	r0
    6d06:	08 95       	ret

00006d08 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6d08:	89 2b       	or	r24, r25
    6d0a:	81 f4       	brne	.+32     	; 0x6d2c <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6d0c:	fb 01       	movw	r30, r22
    6d0e:	10 82       	st	Z, r1
    6d10:	11 82       	std	Z+1, r1	; 0x01
    6d12:	12 82       	std	Z+2, r1	; 0x02
    6d14:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6d16:	80 e4       	ldi	r24, 0x40	; 64
    6d18:	92 e4       	ldi	r25, 0x42	; 66
    6d1a:	af e0       	ldi	r26, 0x0F	; 15
    6d1c:	b0 e0       	ldi	r27, 0x00	; 0
    6d1e:	84 83       	std	Z+4, r24	; 0x04
    6d20:	95 83       	std	Z+5, r25	; 0x05
    6d22:	a6 83       	std	Z+6, r26	; 0x06
    6d24:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6d26:	80 e0       	ldi	r24, 0x00	; 0
    6d28:	90 e0       	ldi	r25, 0x00	; 0
    6d2a:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6d2c:	8f ef       	ldi	r24, 0xFF	; 255
    6d2e:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6d30:	08 95       	ret

00006d32 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6d32:	89 2b       	or	r24, r25
    6d34:	19 f4       	brne	.+6      	; 0x6d3c <clock_settime+0xa>
    6d36:	cb 01       	movw	r24, r22
    6d38:	05 ce       	rjmp	.-1014   	; 0x6944 <clock_settime.part.2>
    6d3a:	08 95       	ret
        return(-1);
    6d3c:	8f ef       	ldi	r24, 0xFF	; 255
    6d3e:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6d40:	08 95       	ret

00006d42 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6d42:	9c 01       	movw	r18, r24
    6d44:	83 70       	andi	r24, 0x03	; 3
    6d46:	99 27       	eor	r25, r25
    6d48:	00 97       	sbiw	r24, 0x00	; 0
    6d4a:	69 f4       	brne	.+26     	; 0x6d66 <IS_Leap+0x24>
    6d4c:	2c 36       	cpi	r18, 0x6C	; 108
    6d4e:	47 e0       	ldi	r20, 0x07	; 7
    6d50:	34 07       	cpc	r19, r20
    6d52:	59 f0       	breq	.+22     	; 0x6d6a <IS_Leap+0x28>
    6d54:	51 e0       	ldi	r21, 0x01	; 1
    6d56:	40 e0       	ldi	r20, 0x00	; 0
    6d58:	24 33       	cpi	r18, 0x34	; 52
    6d5a:	38 40       	sbci	r19, 0x08	; 8
    6d5c:	09 f4       	brne	.+2      	; 0x6d60 <IS_Leap+0x1e>
    6d5e:	50 e0       	ldi	r21, 0x00	; 0
    6d60:	85 2f       	mov	r24, r21
    6d62:	94 2f       	mov	r25, r20
    6d64:	08 95       	ret
    6d66:	80 e0       	ldi	r24, 0x00	; 0
    6d68:	90 e0       	ldi	r25, 0x00	; 0
    6d6a:	08 95       	ret

00006d6c <tm_mon_to_ascii>:
    6d6c:	8c 30       	cpi	r24, 0x0C	; 12
    6d6e:	91 05       	cpc	r25, r1
    6d70:	40 f4       	brcc	.+16     	; 0x6d82 <tm_mon_to_ascii+0x16>
    6d72:	88 0f       	add	r24, r24
    6d74:	99 1f       	adc	r25, r25
    6d76:	fc 01       	movw	r30, r24
    6d78:	e5 5f       	subi	r30, 0xF5	; 245
    6d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    6d7c:	80 81       	ld	r24, Z
    6d7e:	91 81       	ldd	r25, Z+1	; 0x01
    6d80:	08 95       	ret
    6d82:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6d86:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6d8a:	08 95       	ret

00006d8c <Days_Per_Month>:
    6d8c:	cf 93       	push	r28
    6d8e:	df 93       	push	r29
    6d90:	8c 30       	cpi	r24, 0x0C	; 12
    6d92:	91 05       	cpc	r25, r1
    6d94:	24 f0       	brlt	.+8      	; 0x6d9e <Days_Per_Month+0x12>
    6d96:	6f 5f       	subi	r22, 0xFF	; 255
    6d98:	7f 4f       	sbci	r23, 0xFF	; 255
    6d9a:	0c 97       	sbiw	r24, 0x0c	; 12
    6d9c:	f9 cf       	rjmp	.-14     	; 0x6d90 <Days_Per_Month+0x4>
    6d9e:	97 ff       	sbrs	r25, 7
    6da0:	04 c0       	rjmp	.+8      	; 0x6daa <Days_Per_Month+0x1e>
    6da2:	61 50       	subi	r22, 0x01	; 1
    6da4:	71 09       	sbc	r23, r1
    6da6:	0c 96       	adiw	r24, 0x0c	; 12
    6da8:	fa cf       	rjmp	.-12     	; 0x6d9e <Days_Per_Month+0x12>
    6daa:	fc 01       	movw	r30, r24
    6dac:	ee 0f       	add	r30, r30
    6dae:	ff 1f       	adc	r31, r31
    6db0:	e8 57       	subi	r30, 0x78	; 120
    6db2:	fc 4f       	sbci	r31, 0xFC	; 252
    6db4:	c0 81       	ld	r28, Z
    6db6:	d1 81       	ldd	r29, Z+1	; 0x01
    6db8:	01 97       	sbiw	r24, 0x01	; 1
    6dba:	29 f4       	brne	.+10     	; 0x6dc6 <Days_Per_Month+0x3a>
    6dbc:	cb 01       	movw	r24, r22
    6dbe:	c1 df       	rcall	.-126    	; 0x6d42 <IS_Leap>
    6dc0:	89 2b       	or	r24, r25
    6dc2:	09 f0       	breq	.+2      	; 0x6dc6 <Days_Per_Month+0x3a>
    6dc4:	21 96       	adiw	r28, 0x01	; 1
    6dc6:	ce 01       	movw	r24, r28
    6dc8:	df 91       	pop	r29
    6dca:	cf 91       	pop	r28
    6dcc:	08 95       	ret

00006dce <time_to_tm>:
    6dce:	a0 e0       	ldi	r26, 0x00	; 0
    6dd0:	b0 e0       	ldi	r27, 0x00	; 0
    6dd2:	ed ee       	ldi	r30, 0xED	; 237
    6dd4:	f6 e3       	ldi	r31, 0x36	; 54
    6dd6:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__prologue_saves__+0x4>
    6dda:	e8 01       	movw	r28, r16
    6ddc:	e6 e1       	ldi	r30, 0x16	; 22
    6dde:	d8 01       	movw	r26, r16
    6de0:	1d 92       	st	X+, r1
    6de2:	ea 95       	dec	r30
    6de4:	e9 f7       	brne	.-6      	; 0x6de0 <time_to_tm+0x12>
    6de6:	61 15       	cp	r22, r1
    6de8:	bd e5       	ldi	r27, 0x5D	; 93
    6dea:	7b 07       	cpc	r23, r27
    6dec:	bd ef       	ldi	r27, 0xFD	; 253
    6dee:	8b 07       	cpc	r24, r27
    6df0:	bf ef       	ldi	r27, 0xFF	; 255
    6df2:	9b 07       	cpc	r25, r27
    6df4:	08 f0       	brcs	.+2      	; 0x6df8 <time_to_tm+0x2a>
    6df6:	c0 c0       	rjmp	.+384    	; 0x6f78 <time_to_tm+0x1aa>
    6df8:	6b 01       	movw	r12, r22
    6dfa:	7c 01       	movw	r14, r24
    6dfc:	c2 1a       	sub	r12, r18
    6dfe:	d3 0a       	sbc	r13, r19
    6e00:	e4 0a       	sbc	r14, r20
    6e02:	f5 0a       	sbc	r15, r21
    6e04:	46 01       	movw	r8, r12
    6e06:	57 01       	movw	r10, r14
    6e08:	e0 e8       	ldi	r30, 0x80	; 128
    6e0a:	ce 16       	cp	r12, r30
    6e0c:	ee ea       	ldi	r30, 0xAE	; 174
    6e0e:	de 06       	cpc	r13, r30
    6e10:	ee ef       	ldi	r30, 0xFE	; 254
    6e12:	ee 06       	cpc	r14, r30
    6e14:	ef ef       	ldi	r30, 0xFF	; 255
    6e16:	fe 06       	cpc	r15, r30
    6e18:	50 f0       	brcs	.+20     	; 0x6e2e <time_to_tm+0x60>
    6e1a:	80 e8       	ldi	r24, 0x80	; 128
    6e1c:	88 0e       	add	r8, r24
    6e1e:	81 e5       	ldi	r24, 0x51	; 81
    6e20:	98 1e       	adc	r9, r24
    6e22:	81 e0       	ldi	r24, 0x01	; 1
    6e24:	a8 1e       	adc	r10, r24
    6e26:	b1 1c       	adc	r11, r1
    6e28:	01 e0       	ldi	r16, 0x01	; 1
    6e2a:	10 e0       	ldi	r17, 0x00	; 0
    6e2c:	02 c0       	rjmp	.+4      	; 0x6e32 <time_to_tm+0x64>
    6e2e:	00 e0       	ldi	r16, 0x00	; 0
    6e30:	10 e0       	ldi	r17, 0x00	; 0
    6e32:	8c e3       	ldi	r24, 0x3C	; 60
    6e34:	48 2e       	mov	r4, r24
    6e36:	51 2c       	mov	r5, r1
    6e38:	61 2c       	mov	r6, r1
    6e3a:	71 2c       	mov	r7, r1
    6e3c:	c5 01       	movw	r24, r10
    6e3e:	b4 01       	movw	r22, r8
    6e40:	a3 01       	movw	r20, r6
    6e42:	92 01       	movw	r18, r4
    6e44:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    6e48:	79 83       	std	Y+1, r23	; 0x01
    6e4a:	68 83       	st	Y, r22
    6e4c:	ca 01       	movw	r24, r20
    6e4e:	b9 01       	movw	r22, r18
    6e50:	a3 01       	movw	r20, r6
    6e52:	92 01       	movw	r18, r4
    6e54:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    6e58:	7b 83       	std	Y+3, r23	; 0x03
    6e5a:	6a 83       	std	Y+2, r22	; 0x02
    6e5c:	c5 01       	movw	r24, r10
    6e5e:	b4 01       	movw	r22, r8
    6e60:	20 e1       	ldi	r18, 0x10	; 16
    6e62:	3e e0       	ldi	r19, 0x0E	; 14
    6e64:	40 e0       	ldi	r20, 0x00	; 0
    6e66:	50 e0       	ldi	r21, 0x00	; 0
    6e68:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    6e6c:	ca 01       	movw	r24, r20
    6e6e:	b9 01       	movw	r22, r18
    6e70:	28 e1       	ldi	r18, 0x18	; 24
    6e72:	30 e0       	ldi	r19, 0x00	; 0
    6e74:	40 e0       	ldi	r20, 0x00	; 0
    6e76:	50 e0       	ldi	r21, 0x00	; 0
    6e78:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    6e7c:	7d 83       	std	Y+5, r23	; 0x05
    6e7e:	6c 83       	std	Y+4, r22	; 0x04
    6e80:	01 15       	cp	r16, r1
    6e82:	11 05       	cpc	r17, r1
    6e84:	89 f0       	breq	.+34     	; 0x6ea8 <time_to_tm+0xda>
    6e86:	85 e4       	ldi	r24, 0x45	; 69
    6e88:	90 e0       	ldi	r25, 0x00	; 0
    6e8a:	9b 87       	std	Y+11, r25	; 0x0b
    6e8c:	8a 87       	std	Y+10, r24	; 0x0a
    6e8e:	8b e0       	ldi	r24, 0x0B	; 11
    6e90:	90 e0       	ldi	r25, 0x00	; 0
    6e92:	99 87       	std	Y+9, r25	; 0x09
    6e94:	88 87       	std	Y+8, r24	; 0x08
    6e96:	8f e1       	ldi	r24, 0x1F	; 31
    6e98:	90 e0       	ldi	r25, 0x00	; 0
    6e9a:	9f 83       	std	Y+7, r25	; 0x07
    6e9c:	8e 83       	std	Y+6, r24	; 0x06
    6e9e:	83 e0       	ldi	r24, 0x03	; 3
    6ea0:	90 e0       	ldi	r25, 0x00	; 0
    6ea2:	9d 87       	std	Y+13, r25	; 0x0d
    6ea4:	8c 87       	std	Y+12, r24	; 0x0c
    6ea6:	65 c0       	rjmp	.+202    	; 0x6f72 <time_to_tm+0x1a4>
    6ea8:	c5 01       	movw	r24, r10
    6eaa:	b4 01       	movw	r22, r8
    6eac:	20 e8       	ldi	r18, 0x80	; 128
    6eae:	31 e5       	ldi	r19, 0x51	; 81
    6eb0:	41 e0       	ldi	r20, 0x01	; 1
    6eb2:	50 e0       	ldi	r21, 0x00	; 0
    6eb4:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    6eb8:	49 01       	movw	r8, r18
    6eba:	5a 01       	movw	r10, r20
    6ebc:	ca 01       	movw	r24, r20
    6ebe:	b9 01       	movw	r22, r18
    6ec0:	6c 5f       	subi	r22, 0xFC	; 252
    6ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ec8:	27 e0       	ldi	r18, 0x07	; 7
    6eca:	30 e0       	ldi	r19, 0x00	; 0
    6ecc:	40 e0       	ldi	r20, 0x00	; 0
    6ece:	50 e0       	ldi	r21, 0x00	; 0
    6ed0:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
    6ed4:	7d 87       	std	Y+13, r23	; 0x0d
    6ed6:	6c 87       	std	Y+12, r22	; 0x0c
    6ed8:	02 eb       	ldi	r16, 0xB2	; 178
    6eda:	17 e0       	ldi	r17, 0x07	; 7
    6edc:	c8 01       	movw	r24, r16
    6ede:	31 df       	rcall	.-414    	; 0x6d42 <IS_Leap>
    6ee0:	00 97       	sbiw	r24, 0x00	; 0
    6ee2:	19 f4       	brne	.+6      	; 0x6eea <time_to_tm+0x11c>
    6ee4:	4d e6       	ldi	r20, 0x6D	; 109
    6ee6:	51 e0       	ldi	r21, 0x01	; 1
    6ee8:	02 c0       	rjmp	.+4      	; 0x6eee <time_to_tm+0x120>
    6eea:	4e e6       	ldi	r20, 0x6E	; 110
    6eec:	51 e0       	ldi	r21, 0x01	; 1
    6eee:	05 2e       	mov	r0, r21
    6ef0:	00 0c       	add	r0, r0
    6ef2:	66 0b       	sbc	r22, r22
    6ef4:	77 0b       	sbc	r23, r23
    6ef6:	84 16       	cp	r8, r20
    6ef8:	95 06       	cpc	r9, r21
    6efa:	a6 06       	cpc	r10, r22
    6efc:	b7 06       	cpc	r11, r23
    6efe:	3c f0       	brlt	.+14     	; 0x6f0e <time_to_tm+0x140>
    6f00:	0f 5f       	subi	r16, 0xFF	; 255
    6f02:	1f 4f       	sbci	r17, 0xFF	; 255
    6f04:	84 1a       	sub	r8, r20
    6f06:	95 0a       	sbc	r9, r21
    6f08:	a6 0a       	sbc	r10, r22
    6f0a:	b7 0a       	sbc	r11, r23
    6f0c:	e7 cf       	rjmp	.-50     	; 0x6edc <time_to_tm+0x10e>
    6f0e:	0c 56       	subi	r16, 0x6C	; 108
    6f10:	17 40       	sbci	r17, 0x07	; 7
    6f12:	1b 87       	std	Y+11, r17	; 0x0b
    6f14:	0a 87       	std	Y+10, r16	; 0x0a
    6f16:	9f 86       	std	Y+15, r9	; 0x0f
    6f18:	8e 86       	std	Y+14, r8	; 0x0e
    6f1a:	e8 e8       	ldi	r30, 0x88	; 136
    6f1c:	f3 e0       	ldi	r31, 0x03	; 3
    6f1e:	20 e0       	ldi	r18, 0x00	; 0
    6f20:	30 e0       	ldi	r19, 0x00	; 0
    6f22:	18 14       	cp	r1, r8
    6f24:	19 04       	cpc	r1, r9
    6f26:	1a 04       	cpc	r1, r10
    6f28:	1b 04       	cpc	r1, r11
    6f2a:	e4 f4       	brge	.+56     	; 0x6f64 <time_to_tm+0x196>
    6f2c:	2c 30       	cpi	r18, 0x0C	; 12
    6f2e:	31 05       	cpc	r19, r1
    6f30:	c9 f0       	breq	.+50     	; 0x6f64 <time_to_tm+0x196>
    6f32:	41 91       	ld	r20, Z+
    6f34:	51 91       	ld	r21, Z+
    6f36:	21 30       	cpi	r18, 0x01	; 1
    6f38:	31 05       	cpc	r19, r1
    6f3a:	21 f4       	brne	.+8      	; 0x6f44 <time_to_tm+0x176>
    6f3c:	00 97       	sbiw	r24, 0x00	; 0
    6f3e:	11 f0       	breq	.+4      	; 0x6f44 <time_to_tm+0x176>
    6f40:	4f 5f       	subi	r20, 0xFF	; 255
    6f42:	5f 4f       	sbci	r21, 0xFF	; 255
    6f44:	05 2e       	mov	r0, r21
    6f46:	00 0c       	add	r0, r0
    6f48:	66 0b       	sbc	r22, r22
    6f4a:	77 0b       	sbc	r23, r23
    6f4c:	84 16       	cp	r8, r20
    6f4e:	95 06       	cpc	r9, r21
    6f50:	a6 06       	cpc	r10, r22
    6f52:	b7 06       	cpc	r11, r23
    6f54:	3c f0       	brlt	.+14     	; 0x6f64 <time_to_tm+0x196>
    6f56:	84 1a       	sub	r8, r20
    6f58:	95 0a       	sbc	r9, r21
    6f5a:	a6 0a       	sbc	r10, r22
    6f5c:	b7 0a       	sbc	r11, r23
    6f5e:	2f 5f       	subi	r18, 0xFF	; 255
    6f60:	3f 4f       	sbci	r19, 0xFF	; 255
    6f62:	df cf       	rjmp	.-66     	; 0x6f22 <time_to_tm+0x154>
    6f64:	39 87       	std	Y+9, r19	; 0x09
    6f66:	28 87       	std	Y+8, r18	; 0x08
    6f68:	af ef       	ldi	r26, 0xFF	; 255
    6f6a:	8a 1a       	sub	r8, r26
    6f6c:	9a 0a       	sbc	r9, r26
    6f6e:	9f 82       	std	Y+7, r9	; 0x07
    6f70:	8e 82       	std	Y+6, r8	; 0x06
    6f72:	b6 01       	movw	r22, r12
    6f74:	c7 01       	movw	r24, r14
    6f76:	04 c0       	rjmp	.+8      	; 0x6f80 <time_to_tm+0x1b2>
    6f78:	6f ef       	ldi	r22, 0xFF	; 255
    6f7a:	7f ef       	ldi	r23, 0xFF	; 255
    6f7c:	8f ef       	ldi	r24, 0xFF	; 255
    6f7e:	9f ef       	ldi	r25, 0xFF	; 255
    6f80:	cd b7       	in	r28, 0x3d	; 61
    6f82:	de b7       	in	r29, 0x3e	; 62
    6f84:	e0 e1       	ldi	r30, 0x10	; 16
    6f86:	0c 94 34 e7 	jmp	0x1ce68	; 0x1ce68 <__epilogue_restores__+0x4>

00006f8a <gmtime_r>:
    6f8a:	0f 93       	push	r16
    6f8c:	1f 93       	push	r17
    6f8e:	cf 93       	push	r28
    6f90:	df 93       	push	r29
    6f92:	eb 01       	movw	r28, r22
    6f94:	fc 01       	movw	r30, r24
    6f96:	60 81       	ld	r22, Z
    6f98:	71 81       	ldd	r23, Z+1	; 0x01
    6f9a:	82 81       	ldd	r24, Z+2	; 0x02
    6f9c:	93 81       	ldd	r25, Z+3	; 0x03
    6f9e:	8e 01       	movw	r16, r28
    6fa0:	20 e0       	ldi	r18, 0x00	; 0
    6fa2:	30 e0       	ldi	r19, 0x00	; 0
    6fa4:	a9 01       	movw	r20, r18
    6fa6:	13 df       	rcall	.-474    	; 0x6dce <time_to_tm>
    6fa8:	ce 01       	movw	r24, r28
    6faa:	df 91       	pop	r29
    6fac:	cf 91       	pop	r28
    6fae:	1f 91       	pop	r17
    6fb0:	0f 91       	pop	r16
    6fb2:	08 95       	ret

00006fb4 <gmtime>:
    6fb4:	26 ec       	ldi	r18, 0xC6	; 198
    6fb6:	37 e1       	ldi	r19, 0x17	; 23
    6fb8:	30 93 dd 17 	sts	0x17DD, r19	; 0x8017dd <p.3677+0x1>
    6fbc:	20 93 dc 17 	sts	0x17DC, r18	; 0x8017dc <p.3677>
    6fc0:	b9 01       	movw	r22, r18
    6fc2:	e3 df       	rcall	.-58     	; 0x6f8a <gmtime_r>
    6fc4:	86 ec       	ldi	r24, 0xC6	; 198
    6fc6:	97 e1       	ldi	r25, 0x17	; 23
    6fc8:	08 95       	ret

00006fca <gettimezone>:
    6fca:	e0 e7       	ldi	r30, 0x70	; 112
    6fcc:	fa e1       	ldi	r31, 0x1A	; 26
    6fce:	20 81       	ld	r18, Z
    6fd0:	31 81       	ldd	r19, Z+1	; 0x01
    6fd2:	dc 01       	movw	r26, r24
    6fd4:	2d 93       	st	X+, r18
    6fd6:	3c 93       	st	X, r19
    6fd8:	22 81       	ldd	r18, Z+2	; 0x02
    6fda:	33 81       	ldd	r19, Z+3	; 0x03
    6fdc:	fc 01       	movw	r30, r24
    6fde:	33 83       	std	Z+3, r19	; 0x03
    6fe0:	22 83       	std	Z+2, r18	; 0x02
    6fe2:	80 e0       	ldi	r24, 0x00	; 0
    6fe4:	90 e0       	ldi	r25, 0x00	; 0
    6fe6:	08 95       	ret

00006fe8 <settimezone>:
    6fe8:	cf 93       	push	r28
    6fea:	df 93       	push	r29
    6fec:	ec 01       	movw	r28, r24
    6fee:	28 81       	ld	r18, Y
    6ff0:	39 81       	ldd	r19, Y+1	; 0x01
    6ff2:	e0 e7       	ldi	r30, 0x70	; 112
    6ff4:	fa e1       	ldi	r31, 0x1A	; 26
    6ff6:	31 83       	std	Z+1, r19	; 0x01
    6ff8:	20 83       	st	Z, r18
    6ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    6ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    6ffe:	93 83       	std	Z+3, r25	; 0x03
    7000:	82 83       	std	Z+2, r24	; 0x02
    7002:	80 e0       	ldi	r24, 0x00	; 0
    7004:	90 e0       	ldi	r25, 0x00	; 0
    7006:	df 91       	pop	r29
    7008:	cf 91       	pop	r28
    700a:	08 95       	ret

0000700c <gettimeofday>:
    700c:	a8 e0       	ldi	r26, 0x08	; 8
    700e:	b0 e0       	ldi	r27, 0x00	; 0
    7010:	ec e0       	ldi	r30, 0x0C	; 12
    7012:	f8 e3       	ldi	r31, 0x38	; 56
    7014:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
    7018:	8c 01       	movw	r16, r24
    701a:	7b 01       	movw	r14, r22
    701c:	be 01       	movw	r22, r28
    701e:	6f 5f       	subi	r22, 0xFF	; 255
    7020:	7f 4f       	sbci	r23, 0xFF	; 255
    7022:	80 e0       	ldi	r24, 0x00	; 0
    7024:	90 e0       	ldi	r25, 0x00	; 0
    7026:	dc db       	rcall	.-2120   	; 0x67e0 <clock_gettime>
    7028:	89 81       	ldd	r24, Y+1	; 0x01
    702a:	9a 81       	ldd	r25, Y+2	; 0x02
    702c:	ab 81       	ldd	r26, Y+3	; 0x03
    702e:	bc 81       	ldd	r27, Y+4	; 0x04
    7030:	f8 01       	movw	r30, r16
    7032:	80 83       	st	Z, r24
    7034:	91 83       	std	Z+1, r25	; 0x01
    7036:	a2 83       	std	Z+2, r26	; 0x02
    7038:	b3 83       	std	Z+3, r27	; 0x03
    703a:	6d 81       	ldd	r22, Y+5	; 0x05
    703c:	7e 81       	ldd	r23, Y+6	; 0x06
    703e:	8f 81       	ldd	r24, Y+7	; 0x07
    7040:	98 85       	ldd	r25, Y+8	; 0x08
    7042:	28 ee       	ldi	r18, 0xE8	; 232
    7044:	33 e0       	ldi	r19, 0x03	; 3
    7046:	40 e0       	ldi	r20, 0x00	; 0
    7048:	50 e0       	ldi	r21, 0x00	; 0
    704a:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
    704e:	f8 01       	movw	r30, r16
    7050:	24 83       	std	Z+4, r18	; 0x04
    7052:	35 83       	std	Z+5, r19	; 0x05
    7054:	46 83       	std	Z+6, r20	; 0x06
    7056:	57 83       	std	Z+7, r21	; 0x07
    7058:	c7 01       	movw	r24, r14
    705a:	b7 df       	rcall	.-146    	; 0x6fca <gettimezone>
    705c:	80 e0       	ldi	r24, 0x00	; 0
    705e:	90 e0       	ldi	r25, 0x00	; 0
    7060:	28 96       	adiw	r28, 0x08	; 8
    7062:	e6 e0       	ldi	r30, 0x06	; 6
    7064:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

00007068 <time>:
    7068:	cf 93       	push	r28
    706a:	df 93       	push	r29
    706c:	ec 01       	movw	r28, r24
    706e:	68 ea       	ldi	r22, 0xA8	; 168
    7070:	77 e1       	ldi	r23, 0x17	; 23
    7072:	80 e0       	ldi	r24, 0x00	; 0
    7074:	90 e0       	ldi	r25, 0x00	; 0
    7076:	b4 db       	rcall	.-2200   	; 0x67e0 <clock_gettime>
    7078:	20 97       	sbiw	r28, 0x00	; 0
    707a:	61 f0       	breq	.+24     	; 0x7094 <time+0x2c>
    707c:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <ts.3755>
    7080:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    7084:	a0 91 aa 17 	lds	r26, 0x17AA	; 0x8017aa <ts.3755+0x2>
    7088:	b0 91 ab 17 	lds	r27, 0x17AB	; 0x8017ab <ts.3755+0x3>
    708c:	88 83       	st	Y, r24
    708e:	99 83       	std	Y+1, r25	; 0x01
    7090:	aa 83       	std	Y+2, r26	; 0x02
    7092:	bb 83       	std	Y+3, r27	; 0x03
    7094:	60 91 a8 17 	lds	r22, 0x17A8	; 0x8017a8 <ts.3755>
    7098:	70 91 a9 17 	lds	r23, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    709c:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <ts.3755+0x2>
    70a0:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <ts.3755+0x3>
    70a4:	df 91       	pop	r29
    70a6:	cf 91       	pop	r28
    70a8:	08 95       	ret

000070aa <is_dst>:
    70aa:	cf 92       	push	r12
    70ac:	df 92       	push	r13
    70ae:	ef 92       	push	r14
    70b0:	ff 92       	push	r15
    70b2:	6b 01       	movw	r12, r22
    70b4:	7c 01       	movw	r14, r24
    70b6:	05 d4       	rcall	.+2058   	; 0x78c2 <set_dst>
    70b8:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <dst>
    70bc:	90 91 75 1a 	lds	r25, 0x1A75	; 0x801a75 <dst+0x1>
    70c0:	a0 91 76 1a 	lds	r26, 0x1A76	; 0x801a76 <dst+0x2>
    70c4:	b0 91 77 1a 	lds	r27, 0x1A77	; 0x801a77 <dst+0x3>
    70c8:	c8 16       	cp	r12, r24
    70ca:	d9 06       	cpc	r13, r25
    70cc:	ea 06       	cpc	r14, r26
    70ce:	fb 06       	cpc	r15, r27
    70d0:	88 f0       	brcs	.+34     	; 0x70f4 <is_dst+0x4a>
    70d2:	81 e0       	ldi	r24, 0x01	; 1
    70d4:	90 e0       	ldi	r25, 0x00	; 0
    70d6:	40 91 78 1a 	lds	r20, 0x1A78	; 0x801a78 <dst+0x4>
    70da:	50 91 79 1a 	lds	r21, 0x1A79	; 0x801a79 <dst+0x5>
    70de:	60 91 7a 1a 	lds	r22, 0x1A7A	; 0x801a7a <dst+0x6>
    70e2:	70 91 7b 1a 	lds	r23, 0x1A7B	; 0x801a7b <dst+0x7>
    70e6:	4c 15       	cp	r20, r12
    70e8:	5d 05       	cpc	r21, r13
    70ea:	6e 05       	cpc	r22, r14
    70ec:	7f 05       	cpc	r23, r15
    70ee:	20 f4       	brcc	.+8      	; 0x70f8 <is_dst+0x4e>
    70f0:	80 e0       	ldi	r24, 0x00	; 0
    70f2:	02 c0       	rjmp	.+4      	; 0x70f8 <is_dst+0x4e>
    70f4:	80 e0       	ldi	r24, 0x00	; 0
    70f6:	90 e0       	ldi	r25, 0x00	; 0
    70f8:	ff 90       	pop	r15
    70fa:	ef 90       	pop	r14
    70fc:	df 90       	pop	r13
    70fe:	cf 90       	pop	r12
    7100:	08 95       	ret

00007102 <localtime_r>:
    7102:	4f 92       	push	r4
    7104:	5f 92       	push	r5
    7106:	6f 92       	push	r6
    7108:	7f 92       	push	r7
    710a:	af 92       	push	r10
    710c:	bf 92       	push	r11
    710e:	cf 92       	push	r12
    7110:	df 92       	push	r13
    7112:	ef 92       	push	r14
    7114:	ff 92       	push	r15
    7116:	0f 93       	push	r16
    7118:	1f 93       	push	r17
    711a:	cf 93       	push	r28
    711c:	df 93       	push	r29
    711e:	00 d0       	rcall	.+0      	; 0x7120 <localtime_r+0x1e>
    7120:	00 d0       	rcall	.+0      	; 0x7122 <localtime_r+0x20>
    7122:	cd b7       	in	r28, 0x3d	; 61
    7124:	de b7       	in	r29, 0x3e	; 62
    7126:	5b 01       	movw	r10, r22
    7128:	fc 01       	movw	r30, r24
    712a:	40 80       	ld	r4, Z
    712c:	51 80       	ldd	r5, Z+1	; 0x01
    712e:	62 80       	ldd	r6, Z+2	; 0x02
    7130:	73 80       	ldd	r7, Z+3	; 0x03
    7132:	ce 01       	movw	r24, r28
    7134:	01 96       	adiw	r24, 0x01	; 1
    7136:	49 df       	rcall	.-366    	; 0x6fca <gettimezone>
    7138:	a9 81       	ldd	r26, Y+1	; 0x01
    713a:	ba 81       	ldd	r27, Y+2	; 0x02
    713c:	2c e3       	ldi	r18, 0x3C	; 60
    713e:	30 e0       	ldi	r19, 0x00	; 0
    7140:	0e 94 f0 e6 	call	0x1cde0	; 0x1cde0 <__usmulhisi3>
    7144:	6b 01       	movw	r12, r22
    7146:	7c 01       	movw	r14, r24
    7148:	c3 01       	movw	r24, r6
    714a:	b2 01       	movw	r22, r4
    714c:	6c 19       	sub	r22, r12
    714e:	7d 09       	sbc	r23, r13
    7150:	8e 09       	sbc	r24, r14
    7152:	9f 09       	sbc	r25, r15
    7154:	aa df       	rcall	.-172    	; 0x70aa <is_dst>
    7156:	89 2b       	or	r24, r25
    7158:	31 f0       	breq	.+12     	; 0x7166 <localtime_r+0x64>
    715a:	f0 e1       	ldi	r31, 0x10	; 16
    715c:	cf 1a       	sub	r12, r31
    715e:	fe e0       	ldi	r31, 0x0E	; 14
    7160:	df 0a       	sbc	r13, r31
    7162:	e1 08       	sbc	r14, r1
    7164:	f1 08       	sbc	r15, r1
    7166:	85 01       	movw	r16, r10
    7168:	a7 01       	movw	r20, r14
    716a:	96 01       	movw	r18, r12
    716c:	c3 01       	movw	r24, r6
    716e:	b2 01       	movw	r22, r4
    7170:	2e de       	rcall	.-932    	; 0x6dce <time_to_tm>
    7172:	c5 01       	movw	r24, r10
    7174:	0f 90       	pop	r0
    7176:	0f 90       	pop	r0
    7178:	0f 90       	pop	r0
    717a:	0f 90       	pop	r0
    717c:	df 91       	pop	r29
    717e:	cf 91       	pop	r28
    7180:	1f 91       	pop	r17
    7182:	0f 91       	pop	r16
    7184:	ff 90       	pop	r15
    7186:	ef 90       	pop	r14
    7188:	df 90       	pop	r13
    718a:	cf 90       	pop	r12
    718c:	bf 90       	pop	r11
    718e:	af 90       	pop	r10
    7190:	7f 90       	pop	r7
    7192:	6f 90       	pop	r6
    7194:	5f 90       	pop	r5
    7196:	4f 90       	pop	r4
    7198:	08 95       	ret

0000719a <localtime>:
    719a:	60 eb       	ldi	r22, 0xB0	; 176
    719c:	77 e1       	ldi	r23, 0x17	; 23
    719e:	b1 cf       	rjmp	.-158    	; 0x7102 <localtime_r>
    71a0:	08 95       	ret

000071a2 <normalize>:
    71a2:	aa e0       	ldi	r26, 0x0A	; 10
    71a4:	b0 e0       	ldi	r27, 0x00	; 0
    71a6:	e7 ed       	ldi	r30, 0xD7	; 215
    71a8:	f8 e3       	ldi	r31, 0x38	; 56
    71aa:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    71ae:	7c 01       	movw	r14, r24
    71b0:	7a 87       	std	Y+10, r23	; 0x0a
    71b2:	69 87       	std	Y+9, r22	; 0x09
    71b4:	f7 01       	movw	r30, r14
    71b6:	80 81       	ld	r24, Z
    71b8:	91 81       	ldd	r25, Z+1	; 0x01
    71ba:	8c 33       	cpi	r24, 0x3C	; 60
    71bc:	91 05       	cpc	r25, r1
    71be:	5c f0       	brlt	.+22     	; 0x71d6 <normalize+0x34>
    71c0:	f7 01       	movw	r30, r14
    71c2:	22 81       	ldd	r18, Z+2	; 0x02
    71c4:	33 81       	ldd	r19, Z+3	; 0x03
    71c6:	2f 5f       	subi	r18, 0xFF	; 255
    71c8:	3f 4f       	sbci	r19, 0xFF	; 255
    71ca:	33 83       	std	Z+3, r19	; 0x03
    71cc:	22 83       	std	Z+2, r18	; 0x02
    71ce:	cc 97       	sbiw	r24, 0x3c	; 60
    71d0:	91 83       	std	Z+1, r25	; 0x01
    71d2:	80 83       	st	Z, r24
    71d4:	ef cf       	rjmp	.-34     	; 0x71b4 <normalize+0x12>
    71d6:	f7 01       	movw	r30, r14
    71d8:	01 90       	ld	r0, Z+
    71da:	f0 81       	ld	r31, Z
    71dc:	e0 2d       	mov	r30, r0
    71de:	fe 83       	std	Y+6, r31	; 0x06
    71e0:	ed 83       	std	Y+5, r30	; 0x05
    71e2:	f7 ff       	sbrs	r31, 7
    71e4:	0d c0       	rjmp	.+26     	; 0x7200 <normalize+0x5e>
    71e6:	f7 01       	movw	r30, r14
    71e8:	82 81       	ldd	r24, Z+2	; 0x02
    71ea:	93 81       	ldd	r25, Z+3	; 0x03
    71ec:	01 97       	sbiw	r24, 0x01	; 1
    71ee:	93 83       	std	Z+3, r25	; 0x03
    71f0:	82 83       	std	Z+2, r24	; 0x02
    71f2:	6d 81       	ldd	r22, Y+5	; 0x05
    71f4:	7e 81       	ldd	r23, Y+6	; 0x06
    71f6:	64 5c       	subi	r22, 0xC4	; 196
    71f8:	7f 4f       	sbci	r23, 0xFF	; 255
    71fa:	71 83       	std	Z+1, r23	; 0x01
    71fc:	60 83       	st	Z, r22
    71fe:	eb cf       	rjmp	.-42     	; 0x71d6 <normalize+0x34>
    7200:	f7 01       	movw	r30, r14
    7202:	82 81       	ldd	r24, Z+2	; 0x02
    7204:	93 81       	ldd	r25, Z+3	; 0x03
    7206:	8c 33       	cpi	r24, 0x3C	; 60
    7208:	91 05       	cpc	r25, r1
    720a:	5c f0       	brlt	.+22     	; 0x7222 <normalize+0x80>
    720c:	f7 01       	movw	r30, r14
    720e:	24 81       	ldd	r18, Z+4	; 0x04
    7210:	35 81       	ldd	r19, Z+5	; 0x05
    7212:	2f 5f       	subi	r18, 0xFF	; 255
    7214:	3f 4f       	sbci	r19, 0xFF	; 255
    7216:	35 83       	std	Z+5, r19	; 0x05
    7218:	24 83       	std	Z+4, r18	; 0x04
    721a:	cc 97       	sbiw	r24, 0x3c	; 60
    721c:	93 83       	std	Z+3, r25	; 0x03
    721e:	82 83       	std	Z+2, r24	; 0x02
    7220:	ef cf       	rjmp	.-34     	; 0x7200 <normalize+0x5e>
    7222:	f7 01       	movw	r30, r14
    7224:	22 80       	ldd	r2, Z+2	; 0x02
    7226:	33 80       	ldd	r3, Z+3	; 0x03
    7228:	37 fe       	sbrs	r3, 7
    722a:	0d c0       	rjmp	.+26     	; 0x7246 <normalize+0xa4>
    722c:	f7 01       	movw	r30, r14
    722e:	84 81       	ldd	r24, Z+4	; 0x04
    7230:	95 81       	ldd	r25, Z+5	; 0x05
    7232:	01 97       	sbiw	r24, 0x01	; 1
    7234:	95 83       	std	Z+5, r25	; 0x05
    7236:	84 83       	std	Z+4, r24	; 0x04
    7238:	fc e3       	ldi	r31, 0x3C	; 60
    723a:	2f 0e       	add	r2, r31
    723c:	31 1c       	adc	r3, r1
    723e:	f7 01       	movw	r30, r14
    7240:	33 82       	std	Z+3, r3	; 0x03
    7242:	22 82       	std	Z+2, r2	; 0x02
    7244:	ee cf       	rjmp	.-36     	; 0x7222 <normalize+0x80>
    7246:	f7 01       	movw	r30, r14
    7248:	84 81       	ldd	r24, Z+4	; 0x04
    724a:	95 81       	ldd	r25, Z+5	; 0x05
    724c:	88 31       	cpi	r24, 0x18	; 24
    724e:	91 05       	cpc	r25, r1
    7250:	5c f0       	brlt	.+22     	; 0x7268 <normalize+0xc6>
    7252:	f7 01       	movw	r30, r14
    7254:	26 81       	ldd	r18, Z+6	; 0x06
    7256:	37 81       	ldd	r19, Z+7	; 0x07
    7258:	2f 5f       	subi	r18, 0xFF	; 255
    725a:	3f 4f       	sbci	r19, 0xFF	; 255
    725c:	37 83       	std	Z+7, r19	; 0x07
    725e:	26 83       	std	Z+6, r18	; 0x06
    7260:	48 97       	sbiw	r24, 0x18	; 24
    7262:	95 83       	std	Z+5, r25	; 0x05
    7264:	84 83       	std	Z+4, r24	; 0x04
    7266:	ef cf       	rjmp	.-34     	; 0x7246 <normalize+0xa4>
    7268:	f7 01       	movw	r30, r14
    726a:	04 81       	ldd	r16, Z+4	; 0x04
    726c:	15 81       	ldd	r17, Z+5	; 0x05
    726e:	17 ff       	sbrs	r17, 7
    7270:	0b c0       	rjmp	.+22     	; 0x7288 <normalize+0xe6>
    7272:	f7 01       	movw	r30, r14
    7274:	86 81       	ldd	r24, Z+6	; 0x06
    7276:	97 81       	ldd	r25, Z+7	; 0x07
    7278:	01 97       	sbiw	r24, 0x01	; 1
    727a:	97 83       	std	Z+7, r25	; 0x07
    727c:	86 83       	std	Z+6, r24	; 0x06
    727e:	08 5e       	subi	r16, 0xE8	; 232
    7280:	1f 4f       	sbci	r17, 0xFF	; 255
    7282:	15 83       	std	Z+5, r17	; 0x05
    7284:	04 83       	std	Z+4, r16	; 0x04
    7286:	f0 cf       	rjmp	.-32     	; 0x7268 <normalize+0xc6>
    7288:	f7 01       	movw	r30, r14
    728a:	80 85       	ldd	r24, Z+8	; 0x08
    728c:	91 85       	ldd	r25, Z+9	; 0x09
    728e:	8c 30       	cpi	r24, 0x0C	; 12
    7290:	91 05       	cpc	r25, r1
    7292:	5c f0       	brlt	.+22     	; 0x72aa <normalize+0x108>
    7294:	f7 01       	movw	r30, r14
    7296:	22 85       	ldd	r18, Z+10	; 0x0a
    7298:	33 85       	ldd	r19, Z+11	; 0x0b
    729a:	2f 5f       	subi	r18, 0xFF	; 255
    729c:	3f 4f       	sbci	r19, 0xFF	; 255
    729e:	33 87       	std	Z+11, r19	; 0x0b
    72a0:	22 87       	std	Z+10, r18	; 0x0a
    72a2:	0c 97       	sbiw	r24, 0x0c	; 12
    72a4:	91 87       	std	Z+9, r25	; 0x09
    72a6:	80 87       	std	Z+8, r24	; 0x08
    72a8:	ef cf       	rjmp	.-34     	; 0x7288 <normalize+0xe6>
    72aa:	f7 01       	movw	r30, r14
    72ac:	80 85       	ldd	r24, Z+8	; 0x08
    72ae:	91 85       	ldd	r25, Z+9	; 0x09
    72b0:	97 ff       	sbrs	r25, 7
    72b2:	2d c0       	rjmp	.+90     	; 0x730e <normalize+0x16c>
    72b4:	f7 01       	movw	r30, r14
    72b6:	22 85       	ldd	r18, Z+10	; 0x0a
    72b8:	33 85       	ldd	r19, Z+11	; 0x0b
    72ba:	21 50       	subi	r18, 0x01	; 1
    72bc:	31 09       	sbc	r19, r1
    72be:	33 87       	std	Z+11, r19	; 0x0b
    72c0:	22 87       	std	Z+10, r18	; 0x0a
    72c2:	0c 96       	adiw	r24, 0x0c	; 12
    72c4:	91 87       	std	Z+9, r25	; 0x09
    72c6:	80 87       	std	Z+8, r24	; 0x08
    72c8:	f0 cf       	rjmp	.-32     	; 0x72aa <normalize+0x108>
    72ca:	f7 01       	movw	r30, r14
    72cc:	c6 80       	ldd	r12, Z+6	; 0x06
    72ce:	d7 80       	ldd	r13, Z+7	; 0x07
    72d0:	a0 84       	ldd	r10, Z+8	; 0x08
    72d2:	b1 84       	ldd	r11, Z+9	; 0x09
    72d4:	b4 01       	movw	r22, r8
    72d6:	c5 01       	movw	r24, r10
    72d8:	59 dd       	rcall	.-1358   	; 0x6d8c <Days_Per_Month>
    72da:	8c 15       	cp	r24, r12
    72dc:	9d 05       	cpc	r25, r13
    72de:	84 f5       	brge	.+96     	; 0x7340 <normalize+0x19e>
    72e0:	c8 1a       	sub	r12, r24
    72e2:	d9 0a       	sbc	r13, r25
    72e4:	f7 01       	movw	r30, r14
    72e6:	d7 82       	std	Z+7, r13	; 0x07
    72e8:	c6 82       	std	Z+6, r12	; 0x06
    72ea:	c5 01       	movw	r24, r10
    72ec:	01 96       	adiw	r24, 0x01	; 1
    72ee:	91 87       	std	Z+9, r25	; 0x09
    72f0:	80 87       	std	Z+8, r24	; 0x08
    72f2:	0c 97       	sbiw	r24, 0x0c	; 12
    72f4:	54 f3       	brlt	.-44     	; 0x72ca <normalize+0x128>
    72f6:	fb e0       	ldi	r31, 0x0B	; 11
    72f8:	af 1a       	sub	r10, r31
    72fa:	b1 08       	sbc	r11, r1
    72fc:	f7 01       	movw	r30, r14
    72fe:	b1 86       	std	Z+9, r11	; 0x09
    7300:	a0 86       	std	Z+8, r10	; 0x08
    7302:	ff ef       	ldi	r31, 0xFF	; 255
    7304:	8f 1a       	sub	r8, r31
    7306:	9f 0a       	sbc	r9, r31
    7308:	f7 01       	movw	r30, r14
    730a:	93 86       	std	Z+11, r9	; 0x0b
    730c:	82 86       	std	Z+10, r8	; 0x0a
    730e:	f7 01       	movw	r30, r14
    7310:	82 84       	ldd	r8, Z+10	; 0x0a
    7312:	93 84       	ldd	r9, Z+11	; 0x0b
    7314:	da cf       	rjmp	.-76     	; 0x72ca <normalize+0x128>
    7316:	f7 01       	movw	r30, r14
    7318:	80 85       	ldd	r24, Z+8	; 0x08
    731a:	91 85       	ldd	r25, Z+9	; 0x09
    731c:	9c 01       	movw	r18, r24
    731e:	21 50       	subi	r18, 0x01	; 1
    7320:	31 09       	sbc	r19, r1
    7322:	37 fd       	sbrc	r19, 7
    7324:	16 c0       	rjmp	.+44     	; 0x7352 <normalize+0x1b0>
    7326:	31 87       	std	Z+9, r19	; 0x09
    7328:	20 87       	std	Z+8, r18	; 0x08
    732a:	f7 01       	movw	r30, r14
    732c:	62 85       	ldd	r22, Z+10	; 0x0a
    732e:	73 85       	ldd	r23, Z+11	; 0x0b
    7330:	80 85       	ldd	r24, Z+8	; 0x08
    7332:	91 85       	ldd	r25, Z+9	; 0x09
    7334:	2b dd       	rcall	.-1450   	; 0x6d8c <Days_Per_Month>
    7336:	88 0d       	add	r24, r8
    7338:	99 1d       	adc	r25, r9
    733a:	f7 01       	movw	r30, r14
    733c:	97 83       	std	Z+7, r25	; 0x07
    733e:	86 83       	std	Z+6, r24	; 0x06
    7340:	f7 01       	movw	r30, r14
    7342:	86 80       	ldd	r8, Z+6	; 0x06
    7344:	97 80       	ldd	r9, Z+7	; 0x07
    7346:	a2 84       	ldd	r10, Z+10	; 0x0a
    7348:	b3 84       	ldd	r11, Z+11	; 0x0b
    734a:	18 14       	cp	r1, r8
    734c:	19 04       	cpc	r1, r9
    734e:	1c f7       	brge	.-58     	; 0x7316 <normalize+0x174>
    7350:	0b c0       	rjmp	.+22     	; 0x7368 <normalize+0x1c6>
    7352:	0b 96       	adiw	r24, 0x0b	; 11
    7354:	f7 01       	movw	r30, r14
    7356:	91 87       	std	Z+9, r25	; 0x09
    7358:	80 87       	std	Z+8, r24	; 0x08
    735a:	f1 e0       	ldi	r31, 0x01	; 1
    735c:	af 1a       	sub	r10, r31
    735e:	b1 08       	sbc	r11, r1
    7360:	f7 01       	movw	r30, r14
    7362:	b3 86       	std	Z+11, r11	; 0x0b
    7364:	a2 86       	std	Z+10, r10	; 0x0a
    7366:	e1 cf       	rjmp	.-62     	; 0x732a <normalize+0x188>
    7368:	a5 01       	movw	r20, r10
    736a:	44 59       	subi	r20, 0x94	; 148
    736c:	58 4f       	sbci	r21, 0xF8	; 248
    736e:	58 87       	std	Y+8, r21	; 0x08
    7370:	4f 83       	std	Y+7, r20	; 0x07
    7372:	35 01       	movw	r6, r10
    7374:	56 e4       	ldi	r21, 0x46	; 70
    7376:	65 1a       	sub	r6, r21
    7378:	71 08       	sbc	r7, r1
    737a:	89 e8       	ldi	r24, 0x89	; 137
    737c:	68 16       	cp	r6, r24
    737e:	71 04       	cpc	r7, r1
    7380:	08 f0       	brcs	.+2      	; 0x7384 <normalize+0x1e2>
    7382:	9b c0       	rjmp	.+310    	; 0x74ba <normalize+0x318>
    7384:	c0 84       	ldd	r12, Z+8	; 0x08
    7386:	d1 84       	ldd	r13, Z+9	; 0x09
    7388:	9c e0       	ldi	r25, 0x0C	; 12
    738a:	c9 16       	cp	r12, r25
    738c:	d1 04       	cpc	r13, r1
    738e:	08 f0       	brcs	.+2      	; 0x7392 <normalize+0x1f0>
    7390:	94 c0       	rjmp	.+296    	; 0x74ba <normalize+0x318>
    7392:	24 01       	movw	r4, r8
    7394:	e1 e0       	ldi	r30, 0x01	; 1
    7396:	4e 1a       	sub	r4, r30
    7398:	51 08       	sbc	r5, r1
    739a:	6f 81       	ldd	r22, Y+7	; 0x07
    739c:	78 85       	ldd	r23, Y+8	; 0x08
    739e:	c6 01       	movw	r24, r12
    73a0:	f5 dc       	rcall	.-1558   	; 0x6d8c <Days_Per_Month>
    73a2:	48 16       	cp	r4, r24
    73a4:	59 06       	cpc	r5, r25
    73a6:	0c f0       	brlt	.+2      	; 0x73aa <normalize+0x208>
    73a8:	88 c0       	rjmp	.+272    	; 0x74ba <normalize+0x318>
    73aa:	08 31       	cpi	r16, 0x18	; 24
    73ac:	11 05       	cpc	r17, r1
    73ae:	0c f0       	brlt	.+2      	; 0x73b2 <normalize+0x210>
    73b0:	84 c0       	rjmp	.+264    	; 0x74ba <normalize+0x318>
    73b2:	fc e3       	ldi	r31, 0x3C	; 60
    73b4:	2f 16       	cp	r2, r31
    73b6:	31 04       	cpc	r3, r1
    73b8:	0c f0       	brlt	.+2      	; 0x73bc <normalize+0x21a>
    73ba:	7f c0       	rjmp	.+254    	; 0x74ba <normalize+0x318>
    73bc:	4d 81       	ldd	r20, Y+5	; 0x05
    73be:	5e 81       	ldd	r21, Y+6	; 0x06
    73c0:	4c 33       	cpi	r20, 0x3C	; 60
    73c2:	51 05       	cpc	r21, r1
    73c4:	0c f0       	brlt	.+2      	; 0x73c8 <normalize+0x226>
    73c6:	79 c0       	rjmp	.+242    	; 0x74ba <normalize+0x318>
    73c8:	2d e6       	ldi	r18, 0x6D	; 109
    73ca:	31 e0       	ldi	r19, 0x01	; 1
    73cc:	d3 01       	movw	r26, r6
    73ce:	0e 94 f0 e6 	call	0x1cde0	; 0x1cde0 <__usmulhisi3>
    73d2:	f6 01       	movw	r30, r12
    73d4:	ee 0f       	add	r30, r30
    73d6:	ff 1f       	adc	r31, r31
    73d8:	e0 56       	subi	r30, 0x60	; 96
    73da:	fc 4f       	sbci	r31, 0xFC	; 252
    73dc:	20 81       	ld	r18, Z
    73de:	31 81       	ldd	r19, Z+1	; 0x01
    73e0:	dc 01       	movw	r26, r24
    73e2:	cb 01       	movw	r24, r22
    73e4:	82 0f       	add	r24, r18
    73e6:	93 1f       	adc	r25, r19
    73e8:	a1 1d       	adc	r26, r1
    73ea:	b1 1d       	adc	r27, r1
    73ec:	05 2c       	mov	r0, r5
    73ee:	00 0c       	add	r0, r0
    73f0:	66 08       	sbc	r6, r6
    73f2:	77 08       	sbc	r7, r7
    73f4:	48 0e       	add	r4, r24
    73f6:	59 1e       	adc	r5, r25
    73f8:	6a 1e       	adc	r6, r26
    73fa:	7b 1e       	adc	r7, r27
    73fc:	1a 14       	cp	r1, r10
    73fe:	1b 04       	cpc	r1, r11
    7400:	1c f4       	brge	.+6      	; 0x7408 <normalize+0x266>
    7402:	51 e0       	ldi	r21, 0x01	; 1
    7404:	a5 1a       	sub	r10, r21
    7406:	b1 08       	sbc	r11, r1
    7408:	45 01       	movw	r8, r10
    740a:	95 94       	asr	r9
    740c:	87 94       	ror	r8
    740e:	95 94       	asr	r9
    7410:	87 94       	ror	r8
    7412:	88 ec       	ldi	r24, 0xC8	; 200
    7414:	a8 16       	cp	r10, r24
    7416:	b1 04       	cpc	r11, r1
    7418:	1c f0       	brlt	.+6      	; 0x7420 <normalize+0x27e>
    741a:	91 e0       	ldi	r25, 0x01	; 1
    741c:	89 1a       	sub	r8, r25
    741e:	91 08       	sbc	r9, r1
    7420:	09 2c       	mov	r0, r9
    7422:	00 0c       	add	r0, r0
    7424:	aa 08       	sbc	r10, r10
    7426:	bb 08       	sbc	r11, r11
    7428:	84 0c       	add	r8, r4
    742a:	95 1c       	adc	r9, r5
    742c:	a6 1c       	adc	r10, r6
    742e:	b7 1c       	adc	r11, r7
    7430:	24 01       	movw	r4, r8
    7432:	35 01       	movw	r6, r10
    7434:	e1 e1       	ldi	r30, 0x11	; 17
    7436:	4e 1a       	sub	r4, r30
    7438:	51 08       	sbc	r5, r1
    743a:	61 08       	sbc	r6, r1
    743c:	71 08       	sbc	r7, r1
    743e:	f2 e0       	ldi	r31, 0x02	; 2
    7440:	cf 16       	cp	r12, r31
    7442:	d1 04       	cpc	r13, r1
    7444:	64 f0       	brlt	.+24     	; 0x745e <normalize+0x2bc>
    7446:	8f 81       	ldd	r24, Y+7	; 0x07
    7448:	98 85       	ldd	r25, Y+8	; 0x08
    744a:	7b dc       	rcall	.-1802   	; 0x6d42 <IS_Leap>
    744c:	89 2b       	or	r24, r25
    744e:	39 f0       	breq	.+14     	; 0x745e <normalize+0x2bc>
    7450:	24 01       	movw	r4, r8
    7452:	35 01       	movw	r6, r10
    7454:	40 e1       	ldi	r20, 0x10	; 16
    7456:	44 1a       	sub	r4, r20
    7458:	51 08       	sbc	r5, r1
    745a:	61 08       	sbc	r6, r1
    745c:	71 08       	sbc	r7, r1
    745e:	a8 e1       	ldi	r26, 0x18	; 24
    7460:	b0 e0       	ldi	r27, 0x00	; 0
    7462:	a3 01       	movw	r20, r6
    7464:	92 01       	movw	r18, r4
    7466:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
    746a:	01 2e       	mov	r0, r17
    746c:	00 0c       	add	r0, r0
    746e:	22 0b       	sbc	r18, r18
    7470:	33 0b       	sbc	r19, r19
    7472:	a9 01       	movw	r20, r18
    7474:	98 01       	movw	r18, r16
    7476:	26 0f       	add	r18, r22
    7478:	37 1f       	adc	r19, r23
    747a:	48 1f       	adc	r20, r24
    747c:	59 1f       	adc	r21, r25
    747e:	ac e3       	ldi	r26, 0x3C	; 60
    7480:	b0 e0       	ldi	r27, 0x00	; 0
    7482:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
    7486:	81 01       	movw	r16, r2
    7488:	03 2c       	mov	r0, r3
    748a:	00 0c       	add	r0, r0
    748c:	22 0b       	sbc	r18, r18
    748e:	33 0b       	sbc	r19, r19
    7490:	a9 01       	movw	r20, r18
    7492:	98 01       	movw	r18, r16
    7494:	26 0f       	add	r18, r22
    7496:	37 1f       	adc	r19, r23
    7498:	48 1f       	adc	r20, r24
    749a:	59 1f       	adc	r21, r25
    749c:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
    74a0:	ed 81       	ldd	r30, Y+5	; 0x05
    74a2:	fe 81       	ldd	r31, Y+6	; 0x06
    74a4:	8f 01       	movw	r16, r30
    74a6:	ff 0f       	add	r31, r31
    74a8:	22 0b       	sbc	r18, r18
    74aa:	33 0b       	sbc	r19, r19
    74ac:	48 01       	movw	r8, r16
    74ae:	59 01       	movw	r10, r18
    74b0:	86 0e       	add	r8, r22
    74b2:	97 1e       	adc	r9, r23
    74b4:	a8 1e       	adc	r10, r24
    74b6:	b9 1e       	adc	r11, r25
    74b8:	04 c0       	rjmp	.+8      	; 0x74c2 <normalize+0x320>
    74ba:	88 24       	eor	r8, r8
    74bc:	8a 94       	dec	r8
    74be:	98 2c       	mov	r9, r8
    74c0:	54 01       	movw	r10, r8
    74c2:	49 85       	ldd	r20, Y+9	; 0x09
    74c4:	5a 85       	ldd	r21, Y+10	; 0x0a
    74c6:	45 2b       	or	r20, r21
    74c8:	e9 f0       	breq	.+58     	; 0x7504 <normalize+0x362>
    74ca:	ce 01       	movw	r24, r28
    74cc:	01 96       	adiw	r24, 0x01	; 1
    74ce:	7d dd       	rcall	.-1286   	; 0x6fca <gettimezone>
    74d0:	a9 81       	ldd	r26, Y+1	; 0x01
    74d2:	ba 81       	ldd	r27, Y+2	; 0x02
    74d4:	2c e3       	ldi	r18, 0x3C	; 60
    74d6:	30 e0       	ldi	r19, 0x00	; 0
    74d8:	0e 94 f0 e6 	call	0x1cde0	; 0x1cde0 <__usmulhisi3>
    74dc:	2b 01       	movw	r4, r22
    74de:	3c 01       	movw	r6, r24
    74e0:	c5 01       	movw	r24, r10
    74e2:	b4 01       	movw	r22, r8
    74e4:	e2 dd       	rcall	.-1084   	; 0x70aa <is_dst>
    74e6:	89 2b       	or	r24, r25
    74e8:	51 f0       	breq	.+20     	; 0x74fe <normalize+0x35c>
    74ea:	50 e1       	ldi	r21, 0x10	; 16
    74ec:	45 1a       	sub	r4, r21
    74ee:	5e e0       	ldi	r21, 0x0E	; 14
    74f0:	55 0a       	sbc	r5, r21
    74f2:	61 08       	sbc	r6, r1
    74f4:	71 08       	sbc	r7, r1
    74f6:	cc 24       	eor	r12, r12
    74f8:	c3 94       	inc	r12
    74fa:	d1 2c       	mov	r13, r1
    74fc:	08 c0       	rjmp	.+16     	; 0x750e <normalize+0x36c>
    74fe:	c1 2c       	mov	r12, r1
    7500:	d1 2c       	mov	r13, r1
    7502:	05 c0       	rjmp	.+10     	; 0x750e <normalize+0x36c>
    7504:	c1 2c       	mov	r12, r1
    7506:	d1 2c       	mov	r13, r1
    7508:	41 2c       	mov	r4, r1
    750a:	51 2c       	mov	r5, r1
    750c:	32 01       	movw	r6, r4
    750e:	87 01       	movw	r16, r14
    7510:	a3 01       	movw	r20, r6
    7512:	92 01       	movw	r18, r4
    7514:	c5 01       	movw	r24, r10
    7516:	b4 01       	movw	r22, r8
    7518:	5a dc       	rcall	.-1868   	; 0x6dce <time_to_tm>
    751a:	c1 14       	cp	r12, r1
    751c:	d1 04       	cpc	r13, r1
    751e:	29 f0       	breq	.+10     	; 0x752a <normalize+0x388>
    7520:	21 e0       	ldi	r18, 0x01	; 1
    7522:	30 e0       	ldi	r19, 0x00	; 0
    7524:	f7 01       	movw	r30, r14
    7526:	31 8b       	std	Z+17, r19	; 0x11
    7528:	20 8b       	std	Z+16, r18	; 0x10
    752a:	2a 96       	adiw	r28, 0x0a	; 10
    752c:	e2 e1       	ldi	r30, 0x12	; 18
    752e:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

00007532 <timegm>:
    7532:	60 e0       	ldi	r22, 0x00	; 0
    7534:	70 e0       	ldi	r23, 0x00	; 0
    7536:	35 ce       	rjmp	.-918    	; 0x71a2 <normalize>
    7538:	08 95       	ret

0000753a <setdate_r>:
    753a:	cf 92       	push	r12
    753c:	df 92       	push	r13
    753e:	ef 92       	push	r14
    7540:	ff 92       	push	r15
    7542:	cf 93       	push	r28
    7544:	df 93       	push	r29
    7546:	cd b7       	in	r28, 0x3d	; 61
    7548:	de b7       	in	r29, 0x3e	; 62
    754a:	a5 97       	sbiw	r28, 0x25	; 37
    754c:	0f b6       	in	r0, 0x3f	; 63
    754e:	f8 94       	cli
    7550:	de bf       	out	0x3e, r29	; 62
    7552:	0f be       	out	0x3f, r0	; 63
    7554:	cd bf       	out	0x3d, r28	; 61
    7556:	9d a3       	std	Y+37, r25	; 0x25
    7558:	8c a3       	std	Y+36, r24	; 0x24
    755a:	1f 82       	std	Y+7, r1	; 0x07
    755c:	1e 82       	std	Y+6, r1	; 0x06
    755e:	19 86       	std	Y+9, r1	; 0x09
    7560:	18 86       	std	Y+8, r1	; 0x08
    7562:	1b 86       	std	Y+11, r1	; 0x0b
    7564:	1a 86       	std	Y+10, r1	; 0x0a
    7566:	1d 86       	std	Y+13, r1	; 0x0d
    7568:	1c 86       	std	Y+12, r1	; 0x0c
    756a:	1f 86       	std	Y+15, r1	; 0x0f
    756c:	1e 86       	std	Y+14, r1	; 0x0e
    756e:	19 8a       	std	Y+17, r1	; 0x11
    7570:	18 8a       	std	Y+16, r1	; 0x10
    7572:	8c a1       	ldd	r24, Y+36	; 0x24
    7574:	9d a1       	ldd	r25, Y+37	; 0x25
    7576:	fc 01       	movw	r30, r24
    7578:	20 81       	ld	r18, Z
    757a:	20 32       	cpi	r18, 0x20	; 32
    757c:	21 f4       	brne	.+8      	; 0x7586 <setdate_r+0x4c>
    757e:	01 96       	adiw	r24, 0x01	; 1
    7580:	9d a3       	std	Y+37, r25	; 0x25
    7582:	8c a3       	std	Y+36, r24	; 0x24
    7584:	f6 cf       	rjmp	.-20     	; 0x7572 <setdate_r+0x38>
    7586:	4a e0       	ldi	r20, 0x0A	; 10
    7588:	50 e0       	ldi	r21, 0x00	; 0
    758a:	be 01       	movw	r22, r28
    758c:	6c 5d       	subi	r22, 0xDC	; 220
    758e:	7f 4f       	sbci	r23, 0xFF	; 255
    7590:	0e 94 6d 47 	call	0x8eda	; 0x8eda <strtol>
    7594:	79 8b       	std	Y+17, r23	; 0x11
    7596:	68 8b       	std	Y+16, r22	; 0x10
    7598:	8c a1       	ldd	r24, Y+36	; 0x24
    759a:	9d a1       	ldd	r25, Y+37	; 0x25
    759c:	fc 01       	movw	r30, r24
    759e:	20 81       	ld	r18, Z
    75a0:	20 32       	cpi	r18, 0x20	; 32
    75a2:	21 f4       	brne	.+8      	; 0x75ac <setdate_r+0x72>
    75a4:	01 96       	adiw	r24, 0x01	; 1
    75a6:	9d a3       	std	Y+37, r25	; 0x25
    75a8:	8c a3       	std	Y+36, r24	; 0x24
    75aa:	f6 cf       	rjmp	.-20     	; 0x7598 <setdate_r+0x5e>
    75ac:	4a e0       	ldi	r20, 0x0A	; 10
    75ae:	50 e0       	ldi	r21, 0x00	; 0
    75b0:	be 01       	movw	r22, r28
    75b2:	6c 5d       	subi	r22, 0xDC	; 220
    75b4:	7f 4f       	sbci	r23, 0xFF	; 255
    75b6:	0e 94 6d 47 	call	0x8eda	; 0x8eda <strtol>
    75ba:	7f 87       	std	Y+15, r23	; 0x0f
    75bc:	6e 87       	std	Y+14, r22	; 0x0e
    75be:	8c a1       	ldd	r24, Y+36	; 0x24
    75c0:	9d a1       	ldd	r25, Y+37	; 0x25
    75c2:	fc 01       	movw	r30, r24
    75c4:	20 81       	ld	r18, Z
    75c6:	20 32       	cpi	r18, 0x20	; 32
    75c8:	21 f4       	brne	.+8      	; 0x75d2 <setdate_r+0x98>
    75ca:	01 96       	adiw	r24, 0x01	; 1
    75cc:	9d a3       	std	Y+37, r25	; 0x25
    75ce:	8c a3       	std	Y+36, r24	; 0x24
    75d0:	f6 cf       	rjmp	.-20     	; 0x75be <setdate_r+0x84>
    75d2:	4a e0       	ldi	r20, 0x0A	; 10
    75d4:	50 e0       	ldi	r21, 0x00	; 0
    75d6:	be 01       	movw	r22, r28
    75d8:	6c 5d       	subi	r22, 0xDC	; 220
    75da:	7f 4f       	sbci	r23, 0xFF	; 255
    75dc:	0e 94 6d 47 	call	0x8eda	; 0x8eda <strtol>
    75e0:	7d 87       	std	Y+13, r23	; 0x0d
    75e2:	6c 87       	std	Y+12, r22	; 0x0c
    75e4:	8c a1       	ldd	r24, Y+36	; 0x24
    75e6:	9d a1       	ldd	r25, Y+37	; 0x25
    75e8:	fc 01       	movw	r30, r24
    75ea:	20 81       	ld	r18, Z
    75ec:	20 32       	cpi	r18, 0x20	; 32
    75ee:	21 f4       	brne	.+8      	; 0x75f8 <setdate_r+0xbe>
    75f0:	01 96       	adiw	r24, 0x01	; 1
    75f2:	9d a3       	std	Y+37, r25	; 0x25
    75f4:	8c a3       	std	Y+36, r24	; 0x24
    75f6:	f6 cf       	rjmp	.-20     	; 0x75e4 <setdate_r+0xaa>
    75f8:	4a e0       	ldi	r20, 0x0A	; 10
    75fa:	50 e0       	ldi	r21, 0x00	; 0
    75fc:	be 01       	movw	r22, r28
    75fe:	6c 5d       	subi	r22, 0xDC	; 220
    7600:	7f 4f       	sbci	r23, 0xFF	; 255
    7602:	0e 94 6d 47 	call	0x8eda	; 0x8eda <strtol>
    7606:	7b 87       	std	Y+11, r23	; 0x0b
    7608:	6a 87       	std	Y+10, r22	; 0x0a
    760a:	ec a1       	ldd	r30, Y+36	; 0x24
    760c:	fd a1       	ldd	r31, Y+37	; 0x25
    760e:	80 81       	ld	r24, Z
    7610:	88 23       	and	r24, r24
    7612:	39 f0       	breq	.+14     	; 0x7622 <setdate_r+0xe8>
    7614:	80 32       	cpi	r24, 0x20	; 32
    7616:	11 f0       	breq	.+4      	; 0x761c <setdate_r+0xe2>
    7618:	8a 33       	cpi	r24, 0x3A	; 58
    761a:	19 f4       	brne	.+6      	; 0x7622 <setdate_r+0xe8>
    761c:	31 96       	adiw	r30, 0x01	; 1
    761e:	fd a3       	std	Y+37, r31	; 0x25
    7620:	ec a3       	std	Y+36, r30	; 0x24
    7622:	4a e0       	ldi	r20, 0x0A	; 10
    7624:	50 e0       	ldi	r21, 0x00	; 0
    7626:	be 01       	movw	r22, r28
    7628:	6c 5d       	subi	r22, 0xDC	; 220
    762a:	7f 4f       	sbci	r23, 0xFF	; 255
    762c:	8c a1       	ldd	r24, Y+36	; 0x24
    762e:	9d a1       	ldd	r25, Y+37	; 0x25
    7630:	0e 94 6d 47 	call	0x8eda	; 0x8eda <strtol>
    7634:	79 87       	std	Y+9, r23	; 0x09
    7636:	68 87       	std	Y+8, r22	; 0x08
    7638:	ec a1       	ldd	r30, Y+36	; 0x24
    763a:	fd a1       	ldd	r31, Y+37	; 0x25
    763c:	80 81       	ld	r24, Z
    763e:	88 23       	and	r24, r24
    7640:	39 f0       	breq	.+14     	; 0x7650 <setdate_r+0x116>
    7642:	80 32       	cpi	r24, 0x20	; 32
    7644:	11 f0       	breq	.+4      	; 0x764a <setdate_r+0x110>
    7646:	8a 33       	cpi	r24, 0x3A	; 58
    7648:	19 f4       	brne	.+6      	; 0x7650 <setdate_r+0x116>
    764a:	31 96       	adiw	r30, 0x01	; 1
    764c:	fd a3       	std	Y+37, r31	; 0x25
    764e:	ec a3       	std	Y+36, r30	; 0x24
    7650:	4a e0       	ldi	r20, 0x0A	; 10
    7652:	50 e0       	ldi	r21, 0x00	; 0
    7654:	be 01       	movw	r22, r28
    7656:	6c 5d       	subi	r22, 0xDC	; 220
    7658:	7f 4f       	sbci	r23, 0xFF	; 255
    765a:	8c a1       	ldd	r24, Y+36	; 0x24
    765c:	9d a1       	ldd	r25, Y+37	; 0x25
    765e:	0e 94 6d 47 	call	0x8eda	; 0x8eda <strtol>
    7662:	7f 83       	std	Y+7, r23	; 0x07
    7664:	6e 83       	std	Y+6, r22	; 0x06
    7666:	2e 85       	ldd	r18, Y+14	; 0x0e
    7668:	3f 85       	ldd	r19, Y+15	; 0x0f
    766a:	21 50       	subi	r18, 0x01	; 1
    766c:	31 09       	sbc	r19, r1
    766e:	3f 87       	std	Y+15, r19	; 0x0f
    7670:	2e 87       	std	Y+14, r18	; 0x0e
    7672:	88 89       	ldd	r24, Y+16	; 0x10
    7674:	99 89       	ldd	r25, Y+17	; 0x11
    7676:	ac 01       	movw	r20, r24
    7678:	42 5b       	subi	r20, 0xB2	; 178
    767a:	57 40       	sbci	r21, 0x07	; 7
    767c:	45 34       	cpi	r20, 0x45	; 69
    767e:	51 05       	cpc	r21, r1
    7680:	38 f0       	brcs	.+14     	; 0x7690 <setdate_r+0x156>
    7682:	ed b7       	in	r30, 0x3d	; 61
    7684:	fe b7       	in	r31, 0x3e	; 62
    7686:	95 83       	std	Z+5, r25	; 0x05
    7688:	84 83       	std	Z+4, r24	; 0x04
    768a:	89 e1       	ldi	r24, 0x19	; 25
    768c:	97 e0       	ldi	r25, 0x07	; 7
    768e:	34 c0       	rjmp	.+104    	; 0x76f8 <setdate_r+0x1be>
    7690:	8c 56       	subi	r24, 0x6C	; 108
    7692:	97 40       	sbci	r25, 0x07	; 7
    7694:	99 8b       	std	Y+17, r25	; 0x11
    7696:	88 8b       	std	Y+16, r24	; 0x10
    7698:	2c 30       	cpi	r18, 0x0C	; 12
    769a:	31 05       	cpc	r19, r1
    769c:	38 f0       	brcs	.+14     	; 0x76ac <setdate_r+0x172>
    769e:	ed b7       	in	r30, 0x3d	; 61
    76a0:	fe b7       	in	r31, 0x3e	; 62
    76a2:	95 83       	std	Z+5, r25	; 0x05
    76a4:	84 83       	std	Z+4, r24	; 0x04
    76a6:	88 e0       	ldi	r24, 0x08	; 8
    76a8:	97 e0       	ldi	r25, 0x07	; 7
    76aa:	26 c0       	rjmp	.+76     	; 0x76f8 <setdate_r+0x1be>
    76ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    76ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    76b0:	9c 01       	movw	r18, r24
    76b2:	21 50       	subi	r18, 0x01	; 1
    76b4:	31 09       	sbc	r19, r1
    76b6:	2f 31       	cpi	r18, 0x1F	; 31
    76b8:	31 05       	cpc	r19, r1
    76ba:	38 f0       	brcs	.+14     	; 0x76ca <setdate_r+0x190>
    76bc:	ed b7       	in	r30, 0x3d	; 61
    76be:	fe b7       	in	r31, 0x3e	; 62
    76c0:	95 83       	std	Z+5, r25	; 0x05
    76c2:	84 83       	std	Z+4, r24	; 0x04
    76c4:	87 ef       	ldi	r24, 0xF7	; 247
    76c6:	96 e0       	ldi	r25, 0x06	; 6
    76c8:	17 c0       	rjmp	.+46     	; 0x76f8 <setdate_r+0x1be>
    76ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    76cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    76ce:	88 31       	cpi	r24, 0x18	; 24
    76d0:	91 05       	cpc	r25, r1
    76d2:	38 f0       	brcs	.+14     	; 0x76e2 <setdate_r+0x1a8>
    76d4:	ed b7       	in	r30, 0x3d	; 61
    76d6:	fe b7       	in	r31, 0x3e	; 62
    76d8:	95 83       	std	Z+5, r25	; 0x05
    76da:	84 83       	std	Z+4, r24	; 0x04
    76dc:	85 ee       	ldi	r24, 0xE5	; 229
    76de:	96 e0       	ldi	r25, 0x06	; 6
    76e0:	0b c0       	rjmp	.+22     	; 0x76f8 <setdate_r+0x1be>
    76e2:	88 85       	ldd	r24, Y+8	; 0x08
    76e4:	99 85       	ldd	r25, Y+9	; 0x09
    76e6:	8c 33       	cpi	r24, 0x3C	; 60
    76e8:	91 05       	cpc	r25, r1
    76ea:	68 f0       	brcs	.+26     	; 0x7706 <setdate_r+0x1cc>
    76ec:	ed b7       	in	r30, 0x3d	; 61
    76ee:	fe b7       	in	r31, 0x3e	; 62
    76f0:	95 83       	std	Z+5, r25	; 0x05
    76f2:	84 83       	std	Z+4, r24	; 0x04
    76f4:	84 ed       	ldi	r24, 0xD4	; 212
    76f6:	96 e0       	ldi	r25, 0x06	; 6
    76f8:	a0 e0       	ldi	r26, 0x00	; 0
    76fa:	81 83       	std	Z+1, r24	; 0x01
    76fc:	92 83       	std	Z+2, r25	; 0x02
    76fe:	a3 83       	std	Z+3, r26	; 0x03
    7700:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    7704:	25 c0       	rjmp	.+74     	; 0x7750 <setdate_r+0x216>
    7706:	ce 01       	movw	r24, r28
    7708:	06 96       	adiw	r24, 0x06	; 6
    770a:	13 df       	rcall	.-474    	; 0x7532 <timegm>
    770c:	6b 01       	movw	r12, r22
    770e:	7c 01       	movw	r14, r24
    7710:	6c 8f       	std	Y+28, r22	; 0x1c
    7712:	7d 8f       	std	Y+29, r23	; 0x1d
    7714:	8e 8f       	std	Y+30, r24	; 0x1e
    7716:	9f 8f       	std	Y+31, r25	; 0x1f
    7718:	18 a2       	std	Y+32, r1	; 0x20
    771a:	19 a2       	std	Y+33, r1	; 0x21
    771c:	1a a2       	std	Y+34, r1	; 0x22
    771e:	1b a2       	std	Y+35, r1	; 0x23
    7720:	be 01       	movw	r22, r28
    7722:	64 5e       	subi	r22, 0xE4	; 228
    7724:	7f 4f       	sbci	r23, 0xFF	; 255
    7726:	80 e0       	ldi	r24, 0x00	; 0
    7728:	90 e0       	ldi	r25, 0x00	; 0
    772a:	03 db       	rcall	.-2554   	; 0x6d32 <clock_settime>
    772c:	b7 01       	movw	r22, r14
    772e:	a6 01       	movw	r20, r12
    7730:	81 e0       	ldi	r24, 0x01	; 1
    7732:	90 e0       	ldi	r25, 0x00	; 0
    7734:	0e 94 19 31 	call	0x6232	; 0x6232 <rtc_init>
    7738:	81 11       	cpse	r24, r1
    773a:	0d c0       	rjmp	.+26     	; 0x7756 <setdate_r+0x21c>
    773c:	8d eb       	ldi	r24, 0xBD	; 189
    773e:	96 e0       	ldi	r25, 0x06	; 6
    7740:	a0 e0       	ldi	r26, 0x00	; 0
    7742:	ed b7       	in	r30, 0x3d	; 61
    7744:	fe b7       	in	r31, 0x3e	; 62
    7746:	81 83       	std	Z+1, r24	; 0x01
    7748:	92 83       	std	Z+2, r25	; 0x02
    774a:	a3 83       	std	Z+3, r26	; 0x03
    774c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    7750:	8f ef       	ldi	r24, 0xFF	; 255
    7752:	9f ef       	ldi	r25, 0xFF	; 255
    7754:	02 c0       	rjmp	.+4      	; 0x775a <setdate_r+0x220>
    7756:	80 e0       	ldi	r24, 0x00	; 0
    7758:	90 e0       	ldi	r25, 0x00	; 0
    775a:	a5 96       	adiw	r28, 0x25	; 37
    775c:	0f b6       	in	r0, 0x3f	; 63
    775e:	f8 94       	cli
    7760:	de bf       	out	0x3e, r29	; 62
    7762:	0f be       	out	0x3f, r0	; 63
    7764:	cd bf       	out	0x3d, r28	; 61
    7766:	df 91       	pop	r29
    7768:	cf 91       	pop	r28
    776a:	ff 90       	pop	r15
    776c:	ef 90       	pop	r14
    776e:	df 90       	pop	r13
    7770:	cf 90       	pop	r12
    7772:	08 95       	ret

00007774 <setdate>:
    7774:	ab e2       	ldi	r26, 0x2B	; 43
    7776:	b0 e0       	ldi	r27, 0x00	; 0
    7778:	e0 ec       	ldi	r30, 0xC0	; 192
    777a:	fb e3       	ldi	r31, 0x3B	; 59
    777c:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    7780:	8b e2       	ldi	r24, 0x2B	; 43
    7782:	97 e0       	ldi	r25, 0x07	; 7
    7784:	a0 e0       	ldi	r26, 0x00	; 0
    7786:	ed b7       	in	r30, 0x3d	; 61
    7788:	fe b7       	in	r31, 0x3e	; 62
    778a:	81 83       	std	Z+1, r24	; 0x01
    778c:	92 83       	std	Z+2, r25	; 0x02
    778e:	a3 83       	std	Z+3, r26	; 0x03
    7790:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    7794:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
    7798:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
    779c:	66 e2       	ldi	r22, 0x26	; 38
    779e:	70 e0       	ldi	r23, 0x00	; 0
    77a0:	ce 01       	movw	r24, r28
    77a2:	04 96       	adiw	r24, 0x04	; 4
    77a4:	0e 94 8c 76 	call	0xed18	; 0xed18 <fgets>
    77a8:	ce 01       	movw	r24, r28
    77aa:	04 96       	adiw	r24, 0x04	; 4
    77ac:	c6 de       	rcall	.-628    	; 0x753a <setdate_r>
    77ae:	ab 96       	adiw	r28, 0x2b	; 43
    77b0:	e2 e0       	ldi	r30, 0x02	; 2
    77b2:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

000077b6 <find_dst>:
    77b6:	a8 e2       	ldi	r26, 0x28	; 40
    77b8:	b0 e0       	ldi	r27, 0x00	; 0
    77ba:	e1 ee       	ldi	r30, 0xE1	; 225
    77bc:	fb e3       	ldi	r31, 0x3B	; 59
    77be:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    77c2:	3c 01       	movw	r6, r24
    77c4:	1a 01       	movw	r2, r20
    77c6:	2b 01       	movw	r4, r22
    77c8:	49 01       	movw	r8, r18
    77ca:	1c a3       	std	Y+36, r17	; 0x24
    77cc:	0b a3       	std	Y+35, r16	; 0x23
    77ce:	de a2       	std	Y+38, r13	; 0x26
    77d0:	cd a2       	std	Y+37, r12	; 0x25
    77d2:	b8 a6       	std	Y+40, r11	; 0x28
    77d4:	af a2       	std	Y+39, r10	; 0x27
    77d6:	be 01       	movw	r22, r28
    77d8:	61 5e       	subi	r22, 0xE1	; 225
    77da:	7f 4f       	sbci	r23, 0xFF	; 255
    77dc:	ce 01       	movw	r24, r28
    77de:	47 96       	adiw	r24, 0x17	; 23
    77e0:	15 dc       	rcall	.-2006   	; 0x700c <gettimeofday>
    77e2:	af 8d       	ldd	r26, Y+31	; 0x1f
    77e4:	b8 a1       	ldd	r27, Y+32	; 0x20
    77e6:	2c e3       	ldi	r18, 0x3C	; 60
    77e8:	30 e0       	ldi	r19, 0x00	; 0
    77ea:	0e 94 f0 e6 	call	0x1cde0	; 0x1cde0 <__usmulhisi3>
    77ee:	5b 01       	movw	r10, r22
    77f0:	6c 01       	movw	r12, r24
    77f2:	61 14       	cp	r6, r1
    77f4:	71 04       	cpc	r7, r1
    77f6:	31 f0       	breq	.+12     	; 0x7804 <find_dst+0x4e>
    77f8:	20 e1       	ldi	r18, 0x10	; 16
    77fa:	a2 1a       	sub	r10, r18
    77fc:	2e e0       	ldi	r18, 0x0E	; 14
    77fe:	b2 0a       	sbc	r11, r18
    7800:	c1 08       	sbc	r12, r1
    7802:	d1 08       	sbc	r13, r1
    7804:	81 14       	cp	r8, r1
    7806:	91 04       	cpc	r9, r1
    7808:	39 f0       	breq	.+14     	; 0x7818 <find_dst+0x62>
    780a:	4c e6       	ldi	r20, 0x6C	; 108
    780c:	84 1a       	sub	r8, r20
    780e:	47 e0       	ldi	r20, 0x07	; 7
    7810:	94 0a       	sbc	r9, r20
    7812:	9c 86       	std	Y+12, r9	; 0x0c
    7814:	8b 86       	std	Y+11, r8	; 0x0b
    7816:	11 c0       	rjmp	.+34     	; 0x783a <find_dst+0x84>
    7818:	21 14       	cp	r2, r1
    781a:	31 04       	cpc	r3, r1
    781c:	41 04       	cpc	r4, r1
    781e:	51 04       	cpc	r5, r1
    7820:	21 f4       	brne	.+8      	; 0x782a <find_dst+0x74>
    7822:	2f 88       	ldd	r2, Y+23	; 0x17
    7824:	38 8c       	ldd	r3, Y+24	; 0x18
    7826:	49 8c       	ldd	r4, Y+25	; 0x19
    7828:	5a 8c       	ldd	r5, Y+26	; 0x1a
    782a:	8e 01       	movw	r16, r28
    782c:	0f 5f       	subi	r16, 0xFF	; 255
    782e:	1f 4f       	sbci	r17, 0xFF	; 255
    7830:	a6 01       	movw	r20, r12
    7832:	95 01       	movw	r18, r10
    7834:	c2 01       	movw	r24, r4
    7836:	b1 01       	movw	r22, r2
    7838:	ca da       	rcall	.-2668   	; 0x6dce <time_to_tm>
    783a:	8b a1       	ldd	r24, Y+35	; 0x23
    783c:	9c a1       	ldd	r25, Y+36	; 0x24
    783e:	01 97       	sbiw	r24, 0x01	; 1
    7840:	9a 87       	std	Y+10, r25	; 0x0a
    7842:	89 87       	std	Y+9, r24	; 0x09
    7844:	81 e0       	ldi	r24, 0x01	; 1
    7846:	90 e0       	ldi	r25, 0x00	; 0
    7848:	98 87       	std	Y+8, r25	; 0x08
    784a:	8f 83       	std	Y+7, r24	; 0x07
    784c:	8f a1       	ldd	r24, Y+39	; 0x27
    784e:	98 a5       	ldd	r25, Y+40	; 0x28
    7850:	9e 83       	std	Y+6, r25	; 0x06
    7852:	8d 83       	std	Y+5, r24	; 0x05
    7854:	1c 82       	std	Y+4, r1	; 0x04
    7856:	1b 82       	std	Y+3, r1	; 0x03
    7858:	1a 82       	std	Y+2, r1	; 0x02
    785a:	19 82       	std	Y+1, r1	; 0x01
    785c:	ce 01       	movw	r24, r28
    785e:	01 96       	adiw	r24, 0x01	; 1
    7860:	68 de       	rcall	.-816    	; 0x7532 <timegm>
    7862:	45 01       	movw	r8, r10
    7864:	56 01       	movw	r10, r12
    7866:	86 0e       	add	r8, r22
    7868:	97 1e       	adc	r9, r23
    786a:	a8 1e       	adc	r10, r24
    786c:	b9 1e       	adc	r11, r25
    786e:	8e 01       	movw	r16, r28
    7870:	0f 5f       	subi	r16, 0xFF	; 255
    7872:	1f 4f       	sbci	r17, 0xFF	; 255
    7874:	20 e0       	ldi	r18, 0x00	; 0
    7876:	30 e0       	ldi	r19, 0x00	; 0
    7878:	a9 01       	movw	r20, r18
    787a:	c5 01       	movw	r24, r10
    787c:	b4 01       	movw	r22, r8
    787e:	a7 da       	rcall	.-2738   	; 0x6dce <time_to_tm>
    7880:	2d 85       	ldd	r18, Y+13	; 0x0d
    7882:	3e 85       	ldd	r19, Y+14	; 0x0e
    7884:	e7 e0       	ldi	r30, 0x07	; 7
    7886:	f0 e0       	ldi	r31, 0x00	; 0
    7888:	c9 01       	movw	r24, r18
    788a:	bf 01       	movw	r22, r30
    788c:	0e 94 96 e6 	call	0x1cd2c	; 0x1cd2c <__divmodhi4>
    7890:	4d a1       	ldd	r20, Y+37	; 0x25
    7892:	5e a1       	ldd	r21, Y+38	; 0x26
    7894:	48 17       	cp	r20, r24
    7896:	59 07       	cpc	r21, r25
    7898:	21 f4       	brne	.+8      	; 0x78a2 <find_dst+0xec>
    789a:	51 e0       	ldi	r21, 0x01	; 1
    789c:	e5 1a       	sub	r14, r21
    789e:	f1 08       	sbc	r15, r1
    78a0:	51 f0       	breq	.+20     	; 0x78b6 <find_dst+0x100>
    78a2:	80 e8       	ldi	r24, 0x80	; 128
    78a4:	88 0e       	add	r8, r24
    78a6:	81 e5       	ldi	r24, 0x51	; 81
    78a8:	98 1e       	adc	r9, r24
    78aa:	81 e0       	ldi	r24, 0x01	; 1
    78ac:	a8 1e       	adc	r10, r24
    78ae:	b1 1c       	adc	r11, r1
    78b0:	2f 5f       	subi	r18, 0xFF	; 255
    78b2:	3f 4f       	sbci	r19, 0xFF	; 255
    78b4:	e9 cf       	rjmp	.-46     	; 0x7888 <find_dst+0xd2>
    78b6:	c5 01       	movw	r24, r10
    78b8:	b4 01       	movw	r22, r8
    78ba:	a8 96       	adiw	r28, 0x28	; 40
    78bc:	e2 e1       	ldi	r30, 0x12	; 18
    78be:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

000078c2 <set_dst>:
    78c2:	4f 92       	push	r4
    78c4:	5f 92       	push	r5
    78c6:	6f 92       	push	r6
    78c8:	7f 92       	push	r7
    78ca:	af 92       	push	r10
    78cc:	bf 92       	push	r11
    78ce:	cf 92       	push	r12
    78d0:	df 92       	push	r13
    78d2:	ef 92       	push	r14
    78d4:	ff 92       	push	r15
    78d6:	0f 93       	push	r16
    78d8:	1f 93       	push	r17
    78da:	cf 93       	push	r28
    78dc:	df 93       	push	r29
    78de:	cd b7       	in	r28, 0x3d	; 61
    78e0:	de b7       	in	r29, 0x3e	; 62
    78e2:	2c 97       	sbiw	r28, 0x0c	; 12
    78e4:	0f b6       	in	r0, 0x3f	; 63
    78e6:	f8 94       	cli
    78e8:	de bf       	out	0x3e, r29	; 62
    78ea:	0f be       	out	0x3f, r0	; 63
    78ec:	cd bf       	out	0x3d, r28	; 61
    78ee:	2b 01       	movw	r4, r22
    78f0:	3c 01       	movw	r6, r24
    78f2:	67 2b       	or	r22, r23
    78f4:	68 2b       	or	r22, r24
    78f6:	69 2b       	or	r22, r25
    78f8:	51 f4       	brne	.+20     	; 0x790e <set_dst+0x4c>
    78fa:	be 01       	movw	r22, r28
    78fc:	67 5f       	subi	r22, 0xF7	; 247
    78fe:	7f 4f       	sbci	r23, 0xFF	; 255
    7900:	ce 01       	movw	r24, r28
    7902:	01 96       	adiw	r24, 0x01	; 1
    7904:	83 db       	rcall	.-2298   	; 0x700c <gettimeofday>
    7906:	49 80       	ldd	r4, Y+1	; 0x01
    7908:	5a 80       	ldd	r5, Y+2	; 0x02
    790a:	6b 80       	ldd	r6, Y+3	; 0x03
    790c:	7c 80       	ldd	r7, Y+4	; 0x04
    790e:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst+0x8>
    7912:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x9>
    7916:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0xa>
    791a:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0xb>
    791e:	84 15       	cp	r24, r4
    7920:	95 05       	cpc	r25, r5
    7922:	a6 05       	cpc	r26, r6
    7924:	b7 05       	cpc	r27, r7
    7926:	50 f0       	brcs	.+20     	; 0x793c <set_dst+0x7a>
    7928:	84 19       	sub	r24, r4
    792a:	95 09       	sbc	r25, r5
    792c:	a6 09       	sbc	r26, r6
    792e:	b7 09       	sbc	r27, r7
    7930:	80 38       	cpi	r24, 0x80	; 128
    7932:	91 45       	sbci	r25, 0x51	; 81
    7934:	a1 40       	sbci	r26, 0x01	; 1
    7936:	b1 05       	cpc	r27, r1
    7938:	70 f4       	brcc	.+28     	; 0x7956 <set_dst+0x94>
    793a:	42 c0       	rjmp	.+132    	; 0x79c0 <set_dst+0xfe>
    793c:	a3 01       	movw	r20, r6
    793e:	92 01       	movw	r18, r4
    7940:	28 1b       	sub	r18, r24
    7942:	39 0b       	sbc	r19, r25
    7944:	4a 0b       	sbc	r20, r26
    7946:	5b 0b       	sbc	r21, r27
    7948:	da 01       	movw	r26, r20
    794a:	c9 01       	movw	r24, r18
    794c:	80 38       	cpi	r24, 0x80	; 128
    794e:	91 45       	sbci	r25, 0x51	; 81
    7950:	a1 40       	sbci	r26, 0x01	; 1
    7952:	b1 05       	cpc	r27, r1
    7954:	a8 f1       	brcs	.+106    	; 0x79c0 <set_dst+0xfe>
    7956:	40 92 7c 1a 	sts	0x1A7C, r4	; 0x801a7c <dst+0x8>
    795a:	50 92 7d 1a 	sts	0x1A7D, r5	; 0x801a7d <dst+0x9>
    795e:	60 92 7e 1a 	sts	0x1A7E, r6	; 0x801a7e <dst+0xa>
    7962:	70 92 7f 1a 	sts	0x1A7F, r7	; 0x801a7f <dst+0xb>
    7966:	82 e0       	ldi	r24, 0x02	; 2
    7968:	a8 2e       	mov	r10, r24
    796a:	b1 2c       	mov	r11, r1
    796c:	c1 2c       	mov	r12, r1
    796e:	d1 2c       	mov	r13, r1
    7970:	92 e0       	ldi	r25, 0x02	; 2
    7972:	e9 2e       	mov	r14, r25
    7974:	f1 2c       	mov	r15, r1
    7976:	03 e0       	ldi	r16, 0x03	; 3
    7978:	10 e0       	ldi	r17, 0x00	; 0
    797a:	20 e0       	ldi	r18, 0x00	; 0
    797c:	30 e0       	ldi	r19, 0x00	; 0
    797e:	b3 01       	movw	r22, r6
    7980:	a2 01       	movw	r20, r4
    7982:	80 e0       	ldi	r24, 0x00	; 0
    7984:	90 e0       	ldi	r25, 0x00	; 0
    7986:	17 df       	rcall	.-466    	; 0x77b6 <find_dst>
    7988:	60 93 74 1a 	sts	0x1A74, r22	; 0x801a74 <dst>
    798c:	70 93 75 1a 	sts	0x1A75, r23	; 0x801a75 <dst+0x1>
    7990:	80 93 76 1a 	sts	0x1A76, r24	; 0x801a76 <dst+0x2>
    7994:	90 93 77 1a 	sts	0x1A77, r25	; 0x801a77 <dst+0x3>
    7998:	ee 24       	eor	r14, r14
    799a:	e3 94       	inc	r14
    799c:	f1 2c       	mov	r15, r1
    799e:	0b e0       	ldi	r16, 0x0B	; 11
    79a0:	10 e0       	ldi	r17, 0x00	; 0
    79a2:	20 e0       	ldi	r18, 0x00	; 0
    79a4:	30 e0       	ldi	r19, 0x00	; 0
    79a6:	b3 01       	movw	r22, r6
    79a8:	a2 01       	movw	r20, r4
    79aa:	81 e0       	ldi	r24, 0x01	; 1
    79ac:	90 e0       	ldi	r25, 0x00	; 0
    79ae:	03 df       	rcall	.-506    	; 0x77b6 <find_dst>
    79b0:	60 93 78 1a 	sts	0x1A78, r22	; 0x801a78 <dst+0x4>
    79b4:	70 93 79 1a 	sts	0x1A79, r23	; 0x801a79 <dst+0x5>
    79b8:	80 93 7a 1a 	sts	0x1A7A, r24	; 0x801a7a <dst+0x6>
    79bc:	90 93 7b 1a 	sts	0x1A7B, r25	; 0x801a7b <dst+0x7>
    79c0:	2c 96       	adiw	r28, 0x0c	; 12
    79c2:	0f b6       	in	r0, 0x3f	; 63
    79c4:	f8 94       	cli
    79c6:	de bf       	out	0x3e, r29	; 62
    79c8:	0f be       	out	0x3f, r0	; 63
    79ca:	cd bf       	out	0x3d, r28	; 61
    79cc:	df 91       	pop	r29
    79ce:	cf 91       	pop	r28
    79d0:	1f 91       	pop	r17
    79d2:	0f 91       	pop	r16
    79d4:	ff 90       	pop	r15
    79d6:	ef 90       	pop	r14
    79d8:	df 90       	pop	r13
    79da:	cf 90       	pop	r12
    79dc:	bf 90       	pop	r11
    79de:	af 90       	pop	r10
    79e0:	7f 90       	pop	r7
    79e2:	6f 90       	pop	r6
    79e4:	5f 90       	pop	r5
    79e6:	4f 90       	pop	r4
    79e8:	08 95       	ret

000079ea <asctime_r>:
    79ea:	a5 e1       	ldi	r26, 0x15	; 21
    79ec:	b0 e0       	ldi	r27, 0x00	; 0
    79ee:	eb ef       	ldi	r30, 0xFB	; 251
    79f0:	fc e3       	ldi	r31, 0x3C	; 60
    79f2:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    79f6:	ec 01       	movw	r28, r24
    79f8:	8b 01       	movw	r16, r22
    79fa:	60 e0       	ldi	r22, 0x00	; 0
    79fc:	70 e0       	ldi	r23, 0x00	; 0
    79fe:	d1 db       	rcall	.-2142   	; 0x71a2 <normalize>
    7a00:	80 e2       	ldi	r24, 0x20	; 32
    7a02:	f8 01       	movw	r30, r16
    7a04:	11 92       	st	Z+, r1
    7a06:	8a 95       	dec	r24
    7a08:	e9 f7       	brne	.-6      	; 0x7a04 <asctime_r+0x1a>
    7a0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a0e:	84 59       	subi	r24, 0x94	; 148
    7a10:	98 4f       	sbci	r25, 0xF8	; 248
    7a12:	ed b7       	in	r30, 0x3d	; 61
    7a14:	fe b7       	in	r31, 0x3e	; 62
    7a16:	95 8b       	std	Z+21, r25	; 0x15
    7a18:	84 8b       	std	Z+20, r24	; 0x14
    7a1a:	88 81       	ld	r24, Y
    7a1c:	99 81       	ldd	r25, Y+1	; 0x01
    7a1e:	93 8b       	std	Z+19, r25	; 0x13
    7a20:	82 8b       	std	Z+18, r24	; 0x12
    7a22:	8a 81       	ldd	r24, Y+2	; 0x02
    7a24:	9b 81       	ldd	r25, Y+3	; 0x03
    7a26:	91 8b       	std	Z+17, r25	; 0x11
    7a28:	80 8b       	std	Z+16, r24	; 0x10
    7a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    7a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    7a2e:	97 87       	std	Z+15, r25	; 0x0f
    7a30:	86 87       	std	Z+14, r24	; 0x0e
    7a32:	8e 81       	ldd	r24, Y+6	; 0x06
    7a34:	9f 81       	ldd	r25, Y+7	; 0x07
    7a36:	95 87       	std	Z+13, r25	; 0x0d
    7a38:	84 87       	std	Z+12, r24	; 0x0c
    7a3a:	e8 85       	ldd	r30, Y+8	; 0x08
    7a3c:	f9 85       	ldd	r31, Y+9	; 0x09
    7a3e:	ee 0f       	add	r30, r30
    7a40:	ff 1f       	adc	r31, r31
    7a42:	e5 5f       	subi	r30, 0xF5	; 245
    7a44:	fe 4f       	sbci	r31, 0xFE	; 254
    7a46:	80 81       	ld	r24, Z
    7a48:	91 81       	ldd	r25, Z+1	; 0x01
    7a4a:	ed b7       	in	r30, 0x3d	; 61
    7a4c:	fe b7       	in	r31, 0x3e	; 62
    7a4e:	93 87       	std	Z+11, r25	; 0x0b
    7a50:	82 87       	std	Z+10, r24	; 0x0a
    7a52:	ec 85       	ldd	r30, Y+12	; 0x0c
    7a54:	fd 85       	ldd	r31, Y+13	; 0x0d
    7a56:	ee 0f       	add	r30, r30
    7a58:	ff 1f       	adc	r31, r31
    7a5a:	eb 5d       	subi	r30, 0xDB	; 219
    7a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    7a5e:	80 81       	ld	r24, Z
    7a60:	91 81       	ldd	r25, Z+1	; 0x01
    7a62:	ed b7       	in	r30, 0x3d	; 61
    7a64:	fe b7       	in	r31, 0x3e	; 62
    7a66:	91 87       	std	Z+9, r25	; 0x09
    7a68:	80 87       	std	Z+8, r24	; 0x08
    7a6a:	8c e4       	ldi	r24, 0x4C	; 76
    7a6c:	97 e0       	ldi	r25, 0x07	; 7
    7a6e:	a0 e0       	ldi	r26, 0x00	; 0
    7a70:	85 83       	std	Z+5, r24	; 0x05
    7a72:	96 83       	std	Z+6, r25	; 0x06
    7a74:	a7 83       	std	Z+7, r26	; 0x07
    7a76:	80 e2       	ldi	r24, 0x20	; 32
    7a78:	90 e0       	ldi	r25, 0x00	; 0
    7a7a:	94 83       	std	Z+4, r25	; 0x04
    7a7c:	83 83       	std	Z+3, r24	; 0x03
    7a7e:	12 83       	std	Z+2, r17	; 0x02
    7a80:	01 83       	std	Z+1, r16	; 0x01
    7a82:	0e 94 0a 47 	call	0x8e14	; 0x8e14 <snprintf_P>
    7a86:	c8 01       	movw	r24, r16
    7a88:	cd b7       	in	r28, 0x3d	; 61
    7a8a:	de b7       	in	r29, 0x3e	; 62
    7a8c:	65 96       	adiw	r28, 0x15	; 21
    7a8e:	e4 e0       	ldi	r30, 0x04	; 4
    7a90:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00007a94 <asctime>:
    7a94:	6e ef       	ldi	r22, 0xFE	; 254
    7a96:	77 e1       	ldi	r23, 0x17	; 23
    7a98:	a8 cf       	rjmp	.-176    	; 0x79ea <asctime_r>
    7a9a:	08 95       	ret

00007a9c <ctime_gm>:
    7a9c:	a6 e1       	ldi	r26, 0x16	; 22
    7a9e:	b0 e0       	ldi	r27, 0x00	; 0
    7aa0:	e4 e5       	ldi	r30, 0x54	; 84
    7aa2:	fd e3       	ldi	r31, 0x3D	; 61
    7aa4:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    7aa8:	be 01       	movw	r22, r28
    7aaa:	6f 5f       	subi	r22, 0xFF	; 255
    7aac:	7f 4f       	sbci	r23, 0xFF	; 255
    7aae:	6d da       	rcall	.-2854   	; 0x6f8a <gmtime_r>
    7ab0:	6e ed       	ldi	r22, 0xDE	; 222
    7ab2:	77 e1       	ldi	r23, 0x17	; 23
    7ab4:	9a df       	rcall	.-204    	; 0x79ea <asctime_r>
    7ab6:	66 96       	adiw	r28, 0x16	; 22
    7ab8:	e2 e0       	ldi	r30, 0x02	; 2
    7aba:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00007abe <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7abe:	a5 e2       	ldi	r26, 0x25	; 37
    7ac0:	b0 e0       	ldi	r27, 0x00	; 0
    7ac2:	e5 e6       	ldi	r30, 0x65	; 101
    7ac4:	fd e3       	ldi	r31, 0x3D	; 61
    7ac6:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    7aca:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7acc:	40 e0       	ldi	r20, 0x00	; 0
    7ace:	50 e0       	ldi	r21, 0x00	; 0
    7ad0:	ba 01       	movw	r22, r20
    7ad2:	80 e0       	ldi	r24, 0x00	; 0
    7ad4:	90 e0       	ldi	r25, 0x00	; 0
    7ad6:	0e 94 19 31 	call	0x6232	; 0x6232 <rtc_init>
    7ada:	81 11       	cpse	r24, r1
    7adc:	27 c0       	rjmp	.+78     	; 0x7b2c <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7ade:	8b ea       	ldi	r24, 0xAB	; 171
    7ae0:	96 e0       	ldi	r25, 0x06	; 6
    7ae2:	a0 e0       	ldi	r26, 0x00	; 0
    7ae4:	ed b7       	in	r30, 0x3d	; 61
    7ae6:	fe b7       	in	r31, 0x3e	; 62
    7ae8:	81 83       	std	Z+1, r24	; 0x01
    7aea:	92 83       	std	Z+2, r25	; 0x02
    7aec:	a3 83       	std	Z+3, r26	; 0x03
    7aee:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printf("attempting rtc init\n");
    7af2:	86 e9       	ldi	r24, 0x96	; 150
    7af4:	96 e0       	ldi	r25, 0x06	; 6
    7af6:	a0 e0       	ldi	r26, 0x00	; 0
    7af8:	ed b7       	in	r30, 0x3d	; 61
    7afa:	fe b7       	in	r31, 0x3e	; 62
    7afc:	81 83       	std	Z+1, r24	; 0x01
    7afe:	92 83       	std	Z+2, r25	; 0x02
    7b00:	a3 83       	std	Z+3, r26	; 0x03
    7b02:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7b06:	40 e0       	ldi	r20, 0x00	; 0
    7b08:	50 e0       	ldi	r21, 0x00	; 0
    7b0a:	ba 01       	movw	r22, r20
    7b0c:	81 e0       	ldi	r24, 0x01	; 1
    7b0e:	90 e0       	ldi	r25, 0x00	; 0
    7b10:	0e 94 19 31 	call	0x6232	; 0x6232 <rtc_init>
    7b14:	81 11       	cpse	r24, r1
    7b16:	0a c0       	rjmp	.+20     	; 0x7b2c <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7b18:	8f e7       	ldi	r24, 0x7F	; 127
    7b1a:	96 e0       	ldi	r25, 0x06	; 6
    7b1c:	a0 e0       	ldi	r26, 0x00	; 0
    7b1e:	ed b7       	in	r30, 0x3d	; 61
    7b20:	fe b7       	in	r31, 0x3e	; 62
    7b22:	81 83       	std	Z+1, r24	; 0x01
    7b24:	92 83       	std	Z+2, r25	; 0x02
    7b26:	a3 83       	std	Z+3, r26	; 0x03
    7b28:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7b2c:	ce 01       	movw	r24, r28
    7b2e:	04 96       	adiw	r24, 0x04	; 4
    7b30:	0e 94 7f 30 	call	0x60fe	; 0x60fe <rtc_read>
    7b34:	88 23       	and	r24, r24
    7b36:	51 f0       	breq	.+20     	; 0x7b4c <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7b38:	ce 01       	movw	r24, r28
    7b3a:	04 96       	adiw	r24, 0x04	; 4
    7b3c:	fa dc       	rcall	.-1548   	; 0x7532 <timegm>
    7b3e:	6b 01       	movw	r12, r22
    7b40:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7b42:	67 2b       	or	r22, r23
    7b44:	68 2b       	or	r22, r24
    7b46:	69 2b       	or	r22, r25
    7b48:	c1 f4       	brne	.+48     	; 0x7b7a <initialize_clock+0xbc>
    7b4a:	0a c0       	rjmp	.+20     	; 0x7b60 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7b4c:	85 e6       	ldi	r24, 0x65	; 101
    7b4e:	96 e0       	ldi	r25, 0x06	; 6
    7b50:	a0 e0       	ldi	r26, 0x00	; 0
    7b52:	ed b7       	in	r30, 0x3d	; 61
    7b54:	fe b7       	in	r31, 0x3e	; 62
    7b56:	81 83       	std	Z+1, r24	; 0x01
    7b58:	92 83       	std	Z+2, r25	; 0x02
    7b5a:	a3 83       	std	Z+3, r26	; 0x03
    7b5c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7b60:	81 e4       	ldi	r24, 0x41	; 65
    7b62:	96 e0       	ldi	r25, 0x06	; 6
    7b64:	a0 e0       	ldi	r26, 0x00	; 0
    7b66:	ed b7       	in	r30, 0x3d	; 61
    7b68:	fe b7       	in	r31, 0x3e	; 62
    7b6a:	81 83       	std	Z+1, r24	; 0x01
    7b6c:	92 83       	std	Z+2, r25	; 0x02
    7b6e:	a3 83       	std	Z+3, r26	; 0x03
    7b70:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    7b74:	c1 2c       	mov	r12, r1
    7b76:	d1 2c       	mov	r13, r1
    7b78:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7b7a:	1b a3       	std	Y+35, r17	; 0x23
    7b7c:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7b7e:	1d a2       	std	Y+37, r1	; 0x25
    7b80:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7b82:	ce 01       	movw	r24, r28
    7b84:	82 96       	adiw	r24, 0x22	; 34
    7b86:	30 da       	rcall	.-2976   	; 0x6fe8 <settimezone>

    ts.tv_sec = seconds;
    7b88:	ca 8e       	std	Y+26, r12	; 0x1a
    7b8a:	db 8e       	std	Y+27, r13	; 0x1b
    7b8c:	ec 8e       	std	Y+28, r14	; 0x1c
    7b8e:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7b90:	1e 8e       	std	Y+30, r1	; 0x1e
    7b92:	1f 8e       	std	Y+31, r1	; 0x1f
    7b94:	18 a2       	std	Y+32, r1	; 0x20
    7b96:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7b98:	be 01       	movw	r22, r28
    7b9a:	66 5e       	subi	r22, 0xE6	; 230
    7b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b9e:	80 e0       	ldi	r24, 0x00	; 0
    7ba0:	90 e0       	ldi	r25, 0x00	; 0
    7ba2:	c7 d8       	rcall	.-3698   	; 0x6d32 <clock_settime>
}
    7ba4:	a5 96       	adiw	r28, 0x25	; 37
    7ba6:	e8 e0       	ldi	r30, 0x08	; 8
    7ba8:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

00007bac <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7bac:	a9 e2       	ldi	r26, 0x29	; 41
    7bae:	b0 e0       	ldi	r27, 0x00	; 0
    7bb0:	ec ed       	ldi	r30, 0xDC	; 220
    7bb2:	fd e3       	ldi	r31, 0x3D	; 61
    7bb4:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7bb8:	ce 01       	movw	r24, r28
    7bba:	08 96       	adiw	r24, 0x08	; 8
    7bbc:	0e 94 7f 30 	call	0x60fe	; 0x60fe <rtc_read>
    7bc0:	88 23       	and	r24, r24
    7bc2:	29 f1       	breq	.+74     	; 0x7c0e <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7bc4:	ce 01       	movw	r24, r28
    7bc6:	08 96       	adiw	r24, 0x08	; 8
    7bc8:	b4 dc       	rcall	.-1688   	; 0x7532 <timegm>
    7bca:	6e a3       	std	Y+38, r22	; 0x26
    7bcc:	7f a3       	std	Y+39, r23	; 0x27
    7bce:	88 a7       	std	Y+40, r24	; 0x28
    7bd0:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7bd2:	ed b7       	in	r30, 0x3d	; 61
    7bd4:	fe b7       	in	r31, 0x3e	; 62
    7bd6:	64 83       	std	Z+4, r22	; 0x04
    7bd8:	75 83       	std	Z+5, r23	; 0x05
    7bda:	86 83       	std	Z+6, r24	; 0x06
    7bdc:	97 83       	std	Z+7, r25	; 0x07
    7bde:	8f e2       	ldi	r24, 0x2F	; 47
    7be0:	96 e0       	ldi	r25, 0x06	; 6
    7be2:	a0 e0       	ldi	r26, 0x00	; 0
    7be4:	81 83       	std	Z+1, r24	; 0x01
    7be6:	92 83       	std	Z+2, r25	; 0x02
    7be8:	a3 83       	std	Z+3, r26	; 0x03
    7bea:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7bee:	ce 01       	movw	r24, r28
    7bf0:	08 96       	adiw	r24, 0x08	; 8
    7bf2:	50 df       	rcall	.-352    	; 0x7a94 <asctime>
    7bf4:	ed b7       	in	r30, 0x3d	; 61
    7bf6:	fe b7       	in	r31, 0x3e	; 62
    7bf8:	95 83       	std	Z+5, r25	; 0x05
    7bfa:	84 83       	std	Z+4, r24	; 0x04
    7bfc:	8e e1       	ldi	r24, 0x1E	; 30
    7bfe:	96 e0       	ldi	r25, 0x06	; 6
    7c00:	a0 e0       	ldi	r26, 0x00	; 0
    7c02:	81 83       	std	Z+1, r24	; 0x01
    7c04:	92 83       	std	Z+2, r25	; 0x02
    7c06:	a3 83       	std	Z+3, r26	; 0x03
    7c08:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    7c0c:	0a c0       	rjmp	.+20     	; 0x7c22 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7c0e:	8d e0       	ldi	r24, 0x0D	; 13
    7c10:	96 e0       	ldi	r25, 0x06	; 6
    7c12:	a0 e0       	ldi	r26, 0x00	; 0
    7c14:	ed b7       	in	r30, 0x3d	; 61
    7c16:	fe b7       	in	r31, 0x3e	; 62
    7c18:	81 83       	std	Z+1, r24	; 0x01
    7c1a:	92 83       	std	Z+2, r25	; 0x02
    7c1c:	a3 83       	std	Z+3, r26	; 0x03
    7c1e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7c22:	be 01       	movw	r22, r28
    7c24:	62 5e       	subi	r22, 0xE2	; 226
    7c26:	7f 4f       	sbci	r23, 0xFF	; 255
    7c28:	80 e0       	ldi	r24, 0x00	; 0
    7c2a:	90 e0       	ldi	r25, 0x00	; 0
    7c2c:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <clock_gettime>
    seconds = ts.tv_sec;
    7c30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7c32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7c34:	a8 a1       	ldd	r26, Y+32	; 0x20
    7c36:	b9 a1       	ldd	r27, Y+33	; 0x21
    7c38:	8e a3       	std	Y+38, r24	; 0x26
    7c3a:	9f a3       	std	Y+39, r25	; 0x27
    7c3c:	a8 a7       	std	Y+40, r26	; 0x28
    7c3e:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7c40:	ed b7       	in	r30, 0x3d	; 61
    7c42:	fe b7       	in	r31, 0x3e	; 62
    7c44:	84 83       	std	Z+4, r24	; 0x04
    7c46:	95 83       	std	Z+5, r25	; 0x05
    7c48:	a6 83       	std	Z+6, r26	; 0x06
    7c4a:	b7 83       	std	Z+7, r27	; 0x07
    7c4c:	8b ef       	ldi	r24, 0xFB	; 251
    7c4e:	95 e0       	ldi	r25, 0x05	; 5
    7c50:	a0 e0       	ldi	r26, 0x00	; 0
    7c52:	81 83       	std	Z+1, r24	; 0x01
    7c54:	92 83       	std	Z+2, r25	; 0x02
    7c56:	a3 83       	std	Z+3, r26	; 0x03
    7c58:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7c5c:	ce 01       	movw	r24, r28
    7c5e:	86 96       	adiw	r24, 0x26	; 38
    7c60:	a9 d9       	rcall	.-3246   	; 0x6fb4 <gmtime>
    7c62:	18 df       	rcall	.-464    	; 0x7a94 <asctime>
    7c64:	ed b7       	in	r30, 0x3d	; 61
    7c66:	fe b7       	in	r31, 0x3e	; 62
    7c68:	95 83       	std	Z+5, r25	; 0x05
    7c6a:	84 83       	std	Z+4, r24	; 0x04
    7c6c:	8a ee       	ldi	r24, 0xEA	; 234
    7c6e:	95 e0       	ldi	r25, 0x05	; 5
    7c70:	a0 e0       	ldi	r26, 0x00	; 0
    7c72:	81 83       	std	Z+1, r24	; 0x01
    7c74:	92 83       	std	Z+2, r25	; 0x02
    7c76:	a3 83       	std	Z+3, r26	; 0x03
    7c78:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
}
    7c7c:	a9 96       	adiw	r28, 0x29	; 41
    7c7e:	e2 e0       	ldi	r30, 0x02	; 2
    7c80:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00007c84 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7c84:	fc 01       	movw	r30, r24
    7c86:	84 81       	ldd	r24, Z+4	; 0x04
    7c88:	95 81       	ldd	r25, Z+5	; 0x05
    7c8a:	00 97       	sbiw	r24, 0x00	; 0
    7c8c:	79 f0       	breq	.+30     	; 0x7cac <_putc_buffer_fn+0x28>
    7c8e:	66 23       	and	r22, r22
    7c90:	69 f0       	breq	.+26     	; 0x7cac <_putc_buffer_fn+0x28>
    7c92:	01 97       	sbiw	r24, 0x01	; 1
    7c94:	95 83       	std	Z+5, r25	; 0x05
    7c96:	84 83       	std	Z+4, r24	; 0x04
    7c98:	86 81       	ldd	r24, Z+6	; 0x06
    7c9a:	97 81       	ldd	r25, Z+7	; 0x07
    7c9c:	01 96       	adiw	r24, 0x01	; 1
    7c9e:	97 83       	std	Z+7, r25	; 0x07
    7ca0:	86 83       	std	Z+6, r24	; 0x06
    7ca2:	a2 81       	ldd	r26, Z+2	; 0x02
    7ca4:	b3 81       	ldd	r27, Z+3	; 0x03
    7ca6:	6d 93       	st	X+, r22
    7ca8:	b3 83       	std	Z+3, r27	; 0x03
    7caa:	a2 83       	std	Z+2, r26	; 0x02
    7cac:	02 80       	ldd	r0, Z+2	; 0x02
    7cae:	f3 81       	ldd	r31, Z+3	; 0x03
    7cb0:	e0 2d       	mov	r30, r0
    7cb2:	10 82       	st	Z, r1
    7cb4:	08 95       	ret

00007cb6 <_putc_fn>:
    7cb6:	fc 01       	movw	r30, r24
    7cb8:	26 81       	ldd	r18, Z+6	; 0x06
    7cba:	37 81       	ldd	r19, Z+7	; 0x07
    7cbc:	2f 5f       	subi	r18, 0xFF	; 255
    7cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    7cc0:	37 83       	std	Z+7, r19	; 0x07
    7cc2:	26 83       	std	Z+6, r18	; 0x06
    7cc4:	86 2f       	mov	r24, r22
    7cc6:	90 e0       	ldi	r25, 0x00	; 0
    7cc8:	0c 94 86 76 	jmp	0xed0c	; 0xed0c <putchar>
    7ccc:	08 95       	ret

00007cce <bin2num>:
    7cce:	a0 e0       	ldi	r26, 0x00	; 0
    7cd0:	b0 e0       	ldi	r27, 0x00	; 0
    7cd2:	ed e6       	ldi	r30, 0x6D	; 109
    7cd4:	fe e3       	ldi	r31, 0x3E	; 62
    7cd6:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0xe>
    7cda:	ea 01       	movw	r28, r20
    7cdc:	53 e0       	ldi	r21, 0x03	; 3
    7cde:	ee 0c       	add	r14, r14
    7ce0:	ff 1c       	adc	r15, r15
    7ce2:	5a 95       	dec	r21
    7ce4:	e1 f7       	brne	.-8      	; 0x7cde <bin2num+0x10>
    7ce6:	fc 01       	movw	r30, r24
    7ce8:	af 01       	movw	r20, r30
    7cea:	48 1b       	sub	r20, r24
    7cec:	59 0b       	sbc	r21, r25
    7cee:	c4 17       	cp	r28, r20
    7cf0:	d5 07       	cpc	r29, r21
    7cf2:	14 f0       	brlt	.+4      	; 0x7cf8 <bin2num+0x2a>
    7cf4:	11 92       	st	Z+, r1
    7cf6:	f8 cf       	rjmp	.-16     	; 0x7ce8 <bin2num+0x1a>
    7cf8:	41 e0       	ldi	r20, 0x01	; 1
    7cfa:	e4 1a       	sub	r14, r20
    7cfc:	f1 08       	sbc	r15, r1
    7cfe:	5b 01       	movw	r10, r22
    7d00:	42 e0       	ldi	r20, 0x02	; 2
    7d02:	a4 1a       	sub	r10, r20
    7d04:	b1 08       	sbc	r11, r1
    7d06:	f7 fc       	sbrc	r15, 7
    7d08:	3b c0       	rjmp	.+118    	; 0x7d80 <bin2num+0xb2>
    7d0a:	f7 01       	movw	r30, r14
    7d0c:	43 e0       	ldi	r20, 0x03	; 3
    7d0e:	f5 95       	asr	r31
    7d10:	e7 95       	ror	r30
    7d12:	4a 95       	dec	r20
    7d14:	e1 f7       	brne	.-8      	; 0x7d0e <bin2num+0x40>
    7d16:	e0 0f       	add	r30, r16
    7d18:	f1 1f       	adc	r31, r17
    7d1a:	40 81       	ld	r20, Z
    7d1c:	50 e0       	ldi	r21, 0x00	; 0
    7d1e:	f7 01       	movw	r30, r14
    7d20:	e7 70       	andi	r30, 0x07	; 7
    7d22:	ff 27       	eor	r31, r31
    7d24:	02 c0       	rjmp	.+4      	; 0x7d2a <bin2num+0x5c>
    7d26:	55 95       	asr	r21
    7d28:	47 95       	ror	r20
    7d2a:	ea 95       	dec	r30
    7d2c:	e2 f7       	brpl	.-8      	; 0x7d26 <bin2num+0x58>
    7d2e:	41 70       	andi	r20, 0x01	; 1
    7d30:	55 27       	eor	r21, r21
    7d32:	dc 01       	movw	r26, r24
    7d34:	e0 e0       	ldi	r30, 0x00	; 0
    7d36:	f0 e0       	ldi	r31, 0x00	; 0
    7d38:	ec 17       	cp	r30, r28
    7d3a:	fd 07       	cpc	r31, r29
    7d3c:	ec f4       	brge	.+58     	; 0x7d78 <bin2num+0xaa>
    7d3e:	ea 15       	cp	r30, r10
    7d40:	fb 05       	cpc	r31, r11
    7d42:	4c f0       	brlt	.+18     	; 0x7d56 <bin2num+0x88>
    7d44:	dc 01       	movw	r26, r24
    7d46:	ae 0f       	add	r26, r30
    7d48:	bf 1f       	adc	r27, r31
    7d4a:	1c 92       	st	X, r1
    7d4c:	41 e0       	ldi	r20, 0x01	; 1
    7d4e:	e4 1a       	sub	r14, r20
    7d50:	f1 08       	sbc	r15, r1
    7d52:	ef 01       	movw	r28, r30
    7d54:	d8 cf       	rjmp	.-80     	; 0x7d06 <bin2num+0x38>
    7d56:	9c 90       	ld	r9, X
    7d58:	99 0c       	add	r9, r9
    7d5a:	94 2a       	or	r9, r20
    7d5c:	49 2d       	mov	r20, r9
    7d5e:	50 e0       	ldi	r21, 0x00	; 0
    7d60:	42 17       	cp	r20, r18
    7d62:	53 07       	cpc	r21, r19
    7d64:	24 f0       	brlt	.+8      	; 0x7d6e <bin2num+0xa0>
    7d66:	92 1a       	sub	r9, r18
    7d68:	41 e0       	ldi	r20, 0x01	; 1
    7d6a:	50 e0       	ldi	r21, 0x00	; 0
    7d6c:	02 c0       	rjmp	.+4      	; 0x7d72 <bin2num+0xa4>
    7d6e:	40 e0       	ldi	r20, 0x00	; 0
    7d70:	50 e0       	ldi	r21, 0x00	; 0
    7d72:	9d 92       	st	X+, r9
    7d74:	31 96       	adiw	r30, 0x01	; 1
    7d76:	e0 cf       	rjmp	.-64     	; 0x7d38 <bin2num+0x6a>
    7d78:	41 15       	cp	r20, r1
    7d7a:	51 05       	cpc	r21, r1
    7d7c:	01 f7       	brne	.-64     	; 0x7d3e <bin2num+0x70>
    7d7e:	e2 cf       	rjmp	.-60     	; 0x7d44 <bin2num+0x76>
    7d80:	fc 01       	movw	r30, r24
    7d82:	9f 01       	movw	r18, r30
    7d84:	28 1b       	sub	r18, r24
    7d86:	39 0b       	sbc	r19, r25
    7d88:	2c 17       	cp	r18, r28
    7d8a:	3d 07       	cpc	r19, r29
    7d8c:	4c f4       	brge	.+18     	; 0x7da0 <bin2num+0xd2>
    7d8e:	20 81       	ld	r18, Z
    7d90:	2a 30       	cpi	r18, 0x0A	; 10
    7d92:	10 f4       	brcc	.+4      	; 0x7d98 <bin2num+0xca>
    7d94:	20 5d       	subi	r18, 0xD0	; 208
    7d96:	01 c0       	rjmp	.+2      	; 0x7d9a <bin2num+0xcc>
    7d98:	29 5a       	subi	r18, 0xA9	; 169
    7d9a:	20 83       	st	Z, r18
    7d9c:	31 96       	adiw	r30, 0x01	; 1
    7d9e:	f1 cf       	rjmp	.-30     	; 0x7d82 <bin2num+0xb4>
    7da0:	9e 01       	movw	r18, r28
    7da2:	d7 ff       	sbrs	r29, 7
    7da4:	02 c0       	rjmp	.+4      	; 0x7daa <bin2num+0xdc>
    7da6:	20 e0       	ldi	r18, 0x00	; 0
    7da8:	30 e0       	ldi	r19, 0x00	; 0
    7daa:	c1 14       	cp	r12, r1
    7dac:	d1 04       	cpc	r13, r1
    7dae:	61 f0       	breq	.+24     	; 0x7dc8 <bin2num+0xfa>
    7db0:	61 50       	subi	r22, 0x01	; 1
    7db2:	71 09       	sbc	r23, r1
    7db4:	26 17       	cp	r18, r22
    7db6:	37 07       	cpc	r19, r23
    7db8:	3c f4       	brge	.+14     	; 0x7dc8 <bin2num+0xfa>
    7dba:	fc 01       	movw	r30, r24
    7dbc:	e2 0f       	add	r30, r18
    7dbe:	f3 1f       	adc	r31, r19
    7dc0:	c0 82       	st	Z, r12
    7dc2:	21 96       	adiw	r28, 0x01	; 1
    7dc4:	2f 5f       	subi	r18, 0xFF	; 255
    7dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    7dc8:	fc 01       	movw	r30, r24
    7dca:	e2 0f       	add	r30, r18
    7dcc:	f3 1f       	adc	r31, r19
    7dce:	10 82       	st	Z, r1
    7dd0:	0e 94 a7 31 	call	0x634e	; 0x634e <reverse>
    7dd4:	ce 01       	movw	r24, r28
    7dd6:	cd b7       	in	r28, 0x3d	; 61
    7dd8:	de b7       	in	r29, 0x3e	; 62
    7dda:	eb e0       	ldi	r30, 0x0B	; 11
    7ddc:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0xe>

00007de0 <pch>:
    7de0:	fc 01       	movw	r30, r24
    7de2:	22 81       	ldd	r18, Z+2	; 0x02
    7de4:	33 81       	ldd	r19, Z+3	; 0x03
    7de6:	44 81       	ldd	r20, Z+4	; 0x04
    7de8:	55 81       	ldd	r21, Z+5	; 0x05
    7dea:	80 81       	ld	r24, Z
    7dec:	91 81       	ldd	r25, Z+1	; 0x01
    7dee:	24 17       	cp	r18, r20
    7df0:	35 07       	cpc	r19, r21
    7df2:	54 f4       	brge	.+20     	; 0x7e08 <pch+0x28>
    7df4:	a9 01       	movw	r20, r18
    7df6:	4f 5f       	subi	r20, 0xFF	; 255
    7df8:	5f 4f       	sbci	r21, 0xFF	; 255
    7dfa:	53 83       	std	Z+3, r21	; 0x03
    7dfc:	42 83       	std	Z+2, r20	; 0x02
    7dfe:	dc 01       	movw	r26, r24
    7e00:	a2 0f       	add	r26, r18
    7e02:	b3 1f       	adc	r27, r19
    7e04:	6c 93       	st	X, r22
    7e06:	04 c0       	rjmp	.+8      	; 0x7e10 <pch+0x30>
    7e08:	dc 01       	movw	r26, r24
    7e0a:	a2 0f       	add	r26, r18
    7e0c:	b3 1f       	adc	r27, r19
    7e0e:	1c 92       	st	X, r1
    7e10:	82 81       	ldd	r24, Z+2	; 0x02
    7e12:	93 81       	ldd	r25, Z+3	; 0x03
    7e14:	08 95       	ret

00007e16 <p_ntoa>:
    7e16:	af 92       	push	r10
    7e18:	cf 92       	push	r12
    7e1a:	df 92       	push	r13
    7e1c:	ef 92       	push	r14
    7e1e:	ff 92       	push	r15
    7e20:	0f 93       	push	r16
    7e22:	1f 93       	push	r17
    7e24:	cf 93       	push	r28
    7e26:	df 93       	push	r29
    7e28:	dc 01       	movw	r26, r24
    7e2a:	eb 01       	movw	r28, r22
    7e2c:	fa 01       	movw	r30, r20
    7e2e:	b9 01       	movw	r22, r18
    7e30:	98 01       	movw	r18, r16
    7e32:	a6 01       	movw	r20, r12
    7e34:	9a 2d       	mov	r25, r10
    7e36:	a5 fa       	bst	r10, 5
    7e38:	cc 24       	eor	r12, r12
    7e3a:	c0 f8       	bld	r12, 0
    7e3c:	a6 fc       	sbrc	r10, 6
    7e3e:	07 c0       	rjmp	.+14     	; 0x7e4e <p_ntoa+0x38>
    7e40:	a2 fc       	sbrc	r10, 2
    7e42:	08 c0       	rjmp	.+16     	; 0x7e54 <p_ntoa+0x3e>
    7e44:	a4 fe       	sbrs	r10, 4
    7e46:	09 c0       	rjmp	.+18     	; 0x7e5a <p_ntoa+0x44>
    7e48:	00 e2       	ldi	r16, 0x20	; 32
    7e4a:	10 e0       	ldi	r17, 0x00	; 0
    7e4c:	08 c0       	rjmp	.+16     	; 0x7e5e <p_ntoa+0x48>
    7e4e:	0d e2       	ldi	r16, 0x2D	; 45
    7e50:	10 e0       	ldi	r17, 0x00	; 0
    7e52:	05 c0       	rjmp	.+10     	; 0x7e5e <p_ntoa+0x48>
    7e54:	0b e2       	ldi	r16, 0x2B	; 43
    7e56:	10 e0       	ldi	r17, 0x00	; 0
    7e58:	02 c0       	rjmp	.+4      	; 0x7e5e <p_ntoa+0x48>
    7e5a:	00 e0       	ldi	r16, 0x00	; 0
    7e5c:	10 e0       	ldi	r17, 0x00	; 0
    7e5e:	95 ff       	sbrs	r25, 5
    7e60:	04 c0       	rjmp	.+8      	; 0x7e6a <p_ntoa+0x54>
    7e62:	89 2f       	mov	r24, r25
    7e64:	8a 70       	andi	r24, 0x0A	; 10
    7e66:	09 f0       	breq	.+2      	; 0x7e6a <p_ntoa+0x54>
    7e68:	c1 2c       	mov	r12, r1
    7e6a:	c0 fa       	bst	r12, 0
    7e6c:	95 f9       	bld	r25, 5
    7e6e:	89 2f       	mov	r24, r25
    7e70:	82 70       	andi	r24, 0x02	; 2
    7e72:	c8 2e       	mov	r12, r24
    7e74:	91 fd       	sbrc	r25, 1
    7e76:	02 c0       	rjmp	.+4      	; 0x7e7c <p_ntoa+0x66>
    7e78:	40 e0       	ldi	r20, 0x00	; 0
    7e7a:	50 e0       	ldi	r21, 0x00	; 0
    7e7c:	89 2f       	mov	r24, r25
    7e7e:	83 70       	andi	r24, 0x03	; 3
    7e80:	11 f4       	brne	.+4      	; 0x7e86 <p_ntoa+0x70>
    7e82:	41 e0       	ldi	r20, 0x01	; 1
    7e84:	50 e0       	ldi	r21, 0x00	; 0
    7e86:	90 ff       	sbrs	r25, 0
    7e88:	0c c0       	rjmp	.+24     	; 0x7ea2 <p_ntoa+0x8c>
    7e8a:	95 fd       	sbrc	r25, 5
    7e8c:	05 c0       	rjmp	.+10     	; 0x7e98 <p_ntoa+0x82>
    7e8e:	c1 10       	cpse	r12, r1
    7e90:	08 c0       	rjmp	.+16     	; 0x7ea2 <p_ntoa+0x8c>
    7e92:	41 e0       	ldi	r20, 0x01	; 1
    7e94:	50 e0       	ldi	r21, 0x00	; 0
    7e96:	05 c0       	rjmp	.+10     	; 0x7ea2 <p_ntoa+0x8c>
    7e98:	94 75       	andi	r25, 0x54	; 84
    7e9a:	a7 01       	movw	r20, r14
    7e9c:	11 f0       	breq	.+4      	; 0x7ea2 <p_ntoa+0x8c>
    7e9e:	41 50       	subi	r20, 0x01	; 1
    7ea0:	51 09       	sbc	r21, r1
    7ea2:	68 01       	movw	r12, r16
    7ea4:	7e 01       	movw	r14, r28
    7ea6:	8d 01       	movw	r16, r26
    7ea8:	cf 01       	movw	r24, r30
    7eaa:	11 df       	rcall	.-478    	; 0x7cce <bin2num>
    7eac:	df 91       	pop	r29
    7eae:	cf 91       	pop	r28
    7eb0:	1f 91       	pop	r17
    7eb2:	0f 91       	pop	r16
    7eb4:	ff 90       	pop	r15
    7eb6:	ef 90       	pop	r14
    7eb8:	df 90       	pop	r13
    7eba:	cf 90       	pop	r12
    7ebc:	af 90       	pop	r10
    7ebe:	08 95       	ret

00007ec0 <p_ftoa>:
    7ec0:	aa e0       	ldi	r26, 0x0A	; 10
    7ec2:	b0 e0       	ldi	r27, 0x00	; 0
    7ec4:	e6 e6       	ldi	r30, 0x66	; 102
    7ec6:	ff e3       	ldi	r31, 0x3F	; 63
    7ec8:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    7ecc:	4b 01       	movw	r8, r22
    7ece:	5c 01       	movw	r10, r24
    7ed0:	1a 01       	movw	r2, r20
    7ed2:	28 01       	movw	r4, r16
    7ed4:	c6 fa       	bst	r12, 6
    7ed6:	11 27       	eor	r17, r17
    7ed8:	10 f9       	bld	r17, 0
    7eda:	5a 83       	std	Y+2, r21	; 0x02
    7edc:	49 83       	std	Y+1, r20	; 0x01
    7ede:	1c 82       	std	Y+4, r1	; 0x04
    7ee0:	1b 82       	std	Y+3, r1	; 0x03
    7ee2:	21 50       	subi	r18, 0x01	; 1
    7ee4:	31 09       	sbc	r19, r1
    7ee6:	3e 83       	std	Y+6, r19	; 0x06
    7ee8:	2d 83       	std	Y+5, r18	; 0x05
    7eea:	fa 01       	movw	r30, r20
    7eec:	10 82       	st	Z, r1
    7eee:	20 e0       	ldi	r18, 0x00	; 0
    7ef0:	30 e0       	ldi	r19, 0x00	; 0
    7ef2:	a9 01       	movw	r20, r18
    7ef4:	0e 94 d4 e7 	call	0x1cfa8	; 0x1cfa8 <__cmpsf2>
    7ef8:	87 ff       	sbrs	r24, 7
    7efa:	05 c0       	rjmp	.+10     	; 0x7f06 <p_ftoa+0x46>
    7efc:	b7 fa       	bst	r11, 7
    7efe:	b0 94       	com	r11
    7f00:	b7 f8       	bld	r11, 7
    7f02:	b0 94       	com	r11
    7f04:	11 e0       	ldi	r17, 0x01	; 1
    7f06:	10 fb       	bst	r17, 0
    7f08:	c6 f8       	bld	r12, 6
    7f0a:	c6 fe       	sbrs	r12, 6
    7f0c:	02 c0       	rjmp	.+4      	; 0x7f12 <p_ftoa+0x52>
    7f0e:	6d e2       	ldi	r22, 0x2D	; 45
    7f10:	07 c0       	rjmp	.+14     	; 0x7f20 <p_ftoa+0x60>
    7f12:	c2 fe       	sbrs	r12, 2
    7f14:	02 c0       	rjmp	.+4      	; 0x7f1a <p_ftoa+0x5a>
    7f16:	6b e2       	ldi	r22, 0x2B	; 43
    7f18:	03 c0       	rjmp	.+6      	; 0x7f20 <p_ftoa+0x60>
    7f1a:	c4 fe       	sbrs	r12, 4
    7f1c:	04 c0       	rjmp	.+8      	; 0x7f26 <p_ftoa+0x66>
    7f1e:	60 e2       	ldi	r22, 0x20	; 32
    7f20:	ce 01       	movw	r24, r28
    7f22:	01 96       	adiw	r24, 0x01	; 1
    7f24:	5d df       	rcall	.-326    	; 0x7de0 <pch>
    7f26:	37 01       	movw	r6, r14
    7f28:	f7 fe       	sbrs	r15, 7
    7f2a:	02 c0       	rjmp	.+4      	; 0x7f30 <p_ftoa+0x70>
    7f2c:	61 2c       	mov	r6, r1
    7f2e:	71 2c       	mov	r7, r1
    7f30:	20 e0       	ldi	r18, 0x00	; 0
    7f32:	30 e0       	ldi	r19, 0x00	; 0
    7f34:	a9 01       	movw	r20, r18
    7f36:	c5 01       	movw	r24, r10
    7f38:	b4 01       	movw	r22, r8
    7f3a:	0e 94 d4 e7 	call	0x1cfa8	; 0x1cfa8 <__cmpsf2>
    7f3e:	88 23       	and	r24, r24
    7f40:	d1 f1       	breq	.+116    	; 0x7fb6 <p_ftoa+0xf6>
    7f42:	c1 fe       	sbrs	r12, 1
    7f44:	11 c0       	rjmp	.+34     	; 0x7f68 <p_ftoa+0xa8>
    7f46:	83 01       	movw	r16, r6
    7f48:	60 e0       	ldi	r22, 0x00	; 0
    7f4a:	70 e0       	ldi	r23, 0x00	; 0
    7f4c:	80 e0       	ldi	r24, 0x00	; 0
    7f4e:	9f e3       	ldi	r25, 0x3F	; 63
    7f50:	01 15       	cp	r16, r1
    7f52:	11 05       	cpc	r17, r1
    7f54:	69 f0       	breq	.+26     	; 0x7f70 <p_ftoa+0xb0>
    7f56:	20 e0       	ldi	r18, 0x00	; 0
    7f58:	30 e0       	ldi	r19, 0x00	; 0
    7f5a:	40 e2       	ldi	r20, 0x20	; 32
    7f5c:	51 e4       	ldi	r21, 0x41	; 65
    7f5e:	0e 94 d8 e7 	call	0x1cfb0	; 0x1cfb0 <__divsf3>
    7f62:	01 50       	subi	r16, 0x01	; 1
    7f64:	11 09       	sbc	r17, r1
    7f66:	f4 cf       	rjmp	.-24     	; 0x7f50 <p_ftoa+0x90>
    7f68:	60 e0       	ldi	r22, 0x00	; 0
    7f6a:	70 e0       	ldi	r23, 0x00	; 0
    7f6c:	80 e0       	ldi	r24, 0x00	; 0
    7f6e:	9f e3       	ldi	r25, 0x3F	; 63
    7f70:	9b 01       	movw	r18, r22
    7f72:	ac 01       	movw	r20, r24
    7f74:	c5 01       	movw	r24, r10
    7f76:	b4 01       	movw	r22, r8
    7f78:	0e 94 70 e7 	call	0x1cee0	; 0x1cee0 <__addsf3>
    7f7c:	4b 01       	movw	r8, r22
    7f7e:	5c 01       	movw	r10, r24
    7f80:	ee 24       	eor	r14, r14
    7f82:	e3 94       	inc	r14
    7f84:	f1 2c       	mov	r15, r1
    7f86:	20 e0       	ldi	r18, 0x00	; 0
    7f88:	30 e0       	ldi	r19, 0x00	; 0
    7f8a:	40 e2       	ldi	r20, 0x20	; 32
    7f8c:	51 e4       	ldi	r21, 0x41	; 65
    7f8e:	c5 01       	movw	r24, r10
    7f90:	b4 01       	movw	r22, r8
    7f92:	0e 94 23 e9 	call	0x1d246	; 0x1d246 <__gesf2>
    7f96:	87 fd       	sbrc	r24, 7
    7f98:	11 c0       	rjmp	.+34     	; 0x7fbc <p_ftoa+0xfc>
    7f9a:	ff ef       	ldi	r31, 0xFF	; 255
    7f9c:	ef 1a       	sub	r14, r31
    7f9e:	ff 0a       	sbc	r15, r31
    7fa0:	20 e0       	ldi	r18, 0x00	; 0
    7fa2:	30 e0       	ldi	r19, 0x00	; 0
    7fa4:	40 e2       	ldi	r20, 0x20	; 32
    7fa6:	51 e4       	ldi	r21, 0x41	; 65
    7fa8:	c5 01       	movw	r24, r10
    7faa:	b4 01       	movw	r22, r8
    7fac:	0e 94 d8 e7 	call	0x1cfb0	; 0x1cfb0 <__divsf3>
    7fb0:	4b 01       	movw	r8, r22
    7fb2:	5c 01       	movw	r10, r24
    7fb4:	e8 cf       	rjmp	.-48     	; 0x7f86 <p_ftoa+0xc6>
    7fb6:	ee 24       	eor	r14, r14
    7fb8:	e3 94       	inc	r14
    7fba:	f1 2c       	mov	r15, r1
    7fbc:	8c 2d       	mov	r24, r12
    7fbe:	88 72       	andi	r24, 0x28	; 40
    7fc0:	80 32       	cpi	r24, 0x20	; 32
    7fc2:	c1 f4       	brne	.+48     	; 0x7ff4 <p_ftoa+0x134>
    7fc4:	82 01       	movw	r16, r4
    7fc6:	0e 19       	sub	r16, r14
    7fc8:	1f 09       	sbc	r17, r15
    7fca:	8b 81       	ldd	r24, Y+3	; 0x03
    7fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    7fce:	08 1b       	sub	r16, r24
    7fd0:	19 0b       	sbc	r17, r25
    7fd2:	c1 fe       	sbrs	r12, 1
    7fd4:	07 c0       	rjmp	.+14     	; 0x7fe4 <p_ftoa+0x124>
    7fd6:	61 14       	cp	r6, r1
    7fd8:	71 04       	cpc	r7, r1
    7fda:	21 f0       	breq	.+8      	; 0x7fe4 <p_ftoa+0x124>
    7fdc:	06 19       	sub	r16, r6
    7fde:	17 09       	sbc	r17, r7
    7fe0:	01 50       	subi	r16, 0x01	; 1
    7fe2:	11 09       	sbc	r17, r1
    7fe4:	10 16       	cp	r1, r16
    7fe6:	11 06       	cpc	r1, r17
    7fe8:	2c f4       	brge	.+10     	; 0x7ff4 <p_ftoa+0x134>
    7fea:	60 e3       	ldi	r22, 0x30	; 48
    7fec:	ce 01       	movw	r24, r28
    7fee:	01 96       	adiw	r24, 0x01	; 1
    7ff0:	f7 de       	rcall	.-530    	; 0x7de0 <pch>
    7ff2:	f6 cf       	rjmp	.-20     	; 0x7fe0 <p_ftoa+0x120>
    7ff4:	c5 01       	movw	r24, r10
    7ff6:	b4 01       	movw	r22, r8
    7ff8:	0e 94 40 e8 	call	0x1d080	; 0x1d080 <__fixsfsi>
    7ffc:	6f 83       	std	Y+7, r22	; 0x07
    7ffe:	78 87       	std	Y+8, r23	; 0x08
    8000:	89 87       	std	Y+9, r24	; 0x09
    8002:	9a 87       	std	Y+10, r25	; 0x0a
    8004:	6f 81       	ldd	r22, Y+7	; 0x07
    8006:	60 5d       	subi	r22, 0xD0	; 208
    8008:	ce 01       	movw	r24, r28
    800a:	01 96       	adiw	r24, 0x01	; 1
    800c:	e9 de       	rcall	.-558    	; 0x7de0 <pch>
    800e:	2f 81       	ldd	r18, Y+7	; 0x07
    8010:	38 85       	ldd	r19, Y+8	; 0x08
    8012:	b9 01       	movw	r22, r18
    8014:	33 0f       	add	r19, r19
    8016:	88 0b       	sbc	r24, r24
    8018:	99 0b       	sbc	r25, r25
    801a:	0e 94 73 e8 	call	0x1d0e6	; 0x1d0e6 <__floatsisf>
    801e:	9b 01       	movw	r18, r22
    8020:	ac 01       	movw	r20, r24
    8022:	c5 01       	movw	r24, r10
    8024:	b4 01       	movw	r22, r8
    8026:	0e 94 6f e7 	call	0x1cede	; 0x1cede <__subsf3>
    802a:	31 e0       	ldi	r19, 0x01	; 1
    802c:	e3 1a       	sub	r14, r19
    802e:	f1 08       	sbc	r15, r1
    8030:	20 e0       	ldi	r18, 0x00	; 0
    8032:	30 e0       	ldi	r19, 0x00	; 0
    8034:	40 e2       	ldi	r20, 0x20	; 32
    8036:	51 e4       	ldi	r21, 0x41	; 65
    8038:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <__mulsf3>
    803c:	4b 01       	movw	r8, r22
    803e:	5c 01       	movw	r10, r24
    8040:	e1 14       	cp	r14, r1
    8042:	f1 04       	cpc	r15, r1
    8044:	b9 f6       	brne	.-82     	; 0x7ff4 <p_ftoa+0x134>
    8046:	c1 fc       	sbrc	r12, 1
    8048:	10 c0       	rjmp	.+32     	; 0x806a <p_ftoa+0x1aa>
    804a:	60 e0       	ldi	r22, 0x00	; 0
    804c:	ce 01       	movw	r24, r28
    804e:	01 96       	adiw	r24, 0x01	; 1
    8050:	c7 de       	rcall	.-626    	; 0x7de0 <pch>
    8052:	f1 01       	movw	r30, r2
    8054:	01 90       	ld	r0, Z+
    8056:	00 20       	and	r0, r0
    8058:	e9 f7       	brne	.-6      	; 0x8054 <p_ftoa+0x194>
    805a:	31 97       	sbiw	r30, 0x01	; 1
    805c:	cf 01       	movw	r24, r30
    805e:	82 19       	sub	r24, r2
    8060:	93 09       	sbc	r25, r3
    8062:	2a 96       	adiw	r28, 0x0a	; 10
    8064:	e2 e1       	ldi	r30, 0x12	; 18
    8066:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>
    806a:	61 14       	cp	r6, r1
    806c:	71 04       	cpc	r7, r1
    806e:	69 f3       	breq	.-38     	; 0x804a <p_ftoa+0x18a>
    8070:	6e e2       	ldi	r22, 0x2E	; 46
    8072:	ce 01       	movw	r24, r28
    8074:	01 96       	adiw	r24, 0x01	; 1
    8076:	b4 de       	rcall	.-664    	; 0x7de0 <pch>
    8078:	c5 01       	movw	r24, r10
    807a:	b4 01       	movw	r22, r8
    807c:	0e 94 40 e8 	call	0x1d080	; 0x1d080 <__fixsfsi>
    8080:	6b 01       	movw	r12, r22
    8082:	7c 01       	movw	r14, r24
    8084:	07 2e       	mov	r0, r23
    8086:	00 0c       	add	r0, r0
    8088:	88 0b       	sbc	r24, r24
    808a:	99 0b       	sbc	r25, r25
    808c:	0e 94 73 e8 	call	0x1d0e6	; 0x1d0e6 <__floatsisf>
    8090:	9b 01       	movw	r18, r22
    8092:	ac 01       	movw	r20, r24
    8094:	c5 01       	movw	r24, r10
    8096:	b4 01       	movw	r22, r8
    8098:	0e 94 6f e7 	call	0x1cede	; 0x1cede <__subsf3>
    809c:	4b 01       	movw	r8, r22
    809e:	5c 01       	movw	r10, r24
    80a0:	b6 01       	movw	r22, r12
    80a2:	60 5d       	subi	r22, 0xD0	; 208
    80a4:	7f 4f       	sbci	r23, 0xFF	; 255
    80a6:	ce 01       	movw	r24, r28
    80a8:	01 96       	adiw	r24, 0x01	; 1
    80aa:	9a de       	rcall	.-716    	; 0x7de0 <pch>
    80ac:	81 e0       	ldi	r24, 0x01	; 1
    80ae:	68 1a       	sub	r6, r24
    80b0:	71 08       	sbc	r7, r1
    80b2:	20 e0       	ldi	r18, 0x00	; 0
    80b4:	30 e0       	ldi	r19, 0x00	; 0
    80b6:	40 e2       	ldi	r20, 0x20	; 32
    80b8:	51 e4       	ldi	r21, 0x41	; 65
    80ba:	c5 01       	movw	r24, r10
    80bc:	b4 01       	movw	r22, r8
    80be:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <__mulsf3>
    80c2:	4b 01       	movw	r8, r22
    80c4:	5c 01       	movw	r10, r24
    80c6:	61 14       	cp	r6, r1
    80c8:	71 04       	cpc	r7, r1
    80ca:	b1 f6       	brne	.-84     	; 0x8078 <p_ftoa+0x1b8>
    80cc:	be cf       	rjmp	.-132    	; 0x804a <p_ftoa+0x18a>

000080ce <p_etoa>:
    80ce:	a3 e1       	ldi	r26, 0x13	; 19
    80d0:	b0 e0       	ldi	r27, 0x00	; 0
    80d2:	ed e6       	ldi	r30, 0x6D	; 109
    80d4:	f0 e4       	ldi	r31, 0x40	; 64
    80d6:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    80da:	4b 01       	movw	r8, r22
    80dc:	5c 01       	movw	r10, r24
    80de:	59 8b       	std	Y+17, r21	; 0x11
    80e0:	48 8b       	std	Y+16, r20	; 0x10
    80e2:	1b 8b       	std	Y+19, r17	; 0x13
    80e4:	0a 8b       	std	Y+18, r16	; 0x12
    80e6:	3c 2c       	mov	r3, r12
    80e8:	c6 fa       	bst	r12, 6
    80ea:	11 27       	eor	r17, r17
    80ec:	10 f9       	bld	r17, 0
    80ee:	59 87       	std	Y+9, r21	; 0x09
    80f0:	48 87       	std	Y+8, r20	; 0x08
    80f2:	1b 86       	std	Y+11, r1	; 0x0b
    80f4:	1a 86       	std	Y+10, r1	; 0x0a
    80f6:	21 50       	subi	r18, 0x01	; 1
    80f8:	31 09       	sbc	r19, r1
    80fa:	3d 87       	std	Y+13, r19	; 0x0d
    80fc:	2c 87       	std	Y+12, r18	; 0x0c
    80fe:	fa 01       	movw	r30, r20
    8100:	10 82       	st	Z, r1
    8102:	20 e0       	ldi	r18, 0x00	; 0
    8104:	30 e0       	ldi	r19, 0x00	; 0
    8106:	a9 01       	movw	r20, r18
    8108:	0e 94 d4 e7 	call	0x1cfa8	; 0x1cfa8 <__cmpsf2>
    810c:	87 ff       	sbrs	r24, 7
    810e:	05 c0       	rjmp	.+10     	; 0x811a <p_etoa+0x4c>
    8110:	b7 fa       	bst	r11, 7
    8112:	b0 94       	com	r11
    8114:	b7 f8       	bld	r11, 7
    8116:	b0 94       	com	r11
    8118:	11 e0       	ldi	r17, 0x01	; 1
    811a:	10 fb       	bst	r17, 0
    811c:	36 f8       	bld	r3, 6
    811e:	36 fe       	sbrs	r3, 6
    8120:	02 c0       	rjmp	.+4      	; 0x8126 <p_etoa+0x58>
    8122:	6d e2       	ldi	r22, 0x2D	; 45
    8124:	07 c0       	rjmp	.+14     	; 0x8134 <p_etoa+0x66>
    8126:	32 fe       	sbrs	r3, 2
    8128:	02 c0       	rjmp	.+4      	; 0x812e <p_etoa+0x60>
    812a:	6b e2       	ldi	r22, 0x2B	; 43
    812c:	03 c0       	rjmp	.+6      	; 0x8134 <p_etoa+0x66>
    812e:	34 fe       	sbrs	r3, 4
    8130:	04 c0       	rjmp	.+8      	; 0x813a <p_etoa+0x6c>
    8132:	60 e2       	ldi	r22, 0x20	; 32
    8134:	ce 01       	movw	r24, r28
    8136:	08 96       	adiw	r24, 0x08	; 8
    8138:	53 de       	rcall	.-858    	; 0x7de0 <pch>
    813a:	37 01       	movw	r6, r14
    813c:	f7 fe       	sbrs	r15, 7
    813e:	02 c0       	rjmp	.+4      	; 0x8144 <p_etoa+0x76>
    8140:	61 2c       	mov	r6, r1
    8142:	71 2c       	mov	r7, r1
    8144:	1f 86       	std	Y+15, r1	; 0x0f
    8146:	1e 86       	std	Y+14, r1	; 0x0e
    8148:	20 e0       	ldi	r18, 0x00	; 0
    814a:	30 e0       	ldi	r19, 0x00	; 0
    814c:	a9 01       	movw	r20, r18
    814e:	c5 01       	movw	r24, r10
    8150:	b4 01       	movw	r22, r8
    8152:	0e 94 d4 e7 	call	0x1cfa8	; 0x1cfa8 <__cmpsf2>
    8156:	f3 2d       	mov	r31, r3
    8158:	f2 70       	andi	r31, 0x02	; 2
    815a:	2f 2e       	mov	r2, r31
    815c:	88 23       	and	r24, r24
    815e:	09 f4       	brne	.+2      	; 0x8162 <p_etoa+0x94>
    8160:	70 c0       	rjmp	.+224    	; 0x8242 <p_etoa+0x174>
    8162:	ff 23       	and	r31, r31
    8164:	b1 f0       	breq	.+44     	; 0x8192 <p_etoa+0xc4>
    8166:	83 01       	movw	r16, r6
    8168:	c1 2c       	mov	r12, r1
    816a:	d1 2c       	mov	r13, r1
    816c:	e1 2c       	mov	r14, r1
    816e:	2f e3       	ldi	r18, 0x3F	; 63
    8170:	f2 2e       	mov	r15, r18
    8172:	01 15       	cp	r16, r1
    8174:	11 05       	cpc	r17, r1
    8176:	91 f0       	breq	.+36     	; 0x819c <p_etoa+0xce>
    8178:	20 e0       	ldi	r18, 0x00	; 0
    817a:	30 e0       	ldi	r19, 0x00	; 0
    817c:	40 e2       	ldi	r20, 0x20	; 32
    817e:	51 e4       	ldi	r21, 0x41	; 65
    8180:	c7 01       	movw	r24, r14
    8182:	b6 01       	movw	r22, r12
    8184:	0e 94 d8 e7 	call	0x1cfb0	; 0x1cfb0 <__divsf3>
    8188:	6b 01       	movw	r12, r22
    818a:	7c 01       	movw	r14, r24
    818c:	01 50       	subi	r16, 0x01	; 1
    818e:	11 09       	sbc	r17, r1
    8190:	f0 cf       	rjmp	.-32     	; 0x8172 <p_etoa+0xa4>
    8192:	c1 2c       	mov	r12, r1
    8194:	d1 2c       	mov	r13, r1
    8196:	e1 2c       	mov	r14, r1
    8198:	9f e3       	ldi	r25, 0x3F	; 63
    819a:	f9 2e       	mov	r15, r25
    819c:	41 2c       	mov	r4, r1
    819e:	51 2c       	mov	r5, r1
    81a0:	82 01       	movw	r16, r4
    81a2:	01 50       	subi	r16, 0x01	; 1
    81a4:	11 09       	sbc	r17, r1
    81a6:	20 e0       	ldi	r18, 0x00	; 0
    81a8:	30 e0       	ldi	r19, 0x00	; 0
    81aa:	40 e8       	ldi	r20, 0x80	; 128
    81ac:	5f e3       	ldi	r21, 0x3F	; 63
    81ae:	c5 01       	movw	r24, r10
    81b0:	b4 01       	movw	r22, r8
    81b2:	0e 94 d4 e7 	call	0x1cfa8	; 0x1cfa8 <__cmpsf2>
    81b6:	87 ff       	sbrs	r24, 7
    81b8:	0c c0       	rjmp	.+24     	; 0x81d2 <p_etoa+0x104>
    81ba:	20 e0       	ldi	r18, 0x00	; 0
    81bc:	30 e0       	ldi	r19, 0x00	; 0
    81be:	40 e2       	ldi	r20, 0x20	; 32
    81c0:	51 e4       	ldi	r21, 0x41	; 65
    81c2:	c5 01       	movw	r24, r10
    81c4:	b4 01       	movw	r22, r8
    81c6:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <__mulsf3>
    81ca:	4b 01       	movw	r8, r22
    81cc:	5c 01       	movw	r10, r24
    81ce:	28 01       	movw	r4, r16
    81d0:	e7 cf       	rjmp	.-50     	; 0x81a0 <p_etoa+0xd2>
    81d2:	82 01       	movw	r16, r4
    81d4:	0f 5f       	subi	r16, 0xFF	; 255
    81d6:	1f 4f       	sbci	r17, 0xFF	; 255
    81d8:	20 e0       	ldi	r18, 0x00	; 0
    81da:	30 e0       	ldi	r19, 0x00	; 0
    81dc:	40 e2       	ldi	r20, 0x20	; 32
    81de:	51 e4       	ldi	r21, 0x41	; 65
    81e0:	c5 01       	movw	r24, r10
    81e2:	b4 01       	movw	r22, r8
    81e4:	0e 94 23 e9 	call	0x1d246	; 0x1d246 <__gesf2>
    81e8:	87 fd       	sbrc	r24, 7
    81ea:	0c c0       	rjmp	.+24     	; 0x8204 <p_etoa+0x136>
    81ec:	20 e0       	ldi	r18, 0x00	; 0
    81ee:	30 e0       	ldi	r19, 0x00	; 0
    81f0:	40 e2       	ldi	r20, 0x20	; 32
    81f2:	51 e4       	ldi	r21, 0x41	; 65
    81f4:	c5 01       	movw	r24, r10
    81f6:	b4 01       	movw	r22, r8
    81f8:	0e 94 d8 e7 	call	0x1cfb0	; 0x1cfb0 <__divsf3>
    81fc:	4b 01       	movw	r8, r22
    81fe:	5c 01       	movw	r10, r24
    8200:	28 01       	movw	r4, r16
    8202:	e7 cf       	rjmp	.-50     	; 0x81d2 <p_etoa+0x104>
    8204:	a7 01       	movw	r20, r14
    8206:	96 01       	movw	r18, r12
    8208:	c5 01       	movw	r24, r10
    820a:	b4 01       	movw	r22, r8
    820c:	0e 94 70 e7 	call	0x1cee0	; 0x1cee0 <__addsf3>
    8210:	4b 01       	movw	r8, r22
    8212:	5c 01       	movw	r10, r24
    8214:	82 01       	movw	r16, r4
    8216:	2f ef       	ldi	r18, 0xFF	; 255
    8218:	42 1a       	sub	r4, r18
    821a:	52 0a       	sbc	r5, r18
    821c:	20 e0       	ldi	r18, 0x00	; 0
    821e:	30 e0       	ldi	r19, 0x00	; 0
    8220:	40 e2       	ldi	r20, 0x20	; 32
    8222:	51 e4       	ldi	r21, 0x41	; 65
    8224:	0e 94 23 e9 	call	0x1d246	; 0x1d246 <__gesf2>
    8228:	87 fd       	sbrc	r24, 7
    822a:	09 c0       	rjmp	.+18     	; 0x823e <p_etoa+0x170>
    822c:	20 e0       	ldi	r18, 0x00	; 0
    822e:	30 e0       	ldi	r19, 0x00	; 0
    8230:	40 e2       	ldi	r20, 0x20	; 32
    8232:	51 e4       	ldi	r21, 0x41	; 65
    8234:	c5 01       	movw	r24, r10
    8236:	b4 01       	movw	r22, r8
    8238:	0e 94 d8 e7 	call	0x1cfb0	; 0x1cfb0 <__divsf3>
    823c:	e9 cf       	rjmp	.-46     	; 0x8210 <p_etoa+0x142>
    823e:	0e 87       	std	Y+14, r16	; 0x0e
    8240:	1f 87       	std	Y+15, r17	; 0x0f
    8242:	85 e6       	ldi	r24, 0x65	; 101
    8244:	89 83       	std	Y+1, r24	; 0x01
    8246:	8e 85       	ldd	r24, Y+14	; 0x0e
    8248:	9f 85       	ldd	r25, Y+15	; 0x0f
    824a:	97 ff       	sbrs	r25, 7
    824c:	08 c0       	rjmp	.+16     	; 0x825e <p_etoa+0x190>
    824e:	91 95       	neg	r25
    8250:	81 95       	neg	r24
    8252:	91 09       	sbc	r25, r1
    8254:	9f 87       	std	Y+15, r25	; 0x0f
    8256:	8e 87       	std	Y+14, r24	; 0x0e
    8258:	8d e2       	ldi	r24, 0x2D	; 45
    825a:	90 e0       	ldi	r25, 0x00	; 0
    825c:	02 c0       	rjmp	.+4      	; 0x8262 <p_etoa+0x194>
    825e:	8b e2       	ldi	r24, 0x2B	; 43
    8260:	90 e0       	ldi	r25, 0x00	; 0
    8262:	6c 01       	movw	r12, r24
    8264:	82 e0       	ldi	r24, 0x02	; 2
    8266:	e8 2e       	mov	r14, r24
    8268:	f1 2c       	mov	r15, r1
    826a:	8e 01       	movw	r16, r28
    826c:	02 5f       	subi	r16, 0xF2	; 242
    826e:	1f 4f       	sbci	r17, 0xFF	; 255
    8270:	2a e0       	ldi	r18, 0x0A	; 10
    8272:	30 e0       	ldi	r19, 0x00	; 0
    8274:	42 e0       	ldi	r20, 0x02	; 2
    8276:	50 e0       	ldi	r21, 0x00	; 0
    8278:	65 e0       	ldi	r22, 0x05	; 5
    827a:	70 e0       	ldi	r23, 0x00	; 0
    827c:	ce 01       	movw	r24, r28
    827e:	02 96       	adiw	r24, 0x02	; 2
    8280:	26 dd       	rcall	.-1460   	; 0x7cce <bin2num>
    8282:	9c 01       	movw	r18, r24
    8284:	93 2d       	mov	r25, r3
    8286:	98 72       	andi	r25, 0x28	; 40
    8288:	90 32       	cpi	r25, 0x20	; 32
    828a:	71 f0       	breq	.+28     	; 0x82a8 <p_etoa+0x1da>
    828c:	c5 01       	movw	r24, r10
    828e:	b4 01       	movw	r22, r8
    8290:	0e 94 40 e8 	call	0x1d080	; 0x1d080 <__fixsfsi>
    8294:	6b 01       	movw	r12, r22
    8296:	7c 01       	movw	r14, r24
    8298:	60 e3       	ldi	r22, 0x30	; 48
    829a:	6c 0d       	add	r22, r12
    829c:	ce 01       	movw	r24, r28
    829e:	08 96       	adiw	r24, 0x08	; 8
    82a0:	9f dd       	rcall	.-1218   	; 0x7de0 <pch>
    82a2:	21 10       	cpse	r2, r1
    82a4:	20 c0       	rjmp	.+64     	; 0x82e6 <p_etoa+0x218>
    82a6:	63 c0       	rjmp	.+198    	; 0x836e <p_etoa+0x2a0>
    82a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    82aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    82ac:	0a 89       	ldd	r16, Y+18	; 0x12
    82ae:	1b 89       	ldd	r17, Y+19	; 0x13
    82b0:	08 1b       	sub	r16, r24
    82b2:	19 0b       	sbc	r17, r25
    82b4:	22 20       	and	r2, r2
    82b6:	41 f0       	breq	.+16     	; 0x82c8 <p_etoa+0x1fa>
    82b8:	61 14       	cp	r6, r1
    82ba:	71 04       	cpc	r7, r1
    82bc:	29 f0       	breq	.+10     	; 0x82c8 <p_etoa+0x1fa>
    82be:	06 19       	sub	r16, r6
    82c0:	17 09       	sbc	r17, r7
    82c2:	06 50       	subi	r16, 0x06	; 6
    82c4:	11 09       	sbc	r17, r1
    82c6:	02 c0       	rjmp	.+4      	; 0x82cc <p_etoa+0x1fe>
    82c8:	05 50       	subi	r16, 0x05	; 5
    82ca:	11 09       	sbc	r17, r1
    82cc:	24 30       	cpi	r18, 0x04	; 4
    82ce:	31 05       	cpc	r19, r1
    82d0:	14 f0       	brlt	.+4      	; 0x82d6 <p_etoa+0x208>
    82d2:	01 50       	subi	r16, 0x01	; 1
    82d4:	11 09       	sbc	r17, r1
    82d6:	10 16       	cp	r1, r16
    82d8:	11 06       	cpc	r1, r17
    82da:	c4 f6       	brge	.-80     	; 0x828c <p_etoa+0x1be>
    82dc:	60 e3       	ldi	r22, 0x30	; 48
    82de:	ce 01       	movw	r24, r28
    82e0:	08 96       	adiw	r24, 0x08	; 8
    82e2:	7e dd       	rcall	.-1284   	; 0x7de0 <pch>
    82e4:	f6 cf       	rjmp	.-20     	; 0x82d2 <p_etoa+0x204>
    82e6:	61 14       	cp	r6, r1
    82e8:	71 04       	cpc	r7, r1
    82ea:	09 f4       	brne	.+2      	; 0x82ee <p_etoa+0x220>
    82ec:	40 c0       	rjmp	.+128    	; 0x836e <p_etoa+0x2a0>
    82ee:	b6 01       	movw	r22, r12
    82f0:	dd 0c       	add	r13, r13
    82f2:	88 0b       	sbc	r24, r24
    82f4:	99 0b       	sbc	r25, r25
    82f6:	0e 94 73 e8 	call	0x1d0e6	; 0x1d0e6 <__floatsisf>
    82fa:	9b 01       	movw	r18, r22
    82fc:	ac 01       	movw	r20, r24
    82fe:	c5 01       	movw	r24, r10
    8300:	b4 01       	movw	r22, r8
    8302:	0e 94 6f e7 	call	0x1cede	; 0x1cede <__subsf3>
    8306:	20 e0       	ldi	r18, 0x00	; 0
    8308:	30 e0       	ldi	r19, 0x00	; 0
    830a:	40 e2       	ldi	r20, 0x20	; 32
    830c:	51 e4       	ldi	r21, 0x41	; 65
    830e:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <__mulsf3>
    8312:	4b 01       	movw	r8, r22
    8314:	5c 01       	movw	r10, r24
    8316:	6e e2       	ldi	r22, 0x2E	; 46
    8318:	ce 01       	movw	r24, r28
    831a:	08 96       	adiw	r24, 0x08	; 8
    831c:	61 dd       	rcall	.-1342   	; 0x7de0 <pch>
    831e:	c5 01       	movw	r24, r10
    8320:	b4 01       	movw	r22, r8
    8322:	0e 94 40 e8 	call	0x1d080	; 0x1d080 <__fixsfsi>
    8326:	6b 01       	movw	r12, r22
    8328:	7c 01       	movw	r14, r24
    832a:	07 2e       	mov	r0, r23
    832c:	00 0c       	add	r0, r0
    832e:	88 0b       	sbc	r24, r24
    8330:	99 0b       	sbc	r25, r25
    8332:	0e 94 73 e8 	call	0x1d0e6	; 0x1d0e6 <__floatsisf>
    8336:	9b 01       	movw	r18, r22
    8338:	ac 01       	movw	r20, r24
    833a:	c5 01       	movw	r24, r10
    833c:	b4 01       	movw	r22, r8
    833e:	0e 94 6f e7 	call	0x1cede	; 0x1cede <__subsf3>
    8342:	4b 01       	movw	r8, r22
    8344:	5c 01       	movw	r10, r24
    8346:	b6 01       	movw	r22, r12
    8348:	60 5d       	subi	r22, 0xD0	; 208
    834a:	7f 4f       	sbci	r23, 0xFF	; 255
    834c:	ce 01       	movw	r24, r28
    834e:	08 96       	adiw	r24, 0x08	; 8
    8350:	47 dd       	rcall	.-1394   	; 0x7de0 <pch>
    8352:	20 e0       	ldi	r18, 0x00	; 0
    8354:	30 e0       	ldi	r19, 0x00	; 0
    8356:	40 e2       	ldi	r20, 0x20	; 32
    8358:	51 e4       	ldi	r21, 0x41	; 65
    835a:	c5 01       	movw	r24, r10
    835c:	b4 01       	movw	r22, r8
    835e:	0e 94 27 e9 	call	0x1d24e	; 0x1d24e <__mulsf3>
    8362:	4b 01       	movw	r8, r22
    8364:	5c 01       	movw	r10, r24
    8366:	31 e0       	ldi	r19, 0x01	; 1
    8368:	63 1a       	sub	r6, r19
    836a:	71 08       	sbc	r7, r1
    836c:	c1 f6       	brne	.-80     	; 0x831e <p_etoa+0x250>
    836e:	8e 01       	movw	r16, r28
    8370:	0f 5f       	subi	r16, 0xFF	; 255
    8372:	1f 4f       	sbci	r17, 0xFF	; 255
    8374:	f8 01       	movw	r30, r16
    8376:	61 91       	ld	r22, Z+
    8378:	8f 01       	movw	r16, r30
    837a:	ce 01       	movw	r24, r28
    837c:	08 96       	adiw	r24, 0x08	; 8
    837e:	66 23       	and	r22, r22
    8380:	11 f0       	breq	.+4      	; 0x8386 <p_etoa+0x2b8>
    8382:	2e dd       	rcall	.-1444   	; 0x7de0 <pch>
    8384:	f7 cf       	rjmp	.-18     	; 0x8374 <p_etoa+0x2a6>
    8386:	2c dd       	rcall	.-1448   	; 0x7de0 <pch>
    8388:	e8 89       	ldd	r30, Y+16	; 0x10
    838a:	f9 89       	ldd	r31, Y+17	; 0x11
    838c:	01 90       	ld	r0, Z+
    838e:	00 20       	and	r0, r0
    8390:	e9 f7       	brne	.-6      	; 0x838c <p_etoa+0x2be>
    8392:	cf 01       	movw	r24, r30
    8394:	01 97       	sbiw	r24, 0x01	; 1
    8396:	28 89       	ldd	r18, Y+16	; 0x10
    8398:	39 89       	ldd	r19, Y+17	; 0x11
    839a:	82 1b       	sub	r24, r18
    839c:	93 0b       	sbc	r25, r19
    839e:	63 96       	adiw	r28, 0x13	; 19
    83a0:	e2 e1       	ldi	r30, 0x12	; 18
    83a2:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

000083a6 <_puts_pad>:
    83a6:	a0 e0       	ldi	r26, 0x00	; 0
    83a8:	b0 e0       	ldi	r27, 0x00	; 0
    83aa:	e9 ed       	ldi	r30, 0xD9	; 217
    83ac:	f1 e4       	ldi	r31, 0x41	; 65
    83ae:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
    83b2:	6c 01       	movw	r12, r24
    83b4:	4b 01       	movw	r8, r22
    83b6:	79 01       	movw	r14, r18
    83b8:	24 17       	cp	r18, r20
    83ba:	35 07       	cpc	r19, r21
    83bc:	24 f4       	brge	.+8      	; 0x83c6 <_puts_pad+0x20>
    83be:	ea 01       	movw	r28, r20
    83c0:	c2 1b       	sub	r28, r18
    83c2:	d3 0b       	sbc	r29, r19
    83c4:	02 c0       	rjmp	.+4      	; 0x83ca <_puts_pad+0x24>
    83c6:	c0 e0       	ldi	r28, 0x00	; 0
    83c8:	d0 e0       	ldi	r29, 0x00	; 0
    83ca:	01 15       	cp	r16, r1
    83cc:	11 05       	cpc	r17, r1
    83ce:	49 f4       	brne	.+18     	; 0x83e2 <_puts_pad+0x3c>
    83d0:	21 97       	sbiw	r28, 0x01	; 1
    83d2:	38 f0       	brcs	.+14     	; 0x83e2 <_puts_pad+0x3c>
    83d4:	d6 01       	movw	r26, r12
    83d6:	ed 91       	ld	r30, X+
    83d8:	fc 91       	ld	r31, X
    83da:	60 e2       	ldi	r22, 0x20	; 32
    83dc:	c6 01       	movw	r24, r12
    83de:	09 95       	icall
    83e0:	f7 cf       	rjmp	.-18     	; 0x83d0 <_puts_pad+0x2a>
    83e2:	54 01       	movw	r10, r8
    83e4:	f5 01       	movw	r30, r10
    83e6:	61 91       	ld	r22, Z+
    83e8:	5f 01       	movw	r10, r30
    83ea:	66 23       	and	r22, r22
    83ec:	61 f0       	breq	.+24     	; 0x8406 <_puts_pad+0x60>
    83ee:	e1 14       	cp	r14, r1
    83f0:	f1 04       	cpc	r15, r1
    83f2:	49 f0       	breq	.+18     	; 0x8406 <_puts_pad+0x60>
    83f4:	d6 01       	movw	r26, r12
    83f6:	ed 91       	ld	r30, X+
    83f8:	fc 91       	ld	r31, X
    83fa:	c6 01       	movw	r24, r12
    83fc:	09 95       	icall
    83fe:	b1 e0       	ldi	r27, 0x01	; 1
    8400:	eb 1a       	sub	r14, r27
    8402:	f1 08       	sbc	r15, r1
    8404:	ef cf       	rjmp	.-34     	; 0x83e4 <_puts_pad+0x3e>
    8406:	01 15       	cp	r16, r1
    8408:	11 05       	cpc	r17, r1
    840a:	51 f0       	breq	.+20     	; 0x8420 <_puts_pad+0x7a>
    840c:	20 97       	sbiw	r28, 0x00	; 0
    840e:	41 f0       	breq	.+16     	; 0x8420 <_puts_pad+0x7a>
    8410:	d6 01       	movw	r26, r12
    8412:	ed 91       	ld	r30, X+
    8414:	fc 91       	ld	r31, X
    8416:	60 e2       	ldi	r22, 0x20	; 32
    8418:	c6 01       	movw	r24, r12
    841a:	09 95       	icall
    841c:	21 97       	sbiw	r28, 0x01	; 1
    841e:	f6 cf       	rjmp	.-20     	; 0x840c <_puts_pad+0x66>
    8420:	cd b7       	in	r28, 0x3d	; 61
    8422:	de b7       	in	r29, 0x3e	; 62
    8424:	ec e0       	ldi	r30, 0x0C	; 12
    8426:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

0000842a <_puts_pad_X>:
    842a:	2f 92       	push	r2
    842c:	3f 92       	push	r3
    842e:	4f 92       	push	r4
    8430:	6f 92       	push	r6
    8432:	7f 92       	push	r7
    8434:	8f 92       	push	r8
    8436:	cf 92       	push	r12
    8438:	df 92       	push	r13
    843a:	ef 92       	push	r14
    843c:	ff 92       	push	r15
    843e:	0f 93       	push	r16
    8440:	1f 93       	push	r17
    8442:	cf 93       	push	r28
    8444:	df 93       	push	r29
    8446:	6c 01       	movw	r12, r24
    8448:	3a 01       	movw	r6, r20
    844a:	86 2e       	mov	r8, r22
    844c:	02 17       	cp	r16, r18
    844e:	13 07       	cpc	r17, r19
    8450:	24 f4       	brge	.+8      	; 0x845a <_puts_pad_X+0x30>
    8452:	e9 01       	movw	r28, r18
    8454:	c0 1b       	sub	r28, r16
    8456:	d1 0b       	sbc	r29, r17
    8458:	02 c0       	rjmp	.+4      	; 0x845e <_puts_pad_X+0x34>
    845a:	c0 e0       	ldi	r28, 0x00	; 0
    845c:	d0 e0       	ldi	r29, 0x00	; 0
    845e:	e1 14       	cp	r14, r1
    8460:	f1 04       	cpc	r15, r1
    8462:	49 f4       	brne	.+18     	; 0x8476 <_puts_pad_X+0x4c>
    8464:	21 97       	sbiw	r28, 0x01	; 1
    8466:	38 f0       	brcs	.+14     	; 0x8476 <_puts_pad_X+0x4c>
    8468:	d6 01       	movw	r26, r12
    846a:	ed 91       	ld	r30, X+
    846c:	fc 91       	ld	r31, X
    846e:	60 e2       	ldi	r22, 0x20	; 32
    8470:	c6 01       	movw	r24, r12
    8472:	09 95       	icall
    8474:	f7 cf       	rjmp	.-18     	; 0x8464 <_puts_pad_X+0x3a>
    8476:	13 01       	movw	r2, r6
    8478:	48 2c       	mov	r4, r8
    847a:	20 0e       	add	r2, r16
    847c:	31 1e       	adc	r3, r17
    847e:	41 1c       	adc	r4, r1
    8480:	17 fd       	sbrc	r17, 7
    8482:	4a 94       	dec	r4
    8484:	f3 01       	movw	r30, r6
    8486:	58 2d       	mov	r21, r8
    8488:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    848c:	66 23       	and	r22, r22
    848e:	71 f0       	breq	.+28     	; 0x84ac <_puts_pad_X+0x82>
    8490:	62 14       	cp	r6, r2
    8492:	73 04       	cpc	r7, r3
    8494:	84 04       	cpc	r8, r4
    8496:	51 f0       	breq	.+20     	; 0x84ac <_puts_pad_X+0x82>
    8498:	d6 01       	movw	r26, r12
    849a:	ed 91       	ld	r30, X+
    849c:	fc 91       	ld	r31, X
    849e:	c6 01       	movw	r24, r12
    84a0:	09 95       	icall
    84a2:	bf ef       	ldi	r27, 0xFF	; 255
    84a4:	6b 1a       	sub	r6, r27
    84a6:	7b 0a       	sbc	r7, r27
    84a8:	8b 0a       	sbc	r8, r27
    84aa:	ec cf       	rjmp	.-40     	; 0x8484 <_puts_pad_X+0x5a>
    84ac:	ef 28       	or	r14, r15
    84ae:	51 f0       	breq	.+20     	; 0x84c4 <_puts_pad_X+0x9a>
    84b0:	20 97       	sbiw	r28, 0x00	; 0
    84b2:	41 f0       	breq	.+16     	; 0x84c4 <_puts_pad_X+0x9a>
    84b4:	d6 01       	movw	r26, r12
    84b6:	ed 91       	ld	r30, X+
    84b8:	fc 91       	ld	r31, X
    84ba:	60 e2       	ldi	r22, 0x20	; 32
    84bc:	c6 01       	movw	r24, r12
    84be:	09 95       	icall
    84c0:	21 97       	sbiw	r28, 0x01	; 1
    84c2:	f6 cf       	rjmp	.-20     	; 0x84b0 <_puts_pad_X+0x86>
    84c4:	df 91       	pop	r29
    84c6:	cf 91       	pop	r28
    84c8:	1f 91       	pop	r17
    84ca:	0f 91       	pop	r16
    84cc:	ff 90       	pop	r15
    84ce:	ef 90       	pop	r14
    84d0:	df 90       	pop	r13
    84d2:	cf 90       	pop	r12
    84d4:	8f 90       	pop	r8
    84d6:	7f 90       	pop	r7
    84d8:	6f 90       	pop	r6
    84da:	4f 90       	pop	r4
    84dc:	3f 90       	pop	r3
    84de:	2f 90       	pop	r2
    84e0:	08 95       	ret

000084e2 <strlen_X>:
    84e2:	cf 92       	push	r12
    84e4:	df 92       	push	r13
    84e6:	ef 92       	push	r14
    84e8:	9b 01       	movw	r18, r22
    84ea:	48 2f       	mov	r20, r24
    84ec:	80 e0       	ldi	r24, 0x00	; 0
    84ee:	90 e0       	ldi	r25, 0x00	; 0
    84f0:	2f 5f       	subi	r18, 0xFF	; 255
    84f2:	3f 4f       	sbci	r19, 0xFF	; 255
    84f4:	4f 4f       	sbci	r20, 0xFF	; 255
    84f6:	69 01       	movw	r12, r18
    84f8:	e4 2e       	mov	r14, r20
    84fa:	51 e0       	ldi	r21, 0x01	; 1
    84fc:	c5 1a       	sub	r12, r21
    84fe:	d1 08       	sbc	r13, r1
    8500:	e1 08       	sbc	r14, r1
    8502:	f6 01       	movw	r30, r12
    8504:	5e 2d       	mov	r21, r14
    8506:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    850a:	66 23       	and	r22, r22
    850c:	11 f0       	breq	.+4      	; 0x8512 <strlen_X+0x30>
    850e:	01 96       	adiw	r24, 0x01	; 1
    8510:	ef cf       	rjmp	.-34     	; 0x84f0 <strlen_X+0xe>
    8512:	ef 90       	pop	r14
    8514:	df 90       	pop	r13
    8516:	cf 90       	pop	r12
    8518:	08 95       	ret

0000851a <_printf_fn>:
    851a:	ae e6       	ldi	r26, 0x6E	; 110
    851c:	b0 e0       	ldi	r27, 0x00	; 0
    851e:	e3 e9       	ldi	r30, 0x93	; 147
    8520:	f2 e4       	ldi	r31, 0x42	; 66
    8522:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    8526:	a5 96       	adiw	r28, 0x25	; 37
    8528:	9f af       	std	Y+63, r25	; 0x3f
    852a:	8e af       	std	Y+62, r24	; 0x3e
    852c:	a5 97       	sbiw	r28, 0x25	; 37
    852e:	6a 01       	movw	r12, r20
    8530:	e6 2e       	mov	r14, r22
    8532:	19 01       	movw	r2, r18
    8534:	a9 96       	adiw	r28, 0x29	; 41
    8536:	1c ae       	std	Y+60, r1	; 0x3c
    8538:	1d ae       	std	Y+61, r1	; 0x3d
    853a:	1e ae       	std	Y+62, r1	; 0x3e
    853c:	1f ae       	std	Y+63, r1	; 0x3f
    853e:	a9 97       	sbiw	r28, 0x29	; 41
    8540:	8a e1       	ldi	r24, 0x1A	; 26
    8542:	94 e0       	ldi	r25, 0x04	; 4
    8544:	9c 01       	movw	r18, r24
    8546:	40 e8       	ldi	r20, 0x80	; 128
    8548:	ae 96       	adiw	r28, 0x2e	; 46
    854a:	2d af       	std	Y+61, r18	; 0x3d
    854c:	3e af       	std	Y+62, r19	; 0x3e
    854e:	4f af       	std	Y+63, r20	; 0x3f
    8550:	ae 97       	sbiw	r28, 0x2e	; 46
    8552:	ae 01       	movw	r20, r28
    8554:	4f 5a       	subi	r20, 0xAF	; 175
    8556:	5f 4f       	sbci	r21, 0xFF	; 255
    8558:	67 96       	adiw	r28, 0x17	; 23
    855a:	5f af       	std	Y+63, r21	; 0x3f
    855c:	4e af       	std	Y+62, r20	; 0x3e
    855e:	67 97       	sbiw	r28, 0x17	; 23
    8560:	ce 01       	movw	r24, r28
    8562:	8d 5b       	subi	r24, 0xBD	; 189
    8564:	9f 4f       	sbci	r25, 0xFF	; 255
    8566:	69 96       	adiw	r28, 0x19	; 25
    8568:	9f af       	std	Y+63, r25	; 0x3f
    856a:	8e af       	std	Y+62, r24	; 0x3e
    856c:	69 97       	sbiw	r28, 0x19	; 25
    856e:	de 01       	movw	r26, r28
    8570:	a5 5b       	subi	r26, 0xB5	; 181
    8572:	bf 4f       	sbci	r27, 0xFF	; 255
    8574:	6b 96       	adiw	r28, 0x1b	; 27
    8576:	bf af       	std	Y+63, r27	; 0x3f
    8578:	ae af       	std	Y+62, r26	; 0x3e
    857a:	6b 97       	sbiw	r28, 0x1b	; 27
    857c:	fe 01       	movw	r30, r28
    857e:	ed 5a       	subi	r30, 0xAD	; 173
    8580:	ff 4f       	sbci	r31, 0xFF	; 255
    8582:	6d 96       	adiw	r28, 0x1d	; 29
    8584:	ff af       	std	Y+63, r31	; 0x3f
    8586:	ee af       	std	Y+62, r30	; 0x3e
    8588:	6d 97       	sbiw	r28, 0x1d	; 29
    858a:	f6 01       	movw	r30, r12
    858c:	5e 2d       	mov	r21, r14
    858e:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    8592:	66 23       	and	r22, r22
    8594:	09 f4       	brne	.+2      	; 0x8598 <_printf_fn+0x7e>
    8596:	13 c4       	rjmp	.+2086   	; 0x8dbe <_printf_fn+0x8a4>
    8598:	ae 2d       	mov	r26, r14
    859a:	c6 01       	movw	r24, r12
    859c:	01 96       	adiw	r24, 0x01	; 1
    859e:	a1 1d       	adc	r26, r1
    85a0:	3c 01       	movw	r6, r24
    85a2:	8a 2e       	mov	r8, r26
    85a4:	65 32       	cpi	r22, 0x25	; 37
    85a6:	51 f0       	breq	.+20     	; 0x85bc <_printf_fn+0xa2>
    85a8:	a5 96       	adiw	r28, 0x25	; 37
    85aa:	ae ad       	ldd	r26, Y+62	; 0x3e
    85ac:	bf ad       	ldd	r27, Y+63	; 0x3f
    85ae:	a5 97       	sbiw	r28, 0x25	; 37
    85b0:	ed 91       	ld	r30, X+
    85b2:	fc 91       	ld	r31, X
    85b4:	11 97       	sbiw	r26, 0x01	; 1
    85b6:	cd 01       	movw	r24, r26
    85b8:	09 95       	icall
    85ba:	d5 c3       	rjmp	.+1962   	; 0x8d66 <_printf_fn+0x84c>
    85bc:	91 2c       	mov	r9, r1
    85be:	f3 01       	movw	r30, r6
    85c0:	58 2d       	mov	r21, r8
    85c2:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    85c6:	63 32       	cpi	r22, 0x23	; 35
    85c8:	19 f4       	brne	.+6      	; 0x85d0 <_printf_fn+0xb6>
    85ca:	68 94       	set
    85cc:	97 f8       	bld	r9, 7
    85ce:	04 c0       	rjmp	.+8      	; 0x85d8 <_printf_fn+0xbe>
    85d0:	6b 32       	cpi	r22, 0x2B	; 43
    85d2:	39 f4       	brne	.+14     	; 0x85e2 <_printf_fn+0xc8>
    85d4:	68 94       	set
    85d6:	92 f8       	bld	r9, 2
    85d8:	bf ef       	ldi	r27, 0xFF	; 255
    85da:	6b 1a       	sub	r6, r27
    85dc:	7b 0a       	sbc	r7, r27
    85de:	8b 0a       	sbc	r8, r27
    85e0:	ee cf       	rjmp	.-36     	; 0x85be <_printf_fn+0xa4>
    85e2:	6d 32       	cpi	r22, 0x2D	; 45
    85e4:	a9 f4       	brne	.+42     	; 0x8610 <_printf_fn+0xf6>
    85e6:	93 fc       	sbrc	r9, 3
    85e8:	05 c0       	rjmp	.+10     	; 0x85f4 <_printf_fn+0xda>
    85ea:	6d 32       	cpi	r22, 0x2D	; 45
    85ec:	19 f4       	brne	.+6      	; 0x85f4 <_printf_fn+0xda>
    85ee:	68 94       	set
    85f0:	93 f8       	bld	r9, 3
    85f2:	f2 cf       	rjmp	.-28     	; 0x85d8 <_printf_fn+0xbe>
    85f4:	94 fc       	sbrc	r9, 4
    85f6:	05 c0       	rjmp	.+10     	; 0x8602 <_printf_fn+0xe8>
    85f8:	60 32       	cpi	r22, 0x20	; 32
    85fa:	19 f4       	brne	.+6      	; 0x8602 <_printf_fn+0xe8>
    85fc:	68 94       	set
    85fe:	94 f8       	bld	r9, 4
    8600:	eb cf       	rjmp	.-42     	; 0x85d8 <_printf_fn+0xbe>
    8602:	95 fc       	sbrc	r9, 5
    8604:	e9 cf       	rjmp	.-46     	; 0x85d8 <_printf_fn+0xbe>
    8606:	60 33       	cpi	r22, 0x30	; 48
    8608:	39 f7       	brne	.-50     	; 0x85d8 <_printf_fn+0xbe>
    860a:	68 94       	set
    860c:	95 f8       	bld	r9, 5
    860e:	e4 cf       	rjmp	.-56     	; 0x85d8 <_printf_fn+0xbe>
    8610:	86 2f       	mov	r24, r22
    8612:	8f 7e       	andi	r24, 0xEF	; 239
    8614:	80 32       	cpi	r24, 0x20	; 32
    8616:	39 f3       	breq	.-50     	; 0x85e6 <_printf_fn+0xcc>
    8618:	70 e0       	ldi	r23, 0x00	; 0
    861a:	60 53       	subi	r22, 0x30	; 48
    861c:	71 09       	sbc	r23, r1
    861e:	6f 96       	adiw	r28, 0x1f	; 31
    8620:	1f ae       	std	Y+63, r1	; 0x3f
    8622:	1e ae       	std	Y+62, r1	; 0x3e
    8624:	6f 97       	sbiw	r28, 0x1f	; 31
    8626:	6a 30       	cpi	r22, 0x0A	; 10
    8628:	71 05       	cpc	r23, r1
    862a:	10 f5       	brcc	.+68     	; 0x8670 <_printf_fn+0x156>
    862c:	2a e0       	ldi	r18, 0x0A	; 10
    862e:	f3 01       	movw	r30, r6
    8630:	58 2d       	mov	r21, r8
    8632:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    8636:	70 e0       	ldi	r23, 0x00	; 0
    8638:	cb 01       	movw	r24, r22
    863a:	c0 97       	sbiw	r24, 0x30	; 48
    863c:	0a 97       	sbiw	r24, 0x0a	; 10
    863e:	b0 f4       	brcc	.+44     	; 0x866c <_printf_fn+0x152>
    8640:	ef ef       	ldi	r30, 0xFF	; 255
    8642:	6e 1a       	sub	r6, r30
    8644:	7e 0a       	sbc	r7, r30
    8646:	8e 0a       	sbc	r8, r30
    8648:	6f 96       	adiw	r28, 0x1f	; 31
    864a:	4e ad       	ldd	r20, Y+62	; 0x3e
    864c:	5f ad       	ldd	r21, Y+63	; 0x3f
    864e:	6f 97       	sbiw	r28, 0x1f	; 31
    8650:	24 9f       	mul	r18, r20
    8652:	c0 01       	movw	r24, r0
    8654:	25 9f       	mul	r18, r21
    8656:	90 0d       	add	r25, r0
    8658:	11 24       	eor	r1, r1
    865a:	68 0f       	add	r22, r24
    865c:	79 1f       	adc	r23, r25
    865e:	cb 01       	movw	r24, r22
    8660:	c0 97       	sbiw	r24, 0x30	; 48
    8662:	6f 96       	adiw	r28, 0x1f	; 31
    8664:	9f af       	std	Y+63, r25	; 0x3f
    8666:	8e af       	std	Y+62, r24	; 0x3e
    8668:	6f 97       	sbiw	r28, 0x1f	; 31
    866a:	e1 cf       	rjmp	.-62     	; 0x862e <_printf_fn+0x114>
    866c:	68 94       	set
    866e:	90 f8       	bld	r9, 0
    8670:	f3 01       	movw	r30, r6
    8672:	58 2d       	mov	r21, r8
    8674:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    8678:	6e 32       	cpi	r22, 0x2E	; 46
    867a:	61 f5       	brne	.+88     	; 0x86d4 <_printf_fn+0x1ba>
    867c:	9f ef       	ldi	r25, 0xFF	; 255
    867e:	69 1a       	sub	r6, r25
    8680:	79 0a       	sbc	r7, r25
    8682:	89 0a       	sbc	r8, r25
    8684:	a1 96       	adiw	r28, 0x21	; 33
    8686:	1f ae       	std	Y+63, r1	; 0x3f
    8688:	1e ae       	std	Y+62, r1	; 0x3e
    868a:	a1 97       	sbiw	r28, 0x21	; 33
    868c:	2a e0       	ldi	r18, 0x0A	; 10
    868e:	f3 01       	movw	r30, r6
    8690:	58 2d       	mov	r21, r8
    8692:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    8696:	70 e0       	ldi	r23, 0x00	; 0
    8698:	cb 01       	movw	r24, r22
    869a:	c0 97       	sbiw	r24, 0x30	; 48
    869c:	0a 97       	sbiw	r24, 0x0a	; 10
    869e:	b8 f4       	brcc	.+46     	; 0x86ce <_printf_fn+0x1b4>
    86a0:	af ef       	ldi	r26, 0xFF	; 255
    86a2:	6a 1a       	sub	r6, r26
    86a4:	7a 0a       	sbc	r7, r26
    86a6:	8a 0a       	sbc	r8, r26
    86a8:	a1 96       	adiw	r28, 0x21	; 33
    86aa:	ee ad       	ldd	r30, Y+62	; 0x3e
    86ac:	ff ad       	ldd	r31, Y+63	; 0x3f
    86ae:	a1 97       	sbiw	r28, 0x21	; 33
    86b0:	2e 9f       	mul	r18, r30
    86b2:	c0 01       	movw	r24, r0
    86b4:	2f 9f       	mul	r18, r31
    86b6:	90 0d       	add	r25, r0
    86b8:	11 24       	eor	r1, r1
    86ba:	68 0f       	add	r22, r24
    86bc:	79 1f       	adc	r23, r25
    86be:	ab 01       	movw	r20, r22
    86c0:	40 53       	subi	r20, 0x30	; 48
    86c2:	51 09       	sbc	r21, r1
    86c4:	a1 96       	adiw	r28, 0x21	; 33
    86c6:	5f af       	std	Y+63, r21	; 0x3f
    86c8:	4e af       	std	Y+62, r20	; 0x3e
    86ca:	a1 97       	sbiw	r28, 0x21	; 33
    86cc:	e0 cf       	rjmp	.-64     	; 0x868e <_printf_fn+0x174>
    86ce:	68 94       	set
    86d0:	91 f8       	bld	r9, 1
    86d2:	04 c0       	rjmp	.+8      	; 0x86dc <_printf_fn+0x1c2>
    86d4:	a1 96       	adiw	r28, 0x21	; 33
    86d6:	1f ae       	std	Y+63, r1	; 0x3f
    86d8:	1e ae       	std	Y+62, r1	; 0x3e
    86da:	a1 97       	sbiw	r28, 0x21	; 33
    86dc:	f3 01       	movw	r30, r6
    86de:	58 2d       	mov	r21, r8
    86e0:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    86e4:	69 34       	cpi	r22, 0x49	; 73
    86e6:	91 f5       	brne	.+100    	; 0x874c <_printf_fn+0x232>
    86e8:	5f ef       	ldi	r21, 0xFF	; 255
    86ea:	65 1a       	sub	r6, r21
    86ec:	75 0a       	sbc	r7, r21
    86ee:	85 0a       	sbc	r8, r21
    86f0:	41 2c       	mov	r4, r1
    86f2:	51 2c       	mov	r5, r1
    86f4:	2a e0       	ldi	r18, 0x0A	; 10
    86f6:	f3 01       	movw	r30, r6
    86f8:	58 2d       	mov	r21, r8
    86fa:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    86fe:	70 e0       	ldi	r23, 0x00	; 0
    8700:	cb 01       	movw	r24, r22
    8702:	c0 97       	sbiw	r24, 0x30	; 48
    8704:	0a 97       	sbiw	r24, 0x0a	; 10
    8706:	80 f4       	brcc	.+32     	; 0x8728 <_printf_fn+0x20e>
    8708:	8f ef       	ldi	r24, 0xFF	; 255
    870a:	68 1a       	sub	r6, r24
    870c:	78 0a       	sbc	r7, r24
    870e:	88 0a       	sbc	r8, r24
    8710:	24 9d       	mul	r18, r4
    8712:	c0 01       	movw	r24, r0
    8714:	25 9d       	mul	r18, r5
    8716:	90 0d       	add	r25, r0
    8718:	11 24       	eor	r1, r1
    871a:	68 0f       	add	r22, r24
    871c:	79 1f       	adc	r23, r25
    871e:	2b 01       	movw	r4, r22
    8720:	90 e3       	ldi	r25, 0x30	; 48
    8722:	49 1a       	sub	r4, r25
    8724:	51 08       	sbc	r5, r1
    8726:	e7 cf       	rjmp	.-50     	; 0x86f6 <_printf_fn+0x1dc>
    8728:	41 14       	cp	r4, r1
    872a:	51 04       	cpc	r5, r1
    872c:	09 f4       	brne	.+2      	; 0x8730 <_printf_fn+0x216>
    872e:	40 c0       	rjmp	.+128    	; 0x87b0 <_printf_fn+0x296>
    8730:	c2 01       	movw	r24, r4
    8732:	87 70       	andi	r24, 0x07	; 7
    8734:	99 27       	eor	r25, r25
    8736:	89 2b       	or	r24, r25
    8738:	c9 f5       	brne	.+114    	; 0x87ac <_printf_fn+0x292>
    873a:	63 e0       	ldi	r22, 0x03	; 3
    873c:	55 94       	asr	r5
    873e:	47 94       	ror	r4
    8740:	6a 95       	dec	r22
    8742:	e1 f7       	brne	.-8      	; 0x873c <_printf_fn+0x222>
    8744:	41 14       	cp	r4, r1
    8746:	51 04       	cpc	r5, r1
    8748:	99 f1       	breq	.+102    	; 0x87b0 <_printf_fn+0x296>
    874a:	21 c0       	rjmp	.+66     	; 0x878e <_printf_fn+0x274>
    874c:	68 36       	cpi	r22, 0x68	; 104
    874e:	29 f4       	brne	.+10     	; 0x875a <_printf_fn+0x240>
    8750:	af ef       	ldi	r26, 0xFF	; 255
    8752:	6a 1a       	sub	r6, r26
    8754:	7a 0a       	sbc	r7, r26
    8756:	8a 0a       	sbc	r8, r26
    8758:	09 c3       	rjmp	.+1554   	; 0x8d6c <_printf_fn+0x852>
    875a:	6c 36       	cpi	r22, 0x6C	; 108
    875c:	09 f0       	breq	.+2      	; 0x8760 <_printf_fn+0x246>
    875e:	06 c3       	rjmp	.+1548   	; 0x8d6c <_printf_fn+0x852>
    8760:	a8 2d       	mov	r26, r8
    8762:	c3 01       	movw	r24, r6
    8764:	01 96       	adiw	r24, 0x01	; 1
    8766:	a1 1d       	adc	r26, r1
    8768:	fc 01       	movw	r30, r24
    876a:	5a 2f       	mov	r21, r26
    876c:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    8770:	6c 36       	cpi	r22, 0x6C	; 108
    8772:	31 f0       	breq	.+12     	; 0x8780 <_printf_fn+0x266>
    8774:	3c 01       	movw	r6, r24
    8776:	8a 2e       	mov	r8, r26
    8778:	54 e0       	ldi	r21, 0x04	; 4
    877a:	45 2e       	mov	r4, r21
    877c:	51 2c       	mov	r5, r1
    877e:	07 c0       	rjmp	.+14     	; 0x878e <_printf_fn+0x274>
    8780:	b2 e0       	ldi	r27, 0x02	; 2
    8782:	6b 0e       	add	r6, r27
    8784:	71 1c       	adc	r7, r1
    8786:	81 1c       	adc	r8, r1
    8788:	48 e0       	ldi	r20, 0x08	; 8
    878a:	44 2e       	mov	r4, r20
    878c:	51 2c       	mov	r5, r1
    878e:	f3 01       	movw	r30, r6
    8790:	58 2d       	mov	r21, r8
    8792:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    8796:	e6 2f       	mov	r30, r22
    8798:	f0 e0       	ldi	r31, 0x00	; 0
    879a:	a3 96       	adiw	r28, 0x23	; 35
    879c:	ff af       	std	Y+63, r31	; 0x3f
    879e:	ee af       	std	Y+62, r30	; 0x3e
    87a0:	a3 97       	sbiw	r28, 0x23	; 35
    87a2:	e4 36       	cpi	r30, 0x64	; 100
    87a4:	f1 05       	cpc	r31, r1
    87a6:	09 f4       	brne	.+2      	; 0x87aa <_printf_fn+0x290>
    87a8:	e5 c2       	rjmp	.+1482   	; 0x8d74 <_printf_fn+0x85a>
    87aa:	06 c0       	rjmp	.+12     	; 0x87b8 <_printf_fn+0x29e>
    87ac:	41 2c       	mov	r4, r1
    87ae:	51 2c       	mov	r5, r1
    87b0:	a3 96       	adiw	r28, 0x23	; 35
    87b2:	1f ae       	std	Y+63, r1	; 0x3f
    87b4:	1e ae       	std	Y+62, r1	; 0x3e
    87b6:	a3 97       	sbiw	r28, 0x23	; 35
    87b8:	31 e0       	ldi	r19, 0x01	; 1
    87ba:	20 e0       	ldi	r18, 0x00	; 0
    87bc:	a3 96       	adiw	r28, 0x23	; 35
    87be:	4e ad       	ldd	r20, Y+62	; 0x3e
    87c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    87c2:	a3 97       	sbiw	r28, 0x23	; 35
    87c4:	44 34       	cpi	r20, 0x44	; 68
    87c6:	51 05       	cpc	r21, r1
    87c8:	09 f0       	breq	.+2      	; 0x87cc <_printf_fn+0x2b2>
    87ca:	30 e0       	ldi	r19, 0x00	; 0
    87cc:	83 2f       	mov	r24, r19
    87ce:	92 2f       	mov	r25, r18
    87d0:	a3 96       	adiw	r28, 0x23	; 35
    87d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    87d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    87d6:	a3 97       	sbiw	r28, 0x23	; 35
    87d8:	e2 54       	subi	r30, 0x42	; 66
    87da:	f1 09       	sbc	r31, r1
    87dc:	e7 33       	cpi	r30, 0x37	; 55
    87de:	f1 05       	cpc	r31, r1
    87e0:	08 f0       	brcs	.+2      	; 0x87e4 <_printf_fn+0x2ca>
    87e2:	57 c1       	rjmp	.+686    	; 0x8a92 <_printf_fn+0x578>
    87e4:	ea 5b       	subi	r30, 0xBA	; 186
    87e6:	ff 4f       	sbci	r31, 0xFF	; 255
    87e8:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__tablejump2__>
    87ec:	32 e0       	ldi	r19, 0x02	; 2
    87ee:	43 2e       	mov	r4, r19
    87f0:	51 2c       	mov	r5, r1
    87f2:	29 2d       	mov	r18, r9
    87f4:	28 72       	andi	r18, 0x28	; 40
    87f6:	28 32       	cpi	r18, 0x28	; 40
    87f8:	11 f4       	brne	.+4      	; 0x87fe <_printf_fn+0x2e4>
    87fa:	e8 94       	clt
    87fc:	95 f8       	bld	r9, 5
    87fe:	29 2d       	mov	r18, r9
    8800:	22 72       	andi	r18, 0x22	; 34
    8802:	22 32       	cpi	r18, 0x22	; 34
    8804:	11 f4       	brne	.+4      	; 0x880a <_printf_fn+0x2f0>
    8806:	e8 94       	clt
    8808:	95 f8       	bld	r9, 5
    880a:	29 2d       	mov	r18, r9
    880c:	21 72       	andi	r18, 0x21	; 33
    880e:	21 32       	cpi	r18, 0x21	; 33
    8810:	79 f4       	brne	.+30     	; 0x8830 <_printf_fn+0x316>
    8812:	a1 96       	adiw	r28, 0x21	; 33
    8814:	ae ad       	ldd	r26, Y+62	; 0x3e
    8816:	bf ad       	ldd	r27, Y+63	; 0x3f
    8818:	a1 97       	sbiw	r28, 0x21	; 33
    881a:	6f 96       	adiw	r28, 0x1f	; 31
    881c:	ee ad       	ldd	r30, Y+62	; 0x3e
    881e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8820:	6f 97       	sbiw	r28, 0x1f	; 31
    8822:	ae 17       	cp	r26, r30
    8824:	bf 07       	cpc	r27, r31
    8826:	24 f4       	brge	.+8      	; 0x8830 <_printf_fn+0x316>
    8828:	a1 96       	adiw	r28, 0x21	; 33
    882a:	ff af       	std	Y+63, r31	; 0x3f
    882c:	ee af       	std	Y+62, r30	; 0x3e
    882e:	a1 97       	sbiw	r28, 0x21	; 33
    8830:	29 2d       	mov	r18, r9
    8832:	23 72       	andi	r18, 0x23	; 35
    8834:	23 32       	cpi	r18, 0x23	; 35
    8836:	79 f4       	brne	.+30     	; 0x8856 <_printf_fn+0x33c>
    8838:	a1 96       	adiw	r28, 0x21	; 33
    883a:	2e ad       	ldd	r18, Y+62	; 0x3e
    883c:	3f ad       	ldd	r19, Y+63	; 0x3f
    883e:	a1 97       	sbiw	r28, 0x21	; 33
    8840:	6f 96       	adiw	r28, 0x1f	; 31
    8842:	4e ad       	ldd	r20, Y+62	; 0x3e
    8844:	5f ad       	ldd	r21, Y+63	; 0x3f
    8846:	6f 97       	sbiw	r28, 0x1f	; 31
    8848:	24 17       	cp	r18, r20
    884a:	35 07       	cpc	r19, r21
    884c:	24 f4       	brge	.+8      	; 0x8856 <_printf_fn+0x33c>
    884e:	a1 96       	adiw	r28, 0x21	; 33
    8850:	5f af       	std	Y+63, r21	; 0x3f
    8852:	4e af       	std	Y+62, r20	; 0x3e
    8854:	a1 97       	sbiw	r28, 0x21	; 33
    8856:	e8 94       	clt
    8858:	94 f8       	bld	r9, 4
    885a:	e8 94       	clt
    885c:	92 f8       	bld	r9, 2
    885e:	e8 94       	clt
    8860:	96 f8       	bld	r9, 6
    8862:	52 e0       	ldi	r21, 0x02	; 2
    8864:	45 16       	cp	r4, r21
    8866:	51 04       	cpc	r5, r1
    8868:	f9 f4       	brne	.+62     	; 0x88a8 <_printf_fn+0x38e>
    886a:	51 01       	movw	r10, r2
    886c:	82 e0       	ldi	r24, 0x02	; 2
    886e:	a8 0e       	add	r10, r24
    8870:	b1 1c       	adc	r11, r1
    8872:	d1 01       	movw	r26, r2
    8874:	8d 91       	ld	r24, X+
    8876:	9c 91       	ld	r25, X
    8878:	65 96       	adiw	r28, 0x15	; 21
    887a:	9f af       	std	Y+63, r25	; 0x3f
    887c:	8e af       	std	Y+62, r24	; 0x3e
    887e:	65 97       	sbiw	r28, 0x15	; 21
    8880:	a3 96       	adiw	r28, 0x23	; 35
    8882:	ee ad       	ldd	r30, Y+62	; 0x3e
    8884:	ff ad       	ldd	r31, Y+63	; 0x3f
    8886:	a3 97       	sbiw	r28, 0x23	; 35
    8888:	e4 34       	cpi	r30, 0x44	; 68
    888a:	f1 05       	cpc	r31, r1
    888c:	09 f0       	breq	.+2      	; 0x8890 <_printf_fn+0x376>
    888e:	ac c0       	rjmp	.+344    	; 0x89e8 <_printf_fn+0x4ce>
    8890:	97 ff       	sbrs	r25, 7
    8892:	a7 c0       	rjmp	.+334    	; 0x89e2 <_printf_fn+0x4c8>
    8894:	68 94       	set
    8896:	96 f8       	bld	r9, 6
    8898:	91 95       	neg	r25
    889a:	81 95       	neg	r24
    889c:	91 09       	sbc	r25, r1
    889e:	65 96       	adiw	r28, 0x15	; 21
    88a0:	9f af       	std	Y+63, r25	; 0x3f
    88a2:	8e af       	std	Y+62, r24	; 0x3e
    88a4:	65 97       	sbiw	r28, 0x15	; 21
    88a6:	9d c0       	rjmp	.+314    	; 0x89e2 <_printf_fn+0x4c8>
    88a8:	f4 e0       	ldi	r31, 0x04	; 4
    88aa:	4f 16       	cp	r4, r31
    88ac:	51 04       	cpc	r5, r1
    88ae:	59 f5       	brne	.+86     	; 0x8906 <_printf_fn+0x3ec>
    88b0:	51 01       	movw	r10, r2
    88b2:	24 e0       	ldi	r18, 0x04	; 4
    88b4:	a2 0e       	add	r10, r18
    88b6:	b1 1c       	adc	r11, r1
    88b8:	f1 01       	movw	r30, r2
    88ba:	80 81       	ld	r24, Z
    88bc:	91 81       	ldd	r25, Z+1	; 0x01
    88be:	a2 81       	ldd	r26, Z+2	; 0x02
    88c0:	b3 81       	ldd	r27, Z+3	; 0x03
    88c2:	2f 96       	adiw	r28, 0x0f	; 15
    88c4:	8c af       	std	Y+60, r24	; 0x3c
    88c6:	9d af       	std	Y+61, r25	; 0x3d
    88c8:	ae af       	std	Y+62, r26	; 0x3e
    88ca:	bf af       	std	Y+63, r27	; 0x3f
    88cc:	2f 97       	sbiw	r28, 0x0f	; 15
    88ce:	a3 96       	adiw	r28, 0x23	; 35
    88d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    88d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    88d4:	a3 97       	sbiw	r28, 0x23	; 35
    88d6:	24 34       	cpi	r18, 0x44	; 68
    88d8:	31 05       	cpc	r19, r1
    88da:	09 f0       	breq	.+2      	; 0x88de <_printf_fn+0x3c4>
    88dc:	8f c0       	rjmp	.+286    	; 0x89fc <_printf_fn+0x4e2>
    88de:	b7 ff       	sbrs	r27, 7
    88e0:	8a c0       	rjmp	.+276    	; 0x89f6 <_printf_fn+0x4dc>
    88e2:	68 94       	set
    88e4:	96 f8       	bld	r9, 6
    88e6:	b0 95       	com	r27
    88e8:	a0 95       	com	r26
    88ea:	90 95       	com	r25
    88ec:	81 95       	neg	r24
    88ee:	9f 4f       	sbci	r25, 0xFF	; 255
    88f0:	af 4f       	sbci	r26, 0xFF	; 255
    88f2:	bf 4f       	sbci	r27, 0xFF	; 255
    88f4:	2f 96       	adiw	r28, 0x0f	; 15
    88f6:	8c af       	std	Y+60, r24	; 0x3c
    88f8:	9d af       	std	Y+61, r25	; 0x3d
    88fa:	ae af       	std	Y+62, r26	; 0x3e
    88fc:	bf af       	std	Y+63, r27	; 0x3f
    88fe:	2f 97       	sbiw	r28, 0x0f	; 15
    8900:	7a c0       	rjmp	.+244    	; 0x89f6 <_printf_fn+0x4dc>
    8902:	81 e0       	ldi	r24, 0x01	; 1
    8904:	90 e0       	ldi	r25, 0x00	; 0
    8906:	51 01       	movw	r10, r2
    8908:	38 e0       	ldi	r19, 0x08	; 8
    890a:	43 16       	cp	r4, r19
    890c:	51 04       	cpc	r5, r1
    890e:	09 f0       	breq	.+2      	; 0x8912 <_printf_fn+0x3f8>
    8910:	7c c0       	rjmp	.+248    	; 0x8a0a <_printf_fn+0x4f0>
    8912:	48 e0       	ldi	r20, 0x08	; 8
    8914:	a4 0e       	add	r10, r20
    8916:	b1 1c       	adc	r11, r1
    8918:	d1 01       	movw	r26, r2
    891a:	fc 90       	ld	r15, X
    891c:	f1 01       	movw	r30, r2
    891e:	01 81       	ldd	r16, Z+1	; 0x01
    8920:	12 81       	ldd	r17, Z+2	; 0x02
    8922:	f3 81       	ldd	r31, Z+3	; 0x03
    8924:	aa 96       	adiw	r28, 0x2a	; 42
    8926:	ff af       	std	Y+63, r31	; 0x3f
    8928:	aa 97       	sbiw	r28, 0x2a	; 42
    892a:	f1 01       	movw	r30, r2
    892c:	f4 81       	ldd	r31, Z+4	; 0x04
    892e:	ab 96       	adiw	r28, 0x2b	; 43
    8930:	ff af       	std	Y+63, r31	; 0x3f
    8932:	ab 97       	sbiw	r28, 0x2b	; 43
    8934:	f1 01       	movw	r30, r2
    8936:	b5 81       	ldd	r27, Z+5	; 0x05
    8938:	f6 81       	ldd	r31, Z+6	; 0x06
    893a:	af 96       	adiw	r28, 0x2f	; 47
    893c:	ff af       	std	Y+63, r31	; 0x3f
    893e:	af 97       	sbiw	r28, 0x2f	; 47
    8940:	f1 01       	movw	r30, r2
    8942:	37 80       	ldd	r3, Z+7	; 0x07
    8944:	24 96       	adiw	r28, 0x04	; 4
    8946:	ff ae       	std	Y+63, r15	; 0x3f
    8948:	24 97       	sbiw	r28, 0x04	; 4
    894a:	25 96       	adiw	r28, 0x05	; 5
    894c:	0f af       	std	Y+63, r16	; 0x3f
    894e:	25 97       	sbiw	r28, 0x05	; 5
    8950:	26 96       	adiw	r28, 0x06	; 6
    8952:	1f af       	std	Y+63, r17	; 0x3f
    8954:	26 97       	sbiw	r28, 0x06	; 6
    8956:	aa 96       	adiw	r28, 0x2a	; 42
    8958:	ff ad       	ldd	r31, Y+63	; 0x3f
    895a:	aa 97       	sbiw	r28, 0x2a	; 42
    895c:	27 96       	adiw	r28, 0x07	; 7
    895e:	ff af       	std	Y+63, r31	; 0x3f
    8960:	27 97       	sbiw	r28, 0x07	; 7
    8962:	ab 96       	adiw	r28, 0x2b	; 43
    8964:	ef ad       	ldd	r30, Y+63	; 0x3f
    8966:	ab 97       	sbiw	r28, 0x2b	; 43
    8968:	28 96       	adiw	r28, 0x08	; 8
    896a:	ef af       	std	Y+63, r30	; 0x3f
    896c:	28 97       	sbiw	r28, 0x08	; 8
    896e:	29 96       	adiw	r28, 0x09	; 9
    8970:	bf af       	std	Y+63, r27	; 0x3f
    8972:	29 97       	sbiw	r28, 0x09	; 9
    8974:	af 96       	adiw	r28, 0x2f	; 47
    8976:	ff ad       	ldd	r31, Y+63	; 0x3f
    8978:	af 97       	sbiw	r28, 0x2f	; 47
    897a:	2a 96       	adiw	r28, 0x0a	; 10
    897c:	ff af       	std	Y+63, r31	; 0x3f
    897e:	2a 97       	sbiw	r28, 0x0a	; 10
    8980:	2b 96       	adiw	r28, 0x0b	; 11
    8982:	3f ae       	std	Y+63, r3	; 0x3f
    8984:	2b 97       	sbiw	r28, 0x0b	; 11
    8986:	89 2b       	or	r24, r25
    8988:	09 f4       	brne	.+2      	; 0x898c <_printf_fn+0x472>
    898a:	4a c0       	rjmp	.+148    	; 0x8a20 <_printf_fn+0x506>
    898c:	2f 2d       	mov	r18, r15
    898e:	30 2f       	mov	r19, r16
    8990:	41 2f       	mov	r20, r17
    8992:	aa 96       	adiw	r28, 0x2a	; 42
    8994:	5f ad       	ldd	r21, Y+63	; 0x3f
    8996:	aa 97       	sbiw	r28, 0x2a	; 42
    8998:	6e 2f       	mov	r22, r30
    899a:	7b 2f       	mov	r23, r27
    899c:	8f 2f       	mov	r24, r31
    899e:	93 2d       	mov	r25, r3
    89a0:	a0 e0       	ldi	r26, 0x00	; 0
    89a2:	0e 94 54 e7 	call	0x1cea8	; 0x1cea8 <__cmpdi2_s8>
    89a6:	e4 f5       	brge	.+120    	; 0x8a20 <_printf_fn+0x506>
    89a8:	68 94       	set
    89aa:	96 f8       	bld	r9, 6
    89ac:	0e 94 06 e7 	call	0x1ce0c	; 0x1ce0c <__negdi2>
    89b0:	24 96       	adiw	r28, 0x04	; 4
    89b2:	2f af       	std	Y+63, r18	; 0x3f
    89b4:	24 97       	sbiw	r28, 0x04	; 4
    89b6:	25 96       	adiw	r28, 0x05	; 5
    89b8:	3f af       	std	Y+63, r19	; 0x3f
    89ba:	25 97       	sbiw	r28, 0x05	; 5
    89bc:	26 96       	adiw	r28, 0x06	; 6
    89be:	4f af       	std	Y+63, r20	; 0x3f
    89c0:	26 97       	sbiw	r28, 0x06	; 6
    89c2:	27 96       	adiw	r28, 0x07	; 7
    89c4:	5f af       	std	Y+63, r21	; 0x3f
    89c6:	27 97       	sbiw	r28, 0x07	; 7
    89c8:	28 96       	adiw	r28, 0x08	; 8
    89ca:	6f af       	std	Y+63, r22	; 0x3f
    89cc:	28 97       	sbiw	r28, 0x08	; 8
    89ce:	29 96       	adiw	r28, 0x09	; 9
    89d0:	7f af       	std	Y+63, r23	; 0x3f
    89d2:	29 97       	sbiw	r28, 0x09	; 9
    89d4:	2a 96       	adiw	r28, 0x0a	; 10
    89d6:	8f af       	std	Y+63, r24	; 0x3f
    89d8:	2a 97       	sbiw	r28, 0x0a	; 10
    89da:	2b 96       	adiw	r28, 0x0b	; 11
    89dc:	9f af       	std	Y+63, r25	; 0x3f
    89de:	2b 97       	sbiw	r28, 0x0b	; 11
    89e0:	1f c0       	rjmp	.+62     	; 0x8a20 <_printf_fn+0x506>
    89e2:	22 e0       	ldi	r18, 0x02	; 2
    89e4:	42 2e       	mov	r4, r18
    89e6:	51 2c       	mov	r5, r1
    89e8:	6c 96       	adiw	r28, 0x1c	; 28
    89ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    89ec:	6c 97       	sbiw	r28, 0x1c	; 28
    89ee:	6d 96       	adiw	r28, 0x1d	; 29
    89f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    89f2:	6d 97       	sbiw	r28, 0x1d	; 29
    89f4:	1b c0       	rjmp	.+54     	; 0x8a2c <_printf_fn+0x512>
    89f6:	94 e0       	ldi	r25, 0x04	; 4
    89f8:	49 2e       	mov	r4, r25
    89fa:	51 2c       	mov	r5, r1
    89fc:	6a 96       	adiw	r28, 0x1a	; 26
    89fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a00:	6a 97       	sbiw	r28, 0x1a	; 26
    8a02:	6b 96       	adiw	r28, 0x1b	; 27
    8a04:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a06:	6b 97       	sbiw	r28, 0x1b	; 27
    8a08:	11 c0       	rjmp	.+34     	; 0x8a2c <_printf_fn+0x512>
    8a0a:	66 96       	adiw	r28, 0x16	; 22
    8a0c:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a0e:	66 97       	sbiw	r28, 0x16	; 22
    8a10:	67 96       	adiw	r28, 0x17	; 23
    8a12:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a14:	67 97       	sbiw	r28, 0x17	; 23
    8a16:	a3 96       	adiw	r28, 0x23	; 35
    8a18:	1f ae       	std	Y+63, r1	; 0x3f
    8a1a:	1e ae       	std	Y+62, r1	; 0x3e
    8a1c:	a3 97       	sbiw	r28, 0x23	; 35
    8a1e:	06 c0       	rjmp	.+12     	; 0x8a2c <_printf_fn+0x512>
    8a20:	68 96       	adiw	r28, 0x18	; 24
    8a22:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a24:	68 97       	sbiw	r28, 0x18	; 24
    8a26:	69 96       	adiw	r28, 0x19	; 25
    8a28:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a2a:	69 97       	sbiw	r28, 0x19	; 25
    8a2c:	2f ef       	ldi	r18, 0xFF	; 255
    8a2e:	62 1a       	sub	r6, r18
    8a30:	72 0a       	sbc	r7, r18
    8a32:	82 0a       	sbc	r8, r18
    8a34:	15 01       	movw	r2, r10
    8a36:	33 c0       	rjmp	.+102    	; 0x8a9e <_printf_fn+0x584>
    8a38:	91 fc       	sbrc	r9, 1
    8a3a:	08 c0       	rjmp	.+16     	; 0x8a4c <_printf_fn+0x532>
    8a3c:	68 94       	set
    8a3e:	91 f8       	bld	r9, 1
    8a40:	46 e0       	ldi	r20, 0x06	; 6
    8a42:	50 e0       	ldi	r21, 0x00	; 0
    8a44:	a1 96       	adiw	r28, 0x21	; 33
    8a46:	5f af       	std	Y+63, r21	; 0x3f
    8a48:	4e af       	std	Y+62, r20	; 0x3e
    8a4a:	a1 97       	sbiw	r28, 0x21	; 33
    8a4c:	d1 01       	movw	r26, r2
    8a4e:	8d 91       	ld	r24, X+
    8a50:	9d 91       	ld	r25, X+
    8a52:	0d 90       	ld	r0, X+
    8a54:	bc 91       	ld	r27, X
    8a56:	a0 2d       	mov	r26, r0
    8a58:	a9 96       	adiw	r28, 0x29	; 41
    8a5a:	8c af       	std	Y+60, r24	; 0x3c
    8a5c:	9d af       	std	Y+61, r25	; 0x3d
    8a5e:	ae af       	std	Y+62, r26	; 0x3e
    8a60:	bf af       	std	Y+63, r27	; 0x3f
    8a62:	a9 97       	sbiw	r28, 0x29	; 41
    8a64:	bf ef       	ldi	r27, 0xFF	; 255
    8a66:	6b 1a       	sub	r6, r27
    8a68:	7b 0a       	sbc	r7, r27
    8a6a:	8b 0a       	sbc	r8, r27
    8a6c:	f1 01       	movw	r30, r2
    8a6e:	34 96       	adiw	r30, 0x04	; 4
    8a70:	1f 01       	movw	r2, r30
    8a72:	0f c0       	rjmp	.+30     	; 0x8a92 <_printf_fn+0x578>
    8a74:	ff ef       	ldi	r31, 0xFF	; 255
    8a76:	6f 1a       	sub	r6, r31
    8a78:	7f 0a       	sbc	r7, r31
    8a7a:	8f 0a       	sbc	r8, r31
    8a7c:	c5 c0       	rjmp	.+394    	; 0x8c08 <_printf_fn+0x6ee>
    8a7e:	2f ef       	ldi	r18, 0xFF	; 255
    8a80:	62 1a       	sub	r6, r18
    8a82:	72 0a       	sbc	r7, r18
    8a84:	82 0a       	sbc	r8, r18
    8a86:	11 c1       	rjmp	.+546    	; 0x8caa <_printf_fn+0x790>
    8a88:	3f ef       	ldi	r19, 0xFF	; 255
    8a8a:	63 1a       	sub	r6, r19
    8a8c:	73 0a       	sbc	r7, r19
    8a8e:	83 0a       	sbc	r8, r19
    8a90:	c8 c0       	rjmp	.+400    	; 0x8c22 <_printf_fn+0x708>
    8a92:	66 96       	adiw	r28, 0x16	; 22
    8a94:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a96:	66 97       	sbiw	r28, 0x16	; 22
    8a98:	67 96       	adiw	r28, 0x17	; 23
    8a9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a9c:	67 97       	sbiw	r28, 0x17	; 23
    8a9e:	a3 96       	adiw	r28, 0x23	; 35
    8aa0:	ee ad       	ldd	r30, Y+62	; 0x3e
    8aa2:	ff ad       	ldd	r31, Y+63	; 0x3f
    8aa4:	a3 97       	sbiw	r28, 0x23	; 35
    8aa6:	e2 54       	subi	r30, 0x42	; 66
    8aa8:	f1 09       	sbc	r31, r1
    8aaa:	e7 33       	cpi	r30, 0x37	; 55
    8aac:	f1 05       	cpc	r31, r1
    8aae:	08 f0       	brcs	.+2      	; 0x8ab2 <_printf_fn+0x598>
    8ab0:	56 c1       	rjmp	.+684    	; 0x8d5e <_printf_fn+0x844>
    8ab2:	e3 58       	subi	r30, 0x83	; 131
    8ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    8ab6:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__tablejump2__>
    8aba:	e8 94       	clt
    8abc:	94 f8       	bld	r9, 4
    8abe:	e8 94       	clt
    8ac0:	92 f8       	bld	r9, 2
    8ac2:	a9 2c       	mov	r10, r9
    8ac4:	b1 2c       	mov	r11, r1
    8ac6:	a1 96       	adiw	r28, 0x21	; 33
    8ac8:	ce ac       	ldd	r12, Y+62	; 0x3e
    8aca:	df ac       	ldd	r13, Y+63	; 0x3f
    8acc:	a1 97       	sbiw	r28, 0x21	; 33
    8ace:	6f 96       	adiw	r28, 0x1f	; 31
    8ad0:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ad2:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ad4:	6f 97       	sbiw	r28, 0x1f	; 31
    8ad6:	0a e0       	ldi	r16, 0x0A	; 10
    8ad8:	10 e0       	ldi	r17, 0x00	; 0
    8ada:	19 c0       	rjmp	.+50     	; 0x8b0e <_printf_fn+0x5f4>
    8adc:	a9 2c       	mov	r10, r9
    8ade:	b1 2c       	mov	r11, r1
    8ae0:	a1 96       	adiw	r28, 0x21	; 33
    8ae2:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ae4:	df ac       	ldd	r13, Y+63	; 0x3f
    8ae6:	a1 97       	sbiw	r28, 0x21	; 33
    8ae8:	6f 96       	adiw	r28, 0x1f	; 31
    8aea:	ee ac       	ldd	r14, Y+62	; 0x3e
    8aec:	ff ac       	ldd	r15, Y+63	; 0x3f
    8aee:	6f 97       	sbiw	r28, 0x1f	; 31
    8af0:	02 e0       	ldi	r16, 0x02	; 2
    8af2:	10 e0       	ldi	r17, 0x00	; 0
    8af4:	0c c0       	rjmp	.+24     	; 0x8b0e <_printf_fn+0x5f4>
    8af6:	a9 2c       	mov	r10, r9
    8af8:	b1 2c       	mov	r11, r1
    8afa:	a1 96       	adiw	r28, 0x21	; 33
    8afc:	ce ac       	ldd	r12, Y+62	; 0x3e
    8afe:	df ac       	ldd	r13, Y+63	; 0x3f
    8b00:	a1 97       	sbiw	r28, 0x21	; 33
    8b02:	6f 96       	adiw	r28, 0x1f	; 31
    8b04:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b06:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b08:	6f 97       	sbiw	r28, 0x1f	; 31
    8b0a:	08 e0       	ldi	r16, 0x08	; 8
    8b0c:	10 e0       	ldi	r17, 0x00	; 0
    8b0e:	22 e4       	ldi	r18, 0x42	; 66
    8b10:	30 e0       	ldi	r19, 0x00	; 0
    8b12:	ae 01       	movw	r20, r28
    8b14:	4f 5f       	subi	r20, 0xFF	; 255
    8b16:	5f 4f       	sbci	r21, 0xFF	; 255
    8b18:	b2 01       	movw	r22, r4
    8b1a:	7d d9       	rcall	.-3334   	; 0x7e16 <p_ntoa>
    8b1c:	34 c0       	rjmp	.+104    	; 0x8b86 <_printf_fn+0x66c>
    8b1e:	a9 2c       	mov	r10, r9
    8b20:	b1 2c       	mov	r11, r1
    8b22:	a1 96       	adiw	r28, 0x21	; 33
    8b24:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b26:	df ac       	ldd	r13, Y+63	; 0x3f
    8b28:	a1 97       	sbiw	r28, 0x21	; 33
    8b2a:	6f 96       	adiw	r28, 0x1f	; 31
    8b2c:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b2e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b30:	6f 97       	sbiw	r28, 0x1f	; 31
    8b32:	00 e1       	ldi	r16, 0x10	; 16
    8b34:	10 e0       	ldi	r17, 0x00	; 0
    8b36:	22 e4       	ldi	r18, 0x42	; 66
    8b38:	30 e0       	ldi	r19, 0x00	; 0
    8b3a:	ae 01       	movw	r20, r28
    8b3c:	4f 5f       	subi	r20, 0xFF	; 255
    8b3e:	5f 4f       	sbci	r21, 0xFF	; 255
    8b40:	b2 01       	movw	r22, r4
    8b42:	69 d9       	rcall	.-3374   	; 0x7e16 <p_ntoa>
    8b44:	6c 01       	movw	r12, r24
    8b46:	a3 96       	adiw	r28, 0x23	; 35
    8b48:	6e ad       	ldd	r22, Y+62	; 0x3e
    8b4a:	7f ad       	ldd	r23, Y+63	; 0x3f
    8b4c:	a3 97       	sbiw	r28, 0x23	; 35
    8b4e:	67 7f       	andi	r22, 0xF7	; 247
    8b50:	60 35       	cpi	r22, 0x50	; 80
    8b52:	71 05       	cpc	r23, r1
    8b54:	09 f0       	breq	.+2      	; 0x8b58 <_printf_fn+0x63e>
    8b56:	3f c0       	rjmp	.+126    	; 0x8bd6 <_printf_fn+0x6bc>
    8b58:	3a c0       	rjmp	.+116    	; 0x8bce <_printf_fn+0x6b4>
    8b5a:	c9 2c       	mov	r12, r9
    8b5c:	d1 2c       	mov	r13, r1
    8b5e:	a1 96       	adiw	r28, 0x21	; 33
    8b60:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b62:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b64:	a1 97       	sbiw	r28, 0x21	; 33
    8b66:	6f 96       	adiw	r28, 0x1f	; 31
    8b68:	0e ad       	ldd	r16, Y+62	; 0x3e
    8b6a:	1f ad       	ldd	r17, Y+63	; 0x3f
    8b6c:	6f 97       	sbiw	r28, 0x1f	; 31
    8b6e:	22 e4       	ldi	r18, 0x42	; 66
    8b70:	30 e0       	ldi	r19, 0x00	; 0
    8b72:	ae 01       	movw	r20, r28
    8b74:	4f 5f       	subi	r20, 0xFF	; 255
    8b76:	5f 4f       	sbci	r21, 0xFF	; 255
    8b78:	a9 96       	adiw	r28, 0x29	; 41
    8b7a:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b7c:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b7e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b80:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b82:	a9 97       	sbiw	r28, 0x29	; 41
    8b84:	9d d9       	rcall	.-3270   	; 0x7ec0 <p_ftoa>
    8b86:	93 fa       	bst	r9, 3
    8b88:	00 27       	eor	r16, r16
    8b8a:	00 f9       	bld	r16, 0
    8b8c:	10 e0       	ldi	r17, 0x00	; 0
    8b8e:	9c 01       	movw	r18, r24
    8b90:	27 c0       	rjmp	.+78     	; 0x8be0 <_printf_fn+0x6c6>
    8b92:	c9 2c       	mov	r12, r9
    8b94:	d1 2c       	mov	r13, r1
    8b96:	a1 96       	adiw	r28, 0x21	; 33
    8b98:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b9a:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b9c:	a1 97       	sbiw	r28, 0x21	; 33
    8b9e:	6f 96       	adiw	r28, 0x1f	; 31
    8ba0:	0e ad       	ldd	r16, Y+62	; 0x3e
    8ba2:	1f ad       	ldd	r17, Y+63	; 0x3f
    8ba4:	6f 97       	sbiw	r28, 0x1f	; 31
    8ba6:	22 e4       	ldi	r18, 0x42	; 66
    8ba8:	30 e0       	ldi	r19, 0x00	; 0
    8baa:	ae 01       	movw	r20, r28
    8bac:	4f 5f       	subi	r20, 0xFF	; 255
    8bae:	5f 4f       	sbci	r21, 0xFF	; 255
    8bb0:	a9 96       	adiw	r28, 0x29	; 41
    8bb2:	6c ad       	ldd	r22, Y+60	; 0x3c
    8bb4:	7d ad       	ldd	r23, Y+61	; 0x3d
    8bb6:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bba:	a9 97       	sbiw	r28, 0x29	; 41
    8bbc:	88 da       	rcall	.-2800   	; 0x80ce <p_etoa>
    8bbe:	6c 01       	movw	r12, r24
    8bc0:	a3 96       	adiw	r28, 0x23	; 35
    8bc2:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bc4:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bc6:	a3 97       	sbiw	r28, 0x23	; 35
    8bc8:	45 34       	cpi	r20, 0x45	; 69
    8bca:	51 05       	cpc	r21, r1
    8bcc:	21 f4       	brne	.+8      	; 0x8bd6 <_printf_fn+0x6bc>
    8bce:	ce 01       	movw	r24, r28
    8bd0:	01 96       	adiw	r24, 0x01	; 1
    8bd2:	0e 94 c0 31 	call	0x6380	; 0x6380 <strupper>
    8bd6:	93 fa       	bst	r9, 3
    8bd8:	00 27       	eor	r16, r16
    8bda:	00 f9       	bld	r16, 0
    8bdc:	10 e0       	ldi	r17, 0x00	; 0
    8bde:	96 01       	movw	r18, r12
    8be0:	6f 96       	adiw	r28, 0x1f	; 31
    8be2:	4e ad       	ldd	r20, Y+62	; 0x3e
    8be4:	5f ad       	ldd	r21, Y+63	; 0x3f
    8be6:	6f 97       	sbiw	r28, 0x1f	; 31
    8be8:	be 01       	movw	r22, r28
    8bea:	6f 5f       	subi	r22, 0xFF	; 255
    8bec:	7f 4f       	sbci	r23, 0xFF	; 255
    8bee:	a5 96       	adiw	r28, 0x25	; 37
    8bf0:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bf2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bf4:	a5 97       	sbiw	r28, 0x25	; 37
    8bf6:	d7 db       	rcall	.-2130   	; 0x83a6 <_puts_pad>
    8bf8:	b6 c0       	rjmp	.+364    	; 0x8d66 <_printf_fn+0x84c>
    8bfa:	a3 96       	adiw	r28, 0x23	; 35
    8bfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c00:	a3 97       	sbiw	r28, 0x23	; 35
    8c02:	83 37       	cpi	r24, 0x73	; 115
    8c04:	91 05       	cpc	r25, r1
    8c06:	69 f4       	brne	.+26     	; 0x8c22 <_printf_fn+0x708>
    8c08:	61 01       	movw	r12, r2
    8c0a:	92 e0       	ldi	r25, 0x02	; 2
    8c0c:	c9 0e       	add	r12, r25
    8c0e:	d1 1c       	adc	r13, r1
    8c10:	d1 01       	movw	r26, r2
    8c12:	6d 91       	ld	r22, X+
    8c14:	7c 91       	ld	r23, X
    8c16:	61 15       	cp	r22, r1
    8c18:	71 05       	cpc	r23, r1
    8c1a:	91 f4       	brne	.+36     	; 0x8c40 <_printf_fn+0x726>
    8c1c:	6a e1       	ldi	r22, 0x1A	; 26
    8c1e:	74 e0       	ldi	r23, 0x04	; 4
    8c20:	0f c0       	rjmp	.+30     	; 0x8c40 <_printf_fn+0x726>
    8c22:	61 01       	movw	r12, r2
    8c24:	b2 e0       	ldi	r27, 0x02	; 2
    8c26:	cb 0e       	add	r12, r27
    8c28:	d1 1c       	adc	r13, r1
    8c2a:	f1 01       	movw	r30, r2
    8c2c:	80 81       	ld	r24, Z
    8c2e:	60 96       	adiw	r28, 0x10	; 16
    8c30:	8f af       	std	Y+63, r24	; 0x3f
    8c32:	60 97       	sbiw	r28, 0x10	; 16
    8c34:	61 96       	adiw	r28, 0x11	; 17
    8c36:	1f ae       	std	Y+63, r1	; 0x3f
    8c38:	61 97       	sbiw	r28, 0x11	; 17
    8c3a:	be 01       	movw	r22, r28
    8c3c:	61 5b       	subi	r22, 0xB1	; 177
    8c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    8c40:	fb 01       	movw	r30, r22
    8c42:	01 90       	ld	r0, Z+
    8c44:	00 20       	and	r0, r0
    8c46:	e9 f7       	brne	.-6      	; 0x8c42 <_printf_fn+0x728>
    8c48:	31 97       	sbiw	r30, 0x01	; 1
    8c4a:	e6 1b       	sub	r30, r22
    8c4c:	f7 0b       	sbc	r31, r23
    8c4e:	a1 96       	adiw	r28, 0x21	; 33
    8c50:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c52:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c54:	a1 97       	sbiw	r28, 0x21	; 33
    8c56:	23 2b       	or	r18, r19
    8c58:	21 f4       	brne	.+8      	; 0x8c62 <_printf_fn+0x748>
    8c5a:	a1 96       	adiw	r28, 0x21	; 33
    8c5c:	ff af       	std	Y+63, r31	; 0x3f
    8c5e:	ee af       	std	Y+62, r30	; 0x3e
    8c60:	a1 97       	sbiw	r28, 0x21	; 33
    8c62:	6f 96       	adiw	r28, 0x1f	; 31
    8c64:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c66:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c68:	6f 97       	sbiw	r28, 0x1f	; 31
    8c6a:	a1 96       	adiw	r28, 0x21	; 33
    8c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c70:	a1 97       	sbiw	r28, 0x21	; 33
    8c72:	48 17       	cp	r20, r24
    8c74:	59 07       	cpc	r21, r25
    8c76:	3c f4       	brge	.+14     	; 0x8c86 <_printf_fn+0x76c>
    8c78:	41 15       	cp	r20, r1
    8c7a:	51 05       	cpc	r21, r1
    8c7c:	21 f0       	breq	.+8      	; 0x8c86 <_printf_fn+0x76c>
    8c7e:	a1 96       	adiw	r28, 0x21	; 33
    8c80:	5f af       	std	Y+63, r21	; 0x3f
    8c82:	4e af       	std	Y+62, r20	; 0x3e
    8c84:	a1 97       	sbiw	r28, 0x21	; 33
    8c86:	93 fa       	bst	r9, 3
    8c88:	00 27       	eor	r16, r16
    8c8a:	00 f9       	bld	r16, 0
    8c8c:	10 e0       	ldi	r17, 0x00	; 0
    8c8e:	a1 96       	adiw	r28, 0x21	; 33
    8c90:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c92:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c94:	a1 97       	sbiw	r28, 0x21	; 33
    8c96:	6f 96       	adiw	r28, 0x1f	; 31
    8c98:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c9a:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c9c:	6f 97       	sbiw	r28, 0x1f	; 31
    8c9e:	a5 96       	adiw	r28, 0x25	; 37
    8ca0:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ca2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ca4:	a5 97       	sbiw	r28, 0x25	; 37
    8ca6:	7f db       	rcall	.-2306   	; 0x83a6 <_puts_pad>
    8ca8:	45 c0       	rjmp	.+138    	; 0x8d34 <_printf_fn+0x81a>
    8caa:	61 01       	movw	r12, r2
    8cac:	92 e0       	ldi	r25, 0x02	; 2
    8cae:	c9 0e       	add	r12, r25
    8cb0:	d1 1c       	adc	r13, r1
    8cb2:	d1 01       	movw	r26, r2
    8cb4:	2d 90       	ld	r2, X+
    8cb6:	3c 90       	ld	r3, X
    8cb8:	41 2c       	mov	r4, r1
    8cba:	21 14       	cp	r2, r1
    8cbc:	31 04       	cpc	r3, r1
    8cbe:	41 04       	cpc	r4, r1
    8cc0:	29 f4       	brne	.+10     	; 0x8ccc <_printf_fn+0x7b2>
    8cc2:	ae 96       	adiw	r28, 0x2e	; 46
    8cc4:	2d ac       	ldd	r2, Y+61	; 0x3d
    8cc6:	3e ac       	ldd	r3, Y+62	; 0x3e
    8cc8:	4f ac       	ldd	r4, Y+63	; 0x3f
    8cca:	ae 97       	sbiw	r28, 0x2e	; 46
    8ccc:	84 2d       	mov	r24, r4
    8cce:	b1 01       	movw	r22, r2
    8cd0:	08 dc       	rcall	.-2032   	; 0x84e2 <strlen_X>
    8cd2:	a1 96       	adiw	r28, 0x21	; 33
    8cd4:	ee ad       	ldd	r30, Y+62	; 0x3e
    8cd6:	ff ad       	ldd	r31, Y+63	; 0x3f
    8cd8:	a1 97       	sbiw	r28, 0x21	; 33
    8cda:	ef 2b       	or	r30, r31
    8cdc:	31 f4       	brne	.+12     	; 0x8cea <_printf_fn+0x7d0>
    8cde:	a0 96       	adiw	r28, 0x20	; 32
    8ce0:	8f af       	std	Y+63, r24	; 0x3f
    8ce2:	a0 97       	sbiw	r28, 0x20	; 32
    8ce4:	a1 96       	adiw	r28, 0x21	; 33
    8ce6:	9f af       	std	Y+63, r25	; 0x3f
    8ce8:	a1 97       	sbiw	r28, 0x21	; 33
    8cea:	6f 96       	adiw	r28, 0x1f	; 31
    8cec:	2e ad       	ldd	r18, Y+62	; 0x3e
    8cee:	3f ad       	ldd	r19, Y+63	; 0x3f
    8cf0:	6f 97       	sbiw	r28, 0x1f	; 31
    8cf2:	a1 96       	adiw	r28, 0x21	; 33
    8cf4:	4e ad       	ldd	r20, Y+62	; 0x3e
    8cf6:	5f ad       	ldd	r21, Y+63	; 0x3f
    8cf8:	a1 97       	sbiw	r28, 0x21	; 33
    8cfa:	24 17       	cp	r18, r20
    8cfc:	35 07       	cpc	r19, r21
    8cfe:	3c f4       	brge	.+14     	; 0x8d0e <_printf_fn+0x7f4>
    8d00:	21 15       	cp	r18, r1
    8d02:	31 05       	cpc	r19, r1
    8d04:	21 f0       	breq	.+8      	; 0x8d0e <_printf_fn+0x7f4>
    8d06:	a1 96       	adiw	r28, 0x21	; 33
    8d08:	3f af       	std	Y+63, r19	; 0x3f
    8d0a:	2e af       	std	Y+62, r18	; 0x3e
    8d0c:	a1 97       	sbiw	r28, 0x21	; 33
    8d0e:	93 fa       	bst	r9, 3
    8d10:	ee 24       	eor	r14, r14
    8d12:	e0 f8       	bld	r14, 0
    8d14:	f1 2c       	mov	r15, r1
    8d16:	a1 96       	adiw	r28, 0x21	; 33
    8d18:	0e ad       	ldd	r16, Y+62	; 0x3e
    8d1a:	1f ad       	ldd	r17, Y+63	; 0x3f
    8d1c:	a1 97       	sbiw	r28, 0x21	; 33
    8d1e:	6f 96       	adiw	r28, 0x1f	; 31
    8d20:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d22:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d24:	6f 97       	sbiw	r28, 0x1f	; 31
    8d26:	64 2d       	mov	r22, r4
    8d28:	a1 01       	movw	r20, r2
    8d2a:	a5 96       	adiw	r28, 0x25	; 37
    8d2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d30:	a5 97       	sbiw	r28, 0x25	; 37
    8d32:	7b db       	rcall	.-2314   	; 0x842a <_puts_pad_X>
    8d34:	16 01       	movw	r2, r12
    8d36:	17 c0       	rjmp	.+46     	; 0x8d66 <_printf_fn+0x84c>
    8d38:	f6 01       	movw	r30, r12
    8d3a:	5e 2d       	mov	r21, r14
    8d3c:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <__xload_1>
    8d40:	66 23       	and	r22, r22
    8d42:	89 f0       	breq	.+34     	; 0x8d66 <_printf_fn+0x84c>
    8d44:	5f ef       	ldi	r21, 0xFF	; 255
    8d46:	c5 1a       	sub	r12, r21
    8d48:	d5 0a       	sbc	r13, r21
    8d4a:	e5 0a       	sbc	r14, r21
    8d4c:	a5 96       	adiw	r28, 0x25	; 37
    8d4e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d50:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d52:	a5 97       	sbiw	r28, 0x25	; 37
    8d54:	ed 91       	ld	r30, X+
    8d56:	fc 91       	ld	r31, X
    8d58:	11 97       	sbiw	r26, 0x01	; 1
    8d5a:	cd 01       	movw	r24, r26
    8d5c:	09 95       	icall
    8d5e:	6c 14       	cp	r6, r12
    8d60:	7d 04       	cpc	r7, r13
    8d62:	8e 04       	cpc	r8, r14
    8d64:	48 f7       	brcc	.-46     	; 0x8d38 <_printf_fn+0x81e>
    8d66:	e8 2c       	mov	r14, r8
    8d68:	63 01       	movw	r12, r6
    8d6a:	0f cc       	rjmp	.-2018   	; 0x858a <_printf_fn+0x70>
    8d6c:	82 e0       	ldi	r24, 0x02	; 2
    8d6e:	48 2e       	mov	r4, r24
    8d70:	51 2c       	mov	r5, r1
    8d72:	0d cd       	rjmp	.-1510   	; 0x878e <_printf_fn+0x274>
    8d74:	f2 e0       	ldi	r31, 0x02	; 2
    8d76:	4f 16       	cp	r4, r31
    8d78:	51 04       	cpc	r5, r1
    8d7a:	61 f4       	brne	.+24     	; 0x8d94 <_printf_fn+0x87a>
    8d7c:	51 01       	movw	r10, r2
    8d7e:	b2 e0       	ldi	r27, 0x02	; 2
    8d80:	ab 0e       	add	r10, r27
    8d82:	b1 1c       	adc	r11, r1
    8d84:	f1 01       	movw	r30, r2
    8d86:	80 81       	ld	r24, Z
    8d88:	91 81       	ldd	r25, Z+1	; 0x01
    8d8a:	65 96       	adiw	r28, 0x15	; 21
    8d8c:	9f af       	std	Y+63, r25	; 0x3f
    8d8e:	8e af       	std	Y+62, r24	; 0x3e
    8d90:	65 97       	sbiw	r28, 0x15	; 21
    8d92:	7e cd       	rjmp	.-1284   	; 0x8890 <_printf_fn+0x376>
    8d94:	f4 e0       	ldi	r31, 0x04	; 4
    8d96:	4f 16       	cp	r4, r31
    8d98:	51 04       	cpc	r5, r1
    8d9a:	09 f0       	breq	.+2      	; 0x8d9e <_printf_fn+0x884>
    8d9c:	b2 cd       	rjmp	.-1180   	; 0x8902 <_printf_fn+0x3e8>
    8d9e:	51 01       	movw	r10, r2
    8da0:	24 e0       	ldi	r18, 0x04	; 4
    8da2:	a2 0e       	add	r10, r18
    8da4:	b1 1c       	adc	r11, r1
    8da6:	f1 01       	movw	r30, r2
    8da8:	80 81       	ld	r24, Z
    8daa:	91 81       	ldd	r25, Z+1	; 0x01
    8dac:	a2 81       	ldd	r26, Z+2	; 0x02
    8dae:	b3 81       	ldd	r27, Z+3	; 0x03
    8db0:	2f 96       	adiw	r28, 0x0f	; 15
    8db2:	8c af       	std	Y+60, r24	; 0x3c
    8db4:	9d af       	std	Y+61, r25	; 0x3d
    8db6:	ae af       	std	Y+62, r26	; 0x3e
    8db8:	bf af       	std	Y+63, r27	; 0x3f
    8dba:	2f 97       	sbiw	r28, 0x0f	; 15
    8dbc:	90 cd       	rjmp	.-1248   	; 0x88de <_printf_fn+0x3c4>
    8dbe:	c2 59       	subi	r28, 0x92	; 146
    8dc0:	df 4f       	sbci	r29, 0xFF	; 255
    8dc2:	e2 e1       	ldi	r30, 0x12	; 18
    8dc4:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

00008dc8 <vsnprintf_P>:
    8dc8:	a8 e0       	ldi	r26, 0x08	; 8
    8dca:	b0 e0       	ldi	r27, 0x00	; 0
    8dcc:	ea ee       	ldi	r30, 0xEA	; 234
    8dce:	f6 e4       	ldi	r31, 0x46	; 70
    8dd0:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
    8dd4:	7c 01       	movw	r14, r24
    8dd6:	cb 01       	movw	r24, r22
    8dd8:	64 2f       	mov	r22, r20
    8dda:	a9 01       	movw	r20, r18
    8ddc:	98 01       	movw	r18, r16
    8dde:	f7 01       	movw	r30, r14
    8de0:	10 82       	st	Z, r1
    8de2:	e2 e4       	ldi	r30, 0x42	; 66
    8de4:	fe e3       	ldi	r31, 0x3E	; 62
    8de6:	fa 83       	std	Y+2, r31	; 0x02
    8de8:	e9 83       	std	Y+1, r30	; 0x01
    8dea:	9e 83       	std	Y+6, r25	; 0x06
    8dec:	8d 83       	std	Y+5, r24	; 0x05
    8dee:	18 86       	std	Y+8, r1	; 0x08
    8df0:	1f 82       	std	Y+7, r1	; 0x07
    8df2:	fc 82       	std	Y+4, r15	; 0x04
    8df4:	eb 82       	std	Y+3, r14	; 0x03
    8df6:	ce 01       	movw	r24, r28
    8df8:	01 96       	adiw	r24, 0x01	; 1
    8dfa:	8f db       	rcall	.-2274   	; 0x851a <_printf_fn>
    8dfc:	f7 01       	movw	r30, r14
    8dfe:	01 90       	ld	r0, Z+
    8e00:	00 20       	and	r0, r0
    8e02:	e9 f7       	brne	.-6      	; 0x8dfe <vsnprintf_P+0x36>
    8e04:	cf 01       	movw	r24, r30
    8e06:	01 97       	sbiw	r24, 0x01	; 1
    8e08:	8e 19       	sub	r24, r14
    8e0a:	9f 09       	sbc	r25, r15
    8e0c:	28 96       	adiw	r28, 0x08	; 8
    8e0e:	e6 e0       	ldi	r30, 0x06	; 6
    8e10:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

00008e14 <snprintf_P>:
    8e14:	a0 e0       	ldi	r26, 0x00	; 0
    8e16:	b0 e0       	ldi	r27, 0x00	; 0
    8e18:	e0 e1       	ldi	r30, 0x10	; 16
    8e1a:	f7 e4       	ldi	r31, 0x47	; 71
    8e1c:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    8e20:	8e 01       	movw	r16, r28
    8e22:	02 5f       	subi	r16, 0xF2	; 242
    8e24:	1f 4f       	sbci	r17, 0xFF	; 255
    8e26:	2b 85       	ldd	r18, Y+11	; 0x0b
    8e28:	3c 85       	ldd	r19, Y+12	; 0x0c
    8e2a:	4d 85       	ldd	r20, Y+13	; 0x0d
    8e2c:	69 85       	ldd	r22, Y+9	; 0x09
    8e2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    8e30:	8f 81       	ldd	r24, Y+7	; 0x07
    8e32:	98 85       	ldd	r25, Y+8	; 0x08
    8e34:	c9 df       	rcall	.-110    	; 0x8dc8 <vsnprintf_P>
    8e36:	e4 e0       	ldi	r30, 0x04	; 4
    8e38:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00008e3c <sprintf_P>:
    8e3c:	a0 e0       	ldi	r26, 0x00	; 0
    8e3e:	b0 e0       	ldi	r27, 0x00	; 0
    8e40:	e4 e2       	ldi	r30, 0x24	; 36
    8e42:	f7 e4       	ldi	r31, 0x47	; 71
    8e44:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    8e48:	8e 01       	movw	r16, r28
    8e4a:	04 5f       	subi	r16, 0xF4	; 244
    8e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    8e4e:	29 85       	ldd	r18, Y+9	; 0x09
    8e50:	3a 85       	ldd	r19, Y+10	; 0x0a
    8e52:	4b 85       	ldd	r20, Y+11	; 0x0b
    8e54:	60 e0       	ldi	r22, 0x00	; 0
    8e56:	74 e0       	ldi	r23, 0x04	; 4
    8e58:	8f 81       	ldd	r24, Y+7	; 0x07
    8e5a:	98 85       	ldd	r25, Y+8	; 0x08
    8e5c:	b5 df       	rcall	.-150    	; 0x8dc8 <vsnprintf_P>
    8e5e:	e4 e0       	ldi	r30, 0x04	; 4
    8e60:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00008e64 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8e64:	a8 e0       	ldi	r26, 0x08	; 8
    8e66:	b0 e0       	ldi	r27, 0x00	; 0
    8e68:	e8 e3       	ldi	r30, 0x38	; 56
    8e6a:	f7 e4       	ldi	r31, 0x47	; 71
    8e6c:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    8e70:	9e 01       	movw	r18, r28
    8e72:	23 5f       	subi	r18, 0xF3	; 243
    8e74:	3f 4f       	sbci	r19, 0xFF	; 255
    8e76:	f9 01       	movw	r30, r18
    8e78:	41 91       	ld	r20, Z+
    8e7a:	51 91       	ld	r21, Z+
    8e7c:	61 91       	ld	r22, Z+
    8e7e:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8e80:	8b e5       	ldi	r24, 0x5B	; 91
    8e82:	9e e3       	ldi	r25, 0x3E	; 62
    8e84:	9a 83       	std	Y+2, r25	; 0x02
    8e86:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8e88:	18 86       	std	Y+8, r1	; 0x08
    8e8a:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8e8c:	ce 01       	movw	r24, r28
    8e8e:	01 96       	adiw	r24, 0x01	; 1
    8e90:	44 db       	rcall	.-2424   	; 0x851a <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8e92:	8f 81       	ldd	r24, Y+7	; 0x07
    8e94:	98 85       	ldd	r25, Y+8	; 0x08
    8e96:	28 96       	adiw	r28, 0x08	; 8
    8e98:	e2 e0       	ldi	r30, 0x02	; 2
    8e9a:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00008e9e <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8e9e:	9c 01       	movw	r18, r24
    8ea0:	20 53       	subi	r18, 0x30	; 48
    8ea2:	31 09       	sbc	r19, r1
    8ea4:	2a 30       	cpi	r18, 0x0A	; 10
    8ea6:	31 05       	cpc	r19, r1
    8ea8:	10 f4       	brcc	.+4      	; 0x8eae <atodigit+0x10>
    8eaa:	c9 01       	movw	r24, r18
    8eac:	10 c0       	rjmp	.+32     	; 0x8ece <atodigit+0x30>
    8eae:	9c 01       	movw	r18, r24
    8eb0:	21 54       	subi	r18, 0x41	; 65
    8eb2:	31 09       	sbc	r19, r1
    8eb4:	26 30       	cpi	r18, 0x06	; 6
    8eb6:	31 05       	cpc	r19, r1
    8eb8:	10 f4       	brcc	.+4      	; 0x8ebe <atodigit+0x20>
    8eba:	c7 97       	sbiw	r24, 0x37	; 55
    8ebc:	08 c0       	rjmp	.+16     	; 0x8ece <atodigit+0x30>
    8ebe:	9c 01       	movw	r18, r24
    8ec0:	21 56       	subi	r18, 0x61	; 97
    8ec2:	31 09       	sbc	r19, r1
    8ec4:	26 30       	cpi	r18, 0x06	; 6
    8ec6:	31 05       	cpc	r19, r1
    8ec8:	28 f4       	brcc	.+10     	; 0x8ed4 <atodigit+0x36>
    8eca:	87 55       	subi	r24, 0x57	; 87
    8ecc:	91 09       	sbc	r25, r1
    8ece:	86 17       	cp	r24, r22
    8ed0:	97 07       	cpc	r25, r23
    8ed2:	14 f0       	brlt	.+4      	; 0x8ed8 <atodigit+0x3a>
    8ed4:	8f ef       	ldi	r24, 0xFF	; 255
    8ed6:	9f ef       	ldi	r25, 0xFF	; 255
    8ed8:	08 95       	ret

00008eda <strtol>:
    8eda:	a0 e0       	ldi	r26, 0x00	; 0
    8edc:	b0 e0       	ldi	r27, 0x00	; 0
    8ede:	e3 e7       	ldi	r30, 0x73	; 115
    8ee0:	f7 e4       	ldi	r31, 0x47	; 71
    8ee2:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    8ee6:	2b 01       	movw	r4, r22
    8ee8:	8a 01       	movw	r16, r20
    8eea:	ec 01       	movw	r28, r24
    8eec:	28 81       	ld	r18, Y
    8eee:	01 96       	adiw	r24, 0x01	; 1
    8ef0:	20 32       	cpi	r18, 0x20	; 32
    8ef2:	d9 f3       	breq	.-10     	; 0x8eea <strtol+0x10>
    8ef4:	29 30       	cpi	r18, 0x09	; 9
    8ef6:	c9 f3       	breq	.-14     	; 0x8eea <strtol+0x10>
    8ef8:	2d 32       	cpi	r18, 0x2D	; 45
    8efa:	29 f4       	brne	.+10     	; 0x8f06 <strtol+0x2c>
    8efc:	ec 01       	movw	r28, r24
    8efe:	66 24       	eor	r6, r6
    8f00:	63 94       	inc	r6
    8f02:	71 2c       	mov	r7, r1
    8f04:	05 c0       	rjmp	.+10     	; 0x8f10 <strtol+0x36>
    8f06:	2b 32       	cpi	r18, 0x2B	; 43
    8f08:	09 f4       	brne	.+2      	; 0x8f0c <strtol+0x32>
    8f0a:	ec 01       	movw	r28, r24
    8f0c:	61 2c       	mov	r6, r1
    8f0e:	71 2c       	mov	r7, r1
    8f10:	9e 01       	movw	r18, r28
    8f12:	2f 5f       	subi	r18, 0xFF	; 255
    8f14:	3f 4f       	sbci	r19, 0xFF	; 255
    8f16:	88 81       	ld	r24, Y
    8f18:	80 33       	cpi	r24, 0x30	; 48
    8f1a:	11 f4       	brne	.+4      	; 0x8f20 <strtol+0x46>
    8f1c:	e9 01       	movw	r28, r18
    8f1e:	f8 cf       	rjmp	.-16     	; 0x8f10 <strtol+0x36>
    8f20:	c1 2c       	mov	r12, r1
    8f22:	d1 2c       	mov	r13, r1
    8f24:	76 01       	movw	r14, r12
    8f26:	48 01       	movw	r8, r16
    8f28:	01 2e       	mov	r0, r17
    8f2a:	00 0c       	add	r0, r0
    8f2c:	aa 08       	sbc	r10, r10
    8f2e:	bb 08       	sbc	r11, r11
    8f30:	3c 2e       	mov	r3, r28
    8f32:	2d 2e       	mov	r2, r29
    8f34:	89 91       	ld	r24, Y+
    8f36:	88 23       	and	r24, r24
    8f38:	31 f0       	breq	.+12     	; 0x8f46 <strtol+0x6c>
    8f3a:	b8 01       	movw	r22, r16
    8f3c:	90 e0       	ldi	r25, 0x00	; 0
    8f3e:	af df       	rcall	.-162    	; 0x8e9e <atodigit>
    8f40:	fc 01       	movw	r30, r24
    8f42:	97 ff       	sbrs	r25, 7
    8f44:	0c c0       	rjmp	.+24     	; 0x8f5e <strtol+0x84>
    8f46:	61 14       	cp	r6, r1
    8f48:	71 04       	cpc	r7, r1
    8f4a:	c1 f0       	breq	.+48     	; 0x8f7c <strtol+0xa2>
    8f4c:	f0 94       	com	r15
    8f4e:	e0 94       	com	r14
    8f50:	d0 94       	com	r13
    8f52:	c0 94       	com	r12
    8f54:	c1 1c       	adc	r12, r1
    8f56:	d1 1c       	adc	r13, r1
    8f58:	e1 1c       	adc	r14, r1
    8f5a:	f1 1c       	adc	r15, r1
    8f5c:	0f c0       	rjmp	.+30     	; 0x8f7c <strtol+0xa2>
    8f5e:	a5 01       	movw	r20, r10
    8f60:	94 01       	movw	r18, r8
    8f62:	c7 01       	movw	r24, r14
    8f64:	b6 01       	movw	r22, r12
    8f66:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__mulsi3>
    8f6a:	6f 01       	movw	r12, r30
    8f6c:	ff 0f       	add	r31, r31
    8f6e:	ee 08       	sbc	r14, r14
    8f70:	ff 08       	sbc	r15, r15
    8f72:	c6 0e       	add	r12, r22
    8f74:	d7 1e       	adc	r13, r23
    8f76:	e8 1e       	adc	r14, r24
    8f78:	f9 1e       	adc	r15, r25
    8f7a:	da cf       	rjmp	.-76     	; 0x8f30 <strtol+0x56>
    8f7c:	41 14       	cp	r4, r1
    8f7e:	51 04       	cpc	r5, r1
    8f80:	19 f0       	breq	.+6      	; 0x8f88 <strtol+0xae>
    8f82:	f2 01       	movw	r30, r4
    8f84:	30 82       	st	Z, r3
    8f86:	21 82       	std	Z+1, r2	; 0x01
    8f88:	c7 01       	movw	r24, r14
    8f8a:	b6 01       	movw	r22, r12
    8f8c:	cd b7       	in	r28, 0x3d	; 61
    8f8e:	de b7       	in	r29, 0x3e	; 62
    8f90:	e2 e1       	ldi	r30, 0x12	; 18
    8f92:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

00008f96 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f96:	4a e0       	ldi	r20, 0x0A	; 10
    8f98:	50 e0       	ldi	r21, 0x00	; 0
    8f9a:	60 e0       	ldi	r22, 0x00	; 0
    8f9c:	70 e0       	ldi	r23, 0x00	; 0
    8f9e:	9d df       	rcall	.-198    	; 0x8eda <strtol>
    return((int)num);
}
    8fa0:	cb 01       	movw	r24, r22
    8fa2:	08 95       	ret

00008fa4 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8fa4:	4a e0       	ldi	r20, 0x0A	; 10
    8fa6:	50 e0       	ldi	r21, 0x00	; 0
    8fa8:	60 e0       	ldi	r22, 0x00	; 0
    8faa:	70 e0       	ldi	r23, 0x00	; 0
    8fac:	96 cf       	rjmp	.-212    	; 0x8eda <strtol>
    return(num);
}
    8fae:	08 95       	ret

00008fb0 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8fb0:	fc 01       	movw	r30, r24
    8fb2:	62 81       	ldd	r22, Z+2	; 0x02
    8fb4:	73 81       	ldd	r23, Z+3	; 0x03
    8fb6:	cb 01       	movw	r24, r22
    8fb8:	a0 e0       	ldi	r26, 0x00	; 0
    8fba:	b0 e0       	ldi	r27, 0x00	; 0
    8fbc:	ba 2f       	mov	r27, r26
    8fbe:	a9 2f       	mov	r26, r25
    8fc0:	98 2f       	mov	r25, r24
    8fc2:	88 27       	eor	r24, r24
    8fc4:	21 81       	ldd	r18, Z+1	; 0x01
    8fc6:	82 2b       	or	r24, r18
    8fc8:	ba 2f       	mov	r27, r26
    8fca:	a9 2f       	mov	r26, r25
    8fcc:	98 2f       	mov	r25, r24
    8fce:	88 27       	eor	r24, r24
    8fd0:	20 81       	ld	r18, Z
    8fd2:	bc 01       	movw	r22, r24
    8fd4:	cd 01       	movw	r24, r26
    8fd6:	62 2b       	or	r22, r18
    8fd8:	08 95       	ret

00008fda <st_dword>:
    8fda:	fc 01       	movw	r30, r24
    8fdc:	40 83       	st	Z, r20
    8fde:	51 83       	std	Z+1, r21	; 0x01
    8fe0:	62 83       	std	Z+2, r22	; 0x02
    8fe2:	73 83       	std	Z+3, r23	; 0x03
    8fe4:	08 95       	ret

00008fe6 <mem_set>:
    8fe6:	48 0f       	add	r20, r24
    8fe8:	59 1f       	adc	r21, r25
    8fea:	fc 01       	movw	r30, r24
    8fec:	61 93       	st	Z+, r22
    8fee:	cf 01       	movw	r24, r30
    8ff0:	e4 17       	cp	r30, r20
    8ff2:	f5 07       	cpc	r31, r21
    8ff4:	d1 f7       	brne	.-12     	; 0x8fea <mem_set+0x4>
    8ff6:	08 95       	ret

00008ff8 <mem_cmp>:
    8ff8:	dc 01       	movw	r26, r24
    8ffa:	fb 01       	movw	r30, r22
    8ffc:	2d 91       	ld	r18, X+
    8ffe:	81 91       	ld	r24, Z+
    9000:	30 e0       	ldi	r19, 0x00	; 0
    9002:	b9 01       	movw	r22, r18
    9004:	68 1b       	sub	r22, r24
    9006:	71 09       	sbc	r23, r1
    9008:	cb 01       	movw	r24, r22
    900a:	41 50       	subi	r20, 0x01	; 1
    900c:	51 09       	sbc	r21, r1
    900e:	11 f0       	breq	.+4      	; 0x9014 <mem_cmp+0x1c>
    9010:	00 97       	sbiw	r24, 0x00	; 0
    9012:	a1 f3       	breq	.-24     	; 0x8ffc <mem_cmp+0x4>
    9014:	08 95       	ret

00009016 <clst2sect>:
    9016:	0f 93       	push	r16
    9018:	1f 93       	push	r17
    901a:	fc 01       	movw	r30, r24
    901c:	9a 01       	movw	r18, r20
    901e:	ab 01       	movw	r20, r22
    9020:	22 50       	subi	r18, 0x02	; 2
    9022:	31 09       	sbc	r19, r1
    9024:	41 09       	sbc	r20, r1
    9026:	51 09       	sbc	r21, r1
    9028:	81 8d       	ldd	r24, Z+25	; 0x19
    902a:	92 8d       	ldd	r25, Z+26	; 0x1a
    902c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    902e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9030:	02 97       	sbiw	r24, 0x02	; 2
    9032:	a1 09       	sbc	r26, r1
    9034:	b1 09       	sbc	r27, r1
    9036:	28 17       	cp	r18, r24
    9038:	39 07       	cpc	r19, r25
    903a:	4a 07       	cpc	r20, r26
    903c:	5b 07       	cpc	r21, r27
    903e:	68 f4       	brcc	.+26     	; 0x905a <clst2sect+0x44>
    9040:	a1 85       	ldd	r26, Z+9	; 0x09
    9042:	b2 85       	ldd	r27, Z+10	; 0x0a
    9044:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
    9048:	05 a5       	ldd	r16, Z+45	; 0x2d
    904a:	16 a5       	ldd	r17, Z+46	; 0x2e
    904c:	27 a5       	ldd	r18, Z+47	; 0x2f
    904e:	30 a9       	ldd	r19, Z+48	; 0x30
    9050:	60 0f       	add	r22, r16
    9052:	71 1f       	adc	r23, r17
    9054:	82 1f       	adc	r24, r18
    9056:	93 1f       	adc	r25, r19
    9058:	03 c0       	rjmp	.+6      	; 0x9060 <clst2sect+0x4a>
    905a:	60 e0       	ldi	r22, 0x00	; 0
    905c:	70 e0       	ldi	r23, 0x00	; 0
    905e:	cb 01       	movw	r24, r22
    9060:	1f 91       	pop	r17
    9062:	0f 91       	pop	r16
    9064:	08 95       	ret

00009066 <clmt_clust>:
    9066:	cf 93       	push	r28
    9068:	df 93       	push	r29
    906a:	fc 01       	movw	r30, r24
    906c:	c2 a1       	ldd	r28, Z+34	; 0x22
    906e:	d3 a1       	ldd	r29, Z+35	; 0x23
    9070:	24 96       	adiw	r28, 0x04	; 4
    9072:	cb 01       	movw	r24, r22
    9074:	ba 01       	movw	r22, r20
    9076:	29 e0       	ldi	r18, 0x09	; 9
    9078:	96 95       	lsr	r25
    907a:	87 95       	ror	r24
    907c:	77 95       	ror	r23
    907e:	67 95       	ror	r22
    9080:	2a 95       	dec	r18
    9082:	d1 f7       	brne	.-12     	; 0x9078 <clmt_clust+0x12>
    9084:	01 90       	ld	r0, Z+
    9086:	f0 81       	ld	r31, Z
    9088:	e0 2d       	mov	r30, r0
    908a:	21 85       	ldd	r18, Z+9	; 0x09
    908c:	32 85       	ldd	r19, Z+10	; 0x0a
    908e:	40 e0       	ldi	r20, 0x00	; 0
    9090:	50 e0       	ldi	r21, 0x00	; 0
    9092:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    9096:	88 81       	ld	r24, Y
    9098:	99 81       	ldd	r25, Y+1	; 0x01
    909a:	aa 81       	ldd	r26, Y+2	; 0x02
    909c:	bb 81       	ldd	r27, Y+3	; 0x03
    909e:	00 97       	sbiw	r24, 0x00	; 0
    90a0:	a1 05       	cpc	r26, r1
    90a2:	b1 05       	cpc	r27, r1
    90a4:	b1 f0       	breq	.+44     	; 0x90d2 <clmt_clust+0x6c>
    90a6:	28 17       	cp	r18, r24
    90a8:	39 07       	cpc	r19, r25
    90aa:	4a 07       	cpc	r20, r26
    90ac:	5b 07       	cpc	r21, r27
    90ae:	30 f0       	brcs	.+12     	; 0x90bc <clmt_clust+0x56>
    90b0:	28 1b       	sub	r18, r24
    90b2:	39 0b       	sbc	r19, r25
    90b4:	4a 0b       	sbc	r20, r26
    90b6:	5b 0b       	sbc	r21, r27
    90b8:	28 96       	adiw	r28, 0x08	; 8
    90ba:	ed cf       	rjmp	.-38     	; 0x9096 <clmt_clust+0x30>
    90bc:	8c 81       	ldd	r24, Y+4	; 0x04
    90be:	9d 81       	ldd	r25, Y+5	; 0x05
    90c0:	ae 81       	ldd	r26, Y+6	; 0x06
    90c2:	bf 81       	ldd	r27, Y+7	; 0x07
    90c4:	bc 01       	movw	r22, r24
    90c6:	cd 01       	movw	r24, r26
    90c8:	62 0f       	add	r22, r18
    90ca:	73 1f       	adc	r23, r19
    90cc:	84 1f       	adc	r24, r20
    90ce:	95 1f       	adc	r25, r21
    90d0:	03 c0       	rjmp	.+6      	; 0x90d8 <clmt_clust+0x72>
    90d2:	60 e0       	ldi	r22, 0x00	; 0
    90d4:	70 e0       	ldi	r23, 0x00	; 0
    90d6:	cb 01       	movw	r24, r22
    90d8:	df 91       	pop	r29
    90da:	cf 91       	pop	r28
    90dc:	08 95       	ret

000090de <sum_sfn>:
    90de:	fc 01       	movw	r30, r24
    90e0:	9c 01       	movw	r18, r24
    90e2:	25 5f       	subi	r18, 0xF5	; 245
    90e4:	3f 4f       	sbci	r19, 0xFF	; 255
    90e6:	80 e0       	ldi	r24, 0x00	; 0
    90e8:	98 2f       	mov	r25, r24
    90ea:	90 fb       	bst	r25, 0
    90ec:	97 95       	ror	r25
    90ee:	97 f9       	bld	r25, 7
    90f0:	81 91       	ld	r24, Z+
    90f2:	89 0f       	add	r24, r25
    90f4:	e2 17       	cp	r30, r18
    90f6:	f3 07       	cpc	r31, r19
    90f8:	b9 f7       	brne	.-18     	; 0x90e8 <sum_sfn+0xa>
    90fa:	08 95       	ret

000090fc <get_ldnumber>:
    90fc:	cf 93       	push	r28
    90fe:	df 93       	push	r29
    9100:	dc 01       	movw	r26, r24
    9102:	ed 91       	ld	r30, X+
    9104:	fc 91       	ld	r31, X
    9106:	11 97       	sbiw	r26, 0x01	; 1
    9108:	30 97       	sbiw	r30, 0x00	; 0
    910a:	f9 f0       	breq	.+62     	; 0x914a <get_ldnumber+0x4e>
    910c:	9f 01       	movw	r18, r30
    910e:	2f 5f       	subi	r18, 0xFF	; 255
    9110:	3f 4f       	sbci	r19, 0xFF	; 255
    9112:	e9 01       	movw	r28, r18
    9114:	21 97       	sbiw	r28, 0x01	; 1
    9116:	88 81       	ld	r24, Y
    9118:	80 32       	cpi	r24, 0x20	; 32
    911a:	18 f0       	brcs	.+6      	; 0x9122 <get_ldnumber+0x26>
    911c:	8a 33       	cpi	r24, 0x3A	; 58
    911e:	b9 f7       	brne	.-18     	; 0x910e <get_ldnumber+0x12>
    9120:	04 c0       	rjmp	.+8      	; 0x912a <get_ldnumber+0x2e>
    9122:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <CurrVol>
    9126:	90 e0       	ldi	r25, 0x00	; 0
    9128:	12 c0       	rjmp	.+36     	; 0x914e <get_ldnumber+0x52>
    912a:	90 81       	ld	r25, Z
    912c:	80 ed       	ldi	r24, 0xD0	; 208
    912e:	89 0f       	add	r24, r25
    9130:	8a 30       	cpi	r24, 0x0A	; 10
    9132:	58 f4       	brcc	.+22     	; 0x914a <get_ldnumber+0x4e>
    9134:	32 96       	adiw	r30, 0x02	; 2
    9136:	2e 17       	cp	r18, r30
    9138:	3f 07       	cpc	r19, r31
    913a:	39 f4       	brne	.+14     	; 0x914a <get_ldnumber+0x4e>
    913c:	90 33       	cpi	r25, 0x30	; 48
    913e:	29 f4       	brne	.+10     	; 0x914a <get_ldnumber+0x4e>
    9140:	2d 93       	st	X+, r18
    9142:	3c 93       	st	X, r19
    9144:	80 e0       	ldi	r24, 0x00	; 0
    9146:	90 e0       	ldi	r25, 0x00	; 0
    9148:	02 c0       	rjmp	.+4      	; 0x914e <get_ldnumber+0x52>
    914a:	8f ef       	ldi	r24, 0xFF	; 255
    914c:	9f ef       	ldi	r25, 0xFF	; 255
    914e:	df 91       	pop	r29
    9150:	cf 91       	pop	r28
    9152:	08 95       	ret

00009154 <validate>:
    9154:	0f 93       	push	r16
    9156:	1f 93       	push	r17
    9158:	cf 93       	push	r28
    915a:	df 93       	push	r29
    915c:	ec 01       	movw	r28, r24
    915e:	8b 01       	movw	r16, r22
    9160:	89 2b       	or	r24, r25
    9162:	f9 f0       	breq	.+62     	; 0x91a2 <validate+0x4e>
    9164:	e8 81       	ld	r30, Y
    9166:	f9 81       	ldd	r31, Y+1	; 0x01
    9168:	30 97       	sbiw	r30, 0x00	; 0
    916a:	d9 f0       	breq	.+54     	; 0x91a2 <validate+0x4e>
    916c:	80 81       	ld	r24, Z
    916e:	88 23       	and	r24, r24
    9170:	c1 f0       	breq	.+48     	; 0x91a2 <validate+0x4e>
    9172:	2a 81       	ldd	r18, Y+2	; 0x02
    9174:	3b 81       	ldd	r19, Y+3	; 0x03
    9176:	85 81       	ldd	r24, Z+5	; 0x05
    9178:	96 81       	ldd	r25, Z+6	; 0x06
    917a:	28 17       	cp	r18, r24
    917c:	39 07       	cpc	r19, r25
    917e:	89 f4       	brne	.+34     	; 0x91a2 <validate+0x4e>
    9180:	81 81       	ldd	r24, Z+1	; 0x01
    9182:	0e 94 c0 69 	call	0xd380	; 0xd380 <disk_status>
    9186:	80 fd       	sbrc	r24, 0
    9188:	0c c0       	rjmp	.+24     	; 0x91a2 <validate+0x4e>
    918a:	28 81       	ld	r18, Y
    918c:	39 81       	ldd	r19, Y+1	; 0x01
    918e:	80 e0       	ldi	r24, 0x00	; 0
    9190:	90 e0       	ldi	r25, 0x00	; 0
    9192:	f8 01       	movw	r30, r16
    9194:	31 83       	std	Z+1, r19	; 0x01
    9196:	20 83       	st	Z, r18
    9198:	df 91       	pop	r29
    919a:	cf 91       	pop	r28
    919c:	1f 91       	pop	r17
    919e:	0f 91       	pop	r16
    91a0:	08 95       	ret
    91a2:	89 e0       	ldi	r24, 0x09	; 9
    91a4:	90 e0       	ldi	r25, 0x00	; 0
    91a6:	20 e0       	ldi	r18, 0x00	; 0
    91a8:	30 e0       	ldi	r19, 0x00	; 0
    91aa:	f3 cf       	rjmp	.-26     	; 0x9192 <validate+0x3e>

000091ac <get_fileinfo>:
    91ac:	a8 e0       	ldi	r26, 0x08	; 8
    91ae:	b0 e0       	ldi	r27, 0x00	; 0
    91b0:	ec ed       	ldi	r30, 0xDC	; 220
    91b2:	f8 e4       	ldi	r31, 0x48	; 72
    91b4:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    91b8:	fc 01       	movw	r30, r24
    91ba:	01 90       	ld	r0, Z+
    91bc:	f0 81       	ld	r31, Z
    91be:	e0 2d       	mov	r30, r0
    91c0:	f8 87       	std	Y+8, r31	; 0x08
    91c2:	ef 83       	std	Y+7, r30	; 0x07
    91c4:	fb 01       	movw	r30, r22
    91c6:	16 8a       	std	Z+22, r1	; 0x16
    91c8:	fc 01       	movw	r30, r24
    91ca:	06 89       	ldd	r16, Z+22	; 0x16
    91cc:	17 89       	ldd	r17, Z+23	; 0x17
    91ce:	20 8d       	ldd	r18, Z+24	; 0x18
    91d0:	31 8d       	ldd	r19, Z+25	; 0x19
    91d2:	01 15       	cp	r16, r1
    91d4:	11 05       	cpc	r17, r1
    91d6:	21 05       	cpc	r18, r1
    91d8:	31 05       	cpc	r19, r1
    91da:	09 f4       	brne	.+2      	; 0x91de <get_fileinfo+0x32>
    91dc:	0d c1       	rjmp	.+538    	; 0x93f8 <get_fileinfo+0x24c>
    91de:	7e 83       	std	Y+6, r23	; 0x06
    91e0:	6d 83       	std	Y+5, r22	; 0x05
    91e2:	7c 01       	movw	r14, r24
    91e4:	80 a5       	ldd	r24, Z+40	; 0x28
    91e6:	91 a5       	ldd	r25, Z+41	; 0x29
    91e8:	a2 a5       	ldd	r26, Z+42	; 0x2a
    91ea:	b3 a5       	ldd	r27, Z+43	; 0x2b
    91ec:	8f 3f       	cpi	r24, 0xFF	; 255
    91ee:	9f 4f       	sbci	r25, 0xFF	; 255
    91f0:	af 4f       	sbci	r26, 0xFF	; 255
    91f2:	bf 4f       	sbci	r27, 0xFF	; 255
    91f4:	09 f4       	brne	.+2      	; 0x91f8 <get_fileinfo+0x4c>
    91f6:	6c c0       	rjmp	.+216    	; 0x92d0 <get_fileinfo+0x124>
    91f8:	a1 2c       	mov	r10, r1
    91fa:	b1 2c       	mov	r11, r1
    91fc:	c1 2c       	mov	r12, r1
    91fe:	d1 2c       	mov	r13, r1
    9200:	00 e0       	ldi	r16, 0x00	; 0
    9202:	10 e0       	ldi	r17, 0x00	; 0
    9204:	66 24       	eor	r6, r6
    9206:	6a 94       	dec	r6
    9208:	71 2c       	mov	r7, r1
    920a:	ef 81       	ldd	r30, Y+7	; 0x07
    920c:	f8 85       	ldd	r31, Y+8	; 0x08
    920e:	83 85       	ldd	r24, Z+11	; 0x0b
    9210:	94 85       	ldd	r25, Z+12	; 0x0c
    9212:	fc 01       	movw	r30, r24
    9214:	ea 0d       	add	r30, r10
    9216:	fb 1d       	adc	r31, r11
    9218:	80 81       	ld	r24, Z
    921a:	91 81       	ldd	r25, Z+1	; 0x01
    921c:	00 97       	sbiw	r24, 0x00	; 0
    921e:	09 f4       	brne	.+2      	; 0x9222 <get_fileinfo+0x76>
    9220:	4d c0       	rjmp	.+154    	; 0x92bc <get_fileinfo+0x110>
    9222:	c1 14       	cp	r12, r1
    9224:	d1 04       	cpc	r13, r1
    9226:	29 f4       	brne	.+10     	; 0x9232 <get_fileinfo+0x86>
    9228:	9c 01       	movw	r18, r24
    922a:	38 5d       	subi	r19, 0xD8	; 216
    922c:	21 15       	cp	r18, r1
    922e:	38 40       	sbci	r19, 0x08	; 8
    9230:	f0 f1       	brcs	.+124    	; 0x92ae <get_fileinfo+0x102>
    9232:	43 01       	movw	r8, r6
    9234:	80 1a       	sub	r8, r16
    9236:	91 0a       	sbc	r9, r17
    9238:	a6 01       	movw	r20, r12
    923a:	60 e0       	ldi	r22, 0x00	; 0
    923c:	70 e0       	ldi	r23, 0x00	; 0
    923e:	2a 01       	movw	r4, r20
    9240:	33 24       	eor	r3, r3
    9242:	22 24       	eor	r2, r2
    9244:	a0 e0       	ldi	r26, 0x00	; 0
    9246:	b0 e0       	ldi	r27, 0x00	; 0
    9248:	28 2a       	or	r2, r24
    924a:	39 2a       	or	r3, r25
    924c:	4a 2a       	or	r4, r26
    924e:	5b 2a       	or	r5, r27
    9250:	c2 01       	movw	r24, r4
    9252:	b1 01       	movw	r22, r2
    9254:	45 eb       	ldi	r20, 0xB5	; 181
    9256:	51 e0       	ldi	r21, 0x01	; 1
    9258:	0e 94 16 69 	call	0xd22c	; 0xd22c <ff_uni2oem>
    925c:	8f 3f       	cpi	r24, 0xFF	; 255
    925e:	91 05       	cpc	r25, r1
    9260:	89 f0       	breq	.+34     	; 0x9284 <get_fileinfo+0xd8>
    9262:	80 f0       	brcs	.+32     	; 0x9284 <get_fileinfo+0xd8>
    9264:	22 e0       	ldi	r18, 0x02	; 2
    9266:	82 16       	cp	r8, r18
    9268:	91 04       	cpc	r9, r1
    926a:	c0 f0       	brcs	.+48     	; 0x929c <get_fileinfo+0xf0>
    926c:	ed 81       	ldd	r30, Y+5	; 0x05
    926e:	fe 81       	ldd	r31, Y+6	; 0x06
    9270:	e0 0f       	add	r30, r16
    9272:	f1 1f       	adc	r31, r17
    9274:	96 8b       	std	Z+22, r25	; 0x16
    9276:	ed 81       	ldd	r30, Y+5	; 0x05
    9278:	fe 81       	ldd	r31, Y+6	; 0x06
    927a:	e0 0f       	add	r30, r16
    927c:	f1 1f       	adc	r31, r17
    927e:	87 8b       	std	Z+23, r24	; 0x17
    9280:	82 e0       	ldi	r24, 0x02	; 2
    9282:	0d c0       	rjmp	.+26     	; 0x929e <get_fileinfo+0xf2>
    9284:	00 97       	sbiw	r24, 0x00	; 0
    9286:	51 f0       	breq	.+20     	; 0x929c <get_fileinfo+0xf0>
    9288:	81 14       	cp	r8, r1
    928a:	91 04       	cpc	r9, r1
    928c:	39 f0       	breq	.+14     	; 0x929c <get_fileinfo+0xf0>
    928e:	ed 81       	ldd	r30, Y+5	; 0x05
    9290:	fe 81       	ldd	r31, Y+6	; 0x06
    9292:	e0 0f       	add	r30, r16
    9294:	f1 1f       	adc	r31, r17
    9296:	86 8b       	std	Z+22, r24	; 0x16
    9298:	81 e0       	ldi	r24, 0x01	; 1
    929a:	01 c0       	rjmp	.+2      	; 0x929e <get_fileinfo+0xf2>
    929c:	80 e0       	ldi	r24, 0x00	; 0
    929e:	28 2f       	mov	r18, r24
    92a0:	30 e0       	ldi	r19, 0x00	; 0
    92a2:	88 23       	and	r24, r24
    92a4:	49 f0       	breq	.+18     	; 0x92b8 <get_fileinfo+0x10c>
    92a6:	02 0f       	add	r16, r18
    92a8:	13 1f       	adc	r17, r19
    92aa:	80 e0       	ldi	r24, 0x00	; 0
    92ac:	90 e0       	ldi	r25, 0x00	; 0
    92ae:	32 e0       	ldi	r19, 0x02	; 2
    92b0:	a3 0e       	add	r10, r19
    92b2:	b1 1c       	adc	r11, r1
    92b4:	6c 01       	movw	r12, r24
    92b6:	a9 cf       	rjmp	.-174    	; 0x920a <get_fileinfo+0x5e>
    92b8:	00 e0       	ldi	r16, 0x00	; 0
    92ba:	10 e0       	ldi	r17, 0x00	; 0
    92bc:	c1 14       	cp	r12, r1
    92be:	d1 04       	cpc	r13, r1
    92c0:	11 f0       	breq	.+4      	; 0x92c6 <get_fileinfo+0x11a>
    92c2:	00 e0       	ldi	r16, 0x00	; 0
    92c4:	10 e0       	ldi	r17, 0x00	; 0
    92c6:	ed 81       	ldd	r30, Y+5	; 0x05
    92c8:	fe 81       	ldd	r31, Y+6	; 0x06
    92ca:	e0 0f       	add	r30, r16
    92cc:	f1 1f       	adc	r31, r17
    92ce:	16 8a       	std	Z+22, r1	; 0x16
    92d0:	80 e0       	ldi	r24, 0x00	; 0
    92d2:	90 e0       	ldi	r25, 0x00	; 0
    92d4:	20 e0       	ldi	r18, 0x00	; 0
    92d6:	30 e0       	ldi	r19, 0x00	; 0
    92d8:	6e e2       	ldi	r22, 0x2E	; 46
    92da:	a9 01       	movw	r20, r18
    92dc:	4f 5f       	subi	r20, 0xFF	; 255
    92de:	5f 4f       	sbci	r21, 0xFF	; 255
    92e0:	f7 01       	movw	r30, r14
    92e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    92e4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    92e6:	fd 01       	movw	r30, r26
    92e8:	e2 0f       	add	r30, r18
    92ea:	f3 1f       	adc	r31, r19
    92ec:	20 81       	ld	r18, Z
    92ee:	30 e0       	ldi	r19, 0x00	; 0
    92f0:	20 32       	cpi	r18, 0x20	; 32
    92f2:	31 05       	cpc	r19, r1
    92f4:	b9 f0       	breq	.+46     	; 0x9324 <get_fileinfo+0x178>
    92f6:	25 30       	cpi	r18, 0x05	; 5
    92f8:	31 05       	cpc	r19, r1
    92fa:	11 f4       	brne	.+4      	; 0x9300 <get_fileinfo+0x154>
    92fc:	25 ee       	ldi	r18, 0xE5	; 229
    92fe:	30 e0       	ldi	r19, 0x00	; 0
    9300:	49 30       	cpi	r20, 0x09	; 9
    9302:	51 05       	cpc	r21, r1
    9304:	49 f4       	brne	.+18     	; 0x9318 <get_fileinfo+0x16c>
    9306:	8c 30       	cpi	r24, 0x0C	; 12
    9308:	91 05       	cpc	r25, r1
    930a:	30 f4       	brcc	.+12     	; 0x9318 <get_fileinfo+0x16c>
    930c:	ed 81       	ldd	r30, Y+5	; 0x05
    930e:	fe 81       	ldd	r31, Y+6	; 0x06
    9310:	e8 0f       	add	r30, r24
    9312:	f9 1f       	adc	r31, r25
    9314:	61 87       	std	Z+9, r22	; 0x09
    9316:	01 96       	adiw	r24, 0x01	; 1
    9318:	ed 81       	ldd	r30, Y+5	; 0x05
    931a:	fe 81       	ldd	r31, Y+6	; 0x06
    931c:	e8 0f       	add	r30, r24
    931e:	f9 1f       	adc	r31, r25
    9320:	21 87       	std	Z+9, r18	; 0x09
    9322:	01 96       	adiw	r24, 0x01	; 1
    9324:	9a 01       	movw	r18, r20
    9326:	4b 30       	cpi	r20, 0x0B	; 11
    9328:	51 05       	cpc	r21, r1
    932a:	b9 f6       	brne	.-82     	; 0x92da <get_fileinfo+0x12e>
    932c:	ed 81       	ldd	r30, Y+5	; 0x05
    932e:	fe 81       	ldd	r31, Y+6	; 0x06
    9330:	e8 0f       	add	r30, r24
    9332:	f9 1f       	adc	r31, r25
    9334:	11 86       	std	Z+9, r1	; 0x09
    9336:	ed 81       	ldd	r30, Y+5	; 0x05
    9338:	fe 81       	ldd	r31, Y+6	; 0x06
    933a:	26 89       	ldd	r18, Z+22	; 0x16
    933c:	21 11       	cpse	r18, r1
    933e:	3a c0       	rjmp	.+116    	; 0x93b4 <get_fileinfo+0x208>
    9340:	89 2b       	or	r24, r25
    9342:	31 f0       	breq	.+12     	; 0x9350 <get_fileinfo+0x1a4>
    9344:	df 01       	movw	r26, r30
    9346:	19 96       	adiw	r26, 0x09	; 9
    9348:	58 e0       	ldi	r21, 0x08	; 8
    934a:	20 e0       	ldi	r18, 0x00	; 0
    934c:	30 e0       	ldi	r19, 0x00	; 0
    934e:	16 c0       	rjmp	.+44     	; 0x937c <get_fileinfo+0x1d0>
    9350:	8f e3       	ldi	r24, 0x3F	; 63
    9352:	ed 81       	ldd	r30, Y+5	; 0x05
    9354:	fe 81       	ldd	r31, Y+6	; 0x06
    9356:	86 8b       	std	Z+22, r24	; 0x16
    9358:	21 e0       	ldi	r18, 0x01	; 1
    935a:	30 e0       	ldi	r19, 0x00	; 0
    935c:	1c c0       	rjmp	.+56     	; 0x9396 <get_fileinfo+0x1ea>
    935e:	90 e0       	ldi	r25, 0x00	; 0
    9360:	8e 32       	cpi	r24, 0x2E	; 46
    9362:	91 05       	cpc	r25, r1
    9364:	09 f4       	brne	.+2      	; 0x9368 <get_fileinfo+0x1bc>
    9366:	50 e1       	ldi	r21, 0x10	; 16
    9368:	bc 01       	movw	r22, r24
    936a:	61 54       	subi	r22, 0x41	; 65
    936c:	71 09       	sbc	r23, r1
    936e:	6a 31       	cpi	r22, 0x1A	; 26
    9370:	71 05       	cpc	r23, r1
    9372:	40 f0       	brcs	.+16     	; 0x9384 <get_fileinfo+0x1d8>
    9374:	fd 01       	movw	r30, r26
    9376:	84 87       	std	Z+12, r24	; 0x0c
    9378:	2f 5f       	subi	r18, 0xFF	; 255
    937a:	3f 4f       	sbci	r19, 0xFF	; 255
    937c:	8d 91       	ld	r24, X+
    937e:	81 11       	cpse	r24, r1
    9380:	ee cf       	rjmp	.-36     	; 0x935e <get_fileinfo+0x1b2>
    9382:	09 c0       	rjmp	.+18     	; 0x9396 <get_fileinfo+0x1ea>
    9384:	f7 01       	movw	r30, r14
    9386:	62 8d       	ldd	r22, Z+26	; 0x1a
    9388:	73 8d       	ldd	r23, Z+27	; 0x1b
    938a:	fb 01       	movw	r30, r22
    938c:	44 85       	ldd	r20, Z+12	; 0x0c
    938e:	45 23       	and	r20, r21
    9390:	89 f3       	breq	.-30     	; 0x9374 <get_fileinfo+0x1c8>
    9392:	80 96       	adiw	r24, 0x20	; 32
    9394:	ef cf       	rjmp	.-34     	; 0x9374 <get_fileinfo+0x1c8>
    9396:	ed 81       	ldd	r30, Y+5	; 0x05
    9398:	fe 81       	ldd	r31, Y+6	; 0x06
    939a:	e2 0f       	add	r30, r18
    939c:	f3 1f       	adc	r31, r19
    939e:	16 8a       	std	Z+22, r1	; 0x16
    93a0:	f7 01       	movw	r30, r14
    93a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    93a4:	93 8d       	ldd	r25, Z+27	; 0x1b
    93a6:	fc 01       	movw	r30, r24
    93a8:	84 85       	ldd	r24, Z+12	; 0x0c
    93aa:	81 11       	cpse	r24, r1
    93ac:	03 c0       	rjmp	.+6      	; 0x93b4 <get_fileinfo+0x208>
    93ae:	ed 81       	ldd	r30, Y+5	; 0x05
    93b0:	fe 81       	ldd	r31, Y+6	; 0x06
    93b2:	11 86       	std	Z+9, r1	; 0x09
    93b4:	f7 01       	movw	r30, r14
    93b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    93b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    93ba:	fc 01       	movw	r30, r24
    93bc:	83 85       	ldd	r24, Z+11	; 0x0b
    93be:	ed 81       	ldd	r30, Y+5	; 0x05
    93c0:	fe 81       	ldd	r31, Y+6	; 0x06
    93c2:	80 87       	std	Z+8, r24	; 0x08
    93c4:	f7 01       	movw	r30, r14
    93c6:	02 8d       	ldd	r16, Z+26	; 0x1a
    93c8:	13 8d       	ldd	r17, Z+27	; 0x1b
    93ca:	c8 01       	movw	r24, r16
    93cc:	4c 96       	adiw	r24, 0x1c	; 28
    93ce:	f0 dd       	rcall	.-1056   	; 0x8fb0 <ld_dword>
    93d0:	ed 81       	ldd	r30, Y+5	; 0x05
    93d2:	fe 81       	ldd	r31, Y+6	; 0x06
    93d4:	60 83       	st	Z, r22
    93d6:	71 83       	std	Z+1, r23	; 0x01
    93d8:	82 83       	std	Z+2, r24	; 0x02
    93da:	93 83       	std	Z+3, r25	; 0x03
    93dc:	f8 01       	movw	r30, r16
    93de:	86 89       	ldd	r24, Z+22	; 0x16
    93e0:	97 89       	ldd	r25, Z+23	; 0x17
    93e2:	ed 81       	ldd	r30, Y+5	; 0x05
    93e4:	fe 81       	ldd	r31, Y+6	; 0x06
    93e6:	97 83       	std	Z+7, r25	; 0x07
    93e8:	86 83       	std	Z+6, r24	; 0x06
    93ea:	f8 01       	movw	r30, r16
    93ec:	80 8d       	ldd	r24, Z+24	; 0x18
    93ee:	91 8d       	ldd	r25, Z+25	; 0x19
    93f0:	ed 81       	ldd	r30, Y+5	; 0x05
    93f2:	fe 81       	ldd	r31, Y+6	; 0x06
    93f4:	95 83       	std	Z+5, r25	; 0x05
    93f6:	84 83       	std	Z+4, r24	; 0x04
    93f8:	28 96       	adiw	r28, 0x08	; 8
    93fa:	e2 e1       	ldi	r30, 0x12	; 18
    93fc:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

00009400 <mem_cpy.part.0>:
    9400:	fb 01       	movw	r30, r22
    9402:	48 0f       	add	r20, r24
    9404:	59 1f       	adc	r21, r25
    9406:	21 91       	ld	r18, Z+
    9408:	dc 01       	movw	r26, r24
    940a:	2d 93       	st	X+, r18
    940c:	cd 01       	movw	r24, r26
    940e:	a4 17       	cp	r26, r20
    9410:	b5 07       	cpc	r27, r21
    9412:	c9 f7       	brne	.-14     	; 0x9406 <mem_cpy.part.0+0x6>
    9414:	08 95       	ret

00009416 <ld_clust.isra.3>:
    9416:	fb 01       	movw	r30, r22
    9418:	42 8d       	ldd	r20, Z+26	; 0x1a
    941a:	53 8d       	ldd	r21, Z+27	; 0x1b
    941c:	60 e0       	ldi	r22, 0x00	; 0
    941e:	70 e0       	ldi	r23, 0x00	; 0
    9420:	83 30       	cpi	r24, 0x03	; 3
    9422:	59 f4       	brne	.+22     	; 0x943a <ld_clust.isra.3+0x24>
    9424:	84 89       	ldd	r24, Z+20	; 0x14
    9426:	95 89       	ldd	r25, Z+21	; 0x15
    9428:	a0 e0       	ldi	r26, 0x00	; 0
    942a:	b0 e0       	ldi	r27, 0x00	; 0
    942c:	dc 01       	movw	r26, r24
    942e:	99 27       	eor	r25, r25
    9430:	88 27       	eor	r24, r24
    9432:	48 2b       	or	r20, r24
    9434:	59 2b       	or	r21, r25
    9436:	6a 2b       	or	r22, r26
    9438:	7b 2b       	or	r23, r27
    943a:	cb 01       	movw	r24, r22
    943c:	ba 01       	movw	r22, r20
    943e:	08 95       	ret

00009440 <st_clust.isra.4>:
    9440:	fb 01       	movw	r30, r22
    9442:	22 8f       	std	Z+26, r18	; 0x1a
    9444:	33 8f       	std	Z+27, r19	; 0x1b
    9446:	dc 01       	movw	r26, r24
    9448:	8c 91       	ld	r24, X
    944a:	83 30       	cpi	r24, 0x03	; 3
    944c:	29 f4       	brne	.+10     	; 0x9458 <st_clust.isra.4+0x18>
    944e:	ca 01       	movw	r24, r20
    9450:	aa 27       	eor	r26, r26
    9452:	bb 27       	eor	r27, r27
    9454:	84 8b       	std	Z+20, r24	; 0x14
    9456:	95 8b       	std	Z+21, r25	; 0x15
    9458:	08 95       	ret

0000945a <sync_window.part.5>:
    945a:	8f 92       	push	r8
    945c:	9f 92       	push	r9
    945e:	af 92       	push	r10
    9460:	bf 92       	push	r11
    9462:	ef 92       	push	r14
    9464:	ff 92       	push	r15
    9466:	0f 93       	push	r16
    9468:	1f 93       	push	r17
    946a:	cf 93       	push	r28
    946c:	df 93       	push	r29
    946e:	ec 01       	movw	r28, r24
    9470:	7c 01       	movw	r14, r24
    9472:	45 e3       	ldi	r20, 0x35	; 53
    9474:	e4 0e       	add	r14, r20
    9476:	f1 1c       	adc	r15, r1
    9478:	29 a9       	ldd	r18, Y+49	; 0x31
    947a:	3a a9       	ldd	r19, Y+50	; 0x32
    947c:	4b a9       	ldd	r20, Y+51	; 0x33
    947e:	5c a9       	ldd	r21, Y+52	; 0x34
    9480:	01 e0       	ldi	r16, 0x01	; 1
    9482:	10 e0       	ldi	r17, 0x00	; 0
    9484:	b7 01       	movw	r22, r14
    9486:	89 81       	ldd	r24, Y+1	; 0x01
    9488:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    948c:	89 2b       	or	r24, r25
    948e:	41 f5       	brne	.+80     	; 0x94e0 <sync_window.part.5+0x86>
    9490:	1b 82       	std	Y+3, r1	; 0x03
    9492:	09 a9       	ldd	r16, Y+49	; 0x31
    9494:	1a a9       	ldd	r17, Y+50	; 0x32
    9496:	2b a9       	ldd	r18, Y+51	; 0x33
    9498:	3c a9       	ldd	r19, Y+52	; 0x34
    949a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    949c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    949e:	af 8d       	ldd	r26, Y+31	; 0x1f
    94a0:	b8 a1       	ldd	r27, Y+32	; 0x20
    94a2:	8d a0       	ldd	r8, Y+37	; 0x25
    94a4:	9e a0       	ldd	r9, Y+38	; 0x26
    94a6:	af a0       	ldd	r10, Y+39	; 0x27
    94a8:	b8 a4       	ldd	r11, Y+40	; 0x28
    94aa:	b9 01       	movw	r22, r18
    94ac:	a8 01       	movw	r20, r16
    94ae:	48 19       	sub	r20, r8
    94b0:	59 09       	sbc	r21, r9
    94b2:	6a 09       	sbc	r22, r10
    94b4:	7b 09       	sbc	r23, r11
    94b6:	48 17       	cp	r20, r24
    94b8:	59 07       	cpc	r21, r25
    94ba:	6a 07       	cpc	r22, r26
    94bc:	7b 07       	cpc	r23, r27
    94be:	98 f4       	brcc	.+38     	; 0x94e6 <sync_window.part.5+0x8c>
    94c0:	6a 81       	ldd	r22, Y+2	; 0x02
    94c2:	62 30       	cpi	r22, 0x02	; 2
    94c4:	81 f4       	brne	.+32     	; 0x94e6 <sync_window.part.5+0x8c>
    94c6:	a9 01       	movw	r20, r18
    94c8:	98 01       	movw	r18, r16
    94ca:	28 0f       	add	r18, r24
    94cc:	39 1f       	adc	r19, r25
    94ce:	4a 1f       	adc	r20, r26
    94d0:	5b 1f       	adc	r21, r27
    94d2:	01 e0       	ldi	r16, 0x01	; 1
    94d4:	10 e0       	ldi	r17, 0x00	; 0
    94d6:	b7 01       	movw	r22, r14
    94d8:	89 81       	ldd	r24, Y+1	; 0x01
    94da:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    94de:	03 c0       	rjmp	.+6      	; 0x94e6 <sync_window.part.5+0x8c>
    94e0:	81 e0       	ldi	r24, 0x01	; 1
    94e2:	90 e0       	ldi	r25, 0x00	; 0
    94e4:	02 c0       	rjmp	.+4      	; 0x94ea <sync_window.part.5+0x90>
    94e6:	80 e0       	ldi	r24, 0x00	; 0
    94e8:	90 e0       	ldi	r25, 0x00	; 0
    94ea:	df 91       	pop	r29
    94ec:	cf 91       	pop	r28
    94ee:	1f 91       	pop	r17
    94f0:	0f 91       	pop	r16
    94f2:	ff 90       	pop	r15
    94f4:	ef 90       	pop	r14
    94f6:	bf 90       	pop	r11
    94f8:	af 90       	pop	r10
    94fa:	9f 90       	pop	r9
    94fc:	8f 90       	pop	r8
    94fe:	08 95       	ret

00009500 <sync_fs>:
    9500:	ef 92       	push	r14
    9502:	ff 92       	push	r15
    9504:	0f 93       	push	r16
    9506:	1f 93       	push	r17
    9508:	cf 93       	push	r28
    950a:	df 93       	push	r29
    950c:	ec 01       	movw	r28, r24
    950e:	8b 81       	ldd	r24, Y+3	; 0x03
    9510:	81 11       	cpse	r24, r1
    9512:	05 c0       	rjmp	.+10     	; 0x951e <sync_fs+0x1e>
    9514:	88 81       	ld	r24, Y
    9516:	83 30       	cpi	r24, 0x03	; 3
    9518:	09 f0       	breq	.+2      	; 0x951c <sync_fs+0x1c>
    951a:	52 c0       	rjmp	.+164    	; 0x95c0 <sync_fs+0xc0>
    951c:	06 c0       	rjmp	.+12     	; 0x952a <sync_fs+0x2a>
    951e:	ce 01       	movw	r24, r28
    9520:	9c df       	rcall	.-200    	; 0x945a <sync_window.part.5>
    9522:	00 97       	sbiw	r24, 0x00	; 0
    9524:	09 f0       	breq	.+2      	; 0x9528 <sync_fs+0x28>
    9526:	59 c0       	rjmp	.+178    	; 0x95da <sync_fs+0xda>
    9528:	f5 cf       	rjmp	.-22     	; 0x9514 <sync_fs+0x14>
    952a:	8c 81       	ldd	r24, Y+4	; 0x04
    952c:	81 30       	cpi	r24, 0x01	; 1
    952e:	09 f0       	breq	.+2      	; 0x9532 <sync_fs+0x32>
    9530:	47 c0       	rjmp	.+142    	; 0x95c0 <sync_fs+0xc0>
    9532:	40 e0       	ldi	r20, 0x00	; 0
    9534:	52 e0       	ldi	r21, 0x02	; 2
    9536:	60 e0       	ldi	r22, 0x00	; 0
    9538:	70 e0       	ldi	r23, 0x00	; 0
    953a:	7e 01       	movw	r14, r28
    953c:	85 e3       	ldi	r24, 0x35	; 53
    953e:	e8 0e       	add	r14, r24
    9540:	f1 1c       	adc	r15, r1
    9542:	c7 01       	movw	r24, r14
    9544:	50 dd       	rcall	.-1376   	; 0x8fe6 <mem_set>
    9546:	85 e5       	ldi	r24, 0x55	; 85
    9548:	fe 01       	movw	r30, r28
    954a:	ed 5c       	subi	r30, 0xCD	; 205
    954c:	fd 4f       	sbci	r31, 0xFD	; 253
    954e:	80 83       	st	Z, r24
    9550:	8a ea       	ldi	r24, 0xAA	; 170
    9552:	31 96       	adiw	r30, 0x01	; 1
    9554:	80 83       	st	Z, r24
    9556:	82 e5       	ldi	r24, 0x52	; 82
    9558:	8d ab       	std	Y+53, r24	; 0x35
    955a:	8e ab       	std	Y+54, r24	; 0x36
    955c:	81 e6       	ldi	r24, 0x61	; 97
    955e:	8f ab       	std	Y+55, r24	; 0x37
    9560:	91 e4       	ldi	r25, 0x41	; 65
    9562:	98 af       	std	Y+56, r25	; 0x38
    9564:	22 e7       	ldi	r18, 0x72	; 114
    9566:	7b 97       	sbiw	r30, 0x1b	; 27
    9568:	20 83       	st	Z, r18
    956a:	31 96       	adiw	r30, 0x01	; 1
    956c:	20 83       	st	Z, r18
    956e:	31 96       	adiw	r30, 0x01	; 1
    9570:	90 83       	st	Z, r25
    9572:	31 96       	adiw	r30, 0x01	; 1
    9574:	80 83       	st	Z, r24
    9576:	49 89       	ldd	r20, Y+17	; 0x11
    9578:	5a 89       	ldd	r21, Y+18	; 0x12
    957a:	6b 89       	ldd	r22, Y+19	; 0x13
    957c:	7c 89       	ldd	r23, Y+20	; 0x14
    957e:	ce 01       	movw	r24, r28
    9580:	83 5e       	subi	r24, 0xE3	; 227
    9582:	9d 4f       	sbci	r25, 0xFD	; 253
    9584:	2a dd       	rcall	.-1452   	; 0x8fda <st_dword>
    9586:	4d 85       	ldd	r20, Y+13	; 0x0d
    9588:	5e 85       	ldd	r21, Y+14	; 0x0e
    958a:	6f 85       	ldd	r22, Y+15	; 0x0f
    958c:	78 89       	ldd	r23, Y+16	; 0x10
    958e:	ce 01       	movw	r24, r28
    9590:	8f 5d       	subi	r24, 0xDF	; 223
    9592:	9d 4f       	sbci	r25, 0xFD	; 253
    9594:	22 dd       	rcall	.-1468   	; 0x8fda <st_dword>
    9596:	89 a1       	ldd	r24, Y+33	; 0x21
    9598:	9a a1       	ldd	r25, Y+34	; 0x22
    959a:	ab a1       	ldd	r26, Y+35	; 0x23
    959c:	bc a1       	ldd	r27, Y+36	; 0x24
    959e:	9c 01       	movw	r18, r24
    95a0:	ad 01       	movw	r20, r26
    95a2:	2f 5f       	subi	r18, 0xFF	; 255
    95a4:	3f 4f       	sbci	r19, 0xFF	; 255
    95a6:	4f 4f       	sbci	r20, 0xFF	; 255
    95a8:	5f 4f       	sbci	r21, 0xFF	; 255
    95aa:	29 ab       	std	Y+49, r18	; 0x31
    95ac:	3a ab       	std	Y+50, r19	; 0x32
    95ae:	4b ab       	std	Y+51, r20	; 0x33
    95b0:	5c ab       	std	Y+52, r21	; 0x34
    95b2:	01 e0       	ldi	r16, 0x01	; 1
    95b4:	10 e0       	ldi	r17, 0x00	; 0
    95b6:	b7 01       	movw	r22, r14
    95b8:	89 81       	ldd	r24, Y+1	; 0x01
    95ba:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    95be:	1c 82       	std	Y+4, r1	; 0x04
    95c0:	40 e0       	ldi	r20, 0x00	; 0
    95c2:	50 e0       	ldi	r21, 0x00	; 0
    95c4:	60 e0       	ldi	r22, 0x00	; 0
    95c6:	89 81       	ldd	r24, Y+1	; 0x01
    95c8:	0e 94 ec 69 	call	0xd3d8	; 0xd3d8 <disk_ioctl>
    95cc:	31 e0       	ldi	r19, 0x01	; 1
    95ce:	20 e0       	ldi	r18, 0x00	; 0
    95d0:	89 2b       	or	r24, r25
    95d2:	09 f4       	brne	.+2      	; 0x95d6 <sync_fs+0xd6>
    95d4:	30 e0       	ldi	r19, 0x00	; 0
    95d6:	83 2f       	mov	r24, r19
    95d8:	92 2f       	mov	r25, r18
    95da:	cd b7       	in	r28, 0x3d	; 61
    95dc:	de b7       	in	r29, 0x3e	; 62
    95de:	e6 e0       	ldi	r30, 0x06	; 6
    95e0:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

000095e4 <dir_clear>:
    95e4:	4f 92       	push	r4
    95e6:	5f 92       	push	r5
    95e8:	6f 92       	push	r6
    95ea:	7f 92       	push	r7
    95ec:	af 92       	push	r10
    95ee:	bf 92       	push	r11
    95f0:	cf 92       	push	r12
    95f2:	df 92       	push	r13
    95f4:	ef 92       	push	r14
    95f6:	ff 92       	push	r15
    95f8:	0f 93       	push	r16
    95fa:	1f 93       	push	r17
    95fc:	cf 93       	push	r28
    95fe:	df 93       	push	r29
    9600:	ec 01       	movw	r28, r24
    9602:	6a 01       	movw	r12, r20
    9604:	7b 01       	movw	r14, r22
    9606:	8b 81       	ldd	r24, Y+3	; 0x03
    9608:	81 11       	cpse	r24, r1
    960a:	28 c0       	rjmp	.+80     	; 0x965c <dir_clear+0x78>
    960c:	b7 01       	movw	r22, r14
    960e:	a6 01       	movw	r20, r12
    9610:	ce 01       	movw	r24, r28
    9612:	01 dd       	rcall	.-1534   	; 0x9016 <clst2sect>
    9614:	2b 01       	movw	r4, r22
    9616:	3c 01       	movw	r6, r24
    9618:	69 ab       	std	Y+49, r22	; 0x31
    961a:	7a ab       	std	Y+50, r23	; 0x32
    961c:	8b ab       	std	Y+51, r24	; 0x33
    961e:	9c ab       	std	Y+52, r25	; 0x34
    9620:	5e 01       	movw	r10, r28
    9622:	25 e3       	ldi	r18, 0x35	; 53
    9624:	a2 0e       	add	r10, r18
    9626:	b1 1c       	adc	r11, r1
    9628:	40 e0       	ldi	r20, 0x00	; 0
    962a:	52 e0       	ldi	r21, 0x02	; 2
    962c:	60 e0       	ldi	r22, 0x00	; 0
    962e:	70 e0       	ldi	r23, 0x00	; 0
    9630:	c5 01       	movw	r24, r10
    9632:	d9 dc       	rcall	.-1614   	; 0x8fe6 <mem_set>
    9634:	09 85       	ldd	r16, Y+9	; 0x09
    9636:	1a 85       	ldd	r17, Y+10	; 0x0a
    9638:	c8 01       	movw	r24, r16
    963a:	a0 e0       	ldi	r26, 0x00	; 0
    963c:	b0 e0       	ldi	r27, 0x00	; 0
    963e:	39 e0       	ldi	r19, 0x09	; 9
    9640:	88 0f       	add	r24, r24
    9642:	99 1f       	adc	r25, r25
    9644:	aa 1f       	adc	r26, r26
    9646:	bb 1f       	adc	r27, r27
    9648:	3a 95       	dec	r19
    964a:	d1 f7       	brne	.-12     	; 0x9640 <dir_clear+0x5c>
    964c:	81 15       	cp	r24, r1
    964e:	90 48       	sbci	r25, 0x80	; 128
    9650:	a1 05       	cpc	r26, r1
    9652:	b1 05       	cpc	r27, r1
    9654:	50 f0       	brcs	.+20     	; 0x966a <dir_clear+0x86>
    9656:	00 e0       	ldi	r16, 0x00	; 0
    9658:	10 e8       	ldi	r17, 0x80	; 128
    965a:	14 c0       	rjmp	.+40     	; 0x9684 <dir_clear+0xa0>
    965c:	ce 01       	movw	r24, r28
    965e:	fd de       	rcall	.-518    	; 0x945a <sync_window.part.5>
    9660:	89 2b       	or	r24, r25
    9662:	a1 f2       	breq	.-88     	; 0x960c <dir_clear+0x28>
    9664:	81 e0       	ldi	r24, 0x01	; 1
    9666:	90 e0       	ldi	r25, 0x00	; 0
    9668:	56 c0       	rjmp	.+172    	; 0x9716 <dir_clear+0x132>
    966a:	10 2f       	mov	r17, r16
    966c:	00 27       	eor	r16, r16
    966e:	11 0f       	add	r17, r17
    9670:	09 c0       	rjmp	.+18     	; 0x9684 <dir_clear+0xa0>
    9672:	c8 01       	movw	r24, r16
    9674:	0e 94 10 69 	call	0xd220	; 0xd220 <ff_memalloc>
    9678:	6c 01       	movw	r12, r24
    967a:	00 97       	sbiw	r24, 0x00	; 0
    967c:	09 f0       	breq	.+2      	; 0x9680 <dir_clear+0x9c>
    967e:	40 c0       	rjmp	.+128    	; 0x9700 <dir_clear+0x11c>
    9680:	16 95       	lsr	r17
    9682:	07 95       	ror	r16
    9684:	01 30       	cpi	r16, 0x01	; 1
    9686:	82 e0       	ldi	r24, 0x02	; 2
    9688:	18 07       	cpc	r17, r24
    968a:	98 f7       	brcc	.-26     	; 0x9672 <dir_clear+0x8e>
    968c:	e1 2c       	mov	r14, r1
    968e:	f1 2c       	mov	r15, r1
    9690:	11 c0       	rjmp	.+34     	; 0x96b4 <dir_clear+0xd0>
    9692:	01 e0       	ldi	r16, 0x01	; 1
    9694:	10 e0       	ldi	r17, 0x00	; 0
    9696:	a3 01       	movw	r20, r6
    9698:	92 01       	movw	r18, r4
    969a:	2e 0d       	add	r18, r14
    969c:	3f 1d       	adc	r19, r15
    969e:	41 1d       	adc	r20, r1
    96a0:	51 1d       	adc	r21, r1
    96a2:	b5 01       	movw	r22, r10
    96a4:	89 81       	ldd	r24, Y+1	; 0x01
    96a6:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    96aa:	89 2b       	or	r24, r25
    96ac:	01 f5       	brne	.+64     	; 0x96ee <dir_clear+0x10a>
    96ae:	2f ef       	ldi	r18, 0xFF	; 255
    96b0:	e2 1a       	sub	r14, r18
    96b2:	f2 0a       	sbc	r15, r18
    96b4:	89 85       	ldd	r24, Y+9	; 0x09
    96b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    96b8:	e8 16       	cp	r14, r24
    96ba:	f9 06       	cpc	r15, r25
    96bc:	50 f3       	brcs	.-44     	; 0x9692 <dir_clear+0xae>
    96be:	17 c0       	rjmp	.+46     	; 0x96ee <dir_clear+0x10a>
    96c0:	85 01       	movw	r16, r10
    96c2:	a3 01       	movw	r20, r6
    96c4:	92 01       	movw	r18, r4
    96c6:	2e 0d       	add	r18, r14
    96c8:	3f 1d       	adc	r19, r15
    96ca:	41 1d       	adc	r20, r1
    96cc:	51 1d       	adc	r21, r1
    96ce:	b6 01       	movw	r22, r12
    96d0:	89 81       	ldd	r24, Y+1	; 0x01
    96d2:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    96d6:	89 2b       	or	r24, r25
    96d8:	39 f4       	brne	.+14     	; 0x96e8 <dir_clear+0x104>
    96da:	ea 0c       	add	r14, r10
    96dc:	fb 1c       	adc	r15, r11
    96de:	89 85       	ldd	r24, Y+9	; 0x09
    96e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    96e2:	e8 16       	cp	r14, r24
    96e4:	f9 06       	cpc	r15, r25
    96e6:	60 f3       	brcs	.-40     	; 0x96c0 <dir_clear+0xdc>
    96e8:	c6 01       	movw	r24, r12
    96ea:	0e 94 13 69 	call	0xd226	; 0xd226 <ff_memfree>
    96ee:	81 e0       	ldi	r24, 0x01	; 1
    96f0:	90 e0       	ldi	r25, 0x00	; 0
    96f2:	29 85       	ldd	r18, Y+9	; 0x09
    96f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    96f6:	2e 15       	cp	r18, r14
    96f8:	3f 05       	cpc	r19, r15
    96fa:	69 f4       	brne	.+26     	; 0x9716 <dir_clear+0x132>
    96fc:	80 e0       	ldi	r24, 0x00	; 0
    96fe:	0b c0       	rjmp	.+22     	; 0x9716 <dir_clear+0x132>
    9700:	a8 01       	movw	r20, r16
    9702:	60 e0       	ldi	r22, 0x00	; 0
    9704:	70 e0       	ldi	r23, 0x00	; 0
    9706:	6f dc       	rcall	.-1826   	; 0x8fe6 <mem_set>
    9708:	58 01       	movw	r10, r16
    970a:	ab 2c       	mov	r10, r11
    970c:	bb 24       	eor	r11, r11
    970e:	a6 94       	lsr	r10
    9710:	e1 2c       	mov	r14, r1
    9712:	f1 2c       	mov	r15, r1
    9714:	e4 cf       	rjmp	.-56     	; 0x96de <dir_clear+0xfa>
    9716:	df 91       	pop	r29
    9718:	cf 91       	pop	r28
    971a:	1f 91       	pop	r17
    971c:	0f 91       	pop	r16
    971e:	ff 90       	pop	r15
    9720:	ef 90       	pop	r14
    9722:	df 90       	pop	r13
    9724:	cf 90       	pop	r12
    9726:	bf 90       	pop	r11
    9728:	af 90       	pop	r10
    972a:	7f 90       	pop	r7
    972c:	6f 90       	pop	r6
    972e:	5f 90       	pop	r5
    9730:	4f 90       	pop	r4
    9732:	08 95       	ret

00009734 <move_window>:
    9734:	a0 e0       	ldi	r26, 0x00	; 0
    9736:	b0 e0       	ldi	r27, 0x00	; 0
    9738:	e0 ea       	ldi	r30, 0xA0	; 160
    973a:	fb e4       	ldi	r31, 0x4B	; 75
    973c:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    9740:	ec 01       	movw	r28, r24
    9742:	6a 01       	movw	r12, r20
    9744:	7b 01       	movw	r14, r22
    9746:	89 a9       	ldd	r24, Y+49	; 0x31
    9748:	9a a9       	ldd	r25, Y+50	; 0x32
    974a:	ab a9       	ldd	r26, Y+51	; 0x33
    974c:	bc a9       	ldd	r27, Y+52	; 0x34
    974e:	84 17       	cp	r24, r20
    9750:	95 07       	cpc	r25, r21
    9752:	a6 07       	cpc	r26, r22
    9754:	b7 07       	cpc	r27, r23
    9756:	11 f1       	breq	.+68     	; 0x979c <move_window+0x68>
    9758:	8b 81       	ldd	r24, Y+3	; 0x03
    975a:	81 11       	cpse	r24, r1
    975c:	13 c0       	rjmp	.+38     	; 0x9784 <move_window+0x50>
    975e:	01 e0       	ldi	r16, 0x01	; 1
    9760:	10 e0       	ldi	r17, 0x00	; 0
    9762:	a7 01       	movw	r20, r14
    9764:	96 01       	movw	r18, r12
    9766:	be 01       	movw	r22, r28
    9768:	6b 5c       	subi	r22, 0xCB	; 203
    976a:	7f 4f       	sbci	r23, 0xFF	; 255
    976c:	89 81       	ldd	r24, Y+1	; 0x01
    976e:	0e 94 cc 69 	call	0xd398	; 0xd398 <disk_read>
    9772:	89 2b       	or	r24, r25
    9774:	61 f0       	breq	.+24     	; 0x978e <move_window+0x5a>
    9776:	81 e0       	ldi	r24, 0x01	; 1
    9778:	90 e0       	ldi	r25, 0x00	; 0
    977a:	cc 24       	eor	r12, r12
    977c:	ca 94       	dec	r12
    977e:	dc 2c       	mov	r13, r12
    9780:	76 01       	movw	r14, r12
    9782:	07 c0       	rjmp	.+14     	; 0x9792 <move_window+0x5e>
    9784:	ce 01       	movw	r24, r28
    9786:	69 de       	rcall	.-814    	; 0x945a <sync_window.part.5>
    9788:	00 97       	sbiw	r24, 0x00	; 0
    978a:	51 f4       	brne	.+20     	; 0x97a0 <move_window+0x6c>
    978c:	e8 cf       	rjmp	.-48     	; 0x975e <move_window+0x2a>
    978e:	80 e0       	ldi	r24, 0x00	; 0
    9790:	90 e0       	ldi	r25, 0x00	; 0
    9792:	c9 aa       	std	Y+49, r12	; 0x31
    9794:	da aa       	std	Y+50, r13	; 0x32
    9796:	eb aa       	std	Y+51, r14	; 0x33
    9798:	fc aa       	std	Y+52, r15	; 0x34
    979a:	02 c0       	rjmp	.+4      	; 0x97a0 <move_window+0x6c>
    979c:	80 e0       	ldi	r24, 0x00	; 0
    979e:	90 e0       	ldi	r25, 0x00	; 0
    97a0:	cd b7       	in	r28, 0x3d	; 61
    97a2:	de b7       	in	r29, 0x3e	; 62
    97a4:	e8 e0       	ldi	r30, 0x08	; 8
    97a6:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

000097aa <check_fs>:
    97aa:	cf 93       	push	r28
    97ac:	df 93       	push	r29
    97ae:	ec 01       	movw	r28, r24
    97b0:	1b 82       	std	Y+3, r1	; 0x03
    97b2:	8f ef       	ldi	r24, 0xFF	; 255
    97b4:	9f ef       	ldi	r25, 0xFF	; 255
    97b6:	dc 01       	movw	r26, r24
    97b8:	89 ab       	std	Y+49, r24	; 0x31
    97ba:	9a ab       	std	Y+50, r25	; 0x32
    97bc:	ab ab       	std	Y+51, r26	; 0x33
    97be:	bc ab       	std	Y+52, r27	; 0x34
    97c0:	ce 01       	movw	r24, r28
    97c2:	b8 df       	rcall	.-144    	; 0x9734 <move_window>
    97c4:	89 2b       	or	r24, r25
    97c6:	19 f5       	brne	.+70     	; 0x980e <check_fs+0x64>
    97c8:	fe 01       	movw	r30, r28
    97ca:	ed 5c       	subi	r30, 0xCD	; 205
    97cc:	fd 4f       	sbci	r31, 0xFD	; 253
    97ce:	80 81       	ld	r24, Z
    97d0:	91 81       	ldd	r25, Z+1	; 0x01
    97d2:	85 35       	cpi	r24, 0x55	; 85
    97d4:	9a 4a       	sbci	r25, 0xAA	; 170
    97d6:	f1 f4       	brne	.+60     	; 0x9814 <check_fs+0x6a>
    97d8:	8d a9       	ldd	r24, Y+53	; 0x35
    97da:	8b 3e       	cpi	r24, 0xEB	; 235
    97dc:	19 f0       	breq	.+6      	; 0x97e4 <check_fs+0x3a>
    97de:	88 5e       	subi	r24, 0xE8	; 232
    97e0:	82 30       	cpi	r24, 0x02	; 2
    97e2:	f0 f4       	brcc	.+60     	; 0x9820 <check_fs+0x76>
    97e4:	43 e0       	ldi	r20, 0x03	; 3
    97e6:	50 e0       	ldi	r21, 0x00	; 0
    97e8:	66 ec       	ldi	r22, 0xC6	; 198
    97ea:	78 e0       	ldi	r23, 0x08	; 8
    97ec:	ce 01       	movw	r24, r28
    97ee:	85 59       	subi	r24, 0x95	; 149
    97f0:	9f 4f       	sbci	r25, 0xFF	; 255
    97f2:	02 dc       	rcall	.-2044   	; 0x8ff8 <mem_cmp>
    97f4:	89 2b       	or	r24, r25
    97f6:	89 f0       	breq	.+34     	; 0x981a <check_fs+0x70>
    97f8:	45 e0       	ldi	r20, 0x05	; 5
    97fa:	50 e0       	ldi	r21, 0x00	; 0
    97fc:	61 e2       	ldi	r22, 0x21	; 33
    97fe:	74 e0       	ldi	r23, 0x04	; 4
    9800:	ce 01       	movw	r24, r28
    9802:	89 57       	subi	r24, 0x79	; 121
    9804:	9f 4f       	sbci	r25, 0xFF	; 255
    9806:	f8 db       	rcall	.-2064   	; 0x8ff8 <mem_cmp>
    9808:	89 2b       	or	r24, r25
    980a:	51 f4       	brne	.+20     	; 0x9820 <check_fs+0x76>
    980c:	06 c0       	rjmp	.+12     	; 0x981a <check_fs+0x70>
    980e:	84 e0       	ldi	r24, 0x04	; 4
    9810:	90 e0       	ldi	r25, 0x00	; 0
    9812:	08 c0       	rjmp	.+16     	; 0x9824 <check_fs+0x7a>
    9814:	83 e0       	ldi	r24, 0x03	; 3
    9816:	90 e0       	ldi	r25, 0x00	; 0
    9818:	05 c0       	rjmp	.+10     	; 0x9824 <check_fs+0x7a>
    981a:	80 e0       	ldi	r24, 0x00	; 0
    981c:	90 e0       	ldi	r25, 0x00	; 0
    981e:	02 c0       	rjmp	.+4      	; 0x9824 <check_fs+0x7a>
    9820:	82 e0       	ldi	r24, 0x02	; 2
    9822:	90 e0       	ldi	r25, 0x00	; 0
    9824:	df 91       	pop	r29
    9826:	cf 91       	pop	r28
    9828:	08 95       	ret

0000982a <mount_volume>:
    982a:	a0 e2       	ldi	r26, 0x20	; 32
    982c:	b0 e0       	ldi	r27, 0x00	; 0
    982e:	eb e1       	ldi	r30, 0x1B	; 27
    9830:	fc e4       	ldi	r31, 0x4C	; 76
    9832:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__prologue_saves__+0x4>
    9836:	5b 01       	movw	r10, r22
    9838:	f4 2e       	mov	r15, r20
    983a:	db 01       	movw	r26, r22
    983c:	1d 92       	st	X+, r1
    983e:	1c 92       	st	X, r1
    9840:	5d dc       	rcall	.-1862   	; 0x90fc <get_ldnumber>
    9842:	6c 01       	movw	r12, r24
    9844:	97 fd       	sbrc	r25, 7
    9846:	39 c2       	rjmp	.+1138   	; 0x9cba <mount_volume+0x490>
    9848:	fc 01       	movw	r30, r24
    984a:	ee 0f       	add	r30, r30
    984c:	ff 1f       	adc	r31, r31
    984e:	ef 5d       	subi	r30, 0xDF	; 223
    9850:	f7 4e       	sbci	r31, 0xE7	; 231
    9852:	00 81       	ld	r16, Z
    9854:	11 81       	ldd	r17, Z+1	; 0x01
    9856:	01 15       	cp	r16, r1
    9858:	11 05       	cpc	r17, r1
    985a:	09 f4       	brne	.+2      	; 0x985e <mount_volume+0x34>
    985c:	31 c2       	rjmp	.+1122   	; 0x9cc0 <mount_volume+0x496>
    985e:	f5 01       	movw	r30, r10
    9860:	11 83       	std	Z+1, r17	; 0x01
    9862:	00 83       	st	Z, r16
    9864:	ff 2d       	mov	r31, r15
    9866:	fe 7f       	andi	r31, 0xFE	; 254
    9868:	ff 2e       	mov	r15, r31
    986a:	d8 01       	movw	r26, r16
    986c:	8c 91       	ld	r24, X
    986e:	88 23       	and	r24, r24
    9870:	71 f0       	breq	.+28     	; 0x988e <mount_volume+0x64>
    9872:	f8 01       	movw	r30, r16
    9874:	81 81       	ldd	r24, Z+1	; 0x01
    9876:	0e 94 c0 69 	call	0xd380	; 0xd380 <disk_status>
    987a:	80 fd       	sbrc	r24, 0
    987c:	08 c0       	rjmp	.+16     	; 0x988e <mount_volume+0x64>
    987e:	ff 20       	and	r15, r15
    9880:	09 f4       	brne	.+2      	; 0x9884 <mount_volume+0x5a>
    9882:	21 c2       	rjmp	.+1090   	; 0x9cc6 <mount_volume+0x49c>
    9884:	82 ff       	sbrs	r24, 2
    9886:	1f c2       	rjmp	.+1086   	; 0x9cc6 <mount_volume+0x49c>
    9888:	8a e0       	ldi	r24, 0x0A	; 10
    988a:	90 e0       	ldi	r25, 0x00	; 0
    988c:	24 c2       	rjmp	.+1096   	; 0x9cd6 <mount_volume+0x4ac>
    988e:	d8 01       	movw	r26, r16
    9890:	1c 92       	st	X, r1
    9892:	f8 01       	movw	r30, r16
    9894:	c1 82       	std	Z+1, r12	; 0x01
    9896:	8c 2d       	mov	r24, r12
    9898:	0e 94 c6 69 	call	0xd38c	; 0xd38c <disk_initialize>
    989c:	80 fd       	sbrc	r24, 0
    989e:	16 c2       	rjmp	.+1068   	; 0x9ccc <mount_volume+0x4a2>
    98a0:	ff 20       	and	r15, r15
    98a2:	11 f0       	breq	.+4      	; 0x98a8 <mount_volume+0x7e>
    98a4:	82 fd       	sbrc	r24, 2
    98a6:	f0 cf       	rjmp	.-32     	; 0x9888 <mount_volume+0x5e>
    98a8:	40 e0       	ldi	r20, 0x00	; 0
    98aa:	50 e0       	ldi	r21, 0x00	; 0
    98ac:	ba 01       	movw	r22, r20
    98ae:	c8 01       	movw	r24, r16
    98b0:	7c df       	rcall	.-264    	; 0x97aa <check_fs>
    98b2:	82 30       	cpi	r24, 0x02	; 2
    98b4:	91 05       	cpc	r25, r1
    98b6:	b9 f5       	brne	.+110    	; 0x9926 <mount_volume+0xfc>
    98b8:	68 01       	movw	r12, r16
    98ba:	f5 e0       	ldi	r31, 0x05	; 5
    98bc:	cf 1a       	sub	r12, r31
    98be:	fe ef       	ldi	r31, 0xFE	; 254
    98c0:	df 0a       	sbc	r13, r31
    98c2:	9e 01       	movw	r18, r28
    98c4:	2f 5f       	subi	r18, 0xFF	; 255
    98c6:	3f 4f       	sbci	r19, 0xFF	; 255
    98c8:	79 01       	movw	r14, r18
    98ca:	48 01       	movw	r8, r16
    98cc:	35 ec       	ldi	r19, 0xC5	; 197
    98ce:	83 1a       	sub	r8, r19
    98d0:	3d ef       	ldi	r19, 0xFD	; 253
    98d2:	93 0a       	sbc	r9, r19
    98d4:	57 01       	movw	r10, r14
    98d6:	c6 01       	movw	r24, r12
    98d8:	6b db       	rcall	.-2346   	; 0x8fb0 <ld_dword>
    98da:	d5 01       	movw	r26, r10
    98dc:	6d 93       	st	X+, r22
    98de:	7d 93       	st	X+, r23
    98e0:	8d 93       	st	X+, r24
    98e2:	9d 93       	st	X+, r25
    98e4:	5d 01       	movw	r10, r26
    98e6:	b0 e1       	ldi	r27, 0x10	; 16
    98e8:	cb 0e       	add	r12, r27
    98ea:	d1 1c       	adc	r13, r1
    98ec:	c8 14       	cp	r12, r8
    98ee:	d9 04       	cpc	r13, r9
    98f0:	91 f7       	brne	.-28     	; 0x98d6 <mount_volume+0xac>
    98f2:	6e 01       	movw	r12, r28
    98f4:	e1 e1       	ldi	r30, 0x11	; 17
    98f6:	ce 0e       	add	r12, r30
    98f8:	d1 1c       	adc	r13, r1
    98fa:	d7 01       	movw	r26, r14
    98fc:	4d 91       	ld	r20, X+
    98fe:	5d 91       	ld	r21, X+
    9900:	6d 91       	ld	r22, X+
    9902:	7d 91       	ld	r23, X+
    9904:	7d 01       	movw	r14, r26
    9906:	41 15       	cp	r20, r1
    9908:	51 05       	cpc	r21, r1
    990a:	61 05       	cpc	r22, r1
    990c:	71 05       	cpc	r23, r1
    990e:	31 f0       	breq	.+12     	; 0x991c <mount_volume+0xf2>
    9910:	c8 01       	movw	r24, r16
    9912:	4b df       	rcall	.-362    	; 0x97aa <check_fs>
    9914:	82 30       	cpi	r24, 0x02	; 2
    9916:	91 05       	cpc	r25, r1
    9918:	18 f4       	brcc	.+6      	; 0x9920 <mount_volume+0xf6>
    991a:	05 c0       	rjmp	.+10     	; 0x9926 <mount_volume+0xfc>
    991c:	83 e0       	ldi	r24, 0x03	; 3
    991e:	90 e0       	ldi	r25, 0x00	; 0
    9920:	ce 14       	cp	r12, r14
    9922:	df 04       	cpc	r13, r15
    9924:	51 f7       	brne	.-44     	; 0x98fa <mount_volume+0xd0>
    9926:	84 30       	cpi	r24, 0x04	; 4
    9928:	91 05       	cpc	r25, r1
    992a:	09 f4       	brne	.+2      	; 0x992e <mount_volume+0x104>
    992c:	d2 c1       	rjmp	.+932    	; 0x9cd2 <mount_volume+0x4a8>
    992e:	02 97       	sbiw	r24, 0x02	; 2
    9930:	18 f0       	brcs	.+6      	; 0x9938 <mount_volume+0x10e>
    9932:	8d e0       	ldi	r24, 0x0D	; 13
    9934:	90 e0       	ldi	r25, 0x00	; 0
    9936:	cf c1       	rjmp	.+926    	; 0x9cd6 <mount_volume+0x4ac>
    9938:	f8 01       	movw	r30, r16
    993a:	e0 5c       	subi	r30, 0xC0	; 192
    993c:	ff 4f       	sbci	r31, 0xFF	; 255
    993e:	80 81       	ld	r24, Z
    9940:	91 81       	ldd	r25, Z+1	; 0x01
    9942:	81 15       	cp	r24, r1
    9944:	92 40       	sbci	r25, 0x02	; 2
    9946:	a9 f7       	brne	.-22     	; 0x9932 <mount_volume+0x108>
    9948:	3b 96       	adiw	r30, 0x0b	; 11
    994a:	40 80       	ld	r4, Z
    994c:	51 80       	ldd	r5, Z+1	; 0x01
    994e:	41 14       	cp	r4, r1
    9950:	51 04       	cpc	r5, r1
    9952:	19 f0       	breq	.+6      	; 0x995a <mount_volume+0x130>
    9954:	61 2c       	mov	r6, r1
    9956:	71 2c       	mov	r7, r1
    9958:	06 c0       	rjmp	.+12     	; 0x9966 <mount_volume+0x13c>
    995a:	c8 01       	movw	r24, r16
    995c:	87 5a       	subi	r24, 0xA7	; 167
    995e:	9f 4f       	sbci	r25, 0xFF	; 255
    9960:	27 db       	rcall	.-2482   	; 0x8fb0 <ld_dword>
    9962:	2b 01       	movw	r4, r22
    9964:	3c 01       	movw	r6, r24
    9966:	f8 01       	movw	r30, r16
    9968:	21 a9       	ldd	r18, Z+49	; 0x31
    996a:	32 a9       	ldd	r19, Z+50	; 0x32
    996c:	43 a9       	ldd	r20, Z+51	; 0x33
    996e:	54 a9       	ldd	r21, Z+52	; 0x34
    9970:	29 8b       	std	Y+17, r18	; 0x11
    9972:	3a 8b       	std	Y+18, r19	; 0x12
    9974:	4b 8b       	std	Y+19, r20	; 0x13
    9976:	5c 8b       	std	Y+20, r21	; 0x14
    9978:	45 8e       	std	Z+29, r4	; 0x1d
    997a:	56 8e       	std	Z+30, r5	; 0x1e
    997c:	67 8e       	std	Z+31, r6	; 0x1f
    997e:	70 a2       	std	Z+32, r7	; 0x20
    9980:	eb 5b       	subi	r30, 0xBB	; 187
    9982:	ff 4f       	sbci	r31, 0xFF	; 255
    9984:	a0 80       	ld	r10, Z
    9986:	f8 01       	movw	r30, r16
    9988:	a2 82       	std	Z+2, r10	; 0x02
    998a:	8f ef       	ldi	r24, 0xFF	; 255
    998c:	8a 0d       	add	r24, r10
    998e:	82 30       	cpi	r24, 0x02	; 2
    9990:	80 f6       	brcc	.-96     	; 0x9932 <mount_volume+0x108>
    9992:	ee 5b       	subi	r30, 0xBE	; 190
    9994:	ff 4f       	sbci	r31, 0xFF	; 255
    9996:	b0 80       	ld	r11, Z
    9998:	8b 2d       	mov	r24, r11
    999a:	90 e0       	ldi	r25, 0x00	; 0
    999c:	f8 01       	movw	r30, r16
    999e:	92 87       	std	Z+10, r25	; 0x0a
    99a0:	81 87       	std	Z+9, r24	; 0x09
    99a2:	00 97       	sbiw	r24, 0x00	; 0
    99a4:	31 f2       	breq	.-116    	; 0x9932 <mount_volume+0x108>
    99a6:	9c 01       	movw	r18, r24
    99a8:	21 50       	subi	r18, 0x01	; 1
    99aa:	31 09       	sbc	r19, r1
    99ac:	82 23       	and	r24, r18
    99ae:	93 23       	and	r25, r19
    99b0:	89 2b       	or	r24, r25
    99b2:	09 f0       	breq	.+2      	; 0x99b6 <mount_volume+0x18c>
    99b4:	be cf       	rjmp	.-132    	; 0x9932 <mount_volume+0x108>
    99b6:	ea 5b       	subi	r30, 0xBA	; 186
    99b8:	ff 4f       	sbci	r31, 0xFF	; 255
    99ba:	80 80       	ld	r8, Z
    99bc:	91 80       	ldd	r9, Z+1	; 0x01
    99be:	f8 01       	movw	r30, r16
    99c0:	90 86       	std	Z+8, r9	; 0x08
    99c2:	87 82       	std	Z+7, r8	; 0x07
    99c4:	c4 01       	movw	r24, r8
    99c6:	8f 70       	andi	r24, 0x0F	; 15
    99c8:	99 27       	eor	r25, r25
    99ca:	89 2b       	or	r24, r25
    99cc:	09 f0       	breq	.+2      	; 0x99d0 <mount_volume+0x1a6>
    99ce:	b1 cf       	rjmp	.-158    	; 0x9932 <mount_volume+0x108>
    99d0:	e8 5b       	subi	r30, 0xB8	; 184
    99d2:	ff 4f       	sbci	r31, 0xFF	; 255
    99d4:	80 81       	ld	r24, Z
    99d6:	91 81       	ldd	r25, Z+1	; 0x01
    99d8:	6c 01       	movw	r12, r24
    99da:	e1 2c       	mov	r14, r1
    99dc:	f1 2c       	mov	r15, r1
    99de:	89 2b       	or	r24, r25
    99e0:	31 f4       	brne	.+12     	; 0x99ee <mount_volume+0x1c4>
    99e2:	c8 01       	movw	r24, r16
    99e4:	8b 5a       	subi	r24, 0xAB	; 171
    99e6:	9f 4f       	sbci	r25, 0xFF	; 255
    99e8:	e3 da       	rcall	.-2618   	; 0x8fb0 <ld_dword>
    99ea:	6b 01       	movw	r12, r22
    99ec:	7c 01       	movw	r14, r24
    99ee:	f8 01       	movw	r30, r16
    99f0:	ed 5b       	subi	r30, 0xBD	; 189
    99f2:	ff 4f       	sbci	r31, 0xFF	; 255
    99f4:	01 90       	ld	r0, Z+
    99f6:	f0 81       	ld	r31, Z
    99f8:	e0 2d       	mov	r30, r0
    99fa:	30 97       	sbiw	r30, 0x00	; 0
    99fc:	09 f4       	brne	.+2      	; 0x9a00 <mount_volume+0x1d6>
    99fe:	99 cf       	rjmp	.-206    	; 0x9932 <mount_volume+0x108>
    9a00:	aa 2d       	mov	r26, r10
    9a02:	b0 e0       	ldi	r27, 0x00	; 0
    9a04:	a3 01       	movw	r20, r6
    9a06:	92 01       	movw	r18, r4
    9a08:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
    9a0c:	69 8f       	std	Y+25, r22	; 0x19
    9a0e:	7a 8f       	std	Y+26, r23	; 0x1a
    9a10:	8b 8f       	std	Y+27, r24	; 0x1b
    9a12:	9c 8f       	std	Y+28, r25	; 0x1c
    9a14:	9f 01       	movw	r18, r30
    9a16:	40 e0       	ldi	r20, 0x00	; 0
    9a18:	50 e0       	ldi	r21, 0x00	; 0
    9a1a:	2d 8f       	std	Y+29, r18	; 0x1d
    9a1c:	3e 8f       	std	Y+30, r19	; 0x1e
    9a1e:	4f 8f       	std	Y+31, r20	; 0x1f
    9a20:	58 a3       	std	Y+32, r21	; 0x20
    9a22:	c4 01       	movw	r24, r8
    9a24:	f4 e0       	ldi	r31, 0x04	; 4
    9a26:	96 95       	lsr	r25
    9a28:	87 95       	ror	r24
    9a2a:	fa 95       	dec	r31
    9a2c:	e1 f7       	brne	.-8      	; 0x9a26 <mount_volume+0x1fc>
    9a2e:	28 0f       	add	r18, r24
    9a30:	39 1f       	adc	r19, r25
    9a32:	41 1d       	adc	r20, r1
    9a34:	51 1d       	adc	r21, r1
    9a36:	da 01       	movw	r26, r20
    9a38:	c9 01       	movw	r24, r18
    9a3a:	29 8d       	ldd	r18, Y+25	; 0x19
    9a3c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9a3e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9a40:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9a42:	28 0f       	add	r18, r24
    9a44:	39 1f       	adc	r19, r25
    9a46:	4a 1f       	adc	r20, r26
    9a48:	5b 1f       	adc	r21, r27
    9a4a:	2d 8b       	std	Y+21, r18	; 0x15
    9a4c:	3e 8b       	std	Y+22, r19	; 0x16
    9a4e:	4f 8b       	std	Y+23, r20	; 0x17
    9a50:	58 8f       	std	Y+24, r21	; 0x18
    9a52:	c2 16       	cp	r12, r18
    9a54:	d3 06       	cpc	r13, r19
    9a56:	e4 06       	cpc	r14, r20
    9a58:	f5 06       	cpc	r15, r21
    9a5a:	08 f4       	brcc	.+2      	; 0x9a5e <mount_volume+0x234>
    9a5c:	6a cf       	rjmp	.-300    	; 0x9932 <mount_volume+0x108>
    9a5e:	c7 01       	movw	r24, r14
    9a60:	b6 01       	movw	r22, r12
    9a62:	62 1b       	sub	r22, r18
    9a64:	73 0b       	sbc	r23, r19
    9a66:	84 0b       	sbc	r24, r20
    9a68:	95 0b       	sbc	r25, r21
    9a6a:	2b 2d       	mov	r18, r11
    9a6c:	30 e0       	ldi	r19, 0x00	; 0
    9a6e:	40 e0       	ldi	r20, 0x00	; 0
    9a70:	50 e0       	ldi	r21, 0x00	; 0
    9a72:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    9a76:	da 01       	movw	r26, r20
    9a78:	c9 01       	movw	r24, r18
    9a7a:	01 97       	sbiw	r24, 0x01	; 1
    9a7c:	a1 09       	sbc	r26, r1
    9a7e:	b1 09       	sbc	r27, r1
    9a80:	85 3f       	cpi	r24, 0xF5	; 245
    9a82:	9f 4f       	sbci	r25, 0xFF	; 255
    9a84:	af 4f       	sbci	r26, 0xFF	; 255
    9a86:	bf 40       	sbci	r27, 0x0F	; 15
    9a88:	08 f0       	brcs	.+2      	; 0x9a8c <mount_volume+0x262>
    9a8a:	53 cf       	rjmp	.-346    	; 0x9932 <mount_volume+0x108>
    9a8c:	26 3f       	cpi	r18, 0xF6	; 246
    9a8e:	8f ef       	ldi	r24, 0xFF	; 255
    9a90:	38 07       	cpc	r19, r24
    9a92:	41 05       	cpc	r20, r1
    9a94:	51 05       	cpc	r21, r1
    9a96:	50 f4       	brcc	.+20     	; 0x9aac <mount_volume+0x282>
    9a98:	26 3f       	cpi	r18, 0xF6	; 246
    9a9a:	9f e0       	ldi	r25, 0x0F	; 15
    9a9c:	39 07       	cpc	r19, r25
    9a9e:	41 05       	cpc	r20, r1
    9aa0:	51 05       	cpc	r21, r1
    9aa2:	40 f4       	brcc	.+16     	; 0x9ab4 <mount_volume+0x28a>
    9aa4:	aa 24       	eor	r10, r10
    9aa6:	a3 94       	inc	r10
    9aa8:	b1 2c       	mov	r11, r1
    9aaa:	07 c0       	rjmp	.+14     	; 0x9aba <mount_volume+0x290>
    9aac:	73 e0       	ldi	r23, 0x03	; 3
    9aae:	a7 2e       	mov	r10, r23
    9ab0:	b1 2c       	mov	r11, r1
    9ab2:	03 c0       	rjmp	.+6      	; 0x9aba <mount_volume+0x290>
    9ab4:	62 e0       	ldi	r22, 0x02	; 2
    9ab6:	a6 2e       	mov	r10, r22
    9ab8:	b1 2c       	mov	r11, r1
    9aba:	69 01       	movw	r12, r18
    9abc:	7a 01       	movw	r14, r20
    9abe:	a2 e0       	ldi	r26, 0x02	; 2
    9ac0:	ca 0e       	add	r12, r26
    9ac2:	d1 1c       	adc	r13, r1
    9ac4:	e1 1c       	adc	r14, r1
    9ac6:	f1 1c       	adc	r15, r1
    9ac8:	f8 01       	movw	r30, r16
    9aca:	c1 8e       	std	Z+25, r12	; 0x19
    9acc:	d2 8e       	std	Z+26, r13	; 0x1a
    9ace:	e3 8e       	std	Z+27, r14	; 0x1b
    9ad0:	f4 8e       	std	Z+28, r15	; 0x1c
    9ad2:	29 89       	ldd	r18, Y+17	; 0x11
    9ad4:	3a 89       	ldd	r19, Y+18	; 0x12
    9ad6:	4b 89       	ldd	r20, Y+19	; 0x13
    9ad8:	5c 89       	ldd	r21, Y+20	; 0x14
    9ada:	21 a3       	std	Z+33, r18	; 0x21
    9adc:	32 a3       	std	Z+34, r19	; 0x22
    9ade:	43 a3       	std	Z+35, r20	; 0x23
    9ae0:	54 a3       	std	Z+36, r21	; 0x24
    9ae2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9ae4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9ae6:	af 8d       	ldd	r26, Y+31	; 0x1f
    9ae8:	b8 a1       	ldd	r27, Y+32	; 0x20
    9aea:	28 0f       	add	r18, r24
    9aec:	39 1f       	adc	r19, r25
    9aee:	4a 1f       	adc	r20, r26
    9af0:	5b 1f       	adc	r21, r27
    9af2:	2d 8f       	std	Y+29, r18	; 0x1d
    9af4:	3e 8f       	std	Y+30, r19	; 0x1e
    9af6:	4f 8f       	std	Y+31, r20	; 0x1f
    9af8:	58 a3       	std	Y+32, r21	; 0x20
    9afa:	25 a3       	std	Z+37, r18	; 0x25
    9afc:	36 a3       	std	Z+38, r19	; 0x26
    9afe:	47 a3       	std	Z+39, r20	; 0x27
    9b00:	50 a7       	std	Z+40, r21	; 0x28
    9b02:	49 89       	ldd	r20, Y+17	; 0x11
    9b04:	5a 89       	ldd	r21, Y+18	; 0x12
    9b06:	6b 89       	ldd	r22, Y+19	; 0x13
    9b08:	7c 89       	ldd	r23, Y+20	; 0x14
    9b0a:	8d 89       	ldd	r24, Y+21	; 0x15
    9b0c:	9e 89       	ldd	r25, Y+22	; 0x16
    9b0e:	af 89       	ldd	r26, Y+23	; 0x17
    9b10:	b8 8d       	ldd	r27, Y+24	; 0x18
    9b12:	48 0f       	add	r20, r24
    9b14:	59 1f       	adc	r21, r25
    9b16:	6a 1f       	adc	r22, r26
    9b18:	7b 1f       	adc	r23, r27
    9b1a:	45 a7       	std	Z+45, r20	; 0x2d
    9b1c:	56 a7       	std	Z+46, r21	; 0x2e
    9b1e:	67 a7       	std	Z+47, r22	; 0x2f
    9b20:	70 ab       	std	Z+48, r23	; 0x30
    9b22:	f3 e0       	ldi	r31, 0x03	; 3
    9b24:	af 16       	cp	r10, r31
    9b26:	b1 04       	cpc	r11, r1
    9b28:	e9 f4       	brne	.+58     	; 0x9b64 <mount_volume+0x33a>
    9b2a:	f8 01       	movw	r30, r16
    9b2c:	e1 5a       	subi	r30, 0xA1	; 161
    9b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    9b30:	80 81       	ld	r24, Z
    9b32:	91 81       	ldd	r25, Z+1	; 0x01
    9b34:	89 2b       	or	r24, r25
    9b36:	09 f0       	breq	.+2      	; 0x9b3a <mount_volume+0x310>
    9b38:	fc ce       	rjmp	.-520    	; 0x9932 <mount_volume+0x108>
    9b3a:	81 14       	cp	r8, r1
    9b3c:	91 04       	cpc	r9, r1
    9b3e:	09 f0       	breq	.+2      	; 0x9b42 <mount_volume+0x318>
    9b40:	f8 ce       	rjmp	.-528    	; 0x9932 <mount_volume+0x108>
    9b42:	c8 01       	movw	r24, r16
    9b44:	8f 59       	subi	r24, 0x9F	; 159
    9b46:	9f 4f       	sbci	r25, 0xFF	; 255
    9b48:	33 da       	rcall	.-2970   	; 0x8fb0 <ld_dword>
    9b4a:	f8 01       	movw	r30, r16
    9b4c:	61 a7       	std	Z+41, r22	; 0x29
    9b4e:	72 a7       	std	Z+42, r23	; 0x2a
    9b50:	83 a7       	std	Z+43, r24	; 0x2b
    9b52:	94 a7       	std	Z+44, r25	; 0x2c
    9b54:	42 e0       	ldi	r20, 0x02	; 2
    9b56:	cc 0c       	add	r12, r12
    9b58:	dd 1c       	adc	r13, r13
    9b5a:	ee 1c       	adc	r14, r14
    9b5c:	ff 1c       	adc	r15, r15
    9b5e:	4a 95       	dec	r20
    9b60:	d1 f7       	brne	.-12     	; 0x9b56 <mount_volume+0x32c>
    9b62:	33 c0       	rjmp	.+102    	; 0x9bca <mount_volume+0x3a0>
    9b64:	81 14       	cp	r8, r1
    9b66:	91 04       	cpc	r9, r1
    9b68:	09 f4       	brne	.+2      	; 0x9b6c <mount_volume+0x342>
    9b6a:	e3 ce       	rjmp	.-570    	; 0x9932 <mount_volume+0x108>
    9b6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9b6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9b70:	af 8d       	ldd	r26, Y+31	; 0x1f
    9b72:	b8 a1       	ldd	r27, Y+32	; 0x20
    9b74:	29 8d       	ldd	r18, Y+25	; 0x19
    9b76:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9b78:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9b7a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9b7c:	82 0f       	add	r24, r18
    9b7e:	93 1f       	adc	r25, r19
    9b80:	a4 1f       	adc	r26, r20
    9b82:	b5 1f       	adc	r27, r21
    9b84:	f8 01       	movw	r30, r16
    9b86:	81 a7       	std	Z+41, r24	; 0x29
    9b88:	92 a7       	std	Z+42, r25	; 0x2a
    9b8a:	a3 a7       	std	Z+43, r26	; 0x2b
    9b8c:	b4 a7       	std	Z+44, r27	; 0x2c
    9b8e:	f2 e0       	ldi	r31, 0x02	; 2
    9b90:	af 16       	cp	r10, r31
    9b92:	b1 04       	cpc	r11, r1
    9b94:	29 f4       	brne	.+10     	; 0x9ba0 <mount_volume+0x376>
    9b96:	cc 0c       	add	r12, r12
    9b98:	dd 1c       	adc	r13, r13
    9b9a:	ee 1c       	adc	r14, r14
    9b9c:	ff 1c       	adc	r15, r15
    9b9e:	15 c0       	rjmp	.+42     	; 0x9bca <mount_volume+0x3a0>
    9ba0:	a3 e0       	ldi	r26, 0x03	; 3
    9ba2:	b0 e0       	ldi	r27, 0x00	; 0
    9ba4:	a7 01       	movw	r20, r14
    9ba6:	96 01       	movw	r18, r12
    9ba8:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
    9bac:	dc 01       	movw	r26, r24
    9bae:	cb 01       	movw	r24, r22
    9bb0:	b6 95       	lsr	r27
    9bb2:	a7 95       	ror	r26
    9bb4:	97 95       	ror	r25
    9bb6:	87 95       	ror	r24
    9bb8:	21 e0       	ldi	r18, 0x01	; 1
    9bba:	c2 22       	and	r12, r18
    9bbc:	dd 24       	eor	r13, r13
    9bbe:	ee 24       	eor	r14, r14
    9bc0:	ff 24       	eor	r15, r15
    9bc2:	c8 0e       	add	r12, r24
    9bc4:	d9 1e       	adc	r13, r25
    9bc6:	ea 1e       	adc	r14, r26
    9bc8:	fb 1e       	adc	r15, r27
    9bca:	3f ef       	ldi	r19, 0xFF	; 255
    9bcc:	c3 0e       	add	r12, r19
    9bce:	31 e0       	ldi	r19, 0x01	; 1
    9bd0:	d3 1e       	adc	r13, r19
    9bd2:	e1 1c       	adc	r14, r1
    9bd4:	f1 1c       	adc	r15, r1
    9bd6:	89 e0       	ldi	r24, 0x09	; 9
    9bd8:	f6 94       	lsr	r15
    9bda:	e7 94       	ror	r14
    9bdc:	d7 94       	ror	r13
    9bde:	c7 94       	ror	r12
    9be0:	8a 95       	dec	r24
    9be2:	d1 f7       	brne	.-12     	; 0x9bd8 <mount_volume+0x3ae>
    9be4:	4c 14       	cp	r4, r12
    9be6:	5d 04       	cpc	r5, r13
    9be8:	6e 04       	cpc	r6, r14
    9bea:	7f 04       	cpc	r7, r15
    9bec:	08 f4       	brcc	.+2      	; 0x9bf0 <mount_volume+0x3c6>
    9bee:	a1 ce       	rjmp	.-702    	; 0x9932 <mount_volume+0x108>
    9bf0:	8f ef       	ldi	r24, 0xFF	; 255
    9bf2:	9f ef       	ldi	r25, 0xFF	; 255
    9bf4:	dc 01       	movw	r26, r24
    9bf6:	f8 01       	movw	r30, r16
    9bf8:	81 8b       	std	Z+17, r24	; 0x11
    9bfa:	92 8b       	std	Z+18, r25	; 0x12
    9bfc:	a3 8b       	std	Z+19, r26	; 0x13
    9bfe:	b4 8b       	std	Z+20, r27	; 0x14
    9c00:	85 87       	std	Z+13, r24	; 0x0d
    9c02:	96 87       	std	Z+14, r25	; 0x0e
    9c04:	a7 87       	std	Z+15, r26	; 0x0f
    9c06:	b0 8b       	std	Z+16, r27	; 0x10
    9c08:	80 e8       	ldi	r24, 0x80	; 128
    9c0a:	84 83       	std	Z+4, r24	; 0x04
    9c0c:	f3 e0       	ldi	r31, 0x03	; 3
    9c0e:	af 16       	cp	r10, r31
    9c10:	b1 04       	cpc	r11, r1
    9c12:	09 f0       	breq	.+2      	; 0x9c16 <mount_volume+0x3ec>
    9c14:	3f c0       	rjmp	.+126    	; 0x9c94 <mount_volume+0x46a>
    9c16:	f8 01       	movw	r30, r16
    9c18:	eb 59       	subi	r30, 0x9B	; 155
    9c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    9c1c:	80 81       	ld	r24, Z
    9c1e:	91 81       	ldd	r25, Z+1	; 0x01
    9c20:	01 97       	sbiw	r24, 0x01	; 1
    9c22:	c1 f5       	brne	.+112    	; 0x9c94 <mount_volume+0x46a>
    9c24:	49 89       	ldd	r20, Y+17	; 0x11
    9c26:	5a 89       	ldd	r21, Y+18	; 0x12
    9c28:	6b 89       	ldd	r22, Y+19	; 0x13
    9c2a:	7c 89       	ldd	r23, Y+20	; 0x14
    9c2c:	4f 5f       	subi	r20, 0xFF	; 255
    9c2e:	5f 4f       	sbci	r21, 0xFF	; 255
    9c30:	6f 4f       	sbci	r22, 0xFF	; 255
    9c32:	7f 4f       	sbci	r23, 0xFF	; 255
    9c34:	c8 01       	movw	r24, r16
    9c36:	7e dd       	rcall	.-1284   	; 0x9734 <move_window>
    9c38:	89 2b       	or	r24, r25
    9c3a:	61 f5       	brne	.+88     	; 0x9c94 <mount_volume+0x46a>
    9c3c:	f8 01       	movw	r30, r16
    9c3e:	14 82       	std	Z+4, r1	; 0x04
    9c40:	ed 5c       	subi	r30, 0xCD	; 205
    9c42:	fd 4f       	sbci	r31, 0xFD	; 253
    9c44:	80 81       	ld	r24, Z
    9c46:	91 81       	ldd	r25, Z+1	; 0x01
    9c48:	85 35       	cpi	r24, 0x55	; 85
    9c4a:	9a 4a       	sbci	r25, 0xAA	; 170
    9c4c:	19 f5       	brne	.+70     	; 0x9c94 <mount_volume+0x46a>
    9c4e:	c8 01       	movw	r24, r16
    9c50:	c5 96       	adiw	r24, 0x35	; 53
    9c52:	ae d9       	rcall	.-3236   	; 0x8fb0 <ld_dword>
    9c54:	62 35       	cpi	r22, 0x52	; 82
    9c56:	72 45       	sbci	r23, 0x52	; 82
    9c58:	81 46       	sbci	r24, 0x61	; 97
    9c5a:	91 44       	sbci	r25, 0x41	; 65
    9c5c:	d9 f4       	brne	.+54     	; 0x9c94 <mount_volume+0x46a>
    9c5e:	c8 01       	movw	r24, r16
    9c60:	87 5e       	subi	r24, 0xE7	; 231
    9c62:	9d 4f       	sbci	r25, 0xFD	; 253
    9c64:	a5 d9       	rcall	.-3254   	; 0x8fb0 <ld_dword>
    9c66:	62 37       	cpi	r22, 0x72	; 114
    9c68:	72 47       	sbci	r23, 0x72	; 114
    9c6a:	81 44       	sbci	r24, 0x41	; 65
    9c6c:	91 46       	sbci	r25, 0x61	; 97
    9c6e:	91 f4       	brne	.+36     	; 0x9c94 <mount_volume+0x46a>
    9c70:	c8 01       	movw	r24, r16
    9c72:	83 5e       	subi	r24, 0xE3	; 227
    9c74:	9d 4f       	sbci	r25, 0xFD	; 253
    9c76:	9c d9       	rcall	.-3272   	; 0x8fb0 <ld_dword>
    9c78:	f8 01       	movw	r30, r16
    9c7a:	61 8b       	std	Z+17, r22	; 0x11
    9c7c:	72 8b       	std	Z+18, r23	; 0x12
    9c7e:	83 8b       	std	Z+19, r24	; 0x13
    9c80:	94 8b       	std	Z+20, r25	; 0x14
    9c82:	c8 01       	movw	r24, r16
    9c84:	8f 5d       	subi	r24, 0xDF	; 223
    9c86:	9d 4f       	sbci	r25, 0xFD	; 253
    9c88:	93 d9       	rcall	.-3290   	; 0x8fb0 <ld_dword>
    9c8a:	f8 01       	movw	r30, r16
    9c8c:	65 87       	std	Z+13, r22	; 0x0d
    9c8e:	76 87       	std	Z+14, r23	; 0x0e
    9c90:	87 87       	std	Z+15, r24	; 0x0f
    9c92:	90 8b       	std	Z+16, r25	; 0x10
    9c94:	d8 01       	movw	r26, r16
    9c96:	ac 92       	st	X, r10
    9c98:	80 91 1f 18 	lds	r24, 0x181F	; 0x80181f <Fsid>
    9c9c:	90 91 20 18 	lds	r25, 0x1820	; 0x801820 <Fsid+0x1>
    9ca0:	01 96       	adiw	r24, 0x01	; 1
    9ca2:	90 93 20 18 	sts	0x1820, r25	; 0x801820 <Fsid+0x1>
    9ca6:	80 93 1f 18 	sts	0x181F, r24	; 0x80181f <Fsid>
    9caa:	f8 01       	movw	r30, r16
    9cac:	96 83       	std	Z+6, r25	; 0x06
    9cae:	85 83       	std	Z+5, r24	; 0x05
    9cb0:	15 8a       	std	Z+21, r1	; 0x15
    9cb2:	16 8a       	std	Z+22, r1	; 0x16
    9cb4:	17 8a       	std	Z+23, r1	; 0x17
    9cb6:	10 8e       	std	Z+24, r1	; 0x18
    9cb8:	06 c0       	rjmp	.+12     	; 0x9cc6 <mount_volume+0x49c>
    9cba:	8b e0       	ldi	r24, 0x0B	; 11
    9cbc:	90 e0       	ldi	r25, 0x00	; 0
    9cbe:	0b c0       	rjmp	.+22     	; 0x9cd6 <mount_volume+0x4ac>
    9cc0:	8c e0       	ldi	r24, 0x0C	; 12
    9cc2:	90 e0       	ldi	r25, 0x00	; 0
    9cc4:	08 c0       	rjmp	.+16     	; 0x9cd6 <mount_volume+0x4ac>
    9cc6:	80 e0       	ldi	r24, 0x00	; 0
    9cc8:	90 e0       	ldi	r25, 0x00	; 0
    9cca:	05 c0       	rjmp	.+10     	; 0x9cd6 <mount_volume+0x4ac>
    9ccc:	83 e0       	ldi	r24, 0x03	; 3
    9cce:	90 e0       	ldi	r25, 0x00	; 0
    9cd0:	02 c0       	rjmp	.+4      	; 0x9cd6 <mount_volume+0x4ac>
    9cd2:	81 e0       	ldi	r24, 0x01	; 1
    9cd4:	90 e0       	ldi	r25, 0x00	; 0
    9cd6:	a0 96       	adiw	r28, 0x20	; 32
    9cd8:	e0 e1       	ldi	r30, 0x10	; 16
    9cda:	0c 94 34 e7 	jmp	0x1ce68	; 0x1ce68 <__epilogue_restores__+0x4>

00009cde <put_fat>:
    9cde:	a6 e0       	ldi	r26, 0x06	; 6
    9ce0:	b0 e0       	ldi	r27, 0x00	; 0
    9ce2:	e5 e7       	ldi	r30, 0x75	; 117
    9ce4:	fe e4       	ldi	r31, 0x4E	; 78
    9ce6:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    9cea:	42 30       	cpi	r20, 0x02	; 2
    9cec:	51 05       	cpc	r21, r1
    9cee:	61 05       	cpc	r22, r1
    9cf0:	71 05       	cpc	r23, r1
    9cf2:	08 f4       	brcc	.+2      	; 0x9cf6 <put_fat+0x18>
    9cf4:	e5 c0       	rjmp	.+458    	; 0x9ec0 <put_fat+0x1e2>
    9cf6:	fc 01       	movw	r30, r24
    9cf8:	c1 8c       	ldd	r12, Z+25	; 0x19
    9cfa:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9cfc:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9cfe:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9d00:	4c 15       	cp	r20, r12
    9d02:	5d 05       	cpc	r21, r13
    9d04:	6e 05       	cpc	r22, r14
    9d06:	7f 05       	cpc	r23, r15
    9d08:	08 f0       	brcs	.+2      	; 0x9d0c <put_fat+0x2e>
    9d0a:	da c0       	rjmp	.+436    	; 0x9ec0 <put_fat+0x1e2>
    9d0c:	28 01       	movw	r4, r16
    9d0e:	39 01       	movw	r6, r18
    9d10:	6a 01       	movw	r12, r20
    9d12:	7b 01       	movw	r14, r22
    9d14:	9e 83       	std	Y+6, r25	; 0x06
    9d16:	8d 83       	std	Y+5, r24	; 0x05
    9d18:	80 81       	ld	r24, Z
    9d1a:	82 30       	cpi	r24, 0x02	; 2
    9d1c:	09 f4       	brne	.+2      	; 0x9d20 <put_fat+0x42>
    9d1e:	73 c0       	rjmp	.+230    	; 0x9e06 <put_fat+0x128>
    9d20:	83 30       	cpi	r24, 0x03	; 3
    9d22:	09 f4       	brne	.+2      	; 0x9d26 <put_fat+0x48>
    9d24:	92 c0       	rjmp	.+292    	; 0x9e4a <put_fat+0x16c>
    9d26:	81 30       	cpi	r24, 0x01	; 1
    9d28:	09 f0       	breq	.+2      	; 0x9d2c <put_fat+0x4e>
    9d2a:	ca c0       	rjmp	.+404    	; 0x9ec0 <put_fat+0x1e2>
    9d2c:	4a 01       	movw	r8, r20
    9d2e:	96 94       	lsr	r9
    9d30:	87 94       	ror	r8
    9d32:	84 0e       	add	r8, r20
    9d34:	95 1e       	adc	r9, r21
    9d36:	c4 01       	movw	r24, r8
    9d38:	89 2f       	mov	r24, r25
    9d3a:	99 27       	eor	r25, r25
    9d3c:	86 95       	lsr	r24
    9d3e:	45 a1       	ldd	r20, Z+37	; 0x25
    9d40:	56 a1       	ldd	r21, Z+38	; 0x26
    9d42:	67 a1       	ldd	r22, Z+39	; 0x27
    9d44:	70 a5       	ldd	r23, Z+40	; 0x28
    9d46:	48 0f       	add	r20, r24
    9d48:	59 1f       	adc	r21, r25
    9d4a:	61 1d       	adc	r22, r1
    9d4c:	71 1d       	adc	r23, r1
    9d4e:	cf 01       	movw	r24, r30
    9d50:	f1 dc       	rcall	.-1566   	; 0x9734 <move_window>
    9d52:	5c 01       	movw	r10, r24
    9d54:	89 2b       	or	r24, r25
    9d56:	09 f0       	breq	.+2      	; 0x9d5a <put_fat+0x7c>
    9d58:	b6 c0       	rjmp	.+364    	; 0x9ec6 <put_fat+0x1e8>
    9d5a:	2d 80       	ldd	r2, Y+5	; 0x05
    9d5c:	3e 80       	ldd	r3, Y+6	; 0x06
    9d5e:	f5 e3       	ldi	r31, 0x35	; 53
    9d60:	2f 0e       	add	r2, r31
    9d62:	31 1c       	adc	r3, r1
    9d64:	84 01       	movw	r16, r8
    9d66:	0f 5f       	subi	r16, 0xFF	; 255
    9d68:	1f 4f       	sbci	r17, 0xFF	; 255
    9d6a:	21 e0       	ldi	r18, 0x01	; 1
    9d6c:	92 22       	and	r9, r18
    9d6e:	f1 01       	movw	r30, r2
    9d70:	e8 0d       	add	r30, r8
    9d72:	f9 1d       	adc	r31, r9
    9d74:	d7 01       	movw	r26, r14
    9d76:	c6 01       	movw	r24, r12
    9d78:	81 70       	andi	r24, 0x01	; 1
    9d7a:	99 27       	eor	r25, r25
    9d7c:	aa 27       	eor	r26, r26
    9d7e:	bb 27       	eor	r27, r27
    9d80:	89 83       	std	Y+1, r24	; 0x01
    9d82:	9a 83       	std	Y+2, r25	; 0x02
    9d84:	ab 83       	std	Y+3, r26	; 0x03
    9d86:	bc 83       	std	Y+4, r27	; 0x04
    9d88:	c0 fe       	sbrs	r12, 0
    9d8a:	09 c0       	rjmp	.+18     	; 0x9d9e <put_fat+0xc0>
    9d8c:	80 81       	ld	r24, Z
    9d8e:	28 2f       	mov	r18, r24
    9d90:	2f 70       	andi	r18, 0x0F	; 15
    9d92:	a0 e1       	ldi	r26, 0x10	; 16
    9d94:	4a 9e       	mul	r4, r26
    9d96:	c0 01       	movw	r24, r0
    9d98:	11 24       	eor	r1, r1
    9d9a:	82 2b       	or	r24, r18
    9d9c:	01 c0       	rjmp	.+2      	; 0x9da0 <put_fat+0xc2>
    9d9e:	84 2d       	mov	r24, r4
    9da0:	80 83       	st	Z, r24
    9da2:	81 e0       	ldi	r24, 0x01	; 1
    9da4:	ed 81       	ldd	r30, Y+5	; 0x05
    9da6:	fe 81       	ldd	r31, Y+6	; 0x06
    9da8:	83 83       	std	Z+3, r24	; 0x03
    9daa:	45 a1       	ldd	r20, Z+37	; 0x25
    9dac:	56 a1       	ldd	r21, Z+38	; 0x26
    9dae:	67 a1       	ldd	r22, Z+39	; 0x27
    9db0:	70 a5       	ldd	r23, Z+40	; 0x28
    9db2:	c8 01       	movw	r24, r16
    9db4:	89 2f       	mov	r24, r25
    9db6:	99 27       	eor	r25, r25
    9db8:	86 95       	lsr	r24
    9dba:	48 0f       	add	r20, r24
    9dbc:	59 1f       	adc	r21, r25
    9dbe:	61 1d       	adc	r22, r1
    9dc0:	71 1d       	adc	r23, r1
    9dc2:	cf 01       	movw	r24, r30
    9dc4:	b7 dc       	rcall	.-1682   	; 0x9734 <move_window>
    9dc6:	5c 01       	movw	r10, r24
    9dc8:	89 2b       	or	r24, r25
    9dca:	09 f0       	breq	.+2      	; 0x9dce <put_fat+0xf0>
    9dcc:	7c c0       	rjmp	.+248    	; 0x9ec6 <put_fat+0x1e8>
    9dce:	11 70       	andi	r17, 0x01	; 1
    9dd0:	f1 01       	movw	r30, r2
    9dd2:	e0 0f       	add	r30, r16
    9dd4:	f1 1f       	adc	r31, r17
    9dd6:	89 81       	ldd	r24, Y+1	; 0x01
    9dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    9dda:	ab 81       	ldd	r26, Y+3	; 0x03
    9ddc:	bc 81       	ldd	r27, Y+4	; 0x04
    9dde:	89 2b       	or	r24, r25
    9de0:	8a 2b       	or	r24, r26
    9de2:	8b 2b       	or	r24, r27
    9de4:	41 f0       	breq	.+16     	; 0x9df6 <put_fat+0x118>
    9de6:	54 e0       	ldi	r21, 0x04	; 4
    9de8:	76 94       	lsr	r7
    9dea:	67 94       	ror	r6
    9dec:	57 94       	ror	r5
    9dee:	47 94       	ror	r4
    9df0:	5a 95       	dec	r21
    9df2:	d1 f7       	brne	.-12     	; 0x9de8 <put_fat+0x10a>
    9df4:	06 c0       	rjmp	.+12     	; 0x9e02 <put_fat+0x124>
    9df6:	00 81       	ld	r16, Z
    9df8:	00 7f       	andi	r16, 0xF0	; 240
    9dfa:	85 2d       	mov	r24, r5
    9dfc:	8f 70       	andi	r24, 0x0F	; 15
    9dfe:	40 2e       	mov	r4, r16
    9e00:	48 2a       	or	r4, r24
    9e02:	40 82       	st	Z, r4
    9e04:	58 c0       	rjmp	.+176    	; 0x9eb6 <put_fat+0x1d8>
    9e06:	77 27       	eor	r23, r23
    9e08:	6f 2d       	mov	r22, r15
    9e0a:	5e 2d       	mov	r21, r14
    9e0c:	4d 2d       	mov	r20, r13
    9e0e:	ed 81       	ldd	r30, Y+5	; 0x05
    9e10:	fe 81       	ldd	r31, Y+6	; 0x06
    9e12:	85 a1       	ldd	r24, Z+37	; 0x25
    9e14:	96 a1       	ldd	r25, Z+38	; 0x26
    9e16:	a7 a1       	ldd	r26, Z+39	; 0x27
    9e18:	b0 a5       	ldd	r27, Z+40	; 0x28
    9e1a:	48 0f       	add	r20, r24
    9e1c:	59 1f       	adc	r21, r25
    9e1e:	6a 1f       	adc	r22, r26
    9e20:	7b 1f       	adc	r23, r27
    9e22:	cf 01       	movw	r24, r30
    9e24:	87 dc       	rcall	.-1778   	; 0x9734 <move_window>
    9e26:	5c 01       	movw	r10, r24
    9e28:	89 2b       	or	r24, r25
    9e2a:	09 f0       	breq	.+2      	; 0x9e2e <put_fat+0x150>
    9e2c:	4c c0       	rjmp	.+152    	; 0x9ec6 <put_fat+0x1e8>
    9e2e:	ed 81       	ldd	r30, Y+5	; 0x05
    9e30:	fe 81       	ldd	r31, Y+6	; 0x06
    9e32:	f5 96       	adiw	r30, 0x35	; 53
    9e34:	cc 0c       	add	r12, r12
    9e36:	dd 1c       	adc	r13, r13
    9e38:	e8 94       	clt
    9e3a:	c0 f8       	bld	r12, 0
    9e3c:	21 e0       	ldi	r18, 0x01	; 1
    9e3e:	d2 22       	and	r13, r18
    9e40:	ec 0d       	add	r30, r12
    9e42:	fd 1d       	adc	r31, r13
    9e44:	40 82       	st	Z, r4
    9e46:	51 82       	std	Z+1, r5	; 0x01
    9e48:	36 c0       	rjmp	.+108    	; 0x9eb6 <put_fat+0x1d8>
    9e4a:	ed 81       	ldd	r30, Y+5	; 0x05
    9e4c:	fe 81       	ldd	r31, Y+6	; 0x06
    9e4e:	85 a1       	ldd	r24, Z+37	; 0x25
    9e50:	96 a1       	ldd	r25, Z+38	; 0x26
    9e52:	a7 a1       	ldd	r26, Z+39	; 0x27
    9e54:	b0 a5       	ldd	r27, Z+40	; 0x28
    9e56:	27 e0       	ldi	r18, 0x07	; 7
    9e58:	76 95       	lsr	r23
    9e5a:	67 95       	ror	r22
    9e5c:	57 95       	ror	r21
    9e5e:	47 95       	ror	r20
    9e60:	2a 95       	dec	r18
    9e62:	d1 f7       	brne	.-12     	; 0x9e58 <put_fat+0x17a>
    9e64:	48 0f       	add	r20, r24
    9e66:	59 1f       	adc	r21, r25
    9e68:	6a 1f       	adc	r22, r26
    9e6a:	7b 1f       	adc	r23, r27
    9e6c:	cf 01       	movw	r24, r30
    9e6e:	62 dc       	rcall	.-1852   	; 0x9734 <move_window>
    9e70:	5c 01       	movw	r10, r24
    9e72:	89 2b       	or	r24, r25
    9e74:	41 f5       	brne	.+80     	; 0x9ec6 <put_fat+0x1e8>
    9e76:	4d 81       	ldd	r20, Y+5	; 0x05
    9e78:	5e 81       	ldd	r21, Y+6	; 0x06
    9e7a:	4b 5c       	subi	r20, 0xCB	; 203
    9e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    9e7e:	cc 0c       	add	r12, r12
    9e80:	dd 1c       	adc	r13, r13
    9e82:	cc 0c       	add	r12, r12
    9e84:	dd 1c       	adc	r13, r13
    9e86:	fc ef       	ldi	r31, 0xFC	; 252
    9e88:	cf 22       	and	r12, r31
    9e8a:	f1 e0       	ldi	r31, 0x01	; 1
    9e8c:	df 22       	and	r13, r31
    9e8e:	c4 0e       	add	r12, r20
    9e90:	d5 1e       	adc	r13, r21
    9e92:	c6 01       	movw	r24, r12
    9e94:	8d d8       	rcall	.-3814   	; 0x8fb0 <ld_dword>
    9e96:	2f e0       	ldi	r18, 0x0F	; 15
    9e98:	72 22       	and	r7, r18
    9e9a:	dc 01       	movw	r26, r24
    9e9c:	cb 01       	movw	r24, r22
    9e9e:	88 27       	eor	r24, r24
    9ea0:	99 27       	eor	r25, r25
    9ea2:	aa 27       	eor	r26, r26
    9ea4:	b0 7f       	andi	r27, 0xF0	; 240
    9ea6:	b3 01       	movw	r22, r6
    9ea8:	a2 01       	movw	r20, r4
    9eaa:	48 2b       	or	r20, r24
    9eac:	59 2b       	or	r21, r25
    9eae:	6a 2b       	or	r22, r26
    9eb0:	7b 2b       	or	r23, r27
    9eb2:	c6 01       	movw	r24, r12
    9eb4:	92 d8       	rcall	.-3804   	; 0x8fda <st_dword>
    9eb6:	81 e0       	ldi	r24, 0x01	; 1
    9eb8:	ed 81       	ldd	r30, Y+5	; 0x05
    9eba:	fe 81       	ldd	r31, Y+6	; 0x06
    9ebc:	83 83       	std	Z+3, r24	; 0x03
    9ebe:	03 c0       	rjmp	.+6      	; 0x9ec6 <put_fat+0x1e8>
    9ec0:	82 e0       	ldi	r24, 0x02	; 2
    9ec2:	a8 2e       	mov	r10, r24
    9ec4:	b1 2c       	mov	r11, r1
    9ec6:	c5 01       	movw	r24, r10
    9ec8:	26 96       	adiw	r28, 0x06	; 6
    9eca:	e2 e1       	ldi	r30, 0x12	; 18
    9ecc:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

00009ed0 <get_fat.isra.9>:
    9ed0:	a0 e0       	ldi	r26, 0x00	; 0
    9ed2:	b0 e0       	ldi	r27, 0x00	; 0
    9ed4:	ee e6       	ldi	r30, 0x6E	; 110
    9ed6:	ff e4       	ldi	r31, 0x4F	; 79
    9ed8:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
    9edc:	42 30       	cpi	r20, 0x02	; 2
    9ede:	51 05       	cpc	r21, r1
    9ee0:	61 05       	cpc	r22, r1
    9ee2:	71 05       	cpc	r23, r1
    9ee4:	08 f4       	brcc	.+2      	; 0x9ee8 <get_fat.isra.9+0x18>
    9ee6:	9f c0       	rjmp	.+318    	; 0xa026 <get_fat.isra.9+0x156>
    9ee8:	fc 01       	movw	r30, r24
    9eea:	01 8d       	ldd	r16, Z+25	; 0x19
    9eec:	12 8d       	ldd	r17, Z+26	; 0x1a
    9eee:	23 8d       	ldd	r18, Z+27	; 0x1b
    9ef0:	34 8d       	ldd	r19, Z+28	; 0x1c
    9ef2:	40 17       	cp	r20, r16
    9ef4:	51 07       	cpc	r21, r17
    9ef6:	62 07       	cpc	r22, r18
    9ef8:	73 07       	cpc	r23, r19
    9efa:	08 f0       	brcs	.+2      	; 0x9efe <get_fat.isra.9+0x2e>
    9efc:	94 c0       	rjmp	.+296    	; 0xa026 <get_fat.isra.9+0x156>
    9efe:	6a 01       	movw	r12, r20
    9f00:	7b 01       	movw	r14, r22
    9f02:	8c 01       	movw	r16, r24
    9f04:	80 81       	ld	r24, Z
    9f06:	82 30       	cpi	r24, 0x02	; 2
    9f08:	09 f4       	brne	.+2      	; 0x9f0c <get_fat.isra.9+0x3c>
    9f0a:	4b c0       	rjmp	.+150    	; 0x9fa2 <get_fat.isra.9+0xd2>
    9f0c:	83 30       	cpi	r24, 0x03	; 3
    9f0e:	09 f4       	brne	.+2      	; 0x9f12 <get_fat.isra.9+0x42>
    9f10:	67 c0       	rjmp	.+206    	; 0x9fe0 <get_fat.isra.9+0x110>
    9f12:	81 30       	cpi	r24, 0x01	; 1
    9f14:	09 f0       	breq	.+2      	; 0x9f18 <get_fat.isra.9+0x48>
    9f16:	87 c0       	rjmp	.+270    	; 0xa026 <get_fat.isra.9+0x156>
    9f18:	ea 01       	movw	r28, r20
    9f1a:	d6 95       	lsr	r29
    9f1c:	c7 95       	ror	r28
    9f1e:	cc 0d       	add	r28, r12
    9f20:	dd 1d       	adc	r29, r13
    9f22:	ce 01       	movw	r24, r28
    9f24:	89 2f       	mov	r24, r25
    9f26:	99 27       	eor	r25, r25
    9f28:	86 95       	lsr	r24
    9f2a:	45 a1       	ldd	r20, Z+37	; 0x25
    9f2c:	56 a1       	ldd	r21, Z+38	; 0x26
    9f2e:	67 a1       	ldd	r22, Z+39	; 0x27
    9f30:	70 a5       	ldd	r23, Z+40	; 0x28
    9f32:	48 0f       	add	r20, r24
    9f34:	59 1f       	adc	r21, r25
    9f36:	61 1d       	adc	r22, r1
    9f38:	71 1d       	adc	r23, r1
    9f3a:	cf 01       	movw	r24, r30
    9f3c:	fb db       	rcall	.-2058   	; 0x9734 <move_window>
    9f3e:	89 2b       	or	r24, r25
    9f40:	21 f0       	breq	.+8      	; 0x9f4a <get_fat.isra.9+0x7a>
    9f42:	6f ef       	ldi	r22, 0xFF	; 255
    9f44:	7f ef       	ldi	r23, 0xFF	; 255
    9f46:	cb 01       	movw	r24, r22
    9f48:	72 c0       	rjmp	.+228    	; 0xa02e <get_fat.isra.9+0x15e>
    9f4a:	5e 01       	movw	r10, r28
    9f4c:	ff ef       	ldi	r31, 0xFF	; 255
    9f4e:	af 1a       	sub	r10, r31
    9f50:	bf 0a       	sbc	r11, r31
    9f52:	d1 70       	andi	r29, 0x01	; 1
    9f54:	c0 0f       	add	r28, r16
    9f56:	d1 1f       	adc	r29, r17
    9f58:	cd a9       	ldd	r28, Y+53	; 0x35
    9f5a:	c5 01       	movw	r24, r10
    9f5c:	89 2f       	mov	r24, r25
    9f5e:	99 27       	eor	r25, r25
    9f60:	86 95       	lsr	r24
    9f62:	f8 01       	movw	r30, r16
    9f64:	45 a1       	ldd	r20, Z+37	; 0x25
    9f66:	56 a1       	ldd	r21, Z+38	; 0x26
    9f68:	67 a1       	ldd	r22, Z+39	; 0x27
    9f6a:	70 a5       	ldd	r23, Z+40	; 0x28
    9f6c:	48 0f       	add	r20, r24
    9f6e:	59 1f       	adc	r21, r25
    9f70:	61 1d       	adc	r22, r1
    9f72:	71 1d       	adc	r23, r1
    9f74:	c8 01       	movw	r24, r16
    9f76:	de db       	rcall	.-2116   	; 0x9734 <move_window>
    9f78:	89 2b       	or	r24, r25
    9f7a:	19 f7       	brne	.-58     	; 0x9f42 <get_fat.isra.9+0x72>
    9f7c:	f1 e0       	ldi	r31, 0x01	; 1
    9f7e:	bf 22       	and	r11, r31
    9f80:	f8 01       	movw	r30, r16
    9f82:	ea 0d       	add	r30, r10
    9f84:	fb 1d       	adc	r31, r11
    9f86:	85 a9       	ldd	r24, Z+53	; 0x35
    9f88:	6c 2f       	mov	r22, r28
    9f8a:	70 e0       	ldi	r23, 0x00	; 0
    9f8c:	78 2b       	or	r23, r24
    9f8e:	c0 fe       	sbrs	r12, 0
    9f90:	06 c0       	rjmp	.+12     	; 0x9f9e <get_fat.isra.9+0xce>
    9f92:	54 e0       	ldi	r21, 0x04	; 4
    9f94:	76 95       	lsr	r23
    9f96:	67 95       	ror	r22
    9f98:	5a 95       	dec	r21
    9f9a:	e1 f7       	brne	.-8      	; 0x9f94 <get_fat.isra.9+0xc4>
    9f9c:	1e c0       	rjmp	.+60     	; 0x9fda <get_fat.isra.9+0x10a>
    9f9e:	7f 70       	andi	r23, 0x0F	; 15
    9fa0:	1c c0       	rjmp	.+56     	; 0x9fda <get_fat.isra.9+0x10a>
    9fa2:	77 27       	eor	r23, r23
    9fa4:	6f 2d       	mov	r22, r15
    9fa6:	5e 2d       	mov	r21, r14
    9fa8:	4d 2d       	mov	r20, r13
    9faa:	85 a1       	ldd	r24, Z+37	; 0x25
    9fac:	96 a1       	ldd	r25, Z+38	; 0x26
    9fae:	a7 a1       	ldd	r26, Z+39	; 0x27
    9fb0:	b0 a5       	ldd	r27, Z+40	; 0x28
    9fb2:	48 0f       	add	r20, r24
    9fb4:	59 1f       	adc	r21, r25
    9fb6:	6a 1f       	adc	r22, r26
    9fb8:	7b 1f       	adc	r23, r27
    9fba:	cf 01       	movw	r24, r30
    9fbc:	bb db       	rcall	.-2186   	; 0x9734 <move_window>
    9fbe:	89 2b       	or	r24, r25
    9fc0:	09 f0       	breq	.+2      	; 0x9fc4 <get_fat.isra.9+0xf4>
    9fc2:	bf cf       	rjmp	.-130    	; 0x9f42 <get_fat.isra.9+0x72>
    9fc4:	cc 0c       	add	r12, r12
    9fc6:	dd 1c       	adc	r13, r13
    9fc8:	e8 94       	clt
    9fca:	c0 f8       	bld	r12, 0
    9fcc:	f1 e0       	ldi	r31, 0x01	; 1
    9fce:	df 22       	and	r13, r31
    9fd0:	f8 01       	movw	r30, r16
    9fd2:	ec 0d       	add	r30, r12
    9fd4:	fd 1d       	adc	r31, r13
    9fd6:	65 a9       	ldd	r22, Z+53	; 0x35
    9fd8:	76 a9       	ldd	r23, Z+54	; 0x36
    9fda:	80 e0       	ldi	r24, 0x00	; 0
    9fdc:	90 e0       	ldi	r25, 0x00	; 0
    9fde:	27 c0       	rjmp	.+78     	; 0xa02e <get_fat.isra.9+0x15e>
    9fe0:	85 a1       	ldd	r24, Z+37	; 0x25
    9fe2:	96 a1       	ldd	r25, Z+38	; 0x26
    9fe4:	a7 a1       	ldd	r26, Z+39	; 0x27
    9fe6:	b0 a5       	ldd	r27, Z+40	; 0x28
    9fe8:	27 e0       	ldi	r18, 0x07	; 7
    9fea:	76 95       	lsr	r23
    9fec:	67 95       	ror	r22
    9fee:	57 95       	ror	r21
    9ff0:	47 95       	ror	r20
    9ff2:	2a 95       	dec	r18
    9ff4:	d1 f7       	brne	.-12     	; 0x9fea <get_fat.isra.9+0x11a>
    9ff6:	48 0f       	add	r20, r24
    9ff8:	59 1f       	adc	r21, r25
    9ffa:	6a 1f       	adc	r22, r26
    9ffc:	7b 1f       	adc	r23, r27
    9ffe:	cf 01       	movw	r24, r30
    a000:	99 db       	rcall	.-2254   	; 0x9734 <move_window>
    a002:	89 2b       	or	r24, r25
    a004:	09 f0       	breq	.+2      	; 0xa008 <get_fat.isra.9+0x138>
    a006:	9d cf       	rjmp	.-198    	; 0x9f42 <get_fat.isra.9+0x72>
    a008:	0b 5c       	subi	r16, 0xCB	; 203
    a00a:	1f 4f       	sbci	r17, 0xFF	; 255
    a00c:	cc 0c       	add	r12, r12
    a00e:	dd 1c       	adc	r13, r13
    a010:	cc 0c       	add	r12, r12
    a012:	dd 1c       	adc	r13, r13
    a014:	c6 01       	movw	r24, r12
    a016:	8c 7f       	andi	r24, 0xFC	; 252
    a018:	91 70       	andi	r25, 0x01	; 1
    a01a:	80 0f       	add	r24, r16
    a01c:	91 1f       	adc	r25, r17
    a01e:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <ld_dword>
    a022:	9f 70       	andi	r25, 0x0F	; 15
    a024:	04 c0       	rjmp	.+8      	; 0xa02e <get_fat.isra.9+0x15e>
    a026:	61 e0       	ldi	r22, 0x01	; 1
    a028:	70 e0       	ldi	r23, 0x00	; 0
    a02a:	80 e0       	ldi	r24, 0x00	; 0
    a02c:	90 e0       	ldi	r25, 0x00	; 0
    a02e:	cd b7       	in	r28, 0x3d	; 61
    a030:	de b7       	in	r29, 0x3e	; 62
    a032:	ea e0       	ldi	r30, 0x0A	; 10
    a034:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

0000a038 <dir_sdi>:
    a038:	a0 e0       	ldi	r26, 0x00	; 0
    a03a:	b0 e0       	ldi	r27, 0x00	; 0
    a03c:	e2 e2       	ldi	r30, 0x22	; 34
    a03e:	f0 e5       	ldi	r31, 0x50	; 80
    a040:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__prologue_saves__+0x4>
    a044:	ec 01       	movw	r28, r24
    a046:	6a 01       	movw	r12, r20
    a048:	7b 01       	movw	r14, r22
    a04a:	41 15       	cp	r20, r1
    a04c:	51 05       	cpc	r21, r1
    a04e:	80 e2       	ldi	r24, 0x20	; 32
    a050:	68 07       	cpc	r22, r24
    a052:	71 05       	cpc	r23, r1
    a054:	18 f0       	brcs	.+6      	; 0xa05c <dir_sdi+0x24>
    a056:	82 e0       	ldi	r24, 0x02	; 2
    a058:	90 e0       	ldi	r25, 0x00	; 0
    a05a:	aa c0       	rjmp	.+340    	; 0xa1b0 <dir_sdi+0x178>
    a05c:	db 01       	movw	r26, r22
    a05e:	ca 01       	movw	r24, r20
    a060:	8f 71       	andi	r24, 0x1F	; 31
    a062:	99 27       	eor	r25, r25
    a064:	aa 27       	eor	r26, r26
    a066:	bb 27       	eor	r27, r27
    a068:	89 2b       	or	r24, r25
    a06a:	8a 2b       	or	r24, r26
    a06c:	8b 2b       	or	r24, r27
    a06e:	99 f7       	brne	.-26     	; 0xa056 <dir_sdi+0x1e>
    a070:	08 81       	ld	r16, Y
    a072:	19 81       	ldd	r17, Y+1	; 0x01
    a074:	4e 87       	std	Y+14, r20	; 0x0e
    a076:	5f 87       	std	Y+15, r21	; 0x0f
    a078:	68 8b       	std	Y+16, r22	; 0x10
    a07a:	79 8b       	std	Y+17, r23	; 0x11
    a07c:	8e 80       	ldd	r8, Y+6	; 0x06
    a07e:	9f 80       	ldd	r9, Y+7	; 0x07
    a080:	a8 84       	ldd	r10, Y+8	; 0x08
    a082:	b9 84       	ldd	r11, Y+9	; 0x09
    a084:	81 14       	cp	r8, r1
    a086:	91 04       	cpc	r9, r1
    a088:	a1 04       	cpc	r10, r1
    a08a:	b1 04       	cpc	r11, r1
    a08c:	51 f5       	brne	.+84     	; 0xa0e2 <dir_sdi+0xaa>
    a08e:	f8 01       	movw	r30, r16
    a090:	80 81       	ld	r24, Z
    a092:	83 30       	cpi	r24, 0x03	; 3
    a094:	40 f0       	brcs	.+16     	; 0xa0a6 <dir_sdi+0x6e>
    a096:	81 a5       	ldd	r24, Z+41	; 0x29
    a098:	92 a5       	ldd	r25, Z+42	; 0x2a
    a09a:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a09c:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a09e:	00 97       	sbiw	r24, 0x00	; 0
    a0a0:	a1 05       	cpc	r26, r1
    a0a2:	b1 05       	cpc	r27, r1
    a0a4:	e1 f4       	brne	.+56     	; 0xa0de <dir_sdi+0xa6>
    a0a6:	f8 01       	movw	r30, r16
    a0a8:	87 81       	ldd	r24, Z+7	; 0x07
    a0aa:	90 85       	ldd	r25, Z+8	; 0x08
    a0ac:	a0 e0       	ldi	r26, 0x00	; 0
    a0ae:	b0 e0       	ldi	r27, 0x00	; 0
    a0b0:	b7 01       	movw	r22, r14
    a0b2:	a6 01       	movw	r20, r12
    a0b4:	25 e0       	ldi	r18, 0x05	; 5
    a0b6:	76 95       	lsr	r23
    a0b8:	67 95       	ror	r22
    a0ba:	57 95       	ror	r21
    a0bc:	47 95       	ror	r20
    a0be:	2a 95       	dec	r18
    a0c0:	d1 f7       	brne	.-12     	; 0xa0b6 <dir_sdi+0x7e>
    a0c2:	48 17       	cp	r20, r24
    a0c4:	59 07       	cpc	r21, r25
    a0c6:	6a 07       	cpc	r22, r26
    a0c8:	7b 07       	cpc	r23, r27
    a0ca:	28 f6       	brcc	.-118    	; 0xa056 <dir_sdi+0x1e>
    a0cc:	81 a5       	ldd	r24, Z+41	; 0x29
    a0ce:	92 a5       	ldd	r25, Z+42	; 0x2a
    a0d0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a0d2:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a0d4:	8e 8b       	std	Y+22, r24	; 0x16
    a0d6:	9f 8b       	std	Y+23, r25	; 0x17
    a0d8:	a8 8f       	std	Y+24, r26	; 0x18
    a0da:	b9 8f       	std	Y+25, r27	; 0x19
    a0dc:	3e c0       	rjmp	.+124    	; 0xa15a <dir_sdi+0x122>
    a0de:	4c 01       	movw	r8, r24
    a0e0:	5d 01       	movw	r10, r26
    a0e2:	f8 01       	movw	r30, r16
    a0e4:	41 84       	ldd	r4, Z+9	; 0x09
    a0e6:	52 84       	ldd	r5, Z+10	; 0x0a
    a0e8:	61 2c       	mov	r6, r1
    a0ea:	71 2c       	mov	r7, r1
    a0ec:	39 e0       	ldi	r19, 0x09	; 9
    a0ee:	44 0c       	add	r4, r4
    a0f0:	55 1c       	adc	r5, r5
    a0f2:	66 1c       	adc	r6, r6
    a0f4:	77 1c       	adc	r7, r7
    a0f6:	3a 95       	dec	r19
    a0f8:	d1 f7       	brne	.-12     	; 0xa0ee <dir_sdi+0xb6>
    a0fa:	b5 01       	movw	r22, r10
    a0fc:	a4 01       	movw	r20, r8
    a0fe:	c4 14       	cp	r12, r4
    a100:	d5 04       	cpc	r13, r5
    a102:	e6 04       	cpc	r14, r6
    a104:	f7 04       	cpc	r15, r7
    a106:	10 f1       	brcs	.+68     	; 0xa14c <dir_sdi+0x114>
    a108:	88 81       	ld	r24, Y
    a10a:	99 81       	ldd	r25, Y+1	; 0x01
    a10c:	e1 de       	rcall	.-574    	; 0x9ed0 <get_fat.isra.9>
    a10e:	4b 01       	movw	r8, r22
    a110:	5c 01       	movw	r10, r24
    a112:	6f 3f       	cpi	r22, 0xFF	; 255
    a114:	7f 4f       	sbci	r23, 0xFF	; 255
    a116:	8f 4f       	sbci	r24, 0xFF	; 255
    a118:	9f 4f       	sbci	r25, 0xFF	; 255
    a11a:	09 f4       	brne	.+2      	; 0xa11e <dir_sdi+0xe6>
    a11c:	47 c0       	rjmp	.+142    	; 0xa1ac <dir_sdi+0x174>
    a11e:	82 e0       	ldi	r24, 0x02	; 2
    a120:	88 16       	cp	r8, r24
    a122:	91 04       	cpc	r9, r1
    a124:	a1 04       	cpc	r10, r1
    a126:	b1 04       	cpc	r11, r1
    a128:	08 f4       	brcc	.+2      	; 0xa12c <dir_sdi+0xf4>
    a12a:	95 cf       	rjmp	.-214    	; 0xa056 <dir_sdi+0x1e>
    a12c:	f8 01       	movw	r30, r16
    a12e:	81 8d       	ldd	r24, Z+25	; 0x19
    a130:	92 8d       	ldd	r25, Z+26	; 0x1a
    a132:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a134:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a136:	88 16       	cp	r8, r24
    a138:	99 06       	cpc	r9, r25
    a13a:	aa 06       	cpc	r10, r26
    a13c:	bb 06       	cpc	r11, r27
    a13e:	08 f0       	brcs	.+2      	; 0xa142 <dir_sdi+0x10a>
    a140:	8a cf       	rjmp	.-236    	; 0xa056 <dir_sdi+0x1e>
    a142:	c4 18       	sub	r12, r4
    a144:	d5 08       	sbc	r13, r5
    a146:	e6 08       	sbc	r14, r6
    a148:	f7 08       	sbc	r15, r7
    a14a:	d7 cf       	rjmp	.-82     	; 0xa0fa <dir_sdi+0xc2>
    a14c:	c8 01       	movw	r24, r16
    a14e:	0e 94 0b 48 	call	0x9016	; 0x9016 <clst2sect>
    a152:	6e 8b       	std	Y+22, r22	; 0x16
    a154:	7f 8b       	std	Y+23, r23	; 0x17
    a156:	88 8f       	std	Y+24, r24	; 0x18
    a158:	99 8f       	std	Y+25, r25	; 0x19
    a15a:	8a 8a       	std	Y+18, r8	; 0x12
    a15c:	9b 8a       	std	Y+19, r9	; 0x13
    a15e:	ac 8a       	std	Y+20, r10	; 0x14
    a160:	bd 8a       	std	Y+21, r11	; 0x15
    a162:	8e 89       	ldd	r24, Y+22	; 0x16
    a164:	9f 89       	ldd	r25, Y+23	; 0x17
    a166:	a8 8d       	ldd	r26, Y+24	; 0x18
    a168:	b9 8d       	ldd	r27, Y+25	; 0x19
    a16a:	00 97       	sbiw	r24, 0x00	; 0
    a16c:	a1 05       	cpc	r26, r1
    a16e:	b1 05       	cpc	r27, r1
    a170:	09 f4       	brne	.+2      	; 0xa174 <dir_sdi+0x13c>
    a172:	71 cf       	rjmp	.-286    	; 0xa056 <dir_sdi+0x1e>
    a174:	b7 01       	movw	r22, r14
    a176:	a6 01       	movw	r20, r12
    a178:	29 e0       	ldi	r18, 0x09	; 9
    a17a:	76 95       	lsr	r23
    a17c:	67 95       	ror	r22
    a17e:	57 95       	ror	r21
    a180:	47 95       	ror	r20
    a182:	2a 95       	dec	r18
    a184:	d1 f7       	brne	.-12     	; 0xa17a <dir_sdi+0x142>
    a186:	84 0f       	add	r24, r20
    a188:	95 1f       	adc	r25, r21
    a18a:	a6 1f       	adc	r26, r22
    a18c:	b7 1f       	adc	r27, r23
    a18e:	8e 8b       	std	Y+22, r24	; 0x16
    a190:	9f 8b       	std	Y+23, r25	; 0x17
    a192:	a8 8f       	std	Y+24, r26	; 0x18
    a194:	b9 8f       	std	Y+25, r27	; 0x19
    a196:	0b 5c       	subi	r16, 0xCB	; 203
    a198:	1f 4f       	sbci	r17, 0xFF	; 255
    a19a:	f1 e0       	ldi	r31, 0x01	; 1
    a19c:	df 22       	and	r13, r31
    a19e:	c0 0e       	add	r12, r16
    a1a0:	d1 1e       	adc	r13, r17
    a1a2:	db 8e       	std	Y+27, r13	; 0x1b
    a1a4:	ca 8e       	std	Y+26, r12	; 0x1a
    a1a6:	80 e0       	ldi	r24, 0x00	; 0
    a1a8:	90 e0       	ldi	r25, 0x00	; 0
    a1aa:	02 c0       	rjmp	.+4      	; 0xa1b0 <dir_sdi+0x178>
    a1ac:	81 e0       	ldi	r24, 0x01	; 1
    a1ae:	90 e0       	ldi	r25, 0x00	; 0
    a1b0:	cd b7       	in	r28, 0x3d	; 61
    a1b2:	de b7       	in	r29, 0x3e	; 62
    a1b4:	e0 e1       	ldi	r30, 0x10	; 16
    a1b6:	0c 94 34 e7 	jmp	0x1ce68	; 0x1ce68 <__epilogue_restores__+0x4>

0000a1ba <create_chain>:
    a1ba:	a0 e0       	ldi	r26, 0x00	; 0
    a1bc:	b0 e0       	ldi	r27, 0x00	; 0
    a1be:	e3 ee       	ldi	r30, 0xE3	; 227
    a1c0:	f0 e5       	ldi	r31, 0x50	; 80
    a1c2:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__prologue_saves__+0x4>
    a1c6:	8c 01       	movw	r16, r24
    a1c8:	2a 01       	movw	r4, r20
    a1ca:	3b 01       	movw	r6, r22
    a1cc:	fc 01       	movw	r30, r24
    a1ce:	c0 81       	ld	r28, Z
    a1d0:	d1 81       	ldd	r29, Z+1	; 0x01
    a1d2:	41 15       	cp	r20, r1
    a1d4:	51 05       	cpc	r21, r1
    a1d6:	61 05       	cpc	r22, r1
    a1d8:	71 05       	cpc	r23, r1
    a1da:	99 f4       	brne	.+38     	; 0xa202 <create_chain+0x48>
    a1dc:	8d 84       	ldd	r8, Y+13	; 0x0d
    a1de:	9e 84       	ldd	r9, Y+14	; 0x0e
    a1e0:	af 84       	ldd	r10, Y+15	; 0x0f
    a1e2:	b8 88       	ldd	r11, Y+16	; 0x10
    a1e4:	81 14       	cp	r8, r1
    a1e6:	91 04       	cpc	r9, r1
    a1e8:	a1 04       	cpc	r10, r1
    a1ea:	b1 04       	cpc	r11, r1
    a1ec:	51 f1       	breq	.+84     	; 0xa242 <create_chain+0x88>
    a1ee:	89 8d       	ldd	r24, Y+25	; 0x19
    a1f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a1f2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a1f4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a1f6:	88 16       	cp	r8, r24
    a1f8:	99 06       	cpc	r9, r25
    a1fa:	aa 06       	cpc	r10, r26
    a1fc:	bb 06       	cpc	r11, r27
    a1fe:	28 f1       	brcs	.+74     	; 0xa24a <create_chain+0x90>
    a200:	20 c0       	rjmp	.+64     	; 0xa242 <create_chain+0x88>
    a202:	ce 01       	movw	r24, r28
    a204:	65 de       	rcall	.-822    	; 0x9ed0 <get_fat.isra.9>
    a206:	62 30       	cpi	r22, 0x02	; 2
    a208:	71 05       	cpc	r23, r1
    a20a:	81 05       	cpc	r24, r1
    a20c:	91 05       	cpc	r25, r1
    a20e:	08 f4       	brcc	.+2      	; 0xa212 <create_chain+0x58>
    a210:	ea c0       	rjmp	.+468    	; 0xa3e6 <create_chain+0x22c>
    a212:	6f 3f       	cpi	r22, 0xFF	; 255
    a214:	ff ef       	ldi	r31, 0xFF	; 255
    a216:	7f 07       	cpc	r23, r31
    a218:	8f 07       	cpc	r24, r31
    a21a:	9f 07       	cpc	r25, r31
    a21c:	29 f4       	brne	.+10     	; 0xa228 <create_chain+0x6e>
    a21e:	4f ef       	ldi	r20, 0xFF	; 255
    a220:	3f ef       	ldi	r19, 0xFF	; 255
    a222:	2f ef       	ldi	r18, 0xFF	; 255
    a224:	9f ef       	ldi	r25, 0xFF	; 255
    a226:	e7 c0       	rjmp	.+462    	; 0xa3f6 <create_chain+0x23c>
    a228:	c9 8c       	ldd	r12, Y+25	; 0x19
    a22a:	da 8c       	ldd	r13, Y+26	; 0x1a
    a22c:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a22e:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a230:	6c 15       	cp	r22, r12
    a232:	7d 05       	cpc	r23, r13
    a234:	8e 05       	cpc	r24, r14
    a236:	9f 05       	cpc	r25, r15
    a238:	08 f4       	brcc	.+2      	; 0xa23c <create_chain+0x82>
    a23a:	da c0       	rjmp	.+436    	; 0xa3f0 <create_chain+0x236>
    a23c:	53 01       	movw	r10, r6
    a23e:	42 01       	movw	r8, r4
    a240:	04 c0       	rjmp	.+8      	; 0xa24a <create_chain+0x90>
    a242:	81 2c       	mov	r8, r1
    a244:	91 2c       	mov	r9, r1
    a246:	54 01       	movw	r10, r8
    a248:	83 94       	inc	r8
    a24a:	89 89       	ldd	r24, Y+17	; 0x11
    a24c:	9a 89       	ldd	r25, Y+18	; 0x12
    a24e:	ab 89       	ldd	r26, Y+19	; 0x13
    a250:	bc 89       	ldd	r27, Y+20	; 0x14
    a252:	89 2b       	or	r24, r25
    a254:	8a 2b       	or	r24, r26
    a256:	8b 2b       	or	r24, r27
    a258:	11 f4       	brne	.+4      	; 0xa25e <create_chain+0xa4>
    a25a:	40 e0       	ldi	r20, 0x00	; 0
    a25c:	c5 c0       	rjmp	.+394    	; 0xa3e8 <create_chain+0x22e>
    a25e:	84 14       	cp	r8, r4
    a260:	95 04       	cpc	r9, r5
    a262:	a6 04       	cpc	r10, r6
    a264:	b7 04       	cpc	r11, r7
    a266:	09 f0       	breq	.+2      	; 0xa26a <create_chain+0xb0>
    a268:	46 c0       	rjmp	.+140    	; 0xa2f6 <create_chain+0x13c>
    a26a:	75 01       	movw	r14, r10
    a26c:	64 01       	movw	r12, r8
    a26e:	2f ef       	ldi	r18, 0xFF	; 255
    a270:	c2 1a       	sub	r12, r18
    a272:	d2 0a       	sbc	r13, r18
    a274:	e2 0a       	sbc	r14, r18
    a276:	f2 0a       	sbc	r15, r18
    a278:	89 8d       	ldd	r24, Y+25	; 0x19
    a27a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a27c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a27e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a280:	c8 16       	cp	r12, r24
    a282:	d9 06       	cpc	r13, r25
    a284:	ea 06       	cpc	r14, r26
    a286:	fb 06       	cpc	r15, r27
    a288:	28 f0       	brcs	.+10     	; 0xa294 <create_chain+0xda>
    a28a:	92 e0       	ldi	r25, 0x02	; 2
    a28c:	c9 2e       	mov	r12, r25
    a28e:	d1 2c       	mov	r13, r1
    a290:	e1 2c       	mov	r14, r1
    a292:	f1 2c       	mov	r15, r1
    a294:	b7 01       	movw	r22, r14
    a296:	a6 01       	movw	r20, r12
    a298:	f8 01       	movw	r30, r16
    a29a:	80 81       	ld	r24, Z
    a29c:	91 81       	ldd	r25, Z+1	; 0x01
    a29e:	18 de       	rcall	.-976    	; 0x9ed0 <get_fat.isra.9>
    a2a0:	61 30       	cpi	r22, 0x01	; 1
    a2a2:	71 05       	cpc	r23, r1
    a2a4:	81 05       	cpc	r24, r1
    a2a6:	91 05       	cpc	r25, r1
    a2a8:	09 f4       	brne	.+2      	; 0xa2ac <create_chain+0xf2>
    a2aa:	9d c0       	rjmp	.+314    	; 0xa3e6 <create_chain+0x22c>
    a2ac:	6f 3f       	cpi	r22, 0xFF	; 255
    a2ae:	ff ef       	ldi	r31, 0xFF	; 255
    a2b0:	7f 07       	cpc	r23, r31
    a2b2:	8f 07       	cpc	r24, r31
    a2b4:	9f 07       	cpc	r25, r31
    a2b6:	09 f4       	brne	.+2      	; 0xa2ba <create_chain+0x100>
    a2b8:	b2 cf       	rjmp	.-156    	; 0xa21e <create_chain+0x64>
    a2ba:	67 2b       	or	r22, r23
    a2bc:	68 2b       	or	r22, r24
    a2be:	69 2b       	or	r22, r25
    a2c0:	a9 f0       	breq	.+42     	; 0xa2ec <create_chain+0x132>
    a2c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    a2c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    a2c6:	af 85       	ldd	r26, Y+15	; 0x0f
    a2c8:	b8 89       	ldd	r27, Y+16	; 0x10
    a2ca:	82 30       	cpi	r24, 0x02	; 2
    a2cc:	91 05       	cpc	r25, r1
    a2ce:	a1 05       	cpc	r26, r1
    a2d0:	b1 05       	cpc	r27, r1
    a2d2:	88 f0       	brcs	.+34     	; 0xa2f6 <create_chain+0x13c>
    a2d4:	49 8d       	ldd	r20, Y+25	; 0x19
    a2d6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a2d8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a2da:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a2dc:	84 17       	cp	r24, r20
    a2de:	95 07       	cpc	r25, r21
    a2e0:	a6 07       	cpc	r26, r22
    a2e2:	b7 07       	cpc	r27, r23
    a2e4:	40 f4       	brcc	.+16     	; 0xa2f6 <create_chain+0x13c>
    a2e6:	4c 01       	movw	r8, r24
    a2e8:	5d 01       	movw	r10, r26
    a2ea:	05 c0       	rjmp	.+10     	; 0xa2f6 <create_chain+0x13c>
    a2ec:	c1 14       	cp	r12, r1
    a2ee:	d1 04       	cpc	r13, r1
    a2f0:	e1 04       	cpc	r14, r1
    a2f2:	f1 04       	cpc	r15, r1
    a2f4:	c9 f5       	brne	.+114    	; 0xa368 <create_chain+0x1ae>
    a2f6:	75 01       	movw	r14, r10
    a2f8:	64 01       	movw	r12, r8
    a2fa:	2f ef       	ldi	r18, 0xFF	; 255
    a2fc:	c2 1a       	sub	r12, r18
    a2fe:	d2 0a       	sbc	r13, r18
    a300:	e2 0a       	sbc	r14, r18
    a302:	f2 0a       	sbc	r15, r18
    a304:	89 8d       	ldd	r24, Y+25	; 0x19
    a306:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a308:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a30a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a30c:	c8 16       	cp	r12, r24
    a30e:	d9 06       	cpc	r13, r25
    a310:	ea 06       	cpc	r14, r26
    a312:	fb 06       	cpc	r15, r27
    a314:	60 f0       	brcs	.+24     	; 0xa32e <create_chain+0x174>
    a316:	82 e0       	ldi	r24, 0x02	; 2
    a318:	88 16       	cp	r8, r24
    a31a:	91 04       	cpc	r9, r1
    a31c:	a1 04       	cpc	r10, r1
    a31e:	b1 04       	cpc	r11, r1
    a320:	08 f4       	brcc	.+2      	; 0xa324 <create_chain+0x16a>
    a322:	9b cf       	rjmp	.-202    	; 0xa25a <create_chain+0xa0>
    a324:	82 e0       	ldi	r24, 0x02	; 2
    a326:	c8 2e       	mov	r12, r24
    a328:	d1 2c       	mov	r13, r1
    a32a:	e1 2c       	mov	r14, r1
    a32c:	f1 2c       	mov	r15, r1
    a32e:	b7 01       	movw	r22, r14
    a330:	a6 01       	movw	r20, r12
    a332:	f8 01       	movw	r30, r16
    a334:	80 81       	ld	r24, Z
    a336:	91 81       	ldd	r25, Z+1	; 0x01
    a338:	cb dd       	rcall	.-1130   	; 0x9ed0 <get_fat.isra.9>
    a33a:	61 15       	cp	r22, r1
    a33c:	71 05       	cpc	r23, r1
    a33e:	81 05       	cpc	r24, r1
    a340:	91 05       	cpc	r25, r1
    a342:	91 f0       	breq	.+36     	; 0xa368 <create_chain+0x1ae>
    a344:	61 30       	cpi	r22, 0x01	; 1
    a346:	71 05       	cpc	r23, r1
    a348:	81 05       	cpc	r24, r1
    a34a:	91 05       	cpc	r25, r1
    a34c:	09 f4       	brne	.+2      	; 0xa350 <create_chain+0x196>
    a34e:	4b c0       	rjmp	.+150    	; 0xa3e6 <create_chain+0x22c>
    a350:	6f 3f       	cpi	r22, 0xFF	; 255
    a352:	7f 4f       	sbci	r23, 0xFF	; 255
    a354:	8f 4f       	sbci	r24, 0xFF	; 255
    a356:	9f 4f       	sbci	r25, 0xFF	; 255
    a358:	09 f4       	brne	.+2      	; 0xa35c <create_chain+0x1a2>
    a35a:	61 cf       	rjmp	.-318    	; 0xa21e <create_chain+0x64>
    a35c:	c8 14       	cp	r12, r8
    a35e:	d9 04       	cpc	r13, r9
    a360:	ea 04       	cpc	r14, r10
    a362:	fb 04       	cpc	r15, r11
    a364:	51 f6       	brne	.-108    	; 0xa2fa <create_chain+0x140>
    a366:	79 cf       	rjmp	.-270    	; 0xa25a <create_chain+0xa0>
    a368:	0f ef       	ldi	r16, 0xFF	; 255
    a36a:	1f ef       	ldi	r17, 0xFF	; 255
    a36c:	98 01       	movw	r18, r16
    a36e:	b7 01       	movw	r22, r14
    a370:	a6 01       	movw	r20, r12
    a372:	ce 01       	movw	r24, r28
    a374:	b4 dc       	rcall	.-1688   	; 0x9cde <put_fat>
    a376:	00 97       	sbiw	r24, 0x00	; 0
    a378:	99 f5       	brne	.+102    	; 0xa3e0 <create_chain+0x226>
    a37a:	41 14       	cp	r4, r1
    a37c:	51 04       	cpc	r5, r1
    a37e:	61 04       	cpc	r6, r1
    a380:	71 04       	cpc	r7, r1
    a382:	e9 f4       	brne	.+58     	; 0xa3be <create_chain+0x204>
    a384:	cd 86       	std	Y+13, r12	; 0x0d
    a386:	de 86       	std	Y+14, r13	; 0x0e
    a388:	ef 86       	std	Y+15, r14	; 0x0f
    a38a:	f8 8a       	std	Y+16, r15	; 0x10
    a38c:	89 89       	ldd	r24, Y+17	; 0x11
    a38e:	9a 89       	ldd	r25, Y+18	; 0x12
    a390:	ab 89       	ldd	r26, Y+19	; 0x13
    a392:	bc 89       	ldd	r27, Y+20	; 0x14
    a394:	49 8d       	ldd	r20, Y+25	; 0x19
    a396:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a398:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a39a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a39c:	42 50       	subi	r20, 0x02	; 2
    a39e:	51 09       	sbc	r21, r1
    a3a0:	61 09       	sbc	r22, r1
    a3a2:	71 09       	sbc	r23, r1
    a3a4:	48 17       	cp	r20, r24
    a3a6:	59 07       	cpc	r21, r25
    a3a8:	6a 07       	cpc	r22, r26
    a3aa:	7b 07       	cpc	r23, r27
    a3ac:	88 f0       	brcs	.+34     	; 0xa3d0 <create_chain+0x216>
    a3ae:	01 97       	sbiw	r24, 0x01	; 1
    a3b0:	a1 09       	sbc	r26, r1
    a3b2:	b1 09       	sbc	r27, r1
    a3b4:	89 8b       	std	Y+17, r24	; 0x11
    a3b6:	9a 8b       	std	Y+18, r25	; 0x12
    a3b8:	ab 8b       	std	Y+19, r26	; 0x13
    a3ba:	bc 8b       	std	Y+20, r27	; 0x14
    a3bc:	09 c0       	rjmp	.+18     	; 0xa3d0 <create_chain+0x216>
    a3be:	97 01       	movw	r18, r14
    a3c0:	86 01       	movw	r16, r12
    a3c2:	b3 01       	movw	r22, r6
    a3c4:	a2 01       	movw	r20, r4
    a3c6:	ce 01       	movw	r24, r28
    a3c8:	8a dc       	rcall	.-1772   	; 0x9cde <put_fat>
    a3ca:	00 97       	sbiw	r24, 0x00	; 0
    a3cc:	d9 f2       	breq	.-74     	; 0xa384 <create_chain+0x1ca>
    a3ce:	08 c0       	rjmp	.+16     	; 0xa3e0 <create_chain+0x226>
    a3d0:	8c 81       	ldd	r24, Y+4	; 0x04
    a3d2:	81 60       	ori	r24, 0x01	; 1
    a3d4:	8c 83       	std	Y+4, r24	; 0x04
    a3d6:	4c 2d       	mov	r20, r12
    a3d8:	3d 2d       	mov	r19, r13
    a3da:	2e 2d       	mov	r18, r14
    a3dc:	9f 2d       	mov	r25, r15
    a3de:	0b c0       	rjmp	.+22     	; 0xa3f6 <create_chain+0x23c>
    a3e0:	01 97       	sbiw	r24, 0x01	; 1
    a3e2:	09 f4       	brne	.+2      	; 0xa3e6 <create_chain+0x22c>
    a3e4:	1c cf       	rjmp	.-456    	; 0xa21e <create_chain+0x64>
    a3e6:	41 e0       	ldi	r20, 0x01	; 1
    a3e8:	30 e0       	ldi	r19, 0x00	; 0
    a3ea:	20 e0       	ldi	r18, 0x00	; 0
    a3ec:	90 e0       	ldi	r25, 0x00	; 0
    a3ee:	03 c0       	rjmp	.+6      	; 0xa3f6 <create_chain+0x23c>
    a3f0:	46 2f       	mov	r20, r22
    a3f2:	37 2f       	mov	r19, r23
    a3f4:	28 2f       	mov	r18, r24
    a3f6:	64 2f       	mov	r22, r20
    a3f8:	73 2f       	mov	r23, r19
    a3fa:	82 2f       	mov	r24, r18
    a3fc:	cd b7       	in	r28, 0x3d	; 61
    a3fe:	de b7       	in	r29, 0x3e	; 62
    a400:	e0 e1       	ldi	r30, 0x10	; 16
    a402:	0c 94 34 e7 	jmp	0x1ce68	; 0x1ce68 <__epilogue_restores__+0x4>

0000a406 <remove_chain>:
    a406:	4f 92       	push	r4
    a408:	5f 92       	push	r5
    a40a:	6f 92       	push	r6
    a40c:	7f 92       	push	r7
    a40e:	af 92       	push	r10
    a410:	bf 92       	push	r11
    a412:	cf 92       	push	r12
    a414:	df 92       	push	r13
    a416:	ef 92       	push	r14
    a418:	ff 92       	push	r15
    a41a:	0f 93       	push	r16
    a41c:	1f 93       	push	r17
    a41e:	cf 93       	push	r28
    a420:	df 93       	push	r29
    a422:	5c 01       	movw	r10, r24
    a424:	6a 01       	movw	r12, r20
    a426:	7b 01       	movw	r14, r22
    a428:	b9 01       	movw	r22, r18
    a42a:	a8 01       	movw	r20, r16
    a42c:	22 e0       	ldi	r18, 0x02	; 2
    a42e:	c2 16       	cp	r12, r18
    a430:	d1 04       	cpc	r13, r1
    a432:	e1 04       	cpc	r14, r1
    a434:	f1 04       	cpc	r15, r1
    a436:	10 f4       	brcc	.+4      	; 0xa43c <remove_chain+0x36>
    a438:	22 e0       	ldi	r18, 0x02	; 2
    a43a:	27 c0       	rjmp	.+78     	; 0xa48a <remove_chain+0x84>
    a43c:	fc 01       	movw	r30, r24
    a43e:	c0 81       	ld	r28, Z
    a440:	d1 81       	ldd	r29, Z+1	; 0x01
    a442:	89 8d       	ldd	r24, Y+25	; 0x19
    a444:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a446:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a448:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a44a:	c8 16       	cp	r12, r24
    a44c:	d9 06       	cpc	r13, r25
    a44e:	ea 06       	cpc	r14, r26
    a450:	fb 06       	cpc	r15, r27
    a452:	90 f7       	brcc	.-28     	; 0xa438 <remove_chain+0x32>
    a454:	41 15       	cp	r20, r1
    a456:	51 05       	cpc	r21, r1
    a458:	61 05       	cpc	r22, r1
    a45a:	71 05       	cpc	r23, r1
    a45c:	41 f0       	breq	.+16     	; 0xa46e <remove_chain+0x68>
    a45e:	0f ef       	ldi	r16, 0xFF	; 255
    a460:	1f ef       	ldi	r17, 0xFF	; 255
    a462:	98 01       	movw	r18, r16
    a464:	ce 01       	movw	r24, r28
    a466:	3b dc       	rcall	.-1930   	; 0x9cde <put_fat>
    a468:	00 97       	sbiw	r24, 0x00	; 0
    a46a:	09 f0       	breq	.+2      	; 0xa46e <remove_chain+0x68>
    a46c:	4c c0       	rjmp	.+152    	; 0xa506 <remove_chain+0x100>
    a46e:	b7 01       	movw	r22, r14
    a470:	a6 01       	movw	r20, r12
    a472:	f5 01       	movw	r30, r10
    a474:	80 81       	ld	r24, Z
    a476:	91 81       	ldd	r25, Z+1	; 0x01
    a478:	2b dd       	rcall	.-1450   	; 0x9ed0 <get_fat.isra.9>
    a47a:	2b 01       	movw	r4, r22
    a47c:	3c 01       	movw	r6, r24
    a47e:	61 15       	cp	r22, r1
    a480:	71 05       	cpc	r23, r1
    a482:	81 05       	cpc	r24, r1
    a484:	91 05       	cpc	r25, r1
    a486:	19 f4       	brne	.+6      	; 0xa48e <remove_chain+0x88>
    a488:	20 e0       	ldi	r18, 0x00	; 0
    a48a:	90 e0       	ldi	r25, 0x00	; 0
    a48c:	3d c0       	rjmp	.+122    	; 0xa508 <remove_chain+0x102>
    a48e:	61 30       	cpi	r22, 0x01	; 1
    a490:	71 05       	cpc	r23, r1
    a492:	81 05       	cpc	r24, r1
    a494:	91 05       	cpc	r25, r1
    a496:	81 f2       	breq	.-96     	; 0xa438 <remove_chain+0x32>
    a498:	6f 3f       	cpi	r22, 0xFF	; 255
    a49a:	7f 4f       	sbci	r23, 0xFF	; 255
    a49c:	8f 4f       	sbci	r24, 0xFF	; 255
    a49e:	9f 4f       	sbci	r25, 0xFF	; 255
    a4a0:	81 f1       	breq	.+96     	; 0xa502 <remove_chain+0xfc>
    a4a2:	00 e0       	ldi	r16, 0x00	; 0
    a4a4:	10 e0       	ldi	r17, 0x00	; 0
    a4a6:	98 01       	movw	r18, r16
    a4a8:	b7 01       	movw	r22, r14
    a4aa:	a6 01       	movw	r20, r12
    a4ac:	ce 01       	movw	r24, r28
    a4ae:	17 dc       	rcall	.-2002   	; 0x9cde <put_fat>
    a4b0:	00 97       	sbiw	r24, 0x00	; 0
    a4b2:	49 f5       	brne	.+82     	; 0xa506 <remove_chain+0x100>
    a4b4:	89 89       	ldd	r24, Y+17	; 0x11
    a4b6:	9a 89       	ldd	r25, Y+18	; 0x12
    a4b8:	ab 89       	ldd	r26, Y+19	; 0x13
    a4ba:	bc 89       	ldd	r27, Y+20	; 0x14
    a4bc:	49 8d       	ldd	r20, Y+25	; 0x19
    a4be:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a4c0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a4c2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a4c4:	6a 01       	movw	r12, r20
    a4c6:	7b 01       	movw	r14, r22
    a4c8:	e2 e0       	ldi	r30, 0x02	; 2
    a4ca:	ce 1a       	sub	r12, r30
    a4cc:	d1 08       	sbc	r13, r1
    a4ce:	e1 08       	sbc	r14, r1
    a4d0:	f1 08       	sbc	r15, r1
    a4d2:	8c 15       	cp	r24, r12
    a4d4:	9d 05       	cpc	r25, r13
    a4d6:	ae 05       	cpc	r26, r14
    a4d8:	bf 05       	cpc	r27, r15
    a4da:	50 f4       	brcc	.+20     	; 0xa4f0 <remove_chain+0xea>
    a4dc:	01 96       	adiw	r24, 0x01	; 1
    a4de:	a1 1d       	adc	r26, r1
    a4e0:	b1 1d       	adc	r27, r1
    a4e2:	89 8b       	std	Y+17, r24	; 0x11
    a4e4:	9a 8b       	std	Y+18, r25	; 0x12
    a4e6:	ab 8b       	std	Y+19, r26	; 0x13
    a4e8:	bc 8b       	std	Y+20, r27	; 0x14
    a4ea:	8c 81       	ldd	r24, Y+4	; 0x04
    a4ec:	81 60       	ori	r24, 0x01	; 1
    a4ee:	8c 83       	std	Y+4, r24	; 0x04
    a4f0:	73 01       	movw	r14, r6
    a4f2:	62 01       	movw	r12, r4
    a4f4:	44 16       	cp	r4, r20
    a4f6:	55 06       	cpc	r5, r21
    a4f8:	66 06       	cpc	r6, r22
    a4fa:	77 06       	cpc	r7, r23
    a4fc:	08 f4       	brcc	.+2      	; 0xa500 <remove_chain+0xfa>
    a4fe:	b7 cf       	rjmp	.-146    	; 0xa46e <remove_chain+0x68>
    a500:	c3 cf       	rjmp	.-122    	; 0xa488 <remove_chain+0x82>
    a502:	21 e0       	ldi	r18, 0x01	; 1
    a504:	c2 cf       	rjmp	.-124    	; 0xa48a <remove_chain+0x84>
    a506:	28 2f       	mov	r18, r24
    a508:	82 2f       	mov	r24, r18
    a50a:	df 91       	pop	r29
    a50c:	cf 91       	pop	r28
    a50e:	1f 91       	pop	r17
    a510:	0f 91       	pop	r16
    a512:	ff 90       	pop	r15
    a514:	ef 90       	pop	r14
    a516:	df 90       	pop	r13
    a518:	cf 90       	pop	r12
    a51a:	bf 90       	pop	r11
    a51c:	af 90       	pop	r10
    a51e:	7f 90       	pop	r7
    a520:	6f 90       	pop	r6
    a522:	5f 90       	pop	r5
    a524:	4f 90       	pop	r4
    a526:	08 95       	ret

0000a528 <dir_next>:
    a528:	4f 92       	push	r4
    a52a:	5f 92       	push	r5
    a52c:	6f 92       	push	r6
    a52e:	7f 92       	push	r7
    a530:	af 92       	push	r10
    a532:	bf 92       	push	r11
    a534:	cf 92       	push	r12
    a536:	df 92       	push	r13
    a538:	ef 92       	push	r14
    a53a:	ff 92       	push	r15
    a53c:	0f 93       	push	r16
    a53e:	1f 93       	push	r17
    a540:	cf 93       	push	r28
    a542:	df 93       	push	r29
    a544:	ec 01       	movw	r28, r24
    a546:	08 81       	ld	r16, Y
    a548:	19 81       	ldd	r17, Y+1	; 0x01
    a54a:	ce 84       	ldd	r12, Y+14	; 0x0e
    a54c:	df 84       	ldd	r13, Y+15	; 0x0f
    a54e:	e8 88       	ldd	r14, Y+16	; 0x10
    a550:	f9 88       	ldd	r15, Y+17	; 0x11
    a552:	80 e2       	ldi	r24, 0x20	; 32
    a554:	c8 0e       	add	r12, r24
    a556:	d1 1c       	adc	r13, r1
    a558:	e1 1c       	adc	r14, r1
    a55a:	f1 1c       	adc	r15, r1
    a55c:	c1 14       	cp	r12, r1
    a55e:	d1 04       	cpc	r13, r1
    a560:	e0 e2       	ldi	r30, 0x20	; 32
    a562:	ee 06       	cpc	r14, r30
    a564:	f1 04       	cpc	r15, r1
    a566:	20 f0       	brcs	.+8      	; 0xa570 <dir_next+0x48>
    a568:	1e 8a       	std	Y+22, r1	; 0x16
    a56a:	1f 8a       	std	Y+23, r1	; 0x17
    a56c:	18 8e       	std	Y+24, r1	; 0x18
    a56e:	19 8e       	std	Y+25, r1	; 0x19
    a570:	8e 89       	ldd	r24, Y+22	; 0x16
    a572:	9f 89       	ldd	r25, Y+23	; 0x17
    a574:	a8 8d       	ldd	r26, Y+24	; 0x18
    a576:	b9 8d       	ldd	r27, Y+25	; 0x19
    a578:	00 97       	sbiw	r24, 0x00	; 0
    a57a:	a1 05       	cpc	r26, r1
    a57c:	b1 05       	cpc	r27, r1
    a57e:	09 f4       	brne	.+2      	; 0xa582 <dir_next+0x5a>
    a580:	a7 c0       	rjmp	.+334    	; 0xa6d0 <dir_next+0x1a8>
    a582:	5b 01       	movw	r10, r22
    a584:	b7 01       	movw	r22, r14
    a586:	a6 01       	movw	r20, r12
    a588:	51 70       	andi	r21, 0x01	; 1
    a58a:	66 27       	eor	r22, r22
    a58c:	77 27       	eor	r23, r23
    a58e:	45 2b       	or	r20, r21
    a590:	46 2b       	or	r20, r22
    a592:	47 2b       	or	r20, r23
    a594:	09 f0       	breq	.+2      	; 0xa598 <dir_next+0x70>
    a596:	8d c0       	rjmp	.+282    	; 0xa6b2 <dir_next+0x18a>
    a598:	01 96       	adiw	r24, 0x01	; 1
    a59a:	a1 1d       	adc	r26, r1
    a59c:	b1 1d       	adc	r27, r1
    a59e:	8e 8b       	std	Y+22, r24	; 0x16
    a5a0:	9f 8b       	std	Y+23, r25	; 0x17
    a5a2:	a8 8f       	std	Y+24, r26	; 0x18
    a5a4:	b9 8f       	std	Y+25, r27	; 0x19
    a5a6:	4a 89       	ldd	r20, Y+18	; 0x12
    a5a8:	5b 89       	ldd	r21, Y+19	; 0x13
    a5aa:	6c 89       	ldd	r22, Y+20	; 0x14
    a5ac:	7d 89       	ldd	r23, Y+21	; 0x15
    a5ae:	f8 01       	movw	r30, r16
    a5b0:	41 15       	cp	r20, r1
    a5b2:	51 05       	cpc	r21, r1
    a5b4:	61 05       	cpc	r22, r1
    a5b6:	71 05       	cpc	r23, r1
    a5b8:	c1 f4       	brne	.+48     	; 0xa5ea <dir_next+0xc2>
    a5ba:	87 81       	ldd	r24, Z+7	; 0x07
    a5bc:	90 85       	ldd	r25, Z+8	; 0x08
    a5be:	a0 e0       	ldi	r26, 0x00	; 0
    a5c0:	b0 e0       	ldi	r27, 0x00	; 0
    a5c2:	b7 01       	movw	r22, r14
    a5c4:	a6 01       	movw	r20, r12
    a5c6:	35 e0       	ldi	r19, 0x05	; 5
    a5c8:	76 95       	lsr	r23
    a5ca:	67 95       	ror	r22
    a5cc:	57 95       	ror	r21
    a5ce:	47 95       	ror	r20
    a5d0:	3a 95       	dec	r19
    a5d2:	d1 f7       	brne	.-12     	; 0xa5c8 <dir_next+0xa0>
    a5d4:	48 17       	cp	r20, r24
    a5d6:	59 07       	cpc	r21, r25
    a5d8:	6a 07       	cpc	r22, r26
    a5da:	7b 07       	cpc	r23, r27
    a5dc:	08 f4       	brcc	.+2      	; 0xa5e0 <dir_next+0xb8>
    a5de:	69 c0       	rjmp	.+210    	; 0xa6b2 <dir_next+0x18a>
    a5e0:	1e 8a       	std	Y+22, r1	; 0x16
    a5e2:	1f 8a       	std	Y+23, r1	; 0x17
    a5e4:	18 8e       	std	Y+24, r1	; 0x18
    a5e6:	19 8e       	std	Y+25, r1	; 0x19
    a5e8:	73 c0       	rjmp	.+230    	; 0xa6d0 <dir_next+0x1a8>
    a5ea:	81 85       	ldd	r24, Z+9	; 0x09
    a5ec:	92 85       	ldd	r25, Z+10	; 0x0a
    a5ee:	01 97       	sbiw	r24, 0x01	; 1
    a5f0:	a0 e0       	ldi	r26, 0x00	; 0
    a5f2:	b0 e0       	ldi	r27, 0x00	; 0
    a5f4:	26 01       	movw	r4, r12
    a5f6:	37 01       	movw	r6, r14
    a5f8:	29 e0       	ldi	r18, 0x09	; 9
    a5fa:	76 94       	lsr	r7
    a5fc:	67 94       	ror	r6
    a5fe:	57 94       	ror	r5
    a600:	47 94       	ror	r4
    a602:	2a 95       	dec	r18
    a604:	d1 f7       	brne	.-12     	; 0xa5fa <dir_next+0xd2>
    a606:	84 21       	and	r24, r4
    a608:	95 21       	and	r25, r5
    a60a:	a6 21       	and	r26, r6
    a60c:	b7 21       	and	r27, r7
    a60e:	89 2b       	or	r24, r25
    a610:	8a 2b       	or	r24, r26
    a612:	8b 2b       	or	r24, r27
    a614:	09 f0       	breq	.+2      	; 0xa618 <dir_next+0xf0>
    a616:	4d c0       	rjmp	.+154    	; 0xa6b2 <dir_next+0x18a>
    a618:	c8 01       	movw	r24, r16
    a61a:	5a dc       	rcall	.-1868   	; 0x9ed0 <get_fat.isra.9>
    a61c:	2b 01       	movw	r4, r22
    a61e:	3c 01       	movw	r6, r24
    a620:	62 30       	cpi	r22, 0x02	; 2
    a622:	71 05       	cpc	r23, r1
    a624:	81 05       	cpc	r24, r1
    a626:	91 05       	cpc	r25, r1
    a628:	18 f4       	brcc	.+6      	; 0xa630 <dir_next+0x108>
    a62a:	82 e0       	ldi	r24, 0x02	; 2
    a62c:	90 e0       	ldi	r25, 0x00	; 0
    a62e:	55 c0       	rjmp	.+170    	; 0xa6da <dir_next+0x1b2>
    a630:	8f ef       	ldi	r24, 0xFF	; 255
    a632:	48 16       	cp	r4, r24
    a634:	58 06       	cpc	r5, r24
    a636:	68 06       	cpc	r6, r24
    a638:	78 06       	cpc	r7, r24
    a63a:	19 f4       	brne	.+6      	; 0xa642 <dir_next+0x11a>
    a63c:	81 e0       	ldi	r24, 0x01	; 1
    a63e:	90 e0       	ldi	r25, 0x00	; 0
    a640:	4c c0       	rjmp	.+152    	; 0xa6da <dir_next+0x1b2>
    a642:	f8 01       	movw	r30, r16
    a644:	81 8d       	ldd	r24, Z+25	; 0x19
    a646:	92 8d       	ldd	r25, Z+26	; 0x1a
    a648:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a64a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a64c:	48 16       	cp	r4, r24
    a64e:	59 06       	cpc	r5, r25
    a650:	6a 06       	cpc	r6, r26
    a652:	7b 06       	cpc	r7, r27
    a654:	08 f1       	brcs	.+66     	; 0xa698 <dir_next+0x170>
    a656:	ab 28       	or	r10, r11
    a658:	19 f2       	breq	.-122    	; 0xa5e0 <dir_next+0xb8>
    a65a:	4a 89       	ldd	r20, Y+18	; 0x12
    a65c:	5b 89       	ldd	r21, Y+19	; 0x13
    a65e:	6c 89       	ldd	r22, Y+20	; 0x14
    a660:	7d 89       	ldd	r23, Y+21	; 0x15
    a662:	ce 01       	movw	r24, r28
    a664:	aa dd       	rcall	.-1196   	; 0xa1ba <create_chain>
    a666:	2b 01       	movw	r4, r22
    a668:	3c 01       	movw	r6, r24
    a66a:	61 15       	cp	r22, r1
    a66c:	71 05       	cpc	r23, r1
    a66e:	81 05       	cpc	r24, r1
    a670:	91 05       	cpc	r25, r1
    a672:	89 f1       	breq	.+98     	; 0xa6d6 <dir_next+0x1ae>
    a674:	61 30       	cpi	r22, 0x01	; 1
    a676:	71 05       	cpc	r23, r1
    a678:	81 05       	cpc	r24, r1
    a67a:	91 05       	cpc	r25, r1
    a67c:	b1 f2       	breq	.-84     	; 0xa62a <dir_next+0x102>
    a67e:	8f ef       	ldi	r24, 0xFF	; 255
    a680:	48 16       	cp	r4, r24
    a682:	58 06       	cpc	r5, r24
    a684:	68 06       	cpc	r6, r24
    a686:	78 06       	cpc	r7, r24
    a688:	c9 f2       	breq	.-78     	; 0xa63c <dir_next+0x114>
    a68a:	b3 01       	movw	r22, r6
    a68c:	a2 01       	movw	r20, r4
    a68e:	c8 01       	movw	r24, r16
    a690:	0e 94 f2 4a 	call	0x95e4	; 0x95e4 <dir_clear>
    a694:	89 2b       	or	r24, r25
    a696:	91 f6       	brne	.-92     	; 0xa63c <dir_next+0x114>
    a698:	4a 8a       	std	Y+18, r4	; 0x12
    a69a:	5b 8a       	std	Y+19, r5	; 0x13
    a69c:	6c 8a       	std	Y+20, r6	; 0x14
    a69e:	7d 8a       	std	Y+21, r7	; 0x15
    a6a0:	b3 01       	movw	r22, r6
    a6a2:	a2 01       	movw	r20, r4
    a6a4:	c8 01       	movw	r24, r16
    a6a6:	0e 94 0b 48 	call	0x9016	; 0x9016 <clst2sect>
    a6aa:	6e 8b       	std	Y+22, r22	; 0x16
    a6ac:	7f 8b       	std	Y+23, r23	; 0x17
    a6ae:	88 8f       	std	Y+24, r24	; 0x18
    a6b0:	99 8f       	std	Y+25, r25	; 0x19
    a6b2:	ce 86       	std	Y+14, r12	; 0x0e
    a6b4:	df 86       	std	Y+15, r13	; 0x0f
    a6b6:	e8 8a       	std	Y+16, r14	; 0x10
    a6b8:	f9 8a       	std	Y+17, r15	; 0x11
    a6ba:	0b 5c       	subi	r16, 0xCB	; 203
    a6bc:	1f 4f       	sbci	r17, 0xFF	; 255
    a6be:	e1 e0       	ldi	r30, 0x01	; 1
    a6c0:	de 22       	and	r13, r30
    a6c2:	c0 0e       	add	r12, r16
    a6c4:	d1 1e       	adc	r13, r17
    a6c6:	db 8e       	std	Y+27, r13	; 0x1b
    a6c8:	ca 8e       	std	Y+26, r12	; 0x1a
    a6ca:	80 e0       	ldi	r24, 0x00	; 0
    a6cc:	90 e0       	ldi	r25, 0x00	; 0
    a6ce:	05 c0       	rjmp	.+10     	; 0xa6da <dir_next+0x1b2>
    a6d0:	84 e0       	ldi	r24, 0x04	; 4
    a6d2:	90 e0       	ldi	r25, 0x00	; 0
    a6d4:	02 c0       	rjmp	.+4      	; 0xa6da <dir_next+0x1b2>
    a6d6:	87 e0       	ldi	r24, 0x07	; 7
    a6d8:	90 e0       	ldi	r25, 0x00	; 0
    a6da:	df 91       	pop	r29
    a6dc:	cf 91       	pop	r28
    a6de:	1f 91       	pop	r17
    a6e0:	0f 91       	pop	r16
    a6e2:	ff 90       	pop	r15
    a6e4:	ef 90       	pop	r14
    a6e6:	df 90       	pop	r13
    a6e8:	cf 90       	pop	r12
    a6ea:	bf 90       	pop	r11
    a6ec:	af 90       	pop	r10
    a6ee:	7f 90       	pop	r7
    a6f0:	6f 90       	pop	r6
    a6f2:	5f 90       	pop	r5
    a6f4:	4f 90       	pop	r4
    a6f6:	08 95       	ret

0000a6f8 <dir_alloc>:
    a6f8:	a0 e0       	ldi	r26, 0x00	; 0
    a6fa:	b0 e0       	ldi	r27, 0x00	; 0
    a6fc:	e2 e8       	ldi	r30, 0x82	; 130
    a6fe:	f3 e5       	ldi	r31, 0x53	; 83
    a700:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    a704:	ec 01       	movw	r28, r24
    a706:	6b 01       	movw	r12, r22
    a708:	e8 80       	ld	r14, Y
    a70a:	f9 80       	ldd	r15, Y+1	; 0x01
    a70c:	40 e0       	ldi	r20, 0x00	; 0
    a70e:	50 e0       	ldi	r21, 0x00	; 0
    a710:	ba 01       	movw	r22, r20
    a712:	92 dc       	rcall	.-1756   	; 0xa038 <dir_sdi>
    a714:	00 97       	sbiw	r24, 0x00	; 0
    a716:	f9 f4       	brne	.+62     	; 0xa756 <dir_alloc+0x5e>
    a718:	00 e0       	ldi	r16, 0x00	; 0
    a71a:	10 e0       	ldi	r17, 0x00	; 0
    a71c:	4e 89       	ldd	r20, Y+22	; 0x16
    a71e:	5f 89       	ldd	r21, Y+23	; 0x17
    a720:	68 8d       	ldd	r22, Y+24	; 0x18
    a722:	79 8d       	ldd	r23, Y+25	; 0x19
    a724:	c7 01       	movw	r24, r14
    a726:	06 d8       	rcall	.-4084   	; 0x9734 <move_window>
    a728:	00 97       	sbiw	r24, 0x00	; 0
    a72a:	a9 f4       	brne	.+42     	; 0xa756 <dir_alloc+0x5e>
    a72c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a72e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a730:	20 81       	ld	r18, Z
    a732:	25 3e       	cpi	r18, 0xE5	; 229
    a734:	11 f0       	breq	.+4      	; 0xa73a <dir_alloc+0x42>
    a736:	21 11       	cpse	r18, r1
    a738:	06 c0       	rjmp	.+12     	; 0xa746 <dir_alloc+0x4e>
    a73a:	0f 5f       	subi	r16, 0xFF	; 255
    a73c:	1f 4f       	sbci	r17, 0xFF	; 255
    a73e:	0c 15       	cp	r16, r12
    a740:	1d 05       	cpc	r17, r13
    a742:	19 f4       	brne	.+6      	; 0xa74a <dir_alloc+0x52>
    a744:	0d c0       	rjmp	.+26     	; 0xa760 <dir_alloc+0x68>
    a746:	00 e0       	ldi	r16, 0x00	; 0
    a748:	10 e0       	ldi	r17, 0x00	; 0
    a74a:	61 e0       	ldi	r22, 0x01	; 1
    a74c:	70 e0       	ldi	r23, 0x00	; 0
    a74e:	ce 01       	movw	r24, r28
    a750:	eb de       	rcall	.-554    	; 0xa528 <dir_next>
    a752:	00 97       	sbiw	r24, 0x00	; 0
    a754:	19 f3       	breq	.-58     	; 0xa71c <dir_alloc+0x24>
    a756:	84 30       	cpi	r24, 0x04	; 4
    a758:	91 05       	cpc	r25, r1
    a75a:	11 f4       	brne	.+4      	; 0xa760 <dir_alloc+0x68>
    a75c:	87 e0       	ldi	r24, 0x07	; 7
    a75e:	90 e0       	ldi	r25, 0x00	; 0
    a760:	cd b7       	in	r28, 0x3d	; 61
    a762:	de b7       	in	r29, 0x3e	; 62
    a764:	e8 e0       	ldi	r30, 0x08	; 8
    a766:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000a76a <dir_read>:
    a76a:	a0 e0       	ldi	r26, 0x00	; 0
    a76c:	b0 e0       	ldi	r27, 0x00	; 0
    a76e:	eb eb       	ldi	r30, 0xBB	; 187
    a770:	f3 e5       	ldi	r31, 0x53	; 83
    a772:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
    a776:	ec 01       	movw	r28, r24
    a778:	7b 01       	movw	r14, r22
    a77a:	a8 80       	ld	r10, Y
    a77c:	b9 80       	ldd	r11, Y+1	; 0x01
    a77e:	dd 24       	eor	r13, r13
    a780:	da 94       	dec	r13
    a782:	1f ef       	ldi	r17, 0xFF	; 255
    a784:	84 e0       	ldi	r24, 0x04	; 4
    a786:	90 e0       	ldi	r25, 0x00	; 0
    a788:	fd e0       	ldi	r31, 0x0D	; 13
    a78a:	cf 2e       	mov	r12, r31
    a78c:	4e 89       	ldd	r20, Y+22	; 0x16
    a78e:	5f 89       	ldd	r21, Y+23	; 0x17
    a790:	68 8d       	ldd	r22, Y+24	; 0x18
    a792:	79 8d       	ldd	r23, Y+25	; 0x19
    a794:	41 15       	cp	r20, r1
    a796:	51 05       	cpc	r21, r1
    a798:	61 05       	cpc	r22, r1
    a79a:	71 05       	cpc	r23, r1
    a79c:	09 f4       	brne	.+2      	; 0xa7a0 <dir_read+0x36>
    a79e:	9a c0       	rjmp	.+308    	; 0xa8d4 <dir_read+0x16a>
    a7a0:	c5 01       	movw	r24, r10
    a7a2:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    a7a6:	00 97       	sbiw	r24, 0x00	; 0
    a7a8:	09 f0       	breq	.+2      	; 0xa7ac <dir_read+0x42>
    a7aa:	96 c0       	rjmp	.+300    	; 0xa8d8 <dir_read+0x16e>
    a7ac:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a7ae:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a7b0:	f4 01       	movw	r30, r8
    a7b2:	00 81       	ld	r16, Z
    a7b4:	00 23       	and	r16, r16
    a7b6:	09 f4       	brne	.+2      	; 0xa7ba <dir_read+0x50>
    a7b8:	97 c0       	rjmp	.+302    	; 0xa8e8 <dir_read+0x17e>
    a7ba:	83 85       	ldd	r24, Z+11	; 0x0b
    a7bc:	8f 73       	andi	r24, 0x3F	; 63
    a7be:	8c 83       	std	Y+4, r24	; 0x04
    a7c0:	05 3e       	cpi	r16, 0xE5	; 229
    a7c2:	09 f4       	brne	.+2      	; 0xa7c6 <dir_read+0x5c>
    a7c4:	7e c0       	rjmp	.+252    	; 0xa8c2 <dir_read+0x158>
    a7c6:	0e 32       	cpi	r16, 0x2E	; 46
    a7c8:	09 f4       	brne	.+2      	; 0xa7cc <dir_read+0x62>
    a7ca:	7b c0       	rjmp	.+246    	; 0xa8c2 <dir_read+0x158>
    a7cc:	21 e0       	ldi	r18, 0x01	; 1
    a7ce:	30 e0       	ldi	r19, 0x00	; 0
    a7d0:	98 2f       	mov	r25, r24
    a7d2:	9f 71       	andi	r25, 0x1F	; 31
    a7d4:	98 30       	cpi	r25, 0x08	; 8
    a7d6:	11 f0       	breq	.+4      	; 0xa7dc <dir_read+0x72>
    a7d8:	20 e0       	ldi	r18, 0x00	; 0
    a7da:	30 e0       	ldi	r19, 0x00	; 0
    a7dc:	2e 15       	cp	r18, r14
    a7de:	3f 05       	cpc	r19, r15
    a7e0:	09 f0       	breq	.+2      	; 0xa7e4 <dir_read+0x7a>
    a7e2:	6f c0       	rjmp	.+222    	; 0xa8c2 <dir_read+0x158>
    a7e4:	8f 30       	cpi	r24, 0x0F	; 15
    a7e6:	09 f0       	breq	.+2      	; 0xa7ea <dir_read+0x80>
    a7e8:	5c c0       	rjmp	.+184    	; 0xa8a2 <dir_read+0x138>
    a7ea:	06 ff       	sbrs	r16, 6
    a7ec:	0c c0       	rjmp	.+24     	; 0xa806 <dir_read+0x9c>
    a7ee:	f4 01       	movw	r30, r8
    a7f0:	85 85       	ldd	r24, Z+13	; 0x0d
    a7f2:	0f 7b       	andi	r16, 0xBF	; 191
    a7f4:	4e 85       	ldd	r20, Y+14	; 0x0e
    a7f6:	5f 85       	ldd	r21, Y+15	; 0x0f
    a7f8:	68 89       	ldd	r22, Y+16	; 0x10
    a7fa:	79 89       	ldd	r23, Y+17	; 0x11
    a7fc:	48 a7       	std	Y+40, r20	; 0x28
    a7fe:	59 a7       	std	Y+41, r21	; 0x29
    a800:	6a a7       	std	Y+42, r22	; 0x2a
    a802:	7b a7       	std	Y+43, r23	; 0x2b
    a804:	03 c0       	rjmp	.+6      	; 0xa80c <dir_read+0xa2>
    a806:	10 13       	cpse	r17, r16
    a808:	5c c0       	rjmp	.+184    	; 0xa8c2 <dir_read+0x158>
    a80a:	8d 2d       	mov	r24, r13
    a80c:	f4 01       	movw	r30, r8
    a80e:	d5 84       	ldd	r13, Z+13	; 0x0d
    a810:	d8 12       	cpse	r13, r24
    a812:	56 c0       	rjmp	.+172    	; 0xa8c0 <dir_read+0x156>
    a814:	82 8d       	ldd	r24, Z+26	; 0x1a
    a816:	93 8d       	ldd	r25, Z+27	; 0x1b
    a818:	89 2b       	or	r24, r25
    a81a:	09 f0       	breq	.+2      	; 0xa81e <dir_read+0xb4>
    a81c:	52 c0       	rjmp	.+164    	; 0xa8c2 <dir_read+0x158>
    a81e:	f5 01       	movw	r30, r10
    a820:	63 85       	ldd	r22, Z+11	; 0x0b
    a822:	74 85       	ldd	r23, Z+12	; 0x0c
    a824:	f4 01       	movw	r30, r8
    a826:	80 81       	ld	r24, Z
    a828:	90 e0       	ldi	r25, 0x00	; 0
    a82a:	8f 7b       	andi	r24, 0xBF	; 191
    a82c:	01 97       	sbiw	r24, 0x01	; 1
    a82e:	c8 9e       	mul	r12, r24
    a830:	90 01       	movw	r18, r0
    a832:	c9 9e       	mul	r12, r25
    a834:	30 0d       	add	r19, r0
    a836:	11 24       	eor	r1, r1
    a838:	ab ee       	ldi	r26, 0xEB	; 235
    a83a:	b4 e0       	ldi	r27, 0x04	; 4
    a83c:	81 e0       	ldi	r24, 0x01	; 1
    a83e:	90 e0       	ldi	r25, 0x00	; 0
    a840:	4d 91       	ld	r20, X+
    a842:	f4 01       	movw	r30, r8
    a844:	e4 0f       	add	r30, r20
    a846:	f1 1d       	adc	r31, r1
    a848:	40 81       	ld	r20, Z
    a84a:	51 81       	ldd	r21, Z+1	; 0x01
    a84c:	00 97       	sbiw	r24, 0x00	; 0
    a84e:	81 f0       	breq	.+32     	; 0xa870 <dir_read+0x106>
    a850:	2f 3f       	cpi	r18, 0xFF	; 255
    a852:	31 05       	cpc	r19, r1
    a854:	09 f0       	breq	.+2      	; 0xa858 <dir_read+0xee>
    a856:	a8 f5       	brcc	.+106    	; 0xa8c2 <dir_read+0x158>
    a858:	c9 01       	movw	r24, r18
    a85a:	88 0f       	add	r24, r24
    a85c:	99 1f       	adc	r25, r25
    a85e:	86 0f       	add	r24, r22
    a860:	97 1f       	adc	r25, r23
    a862:	fc 01       	movw	r30, r24
    a864:	51 83       	std	Z+1, r21	; 0x01
    a866:	40 83       	st	Z, r20
    a868:	ca 01       	movw	r24, r20
    a86a:	2f 5f       	subi	r18, 0xFF	; 255
    a86c:	3f 4f       	sbci	r19, 0xFF	; 255
    a86e:	03 c0       	rjmp	.+6      	; 0xa876 <dir_read+0x10c>
    a870:	4f 3f       	cpi	r20, 0xFF	; 255
    a872:	5f 4f       	sbci	r21, 0xFF	; 255
    a874:	31 f5       	brne	.+76     	; 0xa8c2 <dir_read+0x158>
    a876:	44 e0       	ldi	r20, 0x04	; 4
    a878:	a8 3f       	cpi	r26, 0xF8	; 248
    a87a:	b4 07       	cpc	r27, r20
    a87c:	09 f7       	brne	.-62     	; 0xa840 <dir_read+0xd6>
    a87e:	f4 01       	movw	r30, r8
    a880:	40 81       	ld	r20, Z
    a882:	46 ff       	sbrs	r20, 6
    a884:	2e c0       	rjmp	.+92     	; 0xa8e2 <dir_read+0x178>
    a886:	89 2b       	or	r24, r25
    a888:	61 f1       	breq	.+88     	; 0xa8e2 <dir_read+0x178>
    a88a:	2f 3f       	cpi	r18, 0xFF	; 255
    a88c:	31 05       	cpc	r19, r1
    a88e:	09 f0       	breq	.+2      	; 0xa892 <dir_read+0x128>
    a890:	c0 f4       	brcc	.+48     	; 0xa8c2 <dir_read+0x158>
    a892:	22 0f       	add	r18, r18
    a894:	33 1f       	adc	r19, r19
    a896:	fb 01       	movw	r30, r22
    a898:	e2 0f       	add	r30, r18
    a89a:	f3 1f       	adc	r31, r19
    a89c:	11 82       	std	Z+1, r1	; 0x01
    a89e:	10 82       	st	Z, r1
    a8a0:	20 c0       	rjmp	.+64     	; 0xa8e2 <dir_read+0x178>
    a8a2:	11 11       	cpse	r17, r1
    a8a4:	05 c0       	rjmp	.+10     	; 0xa8b0 <dir_read+0x146>
    a8a6:	c4 01       	movw	r24, r8
    a8a8:	0e 94 6f 48 	call	0x90de	; 0x90de <sum_sfn>
    a8ac:	d8 16       	cp	r13, r24
    a8ae:	f9 f0       	breq	.+62     	; 0xa8ee <dir_read+0x184>
    a8b0:	8f ef       	ldi	r24, 0xFF	; 255
    a8b2:	9f ef       	ldi	r25, 0xFF	; 255
    a8b4:	dc 01       	movw	r26, r24
    a8b6:	88 a7       	std	Y+40, r24	; 0x28
    a8b8:	99 a7       	std	Y+41, r25	; 0x29
    a8ba:	aa a7       	std	Y+42, r26	; 0x2a
    a8bc:	bb a7       	std	Y+43, r27	; 0x2b
    a8be:	17 c0       	rjmp	.+46     	; 0xa8ee <dir_read+0x184>
    a8c0:	d8 2e       	mov	r13, r24
    a8c2:	1f ef       	ldi	r17, 0xFF	; 255
    a8c4:	60 e0       	ldi	r22, 0x00	; 0
    a8c6:	70 e0       	ldi	r23, 0x00	; 0
    a8c8:	ce 01       	movw	r24, r28
    a8ca:	2e de       	rcall	.-932    	; 0xa528 <dir_next>
    a8cc:	00 97       	sbiw	r24, 0x00	; 0
    a8ce:	09 f4       	brne	.+2      	; 0xa8d2 <dir_read+0x168>
    a8d0:	5d cf       	rjmp	.-326    	; 0xa78c <dir_read+0x22>
    a8d2:	02 c0       	rjmp	.+4      	; 0xa8d8 <dir_read+0x16e>
    a8d4:	00 97       	sbiw	r24, 0x00	; 0
    a8d6:	59 f0       	breq	.+22     	; 0xa8ee <dir_read+0x184>
    a8d8:	1e 8a       	std	Y+22, r1	; 0x16
    a8da:	1f 8a       	std	Y+23, r1	; 0x17
    a8dc:	18 8e       	std	Y+24, r1	; 0x18
    a8de:	19 8e       	std	Y+25, r1	; 0x19
    a8e0:	08 c0       	rjmp	.+16     	; 0xa8f2 <dir_read+0x188>
    a8e2:	1f ef       	ldi	r17, 0xFF	; 255
    a8e4:	10 0f       	add	r17, r16
    a8e6:	ee cf       	rjmp	.-36     	; 0xa8c4 <dir_read+0x15a>
    a8e8:	84 e0       	ldi	r24, 0x04	; 4
    a8ea:	90 e0       	ldi	r25, 0x00	; 0
    a8ec:	f5 cf       	rjmp	.-22     	; 0xa8d8 <dir_read+0x16e>
    a8ee:	80 e0       	ldi	r24, 0x00	; 0
    a8f0:	90 e0       	ldi	r25, 0x00	; 0
    a8f2:	cd b7       	in	r28, 0x3d	; 61
    a8f4:	de b7       	in	r29, 0x3e	; 62
    a8f6:	ec e0       	ldi	r30, 0x0C	; 12
    a8f8:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

0000a8fc <dir_remove>:
    a8fc:	a0 e0       	ldi	r26, 0x00	; 0
    a8fe:	b0 e0       	ldi	r27, 0x00	; 0
    a900:	e4 e8       	ldi	r30, 0x84	; 132
    a902:	f4 e5       	ldi	r31, 0x54	; 84
    a904:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
    a908:	ec 01       	movw	r28, r24
    a90a:	08 81       	ld	r16, Y
    a90c:	19 81       	ldd	r17, Y+1	; 0x01
    a90e:	ce 84       	ldd	r12, Y+14	; 0x0e
    a910:	df 84       	ldd	r13, Y+15	; 0x0f
    a912:	e8 88       	ldd	r14, Y+16	; 0x10
    a914:	f9 88       	ldd	r15, Y+17	; 0x11
    a916:	48 a5       	ldd	r20, Y+40	; 0x28
    a918:	59 a5       	ldd	r21, Y+41	; 0x29
    a91a:	6a a5       	ldd	r22, Y+42	; 0x2a
    a91c:	7b a5       	ldd	r23, Y+43	; 0x2b
    a91e:	4f 3f       	cpi	r20, 0xFF	; 255
    a920:	8f ef       	ldi	r24, 0xFF	; 255
    a922:	58 07       	cpc	r21, r24
    a924:	68 07       	cpc	r22, r24
    a926:	78 07       	cpc	r23, r24
    a928:	29 f4       	brne	.+10     	; 0xa934 <dir_remove+0x38>
    a92a:	85 ee       	ldi	r24, 0xE5	; 229
    a92c:	b8 2e       	mov	r11, r24
    a92e:	aa 24       	eor	r10, r10
    a930:	a3 94       	inc	r10
    a932:	19 c0       	rjmp	.+50     	; 0xa966 <dir_remove+0x6a>
    a934:	ce 01       	movw	r24, r28
    a936:	80 db       	rcall	.-2304   	; 0xa038 <dir_sdi>
    a938:	00 97       	sbiw	r24, 0x00	; 0
    a93a:	19 f5       	brne	.+70     	; 0xa982 <dir_remove+0x86>
    a93c:	f6 cf       	rjmp	.-20     	; 0xa92a <dir_remove+0x2e>
    a93e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a940:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a942:	b0 82       	st	Z, r11
    a944:	f8 01       	movw	r30, r16
    a946:	a3 82       	std	Z+3, r10	; 0x03
    a948:	4e 85       	ldd	r20, Y+14	; 0x0e
    a94a:	5f 85       	ldd	r21, Y+15	; 0x0f
    a94c:	68 89       	ldd	r22, Y+16	; 0x10
    a94e:	79 89       	ldd	r23, Y+17	; 0x11
    a950:	4c 15       	cp	r20, r12
    a952:	5d 05       	cpc	r21, r13
    a954:	6e 05       	cpc	r22, r14
    a956:	7f 05       	cpc	r23, r15
    a958:	a0 f4       	brcc	.+40     	; 0xa982 <dir_remove+0x86>
    a95a:	60 e0       	ldi	r22, 0x00	; 0
    a95c:	70 e0       	ldi	r23, 0x00	; 0
    a95e:	ce 01       	movw	r24, r28
    a960:	e3 dd       	rcall	.-1082   	; 0xa528 <dir_next>
    a962:	00 97       	sbiw	r24, 0x00	; 0
    a964:	49 f4       	brne	.+18     	; 0xa978 <dir_remove+0x7c>
    a966:	4e 89       	ldd	r20, Y+22	; 0x16
    a968:	5f 89       	ldd	r21, Y+23	; 0x17
    a96a:	68 8d       	ldd	r22, Y+24	; 0x18
    a96c:	79 8d       	ldd	r23, Y+25	; 0x19
    a96e:	c8 01       	movw	r24, r16
    a970:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    a974:	00 97       	sbiw	r24, 0x00	; 0
    a976:	19 f3       	breq	.-58     	; 0xa93e <dir_remove+0x42>
    a978:	84 30       	cpi	r24, 0x04	; 4
    a97a:	91 05       	cpc	r25, r1
    a97c:	11 f4       	brne	.+4      	; 0xa982 <dir_remove+0x86>
    a97e:	82 e0       	ldi	r24, 0x02	; 2
    a980:	90 e0       	ldi	r25, 0x00	; 0
    a982:	cd b7       	in	r28, 0x3d	; 61
    a984:	de b7       	in	r29, 0x3e	; 62
    a986:	ea e0       	ldi	r30, 0x0A	; 10
    a988:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

0000a98c <dir_find>:
    a98c:	ac e0       	ldi	r26, 0x0C	; 12
    a98e:	b0 e0       	ldi	r27, 0x00	; 0
    a990:	ec ec       	ldi	r30, 0xCC	; 204
    a992:	f4 e5       	ldi	r31, 0x54	; 84
    a994:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    a998:	9c 87       	std	Y+12, r25	; 0x0c
    a99a:	8b 87       	std	Y+11, r24	; 0x0b
    a99c:	fc 01       	movw	r30, r24
    a99e:	01 90       	ld	r0, Z+
    a9a0:	f0 81       	ld	r31, Z
    a9a2:	e0 2d       	mov	r30, r0
    a9a4:	fc 83       	std	Y+4, r31	; 0x04
    a9a6:	eb 83       	std	Y+3, r30	; 0x03
    a9a8:	40 e0       	ldi	r20, 0x00	; 0
    a9aa:	50 e0       	ldi	r21, 0x00	; 0
    a9ac:	ba 01       	movw	r22, r20
    a9ae:	44 db       	rcall	.-2424   	; 0xa038 <dir_sdi>
    a9b0:	00 97       	sbiw	r24, 0x00	; 0
    a9b2:	09 f0       	breq	.+2      	; 0xa9b6 <dir_find+0x2a>
    a9b4:	e7 c0       	rjmp	.+462    	; 0xab84 <dir_find+0x1f8>
    a9b6:	8f ef       	ldi	r24, 0xFF	; 255
    a9b8:	9f ef       	ldi	r25, 0xFF	; 255
    a9ba:	dc 01       	movw	r26, r24
    a9bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9be:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9c0:	80 a7       	std	Z+40, r24	; 0x28
    a9c2:	91 a7       	std	Z+41, r25	; 0x29
    a9c4:	a2 a7       	std	Z+42, r26	; 0x2a
    a9c6:	b3 a7       	std	Z+43, r27	; 0x2b
    a9c8:	0f ef       	ldi	r16, 0xFF	; 255
    a9ca:	1f ef       	ldi	r17, 0xFF	; 255
    a9cc:	44 24       	eor	r4, r4
    a9ce:	4a 94       	dec	r4
    a9d0:	54 2c       	mov	r5, r4
    a9d2:	32 01       	movw	r6, r4
    a9d4:	7c 96       	adiw	r30, 0x1c	; 28
    a9d6:	fa 87       	std	Y+10, r31	; 0x0a
    a9d8:	e9 87       	std	Y+9, r30	; 0x09
    a9da:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9de:	46 89       	ldd	r20, Z+22	; 0x16
    a9e0:	57 89       	ldd	r21, Z+23	; 0x17
    a9e2:	60 8d       	ldd	r22, Z+24	; 0x18
    a9e4:	71 8d       	ldd	r23, Z+25	; 0x19
    a9e6:	8b 81       	ldd	r24, Y+3	; 0x03
    a9e8:	9c 81       	ldd	r25, Y+4	; 0x04
    a9ea:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    a9ee:	00 97       	sbiw	r24, 0x00	; 0
    a9f0:	09 f0       	breq	.+2      	; 0xa9f4 <dir_find+0x68>
    a9f2:	c8 c0       	rjmp	.+400    	; 0xab84 <dir_find+0x1f8>
    a9f4:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9f6:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9f8:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a9fa:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a9fc:	f7 01       	movw	r30, r14
    a9fe:	d0 80       	ld	r13, Z
    aa00:	dd 20       	and	r13, r13
    aa02:	09 f4       	brne	.+2      	; 0xaa06 <dir_find+0x7a>
    aa04:	c1 c0       	rjmp	.+386    	; 0xab88 <dir_find+0x1fc>
    aa06:	93 85       	ldd	r25, Z+11	; 0x0b
    aa08:	89 2f       	mov	r24, r25
    aa0a:	8f 73       	andi	r24, 0x3F	; 63
    aa0c:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa0e:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa10:	84 83       	std	Z+4, r24	; 0x04
    aa12:	f5 ee       	ldi	r31, 0xE5	; 229
    aa14:	df 16       	cp	r13, r31
    aa16:	09 f4       	brne	.+2      	; 0xaa1a <dir_find+0x8e>
    aa18:	a6 c0       	rjmp	.+332    	; 0xab66 <dir_find+0x1da>
    aa1a:	93 ff       	sbrs	r25, 3
    aa1c:	04 c0       	rjmp	.+8      	; 0xaa26 <dir_find+0x9a>
    aa1e:	8f 30       	cpi	r24, 0x0F	; 15
    aa20:	09 f0       	breq	.+2      	; 0xaa24 <dir_find+0x98>
    aa22:	a1 c0       	rjmp	.+322    	; 0xab66 <dir_find+0x1da>
    aa24:	03 c0       	rjmp	.+6      	; 0xaa2c <dir_find+0xa0>
    aa26:	8f 30       	cpi	r24, 0x0F	; 15
    aa28:	09 f0       	breq	.+2      	; 0xaa2c <dir_find+0xa0>
    aa2a:	88 c0       	rjmp	.+272    	; 0xab3c <dir_find+0x1b0>
    aa2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa30:	87 a1       	ldd	r24, Z+39	; 0x27
    aa32:	86 fd       	sbrc	r24, 6
    aa34:	9f c0       	rjmp	.+318    	; 0xab74 <dir_find+0x1e8>
    aa36:	d6 fe       	sbrs	r13, 6
    aa38:	10 c0       	rjmp	.+32     	; 0xaa5a <dir_find+0xce>
    aa3a:	f7 01       	movw	r30, r14
    aa3c:	05 85       	ldd	r16, Z+13	; 0x0d
    aa3e:	fd 2d       	mov	r31, r13
    aa40:	ff 7b       	andi	r31, 0xBF	; 191
    aa42:	df 2e       	mov	r13, r31
    aa44:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa46:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa48:	86 85       	ldd	r24, Z+14	; 0x0e
    aa4a:	97 85       	ldd	r25, Z+15	; 0x0f
    aa4c:	a0 89       	ldd	r26, Z+16	; 0x10
    aa4e:	b1 89       	ldd	r27, Z+17	; 0x11
    aa50:	80 a7       	std	Z+40, r24	; 0x28
    aa52:	91 a7       	std	Z+41, r25	; 0x29
    aa54:	a2 a7       	std	Z+42, r26	; 0x2a
    aa56:	b3 a7       	std	Z+43, r27	; 0x2b
    aa58:	02 c0       	rjmp	.+4      	; 0xaa5e <dir_find+0xd2>
    aa5a:	1d 11       	cpse	r17, r13
    aa5c:	8a c0       	rjmp	.+276    	; 0xab72 <dir_find+0x1e6>
    aa5e:	f7 01       	movw	r30, r14
    aa60:	c5 84       	ldd	r12, Z+13	; 0x0d
    aa62:	c0 12       	cpse	r12, r16
    aa64:	86 c0       	rjmp	.+268    	; 0xab72 <dir_find+0x1e6>
    aa66:	82 8d       	ldd	r24, Z+26	; 0x1a
    aa68:	93 8d       	ldd	r25, Z+27	; 0x1b
    aa6a:	89 2b       	or	r24, r25
    aa6c:	09 f0       	breq	.+2      	; 0xaa70 <dir_find+0xe4>
    aa6e:	91 c0       	rjmp	.+290    	; 0xab92 <dir_find+0x206>
    aa70:	eb 81       	ldd	r30, Y+3	; 0x03
    aa72:	fc 81       	ldd	r31, Y+4	; 0x04
    aa74:	03 84       	ldd	r0, Z+11	; 0x0b
    aa76:	f4 85       	ldd	r31, Z+12	; 0x0c
    aa78:	e0 2d       	mov	r30, r0
    aa7a:	fe 83       	std	Y+6, r31	; 0x06
    aa7c:	ed 83       	std	Y+5, r30	; 0x05
    aa7e:	f7 01       	movw	r30, r14
    aa80:	80 81       	ld	r24, Z
    aa82:	8f 73       	andi	r24, 0x3F	; 63
    aa84:	90 e0       	ldi	r25, 0x00	; 0
    aa86:	01 97       	sbiw	r24, 0x01	; 1
    aa88:	fd e0       	ldi	r31, 0x0D	; 13
    aa8a:	f8 9f       	mul	r31, r24
    aa8c:	80 01       	movw	r16, r0
    aa8e:	f9 9f       	mul	r31, r25
    aa90:	10 0d       	add	r17, r0
    aa92:	11 24       	eor	r1, r1
    aa94:	2b ee       	ldi	r18, 0xEB	; 235
    aa96:	34 e0       	ldi	r19, 0x04	; 4
    aa98:	3a 83       	std	Y+2, r19	; 0x02
    aa9a:	29 83       	std	Y+1, r18	; 0x01
    aa9c:	81 e0       	ldi	r24, 0x01	; 1
    aa9e:	90 e0       	ldi	r25, 0x00	; 0
    aaa0:	e9 81       	ldd	r30, Y+1	; 0x01
    aaa2:	fa 81       	ldd	r31, Y+2	; 0x02
    aaa4:	21 91       	ld	r18, Z+
    aaa6:	fa 83       	std	Y+2, r31	; 0x02
    aaa8:	e9 83       	std	Y+1, r30	; 0x01
    aaaa:	f7 01       	movw	r30, r14
    aaac:	e2 0f       	add	r30, r18
    aaae:	f1 1d       	adc	r31, r1
    aab0:	20 80       	ld	r2, Z
    aab2:	31 80       	ldd	r3, Z+1	; 0x01
    aab4:	00 97       	sbiw	r24, 0x00	; 0
    aab6:	39 f1       	breq	.+78     	; 0xab06 <dir_find+0x17a>
    aab8:	0f 3f       	cpi	r16, 0xFF	; 255
    aaba:	11 05       	cpc	r17, r1
    aabc:	11 f0       	breq	.+4      	; 0xaac2 <dir_find+0x136>
    aabe:	08 f0       	brcs	.+2      	; 0xaac2 <dir_find+0x136>
    aac0:	68 c0       	rjmp	.+208    	; 0xab92 <dir_find+0x206>
    aac2:	b1 01       	movw	r22, r2
    aac4:	80 e0       	ldi	r24, 0x00	; 0
    aac6:	90 e0       	ldi	r25, 0x00	; 0
    aac8:	0e 94 5e 69 	call	0xd2bc	; 0xd2bc <ff_wtoupper>
    aacc:	4b 01       	movw	r8, r22
    aace:	5c 01       	movw	r10, r24
    aad0:	98 01       	movw	r18, r16
    aad2:	2f 5f       	subi	r18, 0xFF	; 255
    aad4:	3f 4f       	sbci	r19, 0xFF	; 255
    aad6:	38 87       	std	Y+8, r19	; 0x08
    aad8:	2f 83       	std	Y+7, r18	; 0x07
    aada:	00 0f       	add	r16, r16
    aadc:	11 1f       	adc	r17, r17
    aade:	ed 81       	ldd	r30, Y+5	; 0x05
    aae0:	fe 81       	ldd	r31, Y+6	; 0x06
    aae2:	e0 0f       	add	r30, r16
    aae4:	f1 1f       	adc	r31, r17
    aae6:	60 81       	ld	r22, Z
    aae8:	71 81       	ldd	r23, Z+1	; 0x01
    aaea:	80 e0       	ldi	r24, 0x00	; 0
    aaec:	90 e0       	ldi	r25, 0x00	; 0
    aaee:	0e 94 5e 69 	call	0xd2bc	; 0xd2bc <ff_wtoupper>
    aaf2:	86 16       	cp	r8, r22
    aaf4:	97 06       	cpc	r9, r23
    aaf6:	a8 06       	cpc	r10, r24
    aaf8:	b9 06       	cpc	r11, r25
    aafa:	09 f0       	breq	.+2      	; 0xaafe <dir_find+0x172>
    aafc:	4a c0       	rjmp	.+148    	; 0xab92 <dir_find+0x206>
    aafe:	c1 01       	movw	r24, r2
    ab00:	0f 81       	ldd	r16, Y+7	; 0x07
    ab02:	18 85       	ldd	r17, Y+8	; 0x08
    ab04:	05 c0       	rjmp	.+10     	; 0xab10 <dir_find+0x184>
    ab06:	3f ef       	ldi	r19, 0xFF	; 255
    ab08:	23 16       	cp	r2, r19
    ab0a:	33 06       	cpc	r3, r19
    ab0c:	09 f0       	breq	.+2      	; 0xab10 <dir_find+0x184>
    ab0e:	41 c0       	rjmp	.+130    	; 0xab92 <dir_find+0x206>
    ab10:	e9 81       	ldd	r30, Y+1	; 0x01
    ab12:	fa 81       	ldd	r31, Y+2	; 0x02
    ab14:	e8 5f       	subi	r30, 0xF8	; 248
    ab16:	f4 40       	sbci	r31, 0x04	; 4
    ab18:	19 f6       	brne	.-122    	; 0xaaa0 <dir_find+0x114>
    ab1a:	f7 01       	movw	r30, r14
    ab1c:	20 81       	ld	r18, Z
    ab1e:	26 ff       	sbrs	r18, 6
    ab20:	3a c0       	rjmp	.+116    	; 0xab96 <dir_find+0x20a>
    ab22:	89 2b       	or	r24, r25
    ab24:	c1 f1       	breq	.+112    	; 0xab96 <dir_find+0x20a>
    ab26:	00 0f       	add	r16, r16
    ab28:	11 1f       	adc	r17, r17
    ab2a:	ed 81       	ldd	r30, Y+5	; 0x05
    ab2c:	fe 81       	ldd	r31, Y+6	; 0x06
    ab2e:	e0 0f       	add	r30, r16
    ab30:	f1 1f       	adc	r31, r17
    ab32:	80 81       	ld	r24, Z
    ab34:	91 81       	ldd	r25, Z+1	; 0x01
    ab36:	89 2b       	or	r24, r25
    ab38:	71 f1       	breq	.+92     	; 0xab96 <dir_find+0x20a>
    ab3a:	2b c0       	rjmp	.+86     	; 0xab92 <dir_find+0x206>
    ab3c:	11 11       	cpse	r17, r1
    ab3e:	05 c0       	rjmp	.+10     	; 0xab4a <dir_find+0x1be>
    ab40:	c7 01       	movw	r24, r14
    ab42:	0e 94 6f 48 	call	0x90de	; 0x90de <sum_sfn>
    ab46:	08 17       	cp	r16, r24
    ab48:	09 f1       	breq	.+66     	; 0xab8c <dir_find+0x200>
    ab4a:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab4c:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab4e:	87 a1       	ldd	r24, Z+39	; 0x27
    ab50:	80 fd       	sbrc	r24, 0
    ab52:	09 c0       	rjmp	.+18     	; 0xab66 <dir_find+0x1da>
    ab54:	4b e0       	ldi	r20, 0x0B	; 11
    ab56:	50 e0       	ldi	r21, 0x00	; 0
    ab58:	69 85       	ldd	r22, Y+9	; 0x09
    ab5a:	7a 85       	ldd	r23, Y+10	; 0x0a
    ab5c:	c7 01       	movw	r24, r14
    ab5e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <mem_cmp>
    ab62:	89 2b       	or	r24, r25
    ab64:	99 f0       	breq	.+38     	; 0xab8c <dir_find+0x200>
    ab66:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab68:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab6a:	40 a6       	std	Z+40, r4	; 0x28
    ab6c:	51 a6       	std	Z+41, r5	; 0x29
    ab6e:	62 a6       	std	Z+42, r6	; 0x2a
    ab70:	73 a6       	std	Z+43, r7	; 0x2b
    ab72:	1f ef       	ldi	r17, 0xFF	; 255
    ab74:	60 e0       	ldi	r22, 0x00	; 0
    ab76:	70 e0       	ldi	r23, 0x00	; 0
    ab78:	8b 85       	ldd	r24, Y+11	; 0x0b
    ab7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    ab7c:	d5 dc       	rcall	.-1622   	; 0xa528 <dir_next>
    ab7e:	00 97       	sbiw	r24, 0x00	; 0
    ab80:	09 f4       	brne	.+2      	; 0xab84 <dir_find+0x1f8>
    ab82:	2b cf       	rjmp	.-426    	; 0xa9da <dir_find+0x4e>
    ab84:	28 2f       	mov	r18, r24
    ab86:	0b c0       	rjmp	.+22     	; 0xab9e <dir_find+0x212>
    ab88:	24 e0       	ldi	r18, 0x04	; 4
    ab8a:	01 c0       	rjmp	.+2      	; 0xab8e <dir_find+0x202>
    ab8c:	20 e0       	ldi	r18, 0x00	; 0
    ab8e:	90 e0       	ldi	r25, 0x00	; 0
    ab90:	06 c0       	rjmp	.+12     	; 0xab9e <dir_find+0x212>
    ab92:	0c 2d       	mov	r16, r12
    ab94:	ee cf       	rjmp	.-36     	; 0xab72 <dir_find+0x1e6>
    ab96:	1f ef       	ldi	r17, 0xFF	; 255
    ab98:	1d 0d       	add	r17, r13
    ab9a:	0c 2d       	mov	r16, r12
    ab9c:	eb cf       	rjmp	.-42     	; 0xab74 <dir_find+0x1e8>
    ab9e:	82 2f       	mov	r24, r18
    aba0:	2c 96       	adiw	r28, 0x0c	; 12
    aba2:	e2 e1       	ldi	r30, 0x12	; 18
    aba4:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0000aba8 <dir_register>:
    aba8:	a6 e1       	ldi	r26, 0x16	; 22
    abaa:	b0 e0       	ldi	r27, 0x00	; 0
    abac:	ea ed       	ldi	r30, 0xDA	; 218
    abae:	f5 e5       	ldi	r31, 0x55	; 85
    abb0:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    abb4:	fc 01       	movw	r30, r24
    abb6:	27 a1       	ldd	r18, Z+39	; 0x27
    abb8:	20 7a       	andi	r18, 0xA0	; 160
    abba:	09 f0       	breq	.+2      	; 0xabbe <dir_register+0x16>
    abbc:	53 c1       	rjmp	.+678    	; 0xae64 <dir_register+0x2bc>
    abbe:	c0 80       	ld	r12, Z
    abc0:	d1 80       	ldd	r13, Z+1	; 0x01
    abc2:	f6 01       	movw	r30, r12
    abc4:	a3 85       	ldd	r26, Z+11	; 0x0b
    abc6:	b4 85       	ldd	r27, Z+12	; 0x0c
    abc8:	81 2c       	mov	r8, r1
    abca:	91 2c       	mov	r9, r1
    abcc:	2d 91       	ld	r18, X+
    abce:	3d 91       	ld	r19, X+
    abd0:	23 2b       	or	r18, r19
    abd2:	21 f0       	breq	.+8      	; 0xabdc <dir_register+0x34>
    abd4:	ff ef       	ldi	r31, 0xFF	; 255
    abd6:	8f 1a       	sub	r8, r31
    abd8:	9f 0a       	sbc	r9, r31
    abda:	f8 cf       	rjmp	.-16     	; 0xabcc <dir_register+0x24>
    abdc:	8c 01       	movw	r16, r24
    abde:	5c 01       	movw	r10, r24
    abe0:	2c e1       	ldi	r18, 0x1C	; 28
    abe2:	a2 0e       	add	r10, r18
    abe4:	b1 1c       	adc	r11, r1
    abe6:	4c e0       	ldi	r20, 0x0C	; 12
    abe8:	50 e0       	ldi	r21, 0x00	; 0
    abea:	b5 01       	movw	r22, r10
    abec:	ce 01       	movw	r24, r28
    abee:	01 96       	adiw	r24, 0x01	; 1
    abf0:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
    abf4:	8c 85       	ldd	r24, Y+12	; 0x0c
    abf6:	80 ff       	sbrs	r24, 0
    abf8:	94 c0       	rjmp	.+296    	; 0xad22 <dir_register+0x17a>
    abfa:	80 e4       	ldi	r24, 0x40	; 64
    abfc:	f8 01       	movw	r30, r16
    abfe:	87 a3       	std	Z+39, r24	; 0x27
    ac00:	41 2c       	mov	r4, r1
    ac02:	51 2c       	mov	r5, r1
    ac04:	32 01       	movw	r6, r4
    ac06:	43 94       	inc	r4
    ac08:	72 01       	movw	r14, r4
    ac0a:	f6 01       	movw	r30, r12
    ac0c:	23 84       	ldd	r2, Z+11	; 0x0b
    ac0e:	34 84       	ldd	r3, Z+12	; 0x0c
    ac10:	4b e0       	ldi	r20, 0x0B	; 11
    ac12:	50 e0       	ldi	r21, 0x00	; 0
    ac14:	be 01       	movw	r22, r28
    ac16:	6f 5f       	subi	r22, 0xFF	; 255
    ac18:	7f 4f       	sbci	r23, 0xFF	; 255
    ac1a:	c5 01       	movw	r24, r10
    ac1c:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
    ac20:	f6 e0       	ldi	r31, 0x06	; 6
    ac22:	4f 16       	cp	r4, r31
    ac24:	51 04       	cpc	r5, r1
    ac26:	18 f1       	brcs	.+70     	; 0xac6e <dir_register+0xc6>
    ac28:	f1 01       	movw	r30, r2
    ac2a:	b3 01       	movw	r22, r6
    ac2c:	a2 01       	movw	r20, r4
    ac2e:	81 91       	ld	r24, Z+
    ac30:	91 91       	ld	r25, Z+
    ac32:	00 97       	sbiw	r24, 0x00	; 0
    ac34:	d9 f0       	breq	.+54     	; 0xac6c <dir_register+0xc4>
    ac36:	20 e1       	ldi	r18, 0x10	; 16
    ac38:	30 e0       	ldi	r19, 0x00	; 0
    ac3a:	44 0f       	add	r20, r20
    ac3c:	55 1f       	adc	r21, r21
    ac3e:	66 1f       	adc	r22, r22
    ac40:	77 1f       	adc	r23, r23
    ac42:	dc 01       	movw	r26, r24
    ac44:	a1 70       	andi	r26, 0x01	; 1
    ac46:	bb 27       	eor	r27, r27
    ac48:	4a 0f       	add	r20, r26
    ac4a:	5b 1f       	adc	r21, r27
    ac4c:	61 1d       	adc	r22, r1
    ac4e:	71 1d       	adc	r23, r1
    ac50:	96 95       	lsr	r25
    ac52:	87 95       	ror	r24
    ac54:	60 ff       	sbrs	r22, 0
    ac56:	06 c0       	rjmp	.+12     	; 0xac64 <dir_register+0xbc>
    ac58:	a1 e2       	ldi	r26, 0x21	; 33
    ac5a:	4a 27       	eor	r20, r26
    ac5c:	a0 e1       	ldi	r26, 0x10	; 16
    ac5e:	5a 27       	eor	r21, r26
    ac60:	a1 e0       	ldi	r26, 0x01	; 1
    ac62:	6a 27       	eor	r22, r26
    ac64:	21 50       	subi	r18, 0x01	; 1
    ac66:	31 09       	sbc	r19, r1
    ac68:	41 f7       	brne	.-48     	; 0xac3a <dir_register+0x92>
    ac6a:	e1 cf       	rjmp	.-62     	; 0xac2e <dir_register+0x86>
    ac6c:	7a 01       	movw	r14, r20
    ac6e:	fe 01       	movw	r30, r28
    ac70:	75 96       	adiw	r30, 0x15	; 21
    ac72:	27 e0       	ldi	r18, 0x07	; 7
    ac74:	30 e0       	ldi	r19, 0x00	; 0
    ac76:	9e 2d       	mov	r25, r14
    ac78:	9f 70       	andi	r25, 0x0F	; 15
    ac7a:	80 e3       	ldi	r24, 0x30	; 48
    ac7c:	89 0f       	add	r24, r25
    ac7e:	8a 33       	cpi	r24, 0x3A	; 58
    ac80:	10 f0       	brcs	.+4      	; 0xac86 <dir_register+0xde>
    ac82:	87 e3       	ldi	r24, 0x37	; 55
    ac84:	89 0f       	add	r24, r25
    ac86:	21 50       	subi	r18, 0x01	; 1
    ac88:	31 09       	sbc	r19, r1
    ac8a:	82 93       	st	-Z, r24
    ac8c:	a4 e0       	ldi	r26, 0x04	; 4
    ac8e:	f6 94       	lsr	r15
    ac90:	e7 94       	ror	r14
    ac92:	aa 95       	dec	r26
    ac94:	e1 f7       	brne	.-8      	; 0xac8e <dir_register+0xe6>
    ac96:	e1 14       	cp	r14, r1
    ac98:	f1 04       	cpc	r15, r1
    ac9a:	69 f7       	brne	.-38     	; 0xac76 <dir_register+0xce>
    ac9c:	ed e0       	ldi	r30, 0x0D	; 13
    ac9e:	f0 e0       	ldi	r31, 0x00	; 0
    aca0:	ec 0f       	add	r30, r28
    aca2:	fd 1f       	adc	r31, r29
    aca4:	e2 0f       	add	r30, r18
    aca6:	f3 1f       	adc	r31, r19
    aca8:	4e e7       	ldi	r20, 0x7E	; 126
    acaa:	40 83       	st	Z, r20
    acac:	f5 01       	movw	r30, r10
    acae:	80 e0       	ldi	r24, 0x00	; 0
    acb0:	90 e0       	ldi	r25, 0x00	; 0
    acb2:	28 17       	cp	r18, r24
    acb4:	39 07       	cpc	r19, r25
    acb6:	29 f0       	breq	.+10     	; 0xacc2 <dir_register+0x11a>
    acb8:	41 91       	ld	r20, Z+
    acba:	40 32       	cpi	r20, 0x20	; 32
    acbc:	11 f0       	breq	.+4      	; 0xacc2 <dir_register+0x11a>
    acbe:	01 96       	adiw	r24, 0x01	; 1
    acc0:	f8 cf       	rjmp	.-16     	; 0xacb2 <dir_register+0x10a>
    acc2:	f5 01       	movw	r30, r10
    acc4:	e8 0f       	add	r30, r24
    acc6:	f9 1f       	adc	r31, r25
    acc8:	28 30       	cpi	r18, 0x08	; 8
    acca:	31 05       	cpc	r19, r1
    accc:	50 f4       	brcc	.+20     	; 0xace2 <dir_register+0x13a>
    acce:	ad e0       	ldi	r26, 0x0D	; 13
    acd0:	b0 e0       	ldi	r27, 0x00	; 0
    acd2:	ac 0f       	add	r26, r28
    acd4:	bd 1f       	adc	r27, r29
    acd6:	a2 0f       	add	r26, r18
    acd8:	b3 1f       	adc	r27, r19
    acda:	8c 91       	ld	r24, X
    acdc:	2f 5f       	subi	r18, 0xFF	; 255
    acde:	3f 4f       	sbci	r19, 0xFF	; 255
    ace0:	01 c0       	rjmp	.+2      	; 0xace4 <dir_register+0x13c>
    ace2:	80 e2       	ldi	r24, 0x20	; 32
    ace4:	81 93       	st	Z+, r24
    ace6:	cf 01       	movw	r24, r30
    ace8:	8a 19       	sub	r24, r10
    acea:	9b 09       	sbc	r25, r11
    acec:	08 97       	sbiw	r24, 0x08	; 8
    acee:	60 f3       	brcs	.-40     	; 0xacc8 <dir_register+0x120>
    acf0:	c8 01       	movw	r24, r16
    acf2:	4c de       	rcall	.-872    	; 0xa98c <dir_find>
    acf4:	00 97       	sbiw	r24, 0x00	; 0
    acf6:	71 f4       	brne	.+28     	; 0xad14 <dir_register+0x16c>
    acf8:	8f ef       	ldi	r24, 0xFF	; 255
    acfa:	48 1a       	sub	r4, r24
    acfc:	58 0a       	sbc	r5, r24
    acfe:	68 0a       	sbc	r6, r24
    ad00:	78 0a       	sbc	r7, r24
    ad02:	94 e6       	ldi	r25, 0x64	; 100
    ad04:	49 16       	cp	r4, r25
    ad06:	51 04       	cpc	r5, r1
    ad08:	61 04       	cpc	r6, r1
    ad0a:	71 04       	cpc	r7, r1
    ad0c:	09 f0       	breq	.+2      	; 0xad10 <dir_register+0x168>
    ad0e:	7c cf       	rjmp	.-264    	; 0xac08 <dir_register+0x60>
    ad10:	27 e0       	ldi	r18, 0x07	; 7
    ad12:	a9 c0       	rjmp	.+338    	; 0xae66 <dir_register+0x2be>
    ad14:	84 30       	cpi	r24, 0x04	; 4
    ad16:	91 05       	cpc	r25, r1
    ad18:	09 f0       	breq	.+2      	; 0xad1c <dir_register+0x174>
    ad1a:	ce c0       	rjmp	.+412    	; 0xaeb8 <dir_register+0x310>
    ad1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad1e:	f8 01       	movw	r30, r16
    ad20:	87 a3       	std	Z+39, r24	; 0x27
    ad22:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad24:	81 ff       	sbrs	r24, 1
    ad26:	0b c0       	rjmp	.+22     	; 0xad3e <dir_register+0x196>
    ad28:	c4 01       	movw	r24, r8
    ad2a:	0c 96       	adiw	r24, 0x0c	; 12
    ad2c:	6d e0       	ldi	r22, 0x0D	; 13
    ad2e:	70 e0       	ldi	r23, 0x00	; 0
    ad30:	0e 94 82 e6 	call	0x1cd04	; 0x1cd04 <__udivmodhi4>
    ad34:	7b 01       	movw	r14, r22
    ad36:	ff ef       	ldi	r31, 0xFF	; 255
    ad38:	ef 1a       	sub	r14, r31
    ad3a:	ff 0a       	sbc	r15, r31
    ad3c:	03 c0       	rjmp	.+6      	; 0xad44 <dir_register+0x19c>
    ad3e:	ee 24       	eor	r14, r14
    ad40:	e3 94       	inc	r14
    ad42:	f1 2c       	mov	r15, r1
    ad44:	b7 01       	movw	r22, r14
    ad46:	c8 01       	movw	r24, r16
    ad48:	d7 dc       	rcall	.-1618   	; 0xa6f8 <dir_alloc>
    ad4a:	00 97       	sbiw	r24, 0x00	; 0
    ad4c:	09 f0       	breq	.+2      	; 0xad50 <dir_register+0x1a8>
    ad4e:	b4 c0       	rjmp	.+360    	; 0xaeb8 <dir_register+0x310>
    ad50:	21 e0       	ldi	r18, 0x01	; 1
    ad52:	e2 1a       	sub	r14, r18
    ad54:	f1 08       	sbc	r15, r1
    ad56:	09 f4       	brne	.+2      	; 0xad5a <dir_register+0x1b2>
    ad58:	88 c0       	rjmp	.+272    	; 0xae6a <dir_register+0x2c2>
    ad5a:	f8 01       	movw	r30, r16
    ad5c:	46 85       	ldd	r20, Z+14	; 0x0e
    ad5e:	57 85       	ldd	r21, Z+15	; 0x0f
    ad60:	60 89       	ldd	r22, Z+16	; 0x10
    ad62:	71 89       	ldd	r23, Z+17	; 0x11
    ad64:	c7 01       	movw	r24, r14
    ad66:	e5 e0       	ldi	r30, 0x05	; 5
    ad68:	88 0f       	add	r24, r24
    ad6a:	99 1f       	adc	r25, r25
    ad6c:	ea 95       	dec	r30
    ad6e:	e1 f7       	brne	.-8      	; 0xad68 <dir_register+0x1c0>
    ad70:	48 1b       	sub	r20, r24
    ad72:	59 0b       	sbc	r21, r25
    ad74:	61 09       	sbc	r22, r1
    ad76:	71 09       	sbc	r23, r1
    ad78:	c8 01       	movw	r24, r16
    ad7a:	5e d9       	rcall	.-3396   	; 0xa038 <dir_sdi>
    ad7c:	00 97       	sbiw	r24, 0x00	; 0
    ad7e:	09 f0       	breq	.+2      	; 0xad82 <dir_register+0x1da>
    ad80:	9b c0       	rjmp	.+310    	; 0xaeb8 <dir_register+0x310>
    ad82:	c5 01       	movw	r24, r10
    ad84:	0e 94 6f 48 	call	0x90de	; 0x90de <sum_sfn>
    ad88:	68 2e       	mov	r6, r24
    ad8a:	5f e0       	ldi	r21, 0x0F	; 15
    ad8c:	35 2e       	mov	r3, r21
    ad8e:	6d e0       	ldi	r22, 0x0D	; 13
    ad90:	46 2e       	mov	r4, r22
    ad92:	78 ef       	ldi	r23, 0xF8	; 248
    ad94:	87 2e       	mov	r8, r23
    ad96:	74 e0       	ldi	r23, 0x04	; 4
    ad98:	97 2e       	mov	r9, r23
    ad9a:	55 24       	eor	r5, r5
    ad9c:	53 94       	inc	r5
    ad9e:	f8 01       	movw	r30, r16
    ada0:	46 89       	ldd	r20, Z+22	; 0x16
    ada2:	57 89       	ldd	r21, Z+23	; 0x17
    ada4:	60 8d       	ldd	r22, Z+24	; 0x18
    ada6:	71 8d       	ldd	r23, Z+25	; 0x19
    ada8:	c6 01       	movw	r24, r12
    adaa:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    adae:	00 97       	sbiw	r24, 0x00	; 0
    adb0:	09 f0       	breq	.+2      	; 0xadb4 <dir_register+0x20c>
    adb2:	82 c0       	rjmp	.+260    	; 0xaeb8 <dir_register+0x310>
    adb4:	f6 01       	movw	r30, r12
    adb6:	63 85       	ldd	r22, Z+11	; 0x0b
    adb8:	74 85       	ldd	r23, Z+12	; 0x0c
    adba:	f8 01       	movw	r30, r16
    adbc:	02 8c       	ldd	r0, Z+26	; 0x1a
    adbe:	f3 8d       	ldd	r31, Z+27	; 0x1b
    adc0:	e0 2d       	mov	r30, r0
    adc2:	fe 8b       	std	Y+22, r31	; 0x16
    adc4:	ed 8b       	std	Y+21, r30	; 0x15
    adc6:	7e 2c       	mov	r7, r14
    adc8:	65 86       	std	Z+13, r6	; 0x0d
    adca:	33 86       	std	Z+11, r3	; 0x0b
    adcc:	14 86       	std	Z+12, r1	; 0x0c
    adce:	12 8e       	std	Z+26, r1	; 0x1a
    add0:	13 8e       	std	Z+27, r1	; 0x1b
    add2:	97 01       	movw	r18, r14
    add4:	33 27       	eor	r19, r19
    add6:	21 50       	subi	r18, 0x01	; 1
    add8:	31 09       	sbc	r19, r1
    adda:	42 9e       	mul	r4, r18
    addc:	c0 01       	movw	r24, r0
    adde:	43 9e       	mul	r4, r19
    ade0:	90 0d       	add	r25, r0
    ade2:	11 24       	eor	r1, r1
    ade4:	ab ee       	ldi	r26, 0xEB	; 235
    ade6:	b4 e0       	ldi	r27, 0x04	; 4
    ade8:	20 e0       	ldi	r18, 0x00	; 0
    adea:	30 e0       	ldi	r19, 0x00	; 0
    adec:	2f 3f       	cpi	r18, 0xFF	; 255
    adee:	ff ef       	ldi	r31, 0xFF	; 255
    adf0:	3f 07       	cpc	r19, r31
    adf2:	49 f0       	breq	.+18     	; 0xae06 <dir_register+0x25e>
    adf4:	9c 01       	movw	r18, r24
    adf6:	22 0f       	add	r18, r18
    adf8:	33 1f       	adc	r19, r19
    adfa:	26 0f       	add	r18, r22
    adfc:	37 1f       	adc	r19, r23
    adfe:	f9 01       	movw	r30, r18
    ae00:	20 81       	ld	r18, Z
    ae02:	31 81       	ldd	r19, Z+1	; 0x01
    ae04:	01 96       	adiw	r24, 0x01	; 1
    ae06:	4d 91       	ld	r20, X+
    ae08:	ed 89       	ldd	r30, Y+21	; 0x15
    ae0a:	fe 89       	ldd	r31, Y+22	; 0x16
    ae0c:	e4 0f       	add	r30, r20
    ae0e:	f1 1d       	adc	r31, r1
    ae10:	20 83       	st	Z, r18
    ae12:	31 83       	std	Z+1, r19	; 0x01
    ae14:	21 15       	cp	r18, r1
    ae16:	31 05       	cpc	r19, r1
    ae18:	11 f4       	brne	.+4      	; 0xae1e <dir_register+0x276>
    ae1a:	2f ef       	ldi	r18, 0xFF	; 255
    ae1c:	3f ef       	ldi	r19, 0xFF	; 255
    ae1e:	8a 16       	cp	r8, r26
    ae20:	9b 06       	cpc	r9, r27
    ae22:	21 f7       	brne	.-56     	; 0xadec <dir_register+0x244>
    ae24:	2f 3f       	cpi	r18, 0xFF	; 255
    ae26:	3f 4f       	sbci	r19, 0xFF	; 255
    ae28:	49 f0       	breq	.+18     	; 0xae3c <dir_register+0x294>
    ae2a:	88 0f       	add	r24, r24
    ae2c:	99 1f       	adc	r25, r25
    ae2e:	db 01       	movw	r26, r22
    ae30:	a8 0f       	add	r26, r24
    ae32:	b9 1f       	adc	r27, r25
    ae34:	8d 91       	ld	r24, X+
    ae36:	9c 91       	ld	r25, X
    ae38:	89 2b       	or	r24, r25
    ae3a:	19 f4       	brne	.+6      	; 0xae42 <dir_register+0x29a>
    ae3c:	27 2d       	mov	r18, r7
    ae3e:	20 64       	ori	r18, 0x40	; 64
    ae40:	72 2e       	mov	r7, r18
    ae42:	ed 89       	ldd	r30, Y+21	; 0x15
    ae44:	fe 89       	ldd	r31, Y+22	; 0x16
    ae46:	70 82       	st	Z, r7
    ae48:	f6 01       	movw	r30, r12
    ae4a:	53 82       	std	Z+3, r5	; 0x03
    ae4c:	60 e0       	ldi	r22, 0x00	; 0
    ae4e:	70 e0       	ldi	r23, 0x00	; 0
    ae50:	c8 01       	movw	r24, r16
    ae52:	6a db       	rcall	.-2348   	; 0xa528 <dir_next>
    ae54:	00 97       	sbiw	r24, 0x00	; 0
    ae56:	81 f5       	brne	.+96     	; 0xaeb8 <dir_register+0x310>
    ae58:	f1 e0       	ldi	r31, 0x01	; 1
    ae5a:	ef 1a       	sub	r14, r31
    ae5c:	f1 08       	sbc	r15, r1
    ae5e:	09 f0       	breq	.+2      	; 0xae62 <dir_register+0x2ba>
    ae60:	9e cf       	rjmp	.-196    	; 0xad9e <dir_register+0x1f6>
    ae62:	03 c0       	rjmp	.+6      	; 0xae6a <dir_register+0x2c2>
    ae64:	26 e0       	ldi	r18, 0x06	; 6
    ae66:	90 e0       	ldi	r25, 0x00	; 0
    ae68:	28 c0       	rjmp	.+80     	; 0xaeba <dir_register+0x312>
    ae6a:	f8 01       	movw	r30, r16
    ae6c:	46 89       	ldd	r20, Z+22	; 0x16
    ae6e:	57 89       	ldd	r21, Z+23	; 0x17
    ae70:	60 8d       	ldd	r22, Z+24	; 0x18
    ae72:	71 8d       	ldd	r23, Z+25	; 0x19
    ae74:	c6 01       	movw	r24, r12
    ae76:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    ae7a:	00 97       	sbiw	r24, 0x00	; 0
    ae7c:	e9 f4       	brne	.+58     	; 0xaeb8 <dir_register+0x310>
    ae7e:	40 e2       	ldi	r20, 0x20	; 32
    ae80:	50 e0       	ldi	r21, 0x00	; 0
    ae82:	60 e0       	ldi	r22, 0x00	; 0
    ae84:	70 e0       	ldi	r23, 0x00	; 0
    ae86:	f8 01       	movw	r30, r16
    ae88:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae8a:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae8c:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <mem_set>
    ae90:	4b e0       	ldi	r20, 0x0B	; 11
    ae92:	50 e0       	ldi	r21, 0x00	; 0
    ae94:	b5 01       	movw	r22, r10
    ae96:	f8 01       	movw	r30, r16
    ae98:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae9a:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae9c:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
    aea0:	f8 01       	movw	r30, r16
    aea2:	22 8d       	ldd	r18, Z+26	; 0x1a
    aea4:	33 8d       	ldd	r19, Z+27	; 0x1b
    aea6:	87 a1       	ldd	r24, Z+39	; 0x27
    aea8:	88 71       	andi	r24, 0x18	; 24
    aeaa:	f9 01       	movw	r30, r18
    aeac:	84 87       	std	Z+12, r24	; 0x0c
    aeae:	81 e0       	ldi	r24, 0x01	; 1
    aeb0:	f6 01       	movw	r30, r12
    aeb2:	83 83       	std	Z+3, r24	; 0x03
    aeb4:	20 e0       	ldi	r18, 0x00	; 0
    aeb6:	d7 cf       	rjmp	.-82     	; 0xae66 <dir_register+0x2be>
    aeb8:	28 2f       	mov	r18, r24
    aeba:	82 2f       	mov	r24, r18
    aebc:	66 96       	adiw	r28, 0x16	; 22
    aebe:	e2 e1       	ldi	r30, 0x12	; 18
    aec0:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0000aec4 <follow_path>:
    aec4:	a8 e0       	ldi	r26, 0x08	; 8
    aec6:	b0 e0       	ldi	r27, 0x00	; 0
    aec8:	e8 e6       	ldi	r30, 0x68	; 104
    aeca:	f7 e5       	ldi	r31, 0x57	; 87
    aecc:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    aed0:	8c 01       	movw	r16, r24
    aed2:	78 87       	std	Y+8, r23	; 0x08
    aed4:	6f 83       	std	Y+7, r22	; 0x07
    aed6:	dc 01       	movw	r26, r24
    aed8:	0d 90       	ld	r0, X+
    aeda:	bc 91       	ld	r27, X
    aedc:	a0 2d       	mov	r26, r0
    aede:	ba 83       	std	Y+2, r27	; 0x02
    aee0:	a9 83       	std	Y+1, r26	; 0x01
    aee2:	fb 01       	movw	r30, r22
    aee4:	80 81       	ld	r24, Z
    aee6:	8f 32       	cpi	r24, 0x2F	; 47
    aee8:	11 f0       	breq	.+4      	; 0xaeee <follow_path+0x2a>
    aeea:	8c 35       	cpi	r24, 0x5C	; 92
    aeec:	19 f4       	brne	.+6      	; 0xaef4 <follow_path+0x30>
    aeee:	2f 81       	ldd	r18, Y+7	; 0x07
    aef0:	38 85       	ldd	r19, Y+8	; 0x08
    aef2:	0c c0       	rjmp	.+24     	; 0xaf0c <follow_path+0x48>
    aef4:	e9 81       	ldd	r30, Y+1	; 0x01
    aef6:	fa 81       	ldd	r31, Y+2	; 0x02
    aef8:	85 89       	ldd	r24, Z+21	; 0x15
    aefa:	96 89       	ldd	r25, Z+22	; 0x16
    aefc:	a7 89       	ldd	r26, Z+23	; 0x17
    aefe:	b0 8d       	ldd	r27, Z+24	; 0x18
    af00:	f8 01       	movw	r30, r16
    af02:	86 83       	std	Z+6, r24	; 0x06
    af04:	97 83       	std	Z+7, r25	; 0x07
    af06:	a0 87       	std	Z+8, r26	; 0x08
    af08:	b1 87       	std	Z+9, r27	; 0x09
    af0a:	0f c0       	rjmp	.+30     	; 0xaf2a <follow_path+0x66>
    af0c:	38 87       	std	Y+8, r19	; 0x08
    af0e:	2f 83       	std	Y+7, r18	; 0x07
    af10:	d9 01       	movw	r26, r18
    af12:	8c 91       	ld	r24, X
    af14:	2f 5f       	subi	r18, 0xFF	; 255
    af16:	3f 4f       	sbci	r19, 0xFF	; 255
    af18:	8f 32       	cpi	r24, 0x2F	; 47
    af1a:	c1 f3       	breq	.-16     	; 0xaf0c <follow_path+0x48>
    af1c:	8c 35       	cpi	r24, 0x5C	; 92
    af1e:	b1 f3       	breq	.-20     	; 0xaf0c <follow_path+0x48>
    af20:	f8 01       	movw	r30, r16
    af22:	16 82       	std	Z+6, r1	; 0x06
    af24:	17 82       	std	Z+7, r1	; 0x07
    af26:	10 86       	std	Z+8, r1	; 0x08
    af28:	11 86       	std	Z+9, r1	; 0x09
    af2a:	af 81       	ldd	r26, Y+7	; 0x07
    af2c:	b8 85       	ldd	r27, Y+8	; 0x08
    af2e:	8c 91       	ld	r24, X
    af30:	80 32       	cpi	r24, 0x20	; 32
    af32:	58 f0       	brcs	.+22     	; 0xaf4a <follow_path+0x86>
    af34:	f8 01       	movw	r30, r16
    af36:	7c 96       	adiw	r30, 0x1c	; 28
    af38:	fc 83       	std	Y+4, r31	; 0x04
    af3a:	eb 83       	std	Y+3, r30	; 0x03
    af3c:	29 81       	ldd	r18, Y+1	; 0x01
    af3e:	3a 81       	ldd	r19, Y+2	; 0x02
    af40:	2b 5c       	subi	r18, 0xCB	; 203
    af42:	3f 4f       	sbci	r19, 0xFF	; 255
    af44:	3e 83       	std	Y+6, r19	; 0x06
    af46:	2d 83       	std	Y+5, r18	; 0x05
    af48:	76 c0       	rjmp	.+236    	; 0xb036 <follow_path+0x172>
    af4a:	80 e8       	ldi	r24, 0x80	; 128
    af4c:	f8 01       	movw	r30, r16
    af4e:	87 a3       	std	Z+39, r24	; 0x27
    af50:	40 e0       	ldi	r20, 0x00	; 0
    af52:	50 e0       	ldi	r21, 0x00	; 0
    af54:	ba 01       	movw	r22, r20
    af56:	c8 01       	movw	r24, r16
    af58:	6f d8       	rcall	.-3874   	; 0xa038 <dir_sdi>
    af5a:	ec c1       	rjmp	.+984    	; 0xb334 <follow_path+0x470>
    af5c:	65 eb       	ldi	r22, 0xB5	; 181
    af5e:	71 e0       	ldi	r23, 0x01	; 1
    af60:	0e 94 49 69 	call	0xd292	; 0xd292 <ff_oem2uni>
    af64:	00 97       	sbiw	r24, 0x00	; 0
    af66:	09 f4       	brne	.+2      	; 0xaf6a <follow_path+0xa6>
    af68:	b8 c1       	rjmp	.+880    	; 0xb2da <follow_path+0x416>
    af6a:	80 32       	cpi	r24, 0x20	; 32
    af6c:	91 05       	cpc	r25, r1
    af6e:	30 f1       	brcs	.+76     	; 0xafbc <follow_path+0xf8>
    af70:	8f 32       	cpi	r24, 0x2F	; 47
    af72:	91 05       	cpc	r25, r1
    af74:	09 f4       	brne	.+2      	; 0xaf78 <follow_path+0xb4>
    af76:	6b c0       	rjmp	.+214    	; 0xb04e <follow_path+0x18a>
    af78:	8c 35       	cpi	r24, 0x5C	; 92
    af7a:	91 05       	cpc	r25, r1
    af7c:	09 f4       	brne	.+2      	; 0xaf80 <follow_path+0xbc>
    af7e:	67 c0       	rjmp	.+206    	; 0xb04e <follow_path+0x18a>
    af80:	80 38       	cpi	r24, 0x80	; 128
    af82:	91 05       	cpc	r25, r1
    af84:	28 f4       	brcc	.+10     	; 0xaf90 <follow_path+0xcc>
    af86:	e7 e2       	ldi	r30, 0x27	; 39
    af88:	f4 e0       	ldi	r31, 0x04	; 4
    af8a:	21 91       	ld	r18, Z+
    af8c:	21 11       	cpse	r18, r1
    af8e:	61 c0       	rjmp	.+194    	; 0xb052 <follow_path+0x18e>
    af90:	ef 81       	ldd	r30, Y+7	; 0x07
    af92:	f8 85       	ldd	r31, Y+8	; 0x08
    af94:	ef 3f       	cpi	r30, 0xFF	; 255
    af96:	f1 05       	cpc	r31, r1
    af98:	09 f4       	brne	.+2      	; 0xaf9c <follow_path+0xd8>
    af9a:	9f c1       	rjmp	.+830    	; 0xb2da <follow_path+0x416>
    af9c:	31 96       	adiw	r30, 0x01	; 1
    af9e:	f8 87       	std	Y+8, r31	; 0x08
    afa0:	ef 83       	std	Y+7, r30	; 0x07
    afa2:	d6 01       	movw	r26, r12
    afa4:	8d 93       	st	X+, r24
    afa6:	9d 93       	st	X+, r25
    afa8:	6d 01       	movw	r12, r26
    afaa:	bf ef       	ldi	r27, 0xFF	; 255
    afac:	eb 1a       	sub	r14, r27
    afae:	fb 0a       	sbc	r15, r27
    afb0:	f7 01       	movw	r30, r14
    afb2:	31 97       	sbiw	r30, 0x01	; 1
    afb4:	80 81       	ld	r24, Z
    afb6:	90 e0       	ldi	r25, 0x00	; 0
    afb8:	00 97       	sbiw	r24, 0x00	; 0
    afba:	81 f6       	brne	.-96     	; 0xaf5c <follow_path+0x98>
    afbc:	74 e0       	ldi	r23, 0x04	; 4
    afbe:	37 2e       	mov	r3, r23
    afc0:	2f 81       	ldd	r18, Y+7	; 0x07
    afc2:	38 85       	ldd	r19, Y+8	; 0x08
    afc4:	22 0f       	add	r18, r18
    afc6:	33 1f       	adc	r19, r19
    afc8:	8f 81       	ldd	r24, Y+7	; 0x07
    afca:	98 85       	ldd	r25, Y+8	; 0x08
    afcc:	01 97       	sbiw	r24, 0x01	; 1
    afce:	09 f0       	breq	.+2      	; 0xafd2 <follow_path+0x10e>
    afd0:	51 c0       	rjmp	.+162    	; 0xb074 <follow_path+0x1b0>
    afd2:	d5 01       	movw	r26, r10
    afd4:	8d 91       	ld	r24, X+
    afd6:	9c 91       	ld	r25, X
    afd8:	8e 97       	sbiw	r24, 0x2e	; 46
    afda:	09 f0       	breq	.+2      	; 0xafde <follow_path+0x11a>
    afdc:	57 c0       	rjmp	.+174    	; 0xb08c <follow_path+0x1c8>
    afde:	f9 01       	movw	r30, r18
    afe0:	ea 0d       	add	r30, r10
    afe2:	fb 1d       	adc	r31, r11
    afe4:	11 82       	std	Z+1, r1	; 0x01
    afe6:	10 82       	st	Z, r1
    afe8:	f8 01       	movw	r30, r16
    afea:	7c 96       	adiw	r30, 0x1c	; 28
    afec:	80 e0       	ldi	r24, 0x00	; 0
    afee:	90 e0       	ldi	r25, 0x00	; 0
    aff0:	2f 81       	ldd	r18, Y+7	; 0x07
    aff2:	38 85       	ldd	r19, Y+8	; 0x08
    aff4:	82 17       	cp	r24, r18
    aff6:	93 07       	cpc	r25, r19
    aff8:	08 f0       	brcs	.+2      	; 0xaffc <follow_path+0x138>
    affa:	4c c0       	rjmp	.+152    	; 0xb094 <follow_path+0x1d0>
    affc:	2e e2       	ldi	r18, 0x2E	; 46
    affe:	21 93       	st	Z+, r18
    b000:	01 96       	adiw	r24, 0x01	; 1
    b002:	8b 30       	cpi	r24, 0x0B	; 11
    b004:	91 05       	cpc	r25, r1
    b006:	a1 f7       	brne	.-24     	; 0xaff0 <follow_path+0x12c>
    b008:	83 2d       	mov	r24, r3
    b00a:	80 62       	ori	r24, 0x20	; 32
    b00c:	f8 01       	movw	r30, r16
    b00e:	87 a3       	std	Z+39, r24	; 0x27
    b010:	c8 01       	movw	r24, r16
    b012:	bc dc       	rcall	.-1672   	; 0xa98c <dir_find>
    b014:	f8 01       	movw	r30, r16
    b016:	27 a1       	ldd	r18, Z+39	; 0x27
    b018:	00 97       	sbiw	r24, 0x00	; 0
    b01a:	09 f4       	brne	.+2      	; 0xb01e <follow_path+0x15a>
    b01c:	6a c1       	rjmp	.+724    	; 0xb2f2 <follow_path+0x42e>
    b01e:	84 30       	cpi	r24, 0x04	; 4
    b020:	91 05       	cpc	r25, r1
    b022:	09 f0       	breq	.+2      	; 0xb026 <follow_path+0x162>
    b024:	87 c1       	rjmp	.+782    	; 0xb334 <follow_path+0x470>
    b026:	32 2f       	mov	r19, r18
    b028:	34 70       	andi	r19, 0x04	; 4
    b02a:	25 ff       	sbrs	r18, 5
    b02c:	5f c1       	rjmp	.+702    	; 0xb2ec <follow_path+0x428>
    b02e:	31 11       	cpse	r19, r1
    b030:	57 c1       	rjmp	.+686    	; 0xb2e0 <follow_path+0x41c>
    b032:	f8 86       	std	Y+8, r15	; 0x08
    b034:	ef 82       	std	Y+7, r14	; 0x07
    b036:	d8 01       	movw	r26, r16
    b038:	ed 91       	ld	r30, X+
    b03a:	fc 91       	ld	r31, X
    b03c:	a3 84       	ldd	r10, Z+11	; 0x0b
    b03e:	b4 84       	ldd	r11, Z+12	; 0x0c
    b040:	45 01       	movw	r8, r10
    b042:	65 01       	movw	r12, r10
    b044:	ef 80       	ldd	r14, Y+7	; 0x07
    b046:	f8 84       	ldd	r15, Y+8	; 0x08
    b048:	18 86       	std	Y+8, r1	; 0x08
    b04a:	1f 82       	std	Y+7, r1	; 0x07
    b04c:	ae cf       	rjmp	.-164    	; 0xafaa <follow_path+0xe6>
    b04e:	97 01       	movw	r18, r14
    b050:	06 c0       	rjmp	.+12     	; 0xb05e <follow_path+0x19a>
    b052:	30 e0       	ldi	r19, 0x00	; 0
    b054:	82 17       	cp	r24, r18
    b056:	93 07       	cpc	r25, r19
    b058:	09 f0       	breq	.+2      	; 0xb05c <follow_path+0x198>
    b05a:	97 cf       	rjmp	.-210    	; 0xaf8a <follow_path+0xc6>
    b05c:	3e c1       	rjmp	.+636    	; 0xb2da <follow_path+0x416>
    b05e:	79 01       	movw	r14, r18
    b060:	f9 01       	movw	r30, r18
    b062:	80 81       	ld	r24, Z
    b064:	2f 5f       	subi	r18, 0xFF	; 255
    b066:	3f 4f       	sbci	r19, 0xFF	; 255
    b068:	8f 32       	cpi	r24, 0x2F	; 47
    b06a:	c9 f3       	breq	.-14     	; 0xb05e <follow_path+0x19a>
    b06c:	8c 35       	cpi	r24, 0x5C	; 92
    b06e:	b9 f3       	breq	.-18     	; 0xb05e <follow_path+0x19a>
    b070:	31 2c       	mov	r3, r1
    b072:	a6 cf       	rjmp	.-180    	; 0xafc0 <follow_path+0xfc>
    b074:	ef 81       	ldd	r30, Y+7	; 0x07
    b076:	f8 85       	ldd	r31, Y+8	; 0x08
    b078:	32 97       	sbiw	r30, 0x02	; 2
    b07a:	41 f4       	brne	.+16     	; 0xb08c <follow_path+0x1c8>
    b07c:	f5 01       	movw	r30, r10
    b07e:	82 81       	ldd	r24, Z+2	; 0x02
    b080:	93 81       	ldd	r25, Z+3	; 0x03
    b082:	8e 97       	sbiw	r24, 0x2e	; 46
    b084:	19 f4       	brne	.+6      	; 0xb08c <follow_path+0x1c8>
    b086:	80 81       	ld	r24, Z
    b088:	91 81       	ldd	r25, Z+1	; 0x01
    b08a:	a6 cf       	rjmp	.-180    	; 0xafd8 <follow_path+0x114>
    b08c:	f9 01       	movw	r30, r18
    b08e:	ea 0d       	add	r30, r10
    b090:	fb 1d       	adc	r31, r11
    b092:	0d c0       	rjmp	.+26     	; 0xb0ae <follow_path+0x1ea>
    b094:	20 e2       	ldi	r18, 0x20	; 32
    b096:	b3 cf       	rjmp	.-154    	; 0xaffe <follow_path+0x13a>
    b098:	92 91       	ld	r25, -Z
    b09a:	82 91       	ld	r24, -Z
    b09c:	80 32       	cpi	r24, 0x20	; 32
    b09e:	91 05       	cpc	r25, r1
    b0a0:	59 f4       	brne	.+22     	; 0xb0b8 <follow_path+0x1f4>
    b0a2:	2f 81       	ldd	r18, Y+7	; 0x07
    b0a4:	38 85       	ldd	r19, Y+8	; 0x08
    b0a6:	21 50       	subi	r18, 0x01	; 1
    b0a8:	31 09       	sbc	r19, r1
    b0aa:	38 87       	std	Y+8, r19	; 0x08
    b0ac:	2f 83       	std	Y+7, r18	; 0x07
    b0ae:	8f 81       	ldd	r24, Y+7	; 0x07
    b0b0:	98 85       	ldd	r25, Y+8	; 0x08
    b0b2:	89 2b       	or	r24, r25
    b0b4:	89 f7       	brne	.-30     	; 0xb098 <follow_path+0x1d4>
    b0b6:	02 c0       	rjmp	.+4      	; 0xb0bc <follow_path+0x1f8>
    b0b8:	8e 97       	sbiw	r24, 0x2e	; 46
    b0ba:	99 f3       	breq	.-26     	; 0xb0a2 <follow_path+0x1de>
    b0bc:	ef 81       	ldd	r30, Y+7	; 0x07
    b0be:	f8 85       	ldd	r31, Y+8	; 0x08
    b0c0:	ee 0f       	add	r30, r30
    b0c2:	ff 1f       	adc	r31, r31
    b0c4:	ea 0d       	add	r30, r10
    b0c6:	fb 1d       	adc	r31, r11
    b0c8:	11 82       	std	Z+1, r1	; 0x01
    b0ca:	10 82       	st	Z, r1
    b0cc:	af 81       	ldd	r26, Y+7	; 0x07
    b0ce:	b8 85       	ldd	r27, Y+8	; 0x08
    b0d0:	ab 2b       	or	r26, r27
    b0d2:	09 f4       	brne	.+2      	; 0xb0d6 <follow_path+0x212>
    b0d4:	02 c1       	rjmp	.+516    	; 0xb2da <follow_path+0x416>
    b0d6:	61 2c       	mov	r6, r1
    b0d8:	71 2c       	mov	r7, r1
    b0da:	d4 01       	movw	r26, r8
    b0dc:	8d 91       	ld	r24, X+
    b0de:	9d 91       	ld	r25, X+
    b0e0:	4d 01       	movw	r8, r26
    b0e2:	80 32       	cpi	r24, 0x20	; 32
    b0e4:	91 05       	cpc	r25, r1
    b0e6:	21 f4       	brne	.+8      	; 0xb0f0 <follow_path+0x22c>
    b0e8:	bf ef       	ldi	r27, 0xFF	; 255
    b0ea:	6b 1a       	sub	r6, r27
    b0ec:	7b 0a       	sbc	r7, r27
    b0ee:	f5 cf       	rjmp	.-22     	; 0xb0da <follow_path+0x216>
    b0f0:	61 14       	cp	r6, r1
    b0f2:	71 04       	cpc	r7, r1
    b0f4:	11 f4       	brne	.+4      	; 0xb0fa <follow_path+0x236>
    b0f6:	8e 97       	sbiw	r24, 0x2e	; 46
    b0f8:	61 f4       	brne	.+24     	; 0xb112 <follow_path+0x24e>
    b0fa:	b3 2d       	mov	r27, r3
    b0fc:	b3 60       	ori	r27, 0x03	; 3
    b0fe:	3b 2e       	mov	r3, r27
    b100:	08 c0       	rjmp	.+16     	; 0xb112 <follow_path+0x24e>
    b102:	2f 81       	ldd	r18, Y+7	; 0x07
    b104:	38 85       	ldd	r19, Y+8	; 0x08
    b106:	21 50       	subi	r18, 0x01	; 1
    b108:	31 09       	sbc	r19, r1
    b10a:	38 87       	std	Y+8, r19	; 0x08
    b10c:	2f 83       	std	Y+7, r18	; 0x07
    b10e:	23 2b       	or	r18, r19
    b110:	21 f0       	breq	.+8      	; 0xb11a <follow_path+0x256>
    b112:	92 91       	ld	r25, -Z
    b114:	82 91       	ld	r24, -Z
    b116:	8e 97       	sbiw	r24, 0x2e	; 46
    b118:	a1 f7       	brne	.-24     	; 0xb102 <follow_path+0x23e>
    b11a:	4b e0       	ldi	r20, 0x0B	; 11
    b11c:	50 e0       	ldi	r21, 0x00	; 0
    b11e:	60 e2       	ldi	r22, 0x20	; 32
    b120:	70 e0       	ldi	r23, 0x00	; 0
    b122:	8b 81       	ldd	r24, Y+3	; 0x03
    b124:	9c 81       	ldd	r25, Y+4	; 0x04
    b126:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <mem_set>
    b12a:	48 e0       	ldi	r20, 0x08	; 8
    b12c:	84 2e       	mov	r8, r20
    b12e:	91 2c       	mov	r9, r1
    b130:	c1 2c       	mov	r12, r1
    b132:	d1 2c       	mov	r13, r1
    b134:	21 2c       	mov	r2, r1
    b136:	23 01       	movw	r4, r6
    b138:	3f ef       	ldi	r19, 0xFF	; 255
    b13a:	43 1a       	sub	r4, r19
    b13c:	53 0a       	sbc	r5, r19
    b13e:	66 0c       	add	r6, r6
    b140:	77 1c       	adc	r7, r7
    b142:	f5 01       	movw	r30, r10
    b144:	e6 0d       	add	r30, r6
    b146:	f7 1d       	adc	r31, r7
    b148:	80 81       	ld	r24, Z
    b14a:	91 81       	ldd	r25, Z+1	; 0x01
    b14c:	00 97       	sbiw	r24, 0x00	; 0
    b14e:	09 f4       	brne	.+2      	; 0xb152 <follow_path+0x28e>
    b150:	9e c0       	rjmp	.+316    	; 0xb28e <follow_path+0x3ca>
    b152:	80 32       	cpi	r24, 0x20	; 32
    b154:	91 05       	cpc	r25, r1
    b156:	41 f0       	breq	.+16     	; 0xb168 <follow_path+0x2a4>
    b158:	8e 32       	cpi	r24, 0x2E	; 46
    b15a:	91 05       	cpc	r25, r1
    b15c:	51 f4       	brne	.+20     	; 0xb172 <follow_path+0x2ae>
    b15e:	8f 81       	ldd	r24, Y+7	; 0x07
    b160:	98 85       	ldd	r25, Y+8	; 0x08
    b162:	84 15       	cp	r24, r4
    b164:	95 05       	cpc	r25, r5
    b166:	71 f0       	breq	.+28     	; 0xb184 <follow_path+0x2c0>
    b168:	93 2d       	mov	r25, r3
    b16a:	93 60       	ori	r25, 0x03	; 3
    b16c:	39 2e       	mov	r3, r25
    b16e:	32 01       	movw	r6, r4
    b170:	e2 cf       	rjmp	.-60     	; 0xb136 <follow_path+0x272>
    b172:	c8 14       	cp	r12, r8
    b174:	d9 04       	cpc	r13, r9
    b176:	50 f4       	brcc	.+20     	; 0xb18c <follow_path+0x2c8>
    b178:	af 81       	ldd	r26, Y+7	; 0x07
    b17a:	b8 85       	ldd	r27, Y+8	; 0x08
    b17c:	a4 15       	cp	r26, r4
    b17e:	b5 05       	cpc	r27, r5
    b180:	49 f5       	brne	.+82     	; 0xb1d4 <follow_path+0x310>
    b182:	d2 c0       	rjmp	.+420    	; 0xb328 <follow_path+0x464>
    b184:	c8 14       	cp	r12, r8
    b186:	d9 04       	cpc	r13, r9
    b188:	08 f4       	brcc	.+2      	; 0xb18c <follow_path+0x2c8>
    b18a:	ce c0       	rjmp	.+412    	; 0xb328 <follow_path+0x464>
    b18c:	bb e0       	ldi	r27, 0x0B	; 11
    b18e:	8b 16       	cp	r8, r27
    b190:	91 04       	cpc	r9, r1
    b192:	39 f4       	brne	.+14     	; 0xb1a2 <follow_path+0x2de>
    b194:	e3 2d       	mov	r30, r3
    b196:	e3 60       	ori	r30, 0x03	; 3
    b198:	3e 2e       	mov	r3, r30
    b19a:	2b e0       	ldi	r18, 0x0B	; 11
    b19c:	82 2e       	mov	r8, r18
    b19e:	91 2c       	mov	r9, r1
    b1a0:	76 c0       	rjmp	.+236    	; 0xb28e <follow_path+0x3ca>
    b1a2:	2f 81       	ldd	r18, Y+7	; 0x07
    b1a4:	38 85       	ldd	r19, Y+8	; 0x08
    b1a6:	24 15       	cp	r18, r4
    b1a8:	35 05       	cpc	r19, r5
    b1aa:	49 f0       	breq	.+18     	; 0xb1be <follow_path+0x2fa>
    b1ac:	33 2d       	mov	r19, r3
    b1ae:	33 60       	ori	r19, 0x03	; 3
    b1b0:	33 2e       	mov	r3, r19
    b1b2:	8f 81       	ldd	r24, Y+7	; 0x07
    b1b4:	98 85       	ldd	r25, Y+8	; 0x08
    b1b6:	84 15       	cp	r24, r4
    b1b8:	95 05       	cpc	r25, r5
    b1ba:	08 f4       	brcc	.+2      	; 0xb1be <follow_path+0x2fa>
    b1bc:	68 c0       	rjmp	.+208    	; 0xb28e <follow_path+0x3ca>
    b1be:	22 0c       	add	r2, r2
    b1c0:	22 0c       	add	r2, r2
    b1c2:	4f 80       	ldd	r4, Y+7	; 0x07
    b1c4:	58 84       	ldd	r5, Y+8	; 0x08
    b1c6:	8b e0       	ldi	r24, 0x0B	; 11
    b1c8:	88 2e       	mov	r8, r24
    b1ca:	91 2c       	mov	r9, r1
    b1cc:	98 e0       	ldi	r25, 0x08	; 8
    b1ce:	c9 2e       	mov	r12, r25
    b1d0:	d1 2c       	mov	r13, r1
    b1d2:	cd cf       	rjmp	.-102    	; 0xb16e <follow_path+0x2aa>
    b1d4:	80 38       	cpi	r24, 0x80	; 128
    b1d6:	91 05       	cpc	r25, r1
    b1d8:	70 f1       	brcs	.+92     	; 0xb236 <follow_path+0x372>
    b1da:	a3 2d       	mov	r26, r3
    b1dc:	a2 60       	ori	r26, 0x02	; 2
    b1de:	7a 2e       	mov	r7, r26
    b1e0:	bc 01       	movw	r22, r24
    b1e2:	80 e0       	ldi	r24, 0x00	; 0
    b1e4:	90 e0       	ldi	r25, 0x00	; 0
    b1e6:	45 eb       	ldi	r20, 0xB5	; 181
    b1e8:	51 e0       	ldi	r21, 0x01	; 1
    b1ea:	0e 94 16 69 	call	0xd22c	; 0xd22c <ff_uni2oem>
    b1ee:	87 ff       	sbrs	r24, 7
    b1f0:	08 c0       	rjmp	.+16     	; 0xb202 <follow_path+0x33e>
    b1f2:	8f 77       	andi	r24, 0x7F	; 127
    b1f4:	99 27       	eor	r25, r25
    b1f6:	fc 01       	movw	r30, r24
    b1f8:	e5 59       	subi	r30, 0x95	; 149
    b1fa:	fb 4f       	sbci	r31, 0xFB	; 251
    b1fc:	80 81       	ld	r24, Z
    b1fe:	90 e0       	ldi	r25, 0x00	; 0
    b200:	17 c0       	rjmp	.+46     	; 0xb230 <follow_path+0x36c>
    b202:	8f 3f       	cpi	r24, 0xFF	; 255
    b204:	91 05       	cpc	r25, r1
    b206:	a1 f0       	breq	.+40     	; 0xb230 <follow_path+0x36c>
    b208:	98 f0       	brcs	.+38     	; 0xb230 <follow_path+0x36c>
    b20a:	94 01       	movw	r18, r8
    b20c:	21 50       	subi	r18, 0x01	; 1
    b20e:	31 09       	sbc	r19, r1
    b210:	c2 16       	cp	r12, r18
    b212:	d3 06       	cpc	r13, r19
    b214:	28 f0       	brcs	.+10     	; 0xb220 <follow_path+0x35c>
    b216:	b3 2d       	mov	r27, r3
    b218:	b3 60       	ori	r27, 0x03	; 3
    b21a:	3b 2e       	mov	r3, r27
    b21c:	64 01       	movw	r12, r8
    b21e:	a7 cf       	rjmp	.-178    	; 0xb16e <follow_path+0x2aa>
    b220:	f8 01       	movw	r30, r16
    b222:	ec 0d       	add	r30, r12
    b224:	fd 1d       	adc	r31, r13
    b226:	94 8f       	std	Z+28, r25	; 0x1c
    b228:	f6 01       	movw	r30, r12
    b22a:	31 96       	adiw	r30, 0x01	; 1
    b22c:	6f 01       	movw	r12, r30
    b22e:	26 c0       	rjmp	.+76     	; 0xb27c <follow_path+0x3b8>
    b230:	00 97       	sbiw	r24, 0x00	; 0
    b232:	59 f0       	breq	.+22     	; 0xb24a <follow_path+0x386>
    b234:	01 c0       	rjmp	.+2      	; 0xb238 <follow_path+0x374>
    b236:	73 2c       	mov	r7, r3
    b238:	e0 e3       	ldi	r30, 0x30	; 48
    b23a:	f4 e0       	ldi	r31, 0x04	; 4
    b23c:	21 91       	ld	r18, Z+
    b23e:	22 23       	and	r18, r18
    b240:	51 f0       	breq	.+20     	; 0xb256 <follow_path+0x392>
    b242:	30 e0       	ldi	r19, 0x00	; 0
    b244:	82 17       	cp	r24, r18
    b246:	93 07       	cpc	r25, r19
    b248:	c9 f7       	brne	.-14     	; 0xb23c <follow_path+0x378>
    b24a:	f7 2d       	mov	r31, r7
    b24c:	f3 60       	ori	r31, 0x03	; 3
    b24e:	7f 2e       	mov	r7, r31
    b250:	8f e5       	ldi	r24, 0x5F	; 95
    b252:	90 e0       	ldi	r25, 0x00	; 0
    b254:	13 c0       	rjmp	.+38     	; 0xb27c <follow_path+0x3b8>
    b256:	9c 01       	movw	r18, r24
    b258:	21 54       	subi	r18, 0x41	; 65
    b25a:	31 09       	sbc	r19, r1
    b25c:	2a 31       	cpi	r18, 0x1A	; 26
    b25e:	31 05       	cpc	r19, r1
    b260:	18 f4       	brcc	.+6      	; 0xb268 <follow_path+0x3a4>
    b262:	22 2d       	mov	r18, r2
    b264:	22 60       	ori	r18, 0x02	; 2
    b266:	22 2e       	mov	r2, r18
    b268:	9c 01       	movw	r18, r24
    b26a:	21 56       	subi	r18, 0x61	; 97
    b26c:	31 09       	sbc	r19, r1
    b26e:	2a 31       	cpi	r18, 0x1A	; 26
    b270:	31 05       	cpc	r19, r1
    b272:	20 f4       	brcc	.+8      	; 0xb27c <follow_path+0x3b8>
    b274:	32 2d       	mov	r19, r2
    b276:	31 60       	ori	r19, 0x01	; 1
    b278:	23 2e       	mov	r2, r19
    b27a:	80 97       	sbiw	r24, 0x20	; 32
    b27c:	f8 01       	movw	r30, r16
    b27e:	ec 0d       	add	r30, r12
    b280:	fd 1d       	adc	r31, r13
    b282:	84 8f       	std	Z+28, r24	; 0x1c
    b284:	c6 01       	movw	r24, r12
    b286:	01 96       	adiw	r24, 0x01	; 1
    b288:	6c 01       	movw	r12, r24
    b28a:	37 2c       	mov	r3, r7
    b28c:	70 cf       	rjmp	.-288    	; 0xb16e <follow_path+0x2aa>
    b28e:	f8 01       	movw	r30, r16
    b290:	84 8d       	ldd	r24, Z+28	; 0x1c
    b292:	85 3e       	cpi	r24, 0xE5	; 229
    b294:	11 f4       	brne	.+4      	; 0xb29a <follow_path+0x3d6>
    b296:	25 e0       	ldi	r18, 0x05	; 5
    b298:	24 8f       	std	Z+28, r18	; 0x1c
    b29a:	38 e0       	ldi	r19, 0x08	; 8
    b29c:	83 16       	cp	r8, r19
    b29e:	91 04       	cpc	r9, r1
    b2a0:	11 f4       	brne	.+4      	; 0xb2a6 <follow_path+0x3e2>
    b2a2:	22 0c       	add	r2, r2
    b2a4:	22 0c       	add	r2, r2
    b2a6:	82 2d       	mov	r24, r2
    b2a8:	8c 70       	andi	r24, 0x0C	; 12
    b2aa:	8c 30       	cpi	r24, 0x0C	; 12
    b2ac:	21 f0       	breq	.+8      	; 0xb2b6 <follow_path+0x3f2>
    b2ae:	82 2d       	mov	r24, r2
    b2b0:	83 70       	andi	r24, 0x03	; 3
    b2b2:	83 30       	cpi	r24, 0x03	; 3
    b2b4:	19 f4       	brne	.+6      	; 0xb2bc <follow_path+0x3f8>
    b2b6:	83 2d       	mov	r24, r3
    b2b8:	82 60       	ori	r24, 0x02	; 2
    b2ba:	38 2e       	mov	r3, r24
    b2bc:	31 fc       	sbrc	r3, 1
    b2be:	0a c0       	rjmp	.+20     	; 0xb2d4 <follow_path+0x410>
    b2c0:	20 fe       	sbrs	r2, 0
    b2c2:	03 c0       	rjmp	.+6      	; 0xb2ca <follow_path+0x406>
    b2c4:	93 2d       	mov	r25, r3
    b2c6:	90 61       	ori	r25, 0x10	; 16
    b2c8:	39 2e       	mov	r3, r25
    b2ca:	22 fe       	sbrs	r2, 2
    b2cc:	03 c0       	rjmp	.+6      	; 0xb2d4 <follow_path+0x410>
    b2ce:	a3 2d       	mov	r26, r3
    b2d0:	a8 60       	ori	r26, 0x08	; 8
    b2d2:	3a 2e       	mov	r3, r26
    b2d4:	f8 01       	movw	r30, r16
    b2d6:	37 a2       	std	Z+39, r3	; 0x27
    b2d8:	9b ce       	rjmp	.-714    	; 0xb010 <follow_path+0x14c>
    b2da:	86 e0       	ldi	r24, 0x06	; 6
    b2dc:	90 e0       	ldi	r25, 0x00	; 0
    b2de:	2a c0       	rjmp	.+84     	; 0xb334 <follow_path+0x470>
    b2e0:	80 e8       	ldi	r24, 0x80	; 128
    b2e2:	f8 01       	movw	r30, r16
    b2e4:	87 a3       	std	Z+39, r24	; 0x27
    b2e6:	80 e0       	ldi	r24, 0x00	; 0
    b2e8:	90 e0       	ldi	r25, 0x00	; 0
    b2ea:	24 c0       	rjmp	.+72     	; 0xb334 <follow_path+0x470>
    b2ec:	33 23       	and	r19, r19
    b2ee:	c9 f0       	breq	.+50     	; 0xb322 <follow_path+0x45e>
    b2f0:	21 c0       	rjmp	.+66     	; 0xb334 <follow_path+0x470>
    b2f2:	22 fd       	sbrc	r18, 2
    b2f4:	1f c0       	rjmp	.+62     	; 0xb334 <follow_path+0x470>
    b2f6:	f8 01       	movw	r30, r16
    b2f8:	84 81       	ldd	r24, Z+4	; 0x04
    b2fa:	84 ff       	sbrs	r24, 4
    b2fc:	12 c0       	rjmp	.+36     	; 0xb322 <follow_path+0x45e>
    b2fe:	66 85       	ldd	r22, Z+14	; 0x0e
    b300:	77 85       	ldd	r23, Z+15	; 0x0f
    b302:	71 70       	andi	r23, 0x01	; 1
    b304:	2d 81       	ldd	r18, Y+5	; 0x05
    b306:	3e 81       	ldd	r19, Y+6	; 0x06
    b308:	62 0f       	add	r22, r18
    b30a:	73 1f       	adc	r23, r19
    b30c:	a9 81       	ldd	r26, Y+1	; 0x01
    b30e:	ba 81       	ldd	r27, Y+2	; 0x02
    b310:	8c 91       	ld	r24, X
    b312:	0e 94 0b 4a 	call	0x9416	; 0x9416 <ld_clust.isra.3>
    b316:	f8 01       	movw	r30, r16
    b318:	66 83       	std	Z+6, r22	; 0x06
    b31a:	77 83       	std	Z+7, r23	; 0x07
    b31c:	80 87       	std	Z+8, r24	; 0x08
    b31e:	91 87       	std	Z+9, r25	; 0x09
    b320:	88 ce       	rjmp	.-752    	; 0xb032 <follow_path+0x16e>
    b322:	85 e0       	ldi	r24, 0x05	; 5
    b324:	90 e0       	ldi	r25, 0x00	; 0
    b326:	06 c0       	rjmp	.+12     	; 0xb334 <follow_path+0x470>
    b328:	fb e0       	ldi	r31, 0x0B	; 11
    b32a:	8f 16       	cp	r8, r31
    b32c:	91 04       	cpc	r9, r1
    b32e:	09 f0       	breq	.+2      	; 0xb332 <follow_path+0x46e>
    b330:	46 cf       	rjmp	.-372    	; 0xb1be <follow_path+0x2fa>
    b332:	30 cf       	rjmp	.-416    	; 0xb194 <follow_path+0x2d0>
    b334:	28 96       	adiw	r28, 0x08	; 8
    b336:	e2 e1       	ldi	r30, 0x12	; 18
    b338:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0000b33c <f_mount>:
    b33c:	a6 e0       	ldi	r26, 0x06	; 6
    b33e:	b0 e0       	ldi	r27, 0x00	; 0
    b340:	e4 ea       	ldi	r30, 0xA4	; 164
    b342:	f9 e5       	ldi	r31, 0x59	; 89
    b344:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__prologue_saves__+0x1e>
    b348:	9c 83       	std	Y+4, r25	; 0x04
    b34a:	8b 83       	std	Y+3, r24	; 0x03
    b34c:	7e 83       	std	Y+6, r23	; 0x06
    b34e:	6d 83       	std	Y+5, r22	; 0x05
    b350:	14 2f       	mov	r17, r20
    b352:	7a 83       	std	Y+2, r23	; 0x02
    b354:	69 83       	std	Y+1, r22	; 0x01
    b356:	ce 01       	movw	r24, r28
    b358:	01 96       	adiw	r24, 0x01	; 1
    b35a:	0e 94 7e 48 	call	0x90fc	; 0x90fc <get_ldnumber>
    b35e:	97 fd       	sbrc	r25, 7
    b360:	20 c0       	rjmp	.+64     	; 0xb3a2 <f_mount+0x66>
    b362:	88 0f       	add	r24, r24
    b364:	99 1f       	adc	r25, r25
    b366:	fc 01       	movw	r30, r24
    b368:	ef 5d       	subi	r30, 0xDF	; 223
    b36a:	f7 4e       	sbci	r31, 0xE7	; 231
    b36c:	01 90       	ld	r0, Z+
    b36e:	f0 81       	ld	r31, Z
    b370:	e0 2d       	mov	r30, r0
    b372:	30 97       	sbiw	r30, 0x00	; 0
    b374:	09 f0       	breq	.+2      	; 0xb378 <f_mount+0x3c>
    b376:	10 82       	st	Z, r1
    b378:	eb 81       	ldd	r30, Y+3	; 0x03
    b37a:	fc 81       	ldd	r31, Y+4	; 0x04
    b37c:	30 97       	sbiw	r30, 0x00	; 0
    b37e:	09 f0       	breq	.+2      	; 0xb382 <f_mount+0x46>
    b380:	10 82       	st	Z, r1
    b382:	dc 01       	movw	r26, r24
    b384:	af 5d       	subi	r26, 0xDF	; 223
    b386:	b7 4e       	sbci	r27, 0xE7	; 231
    b388:	ed 93       	st	X+, r30
    b38a:	fc 93       	st	X, r31
    b38c:	11 23       	and	r17, r17
    b38e:	61 f0       	breq	.+24     	; 0xb3a8 <f_mount+0x6c>
    b390:	40 e0       	ldi	r20, 0x00	; 0
    b392:	be 01       	movw	r22, r28
    b394:	6d 5f       	subi	r22, 0xFD	; 253
    b396:	7f 4f       	sbci	r23, 0xFF	; 255
    b398:	ce 01       	movw	r24, r28
    b39a:	05 96       	adiw	r24, 0x05	; 5
    b39c:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
    b3a0:	05 c0       	rjmp	.+10     	; 0xb3ac <f_mount+0x70>
    b3a2:	8b e0       	ldi	r24, 0x0B	; 11
    b3a4:	90 e0       	ldi	r25, 0x00	; 0
    b3a6:	02 c0       	rjmp	.+4      	; 0xb3ac <f_mount+0x70>
    b3a8:	80 e0       	ldi	r24, 0x00	; 0
    b3aa:	90 e0       	ldi	r25, 0x00	; 0
    b3ac:	26 96       	adiw	r28, 0x06	; 6
    b3ae:	e3 e0       	ldi	r30, 0x03	; 3
    b3b0:	0c 94 41 e7 	jmp	0x1ce82	; 0x1ce82 <__epilogue_restores__+0x1e>

0000b3b4 <f_open>:
    b3b4:	a6 e3       	ldi	r26, 0x36	; 54
    b3b6:	b0 e0       	ldi	r27, 0x00	; 0
    b3b8:	e0 ee       	ldi	r30, 0xE0	; 224
    b3ba:	f9 e5       	ldi	r31, 0x59	; 89
    b3bc:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    b3c0:	7a ab       	std	Y+50, r23	; 0x32
    b3c2:	69 ab       	std	Y+49, r22	; 0x31
    b3c4:	00 97       	sbiw	r24, 0x00	; 0
    b3c6:	09 f4       	brne	.+2      	; 0xb3ca <f_open+0x16>
    b3c8:	93 c1       	rjmp	.+806    	; 0xb6f0 <f_open+0x33c>
    b3ca:	74 2e       	mov	r7, r20
    b3cc:	7c 01       	movw	r14, r24
    b3ce:	24 2f       	mov	r18, r20
    b3d0:	2f 73       	andi	r18, 0x3F	; 63
    b3d2:	32 2e       	mov	r3, r18
    b3d4:	42 2f       	mov	r20, r18
    b3d6:	be 01       	movw	r22, r28
    b3d8:	61 5d       	subi	r22, 0xD1	; 209
    b3da:	7f 4f       	sbci	r23, 0xFF	; 255
    b3dc:	ce 01       	movw	r24, r28
    b3de:	c1 96       	adiw	r24, 0x31	; 49
    b3e0:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
    b3e4:	00 97       	sbiw	r24, 0x00	; 0
    b3e6:	09 f0       	breq	.+2      	; 0xb3ea <f_open+0x36>
    b3e8:	7d c1       	rjmp	.+762    	; 0xb6e4 <f_open+0x330>
    b3ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    b3ec:	98 a9       	ldd	r25, Y+48	; 0x30
    b3ee:	9a 83       	std	Y+2, r25	; 0x02
    b3f0:	89 83       	std	Y+1, r24	; 0x01
    b3f2:	80 e0       	ldi	r24, 0x00	; 0
    b3f4:	92 e0       	ldi	r25, 0x02	; 2
    b3f6:	0e 94 10 69 	call	0xd220	; 0xd220 <ff_memalloc>
    b3fa:	5c 01       	movw	r10, r24
    b3fc:	00 97       	sbiw	r24, 0x00	; 0
    b3fe:	09 f4       	brne	.+2      	; 0xb402 <f_open+0x4e>
    b400:	79 c1       	rjmp	.+754    	; 0xb6f4 <f_open+0x340>
    b402:	ef a5       	ldd	r30, Y+47	; 0x2f
    b404:	f8 a9       	ldd	r31, Y+48	; 0x30
    b406:	94 87       	std	Z+12, r25	; 0x0c
    b408:	83 87       	std	Z+11, r24	; 0x0b
    b40a:	69 a9       	ldd	r22, Y+49	; 0x31
    b40c:	7a a9       	ldd	r23, Y+50	; 0x32
    b40e:	ce 01       	movw	r24, r28
    b410:	01 96       	adiw	r24, 0x01	; 1
    b412:	58 dd       	rcall	.-1360   	; 0xaec4 <follow_path>
    b414:	8c 01       	movw	r16, r24
    b416:	89 2b       	or	r24, r25
    b418:	29 f4       	brne	.+10     	; 0xb424 <f_open+0x70>
    b41a:	88 a5       	ldd	r24, Y+40	; 0x28
    b41c:	87 ff       	sbrs	r24, 7
    b41e:	02 c0       	rjmp	.+4      	; 0xb424 <f_open+0x70>
    b420:	06 e0       	ldi	r16, 0x06	; 6
    b422:	10 e0       	ldi	r17, 0x00	; 0
    b424:	87 2d       	mov	r24, r7
    b426:	8c 71       	andi	r24, 0x1C	; 28
    b428:	09 f4       	brne	.+2      	; 0xb42c <f_open+0x78>
    b42a:	75 c0       	rjmp	.+234    	; 0xb516 <f_open+0x162>
    b42c:	01 15       	cp	r16, r1
    b42e:	11 05       	cpc	r17, r1
    b430:	79 f0       	breq	.+30     	; 0xb450 <f_open+0x9c>
    b432:	04 30       	cpi	r16, 0x04	; 4
    b434:	11 05       	cpc	r17, r1
    b436:	09 f0       	breq	.+2      	; 0xb43a <f_open+0x86>
    b438:	6d c1       	rjmp	.+730    	; 0xb714 <f_open+0x360>
    b43a:	ce 01       	movw	r24, r28
    b43c:	01 96       	adiw	r24, 0x01	; 1
    b43e:	b4 db       	rcall	.-2200   	; 0xaba8 <dir_register>
    b440:	8c 01       	movw	r16, r24
    b442:	89 2b       	or	r24, r25
    b444:	09 f0       	breq	.+2      	; 0xb448 <f_open+0x94>
    b446:	66 c1       	rjmp	.+716    	; 0xb714 <f_open+0x360>
    b448:	33 2d       	mov	r19, r3
    b44a:	38 60       	ori	r19, 0x08	; 8
    b44c:	33 2e       	mov	r3, r19
    b44e:	06 c0       	rjmp	.+12     	; 0xb45c <f_open+0xa8>
    b450:	8d 81       	ldd	r24, Y+5	; 0x05
    b452:	81 71       	andi	r24, 0x11	; 17
    b454:	09 f0       	breq	.+2      	; 0xb458 <f_open+0xa4>
    b456:	5c c1       	rjmp	.+696    	; 0xb710 <f_open+0x35c>
    b458:	72 fc       	sbrc	r7, 2
    b45a:	51 c1       	rjmp	.+674    	; 0xb6fe <f_open+0x34a>
    b45c:	33 fe       	sbrs	r3, 3
    b45e:	6b c0       	rjmp	.+214    	; 0xb536 <f_open+0x182>
    b460:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b462:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b464:	ef a5       	ldd	r30, Y+47	; 0x2f
    b466:	f8 a9       	ldd	r31, Y+48	; 0x30
    b468:	b8 01       	movw	r22, r16
    b46a:	80 81       	ld	r24, Z
    b46c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <ld_clust.isra.3>
    b470:	2b 01       	movw	r4, r22
    b472:	3c 01       	movw	r6, r24
    b474:	0e 94 91 70 	call	0xe122	; 0xe122 <get_fattime>
    b478:	ab 01       	movw	r20, r22
    b47a:	bc 01       	movw	r22, r24
    b47c:	c8 01       	movw	r24, r16
    b47e:	0e 96       	adiw	r24, 0x0e	; 14
    b480:	0e 94 ed 47 	call	0x8fda	; 0x8fda <st_dword>
    b484:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b486:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b488:	80 e2       	ldi	r24, 0x20	; 32
    b48a:	83 87       	std	Z+11, r24	; 0x0b
    b48c:	af a5       	ldd	r26, Y+47	; 0x2f
    b48e:	b8 a9       	ldd	r27, Y+48	; 0x30
    b490:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b492:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b494:	12 8e       	std	Z+26, r1	; 0x1a
    b496:	13 8e       	std	Z+27, r1	; 0x1b
    b498:	8c 91       	ld	r24, X
    b49a:	83 30       	cpi	r24, 0x03	; 3
    b49c:	11 f4       	brne	.+4      	; 0xb4a2 <f_open+0xee>
    b49e:	14 8a       	std	Z+20, r1	; 0x14
    b4a0:	15 8a       	std	Z+21, r1	; 0x15
    b4a2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b4a4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b4a6:	14 8e       	std	Z+28, r1	; 0x1c
    b4a8:	15 8e       	std	Z+29, r1	; 0x1d
    b4aa:	16 8e       	std	Z+30, r1	; 0x1e
    b4ac:	17 8e       	std	Z+31, r1	; 0x1f
    b4ae:	81 e0       	ldi	r24, 0x01	; 1
    b4b0:	fd 01       	movw	r30, r26
    b4b2:	83 83       	std	Z+3, r24	; 0x03
    b4b4:	41 14       	cp	r4, r1
    b4b6:	51 04       	cpc	r5, r1
    b4b8:	61 04       	cpc	r6, r1
    b4ba:	71 04       	cpc	r7, r1
    b4bc:	c9 f1       	breq	.+114    	; 0xb530 <f_open+0x17c>
    b4be:	21 a9       	ldd	r18, Z+49	; 0x31
    b4c0:	32 a9       	ldd	r19, Z+50	; 0x32
    b4c2:	43 a9       	ldd	r20, Z+51	; 0x33
    b4c4:	54 a9       	ldd	r21, Z+52	; 0x34
    b4c6:	2b ab       	std	Y+51, r18	; 0x33
    b4c8:	3c ab       	std	Y+52, r19	; 0x34
    b4ca:	4d ab       	std	Y+53, r20	; 0x35
    b4cc:	5e ab       	std	Y+54, r21	; 0x36
    b4ce:	00 e0       	ldi	r16, 0x00	; 0
    b4d0:	10 e0       	ldi	r17, 0x00	; 0
    b4d2:	98 01       	movw	r18, r16
    b4d4:	b3 01       	movw	r22, r6
    b4d6:	a2 01       	movw	r20, r4
    b4d8:	ce 01       	movw	r24, r28
    b4da:	01 96       	adiw	r24, 0x01	; 1
    b4dc:	0e 94 03 52 	call	0xa406	; 0xa406 <remove_chain>
    b4e0:	8c 01       	movw	r16, r24
    b4e2:	89 2b       	or	r24, r25
    b4e4:	09 f0       	breq	.+2      	; 0xb4e8 <f_open+0x134>
    b4e6:	16 c1       	rjmp	.+556    	; 0xb714 <f_open+0x360>
    b4e8:	4b a9       	ldd	r20, Y+51	; 0x33
    b4ea:	5c a9       	ldd	r21, Y+52	; 0x34
    b4ec:	6d a9       	ldd	r22, Y+53	; 0x35
    b4ee:	7e a9       	ldd	r23, Y+54	; 0x36
    b4f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    b4f2:	98 a9       	ldd	r25, Y+48	; 0x30
    b4f4:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    b4f8:	8c 01       	movw	r16, r24
    b4fa:	ef a5       	ldd	r30, Y+47	; 0x2f
    b4fc:	f8 a9       	ldd	r31, Y+48	; 0x30
    b4fe:	21 e0       	ldi	r18, 0x01	; 1
    b500:	42 1a       	sub	r4, r18
    b502:	51 08       	sbc	r5, r1
    b504:	61 08       	sbc	r6, r1
    b506:	71 08       	sbc	r7, r1
    b508:	45 86       	std	Z+13, r4	; 0x0d
    b50a:	56 86       	std	Z+14, r5	; 0x0e
    b50c:	67 86       	std	Z+15, r6	; 0x0f
    b50e:	70 8a       	std	Z+16, r7	; 0x10
    b510:	89 2b       	or	r24, r25
    b512:	61 f0       	breq	.+24     	; 0xb52c <f_open+0x178>
    b514:	ff c0       	rjmp	.+510    	; 0xb714 <f_open+0x360>
    b516:	01 15       	cp	r16, r1
    b518:	11 05       	cpc	r17, r1
    b51a:	09 f0       	breq	.+2      	; 0xb51e <f_open+0x16a>
    b51c:	fb c0       	rjmp	.+502    	; 0xb714 <f_open+0x360>
    b51e:	8d 81       	ldd	r24, Y+5	; 0x05
    b520:	84 fd       	sbrc	r24, 4
    b522:	f3 c0       	rjmp	.+486    	; 0xb70a <f_open+0x356>
    b524:	71 fe       	sbrs	r7, 1
    b526:	02 c0       	rjmp	.+4      	; 0xb52c <f_open+0x178>
    b528:	80 fd       	sbrc	r24, 0
    b52a:	f2 c0       	rjmp	.+484    	; 0xb710 <f_open+0x35c>
    b52c:	33 fe       	sbrs	r3, 3
    b52e:	03 c0       	rjmp	.+6      	; 0xb536 <f_open+0x182>
    b530:	33 2d       	mov	r19, r3
    b532:	30 64       	ori	r19, 0x40	; 64
    b534:	33 2e       	mov	r3, r19
    b536:	0f a5       	ldd	r16, Y+47	; 0x2f
    b538:	18 a9       	ldd	r17, Y+48	; 0x30
    b53a:	f8 01       	movw	r30, r16
    b53c:	81 a9       	ldd	r24, Z+49	; 0x31
    b53e:	92 a9       	ldd	r25, Z+50	; 0x32
    b540:	a3 a9       	ldd	r26, Z+51	; 0x33
    b542:	b4 a9       	ldd	r27, Z+52	; 0x34
    b544:	f7 01       	movw	r30, r14
    b546:	84 8f       	std	Z+28, r24	; 0x1c
    b548:	95 8f       	std	Z+29, r25	; 0x1d
    b54a:	a6 8f       	std	Z+30, r26	; 0x1e
    b54c:	b7 8f       	std	Z+31, r27	; 0x1f
    b54e:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b550:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b552:	71 a2       	std	Z+33, r7	; 0x21
    b554:	60 a2       	std	Z+32, r6	; 0x20
    b556:	b3 01       	movw	r22, r6
    b558:	f8 01       	movw	r30, r16
    b55a:	80 81       	ld	r24, Z
    b55c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <ld_clust.isra.3>
    b560:	f7 01       	movw	r30, r14
    b562:	66 83       	std	Z+6, r22	; 0x06
    b564:	77 83       	std	Z+7, r23	; 0x07
    b566:	80 87       	std	Z+8, r24	; 0x08
    b568:	91 87       	std	Z+9, r25	; 0x09
    b56a:	c3 01       	movw	r24, r6
    b56c:	4c 96       	adiw	r24, 0x1c	; 28
    b56e:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <ld_dword>
    b572:	f7 01       	movw	r30, r14
    b574:	62 87       	std	Z+10, r22	; 0x0a
    b576:	73 87       	std	Z+11, r23	; 0x0b
    b578:	84 87       	std	Z+12, r24	; 0x0c
    b57a:	95 87       	std	Z+13, r25	; 0x0d
    b57c:	13 a2       	std	Z+35, r1	; 0x23
    b57e:	12 a2       	std	Z+34, r1	; 0x22
    b580:	11 83       	std	Z+1, r17	; 0x01
    b582:	00 83       	st	Z, r16
    b584:	f8 01       	movw	r30, r16
    b586:	85 81       	ldd	r24, Z+5	; 0x05
    b588:	96 81       	ldd	r25, Z+6	; 0x06
    b58a:	f7 01       	movw	r30, r14
    b58c:	93 83       	std	Z+3, r25	; 0x03
    b58e:	82 83       	std	Z+2, r24	; 0x02
    b590:	36 86       	std	Z+14, r3	; 0x0e
    b592:	17 86       	std	Z+15, r1	; 0x0f
    b594:	10 8e       	std	Z+24, r1	; 0x18
    b596:	11 8e       	std	Z+25, r1	; 0x19
    b598:	12 8e       	std	Z+26, r1	; 0x1a
    b59a:	13 8e       	std	Z+27, r1	; 0x1b
    b59c:	10 8a       	std	Z+16, r1	; 0x10
    b59e:	11 8a       	std	Z+17, r1	; 0x11
    b5a0:	12 8a       	std	Z+18, r1	; 0x12
    b5a2:	13 8a       	std	Z+19, r1	; 0x13
    b5a4:	67 01       	movw	r12, r14
    b5a6:	f4 e2       	ldi	r31, 0x24	; 36
    b5a8:	cf 0e       	add	r12, r31
    b5aa:	d1 1c       	adc	r13, r1
    b5ac:	40 e0       	ldi	r20, 0x00	; 0
    b5ae:	52 e0       	ldi	r21, 0x02	; 2
    b5b0:	60 e0       	ldi	r22, 0x00	; 0
    b5b2:	70 e0       	ldi	r23, 0x00	; 0
    b5b4:	c6 01       	movw	r24, r12
    b5b6:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <mem_set>
    b5ba:	35 fc       	sbrc	r3, 5
    b5bc:	03 c0       	rjmp	.+6      	; 0xb5c4 <f_open+0x210>
    b5be:	00 e0       	ldi	r16, 0x00	; 0
    b5c0:	10 e0       	ldi	r17, 0x00	; 0
    b5c2:	89 c0       	rjmp	.+274    	; 0xb6d6 <f_open+0x322>
    b5c4:	f7 01       	movw	r30, r14
    b5c6:	62 84       	ldd	r6, Z+10	; 0x0a
    b5c8:	73 84       	ldd	r7, Z+11	; 0x0b
    b5ca:	84 84       	ldd	r8, Z+12	; 0x0c
    b5cc:	95 84       	ldd	r9, Z+13	; 0x0d
    b5ce:	61 14       	cp	r6, r1
    b5d0:	71 04       	cpc	r7, r1
    b5d2:	81 04       	cpc	r8, r1
    b5d4:	91 04       	cpc	r9, r1
    b5d6:	99 f3       	breq	.-26     	; 0xb5be <f_open+0x20a>
    b5d8:	60 8a       	std	Z+16, r6	; 0x10
    b5da:	71 8a       	std	Z+17, r7	; 0x11
    b5dc:	82 8a       	std	Z+18, r8	; 0x12
    b5de:	93 8a       	std	Z+19, r9	; 0x13
    b5e0:	ef a5       	ldd	r30, Y+47	; 0x2f
    b5e2:	f8 a9       	ldd	r31, Y+48	; 0x30
    b5e4:	21 84       	ldd	r2, Z+9	; 0x09
    b5e6:	32 84       	ldd	r3, Z+10	; 0x0a
    b5e8:	c1 01       	movw	r24, r2
    b5ea:	a0 e0       	ldi	r26, 0x00	; 0
    b5ec:	b0 e0       	ldi	r27, 0x00	; 0
    b5ee:	1c 01       	movw	r2, r24
    b5f0:	2d 01       	movw	r4, r26
    b5f2:	59 e0       	ldi	r21, 0x09	; 9
    b5f4:	22 0c       	add	r2, r2
    b5f6:	33 1c       	adc	r3, r3
    b5f8:	44 1c       	adc	r4, r4
    b5fa:	55 1c       	adc	r5, r5
    b5fc:	5a 95       	dec	r21
    b5fe:	d1 f7       	brne	.-12     	; 0xb5f4 <f_open+0x240>
    b600:	f7 01       	movw	r30, r14
    b602:	46 81       	ldd	r20, Z+6	; 0x06
    b604:	57 81       	ldd	r21, Z+7	; 0x07
    b606:	60 85       	ldd	r22, Z+8	; 0x08
    b608:	71 85       	ldd	r23, Z+9	; 0x09
    b60a:	26 14       	cp	r2, r6
    b60c:	37 04       	cpc	r3, r7
    b60e:	48 04       	cpc	r4, r8
    b610:	59 04       	cpc	r5, r9
    b612:	f0 f4       	brcc	.+60     	; 0xb650 <f_open+0x29c>
    b614:	f7 01       	movw	r30, r14
    b616:	80 81       	ld	r24, Z
    b618:	91 81       	ldd	r25, Z+1	; 0x01
    b61a:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <get_fat.isra.9>
    b61e:	ab 01       	movw	r20, r22
    b620:	bc 01       	movw	r22, r24
    b622:	d4 01       	movw	r26, r8
    b624:	c3 01       	movw	r24, r6
    b626:	82 19       	sub	r24, r2
    b628:	93 09       	sbc	r25, r3
    b62a:	a4 09       	sbc	r26, r4
    b62c:	b5 09       	sbc	r27, r5
    b62e:	3c 01       	movw	r6, r24
    b630:	4d 01       	movw	r8, r26
    b632:	42 30       	cpi	r20, 0x02	; 2
    b634:	51 05       	cpc	r21, r1
    b636:	61 05       	cpc	r22, r1
    b638:	71 05       	cpc	r23, r1
    b63a:	08 f4       	brcc	.+2      	; 0xb63e <f_open+0x28a>
    b63c:	63 c0       	rjmp	.+198    	; 0xb704 <f_open+0x350>
    b63e:	4f 3f       	cpi	r20, 0xFF	; 255
    b640:	ff ef       	ldi	r31, 0xFF	; 255
    b642:	5f 07       	cpc	r21, r31
    b644:	6f 07       	cpc	r22, r31
    b646:	7f 07       	cpc	r23, r31
    b648:	01 f7       	brne	.-64     	; 0xb60a <f_open+0x256>
    b64a:	01 e0       	ldi	r16, 0x01	; 1
    b64c:	10 e0       	ldi	r17, 0x00	; 0
    b64e:	02 c0       	rjmp	.+4      	; 0xb654 <f_open+0x2a0>
    b650:	00 e0       	ldi	r16, 0x00	; 0
    b652:	10 e0       	ldi	r17, 0x00	; 0
    b654:	f7 01       	movw	r30, r14
    b656:	44 8b       	std	Z+20, r20	; 0x14
    b658:	55 8b       	std	Z+21, r21	; 0x15
    b65a:	66 8b       	std	Z+22, r22	; 0x16
    b65c:	77 8b       	std	Z+23, r23	; 0x17
    b65e:	01 15       	cp	r16, r1
    b660:	11 05       	cpc	r17, r1
    b662:	c9 f5       	brne	.+114    	; 0xb6d6 <f_open+0x322>
    b664:	d4 01       	movw	r26, r8
    b666:	c3 01       	movw	r24, r6
    b668:	91 70       	andi	r25, 0x01	; 1
    b66a:	aa 27       	eor	r26, r26
    b66c:	bb 27       	eor	r27, r27
    b66e:	89 2b       	or	r24, r25
    b670:	8a 2b       	or	r24, r26
    b672:	8b 2b       	or	r24, r27
    b674:	09 f4       	brne	.+2      	; 0xb678 <f_open+0x2c4>
    b676:	a3 cf       	rjmp	.-186    	; 0xb5be <f_open+0x20a>
    b678:	4f a4       	ldd	r4, Y+47	; 0x2f
    b67a:	58 a8       	ldd	r5, Y+48	; 0x30
    b67c:	c2 01       	movw	r24, r4
    b67e:	0e 94 0b 48 	call	0x9016	; 0x9016 <clst2sect>
    b682:	61 15       	cp	r22, r1
    b684:	71 05       	cpc	r23, r1
    b686:	81 05       	cpc	r24, r1
    b688:	91 05       	cpc	r25, r1
    b68a:	19 f1       	breq	.+70     	; 0xb6d2 <f_open+0x31e>
    b68c:	94 01       	movw	r18, r8
    b68e:	83 01       	movw	r16, r6
    b690:	49 e0       	ldi	r20, 0x09	; 9
    b692:	36 95       	lsr	r19
    b694:	27 95       	ror	r18
    b696:	17 95       	ror	r17
    b698:	07 95       	ror	r16
    b69a:	4a 95       	dec	r20
    b69c:	d1 f7       	brne	.-12     	; 0xb692 <f_open+0x2de>
    b69e:	a9 01       	movw	r20, r18
    b6a0:	98 01       	movw	r18, r16
    b6a2:	26 0f       	add	r18, r22
    b6a4:	37 1f       	adc	r19, r23
    b6a6:	48 1f       	adc	r20, r24
    b6a8:	59 1f       	adc	r21, r25
    b6aa:	f7 01       	movw	r30, r14
    b6ac:	20 8f       	std	Z+24, r18	; 0x18
    b6ae:	31 8f       	std	Z+25, r19	; 0x19
    b6b0:	42 8f       	std	Z+26, r20	; 0x1a
    b6b2:	53 8f       	std	Z+27, r21	; 0x1b
    b6b4:	01 e0       	ldi	r16, 0x01	; 1
    b6b6:	10 e0       	ldi	r17, 0x00	; 0
    b6b8:	b6 01       	movw	r22, r12
    b6ba:	f2 01       	movw	r30, r4
    b6bc:	81 81       	ldd	r24, Z+1	; 0x01
    b6be:	0e 94 cc 69 	call	0xd398	; 0xd398 <disk_read>
    b6c2:	31 e0       	ldi	r19, 0x01	; 1
    b6c4:	20 e0       	ldi	r18, 0x00	; 0
    b6c6:	89 2b       	or	r24, r25
    b6c8:	09 f4       	brne	.+2      	; 0xb6cc <f_open+0x318>
    b6ca:	30 e0       	ldi	r19, 0x00	; 0
    b6cc:	03 2f       	mov	r16, r19
    b6ce:	12 2f       	mov	r17, r18
    b6d0:	02 c0       	rjmp	.+4      	; 0xb6d6 <f_open+0x322>
    b6d2:	02 e0       	ldi	r16, 0x02	; 2
    b6d4:	10 e0       	ldi	r17, 0x00	; 0
    b6d6:	c5 01       	movw	r24, r10
    b6d8:	0e 94 13 69 	call	0xd226	; 0xd226 <ff_memfree>
    b6dc:	01 15       	cp	r16, r1
    b6de:	11 05       	cpc	r17, r1
    b6e0:	59 f0       	breq	.+22     	; 0xb6f8 <f_open+0x344>
    b6e2:	01 c0       	rjmp	.+2      	; 0xb6e6 <f_open+0x332>
    b6e4:	8c 01       	movw	r16, r24
    b6e6:	f7 01       	movw	r30, r14
    b6e8:	11 82       	std	Z+1, r1	; 0x01
    b6ea:	10 82       	st	Z, r1
    b6ec:	c8 01       	movw	r24, r16
    b6ee:	16 c0       	rjmp	.+44     	; 0xb71c <f_open+0x368>
    b6f0:	89 e0       	ldi	r24, 0x09	; 9
    b6f2:	03 c0       	rjmp	.+6      	; 0xb6fa <f_open+0x346>
    b6f4:	81 e1       	ldi	r24, 0x11	; 17
    b6f6:	01 c0       	rjmp	.+2      	; 0xb6fa <f_open+0x346>
    b6f8:	80 e0       	ldi	r24, 0x00	; 0
    b6fa:	90 e0       	ldi	r25, 0x00	; 0
    b6fc:	0f c0       	rjmp	.+30     	; 0xb71c <f_open+0x368>
    b6fe:	08 e0       	ldi	r16, 0x08	; 8
    b700:	10 e0       	ldi	r17, 0x00	; 0
    b702:	08 c0       	rjmp	.+16     	; 0xb714 <f_open+0x360>
    b704:	02 e0       	ldi	r16, 0x02	; 2
    b706:	10 e0       	ldi	r17, 0x00	; 0
    b708:	a5 cf       	rjmp	.-182    	; 0xb654 <f_open+0x2a0>
    b70a:	04 e0       	ldi	r16, 0x04	; 4
    b70c:	10 e0       	ldi	r17, 0x00	; 0
    b70e:	02 c0       	rjmp	.+4      	; 0xb714 <f_open+0x360>
    b710:	07 e0       	ldi	r16, 0x07	; 7
    b712:	10 e0       	ldi	r17, 0x00	; 0
    b714:	c5 01       	movw	r24, r10
    b716:	0e 94 13 69 	call	0xd226	; 0xd226 <ff_memfree>
    b71a:	e5 cf       	rjmp	.-54     	; 0xb6e6 <f_open+0x332>
    b71c:	e6 96       	adiw	r28, 0x36	; 54
    b71e:	e2 e1       	ldi	r30, 0x12	; 18
    b720:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0000b724 <f_read>:
    b724:	a6 e0       	ldi	r26, 0x06	; 6
    b726:	b0 e0       	ldi	r27, 0x00	; 0
    b728:	e8 e9       	ldi	r30, 0x98	; 152
    b72a:	fb e5       	ldi	r31, 0x5B	; 91
    b72c:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    b730:	7c 01       	movw	r14, r24
    b732:	4b 01       	movw	r8, r22
    b734:	5a 01       	movw	r10, r20
    b736:	3e 83       	std	Y+6, r19	; 0x06
    b738:	2d 83       	std	Y+5, r18	; 0x05
    b73a:	f9 01       	movw	r30, r18
    b73c:	11 82       	std	Z+1, r1	; 0x01
    b73e:	10 82       	st	Z, r1
    b740:	be 01       	movw	r22, r28
    b742:	6f 5f       	subi	r22, 0xFF	; 255
    b744:	7f 4f       	sbci	r23, 0xFF	; 255
    b746:	0e 94 aa 48 	call	0x9154	; 0x9154 <validate>
    b74a:	00 97       	sbiw	r24, 0x00	; 0
    b74c:	09 f0       	breq	.+2      	; 0xb750 <f_read+0x2c>
    b74e:	31 c1       	rjmp	.+610    	; 0xb9b2 <f_read+0x28e>
    b750:	f7 01       	movw	r30, r14
    b752:	87 85       	ldd	r24, Z+15	; 0x0f
    b754:	90 e0       	ldi	r25, 0x00	; 0
    b756:	00 97       	sbiw	r24, 0x00	; 0
    b758:	09 f0       	breq	.+2      	; 0xb75c <f_read+0x38>
    b75a:	2b c1       	rjmp	.+598    	; 0xb9b2 <f_read+0x28e>
    b75c:	86 85       	ldd	r24, Z+14	; 0x0e
    b75e:	80 ff       	sbrs	r24, 0
    b760:	26 c1       	rjmp	.+588    	; 0xb9ae <f_read+0x28a>
    b762:	82 85       	ldd	r24, Z+10	; 0x0a
    b764:	93 85       	ldd	r25, Z+11	; 0x0b
    b766:	a4 85       	ldd	r26, Z+12	; 0x0c
    b768:	b5 85       	ldd	r27, Z+13	; 0x0d
    b76a:	40 89       	ldd	r20, Z+16	; 0x10
    b76c:	51 89       	ldd	r21, Z+17	; 0x11
    b76e:	62 89       	ldd	r22, Z+18	; 0x12
    b770:	73 89       	ldd	r23, Z+19	; 0x13
    b772:	84 1b       	sub	r24, r20
    b774:	95 0b       	sbc	r25, r21
    b776:	a6 0b       	sbc	r26, r22
    b778:	b7 0b       	sbc	r27, r23
    b77a:	a5 01       	movw	r20, r10
    b77c:	60 e0       	ldi	r22, 0x00	; 0
    b77e:	70 e0       	ldi	r23, 0x00	; 0
    b780:	84 17       	cp	r24, r20
    b782:	95 07       	cpc	r25, r21
    b784:	a6 07       	cpc	r26, r22
    b786:	b7 07       	cpc	r27, r23
    b788:	08 f4       	brcc	.+2      	; 0xb78c <f_read+0x68>
    b78a:	5c 01       	movw	r10, r24
    b78c:	17 01       	movw	r2, r14
    b78e:	f4 e2       	ldi	r31, 0x24	; 36
    b790:	2f 0e       	add	r2, r31
    b792:	31 1c       	adc	r3, r1
    b794:	a1 14       	cp	r10, r1
    b796:	b1 04       	cpc	r11, r1
    b798:	09 f4       	brne	.+2      	; 0xb79c <f_read+0x78>
    b79a:	07 c1       	rjmp	.+526    	; 0xb9aa <f_read+0x286>
    b79c:	f7 01       	movw	r30, r14
    b79e:	40 89       	ldd	r20, Z+16	; 0x10
    b7a0:	51 89       	ldd	r21, Z+17	; 0x11
    b7a2:	62 89       	ldd	r22, Z+18	; 0x12
    b7a4:	73 89       	ldd	r23, Z+19	; 0x13
    b7a6:	db 01       	movw	r26, r22
    b7a8:	ca 01       	movw	r24, r20
    b7aa:	91 70       	andi	r25, 0x01	; 1
    b7ac:	aa 27       	eor	r26, r26
    b7ae:	bb 27       	eor	r27, r27
    b7b0:	89 2b       	or	r24, r25
    b7b2:	8a 2b       	or	r24, r26
    b7b4:	8b 2b       	or	r24, r27
    b7b6:	09 f0       	breq	.+2      	; 0xb7ba <f_read+0x96>
    b7b8:	cb c0       	rjmp	.+406    	; 0xb950 <f_read+0x22c>
    b7ba:	e9 81       	ldd	r30, Y+1	; 0x01
    b7bc:	fa 81       	ldd	r31, Y+2	; 0x02
    b7be:	01 85       	ldd	r16, Z+9	; 0x09
    b7c0:	12 85       	ldd	r17, Z+10	; 0x0a
    b7c2:	01 50       	subi	r16, 0x01	; 1
    b7c4:	11 09       	sbc	r17, r1
    b7c6:	db 01       	movw	r26, r22
    b7c8:	ca 01       	movw	r24, r20
    b7ca:	e9 e0       	ldi	r30, 0x09	; 9
    b7cc:	b6 95       	lsr	r27
    b7ce:	a7 95       	ror	r26
    b7d0:	97 95       	ror	r25
    b7d2:	87 95       	ror	r24
    b7d4:	ea 95       	dec	r30
    b7d6:	d1 f7       	brne	.-12     	; 0xb7cc <f_read+0xa8>
    b7d8:	08 23       	and	r16, r24
    b7da:	19 23       	and	r17, r25
    b7dc:	01 15       	cp	r16, r1
    b7de:	11 05       	cpc	r17, r1
    b7e0:	91 f5       	brne	.+100    	; 0xb846 <f_read+0x122>
    b7e2:	f7 01       	movw	r30, r14
    b7e4:	41 15       	cp	r20, r1
    b7e6:	51 05       	cpc	r21, r1
    b7e8:	61 05       	cpc	r22, r1
    b7ea:	71 05       	cpc	r23, r1
    b7ec:	29 f4       	brne	.+10     	; 0xb7f8 <f_read+0xd4>
    b7ee:	66 81       	ldd	r22, Z+6	; 0x06
    b7f0:	77 81       	ldd	r23, Z+7	; 0x07
    b7f2:	80 85       	ldd	r24, Z+8	; 0x08
    b7f4:	91 85       	ldd	r25, Z+9	; 0x09
    b7f6:	11 c0       	rjmp	.+34     	; 0xb81a <f_read+0xf6>
    b7f8:	82 a1       	ldd	r24, Z+34	; 0x22
    b7fa:	93 a1       	ldd	r25, Z+35	; 0x23
    b7fc:	89 2b       	or	r24, r25
    b7fe:	21 f0       	breq	.+8      	; 0xb808 <f_read+0xe4>
    b800:	c7 01       	movw	r24, r14
    b802:	0e 94 33 48 	call	0x9066	; 0x9066 <clmt_clust>
    b806:	09 c0       	rjmp	.+18     	; 0xb81a <f_read+0xf6>
    b808:	f7 01       	movw	r30, r14
    b80a:	44 89       	ldd	r20, Z+20	; 0x14
    b80c:	55 89       	ldd	r21, Z+21	; 0x15
    b80e:	66 89       	ldd	r22, Z+22	; 0x16
    b810:	77 89       	ldd	r23, Z+23	; 0x17
    b812:	80 81       	ld	r24, Z
    b814:	91 81       	ldd	r25, Z+1	; 0x01
    b816:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <get_fat.isra.9>
    b81a:	62 30       	cpi	r22, 0x02	; 2
    b81c:	71 05       	cpc	r23, r1
    b81e:	81 05       	cpc	r24, r1
    b820:	91 05       	cpc	r25, r1
    b822:	10 f4       	brcc	.+4      	; 0xb828 <f_read+0x104>
    b824:	82 e0       	ldi	r24, 0x02	; 2
    b826:	07 c0       	rjmp	.+14     	; 0xb836 <f_read+0x112>
    b828:	6f 3f       	cpi	r22, 0xFF	; 255
    b82a:	ff ef       	ldi	r31, 0xFF	; 255
    b82c:	7f 07       	cpc	r23, r31
    b82e:	8f 07       	cpc	r24, r31
    b830:	9f 07       	cpc	r25, r31
    b832:	21 f4       	brne	.+8      	; 0xb83c <f_read+0x118>
    b834:	81 e0       	ldi	r24, 0x01	; 1
    b836:	f7 01       	movw	r30, r14
    b838:	87 87       	std	Z+15, r24	; 0x0f
    b83a:	ba c0       	rjmp	.+372    	; 0xb9b0 <f_read+0x28c>
    b83c:	f7 01       	movw	r30, r14
    b83e:	64 8b       	std	Z+20, r22	; 0x14
    b840:	75 8b       	std	Z+21, r23	; 0x15
    b842:	86 8b       	std	Z+22, r24	; 0x16
    b844:	97 8b       	std	Z+23, r25	; 0x17
    b846:	89 81       	ldd	r24, Y+1	; 0x01
    b848:	9a 81       	ldd	r25, Y+2	; 0x02
    b84a:	9c 83       	std	Y+4, r25	; 0x04
    b84c:	8b 83       	std	Y+3, r24	; 0x03
    b84e:	f7 01       	movw	r30, r14
    b850:	44 89       	ldd	r20, Z+20	; 0x14
    b852:	55 89       	ldd	r21, Z+21	; 0x15
    b854:	66 89       	ldd	r22, Z+22	; 0x16
    b856:	77 89       	ldd	r23, Z+23	; 0x17
    b858:	0e 94 0b 48 	call	0x9016	; 0x9016 <clst2sect>
    b85c:	61 15       	cp	r22, r1
    b85e:	71 05       	cpc	r23, r1
    b860:	81 05       	cpc	r24, r1
    b862:	91 05       	cpc	r25, r1
    b864:	f9 f2       	breq	.-66     	; 0xb824 <f_read+0x100>
    b866:	2b 01       	movw	r4, r22
    b868:	3c 01       	movw	r6, r24
    b86a:	40 0e       	add	r4, r16
    b86c:	51 1e       	adc	r5, r17
    b86e:	61 1c       	adc	r6, r1
    b870:	71 1c       	adc	r7, r1
    b872:	65 01       	movw	r12, r10
    b874:	cd 2c       	mov	r12, r13
    b876:	dd 24       	eor	r13, r13
    b878:	c6 94       	lsr	r12
    b87a:	c1 14       	cp	r12, r1
    b87c:	d1 04       	cpc	r13, r1
    b87e:	d1 f1       	breq	.+116    	; 0xb8f4 <f_read+0x1d0>
    b880:	eb 81       	ldd	r30, Y+3	; 0x03
    b882:	fc 81       	ldd	r31, Y+4	; 0x04
    b884:	81 85       	ldd	r24, Z+9	; 0x09
    b886:	92 85       	ldd	r25, Z+10	; 0x0a
    b888:	98 01       	movw	r18, r16
    b88a:	2c 0d       	add	r18, r12
    b88c:	3d 1d       	adc	r19, r13
    b88e:	82 17       	cp	r24, r18
    b890:	93 07       	cpc	r25, r19
    b892:	18 f4       	brcc	.+6      	; 0xb89a <f_read+0x176>
    b894:	6c 01       	movw	r12, r24
    b896:	c0 1a       	sub	r12, r16
    b898:	d1 0a       	sbc	r13, r17
    b89a:	86 01       	movw	r16, r12
    b89c:	a3 01       	movw	r20, r6
    b89e:	92 01       	movw	r18, r4
    b8a0:	b4 01       	movw	r22, r8
    b8a2:	eb 81       	ldd	r30, Y+3	; 0x03
    b8a4:	fc 81       	ldd	r31, Y+4	; 0x04
    b8a6:	81 81       	ldd	r24, Z+1	; 0x01
    b8a8:	0e 94 cc 69 	call	0xd398	; 0xd398 <disk_read>
    b8ac:	89 2b       	or	r24, r25
    b8ae:	11 f6       	brne	.-124    	; 0xb834 <f_read+0x110>
    b8b0:	f7 01       	movw	r30, r14
    b8b2:	86 85       	ldd	r24, Z+14	; 0x0e
    b8b4:	87 ff       	sbrs	r24, 7
    b8b6:	1a c0       	rjmp	.+52     	; 0xb8ec <f_read+0x1c8>
    b8b8:	80 8d       	ldd	r24, Z+24	; 0x18
    b8ba:	91 8d       	ldd	r25, Z+25	; 0x19
    b8bc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b8be:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b8c0:	84 19       	sub	r24, r4
    b8c2:	95 09       	sbc	r25, r5
    b8c4:	a6 09       	sbc	r26, r6
    b8c6:	b7 09       	sbc	r27, r7
    b8c8:	a6 01       	movw	r20, r12
    b8ca:	60 e0       	ldi	r22, 0x00	; 0
    b8cc:	70 e0       	ldi	r23, 0x00	; 0
    b8ce:	84 17       	cp	r24, r20
    b8d0:	95 07       	cpc	r25, r21
    b8d2:	a6 07       	cpc	r26, r22
    b8d4:	b7 07       	cpc	r27, r23
    b8d6:	50 f4       	brcc	.+20     	; 0xb8ec <f_read+0x1c8>
    b8d8:	98 2f       	mov	r25, r24
    b8da:	88 27       	eor	r24, r24
    b8dc:	99 0f       	add	r25, r25
    b8de:	40 e0       	ldi	r20, 0x00	; 0
    b8e0:	52 e0       	ldi	r21, 0x02	; 2
    b8e2:	b1 01       	movw	r22, r2
    b8e4:	88 0d       	add	r24, r8
    b8e6:	99 1d       	adc	r25, r9
    b8e8:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
    b8ec:	dc 2c       	mov	r13, r12
    b8ee:	cc 24       	eor	r12, r12
    b8f0:	dd 0c       	add	r13, r13
    b8f2:	41 c0       	rjmp	.+130    	; 0xb976 <f_read+0x252>
    b8f4:	f7 01       	movw	r30, r14
    b8f6:	20 8d       	ldd	r18, Z+24	; 0x18
    b8f8:	31 8d       	ldd	r19, Z+25	; 0x19
    b8fa:	42 8d       	ldd	r20, Z+26	; 0x1a
    b8fc:	53 8d       	ldd	r21, Z+27	; 0x1b
    b8fe:	42 16       	cp	r4, r18
    b900:	53 06       	cpc	r5, r19
    b902:	64 06       	cpc	r6, r20
    b904:	75 06       	cpc	r7, r21
    b906:	f9 f0       	breq	.+62     	; 0xb946 <f_read+0x222>
    b908:	86 85       	ldd	r24, Z+14	; 0x0e
    b90a:	87 ff       	sbrs	r24, 7
    b90c:	0f c0       	rjmp	.+30     	; 0xb92c <f_read+0x208>
    b90e:	01 e0       	ldi	r16, 0x01	; 1
    b910:	10 e0       	ldi	r17, 0x00	; 0
    b912:	b1 01       	movw	r22, r2
    b914:	eb 81       	ldd	r30, Y+3	; 0x03
    b916:	fc 81       	ldd	r31, Y+4	; 0x04
    b918:	81 81       	ldd	r24, Z+1	; 0x01
    b91a:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    b91e:	89 2b       	or	r24, r25
    b920:	09 f0       	breq	.+2      	; 0xb924 <f_read+0x200>
    b922:	88 cf       	rjmp	.-240    	; 0xb834 <f_read+0x110>
    b924:	f7 01       	movw	r30, r14
    b926:	86 85       	ldd	r24, Z+14	; 0x0e
    b928:	8f 77       	andi	r24, 0x7F	; 127
    b92a:	86 87       	std	Z+14, r24	; 0x0e
    b92c:	e9 81       	ldd	r30, Y+1	; 0x01
    b92e:	fa 81       	ldd	r31, Y+2	; 0x02
    b930:	01 e0       	ldi	r16, 0x01	; 1
    b932:	10 e0       	ldi	r17, 0x00	; 0
    b934:	a3 01       	movw	r20, r6
    b936:	92 01       	movw	r18, r4
    b938:	b1 01       	movw	r22, r2
    b93a:	81 81       	ldd	r24, Z+1	; 0x01
    b93c:	0e 94 cc 69 	call	0xd398	; 0xd398 <disk_read>
    b940:	89 2b       	or	r24, r25
    b942:	09 f0       	breq	.+2      	; 0xb946 <f_read+0x222>
    b944:	77 cf       	rjmp	.-274    	; 0xb834 <f_read+0x110>
    b946:	f7 01       	movw	r30, r14
    b948:	40 8e       	std	Z+24, r4	; 0x18
    b94a:	51 8e       	std	Z+25, r5	; 0x19
    b94c:	62 8e       	std	Z+26, r6	; 0x1a
    b94e:	73 8e       	std	Z+27, r7	; 0x1b
    b950:	f7 01       	movw	r30, r14
    b952:	60 89       	ldd	r22, Z+16	; 0x10
    b954:	71 89       	ldd	r23, Z+17	; 0x11
    b956:	71 70       	andi	r23, 0x01	; 1
    b958:	80 e0       	ldi	r24, 0x00	; 0
    b95a:	92 e0       	ldi	r25, 0x02	; 2
    b95c:	86 1b       	sub	r24, r22
    b95e:	97 0b       	sbc	r25, r23
    b960:	65 01       	movw	r12, r10
    b962:	8a 15       	cp	r24, r10
    b964:	9b 05       	cpc	r25, r11
    b966:	08 f4       	brcc	.+2      	; 0xb96a <f_read+0x246>
    b968:	6c 01       	movw	r12, r24
    b96a:	62 0d       	add	r22, r2
    b96c:	73 1d       	adc	r23, r3
    b96e:	a6 01       	movw	r20, r12
    b970:	c4 01       	movw	r24, r8
    b972:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
    b976:	ac 18       	sub	r10, r12
    b978:	bd 08       	sbc	r11, r13
    b97a:	ed 81       	ldd	r30, Y+5	; 0x05
    b97c:	fe 81       	ldd	r31, Y+6	; 0x06
    b97e:	80 81       	ld	r24, Z
    b980:	91 81       	ldd	r25, Z+1	; 0x01
    b982:	8c 0d       	add	r24, r12
    b984:	9d 1d       	adc	r25, r13
    b986:	91 83       	std	Z+1, r25	; 0x01
    b988:	80 83       	st	Z, r24
    b98a:	8c 0c       	add	r8, r12
    b98c:	9d 1c       	adc	r9, r13
    b98e:	f7 01       	movw	r30, r14
    b990:	80 89       	ldd	r24, Z+16	; 0x10
    b992:	91 89       	ldd	r25, Z+17	; 0x11
    b994:	a2 89       	ldd	r26, Z+18	; 0x12
    b996:	b3 89       	ldd	r27, Z+19	; 0x13
    b998:	8c 0d       	add	r24, r12
    b99a:	9d 1d       	adc	r25, r13
    b99c:	a1 1d       	adc	r26, r1
    b99e:	b1 1d       	adc	r27, r1
    b9a0:	80 8b       	std	Z+16, r24	; 0x10
    b9a2:	91 8b       	std	Z+17, r25	; 0x11
    b9a4:	a2 8b       	std	Z+18, r26	; 0x12
    b9a6:	b3 8b       	std	Z+19, r27	; 0x13
    b9a8:	f5 ce       	rjmp	.-534    	; 0xb794 <f_read+0x70>
    b9aa:	80 e0       	ldi	r24, 0x00	; 0
    b9ac:	01 c0       	rjmp	.+2      	; 0xb9b0 <f_read+0x28c>
    b9ae:	87 e0       	ldi	r24, 0x07	; 7
    b9b0:	90 e0       	ldi	r25, 0x00	; 0
    b9b2:	26 96       	adiw	r28, 0x06	; 6
    b9b4:	e2 e1       	ldi	r30, 0x12	; 18
    b9b6:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0000b9ba <f_write>:
    b9ba:	a8 e0       	ldi	r26, 0x08	; 8
    b9bc:	b0 e0       	ldi	r27, 0x00	; 0
    b9be:	e3 ee       	ldi	r30, 0xE3	; 227
    b9c0:	fc e5       	ldi	r31, 0x5C	; 92
    b9c2:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    b9c6:	7c 01       	movw	r14, r24
    b9c8:	3b 01       	movw	r6, r22
    b9ca:	5a 01       	movw	r10, r20
    b9cc:	38 87       	std	Y+8, r19	; 0x08
    b9ce:	2f 83       	std	Y+7, r18	; 0x07
    b9d0:	f9 01       	movw	r30, r18
    b9d2:	11 82       	std	Z+1, r1	; 0x01
    b9d4:	10 82       	st	Z, r1
    b9d6:	be 01       	movw	r22, r28
    b9d8:	6f 5f       	subi	r22, 0xFF	; 255
    b9da:	7f 4f       	sbci	r23, 0xFF	; 255
    b9dc:	0e 94 aa 48 	call	0x9154	; 0x9154 <validate>
    b9e0:	00 97       	sbiw	r24, 0x00	; 0
    b9e2:	09 f0       	breq	.+2      	; 0xb9e6 <f_write+0x2c>
    b9e4:	7d c1       	rjmp	.+762    	; 0xbce0 <f_write+0x326>
    b9e6:	f7 01       	movw	r30, r14
    b9e8:	87 85       	ldd	r24, Z+15	; 0x0f
    b9ea:	90 e0       	ldi	r25, 0x00	; 0
    b9ec:	00 97       	sbiw	r24, 0x00	; 0
    b9ee:	09 f0       	breq	.+2      	; 0xb9f2 <f_write+0x38>
    b9f0:	77 c1       	rjmp	.+750    	; 0xbce0 <f_write+0x326>
    b9f2:	86 85       	ldd	r24, Z+14	; 0x0e
    b9f4:	81 ff       	sbrs	r24, 1
    b9f6:	72 c1       	rjmp	.+740    	; 0xbcdc <f_write+0x322>
    b9f8:	80 89       	ldd	r24, Z+16	; 0x10
    b9fa:	91 89       	ldd	r25, Z+17	; 0x11
    b9fc:	a2 89       	ldd	r26, Z+18	; 0x12
    b9fe:	b3 89       	ldd	r27, Z+19	; 0x13
    ba00:	ac 01       	movw	r20, r24
    ba02:	bd 01       	movw	r22, r26
    ba04:	4a 0d       	add	r20, r10
    ba06:	5b 1d       	adc	r21, r11
    ba08:	61 1d       	adc	r22, r1
    ba0a:	71 1d       	adc	r23, r1
    ba0c:	48 17       	cp	r20, r24
    ba0e:	59 07       	cpc	r21, r25
    ba10:	6a 07       	cpc	r22, r26
    ba12:	7b 07       	cpc	r23, r27
    ba14:	18 f4       	brcc	.+6      	; 0xba1c <f_write+0x62>
    ba16:	5c 01       	movw	r10, r24
    ba18:	a0 94       	com	r10
    ba1a:	b0 94       	com	r11
    ba1c:	97 01       	movw	r18, r14
    ba1e:	2c 5d       	subi	r18, 0xDC	; 220
    ba20:	3f 4f       	sbci	r19, 0xFF	; 255
    ba22:	3e 83       	std	Y+6, r19	; 0x06
    ba24:	2d 83       	std	Y+5, r18	; 0x05
    ba26:	a1 14       	cp	r10, r1
    ba28:	b1 04       	cpc	r11, r1
    ba2a:	09 f4       	brne	.+2      	; 0xba2e <f_write+0x74>
    ba2c:	4d c0       	rjmp	.+154    	; 0xbac8 <f_write+0x10e>
    ba2e:	f7 01       	movw	r30, r14
    ba30:	40 89       	ldd	r20, Z+16	; 0x10
    ba32:	51 89       	ldd	r21, Z+17	; 0x11
    ba34:	62 89       	ldd	r22, Z+18	; 0x12
    ba36:	73 89       	ldd	r23, Z+19	; 0x13
    ba38:	db 01       	movw	r26, r22
    ba3a:	ca 01       	movw	r24, r20
    ba3c:	91 70       	andi	r25, 0x01	; 1
    ba3e:	aa 27       	eor	r26, r26
    ba40:	bb 27       	eor	r27, r27
    ba42:	89 2b       	or	r24, r25
    ba44:	8a 2b       	or	r24, r26
    ba46:	8b 2b       	or	r24, r27
    ba48:	09 f0       	breq	.+2      	; 0xba4c <f_write+0x92>
    ba4a:	05 c1       	rjmp	.+522    	; 0xbc56 <f_write+0x29c>
    ba4c:	e9 81       	ldd	r30, Y+1	; 0x01
    ba4e:	fa 81       	ldd	r31, Y+2	; 0x02
    ba50:	81 84       	ldd	r8, Z+9	; 0x09
    ba52:	92 84       	ldd	r9, Z+10	; 0x0a
    ba54:	f1 e0       	ldi	r31, 0x01	; 1
    ba56:	8f 1a       	sub	r8, r31
    ba58:	91 08       	sbc	r9, r1
    ba5a:	db 01       	movw	r26, r22
    ba5c:	ca 01       	movw	r24, r20
    ba5e:	e9 e0       	ldi	r30, 0x09	; 9
    ba60:	b6 95       	lsr	r27
    ba62:	a7 95       	ror	r26
    ba64:	97 95       	ror	r25
    ba66:	87 95       	ror	r24
    ba68:	ea 95       	dec	r30
    ba6a:	d1 f7       	brne	.-12     	; 0xba60 <f_write+0xa6>
    ba6c:	88 22       	and	r8, r24
    ba6e:	99 22       	and	r9, r25
    ba70:	81 14       	cp	r8, r1
    ba72:	91 04       	cpc	r9, r1
    ba74:	09 f0       	breq	.+2      	; 0xba78 <f_write+0xbe>
    ba76:	51 c0       	rjmp	.+162    	; 0xbb1a <f_write+0x160>
    ba78:	f7 01       	movw	r30, r14
    ba7a:	41 15       	cp	r20, r1
    ba7c:	51 05       	cpc	r21, r1
    ba7e:	61 05       	cpc	r22, r1
    ba80:	71 05       	cpc	r23, r1
    ba82:	69 f4       	brne	.+26     	; 0xba9e <f_write+0xe4>
    ba84:	66 81       	ldd	r22, Z+6	; 0x06
    ba86:	77 81       	ldd	r23, Z+7	; 0x07
    ba88:	80 85       	ldd	r24, Z+8	; 0x08
    ba8a:	91 85       	ldd	r25, Z+9	; 0x09
    ba8c:	61 15       	cp	r22, r1
    ba8e:	71 05       	cpc	r23, r1
    ba90:	81 05       	cpc	r24, r1
    ba92:	91 05       	cpc	r25, r1
    ba94:	f9 f4       	brne	.+62     	; 0xbad4 <f_write+0x11a>
    ba96:	40 e0       	ldi	r20, 0x00	; 0
    ba98:	50 e0       	ldi	r21, 0x00	; 0
    ba9a:	ba 01       	movw	r22, r20
    ba9c:	0d c0       	rjmp	.+26     	; 0xbab8 <f_write+0xfe>
    ba9e:	82 a1       	ldd	r24, Z+34	; 0x22
    baa0:	93 a1       	ldd	r25, Z+35	; 0x23
    baa2:	89 2b       	or	r24, r25
    baa4:	21 f0       	breq	.+8      	; 0xbaae <f_write+0xf4>
    baa6:	c7 01       	movw	r24, r14
    baa8:	0e 94 33 48 	call	0x9066	; 0x9066 <clmt_clust>
    baac:	08 c0       	rjmp	.+16     	; 0xbabe <f_write+0x104>
    baae:	f7 01       	movw	r30, r14
    bab0:	44 89       	ldd	r20, Z+20	; 0x14
    bab2:	55 89       	ldd	r21, Z+21	; 0x15
    bab4:	66 89       	ldd	r22, Z+22	; 0x16
    bab6:	77 89       	ldd	r23, Z+23	; 0x17
    bab8:	c7 01       	movw	r24, r14
    baba:	0e 94 dd 50 	call	0xa1ba	; 0xa1ba <create_chain>
    babe:	61 15       	cp	r22, r1
    bac0:	71 05       	cpc	r23, r1
    bac2:	81 05       	cpc	r24, r1
    bac4:	91 05       	cpc	r25, r1
    bac6:	31 f4       	brne	.+12     	; 0xbad4 <f_write+0x11a>
    bac8:	f7 01       	movw	r30, r14
    baca:	86 85       	ldd	r24, Z+14	; 0x0e
    bacc:	80 64       	ori	r24, 0x40	; 64
    bace:	86 87       	std	Z+14, r24	; 0x0e
    bad0:	80 e0       	ldi	r24, 0x00	; 0
    bad2:	05 c1       	rjmp	.+522    	; 0xbcde <f_write+0x324>
    bad4:	61 30       	cpi	r22, 0x01	; 1
    bad6:	71 05       	cpc	r23, r1
    bad8:	81 05       	cpc	r24, r1
    bada:	91 05       	cpc	r25, r1
    badc:	11 f4       	brne	.+4      	; 0xbae2 <f_write+0x128>
    bade:	82 e0       	ldi	r24, 0x02	; 2
    bae0:	07 c0       	rjmp	.+14     	; 0xbaf0 <f_write+0x136>
    bae2:	6f 3f       	cpi	r22, 0xFF	; 255
    bae4:	ff ef       	ldi	r31, 0xFF	; 255
    bae6:	7f 07       	cpc	r23, r31
    bae8:	8f 07       	cpc	r24, r31
    baea:	9f 07       	cpc	r25, r31
    baec:	21 f4       	brne	.+8      	; 0xbaf6 <f_write+0x13c>
    baee:	81 e0       	ldi	r24, 0x01	; 1
    baf0:	f7 01       	movw	r30, r14
    baf2:	87 87       	std	Z+15, r24	; 0x0f
    baf4:	f4 c0       	rjmp	.+488    	; 0xbcde <f_write+0x324>
    baf6:	f7 01       	movw	r30, r14
    baf8:	64 8b       	std	Z+20, r22	; 0x14
    bafa:	75 8b       	std	Z+21, r23	; 0x15
    bafc:	86 8b       	std	Z+22, r24	; 0x16
    bafe:	97 8b       	std	Z+23, r25	; 0x17
    bb00:	06 81       	ldd	r16, Z+6	; 0x06
    bb02:	17 81       	ldd	r17, Z+7	; 0x07
    bb04:	20 85       	ldd	r18, Z+8	; 0x08
    bb06:	31 85       	ldd	r19, Z+9	; 0x09
    bb08:	01 15       	cp	r16, r1
    bb0a:	11 05       	cpc	r17, r1
    bb0c:	21 05       	cpc	r18, r1
    bb0e:	31 05       	cpc	r19, r1
    bb10:	21 f4       	brne	.+8      	; 0xbb1a <f_write+0x160>
    bb12:	66 83       	std	Z+6, r22	; 0x06
    bb14:	77 83       	std	Z+7, r23	; 0x07
    bb16:	80 87       	std	Z+8, r24	; 0x08
    bb18:	91 87       	std	Z+9, r25	; 0x09
    bb1a:	f7 01       	movw	r30, r14
    bb1c:	86 85       	ldd	r24, Z+14	; 0x0e
    bb1e:	87 ff       	sbrs	r24, 7
    bb20:	13 c0       	rjmp	.+38     	; 0xbb48 <f_write+0x18e>
    bb22:	20 8d       	ldd	r18, Z+24	; 0x18
    bb24:	31 8d       	ldd	r19, Z+25	; 0x19
    bb26:	42 8d       	ldd	r20, Z+26	; 0x1a
    bb28:	53 8d       	ldd	r21, Z+27	; 0x1b
    bb2a:	e9 81       	ldd	r30, Y+1	; 0x01
    bb2c:	fa 81       	ldd	r31, Y+2	; 0x02
    bb2e:	01 e0       	ldi	r16, 0x01	; 1
    bb30:	10 e0       	ldi	r17, 0x00	; 0
    bb32:	6d 81       	ldd	r22, Y+5	; 0x05
    bb34:	7e 81       	ldd	r23, Y+6	; 0x06
    bb36:	81 81       	ldd	r24, Z+1	; 0x01
    bb38:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    bb3c:	89 2b       	or	r24, r25
    bb3e:	b9 f6       	brne	.-82     	; 0xbaee <f_write+0x134>
    bb40:	f7 01       	movw	r30, r14
    bb42:	86 85       	ldd	r24, Z+14	; 0x0e
    bb44:	8f 77       	andi	r24, 0x7F	; 127
    bb46:	86 87       	std	Z+14, r24	; 0x0e
    bb48:	29 81       	ldd	r18, Y+1	; 0x01
    bb4a:	3a 81       	ldd	r19, Y+2	; 0x02
    bb4c:	3c 83       	std	Y+4, r19	; 0x04
    bb4e:	2b 83       	std	Y+3, r18	; 0x03
    bb50:	f7 01       	movw	r30, r14
    bb52:	44 89       	ldd	r20, Z+20	; 0x14
    bb54:	55 89       	ldd	r21, Z+21	; 0x15
    bb56:	66 89       	ldd	r22, Z+22	; 0x16
    bb58:	77 89       	ldd	r23, Z+23	; 0x17
    bb5a:	c9 01       	movw	r24, r18
    bb5c:	0e 94 0b 48 	call	0x9016	; 0x9016 <clst2sect>
    bb60:	61 15       	cp	r22, r1
    bb62:	71 05       	cpc	r23, r1
    bb64:	81 05       	cpc	r24, r1
    bb66:	91 05       	cpc	r25, r1
    bb68:	09 f4       	brne	.+2      	; 0xbb6c <f_write+0x1b2>
    bb6a:	b9 cf       	rjmp	.-142    	; 0xbade <f_write+0x124>
    bb6c:	1b 01       	movw	r2, r22
    bb6e:	2c 01       	movw	r4, r24
    bb70:	28 0c       	add	r2, r8
    bb72:	39 1c       	adc	r3, r9
    bb74:	41 1c       	adc	r4, r1
    bb76:	51 1c       	adc	r5, r1
    bb78:	65 01       	movw	r12, r10
    bb7a:	cd 2c       	mov	r12, r13
    bb7c:	dd 24       	eor	r13, r13
    bb7e:	c6 94       	lsr	r12
    bb80:	c1 14       	cp	r12, r1
    bb82:	d1 04       	cpc	r13, r1
    bb84:	f1 f1       	breq	.+124    	; 0xbc02 <f_write+0x248>
    bb86:	eb 81       	ldd	r30, Y+3	; 0x03
    bb88:	fc 81       	ldd	r31, Y+4	; 0x04
    bb8a:	81 85       	ldd	r24, Z+9	; 0x09
    bb8c:	92 85       	ldd	r25, Z+10	; 0x0a
    bb8e:	94 01       	movw	r18, r8
    bb90:	2c 0d       	add	r18, r12
    bb92:	3d 1d       	adc	r19, r13
    bb94:	82 17       	cp	r24, r18
    bb96:	93 07       	cpc	r25, r19
    bb98:	18 f4       	brcc	.+6      	; 0xbba0 <f_write+0x1e6>
    bb9a:	6c 01       	movw	r12, r24
    bb9c:	c8 18       	sub	r12, r8
    bb9e:	d9 08       	sbc	r13, r9
    bba0:	86 01       	movw	r16, r12
    bba2:	a2 01       	movw	r20, r4
    bba4:	91 01       	movw	r18, r2
    bba6:	b3 01       	movw	r22, r6
    bba8:	eb 81       	ldd	r30, Y+3	; 0x03
    bbaa:	fc 81       	ldd	r31, Y+4	; 0x04
    bbac:	81 81       	ldd	r24, Z+1	; 0x01
    bbae:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    bbb2:	89 2b       	or	r24, r25
    bbb4:	09 f0       	breq	.+2      	; 0xbbb8 <f_write+0x1fe>
    bbb6:	9b cf       	rjmp	.-202    	; 0xbaee <f_write+0x134>
    bbb8:	f7 01       	movw	r30, r14
    bbba:	80 8d       	ldd	r24, Z+24	; 0x18
    bbbc:	91 8d       	ldd	r25, Z+25	; 0x19
    bbbe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bbc0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bbc2:	82 19       	sub	r24, r2
    bbc4:	93 09       	sbc	r25, r3
    bbc6:	a4 09       	sbc	r26, r4
    bbc8:	b5 09       	sbc	r27, r5
    bbca:	a6 01       	movw	r20, r12
    bbcc:	60 e0       	ldi	r22, 0x00	; 0
    bbce:	70 e0       	ldi	r23, 0x00	; 0
    bbd0:	84 17       	cp	r24, r20
    bbd2:	95 07       	cpc	r25, r21
    bbd4:	a6 07       	cpc	r26, r22
    bbd6:	b7 07       	cpc	r27, r23
    bbd8:	80 f4       	brcc	.+32     	; 0xbbfa <f_write+0x240>
    bbda:	98 2f       	mov	r25, r24
    bbdc:	88 27       	eor	r24, r24
    bbde:	99 0f       	add	r25, r25
    bbe0:	b3 01       	movw	r22, r6
    bbe2:	68 0f       	add	r22, r24
    bbe4:	79 1f       	adc	r23, r25
    bbe6:	40 e0       	ldi	r20, 0x00	; 0
    bbe8:	52 e0       	ldi	r21, 0x02	; 2
    bbea:	8d 81       	ldd	r24, Y+5	; 0x05
    bbec:	9e 81       	ldd	r25, Y+6	; 0x06
    bbee:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
    bbf2:	f7 01       	movw	r30, r14
    bbf4:	86 85       	ldd	r24, Z+14	; 0x0e
    bbf6:	8f 77       	andi	r24, 0x7F	; 127
    bbf8:	86 87       	std	Z+14, r24	; 0x0e
    bbfa:	dc 2c       	mov	r13, r12
    bbfc:	cc 24       	eor	r12, r12
    bbfe:	dd 0c       	add	r13, r13
    bc00:	43 c0       	rjmp	.+134    	; 0xbc88 <f_write+0x2ce>
    bc02:	f7 01       	movw	r30, r14
    bc04:	80 8d       	ldd	r24, Z+24	; 0x18
    bc06:	91 8d       	ldd	r25, Z+25	; 0x19
    bc08:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bc0a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bc0c:	28 16       	cp	r2, r24
    bc0e:	39 06       	cpc	r3, r25
    bc10:	4a 06       	cpc	r4, r26
    bc12:	5b 06       	cpc	r5, r27
    bc14:	d9 f0       	breq	.+54     	; 0xbc4c <f_write+0x292>
    bc16:	40 89       	ldd	r20, Z+16	; 0x10
    bc18:	51 89       	ldd	r21, Z+17	; 0x11
    bc1a:	62 89       	ldd	r22, Z+18	; 0x12
    bc1c:	73 89       	ldd	r23, Z+19	; 0x13
    bc1e:	82 85       	ldd	r24, Z+10	; 0x0a
    bc20:	93 85       	ldd	r25, Z+11	; 0x0b
    bc22:	a4 85       	ldd	r26, Z+12	; 0x0c
    bc24:	b5 85       	ldd	r27, Z+13	; 0x0d
    bc26:	48 17       	cp	r20, r24
    bc28:	59 07       	cpc	r21, r25
    bc2a:	6a 07       	cpc	r22, r26
    bc2c:	7b 07       	cpc	r23, r27
    bc2e:	70 f4       	brcc	.+28     	; 0xbc4c <f_write+0x292>
    bc30:	01 e0       	ldi	r16, 0x01	; 1
    bc32:	10 e0       	ldi	r17, 0x00	; 0
    bc34:	a2 01       	movw	r20, r4
    bc36:	91 01       	movw	r18, r2
    bc38:	6d 81       	ldd	r22, Y+5	; 0x05
    bc3a:	7e 81       	ldd	r23, Y+6	; 0x06
    bc3c:	eb 81       	ldd	r30, Y+3	; 0x03
    bc3e:	fc 81       	ldd	r31, Y+4	; 0x04
    bc40:	81 81       	ldd	r24, Z+1	; 0x01
    bc42:	0e 94 cc 69 	call	0xd398	; 0xd398 <disk_read>
    bc46:	89 2b       	or	r24, r25
    bc48:	09 f0       	breq	.+2      	; 0xbc4c <f_write+0x292>
    bc4a:	51 cf       	rjmp	.-350    	; 0xbaee <f_write+0x134>
    bc4c:	f7 01       	movw	r30, r14
    bc4e:	20 8e       	std	Z+24, r2	; 0x18
    bc50:	31 8e       	std	Z+25, r3	; 0x19
    bc52:	42 8e       	std	Z+26, r4	; 0x1a
    bc54:	53 8e       	std	Z+27, r5	; 0x1b
    bc56:	f7 01       	movw	r30, r14
    bc58:	80 89       	ldd	r24, Z+16	; 0x10
    bc5a:	91 89       	ldd	r25, Z+17	; 0x11
    bc5c:	91 70       	andi	r25, 0x01	; 1
    bc5e:	20 e0       	ldi	r18, 0x00	; 0
    bc60:	32 e0       	ldi	r19, 0x02	; 2
    bc62:	28 1b       	sub	r18, r24
    bc64:	39 0b       	sbc	r19, r25
    bc66:	65 01       	movw	r12, r10
    bc68:	2a 15       	cp	r18, r10
    bc6a:	3b 05       	cpc	r19, r11
    bc6c:	08 f4       	brcc	.+2      	; 0xbc70 <f_write+0x2b6>
    bc6e:	69 01       	movw	r12, r18
    bc70:	a6 01       	movw	r20, r12
    bc72:	b3 01       	movw	r22, r6
    bc74:	2d 81       	ldd	r18, Y+5	; 0x05
    bc76:	3e 81       	ldd	r19, Y+6	; 0x06
    bc78:	82 0f       	add	r24, r18
    bc7a:	93 1f       	adc	r25, r19
    bc7c:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
    bc80:	f7 01       	movw	r30, r14
    bc82:	86 85       	ldd	r24, Z+14	; 0x0e
    bc84:	80 68       	ori	r24, 0x80	; 128
    bc86:	86 87       	std	Z+14, r24	; 0x0e
    bc88:	ac 18       	sub	r10, r12
    bc8a:	bd 08       	sbc	r11, r13
    bc8c:	ef 81       	ldd	r30, Y+7	; 0x07
    bc8e:	f8 85       	ldd	r31, Y+8	; 0x08
    bc90:	80 81       	ld	r24, Z
    bc92:	91 81       	ldd	r25, Z+1	; 0x01
    bc94:	8c 0d       	add	r24, r12
    bc96:	9d 1d       	adc	r25, r13
    bc98:	91 83       	std	Z+1, r25	; 0x01
    bc9a:	80 83       	st	Z, r24
    bc9c:	6c 0c       	add	r6, r12
    bc9e:	7d 1c       	adc	r7, r13
    bca0:	f7 01       	movw	r30, r14
    bca2:	80 89       	ldd	r24, Z+16	; 0x10
    bca4:	91 89       	ldd	r25, Z+17	; 0x11
    bca6:	a2 89       	ldd	r26, Z+18	; 0x12
    bca8:	b3 89       	ldd	r27, Z+19	; 0x13
    bcaa:	8c 0d       	add	r24, r12
    bcac:	9d 1d       	adc	r25, r13
    bcae:	a1 1d       	adc	r26, r1
    bcb0:	b1 1d       	adc	r27, r1
    bcb2:	80 8b       	std	Z+16, r24	; 0x10
    bcb4:	91 8b       	std	Z+17, r25	; 0x11
    bcb6:	a2 8b       	std	Z+18, r26	; 0x12
    bcb8:	b3 8b       	std	Z+19, r27	; 0x13
    bcba:	42 85       	ldd	r20, Z+10	; 0x0a
    bcbc:	53 85       	ldd	r21, Z+11	; 0x0b
    bcbe:	64 85       	ldd	r22, Z+12	; 0x0c
    bcc0:	75 85       	ldd	r23, Z+13	; 0x0d
    bcc2:	48 17       	cp	r20, r24
    bcc4:	59 07       	cpc	r21, r25
    bcc6:	6a 07       	cpc	r22, r26
    bcc8:	7b 07       	cpc	r23, r27
    bcca:	10 f4       	brcc	.+4      	; 0xbcd0 <f_write+0x316>
    bccc:	ac 01       	movw	r20, r24
    bcce:	bd 01       	movw	r22, r26
    bcd0:	f7 01       	movw	r30, r14
    bcd2:	42 87       	std	Z+10, r20	; 0x0a
    bcd4:	53 87       	std	Z+11, r21	; 0x0b
    bcd6:	64 87       	std	Z+12, r22	; 0x0c
    bcd8:	75 87       	std	Z+13, r23	; 0x0d
    bcda:	a5 ce       	rjmp	.-694    	; 0xba26 <f_write+0x6c>
    bcdc:	87 e0       	ldi	r24, 0x07	; 7
    bcde:	90 e0       	ldi	r25, 0x00	; 0
    bce0:	28 96       	adiw	r28, 0x08	; 8
    bce2:	e2 e1       	ldi	r30, 0x12	; 18
    bce4:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0000bce8 <f_sync>:
    bce8:	8f 92       	push	r8
    bcea:	9f 92       	push	r9
    bcec:	af 92       	push	r10
    bcee:	bf 92       	push	r11
    bcf0:	ef 92       	push	r14
    bcf2:	ff 92       	push	r15
    bcf4:	0f 93       	push	r16
    bcf6:	1f 93       	push	r17
    bcf8:	cf 93       	push	r28
    bcfa:	df 93       	push	r29
    bcfc:	00 d0       	rcall	.+0      	; 0xbcfe <f_sync+0x16>
    bcfe:	cd b7       	in	r28, 0x3d	; 61
    bd00:	de b7       	in	r29, 0x3e	; 62
    bd02:	7c 01       	movw	r14, r24
    bd04:	be 01       	movw	r22, r28
    bd06:	6f 5f       	subi	r22, 0xFF	; 255
    bd08:	7f 4f       	sbci	r23, 0xFF	; 255
    bd0a:	0e 94 aa 48 	call	0x9154	; 0x9154 <validate>
    bd0e:	00 97       	sbiw	r24, 0x00	; 0
    bd10:	09 f0       	breq	.+2      	; 0xbd14 <f_sync+0x2c>
    bd12:	5d c0       	rjmp	.+186    	; 0xbdce <f_sync+0xe6>
    bd14:	f7 01       	movw	r30, r14
    bd16:	86 85       	ldd	r24, Z+14	; 0x0e
    bd18:	86 ff       	sbrs	r24, 6
    bd1a:	55 c0       	rjmp	.+170    	; 0xbdc6 <f_sync+0xde>
    bd1c:	87 ff       	sbrs	r24, 7
    bd1e:	15 c0       	rjmp	.+42     	; 0xbd4a <f_sync+0x62>
    bd20:	20 8d       	ldd	r18, Z+24	; 0x18
    bd22:	31 8d       	ldd	r19, Z+25	; 0x19
    bd24:	42 8d       	ldd	r20, Z+26	; 0x1a
    bd26:	53 8d       	ldd	r21, Z+27	; 0x1b
    bd28:	e9 81       	ldd	r30, Y+1	; 0x01
    bd2a:	fa 81       	ldd	r31, Y+2	; 0x02
    bd2c:	01 e0       	ldi	r16, 0x01	; 1
    bd2e:	10 e0       	ldi	r17, 0x00	; 0
    bd30:	b7 01       	movw	r22, r14
    bd32:	6c 5d       	subi	r22, 0xDC	; 220
    bd34:	7f 4f       	sbci	r23, 0xFF	; 255
    bd36:	81 81       	ldd	r24, Z+1	; 0x01
    bd38:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    bd3c:	89 2b       	or	r24, r25
    bd3e:	09 f0       	breq	.+2      	; 0xbd42 <f_sync+0x5a>
    bd40:	44 c0       	rjmp	.+136    	; 0xbdca <f_sync+0xe2>
    bd42:	f7 01       	movw	r30, r14
    bd44:	86 85       	ldd	r24, Z+14	; 0x0e
    bd46:	8f 77       	andi	r24, 0x7F	; 127
    bd48:	86 87       	std	Z+14, r24	; 0x0e
    bd4a:	0e 94 91 70 	call	0xe122	; 0xe122 <get_fattime>
    bd4e:	4b 01       	movw	r8, r22
    bd50:	5c 01       	movw	r10, r24
    bd52:	f7 01       	movw	r30, r14
    bd54:	44 8d       	ldd	r20, Z+28	; 0x1c
    bd56:	55 8d       	ldd	r21, Z+29	; 0x1d
    bd58:	66 8d       	ldd	r22, Z+30	; 0x1e
    bd5a:	77 8d       	ldd	r23, Z+31	; 0x1f
    bd5c:	89 81       	ldd	r24, Y+1	; 0x01
    bd5e:	9a 81       	ldd	r25, Y+2	; 0x02
    bd60:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    bd64:	00 97       	sbiw	r24, 0x00	; 0
    bd66:	99 f5       	brne	.+102    	; 0xbdce <f_sync+0xe6>
    bd68:	f7 01       	movw	r30, r14
    bd6a:	00 a1       	ldd	r16, Z+32	; 0x20
    bd6c:	11 a1       	ldd	r17, Z+33	; 0x21
    bd6e:	f8 01       	movw	r30, r16
    bd70:	83 85       	ldd	r24, Z+11	; 0x0b
    bd72:	80 62       	ori	r24, 0x20	; 32
    bd74:	83 87       	std	Z+11, r24	; 0x0b
    bd76:	f7 01       	movw	r30, r14
    bd78:	26 81       	ldd	r18, Z+6	; 0x06
    bd7a:	37 81       	ldd	r19, Z+7	; 0x07
    bd7c:	40 85       	ldd	r20, Z+8	; 0x08
    bd7e:	51 85       	ldd	r21, Z+9	; 0x09
    bd80:	b8 01       	movw	r22, r16
    bd82:	80 81       	ld	r24, Z
    bd84:	91 81       	ldd	r25, Z+1	; 0x01
    bd86:	0e 94 20 4a 	call	0x9440	; 0x9440 <st_clust.isra.4>
    bd8a:	f7 01       	movw	r30, r14
    bd8c:	42 85       	ldd	r20, Z+10	; 0x0a
    bd8e:	53 85       	ldd	r21, Z+11	; 0x0b
    bd90:	64 85       	ldd	r22, Z+12	; 0x0c
    bd92:	75 85       	ldd	r23, Z+13	; 0x0d
    bd94:	c8 01       	movw	r24, r16
    bd96:	4c 96       	adiw	r24, 0x1c	; 28
    bd98:	0e 94 ed 47 	call	0x8fda	; 0x8fda <st_dword>
    bd9c:	b5 01       	movw	r22, r10
    bd9e:	a4 01       	movw	r20, r8
    bda0:	c8 01       	movw	r24, r16
    bda2:	46 96       	adiw	r24, 0x16	; 22
    bda4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <st_dword>
    bda8:	f8 01       	movw	r30, r16
    bdaa:	12 8a       	std	Z+18, r1	; 0x12
    bdac:	13 8a       	std	Z+19, r1	; 0x13
    bdae:	89 81       	ldd	r24, Y+1	; 0x01
    bdb0:	9a 81       	ldd	r25, Y+2	; 0x02
    bdb2:	21 e0       	ldi	r18, 0x01	; 1
    bdb4:	fc 01       	movw	r30, r24
    bdb6:	23 83       	std	Z+3, r18	; 0x03
    bdb8:	0e 94 80 4a 	call	0x9500	; 0x9500 <sync_fs>
    bdbc:	f7 01       	movw	r30, r14
    bdbe:	26 85       	ldd	r18, Z+14	; 0x0e
    bdc0:	2f 7b       	andi	r18, 0xBF	; 191
    bdc2:	26 87       	std	Z+14, r18	; 0x0e
    bdc4:	04 c0       	rjmp	.+8      	; 0xbdce <f_sync+0xe6>
    bdc6:	80 e0       	ldi	r24, 0x00	; 0
    bdc8:	01 c0       	rjmp	.+2      	; 0xbdcc <f_sync+0xe4>
    bdca:	81 e0       	ldi	r24, 0x01	; 1
    bdcc:	90 e0       	ldi	r25, 0x00	; 0
    bdce:	0f 90       	pop	r0
    bdd0:	0f 90       	pop	r0
    bdd2:	df 91       	pop	r29
    bdd4:	cf 91       	pop	r28
    bdd6:	1f 91       	pop	r17
    bdd8:	0f 91       	pop	r16
    bdda:	ff 90       	pop	r15
    bddc:	ef 90       	pop	r14
    bdde:	bf 90       	pop	r11
    bde0:	af 90       	pop	r10
    bde2:	9f 90       	pop	r9
    bde4:	8f 90       	pop	r8
    bde6:	08 95       	ret

0000bde8 <f_close>:
    bde8:	a2 e0       	ldi	r26, 0x02	; 2
    bdea:	b0 e0       	ldi	r27, 0x00	; 0
    bdec:	ea ef       	ldi	r30, 0xFA	; 250
    bdee:	fe e5       	ldi	r31, 0x5E	; 94
    bdf0:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    bdf4:	8c 01       	movw	r16, r24
    bdf6:	78 df       	rcall	.-272    	; 0xbce8 <f_sync>
    bdf8:	00 97       	sbiw	r24, 0x00	; 0
    bdfa:	59 f4       	brne	.+22     	; 0xbe12 <f_close+0x2a>
    bdfc:	be 01       	movw	r22, r28
    bdfe:	6f 5f       	subi	r22, 0xFF	; 255
    be00:	7f 4f       	sbci	r23, 0xFF	; 255
    be02:	c8 01       	movw	r24, r16
    be04:	0e 94 aa 48 	call	0x9154	; 0x9154 <validate>
    be08:	00 97       	sbiw	r24, 0x00	; 0
    be0a:	19 f4       	brne	.+6      	; 0xbe12 <f_close+0x2a>
    be0c:	f8 01       	movw	r30, r16
    be0e:	11 82       	std	Z+1, r1	; 0x01
    be10:	10 82       	st	Z, r1
    be12:	22 96       	adiw	r28, 0x02	; 2
    be14:	e4 e0       	ldi	r30, 0x04	; 4
    be16:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

0000be1a <f_chdir>:
    be1a:	a2 e3       	ldi	r26, 0x32	; 50
    be1c:	b0 e0       	ldi	r27, 0x00	; 0
    be1e:	e3 e1       	ldi	r30, 0x13	; 19
    be20:	ff e5       	ldi	r31, 0x5F	; 95
    be22:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    be26:	9a ab       	std	Y+50, r25	; 0x32
    be28:	89 ab       	std	Y+49, r24	; 0x31
    be2a:	40 e0       	ldi	r20, 0x00	; 0
    be2c:	be 01       	movw	r22, r28
    be2e:	61 5d       	subi	r22, 0xD1	; 209
    be30:	7f 4f       	sbci	r23, 0xFF	; 255
    be32:	ce 01       	movw	r24, r28
    be34:	c1 96       	adiw	r24, 0x31	; 49
    be36:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
    be3a:	00 97       	sbiw	r24, 0x00	; 0
    be3c:	09 f0       	breq	.+2      	; 0xbe40 <f_chdir+0x26>
    be3e:	44 c0       	rjmp	.+136    	; 0xbec8 <f_chdir+0xae>
    be40:	8f a5       	ldd	r24, Y+47	; 0x2f
    be42:	98 a9       	ldd	r25, Y+48	; 0x30
    be44:	9a 83       	std	Y+2, r25	; 0x02
    be46:	89 83       	std	Y+1, r24	; 0x01
    be48:	80 e0       	ldi	r24, 0x00	; 0
    be4a:	92 e0       	ldi	r25, 0x02	; 2
    be4c:	0e 94 10 69 	call	0xd220	; 0xd220 <ff_memalloc>
    be50:	7c 01       	movw	r14, r24
    be52:	00 97       	sbiw	r24, 0x00	; 0
    be54:	a9 f1       	breq	.+106    	; 0xbec0 <f_chdir+0xa6>
    be56:	ef a5       	ldd	r30, Y+47	; 0x2f
    be58:	f8 a9       	ldd	r31, Y+48	; 0x30
    be5a:	94 87       	std	Z+12, r25	; 0x0c
    be5c:	83 87       	std	Z+11, r24	; 0x0b
    be5e:	69 a9       	ldd	r22, Y+49	; 0x31
    be60:	7a a9       	ldd	r23, Y+50	; 0x32
    be62:	ce 01       	movw	r24, r28
    be64:	01 96       	adiw	r24, 0x01	; 1
    be66:	2e d8       	rcall	.-4004   	; 0xaec4 <follow_path>
    be68:	8c 01       	movw	r16, r24
    be6a:	89 2b       	or	r24, r25
    be6c:	09 f5       	brne	.+66     	; 0xbeb0 <f_chdir+0x96>
    be6e:	88 a5       	ldd	r24, Y+40	; 0x28
    be70:	87 ff       	sbrs	r24, 7
    be72:	0b c0       	rjmp	.+22     	; 0xbe8a <f_chdir+0x70>
    be74:	ef a5       	ldd	r30, Y+47	; 0x2f
    be76:	f8 a9       	ldd	r31, Y+48	; 0x30
    be78:	8f 81       	ldd	r24, Y+7	; 0x07
    be7a:	98 85       	ldd	r25, Y+8	; 0x08
    be7c:	a9 85       	ldd	r26, Y+9	; 0x09
    be7e:	ba 85       	ldd	r27, Y+10	; 0x0a
    be80:	85 8b       	std	Z+21, r24	; 0x15
    be82:	96 8b       	std	Z+22, r25	; 0x16
    be84:	a7 8b       	std	Z+23, r26	; 0x17
    be86:	b0 8f       	std	Z+24, r27	; 0x18
    be88:	13 c0       	rjmp	.+38     	; 0xbeb0 <f_chdir+0x96>
    be8a:	8d 81       	ldd	r24, Y+5	; 0x05
    be8c:	84 ff       	sbrs	r24, 4
    be8e:	0e c0       	rjmp	.+28     	; 0xbeac <f_chdir+0x92>
    be90:	cf a4       	ldd	r12, Y+47	; 0x2f
    be92:	d8 a8       	ldd	r13, Y+48	; 0x30
    be94:	6b 8d       	ldd	r22, Y+27	; 0x1b
    be96:	7c 8d       	ldd	r23, Y+28	; 0x1c
    be98:	f6 01       	movw	r30, r12
    be9a:	80 81       	ld	r24, Z
    be9c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <ld_clust.isra.3>
    bea0:	f6 01       	movw	r30, r12
    bea2:	65 8b       	std	Z+21, r22	; 0x15
    bea4:	76 8b       	std	Z+22, r23	; 0x16
    bea6:	87 8b       	std	Z+23, r24	; 0x17
    bea8:	90 8f       	std	Z+24, r25	; 0x18
    beaa:	02 c0       	rjmp	.+4      	; 0xbeb0 <f_chdir+0x96>
    beac:	05 e0       	ldi	r16, 0x05	; 5
    beae:	10 e0       	ldi	r17, 0x00	; 0
    beb0:	c7 01       	movw	r24, r14
    beb2:	0e 94 13 69 	call	0xd226	; 0xd226 <ff_memfree>
    beb6:	04 30       	cpi	r16, 0x04	; 4
    beb8:	11 05       	cpc	r17, r1
    beba:	29 f4       	brne	.+10     	; 0xbec6 <f_chdir+0xac>
    bebc:	85 e0       	ldi	r24, 0x05	; 5
    bebe:	01 c0       	rjmp	.+2      	; 0xbec2 <f_chdir+0xa8>
    bec0:	81 e1       	ldi	r24, 0x11	; 17
    bec2:	90 e0       	ldi	r25, 0x00	; 0
    bec4:	01 c0       	rjmp	.+2      	; 0xbec8 <f_chdir+0xae>
    bec6:	c8 01       	movw	r24, r16
    bec8:	e2 96       	adiw	r28, 0x32	; 50
    beca:	e8 e0       	ldi	r30, 0x08	; 8
    becc:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000bed0 <f_getcwd>:
    bed0:	a8 e4       	ldi	r26, 0x48	; 72
    bed2:	b1 e0       	ldi	r27, 0x01	; 1
    bed4:	ee e6       	ldi	r30, 0x6E	; 110
    bed6:	ff e5       	ldi	r31, 0x5F	; 95
    bed8:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    bedc:	c9 5b       	subi	r28, 0xB9	; 185
    bede:	de 4f       	sbci	r29, 0xFE	; 254
    bee0:	99 83       	std	Y+1, r25	; 0x01
    bee2:	88 83       	st	Y, r24
    bee4:	c7 54       	subi	r28, 0x47	; 71
    bee6:	d1 40       	sbci	r29, 0x01	; 1
    bee8:	4b 01       	movw	r8, r22
    beea:	7c 01       	movw	r14, r24
    beec:	fc 01       	movw	r30, r24
    beee:	10 82       	st	Z, r1
    bef0:	40 e0       	ldi	r20, 0x00	; 0
    bef2:	be 01       	movw	r22, r28
    bef4:	6b 5b       	subi	r22, 0xBB	; 187
    bef6:	7e 4f       	sbci	r23, 0xFE	; 254
    bef8:	ce 01       	movw	r24, r28
    befa:	89 5b       	subi	r24, 0xB9	; 185
    befc:	9e 4f       	sbci	r25, 0xFE	; 254
    befe:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
    bf02:	1c 01       	movw	r2, r24
    bf04:	89 2b       	or	r24, r25
    bf06:	09 f0       	breq	.+2      	; 0xbf0a <f_getcwd+0x3a>
    bf08:	03 c1       	rjmp	.+518    	; 0xc110 <f_getcwd+0x240>
    bf0a:	cb 5b       	subi	r28, 0xBB	; 187
    bf0c:	de 4f       	sbci	r29, 0xFE	; 254
    bf0e:	88 81       	ld	r24, Y
    bf10:	99 81       	ldd	r25, Y+1	; 0x01
    bf12:	c5 54       	subi	r28, 0x45	; 69
    bf14:	d1 40       	sbci	r29, 0x01	; 1
    bf16:	c9 5e       	subi	r28, 0xE9	; 233
    bf18:	de 4f       	sbci	r29, 0xFE	; 254
    bf1a:	99 83       	std	Y+1, r25	; 0x01
    bf1c:	88 83       	st	Y, r24
    bf1e:	c7 51       	subi	r28, 0x17	; 23
    bf20:	d1 40       	sbci	r29, 0x01	; 1
    bf22:	80 e0       	ldi	r24, 0x00	; 0
    bf24:	92 e0       	ldi	r25, 0x02	; 2
    bf26:	0e 94 10 69 	call	0xd220	; 0xd220 <ff_memalloc>
    bf2a:	5c 01       	movw	r10, r24
    bf2c:	00 97       	sbiw	r24, 0x00	; 0
    bf2e:	09 f4       	brne	.+2      	; 0xbf32 <f_getcwd+0x62>
    bf30:	f3 c0       	rjmp	.+486    	; 0xc118 <f_getcwd+0x248>
    bf32:	cb 5b       	subi	r28, 0xBB	; 187
    bf34:	de 4f       	sbci	r29, 0xFE	; 254
    bf36:	e8 81       	ld	r30, Y
    bf38:	f9 81       	ldd	r31, Y+1	; 0x01
    bf3a:	c5 54       	subi	r28, 0x45	; 69
    bf3c:	d1 40       	sbci	r29, 0x01	; 1
    bf3e:	94 87       	std	Z+12, r25	; 0x0c
    bf40:	83 87       	std	Z+11, r24	; 0x0b
    bf42:	85 89       	ldd	r24, Z+21	; 0x15
    bf44:	96 89       	ldd	r25, Z+22	; 0x16
    bf46:	a7 89       	ldd	r26, Z+23	; 0x17
    bf48:	b0 8d       	ldd	r27, Z+24	; 0x18
    bf4a:	c3 5e       	subi	r28, 0xE3	; 227
    bf4c:	de 4f       	sbci	r29, 0xFE	; 254
    bf4e:	88 83       	st	Y, r24
    bf50:	99 83       	std	Y+1, r25	; 0x01
    bf52:	aa 83       	std	Y+2, r26	; 0x02
    bf54:	bb 83       	std	Y+3, r27	; 0x03
    bf56:	cd 51       	subi	r28, 0x1D	; 29
    bf58:	d1 40       	sbci	r29, 0x01	; 1
    bf5a:	84 01       	movw	r16, r8
    bf5c:	ce 01       	movw	r24, r28
    bf5e:	01 96       	adiw	r24, 0x01	; 1
    bf60:	6c 01       	movw	r12, r24
    bf62:	c3 5e       	subi	r28, 0xE3	; 227
    bf64:	de 4f       	sbci	r29, 0xFE	; 254
    bf66:	48 80       	ld	r4, Y
    bf68:	59 80       	ldd	r5, Y+1	; 0x01
    bf6a:	6a 80       	ldd	r6, Y+2	; 0x02
    bf6c:	7b 80       	ldd	r7, Y+3	; 0x03
    bf6e:	cd 51       	subi	r28, 0x1D	; 29
    bf70:	d1 40       	sbci	r29, 0x01	; 1
    bf72:	41 14       	cp	r4, r1
    bf74:	51 04       	cpc	r5, r1
    bf76:	61 04       	cpc	r6, r1
    bf78:	71 04       	cpc	r7, r1
    bf7a:	09 f4       	brne	.+2      	; 0xbf7e <f_getcwd+0xae>
    bf7c:	a3 c0       	rjmp	.+326    	; 0xc0c4 <f_getcwd+0x1f4>
    bf7e:	40 e2       	ldi	r20, 0x20	; 32
    bf80:	50 e0       	ldi	r21, 0x00	; 0
    bf82:	60 e0       	ldi	r22, 0x00	; 0
    bf84:	70 e0       	ldi	r23, 0x00	; 0
    bf86:	ce 01       	movw	r24, r28
    bf88:	89 5e       	subi	r24, 0xE9	; 233
    bf8a:	9e 4f       	sbci	r25, 0xFE	; 254
    bf8c:	0e 94 1c 50 	call	0xa038	; 0xa038 <dir_sdi>
    bf90:	00 97       	sbiw	r24, 0x00	; 0
    bf92:	09 f0       	breq	.+2      	; 0xbf96 <f_getcwd+0xc6>
    bf94:	c6 c0       	rjmp	.+396    	; 0xc122 <f_getcwd+0x252>
    bf96:	c3 5d       	subi	r28, 0xD3	; 211
    bf98:	de 4f       	sbci	r29, 0xFE	; 254
    bf9a:	48 81       	ld	r20, Y
    bf9c:	59 81       	ldd	r21, Y+1	; 0x01
    bf9e:	6a 81       	ldd	r22, Y+2	; 0x02
    bfa0:	7b 81       	ldd	r23, Y+3	; 0x03
    bfa2:	cd 52       	subi	r28, 0x2D	; 45
    bfa4:	d1 40       	sbci	r29, 0x01	; 1
    bfa6:	cb 5b       	subi	r28, 0xBB	; 187
    bfa8:	de 4f       	sbci	r29, 0xFE	; 254
    bfaa:	88 81       	ld	r24, Y
    bfac:	99 81       	ldd	r25, Y+1	; 0x01
    bfae:	c5 54       	subi	r28, 0x45	; 69
    bfb0:	d1 40       	sbci	r29, 0x01	; 1
    bfb2:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    bfb6:	00 97       	sbiw	r24, 0x00	; 0
    bfb8:	09 f0       	breq	.+2      	; 0xbfbc <f_getcwd+0xec>
    bfba:	b3 c0       	rjmp	.+358    	; 0xc122 <f_getcwd+0x252>
    bfbc:	cf 5c       	subi	r28, 0xCF	; 207
    bfbe:	de 4f       	sbci	r29, 0xFE	; 254
    bfc0:	68 81       	ld	r22, Y
    bfc2:	79 81       	ldd	r23, Y+1	; 0x01
    bfc4:	c1 53       	subi	r28, 0x31	; 49
    bfc6:	d1 40       	sbci	r29, 0x01	; 1
    bfc8:	cb 5b       	subi	r28, 0xBB	; 187
    bfca:	de 4f       	sbci	r29, 0xFE	; 254
    bfcc:	e8 81       	ld	r30, Y
    bfce:	f9 81       	ldd	r31, Y+1	; 0x01
    bfd0:	c5 54       	subi	r28, 0x45	; 69
    bfd2:	d1 40       	sbci	r29, 0x01	; 1
    bfd4:	80 81       	ld	r24, Z
    bfd6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <ld_clust.isra.3>
    bfda:	c3 5e       	subi	r28, 0xE3	; 227
    bfdc:	de 4f       	sbci	r29, 0xFE	; 254
    bfde:	68 83       	st	Y, r22
    bfe0:	79 83       	std	Y+1, r23	; 0x01
    bfe2:	8a 83       	std	Y+2, r24	; 0x02
    bfe4:	9b 83       	std	Y+3, r25	; 0x03
    bfe6:	cd 51       	subi	r28, 0x1D	; 29
    bfe8:	d1 40       	sbci	r29, 0x01	; 1
    bfea:	40 e0       	ldi	r20, 0x00	; 0
    bfec:	50 e0       	ldi	r21, 0x00	; 0
    bfee:	ba 01       	movw	r22, r20
    bff0:	ce 01       	movw	r24, r28
    bff2:	89 5e       	subi	r24, 0xE9	; 233
    bff4:	9e 4f       	sbci	r25, 0xFE	; 254
    bff6:	0e 94 1c 50 	call	0xa038	; 0xa038 <dir_sdi>
    bffa:	00 97       	sbiw	r24, 0x00	; 0
    bffc:	09 f0       	breq	.+2      	; 0xc000 <f_getcwd+0x130>
    bffe:	91 c0       	rjmp	.+290    	; 0xc122 <f_getcwd+0x252>
    c000:	60 e0       	ldi	r22, 0x00	; 0
    c002:	70 e0       	ldi	r23, 0x00	; 0
    c004:	ce 01       	movw	r24, r28
    c006:	89 5e       	subi	r24, 0xE9	; 233
    c008:	9e 4f       	sbci	r25, 0xFE	; 254
    c00a:	0e 94 b5 53 	call	0xa76a	; 0xa76a <dir_read>
    c00e:	00 97       	sbiw	r24, 0x00	; 0
    c010:	09 f0       	breq	.+2      	; 0xc014 <f_getcwd+0x144>
    c012:	89 c0       	rjmp	.+274    	; 0xc126 <f_getcwd+0x256>
    c014:	cf 5c       	subi	r28, 0xCF	; 207
    c016:	de 4f       	sbci	r29, 0xFE	; 254
    c018:	68 81       	ld	r22, Y
    c01a:	79 81       	ldd	r23, Y+1	; 0x01
    c01c:	c1 53       	subi	r28, 0x31	; 49
    c01e:	d1 40       	sbci	r29, 0x01	; 1
    c020:	cb 5b       	subi	r28, 0xBB	; 187
    c022:	de 4f       	sbci	r29, 0xFE	; 254
    c024:	e8 81       	ld	r30, Y
    c026:	f9 81       	ldd	r31, Y+1	; 0x01
    c028:	c5 54       	subi	r28, 0x45	; 69
    c02a:	d1 40       	sbci	r29, 0x01	; 1
    c02c:	80 81       	ld	r24, Z
    c02e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <ld_clust.isra.3>
    c032:	46 16       	cp	r4, r22
    c034:	57 06       	cpc	r5, r23
    c036:	68 06       	cpc	r6, r24
    c038:	79 06       	cpc	r7, r25
    c03a:	41 f4       	brne	.+16     	; 0xc04c <f_getcwd+0x17c>
    c03c:	b6 01       	movw	r22, r12
    c03e:	ce 01       	movw	r24, r28
    c040:	89 5e       	subi	r24, 0xE9	; 233
    c042:	9e 4f       	sbci	r25, 0xFE	; 254
    c044:	0e 94 d6 48 	call	0x91ac	; 0x91ac <get_fileinfo>
    c048:	f6 01       	movw	r30, r12
    c04a:	0a c0       	rjmp	.+20     	; 0xc060 <f_getcwd+0x190>
    c04c:	60 e0       	ldi	r22, 0x00	; 0
    c04e:	70 e0       	ldi	r23, 0x00	; 0
    c050:	ce 01       	movw	r24, r28
    c052:	89 5e       	subi	r24, 0xE9	; 233
    c054:	9e 4f       	sbci	r25, 0xFE	; 254
    c056:	0e 94 94 52 	call	0xa528	; 0xa528 <dir_next>
    c05a:	00 97       	sbiw	r24, 0x00	; 0
    c05c:	89 f2       	breq	.-94     	; 0xc000 <f_getcwd+0x130>
    c05e:	63 c0       	rjmp	.+198    	; 0xc126 <f_getcwd+0x256>
    c060:	cf 01       	movw	r24, r30
    c062:	8c 19       	sub	r24, r12
    c064:	9d 09       	sbc	r25, r13
    c066:	31 96       	adiw	r30, 0x01	; 1
    c068:	25 89       	ldd	r18, Z+21	; 0x15
    c06a:	21 11       	cpse	r18, r1
    c06c:	f9 cf       	rjmp	.-14     	; 0xc060 <f_getcwd+0x190>
    c06e:	9c 01       	movw	r18, r24
    c070:	2f 5f       	subi	r18, 0xFF	; 255
    c072:	3f 4f       	sbci	r19, 0xFF	; 255
    c074:	02 17       	cp	r16, r18
    c076:	13 07       	cpc	r17, r19
    c078:	08 f4       	brcc	.+2      	; 0xc07c <f_getcwd+0x1ac>
    c07a:	51 c0       	rjmp	.+162    	; 0xc11e <f_getcwd+0x24e>
    c07c:	f6 01       	movw	r30, r12
    c07e:	e8 0f       	add	r30, r24
    c080:	f9 1f       	adc	r31, r25
    c082:	98 01       	movw	r18, r16
    c084:	ce 16       	cp	r12, r30
    c086:	df 06       	cpc	r13, r31
    c088:	71 f0       	breq	.+28     	; 0xc0a6 <f_getcwd+0x1d6>
    c08a:	21 50       	subi	r18, 0x01	; 1
    c08c:	31 09       	sbc	r19, r1
    c08e:	45 89       	ldd	r20, Z+21	; 0x15
    c090:	c9 5b       	subi	r28, 0xB9	; 185
    c092:	de 4f       	sbci	r29, 0xFE	; 254
    c094:	a8 81       	ld	r26, Y
    c096:	b9 81       	ldd	r27, Y+1	; 0x01
    c098:	c7 54       	subi	r28, 0x47	; 71
    c09a:	d1 40       	sbci	r29, 0x01	; 1
    c09c:	a2 0f       	add	r26, r18
    c09e:	b3 1f       	adc	r27, r19
    c0a0:	4c 93       	st	X, r20
    c0a2:	31 97       	sbiw	r30, 0x01	; 1
    c0a4:	ef cf       	rjmp	.-34     	; 0xc084 <f_getcwd+0x1b4>
    c0a6:	80 95       	com	r24
    c0a8:	90 95       	com	r25
    c0aa:	08 0f       	add	r16, r24
    c0ac:	19 1f       	adc	r17, r25
    c0ae:	c9 5b       	subi	r28, 0xB9	; 185
    c0b0:	de 4f       	sbci	r29, 0xFE	; 254
    c0b2:	e8 81       	ld	r30, Y
    c0b4:	f9 81       	ldd	r31, Y+1	; 0x01
    c0b6:	c7 54       	subi	r28, 0x47	; 71
    c0b8:	d1 40       	sbci	r29, 0x01	; 1
    c0ba:	e0 0f       	add	r30, r16
    c0bc:	f1 1f       	adc	r31, r17
    c0be:	9f e2       	ldi	r25, 0x2F	; 47
    c0c0:	90 83       	st	Z, r25
    c0c2:	4f cf       	rjmp	.-354    	; 0xbf62 <f_getcwd+0x92>
    c0c4:	08 15       	cp	r16, r8
    c0c6:	19 05       	cpc	r17, r9
    c0c8:	61 f4       	brne	.+24     	; 0xc0e2 <f_getcwd+0x212>
    c0ca:	01 50       	subi	r16, 0x01	; 1
    c0cc:	11 09       	sbc	r17, r1
    c0ce:	c9 5b       	subi	r28, 0xB9	; 185
    c0d0:	de 4f       	sbci	r29, 0xFE	; 254
    c0d2:	e8 81       	ld	r30, Y
    c0d4:	f9 81       	ldd	r31, Y+1	; 0x01
    c0d6:	c7 54       	subi	r28, 0x47	; 71
    c0d8:	d1 40       	sbci	r29, 0x01	; 1
    c0da:	e0 0f       	add	r30, r16
    c0dc:	f1 1f       	adc	r31, r17
    c0de:	8f e2       	ldi	r24, 0x2F	; 47
    c0e0:	80 83       	st	Z, r24
    c0e2:	ef ef       	ldi	r30, 0xFF	; 255
    c0e4:	ee 1a       	sub	r14, r30
    c0e6:	fe 0a       	sbc	r15, r30
    c0e8:	c9 5b       	subi	r28, 0xB9	; 185
    c0ea:	de 4f       	sbci	r29, 0xFE	; 254
    c0ec:	e8 81       	ld	r30, Y
    c0ee:	f9 81       	ldd	r31, Y+1	; 0x01
    c0f0:	c7 54       	subi	r28, 0x47	; 71
    c0f2:	d1 40       	sbci	r29, 0x01	; 1
    c0f4:	e0 0f       	add	r30, r16
    c0f6:	f1 1f       	adc	r31, r17
    c0f8:	80 81       	ld	r24, Z
    c0fa:	f7 01       	movw	r30, r14
    c0fc:	31 97       	sbiw	r30, 0x01	; 1
    c0fe:	80 83       	st	Z, r24
    c100:	0f 5f       	subi	r16, 0xFF	; 255
    c102:	1f 4f       	sbci	r17, 0xFF	; 255
    c104:	08 15       	cp	r16, r8
    c106:	19 05       	cpc	r17, r9
    c108:	60 f3       	brcs	.-40     	; 0xc0e2 <f_getcwd+0x212>
    c10a:	c5 01       	movw	r24, r10
    c10c:	0e 94 13 69 	call	0xd226	; 0xd226 <ff_memfree>
    c110:	f7 01       	movw	r30, r14
    c112:	10 82       	st	Z, r1
    c114:	c1 01       	movw	r24, r2
    c116:	0d c0       	rjmp	.+26     	; 0xc132 <f_getcwd+0x262>
    c118:	81 e1       	ldi	r24, 0x11	; 17
    c11a:	90 e0       	ldi	r25, 0x00	; 0
    c11c:	0a c0       	rjmp	.+20     	; 0xc132 <f_getcwd+0x262>
    c11e:	81 e1       	ldi	r24, 0x11	; 17
    c120:	90 e0       	ldi	r25, 0x00	; 0
    c122:	1c 01       	movw	r2, r24
    c124:	f2 cf       	rjmp	.-28     	; 0xc10a <f_getcwd+0x23a>
    c126:	84 30       	cpi	r24, 0x04	; 4
    c128:	91 05       	cpc	r25, r1
    c12a:	d9 f7       	brne	.-10     	; 0xc122 <f_getcwd+0x252>
    c12c:	82 e0       	ldi	r24, 0x02	; 2
    c12e:	90 e0       	ldi	r25, 0x00	; 0
    c130:	f8 cf       	rjmp	.-16     	; 0xc122 <f_getcwd+0x252>
    c132:	c8 5b       	subi	r28, 0xB8	; 184
    c134:	de 4f       	sbci	r29, 0xFE	; 254
    c136:	e2 e1       	ldi	r30, 0x12	; 18
    c138:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0000c13c <f_lseek>:
    c13c:	aa e0       	ldi	r26, 0x0A	; 10
    c13e:	b0 e0       	ldi	r27, 0x00	; 0
    c140:	e4 ea       	ldi	r30, 0xA4	; 164
    c142:	f0 e6       	ldi	r31, 0x60	; 96
    c144:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    c148:	1c 01       	movw	r2, r24
    c14a:	6a 01       	movw	r12, r20
    c14c:	7b 01       	movw	r14, r22
    c14e:	be 01       	movw	r22, r28
    c150:	6f 5f       	subi	r22, 0xFF	; 255
    c152:	7f 4f       	sbci	r23, 0xFF	; 255
    c154:	0e 94 aa 48 	call	0x9154	; 0x9154 <validate>
    c158:	00 97       	sbiw	r24, 0x00	; 0
    c15a:	09 f0       	breq	.+2      	; 0xc15e <f_lseek+0x22>
    c15c:	a6 c2       	rjmp	.+1356   	; 0xc6aa <f_lseek+0x56e>
    c15e:	f1 01       	movw	r30, r2
    c160:	87 85       	ldd	r24, Z+15	; 0x0f
    c162:	90 e0       	ldi	r25, 0x00	; 0
    c164:	00 97       	sbiw	r24, 0x00	; 0
    c166:	09 f0       	breq	.+2      	; 0xc16a <f_lseek+0x2e>
    c168:	a0 c2       	rjmp	.+1344   	; 0xc6aa <f_lseek+0x56e>
    c16a:	22 a1       	ldd	r18, Z+34	; 0x22
    c16c:	33 a1       	ldd	r19, Z+35	; 0x23
    c16e:	21 15       	cp	r18, r1
    c170:	31 05       	cpc	r19, r1
    c172:	09 f4       	brne	.+2      	; 0xc176 <f_lseek+0x3a>
    c174:	2d c1       	rjmp	.+602    	; 0xc3d0 <f_lseek+0x294>
    c176:	ff ef       	ldi	r31, 0xFF	; 255
    c178:	cf 16       	cp	r12, r31
    c17a:	df 06       	cpc	r13, r31
    c17c:	ef 06       	cpc	r14, r31
    c17e:	ff 06       	cpc	r15, r31
    c180:	09 f0       	breq	.+2      	; 0xc184 <f_lseek+0x48>
    c182:	9a c0       	rjmp	.+308    	; 0xc2b8 <f_lseek+0x17c>
    c184:	89 01       	movw	r16, r18
    c186:	0c 5f       	subi	r16, 0xFC	; 252
    c188:	1f 4f       	sbci	r17, 0xFF	; 255
    c18a:	d9 01       	movw	r26, r18
    c18c:	4d 91       	ld	r20, X+
    c18e:	5d 91       	ld	r21, X+
    c190:	6d 91       	ld	r22, X+
    c192:	7c 91       	ld	r23, X
    c194:	4f 83       	std	Y+7, r20	; 0x07
    c196:	58 87       	std	Y+8, r21	; 0x08
    c198:	69 87       	std	Y+9, r22	; 0x09
    c19a:	7a 87       	std	Y+10, r23	; 0x0a
    c19c:	f1 01       	movw	r30, r2
    c19e:	86 80       	ldd	r8, Z+6	; 0x06
    c1a0:	97 80       	ldd	r9, Z+7	; 0x07
    c1a2:	a0 84       	ldd	r10, Z+8	; 0x08
    c1a4:	b1 84       	ldd	r11, Z+9	; 0x09
    c1a6:	52 e0       	ldi	r21, 0x02	; 2
    c1a8:	c5 2e       	mov	r12, r21
    c1aa:	d1 2c       	mov	r13, r1
    c1ac:	e1 2c       	mov	r14, r1
    c1ae:	f1 2c       	mov	r15, r1
    c1b0:	81 14       	cp	r8, r1
    c1b2:	91 04       	cpc	r9, r1
    c1b4:	a1 04       	cpc	r10, r1
    c1b6:	b1 04       	cpc	r11, r1
    c1b8:	09 f4       	brne	.+2      	; 0xc1bc <f_lseek+0x80>
    c1ba:	65 c0       	rjmp	.+202    	; 0xc286 <f_lseek+0x14a>
    c1bc:	24 01       	movw	r4, r8
    c1be:	35 01       	movw	r6, r10
    c1c0:	1b 82       	std	Y+3, r1	; 0x03
    c1c2:	1c 82       	std	Y+4, r1	; 0x04
    c1c4:	1d 82       	std	Y+5, r1	; 0x05
    c1c6:	1e 82       	std	Y+6, r1	; 0x06
    c1c8:	2b 81       	ldd	r18, Y+3	; 0x03
    c1ca:	3c 81       	ldd	r19, Y+4	; 0x04
    c1cc:	4d 81       	ldd	r20, Y+5	; 0x05
    c1ce:	5e 81       	ldd	r21, Y+6	; 0x06
    c1d0:	2f 5f       	subi	r18, 0xFF	; 255
    c1d2:	3f 4f       	sbci	r19, 0xFF	; 255
    c1d4:	4f 4f       	sbci	r20, 0xFF	; 255
    c1d6:	5f 4f       	sbci	r21, 0xFF	; 255
    c1d8:	2b 83       	std	Y+3, r18	; 0x03
    c1da:	3c 83       	std	Y+4, r19	; 0x04
    c1dc:	4d 83       	std	Y+5, r20	; 0x05
    c1de:	5e 83       	std	Y+6, r21	; 0x06
    c1e0:	b3 01       	movw	r22, r6
    c1e2:	a2 01       	movw	r20, r4
    c1e4:	d1 01       	movw	r26, r2
    c1e6:	8d 91       	ld	r24, X+
    c1e8:	9c 91       	ld	r25, X
    c1ea:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <get_fat.isra.9>
    c1ee:	62 30       	cpi	r22, 0x02	; 2
    c1f0:	71 05       	cpc	r23, r1
    c1f2:	81 05       	cpc	r24, r1
    c1f4:	91 05       	cpc	r25, r1
    c1f6:	10 f4       	brcc	.+4      	; 0xc1fc <f_lseek+0xc0>
    c1f8:	82 e0       	ldi	r24, 0x02	; 2
    c1fa:	07 c0       	rjmp	.+14     	; 0xc20a <f_lseek+0xce>
    c1fc:	6f 3f       	cpi	r22, 0xFF	; 255
    c1fe:	ff ef       	ldi	r31, 0xFF	; 255
    c200:	7f 07       	cpc	r23, r31
    c202:	8f 07       	cpc	r24, r31
    c204:	9f 07       	cpc	r25, r31
    c206:	29 f4       	brne	.+10     	; 0xc212 <f_lseek+0xd6>
    c208:	81 e0       	ldi	r24, 0x01	; 1
    c20a:	f1 01       	movw	r30, r2
    c20c:	87 87       	std	Z+15, r24	; 0x0f
    c20e:	90 e0       	ldi	r25, 0x00	; 0
    c210:	4c c2       	rjmp	.+1176   	; 0xc6aa <f_lseek+0x56e>
    c212:	a3 01       	movw	r20, r6
    c214:	92 01       	movw	r18, r4
    c216:	2f 5f       	subi	r18, 0xFF	; 255
    c218:	3f 4f       	sbci	r19, 0xFF	; 255
    c21a:	4f 4f       	sbci	r20, 0xFF	; 255
    c21c:	5f 4f       	sbci	r21, 0xFF	; 255
    c21e:	2b 01       	movw	r4, r22
    c220:	3c 01       	movw	r6, r24
    c222:	62 17       	cp	r22, r18
    c224:	73 07       	cpc	r23, r19
    c226:	84 07       	cpc	r24, r20
    c228:	95 07       	cpc	r25, r21
    c22a:	71 f2       	breq	.-100    	; 0xc1c8 <f_lseek+0x8c>
    c22c:	f2 e0       	ldi	r31, 0x02	; 2
    c22e:	cf 0e       	add	r12, r31
    c230:	d1 1c       	adc	r13, r1
    c232:	e1 1c       	adc	r14, r1
    c234:	f1 1c       	adc	r15, r1
    c236:	2f 81       	ldd	r18, Y+7	; 0x07
    c238:	38 85       	ldd	r19, Y+8	; 0x08
    c23a:	49 85       	ldd	r20, Y+9	; 0x09
    c23c:	5a 85       	ldd	r21, Y+10	; 0x0a
    c23e:	2c 15       	cp	r18, r12
    c240:	3d 05       	cpc	r19, r13
    c242:	4e 05       	cpc	r20, r14
    c244:	5f 05       	cpc	r21, r15
    c246:	88 f0       	brcs	.+34     	; 0xc26a <f_lseek+0x12e>
    c248:	2b 81       	ldd	r18, Y+3	; 0x03
    c24a:	3c 81       	ldd	r19, Y+4	; 0x04
    c24c:	4d 81       	ldd	r20, Y+5	; 0x05
    c24e:	5e 81       	ldd	r21, Y+6	; 0x06
    c250:	d8 01       	movw	r26, r16
    c252:	2d 93       	st	X+, r18
    c254:	3d 93       	st	X+, r19
    c256:	4d 93       	st	X+, r20
    c258:	5c 93       	st	X, r21
    c25a:	13 97       	sbiw	r26, 0x03	; 3
    c25c:	f8 01       	movw	r30, r16
    c25e:	84 82       	std	Z+4, r8	; 0x04
    c260:	95 82       	std	Z+5, r9	; 0x05
    c262:	a6 82       	std	Z+6, r10	; 0x06
    c264:	b7 82       	std	Z+7, r11	; 0x07
    c266:	08 5f       	subi	r16, 0xF8	; 248
    c268:	1f 4f       	sbci	r17, 0xFF	; 255
    c26a:	e9 81       	ldd	r30, Y+1	; 0x01
    c26c:	fa 81       	ldd	r31, Y+2	; 0x02
    c26e:	81 8c       	ldd	r8, Z+25	; 0x19
    c270:	92 8c       	ldd	r9, Z+26	; 0x1a
    c272:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c274:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c276:	68 15       	cp	r22, r8
    c278:	79 05       	cpc	r23, r9
    c27a:	8a 05       	cpc	r24, r10
    c27c:	9b 05       	cpc	r25, r11
    c27e:	18 f4       	brcc	.+6      	; 0xc286 <f_lseek+0x14a>
    c280:	4b 01       	movw	r8, r22
    c282:	5c 01       	movw	r10, r24
    c284:	9b cf       	rjmp	.-202    	; 0xc1bc <f_lseek+0x80>
    c286:	f1 01       	movw	r30, r2
    c288:	a2 a1       	ldd	r26, Z+34	; 0x22
    c28a:	b3 a1       	ldd	r27, Z+35	; 0x23
    c28c:	cd 92       	st	X+, r12
    c28e:	dd 92       	st	X+, r13
    c290:	ed 92       	st	X+, r14
    c292:	fc 92       	st	X, r15
    c294:	13 97       	sbiw	r26, 0x03	; 3
    c296:	2f 81       	ldd	r18, Y+7	; 0x07
    c298:	38 85       	ldd	r19, Y+8	; 0x08
    c29a:	49 85       	ldd	r20, Y+9	; 0x09
    c29c:	5a 85       	ldd	r21, Y+10	; 0x0a
    c29e:	2c 15       	cp	r18, r12
    c2a0:	3d 05       	cpc	r19, r13
    c2a2:	4e 05       	cpc	r20, r14
    c2a4:	5f 05       	cpc	r21, r15
    c2a6:	08 f4       	brcc	.+2      	; 0xc2aa <f_lseek+0x16e>
    c2a8:	f7 c1       	rjmp	.+1006   	; 0xc698 <f_lseek+0x55c>
    c2aa:	d8 01       	movw	r26, r16
    c2ac:	1d 92       	st	X+, r1
    c2ae:	1d 92       	st	X+, r1
    c2b0:	1d 92       	st	X+, r1
    c2b2:	1c 92       	st	X, r1
    c2b4:	13 97       	sbiw	r26, 0x03	; 3
    c2b6:	ee c1       	rjmp	.+988    	; 0xc694 <f_lseek+0x558>
    c2b8:	f1 01       	movw	r30, r2
    c2ba:	82 85       	ldd	r24, Z+10	; 0x0a
    c2bc:	93 85       	ldd	r25, Z+11	; 0x0b
    c2be:	a4 85       	ldd	r26, Z+12	; 0x0c
    c2c0:	b5 85       	ldd	r27, Z+13	; 0x0d
    c2c2:	46 01       	movw	r8, r12
    c2c4:	57 01       	movw	r10, r14
    c2c6:	8c 15       	cp	r24, r12
    c2c8:	9d 05       	cpc	r25, r13
    c2ca:	ae 05       	cpc	r26, r14
    c2cc:	bf 05       	cpc	r27, r15
    c2ce:	10 f4       	brcc	.+4      	; 0xc2d4 <f_lseek+0x198>
    c2d0:	4c 01       	movw	r8, r24
    c2d2:	5d 01       	movw	r10, r26
    c2d4:	f1 01       	movw	r30, r2
    c2d6:	80 8a       	std	Z+16, r8	; 0x10
    c2d8:	91 8a       	std	Z+17, r9	; 0x11
    c2da:	a2 8a       	std	Z+18, r10	; 0x12
    c2dc:	b3 8a       	std	Z+19, r11	; 0x13
    c2de:	81 14       	cp	r8, r1
    c2e0:	91 04       	cpc	r9, r1
    c2e2:	a1 04       	cpc	r10, r1
    c2e4:	b1 04       	cpc	r11, r1
    c2e6:	09 f4       	brne	.+2      	; 0xc2ea <f_lseek+0x1ae>
    c2e8:	d5 c1       	rjmp	.+938    	; 0xc694 <f_lseek+0x558>
    c2ea:	24 01       	movw	r4, r8
    c2ec:	35 01       	movw	r6, r10
    c2ee:	f1 e0       	ldi	r31, 0x01	; 1
    c2f0:	4f 1a       	sub	r4, r31
    c2f2:	51 08       	sbc	r5, r1
    c2f4:	61 08       	sbc	r6, r1
    c2f6:	71 08       	sbc	r7, r1
    c2f8:	b3 01       	movw	r22, r6
    c2fa:	a2 01       	movw	r20, r4
    c2fc:	c1 01       	movw	r24, r2
    c2fe:	0e 94 33 48 	call	0x9066	; 0x9066 <clmt_clust>
    c302:	ab 01       	movw	r20, r22
    c304:	bc 01       	movw	r22, r24
    c306:	f1 01       	movw	r30, r2
    c308:	44 8b       	std	Z+20, r20	; 0x14
    c30a:	55 8b       	std	Z+21, r21	; 0x15
    c30c:	66 8b       	std	Z+22, r22	; 0x16
    c30e:	77 8b       	std	Z+23, r23	; 0x17
    c310:	e9 80       	ldd	r14, Y+1	; 0x01
    c312:	fa 80       	ldd	r15, Y+2	; 0x02
    c314:	c7 01       	movw	r24, r14
    c316:	0e 94 0b 48 	call	0x9016	; 0x9016 <clst2sect>
    c31a:	61 15       	cp	r22, r1
    c31c:	71 05       	cpc	r23, r1
    c31e:	81 05       	cpc	r24, r1
    c320:	91 05       	cpc	r25, r1
    c322:	09 f4       	brne	.+2      	; 0xc326 <f_lseek+0x1ea>
    c324:	69 cf       	rjmp	.-302    	; 0xc1f8 <f_lseek+0xbc>
    c326:	95 01       	movw	r18, r10
    c328:	84 01       	movw	r16, r8
    c32a:	11 70       	andi	r17, 0x01	; 1
    c32c:	22 27       	eor	r18, r18
    c32e:	33 27       	eor	r19, r19
    c330:	01 15       	cp	r16, r1
    c332:	11 05       	cpc	r17, r1
    c334:	21 05       	cpc	r18, r1
    c336:	31 05       	cpc	r19, r1
    c338:	09 f4       	brne	.+2      	; 0xc33c <f_lseek+0x200>
    c33a:	ac c1       	rjmp	.+856    	; 0xc694 <f_lseek+0x558>
    c33c:	f7 01       	movw	r30, r14
    c33e:	81 84       	ldd	r8, Z+9	; 0x09
    c340:	92 84       	ldd	r9, Z+10	; 0x0a
    c342:	f1 e0       	ldi	r31, 0x01	; 1
    c344:	8f 1a       	sub	r8, r31
    c346:	91 08       	sbc	r9, r1
    c348:	a1 2c       	mov	r10, r1
    c34a:	b1 2c       	mov	r11, r1
    c34c:	49 e0       	ldi	r20, 0x09	; 9
    c34e:	76 94       	lsr	r7
    c350:	67 94       	ror	r6
    c352:	57 94       	ror	r5
    c354:	47 94       	ror	r4
    c356:	4a 95       	dec	r20
    c358:	d1 f7       	brne	.-12     	; 0xc34e <f_lseek+0x212>
    c35a:	48 20       	and	r4, r8
    c35c:	59 20       	and	r5, r9
    c35e:	6a 20       	and	r6, r10
    c360:	7b 20       	and	r7, r11
    c362:	53 01       	movw	r10, r6
    c364:	42 01       	movw	r8, r4
    c366:	86 0e       	add	r8, r22
    c368:	97 1e       	adc	r9, r23
    c36a:	a8 1e       	adc	r10, r24
    c36c:	b9 1e       	adc	r11, r25
    c36e:	f1 01       	movw	r30, r2
    c370:	20 8d       	ldd	r18, Z+24	; 0x18
    c372:	31 8d       	ldd	r19, Z+25	; 0x19
    c374:	42 8d       	ldd	r20, Z+26	; 0x1a
    c376:	53 8d       	ldd	r21, Z+27	; 0x1b
    c378:	82 16       	cp	r8, r18
    c37a:	93 06       	cpc	r9, r19
    c37c:	a4 06       	cpc	r10, r20
    c37e:	b5 06       	cpc	r11, r21
    c380:	09 f4       	brne	.+2      	; 0xc384 <f_lseek+0x248>
    c382:	88 c1       	rjmp	.+784    	; 0xc694 <f_lseek+0x558>
    c384:	86 85       	ldd	r24, Z+14	; 0x0e
    c386:	b1 01       	movw	r22, r2
    c388:	6c 5d       	subi	r22, 0xDC	; 220
    c38a:	7f 4f       	sbci	r23, 0xFF	; 255
    c38c:	6b 01       	movw	r12, r22
    c38e:	87 ff       	sbrs	r24, 7
    c390:	0d c0       	rjmp	.+26     	; 0xc3ac <f_lseek+0x270>
    c392:	01 e0       	ldi	r16, 0x01	; 1
    c394:	10 e0       	ldi	r17, 0x00	; 0
    c396:	f7 01       	movw	r30, r14
    c398:	81 81       	ldd	r24, Z+1	; 0x01
    c39a:	0e 94 dc 69 	call	0xd3b8	; 0xd3b8 <disk_write>
    c39e:	89 2b       	or	r24, r25
    c3a0:	09 f0       	breq	.+2      	; 0xc3a4 <f_lseek+0x268>
    c3a2:	32 cf       	rjmp	.-412    	; 0xc208 <f_lseek+0xcc>
    c3a4:	f1 01       	movw	r30, r2
    c3a6:	86 85       	ldd	r24, Z+14	; 0x0e
    c3a8:	8f 77       	andi	r24, 0x7F	; 127
    c3aa:	86 87       	std	Z+14, r24	; 0x0e
    c3ac:	e9 81       	ldd	r30, Y+1	; 0x01
    c3ae:	fa 81       	ldd	r31, Y+2	; 0x02
    c3b0:	01 e0       	ldi	r16, 0x01	; 1
    c3b2:	10 e0       	ldi	r17, 0x00	; 0
    c3b4:	a5 01       	movw	r20, r10
    c3b6:	94 01       	movw	r18, r8
    c3b8:	b6 01       	movw	r22, r12
    c3ba:	81 81       	ldd	r24, Z+1	; 0x01
    c3bc:	ed d7       	rcall	.+4058   	; 0xd398 <disk_read>
    c3be:	89 2b       	or	r24, r25
    c3c0:	09 f0       	breq	.+2      	; 0xc3c4 <f_lseek+0x288>
    c3c2:	22 cf       	rjmp	.-444    	; 0xc208 <f_lseek+0xcc>
    c3c4:	f1 01       	movw	r30, r2
    c3c6:	80 8e       	std	Z+24, r8	; 0x18
    c3c8:	91 8e       	std	Z+25, r9	; 0x19
    c3ca:	a2 8e       	std	Z+26, r10	; 0x1a
    c3cc:	b3 8e       	std	Z+27, r11	; 0x1b
    c3ce:	62 c1       	rjmp	.+708    	; 0xc694 <f_lseek+0x558>
    c3d0:	f1 01       	movw	r30, r2
    c3d2:	82 85       	ldd	r24, Z+10	; 0x0a
    c3d4:	93 85       	ldd	r25, Z+11	; 0x0b
    c3d6:	a4 85       	ldd	r26, Z+12	; 0x0c
    c3d8:	b5 85       	ldd	r27, Z+13	; 0x0d
    c3da:	8c 15       	cp	r24, r12
    c3dc:	9d 05       	cpc	r25, r13
    c3de:	ae 05       	cpc	r26, r14
    c3e0:	bf 05       	cpc	r27, r15
    c3e2:	28 f4       	brcc	.+10     	; 0xc3ee <f_lseek+0x2b2>
    c3e4:	26 85       	ldd	r18, Z+14	; 0x0e
    c3e6:	21 fd       	sbrc	r18, 1
    c3e8:	02 c0       	rjmp	.+4      	; 0xc3ee <f_lseek+0x2b2>
    c3ea:	6c 01       	movw	r12, r24
    c3ec:	7d 01       	movw	r14, r26
    c3ee:	f1 01       	movw	r30, r2
    c3f0:	40 88       	ldd	r4, Z+16	; 0x10
    c3f2:	51 88       	ldd	r5, Z+17	; 0x11
    c3f4:	62 88       	ldd	r6, Z+18	; 0x12
    c3f6:	73 88       	ldd	r7, Z+19	; 0x13
    c3f8:	10 8a       	std	Z+16, r1	; 0x10
    c3fa:	11 8a       	std	Z+17, r1	; 0x11
    c3fc:	12 8a       	std	Z+18, r1	; 0x12
    c3fe:	13 8a       	std	Z+19, r1	; 0x13
    c400:	c1 14       	cp	r12, r1
    c402:	d1 04       	cpc	r13, r1
    c404:	e1 04       	cpc	r14, r1
    c406:	f1 04       	cpc	r15, r1
    c408:	09 f4       	brne	.+2      	; 0xc40c <f_lseek+0x2d0>
    c40a:	48 c1       	rjmp	.+656    	; 0xc69c <f_lseek+0x560>
    c40c:	e9 81       	ldd	r30, Y+1	; 0x01
    c40e:	fa 81       	ldd	r31, Y+2	; 0x02
    c410:	81 84       	ldd	r8, Z+9	; 0x09
    c412:	92 84       	ldd	r9, Z+10	; 0x0a
    c414:	a1 2c       	mov	r10, r1
    c416:	b1 2c       	mov	r11, r1
    c418:	39 e0       	ldi	r19, 0x09	; 9
    c41a:	88 0c       	add	r8, r8
    c41c:	99 1c       	adc	r9, r9
    c41e:	aa 1c       	adc	r10, r10
    c420:	bb 1c       	adc	r11, r11
    c422:	3a 95       	dec	r19
    c424:	d1 f7       	brne	.-12     	; 0xc41a <f_lseek+0x2de>
    c426:	41 14       	cp	r4, r1
    c428:	51 04       	cpc	r5, r1
    c42a:	61 04       	cpc	r6, r1
    c42c:	71 04       	cpc	r7, r1
    c42e:	d9 f1       	breq	.+118    	; 0xc4a6 <f_lseek+0x36a>
    c430:	f1 e0       	ldi	r31, 0x01	; 1
    c432:	4f 1a       	sub	r4, r31
    c434:	51 08       	sbc	r5, r1
    c436:	61 08       	sbc	r6, r1
    c438:	71 08       	sbc	r7, r1
    c43a:	c7 01       	movw	r24, r14
    c43c:	b6 01       	movw	r22, r12
    c43e:	61 50       	subi	r22, 0x01	; 1
    c440:	71 09       	sbc	r23, r1
    c442:	81 09       	sbc	r24, r1
    c444:	91 09       	sbc	r25, r1
    c446:	a5 01       	movw	r20, r10
    c448:	94 01       	movw	r18, r8
    c44a:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    c44e:	2b 83       	std	Y+3, r18	; 0x03
    c450:	3c 83       	std	Y+4, r19	; 0x04
    c452:	4d 83       	std	Y+5, r20	; 0x05
    c454:	5e 83       	std	Y+6, r21	; 0x06
    c456:	c3 01       	movw	r24, r6
    c458:	b2 01       	movw	r22, r4
    c45a:	a5 01       	movw	r20, r10
    c45c:	94 01       	movw	r18, r8
    c45e:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
    c462:	6b 81       	ldd	r22, Y+3	; 0x03
    c464:	7c 81       	ldd	r23, Y+4	; 0x04
    c466:	8d 81       	ldd	r24, Y+5	; 0x05
    c468:	9e 81       	ldd	r25, Y+6	; 0x06
    c46a:	62 17       	cp	r22, r18
    c46c:	73 07       	cpc	r23, r19
    c46e:	84 07       	cpc	r24, r20
    c470:	95 07       	cpc	r25, r21
    c472:	c8 f0       	brcs	.+50     	; 0xc4a6 <f_lseek+0x36a>
    c474:	88 27       	eor	r24, r24
    c476:	99 27       	eor	r25, r25
    c478:	dc 01       	movw	r26, r24
    c47a:	88 19       	sub	r24, r8
    c47c:	99 09       	sbc	r25, r9
    c47e:	aa 09       	sbc	r26, r10
    c480:	bb 09       	sbc	r27, r11
    c482:	48 22       	and	r4, r24
    c484:	59 22       	and	r5, r25
    c486:	6a 22       	and	r6, r26
    c488:	7b 22       	and	r7, r27
    c48a:	f1 01       	movw	r30, r2
    c48c:	40 8a       	std	Z+16, r4	; 0x10
    c48e:	51 8a       	std	Z+17, r5	; 0x11
    c490:	62 8a       	std	Z+18, r6	; 0x12
    c492:	73 8a       	std	Z+19, r7	; 0x13
    c494:	c4 18       	sub	r12, r4
    c496:	d5 08       	sbc	r13, r5
    c498:	e6 08       	sbc	r14, r6
    c49a:	f7 08       	sbc	r15, r7
    c49c:	44 89       	ldd	r20, Z+20	; 0x14
    c49e:	55 89       	ldd	r21, Z+21	; 0x15
    c4a0:	66 89       	ldd	r22, Z+22	; 0x16
    c4a2:	77 89       	ldd	r23, Z+23	; 0x17
    c4a4:	29 c0       	rjmp	.+82     	; 0xc4f8 <f_lseek+0x3bc>
    c4a6:	f1 01       	movw	r30, r2
    c4a8:	46 81       	ldd	r20, Z+6	; 0x06
    c4aa:	57 81       	ldd	r21, Z+7	; 0x07
    c4ac:	60 85       	ldd	r22, Z+8	; 0x08
    c4ae:	71 85       	ldd	r23, Z+9	; 0x09
    c4b0:	41 15       	cp	r20, r1
    c4b2:	51 05       	cpc	r21, r1
    c4b4:	61 05       	cpc	r22, r1
    c4b6:	71 05       	cpc	r23, r1
    c4b8:	d1 f4       	brne	.+52     	; 0xc4ee <f_lseek+0x3b2>
    c4ba:	40 e0       	ldi	r20, 0x00	; 0
    c4bc:	50 e0       	ldi	r21, 0x00	; 0
    c4be:	ba 01       	movw	r22, r20
    c4c0:	c1 01       	movw	r24, r2
    c4c2:	0e 94 dd 50 	call	0xa1ba	; 0xa1ba <create_chain>
    c4c6:	ab 01       	movw	r20, r22
    c4c8:	bc 01       	movw	r22, r24
    c4ca:	41 30       	cpi	r20, 0x01	; 1
    c4cc:	51 05       	cpc	r21, r1
    c4ce:	61 05       	cpc	r22, r1
    c4d0:	71 05       	cpc	r23, r1
    c4d2:	09 f4       	brne	.+2      	; 0xc4d6 <f_lseek+0x39a>
    c4d4:	91 ce       	rjmp	.-734    	; 0xc1f8 <f_lseek+0xbc>
    c4d6:	4f 3f       	cpi	r20, 0xFF	; 255
    c4d8:	ff ef       	ldi	r31, 0xFF	; 255
    c4da:	5f 07       	cpc	r21, r31
    c4dc:	6f 07       	cpc	r22, r31
    c4de:	7f 07       	cpc	r23, r31
    c4e0:	09 f4       	brne	.+2      	; 0xc4e4 <f_lseek+0x3a8>
    c4e2:	92 ce       	rjmp	.-732    	; 0xc208 <f_lseek+0xcc>
    c4e4:	f1 01       	movw	r30, r2
    c4e6:	46 83       	std	Z+6, r20	; 0x06
    c4e8:	57 83       	std	Z+7, r21	; 0x07
    c4ea:	60 87       	std	Z+8, r22	; 0x08
    c4ec:	71 87       	std	Z+9, r23	; 0x09
    c4ee:	f1 01       	movw	r30, r2
    c4f0:	44 8b       	std	Z+20, r20	; 0x14
    c4f2:	55 8b       	std	Z+21, r21	; 0x15
    c4f4:	66 8b       	std	Z+22, r22	; 0x16
    c4f6:	77 8b       	std	Z+23, r23	; 0x17
    c4f8:	41 15       	cp	r20, r1
    c4fa:	51 05       	cpc	r21, r1
    c4fc:	61 05       	cpc	r22, r1
    c4fe:	71 05       	cpc	r23, r1
    c500:	09 f0       	breq	.+2      	; 0xc504 <f_lseek+0x3c8>
    c502:	40 c0       	rjmp	.+128    	; 0xc584 <f_lseek+0x448>
    c504:	c1 2c       	mov	r12, r1
    c506:	d1 2c       	mov	r13, r1
    c508:	76 01       	movw	r14, r12
    c50a:	79 c0       	rjmp	.+242    	; 0xc5fe <f_lseek+0x4c2>
    c50c:	c8 18       	sub	r12, r8
    c50e:	d9 08       	sbc	r13, r9
    c510:	ea 08       	sbc	r14, r10
    c512:	fb 08       	sbc	r15, r11
    c514:	f1 01       	movw	r30, r2
    c516:	80 89       	ldd	r24, Z+16	; 0x10
    c518:	91 89       	ldd	r25, Z+17	; 0x11
    c51a:	a2 89       	ldd	r26, Z+18	; 0x12
    c51c:	b3 89       	ldd	r27, Z+19	; 0x13
    c51e:	88 0d       	add	r24, r8
    c520:	99 1d       	adc	r25, r9
    c522:	aa 1d       	adc	r26, r10
    c524:	bb 1d       	adc	r27, r11
    c526:	80 8b       	std	Z+16, r24	; 0x10
    c528:	91 8b       	std	Z+17, r25	; 0x11
    c52a:	a2 8b       	std	Z+18, r26	; 0x12
    c52c:	b3 8b       	std	Z+19, r27	; 0x13
    c52e:	86 85       	ldd	r24, Z+14	; 0x0e
    c530:	81 ff       	sbrs	r24, 1
    c532:	2f c0       	rjmp	.+94     	; 0xc592 <f_lseek+0x456>
    c534:	c1 01       	movw	r24, r2
    c536:	0e 94 dd 50 	call	0xa1ba	; 0xa1ba <create_chain>
    c53a:	ab 01       	movw	r20, r22
    c53c:	bc 01       	movw	r22, r24
    c53e:	41 15       	cp	r20, r1
    c540:	51 05       	cpc	r21, r1
    c542:	61 05       	cpc	r22, r1
    c544:	71 05       	cpc	r23, r1
    c546:	61 f1       	breq	.+88     	; 0xc5a0 <f_lseek+0x464>
    c548:	4f 3f       	cpi	r20, 0xFF	; 255
    c54a:	bf ef       	ldi	r27, 0xFF	; 255
    c54c:	5b 07       	cpc	r21, r27
    c54e:	6b 07       	cpc	r22, r27
    c550:	7b 07       	cpc	r23, r27
    c552:	09 f4       	brne	.+2      	; 0xc556 <f_lseek+0x41a>
    c554:	59 ce       	rjmp	.-846    	; 0xc208 <f_lseek+0xcc>
    c556:	42 30       	cpi	r20, 0x02	; 2
    c558:	51 05       	cpc	r21, r1
    c55a:	61 05       	cpc	r22, r1
    c55c:	71 05       	cpc	r23, r1
    c55e:	08 f4       	brcc	.+2      	; 0xc562 <f_lseek+0x426>
    c560:	4b ce       	rjmp	.-874    	; 0xc1f8 <f_lseek+0xbc>
    c562:	e9 81       	ldd	r30, Y+1	; 0x01
    c564:	fa 81       	ldd	r31, Y+2	; 0x02
    c566:	81 8d       	ldd	r24, Z+25	; 0x19
    c568:	92 8d       	ldd	r25, Z+26	; 0x1a
    c56a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c56c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c56e:	48 17       	cp	r20, r24
    c570:	59 07       	cpc	r21, r25
    c572:	6a 07       	cpc	r22, r26
    c574:	7b 07       	cpc	r23, r27
    c576:	08 f0       	brcs	.+2      	; 0xc57a <f_lseek+0x43e>
    c578:	3f ce       	rjmp	.-898    	; 0xc1f8 <f_lseek+0xbc>
    c57a:	f1 01       	movw	r30, r2
    c57c:	44 8b       	std	Z+20, r20	; 0x14
    c57e:	55 8b       	std	Z+21, r21	; 0x15
    c580:	66 8b       	std	Z+22, r22	; 0x16
    c582:	77 8b       	std	Z+23, r23	; 0x17
    c584:	8c 14       	cp	r8, r12
    c586:	9d 04       	cpc	r9, r13
    c588:	ae 04       	cpc	r10, r14
    c58a:	bf 04       	cpc	r11, r15
    c58c:	08 f4       	brcc	.+2      	; 0xc590 <f_lseek+0x454>
    c58e:	be cf       	rjmp	.-132    	; 0xc50c <f_lseek+0x3d0>
    c590:	0a c0       	rjmp	.+20     	; 0xc5a6 <f_lseek+0x46a>
    c592:	80 81       	ld	r24, Z
    c594:	91 81       	ldd	r25, Z+1	; 0x01
    c596:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <get_fat.isra.9>
    c59a:	ab 01       	movw	r20, r22
    c59c:	bc 01       	movw	r22, r24
    c59e:	d4 cf       	rjmp	.-88     	; 0xc548 <f_lseek+0x40c>
    c5a0:	c1 2c       	mov	r12, r1
    c5a2:	d1 2c       	mov	r13, r1
    c5a4:	76 01       	movw	r14, r12
    c5a6:	f1 01       	movw	r30, r2
    c5a8:	80 89       	ldd	r24, Z+16	; 0x10
    c5aa:	91 89       	ldd	r25, Z+17	; 0x11
    c5ac:	a2 89       	ldd	r26, Z+18	; 0x12
    c5ae:	b3 89       	ldd	r27, Z+19	; 0x13
    c5b0:	8c 0d       	add	r24, r12
    c5b2:	9d 1d       	adc	r25, r13
    c5b4:	ae 1d       	adc	r26, r14
    c5b6:	bf 1d       	adc	r27, r15
    c5b8:	80 8b       	std	Z+16, r24	; 0x10
    c5ba:	91 8b       	std	Z+17, r25	; 0x11
    c5bc:	a2 8b       	std	Z+18, r26	; 0x12
    c5be:	b3 8b       	std	Z+19, r27	; 0x13
    c5c0:	d7 01       	movw	r26, r14
    c5c2:	c6 01       	movw	r24, r12
    c5c4:	91 70       	andi	r25, 0x01	; 1
    c5c6:	aa 27       	eor	r26, r26
    c5c8:	bb 27       	eor	r27, r27
    c5ca:	89 2b       	or	r24, r25
    c5cc:	8a 2b       	or	r24, r26
    c5ce:	8b 2b       	or	r24, r27
    c5d0:	09 f4       	brne	.+2      	; 0xc5d4 <f_lseek+0x498>
    c5d2:	98 cf       	rjmp	.-208    	; 0xc504 <f_lseek+0x3c8>
    c5d4:	89 81       	ldd	r24, Y+1	; 0x01
    c5d6:	9a 81       	ldd	r25, Y+2	; 0x02
    c5d8:	0e 94 0b 48 	call	0x9016	; 0x9016 <clst2sect>
    c5dc:	61 15       	cp	r22, r1
    c5de:	71 05       	cpc	r23, r1
    c5e0:	81 05       	cpc	r24, r1
    c5e2:	91 05       	cpc	r25, r1
    c5e4:	09 f4       	brne	.+2      	; 0xc5e8 <f_lseek+0x4ac>
    c5e6:	08 ce       	rjmp	.-1008   	; 0xc1f8 <f_lseek+0xbc>
    c5e8:	29 e0       	ldi	r18, 0x09	; 9
    c5ea:	f6 94       	lsr	r15
    c5ec:	e7 94       	ror	r14
    c5ee:	d7 94       	ror	r13
    c5f0:	c7 94       	ror	r12
    c5f2:	2a 95       	dec	r18
    c5f4:	d1 f7       	brne	.-12     	; 0xc5ea <f_lseek+0x4ae>
    c5f6:	c6 0e       	add	r12, r22
    c5f8:	d7 1e       	adc	r13, r23
    c5fa:	e8 1e       	adc	r14, r24
    c5fc:	f9 1e       	adc	r15, r25
    c5fe:	f1 01       	movw	r30, r2
    c600:	80 89       	ldd	r24, Z+16	; 0x10
    c602:	91 89       	ldd	r25, Z+17	; 0x11
    c604:	a2 89       	ldd	r26, Z+18	; 0x12
    c606:	b3 89       	ldd	r27, Z+19	; 0x13
    c608:	42 85       	ldd	r20, Z+10	; 0x0a
    c60a:	53 85       	ldd	r21, Z+11	; 0x0b
    c60c:	64 85       	ldd	r22, Z+12	; 0x0c
    c60e:	75 85       	ldd	r23, Z+13	; 0x0d
    c610:	48 17       	cp	r20, r24
    c612:	59 07       	cpc	r21, r25
    c614:	6a 07       	cpc	r22, r26
    c616:	7b 07       	cpc	r23, r27
    c618:	38 f4       	brcc	.+14     	; 0xc628 <f_lseek+0x4ec>
    c61a:	82 87       	std	Z+10, r24	; 0x0a
    c61c:	93 87       	std	Z+11, r25	; 0x0b
    c61e:	a4 87       	std	Z+12, r26	; 0x0c
    c620:	b5 87       	std	Z+13, r27	; 0x0d
    c622:	26 85       	ldd	r18, Z+14	; 0x0e
    c624:	20 64       	ori	r18, 0x40	; 64
    c626:	26 87       	std	Z+14, r18	; 0x0e
    c628:	91 70       	andi	r25, 0x01	; 1
    c62a:	aa 27       	eor	r26, r26
    c62c:	bb 27       	eor	r27, r27
    c62e:	89 2b       	or	r24, r25
    c630:	8a 2b       	or	r24, r26
    c632:	8b 2b       	or	r24, r27
    c634:	79 f1       	breq	.+94     	; 0xc694 <f_lseek+0x558>
    c636:	f1 01       	movw	r30, r2
    c638:	20 8d       	ldd	r18, Z+24	; 0x18
    c63a:	31 8d       	ldd	r19, Z+25	; 0x19
    c63c:	42 8d       	ldd	r20, Z+26	; 0x1a
    c63e:	53 8d       	ldd	r21, Z+27	; 0x1b
    c640:	2c 15       	cp	r18, r12
    c642:	3d 05       	cpc	r19, r13
    c644:	4e 05       	cpc	r20, r14
    c646:	5f 05       	cpc	r21, r15
    c648:	29 f1       	breq	.+74     	; 0xc694 <f_lseek+0x558>
    c64a:	86 85       	ldd	r24, Z+14	; 0x0e
    c64c:	b1 01       	movw	r22, r2
    c64e:	6c 5d       	subi	r22, 0xDC	; 220
    c650:	7f 4f       	sbci	r23, 0xFF	; 255
    c652:	5b 01       	movw	r10, r22
    c654:	87 ff       	sbrs	r24, 7
    c656:	0d c0       	rjmp	.+26     	; 0xc672 <f_lseek+0x536>
    c658:	e9 81       	ldd	r30, Y+1	; 0x01
    c65a:	fa 81       	ldd	r31, Y+2	; 0x02
    c65c:	01 e0       	ldi	r16, 0x01	; 1
    c65e:	10 e0       	ldi	r17, 0x00	; 0
    c660:	81 81       	ldd	r24, Z+1	; 0x01
    c662:	aa d6       	rcall	.+3412   	; 0xd3b8 <disk_write>
    c664:	89 2b       	or	r24, r25
    c666:	09 f0       	breq	.+2      	; 0xc66a <f_lseek+0x52e>
    c668:	cf cd       	rjmp	.-1122   	; 0xc208 <f_lseek+0xcc>
    c66a:	f1 01       	movw	r30, r2
    c66c:	86 85       	ldd	r24, Z+14	; 0x0e
    c66e:	8f 77       	andi	r24, 0x7F	; 127
    c670:	86 87       	std	Z+14, r24	; 0x0e
    c672:	e9 81       	ldd	r30, Y+1	; 0x01
    c674:	fa 81       	ldd	r31, Y+2	; 0x02
    c676:	01 e0       	ldi	r16, 0x01	; 1
    c678:	10 e0       	ldi	r17, 0x00	; 0
    c67a:	a7 01       	movw	r20, r14
    c67c:	96 01       	movw	r18, r12
    c67e:	b5 01       	movw	r22, r10
    c680:	81 81       	ldd	r24, Z+1	; 0x01
    c682:	8a d6       	rcall	.+3348   	; 0xd398 <disk_read>
    c684:	89 2b       	or	r24, r25
    c686:	09 f0       	breq	.+2      	; 0xc68a <f_lseek+0x54e>
    c688:	bf cd       	rjmp	.-1154   	; 0xc208 <f_lseek+0xcc>
    c68a:	f1 01       	movw	r30, r2
    c68c:	c0 8e       	std	Z+24, r12	; 0x18
    c68e:	d1 8e       	std	Z+25, r13	; 0x19
    c690:	e2 8e       	std	Z+26, r14	; 0x1a
    c692:	f3 8e       	std	Z+27, r15	; 0x1b
    c694:	80 e0       	ldi	r24, 0x00	; 0
    c696:	bb cd       	rjmp	.-1162   	; 0xc20e <f_lseek+0xd2>
    c698:	81 e1       	ldi	r24, 0x11	; 17
    c69a:	b9 cd       	rjmp	.-1166   	; 0xc20e <f_lseek+0xd2>
    c69c:	80 e0       	ldi	r24, 0x00	; 0
    c69e:	90 e0       	ldi	r25, 0x00	; 0
    c6a0:	dc 01       	movw	r26, r24
    c6a2:	c1 2c       	mov	r12, r1
    c6a4:	d1 2c       	mov	r13, r1
    c6a6:	76 01       	movw	r14, r12
    c6a8:	bf cf       	rjmp	.-130    	; 0xc628 <f_lseek+0x4ec>
    c6aa:	2a 96       	adiw	r28, 0x0a	; 10
    c6ac:	e2 e1       	ldi	r30, 0x12	; 18
    c6ae:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0000c6b2 <f_opendir>:
    c6b2:	a4 e0       	ldi	r26, 0x04	; 4
    c6b4:	b0 e0       	ldi	r27, 0x00	; 0
    c6b6:	ef e5       	ldi	r30, 0x5F	; 95
    c6b8:	f3 e6       	ldi	r31, 0x63	; 99
    c6ba:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    c6be:	7c 83       	std	Y+4, r23	; 0x04
    c6c0:	6b 83       	std	Y+3, r22	; 0x03
    c6c2:	00 97       	sbiw	r24, 0x00	; 0
    c6c4:	09 f4       	brne	.+2      	; 0xc6c8 <f_opendir+0x16>
    c6c6:	48 c0       	rjmp	.+144    	; 0xc758 <f_opendir+0xa6>
    c6c8:	8c 01       	movw	r16, r24
    c6ca:	40 e0       	ldi	r20, 0x00	; 0
    c6cc:	be 01       	movw	r22, r28
    c6ce:	6f 5f       	subi	r22, 0xFF	; 255
    c6d0:	7f 4f       	sbci	r23, 0xFF	; 255
    c6d2:	ce 01       	movw	r24, r28
    c6d4:	03 96       	adiw	r24, 0x03	; 3
    c6d6:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
    c6da:	7c 01       	movw	r14, r24
    c6dc:	89 2b       	or	r24, r25
    c6de:	b9 f5       	brne	.+110    	; 0xc74e <f_opendir+0x9c>
    c6e0:	89 81       	ldd	r24, Y+1	; 0x01
    c6e2:	9a 81       	ldd	r25, Y+2	; 0x02
    c6e4:	f8 01       	movw	r30, r16
    c6e6:	91 83       	std	Z+1, r25	; 0x01
    c6e8:	80 83       	st	Z, r24
    c6ea:	80 e0       	ldi	r24, 0x00	; 0
    c6ec:	92 e0       	ldi	r25, 0x02	; 2
    c6ee:	98 d5       	rcall	.+2864   	; 0xd220 <ff_memalloc>
    c6f0:	6c 01       	movw	r12, r24
    c6f2:	00 97       	sbiw	r24, 0x00	; 0
    c6f4:	99 f1       	breq	.+102    	; 0xc75c <f_opendir+0xaa>
    c6f6:	e9 81       	ldd	r30, Y+1	; 0x01
    c6f8:	fa 81       	ldd	r31, Y+2	; 0x02
    c6fa:	94 87       	std	Z+12, r25	; 0x0c
    c6fc:	83 87       	std	Z+11, r24	; 0x0b
    c6fe:	6b 81       	ldd	r22, Y+3	; 0x03
    c700:	7c 81       	ldd	r23, Y+4	; 0x04
    c702:	c8 01       	movw	r24, r16
    c704:	0e 94 62 57 	call	0xaec4	; 0xaec4 <follow_path>
    c708:	7c 01       	movw	r14, r24
    c70a:	89 2b       	or	r24, r25
    c70c:	b9 f4       	brne	.+46     	; 0xc73c <f_opendir+0x8a>
    c70e:	f8 01       	movw	r30, r16
    c710:	87 a1       	ldd	r24, Z+39	; 0x27
    c712:	87 fd       	sbrc	r24, 7
    c714:	28 c0       	rjmp	.+80     	; 0xc766 <f_opendir+0xb4>
    c716:	84 81       	ldd	r24, Z+4	; 0x04
    c718:	84 ff       	sbrs	r24, 4
    c71a:	0d c0       	rjmp	.+26     	; 0xc736 <f_opendir+0x84>
    c71c:	62 8d       	ldd	r22, Z+26	; 0x1a
    c71e:	73 8d       	ldd	r23, Z+27	; 0x1b
    c720:	e9 81       	ldd	r30, Y+1	; 0x01
    c722:	fa 81       	ldd	r31, Y+2	; 0x02
    c724:	80 81       	ld	r24, Z
    c726:	0e 94 0b 4a 	call	0x9416	; 0x9416 <ld_clust.isra.3>
    c72a:	f8 01       	movw	r30, r16
    c72c:	66 83       	std	Z+6, r22	; 0x06
    c72e:	77 83       	std	Z+7, r23	; 0x07
    c730:	80 87       	std	Z+8, r24	; 0x08
    c732:	91 87       	std	Z+9, r25	; 0x09
    c734:	18 c0       	rjmp	.+48     	; 0xc766 <f_opendir+0xb4>
    c736:	95 e0       	ldi	r25, 0x05	; 5
    c738:	e9 2e       	mov	r14, r25
    c73a:	f1 2c       	mov	r15, r1
    c73c:	c6 01       	movw	r24, r12
    c73e:	73 d5       	rcall	.+2790   	; 0xd226 <ff_memfree>
    c740:	f4 e0       	ldi	r31, 0x04	; 4
    c742:	ef 16       	cp	r14, r31
    c744:	f1 04       	cpc	r15, r1
    c746:	f1 f0       	breq	.+60     	; 0xc784 <f_opendir+0xd2>
    c748:	e1 14       	cp	r14, r1
    c74a:	f1 04       	cpc	r15, r1
    c74c:	49 f0       	breq	.+18     	; 0xc760 <f_opendir+0xae>
    c74e:	f8 01       	movw	r30, r16
    c750:	11 82       	std	Z+1, r1	; 0x01
    c752:	10 82       	st	Z, r1
    c754:	c7 01       	movw	r24, r14
    c756:	1a c0       	rjmp	.+52     	; 0xc78c <f_opendir+0xda>
    c758:	89 e0       	ldi	r24, 0x09	; 9
    c75a:	03 c0       	rjmp	.+6      	; 0xc762 <f_opendir+0xb0>
    c75c:	81 e1       	ldi	r24, 0x11	; 17
    c75e:	01 c0       	rjmp	.+2      	; 0xc762 <f_opendir+0xb0>
    c760:	80 e0       	ldi	r24, 0x00	; 0
    c762:	90 e0       	ldi	r25, 0x00	; 0
    c764:	13 c0       	rjmp	.+38     	; 0xc78c <f_opendir+0xda>
    c766:	e9 81       	ldd	r30, Y+1	; 0x01
    c768:	fa 81       	ldd	r31, Y+2	; 0x02
    c76a:	85 81       	ldd	r24, Z+5	; 0x05
    c76c:	96 81       	ldd	r25, Z+6	; 0x06
    c76e:	f8 01       	movw	r30, r16
    c770:	93 83       	std	Z+3, r25	; 0x03
    c772:	82 83       	std	Z+2, r24	; 0x02
    c774:	40 e0       	ldi	r20, 0x00	; 0
    c776:	50 e0       	ldi	r21, 0x00	; 0
    c778:	ba 01       	movw	r22, r20
    c77a:	c8 01       	movw	r24, r16
    c77c:	0e 94 1c 50 	call	0xa038	; 0xa038 <dir_sdi>
    c780:	7c 01       	movw	r14, r24
    c782:	dc cf       	rjmp	.-72     	; 0xc73c <f_opendir+0x8a>
    c784:	85 e0       	ldi	r24, 0x05	; 5
    c786:	e8 2e       	mov	r14, r24
    c788:	f1 2c       	mov	r15, r1
    c78a:	e1 cf       	rjmp	.-62     	; 0xc74e <f_opendir+0x9c>
    c78c:	24 96       	adiw	r28, 0x04	; 4
    c78e:	e8 e0       	ldi	r30, 0x08	; 8
    c790:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000c794 <f_closedir>:
    c794:	a2 e0       	ldi	r26, 0x02	; 2
    c796:	b0 e0       	ldi	r27, 0x00	; 0
    c798:	e0 ed       	ldi	r30, 0xD0	; 208
    c79a:	f3 e6       	ldi	r31, 0x63	; 99
    c79c:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    c7a0:	8c 01       	movw	r16, r24
    c7a2:	be 01       	movw	r22, r28
    c7a4:	6f 5f       	subi	r22, 0xFF	; 255
    c7a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c7a8:	0e 94 aa 48 	call	0x9154	; 0x9154 <validate>
    c7ac:	00 97       	sbiw	r24, 0x00	; 0
    c7ae:	19 f4       	brne	.+6      	; 0xc7b6 <f_closedir+0x22>
    c7b0:	f8 01       	movw	r30, r16
    c7b2:	11 82       	std	Z+1, r1	; 0x01
    c7b4:	10 82       	st	Z, r1
    c7b6:	22 96       	adiw	r28, 0x02	; 2
    c7b8:	e4 e0       	ldi	r30, 0x04	; 4
    c7ba:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

0000c7be <f_readdir>:
    c7be:	a2 e0       	ldi	r26, 0x02	; 2
    c7c0:	b0 e0       	ldi	r27, 0x00	; 0
    c7c2:	e5 ee       	ldi	r30, 0xE5	; 229
    c7c4:	f3 e6       	ldi	r31, 0x63	; 99
    c7c6:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
    c7ca:	7c 01       	movw	r14, r24
    c7cc:	5b 01       	movw	r10, r22
    c7ce:	be 01       	movw	r22, r28
    c7d0:	6f 5f       	subi	r22, 0xFF	; 255
    c7d2:	7f 4f       	sbci	r23, 0xFF	; 255
    c7d4:	0e 94 aa 48 	call	0x9154	; 0x9154 <validate>
    c7d8:	00 97       	sbiw	r24, 0x00	; 0
    c7da:	89 f5       	brne	.+98     	; 0xc83e <f_readdir+0x80>
    c7dc:	a1 14       	cp	r10, r1
    c7de:	b1 04       	cpc	r11, r1
    c7e0:	39 f4       	brne	.+14     	; 0xc7f0 <f_readdir+0x32>
    c7e2:	40 e0       	ldi	r20, 0x00	; 0
    c7e4:	50 e0       	ldi	r21, 0x00	; 0
    c7e6:	ba 01       	movw	r22, r20
    c7e8:	c7 01       	movw	r24, r14
    c7ea:	0e 94 1c 50 	call	0xa038	; 0xa038 <dir_sdi>
    c7ee:	27 c0       	rjmp	.+78     	; 0xc83e <f_readdir+0x80>
    c7f0:	80 e0       	ldi	r24, 0x00	; 0
    c7f2:	92 e0       	ldi	r25, 0x02	; 2
    c7f4:	15 d5       	rcall	.+2602   	; 0xd220 <ff_memalloc>
    c7f6:	6c 01       	movw	r12, r24
    c7f8:	00 97       	sbiw	r24, 0x00	; 0
    c7fa:	f9 f0       	breq	.+62     	; 0xc83a <f_readdir+0x7c>
    c7fc:	e9 81       	ldd	r30, Y+1	; 0x01
    c7fe:	fa 81       	ldd	r31, Y+2	; 0x02
    c800:	94 87       	std	Z+12, r25	; 0x0c
    c802:	83 87       	std	Z+11, r24	; 0x0b
    c804:	60 e0       	ldi	r22, 0x00	; 0
    c806:	70 e0       	ldi	r23, 0x00	; 0
    c808:	c7 01       	movw	r24, r14
    c80a:	0e 94 b5 53 	call	0xa76a	; 0xa76a <dir_read>
    c80e:	8c 01       	movw	r16, r24
    c810:	8b 7f       	andi	r24, 0xFB	; 251
    c812:	89 2b       	or	r24, r25
    c814:	71 f4       	brne	.+28     	; 0xc832 <f_readdir+0x74>
    c816:	b5 01       	movw	r22, r10
    c818:	c7 01       	movw	r24, r14
    c81a:	0e 94 d6 48 	call	0x91ac	; 0x91ac <get_fileinfo>
    c81e:	60 e0       	ldi	r22, 0x00	; 0
    c820:	70 e0       	ldi	r23, 0x00	; 0
    c822:	c7 01       	movw	r24, r14
    c824:	0e 94 94 52 	call	0xa528	; 0xa528 <dir_next>
    c828:	8c 01       	movw	r16, r24
    c82a:	04 97       	sbiw	r24, 0x04	; 4
    c82c:	11 f4       	brne	.+4      	; 0xc832 <f_readdir+0x74>
    c82e:	00 e0       	ldi	r16, 0x00	; 0
    c830:	10 e0       	ldi	r17, 0x00	; 0
    c832:	c6 01       	movw	r24, r12
    c834:	f8 d4       	rcall	.+2544   	; 0xd226 <ff_memfree>
    c836:	c8 01       	movw	r24, r16
    c838:	02 c0       	rjmp	.+4      	; 0xc83e <f_readdir+0x80>
    c83a:	81 e1       	ldi	r24, 0x11	; 17
    c83c:	90 e0       	ldi	r25, 0x00	; 0
    c83e:	22 96       	adiw	r28, 0x02	; 2
    c840:	ea e0       	ldi	r30, 0x0A	; 10
    c842:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

0000c846 <f_stat>:
    c846:	a0 e3       	ldi	r26, 0x30	; 48
    c848:	b0 e0       	ldi	r27, 0x00	; 0
    c84a:	e9 e2       	ldi	r30, 0x29	; 41
    c84c:	f4 e6       	ldi	r31, 0x64	; 100
    c84e:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    c852:	98 ab       	std	Y+48, r25	; 0x30
    c854:	8f a7       	std	Y+47, r24	; 0x2f
    c856:	6b 01       	movw	r12, r22
    c858:	40 e0       	ldi	r20, 0x00	; 0
    c85a:	be 01       	movw	r22, r28
    c85c:	6f 5f       	subi	r22, 0xFF	; 255
    c85e:	7f 4f       	sbci	r23, 0xFF	; 255
    c860:	ce 01       	movw	r24, r28
    c862:	8f 96       	adiw	r24, 0x2f	; 47
    c864:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
    c868:	00 97       	sbiw	r24, 0x00	; 0
    c86a:	39 f5       	brne	.+78     	; 0xc8ba <f_stat+0x74>
    c86c:	80 e0       	ldi	r24, 0x00	; 0
    c86e:	92 e0       	ldi	r25, 0x02	; 2
    c870:	d7 d4       	rcall	.+2478   	; 0xd220 <ff_memalloc>
    c872:	7c 01       	movw	r14, r24
    c874:	00 97       	sbiw	r24, 0x00	; 0
    c876:	f9 f0       	breq	.+62     	; 0xc8b6 <f_stat+0x70>
    c878:	e9 81       	ldd	r30, Y+1	; 0x01
    c87a:	fa 81       	ldd	r31, Y+2	; 0x02
    c87c:	94 87       	std	Z+12, r25	; 0x0c
    c87e:	83 87       	std	Z+11, r24	; 0x0b
    c880:	6f a5       	ldd	r22, Y+47	; 0x2f
    c882:	78 a9       	ldd	r23, Y+48	; 0x30
    c884:	ce 01       	movw	r24, r28
    c886:	01 96       	adiw	r24, 0x01	; 1
    c888:	0e 94 62 57 	call	0xaec4	; 0xaec4 <follow_path>
    c88c:	8c 01       	movw	r16, r24
    c88e:	89 2b       	or	r24, r25
    c890:	71 f4       	brne	.+28     	; 0xc8ae <f_stat+0x68>
    c892:	88 a5       	ldd	r24, Y+40	; 0x28
    c894:	87 fd       	sbrc	r24, 7
    c896:	09 c0       	rjmp	.+18     	; 0xc8aa <f_stat+0x64>
    c898:	c1 14       	cp	r12, r1
    c89a:	d1 04       	cpc	r13, r1
    c89c:	41 f0       	breq	.+16     	; 0xc8ae <f_stat+0x68>
    c89e:	b6 01       	movw	r22, r12
    c8a0:	ce 01       	movw	r24, r28
    c8a2:	01 96       	adiw	r24, 0x01	; 1
    c8a4:	0e 94 d6 48 	call	0x91ac	; 0x91ac <get_fileinfo>
    c8a8:	02 c0       	rjmp	.+4      	; 0xc8ae <f_stat+0x68>
    c8aa:	06 e0       	ldi	r16, 0x06	; 6
    c8ac:	10 e0       	ldi	r17, 0x00	; 0
    c8ae:	c7 01       	movw	r24, r14
    c8b0:	ba d4       	rcall	.+2420   	; 0xd226 <ff_memfree>
    c8b2:	c8 01       	movw	r24, r16
    c8b4:	02 c0       	rjmp	.+4      	; 0xc8ba <f_stat+0x74>
    c8b6:	81 e1       	ldi	r24, 0x11	; 17
    c8b8:	90 e0       	ldi	r25, 0x00	; 0
    c8ba:	e0 96       	adiw	r28, 0x30	; 48
    c8bc:	e8 e0       	ldi	r30, 0x08	; 8
    c8be:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000c8c2 <f_getfree>:
    c8c2:	aa e0       	ldi	r26, 0x0A	; 10
    c8c4:	b0 e0       	ldi	r27, 0x00	; 0
    c8c6:	e7 e6       	ldi	r30, 0x67	; 103
    c8c8:	f4 e6       	ldi	r31, 0x64	; 100
    c8ca:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
    c8ce:	9c 83       	std	Y+4, r25	; 0x04
    c8d0:	8b 83       	std	Y+3, r24	; 0x03
    c8d2:	7e 83       	std	Y+6, r23	; 0x06
    c8d4:	6d 83       	std	Y+5, r22	; 0x05
    c8d6:	7a 01       	movw	r14, r20
    c8d8:	40 e0       	ldi	r20, 0x00	; 0
    c8da:	be 01       	movw	r22, r28
    c8dc:	6f 5f       	subi	r22, 0xFF	; 255
    c8de:	7f 4f       	sbci	r23, 0xFF	; 255
    c8e0:	ce 01       	movw	r24, r28
    c8e2:	03 96       	adiw	r24, 0x03	; 3
    c8e4:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
    c8e8:	8c 01       	movw	r16, r24
    c8ea:	89 2b       	or	r24, r25
    c8ec:	09 f0       	breq	.+2      	; 0xc8f0 <f_getfree+0x2e>
    c8ee:	c4 c0       	rjmp	.+392    	; 0xca78 <f_getfree+0x1b6>
    c8f0:	69 80       	ldd	r6, Y+1	; 0x01
    c8f2:	7a 80       	ldd	r7, Y+2	; 0x02
    c8f4:	d7 01       	movw	r26, r14
    c8f6:	6d 92       	st	X+, r6
    c8f8:	7c 92       	st	X, r7
    c8fa:	f3 01       	movw	r30, r6
    c8fc:	81 89       	ldd	r24, Z+17	; 0x11
    c8fe:	92 89       	ldd	r25, Z+18	; 0x12
    c900:	a3 89       	ldd	r26, Z+19	; 0x13
    c902:	b4 89       	ldd	r27, Z+20	; 0x14
    c904:	81 8c       	ldd	r8, Z+25	; 0x19
    c906:	92 8c       	ldd	r9, Z+26	; 0x1a
    c908:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c90a:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c90c:	b5 01       	movw	r22, r10
    c90e:	a4 01       	movw	r20, r8
    c910:	42 50       	subi	r20, 0x02	; 2
    c912:	51 09       	sbc	r21, r1
    c914:	61 09       	sbc	r22, r1
    c916:	71 09       	sbc	r23, r1
    c918:	48 17       	cp	r20, r24
    c91a:	59 07       	cpc	r21, r25
    c91c:	6a 07       	cpc	r22, r26
    c91e:	7b 07       	cpc	r23, r27
    c920:	38 f0       	brcs	.+14     	; 0xc930 <f_getfree+0x6e>
    c922:	ed 81       	ldd	r30, Y+5	; 0x05
    c924:	fe 81       	ldd	r31, Y+6	; 0x06
    c926:	80 83       	st	Z, r24
    c928:	91 83       	std	Z+1, r25	; 0x01
    c92a:	a2 83       	std	Z+2, r26	; 0x02
    c92c:	b3 83       	std	Z+3, r27	; 0x03
    c92e:	a4 c0       	rjmp	.+328    	; 0xca78 <f_getfree+0x1b6>
    c930:	80 81       	ld	r24, Z
    c932:	81 30       	cpi	r24, 0x01	; 1
    c934:	a1 f5       	brne	.+104    	; 0xc99e <f_getfree+0xdc>
    c936:	82 e0       	ldi	r24, 0x02	; 2
    c938:	88 2e       	mov	r8, r24
    c93a:	91 2c       	mov	r9, r1
    c93c:	a1 2c       	mov	r10, r1
    c93e:	b1 2c       	mov	r11, r1
    c940:	c1 2c       	mov	r12, r1
    c942:	d1 2c       	mov	r13, r1
    c944:	76 01       	movw	r14, r12
    c946:	b5 01       	movw	r22, r10
    c948:	a4 01       	movw	r20, r8
    c94a:	c3 01       	movw	r24, r6
    c94c:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <get_fat.isra.9>
    c950:	6f 3f       	cpi	r22, 0xFF	; 255
    c952:	bf ef       	ldi	r27, 0xFF	; 255
    c954:	7b 07       	cpc	r23, r27
    c956:	8b 07       	cpc	r24, r27
    c958:	9b 07       	cpc	r25, r27
    c95a:	09 f4       	brne	.+2      	; 0xc95e <f_getfree+0x9c>
    c95c:	76 c0       	rjmp	.+236    	; 0xca4a <f_getfree+0x188>
    c95e:	61 30       	cpi	r22, 0x01	; 1
    c960:	71 05       	cpc	r23, r1
    c962:	81 05       	cpc	r24, r1
    c964:	91 05       	cpc	r25, r1
    c966:	09 f4       	brne	.+2      	; 0xc96a <f_getfree+0xa8>
    c968:	73 c0       	rjmp	.+230    	; 0xca50 <f_getfree+0x18e>
    c96a:	67 2b       	or	r22, r23
    c96c:	68 2b       	or	r22, r24
    c96e:	69 2b       	or	r22, r25
    c970:	29 f4       	brne	.+10     	; 0xc97c <f_getfree+0xba>
    c972:	ef ef       	ldi	r30, 0xFF	; 255
    c974:	ce 1a       	sub	r12, r30
    c976:	de 0a       	sbc	r13, r30
    c978:	ee 0a       	sbc	r14, r30
    c97a:	fe 0a       	sbc	r15, r30
    c97c:	ff ef       	ldi	r31, 0xFF	; 255
    c97e:	8f 1a       	sub	r8, r31
    c980:	9f 0a       	sbc	r9, r31
    c982:	af 0a       	sbc	r10, r31
    c984:	bf 0a       	sbc	r11, r31
    c986:	e9 81       	ldd	r30, Y+1	; 0x01
    c988:	fa 81       	ldd	r31, Y+2	; 0x02
    c98a:	81 8d       	ldd	r24, Z+25	; 0x19
    c98c:	92 8d       	ldd	r25, Z+26	; 0x1a
    c98e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c990:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c992:	88 16       	cp	r8, r24
    c994:	99 06       	cpc	r9, r25
    c996:	aa 06       	cpc	r10, r26
    c998:	bb 06       	cpc	r11, r27
    c99a:	a8 f2       	brcs	.-86     	; 0xc946 <f_getfree+0x84>
    c99c:	5d c0       	rjmp	.+186    	; 0xca58 <f_getfree+0x196>
    c99e:	f3 01       	movw	r30, r6
    c9a0:	45 a0       	ldd	r4, Z+37	; 0x25
    c9a2:	56 a0       	ldd	r5, Z+38	; 0x26
    c9a4:	67 a0       	ldd	r6, Z+39	; 0x27
    c9a6:	70 a4       	ldd	r7, Z+40	; 0x28
    c9a8:	21 2c       	mov	r2, r1
    c9aa:	31 2c       	mov	r3, r1
    c9ac:	c1 2c       	mov	r12, r1
    c9ae:	d1 2c       	mov	r13, r1
    c9b0:	76 01       	movw	r14, r12
    c9b2:	21 14       	cp	r2, r1
    c9b4:	31 04       	cpc	r3, r1
    c9b6:	b1 f4       	brne	.+44     	; 0xc9e4 <f_getfree+0x122>
    c9b8:	d3 01       	movw	r26, r6
    c9ba:	c2 01       	movw	r24, r4
    c9bc:	01 96       	adiw	r24, 0x01	; 1
    c9be:	a1 1d       	adc	r26, r1
    c9c0:	b1 1d       	adc	r27, r1
    c9c2:	8f 83       	std	Y+7, r24	; 0x07
    c9c4:	98 87       	std	Y+8, r25	; 0x08
    c9c6:	a9 87       	std	Y+9, r26	; 0x09
    c9c8:	ba 87       	std	Y+10, r27	; 0x0a
    c9ca:	b3 01       	movw	r22, r6
    c9cc:	a2 01       	movw	r20, r4
    c9ce:	89 81       	ldd	r24, Y+1	; 0x01
    c9d0:	9a 81       	ldd	r25, Y+2	; 0x02
    c9d2:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    c9d6:	00 97       	sbiw	r24, 0x00	; 0
    c9d8:	09 f0       	breq	.+2      	; 0xc9dc <f_getfree+0x11a>
    c9da:	3d c0       	rjmp	.+122    	; 0xca56 <f_getfree+0x194>
    c9dc:	4f 80       	ldd	r4, Y+7	; 0x07
    c9de:	58 84       	ldd	r5, Y+8	; 0x08
    c9e0:	69 84       	ldd	r6, Y+9	; 0x09
    c9e2:	7a 84       	ldd	r7, Y+10	; 0x0a
    c9e4:	e9 81       	ldd	r30, Y+1	; 0x01
    c9e6:	fa 81       	ldd	r31, Y+2	; 0x02
    c9e8:	80 81       	ld	r24, Z
    c9ea:	82 30       	cpi	r24, 0x02	; 2
    c9ec:	79 f4       	brne	.+30     	; 0xca0c <f_getfree+0x14a>
    c9ee:	e2 0d       	add	r30, r2
    c9f0:	f3 1d       	adc	r31, r3
    c9f2:	85 a9       	ldd	r24, Z+53	; 0x35
    c9f4:	96 a9       	ldd	r25, Z+54	; 0x36
    c9f6:	89 2b       	or	r24, r25
    c9f8:	29 f4       	brne	.+10     	; 0xca04 <f_getfree+0x142>
    c9fa:	9f ef       	ldi	r25, 0xFF	; 255
    c9fc:	c9 1a       	sub	r12, r25
    c9fe:	d9 0a       	sbc	r13, r25
    ca00:	e9 0a       	sbc	r14, r25
    ca02:	f9 0a       	sbc	r15, r25
    ca04:	a2 e0       	ldi	r26, 0x02	; 2
    ca06:	2a 0e       	add	r2, r26
    ca08:	31 1c       	adc	r3, r1
    ca0a:	15 c0       	rjmp	.+42     	; 0xca36 <f_getfree+0x174>
    ca0c:	cf 01       	movw	r24, r30
    ca0e:	c5 96       	adiw	r24, 0x35	; 53
    ca10:	82 0d       	add	r24, r2
    ca12:	93 1d       	adc	r25, r3
    ca14:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <ld_dword>
    ca18:	dc 01       	movw	r26, r24
    ca1a:	cb 01       	movw	r24, r22
    ca1c:	bf 70       	andi	r27, 0x0F	; 15
    ca1e:	89 2b       	or	r24, r25
    ca20:	8a 2b       	or	r24, r26
    ca22:	8b 2b       	or	r24, r27
    ca24:	29 f4       	brne	.+10     	; 0xca30 <f_getfree+0x16e>
    ca26:	bf ef       	ldi	r27, 0xFF	; 255
    ca28:	cb 1a       	sub	r12, r27
    ca2a:	db 0a       	sbc	r13, r27
    ca2c:	eb 0a       	sbc	r14, r27
    ca2e:	fb 0a       	sbc	r15, r27
    ca30:	e4 e0       	ldi	r30, 0x04	; 4
    ca32:	2e 0e       	add	r2, r30
    ca34:	31 1c       	adc	r3, r1
    ca36:	f1 e0       	ldi	r31, 0x01	; 1
    ca38:	3f 22       	and	r3, r31
    ca3a:	21 e0       	ldi	r18, 0x01	; 1
    ca3c:	82 1a       	sub	r8, r18
    ca3e:	91 08       	sbc	r9, r1
    ca40:	a1 08       	sbc	r10, r1
    ca42:	b1 08       	sbc	r11, r1
    ca44:	09 f0       	breq	.+2      	; 0xca48 <f_getfree+0x186>
    ca46:	b5 cf       	rjmp	.-150    	; 0xc9b2 <f_getfree+0xf0>
    ca48:	07 c0       	rjmp	.+14     	; 0xca58 <f_getfree+0x196>
    ca4a:	01 e0       	ldi	r16, 0x01	; 1
    ca4c:	10 e0       	ldi	r17, 0x00	; 0
    ca4e:	04 c0       	rjmp	.+8      	; 0xca58 <f_getfree+0x196>
    ca50:	02 e0       	ldi	r16, 0x02	; 2
    ca52:	10 e0       	ldi	r17, 0x00	; 0
    ca54:	01 c0       	rjmp	.+2      	; 0xca58 <f_getfree+0x196>
    ca56:	8c 01       	movw	r16, r24
    ca58:	ad 81       	ldd	r26, Y+5	; 0x05
    ca5a:	be 81       	ldd	r27, Y+6	; 0x06
    ca5c:	cd 92       	st	X+, r12
    ca5e:	dd 92       	st	X+, r13
    ca60:	ed 92       	st	X+, r14
    ca62:	fc 92       	st	X, r15
    ca64:	13 97       	sbiw	r26, 0x03	; 3
    ca66:	e9 81       	ldd	r30, Y+1	; 0x01
    ca68:	fa 81       	ldd	r31, Y+2	; 0x02
    ca6a:	c1 8a       	std	Z+17, r12	; 0x11
    ca6c:	d2 8a       	std	Z+18, r13	; 0x12
    ca6e:	e3 8a       	std	Z+19, r14	; 0x13
    ca70:	f4 8a       	std	Z+20, r15	; 0x14
    ca72:	84 81       	ldd	r24, Z+4	; 0x04
    ca74:	81 60       	ori	r24, 0x01	; 1
    ca76:	84 83       	std	Z+4, r24	; 0x04
    ca78:	c8 01       	movw	r24, r16
    ca7a:	2a 96       	adiw	r28, 0x0a	; 10
    ca7c:	e2 e1       	ldi	r30, 0x12	; 18
    ca7e:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0000ca82 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    ca82:	a0 e6       	ldi	r26, 0x60	; 96
    ca84:	b0 e0       	ldi	r27, 0x00	; 0
    ca86:	e7 e4       	ldi	r30, 0x47	; 71
    ca88:	f5 e6       	ldi	r31, 0x65	; 101
    ca8a:	0c 94 1d e7 	jmp	0x1ce3a	; 0x1ce3a <__prologue_saves__+0xe>
    ca8e:	a1 96       	adiw	r28, 0x21	; 33
    ca90:	9f af       	std	Y+63, r25	; 0x3f
    ca92:	8e af       	std	Y+62, r24	; 0x3e
    ca94:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    ca96:	42 e0       	ldi	r20, 0x02	; 2
    ca98:	be 01       	movw	r22, r28
    ca9a:	63 5a       	subi	r22, 0xA3	; 163
    ca9c:	7f 4f       	sbci	r23, 0xFF	; 255
    ca9e:	ce 01       	movw	r24, r28
    caa0:	81 5a       	subi	r24, 0xA1	; 161
    caa2:	9f 4f       	sbci	r25, 0xFF	; 255
    caa4:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
	if (res == FR_OK) {
    caa8:	00 97       	sbiw	r24, 0x00	; 0
    caaa:	09 f0       	breq	.+2      	; 0xcaae <f_unlink+0x2c>
    caac:	8c c0       	rjmp	.+280    	; 0xcbc6 <f_unlink+0x144>
		dj.obj.fs = fs;
    caae:	6f 96       	adiw	r28, 0x1f	; 31
    cab0:	8e ad       	ldd	r24, Y+62	; 0x3e
    cab2:	9f ad       	ldd	r25, Y+63	; 0x3f
    cab4:	6f 97       	sbiw	r28, 0x1f	; 31
    cab6:	98 ab       	std	Y+48, r25	; 0x30
    cab8:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    caba:	80 e0       	ldi	r24, 0x00	; 0
    cabc:	92 e0       	ldi	r25, 0x02	; 2
    cabe:	b0 d3       	rcall	.+1888   	; 0xd220 <ff_memalloc>
    cac0:	5c 01       	movw	r10, r24
    cac2:	00 97       	sbiw	r24, 0x00	; 0
    cac4:	09 f4       	brne	.+2      	; 0xcac8 <f_unlink+0x46>
    cac6:	49 c0       	rjmp	.+146    	; 0xcb5a <f_unlink+0xd8>
    cac8:	6f 96       	adiw	r28, 0x1f	; 31
    caca:	ee ad       	ldd	r30, Y+62	; 0x3e
    cacc:	ff ad       	ldd	r31, Y+63	; 0x3f
    cace:	6f 97       	sbiw	r28, 0x1f	; 31
    cad0:	94 87       	std	Z+12, r25	; 0x0c
    cad2:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cad4:	a1 96       	adiw	r28, 0x21	; 33
    cad6:	6e ad       	ldd	r22, Y+62	; 0x3e
    cad8:	7f ad       	ldd	r23, Y+63	; 0x3f
    cada:	a1 97       	sbiw	r28, 0x21	; 33
    cadc:	ce 01       	movw	r24, r28
    cade:	8f 96       	adiw	r24, 0x2f	; 47
    cae0:	0e 94 62 57 	call	0xaec4	; 0xaec4 <follow_path>
    cae4:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cae6:	89 2b       	or	r24, r25
    cae8:	a1 f5       	brne	.+104    	; 0xcb52 <f_unlink+0xd0>
    caea:	67 96       	adiw	r28, 0x17	; 23
    caec:	8f ad       	ldd	r24, Y+63	; 0x3f
    caee:	67 97       	sbiw	r28, 0x17	; 23
    caf0:	85 fd       	sbrc	r24, 5
    caf2:	36 c0       	rjmp	.+108    	; 0xcb60 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    caf4:	87 fd       	sbrc	r24, 7
    caf6:	34 c0       	rjmp	.+104    	; 0xcb60 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    caf8:	9b a8       	ldd	r9, Y+51	; 0x33
    cafa:	90 fc       	sbrc	r9, 0
    cafc:	40 c0       	rjmp	.+128    	; 0xcb7e <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cafe:	6f 96       	adiw	r28, 0x1f	; 31
    cb00:	0e ad       	ldd	r16, Y+62	; 0x3e
    cb02:	1f ad       	ldd	r17, Y+63	; 0x3f
    cb04:	6f 97       	sbiw	r28, 0x1f	; 31
    cb06:	2b 96       	adiw	r28, 0x0b	; 11
    cb08:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb0a:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb0c:	2b 97       	sbiw	r28, 0x0b	; 11
    cb0e:	f8 01       	movw	r30, r16
    cb10:	80 81       	ld	r24, Z
    cb12:	0e 94 0b 4a 	call	0x9416	; 0x9416 <ld_clust.isra.3>
    cb16:	6b 01       	movw	r12, r22
    cb18:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cb1a:	94 fe       	sbrs	r9, 4
    cb1c:	33 c0       	rjmp	.+102    	; 0xcb84 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cb1e:	f8 01       	movw	r30, r16
    cb20:	85 89       	ldd	r24, Z+21	; 0x15
    cb22:	96 89       	ldd	r25, Z+22	; 0x16
    cb24:	a7 89       	ldd	r26, Z+23	; 0x17
    cb26:	b0 8d       	ldd	r27, Z+24	; 0x18
    cb28:	c8 16       	cp	r12, r24
    cb2a:	d9 06       	cpc	r13, r25
    cb2c:	ea 06       	cpc	r14, r26
    cb2e:	fb 06       	cpc	r15, r27
    cb30:	31 f1       	breq	.+76     	; 0xcb7e <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cb32:	1a 83       	std	Y+2, r17	; 0x02
    cb34:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cb36:	cf 82       	std	Y+7, r12	; 0x07
    cb38:	d8 86       	std	Y+8, r13	; 0x08
    cb3a:	e9 86       	std	Y+9, r14	; 0x09
    cb3c:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cb3e:	40 e0       	ldi	r20, 0x00	; 0
    cb40:	50 e0       	ldi	r21, 0x00	; 0
    cb42:	ba 01       	movw	r22, r20
    cb44:	ce 01       	movw	r24, r28
    cb46:	01 96       	adiw	r24, 0x01	; 1
    cb48:	0e 94 1c 50 	call	0xa038	; 0xa038 <dir_sdi>
    cb4c:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cb4e:	89 2b       	or	r24, r25
    cb50:	51 f0       	breq	.+20     	; 0xcb66 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cb52:	c5 01       	movw	r24, r10
    cb54:	68 d3       	rcall	.+1744   	; 0xd226 <ff_memfree>
    cb56:	c8 01       	movw	r24, r16
    cb58:	36 c0       	rjmp	.+108    	; 0xcbc6 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb5a:	81 e1       	ldi	r24, 0x11	; 17
    cb5c:	90 e0       	ldi	r25, 0x00	; 0
    cb5e:	33 c0       	rjmp	.+102    	; 0xcbc6 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cb60:	06 e0       	ldi	r16, 0x06	; 6
    cb62:	10 e0       	ldi	r17, 0x00	; 0
    cb64:	f6 cf       	rjmp	.-20     	; 0xcb52 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cb66:	60 e0       	ldi	r22, 0x00	; 0
    cb68:	70 e0       	ldi	r23, 0x00	; 0
    cb6a:	ce 01       	movw	r24, r28
    cb6c:	01 96       	adiw	r24, 0x01	; 1
    cb6e:	0e 94 b5 53 	call	0xa76a	; 0xa76a <dir_read>
    cb72:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cb74:	00 97       	sbiw	r24, 0x00	; 0
    cb76:	19 f0       	breq	.+6      	; 0xcb7e <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cb78:	04 97       	sbiw	r24, 0x04	; 4
    cb7a:	21 f0       	breq	.+8      	; 0xcb84 <f_unlink+0x102>
    cb7c:	ea cf       	rjmp	.-44     	; 0xcb52 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cb7e:	07 e0       	ldi	r16, 0x07	; 7
    cb80:	10 e0       	ldi	r17, 0x00	; 0
    cb82:	e7 cf       	rjmp	.-50     	; 0xcb52 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cb84:	ce 01       	movw	r24, r28
    cb86:	8f 96       	adiw	r24, 0x2f	; 47
    cb88:	0e 94 7e 54 	call	0xa8fc	; 0xa8fc <dir_remove>
    cb8c:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cb8e:	89 2b       	or	r24, r25
    cb90:	01 f7       	brne	.-64     	; 0xcb52 <f_unlink+0xd0>
    cb92:	c1 14       	cp	r12, r1
    cb94:	d1 04       	cpc	r13, r1
    cb96:	e1 04       	cpc	r14, r1
    cb98:	f1 04       	cpc	r15, r1
    cb9a:	41 f4       	brne	.+16     	; 0xcbac <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cb9c:	6f 96       	adiw	r28, 0x1f	; 31
    cb9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    cba0:	9f ad       	ldd	r25, Y+63	; 0x3f
    cba2:	6f 97       	sbiw	r28, 0x1f	; 31
    cba4:	0e 94 80 4a 	call	0x9500	; 0x9500 <sync_fs>
    cba8:	8c 01       	movw	r16, r24
    cbaa:	d3 cf       	rjmp	.-90     	; 0xcb52 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cbac:	00 e0       	ldi	r16, 0x00	; 0
    cbae:	10 e0       	ldi	r17, 0x00	; 0
    cbb0:	98 01       	movw	r18, r16
    cbb2:	b7 01       	movw	r22, r14
    cbb4:	a6 01       	movw	r20, r12
    cbb6:	ce 01       	movw	r24, r28
    cbb8:	8f 96       	adiw	r24, 0x2f	; 47
    cbba:	0e 94 03 52 	call	0xa406	; 0xa406 <remove_chain>
    cbbe:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cbc0:	89 2b       	or	r24, r25
    cbc2:	39 f6       	brne	.-114    	; 0xcb52 <f_unlink+0xd0>
    cbc4:	eb cf       	rjmp	.-42     	; 0xcb9c <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cbc6:	c0 5a       	subi	r28, 0xA0	; 160
    cbc8:	df 4f       	sbci	r29, 0xFF	; 255
    cbca:	eb e0       	ldi	r30, 0x0B	; 11
    cbcc:	0c 94 39 e7 	jmp	0x1ce72	; 0x1ce72 <__epilogue_restores__+0xe>

0000cbd0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cbd0:	a0 e4       	ldi	r26, 0x40	; 64
    cbd2:	b0 e0       	ldi	r27, 0x00	; 0
    cbd4:	ee ee       	ldi	r30, 0xEE	; 238
    cbd6:	f5 e6       	ldi	r31, 0x65	; 101
    cbd8:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__prologue_saves__+0x4>
    cbdc:	21 96       	adiw	r28, 0x01	; 1
    cbde:	9f af       	std	Y+63, r25	; 0x3f
    cbe0:	8e af       	std	Y+62, r24	; 0x3e
    cbe2:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cbe4:	42 e0       	ldi	r20, 0x02	; 2
    cbe6:	be 01       	movw	r22, r28
    cbe8:	63 5c       	subi	r22, 0xC3	; 195
    cbea:	7f 4f       	sbci	r23, 0xFF	; 255
    cbec:	ce 01       	movw	r24, r28
    cbee:	cf 96       	adiw	r24, 0x3f	; 63
    cbf0:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
	if (res == FR_OK) {
    cbf4:	00 97       	sbiw	r24, 0x00	; 0
    cbf6:	09 f0       	breq	.+2      	; 0xcbfa <f_mkdir+0x2a>
    cbf8:	d6 c0       	rjmp	.+428    	; 0xcda6 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cbfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbfe:	9a 83       	std	Y+2, r25	; 0x02
    cc00:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cc02:	80 e0       	ldi	r24, 0x00	; 0
    cc04:	92 e0       	ldi	r25, 0x02	; 2
    cc06:	0c d3       	rcall	.+1560   	; 0xd220 <ff_memalloc>
    cc08:	6c 01       	movw	r12, r24
    cc0a:	00 97       	sbiw	r24, 0x00	; 0
    cc0c:	e9 f0       	breq	.+58     	; 0xcc48 <f_mkdir+0x78>
    cc0e:	ed ad       	ldd	r30, Y+61	; 0x3d
    cc10:	fe ad       	ldd	r31, Y+62	; 0x3e
    cc12:	94 87       	std	Z+12, r25	; 0x0c
    cc14:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cc16:	21 96       	adiw	r28, 0x01	; 1
    cc18:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc1a:	7f ad       	ldd	r23, Y+63	; 0x3f
    cc1c:	21 97       	sbiw	r28, 0x01	; 1
    cc1e:	ce 01       	movw	r24, r28
    cc20:	01 96       	adiw	r24, 0x01	; 1
    cc22:	0e 94 62 57 	call	0xaec4	; 0xaec4 <follow_path>
    cc26:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cc28:	89 2b       	or	r24, r25
    cc2a:	89 f0       	breq	.+34     	; 0xcc4e <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cc2c:	84 e0       	ldi	r24, 0x04	; 4
    cc2e:	e8 16       	cp	r14, r24
    cc30:	f1 04       	cpc	r15, r1
    cc32:	31 f4       	brne	.+12     	; 0xcc40 <f_mkdir+0x70>
    cc34:	88 a5       	ldd	r24, Y+40	; 0x28
    cc36:	85 ff       	sbrs	r24, 5
    cc38:	0e c0       	rjmp	.+28     	; 0xcc56 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cc3a:	26 e0       	ldi	r18, 0x06	; 6
    cc3c:	e2 2e       	mov	r14, r18
    cc3e:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cc40:	c6 01       	movw	r24, r12
    cc42:	f1 d2       	rcall	.+1506   	; 0xd226 <ff_memfree>
    cc44:	c7 01       	movw	r24, r14
    cc46:	af c0       	rjmp	.+350    	; 0xcda6 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc48:	81 e1       	ldi	r24, 0x11	; 17
    cc4a:	90 e0       	ldi	r25, 0x00	; 0
    cc4c:	ac c0       	rjmp	.+344    	; 0xcda6 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cc4e:	38 e0       	ldi	r19, 0x08	; 8
    cc50:	e3 2e       	mov	r14, r19
    cc52:	f1 2c       	mov	r15, r1
    cc54:	f5 cf       	rjmp	.-22     	; 0xcc40 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cc56:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc58:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc5a:	98 ab       	std	Y+48, r25	; 0x30
    cc5c:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cc5e:	40 e0       	ldi	r20, 0x00	; 0
    cc60:	50 e0       	ldi	r21, 0x00	; 0
    cc62:	ba 01       	movw	r22, r20
    cc64:	ce 01       	movw	r24, r28
    cc66:	8f 96       	adiw	r24, 0x2f	; 47
    cc68:	0e 94 dd 50 	call	0xa1ba	; 0xa1ba <create_chain>
    cc6c:	4b 01       	movw	r8, r22
    cc6e:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cc70:	67 2b       	or	r22, r23
    cc72:	68 2b       	or	r22, r24
    cc74:	69 2b       	or	r22, r25
    cc76:	09 f1       	breq	.+66     	; 0xccba <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cc78:	e1 e0       	ldi	r30, 0x01	; 1
    cc7a:	8e 16       	cp	r8, r30
    cc7c:	91 04       	cpc	r9, r1
    cc7e:	a1 04       	cpc	r10, r1
    cc80:	b1 04       	cpc	r11, r1
    cc82:	61 f0       	breq	.+24     	; 0xcc9c <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cc84:	ff ef       	ldi	r31, 0xFF	; 255
    cc86:	8f 16       	cp	r8, r31
    cc88:	9f 06       	cpc	r9, r31
    cc8a:	af 06       	cpc	r10, r31
    cc8c:	bf 06       	cpc	r11, r31
    cc8e:	d9 f4       	brne	.+54     	; 0xccc6 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    cc90:	0e 94 91 70 	call	0xe122	; 0xe122 <get_fattime>
    cc94:	ee 24       	eor	r14, r14
    cc96:	e3 94       	inc	r14
    cc98:	f1 2c       	mov	r15, r1
    cc9a:	05 c0       	rjmp	.+10     	; 0xcca6 <f_mkdir+0xd6>
    cc9c:	0e 94 91 70 	call	0xe122	; 0xe122 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cca0:	92 e0       	ldi	r25, 0x02	; 2
    cca2:	e9 2e       	mov	r14, r25
    cca4:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cca6:	00 e0       	ldi	r16, 0x00	; 0
    cca8:	10 e0       	ldi	r17, 0x00	; 0
    ccaa:	98 01       	movw	r18, r16
    ccac:	b5 01       	movw	r22, r10
    ccae:	a4 01       	movw	r20, r8
    ccb0:	ce 01       	movw	r24, r28
    ccb2:	8f 96       	adiw	r24, 0x2f	; 47
    ccb4:	0e 94 03 52 	call	0xa406	; 0xa406 <remove_chain>
    ccb8:	c3 cf       	rjmp	.-122    	; 0xcc40 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ccba:	0e 94 91 70 	call	0xe122	; 0xe122 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ccbe:	87 e0       	ldi	r24, 0x07	; 7
    ccc0:	e8 2e       	mov	r14, r24
    ccc2:	f1 2c       	mov	r15, r1
    ccc4:	f0 cf       	rjmp	.-32     	; 0xcca6 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ccc6:	0e 94 91 70 	call	0xe122	; 0xe122 <get_fattime>
    ccca:	2b 01       	movw	r4, r22
    cccc:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    ccce:	b5 01       	movw	r22, r10
    ccd0:	a4 01       	movw	r20, r8
    ccd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccd6:	0e 94 f2 4a 	call	0x95e4	; 0x95e4 <dir_clear>
    ccda:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    ccdc:	89 2b       	or	r24, r25
    ccde:	19 f7       	brne	.-58     	; 0xcca6 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cce0:	8d ad       	ldd	r24, Y+61	; 0x3d
    cce2:	9e ad       	ldd	r25, Y+62	; 0x3e
    cce4:	4b e0       	ldi	r20, 0x0B	; 11
    cce6:	50 e0       	ldi	r21, 0x00	; 0
    cce8:	60 e2       	ldi	r22, 0x20	; 32
    ccea:	70 e0       	ldi	r23, 0x00	; 0
    ccec:	c5 96       	adiw	r24, 0x35	; 53
    ccee:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <mem_set>
						fs->win[DIR_Name] = '.';
    ccf2:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccf4:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccf6:	1e e2       	ldi	r17, 0x2E	; 46
    ccf8:	fc 01       	movw	r30, r24
    ccfa:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    ccfc:	e0 5c       	subi	r30, 0xC0	; 192
    ccfe:	ff 4f       	sbci	r31, 0xFF	; 255
    cd00:	20 e1       	ldi	r18, 0x10	; 16
    cd02:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    cd04:	b3 01       	movw	r22, r6
    cd06:	a2 01       	movw	r20, r4
    cd08:	85 5b       	subi	r24, 0xB5	; 181
    cd0a:	9f 4f       	sbci	r25, 0xFF	; 255
    cd0c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <st_dword>
						st_clust(fs, fs->win, dcl);
    cd10:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd12:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd14:	bc 01       	movw	r22, r24
    cd16:	6b 5c       	subi	r22, 0xCB	; 203
    cd18:	7f 4f       	sbci	r23, 0xFF	; 255
    cd1a:	a5 01       	movw	r20, r10
    cd1c:	94 01       	movw	r18, r8
    cd1e:	0e 94 20 4a 	call	0x9440	; 0x9440 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cd22:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd24:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd26:	bc 01       	movw	r22, r24
    cd28:	6b 5c       	subi	r22, 0xCB	; 203
    cd2a:	7f 4f       	sbci	r23, 0xFF	; 255
    cd2c:	40 e2       	ldi	r20, 0x20	; 32
    cd2e:	50 e0       	ldi	r21, 0x00	; 0
    cd30:	8b 5a       	subi	r24, 0xAB	; 171
    cd32:	9f 4f       	sbci	r25, 0xFF	; 255
    cd34:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cd38:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd3c:	fc 01       	movw	r30, r24
    cd3e:	ea 5a       	subi	r30, 0xAA	; 170
    cd40:	ff 4f       	sbci	r31, 0xFF	; 255
    cd42:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    cd44:	2f 81       	ldd	r18, Y+7	; 0x07
    cd46:	38 85       	ldd	r19, Y+8	; 0x08
    cd48:	49 85       	ldd	r20, Y+9	; 0x09
    cd4a:	5a 85       	ldd	r21, Y+10	; 0x0a
    cd4c:	bc 01       	movw	r22, r24
    cd4e:	6b 5a       	subi	r22, 0xAB	; 171
    cd50:	7f 4f       	sbci	r23, 0xFF	; 255
    cd52:	0e 94 20 4a 	call	0x9440	; 0x9440 <st_clust.isra.4>
						fs->wflag = 1;
    cd56:	ed ad       	ldd	r30, Y+61	; 0x3d
    cd58:	fe ad       	ldd	r31, Y+62	; 0x3e
    cd5a:	81 e0       	ldi	r24, 0x01	; 1
    cd5c:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cd5e:	ce 01       	movw	r24, r28
    cd60:	01 96       	adiw	r24, 0x01	; 1
    cd62:	0e 94 d4 55 	call	0xaba8	; 0xaba8 <dir_register>
    cd66:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cd68:	89 2b       	or	r24, r25
    cd6a:	09 f0       	breq	.+2      	; 0xcd6e <f_mkdir+0x19e>
    cd6c:	9c cf       	rjmp	.-200    	; 0xcca6 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cd6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd72:	b3 01       	movw	r22, r6
    cd74:	a2 01       	movw	r20, r4
    cd76:	46 96       	adiw	r24, 0x16	; 22
    cd78:	0e 94 ed 47 	call	0x8fda	; 0x8fda <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cd7c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cd7e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cd80:	a5 01       	movw	r20, r10
    cd82:	94 01       	movw	r18, r8
    cd84:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd86:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd88:	0e 94 20 4a 	call	0x9440	; 0x9440 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cd8c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cd8e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cd90:	80 e1       	ldi	r24, 0x10	; 16
    cd92:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cd94:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd96:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd98:	21 e0       	ldi	r18, 0x01	; 1
    cd9a:	fc 01       	movw	r30, r24
    cd9c:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cd9e:	0e 94 80 4a 	call	0x9500	; 0x9500 <sync_fs>
    cda2:	7c 01       	movw	r14, r24
    cda4:	4d cf       	rjmp	.-358    	; 0xcc40 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cda6:	c0 5c       	subi	r28, 0xC0	; 192
    cda8:	df 4f       	sbci	r29, 0xFF	; 255
    cdaa:	e0 e1       	ldi	r30, 0x10	; 16
    cdac:	0c 94 34 e7 	jmp	0x1ce68	; 0x1ce68 <__epilogue_restores__+0x4>

0000cdb0 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cdb0:	a2 e8       	ldi	r26, 0x82	; 130
    cdb2:	b0 e0       	ldi	r27, 0x00	; 0
    cdb4:	ee ed       	ldi	r30, 0xDE	; 222
    cdb6:	f6 e6       	ldi	r31, 0x66	; 102
    cdb8:	0c 94 1f e7 	jmp	0x1ce3e	; 0x1ce3e <__prologue_saves__+0x12>
    cdbc:	c1 58       	subi	r28, 0x81	; 129
    cdbe:	df 4f       	sbci	r29, 0xFF	; 255
    cdc0:	99 83       	std	Y+1, r25	; 0x01
    cdc2:	88 83       	st	Y, r24
    cdc4:	cf 57       	subi	r28, 0x7F	; 127
    cdc6:	d0 40       	sbci	r29, 0x00	; 0
    cdc8:	cf 57       	subi	r28, 0x7F	; 127
    cdca:	df 4f       	sbci	r29, 0xFF	; 255
    cdcc:	79 83       	std	Y+1, r23	; 0x01
    cdce:	68 83       	st	Y, r22
    cdd0:	c1 58       	subi	r28, 0x81	; 129
    cdd2:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cdd4:	ce 01       	movw	r24, r28
    cdd6:	8f 57       	subi	r24, 0x7F	; 127
    cdd8:	9f 4f       	sbci	r25, 0xFF	; 255
    cdda:	0e 94 7e 48 	call	0x90fc	; 0x90fc <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cdde:	42 e0       	ldi	r20, 0x02	; 2
    cde0:	be 01       	movw	r22, r28
    cde2:	63 58       	subi	r22, 0x83	; 131
    cde4:	7f 4f       	sbci	r23, 0xFF	; 255
    cde6:	ce 01       	movw	r24, r28
    cde8:	81 58       	subi	r24, 0x81	; 129
    cdea:	9f 4f       	sbci	r25, 0xFF	; 255
    cdec:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
	if (res == FR_OK) {
    cdf0:	00 97       	sbiw	r24, 0x00	; 0
    cdf2:	09 f0       	breq	.+2      	; 0xcdf6 <f_rename+0x46>
    cdf4:	ed c0       	rjmp	.+474    	; 0xcfd0 <f_rename+0x220>
		djo.obj.fs = fs;
    cdf6:	ef 96       	adiw	r28, 0x3f	; 63
    cdf8:	8e ad       	ldd	r24, Y+62	; 0x3e
    cdfa:	9f ad       	ldd	r25, Y+63	; 0x3f
    cdfc:	ef 97       	sbiw	r28, 0x3f	; 63
    cdfe:	98 ab       	std	Y+48, r25	; 0x30
    ce00:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ce02:	80 e0       	ldi	r24, 0x00	; 0
    ce04:	92 e0       	ldi	r25, 0x02	; 2
    ce06:	0c d2       	rcall	.+1048   	; 0xd220 <ff_memalloc>
    ce08:	6c 01       	movw	r12, r24
    ce0a:	00 97       	sbiw	r24, 0x00	; 0
    ce0c:	f1 f0       	breq	.+60     	; 0xce4a <f_rename+0x9a>
    ce0e:	ef 96       	adiw	r28, 0x3f	; 63
    ce10:	ee ad       	ldd	r30, Y+62	; 0x3e
    ce12:	ff ad       	ldd	r31, Y+63	; 0x3f
    ce14:	ef 97       	sbiw	r28, 0x3f	; 63
    ce16:	94 87       	std	Z+12, r25	; 0x0c
    ce18:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    ce1a:	c1 58       	subi	r28, 0x81	; 129
    ce1c:	df 4f       	sbci	r29, 0xFF	; 255
    ce1e:	68 81       	ld	r22, Y
    ce20:	79 81       	ldd	r23, Y+1	; 0x01
    ce22:	cf 57       	subi	r28, 0x7F	; 127
    ce24:	d0 40       	sbci	r29, 0x00	; 0
    ce26:	ce 01       	movw	r24, r28
    ce28:	8f 96       	adiw	r24, 0x2f	; 47
    ce2a:	0e 94 62 57 	call	0xaec4	; 0xaec4 <follow_path>
    ce2e:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    ce30:	89 2b       	or	r24, r25
    ce32:	39 f4       	brne	.+14     	; 0xce42 <f_rename+0x92>
    ce34:	67 96       	adiw	r28, 0x17	; 23
    ce36:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce38:	67 97       	sbiw	r28, 0x17	; 23
    ce3a:	80 7a       	andi	r24, 0xA0	; 160
    ce3c:	49 f0       	breq	.+18     	; 0xce50 <f_rename+0xa0>
    ce3e:	06 e0       	ldi	r16, 0x06	; 6
    ce40:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    ce42:	c6 01       	movw	r24, r12
    ce44:	f0 d1       	rcall	.+992    	; 0xd226 <ff_memfree>
    ce46:	c8 01       	movw	r24, r16
    ce48:	c3 c0       	rjmp	.+390    	; 0xcfd0 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce4a:	81 e1       	ldi	r24, 0x11	; 17
    ce4c:	90 e0       	ldi	r25, 0x00	; 0
    ce4e:	c0 c0       	rjmp	.+384    	; 0xcfd0 <f_rename+0x220>
    ce50:	2b 96       	adiw	r28, 0x0b	; 11
    ce52:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce54:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce56:	2b 97       	sbiw	r28, 0x0b	; 11
    ce58:	40 e2       	ldi	r20, 0x20	; 32
    ce5a:	50 e0       	ldi	r21, 0x00	; 0
    ce5c:	ce 01       	movw	r24, r28
    ce5e:	83 5a       	subi	r24, 0xA3	; 163
    ce60:	9f 4f       	sbci	r25, 0xFF	; 255
    ce62:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
    ce66:	4e e2       	ldi	r20, 0x2E	; 46
    ce68:	50 e0       	ldi	r21, 0x00	; 0
    ce6a:	be 01       	movw	r22, r28
    ce6c:	61 5d       	subi	r22, 0xD1	; 209
    ce6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ce70:	ce 01       	movw	r24, r28
    ce72:	01 96       	adiw	r24, 0x01	; 1
    ce74:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    ce78:	cf 57       	subi	r28, 0x7F	; 127
    ce7a:	df 4f       	sbci	r29, 0xFF	; 255
    ce7c:	68 81       	ld	r22, Y
    ce7e:	79 81       	ldd	r23, Y+1	; 0x01
    ce80:	c1 58       	subi	r28, 0x81	; 129
    ce82:	d0 40       	sbci	r29, 0x00	; 0
    ce84:	ce 01       	movw	r24, r28
    ce86:	01 96       	adiw	r24, 0x01	; 1
    ce88:	0e 94 62 57 	call	0xaec4	; 0xaec4 <follow_path>
    ce8c:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    ce8e:	89 2b       	or	r24, r25
    ce90:	f9 f4       	brne	.+62     	; 0xced0 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    ce92:	4f 81       	ldd	r20, Y+7	; 0x07
    ce94:	58 85       	ldd	r21, Y+8	; 0x08
    ce96:	69 85       	ldd	r22, Y+9	; 0x09
    ce98:	7a 85       	ldd	r23, Y+10	; 0x0a
    ce9a:	8d a9       	ldd	r24, Y+53	; 0x35
    ce9c:	9e a9       	ldd	r25, Y+54	; 0x36
    ce9e:	af a9       	ldd	r26, Y+55	; 0x37
    cea0:	b8 ad       	ldd	r27, Y+56	; 0x38
    cea2:	48 17       	cp	r20, r24
    cea4:	59 07       	cpc	r21, r25
    cea6:	6a 07       	cpc	r22, r26
    cea8:	7b 07       	cpc	r23, r27
    ceaa:	09 f0       	breq	.+2      	; 0xceae <f_rename+0xfe>
    ceac:	8b c0       	rjmp	.+278    	; 0xcfc4 <f_rename+0x214>
    ceae:	4f 85       	ldd	r20, Y+15	; 0x0f
    ceb0:	58 89       	ldd	r21, Y+16	; 0x10
    ceb2:	69 89       	ldd	r22, Y+17	; 0x11
    ceb4:	7a 89       	ldd	r23, Y+18	; 0x12
    ceb6:	21 96       	adiw	r28, 0x01	; 1
    ceb8:	8c ad       	ldd	r24, Y+60	; 0x3c
    ceba:	9d ad       	ldd	r25, Y+61	; 0x3d
    cebc:	ae ad       	ldd	r26, Y+62	; 0x3e
    cebe:	bf ad       	ldd	r27, Y+63	; 0x3f
    cec0:	21 97       	sbiw	r28, 0x01	; 1
    cec2:	48 17       	cp	r20, r24
    cec4:	59 07       	cpc	r21, r25
    cec6:	6a 07       	cpc	r22, r26
    cec8:	7b 07       	cpc	r23, r27
    ceca:	09 f0       	breq	.+2      	; 0xcece <f_rename+0x11e>
    cecc:	7b c0       	rjmp	.+246    	; 0xcfc4 <f_rename+0x214>
    cece:	04 c0       	rjmp	.+8      	; 0xced8 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    ced0:	04 30       	cpi	r16, 0x04	; 4
    ced2:	11 05       	cpc	r17, r1
    ced4:	09 f0       	breq	.+2      	; 0xced8 <f_rename+0x128>
    ced6:	b5 cf       	rjmp	.-150    	; 0xce42 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    ced8:	ce 01       	movw	r24, r28
    ceda:	01 96       	adiw	r24, 0x01	; 1
    cedc:	0e 94 d4 55 	call	0xaba8	; 0xaba8 <dir_register>
    cee0:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cee2:	89 2b       	or	r24, r25
    cee4:	09 f0       	breq	.+2      	; 0xcee8 <f_rename+0x138>
    cee6:	ad cf       	rjmp	.-166    	; 0xce42 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cee8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ceea:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ceec:	6d e5       	ldi	r22, 0x5D	; 93
    ceee:	70 e0       	ldi	r23, 0x00	; 0
    cef0:	6c 0f       	add	r22, r28
    cef2:	7d 1f       	adc	r23, r29
    cef4:	63 5f       	subi	r22, 0xF3	; 243
    cef6:	7f 4f       	sbci	r23, 0xFF	; 255
    cef8:	43 e1       	ldi	r20, 0x13	; 19
    cefa:	50 e0       	ldi	r21, 0x00	; 0
    cefc:	c8 01       	movw	r24, r16
    cefe:	0d 96       	adiw	r24, 0x0d	; 13
    cf00:	0e 94 00 4a 	call	0x9400	; 0x9400 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cf04:	a9 96       	adiw	r28, 0x29	; 41
    cf06:	8f ad       	ldd	r24, Y+63	; 0x3f
    cf08:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cf0a:	84 ff       	sbrs	r24, 4
    cf0c:	80 62       	ori	r24, 0x20	; 32
    cf0e:	f8 01       	movw	r30, r16
    cf10:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cf12:	ef 96       	adiw	r28, 0x3f	; 63
    cf14:	ee ac       	ldd	r14, Y+62	; 0x3e
    cf16:	ff ac       	ldd	r15, Y+63	; 0x3f
    cf18:	ef 97       	sbiw	r28, 0x3f	; 63
    cf1a:	bb 24       	eor	r11, r11
    cf1c:	b3 94       	inc	r11
    cf1e:	f7 01       	movw	r30, r14
    cf20:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cf22:	f8 01       	movw	r30, r16
    cf24:	83 85       	ldd	r24, Z+11	; 0x0b
    cf26:	84 ff       	sbrs	r24, 4
    cf28:	3d c0       	rjmp	.+122    	; 0xcfa4 <f_rename+0x1f4>
    cf2a:	4d a9       	ldd	r20, Y+53	; 0x35
    cf2c:	5e a9       	ldd	r21, Y+54	; 0x36
    cf2e:	6f a9       	ldd	r22, Y+55	; 0x37
    cf30:	78 ad       	ldd	r23, Y+56	; 0x38
    cf32:	8f 81       	ldd	r24, Y+7	; 0x07
    cf34:	98 85       	ldd	r25, Y+8	; 0x08
    cf36:	a9 85       	ldd	r26, Y+9	; 0x09
    cf38:	ba 85       	ldd	r27, Y+10	; 0x0a
    cf3a:	48 17       	cp	r20, r24
    cf3c:	59 07       	cpc	r21, r25
    cf3e:	6a 07       	cpc	r22, r26
    cf40:	7b 07       	cpc	r23, r27
    cf42:	81 f1       	breq	.+96     	; 0xcfa4 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cf44:	b8 01       	movw	r22, r16
    cf46:	f7 01       	movw	r30, r14
    cf48:	80 81       	ld	r24, Z
    cf4a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <ld_clust.isra.3>
    cf4e:	ab 01       	movw	r20, r22
    cf50:	bc 01       	movw	r22, r24
    cf52:	c7 01       	movw	r24, r14
    cf54:	0e 94 0b 48 	call	0x9016	; 0x9016 <clst2sect>
    cf58:	ab 01       	movw	r20, r22
    cf5a:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cf5c:	41 15       	cp	r20, r1
    cf5e:	51 05       	cpc	r21, r1
    cf60:	61 05       	cpc	r22, r1
    cf62:	71 05       	cpc	r23, r1
    cf64:	91 f1       	breq	.+100    	; 0xcfca <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cf66:	c7 01       	movw	r24, r14
    cf68:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    cf6c:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cf6e:	89 2b       	or	r24, r25
    cf70:	09 f0       	breq	.+2      	; 0xcf74 <f_rename+0x1c4>
    cf72:	67 cf       	rjmp	.-306    	; 0xce42 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf74:	ef 96       	adiw	r28, 0x3f	; 63
    cf76:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf78:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf7a:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cf7c:	fc 01       	movw	r30, r24
    cf7e:	ea 5a       	subi	r30, 0xAA	; 170
    cf80:	ff 4f       	sbci	r31, 0xFF	; 255
    cf82:	20 81       	ld	r18, Z
    cf84:	2e 32       	cpi	r18, 0x2E	; 46
    cf86:	71 f4       	brne	.+28     	; 0xcfa4 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cf88:	2f 81       	ldd	r18, Y+7	; 0x07
    cf8a:	38 85       	ldd	r19, Y+8	; 0x08
    cf8c:	49 85       	ldd	r20, Y+9	; 0x09
    cf8e:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf90:	bc 01       	movw	r22, r24
    cf92:	6b 5a       	subi	r22, 0xAB	; 171
    cf94:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cf96:	0e 94 20 4a 	call	0x9440	; 0x9440 <st_clust.isra.4>
									fs->wflag = 1;
    cf9a:	ef 96       	adiw	r28, 0x3f	; 63
    cf9c:	ee ad       	ldd	r30, Y+62	; 0x3e
    cf9e:	ff ad       	ldd	r31, Y+63	; 0x3f
    cfa0:	ef 97       	sbiw	r28, 0x3f	; 63
    cfa2:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cfa4:	ce 01       	movw	r24, r28
    cfa6:	8f 96       	adiw	r24, 0x2f	; 47
    cfa8:	0e 94 7e 54 	call	0xa8fc	; 0xa8fc <dir_remove>
    cfac:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cfae:	89 2b       	or	r24, r25
    cfb0:	09 f0       	breq	.+2      	; 0xcfb4 <f_rename+0x204>
    cfb2:	47 cf       	rjmp	.-370    	; 0xce42 <f_rename+0x92>
					res = sync_fs(fs);
    cfb4:	ef 96       	adiw	r28, 0x3f	; 63
    cfb6:	8e ad       	ldd	r24, Y+62	; 0x3e
    cfb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    cfba:	ef 97       	sbiw	r28, 0x3f	; 63
    cfbc:	0e 94 80 4a 	call	0x9500	; 0x9500 <sync_fs>
    cfc0:	8c 01       	movw	r16, r24
    cfc2:	3f cf       	rjmp	.-386    	; 0xce42 <f_rename+0x92>
    cfc4:	08 e0       	ldi	r16, 0x08	; 8
    cfc6:	10 e0       	ldi	r17, 0x00	; 0
    cfc8:	3c cf       	rjmp	.-392    	; 0xce42 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cfca:	02 e0       	ldi	r16, 0x02	; 2
    cfcc:	10 e0       	ldi	r17, 0x00	; 0
    cfce:	39 cf       	rjmp	.-398    	; 0xce42 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cfd0:	ce 57       	subi	r28, 0x7E	; 126
    cfd2:	df 4f       	sbci	r29, 0xFF	; 255
    cfd4:	e9 e0       	ldi	r30, 0x09	; 9
    cfd6:	0c 94 3b e7 	jmp	0x1ce76	; 0x1ce76 <__epilogue_restores__+0x12>

0000cfda <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cfda:	a2 e3       	ldi	r26, 0x32	; 50
    cfdc:	b0 e0       	ldi	r27, 0x00	; 0
    cfde:	e3 ef       	ldi	r30, 0xF3	; 243
    cfe0:	f7 e6       	ldi	r31, 0x67	; 103
    cfe2:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    cfe6:	9a ab       	std	Y+50, r25	; 0x32
    cfe8:	89 ab       	std	Y+49, r24	; 0x31
    cfea:	e6 2e       	mov	r14, r22
    cfec:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cfee:	42 e0       	ldi	r20, 0x02	; 2
    cff0:	be 01       	movw	r22, r28
    cff2:	61 5d       	subi	r22, 0xD1	; 209
    cff4:	7f 4f       	sbci	r23, 0xFF	; 255
    cff6:	ce 01       	movw	r24, r28
    cff8:	c1 96       	adiw	r24, 0x31	; 49
    cffa:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
	if (res == FR_OK) {
    cffe:	00 97       	sbiw	r24, 0x00	; 0
    d000:	a9 f5       	brne	.+106    	; 0xd06c <f_chmod+0x92>
		dj.obj.fs = fs;
    d002:	8f a5       	ldd	r24, Y+47	; 0x2f
    d004:	98 a9       	ldd	r25, Y+48	; 0x30
    d006:	9a 83       	std	Y+2, r25	; 0x02
    d008:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d00a:	80 e0       	ldi	r24, 0x00	; 0
    d00c:	92 e0       	ldi	r25, 0x02	; 2
    d00e:	08 d1       	rcall	.+528    	; 0xd220 <ff_memalloc>
    d010:	6c 01       	movw	r12, r24
    d012:	00 97       	sbiw	r24, 0x00	; 0
    d014:	b1 f0       	breq	.+44     	; 0xd042 <f_chmod+0x68>
    d016:	ef a5       	ldd	r30, Y+47	; 0x2f
    d018:	f8 a9       	ldd	r31, Y+48	; 0x30
    d01a:	94 87       	std	Z+12, r25	; 0x0c
    d01c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d01e:	69 a9       	ldd	r22, Y+49	; 0x31
    d020:	7a a9       	ldd	r23, Y+50	; 0x32
    d022:	ce 01       	movw	r24, r28
    d024:	01 96       	adiw	r24, 0x01	; 1
    d026:	0e 94 62 57 	call	0xaec4	; 0xaec4 <follow_path>
    d02a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d02c:	89 2b       	or	r24, r25
    d02e:	29 f4       	brne	.+10     	; 0xd03a <f_chmod+0x60>
    d030:	88 a5       	ldd	r24, Y+40	; 0x28
    d032:	80 7a       	andi	r24, 0xA0	; 160
    d034:	49 f0       	breq	.+18     	; 0xd048 <f_chmod+0x6e>
    d036:	06 e0       	ldi	r16, 0x06	; 6
    d038:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d03a:	c6 01       	movw	r24, r12
    d03c:	f4 d0       	rcall	.+488    	; 0xd226 <ff_memfree>
    d03e:	c8 01       	movw	r24, r16
    d040:	15 c0       	rjmp	.+42     	; 0xd06c <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d042:	81 e1       	ldi	r24, 0x11	; 17
    d044:	90 e0       	ldi	r25, 0x00	; 0
    d046:	12 c0       	rjmp	.+36     	; 0xd06c <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d048:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d04a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d04c:	83 85       	ldd	r24, Z+11	; 0x0b
    d04e:	6e 2d       	mov	r22, r14
    d050:	68 27       	eor	r22, r24
    d052:	6f 21       	and	r22, r15
    d054:	67 72       	andi	r22, 0x27	; 39
    d056:	68 27       	eor	r22, r24
    d058:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    d05a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d05c:	98 a9       	ldd	r25, Y+48	; 0x30
    d05e:	21 e0       	ldi	r18, 0x01	; 1
    d060:	fc 01       	movw	r30, r24
    d062:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d064:	0e 94 80 4a 	call	0x9500	; 0x9500 <sync_fs>
    d068:	8c 01       	movw	r16, r24
    d06a:	e7 cf       	rjmp	.-50     	; 0xd03a <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d06c:	e2 96       	adiw	r28, 0x32	; 50
    d06e:	e8 e0       	ldi	r30, 0x08	; 8
    d070:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000d074 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d074:	a2 e3       	ldi	r26, 0x32	; 50
    d076:	b0 e0       	ldi	r27, 0x00	; 0
    d078:	e0 e4       	ldi	r30, 0x40	; 64
    d07a:	f8 e6       	ldi	r31, 0x68	; 104
    d07c:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    d080:	9a ab       	std	Y+50, r25	; 0x32
    d082:	89 ab       	std	Y+49, r24	; 0x31
    d084:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d086:	42 e0       	ldi	r20, 0x02	; 2
    d088:	be 01       	movw	r22, r28
    d08a:	61 5d       	subi	r22, 0xD1	; 209
    d08c:	7f 4f       	sbci	r23, 0xFF	; 255
    d08e:	ce 01       	movw	r24, r28
    d090:	c1 96       	adiw	r24, 0x31	; 49
    d092:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
	if (res == FR_OK) {
    d096:	00 97       	sbiw	r24, 0x00	; 0
    d098:	09 f0       	breq	.+2      	; 0xd09c <f_utime+0x28>
    d09a:	41 c0       	rjmp	.+130    	; 0xd11e <f_utime+0xaa>
		dj.obj.fs = fs;
    d09c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d09e:	98 a9       	ldd	r25, Y+48	; 0x30
    d0a0:	9a 83       	std	Y+2, r25	; 0x02
    d0a2:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d0a4:	80 e0       	ldi	r24, 0x00	; 0
    d0a6:	92 e0       	ldi	r25, 0x02	; 2
    d0a8:	bb d0       	rcall	.+374    	; 0xd220 <ff_memalloc>
    d0aa:	7c 01       	movw	r14, r24
    d0ac:	00 97       	sbiw	r24, 0x00	; 0
    d0ae:	b1 f0       	breq	.+44     	; 0xd0dc <f_utime+0x68>
    d0b0:	ef a5       	ldd	r30, Y+47	; 0x2f
    d0b2:	f8 a9       	ldd	r31, Y+48	; 0x30
    d0b4:	94 87       	std	Z+12, r25	; 0x0c
    d0b6:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d0b8:	69 a9       	ldd	r22, Y+49	; 0x31
    d0ba:	7a a9       	ldd	r23, Y+50	; 0x32
    d0bc:	ce 01       	movw	r24, r28
    d0be:	01 96       	adiw	r24, 0x01	; 1
    d0c0:	0e 94 62 57 	call	0xaec4	; 0xaec4 <follow_path>
    d0c4:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d0c6:	89 2b       	or	r24, r25
    d0c8:	29 f4       	brne	.+10     	; 0xd0d4 <f_utime+0x60>
    d0ca:	88 a5       	ldd	r24, Y+40	; 0x28
    d0cc:	80 7a       	andi	r24, 0xA0	; 160
    d0ce:	49 f0       	breq	.+18     	; 0xd0e2 <f_utime+0x6e>
    d0d0:	06 e0       	ldi	r16, 0x06	; 6
    d0d2:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d0d4:	c7 01       	movw	r24, r14
    d0d6:	a7 d0       	rcall	.+334    	; 0xd226 <ff_memfree>
    d0d8:	c8 01       	movw	r24, r16
    d0da:	21 c0       	rjmp	.+66     	; 0xd11e <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d0dc:	81 e1       	ldi	r24, 0x11	; 17
    d0de:	90 e0       	ldi	r25, 0x00	; 0
    d0e0:	1e c0       	rjmp	.+60     	; 0xd11e <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d0e2:	f6 01       	movw	r30, r12
    d0e4:	44 81       	ldd	r20, Z+4	; 0x04
    d0e6:	55 81       	ldd	r21, Z+5	; 0x05
    d0e8:	60 e0       	ldi	r22, 0x00	; 0
    d0ea:	70 e0       	ldi	r23, 0x00	; 0
    d0ec:	ba 01       	movw	r22, r20
    d0ee:	55 27       	eor	r21, r21
    d0f0:	44 27       	eor	r20, r20
    d0f2:	86 81       	ldd	r24, Z+6	; 0x06
    d0f4:	97 81       	ldd	r25, Z+7	; 0x07
    d0f6:	a0 e0       	ldi	r26, 0x00	; 0
    d0f8:	b0 e0       	ldi	r27, 0x00	; 0
    d0fa:	48 2b       	or	r20, r24
    d0fc:	59 2b       	or	r21, r25
    d0fe:	6a 2b       	or	r22, r26
    d100:	7b 2b       	or	r23, r27
    d102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d106:	46 96       	adiw	r24, 0x16	; 22
    d108:	0e 94 ed 47 	call	0x8fda	; 0x8fda <st_dword>
				fs->wflag = 1;
    d10c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d10e:	98 a9       	ldd	r25, Y+48	; 0x30
    d110:	21 e0       	ldi	r18, 0x01	; 1
    d112:	fc 01       	movw	r30, r24
    d114:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d116:	0e 94 80 4a 	call	0x9500	; 0x9500 <sync_fs>
    d11a:	8c 01       	movw	r16, r24
    d11c:	db cf       	rjmp	.-74     	; 0xd0d4 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d11e:	e2 96       	adiw	r28, 0x32	; 50
    d120:	e8 e0       	ldi	r30, 0x08	; 8
    d122:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000d126 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d126:	a2 e3       	ldi	r26, 0x32	; 50
    d128:	b0 e0       	ldi	r27, 0x00	; 0
    d12a:	e9 e9       	ldi	r30, 0x99	; 153
    d12c:	f8 e6       	ldi	r31, 0x68	; 104
    d12e:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    d132:	9a ab       	std	Y+50, r25	; 0x32
    d134:	89 ab       	std	Y+49, r24	; 0x31
    d136:	7b 01       	movw	r14, r22
    d138:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d13a:	40 e0       	ldi	r20, 0x00	; 0
    d13c:	be 01       	movw	r22, r28
    d13e:	61 5d       	subi	r22, 0xD1	; 209
    d140:	7f 4f       	sbci	r23, 0xFF	; 255
    d142:	ce 01       	movw	r24, r28
    d144:	c1 96       	adiw	r24, 0x31	; 49
    d146:	0e 94 15 4c 	call	0x982a	; 0x982a <mount_volume>
    d14a:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d14c:	89 2b       	or	r24, r25
    d14e:	09 f0       	breq	.+2      	; 0xd152 <f_getlabel+0x2c>
    d150:	62 c0       	rjmp	.+196    	; 0xd216 <f_getlabel+0xf0>
    d152:	e1 14       	cp	r14, r1
    d154:	f1 04       	cpc	r15, r1
    d156:	a1 f1       	breq	.+104    	; 0xd1c0 <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d158:	8f a5       	ldd	r24, Y+47	; 0x2f
    d15a:	98 a9       	ldd	r25, Y+48	; 0x30
    d15c:	9a 83       	std	Y+2, r25	; 0x02
    d15e:	89 83       	std	Y+1, r24	; 0x01
    d160:	1f 82       	std	Y+7, r1	; 0x07
    d162:	18 86       	std	Y+8, r1	; 0x08
    d164:	19 86       	std	Y+9, r1	; 0x09
    d166:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d168:	40 e0       	ldi	r20, 0x00	; 0
    d16a:	50 e0       	ldi	r21, 0x00	; 0
    d16c:	ba 01       	movw	r22, r20
    d16e:	ce 01       	movw	r24, r28
    d170:	01 96       	adiw	r24, 0x01	; 1
    d172:	0e 94 1c 50 	call	0xa038	; 0xa038 <dir_sdi>
		if (res == FR_OK) {
    d176:	00 97       	sbiw	r24, 0x00	; 0
    d178:	f1 f4       	brne	.+60     	; 0xd1b6 <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d17a:	61 e0       	ldi	r22, 0x01	; 1
    d17c:	70 e0       	ldi	r23, 0x00	; 0
    d17e:	ce 01       	movw	r24, r28
    d180:	01 96       	adiw	r24, 0x01	; 1
    d182:	0e 94 b5 53 	call	0xa76a	; 0xa76a <dir_read>
		 	if (res == FR_OK) {
    d186:	00 97       	sbiw	r24, 0x00	; 0
    d188:	b1 f4       	brne	.+44     	; 0xd1b6 <f_getlabel+0x90>
    d18a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d18c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d18e:	f7 01       	movw	r30, r14
    d190:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d192:	a7 01       	movw	r20, r14
    d194:	dc 01       	movw	r26, r24
    d196:	2d 91       	ld	r18, X+
    d198:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    d19a:	da 01       	movw	r26, r20
    d19c:	2d 93       	st	X+, r18
    d19e:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d1a0:	ae 17       	cp	r26, r30
    d1a2:	bf 07       	cpc	r27, r31
    d1a4:	b9 f7       	brne	.-18     	; 0xd194 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d1a6:	10 82       	st	Z, r1
						if (di == 0) break;
    d1a8:	ee 16       	cp	r14, r30
    d1aa:	ff 06       	cpc	r15, r31
    d1ac:	49 f0       	breq	.+18     	; 0xd1c0 <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    d1ae:	82 91       	ld	r24, -Z
    d1b0:	80 32       	cpi	r24, 0x20	; 32
    d1b2:	c9 f3       	breq	.-14     	; 0xd1a6 <f_getlabel+0x80>
    d1b4:	05 c0       	rjmp	.+10     	; 0xd1c0 <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d1b6:	84 30       	cpi	r24, 0x04	; 4
    d1b8:	91 05       	cpc	r25, r1
    d1ba:	61 f5       	brne	.+88     	; 0xd214 <f_getlabel+0xee>
			label[0] = 0;
    d1bc:	f7 01       	movw	r30, r14
    d1be:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d1c0:	c1 14       	cp	r12, r1
    d1c2:	d1 04       	cpc	r13, r1
    d1c4:	41 f1       	breq	.+80     	; 0xd216 <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    d1c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    d1c8:	98 a9       	ldd	r25, Y+48	; 0x30
    d1ca:	fc 01       	movw	r30, r24
    d1cc:	41 a1       	ldd	r20, Z+33	; 0x21
    d1ce:	52 a1       	ldd	r21, Z+34	; 0x22
    d1d0:	63 a1       	ldd	r22, Z+35	; 0x23
    d1d2:	74 a1       	ldd	r23, Z+36	; 0x24
    d1d4:	0e 94 9a 4b 	call	0x9734	; 0x9734 <move_window>
    d1d8:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d1da:	89 2b       	or	r24, r25
    d1dc:	e1 f4       	brne	.+56     	; 0xd216 <f_getlabel+0xf0>
			switch (fs->fs_type) {
    d1de:	ef a5       	ldd	r30, Y+47	; 0x2f
    d1e0:	f8 a9       	ldd	r31, Y+48	; 0x30
    d1e2:	80 81       	ld	r24, Z
    d1e4:	83 30       	cpi	r24, 0x03	; 3
    d1e6:	29 f0       	breq	.+10     	; 0xd1f2 <f_getlabel+0xcc>
    d1e8:	84 30       	cpi	r24, 0x04	; 4
    d1ea:	31 f0       	breq	.+12     	; 0xd1f8 <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d1ec:	87 e2       	ldi	r24, 0x27	; 39
    d1ee:	90 e0       	ldi	r25, 0x00	; 0
    d1f0:	05 c0       	rjmp	.+10     	; 0xd1fc <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d1f2:	83 e4       	ldi	r24, 0x43	; 67
    d1f4:	90 e0       	ldi	r25, 0x00	; 0
    d1f6:	02 c0       	rjmp	.+4      	; 0xd1fc <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d1f8:	84 e6       	ldi	r24, 0x64	; 100
    d1fa:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d1fc:	f5 96       	adiw	r30, 0x35	; 53
    d1fe:	8e 0f       	add	r24, r30
    d200:	9f 1f       	adc	r25, r31
    d202:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <ld_dword>
    d206:	d6 01       	movw	r26, r12
    d208:	6d 93       	st	X+, r22
    d20a:	7d 93       	st	X+, r23
    d20c:	8d 93       	st	X+, r24
    d20e:	9c 93       	st	X, r25
    d210:	13 97       	sbiw	r26, 0x03	; 3
    d212:	01 c0       	rjmp	.+2      	; 0xd216 <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d214:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d216:	c8 01       	movw	r24, r16
    d218:	e2 96       	adiw	r28, 0x32	; 50
    d21a:	e8 e0       	ldi	r30, 0x08	; 8
    d21c:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000d220 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d220:	0c 94 08 28 	jmp	0x5010	; 0x5010 <safemalloc>
}
    d224:	08 95       	ret

0000d226 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d226:	0c 94 2a 28 	jmp	0x5054	; 0x5054 <safefree>
    d22a:	08 95       	ret

0000d22c <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d22c:	cf 92       	push	r12
    d22e:	df 92       	push	r13
    d230:	ef 92       	push	r14
    d232:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d234:	60 38       	cpi	r22, 0x80	; 128
    d236:	71 05       	cpc	r23, r1
    d238:	81 05       	cpc	r24, r1
    d23a:	91 05       	cpc	r25, r1
    d23c:	10 f4       	brcc	.+4      	; 0xd242 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d23e:	cb 01       	movw	r24, r22
    d240:	23 c0       	rjmp	.+70     	; 0xd288 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d242:	61 15       	cp	r22, r1
    d244:	71 05       	cpc	r23, r1
    d246:	21 e0       	ldi	r18, 0x01	; 1
    d248:	82 07       	cpc	r24, r18
    d24a:	91 05       	cpc	r25, r1
    d24c:	d8 f4       	brcc	.+54     	; 0xd284 <ff_uni2oem+0x58>
    d24e:	45 3b       	cpi	r20, 0xB5	; 181
    d250:	51 40       	sbci	r21, 0x01	; 1
    d252:	c1 f4       	brne	.+48     	; 0xd284 <ff_uni2oem+0x58>
    d254:	e6 ea       	ldi	r30, 0xA6	; 166
    d256:	f7 e0       	ldi	r31, 0x07	; 7
    d258:	20 e0       	ldi	r18, 0x00	; 0
    d25a:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d25c:	c1 90       	ld	r12, Z+
    d25e:	d1 90       	ld	r13, Z+
    d260:	e1 2c       	mov	r14, r1
    d262:	f1 2c       	mov	r15, r1
    d264:	6c 15       	cp	r22, r12
    d266:	7d 05       	cpc	r23, r13
    d268:	8e 05       	cpc	r24, r14
    d26a:	9f 05       	cpc	r25, r15
    d26c:	29 f0       	breq	.+10     	; 0xd278 <ff_uni2oem+0x4c>
    d26e:	2f 5f       	subi	r18, 0xFF	; 255
    d270:	3f 4f       	sbci	r19, 0xFF	; 255
    d272:	20 38       	cpi	r18, 0x80	; 128
    d274:	31 05       	cpc	r19, r1
    d276:	91 f7       	brne	.-28     	; 0xd25c <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d278:	b9 01       	movw	r22, r18
    d27a:	60 58       	subi	r22, 0x80	; 128
    d27c:	7f 4f       	sbci	r23, 0xFF	; 255
    d27e:	cb 01       	movw	r24, r22
    d280:	99 27       	eor	r25, r25
    d282:	02 c0       	rjmp	.+4      	; 0xd288 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d284:	80 e0       	ldi	r24, 0x00	; 0
    d286:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d288:	ff 90       	pop	r15
    d28a:	ef 90       	pop	r14
    d28c:	df 90       	pop	r13
    d28e:	cf 90       	pop	r12
    d290:	08 95       	ret

0000d292 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d292:	80 38       	cpi	r24, 0x80	; 128
    d294:	91 05       	cpc	r25, r1
    d296:	88 f0       	brcs	.+34     	; 0xd2ba <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d298:	65 3b       	cpi	r22, 0xB5	; 181
    d29a:	71 40       	sbci	r23, 0x01	; 1
    d29c:	61 f4       	brne	.+24     	; 0xd2b6 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d29e:	8f 3f       	cpi	r24, 0xFF	; 255
    d2a0:	91 05       	cpc	r25, r1
    d2a2:	09 f0       	breq	.+2      	; 0xd2a6 <ff_oem2uni+0x14>
    d2a4:	40 f4       	brcc	.+16     	; 0xd2b6 <ff_oem2uni+0x24>
    d2a6:	88 0f       	add	r24, r24
    d2a8:	99 1f       	adc	r25, r25
    d2aa:	fc 01       	movw	r30, r24
    d2ac:	ea 55       	subi	r30, 0x5A	; 90
    d2ae:	f9 4f       	sbci	r31, 0xF9	; 249
    d2b0:	80 81       	ld	r24, Z
    d2b2:	91 81       	ldd	r25, Z+1	; 0x01
    d2b4:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d2b6:	80 e0       	ldi	r24, 0x00	; 0
    d2b8:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d2ba:	08 95       	ret

0000d2bc <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d2bc:	61 15       	cp	r22, r1
    d2be:	71 05       	cpc	r23, r1
    d2c0:	21 e0       	ldi	r18, 0x01	; 1
    d2c2:	82 07       	cpc	r24, r18
    d2c4:	91 05       	cpc	r25, r1
    d2c6:	08 f0       	brcs	.+2      	; 0xd2ca <ff_wtoupper+0xe>
    d2c8:	5a c0       	rjmp	.+180    	; 0xd37e <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d2ca:	61 15       	cp	r22, r1
    d2cc:	80 e1       	ldi	r24, 0x10	; 16
    d2ce:	78 07       	cpc	r23, r24
    d2d0:	18 f0       	brcs	.+6      	; 0xd2d8 <ff_wtoupper+0x1c>
    d2d2:	a8 ef       	ldi	r26, 0xF8	; 248
    d2d4:	b4 e0       	ldi	r27, 0x04	; 4
    d2d6:	02 c0       	rjmp	.+4      	; 0xd2dc <ff_wtoupper+0x20>
    d2d8:	a4 eb       	ldi	r26, 0xB4	; 180
    d2da:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d2dc:	2d 91       	ld	r18, X+
    d2de:	3c 91       	ld	r19, X
    d2e0:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d2e2:	21 15       	cp	r18, r1
    d2e4:	31 05       	cpc	r19, r1
    d2e6:	09 f4       	brne	.+2      	; 0xd2ea <ff_wtoupper+0x2e>
    d2e8:	48 c0       	rjmp	.+144    	; 0xd37a <ff_wtoupper+0xbe>
    d2ea:	62 17       	cp	r22, r18
    d2ec:	73 07       	cpc	r23, r19
    d2ee:	08 f4       	brcc	.+2      	; 0xd2f2 <ff_wtoupper+0x36>
    d2f0:	44 c0       	rjmp	.+136    	; 0xd37a <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d2f2:	14 96       	adiw	r26, 0x04	; 4
    d2f4:	fd 01       	movw	r30, r26
    d2f6:	32 97       	sbiw	r30, 0x02	; 2
    d2f8:	80 81       	ld	r24, Z
    d2fa:	91 81       	ldd	r25, Z+1	; 0x01
    d2fc:	e9 2f       	mov	r30, r25
    d2fe:	ff 27       	eor	r31, r31
    d300:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d302:	a9 01       	movw	r20, r18
    d304:	48 0f       	add	r20, r24
    d306:	59 1f       	adc	r21, r25
    d308:	64 17       	cp	r22, r20
    d30a:	75 07       	cpc	r23, r21
    d30c:	70 f5       	brcc	.+92     	; 0xd36a <ff_wtoupper+0xae>
				switch (cmd) {
    d30e:	e9 30       	cpi	r30, 0x09	; 9
    d310:	f1 05       	cpc	r31, r1
    d312:	98 f5       	brcc	.+102    	; 0xd37a <ff_wtoupper+0xbe>
    d314:	ec 54       	subi	r30, 0x4C	; 76
    d316:	ff 4f       	sbci	r31, 0xFF	; 255
    d318:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d31c:	62 1b       	sub	r22, r18
    d31e:	73 0b       	sbc	r23, r19
    d320:	fb 01       	movw	r30, r22
    d322:	ee 0f       	add	r30, r30
    d324:	ff 1f       	adc	r31, r31
    d326:	ea 0f       	add	r30, r26
    d328:	fb 1f       	adc	r31, r27
    d32a:	60 81       	ld	r22, Z
    d32c:	71 81       	ldd	r23, Z+1	; 0x01
    d32e:	25 c0       	rjmp	.+74     	; 0xd37a <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d330:	cb 01       	movw	r24, r22
    d332:	82 1b       	sub	r24, r18
    d334:	93 0b       	sbc	r25, r19
    d336:	81 70       	andi	r24, 0x01	; 1
    d338:	99 27       	eor	r25, r25
    d33a:	68 1b       	sub	r22, r24
    d33c:	79 0b       	sbc	r23, r25
    d33e:	1d c0       	rjmp	.+58     	; 0xd37a <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d340:	60 51       	subi	r22, 0x10	; 16
    d342:	71 09       	sbc	r23, r1
    d344:	1a c0       	rjmp	.+52     	; 0xd37a <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d346:	60 52       	subi	r22, 0x20	; 32
    d348:	71 09       	sbc	r23, r1
    d34a:	17 c0       	rjmp	.+46     	; 0xd37a <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d34c:	60 53       	subi	r22, 0x30	; 48
    d34e:	71 09       	sbc	r23, r1
    d350:	14 c0       	rjmp	.+40     	; 0xd37a <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d352:	6a 51       	subi	r22, 0x1A	; 26
    d354:	71 09       	sbc	r23, r1
    d356:	11 c0       	rjmp	.+34     	; 0xd37a <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d358:	68 5f       	subi	r22, 0xF8	; 248
    d35a:	7f 4f       	sbci	r23, 0xFF	; 255
    d35c:	0e c0       	rjmp	.+28     	; 0xd37a <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d35e:	60 55       	subi	r22, 0x50	; 80
    d360:	71 09       	sbc	r23, r1
    d362:	0b c0       	rjmp	.+22     	; 0xd37a <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d364:	60 56       	subi	r22, 0x60	; 96
    d366:	7c 41       	sbci	r23, 0x1C	; 28
    d368:	08 c0       	rjmp	.+16     	; 0xd37a <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d36a:	ef 2b       	or	r30, r31
    d36c:	09 f0       	breq	.+2      	; 0xd370 <ff_wtoupper+0xb4>
    d36e:	b6 cf       	rjmp	.-148    	; 0xd2dc <ff_wtoupper+0x20>
    d370:	88 0f       	add	r24, r24
    d372:	99 1f       	adc	r25, r25
    d374:	a8 0f       	add	r26, r24
    d376:	b9 1f       	adc	r27, r25
    d378:	b1 cf       	rjmp	.-158    	; 0xd2dc <ff_wtoupper+0x20>
		}
		uni = uc;
    d37a:	80 e0       	ldi	r24, 0x00	; 0
    d37c:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d37e:	08 95       	ret

0000d380 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d380:	81 11       	cpse	r24, r1
    d382:	02 c0       	rjmp	.+4      	; 0xd388 <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d384:	a1 c1       	rjmp	.+834    	; 0xd6c8 <mmc_disk_status>
    d386:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d388:	81 e0       	ldi	r24, 0x01	; 1
}
    d38a:	08 95       	ret

0000d38c <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d38c:	81 11       	cpse	r24, r1
    d38e:	02 c0       	rjmp	.+4      	; 0xd394 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d390:	f6 c0       	rjmp	.+492    	; 0xd57e <mmc_disk_initialize>
    d392:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d394:	81 e0       	ldi	r24, 0x01	; 1
}
    d396:	08 95       	ret

0000d398 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d398:	0f 93       	push	r16
    d39a:	1f 93       	push	r17
    d39c:	fb 01       	movw	r30, r22
    switch (pdrv)
    d39e:	81 11       	cpse	r24, r1
    d3a0:	06 c0       	rjmp	.+12     	; 0xd3ae <disk_read+0x16>
    d3a2:	ba 01       	movw	r22, r20
    d3a4:	a9 01       	movw	r20, r18
    d3a6:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d3a8:	98 01       	movw	r18, r16
    d3aa:	91 d1       	rcall	.+802    	; 0xd6ce <mmc_disk_read>
    d3ac:	02 c0       	rjmp	.+4      	; 0xd3b2 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d3ae:	84 e0       	ldi	r24, 0x04	; 4
    d3b0:	90 e0       	ldi	r25, 0x00	; 0
}
    d3b2:	1f 91       	pop	r17
    d3b4:	0f 91       	pop	r16
    d3b6:	08 95       	ret

0000d3b8 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d3b8:	0f 93       	push	r16
    d3ba:	1f 93       	push	r17
    d3bc:	fb 01       	movw	r30, r22
    switch (pdrv)
    d3be:	81 11       	cpse	r24, r1
    d3c0:	06 c0       	rjmp	.+12     	; 0xd3ce <disk_write+0x16>
    d3c2:	ba 01       	movw	r22, r20
    d3c4:	a9 01       	movw	r20, r18
    d3c6:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d3c8:	98 01       	movw	r18, r16
    d3ca:	e2 d1       	rcall	.+964    	; 0xd790 <mmc_disk_write>
    d3cc:	02 c0       	rjmp	.+4      	; 0xd3d2 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d3ce:	84 e0       	ldi	r24, 0x04	; 4
    d3d0:	90 e0       	ldi	r25, 0x00	; 0
}
    d3d2:	1f 91       	pop	r17
    d3d4:	0f 91       	pop	r16
    d3d6:	08 95       	ret

0000d3d8 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d3d8:	96 2f       	mov	r25, r22
    switch (pdrv)
    d3da:	81 11       	cpse	r24, r1
    d3dc:	04 c0       	rjmp	.+8      	; 0xd3e6 <disk_ioctl+0xe>
    d3de:	ba 01       	movw	r22, r20
    d3e0:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d3e2:	4a c2       	rjmp	.+1172   	; 0xd878 <mmc_disk_ioctl>
    d3e4:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d3e6:	84 e0       	ldi	r24, 0x04	; 4
    d3e8:	90 e0       	ldi	r25, 0x00	; 0
}
    d3ea:	08 95       	ret

0000d3ec <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3ec:	f9 c4       	rjmp	.+2546   	; 0xdde0 <mmc_spi_TXRX>
    return dat;
}
    d3ee:	08 95       	ret

0000d3f0 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d3f0:	ce d4       	rcall	.+2460   	; 0xdd8e <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d3f2:	8f ef       	ldi	r24, 0xFF	; 255
    d3f4:	fb df       	rcall	.-10     	; 0xd3ec <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d3f6:	8f ef       	ldi	r24, 0xFF	; 255
    d3f8:	f9 cf       	rjmp	.-14     	; 0xd3ec <xchg_spi>
    d3fa:	08 95       	ret

0000d3fc <rcvr_datablock>:
    d3fc:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d3fe:	1f 93       	push	r17
    d400:	cf 93       	push	r28
    d402:	df 93       	push	r29
    d404:	ec 01       	movw	r28, r24
    d406:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d408:	88 ee       	ldi	r24, 0xE8	; 232
    d40a:	93 e0       	ldi	r25, 0x03	; 3
    d40c:	ec d4       	rcall	.+2520   	; 0xdde6 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d40e:	8f ef       	ldi	r24, 0xFF	; 255
    d410:	e7 d4       	rcall	.+2510   	; 0xdde0 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d412:	8f 3f       	cpi	r24, 0xFF	; 255
    d414:	31 f4       	brne	.+12     	; 0xd422 <rcvr_datablock+0x26>
    d416:	ee d4       	rcall	.+2524   	; 0xddf4 <mmc_test_timeout>
    d418:	89 2b       	or	r24, r25
    d41a:	c9 f3       	breq	.-14     	; 0xd40e <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d41c:	80 e0       	ldi	r24, 0x00	; 0
    d41e:	90 e0       	ldi	r25, 0x00	; 0
    d420:	0b c0       	rjmp	.+22     	; 0xd438 <rcvr_datablock+0x3c>
    d422:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d424:	d9 f7       	brne	.-10     	; 0xd41c <rcvr_datablock+0x20>
    d426:	b8 01       	movw	r22, r16
    d428:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d42a:	d7 d4       	rcall	.+2478   	; 0xddda <mmc_spi_RX_buffer>
    d42c:	8f ef       	ldi	r24, 0xFF	; 255
    d42e:	de df       	rcall	.-68     	; 0xd3ec <xchg_spi>
    xchg_spi(0xFF);
    d430:	8f ef       	ldi	r24, 0xFF	; 255
    d432:	dc df       	rcall	.-72     	; 0xd3ec <xchg_spi>
    d434:	81 e0       	ldi	r24, 0x01	; 1
    d436:	90 e0       	ldi	r25, 0x00	; 0
    d438:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d43a:	cf 91       	pop	r28
    d43c:	1f 91       	pop	r17
    d43e:	0f 91       	pop	r16
    d440:	08 95       	ret

0000d442 <wait_ready>:
    d442:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d444:	d0 d4       	rcall	.+2464   	; 0xdde6 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d446:	8f ef       	ldi	r24, 0xFF	; 255
    d448:	cb d4       	rcall	.+2454   	; 0xdde0 <mmc_spi_TXRX>
    d44a:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d44c:	8f 3f       	cpi	r24, 0xFF	; 255
    d44e:	19 f0       	breq	.+6      	; 0xd456 <wait_ready+0x14>
    d450:	d1 d4       	rcall	.+2466   	; 0xddf4 <mmc_test_timeout>
    d452:	89 2b       	or	r24, r25
    d454:	c1 f3       	breq	.-16     	; 0xd446 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d456:	81 e0       	ldi	r24, 0x01	; 1
    d458:	90 e0       	ldi	r25, 0x00	; 0
    d45a:	cf 3f       	cpi	r28, 0xFF	; 255
    d45c:	11 f0       	breq	.+4      	; 0xd462 <wait_ready+0x20>
    d45e:	80 e0       	ldi	r24, 0x00	; 0
    d460:	90 e0       	ldi	r25, 0x00	; 0
}
    d462:	cf 91       	pop	r28
    d464:	08 95       	ret

0000d466 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d466:	cf 93       	push	r28
    d468:	df 93       	push	r29
    d46a:	00 d0       	rcall	.+0      	; 0xd46c <select+0x6>
    d46c:	1f 92       	push	r1
    CS_LOW();
    d46e:	82 d4       	rcall	.+2308   	; 0xdd74 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d470:	8f ef       	ldi	r24, 0xFF	; 255
    d472:	bc df       	rcall	.-136    	; 0xd3ec <xchg_spi>

    if (wait_ready(1000))
    d474:	88 ee       	ldi	r24, 0xE8	; 232
    d476:	93 e0       	ldi	r25, 0x03	; 3
    d478:	e4 df       	rcall	.-56     	; 0xd442 <wait_ready>
    d47a:	ec 01       	movw	r28, r24
    d47c:	89 2b       	or	r24, r25
    d47e:	61 f4       	brne	.+24     	; 0xd498 <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d480:	89 e6       	ldi	r24, 0x69	; 105
    d482:	97 e0       	ldi	r25, 0x07	; 7
    d484:	a0 e0       	ldi	r26, 0x00	; 0
    d486:	ed b7       	in	r30, 0x3d	; 61
    d488:	fe b7       	in	r31, 0x3e	; 62
    d48a:	81 83       	std	Z+1, r24	; 0x01
    d48c:	92 83       	std	Z+2, r25	; 0x02
    d48e:	a3 83       	std	Z+3, r26	; 0x03
    d490:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    deselect();
    d494:	ad df       	rcall	.-166    	; 0xd3f0 <deselect>
    d496:	02 c0       	rjmp	.+4      	; 0xd49c <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d498:	c1 e0       	ldi	r28, 0x01	; 1
    d49a:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d49c:	ce 01       	movw	r24, r28
    d49e:	cd b7       	in	r28, 0x3d	; 61
    d4a0:	de b7       	in	r29, 0x3e	; 62
    d4a2:	23 96       	adiw	r28, 0x03	; 3
    d4a4:	e2 e0       	ldi	r30, 0x02	; 2
    d4a6:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000d4aa <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d4aa:	ff 92       	push	r15
    d4ac:	0f 93       	push	r16
    d4ae:	1f 93       	push	r17
    d4b0:	cf 93       	push	r28
    d4b2:	df 93       	push	r29
    d4b4:	c8 2f       	mov	r28, r24
    d4b6:	d4 2f       	mov	r29, r20
    d4b8:	15 2f       	mov	r17, r21
    d4ba:	06 2f       	mov	r16, r22
    d4bc:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d4be:	87 ff       	sbrs	r24, 7
    d4c0:	08 c0       	rjmp	.+16     	; 0xd4d2 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d4c2:	40 e0       	ldi	r20, 0x00	; 0
    d4c4:	50 e0       	ldi	r21, 0x00	; 0
    d4c6:	ba 01       	movw	r22, r20
    d4c8:	87 e3       	ldi	r24, 0x37	; 55
    d4ca:	ef df       	rcall	.-34     	; 0xd4aa <send_cmd>
        if (res > 1) return res;
    d4cc:	82 30       	cpi	r24, 0x02	; 2
    d4ce:	58 f5       	brcc	.+86     	; 0xd526 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d4d0:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d4d2:	cc 30       	cpi	r28, 0x0C	; 12
    d4d4:	71 f4       	brne	.+28     	; 0xd4f2 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d4d6:	8c 2f       	mov	r24, r28
    d4d8:	80 64       	ori	r24, 0x40	; 64
    d4da:	88 df       	rcall	.-240    	; 0xd3ec <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d4dc:	8f 2d       	mov	r24, r15
    d4de:	86 df       	rcall	.-244    	; 0xd3ec <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d4e0:	80 2f       	mov	r24, r16
    d4e2:	84 df       	rcall	.-248    	; 0xd3ec <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d4e4:	81 2f       	mov	r24, r17
    d4e6:	82 df       	rcall	.-252    	; 0xd3ec <xchg_spi>
    d4e8:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d4ea:	80 df       	rcall	.-256    	; 0xd3ec <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d4ec:	cc 23       	and	r28, r28
    d4ee:	c9 f0       	breq	.+50     	; 0xd522 <send_cmd+0x78>
    d4f0:	06 c0       	rjmp	.+12     	; 0xd4fe <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d4f2:	7e df       	rcall	.-260    	; 0xd3f0 <deselect>
    d4f4:	b8 df       	rcall	.-144    	; 0xd466 <select>
        if (!select()) return 0xFF;
    d4f6:	89 2b       	or	r24, r25
    d4f8:	71 f7       	brne	.-36     	; 0xd4d6 <send_cmd+0x2c>
    d4fa:	8f ef       	ldi	r24, 0xFF	; 255
    d4fc:	14 c0       	rjmp	.+40     	; 0xd526 <send_cmd+0x7c>
    d4fe:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d500:	11 f4       	brne	.+4      	; 0xd506 <send_cmd+0x5c>
    d502:	87 e8       	ldi	r24, 0x87	; 135
    d504:	01 c0       	rjmp	.+2      	; 0xd508 <send_cmd+0x5e>

    xchg_spi(n);
    d506:	81 e0       	ldi	r24, 0x01	; 1
    d508:	71 df       	rcall	.-286    	; 0xd3ec <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d50a:	cc 30       	cpi	r28, 0x0C	; 12
    d50c:	11 f4       	brne	.+4      	; 0xd512 <send_cmd+0x68>
    d50e:	8f ef       	ldi	r24, 0xFF	; 255
    d510:	6d df       	rcall	.-294    	; 0xd3ec <xchg_spi>
    d512:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d514:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d516:	64 d4       	rcall	.+2248   	; 0xdde0 <mmc_spi_TXRX>
    d518:	87 ff       	sbrs	r24, 7
    d51a:	05 c0       	rjmp	.+10     	; 0xd526 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d51c:	c1 50       	subi	r28, 0x01	; 1
    d51e:	d1 f7       	brne	.-12     	; 0xd514 <send_cmd+0x6a>
    d520:	02 c0       	rjmp	.+4      	; 0xd526 <send_cmd+0x7c>
    d522:	85 e9       	ldi	r24, 0x95	; 149
    d524:	f5 cf       	rjmp	.-22     	; 0xd510 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d526:	cd b7       	in	r28, 0x3d	; 61
    d528:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d52a:	e5 e0       	ldi	r30, 0x05	; 5
    d52c:	0c 94 3f e7 	jmp	0x1ce7e	; 0x1ce7e <__epilogue_restores__+0x1a>

0000d530 <xmit_datablock>:
    d530:	0f 93       	push	r16
    d532:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d534:	cf 93       	push	r28
    d536:	8c 01       	movw	r16, r24
    d538:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d53a:	88 ee       	ldi	r24, 0xE8	; 232
    d53c:	93 e0       	ldi	r25, 0x03	; 3
    d53e:	81 df       	rcall	.-254    	; 0xd442 <wait_ready>
    d540:	00 97       	sbiw	r24, 0x00	; 0
    d542:	c9 f0       	breq	.+50     	; 0xd576 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d544:	8c 2f       	mov	r24, r28
    d546:	52 df       	rcall	.-348    	; 0xd3ec <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d548:	cd 3f       	cpi	r28, 0xFD	; 253
    d54a:	99 f0       	breq	.+38     	; 0xd572 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d54c:	60 e0       	ldi	r22, 0x00	; 0
    d54e:	72 e0       	ldi	r23, 0x02	; 2
    d550:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d552:	40 d4       	rcall	.+2176   	; 0xddd4 <mmc_spi_TX_buffer>
    d554:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d556:	4a df       	rcall	.-364    	; 0xd3ec <xchg_spi>
    d558:	8f ef       	ldi	r24, 0xFF	; 255
    d55a:	48 df       	rcall	.-368    	; 0xd3ec <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d55c:	8f ef       	ldi	r24, 0xFF	; 255
    d55e:	40 d4       	rcall	.+2176   	; 0xdde0 <mmc_spi_TXRX>
    d560:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d562:	31 e0       	ldi	r19, 0x01	; 1
    d564:	20 e0       	ldi	r18, 0x00	; 0
    d566:	85 30       	cpi	r24, 0x05	; 5
    d568:	09 f0       	breq	.+2      	; 0xd56c <xmit_datablock+0x3c>
    d56a:	30 e0       	ldi	r19, 0x00	; 0
    d56c:	83 2f       	mov	r24, r19
    d56e:	92 2f       	mov	r25, r18
    d570:	02 c0       	rjmp	.+4      	; 0xd576 <xmit_datablock+0x46>
    d572:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d574:	90 e0       	ldi	r25, 0x00	; 0
    d576:	cf 91       	pop	r28
}
    d578:	1f 91       	pop	r17
    d57a:	0f 91       	pop	r16
    d57c:	08 95       	ret

0000d57e <mmc_disk_initialize>:
    d57e:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d580:	b0 e0       	ldi	r27, 0x00	; 0
    d582:	e5 ec       	ldi	r30, 0xC5	; 197
    d584:	fa e6       	ldi	r31, 0x6A	; 106
    d586:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d58a:	59 d4       	rcall	.+2226   	; 0xde3e <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d58c:	64 e6       	ldi	r22, 0x64	; 100
    d58e:	70 e0       	ldi	r23, 0x00	; 0
    d590:	80 e0       	ldi	r24, 0x00	; 0
    d592:	90 e0       	ldi	r25, 0x00	; 0
    d594:	0e 94 8c 28 	call	0x5118	; 0x5118 <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d598:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d59c:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d59e:	8e c0       	rjmp	.+284    	; 0xd6bc <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d5a0:	4d d4       	rcall	.+2202   	; 0xde3c <mmc_power_on>
    d5a2:	f9 d3       	rcall	.+2034   	; 0xdd96 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d5a4:	1a e0       	ldi	r17, 0x0A	; 10
    d5a6:	8f ef       	ldi	r24, 0xFF	; 255
    d5a8:	21 df       	rcall	.-446    	; 0xd3ec <xchg_spi>
    d5aa:	11 50       	subi	r17, 0x01	; 1
    d5ac:	e1 f7       	brne	.-8      	; 0xd5a6 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d5ae:	40 e0       	ldi	r20, 0x00	; 0
    d5b0:	50 e0       	ldi	r21, 0x00	; 0
    d5b2:	ba 01       	movw	r22, r20
    d5b4:	80 e0       	ldi	r24, 0x00	; 0
    d5b6:	79 df       	rcall	.-270    	; 0xd4aa <send_cmd>
    d5b8:	81 30       	cpi	r24, 0x01	; 1
    d5ba:	09 f0       	breq	.+2      	; 0xd5be <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d5bc:	6f c0       	rjmp	.+222    	; 0xd69c <mmc_disk_initialize+0x11e>
    d5be:	80 ed       	ldi	r24, 0xD0	; 208
    d5c0:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d5c2:	11 d4       	rcall	.+2082   	; 0xdde6 <mmc_set_ms_timeout>
    d5c4:	4a ea       	ldi	r20, 0xAA	; 170
    d5c6:	51 e0       	ldi	r21, 0x01	; 1
    d5c8:	60 e0       	ldi	r22, 0x00	; 0
    d5ca:	70 e0       	ldi	r23, 0x00	; 0
    d5cc:	88 e0       	ldi	r24, 0x08	; 8
    d5ce:	6d df       	rcall	.-294    	; 0xd4aa <send_cmd>
    d5d0:	81 30       	cpi	r24, 0x01	; 1
    d5d2:	09 f0       	breq	.+2      	; 0xd5d6 <mmc_disk_initialize+0x58>
    d5d4:	3d c0       	rjmp	.+122    	; 0xd650 <mmc_disk_initialize+0xd2>
    d5d6:	8e 01       	movw	r16, r28
    d5d8:	0f 5f       	subi	r16, 0xFF	; 255
    d5da:	1f 4f       	sbci	r17, 0xFF	; 255
    d5dc:	6e 01       	movw	r12, r28
    d5de:	85 e0       	ldi	r24, 0x05	; 5
    d5e0:	c8 0e       	add	r12, r24
    d5e2:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d5e4:	78 01       	movw	r14, r16
    d5e6:	8f ef       	ldi	r24, 0xFF	; 255
    d5e8:	fb d3       	rcall	.+2038   	; 0xdde0 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d5ea:	f7 01       	movw	r30, r14
    d5ec:	81 93       	st	Z+, r24
    d5ee:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d5f0:	ce 16       	cp	r12, r30
    d5f2:	df 06       	cpc	r13, r31
    d5f4:	c1 f7       	brne	.-16     	; 0xd5e6 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d5f6:	8b 81       	ldd	r24, Y+3	; 0x03
    d5f8:	81 30       	cpi	r24, 0x01	; 1
    d5fa:	09 f0       	breq	.+2      	; 0xd5fe <mmc_disk_initialize+0x80>
    d5fc:	4f c0       	rjmp	.+158    	; 0xd69c <mmc_disk_initialize+0x11e>
    d5fe:	8c 81       	ldd	r24, Y+4	; 0x04
    d600:	8a 3a       	cpi	r24, 0xAA	; 170
    d602:	09 f0       	breq	.+2      	; 0xd606 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d604:	4b c0       	rjmp	.+150    	; 0xd69c <mmc_disk_initialize+0x11e>
    d606:	f6 d3       	rcall	.+2028   	; 0xddf4 <mmc_test_timeout>
    d608:	89 2b       	or	r24, r25
    d60a:	29 f0       	breq	.+10     	; 0xd616 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d60c:	f3 d3       	rcall	.+2022   	; 0xddf4 <mmc_test_timeout>
    d60e:	89 2b       	or	r24, r25
    d610:	09 f0       	breq	.+2      	; 0xd614 <mmc_disk_initialize+0x96>
    d612:	44 c0       	rjmp	.+136    	; 0xd69c <mmc_disk_initialize+0x11e>
    d614:	09 c0       	rjmp	.+18     	; 0xd628 <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d616:	40 e0       	ldi	r20, 0x00	; 0
    d618:	50 e0       	ldi	r21, 0x00	; 0
    d61a:	60 e0       	ldi	r22, 0x00	; 0
    d61c:	70 e4       	ldi	r23, 0x40	; 64
    d61e:	89 ea       	ldi	r24, 0xA9	; 169
    d620:	44 df       	rcall	.-376    	; 0xd4aa <send_cmd>
    d622:	81 11       	cpse	r24, r1
    d624:	f0 cf       	rjmp	.-32     	; 0xd606 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d626:	f2 cf       	rjmp	.-28     	; 0xd60c <mmc_disk_initialize+0x8e>
    d628:	40 e0       	ldi	r20, 0x00	; 0
    d62a:	50 e0       	ldi	r21, 0x00	; 0
    d62c:	ba 01       	movw	r22, r20
    d62e:	8a e3       	ldi	r24, 0x3A	; 58
    d630:	3c df       	rcall	.-392    	; 0xd4aa <send_cmd>
    d632:	81 11       	cpse	r24, r1
    d634:	33 c0       	rjmp	.+102    	; 0xd69c <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d636:	8f ef       	ldi	r24, 0xFF	; 255
    d638:	d3 d3       	rcall	.+1958   	; 0xdde0 <mmc_spi_TXRX>
    d63a:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d63c:	81 93       	st	Z+, r24
    d63e:	8f 01       	movw	r16, r30
    d640:	ce 16       	cp	r12, r30
    d642:	df 06       	cpc	r13, r31
    d644:	c1 f7       	brne	.-16     	; 0xd636 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d646:	89 81       	ldd	r24, Y+1	; 0x01
    d648:	86 fd       	sbrc	r24, 6
    d64a:	2a c0       	rjmp	.+84     	; 0xd6a0 <mmc_disk_initialize+0x122>
    d64c:	14 e0       	ldi	r17, 0x04	; 4
    d64e:	29 c0       	rjmp	.+82     	; 0xd6a2 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d650:	80 ed       	ldi	r24, 0xD0	; 208
    d652:	97 e0       	ldi	r25, 0x07	; 7
    d654:	c8 d3       	rcall	.+1936   	; 0xdde6 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d656:	40 e0       	ldi	r20, 0x00	; 0
    d658:	50 e0       	ldi	r21, 0x00	; 0
    d65a:	ba 01       	movw	r22, r20
    d65c:	89 ea       	ldi	r24, 0xA9	; 169
    d65e:	25 df       	rcall	.-438    	; 0xd4aa <send_cmd>
    d660:	82 30       	cpi	r24, 0x02	; 2
    d662:	18 f0       	brcs	.+6      	; 0xd66a <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d664:	11 e0       	ldi	r17, 0x01	; 1
    d666:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d668:	02 c0       	rjmp	.+4      	; 0xd66e <mmc_disk_initialize+0xf0>
    d66a:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d66c:	09 ea       	ldi	r16, 0xA9	; 169
    d66e:	c2 d3       	rcall	.+1924   	; 0xddf4 <mmc_test_timeout>
    d670:	89 2b       	or	r24, r25
    d672:	21 f0       	breq	.+8      	; 0xd67c <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d674:	bf d3       	rcall	.+1918   	; 0xddf4 <mmc_test_timeout>
    d676:	89 2b       	or	r24, r25
    d678:	89 f4       	brne	.+34     	; 0xd69c <mmc_disk_initialize+0x11e>
    d67a:	08 c0       	rjmp	.+16     	; 0xd68c <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d67c:	40 e0       	ldi	r20, 0x00	; 0
    d67e:	50 e0       	ldi	r21, 0x00	; 0
    d680:	ba 01       	movw	r22, r20
    d682:	80 2f       	mov	r24, r16
    d684:	12 df       	rcall	.-476    	; 0xd4aa <send_cmd>
    d686:	81 11       	cpse	r24, r1
    d688:	f2 cf       	rjmp	.-28     	; 0xd66e <mmc_disk_initialize+0xf0>
    d68a:	f4 cf       	rjmp	.-24     	; 0xd674 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d68c:	40 e0       	ldi	r20, 0x00	; 0
    d68e:	52 e0       	ldi	r21, 0x02	; 2
    d690:	60 e0       	ldi	r22, 0x00	; 0
    d692:	70 e0       	ldi	r23, 0x00	; 0
    d694:	80 e1       	ldi	r24, 0x10	; 16
    d696:	09 df       	rcall	.-494    	; 0xd4aa <send_cmd>
    d698:	88 23       	and	r24, r24
                ty = 0;
    d69a:	19 f0       	breq	.+6      	; 0xd6a2 <mmc_disk_initialize+0x124>
    d69c:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d69e:	01 c0       	rjmp	.+2      	; 0xd6a2 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d6a0:	1c e0       	ldi	r17, 0x0C	; 12
    d6a2:	10 93 23 18 	sts	0x1823, r17	; 0x801823 <CardType>
    deselect();
    d6a6:	a4 de       	rcall	.-696    	; 0xd3f0 <deselect>

    if (ty)                                       /* Initialization succeded */
    d6a8:	11 23       	and	r17, r17
    d6aa:	39 f0       	breq	.+14     	; 0xd6ba <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d6ac:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6b0:	8e 7f       	andi	r24, 0xFE	; 254
    d6b2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d6b6:	81 d3       	rcall	.+1794   	; 0xddba <mmc_fast>
    d6b8:	01 c0       	rjmp	.+2      	; 0xd6bc <mmc_disk_initialize+0x13e>
    d6ba:	c1 d3       	rcall	.+1922   	; 0xde3e <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d6bc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d6c0:	24 96       	adiw	r28, 0x04	; 4
    d6c2:	e8 e0       	ldi	r30, 0x08	; 8
}
    d6c4:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000d6c8 <mmc_disk_status>:
    d6c8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d6cc:	08 95       	ret

0000d6ce <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d6ce:	8f 92       	push	r8
    d6d0:	9f 92       	push	r9
    d6d2:	af 92       	push	r10
    d6d4:	bf 92       	push	r11
    d6d6:	ef 92       	push	r14
    d6d8:	ff 92       	push	r15
    d6da:	1f 93       	push	r17
    d6dc:	cf 93       	push	r28
    d6de:	df 93       	push	r29
    d6e0:	7c 01       	movw	r14, r24
    d6e2:	4a 01       	movw	r8, r20
    d6e4:	5b 01       	movw	r10, r22
    d6e6:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d6e8:	20 97       	sbiw	r28, 0x00	; 0
    d6ea:	19 f4       	brne	.+6      	; 0xd6f2 <mmc_disk_read+0x24>
    {
        deselect();
    d6ec:	81 de       	rcall	.-766    	; 0xd3f0 <deselect>
        return RES_PARERR;
    d6ee:	84 e0       	ldi	r24, 0x04	; 4
    d6f0:	0d c0       	rjmp	.+26     	; 0xd70c <mmc_disk_read+0x3e>
    }

	if( Stat )
    d6f2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6f6:	88 23       	and	r24, r24
    d6f8:	19 f0       	breq	.+6      	; 0xd700 <mmc_disk_read+0x32>
		set_error(1);
    d6fa:	81 e0       	ldi	r24, 0x01	; 1
    d6fc:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <set_error>

    if (Stat & STA_NOINIT)
    d700:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d704:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d706:	04 c0       	rjmp	.+8      	; 0xd710 <mmc_disk_read+0x42>
    d708:	73 de       	rcall	.-794    	; 0xd3f0 <deselect>
        return RES_NOTRDY;
    d70a:	83 e0       	ldi	r24, 0x03	; 3
    d70c:	90 e0       	ldi	r25, 0x00	; 0
    d70e:	36 c0       	rjmp	.+108    	; 0xd77c <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d710:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d714:	81 fd       	sbrc	r24, 1
    d716:	f8 cf       	rjmp	.-16     	; 0xd708 <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d718:	46 9a       	sbi	0x08, 6	; 8
    d71a:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d71c:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d720:	83 fd       	sbrc	r24, 3
    d722:	07 c0       	rjmp	.+14     	; 0xd732 <mmc_disk_read+0x64>
    d724:	89 e0       	ldi	r24, 0x09	; 9
    d726:	88 0c       	add	r8, r8
    d728:	99 1c       	adc	r9, r9
    d72a:	aa 1c       	adc	r10, r10
    d72c:	bb 1c       	adc	r11, r11
    d72e:	8a 95       	dec	r24
    d730:	d1 f7       	brne	.-12     	; 0xd726 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d732:	c2 30       	cpi	r28, 0x02	; 2
    d734:	d1 05       	cpc	r29, r1
    d736:	10 f4       	brcc	.+4      	; 0xd73c <mmc_disk_read+0x6e>
    d738:	11 e1       	ldi	r17, 0x11	; 17
    d73a:	01 c0       	rjmp	.+2      	; 0xd73e <mmc_disk_read+0x70>
    d73c:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d73e:	b5 01       	movw	r22, r10
    d740:	a4 01       	movw	r20, r8
    d742:	81 2f       	mov	r24, r17
    d744:	b2 de       	rcall	.-668    	; 0xd4aa <send_cmd>
    d746:	81 11       	cpse	r24, r1
    d748:	11 c0       	rjmp	.+34     	; 0xd76c <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d74a:	60 e0       	ldi	r22, 0x00	; 0
    d74c:	72 e0       	ldi	r23, 0x02	; 2
    d74e:	c7 01       	movw	r24, r14
    d750:	55 de       	rcall	.-854    	; 0xd3fc <rcvr_datablock>
    d752:	89 2b       	or	r24, r25
    d754:	21 f0       	breq	.+8      	; 0xd75e <mmc_disk_read+0x90>
                break;
            buff += 512;
    d756:	8e ef       	ldi	r24, 0xFE	; 254
    d758:	f8 1a       	sub	r15, r24
        } while (--count);
    d75a:	21 97       	sbiw	r28, 0x01	; 1
    d75c:	b1 f7       	brne	.-20     	; 0xd74a <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d75e:	12 31       	cpi	r17, 0x12	; 18
    d760:	29 f4       	brne	.+10     	; 0xd76c <mmc_disk_read+0x9e>
    d762:	40 e0       	ldi	r20, 0x00	; 0
    d764:	50 e0       	ldi	r21, 0x00	; 0
    d766:	ba 01       	movw	r22, r20
    d768:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d76a:	9f de       	rcall	.-706    	; 0xd4aa <send_cmd>
    d76c:	41 de       	rcall	.-894    	; 0xd3f0 <deselect>
    GPIO_PIN_LOW(LED1);
    d76e:	46 98       	cbi	0x08, 6	; 8
    d770:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d772:	81 e0       	ldi	r24, 0x01	; 1
    d774:	90 e0       	ldi	r25, 0x00	; 0
    d776:	cd 2b       	or	r28, r29
    d778:	09 f4       	brne	.+2      	; 0xd77c <mmc_disk_read+0xae>
    d77a:	80 e0       	ldi	r24, 0x00	; 0
}
    d77c:	df 91       	pop	r29
    d77e:	cf 91       	pop	r28
    d780:	1f 91       	pop	r17
    d782:	ff 90       	pop	r15
    d784:	ef 90       	pop	r14
    d786:	bf 90       	pop	r11
    d788:	af 90       	pop	r10
    d78a:	9f 90       	pop	r9
    d78c:	8f 90       	pop	r8
    d78e:	08 95       	ret

0000d790 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d790:	a0 e0       	ldi	r26, 0x00	; 0
    d792:	b0 e0       	ldi	r27, 0x00	; 0
    d794:	ee ec       	ldi	r30, 0xCE	; 206
    d796:	fb e6       	ldi	r31, 0x6B	; 107
    d798:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    d79c:	8c 01       	movw	r16, r24
    d79e:	6a 01       	movw	r12, r20
    d7a0:	7b 01       	movw	r14, r22
    d7a2:	e9 01       	movw	r28, r18
    if (!count)
    d7a4:	20 97       	sbiw	r28, 0x00	; 0
    d7a6:	19 f4       	brne	.+6      	; 0xd7ae <mmc_disk_write+0x1e>
    {
        deselect();
    d7a8:	23 de       	rcall	.-954    	; 0xd3f0 <deselect>
        return RES_PARERR;
    d7aa:	84 e0       	ldi	r24, 0x04	; 4
    d7ac:	18 c0       	rjmp	.+48     	; 0xd7de <mmc_disk_write+0x4e>
    }

	if( Stat )
    d7ae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7b2:	88 23       	and	r24, r24
    d7b4:	19 f0       	breq	.+6      	; 0xd7bc <mmc_disk_write+0x2c>
		set_error(1);
    d7b6:	81 e0       	ldi	r24, 0x01	; 1
    d7b8:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <set_error>

    if (Stat & STA_NOINIT)
    d7bc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7c0:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d7c2:	03 c0       	rjmp	.+6      	; 0xd7ca <mmc_disk_write+0x3a>
    d7c4:	15 de       	rcall	.-982    	; 0xd3f0 <deselect>
        return RES_NOTRDY;
    d7c6:	83 e0       	ldi	r24, 0x03	; 3
    d7c8:	0a c0       	rjmp	.+20     	; 0xd7de <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d7ca:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7ce:	81 fd       	sbrc	r24, 1
    d7d0:	f9 cf       	rjmp	.-14     	; 0xd7c4 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d7d2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7d6:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d7d8:	04 c0       	rjmp	.+8      	; 0xd7e2 <mmc_disk_write+0x52>
    d7da:	0a de       	rcall	.-1004   	; 0xd3f0 <deselect>
        return RES_WRPRT;
    d7dc:	82 e0       	ldi	r24, 0x02	; 2
    d7de:	90 e0       	ldi	r25, 0x00	; 0
    d7e0:	46 c0       	rjmp	.+140    	; 0xd86e <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d7e2:	46 9a       	sbi	0x08, 6	; 8
    d7e4:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d7e6:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d7ea:	83 fd       	sbrc	r24, 3
    d7ec:	07 c0       	rjmp	.+14     	; 0xd7fc <mmc_disk_write+0x6c>
    d7ee:	99 e0       	ldi	r25, 0x09	; 9
    d7f0:	cc 0c       	add	r12, r12
    d7f2:	dd 1c       	adc	r13, r13
    d7f4:	ee 1c       	adc	r14, r14
    d7f6:	ff 1c       	adc	r15, r15
    d7f8:	9a 95       	dec	r25
    d7fa:	d1 f7       	brne	.-12     	; 0xd7f0 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d7fc:	c1 30       	cpi	r28, 0x01	; 1
    d7fe:	d1 05       	cpc	r29, r1
    d800:	89 f4       	brne	.+34     	; 0xd824 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d802:	b7 01       	movw	r22, r14
    d804:	a6 01       	movw	r20, r12
    d806:	88 e1       	ldi	r24, 0x18	; 24
    d808:	50 de       	rcall	.-864    	; 0xd4aa <send_cmd>
    d80a:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d80c:	26 c0       	rjmp	.+76     	; 0xd85a <mmc_disk_write+0xca>
    d80e:	6e ef       	ldi	r22, 0xFE	; 254
    d810:	c8 01       	movw	r24, r16
    d812:	8e de       	rcall	.-740    	; 0xd530 <xmit_datablock>
    d814:	31 e0       	ldi	r19, 0x01	; 1
    d816:	20 e0       	ldi	r18, 0x00	; 0
    d818:	89 2b       	or	r24, r25
    d81a:	09 f0       	breq	.+2      	; 0xd81e <mmc_disk_write+0x8e>
    d81c:	30 e0       	ldi	r19, 0x00	; 0
    d81e:	c3 2f       	mov	r28, r19
    d820:	d2 2f       	mov	r29, r18
    d822:	1d c0       	rjmp	.+58     	; 0xd85e <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d824:	86 70       	andi	r24, 0x06	; 6
    d826:	29 f0       	breq	.+10     	; 0xd832 <mmc_disk_write+0xa2>
    d828:	ae 01       	movw	r20, r28
    d82a:	60 e0       	ldi	r22, 0x00	; 0
    d82c:	70 e0       	ldi	r23, 0x00	; 0
    d82e:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d830:	3c de       	rcall	.-904    	; 0xd4aa <send_cmd>
    d832:	b7 01       	movw	r22, r14
    d834:	a6 01       	movw	r20, r12
    d836:	89 e1       	ldi	r24, 0x19	; 25
    d838:	38 de       	rcall	.-912    	; 0xd4aa <send_cmd>
    d83a:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d83c:	10 c0       	rjmp	.+32     	; 0xd85e <mmc_disk_write+0xce>
    d83e:	6c ef       	ldi	r22, 0xFC	; 252
    d840:	c8 01       	movw	r24, r16
    d842:	76 de       	rcall	.-788    	; 0xd530 <xmit_datablock>
    d844:	89 2b       	or	r24, r25
                buff += 512;
    d846:	19 f0       	breq	.+6      	; 0xd84e <mmc_disk_write+0xbe>
            } while (--count);
    d848:	1e 5f       	subi	r17, 0xFE	; 254
    d84a:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d84c:	c1 f7       	brne	.-16     	; 0xd83e <mmc_disk_write+0xae>
    d84e:	6d ef       	ldi	r22, 0xFD	; 253
    d850:	80 e0       	ldi	r24, 0x00	; 0
    d852:	90 e0       	ldi	r25, 0x00	; 0
    d854:	6d de       	rcall	.-806    	; 0xd530 <xmit_datablock>
    d856:	89 2b       	or	r24, r25
                count = 1;
    d858:	11 f4       	brne	.+4      	; 0xd85e <mmc_disk_write+0xce>
    d85a:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d85c:	d0 e0       	ldi	r29, 0x00	; 0
    d85e:	c8 dd       	rcall	.-1136   	; 0xd3f0 <deselect>
    GPIO_PIN_LOW(LED1);
    d860:	46 98       	cbi	0x08, 6	; 8
    d862:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d864:	81 e0       	ldi	r24, 0x01	; 1
    d866:	90 e0       	ldi	r25, 0x00	; 0
    d868:	cd 2b       	or	r28, r29
    d86a:	09 f4       	brne	.+2      	; 0xd86e <mmc_disk_write+0xde>
    d86c:	80 e0       	ldi	r24, 0x00	; 0
}
    d86e:	cd b7       	in	r28, 0x3d	; 61
    d870:	de b7       	in	r29, 0x3e	; 62
    d872:	e8 e0       	ldi	r30, 0x08	; 8
    d874:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000d878 <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d878:	a0 e1       	ldi	r26, 0x10	; 16
    d87a:	b0 e0       	ldi	r27, 0x00	; 0
    d87c:	e2 e4       	ldi	r30, 0x42	; 66
    d87e:	fc e6       	ldi	r31, 0x6C	; 108
    d880:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d884:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d888:	90 fd       	sbrc	r25, 0
    d88a:	31 c2       	rjmp	.+1122   	; 0xdcee <mmc_disk_ioctl+0x476>
    d88c:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d88e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d892:	91 ff       	sbrs	r25, 1
    d894:	02 c0       	rjmp	.+4      	; 0xd89a <mmc_disk_ioctl+0x22>
    {
        deselect();
    d896:	ac dd       	rcall	.-1192   	; 0xd3f0 <deselect>
    d898:	2a c2       	rjmp	.+1108   	; 0xdcee <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d89a:	83 33       	cpi	r24, 0x33	; 51
    d89c:	09 f4       	brne	.+2      	; 0xd8a0 <mmc_disk_ioctl+0x28>
    d89e:	01 c1       	rjmp	.+514    	; 0xdaa2 <mmc_disk_ioctl+0x22a>
    d8a0:	a0 f4       	brcc	.+40     	; 0xd8ca <mmc_disk_ioctl+0x52>
    d8a2:	83 30       	cpi	r24, 0x03	; 3
    d8a4:	09 f4       	brne	.+2      	; 0xd8a8 <mmc_disk_ioctl+0x30>
    d8a6:	85 c0       	rjmp	.+266    	; 0xd9b2 <mmc_disk_ioctl+0x13a>
    d8a8:	28 f4       	brcc	.+10     	; 0xd8b4 <mmc_disk_ioctl+0x3c>
    d8aa:	88 23       	and	r24, r24
    d8ac:	11 f1       	breq	.+68     	; 0xd8f2 <mmc_disk_ioctl+0x7a>
    d8ae:	81 30       	cpi	r24, 0x01	; 1
    d8b0:	11 f1       	breq	.+68     	; 0xd8f6 <mmc_disk_ioctl+0x7e>
    d8b2:	1f c2       	rjmp	.+1086   	; 0xdcf2 <mmc_disk_ioctl+0x47a>
    d8b4:	87 30       	cpi	r24, 0x07	; 7
    d8b6:	09 f4       	brne	.+2      	; 0xd8ba <mmc_disk_ioctl+0x42>
    d8b8:	2a c1       	rjmp	.+596    	; 0xdb0e <mmc_disk_ioctl+0x296>
    d8ba:	82 33       	cpi	r24, 0x32	; 50
    d8bc:	09 f0       	breq	.+2      	; 0xd8c0 <mmc_disk_ioctl+0x48>
    d8be:	19 c2       	rjmp	.+1074   	; 0xdcf2 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d8c0:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d8c4:	fb 01       	movw	r30, r22
    d8c6:	80 83       	st	Z, r24
    d8c8:	28 c1       	rjmp	.+592    	; 0xdb1a <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d8ca:	86 33       	cpi	r24, 0x36	; 54
    d8cc:	09 f4       	brne	.+2      	; 0xd8d0 <mmc_disk_ioctl+0x58>
    d8ce:	0c c1       	rjmp	.+536    	; 0xdae8 <mmc_disk_ioctl+0x270>
    d8d0:	38 f4       	brcc	.+14     	; 0xd8e0 <mmc_disk_ioctl+0x68>
    d8d2:	84 33       	cpi	r24, 0x34	; 52
    d8d4:	09 f4       	brne	.+2      	; 0xd8d8 <mmc_disk_ioctl+0x60>
    d8d6:	ea c0       	rjmp	.+468    	; 0xdaac <mmc_disk_ioctl+0x234>
    d8d8:	85 33       	cpi	r24, 0x35	; 53
    d8da:	09 f4       	brne	.+2      	; 0xd8de <mmc_disk_ioctl+0x66>
    d8dc:	f1 c0       	rjmp	.+482    	; 0xdac0 <mmc_disk_ioctl+0x248>
    d8de:	09 c2       	rjmp	.+1042   	; 0xdcf2 <mmc_disk_ioctl+0x47a>
    d8e0:	88 33       	cpi	r24, 0x38	; 56
    d8e2:	09 f4       	brne	.+2      	; 0xd8e6 <mmc_disk_ioctl+0x6e>
    d8e4:	74 c1       	rjmp	.+744    	; 0xdbce <mmc_disk_ioctl+0x356>
    d8e6:	08 f4       	brcc	.+2      	; 0xd8ea <mmc_disk_ioctl+0x72>
    d8e8:	1a c1       	rjmp	.+564    	; 0xdb1e <mmc_disk_ioctl+0x2a6>
    d8ea:	89 33       	cpi	r24, 0x39	; 57
    d8ec:	09 f4       	brne	.+2      	; 0xd8f0 <mmc_disk_ioctl+0x78>
    d8ee:	bc c1       	rjmp	.+888    	; 0xdc68 <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d8f0:	00 c2       	rjmp	.+1024   	; 0xdcf2 <mmc_disk_ioctl+0x47a>
    d8f2:	b9 dd       	rcall	.-1166   	; 0xd466 <select>
    d8f4:	06 c1       	rjmp	.+524    	; 0xdb02 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d8f6:	40 e0       	ldi	r20, 0x00	; 0
    d8f8:	50 e0       	ldi	r21, 0x00	; 0
    d8fa:	ba 01       	movw	r22, r20
    d8fc:	89 e0       	ldi	r24, 0x09	; 9
    d8fe:	d5 dd       	rcall	.-1110   	; 0xd4aa <send_cmd>
    d900:	81 11       	cpse	r24, r1
    d902:	f1 c1       	rjmp	.+994    	; 0xdce6 <mmc_disk_ioctl+0x46e>
    d904:	60 e1       	ldi	r22, 0x10	; 16
    d906:	70 e0       	ldi	r23, 0x00	; 0
    d908:	ce 01       	movw	r24, r28
    d90a:	01 96       	adiw	r24, 0x01	; 1
    d90c:	77 dd       	rcall	.-1298   	; 0xd3fc <rcvr_datablock>
    d90e:	89 2b       	or	r24, r25
    d910:	09 f4       	brne	.+2      	; 0xd914 <mmc_disk_ioctl+0x9c>
    d912:	e9 c1       	rjmp	.+978    	; 0xdce6 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d914:	99 81       	ldd	r25, Y+1	; 0x01
    d916:	92 95       	swap	r25
    d918:	96 95       	lsr	r25
    d91a:	96 95       	lsr	r25
    d91c:	93 70       	andi	r25, 0x03	; 3
    d91e:	29 85       	ldd	r18, Y+9	; 0x09
    d920:	4a 85       	ldd	r20, Y+10	; 0x0a
    d922:	88 85       	ldd	r24, Y+8	; 0x08
    d924:	91 30       	cpi	r25, 0x01	; 1
    d926:	d9 f4       	brne	.+54     	; 0xd95e <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d928:	30 e0       	ldi	r19, 0x00	; 0
    d92a:	32 2f       	mov	r19, r18
    d92c:	22 27       	eor	r18, r18
    d92e:	24 0f       	add	r18, r20
    d930:	31 1d       	adc	r19, r1
    d932:	8f 73       	andi	r24, 0x3F	; 63
    d934:	90 e0       	ldi	r25, 0x00	; 0
    d936:	a0 e0       	ldi	r26, 0x00	; 0
    d938:	b0 e0       	ldi	r27, 0x00	; 0
    d93a:	dc 01       	movw	r26, r24
    d93c:	99 27       	eor	r25, r25
    d93e:	88 27       	eor	r24, r24
    d940:	01 96       	adiw	r24, 0x01	; 1
    d942:	a1 1d       	adc	r26, r1
    d944:	b1 1d       	adc	r27, r1
    d946:	82 0f       	add	r24, r18
    d948:	93 1f       	adc	r25, r19
    d94a:	a1 1d       	adc	r26, r1
    d94c:	b1 1d       	adc	r27, r1
    d94e:	fa e0       	ldi	r31, 0x0A	; 10
    d950:	88 0f       	add	r24, r24
    d952:	99 1f       	adc	r25, r25
    d954:	aa 1f       	adc	r26, r26
    d956:	bb 1f       	adc	r27, r27
    d958:	fa 95       	dec	r31
    d95a:	d1 f7       	brne	.-12     	; 0xd950 <mmc_disk_ioctl+0xd8>
    d95c:	9b c0       	rjmp	.+310    	; 0xda94 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d95e:	22 95       	swap	r18
    d960:	26 95       	lsr	r18
    d962:	26 95       	lsr	r18
    d964:	23 70       	andi	r18, 0x03	; 3
    d966:	f4 e0       	ldi	r31, 0x04	; 4
    d968:	8f 9f       	mul	r24, r31
    d96a:	c0 01       	movw	r24, r0
    d96c:	11 24       	eor	r1, r1
    d96e:	82 0f       	add	r24, r18
    d970:	91 1d       	adc	r25, r1
    d972:	01 96       	adiw	r24, 0x01	; 1
    d974:	2f 81       	ldd	r18, Y+7	; 0x07
    d976:	23 70       	andi	r18, 0x03	; 3
    d978:	30 e0       	ldi	r19, 0x00	; 0
    d97a:	32 2f       	mov	r19, r18
    d97c:	22 27       	eor	r18, r18
    d97e:	33 0f       	add	r19, r19
    d980:	33 0f       	add	r19, r19
    d982:	82 0f       	add	r24, r18
    d984:	93 1f       	adc	r25, r19
    d986:	a0 e0       	ldi	r26, 0x00	; 0
    d988:	b0 e0       	ldi	r27, 0x00	; 0
    d98a:	2e 81       	ldd	r18, Y+6	; 0x06
    d98c:	32 2f       	mov	r19, r18
    d98e:	3f 70       	andi	r19, 0x0F	; 15
    d990:	2b 85       	ldd	r18, Y+11	; 0x0b
    d992:	22 1f       	adc	r18, r18
    d994:	22 27       	eor	r18, r18
    d996:	22 1f       	adc	r18, r18
    d998:	23 0f       	add	r18, r19
    d99a:	43 70       	andi	r20, 0x03	; 3
    d99c:	44 0f       	add	r20, r20
    d99e:	42 0f       	add	r20, r18
    d9a0:	47 50       	subi	r20, 0x07	; 7
    d9a2:	04 c0       	rjmp	.+8      	; 0xd9ac <mmc_disk_ioctl+0x134>
    d9a4:	88 0f       	add	r24, r24
    d9a6:	99 1f       	adc	r25, r25
    d9a8:	aa 1f       	adc	r26, r26
    d9aa:	bb 1f       	adc	r27, r27
    d9ac:	4a 95       	dec	r20
    d9ae:	d2 f7       	brpl	.-12     	; 0xd9a4 <mmc_disk_ioctl+0x12c>
    d9b0:	71 c0       	rjmp	.+226    	; 0xda94 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d9b2:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d9b6:	40 e0       	ldi	r20, 0x00	; 0
    d9b8:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d9ba:	ba 01       	movw	r22, r20
    d9bc:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d9be:	24 c0       	rjmp	.+72     	; 0xda08 <mmc_disk_ioctl+0x190>
    d9c0:	8d e8       	ldi	r24, 0x8D	; 141
    d9c2:	73 dd       	rcall	.-1306   	; 0xd4aa <send_cmd>
    d9c4:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d9c6:	8f c1       	rjmp	.+798    	; 0xdce6 <mmc_disk_ioctl+0x46e>
    d9c8:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d9ca:	10 dd       	rcall	.-1504   	; 0xd3ec <xchg_spi>
    d9cc:	60 e1       	ldi	r22, 0x10	; 16
    d9ce:	70 e0       	ldi	r23, 0x00	; 0
    d9d0:	ce 01       	movw	r24, r28
    d9d2:	01 96       	adiw	r24, 0x01	; 1
    d9d4:	13 dd       	rcall	.-1498   	; 0xd3fc <rcvr_datablock>
    d9d6:	89 2b       	or	r24, r25
    d9d8:	09 f4       	brne	.+2      	; 0xd9dc <mmc_disk_ioctl+0x164>
    d9da:	85 c1       	rjmp	.+778    	; 0xdce6 <mmc_disk_ioctl+0x46e>
    d9dc:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d9de:	f5 2e       	mov	r15, r21
    d9e0:	8f ef       	ldi	r24, 0xFF	; 255
    d9e2:	04 dd       	rcall	.-1528   	; 0xd3ec <xchg_spi>
    d9e4:	fa 94       	dec	r15
    d9e6:	f1 10       	cpse	r15, r1
    d9e8:	fb cf       	rjmp	.-10     	; 0xd9e0 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d9ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    d9ec:	22 95       	swap	r18
    d9ee:	2f 70       	andi	r18, 0x0F	; 15
    d9f0:	80 e1       	ldi	r24, 0x10	; 16
    d9f2:	90 e0       	ldi	r25, 0x00	; 0
    d9f4:	a0 e0       	ldi	r26, 0x00	; 0
    d9f6:	b0 e0       	ldi	r27, 0x00	; 0
    d9f8:	04 c0       	rjmp	.+8      	; 0xda02 <mmc_disk_ioctl+0x18a>
    d9fa:	88 0f       	add	r24, r24
    d9fc:	99 1f       	adc	r25, r25
    d9fe:	aa 1f       	adc	r26, r26
    da00:	bb 1f       	adc	r27, r27
    da02:	2a 95       	dec	r18
    da04:	d2 f7       	brpl	.-12     	; 0xd9fa <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    da06:	46 c0       	rjmp	.+140    	; 0xda94 <mmc_disk_ioctl+0x21c>
    da08:	89 e0       	ldi	r24, 0x09	; 9
    da0a:	4f dd       	rcall	.-1378   	; 0xd4aa <send_cmd>
    da0c:	81 11       	cpse	r24, r1
    da0e:	6b c1       	rjmp	.+726    	; 0xdce6 <mmc_disk_ioctl+0x46e>
    da10:	60 e1       	ldi	r22, 0x10	; 16
    da12:	70 e0       	ldi	r23, 0x00	; 0
    da14:	ce 01       	movw	r24, r28
    da16:	01 96       	adiw	r24, 0x01	; 1
    da18:	f1 dc       	rcall	.-1566   	; 0xd3fc <rcvr_datablock>
    da1a:	89 2b       	or	r24, r25
    da1c:	09 f4       	brne	.+2      	; 0xda20 <mmc_disk_ioctl+0x1a8>
    da1e:	63 c1       	rjmp	.+710    	; 0xdce6 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    da20:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <CardType>
    da24:	2b 85       	ldd	r18, Y+11	; 0x0b
    da26:	8c 85       	ldd	r24, Y+12	; 0x0c
    da28:	91 ff       	sbrs	r25, 1
    da2a:	16 c0       	rjmp	.+44     	; 0xda58 <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    da2c:	2f 73       	andi	r18, 0x3F	; 63
    da2e:	88 1f       	adc	r24, r24
    da30:	88 27       	eor	r24, r24
    da32:	88 1f       	adc	r24, r24
    da34:	90 e0       	ldi	r25, 0x00	; 0
    da36:	01 96       	adiw	r24, 0x01	; 1
    da38:	82 0f       	add	r24, r18
    da3a:	91 1d       	adc	r25, r1
    da3c:	82 0f       	add	r24, r18
    da3e:	91 1d       	adc	r25, r1
    da40:	2e 85       	ldd	r18, Y+14	; 0x0e
    da42:	22 95       	swap	r18
    da44:	26 95       	lsr	r18
    da46:	26 95       	lsr	r18
    da48:	23 70       	andi	r18, 0x03	; 3
    da4a:	21 50       	subi	r18, 0x01	; 1
    da4c:	02 c0       	rjmp	.+4      	; 0xda52 <mmc_disk_ioctl+0x1da>
    da4e:	88 0f       	add	r24, r24
    da50:	99 1f       	adc	r25, r25
    da52:	2a 95       	dec	r18
    da54:	e2 f7       	brpl	.-8      	; 0xda4e <mmc_disk_ioctl+0x1d6>
    da56:	1c c0       	rjmp	.+56     	; 0xda90 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    da58:	38 2f       	mov	r19, r24
    da5a:	33 70       	andi	r19, 0x03	; 3
    da5c:	82 95       	swap	r24
    da5e:	86 95       	lsr	r24
    da60:	87 70       	andi	r24, 0x07	; 7
    da62:	90 e0       	ldi	r25, 0x00	; 0
    da64:	f8 e0       	ldi	r31, 0x08	; 8
    da66:	3f 9f       	mul	r19, r31
    da68:	80 0d       	add	r24, r0
    da6a:	91 1d       	adc	r25, r1
    da6c:	11 24       	eor	r1, r1
    da6e:	01 96       	adiw	r24, 0x01	; 1
    da70:	2c 77       	andi	r18, 0x7C	; 124
    da72:	30 e0       	ldi	r19, 0x00	; 0
    da74:	35 95       	asr	r19
    da76:	27 95       	ror	r18
    da78:	35 95       	asr	r19
    da7a:	27 95       	ror	r18
    da7c:	2f 5f       	subi	r18, 0xFF	; 255
    da7e:	3f 4f       	sbci	r19, 0xFF	; 255
    da80:	82 9f       	mul	r24, r18
    da82:	a0 01       	movw	r20, r0
    da84:	83 9f       	mul	r24, r19
    da86:	50 0d       	add	r21, r0
    da88:	92 9f       	mul	r25, r18
    da8a:	50 0d       	add	r21, r0
    da8c:	11 24       	eor	r1, r1
    da8e:	ca 01       	movw	r24, r20
    da90:	a0 e0       	ldi	r26, 0x00	; 0
    da92:	b0 e0       	ldi	r27, 0x00	; 0
    da94:	f8 01       	movw	r30, r16
    da96:	80 83       	st	Z, r24
    da98:	91 83       	std	Z+1, r25	; 0x01
    da9a:	a2 83       	std	Z+2, r26	; 0x02
    da9c:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    da9e:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    daa0:	23 c1       	rjmp	.+582    	; 0xdce8 <mmc_disk_ioctl+0x470>
    daa2:	40 e0       	ldi	r20, 0x00	; 0
    daa4:	50 e0       	ldi	r21, 0x00	; 0
    daa6:	ba 01       	movw	r22, r20
    daa8:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    daaa:	04 c0       	rjmp	.+8      	; 0xdab4 <mmc_disk_ioctl+0x23c>
    daac:	40 e0       	ldi	r20, 0x00	; 0
    daae:	50 e0       	ldi	r21, 0x00	; 0
    dab0:	ba 01       	movw	r22, r20
    dab2:	8a e0       	ldi	r24, 0x0A	; 10
    dab4:	fa dc       	rcall	.-1548   	; 0xd4aa <send_cmd>
    dab6:	81 11       	cpse	r24, r1
    dab8:	16 c1       	rjmp	.+556    	; 0xdce6 <mmc_disk_ioctl+0x46e>
    daba:	60 e1       	ldi	r22, 0x10	; 16
    dabc:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    dabe:	1f c0       	rjmp	.+62     	; 0xdafe <mmc_disk_ioctl+0x286>
    dac0:	40 e0       	ldi	r20, 0x00	; 0
    dac2:	50 e0       	ldi	r21, 0x00	; 0
    dac4:	ba 01       	movw	r22, r20
    dac6:	8a e3       	ldi	r24, 0x3A	; 58
    dac8:	f0 dc       	rcall	.-1568   	; 0xd4aa <send_cmd>
    daca:	81 11       	cpse	r24, r1
    dacc:	0c c1       	rjmp	.+536    	; 0xdce6 <mmc_disk_ioctl+0x46e>
    dace:	78 01       	movw	r14, r16
    dad0:	f4 e0       	ldi	r31, 0x04	; 4
    dad2:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dad4:	f1 1c       	adc	r15, r1
    dad6:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    dad8:	83 d1       	rcall	.+774    	; 0xdde0 <mmc_spi_TXRX>
    dada:	f8 01       	movw	r30, r16
    dadc:	81 93       	st	Z+, r24
    dade:	8f 01       	movw	r16, r30
    dae0:	ee 15       	cp	r30, r14
    dae2:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    dae4:	c1 f7       	brne	.-16     	; 0xdad6 <mmc_disk_ioctl+0x25e>
    dae6:	db cf       	rjmp	.-74     	; 0xda9e <mmc_disk_ioctl+0x226>
    dae8:	40 e0       	ldi	r20, 0x00	; 0
    daea:	50 e0       	ldi	r21, 0x00	; 0
    daec:	ba 01       	movw	r22, r20
    daee:	8d e8       	ldi	r24, 0x8D	; 141
    daf0:	dc dc       	rcall	.-1608   	; 0xd4aa <send_cmd>
            {
                xchg_spi(0xFF);
    daf2:	81 11       	cpse	r24, r1
    daf4:	f8 c0       	rjmp	.+496    	; 0xdce6 <mmc_disk_ioctl+0x46e>
    daf6:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    daf8:	79 dc       	rcall	.-1806   	; 0xd3ec <xchg_spi>
    dafa:	60 e4       	ldi	r22, 0x40	; 64
    dafc:	70 e0       	ldi	r23, 0x00	; 0
    dafe:	c8 01       	movw	r24, r16
    db00:	7d dc       	rcall	.-1798   	; 0xd3fc <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    db02:	01 e0       	ldi	r16, 0x01	; 1
    db04:	10 e0       	ldi	r17, 0x00	; 0
    db06:	89 2b       	or	r24, r25
    db08:	09 f4       	brne	.+2      	; 0xdb0c <mmc_disk_ioctl+0x294>
    db0a:	ef c0       	rjmp	.+478    	; 0xdcea <mmc_disk_ioctl+0x472>
    db0c:	ea c0       	rjmp	.+468    	; 0xdce2 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    db0e:	97 d1       	rcall	.+814    	; 0xde3e <mmc_power_off>
    db10:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    db14:	81 60       	ori	r24, 0x01	; 1
    db16:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    db1a:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    db1c:	eb c0       	rjmp	.+470    	; 0xdcf4 <mmc_disk_ioctl+0x47c>
    db1e:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    db20:	43 81       	ldd	r20, Z+3	; 0x03
    db22:	54 81       	ldd	r21, Z+4	; 0x04
    db24:	65 81       	ldd	r22, Z+5	; 0x05
    db26:	76 81       	ldd	r23, Z+6	; 0x06
    db28:	39 e0       	ldi	r19, 0x09	; 9
    db2a:	44 0f       	add	r20, r20
    db2c:	55 1f       	adc	r21, r21
    db2e:	66 1f       	adc	r22, r22
    db30:	77 1f       	adc	r23, r23
    db32:	3a 95       	dec	r19
    db34:	d1 f7       	brne	.-12     	; 0xdb2a <mmc_disk_ioctl+0x2b2>
    db36:	70 68       	ori	r23, 0x80	; 128
    db38:	80 81       	ld	r24, Z
    db3a:	90 e0       	ldi	r25, 0x00	; 0
    db3c:	a0 e0       	ldi	r26, 0x00	; 0
    db3e:	b0 e0       	ldi	r27, 0x00	; 0
    db40:	2c e1       	ldi	r18, 0x1C	; 28
    db42:	88 0f       	add	r24, r24
    db44:	99 1f       	adc	r25, r25
    db46:	aa 1f       	adc	r26, r26
    db48:	bb 1f       	adc	r27, r27
    db4a:	2a 95       	dec	r18
    db4c:	d1 f7       	brne	.-12     	; 0xdb42 <mmc_disk_ioctl+0x2ca>
    db4e:	48 2b       	or	r20, r24
    db50:	59 2b       	or	r21, r25
    db52:	6a 2b       	or	r22, r26
    db54:	7b 2b       	or	r23, r27
    db56:	81 81       	ldd	r24, Z+1	; 0x01
    db58:	92 81       	ldd	r25, Z+2	; 0x02
    db5a:	01 97       	sbiw	r24, 0x01	; 1
    db5c:	91 70       	andi	r25, 0x01	; 1
    db5e:	a0 e0       	ldi	r26, 0x00	; 0
    db60:	b0 e0       	ldi	r27, 0x00	; 0
    db62:	48 2b       	or	r20, r24
    db64:	59 2b       	or	r21, r25
    db66:	6a 2b       	or	r22, r26
    db68:	7b 2b       	or	r23, r27
    db6a:	80 e3       	ldi	r24, 0x30	; 48
    db6c:	9e dc       	rcall	.-1732   	; 0xd4aa <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    db6e:	81 11       	cpse	r24, r1
    db70:	ba c0       	rjmp	.+372    	; 0xdce6 <mmc_disk_ioctl+0x46e>
    db72:	88 ee       	ldi	r24, 0xE8	; 232
    db74:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db76:	37 d1       	rcall	.+622    	; 0xdde6 <mmc_set_ms_timeout>
    db78:	8f ef       	ldi	r24, 0xFF	; 255
    db7a:	32 d1       	rcall	.+612    	; 0xdde0 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    db7c:	8f 3f       	cpi	r24, 0xFF	; 255
    db7e:	21 f4       	brne	.+8      	; 0xdb88 <mmc_disk_ioctl+0x310>
    db80:	39 d1       	rcall	.+626    	; 0xddf4 <mmc_test_timeout>
    db82:	89 2b       	or	r24, r25
    db84:	c9 f3       	breq	.-14     	; 0xdb78 <mmc_disk_ioctl+0x300>
    db86:	af c0       	rjmp	.+350    	; 0xdce6 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    db88:	8e 3f       	cpi	r24, 0xFE	; 254
    db8a:	09 f0       	breq	.+2      	; 0xdb8e <mmc_disk_ioctl+0x316>
    db8c:	ac c0       	rjmp	.+344    	; 0xdce6 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    db8e:	f8 01       	movw	r30, r16
    db90:	e7 80       	ldd	r14, Z+7	; 0x07
    db92:	f0 84       	ldd	r15, Z+8	; 0x08
    db94:	c1 80       	ldd	r12, Z+1	; 0x01
    db96:	d2 80       	ldd	r13, Z+2	; 0x02
    db98:	ce 0c       	add	r12, r14
    db9a:	df 1c       	adc	r13, r15
    db9c:	ce 14       	cp	r12, r14
    db9e:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dba0:	31 f0       	breq	.+12     	; 0xdbae <mmc_disk_ioctl+0x336>
    dba2:	8f ef       	ldi	r24, 0xFF	; 255
    dba4:	1d d1       	rcall	.+570    	; 0xdde0 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    dba6:	f7 01       	movw	r30, r14
    dba8:	81 93       	st	Z+, r24
    dbaa:	7f 01       	movw	r14, r30
    dbac:	f7 cf       	rjmp	.-18     	; 0xdb9c <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dbae:	f8 01       	movw	r30, r16
    dbb0:	81 81       	ldd	r24, Z+1	; 0x01
    dbb2:	92 81       	ldd	r25, Z+2	; 0x02
    dbb4:	02 e0       	ldi	r16, 0x02	; 2
    dbb6:	12 e0       	ldi	r17, 0x02	; 2
    dbb8:	08 1b       	sub	r16, r24
    dbba:	19 0b       	sbc	r17, r25
    dbbc:	01 15       	cp	r16, r1
    dbbe:	11 05       	cpc	r17, r1
    dbc0:	09 f4       	brne	.+2      	; 0xdbc4 <mmc_disk_ioctl+0x34c>
    dbc2:	6d cf       	rjmp	.-294    	; 0xda9e <mmc_disk_ioctl+0x226>
    dbc4:	8f ef       	ldi	r24, 0xFF	; 255
    dbc6:	12 dc       	rcall	.-2012   	; 0xd3ec <xchg_spi>
    dbc8:	01 50       	subi	r16, 0x01	; 1
    dbca:	11 09       	sbc	r17, r1
    dbcc:	f7 cf       	rjmp	.-18     	; 0xdbbc <mmc_disk_ioctl+0x344>
    dbce:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    dbd0:	43 81       	ldd	r20, Z+3	; 0x03
    dbd2:	54 81       	ldd	r21, Z+4	; 0x04
    dbd4:	65 81       	ldd	r22, Z+5	; 0x05
    dbd6:	76 81       	ldd	r23, Z+6	; 0x06
    dbd8:	39 e0       	ldi	r19, 0x09	; 9
    dbda:	44 0f       	add	r20, r20
    dbdc:	55 1f       	adc	r21, r21
    dbde:	66 1f       	adc	r22, r22
    dbe0:	77 1f       	adc	r23, r23
    dbe2:	3a 95       	dec	r19
    dbe4:	d1 f7       	brne	.-12     	; 0xdbda <mmc_disk_ioctl+0x362>
    dbe6:	70 68       	ori	r23, 0x80	; 128
    dbe8:	80 81       	ld	r24, Z
    dbea:	90 e0       	ldi	r25, 0x00	; 0
    dbec:	a0 e0       	ldi	r26, 0x00	; 0
    dbee:	b0 e0       	ldi	r27, 0x00	; 0
    dbf0:	2c e1       	ldi	r18, 0x1C	; 28
    dbf2:	88 0f       	add	r24, r24
    dbf4:	99 1f       	adc	r25, r25
    dbf6:	aa 1f       	adc	r26, r26
    dbf8:	bb 1f       	adc	r27, r27
    dbfa:	2a 95       	dec	r18
    dbfc:	d1 f7       	brne	.-12     	; 0xdbf2 <mmc_disk_ioctl+0x37a>
    dbfe:	48 2b       	or	r20, r24
    dc00:	59 2b       	or	r21, r25
    dc02:	6a 2b       	or	r22, r26
    dc04:	7b 2b       	or	r23, r27
    dc06:	81 81       	ldd	r24, Z+1	; 0x01
    dc08:	92 81       	ldd	r25, Z+2	; 0x02
    dc0a:	01 97       	sbiw	r24, 0x01	; 1
    dc0c:	91 70       	andi	r25, 0x01	; 1
    dc0e:	a0 e0       	ldi	r26, 0x00	; 0
    dc10:	b0 e0       	ldi	r27, 0x00	; 0
    dc12:	48 2b       	or	r20, r24
    dc14:	59 2b       	or	r21, r25
    dc16:	6a 2b       	or	r22, r26
    dc18:	7b 2b       	or	r23, r27
    dc1a:	81 e3       	ldi	r24, 0x31	; 49
    dc1c:	46 dc       	rcall	.-1908   	; 0xd4aa <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dc1e:	81 11       	cpse	r24, r1
    dc20:	62 c0       	rjmp	.+196    	; 0xdce6 <mmc_disk_ioctl+0x46e>
    dc22:	8f ef       	ldi	r24, 0xFF	; 255
    dc24:	e3 db       	rcall	.-2106   	; 0xd3ec <xchg_spi>
    dc26:	8e ef       	ldi	r24, 0xFE	; 254
    dc28:	e1 db       	rcall	.-2110   	; 0xd3ec <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    dc2a:	f8 01       	movw	r30, r16
    dc2c:	e7 80       	ldd	r14, Z+7	; 0x07
    dc2e:	f0 84       	ldd	r15, Z+8	; 0x08
    dc30:	c1 80       	ldd	r12, Z+1	; 0x01
    dc32:	d2 80       	ldd	r13, Z+2	; 0x02
    dc34:	ce 0c       	add	r12, r14
    dc36:	df 1c       	adc	r13, r15
    dc38:	ec 14       	cp	r14, r12
    dc3a:	fd 04       	cpc	r15, r13
    dc3c:	29 f0       	breq	.+10     	; 0xdc48 <mmc_disk_ioctl+0x3d0>
    dc3e:	f7 01       	movw	r30, r14
    dc40:	81 91       	ld	r24, Z+
    dc42:	7f 01       	movw	r14, r30
    dc44:	d3 db       	rcall	.-2138   	; 0xd3ec <xchg_spi>
    dc46:	f8 cf       	rjmp	.-16     	; 0xdc38 <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dc48:	f8 01       	movw	r30, r16
    dc4a:	81 81       	ldd	r24, Z+1	; 0x01
    dc4c:	92 81       	ldd	r25, Z+2	; 0x02
    dc4e:	02 e0       	ldi	r16, 0x02	; 2
    dc50:	12 e0       	ldi	r17, 0x02	; 2
    dc52:	08 1b       	sub	r16, r24
    dc54:	19 0b       	sbc	r17, r25
    dc56:	8f ef       	ldi	r24, 0xFF	; 255
    dc58:	01 15       	cp	r16, r1
    dc5a:	11 05       	cpc	r17, r1
    dc5c:	09 f4       	brne	.+2      	; 0xdc60 <mmc_disk_ioctl+0x3e8>
    dc5e:	3b c0       	rjmp	.+118    	; 0xdcd6 <mmc_disk_ioctl+0x45e>
    dc60:	c5 db       	rcall	.-2166   	; 0xd3ec <xchg_spi>
    dc62:	01 50       	subi	r16, 0x01	; 1
    dc64:	11 09       	sbc	r17, r1
    dc66:	f7 cf       	rjmp	.-18     	; 0xdc56 <mmc_disk_ioctl+0x3de>
    dc68:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    dc6a:	43 81       	ldd	r20, Z+3	; 0x03
    dc6c:	54 81       	ldd	r21, Z+4	; 0x04
    dc6e:	65 81       	ldd	r22, Z+5	; 0x05
    dc70:	76 81       	ldd	r23, Z+6	; 0x06
    dc72:	89 e0       	ldi	r24, 0x09	; 9
    dc74:	44 0f       	add	r20, r20
    dc76:	55 1f       	adc	r21, r21
    dc78:	66 1f       	adc	r22, r22
    dc7a:	77 1f       	adc	r23, r23
    dc7c:	8a 95       	dec	r24
    dc7e:	d1 f7       	brne	.-12     	; 0xdc74 <mmc_disk_ioctl+0x3fc>
    dc80:	74 68       	ori	r23, 0x84	; 132
    dc82:	80 81       	ld	r24, Z
    dc84:	90 e0       	ldi	r25, 0x00	; 0
    dc86:	a0 e0       	ldi	r26, 0x00	; 0
    dc88:	b0 e0       	ldi	r27, 0x00	; 0
    dc8a:	2c e1       	ldi	r18, 0x1C	; 28
    dc8c:	88 0f       	add	r24, r24
    dc8e:	99 1f       	adc	r25, r25
    dc90:	aa 1f       	adc	r26, r26
    dc92:	bb 1f       	adc	r27, r27
    dc94:	2a 95       	dec	r18
    dc96:	d1 f7       	brne	.-12     	; 0xdc8c <mmc_disk_ioctl+0x414>
    dc98:	48 2b       	or	r20, r24
    dc9a:	59 2b       	or	r21, r25
    dc9c:	6a 2b       	or	r22, r26
    dc9e:	7b 2b       	or	r23, r27
    dca0:	82 81       	ldd	r24, Z+2	; 0x02
    dca2:	90 e0       	ldi	r25, 0x00	; 0
    dca4:	a0 e0       	ldi	r26, 0x00	; 0
    dca6:	b0 e0       	ldi	r27, 0x00	; 0
    dca8:	48 2b       	or	r20, r24
    dcaa:	59 2b       	or	r21, r25
    dcac:	6a 2b       	or	r22, r26
    dcae:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dcb0:	81 e3       	ldi	r24, 0x31	; 49
    dcb2:	fb db       	rcall	.-2058   	; 0xd4aa <send_cmd>
    dcb4:	81 11       	cpse	r24, r1
    dcb6:	17 c0       	rjmp	.+46     	; 0xdce6 <mmc_disk_ioctl+0x46e>
    dcb8:	8f ef       	ldi	r24, 0xFF	; 255
    dcba:	98 db       	rcall	.-2256   	; 0xd3ec <xchg_spi>
                xchg_spi(sdi->ndata);
    dcbc:	8e ef       	ldi	r24, 0xFE	; 254
    dcbe:	96 db       	rcall	.-2260   	; 0xd3ec <xchg_spi>
    dcc0:	f8 01       	movw	r30, r16
    dcc2:	81 81       	ldd	r24, Z+1	; 0x01
    dcc4:	93 db       	rcall	.-2266   	; 0xd3ec <xchg_spi>
    dcc6:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    dcc8:	12 e0       	ldi	r17, 0x02	; 2
    dcca:	8f ef       	ldi	r24, 0xFF	; 255
    dccc:	8f db       	rcall	.-2274   	; 0xd3ec <xchg_spi>
    dcce:	01 50       	subi	r16, 0x01	; 1
    dcd0:	11 09       	sbc	r17, r1
    dcd2:	d9 f7       	brne	.-10     	; 0xdcca <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dcd4:	8f ef       	ldi	r24, 0xFF	; 255
    dcd6:	84 d0       	rcall	.+264    	; 0xdde0 <mmc_spi_TXRX>
    dcd8:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dcda:	01 e0       	ldi	r16, 0x01	; 1
    dcdc:	10 e0       	ldi	r17, 0x00	; 0
    dcde:	85 30       	cpi	r24, 0x05	; 5
    dce0:	21 f4       	brne	.+8      	; 0xdcea <mmc_disk_ioctl+0x472>
    dce2:	00 e0       	ldi	r16, 0x00	; 0
    dce4:	02 c0       	rjmp	.+4      	; 0xdcea <mmc_disk_ioctl+0x472>
    dce6:	01 e0       	ldi	r16, 0x01	; 1
    dce8:	10 e0       	ldi	r17, 0x00	; 0
    dcea:	82 db       	rcall	.-2300   	; 0xd3f0 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    dcec:	04 c0       	rjmp	.+8      	; 0xdcf6 <mmc_disk_ioctl+0x47e>
    dcee:	03 e0       	ldi	r16, 0x03	; 3
            break;
    dcf0:	01 c0       	rjmp	.+2      	; 0xdcf4 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    dcf2:	04 e0       	ldi	r16, 0x04	; 4
    dcf4:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    dcf6:	c8 01       	movw	r24, r16
    dcf8:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    dcfa:	e8 e0       	ldi	r30, 0x08	; 8
    dcfc:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000dd00 <mmc_disk_timerproc>:
    dd00:	cf 93       	push	r28
    dd02:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    dd06:	88 23       	and	r24, r24
    dd08:	19 f0       	breq	.+6      	; 0xdd10 <mmc_disk_timerproc+0x10>
    dd0a:	81 50       	subi	r24, 0x01	; 1
    dd0c:	80 93 25 18 	sts	0x1825, r24	; 0x801825 <Timer1>
    n = Timer2;
    dd10:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <Timer2>
    if (n) Timer2 = --n;
    dd14:	88 23       	and	r24, r24
    dd16:	19 f0       	breq	.+6      	; 0xdd1e <mmc_disk_timerproc+0x1e>
    dd18:	81 50       	subi	r24, 0x01	; 1
    dd1a:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <Timer2>

    s = Stat;
    dd1e:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    dd22:	8e d0       	rcall	.+284    	; 0xde40 <mmc_ins_status>
    dd24:	89 2b       	or	r24, r25
    dd26:	11 f0       	breq	.+4      	; 0xdd2c <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    dd28:	cd 7f       	andi	r28, 0xFD	; 253
    dd2a:	04 c0       	rjmp	.+8      	; 0xdd34 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    dd2c:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    dd2e:	81 e0       	ldi	r24, 0x01	; 1
    dd30:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    dd34:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    dd38:	cf 91       	pop	r28
    dd3a:	08 95       	ret

0000dd3c <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dd3c:	00 d0       	rcall	.+0      	; 0xdd3e <mmc_install_timer+0x2>
    dd3e:	1f 92       	push	r1
    dd40:	10 92 2f 18 	sts	0x182F, r1	; 0x80182f <_mmc_timeout+0x1>
    dd44:	10 92 2e 18 	sts	0x182E, r1	; 0x80182e <_mmc_timeout>
    dd48:	61 e0       	ldi	r22, 0x01	; 1
    dd4a:	70 e0       	ldi	r23, 0x00	; 0
    dd4c:	8d e2       	ldi	r24, 0x2D	; 45
    dd4e:	9f e6       	ldi	r25, 0x6F	; 111
    dd50:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <set_timers>
    dd54:	01 96       	adiw	r24, 0x01	; 1
    dd56:	51 f4       	brne	.+20     	; 0xdd6c <mmc_install_timer+0x30>
    dd58:	87 e2       	ldi	r24, 0x27	; 39
    dd5a:	98 e0       	ldi	r25, 0x08	; 8
    dd5c:	a0 e0       	ldi	r26, 0x00	; 0
    dd5e:	ed b7       	in	r30, 0x3d	; 61
    dd60:	fe b7       	in	r31, 0x3e	; 62
    dd62:	81 83       	std	Z+1, r24	; 0x01
    dd64:	92 83       	std	Z+2, r25	; 0x02
    dd66:	a3 83       	std	Z+3, r26	; 0x03
    dd68:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    dd6c:	0f 90       	pop	r0
    dd6e:	0f 90       	pop	r0
    dd70:	0f 90       	pop	r0
    dd72:	08 95       	ret

0000dd74 <mmc_spi_begin>:
    dd74:	60 91 2a 18 	lds	r22, 0x182A	; 0x80182a <_mmc_clock>
    dd78:	70 91 2b 18 	lds	r23, 0x182B	; 0x80182b <_mmc_clock+0x1>
    dd7c:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_mmc_clock+0x2>
    dd80:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_mmc_clock+0x3>
    dd84:	4b e0       	ldi	r20, 0x0B	; 11
    dd86:	50 e0       	ldi	r21, 0x00	; 0
    dd88:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <spi_begin>
    dd8c:	08 95       	ret

0000dd8e <mmc_spi_end>:
    dd8e:	8b e0       	ldi	r24, 0x0B	; 11
    dd90:	0c 94 6f 26 	jmp	0x4cde	; 0x4cde <spi_end>
    dd94:	08 95       	ret

0000dd96 <mmc_slow>:
    dd96:	80 e2       	ldi	r24, 0x20	; 32
    dd98:	91 ea       	ldi	r25, 0xA1	; 161
    dd9a:	a7 e0       	ldi	r26, 0x07	; 7
    dd9c:	b0 e0       	ldi	r27, 0x00	; 0
    dd9e:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    dda2:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    dda6:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    ddaa:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    ddae:	08 95       	ret

0000ddb0 <mmc_spi_init>:
    ddb0:	8b e0       	ldi	r24, 0x0B	; 11
    ddb2:	0e 94 6d 26 	call	0x4cda	; 0x4cda <chip_select_init>
    ddb6:	ef cf       	rjmp	.-34     	; 0xdd96 <mmc_slow>
    ddb8:	08 95       	ret

0000ddba <mmc_fast>:
    ddba:	80 ea       	ldi	r24, 0xA0	; 160
    ddbc:	95 e2       	ldi	r25, 0x25	; 37
    ddbe:	a6 e2       	ldi	r26, 0x26	; 38
    ddc0:	b0 e0       	ldi	r27, 0x00	; 0
    ddc2:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    ddc6:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    ddca:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    ddce:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    ddd2:	08 95       	ret

0000ddd4 <mmc_spi_TX_buffer>:
    ddd4:	0c 94 9f 26 	jmp	0x4d3e	; 0x4d3e <spi_TX_buffer>
    ddd8:	08 95       	ret

0000ddda <mmc_spi_RX_buffer>:
    ddda:	0c 94 a1 26 	jmp	0x4d42	; 0x4d42 <spi_RX_buffer>
    ddde:	08 95       	ret

0000dde0 <mmc_spi_TXRX>:
    dde0:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <spi_TXRX>
    dde4:	08 95       	ret

0000dde6 <mmc_set_ms_timeout>:
    dde6:	f8 94       	cli
    dde8:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    ddec:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>
    ddf0:	78 94       	sei
    ddf2:	08 95       	ret

0000ddf4 <mmc_test_timeout>:
    ddf4:	00 d0       	rcall	.+0      	; 0xddf6 <mmc_test_timeout+0x2>
    ddf6:	1f 92       	push	r1
    ddf8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    ddfc:	81 fd       	sbrc	r24, 1
    ddfe:	15 c0       	rjmp	.+42     	; 0xde2a <mmc_test_timeout+0x36>
    de00:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    de04:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    de08:	89 2b       	or	r24, r25
    de0a:	91 f4       	brne	.+36     	; 0xde30 <mmc_test_timeout+0x3c>
    de0c:	8a e1       	ldi	r24, 0x1A	; 26
    de0e:	98 e0       	ldi	r25, 0x08	; 8
    de10:	a0 e0       	ldi	r26, 0x00	; 0
    de12:	ed b7       	in	r30, 0x3d	; 61
    de14:	fe b7       	in	r31, 0x3e	; 62
    de16:	81 83       	std	Z+1, r24	; 0x01
    de18:	92 83       	std	Z+2, r25	; 0x02
    de1a:	a3 83       	std	Z+3, r26	; 0x03
    de1c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    de20:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    de24:	83 60       	ori	r24, 0x03	; 3
    de26:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    de2a:	81 e0       	ldi	r24, 0x01	; 1
    de2c:	90 e0       	ldi	r25, 0x00	; 0
    de2e:	02 c0       	rjmp	.+4      	; 0xde34 <mmc_test_timeout+0x40>
    de30:	80 e0       	ldi	r24, 0x00	; 0
    de32:	90 e0       	ldi	r25, 0x00	; 0
    de34:	0f 90       	pop	r0
    de36:	0f 90       	pop	r0
    de38:	0f 90       	pop	r0
    de3a:	08 95       	ret

0000de3c <mmc_power_on>:
    de3c:	08 95       	ret

0000de3e <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    de3e:	08 95       	ret

0000de40 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    de40:	3f 98       	cbi	0x07, 7	; 7
    de42:	86 b1       	in	r24, 0x06	; 6
    de44:	08 2e       	mov	r0, r24
    de46:	00 0c       	add	r0, r0
    de48:	99 0b       	sbc	r25, r25
    de4a:	80 95       	com	r24
    de4c:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    de4e:	89 2f       	mov	r24, r25
    de50:	88 1f       	adc	r24, r24
    de52:	88 27       	eor	r24, r24
    de54:	88 1f       	adc	r24, r24
    de56:	90 e0       	ldi	r25, 0x00	; 0
    de58:	08 95       	ret

0000de5a <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    de5a:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    de5e:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    de62:	00 97       	sbiw	r24, 0x00	; 0
    de64:	29 f0       	breq	.+10     	; 0xde70 <mmc_task+0x16>
        _mmc_timeout--;
    de66:	01 97       	sbiw	r24, 0x01	; 1
    de68:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    de6c:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    de70:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <_mmc_pre>
    de74:	90 91 29 18 	lds	r25, 0x1829	; 0x801829 <_mmc_pre+0x1>
    de78:	8a 30       	cpi	r24, 0x0A	; 10
    de7a:	91 05       	cpc	r25, r1
    de7c:	30 f4       	brcc	.+12     	; 0xde8a <mmc_task+0x30>
    de7e:	01 96       	adiw	r24, 0x01	; 1
    de80:	90 93 29 18 	sts	0x1829, r25	; 0x801829 <_mmc_pre+0x1>
    de84:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_mmc_pre>
    de88:	08 95       	ret
        return;

    _mmc_pre = 0;
    de8a:	10 92 29 18 	sts	0x1829, r1	; 0x801829 <_mmc_pre+0x1>
    de8e:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_mmc_pre>

	if(!mmc_ins_status())
    de92:	d6 df       	rcall	.-84     	; 0xde40 <mmc_ins_status>
    de94:	89 2b       	or	r24, r25
    de96:	19 f4       	brne	.+6      	; 0xde9e <mmc_task+0x44>
		set_error(1);
    de98:	81 e0       	ldi	r24, 0x01	; 1
    de9a:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <set_error>

    mmc_disk_timerproc();
    de9e:	30 cf       	rjmp	.-416    	; 0xdd00 <mmc_disk_timerproc>
    dea0:	08 95       	ret

0000dea2 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dea2:	ac e0       	ldi	r26, 0x0C	; 12
    dea4:	b1 e0       	ldi	r27, 0x01	; 1
    dea6:	e7 e5       	ldi	r30, 0x57	; 87
    dea8:	ff e6       	ldi	r31, 0x6F	; 111
    deaa:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
    deae:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    deb0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    deb4:	0e 94 31 27 	call	0x4e62	; 0x4e62 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    deb8:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    deba:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    debc:	79 df       	rcall	.-270    	; 0xddb0 <mmc_spi_init>

    if( verbose)
    debe:	e1 14       	cp	r14, r1
    dec0:	f1 04       	cpc	r15, r1
    dec2:	51 f0       	breq	.+20     	; 0xded8 <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    dec4:	8a e0       	ldi	r24, 0x0A	; 10
    dec6:	98 e0       	ldi	r25, 0x08	; 8
    dec8:	a0 e0       	ldi	r26, 0x00	; 0
    deca:	ed b7       	in	r30, 0x3d	; 61
    decc:	fe b7       	in	r31, 0x3e	; 62
    dece:	81 83       	std	Z+1, r24	; 0x01
    ded0:	92 83       	std	Z+2, r25	; 0x02
    ded2:	a3 83       	std	Z+3, r26	; 0x03
    ded4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    ded8:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <mmc_init_flag>
    dedc:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <mmc_init_flag+0x1>
    dee0:	89 2b       	or	r24, r25
        mmc_install_timer();
    dee2:	09 f4       	brne	.+2      	; 0xdee6 <mmc_init+0x44>

	if(!mmc_ins_status())
    dee4:	2b df       	rcall	.-426    	; 0xdd3c <mmc_install_timer>
    dee6:	ac df       	rcall	.-168    	; 0xde40 <mmc_ins_status>
    dee8:	89 2b       	or	r24, r25
    deea:	61 f4       	brne	.+24     	; 0xdf04 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    deec:	8a ee       	ldi	r24, 0xEA	; 234
    deee:	97 e0       	ldi	r25, 0x07	; 7
    def0:	a0 e0       	ldi	r26, 0x00	; 0
    def2:	ed b7       	in	r30, 0x3d	; 61
    def4:	fe b7       	in	r31, 0x3e	; 62
    def6:	81 83       	std	Z+1, r24	; 0x01
    def8:	92 83       	std	Z+2, r25	; 0x02
    defa:	a3 83       	std	Z+3, r26	; 0x03
    defc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		return(RES_NOTRDY);	
    df00:	83 e0       	ldi	r24, 0x03	; 3
    df02:	9a c0       	rjmp	.+308    	; 0xe038 <mmc_init+0x196>
	}


    if( verbose)
    df04:	e1 14       	cp	r14, r1
    df06:	f1 04       	cpc	r15, r1
    df08:	11 f1       	breq	.+68     	; 0xdf4e <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    df0a:	87 ed       	ldi	r24, 0xD7	; 215
    df0c:	97 e0       	ldi	r25, 0x07	; 7
    df0e:	a0 e0       	ldi	r26, 0x00	; 0
    df10:	ed b7       	in	r30, 0x3d	; 61
    df12:	fe b7       	in	r31, 0x3e	; 62
    df14:	81 83       	std	Z+1, r24	; 0x01
    df16:	92 83       	std	Z+2, r25	; 0x02
    df18:	a3 83       	std	Z+3, r26	; 0x03
    df1a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    df1e:	8b ec       	ldi	r24, 0xCB	; 203
    df20:	97 e0       	ldi	r25, 0x07	; 7
    df22:	a0 e0       	ldi	r26, 0x00	; 0
    df24:	ed b7       	in	r30, 0x3d	; 61
    df26:	fe b7       	in	r31, 0x3e	; 62
    df28:	81 83       	std	Z+1, r24	; 0x01
    df2a:	92 83       	std	Z+2, r25	; 0x02
    df2c:	a3 83       	std	Z+3, r26	; 0x03
    df2e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    df32:	85 eb       	ldi	r24, 0xB5	; 181
    df34:	91 e0       	ldi	r25, 0x01	; 1
    df36:	ed b7       	in	r30, 0x3d	; 61
    df38:	fe b7       	in	r31, 0x3e	; 62
    df3a:	95 83       	std	Z+5, r25	; 0x05
    df3c:	84 83       	std	Z+4, r24	; 0x04
    df3e:	8a eb       	ldi	r24, 0xBA	; 186
    df40:	97 e0       	ldi	r25, 0x07	; 7
    df42:	a0 e0       	ldi	r26, 0x00	; 0
    df44:	81 83       	std	Z+1, r24	; 0x01
    df46:	92 83       	std	Z+2, r25	; 0x02
    df48:	a3 83       	std	Z+3, r26	; 0x03
    df4a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    df4e:	80 e0       	ldi	r24, 0x00	; 0
    df50:	1d da       	rcall	.-3014   	; 0xd38c <disk_initialize>
    df52:	08 2f       	mov	r16, r24
    df54:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    df56:	01 15       	cp	r16, r1
    df58:	11 05       	cpc	r17, r1
        put_rc(rc);
    df5a:	19 f0       	breq	.+6      	; 0xdf62 <mmc_init+0xc0>
    df5c:	c8 01       	movw	r24, r16
    df5e:	f4 d0       	rcall	.+488    	; 0xe148 <put_rc>
    df60:	0e c0       	rjmp	.+28     	; 0xdf7e <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    df62:	40 e0       	ldi	r20, 0x00	; 0
    df64:	66 ea       	ldi	r22, 0xA6	; 166
    df66:	78 e0       	ldi	r23, 0x08	; 8
    df68:	80 e8       	ldi	r24, 0x80	; 128
    df6a:	9a e1       	ldi	r25, 0x1A	; 26
    df6c:	0e 94 9e 59 	call	0xb33c	; 0xb33c <f_mount>
    df70:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    df72:	89 2b       	or	r24, r25
    df74:	21 f4       	brne	.+8      	; 0xdf7e <mmc_init+0xdc>
    df76:	e1 14       	cp	r14, r1
    df78:	f1 04       	cpc	r15, r1
    df7a:	09 f4       	brne	.+2      	; 0xdf7e <mmc_init+0xdc>
        put_rc( rc );
    df7c:	4f c0       	rjmp	.+158    	; 0xe01c <mmc_init+0x17a>
    df7e:	c8 01       	movw	r24, r16
    df80:	e3 d0       	rcall	.+454    	; 0xe148 <put_rc>

    if (verbose )
    df82:	e1 14       	cp	r14, r1
    df84:	f1 04       	cpc	r15, r1
    df86:	09 f4       	brne	.+2      	; 0xdf8a <mmc_init+0xe8>
    df88:	49 c0       	rjmp	.+146    	; 0xe01c <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    df8a:	c7 5f       	subi	r28, 0xF7	; 247
    df8c:	de 4f       	sbci	r29, 0xFE	; 254
    df8e:	18 82       	st	Y, r1
    df90:	19 82       	std	Y+1, r1	; 0x01
    df92:	1a 82       	std	Y+2, r1	; 0x02
    df94:	1b 82       	std	Y+3, r1	; 0x03
    df96:	c9 50       	subi	r28, 0x09	; 9
    df98:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    df9a:	01 15       	cp	r16, r1
    df9c:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    df9e:	a1 f5       	brne	.+104    	; 0xe008 <mmc_init+0x166>
    dfa0:	ae 01       	movw	r20, r28
    dfa2:	47 5f       	subi	r20, 0xF7	; 247
    dfa4:	5e 4f       	sbci	r21, 0xFE	; 254
    dfa6:	63 e0       	ldi	r22, 0x03	; 3
    dfa8:	80 e0       	ldi	r24, 0x00	; 0
    dfaa:	16 da       	rcall	.-3028   	; 0xd3d8 <disk_ioctl>
            if( rc != RES_OK)
    dfac:	8c 01       	movw	r16, r24
    dfae:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dfb0:	61 f0       	breq	.+24     	; 0xdfca <mmc_init+0x128>
    dfb2:	ca d0       	rcall	.+404    	; 0xe148 <put_rc>
                printf("MMC Block Size - read failed\n");
    dfb4:	8c e9       	ldi	r24, 0x9C	; 156
    dfb6:	97 e0       	ldi	r25, 0x07	; 7
    dfb8:	a0 e0       	ldi	r26, 0x00	; 0
    dfba:	ed b7       	in	r30, 0x3d	; 61
    dfbc:	fe b7       	in	r31, 0x3e	; 62
    dfbe:	81 83       	std	Z+1, r24	; 0x01
    dfc0:	92 83       	std	Z+2, r25	; 0x02
    dfc2:	a3 83       	std	Z+3, r26	; 0x03
    dfc4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    dfc8:	1f c0       	rjmp	.+62     	; 0xe008 <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dfca:	c7 5f       	subi	r28, 0xF7	; 247
    dfcc:	de 4f       	sbci	r29, 0xFE	; 254
    dfce:	88 81       	ld	r24, Y
    dfd0:	99 81       	ldd	r25, Y+1	; 0x01
    dfd2:	aa 81       	ldd	r26, Y+2	; 0x02
    dfd4:	bb 81       	ldd	r27, Y+3	; 0x03
    dfd6:	c9 50       	subi	r28, 0x09	; 9
    dfd8:	d1 40       	sbci	r29, 0x01	; 1
    dfda:	ed b7       	in	r30, 0x3d	; 61
    dfdc:	fe b7       	in	r31, 0x3e	; 62
    dfde:	84 83       	std	Z+4, r24	; 0x04
    dfe0:	95 83       	std	Z+5, r25	; 0x05
    dfe2:	a6 83       	std	Z+6, r26	; 0x06
    dfe4:	b7 83       	std	Z+7, r27	; 0x07
    dfe6:	87 e8       	ldi	r24, 0x87	; 135
    dfe8:	97 e0       	ldi	r25, 0x07	; 7
    dfea:	a0 e0       	ldi	r26, 0x00	; 0
    dfec:	81 83       	std	Z+1, r24	; 0x01
    dfee:	92 83       	std	Z+2, r25	; 0x02
    dff0:	a3 83       	std	Z+3, r26	; 0x03
    dff2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    dff6:	66 ea       	ldi	r22, 0xA6	; 166
    dff8:	78 e0       	ldi	r23, 0x08	; 8
    dffa:	ce 01       	movw	r24, r28
    dffc:	08 96       	adiw	r24, 0x08	; 8
    dffe:	0e 94 73 31 	call	0x62e6	; 0x62e6 <strcpy>
                fatfs_status(buff);
    e002:	ce 01       	movw	r24, r28
    e004:	08 96       	adiw	r24, 0x08	; 8
    e006:	34 d1       	rcall	.+616    	; 0xe270 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    e008:	89 e7       	ldi	r24, 0x79	; 121
    e00a:	97 e0       	ldi	r25, 0x07	; 7
    e00c:	a0 e0       	ldi	r26, 0x00	; 0
    e00e:	ed b7       	in	r30, 0x3d	; 61
    e010:	fe b7       	in	r31, 0x3e	; 62
    e012:	81 83       	std	Z+1, r24	; 0x01
    e014:	92 83       	std	Z+2, r25	; 0x02
    e016:	a3 83       	std	Z+3, r26	; 0x03
    e018:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }
    mmc_init_flag = 1;
    e01c:	81 e0       	ldi	r24, 0x01	; 1
    e01e:	90 e0       	ldi	r25, 0x00	; 0
    e020:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <mmc_init_flag+0x1>
    e024:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <mmc_init_flag>

	if(rc != RES_OK)
    e028:	01 15       	cp	r16, r1
    e02a:	11 05       	cpc	r17, r1
    e02c:	21 f0       	breq	.+8      	; 0xe036 <mmc_init+0x194>
		set_error(1);
    e02e:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <set_error>
    e032:	c8 01       	movw	r24, r16
    e034:	02 c0       	rjmp	.+4      	; 0xe03a <mmc_init+0x198>
    e036:	80 e0       	ldi	r24, 0x00	; 0
    e038:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    e03a:	c4 5f       	subi	r28, 0xF4	; 244
    e03c:	de 4f       	sbci	r29, 0xFE	; 254
    e03e:	e6 e0       	ldi	r30, 0x06	; 6
    e040:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

0000e044 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e044:	80 e0       	ldi	r24, 0x00	; 0
    e046:	90 e0       	ldi	r25, 0x00	; 0
    e048:	08 95       	ret

0000e04a <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e04a:	0f 93       	push	r16
    e04c:	1f 93       	push	r17
    e04e:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e050:	46 81       	ldd	r20, Z+6	; 0x06
    e052:	57 81       	ldd	r21, Z+7	; 0x07
    e054:	05 2e       	mov	r0, r21
    e056:	00 0c       	add	r0, r0
    e058:	66 0b       	sbc	r22, r22
    e05a:	77 0b       	sbc	r23, r23
    e05c:	ba 01       	movw	r22, r20
    e05e:	55 27       	eor	r21, r21
    e060:	44 27       	eor	r20, r20
    e062:	84 81       	ldd	r24, Z+4	; 0x04
    e064:	95 81       	ldd	r25, Z+5	; 0x05
    e066:	09 2e       	mov	r0, r25
    e068:	00 0c       	add	r0, r0
    e06a:	aa 0b       	sbc	r26, r26
    e06c:	bb 0b       	sbc	r27, r27
    e06e:	2b e0       	ldi	r18, 0x0B	; 11
    e070:	88 0f       	add	r24, r24
    e072:	99 1f       	adc	r25, r25
    e074:	aa 1f       	adc	r26, r26
    e076:	bb 1f       	adc	r27, r27
    e078:	2a 95       	dec	r18
    e07a:	d1 f7       	brne	.-12     	; 0xe070 <tm_to_fat+0x26>
    e07c:	48 2b       	or	r20, r24
    e07e:	59 2b       	or	r21, r25
    e080:	6a 2b       	or	r22, r26
    e082:	7b 2b       	or	r23, r27
    e084:	82 81       	ldd	r24, Z+2	; 0x02
    e086:	93 81       	ldd	r25, Z+3	; 0x03
    e088:	09 2e       	mov	r0, r25
    e08a:	00 0c       	add	r0, r0
    e08c:	aa 0b       	sbc	r26, r26
    e08e:	bb 0b       	sbc	r27, r27
    e090:	35 e0       	ldi	r19, 0x05	; 5
    e092:	88 0f       	add	r24, r24
    e094:	99 1f       	adc	r25, r25
    e096:	aa 1f       	adc	r26, r26
    e098:	bb 1f       	adc	r27, r27
    e09a:	3a 95       	dec	r19
    e09c:	d1 f7       	brne	.-12     	; 0xe092 <tm_to_fat+0x48>
    e09e:	48 2b       	or	r20, r24
    e0a0:	59 2b       	or	r21, r25
    e0a2:	6a 2b       	or	r22, r26
    e0a4:	7b 2b       	or	r23, r27
    e0a6:	80 81       	ld	r24, Z
    e0a8:	91 81       	ldd	r25, Z+1	; 0x01
    e0aa:	09 2e       	mov	r0, r25
    e0ac:	00 0c       	add	r0, r0
    e0ae:	aa 0b       	sbc	r26, r26
    e0b0:	bb 0b       	sbc	r27, r27
    e0b2:	b6 95       	lsr	r27
    e0b4:	a7 95       	ror	r26
    e0b6:	97 95       	ror	r25
    e0b8:	87 95       	ror	r24
    e0ba:	84 2b       	or	r24, r20
    e0bc:	95 2b       	or	r25, r21
    e0be:	a6 2b       	or	r26, r22
    e0c0:	b7 2b       	or	r27, r23
    e0c2:	02 85       	ldd	r16, Z+10	; 0x0a
    e0c4:	13 85       	ldd	r17, Z+11	; 0x0b
    e0c6:	00 55       	subi	r16, 0x50	; 80
    e0c8:	11 09       	sbc	r17, r1
    e0ca:	01 2e       	mov	r0, r17
    e0cc:	00 0c       	add	r0, r0
    e0ce:	22 0b       	sbc	r18, r18
    e0d0:	33 0b       	sbc	r19, r19
    e0d2:	49 e1       	ldi	r20, 0x19	; 25
    e0d4:	00 0f       	add	r16, r16
    e0d6:	11 1f       	adc	r17, r17
    e0d8:	22 1f       	adc	r18, r18
    e0da:	33 1f       	adc	r19, r19
    e0dc:	4a 95       	dec	r20
    e0de:	d1 f7       	brne	.-12     	; 0xe0d4 <tm_to_fat+0x8a>
    e0e0:	ac 01       	movw	r20, r24
    e0e2:	bd 01       	movw	r22, r26
    e0e4:	40 2b       	or	r20, r16
    e0e6:	51 2b       	or	r21, r17
    e0e8:	62 2b       	or	r22, r18
    e0ea:	73 2b       	or	r23, r19
    e0ec:	80 85       	ldd	r24, Z+8	; 0x08
    e0ee:	91 85       	ldd	r25, Z+9	; 0x09
    e0f0:	09 2e       	mov	r0, r25
    e0f2:	00 0c       	add	r0, r0
    e0f4:	aa 0b       	sbc	r26, r26
    e0f6:	bb 0b       	sbc	r27, r27
    e0f8:	01 96       	adiw	r24, 0x01	; 1
    e0fa:	a1 1d       	adc	r26, r1
    e0fc:	b1 1d       	adc	r27, r1
    e0fe:	e5 e1       	ldi	r30, 0x15	; 21
    e100:	88 0f       	add	r24, r24
    e102:	99 1f       	adc	r25, r25
    e104:	aa 1f       	adc	r26, r26
    e106:	bb 1f       	adc	r27, r27
    e108:	ea 95       	dec	r30
    e10a:	d1 f7       	brne	.-12     	; 0xe100 <tm_to_fat+0xb6>
    e10c:	8a 01       	movw	r16, r20
    e10e:	9b 01       	movw	r18, r22
    e110:	08 2b       	or	r16, r24
    e112:	19 2b       	or	r17, r25
    e114:	2a 2b       	or	r18, r26
    e116:	3b 2b       	or	r19, r27
    e118:	c9 01       	movw	r24, r18
    e11a:	b8 01       	movw	r22, r16
}
    e11c:	1f 91       	pop	r17
    e11e:	0f 91       	pop	r16
    e120:	08 95       	ret

0000e122 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e122:	a4 e0       	ldi	r26, 0x04	; 4
    e124:	b0 e0       	ldi	r27, 0x00	; 0
    e126:	e7 e9       	ldi	r30, 0x97	; 151
    e128:	f0 e7       	ldi	r31, 0x70	; 112
    e12a:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e12e:	ce 01       	movw	r24, r28
    e130:	01 96       	adiw	r24, 0x01	; 1
    e132:	0e 94 34 38 	call	0x7068	; 0x7068 <time>
    return( tm_to_fat(localtime(&t)));
    e136:	ce 01       	movw	r24, r28
    e138:	01 96       	adiw	r24, 0x01	; 1
    e13a:	0e 94 cd 38 	call	0x719a	; 0x719a <localtime>
    e13e:	85 df       	rcall	.-246    	; 0xe04a <tm_to_fat>
}
    e140:	24 96       	adiw	r28, 0x04	; 4
    e142:	e2 e0       	ldi	r30, 0x02	; 2
    e144:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000e148 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e148:	00 d0       	rcall	.+0      	; 0xe14a <put_rc+0x2>
    e14a:	00 d0       	rcall	.+0      	; 0xe14c <put_rc+0x4>
    e14c:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e14e:	ed b7       	in	r30, 0x3d	; 61
    e150:	fe b7       	in	r31, 0x3e	; 62
    e152:	95 83       	std	Z+5, r25	; 0x05
    e154:	84 83       	std	Z+4, r24	; 0x04
    e156:	8c e9       	ldi	r24, 0x9C	; 156
    e158:	9a e0       	ldi	r25, 0x0A	; 10
    e15a:	a0 e0       	ldi	r26, 0x00	; 0
    e15c:	81 83       	std	Z+1, r24	; 0x01
    e15e:	92 83       	std	Z+2, r25	; 0x02
    e160:	a3 83       	std	Z+3, r26	; 0x03
    e162:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
}
    e166:	0f 90       	pop	r0
    e168:	0f 90       	pop	r0
    e16a:	0f 90       	pop	r0
    e16c:	0f 90       	pop	r0
    e16e:	0f 90       	pop	r0
    e170:	08 95       	ret

0000e172 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e172:	a4 e4       	ldi	r26, 0x44	; 68
    e174:	b1 e0       	ldi	r27, 0x01	; 1
    e176:	ef eb       	ldi	r30, 0xBF	; 191
    e178:	f0 e7       	ldi	r31, 0x70	; 112
    e17a:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__prologue_saves__+0x16>
    e17e:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e180:	bc 01       	movw	r22, r24
    e182:	ce 01       	movw	r24, r28
    e184:	89 5e       	subi	r24, 0xE9	; 233
    e186:	9e 4f       	sbci	r25, 0xFE	; 254
    e188:	0e 94 59 63 	call	0xc6b2	; 0xc6b2 <f_opendir>
    if (fr == FR_OK)
    e18c:	00 97       	sbiw	r24, 0x00	; 0
    e18e:	09 f0       	breq	.+2      	; 0xe192 <fatfs_scan_files+0x20>
    e190:	5b c0       	rjmp	.+182    	; 0xe248 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e192:	8f e2       	ldi	r24, 0x2F	; 47
    e194:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e196:	be 01       	movw	r22, r28
    e198:	6f 5f       	subi	r22, 0xFF	; 255
    e19a:	7f 4f       	sbci	r23, 0xFF	; 255
    e19c:	ce 01       	movw	r24, r28
    e19e:	89 5e       	subi	r24, 0xE9	; 233
    e1a0:	9e 4f       	sbci	r25, 0xFE	; 254
    e1a2:	0e 94 df 63 	call	0xc7be	; 0xc7be <f_readdir>
    e1a6:	00 97       	sbiw	r24, 0x00	; 0
    e1a8:	09 f0       	breq	.+2      	; 0xe1ac <fatfs_scan_files+0x3a>
    e1aa:	4e c0       	rjmp	.+156    	; 0xe248 <fatfs_scan_files+0xd6>
    e1ac:	2f 89       	ldd	r18, Y+23	; 0x17
    e1ae:	22 23       	and	r18, r18
    e1b0:	09 f4       	brne	.+2      	; 0xe1b4 <fatfs_scan_files+0x42>
    e1b2:	4a c0       	rjmp	.+148    	; 0xe248 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e1b4:	89 85       	ldd	r24, Y+9	; 0x09
    e1b6:	84 ff       	sbrs	r24, 4
    e1b8:	25 c0       	rjmp	.+74     	; 0xe204 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e1ba:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e1be:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e1c2:	01 96       	adiw	r24, 0x01	; 1
    e1c4:	90 93 ba 1c 	sts	0x1CBA, r25	; 0x801cba <AccDirs+0x1>
    e1c8:	80 93 b9 1c 	sts	0x1CB9, r24	; 0x801cb9 <AccDirs>
                i = strlen(path);
    e1cc:	f8 01       	movw	r30, r16
    e1ce:	01 90       	ld	r0, Z+
    e1d0:	00 20       	and	r0, r0
    e1d2:	e9 f7       	brne	.-6      	; 0xe1ce <fatfs_scan_files+0x5c>
    e1d4:	31 97       	sbiw	r30, 0x01	; 1
    e1d6:	e0 1b       	sub	r30, r16
    e1d8:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e1da:	78 01       	movw	r14, r16
    e1dc:	ee 0e       	add	r14, r30
    e1de:	ff 1e       	adc	r15, r31
    e1e0:	d7 01       	movw	r26, r14
    e1e2:	dc 92       	st	X, r13
    e1e4:	cf 01       	movw	r24, r30
    e1e6:	01 96       	adiw	r24, 0x01	; 1
    e1e8:	be 01       	movw	r22, r28
    e1ea:	69 5e       	subi	r22, 0xE9	; 233
    e1ec:	7f 4f       	sbci	r23, 0xFF	; 255
    e1ee:	80 0f       	add	r24, r16
    e1f0:	91 1f       	adc	r25, r17
    e1f2:	0e 94 73 31 	call	0x62e6	; 0x62e6 <strcpy>
                fr = fatfs_scan_files(path);
    e1f6:	c8 01       	movw	r24, r16
    e1f8:	bc df       	rcall	.-136    	; 0xe172 <fatfs_scan_files>
                path[i] = 0;
    e1fa:	f7 01       	movw	r30, r14
    e1fc:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e1fe:	00 97       	sbiw	r24, 0x00	; 0
    e200:	51 f2       	breq	.-108    	; 0xe196 <fatfs_scan_files+0x24>
    e202:	22 c0       	rjmp	.+68     	; 0xe248 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e204:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e208:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e20c:	01 96       	adiw	r24, 0x01	; 1
    e20e:	90 93 bc 1c 	sts	0x1CBC, r25	; 0x801cbc <AccFiles+0x1>
    e212:	80 93 bb 1c 	sts	0x1CBB, r24	; 0x801cbb <AccFiles>
                AccSize += info.fsize;
    e216:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <AccSize>
    e21a:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e21e:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e222:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e226:	89 81       	ldd	r24, Y+1	; 0x01
    e228:	9a 81       	ldd	r25, Y+2	; 0x02
    e22a:	ab 81       	ldd	r26, Y+3	; 0x03
    e22c:	bc 81       	ldd	r27, Y+4	; 0x04
    e22e:	84 0f       	add	r24, r20
    e230:	95 1f       	adc	r25, r21
    e232:	a6 1f       	adc	r26, r22
    e234:	b7 1f       	adc	r27, r23
    e236:	80 93 b5 1c 	sts	0x1CB5, r24	; 0x801cb5 <AccSize>
    e23a:	90 93 b6 1c 	sts	0x1CB6, r25	; 0x801cb6 <AccSize+0x1>
    e23e:	a0 93 b7 1c 	sts	0x1CB7, r26	; 0x801cb7 <AccSize+0x2>
    e242:	b0 93 b8 1c 	sts	0x1CB8, r27	; 0x801cb8 <AccSize+0x3>
    e246:	a7 cf       	rjmp	.-178    	; 0xe196 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e248:	cc 5b       	subi	r28, 0xBC	; 188
    e24a:	de 4f       	sbci	r29, 0xFE	; 254
    e24c:	e7 e0       	ldi	r30, 0x07	; 7
    e24e:	0c 94 3d e7 	jmp	0x1ce7a	; 0x1ce7a <__epilogue_restores__+0x16>

0000e252 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e252:	01 97       	sbiw	r24, 0x01	; 1
    e254:	84 30       	cpi	r24, 0x04	; 4
    e256:	91 05       	cpc	r25, r1
    e258:	40 f4       	brcc	.+16     	; 0xe26a <fatfs_fstype+0x18>
    e25a:	88 0f       	add	r24, r24
    e25c:	99 1f       	adc	r25, r25
    e25e:	fc 01       	movw	r30, r24
    e260:	e6 53       	subi	r30, 0x36	; 54
    e262:	f7 4f       	sbci	r31, 0xF7	; 247
    e264:	80 81       	ld	r24, Z
    e266:	91 81       	ldd	r25, Z+1	; 0x01
    e268:	08 95       	ret
    char *ptr;
    switch(type)
    e26a:	88 ea       	ldi	r24, 0xA8	; 168
    e26c:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e26e:	08 95       	ret

0000e270 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *ptr)
{
    e270:	a7 e3       	ldi	r26, 0x37	; 55
    e272:	b0 e0       	ldi	r27, 0x00	; 0
    e274:	ee e3       	ldi	r30, 0x3E	; 62
    e276:	f1 e7       	ldi	r31, 0x71	; 113
    e278:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    e27c:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e27e:	fc 01       	movw	r30, r24
    e280:	21 91       	ld	r18, Z+
    e282:	cf 01       	movw	r24, r30
    e284:	20 32       	cpi	r18, 0x20	; 32
    e286:	d1 f3       	breq	.-12     	; 0xe27c <fatfs_status+0xc>
    e288:	29 30       	cpi	r18, 0x09	; 9
    e28a:	c1 f3       	breq	.-16     	; 0xe27c <fatfs_status+0xc>
        ++ptr;

    printf("fatfs status:%s\n",ptr);
    e28c:	ed b7       	in	r30, 0x3d	; 61
    e28e:	fe b7       	in	r31, 0x3e	; 62
    e290:	e4 82       	std	Z+4, r14	; 0x04
    e292:	f5 82       	std	Z+5, r15	; 0x05
    e294:	8b e8       	ldi	r24, 0x8B	; 139
    e296:	9a e0       	ldi	r25, 0x0A	; 10
    e298:	a0 e0       	ldi	r26, 0x00	; 0
    e29a:	81 83       	std	Z+1, r24	; 0x01
    e29c:	92 83       	std	Z+2, r25	; 0x02
    e29e:	a3 83       	std	Z+3, r26	; 0x03
    e2a0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e2a4:	ae 01       	movw	r20, r28
    e2a6:	4a 5c       	subi	r20, 0xCA	; 202
    e2a8:	5f 4f       	sbci	r21, 0xFF	; 255
    e2aa:	be 01       	movw	r22, r28
    e2ac:	6e 5c       	subi	r22, 0xCE	; 206
    e2ae:	7f 4f       	sbci	r23, 0xFF	; 255
    e2b0:	c7 01       	movw	r24, r14
    e2b2:	0e 94 61 64 	call	0xc8c2	; 0xc8c2 <f_getfree>
    if (res)
    e2b6:	89 2b       	or	r24, r25
    e2b8:	19 f0       	breq	.+6      	; 0xe2c0 <fatfs_status+0x50>
    {
        printf("fatfs_status f_getfree failed\n");
    e2ba:	8c e6       	ldi	r24, 0x6C	; 108
    e2bc:	9a e0       	ldi	r25, 0x0A	; 10
    e2be:	c0 c0       	rjmp	.+384    	; 0xe440 <fatfs_status+0x1d0>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e2c0:	ee a9       	ldd	r30, Y+54	; 0x36
    e2c2:	ff a9       	ldd	r31, Y+55	; 0x37
    e2c4:	80 81       	ld	r24, Z
    e2c6:	90 e0       	ldi	r25, 0x00	; 0
    e2c8:	c4 df       	rcall	.-120    	; 0xe252 <fatfs_fstype>
    e2ca:	ed b7       	in	r30, 0x3d	; 61
    e2cc:	fe b7       	in	r31, 0x3e	; 62
    e2ce:	95 83       	std	Z+5, r25	; 0x05
    e2d0:	84 83       	std	Z+4, r24	; 0x04
    e2d2:	8e e4       	ldi	r24, 0x4E	; 78
    e2d4:	9a e0       	ldi	r25, 0x0A	; 10
    e2d6:	a0 e0       	ldi	r26, 0x00	; 0
    e2d8:	81 83       	std	Z+1, r24	; 0x01
    e2da:	92 83       	std	Z+2, r25	; 0x02
    e2dc:	a3 83       	std	Z+3, r26	; 0x03
    e2de:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e2e2:	ee a9       	ldd	r30, Y+54	; 0x36
    e2e4:	ff a9       	ldd	r31, Y+55	; 0x37
    e2e6:	81 85       	ldd	r24, Z+9	; 0x09
    e2e8:	92 85       	ldd	r25, Z+10	; 0x0a
    e2ea:	a0 e0       	ldi	r26, 0x00	; 0
    e2ec:	b0 e0       	ldi	r27, 0x00	; 0
    e2ee:	39 e0       	ldi	r19, 0x09	; 9
    e2f0:	88 0f       	add	r24, r24
    e2f2:	99 1f       	adc	r25, r25
    e2f4:	aa 1f       	adc	r26, r26
    e2f6:	bb 1f       	adc	r27, r27
    e2f8:	3a 95       	dec	r19
    e2fa:	d1 f7       	brne	.-12     	; 0xe2f0 <fatfs_status+0x80>
    e2fc:	ed b7       	in	r30, 0x3d	; 61
    e2fe:	fe b7       	in	r31, 0x3e	; 62
    e300:	84 83       	std	Z+4, r24	; 0x04
    e302:	95 83       	std	Z+5, r25	; 0x05
    e304:	a6 83       	std	Z+6, r26	; 0x06
    e306:	b7 83       	std	Z+7, r27	; 0x07
    e308:	8f e2       	ldi	r24, 0x2F	; 47
    e30a:	9a e0       	ldi	r25, 0x0A	; 10
    e30c:	a0 e0       	ldi	r26, 0x00	; 0
    e30e:	81 83       	std	Z+1, r24	; 0x01
    e310:	92 83       	std	Z+2, r25	; 0x02
    e312:	a3 83       	std	Z+3, r26	; 0x03
    e314:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e318:	ee a9       	ldd	r30, Y+54	; 0x36
    e31a:	ff a9       	ldd	r31, Y+55	; 0x37
    e31c:	82 81       	ldd	r24, Z+2	; 0x02
    e31e:	90 e0       	ldi	r25, 0x00	; 0
    e320:	ed b7       	in	r30, 0x3d	; 61
    e322:	fe b7       	in	r31, 0x3e	; 62
    e324:	95 83       	std	Z+5, r25	; 0x05
    e326:	84 83       	std	Z+4, r24	; 0x04
    e328:	81 e1       	ldi	r24, 0x11	; 17
    e32a:	9a e0       	ldi	r25, 0x0A	; 10
    e32c:	a0 e0       	ldi	r26, 0x00	; 0
    e32e:	81 83       	std	Z+1, r24	; 0x01
    e330:	92 83       	std	Z+2, r25	; 0x02
    e332:	a3 83       	std	Z+3, r26	; 0x03
    e334:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e338:	ee a9       	ldd	r30, Y+54	; 0x36
    e33a:	ff a9       	ldd	r31, Y+55	; 0x37
    e33c:	87 81       	ldd	r24, Z+7	; 0x07
    e33e:	90 85       	ldd	r25, Z+8	; 0x08
    e340:	ed b7       	in	r30, 0x3d	; 61
    e342:	fe b7       	in	r31, 0x3e	; 62
    e344:	95 83       	std	Z+5, r25	; 0x05
    e346:	84 83       	std	Z+4, r24	; 0x04
    e348:	83 ef       	ldi	r24, 0xF3	; 243
    e34a:	99 e0       	ldi	r25, 0x09	; 9
    e34c:	a0 e0       	ldi	r26, 0x00	; 0
    e34e:	81 83       	std	Z+1, r24	; 0x01
    e350:	92 83       	std	Z+2, r25	; 0x02
    e352:	a3 83       	std	Z+3, r26	; 0x03
    e354:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e358:	ee a9       	ldd	r30, Y+54	; 0x36
    e35a:	ff a9       	ldd	r31, Y+55	; 0x37
    e35c:	85 8d       	ldd	r24, Z+29	; 0x1d
    e35e:	96 8d       	ldd	r25, Z+30	; 0x1e
    e360:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e362:	b0 a1       	ldd	r27, Z+32	; 0x20
    e364:	ed b7       	in	r30, 0x3d	; 61
    e366:	fe b7       	in	r31, 0x3e	; 62
    e368:	84 83       	std	Z+4, r24	; 0x04
    e36a:	95 83       	std	Z+5, r25	; 0x05
    e36c:	a6 83       	std	Z+6, r26	; 0x06
    e36e:	b7 83       	std	Z+7, r27	; 0x07
    e370:	84 ed       	ldi	r24, 0xD4	; 212
    e372:	99 e0       	ldi	r25, 0x09	; 9
    e374:	a0 e0       	ldi	r26, 0x00	; 0
    e376:	81 83       	std	Z+1, r24	; 0x01
    e378:	92 83       	std	Z+2, r25	; 0x02
    e37a:	a3 83       	std	Z+3, r26	; 0x03
    e37c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e380:	ee a9       	ldd	r30, Y+54	; 0x36
    e382:	ff a9       	ldd	r31, Y+55	; 0x37
    e384:	81 8d       	ldd	r24, Z+25	; 0x19
    e386:	92 8d       	ldd	r25, Z+26	; 0x1a
    e388:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e38a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e38c:	02 97       	sbiw	r24, 0x02	; 2
    e38e:	a1 09       	sbc	r26, r1
    e390:	b1 09       	sbc	r27, r1
    e392:	ed b7       	in	r30, 0x3d	; 61
    e394:	fe b7       	in	r31, 0x3e	; 62
    e396:	84 83       	std	Z+4, r24	; 0x04
    e398:	95 83       	std	Z+5, r25	; 0x05
    e39a:	a6 83       	std	Z+6, r26	; 0x06
    e39c:	b7 83       	std	Z+7, r27	; 0x07
    e39e:	85 eb       	ldi	r24, 0xB5	; 181
    e3a0:	99 e0       	ldi	r25, 0x09	; 9
    e3a2:	a0 e0       	ldi	r26, 0x00	; 0
    e3a4:	81 83       	std	Z+1, r24	; 0x01
    e3a6:	92 83       	std	Z+2, r25	; 0x02
    e3a8:	a3 83       	std	Z+3, r26	; 0x03
    e3aa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e3ae:	ee a9       	ldd	r30, Y+54	; 0x36
    e3b0:	ff a9       	ldd	r31, Y+55	; 0x37
    e3b2:	85 a1       	ldd	r24, Z+37	; 0x25
    e3b4:	96 a1       	ldd	r25, Z+38	; 0x26
    e3b6:	a7 a1       	ldd	r26, Z+39	; 0x27
    e3b8:	b0 a5       	ldd	r27, Z+40	; 0x28
    e3ba:	ed b7       	in	r30, 0x3d	; 61
    e3bc:	fe b7       	in	r31, 0x3e	; 62
    e3be:	84 83       	std	Z+4, r24	; 0x04
    e3c0:	95 83       	std	Z+5, r25	; 0x05
    e3c2:	a6 83       	std	Z+6, r26	; 0x06
    e3c4:	b7 83       	std	Z+7, r27	; 0x07
    e3c6:	86 e9       	ldi	r24, 0x96	; 150
    e3c8:	99 e0       	ldi	r25, 0x09	; 9
    e3ca:	a0 e0       	ldi	r26, 0x00	; 0
    e3cc:	81 83       	std	Z+1, r24	; 0x01
    e3ce:	92 83       	std	Z+2, r25	; 0x02
    e3d0:	a3 83       	std	Z+3, r26	; 0x03
    e3d2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e3d6:	ee a9       	ldd	r30, Y+54	; 0x36
    e3d8:	ff a9       	ldd	r31, Y+55	; 0x37
    e3da:	81 a5       	ldd	r24, Z+41	; 0x29
    e3dc:	92 a5       	ldd	r25, Z+42	; 0x2a
    e3de:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e3e0:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e3e2:	ed b7       	in	r30, 0x3d	; 61
    e3e4:	fe b7       	in	r31, 0x3e	; 62
    e3e6:	84 83       	std	Z+4, r24	; 0x04
    e3e8:	95 83       	std	Z+5, r25	; 0x05
    e3ea:	a6 83       	std	Z+6, r26	; 0x06
    e3ec:	b7 83       	std	Z+7, r27	; 0x07
    e3ee:	87 e7       	ldi	r24, 0x77	; 119
    e3f0:	99 e0       	ldi	r25, 0x09	; 9
    e3f2:	a0 e0       	ldi	r26, 0x00	; 0
    e3f4:	81 83       	std	Z+1, r24	; 0x01
    e3f6:	92 83       	std	Z+2, r25	; 0x02
    e3f8:	a3 83       	std	Z+3, r26	; 0x03
    e3fa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e3fe:	ee a9       	ldd	r30, Y+54	; 0x36
    e400:	ff a9       	ldd	r31, Y+55	; 0x37
    e402:	85 a5       	ldd	r24, Z+45	; 0x2d
    e404:	96 a5       	ldd	r25, Z+46	; 0x2e
    e406:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e408:	b0 a9       	ldd	r27, Z+48	; 0x30
    e40a:	ed b7       	in	r30, 0x3d	; 61
    e40c:	fe b7       	in	r31, 0x3e	; 62
    e40e:	84 83       	std	Z+4, r24	; 0x04
    e410:	95 83       	std	Z+5, r25	; 0x05
    e412:	a6 83       	std	Z+6, r26	; 0x06
    e414:	b7 83       	std	Z+7, r27	; 0x07
    e416:	88 e5       	ldi	r24, 0x58	; 88
    e418:	99 e0       	ldi	r25, 0x09	; 9
    e41a:	a0 e0       	ldi	r26, 0x00	; 0
    e41c:	81 83       	std	Z+1, r24	; 0x01
    e41e:	92 83       	std	Z+2, r25	; 0x02
    e420:	a3 83       	std	Z+3, r26	; 0x03
    e422:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e426:	ae 01       	movw	r20, r28
    e428:	42 5d       	subi	r20, 0xD2	; 210
    e42a:	5f 4f       	sbci	r21, 0xFF	; 255
    e42c:	be 01       	movw	r22, r28
    e42e:	6c 5e       	subi	r22, 0xEC	; 236
    e430:	7f 4f       	sbci	r23, 0xFF	; 255
    e432:	c7 01       	movw	r24, r14
    e434:	0e 94 93 68 	call	0xd126	; 0xd126 <f_getlabel>
    if (res)
    e438:	89 2b       	or	r24, r25
    e43a:	69 f0       	breq	.+26     	; 0xe456 <fatfs_status+0x1e6>
    {
        printf("fatfs_status f_getlabel failed\n");
    e43c:	88 e3       	ldi	r24, 0x38	; 56
    e43e:	99 e0       	ldi	r25, 0x09	; 9
    e440:	a0 e0       	ldi	r26, 0x00	; 0
    e442:	ed b7       	in	r30, 0x3d	; 61
    e444:	fe b7       	in	r31, 0x3e	; 62
    e446:	81 83       	std	Z+1, r24	; 0x01
    e448:	92 83       	std	Z+2, r25	; 0x02
    e44a:	a3 83       	std	Z+3, r26	; 0x03
    e44c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        return(0);
    e450:	80 e0       	ldi	r24, 0x00	; 0
    e452:	90 e0       	ldi	r25, 0x00	; 0
    e454:	95 c0       	rjmp	.+298    	; 0xe580 <fatfs_status+0x310>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e456:	8c 89       	ldd	r24, Y+20	; 0x14
    e458:	81 11       	cpse	r24, r1
    e45a:	03 c0       	rjmp	.+6      	; 0xe462 <fatfs_status+0x1f2>
    e45c:	80 eb       	ldi	r24, 0xB0	; 176
    e45e:	98 e0       	ldi	r25, 0x08	; 8
    e460:	02 c0       	rjmp	.+4      	; 0xe466 <fatfs_status+0x1f6>
    e462:	ce 01       	movw	r24, r28
    e464:	44 96       	adiw	r24, 0x14	; 20
    e466:	ed b7       	in	r30, 0x3d	; 61
    e468:	fe b7       	in	r31, 0x3e	; 62
    e46a:	95 83       	std	Z+5, r25	; 0x05
    e46c:	84 83       	std	Z+4, r24	; 0x04
    e46e:	8a e1       	ldi	r24, 0x1A	; 26
    e470:	99 e0       	ldi	r25, 0x09	; 9
    e472:	a0 e0       	ldi	r26, 0x00	; 0
    e474:	81 83       	std	Z+1, r24	; 0x01
    e476:	92 83       	std	Z+2, r25	; 0x02
    e478:	a3 83       	std	Z+3, r26	; 0x03
    e47a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e47e:	8e a5       	ldd	r24, Y+46	; 0x2e
    e480:	9f a5       	ldd	r25, Y+47	; 0x2f
    e482:	a8 a9       	ldd	r26, Y+48	; 0x30
    e484:	b9 a9       	ldd	r27, Y+49	; 0x31
    e486:	ed b7       	in	r30, 0x3d	; 61
    e488:	fe b7       	in	r31, 0x3e	; 62
    e48a:	97 83       	std	Z+7, r25	; 0x07
    e48c:	86 83       	std	Z+6, r24	; 0x06
    e48e:	b5 83       	std	Z+5, r27	; 0x05
    e490:	a4 83       	std	Z+4, r26	; 0x04
    e492:	85 ef       	ldi	r24, 0xF5	; 245
    e494:	98 e0       	ldi	r25, 0x08	; 8
    e496:	a0 e0       	ldi	r26, 0x00	; 0
    e498:	81 83       	std	Z+1, r24	; 0x01
    e49a:	92 83       	std	Z+2, r25	; 0x02
    e49c:	a3 83       	std	Z+3, r26	; 0x03
    e49e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e4a2:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <AccDirs+0x1>
    e4a6:	10 92 b9 1c 	sts	0x1CB9, r1	; 0x801cb9 <AccDirs>
    e4aa:	10 92 bc 1c 	sts	0x1CBC, r1	; 0x801cbc <AccFiles+0x1>
    e4ae:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <AccFiles>
    e4b2:	10 92 b5 1c 	sts	0x1CB5, r1	; 0x801cb5 <AccSize>
    e4b6:	10 92 b6 1c 	sts	0x1CB6, r1	; 0x801cb6 <AccSize+0x1>
    e4ba:	10 92 b7 1c 	sts	0x1CB7, r1	; 0x801cb7 <AccSize+0x2>
    e4be:	10 92 b8 1c 	sts	0x1CB8, r1	; 0x801cb8 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e4c2:	c7 01       	movw	r24, r14
    e4c4:	56 de       	rcall	.-852    	; 0xe172 <fatfs_scan_files>
    if (res)
    e4c6:	89 2b       	or	r24, r25
    e4c8:	19 f0       	breq	.+6      	; 0xe4d0 <fatfs_status+0x260>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e4ca:	8f ec       	ldi	r24, 0xCF	; 207
    e4cc:	98 e0       	ldi	r25, 0x08	; 8
    e4ce:	b8 cf       	rjmp	.-144    	; 0xe440 <fatfs_status+0x1d0>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e4d0:	0e a9       	ldd	r16, Y+54	; 0x36
    e4d2:	1f a9       	ldd	r17, Y+55	; 0x37
    e4d4:	f8 01       	movw	r30, r16
    e4d6:	c1 84       	ldd	r12, Z+9	; 0x09
    e4d8:	d2 84       	ldd	r13, Z+10	; 0x0a
    e4da:	e1 2c       	mov	r14, r1
    e4dc:	f1 2c       	mov	r15, r1
    e4de:	6a a9       	ldd	r22, Y+50	; 0x32
    e4e0:	7b a9       	ldd	r23, Y+51	; 0x33
    e4e2:	8c a9       	ldd	r24, Y+52	; 0x34
    e4e4:	9d a9       	ldd	r25, Y+53	; 0x35
    e4e6:	a7 01       	movw	r20, r14
    e4e8:	96 01       	movw	r18, r12
    e4ea:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__mulsi3>
    e4ee:	22 e0       	ldi	r18, 0x02	; 2
    e4f0:	30 e0       	ldi	r19, 0x00	; 0
    e4f2:	40 e0       	ldi	r20, 0x00	; 0
    e4f4:	50 e0       	ldi	r21, 0x00	; 0
    e4f6:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
    e4fa:	ed b7       	in	r30, 0x3d	; 61
    e4fc:	fe b7       	in	r31, 0x3e	; 62
    e4fe:	20 8b       	std	Z+16, r18	; 0x10
    e500:	31 8b       	std	Z+17, r19	; 0x11
    e502:	42 8b       	std	Z+18, r20	; 0x12
    e504:	53 8b       	std	Z+19, r21	; 0x13
    e506:	f8 01       	movw	r30, r16
    e508:	81 8d       	ldd	r24, Z+25	; 0x19
    e50a:	92 8d       	ldd	r25, Z+26	; 0x1a
    e50c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e50e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e510:	9c 01       	movw	r18, r24
    e512:	ad 01       	movw	r20, r26
    e514:	22 50       	subi	r18, 0x02	; 2
    e516:	31 09       	sbc	r19, r1
    e518:	41 09       	sbc	r20, r1
    e51a:	51 09       	sbc	r21, r1
    e51c:	c7 01       	movw	r24, r14
    e51e:	b6 01       	movw	r22, r12
    e520:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__mulsi3>
    e524:	dc 01       	movw	r26, r24
    e526:	cb 01       	movw	r24, r22
    e528:	b6 95       	lsr	r27
    e52a:	a7 95       	ror	r26
    e52c:	97 95       	ror	r25
    e52e:	87 95       	ror	r24
    e530:	ed b7       	in	r30, 0x3d	; 61
    e532:	fe b7       	in	r31, 0x3e	; 62
    e534:	84 87       	std	Z+12, r24	; 0x0c
    e536:	95 87       	std	Z+13, r25	; 0x0d
    e538:	a6 87       	std	Z+14, r26	; 0x0e
    e53a:	b7 87       	std	Z+15, r27	; 0x0f
    e53c:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e540:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e544:	93 87       	std	Z+11, r25	; 0x0b
    e546:	82 87       	std	Z+10, r24	; 0x0a
    e548:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <AccSize>
    e54c:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e550:	a0 91 b7 1c 	lds	r26, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e554:	b0 91 b8 1c 	lds	r27, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e558:	86 83       	std	Z+6, r24	; 0x06
    e55a:	97 83       	std	Z+7, r25	; 0x07
    e55c:	a0 87       	std	Z+8, r26	; 0x08
    e55e:	b1 87       	std	Z+9, r27	; 0x09
    e560:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e564:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e568:	95 83       	std	Z+5, r25	; 0x05
    e56a:	84 83       	std	Z+4, r24	; 0x04
    e56c:	82 e8       	ldi	r24, 0x82	; 130
    e56e:	98 e0       	ldi	r25, 0x08	; 8
    e570:	a0 e0       	ldi	r26, 0x00	; 0
    e572:	81 83       	std	Z+1, r24	; 0x01
    e574:	92 83       	std	Z+2, r25	; 0x02
    e576:	a3 83       	std	Z+3, r26	; 0x03
    e578:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e57c:	81 e0       	ldi	r24, 0x01	; 1
    e57e:	90 e0       	ldi	r25, 0x00	; 0
}
    e580:	e7 96       	adiw	r28, 0x37	; 55
    e582:	e8 e0       	ldi	r30, 0x08	; 8
    e584:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000e588 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e588:	ab e1       	ldi	r26, 0x1B	; 27
    e58a:	b0 e0       	ldi	r27, 0x00	; 0
    e58c:	ea ec       	ldi	r30, 0xCA	; 202
    e58e:	f2 e7       	ldi	r31, 0x72	; 114
    e590:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    e594:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e596:	fc 01       	movw	r30, r24
    e598:	86 89       	ldd	r24, Z+22	; 0x16
    e59a:	81 11       	cpse	r24, r1
    e59c:	03 c0       	rjmp	.+6      	; 0xe5a4 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e59e:	87 e6       	ldi	r24, 0x67	; 103
    e5a0:	98 e0       	ldi	r25, 0x08	; 8
    e5a2:	69 c0       	rjmp	.+210    	; 0xe676 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e5a4:	fd 01       	movw	r30, r26
    e5a6:	80 85       	ldd	r24, Z+8	; 0x08
    e5a8:	84 fd       	sbrc	r24, 4
    e5aa:	02 c0       	rjmp	.+4      	; 0xe5b0 <fatfs_filinfo_list+0x28>
    e5ac:	9d e2       	ldi	r25, 0x2D	; 45
    e5ae:	01 c0       	rjmp	.+2      	; 0xe5b2 <fatfs_filinfo_list+0x2a>
    e5b0:	94 e4       	ldi	r25, 0x44	; 68
    e5b2:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e5b4:	80 fd       	sbrc	r24, 0
    e5b6:	02 c0       	rjmp	.+4      	; 0xe5bc <fatfs_filinfo_list+0x34>
    e5b8:	9d e2       	ldi	r25, 0x2D	; 45
    e5ba:	01 c0       	rjmp	.+2      	; 0xe5be <fatfs_filinfo_list+0x36>
    e5bc:	92 e5       	ldi	r25, 0x52	; 82
    e5be:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e5c0:	81 fd       	sbrc	r24, 1
    e5c2:	02 c0       	rjmp	.+4      	; 0xe5c8 <fatfs_filinfo_list+0x40>
    e5c4:	9d e2       	ldi	r25, 0x2D	; 45
    e5c6:	01 c0       	rjmp	.+2      	; 0xe5ca <fatfs_filinfo_list+0x42>
    e5c8:	98 e4       	ldi	r25, 0x48	; 72
    e5ca:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e5cc:	82 fd       	sbrc	r24, 2
    e5ce:	02 c0       	rjmp	.+4      	; 0xe5d4 <fatfs_filinfo_list+0x4c>
    e5d0:	9d e2       	ldi	r25, 0x2D	; 45
    e5d2:	01 c0       	rjmp	.+2      	; 0xe5d6 <fatfs_filinfo_list+0x4e>
    e5d4:	93 e5       	ldi	r25, 0x53	; 83
    e5d6:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e5d8:	85 fd       	sbrc	r24, 5
    e5da:	02 c0       	rjmp	.+4      	; 0xe5e0 <fatfs_filinfo_list+0x58>
    e5dc:	8d e2       	ldi	r24, 0x2D	; 45
    e5de:	01 c0       	rjmp	.+2      	; 0xe5e2 <fatfs_filinfo_list+0x5a>
    e5e0:	81 e4       	ldi	r24, 0x41	; 65
    e5e2:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e5e4:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e5e6:	fd 01       	movw	r30, r26
    e5e8:	24 81       	ldd	r18, Z+4	; 0x04
    e5ea:	35 81       	ldd	r19, Z+5	; 0x05
    e5ec:	46 81       	ldd	r20, Z+6	; 0x06
    e5ee:	57 81       	ldd	r21, Z+7	; 0x07
    e5f0:	cd 01       	movw	r24, r26
    e5f2:	46 96       	adiw	r24, 0x16	; 22
    e5f4:	ed b7       	in	r30, 0x3d	; 61
    e5f6:	fe b7       	in	r31, 0x3e	; 62
    e5f8:	95 8b       	std	Z+21, r25	; 0x15
    e5fa:	84 8b       	std	Z+20, r24	; 0x14
    e5fc:	8d 91       	ld	r24, X+
    e5fe:	9d 91       	ld	r25, X+
    e600:	0d 90       	ld	r0, X+
    e602:	bc 91       	ld	r27, X
    e604:	a0 2d       	mov	r26, r0
    e606:	80 8b       	std	Z+16, r24	; 0x10
    e608:	91 8b       	std	Z+17, r25	; 0x11
    e60a:	a2 8b       	std	Z+18, r26	; 0x12
    e60c:	b3 8b       	std	Z+19, r27	; 0x13
    e60e:	ca 01       	movw	r24, r20
    e610:	45 e0       	ldi	r20, 0x05	; 5
    e612:	96 95       	lsr	r25
    e614:	87 95       	ror	r24
    e616:	4a 95       	dec	r20
    e618:	e1 f7       	brne	.-8      	; 0xe612 <fatfs_filinfo_list+0x8a>
    e61a:	8f 73       	andi	r24, 0x3F	; 63
    e61c:	99 27       	eor	r25, r25
    e61e:	97 87       	std	Z+15, r25	; 0x0f
    e620:	86 87       	std	Z+14, r24	; 0x0e
    e622:	85 2f       	mov	r24, r21
    e624:	86 95       	lsr	r24
    e626:	86 95       	lsr	r24
    e628:	86 95       	lsr	r24
    e62a:	84 87       	std	Z+12, r24	; 0x0c
    e62c:	15 86       	std	Z+13, r1	; 0x0d
    e62e:	c9 01       	movw	r24, r18
    e630:	8f 71       	andi	r24, 0x1F	; 31
    e632:	99 27       	eor	r25, r25
    e634:	93 87       	std	Z+11, r25	; 0x0b
    e636:	82 87       	std	Z+10, r24	; 0x0a
    e638:	c9 01       	movw	r24, r18
    e63a:	55 e0       	ldi	r21, 0x05	; 5
    e63c:	96 95       	lsr	r25
    e63e:	87 95       	ror	r24
    e640:	5a 95       	dec	r21
    e642:	e1 f7       	brne	.-8      	; 0xe63c <fatfs_filinfo_list+0xb4>
    e644:	8f 70       	andi	r24, 0x0F	; 15
    e646:	99 27       	eor	r25, r25
    e648:	91 87       	std	Z+9, r25	; 0x09
    e64a:	80 87       	std	Z+8, r24	; 0x08
    e64c:	23 2f       	mov	r18, r19
    e64e:	33 27       	eor	r19, r19
    e650:	26 95       	lsr	r18
    e652:	24 54       	subi	r18, 0x44	; 68
    e654:	38 4f       	sbci	r19, 0xF8	; 248
    e656:	37 83       	std	Z+7, r19	; 0x07
    e658:	26 83       	std	Z+6, r18	; 0x06
    e65a:	ce 01       	movw	r24, r28
    e65c:	46 96       	adiw	r24, 0x16	; 22
    e65e:	95 83       	std	Z+5, r25	; 0x05
    e660:	84 83       	std	Z+4, r24	; 0x04
    e662:	85 e4       	ldi	r24, 0x45	; 69
    e664:	98 e0       	ldi	r25, 0x08	; 8
    e666:	a0 e0       	ldi	r26, 0x00	; 0
    e668:	81 83       	std	Z+1, r24	; 0x01
    e66a:	92 83       	std	Z+2, r25	; 0x02
    e66c:	a3 83       	std	Z+3, r26	; 0x03
    e66e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e672:	83 e4       	ldi	r24, 0x43	; 67
    e674:	98 e0       	ldi	r25, 0x08	; 8
    e676:	a0 e0       	ldi	r26, 0x00	; 0
    e678:	ed b7       	in	r30, 0x3d	; 61
    e67a:	fe b7       	in	r31, 0x3e	; 62
    e67c:	81 83       	std	Z+1, r24	; 0x01
    e67e:	92 83       	std	Z+2, r25	; 0x02
    e680:	a3 83       	std	Z+3, r26	; 0x03
    e682:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
}
    e686:	6b 96       	adiw	r28, 0x1b	; 27
    e688:	e2 e0       	ldi	r30, 0x02	; 2
    e68a:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000e68e <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e68e:	00 d0       	rcall	.+0      	; 0xe690 <fatfs_help+0x2>
    e690:	1f 92       	push	r1
    if(full)
    e692:	89 2b       	or	r24, r25
    e694:	19 f0       	breq	.+6      	; 0xe69c <fatfs_help+0xe>
    {
        printf(
    e696:	8d e2       	ldi	r24, 0x2D	; 45
    e698:	9b e0       	ldi	r25, 0x0B	; 11
    e69a:	02 c0       	rjmp	.+4      	; 0xe6a0 <fatfs_help+0x12>
            "\n"
            );
    }
	else
	{
		printf("fatfs help\n");
    e69c:	81 e2       	ldi	r24, 0x21	; 33
    e69e:	9b e0       	ldi	r25, 0x0B	; 11
    e6a0:	a0 e0       	ldi	r26, 0x00	; 0
    e6a2:	ed b7       	in	r30, 0x3d	; 61
    e6a4:	fe b7       	in	r31, 0x3e	; 62
    e6a6:	81 83       	std	Z+1, r24	; 0x01
    e6a8:	92 83       	std	Z+2, r25	; 0x02
    e6aa:	a3 83       	std	Z+3, r26	; 0x03
    e6ac:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	}

}
    e6b0:	0f 90       	pop	r0
    e6b2:	0f 90       	pop	r0
    e6b4:	0f 90       	pop	r0
    e6b6:	08 95       	ret

0000e6b8 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e6b8:	a6 e5       	ldi	r26, 0x56	; 86
    e6ba:	b2 e0       	ldi	r27, 0x02	; 2
    e6bc:	e2 e6       	ldi	r30, 0x62	; 98
    e6be:	f3 e7       	ldi	r31, 0x73	; 115
    e6c0:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e6c4:	8e 01       	movw	r16, r28
    e6c6:	0e 5d       	subi	r16, 0xDE	; 222
    e6c8:	1e 4f       	sbci	r17, 0xFE	; 254
    e6ca:	20 e0       	ldi	r18, 0x00	; 0
    e6cc:	31 e0       	ldi	r19, 0x01	; 1
    e6ce:	f8 01       	movw	r30, r16
    e6d0:	a9 01       	movw	r20, r18
    e6d2:	11 92       	st	Z+, r1
    e6d4:	41 50       	subi	r20, 0x01	; 1
    e6d6:	50 40       	sbci	r21, 0x00	; 0
    e6d8:	e1 f7       	brne	.-8      	; 0xe6d2 <fatfs_ls+0x1a>

    if(!name || !*name)
    e6da:	00 97       	sbiw	r24, 0x00	; 0
    e6dc:	21 f0       	breq	.+8      	; 0xe6e6 <fatfs_ls+0x2e>
    e6de:	fc 01       	movw	r30, r24
    e6e0:	20 81       	ld	r18, Z
    e6e2:	21 11       	cpse	r18, r1
    e6e4:	03 c0       	rjmp	.+6      	; 0xe6ec <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e6e6:	61 ef       	ldi	r22, 0xF1	; 241
    e6e8:	72 e1       	ldi	r23, 0x12	; 18
    e6ea:	01 c0       	rjmp	.+2      	; 0xe6ee <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e6ec:	bc 01       	movw	r22, r24
    e6ee:	c8 01       	movw	r24, r16
    e6f0:	0e 94 73 31 	call	0x62e6	; 0x62e6 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e6f4:	ed b7       	in	r30, 0x3d	; 61
    e6f6:	fe b7       	in	r31, 0x3e	; 62
    e6f8:	15 83       	std	Z+5, r17	; 0x05
    e6fa:	04 83       	std	Z+4, r16	; 0x04
    e6fc:	81 ee       	ldi	r24, 0xE1	; 225
    e6fe:	9a e0       	ldi	r25, 0x0A	; 10
    e700:	a0 e0       	ldi	r26, 0x00	; 0
    e702:	81 83       	std	Z+1, r24	; 0x01
    e704:	92 83       	std	Z+2, r25	; 0x02
    e706:	a3 83       	std	Z+3, r26	; 0x03
    e708:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    res = f_opendir(&dirs, buff);
    e70c:	b8 01       	movw	r22, r16
    e70e:	ce 01       	movw	r24, r28
    e710:	8d 5d       	subi	r24, 0xDD	; 221
    e712:	9d 4f       	sbci	r25, 0xFD	; 253
    e714:	0e 94 59 63 	call	0xc6b2	; 0xc6b2 <f_opendir>
    if (res != FR_OK) 
    e718:	89 2b       	or	r24, r25
    e71a:	09 f0       	breq	.+2      	; 0xe71e <fatfs_ls+0x66>
    e71c:	96 c0       	rjmp	.+300    	; 0xe84a <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e71e:	cf 5a       	subi	r28, 0xAF	; 175
    e720:	dd 4f       	sbci	r29, 0xFD	; 253
    e722:	18 82       	st	Y, r1
    e724:	19 82       	std	Y+1, r1	; 0x01
    e726:	1a 82       	std	Y+2, r1	; 0x02
    e728:	1b 82       	std	Y+3, r1	; 0x03
    e72a:	c1 55       	subi	r28, 0x51	; 81
    e72c:	d2 40       	sbci	r29, 0x02	; 2
    e72e:	a1 2c       	mov	r10, r1
    e730:	b1 2c       	mov	r11, r1
    e732:	c1 2c       	mov	r12, r1
    e734:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e736:	be 01       	movw	r22, r28
    e738:	64 5f       	subi	r22, 0xF4	; 244
    e73a:	7f 4f       	sbci	r23, 0xFF	; 255
    e73c:	ce 01       	movw	r24, r28
    e73e:	8d 5d       	subi	r24, 0xDD	; 221
    e740:	9d 4f       	sbci	r25, 0xFD	; 253
    e742:	0e 94 df 63 	call	0xc7be	; 0xc7be <f_readdir>
    e746:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e748:	89 2b       	or	r24, r25
    e74a:	49 f5       	brne	.+82     	; 0xe79e <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e74c:	8a a1       	ldd	r24, Y+34	; 0x22
    e74e:	88 23       	and	r24, r24
    e750:	31 f1       	breq	.+76     	; 0xe79e <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e752:	8c 89       	ldd	r24, Y+20	; 0x14
    e754:	84 ff       	sbrs	r24, 4
    e756:	04 c0       	rjmp	.+8      	; 0xe760 <fatfs_ls+0xa8>
        {
            s2++;
    e758:	ff ef       	ldi	r31, 0xFF	; 255
    e75a:	af 1a       	sub	r10, r31
    e75c:	bf 0a       	sbc	r11, r31
    e75e:	1b c0       	rjmp	.+54     	; 0xe796 <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e760:	4f ef       	ldi	r20, 0xFF	; 255
    e762:	c4 1a       	sub	r12, r20
    e764:	d4 0a       	sbc	r13, r20
    e766:	4c 85       	ldd	r20, Y+12	; 0x0c
    e768:	5d 85       	ldd	r21, Y+13	; 0x0d
    e76a:	6e 85       	ldd	r22, Y+14	; 0x0e
    e76c:	7f 85       	ldd	r23, Y+15	; 0x0f
    e76e:	cf 5a       	subi	r28, 0xAF	; 175
    e770:	dd 4f       	sbci	r29, 0xFD	; 253
    e772:	88 81       	ld	r24, Y
    e774:	99 81       	ldd	r25, Y+1	; 0x01
    e776:	aa 81       	ldd	r26, Y+2	; 0x02
    e778:	bb 81       	ldd	r27, Y+3	; 0x03
    e77a:	c1 55       	subi	r28, 0x51	; 81
    e77c:	d2 40       	sbci	r29, 0x02	; 2
    e77e:	84 0f       	add	r24, r20
    e780:	95 1f       	adc	r25, r21
    e782:	a6 1f       	adc	r26, r22
    e784:	b7 1f       	adc	r27, r23
    e786:	cf 5a       	subi	r28, 0xAF	; 175
    e788:	dd 4f       	sbci	r29, 0xFD	; 253
    e78a:	88 83       	st	Y, r24
    e78c:	99 83       	std	Y+1, r25	; 0x01
    e78e:	aa 83       	std	Y+2, r26	; 0x02
    e790:	bb 83       	std	Y+3, r27	; 0x03
    e792:	c1 55       	subi	r28, 0x51	; 81
    e794:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e796:	ce 01       	movw	r24, r28
    e798:	0c 96       	adiw	r24, 0x0c	; 12
    e79a:	f6 de       	rcall	.-532    	; 0xe588 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e79c:	cc cf       	rjmp	.-104    	; 0xe736 <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e79e:	ce 01       	movw	r24, r28
    e7a0:	8d 5d       	subi	r24, 0xDD	; 221
    e7a2:	9d 4f       	sbci	r25, 0xFD	; 253
    e7a4:	0e 94 ca 63 	call	0xc794	; 0xc794 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e7a8:	ed b7       	in	r30, 0x3d	; 61
    e7aa:	fe b7       	in	r31, 0x3e	; 62
    e7ac:	b3 86       	std	Z+11, r11	; 0x0b
    e7ae:	a2 86       	std	Z+10, r10	; 0x0a
    e7b0:	cf 5a       	subi	r28, 0xAF	; 175
    e7b2:	dd 4f       	sbci	r29, 0xFD	; 253
    e7b4:	88 81       	ld	r24, Y
    e7b6:	99 81       	ldd	r25, Y+1	; 0x01
    e7b8:	aa 81       	ldd	r26, Y+2	; 0x02
    e7ba:	bb 81       	ldd	r27, Y+3	; 0x03
    e7bc:	c1 55       	subi	r28, 0x51	; 81
    e7be:	d2 40       	sbci	r29, 0x02	; 2
    e7c0:	86 83       	std	Z+6, r24	; 0x06
    e7c2:	97 83       	std	Z+7, r25	; 0x07
    e7c4:	a0 87       	std	Z+8, r26	; 0x08
    e7c6:	b1 87       	std	Z+9, r27	; 0x09
    e7c8:	d5 82       	std	Z+5, r13	; 0x05
    e7ca:	c4 82       	std	Z+4, r12	; 0x04
    e7cc:	88 eb       	ldi	r24, 0xB8	; 184
    e7ce:	9a e0       	ldi	r25, 0x0A	; 10
    e7d0:	a0 e0       	ldi	r26, 0x00	; 0
    e7d2:	81 83       	std	Z+1, r24	; 0x01
    e7d4:	92 83       	std	Z+2, r25	; 0x02
    e7d6:	a3 83       	std	Z+3, r26	; 0x03
    e7d8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e7dc:	ae 01       	movw	r20, r28
    e7de:	4b 5a       	subi	r20, 0xAB	; 171
    e7e0:	5d 4f       	sbci	r21, 0xFD	; 253
    e7e2:	be 01       	movw	r22, r28
    e7e4:	6f 5a       	subi	r22, 0xAF	; 175
    e7e6:	7d 4f       	sbci	r23, 0xFD	; 253
    e7e8:	c8 01       	movw	r24, r16
    e7ea:	0e 94 61 64 	call	0xc8c2	; 0xc8c2 <f_getfree>
    e7ee:	89 2b       	or	r24, r25
    e7f0:	31 f5       	brne	.+76     	; 0xe83e <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e7f2:	cb 5a       	subi	r28, 0xAB	; 171
    e7f4:	dd 4f       	sbci	r29, 0xFD	; 253
    e7f6:	e8 81       	ld	r30, Y
    e7f8:	f9 81       	ldd	r31, Y+1	; 0x01
    e7fa:	c5 55       	subi	r28, 0x55	; 85
    e7fc:	d2 40       	sbci	r29, 0x02	; 2
    e7fe:	a1 85       	ldd	r26, Z+9	; 0x09
    e800:	b2 85       	ldd	r27, Z+10	; 0x0a
    e802:	cf 5a       	subi	r28, 0xAF	; 175
    e804:	dd 4f       	sbci	r29, 0xFD	; 253
    e806:	28 81       	ld	r18, Y
    e808:	39 81       	ldd	r19, Y+1	; 0x01
    e80a:	4a 81       	ldd	r20, Y+2	; 0x02
    e80c:	5b 81       	ldd	r21, Y+3	; 0x03
    e80e:	c1 55       	subi	r28, 0x51	; 81
    e810:	d2 40       	sbci	r29, 0x02	; 2
    e812:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
    e816:	22 e0       	ldi	r18, 0x02	; 2
    e818:	30 e0       	ldi	r19, 0x00	; 0
    e81a:	40 e0       	ldi	r20, 0x00	; 0
    e81c:	50 e0       	ldi	r21, 0x00	; 0
    e81e:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
    e822:	ed b7       	in	r30, 0x3d	; 61
    e824:	fe b7       	in	r31, 0x3e	; 62
    e826:	24 83       	std	Z+4, r18	; 0x04
    e828:	35 83       	std	Z+5, r19	; 0x05
    e82a:	46 83       	std	Z+6, r20	; 0x06
    e82c:	57 83       	std	Z+7, r21	; 0x07
    e82e:	83 ea       	ldi	r24, 0xA3	; 163
    e830:	9a e0       	ldi	r25, 0x0A	; 10
    e832:	a0 e0       	ldi	r26, 0x00	; 0
    e834:	81 83       	std	Z+1, r24	; 0x01
    e836:	92 83       	std	Z+2, r25	; 0x02
    e838:	a3 83       	std	Z+3, r26	; 0x03
    e83a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	if(res)
    e83e:	e1 14       	cp	r14, r1
    e840:	f1 04       	cpc	r15, r1
    e842:	31 f4       	brne	.+12     	; 0xe850 <fatfs_ls+0x198>
		return(-1);
	return(1);
    e844:	81 e0       	ldi	r24, 0x01	; 1
    e846:	90 e0       	ldi	r25, 0x00	; 0
    e848:	05 c0       	rjmp	.+10     	; 0xe854 <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e84a:	80 e0       	ldi	r24, 0x00	; 0
    e84c:	90 e0       	ldi	r25, 0x00	; 0
    e84e:	02 c0       	rjmp	.+4      	; 0xe854 <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e850:	8f ef       	ldi	r24, 0xFF	; 255
    e852:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e854:	ca 5a       	subi	r28, 0xAA	; 170
    e856:	dd 4f       	sbci	r29, 0xFD	; 253
    e858:	ea e0       	ldi	r30, 0x0A	; 10
    e85a:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

0000e85e <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e85e:	a4 e0       	ldi	r26, 0x04	; 4
    e860:	b1 e0       	ldi	r27, 0x01	; 1
    e862:	e5 e3       	ldi	r30, 0x35	; 53
    e864:	f4 e7       	ldi	r31, 0x74	; 116
    e866:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    char buff[MAX_NAME_LEN+1];

    sep();
    e86a:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>
    printf("START MMC TEST\n");
    e86e:	81 e1       	ldi	r24, 0x11	; 17
    e870:	9b e0       	ldi	r25, 0x0B	; 11
    e872:	a0 e0       	ldi	r26, 0x00	; 0
    e874:	ed b7       	in	r30, 0x3d	; 61
    e876:	fe b7       	in	r31, 0x3e	; 62
    e878:	81 83       	std	Z+1, r24	; 0x01
    e87a:	92 83       	std	Z+2, r25	; 0x02
    e87c:	a3 83       	std	Z+3, r26	; 0x03
    e87e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    strcpy(buff,"/");
    e882:	66 ea       	ldi	r22, 0xA6	; 166
    e884:	78 e0       	ldi	r23, 0x08	; 8
    e886:	ce 01       	movw	r24, r28
    e888:	04 96       	adiw	r24, 0x04	; 4
    e88a:	0e 94 73 31 	call	0x62e6	; 0x62e6 <strcpy>
    fatfs_status(buff);
    e88e:	ce 01       	movw	r24, r28
    e890:	04 96       	adiw	r24, 0x04	; 4
    e892:	ee dc       	rcall	.-1572   	; 0xe270 <fatfs_status>
    printf("MMC Directory List\n");
    e894:	8d ef       	ldi	r24, 0xFD	; 253
    e896:	9a e0       	ldi	r25, 0x0A	; 10
    e898:	a0 e0       	ldi	r26, 0x00	; 0
    e89a:	ed b7       	in	r30, 0x3d	; 61
    e89c:	fe b7       	in	r31, 0x3e	; 62
    e89e:	81 83       	std	Z+1, r24	; 0x01
    e8a0:	92 83       	std	Z+2, r25	; 0x02
    e8a2:	a3 83       	std	Z+3, r26	; 0x03
    e8a4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fatfs_ls("/");
    e8a8:	86 ea       	ldi	r24, 0xA6	; 166
    e8aa:	98 e0       	ldi	r25, 0x08	; 8
    e8ac:	05 df       	rcall	.-502    	; 0xe6b8 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e8ae:	8f ee       	ldi	r24, 0xEF	; 239
    e8b0:	9a e0       	ldi	r25, 0x0A	; 10
    e8b2:	a0 e0       	ldi	r26, 0x00	; 0
    e8b4:	ed b7       	in	r30, 0x3d	; 61
    e8b6:	fe b7       	in	r31, 0x3e	; 62
    e8b8:	81 83       	std	Z+1, r24	; 0x01
    e8ba:	92 83       	std	Z+2, r25	; 0x02
    e8bc:	a3 83       	std	Z+3, r26	; 0x03
    e8be:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    sep();
    e8c2:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>
}
    e8c6:	cc 5f       	subi	r28, 0xFC	; 252
    e8c8:	de 4f       	sbci	r29, 0xFE	; 254
    e8ca:	e2 e0       	ldi	r30, 0x02	; 2
    e8cc:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000e8d0 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e8d0:	a4 e0       	ldi	r26, 0x04	; 4
    e8d2:	b1 e0       	ldi	r27, 0x01	; 1
    e8d4:	ee e6       	ldi	r30, 0x6E	; 110
    e8d6:	f4 e7       	ldi	r31, 0x74	; 116
    e8d8:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    int ind;

    char buff[MAX_NAME_LEN+1];

    ind = 0;
    ptr = argv[ind];
    e8dc:	fb 01       	movw	r30, r22
    e8de:	20 81       	ld	r18, Z
    e8e0:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e8e2:	21 15       	cp	r18, r1
    e8e4:	31 05       	cpc	r19, r1
    e8e6:	19 f4       	brne	.+6      	; 0xe8ee <fatfs_tests+0x1e>
        return(0);
    e8e8:	80 e0       	ldi	r24, 0x00	; 0
    e8ea:	90 e0       	ldi	r25, 0x00	; 0
    e8ec:	81 c0       	rjmp	.+258    	; 0xe9f0 <fatfs_tests+0x120>
    e8ee:	8b 01       	movw	r16, r22
    e8f0:	6c 01       	movw	r12, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    e8f2:	62 ed       	ldi	r22, 0xD2	; 210
    e8f4:	78 e0       	ldi	r23, 0x08	; 8
    e8f6:	c9 01       	movw	r24, r18
    e8f8:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
    e8fc:	89 2b       	or	r24, r25
    e8fe:	a1 f3       	breq	.-24     	; 0xe8e8 <fatfs_tests+0x18>
    {
        ptr = argv[++ind];
    e900:	f8 01       	movw	r30, r16
    e902:	e2 80       	ldd	r14, Z+2	; 0x02
    e904:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    e906:	e1 14       	cp	r14, r1
    e908:	f1 04       	cpc	r15, r1
    e90a:	59 f4       	brne	.+22     	; 0xe922 <fatfs_tests+0x52>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    e90c:	8d e2       	ldi	r24, 0x2D	; 45
    e90e:	9b e0       	ldi	r25, 0x0B	; 11
    e910:	a0 e0       	ldi	r26, 0x00	; 0
    e912:	ed b7       	in	r30, 0x3d	; 61
    e914:	fe b7       	in	r31, 0x3e	; 62
    e916:	81 83       	std	Z+1, r24	; 0x01
    e918:	92 83       	std	Z+2, r25	; 0x02
    e91a:	a3 83       	std	Z+3, r26	; 0x03
    e91c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    e920:	40 c0       	rjmp	.+128    	; 0xe9a2 <fatfs_tests+0xd2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    e922:	6d e6       	ldi	r22, 0x6D	; 109
    e924:	76 e1       	ldi	r23, 0x16	; 22
    e926:	c7 01       	movw	r24, r14
    e928:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
    e92c:	89 2b       	or	r24, r25
    e92e:	71 f7       	brne	.-36     	; 0xe90c <fatfs_tests+0x3c>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e930:	68 ed       	ldi	r22, 0xD8	; 216
    e932:	78 e0       	ldi	r23, 0x08	; 8
    e934:	c7 01       	movw	r24, r14
    e936:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
    e93a:	89 2b       	or	r24, r25
    e93c:	31 f0       	breq	.+12     	; 0xe94a <fatfs_tests+0x7a>
    e93e:	0c 5f       	subi	r16, 0xFC	; 252
    e940:	1f 4f       	sbci	r17, 0xFF	; 255
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e942:	82 e0       	ldi	r24, 0x02	; 2
    e944:	e8 2e       	mov	r14, r24
    e946:	f1 2c       	mov	r15, r1
    e948:	12 c0       	rjmp	.+36     	; 0xe96e <fatfs_tests+0x9e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e94a:	68 ed       	ldi	r22, 0xD8	; 216
    e94c:	7b e0       	ldi	r23, 0x0B	; 11
    e94e:	c7 01       	movw	r24, r14
    e950:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
    e954:	89 2b       	or	r24, r25
    e956:	99 f7       	brne	.-26     	; 0xe93e <fatfs_tests+0x6e>
    e958:	19 c0       	rjmp	.+50     	; 0xe98c <fatfs_tests+0xbc>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    e95a:	f8 01       	movw	r30, r16
    e95c:	81 91       	ld	r24, Z+
    e95e:	91 91       	ld	r25, Z+
    e960:	8f 01       	movw	r16, r30
    e962:	aa de       	rcall	.-684    	; 0xe6b8 <fatfs_ls>
    e964:	89 2b       	or	r24, r25
    e966:	79 f0       	breq	.+30     	; 0xe986 <fatfs_tests+0xb6>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    e968:	ff ef       	ldi	r31, 0xFF	; 255
    e96a:	ef 1a       	sub	r14, r31
    e96c:	ff 0a       	sbc	r15, r31
    e96e:	ec 14       	cp	r14, r12
    e970:	fd 04       	cpc	r15, r13
    e972:	9c f3       	brlt	.-26     	; 0xe95a <fatfs_tests+0x8a>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e974:	82 e0       	ldi	r24, 0x02	; 2
    e976:	e8 16       	cp	r14, r24
    e978:	f1 04       	cpc	r15, r1
    e97a:	99 f4       	brne	.+38     	; 0xe9a2 <fatfs_tests+0xd2>
        {
            if(fatfs_ls("") == 0)
    e97c:	80 e2       	ldi	r24, 0x20	; 32
    e97e:	9c e0       	ldi	r25, 0x0C	; 12
    e980:	9b de       	rcall	.-714    	; 0xe6b8 <fatfs_ls>
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        strcpy(buff,argv[ind]);
        if(fatfs_status(argv[ind]) == 0)
    e982:	89 2b       	or	r24, r25
    e984:	71 f4       	brne	.+28     	; 0xe9a2 <fatfs_tests+0xd2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e986:	8f ef       	ldi	r24, 0xFF	; 255
    e988:	9f ef       	ldi	r25, 0xFF	; 255
    e98a:	32 c0       	rjmp	.+100    	; 0xe9f0 <fatfs_tests+0x120>
			}
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e98c:	96 01       	movw	r18, r12
    e98e:	41 e0       	ldi	r20, 0x01	; 1
    e990:	50 e0       	ldi	r21, 0x00	; 0
    e992:	6b ed       	ldi	r22, 0xDB	; 219
    e994:	78 e0       	ldi	r23, 0x08	; 8
    e996:	c7 01       	movw	r24, r14
    e998:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
    e99c:	89 2b       	or	r24, r25
    {
        mmc_test();
    e99e:	21 f0       	breq	.+8      	; 0xe9a8 <fatfs_tests+0xd8>
    e9a0:	5e df       	rcall	.-324    	; 0xe85e <mmc_test>
        return(1);
    e9a2:	81 e0       	ldi	r24, 0x01	; 1
    e9a4:	90 e0       	ldi	r25, 0x00	; 0
    e9a6:	24 c0       	rjmp	.+72     	; 0xe9f0 <fatfs_tests+0x120>
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e9a8:	96 01       	movw	r18, r12
    e9aa:	41 e0       	ldi	r20, 0x01	; 1
    e9ac:	50 e0       	ldi	r21, 0x00	; 0
    e9ae:	64 ee       	ldi	r22, 0xE4	; 228
    e9b0:	78 e0       	ldi	r23, 0x08	; 8
    e9b2:	c7 01       	movw	r24, r14
    e9b4:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
    e9b8:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e9ba:	21 f0       	breq	.+8      	; 0xe9c4 <fatfs_tests+0xf4>
    e9bc:	81 e0       	ldi	r24, 0x01	; 1
    e9be:	90 e0       	ldi	r25, 0x00	; 0
    e9c0:	70 da       	rcall	.-2848   	; 0xdea2 <mmc_init>
    e9c2:	ef cf       	rjmp	.-34     	; 0xe9a2 <fatfs_tests+0xd2>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e9c4:	96 01       	movw	r18, r12
    e9c6:	42 e0       	ldi	r20, 0x02	; 2
    e9c8:	50 e0       	ldi	r21, 0x00	; 0
    e9ca:	6d ee       	ldi	r22, 0xED	; 237
    e9cc:	78 e0       	ldi	r23, 0x08	; 8
    e9ce:	c7 01       	movw	r24, r14
    e9d0:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
    e9d4:	89 2b       	or	r24, r25
    e9d6:	09 f4       	brne	.+2      	; 0xe9da <fatfs_tests+0x10a>
    e9d8:	87 cf       	rjmp	.-242    	; 0xe8e8 <fatfs_tests+0x18>
    {
        strcpy(buff,argv[ind]);
    e9da:	f8 01       	movw	r30, r16
    e9dc:	02 81       	ldd	r16, Z+2	; 0x02
    e9de:	13 81       	ldd	r17, Z+3	; 0x03
    e9e0:	b8 01       	movw	r22, r16
    e9e2:	ce 01       	movw	r24, r28
    e9e4:	04 96       	adiw	r24, 0x04	; 4
    e9e6:	0e 94 73 31 	call	0x62e6	; 0x62e6 <strcpy>
        if(fatfs_status(argv[ind]) == 0)
    e9ea:	c8 01       	movw	r24, r16
    e9ec:	41 dc       	rcall	.-1918   	; 0xe270 <fatfs_status>
    e9ee:	c9 cf       	rjmp	.-110    	; 0xe982 <fatfs_tests+0xb2>
        return(1);
    }
#endif

    return(0);
}
    e9f0:	cc 5f       	subi	r28, 0xFC	; 252
    e9f2:	de 4f       	sbci	r29, 0xFE	; 254
    e9f4:	e8 e0       	ldi	r30, 0x08	; 8
    e9f6:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000e9fa <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e9fa:	8f 92       	push	r8
    e9fc:	9f 92       	push	r9
    e9fe:	af 92       	push	r10
    ea00:	bf 92       	push	r11
    ea02:	ef 92       	push	r14
    ea04:	ff 92       	push	r15
    ea06:	0f 93       	push	r16
    ea08:	1f 93       	push	r17
    ea0a:	cf 93       	push	r28
    ea0c:	df 93       	push	r29
    ea0e:	00 d0       	rcall	.+0      	; 0xea10 <fatfs_getc+0x16>
    ea10:	1f 92       	push	r1
    ea12:	cd b7       	in	r28, 0x3d	; 61
    ea14:	de b7       	in	r29, 0x3e	; 62
    ea16:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ea1a:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ea1e:	00 97       	sbiw	r24, 0x00	; 0
    ea20:	39 f4       	brne	.+14     	; 0xea30 <fatfs_getc+0x36>
    ea22:	89 e0       	ldi	r24, 0x09	; 9
    ea24:	90 e0       	ldi	r25, 0x00	; 0
    ea26:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ea2a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ea2e:	2f c0       	rjmp	.+94     	; 0xea8e <fatfs_getc+0x94>
    ea30:	fc 01       	movw	r30, r24
    ea32:	e4 84       	ldd	r14, Z+12	; 0x0c
    ea34:	f5 84       	ldd	r15, Z+13	; 0x0d
    ea36:	e1 14       	cp	r14, r1
    ea38:	f1 04       	cpc	r15, r1
    ea3a:	99 f3       	breq	.-26     	; 0xea22 <fatfs_getc+0x28>
    ea3c:	8c 01       	movw	r16, r24
    ea3e:	9e 01       	movw	r18, r28
    ea40:	2f 5f       	subi	r18, 0xFF	; 255
    ea42:	3f 4f       	sbci	r19, 0xFF	; 255
    ea44:	41 e0       	ldi	r20, 0x01	; 1
    ea46:	50 e0       	ldi	r21, 0x00	; 0
    ea48:	be 01       	movw	r22, r28
    ea4a:	6d 5f       	subi	r22, 0xFD	; 253
    ea4c:	7f 4f       	sbci	r23, 0xFF	; 255
    ea4e:	c7 01       	movw	r24, r14
    ea50:	0e 94 92 5b 	call	0xb724	; 0xb724 <f_read>
    ea54:	00 97       	sbiw	r24, 0x00	; 0
    ea56:	31 f4       	brne	.+12     	; 0xea64 <fatfs_getc+0x6a>
    ea58:	29 81       	ldd	r18, Y+1	; 0x01
    ea5a:	3a 81       	ldd	r19, Y+2	; 0x02
    ea5c:	21 30       	cpi	r18, 0x01	; 1
    ea5e:	31 05       	cpc	r19, r1
    ea60:	c9 f0       	breq	.+50     	; 0xea94 <fatfs_getc+0x9a>
    ea62:	03 c0       	rjmp	.+6      	; 0xea6a <fatfs_getc+0x70>
    ea64:	84 31       	cpi	r24, 0x14	; 20
    ea66:	91 05       	cpc	r25, r1
    ea68:	40 f4       	brcc	.+16     	; 0xea7a <fatfs_getc+0x80>
    ea6a:	fc 01       	movw	r30, r24
    ea6c:	ea 55       	subi	r30, 0x5A	; 90
    ea6e:	f4 4f       	sbci	r31, 0xF4	; 244
    ea70:	80 81       	ld	r24, Z
    ea72:	08 2e       	mov	r0, r24
    ea74:	00 0c       	add	r0, r0
    ea76:	99 0b       	sbc	r25, r25
    ea78:	02 c0       	rjmp	.+4      	; 0xea7e <fatfs_getc+0x84>
    ea7a:	83 e2       	ldi	r24, 0x23	; 35
    ea7c:	90 e0       	ldi	r25, 0x00	; 0
    ea7e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ea82:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ea86:	f8 01       	movw	r30, r16
    ea88:	83 81       	ldd	r24, Z+3	; 0x03
    ea8a:	80 62       	ori	r24, 0x20	; 32
    ea8c:	83 83       	std	Z+3, r24	; 0x03
    ea8e:	8f ef       	ldi	r24, 0xFF	; 255
    ea90:	9f ef       	ldi	r25, 0xFF	; 255
    ea92:	28 c0       	rjmp	.+80     	; 0xeae4 <fatfs_getc+0xea>
    ea94:	8b 81       	ldd	r24, Y+3	; 0x03
    ea96:	8d 30       	cpi	r24, 0x0D	; 13
    ea98:	01 f5       	brne	.+64     	; 0xeada <fatfs_getc+0xe0>
    ea9a:	f7 01       	movw	r30, r14
    ea9c:	80 88       	ldd	r8, Z+16	; 0x10
    ea9e:	91 88       	ldd	r9, Z+17	; 0x11
    eaa0:	a2 88       	ldd	r10, Z+18	; 0x12
    eaa2:	b3 88       	ldd	r11, Z+19	; 0x13
    eaa4:	9e 01       	movw	r18, r28
    eaa6:	2f 5f       	subi	r18, 0xFF	; 255
    eaa8:	3f 4f       	sbci	r19, 0xFF	; 255
    eaaa:	41 e0       	ldi	r20, 0x01	; 1
    eaac:	50 e0       	ldi	r21, 0x00	; 0
    eaae:	be 01       	movw	r22, r28
    eab0:	6d 5f       	subi	r22, 0xFD	; 253
    eab2:	7f 4f       	sbci	r23, 0xFF	; 255
    eab4:	c7 01       	movw	r24, r14
    eab6:	0e 94 92 5b 	call	0xb724	; 0xb724 <f_read>
    eaba:	89 2b       	or	r24, r25
    eabc:	89 f4       	brne	.+34     	; 0xeae0 <fatfs_getc+0xe6>
    eabe:	89 81       	ldd	r24, Y+1	; 0x01
    eac0:	9a 81       	ldd	r25, Y+2	; 0x02
    eac2:	01 97       	sbiw	r24, 0x01	; 1
    eac4:	69 f4       	brne	.+26     	; 0xeae0 <fatfs_getc+0xe6>
    eac6:	8b 81       	ldd	r24, Y+3	; 0x03
    eac8:	8a 30       	cpi	r24, 0x0A	; 10
    eaca:	31 f0       	breq	.+12     	; 0xead8 <fatfs_getc+0xde>
    eacc:	b5 01       	movw	r22, r10
    eace:	a4 01       	movw	r20, r8
    ead0:	c7 01       	movw	r24, r14
    ead2:	0e 94 9e 60 	call	0xc13c	; 0xc13c <f_lseek>
    ead6:	04 c0       	rjmp	.+8      	; 0xeae0 <fatfs_getc+0xe6>
    ead8:	8b 83       	std	Y+3, r24	; 0x03
    eada:	8b 81       	ldd	r24, Y+3	; 0x03
    eadc:	90 e0       	ldi	r25, 0x00	; 0
    eade:	02 c0       	rjmp	.+4      	; 0xeae4 <fatfs_getc+0xea>
    eae0:	8a e0       	ldi	r24, 0x0A	; 10
    eae2:	90 e0       	ldi	r25, 0x00	; 0
    eae4:	0f 90       	pop	r0
    eae6:	0f 90       	pop	r0
    eae8:	0f 90       	pop	r0
    eaea:	df 91       	pop	r29
    eaec:	cf 91       	pop	r28
    eaee:	1f 91       	pop	r17
    eaf0:	0f 91       	pop	r16
    eaf2:	ff 90       	pop	r15
    eaf4:	ef 90       	pop	r14
    eaf6:	bf 90       	pop	r11
    eaf8:	af 90       	pop	r10
    eafa:	9f 90       	pop	r9
    eafc:	8f 90       	pop	r8
    eafe:	08 95       	ret

0000eb00 <fatfs_putc>:
    eb00:	a3 e0       	ldi	r26, 0x03	; 3
    eb02:	b0 e0       	ldi	r27, 0x00	; 0
    eb04:	e6 e8       	ldi	r30, 0x86	; 134
    eb06:	f5 e7       	ldi	r31, 0x75	; 117
    eb08:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    eb0c:	8b 83       	std	Y+3, r24	; 0x03
    eb0e:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eb12:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eb16:	61 15       	cp	r22, r1
    eb18:	71 05       	cpc	r23, r1
    eb1a:	39 f4       	brne	.+14     	; 0xeb2a <fatfs_putc+0x2a>
    eb1c:	89 e0       	ldi	r24, 0x09	; 9
    eb1e:	90 e0       	ldi	r25, 0x00	; 0
    eb20:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb24:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb28:	2d c0       	rjmp	.+90     	; 0xeb84 <fatfs_putc+0x84>
    eb2a:	fb 01       	movw	r30, r22
    eb2c:	84 85       	ldd	r24, Z+12	; 0x0c
    eb2e:	95 85       	ldd	r25, Z+13	; 0x0d
    eb30:	00 97       	sbiw	r24, 0x00	; 0
    eb32:	a1 f3       	breq	.-24     	; 0xeb1c <fatfs_putc+0x1c>
    eb34:	8b 01       	movw	r16, r22
    eb36:	9e 01       	movw	r18, r28
    eb38:	2f 5f       	subi	r18, 0xFF	; 255
    eb3a:	3f 4f       	sbci	r19, 0xFF	; 255
    eb3c:	41 e0       	ldi	r20, 0x01	; 1
    eb3e:	50 e0       	ldi	r21, 0x00	; 0
    eb40:	be 01       	movw	r22, r28
    eb42:	6d 5f       	subi	r22, 0xFD	; 253
    eb44:	7f 4f       	sbci	r23, 0xFF	; 255
    eb46:	0e 94 dd 5c 	call	0xb9ba	; 0xb9ba <f_write>
    eb4a:	00 97       	sbiw	r24, 0x00	; 0
    eb4c:	31 f4       	brne	.+12     	; 0xeb5a <fatfs_putc+0x5a>
    eb4e:	29 81       	ldd	r18, Y+1	; 0x01
    eb50:	3a 81       	ldd	r19, Y+2	; 0x02
    eb52:	21 30       	cpi	r18, 0x01	; 1
    eb54:	31 05       	cpc	r19, r1
    eb56:	c9 f0       	breq	.+50     	; 0xeb8a <fatfs_putc+0x8a>
    eb58:	03 c0       	rjmp	.+6      	; 0xeb60 <fatfs_putc+0x60>
    eb5a:	84 31       	cpi	r24, 0x14	; 20
    eb5c:	91 05       	cpc	r25, r1
    eb5e:	40 f4       	brcc	.+16     	; 0xeb70 <fatfs_putc+0x70>
    eb60:	fc 01       	movw	r30, r24
    eb62:	ea 55       	subi	r30, 0x5A	; 90
    eb64:	f4 4f       	sbci	r31, 0xF4	; 244
    eb66:	80 81       	ld	r24, Z
    eb68:	08 2e       	mov	r0, r24
    eb6a:	00 0c       	add	r0, r0
    eb6c:	99 0b       	sbc	r25, r25
    eb6e:	02 c0       	rjmp	.+4      	; 0xeb74 <fatfs_putc+0x74>
    eb70:	83 e2       	ldi	r24, 0x23	; 35
    eb72:	90 e0       	ldi	r25, 0x00	; 0
    eb74:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb78:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb7c:	f8 01       	movw	r30, r16
    eb7e:	83 81       	ldd	r24, Z+3	; 0x03
    eb80:	80 62       	ori	r24, 0x20	; 32
    eb82:	83 83       	std	Z+3, r24	; 0x03
    eb84:	8f ef       	ldi	r24, 0xFF	; 255
    eb86:	9f ef       	ldi	r25, 0xFF	; 255
    eb88:	02 c0       	rjmp	.+4      	; 0xeb8e <fatfs_putc+0x8e>
    eb8a:	8b 81       	ldd	r24, Y+3	; 0x03
    eb8c:	90 e0       	ldi	r25, 0x00	; 0
    eb8e:	23 96       	adiw	r28, 0x03	; 3
    eb90:	e4 e0       	ldi	r30, 0x04	; 4
    eb92:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

0000eb96 <fgetc>:
    eb96:	cf 93       	push	r28
    eb98:	df 93       	push	r29
    eb9a:	00 d0       	rcall	.+0      	; 0xeb9c <fgetc+0x6>
    eb9c:	1f 92       	push	r1
    eb9e:	ec 01       	movw	r28, r24
    eba0:	00 97       	sbiw	r24, 0x00	; 0
    eba2:	39 f4       	brne	.+14     	; 0xebb2 <fgetc+0x1c>
    eba4:	89 e0       	ldi	r24, 0x09	; 9
    eba6:	90 e0       	ldi	r25, 0x00	; 0
    eba8:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ebac:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ebb0:	40 c0       	rjmp	.+128    	; 0xec32 <fgetc+0x9c>
    ebb2:	2b 81       	ldd	r18, Y+3	; 0x03
    ebb4:	20 ff       	sbrs	r18, 0
    ebb6:	3d c0       	rjmp	.+122    	; 0xec32 <fgetc+0x9c>
    ebb8:	26 ff       	sbrs	r18, 6
    ebba:	0a c0       	rjmp	.+20     	; 0xebd0 <fgetc+0x3a>
    ebbc:	2f 7b       	andi	r18, 0xBF	; 191
    ebbe:	2b 83       	std	Y+3, r18	; 0x03
    ebc0:	8e 81       	ldd	r24, Y+6	; 0x06
    ebc2:	9f 81       	ldd	r25, Y+7	; 0x07
    ebc4:	01 96       	adiw	r24, 0x01	; 1
    ebc6:	9f 83       	std	Y+7, r25	; 0x07
    ebc8:	8e 83       	std	Y+6, r24	; 0x06
    ebca:	8a 81       	ldd	r24, Y+2	; 0x02
    ebcc:	90 e0       	ldi	r25, 0x00	; 0
    ebce:	33 c0       	rjmp	.+102    	; 0xec36 <fgetc+0xa0>
    ebd0:	22 ff       	sbrs	r18, 2
    ebd2:	0d c0       	rjmp	.+26     	; 0xebee <fgetc+0x58>
    ebd4:	e8 81       	ld	r30, Y
    ebd6:	f9 81       	ldd	r31, Y+1	; 0x01
    ebd8:	80 81       	ld	r24, Z
    ebda:	90 e0       	ldi	r25, 0x00	; 0
    ebdc:	00 97       	sbiw	r24, 0x00	; 0
    ebde:	19 f4       	brne	.+6      	; 0xebe6 <fgetc+0x50>
    ebe0:	20 62       	ori	r18, 0x20	; 32
    ebe2:	2b 83       	std	Y+3, r18	; 0x03
    ebe4:	26 c0       	rjmp	.+76     	; 0xec32 <fgetc+0x9c>
    ebe6:	31 96       	adiw	r30, 0x01	; 1
    ebe8:	f9 83       	std	Y+1, r31	; 0x01
    ebea:	e8 83       	st	Y, r30
    ebec:	1b c0       	rjmp	.+54     	; 0xec24 <fgetc+0x8e>
    ebee:	ea 85       	ldd	r30, Y+10	; 0x0a
    ebf0:	fb 85       	ldd	r31, Y+11	; 0x0b
    ebf2:	30 97       	sbiw	r30, 0x00	; 0
    ebf4:	59 f4       	brne	.+22     	; 0xec0c <fgetc+0x76>
    ebf6:	8a ed       	ldi	r24, 0xDA	; 218
    ebf8:	9b e0       	ldi	r25, 0x0B	; 11
    ebfa:	a0 e0       	ldi	r26, 0x00	; 0
    ebfc:	ed b7       	in	r30, 0x3d	; 61
    ebfe:	fe b7       	in	r31, 0x3e	; 62
    ec00:	81 83       	std	Z+1, r24	; 0x01
    ec02:	92 83       	std	Z+2, r25	; 0x02
    ec04:	a3 83       	std	Z+3, r26	; 0x03
    ec06:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    ec0a:	13 c0       	rjmp	.+38     	; 0xec32 <fgetc+0x9c>
    ec0c:	09 95       	icall
    ec0e:	97 ff       	sbrs	r25, 7
    ec10:	09 c0       	rjmp	.+18     	; 0xec24 <fgetc+0x8e>
    ec12:	2b 81       	ldd	r18, Y+3	; 0x03
    ec14:	02 96       	adiw	r24, 0x02	; 2
    ec16:	11 f0       	breq	.+4      	; 0xec1c <fgetc+0x86>
    ec18:	80 e2       	ldi	r24, 0x20	; 32
    ec1a:	01 c0       	rjmp	.+2      	; 0xec1e <fgetc+0x88>
    ec1c:	80 e1       	ldi	r24, 0x10	; 16
    ec1e:	82 2b       	or	r24, r18
    ec20:	8b 83       	std	Y+3, r24	; 0x03
    ec22:	07 c0       	rjmp	.+14     	; 0xec32 <fgetc+0x9c>
    ec24:	2e 81       	ldd	r18, Y+6	; 0x06
    ec26:	3f 81       	ldd	r19, Y+7	; 0x07
    ec28:	2f 5f       	subi	r18, 0xFF	; 255
    ec2a:	3f 4f       	sbci	r19, 0xFF	; 255
    ec2c:	3f 83       	std	Y+7, r19	; 0x07
    ec2e:	2e 83       	std	Y+6, r18	; 0x06
    ec30:	02 c0       	rjmp	.+4      	; 0xec36 <fgetc+0xa0>
    ec32:	8f ef       	ldi	r24, 0xFF	; 255
    ec34:	9f ef       	ldi	r25, 0xFF	; 255
    ec36:	cd b7       	in	r28, 0x3d	; 61
    ec38:	de b7       	in	r29, 0x3e	; 62
    ec3a:	23 96       	adiw	r28, 0x03	; 3
    ec3c:	e2 e0       	ldi	r30, 0x02	; 2
    ec3e:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000ec42 <fputc>:
    ec42:	cf 93       	push	r28
    ec44:	df 93       	push	r29
    ec46:	00 d0       	rcall	.+0      	; 0xec48 <fputc+0x6>
    ec48:	1f 92       	push	r1
    ec4a:	eb 01       	movw	r28, r22
    ec4c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ec50:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ec54:	20 91 c1 1c 	lds	r18, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ec58:	30 91 c2 1c 	lds	r19, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ec5c:	62 17       	cp	r22, r18
    ec5e:	73 07       	cpc	r23, r19
    ec60:	49 f0       	breq	.+18     	; 0xec74 <fputc+0x32>
    ec62:	20 91 c3 1c 	lds	r18, 0x1CC3	; 0x801cc3 <__iob+0x4>
    ec66:	30 91 c4 1c 	lds	r19, 0x1CC4	; 0x801cc4 <__iob+0x5>
    ec6a:	62 17       	cp	r22, r18
    ec6c:	73 07       	cpc	r23, r19
    ec6e:	11 f0       	breq	.+4      	; 0xec74 <fputc+0x32>
    ec70:	47 df       	rcall	.-370    	; 0xeb00 <fatfs_putc>
    ec72:	33 c0       	rjmp	.+102    	; 0xecda <fputc+0x98>
    ec74:	2b 81       	ldd	r18, Y+3	; 0x03
    ec76:	21 ff       	sbrs	r18, 1
    ec78:	2e c0       	rjmp	.+92     	; 0xecd6 <fputc+0x94>
    ec7a:	22 ff       	sbrs	r18, 2
    ec7c:	10 c0       	rjmp	.+32     	; 0xec9e <fputc+0x5c>
    ec7e:	4e 81       	ldd	r20, Y+6	; 0x06
    ec80:	5f 81       	ldd	r21, Y+7	; 0x07
    ec82:	2c 81       	ldd	r18, Y+4	; 0x04
    ec84:	3d 81       	ldd	r19, Y+5	; 0x05
    ec86:	42 17       	cp	r20, r18
    ec88:	53 07       	cpc	r21, r19
    ec8a:	f4 f4       	brge	.+60     	; 0xecc8 <fputc+0x86>
    ec8c:	e8 81       	ld	r30, Y
    ec8e:	f9 81       	ldd	r31, Y+1	; 0x01
    ec90:	9f 01       	movw	r18, r30
    ec92:	2f 5f       	subi	r18, 0xFF	; 255
    ec94:	3f 4f       	sbci	r19, 0xFF	; 255
    ec96:	39 83       	std	Y+1, r19	; 0x01
    ec98:	28 83       	st	Y, r18
    ec9a:	80 83       	st	Z, r24
    ec9c:	15 c0       	rjmp	.+42     	; 0xecc8 <fputc+0x86>
    ec9e:	e8 85       	ldd	r30, Y+8	; 0x08
    eca0:	f9 85       	ldd	r31, Y+9	; 0x09
    eca2:	30 97       	sbiw	r30, 0x00	; 0
    eca4:	59 f4       	brne	.+22     	; 0xecbc <fputc+0x7a>
    eca6:	82 ec       	ldi	r24, 0xC2	; 194
    eca8:	9b e0       	ldi	r25, 0x0B	; 11
    ecaa:	a0 e0       	ldi	r26, 0x00	; 0
    ecac:	ed b7       	in	r30, 0x3d	; 61
    ecae:	fe b7       	in	r31, 0x3e	; 62
    ecb0:	81 83       	std	Z+1, r24	; 0x01
    ecb2:	92 83       	std	Z+2, r25	; 0x02
    ecb4:	a3 83       	std	Z+3, r26	; 0x03
    ecb6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    ecba:	0d c0       	rjmp	.+26     	; 0xecd6 <fputc+0x94>
    ecbc:	be 01       	movw	r22, r28
    ecbe:	09 95       	icall
    ecc0:	8f 3f       	cpi	r24, 0xFF	; 255
    ecc2:	ff ef       	ldi	r31, 0xFF	; 255
    ecc4:	9f 07       	cpc	r25, r31
    ecc6:	39 f0       	breq	.+14     	; 0xecd6 <fputc+0x94>
    ecc8:	2e 81       	ldd	r18, Y+6	; 0x06
    ecca:	3f 81       	ldd	r19, Y+7	; 0x07
    eccc:	2f 5f       	subi	r18, 0xFF	; 255
    ecce:	3f 4f       	sbci	r19, 0xFF	; 255
    ecd0:	3f 83       	std	Y+7, r19	; 0x07
    ecd2:	2e 83       	std	Y+6, r18	; 0x06
    ecd4:	02 c0       	rjmp	.+4      	; 0xecda <fputc+0x98>
    ecd6:	8f ef       	ldi	r24, 0xFF	; 255
    ecd8:	9f ef       	ldi	r25, 0xFF	; 255
    ecda:	cd b7       	in	r28, 0x3d	; 61
    ecdc:	de b7       	in	r29, 0x3e	; 62
    ecde:	23 96       	adiw	r28, 0x03	; 3
    ece0:	e2 e0       	ldi	r30, 0x02	; 2
    ece2:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000ece6 <_fprintf_putc>:
    ece6:	fc 01       	movw	r30, r24
    ece8:	86 2f       	mov	r24, r22
    ecea:	26 81       	ldd	r18, Z+6	; 0x06
    ecec:	37 81       	ldd	r19, Z+7	; 0x07
    ecee:	2f 5f       	subi	r18, 0xFF	; 255
    ecf0:	3f 4f       	sbci	r19, 0xFF	; 255
    ecf2:	37 83       	std	Z+7, r19	; 0x07
    ecf4:	26 83       	std	Z+6, r18	; 0x06
    ecf6:	62 81       	ldd	r22, Z+2	; 0x02
    ecf8:	73 81       	ldd	r23, Z+3	; 0x03
    ecfa:	90 e0       	ldi	r25, 0x00	; 0
    ecfc:	a2 cf       	rjmp	.-188    	; 0xec42 <fputc>
    ecfe:	08 95       	ret

0000ed00 <getchar>:
    ed00:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    ed04:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    ed08:	46 cf       	rjmp	.-372    	; 0xeb96 <fgetc>
    ed0a:	08 95       	ret

0000ed0c <putchar>:
    ed0c:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ed10:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ed14:	96 cf       	rjmp	.-212    	; 0xec42 <fputc>
    ed16:	08 95       	ret

0000ed18 <fgets>:
    ed18:	a0 e0       	ldi	r26, 0x00	; 0
    ed1a:	b0 e0       	ldi	r27, 0x00	; 0
    ed1c:	e2 e9       	ldi	r30, 0x92	; 146
    ed1e:	f6 e7       	ldi	r31, 0x76	; 118
    ed20:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    ed24:	7c 01       	movw	r14, r24
    ed26:	6a 01       	movw	r12, r20
    ed28:	8b 01       	movw	r16, r22
    ed2a:	c0 e0       	ldi	r28, 0x00	; 0
    ed2c:	d0 e0       	ldi	r29, 0x00	; 0
    ed2e:	01 15       	cp	r16, r1
    ed30:	11 05       	cpc	r17, r1
    ed32:	41 f0       	breq	.+16     	; 0xed44 <fgets+0x2c>
    ed34:	c6 01       	movw	r24, r12
    ed36:	2f df       	rcall	.-418    	; 0xeb96 <fgetc>
    ed38:	8f 3f       	cpi	r24, 0xFF	; 255
    ed3a:	2f ef       	ldi	r18, 0xFF	; 255
    ed3c:	92 07       	cpc	r25, r18
    ed3e:	39 f4       	brne	.+14     	; 0xed4e <fgets+0x36>
    ed40:	20 97       	sbiw	r28, 0x00	; 0
    ed42:	b9 f0       	breq	.+46     	; 0xed72 <fgets+0x5a>
    ed44:	ce 0d       	add	r28, r14
    ed46:	df 1d       	adc	r29, r15
    ed48:	18 82       	st	Y, r1
    ed4a:	c7 01       	movw	r24, r14
    ed4c:	14 c0       	rjmp	.+40     	; 0xed76 <fgets+0x5e>
    ed4e:	8a 30       	cpi	r24, 0x0A	; 10
    ed50:	91 05       	cpc	r25, r1
    ed52:	c1 f3       	breq	.-16     	; 0xed44 <fgets+0x2c>
    ed54:	88 30       	cpi	r24, 0x08	; 8
    ed56:	91 05       	cpc	r25, r1
    ed58:	21 f4       	brne	.+8      	; 0xed62 <fgets+0x4a>
    ed5a:	20 97       	sbiw	r28, 0x00	; 0
    ed5c:	39 f0       	breq	.+14     	; 0xed6c <fgets+0x54>
    ed5e:	21 97       	sbiw	r28, 0x01	; 1
    ed60:	05 c0       	rjmp	.+10     	; 0xed6c <fgets+0x54>
    ed62:	f7 01       	movw	r30, r14
    ed64:	ec 0f       	add	r30, r28
    ed66:	fd 1f       	adc	r31, r29
    ed68:	80 83       	st	Z, r24
    ed6a:	21 96       	adiw	r28, 0x01	; 1
    ed6c:	01 50       	subi	r16, 0x01	; 1
    ed6e:	11 09       	sbc	r17, r1
    ed70:	de cf       	rjmp	.-68     	; 0xed2e <fgets+0x16>
    ed72:	80 e0       	ldi	r24, 0x00	; 0
    ed74:	90 e0       	ldi	r25, 0x00	; 0
    ed76:	cd b7       	in	r28, 0x3d	; 61
    ed78:	de b7       	in	r29, 0x3e	; 62
    ed7a:	e8 e0       	ldi	r30, 0x08	; 8
    ed7c:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000ed80 <fputs>:
    ed80:	0f 93       	push	r16
    ed82:	1f 93       	push	r17
    ed84:	cf 93       	push	r28
    ed86:	df 93       	push	r29
    ed88:	8b 01       	movw	r16, r22
    ed8a:	ec 01       	movw	r28, r24
    ed8c:	89 91       	ld	r24, Y+
    ed8e:	88 23       	and	r24, r24
    ed90:	41 f0       	breq	.+16     	; 0xeda2 <fputs+0x22>
    ed92:	b8 01       	movw	r22, r16
    ed94:	90 e0       	ldi	r25, 0x00	; 0
    ed96:	55 df       	rcall	.-342    	; 0xec42 <fputc>
    ed98:	8f 3f       	cpi	r24, 0xFF	; 255
    ed9a:	2f ef       	ldi	r18, 0xFF	; 255
    ed9c:	92 07       	cpc	r25, r18
    ed9e:	b1 f7       	brne	.-20     	; 0xed8c <fputs+0xc>
    eda0:	02 c0       	rjmp	.+4      	; 0xeda6 <fputs+0x26>
    eda2:	80 e0       	ldi	r24, 0x00	; 0
    eda4:	90 e0       	ldi	r25, 0x00	; 0
    eda6:	df 91       	pop	r29
    eda8:	cf 91       	pop	r28
    edaa:	1f 91       	pop	r17
    edac:	0f 91       	pop	r16
    edae:	08 95       	ret

0000edb0 <puts>:
    edb0:	cf 93       	push	r28
    edb2:	df 93       	push	r29
    edb4:	ec 01       	movw	r28, r24
    edb6:	89 91       	ld	r24, Y+
    edb8:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    edbc:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    edc0:	88 23       	and	r24, r24
    edc2:	39 f0       	breq	.+14     	; 0xedd2 <puts+0x22>
    edc4:	90 e0       	ldi	r25, 0x00	; 0
    edc6:	3d df       	rcall	.-390    	; 0xec42 <fputc>
    edc8:	8f 3f       	cpi	r24, 0xFF	; 255
    edca:	2f ef       	ldi	r18, 0xFF	; 255
    edcc:	92 07       	cpc	r25, r18
    edce:	99 f7       	brne	.-26     	; 0xedb6 <puts+0x6>
    edd0:	03 c0       	rjmp	.+6      	; 0xedd8 <puts+0x28>
    edd2:	8a e0       	ldi	r24, 0x0A	; 10
    edd4:	90 e0       	ldi	r25, 0x00	; 0
    edd6:	35 df       	rcall	.-406    	; 0xec42 <fputc>
    edd8:	df 91       	pop	r29
    edda:	cf 91       	pop	r28
    eddc:	08 95       	ret

0000edde <fileno>:
    edde:	00 97       	sbiw	r24, 0x00	; 0
    ede0:	39 f4       	brne	.+14     	; 0xedf0 <fileno+0x12>
    ede2:	89 e0       	ldi	r24, 0x09	; 9
    ede4:	90 e0       	ldi	r25, 0x00	; 0
    ede6:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    edea:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    edee:	0e c0       	rjmp	.+28     	; 0xee0c <fileno+0x2e>
    edf0:	ef eb       	ldi	r30, 0xBF	; 191
    edf2:	fc e1       	ldi	r31, 0x1C	; 28
    edf4:	20 e0       	ldi	r18, 0x00	; 0
    edf6:	30 e0       	ldi	r19, 0x00	; 0
    edf8:	41 91       	ld	r20, Z+
    edfa:	51 91       	ld	r21, Z+
    edfc:	84 17       	cp	r24, r20
    edfe:	95 07       	cpc	r25, r21
    ee00:	41 f0       	breq	.+16     	; 0xee12 <fileno+0x34>
    ee02:	2f 5f       	subi	r18, 0xFF	; 255
    ee04:	3f 4f       	sbci	r19, 0xFF	; 255
    ee06:	20 31       	cpi	r18, 0x10	; 16
    ee08:	31 05       	cpc	r19, r1
    ee0a:	b1 f7       	brne	.-20     	; 0xedf8 <fileno+0x1a>
    ee0c:	8f ef       	ldi	r24, 0xFF	; 255
    ee0e:	9f ef       	ldi	r25, 0xFF	; 255
    ee10:	08 95       	ret
    ee12:	c9 01       	movw	r24, r18
    ee14:	08 95       	ret

0000ee16 <fileno_to_stream>:
    ee16:	80 31       	cpi	r24, 0x10	; 16
    ee18:	91 05       	cpc	r25, r1
    ee1a:	48 f4       	brcc	.+18     	; 0xee2e <fileno_to_stream+0x18>
    ee1c:	88 0f       	add	r24, r24
    ee1e:	99 1f       	adc	r25, r25
    ee20:	fc 01       	movw	r30, r24
    ee22:	e1 54       	subi	r30, 0x41	; 65
    ee24:	f3 4e       	sbci	r31, 0xE3	; 227
    ee26:	80 81       	ld	r24, Z
    ee28:	91 81       	ldd	r25, Z+1	; 0x01
    ee2a:	00 97       	sbiw	r24, 0x00	; 0
    ee2c:	41 f4       	brne	.+16     	; 0xee3e <fileno_to_stream+0x28>
    ee2e:	89 e0       	ldi	r24, 0x09	; 9
    ee30:	90 e0       	ldi	r25, 0x00	; 0
    ee32:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ee36:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ee3a:	80 e0       	ldi	r24, 0x00	; 0
    ee3c:	90 e0       	ldi	r25, 0x00	; 0
    ee3e:	08 95       	ret

0000ee40 <mctime>:
    ee40:	a4 e0       	ldi	r26, 0x04	; 4
    ee42:	b0 e0       	ldi	r27, 0x00	; 0
    ee44:	e6 e2       	ldi	r30, 0x26	; 38
    ee46:	f7 e7       	ldi	r31, 0x77	; 119
    ee48:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    ee4c:	69 83       	std	Y+1, r22	; 0x01
    ee4e:	7a 83       	std	Y+2, r23	; 0x02
    ee50:	8b 83       	std	Y+3, r24	; 0x03
    ee52:	9c 83       	std	Y+4, r25	; 0x04
    ee54:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ee58:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ee5c:	ce 01       	movw	r24, r28
    ee5e:	01 96       	adiw	r24, 0x01	; 1
    ee60:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <ctime_gm>
    ee64:	fc 01       	movw	r30, r24
    ee66:	01 90       	ld	r0, Z+
    ee68:	00 20       	and	r0, r0
    ee6a:	e9 f7       	brne	.-6      	; 0xee66 <mctime+0x26>
    ee6c:	31 97       	sbiw	r30, 0x01	; 1
    ee6e:	e8 1b       	sub	r30, r24
    ee70:	f9 0b       	sbc	r31, r25
    ee72:	39 f0       	breq	.+14     	; 0xee82 <mctime+0x42>
    ee74:	31 97       	sbiw	r30, 0x01	; 1
    ee76:	e8 0f       	add	r30, r24
    ee78:	f9 1f       	adc	r31, r25
    ee7a:	20 81       	ld	r18, Z
    ee7c:	2a 30       	cpi	r18, 0x0A	; 10
    ee7e:	09 f4       	brne	.+2      	; 0xee82 <mctime+0x42>
    ee80:	10 82       	st	Z, r1
    ee82:	24 96       	adiw	r28, 0x04	; 4
    ee84:	e2 e0       	ldi	r30, 0x02	; 2
    ee86:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000ee8a <basename>:
    ee8a:	00 97       	sbiw	r24, 0x00	; 0
    ee8c:	49 f0       	breq	.+18     	; 0xeea0 <basename+0x16>
    ee8e:	fc 01       	movw	r30, r24
    ee90:	21 91       	ld	r18, Z+
    ee92:	22 23       	and	r18, r18
    ee94:	21 f0       	breq	.+8      	; 0xee9e <basename+0x14>
    ee96:	2f 32       	cpi	r18, 0x2F	; 47
    ee98:	d9 f7       	brne	.-10     	; 0xee90 <basename+0x6>
    ee9a:	cf 01       	movw	r24, r30
    ee9c:	f9 cf       	rjmp	.-14     	; 0xee90 <basename+0x6>
    ee9e:	08 95       	ret
    eea0:	80 e2       	ldi	r24, 0x20	; 32
    eea2:	9c e0       	ldi	r25, 0x0C	; 12
    eea4:	08 95       	ret

0000eea6 <chdir>:
    eea6:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eeaa:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eeae:	0e 94 0d 5f 	call	0xbe1a	; 0xbe1a <f_chdir>
    eeb2:	00 97       	sbiw	r24, 0x00	; 0
    eeb4:	a1 f0       	breq	.+40     	; 0xeede <chdir+0x38>
    eeb6:	84 31       	cpi	r24, 0x14	; 20
    eeb8:	91 05       	cpc	r25, r1
    eeba:	40 f4       	brcc	.+16     	; 0xeecc <chdir+0x26>
    eebc:	fc 01       	movw	r30, r24
    eebe:	ea 55       	subi	r30, 0x5A	; 90
    eec0:	f4 4f       	sbci	r31, 0xF4	; 244
    eec2:	80 81       	ld	r24, Z
    eec4:	08 2e       	mov	r0, r24
    eec6:	00 0c       	add	r0, r0
    eec8:	99 0b       	sbc	r25, r25
    eeca:	02 c0       	rjmp	.+4      	; 0xeed0 <chdir+0x2a>
    eecc:	83 e2       	ldi	r24, 0x23	; 35
    eece:	90 e0       	ldi	r25, 0x00	; 0
    eed0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eed4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eed8:	8f ef       	ldi	r24, 0xFF	; 255
    eeda:	9f ef       	ldi	r25, 0xFF	; 255
    eedc:	08 95       	ret
    eede:	80 e0       	ldi	r24, 0x00	; 0
    eee0:	90 e0       	ldi	r25, 0x00	; 0
    eee2:	08 95       	ret

0000eee4 <chmod>:
    eee4:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eee8:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eeec:	42 79       	andi	r20, 0x92	; 146
    eeee:	55 27       	eor	r21, r21
    eef0:	66 27       	eor	r22, r22
    eef2:	77 27       	eor	r23, r23
    eef4:	45 2b       	or	r20, r21
    eef6:	46 2b       	or	r20, r22
    eef8:	47 2b       	or	r20, r23
    eefa:	19 f0       	breq	.+6      	; 0xef02 <chmod+0x1e>
    eefc:	80 e0       	ldi	r24, 0x00	; 0
    eefe:	90 e0       	ldi	r25, 0x00	; 0
    ef00:	08 95       	ret
    ef02:	41 e0       	ldi	r20, 0x01	; 1
    ef04:	61 e0       	ldi	r22, 0x01	; 1
    ef06:	0e 94 ed 67 	call	0xcfda	; 0xcfda <f_chmod>
    ef0a:	00 97       	sbiw	r24, 0x00	; 0
    ef0c:	b9 f3       	breq	.-18     	; 0xeefc <chmod+0x18>
    ef0e:	84 31       	cpi	r24, 0x14	; 20
    ef10:	91 05       	cpc	r25, r1
    ef12:	40 f4       	brcc	.+16     	; 0xef24 <chmod+0x40>
    ef14:	fc 01       	movw	r30, r24
    ef16:	ea 55       	subi	r30, 0x5A	; 90
    ef18:	f4 4f       	sbci	r31, 0xF4	; 244
    ef1a:	80 81       	ld	r24, Z
    ef1c:	08 2e       	mov	r0, r24
    ef1e:	00 0c       	add	r0, r0
    ef20:	99 0b       	sbc	r25, r25
    ef22:	02 c0       	rjmp	.+4      	; 0xef28 <chmod+0x44>
    ef24:	83 e2       	ldi	r24, 0x23	; 35
    ef26:	90 e0       	ldi	r25, 0x00	; 0
    ef28:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ef2c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ef30:	8f ef       	ldi	r24, 0xFF	; 255
    ef32:	9f ef       	ldi	r25, 0xFF	; 255
    ef34:	08 95       	ret

0000ef36 <getcwd>:
    ef36:	cf 93       	push	r28
    ef38:	df 93       	push	r29
    ef3a:	d8 2f       	mov	r29, r24
    ef3c:	c9 2f       	mov	r28, r25
    ef3e:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ef42:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ef46:	0e 94 68 5f 	call	0xbed0	; 0xbed0 <f_getcwd>
    ef4a:	00 97       	sbiw	r24, 0x00	; 0
    ef4c:	a1 f0       	breq	.+40     	; 0xef76 <getcwd+0x40>
    ef4e:	84 31       	cpi	r24, 0x14	; 20
    ef50:	91 05       	cpc	r25, r1
    ef52:	40 f4       	brcc	.+16     	; 0xef64 <getcwd+0x2e>
    ef54:	fc 01       	movw	r30, r24
    ef56:	ea 55       	subi	r30, 0x5A	; 90
    ef58:	f4 4f       	sbci	r31, 0xF4	; 244
    ef5a:	80 81       	ld	r24, Z
    ef5c:	08 2e       	mov	r0, r24
    ef5e:	00 0c       	add	r0, r0
    ef60:	99 0b       	sbc	r25, r25
    ef62:	02 c0       	rjmp	.+4      	; 0xef68 <getcwd+0x32>
    ef64:	83 e2       	ldi	r24, 0x23	; 35
    ef66:	90 e0       	ldi	r25, 0x00	; 0
    ef68:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ef6c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ef70:	80 e0       	ldi	r24, 0x00	; 0
    ef72:	90 e0       	ldi	r25, 0x00	; 0
    ef74:	02 c0       	rjmp	.+4      	; 0xef7a <getcwd+0x44>
    ef76:	8d 2f       	mov	r24, r29
    ef78:	9c 2f       	mov	r25, r28
    ef7a:	df 91       	pop	r29
    ef7c:	cf 91       	pop	r28
    ef7e:	08 95       	ret

0000ef80 <mkdir>:
    ef80:	cf 93       	push	r28
    ef82:	df 93       	push	r29
    ef84:	ec 01       	movw	r28, r24
    ef86:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ef8a:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ef8e:	41 15       	cp	r20, r1
    ef90:	51 05       	cpc	r21, r1
    ef92:	61 05       	cpc	r22, r1
    ef94:	71 05       	cpc	r23, r1
    ef96:	41 f4       	brne	.+16     	; 0xefa8 <mkdir+0x28>
    ef98:	ce 01       	movw	r24, r28
    ef9a:	0e 94 e8 65 	call	0xcbd0	; 0xcbd0 <f_mkdir>
    ef9e:	00 97       	sbiw	r24, 0x00	; 0
    efa0:	39 f4       	brne	.+14     	; 0xefb0 <mkdir+0x30>
    efa2:	80 e0       	ldi	r24, 0x00	; 0
    efa4:	90 e0       	ldi	r25, 0x00	; 0
    efa6:	17 c0       	rjmp	.+46     	; 0xefd6 <mkdir+0x56>
    efa8:	9d df       	rcall	.-198    	; 0xeee4 <chmod>
    efaa:	89 2b       	or	r24, r25
    efac:	a9 f3       	breq	.-22     	; 0xef98 <mkdir+0x18>
    efae:	11 c0       	rjmp	.+34     	; 0xefd2 <mkdir+0x52>
    efb0:	84 31       	cpi	r24, 0x14	; 20
    efb2:	91 05       	cpc	r25, r1
    efb4:	40 f4       	brcc	.+16     	; 0xefc6 <mkdir+0x46>
    efb6:	fc 01       	movw	r30, r24
    efb8:	ea 55       	subi	r30, 0x5A	; 90
    efba:	f4 4f       	sbci	r31, 0xF4	; 244
    efbc:	80 81       	ld	r24, Z
    efbe:	08 2e       	mov	r0, r24
    efc0:	00 0c       	add	r0, r0
    efc2:	99 0b       	sbc	r25, r25
    efc4:	02 c0       	rjmp	.+4      	; 0xefca <mkdir+0x4a>
    efc6:	83 e2       	ldi	r24, 0x23	; 35
    efc8:	90 e0       	ldi	r25, 0x00	; 0
    efca:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    efce:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    efd2:	8f ef       	ldi	r24, 0xFF	; 255
    efd4:	9f ef       	ldi	r25, 0xFF	; 255
    efd6:	df 91       	pop	r29
    efd8:	cf 91       	pop	r28
    efda:	08 95       	ret

0000efdc <rename>:
    efdc:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    efe0:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    efe4:	0e 94 d8 66 	call	0xcdb0	; 0xcdb0 <f_rename>
    efe8:	00 97       	sbiw	r24, 0x00	; 0
    efea:	a1 f0       	breq	.+40     	; 0xf014 <rename+0x38>
    efec:	84 31       	cpi	r24, 0x14	; 20
    efee:	91 05       	cpc	r25, r1
    eff0:	40 f4       	brcc	.+16     	; 0xf002 <rename+0x26>
    eff2:	fc 01       	movw	r30, r24
    eff4:	ea 55       	subi	r30, 0x5A	; 90
    eff6:	f4 4f       	sbci	r31, 0xF4	; 244
    eff8:	80 81       	ld	r24, Z
    effa:	08 2e       	mov	r0, r24
    effc:	00 0c       	add	r0, r0
    effe:	99 0b       	sbc	r25, r25
    f000:	02 c0       	rjmp	.+4      	; 0xf006 <rename+0x2a>
    f002:	83 e2       	ldi	r24, 0x23	; 35
    f004:	90 e0       	ldi	r25, 0x00	; 0
    f006:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f00a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f00e:	8f ef       	ldi	r24, 0xFF	; 255
    f010:	9f ef       	ldi	r25, 0xFF	; 255
    f012:	08 95       	ret
    f014:	80 e0       	ldi	r24, 0x00	; 0
    f016:	90 e0       	ldi	r25, 0x00	; 0
    f018:	08 95       	ret

0000f01a <unlink>:
    f01a:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f01e:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f022:	0e 94 41 65 	call	0xca82	; 0xca82 <f_unlink>
    f026:	00 97       	sbiw	r24, 0x00	; 0
    f028:	a1 f0       	breq	.+40     	; 0xf052 <unlink+0x38>
    f02a:	84 31       	cpi	r24, 0x14	; 20
    f02c:	91 05       	cpc	r25, r1
    f02e:	40 f4       	brcc	.+16     	; 0xf040 <unlink+0x26>
    f030:	fc 01       	movw	r30, r24
    f032:	ea 55       	subi	r30, 0x5A	; 90
    f034:	f4 4f       	sbci	r31, 0xF4	; 244
    f036:	80 81       	ld	r24, Z
    f038:	08 2e       	mov	r0, r24
    f03a:	00 0c       	add	r0, r0
    f03c:	99 0b       	sbc	r25, r25
    f03e:	02 c0       	rjmp	.+4      	; 0xf044 <unlink+0x2a>
    f040:	83 e2       	ldi	r24, 0x23	; 35
    f042:	90 e0       	ldi	r25, 0x00	; 0
    f044:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f048:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f04c:	8f ef       	ldi	r24, 0xFF	; 255
    f04e:	9f ef       	ldi	r25, 0xFF	; 255
    f050:	08 95       	ret
    f052:	80 e0       	ldi	r24, 0x00	; 0
    f054:	90 e0       	ldi	r25, 0x00	; 0
    f056:	08 95       	ret

0000f058 <rmdir>:
    f058:	e0 cf       	rjmp	.-64     	; 0xf01a <unlink>
    f05a:	08 95       	ret

0000f05c <closedir>:
    f05c:	0e 94 ca 63 	call	0xc794	; 0xc794 <f_closedir>
    f060:	00 97       	sbiw	r24, 0x00	; 0
    f062:	a1 f0       	breq	.+40     	; 0xf08c <closedir+0x30>
    f064:	84 31       	cpi	r24, 0x14	; 20
    f066:	91 05       	cpc	r25, r1
    f068:	40 f4       	brcc	.+16     	; 0xf07a <closedir+0x1e>
    f06a:	fc 01       	movw	r30, r24
    f06c:	ea 55       	subi	r30, 0x5A	; 90
    f06e:	f4 4f       	sbci	r31, 0xF4	; 244
    f070:	80 81       	ld	r24, Z
    f072:	08 2e       	mov	r0, r24
    f074:	00 0c       	add	r0, r0
    f076:	99 0b       	sbc	r25, r25
    f078:	02 c0       	rjmp	.+4      	; 0xf07e <closedir+0x22>
    f07a:	83 e2       	ldi	r24, 0x23	; 35
    f07c:	90 e0       	ldi	r25, 0x00	; 0
    f07e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f082:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f086:	8f ef       	ldi	r24, 0xFF	; 255
    f088:	9f ef       	ldi	r25, 0xFF	; 255
    f08a:	08 95       	ret
    f08c:	80 e0       	ldi	r24, 0x00	; 0
    f08e:	90 e0       	ldi	r25, 0x00	; 0
    f090:	08 95       	ret

0000f092 <opendir>:
    f092:	bc 01       	movw	r22, r24
    f094:	80 e3       	ldi	r24, 0x30	; 48
    f096:	99 e1       	ldi	r25, 0x19	; 25
    f098:	0e 94 59 63 	call	0xc6b2	; 0xc6b2 <f_opendir>
    f09c:	00 97       	sbiw	r24, 0x00	; 0
    f09e:	a1 f0       	breq	.+40     	; 0xf0c8 <opendir+0x36>
    f0a0:	84 31       	cpi	r24, 0x14	; 20
    f0a2:	91 05       	cpc	r25, r1
    f0a4:	40 f4       	brcc	.+16     	; 0xf0b6 <opendir+0x24>
    f0a6:	fc 01       	movw	r30, r24
    f0a8:	ea 55       	subi	r30, 0x5A	; 90
    f0aa:	f4 4f       	sbci	r31, 0xF4	; 244
    f0ac:	80 81       	ld	r24, Z
    f0ae:	08 2e       	mov	r0, r24
    f0b0:	00 0c       	add	r0, r0
    f0b2:	99 0b       	sbc	r25, r25
    f0b4:	02 c0       	rjmp	.+4      	; 0xf0ba <opendir+0x28>
    f0b6:	83 e2       	ldi	r24, 0x23	; 35
    f0b8:	90 e0       	ldi	r25, 0x00	; 0
    f0ba:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f0be:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f0c2:	80 e0       	ldi	r24, 0x00	; 0
    f0c4:	90 e0       	ldi	r25, 0x00	; 0
    f0c6:	08 95       	ret
    f0c8:	80 e3       	ldi	r24, 0x30	; 48
    f0ca:	99 e1       	ldi	r25, 0x19	; 25
    f0cc:	08 95       	ret

0000f0ce <readdir>:
    f0ce:	a6 e1       	ldi	r26, 0x16	; 22
    f0d0:	b1 e0       	ldi	r27, 0x01	; 1
    f0d2:	ed e6       	ldi	r30, 0x6D	; 109
    f0d4:	f8 e7       	ldi	r31, 0x78	; 120
    f0d6:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    f0da:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_de>
    f0de:	be 01       	movw	r22, r28
    f0e0:	6f 5f       	subi	r22, 0xFF	; 255
    f0e2:	7f 4f       	sbci	r23, 0xFF	; 255
    f0e4:	0e 94 df 63 	call	0xc7be	; 0xc7be <f_readdir>
    f0e8:	00 97       	sbiw	r24, 0x00	; 0
    f0ea:	a1 f0       	breq	.+40     	; 0xf114 <readdir+0x46>
    f0ec:	84 31       	cpi	r24, 0x14	; 20
    f0ee:	91 05       	cpc	r25, r1
    f0f0:	40 f4       	brcc	.+16     	; 0xf102 <readdir+0x34>
    f0f2:	fc 01       	movw	r30, r24
    f0f4:	ea 55       	subi	r30, 0x5A	; 90
    f0f6:	f4 4f       	sbci	r31, 0xF4	; 244
    f0f8:	80 81       	ld	r24, Z
    f0fa:	08 2e       	mov	r0, r24
    f0fc:	00 0c       	add	r0, r0
    f0fe:	99 0b       	sbc	r25, r25
    f100:	02 c0       	rjmp	.+4      	; 0xf106 <readdir+0x38>
    f102:	83 e2       	ldi	r24, 0x23	; 35
    f104:	90 e0       	ldi	r25, 0x00	; 0
    f106:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f10a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f10e:	80 e0       	ldi	r24, 0x00	; 0
    f110:	90 e0       	ldi	r25, 0x00	; 0
    f112:	16 c0       	rjmp	.+44     	; 0xf140 <readdir+0x72>
    f114:	be 01       	movw	r22, r28
    f116:	69 5e       	subi	r22, 0xE9	; 233
    f118:	7f 4f       	sbci	r23, 0xFF	; 255
    f11a:	fb 01       	movw	r30, r22
    f11c:	01 90       	ld	r0, Z+
    f11e:	00 20       	and	r0, r0
    f120:	e9 f7       	brne	.-6      	; 0xf11c <readdir+0x4e>
    f122:	31 97       	sbiw	r30, 0x01	; 1
    f124:	8f 01       	movw	r16, r30
    f126:	06 1b       	sub	r16, r22
    f128:	17 0b       	sbc	r17, r23
    f12a:	a8 01       	movw	r20, r16
    f12c:	80 e3       	ldi	r24, 0x30	; 48
    f12e:	98 e1       	ldi	r25, 0x18	; 24
    f130:	0e 94 7e 31 	call	0x62fc	; 0x62fc <strncpy>
    f134:	f8 01       	movw	r30, r16
    f136:	e0 5d       	subi	r30, 0xD0	; 208
    f138:	f7 4e       	sbci	r31, 0xE7	; 231
    f13a:	10 82       	st	Z, r1
    f13c:	80 e3       	ldi	r24, 0x30	; 48
    f13e:	98 e1       	ldi	r25, 0x18	; 24
    f140:	ca 5e       	subi	r28, 0xEA	; 234
    f142:	de 4f       	sbci	r29, 0xFE	; 254
    f144:	e4 e0       	ldi	r30, 0x04	; 4
    f146:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

0000f14a <perror>:
    f14a:	ad b7       	in	r26, 0x3d	; 61
    f14c:	be b7       	in	r27, 0x3e	; 62
    f14e:	17 97       	sbiw	r26, 0x07	; 7
    f150:	0f b6       	in	r0, 0x3f	; 63
    f152:	f8 94       	cli
    f154:	be bf       	out	0x3e, r27	; 62
    f156:	0f be       	out	0x3f, r0	; 63
    f158:	ad bf       	out	0x3d, r26	; 61
    f15a:	20 91 bd 1c 	lds	r18, 0x1CBD	; 0x801cbd <errno>
    f15e:	30 91 be 1c 	lds	r19, 0x1CBE	; 0x801cbe <errno+0x1>
    f162:	23 32       	cpi	r18, 0x23	; 35
    f164:	31 05       	cpc	r19, r1
    f166:	40 f4       	brcc	.+16     	; 0xf178 <perror+0x2e>
    f168:	22 0f       	add	r18, r18
    f16a:	33 1f       	adc	r19, r19
    f16c:	f9 01       	movw	r30, r18
    f16e:	ea 5c       	subi	r30, 0xCA	; 202
    f170:	fe 4f       	sbci	r31, 0xFE	; 254
    f172:	20 81       	ld	r18, Z
    f174:	31 81       	ldd	r19, Z+1	; 0x01
    f176:	04 c0       	rjmp	.+8      	; 0xf180 <perror+0x36>
    f178:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f17c:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f180:	00 97       	sbiw	r24, 0x00	; 0
    f182:	99 f0       	breq	.+38     	; 0xf1aa <perror+0x60>
    f184:	fc 01       	movw	r30, r24
    f186:	40 81       	ld	r20, Z
    f188:	44 23       	and	r20, r20
    f18a:	79 f0       	breq	.+30     	; 0xf1aa <perror+0x60>
    f18c:	ed b7       	in	r30, 0x3d	; 61
    f18e:	fe b7       	in	r31, 0x3e	; 62
    f190:	37 83       	std	Z+7, r19	; 0x07
    f192:	26 83       	std	Z+6, r18	; 0x06
    f194:	95 83       	std	Z+5, r25	; 0x05
    f196:	84 83       	std	Z+4, r24	; 0x04
    f198:	8e ea       	ldi	r24, 0xAE	; 174
    f19a:	9b e0       	ldi	r25, 0x0B	; 11
    f19c:	a0 e0       	ldi	r26, 0x00	; 0
    f19e:	81 83       	std	Z+1, r24	; 0x01
    f1a0:	92 83       	std	Z+2, r25	; 0x02
    f1a2:	a3 83       	std	Z+3, r26	; 0x03
    f1a4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    f1a8:	0c c0       	rjmp	.+24     	; 0xf1c2 <perror+0x78>
    f1aa:	ed b7       	in	r30, 0x3d	; 61
    f1ac:	fe b7       	in	r31, 0x3e	; 62
    f1ae:	35 83       	std	Z+5, r19	; 0x05
    f1b0:	24 83       	std	Z+4, r18	; 0x04
    f1b2:	8a ea       	ldi	r24, 0xAA	; 170
    f1b4:	9b e0       	ldi	r25, 0x0B	; 11
    f1b6:	a0 e0       	ldi	r26, 0x00	; 0
    f1b8:	81 83       	std	Z+1, r24	; 0x01
    f1ba:	92 83       	std	Z+2, r25	; 0x02
    f1bc:	a3 83       	std	Z+3, r26	; 0x03
    f1be:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    f1c2:	ad b7       	in	r26, 0x3d	; 61
    f1c4:	be b7       	in	r27, 0x3e	; 62
    f1c6:	17 96       	adiw	r26, 0x07	; 7
    f1c8:	0f b6       	in	r0, 0x3f	; 63
    f1ca:	f8 94       	cli
    f1cc:	be bf       	out	0x3e, r27	; 62
    f1ce:	0f be       	out	0x3f, r0	; 63
    f1d0:	ad bf       	out	0x3d, r26	; 61
    f1d2:	08 95       	ret

0000f1d4 <fdevopen>:
    f1d4:	0f 93       	push	r16
    f1d6:	1f 93       	push	r17
    f1d8:	cf 93       	push	r28
    f1da:	df 93       	push	r29
    f1dc:	00 97       	sbiw	r24, 0x00	; 0
    f1de:	31 f4       	brne	.+12     	; 0xf1ec <fdevopen+0x18>
    f1e0:	61 15       	cp	r22, r1
    f1e2:	71 05       	cpc	r23, r1
    f1e4:	19 f4       	brne	.+6      	; 0xf1ec <fdevopen+0x18>
    f1e6:	80 e0       	ldi	r24, 0x00	; 0
    f1e8:	90 e0       	ldi	r25, 0x00	; 0
    f1ea:	3a c0       	rjmp	.+116    	; 0xf260 <fdevopen+0x8c>
    f1ec:	8b 01       	movw	r16, r22
    f1ee:	ec 01       	movw	r28, r24
    f1f0:	6e e0       	ldi	r22, 0x0E	; 14
    f1f2:	70 e0       	ldi	r23, 0x00	; 0
    f1f4:	81 e0       	ldi	r24, 0x01	; 1
    f1f6:	90 e0       	ldi	r25, 0x00	; 0
    f1f8:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
    f1fc:	fc 01       	movw	r30, r24
    f1fe:	89 2b       	or	r24, r25
    f200:	91 f3       	breq	.-28     	; 0xf1e6 <fdevopen+0x12>
    f202:	80 e8       	ldi	r24, 0x80	; 128
    f204:	83 83       	std	Z+3, r24	; 0x03
    f206:	01 15       	cp	r16, r1
    f208:	11 05       	cpc	r17, r1
    f20a:	71 f0       	breq	.+28     	; 0xf228 <fdevopen+0x54>
    f20c:	13 87       	std	Z+11, r17	; 0x0b
    f20e:	02 87       	std	Z+10, r16	; 0x0a
    f210:	81 e8       	ldi	r24, 0x81	; 129
    f212:	83 83       	std	Z+3, r24	; 0x03
    f214:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f218:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f21c:	89 2b       	or	r24, r25
    f21e:	21 f4       	brne	.+8      	; 0xf228 <fdevopen+0x54>
    f220:	f0 93 c0 1c 	sts	0x1CC0, r31	; 0x801cc0 <__iob+0x1>
    f224:	e0 93 bf 1c 	sts	0x1CBF, r30	; 0x801cbf <__iob>
    f228:	20 97       	sbiw	r28, 0x00	; 0
    f22a:	c9 f0       	breq	.+50     	; 0xf25e <fdevopen+0x8a>
    f22c:	d1 87       	std	Z+9, r29	; 0x09
    f22e:	c0 87       	std	Z+8, r28	; 0x08
    f230:	83 81       	ldd	r24, Z+3	; 0x03
    f232:	82 60       	ori	r24, 0x02	; 2
    f234:	83 83       	std	Z+3, r24	; 0x03
    f236:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f23a:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f23e:	89 2b       	or	r24, r25
    f240:	21 f4       	brne	.+8      	; 0xf24a <fdevopen+0x76>
    f242:	f0 93 c2 1c 	sts	0x1CC2, r31	; 0x801cc2 <__iob+0x3>
    f246:	e0 93 c1 1c 	sts	0x1CC1, r30	; 0x801cc1 <__iob+0x2>
    f24a:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f24e:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f252:	89 2b       	or	r24, r25
    f254:	21 f4       	brne	.+8      	; 0xf25e <fdevopen+0x8a>
    f256:	f0 93 c4 1c 	sts	0x1CC4, r31	; 0x801cc4 <__iob+0x5>
    f25a:	e0 93 c3 1c 	sts	0x1CC3, r30	; 0x801cc3 <__iob+0x4>
    f25e:	cf 01       	movw	r24, r30
    f260:	df 91       	pop	r29
    f262:	cf 91       	pop	r28
    f264:	1f 91       	pop	r17
    f266:	0f 91       	pop	r16
    f268:	08 95       	ret

0000f26a <fat_time_to_unix>:
    f26a:	a6 e1       	ldi	r26, 0x16	; 22
    f26c:	b0 e0       	ldi	r27, 0x00	; 0
    f26e:	eb e3       	ldi	r30, 0x3B	; 59
    f270:	f9 e7       	ldi	r31, 0x79	; 121
    f272:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    f276:	fe 01       	movw	r30, r28
    f278:	31 96       	adiw	r30, 0x01	; 1
    f27a:	26 e1       	ldi	r18, 0x16	; 22
    f27c:	df 01       	movw	r26, r30
    f27e:	1d 92       	st	X+, r1
    f280:	2a 95       	dec	r18
    f282:	e9 f7       	brne	.-6      	; 0xf27e <fat_time_to_unix+0x14>
    f284:	9b 01       	movw	r18, r22
    f286:	22 0f       	add	r18, r18
    f288:	33 1f       	adc	r19, r19
    f28a:	2e 73       	andi	r18, 0x3E	; 62
    f28c:	33 27       	eor	r19, r19
    f28e:	3a 83       	std	Y+2, r19	; 0x02
    f290:	29 83       	std	Y+1, r18	; 0x01
    f292:	9b 01       	movw	r18, r22
    f294:	55 e0       	ldi	r21, 0x05	; 5
    f296:	36 95       	lsr	r19
    f298:	27 95       	ror	r18
    f29a:	5a 95       	dec	r21
    f29c:	e1 f7       	brne	.-8      	; 0xf296 <fat_time_to_unix+0x2c>
    f29e:	2f 73       	andi	r18, 0x3F	; 63
    f2a0:	33 27       	eor	r19, r19
    f2a2:	3c 83       	std	Y+4, r19	; 0x04
    f2a4:	2b 83       	std	Y+3, r18	; 0x03
    f2a6:	27 2f       	mov	r18, r23
    f2a8:	26 95       	lsr	r18
    f2aa:	26 95       	lsr	r18
    f2ac:	26 95       	lsr	r18
    f2ae:	2d 83       	std	Y+5, r18	; 0x05
    f2b0:	1e 82       	std	Y+6, r1	; 0x06
    f2b2:	9c 01       	movw	r18, r24
    f2b4:	2f 71       	andi	r18, 0x1F	; 31
    f2b6:	33 27       	eor	r19, r19
    f2b8:	38 87       	std	Y+8, r19	; 0x08
    f2ba:	2f 83       	std	Y+7, r18	; 0x07
    f2bc:	9c 01       	movw	r18, r24
    f2be:	65 e0       	ldi	r22, 0x05	; 5
    f2c0:	36 95       	lsr	r19
    f2c2:	27 95       	ror	r18
    f2c4:	6a 95       	dec	r22
    f2c6:	e1 f7       	brne	.-8      	; 0xf2c0 <fat_time_to_unix+0x56>
    f2c8:	2f 70       	andi	r18, 0x0F	; 15
    f2ca:	33 27       	eor	r19, r19
    f2cc:	21 50       	subi	r18, 0x01	; 1
    f2ce:	31 09       	sbc	r19, r1
    f2d0:	3a 87       	std	Y+10, r19	; 0x0a
    f2d2:	29 87       	std	Y+9, r18	; 0x09
    f2d4:	9c 01       	movw	r18, r24
    f2d6:	23 2f       	mov	r18, r19
    f2d8:	33 27       	eor	r19, r19
    f2da:	26 95       	lsr	r18
    f2dc:	20 5b       	subi	r18, 0xB0	; 176
    f2de:	3f 4f       	sbci	r19, 0xFF	; 255
    f2e0:	3c 87       	std	Y+12, r19	; 0x0c
    f2e2:	2b 87       	std	Y+11, r18	; 0x0b
    f2e4:	cf 01       	movw	r24, r30
    f2e6:	0e 94 99 3a 	call	0x7532	; 0x7532 <timegm>
    f2ea:	66 96       	adiw	r28, 0x16	; 22
    f2ec:	e2 e0       	ldi	r30, 0x02	; 2
    f2ee:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000f2f2 <stat>:
    f2f2:	a6 e1       	ldi	r26, 0x16	; 22
    f2f4:	b1 e0       	ldi	r27, 0x01	; 1
    f2f6:	ef e7       	ldi	r30, 0x7F	; 127
    f2f8:	f9 e7       	ldi	r31, 0x79	; 121
    f2fa:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
    f2fe:	6c 01       	movw	r12, r24
    f300:	8b 01       	movw	r16, r22
    f302:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f306:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f30a:	6c ef       	ldi	r22, 0xFC	; 252
    f30c:	78 e0       	ldi	r23, 0x08	; 8
    f30e:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
    f312:	89 2b       	or	r24, r25
    f314:	01 f1       	breq	.+64     	; 0xf356 <stat+0x64>
    f316:	f8 01       	movw	r30, r16
    f318:	14 a2       	std	Z+36, r1	; 0x24
    f31a:	15 a2       	std	Z+37, r1	; 0x25
    f31c:	16 a2       	std	Z+38, r1	; 0x26
    f31e:	17 a2       	std	Z+39, r1	; 0x27
    f320:	10 a6       	std	Z+40, r1	; 0x28
    f322:	11 a6       	std	Z+41, r1	; 0x29
    f324:	12 a6       	std	Z+42, r1	; 0x2a
    f326:	13 a6       	std	Z+43, r1	; 0x2b
    f328:	14 a6       	std	Z+44, r1	; 0x2c
    f32a:	15 a6       	std	Z+45, r1	; 0x2d
    f32c:	16 a6       	std	Z+46, r1	; 0x2e
    f32e:	17 a6       	std	Z+47, r1	; 0x2f
    f330:	11 8a       	std	Z+17, r1	; 0x11
    f332:	10 8a       	std	Z+16, r1	; 0x10
    f334:	13 8a       	std	Z+19, r1	; 0x13
    f336:	12 8a       	std	Z+18, r1	; 0x12
    f338:	10 8e       	std	Z+24, r1	; 0x18
    f33a:	11 8e       	std	Z+25, r1	; 0x19
    f33c:	12 8e       	std	Z+26, r1	; 0x1a
    f33e:	13 8e       	std	Z+27, r1	; 0x1b
    f340:	80 e0       	ldi	r24, 0x00	; 0
    f342:	90 e4       	ldi	r25, 0x40	; 64
    f344:	a0 e0       	ldi	r26, 0x00	; 0
    f346:	b0 e0       	ldi	r27, 0x00	; 0
    f348:	80 87       	std	Z+8, r24	; 0x08
    f34a:	91 87       	std	Z+9, r25	; 0x09
    f34c:	a2 87       	std	Z+10, r26	; 0x0a
    f34e:	b3 87       	std	Z+11, r27	; 0x0b
    f350:	e1 2c       	mov	r14, r1
    f352:	f1 2c       	mov	r15, r1
    f354:	62 c0       	rjmp	.+196    	; 0xf41a <stat+0x128>
    f356:	66 ea       	ldi	r22, 0xA6	; 166
    f358:	78 e0       	ldi	r23, 0x08	; 8
    f35a:	c6 01       	movw	r24, r12
    f35c:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
    f360:	89 2b       	or	r24, r25
    f362:	c9 f6       	brne	.-78     	; 0xf316 <stat+0x24>
    f364:	61 ef       	ldi	r22, 0xF1	; 241
    f366:	72 e1       	ldi	r23, 0x12	; 18
    f368:	c6 01       	movw	r24, r12
    f36a:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
    f36e:	7c 01       	movw	r14, r24
    f370:	89 2b       	or	r24, r25
    f372:	89 f6       	brne	.-94     	; 0xf316 <stat+0x24>
    f374:	be 01       	movw	r22, r28
    f376:	6f 5f       	subi	r22, 0xFF	; 255
    f378:	7f 4f       	sbci	r23, 0xFF	; 255
    f37a:	c6 01       	movw	r24, r12
    f37c:	0e 94 23 64 	call	0xc846	; 0xc846 <f_stat>
    f380:	00 97       	sbiw	r24, 0x00	; 0
    f382:	a9 f0       	breq	.+42     	; 0xf3ae <stat+0xbc>
    f384:	84 31       	cpi	r24, 0x14	; 20
    f386:	91 05       	cpc	r25, r1
    f388:	40 f4       	brcc	.+16     	; 0xf39a <stat+0xa8>
    f38a:	fc 01       	movw	r30, r24
    f38c:	ea 55       	subi	r30, 0x5A	; 90
    f38e:	f4 4f       	sbci	r31, 0xF4	; 244
    f390:	80 81       	ld	r24, Z
    f392:	08 2e       	mov	r0, r24
    f394:	00 0c       	add	r0, r0
    f396:	99 0b       	sbc	r25, r25
    f398:	02 c0       	rjmp	.+4      	; 0xf39e <stat+0xac>
    f39a:	83 e2       	ldi	r24, 0x23	; 35
    f39c:	90 e0       	ldi	r25, 0x00	; 0
    f39e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f3a2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f3a6:	ee 24       	eor	r14, r14
    f3a8:	ea 94       	dec	r14
    f3aa:	fe 2c       	mov	r15, r14
    f3ac:	36 c0       	rjmp	.+108    	; 0xf41a <stat+0x128>
    f3ae:	89 81       	ldd	r24, Y+1	; 0x01
    f3b0:	9a 81       	ldd	r25, Y+2	; 0x02
    f3b2:	ab 81       	ldd	r26, Y+3	; 0x03
    f3b4:	bc 81       	ldd	r27, Y+4	; 0x04
    f3b6:	f8 01       	movw	r30, r16
    f3b8:	80 8f       	std	Z+24, r24	; 0x18
    f3ba:	91 8f       	std	Z+25, r25	; 0x19
    f3bc:	a2 8f       	std	Z+26, r26	; 0x1a
    f3be:	b3 8f       	std	Z+27, r27	; 0x1b
    f3c0:	6f 81       	ldd	r22, Y+7	; 0x07
    f3c2:	78 85       	ldd	r23, Y+8	; 0x08
    f3c4:	8d 81       	ldd	r24, Y+5	; 0x05
    f3c6:	9e 81       	ldd	r25, Y+6	; 0x06
    f3c8:	50 df       	rcall	.-352    	; 0xf26a <fat_time_to_unix>
    f3ca:	f8 01       	movw	r30, r16
    f3cc:	64 a3       	std	Z+36, r22	; 0x24
    f3ce:	75 a3       	std	Z+37, r23	; 0x25
    f3d0:	86 a3       	std	Z+38, r24	; 0x26
    f3d2:	97 a3       	std	Z+39, r25	; 0x27
    f3d4:	60 a7       	std	Z+40, r22	; 0x28
    f3d6:	71 a7       	std	Z+41, r23	; 0x29
    f3d8:	82 a7       	std	Z+42, r24	; 0x2a
    f3da:	93 a7       	std	Z+43, r25	; 0x2b
    f3dc:	64 a7       	std	Z+44, r22	; 0x2c
    f3de:	75 a7       	std	Z+45, r23	; 0x2d
    f3e0:	86 a7       	std	Z+46, r24	; 0x2e
    f3e2:	97 a7       	std	Z+47, r25	; 0x2f
    f3e4:	29 85       	ldd	r18, Y+9	; 0x09
    f3e6:	20 fd       	sbrc	r18, 0
    f3e8:	03 c0       	rjmp	.+6      	; 0xf3f0 <stat+0xfe>
    f3ea:	8f ef       	ldi	r24, 0xFF	; 255
    f3ec:	91 e0       	ldi	r25, 0x01	; 1
    f3ee:	02 c0       	rjmp	.+4      	; 0xf3f4 <stat+0x102>
    f3f0:	8d e6       	ldi	r24, 0x6D	; 109
    f3f2:	91 e0       	ldi	r25, 0x01	; 1
    f3f4:	48 ee       	ldi	r20, 0xE8	; 232
    f3f6:	53 e0       	ldi	r21, 0x03	; 3
    f3f8:	f8 01       	movw	r30, r16
    f3fa:	51 8b       	std	Z+17, r21	; 0x11
    f3fc:	40 8b       	std	Z+16, r20	; 0x10
    f3fe:	53 8b       	std	Z+19, r21	; 0x13
    f400:	42 8b       	std	Z+18, r20	; 0x12
    f402:	24 ff       	sbrs	r18, 4
    f404:	02 c0       	rjmp	.+4      	; 0xf40a <stat+0x118>
    f406:	90 64       	ori	r25, 0x40	; 64
    f408:	01 c0       	rjmp	.+2      	; 0xf40c <stat+0x11a>
    f40a:	90 68       	ori	r25, 0x80	; 128
    f40c:	a0 e0       	ldi	r26, 0x00	; 0
    f40e:	b0 e0       	ldi	r27, 0x00	; 0
    f410:	f8 01       	movw	r30, r16
    f412:	80 87       	std	Z+8, r24	; 0x08
    f414:	91 87       	std	Z+9, r25	; 0x09
    f416:	a2 87       	std	Z+10, r26	; 0x0a
    f418:	b3 87       	std	Z+11, r27	; 0x0b
    f41a:	c7 01       	movw	r24, r14
    f41c:	ca 5e       	subi	r28, 0xEA	; 234
    f41e:	de 4f       	sbci	r29, 0xFE	; 254
    f420:	e8 e0       	ldi	r30, 0x08	; 8
    f422:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0000f426 <unix_time_to_fat>:
    f426:	a4 e0       	ldi	r26, 0x04	; 4
    f428:	b0 e0       	ldi	r27, 0x00	; 0
    f42a:	e9 e1       	ldi	r30, 0x19	; 25
    f42c:	fa e7       	ldi	r31, 0x7A	; 122
    f42e:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
    f432:	69 83       	std	Y+1, r22	; 0x01
    f434:	7a 83       	std	Y+2, r23	; 0x02
    f436:	8b 83       	std	Y+3, r24	; 0x03
    f438:	9c 83       	std	Y+4, r25	; 0x04
    f43a:	7a 01       	movw	r14, r20
    f43c:	89 01       	movw	r16, r18
    f43e:	ce 01       	movw	r24, r28
    f440:	01 96       	adiw	r24, 0x01	; 1
    f442:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <gmtime>
    f446:	fc 01       	movw	r30, r24
    f448:	22 85       	ldd	r18, Z+10	; 0x0a
    f44a:	33 85       	ldd	r19, Z+11	; 0x0b
    f44c:	20 55       	subi	r18, 0x50	; 80
    f44e:	31 09       	sbc	r19, r1
    f450:	c9 01       	movw	r24, r18
    f452:	98 2f       	mov	r25, r24
    f454:	88 27       	eor	r24, r24
    f456:	99 0f       	add	r25, r25
    f458:	20 85       	ldd	r18, Z+8	; 0x08
    f45a:	31 85       	ldd	r19, Z+9	; 0x09
    f45c:	2f 5f       	subi	r18, 0xFF	; 255
    f45e:	3f 4f       	sbci	r19, 0xFF	; 255
    f460:	45 e0       	ldi	r20, 0x05	; 5
    f462:	22 0f       	add	r18, r18
    f464:	33 1f       	adc	r19, r19
    f466:	4a 95       	dec	r20
    f468:	e1 f7       	brne	.-8      	; 0xf462 <unix_time_to_fat+0x3c>
    f46a:	28 2b       	or	r18, r24
    f46c:	39 2b       	or	r19, r25
    f46e:	86 81       	ldd	r24, Z+6	; 0x06
    f470:	97 81       	ldd	r25, Z+7	; 0x07
    f472:	28 2b       	or	r18, r24
    f474:	39 2b       	or	r19, r25
    f476:	d7 01       	movw	r26, r14
    f478:	2d 93       	st	X+, r18
    f47a:	3c 93       	st	X, r19
    f47c:	84 81       	ldd	r24, Z+4	; 0x04
    f47e:	20 e0       	ldi	r18, 0x00	; 0
    f480:	30 e0       	ldi	r19, 0x00	; 0
    f482:	38 2f       	mov	r19, r24
    f484:	33 0f       	add	r19, r19
    f486:	33 0f       	add	r19, r19
    f488:	33 0f       	add	r19, r19
    f48a:	82 81       	ldd	r24, Z+2	; 0x02
    f48c:	93 81       	ldd	r25, Z+3	; 0x03
    f48e:	55 e0       	ldi	r21, 0x05	; 5
    f490:	88 0f       	add	r24, r24
    f492:	99 1f       	adc	r25, r25
    f494:	5a 95       	dec	r21
    f496:	e1 f7       	brne	.-8      	; 0xf490 <unix_time_to_fat+0x6a>
    f498:	82 2b       	or	r24, r18
    f49a:	93 2b       	or	r25, r19
    f49c:	20 81       	ld	r18, Z
    f49e:	31 81       	ldd	r19, Z+1	; 0x01
    f4a0:	36 95       	lsr	r19
    f4a2:	27 95       	ror	r18
    f4a4:	82 2b       	or	r24, r18
    f4a6:	93 2b       	or	r25, r19
    f4a8:	f8 01       	movw	r30, r16
    f4aa:	91 83       	std	Z+1, r25	; 0x01
    f4ac:	80 83       	st	Z, r24
    f4ae:	24 96       	adiw	r28, 0x04	; 4
    f4b0:	e6 e0       	ldi	r30, 0x06	; 6
    f4b2:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

0000f4b6 <utime>:
    f4b6:	aa e1       	ldi	r26, 0x1A	; 26
    f4b8:	b1 e0       	ldi	r27, 0x01	; 1
    f4ba:	e1 e6       	ldi	r30, 0x61	; 97
    f4bc:	fa e7       	ldi	r31, 0x7A	; 122
    f4be:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
    f4c2:	8c 01       	movw	r16, r24
    f4c4:	61 15       	cp	r22, r1
    f4c6:	71 05       	cpc	r23, r1
    f4c8:	31 f0       	breq	.+12     	; 0xf4d6 <utime+0x20>
    f4ca:	fb 01       	movw	r30, r22
    f4cc:	64 81       	ldd	r22, Z+4	; 0x04
    f4ce:	75 81       	ldd	r23, Z+5	; 0x05
    f4d0:	86 81       	ldd	r24, Z+6	; 0x06
    f4d2:	97 81       	ldd	r25, Z+7	; 0x07
    f4d4:	04 c0       	rjmp	.+8      	; 0xf4de <utime+0x28>
    f4d6:	80 e0       	ldi	r24, 0x00	; 0
    f4d8:	90 e0       	ldi	r25, 0x00	; 0
    f4da:	0e 94 34 38 	call	0x7068	; 0x7068 <time>
    f4de:	9e 01       	movw	r18, r28
    f4e0:	29 5e       	subi	r18, 0xE9	; 233
    f4e2:	3e 4f       	sbci	r19, 0xFE	; 254
    f4e4:	ae 01       	movw	r20, r28
    f4e6:	47 5e       	subi	r20, 0xE7	; 231
    f4e8:	5e 4f       	sbci	r21, 0xFE	; 254
    f4ea:	9d df       	rcall	.-198    	; 0xf426 <unix_time_to_fat>
    f4ec:	c7 5e       	subi	r28, 0xE7	; 231
    f4ee:	de 4f       	sbci	r29, 0xFE	; 254
    f4f0:	88 81       	ld	r24, Y
    f4f2:	99 81       	ldd	r25, Y+1	; 0x01
    f4f4:	c9 51       	subi	r28, 0x19	; 25
    f4f6:	d1 40       	sbci	r29, 0x01	; 1
    f4f8:	9e 83       	std	Y+6, r25	; 0x06
    f4fa:	8d 83       	std	Y+5, r24	; 0x05
    f4fc:	c9 5e       	subi	r28, 0xE9	; 233
    f4fe:	de 4f       	sbci	r29, 0xFE	; 254
    f500:	88 81       	ld	r24, Y
    f502:	99 81       	ldd	r25, Y+1	; 0x01
    f504:	c7 51       	subi	r28, 0x17	; 23
    f506:	d1 40       	sbci	r29, 0x01	; 1
    f508:	98 87       	std	Y+8, r25	; 0x08
    f50a:	8f 83       	std	Y+7, r24	; 0x07
    f50c:	be 01       	movw	r22, r28
    f50e:	6f 5f       	subi	r22, 0xFF	; 255
    f510:	7f 4f       	sbci	r23, 0xFF	; 255
    f512:	c8 01       	movw	r24, r16
    f514:	0e 94 3a 68 	call	0xd074	; 0xd074 <f_utime>
    f518:	84 31       	cpi	r24, 0x14	; 20
    f51a:	91 05       	cpc	r25, r1
    f51c:	40 f4       	brcc	.+16     	; 0xf52e <utime+0x78>
    f51e:	fc 01       	movw	r30, r24
    f520:	ea 55       	subi	r30, 0x5A	; 90
    f522:	f4 4f       	sbci	r31, 0xF4	; 244
    f524:	80 81       	ld	r24, Z
    f526:	08 2e       	mov	r0, r24
    f528:	00 0c       	add	r0, r0
    f52a:	99 0b       	sbc	r25, r25
    f52c:	02 c0       	rjmp	.+4      	; 0xf532 <utime+0x7c>
    f52e:	83 e2       	ldi	r24, 0x23	; 35
    f530:	90 e0       	ldi	r25, 0x00	; 0
    f532:	c6 5e       	subi	r28, 0xE6	; 230
    f534:	de 4f       	sbci	r29, 0xFE	; 254
    f536:	e4 e0       	ldi	r30, 0x04	; 4
    f538:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

0000f53c <fileno_to_fatfs>:
    f53c:	83 30       	cpi	r24, 0x03	; 3
    f53e:	91 05       	cpc	r25, r1
    f540:	48 f4       	brcc	.+18     	; 0xf554 <fileno_to_fatfs+0x18>
    f542:	89 e0       	ldi	r24, 0x09	; 9
    f544:	90 e0       	ldi	r25, 0x00	; 0
    f546:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f54a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f54e:	80 e0       	ldi	r24, 0x00	; 0
    f550:	90 e0       	ldi	r25, 0x00	; 0
    f552:	08 95       	ret
    f554:	60 dc       	rcall	.-1856   	; 0xee16 <fileno_to_stream>
    f556:	00 97       	sbiw	r24, 0x00	; 0
    f558:	d1 f3       	breq	.-12     	; 0xf54e <fileno_to_fatfs+0x12>
    f55a:	fc 01       	movw	r30, r24
    f55c:	84 85       	ldd	r24, Z+12	; 0x0c
    f55e:	95 85       	ldd	r25, Z+13	; 0x0d
    f560:	00 97       	sbiw	r24, 0x00	; 0
    f562:	79 f3       	breq	.-34     	; 0xf542 <fileno_to_fatfs+0x6>
    f564:	08 95       	ret

0000f566 <ftell>:
    f566:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f56a:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f56e:	37 dc       	rcall	.-1938   	; 0xedde <fileno>
    f570:	83 30       	cpi	r24, 0x03	; 3
    f572:	91 05       	cpc	r25, r1
    f574:	48 f0       	brcs	.+18     	; 0xf588 <ftell+0x22>
    f576:	e2 df       	rcall	.-60     	; 0xf53c <fileno_to_fatfs>
    f578:	00 97       	sbiw	r24, 0x00	; 0
    f57a:	51 f4       	brne	.+20     	; 0xf590 <ftell+0x2a>
    f57c:	89 e0       	ldi	r24, 0x09	; 9
    f57e:	90 e0       	ldi	r25, 0x00	; 0
    f580:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f584:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f588:	6f ef       	ldi	r22, 0xFF	; 255
    f58a:	7f ef       	ldi	r23, 0xFF	; 255
    f58c:	cb 01       	movw	r24, r22
    f58e:	08 95       	ret
    f590:	fc 01       	movw	r30, r24
    f592:	60 89       	ldd	r22, Z+16	; 0x10
    f594:	71 89       	ldd	r23, Z+17	; 0x11
    f596:	82 89       	ldd	r24, Z+18	; 0x12
    f598:	93 89       	ldd	r25, Z+19	; 0x13
    f59a:	08 95       	ret

0000f59c <lseek>:
    f59c:	a3 e0       	ldi	r26, 0x03	; 3
    f59e:	b0 e0       	ldi	r27, 0x00	; 0
    f5a0:	e4 ed       	ldi	r30, 0xD4	; 212
    f5a2:	fa e7       	ldi	r31, 0x7A	; 122
    f5a4:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
    f5a8:	5c 01       	movw	r10, r24
    f5aa:	6a 01       	movw	r12, r20
    f5ac:	7b 01       	movw	r14, r22
    f5ae:	89 01       	movw	r16, r18
    f5b0:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f5b4:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f5b8:	c1 df       	rcall	.-126    	; 0xf53c <fileno_to_fatfs>
    f5ba:	ec 01       	movw	r28, r24
    f5bc:	89 2b       	or	r24, r25
    f5be:	19 f4       	brne	.+6      	; 0xf5c6 <lseek+0x2a>
    f5c0:	88 e1       	ldi	r24, 0x18	; 24
    f5c2:	90 e0       	ldi	r25, 0x00	; 0
    f5c4:	26 c0       	rjmp	.+76     	; 0xf612 <lseek+0x76>
    f5c6:	83 e0       	ldi	r24, 0x03	; 3
    f5c8:	a8 16       	cp	r10, r24
    f5ca:	b1 04       	cpc	r11, r1
    f5cc:	d0 f1       	brcs	.+116    	; 0xf642 <lseek+0xa6>
    f5ce:	c5 01       	movw	r24, r10
    f5d0:	22 dc       	rcall	.-1980   	; 0xee16 <fileno_to_stream>
    f5d2:	fc 01       	movw	r30, r24
    f5d4:	93 81       	ldd	r25, Z+3	; 0x03
    f5d6:	90 64       	ori	r25, 0x40	; 64
    f5d8:	93 83       	std	Z+3, r25	; 0x03
    f5da:	02 30       	cpi	r16, 0x02	; 2
    f5dc:	11 05       	cpc	r17, r1
    f5de:	a9 f5       	brne	.+106    	; 0xf64a <lseek+0xae>
    f5e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    f5e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    f5e4:	ac 85       	ldd	r26, Y+12	; 0x0c
    f5e6:	bd 85       	ldd	r27, Y+13	; 0x0d
    f5e8:	c8 0e       	add	r12, r24
    f5ea:	d9 1e       	adc	r13, r25
    f5ec:	ea 1e       	adc	r14, r26
    f5ee:	fb 1e       	adc	r15, r27
    f5f0:	b7 01       	movw	r22, r14
    f5f2:	a6 01       	movw	r20, r12
    f5f4:	ce 01       	movw	r24, r28
    f5f6:	0e 94 9e 60 	call	0xc13c	; 0xc13c <f_lseek>
    f5fa:	00 97       	sbiw	r24, 0x00	; 0
    f5fc:	79 f0       	breq	.+30     	; 0xf61c <lseek+0x80>
    f5fe:	84 31       	cpi	r24, 0x14	; 20
    f600:	91 05       	cpc	r25, r1
    f602:	58 f5       	brcc	.+86     	; 0xf65a <lseek+0xbe>
    f604:	fc 01       	movw	r30, r24
    f606:	ea 55       	subi	r30, 0x5A	; 90
    f608:	f4 4f       	sbci	r31, 0xF4	; 244
    f60a:	80 81       	ld	r24, Z
    f60c:	08 2e       	mov	r0, r24
    f60e:	00 0c       	add	r0, r0
    f610:	99 0b       	sbc	r25, r25
    f612:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f616:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f61a:	13 c0       	rjmp	.+38     	; 0xf642 <lseek+0xa6>
    f61c:	68 89       	ldd	r22, Y+16	; 0x10
    f61e:	79 89       	ldd	r23, Y+17	; 0x11
    f620:	8a 89       	ldd	r24, Y+18	; 0x12
    f622:	9b 89       	ldd	r25, Y+19	; 0x13
    f624:	c6 16       	cp	r12, r22
    f626:	d7 06       	cpc	r13, r23
    f628:	e8 06       	cpc	r14, r24
    f62a:	f9 06       	cpc	r15, r25
    f62c:	c9 f0       	breq	.+50     	; 0xf660 <lseek+0xc4>
    f62e:	86 eb       	ldi	r24, 0xB6	; 182
    f630:	9b e0       	ldi	r25, 0x0B	; 11
    f632:	a0 e0       	ldi	r26, 0x00	; 0
    f634:	ed b7       	in	r30, 0x3d	; 61
    f636:	fe b7       	in	r31, 0x3e	; 62
    f638:	81 83       	std	Z+1, r24	; 0x01
    f63a:	92 83       	std	Z+2, r25	; 0x02
    f63c:	a3 83       	std	Z+3, r26	; 0x03
    f63e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    f642:	6f ef       	ldi	r22, 0xFF	; 255
    f644:	7f ef       	ldi	r23, 0xFF	; 255
    f646:	cb 01       	movw	r24, r22
    f648:	0b c0       	rjmp	.+22     	; 0xf660 <lseek+0xc4>
    f64a:	01 30       	cpi	r16, 0x01	; 1
    f64c:	11 05       	cpc	r17, r1
    f64e:	81 f6       	brne	.-96     	; 0xf5f0 <lseek+0x54>
    f650:	88 89       	ldd	r24, Y+16	; 0x10
    f652:	99 89       	ldd	r25, Y+17	; 0x11
    f654:	aa 89       	ldd	r26, Y+18	; 0x12
    f656:	bb 89       	ldd	r27, Y+19	; 0x13
    f658:	c7 cf       	rjmp	.-114    	; 0xf5e8 <lseek+0x4c>
    f65a:	83 e2       	ldi	r24, 0x23	; 35
    f65c:	90 e0       	ldi	r25, 0x00	; 0
    f65e:	d9 cf       	rjmp	.-78     	; 0xf612 <lseek+0x76>
    f660:	cd b7       	in	r28, 0x3d	; 61
    f662:	de b7       	in	r29, 0x3e	; 62
    f664:	23 96       	adiw	r28, 0x03	; 3
    f666:	ea e0       	ldi	r30, 0x0A	; 10
    f668:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

0000f66c <fseek>:
    f66c:	cf 92       	push	r12
    f66e:	df 92       	push	r13
    f670:	ef 92       	push	r14
    f672:	ff 92       	push	r15
    f674:	cf 93       	push	r28
    f676:	df 93       	push	r29
    f678:	6a 01       	movw	r12, r20
    f67a:	7b 01       	movw	r14, r22
    f67c:	e9 01       	movw	r28, r18
    f67e:	af db       	rcall	.-2210   	; 0xedde <fileno>
    f680:	97 fd       	sbrc	r25, 7
    f682:	12 c0       	rjmp	.+36     	; 0xf6a8 <fseek+0x3c>
    f684:	9e 01       	movw	r18, r28
    f686:	b7 01       	movw	r22, r14
    f688:	a6 01       	movw	r20, r12
    f68a:	88 df       	rcall	.-240    	; 0xf59c <lseek>
    f68c:	21 e0       	ldi	r18, 0x01	; 1
    f68e:	30 e0       	ldi	r19, 0x00	; 0
    f690:	6f 3f       	cpi	r22, 0xFF	; 255
    f692:	7f 4f       	sbci	r23, 0xFF	; 255
    f694:	8f 4f       	sbci	r24, 0xFF	; 255
    f696:	9f 4f       	sbci	r25, 0xFF	; 255
    f698:	11 f0       	breq	.+4      	; 0xf69e <fseek+0x32>
    f69a:	20 e0       	ldi	r18, 0x00	; 0
    f69c:	30 e0       	ldi	r19, 0x00	; 0
    f69e:	88 27       	eor	r24, r24
    f6a0:	99 27       	eor	r25, r25
    f6a2:	82 1b       	sub	r24, r18
    f6a4:	93 0b       	sbc	r25, r19
    f6a6:	02 c0       	rjmp	.+4      	; 0xf6ac <fseek+0x40>
    f6a8:	8f ef       	ldi	r24, 0xFF	; 255
    f6aa:	9f ef       	ldi	r25, 0xFF	; 255
    f6ac:	df 91       	pop	r29
    f6ae:	cf 91       	pop	r28
    f6b0:	ff 90       	pop	r15
    f6b2:	ef 90       	pop	r14
    f6b4:	df 90       	pop	r13
    f6b6:	cf 90       	pop	r12
    f6b8:	08 95       	ret

0000f6ba <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f6ba:	a2 e0       	ldi	r26, 0x02	; 2
    f6bc:	b0 e0       	ldi	r27, 0x00	; 0
    f6be:	e3 e6       	ldi	r30, 0x63	; 99
    f6c0:	fb e7       	ldi	r31, 0x7B	; 123
    f6c2:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
    f6c6:	5c 01       	movw	r10, r24
    f6c8:	8b 01       	movw	r16, r22
    f6ca:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f6cc:	fb 01       	movw	r30, r22
    f6ce:	10 82       	st	Z, r1

    errno = 0;
    f6d0:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f6d4:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f6d8:	9e db       	rcall	.-2244   	; 0xee16 <fileno_to_stream>
    f6da:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f6dc:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f6e0:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f6e4:	e8 16       	cp	r14, r24
    f6e6:	f9 06       	cpc	r15, r25
    f6e8:	c9 f4       	brne	.+50     	; 0xf71c <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f6ea:	f7 01       	movw	r30, r14
    f6ec:	83 81       	ldd	r24, Z+3	; 0x03
    f6ee:	80 64       	ori	r24, 0x40	; 64
    f6f0:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f6f2:	1a 82       	std	Y+2, r1	; 0x02
    f6f4:	19 82       	std	Y+1, r1	; 0x01
    f6f6:	c0 0e       	add	r12, r16
    f6f8:	d1 1e       	adc	r13, r17
        while(count--)
    f6fa:	0c 15       	cp	r16, r12
    f6fc:	1d 05       	cpc	r17, r13
    f6fe:	09 f4       	brne	.+2      	; 0xf702 <read+0x48>
    f700:	3d c0       	rjmp	.+122    	; 0xf77c <read+0xc2>
        {
            ret = fgetc(stream);
    f702:	c7 01       	movw	r24, r14
    f704:	48 da       	rcall	.-2928   	; 0xeb96 <fgetc>
            if(ret < 0)
    f706:	97 fd       	sbrc	r25, 7
    f708:	39 c0       	rjmp	.+114    	; 0xf77c <read+0xc2>
                break;

            *ptr++ = ret;
    f70a:	f8 01       	movw	r30, r16
    f70c:	81 93       	st	Z+, r24
    f70e:	8f 01       	movw	r16, r30
            ++size;
    f710:	89 81       	ldd	r24, Y+1	; 0x01
    f712:	9a 81       	ldd	r25, Y+2	; 0x02
    f714:	01 96       	adiw	r24, 0x01	; 1
    f716:	9a 83       	std	Y+2, r25	; 0x02
    f718:	89 83       	std	Y+1, r24	; 0x01
    f71a:	ef cf       	rjmp	.-34     	; 0xf6fa <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f71c:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f720:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f724:	e8 16       	cp	r14, r24
    f726:	f9 06       	cpc	r15, r25
    f728:	71 f1       	breq	.+92     	; 0xf786 <read+0xcc>
    f72a:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f72e:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f732:	e8 16       	cp	r14, r24
    f734:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f736:	39 f1       	breq	.+78     	; 0xf786 <read+0xcc>
    f738:	c5 01       	movw	r24, r10
    f73a:	00 df       	rcall	.-512    	; 0xf53c <fileno_to_fatfs>
    if ( fh == NULL )
    f73c:	00 97       	sbiw	r24, 0x00	; 0
    f73e:	19 f4       	brne	.+6      	; 0xf746 <read+0x8c>
    {
        errno = EBADF;
    f740:	89 e0       	ldi	r24, 0x09	; 9
    f742:	90 e0       	ldi	r25, 0x00	; 0
    f744:	16 c0       	rjmp	.+44     	; 0xf772 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f746:	9e 01       	movw	r18, r28
    f748:	2f 5f       	subi	r18, 0xFF	; 255
    f74a:	3f 4f       	sbci	r19, 0xFF	; 255
    f74c:	a6 01       	movw	r20, r12
    f74e:	b8 01       	movw	r22, r16
    f750:	0e 94 92 5b 	call	0xb724	; 0xb724 <f_read>
    if(res != FR_OK)
    f754:	00 97       	sbiw	r24, 0x00	; 0
    f756:	91 f0       	breq	.+36     	; 0xf77c <read+0xc2>
    f758:	84 31       	cpi	r24, 0x14	; 20
    f75a:	91 05       	cpc	r25, r1
    f75c:	40 f4       	brcc	.+16     	; 0xf76e <read+0xb4>
    f75e:	fc 01       	movw	r30, r24
    f760:	ea 55       	subi	r30, 0x5A	; 90
    f762:	f4 4f       	sbci	r31, 0xF4	; 244
    f764:	80 81       	ld	r24, Z
    f766:	08 2e       	mov	r0, r24
    f768:	00 0c       	add	r0, r0
    f76a:	99 0b       	sbc	r25, r25
    f76c:	02 c0       	rjmp	.+4      	; 0xf772 <read+0xb8>
    f76e:	83 e2       	ldi	r24, 0x23	; 35
    f770:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f772:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f776:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f77a:	05 c0       	rjmp	.+10     	; 0xf786 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f77c:	69 81       	ldd	r22, Y+1	; 0x01
    f77e:	7a 81       	ldd	r23, Y+2	; 0x02
    f780:	80 e0       	ldi	r24, 0x00	; 0
    f782:	90 e0       	ldi	r25, 0x00	; 0
    f784:	03 c0       	rjmp	.+6      	; 0xf78c <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f786:	6f ef       	ldi	r22, 0xFF	; 255
    f788:	7f ef       	ldi	r23, 0xFF	; 255
    f78a:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f78c:	22 96       	adiw	r28, 0x02	; 2
    f78e:	ea e0       	ldi	r30, 0x0A	; 10
    f790:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

0000f794 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f794:	0f 93       	push	r16
    f796:	1f 93       	push	r17
    f798:	cf 93       	push	r28
    f79a:	df 93       	push	r29
    f79c:	ec 01       	movw	r28, r24
    f79e:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f7a0:	64 9f       	mul	r22, r20
    f7a2:	80 01       	movw	r16, r0
    f7a4:	65 9f       	mul	r22, r21
    f7a6:	10 0d       	add	r17, r0
    f7a8:	74 9f       	mul	r23, r20
    f7aa:	10 0d       	add	r17, r0
    f7ac:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f7ae:	17 db       	rcall	.-2514   	; 0xedde <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f7b0:	a8 01       	movw	r20, r16
    f7b2:	be 01       	movw	r22, r28
    f7b4:	82 df       	rcall	.-252    	; 0xf6ba <read>
    if(ret < 0)
    f7b6:	97 fd       	sbrc	r25, 7
    f7b8:	02 c0       	rjmp	.+4      	; 0xf7be <fread+0x2a>
        return(0);

    return((size_t) ret);
    f7ba:	cb 01       	movw	r24, r22
    f7bc:	02 c0       	rjmp	.+4      	; 0xf7c2 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f7be:	80 e0       	ldi	r24, 0x00	; 0
    f7c0:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f7c2:	df 91       	pop	r29
    f7c4:	cf 91       	pop	r28
    f7c6:	1f 91       	pop	r17
    f7c8:	0f 91       	pop	r16
    f7ca:	08 95       	ret

0000f7cc <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f7cc:	cf 93       	push	r28
    f7ce:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f7d0:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f7d4:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f7d8:	83 30       	cpi	r24, 0x03	; 3
    f7da:	91 05       	cpc	r25, r1
    f7dc:	18 f4       	brcc	.+6      	; 0xf7e4 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f7de:	89 e0       	ldi	r24, 0x09	; 9
    f7e0:	90 e0       	ldi	r25, 0x00	; 0
    f7e2:	18 c0       	rjmp	.+48     	; 0xf814 <syncfs+0x48>
    f7e4:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f7e6:	17 db       	rcall	.-2514   	; 0xee16 <fileno_to_stream>
    f7e8:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f7ea:	93 81       	ldd	r25, Z+3	; 0x03
    f7ec:	90 64       	ori	r25, 0x40	; 64
    f7ee:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f7f0:	ce 01       	movw	r24, r28
    f7f2:	a4 de       	rcall	.-696    	; 0xf53c <fileno_to_fatfs>
    if(fh == NULL)
    f7f4:	00 97       	sbiw	r24, 0x00	; 0
    f7f6:	99 f3       	breq	.-26     	; 0xf7de <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f7f8:	0e 94 74 5e 	call	0xbce8	; 0xbce8 <f_sync>
    if (res != FR_OK)
    f7fc:	00 97       	sbiw	r24, 0x00	; 0
    f7fe:	a1 f0       	breq	.+40     	; 0xf828 <syncfs+0x5c>
    f800:	84 31       	cpi	r24, 0x14	; 20
    f802:	91 05       	cpc	r25, r1
    f804:	70 f4       	brcc	.+28     	; 0xf822 <syncfs+0x56>
    f806:	fc 01       	movw	r30, r24
    f808:	ea 55       	subi	r30, 0x5A	; 90
    f80a:	f4 4f       	sbci	r31, 0xF4	; 244
    f80c:	80 81       	ld	r24, Z
    f80e:	08 2e       	mov	r0, r24
    f810:	00 0c       	add	r0, r0
    f812:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f814:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f818:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f81c:	8f ef       	ldi	r24, 0xFF	; 255
    f81e:	9f ef       	ldi	r25, 0xFF	; 255
    f820:	05 c0       	rjmp	.+10     	; 0xf82c <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f822:	83 e2       	ldi	r24, 0x23	; 35
    f824:	90 e0       	ldi	r25, 0x00	; 0
    f826:	f6 cf       	rjmp	.-20     	; 0xf814 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f828:	80 e0       	ldi	r24, 0x00	; 0
    f82a:	90 e0       	ldi	r25, 0x00	; 0
}
    f82c:	df 91       	pop	r29
    f82e:	cf 91       	pop	r28
    f830:	08 95       	ret

0000f832 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f832:	cf 93       	push	r28
    f834:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f836:	c0 e0       	ldi	r28, 0x00	; 0
    f838:	d0 e0       	ldi	r29, 0x00	; 0
    f83a:	21 96       	adiw	r28, 0x01	; 1
    f83c:	c0 31       	cpi	r28, 0x10	; 16
    f83e:	d1 05       	cpc	r29, r1
    f840:	51 f0       	breq	.+20     	; 0xf856 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f842:	c3 30       	cpi	r28, 0x03	; 3
    f844:	d1 05       	cpc	r29, r1
    f846:	cc f3       	brlt	.-14     	; 0xf83a <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f848:	ce 01       	movw	r24, r28
    f84a:	78 de       	rcall	.-784    	; 0xf53c <fileno_to_fatfs>
        if(fh == NULL)
    f84c:	89 2b       	or	r24, r25
    f84e:	a9 f3       	breq	.-22     	; 0xf83a <sync+0x8>
            continue;

        (void ) syncfs(i);
    f850:	ce 01       	movw	r24, r28
    f852:	bc df       	rcall	.-136    	; 0xf7cc <syncfs>
    f854:	f2 cf       	rjmp	.-28     	; 0xf83a <sync+0x8>
    }
}
    f856:	df 91       	pop	r29
    f858:	cf 91       	pop	r28
    f85a:	08 95       	ret

0000f85c <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f85c:	a2 e0       	ldi	r26, 0x02	; 2
    f85e:	b0 e0       	ldi	r27, 0x00	; 0
    f860:	e4 e3       	ldi	r30, 0x34	; 52
    f862:	fc e7       	ldi	r31, 0x7C	; 124
    f864:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
    f868:	8c 01       	movw	r16, r24
    f86a:	b6 2e       	mov	r11, r22
    f86c:	f7 2e       	mov	r15, r23
    f86e:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f870:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f874:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f878:	ce da       	rcall	.-2660   	; 0xee16 <fileno_to_stream>
    f87a:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f87c:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f880:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f884:	c8 16       	cp	r12, r24
    f886:	d9 06       	cpc	r13, r25
    f888:	39 f0       	breq	.+14     	; 0xf898 <write+0x3c>
    f88a:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f88e:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f892:	c8 16       	cp	r12, r24
    f894:	d9 06       	cpc	r13, r25
    f896:	d1 f4       	brne	.+52     	; 0xf8cc <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f898:	1a 82       	std	Y+2, r1	; 0x02
    f89a:	19 82       	std	Y+1, r1	; 0x01
    f89c:	0b 2d       	mov	r16, r11
    f89e:	1f 2d       	mov	r17, r15
    f8a0:	78 01       	movw	r14, r16
    f8a2:	e8 0c       	add	r14, r8
    f8a4:	f9 1c       	adc	r15, r9
        while(count--)
    f8a6:	0e 15       	cp	r16, r14
    f8a8:	1f 05       	cpc	r17, r15
    f8aa:	d1 f1       	breq	.+116    	; 0xf920 <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f8ac:	f8 01       	movw	r30, r16
    f8ae:	a1 90       	ld	r10, Z+
    f8b0:	8f 01       	movw	r16, r30
    f8b2:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f8b4:	b6 01       	movw	r22, r12
    f8b6:	c5 01       	movw	r24, r10
    f8b8:	c4 d9       	rcall	.-3192   	; 0xec42 <fputc>
            if(c != ret)
    f8ba:	a8 16       	cp	r10, r24
    f8bc:	b9 06       	cpc	r11, r25
    f8be:	81 f5       	brne	.+96     	; 0xf920 <write+0xc4>
                break;

            ++size;
    f8c0:	89 81       	ldd	r24, Y+1	; 0x01
    f8c2:	9a 81       	ldd	r25, Y+2	; 0x02
    f8c4:	01 96       	adiw	r24, 0x01	; 1
    f8c6:	9a 83       	std	Y+2, r25	; 0x02
    f8c8:	89 83       	std	Y+1, r24	; 0x01
    f8ca:	ed cf       	rjmp	.-38     	; 0xf8a6 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f8cc:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f8d0:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f8d4:	c8 16       	cp	r12, r24
    f8d6:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f8d8:	41 f1       	breq	.+80     	; 0xf92a <write+0xce>
    f8da:	c8 01       	movw	r24, r16
    f8dc:	2f de       	rcall	.-930    	; 0xf53c <fileno_to_fatfs>
    if ( fh == NULL )
    f8de:	00 97       	sbiw	r24, 0x00	; 0
    f8e0:	19 f4       	brne	.+6      	; 0xf8e8 <write+0x8c>
    {
        errno = EBADF;
    f8e2:	89 e0       	ldi	r24, 0x09	; 9
    f8e4:	90 e0       	ldi	r25, 0x00	; 0
    f8e6:	17 c0       	rjmp	.+46     	; 0xf916 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f8e8:	9e 01       	movw	r18, r28
    f8ea:	2f 5f       	subi	r18, 0xFF	; 255
    f8ec:	3f 4f       	sbci	r19, 0xFF	; 255
    f8ee:	a4 01       	movw	r20, r8
    f8f0:	6b 2d       	mov	r22, r11
    f8f2:	7f 2d       	mov	r23, r15
    f8f4:	0e 94 dd 5c 	call	0xb9ba	; 0xb9ba <f_write>
    if(res != FR_OK)
    f8f8:	00 97       	sbiw	r24, 0x00	; 0
    f8fa:	91 f0       	breq	.+36     	; 0xf920 <write+0xc4>
    f8fc:	84 31       	cpi	r24, 0x14	; 20
    f8fe:	91 05       	cpc	r25, r1
    f900:	40 f4       	brcc	.+16     	; 0xf912 <write+0xb6>
    f902:	fc 01       	movw	r30, r24
    f904:	ea 55       	subi	r30, 0x5A	; 90
    f906:	f4 4f       	sbci	r31, 0xF4	; 244
    f908:	80 81       	ld	r24, Z
    f90a:	08 2e       	mov	r0, r24
    f90c:	00 0c       	add	r0, r0
    f90e:	99 0b       	sbc	r25, r25
    f910:	02 c0       	rjmp	.+4      	; 0xf916 <write+0xba>
    f912:	83 e2       	ldi	r24, 0x23	; 35
    f914:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f916:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f91a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f91e:	05 c0       	rjmp	.+10     	; 0xf92a <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f920:	69 81       	ldd	r22, Y+1	; 0x01
    f922:	7a 81       	ldd	r23, Y+2	; 0x02
    f924:	80 e0       	ldi	r24, 0x00	; 0
    f926:	90 e0       	ldi	r25, 0x00	; 0
    f928:	03 c0       	rjmp	.+6      	; 0xf930 <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f92a:	6f ef       	ldi	r22, 0xFF	; 255
    f92c:	7f ef       	ldi	r23, 0xFF	; 255
    f92e:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f930:	22 96       	adiw	r28, 0x02	; 2
    f932:	ec e0       	ldi	r30, 0x0C	; 12
    f934:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

0000f938 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f938:	0f 93       	push	r16
    f93a:	1f 93       	push	r17
    f93c:	cf 93       	push	r28
    f93e:	df 93       	push	r29
    f940:	ec 01       	movw	r28, r24
    f942:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f944:	64 9f       	mul	r22, r20
    f946:	80 01       	movw	r16, r0
    f948:	65 9f       	mul	r22, r21
    f94a:	10 0d       	add	r17, r0
    f94c:	74 9f       	mul	r23, r20
    f94e:	10 0d       	add	r17, r0
    f950:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f952:	45 da       	rcall	.-2934   	; 0xedde <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f954:	a8 01       	movw	r20, r16
    f956:	be 01       	movw	r22, r28
    f958:	81 df       	rcall	.-254    	; 0xf85c <write>

    if(ret < 0)
    f95a:	97 fd       	sbrc	r25, 7
    f95c:	02 c0       	rjmp	.+4      	; 0xf962 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f95e:	cb 01       	movw	r24, r22
    f960:	02 c0       	rjmp	.+4      	; 0xf966 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f962:	80 e0       	ldi	r24, 0x00	; 0
    f964:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f966:	df 91       	pop	r29
    f968:	cf 91       	pop	r28
    f96a:	1f 91       	pop	r17
    f96c:	0f 91       	pop	r16
    f96e:	08 95       	ret

0000f970 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f970:	0f 93       	push	r16
    f972:	1f 93       	push	r17
    f974:	cf 93       	push	r28
    f976:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f978:	83 30       	cpi	r24, 0x03	; 3
    f97a:	91 05       	cpc	r25, r1
    f97c:	48 f4       	brcc	.+18     	; 0xf990 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f97e:	89 e0       	ldi	r24, 0x09	; 9
    f980:	90 e0       	ldi	r25, 0x00	; 0
    f982:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f986:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f98a:	8f ef       	ldi	r24, 0xFF	; 255
    f98c:	9f ef       	ldi	r25, 0xFF	; 255
    f98e:	20 c0       	rjmp	.+64     	; 0xf9d0 <free_file_descriptor+0x60>
    f990:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f992:	41 da       	rcall	.-2942   	; 0xee16 <fileno_to_stream>
    f994:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f996:	89 2b       	or	r24, r25
    f998:	c1 f3       	breq	.-16     	; 0xf98a <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f99a:	f8 01       	movw	r30, r16
    f99c:	84 85       	ldd	r24, Z+12	; 0x0c
    f99e:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f9a0:	00 97       	sbiw	r24, 0x00	; 0
    f9a2:	11 f0       	breq	.+4      	; 0xf9a8 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f9a4:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f9a8:	f8 01       	movw	r30, r16
    f9aa:	80 81       	ld	r24, Z
    f9ac:	91 81       	ldd	r25, Z+1	; 0x01
    f9ae:	00 97       	sbiw	r24, 0x00	; 0
    f9b0:	21 f0       	breq	.+8      	; 0xf9ba <free_file_descriptor+0x4a>
    f9b2:	23 81       	ldd	r18, Z+3	; 0x03
    f9b4:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f9b6:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
    }

    __iob[fileno]  = NULL;
    f9ba:	fe 01       	movw	r30, r28
    f9bc:	ee 0f       	add	r30, r30
    f9be:	ff 1f       	adc	r31, r31
    f9c0:	e1 54       	subi	r30, 0x41	; 65
    f9c2:	f3 4e       	sbci	r31, 0xE3	; 227
    f9c4:	11 82       	std	Z+1, r1	; 0x01
    f9c6:	10 82       	st	Z, r1
    safefree(stream);
    f9c8:	c8 01       	movw	r24, r16
    f9ca:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
    return(fileno);
    f9ce:	ce 01       	movw	r24, r28
}
    f9d0:	df 91       	pop	r29
    f9d2:	cf 91       	pop	r28
    f9d4:	1f 91       	pop	r17
    f9d6:	0f 91       	pop	r16
    f9d8:	08 95       	ret

0000f9da <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f9da:	0f 93       	push	r16
    f9dc:	1f 93       	push	r17
    f9de:	cf 93       	push	r28
    f9e0:	df 93       	push	r29
    f9e2:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f9e4:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f9e8:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f9ec:	14 da       	rcall	.-3032   	; 0xee16 <fileno_to_stream>
    if(stream == NULL)
    f9ee:	89 2b       	or	r24, r25
    f9f0:	d9 f0       	breq	.+54     	; 0xfa28 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f9f2:	c8 01       	movw	r24, r16
    f9f4:	a3 dd       	rcall	.-1210   	; 0xf53c <fileno_to_fatfs>
    if(fh == NULL)
    f9f6:	00 97       	sbiw	r24, 0x00	; 0
    f9f8:	b9 f0       	breq	.+46     	; 0xfa28 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f9fa:	0e 94 f4 5e 	call	0xbde8	; 0xbde8 <f_close>
    free_file_descriptor(fileno);
    f9fe:	ec 01       	movw	r28, r24
    fa00:	c8 01       	movw	r24, r16
    fa02:	b6 df       	rcall	.-148    	; 0xf970 <free_file_descriptor>
    if (res != FR_OK)
    fa04:	20 97       	sbiw	r28, 0x00	; 0
    fa06:	99 f0       	breq	.+38     	; 0xfa2e <close+0x54>
    fa08:	c4 31       	cpi	r28, 0x14	; 20
    fa0a:	d1 05       	cpc	r29, r1
    fa0c:	38 f4       	brcc	.+14     	; 0xfa1c <close+0x42>
    fa0e:	ca 55       	subi	r28, 0x5A	; 90
    fa10:	d4 4f       	sbci	r29, 0xF4	; 244
    fa12:	88 81       	ld	r24, Y
    fa14:	08 2e       	mov	r0, r24
    fa16:	00 0c       	add	r0, r0
    fa18:	99 0b       	sbc	r25, r25
    fa1a:	02 c0       	rjmp	.+4      	; 0xfa20 <close+0x46>
    fa1c:	83 e2       	ldi	r24, 0x23	; 35
    fa1e:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    fa20:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fa24:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    fa28:	8f ef       	ldi	r24, 0xFF	; 255
    fa2a:	9f ef       	ldi	r25, 0xFF	; 255
    fa2c:	02 c0       	rjmp	.+4      	; 0xfa32 <close+0x58>
    }
    return(0);
    fa2e:	80 e0       	ldi	r24, 0x00	; 0
    fa30:	90 e0       	ldi	r25, 0x00	; 0
}
    fa32:	df 91       	pop	r29
    fa34:	cf 91       	pop	r28
    fa36:	1f 91       	pop	r17
    fa38:	0f 91       	pop	r16
    fa3a:	08 95       	ret

0000fa3c <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    fa3c:	d0 d9       	rcall	.-3168   	; 0xedde <fileno>
    if(fn < 0)
    fa3e:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    fa40:	02 c0       	rjmp	.+4      	; 0xfa46 <fclose+0xa>
    fa42:	cb cf       	rjmp	.-106    	; 0xf9da <close>
    fa44:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    fa46:	8f ef       	ldi	r24, 0xFF	; 255
    fa48:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    fa4a:	08 95       	ret

0000fa4c <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    fa4c:	0f 93       	push	r16
    fa4e:	1f 93       	push	r17
    fa50:	cf 93       	push	r28
    fa52:	df 93       	push	r29
    fa54:	ef eb       	ldi	r30, 0xBF	; 191
    fa56:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fa58:	c0 e0       	ldi	r28, 0x00	; 0
    fa5a:	d0 e0       	ldi	r29, 0x00	; 0
    fa5c:	21 96       	adiw	r28, 0x01	; 1
    fa5e:	c0 31       	cpi	r28, 0x10	; 16
    fa60:	d1 05       	cpc	r29, r1
    fa62:	49 f0       	breq	.+18     	; 0xfa76 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fa64:	c3 30       	cpi	r28, 0x03	; 3
    fa66:	d1 05       	cpc	r29, r1
    fa68:	24 f0       	brlt	.+8      	; 0xfa72 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    fa6a:	82 81       	ldd	r24, Z+2	; 0x02
    fa6c:	93 81       	ldd	r25, Z+3	; 0x03
    fa6e:	89 2b       	or	r24, r25
    fa70:	59 f0       	breq	.+22     	; 0xfa88 <new_file_descriptor+0x3c>
    fa72:	32 96       	adiw	r30, 0x02	; 2
    fa74:	f3 cf       	rjmp	.-26     	; 0xfa5c <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    fa76:	87 e1       	ldi	r24, 0x17	; 23
    fa78:	90 e0       	ldi	r25, 0x00	; 0
    fa7a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fa7e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    return(-1);
    fa82:	8f ef       	ldi	r24, 0xFF	; 255
    fa84:	9f ef       	ldi	r25, 0xFF	; 255
    fa86:	22 c0       	rjmp	.+68     	; 0xfacc <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    fa88:	61 e0       	ldi	r22, 0x01	; 1
    fa8a:	70 e0       	ldi	r23, 0x00	; 0
    fa8c:	8e e0       	ldi	r24, 0x0E	; 14
    fa8e:	90 e0       	ldi	r25, 0x00	; 0
    fa90:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
    fa94:	8c 01       	movw	r16, r24
            if(stream == NULL)
    fa96:	89 2b       	or	r24, r25
    fa98:	59 f0       	breq	.+22     	; 0xfab0 <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    fa9a:	61 e0       	ldi	r22, 0x01	; 1
    fa9c:	70 e0       	ldi	r23, 0x00	; 0
    fa9e:	84 e2       	ldi	r24, 0x24	; 36
    faa0:	92 e0       	ldi	r25, 0x02	; 2
    faa2:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
            if(fh == NULL)
    faa6:	00 97       	sbiw	r24, 0x00	; 0
    faa8:	31 f4       	brne	.+12     	; 0xfab6 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    faaa:	c8 01       	movw	r24, r16
    faac:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
                errno = ENOMEM;
    fab0:	8c e0       	ldi	r24, 0x0C	; 12
    fab2:	90 e0       	ldi	r25, 0x00	; 0
    fab4:	e2 cf       	rjmp	.-60     	; 0xfa7a <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    fab6:	fe 01       	movw	r30, r28
    fab8:	ee 0f       	add	r30, r30
    faba:	ff 1f       	adc	r31, r31
    fabc:	e1 54       	subi	r30, 0x41	; 65
    fabe:	f3 4e       	sbci	r31, 0xE3	; 227
    fac0:	11 83       	std	Z+1, r17	; 0x01
    fac2:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    fac4:	f8 01       	movw	r30, r16
    fac6:	95 87       	std	Z+13, r25	; 0x0d
    fac8:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    faca:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    facc:	df 91       	pop	r29
    face:	cf 91       	pop	r28
    fad0:	1f 91       	pop	r17
    fad2:	0f 91       	pop	r16
    fad4:	08 95       	ret

0000fad6 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    fad6:	a0 e0       	ldi	r26, 0x00	; 0
    fad8:	b0 e0       	ldi	r27, 0x00	; 0
    fada:	e1 e7       	ldi	r30, 0x71	; 113
    fadc:	fd e7       	ldi	r31, 0x7D	; 125
    fade:	0c 94 1a e7 	jmp	0x1ce34	; 0x1ce34 <__prologue_saves__+0x8>
    fae2:	5c 01       	movw	r10, r24
    fae4:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fae6:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    faea:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    faee:	7b 01       	movw	r14, r22
    faf0:	83 e0       	ldi	r24, 0x03	; 3
    faf2:	e8 22       	and	r14, r24
    faf4:	ff 24       	eor	r15, r15
    faf6:	e2 e0       	ldi	r30, 0x02	; 2
    faf8:	ee 16       	cp	r14, r30
    fafa:	f1 04       	cpc	r15, r1
    fafc:	31 f0       	breq	.+12     	; 0xfb0a <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    fafe:	e1 14       	cp	r14, r1
    fb00:	f1 04       	cpc	r15, r1
    fb02:	31 f0       	breq	.+12     	; 0xfb10 <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    fb04:	02 e0       	ldi	r16, 0x02	; 2
    fb06:	10 e0       	ldi	r17, 0x00	; 0
    fb08:	05 c0       	rjmp	.+10     	; 0xfb14 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    fb0a:	03 e0       	ldi	r16, 0x03	; 3
    fb0c:	10 e0       	ldi	r17, 0x00	; 0
    fb0e:	02 c0       	rjmp	.+4      	; 0xfb14 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    fb10:	01 e0       	ldi	r16, 0x01	; 1
    fb12:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    fb14:	c6 fe       	sbrs	r12, 6
    fb16:	05 c0       	rjmp	.+10     	; 0xfb22 <open+0x4c>
    {
        if(flags & O_TRUNC)
    fb18:	d1 fe       	sbrs	r13, 1
    fb1a:	02 c0       	rjmp	.+4      	; 0xfb20 <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    fb1c:	08 60       	ori	r16, 0x08	; 8
    fb1e:	01 c0       	rjmp	.+2      	; 0xfb22 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    fb20:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    fb22:	94 df       	rcall	.-216    	; 0xfa4c <new_file_descriptor>
    fb24:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fb26:	77 d9       	rcall	.-3346   	; 0xee16 <fileno_to_stream>
    fb28:	ec 01       	movw	r28, r24
    fb2a:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    fb2c:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fb2e:	09 f4       	brne	.+2      	; 0xfb32 <open+0x5c>
    fb30:	48 c0       	rjmp	.+144    	; 0xfbc2 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fb32:	04 dd       	rcall	.-1528   	; 0xf53c <fileno_to_fatfs>
    fb34:	4c 01       	movw	r8, r24
    fb36:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    fb38:	59 f4       	brne	.+22     	; 0xfb50 <open+0x7a>
    {
        free_file_descriptor(fileno);
    fb3a:	c3 01       	movw	r24, r6
    fb3c:	19 df       	rcall	.-462    	; 0xf970 <free_file_descriptor>
    fb3e:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    fb40:	90 e0       	ldi	r25, 0x00	; 0
    fb42:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fb46:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fb4a:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    fb4c:	9f ef       	ldi	r25, 0xFF	; 255
    fb4e:	5d c0       	rjmp	.+186    	; 0xfc0a <open+0x134>
    fb50:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    fb52:	b5 01       	movw	r22, r10
    fb54:	0e 94 da 59 	call	0xb3b4	; 0xb3b4 <f_open>
    fb58:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    fb5a:	91 f0       	breq	.+36     	; 0xfb80 <open+0xaa>
    fb5c:	84 31       	cpi	r24, 0x14	; 20
    fb5e:	91 05       	cpc	r25, r1
    fb60:	40 f4       	brcc	.+16     	; 0xfb72 <open+0x9c>
    fb62:	fc 01       	movw	r30, r24
    fb64:	ea 55       	subi	r30, 0x5A	; 90
    fb66:	f4 4f       	sbci	r31, 0xF4	; 244
    fb68:	80 81       	ld	r24, Z
    fb6a:	08 2e       	mov	r0, r24
    fb6c:	00 0c       	add	r0, r0
    fb6e:	99 0b       	sbc	r25, r25
    fb70:	02 c0       	rjmp	.+4      	; 0xfb76 <open+0xa0>
    fb72:	83 e2       	ldi	r24, 0x23	; 35
    fb74:	90 e0       	ldi	r25, 0x00	; 0
    fb76:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    fb7a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fb7e:	20 c0       	rjmp	.+64     	; 0xfbc0 <open+0xea>
    fb80:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    fb82:	21 c0       	rjmp	.+66     	; 0xfbc6 <open+0xf0>
    fb84:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    fb86:	42 85       	ldd	r20, Z+10	; 0x0a
    fb88:	53 85       	ldd	r21, Z+11	; 0x0b
    fb8a:	64 85       	ldd	r22, Z+12	; 0x0c
    fb8c:	75 85       	ldd	r23, Z+13	; 0x0d
    fb8e:	c4 01       	movw	r24, r8
    fb90:	0e 94 9e 60 	call	0xc13c	; 0xc13c <f_lseek>
    fb94:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    fb96:	b9 f0       	breq	.+46     	; 0xfbc6 <open+0xf0>
    fb98:	84 31       	cpi	r24, 0x14	; 20
    fb9a:	91 05       	cpc	r25, r1
    fb9c:	40 f4       	brcc	.+16     	; 0xfbae <open+0xd8>
    fb9e:	fc 01       	movw	r30, r24
    fba0:	ea 55       	subi	r30, 0x5A	; 90
    fba2:	f4 4f       	sbci	r31, 0xF4	; 244
    fba4:	80 81       	ld	r24, Z
    fba6:	08 2e       	mov	r0, r24
    fba8:	00 0c       	add	r0, r0
    fbaa:	99 0b       	sbc	r25, r25
    fbac:	02 c0       	rjmp	.+4      	; 0xfbb2 <open+0xdc>
    fbae:	83 e2       	ldi	r24, 0x23	; 35
    fbb0:	90 e0       	ldi	r25, 0x00	; 0
    fbb2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    fbb6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fbba:	c4 01       	movw	r24, r8
            f_close(fh);
    fbbc:	0e 94 f4 5e 	call	0xbde8	; 0xbde8 <f_close>
            free_file_descriptor(fileno);
    fbc0:	c3 01       	movw	r24, r6
    fbc2:	d6 de       	rcall	.-596    	; 0xf970 <free_file_descriptor>
    fbc4:	c2 cf       	rjmp	.-124    	; 0xfb4a <open+0x74>
    fbc6:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    fbc8:	ef 16       	cp	r14, r31
    fbca:	f1 04       	cpc	r15, r1
    fbcc:	51 f4       	brne	.+20     	; 0xfbe2 <open+0x10c>
    fbce:	80 e8       	ldi	r24, 0x80	; 128
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fbd0:	95 e7       	ldi	r25, 0x75	; 117
    fbd2:	99 87       	std	Y+9, r25	; 0x09
    fbd4:	88 87       	std	Y+8, r24	; 0x08
    fbd6:	8d ef       	ldi	r24, 0xFD	; 253
        stream->get = fatfs_getc;
    fbd8:	94 e7       	ldi	r25, 0x74	; 116
    fbda:	9b 87       	std	Y+11, r25	; 0x0b
    fbdc:	8a 87       	std	Y+10, r24	; 0x0a
    fbde:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    fbe0:	12 c0       	rjmp	.+36     	; 0xfc06 <open+0x130>
    fbe2:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    fbe4:	f1 04       	cpc	r15, r1
    fbe6:	41 f4       	brne	.+16     	; 0xfbf8 <open+0x122>
    fbe8:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    fbea:	18 86       	std	Y+8, r1	; 0x08
    fbec:	8d ef       	ldi	r24, 0xFD	; 253
        stream->get = fatfs_getc;
    fbee:	94 e7       	ldi	r25, 0x74	; 116
    fbf0:	9b 87       	std	Y+11, r25	; 0x0b
    fbf2:	8a 87       	std	Y+10, r24	; 0x0a
    fbf4:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    fbf6:	07 c0       	rjmp	.+14     	; 0xfc06 <open+0x130>
    fbf8:	80 e8       	ldi	r24, 0x80	; 128
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fbfa:	95 e7       	ldi	r25, 0x75	; 117
    fbfc:	99 87       	std	Y+9, r25	; 0x09
    fbfe:	88 87       	std	Y+8, r24	; 0x08
    fc00:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    fc02:	1a 86       	std	Y+10, r1	; 0x0a
    fc04:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    fc06:	8b 83       	std	Y+3, r24	; 0x03
    fc08:	c3 01       	movw	r24, r6
    }

    return(fileno);
    fc0a:	cd b7       	in	r28, 0x3d	; 61
}
    fc0c:	de b7       	in	r29, 0x3e	; 62
    fc0e:	ee e0       	ldi	r30, 0x0E	; 14
    fc10:	0c 94 36 e7 	jmp	0x1ce6c	; 0x1ce6c <__epilogue_restores__+0x8>

0000fc14 <posix_fopen_modes_to_open>:
    fc14:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    fc16:	df 93       	push	r29
    fc18:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    fc1a:	62 e4       	ldi	r22, 0x42	; 66
    fc1c:	73 e0       	ldi	r23, 0x03	; 3
    fc1e:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fc22:	00 97       	sbiw	r24, 0x00	; 0
    fc24:	09 f4       	brne	.+2      	; 0xfc28 <posix_fopen_modes_to_open+0x14>
    fc26:	5d c0       	rjmp	.+186    	; 0xfce2 <posix_fopen_modes_to_open+0xce>
    fc28:	6e ef       	ldi	r22, 0xFE	; 254
    fc2a:	78 e0       	ldi	r23, 0x08	; 8
    fc2c:	ce 01       	movw	r24, r28
    fc2e:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fc32:	00 97       	sbiw	r24, 0x00	; 0
    fc34:	09 f4       	brne	.+2      	; 0xfc38 <posix_fopen_modes_to_open+0x24>
    fc36:	55 c0       	rjmp	.+170    	; 0xfce2 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    fc38:	61 e0       	ldi	r22, 0x01	; 1
    fc3a:	79 e0       	ldi	r23, 0x09	; 9
    fc3c:	ce 01       	movw	r24, r28
    fc3e:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fc42:	89 2b       	or	r24, r25
    fc44:	09 f4       	brne	.+2      	; 0xfc48 <posix_fopen_modes_to_open+0x34>
    fc46:	42 c0       	rjmp	.+132    	; 0xfccc <posix_fopen_modes_to_open+0xb8>
    fc48:	64 e0       	ldi	r22, 0x04	; 4
    fc4a:	79 e0       	ldi	r23, 0x09	; 9
    fc4c:	ce 01       	movw	r24, r28
    fc4e:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fc52:	89 2b       	or	r24, r25
    fc54:	d9 f1       	breq	.+118    	; 0xfccc <posix_fopen_modes_to_open+0xb8>
    fc56:	68 e0       	ldi	r22, 0x08	; 8
    fc58:	79 e0       	ldi	r23, 0x09	; 9
    fc5a:	ce 01       	movw	r24, r28
    fc5c:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fc60:	89 2b       	or	r24, r25
    fc62:	a1 f1       	breq	.+104    	; 0xfccc <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fc64:	6d eb       	ldi	r22, 0xBD	; 189
    fc66:	7a e0       	ldi	r23, 0x0A	; 10
    fc68:	ce 01       	movw	r24, r28
    fc6a:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fc6e:	89 2b       	or	r24, r25
    fc70:	81 f1       	breq	.+96     	; 0xfcd2 <posix_fopen_modes_to_open+0xbe>
    fc72:	6c e0       	ldi	r22, 0x0C	; 12
    fc74:	79 e0       	ldi	r23, 0x09	; 9
    fc76:	ce 01       	movw	r24, r28
    fc78:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fc7c:	89 2b       	or	r24, r25
    fc7e:	49 f1       	breq	.+82     	; 0xfcd2 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fc80:	6f e0       	ldi	r22, 0x0F	; 15
    fc82:	79 e0       	ldi	r23, 0x09	; 9
    fc84:	ce 01       	movw	r24, r28
    fc86:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fc8a:	89 2b       	or	r24, r25
    fc8c:	29 f1       	breq	.+74     	; 0xfcd8 <posix_fopen_modes_to_open+0xc4>
    fc8e:	62 e1       	ldi	r22, 0x12	; 18
    fc90:	79 e0       	ldi	r23, 0x09	; 9
    fc92:	ce 01       	movw	r24, r28
    fc94:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fc98:	89 2b       	or	r24, r25
    fc9a:	f1 f0       	breq	.+60     	; 0xfcd8 <posix_fopen_modes_to_open+0xc4>
    fc9c:	66 e1       	ldi	r22, 0x16	; 22
    fc9e:	79 e0       	ldi	r23, 0x09	; 9
    fca0:	ce 01       	movw	r24, r28
    fca2:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fca6:	89 2b       	or	r24, r25
    fca8:	b9 f0       	breq	.+46     	; 0xfcd8 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fcaa:	62 e2       	ldi	r22, 0x22	; 34
    fcac:	73 e1       	ldi	r23, 0x13	; 19
    fcae:	ce 01       	movw	r24, r28
    fcb0:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fcb4:	89 2b       	or	r24, r25
    fcb6:	99 f0       	breq	.+38     	; 0xfcde <posix_fopen_modes_to_open+0xca>
    fcb8:	6a e1       	ldi	r22, 0x1A	; 26
    fcba:	79 e0       	ldi	r23, 0x09	; 9
    fcbc:	ce 01       	movw	r24, r28
    fcbe:	0e 94 cd 31 	call	0x639a	; 0x639a <strcmp>
    fcc2:	89 2b       	or	r24, r25
    fcc4:	61 f0       	breq	.+24     	; 0xfcde <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fcc6:	8f ef       	ldi	r24, 0xFF	; 255
    fcc8:	9f ef       	ldi	r25, 0xFF	; 255
    fcca:	0b c0       	rjmp	.+22     	; 0xfce2 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fccc:	82 e0       	ldi	r24, 0x02	; 2
    fcce:	92 e0       	ldi	r25, 0x02	; 2
    fcd0:	08 c0       	rjmp	.+16     	; 0xfce2 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fcd2:	81 e4       	ldi	r24, 0x41	; 65
    fcd4:	92 e0       	ldi	r25, 0x02	; 2
    fcd6:	05 c0       	rjmp	.+10     	; 0xfce2 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fcd8:	82 e4       	ldi	r24, 0x42	; 66
    fcda:	92 e0       	ldi	r25, 0x02	; 2
    fcdc:	02 c0       	rjmp	.+4      	; 0xfce2 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fcde:	81 e4       	ldi	r24, 0x41	; 65
    fce0:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fce2:	df 91       	pop	r29
    fce4:	cf 91       	pop	r28
    fce6:	08 95       	ret

0000fce8 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fce8:	cf 93       	push	r28
    fcea:	df 93       	push	r29
    fcec:	ec 01       	movw	r28, r24
    fcee:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fcf0:	91 df       	rcall	.-222    	; 0xfc14 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fcf2:	bc 01       	movw	r22, r24
    fcf4:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fcf6:	ef de       	rcall	.-546    	; 0xfad6 <open>
    fcf8:	8e d8       	rcall	.-3812   	; 0xee16 <fileno_to_stream>
}
    fcfa:	df 91       	pop	r29
    fcfc:	cf 91       	pop	r28
    fcfe:	08 95       	ret

0000fd00 <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fd00:	a8 e0       	ldi	r26, 0x08	; 8
    fd02:	b0 e0       	ldi	r27, 0x00	; 0
    fd04:	e6 e8       	ldi	r30, 0x86	; 134
    fd06:	fe e7       	ldi	r31, 0x7E	; 126
    fd08:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fd0c:	83 e7       	ldi	r24, 0x73	; 115
    fd0e:	96 e7       	ldi	r25, 0x76	; 118
    fd10:	9a 83       	std	Y+2, r25	; 0x02
    fd12:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fd14:	18 86       	std	Y+8, r1	; 0x08
    fd16:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fd18:	8d 85       	ldd	r24, Y+13	; 0x0d
    fd1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    fd1c:	9c 83       	std	Y+4, r25	; 0x04
    fd1e:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fd20:	4f 85       	ldd	r20, Y+15	; 0x0f
    fd22:	58 89       	ldd	r21, Y+16	; 0x10
    fd24:	60 e8       	ldi	r22, 0x80	; 128
    fd26:	9e 01       	movw	r18, r28
    fd28:	2f 5e       	subi	r18, 0xEF	; 239
    fd2a:	3f 4f       	sbci	r19, 0xFF	; 255
    fd2c:	ce 01       	movw	r24, r28
    fd2e:	01 96       	adiw	r24, 0x01	; 1
    fd30:	0e 94 8d 42 	call	0x851a	; 0x851a <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fd34:	8f 81       	ldd	r24, Y+7	; 0x07
    fd36:	98 85       	ldd	r25, Y+8	; 0x08
    fd38:	28 96       	adiw	r28, 0x08	; 8
    fd3a:	e2 e0       	ldi	r30, 0x02	; 2
    fd3c:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000fd40 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fd40:	cf 93       	push	r28
    fd42:	df 93       	push	r29
    fd44:	00 d0       	rcall	.+0      	; 0xfd46 <posix_help+0x6>
    fd46:	1f 92       	push	r1
    fd48:	ec 01       	movw	r28, r24
    fd4a:	80 e8       	ldi	r24, 0x80	; 128
    fd4c:	9e e0       	ldi	r25, 0x0E	; 14
    fd4e:	a0 e0       	ldi	r26, 0x00	; 0
    fd50:	ed b7       	in	r30, 0x3d	; 61
    fd52:	fe b7       	in	r31, 0x3e	; 62
    fd54:	81 83       	std	Z+1, r24	; 0x01
    fd56:	92 83       	std	Z+2, r25	; 0x02
    fd58:	a3 83       	std	Z+3, r26	; 0x03
    fd5a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fd5e:	cd 2b       	or	r28, r29
    fd60:	51 f0       	breq	.+20     	; 0xfd76 <posix_help+0x36>
    fd62:	8a eb       	ldi	r24, 0xBA	; 186
    fd64:	9d e0       	ldi	r25, 0x0D	; 13
    fd66:	a0 e0       	ldi	r26, 0x00	; 0
    fd68:	ed b7       	in	r30, 0x3d	; 61
    fd6a:	fe b7       	in	r31, 0x3e	; 62
    fd6c:	81 83       	std	Z+1, r24	; 0x01
    fd6e:	92 83       	std	Z+2, r25	; 0x02
    fd70:	a3 83       	std	Z+3, r26	; 0x03
    fd72:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fd76:	cd b7       	in	r28, 0x3d	; 61
    fd78:	de b7       	in	r29, 0x3e	; 62
    fd7a:	23 96       	adiw	r28, 0x03	; 3
    fd7c:	e2 e0       	ldi	r30, 0x02	; 2
    fd7e:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000fd82 <copy>:
    fd82:	4f 92       	push	r4
    fd84:	5f 92       	push	r5
    fd86:	6f 92       	push	r6
    fd88:	8f 92       	push	r8
    fd8a:	9f 92       	push	r9
    fd8c:	af 92       	push	r10
    fd8e:	bf 92       	push	r11
    fd90:	cf 92       	push	r12
    fd92:	df 92       	push	r13
    fd94:	ef 92       	push	r14
    fd96:	ff 92       	push	r15
    fd98:	0f 93       	push	r16
    fd9a:	1f 93       	push	r17
    fd9c:	cf 93       	push	r28
    fd9e:	df 93       	push	r29
    fda0:	ad b7       	in	r26, 0x3d	; 61
    fda2:	be b7       	in	r27, 0x3e	; 62
    fda4:	17 97       	sbiw	r26, 0x07	; 7
    fda6:	0f b6       	in	r0, 0x3f	; 63
    fda8:	f8 94       	cli
    fdaa:	be bf       	out	0x3e, r27	; 62
    fdac:	0f be       	out	0x3f, r0	; 63
    fdae:	ad bf       	out	0x3d, r26	; 61
    fdb0:	8c 01       	movw	r16, r24
    fdb2:	eb 01       	movw	r28, r22
    fdb4:	ed b7       	in	r30, 0x3d	; 61
    fdb6:	fe b7       	in	r31, 0x3e	; 62
    fdb8:	95 83       	std	Z+5, r25	; 0x05
    fdba:	84 83       	std	Z+4, r24	; 0x04
    fdbc:	87 e1       	ldi	r24, 0x17	; 23
    fdbe:	9d e0       	ldi	r25, 0x0D	; 13
    fdc0:	a0 e0       	ldi	r26, 0x00	; 0
    fdc2:	81 83       	std	Z+1, r24	; 0x01
    fdc4:	92 83       	std	Z+2, r25	; 0x02
    fdc6:	a3 83       	std	Z+3, r26	; 0x03
    fdc8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fdcc:	6e ef       	ldi	r22, 0xFE	; 254
    fdce:	78 e0       	ldi	r23, 0x08	; 8
    fdd0:	c8 01       	movw	r24, r16
    fdd2:	8a df       	rcall	.-236    	; 0xfce8 <fopen>
    fdd4:	7c 01       	movw	r14, r24
    fdd6:	ed b7       	in	r30, 0x3d	; 61
    fdd8:	fe b7       	in	r31, 0x3e	; 62
    fdda:	89 2b       	or	r24, r25
    fddc:	59 f4       	brne	.+22     	; 0xfdf4 <copy+0x72>
    fdde:	15 83       	std	Z+5, r17	; 0x05
    fde0:	04 83       	std	Z+4, r16	; 0x04
    fde2:	87 e0       	ldi	r24, 0x07	; 7
    fde4:	9d e0       	ldi	r25, 0x0D	; 13
    fde6:	a0 e0       	ldi	r26, 0x00	; 0
    fde8:	81 83       	std	Z+1, r24	; 0x01
    fdea:	92 83       	std	Z+2, r25	; 0x02
    fdec:	a3 83       	std	Z+3, r26	; 0x03
    fdee:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fdf2:	20 c0       	rjmp	.+64     	; 0xfe34 <copy+0xb2>
    fdf4:	d5 83       	std	Z+5, r29	; 0x05
    fdf6:	c4 83       	std	Z+4, r28	; 0x04
    fdf8:	8a ef       	ldi	r24, 0xFA	; 250
    fdfa:	9c e0       	ldi	r25, 0x0C	; 12
    fdfc:	a0 e0       	ldi	r26, 0x00	; 0
    fdfe:	81 83       	std	Z+1, r24	; 0x01
    fe00:	92 83       	std	Z+2, r25	; 0x02
    fe02:	a3 83       	std	Z+3, r26	; 0x03
    fe04:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fe08:	6c e0       	ldi	r22, 0x0C	; 12
    fe0a:	79 e0       	ldi	r23, 0x09	; 9
    fe0c:	ce 01       	movw	r24, r28
    fe0e:	6c df       	rcall	.-296    	; 0xfce8 <fopen>
    fe10:	8c 01       	movw	r16, r24
    fe12:	89 2b       	or	r24, r25
    fe14:	a1 f4       	brne	.+40     	; 0xfe3e <copy+0xbc>
    fe16:	ed b7       	in	r30, 0x3d	; 61
    fe18:	fe b7       	in	r31, 0x3e	; 62
    fe1a:	d5 83       	std	Z+5, r29	; 0x05
    fe1c:	c4 83       	std	Z+4, r28	; 0x04
    fe1e:	8a ee       	ldi	r24, 0xEA	; 234
    fe20:	9c e0       	ldi	r25, 0x0C	; 12
    fe22:	a0 e0       	ldi	r26, 0x00	; 0
    fe24:	81 83       	std	Z+1, r24	; 0x01
    fe26:	92 83       	std	Z+2, r25	; 0x02
    fe28:	a3 83       	std	Z+3, r26	; 0x03
    fe2a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fe2e:	80 e0       	ldi	r24, 0x00	; 0
    fe30:	90 e0       	ldi	r25, 0x00	; 0
    fe32:	04 de       	rcall	.-1016   	; 0xfa3c <fclose>
    fe34:	6f ef       	ldi	r22, 0xFF	; 255
    fe36:	7f ef       	ldi	r23, 0xFF	; 255
    fe38:	8f ef       	ldi	r24, 0xFF	; 255
    fe3a:	9f ef       	ldi	r25, 0xFF	; 255
    fe3c:	68 c0       	rjmp	.+208    	; 0xff0e <__DATA_REGION_LENGTH__+0xe>
    fe3e:	61 e0       	ldi	r22, 0x01	; 1
    fe40:	70 e0       	ldi	r23, 0x00	; 0
    fe42:	80 e0       	ldi	r24, 0x00	; 0
    fe44:	92 e0       	ldi	r25, 0x02	; 2
    fe46:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
    fe4a:	6c 01       	movw	r12, r24
    fe4c:	89 2b       	or	r24, r25
    fe4e:	21 f4       	brne	.+8      	; 0xfe58 <copy+0xd6>
    fe50:	c7 01       	movw	r24, r14
    fe52:	f4 dd       	rcall	.-1048   	; 0xfa3c <fclose>
    fe54:	c8 01       	movw	r24, r16
    fe56:	ed cf       	rjmp	.-38     	; 0xfe32 <copy+0xb0>
    fe58:	8d ed       	ldi	r24, 0xDD	; 221
    fe5a:	9c e0       	ldi	r25, 0x0C	; 12
    fe5c:	a0 e0       	ldi	r26, 0x00	; 0
    fe5e:	ed b7       	in	r30, 0x3d	; 61
    fe60:	fe b7       	in	r31, 0x3e	; 62
    fe62:	81 83       	std	Z+1, r24	; 0x01
    fe64:	92 83       	std	Z+2, r25	; 0x02
    fe66:	a3 83       	std	Z+3, r26	; 0x03
    fe68:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fe6c:	81 2c       	mov	r8, r1
    fe6e:	91 2c       	mov	r9, r1
    fe70:	54 01       	movw	r10, r8
    fe72:	81 ec       	ldi	r24, 0xC1	; 193
    fe74:	9c e0       	ldi	r25, 0x0C	; 12
    fe76:	2c 01       	movw	r4, r24
    fe78:	61 2c       	mov	r6, r1
    fe7a:	97 01       	movw	r18, r14
    fe7c:	40 e0       	ldi	r20, 0x00	; 0
    fe7e:	52 e0       	ldi	r21, 0x02	; 2
    fe80:	61 e0       	ldi	r22, 0x01	; 1
    fe82:	70 e0       	ldi	r23, 0x00	; 0
    fe84:	c6 01       	movw	r24, r12
    fe86:	86 dc       	rcall	.-1780   	; 0xf794 <fread>
    fe88:	ec 01       	movw	r28, r24
    fe8a:	18 16       	cp	r1, r24
    fe8c:	19 06       	cpc	r1, r25
    fe8e:	44 f5       	brge	.+80     	; 0xfee0 <copy+0x15e>
    fe90:	98 01       	movw	r18, r16
    fe92:	ae 01       	movw	r20, r28
    fe94:	61 e0       	ldi	r22, 0x01	; 1
    fe96:	70 e0       	ldi	r23, 0x00	; 0
    fe98:	c6 01       	movw	r24, r12
    fe9a:	4e dd       	rcall	.-1380   	; 0xf938 <fwrite>
    fe9c:	8c 17       	cp	r24, r28
    fe9e:	9d 07       	cpc	r25, r29
    fea0:	5c f4       	brge	.+22     	; 0xfeb8 <copy+0x136>
    fea2:	80 ed       	ldi	r24, 0xD0	; 208
    fea4:	9c e0       	ldi	r25, 0x0C	; 12
    fea6:	a0 e0       	ldi	r26, 0x00	; 0
    fea8:	ed b7       	in	r30, 0x3d	; 61
    feaa:	fe b7       	in	r31, 0x3e	; 62
    feac:	81 83       	std	Z+1, r24	; 0x01
    feae:	92 83       	std	Z+2, r25	; 0x02
    feb0:	a3 83       	std	Z+3, r26	; 0x03
    feb2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    feb6:	14 c0       	rjmp	.+40     	; 0xfee0 <copy+0x15e>
    feb8:	ce 01       	movw	r24, r28
    feba:	dd 0f       	add	r29, r29
    febc:	aa 0b       	sbc	r26, r26
    febe:	bb 0b       	sbc	r27, r27
    fec0:	88 0e       	add	r8, r24
    fec2:	99 1e       	adc	r9, r25
    fec4:	aa 1e       	adc	r10, r26
    fec6:	bb 1e       	adc	r11, r27
    fec8:	ed b7       	in	r30, 0x3d	; 61
    feca:	fe b7       	in	r31, 0x3e	; 62
    fecc:	84 82       	std	Z+4, r8	; 0x04
    fece:	95 82       	std	Z+5, r9	; 0x05
    fed0:	a6 82       	std	Z+6, r10	; 0x06
    fed2:	b7 82       	std	Z+7, r11	; 0x07
    fed4:	41 82       	std	Z+1, r4	; 0x01
    fed6:	52 82       	std	Z+2, r5	; 0x02
    fed8:	63 82       	std	Z+3, r6	; 0x03
    feda:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fede:	cd cf       	rjmp	.-102    	; 0xfe7a <copy+0xf8>
    fee0:	ed b7       	in	r30, 0x3d	; 61
    fee2:	fe b7       	in	r31, 0x3e	; 62
    fee4:	84 82       	std	Z+4, r8	; 0x04
    fee6:	95 82       	std	Z+5, r9	; 0x05
    fee8:	a6 82       	std	Z+6, r10	; 0x06
    feea:	b7 82       	std	Z+7, r11	; 0x07
    feec:	8e ea       	ldi	r24, 0xAE	; 174
    feee:	9c e0       	ldi	r25, 0x0C	; 12
    fef0:	a0 e0       	ldi	r26, 0x00	; 0
    fef2:	81 83       	std	Z+1, r24	; 0x01
    fef4:	92 83       	std	Z+2, r25	; 0x02
    fef6:	a3 83       	std	Z+3, r26	; 0x03
    fef8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fefc:	c6 01       	movw	r24, r12
    fefe:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
    ff02:	c7 01       	movw	r24, r14
    ff04:	9b dd       	rcall	.-1226   	; 0xfa3c <fclose>
    ff06:	c8 01       	movw	r24, r16
    ff08:	99 dd       	rcall	.-1230   	; 0xfa3c <fclose>
    ff0a:	b4 01       	movw	r22, r8
    ff0c:	c5 01       	movw	r24, r10
    ff0e:	ad b7       	in	r26, 0x3d	; 61
    ff10:	be b7       	in	r27, 0x3e	; 62
    ff12:	17 96       	adiw	r26, 0x07	; 7
    ff14:	0f b6       	in	r0, 0x3f	; 63
    ff16:	f8 94       	cli
    ff18:	be bf       	out	0x3e, r27	; 62
    ff1a:	0f be       	out	0x3f, r0	; 63
    ff1c:	ad bf       	out	0x3d, r26	; 61
    ff1e:	df 91       	pop	r29
    ff20:	cf 91       	pop	r28
    ff22:	1f 91       	pop	r17
    ff24:	0f 91       	pop	r16
    ff26:	ff 90       	pop	r15
    ff28:	ef 90       	pop	r14
    ff2a:	df 90       	pop	r13
    ff2c:	cf 90       	pop	r12
    ff2e:	bf 90       	pop	r11
    ff30:	af 90       	pop	r10
    ff32:	9f 90       	pop	r9
    ff34:	8f 90       	pop	r8
    ff36:	6f 90       	pop	r6
    ff38:	5f 90       	pop	r5
    ff3a:	4f 90       	pop	r4
    ff3c:	08 95       	ret

0000ff3e <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    ff3e:	cf 93       	push	r28
    ff40:	df 93       	push	r29
    ff42:	00 d0       	rcall	.+0      	; 0xff44 <testpage+0x6>
    ff44:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    ff46:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    ff4a:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    ff4e:	82 17       	cp	r24, r18
    ff50:	93 07       	cpc	r25, r19
    ff52:	3c f1       	brlt	.+78     	; 0xffa2 <testpage+0x64>
    {
        printf("More..");
    ff54:	87 ea       	ldi	r24, 0xA7	; 167
    ff56:	9c e0       	ldi	r25, 0x0C	; 12
    ff58:	a0 e0       	ldi	r26, 0x00	; 0
    ff5a:	ed b7       	in	r30, 0x3d	; 61
    ff5c:	fe b7       	in	r31, 0x3e	; 62
    ff5e:	81 83       	std	Z+1, r24	; 0x01
    ff60:	92 83       	std	Z+2, r25	; 0x02
    ff62:	a3 83       	std	Z+3, r26	; 0x03
    ff64:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    ff68:	0e 94 80 76 	call	0xed00	; 0xed00 <getchar>
    ff6c:	ec 01       	movw	r28, r24
        printf("\r");
    ff6e:	85 ea       	ldi	r24, 0xA5	; 165
    ff70:	9c e0       	ldi	r25, 0x0C	; 12
    ff72:	a0 e0       	ldi	r26, 0x00	; 0
    ff74:	ed b7       	in	r30, 0x3d	; 61
    ff76:	fe b7       	in	r31, 0x3e	; 62
    ff78:	81 83       	std	Z+1, r24	; 0x01
    ff7a:	92 83       	std	Z+2, r25	; 0x02
    ff7c:	a3 83       	std	Z+3, r26	; 0x03
    ff7e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        if(c == 'q')
    ff82:	c1 37       	cpi	r28, 0x71	; 113
    ff84:	d1 05       	cpc	r29, r1
    ff86:	41 f0       	breq	.+16     	; 0xff98 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    ff88:	2a 97       	sbiw	r28, 0x0a	; 10
    ff8a:	49 f4       	brne	.+18     	; 0xff9e <testpage+0x60>
            return(_pagesize-1);                  // single line
    ff8c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    ff90:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    ff94:	01 97       	sbiw	r24, 0x01	; 1
    ff96:	05 c0       	rjmp	.+10     	; 0xffa2 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    ff98:	8f ef       	ldi	r24, 0xFF	; 255
    ff9a:	9f ef       	ldi	r25, 0xFF	; 255
    ff9c:	02 c0       	rjmp	.+4      	; 0xffa2 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    ff9e:	80 e0       	ldi	r24, 0x00	; 0
    ffa0:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    ffa2:	cd b7       	in	r28, 0x3d	; 61
    ffa4:	de b7       	in	r29, 0x3e	; 62
    ffa6:	23 96       	adiw	r28, 0x03	; 3
    ffa8:	e2 e0       	ldi	r30, 0x02	; 2
    ffaa:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0000ffae <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    ffae:	a7 e0       	ldi	r26, 0x07	; 7
    ffb0:	b1 e0       	ldi	r27, 0x01	; 1
    ffb2:	ed ed       	ldi	r30, 0xDD	; 221
    ffb4:	ff e7       	ldi	r31, 0x7F	; 127
    ffb6:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
    ffba:	8c 01       	movw	r16, r24
    ffbc:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    ffbe:	6e ef       	ldi	r22, 0xFE	; 254
    ffc0:	78 e0       	ldi	r23, 0x08	; 8
    ffc2:	92 de       	rcall	.-732    	; 0xfce8 <fopen>
    ffc4:	7c 01       	movw	r14, r24
    if (!fp)
    ffc6:	89 2b       	or	r24, r25
    ffc8:	41 f0       	breq	.+16     	; 0xffda <cat+0x2c>
    ffca:	c1 2c       	mov	r12, r1
    ffcc:	d1 2c       	mov	r13, r1
    ffce:	a1 2c       	mov	r10, r1
    ffd0:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ffd2:	8e 01       	movw	r16, r28
    ffd4:	08 5f       	subi	r16, 0xF8	; 248
    ffd6:	1f 4f       	sbci	r17, 0xFF	; 255
    ffd8:	23 c0       	rjmp	.+70     	; 0x10020 <__EEPROM_REGION_LENGTH__+0x20>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    ffda:	ed b7       	in	r30, 0x3d	; 61
    ffdc:	fe b7       	in	r31, 0x3e	; 62
    ffde:	15 83       	std	Z+5, r17	; 0x05
    ffe0:	04 83       	std	Z+4, r16	; 0x04
    ffe2:	80 e3       	ldi	r24, 0x30	; 48
    ffe4:	9d e0       	ldi	r25, 0x0D	; 13
    ffe6:	a0 e0       	ldi	r26, 0x00	; 0
    ffe8:	81 83       	std	Z+1, r24	; 0x01
    ffea:	92 83       	std	Z+2, r25	; 0x02
    ffec:	a3 83       	std	Z+3, r26	; 0x03
    ffee:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        return(-1);
    fff2:	cc 24       	eor	r12, r12
    fff4:	ca 94       	dec	r12
    fff6:	dc 2c       	mov	r13, r12
    fff8:	76 01       	movw	r14, r12
    fffa:	3f c0       	rjmp	.+126    	; 0x1007a <__EEPROM_REGION_LENGTH__+0x7a>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fffc:	c8 01       	movw	r24, r16
    fffe:	0e 94 51 32 	call	0x64a2	; 0x64a2 <trim_tail>
        size += strlen(line);
   10002:	f8 01       	movw	r30, r16
   10004:	01 90       	ld	r0, Z+
   10006:	00 20       	and	r0, r0
   10008:	e9 f7       	brne	.-6      	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
   1000a:	31 97       	sbiw	r30, 0x01	; 1
   1000c:	e0 1b       	sub	r30, r16
   1000e:	f1 0b       	sbc	r31, r17
   10010:	ce 0e       	add	r12, r30
   10012:	df 1e       	adc	r13, r31
        puts(line);
   10014:	c8 01       	movw	r24, r16
   10016:	0e 94 d8 76 	call	0xedb0	; 0xedb0 <puts>
        if(dopage)
   1001a:	81 14       	cp	r8, r1
   1001c:	91 04       	cpc	r9, r1
   1001e:	49 f4       	brne	.+18     	; 0x10032 <__EEPROM_REGION_LENGTH__+0x32>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10020:	a7 01       	movw	r20, r14
   10022:	6e ef       	ldi	r22, 0xFE	; 254
   10024:	70 e0       	ldi	r23, 0x00	; 0
   10026:	c8 01       	movw	r24, r16
   10028:	0e 94 8c 76 	call	0xed18	; 0xed18 <fgets>
   1002c:	89 2b       	or	r24, r25
   1002e:	31 f7       	brne	.-52     	; 0xfffc <cat+0x4e>
   10030:	06 c0       	rjmp	.+12     	; 0x1003e <__EEPROM_REGION_LENGTH__+0x3e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10032:	c5 01       	movw	r24, r10
   10034:	01 96       	adiw	r24, 0x01	; 1
   10036:	83 df       	rcall	.-250    	; 0xff3e <testpage>
   10038:	5c 01       	movw	r10, r24
            if(count < 0)
   1003a:	97 ff       	sbrs	r25, 7
   1003c:	f1 cf       	rjmp	.-30     	; 0x10020 <__EEPROM_REGION_LENGTH__+0x20>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   1003e:	8e e2       	ldi	r24, 0x2E	; 46
   10040:	9d e0       	ldi	r25, 0x0D	; 13
   10042:	a0 e0       	ldi	r26, 0x00	; 0
   10044:	ed b7       	in	r30, 0x3d	; 61
   10046:	fe b7       	in	r31, 0x3e	; 62
   10048:	81 83       	std	Z+1, r24	; 0x01
   1004a:	92 83       	std	Z+2, r25	; 0x02
   1004c:	a3 83       	std	Z+3, r26	; 0x03
   1004e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    fclose(fp);
   10052:	c7 01       	movw	r24, r14
   10054:	f3 dc       	rcall	.-1562   	; 0xfa3c <fclose>
    printf("%ld bytes\n", (long)size);
   10056:	0d 2c       	mov	r0, r13
   10058:	00 0c       	add	r0, r0
   1005a:	ee 08       	sbc	r14, r14
   1005c:	ff 08       	sbc	r15, r15
   1005e:	ed b7       	in	r30, 0x3d	; 61
   10060:	fe b7       	in	r31, 0x3e	; 62
   10062:	c4 82       	std	Z+4, r12	; 0x04
   10064:	d5 82       	std	Z+5, r13	; 0x05
   10066:	e6 82       	std	Z+6, r14	; 0x06
   10068:	f7 82       	std	Z+7, r15	; 0x07
   1006a:	83 e2       	ldi	r24, 0x23	; 35
   1006c:	9d e0       	ldi	r25, 0x0D	; 13
   1006e:	a0 e0       	ldi	r26, 0x00	; 0
   10070:	81 83       	std	Z+1, r24	; 0x01
   10072:	92 83       	std	Z+2, r25	; 0x02
   10074:	a3 83       	std	Z+3, r26	; 0x03
   10076:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    return(size);
}
   1007a:	c7 01       	movw	r24, r14
   1007c:	b6 01       	movw	r22, r12
   1007e:	c9 5f       	subi	r28, 0xF9	; 249
   10080:	de 4f       	sbci	r29, 0xFE	; 254
   10082:	ec e0       	ldi	r30, 0x0C	; 12
   10084:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

00010088 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10088:	4f 92       	push	r4
   1008a:	5f 92       	push	r5
   1008c:	6f 92       	push	r6
   1008e:	7f 92       	push	r7
   10090:	af 92       	push	r10
   10092:	bf 92       	push	r11
   10094:	cf 92       	push	r12
   10096:	df 92       	push	r13
   10098:	ef 92       	push	r14
   1009a:	ff 92       	push	r15
   1009c:	0f 93       	push	r16
   1009e:	1f 93       	push	r17
   100a0:	cf 93       	push	r28
   100a2:	df 93       	push	r29
   100a4:	cd b7       	in	r28, 0x3d	; 61
   100a6:	de b7       	in	r29, 0x3e	; 62
   100a8:	c9 54       	subi	r28, 0x49	; 73
   100aa:	d1 09       	sbc	r29, r1
   100ac:	0f b6       	in	r0, 0x3f	; 63
   100ae:	f8 94       	cli
   100b0:	de bf       	out	0x3e, r29	; 62
   100b2:	0f be       	out	0x3f, r0	; 63
   100b4:	cd bf       	out	0x3d, r28	; 61
   100b6:	8c 01       	movw	r16, r24
   100b8:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   100ba:	be 01       	movw	r22, r28
   100bc:	62 5f       	subi	r22, 0xF2	; 242
   100be:	7f 4f       	sbci	r23, 0xFF	; 255
   100c0:	18 d9       	rcall	.-3536   	; 0xf2f2 <stat>
   100c2:	01 96       	adiw	r24, 0x01	; 1
   100c4:	79 f4       	brne	.+30     	; 0x100e4 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   100c6:	ed b7       	in	r30, 0x3d	; 61
   100c8:	fe b7       	in	r31, 0x3e	; 62
   100ca:	15 83       	std	Z+5, r17	; 0x05
   100cc:	04 83       	std	Z+4, r16	; 0x04
   100ce:	83 e9       	ldi	r24, 0x93	; 147
   100d0:	9c e0       	ldi	r25, 0x0C	; 12
   100d2:	a0 e0       	ldi	r26, 0x00	; 0
   100d4:	81 83       	std	Z+1, r24	; 0x01
   100d6:	92 83       	std	Z+2, r25	; 0x02
   100d8:	a3 83       	std	Z+3, r26	; 0x03
   100da:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        return(0);
   100de:	80 e0       	ldi	r24, 0x00	; 0
   100e0:	90 e0       	ldi	r25, 0x00	; 0
   100e2:	77 c0       	rjmp	.+238    	; 0x101d2 <ls_info+0x14a>
    }

    if(!verbose)
   100e4:	ef 28       	or	r14, r15
   100e6:	81 f4       	brne	.+32     	; 0x10108 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   100e8:	c8 01       	movw	r24, r16
   100ea:	0e 94 45 77 	call	0xee8a	; 0xee8a <basename>
   100ee:	ed b7       	in	r30, 0x3d	; 61
   100f0:	fe b7       	in	r31, 0x3e	; 62
   100f2:	95 83       	std	Z+5, r25	; 0x05
   100f4:	84 83       	std	Z+4, r24	; 0x04
   100f6:	8f e8       	ldi	r24, 0x8F	; 143
   100f8:	9c e0       	ldi	r25, 0x0C	; 12
   100fa:	a0 e0       	ldi	r26, 0x00	; 0
   100fc:	81 83       	std	Z+1, r24	; 0x01
   100fe:	92 83       	std	Z+2, r25	; 0x02
   10100:	a3 83       	std	Z+3, r26	; 0x03
   10102:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   10106:	63 c0       	rjmp	.+198    	; 0x101ce <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10108:	4e 88       	ldd	r4, Y+22	; 0x16
   1010a:	5f 88       	ldd	r5, Y+23	; 0x17
   1010c:	68 8c       	ldd	r6, Y+24	; 0x18
   1010e:	79 8c       	ldd	r7, Y+25	; 0x19
   10110:	d3 01       	movw	r26, r6
   10112:	c2 01       	movw	r24, r4
   10114:	88 27       	eor	r24, r24
   10116:	90 7f       	andi	r25, 0xF0	; 240
   10118:	aa 27       	eor	r26, r26
   1011a:	bb 27       	eor	r27, r27
   1011c:	81 15       	cp	r24, r1
   1011e:	90 44       	sbci	r25, 0x40	; 64
   10120:	a1 05       	cpc	r26, r1
   10122:	b1 05       	cpc	r27, r1
   10124:	11 f4       	brne	.+4      	; 0x1012a <ls_info+0xa2>
        *p++ = 'd';
   10126:	84 e6       	ldi	r24, 0x64	; 100
   10128:	01 c0       	rjmp	.+2      	; 0x1012c <ls_info+0xa4>
    else
        *p++ = '-';
   1012a:	8d e2       	ldi	r24, 0x2D	; 45
   1012c:	8e af       	std	Y+62, r24	; 0x3e
   1012e:	fe 01       	movw	r30, r28
   10130:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10132:	e1 2c       	mov	r14, r1
   10134:	ff 24       	eor	r15, r15
   10136:	f3 94       	inc	r15
   10138:	20 e0       	ldi	r18, 0x00	; 0
   1013a:	30 e0       	ldi	r19, 0x00	; 0
   1013c:	be 2e       	mov	r11, r30
   1013e:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10140:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10142:	53 e0       	ldi	r21, 0x03	; 3
   10144:	c5 2e       	mov	r12, r21
   10146:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   10148:	c7 01       	movw	r24, r14
   1014a:	a0 e0       	ldi	r26, 0x00	; 0
   1014c:	b0 e0       	ldi	r27, 0x00	; 0
   1014e:	84 21       	and	r24, r4
   10150:	95 21       	and	r25, r5
   10152:	a6 21       	and	r26, r6
   10154:	b7 21       	and	r27, r7
   10156:	89 2b       	or	r24, r25
   10158:	8a 2b       	or	r24, r26
   1015a:	8b 2b       	or	r24, r27
   1015c:	51 f0       	breq	.+20     	; 0x10172 <ls_info+0xea>
            *p++ = cm[ i % 3];
   1015e:	c9 01       	movw	r24, r18
   10160:	b6 01       	movw	r22, r12
   10162:	0e 94 96 e6 	call	0x1cd2c	; 0x1cd2c <__divmodhi4>
   10166:	dc 01       	movw	r26, r24
   10168:	a6 54       	subi	r26, 0x46	; 70
   1016a:	b4 4f       	sbci	r27, 0xF4	; 244
   1016c:	8c 91       	ld	r24, X
   1016e:	81 83       	std	Z+1, r24	; 0x01
   10170:	01 c0       	rjmp	.+2      	; 0x10174 <ls_info+0xec>
        else
            *p++ = '-';
   10172:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10174:	f6 94       	lsr	r15
   10176:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10178:	2f 5f       	subi	r18, 0xFF	; 255
   1017a:	3f 4f       	sbci	r19, 0xFF	; 255
   1017c:	31 96       	adiw	r30, 0x01	; 1
   1017e:	29 30       	cpi	r18, 0x09	; 9
   10180:	31 05       	cpc	r19, r1
   10182:	11 f7       	brne	.-60     	; 0x10148 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10184:	29 96       	adiw	r28, 0x09	; 9
   10186:	1f ae       	std	Y+63, r1	; 0x3f
   10188:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   1018a:	4e a0       	ldd	r4, Y+38	; 0x26
   1018c:	5f a0       	ldd	r5, Y+39	; 0x27
   1018e:	68 a4       	ldd	r6, Y+40	; 0x28
   10190:	79 a4       	ldd	r7, Y+41	; 0x29
   10192:	6e a9       	ldd	r22, Y+54	; 0x36
   10194:	7f a9       	ldd	r23, Y+55	; 0x37
   10196:	88 ad       	ldd	r24, Y+56	; 0x38
   10198:	99 ad       	ldd	r25, Y+57	; 0x39
   1019a:	0e 94 20 77 	call	0xee40	; 0xee40 <mctime>
   1019e:	7c 01       	movw	r14, r24
   101a0:	c8 01       	movw	r24, r16
   101a2:	0e 94 45 77 	call	0xee8a	; 0xee8a <basename>
   101a6:	ed b7       	in	r30, 0x3d	; 61
   101a8:	fe b7       	in	r31, 0x3e	; 62
   101aa:	95 87       	std	Z+13, r25	; 0x0d
   101ac:	84 87       	std	Z+12, r24	; 0x0c
   101ae:	f3 86       	std	Z+11, r15	; 0x0b
   101b0:	e2 86       	std	Z+10, r14	; 0x0a
   101b2:	46 82       	std	Z+6, r4	; 0x06
   101b4:	57 82       	std	Z+7, r5	; 0x07
   101b6:	60 86       	std	Z+8, r6	; 0x08
   101b8:	71 86       	std	Z+9, r7	; 0x09
   101ba:	b4 82       	std	Z+4, r11	; 0x04
   101bc:	a5 82       	std	Z+5, r10	; 0x05
   101be:	85 e7       	ldi	r24, 0x75	; 117
   101c0:	9c e0       	ldi	r25, 0x0C	; 12
   101c2:	a0 e0       	ldi	r26, 0x00	; 0
   101c4:	81 83       	std	Z+1, r24	; 0x01
   101c6:	92 83       	std	Z+2, r25	; 0x02
   101c8:	a3 83       	std	Z+3, r26	; 0x03
   101ca:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   101ce:	81 e0       	ldi	r24, 0x01	; 1
   101d0:	90 e0       	ldi	r25, 0x00	; 0
}
   101d2:	c7 5b       	subi	r28, 0xB7	; 183
   101d4:	df 4f       	sbci	r29, 0xFF	; 255
   101d6:	0f b6       	in	r0, 0x3f	; 63
   101d8:	f8 94       	cli
   101da:	de bf       	out	0x3e, r29	; 62
   101dc:	0f be       	out	0x3f, r0	; 63
   101de:	cd bf       	out	0x3d, r28	; 61
   101e0:	df 91       	pop	r29
   101e2:	cf 91       	pop	r28
   101e4:	1f 91       	pop	r17
   101e6:	0f 91       	pop	r16
   101e8:	ff 90       	pop	r15
   101ea:	ef 90       	pop	r14
   101ec:	df 90       	pop	r13
   101ee:	cf 90       	pop	r12
   101f0:	bf 90       	pop	r11
   101f2:	af 90       	pop	r10
   101f4:	7f 90       	pop	r7
   101f6:	6f 90       	pop	r6
   101f8:	5f 90       	pop	r5
   101fa:	4f 90       	pop	r4
   101fc:	08 95       	ret

000101fe <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
   101fe:	2f 92       	push	r2
   10200:	3f 92       	push	r3
   10202:	4f 92       	push	r4
   10204:	5f 92       	push	r5
   10206:	6f 92       	push	r6
   10208:	8f 92       	push	r8
   1020a:	9f 92       	push	r9
   1020c:	af 92       	push	r10
   1020e:	bf 92       	push	r11
   10210:	cf 92       	push	r12
   10212:	df 92       	push	r13
   10214:	ef 92       	push	r14
   10216:	ff 92       	push	r15
   10218:	0f 93       	push	r16
   1021a:	1f 93       	push	r17
   1021c:	cf 93       	push	r28
   1021e:	df 93       	push	r29
   10220:	cd b7       	in	r28, 0x3d	; 61
   10222:	de b7       	in	r29, 0x3e	; 62
   10224:	c8 53       	subi	r28, 0x38	; 56
   10226:	d1 40       	sbci	r29, 0x01	; 1
   10228:	0f b6       	in	r0, 0x3f	; 63
   1022a:	f8 94       	cli
   1022c:	de bf       	out	0x3e, r29	; 62
   1022e:	0f be       	out	0x3f, r0	; 63
   10230:	cd bf       	out	0x3d, r28	; 61
   10232:	7c 01       	movw	r14, r24
   10234:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10236:	1e 82       	std	Y+6, r1	; 0x06
   10238:	8e 01       	movw	r16, r28
   1023a:	0a 5f       	subi	r16, 0xFA	; 250
   1023c:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   1023e:	00 97       	sbiw	r24, 0x00	; 0
   10240:	51 f4       	brne	.+20     	; 0x10256 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10242:	6f ef       	ldi	r22, 0xFF	; 255
   10244:	70 e0       	ldi	r23, 0x00	; 0
   10246:	c8 01       	movw	r24, r16
   10248:	0e 94 9b 77 	call	0xef36	; 0xef36 <getcwd>
   1024c:	89 2b       	or	r24, r25
   1024e:	91 f4       	brne	.+36     	; 0x10274 <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
   10250:	84 e5       	ldi	r24, 0x54	; 84
   10252:	9c e0       	ldi	r25, 0x0C	; 12
   10254:	6a c0       	rjmp	.+212    	; 0x1032a <ls+0x12c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10256:	fc 01       	movw	r30, r24
   10258:	80 81       	ld	r24, Z
   1025a:	88 23       	and	r24, r24
   1025c:	91 f3       	breq	.-28     	; 0x10242 <ls+0x44>
   1025e:	61 ef       	ldi	r22, 0xF1	; 241
   10260:	72 e1       	ldi	r23, 0x12	; 18
   10262:	c7 01       	movw	r24, r14
   10264:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   10268:	89 2b       	or	r24, r25
   1026a:	59 f7       	brne	.-42     	; 0x10242 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   1026c:	b7 01       	movw	r22, r14
   1026e:	c8 01       	movw	r24, r16
   10270:	0e 94 73 31 	call	0x62e6	; 0x62e6 <strcpy>
    }
    len = strlen(fullpath);
   10274:	f8 01       	movw	r30, r16
   10276:	01 90       	ld	r0, Z+
   10278:	00 20       	and	r0, r0
   1027a:	e9 f7       	brne	.-6      	; 0x10276 <ls+0x78>
   1027c:	31 97       	sbiw	r30, 0x01	; 1
   1027e:	1f 01       	movw	r2, r30
   10280:	20 1a       	sub	r2, r16
   10282:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
   10284:	be 01       	movw	r22, r28
   10286:	69 5f       	subi	r22, 0xF9	; 249
   10288:	7e 4f       	sbci	r23, 0xFE	; 254
   1028a:	c8 01       	movw	r24, r16
   1028c:	32 d8       	rcall	.-3996   	; 0xf2f2 <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1028e:	ed b7       	in	r30, 0x3d	; 61
   10290:	fe b7       	in	r31, 0x3e	; 62
   10292:	15 83       	std	Z+5, r17	; 0x05
   10294:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
   10296:	89 2b       	or	r24, r25
   10298:	59 f0       	breq	.+22     	; 0x102b0 <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1029a:	8e e3       	ldi	r24, 0x3E	; 62
   1029c:	9c e0       	ldi	r25, 0x0C	; 12
   1029e:	a0 e0       	ldi	r26, 0x00	; 0
   102a0:	81 83       	std	Z+1, r24	; 0x01
   102a2:	92 83       	std	Z+2, r25	; 0x02
   102a4:	a3 83       	std	Z+3, r26	; 0x03
   102a6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        return(-1);
   102aa:	8f ef       	ldi	r24, 0xFF	; 255
   102ac:	9f ef       	ldi	r25, 0xFF	; 255
   102ae:	96 c0       	rjmp	.+300    	; 0x103dc <ls+0x1de>
    }
    printf("Listing:[%s]\n",fullpath);
   102b0:	80 e3       	ldi	r24, 0x30	; 48
   102b2:	9c e0       	ldi	r25, 0x0C	; 12
   102b4:	a0 e0       	ldi	r26, 0x00	; 0
   102b6:	81 83       	std	Z+1, r24	; 0x01
   102b8:	92 83       	std	Z+2, r25	; 0x02
   102ba:	a3 83       	std	Z+3, r26	; 0x03
   102bc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    switch (st.st_mode & S_IFMT)
   102c0:	c1 5f       	subi	r28, 0xF1	; 241
   102c2:	de 4f       	sbci	r29, 0xFE	; 254
   102c4:	88 81       	ld	r24, Y
   102c6:	99 81       	ldd	r25, Y+1	; 0x01
   102c8:	aa 81       	ldd	r26, Y+2	; 0x02
   102ca:	bb 81       	ldd	r27, Y+3	; 0x03
   102cc:	cf 50       	subi	r28, 0x0F	; 15
   102ce:	d1 40       	sbci	r29, 0x01	; 1
   102d0:	88 27       	eor	r24, r24
   102d2:	90 7f       	andi	r25, 0xF0	; 240
   102d4:	aa 27       	eor	r26, r26
   102d6:	bb 27       	eor	r27, r27
   102d8:	81 15       	cp	r24, r1
   102da:	f0 e4       	ldi	r31, 0x40	; 64
   102dc:	9f 07       	cpc	r25, r31
   102de:	a1 05       	cpc	r26, r1
   102e0:	b1 05       	cpc	r27, r1
   102e2:	59 f0       	breq	.+22     	; 0x102fa <ls+0xfc>
   102e4:	81 15       	cp	r24, r1
   102e6:	90 48       	sbci	r25, 0x80	; 128
   102e8:	a1 05       	cpc	r26, r1
   102ea:	b1 05       	cpc	r27, r1
   102ec:	09 f0       	breq	.+2      	; 0x102f0 <ls+0xf2>
   102ee:	67 c0       	rjmp	.+206    	; 0x103be <ls+0x1c0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   102f0:	b4 01       	movw	r22, r8
   102f2:	c8 01       	movw	r24, r16
   102f4:	c9 de       	rcall	.-622    	; 0x10088 <ls_info>
   102f6:	7c 01       	movw	r14, r24
            break;
   102f8:	64 c0       	rjmp	.+200    	; 0x103c2 <ls+0x1c4>
        case S_IFDIR:
            dirp = opendir(fullpath);
   102fa:	c8 01       	movw	r24, r16
   102fc:	0e 94 49 78 	call	0xf092	; 0xf092 <opendir>
   10300:	5c 01       	movw	r10, r24
            if(!dirp)
   10302:	89 2b       	or	r24, r25
   10304:	81 f0       	breq	.+32     	; 0x10326 <ls+0x128>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10306:	e1 2c       	mov	r14, r1
   10308:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   1030a:	c8 01       	movw	r24, r16
   1030c:	82 0d       	add	r24, r2
   1030e:	93 1d       	adc	r25, r3
   10310:	c9 5c       	subi	r28, 0xC9	; 201
   10312:	de 4f       	sbci	r29, 0xFE	; 254
   10314:	99 83       	std	Y+1, r25	; 0x01
   10316:	88 83       	st	Y, r24
   10318:	c7 53       	subi	r28, 0x37	; 55
   1031a:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1031c:	8d ef       	ldi	r24, 0xFD	; 253
   1031e:	9b e0       	ldi	r25, 0x0B	; 11
   10320:	2c 01       	movw	r4, r24
   10322:	61 2c       	mov	r6, r1
   10324:	25 c0       	rjmp	.+74     	; 0x10370 <ls+0x172>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   10326:	80 e2       	ldi	r24, 0x20	; 32
   10328:	9c e0       	ldi	r25, 0x0C	; 12
   1032a:	a0 e0       	ldi	r26, 0x00	; 0
   1032c:	ed b7       	in	r30, 0x3d	; 61
   1032e:	fe b7       	in	r31, 0x3e	; 62
   10330:	81 83       	std	Z+1, r24	; 0x01
   10332:	92 83       	std	Z+2, r25	; 0x02
   10334:	a3 83       	std	Z+3, r26	; 0x03
   10336:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1033a:	b7 cf       	rjmp	.-146    	; 0x102aa <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   1033c:	f6 01       	movw	r30, r12
   1033e:	80 81       	ld	r24, Z
   10340:	88 23       	and	r24, r24
   10342:	e1 f0       	breq	.+56     	; 0x1037c <ls+0x17e>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   10344:	f6 01       	movw	r30, r12
   10346:	01 90       	ld	r0, Z+
   10348:	00 20       	and	r0, r0
   1034a:	e9 f7       	brne	.-6      	; 0x10346 <ls+0x148>
   1034c:	31 97       	sbiw	r30, 0x01	; 1
   1034e:	ec 19       	sub	r30, r12
   10350:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   10352:	e2 0d       	add	r30, r2
   10354:	f3 1d       	adc	r31, r3
   10356:	ef 3f       	cpi	r30, 0xFF	; 255
   10358:	f1 05       	cpc	r31, r1
   1035a:	a1 f0       	breq	.+40     	; 0x10384 <ls+0x186>
   1035c:	9c f0       	brlt	.+38     	; 0x10384 <ls+0x186>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1035e:	ed b7       	in	r30, 0x3d	; 61
   10360:	fe b7       	in	r31, 0x3e	; 62
   10362:	d5 82       	std	Z+5, r13	; 0x05
   10364:	c4 82       	std	Z+4, r12	; 0x04
   10366:	41 82       	std	Z+1, r4	; 0x01
   10368:	52 82       	std	Z+2, r5	; 0x02
   1036a:	63 82       	std	Z+3, r6	; 0x03
   1036c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
   10370:	c5 01       	movw	r24, r10
   10372:	0e 94 67 78 	call	0xf0ce	; 0xf0ce <readdir>
   10376:	6c 01       	movw	r12, r24
   10378:	89 2b       	or	r24, r25
   1037a:	01 f7       	brne	.-64     	; 0x1033c <ls+0x13e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   1037c:	c5 01       	movw	r24, r10
   1037e:	0e 94 2e 78 	call	0xf05c	; 0xf05c <closedir>
            break;
   10382:	1f c0       	rjmp	.+62     	; 0x103c2 <ls+0x1c4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10384:	66 ea       	ldi	r22, 0xA6	; 166
   10386:	78 e0       	ldi	r23, 0x08	; 8
   10388:	c8 01       	movw	r24, r16
   1038a:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   1038e:	89 2b       	or	r24, r25
   10390:	29 f4       	brne	.+10     	; 0x1039c <ls+0x19e>
                {
                    strcat(fullpath,"/");
   10392:	66 ea       	ldi	r22, 0xA6	; 166
   10394:	78 e0       	ldi	r23, 0x08	; 8
   10396:	c8 01       	movw	r24, r16
   10398:	0e 94 94 31 	call	0x6328	; 0x6328 <strcat>
                }
                strcat(fullpath,de->d_name);
   1039c:	b6 01       	movw	r22, r12
   1039e:	c8 01       	movw	r24, r16
   103a0:	0e 94 94 31 	call	0x6328	; 0x6328 <strcat>
                files +=ls_info(fullpath,verbose);
   103a4:	b4 01       	movw	r22, r8
   103a6:	c8 01       	movw	r24, r16
   103a8:	6f de       	rcall	.-802    	; 0x10088 <ls_info>
   103aa:	e8 0e       	add	r14, r24
   103ac:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   103ae:	c9 5c       	subi	r28, 0xC9	; 201
   103b0:	de 4f       	sbci	r29, 0xFE	; 254
   103b2:	e8 81       	ld	r30, Y
   103b4:	f9 81       	ldd	r31, Y+1	; 0x01
   103b6:	c7 53       	subi	r28, 0x37	; 55
   103b8:	d1 40       	sbci	r29, 0x01	; 1
   103ba:	10 82       	st	Z, r1
   103bc:	d9 cf       	rjmp	.-78     	; 0x10370 <ls+0x172>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   103be:	e1 2c       	mov	r14, r1
   103c0:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   103c2:	ed b7       	in	r30, 0x3d	; 61
   103c4:	fe b7       	in	r31, 0x3e	; 62
   103c6:	f5 82       	std	Z+5, r15	; 0x05
   103c8:	e4 82       	std	Z+4, r14	; 0x04
   103ca:	82 ef       	ldi	r24, 0xF2	; 242
   103cc:	9b e0       	ldi	r25, 0x0B	; 11
   103ce:	a0 e0       	ldi	r26, 0x00	; 0
   103d0:	81 83       	std	Z+1, r24	; 0x01
   103d2:	92 83       	std	Z+2, r25	; 0x02
   103d4:	a3 83       	std	Z+3, r26	; 0x03
   103d6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    return(files);
   103da:	c7 01       	movw	r24, r14
}
   103dc:	c8 5c       	subi	r28, 0xC8	; 200
   103de:	de 4f       	sbci	r29, 0xFE	; 254
   103e0:	0f b6       	in	r0, 0x3f	; 63
   103e2:	f8 94       	cli
   103e4:	de bf       	out	0x3e, r29	; 62
   103e6:	0f be       	out	0x3f, r0	; 63
   103e8:	cd bf       	out	0x3d, r28	; 61
   103ea:	df 91       	pop	r29
   103ec:	cf 91       	pop	r28
   103ee:	1f 91       	pop	r17
   103f0:	0f 91       	pop	r16
   103f2:	ff 90       	pop	r15
   103f4:	ef 90       	pop	r14
   103f6:	df 90       	pop	r13
   103f8:	cf 90       	pop	r12
   103fa:	bf 90       	pop	r11
   103fc:	af 90       	pop	r10
   103fe:	9f 90       	pop	r9
   10400:	8f 90       	pop	r8
   10402:	6f 90       	pop	r6
   10404:	5f 90       	pop	r5
   10406:	4f 90       	pop	r4
   10408:	3f 90       	pop	r3
   1040a:	2f 90       	pop	r2
   1040c:	08 95       	ret

0001040e <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1040e:	a7 e0       	ldi	r26, 0x07	; 7
   10410:	b1 e0       	ldi	r27, 0x01	; 1
   10412:	ed e0       	ldi	r30, 0x0D	; 13
   10414:	f2 e8       	ldi	r31, 0x82	; 130
   10416:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   1041a:	18 16       	cp	r1, r24
   1041c:	19 06       	cpc	r1, r25
   1041e:	1c f0       	brlt	.+6      	; 0x10426 <posix_tests+0x18>
		return(0);
   10420:	80 e0       	ldi	r24, 0x00	; 0
   10422:	90 e0       	ldi	r25, 0x00	; 0
   10424:	dd c1       	rjmp	.+954    	; 0x107e0 <posix_tests+0x3d2>

    ptr = argv[ind++];
   10426:	fb 01       	movw	r30, r22
   10428:	c0 80       	ld	r12, Z
   1042a:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   1042c:	c1 14       	cp	r12, r1
   1042e:	d1 04       	cpc	r13, r1
   10430:	b9 f3       	breq	.-18     	; 0x10420 <posix_tests+0x12>
   10432:	4b 01       	movw	r8, r22
   10434:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   10436:	6e eb       	ldi	r22, 0xBE	; 190
   10438:	7b e0       	ldi	r23, 0x0B	; 11
   1043a:	c6 01       	movw	r24, r12
   1043c:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   10440:	89 2b       	or	r24, r25
   10442:	a1 f0       	breq	.+40     	; 0x1046c <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   10444:	f4 01       	movw	r30, r8
   10446:	c2 80       	ldd	r12, Z+2	; 0x02
   10448:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1044a:	c1 14       	cp	r12, r1
   1044c:	d1 04       	cpc	r13, r1
   1044e:	21 f4       	brne	.+8      	; 0x10458 <posix_tests+0x4a>
        {
            posix_help(1);
   10450:	81 e0       	ldi	r24, 0x01	; 1
   10452:	90 e0       	ldi	r25, 0x00	; 0
   10454:	75 dc       	rcall	.-1814   	; 0xfd40 <posix_help>
   10456:	45 c1       	rjmp	.+650    	; 0x106e2 <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10458:	6d e6       	ldi	r22, 0x6D	; 109
   1045a:	76 e1       	ldi	r23, 0x16	; 22
   1045c:	c6 01       	movw	r24, r12
   1045e:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   10462:	89 2b       	or	r24, r25
   10464:	a9 f7       	brne	.-22     	; 0x10450 <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10466:	02 e0       	ldi	r16, 0x02	; 2
   10468:	10 e0       	ldi	r17, 0x00	; 0
   1046a:	02 c0       	rjmp	.+4      	; 0x10470 <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   1046c:	01 e0       	ldi	r16, 0x01	; 1
   1046e:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10470:	78 01       	movw	r14, r16
   10472:	ff ef       	ldi	r31, 0xFF	; 255
   10474:	ef 1a       	sub	r14, r31
   10476:	ff 0a       	sbc	r15, r31
   10478:	93 01       	movw	r18, r6
   1047a:	a7 01       	movw	r20, r14
   1047c:	64 ec       	ldi	r22, 0xC4	; 196
   1047e:	7b e0       	ldi	r23, 0x0B	; 11
   10480:	c6 01       	movw	r24, r12
   10482:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   10486:	89 2b       	or	r24, r25
   10488:	99 f1       	breq	.+102    	; 0x104f0 <posix_tests+0xe2>
   1048a:	78 01       	movw	r14, r16
   1048c:	ee 0c       	add	r14, r14
   1048e:	ff 1c       	adc	r15, r15
   10490:	e8 0c       	add	r14, r8
   10492:	f9 1c       	adc	r15, r9
   10494:	57 01       	movw	r10, r14
   10496:	47 01       	movw	r8, r14
   10498:	68 01       	movw	r12, r16
   1049a:	41 2c       	mov	r4, r1
   1049c:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1049e:	c6 14       	cp	r12, r6
   104a0:	d7 04       	cpc	r13, r7
   104a2:	14 f5       	brge	.+68     	; 0x104e8 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   104a4:	68 ec       	ldi	r22, 0xC8	; 200
   104a6:	7b e0       	ldi	r23, 0x0B	; 11
   104a8:	f4 01       	movw	r30, r8
   104aa:	81 91       	ld	r24, Z+
   104ac:	91 91       	ld	r25, Z+
   104ae:	4f 01       	movw	r8, r30
   104b0:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   104b4:	89 2b       	or	r24, r25
   104b6:	19 f0       	breq	.+6      	; 0x104be <posix_tests+0xb0>
                page = 1;
   104b8:	44 24       	eor	r4, r4
   104ba:	43 94       	inc	r4
   104bc:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   104be:	ff ef       	ldi	r31, 0xFF	; 255
   104c0:	cf 1a       	sub	r12, r31
   104c2:	df 0a       	sbc	r13, r31
   104c4:	ec cf       	rjmp	.-40     	; 0x1049e <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   104c6:	68 ec       	ldi	r22, 0xC8	; 200
   104c8:	7b e0       	ldi	r23, 0x0B	; 11
   104ca:	f5 01       	movw	r30, r10
   104cc:	81 91       	ld	r24, Z+
   104ce:	91 91       	ld	r25, Z+
   104d0:	5f 01       	movw	r10, r30
   104d2:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   104d6:	89 2b       	or	r24, r25
   104d8:	29 f4       	brne	.+10     	; 0x104e4 <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   104da:	b2 01       	movw	r22, r4
   104dc:	f7 01       	movw	r30, r14
   104de:	80 81       	ld	r24, Z
   104e0:	91 81       	ldd	r25, Z+1	; 0x01
   104e2:	65 dd       	rcall	.-1334   	; 0xffae <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   104e4:	0f 5f       	subi	r16, 0xFF	; 255
   104e6:	1f 4f       	sbci	r17, 0xFF	; 255
   104e8:	06 15       	cp	r16, r6
   104ea:	17 05       	cpc	r17, r7
   104ec:	64 f3       	brlt	.-40     	; 0x104c6 <posix_tests+0xb8>
   104ee:	f9 c0       	rjmp	.+498    	; 0x106e2 <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   104f0:	58 01       	movw	r10, r16
   104f2:	f2 e0       	ldi	r31, 0x02	; 2
   104f4:	af 0e       	add	r10, r31
   104f6:	b1 1c       	adc	r11, r1
   104f8:	93 01       	movw	r18, r6
   104fa:	a5 01       	movw	r20, r10
   104fc:	6b ec       	ldi	r22, 0xCB	; 203
   104fe:	7b e0       	ldi	r23, 0x0B	; 11
   10500:	c6 01       	movw	r24, r12
   10502:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   10506:	89 2b       	or	r24, r25
   10508:	69 f0       	breq	.+26     	; 0x10524 <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   1050a:	f8 01       	movw	r30, r16
   1050c:	ee 0f       	add	r30, r30
   1050e:	ff 1f       	adc	r31, r31
   10510:	e8 0d       	add	r30, r8
   10512:	f9 1d       	adc	r31, r9
   10514:	62 81       	ldd	r22, Z+2	; 0x02
   10516:	73 81       	ldd	r23, Z+3	; 0x03
   10518:	80 81       	ld	r24, Z
   1051a:	91 81       	ldd	r25, Z+1	; 0x01
   1051c:	32 dc       	rcall	.-1948   	; 0xfd82 <copy>
   1051e:	97 ff       	sbrs	r25, 7
   10520:	e0 c0       	rjmp	.+448    	; 0x106e2 <posix_tests+0x2d4>
   10522:	5c c1       	rjmp	.+696    	; 0x107dc <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10524:	93 01       	movw	r18, r6
   10526:	a7 01       	movw	r20, r14
   10528:	60 ed       	ldi	r22, 0xD0	; 208
   1052a:	7b e0       	ldi	r23, 0x0B	; 11
   1052c:	c6 01       	movw	r24, r12
   1052e:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   10532:	89 2b       	or	r24, r25
   10534:	b9 f0       	breq	.+46     	; 0x10564 <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   10536:	78 01       	movw	r14, r16
   10538:	ee 0c       	add	r14, r14
   1053a:	ff 1c       	adc	r15, r15
   1053c:	e8 0c       	add	r14, r8
   1053e:	f9 1c       	adc	r15, r9
   10540:	f7 01       	movw	r30, r14
   10542:	80 81       	ld	r24, Z
   10544:	91 81       	ldd	r25, Z+1	; 0x01
   10546:	0e 94 53 77 	call	0xeea6	; 0xeea6 <chdir>
   1054a:	89 2b       	or	r24, r25
   1054c:	09 f4       	brne	.+2      	; 0x10550 <posix_tests+0x142>
   1054e:	c9 c0       	rjmp	.+402    	; 0x106e2 <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   10550:	f7 01       	movw	r30, r14
   10552:	80 81       	ld	r24, Z
   10554:	91 81       	ldd	r25, Z+1	; 0x01
   10556:	ed b7       	in	r30, 0x3d	; 61
   10558:	fe b7       	in	r31, 0x3e	; 62
   1055a:	95 83       	std	Z+5, r25	; 0x05
   1055c:	84 83       	std	Z+4, r24	; 0x04
   1055e:	89 ea       	ldi	r24, 0xA9	; 169
   10560:	9d e0       	ldi	r25, 0x0D	; 13
   10562:	36 c1       	rjmp	.+620    	; 0x107d0 <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   10564:	68 ed       	ldi	r22, 0xD8	; 216
   10566:	78 e0       	ldi	r23, 0x08	; 8
   10568:	c6 01       	movw	r24, r12
   1056a:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1056e:	89 2b       	or	r24, r25
   10570:	09 f4       	brne	.+2      	; 0x10574 <posix_tests+0x166>
   10572:	40 c0       	rjmp	.+128    	; 0x105f4 <posix_tests+0x1e6>
   10574:	78 01       	movw	r14, r16
   10576:	ee 0c       	add	r14, r14
   10578:	ff 1c       	adc	r15, r15
   1057a:	e8 0c       	add	r14, r8
   1057c:	f9 1c       	adc	r15, r9
   1057e:	c1 2c       	mov	r12, r1
   10580:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   10582:	81 e9       	ldi	r24, 0x91	; 145
   10584:	9d e0       	ldi	r25, 0x0D	; 13
   10586:	4c 01       	movw	r8, r24
   10588:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1058a:	06 15       	cp	r16, r6
   1058c:	17 05       	cpc	r17, r7
   1058e:	34 f5       	brge	.+76     	; 0x105dc <posix_tests+0x1ce>
        {
			if(!argv[i])
   10590:	f7 01       	movw	r30, r14
   10592:	80 81       	ld	r24, Z
   10594:	91 81       	ldd	r25, Z+1	; 0x01
   10596:	00 97       	sbiw	r24, 0x00	; 0
   10598:	51 f4       	brne	.+20     	; 0x105ae <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   1059a:	ed b7       	in	r30, 0x3d	; 61
   1059c:	fe b7       	in	r31, 0x3e	; 62
   1059e:	15 83       	std	Z+5, r17	; 0x05
   105a0:	04 83       	std	Z+4, r16	; 0x04
   105a2:	81 82       	std	Z+1, r8	; 0x01
   105a4:	92 82       	std	Z+2, r9	; 0x02
   105a6:	a3 82       	std	Z+3, r10	; 0x03
   105a8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
				continue;
   105ac:	11 c0       	rjmp	.+34     	; 0x105d0 <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   105ae:	63 ed       	ldi	r22, 0xD3	; 211
   105b0:	7b e0       	ldi	r23, 0x0B	; 11
   105b2:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   105b6:	89 2b       	or	r24, r25
   105b8:	59 f4       	brne	.+22     	; 0x105d0 <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   105ba:	61 e0       	ldi	r22, 0x01	; 1
   105bc:	70 e0       	ldi	r23, 0x00	; 0
   105be:	f7 01       	movw	r30, r14
   105c0:	80 81       	ld	r24, Z
   105c2:	91 81       	ldd	r25, Z+1	; 0x01
   105c4:	1c de       	rcall	.-968    	; 0x101fe <ls>
   105c6:	97 fd       	sbrc	r25, 7
   105c8:	09 c1       	rjmp	.+530    	; 0x107dc <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   105ca:	ff ef       	ldi	r31, 0xFF	; 255
   105cc:	cf 1a       	sub	r12, r31
   105ce:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   105d0:	0f 5f       	subi	r16, 0xFF	; 255
   105d2:	1f 4f       	sbci	r17, 0xFF	; 255
   105d4:	82 e0       	ldi	r24, 0x02	; 2
   105d6:	e8 0e       	add	r14, r24
   105d8:	f1 1c       	adc	r15, r1
   105da:	d7 cf       	rjmp	.-82     	; 0x1058a <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   105dc:	c1 14       	cp	r12, r1
   105de:	d1 04       	cpc	r13, r1
   105e0:	09 f0       	breq	.+2      	; 0x105e4 <posix_tests+0x1d6>
   105e2:	7f c0       	rjmp	.+254    	; 0x106e2 <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   105e4:	61 e0       	ldi	r22, 0x01	; 1
   105e6:	70 e0       	ldi	r23, 0x00	; 0
   105e8:	80 e2       	ldi	r24, 0x20	; 32
   105ea:	9c e0       	ldi	r25, 0x0C	; 12
   105ec:	08 de       	rcall	.-1008   	; 0x101fe <ls>
   105ee:	97 ff       	sbrs	r25, 7
   105f0:	78 c0       	rjmp	.+240    	; 0x106e2 <posix_tests+0x2d4>
   105f2:	f4 c0       	rjmp	.+488    	; 0x107dc <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   105f4:	93 01       	movw	r18, r6
   105f6:	a7 01       	movw	r20, r14
   105f8:	66 ed       	ldi	r22, 0xD6	; 214
   105fa:	7b e0       	ldi	r23, 0x0B	; 11
   105fc:	c6 01       	movw	r24, r12
   105fe:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   10602:	89 2b       	or	r24, r25
   10604:	79 f1       	breq	.+94     	; 0x10664 <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10606:	e6 14       	cp	r14, r6
   10608:	f7 04       	cpc	r15, r7
   1060a:	7c f4       	brge	.+30     	; 0x1062a <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   1060c:	ee 0c       	add	r14, r14
   1060e:	ff 1c       	adc	r15, r15
   10610:	f4 01       	movw	r30, r8
   10612:	ee 0d       	add	r30, r14
   10614:	ff 1d       	adc	r31, r15
   10616:	48 e0       	ldi	r20, 0x08	; 8
   10618:	50 e0       	ldi	r21, 0x00	; 0
   1061a:	60 e0       	ldi	r22, 0x00	; 0
   1061c:	70 e0       	ldi	r23, 0x00	; 0
   1061e:	80 81       	ld	r24, Z
   10620:	91 81       	ldd	r25, Z+1	; 0x01
   10622:	0e 94 6d 47 	call	0x8eda	; 0x8eda <strtol>
   10626:	ab 01       	movw	r20, r22
   10628:	02 c0       	rjmp	.+4      	; 0x1062e <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   1062a:	4f ef       	ldi	r20, 0xFF	; 255
   1062c:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   1062e:	78 01       	movw	r14, r16
   10630:	ee 0c       	add	r14, r14
   10632:	ff 1c       	adc	r15, r15
   10634:	e8 0c       	add	r14, r8
   10636:	f9 1c       	adc	r15, r9
   10638:	05 2e       	mov	r0, r21
   1063a:	00 0c       	add	r0, r0
   1063c:	66 0b       	sbc	r22, r22
   1063e:	77 0b       	sbc	r23, r23
   10640:	f7 01       	movw	r30, r14
   10642:	80 81       	ld	r24, Z
   10644:	91 81       	ldd	r25, Z+1	; 0x01
   10646:	0e 94 c0 77 	call	0xef80	; 0xef80 <mkdir>
   1064a:	89 2b       	or	r24, r25
   1064c:	09 f4       	brne	.+2      	; 0x10650 <posix_tests+0x242>
   1064e:	49 c0       	rjmp	.+146    	; 0x106e2 <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   10650:	f7 01       	movw	r30, r14
   10652:	80 81       	ld	r24, Z
   10654:	91 81       	ldd	r25, Z+1	; 0x01
   10656:	ed b7       	in	r30, 0x3d	; 61
   10658:	fe b7       	in	r31, 0x3e	; 62
   1065a:	95 83       	std	Z+5, r25	; 0x05
   1065c:	84 83       	std	Z+4, r24	; 0x04
   1065e:	80 e8       	ldi	r24, 0x80	; 128
   10660:	9d e0       	ldi	r25, 0x0D	; 13
   10662:	b6 c0       	rjmp	.+364    	; 0x107d0 <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10664:	93 01       	movw	r18, r6
   10666:	a7 01       	movw	r20, r14
   10668:	6c ed       	ldi	r22, 0xDC	; 220
   1066a:	7b e0       	ldi	r23, 0x0B	; 11
   1066c:	c6 01       	movw	r24, r12
   1066e:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   10672:	89 2b       	or	r24, r25
   10674:	71 f0       	breq	.+28     	; 0x10692 <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   10676:	00 0f       	add	r16, r16
   10678:	11 1f       	adc	r17, r17
   1067a:	f4 01       	movw	r30, r8
   1067c:	e0 0f       	add	r30, r16
   1067e:	f1 1f       	adc	r31, r17
   10680:	80 81       	ld	r24, Z
   10682:	91 81       	ldd	r25, Z+1	; 0x01
   10684:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10688:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   1068c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   10690:	28 c0       	rjmp	.+80     	; 0x106e2 <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10692:	93 01       	movw	r18, r6
   10694:	a8 01       	movw	r20, r16
   10696:	61 ee       	ldi	r22, 0xE1	; 225
   10698:	7b e0       	ldi	r23, 0x0B	; 11
   1069a:	c6 01       	movw	r24, r12
   1069c:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   106a0:	89 2b       	or	r24, r25
   106a2:	11 f1       	breq	.+68     	; 0x106e8 <posix_tests+0x2da>
    {
        char path[256];
		char *ptr = getcwd(path, sizeof(path)-2);
   106a4:	6e ef       	ldi	r22, 0xFE	; 254
   106a6:	70 e0       	ldi	r23, 0x00	; 0
   106a8:	ce 01       	movw	r24, r28
   106aa:	08 96       	adiw	r24, 0x08	; 8
   106ac:	0e 94 9b 77 	call	0xef36	; 0xef36 <getcwd>
		if(ptr == NULL)
   106b0:	00 97       	sbiw	r24, 0x00	; 0
   106b2:	59 f4       	brne	.+22     	; 0x106ca <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   106b4:	84 e7       	ldi	r24, 0x74	; 116
   106b6:	9d e0       	ldi	r25, 0x0D	; 13
   106b8:	a0 e0       	ldi	r26, 0x00	; 0
   106ba:	ed b7       	in	r30, 0x3d	; 61
   106bc:	fe b7       	in	r31, 0x3e	; 62
   106be:	81 83       	std	Z+1, r24	; 0x01
   106c0:	92 83       	std	Z+2, r25	; 0x02
   106c2:	a3 83       	std	Z+3, r26	; 0x03
   106c4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   106c8:	89 c0       	rjmp	.+274    	; 0x107dc <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   106ca:	ed b7       	in	r30, 0x3d	; 61
   106cc:	fe b7       	in	r31, 0x3e	; 62
   106ce:	95 83       	std	Z+5, r25	; 0x05
   106d0:	84 83       	std	Z+4, r24	; 0x04
   106d2:	80 e7       	ldi	r24, 0x70	; 112
   106d4:	9d e0       	ldi	r25, 0x0D	; 13
   106d6:	a0 e0       	ldi	r26, 0x00	; 0
   106d8:	81 83       	std	Z+1, r24	; 0x01
   106da:	92 83       	std	Z+2, r25	; 0x02
   106dc:	a3 83       	std	Z+3, r26	; 0x03
   106de:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        return(1);
   106e2:	81 e0       	ldi	r24, 0x01	; 1
   106e4:	90 e0       	ldi	r25, 0x00	; 0
   106e6:	7c c0       	rjmp	.+248    	; 0x107e0 <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   106e8:	93 01       	movw	r18, r6
   106ea:	a5 01       	movw	r20, r10
   106ec:	65 ee       	ldi	r22, 0xE5	; 229
   106ee:	7b e0       	ldi	r23, 0x0B	; 11
   106f0:	c6 01       	movw	r24, r12
   106f2:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   106f6:	89 2b       	or	r24, r25
   106f8:	59 f1       	breq	.+86     	; 0x10750 <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   106fa:	00 0f       	add	r16, r16
   106fc:	11 1f       	adc	r17, r17
   106fe:	64 01       	movw	r12, r8
   10700:	c0 0e       	add	r12, r16
   10702:	d1 1e       	adc	r13, r17
   10704:	0e 5f       	subi	r16, 0xFE	; 254
   10706:	1f 4f       	sbci	r17, 0xFF	; 255
   10708:	74 01       	movw	r14, r8
   1070a:	e0 0e       	add	r14, r16
   1070c:	f1 1e       	adc	r15, r17
   1070e:	f7 01       	movw	r30, r14
   10710:	60 81       	ld	r22, Z
   10712:	71 81       	ldd	r23, Z+1	; 0x01
   10714:	f6 01       	movw	r30, r12
   10716:	80 81       	ld	r24, Z
   10718:	91 81       	ldd	r25, Z+1	; 0x01
   1071a:	0e 94 ee 77 	call	0xefdc	; 0xefdc <rename>
   1071e:	89 2b       	or	r24, r25
   10720:	01 f3       	breq	.-64     	; 0x106e2 <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   10722:	f7 01       	movw	r30, r14
   10724:	80 81       	ld	r24, Z
   10726:	91 81       	ldd	r25, Z+1	; 0x01
   10728:	ed b7       	in	r30, 0x3d	; 61
   1072a:	fe b7       	in	r31, 0x3e	; 62
   1072c:	97 83       	std	Z+7, r25	; 0x07
   1072e:	86 83       	std	Z+6, r24	; 0x06
   10730:	f6 01       	movw	r30, r12
   10732:	80 81       	ld	r24, Z
   10734:	91 81       	ldd	r25, Z+1	; 0x01
   10736:	ed b7       	in	r30, 0x3d	; 61
   10738:	fe b7       	in	r31, 0x3e	; 62
   1073a:	95 83       	std	Z+5, r25	; 0x05
   1073c:	84 83       	std	Z+4, r24	; 0x04
   1073e:	8f e5       	ldi	r24, 0x5F	; 95
   10740:	9d e0       	ldi	r25, 0x0D	; 13
   10742:	a0 e0       	ldi	r26, 0x00	; 0
   10744:	81 83       	std	Z+1, r24	; 0x01
   10746:	92 83       	std	Z+2, r25	; 0x02
   10748:	a3 83       	std	Z+3, r26	; 0x03
   1074a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1074e:	46 c0       	rjmp	.+140    	; 0x107dc <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   10750:	93 01       	movw	r18, r6
   10752:	a7 01       	movw	r20, r14
   10754:	6c ee       	ldi	r22, 0xEC	; 236
   10756:	7b e0       	ldi	r23, 0x0B	; 11
   10758:	c6 01       	movw	r24, r12
   1075a:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1075e:	89 2b       	or	r24, r25
   10760:	b9 f0       	breq	.+46     	; 0x10790 <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   10762:	78 01       	movw	r14, r16
   10764:	ee 0c       	add	r14, r14
   10766:	ff 1c       	adc	r15, r15
   10768:	e8 0c       	add	r14, r8
   1076a:	f9 1c       	adc	r15, r9
   1076c:	f7 01       	movw	r30, r14
   1076e:	80 81       	ld	r24, Z
   10770:	91 81       	ldd	r25, Z+1	; 0x01
   10772:	0e 94 0d 78 	call	0xf01a	; 0xf01a <unlink>
   10776:	89 2b       	or	r24, r25
   10778:	09 f4       	brne	.+2      	; 0x1077c <posix_tests+0x36e>
   1077a:	b3 cf       	rjmp	.-154    	; 0x106e2 <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   1077c:	f7 01       	movw	r30, r14
   1077e:	80 81       	ld	r24, Z
   10780:	91 81       	ldd	r25, Z+1	; 0x01
   10782:	ed b7       	in	r30, 0x3d	; 61
   10784:	fe b7       	in	r31, 0x3e	; 62
   10786:	95 83       	std	Z+5, r25	; 0x05
   10788:	84 83       	std	Z+4, r24	; 0x04
   1078a:	81 e5       	ldi	r24, 0x51	; 81
   1078c:	9d e0       	ldi	r25, 0x0D	; 13
   1078e:	20 c0       	rjmp	.+64     	; 0x107d0 <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10790:	93 01       	movw	r18, r6
   10792:	a7 01       	movw	r20, r14
   10794:	6f ee       	ldi	r22, 0xEF	; 239
   10796:	7b e0       	ldi	r23, 0x0B	; 11
   10798:	c6 01       	movw	r24, r12
   1079a:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1079e:	89 2b       	or	r24, r25
   107a0:	09 f4       	brne	.+2      	; 0x107a4 <posix_tests+0x396>
   107a2:	3e ce       	rjmp	.-900    	; 0x10420 <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   107a4:	78 01       	movw	r14, r16
   107a6:	ee 0c       	add	r14, r14
   107a8:	ff 1c       	adc	r15, r15
   107aa:	e8 0c       	add	r14, r8
   107ac:	f9 1c       	adc	r15, r9
   107ae:	f7 01       	movw	r30, r14
   107b0:	80 81       	ld	r24, Z
   107b2:	91 81       	ldd	r25, Z+1	; 0x01
   107b4:	0e 94 2c 78 	call	0xf058	; 0xf058 <rmdir>
   107b8:	89 2b       	or	r24, r25
   107ba:	09 f4       	brne	.+2      	; 0x107be <posix_tests+0x3b0>
   107bc:	92 cf       	rjmp	.-220    	; 0x106e2 <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   107be:	f7 01       	movw	r30, r14
   107c0:	80 81       	ld	r24, Z
   107c2:	91 81       	ldd	r25, Z+1	; 0x01
   107c4:	ed b7       	in	r30, 0x3d	; 61
   107c6:	fe b7       	in	r31, 0x3e	; 62
   107c8:	95 83       	std	Z+5, r25	; 0x05
   107ca:	84 83       	std	Z+4, r24	; 0x04
   107cc:	80 e4       	ldi	r24, 0x40	; 64
   107ce:	9d e0       	ldi	r25, 0x0D	; 13
   107d0:	a0 e0       	ldi	r26, 0x00	; 0
   107d2:	81 83       	std	Z+1, r24	; 0x01
   107d4:	92 83       	std	Z+2, r25	; 0x02
   107d6:	a3 83       	std	Z+3, r26	; 0x03
   107d8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            return(-1);
   107dc:	8f ef       	ldi	r24, 0xFF	; 255
   107de:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   107e0:	c9 5f       	subi	r28, 0xF9	; 249
   107e2:	de 4f       	sbci	r29, 0xFE	; 254
   107e4:	e0 e1       	ldi	r30, 0x10	; 16
   107e6:	0c 94 34 e7 	jmp	0x1ce68	; 0x1ce68 <__epilogue_restores__+0x4>

000107ea <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   107ea:	00 d0       	rcall	.+0      	; 0x107ec <gpib_timer_init+0x2>
   107ec:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   107ee:	61 e0       	ldi	r22, 0x01	; 1
   107f0:	70 e0       	ldi	r23, 0x00	; 0
   107f2:	81 eb       	ldi	r24, 0xB1	; 177
   107f4:	95 e8       	ldi	r25, 0x85	; 133
   107f6:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <set_timers>
   107fa:	01 96       	adiw	r24, 0x01	; 1
   107fc:	51 f4       	brne	.+20     	; 0x10812 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   107fe:	86 ee       	ldi	r24, 0xE6	; 230
   10800:	9e e0       	ldi	r25, 0x0E	; 14
   10802:	a0 e0       	ldi	r26, 0x00	; 0
   10804:	ed b7       	in	r30, 0x3d	; 61
   10806:	fe b7       	in	r31, 0x3e	; 62
   10808:	81 83       	std	Z+1, r24	; 0x01
   1080a:	92 83       	std	Z+2, r25	; 0x02
   1080c:	a3 83       	std	Z+3, r26	; 0x03
   1080e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    gpib_timer_reset();
   10812:	95 d1       	rcall	.+810    	; 0x10b3e <gpib_timer_reset>
}
   10814:	0f 90       	pop	r0
   10816:	0f 90       	pop	r0
   10818:	0f 90       	pop	r0
   1081a:	08 95       	ret

0001081c <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   1081c:	28 2f       	mov	r18, r24
   1081e:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10820:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10822:	88 0f       	add	r24, r24
        if(mask & 1)
   10824:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10826:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10828:	26 95       	lsr	r18
   1082a:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   1082c:	d1 f7       	brne	.-12     	; 0x10822 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   1082e:	08 95       	ret

00010830 <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   10830:	f5 df       	rcall	.-22     	; 0x1081c <reverse_8bits>
   10832:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   10836:	0e 94 3a 2b 	call	0x5674	; 0x5674 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   1083a:	2a 9a       	sbi	0x05, 2	; 5
   1083c:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   1083e:	2a 98       	cbi	0x05, 2	; 5
   10840:	22 9a       	sbi	0x04, 2	; 4
   10842:	08 95       	ret

00010844 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   10844:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10848:	e9 cf       	rjmp	.-46     	; 0x1081c <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   1084a:	08 95       	ret

0001084c <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   1084c:	00 d0       	rcall	.+0      	; 0x1084e <ppr_init+0x2>
   1084e:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   10850:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10854:	81 ff       	sbrs	r24, 1
   10856:	0a c0       	rjmp	.+20     	; 0x1086c <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10858:	83 ed       	ldi	r24, 0xD3	; 211
   1085a:	9e e0       	ldi	r25, 0x0E	; 14
   1085c:	a0 e0       	ldi	r26, 0x00	; 0
   1085e:	ed b7       	in	r30, 0x3d	; 61
   10860:	fe b7       	in	r31, 0x3e	; 62
   10862:	81 83       	std	Z+1, r24	; 0x01
   10864:	92 83       	std	Z+2, r25	; 0x02
   10866:	a3 83       	std	Z+3, r26	; 0x03
   10868:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
    ppr_set(0);
   1086c:	80 e0       	ldi	r24, 0x00	; 0
   1086e:	e0 df       	rcall	.-64     	; 0x10830 <ppr_set>
}
   10870:	0f 90       	pop	r0
   10872:	0f 90       	pop	r0
   10874:	0f 90       	pop	r0
   10876:	08 95       	ret

00010878 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10878:	21 e0       	ldi	r18, 0x01	; 1
   1087a:	30 e0       	ldi	r19, 0x00	; 0
   1087c:	01 c0       	rjmp	.+2      	; 0x10880 <ppr_bit_set+0x8>
   1087e:	22 0f       	add	r18, r18
   10880:	8a 95       	dec	r24
   10882:	ea f7       	brpl	.-6      	; 0x1087e <ppr_bit_set+0x6>
   10884:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10888:	82 2b       	or	r24, r18
   1088a:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   1088e:	d0 cf       	rjmp	.-96     	; 0x10830 <ppr_set>
   10890:	08 95       	ret

00010892 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   10892:	21 e0       	ldi	r18, 0x01	; 1
   10894:	30 e0       	ldi	r19, 0x00	; 0
   10896:	01 c0       	rjmp	.+2      	; 0x1089a <ppr_bit_clr+0x8>
   10898:	22 0f       	add	r18, r18
   1089a:	8a 95       	dec	r24
   1089c:	ea f7       	brpl	.-6      	; 0x10898 <ppr_bit_clr+0x6>
   1089e:	20 95       	com	r18
   108a0:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   108a4:	82 23       	and	r24, r18
   108a6:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   108aa:	c2 cf       	rjmp	.-124    	; 0x10830 <ppr_set>
   108ac:	08 95       	ret

000108ae <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   108ae:	0f 93       	push	r16
   108b0:	1f 93       	push	r17
   108b2:	cf 93       	push	r28
   108b4:	df 93       	push	r29
   108b6:	00 d0       	rcall	.+0      	; 0x108b8 <dbf_open+0xa>
   108b8:	00 d0       	rcall	.+0      	; 0x108ba <dbf_open+0xc>
   108ba:	1f 92       	push	r1
   108bc:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   108be:	0e 94 da 59 	call	0xb3b4	; 0xb3b4 <f_open>
   108c2:	ec 01       	movw	r28, r24
    if(rc)
   108c4:	89 2b       	or	r24, r25
   108c6:	79 f0       	breq	.+30     	; 0x108e6 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   108c8:	ed b7       	in	r30, 0x3d	; 61
   108ca:	fe b7       	in	r31, 0x3e	; 62
   108cc:	15 83       	std	Z+5, r17	; 0x05
   108ce:	04 83       	std	Z+4, r16	; 0x04
   108d0:	82 ec       	ldi	r24, 0xC2	; 194
   108d2:	9e e0       	ldi	r25, 0x0E	; 14
   108d4:	a0 e0       	ldi	r26, 0x00	; 0
   108d6:	81 83       	std	Z+1, r24	; 0x01
   108d8:	92 83       	std	Z+2, r25	; 0x02
   108da:	a3 83       	std	Z+3, r26	; 0x03
   108dc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        put_rc(rc);
   108e0:	ce 01       	movw	r24, r28
   108e2:	0e 94 a4 70 	call	0xe148	; 0xe148 <put_rc>
        return (rc);
    }
    return(0);
}
   108e6:	ce 01       	movw	r24, r28
   108e8:	cd b7       	in	r28, 0x3d	; 61
   108ea:	de b7       	in	r29, 0x3e	; 62
   108ec:	25 96       	adiw	r28, 0x05	; 5
   108ee:	e4 e0       	ldi	r30, 0x04	; 4
   108f0:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

000108f4 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   108f4:	cf 93       	push	r28
   108f6:	df 93       	push	r29
   108f8:	00 d0       	rcall	.+0      	; 0x108fa <dbf_read+0x6>
   108fa:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   108fc:	0e 94 92 5b 	call	0xb724	; 0xb724 <f_read>
   10900:	ec 01       	movw	r28, r24
    if(rc)
   10902:	89 2b       	or	r24, r25
   10904:	69 f0       	breq	.+26     	; 0x10920 <dbf_read+0x2c>
    {
        printf("Read error: ");
   10906:	85 eb       	ldi	r24, 0xB5	; 181
   10908:	9e e0       	ldi	r25, 0x0E	; 14
   1090a:	a0 e0       	ldi	r26, 0x00	; 0
   1090c:	ed b7       	in	r30, 0x3d	; 61
   1090e:	fe b7       	in	r31, 0x3e	; 62
   10910:	81 83       	std	Z+1, r24	; 0x01
   10912:	92 83       	std	Z+2, r25	; 0x02
   10914:	a3 83       	std	Z+3, r26	; 0x03
   10916:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        put_rc(rc);
   1091a:	ce 01       	movw	r24, r28
   1091c:	0e 94 a4 70 	call	0xe148	; 0xe148 <put_rc>
        return (rc);
    }
    return(0);
}
   10920:	ce 01       	movw	r24, r28
   10922:	cd b7       	in	r28, 0x3d	; 61
   10924:	de b7       	in	r29, 0x3e	; 62
   10926:	23 96       	adiw	r28, 0x03	; 3
   10928:	e2 e0       	ldi	r30, 0x02	; 2
   1092a:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0001092e <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   1092e:	cf 93       	push	r28
   10930:	df 93       	push	r29
   10932:	00 d0       	rcall	.+0      	; 0x10934 <dbf_write+0x6>
   10934:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   10936:	0e 94 dd 5c 	call	0xb9ba	; 0xb9ba <f_write>
   1093a:	ec 01       	movw	r28, r24
    if(rc)
   1093c:	89 2b       	or	r24, r25
   1093e:	69 f0       	breq	.+26     	; 0x1095a <dbf_write+0x2c>
    {
        printf("Write error: ");
   10940:	87 ea       	ldi	r24, 0xA7	; 167
   10942:	9e e0       	ldi	r25, 0x0E	; 14
   10944:	a0 e0       	ldi	r26, 0x00	; 0
   10946:	ed b7       	in	r30, 0x3d	; 61
   10948:	fe b7       	in	r31, 0x3e	; 62
   1094a:	81 83       	std	Z+1, r24	; 0x01
   1094c:	92 83       	std	Z+2, r25	; 0x02
   1094e:	a3 83       	std	Z+3, r26	; 0x03
   10950:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        put_rc(rc);
   10954:	ce 01       	movw	r24, r28
   10956:	0e 94 a4 70 	call	0xe148	; 0xe148 <put_rc>
        return (rc);
    }
    return(0);
}
   1095a:	ce 01       	movw	r24, r28
   1095c:	cd b7       	in	r28, 0x3d	; 61
   1095e:	de b7       	in	r29, 0x3e	; 62
   10960:	23 96       	adiw	r28, 0x03	; 3
   10962:	e2 e0       	ldi	r30, 0x02	; 2
   10964:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00010968 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10968:	cf 93       	push	r28
   1096a:	df 93       	push	r29
   1096c:	00 d0       	rcall	.+0      	; 0x1096e <dbf_lseek+0x6>
   1096e:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   10970:	0e 94 9e 60 	call	0xc13c	; 0xc13c <f_lseek>
   10974:	ec 01       	movw	r28, r24
    if(rc)
   10976:	89 2b       	or	r24, r25
   10978:	69 f0       	breq	.+26     	; 0x10994 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   1097a:	8a e9       	ldi	r24, 0x9A	; 154
   1097c:	9e e0       	ldi	r25, 0x0E	; 14
   1097e:	a0 e0       	ldi	r26, 0x00	; 0
   10980:	ed b7       	in	r30, 0x3d	; 61
   10982:	fe b7       	in	r31, 0x3e	; 62
   10984:	81 83       	std	Z+1, r24	; 0x01
   10986:	92 83       	std	Z+2, r25	; 0x02
   10988:	a3 83       	std	Z+3, r26	; 0x03
   1098a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        put_rc(rc);
   1098e:	ce 01       	movw	r24, r28
   10990:	0e 94 a4 70 	call	0xe148	; 0xe148 <put_rc>
        return (rc);
    }
    return(0);
}
   10994:	ce 01       	movw	r24, r28
   10996:	cd b7       	in	r28, 0x3d	; 61
   10998:	de b7       	in	r29, 0x3e	; 62
   1099a:	23 96       	adiw	r28, 0x03	; 3
   1099c:	e2 e0       	ldi	r30, 0x02	; 2
   1099e:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

000109a2 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   109a2:	cf 93       	push	r28
   109a4:	df 93       	push	r29
   109a6:	00 d0       	rcall	.+0      	; 0x109a8 <dbf_close+0x6>
   109a8:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   109aa:	0e 94 f4 5e 	call	0xbde8	; 0xbde8 <f_close>
   109ae:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   109b0:	89 2b       	or	r24, r25
   109b2:	69 f0       	breq	.+26     	; 0x109ce <dbf_close+0x2c>
    {
        printf("Close error: ");
   109b4:	8c e8       	ldi	r24, 0x8C	; 140
   109b6:	9e e0       	ldi	r25, 0x0E	; 14
   109b8:	a0 e0       	ldi	r26, 0x00	; 0
   109ba:	ed b7       	in	r30, 0x3d	; 61
   109bc:	fe b7       	in	r31, 0x3e	; 62
   109be:	81 83       	std	Z+1, r24	; 0x01
   109c0:	92 83       	std	Z+2, r25	; 0x02
   109c2:	a3 83       	std	Z+3, r26	; 0x03
   109c4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        put_rc(rc);
   109c8:	ce 01       	movw	r24, r28
   109ca:	0e 94 a4 70 	call	0xe148	; 0xe148 <put_rc>
        return (rc);
    }
    return(0);
}
   109ce:	ce 01       	movw	r24, r28
   109d0:	cd b7       	in	r28, 0x3d	; 61
   109d2:	de b7       	in	r29, 0x3e	; 62
   109d4:	23 96       	adiw	r28, 0x03	; 3
   109d6:	e2 e0       	ldi	r30, 0x02	; 2
   109d8:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

000109dc <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   109dc:	a6 e2       	ldi	r26, 0x26	; 38
   109de:	b2 e0       	ldi	r27, 0x02	; 2
   109e0:	e4 ef       	ldi	r30, 0xF4	; 244
   109e2:	f4 e8       	ldi	r31, 0x84	; 132
   109e4:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
   109e8:	4a 01       	movw	r8, r20
   109ea:	5b 01       	movw	r10, r22
   109ec:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   109ee:	cb 5d       	subi	r28, 0xDB	; 219
   109f0:	dd 4f       	sbci	r29, 0xFD	; 253
   109f2:	19 82       	std	Y+1, r1	; 0x01
   109f4:	18 82       	st	Y, r1
   109f6:	c5 52       	subi	r28, 0x25	; 37
   109f8:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   109fa:	43 e0       	ldi	r20, 0x03	; 3
   109fc:	bc 01       	movw	r22, r24
   109fe:	ce 01       	movw	r24, r28
   10a00:	01 96       	adiw	r24, 0x01	; 1
   10a02:	55 df       	rcall	.-342    	; 0x108ae <dbf_open>
    if( rc != FR_OK)
   10a04:	89 2b       	or	r24, r25
   10a06:	19 f0       	breq	.+6      	; 0x10a0e <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   10a08:	81 e1       	ldi	r24, 0x11	; 17
   10a0a:	90 e0       	ldi	r25, 0x00	; 0
   10a0c:	2f c0       	rjmp	.+94     	; 0x10a6c <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10a0e:	b5 01       	movw	r22, r10
   10a10:	a4 01       	movw	r20, r8
   10a12:	ce 01       	movw	r24, r28
   10a14:	01 96       	adiw	r24, 0x01	; 1
   10a16:	a8 df       	rcall	.-176    	; 0x10968 <dbf_lseek>
    if( rc != FR_OK)
   10a18:	89 2b       	or	r24, r25
   10a1a:	59 f0       	breq	.+22     	; 0x10a32 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10a1c:	85 e0       	ldi	r24, 0x05	; 5
   10a1e:	90 e0       	ldi	r25, 0x00	; 0
   10a20:	f7 01       	movw	r30, r14
   10a22:	91 83       	std	Z+1, r25	; 0x01
   10a24:	80 83       	st	Z, r24
        dbf_close(&fp);
   10a26:	ce 01       	movw	r24, r28
   10a28:	01 96       	adiw	r24, 0x01	; 1
   10a2a:	bb df       	rcall	.-138    	; 0x109a2 <dbf_close>
        return( -1 );
   10a2c:	8f ef       	ldi	r24, 0xFF	; 255
   10a2e:	9f ef       	ldi	r25, 0xFF	; 255
   10a30:	27 c0       	rjmp	.+78     	; 0x10a80 <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10a32:	9e 01       	movw	r18, r28
   10a34:	2b 5d       	subi	r18, 0xDB	; 219
   10a36:	3d 4f       	sbci	r19, 0xFD	; 253
   10a38:	a8 01       	movw	r20, r16
   10a3a:	b6 01       	movw	r22, r12
   10a3c:	ce 01       	movw	r24, r28
   10a3e:	01 96       	adiw	r24, 0x01	; 1
   10a40:	59 df       	rcall	.-334    	; 0x108f4 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10a42:	89 2b       	or	r24, r25
   10a44:	49 f4       	brne	.+18     	; 0x10a58 <dbf_open_read+0x7c>
   10a46:	cb 5d       	subi	r28, 0xDB	; 219
   10a48:	dd 4f       	sbci	r29, 0xFD	; 253
   10a4a:	88 81       	ld	r24, Y
   10a4c:	99 81       	ldd	r25, Y+1	; 0x01
   10a4e:	c5 52       	subi	r28, 0x25	; 37
   10a50:	d2 40       	sbci	r29, 0x02	; 2
   10a52:	08 17       	cp	r16, r24
   10a54:	19 07       	cpc	r17, r25
   10a56:	19 f0       	breq	.+6      	; 0x10a5e <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10a58:	81 e0       	ldi	r24, 0x01	; 1
   10a5a:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10a5c:	e1 cf       	rjmp	.-62     	; 0x10a20 <dbf_open_read+0x44>
   10a5e:	ce 01       	movw	r24, r28
   10a60:	01 96       	adiw	r24, 0x01	; 1
   10a62:	9f df       	rcall	.-194    	; 0x109a2 <dbf_close>
    if( rc != FR_OK)
   10a64:	89 2b       	or	r24, r25
   10a66:	31 f0       	breq	.+12     	; 0x10a74 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10a68:	80 e1       	ldi	r24, 0x10	; 16
   10a6a:	90 e0       	ldi	r25, 0x00	; 0
   10a6c:	f7 01       	movw	r30, r14
   10a6e:	91 83       	std	Z+1, r25	; 0x01
   10a70:	80 83       	st	Z, r24
   10a72:	dc cf       	rjmp	.-72     	; 0x10a2c <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10a74:	cb 5d       	subi	r28, 0xDB	; 219
   10a76:	dd 4f       	sbci	r29, 0xFD	; 253
   10a78:	88 81       	ld	r24, Y
   10a7a:	99 81       	ldd	r25, Y+1	; 0x01
   10a7c:	c5 52       	subi	r28, 0x25	; 37
   10a7e:	d2 40       	sbci	r29, 0x02	; 2
}
   10a80:	ca 5d       	subi	r28, 0xDA	; 218
   10a82:	dd 4f       	sbci	r29, 0xFD	; 253
   10a84:	ec e0       	ldi	r30, 0x0C	; 12
   10a86:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

00010a8a <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10a8a:	a6 e2       	ldi	r26, 0x26	; 38
   10a8c:	b2 e0       	ldi	r27, 0x02	; 2
   10a8e:	eb e4       	ldi	r30, 0x4B	; 75
   10a90:	f5 e8       	ldi	r31, 0x85	; 133
   10a92:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
   10a96:	4a 01       	movw	r8, r20
   10a98:	5b 01       	movw	r10, r22
   10a9a:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10a9c:	cb 5d       	subi	r28, 0xDB	; 219
   10a9e:	dd 4f       	sbci	r29, 0xFD	; 253
   10aa0:	19 82       	std	Y+1, r1	; 0x01
   10aa2:	18 82       	st	Y, r1
   10aa4:	c5 52       	subi	r28, 0x25	; 37
   10aa6:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10aa8:	43 e0       	ldi	r20, 0x03	; 3
   10aaa:	bc 01       	movw	r22, r24
   10aac:	ce 01       	movw	r24, r28
   10aae:	01 96       	adiw	r24, 0x01	; 1
   10ab0:	fe de       	rcall	.-516    	; 0x108ae <dbf_open>
    if( rc != FR_OK)
   10ab2:	89 2b       	or	r24, r25
   10ab4:	19 f0       	breq	.+6      	; 0x10abc <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10ab6:	82 e1       	ldi	r24, 0x12	; 18
   10ab8:	90 e0       	ldi	r25, 0x00	; 0
   10aba:	2f c0       	rjmp	.+94     	; 0x10b1a <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10abc:	b5 01       	movw	r22, r10
   10abe:	a4 01       	movw	r20, r8
   10ac0:	ce 01       	movw	r24, r28
   10ac2:	01 96       	adiw	r24, 0x01	; 1
   10ac4:	51 df       	rcall	.-350    	; 0x10968 <dbf_lseek>
    if( rc != FR_OK)
   10ac6:	89 2b       	or	r24, r25
   10ac8:	59 f0       	breq	.+22     	; 0x10ae0 <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10aca:	86 e0       	ldi	r24, 0x06	; 6
   10acc:	90 e0       	ldi	r25, 0x00	; 0
   10ace:	f7 01       	movw	r30, r14
   10ad0:	91 83       	std	Z+1, r25	; 0x01
   10ad2:	80 83       	st	Z, r24
        dbf_close(&fp);
   10ad4:	ce 01       	movw	r24, r28
   10ad6:	01 96       	adiw	r24, 0x01	; 1
   10ad8:	64 df       	rcall	.-312    	; 0x109a2 <dbf_close>
        return( -1 );
   10ada:	8f ef       	ldi	r24, 0xFF	; 255
   10adc:	9f ef       	ldi	r25, 0xFF	; 255
   10ade:	27 c0       	rjmp	.+78     	; 0x10b2e <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10ae0:	9e 01       	movw	r18, r28
   10ae2:	2b 5d       	subi	r18, 0xDB	; 219
   10ae4:	3d 4f       	sbci	r19, 0xFD	; 253
   10ae6:	a8 01       	movw	r20, r16
   10ae8:	b6 01       	movw	r22, r12
   10aea:	ce 01       	movw	r24, r28
   10aec:	01 96       	adiw	r24, 0x01	; 1
   10aee:	1f df       	rcall	.-450    	; 0x1092e <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10af0:	89 2b       	or	r24, r25
   10af2:	49 f4       	brne	.+18     	; 0x10b06 <dbf_open_write+0x7c>
   10af4:	cb 5d       	subi	r28, 0xDB	; 219
   10af6:	dd 4f       	sbci	r29, 0xFD	; 253
   10af8:	88 81       	ld	r24, Y
   10afa:	99 81       	ldd	r25, Y+1	; 0x01
   10afc:	c5 52       	subi	r28, 0x25	; 37
   10afe:	d2 40       	sbci	r29, 0x02	; 2
   10b00:	08 17       	cp	r16, r24
   10b02:	19 07       	cpc	r17, r25
   10b04:	19 f0       	breq	.+6      	; 0x10b0c <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10b06:	82 e0       	ldi	r24, 0x02	; 2
   10b08:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10b0a:	e1 cf       	rjmp	.-62     	; 0x10ace <dbf_open_write+0x44>
   10b0c:	ce 01       	movw	r24, r28
   10b0e:	01 96       	adiw	r24, 0x01	; 1
   10b10:	48 df       	rcall	.-368    	; 0x109a2 <dbf_close>
    if( rc != FR_OK)
   10b12:	89 2b       	or	r24, r25
   10b14:	31 f0       	breq	.+12     	; 0x10b22 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10b16:	80 e1       	ldi	r24, 0x10	; 16
   10b18:	90 e0       	ldi	r25, 0x00	; 0
   10b1a:	f7 01       	movw	r30, r14
   10b1c:	91 83       	std	Z+1, r25	; 0x01
   10b1e:	80 83       	st	Z, r24
   10b20:	dc cf       	rjmp	.-72     	; 0x10ada <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10b22:	cb 5d       	subi	r28, 0xDB	; 219
   10b24:	dd 4f       	sbci	r29, 0xFD	; 253
   10b26:	88 81       	ld	r24, Y
   10b28:	99 81       	ldd	r25, Y+1	; 0x01
   10b2a:	c5 52       	subi	r28, 0x25	; 37
   10b2c:	d2 40       	sbci	r29, 0x02	; 2
}
   10b2e:	ca 5d       	subi	r28, 0xDA	; 218
   10b30:	dd 4f       	sbci	r29, 0xFD	; 253
   10b32:	ec e0       	ldi	r30, 0x0C	; 12
   10b34:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

00010b38 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10b38:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <clock_elapsed_begin>
   10b3c:	08 95       	ret

00010b3e <gpib_timer_reset>:
   10b3e:	f8 94       	cli
   10b40:	ef ed       	ldi	r30, 0xDF	; 223
   10b42:	fc e1       	ldi	r31, 0x1C	; 28
   10b44:	10 82       	st	Z, r1
   10b46:	11 82       	std	Z+1, r1	; 0x01
   10b48:	12 82       	std	Z+2, r1	; 0x02
   10b4a:	13 82       	std	Z+3, r1	; 0x03
   10b4c:	14 82       	std	Z+4, r1	; 0x04
   10b4e:	15 82       	std	Z+5, r1	; 0x05
   10b50:	16 82       	std	Z+6, r1	; 0x06
   10b52:	17 82       	std	Z+7, r1	; 0x07
   10b54:	81 e0       	ldi	r24, 0x01	; 1
   10b56:	80 87       	std	Z+8, r24	; 0x08
   10b58:	78 94       	sei
   10b5a:	08 95       	ret

00010b5c <gpib_timer_elapsed_end>:
   10b5c:	0c 94 a6 35 	jmp	0x6b4c	; 0x6b4c <clock_elapsed_end>
   10b60:	08 95       	ret

00010b62 <gpib_timer_task>:
   10b62:	f8 94       	cli
   10b64:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10b68:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10b6c:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10b70:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10b74:	89 2b       	or	r24, r25
   10b76:	8a 2b       	or	r24, r26
   10b78:	8b 2b       	or	r24, r27
   10b7a:	a1 f0       	breq	.+40     	; 0x10ba4 <gpib_timer_task+0x42>
   10b7c:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10b80:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10b84:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10b88:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10b8c:	01 97       	sbiw	r24, 0x01	; 1
   10b8e:	a1 09       	sbc	r26, r1
   10b90:	b1 09       	sbc	r27, r1
   10b92:	80 93 e3 1c 	sts	0x1CE3, r24	; 0x801ce3 <gpib_timer+0x4>
   10b96:	90 93 e4 1c 	sts	0x1CE4, r25	; 0x801ce4 <gpib_timer+0x5>
   10b9a:	a0 93 e5 1c 	sts	0x1CE5, r26	; 0x801ce5 <gpib_timer+0x6>
   10b9e:	b0 93 e6 1c 	sts	0x1CE6, r27	; 0x801ce6 <gpib_timer+0x7>
   10ba2:	03 c0       	rjmp	.+6      	; 0x10baa <gpib_timer_task+0x48>
   10ba4:	81 e0       	ldi	r24, 0x01	; 1
   10ba6:	80 93 e7 1c 	sts	0x1CE7, r24	; 0x801ce7 <gpib_timer+0x8>
   10baa:	78 94       	sei
   10bac:	08 95       	ret

00010bae <gpib_timeout_set>:
   10bae:	f8 94       	cli
   10bb0:	ef ed       	ldi	r30, 0xDF	; 223
   10bb2:	fc e1       	ldi	r31, 0x1C	; 28
   10bb4:	64 83       	std	Z+4, r22	; 0x04
   10bb6:	75 83       	std	Z+5, r23	; 0x05
   10bb8:	86 83       	std	Z+6, r24	; 0x06
   10bba:	97 83       	std	Z+7, r25	; 0x07
   10bbc:	10 86       	std	Z+8, r1	; 0x08
   10bbe:	78 94       	sei
   10bc0:	08 95       	ret

00010bc2 <gpib_bus_init>:
   10bc2:	00 d0       	rcall	.+0      	; 0x10bc4 <gpib_bus_init+0x2>
   10bc4:	1f 92       	push	r1
   10bc6:	8f b7       	in	r24, 0x3f	; 63
   10bc8:	f8 94       	cli
   10bca:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
   10bce:	11 b8       	out	0x01, r1	; 1
   10bd0:	9f ef       	ldi	r25, 0xFF	; 255
   10bd2:	92 b9       	out	0x02, r25	; 2
   10bd4:	21 98       	cbi	0x04, 1	; 4
   10bd6:	29 9a       	sbi	0x05, 1	; 5
   10bd8:	52 98       	cbi	0x0a, 2	; 10
   10bda:	5a 9a       	sbi	0x0b, 2	; 11
   10bdc:	53 98       	cbi	0x0a, 3	; 10
   10bde:	5b 9a       	sbi	0x0b, 3	; 11
   10be0:	56 98       	cbi	0x0a, 6	; 10
   10be2:	5e 9a       	sbi	0x0b, 6	; 11
   10be4:	54 98       	cbi	0x0a, 4	; 10
   10be6:	5c 9a       	sbi	0x0b, 4	; 11
   10be8:	57 98       	cbi	0x0a, 7	; 10
   10bea:	5f 9a       	sbi	0x0b, 7	; 11
   10bec:	55 98       	cbi	0x0a, 5	; 10
   10bee:	5d 9a       	sbi	0x0b, 5	; 11
   10bf0:	20 98       	cbi	0x04, 0	; 4
   10bf2:	28 9a       	sbi	0x05, 0	; 5
   10bf4:	45 98       	cbi	0x08, 5	; 8
   10bf6:	3d 9a       	sbi	0x07, 5	; 7
   10bf8:	44 9a       	sbi	0x08, 4	; 8
   10bfa:	3c 9a       	sbi	0x07, 4	; 7
   10bfc:	43 98       	cbi	0x08, 3	; 8
   10bfe:	3b 9a       	sbi	0x07, 3	; 7
   10c00:	42 98       	cbi	0x08, 2	; 8
   10c02:	3a 9a       	sbi	0x07, 2	; 7
   10c04:	9d e0       	ldi	r25, 0x0D	; 13
   10c06:	9a 95       	dec	r25
   10c08:	f1 f7       	brne	.-4      	; 0x10c06 <gpib_bus_init+0x44>
   10c0a:	00 00       	nop
   10c0c:	8f bf       	out	0x3f, r24	; 63
   10c0e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c12:	82 ff       	sbrs	r24, 2
   10c14:	0a c0       	rjmp	.+20     	; 0x10c2a <gpib_bus_init+0x68>
   10c16:	84 e2       	ldi	r24, 0x24	; 36
   10c18:	92 e1       	ldi	r25, 0x12	; 18
   10c1a:	a0 e0       	ldi	r26, 0x00	; 0
   10c1c:	ed b7       	in	r30, 0x3d	; 61
   10c1e:	fe b7       	in	r31, 0x3e	; 62
   10c20:	81 83       	std	Z+1, r24	; 0x01
   10c22:	92 83       	std	Z+2, r25	; 0x02
   10c24:	a3 83       	std	Z+3, r26	; 0x03
   10c26:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   10c2a:	0f 90       	pop	r0
   10c2c:	0f 90       	pop	r0
   10c2e:	0f 90       	pop	r0
   10c30:	08 95       	ret

00010c32 <gpib_rx_init>:
   10c32:	9f b7       	in	r25, 0x3f	; 63
   10c34:	f8 94       	cli
   10c36:	11 b8       	out	0x01, r1	; 1
   10c38:	2f ef       	ldi	r18, 0xFF	; 255
   10c3a:	22 b9       	out	0x02, r18	; 2
   10c3c:	21 98       	cbi	0x04, 1	; 4
   10c3e:	29 9a       	sbi	0x05, 1	; 5
   10c40:	20 98       	cbi	0x04, 0	; 4
   10c42:	28 9a       	sbi	0x05, 0	; 5
   10c44:	4e 9b       	sbis	0x09, 6	; 9
   10c46:	09 c0       	rjmp	.+18     	; 0x10c5a <gpib_rx_init+0x28>
   10c48:	81 11       	cpse	r24, r1
   10c4a:	07 c0       	rjmp	.+14     	; 0x10c5a <gpib_rx_init+0x28>
   10c4c:	52 98       	cbi	0x0a, 2	; 10
   10c4e:	5a 9a       	sbi	0x0b, 2	; 11
   10c50:	53 98       	cbi	0x0a, 3	; 10
   10c52:	5b 9a       	sbi	0x0b, 3	; 11
   10c54:	42 98       	cbi	0x08, 2	; 8
   10c56:	3a 9a       	sbi	0x07, 2	; 7
   10c58:	08 c0       	rjmp	.+16     	; 0x10c6a <gpib_rx_init+0x38>
   10c5a:	42 98       	cbi	0x08, 2	; 8
   10c5c:	3a 9a       	sbi	0x07, 2	; 7
   10c5e:	5b 98       	cbi	0x0b, 3	; 11
   10c60:	53 9a       	sbi	0x0a, 3	; 10
   10c62:	5a 98       	cbi	0x0b, 2	; 11
   10c64:	52 9a       	sbi	0x0a, 2	; 10
   10c66:	88 23       	and	r24, r24
   10c68:	89 f3       	breq	.-30     	; 0x10c4c <gpib_rx_init+0x1a>
   10c6a:	9f bf       	out	0x3f, r25	; 63
   10c6c:	08 95       	ret

00010c6e <gpib_tx_init>:
   10c6e:	9f b7       	in	r25, 0x3f	; 63
   10c70:	f8 94       	cli
   10c72:	11 b8       	out	0x01, r1	; 1
   10c74:	8f ef       	ldi	r24, 0xFF	; 255
   10c76:	82 b9       	out	0x02, r24	; 2
   10c78:	21 98       	cbi	0x04, 1	; 4
   10c7a:	29 9a       	sbi	0x05, 1	; 5
   10c7c:	52 98       	cbi	0x0a, 2	; 10
   10c7e:	5a 9a       	sbi	0x0b, 2	; 11
   10c80:	53 98       	cbi	0x0a, 3	; 10
   10c82:	5b 9a       	sbi	0x0b, 3	; 11
   10c84:	20 98       	cbi	0x04, 0	; 4
   10c86:	28 9a       	sbi	0x05, 0	; 5
   10c88:	42 9a       	sbi	0x08, 2	; 8
   10c8a:	3a 9a       	sbi	0x07, 2	; 7
   10c8c:	81 b9       	out	0x01, r24	; 1
   10c8e:	9f bf       	out	0x3f, r25	; 63
   10c90:	08 95       	ret

00010c92 <gpib_state_init>:
   10c92:	00 d0       	rcall	.+0      	; 0x10c94 <gpib_state_init+0x2>
   10c94:	1f 92       	push	r1
   10c96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c9a:	82 ff       	sbrs	r24, 2
   10c9c:	0a c0       	rjmp	.+20     	; 0x10cb2 <gpib_state_init+0x20>
   10c9e:	81 e1       	ldi	r24, 0x11	; 17
   10ca0:	92 e1       	ldi	r25, 0x12	; 18
   10ca2:	a0 e0       	ldi	r26, 0x00	; 0
   10ca4:	ed b7       	in	r30, 0x3d	; 61
   10ca6:	fe b7       	in	r31, 0x3e	; 62
   10ca8:	81 83       	std	Z+1, r24	; 0x01
   10caa:	92 83       	std	Z+2, r25	; 0x02
   10cac:	a3 83       	std	Z+3, r26	; 0x03
   10cae:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   10cb2:	cc dd       	rcall	.-1128   	; 0x1084c <ppr_init>
   10cb4:	0e 94 ea 90 	call	0x121d4	; 0x121d4 <listen_cleanup>
   10cb8:	0e 94 00 92 	call	0x12400	; 0x12400 <talk_cleanup>
   10cbc:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   10cc0:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <talking>
   10cc4:	10 92 f1 1e 	sts	0x1EF1, r1	; 0x801ef1 <talking_last>
   10cc8:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>
   10ccc:	10 92 ea 1e 	sts	0x1EEA, r1	; 0x801eea <listening_last>
   10cd0:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <lastcmd+0x1>
   10cd4:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <lastcmd>
   10cd8:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
   10cdc:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   10ce0:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
   10ce4:	0f 90       	pop	r0
   10ce6:	0f 90       	pop	r0
   10ce8:	0f 90       	pop	r0
   10cea:	08 95       	ret

00010cec <gpib_enable_PPR>:
   10cec:	cf 93       	push	r28
   10cee:	df 93       	push	r29
   10cf0:	ad b7       	in	r26, 0x3d	; 61
   10cf2:	be b7       	in	r27, 0x3e	; 62
   10cf4:	17 97       	sbiw	r26, 0x07	; 7
   10cf6:	0f b6       	in	r0, 0x3f	; 63
   10cf8:	f8 94       	cli
   10cfa:	be bf       	out	0x3e, r27	; 62
   10cfc:	0f be       	out	0x3f, r0	; 63
   10cfe:	ad bf       	out	0x3d, r26	; 61
   10d00:	ec 01       	movw	r28, r24
   10d02:	88 30       	cpi	r24, 0x08	; 8
   10d04:	91 05       	cpc	r25, r1
   10d06:	68 f0       	brcs	.+26     	; 0x10d22 <gpib_enable_PPR+0x36>
   10d08:	ed b7       	in	r30, 0x3d	; 61
   10d0a:	fe b7       	in	r31, 0x3e	; 62
   10d0c:	95 83       	std	Z+5, r25	; 0x05
   10d0e:	84 83       	std	Z+4, r24	; 0x04
   10d10:	8b ee       	ldi	r24, 0xEB	; 235
   10d12:	91 e1       	ldi	r25, 0x11	; 17
   10d14:	a0 e0       	ldi	r26, 0x00	; 0
   10d16:	81 83       	std	Z+1, r24	; 0x01
   10d18:	92 83       	std	Z+2, r25	; 0x02
   10d1a:	a3 83       	std	Z+3, r26	; 0x03
   10d1c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   10d20:	15 c0       	rjmp	.+42     	; 0x10d4c <gpib_enable_PPR+0x60>
   10d22:	aa dd       	rcall	.-1196   	; 0x10878 <ppr_bit_set>
   10d24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d28:	81 ff       	sbrs	r24, 1
   10d2a:	10 c0       	rjmp	.+32     	; 0x10d4c <gpib_enable_PPR+0x60>
   10d2c:	8b dd       	rcall	.-1258   	; 0x10844 <ppr_reg>
   10d2e:	90 e0       	ldi	r25, 0x00	; 0
   10d30:	ed b7       	in	r30, 0x3d	; 61
   10d32:	fe b7       	in	r31, 0x3e	; 62
   10d34:	97 83       	std	Z+7, r25	; 0x07
   10d36:	86 83       	std	Z+6, r24	; 0x06
   10d38:	d5 83       	std	Z+5, r29	; 0x05
   10d3a:	c4 83       	std	Z+4, r28	; 0x04
   10d3c:	80 ed       	ldi	r24, 0xD0	; 208
   10d3e:	91 e1       	ldi	r25, 0x11	; 17
   10d40:	a0 e0       	ldi	r26, 0x00	; 0
   10d42:	81 83       	std	Z+1, r24	; 0x01
   10d44:	92 83       	std	Z+2, r25	; 0x02
   10d46:	a3 83       	std	Z+3, r26	; 0x03
   10d48:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   10d4c:	cd b7       	in	r28, 0x3d	; 61
   10d4e:	de b7       	in	r29, 0x3e	; 62
   10d50:	27 96       	adiw	r28, 0x07	; 7
   10d52:	e2 e0       	ldi	r30, 0x02	; 2
   10d54:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00010d58 <gpib_disable_PPR>:
   10d58:	cf 93       	push	r28
   10d5a:	df 93       	push	r29
   10d5c:	ad b7       	in	r26, 0x3d	; 61
   10d5e:	be b7       	in	r27, 0x3e	; 62
   10d60:	17 97       	sbiw	r26, 0x07	; 7
   10d62:	0f b6       	in	r0, 0x3f	; 63
   10d64:	f8 94       	cli
   10d66:	be bf       	out	0x3e, r27	; 62
   10d68:	0f be       	out	0x3f, r0	; 63
   10d6a:	ad bf       	out	0x3d, r26	; 61
   10d6c:	ec 01       	movw	r28, r24
   10d6e:	88 30       	cpi	r24, 0x08	; 8
   10d70:	91 05       	cpc	r25, r1
   10d72:	68 f0       	brcs	.+26     	; 0x10d8e <gpib_disable_PPR+0x36>
   10d74:	ed b7       	in	r30, 0x3d	; 61
   10d76:	fe b7       	in	r31, 0x3e	; 62
   10d78:	95 83       	std	Z+5, r25	; 0x05
   10d7a:	84 83       	std	Z+4, r24	; 0x04
   10d7c:	89 ea       	ldi	r24, 0xA9	; 169
   10d7e:	91 e1       	ldi	r25, 0x11	; 17
   10d80:	a0 e0       	ldi	r26, 0x00	; 0
   10d82:	81 83       	std	Z+1, r24	; 0x01
   10d84:	92 83       	std	Z+2, r25	; 0x02
   10d86:	a3 83       	std	Z+3, r26	; 0x03
   10d88:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   10d8c:	15 c0       	rjmp	.+42     	; 0x10db8 <gpib_disable_PPR+0x60>
   10d8e:	81 dd       	rcall	.-1278   	; 0x10892 <ppr_bit_clr>
   10d90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d94:	81 ff       	sbrs	r24, 1
   10d96:	10 c0       	rjmp	.+32     	; 0x10db8 <gpib_disable_PPR+0x60>
   10d98:	55 dd       	rcall	.-1366   	; 0x10844 <ppr_reg>
   10d9a:	90 e0       	ldi	r25, 0x00	; 0
   10d9c:	ed b7       	in	r30, 0x3d	; 61
   10d9e:	fe b7       	in	r31, 0x3e	; 62
   10da0:	97 83       	std	Z+7, r25	; 0x07
   10da2:	86 83       	std	Z+6, r24	; 0x06
   10da4:	d5 83       	std	Z+5, r29	; 0x05
   10da6:	c4 83       	std	Z+4, r28	; 0x04
   10da8:	8e e8       	ldi	r24, 0x8E	; 142
   10daa:	91 e1       	ldi	r25, 0x11	; 17
   10dac:	a0 e0       	ldi	r26, 0x00	; 0
   10dae:	81 83       	std	Z+1, r24	; 0x01
   10db0:	92 83       	std	Z+2, r25	; 0x02
   10db2:	a3 83       	std	Z+3, r26	; 0x03
   10db4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   10db8:	cd b7       	in	r28, 0x3d	; 61
   10dba:	de b7       	in	r29, 0x3e	; 62
   10dbc:	27 96       	adiw	r28, 0x07	; 7
   10dbe:	e2 e0       	ldi	r30, 0x02	; 2
   10dc0:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00010dc4 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10dc4:	cf 93       	push	r28
   10dc6:	df 93       	push	r29
   10dc8:	00 d0       	rcall	.+0      	; 0x10dca <gpib_unread+0x6>
   10dca:	1f 92       	push	r1
   10dcc:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10dce:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <gpib_unread_f>
   10dd2:	81 11       	cpse	r24, r1
   10dd4:	08 c0       	rjmp	.+16     	; 0x10de6 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10dd6:	d0 93 f3 1e 	sts	0x1EF3, r29	; 0x801ef3 <gpib_unread_data+0x1>
   10dda:	c0 93 f2 1e 	sts	0x1EF2, r28	; 0x801ef2 <gpib_unread_data>
        gpib_unread_f = 1;
   10dde:	81 e0       	ldi	r24, 0x01	; 1
   10de0:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <gpib_unread_f>
   10de4:	12 c0       	rjmp	.+36     	; 0x10e0a <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10de6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10dea:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10dee:	85 70       	andi	r24, 0x05	; 5
   10df0:	99 27       	eor	r25, r25
   10df2:	89 2b       	or	r24, r25
   10df4:	51 f0       	breq	.+20     	; 0x10e0a <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10df6:	80 e6       	ldi	r24, 0x60	; 96
   10df8:	91 e1       	ldi	r25, 0x11	; 17
   10dfa:	a0 e0       	ldi	r26, 0x00	; 0
   10dfc:	ed b7       	in	r30, 0x3d	; 61
   10dfe:	fe b7       	in	r31, 0x3e	; 62
   10e00:	81 83       	std	Z+1, r24	; 0x01
   10e02:	92 83       	std	Z+2, r25	; 0x02
   10e04:	a3 83       	std	Z+3, r26	; 0x03
   10e06:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }
    return(ch);
}
   10e0a:	ce 01       	movw	r24, r28
   10e0c:	cd b7       	in	r28, 0x3d	; 61
   10e0e:	de b7       	in	r29, 0x3e	; 62
   10e10:	23 96       	adiw	r28, 0x03	; 3
   10e12:	e2 e0       	ldi	r30, 0x02	; 2
   10e14:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00010e18 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10e18:	11 b8       	out	0x01, r1	; 1
   10e1a:	80 b1       	in	r24, 0x00	; 0
   10e1c:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10e1e:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10e20:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10e22:	08 95       	ret

00010e24 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10e24:	4e 99       	sbic	0x09, 6	; 9
   10e26:	03 c0       	rjmp	.+6      	; 0x10e2e <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10e28:	80 e0       	ldi	r24, 0x00	; 0
   10e2a:	94 e0       	ldi	r25, 0x04	; 4
   10e2c:	02 c0       	rjmp	.+4      	; 0x10e32 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10e2e:	80 e0       	ldi	r24, 0x00	; 0
   10e30:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10e32:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10e34:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10e36:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10e38:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10e3a:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10e3c:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10e3e:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10e40:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10e42:	08 95       	ret

00010e44 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10e44:	19 99       	sbic	0x03, 1	; 3
   10e46:	03 c0       	rjmp	.+6      	; 0x10e4e <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10e48:	80 e0       	ldi	r24, 0x00	; 0
   10e4a:	90 e2       	ldi	r25, 0x20	; 32
   10e4c:	02 c0       	rjmp	.+4      	; 0x10e52 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10e4e:	80 e0       	ldi	r24, 0x00	; 0
   10e50:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10e52:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10e54:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10e56:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10e58:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10e5a:	08 95       	ret

00010e5c <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10e5c:	2f 92       	push	r2
   10e5e:	3f 92       	push	r3
   10e60:	4f 92       	push	r4
   10e62:	6f 92       	push	r6
   10e64:	7f 92       	push	r7
   10e66:	8f 92       	push	r8
   10e68:	af 92       	push	r10
   10e6a:	bf 92       	push	r11
   10e6c:	cf 92       	push	r12
   10e6e:	df 92       	push	r13
   10e70:	ef 92       	push	r14
   10e72:	1f 93       	push	r17
   10e74:	cf 93       	push	r28
   10e76:	df 93       	push	r29
   10e78:	cd b7       	in	r28, 0x3d	; 61
   10e7a:	de b7       	in	r29, 0x3e	; 62
   10e7c:	2a 97       	sbiw	r28, 0x0a	; 10
   10e7e:	0f b6       	in	r0, 0x3f	; 63
   10e80:	f8 94       	cli
   10e82:	de bf       	out	0x3e, r29	; 62
   10e84:	0f be       	out	0x3f, r0	; 63
   10e86:	cd bf       	out	0x3d, r28	; 61
   10e88:	9a 87       	std	Y+10, r25	; 0x0a
   10e8a:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10e8c:	64 ef       	ldi	r22, 0xF4	; 244
   10e8e:	71 e0       	ldi	r23, 0x01	; 1
   10e90:	80 e0       	ldi	r24, 0x00	; 0
   10e92:	90 e0       	ldi	r25, 0x00	; 0
   10e94:	8c de       	rcall	.-744    	; 0x10bae <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10e96:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10e98:	8b e5       	ldi	r24, 0x5B	; 91
   10e9a:	90 e1       	ldi	r25, 0x10	; 16
   10e9c:	6c 01       	movw	r12, r24
   10e9e:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10ea0:	8a e8       	ldi	r24, 0x8A	; 138
   10ea2:	90 e1       	ldi	r25, 0x10	; 16
   10ea4:	3c 01       	movw	r6, r24
   10ea6:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10ea8:	aa 24       	eor	r10, r10
   10eaa:	a3 94       	inc	r10
   10eac:	b1 2c       	mov	r11, r1
   10eae:	82 e0       	ldi	r24, 0x02	; 2
   10eb0:	91 e1       	ldi	r25, 0x11	; 17
   10eb2:	1c 01       	movw	r2, r24
   10eb4:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10eb6:	86 ec       	ldi	r24, 0xC6	; 198
   10eb8:	90 e1       	ldi	r25, 0x10	; 16
   10eba:	9c 01       	movw	r18, r24
   10ebc:	40 e0       	ldi	r20, 0x00	; 0
   10ebe:	2e 83       	std	Y+6, r18	; 0x06
   10ec0:	3f 83       	std	Y+7, r19	; 0x07
   10ec2:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10ec4:	80 e0       	ldi	r24, 0x00	; 0
   10ec6:	0e 94 97 2a 	call	0x552e	; 0x552e <uart_keyhit>
   10eca:	89 2b       	or	r24, r25
   10ecc:	09 f0       	breq	.+2      	; 0x10ed0 <gpib_write_byte+0x74>
   10ece:	e7 c0       	rjmp	.+462    	; 0x1109e <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10ed0:	4c 99       	sbic	0x09, 4	; 9
   10ed2:	19 c0       	rjmp	.+50     	; 0x10f06 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10ed4:	89 85       	ldd	r24, Y+9	; 0x09
   10ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
   10ed8:	90 61       	ori	r25, 0x10	; 16
   10eda:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10edc:	89 87       	std	Y+9, r24	; 0x09
   10ede:	71 de       	rcall	.-798    	; 0x10bc2 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10ee0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ee4:	80 ff       	sbrs	r24, 0
   10ee6:	db c0       	rjmp	.+438    	; 0x1109e <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10ee8:	81 2f       	mov	r24, r17
   10eea:	90 e0       	ldi	r25, 0x00	; 0
   10eec:	ed b7       	in	r30, 0x3d	; 61
   10eee:	fe b7       	in	r31, 0x3e	; 62
   10ef0:	95 83       	std	Z+5, r25	; 0x05
   10ef2:	84 83       	std	Z+4, r24	; 0x04
   10ef4:	81 e4       	ldi	r24, 0x41	; 65
   10ef6:	91 e1       	ldi	r25, 0x11	; 17
   10ef8:	a0 e0       	ldi	r26, 0x00	; 0
   10efa:	81 83       	std	Z+1, r24	; 0x01
   10efc:	92 83       	std	Z+2, r25	; 0x02
   10efe:	a3 83       	std	Z+3, r26	; 0x03
   10f00:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   10f04:	cc c0       	rjmp	.+408    	; 0x1109e <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10f06:	81 2f       	mov	r24, r17
   10f08:	90 e0       	ldi	r25, 0x00	; 0
   10f0a:	89 30       	cpi	r24, 0x09	; 9
   10f0c:	91 05       	cpc	r25, r1
   10f0e:	08 f0       	brcs	.+2      	; 0x10f12 <gpib_write_byte+0xb6>
   10f10:	be c0       	rjmp	.+380    	; 0x1108e <gpib_write_byte+0x232>
   10f12:	fc 01       	movw	r30, r24
   10f14:	e3 54       	subi	r30, 0x43	; 67
   10f16:	ff 4f       	sbci	r31, 0xFF	; 255
   10f18:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10f1c:	a8 de       	rcall	.-688    	; 0x10c6e <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10f1e:	21 98       	cbi	0x04, 1	; 4
   10f20:	29 9a       	sbi	0x05, 1	; 5
   10f22:	fd e0       	ldi	r31, 0x0D	; 13
   10f24:	fa 95       	dec	r31
   10f26:	f1 f7       	brne	.-4      	; 0x10f24 <gpib_write_byte+0xc8>
   10f28:	00 00       	nop
   10f2a:	06 c0       	rjmp	.+12     	; 0x10f38 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10f2c:	4a 9b       	sbis	0x09, 2	; 9
   10f2e:	02 c0       	rjmp	.+4      	; 0x10f34 <gpib_write_byte+0xd8>
   10f30:	4b 99       	sbic	0x09, 3	; 9
   10f32:	17 c0       	rjmp	.+46     	; 0x10f62 <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10f34:	4e 9b       	sbis	0x09, 6	; 9
   10f36:	07 c0       	rjmp	.+14     	; 0x10f46 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10f38:	64 ef       	ldi	r22, 0xF4	; 244
   10f3a:	71 e0       	ldi	r23, 0x01	; 1
   10f3c:	80 e0       	ldi	r24, 0x00	; 0
   10f3e:	90 e0       	ldi	r25, 0x00	; 0
   10f40:	36 de       	rcall	.-916    	; 0x10bae <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10f42:	12 e0       	ldi	r17, 0x02	; 2
   10f44:	bf cf       	rjmp	.-130    	; 0x10ec4 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10f46:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f4a:	80 ff       	sbrs	r24, 0
   10f4c:	bb cf       	rjmp	.-138    	; 0x10ec4 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10f4e:	ed b7       	in	r30, 0x3d	; 61
   10f50:	fe b7       	in	r31, 0x3e	; 62
   10f52:	b5 82       	std	Z+5, r11	; 0x05
   10f54:	a4 82       	std	Z+4, r10	; 0x04
   10f56:	21 82       	std	Z+1, r2	; 0x01
   10f58:	32 82       	std	Z+2, r3	; 0x02
   10f5a:	43 82       	std	Z+3, r4	; 0x03
   10f5c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   10f60:	b1 cf       	rjmp	.-158    	; 0x10ec4 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f62:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10f66:	88 23       	and	r24, r24
   10f68:	09 f4       	brne	.+2      	; 0x10f6c <gpib_write_byte+0x110>
   10f6a:	ac cf       	rjmp	.-168    	; 0x10ec4 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f70:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f74:	85 70       	andi	r24, 0x05	; 5
   10f76:	99 27       	eor	r25, r25
   10f78:	89 2b       	or	r24, r25
   10f7a:	c1 f1       	breq	.+112    	; 0x10fec <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10f7c:	2e 81       	ldd	r18, Y+6	; 0x06
   10f7e:	3f 81       	ldd	r19, Y+7	; 0x07
   10f80:	48 85       	ldd	r20, Y+8	; 0x08
   10f82:	ed b7       	in	r30, 0x3d	; 61
   10f84:	fe b7       	in	r31, 0x3e	; 62
   10f86:	21 83       	std	Z+1, r18	; 0x01
   10f88:	32 83       	std	Z+2, r19	; 0x02
   10f8a:	43 83       	std	Z+3, r20	; 0x03
   10f8c:	2d c0       	rjmp	.+90     	; 0x10fe8 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10f8e:	89 85       	ldd	r24, Y+9	; 0x09
   10f90:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f92:	90 ff       	sbrs	r25, 0
   10f94:	03 c0       	rjmp	.+6      	; 0x10f9c <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10f96:	28 98       	cbi	0x05, 0	; 5
   10f98:	20 9a       	sbi	0x04, 0	; 4
   10f9a:	02 c0       	rjmp	.+4      	; 0x10fa0 <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10f9c:	20 98       	cbi	0x04, 0	; 4
   10f9e:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10fa0:	8f ef       	ldi	r24, 0xFF	; 255
   10fa2:	81 b9       	out	0x01, r24	; 1
   10fa4:	89 85       	ldd	r24, Y+9	; 0x09
   10fa6:	80 95       	com	r24
   10fa8:	82 b9       	out	0x02, r24	; 2
   10faa:	9d e0       	ldi	r25, 0x0D	; 13
   10fac:	9a 95       	dec	r25
   10fae:	f1 f7       	brne	.-4      	; 0x10fac <gpib_write_byte+0x150>
   10fb0:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10fb2:	64 ef       	ldi	r22, 0xF4	; 244
   10fb4:	71 e0       	ldi	r23, 0x01	; 1
   10fb6:	80 e0       	ldi	r24, 0x00	; 0
   10fb8:	90 e0       	ldi	r25, 0x00	; 0
   10fba:	f9 dd       	rcall	.-1038   	; 0x10bae <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10fbc:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10fbe:	82 cf       	rjmp	.-252    	; 0x10ec4 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10fc0:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10fc2:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10fc4:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10fc8:	88 23       	and	r24, r24
   10fca:	09 f4       	brne	.+2      	; 0x10fce <gpib_write_byte+0x172>
   10fcc:	7b cf       	rjmp	.-266    	; 0x10ec4 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10fce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10fd2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10fd6:	85 70       	andi	r24, 0x05	; 5
   10fd8:	99 27       	eor	r25, r25
   10fda:	89 2b       	or	r24, r25
   10fdc:	39 f0       	breq	.+14     	; 0x10fec <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10fde:	ed b7       	in	r30, 0x3d	; 61
   10fe0:	fe b7       	in	r31, 0x3e	; 62
   10fe2:	61 82       	std	Z+1, r6	; 0x01
   10fe4:	72 82       	std	Z+2, r7	; 0x02
   10fe6:	83 82       	std	Z+3, r8	; 0x03
   10fe8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10fec:	29 85       	ldd	r18, Y+9	; 0x09
   10fee:	3a 85       	ldd	r19, Y+10	; 0x0a
   10ff0:	30 64       	ori	r19, 0x40	; 64
   10ff2:	3a 87       	std	Y+10, r19	; 0x0a
   10ff4:	29 87       	std	Y+9, r18	; 0x09
   10ff6:	51 c0       	rjmp	.+162    	; 0x1109a <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10ff8:	29 98       	cbi	0x05, 1	; 5
   10ffa:	21 9a       	sbi	0x04, 1	; 4
   10ffc:	3d e0       	ldi	r19, 0x0D	; 13
   10ffe:	3a 95       	dec	r19
   11000:	f1 f7       	brne	.-4      	; 0x10ffe <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   11002:	00 00       	nop
   11004:	64 ef       	ldi	r22, 0xF4	; 244
   11006:	71 e0       	ldi	r23, 0x01	; 1
   11008:	80 e0       	ldi	r24, 0x00	; 0
   1100a:	90 e0       	ldi	r25, 0x00	; 0
   1100c:	d0 dd       	rcall	.-1120   	; 0x10bae <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   1100e:	15 e0       	ldi	r17, 0x05	; 5
                break;
   11010:	59 cf       	rjmp	.-334    	; 0x10ec4 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   11012:	4b 99       	sbic	0x09, 3	; 9
   11014:	40 c0       	rjmp	.+128    	; 0x11096 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11016:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   1101a:	88 23       	and	r24, r24
   1101c:	09 f4       	brne	.+2      	; 0x11020 <gpib_write_byte+0x1c4>
   1101e:	52 cf       	rjmp	.-348    	; 0x10ec4 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   11020:	89 85       	ldd	r24, Y+9	; 0x09
   11022:	9a 85       	ldd	r25, Y+10	; 0x0a
   11024:	90 64       	ori	r25, 0x40	; 64
   11026:	9a 87       	std	Y+10, r25	; 0x0a
   11028:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1102a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1102e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11032:	85 70       	andi	r24, 0x05	; 5
   11034:	99 27       	eor	r25, r25
   11036:	89 2b       	or	r24, r25
   11038:	81 f1       	breq	.+96     	; 0x1109a <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   1103a:	ed b7       	in	r30, 0x3d	; 61
   1103c:	fe b7       	in	r31, 0x3e	; 62
   1103e:	c1 82       	std	Z+1, r12	; 0x01
   11040:	d2 82       	std	Z+2, r13	; 0x02
   11042:	e3 82       	std	Z+3, r14	; 0x03
   11044:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   11048:	28 c0       	rjmp	.+80     	; 0x1109a <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   1104a:	21 98       	cbi	0x04, 1	; 4
   1104c:	29 9a       	sbi	0x05, 1	; 5
   1104e:	fd e0       	ldi	r31, 0x0D	; 13
   11050:	fa 95       	dec	r31
   11052:	f1 f7       	brne	.-4      	; 0x11050 <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   11054:	00 00       	nop
   11056:	64 ef       	ldi	r22, 0xF4	; 244
   11058:	71 e0       	ldi	r23, 0x01	; 1
   1105a:	80 e0       	ldi	r24, 0x00	; 0
   1105c:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   1105e:	a7 dd       	rcall	.-1202   	; 0x10bae <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   11060:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   11062:	30 cf       	rjmp	.-416    	; 0x10ec4 <gpib_write_byte+0x68>
   11064:	81 e0       	ldi	r24, 0x01	; 1
   11066:	e5 dd       	rcall	.-1078   	; 0x10c32 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11068:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1106c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11070:	85 70       	andi	r24, 0x05	; 5
   11072:	99 27       	eor	r25, r25
   11074:	89 2b       	or	r24, r25
   11076:	99 f0       	breq	.+38     	; 0x1109e <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   11078:	88 e4       	ldi	r24, 0x48	; 72
   1107a:	90 e1       	ldi	r25, 0x10	; 16
   1107c:	a0 e0       	ldi	r26, 0x00	; 0
   1107e:	ed b7       	in	r30, 0x3d	; 61
   11080:	fe b7       	in	r31, 0x3e	; 62
   11082:	81 83       	std	Z+1, r24	; 0x01
   11084:	92 83       	std	Z+2, r25	; 0x02
   11086:	a3 83       	std	Z+3, r26	; 0x03
   11088:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1108c:	08 c0       	rjmp	.+16     	; 0x1109e <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   1108e:	19 30       	cpi	r17, 0x09	; 9
   11090:	09 f0       	breq	.+2      	; 0x11094 <gpib_write_byte+0x238>
   11092:	18 cf       	rjmp	.-464    	; 0x10ec4 <gpib_write_byte+0x68>
   11094:	04 c0       	rjmp	.+8      	; 0x1109e <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11096:	16 e0       	ldi	r17, 0x06	; 6
   11098:	15 cf       	rjmp	.-470    	; 0x10ec4 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   1109a:	18 e0       	ldi	r17, 0x08	; 8
   1109c:	13 cf       	rjmp	.-474    	; 0x10ec4 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   1109e:	89 85       	ldd	r24, Y+9	; 0x09
   110a0:	9a 85       	ldd	r25, Y+10	; 0x0a
   110a2:	2a 96       	adiw	r28, 0x0a	; 10
   110a4:	0f b6       	in	r0, 0x3f	; 63
   110a6:	f8 94       	cli
   110a8:	de bf       	out	0x3e, r29	; 62
   110aa:	0f be       	out	0x3f, r0	; 63
   110ac:	cd bf       	out	0x3d, r28	; 61
   110ae:	df 91       	pop	r29
   110b0:	cf 91       	pop	r28
   110b2:	1f 91       	pop	r17
   110b4:	ef 90       	pop	r14
   110b6:	df 90       	pop	r13
   110b8:	cf 90       	pop	r12
   110ba:	bf 90       	pop	r11
   110bc:	af 90       	pop	r10
   110be:	8f 90       	pop	r8
   110c0:	7f 90       	pop	r7
   110c2:	6f 90       	pop	r6
   110c4:	4f 90       	pop	r4
   110c6:	3f 90       	pop	r3
   110c8:	2f 90       	pop	r2
   110ca:	08 95       	ret

000110cc <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   110cc:	cf 93       	push	r28
   110ce:	df 93       	push	r29
   110d0:	ec 01       	movw	r28, r24
    if(fo == NULL)
   110d2:	89 2b       	or	r24, r25
   110d4:	21 f4       	brne	.+8      	; 0x110de <gpib_decode_header+0x12>
        fo = stdout;
   110d6:	c0 91 c1 1c 	lds	r28, 0x1CC1	; 0x801cc1 <__iob+0x2>
   110da:	d0 91 c2 1c 	lds	r29, 0x1CC2	; 0x801cc2 <__iob+0x3>

    fprintf(fo,"==============================\n");
   110de:	be 01       	movw	r22, r28
   110e0:	81 e0       	ldi	r24, 0x01	; 1
   110e2:	9c e0       	ldi	r25, 0x0C	; 12
   110e4:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"GPIB bus state\n");
   110e8:	be 01       	movw	r22, r28
   110ea:	81 e2       	ldi	r24, 0x21	; 33
   110ec:	9c e0       	ldi	r25, 0x0C	; 12
   110ee:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   110f2:	be 01       	movw	r22, r28
   110f4:	81 e3       	ldi	r24, 0x31	; 49
   110f6:	9c e0       	ldi	r25, 0x0C	; 12
   110f8:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   110fc:	be 01       	movw	r22, r28
   110fe:	85 e4       	ldi	r24, 0x45	; 69
   11100:	9c e0       	ldi	r25, 0x0C	; 12
   11102:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11106:	be 01       	movw	r22, r28
   11108:	88 e6       	ldi	r24, 0x68	; 104
   1110a:	9c e0       	ldi	r25, 0x0C	; 12
   1110c:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"     A = ATN\n");
   11110:	be 01       	movw	r22, r28
   11112:	82 e9       	ldi	r24, 0x92	; 146
   11114:	9c e0       	ldi	r25, 0x0C	; 12
   11116:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"      E = EOI\n");
   1111a:	be 01       	movw	r22, r28
   1111c:	80 ea       	ldi	r24, 0xA0	; 160
   1111e:	9c e0       	ldi	r25, 0x0C	; 12
   11120:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"       S = SRQ\n");
   11124:	be 01       	movw	r22, r28
   11126:	8f ea       	ldi	r24, 0xAF	; 175
   11128:	9c e0       	ldi	r25, 0x0C	; 12
   1112a:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"        R = REN\n");
   1112e:	be 01       	movw	r22, r28
   11130:	8f eb       	ldi	r24, 0xBF	; 191
   11132:	9c e0       	ldi	r25, 0x0C	; 12
   11134:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"         I = IFC\n");
   11138:	be 01       	movw	r22, r28
   1113a:	80 ed       	ldi	r24, 0xD0	; 208
   1113c:	9c e0       	ldi	r25, 0x0C	; 12
   1113e:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11142:	be 01       	movw	r22, r28
   11144:	82 ee       	ldi	r24, 0xE2	; 226
   11146:	9c e0       	ldi	r25, 0x0C	; 12
   11148:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   1114c:	be 01       	movw	r22, r28
   1114e:	84 e0       	ldi	r24, 0x04	; 4
   11150:	9d e0       	ldi	r25, 0x0D	; 13
   11152:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11156:	be 01       	movw	r22, r28
   11158:	8c e1       	ldi	r24, 0x1C	; 28
   1115a:	9d e0       	ldi	r25, 0x0D	; 13
   1115c:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
    fprintf(fo,"              GPIB commands\n");
   11160:	be 01       	movw	r22, r28
   11162:	87 e3       	ldi	r24, 0x37	; 55
   11164:	9d e0       	ldi	r25, 0x0D	; 13
   11166:	0e 94 c0 76 	call	0xed80	; 0xed80 <fputs>
}
   1116a:	df 91       	pop	r29
   1116c:	cf 91       	pop	r28
   1116e:	08 95       	ret

00011170 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11170:	a9 e8       	ldi	r26, 0x89	; 137
   11172:	b0 e0       	ldi	r27, 0x00	; 0
   11174:	ee eb       	ldi	r30, 0xBE	; 190
   11176:	f8 e8       	ldi	r31, 0x88	; 136
   11178:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
   1117c:	8c 01       	movw	r16, r24
   1117e:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11180:	1a 86       	std	Y+10, r1	; 0x0a
   11182:	4c 01       	movw	r8, r24
   11184:	88 24       	eor	r8, r8
   11186:	44 e0       	ldi	r20, 0x04	; 4
   11188:	94 22       	and	r9, r20
   1118a:	ce 01       	movw	r24, r28
   1118c:	0a 96       	adiw	r24, 0x0a	; 10
   1118e:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11190:	62 30       	cpi	r22, 0x02	; 2
   11192:	71 05       	cpc	r23, r1
   11194:	e8 f4       	brcc	.+58     	; 0x111d0 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11196:	81 14       	cp	r8, r1
   11198:	91 04       	cpc	r9, r1
   1119a:	29 f4       	brne	.+10     	; 0x111a6 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   1119c:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1119e:	90 ee       	ldi	r25, 0xE0	; 224
   111a0:	90 0f       	add	r25, r16
   111a2:	9f 35       	cpi	r25, 0x5F	; 95
   111a4:	08 f0       	brcs	.+2      	; 0x111a8 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   111a6:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   111a8:	90 e0       	ldi	r25, 0x00	; 0
   111aa:	ed b7       	in	r30, 0x3d	; 61
   111ac:	fe b7       	in	r31, 0x3e	; 62
   111ae:	91 87       	std	Z+9, r25	; 0x09
   111b0:	80 87       	std	Z+8, r24	; 0x08
   111b2:	c8 01       	movw	r24, r16
   111b4:	99 27       	eor	r25, r25
   111b6:	97 83       	std	Z+7, r25	; 0x07
   111b8:	86 83       	std	Z+6, r24	; 0x06
   111ba:	81 e2       	ldi	r24, 0x21	; 33
   111bc:	90 e1       	ldi	r25, 0x10	; 16
   111be:	a0 e0       	ldi	r26, 0x00	; 0
   111c0:	83 83       	std	Z+3, r24	; 0x03
   111c2:	94 83       	std	Z+4, r25	; 0x04
   111c4:	a5 83       	std	Z+5, r26	; 0x05
   111c6:	f2 82       	std	Z+2, r15	; 0x02
   111c8:	e1 82       	std	Z+1, r14	; 0x01
   111ca:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
   111ce:	0c c0       	rjmp	.+24     	; 0x111e8 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   111d0:	8b e1       	ldi	r24, 0x1B	; 27
   111d2:	90 e1       	ldi	r25, 0x10	; 16
   111d4:	a0 e0       	ldi	r26, 0x00	; 0
   111d6:	ed b7       	in	r30, 0x3d	; 61
   111d8:	fe b7       	in	r31, 0x3e	; 62
   111da:	83 83       	std	Z+3, r24	; 0x03
   111dc:	94 83       	std	Z+4, r25	; 0x04
   111de:	a5 83       	std	Z+5, r26	; 0x05
   111e0:	f2 82       	std	Z+2, r15	; 0x02
   111e2:	e1 82       	std	Z+1, r14	; 0x01
   111e4:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
    }

    tmp = str + strlen(str);
   111e8:	f7 01       	movw	r30, r14
   111ea:	01 90       	ld	r0, Z+
   111ec:	00 20       	and	r0, r0
   111ee:	e9 f7       	brne	.-6      	; 0x111ea <gpib_trace_display+0x7a>
   111f0:	31 97       	sbiw	r30, 0x01	; 1
   111f2:	cf 01       	movw	r24, r30
   111f4:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   111f6:	81 14       	cp	r8, r1
   111f8:	91 04       	cpc	r9, r1
   111fa:	11 f0       	breq	.+4      	; 0x11200 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   111fc:	21 e4       	ldi	r18, 0x41	; 65
   111fe:	01 c0       	rjmp	.+2      	; 0x11202 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   11200:	2d e2       	ldi	r18, 0x2D	; 45
   11202:	20 83       	st	Z, r18
   11204:	dc 01       	movw	r26, r24
   11206:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11208:	10 ff       	sbrs	r17, 0
   1120a:	02 c0       	rjmp	.+4      	; 0x11210 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   1120c:	25 e4       	ldi	r18, 0x45	; 69
   1120e:	01 c0       	rjmp	.+2      	; 0x11212 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   11210:	2d e2       	ldi	r18, 0x2D	; 45
   11212:	fc 01       	movw	r30, r24
   11214:	20 83       	st	Z, r18
   11216:	fd 01       	movw	r30, r26
   11218:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   1121a:	11 ff       	sbrs	r17, 1
   1121c:	02 c0       	rjmp	.+4      	; 0x11222 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   1121e:	83 e5       	ldi	r24, 0x53	; 83
   11220:	01 c0       	rjmp	.+2      	; 0x11224 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   11222:	8d e2       	ldi	r24, 0x2D	; 45
   11224:	8c 93       	st	X, r24
   11226:	df 01       	movw	r26, r30
   11228:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   1122a:	13 ff       	sbrs	r17, 3
   1122c:	02 c0       	rjmp	.+4      	; 0x11232 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   1122e:	82 e5       	ldi	r24, 0x52	; 82
   11230:	01 c0       	rjmp	.+2      	; 0x11234 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   11232:	8d e2       	ldi	r24, 0x2D	; 45
   11234:	80 83       	st	Z, r24
   11236:	fd 01       	movw	r30, r26
   11238:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   1123a:	14 ff       	sbrs	r17, 4
   1123c:	02 c0       	rjmp	.+4      	; 0x11242 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   1123e:	89 e4       	ldi	r24, 0x49	; 73
   11240:	01 c0       	rjmp	.+2      	; 0x11244 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   11242:	8d e2       	ldi	r24, 0x2D	; 45
   11244:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11246:	a1 14       	cp	r10, r1
   11248:	b1 04       	cpc	r11, r1
   1124a:	d1 f4       	brne	.+52     	; 0x11280 <gpib_trace_display+0x110>
   1124c:	df 01       	movw	r26, r30
   1124e:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11250:	15 ff       	sbrs	r17, 5
   11252:	02 c0       	rjmp	.+4      	; 0x11258 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   11254:	80 e5       	ldi	r24, 0x50	; 80
   11256:	01 c0       	rjmp	.+2      	; 0x1125a <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11258:	8d e2       	ldi	r24, 0x2D	; 45
   1125a:	80 83       	st	Z, r24
   1125c:	fd 01       	movw	r30, r26
   1125e:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11260:	16 ff       	sbrs	r17, 6
   11262:	02 c0       	rjmp	.+4      	; 0x11268 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   11264:	84 e5       	ldi	r24, 0x54	; 84
   11266:	01 c0       	rjmp	.+2      	; 0x1126a <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11268:	8d e2       	ldi	r24, 0x2D	; 45
   1126a:	8c 93       	st	X, r24
   1126c:	cf 01       	movw	r24, r30
   1126e:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11270:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11272:	17 ff       	sbrs	r17, 7
   11274:	02 c0       	rjmp	.+4      	; 0x1127a <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   11276:	82 e4       	ldi	r24, 0x42	; 66
   11278:	01 c0       	rjmp	.+2      	; 0x1127c <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   1127a:	8d e2       	ldi	r24, 0x2D	; 45
   1127c:	80 83       	st	Z, r24
   1127e:	08 c0       	rjmp	.+16     	; 0x11290 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   11280:	8d e2       	ldi	r24, 0x2D	; 45
   11282:	80 83       	st	Z, r24
        *tmp++ = '-';
   11284:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11286:	6f 01       	movw	r12, r30
   11288:	43 e0       	ldi	r20, 0x03	; 3
   1128a:	c4 0e       	add	r12, r20
   1128c:	d1 1c       	adc	r13, r1
   1128e:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11290:	f6 01       	movw	r30, r12
   11292:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11294:	f1 e0       	ldi	r31, 0x01	; 1
   11296:	af 1a       	sub	r10, r31
   11298:	b1 08       	sbc	r11, r1
   1129a:	42 e0       	ldi	r20, 0x02	; 2
   1129c:	a4 16       	cp	r10, r20
   1129e:	b1 04       	cpc	r11, r1
   112a0:	f0 f4       	brcc	.+60     	; 0x112de <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   112a2:	15 ff       	sbrs	r17, 5
   112a4:	03 c0       	rjmp	.+6      	; 0x112ac <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   112a6:	64 e5       	ldi	r22, 0x54	; 84
   112a8:	7d e0       	ldi	r23, 0x0D	; 13
   112aa:	02 c0       	rjmp	.+4      	; 0x112b0 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   112ac:	65 e6       	ldi	r22, 0x65	; 101
   112ae:	74 e0       	ldi	r23, 0x04	; 4
   112b0:	c7 01       	movw	r24, r14
   112b2:	0e 94 94 31 	call	0x6328	; 0x6328 <strcat>
        if(status & NRFD_FLAG)
   112b6:	16 ff       	sbrs	r17, 6
   112b8:	03 c0       	rjmp	.+6      	; 0x112c0 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   112ba:	6a e5       	ldi	r22, 0x5A	; 90
   112bc:	7d e0       	ldi	r23, 0x0D	; 13
   112be:	02 c0       	rjmp	.+4      	; 0x112c4 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   112c0:	65 e6       	ldi	r22, 0x65	; 101
   112c2:	74 e0       	ldi	r23, 0x04	; 4
   112c4:	c7 01       	movw	r24, r14
   112c6:	0e 94 94 31 	call	0x6328	; 0x6328 <strcat>
        if(status & NDAC_FLAG)
   112ca:	17 ff       	sbrs	r17, 7
   112cc:	03 c0       	rjmp	.+6      	; 0x112d4 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   112ce:	60 e6       	ldi	r22, 0x60	; 96
   112d0:	7d e0       	ldi	r23, 0x0D	; 13
   112d2:	02 c0       	rjmp	.+4      	; 0x112d8 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   112d4:	65 e6       	ldi	r22, 0x65	; 101
   112d6:	74 e0       	ldi	r23, 0x04	; 4
   112d8:	c7 01       	movw	r24, r14
   112da:	0e 94 94 31 	call	0x6328	; 0x6328 <strcat>
    }

    if( (status & ATN_FLAG) )
   112de:	81 14       	cp	r8, r1
   112e0:	91 04       	cpc	r9, r1
   112e2:	09 f4       	brne	.+2      	; 0x112e6 <gpib_trace_display+0x176>
   112e4:	5a c0       	rjmp	.+180    	; 0x1139a <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   112e6:	c8 01       	movw	r24, r16
   112e8:	8f 77       	andi	r24, 0x7F	; 127
   112ea:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   112ec:	9c 01       	movw	r18, r24
   112ee:	20 52       	subi	r18, 0x20	; 32
   112f0:	31 09       	sbc	r19, r1
   112f2:	2f 31       	cpi	r18, 0x1F	; 31
   112f4:	31 05       	cpc	r19, r1
   112f6:	48 f4       	brcc	.+18     	; 0x1130a <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   112f8:	0f 71       	andi	r16, 0x1F	; 31
   112fa:	11 27       	eor	r17, r17
   112fc:	ed b7       	in	r30, 0x3d	; 61
   112fe:	fe b7       	in	r31, 0x3e	; 62
   11300:	17 83       	std	Z+7, r17	; 0x07
   11302:	06 83       	std	Z+6, r16	; 0x06
   11304:	80 e1       	ldi	r24, 0x10	; 16
   11306:	90 e1       	ldi	r25, 0x10	; 16
   11308:	0e c0       	rjmp	.+28     	; 0x11326 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   1130a:	9c 01       	movw	r18, r24
   1130c:	20 54       	subi	r18, 0x40	; 64
   1130e:	31 09       	sbc	r19, r1
   11310:	2f 30       	cpi	r18, 0x0F	; 15
   11312:	31 05       	cpc	r19, r1
   11314:	88 f4       	brcc	.+34     	; 0x11338 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11316:	0f 71       	andi	r16, 0x1F	; 31
   11318:	11 27       	eor	r17, r17
   1131a:	ed b7       	in	r30, 0x3d	; 61
   1131c:	fe b7       	in	r31, 0x3e	; 62
   1131e:	17 83       	std	Z+7, r17	; 0x07
   11320:	06 83       	std	Z+6, r16	; 0x06
   11322:	85 e0       	ldi	r24, 0x05	; 5
   11324:	90 e1       	ldi	r25, 0x10	; 16
   11326:	a0 e0       	ldi	r26, 0x00	; 0
   11328:	83 83       	std	Z+3, r24	; 0x03
   1132a:	94 83       	std	Z+4, r25	; 0x04
   1132c:	a5 83       	std	Z+5, r26	; 0x05
   1132e:	d2 82       	std	Z+2, r13	; 0x02
   11330:	c1 82       	std	Z+1, r12	; 0x01
   11332:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
   11336:	31 c0       	rjmp	.+98     	; 0x1139a <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11338:	9c 01       	movw	r18, r24
   1133a:	20 56       	subi	r18, 0x60	; 96
   1133c:	31 09       	sbc	r19, r1
   1133e:	20 31       	cpi	r18, 0x10	; 16
   11340:	31 05       	cpc	r19, r1
   11342:	28 f0       	brcs	.+10     	; 0x1134e <gpib_trace_display+0x1de>
   11344:	e2 e8       	ldi	r30, 0x82	; 130
   11346:	f1 e0       	ldi	r31, 0x01	; 1
   11348:	00 e0       	ldi	r16, 0x00	; 0
   1134a:	10 e0       	ldi	r17, 0x00	; 0
   1134c:	0b c0       	rjmp	.+22     	; 0x11364 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   1134e:	0f 71       	andi	r16, 0x1F	; 31
   11350:	11 27       	eor	r17, r17
   11352:	ed b7       	in	r30, 0x3d	; 61
   11354:	fe b7       	in	r31, 0x3e	; 62
   11356:	17 83       	std	Z+7, r17	; 0x07
   11358:	06 83       	std	Z+6, r16	; 0x06
   1135a:	8a ef       	ldi	r24, 0xFA	; 250
   1135c:	9f e0       	ldi	r25, 0x0F	; 15
   1135e:	e3 cf       	rjmp	.-58     	; 0x11326 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11360:	0f 5f       	subi	r16, 0xFF	; 255
   11362:	1f 4f       	sbci	r17, 0xFF	; 255
   11364:	20 81       	ld	r18, Z
   11366:	31 81       	ldd	r19, Z+1	; 0x01
   11368:	2f 3f       	cpi	r18, 0xFF	; 255
   1136a:	4f ef       	ldi	r20, 0xFF	; 255
   1136c:	34 07       	cpc	r19, r20
   1136e:	a9 f0       	breq	.+42     	; 0x1139a <gpib_trace_display+0x22a>
   11370:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11372:	82 17       	cp	r24, r18
   11374:	93 07       	cpc	r25, r19
   11376:	a1 f7       	brne	.-24     	; 0x11360 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11378:	69 e6       	ldi	r22, 0x69	; 105
   1137a:	74 e0       	ldi	r23, 0x04	; 4
   1137c:	c6 01       	movw	r24, r12
   1137e:	0e 94 94 31 	call	0x6328	; 0x6328 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11382:	f8 01       	movw	r30, r16
   11384:	ee 0f       	add	r30, r30
   11386:	ff 1f       	adc	r31, r31
   11388:	ee 0f       	add	r30, r30
   1138a:	ff 1f       	adc	r31, r31
   1138c:	ee 57       	subi	r30, 0x7E	; 126
   1138e:	fe 4f       	sbci	r31, 0xFE	; 254
   11390:	62 81       	ldd	r22, Z+2	; 0x02
   11392:	73 81       	ldd	r23, Z+3	; 0x03
   11394:	c6 01       	movw	r24, r12
   11396:	0e 94 94 31 	call	0x6328	; 0x6328 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   1139a:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   1139e:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   113a2:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   113a6:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   113aa:	23 2b       	or	r18, r19
   113ac:	21 f4       	brne	.+8      	; 0x113b6 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   113ae:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   113b2:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   113b6:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   113ba:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   113be:	82 17       	cp	r24, r18
   113c0:	93 07       	cpc	r25, r19
   113c2:	19 f0       	breq	.+6      	; 0x113ca <gpib_trace_display+0x25a>
        puts(str);
   113c4:	c7 01       	movw	r24, r14
   113c6:	0e 94 d8 76 	call	0xedb0	; 0xedb0 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   113ca:	ed b7       	in	r30, 0x3d	; 61
   113cc:	fe b7       	in	r31, 0x3e	; 62
   113ce:	f6 82       	std	Z+6, r15	; 0x06
   113d0:	e5 82       	std	Z+5, r14	; 0x05
   113d2:	86 e6       	ldi	r24, 0x66	; 102
   113d4:	9d e0       	ldi	r25, 0x0D	; 13
   113d6:	94 83       	std	Z+4, r25	; 0x04
   113d8:	83 83       	std	Z+3, r24	; 0x03
   113da:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   113de:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   113e2:	92 83       	std	Z+2, r25	; 0x02
   113e4:	81 83       	std	Z+1, r24	; 0x01
   113e6:	0e 94 80 7e 	call	0xfd00	; 0xfd00 <fprintf>
}
   113ea:	c7 57       	subi	r28, 0x77	; 119
   113ec:	df 4f       	sbci	r29, 0xFF	; 255
   113ee:	ec e0       	ldi	r30, 0x0C	; 12
   113f0:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

000113f4 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   113f4:	af 92       	push	r10
   113f6:	bf 92       	push	r11
   113f8:	cf 92       	push	r12
   113fa:	df 92       	push	r13
   113fc:	ef 92       	push	r14
   113fe:	ff 92       	push	r15
   11400:	0f 93       	push	r16
   11402:	1f 93       	push	r17
   11404:	cf 93       	push	r28
   11406:	00 d0       	rcall	.+0      	; 0x11408 <gpib_read_byte+0x14>
   11408:	00 d0       	rcall	.+0      	; 0x1140a <gpib_read_byte+0x16>
   1140a:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   1140c:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <gpib_unread_f>
   11410:	22 23       	and	r18, r18
   11412:	39 f0       	breq	.+14     	; 0x11422 <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   11414:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
        return(gpib_unread_data);
   11418:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <gpib_unread_data>
   1141c:	90 91 f3 1e 	lds	r25, 0x1EF3	; 0x801ef3 <gpib_unread_data+0x1>
   11420:	e0 c0       	rjmp	.+448    	; 0x115e2 <gpib_read_byte+0x1ee>
   11422:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   11424:	81 e0       	ldi	r24, 0x01	; 1
   11426:	05 dc       	rcall	.-2038   	; 0x10c32 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   11428:	c1 14       	cp	r12, r1
   1142a:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   1142c:	51 f0       	breq	.+20     	; 0x11442 <gpib_read_byte+0x4e>
   1142e:	fa dc       	rcall	.-1548   	; 0x10e24 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11430:	7c 01       	movw	r14, r24
   11432:	08 dd       	rcall	.-1520   	; 0x10e44 <gpib_handshake_pin_read>
   11434:	e8 2a       	or	r14, r24
   11436:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   11438:	62 e0       	ldi	r22, 0x02	; 2
   1143a:	70 e0       	ldi	r23, 0x00	; 0
   1143c:	c7 01       	movw	r24, r14
   1143e:	98 de       	rcall	.-720    	; 0x11170 <gpib_trace_display>
   11440:	02 c0       	rjmp	.+4      	; 0x11446 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11442:	e1 2c       	mov	r14, r1
   11444:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   11446:	64 ef       	ldi	r22, 0xF4	; 244
   11448:	71 e0       	ldi	r23, 0x01	; 1
   1144a:	80 e0       	ldi	r24, 0x00	; 0
   1144c:	90 e0       	ldi	r25, 0x00	; 0
   1144e:	af db       	rcall	.-2210   	; 0x10bae <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   11450:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   11452:	00 e0       	ldi	r16, 0x00	; 0
   11454:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11456:	0e 94 74 e2 	call	0x1c4e8	; 0x1c4e8 <gpib_user_task>

        if(uart_keyhit(0))
   1145a:	80 e0       	ldi	r24, 0x00	; 0
   1145c:	0e 94 97 2a 	call	0x552e	; 0x552e <uart_keyhit>
   11460:	89 2b       	or	r24, r25
   11462:	09 f0       	breq	.+2      	; 0x11466 <gpib_read_byte+0x72>
   11464:	9c c0       	rjmp	.+312    	; 0x1159e <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11466:	4c 99       	sbic	0x09, 4	; 9
   11468:	15 c0       	rjmp	.+42     	; 0x11494 <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   1146a:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   1146c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11470:	80 ff       	sbrs	r24, 0
   11472:	0e c0       	rjmp	.+28     	; 0x11490 <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11474:	8c 2f       	mov	r24, r28
   11476:	90 e0       	ldi	r25, 0x00	; 0
   11478:	ed b7       	in	r30, 0x3d	; 61
   1147a:	fe b7       	in	r31, 0x3e	; 62
   1147c:	95 83       	std	Z+5, r25	; 0x05
   1147e:	84 83       	std	Z+4, r24	; 0x04
   11480:	8a e2       	ldi	r24, 0x2A	; 42
   11482:	90 e1       	ldi	r25, 0x10	; 16
   11484:	a0 e0       	ldi	r26, 0x00	; 0
   11486:	81 83       	std	Z+1, r24	; 0x01
   11488:	92 83       	std	Z+2, r25	; 0x02
   1148a:	a3 83       	std	Z+3, r26	; 0x03
   1148c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            gpib_bus_init();
   11490:	98 db       	rcall	.-2256   	; 0x10bc2 <gpib_bus_init>
   11492:	85 c0       	rjmp	.+266    	; 0x1159e <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   11494:	c2 30       	cpi	r28, 0x02	; 2
   11496:	31 f1       	breq	.+76     	; 0x114e4 <gpib_read_byte+0xf0>
   11498:	28 f4       	brcc	.+10     	; 0x114a4 <gpib_read_byte+0xb0>
   1149a:	cc 23       	and	r28, r28
   1149c:	69 f0       	breq	.+26     	; 0x114b8 <gpib_read_byte+0xc4>
   1149e:	c1 30       	cpi	r28, 0x01	; 1
   114a0:	c9 f0       	breq	.+50     	; 0x114d4 <gpib_read_byte+0xe0>
   114a2:	63 c0       	rjmp	.+198    	; 0x1156a <gpib_read_byte+0x176>
   114a4:	c5 30       	cpi	r28, 0x05	; 5
   114a6:	09 f4       	brne	.+2      	; 0x114aa <gpib_read_byte+0xb6>
   114a8:	54 c0       	rjmp	.+168    	; 0x11552 <gpib_read_byte+0x15e>
   114aa:	c7 30       	cpi	r28, 0x07	; 7
   114ac:	09 f4       	brne	.+2      	; 0x114b0 <gpib_read_byte+0xbc>
   114ae:	58 c0       	rjmp	.+176    	; 0x11560 <gpib_read_byte+0x16c>
   114b0:	c4 30       	cpi	r28, 0x04	; 4
   114b2:	09 f0       	breq	.+2      	; 0x114b6 <gpib_read_byte+0xc2>
   114b4:	5a c0       	rjmp	.+180    	; 0x1156a <gpib_read_byte+0x176>
   114b6:	3e c0       	rjmp	.+124    	; 0x11534 <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   114b8:	19 9b       	sbis	0x03, 1	; 3
   114ba:	43 c0       	rjmp	.+134    	; 0x11542 <gpib_read_byte+0x14e>
   114bc:	fd e0       	ldi	r31, 0x0D	; 13
   114be:	fa 95       	dec	r31
   114c0:	f1 f7       	brne	.-4      	; 0x114be <gpib_read_byte+0xca>
   114c2:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   114c4:	52 98       	cbi	0x0a, 2	; 10
   114c6:	5a 9a       	sbi	0x0b, 2	; 11
   114c8:	8d e0       	ldi	r24, 0x0D	; 13
   114ca:	8a 95       	dec	r24
   114cc:	f1 f7       	brne	.-4      	; 0x114ca <gpib_read_byte+0xd6>
   114ce:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   114d0:	c1 e0       	ldi	r28, 0x01	; 1
   114d2:	37 c0       	rjmp	.+110    	; 0x11542 <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   114d4:	19 99       	sbic	0x03, 1	; 3
   114d6:	80 c0       	rjmp	.+256    	; 0x115d8 <gpib_read_byte+0x1e4>
   114d8:	ed e0       	ldi	r30, 0x0D	; 13
   114da:	ea 95       	dec	r30
   114dc:	f1 f7       	brne	.-4      	; 0x114da <gpib_read_byte+0xe6>
   114de:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   114e0:	c2 e0       	ldi	r28, 0x02	; 2
   114e2:	7a c0       	rjmp	.+244    	; 0x115d8 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   114e4:	5a 98       	cbi	0x0b, 2	; 11
   114e6:	52 9a       	sbi	0x0a, 2	; 10
   114e8:	fd e0       	ldi	r31, 0x0D	; 13
   114ea:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   114ec:	f1 f7       	brne	.-4      	; 0x114ea <gpib_read_byte+0xf6>
   114ee:	00 00       	nop
   114f0:	93 dc       	rcall	.-1754   	; 0x10e18 <gpib_bus_read>
   114f2:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   114f4:	b1 2c       	mov	r11, r1
   114f6:	96 dc       	rcall	.-1748   	; 0x10e24 <gpib_control_pin_read>
   114f8:	7c 01       	movw	r14, r24
   114fa:	08 2b       	or	r16, r24
                ch |= control_last;
   114fc:	19 2b       	or	r17, r25
   114fe:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   11500:	1b 29       	or	r17, r11
   11502:	c1 14       	cp	r12, r1
   11504:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   11506:	49 f0       	breq	.+18     	; 0x1151a <gpib_read_byte+0x126>
   11508:	9d dc       	rcall	.-1734   	; 0x10e44 <gpib_handshake_pin_read>
   1150a:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   1150c:	f9 2a       	or	r15, r25
   1150e:	61 e0       	ldi	r22, 0x01	; 1
   11510:	70 e0       	ldi	r23, 0x00	; 0
   11512:	c5 01       	movw	r24, r10
   11514:	8e 29       	or	r24, r14
   11516:	9f 29       	or	r25, r15
   11518:	2b de       	rcall	.-938    	; 0x11170 <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   1151a:	53 98       	cbi	0x0a, 3	; 10
   1151c:	5b 9a       	sbi	0x0b, 3	; 11
   1151e:	8d e0       	ldi	r24, 0x0D	; 13
   11520:	8a 95       	dec	r24
   11522:	f1 f7       	brne	.-4      	; 0x11520 <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   11524:	00 00       	nop
   11526:	64 ef       	ldi	r22, 0xF4	; 244
   11528:	71 e0       	ldi	r23, 0x01	; 1
   1152a:	80 e0       	ldi	r24, 0x00	; 0
   1152c:	90 e0       	ldi	r25, 0x00	; 0
   1152e:	3f db       	rcall	.-2434   	; 0x10bae <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11530:	c4 e0       	ldi	r28, 0x04	; 4
   11532:	52 c0       	rjmp	.+164    	; 0x115d8 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   11534:	19 9b       	sbis	0x03, 1	; 3
   11536:	05 c0       	rjmp	.+10     	; 0x11542 <gpib_read_byte+0x14e>
   11538:	ed e0       	ldi	r30, 0x0D	; 13
   1153a:	ea 95       	dec	r30
   1153c:	f1 f7       	brne	.-4      	; 0x1153a <gpib_read_byte+0x146>
   1153e:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   11540:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11542:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11546:	88 23       	and	r24, r24
   11548:	09 f4       	brne	.+2      	; 0x1154c <gpib_read_byte+0x158>
   1154a:	46 c0       	rjmp	.+140    	; 0x115d8 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   1154c:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   1154e:	c7 e0       	ldi	r28, 0x07	; 7
   11550:	43 c0       	rjmp	.+134    	; 0x115d8 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   11552:	5b 98       	cbi	0x0b, 3	; 11
   11554:	53 9a       	sbi	0x0a, 3	; 10
   11556:	fd e0       	ldi	r31, 0x0D	; 13
   11558:	fa 95       	dec	r31
   1155a:	f1 f7       	brne	.-4      	; 0x11558 <gpib_read_byte+0x164>
   1155c:	00 00       	nop
   1155e:	09 c0       	rjmp	.+18     	; 0x11572 <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   11560:	5a 98       	cbi	0x0b, 2	; 11
   11562:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11564:	5b 98       	cbi	0x0b, 3	; 11
   11566:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11568:	04 c0       	rjmp	.+8      	; 0x11572 <gpib_read_byte+0x17e>
   1156a:	c1 14       	cp	r12, r1
   1156c:	d1 04       	cpc	r13, r1
   1156e:	91 f0       	breq	.+36     	; 0x11594 <gpib_read_byte+0x1a0>
   11570:	04 c0       	rjmp	.+8      	; 0x1157a <gpib_read_byte+0x186>
   11572:	c1 14       	cp	r12, r1
   11574:	d1 04       	cpc	r13, r1
   11576:	99 f0       	breq	.+38     	; 0x1159e <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11578:	c8 e0       	ldi	r28, 0x08	; 8
   1157a:	54 dc       	rcall	.-1880   	; 0x10e24 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   1157c:	5c 01       	movw	r10, r24
   1157e:	62 dc       	rcall	.-1852   	; 0x10e44 <gpib_handshake_pin_read>
   11580:	a8 2a       	or	r10, r24
   11582:	b9 2a       	or	r11, r25
            if(control_last != control)
   11584:	ae 14       	cp	r10, r14
   11586:	bf 04       	cpc	r11, r15
   11588:	31 f0       	breq	.+12     	; 0x11596 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   1158a:	62 e0       	ldi	r22, 0x02	; 2
   1158c:	70 e0       	ldi	r23, 0x00	; 0
   1158e:	c5 01       	movw	r24, r10
   11590:	ef dd       	rcall	.-1058   	; 0x11170 <gpib_trace_display>
   11592:	01 c0       	rjmp	.+2      	; 0x11596 <gpib_read_byte+0x1a2>
   11594:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11596:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11598:	11 f0       	breq	.+4      	; 0x1159e <gpib_read_byte+0x1aa>
   1159a:	75 01       	movw	r14, r10
   1159c:	5c cf       	rjmp	.-328    	; 0x11456 <gpib_read_byte+0x62>
   1159e:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   115a2:	90 91 ed 1e 	lds	r25, 0x1EED	; 0x801eed <current+0x1>
   115a6:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <lastcmd+0x1>
   115aa:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <lastcmd>
   115ae:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   115b0:	88 27       	eor	r24, r24
   115b2:	90 7d       	andi	r25, 0xD0	; 208
   115b4:	89 2b       	or	r24, r25
   115b6:	11 f4       	brne	.+4      	; 0x115bc <gpib_read_byte+0x1c8>
   115b8:	12 fd       	sbrc	r17, 2
   115ba:	05 c0       	rjmp	.+10     	; 0x115c6 <gpib_read_byte+0x1d2>
   115bc:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
        current = 0;
   115c0:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   115c4:	07 c0       	rjmp	.+14     	; 0x115d4 <gpib_read_byte+0x1e0>
   115c6:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   115c8:	8f 77       	andi	r24, 0x7F	; 127
   115ca:	99 27       	eor	r25, r25
   115cc:	90 93 ed 1e 	sts	0x1EED, r25	; 0x801eed <current+0x1>
   115d0:	80 93 ec 1e 	sts	0x1EEC, r24	; 0x801eec <current>
   115d4:	c8 01       	movw	r24, r16
   115d6:	05 c0       	rjmp	.+10     	; 0x115e2 <gpib_read_byte+0x1ee>
   115d8:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   115da:	d1 04       	cpc	r13, r1
   115dc:	09 f4       	brne	.+2      	; 0x115e0 <gpib_read_byte+0x1ec>
   115de:	3b cf       	rjmp	.-394    	; 0x11456 <gpib_read_byte+0x62>
   115e0:	cc cf       	rjmp	.-104    	; 0x1157a <gpib_read_byte+0x186>
   115e2:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   115e4:	0f 90       	pop	r0
   115e6:	0f 90       	pop	r0
   115e8:	0f 90       	pop	r0
   115ea:	0f 90       	pop	r0
   115ec:	cf 91       	pop	r28
   115ee:	1f 91       	pop	r17
   115f0:	0f 91       	pop	r16
   115f2:	ff 90       	pop	r15
   115f4:	ef 90       	pop	r14
   115f6:	df 90       	pop	r13
   115f8:	cf 90       	pop	r12
   115fa:	bf 90       	pop	r11
   115fc:	af 90       	pop	r10
   115fe:	08 95       	ret

00011600 <gpib_decode>:
   11600:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11602:	70 e0       	ldi	r23, 0x00	; 0
   11604:	b5 cd       	rjmp	.-1174   	; 0x11170 <gpib_trace_display>
   11606:	08 95       	ret

00011608 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11608:	a7 e0       	ldi	r26, 0x07	; 7
   1160a:	b0 e0       	ldi	r27, 0x00	; 0
   1160c:	ea e0       	ldi	r30, 0x0A	; 10
   1160e:	fb e8       	ldi	r31, 0x8B	; 139
   11610:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
   11614:	5b 01       	movw	r10, r22
   11616:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11618:	fa 01       	movw	r30, r20
   1161a:	20 81       	ld	r18, Z
   1161c:	31 81       	ldd	r19, Z+1	; 0x01
   1161e:	22 27       	eor	r18, r18
   11620:	31 83       	std	Z+1, r19	; 0x01
   11622:	20 83       	st	Z, r18

    if(!size)
   11624:	67 2b       	or	r22, r23
   11626:	21 f0       	breq	.+8      	; 0x11630 <gpib_read_str+0x28>
   11628:	7c 01       	movw	r14, r24
   1162a:	00 e0       	ldi	r16, 0x00	; 0
   1162c:	10 e0       	ldi	r17, 0x00	; 0
   1162e:	28 c0       	rjmp	.+80     	; 0x11680 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11630:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11634:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11638:	81 72       	andi	r24, 0x21	; 33
   1163a:	91 70       	andi	r25, 0x01	; 1
   1163c:	89 2b       	or	r24, r25
   1163e:	09 f4       	brne	.+2      	; 0x11642 <gpib_read_str+0x3a>
   11640:	7c c0       	rjmp	.+248    	; 0x1173a <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11642:	81 ee       	ldi	r24, 0xE1	; 225
   11644:	9f e0       	ldi	r25, 0x0F	; 15
   11646:	a0 e0       	ldi	r26, 0x00	; 0
   11648:	ed b7       	in	r30, 0x3d	; 61
   1164a:	fe b7       	in	r31, 0x3e	; 62
   1164c:	81 83       	std	Z+1, r24	; 0x01
   1164e:	92 83       	std	Z+2, r25	; 0x02
   11650:	a3 83       	std	Z+3, r26	; 0x03
   11652:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   11656:	71 c0       	rjmp	.+226    	; 0x1173a <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11658:	8c 27       	eor	r24, r28
   1165a:	9d 27       	eor	r25, r29
   1165c:	92 fd       	sbrc	r25, 2
   1165e:	2e c0       	rjmp	.+92     	; 0x116bc <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11660:	ce 01       	movw	r24, r28
   11662:	88 27       	eor	r24, r24
   11664:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11666:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11668:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   1166a:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   1166c:	f7 01       	movw	r30, r14
   1166e:	20 83       	st	Z, r18
        ++ind;
   11670:	0f 5f       	subi	r16, 0xFF	; 255
   11672:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11674:	89 2b       	or	r24, r25
   11676:	09 f4       	brne	.+2      	; 0x1167a <gpib_read_str+0x72>
   11678:	3c c0       	rjmp	.+120    	; 0x116f2 <gpib_read_str+0xea>
   1167a:	ff ef       	ldi	r31, 0xFF	; 255
   1167c:	ef 1a       	sub	r14, r31
   1167e:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11680:	0a 15       	cp	r16, r10
   11682:	1b 05       	cpc	r17, r11
   11684:	0c f0       	brlt	.+2      	; 0x11688 <gpib_read_str+0x80>
   11686:	3f c0       	rjmp	.+126    	; 0x11706 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11688:	80 e0       	ldi	r24, 0x00	; 0
   1168a:	90 e0       	ldi	r25, 0x00	; 0
   1168c:	b3 de       	rcall	.-666    	; 0x113f4 <gpib_read_byte>
   1168e:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11690:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11694:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11698:	90 ff       	sbrs	r25, 0
   1169a:	02 c0       	rjmp	.+4      	; 0x116a0 <gpib_read_str+0x98>
            gpib_decode(val);
   1169c:	ce 01       	movw	r24, r28
   1169e:	b0 df       	rcall	.-160    	; 0x11600 <gpib_decode>
#endif
        if(val & ERROR_MASK)
   116a0:	9e 01       	movw	r18, r28
   116a2:	22 27       	eor	r18, r18
   116a4:	30 7d       	andi	r19, 0xD0	; 208
   116a6:	f6 01       	movw	r30, r12
   116a8:	80 81       	ld	r24, Z
   116aa:	91 81       	ldd	r25, Z+1	; 0x01
   116ac:	21 15       	cp	r18, r1
   116ae:	31 05       	cpc	r19, r1
   116b0:	99 f2       	breq	.-90     	; 0x11658 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   116b2:	82 2b       	or	r24, r18
   116b4:	93 2b       	or	r25, r19
   116b6:	91 83       	std	Z+1, r25	; 0x01
   116b8:	80 83       	st	Z, r24
            break;
   116ba:	28 c0       	rjmp	.+80     	; 0x1170c <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   116bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   116c0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   116c4:	81 72       	andi	r24, 0x21	; 33
   116c6:	91 70       	andi	r25, 0x01	; 1
   116c8:	89 2b       	or	r24, r25
   116ca:	81 f0       	breq	.+32     	; 0x116ec <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   116cc:	ce 01       	movw	r24, r28
   116ce:	99 27       	eor	r25, r25
   116d0:	ed b7       	in	r30, 0x3d	; 61
   116d2:	fe b7       	in	r31, 0x3e	; 62
   116d4:	97 83       	std	Z+7, r25	; 0x07
   116d6:	86 83       	std	Z+6, r24	; 0x06
   116d8:	15 83       	std	Z+5, r17	; 0x05
   116da:	04 83       	std	Z+4, r16	; 0x04
   116dc:	84 eb       	ldi	r24, 0xB4	; 180
   116de:	9f e0       	ldi	r25, 0x0F	; 15
   116e0:	a0 e0       	ldi	r26, 0x00	; 0
   116e2:	81 83       	std	Z+1, r24	; 0x01
   116e4:	92 83       	std	Z+2, r25	; 0x02
   116e6:	a3 83       	std	Z+3, r26	; 0x03
   116e8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            gpib_unread(val);
   116ec:	ce 01       	movw	r24, r28
   116ee:	6a db       	rcall	.-2348   	; 0x10dc4 <gpib_unread>
            break;
   116f0:	0d c0       	rjmp	.+26     	; 0x1170c <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   116f2:	d0 ff       	sbrs	r29, 0
   116f4:	c2 cf       	rjmp	.-124    	; 0x1167a <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   116f6:	f6 01       	movw	r30, r12
   116f8:	80 81       	ld	r24, Z
   116fa:	91 81       	ldd	r25, Z+1	; 0x01
   116fc:	90 fd       	sbrc	r25, 0
   116fe:	1f c0       	rjmp	.+62     	; 0x1173e <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11700:	91 60       	ori	r25, 0x01	; 1
   11702:	91 83       	std	Z+1, r25	; 0x01
   11704:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   11706:	0a 15       	cp	r16, r10
   11708:	1b 05       	cpc	r17, r11
   1170a:	c9 f0       	breq	.+50     	; 0x1173e <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   1170c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11710:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11714:	81 72       	andi	r24, 0x21	; 33
   11716:	99 27       	eor	r25, r25
   11718:	89 2b       	or	r24, r25
   1171a:	89 f0       	breq	.+34     	; 0x1173e <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   1171c:	ed b7       	in	r30, 0x3d	; 61
   1171e:	fe b7       	in	r31, 0x3e	; 62
   11720:	b7 82       	std	Z+7, r11	; 0x07
   11722:	a6 82       	std	Z+6, r10	; 0x06
   11724:	15 83       	std	Z+5, r17	; 0x05
   11726:	04 83       	std	Z+4, r16	; 0x04
   11728:	8d e8       	ldi	r24, 0x8D	; 141
   1172a:	9f e0       	ldi	r25, 0x0F	; 15
   1172c:	a0 e0       	ldi	r26, 0x00	; 0
   1172e:	81 83       	std	Z+1, r24	; 0x01
   11730:	92 83       	std	Z+2, r25	; 0x02
   11732:	a3 83       	std	Z+3, r26	; 0x03
   11734:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   11738:	02 c0       	rjmp	.+4      	; 0x1173e <gpib_read_str+0x136>
   1173a:	00 e0       	ldi	r16, 0x00	; 0
   1173c:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   1173e:	c8 01       	movw	r24, r16
   11740:	cd b7       	in	r28, 0x3d	; 61
   11742:	de b7       	in	r29, 0x3e	; 62
   11744:	27 96       	adiw	r28, 0x07	; 7
   11746:	ea e0       	ldi	r30, 0x0A	; 10
   11748:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

0001174c <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1174c:	a7 e0       	ldi	r26, 0x07	; 7
   1174e:	b0 e0       	ldi	r27, 0x00	; 0
   11750:	ec ea       	ldi	r30, 0xAC	; 172
   11752:	fb e8       	ldi	r31, 0x8B	; 139
   11754:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
   11758:	d8 2f       	mov	r29, r24
   1175a:	c9 2f       	mov	r28, r25
   1175c:	7b 01       	movw	r14, r22
   1175e:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11760:	fa 01       	movw	r30, r20
   11762:	80 81       	ld	r24, Z
   11764:	91 81       	ldd	r25, Z+1	; 0x01
   11766:	88 27       	eor	r24, r24
   11768:	91 83       	std	Z+1, r25	; 0x01
   1176a:	80 83       	st	Z, r24

    if(!size)
   1176c:	67 2b       	or	r22, r23
   1176e:	91 f4       	brne	.+36     	; 0x11794 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11770:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11774:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11778:	81 72       	andi	r24, 0x21	; 33
   1177a:	91 70       	andi	r25, 0x01	; 1
   1177c:	89 2b       	or	r24, r25
   1177e:	51 f0       	breq	.+20     	; 0x11794 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   11780:	83 e7       	ldi	r24, 0x73	; 115
   11782:	9f e0       	ldi	r25, 0x0F	; 15
   11784:	a0 e0       	ldi	r26, 0x00	; 0
   11786:	ed b7       	in	r30, 0x3d	; 61
   11788:	fe b7       	in	r31, 0x3e	; 62
   1178a:	81 83       	std	Z+1, r24	; 0x01
   1178c:	92 83       	std	Z+2, r25	; 0x02
   1178e:	a3 83       	std	Z+3, r26	; 0x03
   11790:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11794:	80 e0       	ldi	r24, 0x00	; 0
   11796:	4d da       	rcall	.-2918   	; 0x10c32 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11798:	4e 9b       	sbis	0x09, 6	; 9
   1179a:	06 c0       	rjmp	.+12     	; 0x117a8 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   1179c:	64 ef       	ldi	r22, 0xF4	; 244
   1179e:	71 e0       	ldi	r23, 0x01	; 1
   117a0:	80 e0       	ldi	r24, 0x00	; 0
   117a2:	90 e0       	ldi	r25, 0x00	; 0
   117a4:	04 da       	rcall	.-3064   	; 0x10bae <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   117a6:	18 c0       	rjmp	.+48     	; 0x117d8 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   117a8:	64 ef       	ldi	r22, 0xF4	; 244
   117aa:	71 e0       	ldi	r23, 0x01	; 1
   117ac:	80 e0       	ldi	r24, 0x00	; 0
   117ae:	90 e0       	ldi	r25, 0x00	; 0
   117b0:	fe d9       	rcall	.-3076   	; 0x10bae <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   117b2:	4e 99       	sbic	0x09, 6	; 9
   117b4:	f3 cf       	rjmp	.-26     	; 0x1179c <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   117b6:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   117ba:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   117bc:	d1 f3       	breq	.-12     	; 0x117b2 <gpib_write_str+0x66>
   117be:	81 e0       	ldi	r24, 0x01	; 1
   117c0:	38 da       	rcall	.-2960   	; 0x10c32 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   117c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117c6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117ca:	85 70       	andi	r24, 0x05	; 5
   117cc:	99 27       	eor	r25, r25
   117ce:	89 2b       	or	r24, r25
   117d0:	d9 f0       	breq	.+54     	; 0x11808 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   117d2:	85 e4       	ldi	r24, 0x45	; 69
   117d4:	9f e0       	ldi	r25, 0x0F	; 15
   117d6:	10 c0       	rjmp	.+32     	; 0x117f8 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   117d8:	19 99       	sbic	0x03, 1	; 3
   117da:	1f c0       	rjmp	.+62     	; 0x1181a <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   117dc:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   117e0:	88 23       	and	r24, r24
   117e2:	d1 f3       	breq	.-12     	; 0x117d8 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   117e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117e8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117ec:	85 70       	andi	r24, 0x05	; 5
   117ee:	99 27       	eor	r25, r25
   117f0:	89 2b       	or	r24, r25
   117f2:	51 f0       	breq	.+20     	; 0x11808 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   117f4:	8b e2       	ldi	r24, 0x2B	; 43
   117f6:	9f e0       	ldi	r25, 0x0F	; 15
   117f8:	a0 e0       	ldi	r26, 0x00	; 0
   117fa:	ed b7       	in	r30, 0x3d	; 61
   117fc:	fe b7       	in	r31, 0x3e	; 62
   117fe:	81 83       	std	Z+1, r24	; 0x01
   11800:	92 83       	std	Z+2, r25	; 0x02
   11802:	a3 83       	std	Z+3, r26	; 0x03
   11804:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   11808:	f8 01       	movw	r30, r16
   1180a:	80 81       	ld	r24, Z
   1180c:	91 81       	ldd	r25, Z+1	; 0x01
   1180e:	90 6c       	ori	r25, 0xC0	; 192
   11810:	91 83       	std	Z+1, r25	; 0x01
   11812:	80 83       	st	Z, r24
			return(ind);
   11814:	c0 e0       	ldi	r28, 0x00	; 0
   11816:	d0 e0       	ldi	r29, 0x00	; 0
   11818:	45 c0       	rjmp	.+138    	; 0x118a4 <gpib_write_str+0x158>
   1181a:	cd 2e       	mov	r12, r29
   1181c:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   1181e:	c0 e0       	ldi	r28, 0x00	; 0
   11820:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   11822:	ce 15       	cp	r28, r14
   11824:	df 05       	cpc	r29, r15
   11826:	1c f5       	brge	.+70     	; 0x1186e <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11828:	21 96       	adiw	r28, 0x01	; 1
   1182a:	f6 01       	movw	r30, r12
   1182c:	81 91       	ld	r24, Z+
   1182e:	6f 01       	movw	r12, r30
   11830:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   11832:	f8 01       	movw	r30, r16
   11834:	20 81       	ld	r18, Z
   11836:	31 81       	ldd	r19, Z+1	; 0x01
   11838:	30 ff       	sbrs	r19, 0
   1183a:	04 c0       	rjmp	.+8      	; 0x11844 <gpib_write_str+0xf8>
   1183c:	ec 16       	cp	r14, r28
   1183e:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   11840:	09 f4       	brne	.+2      	; 0x11844 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   11842:	91 60       	ori	r25, 0x01	; 1
   11844:	0b db       	rcall	.-2538   	; 0x10e5c <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11846:	5c 01       	movw	r10, r24
   11848:	aa 24       	eor	r10, r10
   1184a:	f0 ed       	ldi	r31, 0xD0	; 208
   1184c:	bf 22       	and	r11, r31
   1184e:	f8 01       	movw	r30, r16
   11850:	20 81       	ld	r18, Z
   11852:	31 81       	ldd	r19, Z+1	; 0x01
   11854:	2a 29       	or	r18, r10
   11856:	3b 29       	or	r19, r11
   11858:	31 83       	std	Z+1, r19	; 0x01
   1185a:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1185c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11860:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11864:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11866:	cc de       	rcall	.-616    	; 0x11600 <gpib_decode>
   11868:	a1 14       	cp	r10, r1
   1186a:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   1186c:	d1 f2       	breq	.-76     	; 0x11822 <gpib_write_str+0xd6>
   1186e:	81 e0       	ldi	r24, 0x01	; 1
   11870:	e0 d9       	rcall	.-3136   	; 0x10c32 <gpib_rx_init>

    if ( ind != size )
   11872:	ce 15       	cp	r28, r14
   11874:	df 05       	cpc	r29, r15
   11876:	b1 f0       	breq	.+44     	; 0x118a4 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11878:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1187c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11880:	81 72       	andi	r24, 0x21	; 33
   11882:	91 70       	andi	r25, 0x01	; 1
   11884:	89 2b       	or	r24, r25
   11886:	71 f0       	breq	.+28     	; 0x118a4 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11888:	ed b7       	in	r30, 0x3d	; 61
   1188a:	fe b7       	in	r31, 0x3e	; 62
   1188c:	f7 82       	std	Z+7, r15	; 0x07
   1188e:	e6 82       	std	Z+6, r14	; 0x06
   11890:	d5 83       	std	Z+5, r29	; 0x05
   11892:	c4 83       	std	Z+4, r28	; 0x04
   11894:	83 e0       	ldi	r24, 0x03	; 3
   11896:	9f e0       	ldi	r25, 0x0F	; 15
   11898:	a0 e0       	ldi	r26, 0x00	; 0
   1189a:	81 83       	std	Z+1, r24	; 0x01
   1189c:	92 83       	std	Z+2, r25	; 0x02
   1189e:	a3 83       	std	Z+3, r26	; 0x03
   118a0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }
    return(ind);
}
   118a4:	ce 01       	movw	r24, r28
   118a6:	cd b7       	in	r28, 0x3d	; 61
   118a8:	de b7       	in	r29, 0x3e	; 62
   118aa:	27 96       	adiw	r28, 0x07	; 7
   118ac:	ea e0       	ldi	r30, 0x0A	; 10
   118ae:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

000118b2 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   118b2:	ad b7       	in	r26, 0x3d	; 61
   118b4:	be b7       	in	r27, 0x3e	; 62
   118b6:	17 97       	sbiw	r26, 0x07	; 7
   118b8:	0f b6       	in	r0, 0x3f	; 63
   118ba:	f8 94       	cli
   118bc:	be bf       	out	0x3e, r27	; 62
   118be:	0f be       	out	0x3f, r0	; 63
   118c0:	ad bf       	out	0x3d, r26	; 61
   118c2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   118c6:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   118ca:	88 eb       	ldi	r24, 0xB8	; 184
   118cc:	91 e0       	ldi	r25, 0x01	; 1
   118ce:	0e 94 9f 9e 	call	0x13d3e	; 0x13d3e <Read_Config>
   118d2:	18 16       	cp	r1, r24
   118d4:	19 06       	cpc	r1, r25
   118d6:	8c f4       	brge	.+34     	; 0x118fa <gpib_file_init+0x48>
   118d8:	ed b7       	in	r30, 0x3d	; 61
   118da:	fe b7       	in	r31, 0x3e	; 62
   118dc:	97 83       	std	Z+7, r25	; 0x07
   118de:	86 83       	std	Z+6, r24	; 0x06
   118e0:	88 eb       	ldi	r24, 0xB8	; 184
   118e2:	91 e0       	ldi	r25, 0x01	; 1
   118e4:	95 83       	std	Z+5, r25	; 0x05
   118e6:	84 83       	std	Z+4, r24	; 0x04
   118e8:	87 ed       	ldi	r24, 0xD7	; 215
   118ea:	94 e1       	ldi	r25, 0x14	; 20
   118ec:	a0 e0       	ldi	r26, 0x00	; 0
   118ee:	81 83       	std	Z+1, r24	; 0x01
   118f0:	92 83       	std	Z+2, r25	; 0x02
   118f2:	a3 83       	std	Z+3, r26	; 0x03
   118f4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   118f8:	10 c0       	rjmp	.+32     	; 0x1191a <gpib_file_init+0x68>
   118fa:	89 2b       	or	r24, r25
   118fc:	71 f0       	breq	.+28     	; 0x1191a <gpib_file_init+0x68>
   118fe:	88 eb       	ldi	r24, 0xB8	; 184
   11900:	91 e0       	ldi	r25, 0x01	; 1
   11902:	ed b7       	in	r30, 0x3d	; 61
   11904:	fe b7       	in	r31, 0x3e	; 62
   11906:	95 83       	std	Z+5, r25	; 0x05
   11908:	84 83       	std	Z+4, r24	; 0x04
   1190a:	86 ec       	ldi	r24, 0xC6	; 198
   1190c:	94 e1       	ldi	r25, 0x14	; 20
   1190e:	a0 e0       	ldi	r26, 0x00	; 0
   11910:	81 83       	std	Z+1, r24	; 0x01
   11912:	92 83       	std	Z+2, r25	; 0x02
   11914:	a3 83       	std	Z+3, r26	; 0x03
   11916:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1191a:	0e 94 65 9a 	call	0x134ca	; 0x134ca <set_Config_Defaults>
   1191e:	0e 94 22 70 	call	0xe044	; 0xe044 <mmc_wp_status>
   11922:	89 2b       	or	r24, r25
   11924:	51 f0       	breq	.+20     	; 0x1193a <gpib_file_init+0x88>
   11926:	8d ea       	ldi	r24, 0xAD	; 173
   11928:	94 e1       	ldi	r25, 0x14	; 20
   1192a:	a0 e0       	ldi	r26, 0x00	; 0
   1192c:	ed b7       	in	r30, 0x3d	; 61
   1192e:	fe b7       	in	r31, 0x3e	; 62
   11930:	81 83       	std	Z+1, r24	; 0x01
   11932:	92 83       	std	Z+2, r25	; 0x02
   11934:	a3 83       	std	Z+3, r26	; 0x03
   11936:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1193a:	ad b7       	in	r26, 0x3d	; 61
   1193c:	be b7       	in	r27, 0x3e	; 62
   1193e:	17 96       	adiw	r26, 0x07	; 7
   11940:	0f b6       	in	r0, 0x3f	; 63
   11942:	f8 94       	cli
   11944:	be bf       	out	0x3e, r27	; 62
   11946:	0f be       	out	0x3f, r0	; 63
   11948:	ad bf       	out	0x3d, r26	; 61
   1194a:	08 95       	ret

0001194c <SS80_is_MLA>:
   1194c:	40 e2       	ldi	r20, 0x20	; 32
   1194e:	50 e0       	ldi	r21, 0x00	; 0
   11950:	bc 01       	movw	r22, r24
   11952:	83 e0       	ldi	r24, 0x03	; 3
   11954:	90 e0       	ldi	r25, 0x00	; 0
   11956:	0e 94 9d 97 	call	0x12f3a	; 0x12f3a <find_device>
   1195a:	8f 3f       	cpi	r24, 0xFF	; 255
   1195c:	31 f0       	breq	.+12     	; 0x1196a <SS80_is_MLA+0x1e>
   1195e:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   11962:	08 2e       	mov	r0, r24
   11964:	00 0c       	add	r0, r0
   11966:	99 0b       	sbc	r25, r25
   11968:	08 95       	ret
   1196a:	80 e0       	ldi	r24, 0x00	; 0
   1196c:	90 e0       	ldi	r25, 0x00	; 0
   1196e:	08 95       	ret

00011970 <SS80_is_MTA>:
   11970:	40 e4       	ldi	r20, 0x40	; 64
   11972:	50 e0       	ldi	r21, 0x00	; 0
   11974:	bc 01       	movw	r22, r24
   11976:	83 e0       	ldi	r24, 0x03	; 3
   11978:	90 e0       	ldi	r25, 0x00	; 0
   1197a:	0e 94 9d 97 	call	0x12f3a	; 0x12f3a <find_device>
   1197e:	8f 3f       	cpi	r24, 0xFF	; 255
   11980:	31 f0       	breq	.+12     	; 0x1198e <SS80_is_MTA+0x1e>
   11982:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   11986:	08 2e       	mov	r0, r24
   11988:	00 0c       	add	r0, r0
   1198a:	99 0b       	sbc	r25, r25
   1198c:	08 95       	ret
   1198e:	80 e0       	ldi	r24, 0x00	; 0
   11990:	90 e0       	ldi	r25, 0x00	; 0
   11992:	08 95       	ret

00011994 <SS80_is_MSA>:
   11994:	40 e6       	ldi	r20, 0x60	; 96
   11996:	50 e0       	ldi	r21, 0x00	; 0
   11998:	bc 01       	movw	r22, r24
   1199a:	83 e0       	ldi	r24, 0x03	; 3
   1199c:	90 e0       	ldi	r25, 0x00	; 0
   1199e:	0e 94 9d 97 	call	0x12f3a	; 0x12f3a <find_device>
   119a2:	8f 3f       	cpi	r24, 0xFF	; 255
   119a4:	31 f0       	breq	.+12     	; 0x119b2 <SS80_is_MSA+0x1e>
   119a6:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   119aa:	08 2e       	mov	r0, r24
   119ac:	00 0c       	add	r0, r0
   119ae:	99 0b       	sbc	r25, r25
   119b0:	08 95       	ret
   119b2:	80 e0       	ldi	r24, 0x00	; 0
   119b4:	90 e0       	ldi	r25, 0x00	; 0
   119b6:	08 95       	ret

000119b8 <AMIGO_is_MLA>:
   119b8:	40 e2       	ldi	r20, 0x20	; 32
   119ba:	50 e0       	ldi	r21, 0x00	; 0
   119bc:	bc 01       	movw	r22, r24
   119be:	81 e0       	ldi	r24, 0x01	; 1
   119c0:	90 e0       	ldi	r25, 0x00	; 0
   119c2:	0e 94 9d 97 	call	0x12f3a	; 0x12f3a <find_device>
   119c6:	8f 3f       	cpi	r24, 0xFF	; 255
   119c8:	31 f0       	breq	.+12     	; 0x119d6 <AMIGO_is_MLA+0x1e>
   119ca:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   119ce:	08 2e       	mov	r0, r24
   119d0:	00 0c       	add	r0, r0
   119d2:	99 0b       	sbc	r25, r25
   119d4:	08 95       	ret
   119d6:	80 e0       	ldi	r24, 0x00	; 0
   119d8:	90 e0       	ldi	r25, 0x00	; 0
   119da:	08 95       	ret

000119dc <AMIGO_is_MTA>:
   119dc:	40 e4       	ldi	r20, 0x40	; 64
   119de:	50 e0       	ldi	r21, 0x00	; 0
   119e0:	bc 01       	movw	r22, r24
   119e2:	81 e0       	ldi	r24, 0x01	; 1
   119e4:	90 e0       	ldi	r25, 0x00	; 0
   119e6:	0e 94 9d 97 	call	0x12f3a	; 0x12f3a <find_device>
   119ea:	8f 3f       	cpi	r24, 0xFF	; 255
   119ec:	31 f0       	breq	.+12     	; 0x119fa <AMIGO_is_MTA+0x1e>
   119ee:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   119f2:	08 2e       	mov	r0, r24
   119f4:	00 0c       	add	r0, r0
   119f6:	99 0b       	sbc	r25, r25
   119f8:	08 95       	ret
   119fa:	80 e0       	ldi	r24, 0x00	; 0
   119fc:	90 e0       	ldi	r25, 0x00	; 0
   119fe:	08 95       	ret

00011a00 <AMIGO_is_MSA>:
   11a00:	40 e6       	ldi	r20, 0x60	; 96
   11a02:	50 e0       	ldi	r21, 0x00	; 0
   11a04:	bc 01       	movw	r22, r24
   11a06:	81 e0       	ldi	r24, 0x01	; 1
   11a08:	90 e0       	ldi	r25, 0x00	; 0
   11a0a:	0e 94 9d 97 	call	0x12f3a	; 0x12f3a <find_device>
   11a0e:	8f 3f       	cpi	r24, 0xFF	; 255
   11a10:	31 f0       	breq	.+12     	; 0x11a1e <AMIGO_is_MSA+0x1e>
   11a12:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   11a16:	08 2e       	mov	r0, r24
   11a18:	00 0c       	add	r0, r0
   11a1a:	99 0b       	sbc	r25, r25
   11a1c:	08 95       	ret
   11a1e:	80 e0       	ldi	r24, 0x00	; 0
   11a20:	90 e0       	ldi	r25, 0x00	; 0
   11a22:	08 95       	ret

00011a24 <PRINTER_is_MLA>:
   11a24:	40 e2       	ldi	r20, 0x20	; 32
   11a26:	50 e0       	ldi	r21, 0x00	; 0
   11a28:	bc 01       	movw	r22, r24
   11a2a:	84 e0       	ldi	r24, 0x04	; 4
   11a2c:	90 e0       	ldi	r25, 0x00	; 0
   11a2e:	0e 94 9d 97 	call	0x12f3a	; 0x12f3a <find_device>
   11a32:	8f 3f       	cpi	r24, 0xFF	; 255
   11a34:	31 f0       	breq	.+12     	; 0x11a42 <PRINTER_is_MLA+0x1e>
   11a36:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   11a3a:	08 2e       	mov	r0, r24
   11a3c:	00 0c       	add	r0, r0
   11a3e:	99 0b       	sbc	r25, r25
   11a40:	08 95       	ret
   11a42:	80 e0       	ldi	r24, 0x00	; 0
   11a44:	90 e0       	ldi	r25, 0x00	; 0
   11a46:	08 95       	ret

00011a48 <PRINTER_is_MTA>:
   11a48:	40 e4       	ldi	r20, 0x40	; 64
   11a4a:	50 e0       	ldi	r21, 0x00	; 0
   11a4c:	bc 01       	movw	r22, r24
   11a4e:	84 e0       	ldi	r24, 0x04	; 4
   11a50:	90 e0       	ldi	r25, 0x00	; 0
   11a52:	0e 94 9d 97 	call	0x12f3a	; 0x12f3a <find_device>
   11a56:	8f 3f       	cpi	r24, 0xFF	; 255
   11a58:	31 f0       	breq	.+12     	; 0x11a66 <PRINTER_is_MTA+0x1e>
   11a5a:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   11a5e:	08 2e       	mov	r0, r24
   11a60:	00 0c       	add	r0, r0
   11a62:	99 0b       	sbc	r25, r25
   11a64:	08 95       	ret
   11a66:	80 e0       	ldi	r24, 0x00	; 0
   11a68:	90 e0       	ldi	r25, 0x00	; 0
   11a6a:	08 95       	ret

00011a6c <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11a6c:	aa d8       	rcall	.-3756   	; 0x10bc2 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11a6e:	11 d9       	rcall	.-3550   	; 0x10c92 <gpib_state_init>
   11a70:	0e 94 19 ae 	call	0x15c32	; 0x15c32 <SS80_init>

    SS80_init();                                  // SS80 state init
   11a74:	0e 94 ae b3 	call	0x1675c	; 0x1675c <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11a78:	0c 94 d9 be 	jmp	0x17db2	; 0x17db2 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11a7c:	08 95       	ret

00011a7e <gpib_trace_task>:
   11a7e:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11a80:	1f 93       	push	r17
   11a82:	cf 93       	push	r28
   11a84:	df 93       	push	r29
   11a86:	00 d0       	rcall	.+0      	; 0x11a88 <gpib_trace_task+0xa>
   11a88:	00 d0       	rcall	.+0      	; 0x11a8a <gpib_trace_task+0xc>
   11a8a:	1f 92       	push	r1
   11a8c:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11a8e:	00 97       	sbiw	r24, 0x00	; 0
   11a90:	09 f4       	brne	.+2      	; 0x11a94 <gpib_trace_task+0x16>
   11a92:	44 c0       	rjmp	.+136    	; 0x11b1c <gpib_trace_task+0x9e>
   11a94:	fc 01       	movw	r30, r24
   11a96:	20 81       	ld	r18, Z
   11a98:	22 23       	and	r18, r18
   11a9a:	09 f4       	brne	.+2      	; 0x11a9e <gpib_trace_task+0x20>
   11a9c:	3f c0       	rjmp	.+126    	; 0x11b1c <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11a9e:	0e 94 61 32 	call	0x64c2	; 0x64c2 <skipspaces>
   11aa2:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11aa4:	ed b7       	in	r30, 0x3d	; 61
   11aa6:	fe b7       	in	r31, 0x3e	; 62
   11aa8:	95 83       	std	Z+5, r25	; 0x05
   11aaa:	84 83       	std	Z+4, r24	; 0x04
   11aac:	83 e9       	ldi	r24, 0x93	; 147
   11aae:	94 e1       	ldi	r25, 0x14	; 20
   11ab0:	a0 e0       	ldi	r26, 0x00	; 0
   11ab2:	81 83       	std	Z+1, r24	; 0x01
   11ab4:	92 83       	std	Z+2, r25	; 0x02
   11ab6:	a3 83       	std	Z+3, r26	; 0x03
   11ab8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        if(detail)
   11abc:	20 97       	sbiw	r28, 0x00	; 0
   11abe:	51 f0       	breq	.+20     	; 0x11ad4 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11ac0:	88 e6       	ldi	r24, 0x68	; 104
   11ac2:	94 e1       	ldi	r25, 0x14	; 20
   11ac4:	a0 e0       	ldi	r26, 0x00	; 0
   11ac6:	ed b7       	in	r30, 0x3d	; 61
   11ac8:	fe b7       	in	r31, 0x3e	; 62
   11aca:	81 83       	std	Z+1, r24	; 0x01
   11acc:	92 83       	std	Z+2, r25	; 0x02
   11ace:	a3 83       	std	Z+3, r26	; 0x03
   11ad0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printf("Press ANY key to exit\n");
   11ad4:	81 e5       	ldi	r24, 0x51	; 81
   11ad6:	94 e1       	ldi	r25, 0x14	; 20
   11ad8:	a0 e0       	ldi	r26, 0x00	; 0
   11ada:	ed b7       	in	r30, 0x3d	; 61
   11adc:	fe b7       	in	r31, 0x3e	; 62
   11ade:	81 83       	std	Z+1, r24	; 0x01
   11ae0:	92 83       	std	Z+2, r25	; 0x02
   11ae2:	a3 83       	std	Z+3, r26	; 0x03
   11ae4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11ae8:	6c e0       	ldi	r22, 0x0C	; 12
   11aea:	79 e0       	ldi	r23, 0x09	; 9
   11aec:	c8 01       	movw	r24, r16
   11aee:	0e 94 74 7e 	call	0xfce8	; 0xfce8 <fopen>
   11af2:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11af6:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11afa:	89 2b       	or	r24, r25
   11afc:	b9 f4       	brne	.+46     	; 0x11b2c <gpib_trace_task+0xae>
        {
            perror("open failed");
   11afe:	8a e9       	ldi	r24, 0x9A	; 154
   11b00:	9d e0       	ldi	r25, 0x0D	; 13
   11b02:	0e 94 a5 78 	call	0xf14a	; 0xf14a <perror>
            printf("exiting...\n");
   11b06:	85 e4       	ldi	r24, 0x45	; 69
   11b08:	94 e1       	ldi	r25, 0x14	; 20
   11b0a:	a0 e0       	ldi	r26, 0x00	; 0
   11b0c:	ed b7       	in	r30, 0x3d	; 61
   11b0e:	fe b7       	in	r31, 0x3e	; 62
   11b10:	81 83       	std	Z+1, r24	; 0x01
   11b12:	92 83       	std	Z+2, r25	; 0x02
   11b14:	a3 83       	std	Z+3, r26	; 0x03
   11b16:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            return;
   11b1a:	3d c0       	rjmp	.+122    	; 0x11b96 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11b1c:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11b20:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11b24:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11b28:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11b2c:	9f df       	rcall	.-194    	; 0x11a6c <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11b2e:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11b32:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11b36:	ca da       	rcall	.-2668   	; 0x110cc <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11b38:	80 e0       	ldi	r24, 0x00	; 0
   11b3a:	0e 94 97 2a 	call	0x552e	; 0x552e <uart_keyhit>
   11b3e:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11b40:	31 f4       	brne	.+12     	; 0x11b4e <gpib_trace_task+0xd0>
   11b42:	ce 01       	movw	r24, r28
        if(!detail)
   11b44:	57 dc       	rcall	.-1874   	; 0x113f4 <gpib_read_byte>
   11b46:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11b48:	b9 f7       	brne	.-18     	; 0x11b38 <gpib_trace_task+0xba>
   11b4a:	5a dd       	rcall	.-1356   	; 0x11600 <gpib_decode>
   11b4c:	f5 cf       	rjmp	.-22     	; 0x11b38 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11b4e:	8f e3       	ldi	r24, 0x3F	; 63
   11b50:	94 e1       	ldi	r25, 0x14	; 20
   11b52:	a0 e0       	ldi	r26, 0x00	; 0
   11b54:	ed b7       	in	r30, 0x3d	; 61
   11b56:	fe b7       	in	r31, 0x3e	; 62
   11b58:	81 83       	std	Z+1, r24	; 0x01
   11b5a:	92 83       	std	Z+2, r25	; 0x02
   11b5c:	a3 83       	std	Z+3, r26	; 0x03
   11b5e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    if(gpib_log_fp)
   11b62:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11b66:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11b6a:	00 97       	sbiw	r24, 0x00	; 0
   11b6c:	a1 f0       	breq	.+40     	; 0x11b96 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11b6e:	0e 94 1e 7d 	call	0xfa3c	; 0xfa3c <fclose>
        printf("Capturing Closed\n");
   11b72:	8d e2       	ldi	r24, 0x2D	; 45
   11b74:	94 e1       	ldi	r25, 0x14	; 20
   11b76:	a0 e0       	ldi	r26, 0x00	; 0
   11b78:	ed b7       	in	r30, 0x3d	; 61
   11b7a:	fe b7       	in	r31, 0x3e	; 62
   11b7c:	81 83       	std	Z+1, r24	; 0x01
   11b7e:	92 83       	std	Z+2, r25	; 0x02
   11b80:	a3 83       	std	Z+3, r26	; 0x03
   11b82:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        gpib_log_fp = stdout;
   11b86:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11b8a:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11b8e:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11b92:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }
}
   11b96:	cd b7       	in	r28, 0x3d	; 61
   11b98:	de b7       	in	r29, 0x3e	; 62
   11b9a:	25 96       	adiw	r28, 0x05	; 5
   11b9c:	e4 e0       	ldi	r30, 0x04	; 4
   11b9e:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00011ba2 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11ba2:	ef 92       	push	r14
   11ba4:	ff 92       	push	r15
   11ba6:	0f 93       	push	r16
   11ba8:	1f 93       	push	r17
   11baa:	cf 93       	push	r28
   11bac:	df 93       	push	r29
   11bae:	00 d0       	rcall	.+0      	; 0x11bb0 <gpib_error_test+0xe>
   11bb0:	1f 92       	push	r1
   11bb2:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11bb4:	ec 01       	movw	r28, r24
   11bb6:	cc 27       	eor	r28, r28
   11bb8:	d0 7d       	andi	r29, 0xD0	; 208
   11bba:	20 97       	sbiw	r28, 0x00	; 0
   11bbc:	61 f0       	breq	.+24     	; 0x11bd6 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11bbe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bc2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11bc6:	8d 72       	andi	r24, 0x2D	; 45
   11bc8:	99 27       	eor	r25, r25
   11bca:	87 01       	movw	r16, r14
   11bcc:	00 27       	eor	r16, r16
   11bce:	10 71       	andi	r17, 0x10	; 16
   11bd0:	89 2b       	or	r24, r25
   11bd2:	59 f4       	brne	.+22     	; 0x11bea <gpib_error_test+0x48>
   11bd4:	17 c0       	rjmp	.+46     	; 0x11c04 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11bd6:	80 e0       	ldi	r24, 0x00	; 0
   11bd8:	0e 94 97 2a 	call	0x552e	; 0x552e <uart_keyhit>
   11bdc:	89 2b       	or	r24, r25
   11bde:	79 f7       	brne	.-34     	; 0x11bbe <gpib_error_test+0x1c>
   11be0:	0e 94 20 6f 	call	0xde40	; 0xde40 <mmc_ins_status>
   11be4:	01 97       	sbiw	r24, 0x01	; 1
   11be6:	59 f7       	brne	.-42     	; 0x11bbe <gpib_error_test+0x1c>
   11be8:	62 c0       	rjmp	.+196    	; 0x11cae <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11bea:	01 15       	cp	r16, r1
   11bec:	11 05       	cpc	r17, r1
   11bee:	51 f0       	breq	.+20     	; 0x11c04 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11bf0:	86 e2       	ldi	r24, 0x26	; 38
   11bf2:	94 e1       	ldi	r25, 0x14	; 20
   11bf4:	a0 e0       	ldi	r26, 0x00	; 0
   11bf6:	ed b7       	in	r30, 0x3d	; 61
   11bf8:	fe b7       	in	r31, 0x3e	; 62
   11bfa:	81 83       	std	Z+1, r24	; 0x01
   11bfc:	92 83       	std	Z+2, r25	; 0x02
   11bfe:	a3 83       	std	Z+3, r26	; 0x03
   11c00:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11c04:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c08:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c0c:	8d 72       	andi	r24, 0x2D	; 45
   11c0e:	99 27       	eor	r25, r25
   11c10:	89 2b       	or	r24, r25
   11c12:	c1 f0       	breq	.+48     	; 0x11c44 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11c14:	f6 fe       	sbrs	r15, 6
   11c16:	0a c0       	rjmp	.+20     	; 0x11c2c <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11c18:	8b e1       	ldi	r24, 0x1B	; 27
   11c1a:	94 e1       	ldi	r25, 0x14	; 20
   11c1c:	a0 e0       	ldi	r26, 0x00	; 0
   11c1e:	ed b7       	in	r30, 0x3d	; 61
   11c20:	fe b7       	in	r31, 0x3e	; 62
   11c22:	81 83       	std	Z+1, r24	; 0x01
   11c24:	92 83       	std	Z+2, r25	; 0x02
   11c26:	a3 83       	std	Z+3, r26	; 0x03
   11c28:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11c2c:	d7 ff       	sbrs	r29, 7
   11c2e:	0a c0       	rjmp	.+20     	; 0x11c44 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11c30:	84 e1       	ldi	r24, 0x14	; 20
   11c32:	94 e1       	ldi	r25, 0x14	; 20
   11c34:	a0 e0       	ldi	r26, 0x00	; 0
   11c36:	ed b7       	in	r30, 0x3d	; 61
   11c38:	fe b7       	in	r31, 0x3e	; 62
   11c3a:	81 83       	std	Z+1, r24	; 0x01
   11c3c:	92 83       	std	Z+2, r25	; 0x02
   11c3e:	a3 83       	std	Z+3, r26	; 0x03
   11c40:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        }

        if(uart_keyhit(0))
   11c44:	80 e0       	ldi	r24, 0x00	; 0
   11c46:	0e 94 97 2a 	call	0x552e	; 0x552e <uart_keyhit>
   11c4a:	89 2b       	or	r24, r25
   11c4c:	51 f0       	breq	.+20     	; 0x11c62 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11c4e:	87 e0       	ldi	r24, 0x07	; 7
   11c50:	94 e1       	ldi	r25, 0x14	; 20
   11c52:	a0 e0       	ldi	r26, 0x00	; 0
   11c54:	ed b7       	in	r30, 0x3d	; 61
   11c56:	fe b7       	in	r31, 0x3e	; 62
   11c58:	81 83       	std	Z+1, r24	; 0x01
   11c5a:	92 83       	std	Z+2, r25	; 0x02
   11c5c:	a3 83       	std	Z+3, r26	; 0x03
   11c5e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

        if( mmc_ins_status() != 1 )
   11c62:	0e 94 20 6f 	call	0xde40	; 0xde40 <mmc_ins_status>
   11c66:	01 97       	sbiw	r24, 0x01	; 1
   11c68:	51 f0       	breq	.+20     	; 0x11c7e <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11c6a:	86 ef       	ldi	r24, 0xF6	; 246
   11c6c:	93 e1       	ldi	r25, 0x13	; 19
   11c6e:	a0 e0       	ldi	r26, 0x00	; 0
   11c70:	ed b7       	in	r30, 0x3d	; 61
   11c72:	fe b7       	in	r31, 0x3e	; 62
   11c74:	81 83       	std	Z+1, r24	; 0x01
   11c76:	92 83       	std	Z+2, r25	; 0x02
   11c78:	a3 83       	std	Z+3, r26	; 0x03
   11c7a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

        if(val & IFC_FLAG)
   11c7e:	01 15       	cp	r16, r1
   11c80:	11 05       	cpc	r17, r1
   11c82:	09 f0       	breq	.+2      	; 0x11c86 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11c84:	f3 de       	rcall	.-538    	; 0x11a6c <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11c86:	80 e0       	ldi	r24, 0x00	; 0
   11c88:	0e 94 97 2a 	call	0x552e	; 0x552e <uart_keyhit>
   11c8c:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11c8e:	11 f0       	breq	.+4      	; 0x11c94 <gpib_error_test+0xf2>
   11c90:	ed de       	rcall	.-550    	; 0x11a6c <gpib_init_devices>
   11c92:	0b c0       	rjmp	.+22     	; 0x11caa <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11c94:	0e 94 20 6f 	call	0xde40	; 0xde40 <mmc_ins_status>
   11c98:	01 97       	sbiw	r24, 0x01	; 1
   11c9a:	39 f4       	brne	.+14     	; 0x11caa <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11c9c:	01 15       	cp	r16, r1
   11c9e:	11 05       	cpc	r17, r1
   11ca0:	31 f0       	breq	.+12     	; 0x11cae <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11ca2:	54 98       	cbi	0x0a, 4	; 10
   11ca4:	4c 9b       	sbis	0x09, 4	; 9
   11ca6:	fd cf       	rjmp	.-6      	; 0x11ca2 <gpib_error_test+0x100>
   11ca8:	02 c0       	rjmp	.+4      	; 0x11cae <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11caa:	c1 e0       	ldi	r28, 0x01	; 1
   11cac:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11cae:	ce 01       	movw	r24, r28
   11cb0:	cd b7       	in	r28, 0x3d	; 61
   11cb2:	de b7       	in	r29, 0x3e	; 62
   11cb4:	23 96       	adiw	r28, 0x03	; 3
   11cb6:	e6 e0       	ldi	r30, 0x06	; 6
   11cb8:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

00011cbc <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11cbc:	1f 93       	push	r17
   11cbe:	cf 93       	push	r28
   11cc0:	df 93       	push	r29
   11cc2:	ec 01       	movw	r28, r24
   11cc4:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11cc6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11cca:	8f 35       	cpi	r24, 0x5F	; 95
   11ccc:	91 f0       	breq	.+36     	; 0x11cf2 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11cce:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11cd2:	90 e0       	ldi	r25, 0x00	; 0
   11cd4:	71 de       	rcall	.-798    	; 0x119b8 <AMIGO_is_MLA>
   11cd6:	89 2b       	or	r24, r25
   11cd8:	c9 f4       	brne	.+50     	; 0x11d0c <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11cda:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11cde:	90 e0       	ldi	r25, 0x00	; 0
   11ce0:	35 de       	rcall	.-918    	; 0x1194c <SS80_is_MLA>
   11ce2:	89 2b       	or	r24, r25
   11ce4:	11 f5       	brne	.+68     	; 0x11d2a <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11ce6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11cea:	90 e0       	ldi	r25, 0x00	; 0
   11cec:	9b de       	rcall	.-714    	; 0x11a24 <PRINTER_is_MLA>
   11cee:	89 2b       	or	r24, r25
   11cf0:	59 f5       	brne	.+86     	; 0x11d48 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11cf2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11cf6:	8f 33       	cpi	r24, 0x3F	; 63
   11cf8:	19 f4       	brne	.+6      	; 0x11d00 <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11cfa:	80 e0       	ldi	r24, 0x00	; 0
   11cfc:	90 e0       	ldi	r25, 0x00	; 0
   11cfe:	2e c0       	rjmp	.+92     	; 0x11d5c <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11d00:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11d04:	90 e0       	ldi	r25, 0x00	; 0
   11d06:	6a de       	rcall	.-812    	; 0x119dc <AMIGO_is_MTA>
   11d08:	89 2b       	or	r24, r25
   11d0a:	49 f0       	breq	.+18     	; 0x11d1e <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11d0c:	11 23       	and	r17, r17
   11d0e:	11 f0       	breq	.+4      	; 0x11d14 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11d10:	ce 01       	movw	r24, r28
   11d12:	58 d8       	rcall	.-3920   	; 0x10dc4 <gpib_unread>
   11d14:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = AMIGO_COMMANDS(secondary);
   11d18:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <AMIGO_COMMANDS>
   11d1c:	1d c0       	rjmp	.+58     	; 0x11d58 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11d1e:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11d22:	90 e0       	ldi	r25, 0x00	; 0
   11d24:	25 de       	rcall	.-950    	; 0x11970 <SS80_is_MTA>
   11d26:	89 2b       	or	r24, r25
   11d28:	49 f0       	breq	.+18     	; 0x11d3c <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11d2a:	11 23       	and	r17, r17
   11d2c:	11 f0       	breq	.+4      	; 0x11d32 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11d2e:	ce 01       	movw	r24, r28
   11d30:	49 d8       	rcall	.-3950   	; 0x10dc4 <gpib_unread>
   11d32:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = SS80_COMMANDS(secondary);
   11d36:	0e 94 fa b1 	call	0x163f4	; 0x163f4 <SS80_COMMANDS>
   11d3a:	0e c0       	rjmp	.+28     	; 0x11d58 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11d3c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11d40:	90 e0       	ldi	r25, 0x00	; 0
   11d42:	82 de       	rcall	.-764    	; 0x11a48 <PRINTER_is_MTA>
   11d44:	89 2b       	or	r24, r25
   11d46:	c9 f2       	breq	.-78     	; 0x11cfa <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11d48:	11 23       	and	r17, r17
   11d4a:	11 f0       	breq	.+4      	; 0x11d50 <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11d4c:	ce 01       	movw	r24, r28
   11d4e:	3a d8       	rcall	.-3980   	; 0x10dc4 <gpib_unread>
   11d50:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = PRINTER_COMMANDS(secondary);
   11d54:	0e 94 4d c0 	call	0x1809a	; 0x1809a <PRINTER_COMMANDS>
   11d58:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
            secondary = 0;
   11d5c:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11d5e:	cf 91       	pop	r28
   11d60:	1f 91       	pop	r17
   11d62:	08 95       	ret

00011d64 <Send_Identify>:
   11d64:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11d66:	df 92       	push	r13
   11d68:	ff 92       	push	r15
   11d6a:	0f 93       	push	r16
   11d6c:	1f 93       	push	r17
   11d6e:	cf 93       	push	r28
   11d70:	df 93       	push	r29
   11d72:	cd b7       	in	r28, 0x3d	; 61
   11d74:	de b7       	in	r29, 0x3e	; 62
   11d76:	2b 97       	sbiw	r28, 0x0b	; 11
   11d78:	0f b6       	in	r0, 0x3f	; 63
   11d7a:	f8 94       	cli
   11d7c:	de bf       	out	0x3e, r29	; 62
   11d7e:	0f be       	out	0x3f, r0	; 63
   11d80:	cd bf       	out	0x3d, r28	; 61
   11d82:	f8 2e       	mov	r15, r24
   11d84:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11d86:	80 e0       	ldi	r24, 0x00	; 0
   11d88:	91 e0       	ldi	r25, 0x01	; 1
   11d8a:	9b 87       	std	Y+11, r25	; 0x0b
   11d8c:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11d8e:	8b 01       	movw	r16, r22
   11d90:	20 e0       	ldi	r18, 0x00	; 0
   11d92:	30 e0       	ldi	r19, 0x00	; 0
   11d94:	42 e0       	ldi	r20, 0x02	; 2
   11d96:	50 e0       	ldi	r21, 0x00	; 0
   11d98:	60 e0       	ldi	r22, 0x00	; 0
   11d9a:	70 e0       	ldi	r23, 0x00	; 0
   11d9c:	ce 01       	movw	r24, r28
   11d9e:	08 96       	adiw	r24, 0x08	; 8
   11da0:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11da4:	ae 01       	movw	r20, r28
   11da6:	46 5f       	subi	r20, 0xF6	; 246
   11da8:	5f 4f       	sbci	r21, 0xFF	; 255
   11daa:	62 e0       	ldi	r22, 0x02	; 2
   11dac:	70 e0       	ldi	r23, 0x00	; 0
   11dae:	ce 01       	movw	r24, r28
   11db0:	08 96       	adiw	r24, 0x08	; 8
   11db2:	cc dc       	rcall	.-1640   	; 0x1174c <gpib_write_str>
   11db4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11db8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11dbc:	02 97       	sbiw	r24, 0x02	; 2
   11dbe:	79 f0       	breq	.+30     	; 0x11dde <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dc0:	25 72       	andi	r18, 0x25	; 37
   11dc2:	33 27       	eor	r19, r19
   11dc4:	23 2b       	or	r18, r19
   11dc6:	f9 f0       	breq	.+62     	; 0x11e06 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11dc8:	ed b7       	in	r30, 0x3d	; 61
   11dca:	fe b7       	in	r31, 0x3e	; 62
   11dcc:	d7 82       	std	Z+7, r13	; 0x07
   11dce:	c6 82       	std	Z+6, r12	; 0x06
   11dd0:	8f 2d       	mov	r24, r15
   11dd2:	90 e0       	ldi	r25, 0x00	; 0
   11dd4:	95 83       	std	Z+5, r25	; 0x05
   11dd6:	84 83       	std	Z+4, r24	; 0x04
   11dd8:	85 ed       	ldi	r24, 0xD5	; 213
   11dda:	93 e1       	ldi	r25, 0x13	; 19
   11ddc:	0e c0       	rjmp	.+28     	; 0x11dfa <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dde:	24 72       	andi	r18, 0x24	; 36
   11de0:	33 27       	eor	r19, r19
   11de2:	23 2b       	or	r18, r19
   11de4:	81 f0       	breq	.+32     	; 0x11e06 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11de6:	ed b7       	in	r30, 0x3d	; 61
   11de8:	fe b7       	in	r31, 0x3e	; 62
   11dea:	d7 82       	std	Z+7, r13	; 0x07
   11dec:	c6 82       	std	Z+6, r12	; 0x06
   11dee:	8f 2d       	mov	r24, r15
   11df0:	90 e0       	ldi	r25, 0x00	; 0
   11df2:	95 83       	std	Z+5, r25	; 0x05
   11df4:	84 83       	std	Z+4, r24	; 0x04
   11df6:	8b eb       	ldi	r24, 0xBB	; 187
   11df8:	93 e1       	ldi	r25, 0x13	; 19
   11dfa:	a0 e0       	ldi	r26, 0x00	; 0
   11dfc:	81 83       	std	Z+1, r24	; 0x01
   11dfe:	92 83       	std	Z+2, r25	; 0x02
   11e00:	a3 83       	std	Z+3, r26	; 0x03
   11e02:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
    return (status & ERROR_MASK);
   11e06:	8a 85       	ldd	r24, Y+10	; 0x0a
   11e08:	9b 85       	ldd	r25, Y+11	; 0x0b
   11e0a:	88 27       	eor	r24, r24
   11e0c:	90 7d       	andi	r25, 0xD0	; 208
}
   11e0e:	2b 96       	adiw	r28, 0x0b	; 11
   11e10:	0f b6       	in	r0, 0x3f	; 63
   11e12:	f8 94       	cli
   11e14:	de bf       	out	0x3e, r29	; 62
   11e16:	0f be       	out	0x3f, r0	; 63
   11e18:	cd bf       	out	0x3d, r28	; 61
   11e1a:	df 91       	pop	r29
   11e1c:	cf 91       	pop	r28
   11e1e:	1f 91       	pop	r17
   11e20:	0f 91       	pop	r16
   11e22:	ff 90       	pop	r15
   11e24:	df 90       	pop	r13
   11e26:	cf 90       	pop	r12
   11e28:	08 95       	ret

00011e2a <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11e2a:	00 d0       	rcall	.+0      	; 0x11e2c <GPIB+0x2>
   11e2c:	00 d0       	rcall	.+0      	; 0x11e2e <GPIB+0x4>
   11e2e:	1f 92       	push	r1
   11e30:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e34:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11e38:	85 30       	cpi	r24, 0x05	; 5
   11e3a:	89 f4       	brne	.+34     	; 0x11e5e <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11e3c:	27 71       	andi	r18, 0x17	; 23
   11e3e:	33 27       	eor	r19, r19
   11e40:	23 2b       	or	r18, r19
   11e42:	51 f0       	breq	.+20     	; 0x11e58 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11e44:	83 ea       	ldi	r24, 0xA3	; 163
   11e46:	93 e1       	ldi	r25, 0x13	; 19
   11e48:	a0 e0       	ldi	r26, 0x00	; 0
   11e4a:	ed b7       	in	r30, 0x3d	; 61
   11e4c:	fe b7       	in	r31, 0x3e	; 62
   11e4e:	81 83       	std	Z+1, r24	; 0x01
   11e50:	92 83       	std	Z+2, r25	; 0x02
   11e52:	a3 83       	std	Z+3, r26	; 0x03
   11e54:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        spoll = 0;
   11e58:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   11e5c:	a0 c0       	rjmp	.+320    	; 0x11f9e <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11e5e:	85 31       	cpi	r24, 0x15	; 21
   11e60:	39 f4       	brne	.+14     	; 0x11e70 <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11e62:	27 71       	andi	r18, 0x17	; 23
   11e64:	33 27       	eor	r19, r19
   11e66:	23 2b       	or	r18, r19
   11e68:	b9 f3       	breq	.-18     	; 0x11e58 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11e6a:	8b e8       	ldi	r24, 0x8B	; 139
   11e6c:	93 e1       	ldi	r25, 0x13	; 19
   11e6e:	ec cf       	rjmp	.-40     	; 0x11e48 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11e70:	88 31       	cpi	r24, 0x18	; 24
   11e72:	d9 f4       	brne	.+54     	; 0x11eaa <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11e74:	26 70       	andi	r18, 0x06	; 6
   11e76:	33 27       	eor	r19, r19
   11e78:	23 2b       	or	r18, r19
   11e7a:	51 f0       	breq	.+20     	; 0x11e90 <GPIB+0x66>
            printf("[SPE]\n");
   11e7c:	84 e8       	ldi	r24, 0x84	; 132
   11e7e:	93 e1       	ldi	r25, 0x13	; 19
   11e80:	a0 e0       	ldi	r26, 0x00	; 0
   11e82:	ed b7       	in	r30, 0x3d	; 61
   11e84:	fe b7       	in	r31, 0x3e	; 62
   11e86:	81 83       	std	Z+1, r24	; 0x01
   11e88:	92 83       	std	Z+2, r25	; 0x02
   11e8a:	a3 83       	std	Z+3, r26	; 0x03
   11e8c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
        spoll = 1;
   11e90:	81 e0       	ldi	r24, 0x01	; 1
   11e92:	80 93 eb 1e 	sts	0x1EEB, r24	; 0x801eeb <spoll>
        if(SS80_is_MTA(talking))
   11e96:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11e9a:	90 e0       	ldi	r25, 0x00	; 0
   11e9c:	69 dd       	rcall	.-1326   	; 0x11970 <SS80_is_MTA>
   11e9e:	89 2b       	or	r24, r25
   11ea0:	09 f4       	brne	.+2      	; 0x11ea4 <GPIB+0x7a>
   11ea2:	7d c0       	rjmp	.+250    	; 0x11f9e <GPIB+0x174>
        {
            return( SS80_Report() );
   11ea4:	0e 94 ad ad 	call	0x15b5a	; 0x15b5a <SS80_Report>
   11ea8:	7c c0       	rjmp	.+248    	; 0x11fa2 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11eaa:	89 31       	cpi	r24, 0x19	; 25
   11eac:	39 f4       	brne	.+14     	; 0x11ebc <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11eae:	26 70       	andi	r18, 0x06	; 6
   11eb0:	33 27       	eor	r19, r19
   11eb2:	23 2b       	or	r18, r19
   11eb4:	89 f2       	breq	.-94     	; 0x11e58 <GPIB+0x2e>
            printf("[SPD]\n");
   11eb6:	8d e7       	ldi	r24, 0x7D	; 125
   11eb8:	93 e1       	ldi	r25, 0x13	; 19
   11eba:	c6 cf       	rjmp	.-116    	; 0x11e48 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11ebc:	84 30       	cpi	r24, 0x04	; 4
   11ebe:	09 f0       	breq	.+2      	; 0x11ec2 <GPIB+0x98>
   11ec0:	48 c0       	rjmp	.+144    	; 0x11f52 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11ec2:	22 ff       	sbrs	r18, 2
   11ec4:	0a c0       	rjmp	.+20     	; 0x11eda <GPIB+0xb0>
            printf("[SDC]\n");
   11ec6:	86 e7       	ldi	r24, 0x76	; 118
   11ec8:	93 e1       	ldi	r25, 0x13	; 19
   11eca:	a0 e0       	ldi	r26, 0x00	; 0
   11ecc:	ed b7       	in	r30, 0x3d	; 61
   11ece:	fe b7       	in	r31, 0x3e	; 62
   11ed0:	81 83       	std	Z+1, r24	; 0x01
   11ed2:	92 83       	std	Z+2, r25	; 0x02
   11ed4:	a3 83       	std	Z+3, r26	; 0x03
   11ed6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11eda:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11ede:	90 e0       	ldi	r25, 0x00	; 0
   11ee0:	35 dd       	rcall	.-1430   	; 0x1194c <SS80_is_MLA>
   11ee2:	89 2b       	or	r24, r25
   11ee4:	d9 f0       	breq	.+54     	; 0x11f1c <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ee6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11eea:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11eee:	84 72       	andi	r24, 0x24	; 36
   11ef0:	99 27       	eor	r25, r25
   11ef2:	89 2b       	or	r24, r25
   11ef4:	51 f0       	breq	.+20     	; 0x11f0a <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11ef6:	8a e6       	ldi	r24, 0x6A	; 106
   11ef8:	93 e1       	ldi	r25, 0x13	; 19
   11efa:	a0 e0       	ldi	r26, 0x00	; 0
   11efc:	ed b7       	in	r30, 0x3d	; 61
   11efe:	fe b7       	in	r31, 0x3e	; 62
   11f00:	81 83       	std	Z+1, r24	; 0x01
   11f02:	92 83       	std	Z+2, r25	; 0x02
   11f04:	a3 83       	std	Z+3, r26	; 0x03
   11f06:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11f0a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   11f0e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   11f12:	85 81       	ldd	r24, Z+5	; 0x05
   11f14:	90 e0       	ldi	r25, 0x00	; 0
   11f16:	0e 94 7f ae 	call	0x15cfe	; 0x15cfe <SS80_Selected_Device_Clear>
   11f1a:	43 c0       	rjmp	.+134    	; 0x11fa2 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11f1c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11f20:	90 e0       	ldi	r25, 0x00	; 0
   11f22:	4a dd       	rcall	.-1388   	; 0x119b8 <AMIGO_is_MLA>
   11f24:	89 2b       	or	r24, r25
   11f26:	d9 f1       	breq	.+118    	; 0x11f9e <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f2c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f30:	84 72       	andi	r24, 0x24	; 36
   11f32:	99 27       	eor	r25, r25
   11f34:	89 2b       	or	r24, r25
   11f36:	51 f0       	breq	.+20     	; 0x11f4c <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11f38:	8d e5       	ldi	r24, 0x5D	; 93
   11f3a:	93 e1       	ldi	r25, 0x13	; 19
   11f3c:	a0 e0       	ldi	r26, 0x00	; 0
   11f3e:	ed b7       	in	r30, 0x3d	; 61
   11f40:	fe b7       	in	r31, 0x3e	; 62
   11f42:	81 83       	std	Z+1, r24	; 0x01
   11f44:	92 83       	std	Z+2, r25	; 0x02
   11f46:	a3 83       	std	Z+3, r26	; 0x03
   11f48:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11f4c:	0e 94 ba b8 	call	0x17174	; 0x17174 <amigo_cmd_clear>
   11f50:	28 c0       	rjmp	.+80     	; 0x11fa2 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11f52:	84 31       	cpi	r24, 0x14	; 20
   11f54:	99 f4       	brne	.+38     	; 0x11f7c <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f56:	22 ff       	sbrs	r18, 2
   11f58:	0a c0       	rjmp	.+20     	; 0x11f6e <GPIB+0x144>
            printf("[DCL]\n");
   11f5a:	86 e5       	ldi	r24, 0x56	; 86
   11f5c:	93 e1       	ldi	r25, 0x13	; 19
   11f5e:	a0 e0       	ldi	r26, 0x00	; 0
   11f60:	ed b7       	in	r30, 0x3d	; 61
   11f62:	fe b7       	in	r31, 0x3e	; 62
   11f64:	81 83       	std	Z+1, r24	; 0x01
   11f66:	92 83       	std	Z+2, r25	; 0x02
   11f68:	a3 83       	std	Z+3, r26	; 0x03
   11f6a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11f6e:	0e 94 71 ae 	call	0x15ce2	; 0x15ce2 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11f72:	0e 94 ba b8 	call	0x17174	; 0x17174 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11f76:	0e 94 d9 be 	call	0x17db2	; 0x17db2 <printer_close>
   11f7a:	11 c0       	rjmp	.+34     	; 0x11f9e <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11f7c:	25 71       	andi	r18, 0x15	; 21
   11f7e:	33 27       	eor	r19, r19
   11f80:	23 2b       	or	r18, r19
   11f82:	69 f0       	breq	.+26     	; 0x11f9e <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11f84:	90 e0       	ldi	r25, 0x00	; 0
   11f86:	ed b7       	in	r30, 0x3d	; 61
   11f88:	fe b7       	in	r31, 0x3e	; 62
   11f8a:	95 83       	std	Z+5, r25	; 0x05
   11f8c:	84 83       	std	Z+4, r24	; 0x04
   11f8e:	85 e3       	ldi	r24, 0x35	; 53
   11f90:	93 e1       	ldi	r25, 0x13	; 19
   11f92:	a0 e0       	ldi	r26, 0x00	; 0
   11f94:	81 83       	std	Z+1, r24	; 0x01
   11f96:	92 83       	std	Z+2, r25	; 0x02
   11f98:	a3 83       	std	Z+3, r26	; 0x03
   11f9a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    return(0);
   11f9e:	80 e0       	ldi	r24, 0x00	; 0
   11fa0:	90 e0       	ldi	r25, 0x00	; 0
}
   11fa2:	0f 90       	pop	r0
   11fa4:	0f 90       	pop	r0
   11fa6:	0f 90       	pop	r0
   11fa8:	0f 90       	pop	r0
   11faa:	0f 90       	pop	r0
   11fac:	08 95       	ret

00011fae <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11fae:	cf 93       	push	r28
   11fb0:	df 93       	push	r29
   11fb2:	00 d0       	rcall	.+0      	; 0x11fb4 <GPIB_TALK+0x6>
   11fb4:	00 d0       	rcall	.+0      	; 0x11fb6 <GPIB_TALK+0x8>
   11fb6:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11fb8:	90 91 ee 1e 	lds	r25, 0x1EEE	; 0x801eee <talking>
   11fbc:	90 93 f1 1e 	sts	0x1EF1, r25	; 0x801ef1 <talking_last>
    talking = ch;
   11fc0:	80 93 ee 1e 	sts	0x1EEE, r24	; 0x801eee <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11fc4:	8f 35       	cpi	r24, 0x5F	; 95
   11fc6:	79 f4       	brne	.+30     	; 0x11fe6 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11fc8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fcc:	82 ff       	sbrs	r24, 2
   11fce:	7f c0       	rjmp	.+254    	; 0x120ce <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11fd0:	82 ee       	ldi	r24, 0xE2	; 226
   11fd2:	92 e1       	ldi	r25, 0x12	; 18
   11fd4:	a0 e0       	ldi	r26, 0x00	; 0
   11fd6:	ed b7       	in	r30, 0x3d	; 61
   11fd8:	fe b7       	in	r31, 0x3e	; 62
   11fda:	81 83       	std	Z+1, r24	; 0x01
   11fdc:	92 83       	std	Z+2, r25	; 0x02
   11fde:	a3 83       	std	Z+3, r26	; 0x03
   11fe0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   11fe4:	74 c0       	rjmp	.+232    	; 0x120ce <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11fe6:	c8 2f       	mov	r28, r24
   11fe8:	d0 e0       	ldi	r29, 0x00	; 0
   11fea:	ce 01       	movw	r24, r28
   11fec:	c1 dc       	rcall	.-1662   	; 0x11970 <SS80_is_MTA>
   11fee:	89 2b       	or	r24, r25
   11ff0:	e1 f0       	breq	.+56     	; 0x1202a <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ff2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ff6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ffa:	84 72       	andi	r24, 0x24	; 36
   11ffc:	99 27       	eor	r25, r25
   11ffe:	89 2b       	or	r24, r25
   12000:	61 f0       	breq	.+24     	; 0x1201a <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   12002:	ed b7       	in	r30, 0x3d	; 61
   12004:	fe b7       	in	r31, 0x3e	; 62
   12006:	d5 83       	std	Z+5, r29	; 0x05
   12008:	c4 83       	std	Z+4, r28	; 0x04
   1200a:	81 ed       	ldi	r24, 0xD1	; 209
   1200c:	92 e1       	ldi	r25, 0x12	; 18
   1200e:	a0 e0       	ldi	r26, 0x00	; 0
   12010:	81 83       	std	Z+1, r24	; 0x01
   12012:	92 83       	std	Z+2, r25	; 0x02
   12014:	a3 83       	std	Z+3, r26	; 0x03
   12016:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif

        if (spoll)
   1201a:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <spoll>
   1201e:	88 23       	and	r24, r24
   12020:	09 f4       	brne	.+2      	; 0x12024 <GPIB_TALK+0x76>
   12022:	55 c0       	rjmp	.+170    	; 0x120ce <GPIB_TALK+0x120>
        {
            SS80_Report();
   12024:	0e 94 ad ad 	call	0x15b5a	; 0x15b5a <SS80_Report>
   12028:	52 c0       	rjmp	.+164    	; 0x120ce <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   1202a:	ce 01       	movw	r24, r28
   1202c:	d7 dc       	rcall	.-1618   	; 0x119dc <AMIGO_is_MTA>
   1202e:	89 2b       	or	r24, r25
   12030:	81 f0       	breq	.+32     	; 0x12052 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12032:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12036:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1203a:	84 72       	andi	r24, 0x24	; 36
   1203c:	99 27       	eor	r25, r25
   1203e:	89 2b       	or	r24, r25
   12040:	09 f4       	brne	.+2      	; 0x12044 <GPIB_TALK+0x96>
   12042:	45 c0       	rjmp	.+138    	; 0x120ce <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   12044:	ed b7       	in	r30, 0x3d	; 61
   12046:	fe b7       	in	r31, 0x3e	; 62
   12048:	d5 83       	std	Z+5, r29	; 0x05
   1204a:	c4 83       	std	Z+4, r28	; 0x04
   1204c:	8f eb       	ldi	r24, 0xBF	; 191
   1204e:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   12050:	38 c0       	rjmp	.+112    	; 0x120c2 <GPIB_TALK+0x114>
   12052:	ce 01       	movw	r24, r28
   12054:	f9 dc       	rcall	.-1550   	; 0x11a48 <PRINTER_is_MTA>
   12056:	89 2b       	or	r24, r25
   12058:	79 f0       	breq	.+30     	; 0x12078 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1205a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1205e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12062:	84 72       	andi	r24, 0x24	; 36
   12064:	99 27       	eor	r25, r25
   12066:	89 2b       	or	r24, r25
   12068:	91 f1       	breq	.+100    	; 0x120ce <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   1206a:	ed b7       	in	r30, 0x3d	; 61
   1206c:	fe b7       	in	r31, 0x3e	; 62
   1206e:	d5 83       	std	Z+5, r29	; 0x05
   12070:	c4 83       	std	Z+4, r28	; 0x04
   12072:	8b ea       	ldi	r24, 0xAB	; 171
   12074:	92 e1       	ldi	r25, 0x12	; 18
   12076:	25 c0       	rjmp	.+74     	; 0x120c2 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   12078:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1207c:	90 e0       	ldi	r25, 0x00	; 0
   1207e:	d2 dc       	rcall	.-1628   	; 0x11a24 <PRINTER_is_MLA>
   12080:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12084:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12088:	89 2b       	or	r24, r25
   1208a:	99 f0       	breq	.+38     	; 0x120b2 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1208c:	24 72       	andi	r18, 0x24	; 36
   1208e:	33 27       	eor	r19, r19
   12090:	23 2b       	or	r18, r19
   12092:	51 f0       	breq	.+20     	; 0x120a8 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   12094:	8b e9       	ldi	r24, 0x9B	; 155
   12096:	92 e1       	ldi	r25, 0x12	; 18
   12098:	a0 e0       	ldi	r26, 0x00	; 0
   1209a:	ed b7       	in	r30, 0x3d	; 61
   1209c:	fe b7       	in	r31, 0x3e	; 62
   1209e:	81 83       	std	Z+1, r24	; 0x01
   120a0:	92 83       	std	Z+2, r25	; 0x02
   120a2:	a3 83       	std	Z+3, r26	; 0x03
   120a4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printer_open(NULL);
   120a8:	80 e0       	ldi	r24, 0x00	; 0
   120aa:	90 e0       	ldi	r25, 0x00	; 0
   120ac:	0e 94 31 bf 	call	0x17e62	; 0x17e62 <printer_open>
   120b0:	0e c0       	rjmp	.+28     	; 0x120ce <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   120b2:	22 ff       	sbrs	r18, 2
   120b4:	0c c0       	rjmp	.+24     	; 0x120ce <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   120b6:	ed b7       	in	r30, 0x3d	; 61
   120b8:	fe b7       	in	r31, 0x3e	; 62
   120ba:	d5 83       	std	Z+5, r29	; 0x05
   120bc:	c4 83       	std	Z+4, r28	; 0x04
   120be:	8f e8       	ldi	r24, 0x8F	; 143
   120c0:	92 e1       	ldi	r25, 0x12	; 18
   120c2:	a0 e0       	ldi	r26, 0x00	; 0
   120c4:	81 83       	std	Z+1, r24	; 0x01
   120c6:	92 83       	std	Z+2, r25	; 0x02
   120c8:	a3 83       	std	Z+3, r26	; 0x03
   120ca:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   120ce:	80 e0       	ldi	r24, 0x00	; 0
   120d0:	90 e0       	ldi	r25, 0x00	; 0
   120d2:	cd b7       	in	r28, 0x3d	; 61
   120d4:	de b7       	in	r29, 0x3e	; 62
   120d6:	25 96       	adiw	r28, 0x05	; 5
   120d8:	e2 e0       	ldi	r30, 0x02	; 2
   120da:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

000120de <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   120de:	a9 e0       	ldi	r26, 0x09	; 9
   120e0:	b0 e0       	ldi	r27, 0x00	; 0
   120e2:	e5 e7       	ldi	r30, 0x75	; 117
   120e4:	f0 e9       	ldi	r31, 0x90	; 144
   120e6:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__prologue_saves__+0x1e>
   120ea:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   120ec:	c8 2f       	mov	r28, r24
   120ee:	d0 e0       	ldi	r29, 0x00	; 0
   120f0:	ce 01       	movw	r24, r28
   120f2:	50 dc       	rcall	.-1888   	; 0x11994 <SS80_is_MSA>
   120f4:	89 2b       	or	r24, r25
   120f6:	09 f1       	breq	.+66     	; 0x1213a <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120fc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12100:	84 72       	andi	r24, 0x24	; 36
   12102:	99 27       	eor	r25, r25
   12104:	89 2b       	or	r24, r25
   12106:	61 f0       	breq	.+24     	; 0x12120 <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   12108:	ed b7       	in	r30, 0x3d	; 61
   1210a:	fe b7       	in	r31, 0x3e	; 62
   1210c:	d5 83       	std	Z+5, r29	; 0x05
   1210e:	c4 83       	std	Z+4, r28	; 0x04
   12110:	8e e7       	ldi	r24, 0x7E	; 126
   12112:	92 e1       	ldi	r25, 0x12	; 18
   12114:	a0 e0       	ldi	r26, 0x00	; 0
   12116:	81 83       	std	Z+1, r24	; 0x01
   12118:	92 83       	std	Z+2, r25	; 0x02
   1211a:	a3 83       	std	Z+3, r26	; 0x03
   1211c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   12120:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   12124:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   12128:	81 81       	ldd	r24, Z+1	; 0x01
   1212a:	90 e0       	ldi	r25, 0x00	; 0
   1212c:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   12130:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   12134:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   12138:	25 c0       	rjmp	.+74     	; 0x12184 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   1213a:	ce 01       	movw	r24, r28
   1213c:	61 dc       	rcall	.-1854   	; 0x11a00 <AMIGO_is_MSA>
   1213e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12142:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12146:	89 2b       	or	r24, r25
   12148:	11 f1       	breq	.+68     	; 0x1218e <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1214a:	c9 01       	movw	r24, r18
   1214c:	84 72       	andi	r24, 0x24	; 36
   1214e:	99 27       	eor	r25, r25
   12150:	89 2b       	or	r24, r25
   12152:	61 f0       	breq	.+24     	; 0x1216c <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   12154:	ed b7       	in	r30, 0x3d	; 61
   12156:	fe b7       	in	r31, 0x3e	; 62
   12158:	d5 83       	std	Z+5, r29	; 0x05
   1215a:	c4 83       	std	Z+4, r28	; 0x04
   1215c:	8c e6       	ldi	r24, 0x6C	; 108
   1215e:	92 e1       	ldi	r25, 0x12	; 18
   12160:	a0 e0       	ldi	r26, 0x00	; 0
   12162:	81 83       	std	Z+1, r24	; 0x01
   12164:	92 83       	std	Z+2, r25	; 0x02
   12166:	a3 83       	std	Z+3, r26	; 0x03
   12168:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1216c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   12170:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   12174:	81 81       	ldd	r24, Z+1	; 0x01
   12176:	90 e0       	ldi	r25, 0x00	; 0
   12178:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   1217c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   12180:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   12184:	66 81       	ldd	r22, Z+6	; 0x06
   12186:	77 81       	ldd	r23, Z+7	; 0x07
   12188:	81 2f       	mov	r24, r17
   1218a:	ec dd       	rcall	.-1064   	; 0x11d64 <Send_Identify>
   1218c:	1d c0       	rjmp	.+58     	; 0x121c8 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1218e:	c9 01       	movw	r24, r18
   12190:	84 72       	andi	r24, 0x24	; 36
   12192:	99 27       	eor	r25, r25
   12194:	00 97       	sbiw	r24, 0x00	; 0
   12196:	c1 f0       	breq	.+48     	; 0x121c8 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12198:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1219c:	90 e0       	ldi	r25, 0x00	; 0
   1219e:	ed b7       	in	r30, 0x3d	; 61
   121a0:	fe b7       	in	r31, 0x3e	; 62
   121a2:	91 87       	std	Z+9, r25	; 0x09
   121a4:	80 87       	std	Z+8, r24	; 0x08
   121a6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   121aa:	90 e0       	ldi	r25, 0x00	; 0
   121ac:	97 83       	std	Z+7, r25	; 0x07
   121ae:	86 83       	std	Z+6, r24	; 0x06
   121b0:	d5 83       	std	Z+5, r29	; 0x05
   121b2:	c4 83       	std	Z+4, r28	; 0x04
   121b4:	86 e4       	ldi	r24, 0x46	; 70
   121b6:	92 e1       	ldi	r25, 0x12	; 18
   121b8:	a0 e0       	ldi	r26, 0x00	; 0
   121ba:	81 83       	std	Z+1, r24	; 0x01
   121bc:	92 83       	std	Z+2, r25	; 0x02
   121be:	a3 83       	std	Z+3, r26	; 0x03
   121c0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   121c4:	80 e0       	ldi	r24, 0x00	; 0
   121c6:	90 e0       	ldi	r25, 0x00	; 0
}
   121c8:	cd b7       	in	r28, 0x3d	; 61
   121ca:	de b7       	in	r29, 0x3e	; 62
   121cc:	29 96       	adiw	r28, 0x09	; 9
   121ce:	e3 e0       	ldi	r30, 0x03	; 3
   121d0:	0c 94 41 e7 	jmp	0x1ce82	; 0x1ce82 <__epilogue_restores__+0x1e>

000121d4 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   121d4:	00 d0       	rcall	.+0      	; 0x121d6 <listen_cleanup+0x2>
   121d6:	1f 92       	push	r1
    if(listening_last)
   121d8:	60 91 ea 1e 	lds	r22, 0x1EEA	; 0x801eea <listening_last>
   121dc:	66 23       	and	r22, r22
   121de:	e1 f0       	breq	.+56     	; 0x12218 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   121e0:	70 e0       	ldi	r23, 0x00	; 0
   121e2:	40 e2       	ldi	r20, 0x20	; 32
   121e4:	50 e0       	ldi	r21, 0x00	; 0
   121e6:	84 e0       	ldi	r24, 0x04	; 4
   121e8:	90 e0       	ldi	r25, 0x00	; 0
   121ea:	a7 d6       	rcall	.+3406   	; 0x12f3a <find_device>
        if(index == -1)
   121ec:	8f 3f       	cpi	r24, 0xFF	; 255
   121ee:	a1 f0       	breq	.+40     	; 0x12218 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121f4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121f8:	84 72       	andi	r24, 0x24	; 36
   121fa:	99 27       	eor	r25, r25
   121fc:	89 2b       	or	r24, r25
   121fe:	51 f0       	breq	.+20     	; 0x12214 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   12200:	85 e3       	ldi	r24, 0x35	; 53
   12202:	92 e1       	ldi	r25, 0x12	; 18
   12204:	a0 e0       	ldi	r26, 0x00	; 0
   12206:	ed b7       	in	r30, 0x3d	; 61
   12208:	fe b7       	in	r31, 0x3e	; 62
   1220a:	81 83       	std	Z+1, r24	; 0x01
   1220c:	92 83       	std	Z+2, r25	; 0x02
   1220e:	a3 83       	std	Z+3, r26	; 0x03
   12210:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printer_close();
   12214:	0e 94 d9 be 	call	0x17db2	; 0x17db2 <printer_close>
    }
}
   12218:	0f 90       	pop	r0
   1221a:	0f 90       	pop	r0
   1221c:	0f 90       	pop	r0
   1221e:	08 95       	ret

00012220 <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   12220:	cf 93       	push	r28
   12222:	df 93       	push	r29
   12224:	00 d0       	rcall	.+0      	; 0x12226 <GPIB_LISTEN+0x6>
   12226:	00 d0       	rcall	.+0      	; 0x12228 <GPIB_LISTEN+0x8>
   12228:	1f 92       	push	r1
   1222a:	c8 2f       	mov	r28, r24
    listening_last = listening;
   1222c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   12230:	80 93 ea 1e 	sts	0x1EEA, r24	; 0x801eea <listening_last>
    listening = ch;
   12234:	c0 93 f0 1e 	sts	0x1EF0, r28	; 0x801ef0 <listening>

    listen_cleanup();
   12238:	cd df       	rcall	.-102    	; 0x121d4 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   1223a:	cf 33       	cpi	r28, 0x3F	; 63
   1223c:	19 f5       	brne	.+70     	; 0x12284 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   1223e:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12242:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12246:	82 ff       	sbrs	r24, 2
   12248:	74 c0       	rjmp	.+232    	; 0x12332 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   1224a:	8e e2       	ldi	r24, 0x2E	; 46
   1224c:	93 e1       	ldi	r25, 0x13	; 19
   1224e:	a0 e0       	ldi	r26, 0x00	; 0
   12250:	ed b7       	in	r30, 0x3d	; 61
   12252:	fe b7       	in	r31, 0x3e	; 62
   12254:	81 83       	std	Z+1, r24	; 0x01
   12256:	92 83       	std	Z+2, r25	; 0x02
   12258:	a3 83       	std	Z+3, r26	; 0x03
   1225a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   1225e:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <lastcmd>
   12262:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   12266:	8f 35       	cpi	r24, 0x5F	; 95
   12268:	91 05       	cpc	r25, r1
   1226a:	09 f0       	breq	.+2      	; 0x1226e <GPIB_LISTEN+0x4e>
   1226c:	62 c0       	rjmp	.+196    	; 0x12332 <GPIB_LISTEN+0x112>
                printf("\n");
   1226e:	8c e2       	ldi	r24, 0x2C	; 44
   12270:	93 e1       	ldi	r25, 0x13	; 19
   12272:	a0 e0       	ldi	r26, 0x00	; 0
   12274:	ed b7       	in	r30, 0x3d	; 61
   12276:	fe b7       	in	r31, 0x3e	; 62
   12278:	81 83       	std	Z+1, r24	; 0x01
   1227a:	92 83       	std	Z+2, r25	; 0x02
   1227c:	a3 83       	std	Z+3, r26	; 0x03
   1227e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12282:	57 c0       	rjmp	.+174    	; 0x12332 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12284:	d0 e0       	ldi	r29, 0x00	; 0
   12286:	ce 01       	movw	r24, r28
   12288:	97 db       	rcall	.-2258   	; 0x119b8 <AMIGO_is_MLA>
   1228a:	89 2b       	or	r24, r25
   1228c:	81 f0       	breq	.+32     	; 0x122ae <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1228e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12292:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12296:	84 72       	andi	r24, 0x24	; 36
   12298:	99 27       	eor	r25, r25
   1229a:	89 2b       	or	r24, r25
   1229c:	09 f4       	brne	.+2      	; 0x122a0 <GPIB_LISTEN+0x80>
   1229e:	49 c0       	rjmp	.+146    	; 0x12332 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   122a0:	ed b7       	in	r30, 0x3d	; 61
   122a2:	fe b7       	in	r31, 0x3e	; 62
   122a4:	d5 83       	std	Z+5, r29	; 0x05
   122a6:	c4 83       	std	Z+4, r28	; 0x04
   122a8:	8a e1       	ldi	r24, 0x1A	; 26
   122aa:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   122ac:	3c c0       	rjmp	.+120    	; 0x12326 <GPIB_LISTEN+0x106>
   122ae:	ce 01       	movw	r24, r28
   122b0:	4d db       	rcall	.-2406   	; 0x1194c <SS80_is_MLA>
   122b2:	89 2b       	or	r24, r25
   122b4:	79 f0       	breq	.+30     	; 0x122d4 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   122b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122ba:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122be:	84 72       	andi	r24, 0x24	; 36
   122c0:	99 27       	eor	r25, r25
   122c2:	89 2b       	or	r24, r25
   122c4:	b1 f1       	breq	.+108    	; 0x12332 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   122c6:	ed b7       	in	r30, 0x3d	; 61
   122c8:	fe b7       	in	r31, 0x3e	; 62
   122ca:	d5 83       	std	Z+5, r29	; 0x05
   122cc:	c4 83       	std	Z+4, r28	; 0x04
   122ce:	89 e0       	ldi	r24, 0x09	; 9
   122d0:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   122d2:	29 c0       	rjmp	.+82     	; 0x12326 <GPIB_LISTEN+0x106>
   122d4:	ce 01       	movw	r24, r28
   122d6:	a6 db       	rcall	.-2228   	; 0x11a24 <PRINTER_is_MLA>
   122d8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   122dc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122e0:	89 2b       	or	r24, r25
   122e2:	c9 f0       	breq	.+50     	; 0x12316 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   122e4:	24 72       	andi	r18, 0x24	; 36
   122e6:	33 27       	eor	r19, r19
   122e8:	23 2b       	or	r18, r19
   122ea:	61 f0       	breq	.+24     	; 0x12304 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   122ec:	ed b7       	in	r30, 0x3d	; 61
   122ee:	fe b7       	in	r31, 0x3e	; 62
   122f0:	d5 83       	std	Z+5, r29	; 0x05
   122f2:	c4 83       	std	Z+4, r28	; 0x04
   122f4:	85 ef       	ldi	r24, 0xF5	; 245
   122f6:	92 e1       	ldi	r25, 0x12	; 18
   122f8:	a0 e0       	ldi	r26, 0x00	; 0
   122fa:	81 83       	std	Z+1, r24	; 0x01
   122fc:	92 83       	std	Z+2, r25	; 0x02
   122fe:	a3 83       	std	Z+3, r26	; 0x03
   12300:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
        if(talking != UNT)
   12304:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   12308:	8f 35       	cpi	r24, 0x5F	; 95
   1230a:	99 f0       	breq	.+38     	; 0x12332 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
// FIXME use printer structure to permit multiple printers
            printer_open(NULL);
   1230c:	80 e0       	ldi	r24, 0x00	; 0
   1230e:	90 e0       	ldi	r25, 0x00	; 0
   12310:	0e 94 31 bf 	call	0x17e62	; 0x17e62 <printer_open>
   12314:	0e c0       	rjmp	.+28     	; 0x12332 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12316:	22 ff       	sbrs	r18, 2
   12318:	0c c0       	rjmp	.+24     	; 0x12332 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   1231a:	ed b7       	in	r30, 0x3d	; 61
   1231c:	fe b7       	in	r31, 0x3e	; 62
   1231e:	d5 83       	std	Z+5, r29	; 0x05
   12320:	c4 83       	std	Z+4, r28	; 0x04
   12322:	89 ee       	ldi	r24, 0xE9	; 233
   12324:	92 e1       	ldi	r25, 0x12	; 18
   12326:	a0 e0       	ldi	r26, 0x00	; 0
   12328:	81 83       	std	Z+1, r24	; 0x01
   1232a:	92 83       	std	Z+2, r25	; 0x02
   1232c:	a3 83       	std	Z+3, r26	; 0x03
   1232e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   12332:	80 e0       	ldi	r24, 0x00	; 0
   12334:	90 e0       	ldi	r25, 0x00	; 0
   12336:	cd b7       	in	r28, 0x3d	; 61
   12338:	de b7       	in	r29, 0x3e	; 62
   1233a:	25 96       	adiw	r28, 0x05	; 5
   1233c:	e2 e0       	ldi	r30, 0x02	; 2
   1233e:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00012342 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   12342:	cf 93       	push	r28
   12344:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   12346:	92 db       	rcall	.-2268   	; 0x11a6c <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   12348:	10 92 61 19 	sts	0x1961, r1	; 0x801961 <gpib_log_fp+0x1>
   1234c:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   12350:	80 e0       	ldi	r24, 0x00	; 0
   12352:	90 e0       	ldi	r25, 0x00	; 0
   12354:	4f d8       	rcall	.-3938   	; 0x113f4 <gpib_read_byte>
   12356:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12358:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1235c:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   1235e:	02 c0       	rjmp	.+4      	; 0x12364 <gpib_task+0x22>
   12360:	ce 01       	movw	r24, r28
   12362:	4e d9       	rcall	.-3428   	; 0x11600 <gpib_decode>
#endif
        status = gpib_error_test(val);
   12364:	ce 01       	movw	r24, r28
   12366:	1d dc       	rcall	.-1990   	; 0x11ba2 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12368:	9c 01       	movw	r18, r24
   1236a:	23 70       	andi	r18, 0x03	; 3
   1236c:	33 27       	eor	r19, r19
   1236e:	23 2b       	or	r18, r19
   12370:	09 f0       	breq	.+2      	; 0x12374 <gpib_task+0x32>
   12372:	43 c0       	rjmp	.+134    	; 0x123fa <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12374:	89 2b       	or	r24, r25
   12376:	61 f7       	brne	.-40     	; 0x12350 <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12378:	d2 ff       	sbrs	r29, 2
   1237a:	26 c0       	rjmp	.+76     	; 0x123c8 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   1237c:	8c 2f       	mov	r24, r28
   1237e:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   12380:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   12382:	10 f4       	brcc	.+4      	; 0x12388 <gpib_task+0x46>
   12384:	52 dd       	rcall	.-1372   	; 0x11e2a <GPIB>
                continue;
   12386:	e4 cf       	rjmp	.-56     	; 0x12350 <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12388:	90 ee       	ldi	r25, 0xE0	; 224
   1238a:	98 0f       	add	r25, r24
   1238c:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   1238e:	10 f4       	brcc	.+4      	; 0x12394 <gpib_task+0x52>
   12390:	47 df       	rcall	.-370    	; 0x12220 <GPIB_LISTEN>
                continue;
   12392:	de cf       	rjmp	.-68     	; 0x12350 <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12394:	90 ec       	ldi	r25, 0xC0	; 192
   12396:	98 0f       	add	r25, r24
   12398:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   1239a:	10 f4       	brcc	.+4      	; 0x123a0 <gpib_task+0x5e>
   1239c:	08 de       	rcall	.-1008   	; 0x11fae <GPIB_TALK>
                continue;
   1239e:	d8 cf       	rjmp	.-80     	; 0x12350 <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   123a0:	90 91 f0 1e 	lds	r25, 0x1EF0	; 0x801ef0 <listening>
   123a4:	99 23       	and	r25, r25
   123a6:	59 f0       	breq	.+22     	; 0x123be <gpib_task+0x7c>
   123a8:	20 91 e8 1c 	lds	r18, 0x1CE8	; 0x801ce8 <lastcmd>
   123ac:	30 91 e9 1c 	lds	r19, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   123b0:	2f 35       	cpi	r18, 0x5F	; 95
   123b2:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   123b4:	21 f4       	brne	.+8      	; 0x123be <gpib_task+0x7c>
   123b6:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   123ba:	91 de       	rcall	.-734    	; 0x120de <GPIB_SECONDARY_ADDRESS>
                continue;
   123bc:	c9 cf       	rjmp	.-110    	; 0x12350 <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   123be:	80 93 ef 1e 	sts	0x1EEF, r24	; 0x801eef <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   123c2:	60 e0       	ldi	r22, 0x00	; 0
   123c4:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   123c6:	12 c0       	rjmp	.+36     	; 0x123ec <gpib_task+0xaa>
   123c8:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   123cc:	90 e0       	ldi	r25, 0x00	; 0
   123ce:	2a db       	rcall	.-2476   	; 0x11a24 <PRINTER_is_MLA>
   123d0:	89 2b       	or	r24, r25
   123d2:	29 f0       	breq	.+10     	; 0x123de <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   123d4:	ce 01       	movw	r24, r28
   123d6:	99 27       	eor	r25, r25
   123d8:	0e 94 d4 bf 	call	0x17fa8	; 0x17fa8 <printer_buffer>
                continue;
   123dc:	b9 cf       	rjmp	.-142    	; 0x12350 <gpib_task+0xe>
            }

            if(!secondary)
   123de:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
   123e2:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   123e4:	09 f4       	brne	.+2      	; 0x123e8 <gpib_task+0xa6>
   123e6:	b4 cf       	rjmp	.-152    	; 0x12350 <gpib_task+0xe>
   123e8:	61 e0       	ldi	r22, 0x01	; 1
   123ea:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   123ec:	67 dc       	rcall	.-1842   	; 0x11cbc <GPIB_COMMANDS>
   123ee:	d9 db       	rcall	.-2126   	; 0x11ba2 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   123f0:	83 70       	andi	r24, 0x03	; 3
   123f2:	99 27       	eor	r25, r25
   123f4:	89 2b       	or	r24, r25
   123f6:	09 f4       	brne	.+2      	; 0x123fa <gpib_task+0xb8>
   123f8:	ab cf       	rjmp	.-170    	; 0x12350 <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   123fa:	df 91       	pop	r29
   123fc:	cf 91       	pop	r28
   123fe:	08 95       	ret

00012400 <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   12400:	08 95       	ret

00012402 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12402:	cf 93       	push	r28
   12404:	df 93       	push	r29
   12406:	00 d0       	rcall	.+0      	; 0x12408 <gpib_help+0x6>
   12408:	1f 92       	push	r1
   1240a:	ec 01       	movw	r28, r24
    printf("gpib  help\n");
   1240c:	81 e3       	ldi	r24, 0x31	; 49
   1240e:	98 e1       	ldi	r25, 0x18	; 24
   12410:	a0 e0       	ldi	r26, 0x00	; 0
   12412:	ed b7       	in	r30, 0x3d	; 61
   12414:	fe b7       	in	r31, 0x3e	; 62
   12416:	81 83       	std	Z+1, r24	; 0x01
   12418:	92 83       	std	Z+2, r25	; 0x02
   1241a:	a3 83       	std	Z+3, r26	; 0x03
   1241c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    if(full)
   12420:	cd 2b       	or	r28, r29
   12422:	51 f0       	breq	.+20     	; 0x12438 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   12424:	86 ef       	ldi	r24, 0xF6	; 246
   12426:	94 e1       	ldi	r25, 0x14	; 20
   12428:	a0 e0       	ldi	r26, 0x00	; 0
   1242a:	ed b7       	in	r30, 0x3d	; 61
   1242c:	fe b7       	in	r31, 0x3e	; 62
   1242e:	81 83       	std	Z+1, r24	; 0x01
   12430:	92 83       	std	Z+2, r25	; 0x02
   12432:	a3 83       	std	Z+3, r26	; 0x03
   12434:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
			"     Example: gpib mount PRINTER 5\n"
			"gpib umount address"
			"     Example: gpib umount 6\n"
            );
    }
}
   12438:	cd b7       	in	r28, 0x3d	; 61
   1243a:	de b7       	in	r29, 0x3e	; 62
   1243c:	23 96       	adiw	r28, 0x03	; 3
   1243e:	e2 e0       	ldi	r30, 0x02	; 2
   12440:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00012444 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12444:	a5 e0       	ldi	r26, 0x05	; 5
   12446:	b0 e0       	ldi	r27, 0x00	; 0
   12448:	e8 e2       	ldi	r30, 0x28	; 40
   1244a:	f2 e9       	ldi	r31, 0x92	; 146
   1244c:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12450:	fb 01       	movw	r30, r22
   12452:	e0 80       	ld	r14, Z
   12454:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12456:	e1 14       	cp	r14, r1
   12458:	f1 04       	cpc	r15, r1
   1245a:	19 f4       	brne	.+6      	; 0x12462 <gpib_tests+0x1e>
        return(0);
   1245c:	80 e0       	ldi	r24, 0x00	; 0
   1245e:	90 e0       	ldi	r25, 0x00	; 0
   12460:	f1 c0       	rjmp	.+482    	; 0x12644 <gpib_tests+0x200>
   12462:	6b 01       	movw	r12, r22
   12464:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12466:	66 ea       	ldi	r22, 0xA6	; 166
   12468:	7d e0       	ldi	r23, 0x0D	; 13
   1246a:	c7 01       	movw	r24, r14
   1246c:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   12470:	89 2b       	or	r24, r25
   12472:	a1 f0       	breq	.+40     	; 0x1249c <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12474:	f6 01       	movw	r30, r12
   12476:	e2 80       	ldd	r14, Z+2	; 0x02
   12478:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1247a:	e1 14       	cp	r14, r1
   1247c:	f1 04       	cpc	r15, r1
   1247e:	21 f4       	brne	.+8      	; 0x12488 <gpib_tests+0x44>
        {
            gpib_help(1);
   12480:	81 e0       	ldi	r24, 0x01	; 1
   12482:	90 e0       	ldi	r25, 0x00	; 0
   12484:	be df       	rcall	.-132    	; 0x12402 <gpib_help>
   12486:	dc c0       	rjmp	.+440    	; 0x12640 <gpib_tests+0x1fc>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12488:	6d e6       	ldi	r22, 0x6D	; 109
   1248a:	76 e1       	ldi	r23, 0x16	; 22
   1248c:	c7 01       	movw	r24, r14
   1248e:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   12492:	89 2b       	or	r24, r25
   12494:	a9 f7       	brne	.-22     	; 0x12480 <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12496:	c2 e0       	ldi	r28, 0x02	; 2
   12498:	d0 e0       	ldi	r29, 0x00	; 0
   1249a:	02 c0       	rjmp	.+4      	; 0x124a0 <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1249c:	c1 e0       	ldi	r28, 0x01	; 1
   1249e:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   124a0:	6b ea       	ldi	r22, 0xAB	; 171
   124a2:	7d e0       	ldi	r23, 0x0D	; 13
   124a4:	c7 01       	movw	r24, r14
   124a6:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   124aa:	89 2b       	or	r24, r25
   124ac:	29 f1       	breq	.+74     	; 0x124f8 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   124ae:	fe 01       	movw	r30, r28
   124b0:	ee 0f       	add	r30, r30
   124b2:	ff 1f       	adc	r31, r31
   124b4:	ec 0d       	add	r30, r12
   124b6:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   124b8:	01 90       	ld	r0, Z+
   124ba:	f0 81       	ld	r31, Z
   124bc:	e0 2d       	mov	r30, r0
   124be:	80 81       	ld	r24, Z
   124c0:	8d 33       	cpi	r24, 0x3D	; 61
   124c2:	09 f4       	brne	.+2      	; 0x124c6 <gpib_tests+0x82>
            ++ind;
   124c4:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   124c6:	cc 0f       	add	r28, r28
   124c8:	dd 1f       	adc	r29, r29
   124ca:	cc 0d       	add	r28, r12
   124cc:	dd 1d       	adc	r29, r13
   124ce:	88 81       	ld	r24, Y
   124d0:	99 81       	ldd	r25, Y+1	; 0x01
   124d2:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   124d6:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   124da:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   124de:	ed b7       	in	r30, 0x3d	; 61
   124e0:	fe b7       	in	r31, 0x3e	; 62
   124e2:	75 83       	std	Z+5, r23	; 0x05
   124e4:	64 83       	std	Z+4, r22	; 0x04
   124e6:	89 ee       	ldi	r24, 0xE9	; 233
   124e8:	94 e1       	ldi	r25, 0x14	; 20
   124ea:	a0 e0       	ldi	r26, 0x00	; 0
   124ec:	81 83       	std	Z+1, r24	; 0x01
   124ee:	92 83       	std	Z+2, r25	; 0x02
   124f0:	a3 83       	std	Z+3, r26	; 0x03
   124f2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   124f6:	a4 c0       	rjmp	.+328    	; 0x12640 <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   124f8:	62 eb       	ldi	r22, 0xB2	; 178
   124fa:	7d e0       	ldi	r23, 0x0D	; 13
   124fc:	c7 01       	movw	r24, r14
   124fe:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   12502:	89 2b       	or	r24, r25
   12504:	61 f0       	breq	.+24     	; 0x1251e <gpib_tests+0xda>
    {
		if(!mount(argc, argv))
   12506:	b6 01       	movw	r22, r12
   12508:	c5 01       	movw	r24, r10
   1250a:	0e 94 c3 a2 	call	0x14586	; 0x14586 <mount>
   1250e:	81 11       	cpse	r24, r1
   12510:	03 c0       	rjmp	.+6      	; 0x12518 <gpib_tests+0xd4>
			return(-1);
   12512:	8f ef       	ldi	r24, 0xFF	; 255
   12514:	9f ef       	ldi	r25, 0xFF	; 255
   12516:	96 c0       	rjmp	.+300    	; 0x12644 <gpib_tests+0x200>
#ifdef LCD_SUPPORT
    extern void update_drive_counts();
    update_drive_counts();
   12518:	0e 94 78 e4 	call	0x1c8f0	; 0x1c8f0 <update_drive_counts>
   1251c:	91 c0       	rjmp	.+290    	; 0x12640 <gpib_tests+0x1fc>
#endif

		return(1);
    }
    if (MATCHI(ptr,"umount") )
   1251e:	61 eb       	ldi	r22, 0xB1	; 177
   12520:	7d e0       	ldi	r23, 0x0D	; 13
   12522:	c7 01       	movw	r24, r14
   12524:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   12528:	89 2b       	or	r24, r25
   1252a:	29 f0       	breq	.+10     	; 0x12536 <gpib_tests+0xf2>
    {
		if(!umount(argc, argv))
   1252c:	b6 01       	movw	r22, r12
   1252e:	c5 01       	movw	r24, r10
   12530:	0e 94 09 9d 	call	0x13a12	; 0x13a12 <umount>
   12534:	ec cf       	rjmp	.-40     	; 0x1250e <gpib_tests+0xca>
    update_drive_counts();
#endif
		return(1);
	}

    if (MATCHI(ptr,"addresses") )
   12536:	68 eb       	ldi	r22, 0xB8	; 184
   12538:	7d e0       	ldi	r23, 0x0D	; 13
   1253a:	c7 01       	movw	r24, r14
   1253c:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   12540:	89 2b       	or	r24, r25
   12542:	c9 f0       	breq	.+50     	; 0x12576 <gpib_tests+0x132>
    {
        ptr = argv[ind];
   12544:	cc 0f       	add	r28, r28
   12546:	dd 1f       	adc	r29, r29
   12548:	cc 0d       	add	r28, r12
   1254a:	dd 1d       	adc	r29, r13
   1254c:	88 81       	ld	r24, Y
   1254e:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12550:	00 97       	sbiw	r24, 0x00	; 0
   12552:	69 f0       	breq	.+26     	; 0x1256e <gpib_tests+0x12a>
   12554:	fc 01       	movw	r30, r24
   12556:	20 81       	ld	r18, Z
   12558:	22 23       	and	r18, r18
   1255a:	49 f0       	breq	.+18     	; 0x1256e <gpib_tests+0x12a>
   1255c:	62 ec       	ldi	r22, 0xC2	; 194
   1255e:	7d e0       	ldi	r23, 0x0D	; 13
   12560:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   12564:	89 2b       	or	r24, r25
   12566:	19 f0       	breq	.+6      	; 0x1256e <gpib_tests+0x12a>
            display_Addresses(1);
   12568:	81 e0       	ldi	r24, 0x01	; 1
   1256a:	90 e0       	ldi	r25, 0x00	; 0
   1256c:	02 c0       	rjmp	.+4      	; 0x12572 <gpib_tests+0x12e>
        else
            display_Addresses(0);
   1256e:	80 e0       	ldi	r24, 0x00	; 0
   12570:	90 e0       	ldi	r25, 0x00	; 0
   12572:	47 d1       	rcall	.+654    	; 0x12802 <display_Addresses>
   12574:	65 c0       	rjmp	.+202    	; 0x12640 <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   12576:	65 ec       	ldi	r22, 0xC5	; 197
   12578:	7d e0       	ldi	r23, 0x0D	; 13
   1257a:	c7 01       	movw	r24, r14
   1257c:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   12580:	89 2b       	or	r24, r25
   12582:	c9 f0       	breq	.+50     	; 0x125b6 <gpib_tests+0x172>
    {
        ptr = argv[ind];
   12584:	cc 0f       	add	r28, r28
   12586:	dd 1f       	adc	r29, r29
   12588:	cc 0d       	add	r28, r12
   1258a:	dd 1d       	adc	r29, r13
   1258c:	88 81       	ld	r24, Y
   1258e:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12590:	00 97       	sbiw	r24, 0x00	; 0
   12592:	69 f0       	breq	.+26     	; 0x125ae <gpib_tests+0x16a>
   12594:	fc 01       	movw	r30, r24
   12596:	20 81       	ld	r18, Z
   12598:	22 23       	and	r18, r18
   1259a:	49 f0       	breq	.+18     	; 0x125ae <gpib_tests+0x16a>
   1259c:	62 ec       	ldi	r22, 0xC2	; 194
   1259e:	7d e0       	ldi	r23, 0x0D	; 13
   125a0:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   125a4:	89 2b       	or	r24, r25
   125a6:	19 f0       	breq	.+6      	; 0x125ae <gpib_tests+0x16a>
            display_Config(1);
   125a8:	81 e0       	ldi	r24, 0x01	; 1
   125aa:	90 e0       	ldi	r25, 0x00	; 0
   125ac:	02 c0       	rjmp	.+4      	; 0x125b2 <gpib_tests+0x16e>
        else
            display_Config(0);
   125ae:	80 e0       	ldi	r24, 0x00	; 0
   125b0:	90 e0       	ldi	r25, 0x00	; 0
   125b2:	fb d1       	rcall	.+1014   	; 0x129aa <display_Config>
   125b4:	45 c0       	rjmp	.+138    	; 0x12640 <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   125b6:	6c ec       	ldi	r22, 0xCC	; 204
   125b8:	7d e0       	ldi	r23, 0x0D	; 13
   125ba:	c7 01       	movw	r24, r14
   125bc:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   125c0:	89 2b       	or	r24, r25
   125c2:	19 f0       	breq	.+6      	; 0x125ca <gpib_tests+0x186>
    {
        gpib_timer_elapsed_begin();
   125c4:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
   125c8:	3b c0       	rjmp	.+118    	; 0x12640 <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   125ca:	6a ed       	ldi	r22, 0xDA	; 218
   125cc:	7d e0       	ldi	r23, 0x0D	; 13
   125ce:	c7 01       	movw	r24, r14
   125d0:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   125d4:	89 2b       	or	r24, r25
   125d6:	29 f0       	breq	.+10     	; 0x125e2 <gpib_tests+0x19e>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   125d8:	82 ee       	ldi	r24, 0xE2	; 226
   125da:	9d e0       	ldi	r25, 0x0D	; 13
   125dc:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
   125e0:	2f c0       	rjmp	.+94     	; 0x12640 <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   125e2:	60 ef       	ldi	r22, 0xF0	; 240
   125e4:	7d e0       	ldi	r23, 0x0D	; 13
   125e6:	c7 01       	movw	r24, r14
   125e8:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   125ec:	89 2b       	or	r24, r25
    {
        gpib_task();
   125ee:	11 f0       	breq	.+4      	; 0x125f4 <gpib_tests+0x1b0>
   125f0:	a8 de       	rcall	.-688    	; 0x12342 <gpib_task>
   125f2:	26 c0       	rjmp	.+76     	; 0x12640 <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   125f4:	8e 01       	movw	r16, r28
   125f6:	0f 5f       	subi	r16, 0xFF	; 255
   125f8:	1f 4f       	sbci	r17, 0xFF	; 255
   125fa:	95 01       	movw	r18, r10
   125fc:	a8 01       	movw	r20, r16
   125fe:	65 ef       	ldi	r22, 0xF5	; 245
   12600:	7d e0       	ldi	r23, 0x0D	; 13
   12602:	c7 01       	movw	r24, r14
   12604:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   12608:	89 2b       	or	r24, r25
   1260a:	09 f4       	brne	.+2      	; 0x1260e <gpib_tests+0x1ca>
   1260c:	27 cf       	rjmp	.-434    	; 0x1245c <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1260e:	00 0f       	add	r16, r16
   12610:	11 1f       	adc	r17, r17
   12612:	e6 01       	movw	r28, r12
   12614:	c0 0f       	add	r28, r16
   12616:	d1 1f       	adc	r29, r17
   12618:	88 81       	ld	r24, Y
   1261a:	99 81       	ldd	r25, Y+1	; 0x01
   1261c:	00 97       	sbiw	r24, 0x00	; 0
   1261e:	51 f0       	breq	.+20     	; 0x12634 <gpib_tests+0x1f0>
   12620:	6b ef       	ldi	r22, 0xFB	; 251
   12622:	7d e0       	ldi	r23, 0x0D	; 13
   12624:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12628:	61 e0       	ldi	r22, 0x01	; 1
   1262a:	70 e0       	ldi	r23, 0x00	; 0
   1262c:	89 2b       	or	r24, r25
   1262e:	21 f4       	brne	.+8      	; 0x12638 <gpib_tests+0x1f4>
   12630:	60 e0       	ldi	r22, 0x00	; 0
   12632:	02 c0       	rjmp	.+4      	; 0x12638 <gpib_tests+0x1f4>
   12634:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12636:	70 e0       	ldi	r23, 0x00	; 0
   12638:	22 97       	sbiw	r28, 0x02	; 2
   1263a:	88 81       	ld	r24, Y
   1263c:	99 81       	ldd	r25, Y+1	; 0x01
   1263e:	1f da       	rcall	.-3010   	; 0x11a7e <gpib_trace_task>
        return(1);
   12640:	81 e0       	ldi	r24, 0x01	; 1
   12642:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12644:	cd b7       	in	r28, 0x3d	; 61
   12646:	de b7       	in	r29, 0x3e	; 62
   12648:	25 96       	adiw	r28, 0x05	; 5
   1264a:	ea e0       	ldi	r30, 0x0A	; 10
   1264c:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

00012650 <tok_index>:

	if(index_ppr(ppr) == -1)
		return(1);
	printf("WARNING PPR (%d) already in use\n", (int)ppr);
	return(0);
}
   12650:	0f 93       	push	r16
   12652:	1f 93       	push	r17
   12654:	cf 93       	push	r28
   12656:	8c 01       	movw	r16, r24
   12658:	c0 e0       	ldi	r28, 0x00	; 0
   1265a:	24 e0       	ldi	r18, 0x04	; 4
   1265c:	c2 02       	muls	r28, r18
   1265e:	f0 01       	movw	r30, r0
   12660:	11 24       	eor	r1, r1
   12662:	ec 53       	subi	r30, 0x3C	; 60
   12664:	fe 4f       	sbci	r31, 0xFE	; 254
   12666:	82 81       	ldd	r24, Z+2	; 0x02
   12668:	93 81       	ldd	r25, Z+3	; 0x03
   1266a:	01 96       	adiw	r24, 0x01	; 1
   1266c:	49 f0       	breq	.+18     	; 0x12680 <tok_index+0x30>
   1266e:	60 81       	ld	r22, Z
   12670:	71 81       	ldd	r23, Z+1	; 0x01
   12672:	c8 01       	movw	r24, r16
   12674:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   12678:	89 2b       	or	r24, r25
   1267a:	21 f4       	brne	.+8      	; 0x12684 <tok_index+0x34>
   1267c:	cf 5f       	subi	r28, 0xFF	; 255
   1267e:	ed cf       	rjmp	.-38     	; 0x1265a <tok_index+0xa>
   12680:	8f ef       	ldi	r24, 0xFF	; 255
   12682:	01 c0       	rjmp	.+2      	; 0x12686 <tok_index+0x36>
   12684:	8c 2f       	mov	r24, r28
   12686:	cf 91       	pop	r28
   12688:	1f 91       	pop	r17
   1268a:	0f 91       	pop	r16
   1268c:	08 95       	ret

0001268e <tok_name>:
   1268e:	e4 ec       	ldi	r30, 0xC4	; 196
   12690:	f1 e0       	ldi	r31, 0x01	; 1
   12692:	20 e0       	ldi	r18, 0x00	; 0
   12694:	30 e0       	ldi	r19, 0x00	; 0
   12696:	90 e0       	ldi	r25, 0x00	; 0
   12698:	42 81       	ldd	r20, Z+2	; 0x02
   1269a:	53 81       	ldd	r21, Z+3	; 0x03
   1269c:	4f 3f       	cpi	r20, 0xFF	; 255
   1269e:	6f ef       	ldi	r22, 0xFF	; 255
   126a0:	56 07       	cpc	r21, r22
   126a2:	89 f0       	breq	.+34     	; 0x126c6 <tok_name+0x38>
   126a4:	34 96       	adiw	r30, 0x04	; 4
   126a6:	48 17       	cp	r20, r24
   126a8:	59 07       	cpc	r21, r25
   126aa:	51 f4       	brne	.+20     	; 0x126c0 <tok_name+0x32>
   126ac:	22 0f       	add	r18, r18
   126ae:	33 1f       	adc	r19, r19
   126b0:	22 0f       	add	r18, r18
   126b2:	33 1f       	adc	r19, r19
   126b4:	f9 01       	movw	r30, r18
   126b6:	ec 53       	subi	r30, 0x3C	; 60
   126b8:	fe 4f       	sbci	r31, 0xFE	; 254
   126ba:	80 81       	ld	r24, Z
   126bc:	91 81       	ldd	r25, Z+1	; 0x01
   126be:	08 95       	ret
   126c0:	2f 5f       	subi	r18, 0xFF	; 255
   126c2:	3f 4f       	sbci	r19, 0xFF	; 255
   126c4:	e9 cf       	rjmp	.-46     	; 0x12698 <tok_name+0xa>
   126c6:	80 e2       	ldi	r24, 0x20	; 32
   126c8:	9c e0       	ldi	r25, 0x0C	; 12
   126ca:	08 95       	ret

000126cc <print_tok_val>:
   126cc:	cf 92       	push	r12
   126ce:	df 92       	push	r13
   126d0:	ef 92       	push	r14
   126d2:	ff 92       	push	r15
   126d4:	0f 93       	push	r16
   126d6:	1f 93       	push	r17
   126d8:	cf 93       	push	r28
   126da:	ad b7       	in	r26, 0x3d	; 61
   126dc:	be b7       	in	r27, 0x3e	; 62
   126de:	1d 97       	sbiw	r26, 0x0d	; 13
   126e0:	0f b6       	in	r0, 0x3f	; 63
   126e2:	f8 94       	cli
   126e4:	be bf       	out	0x3e, r27	; 62
   126e6:	0f be       	out	0x3f, r0	; 63
   126e8:	ad bf       	out	0x3d, r26	; 61
   126ea:	c6 2f       	mov	r28, r22
   126ec:	69 01       	movw	r12, r18
   126ee:	7a 01       	movw	r14, r20
   126f0:	ce df       	rcall	.-100    	; 0x1268e <tok_name>
   126f2:	8c 01       	movw	r16, r24
   126f4:	cc 23       	and	r28, r28
   126f6:	31 f0       	breq	.+12     	; 0x12704 <print_tok_val+0x38>
   126f8:	80 e2       	ldi	r24, 0x20	; 32
   126fa:	90 e0       	ldi	r25, 0x00	; 0
   126fc:	0e 94 86 76 	call	0xed0c	; 0xed0c <putchar>
   12700:	c1 50       	subi	r28, 0x01	; 1
   12702:	f8 cf       	rjmp	.-16     	; 0x126f4 <print_tok_val+0x28>
   12704:	ed b7       	in	r30, 0x3d	; 61
   12706:	fe b7       	in	r31, 0x3e	; 62
   12708:	c2 86       	std	Z+10, r12	; 0x0a
   1270a:	d3 86       	std	Z+11, r13	; 0x0b
   1270c:	e4 86       	std	Z+12, r14	; 0x0c
   1270e:	f5 86       	std	Z+13, r15	; 0x0d
   12710:	c6 82       	std	Z+6, r12	; 0x06
   12712:	d7 82       	std	Z+7, r13	; 0x07
   12714:	e0 86       	std	Z+8, r14	; 0x08
   12716:	f1 86       	std	Z+9, r15	; 0x09
   12718:	15 83       	std	Z+5, r17	; 0x05
   1271a:	04 83       	std	Z+4, r16	; 0x04
   1271c:	8a e4       	ldi	r24, 0x4A	; 74
   1271e:	91 e2       	ldi	r25, 0x21	; 33
   12720:	a0 e0       	ldi	r26, 0x00	; 0
   12722:	81 83       	std	Z+1, r24	; 0x01
   12724:	92 83       	std	Z+2, r25	; 0x02
   12726:	a3 83       	std	Z+3, r26	; 0x03
   12728:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1272c:	ad b7       	in	r26, 0x3d	; 61
   1272e:	be b7       	in	r27, 0x3e	; 62
   12730:	1d 96       	adiw	r26, 0x0d	; 13
   12732:	0f b6       	in	r0, 0x3f	; 63
   12734:	f8 94       	cli
   12736:	be bf       	out	0x3e, r27	; 62
   12738:	0f be       	out	0x3f, r0	; 63
   1273a:	ad bf       	out	0x3d, r26	; 61
   1273c:	cf 91       	pop	r28
   1273e:	1f 91       	pop	r17
   12740:	0f 91       	pop	r16
   12742:	ff 90       	pop	r15
   12744:	ef 90       	pop	r14
   12746:	df 90       	pop	r13
   12748:	cf 90       	pop	r12
   1274a:	08 95       	ret

0001274c <print_tok_str>:
   1274c:	ef 92       	push	r14
   1274e:	ff 92       	push	r15
   12750:	0f 93       	push	r16
   12752:	1f 93       	push	r17
   12754:	cf 93       	push	r28
   12756:	ad b7       	in	r26, 0x3d	; 61
   12758:	be b7       	in	r27, 0x3e	; 62
   1275a:	17 97       	sbiw	r26, 0x07	; 7
   1275c:	0f b6       	in	r0, 0x3f	; 63
   1275e:	f8 94       	cli
   12760:	be bf       	out	0x3e, r27	; 62
   12762:	0f be       	out	0x3f, r0	; 63
   12764:	ad bf       	out	0x3d, r26	; 61
   12766:	c6 2f       	mov	r28, r22
   12768:	7a 01       	movw	r14, r20
   1276a:	91 df       	rcall	.-222    	; 0x1268e <tok_name>
   1276c:	8c 01       	movw	r16, r24
   1276e:	cc 23       	and	r28, r28
   12770:	31 f0       	breq	.+12     	; 0x1277e <print_tok_str+0x32>
   12772:	80 e2       	ldi	r24, 0x20	; 32
   12774:	90 e0       	ldi	r25, 0x00	; 0
   12776:	0e 94 86 76 	call	0xed0c	; 0xed0c <putchar>
   1277a:	c1 50       	subi	r28, 0x01	; 1
   1277c:	f8 cf       	rjmp	.-16     	; 0x1276e <print_tok_str+0x22>
   1277e:	ed b7       	in	r30, 0x3d	; 61
   12780:	fe b7       	in	r31, 0x3e	; 62
   12782:	f7 82       	std	Z+7, r15	; 0x07
   12784:	e6 82       	std	Z+6, r14	; 0x06
   12786:	15 83       	std	Z+5, r17	; 0x05
   12788:	04 83       	std	Z+4, r16	; 0x04
   1278a:	8e e3       	ldi	r24, 0x3E	; 62
   1278c:	91 e2       	ldi	r25, 0x21	; 33
   1278e:	a0 e0       	ldi	r26, 0x00	; 0
   12790:	81 83       	std	Z+1, r24	; 0x01
   12792:	92 83       	std	Z+2, r25	; 0x02
   12794:	a3 83       	std	Z+3, r26	; 0x03
   12796:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1279a:	ad b7       	in	r26, 0x3d	; 61
   1279c:	be b7       	in	r27, 0x3e	; 62
   1279e:	17 96       	adiw	r26, 0x07	; 7
   127a0:	0f b6       	in	r0, 0x3f	; 63
   127a2:	f8 94       	cli
   127a4:	be bf       	out	0x3e, r27	; 62
   127a6:	0f be       	out	0x3f, r0	; 63
   127a8:	ad bf       	out	0x3d, r26	; 61
   127aa:	cf 91       	pop	r28
   127ac:	1f 91       	pop	r17
   127ae:	0f 91       	pop	r16
   127b0:	ff 90       	pop	r15
   127b2:	ef 90       	pop	r14
   127b4:	08 95       	ret

000127b6 <print_tok>:
   127b6:	0f 93       	push	r16
   127b8:	1f 93       	push	r17
   127ba:	cf 93       	push	r28
   127bc:	00 d0       	rcall	.+0      	; 0x127be <print_tok+0x8>
   127be:	00 d0       	rcall	.+0      	; 0x127c0 <print_tok+0xa>
   127c0:	1f 92       	push	r1
   127c2:	c6 2f       	mov	r28, r22
   127c4:	64 df       	rcall	.-312    	; 0x1268e <tok_name>
   127c6:	8c 01       	movw	r16, r24
   127c8:	cc 23       	and	r28, r28
   127ca:	31 f0       	breq	.+12     	; 0x127d8 <print_tok+0x22>
   127cc:	80 e2       	ldi	r24, 0x20	; 32
   127ce:	90 e0       	ldi	r25, 0x00	; 0
   127d0:	0e 94 86 76 	call	0xed0c	; 0xed0c <putchar>
   127d4:	c1 50       	subi	r28, 0x01	; 1
   127d6:	f8 cf       	rjmp	.-16     	; 0x127c8 <print_tok+0x12>
   127d8:	ed b7       	in	r30, 0x3d	; 61
   127da:	fe b7       	in	r31, 0x3e	; 62
   127dc:	15 83       	std	Z+5, r17	; 0x05
   127de:	04 83       	std	Z+4, r16	; 0x04
   127e0:	8a e3       	ldi	r24, 0x3A	; 58
   127e2:	91 e2       	ldi	r25, 0x21	; 33
   127e4:	a0 e0       	ldi	r26, 0x00	; 0
   127e6:	81 83       	std	Z+1, r24	; 0x01
   127e8:	92 83       	std	Z+2, r25	; 0x02
   127ea:	a3 83       	std	Z+3, r26	; 0x03
   127ec:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   127f0:	0f 90       	pop	r0
   127f2:	0f 90       	pop	r0
   127f4:	0f 90       	pop	r0
   127f6:	0f 90       	pop	r0
   127f8:	0f 90       	pop	r0
   127fa:	cf 91       	pop	r28
   127fc:	1f 91       	pop	r17
   127fe:	0f 91       	pop	r16
   12800:	08 95       	ret

00012802 <display_Addresses>:
   12802:	2f 92       	push	r2
   12804:	3f 92       	push	r3
   12806:	4f 92       	push	r4
   12808:	6f 92       	push	r6
   1280a:	7f 92       	push	r7
   1280c:	8f 92       	push	r8
   1280e:	cf 92       	push	r12
   12810:	df 92       	push	r13
   12812:	ef 92       	push	r14
   12814:	0f 93       	push	r16
   12816:	1f 93       	push	r17
   12818:	cf 93       	push	r28
   1281a:	df 93       	push	r29
   1281c:	cd b7       	in	r28, 0x3d	; 61
   1281e:	de b7       	in	r29, 0x3e	; 62
   12820:	2a 97       	sbiw	r28, 0x0a	; 10
   12822:	0f b6       	in	r0, 0x3f	; 63
   12824:	f8 94       	cli
   12826:	de bf       	out	0x3e, r29	; 62
   12828:	0f be       	out	0x3f, r0	; 63
   1282a:	cd bf       	out	0x3d, r28	; 61
   1282c:	84 e0       	ldi	r24, 0x04	; 4
   1282e:	9e e1       	ldi	r25, 0x1E	; 30
   12830:	a0 e0       	ldi	r26, 0x00	; 0
   12832:	ed b7       	in	r30, 0x3d	; 61
   12834:	fe b7       	in	r31, 0x3e	; 62
   12836:	81 83       	std	Z+1, r24	; 0x01
   12838:	92 83       	std	Z+2, r25	; 0x02
   1283a:	a3 83       	std	Z+3, r26	; 0x03
   1283c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12840:	04 ef       	ldi	r16, 0xF4	; 244
   12842:	1e e1       	ldi	r17, 0x1E	; 30
   12844:	86 ee       	ldi	r24, 0xE6	; 230
   12846:	9d e1       	ldi	r25, 0x1D	; 29
   12848:	6c 01       	movw	r12, r24
   1284a:	e1 2c       	mov	r14, r1
   1284c:	88 ee       	ldi	r24, 0xE8	; 232
   1284e:	9d e1       	ldi	r25, 0x1D	; 29
   12850:	3c 01       	movw	r6, r24
   12852:	81 2c       	mov	r8, r1
   12854:	81 ef       	ldi	r24, 0xF1	; 241
   12856:	9d e1       	ldi	r25, 0x1D	; 29
   12858:	1c 01       	movw	r2, r24
   1285a:	41 2c       	mov	r4, r1
   1285c:	8b ef       	ldi	r24, 0xFB	; 251
   1285e:	9d e1       	ldi	r25, 0x1D	; 29
   12860:	9c 01       	movw	r18, r24
   12862:	40 e0       	ldi	r20, 0x00	; 0
   12864:	2e 83       	std	Y+6, r18	; 0x06
   12866:	3f 83       	std	Y+7, r19	; 0x07
   12868:	48 87       	std	Y+8, r20	; 0x08
   1286a:	f8 01       	movw	r30, r16
   1286c:	80 81       	ld	r24, Z
   1286e:	88 23       	and	r24, r24
   12870:	09 f4       	brne	.+2      	; 0x12874 <display_Addresses+0x72>
   12872:	76 c0       	rjmp	.+236    	; 0x12960 <display_Addresses+0x15e>
   12874:	83 30       	cpi	r24, 0x03	; 3
   12876:	21 f0       	breq	.+8      	; 0x12880 <display_Addresses+0x7e>
   12878:	81 30       	cpi	r24, 0x01	; 1
   1287a:	09 f0       	breq	.+2      	; 0x1287e <display_Addresses+0x7c>
   1287c:	57 c0       	rjmp	.+174    	; 0x1292c <display_Addresses+0x12a>
   1287e:	1f c0       	rjmp	.+62     	; 0x128be <display_Addresses+0xbc>
   12880:	f8 01       	movw	r30, r16
   12882:	87 81       	ldd	r24, Z+7	; 0x07
   12884:	90 85       	ldd	r25, Z+8	; 0x08
   12886:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   1288a:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   1288e:	fc 01       	movw	r30, r24
   12890:	84 81       	ldd	r24, Z+4	; 0x04
   12892:	95 81       	ldd	r25, Z+5	; 0x05
   12894:	ed b7       	in	r30, 0x3d	; 61
   12896:	fe b7       	in	r31, 0x3e	; 62
   12898:	95 83       	std	Z+5, r25	; 0x05
   1289a:	84 83       	std	Z+4, r24	; 0x04
   1289c:	2e 81       	ldd	r18, Y+6	; 0x06
   1289e:	3f 81       	ldd	r19, Y+7	; 0x07
   128a0:	48 85       	ldd	r20, Y+8	; 0x08
   128a2:	21 83       	std	Z+1, r18	; 0x01
   128a4:	32 83       	std	Z+2, r19	; 0x02
   128a6:	43 83       	std	Z+3, r20	; 0x03
   128a8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   128ac:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   128b0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   128b4:	42 81       	ldd	r20, Z+2	; 0x02
   128b6:	53 81       	ldd	r21, Z+3	; 0x03
   128b8:	64 e0       	ldi	r22, 0x04	; 4
   128ba:	82 e1       	ldi	r24, 0x12	; 18
   128bc:	47 df       	rcall	.-370    	; 0x1274c <print_tok_str>
   128be:	f8 01       	movw	r30, r16
   128c0:	80 81       	ld	r24, Z
   128c2:	81 30       	cpi	r24, 0x01	; 1
   128c4:	d9 f4       	brne	.+54     	; 0x128fc <display_Addresses+0xfa>
   128c6:	87 81       	ldd	r24, Z+7	; 0x07
   128c8:	90 85       	ldd	r25, Z+8	; 0x08
   128ca:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   128ce:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   128d2:	fc 01       	movw	r30, r24
   128d4:	84 81       	ldd	r24, Z+4	; 0x04
   128d6:	95 81       	ldd	r25, Z+5	; 0x05
   128d8:	ed b7       	in	r30, 0x3d	; 61
   128da:	fe b7       	in	r31, 0x3e	; 62
   128dc:	95 83       	std	Z+5, r25	; 0x05
   128de:	84 83       	std	Z+4, r24	; 0x04
   128e0:	21 82       	std	Z+1, r2	; 0x01
   128e2:	32 82       	std	Z+2, r3	; 0x02
   128e4:	43 82       	std	Z+3, r4	; 0x03
   128e6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   128ea:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   128ee:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   128f2:	42 81       	ldd	r20, Z+2	; 0x02
   128f4:	53 81       	ldd	r21, Z+3	; 0x03
   128f6:	64 e0       	ldi	r22, 0x04	; 4
   128f8:	82 e1       	ldi	r24, 0x12	; 18
   128fa:	28 df       	rcall	.-432    	; 0x1274c <print_tok_str>
   128fc:	f8 01       	movw	r30, r16
   128fe:	21 81       	ldd	r18, Z+1	; 0x01
   12900:	30 e0       	ldi	r19, 0x00	; 0
   12902:	40 e0       	ldi	r20, 0x00	; 0
   12904:	50 e0       	ldi	r21, 0x00	; 0
   12906:	64 e0       	ldi	r22, 0x04	; 4
   12908:	81 e0       	ldi	r24, 0x01	; 1
   1290a:	e0 de       	rcall	.-576    	; 0x126cc <print_tok_val>
   1290c:	f8 01       	movw	r30, r16
   1290e:	22 81       	ldd	r18, Z+2	; 0x02
   12910:	30 e0       	ldi	r19, 0x00	; 0
   12912:	40 e0       	ldi	r20, 0x00	; 0
   12914:	50 e0       	ldi	r21, 0x00	; 0
   12916:	64 e0       	ldi	r22, 0x04	; 4
   12918:	8f e1       	ldi	r24, 0x1F	; 31
   1291a:	d8 de       	rcall	.-592    	; 0x126cc <print_tok_val>
   1291c:	f8 01       	movw	r30, r16
   1291e:	23 81       	ldd	r18, Z+3	; 0x03
   12920:	34 81       	ldd	r19, Z+4	; 0x04
   12922:	45 81       	ldd	r20, Z+5	; 0x05
   12924:	56 81       	ldd	r21, Z+6	; 0x06
   12926:	64 e0       	ldi	r22, 0x04	; 4
   12928:	83 e0       	ldi	r24, 0x03	; 3
   1292a:	d0 de       	rcall	.-608    	; 0x126cc <print_tok_val>
   1292c:	f8 01       	movw	r30, r16
   1292e:	80 81       	ld	r24, Z
   12930:	84 30       	cpi	r24, 0x04	; 4
   12932:	79 f4       	brne	.+30     	; 0x12952 <display_Addresses+0x150>
   12934:	ed b7       	in	r30, 0x3d	; 61
   12936:	fe b7       	in	r31, 0x3e	; 62
   12938:	61 82       	std	Z+1, r6	; 0x01
   1293a:	72 82       	std	Z+2, r7	; 0x02
   1293c:	83 82       	std	Z+3, r8	; 0x03
   1293e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12942:	f8 01       	movw	r30, r16
   12944:	21 81       	ldd	r18, Z+1	; 0x01
   12946:	30 e0       	ldi	r19, 0x00	; 0
   12948:	40 e0       	ldi	r20, 0x00	; 0
   1294a:	50 e0       	ldi	r21, 0x00	; 0
   1294c:	64 e0       	ldi	r22, 0x04	; 4
   1294e:	81 e0       	ldi	r24, 0x01	; 1
   12950:	bd de       	rcall	.-646    	; 0x126cc <print_tok_val>
   12952:	ed b7       	in	r30, 0x3d	; 61
   12954:	fe b7       	in	r31, 0x3e	; 62
   12956:	c1 82       	std	Z+1, r12	; 0x01
   12958:	d2 82       	std	Z+2, r13	; 0x02
   1295a:	e3 82       	std	Z+3, r14	; 0x03
   1295c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12960:	05 5f       	subi	r16, 0xF5	; 245
   12962:	1f 4f       	sbci	r17, 0xFF	; 255
   12964:	ff e1       	ldi	r31, 0x1F	; 31
   12966:	08 37       	cpi	r16, 0x78	; 120
   12968:	1f 07       	cpc	r17, r31
   1296a:	09 f0       	breq	.+2      	; 0x1296e <display_Addresses+0x16c>
   1296c:	7e cf       	rjmp	.-260    	; 0x1286a <display_Addresses+0x68>
   1296e:	84 ee       	ldi	r24, 0xE4	; 228
   12970:	9d e1       	ldi	r25, 0x1D	; 29
   12972:	a0 e0       	ldi	r26, 0x00	; 0
   12974:	ed b7       	in	r30, 0x3d	; 61
   12976:	fe b7       	in	r31, 0x3e	; 62
   12978:	81 83       	std	Z+1, r24	; 0x01
   1297a:	92 83       	std	Z+2, r25	; 0x02
   1297c:	a3 83       	std	Z+3, r26	; 0x03
   1297e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12982:	2a 96       	adiw	r28, 0x0a	; 10
   12984:	0f b6       	in	r0, 0x3f	; 63
   12986:	f8 94       	cli
   12988:	de bf       	out	0x3e, r29	; 62
   1298a:	0f be       	out	0x3f, r0	; 63
   1298c:	cd bf       	out	0x3d, r28	; 61
   1298e:	df 91       	pop	r29
   12990:	cf 91       	pop	r28
   12992:	1f 91       	pop	r17
   12994:	0f 91       	pop	r16
   12996:	ef 90       	pop	r14
   12998:	df 90       	pop	r13
   1299a:	cf 90       	pop	r12
   1299c:	8f 90       	pop	r8
   1299e:	7f 90       	pop	r7
   129a0:	6f 90       	pop	r6
   129a2:	4f 90       	pop	r4
   129a4:	3f 90       	pop	r3
   129a6:	2f 90       	pop	r2
   129a8:	08 95       	ret

000129aa <display_Config>:
   129aa:	2f 92       	push	r2
   129ac:	3f 92       	push	r3
   129ae:	4f 92       	push	r4
   129b0:	6f 92       	push	r6
   129b2:	7f 92       	push	r7
   129b4:	8f 92       	push	r8
   129b6:	af 92       	push	r10
   129b8:	bf 92       	push	r11
   129ba:	cf 92       	push	r12
   129bc:	df 92       	push	r13
   129be:	ef 92       	push	r14
   129c0:	0f 93       	push	r16
   129c2:	1f 93       	push	r17
   129c4:	cf 93       	push	r28
   129c6:	df 93       	push	r29
   129c8:	cd b7       	in	r28, 0x3d	; 61
   129ca:	de b7       	in	r29, 0x3e	; 62
   129cc:	62 97       	sbiw	r28, 0x12	; 18
   129ce:	0f b6       	in	r0, 0x3f	; 63
   129d0:	f8 94       	cli
   129d2:	de bf       	out	0x3e, r29	; 62
   129d4:	0f be       	out	0x3f, r0	; 63
   129d6:	cd bf       	out	0x3d, r28	; 61
   129d8:	5c 01       	movw	r10, r24
   129da:	84 ec       	ldi	r24, 0xC4	; 196
   129dc:	9d e1       	ldi	r25, 0x1D	; 29
   129de:	a0 e0       	ldi	r26, 0x00	; 0
   129e0:	ed b7       	in	r30, 0x3d	; 61
   129e2:	fe b7       	in	r31, 0x3e	; 62
   129e4:	81 83       	std	Z+1, r24	; 0x01
   129e6:	92 83       	std	Z+2, r25	; 0x02
   129e8:	a3 83       	std	Z+3, r26	; 0x03
   129ea:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   129ee:	04 ef       	ldi	r16, 0xF4	; 244
   129f0:	1e e1       	ldi	r17, 0x1E	; 30
   129f2:	89 e4       	ldi	r24, 0x49	; 73
   129f4:	9d e1       	ldi	r25, 0x1D	; 29
   129f6:	9c 01       	movw	r18, r24
   129f8:	40 e0       	ldi	r20, 0x00	; 0
   129fa:	28 87       	std	Y+8, r18	; 0x08
   129fc:	39 87       	std	Y+9, r19	; 0x09
   129fe:	4a 87       	std	Y+10, r20	; 0x0a
   12a00:	8e e7       	ldi	r24, 0x7E	; 126
   12a02:	9d e1       	ldi	r25, 0x1D	; 29
   12a04:	6c 01       	movw	r12, r24
   12a06:	e1 2c       	mov	r14, r1
   12a08:	8f e5       	ldi	r24, 0x5F	; 95
   12a0a:	9d e1       	ldi	r25, 0x1D	; 29
   12a0c:	3c 01       	movw	r6, r24
   12a0e:	81 2c       	mov	r8, r1
   12a10:	8b e4       	ldi	r24, 0x4B	; 75
   12a12:	9d e1       	ldi	r25, 0x1D	; 29
   12a14:	1c 01       	movw	r2, r24
   12a16:	41 2c       	mov	r4, r1
   12a18:	8b eb       	ldi	r24, 0xBB	; 187
   12a1a:	9d e1       	ldi	r25, 0x1D	; 29
   12a1c:	9c 01       	movw	r18, r24
   12a1e:	40 e0       	ldi	r20, 0x00	; 0
   12a20:	2b 87       	std	Y+11, r18	; 0x0b
   12a22:	3c 87       	std	Y+12, r19	; 0x0c
   12a24:	4d 87       	std	Y+13, r20	; 0x0d
   12a26:	8c e9       	ldi	r24, 0x9C	; 156
   12a28:	9d e1       	ldi	r25, 0x1D	; 29
   12a2a:	9c 01       	movw	r18, r24
   12a2c:	40 e0       	ldi	r20, 0x00	; 0
   12a2e:	2e 87       	std	Y+14, r18	; 0x0e
   12a30:	3f 87       	std	Y+15, r19	; 0x0f
   12a32:	48 8b       	std	Y+16, r20	; 0x10
   12a34:	f8 01       	movw	r30, r16
   12a36:	80 81       	ld	r24, Z
   12a38:	88 23       	and	r24, r24
   12a3a:	09 f4       	brne	.+2      	; 0x12a3e <display_Config+0x94>
   12a3c:	16 c2       	rjmp	.+1068   	; 0x12e6a <display_Config+0x4c0>
   12a3e:	83 30       	cpi	r24, 0x03	; 3
   12a40:	09 f0       	breq	.+2      	; 0x12a44 <display_Config+0x9a>
   12a42:	3f c1       	rjmp	.+638    	; 0x12cc2 <display_Config+0x318>
   12a44:	27 81       	ldd	r18, Z+7	; 0x07
   12a46:	30 85       	ldd	r19, Z+8	; 0x08
   12a48:	3a 8b       	std	Y+18, r19	; 0x12
   12a4a:	29 8b       	std	Y+17, r18	; 0x11
   12a4c:	f9 01       	movw	r30, r18
   12a4e:	84 81       	ldd	r24, Z+4	; 0x04
   12a50:	95 81       	ldd	r25, Z+5	; 0x05
   12a52:	ed b7       	in	r30, 0x3d	; 61
   12a54:	fe b7       	in	r31, 0x3e	; 62
   12a56:	95 83       	std	Z+5, r25	; 0x05
   12a58:	84 83       	std	Z+4, r24	; 0x04
   12a5a:	2b 85       	ldd	r18, Y+11	; 0x0b
   12a5c:	3c 85       	ldd	r19, Y+12	; 0x0c
   12a5e:	4d 85       	ldd	r20, Y+13	; 0x0d
   12a60:	21 83       	std	Z+1, r18	; 0x01
   12a62:	32 83       	std	Z+2, r19	; 0x02
   12a64:	43 83       	std	Z+3, r20	; 0x03
   12a66:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12a6a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a6c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a6e:	80 81       	ld	r24, Z
   12a70:	90 e0       	ldi	r25, 0x00	; 0
   12a72:	ed b7       	in	r30, 0x3d	; 61
   12a74:	fe b7       	in	r31, 0x3e	; 62
   12a76:	95 83       	std	Z+5, r25	; 0x05
   12a78:	84 83       	std	Z+4, r24	; 0x04
   12a7a:	2e 85       	ldd	r18, Y+14	; 0x0e
   12a7c:	3f 85       	ldd	r19, Y+15	; 0x0f
   12a7e:	48 89       	ldd	r20, Y+16	; 0x10
   12a80:	21 83       	std	Z+1, r18	; 0x01
   12a82:	32 83       	std	Z+2, r19	; 0x02
   12a84:	43 83       	std	Z+3, r20	; 0x03
   12a86:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12a8a:	64 e0       	ldi	r22, 0x04	; 4
   12a8c:	89 e0       	ldi	r24, 0x09	; 9
   12a8e:	93 de       	rcall	.-730    	; 0x127b6 <print_tok>
   12a90:	e9 89       	ldd	r30, Y+17	; 0x11
   12a92:	fa 89       	ldd	r31, Y+18	; 0x12
   12a94:	20 81       	ld	r18, Z
   12a96:	30 e0       	ldi	r19, 0x00	; 0
   12a98:	40 e0       	ldi	r20, 0x00	; 0
   12a9a:	50 e0       	ldi	r21, 0x00	; 0
   12a9c:	68 e0       	ldi	r22, 0x08	; 8
   12a9e:	81 e0       	ldi	r24, 0x01	; 1
   12aa0:	15 de       	rcall	.-982    	; 0x126cc <print_tok_val>
   12aa2:	e9 89       	ldd	r30, Y+17	; 0x11
   12aa4:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa6:	21 81       	ldd	r18, Z+1	; 0x01
   12aa8:	30 e0       	ldi	r19, 0x00	; 0
   12aaa:	40 e0       	ldi	r20, 0x00	; 0
   12aac:	50 e0       	ldi	r21, 0x00	; 0
   12aae:	68 e0       	ldi	r22, 0x08	; 8
   12ab0:	8f e1       	ldi	r24, 0x1F	; 31
   12ab2:	0c de       	rcall	.-1000   	; 0x126cc <print_tok_val>
   12ab4:	e9 89       	ldd	r30, Y+17	; 0x11
   12ab6:	fa 89       	ldd	r31, Y+18	; 0x12
   12ab8:	42 81       	ldd	r20, Z+2	; 0x02
   12aba:	53 81       	ldd	r21, Z+3	; 0x03
   12abc:	68 e0       	ldi	r22, 0x08	; 8
   12abe:	82 e1       	ldi	r24, 0x12	; 18
   12ac0:	45 de       	rcall	.-886    	; 0x1274c <print_tok_str>
   12ac2:	64 e0       	ldi	r22, 0x04	; 4
   12ac4:	81 e1       	ldi	r24, 0x11	; 17
   12ac6:	77 de       	rcall	.-786    	; 0x127b6 <print_tok>
   12ac8:	64 e0       	ldi	r22, 0x04	; 4
   12aca:	85 e1       	ldi	r24, 0x15	; 21
   12acc:	74 de       	rcall	.-792    	; 0x127b6 <print_tok>
   12ace:	e9 89       	ldd	r30, Y+17	; 0x11
   12ad0:	fa 89       	ldd	r31, Y+18	; 0x12
   12ad2:	26 81       	ldd	r18, Z+6	; 0x06
   12ad4:	37 81       	ldd	r19, Z+7	; 0x07
   12ad6:	40 e0       	ldi	r20, 0x00	; 0
   12ad8:	50 e0       	ldi	r21, 0x00	; 0
   12ada:	68 e0       	ldi	r22, 0x08	; 8
   12adc:	87 e1       	ldi	r24, 0x17	; 23
   12ade:	f6 dd       	rcall	.-1044   	; 0x126cc <print_tok_val>
   12ae0:	64 e0       	ldi	r22, 0x04	; 4
   12ae2:	81 e1       	ldi	r24, 0x11	; 17
   12ae4:	68 de       	rcall	.-816    	; 0x127b6 <print_tok>
   12ae6:	a1 14       	cp	r10, r1
   12ae8:	b1 04       	cpc	r11, r1
   12aea:	09 f1       	breq	.+66     	; 0x12b2e <display_Config+0x184>
   12aec:	64 e0       	ldi	r22, 0x04	; 4
   12aee:	8b e0       	ldi	r24, 0x0B	; 11
   12af0:	62 de       	rcall	.-828    	; 0x127b6 <print_tok>
   12af2:	e9 89       	ldd	r30, Y+17	; 0x11
   12af4:	fa 89       	ldd	r31, Y+18	; 0x12
   12af6:	20 85       	ldd	r18, Z+8	; 0x08
   12af8:	31 85       	ldd	r19, Z+9	; 0x09
   12afa:	40 e0       	ldi	r20, 0x00	; 0
   12afc:	50 e0       	ldi	r21, 0x00	; 0
   12afe:	68 e0       	ldi	r22, 0x08	; 8
   12b00:	88 e2       	ldi	r24, 0x28	; 40
   12b02:	e4 dd       	rcall	.-1080   	; 0x126cc <print_tok_val>
   12b04:	e9 89       	ldd	r30, Y+17	; 0x11
   12b06:	fa 89       	ldd	r31, Y+18	; 0x12
   12b08:	22 85       	ldd	r18, Z+10	; 0x0a
   12b0a:	33 85       	ldd	r19, Z+11	; 0x0b
   12b0c:	40 e0       	ldi	r20, 0x00	; 0
   12b0e:	50 e0       	ldi	r21, 0x00	; 0
   12b10:	68 e0       	ldi	r22, 0x08	; 8
   12b12:	85 e2       	ldi	r24, 0x25	; 37
   12b14:	db dd       	rcall	.-1098   	; 0x126cc <print_tok_val>
   12b16:	e9 89       	ldd	r30, Y+17	; 0x11
   12b18:	fa 89       	ldd	r31, Y+18	; 0x12
   12b1a:	24 85       	ldd	r18, Z+12	; 0x0c
   12b1c:	30 e0       	ldi	r19, 0x00	; 0
   12b1e:	40 e0       	ldi	r20, 0x00	; 0
   12b20:	50 e0       	ldi	r21, 0x00	; 0
   12b22:	68 e0       	ldi	r22, 0x08	; 8
   12b24:	86 e2       	ldi	r24, 0x26	; 38
   12b26:	d2 dd       	rcall	.-1116   	; 0x126cc <print_tok_val>
   12b28:	64 e0       	ldi	r22, 0x04	; 4
   12b2a:	81 e1       	ldi	r24, 0x11	; 17
   12b2c:	44 de       	rcall	.-888    	; 0x127b6 <print_tok>
   12b2e:	64 e0       	ldi	r22, 0x04	; 4
   12b30:	87 e2       	ldi	r24, 0x27	; 39
   12b32:	41 de       	rcall	.-894    	; 0x127b6 <print_tok>
   12b34:	a1 14       	cp	r10, r1
   12b36:	b1 04       	cpc	r11, r1
   12b38:	49 f0       	breq	.+18     	; 0x12b4c <display_Config+0x1a2>
   12b3a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b3c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b3e:	25 85       	ldd	r18, Z+13	; 0x0d
   12b40:	30 e0       	ldi	r19, 0x00	; 0
   12b42:	40 e0       	ldi	r20, 0x00	; 0
   12b44:	50 e0       	ldi	r21, 0x00	; 0
   12b46:	68 e0       	ldi	r22, 0x08	; 8
   12b48:	89 e2       	ldi	r24, 0x29	; 41
   12b4a:	c0 dd       	rcall	.-1152   	; 0x126cc <print_tok_val>
   12b4c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b4e:	fa 89       	ldd	r31, Y+18	; 0x12
   12b50:	26 85       	ldd	r18, Z+14	; 0x0e
   12b52:	37 85       	ldd	r19, Z+15	; 0x0f
   12b54:	40 89       	ldd	r20, Z+16	; 0x10
   12b56:	51 89       	ldd	r21, Z+17	; 0x11
   12b58:	68 e0       	ldi	r22, 0x08	; 8
   12b5a:	8f e0       	ldi	r24, 0x0F	; 15
   12b5c:	b7 dd       	rcall	.-1170   	; 0x126cc <print_tok_val>
   12b5e:	a1 14       	cp	r10, r1
   12b60:	b1 04       	cpc	r11, r1
   12b62:	09 f4       	brne	.+2      	; 0x12b66 <display_Config+0x1bc>
   12b64:	5a c0       	rjmp	.+180    	; 0x12c1a <display_Config+0x270>
   12b66:	e9 89       	ldd	r30, Y+17	; 0x11
   12b68:	fa 89       	ldd	r31, Y+18	; 0x12
   12b6a:	22 89       	ldd	r18, Z+18	; 0x12
   12b6c:	33 89       	ldd	r19, Z+19	; 0x13
   12b6e:	40 e0       	ldi	r20, 0x00	; 0
   12b70:	50 e0       	ldi	r21, 0x00	; 0
   12b72:	68 e0       	ldi	r22, 0x08	; 8
   12b74:	87 e0       	ldi	r24, 0x07	; 7
   12b76:	aa dd       	rcall	.-1196   	; 0x126cc <print_tok_val>
   12b78:	e9 89       	ldd	r30, Y+17	; 0x11
   12b7a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b7c:	24 89       	ldd	r18, Z+20	; 0x14
   12b7e:	30 e0       	ldi	r19, 0x00	; 0
   12b80:	40 e0       	ldi	r20, 0x00	; 0
   12b82:	50 e0       	ldi	r21, 0x00	; 0
   12b84:	68 e0       	ldi	r22, 0x08	; 8
   12b86:	85 e0       	ldi	r24, 0x05	; 5
   12b88:	a1 dd       	rcall	.-1214   	; 0x126cc <print_tok_val>
   12b8a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b8c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b8e:	25 89       	ldd	r18, Z+21	; 0x15
   12b90:	30 e0       	ldi	r19, 0x00	; 0
   12b92:	40 e0       	ldi	r20, 0x00	; 0
   12b94:	50 e0       	ldi	r21, 0x00	; 0
   12b96:	68 e0       	ldi	r22, 0x08	; 8
   12b98:	86 e0       	ldi	r24, 0x06	; 6
   12b9a:	98 dd       	rcall	.-1232   	; 0x126cc <print_tok_val>
   12b9c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b9e:	fa 89       	ldd	r31, Y+18	; 0x12
   12ba0:	26 89       	ldd	r18, Z+22	; 0x16
   12ba2:	37 89       	ldd	r19, Z+23	; 0x17
   12ba4:	40 e0       	ldi	r20, 0x00	; 0
   12ba6:	50 e0       	ldi	r21, 0x00	; 0
   12ba8:	68 e0       	ldi	r22, 0x08	; 8
   12baa:	84 e0       	ldi	r24, 0x04	; 4
   12bac:	8f dd       	rcall	.-1250   	; 0x126cc <print_tok_val>
   12bae:	e9 89       	ldd	r30, Y+17	; 0x11
   12bb0:	fa 89       	ldd	r31, Y+18	; 0x12
   12bb2:	20 8d       	ldd	r18, Z+24	; 0x18
   12bb4:	31 8d       	ldd	r19, Z+25	; 0x19
   12bb6:	40 e0       	ldi	r20, 0x00	; 0
   12bb8:	50 e0       	ldi	r21, 0x00	; 0
   12bba:	68 e0       	ldi	r22, 0x08	; 8
   12bbc:	8a e0       	ldi	r24, 0x0A	; 10
   12bbe:	86 dd       	rcall	.-1268   	; 0x126cc <print_tok_val>
   12bc0:	e9 89       	ldd	r30, Y+17	; 0x11
   12bc2:	fa 89       	ldd	r31, Y+18	; 0x12
   12bc4:	22 8d       	ldd	r18, Z+26	; 0x1a
   12bc6:	33 8d       	ldd	r19, Z+27	; 0x1b
   12bc8:	40 e0       	ldi	r20, 0x00	; 0
   12bca:	50 e0       	ldi	r21, 0x00	; 0
   12bcc:	68 e0       	ldi	r22, 0x08	; 8
   12bce:	8e e1       	ldi	r24, 0x1E	; 30
   12bd0:	7d dd       	rcall	.-1286   	; 0x126cc <print_tok_val>
   12bd2:	e9 89       	ldd	r30, Y+17	; 0x11
   12bd4:	fa 89       	ldd	r31, Y+18	; 0x12
   12bd6:	24 8d       	ldd	r18, Z+28	; 0x1c
   12bd8:	35 8d       	ldd	r19, Z+29	; 0x1d
   12bda:	40 e0       	ldi	r20, 0x00	; 0
   12bdc:	50 e0       	ldi	r21, 0x00	; 0
   12bde:	68 e0       	ldi	r22, 0x08	; 8
   12be0:	80 e0       	ldi	r24, 0x00	; 0
   12be2:	74 dd       	rcall	.-1304   	; 0x126cc <print_tok_val>
   12be4:	e9 89       	ldd	r30, Y+17	; 0x11
   12be6:	fa 89       	ldd	r31, Y+18	; 0x12
   12be8:	26 8d       	ldd	r18, Z+30	; 0x1e
   12bea:	30 e0       	ldi	r19, 0x00	; 0
   12bec:	40 e0       	ldi	r20, 0x00	; 0
   12bee:	50 e0       	ldi	r21, 0x00	; 0
   12bf0:	68 e0       	ldi	r22, 0x08	; 8
   12bf2:	8c e1       	ldi	r24, 0x1C	; 28
   12bf4:	6b dd       	rcall	.-1322   	; 0x126cc <print_tok_val>
   12bf6:	e9 89       	ldd	r30, Y+17	; 0x11
   12bf8:	fa 89       	ldd	r31, Y+18	; 0x12
   12bfa:	27 8d       	ldd	r18, Z+31	; 0x1f
   12bfc:	30 e0       	ldi	r19, 0x00	; 0
   12bfe:	40 e0       	ldi	r20, 0x00	; 0
   12c00:	50 e0       	ldi	r21, 0x00	; 0
   12c02:	68 e0       	ldi	r22, 0x08	; 8
   12c04:	83 e1       	ldi	r24, 0x13	; 19
   12c06:	62 dd       	rcall	.-1340   	; 0x126cc <print_tok_val>
   12c08:	e9 89       	ldd	r30, Y+17	; 0x11
   12c0a:	fa 89       	ldd	r31, Y+18	; 0x12
   12c0c:	20 a1       	ldd	r18, Z+32	; 0x20
   12c0e:	30 e0       	ldi	r19, 0x00	; 0
   12c10:	40 e0       	ldi	r20, 0x00	; 0
   12c12:	50 e0       	ldi	r21, 0x00	; 0
   12c14:	68 e0       	ldi	r22, 0x08	; 8
   12c16:	81 e2       	ldi	r24, 0x21	; 33
   12c18:	59 dd       	rcall	.-1358   	; 0x126cc <print_tok_val>
   12c1a:	64 e0       	ldi	r22, 0x04	; 4
   12c1c:	81 e1       	ldi	r24, 0x11	; 17
   12c1e:	cb dd       	rcall	.-1130   	; 0x127b6 <print_tok>
   12c20:	a1 14       	cp	r10, r1
   12c22:	b1 04       	cpc	r11, r1
   12c24:	99 f1       	breq	.+102    	; 0x12c8c <display_Config+0x2e2>
   12c26:	64 e0       	ldi	r22, 0x04	; 4
   12c28:	8a e2       	ldi	r24, 0x2A	; 42
   12c2a:	c5 dd       	rcall	.-1142   	; 0x127b6 <print_tok>
   12c2c:	e9 89       	ldd	r30, Y+17	; 0x11
   12c2e:	fa 89       	ldd	r31, Y+18	; 0x12
   12c30:	21 a1       	ldd	r18, Z+33	; 0x21
   12c32:	32 a1       	ldd	r19, Z+34	; 0x22
   12c34:	43 a1       	ldd	r20, Z+35	; 0x23
   12c36:	54 a1       	ldd	r21, Z+36	; 0x24
   12c38:	68 e0       	ldi	r22, 0x08	; 8
   12c3a:	8a e1       	ldi	r24, 0x1A	; 26
   12c3c:	47 dd       	rcall	.-1394   	; 0x126cc <print_tok_val>
   12c3e:	e9 89       	ldd	r30, Y+17	; 0x11
   12c40:	fa 89       	ldd	r31, Y+18	; 0x12
   12c42:	25 a1       	ldd	r18, Z+37	; 0x25
   12c44:	30 e0       	ldi	r19, 0x00	; 0
   12c46:	40 e0       	ldi	r20, 0x00	; 0
   12c48:	50 e0       	ldi	r21, 0x00	; 0
   12c4a:	68 e0       	ldi	r22, 0x08	; 8
   12c4c:	8b e1       	ldi	r24, 0x1B	; 27
   12c4e:	3e dd       	rcall	.-1412   	; 0x126cc <print_tok_val>
   12c50:	e9 89       	ldd	r30, Y+17	; 0x11
   12c52:	fa 89       	ldd	r31, Y+18	; 0x12
   12c54:	26 a1       	ldd	r18, Z+38	; 0x26
   12c56:	37 a1       	ldd	r19, Z+39	; 0x27
   12c58:	40 e0       	ldi	r20, 0x00	; 0
   12c5a:	50 e0       	ldi	r21, 0x00	; 0
   12c5c:	68 e0       	ldi	r22, 0x08	; 8
   12c5e:	8d e1       	ldi	r24, 0x1D	; 29
   12c60:	35 dd       	rcall	.-1430   	; 0x126cc <print_tok_val>
   12c62:	e9 89       	ldd	r30, Y+17	; 0x11
   12c64:	fa 89       	ldd	r31, Y+18	; 0x12
   12c66:	20 a5       	ldd	r18, Z+40	; 0x28
   12c68:	31 a5       	ldd	r19, Z+41	; 0x29
   12c6a:	42 a5       	ldd	r20, Z+42	; 0x2a
   12c6c:	53 a5       	ldd	r21, Z+43	; 0x2b
   12c6e:	68 e0       	ldi	r22, 0x08	; 8
   12c70:	89 e1       	ldi	r24, 0x19	; 25
   12c72:	2c dd       	rcall	.-1448   	; 0x126cc <print_tok_val>
   12c74:	e9 89       	ldd	r30, Y+17	; 0x11
   12c76:	fa 89       	ldd	r31, Y+18	; 0x12
   12c78:	24 a5       	ldd	r18, Z+44	; 0x2c
   12c7a:	30 e0       	ldi	r19, 0x00	; 0
   12c7c:	40 e0       	ldi	r20, 0x00	; 0
   12c7e:	50 e0       	ldi	r21, 0x00	; 0
   12c80:	68 e0       	ldi	r22, 0x08	; 8
   12c82:	88 e1       	ldi	r24, 0x18	; 24
   12c84:	23 dd       	rcall	.-1466   	; 0x126cc <print_tok_val>
   12c86:	64 e0       	ldi	r22, 0x04	; 4
   12c88:	81 e1       	ldi	r24, 0x11	; 17
   12c8a:	95 dd       	rcall	.-1238   	; 0x127b6 <print_tok>
   12c8c:	e9 89       	ldd	r30, Y+17	; 0x11
   12c8e:	fa 89       	ldd	r31, Y+18	; 0x12
   12c90:	80 a5       	ldd	r24, Z+40	; 0x28
   12c92:	91 a5       	ldd	r25, Z+41	; 0x29
   12c94:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12c96:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12c98:	01 96       	adiw	r24, 0x01	; 1
   12c9a:	a1 1d       	adc	r26, r1
   12c9c:	b1 1d       	adc	r27, r1
   12c9e:	ed b7       	in	r30, 0x3d	; 61
   12ca0:	fe b7       	in	r31, 0x3e	; 62
   12ca2:	84 83       	std	Z+4, r24	; 0x04
   12ca4:	95 83       	std	Z+5, r25	; 0x05
   12ca6:	a6 83       	std	Z+6, r26	; 0x06
   12ca8:	b7 83       	std	Z+7, r27	; 0x07
   12caa:	28 e8       	ldi	r18, 0x88	; 136
   12cac:	3d e1       	ldi	r19, 0x1D	; 29
   12cae:	c9 01       	movw	r24, r18
   12cb0:	a0 e0       	ldi	r26, 0x00	; 0
   12cb2:	81 83       	std	Z+1, r24	; 0x01
   12cb4:	92 83       	std	Z+2, r25	; 0x02
   12cb6:	a3 83       	std	Z+3, r26	; 0x03
   12cb8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12cbc:	60 e0       	ldi	r22, 0x00	; 0
   12cbe:	81 e1       	ldi	r24, 0x11	; 17
   12cc0:	7a dd       	rcall	.-1292   	; 0x127b6 <print_tok>
   12cc2:	f8 01       	movw	r30, r16
   12cc4:	80 81       	ld	r24, Z
   12cc6:	81 30       	cpi	r24, 0x01	; 1
   12cc8:	09 f0       	breq	.+2      	; 0x12ccc <display_Config+0x322>
   12cca:	a8 c0       	rjmp	.+336    	; 0x12e1c <display_Config+0x472>
   12ccc:	27 81       	ldd	r18, Z+7	; 0x07
   12cce:	30 85       	ldd	r19, Z+8	; 0x08
   12cd0:	3a 8b       	std	Y+18, r19	; 0x12
   12cd2:	29 8b       	std	Y+17, r18	; 0x11
   12cd4:	f9 01       	movw	r30, r18
   12cd6:	84 81       	ldd	r24, Z+4	; 0x04
   12cd8:	95 81       	ldd	r25, Z+5	; 0x05
   12cda:	ed b7       	in	r30, 0x3d	; 61
   12cdc:	fe b7       	in	r31, 0x3e	; 62
   12cde:	95 83       	std	Z+5, r25	; 0x05
   12ce0:	84 83       	std	Z+4, r24	; 0x04
   12ce2:	c1 82       	std	Z+1, r12	; 0x01
   12ce4:	d2 82       	std	Z+2, r13	; 0x02
   12ce6:	e3 82       	std	Z+3, r14	; 0x03
   12ce8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12cec:	e9 89       	ldd	r30, Y+17	; 0x11
   12cee:	fa 89       	ldd	r31, Y+18	; 0x12
   12cf0:	80 81       	ld	r24, Z
   12cf2:	90 e0       	ldi	r25, 0x00	; 0
   12cf4:	ed b7       	in	r30, 0x3d	; 61
   12cf6:	fe b7       	in	r31, 0x3e	; 62
   12cf8:	95 83       	std	Z+5, r25	; 0x05
   12cfa:	84 83       	std	Z+4, r24	; 0x04
   12cfc:	61 82       	std	Z+1, r6	; 0x01
   12cfe:	72 82       	std	Z+2, r7	; 0x02
   12d00:	83 82       	std	Z+3, r8	; 0x03
   12d02:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12d06:	64 e0       	ldi	r22, 0x04	; 4
   12d08:	85 e1       	ldi	r24, 0x15	; 21
   12d0a:	55 dd       	rcall	.-1366   	; 0x127b6 <print_tok>
   12d0c:	e9 89       	ldd	r30, Y+17	; 0x11
   12d0e:	fa 89       	ldd	r31, Y+18	; 0x12
   12d10:	20 81       	ld	r18, Z
   12d12:	30 e0       	ldi	r19, 0x00	; 0
   12d14:	40 e0       	ldi	r20, 0x00	; 0
   12d16:	50 e0       	ldi	r21, 0x00	; 0
   12d18:	68 e0       	ldi	r22, 0x08	; 8
   12d1a:	81 e0       	ldi	r24, 0x01	; 1
   12d1c:	d7 dc       	rcall	.-1618   	; 0x126cc <print_tok_val>
   12d1e:	e9 89       	ldd	r30, Y+17	; 0x11
   12d20:	fa 89       	ldd	r31, Y+18	; 0x12
   12d22:	21 81       	ldd	r18, Z+1	; 0x01
   12d24:	30 e0       	ldi	r19, 0x00	; 0
   12d26:	40 e0       	ldi	r20, 0x00	; 0
   12d28:	50 e0       	ldi	r21, 0x00	; 0
   12d2a:	68 e0       	ldi	r22, 0x08	; 8
   12d2c:	8f e1       	ldi	r24, 0x1F	; 31
   12d2e:	ce dc       	rcall	.-1636   	; 0x126cc <print_tok_val>
   12d30:	e9 89       	ldd	r30, Y+17	; 0x11
   12d32:	fa 89       	ldd	r31, Y+18	; 0x12
   12d34:	42 81       	ldd	r20, Z+2	; 0x02
   12d36:	53 81       	ldd	r21, Z+3	; 0x03
   12d38:	68 e0       	ldi	r22, 0x08	; 8
   12d3a:	82 e1       	ldi	r24, 0x12	; 18
   12d3c:	07 dd       	rcall	.-1522   	; 0x1274c <print_tok_str>
   12d3e:	64 e0       	ldi	r22, 0x04	; 4
   12d40:	81 e1       	ldi	r24, 0x11	; 17
   12d42:	39 dd       	rcall	.-1422   	; 0x127b6 <print_tok>
   12d44:	64 e0       	ldi	r22, 0x04	; 4
   12d46:	89 e0       	ldi	r24, 0x09	; 9
   12d48:	36 dd       	rcall	.-1428   	; 0x127b6 <print_tok>
   12d4a:	e9 89       	ldd	r30, Y+17	; 0x11
   12d4c:	fa 89       	ldd	r31, Y+18	; 0x12
   12d4e:	26 81       	ldd	r18, Z+6	; 0x06
   12d50:	37 81       	ldd	r19, Z+7	; 0x07
   12d52:	40 e0       	ldi	r20, 0x00	; 0
   12d54:	50 e0       	ldi	r21, 0x00	; 0
   12d56:	68 e0       	ldi	r22, 0x08	; 8
   12d58:	87 e1       	ldi	r24, 0x17	; 23
   12d5a:	b8 dc       	rcall	.-1680   	; 0x126cc <print_tok_val>
   12d5c:	64 e0       	ldi	r22, 0x04	; 4
   12d5e:	81 e1       	ldi	r24, 0x11	; 17
   12d60:	2a dd       	rcall	.-1452   	; 0x127b6 <print_tok>
   12d62:	a1 14       	cp	r10, r1
   12d64:	b1 04       	cpc	r11, r1
   12d66:	91 f1       	breq	.+100    	; 0x12dcc <display_Config+0x422>
   12d68:	64 e0       	ldi	r22, 0x04	; 4
   12d6a:	84 e1       	ldi	r24, 0x14	; 20
   12d6c:	24 dd       	rcall	.-1464   	; 0x127b6 <print_tok>
   12d6e:	e9 89       	ldd	r30, Y+17	; 0x11
   12d70:	fa 89       	ldd	r31, Y+18	; 0x12
   12d72:	20 85       	ldd	r18, Z+8	; 0x08
   12d74:	31 85       	ldd	r19, Z+9	; 0x09
   12d76:	03 2e       	mov	r0, r19
   12d78:	00 0c       	add	r0, r0
   12d7a:	44 0b       	sbc	r20, r20
   12d7c:	55 0b       	sbc	r21, r21
   12d7e:	68 e0       	ldi	r22, 0x08	; 8
   12d80:	88 e0       	ldi	r24, 0x08	; 8
   12d82:	a4 dc       	rcall	.-1720   	; 0x126cc <print_tok_val>
   12d84:	e9 89       	ldd	r30, Y+17	; 0x11
   12d86:	fa 89       	ldd	r31, Y+18	; 0x12
   12d88:	22 85       	ldd	r18, Z+10	; 0x0a
   12d8a:	33 85       	ldd	r19, Z+11	; 0x0b
   12d8c:	03 2e       	mov	r0, r19
   12d8e:	00 0c       	add	r0, r0
   12d90:	44 0b       	sbc	r20, r20
   12d92:	55 0b       	sbc	r21, r21
   12d94:	68 e0       	ldi	r22, 0x08	; 8
   12d96:	82 e2       	ldi	r24, 0x22	; 34
   12d98:	99 dc       	rcall	.-1742   	; 0x126cc <print_tok_val>
   12d9a:	e9 89       	ldd	r30, Y+17	; 0x11
   12d9c:	fa 89       	ldd	r31, Y+18	; 0x12
   12d9e:	24 85       	ldd	r18, Z+12	; 0x0c
   12da0:	35 85       	ldd	r19, Z+13	; 0x0d
   12da2:	03 2e       	mov	r0, r19
   12da4:	00 0c       	add	r0, r0
   12da6:	44 0b       	sbc	r20, r20
   12da8:	55 0b       	sbc	r21, r21
   12daa:	68 e0       	ldi	r22, 0x08	; 8
   12dac:	86 e1       	ldi	r24, 0x16	; 22
   12dae:	8e dc       	rcall	.-1764   	; 0x126cc <print_tok_val>
   12db0:	e9 89       	ldd	r30, Y+17	; 0x11
   12db2:	fa 89       	ldd	r31, Y+18	; 0x12
   12db4:	26 85       	ldd	r18, Z+14	; 0x0e
   12db6:	37 85       	ldd	r19, Z+15	; 0x0f
   12db8:	03 2e       	mov	r0, r19
   12dba:	00 0c       	add	r0, r0
   12dbc:	44 0b       	sbc	r20, r20
   12dbe:	55 0b       	sbc	r21, r21
   12dc0:	68 e0       	ldi	r22, 0x08	; 8
   12dc2:	8d e0       	ldi	r24, 0x0D	; 13
   12dc4:	83 dc       	rcall	.-1786   	; 0x126cc <print_tok_val>
   12dc6:	64 e0       	ldi	r22, 0x04	; 4
   12dc8:	81 e1       	ldi	r24, 0x11	; 17
   12dca:	f5 dc       	rcall	.-1558   	; 0x127b6 <print_tok>
   12dcc:	e9 89       	ldd	r30, Y+17	; 0x11
   12dce:	fa 89       	ldd	r31, Y+18	; 0x12
   12dd0:	46 85       	ldd	r20, Z+14	; 0x0e
   12dd2:	57 85       	ldd	r21, Z+15	; 0x0f
   12dd4:	22 85       	ldd	r18, Z+10	; 0x0a
   12dd6:	33 85       	ldd	r19, Z+11	; 0x0b
   12dd8:	42 9f       	mul	r20, r18
   12dda:	c0 01       	movw	r24, r0
   12ddc:	43 9f       	mul	r20, r19
   12dde:	90 0d       	add	r25, r0
   12de0:	52 9f       	mul	r21, r18
   12de2:	90 0d       	add	r25, r0
   12de4:	11 24       	eor	r1, r1
   12de6:	44 85       	ldd	r20, Z+12	; 0x0c
   12de8:	55 85       	ldd	r21, Z+13	; 0x0d
   12dea:	84 9f       	mul	r24, r20
   12dec:	90 01       	movw	r18, r0
   12dee:	85 9f       	mul	r24, r21
   12df0:	30 0d       	add	r19, r0
   12df2:	94 9f       	mul	r25, r20
   12df4:	30 0d       	add	r19, r0
   12df6:	11 24       	eor	r1, r1
   12df8:	c9 01       	movw	r24, r18
   12dfa:	33 0f       	add	r19, r19
   12dfc:	aa 0b       	sbc	r26, r26
   12dfe:	bb 0b       	sbc	r27, r27
   12e00:	ed b7       	in	r30, 0x3d	; 61
   12e02:	fe b7       	in	r31, 0x3e	; 62
   12e04:	84 83       	std	Z+4, r24	; 0x04
   12e06:	95 83       	std	Z+5, r25	; 0x05
   12e08:	a6 83       	std	Z+6, r26	; 0x06
   12e0a:	b7 83       	std	Z+7, r27	; 0x07
   12e0c:	21 82       	std	Z+1, r2	; 0x01
   12e0e:	32 82       	std	Z+2, r3	; 0x02
   12e10:	43 82       	std	Z+3, r4	; 0x03
   12e12:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12e16:	60 e0       	ldi	r22, 0x00	; 0
   12e18:	81 e1       	ldi	r24, 0x11	; 17
   12e1a:	cd dc       	rcall	.-1638   	; 0x127b6 <print_tok>
   12e1c:	f8 01       	movw	r30, r16
   12e1e:	80 81       	ld	r24, Z
   12e20:	84 30       	cpi	r24, 0x04	; 4
   12e22:	c9 f4       	brne	.+50     	; 0x12e56 <display_Config+0x4ac>
   12e24:	27 81       	ldd	r18, Z+7	; 0x07
   12e26:	30 85       	ldd	r19, Z+8	; 0x08
   12e28:	3a 8b       	std	Y+18, r19	; 0x12
   12e2a:	29 8b       	std	Y+17, r18	; 0x11
   12e2c:	60 e0       	ldi	r22, 0x00	; 0
   12e2e:	80 e2       	ldi	r24, 0x20	; 32
   12e30:	c2 dc       	rcall	.-1660   	; 0x127b6 <print_tok>
   12e32:	64 e0       	ldi	r22, 0x04	; 4
   12e34:	89 e0       	ldi	r24, 0x09	; 9
   12e36:	bf dc       	rcall	.-1666   	; 0x127b6 <print_tok>
   12e38:	e9 89       	ldd	r30, Y+17	; 0x11
   12e3a:	fa 89       	ldd	r31, Y+18	; 0x12
   12e3c:	20 81       	ld	r18, Z
   12e3e:	30 e0       	ldi	r19, 0x00	; 0
   12e40:	40 e0       	ldi	r20, 0x00	; 0
   12e42:	50 e0       	ldi	r21, 0x00	; 0
   12e44:	68 e0       	ldi	r22, 0x08	; 8
   12e46:	81 e0       	ldi	r24, 0x01	; 1
   12e48:	41 dc       	rcall	.-1918   	; 0x126cc <print_tok_val>
   12e4a:	64 e0       	ldi	r22, 0x04	; 4
   12e4c:	81 e1       	ldi	r24, 0x11	; 17
   12e4e:	b3 dc       	rcall	.-1690   	; 0x127b6 <print_tok>
   12e50:	60 e0       	ldi	r22, 0x00	; 0
   12e52:	81 e1       	ldi	r24, 0x11	; 17
   12e54:	b0 dc       	rcall	.-1696   	; 0x127b6 <print_tok>
   12e56:	28 85       	ldd	r18, Y+8	; 0x08
   12e58:	39 85       	ldd	r19, Y+9	; 0x09
   12e5a:	4a 85       	ldd	r20, Y+10	; 0x0a
   12e5c:	ed b7       	in	r30, 0x3d	; 61
   12e5e:	fe b7       	in	r31, 0x3e	; 62
   12e60:	21 83       	std	Z+1, r18	; 0x01
   12e62:	32 83       	std	Z+2, r19	; 0x02
   12e64:	43 83       	std	Z+3, r20	; 0x03
   12e66:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12e6a:	05 5f       	subi	r16, 0xF5	; 245
   12e6c:	1f 4f       	sbci	r17, 0xFF	; 255
   12e6e:	28 e7       	ldi	r18, 0x78	; 120
   12e70:	3f e1       	ldi	r19, 0x1F	; 31
   12e72:	20 17       	cp	r18, r16
   12e74:	31 07       	cpc	r19, r17
   12e76:	09 f0       	breq	.+2      	; 0x12e7a <display_Config+0x4d0>
   12e78:	dd cd       	rjmp	.-1094   	; 0x12a34 <display_Config+0x8a>
   12e7a:	87 e4       	ldi	r24, 0x47	; 71
   12e7c:	9d e1       	ldi	r25, 0x1D	; 29
   12e7e:	a0 e0       	ldi	r26, 0x00	; 0
   12e80:	ed b7       	in	r30, 0x3d	; 61
   12e82:	fe b7       	in	r31, 0x3e	; 62
   12e84:	81 83       	std	Z+1, r24	; 0x01
   12e86:	92 83       	std	Z+2, r25	; 0x02
   12e88:	a3 83       	std	Z+3, r26	; 0x03
   12e8a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12e8e:	62 96       	adiw	r28, 0x12	; 18
   12e90:	0f b6       	in	r0, 0x3f	; 63
   12e92:	f8 94       	cli
   12e94:	de bf       	out	0x3e, r29	; 62
   12e96:	0f be       	out	0x3f, r0	; 63
   12e98:	cd bf       	out	0x3d, r28	; 61
   12e9a:	df 91       	pop	r29
   12e9c:	cf 91       	pop	r28
   12e9e:	1f 91       	pop	r17
   12ea0:	0f 91       	pop	r16
   12ea2:	ef 90       	pop	r14
   12ea4:	df 90       	pop	r13
   12ea6:	cf 90       	pop	r12
   12ea8:	bf 90       	pop	r11
   12eaa:	af 90       	pop	r10
   12eac:	8f 90       	pop	r8
   12eae:	7f 90       	pop	r7
   12eb0:	6f 90       	pop	r6
   12eb2:	4f 90       	pop	r4
   12eb4:	3f 90       	pop	r3
   12eb6:	2f 90       	pop	r2
   12eb8:	08 95       	ret

00012eba <find_type>:
   12eba:	e4 ef       	ldi	r30, 0xF4	; 244
   12ebc:	fe e1       	ldi	r31, 0x1E	; 30
   12ebe:	20 e0       	ldi	r18, 0x00	; 0
   12ec0:	30 e0       	ldi	r19, 0x00	; 0
   12ec2:	40 81       	ld	r20, Z
   12ec4:	50 e0       	ldi	r21, 0x00	; 0
   12ec6:	48 17       	cp	r20, r24
   12ec8:	59 07       	cpc	r21, r25
   12eca:	11 f4       	brne	.+4      	; 0x12ed0 <find_type+0x16>
   12ecc:	82 2f       	mov	r24, r18
   12ece:	08 95       	ret
   12ed0:	2f 5f       	subi	r18, 0xFF	; 255
   12ed2:	3f 4f       	sbci	r19, 0xFF	; 255
   12ed4:	3b 96       	adiw	r30, 0x0b	; 11
   12ed6:	2c 30       	cpi	r18, 0x0C	; 12
   12ed8:	31 05       	cpc	r19, r1
   12eda:	99 f7       	brne	.-26     	; 0x12ec2 <find_type+0x8>
   12edc:	8f ef       	ldi	r24, 0xFF	; 255
   12ede:	08 95       	ret

00012ee0 <count_drive_types>:
   12ee0:	e4 ef       	ldi	r30, 0xF4	; 244
   12ee2:	fe e1       	ldi	r31, 0x1E	; 30
   12ee4:	20 e0       	ldi	r18, 0x00	; 0
   12ee6:	30 e0       	ldi	r19, 0x00	; 0
   12ee8:	90 81       	ld	r25, Z
   12eea:	98 13       	cpse	r25, r24
   12eec:	02 c0       	rjmp	.+4      	; 0x12ef2 <count_drive_types+0x12>
   12eee:	2f 5f       	subi	r18, 0xFF	; 255
   12ef0:	3f 4f       	sbci	r19, 0xFF	; 255
   12ef2:	3b 96       	adiw	r30, 0x0b	; 11
   12ef4:	9f e1       	ldi	r25, 0x1F	; 31
   12ef6:	e8 37       	cpi	r30, 0x78	; 120
   12ef8:	f9 07       	cpc	r31, r25
   12efa:	b1 f7       	brne	.-20     	; 0x12ee8 <count_drive_types+0x8>
   12efc:	82 2f       	mov	r24, r18
   12efe:	08 95       	ret

00012f00 <type_to_str>:
   12f00:	00 97       	sbiw	r24, 0x00	; 0
   12f02:	59 f0       	breq	.+22     	; 0x12f1a <type_to_str+0x1a>
   12f04:	81 30       	cpi	r24, 0x01	; 1
   12f06:	91 05       	cpc	r25, r1
   12f08:	59 f0       	breq	.+22     	; 0x12f20 <type_to_str+0x20>
   12f0a:	83 30       	cpi	r24, 0x03	; 3
   12f0c:	91 05       	cpc	r25, r1
   12f0e:	59 f0       	breq	.+22     	; 0x12f26 <type_to_str+0x26>
   12f10:	04 97       	sbiw	r24, 0x04	; 4
   12f12:	61 f0       	breq	.+24     	; 0x12f2c <type_to_str+0x2c>
   12f14:	89 e2       	ldi	r24, 0x29	; 41
   12f16:	9e e0       	ldi	r25, 0x0E	; 14
   12f18:	08 95       	ret
   12f1a:	8f ef       	ldi	r24, 0xFF	; 255
   12f1c:	9d e0       	ldi	r25, 0x0D	; 13
   12f1e:	08 95       	ret
   12f20:	87 e0       	ldi	r24, 0x07	; 7
   12f22:	9e e0       	ldi	r25, 0x0E	; 14
   12f24:	08 95       	ret
   12f26:	8f e1       	ldi	r24, 0x1F	; 31
   12f28:	9e e0       	ldi	r25, 0x0E	; 14
   12f2a:	08 95       	ret
   12f2c:	82 e1       	ldi	r24, 0x12	; 18
   12f2e:	9e e0       	ldi	r25, 0x0E	; 14
   12f30:	08 95       	ret

00012f32 <find_free>:
   12f32:	80 e0       	ldi	r24, 0x00	; 0
   12f34:	90 e0       	ldi	r25, 0x00	; 0
   12f36:	c1 cf       	rjmp	.-126    	; 0x12eba <find_type>
   12f38:	08 95       	ret

00012f3a <find_device>:
   12f3a:	9b 01       	movw	r18, r22
   12f3c:	20 52       	subi	r18, 0x20	; 32
   12f3e:	31 09       	sbc	r19, r1
   12f40:	2f 35       	cpi	r18, 0x5F	; 95
   12f42:	31 05       	cpc	r19, r1
   12f44:	08 f5       	brcc	.+66     	; 0x12f88 <find_device+0x4e>
   12f46:	64 17       	cp	r22, r20
   12f48:	75 07       	cpc	r23, r21
   12f4a:	f4 f0       	brlt	.+60     	; 0x12f88 <find_device+0x4e>
   12f4c:	9a 01       	movw	r18, r20
   12f4e:	22 5e       	subi	r18, 0xE2	; 226
   12f50:	3f 4f       	sbci	r19, 0xFF	; 255
   12f52:	26 17       	cp	r18, r22
   12f54:	37 07       	cpc	r19, r23
   12f56:	c4 f0       	brlt	.+48     	; 0x12f88 <find_device+0x4e>
   12f58:	64 1b       	sub	r22, r20
   12f5a:	75 0b       	sbc	r23, r21
   12f5c:	e4 ef       	ldi	r30, 0xF4	; 244
   12f5e:	fe e1       	ldi	r31, 0x1E	; 30
   12f60:	20 e0       	ldi	r18, 0x00	; 0
   12f62:	30 e0       	ldi	r19, 0x00	; 0
   12f64:	40 81       	ld	r20, Z
   12f66:	50 e0       	ldi	r21, 0x00	; 0
   12f68:	48 17       	cp	r20, r24
   12f6a:	59 07       	cpc	r21, r25
   12f6c:	39 f4       	brne	.+14     	; 0x12f7c <find_device+0x42>
   12f6e:	41 81       	ldd	r20, Z+1	; 0x01
   12f70:	50 e0       	ldi	r21, 0x00	; 0
   12f72:	64 17       	cp	r22, r20
   12f74:	75 07       	cpc	r23, r21
   12f76:	11 f4       	brne	.+4      	; 0x12f7c <find_device+0x42>
   12f78:	82 2f       	mov	r24, r18
   12f7a:	08 95       	ret
   12f7c:	2f 5f       	subi	r18, 0xFF	; 255
   12f7e:	3f 4f       	sbci	r19, 0xFF	; 255
   12f80:	3b 96       	adiw	r30, 0x0b	; 11
   12f82:	2c 30       	cpi	r18, 0x0C	; 12
   12f84:	31 05       	cpc	r19, r1
   12f86:	71 f7       	brne	.-36     	; 0x12f64 <find_device+0x2a>
   12f88:	8f ef       	ldi	r24, 0xFF	; 255
   12f8a:	08 95       	ret

00012f8c <set_active_device>:
   12f8c:	a9 e0       	ldi	r26, 0x09	; 9
   12f8e:	b0 e0       	ldi	r27, 0x00	; 0
   12f90:	ec ec       	ldi	r30, 0xCC	; 204
   12f92:	f7 e9       	ldi	r31, 0x97	; 151
   12f94:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
   12f98:	8f 3f       	cpi	r24, 0xFF	; 255
   12f9a:	09 f4       	brne	.+2      	; 0x12f9e <set_active_device+0x12>
   12f9c:	b5 c0       	rjmp	.+362    	; 0x13108 <set_active_device+0x17c>
   12f9e:	e8 2f       	mov	r30, r24
   12fa0:	8c 30       	cpi	r24, 0x0C	; 12
   12fa2:	a0 f0       	brcs	.+40     	; 0x12fcc <set_active_device+0x40>
   12fa4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12fa8:	80 ff       	sbrs	r24, 0
   12faa:	ae c0       	rjmp	.+348    	; 0x13108 <set_active_device+0x17c>
   12fac:	0e 2e       	mov	r0, r30
   12fae:	00 0c       	add	r0, r0
   12fb0:	ff 0b       	sbc	r31, r31
   12fb2:	cd b7       	in	r28, 0x3d	; 61
   12fb4:	de b7       	in	r29, 0x3e	; 62
   12fb6:	fd 83       	std	Y+5, r31	; 0x05
   12fb8:	ec 83       	std	Y+4, r30	; 0x04
   12fba:	82 e2       	ldi	r24, 0x22	; 34
   12fbc:	9d e1       	ldi	r25, 0x1D	; 29
   12fbe:	a0 e0       	ldi	r26, 0x00	; 0
   12fc0:	89 83       	std	Y+1, r24	; 0x01
   12fc2:	9a 83       	std	Y+2, r25	; 0x02
   12fc4:	ab 83       	std	Y+3, r26	; 0x03
   12fc6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   12fca:	9e c0       	rjmp	.+316    	; 0x13108 <set_active_device+0x17c>
   12fcc:	08 2f       	mov	r16, r24
   12fce:	88 0f       	add	r24, r24
   12fd0:	11 0b       	sbc	r17, r17
   12fd2:	8b e0       	ldi	r24, 0x0B	; 11
   12fd4:	e8 02       	muls	r30, r24
   12fd6:	f0 01       	movw	r30, r0
   12fd8:	11 24       	eor	r1, r1
   12fda:	ec 50       	subi	r30, 0x0C	; 12
   12fdc:	f1 4e       	sbci	r31, 0xE1	; 225
   12fde:	81 81       	ldd	r24, Z+1	; 0x01
   12fe0:	8f 31       	cpi	r24, 0x1F	; 31
   12fe2:	a0 f0       	brcs	.+40     	; 0x1300c <set_active_device+0x80>
   12fe4:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   12fe8:	90 ff       	sbrs	r25, 0
   12fea:	8e c0       	rjmp	.+284    	; 0x13108 <set_active_device+0x17c>
   12fec:	90 e0       	ldi	r25, 0x00	; 0
   12fee:	cd b7       	in	r28, 0x3d	; 61
   12ff0:	de b7       	in	r29, 0x3e	; 62
   12ff2:	9f 83       	std	Y+7, r25	; 0x07
   12ff4:	8e 83       	std	Y+6, r24	; 0x06
   12ff6:	1d 83       	std	Y+5, r17	; 0x05
   12ff8:	0c 83       	std	Y+4, r16	; 0x04
   12ffa:	89 ee       	ldi	r24, 0xE9	; 233
   12ffc:	9c e1       	ldi	r25, 0x1C	; 28
   12ffe:	a0 e0       	ldi	r26, 0x00	; 0
   13000:	89 83       	std	Y+1, r24	; 0x01
   13002:	9a 83       	std	Y+2, r25	; 0x02
   13004:	ab 83       	std	Y+3, r26	; 0x03
   13006:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1300a:	7e c0       	rjmp	.+252    	; 0x13108 <set_active_device+0x17c>
   1300c:	20 81       	ld	r18, Z
   1300e:	c2 2f       	mov	r28, r18
   13010:	d0 e0       	ldi	r29, 0x00	; 0
   13012:	87 81       	ldd	r24, Z+7	; 0x07
   13014:	90 85       	ldd	r25, Z+8	; 0x08
   13016:	00 97       	sbiw	r24, 0x00	; 0
   13018:	89 f4       	brne	.+34     	; 0x1303c <set_active_device+0xb0>
   1301a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1301e:	80 ff       	sbrs	r24, 0
   13020:	73 c0       	rjmp	.+230    	; 0x13108 <set_active_device+0x17c>
   13022:	ce 01       	movw	r24, r28
   13024:	6d df       	rcall	.-294    	; 0x12f00 <type_to_str>
   13026:	ed b7       	in	r30, 0x3d	; 61
   13028:	fe b7       	in	r31, 0x3e	; 62
   1302a:	91 87       	std	Z+9, r25	; 0x09
   1302c:	80 87       	std	Z+8, r24	; 0x08
   1302e:	d7 83       	std	Z+7, r29	; 0x07
   13030:	c6 83       	std	Z+6, r28	; 0x06
   13032:	15 83       	std	Z+5, r17	; 0x05
   13034:	04 83       	std	Z+4, r16	; 0x04
   13036:	84 eb       	ldi	r24, 0xB4	; 180
   13038:	9c e1       	ldi	r25, 0x1C	; 28
   1303a:	5e c0       	rjmp	.+188    	; 0x130f8 <set_active_device+0x16c>
   1303c:	20 97       	sbiw	r28, 0x00	; 0
   1303e:	91 f4       	brne	.+36     	; 0x13064 <set_active_device+0xd8>
   13040:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13044:	80 ff       	sbrs	r24, 0
   13046:	60 c0       	rjmp	.+192    	; 0x13108 <set_active_device+0x17c>
   13048:	80 e0       	ldi	r24, 0x00	; 0
   1304a:	90 e0       	ldi	r25, 0x00	; 0
   1304c:	59 df       	rcall	.-334    	; 0x12f00 <type_to_str>
   1304e:	ed b7       	in	r30, 0x3d	; 61
   13050:	fe b7       	in	r31, 0x3e	; 62
   13052:	91 87       	std	Z+9, r25	; 0x09
   13054:	80 87       	std	Z+8, r24	; 0x08
   13056:	17 82       	std	Z+7, r1	; 0x07
   13058:	16 82       	std	Z+6, r1	; 0x06
   1305a:	15 83       	std	Z+5, r17	; 0x05
   1305c:	04 83       	std	Z+4, r16	; 0x04
   1305e:	8f e7       	ldi	r24, 0x7F	; 127
   13060:	9c e1       	ldi	r25, 0x1C	; 28
   13062:	4a c0       	rjmp	.+148    	; 0x130f8 <set_active_device+0x16c>
   13064:	c4 30       	cpi	r28, 0x04	; 4
   13066:	d1 05       	cpc	r29, r1
   13068:	29 f4       	brne	.+10     	; 0x13074 <set_active_device+0xe8>
   1306a:	90 93 6b 19 	sts	0x196B, r25	; 0x80196b <PRINTERp+0x1>
   1306e:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <PRINTERp>
   13072:	30 c0       	rjmp	.+96     	; 0x130d4 <set_active_device+0x148>
   13074:	2d 7f       	andi	r18, 0xFD	; 253
   13076:	21 30       	cpi	r18, 0x01	; 1
   13078:	79 f5       	brne	.+94     	; 0x130d8 <set_active_device+0x14c>
   1307a:	21 85       	ldd	r18, Z+9	; 0x09
   1307c:	32 85       	ldd	r19, Z+10	; 0x0a
   1307e:	21 15       	cp	r18, r1
   13080:	31 05       	cpc	r19, r1
   13082:	89 f4       	brne	.+34     	; 0x130a6 <set_active_device+0x11a>
   13084:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13088:	80 ff       	sbrs	r24, 0
   1308a:	3e c0       	rjmp	.+124    	; 0x13108 <set_active_device+0x17c>
   1308c:	ce 01       	movw	r24, r28
   1308e:	38 df       	rcall	.-400    	; 0x12f00 <type_to_str>
   13090:	ed b7       	in	r30, 0x3d	; 61
   13092:	fe b7       	in	r31, 0x3e	; 62
   13094:	91 87       	std	Z+9, r25	; 0x09
   13096:	80 87       	std	Z+8, r24	; 0x08
   13098:	d7 83       	std	Z+7, r29	; 0x07
   1309a:	c6 83       	std	Z+6, r28	; 0x06
   1309c:	15 83       	std	Z+5, r17	; 0x05
   1309e:	04 83       	std	Z+4, r16	; 0x04
   130a0:	87 e4       	ldi	r24, 0x47	; 71
   130a2:	9c e1       	ldi	r25, 0x1C	; 28
   130a4:	29 c0       	rjmp	.+82     	; 0x130f8 <set_active_device+0x16c>
   130a6:	c1 30       	cpi	r28, 0x01	; 1
   130a8:	d1 05       	cpc	r29, r1
   130aa:	49 f4       	brne	.+18     	; 0x130be <set_active_device+0x132>
   130ac:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   130b0:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   130b4:	30 93 63 19 	sts	0x1963, r19	; 0x801963 <AMIGOs+0x1>
   130b8:	20 93 62 19 	sts	0x1962, r18	; 0x801962 <AMIGOs>
   130bc:	0b c0       	rjmp	.+22     	; 0x130d4 <set_active_device+0x148>
   130be:	c3 30       	cpi	r28, 0x03	; 3
   130c0:	d1 05       	cpc	r29, r1
   130c2:	51 f4       	brne	.+20     	; 0x130d8 <set_active_device+0x14c>
   130c4:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   130c8:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   130cc:	30 93 67 19 	sts	0x1967, r19	; 0x801967 <SS80s+0x1>
   130d0:	20 93 66 19 	sts	0x1966, r18	; 0x801966 <SS80s>
   130d4:	81 e0       	ldi	r24, 0x01	; 1
   130d6:	19 c0       	rjmp	.+50     	; 0x1310a <set_active_device+0x17e>
   130d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   130dc:	80 ff       	sbrs	r24, 0
   130de:	14 c0       	rjmp	.+40     	; 0x13108 <set_active_device+0x17c>
   130e0:	ce 01       	movw	r24, r28
   130e2:	0e df       	rcall	.-484    	; 0x12f00 <type_to_str>
   130e4:	ed b7       	in	r30, 0x3d	; 61
   130e6:	fe b7       	in	r31, 0x3e	; 62
   130e8:	91 87       	std	Z+9, r25	; 0x09
   130ea:	80 87       	std	Z+8, r24	; 0x08
   130ec:	d7 83       	std	Z+7, r29	; 0x07
   130ee:	c6 83       	std	Z+6, r28	; 0x06
   130f0:	15 83       	std	Z+5, r17	; 0x05
   130f2:	04 83       	std	Z+4, r16	; 0x04
   130f4:	8c e1       	ldi	r24, 0x1C	; 28
   130f6:	9c e1       	ldi	r25, 0x1C	; 28
   130f8:	a0 e0       	ldi	r26, 0x00	; 0
   130fa:	cd b7       	in	r28, 0x3d	; 61
   130fc:	de b7       	in	r29, 0x3e	; 62
   130fe:	89 83       	std	Y+1, r24	; 0x01
   13100:	9a 83       	std	Y+2, r25	; 0x02
   13102:	ab 83       	std	Y+3, r26	; 0x03
   13104:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   13108:	80 e0       	ldi	r24, 0x00	; 0
   1310a:	cd b7       	in	r28, 0x3d	; 61
   1310c:	de b7       	in	r29, 0x3e	; 62
   1310e:	29 96       	adiw	r28, 0x09	; 9
   13110:	e4 e0       	ldi	r30, 0x04	; 4
   13112:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00013116 <SS80_Set_Defaults>:
   13116:	0f 93       	push	r16
   13118:	1f 93       	push	r17
   1311a:	cf 93       	push	r28
   1311c:	df 93       	push	r29
   1311e:	18 2f       	mov	r17, r24
   13120:	82 e0       	ldi	r24, 0x02	; 2
   13122:	90 e0       	ldi	r25, 0x00	; 0
   13124:	ca de       	rcall	.-620    	; 0x12eba <find_type>
   13126:	87 fd       	sbrc	r24, 7
   13128:	69 c0       	rjmp	.+210    	; 0x131fc <SS80_Set_Defaults+0xe6>
   1312a:	2b e0       	ldi	r18, 0x0B	; 11
   1312c:	12 03       	mulsu	r17, r18
   1312e:	e0 01       	movw	r28, r0
   13130:	11 24       	eor	r1, r1
   13132:	cc 50       	subi	r28, 0x0C	; 12
   13134:	d1 4e       	sbci	r29, 0xE1	; 225
   13136:	0f 80       	ldd	r0, Y+7	; 0x07
   13138:	d8 85       	ldd	r29, Y+8	; 0x08
   1313a:	c0 2d       	mov	r28, r0
   1313c:	38 2f       	mov	r19, r24
   1313e:	32 03       	mulsu	r19, r18
   13140:	f0 01       	movw	r30, r0
   13142:	11 24       	eor	r1, r1
   13144:	ec 50       	subi	r30, 0x0C	; 12
   13146:	f1 4e       	sbci	r31, 0xE1	; 225
   13148:	07 81       	ldd	r16, Z+7	; 0x07
   1314a:	10 85       	ldd	r17, Z+8	; 0x08
   1314c:	f8 01       	movw	r30, r16
   1314e:	80 81       	ld	r24, Z
   13150:	88 83       	st	Y, r24
   13152:	81 81       	ldd	r24, Z+1	; 0x01
   13154:	89 83       	std	Y+1, r24	; 0x01
   13156:	82 81       	ldd	r24, Z+2	; 0x02
   13158:	93 81       	ldd	r25, Z+3	; 0x03
   1315a:	0e 94 21 32 	call	0x6442	; 0x6442 <stralloc>
   1315e:	9b 83       	std	Y+3, r25	; 0x03
   13160:	8a 83       	std	Y+2, r24	; 0x02
   13162:	f8 01       	movw	r30, r16
   13164:	86 81       	ldd	r24, Z+6	; 0x06
   13166:	97 81       	ldd	r25, Z+7	; 0x07
   13168:	9f 83       	std	Y+7, r25	; 0x07
   1316a:	8e 83       	std	Y+6, r24	; 0x06
   1316c:	80 85       	ldd	r24, Z+8	; 0x08
   1316e:	91 85       	ldd	r25, Z+9	; 0x09
   13170:	99 87       	std	Y+9, r25	; 0x09
   13172:	88 87       	std	Y+8, r24	; 0x08
   13174:	82 85       	ldd	r24, Z+10	; 0x0a
   13176:	93 85       	ldd	r25, Z+11	; 0x0b
   13178:	9b 87       	std	Y+11, r25	; 0x0b
   1317a:	8a 87       	std	Y+10, r24	; 0x0a
   1317c:	84 85       	ldd	r24, Z+12	; 0x0c
   1317e:	8c 87       	std	Y+12, r24	; 0x0c
   13180:	85 85       	ldd	r24, Z+13	; 0x0d
   13182:	8d 87       	std	Y+13, r24	; 0x0d
   13184:	86 85       	ldd	r24, Z+14	; 0x0e
   13186:	97 85       	ldd	r25, Z+15	; 0x0f
   13188:	a0 89       	ldd	r26, Z+16	; 0x10
   1318a:	b1 89       	ldd	r27, Z+17	; 0x11
   1318c:	8e 87       	std	Y+14, r24	; 0x0e
   1318e:	9f 87       	std	Y+15, r25	; 0x0f
   13190:	a8 8b       	std	Y+16, r26	; 0x10
   13192:	b9 8b       	std	Y+17, r27	; 0x11
   13194:	82 89       	ldd	r24, Z+18	; 0x12
   13196:	93 89       	ldd	r25, Z+19	; 0x13
   13198:	9b 8b       	std	Y+19, r25	; 0x13
   1319a:	8a 8b       	std	Y+18, r24	; 0x12
   1319c:	84 89       	ldd	r24, Z+20	; 0x14
   1319e:	8c 8b       	std	Y+20, r24	; 0x14
   131a0:	85 89       	ldd	r24, Z+21	; 0x15
   131a2:	8d 8b       	std	Y+21, r24	; 0x15
   131a4:	86 89       	ldd	r24, Z+22	; 0x16
   131a6:	97 89       	ldd	r25, Z+23	; 0x17
   131a8:	9f 8b       	std	Y+23, r25	; 0x17
   131aa:	8e 8b       	std	Y+22, r24	; 0x16
   131ac:	80 8d       	ldd	r24, Z+24	; 0x18
   131ae:	91 8d       	ldd	r25, Z+25	; 0x19
   131b0:	99 8f       	std	Y+25, r25	; 0x19
   131b2:	88 8f       	std	Y+24, r24	; 0x18
   131b4:	82 8d       	ldd	r24, Z+26	; 0x1a
   131b6:	93 8d       	ldd	r25, Z+27	; 0x1b
   131b8:	9b 8f       	std	Y+27, r25	; 0x1b
   131ba:	8a 8f       	std	Y+26, r24	; 0x1a
   131bc:	84 8d       	ldd	r24, Z+28	; 0x1c
   131be:	95 8d       	ldd	r25, Z+29	; 0x1d
   131c0:	9d 8f       	std	Y+29, r25	; 0x1d
   131c2:	8c 8f       	std	Y+28, r24	; 0x1c
   131c4:	86 8d       	ldd	r24, Z+30	; 0x1e
   131c6:	8e 8f       	std	Y+30, r24	; 0x1e
   131c8:	87 8d       	ldd	r24, Z+31	; 0x1f
   131ca:	8f 8f       	std	Y+31, r24	; 0x1f
   131cc:	81 a1       	ldd	r24, Z+33	; 0x21
   131ce:	92 a1       	ldd	r25, Z+34	; 0x22
   131d0:	a3 a1       	ldd	r26, Z+35	; 0x23
   131d2:	b4 a1       	ldd	r27, Z+36	; 0x24
   131d4:	89 a3       	std	Y+33, r24	; 0x21
   131d6:	9a a3       	std	Y+34, r25	; 0x22
   131d8:	ab a3       	std	Y+35, r26	; 0x23
   131da:	bc a3       	std	Y+36, r27	; 0x24
   131dc:	85 a1       	ldd	r24, Z+37	; 0x25
   131de:	8d a3       	std	Y+37, r24	; 0x25
   131e0:	86 a1       	ldd	r24, Z+38	; 0x26
   131e2:	97 a1       	ldd	r25, Z+39	; 0x27
   131e4:	9f a3       	std	Y+39, r25	; 0x27
   131e6:	8e a3       	std	Y+38, r24	; 0x26
   131e8:	80 a5       	ldd	r24, Z+40	; 0x28
   131ea:	91 a5       	ldd	r25, Z+41	; 0x29
   131ec:	a2 a5       	ldd	r26, Z+42	; 0x2a
   131ee:	b3 a5       	ldd	r27, Z+43	; 0x2b
   131f0:	88 a7       	std	Y+40, r24	; 0x28
   131f2:	99 a7       	std	Y+41, r25	; 0x29
   131f4:	aa a7       	std	Y+42, r26	; 0x2a
   131f6:	bb a7       	std	Y+43, r27	; 0x2b
   131f8:	84 a5       	ldd	r24, Z+44	; 0x2c
   131fa:	8c a7       	std	Y+44, r24	; 0x2c
   131fc:	df 91       	pop	r29
   131fe:	cf 91       	pop	r28
   13200:	1f 91       	pop	r17
   13202:	0f 91       	pop	r16
   13204:	08 95       	ret

00013206 <free_device>:
   13206:	0f 93       	push	r16
   13208:	1f 93       	push	r17
   1320a:	cf 93       	push	r28
   1320c:	df 93       	push	r29
   1320e:	8c 30       	cpi	r24, 0x0C	; 12
   13210:	08 f0       	brcs	.+2      	; 0x13214 <free_device+0xe>
   13212:	55 c0       	rjmp	.+170    	; 0x132be <free_device+0xb8>
   13214:	08 2f       	mov	r16, r24
   13216:	08 2e       	mov	r0, r24
   13218:	00 0c       	add	r0, r0
   1321a:	11 0b       	sbc	r17, r17
   1321c:	9b e0       	ldi	r25, 0x0B	; 11
   1321e:	89 02       	muls	r24, r25
   13220:	f0 01       	movw	r30, r0
   13222:	11 24       	eor	r1, r1
   13224:	ec 50       	subi	r30, 0x0C	; 12
   13226:	f1 4e       	sbci	r31, 0xE1	; 225
   13228:	80 81       	ld	r24, Z
   1322a:	83 30       	cpi	r24, 0x03	; 3
   1322c:	51 f4       	brne	.+20     	; 0x13242 <free_device+0x3c>
   1322e:	c7 81       	ldd	r28, Z+7	; 0x07
   13230:	d0 85       	ldd	r29, Z+8	; 0x08
   13232:	8a 81       	ldd	r24, Y+2	; 0x02
   13234:	9b 81       	ldd	r25, Y+3	; 0x03
   13236:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
   1323a:	8c 81       	ldd	r24, Y+4	; 0x04
   1323c:	9d 81       	ldd	r25, Y+5	; 0x05
   1323e:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
   13242:	8b e0       	ldi	r24, 0x0B	; 11
   13244:	80 9f       	mul	r24, r16
   13246:	f0 01       	movw	r30, r0
   13248:	81 9f       	mul	r24, r17
   1324a:	f0 0d       	add	r31, r0
   1324c:	11 24       	eor	r1, r1
   1324e:	ec 50       	subi	r30, 0x0C	; 12
   13250:	f1 4e       	sbci	r31, 0xE1	; 225
   13252:	80 81       	ld	r24, Z
   13254:	81 30       	cpi	r24, 0x01	; 1
   13256:	51 f4       	brne	.+20     	; 0x1326c <free_device+0x66>
   13258:	c7 81       	ldd	r28, Z+7	; 0x07
   1325a:	d0 85       	ldd	r29, Z+8	; 0x08
   1325c:	8a 81       	ldd	r24, Y+2	; 0x02
   1325e:	9b 81       	ldd	r25, Y+3	; 0x03
   13260:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
   13264:	8c 81       	ldd	r24, Y+4	; 0x04
   13266:	9d 81       	ldd	r25, Y+5	; 0x05
   13268:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
   1326c:	8b e0       	ldi	r24, 0x0B	; 11
   1326e:	80 9f       	mul	r24, r16
   13270:	f0 01       	movw	r30, r0
   13272:	81 9f       	mul	r24, r17
   13274:	f0 0d       	add	r31, r0
   13276:	11 24       	eor	r1, r1
   13278:	ec 50       	subi	r30, 0x0C	; 12
   1327a:	f1 4e       	sbci	r31, 0xE1	; 225
   1327c:	80 81       	ld	r24, Z
   1327e:	84 30       	cpi	r24, 0x04	; 4
   13280:	11 f4       	brne	.+4      	; 0x13286 <free_device+0x80>
   13282:	0e 94 d9 be 	call	0x17db2	; 0x17db2 <printer_close>
   13286:	8b e0       	ldi	r24, 0x0B	; 11
   13288:	80 9f       	mul	r24, r16
   1328a:	e0 01       	movw	r28, r0
   1328c:	81 9f       	mul	r24, r17
   1328e:	d0 0d       	add	r29, r0
   13290:	11 24       	eor	r1, r1
   13292:	cc 50       	subi	r28, 0x0C	; 12
   13294:	d1 4e       	sbci	r29, 0xE1	; 225
   13296:	8f 81       	ldd	r24, Y+7	; 0x07
   13298:	98 85       	ldd	r25, Y+8	; 0x08
   1329a:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
   1329e:	89 85       	ldd	r24, Y+9	; 0x09
   132a0:	9a 85       	ldd	r25, Y+10	; 0x0a
   132a2:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
   132a6:	18 82       	st	Y, r1
   132a8:	19 82       	std	Y+1, r1	; 0x01
   132aa:	8f ef       	ldi	r24, 0xFF	; 255
   132ac:	8a 83       	std	Y+2, r24	; 0x02
   132ae:	1b 82       	std	Y+3, r1	; 0x03
   132b0:	1c 82       	std	Y+4, r1	; 0x04
   132b2:	1d 82       	std	Y+5, r1	; 0x05
   132b4:	1e 82       	std	Y+6, r1	; 0x06
   132b6:	18 86       	std	Y+8, r1	; 0x08
   132b8:	1f 82       	std	Y+7, r1	; 0x07
   132ba:	1a 86       	std	Y+10, r1	; 0x0a
   132bc:	19 86       	std	Y+9, r1	; 0x09
   132be:	df 91       	pop	r29
   132c0:	cf 91       	pop	r28
   132c2:	1f 91       	pop	r17
   132c4:	0f 91       	pop	r16
   132c6:	08 95       	ret

000132c8 <alloc_device>:
   132c8:	0f 93       	push	r16
   132ca:	1f 93       	push	r17
   132cc:	cf 93       	push	r28
   132ce:	ad b7       	in	r26, 0x3d	; 61
   132d0:	be b7       	in	r27, 0x3e	; 62
   132d2:	17 97       	sbiw	r26, 0x07	; 7
   132d4:	0f b6       	in	r0, 0x3f	; 63
   132d6:	f8 94       	cli
   132d8:	be bf       	out	0x3e, r27	; 62
   132da:	0f be       	out	0x3f, r0	; 63
   132dc:	ad bf       	out	0x3d, r26	; 61
   132de:	8c 01       	movw	r16, r24
   132e0:	28 de       	rcall	.-944    	; 0x12f32 <find_free>
   132e2:	c8 2f       	mov	r28, r24
   132e4:	8f 3f       	cpi	r24, 0xFF	; 255
   132e6:	89 f4       	brne	.+34     	; 0x1330a <alloc_device+0x42>
   132e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   132ec:	80 ff       	sbrs	r24, 0
   132ee:	98 c0       	rjmp	.+304    	; 0x13420 <alloc_device+0x158>
   132f0:	ed b7       	in	r30, 0x3d	; 61
   132f2:	fe b7       	in	r31, 0x3e	; 62
   132f4:	15 83       	std	Z+5, r17	; 0x05
   132f6:	04 83       	std	Z+4, r16	; 0x04
   132f8:	88 ef       	ldi	r24, 0xF8	; 248
   132fa:	9b e1       	ldi	r25, 0x1B	; 27
   132fc:	a0 e0       	ldi	r26, 0x00	; 0
   132fe:	81 83       	std	Z+1, r24	; 0x01
   13300:	92 83       	std	Z+2, r25	; 0x02
   13302:	a3 83       	std	Z+3, r26	; 0x03
   13304:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   13308:	8b c0       	rjmp	.+278    	; 0x13420 <alloc_device+0x158>
   1330a:	02 30       	cpi	r16, 0x02	; 2
   1330c:	11 05       	cpc	r17, r1
   1330e:	c1 f1       	breq	.+112    	; 0x13380 <alloc_device+0xb8>
   13310:	dc f4       	brge	.+54     	; 0x13348 <alloc_device+0x80>
   13312:	01 30       	cpi	r16, 0x01	; 1
   13314:	11 05       	cpc	r17, r1
   13316:	09 f0       	breq	.+2      	; 0x1331a <alloc_device+0x52>
   13318:	6e c0       	rjmp	.+220    	; 0x133f6 <alloc_device+0x12e>
   1331a:	fb e0       	ldi	r31, 0x0B	; 11
   1331c:	8f 02       	muls	r24, r31
   1331e:	80 01       	movw	r16, r0
   13320:	11 24       	eor	r1, r1
   13322:	0c 50       	subi	r16, 0x0C	; 12
   13324:	11 4e       	sbci	r17, 0xE1	; 225
   13326:	81 e0       	ldi	r24, 0x01	; 1
   13328:	f8 01       	movw	r30, r16
   1332a:	80 83       	st	Z, r24
   1332c:	61 e0       	ldi	r22, 0x01	; 1
   1332e:	70 e0       	ldi	r23, 0x00	; 0
   13330:	87 e1       	ldi	r24, 0x17	; 23
   13332:	90 e0       	ldi	r25, 0x00	; 0
   13334:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
   13338:	f8 01       	movw	r30, r16
   1333a:	90 87       	std	Z+8, r25	; 0x08
   1333c:	87 83       	std	Z+7, r24	; 0x07
   1333e:	61 e0       	ldi	r22, 0x01	; 1
   13340:	70 e0       	ldi	r23, 0x00	; 0
   13342:	88 e1       	ldi	r24, 0x18	; 24
   13344:	90 e0       	ldi	r25, 0x00	; 0
   13346:	51 c0       	rjmp	.+162    	; 0x133ea <alloc_device+0x122>
   13348:	03 30       	cpi	r16, 0x03	; 3
   1334a:	11 05       	cpc	r17, r1
   1334c:	81 f1       	breq	.+96     	; 0x133ae <alloc_device+0xe6>
   1334e:	04 30       	cpi	r16, 0x04	; 4
   13350:	11 05       	cpc	r17, r1
   13352:	09 f0       	breq	.+2      	; 0x13356 <alloc_device+0x8e>
   13354:	50 c0       	rjmp	.+160    	; 0x133f6 <alloc_device+0x12e>
   13356:	fb e0       	ldi	r31, 0x0B	; 11
   13358:	8f 02       	muls	r24, r31
   1335a:	80 01       	movw	r16, r0
   1335c:	11 24       	eor	r1, r1
   1335e:	0c 50       	subi	r16, 0x0C	; 12
   13360:	11 4e       	sbci	r17, 0xE1	; 225
   13362:	84 e0       	ldi	r24, 0x04	; 4
   13364:	f8 01       	movw	r30, r16
   13366:	80 83       	st	Z, r24
   13368:	61 e0       	ldi	r22, 0x01	; 1
   1336a:	70 e0       	ldi	r23, 0x00	; 0
   1336c:	8d e0       	ldi	r24, 0x0D	; 13
   1336e:	90 e0       	ldi	r25, 0x00	; 0
   13370:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
   13374:	f8 01       	movw	r30, r16
   13376:	90 87       	std	Z+8, r25	; 0x08
   13378:	87 83       	std	Z+7, r24	; 0x07
   1337a:	12 86       	std	Z+10, r1	; 0x0a
   1337c:	11 86       	std	Z+9, r1	; 0x09
   1337e:	50 c0       	rjmp	.+160    	; 0x13420 <alloc_device+0x158>
   13380:	fb e0       	ldi	r31, 0x0B	; 11
   13382:	8f 02       	muls	r24, r31
   13384:	80 01       	movw	r16, r0
   13386:	11 24       	eor	r1, r1
   13388:	0c 50       	subi	r16, 0x0C	; 12
   1338a:	11 4e       	sbci	r17, 0xE1	; 225
   1338c:	82 e0       	ldi	r24, 0x02	; 2
   1338e:	f8 01       	movw	r30, r16
   13390:	80 83       	st	Z, r24
   13392:	61 e0       	ldi	r22, 0x01	; 1
   13394:	70 e0       	ldi	r23, 0x00	; 0
   13396:	84 e3       	ldi	r24, 0x34	; 52
   13398:	90 e0       	ldi	r25, 0x00	; 0
   1339a:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
   1339e:	f8 01       	movw	r30, r16
   133a0:	90 87       	std	Z+8, r25	; 0x08
   133a2:	87 83       	std	Z+7, r24	; 0x07
   133a4:	61 e0       	ldi	r22, 0x01	; 1
   133a6:	70 e0       	ldi	r23, 0x00	; 0
   133a8:	86 e1       	ldi	r24, 0x16	; 22
   133aa:	90 e0       	ldi	r25, 0x00	; 0
   133ac:	1e c0       	rjmp	.+60     	; 0x133ea <alloc_device+0x122>
   133ae:	fb e0       	ldi	r31, 0x0B	; 11
   133b0:	8f 02       	muls	r24, r31
   133b2:	80 01       	movw	r16, r0
   133b4:	11 24       	eor	r1, r1
   133b6:	0c 50       	subi	r16, 0x0C	; 12
   133b8:	11 4e       	sbci	r17, 0xE1	; 225
   133ba:	83 e0       	ldi	r24, 0x03	; 3
   133bc:	f8 01       	movw	r30, r16
   133be:	80 83       	st	Z, r24
   133c0:	61 e0       	ldi	r22, 0x01	; 1
   133c2:	70 e0       	ldi	r23, 0x00	; 0
   133c4:	84 e3       	ldi	r24, 0x34	; 52
   133c6:	90 e0       	ldi	r25, 0x00	; 0
   133c8:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
   133cc:	f8 01       	movw	r30, r16
   133ce:	90 87       	std	Z+8, r25	; 0x08
   133d0:	87 83       	std	Z+7, r24	; 0x07
   133d2:	61 e0       	ldi	r22, 0x01	; 1
   133d4:	70 e0       	ldi	r23, 0x00	; 0
   133d6:	86 e1       	ldi	r24, 0x16	; 22
   133d8:	90 e0       	ldi	r25, 0x00	; 0
   133da:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
   133de:	f8 01       	movw	r30, r16
   133e0:	92 87       	std	Z+10, r25	; 0x0a
   133e2:	81 87       	std	Z+9, r24	; 0x09
   133e4:	8c 2f       	mov	r24, r28
   133e6:	97 de       	rcall	.-722    	; 0x13116 <SS80_Set_Defaults>
   133e8:	1b c0       	rjmp	.+54     	; 0x13420 <alloc_device+0x158>
   133ea:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
   133ee:	f8 01       	movw	r30, r16
   133f0:	92 87       	std	Z+10, r25	; 0x0a
   133f2:	81 87       	std	Z+9, r24	; 0x09
   133f4:	15 c0       	rjmp	.+42     	; 0x13420 <alloc_device+0x158>
   133f6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   133fa:	80 ff       	sbrs	r24, 0
   133fc:	10 c0       	rjmp	.+32     	; 0x1341e <alloc_device+0x156>
   133fe:	c8 01       	movw	r24, r16
   13400:	7f dd       	rcall	.-1282   	; 0x12f00 <type_to_str>
   13402:	ed b7       	in	r30, 0x3d	; 61
   13404:	fe b7       	in	r31, 0x3e	; 62
   13406:	97 83       	std	Z+7, r25	; 0x07
   13408:	86 83       	std	Z+6, r24	; 0x06
   1340a:	15 83       	std	Z+5, r17	; 0x05
   1340c:	04 83       	std	Z+4, r16	; 0x04
   1340e:	86 ed       	ldi	r24, 0xD6	; 214
   13410:	9b e1       	ldi	r25, 0x1B	; 27
   13412:	a0 e0       	ldi	r26, 0x00	; 0
   13414:	81 83       	std	Z+1, r24	; 0x01
   13416:	92 83       	std	Z+2, r25	; 0x02
   13418:	a3 83       	std	Z+3, r26	; 0x03
   1341a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1341e:	cf ef       	ldi	r28, 0xFF	; 255
   13420:	8c 2f       	mov	r24, r28
   13422:	ad b7       	in	r26, 0x3d	; 61
   13424:	be b7       	in	r27, 0x3e	; 62
   13426:	17 96       	adiw	r26, 0x07	; 7
   13428:	0f b6       	in	r0, 0x3f	; 63
   1342a:	f8 94       	cli
   1342c:	be bf       	out	0x3e, r27	; 62
   1342e:	0f be       	out	0x3f, r0	; 63
   13430:	ad bf       	out	0x3d, r26	; 61
   13432:	cf 91       	pop	r28
   13434:	1f 91       	pop	r17
   13436:	0f 91       	pop	r16
   13438:	08 95       	ret

0001343a <init_Devices>:
   1343a:	10 92 77 19 	sts	0x1977, r1	; 0x801977 <stack_ind+0x1>
   1343e:	10 92 76 19 	sts	0x1976, r1	; 0x801976 <stack_ind>
   13442:	e4 ef       	ldi	r30, 0xF4	; 244
   13444:	fe e1       	ldi	r31, 0x1E	; 30
   13446:	8f ef       	ldi	r24, 0xFF	; 255
   13448:	10 82       	st	Z, r1
   1344a:	11 82       	std	Z+1, r1	; 0x01
   1344c:	82 83       	std	Z+2, r24	; 0x02
   1344e:	13 82       	std	Z+3, r1	; 0x03
   13450:	14 82       	std	Z+4, r1	; 0x04
   13452:	15 82       	std	Z+5, r1	; 0x05
   13454:	16 82       	std	Z+6, r1	; 0x06
   13456:	10 86       	std	Z+8, r1	; 0x08
   13458:	17 82       	std	Z+7, r1	; 0x07
   1345a:	12 86       	std	Z+10, r1	; 0x0a
   1345c:	11 86       	std	Z+9, r1	; 0x09
   1345e:	3b 96       	adiw	r30, 0x0b	; 11
   13460:	9f e1       	ldi	r25, 0x1F	; 31
   13462:	e8 37       	cpi	r30, 0x78	; 120
   13464:	f9 07       	cpc	r31, r25
   13466:	81 f7       	brne	.-32     	; 0x13448 <init_Devices+0xe>
   13468:	08 95       	ret

0001346a <push_state>:
   1346a:	20 91 76 19 	lds	r18, 0x1976	; 0x801976 <stack_ind>
   1346e:	30 91 77 19 	lds	r19, 0x1977	; 0x801977 <stack_ind+0x1>
   13472:	25 30       	cpi	r18, 0x05	; 5
   13474:	31 05       	cpc	r19, r1
   13476:	7c f4       	brge	.+30     	; 0x13496 <push_state+0x2c>
   13478:	a9 01       	movw	r20, r18
   1347a:	4f 5f       	subi	r20, 0xFF	; 255
   1347c:	5f 4f       	sbci	r21, 0xFF	; 255
   1347e:	50 93 77 19 	sts	0x1977, r21	; 0x801977 <stack_ind+0x1>
   13482:	40 93 76 19 	sts	0x1976, r20	; 0x801976 <stack_ind>
   13486:	22 0f       	add	r18, r18
   13488:	33 1f       	adc	r19, r19
   1348a:	f9 01       	movw	r30, r18
   1348c:	e4 59       	subi	r30, 0x94	; 148
   1348e:	f6 4e       	sbci	r31, 0xE6	; 230
   13490:	80 83       	st	Z, r24
   13492:	91 83       	std	Z+1, r25	; 0x01
   13494:	08 95       	ret
   13496:	80 e0       	ldi	r24, 0x00	; 0
   13498:	90 e0       	ldi	r25, 0x00	; 0
   1349a:	08 95       	ret

0001349c <pop_state>:
   1349c:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <stack_ind>
   134a0:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <stack_ind+0x1>
   134a4:	18 16       	cp	r1, r24
   134a6:	19 06       	cpc	r1, r25
   134a8:	6c f4       	brge	.+26     	; 0x134c4 <pop_state+0x28>
   134aa:	01 97       	sbiw	r24, 0x01	; 1
   134ac:	90 93 77 19 	sts	0x1977, r25	; 0x801977 <stack_ind+0x1>
   134b0:	80 93 76 19 	sts	0x1976, r24	; 0x801976 <stack_ind>
   134b4:	88 0f       	add	r24, r24
   134b6:	99 1f       	adc	r25, r25
   134b8:	fc 01       	movw	r30, r24
   134ba:	e4 59       	subi	r30, 0x94	; 148
   134bc:	f6 4e       	sbci	r31, 0xE6	; 230
   134be:	80 81       	ld	r24, Z
   134c0:	91 81       	ldd	r25, Z+1	; 0x01
   134c2:	08 95       	ret
   134c4:	80 e0       	ldi	r24, 0x00	; 0
   134c6:	90 e0       	ldi	r25, 0x00	; 0
   134c8:	08 95       	ret

000134ca <set_Config_Defaults>:
   134ca:	08 95       	ret

000134cc <hpdir_set_device>:
   134cc:	cf 93       	push	r28
   134ce:	df 93       	push	r29
   134d0:	00 d0       	rcall	.+0      	; 0x134d2 <hpdir_set_device+0x6>
   134d2:	1f 92       	push	r1
   134d4:	2b e0       	ldi	r18, 0x0B	; 11
   134d6:	82 02       	muls	r24, r18
   134d8:	c0 01       	movw	r24, r0
   134da:	11 24       	eor	r1, r1
   134dc:	fc 01       	movw	r30, r24
   134de:	ec 50       	subi	r30, 0x0C	; 12
   134e0:	f1 4e       	sbci	r31, 0xE1	; 225
   134e2:	80 81       	ld	r24, Z
   134e4:	83 30       	cpi	r24, 0x03	; 3
   134e6:	a1 f5       	brne	.+104    	; 0x13550 <hpdir_set_device+0x84>
   134e8:	c7 81       	ldd	r28, Z+7	; 0x07
   134ea:	d0 85       	ldd	r29, Z+8	; 0x08
   134ec:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   134f0:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   134f4:	9f 83       	std	Y+7, r25	; 0x07
   134f6:	8e 83       	std	Y+6, r24	; 0x06
   134f8:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <hpdir+0x8c>
   134fc:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <hpdir+0x8d>
   13500:	a0 91 06 20 	lds	r26, 0x2006	; 0x802006 <hpdir+0x8e>
   13504:	b0 91 07 20 	lds	r27, 0x2007	; 0x802007 <hpdir+0x8f>
   13508:	8e 87       	std	Y+14, r24	; 0x0e
   1350a:	9f 87       	std	Y+15, r25	; 0x0f
   1350c:	a8 8b       	std	Y+16, r26	; 0x10
   1350e:	b9 8b       	std	Y+17, r27	; 0x11
   13510:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   13514:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   13518:	9b 8b       	std	Y+19, r25	; 0x13
   1351a:	8a 8b       	std	Y+18, r24	; 0x12
   1351c:	19 a2       	std	Y+33, r1	; 0x21
   1351e:	1a a2       	std	Y+34, r1	; 0x22
   13520:	1b a2       	std	Y+35, r1	; 0x23
   13522:	1c a2       	std	Y+36, r1	; 0x24
   13524:	1d a2       	std	Y+37, r1	; 0x25
   13526:	1f a2       	std	Y+39, r1	; 0x27
   13528:	1e a2       	std	Y+38, r1	; 0x26
   1352a:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   1352e:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   13532:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   13536:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   1353a:	ac 01       	movw	r20, r24
   1353c:	bd 01       	movw	r22, r26
   1353e:	41 50       	subi	r20, 0x01	; 1
   13540:	51 09       	sbc	r21, r1
   13542:	61 09       	sbc	r22, r1
   13544:	71 09       	sbc	r23, r1
   13546:	48 a7       	std	Y+40, r20	; 0x28
   13548:	59 a7       	std	Y+41, r21	; 0x29
   1354a:	6a a7       	std	Y+42, r22	; 0x2a
   1354c:	7b a7       	std	Y+43, r23	; 0x2b
   1354e:	2a c0       	rjmp	.+84     	; 0x135a4 <hpdir_set_device+0xd8>
   13550:	81 30       	cpi	r24, 0x01	; 1
   13552:	a1 f5       	brne	.+104    	; 0x135bc <hpdir_set_device+0xf0>
   13554:	c7 81       	ldd	r28, Z+7	; 0x07
   13556:	d0 85       	ldd	r29, Z+8	; 0x08
   13558:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   1355c:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   13560:	9f 83       	std	Y+7, r25	; 0x07
   13562:	8e 83       	std	Y+6, r24	; 0x06
   13564:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   13568:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   1356c:	99 87       	std	Y+9, r25	; 0x09
   1356e:	88 87       	std	Y+8, r24	; 0x08
   13570:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <hpdir+0x9c>
   13574:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <hpdir+0x9d>
   13578:	9b 87       	std	Y+11, r25	; 0x0b
   1357a:	8a 87       	std	Y+10, r24	; 0x0a
   1357c:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <hpdir+0x98>
   13580:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <hpdir+0x99>
   13584:	9d 87       	std	Y+13, r25	; 0x0d
   13586:	8c 87       	std	Y+12, r24	; 0x0c
   13588:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <hpdir+0x94>
   1358c:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <hpdir+0x95>
   13590:	9f 87       	std	Y+15, r25	; 0x0f
   13592:	8e 87       	std	Y+14, r24	; 0x0e
   13594:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   13598:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   1359c:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   135a0:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   135a4:	83 83       	std	Z+3, r24	; 0x03
   135a6:	94 83       	std	Z+4, r25	; 0x04
   135a8:	a5 83       	std	Z+5, r26	; 0x05
   135aa:	b6 83       	std	Z+6, r27	; 0x06
   135ac:	88 e7       	ldi	r24, 0x78	; 120
   135ae:	9f e1       	ldi	r25, 0x1F	; 31
   135b0:	0e 94 21 32 	call	0x6442	; 0x6442 <stralloc>
   135b4:	9d 83       	std	Y+5, r25	; 0x05
   135b6:	8c 83       	std	Y+4, r24	; 0x04
   135b8:	81 e0       	ldi	r24, 0x01	; 1
   135ba:	0b c0       	rjmp	.+22     	; 0x135d2 <hpdir_set_device+0x106>
   135bc:	8e ea       	ldi	r24, 0xAE	; 174
   135be:	9b e1       	ldi	r25, 0x1B	; 27
   135c0:	a0 e0       	ldi	r26, 0x00	; 0
   135c2:	ed b7       	in	r30, 0x3d	; 61
   135c4:	fe b7       	in	r31, 0x3e	; 62
   135c6:	81 83       	std	Z+1, r24	; 0x01
   135c8:	92 83       	std	Z+2, r25	; 0x02
   135ca:	a3 83       	std	Z+3, r26	; 0x03
   135cc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   135d0:	80 e0       	ldi	r24, 0x00	; 0
   135d2:	cd b7       	in	r28, 0x3d	; 61
   135d4:	de b7       	in	r29, 0x3e	; 62
   135d6:	23 96       	adiw	r28, 0x03	; 3
   135d8:	e2 e0       	ldi	r30, 0x02	; 2
   135da:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

000135de <hpdir_set_parameters>:
   135de:	cf 93       	push	r28
   135e0:	00 d0       	rcall	.+0      	; 0x135e2 <hpdir_set_parameters+0x4>
   135e2:	1f 92       	push	r1
   135e4:	c8 2f       	mov	r28, r24
   135e6:	cb 01       	movw	r24, r22
   135e8:	41 e0       	ldi	r20, 0x01	; 1
   135ea:	50 e0       	ldi	r21, 0x00	; 0
   135ec:	60 e0       	ldi	r22, 0x00	; 0
   135ee:	70 e0       	ldi	r23, 0x00	; 0
   135f0:	0e 94 33 a4 	call	0x14866	; 0x14866 <hpdir_find_drive>
   135f4:	89 2b       	or	r24, r25
   135f6:	19 f0       	breq	.+6      	; 0x135fe <hpdir_set_parameters+0x20>
   135f8:	8c 2f       	mov	r24, r28
   135fa:	68 df       	rcall	.-304    	; 0x134cc <hpdir_set_device>
   135fc:	0b c0       	rjmp	.+22     	; 0x13614 <hpdir_set_parameters+0x36>
   135fe:	86 e8       	ldi	r24, 0x86	; 134
   13600:	9b e1       	ldi	r25, 0x1B	; 27
   13602:	a0 e0       	ldi	r26, 0x00	; 0
   13604:	ed b7       	in	r30, 0x3d	; 61
   13606:	fe b7       	in	r31, 0x3e	; 62
   13608:	81 83       	std	Z+1, r24	; 0x01
   1360a:	92 83       	std	Z+2, r25	; 0x02
   1360c:	a3 83       	std	Z+3, r26	; 0x03
   1360e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   13612:	80 e0       	ldi	r24, 0x00	; 0
   13614:	0f 90       	pop	r0
   13616:	0f 90       	pop	r0
   13618:	0f 90       	pop	r0
   1361a:	cf 91       	pop	r28
   1361c:	08 95       	ret

0001361e <format_drives>:
   1361e:	2f 92       	push	r2
   13620:	3f 92       	push	r3
   13622:	4f 92       	push	r4
   13624:	5f 92       	push	r5
   13626:	6f 92       	push	r6
   13628:	7f 92       	push	r7
   1362a:	8f 92       	push	r8
   1362c:	af 92       	push	r10
   1362e:	bf 92       	push	r11
   13630:	cf 92       	push	r12
   13632:	df 92       	push	r13
   13634:	ef 92       	push	r14
   13636:	ff 92       	push	r15
   13638:	0f 93       	push	r16
   1363a:	1f 93       	push	r17
   1363c:	cf 93       	push	r28
   1363e:	df 93       	push	r29
   13640:	cd b7       	in	r28, 0x3d	; 61
   13642:	de b7       	in	r29, 0x3e	; 62
   13644:	ce 56       	subi	r28, 0x6E	; 110
   13646:	d1 09       	sbc	r29, r1
   13648:	0f b6       	in	r0, 0x3f	; 63
   1364a:	f8 94       	cli
   1364c:	de bf       	out	0x3e, r29	; 62
   1364e:	0f be       	out	0x3f, r0	; 63
   13650:	cd bf       	out	0x3d, r28	; 61
   13652:	84 ef       	ldi	r24, 0xF4	; 244
   13654:	c8 2e       	mov	r12, r24
   13656:	8e e1       	ldi	r24, 0x1E	; 30
   13658:	d8 2e       	mov	r13, r24
   1365a:	a0 96       	adiw	r28, 0x20	; 32
   1365c:	1f ae       	std	Y+63, r1	; 0x3f
   1365e:	1e ae       	std	Y+62, r1	; 0x3e
   13660:	a0 97       	sbiw	r28, 0x20	; 32
   13662:	6e 96       	adiw	r28, 0x1e	; 30
   13664:	1f ae       	std	Y+63, r1	; 0x3f
   13666:	1e ae       	std	Y+62, r1	; 0x3e
   13668:	6e 97       	sbiw	r28, 0x1e	; 30
   1366a:	6c 96       	adiw	r28, 0x1c	; 28
   1366c:	1f ae       	std	Y+63, r1	; 0x3f
   1366e:	1e ae       	std	Y+62, r1	; 0x3e
   13670:	6c 97       	sbiw	r28, 0x1c	; 28
   13672:	83 e6       	ldi	r24, 0x63	; 99
   13674:	9a e1       	ldi	r25, 0x1A	; 26
   13676:	9c 01       	movw	r18, r24
   13678:	40 e0       	ldi	r20, 0x00	; 0
   1367a:	a3 96       	adiw	r28, 0x23	; 35
   1367c:	2d af       	std	Y+61, r18	; 0x3d
   1367e:	3e af       	std	Y+62, r19	; 0x3e
   13680:	4f af       	std	Y+63, r20	; 0x3f
   13682:	a3 97       	sbiw	r28, 0x23	; 35
   13684:	8b e5       	ldi	r24, 0x5B	; 91
   13686:	9a e1       	ldi	r25, 0x1A	; 26
   13688:	9c 01       	movw	r18, r24
   1368a:	40 e0       	ldi	r20, 0x00	; 0
   1368c:	a6 96       	adiw	r28, 0x26	; 38
   1368e:	2d af       	std	Y+61, r18	; 0x3d
   13690:	3e af       	std	Y+62, r19	; 0x3e
   13692:	4f af       	std	Y+63, r20	; 0x3f
   13694:	a6 97       	sbiw	r28, 0x26	; 38
   13696:	8d e7       	ldi	r24, 0x7D	; 125
   13698:	9a e1       	ldi	r25, 0x1A	; 26
   1369a:	9c 01       	movw	r18, r24
   1369c:	40 e0       	ldi	r20, 0x00	; 0
   1369e:	a9 96       	adiw	r28, 0x29	; 41
   136a0:	2d af       	std	Y+61, r18	; 0x3d
   136a2:	3e af       	std	Y+62, r19	; 0x3e
   136a4:	4f af       	std	Y+63, r20	; 0x3f
   136a6:	a9 97       	sbiw	r28, 0x29	; 41
   136a8:	87 ea       	ldi	r24, 0xA7	; 167
   136aa:	9a e1       	ldi	r25, 0x1A	; 26
   136ac:	9c 01       	movw	r18, r24
   136ae:	40 e0       	ldi	r20, 0x00	; 0
   136b0:	ac 96       	adiw	r28, 0x2c	; 44
   136b2:	2d af       	std	Y+61, r18	; 0x3d
   136b4:	3e af       	std	Y+62, r19	; 0x3e
   136b6:	4f af       	std	Y+63, r20	; 0x3f
   136b8:	ac 97       	sbiw	r28, 0x2c	; 44
   136ba:	8f e9       	ldi	r24, 0x9F	; 159
   136bc:	9a e1       	ldi	r25, 0x1A	; 26
   136be:	9c 01       	movw	r18, r24
   136c0:	40 e0       	ldi	r20, 0x00	; 0
   136c2:	af 96       	adiw	r28, 0x2f	; 47
   136c4:	2d af       	std	Y+61, r18	; 0x3d
   136c6:	3e af       	std	Y+62, r19	; 0x3e
   136c8:	4f af       	std	Y+63, r20	; 0x3f
   136ca:	af 97       	sbiw	r28, 0x2f	; 47
   136cc:	81 ec       	ldi	r24, 0xC1	; 193
   136ce:	9a e1       	ldi	r25, 0x1A	; 26
   136d0:	3c 01       	movw	r6, r24
   136d2:	81 2c       	mov	r8, r1
   136d4:	f6 01       	movw	r30, r12
   136d6:	80 81       	ld	r24, Z
   136d8:	88 23       	and	r24, r24
   136da:	09 f4       	brne	.+2      	; 0x136de <format_drives+0xc0>
   136dc:	f0 c0       	rjmp	.+480    	; 0x138be <format_drives+0x2a0>
   136de:	83 30       	cpi	r24, 0x03	; 3
   136e0:	09 f0       	breq	.+2      	; 0x136e4 <format_drives+0xc6>
   136e2:	71 c0       	rjmp	.+226    	; 0x137c6 <format_drives+0x1a8>
   136e4:	a7 80       	ldd	r10, Z+7	; 0x07
   136e6:	b0 84       	ldd	r11, Z+8	; 0x08
   136e8:	be 01       	movw	r22, r28
   136ea:	66 5f       	subi	r22, 0xF6	; 246
   136ec:	7f 4f       	sbci	r23, 0xFF	; 255
   136ee:	f5 01       	movw	r30, r10
   136f0:	82 81       	ldd	r24, Z+2	; 0x02
   136f2:	93 81       	ldd	r25, Z+3	; 0x03
   136f4:	0e 94 79 79 	call	0xf2f2	; 0xf2f2 <stat>
   136f8:	01 96       	adiw	r24, 0x01	; 1
   136fa:	09 f0       	breq	.+2      	; 0x136fe <format_drives+0xe0>
   136fc:	64 c0       	rjmp	.+200    	; 0x137c6 <format_drives+0x1a8>
   136fe:	f5 01       	movw	r30, r10
   13700:	82 89       	ldd	r24, Z+18	; 0x12
   13702:	93 89       	ldd	r25, Z+19	; 0x13
   13704:	81 15       	cp	r24, r1
   13706:	91 40       	sbci	r25, 0x01	; 1
   13708:	31 f0       	breq	.+12     	; 0x13716 <format_drives+0xf8>
   1370a:	ed b7       	in	r30, 0x3d	; 61
   1370c:	fe b7       	in	r31, 0x3e	; 62
   1370e:	61 82       	std	Z+1, r6	; 0x01
   13710:	72 82       	std	Z+2, r7	; 0x02
   13712:	83 82       	std	Z+3, r8	; 0x03
   13714:	7a c0       	rjmp	.+244    	; 0x1380a <format_drives+0x1ec>
   13716:	f6 01       	movw	r30, r12
   13718:	23 80       	ldd	r2, Z+3	; 0x03
   1371a:	34 80       	ldd	r3, Z+4	; 0x04
   1371c:	45 80       	ldd	r4, Z+5	; 0x05
   1371e:	56 80       	ldd	r5, Z+6	; 0x06
   13720:	ed b7       	in	r30, 0x3d	; 61
   13722:	fe b7       	in	r31, 0x3e	; 62
   13724:	26 82       	std	Z+6, r2	; 0x06
   13726:	37 82       	std	Z+7, r3	; 0x07
   13728:	40 86       	std	Z+8, r4	; 0x08
   1372a:	51 86       	std	Z+9, r5	; 0x09
   1372c:	f5 01       	movw	r30, r10
   1372e:	82 81       	ldd	r24, Z+2	; 0x02
   13730:	93 81       	ldd	r25, Z+3	; 0x03
   13732:	ed b7       	in	r30, 0x3d	; 61
   13734:	fe b7       	in	r31, 0x3e	; 62
   13736:	95 83       	std	Z+5, r25	; 0x05
   13738:	84 83       	std	Z+4, r24	; 0x04
   1373a:	ac 96       	adiw	r28, 0x2c	; 44
   1373c:	2d ad       	ldd	r18, Y+61	; 0x3d
   1373e:	3e ad       	ldd	r19, Y+62	; 0x3e
   13740:	4f ad       	ldd	r20, Y+63	; 0x3f
   13742:	ac 97       	sbiw	r28, 0x2c	; 44
   13744:	21 83       	std	Z+1, r18	; 0x01
   13746:	32 83       	std	Z+2, r19	; 0x02
   13748:	43 83       	std	Z+3, r20	; 0x03
   1374a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1374e:	6e 96       	adiw	r28, 0x1e	; 30
   13750:	2e ad       	ldd	r18, Y+62	; 0x3e
   13752:	3f ad       	ldd	r19, Y+63	; 0x3f
   13754:	6e 97       	sbiw	r28, 0x1e	; 30
   13756:	ed b7       	in	r30, 0x3d	; 61
   13758:	fe b7       	in	r31, 0x3e	; 62
   1375a:	37 83       	std	Z+7, r19	; 0x07
   1375c:	26 83       	std	Z+6, r18	; 0x06
   1375e:	af 96       	adiw	r28, 0x2f	; 47
   13760:	8d ad       	ldd	r24, Y+61	; 0x3d
   13762:	9e ad       	ldd	r25, Y+62	; 0x3e
   13764:	af ad       	ldd	r26, Y+63	; 0x3f
   13766:	af 97       	sbiw	r28, 0x2f	; 47
   13768:	83 83       	std	Z+3, r24	; 0x03
   1376a:	94 83       	std	Z+4, r25	; 0x04
   1376c:	a5 83       	std	Z+5, r26	; 0x05
   1376e:	2a e3       	ldi	r18, 0x3A	; 58
   13770:	30 e0       	ldi	r19, 0x00	; 0
   13772:	2c 0f       	add	r18, r28
   13774:	3d 1f       	adc	r19, r29
   13776:	32 83       	std	Z+2, r19	; 0x02
   13778:	21 83       	std	Z+1, r18	; 0x01
   1377a:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
   1377e:	f5 01       	movw	r30, r10
   13780:	a2 80       	ldd	r10, Z+2	; 0x02
   13782:	b3 80       	ldd	r11, Z+3	; 0x03
   13784:	c2 01       	movw	r24, r4
   13786:	b1 01       	movw	r22, r2
   13788:	0e 94 16 a4 	call	0x1482c	; 0x1482c <lif_dir_count>
   1378c:	9b 01       	movw	r18, r22
   1378e:	ac 01       	movw	r20, r24
   13790:	82 01       	movw	r16, r4
   13792:	71 01       	movw	r14, r2
   13794:	be 01       	movw	r22, r28
   13796:	66 5c       	subi	r22, 0xC6	; 198
   13798:	7f 4f       	sbci	r23, 0xFF	; 255
   1379a:	c5 01       	movw	r24, r10
   1379c:	0e 94 9f de 	call	0x1bd3e	; 0x1bd3e <lif_create_image>
   137a0:	6c 96       	adiw	r28, 0x1c	; 28
   137a2:	2e ad       	ldd	r18, Y+62	; 0x3e
   137a4:	3f ad       	ldd	r19, Y+63	; 0x3f
   137a6:	6c 97       	sbiw	r28, 0x1c	; 28
   137a8:	2f 5f       	subi	r18, 0xFF	; 255
   137aa:	3f 4f       	sbci	r19, 0xFF	; 255
   137ac:	6c 96       	adiw	r28, 0x1c	; 28
   137ae:	3f af       	std	Y+63, r19	; 0x3f
   137b0:	2e af       	std	Y+62, r18	; 0x3e
   137b2:	6c 97       	sbiw	r28, 0x1c	; 28
   137b4:	6e 96       	adiw	r28, 0x1e	; 30
   137b6:	8e ad       	ldd	r24, Y+62	; 0x3e
   137b8:	9f ad       	ldd	r25, Y+63	; 0x3f
   137ba:	6e 97       	sbiw	r28, 0x1e	; 30
   137bc:	01 96       	adiw	r24, 0x01	; 1
   137be:	6e 96       	adiw	r28, 0x1e	; 30
   137c0:	9f af       	std	Y+63, r25	; 0x3f
   137c2:	8e af       	std	Y+62, r24	; 0x3e
   137c4:	6e 97       	sbiw	r28, 0x1e	; 30
   137c6:	f6 01       	movw	r30, r12
   137c8:	80 81       	ld	r24, Z
   137ca:	81 30       	cpi	r24, 0x01	; 1
   137cc:	09 f0       	breq	.+2      	; 0x137d0 <format_drives+0x1b2>
   137ce:	77 c0       	rjmp	.+238    	; 0x138be <format_drives+0x2a0>
   137d0:	a7 80       	ldd	r10, Z+7	; 0x07
   137d2:	b0 84       	ldd	r11, Z+8	; 0x08
   137d4:	be 01       	movw	r22, r28
   137d6:	66 5f       	subi	r22, 0xF6	; 246
   137d8:	7f 4f       	sbci	r23, 0xFF	; 255
   137da:	f5 01       	movw	r30, r10
   137dc:	82 81       	ldd	r24, Z+2	; 0x02
   137de:	93 81       	ldd	r25, Z+3	; 0x03
   137e0:	0e 94 79 79 	call	0xf2f2	; 0xf2f2 <stat>
   137e4:	01 96       	adiw	r24, 0x01	; 1
   137e6:	09 f0       	breq	.+2      	; 0x137ea <format_drives+0x1cc>
   137e8:	6a c0       	rjmp	.+212    	; 0x138be <format_drives+0x2a0>
   137ea:	f5 01       	movw	r30, r10
   137ec:	80 85       	ldd	r24, Z+8	; 0x08
   137ee:	91 85       	ldd	r25, Z+9	; 0x09
   137f0:	81 15       	cp	r24, r1
   137f2:	91 40       	sbci	r25, 0x01	; 1
   137f4:	69 f0       	breq	.+26     	; 0x13810 <format_drives+0x1f2>
   137f6:	a9 96       	adiw	r28, 0x29	; 41
   137f8:	2d ad       	ldd	r18, Y+61	; 0x3d
   137fa:	3e ad       	ldd	r19, Y+62	; 0x3e
   137fc:	4f ad       	ldd	r20, Y+63	; 0x3f
   137fe:	a9 97       	sbiw	r28, 0x29	; 41
   13800:	ed b7       	in	r30, 0x3d	; 61
   13802:	fe b7       	in	r31, 0x3e	; 62
   13804:	21 83       	std	Z+1, r18	; 0x01
   13806:	32 83       	std	Z+2, r19	; 0x02
   13808:	43 83       	std	Z+3, r20	; 0x03
   1380a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1380e:	57 c0       	rjmp	.+174    	; 0x138be <format_drives+0x2a0>
   13810:	f6 01       	movw	r30, r12
   13812:	23 80       	ldd	r2, Z+3	; 0x03
   13814:	34 80       	ldd	r3, Z+4	; 0x04
   13816:	45 80       	ldd	r4, Z+5	; 0x05
   13818:	56 80       	ldd	r5, Z+6	; 0x06
   1381a:	ed b7       	in	r30, 0x3d	; 61
   1381c:	fe b7       	in	r31, 0x3e	; 62
   1381e:	26 82       	std	Z+6, r2	; 0x06
   13820:	37 82       	std	Z+7, r3	; 0x07
   13822:	40 86       	std	Z+8, r4	; 0x08
   13824:	51 86       	std	Z+9, r5	; 0x09
   13826:	f5 01       	movw	r30, r10
   13828:	82 81       	ldd	r24, Z+2	; 0x02
   1382a:	93 81       	ldd	r25, Z+3	; 0x03
   1382c:	ed b7       	in	r30, 0x3d	; 61
   1382e:	fe b7       	in	r31, 0x3e	; 62
   13830:	95 83       	std	Z+5, r25	; 0x05
   13832:	84 83       	std	Z+4, r24	; 0x04
   13834:	a3 96       	adiw	r28, 0x23	; 35
   13836:	2d ad       	ldd	r18, Y+61	; 0x3d
   13838:	3e ad       	ldd	r19, Y+62	; 0x3e
   1383a:	4f ad       	ldd	r20, Y+63	; 0x3f
   1383c:	a3 97       	sbiw	r28, 0x23	; 35
   1383e:	21 83       	std	Z+1, r18	; 0x01
   13840:	32 83       	std	Z+2, r19	; 0x02
   13842:	43 83       	std	Z+3, r20	; 0x03
   13844:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   13848:	a0 96       	adiw	r28, 0x20	; 32
   1384a:	2e ad       	ldd	r18, Y+62	; 0x3e
   1384c:	3f ad       	ldd	r19, Y+63	; 0x3f
   1384e:	a0 97       	sbiw	r28, 0x20	; 32
   13850:	ed b7       	in	r30, 0x3d	; 61
   13852:	fe b7       	in	r31, 0x3e	; 62
   13854:	37 83       	std	Z+7, r19	; 0x07
   13856:	26 83       	std	Z+6, r18	; 0x06
   13858:	a6 96       	adiw	r28, 0x26	; 38
   1385a:	8d ad       	ldd	r24, Y+61	; 0x3d
   1385c:	9e ad       	ldd	r25, Y+62	; 0x3e
   1385e:	af ad       	ldd	r26, Y+63	; 0x3f
   13860:	a6 97       	sbiw	r28, 0x26	; 38
   13862:	83 83       	std	Z+3, r24	; 0x03
   13864:	94 83       	std	Z+4, r25	; 0x04
   13866:	a5 83       	std	Z+5, r26	; 0x05
   13868:	2a e3       	ldi	r18, 0x3A	; 58
   1386a:	30 e0       	ldi	r19, 0x00	; 0
   1386c:	2c 0f       	add	r18, r28
   1386e:	3d 1f       	adc	r19, r29
   13870:	32 83       	std	Z+2, r19	; 0x02
   13872:	21 83       	std	Z+1, r18	; 0x01
   13874:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
   13878:	f5 01       	movw	r30, r10
   1387a:	a2 80       	ldd	r10, Z+2	; 0x02
   1387c:	b3 80       	ldd	r11, Z+3	; 0x03
   1387e:	c2 01       	movw	r24, r4
   13880:	b1 01       	movw	r22, r2
   13882:	d4 d7       	rcall	.+4008   	; 0x1482c <lif_dir_count>
   13884:	9b 01       	movw	r18, r22
   13886:	ac 01       	movw	r20, r24
   13888:	82 01       	movw	r16, r4
   1388a:	71 01       	movw	r14, r2
   1388c:	be 01       	movw	r22, r28
   1388e:	66 5c       	subi	r22, 0xC6	; 198
   13890:	7f 4f       	sbci	r23, 0xFF	; 255
   13892:	c5 01       	movw	r24, r10
   13894:	0e 94 9f de 	call	0x1bd3e	; 0x1bd3e <lif_create_image>
   13898:	6c 96       	adiw	r28, 0x1c	; 28
   1389a:	2e ad       	ldd	r18, Y+62	; 0x3e
   1389c:	3f ad       	ldd	r19, Y+63	; 0x3f
   1389e:	6c 97       	sbiw	r28, 0x1c	; 28
   138a0:	2f 5f       	subi	r18, 0xFF	; 255
   138a2:	3f 4f       	sbci	r19, 0xFF	; 255
   138a4:	6c 96       	adiw	r28, 0x1c	; 28
   138a6:	3f af       	std	Y+63, r19	; 0x3f
   138a8:	2e af       	std	Y+62, r18	; 0x3e
   138aa:	6c 97       	sbiw	r28, 0x1c	; 28
   138ac:	a0 96       	adiw	r28, 0x20	; 32
   138ae:	8e ad       	ldd	r24, Y+62	; 0x3e
   138b0:	9f ad       	ldd	r25, Y+63	; 0x3f
   138b2:	a0 97       	sbiw	r28, 0x20	; 32
   138b4:	01 96       	adiw	r24, 0x01	; 1
   138b6:	a0 96       	adiw	r28, 0x20	; 32
   138b8:	9f af       	std	Y+63, r25	; 0x3f
   138ba:	8e af       	std	Y+62, r24	; 0x3e
   138bc:	a0 97       	sbiw	r28, 0x20	; 32
   138be:	9b e0       	ldi	r25, 0x0B	; 11
   138c0:	c9 0e       	add	r12, r25
   138c2:	d1 1c       	adc	r13, r1
   138c4:	a8 e7       	ldi	r26, 0x78	; 120
   138c6:	ca 16       	cp	r12, r26
   138c8:	af e1       	ldi	r26, 0x1F	; 31
   138ca:	da 06       	cpc	r13, r26
   138cc:	09 f0       	breq	.+2      	; 0x138d0 <format_drives+0x2b2>
   138ce:	02 cf       	rjmp	.-508    	; 0x136d4 <format_drives+0xb6>
   138d0:	6c 96       	adiw	r28, 0x1c	; 28
   138d2:	ee ad       	ldd	r30, Y+62	; 0x3e
   138d4:	ff ad       	ldd	r31, Y+63	; 0x3f
   138d6:	6c 97       	sbiw	r28, 0x1c	; 28
   138d8:	ef 2b       	or	r30, r31
   138da:	11 f0       	breq	.+4      	; 0x138e0 <format_drives+0x2c2>
   138dc:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>
   138e0:	c2 59       	subi	r28, 0x92	; 146
   138e2:	df 4f       	sbci	r29, 0xFF	; 255
   138e4:	0f b6       	in	r0, 0x3f	; 63
   138e6:	f8 94       	cli
   138e8:	de bf       	out	0x3e, r29	; 62
   138ea:	0f be       	out	0x3f, r0	; 63
   138ec:	cd bf       	out	0x3d, r28	; 61
   138ee:	df 91       	pop	r29
   138f0:	cf 91       	pop	r28
   138f2:	1f 91       	pop	r17
   138f4:	0f 91       	pop	r16
   138f6:	ff 90       	pop	r15
   138f8:	ef 90       	pop	r14
   138fa:	df 90       	pop	r13
   138fc:	cf 90       	pop	r12
   138fe:	bf 90       	pop	r11
   13900:	af 90       	pop	r10
   13902:	8f 90       	pop	r8
   13904:	7f 90       	pop	r7
   13906:	6f 90       	pop	r6
   13908:	5f 90       	pop	r5
   1390a:	4f 90       	pop	r4
   1390c:	3f 90       	pop	r3
   1390e:	2f 90       	pop	r2
   13910:	08 95       	ret

00013912 <mount_usage>:
   13912:	00 d0       	rcall	.+0      	; 0x13914 <mount_usage+0x2>
   13914:	1f 92       	push	r1
   13916:	82 e5       	ldi	r24, 0x52	; 82
   13918:	9a e1       	ldi	r25, 0x1A	; 26
   1391a:	a0 e0       	ldi	r26, 0x00	; 0
   1391c:	ed b7       	in	r30, 0x3d	; 61
   1391e:	fe b7       	in	r31, 0x3e	; 62
   13920:	81 83       	std	Z+1, r24	; 0x01
   13922:	92 83       	std	Z+2, r25	; 0x02
   13924:	a3 83       	std	Z+3, r26	; 0x03
   13926:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1392a:	81 e4       	ldi	r24, 0x41	; 65
   1392c:	9a e1       	ldi	r25, 0x1A	; 26
   1392e:	a0 e0       	ldi	r26, 0x00	; 0
   13930:	ed b7       	in	r30, 0x3d	; 61
   13932:	fe b7       	in	r31, 0x3e	; 62
   13934:	81 83       	std	Z+1, r24	; 0x01
   13936:	92 83       	std	Z+2, r25	; 0x02
   13938:	a3 83       	std	Z+3, r26	; 0x03
   1393a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1393e:	82 e2       	ldi	r24, 0x22	; 34
   13940:	9a e1       	ldi	r25, 0x1A	; 26
   13942:	a0 e0       	ldi	r26, 0x00	; 0
   13944:	ed b7       	in	r30, 0x3d	; 61
   13946:	fe b7       	in	r31, 0x3e	; 62
   13948:	81 83       	std	Z+1, r24	; 0x01
   1394a:	92 83       	std	Z+2, r25	; 0x02
   1394c:	a3 83       	std	Z+3, r26	; 0x03
   1394e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   13952:	84 e0       	ldi	r24, 0x04	; 4
   13954:	9a e1       	ldi	r25, 0x1A	; 26
   13956:	a0 e0       	ldi	r26, 0x00	; 0
   13958:	ed b7       	in	r30, 0x3d	; 61
   1395a:	fe b7       	in	r31, 0x3e	; 62
   1395c:	81 83       	std	Z+1, r24	; 0x01
   1395e:	92 83       	std	Z+2, r25	; 0x02
   13960:	a3 83       	std	Z+3, r26	; 0x03
   13962:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   13966:	82 e0       	ldi	r24, 0x02	; 2
   13968:	9a e1       	ldi	r25, 0x1A	; 26
   1396a:	a0 e0       	ldi	r26, 0x00	; 0
   1396c:	ed b7       	in	r30, 0x3d	; 61
   1396e:	fe b7       	in	r31, 0x3e	; 62
   13970:	81 83       	std	Z+1, r24	; 0x01
   13972:	92 83       	std	Z+2, r25	; 0x02
   13974:	a3 83       	std	Z+3, r26	; 0x03
   13976:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1397a:	80 ef       	ldi	r24, 0xF0	; 240
   1397c:	99 e1       	ldi	r25, 0x19	; 25
   1397e:	a0 e0       	ldi	r26, 0x00	; 0
   13980:	ed b7       	in	r30, 0x3d	; 61
   13982:	fe b7       	in	r31, 0x3e	; 62
   13984:	81 83       	std	Z+1, r24	; 0x01
   13986:	92 83       	std	Z+2, r25	; 0x02
   13988:	a3 83       	std	Z+3, r26	; 0x03
   1398a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1398e:	8b ed       	ldi	r24, 0xDB	; 219
   13990:	99 e1       	ldi	r25, 0x19	; 25
   13992:	a0 e0       	ldi	r26, 0x00	; 0
   13994:	ed b7       	in	r30, 0x3d	; 61
   13996:	fe b7       	in	r31, 0x3e	; 62
   13998:	81 83       	std	Z+1, r24	; 0x01
   1399a:	92 83       	std	Z+2, r25	; 0x02
   1399c:	a3 83       	std	Z+3, r26	; 0x03
   1399e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   139a2:	89 ed       	ldi	r24, 0xD9	; 217
   139a4:	99 e1       	ldi	r25, 0x19	; 25
   139a6:	a0 e0       	ldi	r26, 0x00	; 0
   139a8:	ed b7       	in	r30, 0x3d	; 61
   139aa:	fe b7       	in	r31, 0x3e	; 62
   139ac:	81 83       	std	Z+1, r24	; 0x01
   139ae:	92 83       	std	Z+2, r25	; 0x02
   139b0:	a3 83       	std	Z+3, r26	; 0x03
   139b2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   139b6:	8e eb       	ldi	r24, 0xBE	; 190
   139b8:	99 e1       	ldi	r25, 0x19	; 25
   139ba:	a0 e0       	ldi	r26, 0x00	; 0
   139bc:	ed b7       	in	r30, 0x3d	; 61
   139be:	fe b7       	in	r31, 0x3e	; 62
   139c0:	81 83       	std	Z+1, r24	; 0x01
   139c2:	92 83       	std	Z+2, r25	; 0x02
   139c4:	a3 83       	std	Z+3, r26	; 0x03
   139c6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   139ca:	83 eb       	ldi	r24, 0xB3	; 179
   139cc:	99 e1       	ldi	r25, 0x19	; 25
   139ce:	a0 e0       	ldi	r26, 0x00	; 0
   139d0:	ed b7       	in	r30, 0x3d	; 61
   139d2:	fe b7       	in	r31, 0x3e	; 62
   139d4:	81 83       	std	Z+1, r24	; 0x01
   139d6:	92 83       	std	Z+2, r25	; 0x02
   139d8:	a3 83       	std	Z+3, r26	; 0x03
   139da:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   139de:	0f 90       	pop	r0
   139e0:	0f 90       	pop	r0
   139e2:	0f 90       	pop	r0
   139e4:	08 95       	ret

000139e6 <index_address>:
   139e6:	e4 ef       	ldi	r30, 0xF4	; 244
   139e8:	fe e1       	ldi	r31, 0x1E	; 30
   139ea:	90 e0       	ldi	r25, 0x00	; 0
   139ec:	28 2f       	mov	r18, r24
   139ee:	88 0f       	add	r24, r24
   139f0:	33 0b       	sbc	r19, r19
   139f2:	80 81       	ld	r24, Z
   139f4:	88 23       	and	r24, r24
   139f6:	29 f0       	breq	.+10     	; 0x13a02 <index_address+0x1c>
   139f8:	41 81       	ldd	r20, Z+1	; 0x01
   139fa:	50 e0       	ldi	r21, 0x00	; 0
   139fc:	42 17       	cp	r20, r18
   139fe:	53 07       	cpc	r21, r19
   13a00:	31 f0       	breq	.+12     	; 0x13a0e <index_address+0x28>
   13a02:	9f 5f       	subi	r25, 0xFF	; 255
   13a04:	3b 96       	adiw	r30, 0x0b	; 11
   13a06:	9c 30       	cpi	r25, 0x0C	; 12
   13a08:	a1 f7       	brne	.-24     	; 0x139f2 <index_address+0xc>
   13a0a:	8f ef       	ldi	r24, 0xFF	; 255
   13a0c:	08 95       	ret
   13a0e:	89 2f       	mov	r24, r25
   13a10:	08 95       	ret

00013a12 <umount>:

/// ===============================================
/// @brief umount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t umount(int argc, char *argv[])
{
   13a12:	cf 93       	push	r28
   13a14:	df 93       	push	r29
   13a16:	00 d0       	rcall	.+0      	; 0x13a18 <umount+0x6>
   13a18:	00 d0       	rcall	.+0      	; 0x13a1a <umount+0x8>
   13a1a:	1f 92       	push	r1
   13a1c:	eb 01       	movw	r28, r22

	int8_t address;
	int8_t index;

	if(argc != 2)
   13a1e:	02 97       	sbiw	r24, 0x02	; 2
   13a20:	f1 f0       	breq	.+60     	; 0x13a5e <umount+0x4c>
	{
		printf("Usage:\n");
   13a22:	8b ea       	ldi	r24, 0xAB	; 171
   13a24:	99 e1       	ldi	r25, 0x19	; 25
   13a26:	a0 e0       	ldi	r26, 0x00	; 0
   13a28:	ed b7       	in	r30, 0x3d	; 61
   13a2a:	fe b7       	in	r31, 0x3e	; 62
   13a2c:	81 83       	std	Z+1, r24	; 0x01
   13a2e:	92 83       	std	Z+2, r25	; 0x02
   13a30:	a3 83       	std	Z+3, r26	; 0x03
   13a32:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		printf("  umount address\n");
   13a36:	89 e9       	ldi	r24, 0x99	; 153
   13a38:	99 e1       	ldi	r25, 0x19	; 25
   13a3a:	a0 e0       	ldi	r26, 0x00	; 0
   13a3c:	ed b7       	in	r30, 0x3d	; 61
   13a3e:	fe b7       	in	r31, 0x3e	; 62
   13a40:	81 83       	std	Z+1, r24	; 0x01
   13a42:	92 83       	std	Z+2, r25	; 0x02
   13a44:	a3 83       	std	Z+3, r26	; 0x03
   13a46:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		printf("  - address is the device address\n");
   13a4a:	86 e7       	ldi	r24, 0x76	; 118
   13a4c:	99 e1       	ldi	r25, 0x19	; 25
   13a4e:	a0 e0       	ldi	r26, 0x00	; 0
   13a50:	ed b7       	in	r30, 0x3d	; 61
   13a52:	fe b7       	in	r31, 0x3e	; 62
   13a54:	81 83       	std	Z+1, r24	; 0x01
   13a56:	92 83       	std	Z+2, r25	; 0x02
   13a58:	a3 83       	std	Z+3, r26	; 0x03
   13a5a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	}
	address = atoi(argv[1]);
   13a5e:	8a 81       	ldd	r24, Y+2	; 0x02
   13a60:	9b 81       	ldd	r25, Y+3	; 0x03
   13a62:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <atoi>
   13a66:	d8 2f       	mov	r29, r24
	index = index_address(address);
   13a68:	be df       	rcall	.-132    	; 0x139e6 <index_address>
   13a6a:	c8 2f       	mov	r28, r24
	if(index == -1)
   13a6c:	8f 3f       	cpi	r24, 0xFF	; 255
   13a6e:	89 f4       	brne	.+34     	; 0x13a92 <umount+0x80>
	{
		printf("umount address:[%d] NOT found\n", address);
   13a70:	8d 2f       	mov	r24, r29
   13a72:	dd 0f       	add	r29, r29
   13a74:	99 0b       	sbc	r25, r25
   13a76:	ed b7       	in	r30, 0x3d	; 61
   13a78:	fe b7       	in	r31, 0x3e	; 62
   13a7a:	95 83       	std	Z+5, r25	; 0x05
   13a7c:	84 83       	std	Z+4, r24	; 0x04
   13a7e:	87 e5       	ldi	r24, 0x57	; 87
   13a80:	99 e1       	ldi	r25, 0x19	; 25
   13a82:	a0 e0       	ldi	r26, 0x00	; 0
   13a84:	81 83       	std	Z+1, r24	; 0x01
   13a86:	92 83       	std	Z+2, r25	; 0x02
   13a88:	a3 83       	std	Z+3, r26	; 0x03
   13a8a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		return(-1);
   13a8e:	8f ef       	ldi	r24, 0xFF	; 255
	}
	free_device(index);
   13a90:	02 c0       	rjmp	.+4      	; 0x13a96 <umount+0x84>
   13a92:	b9 db       	rcall	.-2190   	; 0x13206 <free_device>
	return(index);
   13a94:	8c 2f       	mov	r24, r28
}
   13a96:	cd b7       	in	r28, 0x3d	; 61
   13a98:	de b7       	in	r29, 0x3e	; 62
   13a9a:	25 96       	adiw	r28, 0x05	; 5
   13a9c:	e2 e0       	ldi	r30, 0x02	; 2
   13a9e:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00013aa2 <display_mount>:
	return(1);
}


void display_mount(int8_t index )
{
   13aa2:	a9 e0       	ldi	r26, 0x09	; 9
   13aa4:	b0 e0       	ldi	r27, 0x00	; 0
   13aa6:	e7 e5       	ldi	r30, 0x57	; 87
   13aa8:	fd e9       	ldi	r31, 0x9D	; 157
   13aaa:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

	if(Devices[index].TYPE == NO_TYPE)
   13aae:	08 2f       	mov	r16, r24
   13ab0:	08 2e       	mov	r0, r24
   13ab2:	00 0c       	add	r0, r0
   13ab4:	11 0b       	sbc	r17, r17
   13ab6:	9b e0       	ldi	r25, 0x0B	; 11
   13ab8:	89 02       	muls	r24, r25
   13aba:	f0 01       	movw	r30, r0
   13abc:	11 24       	eor	r1, r1
   13abe:	ec 50       	subi	r30, 0x0C	; 12
   13ac0:	f1 4e       	sbci	r31, 0xE1	; 225
   13ac2:	80 81       	ld	r24, Z
   13ac4:	88 23       	and	r24, r24
   13ac6:	09 f4       	brne	.+2      	; 0x13aca <display_mount+0x28>
   13ac8:	5f c0       	rjmp	.+190    	; 0x13b88 <display_mount+0xe6>
		return;

	if(Devices[index].TYPE == SS80_TYPE)
   13aca:	83 30       	cpi	r24, 0x03	; 3
   13acc:	c9 f4       	brne	.+50     	; 0x13b00 <display_mount+0x5e>
	{
		SS80p= (SS80DiskType *)Devices[index].dev;
   13ace:	07 80       	ldd	r0, Z+7	; 0x07
   13ad0:	f0 85       	ldd	r31, Z+8	; 0x08
   13ad2:	e0 2d       	mov	r30, r0

		printf("SS80    %-8s %2d %s\n", SS80p->HEADER.model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13ad4:	82 81       	ldd	r24, Z+2	; 0x02
   13ad6:	93 81       	ldd	r25, Z+3	; 0x03
   13ad8:	cd b7       	in	r28, 0x3d	; 61
   13ada:	de b7       	in	r29, 0x3e	; 62
   13adc:	99 87       	std	Y+9, r25	; 0x09
   13ade:	88 87       	std	Y+8, r24	; 0x08
   13ae0:	80 81       	ld	r24, Z
   13ae2:	90 e0       	ldi	r25, 0x00	; 0
   13ae4:	9f 83       	std	Y+7, r25	; 0x07
   13ae6:	8e 83       	std	Y+6, r24	; 0x06
   13ae8:	84 81       	ldd	r24, Z+4	; 0x04
   13aea:	95 81       	ldd	r25, Z+5	; 0x05
   13aec:	9d 83       	std	Y+5, r25	; 0x05
   13aee:	8c 83       	std	Y+4, r24	; 0x04
   13af0:	86 e7       	ldi	r24, 0x76	; 118
   13af2:	98 e1       	ldi	r25, 0x18	; 24
   13af4:	a0 e0       	ldi	r26, 0x00	; 0
   13af6:	89 83       	std	Y+1, r24	; 0x01
   13af8:	9a 83       	std	Y+2, r25	; 0x02
   13afa:	ab 83       	std	Y+3, r26	; 0x03
   13afc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE )
   13b00:	8b e0       	ldi	r24, 0x0B	; 11
   13b02:	80 9f       	mul	r24, r16
   13b04:	f0 01       	movw	r30, r0
   13b06:	81 9f       	mul	r24, r17
   13b08:	f0 0d       	add	r31, r0
   13b0a:	11 24       	eor	r1, r1
   13b0c:	ec 50       	subi	r30, 0x0C	; 12
   13b0e:	f1 4e       	sbci	r31, 0xE1	; 225
   13b10:	80 81       	ld	r24, Z
   13b12:	81 30       	cpi	r24, 0x01	; 1
   13b14:	c9 f4       	brne	.+50     	; 0x13b48 <display_mount+0xa6>
	{
		AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13b16:	07 80       	ldd	r0, Z+7	; 0x07
   13b18:	f0 85       	ldd	r31, Z+8	; 0x08
   13b1a:	e0 2d       	mov	r30, r0
		printf("AMIGO   %-8s %2d %s\n", AMIGOp->HEADER.model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13b1c:	82 81       	ldd	r24, Z+2	; 0x02
   13b1e:	93 81       	ldd	r25, Z+3	; 0x03
   13b20:	cd b7       	in	r28, 0x3d	; 61
   13b22:	de b7       	in	r29, 0x3e	; 62
   13b24:	99 87       	std	Y+9, r25	; 0x09
   13b26:	88 87       	std	Y+8, r24	; 0x08
   13b28:	80 81       	ld	r24, Z
   13b2a:	90 e0       	ldi	r25, 0x00	; 0
   13b2c:	9f 83       	std	Y+7, r25	; 0x07
   13b2e:	8e 83       	std	Y+6, r24	; 0x06
   13b30:	84 81       	ldd	r24, Z+4	; 0x04
   13b32:	95 81       	ldd	r25, Z+5	; 0x05
   13b34:	9d 83       	std	Y+5, r25	; 0x05
   13b36:	8c 83       	std	Y+4, r24	; 0x04
   13b38:	81 e6       	ldi	r24, 0x61	; 97
   13b3a:	98 e1       	ldi	r25, 0x18	; 24
   13b3c:	a0 e0       	ldi	r26, 0x00	; 0
   13b3e:	89 83       	std	Y+1, r24	; 0x01
   13b40:	9a 83       	std	Y+2, r25	; 0x02
   13b42:	ab 83       	std	Y+3, r26	; 0x03
   13b44:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	}
#endif                                    // #ifdef AMIGO

	if(Devices[index].TYPE == PRINTER_TYPE )
   13b48:	8b e0       	ldi	r24, 0x0B	; 11
   13b4a:	80 9f       	mul	r24, r16
   13b4c:	f0 01       	movw	r30, r0
   13b4e:	81 9f       	mul	r24, r17
   13b50:	f0 0d       	add	r31, r0
   13b52:	11 24       	eor	r1, r1
   13b54:	ec 50       	subi	r30, 0x0C	; 12
   13b56:	f1 4e       	sbci	r31, 0xE1	; 225
   13b58:	80 81       	ld	r24, Z
   13b5a:	84 30       	cpi	r24, 0x04	; 4
   13b5c:	a9 f4       	brne	.+42     	; 0x13b88 <display_mount+0xe6>
	{
            PRINTERp= (PRINTERDeviceType *)Devices[index].dev;
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
   13b5e:	07 80       	ldd	r0, Z+7	; 0x07
   13b60:	f0 85       	ldd	r31, Z+8	; 0x08
   13b62:	e0 2d       	mov	r30, r0
   13b64:	80 81       	ld	r24, Z
   13b66:	90 e0       	ldi	r25, 0x00	; 0
   13b68:	cd b7       	in	r28, 0x3d	; 61
   13b6a:	de b7       	in	r29, 0x3e	; 62
   13b6c:	9f 83       	std	Y+7, r25	; 0x07
   13b6e:	8e 83       	std	Y+6, r24	; 0x06
   13b70:	89 e6       	ldi	r24, 0x69	; 105
   13b72:	94 e0       	ldi	r25, 0x04	; 4
   13b74:	9d 83       	std	Y+5, r25	; 0x05
   13b76:	8c 83       	std	Y+4, r24	; 0x04
   13b78:	8f e4       	ldi	r24, 0x4F	; 79
   13b7a:	98 e1       	ldi	r25, 0x18	; 24
   13b7c:	a0 e0       	ldi	r26, 0x00	; 0
   13b7e:	89 83       	std	Y+1, r24	; 0x01
   13b80:	9a 83       	std	Y+2, r25	; 0x02
   13b82:	ab 83       	std	Y+3, r26	; 0x03
   13b84:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	}
}
   13b88:	cd b7       	in	r28, 0x3d	; 61
   13b8a:	de b7       	in	r29, 0x3e	; 62
   13b8c:	29 96       	adiw	r28, 0x09	; 9
   13b8e:	e4 e0       	ldi	r30, 0x04	; 4
   13b90:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00013b94 <verify_device>:

/// ===============================================
/// @brief Verify a device and delete it is there are any errors
/// @return  1 = OK 0 = ERROR
int8_t verify_device(int8_t index)
{
   13b94:	a5 e0       	ldi	r26, 0x05	; 5
   13b96:	b0 e0       	ldi	r27, 0x00	; 0
   13b98:	e0 ed       	ldi	r30, 0xD0	; 208
   13b9a:	fd e9       	ldi	r31, 0x9D	; 157
   13b9c:	0c 94 21 e7 	jmp	0x1ce42	; 0x1ce42 <__prologue_saves__+0x16>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    if(Devices[index].TYPE == NO_TYPE)
   13ba0:	e8 2e       	mov	r14, r24
   13ba2:	08 2e       	mov	r0, r24
   13ba4:	00 0c       	add	r0, r0
   13ba6:	ff 08       	sbc	r15, r15
   13ba8:	9b e0       	ldi	r25, 0x0B	; 11
   13baa:	89 02       	muls	r24, r25
   13bac:	f0 01       	movw	r30, r0
   13bae:	11 24       	eor	r1, r1
   13bb0:	ec 50       	subi	r30, 0x0C	; 12
   13bb2:	f1 4e       	sbci	r31, 0xE1	; 225
   13bb4:	10 81       	ld	r17, Z
   13bb6:	11 23       	and	r17, r17
   13bb8:	09 f1       	breq	.+66     	; 0x13bfc <verify_device+0x68>
   13bba:	d8 2e       	mov	r13, r24
        return(ret);

	address = Devices[index].ADDRESS;
   13bbc:	81 81       	ldd	r24, Z+1	; 0x01
    type = Devices[index].TYPE;
	ppr = Devices[index].PPR;
   13bbe:	02 81       	ldd	r16, Z+2	; 0x02

	if(address < 0 || address > 31)
   13bc0:	80 32       	cpi	r24, 0x20	; 32
   13bc2:	78 f0       	brcs	.+30     	; 0x13be2 <verify_device+0x4e>
	{
		printf("Address (%d) out of range\n", (int) address);
   13bc4:	90 e0       	ldi	r25, 0x00	; 0
   13bc6:	ed b7       	in	r30, 0x3d	; 61
   13bc8:	fe b7       	in	r31, 0x3e	; 62
   13bca:	95 83       	std	Z+5, r25	; 0x05
   13bcc:	84 83       	std	Z+4, r24	; 0x04
   13bce:	8b e6       	ldi	r24, 0x6B	; 107
   13bd0:	9b e1       	ldi	r25, 0x1B	; 27
   13bd2:	a0 e0       	ldi	r26, 0x00	; 0
   13bd4:	81 83       	std	Z+1, r24	; 0x01
   13bd6:	92 83       	std	Z+2, r25	; 0x02
   13bd8:	a3 83       	std	Z+3, r26	; 0x03
   13bda:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		ret = 0;
   13bde:	80 e0       	ldi	r24, 0x00	; 0
   13be0:	01 c0       	rjmp	.+2      	; 0x13be4 <verify_device+0x50>
int8_t verify_device(int8_t index)
{
    long sectors;
	int8_t type;
	int address,ppr;
	int8_t ret = 1;	
   13be2:	81 e0       	ldi	r24, 0x01	; 1
	}
	addr_bits |= addr_mask;

	
	// Printers do not use PPR
	if(type == PRINTER_TYPE)
   13be4:	14 30       	cpi	r17, 0x04	; 4
   13be6:	61 f4       	brne	.+24     	; 0x13c00 <verify_device+0x6c>
	{
		Devices[index].PPR = 0xff;
   13be8:	8b e0       	ldi	r24, 0x0B	; 11
   13bea:	8e 9d       	mul	r24, r14
   13bec:	f0 01       	movw	r30, r0
   13bee:	8f 9d       	mul	r24, r15
   13bf0:	f0 0d       	add	r31, r0
   13bf2:	11 24       	eor	r1, r1
   13bf4:	ec 50       	subi	r30, 0x0C	; 12
   13bf6:	f1 4e       	sbci	r31, 0xE1	; 225
   13bf8:	8f ef       	ldi	r24, 0xFF	; 255
   13bfa:	82 83       	std	Z+2, r24	; 0x02
		return(1);
   13bfc:	81 e0       	ldi	r24, 0x01	; 1
   13bfe:	90 c0       	rjmp	.+288    	; 0x13d20 <verify_device+0x18c>
	}
	if(type == SS80_TYPE || AMIGO_TYPE)
	{
		if(ppr < 0 || ppr > 7)
   13c00:	08 30       	cpi	r16, 0x08	; 8
   13c02:	08 f0       	brcs	.+2      	; 0x13c06 <verify_device+0x72>
		{
			ret = 0;
   13c04:	80 e0       	ldi	r24, 0x00	; 0
			printf("PPR (%d) duplicated\n", (int) ppr);
			ret = 0;
		}
		ppr_bits |= ppr_mask;
	}
    if(type == SS80_TYPE)
   13c06:	13 30       	cpi	r17, 0x03	; 3
   13c08:	79 f5       	brne	.+94     	; 0x13c68 <verify_device+0xd4>
    {
        SS80p= (SS80DiskType *)Devices[index].dev;
   13c0a:	9b e0       	ldi	r25, 0x0B	; 11
   13c0c:	9e 9d       	mul	r25, r14
   13c0e:	f0 01       	movw	r30, r0
   13c10:	9f 9d       	mul	r25, r15
   13c12:	f0 0d       	add	r31, r0
   13c14:	11 24       	eor	r1, r1
   13c16:	ec 50       	subi	r30, 0x0C	; 12
   13c18:	f1 4e       	sbci	r31, 0xE1	; 225
   13c1a:	c7 81       	ldd	r28, Z+7	; 0x07
   13c1c:	d0 85       	ldd	r29, Z+8	; 0x08
        if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13c1e:	2a 89       	ldd	r18, Y+18	; 0x12
   13c20:	3b 89       	ldd	r19, Y+19	; 0x13
   13c22:	21 15       	cp	r18, r1
   13c24:	31 40       	sbci	r19, 0x01	; 1
   13c26:	79 f0       	breq	.+30     	; 0x13c46 <verify_device+0xb2>
        {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
            printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13c28:	8c 81       	ldd	r24, Y+4	; 0x04
   13c2a:	9d 81       	ldd	r25, Y+5	; 0x05
   13c2c:	ed b7       	in	r30, 0x3d	; 61
   13c2e:	fe b7       	in	r31, 0x3e	; 62
   13c30:	95 83       	std	Z+5, r25	; 0x05
   13c32:	84 83       	std	Z+4, r24	; 0x04
   13c34:	85 e3       	ldi	r24, 0x35	; 53
   13c36:	9b e1       	ldi	r25, 0x1B	; 27
   13c38:	a0 e0       	ldi	r26, 0x00	; 0
   13c3a:	81 83       	std	Z+1, r24	; 0x01
   13c3c:	92 83       	std	Z+2, r25	; 0x02
   13c3e:	a3 83       	std	Z+3, r26	; 0x03
   13c40:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
			ret = 0;
   13c44:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
        Devices[index].BLOCKS = sectors;
   13c46:	9b e0       	ldi	r25, 0x0B	; 11
   13c48:	9e 9d       	mul	r25, r14
   13c4a:	f0 01       	movw	r30, r0
   13c4c:	9f 9d       	mul	r25, r15
   13c4e:	f0 0d       	add	r31, r0
   13c50:	11 24       	eor	r1, r1
   13c52:	ec 50       	subi	r30, 0x0C	; 12
   13c54:	f1 4e       	sbci	r31, 0xE1	; 225
   13c56:	48 a5       	ldd	r20, Y+40	; 0x28
   13c58:	59 a5       	ldd	r21, Y+41	; 0x29
   13c5a:	6a a5       	ldd	r22, Y+42	; 0x2a
   13c5c:	7b a5       	ldd	r23, Y+43	; 0x2b
   13c5e:	4f 5f       	subi	r20, 0xFF	; 255
   13c60:	5f 4f       	sbci	r21, 0xFF	; 255
   13c62:	6f 4f       	sbci	r22, 0xFF	; 255
   13c64:	7f 4f       	sbci	r23, 0xFF	; 255
   13c66:	47 c0       	rjmp	.+142    	; 0x13cf6 <verify_device+0x162>
    }                                         // SS80_TYPE

#ifdef AMIGO
    if(type == AMIGO_TYPE )
   13c68:	11 30       	cpi	r17, 0x01	; 1
   13c6a:	09 f0       	breq	.+2      	; 0x13c6e <verify_device+0xda>
   13c6c:	48 c0       	rjmp	.+144    	; 0x13cfe <verify_device+0x16a>
    {
        AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13c6e:	9b e0       	ldi	r25, 0x0B	; 11
   13c70:	9e 9d       	mul	r25, r14
   13c72:	f0 01       	movw	r30, r0
   13c74:	9f 9d       	mul	r25, r15
   13c76:	f0 0d       	add	r31, r0
   13c78:	11 24       	eor	r1, r1
   13c7a:	ec 50       	subi	r30, 0x0C	; 12
   13c7c:	f1 4e       	sbci	r31, 0xE1	; 225
   13c7e:	c7 81       	ldd	r28, Z+7	; 0x07
   13c80:	d0 85       	ldd	r29, Z+8	; 0x08
        if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13c82:	28 85       	ldd	r18, Y+8	; 0x08
   13c84:	39 85       	ldd	r19, Y+9	; 0x09
   13c86:	21 15       	cp	r18, r1
   13c88:	31 40       	sbci	r19, 0x01	; 1
   13c8a:	a9 f0       	breq	.+42     	; 0x13cb6 <verify_device+0x122>
        {
            AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13c8c:	80 e0       	ldi	r24, 0x00	; 0
   13c8e:	91 e0       	ldi	r25, 0x01	; 1
   13c90:	99 87       	std	Y+9, r25	; 0x09
   13c92:	88 87       	std	Y+8, r24	; 0x08
            printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13c94:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
   13c98:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
   13c9c:	ed b7       	in	r30, 0x3d	; 61
   13c9e:	fe b7       	in	r31, 0x3e	; 62
   13ca0:	95 83       	std	Z+5, r25	; 0x05
   13ca2:	84 83       	std	Z+4, r24	; 0x04
   13ca4:	8e ef       	ldi	r24, 0xFE	; 254
   13ca6:	9a e1       	ldi	r25, 0x1A	; 26
   13ca8:	a0 e0       	ldi	r26, 0x00	; 0
   13caa:	81 83       	std	Z+1, r24	; 0x01
   13cac:	92 83       	std	Z+2, r25	; 0x02
   13cae:	a3 83       	std	Z+3, r26	; 0x03
   13cb0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
			ret = 0;
   13cb4:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
            * AMIGOp->GEOMETRY.HEADS
            * AMIGOp->GEOMETRY.CYLINDERS;
        Devices[index].BLOCKS = sectors;
   13cb6:	9b e0       	ldi	r25, 0x0B	; 11
   13cb8:	9e 9d       	mul	r25, r14
   13cba:	f0 01       	movw	r30, r0
   13cbc:	9f 9d       	mul	r25, r15
   13cbe:	f0 0d       	add	r31, r0
   13cc0:	11 24       	eor	r1, r1
   13cc2:	ec 50       	subi	r30, 0x0C	; 12
   13cc4:	f1 4e       	sbci	r31, 0xE1	; 225
   13cc6:	4a 85       	ldd	r20, Y+10	; 0x0a
   13cc8:	5b 85       	ldd	r21, Y+11	; 0x0b
   13cca:	2c 85       	ldd	r18, Y+12	; 0x0c
   13ccc:	3d 85       	ldd	r19, Y+13	; 0x0d
   13cce:	42 9f       	mul	r20, r18
   13cd0:	b0 01       	movw	r22, r0
   13cd2:	43 9f       	mul	r20, r19
   13cd4:	70 0d       	add	r23, r0
   13cd6:	52 9f       	mul	r21, r18
   13cd8:	70 0d       	add	r23, r0
   13cda:	11 24       	eor	r1, r1
   13cdc:	2e 85       	ldd	r18, Y+14	; 0x0e
   13cde:	3f 85       	ldd	r19, Y+15	; 0x0f
   13ce0:	62 9f       	mul	r22, r18
   13ce2:	a0 01       	movw	r20, r0
   13ce4:	63 9f       	mul	r22, r19
   13ce6:	50 0d       	add	r21, r0
   13ce8:	72 9f       	mul	r23, r18
   13cea:	50 0d       	add	r21, r0
   13cec:	11 24       	eor	r1, r1
   13cee:	05 2e       	mov	r0, r21
   13cf0:	00 0c       	add	r0, r0
   13cf2:	66 0b       	sbc	r22, r22
   13cf4:	77 0b       	sbc	r23, r23
   13cf6:	43 83       	std	Z+3, r20	; 0x03
   13cf8:	54 83       	std	Z+4, r21	; 0x04
   13cfa:	65 83       	std	Z+5, r22	; 0x05
   13cfc:	76 83       	std	Z+6, r23	; 0x06
    }
#endif                                    // #ifdef AMIGO
	if(!ret)
   13cfe:	81 11       	cpse	r24, r1
   13d00:	7d cf       	rjmp	.-262    	; 0x13bfc <verify_device+0x68>
	{
		printf("Device errors - removing: ");
   13d02:	83 ee       	ldi	r24, 0xE3	; 227
   13d04:	9a e1       	ldi	r25, 0x1A	; 26
   13d06:	a0 e0       	ldi	r26, 0x00	; 0
   13d08:	ed b7       	in	r30, 0x3d	; 61
   13d0a:	fe b7       	in	r31, 0x3e	; 62
   13d0c:	81 83       	std	Z+1, r24	; 0x01
   13d0e:	92 83       	std	Z+2, r25	; 0x02
   13d10:	a3 83       	std	Z+3, r26	; 0x03
   13d12:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
		display_mount(index);	
   13d16:	8d 2d       	mov	r24, r13
   13d18:	c4 de       	rcall	.-632    	; 0x13aa2 <display_mount>
		free_device(index);
   13d1a:	8d 2d       	mov	r24, r13
   13d1c:	74 da       	rcall	.-2840   	; 0x13206 <free_device>
   13d1e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return(ret);
}
   13d20:	cd b7       	in	r28, 0x3d	; 61
   13d22:	de b7       	in	r29, 0x3e	; 62
   13d24:	25 96       	adiw	r28, 0x05	; 5
   13d26:	e7 e0       	ldi	r30, 0x07	; 7
   13d28:	0c 94 3d e7 	jmp	0x1ce7a	; 0x1ce7a <__epilogue_restores__+0x16>

00013d2c <verify_devices>:

/// ===============================================
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
   13d2c:	cf 93       	push	r28
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13d2e:	c0 e0       	ldi	r28, 0x00	; 0
		verify_device(i);
   13d30:	8c 2f       	mov	r24, r28
   13d32:	30 df       	rcall	.-416    	; 0x13b94 <verify_device>
   13d34:	cf 5f       	subi	r28, 0xFF	; 255
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13d36:	cc 30       	cpi	r28, 0x0C	; 12
   13d38:	d9 f7       	brne	.-10     	; 0x13d30 <verify_devices+0x4>
		verify_device(i);

}
   13d3a:	cf 91       	pop	r28
   13d3c:	08 95       	ret

00013d3e <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13d3e:	ae e1       	ldi	r26, 0x1E	; 30
   13d40:	b1 e0       	ldi	r27, 0x01	; 1
   13d42:	e5 ea       	ldi	r30, 0xA5	; 165
   13d44:	fe e9       	ldi	r31, 0x9E	; 158
   13d46:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   13d4a:	8c 01       	movw	r16, r24
	int8_t address;

    char str[128];
    char token[128];

    init_Devices();
   13d4c:	76 db       	rcall	.-2324   	; 0x1343a <init_Devices>

    printf("Reading: %s\n", name);
   13d4e:	ed b7       	in	r30, 0x3d	; 61
   13d50:	fe b7       	in	r31, 0x3e	; 62
   13d52:	15 83       	std	Z+5, r17	; 0x05
   13d54:	04 83       	std	Z+4, r16	; 0x04
   13d56:	8d e2       	ldi	r24, 0x2D	; 45
   13d58:	91 e2       	ldi	r25, 0x21	; 33
   13d5a:	a0 e0       	ldi	r26, 0x00	; 0
   13d5c:	81 83       	std	Z+1, r24	; 0x01
   13d5e:	92 83       	std	Z+2, r25	; 0x02
   13d60:	a3 83       	std	Z+3, r26	; 0x03
   13d62:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    cfg = fopen(name, "rb");
   13d66:	6e ef       	ldi	r22, 0xFE	; 254
   13d68:	78 e0       	ldi	r23, 0x08	; 8
   13d6a:	c8 01       	movw	r24, r16
   13d6c:	0e 94 74 7e 	call	0xfce8	; 0xfce8 <fopen>
   13d70:	c5 5f       	subi	r28, 0xF5	; 245
   13d72:	de 4f       	sbci	r29, 0xFE	; 254
   13d74:	99 83       	std	Y+1, r25	; 0x01
   13d76:	88 83       	st	Y, r24
   13d78:	cb 50       	subi	r28, 0x0B	; 11
   13d7a:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13d7c:	89 2b       	or	r24, r25
   13d7e:	09 f4       	brne	.+2      	; 0x13d82 <Read_Config+0x44>
   13d80:	58 c0       	rjmp	.+176    	; 0x13e32 <Read_Config+0xf4>
   13d82:	21 2c       	mov	r2, r1
   13d84:	31 2c       	mov	r3, r1
   13d86:	c8 5f       	subi	r28, 0xF8	; 248
   13d88:	de 4f       	sbci	r29, 0xFE	; 254
   13d8a:	18 82       	st	Y, r1
   13d8c:	c8 50       	subi	r28, 0x08	; 8
   13d8e:	d1 40       	sbci	r29, 0x01	; 1
   13d90:	41 2c       	mov	r4, r1
   13d92:	51 2c       	mov	r5, r1
   13d94:	e1 2c       	mov	r14, r1
   13d96:	f1 2c       	mov	r15, r1
   13d98:	c7 5f       	subi	r28, 0xF7	; 247
   13d9a:	de 4f       	sbci	r29, 0xFE	; 254
   13d9c:	19 82       	std	Y+1, r1	; 0x01
   13d9e:	18 82       	st	Y, r1
   13da0:	c9 50       	subi	r28, 0x09	; 9
   13da2:	d1 40       	sbci	r29, 0x01	; 1
   13da4:	c1 2c       	mov	r12, r1
   13da6:	d1 2c       	mov	r13, r1
   13da8:	61 2c       	mov	r6, r1
   13daa:	71 2c       	mov	r7, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13dac:	8c e7       	ldi	r24, 0x7C	; 124
   13dae:	9e e1       	ldi	r25, 0x1E	; 30
   13db0:	9c 01       	movw	r18, r24
   13db2:	40 e0       	ldi	r20, 0x00	; 0
   13db4:	c3 5f       	subi	r28, 0xF3	; 243
   13db6:	de 4f       	sbci	r29, 0xFE	; 254
   13db8:	28 83       	st	Y, r18
   13dba:	39 83       	std	Y+1, r19	; 0x01
   13dbc:	4a 83       	std	Y+2, r20	; 0x02
   13dbe:	cd 50       	subi	r28, 0x0D	; 13
   13dc0:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13dc2:	8e e9       	ldi	r24, 0x9E	; 158
   13dc4:	9e e1       	ldi	r25, 0x1E	; 30
   13dc6:	9c 01       	movw	r18, r24
   13dc8:	40 e0       	ldi	r20, 0x00	; 0
   13dca:	c0 5f       	subi	r28, 0xF0	; 240
   13dcc:	de 4f       	sbci	r29, 0xFE	; 254
   13dce:	28 83       	st	Y, r18
   13dd0:	39 83       	std	Y+1, r19	; 0x01
   13dd2:	4a 83       	std	Y+2, r20	; 0x02
   13dd4:	c0 51       	subi	r28, 0x10	; 16
   13dd6:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13dd8:	8e ec       	ldi	r24, 0xCE	; 206
   13dda:	9e e1       	ldi	r25, 0x1E	; 30
   13ddc:	9c 01       	movw	r18, r24
   13dde:	40 e0       	ldi	r20, 0x00	; 0
   13de0:	cd 5e       	subi	r28, 0xED	; 237
   13de2:	de 4f       	sbci	r29, 0xFE	; 254
   13de4:	28 83       	st	Y, r18
   13de6:	39 83       	std	Y+1, r19	; 0x01
   13de8:	4a 83       	std	Y+2, r20	; 0x02
   13dea:	c3 51       	subi	r28, 0x13	; 19
   13dec:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13dee:	8d ef       	ldi	r24, 0xFD	; 253
   13df0:	9e e1       	ldi	r25, 0x1E	; 30
   13df2:	9c 01       	movw	r18, r24
   13df4:	40 e0       	ldi	r20, 0x00	; 0
   13df6:	ca 5e       	subi	r28, 0xEA	; 234
   13df8:	de 4f       	sbci	r29, 0xFE	; 254
   13dfa:	28 83       	st	Y, r18
   13dfc:	39 83       	std	Y+1, r19	; 0x01
   13dfe:	4a 83       	std	Y+2, r20	; 0x02
   13e00:	c6 51       	subi	r28, 0x16	; 22
   13e02:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13e04:	8d e2       	ldi	r24, 0x2D	; 45
   13e06:	9f e1       	ldi	r25, 0x1F	; 31
   13e08:	9c 01       	movw	r18, r24
   13e0a:	40 e0       	ldi	r20, 0x00	; 0
   13e0c:	c7 5e       	subi	r28, 0xE7	; 231
   13e0e:	de 4f       	sbci	r29, 0xFE	; 254
   13e10:	28 83       	st	Y, r18
   13e12:	39 83       	std	Y+1, r19	; 0x01
   13e14:	4a 83       	std	Y+2, r20	; 0x02
   13e16:	c9 51       	subi	r28, 0x19	; 25
   13e18:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13e1a:	8b e5       	ldi	r24, 0x5B	; 91
   13e1c:	9f e1       	ldi	r25, 0x1F	; 31
   13e1e:	9c 01       	movw	r18, r24
   13e20:	40 e0       	ldi	r20, 0x00	; 0
   13e22:	c4 5e       	subi	r28, 0xE4	; 228
   13e24:	de 4f       	sbci	r29, 0xFE	; 254
   13e26:	28 83       	st	Y, r18
   13e28:	39 83       	std	Y+1, r19	; 0x01
   13e2a:	4a 83       	std	Y+2, r20	; 0x02
   13e2c:	cc 51       	subi	r28, 0x1C	; 28
   13e2e:	d1 40       	sbci	r29, 0x01	; 1
   13e30:	26 c0       	rjmp	.+76     	; 0x13e7e <Read_Config+0x140>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13e32:	81 e5       	ldi	r24, 0x51	; 81
   13e34:	9e e0       	ldi	r25, 0x0E	; 14
   13e36:	0e 94 a5 78 	call	0xf14a	; 0xf14a <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13e3a:	ed b7       	in	r30, 0x3d	; 61
   13e3c:	fe b7       	in	r31, 0x3e	; 62
   13e3e:	15 83       	std	Z+5, r17	; 0x05
   13e40:	04 83       	std	Z+4, r16	; 0x04
   13e42:	8f e0       	ldi	r24, 0x0F	; 15
   13e44:	91 e2       	ldi	r25, 0x21	; 33
   13e46:	a0 e0       	ldi	r26, 0x00	; 0
   13e48:	81 83       	std	Z+1, r24	; 0x01
   13e4a:	92 83       	std	Z+2, r25	; 0x02
   13e4c:	a3 83       	std	Z+3, r26	; 0x03
   13e4e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        set_Config_Defaults();
        return(errors);
   13e52:	81 e0       	ldi	r24, 0x01	; 1
   13e54:	90 e0       	ldi	r25, 0x00	; 0
   13e56:	70 c3       	rjmp	.+1760   	; 0x14538 <Read_Config+0x7fa>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13e58:	ff ef       	ldi	r31, 0xFF	; 255
   13e5a:	2f 1a       	sub	r2, r31
   13e5c:	3f 0a       	sbc	r3, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13e5e:	4e e7       	ldi	r20, 0x7E	; 126
   13e60:	50 e0       	ldi	r21, 0x00	; 0
   13e62:	9e 01       	movw	r18, r28
   13e64:	28 5f       	subi	r18, 0xF8	; 248
   13e66:	3f 4f       	sbci	r19, 0xFF	; 255
   13e68:	49 01       	movw	r8, r18
   13e6a:	b9 01       	movw	r22, r18
   13e6c:	ce 01       	movw	r24, r28
   13e6e:	88 57       	subi	r24, 0x78	; 120
   13e70:	9f 4f       	sbci	r25, 0xFF	; 255
   13e72:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   13e76:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13e78:	88 85       	ldd	r24, Y+8	; 0x08
   13e7a:	81 11       	cpse	r24, r1
   13e7c:	10 c0       	rjmp	.+32     	; 0x13e9e <Read_Config+0x160>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13e7e:	c5 5f       	subi	r28, 0xF5	; 245
   13e80:	de 4f       	sbci	r29, 0xFE	; 254
   13e82:	48 81       	ld	r20, Y
   13e84:	59 81       	ldd	r21, Y+1	; 0x01
   13e86:	cb 50       	subi	r28, 0x0B	; 11
   13e88:	d1 40       	sbci	r29, 0x01	; 1
   13e8a:	6e e7       	ldi	r22, 0x7E	; 126
   13e8c:	70 e0       	ldi	r23, 0x00	; 0
   13e8e:	ce 01       	movw	r24, r28
   13e90:	88 57       	subi	r24, 0x78	; 120
   13e92:	9f 4f       	sbci	r25, 0xFF	; 255
   13e94:	0e 94 8c 76 	call	0xed18	; 0xed18 <fgets>
   13e98:	89 2b       	or	r24, r25
   13e9a:	f1 f6       	brne	.-68     	; 0x13e58 <Read_Config+0x11a>
   13e9c:	0d c3       	rjmp	.+1562   	; 0x144b8 <Read_Config+0x77a>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13e9e:	83 32       	cpi	r24, 0x23	; 35
   13ea0:	71 f3       	breq	.-36     	; 0x13e7e <Read_Config+0x140>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13ea2:	c4 01       	movw	r24, r8
   13ea4:	0e 94 28 93 	call	0x12650	; 0x12650 <tok_index>
   13ea8:	8f 3f       	cpi	r24, 0xFF	; 255
   13eaa:	49 f4       	brne	.+18     	; 0x13ebe <Read_Config+0x180>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13eac:	ed b7       	in	r30, 0x3d	; 61
   13eae:	fe b7       	in	r31, 0x3e	; 62
   13eb0:	37 82       	std	Z+7, r3	; 0x07
   13eb2:	26 82       	std	Z+6, r2	; 0x06
   13eb4:	95 82       	std	Z+5, r9	; 0x05
   13eb6:	84 82       	std	Z+4, r8	; 0x04
   13eb8:	8d ee       	ldi	r24, 0xED	; 237
   13eba:	90 e2       	ldi	r25, 0x20	; 32
   13ebc:	c4 c0       	rjmp	.+392    	; 0x14046 <Read_Config+0x308>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13ebe:	24 e0       	ldi	r18, 0x04	; 4
   13ec0:	82 02       	muls	r24, r18
   13ec2:	f0 01       	movw	r30, r0
   13ec4:	11 24       	eor	r1, r1
   13ec6:	ec 53       	subi	r30, 0x3C	; 60
   13ec8:	fe 4f       	sbci	r31, 0xFE	; 254
   13eca:	02 81       	ldd	r16, Z+2	; 0x02
   13ecc:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13ece:	4e e7       	ldi	r20, 0x7E	; 126
   13ed0:	50 e0       	ldi	r21, 0x00	; 0
   13ed2:	b4 01       	movw	r22, r8
   13ed4:	c5 01       	movw	r24, r10
   13ed6:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   13eda:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13edc:	64 e6       	ldi	r22, 0x64	; 100
   13ede:	7e e0       	ldi	r23, 0x0E	; 14
   13ee0:	c4 01       	movw	r24, r8
   13ee2:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   13ee6:	89 2b       	or	r24, r25
   13ee8:	39 f0       	breq	.+14     	; 0x13ef8 <Read_Config+0x1ba>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13eea:	4e e7       	ldi	r20, 0x7E	; 126
   13eec:	50 e0       	ldi	r21, 0x00	; 0
   13eee:	b4 01       	movw	r22, r8
   13ef0:	c5 01       	movw	r24, r10
   13ef2:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   13ef6:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13ef8:	c4 01       	movw	r24, r8
   13efa:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13efe:	01 31       	cpi	r16, 0x11	; 17
   13f00:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13f02:	19 f4       	brne	.+6      	; 0x13f0a <Read_Config+0x1cc>
   13f04:	cb da       	rcall	.-2666   	; 0x1349c <pop_state>
   13f06:	3c 01       	movw	r6, r24
            continue;
   13f08:	ba cf       	rjmp	.-140    	; 0x13e7e <Read_Config+0x140>
        }

        switch(state)
   13f0a:	30 e1       	ldi	r19, 0x10	; 16
   13f0c:	63 16       	cp	r6, r19
   13f0e:	71 04       	cpc	r7, r1
   13f10:	08 f0       	brcs	.+2      	; 0x13f14 <Read_Config+0x1d6>
   13f12:	bc c2       	rjmp	.+1400   	; 0x1448c <Read_Config+0x74e>
   13f14:	f3 01       	movw	r30, r6
   13f16:	ea 53       	subi	r30, 0x3A	; 58
   13f18:	ff 4f       	sbci	r31, 0xFF	; 255
   13f1a:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13f1e:	0e 30       	cpi	r16, 0x0E	; 14
   13f20:	11 05       	cpc	r17, r1
   13f22:	09 f4       	brne	.+2      	; 0x13f26 <Read_Config+0x1e8>
   13f24:	83 c0       	rjmp	.+262    	; 0x1402c <Read_Config+0x2ee>
   13f26:	44 f4       	brge	.+16     	; 0x13f38 <Read_Config+0x1fa>
   13f28:	02 30       	cpi	r16, 0x02	; 2
   13f2a:	11 05       	cpc	r17, r1
   13f2c:	09 f4       	brne	.+2      	; 0x13f30 <Read_Config+0x1f2>
   13f2e:	42 c0       	rjmp	.+132    	; 0x13fb4 <Read_Config+0x276>
   13f30:	0c 30       	cpi	r16, 0x0C	; 12
   13f32:	11 05       	cpc	r17, r1
   13f34:	19 f1       	breq	.+70     	; 0x13f7c <Read_Config+0x23e>
   13f36:	7f c0       	rjmp	.+254    	; 0x14036 <Read_Config+0x2f8>
   13f38:	03 32       	cpi	r16, 0x23	; 35
   13f3a:	11 05       	cpc	r17, r1
   13f3c:	f9 f0       	breq	.+62     	; 0x13f7c <Read_Config+0x23e>
   13f3e:	04 32       	cpi	r16, 0x24	; 36
   13f40:	11 05       	cpc	r17, r1
   13f42:	29 f0       	breq	.+10     	; 0x13f4e <Read_Config+0x210>
   13f44:	00 32       	cpi	r16, 0x20	; 32
   13f46:	11 05       	cpc	r17, r1
   13f48:	09 f0       	breq	.+2      	; 0x13f4c <Read_Config+0x20e>
   13f4a:	75 c0       	rjmp	.+234    	; 0x14036 <Read_Config+0x2f8>
   13f4c:	4f c0       	rjmp	.+158    	; 0x13fec <Read_Config+0x2ae>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13f4e:	80 e0       	ldi	r24, 0x00	; 0
   13f50:	90 e0       	ldi	r25, 0x00	; 0
   13f52:	8b da       	rcall	.-2794   	; 0x1346a <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13f54:	82 e0       	ldi	r24, 0x02	; 2
   13f56:	90 e0       	ldi	r25, 0x00	; 0
   13f58:	b7 d9       	rcall	.-3218   	; 0x132c8 <alloc_device>
   13f5a:	c8 5f       	subi	r28, 0xF8	; 248
   13f5c:	de 4f       	sbci	r29, 0xFE	; 254
   13f5e:	88 83       	st	Y, r24
   13f60:	c8 50       	subi	r28, 0x08	; 8
   13f62:	d1 40       	sbci	r29, 0x01	; 1
   13f64:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13f66:	09 f4       	brne	.+2      	; 0x13f6a <Read_Config+0x22c>
   13f68:	8a cf       	rjmp	.-236    	; 0x13e7e <Read_Config+0x140>
   13f6a:	4b e0       	ldi	r20, 0x0B	; 11
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13f6c:	84 02       	muls	r24, r20
   13f6e:	f0 01       	movw	r30, r0
   13f70:	11 24       	eor	r1, r1
   13f72:	ec 50       	subi	r30, 0x0C	; 12
   13f74:	f1 4e       	sbci	r31, 0xE1	; 225
   13f76:	e7 80       	ldd	r14, Z+7	; 0x07
   13f78:	f0 84       	ldd	r15, Z+8	; 0x08
   13f7a:	18 c0       	rjmp	.+48     	; 0x13fac <Read_Config+0x26e>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13f7c:	80 e0       	ldi	r24, 0x00	; 0
   13f7e:	90 e0       	ldi	r25, 0x00	; 0
   13f80:	74 da       	rcall	.-2840   	; 0x1346a <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13f82:	83 e0       	ldi	r24, 0x03	; 3
   13f84:	90 e0       	ldi	r25, 0x00	; 0
   13f86:	a0 d9       	rcall	.-3264   	; 0x132c8 <alloc_device>
   13f88:	c8 5f       	subi	r28, 0xF8	; 248
   13f8a:	de 4f       	sbci	r29, 0xFE	; 254
   13f8c:	88 83       	st	Y, r24
   13f8e:	c8 50       	subi	r28, 0x08	; 8
   13f90:	d1 40       	sbci	r29, 0x01	; 1
   13f92:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13f94:	09 f4       	brne	.+2      	; 0x13f98 <Read_Config+0x25a>
   13f96:	73 cf       	rjmp	.-282    	; 0x13e7e <Read_Config+0x140>
   13f98:	9b e0       	ldi	r25, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13f9a:	89 02       	muls	r24, r25
   13f9c:	f0 01       	movw	r30, r0
   13f9e:	11 24       	eor	r1, r1
   13fa0:	ec 50       	subi	r30, 0x0C	; 12
   13fa2:	f1 4e       	sbci	r31, 0xE1	; 225
   13fa4:	e7 80       	ldd	r14, Z+7	; 0x07
   13fa6:	f0 84       	ldd	r15, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
   13fa8:	b4 01       	movw	r22, r8
   13faa:	19 db       	rcall	.-2510   	; 0x135de <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13fac:	66 24       	eor	r6, r6
   13fae:	63 94       	inc	r6
   13fb0:	71 2c       	mov	r7, r1
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13fb2:	65 cf       	rjmp	.-310    	; 0x13e7e <Read_Config+0x140>
   13fb4:	80 e0       	ldi	r24, 0x00	; 0
   13fb6:	90 e0       	ldi	r25, 0x00	; 0
   13fb8:	58 da       	rcall	.-2896   	; 0x1346a <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13fba:	81 e0       	ldi	r24, 0x01	; 1
   13fbc:	90 e0       	ldi	r25, 0x00	; 0
   13fbe:	84 d9       	rcall	.-3320   	; 0x132c8 <alloc_device>
   13fc0:	c8 5f       	subi	r28, 0xF8	; 248
   13fc2:	de 4f       	sbci	r29, 0xFE	; 254
   13fc4:	88 83       	st	Y, r24
   13fc6:	c8 50       	subi	r28, 0x08	; 8
   13fc8:	d1 40       	sbci	r29, 0x01	; 1
   13fca:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13fcc:	09 f4       	brne	.+2      	; 0x13fd0 <Read_Config+0x292>
   13fce:	57 cf       	rjmp	.-338    	; 0x13e7e <Read_Config+0x140>
   13fd0:	ab e0       	ldi	r26, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13fd2:	8a 02       	muls	r24, r26
   13fd4:	f0 01       	movw	r30, r0
   13fd6:	11 24       	eor	r1, r1
   13fd8:	ec 50       	subi	r30, 0x0C	; 12
   13fda:	f1 4e       	sbci	r31, 0xE1	; 225
   13fdc:	47 80       	ldd	r4, Z+7	; 0x07
   13fde:	50 84       	ldd	r5, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
   13fe0:	b4 01       	movw	r22, r8
   13fe2:	fd da       	rcall	.-2566   	; 0x135de <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13fe4:	aa e0       	ldi	r26, 0x0A	; 10
   13fe6:	6a 2e       	mov	r6, r26
   13fe8:	71 2c       	mov	r7, r1
   13fea:	49 cf       	rjmp	.-366    	; 0x13e7e <Read_Config+0x140>
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13fec:	80 e0       	ldi	r24, 0x00	; 0
   13fee:	90 e0       	ldi	r25, 0x00	; 0
   13ff0:	3c da       	rcall	.-2952   	; 0x1346a <push_state>
   13ff2:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13ff4:	90 e0       	ldi	r25, 0x00	; 0
   13ff6:	68 d9       	rcall	.-3376   	; 0x132c8 <alloc_device>
   13ff8:	c8 5f       	subi	r28, 0xF8	; 248
   13ffa:	de 4f       	sbci	r29, 0xFE	; 254
   13ffc:	88 83       	st	Y, r24
   13ffe:	c8 50       	subi	r28, 0x08	; 8
   14000:	d1 40       	sbci	r29, 0x01	; 1
   14002:	8f 3f       	cpi	r24, 0xFF	; 255
   14004:	09 f4       	brne	.+2      	; 0x14008 <Read_Config+0x2ca>
                        if(index == -1)
   14006:	3b cf       	rjmp	.-394    	; 0x13e7e <Read_Config+0x140>
   14008:	bb e0       	ldi	r27, 0x0B	; 11
   1400a:	8b 02       	muls	r24, r27
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1400c:	f0 01       	movw	r30, r0
   1400e:	11 24       	eor	r1, r1
   14010:	ec 50       	subi	r30, 0x0C	; 12
   14012:	f1 4e       	sbci	r31, 0xE1	; 225
   14014:	27 81       	ldd	r18, Z+7	; 0x07
   14016:	30 85       	ldd	r19, Z+8	; 0x08
   14018:	c7 5f       	subi	r28, 0xF7	; 247
   1401a:	de 4f       	sbci	r29, 0xFE	; 254
   1401c:	39 83       	std	Y+1, r19	; 0x01
   1401e:	28 83       	st	Y, r18
   14020:	c9 50       	subi	r28, 0x09	; 9
   14022:	d1 40       	sbci	r29, 0x01	; 1
   14024:	fe e0       	ldi	r31, 0x0E	; 14
   14026:	6f 2e       	mov	r6, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   14028:	71 2c       	mov	r7, r1
   1402a:	29 cf       	rjmp	.-430    	; 0x13e7e <Read_Config+0x140>
   1402c:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   14030:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   14034:	24 cf       	rjmp	.-440    	; 0x13e7e <Read_Config+0x140>
   14036:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14038:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   1403a:	37 82       	std	Z+7, r3	; 0x07
   1403c:	26 82       	std	Z+6, r2	; 0x06
   1403e:	b5 82       	std	Z+5, r11	; 0x05
   14040:	a4 82       	std	Z+4, r10	; 0x04
   14042:	8b ec       	ldi	r24, 0xCB	; 203
   14044:	90 e2       	ldi	r25, 0x20	; 32
   14046:	a0 e0       	ldi	r26, 0x00	; 0
   14048:	81 83       	std	Z+1, r24	; 0x01
   1404a:	92 83       	std	Z+2, r25	; 0x02
   1404c:	a3 83       	std	Z+3, r26	; 0x03
   1404e:	2e c2       	rjmp	.+1116   	; 0x144ac <Read_Config+0x76e>
   14050:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   14052:	11 05       	cpc	r17, r1
   14054:	39 f4       	brne	.+14     	; 0x14064 <Read_Config+0x326>
   14056:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   14058:	90 e0       	ldi	r25, 0x00	; 0
   1405a:	07 da       	rcall	.-3058   	; 0x1346a <push_state>
   1405c:	ef e0       	ldi	r30, 0x0F	; 15
   1405e:	6e 2e       	mov	r6, r30
                    state = PRINTER_CONFIG;
   14060:	71 2c       	mov	r7, r1
   14062:	0d cf       	rjmp	.-486    	; 0x13e7e <Read_Config+0x140>
   14064:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   14066:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   14068:	37 82       	std	Z+7, r3	; 0x07
   1406a:	26 82       	std	Z+6, r2	; 0x06
   1406c:	b5 82       	std	Z+5, r11	; 0x05
   1406e:	a4 82       	std	Z+4, r10	; 0x04
   14070:	81 ea       	ldi	r24, 0xA1	; 161
   14072:	90 e2       	ldi	r25, 0x20	; 32
   14074:	e8 cf       	rjmp	.-48     	; 0x14046 <Read_Config+0x308>
   14076:	01 30       	cpi	r16, 0x01	; 1
   14078:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   1407a:	c1 f4       	brne	.+48     	; 0x140ac <Read_Config+0x36e>
   1407c:	c8 5f       	subi	r28, 0xF8	; 248
   1407e:	de 4f       	sbci	r29, 0xFE	; 254
                {
					address = val.b;
                    Devices[index].ADDRESS = address;
   14080:	28 81       	ld	r18, Y
   14082:	c8 50       	subi	r28, 0x08	; 8
   14084:	d1 40       	sbci	r29, 0x01	; 1
   14086:	3b e0       	ldi	r19, 0x0B	; 11
   14088:	23 02       	muls	r18, r19
   1408a:	f0 01       	movw	r30, r0
   1408c:	11 24       	eor	r1, r1
   1408e:	ec 50       	subi	r30, 0x0C	; 12
   14090:	f1 4e       	sbci	r31, 0xE1	; 225
   14092:	61 83       	std	Z+1, r22	; 0x01
   14094:	c7 5f       	subi	r28, 0xF7	; 247
   14096:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = address;
   14098:	a8 81       	ld	r26, Y
   1409a:	b9 81       	ldd	r27, Y+1	; 0x01
   1409c:	c9 50       	subi	r28, 0x09	; 9
   1409e:	d1 40       	sbci	r29, 0x01	; 1
   140a0:	6c 93       	st	X, r22
   140a2:	8f ef       	ldi	r24, 0xFF	; 255
   140a4:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   140a6:	fd 01       	movw	r30, r26
   140a8:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   140aa:	e9 ce       	rjmp	.-558    	; 0x13e7e <Read_Config+0x140>
   140ac:	ed b7       	in	r30, 0x3d	; 61
   140ae:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   140b0:	37 82       	std	Z+7, r3	; 0x07
   140b2:	26 82       	std	Z+6, r2	; 0x06
   140b4:	b5 82       	std	Z+5, r11	; 0x05
   140b6:	a4 82       	std	Z+4, r10	; 0x04
   140b8:	80 e7       	ldi	r24, 0x70	; 112
   140ba:	90 e2       	ldi	r25, 0x20	; 32
   140bc:	c4 cf       	rjmp	.-120    	; 0x14046 <Read_Config+0x308>
   140be:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   140c0:	11 05       	cpc	r17, r1
   140c2:	d9 f0       	breq	.+54     	; 0x140fa <Read_Config+0x3bc>
   140c4:	6c f4       	brge	.+26     	; 0x140e0 <Read_Config+0x3a2>
   140c6:	09 30       	cpi	r16, 0x09	; 9
   140c8:	11 05       	cpc	r17, r1
   140ca:	f1 f0       	breq	.+60     	; 0x14108 <Read_Config+0x3ca>
   140cc:	0b 30       	cpi	r16, 0x0B	; 11
   140ce:	11 05       	cpc	r17, r1
   140d0:	49 f5       	brne	.+82     	; 0x14124 <Read_Config+0x3e6>
   140d2:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   140d4:	90 e0       	ldi	r25, 0x00	; 0
   140d6:	c9 d9       	rcall	.-3182   	; 0x1346a <push_state>
   140d8:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   140da:	65 2e       	mov	r6, r21
   140dc:	71 2c       	mov	r7, r1
   140de:	cf ce       	rjmp	.-610    	; 0x13e7e <Read_Config+0x140>
                        break;
   140e0:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   140e2:	11 05       	cpc	r17, r1
   140e4:	c1 f0       	breq	.+48     	; 0x14116 <Read_Config+0x3d8>
   140e6:	0a 32       	cpi	r16, 0x2A	; 42
   140e8:	11 05       	cpc	r17, r1
   140ea:	e1 f4       	brne	.+56     	; 0x14124 <Read_Config+0x3e6>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   140ec:	81 e0       	ldi	r24, 0x01	; 1
   140ee:	90 e0       	ldi	r25, 0x00	; 0
   140f0:	bc d9       	rcall	.-3208   	; 0x1346a <push_state>
                        state = SS80_VOLUME;
   140f2:	36 e0       	ldi	r19, 0x06	; 6
   140f4:	63 2e       	mov	r6, r19
   140f6:	71 2c       	mov	r7, r1
                        break;
   140f8:	c2 ce       	rjmp	.-636    	; 0x13e7e <Read_Config+0x140>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   140fa:	81 e0       	ldi	r24, 0x01	; 1
   140fc:	90 e0       	ldi	r25, 0x00	; 0
   140fe:	b5 d9       	rcall	.-3222   	; 0x1346a <push_state>
                        state = SS80_HEADER;
   14100:	72 e0       	ldi	r23, 0x02	; 2
   14102:	67 2e       	mov	r6, r23
   14104:	71 2c       	mov	r7, r1
                        break;
   14106:	bb ce       	rjmp	.-650    	; 0x13e7e <Read_Config+0x140>
                    case TOK_CONFIG:
                        push_state(state);
   14108:	81 e0       	ldi	r24, 0x01	; 1
   1410a:	90 e0       	ldi	r25, 0x00	; 0
   1410c:	ae d9       	rcall	.-3236   	; 0x1346a <push_state>
   1410e:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   14110:	66 2e       	mov	r6, r22
   14112:	71 2c       	mov	r7, r1
   14114:	b4 ce       	rjmp	.-664    	; 0x13e7e <Read_Config+0x140>
                        break;
   14116:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   14118:	90 e0       	ldi	r25, 0x00	; 0
   1411a:	a7 d9       	rcall	.-3250   	; 0x1346a <push_state>
   1411c:	45 e0       	ldi	r20, 0x05	; 5
   1411e:	64 2e       	mov	r6, r20
                        state = SS80_UNIT;
   14120:	71 2c       	mov	r7, r1
   14122:	ad ce       	rjmp	.-678    	; 0x13e7e <Read_Config+0x140>
   14124:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14126:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   14128:	37 82       	std	Z+7, r3	; 0x07
   1412a:	26 82       	std	Z+6, r2	; 0x06
   1412c:	b5 82       	std	Z+5, r11	; 0x05
   1412e:	a4 82       	std	Z+4, r10	; 0x04
   14130:	83 e4       	ldi	r24, 0x43	; 67
   14132:	90 e2       	ldi	r25, 0x20	; 32
   14134:	88 cf       	rjmp	.-240    	; 0x14046 <Read_Config+0x308>
   14136:	02 31       	cpi	r16, 0x12	; 18
   14138:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   1413a:	11 f1       	breq	.+68     	; 0x14180 <Read_Config+0x442>
   1413c:	0f 31       	cpi	r16, 0x1F	; 31
   1413e:	11 05       	cpc	r17, r1
   14140:	89 f0       	breq	.+34     	; 0x14164 <Read_Config+0x426>
   14142:	01 30       	cpi	r16, 0x01	; 1
   14144:	11 05       	cpc	r17, r1
   14146:	09 f5       	brne	.+66     	; 0x1418a <Read_Config+0x44c>
   14148:	c8 5f       	subi	r28, 0xF8	; 248
   1414a:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_ADDRESS:
						address = val.b;
                        Devices[index].ADDRESS = address;
   1414c:	28 81       	ld	r18, Y
   1414e:	c8 50       	subi	r28, 0x08	; 8
   14150:	d1 40       	sbci	r29, 0x01	; 1
   14152:	3b e0       	ldi	r19, 0x0B	; 11
   14154:	23 02       	muls	r18, r19
   14156:	f0 01       	movw	r30, r0
   14158:	11 24       	eor	r1, r1
   1415a:	ec 50       	subi	r30, 0x0C	; 12
   1415c:	f1 4e       	sbci	r31, 0xE1	; 225
   1415e:	61 83       	std	Z+1, r22	; 0x01
   14160:	d7 01       	movw	r26, r14
   14162:	33 c1       	rjmp	.+614    	; 0x143ca <Read_Config+0x68c>
                        SS80p->HEADER.ADDRESS  = address;
   14164:	c8 5f       	subi	r28, 0xF8	; 248
   14166:	de 4f       	sbci	r29, 0xFE	; 254
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   14168:	b8 81       	ld	r27, Y
   1416a:	c8 50       	subi	r28, 0x08	; 8
   1416c:	d1 40       	sbci	r29, 0x01	; 1
   1416e:	2b e0       	ldi	r18, 0x0B	; 11
   14170:	b2 02       	muls	r27, r18
   14172:	f0 01       	movw	r30, r0
   14174:	11 24       	eor	r1, r1
   14176:	ec 50       	subi	r30, 0x0C	; 12
   14178:	f1 4e       	sbci	r31, 0xE1	; 225
   1417a:	62 83       	std	Z+2, r22	; 0x02
   1417c:	f7 01       	movw	r30, r14
   1417e:	27 c1       	rjmp	.+590    	; 0x143ce <Read_Config+0x690>
                        SS80p->HEADER.PPR = ppr;
   14180:	c4 01       	movw	r24, r8
   14182:	0e 94 21 32 	call	0x6442	; 0x6442 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   14186:	f7 01       	movw	r30, r14
   14188:	28 c1       	rjmp	.+592    	; 0x143da <Read_Config+0x69c>
   1418a:	ed b7       	in	r30, 0x3d	; 61
   1418c:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1418e:	37 82       	std	Z+7, r3	; 0x07
   14190:	26 82       	std	Z+6, r2	; 0x06
   14192:	b5 82       	std	Z+5, r11	; 0x05
   14194:	a4 82       	std	Z+4, r10	; 0x04
   14196:	85 e1       	ldi	r24, 0x15	; 21
   14198:	90 e2       	ldi	r25, 0x20	; 32
   1419a:	55 cf       	rjmp	.-342    	; 0x14046 <Read_Config+0x308>
   1419c:	07 31       	cpi	r16, 0x17	; 23
   1419e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   141a0:	21 f4       	brne	.+8      	; 0x141aa <Read_Config+0x46c>
   141a2:	96 2f       	mov	r25, r22
   141a4:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   141a6:	f7 01       	movw	r30, r14
   141a8:	2f c1       	rjmp	.+606    	; 0x14408 <Read_Config+0x6ca>
   141aa:	ed b7       	in	r30, 0x3d	; 61
   141ac:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   141ae:	37 82       	std	Z+7, r3	; 0x07
   141b0:	26 82       	std	Z+6, r2	; 0x06
   141b2:	b5 82       	std	Z+5, r11	; 0x05
   141b4:	a4 82       	std	Z+4, r10	; 0x04
   141b6:	87 ee       	ldi	r24, 0xE7	; 231
   141b8:	9f e1       	ldi	r25, 0x1F	; 31
   141ba:	45 cf       	rjmp	.-374    	; 0x14046 <Read_Config+0x308>
   141bc:	06 32       	cpi	r16, 0x26	; 38
   141be:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   141c0:	71 f0       	breq	.+28     	; 0x141de <Read_Config+0x4a0>
   141c2:	08 32       	cpi	r16, 0x28	; 40
   141c4:	11 05       	cpc	r17, r1
   141c6:	39 f0       	breq	.+14     	; 0x141d6 <Read_Config+0x498>
   141c8:	05 32       	cpi	r16, 0x25	; 37
   141ca:	11 05       	cpc	r17, r1
   141cc:	59 f4       	brne	.+22     	; 0x141e4 <Read_Config+0x4a6>
   141ce:	96 2f       	mov	r25, r22
   141d0:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   141d2:	f7 01       	movw	r30, r14
   141d4:	42 c1       	rjmp	.+644    	; 0x1445a <Read_Config+0x71c>
   141d6:	96 2f       	mov	r25, r22
   141d8:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   141da:	f7 01       	movw	r30, r14
   141dc:	3b c1       	rjmp	.+630    	; 0x14454 <Read_Config+0x716>
   141de:	f7 01       	movw	r30, r14
   141e0:	64 87       	std	Z+12, r22	; 0x0c
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   141e2:	4d ce       	rjmp	.-870    	; 0x13e7e <Read_Config+0x140>
   141e4:	ed b7       	in	r30, 0x3d	; 61
                        break;
   141e6:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   141e8:	37 82       	std	Z+7, r3	; 0x07
   141ea:	26 82       	std	Z+6, r2	; 0x06
   141ec:	b5 82       	std	Z+5, r11	; 0x05
   141ee:	a4 82       	std	Z+4, r10	; 0x04
   141f0:	85 eb       	ldi	r24, 0xB5	; 181
   141f2:	9f e1       	ldi	r25, 0x1F	; 31
   141f4:	28 cf       	rjmp	.-432    	; 0x14046 <Read_Config+0x308>
   141f6:	0a 30       	cpi	r16, 0x0A	; 10
   141f8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   141fa:	09 f4       	brne	.+2      	; 0x141fe <Read_Config+0x4c0>
   141fc:	45 c0       	rjmp	.+138    	; 0x14288 <Read_Config+0x54a>
   141fe:	d4 f4       	brge	.+52     	; 0x14234 <Read_Config+0x4f6>
   14200:	05 30       	cpi	r16, 0x05	; 5
   14202:	11 05       	cpc	r17, r1
   14204:	d1 f1       	breq	.+116    	; 0x1427a <Read_Config+0x53c>
   14206:	64 f4       	brge	.+24     	; 0x14220 <Read_Config+0x4e2>
   14208:	01 15       	cp	r16, r1
   1420a:	11 05       	cpc	r17, r1
   1420c:	09 f4       	brne	.+2      	; 0x14210 <Read_Config+0x4d2>
   1420e:	40 c0       	rjmp	.+128    	; 0x14290 <Read_Config+0x552>
   14210:	04 30       	cpi	r16, 0x04	; 4
   14212:	11 05       	cpc	r17, r1
   14214:	09 f0       	breq	.+2      	; 0x14218 <Read_Config+0x4da>
   14216:	46 c0       	rjmp	.+140    	; 0x142a4 <Read_Config+0x566>
   14218:	f7 01       	movw	r30, r14
   1421a:	66 8b       	std	Z+22, r22	; 0x16
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   1421c:	77 8b       	std	Z+23, r23	; 0x17
   1421e:	2f ce       	rjmp	.-930    	; 0x13e7e <Read_Config+0x140>
   14220:	06 30       	cpi	r16, 0x06	; 6
                        break;
   14222:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14224:	71 f1       	breq	.+92     	; 0x14282 <Read_Config+0x544>
   14226:	07 30       	cpi	r16, 0x07	; 7
   14228:	11 05       	cpc	r17, r1
   1422a:	e1 f5       	brne	.+120    	; 0x142a4 <Read_Config+0x566>
   1422c:	f7 01       	movw	r30, r14
   1422e:	62 8b       	std	Z+18, r22	; 0x12
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   14230:	73 8b       	std	Z+19, r23	; 0x13
   14232:	25 ce       	rjmp	.-950    	; 0x13e7e <Read_Config+0x140>
   14234:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   14236:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14238:	79 f1       	breq	.+94     	; 0x14298 <Read_Config+0x55a>
   1423a:	4c f4       	brge	.+18     	; 0x1424e <Read_Config+0x510>
   1423c:	0f 30       	cpi	r16, 0x0F	; 15
   1423e:	11 05       	cpc	r17, r1
   14240:	b1 f0       	breq	.+44     	; 0x1426e <Read_Config+0x530>
   14242:	03 31       	cpi	r16, 0x13	; 19
   14244:	11 05       	cpc	r17, r1
   14246:	71 f5       	brne	.+92     	; 0x142a4 <Read_Config+0x566>
   14248:	f7 01       	movw	r30, r14
   1424a:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   1424c:	18 ce       	rjmp	.-976    	; 0x13e7e <Read_Config+0x140>
   1424e:	01 32       	cpi	r16, 0x21	; 33
                        break;
   14250:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14252:	29 f1       	breq	.+74     	; 0x1429e <Read_Config+0x560>
   14254:	09 32       	cpi	r16, 0x29	; 41
   14256:	11 05       	cpc	r17, r1
   14258:	39 f0       	breq	.+14     	; 0x14268 <Read_Config+0x52a>
   1425a:	0e 31       	cpi	r16, 0x1E	; 30
   1425c:	11 05       	cpc	r17, r1
   1425e:	11 f5       	brne	.+68     	; 0x142a4 <Read_Config+0x566>
   14260:	f7 01       	movw	r30, r14
   14262:	62 8f       	std	Z+26, r22	; 0x1a
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   14264:	73 8f       	std	Z+27, r23	; 0x1b
   14266:	0b ce       	rjmp	.-1002   	; 0x13e7e <Read_Config+0x140>
   14268:	f7 01       	movw	r30, r14
                        break;
   1426a:	65 87       	std	Z+13, r22	; 0x0d

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   1426c:	08 ce       	rjmp	.-1008   	; 0x13e7e <Read_Config+0x140>
   1426e:	f7 01       	movw	r30, r14
                        break;
   14270:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   14272:	77 87       	std	Z+15, r23	; 0x0f
   14274:	80 8b       	std	Z+16, r24	; 0x10
   14276:	91 8b       	std	Z+17, r25	; 0x11
   14278:	02 ce       	rjmp	.-1020   	; 0x13e7e <Read_Config+0x140>
   1427a:	61 70       	andi	r22, 0x01	; 1
                        break;
   1427c:	f7 01       	movw	r30, r14
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   1427e:	64 8b       	std	Z+20, r22	; 0x14
   14280:	fe cd       	rjmp	.-1028   	; 0x13e7e <Read_Config+0x140>
   14282:	f7 01       	movw	r30, r14
                        break;
   14284:	65 8b       	std	Z+21, r22	; 0x15
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   14286:	fb cd       	rjmp	.-1034   	; 0x13e7e <Read_Config+0x140>
   14288:	f7 01       	movw	r30, r14
                        break;
   1428a:	60 8f       	std	Z+24, r22	; 0x18
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   1428c:	71 8f       	std	Z+25, r23	; 0x19
   1428e:	f7 cd       	rjmp	.-1042   	; 0x13e7e <Read_Config+0x140>
   14290:	f7 01       	movw	r30, r14
                        break;
   14292:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   14294:	75 8f       	std	Z+29, r23	; 0x1d
   14296:	f3 cd       	rjmp	.-1050   	; 0x13e7e <Read_Config+0x140>
   14298:	f7 01       	movw	r30, r14
                        break;
   1429a:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   1429c:	f0 cd       	rjmp	.-1056   	; 0x13e7e <Read_Config+0x140>
   1429e:	f7 01       	movw	r30, r14
                        break;
   142a0:	60 a3       	std	Z+32, r22	; 0x20
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   142a2:	ed cd       	rjmp	.-1062   	; 0x13e7e <Read_Config+0x140>
   142a4:	ed b7       	in	r30, 0x3d	; 61
                        break;
   142a6:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   142a8:	37 82       	std	Z+7, r3	; 0x07
   142aa:	26 82       	std	Z+6, r2	; 0x06
   142ac:	b5 82       	std	Z+5, r11	; 0x05
   142ae:	a4 82       	std	Z+4, r10	; 0x04
   142b0:	89 e8       	ldi	r24, 0x89	; 137
   142b2:	9f e1       	ldi	r25, 0x1F	; 31
   142b4:	c8 ce       	rjmp	.-624    	; 0x14046 <Read_Config+0x308>
   142b6:	0a 31       	cpi	r16, 0x1A	; 26
   142b8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   142ba:	b9 f0       	breq	.+46     	; 0x142ea <Read_Config+0x5ac>
   142bc:	64 f4       	brge	.+24     	; 0x142d6 <Read_Config+0x598>
   142be:	08 31       	cpi	r16, 0x18	; 24
   142c0:	11 05       	cpc	r17, r1
   142c2:	e1 f0       	breq	.+56     	; 0x142fc <Read_Config+0x5be>
   142c4:	09 31       	cpi	r16, 0x19	; 25
   142c6:	11 05       	cpc	r17, r1
   142c8:	e1 f4       	brne	.+56     	; 0x14302 <Read_Config+0x5c4>
   142ca:	f7 01       	movw	r30, r14
   142cc:	60 a7       	std	Z+40, r22	; 0x28
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   142ce:	71 a7       	std	Z+41, r23	; 0x29
   142d0:	82 a7       	std	Z+42, r24	; 0x2a
   142d2:	93 a7       	std	Z+43, r25	; 0x2b
   142d4:	d4 cd       	rjmp	.-1112   	; 0x13e7e <Read_Config+0x140>
   142d6:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   142d8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   142da:	69 f0       	breq	.+26     	; 0x142f6 <Read_Config+0x5b8>
   142dc:	0d 31       	cpi	r16, 0x1D	; 29
   142de:	11 05       	cpc	r17, r1
   142e0:	81 f4       	brne	.+32     	; 0x14302 <Read_Config+0x5c4>
   142e2:	f7 01       	movw	r30, r14
   142e4:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   142e6:	77 a3       	std	Z+39, r23	; 0x27
   142e8:	ca cd       	rjmp	.-1132   	; 0x13e7e <Read_Config+0x140>
   142ea:	f7 01       	movw	r30, r14
                        break;
   142ec:	61 a3       	std	Z+33, r22	; 0x21

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   142ee:	72 a3       	std	Z+34, r23	; 0x22
   142f0:	83 a3       	std	Z+35, r24	; 0x23
   142f2:	94 a3       	std	Z+36, r25	; 0x24
   142f4:	c4 cd       	rjmp	.-1144   	; 0x13e7e <Read_Config+0x140>
   142f6:	f7 01       	movw	r30, r14
                        break;
   142f8:	65 a3       	std	Z+37, r22	; 0x25
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   142fa:	c1 cd       	rjmp	.-1150   	; 0x13e7e <Read_Config+0x140>
   142fc:	f7 01       	movw	r30, r14
                        break;
   142fe:	64 a7       	std	Z+44, r22	; 0x2c
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   14300:	be cd       	rjmp	.-1156   	; 0x13e7e <Read_Config+0x140>
   14302:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14304:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   14306:	37 82       	std	Z+7, r3	; 0x07
   14308:	26 82       	std	Z+6, r2	; 0x06
   1430a:	b5 82       	std	Z+5, r11	; 0x05
   1430c:	a4 82       	std	Z+4, r10	; 0x04
   1430e:	c4 5e       	subi	r28, 0xE4	; 228
   14310:	de 4f       	sbci	r29, 0xFE	; 254
   14312:	28 81       	ld	r18, Y
   14314:	39 81       	ldd	r19, Y+1	; 0x01
   14316:	4a 81       	ldd	r20, Y+2	; 0x02
   14318:	cc 51       	subi	r28, 0x1C	; 28
   1431a:	d1 40       	sbci	r29, 0x01	; 1
   1431c:	c4 c0       	rjmp	.+392    	; 0x144a6 <Read_Config+0x768>
   1431e:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   14320:	11 05       	cpc	r17, r1
   14322:	a1 f0       	breq	.+40     	; 0x1434c <Read_Config+0x60e>
   14324:	05 31       	cpi	r16, 0x15	; 21
   14326:	11 05       	cpc	r17, r1
   14328:	51 f0       	breq	.+20     	; 0x1433e <Read_Config+0x600>
   1432a:	09 30       	cpi	r16, 0x09	; 9
   1432c:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   1432e:	a9 f4       	brne	.+42     	; 0x1435a <Read_Config+0x61c>
   14330:	8a e0       	ldi	r24, 0x0A	; 10
   14332:	90 e0       	ldi	r25, 0x00	; 0
   14334:	9a d8       	rcall	.-3788   	; 0x1346a <push_state>
                        state = AMIGO_CONFIG;
   14336:	9c e0       	ldi	r25, 0x0C	; 12
   14338:	69 2e       	mov	r6, r25
   1433a:	71 2c       	mov	r7, r1
                        break;
   1433c:	a0 cd       	rjmp	.-1216   	; 0x13e7e <Read_Config+0x140>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   1433e:	8a e0       	ldi	r24, 0x0A	; 10
   14340:	90 e0       	ldi	r25, 0x00	; 0
   14342:	93 d8       	rcall	.-3802   	; 0x1346a <push_state>
   14344:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   14346:	62 2e       	mov	r6, r18
   14348:	71 2c       	mov	r7, r1
   1434a:	99 cd       	rjmp	.-1230   	; 0x13e7e <Read_Config+0x140>
                        break;
   1434c:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   1434e:	90 e0       	ldi	r25, 0x00	; 0
   14350:	8c d8       	rcall	.-3816   	; 0x1346a <push_state>
   14352:	8d e0       	ldi	r24, 0x0D	; 13
   14354:	68 2e       	mov	r6, r24
                        state = AMIGO_GEOMETRY;
   14356:	71 2c       	mov	r7, r1
   14358:	92 cd       	rjmp	.-1244   	; 0x13e7e <Read_Config+0x140>
   1435a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1435c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   1435e:	37 82       	std	Z+7, r3	; 0x07
   14360:	26 82       	std	Z+6, r2	; 0x06
   14362:	b5 82       	std	Z+5, r11	; 0x05
   14364:	a4 82       	std	Z+4, r10	; 0x04
   14366:	c7 5e       	subi	r28, 0xE7	; 231
   14368:	de 4f       	sbci	r29, 0xFE	; 254
   1436a:	28 81       	ld	r18, Y
   1436c:	39 81       	ldd	r19, Y+1	; 0x01
   1436e:	4a 81       	ldd	r20, Y+2	; 0x02
   14370:	c9 51       	subi	r28, 0x19	; 25
   14372:	d1 40       	sbci	r29, 0x01	; 1
   14374:	98 c0       	rjmp	.+304    	; 0x144a6 <Read_Config+0x768>
   14376:	00 31       	cpi	r16, 0x10	; 16
   14378:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1437a:	09 f4       	brne	.+2      	; 0x1437e <Read_Config+0x640>
   1437c:	80 cd       	rjmp	.-1280   	; 0x13e7e <Read_Config+0x140>
   1437e:	8c f4       	brge	.+34     	; 0x143a2 <Read_Config+0x664>
   14380:	01 30       	cpi	r16, 0x01	; 1
   14382:	11 05       	cpc	r17, r1
   14384:	69 f5       	brne	.+90     	; 0x143e0 <Read_Config+0x6a2>
   14386:	c8 5f       	subi	r28, 0xF8	; 248
   14388:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
   1438a:	28 81       	ld	r18, Y
   1438c:	c8 50       	subi	r28, 0x08	; 8
   1438e:	d1 40       	sbci	r29, 0x01	; 1
   14390:	3b e0       	ldi	r19, 0x0B	; 11
   14392:	23 02       	muls	r18, r19
   14394:	f0 01       	movw	r30, r0
   14396:	11 24       	eor	r1, r1
   14398:	ec 50       	subi	r30, 0x0C	; 12
   1439a:	f1 4e       	sbci	r31, 0xE1	; 225
   1439c:	61 83       	std	Z+1, r22	; 0x01
   1439e:	d2 01       	movw	r26, r4
   143a0:	14 c0       	rjmp	.+40     	; 0x143ca <Read_Config+0x68c>
                        AMIGOp->HEADER.ADDRESS = address;
   143a2:	02 31       	cpi	r16, 0x12	; 18
   143a4:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   143a6:	a9 f0       	breq	.+42     	; 0x143d2 <Read_Config+0x694>
   143a8:	0f 31       	cpi	r16, 0x1F	; 31
   143aa:	11 05       	cpc	r17, r1
   143ac:	c9 f4       	brne	.+50     	; 0x143e0 <Read_Config+0x6a2>
   143ae:	c8 5f       	subi	r28, 0xF8	; 248
   143b0:	de 4f       	sbci	r29, 0xFE	; 254
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   143b2:	b8 81       	ld	r27, Y
   143b4:	c8 50       	subi	r28, 0x08	; 8
   143b6:	d1 40       	sbci	r29, 0x01	; 1
   143b8:	2b e0       	ldi	r18, 0x0B	; 11
   143ba:	b2 02       	muls	r27, r18
   143bc:	f0 01       	movw	r30, r0
   143be:	11 24       	eor	r1, r1
   143c0:	ec 50       	subi	r30, 0x0C	; 12
   143c2:	f1 4e       	sbci	r31, 0xE1	; 225
   143c4:	62 83       	std	Z+2, r22	; 0x02
   143c6:	f2 01       	movw	r30, r4
   143c8:	02 c0       	rjmp	.+4      	; 0x143ce <Read_Config+0x690>
                        AMIGOp->HEADER.PPR = ppr;
   143ca:	6c 93       	st	X, r22
   143cc:	58 cd       	rjmp	.-1360   	; 0x13e7e <Read_Config+0x140>
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
   143ce:	61 83       	std	Z+1, r22	; 0x01
                        break;
   143d0:	56 cd       	rjmp	.-1364   	; 0x13e7e <Read_Config+0x140>
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
                        AMIGOp->HEADER.PPR = ppr;
   143d2:	c4 01       	movw	r24, r8
                        break;
   143d4:	0e 94 21 32 	call	0x6442	; 0x6442 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   143d8:	f2 01       	movw	r30, r4
   143da:	93 83       	std	Z+3, r25	; 0x03
   143dc:	82 83       	std	Z+2, r24	; 0x02
   143de:	4f cd       	rjmp	.-1378   	; 0x13e7e <Read_Config+0x140>
   143e0:	ed b7       	in	r30, 0x3d	; 61
                        break;
   143e2:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   143e4:	37 82       	std	Z+7, r3	; 0x07
   143e6:	26 82       	std	Z+6, r2	; 0x06
   143e8:	b5 82       	std	Z+5, r11	; 0x05
   143ea:	a4 82       	std	Z+4, r10	; 0x04
   143ec:	ca 5e       	subi	r28, 0xEA	; 234
   143ee:	de 4f       	sbci	r29, 0xFE	; 254
   143f0:	28 81       	ld	r18, Y
   143f2:	39 81       	ldd	r19, Y+1	; 0x01
   143f4:	4a 81       	ldd	r20, Y+2	; 0x02
   143f6:	c6 51       	subi	r28, 0x16	; 22
   143f8:	d1 40       	sbci	r29, 0x01	; 1
   143fa:	55 c0       	rjmp	.+170    	; 0x144a6 <Read_Config+0x768>
   143fc:	07 31       	cpi	r16, 0x17	; 23
   143fe:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   14400:	31 f4       	brne	.+12     	; 0x1440e <Read_Config+0x6d0>
   14402:	96 2f       	mov	r25, r22
   14404:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   14406:	f2 01       	movw	r30, r4
   14408:	96 83       	std	Z+6, r25	; 0x06
   1440a:	87 83       	std	Z+7, r24	; 0x07
   1440c:	38 cd       	rjmp	.-1424   	; 0x13e7e <Read_Config+0x140>
   1440e:	ed b7       	in	r30, 0x3d	; 61
   14410:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   14412:	37 82       	std	Z+7, r3	; 0x07
   14414:	26 82       	std	Z+6, r2	; 0x06
   14416:	b5 82       	std	Z+5, r11	; 0x05
   14418:	a4 82       	std	Z+4, r10	; 0x04
   1441a:	cd 5e       	subi	r28, 0xED	; 237
   1441c:	de 4f       	sbci	r29, 0xFE	; 254
   1441e:	28 81       	ld	r18, Y
   14420:	39 81       	ldd	r19, Y+1	; 0x01
   14422:	4a 81       	ldd	r20, Y+2	; 0x02
   14424:	c3 51       	subi	r28, 0x13	; 19
   14426:	d1 40       	sbci	r29, 0x01	; 1
   14428:	3e c0       	rjmp	.+124    	; 0x144a6 <Read_Config+0x768>
   1442a:	0d 30       	cpi	r16, 0x0D	; 13
   1442c:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   1442e:	e1 f0       	breq	.+56     	; 0x14468 <Read_Config+0x72a>
   14430:	3c f4       	brge	.+14     	; 0x14440 <Read_Config+0x702>
   14432:	08 30       	cpi	r16, 0x08	; 8
   14434:	11 05       	cpc	r17, r1
   14436:	e1 f4       	brne	.+56     	; 0x14470 <Read_Config+0x732>
   14438:	96 2f       	mov	r25, r22
   1443a:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   1443c:	f2 01       	movw	r30, r4
   1443e:	0a c0       	rjmp	.+20     	; 0x14454 <Read_Config+0x716>
   14440:	06 31       	cpi	r16, 0x16	; 22
   14442:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   14444:	69 f0       	breq	.+26     	; 0x14460 <Read_Config+0x722>
   14446:	02 32       	cpi	r16, 0x22	; 34
   14448:	11 05       	cpc	r17, r1
   1444a:	91 f4       	brne	.+36     	; 0x14470 <Read_Config+0x732>
   1444c:	96 2f       	mov	r25, r22
   1444e:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   14450:	f2 01       	movw	r30, r4
   14452:	03 c0       	rjmp	.+6      	; 0x1445a <Read_Config+0x71c>
   14454:	90 87       	std	Z+8, r25	; 0x08
   14456:	81 87       	std	Z+9, r24	; 0x09

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   14458:	12 cd       	rjmp	.-1500   	; 0x13e7e <Read_Config+0x140>
   1445a:	92 87       	std	Z+10, r25	; 0x0a
                        break;
   1445c:	83 87       	std	Z+11, r24	; 0x0b
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   1445e:	0f cd       	rjmp	.-1506   	; 0x13e7e <Read_Config+0x140>
   14460:	f2 01       	movw	r30, r4
                        break;
   14462:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   14464:	75 87       	std	Z+13, r23	; 0x0d
   14466:	0b cd       	rjmp	.-1514   	; 0x13e7e <Read_Config+0x140>
   14468:	f2 01       	movw	r30, r4
                        break;
   1446a:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   1446c:	77 87       	std	Z+15, r23	; 0x0f
   1446e:	07 cd       	rjmp	.-1522   	; 0x13e7e <Read_Config+0x140>
   14470:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14472:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   14474:	37 82       	std	Z+7, r3	; 0x07
   14476:	26 82       	std	Z+6, r2	; 0x06
   14478:	b5 82       	std	Z+5, r11	; 0x05
   1447a:	a4 82       	std	Z+4, r10	; 0x04
   1447c:	c0 5f       	subi	r28, 0xF0	; 240
   1447e:	de 4f       	sbci	r29, 0xFE	; 254
   14480:	28 81       	ld	r18, Y
   14482:	39 81       	ldd	r19, Y+1	; 0x01
   14484:	4a 81       	ldd	r20, Y+2	; 0x02
   14486:	c0 51       	subi	r28, 0x10	; 16
   14488:	d1 40       	sbci	r29, 0x01	; 1
   1448a:	0d c0       	rjmp	.+26     	; 0x144a6 <Read_Config+0x768>
   1448c:	ed b7       	in	r30, 0x3d	; 61
   1448e:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   14490:	37 82       	std	Z+7, r3	; 0x07
   14492:	26 82       	std	Z+6, r2	; 0x06
   14494:	b5 82       	std	Z+5, r11	; 0x05
   14496:	a4 82       	std	Z+4, r10	; 0x04
   14498:	c3 5f       	subi	r28, 0xF3	; 243
   1449a:	de 4f       	sbci	r29, 0xFE	; 254
   1449c:	28 81       	ld	r18, Y
   1449e:	39 81       	ldd	r19, Y+1	; 0x01
   144a0:	4a 81       	ldd	r20, Y+2	; 0x02
   144a2:	cd 50       	subi	r28, 0x0D	; 13
   144a4:	d1 40       	sbci	r29, 0x01	; 1
   144a6:	21 83       	std	Z+1, r18	; 0x01
   144a8:	32 83       	std	Z+2, r19	; 0x02
   144aa:	43 83       	std	Z+3, r20	; 0x03
   144ac:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   144b0:	ff ef       	ldi	r31, 0xFF	; 255
   144b2:	cf 1a       	sub	r12, r31
                ++errors;
   144b4:	df 0a       	sbc	r13, r31
   144b6:	e3 cc       	rjmp	.-1594   	; 0x13e7e <Read_Config+0x140>
   144b8:	61 14       	cp	r6, r1
                break;
   144ba:	71 04       	cpc	r7, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   144bc:	79 f0       	breq	.+30     	; 0x144dc <Read_Config+0x79e>
   144be:	ed b7       	in	r30, 0x3d	; 61
   144c0:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   144c2:	35 82       	std	Z+5, r3	; 0x05
   144c4:	24 82       	std	Z+4, r2	; 0x04
   144c6:	8a e5       	ldi	r24, 0x5A	; 90
   144c8:	9e e1       	ldi	r25, 0x1E	; 30
   144ca:	a0 e0       	ldi	r26, 0x00	; 0
   144cc:	81 83       	std	Z+1, r24	; 0x01
   144ce:	92 83       	std	Z+2, r25	; 0x02
   144d0:	a3 83       	std	Z+3, r26	; 0x03
   144d2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   144d6:	ff ef       	ldi	r31, 0xFF	; 255
   144d8:	cf 1a       	sub	r12, r31
        ++errors;
   144da:	df 0a       	sbc	r13, r31
   144dc:	ed b7       	in	r30, 0x3d	; 61
   144de:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   144e0:	35 82       	std	Z+5, r3	; 0x05
   144e2:	24 82       	std	Z+4, r2	; 0x04
   144e4:	8d e3       	ldi	r24, 0x3D	; 61
   144e6:	9e e1       	ldi	r25, 0x1E	; 30
   144e8:	a0 e0       	ldi	r26, 0x00	; 0
   144ea:	81 83       	std	Z+1, r24	; 0x01
   144ec:	92 83       	std	Z+2, r25	; 0x02
   144ee:	a3 83       	std	Z+3, r26	; 0x03
   144f0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   144f4:	c1 14       	cp	r12, r1
   144f6:	d1 04       	cpc	r13, r1
    if(errors)
   144f8:	61 f0       	breq	.+24     	; 0x14512 <Read_Config+0x7d4>
   144fa:	ed b7       	in	r30, 0x3d	; 61
   144fc:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   144fe:	d5 82       	std	Z+5, r13	; 0x05
   14500:	c4 82       	std	Z+4, r12	; 0x04
   14502:	86 e1       	ldi	r24, 0x16	; 22
   14504:	9e e1       	ldi	r25, 0x1E	; 30
   14506:	a0 e0       	ldi	r26, 0x00	; 0
   14508:	81 83       	std	Z+1, r24	; 0x01
   1450a:	92 83       	std	Z+2, r25	; 0x02
   1450c:	a3 83       	std	Z+3, r26	; 0x03
   1450e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   14512:	c5 5f       	subi	r28, 0xF5	; 245
   14514:	de 4f       	sbci	r29, 0xFE	; 254

    if(fclose(cfg) == EOF)
   14516:	88 81       	ld	r24, Y
   14518:	99 81       	ldd	r25, Y+1	; 0x01
   1451a:	cb 50       	subi	r28, 0x0B	; 11
   1451c:	d1 40       	sbci	r29, 0x01	; 1
   1451e:	0e 94 1e 7d 	call	0xfa3c	; 0xfa3c <fclose>
   14522:	01 96       	adiw	r24, 0x01	; 1
   14524:	39 f4       	brne	.+14     	; 0x14534 <Read_Config+0x7f6>
   14526:	86 e6       	ldi	r24, 0x66	; 102
   14528:	9e e0       	ldi	r25, 0x0E	; 14
    {
        perror("Read_Config - close error");
   1452a:	0e 94 a5 78 	call	0xf14a	; 0xf14a <perror>
   1452e:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   14530:	c2 1a       	sub	r12, r18
   14532:	d2 0a       	sbc	r13, r18
   14534:	fb db       	rcall	.-2058   	; 0x13d2c <verify_devices>
    }

// Post process and fixup any devices
    verify_devices();
   14536:	c6 01       	movw	r24, r12
   14538:	c2 5e       	subi	r28, 0xE2	; 226

    return(errors);
   1453a:	de 4f       	sbci	r29, 0xFE	; 254
}
   1453c:	e2 e1       	ldi	r30, 0x12	; 18
   1453e:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

00014542 <display_mounts>:
   14542:	cf 93       	push	r28
   14544:	00 d0       	rcall	.+0      	; 0x14546 <display_mounts+0x4>
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
	}
}

void display_mounts()
{
   14546:	1f 92       	push	r1
	int8_t i;
	printf("Mounted drives\n");
   14548:	8f e3       	ldi	r24, 0x3F	; 63
   1454a:	98 e1       	ldi	r25, 0x18	; 24
   1454c:	a0 e0       	ldi	r26, 0x00	; 0
   1454e:	ed b7       	in	r30, 0x3d	; 61
   14550:	fe b7       	in	r31, 0x3e	; 62
   14552:	81 83       	std	Z+1, r24	; 0x01
   14554:	92 83       	std	Z+2, r25	; 0x02
   14556:	a3 83       	std	Z+3, r26	; 0x03
   14558:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	for(i=0;i<MAX_DEVICES;++i)
   1455c:	c0 e0       	ldi	r28, 0x00	; 0
		display_mount(i);
   1455e:	8c 2f       	mov	r24, r28
   14560:	a0 da       	rcall	.-2752   	; 0x13aa2 <display_mount>
   14562:	cf 5f       	subi	r28, 0xFF	; 255

void display_mounts()
{
	int8_t i;
	printf("Mounted drives\n");
	for(i=0;i<MAX_DEVICES;++i)
   14564:	cc 30       	cpi	r28, 0x0C	; 12
   14566:	d9 f7       	brne	.-10     	; 0x1455e <display_mounts+0x1c>
		display_mount(i);
    printf("\n");
   14568:	8d e3       	ldi	r24, 0x3D	; 61
   1456a:	98 e1       	ldi	r25, 0x18	; 24
   1456c:	a0 e0       	ldi	r26, 0x00	; 0
   1456e:	ed b7       	in	r30, 0x3d	; 61
   14570:	fe b7       	in	r31, 0x3e	; 62
   14572:	81 83       	std	Z+1, r24	; 0x01
   14574:	92 83       	std	Z+2, r25	; 0x02
   14576:	a3 83       	std	Z+3, r26	; 0x03
   14578:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
}
   1457c:	0f 90       	pop	r0
   1457e:	0f 90       	pop	r0
   14580:	0f 90       	pop	r0
   14582:	cf 91       	pop	r28
   14584:	08 95       	ret

00014586 <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t mount(int argc, char *argv[])
{
   14586:	a5 e0       	ldi	r26, 0x05	; 5
   14588:	b0 e0       	ldi	r27, 0x00	; 0
   1458a:	e9 ec       	ldi	r30, 0xC9	; 201
   1458c:	f2 ea       	ldi	r31, 0xA2	; 162
   1458e:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
   14592:	eb 01       	movw	r28, r22
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
#endif
	if(argc == 1)
   14594:	81 30       	cpi	r24, 0x01	; 1
   14596:	91 05       	cpc	r25, r1
   14598:	11 f4       	brne	.+4      	; 0x1459e <mount+0x18>
	{
		display_mounts();
   1459a:	d3 df       	rcall	.-90     	; 0x14542 <display_mounts>
   1459c:	c2 c0       	rjmp	.+388    	; 0x14722 <mount+0x19c>
		return(1);
	}
	else if(argc == 3)
   1459e:	83 30       	cpi	r24, 0x03	; 3
   145a0:	91 05       	cpc	r25, r1
   145a2:	61 f5       	brne	.+88     	; 0x145fc <mount+0x76>
	{
			if(MATCHI(argv[1], "PRINTER"))
   145a4:	60 e8       	ldi	r22, 0x80	; 128
   145a6:	7e e0       	ldi	r23, 0x0E	; 14
   145a8:	8a 81       	ldd	r24, Y+2	; 0x02
   145aa:	9b 81       	ldd	r25, Y+3	; 0x03
   145ac:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   145b0:	89 2b       	or	r24, r25
   145b2:	09 f4       	brne	.+2      	; 0x145b6 <mount+0x30>
   145b4:	b6 c0       	rjmp	.+364    	; 0x14722 <mount+0x19c>
			{
				// FIXME - do we want to have separtate address and ppr ?
				int8_t address = atoi(argv[2]) & 0xff;
   145b6:	8c 81       	ldd	r24, Y+4	; 0x04
   145b8:	9d 81       	ldd	r25, Y+5	; 0x05
   145ba:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <atoi>
   145be:	c8 2f       	mov	r28, r24
				index = alloc_device(PRINTER_TYPE);
   145c0:	84 e0       	ldi	r24, 0x04	; 4
   145c2:	90 e0       	ldi	r25, 0x00	; 0
   145c4:	0e 94 64 99 	call	0x132c8	; 0x132c8 <alloc_device>
				if(index < 0)
   145c8:	87 ff       	sbrs	r24, 7
   145ca:	0b c0       	rjmp	.+22     	; 0x145e2 <mount+0x5c>
				{
					printf("Could not allocate PRINTER structure\n");
   145cc:	81 e3       	ldi	r24, 0x31	; 49
   145ce:	99 e1       	ldi	r25, 0x19	; 25
   145d0:	a0 e0       	ldi	r26, 0x00	; 0
   145d2:	ed b7       	in	r30, 0x3d	; 61
   145d4:	fe b7       	in	r31, 0x3e	; 62
   145d6:	81 83       	std	Z+1, r24	; 0x01
   145d8:	92 83       	std	Z+2, r25	; 0x02
   145da:	a3 83       	std	Z+3, r26	; 0x03
   145dc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   145e0:	9e c0       	rjmp	.+316    	; 0x1471e <mount+0x198>
					return(0);
				}
				PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   145e2:	9b e0       	ldi	r25, 0x0B	; 11
   145e4:	89 02       	muls	r24, r25
   145e6:	f0 01       	movw	r30, r0
   145e8:	11 24       	eor	r1, r1
   145ea:	ec 50       	subi	r30, 0x0C	; 12
   145ec:	f1 4e       	sbci	r31, 0xE1	; 225
				PRINTERp->HEADER.ADDRESS  = address;
   145ee:	a7 81       	ldd	r26, Z+7	; 0x07
   145f0:	b0 85       	ldd	r27, Z+8	; 0x08
   145f2:	cc 93       	st	X, r28
				Devices[index].ADDRESS = address;
   145f4:	c1 83       	std	Z+1, r28	; 0x01
				Devices[index].PPR = 0xff;
   145f6:	9f ef       	ldi	r25, 0xFF	; 255
   145f8:	92 83       	std	Z+2, r25	; 0x02
   145fa:	80 c0       	rjmp	.+256    	; 0x146fc <mount+0x176>
				return( verify_device(index) );
			}
	}
	else if(argc == 4)
   145fc:	04 97       	sbiw	r24, 0x04	; 4
   145fe:	09 f0       	breq	.+2      	; 0x14602 <mount+0x7c>
   14600:	8d c0       	rjmp	.+282    	; 0x1471c <mount+0x196>
		/*
		argv[1] = 9121
		argv[2] = 2
		argv[3] = amigo2.lif
		*/
		if(!hpdir_find_drive(argv[1],0,0) )
   14602:	40 e0       	ldi	r20, 0x00	; 0
   14604:	50 e0       	ldi	r21, 0x00	; 0
   14606:	60 e0       	ldi	r22, 0x00	; 0
   14608:	70 e0       	ldi	r23, 0x00	; 0
   1460a:	8a 81       	ldd	r24, Y+2	; 0x02
   1460c:	9b 81       	ldd	r25, Y+3	; 0x03
   1460e:	2b d1       	rcall	.+598    	; 0x14866 <hpdir_find_drive>
   14610:	89 2b       	or	r24, r25
   14612:	59 f4       	brne	.+22     	; 0x1462a <mount+0xa4>
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
   14614:	89 e0       	ldi	r24, 0x09	; 9
   14616:	99 e1       	ldi	r25, 0x19	; 25
   14618:	a0 e0       	ldi	r26, 0x00	; 0
   1461a:	ed b7       	in	r30, 0x3d	; 61
   1461c:	fe b7       	in	r31, 0x3e	; 62
   1461e:	81 83       	std	Z+1, r24	; 0x01
   14620:	92 83       	std	Z+2, r25	; 0x02
   14622:	a3 83       	std	Z+3, r26	; 0x03
   14624:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   14628:	37 c0       	rjmp	.+110    	; 0x14698 <mount+0x112>
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   1462a:	68 e8       	ldi	r22, 0x88	; 136
   1462c:	7e e0       	ldi	r23, 0x0E	; 14
   1462e:	88 ed       	ldi	r24, 0xD8	; 216
   14630:	9f e1       	ldi	r25, 0x1F	; 31
   14632:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   14636:	89 2b       	or	r24, r25
   14638:	a9 f0       	breq	.+42     	; 0x14664 <mount+0xde>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   1463a:	8c 81       	ldd	r24, Y+4	; 0x04
   1463c:	9d 81       	ldd	r25, Y+5	; 0x05
   1463e:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <atoi>
   14642:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(SS80_TYPE);
   14644:	83 e0       	ldi	r24, 0x03	; 3
   14646:	90 e0       	ldi	r25, 0x00	; 0
   14648:	0e 94 64 99 	call	0x132c8	; 0x132c8 <alloc_device>
   1464c:	f8 2e       	mov	r15, r24
			if(index < 0)
   1464e:	87 ff       	sbrs	r24, 7
   14650:	12 c0       	rjmp	.+36     	; 0x14676 <mount+0xf0>
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
   14652:	8c 81       	ldd	r24, Y+4	; 0x04
   14654:	9d 81       	ldd	r25, Y+5	; 0x05
   14656:	ed b7       	in	r30, 0x3d	; 61
   14658:	fe b7       	in	r31, 0x3e	; 62
   1465a:	95 83       	std	Z+5, r25	; 0x05
   1465c:	84 83       	std	Z+4, r24	; 0x04
   1465e:	8f ed       	ldi	r24, 0xDF	; 223
   14660:	98 e1       	ldi	r25, 0x18	; 24
   14662:	38 c0       	rjmp	.+112    	; 0x146d4 <mount+0x14e>
		if(!hpdir_find_drive(argv[1],0,0) )
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   14664:	6d e8       	ldi	r22, 0x8D	; 141
   14666:	7e e0       	ldi	r23, 0x0E	; 14
   14668:	88 ed       	ldi	r24, 0xD8	; 216
   1466a:	9f e1       	ldi	r25, 0x1F	; 31
   1466c:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   14670:	89 2b       	or	r24, r25
   14672:	19 f7       	brne	.-58     	; 0x1463a <mount+0xb4>
   14674:	13 c0       	rjmp	.+38     	; 0x1469c <mount+0x116>
			if(index < 0)
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
				return(0);
			}
			SS80p = (SS80DiskType *) Devices[index].dev;
   14676:	ff 2d       	mov	r31, r15
   14678:	8b e0       	ldi	r24, 0x0B	; 11
   1467a:	f8 02       	muls	r31, r24
   1467c:	80 01       	movw	r16, r0
   1467e:	11 24       	eor	r1, r1
   14680:	0c 50       	subi	r16, 0x0C	; 12
   14682:	11 4e       	sbci	r17, 0xE1	; 225
   14684:	f8 01       	movw	r30, r16
   14686:	c7 80       	ldd	r12, Z+7	; 0x07
   14688:	d0 84       	ldd	r13, Z+8	; 0x08
			if( !hpdir_set_parameters(index, argv[1] ) )
   1468a:	6a 81       	ldd	r22, Y+2	; 0x02
   1468c:	7b 81       	ldd	r23, Y+3	; 0x03
   1468e:	8f 2d       	mov	r24, r15
   14690:	0e 94 ef 9a 	call	0x135de	; 0x135de <hpdir_set_parameters>
   14694:	81 11       	cpse	r24, r1
   14696:	25 c0       	rjmp	.+74     	; 0x146e2 <mount+0x15c>
				return(-1);
   14698:	8f ef       	ldi	r24, 0xFF	; 255
   1469a:	44 c0       	rjmp	.+136    	; 0x14724 <mount+0x19e>
			Devices[index].ADDRESS = address;
			Devices[index].PPR = ppr;
			return( verify_device(index) );
		}
#ifdef AMIGO
		else if(MATCH(hpdir.TYPE, "AMIGO"))
   1469c:	62 e9       	ldi	r22, 0x92	; 146
   1469e:	7e e0       	ldi	r23, 0x0E	; 14
   146a0:	88 ed       	ldi	r24, 0xD8	; 216
   146a2:	9f e1       	ldi	r25, 0x1F	; 31
   146a4:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   146a8:	89 2b       	or	r24, r25
   146aa:	51 f1       	breq	.+84     	; 0x14700 <mount+0x17a>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   146ac:	8c 81       	ldd	r24, Y+4	; 0x04
   146ae:	9d 81       	ldd	r25, Y+5	; 0x05
   146b0:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <atoi>
   146b4:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(AMIGO_TYPE);
   146b6:	81 e0       	ldi	r24, 0x01	; 1
   146b8:	90 e0       	ldi	r25, 0x00	; 0
   146ba:	0e 94 64 99 	call	0x132c8	; 0x132c8 <alloc_device>
   146be:	f8 2e       	mov	r15, r24
			if(index < 0)
   146c0:	87 ff       	sbrs	r24, 7
   146c2:	d9 cf       	rjmp	.-78     	; 0x14676 <mount+0xf0>
			{
				printf("Could not allocate AMIGO structure for %s\n",argv[2]);
   146c4:	8c 81       	ldd	r24, Y+4	; 0x04
   146c6:	9d 81       	ldd	r25, Y+5	; 0x05
   146c8:	ed b7       	in	r30, 0x3d	; 61
   146ca:	fe b7       	in	r31, 0x3e	; 62
   146cc:	95 83       	std	Z+5, r25	; 0x05
   146ce:	84 83       	std	Z+4, r24	; 0x04
   146d0:	84 eb       	ldi	r24, 0xB4	; 180
   146d2:	98 e1       	ldi	r25, 0x18	; 24
   146d4:	a0 e0       	ldi	r26, 0x00	; 0
   146d6:	81 83       	std	Z+1, r24	; 0x01
   146d8:	92 83       	std	Z+2, r25	; 0x02
   146da:	a3 83       	std	Z+3, r26	; 0x03
   146dc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   146e0:	1e c0       	rjmp	.+60     	; 0x1471e <mount+0x198>
				return(0);
			}
			AMIGOp = (AMIGODiskType *) Devices[index].dev;
			if( !hpdir_set_parameters(index, argv[1] ) )
				return(-1);
			AMIGOp->HEADER.NAME = stralloc(argv[3]);
   146e2:	8e 81       	ldd	r24, Y+6	; 0x06
   146e4:	9f 81       	ldd	r25, Y+7	; 0x07
   146e6:	0e 94 21 32 	call	0x6442	; 0x6442 <stralloc>
   146ea:	f6 01       	movw	r30, r12
   146ec:	93 83       	std	Z+3, r25	; 0x03
   146ee:	82 83       	std	Z+2, r24	; 0x02
			AMIGOp->HEADER.ADDRESS  = address;
   146f0:	e0 82       	st	Z, r14
			AMIGOp->HEADER.PPR = ppr;
   146f2:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].ADDRESS = address;
   146f4:	f8 01       	movw	r30, r16
   146f6:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].PPR = ppr;
			return( verify_device(index) );
   146f8:	e2 82       	std	Z+2, r14	; 0x02
   146fa:	8f 2d       	mov	r24, r15
   146fc:	4b da       	rcall	.-2922   	; 0x13b94 <verify_device>
   146fe:	12 c0       	rjmp	.+36     	; 0x14724 <mount+0x19e>
		}
#endif
		else
		{
			printf("Expected AMIGO or SS80 or CS80 for [%s]\n",argv[1]);
   14700:	8a 81       	ldd	r24, Y+2	; 0x02
   14702:	9b 81       	ldd	r25, Y+3	; 0x03
   14704:	ed b7       	in	r30, 0x3d	; 61
   14706:	fe b7       	in	r31, 0x3e	; 62
   14708:	95 83       	std	Z+5, r25	; 0x05
   1470a:	84 83       	std	Z+4, r24	; 0x04
   1470c:	8b e8       	ldi	r24, 0x8B	; 139
   1470e:	98 e1       	ldi	r25, 0x18	; 24
   14710:	a0 e0       	ldi	r26, 0x00	; 0
   14712:	81 83       	std	Z+1, r24	; 0x01
   14714:	92 83       	std	Z+2, r25	; 0x02
   14716:	a3 83       	std	Z+3, r26	; 0x03
   14718:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
			return(0);
		}
	}
	else 
	{
		mount_usage();
   1471c:	fa d8       	rcall	.-3596   	; 0x13912 <mount_usage>
		return(0);
   1471e:	80 e0       	ldi	r24, 0x00	; 0
   14720:	01 c0       	rjmp	.+2      	; 0x14724 <mount+0x19e>
	}
	return(1);
   14722:	81 e0       	ldi	r24, 0x01	; 1
}
   14724:	cd b7       	in	r28, 0x3d	; 61
   14726:	de b7       	in	r29, 0x3e	; 62
   14728:	25 96       	adiw	r28, 0x05	; 5
   1472a:	e8 e0       	ldi	r30, 0x08	; 8
   1472c:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

00014730 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   14730:	8f e1       	ldi	r24, 0x1F	; 31
   14732:	e8 e7       	ldi	r30, 0x78	; 120
   14734:	ff e1       	ldi	r31, 0x1F	; 31
   14736:	df 01       	movw	r26, r30
   14738:	98 2f       	mov	r25, r24
   1473a:	1d 92       	st	X+, r1
   1473c:	9a 95       	dec	r25
   1473e:	e9 f7       	brne	.-6      	; 0x1473a <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   14740:	9f e3       	ldi	r25, 0x3F	; 63
   14742:	e8 e9       	ldi	r30, 0x98	; 152
   14744:	ff e1       	ldi	r31, 0x1F	; 31
   14746:	df 01       	movw	r26, r30
   14748:	1d 92       	st	X+, r1
   1474a:	9a 95       	dec	r25
   1474c:	e9 f7       	brne	.-6      	; 0x14748 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   1474e:	e8 ed       	ldi	r30, 0xD8	; 216
   14750:	ff e1       	ldi	r31, 0x1F	; 31
   14752:	df 01       	movw	r26, r30
   14754:	1d 92       	st	X+, r1
   14756:	8a 95       	dec	r24
   14758:	e9 f7       	brne	.-6      	; 0x14754 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   1475a:	10 92 f8 1f 	sts	0x1FF8, r1	; 0x801ff8 <hpdir+0x80>
   1475e:	10 92 f9 1f 	sts	0x1FF9, r1	; 0x801ff9 <hpdir+0x81>
   14762:	10 92 fa 1f 	sts	0x1FFA, r1	; 0x801ffa <hpdir+0x82>
   14766:	10 92 fb 1f 	sts	0x1FFB, r1	; 0x801ffb <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   1476a:	10 92 fc 1f 	sts	0x1FFC, r1	; 0x801ffc <hpdir+0x84>
   1476e:	10 92 fd 1f 	sts	0x1FFD, r1	; 0x801ffd <hpdir+0x85>
   14772:	10 92 fe 1f 	sts	0x1FFE, r1	; 0x801ffe <hpdir+0x86>
   14776:	10 92 ff 1f 	sts	0x1FFF, r1	; 0x801fff <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   1477a:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <hpdir+0x88>
   1477e:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <hpdir+0x89>
   14782:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <hpdir+0x8a>
   14786:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   1478a:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <hpdir+0x8c>
   1478e:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <hpdir+0x8d>
   14792:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <hpdir+0x8e>
   14796:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   1479a:	81 e0       	ldi	r24, 0x01	; 1
   1479c:	90 e8       	ldi	r25, 0x80	; 128
   1479e:	a0 e0       	ldi	r26, 0x00	; 0
   147a0:	b0 e0       	ldi	r27, 0x00	; 0
   147a2:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <hpdir+0x90>
   147a6:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <hpdir+0x91>
   147aa:	a0 93 0a 20 	sts	0x200A, r26	; 0x80200a <hpdir+0x92>
   147ae:	b0 93 0b 20 	sts	0x200B, r27	; 0x80200b <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   147b2:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <hpdir+0x94>
   147b6:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <hpdir+0x95>
   147ba:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <hpdir+0x96>
   147be:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   147c2:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <hpdir+0x98>
   147c6:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <hpdir+0x99>
   147ca:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <hpdir+0x9a>
   147ce:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   147d2:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <hpdir+0x9c>
   147d6:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <hpdir+0x9d>
   147da:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <hpdir+0x9e>
   147de:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   147e2:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <hpdir+0xa0>
   147e6:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <hpdir+0xa1>
   147ea:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <hpdir+0xa2>
   147ee:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   147f2:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <hpdir+0xa4>
   147f6:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <hpdir+0xa5>
   147fa:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <hpdir+0xa6>
   147fe:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   14802:	81 e0       	ldi	r24, 0x01	; 1
   14804:	90 e0       	ldi	r25, 0x00	; 0
   14806:	a0 e0       	ldi	r26, 0x00	; 0
   14808:	b0 e0       	ldi	r27, 0x00	; 0
   1480a:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <hpdir+0xa8>
   1480e:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <hpdir+0xa9>
   14812:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <hpdir+0xaa>
   14816:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   1481a:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <hpdir+0xac>
   1481e:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <hpdir+0xad>
   14822:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <hpdir+0xae>
   14826:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <hpdir+0xaf>
   1482a:	08 95       	ret

0001482c <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   1482c:	20 e0       	ldi	r18, 0x00	; 0
   1482e:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   14830:	61 15       	cp	r22, r1
   14832:	71 05       	cpc	r23, r1
   14834:	81 05       	cpc	r24, r1
   14836:	91 05       	cpc	r25, r1
   14838:	39 f0       	breq	.+14     	; 0x14848 <lif_dir_count+0x1c>
    {
        scale++;
   1483a:	2f 5f       	subi	r18, 0xFF	; 255
   1483c:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   1483e:	95 95       	asr	r25
   14840:	87 95       	ror	r24
   14842:	77 95       	ror	r23
   14844:	67 95       	ror	r22
   14846:	f4 cf       	rjmp	.-24     	; 0x14830 <lif_dir_count+0x4>
    }
    scale>>=1;
   14848:	35 95       	asr	r19
   1484a:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   1484c:	61 e0       	ldi	r22, 0x01	; 1
   1484e:	70 e0       	ldi	r23, 0x00	; 0
   14850:	80 e0       	ldi	r24, 0x00	; 0
   14852:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   14854:	21 50       	subi	r18, 0x01	; 1
   14856:	31 09       	sbc	r19, r1
   14858:	28 f0       	brcs	.+10     	; 0x14864 <lif_dir_count+0x38>
        num <<=1;
   1485a:	66 0f       	add	r22, r22
   1485c:	77 1f       	adc	r23, r23
   1485e:	88 1f       	adc	r24, r24
   14860:	99 1f       	adc	r25, r25
   14862:	f8 cf       	rjmp	.-16     	; 0x14854 <lif_dir_count+0x28>
    return(num);
}
   14864:	08 95       	ret

00014866 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14866:	2f 92       	push	r2
   14868:	3f 92       	push	r3
   1486a:	4f 92       	push	r4
   1486c:	5f 92       	push	r5
   1486e:	6f 92       	push	r6
   14870:	8f 92       	push	r8
   14872:	9f 92       	push	r9
   14874:	af 92       	push	r10
   14876:	bf 92       	push	r11
   14878:	cf 92       	push	r12
   1487a:	df 92       	push	r13
   1487c:	ef 92       	push	r14
   1487e:	ff 92       	push	r15
   14880:	0f 93       	push	r16
   14882:	1f 93       	push	r17
   14884:	cf 93       	push	r28
   14886:	df 93       	push	r29
   14888:	cd b7       	in	r28, 0x3d	; 61
   1488a:	de b7       	in	r29, 0x3e	; 62
   1488c:	c9 58       	subi	r28, 0x89	; 137
   1488e:	d1 40       	sbci	r29, 0x01	; 1
   14890:	0f b6       	in	r0, 0x3f	; 63
   14892:	f8 94       	cli
   14894:	de bf       	out	0x3e, r29	; 62
   14896:	0f be       	out	0x3f, r0	; 63
   14898:	cd bf       	out	0x3d, r28	; 61
   1489a:	6c 01       	movw	r12, r24
   1489c:	c8 57       	subi	r28, 0x78	; 120
   1489e:	de 4f       	sbci	r29, 0xFE	; 254
   148a0:	79 83       	std	Y+1, r23	; 0x01
   148a2:	68 83       	st	Y, r22
   148a4:	c8 58       	subi	r28, 0x88	; 136
   148a6:	d1 40       	sbci	r29, 0x01	; 1
   148a8:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   148aa:	42 df       	rcall	.-380    	; 0x14730 <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   148ac:	6e ef       	ldi	r22, 0xFE	; 254
   148ae:	78 e0       	ldi	r23, 0x08	; 8
   148b0:	87 e5       	ldi	r24, 0x57	; 87
   148b2:	90 e1       	ldi	r25, 0x10	; 16
   148b4:	0e 94 74 7e 	call	0xfce8	; 0xfce8 <fopen>
   148b8:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   148ba:	89 2b       	or	r24, r25
   148bc:	49 f4       	brne	.+18     	; 0x148d0 <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   148be:	6e ef       	ldi	r22, 0xFE	; 254
   148c0:	78 e0       	ldi	r23, 0x08	; 8
   148c2:	86 e5       	ldi	r24, 0x56	; 86
   148c4:	90 e1       	ldi	r25, 0x10	; 16
   148c6:	0e 94 74 7e 	call	0xfce8	; 0xfce8 <fopen>
   148ca:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   148cc:	89 2b       	or	r24, r25
   148ce:	51 f0       	breq	.+20     	; 0x148e4 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   148d0:	21 2c       	mov	r2, r1
   148d2:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   148d4:	8e 01       	movw	r16, r28
   148d6:	08 5f       	subi	r16, 0xF8	; 248
   148d8:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   148da:	8f e9       	ldi	r24, 0x9F	; 159
   148dc:	91 e2       	ldi	r25, 0x21	; 33
   148de:	2c 01       	movw	r4, r24
   148e0:	61 2c       	mov	r6, r1
   148e2:	1e c0       	rjmp	.+60     	; 0x14920 <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   148e4:	ab 28       	or	r10, r11
   148e6:	09 f4       	brne	.+2      	; 0x148ea <hpdir_find_drive+0x84>
   148e8:	79 c1       	rjmp	.+754    	; 0x14bdc <hpdir_find_drive+0x376>
            printf("Error: hpdir.ini not found!\n");
   148ea:	86 ea       	ldi	r24, 0xA6	; 166
   148ec:	91 e2       	ldi	r25, 0x21	; 33
   148ee:	a0 e0       	ldi	r26, 0x00	; 0
   148f0:	ed b7       	in	r30, 0x3d	; 61
   148f2:	fe b7       	in	r31, 0x3e	; 62
   148f4:	81 83       	std	Z+1, r24	; 0x01
   148f6:	92 83       	std	Z+2, r25	; 0x02
   148f8:	a3 83       	std	Z+3, r26	; 0x03
   148fa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   148fe:	6e c1       	rjmp	.+732    	; 0x14bdc <hpdir_find_drive+0x376>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14900:	ce 01       	movw	r24, r28
   14902:	08 96       	adiw	r24, 0x08	; 8
   14904:	0e 94 51 32 	call	0x64a2	; 0x64a2 <trim_tail>
        ptr = skipspaces(ptr);
   14908:	ce 01       	movw	r24, r28
   1490a:	08 96       	adiw	r24, 0x08	; 8
   1490c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <skipspaces>

        len = strlen(ptr);
   14910:	fc 01       	movw	r30, r24
   14912:	01 90       	ld	r0, Z+
   14914:	00 20       	and	r0, r0
   14916:	e9 f7       	brne	.-6      	; 0x14912 <hpdir_find_drive+0xac>
   14918:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   1491a:	8e 17       	cp	r24, r30
   1491c:	9f 07       	cpc	r25, r31
   1491e:	51 f4       	brne	.+20     	; 0x14934 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14920:	a7 01       	movw	r20, r14
   14922:	6e ef       	ldi	r22, 0xFE	; 254
   14924:	70 e0       	ldi	r23, 0x00	; 0
   14926:	ce 01       	movw	r24, r28
   14928:	08 96       	adiw	r24, 0x08	; 8
   1492a:	0e 94 8c 76 	call	0xed18	; 0xed18 <fgets>
   1492e:	89 2b       	or	r24, r25
   14930:	39 f7       	brne	.-50     	; 0x14900 <hpdir_find_drive+0x9a>
   14932:	0c c0       	rjmp	.+24     	; 0x1494c <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14934:	fc 01       	movw	r30, r24
   14936:	20 81       	ld	r18, Z
   14938:	2b 33       	cpi	r18, 0x3B	; 59
   1493a:	91 f3       	breq	.-28     	; 0x14920 <hpdir_find_drive+0xba>
   1493c:	23 32       	cpi	r18, 0x23	; 35
   1493e:	81 f3       	breq	.-32     	; 0x14920 <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   14940:	2b 35       	cpi	r18, 0x5B	; 91
   14942:	39 f4       	brne	.+14     	; 0x14952 <hpdir_find_drive+0xec>
   14944:	f1 e0       	ldi	r31, 0x01	; 1
   14946:	2f 16       	cp	r2, r31
   14948:	31 04       	cpc	r3, r1
   1494a:	19 f4       	brne	.+6      	; 0x14952 <hpdir_find_drive+0xec>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   1494c:	00 e0       	ldi	r16, 0x00	; 0
   1494e:	10 e0       	ldi	r17, 0x00	; 0
   14950:	32 c1       	rjmp	.+612    	; 0x14bb6 <hpdir_find_drive+0x350>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14952:	4e e7       	ldi	r20, 0x7E	; 126
   14954:	50 e0       	ldi	r21, 0x00	; 0
   14956:	b8 01       	movw	r22, r16
   14958:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   1495c:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   1495e:	61 e6       	ldi	r22, 0x61	; 97
   14960:	70 e1       	ldi	r23, 0x10	; 16
   14962:	c8 01       	movw	r24, r16
   14964:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   14968:	89 2b       	or	r24, r25
   1496a:	21 f0       	breq	.+8      	; 0x14974 <hpdir_find_drive+0x10e>
        {
            driveinfo = 1;
   1496c:	22 24       	eor	r2, r2
   1496e:	23 94       	inc	r2
   14970:	31 2c       	mov	r3, r1
   14972:	d6 cf       	rjmp	.-84     	; 0x14920 <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   14974:	21 e0       	ldi	r18, 0x01	; 1
   14976:	22 16       	cp	r2, r18
   14978:	31 04       	cpc	r3, r1
   1497a:	91 f6       	brne	.-92     	; 0x14920 <hpdir_find_drive+0xba>
            continue;

        if(list)
   1497c:	c8 57       	subi	r28, 0x78	; 120
   1497e:	de 4f       	sbci	r29, 0xFE	; 254
   14980:	88 81       	ld	r24, Y
   14982:	99 81       	ldd	r25, Y+1	; 0x01
   14984:	c8 58       	subi	r28, 0x88	; 136
   14986:	d1 40       	sbci	r29, 0x01	; 1
   14988:	89 2b       	or	r24, r25
   1498a:	61 f0       	breq	.+24     	; 0x149a4 <hpdir_find_drive+0x13e>
        {
            printf("%s %s\n", token, ptr);
   1498c:	ed b7       	in	r30, 0x3d	; 61
   1498e:	fe b7       	in	r31, 0x3e	; 62
   14990:	97 82       	std	Z+7, r9	; 0x07
   14992:	86 82       	std	Z+6, r8	; 0x06
   14994:	15 83       	std	Z+5, r17	; 0x05
   14996:	04 83       	std	Z+4, r16	; 0x04
   14998:	41 82       	std	Z+1, r4	; 0x01
   1499a:	52 82       	std	Z+2, r5	; 0x02
   1499c:	63 82       	std	Z+3, r6	; 0x03
   1499e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            continue;
   149a2:	be cf       	rjmp	.-132    	; 0x14920 <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   149a4:	b8 01       	movw	r22, r16
   149a6:	c6 01       	movw	r24, r12
   149a8:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   149ac:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   149ae:	f1 f2       	breq	.-68     	; 0x1496c <hpdir_find_drive+0x106>
   149b0:	bf de       	rcall	.-642    	; 0x14730 <hpdir_init>

        if(verbose)
   149b2:	a1 14       	cp	r10, r1
   149b4:	b1 04       	cpc	r11, r1
   149b6:	61 f0       	breq	.+24     	; 0x149d0 <hpdir_find_drive+0x16a>
            printf("Model: %s found in hpdir.ini\n", model);
   149b8:	ed b7       	in	r30, 0x3d	; 61
   149ba:	fe b7       	in	r31, 0x3e	; 62
   149bc:	d5 82       	std	Z+5, r13	; 0x05
   149be:	c4 82       	std	Z+4, r12	; 0x04
   149c0:	81 e8       	ldi	r24, 0x81	; 129
   149c2:	91 e2       	ldi	r25, 0x21	; 33
   149c4:	a0 e0       	ldi	r26, 0x00	; 0
   149c6:	81 83       	std	Z+1, r24	; 0x01
   149c8:	92 83       	std	Z+2, r25	; 0x02
   149ca:	a3 83       	std	Z+3, r26	; 0x03
   149cc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   149d0:	4e e1       	ldi	r20, 0x1E	; 30
   149d2:	50 e0       	ldi	r21, 0x00	; 0
   149d4:	b8 01       	movw	r22, r16
   149d6:	88 e7       	ldi	r24, 0x78	; 120
   149d8:	9f e1       	ldi	r25, 0x1F	; 31
   149da:	0e 94 7e 31 	call	0x62fc	; 0x62fc <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   149de:	4e e7       	ldi	r20, 0x7E	; 126
   149e0:	50 e0       	ldi	r21, 0x00	; 0
   149e2:	b8 01       	movw	r22, r16
   149e4:	c4 01       	movw	r24, r8
   149e6:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   149ea:	4e e3       	ldi	r20, 0x3E	; 62
   149ec:	50 e0       	ldi	r21, 0x00	; 0
   149ee:	68 e9       	ldi	r22, 0x98	; 152
   149f0:	7f e1       	ldi	r23, 0x1F	; 31
   149f2:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   149f6:	4e e1       	ldi	r20, 0x1E	; 30
   149f8:	50 e0       	ldi	r21, 0x00	; 0
   149fa:	68 ed       	ldi	r22, 0xD8	; 216
   149fc:	7f e1       	ldi	r23, 0x1F	; 31
   149fe:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a02:	4e e7       	ldi	r20, 0x7E	; 126
   14a04:	50 e0       	ldi	r21, 0x00	; 0
   14a06:	b8 01       	movw	r22, r16
   14a08:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   14a0c:	4c 01       	movw	r8, r24
        hpdir.ID = get_value(token);
   14a0e:	c8 01       	movw	r24, r16
   14a10:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14a14:	60 93 f8 1f 	sts	0x1FF8, r22	; 0x801ff8 <hpdir+0x80>
   14a18:	70 93 f9 1f 	sts	0x1FF9, r23	; 0x801ff9 <hpdir+0x81>
   14a1c:	80 93 fa 1f 	sts	0x1FFA, r24	; 0x801ffa <hpdir+0x82>
   14a20:	90 93 fb 1f 	sts	0x1FFB, r25	; 0x801ffb <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a24:	4e e7       	ldi	r20, 0x7E	; 126
   14a26:	50 e0       	ldi	r21, 0x00	; 0
   14a28:	b8 01       	movw	r22, r16
   14a2a:	c4 01       	movw	r24, r8
   14a2c:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   14a30:	4c 01       	movw	r8, r24
        hpdir.mask_stat2 = get_value(token);
   14a32:	c8 01       	movw	r24, r16
   14a34:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14a38:	60 93 fc 1f 	sts	0x1FFC, r22	; 0x801ffc <hpdir+0x84>
   14a3c:	70 93 fd 1f 	sts	0x1FFD, r23	; 0x801ffd <hpdir+0x85>
   14a40:	80 93 fe 1f 	sts	0x1FFE, r24	; 0x801ffe <hpdir+0x86>
   14a44:	90 93 ff 1f 	sts	0x1FFF, r25	; 0x801fff <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a48:	4e e7       	ldi	r20, 0x7E	; 126
   14a4a:	50 e0       	ldi	r21, 0x00	; 0
   14a4c:	b8 01       	movw	r22, r16
   14a4e:	c4 01       	movw	r24, r8
   14a50:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   14a54:	4c 01       	movw	r8, r24
        hpdir.id_stat2 = get_value(token);
   14a56:	c8 01       	movw	r24, r16
   14a58:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14a5c:	60 93 00 20 	sts	0x2000, r22	; 0x802000 <hpdir+0x88>
   14a60:	70 93 01 20 	sts	0x2001, r23	; 0x802001 <hpdir+0x89>
   14a64:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <hpdir+0x8a>
   14a68:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a6c:	4e e7       	ldi	r20, 0x7E	; 126
   14a6e:	50 e0       	ldi	r21, 0x00	; 0
   14a70:	b8 01       	movw	r22, r16
   14a72:	c4 01       	movw	r24, r8
   14a74:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   14a78:	4c 01       	movw	r8, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14a7a:	c8 01       	movw	r24, r16
   14a7c:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14a80:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <hpdir+0x8c>
   14a84:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <hpdir+0x8d>
   14a88:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <hpdir+0x8e>
   14a8c:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a90:	4e e7       	ldi	r20, 0x7E	; 126
   14a92:	50 e0       	ldi	r21, 0x00	; 0
   14a94:	b8 01       	movw	r22, r16
   14a96:	c4 01       	movw	r24, r8
   14a98:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   14a9c:	4c 01       	movw	r8, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14a9e:	c8 01       	movw	r24, r16
   14aa0:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14aa4:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <hpdir+0x90>
   14aa8:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <hpdir+0x91>
   14aac:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <hpdir+0x92>
   14ab0:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14ab4:	4e e7       	ldi	r20, 0x7E	; 126
   14ab6:	50 e0       	ldi	r21, 0x00	; 0
   14ab8:	b8 01       	movw	r22, r16
   14aba:	c4 01       	movw	r24, r8
   14abc:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   14ac0:	4c 01       	movw	r8, r24
        hpdir.CYLINDERS = get_value(token);
   14ac2:	c8 01       	movw	r24, r16
   14ac4:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14ac8:	60 93 0c 20 	sts	0x200C, r22	; 0x80200c <hpdir+0x94>
   14acc:	70 93 0d 20 	sts	0x200D, r23	; 0x80200d <hpdir+0x95>
   14ad0:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <hpdir+0x96>
   14ad4:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14ad8:	4e e7       	ldi	r20, 0x7E	; 126
   14ada:	50 e0       	ldi	r21, 0x00	; 0
   14adc:	b8 01       	movw	r22, r16
   14ade:	c4 01       	movw	r24, r8
   14ae0:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   14ae4:	4c 01       	movw	r8, r24
        hpdir.HEADS = get_value(token);
   14ae6:	c8 01       	movw	r24, r16
   14ae8:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14aec:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <hpdir+0x98>
   14af0:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <hpdir+0x99>
   14af4:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <hpdir+0x9a>
   14af8:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14afc:	4e e7       	ldi	r20, 0x7E	; 126
   14afe:	50 e0       	ldi	r21, 0x00	; 0
   14b00:	b8 01       	movw	r22, r16
   14b02:	c4 01       	movw	r24, r8
   14b04:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   14b08:	4c 01       	movw	r8, r24
        hpdir.SECTORS = get_value(token);
   14b0a:	c8 01       	movw	r24, r16
   14b0c:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14b10:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <hpdir+0x9c>
   14b14:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <hpdir+0x9d>
   14b18:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <hpdir+0x9e>
   14b1c:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b20:	4e e7       	ldi	r20, 0x7E	; 126
   14b22:	50 e0       	ldi	r21, 0x00	; 0
   14b24:	b8 01       	movw	r22, r16
   14b26:	c4 01       	movw	r24, r8
   14b28:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
   14b2c:	4c 01       	movw	r8, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14b2e:	c8 01       	movw	r24, r16
   14b30:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14b34:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <hpdir+0xa0>
   14b38:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <hpdir+0xa1>
   14b3c:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <hpdir+0xa2>
   14b40:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b44:	4e e7       	ldi	r20, 0x7E	; 126
   14b46:	50 e0       	ldi	r21, 0x00	; 0
   14b48:	b8 01       	movw	r22, r16
   14b4a:	c4 01       	movw	r24, r8
   14b4c:	0e 94 33 33 	call	0x6666	; 0x6666 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14b50:	c8 01       	movw	r24, r16
   14b52:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
   14b56:	60 93 1c 20 	sts	0x201C, r22	; 0x80201c <hpdir+0xa4>
   14b5a:	70 93 1d 20 	sts	0x201D, r23	; 0x80201d <hpdir+0xa5>
   14b5e:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <hpdir+0xa6>
   14b62:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14b66:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <hpdir+0x94>
   14b6a:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <hpdir+0x95>
   14b6e:	40 91 0e 20 	lds	r20, 0x200E	; 0x80200e <hpdir+0x96>
   14b72:	50 91 0f 20 	lds	r21, 0x200F	; 0x80200f <hpdir+0x97>
   14b76:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <hpdir+0x98>
   14b7a:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <hpdir+0x99>
   14b7e:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <hpdir+0x9a>
   14b82:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <hpdir+0x9b>
   14b86:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__mulsi3>
   14b8a:	9b 01       	movw	r18, r22
   14b8c:	ac 01       	movw	r20, r24
   14b8e:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <hpdir+0x9c>
   14b92:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <hpdir+0x9d>
   14b96:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <hpdir+0x9e>
   14b9a:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <hpdir+0x9f>
   14b9e:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__mulsi3>
   14ba2:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <hpdir+0xac>
   14ba6:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <hpdir+0xad>
   14baa:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <hpdir+0xae>
   14bae:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14bb2:	01 e0       	ldi	r16, 0x01	; 1
   14bb4:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14bb6:	c7 01       	movw	r24, r14
   14bb8:	0e 94 1e 7d 	call	0xfa3c	; 0xfa3c <fclose>
	if(verbose && !found)
   14bbc:	ab 28       	or	r10, r11
   14bbe:	81 f0       	breq	.+32     	; 0x14be0 <hpdir_find_drive+0x37a>
   14bc0:	01 2b       	or	r16, r17
   14bc2:	81 f4       	brne	.+32     	; 0x14be4 <hpdir_find_drive+0x37e>
		printf("Model: %s NOT found in hpdir.ini\n", model);
   14bc4:	ed b7       	in	r30, 0x3d	; 61
   14bc6:	fe b7       	in	r31, 0x3e	; 62
   14bc8:	d5 82       	std	Z+5, r13	; 0x05
   14bca:	c4 82       	std	Z+4, r12	; 0x04
   14bcc:	8f e5       	ldi	r24, 0x5F	; 95
   14bce:	91 e2       	ldi	r25, 0x21	; 33
   14bd0:	a0 e0       	ldi	r26, 0x00	; 0
   14bd2:	81 83       	std	Z+1, r24	; 0x01
   14bd4:	92 83       	std	Z+2, r25	; 0x02
   14bd6:	a3 83       	std	Z+3, r26	; 0x03
   14bd8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14bdc:	80 e0       	ldi	r24, 0x00	; 0
   14bde:	03 c0       	rjmp	.+6      	; 0x14be6 <hpdir_find_drive+0x380>
   14be0:	c8 01       	movw	r24, r16
   14be2:	02 c0       	rjmp	.+4      	; 0x14be8 <hpdir_find_drive+0x382>
   14be4:	81 e0       	ldi	r24, 0x01	; 1
   14be6:	90 e0       	ldi	r25, 0x00	; 0
    }                                             // while
    fclose(cfg);
	if(verbose && !found)
		printf("Model: %s NOT found in hpdir.ini\n", model);
    return(found);
}
   14be8:	c7 57       	subi	r28, 0x77	; 119
   14bea:	de 4f       	sbci	r29, 0xFE	; 254
   14bec:	0f b6       	in	r0, 0x3f	; 63
   14bee:	f8 94       	cli
   14bf0:	de bf       	out	0x3e, r29	; 62
   14bf2:	0f be       	out	0x3f, r0	; 63
   14bf4:	cd bf       	out	0x3d, r28	; 61
   14bf6:	df 91       	pop	r29
   14bf8:	cf 91       	pop	r28
   14bfa:	1f 91       	pop	r17
   14bfc:	0f 91       	pop	r16
   14bfe:	ff 90       	pop	r15
   14c00:	ef 90       	pop	r14
   14c02:	df 90       	pop	r13
   14c04:	cf 90       	pop	r12
   14c06:	bf 90       	pop	r11
   14c08:	af 90       	pop	r10
   14c0a:	9f 90       	pop	r9
   14c0c:	8f 90       	pop	r8
   14c0e:	6f 90       	pop	r6
   14c10:	5f 90       	pop	r5
   14c12:	4f 90       	pop	r4
   14c14:	3f 90       	pop	r3
   14c16:	2f 90       	pop	r2
   14c18:	08 95       	ret

00014c1a <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14c1a:	0f 93       	push	r16
   14c1c:	1f 93       	push	r17
   14c1e:	25 e0       	ldi	r18, 0x05	; 5
   14c20:	30 e0       	ldi	r19, 0x00	; 0
   14c22:	fc 01       	movw	r30, r24
   14c24:	31 83       	std	Z+1, r19	; 0x01
   14c26:	20 83       	st	Z, r18
   14c28:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c2c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c30:	00 85       	ldd	r16, Z+8	; 0x08
   14c32:	11 85       	ldd	r17, Z+9	; 0x09
   14c34:	20 e0       	ldi	r18, 0x00	; 0
   14c36:	30 e0       	ldi	r19, 0x00	; 0
   14c38:	42 e0       	ldi	r20, 0x02	; 2
   14c3a:	50 e0       	ldi	r21, 0x00	; 0
   14c3c:	60 e0       	ldi	r22, 0x00	; 0
   14c3e:	70 e0       	ldi	r23, 0x00	; 0
   14c40:	88 e9       	ldi	r24, 0x98	; 152
   14c42:	99 e1       	ldi	r25, 0x19	; 25
   14c44:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14c48:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c4c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c50:	02 85       	ldd	r16, Z+10	; 0x0a
   14c52:	13 85       	ldd	r17, Z+11	; 0x0b
   14c54:	20 e0       	ldi	r18, 0x00	; 0
   14c56:	30 e0       	ldi	r19, 0x00	; 0
   14c58:	42 e0       	ldi	r20, 0x02	; 2
   14c5a:	50 e0       	ldi	r21, 0x00	; 0
   14c5c:	61 e0       	ldi	r22, 0x01	; 1
   14c5e:	70 e0       	ldi	r23, 0x00	; 0
   14c60:	88 e9       	ldi	r24, 0x98	; 152
   14c62:	99 e1       	ldi	r25, 0x19	; 25
   14c64:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14c68:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c6c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c70:	04 85       	ldd	r16, Z+12	; 0x0c
   14c72:	10 e0       	ldi	r17, 0x00	; 0
   14c74:	20 e0       	ldi	r18, 0x00	; 0
   14c76:	30 e0       	ldi	r19, 0x00	; 0
   14c78:	41 e0       	ldi	r20, 0x01	; 1
   14c7a:	50 e0       	ldi	r21, 0x00	; 0
   14c7c:	64 e0       	ldi	r22, 0x04	; 4
   14c7e:	70 e0       	ldi	r23, 0x00	; 0
   14c80:	88 e9       	ldi	r24, 0x98	; 152
   14c82:	99 e1       	ldi	r25, 0x19	; 25
   14c84:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14c88:	88 e9       	ldi	r24, 0x98	; 152
   14c8a:	99 e1       	ldi	r25, 0x19	; 25
   14c8c:	1f 91       	pop	r17
   14c8e:	0f 91       	pop	r16
   14c90:	08 95       	ret

00014c92 <SS80UnitPack>:
   14c92:	0f 93       	push	r16
   14c94:	1f 93       	push	r17
   14c96:	23 e1       	ldi	r18, 0x13	; 19
   14c98:	30 e0       	ldi	r19, 0x00	; 0
   14c9a:	fc 01       	movw	r30, r24
   14c9c:	31 83       	std	Z+1, r19	; 0x01
   14c9e:	20 83       	st	Z, r18
   14ca0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14ca4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14ca8:	05 85       	ldd	r16, Z+13	; 0x0d
   14caa:	10 e0       	ldi	r17, 0x00	; 0
   14cac:	20 e0       	ldi	r18, 0x00	; 0
   14cae:	30 e0       	ldi	r19, 0x00	; 0
   14cb0:	41 e0       	ldi	r20, 0x01	; 1
   14cb2:	50 e0       	ldi	r21, 0x00	; 0
   14cb4:	60 e0       	ldi	r22, 0x00	; 0
   14cb6:	70 e0       	ldi	r23, 0x00	; 0
   14cb8:	85 e8       	ldi	r24, 0x85	; 133
   14cba:	99 e1       	ldi	r25, 0x19	; 25
   14cbc:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14cc0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14cc4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cc8:	06 85       	ldd	r16, Z+14	; 0x0e
   14cca:	17 85       	ldd	r17, Z+15	; 0x0f
   14ccc:	20 89       	ldd	r18, Z+16	; 0x10
   14cce:	31 89       	ldd	r19, Z+17	; 0x11
   14cd0:	43 e0       	ldi	r20, 0x03	; 3
   14cd2:	50 e0       	ldi	r21, 0x00	; 0
   14cd4:	61 e0       	ldi	r22, 0x01	; 1
   14cd6:	70 e0       	ldi	r23, 0x00	; 0
   14cd8:	85 e8       	ldi	r24, 0x85	; 133
   14cda:	99 e1       	ldi	r25, 0x19	; 25
   14cdc:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14ce0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14ce4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14ce8:	02 89       	ldd	r16, Z+18	; 0x12
   14cea:	13 89       	ldd	r17, Z+19	; 0x13
   14cec:	20 e0       	ldi	r18, 0x00	; 0
   14cee:	30 e0       	ldi	r19, 0x00	; 0
   14cf0:	42 e0       	ldi	r20, 0x02	; 2
   14cf2:	50 e0       	ldi	r21, 0x00	; 0
   14cf4:	64 e0       	ldi	r22, 0x04	; 4
   14cf6:	70 e0       	ldi	r23, 0x00	; 0
   14cf8:	85 e8       	ldi	r24, 0x85	; 133
   14cfa:	99 e1       	ldi	r25, 0x19	; 25
   14cfc:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14d00:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d04:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d08:	04 89       	ldd	r16, Z+20	; 0x14
   14d0a:	10 e0       	ldi	r17, 0x00	; 0
   14d0c:	20 e0       	ldi	r18, 0x00	; 0
   14d0e:	30 e0       	ldi	r19, 0x00	; 0
   14d10:	41 e0       	ldi	r20, 0x01	; 1
   14d12:	50 e0       	ldi	r21, 0x00	; 0
   14d14:	66 e0       	ldi	r22, 0x06	; 6
   14d16:	70 e0       	ldi	r23, 0x00	; 0
   14d18:	85 e8       	ldi	r24, 0x85	; 133
   14d1a:	99 e1       	ldi	r25, 0x19	; 25
   14d1c:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14d20:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d24:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d28:	05 89       	ldd	r16, Z+21	; 0x15
   14d2a:	10 e0       	ldi	r17, 0x00	; 0
   14d2c:	20 e0       	ldi	r18, 0x00	; 0
   14d2e:	30 e0       	ldi	r19, 0x00	; 0
   14d30:	41 e0       	ldi	r20, 0x01	; 1
   14d32:	50 e0       	ldi	r21, 0x00	; 0
   14d34:	67 e0       	ldi	r22, 0x07	; 7
   14d36:	70 e0       	ldi	r23, 0x00	; 0
   14d38:	85 e8       	ldi	r24, 0x85	; 133
   14d3a:	99 e1       	ldi	r25, 0x19	; 25
   14d3c:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14d40:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d44:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d48:	06 89       	ldd	r16, Z+22	; 0x16
   14d4a:	17 89       	ldd	r17, Z+23	; 0x17
   14d4c:	20 e0       	ldi	r18, 0x00	; 0
   14d4e:	30 e0       	ldi	r19, 0x00	; 0
   14d50:	42 e0       	ldi	r20, 0x02	; 2
   14d52:	50 e0       	ldi	r21, 0x00	; 0
   14d54:	68 e0       	ldi	r22, 0x08	; 8
   14d56:	70 e0       	ldi	r23, 0x00	; 0
   14d58:	85 e8       	ldi	r24, 0x85	; 133
   14d5a:	99 e1       	ldi	r25, 0x19	; 25
   14d5c:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14d60:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d64:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d68:	00 8d       	ldd	r16, Z+24	; 0x18
   14d6a:	11 8d       	ldd	r17, Z+25	; 0x19
   14d6c:	20 e0       	ldi	r18, 0x00	; 0
   14d6e:	30 e0       	ldi	r19, 0x00	; 0
   14d70:	42 e0       	ldi	r20, 0x02	; 2
   14d72:	50 e0       	ldi	r21, 0x00	; 0
   14d74:	6a e0       	ldi	r22, 0x0A	; 10
   14d76:	70 e0       	ldi	r23, 0x00	; 0
   14d78:	85 e8       	ldi	r24, 0x85	; 133
   14d7a:	99 e1       	ldi	r25, 0x19	; 25
   14d7c:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14d80:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d84:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d88:	02 8d       	ldd	r16, Z+26	; 0x1a
   14d8a:	13 8d       	ldd	r17, Z+27	; 0x1b
   14d8c:	20 e0       	ldi	r18, 0x00	; 0
   14d8e:	30 e0       	ldi	r19, 0x00	; 0
   14d90:	42 e0       	ldi	r20, 0x02	; 2
   14d92:	50 e0       	ldi	r21, 0x00	; 0
   14d94:	6c e0       	ldi	r22, 0x0C	; 12
   14d96:	70 e0       	ldi	r23, 0x00	; 0
   14d98:	85 e8       	ldi	r24, 0x85	; 133
   14d9a:	99 e1       	ldi	r25, 0x19	; 25
   14d9c:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14da0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14da4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14da8:	04 8d       	ldd	r16, Z+28	; 0x1c
   14daa:	15 8d       	ldd	r17, Z+29	; 0x1d
   14dac:	20 e0       	ldi	r18, 0x00	; 0
   14dae:	30 e0       	ldi	r19, 0x00	; 0
   14db0:	42 e0       	ldi	r20, 0x02	; 2
   14db2:	50 e0       	ldi	r21, 0x00	; 0
   14db4:	6e e0       	ldi	r22, 0x0E	; 14
   14db6:	70 e0       	ldi	r23, 0x00	; 0
   14db8:	85 e8       	ldi	r24, 0x85	; 133
   14dba:	99 e1       	ldi	r25, 0x19	; 25
   14dbc:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14dc0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14dc4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14dc8:	06 8d       	ldd	r16, Z+30	; 0x1e
   14dca:	10 e0       	ldi	r17, 0x00	; 0
   14dcc:	20 e0       	ldi	r18, 0x00	; 0
   14dce:	30 e0       	ldi	r19, 0x00	; 0
   14dd0:	41 e0       	ldi	r20, 0x01	; 1
   14dd2:	50 e0       	ldi	r21, 0x00	; 0
   14dd4:	60 e1       	ldi	r22, 0x10	; 16
   14dd6:	70 e0       	ldi	r23, 0x00	; 0
   14dd8:	85 e8       	ldi	r24, 0x85	; 133
   14dda:	99 e1       	ldi	r25, 0x19	; 25
   14ddc:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14de0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14de4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14de8:	07 8d       	ldd	r16, Z+31	; 0x1f
   14dea:	10 e0       	ldi	r17, 0x00	; 0
   14dec:	20 e0       	ldi	r18, 0x00	; 0
   14dee:	30 e0       	ldi	r19, 0x00	; 0
   14df0:	41 e0       	ldi	r20, 0x01	; 1
   14df2:	50 e0       	ldi	r21, 0x00	; 0
   14df4:	61 e1       	ldi	r22, 0x11	; 17
   14df6:	70 e0       	ldi	r23, 0x00	; 0
   14df8:	85 e8       	ldi	r24, 0x85	; 133
   14dfa:	99 e1       	ldi	r25, 0x19	; 25
   14dfc:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14e00:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e04:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e08:	00 a1       	ldd	r16, Z+32	; 0x20
   14e0a:	10 e0       	ldi	r17, 0x00	; 0
   14e0c:	20 e0       	ldi	r18, 0x00	; 0
   14e0e:	30 e0       	ldi	r19, 0x00	; 0
   14e10:	41 e0       	ldi	r20, 0x01	; 1
   14e12:	50 e0       	ldi	r21, 0x00	; 0
   14e14:	62 e1       	ldi	r22, 0x12	; 18
   14e16:	70 e0       	ldi	r23, 0x00	; 0
   14e18:	85 e8       	ldi	r24, 0x85	; 133
   14e1a:	99 e1       	ldi	r25, 0x19	; 25
   14e1c:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14e20:	85 e8       	ldi	r24, 0x85	; 133
   14e22:	99 e1       	ldi	r25, 0x19	; 25
   14e24:	1f 91       	pop	r17
   14e26:	0f 91       	pop	r16
   14e28:	08 95       	ret

00014e2a <SS80VolumePack>:
   14e2a:	0f 93       	push	r16
   14e2c:	1f 93       	push	r17
   14e2e:	2d e0       	ldi	r18, 0x0D	; 13
   14e30:	30 e0       	ldi	r19, 0x00	; 0
   14e32:	fc 01       	movw	r30, r24
   14e34:	31 83       	std	Z+1, r19	; 0x01
   14e36:	20 83       	st	Z, r18
   14e38:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e3c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e40:	01 a1       	ldd	r16, Z+33	; 0x21
   14e42:	12 a1       	ldd	r17, Z+34	; 0x22
   14e44:	23 a1       	ldd	r18, Z+35	; 0x23
   14e46:	34 a1       	ldd	r19, Z+36	; 0x24
   14e48:	43 e0       	ldi	r20, 0x03	; 3
   14e4a:	50 e0       	ldi	r21, 0x00	; 0
   14e4c:	60 e0       	ldi	r22, 0x00	; 0
   14e4e:	70 e0       	ldi	r23, 0x00	; 0
   14e50:	88 e7       	ldi	r24, 0x78	; 120
   14e52:	99 e1       	ldi	r25, 0x19	; 25
   14e54:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14e58:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e5c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e60:	05 a1       	ldd	r16, Z+37	; 0x25
   14e62:	10 e0       	ldi	r17, 0x00	; 0
   14e64:	20 e0       	ldi	r18, 0x00	; 0
   14e66:	30 e0       	ldi	r19, 0x00	; 0
   14e68:	41 e0       	ldi	r20, 0x01	; 1
   14e6a:	50 e0       	ldi	r21, 0x00	; 0
   14e6c:	63 e0       	ldi	r22, 0x03	; 3
   14e6e:	70 e0       	ldi	r23, 0x00	; 0
   14e70:	88 e7       	ldi	r24, 0x78	; 120
   14e72:	99 e1       	ldi	r25, 0x19	; 25
   14e74:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14e78:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e7c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e80:	06 a1       	ldd	r16, Z+38	; 0x26
   14e82:	17 a1       	ldd	r17, Z+39	; 0x27
   14e84:	20 e0       	ldi	r18, 0x00	; 0
   14e86:	30 e0       	ldi	r19, 0x00	; 0
   14e88:	42 e0       	ldi	r20, 0x02	; 2
   14e8a:	50 e0       	ldi	r21, 0x00	; 0
   14e8c:	64 e0       	ldi	r22, 0x04	; 4
   14e8e:	70 e0       	ldi	r23, 0x00	; 0
   14e90:	88 e7       	ldi	r24, 0x78	; 120
   14e92:	99 e1       	ldi	r25, 0x19	; 25
   14e94:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14e98:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e9c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14ea0:	00 a5       	ldd	r16, Z+40	; 0x28
   14ea2:	11 a5       	ldd	r17, Z+41	; 0x29
   14ea4:	22 a5       	ldd	r18, Z+42	; 0x2a
   14ea6:	33 a5       	ldd	r19, Z+43	; 0x2b
   14ea8:	46 e0       	ldi	r20, 0x06	; 6
   14eaa:	50 e0       	ldi	r21, 0x00	; 0
   14eac:	66 e0       	ldi	r22, 0x06	; 6
   14eae:	70 e0       	ldi	r23, 0x00	; 0
   14eb0:	88 e7       	ldi	r24, 0x78	; 120
   14eb2:	99 e1       	ldi	r25, 0x19	; 25
   14eb4:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14eb8:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14ebc:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14ec0:	04 a5       	ldd	r16, Z+44	; 0x2c
   14ec2:	10 e0       	ldi	r17, 0x00	; 0
   14ec4:	20 e0       	ldi	r18, 0x00	; 0
   14ec6:	30 e0       	ldi	r19, 0x00	; 0
   14ec8:	41 e0       	ldi	r20, 0x01	; 1
   14eca:	50 e0       	ldi	r21, 0x00	; 0
   14ecc:	6c e0       	ldi	r22, 0x0C	; 12
   14ece:	70 e0       	ldi	r23, 0x00	; 0
   14ed0:	88 e7       	ldi	r24, 0x78	; 120
   14ed2:	99 e1       	ldi	r25, 0x19	; 25
   14ed4:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   14ed8:	88 e7       	ldi	r24, 0x78	; 120
   14eda:	99 e1       	ldi	r25, 0x19	; 25
   14edc:	1f 91       	pop	r17
   14ede:	0f 91       	pop	r16
   14ee0:	08 95       	ret

00014ee2 <SS80_test_extended_status>:
   14ee2:	9b 01       	movw	r18, r22
   14ee4:	43 e0       	ldi	r20, 0x03	; 3
   14ee6:	35 95       	asr	r19
   14ee8:	27 95       	ror	r18
   14eea:	4a 95       	dec	r20
   14eec:	e1 f7       	brne	.-8      	; 0x14ee6 <SS80_test_extended_status+0x4>
   14eee:	82 0f       	add	r24, r18
   14ef0:	93 1f       	adc	r25, r19
   14ef2:	67 70       	andi	r22, 0x07	; 7
   14ef4:	77 27       	eor	r23, r23
   14ef6:	20 e8       	ldi	r18, 0x80	; 128
   14ef8:	30 e0       	ldi	r19, 0x00	; 0
   14efa:	02 c0       	rjmp	.+4      	; 0x14f00 <SS80_test_extended_status+0x1e>
   14efc:	35 95       	asr	r19
   14efe:	27 95       	ror	r18
   14f00:	6a 95       	dec	r22
   14f02:	e2 f7       	brpl	.-8      	; 0x14efc <SS80_test_extended_status+0x1a>
   14f04:	fc 01       	movw	r30, r24
   14f06:	80 81       	ld	r24, Z
   14f08:	28 23       	and	r18, r24
   14f0a:	81 e0       	ldi	r24, 0x01	; 1
   14f0c:	90 e0       	ldi	r25, 0x00	; 0
   14f0e:	11 f4       	brne	.+4      	; 0x14f14 <SS80_test_extended_status+0x32>
   14f10:	80 e0       	ldi	r24, 0x00	; 0
   14f12:	90 e0       	ldi	r25, 0x00	; 0
   14f14:	08 95       	ret

00014f16 <SS80_display_extended_status>:
   14f16:	6f 92       	push	r6
   14f18:	7f 92       	push	r7
   14f1a:	8f 92       	push	r8
   14f1c:	ef 92       	push	r14
   14f1e:	ff 92       	push	r15
   14f20:	0f 93       	push	r16
   14f22:	1f 93       	push	r17
   14f24:	cf 93       	push	r28
   14f26:	df 93       	push	r29
   14f28:	ad b7       	in	r26, 0x3d	; 61
   14f2a:	be b7       	in	r27, 0x3e	; 62
   14f2c:	17 97       	sbiw	r26, 0x07	; 7
   14f2e:	0f b6       	in	r0, 0x3f	; 63
   14f30:	f8 94       	cli
   14f32:	be bf       	out	0x3e, r27	; 62
   14f34:	0f be       	out	0x3f, r0	; 63
   14f36:	ad bf       	out	0x3d, r26	; 61
   14f38:	fc 01       	movw	r30, r24
   14f3a:	ac 01       	movw	r20, r24
   14f3c:	48 5f       	subi	r20, 0xF8	; 248
   14f3e:	5f 4f       	sbci	r21, 0xFF	; 255
   14f40:	20 e0       	ldi	r18, 0x00	; 0
   14f42:	30 e0       	ldi	r19, 0x00	; 0
   14f44:	a1 91       	ld	r26, Z+
   14f46:	aa 23       	and	r26, r26
   14f48:	11 f0       	breq	.+4      	; 0x14f4e <SS80_display_extended_status+0x38>
   14f4a:	21 e0       	ldi	r18, 0x01	; 1
   14f4c:	30 e0       	ldi	r19, 0x00	; 0
   14f4e:	e4 17       	cp	r30, r20
   14f50:	f5 07       	cpc	r31, r21
   14f52:	c1 f7       	brne	.-16     	; 0x14f44 <SS80_display_extended_status+0x2e>
   14f54:	23 2b       	or	r18, r19
   14f56:	81 f1       	breq	.+96     	; 0x14fb8 <SS80_display_extended_status+0xa2>
   14f58:	ec 01       	movw	r28, r24
   14f5a:	ed b7       	in	r30, 0x3d	; 61
   14f5c:	fe b7       	in	r31, 0x3e	; 62
   14f5e:	75 83       	std	Z+5, r23	; 0x05
   14f60:	64 83       	std	Z+4, r22	; 0x04
   14f62:	8f ef       	ldi	r24, 0xFF	; 255
   14f64:	97 e2       	ldi	r25, 0x27	; 39
   14f66:	a0 e0       	ldi	r26, 0x00	; 0
   14f68:	81 83       	std	Z+1, r24	; 0x01
   14f6a:	92 83       	std	Z+2, r25	; 0x02
   14f6c:	a3 83       	std	Z+3, r26	; 0x03
   14f6e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   14f72:	0c e7       	ldi	r16, 0x7C	; 124
   14f74:	12 e0       	ldi	r17, 0x02	; 2
   14f76:	84 ef       	ldi	r24, 0xF4	; 244
   14f78:	97 e2       	ldi	r25, 0x27	; 39
   14f7a:	3c 01       	movw	r6, r24
   14f7c:	81 2c       	mov	r8, r1
   14f7e:	f8 01       	movw	r30, r16
   14f80:	e0 80       	ld	r14, Z
   14f82:	f1 80       	ldd	r15, Z+1	; 0x01
   14f84:	ff ef       	ldi	r31, 0xFF	; 255
   14f86:	ef 16       	cp	r14, r31
   14f88:	ff 06       	cpc	r15, r31
   14f8a:	b1 f0       	breq	.+44     	; 0x14fb8 <SS80_display_extended_status+0xa2>
   14f8c:	b7 01       	movw	r22, r14
   14f8e:	ce 01       	movw	r24, r28
   14f90:	a8 df       	rcall	.-176    	; 0x14ee2 <SS80_test_extended_status>
   14f92:	89 2b       	or	r24, r25
   14f94:	71 f0       	breq	.+28     	; 0x14fb2 <SS80_display_extended_status+0x9c>
   14f96:	f8 01       	movw	r30, r16
   14f98:	82 81       	ldd	r24, Z+2	; 0x02
   14f9a:	93 81       	ldd	r25, Z+3	; 0x03
   14f9c:	ed b7       	in	r30, 0x3d	; 61
   14f9e:	fe b7       	in	r31, 0x3e	; 62
   14fa0:	97 83       	std	Z+7, r25	; 0x07
   14fa2:	86 83       	std	Z+6, r24	; 0x06
   14fa4:	f5 82       	std	Z+5, r15	; 0x05
   14fa6:	e4 82       	std	Z+4, r14	; 0x04
   14fa8:	61 82       	std	Z+1, r6	; 0x01
   14faa:	72 82       	std	Z+2, r7	; 0x02
   14fac:	83 82       	std	Z+3, r8	; 0x03
   14fae:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   14fb2:	0c 5f       	subi	r16, 0xFC	; 252
   14fb4:	1f 4f       	sbci	r17, 0xFF	; 255
   14fb6:	e3 cf       	rjmp	.-58     	; 0x14f7e <SS80_display_extended_status+0x68>
   14fb8:	ad b7       	in	r26, 0x3d	; 61
   14fba:	be b7       	in	r27, 0x3e	; 62
   14fbc:	17 96       	adiw	r26, 0x07	; 7
   14fbe:	0f b6       	in	r0, 0x3f	; 63
   14fc0:	f8 94       	cli
   14fc2:	be bf       	out	0x3e, r27	; 62
   14fc4:	0f be       	out	0x3f, r0	; 63
   14fc6:	ad bf       	out	0x3d, r26	; 61
   14fc8:	df 91       	pop	r29
   14fca:	cf 91       	pop	r28
   14fcc:	1f 91       	pop	r17
   14fce:	0f 91       	pop	r16
   14fd0:	ff 90       	pop	r15
   14fd2:	ef 90       	pop	r14
   14fd4:	8f 90       	pop	r8
   14fd6:	7f 90       	pop	r7
   14fd8:	6f 90       	pop	r6
   14fda:	08 95       	ret

00014fdc <SS80_send_status>:
   14fdc:	a9 e1       	ldi	r26, 0x19	; 25
   14fde:	b0 e0       	ldi	r27, 0x00	; 0
   14fe0:	e4 ef       	ldi	r30, 0xF4	; 244
   14fe2:	f7 ea       	ldi	r31, 0xA7	; 167
   14fe4:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
   14fe8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fec:	85 ff       	sbrs	r24, 5
   14fee:	0a c0       	rjmp	.+20     	; 0x15004 <SS80_send_status+0x28>
   14ff0:	80 ee       	ldi	r24, 0xE0	; 224
   14ff2:	97 e2       	ldi	r25, 0x27	; 39
   14ff4:	a0 e0       	ldi	r26, 0x00	; 0
   14ff6:	ed b7       	in	r30, 0x3d	; 61
   14ff8:	fe b7       	in	r31, 0x3e	; 62
   14ffa:	81 83       	std	Z+1, r24	; 0x01
   14ffc:	92 83       	std	Z+2, r25	; 0x02
   14ffe:	a3 83       	std	Z+3, r26	; 0x03
   15000:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15004:	ce 01       	movw	r24, r28
   15006:	04 96       	adiw	r24, 0x04	; 4
   15008:	7c 01       	movw	r14, r24
   1500a:	84 e1       	ldi	r24, 0x14	; 20
   1500c:	f7 01       	movw	r30, r14
   1500e:	11 92       	st	Z+, r1
   15010:	8a 95       	dec	r24
   15012:	e9 f7       	brne	.-6      	; 0x1500e <SS80_send_status+0x32>
   15014:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15018:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1501c:	86 81       	ldd	r24, Z+6	; 0x06
   1501e:	20 e1       	ldi	r18, 0x10	; 16
   15020:	82 9f       	mul	r24, r18
   15022:	c0 01       	movw	r24, r0
   15024:	11 24       	eor	r1, r1
   15026:	95 81       	ldd	r25, Z+5	; 0x05
   15028:	9f 70       	andi	r25, 0x0F	; 15
   1502a:	89 2b       	or	r24, r25
   1502c:	8c 83       	std	Y+4, r24	; 0x04
   1502e:	8f ef       	ldi	r24, 0xFF	; 255
   15030:	8d 83       	std	Y+5, r24	; 0x05
   15032:	83 81       	ldd	r24, Z+3	; 0x03
   15034:	86 ff       	sbrs	r24, 6
   15036:	02 c0       	rjmp	.+4      	; 0x1503c <SS80_send_status+0x60>
   15038:	92 e0       	ldi	r25, 0x02	; 2
   1503a:	9e 83       	std	Y+6, r25	; 0x06
   1503c:	82 ff       	sbrs	r24, 2
   1503e:	03 c0       	rjmp	.+6      	; 0x15046 <SS80_send_status+0x6a>
   15040:	9e 81       	ldd	r25, Y+6	; 0x06
   15042:	91 60       	ori	r25, 0x01	; 1
   15044:	9e 83       	std	Y+6, r25	; 0x06
   15046:	80 ff       	sbrs	r24, 0
   15048:	02 c0       	rjmp	.+4      	; 0x1504e <SS80_send_status+0x72>
   1504a:	82 e0       	ldi	r24, 0x02	; 2
   1504c:	88 87       	std	Y+8, r24	; 0x08
   1504e:	83 81       	ldd	r24, Z+3	; 0x03
   15050:	81 ff       	sbrs	r24, 1
   15052:	03 c0       	rjmp	.+6      	; 0x1505a <SS80_send_status+0x7e>
   15054:	88 85       	ldd	r24, Y+8	; 0x08
   15056:	82 60       	ori	r24, 0x02	; 2
   15058:	88 87       	std	Y+8, r24	; 0x08
   1505a:	83 81       	ldd	r24, Z+3	; 0x03
   1505c:	83 ff       	sbrs	r24, 3
   1505e:	02 c0       	rjmp	.+4      	; 0x15064 <SS80_send_status+0x88>
   15060:	88 e0       	ldi	r24, 0x08	; 8
   15062:	8a 87       	std	Y+10, r24	; 0x0a
   15064:	83 81       	ldd	r24, Z+3	; 0x03
   15066:	94 81       	ldd	r25, Z+4	; 0x04
   15068:	89 2b       	or	r24, r25
   1506a:	59 f4       	brne	.+22     	; 0x15082 <SS80_send_status+0xa6>
   1506c:	07 81       	ldd	r16, Z+7	; 0x07
   1506e:	10 85       	ldd	r17, Z+8	; 0x08
   15070:	21 85       	ldd	r18, Z+9	; 0x09
   15072:	32 85       	ldd	r19, Z+10	; 0x0a
   15074:	46 e0       	ldi	r20, 0x06	; 6
   15076:	50 e0       	ldi	r21, 0x00	; 0
   15078:	6a e0       	ldi	r22, 0x0A	; 10
   1507a:	70 e0       	ldi	r23, 0x00	; 0
   1507c:	c7 01       	movw	r24, r14
   1507e:	0e 94 88 c0 	call	0x18110	; 0x18110 <V2B_MSB>
   15082:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15086:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1508a:	83 81       	ldd	r24, Z+3	; 0x03
   1508c:	94 81       	ldd	r25, Z+4	; 0x04
   1508e:	89 2b       	or	r24, r25
   15090:	11 f0       	breq	.+4      	; 0x15096 <SS80_send_status+0xba>
   15092:	81 e0       	ldi	r24, 0x01	; 1
   15094:	82 83       	std	Z+2, r24	; 0x02
   15096:	80 e0       	ldi	r24, 0x00	; 0
   15098:	91 e0       	ldi	r25, 0x01	; 1
   1509a:	99 8f       	std	Y+25, r25	; 0x19
   1509c:	88 8f       	std	Y+24, r24	; 0x18
   1509e:	ae 01       	movw	r20, r28
   150a0:	48 5e       	subi	r20, 0xE8	; 232
   150a2:	5f 4f       	sbci	r21, 0xFF	; 255
   150a4:	64 e1       	ldi	r22, 0x14	; 20
   150a6:	70 e0       	ldi	r23, 0x00	; 0
   150a8:	c7 01       	movw	r24, r14
   150aa:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   150ae:	44 97       	sbiw	r24, 0x14	; 20
   150b0:	71 f0       	breq	.+28     	; 0x150ce <SS80_send_status+0xf2>
   150b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150b6:	80 ff       	sbrs	r24, 0
   150b8:	0a c0       	rjmp	.+20     	; 0x150ce <SS80_send_status+0xf2>
   150ba:	85 ec       	ldi	r24, 0xC5	; 197
   150bc:	97 e2       	ldi	r25, 0x27	; 39
   150be:	a0 e0       	ldi	r26, 0x00	; 0
   150c0:	ed b7       	in	r30, 0x3d	; 61
   150c2:	fe b7       	in	r31, 0x3e	; 62
   150c4:	81 83       	std	Z+1, r24	; 0x01
   150c6:	92 83       	std	Z+2, r25	; 0x02
   150c8:	a3 83       	std	Z+3, r26	; 0x03
   150ca:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   150ce:	88 8d       	ldd	r24, Y+24	; 0x18
   150d0:	99 8d       	ldd	r25, Y+25	; 0x19
   150d2:	88 27       	eor	r24, r24
   150d4:	90 7d       	andi	r25, 0xD0	; 208
   150d6:	69 96       	adiw	r28, 0x19	; 25
   150d8:	e6 e0       	ldi	r30, 0x06	; 6
   150da:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

000150de <SS80_describe>:
   150de:	a7 e0       	ldi	r26, 0x07	; 7
   150e0:	b0 e0       	ldi	r27, 0x00	; 0
   150e2:	e5 e7       	ldi	r30, 0x75	; 117
   150e4:	f8 ea       	ldi	r31, 0xA8	; 168
   150e6:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   150ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150ee:	85 ff       	sbrs	r24, 5
   150f0:	0a c0       	rjmp	.+20     	; 0x15106 <SS80_describe+0x28>
   150f2:	84 eb       	ldi	r24, 0xB4	; 180
   150f4:	97 e2       	ldi	r25, 0x27	; 39
   150f6:	a0 e0       	ldi	r26, 0x00	; 0
   150f8:	ed b7       	in	r30, 0x3d	; 61
   150fa:	fe b7       	in	r31, 0x3e	; 62
   150fc:	81 83       	std	Z+1, r24	; 0x01
   150fe:	92 83       	std	Z+2, r25	; 0x02
   15100:	a3 83       	std	Z+3, r26	; 0x03
   15102:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15106:	1f 82       	std	Y+7, r1	; 0x07
   15108:	1e 82       	std	Y+6, r1	; 0x06
   1510a:	ce 01       	movw	r24, r28
   1510c:	04 96       	adiw	r24, 0x04	; 4
   1510e:	85 dd       	rcall	.-1270   	; 0x14c1a <SS80ControllerPack>
   15110:	6c 81       	ldd	r22, Y+4	; 0x04
   15112:	7d 81       	ldd	r23, Y+5	; 0x05
   15114:	ae 01       	movw	r20, r28
   15116:	4a 5f       	subi	r20, 0xFA	; 250
   15118:	5f 4f       	sbci	r21, 0xFF	; 255
   1511a:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   1511e:	2c 81       	ldd	r18, Y+4	; 0x04
   15120:	3d 81       	ldd	r19, Y+5	; 0x05
   15122:	82 17       	cp	r24, r18
   15124:	93 07       	cpc	r25, r19
   15126:	39 f0       	breq	.+14     	; 0x15136 <SS80_describe+0x58>
   15128:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1512c:	80 ff       	sbrs	r24, 0
   1512e:	3c c0       	rjmp	.+120    	; 0x151a8 <SS80_describe+0xca>
   15130:	81 e9       	ldi	r24, 0x91	; 145
   15132:	97 e2       	ldi	r25, 0x27	; 39
   15134:	31 c0       	rjmp	.+98     	; 0x15198 <SS80_describe+0xba>
   15136:	1f 82       	std	Y+7, r1	; 0x07
   15138:	1e 82       	std	Y+6, r1	; 0x06
   1513a:	ce 01       	movw	r24, r28
   1513c:	04 96       	adiw	r24, 0x04	; 4
   1513e:	a9 dd       	rcall	.-1198   	; 0x14c92 <SS80UnitPack>
   15140:	6c 81       	ldd	r22, Y+4	; 0x04
   15142:	7d 81       	ldd	r23, Y+5	; 0x05
   15144:	ae 01       	movw	r20, r28
   15146:	4a 5f       	subi	r20, 0xFA	; 250
   15148:	5f 4f       	sbci	r21, 0xFF	; 255
   1514a:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   1514e:	2c 81       	ldd	r18, Y+4	; 0x04
   15150:	3d 81       	ldd	r19, Y+5	; 0x05
   15152:	82 17       	cp	r24, r18
   15154:	93 07       	cpc	r25, r19
   15156:	39 f0       	breq	.+14     	; 0x15166 <SS80_describe+0x88>
   15158:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1515c:	80 ff       	sbrs	r24, 0
   1515e:	24 c0       	rjmp	.+72     	; 0x151a8 <SS80_describe+0xca>
   15160:	84 e7       	ldi	r24, 0x74	; 116
   15162:	97 e2       	ldi	r25, 0x27	; 39
   15164:	19 c0       	rjmp	.+50     	; 0x15198 <SS80_describe+0xba>
   15166:	80 e0       	ldi	r24, 0x00	; 0
   15168:	91 e0       	ldi	r25, 0x01	; 1
   1516a:	9f 83       	std	Y+7, r25	; 0x07
   1516c:	8e 83       	std	Y+6, r24	; 0x06
   1516e:	ce 01       	movw	r24, r28
   15170:	04 96       	adiw	r24, 0x04	; 4
   15172:	5b de       	rcall	.-842    	; 0x14e2a <SS80VolumePack>
   15174:	6c 81       	ldd	r22, Y+4	; 0x04
   15176:	7d 81       	ldd	r23, Y+5	; 0x05
   15178:	ae 01       	movw	r20, r28
   1517a:	4a 5f       	subi	r20, 0xFA	; 250
   1517c:	5f 4f       	sbci	r21, 0xFF	; 255
   1517e:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   15182:	2c 81       	ldd	r18, Y+4	; 0x04
   15184:	3d 81       	ldd	r19, Y+5	; 0x05
   15186:	82 17       	cp	r24, r18
   15188:	93 07       	cpc	r25, r19
   1518a:	99 f0       	breq	.+38     	; 0x151b2 <SS80_describe+0xd4>
   1518c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15190:	80 ff       	sbrs	r24, 0
   15192:	0a c0       	rjmp	.+20     	; 0x151a8 <SS80_describe+0xca>
   15194:	85 e5       	ldi	r24, 0x55	; 85
   15196:	97 e2       	ldi	r25, 0x27	; 39
   15198:	a0 e0       	ldi	r26, 0x00	; 0
   1519a:	ed b7       	in	r30, 0x3d	; 61
   1519c:	fe b7       	in	r31, 0x3e	; 62
   1519e:	81 83       	std	Z+1, r24	; 0x01
   151a0:	92 83       	std	Z+2, r25	; 0x02
   151a2:	a3 83       	std	Z+3, r26	; 0x03
   151a4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   151a8:	8e 81       	ldd	r24, Y+6	; 0x06
   151aa:	9f 81       	ldd	r25, Y+7	; 0x07
   151ac:	88 27       	eor	r24, r24
   151ae:	90 7d       	andi	r25, 0xD0	; 208
   151b0:	02 c0       	rjmp	.+4      	; 0x151b6 <SS80_describe+0xd8>
   151b2:	80 e0       	ldi	r24, 0x00	; 0
   151b4:	90 e0       	ldi	r25, 0x00	; 0
   151b6:	27 96       	adiw	r28, 0x07	; 7
   151b8:	e2 e0       	ldi	r30, 0x02	; 2
   151ba:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

000151be <SS80_Check_Unit>:
   151be:	00 d0       	rcall	.+0      	; 0x151c0 <SS80_Check_Unit+0x2>
   151c0:	00 d0       	rcall	.+0      	; 0x151c2 <SS80_Check_Unit+0x4>
   151c2:	1f 92       	push	r1
   151c4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   151c8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   151cc:	88 23       	and	r24, r24
   151ce:	c9 f0       	breq	.+50     	; 0x15202 <SS80_Check_Unit+0x44>
   151d0:	8f 30       	cpi	r24, 0x0F	; 15
   151d2:	b9 f0       	breq	.+46     	; 0x15202 <SS80_Check_Unit+0x44>
   151d4:	23 81       	ldd	r18, Z+3	; 0x03
   151d6:	34 81       	ldd	r19, Z+4	; 0x04
   151d8:	20 64       	ori	r18, 0x40	; 64
   151da:	34 83       	std	Z+4, r19	; 0x04
   151dc:	23 83       	std	Z+3, r18	; 0x03
   151de:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   151e2:	90 ff       	sbrs	r25, 0
   151e4:	0f c0       	rjmp	.+30     	; 0x15204 <SS80_Check_Unit+0x46>
   151e6:	90 e0       	ldi	r25, 0x00	; 0
   151e8:	ed b7       	in	r30, 0x3d	; 61
   151ea:	fe b7       	in	r31, 0x3e	; 62
   151ec:	95 83       	std	Z+5, r25	; 0x05
   151ee:	84 83       	std	Z+4, r24	; 0x04
   151f0:	8d e3       	ldi	r24, 0x3D	; 61
   151f2:	97 e2       	ldi	r25, 0x27	; 39
   151f4:	a0 e0       	ldi	r26, 0x00	; 0
   151f6:	81 83       	std	Z+1, r24	; 0x01
   151f8:	92 83       	std	Z+2, r25	; 0x02
   151fa:	a3 83       	std	Z+3, r26	; 0x03
   151fc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15200:	01 c0       	rjmp	.+2      	; 0x15204 <SS80_Check_Unit+0x46>
   15202:	85 83       	std	Z+5, r24	; 0x05
   15204:	0f 90       	pop	r0
   15206:	0f 90       	pop	r0
   15208:	0f 90       	pop	r0
   1520a:	0f 90       	pop	r0
   1520c:	0f 90       	pop	r0
   1520e:	08 95       	ret

00015210 <SS80_Check_Volume>:
   15210:	00 d0       	rcall	.+0      	; 0x15212 <SS80_Check_Volume+0x2>
   15212:	00 d0       	rcall	.+0      	; 0x15214 <SS80_Check_Volume+0x4>
   15214:	1f 92       	push	r1
   15216:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1521a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1521e:	88 23       	and	r24, r24
   15220:	b9 f0       	breq	.+46     	; 0x15250 <SS80_Check_Volume+0x40>
   15222:	23 81       	ldd	r18, Z+3	; 0x03
   15224:	34 81       	ldd	r19, Z+4	; 0x04
   15226:	20 64       	ori	r18, 0x40	; 64
   15228:	34 83       	std	Z+4, r19	; 0x04
   1522a:	23 83       	std	Z+3, r18	; 0x03
   1522c:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   15230:	90 ff       	sbrs	r25, 0
   15232:	0f c0       	rjmp	.+30     	; 0x15252 <SS80_Check_Volume+0x42>
   15234:	90 e0       	ldi	r25, 0x00	; 0
   15236:	ed b7       	in	r30, 0x3d	; 61
   15238:	fe b7       	in	r31, 0x3e	; 62
   1523a:	95 83       	std	Z+5, r25	; 0x05
   1523c:	84 83       	std	Z+4, r24	; 0x04
   1523e:	83 e2       	ldi	r24, 0x23	; 35
   15240:	97 e2       	ldi	r25, 0x27	; 39
   15242:	a0 e0       	ldi	r26, 0x00	; 0
   15244:	81 83       	std	Z+1, r24	; 0x01
   15246:	92 83       	std	Z+2, r25	; 0x02
   15248:	a3 83       	std	Z+3, r26	; 0x03
   1524a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1524e:	01 c0       	rjmp	.+2      	; 0x15252 <SS80_Check_Volume+0x42>
   15250:	16 82       	std	Z+6, r1	; 0x06
   15252:	0f 90       	pop	r0
   15254:	0f 90       	pop	r0
   15256:	0f 90       	pop	r0
   15258:	0f 90       	pop	r0
   1525a:	0f 90       	pop	r0
   1525c:	08 95       	ret

0001525e <SS80_Command_State>:
   1525e:	2f 92       	push	r2
   15260:	3f 92       	push	r3
   15262:	4f 92       	push	r4
   15264:	6f 92       	push	r6
   15266:	7f 92       	push	r7
   15268:	8f 92       	push	r8
   1526a:	af 92       	push	r10
   1526c:	bf 92       	push	r11
   1526e:	cf 92       	push	r12
   15270:	ef 92       	push	r14
   15272:	ff 92       	push	r15
   15274:	0f 93       	push	r16
   15276:	1f 93       	push	r17
   15278:	cf 93       	push	r28
   1527a:	df 93       	push	r29
   1527c:	cd b7       	in	r28, 0x3d	; 61
   1527e:	de b7       	in	r29, 0x3e	; 62
   15280:	66 97       	sbiw	r28, 0x16	; 22
   15282:	0f b6       	in	r0, 0x3f	; 63
   15284:	f8 94       	cli
   15286:	de bf       	out	0x3e, r29	; 62
   15288:	0f be       	out	0x3f, r0	; 63
   1528a:	cd bf       	out	0x3d, r28	; 61
   1528c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15290:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15294:	81 81       	ldd	r24, Z+1	; 0x01
   15296:	90 e0       	ldi	r25, 0x00	; 0
   15298:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
   1529c:	80 e0       	ldi	r24, 0x00	; 0
   1529e:	91 e0       	ldi	r25, 0x01	; 1
   152a0:	99 87       	std	Y+9, r25	; 0x09
   152a2:	88 87       	std	Y+8, r24	; 0x08
   152a4:	ae 01       	movw	r20, r28
   152a6:	48 5f       	subi	r20, 0xF8	; 248
   152a8:	5f 4f       	sbci	r21, 0xFF	; 255
   152aa:	60 e0       	ldi	r22, 0x00	; 0
   152ac:	72 e0       	ldi	r23, 0x02	; 2
   152ae:	8a ee       	ldi	r24, 0xEA	; 234
   152b0:	9c e1       	ldi	r25, 0x1C	; 28
   152b2:	0e 94 04 8b 	call	0x11608	; 0x11608 <gpib_read_str>
   152b6:	9b 87       	std	Y+11, r25	; 0x0b
   152b8:	8a 87       	std	Y+10, r24	; 0x0a
   152ba:	88 85       	ldd	r24, Y+8	; 0x08
   152bc:	99 85       	ldd	r25, Y+9	; 0x09
   152be:	9c 01       	movw	r18, r24
   152c0:	22 27       	eor	r18, r18
   152c2:	30 7d       	andi	r19, 0xD0	; 208
   152c4:	23 2b       	or	r18, r19
   152c6:	79 f0       	breq	.+30     	; 0x152e6 <SS80_Command_State+0x88>
   152c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152cc:	80 ff       	sbrs	r24, 0
   152ce:	21 c2       	rjmp	.+1090   	; 0x15712 <SS80_Command_State+0x4b4>
   152d0:	8d ef       	ldi	r24, 0xFD	; 253
   152d2:	96 e2       	ldi	r25, 0x26	; 38
   152d4:	a0 e0       	ldi	r26, 0x00	; 0
   152d6:	ed b7       	in	r30, 0x3d	; 61
   152d8:	fe b7       	in	r31, 0x3e	; 62
   152da:	81 83       	std	Z+1, r24	; 0x01
   152dc:	92 83       	std	Z+2, r25	; 0x02
   152de:	a3 83       	std	Z+3, r26	; 0x03
   152e0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   152e4:	16 c2       	rjmp	.+1068   	; 0x15712 <SS80_Command_State+0x4b4>
   152e6:	2a 85       	ldd	r18, Y+10	; 0x0a
   152e8:	3b 85       	ldd	r19, Y+11	; 0x0b
   152ea:	23 2b       	or	r18, r19
   152ec:	09 f4       	brne	.+2      	; 0x152f0 <SS80_Command_State+0x92>
   152ee:	16 c2       	rjmp	.+1068   	; 0x1571c <SS80_Command_State+0x4be>
   152f0:	90 fd       	sbrc	r25, 0
   152f2:	0e c0       	rjmp	.+28     	; 0x15310 <SS80_Command_State+0xb2>
   152f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152f8:	80 ff       	sbrs	r24, 0
   152fa:	0a c0       	rjmp	.+20     	; 0x15310 <SS80_Command_State+0xb2>
   152fc:	84 ee       	ldi	r24, 0xE4	; 228
   152fe:	96 e2       	ldi	r25, 0x26	; 38
   15300:	a0 e0       	ldi	r26, 0x00	; 0
   15302:	ed b7       	in	r30, 0x3d	; 61
   15304:	fe b7       	in	r31, 0x3e	; 62
   15306:	81 83       	std	Z+1, r24	; 0x01
   15308:	92 83       	std	Z+2, r25	; 0x02
   1530a:	a3 83       	std	Z+3, r26	; 0x03
   1530c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15310:	e1 2c       	mov	r14, r1
   15312:	f1 2c       	mov	r15, r1
   15314:	88 ee       	ldi	r24, 0xE8	; 232
   15316:	95 e2       	ldi	r25, 0x25	; 37
   15318:	9c 01       	movw	r18, r24
   1531a:	40 e0       	ldi	r20, 0x00	; 0
   1531c:	2e 87       	std	Y+14, r18	; 0x0e
   1531e:	3f 87       	std	Y+15, r19	; 0x0f
   15320:	48 8b       	std	Y+16, r20	; 0x10
   15322:	8d e0       	ldi	r24, 0x0D	; 13
   15324:	96 e2       	ldi	r25, 0x26	; 38
   15326:	9c 01       	movw	r18, r24
   15328:	40 e0       	ldi	r20, 0x00	; 0
   1532a:	29 8b       	std	Y+17, r18	; 0x11
   1532c:	3a 8b       	std	Y+18, r19	; 0x12
   1532e:	4b 8b       	std	Y+19, r20	; 0x13
   15330:	87 e2       	ldi	r24, 0x27	; 39
   15332:	96 e2       	ldi	r25, 0x26	; 38
   15334:	9c 01       	movw	r18, r24
   15336:	40 e0       	ldi	r20, 0x00	; 0
   15338:	2c 8b       	std	Y+20, r18	; 0x14
   1533a:	3d 8b       	std	Y+21, r19	; 0x15
   1533c:	4e 8b       	std	Y+22, r20	; 0x16
   1533e:	8d e3       	ldi	r24, 0x3D	; 61
   15340:	96 e2       	ldi	r25, 0x26	; 38
   15342:	3c 01       	movw	r6, r24
   15344:	81 2c       	mov	r8, r1
   15346:	8b e4       	ldi	r24, 0x4B	; 75
   15348:	96 e2       	ldi	r25, 0x26	; 38
   1534a:	5c 01       	movw	r10, r24
   1534c:	c1 2c       	mov	r12, r1
   1534e:	87 e6       	ldi	r24, 0x67	; 103
   15350:	96 e2       	ldi	r25, 0x26	; 38
   15352:	1c 01       	movw	r2, r24
   15354:	41 2c       	mov	r4, r1
   15356:	2a 85       	ldd	r18, Y+10	; 0x0a
   15358:	3b 85       	ldd	r19, Y+11	; 0x0b
   1535a:	87 01       	movw	r16, r14
   1535c:	e2 16       	cp	r14, r18
   1535e:	f3 06       	cpc	r15, r19
   15360:	0c f0       	brlt	.+2      	; 0x15364 <SS80_Command_State+0x106>
   15362:	b6 c1       	rjmp	.+876    	; 0x156d0 <SS80_Command_State+0x472>
   15364:	0f 5f       	subi	r16, 0xFF	; 255
   15366:	1f 4f       	sbci	r17, 0xFF	; 255
   15368:	f7 01       	movw	r30, r14
   1536a:	e6 51       	subi	r30, 0x16	; 22
   1536c:	f3 4e       	sbci	r31, 0xE3	; 227
   1536e:	80 81       	ld	r24, Z
   15370:	28 2f       	mov	r18, r24
   15372:	30 e0       	ldi	r19, 0x00	; 0
   15374:	a9 01       	movw	r20, r18
   15376:	40 52       	subi	r20, 0x20	; 32
   15378:	51 09       	sbc	r21, r1
   1537a:	40 31       	cpi	r20, 0x10	; 16
   1537c:	51 05       	cpc	r21, r1
   1537e:	98 f4       	brcc	.+38     	; 0x153a6 <SS80_Command_State+0x148>
   15380:	80 52       	subi	r24, 0x20	; 32
   15382:	1d df       	rcall	.-454    	; 0x151be <SS80_Check_Unit>
   15384:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15388:	85 ff       	sbrs	r24, 5
   1538a:	a0 c1       	rjmp	.+832    	; 0x156cc <SS80_Command_State+0x46e>
   1538c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15390:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15394:	85 81       	ldd	r24, Z+5	; 0x05
   15396:	90 e0       	ldi	r25, 0x00	; 0
   15398:	ed b7       	in	r30, 0x3d	; 61
   1539a:	fe b7       	in	r31, 0x3e	; 62
   1539c:	95 83       	std	Z+5, r25	; 0x05
   1539e:	84 83       	std	Z+4, r24	; 0x04
   153a0:	8e ec       	ldi	r24, 0xCE	; 206
   153a2:	96 e2       	ldi	r25, 0x26	; 38
   153a4:	19 c0       	rjmp	.+50     	; 0x153d8 <SS80_Command_State+0x17a>
   153a6:	a9 01       	movw	r20, r18
   153a8:	40 54       	subi	r20, 0x40	; 64
   153aa:	51 09       	sbc	r21, r1
   153ac:	40 31       	cpi	r20, 0x10	; 16
   153ae:	51 05       	cpc	r21, r1
   153b0:	d0 f4       	brcc	.+52     	; 0x153e6 <SS80_Command_State+0x188>
   153b2:	80 54       	subi	r24, 0x40	; 64
   153b4:	2d df       	rcall	.-422    	; 0x15210 <SS80_Check_Volume>
   153b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153ba:	85 ff       	sbrs	r24, 5
   153bc:	87 c1       	rjmp	.+782    	; 0x156cc <SS80_Command_State+0x46e>
   153be:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   153c2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   153c6:	86 81       	ldd	r24, Z+6	; 0x06
   153c8:	90 e0       	ldi	r25, 0x00	; 0
   153ca:	ed b7       	in	r30, 0x3d	; 61
   153cc:	fe b7       	in	r31, 0x3e	; 62
   153ce:	95 83       	std	Z+5, r25	; 0x05
   153d0:	84 83       	std	Z+4, r24	; 0x04
   153d2:	25 eb       	ldi	r18, 0xB5	; 181
   153d4:	36 e2       	ldi	r19, 0x26	; 38
   153d6:	c9 01       	movw	r24, r18
   153d8:	a0 e0       	ldi	r26, 0x00	; 0
   153da:	81 83       	std	Z+1, r24	; 0x01
   153dc:	92 83       	std	Z+2, r25	; 0x02
   153de:	a3 83       	std	Z+3, r26	; 0x03
   153e0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   153e4:	73 c1       	rjmp	.+742    	; 0x156cc <SS80_Command_State+0x46e>
   153e6:	21 15       	cp	r18, r1
   153e8:	31 05       	cpc	r19, r1
   153ea:	79 f4       	brne	.+30     	; 0x1540a <SS80_Command_State+0x1ac>
   153ec:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   153f0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   153f4:	81 e0       	ldi	r24, 0x01	; 1
   153f6:	90 e0       	ldi	r25, 0x00	; 0
   153f8:	91 83       	std	Z+1, r25	; 0x01
   153fa:	80 83       	st	Z, r24
   153fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15400:	85 ff       	sbrs	r24, 5
   15402:	66 c1       	rjmp	.+716    	; 0x156d0 <SS80_Command_State+0x472>
   15404:	8d e9       	ldi	r24, 0x9D	; 157
   15406:	96 e2       	ldi	r25, 0x26	; 38
   15408:	0f c0       	rjmp	.+30     	; 0x15428 <SS80_Command_State+0x1ca>
   1540a:	22 30       	cpi	r18, 0x02	; 2
   1540c:	31 05       	cpc	r19, r1
   1540e:	a9 f4       	brne	.+42     	; 0x1543a <SS80_Command_State+0x1dc>
   15410:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15414:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15418:	31 83       	std	Z+1, r19	; 0x01
   1541a:	20 83       	st	Z, r18
   1541c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15420:	85 ff       	sbrs	r24, 5
   15422:	56 c1       	rjmp	.+684    	; 0x156d0 <SS80_Command_State+0x472>
   15424:	84 e8       	ldi	r24, 0x84	; 132
   15426:	96 e2       	ldi	r25, 0x26	; 38
   15428:	a0 e0       	ldi	r26, 0x00	; 0
   1542a:	ed b7       	in	r30, 0x3d	; 61
   1542c:	fe b7       	in	r31, 0x3e	; 62
   1542e:	81 83       	std	Z+1, r24	; 0x01
   15430:	92 83       	std	Z+2, r25	; 0x02
   15432:	a3 83       	std	Z+3, r26	; 0x03
   15434:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15438:	4b c1       	rjmp	.+662    	; 0x156d0 <SS80_Command_State+0x472>
   1543a:	20 31       	cpi	r18, 0x10	; 16
   1543c:	31 05       	cpc	r19, r1
   1543e:	b1 f5       	brne	.+108    	; 0x154ac <SS80_Command_State+0x24e>
   15440:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   15444:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   15448:	3d 87       	std	Y+13, r19	; 0x0d
   1544a:	2c 87       	std	Y+12, r18	; 0x0c
   1544c:	46 e0       	ldi	r20, 0x06	; 6
   1544e:	50 e0       	ldi	r21, 0x00	; 0
   15450:	b8 01       	movw	r22, r16
   15452:	8a ee       	ldi	r24, 0xEA	; 234
   15454:	9c e1       	ldi	r25, 0x1C	; 28
   15456:	0e 94 b1 c0 	call	0x18162	; 0x18162 <B2V_MSB>
   1545a:	ec 85       	ldd	r30, Y+12	; 0x0c
   1545c:	fd 85       	ldd	r31, Y+13	; 0x0d
   1545e:	67 83       	std	Z+7, r22	; 0x07
   15460:	70 87       	std	Z+8, r23	; 0x08
   15462:	81 87       	std	Z+9, r24	; 0x09
   15464:	92 87       	std	Z+10, r25	; 0x0a
   15466:	87 01       	movw	r16, r14
   15468:	09 5f       	subi	r16, 0xF9	; 249
   1546a:	1f 4f       	sbci	r17, 0xFF	; 255
   1546c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15470:	85 ff       	sbrs	r24, 5
   15472:	2c c1       	rjmp	.+600    	; 0x156cc <SS80_Command_State+0x46e>
   15474:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   15478:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   1547c:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   15480:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   15484:	fc 01       	movw	r30, r24
   15486:	a2 89       	ldd	r26, Z+18	; 0x12
   15488:	b3 89       	ldd	r27, Z+19	; 0x13
   1548a:	f9 01       	movw	r30, r18
   1548c:	27 81       	ldd	r18, Z+7	; 0x07
   1548e:	30 85       	ldd	r19, Z+8	; 0x08
   15490:	41 85       	ldd	r20, Z+9	; 0x09
   15492:	52 85       	ldd	r21, Z+10	; 0x0a
   15494:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
   15498:	ed b7       	in	r30, 0x3d	; 61
   1549a:	fe b7       	in	r31, 0x3e	; 62
   1549c:	64 83       	std	Z+4, r22	; 0x04
   1549e:	75 83       	std	Z+5, r23	; 0x05
   154a0:	86 83       	std	Z+6, r24	; 0x06
   154a2:	97 83       	std	Z+7, r25	; 0x07
   154a4:	21 82       	std	Z+1, r2	; 0x01
   154a6:	32 82       	std	Z+2, r3	; 0x02
   154a8:	43 82       	std	Z+3, r4	; 0x03
   154aa:	2e c0       	rjmp	.+92     	; 0x15508 <SS80_Command_State+0x2aa>
   154ac:	28 31       	cpi	r18, 0x18	; 24
   154ae:	31 05       	cpc	r19, r1
   154b0:	71 f5       	brne	.+92     	; 0x1550e <SS80_Command_State+0x2b0>
   154b2:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   154b6:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   154ba:	3d 87       	std	Y+13, r19	; 0x0d
   154bc:	2c 87       	std	Y+12, r18	; 0x0c
   154be:	44 e0       	ldi	r20, 0x04	; 4
   154c0:	50 e0       	ldi	r21, 0x00	; 0
   154c2:	b8 01       	movw	r22, r16
   154c4:	8a ee       	ldi	r24, 0xEA	; 234
   154c6:	9c e1       	ldi	r25, 0x1C	; 28
   154c8:	0e 94 b1 c0 	call	0x18162	; 0x18162 <B2V_MSB>
   154cc:	ec 85       	ldd	r30, Y+12	; 0x0c
   154ce:	fd 85       	ldd	r31, Y+13	; 0x0d
   154d0:	63 87       	std	Z+11, r22	; 0x0b
   154d2:	74 87       	std	Z+12, r23	; 0x0c
   154d4:	85 87       	std	Z+13, r24	; 0x0d
   154d6:	96 87       	std	Z+14, r25	; 0x0e
   154d8:	87 01       	movw	r16, r14
   154da:	0b 5f       	subi	r16, 0xFB	; 251
   154dc:	1f 4f       	sbci	r17, 0xFF	; 255
   154de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154e2:	85 ff       	sbrs	r24, 5
   154e4:	f3 c0       	rjmp	.+486    	; 0x156cc <SS80_Command_State+0x46e>
   154e6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   154ea:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   154ee:	83 85       	ldd	r24, Z+11	; 0x0b
   154f0:	94 85       	ldd	r25, Z+12	; 0x0c
   154f2:	a5 85       	ldd	r26, Z+13	; 0x0d
   154f4:	b6 85       	ldd	r27, Z+14	; 0x0e
   154f6:	ed b7       	in	r30, 0x3d	; 61
   154f8:	fe b7       	in	r31, 0x3e	; 62
   154fa:	84 83       	std	Z+4, r24	; 0x04
   154fc:	95 83       	std	Z+5, r25	; 0x05
   154fe:	a6 83       	std	Z+6, r26	; 0x06
   15500:	b7 83       	std	Z+7, r27	; 0x07
   15502:	a1 82       	std	Z+1, r10	; 0x01
   15504:	b2 82       	std	Z+2, r11	; 0x02
   15506:	c3 82       	std	Z+3, r12	; 0x03
   15508:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1550c:	df c0       	rjmp	.+446    	; 0x156cc <SS80_Command_State+0x46e>
   1550e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15512:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15516:	24 33       	cpi	r18, 0x34	; 52
   15518:	31 05       	cpc	r19, r1
   1551a:	41 f4       	brne	.+16     	; 0x1552c <SS80_Command_State+0x2ce>
   1551c:	85 ff       	sbrs	r24, 5
   1551e:	d6 c0       	rjmp	.+428    	; 0x156cc <SS80_Command_State+0x46e>
   15520:	ed b7       	in	r30, 0x3d	; 61
   15522:	fe b7       	in	r31, 0x3e	; 62
   15524:	61 82       	std	Z+1, r6	; 0x01
   15526:	72 82       	std	Z+2, r7	; 0x02
   15528:	83 82       	std	Z+3, r8	; 0x03
   1552a:	2b c0       	rjmp	.+86     	; 0x15582 <SS80_Command_State+0x324>
   1552c:	29 33       	cpi	r18, 0x39	; 57
   1552e:	31 05       	cpc	r19, r1
   15530:	49 f4       	brne	.+18     	; 0x15544 <SS80_Command_State+0x2e6>
   15532:	87 01       	movw	r16, r14
   15534:	0d 5f       	subi	r16, 0xFD	; 253
   15536:	1f 4f       	sbci	r17, 0xFF	; 255
   15538:	85 ff       	sbrs	r24, 5
   1553a:	c8 c0       	rjmp	.+400    	; 0x156cc <SS80_Command_State+0x46e>
   1553c:	2c 89       	ldd	r18, Y+20	; 0x14
   1553e:	3d 89       	ldd	r19, Y+21	; 0x15
   15540:	4e 89       	ldd	r20, Y+22	; 0x16
   15542:	1a c0       	rjmp	.+52     	; 0x15578 <SS80_Command_State+0x31a>
   15544:	2b 33       	cpi	r18, 0x3B	; 59
   15546:	31 05       	cpc	r19, r1
   15548:	49 f4       	brne	.+18     	; 0x1555c <SS80_Command_State+0x2fe>
   1554a:	87 01       	movw	r16, r14
   1554c:	0e 5f       	subi	r16, 0xFE	; 254
   1554e:	1f 4f       	sbci	r17, 0xFF	; 255
   15550:	85 ff       	sbrs	r24, 5
   15552:	bc c0       	rjmp	.+376    	; 0x156cc <SS80_Command_State+0x46e>
   15554:	29 89       	ldd	r18, Y+17	; 0x11
   15556:	3a 89       	ldd	r19, Y+18	; 0x12
   15558:	4b 89       	ldd	r20, Y+19	; 0x13
   1555a:	0e c0       	rjmp	.+28     	; 0x15578 <SS80_Command_State+0x31a>
   1555c:	28 34       	cpi	r18, 0x48	; 72
   1555e:	31 05       	cpc	r19, r1
   15560:	99 f4       	brne	.+38     	; 0x15588 <SS80_Command_State+0x32a>
   15562:	87 01       	movw	r16, r14
   15564:	0e 5f       	subi	r16, 0xFE	; 254
   15566:	1f 4f       	sbci	r17, 0xFF	; 255
   15568:	80 73       	andi	r24, 0x30	; 48
   1556a:	99 27       	eor	r25, r25
   1556c:	89 2b       	or	r24, r25
   1556e:	09 f4       	brne	.+2      	; 0x15572 <SS80_Command_State+0x314>
   15570:	ad c0       	rjmp	.+346    	; 0x156cc <SS80_Command_State+0x46e>
   15572:	2e 85       	ldd	r18, Y+14	; 0x0e
   15574:	3f 85       	ldd	r19, Y+15	; 0x0f
   15576:	48 89       	ldd	r20, Y+16	; 0x10
   15578:	ed b7       	in	r30, 0x3d	; 61
   1557a:	fe b7       	in	r31, 0x3e	; 62
   1557c:	21 83       	std	Z+1, r18	; 0x01
   1557e:	32 83       	std	Z+2, r19	; 0x02
   15580:	43 83       	std	Z+3, r20	; 0x03
   15582:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15586:	a2 c0       	rjmp	.+324    	; 0x156cc <SS80_Command_State+0x46e>
   15588:	24 30       	cpi	r18, 0x04	; 4
   1558a:	31 05       	cpc	r19, r1
   1558c:	41 f4       	brne	.+16     	; 0x1559e <SS80_Command_State+0x340>
   1558e:	80 73       	andi	r24, 0x30	; 48
   15590:	99 27       	eor	r25, r25
   15592:	89 2b       	or	r24, r25
   15594:	09 f4       	brne	.+2      	; 0x15598 <SS80_Command_State+0x33a>
   15596:	9c c0       	rjmp	.+312    	; 0x156d0 <SS80_Command_State+0x472>
   15598:	87 ec       	ldi	r24, 0xC7	; 199
   1559a:	95 e2       	ldi	r25, 0x25	; 37
   1559c:	45 cf       	rjmp	.-374    	; 0x15428 <SS80_Command_State+0x1ca>
   1559e:	2e 30       	cpi	r18, 0x0E	; 14
   155a0:	31 05       	cpc	r19, r1
   155a2:	29 f4       	brne	.+10     	; 0x155ae <SS80_Command_State+0x350>
   155a4:	85 ff       	sbrs	r24, 5
   155a6:	94 c0       	rjmp	.+296    	; 0x156d0 <SS80_Command_State+0x472>
   155a8:	81 eb       	ldi	r24, 0xB1	; 177
   155aa:	95 e2       	ldi	r25, 0x25	; 37
   155ac:	3d cf       	rjmp	.-390    	; 0x15428 <SS80_Command_State+0x1ca>
   155ae:	2f 30       	cpi	r18, 0x0F	; 15
   155b0:	31 05       	cpc	r19, r1
   155b2:	29 f4       	brne	.+10     	; 0x155be <SS80_Command_State+0x360>
   155b4:	85 ff       	sbrs	r24, 5
   155b6:	8c c0       	rjmp	.+280    	; 0x156d0 <SS80_Command_State+0x472>
   155b8:	84 e9       	ldi	r24, 0x94	; 148
   155ba:	95 e2       	ldi	r25, 0x25	; 37
   155bc:	35 cf       	rjmp	.-406    	; 0x15428 <SS80_Command_State+0x1ca>
   155be:	21 33       	cpi	r18, 0x31	; 49
   155c0:	31 05       	cpc	r19, r1
   155c2:	59 f4       	brne	.+22     	; 0x155da <SS80_Command_State+0x37c>
   155c4:	87 01       	movw	r16, r14
   155c6:	0d 5f       	subi	r16, 0xFD	; 253
   155c8:	1f 4f       	sbci	r17, 0xFF	; 255
   155ca:	80 73       	andi	r24, 0x30	; 48
   155cc:	99 27       	eor	r25, r25
   155ce:	89 2b       	or	r24, r25
   155d0:	09 f4       	brne	.+2      	; 0x155d4 <SS80_Command_State+0x376>
   155d2:	7e c0       	rjmp	.+252    	; 0x156d0 <SS80_Command_State+0x472>
   155d4:	88 e7       	ldi	r24, 0x78	; 120
   155d6:	95 e2       	ldi	r25, 0x25	; 37
   155d8:	27 cf       	rjmp	.-434    	; 0x15428 <SS80_Command_State+0x1ca>
   155da:	25 33       	cpi	r18, 0x35	; 53
   155dc:	31 05       	cpc	r19, r1
   155de:	69 f4       	brne	.+26     	; 0x155fa <SS80_Command_State+0x39c>
   155e0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   155e4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   155e8:	24 e0       	ldi	r18, 0x04	; 4
   155ea:	30 e0       	ldi	r19, 0x00	; 0
   155ec:	31 83       	std	Z+1, r19	; 0x01
   155ee:	20 83       	st	Z, r18
   155f0:	85 ff       	sbrs	r24, 5
   155f2:	6e c0       	rjmp	.+220    	; 0x156d0 <SS80_Command_State+0x472>
   155f4:	87 e6       	ldi	r24, 0x67	; 103
   155f6:	95 e2       	ldi	r25, 0x25	; 37
   155f8:	17 cf       	rjmp	.-466    	; 0x15428 <SS80_Command_State+0x1ca>
   155fa:	27 33       	cpi	r18, 0x37	; 55
   155fc:	31 05       	cpc	r19, r1
   155fe:	59 f4       	brne	.+22     	; 0x15616 <SS80_Command_State+0x3b8>
   15600:	87 01       	movw	r16, r14
   15602:	0d 5f       	subi	r16, 0xFD	; 253
   15604:	1f 4f       	sbci	r17, 0xFF	; 255
   15606:	80 73       	andi	r24, 0x30	; 48
   15608:	99 27       	eor	r25, r25
   1560a:	89 2b       	or	r24, r25
   1560c:	09 f4       	brne	.+2      	; 0x15610 <SS80_Command_State+0x3b2>
   1560e:	60 c0       	rjmp	.+192    	; 0x156d0 <SS80_Command_State+0x472>
   15610:	89 e4       	ldi	r24, 0x49	; 73
   15612:	95 e2       	ldi	r25, 0x25	; 37
   15614:	09 cf       	rjmp	.-494    	; 0x15428 <SS80_Command_State+0x1ca>
   15616:	2e 33       	cpi	r18, 0x3E	; 62
   15618:	31 05       	cpc	r19, r1
   1561a:	c1 f4       	brne	.+48     	; 0x1564c <SS80_Command_State+0x3ee>
   1561c:	80 73       	andi	r24, 0x30	; 48
   1561e:	99 27       	eor	r25, r25
   15620:	89 2b       	or	r24, r25
   15622:	81 f0       	breq	.+32     	; 0x15644 <SS80_Command_State+0x3e6>
   15624:	8a e2       	ldi	r24, 0x2A	; 42
   15626:	95 e2       	ldi	r25, 0x25	; 37
   15628:	a0 e0       	ldi	r26, 0x00	; 0
   1562a:	ed b7       	in	r30, 0x3d	; 61
   1562c:	fe b7       	in	r31, 0x3e	; 62
   1562e:	81 83       	std	Z+1, r24	; 0x01
   15630:	92 83       	std	Z+2, r25	; 0x02
   15632:	a3 83       	std	Z+3, r26	; 0x03
   15634:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15638:	6d e6       	ldi	r22, 0x6D	; 109
   1563a:	70 e1       	ldi	r23, 0x10	; 16
   1563c:	c8 01       	movw	r24, r16
   1563e:	86 51       	subi	r24, 0x16	; 22
   15640:	93 4e       	sbci	r25, 0xE3	; 227
   15642:	69 dc       	rcall	.-1838   	; 0x14f16 <SS80_display_extended_status>
   15644:	87 01       	movw	r16, r14
   15646:	07 5f       	subi	r16, 0xF7	; 247
   15648:	1f 4f       	sbci	r17, 0xFF	; 255
   1564a:	42 c0       	rjmp	.+132    	; 0x156d0 <SS80_Command_State+0x472>
   1564c:	2c 34       	cpi	r18, 0x4C	; 76
   1564e:	31 05       	cpc	r19, r1
   15650:	39 f4       	brne	.+14     	; 0x15660 <SS80_Command_State+0x402>
   15652:	80 73       	andi	r24, 0x30	; 48
   15654:	99 27       	eor	r25, r25
   15656:	89 2b       	or	r24, r25
   15658:	d9 f1       	breq	.+118    	; 0x156d0 <SS80_Command_State+0x472>
   1565a:	8f e0       	ldi	r24, 0x0F	; 15
   1565c:	95 e2       	ldi	r25, 0x25	; 37
   1565e:	e4 ce       	rjmp	.-568    	; 0x15428 <SS80_Command_State+0x1ca>
   15660:	2d 34       	cpi	r18, 0x4D	; 77
   15662:	31 05       	cpc	r19, r1
   15664:	39 f4       	brne	.+14     	; 0x15674 <SS80_Command_State+0x416>
   15666:	80 73       	andi	r24, 0x30	; 48
   15668:	99 27       	eor	r25, r25
   1566a:	89 2b       	or	r24, r25
   1566c:	89 f1       	breq	.+98     	; 0x156d0 <SS80_Command_State+0x472>
   1566e:	86 ef       	ldi	r24, 0xF6	; 246
   15670:	94 e2       	ldi	r25, 0x24	; 36
   15672:	da ce       	rjmp	.-588    	; 0x15428 <SS80_Command_State+0x1ca>
   15674:	2d 30       	cpi	r18, 0x0D	; 13
   15676:	31 05       	cpc	r19, r1
   15678:	69 f4       	brne	.+26     	; 0x15694 <SS80_Command_State+0x436>
   1567a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1567e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15682:	23 e0       	ldi	r18, 0x03	; 3
   15684:	30 e0       	ldi	r19, 0x00	; 0
   15686:	31 83       	std	Z+1, r19	; 0x01
   15688:	20 83       	st	Z, r18
   1568a:	85 ff       	sbrs	r24, 5
   1568c:	21 c0       	rjmp	.+66     	; 0x156d0 <SS80_Command_State+0x472>
   1568e:	8f ed       	ldi	r24, 0xDF	; 223
   15690:	94 e2       	ldi	r25, 0x24	; 36
   15692:	ca ce       	rjmp	.-620    	; 0x15428 <SS80_Command_State+0x1ca>
   15694:	23 33       	cpi	r18, 0x33	; 51
   15696:	31 05       	cpc	r19, r1
   15698:	51 f4       	brne	.+20     	; 0x156ae <SS80_Command_State+0x450>
   1569a:	87 01       	movw	r16, r14
   1569c:	0c 5f       	subi	r16, 0xFC	; 252
   1569e:	1f 4f       	sbci	r17, 0xFF	; 255
   156a0:	80 73       	andi	r24, 0x30	; 48
   156a2:	99 27       	eor	r25, r25
   156a4:	89 2b       	or	r24, r25
   156a6:	a1 f0       	breq	.+40     	; 0x156d0 <SS80_Command_State+0x472>
   156a8:	8c eb       	ldi	r24, 0xBC	; 188
   156aa:	94 e2       	ldi	r25, 0x24	; 36
   156ac:	bd ce       	rjmp	.-646    	; 0x15428 <SS80_Command_State+0x1ca>
   156ae:	80 ff       	sbrs	r24, 0
   156b0:	28 c0       	rjmp	.+80     	; 0x15702 <SS80_Command_State+0x4a4>
   156b2:	ed b7       	in	r30, 0x3d	; 61
   156b4:	fe b7       	in	r31, 0x3e	; 62
   156b6:	35 83       	std	Z+5, r19	; 0x05
   156b8:	24 83       	std	Z+4, r18	; 0x04
   156ba:	8c e9       	ldi	r24, 0x9C	; 156
   156bc:	94 e2       	ldi	r25, 0x24	; 36
   156be:	a0 e0       	ldi	r26, 0x00	; 0
   156c0:	81 83       	std	Z+1, r24	; 0x01
   156c2:	92 83       	std	Z+2, r25	; 0x02
   156c4:	a3 83       	std	Z+3, r26	; 0x03
   156c6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   156ca:	02 c0       	rjmp	.+4      	; 0x156d0 <SS80_Command_State+0x472>
   156cc:	78 01       	movw	r14, r16
   156ce:	43 ce       	rjmp	.-890    	; 0x15356 <SS80_Command_State+0xf8>
   156d0:	8a 85       	ldd	r24, Y+10	; 0x0a
   156d2:	9b 85       	ldd	r25, Y+11	; 0x0b
   156d4:	08 17       	cp	r16, r24
   156d6:	19 07       	cpc	r17, r25
   156d8:	a1 f0       	breq	.+40     	; 0x15702 <SS80_Command_State+0x4a4>
   156da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156de:	80 ff       	sbrs	r24, 0
   156e0:	10 c0       	rjmp	.+32     	; 0x15702 <SS80_Command_State+0x4a4>
   156e2:	2a 85       	ldd	r18, Y+10	; 0x0a
   156e4:	3b 85       	ldd	r19, Y+11	; 0x0b
   156e6:	ed b7       	in	r30, 0x3d	; 61
   156e8:	fe b7       	in	r31, 0x3e	; 62
   156ea:	37 83       	std	Z+7, r19	; 0x07
   156ec:	26 83       	std	Z+6, r18	; 0x06
   156ee:	15 83       	std	Z+5, r17	; 0x05
   156f0:	04 83       	std	Z+4, r16	; 0x04
   156f2:	84 e6       	ldi	r24, 0x64	; 100
   156f4:	94 e2       	ldi	r25, 0x24	; 36
   156f6:	a0 e0       	ldi	r26, 0x00	; 0
   156f8:	81 83       	std	Z+1, r24	; 0x01
   156fa:	92 83       	std	Z+2, r25	; 0x02
   156fc:	a3 83       	std	Z+3, r26	; 0x03
   156fe:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15702:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15706:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1570a:	81 81       	ldd	r24, Z+1	; 0x01
   1570c:	90 e0       	ldi	r25, 0x00	; 0
   1570e:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   15712:	88 85       	ldd	r24, Y+8	; 0x08
   15714:	99 85       	ldd	r25, Y+9	; 0x09
   15716:	88 27       	eor	r24, r24
   15718:	90 7d       	andi	r25, 0xD0	; 208
   1571a:	02 c0       	rjmp	.+4      	; 0x15720 <SS80_Command_State+0x4c2>
   1571c:	80 e0       	ldi	r24, 0x00	; 0
   1571e:	90 e0       	ldi	r25, 0x00	; 0
   15720:	66 96       	adiw	r28, 0x16	; 22
   15722:	0f b6       	in	r0, 0x3f	; 63
   15724:	f8 94       	cli
   15726:	de bf       	out	0x3e, r29	; 62
   15728:	0f be       	out	0x3f, r0	; 63
   1572a:	cd bf       	out	0x3d, r28	; 61
   1572c:	df 91       	pop	r29
   1572e:	cf 91       	pop	r28
   15730:	1f 91       	pop	r17
   15732:	0f 91       	pop	r16
   15734:	ff 90       	pop	r15
   15736:	ef 90       	pop	r14
   15738:	cf 90       	pop	r12
   1573a:	bf 90       	pop	r11
   1573c:	af 90       	pop	r10
   1573e:	8f 90       	pop	r8
   15740:	7f 90       	pop	r7
   15742:	6f 90       	pop	r6
   15744:	4f 90       	pop	r4
   15746:	3f 90       	pop	r3
   15748:	2f 90       	pop	r2
   1574a:	08 95       	ret

0001574c <SS80_cmd_seek>:
   1574c:	a7 e0       	ldi	r26, 0x07	; 7
   1574e:	b0 e0       	ldi	r27, 0x00	; 0
   15750:	ec ea       	ldi	r30, 0xAC	; 172
   15752:	fb ea       	ldi	r31, 0xAB	; 171
   15754:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__prologue_saves__+0x4>
   15758:	c0 91 66 19 	lds	r28, 0x1966	; 0x801966 <SS80s>
   1575c:	d0 91 67 19 	lds	r29, 0x1967	; 0x801967 <SS80s+0x1>
   15760:	8f 80       	ldd	r8, Y+7	; 0x07
   15762:	98 84       	ldd	r9, Y+8	; 0x08
   15764:	a9 84       	ldd	r10, Y+9	; 0x09
   15766:	ba 84       	ldd	r11, Y+10	; 0x0a
   15768:	00 91 68 19 	lds	r16, 0x1968	; 0x801968 <SS80p>
   1576c:	10 91 69 19 	lds	r17, 0x1969	; 0x801969 <SS80p+0x1>
   15770:	f8 01       	movw	r30, r16
   15772:	c2 88       	ldd	r12, Z+18	; 0x12
   15774:	d3 88       	ldd	r13, Z+19	; 0x13
   15776:	e1 2c       	mov	r14, r1
   15778:	f1 2c       	mov	r15, r1
   1577a:	6b 85       	ldd	r22, Y+11	; 0x0b
   1577c:	7c 85       	ldd	r23, Y+12	; 0x0c
   1577e:	8d 85       	ldd	r24, Y+13	; 0x0d
   15780:	9e 85       	ldd	r25, Y+14	; 0x0e
   15782:	a7 01       	movw	r20, r14
   15784:	96 01       	movw	r18, r12
   15786:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
   1578a:	da 01       	movw	r26, r20
   1578c:	c9 01       	movw	r24, r18
   1578e:	88 0d       	add	r24, r8
   15790:	99 1d       	adc	r25, r9
   15792:	aa 1d       	adc	r26, r10
   15794:	bb 1d       	adc	r27, r11
   15796:	f8 01       	movw	r30, r16
   15798:	40 a4       	ldd	r4, Z+40	; 0x28
   1579a:	51 a4       	ldd	r5, Z+41	; 0x29
   1579c:	62 a4       	ldd	r6, Z+42	; 0x2a
   1579e:	73 a4       	ldd	r7, Z+43	; 0x2b
   157a0:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   157a4:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   157a8:	48 16       	cp	r4, r24
   157aa:	59 06       	cpc	r5, r25
   157ac:	6a 06       	cpc	r6, r26
   157ae:	7b 06       	cpc	r7, r27
   157b0:	f0 f4       	brcc	.+60     	; 0x157ee <SS80_cmd_seek+0xa2>
   157b2:	81 e0       	ldi	r24, 0x01	; 1
   157b4:	8a 83       	std	Y+2, r24	; 0x02
   157b6:	8b 81       	ldd	r24, Y+3	; 0x03
   157b8:	9c 81       	ldd	r25, Y+4	; 0x04
   157ba:	84 60       	ori	r24, 0x04	; 4
   157bc:	9c 83       	std	Y+4, r25	; 0x04
   157be:	8b 83       	std	Y+3, r24	; 0x03
   157c0:	40 ff       	sbrs	r20, 0
   157c2:	31 c0       	rjmp	.+98     	; 0x15826 <SS80_cmd_seek+0xda>
   157c4:	a2 89       	ldd	r26, Z+18	; 0x12
   157c6:	b3 89       	ldd	r27, Z+19	; 0x13
   157c8:	a5 01       	movw	r20, r10
   157ca:	94 01       	movw	r18, r8
   157cc:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
   157d0:	ed b7       	in	r30, 0x3d	; 61
   157d2:	fe b7       	in	r31, 0x3e	; 62
   157d4:	64 83       	std	Z+4, r22	; 0x04
   157d6:	75 83       	std	Z+5, r23	; 0x05
   157d8:	86 83       	std	Z+6, r24	; 0x06
   157da:	97 83       	std	Z+7, r25	; 0x07
   157dc:	81 e2       	ldi	r24, 0x21	; 33
   157de:	93 e2       	ldi	r25, 0x23	; 35
   157e0:	a0 e0       	ldi	r26, 0x00	; 0
   157e2:	81 83       	std	Z+1, r24	; 0x01
   157e4:	92 83       	std	Z+2, r25	; 0x02
   157e6:	a3 83       	std	Z+3, r26	; 0x03
   157e8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   157ec:	1c c0       	rjmp	.+56     	; 0x15826 <SS80_cmd_seek+0xda>
   157ee:	ca 01       	movw	r24, r20
   157f0:	80 72       	andi	r24, 0x20	; 32
   157f2:	99 27       	eor	r25, r25
   157f4:	45 ff       	sbrs	r20, 5
   157f6:	19 c0       	rjmp	.+50     	; 0x1582a <SS80_cmd_seek+0xde>
   157f8:	a5 01       	movw	r20, r10
   157fa:	94 01       	movw	r18, r8
   157fc:	c7 01       	movw	r24, r14
   157fe:	b6 01       	movw	r22, r12
   15800:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__mulsi3>
   15804:	ed b7       	in	r30, 0x3d	; 61
   15806:	fe b7       	in	r31, 0x3e	; 62
   15808:	64 83       	std	Z+4, r22	; 0x04
   1580a:	75 83       	std	Z+5, r23	; 0x05
   1580c:	86 83       	std	Z+6, r24	; 0x06
   1580e:	97 83       	std	Z+7, r25	; 0x07
   15810:	8d e0       	ldi	r24, 0x0D	; 13
   15812:	93 e2       	ldi	r25, 0x23	; 35
   15814:	a0 e0       	ldi	r26, 0x00	; 0
   15816:	81 83       	std	Z+1, r24	; 0x01
   15818:	92 83       	std	Z+2, r25	; 0x02
   1581a:	a3 83       	std	Z+3, r26	; 0x03
   1581c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15820:	80 e0       	ldi	r24, 0x00	; 0
   15822:	90 e0       	ldi	r25, 0x00	; 0
   15824:	02 c0       	rjmp	.+4      	; 0x1582a <SS80_cmd_seek+0xde>
   15826:	81 e0       	ldi	r24, 0x01	; 1
   15828:	90 e0       	ldi	r25, 0x00	; 0
   1582a:	cd b7       	in	r28, 0x3d	; 61
   1582c:	de b7       	in	r29, 0x3e	; 62
   1582e:	27 96       	adiw	r28, 0x07	; 7
   15830:	e0 e1       	ldi	r30, 0x10	; 16
   15832:	0c 94 34 e7 	jmp	0x1ce68	; 0x1ce68 <__epilogue_restores__+0x4>

00015836 <SS80_locate_and_write>:
   15836:	a3 e1       	ldi	r26, 0x13	; 19
   15838:	b0 e0       	ldi	r27, 0x00	; 0
   1583a:	e1 e2       	ldi	r30, 0x21	; 33
   1583c:	fc ea       	ldi	r31, 0xAC	; 172
   1583e:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   15842:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15846:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   1584a:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   1584e:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   15852:	fc 01       	movw	r30, r24
   15854:	a2 89       	ldd	r26, Z+18	; 0x12
   15856:	b3 89       	ldd	r27, Z+19	; 0x13
   15858:	f8 01       	movw	r30, r16
   1585a:	27 81       	ldd	r18, Z+7	; 0x07
   1585c:	30 85       	ldd	r19, Z+8	; 0x08
   1585e:	41 85       	ldd	r20, Z+9	; 0x09
   15860:	52 85       	ldd	r21, Z+10	; 0x0a
   15862:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
   15866:	4b 01       	movw	r8, r22
   15868:	5c 01       	movw	r10, r24
   1586a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1586e:	85 ff       	sbrs	r24, 5
   15870:	16 c0       	rjmp	.+44     	; 0x1589e <SS80_locate_and_write+0x68>
   15872:	83 85       	ldd	r24, Z+11	; 0x0b
   15874:	94 85       	ldd	r25, Z+12	; 0x0c
   15876:	a5 85       	ldd	r26, Z+13	; 0x0d
   15878:	b6 85       	ldd	r27, Z+14	; 0x0e
   1587a:	ed b7       	in	r30, 0x3d	; 61
   1587c:	fe b7       	in	r31, 0x3e	; 62
   1587e:	80 87       	std	Z+8, r24	; 0x08
   15880:	91 87       	std	Z+9, r25	; 0x09
   15882:	a2 87       	std	Z+10, r26	; 0x0a
   15884:	b3 87       	std	Z+11, r27	; 0x0b
   15886:	84 82       	std	Z+4, r8	; 0x04
   15888:	95 82       	std	Z+5, r9	; 0x05
   1588a:	a6 82       	std	Z+6, r10	; 0x06
   1588c:	b7 82       	std	Z+7, r11	; 0x07
   1588e:	84 ea       	ldi	r24, 0xA4	; 164
   15890:	98 e2       	ldi	r25, 0x28	; 40
   15892:	a0 e0       	ldi	r26, 0x00	; 0
   15894:	81 83       	std	Z+1, r24	; 0x01
   15896:	92 83       	std	Z+2, r25	; 0x02
   15898:	a3 83       	std	Z+3, r26	; 0x03
   1589a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1589e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   158a2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   158a6:	12 82       	std	Z+2, r1	; 0x02
   158a8:	54 98       	cbi	0x0a, 4	; 10
   158aa:	4c 99       	sbic	0x09, 4	; 9
   158ac:	03 c0       	rjmp	.+6      	; 0x158b4 <SS80_locate_and_write+0x7e>
   158ae:	80 e0       	ldi	r24, 0x00	; 0
   158b0:	90 e1       	ldi	r25, 0x10	; 16
   158b2:	4f c1       	rjmp	.+670    	; 0x15b52 <SS80_locate_and_write+0x31c>
   158b4:	4b df       	rcall	.-362    	; 0x1574c <SS80_cmd_seek>
   158b6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   158ba:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   158be:	89 2b       	or	r24, r25
   158c0:	41 f0       	breq	.+16     	; 0x158d2 <SS80_locate_and_write+0x9c>
   158c2:	83 81       	ldd	r24, Z+3	; 0x03
   158c4:	94 81       	ldd	r25, Z+4	; 0x04
   158c6:	82 60       	ori	r24, 0x02	; 2
   158c8:	94 83       	std	Z+4, r25	; 0x04
   158ca:	83 83       	std	Z+3, r24	; 0x03
   158cc:	01 e0       	ldi	r16, 0x01	; 1
   158ce:	10 e0       	ldi	r17, 0x00	; 0
   158d0:	02 c0       	rjmp	.+4      	; 0x158d6 <SS80_locate_and_write+0xa0>
   158d2:	00 e0       	ldi	r16, 0x00	; 0
   158d4:	10 e0       	ldi	r17, 0x00	; 0
   158d6:	23 84       	ldd	r2, Z+11	; 0x0b
   158d8:	34 84       	ldd	r3, Z+12	; 0x0c
   158da:	1d 86       	std	Y+13, r1	; 0x0d
   158dc:	1c 86       	std	Y+12, r1	; 0x0c
   158de:	41 2c       	mov	r4, r1
   158e0:	51 2c       	mov	r5, r1
   158e2:	32 01       	movw	r6, r4
   158e4:	87 e5       	ldi	r24, 0x57	; 87
   158e6:	98 e2       	ldi	r25, 0x28	; 40
   158e8:	9c 01       	movw	r18, r24
   158ea:	40 e0       	ldi	r20, 0x00	; 0
   158ec:	2e 87       	std	Y+14, r18	; 0x0e
   158ee:	3f 87       	std	Y+15, r19	; 0x0f
   158f0:	48 8b       	std	Y+16, r20	; 0x10
   158f2:	8d e7       	ldi	r24, 0x7D	; 125
   158f4:	98 e2       	ldi	r25, 0x28	; 40
   158f6:	9c 01       	movw	r18, r24
   158f8:	40 e0       	ldi	r20, 0x00	; 0
   158fa:	29 8b       	std	Y+17, r18	; 0x11
   158fc:	3a 8b       	std	Y+18, r19	; 0x12
   158fe:	4b 8b       	std	Y+19, r20	; 0x13
   15900:	12 14       	cp	r1, r2
   15902:	13 04       	cpc	r1, r3
   15904:	0c f0       	brlt	.+2      	; 0x15908 <SS80_locate_and_write+0xd2>
   15906:	f5 c0       	rjmp	.+490    	; 0x15af2 <SS80_locate_and_write+0x2bc>
   15908:	54 98       	cbi	0x0a, 4	; 10
   1590a:	4c 9b       	sbis	0x09, 4	; 9
   1590c:	d0 cf       	rjmp	.-96     	; 0x158ae <SS80_locate_and_write+0x78>
   1590e:	71 01       	movw	r14, r2
   15910:	31 e0       	ldi	r19, 0x01	; 1
   15912:	23 16       	cp	r2, r19
   15914:	33 06       	cpc	r3, r19
   15916:	1c f0       	brlt	.+6      	; 0x1591e <SS80_locate_and_write+0xe8>
   15918:	e1 2c       	mov	r14, r1
   1591a:	ff 24       	eor	r15, r15
   1591c:	f3 94       	inc	r15
   1591e:	ea ee       	ldi	r30, 0xEA	; 234
   15920:	fc e1       	ldi	r31, 0x1C	; 28
   15922:	20 e0       	ldi	r18, 0x00	; 0
   15924:	32 e0       	ldi	r19, 0x02	; 2
   15926:	11 92       	st	Z+, r1
   15928:	21 50       	subi	r18, 0x01	; 1
   1592a:	30 40       	sbci	r19, 0x00	; 0
   1592c:	e1 f7       	brne	.-8      	; 0x15926 <SS80_locate_and_write+0xf0>
   1592e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15932:	87 fd       	sbrc	r24, 7
   15934:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
   15938:	ae 01       	movw	r20, r28
   1593a:	44 5f       	subi	r20, 0xF4	; 244
   1593c:	5f 4f       	sbci	r21, 0xFF	; 255
   1593e:	b7 01       	movw	r22, r14
   15940:	8a ee       	ldi	r24, 0xEA	; 234
   15942:	9c e1       	ldi	r25, 0x1C	; 28
   15944:	0e 94 04 8b 	call	0x11608	; 0x11608 <gpib_read_str>
   15948:	6c 01       	movw	r12, r24
   1594a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1594e:	87 ff       	sbrs	r24, 7
   15950:	04 c0       	rjmp	.+8      	; 0x1595a <SS80_locate_and_write+0x124>
   15952:	89 e8       	ldi	r24, 0x89	; 137
   15954:	90 e1       	ldi	r25, 0x10	; 16
   15956:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
   1595a:	ce 14       	cp	r12, r14
   1595c:	df 04       	cpc	r13, r15
   1595e:	39 f1       	breq	.+78     	; 0x159ae <SS80_locate_and_write+0x178>
   15960:	8c 85       	ldd	r24, Y+12	; 0x0c
   15962:	9d 85       	ldd	r25, Y+13	; 0x0d
   15964:	9c 01       	movw	r18, r24
   15966:	22 27       	eor	r18, r18
   15968:	30 7d       	andi	r19, 0xD0	; 208
   1596a:	23 2b       	or	r18, r19
   1596c:	d1 f0       	breq	.+52     	; 0x159a2 <SS80_locate_and_write+0x16c>
   1596e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15972:	80 ff       	sbrs	r24, 0
   15974:	0a c0       	rjmp	.+20     	; 0x1598a <SS80_locate_and_write+0x154>
   15976:	81 e9       	ldi	r24, 0x91	; 145
   15978:	98 e2       	ldi	r25, 0x28	; 40
   1597a:	a0 e0       	ldi	r26, 0x00	; 0
   1597c:	ed b7       	in	r30, 0x3d	; 61
   1597e:	fe b7       	in	r31, 0x3e	; 62
   15980:	81 83       	std	Z+1, r24	; 0x01
   15982:	92 83       	std	Z+2, r25	; 0x02
   15984:	a3 83       	std	Z+3, r26	; 0x03
   15986:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1598a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1598e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15992:	83 81       	ldd	r24, Z+3	; 0x03
   15994:	94 81       	ldd	r25, Z+4	; 0x04
   15996:	82 60       	ori	r24, 0x02	; 2
   15998:	94 83       	std	Z+4, r25	; 0x04
   1599a:	83 83       	std	Z+3, r24	; 0x03
   1599c:	81 e0       	ldi	r24, 0x01	; 1
   1599e:	82 83       	std	Z+2, r24	; 0x02
   159a0:	99 c0       	rjmp	.+306    	; 0x15ad4 <SS80_locate_and_write+0x29e>
   159a2:	c1 14       	cp	r12, r1
   159a4:	d1 04       	cpc	r13, r1
   159a6:	09 f0       	breq	.+2      	; 0x159aa <SS80_locate_and_write+0x174>
   159a8:	d0 c0       	rjmp	.+416    	; 0x15b4a <SS80_locate_and_write+0x314>
   159aa:	90 fd       	sbrc	r25, 0
   159ac:	93 c0       	rjmp	.+294    	; 0x15ad4 <SS80_locate_and_write+0x29e>
   159ae:	01 15       	cp	r16, r1
   159b0:	11 05       	cpc	r17, r1
   159b2:	09 f0       	breq	.+2      	; 0x159b6 <SS80_locate_and_write+0x180>
   159b4:	84 c0       	rjmp	.+264    	; 0x15abe <SS80_locate_and_write+0x288>
   159b6:	c1 14       	cp	r12, r1
   159b8:	d1 04       	cpc	r13, r1
   159ba:	09 f4       	brne	.+2      	; 0x159be <SS80_locate_and_write+0x188>
   159bc:	82 c0       	rjmp	.+260    	; 0x15ac2 <SS80_locate_and_write+0x28c>
   159be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159c2:	86 fd       	sbrc	r24, 6
   159c4:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
   159c8:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   159cc:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   159d0:	f3 e0       	ldi	r31, 0x03	; 3
   159d2:	ef 0e       	add	r14, r31
   159d4:	f1 1c       	adc	r15, r1
   159d6:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   159da:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   159de:	86 01       	movw	r16, r12
   159e0:	2a ee       	ldi	r18, 0xEA	; 234
   159e2:	3c e1       	ldi	r19, 0x1C	; 28
   159e4:	b5 01       	movw	r22, r10
   159e6:	a4 01       	movw	r20, r8
   159e8:	82 81       	ldd	r24, Z+2	; 0x02
   159ea:	93 81       	ldd	r25, Z+3	; 0x03
   159ec:	0e 94 45 85 	call	0x10a8a	; 0x10a8a <dbf_open_write>
   159f0:	7c 01       	movw	r14, r24
   159f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159f6:	86 ff       	sbrs	r24, 6
   159f8:	04 c0       	rjmp	.+8      	; 0x15a02 <SS80_locate_and_write+0x1cc>
   159fa:	84 e9       	ldi	r24, 0x94	; 148
   159fc:	90 e1       	ldi	r25, 0x10	; 16
   159fe:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
   15a02:	ce 14       	cp	r12, r14
   15a04:	df 04       	cpc	r13, r15
   15a06:	39 f1       	breq	.+78     	; 0x15a56 <SS80_locate_and_write+0x220>
   15a08:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15a0c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15a10:	83 81       	ldd	r24, Z+3	; 0x03
   15a12:	94 81       	ldd	r25, Z+4	; 0x04
   15a14:	82 60       	ori	r24, 0x02	; 2
   15a16:	94 83       	std	Z+4, r25	; 0x04
   15a18:	83 83       	std	Z+3, r24	; 0x03
   15a1a:	0e 94 22 70 	call	0xe044	; 0xe044 <mmc_wp_status>
   15a1e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15a22:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15a26:	89 2b       	or	r24, r25
   15a28:	29 f0       	breq	.+10     	; 0x15a34 <SS80_locate_and_write+0x1fe>
   15a2a:	83 81       	ldd	r24, Z+3	; 0x03
   15a2c:	94 81       	ldd	r25, Z+4	; 0x04
   15a2e:	88 60       	ori	r24, 0x08	; 8
   15a30:	94 83       	std	Z+4, r25	; 0x04
   15a32:	83 83       	std	Z+3, r24	; 0x03
   15a34:	21 e0       	ldi	r18, 0x01	; 1
   15a36:	22 83       	std	Z+2, r18	; 0x02
   15a38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a3c:	80 ff       	sbrs	r24, 0
   15a3e:	27 c0       	rjmp	.+78     	; 0x15a8e <SS80_locate_and_write+0x258>
   15a40:	89 89       	ldd	r24, Y+17	; 0x11
   15a42:	9a 89       	ldd	r25, Y+18	; 0x12
   15a44:	ab 89       	ldd	r26, Y+19	; 0x13
   15a46:	ed b7       	in	r30, 0x3d	; 61
   15a48:	fe b7       	in	r31, 0x3e	; 62
   15a4a:	81 83       	std	Z+1, r24	; 0x01
   15a4c:	92 83       	std	Z+2, r25	; 0x02
   15a4e:	a3 83       	std	Z+3, r26	; 0x03
   15a50:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15a54:	1c c0       	rjmp	.+56     	; 0x15a8e <SS80_locate_and_write+0x258>
   15a56:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a5a:	85 ff       	sbrs	r24, 5
   15a5c:	0c c0       	rjmp	.+24     	; 0x15a76 <SS80_locate_and_write+0x240>
   15a5e:	ed b7       	in	r30, 0x3d	; 61
   15a60:	fe b7       	in	r31, 0x3e	; 62
   15a62:	d5 82       	std	Z+5, r13	; 0x05
   15a64:	c4 82       	std	Z+4, r12	; 0x04
   15a66:	2e 85       	ldd	r18, Y+14	; 0x0e
   15a68:	3f 85       	ldd	r19, Y+15	; 0x0f
   15a6a:	48 89       	ldd	r20, Y+16	; 0x10
   15a6c:	21 83       	std	Z+1, r18	; 0x01
   15a6e:	32 83       	std	Z+2, r19	; 0x02
   15a70:	43 83       	std	Z+3, r20	; 0x03
   15a72:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15a76:	c6 01       	movw	r24, r12
   15a78:	0d 2c       	mov	r0, r13
   15a7a:	00 0c       	add	r0, r0
   15a7c:	aa 0b       	sbc	r26, r26
   15a7e:	bb 0b       	sbc	r27, r27
   15a80:	88 0e       	add	r8, r24
   15a82:	99 1e       	adc	r9, r25
   15a84:	aa 1e       	adc	r10, r26
   15a86:	bb 1e       	adc	r11, r27
   15a88:	00 e0       	ldi	r16, 0x00	; 0
   15a8a:	10 e0       	ldi	r17, 0x00	; 0
   15a8c:	05 c0       	rjmp	.+10     	; 0x15a98 <SS80_locate_and_write+0x262>
   15a8e:	ec 14       	cp	r14, r12
   15a90:	fd 04       	cpc	r15, r13
   15a92:	64 f0       	brlt	.+24     	; 0x15aac <SS80_locate_and_write+0x276>
   15a94:	01 e0       	ldi	r16, 0x01	; 1
   15a96:	10 e0       	ldi	r17, 0x00	; 0
   15a98:	c7 01       	movw	r24, r14
   15a9a:	0f 2c       	mov	r0, r15
   15a9c:	00 0c       	add	r0, r0
   15a9e:	aa 0b       	sbc	r26, r26
   15aa0:	bb 0b       	sbc	r27, r27
   15aa2:	48 0e       	add	r4, r24
   15aa4:	59 1e       	adc	r5, r25
   15aa6:	6a 1e       	adc	r6, r26
   15aa8:	7b 1e       	adc	r7, r27
   15aaa:	0b c0       	rjmp	.+22     	; 0x15ac2 <SS80_locate_and_write+0x28c>
   15aac:	c6 01       	movw	r24, r12
   15aae:	0d 2c       	mov	r0, r13
   15ab0:	00 0c       	add	r0, r0
   15ab2:	aa 0b       	sbc	r26, r26
   15ab4:	bb 0b       	sbc	r27, r27
   15ab6:	48 0e       	add	r4, r24
   15ab8:	59 1e       	adc	r5, r25
   15aba:	6a 1e       	adc	r6, r26
   15abc:	7b 1e       	adc	r7, r27
   15abe:	01 e0       	ldi	r16, 0x01	; 1
   15ac0:	10 e0       	ldi	r17, 0x00	; 0
   15ac2:	2c 18       	sub	r2, r12
   15ac4:	3d 08       	sbc	r3, r13
   15ac6:	8c 85       	ldd	r24, Y+12	; 0x0c
   15ac8:	9d 85       	ldd	r25, Y+13	; 0x0d
   15aca:	90 ff       	sbrs	r25, 0
   15acc:	19 cf       	rjmp	.-462    	; 0x15900 <SS80_locate_and_write+0xca>
   15ace:	12 14       	cp	r1, r2
   15ad0:	13 04       	cpc	r1, r3
   15ad2:	7c f4       	brge	.+30     	; 0x15af2 <SS80_locate_and_write+0x2bc>
   15ad4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ad8:	80 ff       	sbrs	r24, 0
   15ada:	1d c0       	rjmp	.+58     	; 0x15b16 <SS80_locate_and_write+0x2e0>
   15adc:	8f e2       	ldi	r24, 0x2F	; 47
   15ade:	98 e2       	ldi	r25, 0x28	; 40
   15ae0:	a0 e0       	ldi	r26, 0x00	; 0
   15ae2:	ed b7       	in	r30, 0x3d	; 61
   15ae4:	fe b7       	in	r31, 0x3e	; 62
   15ae6:	81 83       	std	Z+1, r24	; 0x01
   15ae8:	92 83       	std	Z+2, r25	; 0x02
   15aea:	a3 83       	std	Z+3, r26	; 0x03
   15aec:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15af0:	12 c0       	rjmp	.+36     	; 0x15b16 <SS80_locate_and_write+0x2e0>
   15af2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15af6:	85 ff       	sbrs	r24, 5
   15af8:	0e c0       	rjmp	.+28     	; 0x15b16 <SS80_locate_and_write+0x2e0>
   15afa:	ed b7       	in	r30, 0x3d	; 61
   15afc:	fe b7       	in	r31, 0x3e	; 62
   15afe:	44 82       	std	Z+4, r4	; 0x04
   15b00:	55 82       	std	Z+5, r5	; 0x05
   15b02:	66 82       	std	Z+6, r6	; 0x06
   15b04:	77 82       	std	Z+7, r7	; 0x07
   15b06:	84 e0       	ldi	r24, 0x04	; 4
   15b08:	98 e2       	ldi	r25, 0x28	; 40
   15b0a:	a0 e0       	ldi	r26, 0x00	; 0
   15b0c:	81 83       	std	Z+1, r24	; 0x01
   15b0e:	92 83       	std	Z+2, r25	; 0x02
   15b10:	a3 83       	std	Z+3, r26	; 0x03
   15b12:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15b16:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15b1a:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   15b1e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15b22:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15b26:	22 89       	ldd	r18, Z+18	; 0x12
   15b28:	33 89       	ldd	r19, Z+19	; 0x13
   15b2a:	40 e0       	ldi	r20, 0x00	; 0
   15b2c:	50 e0       	ldi	r21, 0x00	; 0
   15b2e:	c5 01       	movw	r24, r10
   15b30:	b4 01       	movw	r22, r8
   15b32:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
   15b36:	f8 01       	movw	r30, r16
   15b38:	27 83       	std	Z+7, r18	; 0x07
   15b3a:	30 87       	std	Z+8, r19	; 0x08
   15b3c:	41 87       	std	Z+9, r20	; 0x09
   15b3e:	52 87       	std	Z+10, r21	; 0x0a
   15b40:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b42:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b44:	88 27       	eor	r24, r24
   15b46:	90 7d       	andi	r25, 0xD0	; 208
   15b48:	04 c0       	rjmp	.+8      	; 0x15b52 <SS80_locate_and_write+0x31c>
   15b4a:	01 2b       	or	r16, r17
   15b4c:	09 f4       	brne	.+2      	; 0x15b50 <SS80_locate_and_write+0x31a>
   15b4e:	37 cf       	rjmp	.-402    	; 0x159be <SS80_locate_and_write+0x188>
   15b50:	b6 cf       	rjmp	.-148    	; 0x15abe <SS80_locate_and_write+0x288>
   15b52:	63 96       	adiw	r28, 0x13	; 19
   15b54:	e2 e1       	ldi	r30, 0x12	; 18
   15b56:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

00015b5a <SS80_Report>:
   15b5a:	a8 e0       	ldi	r26, 0x08	; 8
   15b5c:	b0 e0       	ldi	r27, 0x00	; 0
   15b5e:	e3 eb       	ldi	r30, 0xB3	; 179
   15b60:	fd ea       	ldi	r31, 0xAD	; 173
   15b62:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   15b66:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b6a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b6e:	82 81       	ldd	r24, Z+2	; 0x02
   15b70:	88 87       	std	Y+8, r24	; 0x08
   15b72:	80 e0       	ldi	r24, 0x00	; 0
   15b74:	91 e0       	ldi	r25, 0x01	; 1
   15b76:	9f 83       	std	Y+7, r25	; 0x07
   15b78:	8e 83       	std	Y+6, r24	; 0x06
   15b7a:	ae 01       	movw	r20, r28
   15b7c:	4a 5f       	subi	r20, 0xFA	; 250
   15b7e:	5f 4f       	sbci	r21, 0xFF	; 255
   15b80:	61 e0       	ldi	r22, 0x01	; 1
   15b82:	70 e0       	ldi	r23, 0x00	; 0
   15b84:	ce 01       	movw	r24, r28
   15b86:	08 96       	adiw	r24, 0x08	; 8
   15b88:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   15b8c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15b90:	01 97       	sbiw	r24, 0x01	; 1
   15b92:	89 f0       	breq	.+34     	; 0x15bb6 <SS80_Report+0x5c>
   15b94:	20 ff       	sbrs	r18, 0
   15b96:	0a c0       	rjmp	.+20     	; 0x15bac <SS80_Report+0x52>
   15b98:	83 ef       	ldi	r24, 0xF3	; 243
   15b9a:	92 e2       	ldi	r25, 0x22	; 34
   15b9c:	a0 e0       	ldi	r26, 0x00	; 0
   15b9e:	ed b7       	in	r30, 0x3d	; 61
   15ba0:	fe b7       	in	r31, 0x3e	; 62
   15ba2:	81 83       	std	Z+1, r24	; 0x01
   15ba4:	92 83       	std	Z+2, r25	; 0x02
   15ba6:	a3 83       	std	Z+3, r26	; 0x03
   15ba8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15bac:	8e 81       	ldd	r24, Y+6	; 0x06
   15bae:	9f 81       	ldd	r25, Y+7	; 0x07
   15bb0:	88 27       	eor	r24, r24
   15bb2:	90 7d       	andi	r25, 0xD0	; 208
   15bb4:	1b c0       	rjmp	.+54     	; 0x15bec <SS80_Report+0x92>
   15bb6:	25 ff       	sbrs	r18, 5
   15bb8:	12 c0       	rjmp	.+36     	; 0x15bde <SS80_Report+0x84>
   15bba:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15bbe:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15bc2:	82 81       	ldd	r24, Z+2	; 0x02
   15bc4:	90 e0       	ldi	r25, 0x00	; 0
   15bc6:	ed b7       	in	r30, 0x3d	; 61
   15bc8:	fe b7       	in	r31, 0x3e	; 62
   15bca:	95 83       	std	Z+5, r25	; 0x05
   15bcc:	84 83       	std	Z+4, r24	; 0x04
   15bce:	80 ee       	ldi	r24, 0xE0	; 224
   15bd0:	92 e2       	ldi	r25, 0x22	; 34
   15bd2:	a0 e0       	ldi	r26, 0x00	; 0
   15bd4:	81 83       	std	Z+1, r24	; 0x01
   15bd6:	92 83       	std	Z+2, r25	; 0x02
   15bd8:	a3 83       	std	Z+3, r26	; 0x03
   15bda:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15bde:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15be2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15be6:	12 82       	std	Z+2, r1	; 0x02
   15be8:	80 e0       	ldi	r24, 0x00	; 0
   15bea:	90 e0       	ldi	r25, 0x00	; 0
   15bec:	28 96       	adiw	r28, 0x08	; 8
   15bee:	e2 e0       	ldi	r30, 0x02	; 2
   15bf0:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00015bf4 <Clear_Common>:
   15bf4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15bf8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15bfc:	25 81       	ldd	r18, Z+5	; 0x05
   15bfe:	30 e0       	ldi	r19, 0x00	; 0
   15c00:	28 17       	cp	r18, r24
   15c02:	39 07       	cpc	r19, r25
   15c04:	19 f0       	breq	.+6      	; 0x15c0c <Clear_Common+0x18>
   15c06:	0f 97       	sbiw	r24, 0x0f	; 15
   15c08:	99 f4       	brne	.+38     	; 0x15c30 <Clear_Common+0x3c>
   15c0a:	03 c0       	rjmp	.+6      	; 0x15c12 <Clear_Common+0x1e>
   15c0c:	2f 30       	cpi	r18, 0x0F	; 15
   15c0e:	31 05       	cpc	r19, r1
   15c10:	09 f4       	brne	.+2      	; 0x15c14 <Clear_Common+0x20>
   15c12:	15 82       	std	Z+5, r1	; 0x05
   15c14:	16 82       	std	Z+6, r1	; 0x06
   15c16:	17 82       	std	Z+7, r1	; 0x07
   15c18:	10 86       	std	Z+8, r1	; 0x08
   15c1a:	11 86       	std	Z+9, r1	; 0x09
   15c1c:	12 86       	std	Z+10, r1	; 0x0a
   15c1e:	13 86       	std	Z+11, r1	; 0x0b
   15c20:	14 86       	std	Z+12, r1	; 0x0c
   15c22:	15 86       	std	Z+13, r1	; 0x0d
   15c24:	16 86       	std	Z+14, r1	; 0x0e
   15c26:	11 82       	std	Z+1, r1	; 0x01
   15c28:	10 82       	st	Z, r1
   15c2a:	14 82       	std	Z+4, r1	; 0x04
   15c2c:	13 82       	std	Z+3, r1	; 0x03
   15c2e:	12 82       	std	Z+2, r1	; 0x02
   15c30:	08 95       	ret

00015c32 <SS80_init>:
   15c32:	cf 92       	push	r12
   15c34:	df 92       	push	r13
   15c36:	ef 92       	push	r14
   15c38:	0f 93       	push	r16
   15c3a:	1f 93       	push	r17
   15c3c:	cf 93       	push	r28
   15c3e:	df 93       	push	r29
   15c40:	00 d0       	rcall	.+0      	; 0x15c42 <SS80_init+0x10>
   15c42:	00 d0       	rcall	.+0      	; 0x15c44 <SS80_init+0x12>
   15c44:	1f 92       	push	r1
   15c46:	0d e6       	ldi	r16, 0x6D	; 109
   15c48:	1f e1       	ldi	r17, 0x1F	; 31
   15c4a:	cb e0       	ldi	r28, 0x0B	; 11
   15c4c:	d2 e0       	ldi	r29, 0x02	; 2
   15c4e:	8d ea       	ldi	r24, 0xAD	; 173
   15c50:	99 e2       	ldi	r25, 0x29	; 41
   15c52:	6c 01       	movw	r12, r24
   15c54:	e1 2c       	mov	r14, r1
   15c56:	f8 01       	movw	r30, r16
   15c58:	80 81       	ld	r24, Z
   15c5a:	83 30       	cpi	r24, 0x03	; 3
   15c5c:	29 f5       	brne	.+74     	; 0x15ca8 <SS80_init+0x76>
   15c5e:	8c 2f       	mov	r24, r28
   15c60:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   15c64:	88 23       	and	r24, r24
   15c66:	01 f1       	breq	.+64     	; 0x15ca8 <SS80_init+0x76>
   15c68:	8f e0       	ldi	r24, 0x0F	; 15
   15c6a:	90 e0       	ldi	r25, 0x00	; 0
   15c6c:	c3 df       	rcall	.-122    	; 0x15bf4 <Clear_Common>
   15c6e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15c72:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15c76:	d2 83       	std	Z+2, r29	; 0x02
   15c78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c7c:	85 ff       	sbrs	r24, 5
   15c7e:	0c c0       	rjmp	.+24     	; 0x15c98 <SS80_init+0x66>
   15c80:	f8 01       	movw	r30, r16
   15c82:	81 81       	ldd	r24, Z+1	; 0x01
   15c84:	90 e0       	ldi	r25, 0x00	; 0
   15c86:	ed b7       	in	r30, 0x3d	; 61
   15c88:	fe b7       	in	r31, 0x3e	; 62
   15c8a:	95 83       	std	Z+5, r25	; 0x05
   15c8c:	84 83       	std	Z+4, r24	; 0x04
   15c8e:	c1 82       	std	Z+1, r12	; 0x01
   15c90:	d2 82       	std	Z+2, r13	; 0x02
   15c92:	e3 82       	std	Z+3, r14	; 0x03
   15c94:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15c98:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c9c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15ca0:	81 81       	ldd	r24, Z+1	; 0x01
   15ca2:	90 e0       	ldi	r25, 0x00	; 0
   15ca4:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
   15ca8:	0b 50       	subi	r16, 0x0B	; 11
   15caa:	11 09       	sbc	r17, r1
   15cac:	c1 50       	subi	r28, 0x01	; 1
   15cae:	98 f6       	brcc	.-90     	; 0x15c56 <SS80_init+0x24>
   15cb0:	0f 90       	pop	r0
   15cb2:	0f 90       	pop	r0
   15cb4:	0f 90       	pop	r0
   15cb6:	0f 90       	pop	r0
   15cb8:	0f 90       	pop	r0
   15cba:	df 91       	pop	r29
   15cbc:	cf 91       	pop	r28
   15cbe:	1f 91       	pop	r17
   15cc0:	0f 91       	pop	r16
   15cc2:	ef 90       	pop	r14
   15cc4:	df 90       	pop	r13
   15cc6:	cf 90       	pop	r12
   15cc8:	08 95       	ret

00015cca <SS80_Channel_Independent_Clear>:
   15cca:	94 df       	rcall	.-216    	; 0x15bf4 <Clear_Common>
   15ccc:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15cd0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15cd4:	81 81       	ldd	r24, Z+1	; 0x01
   15cd6:	90 e0       	ldi	r25, 0x00	; 0
   15cd8:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   15cdc:	80 e0       	ldi	r24, 0x00	; 0
   15cde:	90 e0       	ldi	r25, 0x00	; 0
   15ce0:	08 95       	ret

00015ce2 <SS80_Universal_Device_Clear>:
   15ce2:	8f e0       	ldi	r24, 0x0F	; 15
   15ce4:	90 e0       	ldi	r25, 0x00	; 0
   15ce6:	86 df       	rcall	.-244    	; 0x15bf4 <Clear_Common>
   15ce8:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15cec:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15cf0:	81 81       	ldd	r24, Z+1	; 0x01
   15cf2:	90 e0       	ldi	r25, 0x00	; 0
   15cf4:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   15cf8:	80 e0       	ldi	r24, 0x00	; 0
   15cfa:	90 e0       	ldi	r25, 0x00	; 0
   15cfc:	08 95       	ret

00015cfe <SS80_Selected_Device_Clear>:
   15cfe:	cf 93       	push	r28
   15d00:	df 93       	push	r29
   15d02:	00 d0       	rcall	.+0      	; 0x15d04 <SS80_Selected_Device_Clear+0x6>
   15d04:	1f 92       	push	r1
   15d06:	ec 01       	movw	r28, r24
   15d08:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d0c:	85 ff       	sbrs	r24, 5
   15d0e:	0a c0       	rjmp	.+20     	; 0x15d24 <SS80_Selected_Device_Clear+0x26>
   15d10:	84 ed       	ldi	r24, 0xD4	; 212
   15d12:	92 e2       	ldi	r25, 0x22	; 34
   15d14:	a0 e0       	ldi	r26, 0x00	; 0
   15d16:	ed b7       	in	r30, 0x3d	; 61
   15d18:	fe b7       	in	r31, 0x3e	; 62
   15d1a:	81 83       	std	Z+1, r24	; 0x01
   15d1c:	92 83       	std	Z+2, r25	; 0x02
   15d1e:	a3 83       	std	Z+3, r26	; 0x03
   15d20:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15d24:	ce 01       	movw	r24, r28
   15d26:	66 df       	rcall	.-308    	; 0x15bf4 <Clear_Common>
   15d28:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15d2c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15d30:	81 81       	ldd	r24, Z+1	; 0x01
   15d32:	90 e0       	ldi	r25, 0x00	; 0
   15d34:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   15d38:	80 e0       	ldi	r24, 0x00	; 0
   15d3a:	90 e0       	ldi	r25, 0x00	; 0
   15d3c:	cd b7       	in	r28, 0x3d	; 61
   15d3e:	de b7       	in	r29, 0x3e	; 62
   15d40:	23 96       	adiw	r28, 0x03	; 3
   15d42:	e2 e0       	ldi	r30, 0x02	; 2
   15d44:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00015d48 <SS80_Amigo_Clear>:
   15d48:	a6 e0       	ldi	r26, 0x06	; 6
   15d4a:	b0 e0       	ldi	r27, 0x00	; 0
   15d4c:	ea ea       	ldi	r30, 0xAA	; 170
   15d4e:	fe ea       	ldi	r31, 0xAE	; 174
   15d50:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   15d54:	1d 82       	std	Y+5, r1	; 0x05
   15d56:	1c 82       	std	Y+4, r1	; 0x04
   15d58:	ae 01       	movw	r20, r28
   15d5a:	4c 5f       	subi	r20, 0xFC	; 252
   15d5c:	5f 4f       	sbci	r21, 0xFF	; 255
   15d5e:	61 e0       	ldi	r22, 0x01	; 1
   15d60:	70 e0       	ldi	r23, 0x00	; 0
   15d62:	ce 01       	movw	r24, r28
   15d64:	06 96       	adiw	r24, 0x06	; 6
   15d66:	0e 94 04 8b 	call	0x11608	; 0x11608 <gpib_read_str>
   15d6a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15d6e:	01 97       	sbiw	r24, 0x01	; 1
   15d70:	89 f0       	breq	.+34     	; 0x15d94 <SS80_Amigo_Clear+0x4c>
   15d72:	20 ff       	sbrs	r18, 0
   15d74:	0a c0       	rjmp	.+20     	; 0x15d8a <SS80_Amigo_Clear+0x42>
   15d76:	81 ec       	ldi	r24, 0xC1	; 193
   15d78:	92 e2       	ldi	r25, 0x22	; 34
   15d7a:	a0 e0       	ldi	r26, 0x00	; 0
   15d7c:	ed b7       	in	r30, 0x3d	; 61
   15d7e:	fe b7       	in	r31, 0x3e	; 62
   15d80:	81 83       	std	Z+1, r24	; 0x01
   15d82:	92 83       	std	Z+2, r25	; 0x02
   15d84:	a3 83       	std	Z+3, r26	; 0x03
   15d86:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15d8a:	8c 81       	ldd	r24, Y+4	; 0x04
   15d8c:	9d 81       	ldd	r25, Y+5	; 0x05
   15d8e:	88 27       	eor	r24, r24
   15d90:	90 7d       	andi	r25, 0xD0	; 208
   15d92:	19 c0       	rjmp	.+50     	; 0x15dc6 <SS80_Amigo_Clear+0x7e>
   15d94:	25 ff       	sbrs	r18, 5
   15d96:	0a c0       	rjmp	.+20     	; 0x15dac <SS80_Amigo_Clear+0x64>
   15d98:	82 eb       	ldi	r24, 0xB2	; 178
   15d9a:	92 e2       	ldi	r25, 0x22	; 34
   15d9c:	a0 e0       	ldi	r26, 0x00	; 0
   15d9e:	ed b7       	in	r30, 0x3d	; 61
   15da0:	fe b7       	in	r31, 0x3e	; 62
   15da2:	81 83       	std	Z+1, r24	; 0x01
   15da4:	92 83       	std	Z+2, r25	; 0x02
   15da6:	a3 83       	std	Z+3, r26	; 0x03
   15da8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15dac:	8f e0       	ldi	r24, 0x0F	; 15
   15dae:	90 e0       	ldi	r25, 0x00	; 0
   15db0:	21 df       	rcall	.-446    	; 0x15bf4 <Clear_Common>
   15db2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15db6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15dba:	81 81       	ldd	r24, Z+1	; 0x01
   15dbc:	90 e0       	ldi	r25, 0x00	; 0
   15dbe:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   15dc2:	80 e0       	ldi	r24, 0x00	; 0
   15dc4:	90 e0       	ldi	r25, 0x00	; 0
   15dc6:	26 96       	adiw	r28, 0x06	; 6
   15dc8:	e2 e0       	ldi	r30, 0x02	; 2
   15dca:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00015dce <SS80_Cancel>:
   15dce:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15dd2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15dd6:	11 82       	std	Z+1, r1	; 0x01
   15dd8:	10 82       	st	Z, r1
   15dda:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15dde:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15de2:	81 81       	ldd	r24, Z+1	; 0x01
   15de4:	90 e0       	ldi	r25, 0x00	; 0
   15de6:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   15dea:	80 e0       	ldi	r24, 0x00	; 0
   15dec:	90 e0       	ldi	r25, 0x00	; 0
   15dee:	08 95       	ret

00015df0 <SS80_Transparent_State>:
   15df0:	a9 e0       	ldi	r26, 0x09	; 9
   15df2:	b0 e0       	ldi	r27, 0x00	; 0
   15df4:	ee ef       	ldi	r30, 0xFE	; 254
   15df6:	fe ea       	ldi	r31, 0xAE	; 174
   15df8:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
   15dfc:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15e00:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15e04:	81 81       	ldd	r24, Z+1	; 0x01
   15e06:	90 e0       	ldi	r25, 0x00	; 0
   15e08:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
   15e0c:	80 e0       	ldi	r24, 0x00	; 0
   15e0e:	91 e0       	ldi	r25, 0x01	; 1
   15e10:	99 87       	std	Y+9, r25	; 0x09
   15e12:	88 87       	std	Y+8, r24	; 0x08
   15e14:	ae 01       	movw	r20, r28
   15e16:	48 5f       	subi	r20, 0xF8	; 248
   15e18:	5f 4f       	sbci	r21, 0xFF	; 255
   15e1a:	60 e0       	ldi	r22, 0x00	; 0
   15e1c:	72 e0       	ldi	r23, 0x02	; 2
   15e1e:	8a ee       	ldi	r24, 0xEA	; 234
   15e20:	9c e1       	ldi	r25, 0x1C	; 28
   15e22:	0e 94 04 8b 	call	0x11608	; 0x11608 <gpib_read_str>
   15e26:	7c 01       	movw	r14, r24
   15e28:	88 85       	ldd	r24, Y+8	; 0x08
   15e2a:	99 85       	ldd	r25, Y+9	; 0x09
   15e2c:	9c 01       	movw	r18, r24
   15e2e:	22 27       	eor	r18, r18
   15e30:	30 7d       	andi	r19, 0xD0	; 208
   15e32:	23 2b       	or	r18, r19
   15e34:	79 f0       	breq	.+30     	; 0x15e54 <SS80_Transparent_State+0x64>
   15e36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e3a:	80 ff       	sbrs	r24, 0
   15e3c:	da c0       	rjmp	.+436    	; 0x15ff2 <SS80_Transparent_State+0x202>
   15e3e:	81 e5       	ldi	r24, 0x51	; 81
   15e40:	94 e2       	ldi	r25, 0x24	; 36
   15e42:	a0 e0       	ldi	r26, 0x00	; 0
   15e44:	ed b7       	in	r30, 0x3d	; 61
   15e46:	fe b7       	in	r31, 0x3e	; 62
   15e48:	81 83       	std	Z+1, r24	; 0x01
   15e4a:	92 83       	std	Z+2, r25	; 0x02
   15e4c:	a3 83       	std	Z+3, r26	; 0x03
   15e4e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15e52:	cf c0       	rjmp	.+414    	; 0x15ff2 <SS80_Transparent_State+0x202>
   15e54:	e1 14       	cp	r14, r1
   15e56:	f1 04       	cpc	r15, r1
   15e58:	09 f4       	brne	.+2      	; 0x15e5c <SS80_Transparent_State+0x6c>
   15e5a:	d0 c0       	rjmp	.+416    	; 0x15ffc <SS80_Transparent_State+0x20c>
   15e5c:	90 fd       	sbrc	r25, 0
   15e5e:	0e c0       	rjmp	.+28     	; 0x15e7c <SS80_Transparent_State+0x8c>
   15e60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e64:	80 ff       	sbrs	r24, 0
   15e66:	0a c0       	rjmp	.+20     	; 0x15e7c <SS80_Transparent_State+0x8c>
   15e68:	88 e3       	ldi	r24, 0x38	; 56
   15e6a:	94 e2       	ldi	r25, 0x24	; 36
   15e6c:	a0 e0       	ldi	r26, 0x00	; 0
   15e6e:	ed b7       	in	r30, 0x3d	; 61
   15e70:	fe b7       	in	r31, 0x3e	; 62
   15e72:	81 83       	std	Z+1, r24	; 0x01
   15e74:	92 83       	std	Z+2, r25	; 0x02
   15e76:	a3 83       	std	Z+3, r26	; 0x03
   15e78:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15e7c:	8a ee       	ldi	r24, 0xEA	; 234
   15e7e:	a8 2e       	mov	r10, r24
   15e80:	8c e1       	ldi	r24, 0x1C	; 28
   15e82:	b8 2e       	mov	r11, r24
   15e84:	00 e0       	ldi	r16, 0x00	; 0
   15e86:	10 e0       	ldi	r17, 0x00	; 0
   15e88:	0e 15       	cp	r16, r14
   15e8a:	1f 05       	cpc	r17, r15
   15e8c:	0c f0       	brlt	.+2      	; 0x15e90 <SS80_Transparent_State+0xa0>
   15e8e:	9c c0       	rjmp	.+312    	; 0x15fc8 <SS80_Transparent_State+0x1d8>
   15e90:	68 01       	movw	r12, r16
   15e92:	ff ef       	ldi	r31, 0xFF	; 255
   15e94:	cf 1a       	sub	r12, r31
   15e96:	df 0a       	sbc	r13, r31
   15e98:	f5 01       	movw	r30, r10
   15e9a:	81 91       	ld	r24, Z+
   15e9c:	5f 01       	movw	r10, r30
   15e9e:	28 2f       	mov	r18, r24
   15ea0:	30 e0       	ldi	r19, 0x00	; 0
   15ea2:	a9 01       	movw	r20, r18
   15ea4:	40 52       	subi	r20, 0x20	; 32
   15ea6:	51 09       	sbc	r21, r1
   15ea8:	40 31       	cpi	r20, 0x10	; 16
   15eaa:	51 05       	cpc	r21, r1
   15eac:	20 f4       	brcc	.+8      	; 0x15eb6 <SS80_Transparent_State+0xc6>
   15eae:	80 52       	subi	r24, 0x20	; 32
   15eb0:	86 d9       	rcall	.-3316   	; 0x151be <SS80_Check_Unit>
   15eb2:	86 01       	movw	r16, r12
   15eb4:	e9 cf       	rjmp	.-46     	; 0x15e88 <SS80_Transparent_State+0x98>
   15eb6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15eba:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15ebe:	21 30       	cpi	r18, 0x01	; 1
   15ec0:	31 05       	cpc	r19, r1
   15ec2:	c9 f4       	brne	.+50     	; 0x15ef6 <SS80_Transparent_State+0x106>
   15ec4:	0e 5f       	subi	r16, 0xFE	; 254
   15ec6:	1f 4f       	sbci	r17, 0xFF	; 255
   15ec8:	80 73       	andi	r24, 0x30	; 48
   15eca:	99 27       	eor	r25, r25
   15ecc:	89 2b       	or	r24, r25
   15ece:	51 f0       	breq	.+20     	; 0x15ee4 <SS80_Transparent_State+0xf4>
   15ed0:	83 e1       	ldi	r24, 0x13	; 19
   15ed2:	94 e2       	ldi	r25, 0x24	; 36
   15ed4:	a0 e0       	ldi	r26, 0x00	; 0
   15ed6:	ed b7       	in	r30, 0x3d	; 61
   15ed8:	fe b7       	in	r31, 0x3e	; 62
   15eda:	81 83       	std	Z+1, r24	; 0x01
   15edc:	92 83       	std	Z+2, r25	; 0x02
   15ede:	a3 83       	std	Z+3, r26	; 0x03
   15ee0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15ee4:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15ee8:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15eec:	81 81       	ldd	r24, Z+1	; 0x01
   15eee:	90 e0       	ldi	r25, 0x00	; 0
   15ef0:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   15ef4:	69 c0       	rjmp	.+210    	; 0x15fc8 <SS80_Transparent_State+0x1d8>
   15ef6:	22 30       	cpi	r18, 0x02	; 2
   15ef8:	31 05       	cpc	r19, r1
   15efa:	51 f4       	brne	.+20     	; 0x15f10 <SS80_Transparent_State+0x120>
   15efc:	0b 5f       	subi	r16, 0xFB	; 251
   15efe:	1f 4f       	sbci	r17, 0xFF	; 255
   15f00:	80 73       	andi	r24, 0x30	; 48
   15f02:	99 27       	eor	r25, r25
   15f04:	89 2b       	or	r24, r25
   15f06:	09 f4       	brne	.+2      	; 0x15f0a <SS80_Transparent_State+0x11a>
   15f08:	5f c0       	rjmp	.+190    	; 0x15fc8 <SS80_Transparent_State+0x1d8>
   15f0a:	86 ef       	ldi	r24, 0xF6	; 246
   15f0c:	93 e2       	ldi	r25, 0x23	; 35
   15f0e:	0c c0       	rjmp	.+24     	; 0x15f28 <SS80_Transparent_State+0x138>
   15f10:	23 30       	cpi	r18, 0x03	; 3
   15f12:	31 05       	cpc	r19, r1
   15f14:	91 f4       	brne	.+36     	; 0x15f3a <SS80_Transparent_State+0x14a>
   15f16:	0b 5f       	subi	r16, 0xFB	; 251
   15f18:	1f 4f       	sbci	r17, 0xFF	; 255
   15f1a:	80 73       	andi	r24, 0x30	; 48
   15f1c:	99 27       	eor	r25, r25
   15f1e:	89 2b       	or	r24, r25
   15f20:	09 f4       	brne	.+2      	; 0x15f24 <SS80_Transparent_State+0x134>
   15f22:	52 c0       	rjmp	.+164    	; 0x15fc8 <SS80_Transparent_State+0x1d8>
   15f24:	88 ed       	ldi	r24, 0xD8	; 216
   15f26:	93 e2       	ldi	r25, 0x23	; 35
   15f28:	a0 e0       	ldi	r26, 0x00	; 0
   15f2a:	ed b7       	in	r30, 0x3d	; 61
   15f2c:	fe b7       	in	r31, 0x3e	; 62
   15f2e:	81 83       	std	Z+1, r24	; 0x01
   15f30:	92 83       	std	Z+2, r25	; 0x02
   15f32:	a3 83       	std	Z+3, r26	; 0x03
   15f34:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15f38:	47 c0       	rjmp	.+142    	; 0x15fc8 <SS80_Transparent_State+0x1d8>
   15f3a:	28 30       	cpi	r18, 0x08	; 8
   15f3c:	31 05       	cpc	r19, r1
   15f3e:	e1 f4       	brne	.+56     	; 0x15f78 <SS80_Transparent_State+0x188>
   15f40:	85 ff       	sbrs	r24, 5
   15f42:	12 c0       	rjmp	.+36     	; 0x15f68 <SS80_Transparent_State+0x178>
   15f44:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f48:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f4c:	85 81       	ldd	r24, Z+5	; 0x05
   15f4e:	90 e0       	ldi	r25, 0x00	; 0
   15f50:	ed b7       	in	r30, 0x3d	; 61
   15f52:	fe b7       	in	r31, 0x3e	; 62
   15f54:	95 83       	std	Z+5, r25	; 0x05
   15f56:	84 83       	std	Z+4, r24	; 0x04
   15f58:	81 eb       	ldi	r24, 0xB1	; 177
   15f5a:	93 e2       	ldi	r25, 0x23	; 35
   15f5c:	a0 e0       	ldi	r26, 0x00	; 0
   15f5e:	81 83       	std	Z+1, r24	; 0x01
   15f60:	92 83       	std	Z+2, r25	; 0x02
   15f62:	a3 83       	std	Z+3, r26	; 0x03
   15f64:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15f68:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f6c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f70:	85 81       	ldd	r24, Z+5	; 0x05
   15f72:	90 e0       	ldi	r25, 0x00	; 0
   15f74:	aa de       	rcall	.-684    	; 0x15cca <SS80_Channel_Independent_Clear>
   15f76:	44 c0       	rjmp	.+136    	; 0x16000 <SS80_Transparent_State+0x210>
   15f78:	29 30       	cpi	r18, 0x09	; 9
   15f7a:	31 05       	cpc	r19, r1
   15f7c:	b1 f4       	brne	.+44     	; 0x15faa <SS80_Transparent_State+0x1ba>
   15f7e:	85 ff       	sbrs	r24, 5
   15f80:	12 c0       	rjmp	.+36     	; 0x15fa6 <SS80_Transparent_State+0x1b6>
   15f82:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f86:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f8a:	85 81       	ldd	r24, Z+5	; 0x05
   15f8c:	90 e0       	ldi	r25, 0x00	; 0
   15f8e:	ed b7       	in	r30, 0x3d	; 61
   15f90:	fe b7       	in	r31, 0x3e	; 62
   15f92:	95 83       	std	Z+5, r25	; 0x05
   15f94:	84 83       	std	Z+4, r24	; 0x04
   15f96:	8d e9       	ldi	r24, 0x9D	; 157
   15f98:	93 e2       	ldi	r25, 0x23	; 35
   15f9a:	a0 e0       	ldi	r26, 0x00	; 0
   15f9c:	81 83       	std	Z+1, r24	; 0x01
   15f9e:	92 83       	std	Z+2, r25	; 0x02
   15fa0:	a3 83       	std	Z+3, r26	; 0x03
   15fa2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15fa6:	13 df       	rcall	.-474    	; 0x15dce <SS80_Cancel>
   15fa8:	2b c0       	rjmp	.+86     	; 0x16000 <SS80_Transparent_State+0x210>
   15faa:	80 ff       	sbrs	r24, 0
   15fac:	22 c0       	rjmp	.+68     	; 0x15ff2 <SS80_Transparent_State+0x202>
   15fae:	ed b7       	in	r30, 0x3d	; 61
   15fb0:	fe b7       	in	r31, 0x3e	; 62
   15fb2:	35 83       	std	Z+5, r19	; 0x05
   15fb4:	24 83       	std	Z+4, r18	; 0x04
   15fb6:	8d e7       	ldi	r24, 0x7D	; 125
   15fb8:	93 e2       	ldi	r25, 0x23	; 35
   15fba:	a0 e0       	ldi	r26, 0x00	; 0
   15fbc:	81 83       	std	Z+1, r24	; 0x01
   15fbe:	92 83       	std	Z+2, r25	; 0x02
   15fc0:	a3 83       	std	Z+3, r26	; 0x03
   15fc2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15fc6:	86 01       	movw	r16, r12
   15fc8:	0e 15       	cp	r16, r14
   15fca:	1f 05       	cpc	r17, r15
   15fcc:	91 f0       	breq	.+36     	; 0x15ff2 <SS80_Transparent_State+0x202>
   15fce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fd2:	80 ff       	sbrs	r24, 0
   15fd4:	0e c0       	rjmp	.+28     	; 0x15ff2 <SS80_Transparent_State+0x202>
   15fd6:	ed b7       	in	r30, 0x3d	; 61
   15fd8:	fe b7       	in	r31, 0x3e	; 62
   15fda:	f7 82       	std	Z+7, r15	; 0x07
   15fdc:	e6 82       	std	Z+6, r14	; 0x06
   15fde:	15 83       	std	Z+5, r17	; 0x05
   15fe0:	04 83       	std	Z+4, r16	; 0x04
   15fe2:	81 e4       	ldi	r24, 0x41	; 65
   15fe4:	93 e2       	ldi	r25, 0x23	; 35
   15fe6:	a0 e0       	ldi	r26, 0x00	; 0
   15fe8:	81 83       	std	Z+1, r24	; 0x01
   15fea:	92 83       	std	Z+2, r25	; 0x02
   15fec:	a3 83       	std	Z+3, r26	; 0x03
   15fee:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   15ff2:	88 85       	ldd	r24, Y+8	; 0x08
   15ff4:	99 85       	ldd	r25, Y+9	; 0x09
   15ff6:	88 27       	eor	r24, r24
   15ff8:	90 7d       	andi	r25, 0xD0	; 208
   15ffa:	02 c0       	rjmp	.+4      	; 0x16000 <SS80_Transparent_State+0x210>
   15ffc:	80 e0       	ldi	r24, 0x00	; 0
   15ffe:	90 e0       	ldi	r25, 0x00	; 0
   16000:	29 96       	adiw	r28, 0x09	; 9
   16002:	ea e0       	ldi	r30, 0x0A	; 10
   16004:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

00016008 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   16008:	a6 e0       	ldi	r26, 0x06	; 6
   1600a:	b0 e0       	ldi	r27, 0x00	; 0
   1600c:	ea e0       	ldi	r30, 0x0A	; 10
   1600e:	f0 eb       	ldi	r31, 0xB0	; 176
   16010:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   16014:	80 e0       	ldi	r24, 0x00	; 0
   16016:	91 e0       	ldi	r25, 0x01	; 1
   16018:	9d 83       	std	Y+5, r25	; 0x05
   1601a:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   1601c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16020:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16024:	81 e0       	ldi	r24, 0x01	; 1
   16026:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   16028:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   1602a:	ae 01       	movw	r20, r28
   1602c:	4c 5f       	subi	r20, 0xFC	; 252
   1602e:	5f 4f       	sbci	r21, 0xFF	; 255
   16030:	61 e0       	ldi	r22, 0x01	; 1
   16032:	70 e0       	ldi	r23, 0x00	; 0
   16034:	ce 01       	movw	r24, r28
   16036:	06 96       	adiw	r24, 0x06	; 6
   16038:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   1603c:	01 97       	sbiw	r24, 0x01	; 1
   1603e:	99 f0       	breq	.+38     	; 0x16066 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   16040:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16044:	80 ff       	sbrs	r24, 0
   16046:	0a c0       	rjmp	.+20     	; 0x1605c <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   16048:	8f e8       	ldi	r24, 0x8F	; 143
   1604a:	92 e2       	ldi	r25, 0x22	; 34
   1604c:	a0 e0       	ldi	r26, 0x00	; 0
   1604e:	ed b7       	in	r30, 0x3d	; 61
   16050:	fe b7       	in	r31, 0x3e	; 62
   16052:	81 83       	std	Z+1, r24	; 0x01
   16054:	92 83       	std	Z+2, r25	; 0x02
   16056:	a3 83       	std	Z+3, r26	; 0x03
   16058:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        return(status & ERROR_MASK);
   1605c:	8c 81       	ldd	r24, Y+4	; 0x04
   1605e:	9d 81       	ldd	r25, Y+5	; 0x05
   16060:	88 27       	eor	r24, r24
   16062:	90 7d       	andi	r25, 0xD0	; 208
   16064:	07 c0       	rjmp	.+14     	; 0x16074 <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   16066:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1606a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1606e:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   16070:	80 e0       	ldi	r24, 0x00	; 0
   16072:	90 e0       	ldi	r25, 0x00	; 0
}
   16074:	26 96       	adiw	r28, 0x06	; 6
   16076:	e2 e0       	ldi	r30, 0x02	; 2
   16078:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0001607c <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   1607c:	a7 e1       	ldi	r26, 0x17	; 23
   1607e:	b0 e0       	ldi	r27, 0x00	; 0
   16080:	e4 e4       	ldi	r30, 0x44	; 68
   16082:	f0 eb       	ldi	r31, 0xB0	; 176
   16084:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   16088:	60 91 66 19 	lds	r22, 0x1966	; 0x801966 <SS80s>
   1608c:	70 91 67 19 	lds	r23, 0x1967	; 0x801967 <SS80s+0x1>
   16090:	fb 01       	movw	r30, r22
   16092:	27 81       	ldd	r18, Z+7	; 0x07
   16094:	30 85       	ldd	r19, Z+8	; 0x08
   16096:	41 85       	ldd	r20, Z+9	; 0x09
   16098:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   1609a:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   1609e:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   160a2:	fc 01       	movw	r30, r24
   160a4:	a2 89       	ldd	r26, Z+18	; 0x12
   160a6:	b3 89       	ldd	r27, Z+19	; 0x13
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   160a8:	fb 01       	movw	r30, r22
   160aa:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   160ac:	1d 86       	std	Y+13, r1	; 0x0d
   160ae:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   160b0:	54 98       	cbi	0x0a, 4	; 10
   160b2:	4c 99       	sbic	0x09, 4	; 9
   160b4:	03 c0       	rjmp	.+6      	; 0x160bc <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   160b6:	80 e0       	ldi	r24, 0x00	; 0
   160b8:	90 e1       	ldi	r25, 0x10	; 16
   160ba:	3e c1       	rjmp	.+636    	; 0x16338 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   160bc:	0e 94 f6 e6 	call	0x1cdec	; 0x1cdec <__muluhisi3>
   160c0:	4b 01       	movw	r8, r22
   160c2:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   160c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160c8:	85 ff       	sbrs	r24, 5
   160ca:	1a c0       	rjmp	.+52     	; 0x16100 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   160cc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   160d0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   160d4:	83 85       	ldd	r24, Z+11	; 0x0b
   160d6:	94 85       	ldd	r25, Z+12	; 0x0c
   160d8:	a5 85       	ldd	r26, Z+13	; 0x0d
   160da:	b6 85       	ldd	r27, Z+14	; 0x0e
   160dc:	ed b7       	in	r30, 0x3d	; 61
   160de:	fe b7       	in	r31, 0x3e	; 62
   160e0:	80 87       	std	Z+8, r24	; 0x08
   160e2:	91 87       	std	Z+9, r25	; 0x09
   160e4:	a2 87       	std	Z+10, r26	; 0x0a
   160e6:	b3 87       	std	Z+11, r27	; 0x0b
   160e8:	84 82       	std	Z+4, r8	; 0x04
   160ea:	95 82       	std	Z+5, r9	; 0x05
   160ec:	a6 82       	std	Z+6, r10	; 0x06
   160ee:	b7 82       	std	Z+7, r11	; 0x07
   160f0:	89 e6       	ldi	r24, 0x69	; 105
   160f2:	99 e2       	ldi	r25, 0x29	; 41
   160f4:	a0 e0       	ldi	r26, 0x00	; 0
   160f6:	81 83       	std	Z+1, r24	; 0x01
   160f8:	92 83       	std	Z+2, r25	; 0x02
   160fa:	a3 83       	std	Z+3, r26	; 0x03
   160fc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   16100:	25 db       	rcall	.-2486   	; 0x1574c <SS80_cmd_seek>
   16102:	89 2b       	or	r24, r25
   16104:	09 f0       	breq	.+2      	; 0x16108 <SS80_locate_and_read+0x8c>
   16106:	ae c0       	rjmp	.+348    	; 0x16264 <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   16108:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1610c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16110:	43 84       	ldd	r4, Z+11	; 0x0b
   16112:	54 84       	ldd	r5, Z+12	; 0x0c
   16114:	65 84       	ldd	r6, Z+13	; 0x0d
   16116:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   16118:	1e 86       	std	Y+14, r1	; 0x0e
   1611a:	1f 86       	std	Y+15, r1	; 0x0f
   1611c:	18 8a       	std	Y+16, r1	; 0x10
   1611e:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   16120:	8b e4       	ldi	r24, 0x4B	; 75
   16122:	99 e2       	ldi	r25, 0x29	; 41
   16124:	9c 01       	movw	r18, r24
   16126:	40 e0       	ldi	r20, 0x00	; 0
   16128:	2a 8b       	std	Y+18, r18	; 0x12
   1612a:	3b 8b       	std	Y+19, r19	; 0x13
   1612c:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   1612e:	33 24       	eor	r3, r3
   16130:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   16132:	8a e1       	ldi	r24, 0x1A	; 26
   16134:	99 e2       	ldi	r25, 0x29	; 41
   16136:	9c 01       	movw	r18, r24
   16138:	40 e0       	ldi	r20, 0x00	; 0
   1613a:	2d 8b       	std	Y+21, r18	; 0x15
   1613c:	3e 8b       	std	Y+22, r19	; 0x16
   1613e:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   16140:	34 c0       	rjmp	.+104    	; 0x161aa <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16142:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16144:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   16148:	ae 01       	movw	r20, r28
   1614a:	44 5f       	subi	r20, 0xF4	; 244
   1614c:	5f 4f       	sbci	r21, 0xFF	; 255
   1614e:	b6 01       	movw	r22, r12
   16150:	8a ee       	ldi	r24, 0xEA	; 234
   16152:	9c e1       	ldi	r25, 0x1C	; 28
   16154:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   16158:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   1615a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1615e:	87 ff       	sbrs	r24, 7
   16160:	04 c0       	rjmp	.+8      	; 0x1616a <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   16162:	8a ea       	ldi	r24, 0xAA	; 170
   16164:	90 e1       	ldi	r25, 0x10	; 16
   16166:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   1616a:	c0 16       	cp	r12, r16
   1616c:	d1 06       	cpc	r13, r17
   1616e:	09 f0       	breq	.+2      	; 0x16172 <SS80_locate_and_read+0xf6>
   16170:	82 c0       	rjmp	.+260    	; 0x16276 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   16172:	0d 2c       	mov	r0, r13
   16174:	00 0c       	add	r0, r0
   16176:	ee 08       	sbc	r14, r14
   16178:	ff 08       	sbc	r15, r15
   1617a:	8c 0c       	add	r8, r12
   1617c:	9d 1c       	adc	r9, r13
   1617e:	ae 1c       	adc	r10, r14
   16180:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   16182:	01 2e       	mov	r0, r17
   16184:	00 0c       	add	r0, r0
   16186:	22 0b       	sbc	r18, r18
   16188:	33 0b       	sbc	r19, r19
   1618a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1618c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1618e:	a8 89       	ldd	r26, Y+16	; 0x10
   16190:	b9 89       	ldd	r27, Y+17	; 0x11
   16192:	80 0f       	add	r24, r16
   16194:	91 1f       	adc	r25, r17
   16196:	a2 1f       	adc	r26, r18
   16198:	b3 1f       	adc	r27, r19
   1619a:	8e 87       	std	Y+14, r24	; 0x0e
   1619c:	9f 87       	std	Y+15, r25	; 0x0f
   1619e:	a8 8b       	std	Y+16, r26	; 0x10
   161a0:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   161a2:	40 1a       	sub	r4, r16
   161a4:	51 0a       	sbc	r5, r17
   161a6:	62 0a       	sbc	r6, r18
   161a8:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   161aa:	41 14       	cp	r4, r1
   161ac:	51 04       	cpc	r5, r1
   161ae:	61 04       	cpc	r6, r1
   161b0:	71 04       	cpc	r7, r1
   161b2:	09 f4       	brne	.+2      	; 0x161b6 <SS80_locate_and_read+0x13a>
   161b4:	92 c0       	rjmp	.+292    	; 0x162da <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   161b6:	54 98       	cbi	0x0a, 4	; 10
   161b8:	4c 9b       	sbis	0x09, 4	; 9
   161ba:	7d cf       	rjmp	.-262    	; 0x160b6 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   161bc:	31 e0       	ldi	r19, 0x01	; 1
   161be:	43 16       	cp	r4, r19
   161c0:	53 06       	cpc	r5, r19
   161c2:	61 04       	cpc	r6, r1
   161c4:	71 04       	cpc	r7, r1
   161c6:	08 f4       	brcc	.+2      	; 0x161ca <SS80_locate_and_read+0x14e>
   161c8:	4f c0       	rjmp	.+158    	; 0x16268 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   161ca:	1d 86       	std	Y+13, r1	; 0x0d
   161cc:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   161ce:	c1 2c       	mov	r12, r1
   161d0:	dd 24       	eor	r13, r13
   161d2:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   161d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161d8:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   161da:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   161de:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   161e2:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   161e6:	43 e0       	ldi	r20, 0x03	; 3
   161e8:	e4 0e       	add	r14, r20
   161ea:	f1 1c       	adc	r15, r1
   161ec:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   161f0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   161f4:	86 01       	movw	r16, r12
   161f6:	2a ee       	ldi	r18, 0xEA	; 234
   161f8:	3c e1       	ldi	r19, 0x1C	; 28
   161fa:	b5 01       	movw	r22, r10
   161fc:	a4 01       	movw	r20, r8
   161fe:	82 81       	ldd	r24, Z+2	; 0x02
   16200:	93 81       	ldd	r25, Z+3	; 0x03
   16202:	0e 94 ee 84 	call	0x109dc	; 0x109dc <dbf_open_read>
   16206:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   16208:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1620c:	86 ff       	sbrs	r24, 6
   1620e:	04 c0       	rjmp	.+8      	; 0x16218 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   16210:	8f e9       	ldi	r24, 0x9F	; 159
   16212:	90 e1       	ldi	r25, 0x10	; 16
   16214:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16218:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1621c:	85 ff       	sbrs	r24, 5
   1621e:	0c c0       	rjmp	.+24     	; 0x16238 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   16220:	ed b7       	in	r30, 0x3d	; 61
   16222:	fe b7       	in	r31, 0x3e	; 62
   16224:	15 83       	std	Z+5, r17	; 0x05
   16226:	04 83       	std	Z+4, r16	; 0x04
   16228:	2a 89       	ldd	r18, Y+18	; 0x12
   1622a:	3b 89       	ldd	r19, Y+19	; 0x13
   1622c:	4c 89       	ldd	r20, Y+20	; 0x14
   1622e:	21 83       	std	Z+1, r18	; 0x01
   16230:	32 83       	std	Z+2, r19	; 0x02
   16232:	43 83       	std	Z+3, r20	; 0x03
   16234:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16238:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   1623c:	17 ff       	sbrs	r17, 7
   1623e:	81 cf       	rjmp	.-254    	; 0x16142 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   16240:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16244:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16248:	91 e0       	ldi	r25, 0x01	; 1
   1624a:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   1624c:	80 ff       	sbrs	r24, 0
   1624e:	0a c0       	rjmp	.+20     	; 0x16264 <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   16250:	83 e3       	ldi	r24, 0x33	; 51
   16252:	99 e2       	ldi	r25, 0x29	; 41
   16254:	a0 e0       	ldi	r26, 0x00	; 0
   16256:	ed b7       	in	r30, 0x3d	; 61
   16258:	fe b7       	in	r31, 0x3e	; 62
   1625a:	81 83       	std	Z+1, r24	; 0x01
   1625c:	92 83       	std	Z+2, r25	; 0x02
   1625e:	a3 83       	std	Z+3, r26	; 0x03
   16260:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            return( SS80_error_return() );
   16264:	d1 de       	rcall	.-606    	; 0x16008 <SS80_error_return>
   16266:	68 c0       	rjmp	.+208    	; 0x16338 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   16268:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   1626a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1626c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1626e:	91 60       	ori	r25, 0x01	; 1
   16270:	9d 87       	std	Y+13, r25	; 0x0d
   16272:	8c 87       	std	Y+12, r24	; 0x0c
   16274:	af cf       	rjmp	.-162    	; 0x161d4 <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   16276:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1627a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1627e:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   16280:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16284:	80 ff       	sbrs	r24, 0
   16286:	0a c0       	rjmp	.+20     	; 0x1629c <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   16288:	2d 89       	ldd	r18, Y+21	; 0x15
   1628a:	3e 89       	ldd	r19, Y+22	; 0x16
   1628c:	4f 89       	ldd	r20, Y+23	; 0x17
   1628e:	ed b7       	in	r30, 0x3d	; 61
   16290:	fe b7       	in	r31, 0x3e	; 62
   16292:	21 83       	std	Z+1, r18	; 0x01
   16294:	32 83       	std	Z+2, r19	; 0x02
   16296:	43 83       	std	Z+3, r20	; 0x03
   16298:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            if(status & ERROR_MASK)
   1629c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1629e:	9d 85       	ldd	r25, Y+13	; 0x0d
   162a0:	88 27       	eor	r24, r24
   162a2:	90 7d       	andi	r25, 0xD0	; 208
   162a4:	89 2b       	or	r24, r25
   162a6:	09 f4       	brne	.+2      	; 0x162aa <SS80_locate_and_read+0x22e>
   162a8:	64 cf       	rjmp	.-312    	; 0x16172 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   162aa:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   162ae:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   162b2:	83 81       	ldd	r24, Z+3	; 0x03
   162b4:	94 81       	ldd	r25, Z+4	; 0x04
   162b6:	80 62       	ori	r24, 0x20	; 32
   162b8:	94 83       	std	Z+4, r25	; 0x04
   162ba:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   162bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162c0:	80 ff       	sbrs	r24, 0
   162c2:	21 c0       	rjmp	.+66     	; 0x16306 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   162c4:	85 ef       	ldi	r24, 0xF5	; 245
   162c6:	98 e2       	ldi	r25, 0x28	; 40
   162c8:	a0 e0       	ldi	r26, 0x00	; 0
   162ca:	ed b7       	in	r30, 0x3d	; 61
   162cc:	fe b7       	in	r31, 0x3e	; 62
   162ce:	81 83       	std	Z+1, r24	; 0x01
   162d0:	92 83       	std	Z+2, r25	; 0x02
   162d2:	a3 83       	std	Z+3, r26	; 0x03
   162d4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   162d8:	16 c0       	rjmp	.+44     	; 0x16306 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   162da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162de:	85 ff       	sbrs	r24, 5
   162e0:	12 c0       	rjmp	.+36     	; 0x16306 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   162e2:	8e 85       	ldd	r24, Y+14	; 0x0e
   162e4:	9f 85       	ldd	r25, Y+15	; 0x0f
   162e6:	a8 89       	ldd	r26, Y+16	; 0x10
   162e8:	b9 89       	ldd	r27, Y+17	; 0x11
   162ea:	ed b7       	in	r30, 0x3d	; 61
   162ec:	fe b7       	in	r31, 0x3e	; 62
   162ee:	84 83       	std	Z+4, r24	; 0x04
   162f0:	95 83       	std	Z+5, r25	; 0x05
   162f2:	a6 83       	std	Z+6, r26	; 0x06
   162f4:	b7 83       	std	Z+7, r27	; 0x07
   162f6:	8d ec       	ldi	r24, 0xCD	; 205
   162f8:	98 e2       	ldi	r25, 0x28	; 40
   162fa:	a0 e0       	ldi	r26, 0x00	; 0
   162fc:	81 83       	std	Z+1, r24	; 0x01
   162fe:	92 83       	std	Z+2, r25	; 0x02
   16300:	a3 83       	std	Z+3, r26	; 0x03
   16302:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   16306:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   1630a:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   1630e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16312:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   16316:	22 89       	ldd	r18, Z+18	; 0x12
   16318:	33 89       	ldd	r19, Z+19	; 0x13
   1631a:	40 e0       	ldi	r20, 0x00	; 0
   1631c:	50 e0       	ldi	r21, 0x00	; 0
   1631e:	c5 01       	movw	r24, r10
   16320:	b4 01       	movw	r22, r8
   16322:	0e 94 a9 e6 	call	0x1cd52	; 0x1cd52 <__udivmodsi4>
   16326:	f8 01       	movw	r30, r16
   16328:	27 83       	std	Z+7, r18	; 0x07
   1632a:	30 87       	std	Z+8, r19	; 0x08
   1632c:	41 87       	std	Z+9, r20	; 0x09
   1632e:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   16330:	8c 85       	ldd	r24, Y+12	; 0x0c
   16332:	9d 85       	ldd	r25, Y+13	; 0x0d
   16334:	88 27       	eor	r24, r24
   16336:	90 7d       	andi	r25, 0xD0	; 208
}
   16338:	67 96       	adiw	r28, 0x17	; 23
   1633a:	e1 e1       	ldi	r30, 0x11	; 17
   1633c:	0c 94 33 e7 	jmp	0x1ce66	; 0x1ce66 <__epilogue_restores__+0x2>

00016340 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   16340:	cf 93       	push	r28
   16342:	df 93       	push	r29
   16344:	00 d0       	rcall	.+0      	; 0x16346 <SS80_Execute_State+0x6>
   16346:	00 d0       	rcall	.+0      	; 0x16348 <SS80_Execute_State+0x8>
   16348:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   1634a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1634e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   16352:	81 81       	ldd	r24, Z+1	; 0x01
   16354:	90 e0       	ldi	r25, 0x00	; 0
   16356:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
    switch(SS80s->estate)
   1635a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1635e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16362:	80 81       	ld	r24, Z
   16364:	91 81       	ldd	r25, Z+1	; 0x01
   16366:	82 30       	cpi	r24, 0x02	; 2
   16368:	91 05       	cpc	r25, r1
   1636a:	89 f0       	breq	.+34     	; 0x1638e <SS80_Execute_State+0x4e>
   1636c:	3c f4       	brge	.+14     	; 0x1637c <SS80_Execute_State+0x3c>
   1636e:	00 97       	sbiw	r24, 0x00	; 0
   16370:	81 f1       	breq	.+96     	; 0x163d2 <SS80_Execute_State+0x92>
   16372:	81 30       	cpi	r24, 0x01	; 1
   16374:	91 05       	cpc	r25, r1
   16376:	b9 f4       	brne	.+46     	; 0x163a6 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   16378:	81 de       	rcall	.-766    	; 0x1607c <SS80_locate_and_read>
   1637a:	0d c0       	rjmp	.+26     	; 0x16396 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   1637c:	83 30       	cpi	r24, 0x03	; 3
   1637e:	91 05       	cpc	r25, r1
   16380:	41 f0       	breq	.+16     	; 0x16392 <SS80_Execute_State+0x52>
   16382:	84 30       	cpi	r24, 0x04	; 4
   16384:	91 05       	cpc	r25, r1
   16386:	79 f4       	brne	.+30     	; 0x163a6 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16388:	0e 94 6f a8 	call	0x150de	; 0x150de <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   1638c:	04 c0       	rjmp	.+8      	; 0x16396 <SS80_Execute_State+0x56>
   1638e:	53 da       	rcall	.-2906   	; 0x15836 <SS80_locate_and_write>
   16390:	02 c0       	rjmp	.+4      	; 0x16396 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   16392:	0e 94 ee a7 	call	0x14fdc	; 0x14fdc <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16396:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   16398:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1639c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   163a0:	11 82       	std	Z+1, r1	; 0x01
   163a2:	10 82       	st	Z, r1
            break;
   163a4:	18 c0       	rjmp	.+48     	; 0x163d6 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   163a6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   163aa:	20 ff       	sbrs	r18, 0
   163ac:	0c c0       	rjmp	.+24     	; 0x163c6 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   163ae:	ed b7       	in	r30, 0x3d	; 61
   163b0:	fe b7       	in	r31, 0x3e	; 62
   163b2:	95 83       	std	Z+5, r25	; 0x05
   163b4:	84 83       	std	Z+4, r24	; 0x04
   163b6:	81 e9       	ldi	r24, 0x91	; 145
   163b8:	99 e2       	ldi	r25, 0x29	; 41
   163ba:	a0 e0       	ldi	r26, 0x00	; 0
   163bc:	81 83       	std	Z+1, r24	; 0x01
   163be:	92 83       	std	Z+2, r25	; 0x02
   163c0:	a3 83       	std	Z+3, r26	; 0x03
   163c2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            SS80s->estate = EXEC_IDLE;
   163c6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   163ca:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   163ce:	11 82       	std	Z+1, r1	; 0x01
   163d0:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   163d2:	c0 e0       	ldi	r28, 0x00	; 0
   163d4:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   163d6:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   163da:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   163de:	81 81       	ldd	r24, Z+1	; 0x01
   163e0:	90 e0       	ldi	r25, 0x00	; 0
   163e2:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
    return(ret);
}
   163e6:	ce 01       	movw	r24, r28
   163e8:	cd b7       	in	r28, 0x3d	; 61
   163ea:	de b7       	in	r29, 0x3e	; 62
   163ec:	25 96       	adiw	r28, 0x05	; 5
   163ee:	e2 e0       	ldi	r30, 0x02	; 2
   163f0:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

000163f4 <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   163f4:	a9 e0       	ldi	r26, 0x09	; 9
   163f6:	b0 e0       	ldi	r27, 0x00	; 0
   163f8:	e0 e0       	ldi	r30, 0x00	; 0
   163fa:	f2 eb       	ldi	r31, 0xB2	; 178
   163fc:	0c 94 25 e7 	jmp	0x1ce4a	; 0x1ce4a <__prologue_saves__+0x1e>
   16400:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   16402:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16406:	90 e0       	ldi	r25, 0x00	; 0
   16408:	0e 94 b8 8c 	call	0x11970	; 0x11970 <SS80_is_MTA>
   1640c:	89 2b       	or	r24, r25
   1640e:	19 f0       	breq	.+6      	; 0x16416 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   16410:	15 36       	cpi	r17, 0x65	; 101
   16412:	19 f5       	brne	.+70     	; 0x1645a <SS80_COMMANDS+0x66>
   16414:	09 c0       	rjmp	.+18     	; 0x16428 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   16416:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1641a:	90 e0       	ldi	r25, 0x00	; 0
   1641c:	0e 94 a6 8c 	call	0x1194c	; 0x1194c <SS80_is_MLA>
   16420:	ec 01       	movw	r28, r24
   16422:	89 2b       	or	r24, r25
   16424:	a9 f7       	brne	.-22     	; 0x16410 <SS80_COMMANDS+0x1c>
   16426:	ad c0       	rjmp	.+346    	; 0x16582 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   16428:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1642c:	90 e0       	ldi	r25, 0x00	; 0
   1642e:	0e 94 a6 8c 	call	0x1194c	; 0x1194c <SS80_is_MLA>
   16432:	89 2b       	or	r24, r25
   16434:	09 f4       	brne	.+2      	; 0x16438 <SS80_COMMANDS+0x44>
   16436:	a2 c0       	rjmp	.+324    	; 0x1657c <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16438:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1643c:	85 ff       	sbrs	r24, 5
   1643e:	0a c0       	rjmp	.+20     	; 0x16454 <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   16440:	89 e7       	ldi	r24, 0x79	; 121
   16442:	92 e2       	ldi	r25, 0x22	; 34
   16444:	a0 e0       	ldi	r26, 0x00	; 0
   16446:	ed b7       	in	r30, 0x3d	; 61
   16448:	fe b7       	in	r31, 0x3e	; 62
   1644a:	81 83       	std	Z+1, r24	; 0x01
   1644c:	92 83       	std	Z+2, r25	; 0x02
   1644e:	a3 83       	std	Z+3, r26	; 0x03
   16450:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
                return ( SS80_Command_State() );
   16454:	0e 94 2f a9 	call	0x1525e	; 0x1525e <SS80_Command_State>
   16458:	73 c0       	rjmp	.+230    	; 0x16540 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   1645a:	1e 36       	cpi	r17, 0x6E	; 110
   1645c:	01 f5       	brne	.+64     	; 0x1649e <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   1645e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16462:	90 e0       	ldi	r25, 0x00	; 0
   16464:	0e 94 a6 8c 	call	0x1194c	; 0x1194c <SS80_is_MLA>
   16468:	89 2b       	or	r24, r25
   1646a:	79 f0       	breq	.+30     	; 0x1648a <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1646c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16470:	85 ff       	sbrs	r24, 5
   16472:	13 c0       	rjmp	.+38     	; 0x1649a <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   16474:	83 e6       	ldi	r24, 0x63	; 99
   16476:	92 e2       	ldi	r25, 0x22	; 34
   16478:	a0 e0       	ldi	r26, 0x00	; 0
   1647a:	ed b7       	in	r30, 0x3d	; 61
   1647c:	fe b7       	in	r31, 0x3e	; 62
   1647e:	81 83       	std	Z+1, r24	; 0x01
   16480:	92 83       	std	Z+2, r25	; 0x02
   16482:	a3 83       	std	Z+3, r26	; 0x03
   16484:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16488:	08 c0       	rjmp	.+16     	; 0x1649a <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   1648a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1648e:	90 e0       	ldi	r25, 0x00	; 0
   16490:	0e 94 b8 8c 	call	0x11970	; 0x11970 <SS80_is_MTA>
   16494:	89 2b       	or	r24, r25
   16496:	51 f7       	brne	.-44     	; 0x1646c <SS80_COMMANDS+0x78>
   16498:	71 c0       	rjmp	.+226    	; 0x1657c <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   1649a:	52 df       	rcall	.-348    	; 0x16340 <SS80_Execute_State>
   1649c:	51 c0       	rjmp	.+162    	; 0x16540 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   1649e:	10 37       	cpi	r17, 0x70	; 112
   164a0:	b9 f5       	brne	.+110    	; 0x16510 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   164a2:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   164a6:	90 e0       	ldi	r25, 0x00	; 0
   164a8:	0e 94 b8 8c 	call	0x11970	; 0x11970 <SS80_is_MTA>
   164ac:	89 2b       	or	r24, r25
   164ae:	81 f0       	breq	.+32     	; 0x164d0 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   164b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164b4:	85 ff       	sbrs	r24, 5
   164b6:	0a c0       	rjmp	.+20     	; 0x164cc <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   164b8:	8e e4       	ldi	r24, 0x4E	; 78
   164ba:	92 e2       	ldi	r25, 0x22	; 34
   164bc:	a0 e0       	ldi	r26, 0x00	; 0
   164be:	ed b7       	in	r30, 0x3d	; 61
   164c0:	fe b7       	in	r31, 0x3e	; 62
   164c2:	81 83       	std	Z+1, r24	; 0x01
   164c4:	92 83       	std	Z+2, r25	; 0x02
   164c6:	a3 83       	std	Z+3, r26	; 0x03
   164c8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
                return( SS80_Report() );
   164cc:	46 db       	rcall	.-2420   	; 0x15b5a <SS80_Report>
   164ce:	38 c0       	rjmp	.+112    	; 0x16540 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   164d0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   164d4:	90 e0       	ldi	r25, 0x00	; 0
   164d6:	0e 94 a6 8c 	call	0x1194c	; 0x1194c <SS80_is_MLA>
   164da:	89 2b       	or	r24, r25
   164dc:	09 f4       	brne	.+2      	; 0x164e0 <SS80_COMMANDS+0xec>
   164de:	4e c0       	rjmp	.+156    	; 0x1657c <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   164e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164e4:	85 ff       	sbrs	r24, 5
   164e6:	0a c0       	rjmp	.+20     	; 0x164fc <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   164e8:	8f e3       	ldi	r24, 0x3F	; 63
   164ea:	92 e2       	ldi	r25, 0x22	; 34
   164ec:	a0 e0       	ldi	r26, 0x00	; 0
   164ee:	ed b7       	in	r30, 0x3d	; 61
   164f0:	fe b7       	in	r31, 0x3e	; 62
   164f2:	81 83       	std	Z+1, r24	; 0x01
   164f4:	92 83       	std	Z+2, r25	; 0x02
   164f6:	a3 83       	std	Z+3, r26	; 0x03
   164f8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   164fc:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16500:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   16504:	81 81       	ldd	r24, Z+1	; 0x01
   16506:	90 e0       	ldi	r25, 0x00	; 0
   16508:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   1650c:	1d dc       	rcall	.-1990   	; 0x15d48 <SS80_Amigo_Clear>
   1650e:	18 c0       	rjmp	.+48     	; 0x16540 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   16510:	12 37       	cpi	r17, 0x72	; 114
   16512:	c1 f4       	brne	.+48     	; 0x16544 <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   16514:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16518:	90 e0       	ldi	r25, 0x00	; 0
   1651a:	0e 94 a6 8c 	call	0x1194c	; 0x1194c <SS80_is_MLA>
   1651e:	89 2b       	or	r24, r25
   16520:	89 f0       	breq	.+34     	; 0x16544 <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16522:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16526:	85 ff       	sbrs	r24, 5
   16528:	0a c0       	rjmp	.+20     	; 0x1653e <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   1652a:	8b e2       	ldi	r24, 0x2B	; 43
   1652c:	92 e2       	ldi	r25, 0x22	; 34
   1652e:	a0 e0       	ldi	r26, 0x00	; 0
   16530:	ed b7       	in	r30, 0x3d	; 61
   16532:	fe b7       	in	r31, 0x3e	; 62
   16534:	81 83       	std	Z+1, r24	; 0x01
   16536:	92 83       	std	Z+2, r25	; 0x02
   16538:	a3 83       	std	Z+3, r26	; 0x03
   1653a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
                return( SS80_Transparent_State() );
   1653e:	58 dc       	rcall	.-1872   	; 0x15df0 <SS80_Transparent_State>
   16540:	ec 01       	movw	r28, r24
   16542:	3b c0       	rjmp	.+118    	; 0x165ba <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   16544:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16548:	80 ff       	sbrs	r24, 0
   1654a:	18 c0       	rjmp	.+48     	; 0x1657c <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   1654c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16550:	90 e0       	ldi	r25, 0x00	; 0
   16552:	ed b7       	in	r30, 0x3d	; 61
   16554:	fe b7       	in	r31, 0x3e	; 62
   16556:	91 87       	std	Z+9, r25	; 0x09
   16558:	80 87       	std	Z+8, r24	; 0x08
   1655a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1655e:	90 e0       	ldi	r25, 0x00	; 0
   16560:	97 83       	std	Z+7, r25	; 0x07
   16562:	86 83       	std	Z+6, r24	; 0x06
   16564:	81 2f       	mov	r24, r17
   16566:	90 e0       	ldi	r25, 0x00	; 0
   16568:	95 83       	std	Z+5, r25	; 0x05
   1656a:	84 83       	std	Z+4, r24	; 0x04
   1656c:	87 ef       	ldi	r24, 0xF7	; 247
   1656e:	91 e2       	ldi	r25, 0x21	; 33
   16570:	a0 e0       	ldi	r26, 0x00	; 0
   16572:	81 83       	std	Z+1, r24	; 0x01
   16574:	92 83       	std	Z+2, r25	; 0x02
   16576:	a3 83       	std	Z+3, r26	; 0x03
   16578:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   1657c:	c0 e0       	ldi	r28, 0x00	; 0
   1657e:	d0 e0       	ldi	r29, 0x00	; 0
   16580:	1c c0       	rjmp	.+56     	; 0x165ba <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   16582:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16586:	80 ff       	sbrs	r24, 0
   16588:	f9 cf       	rjmp	.-14     	; 0x1657c <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   1658a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1658e:	90 e0       	ldi	r25, 0x00	; 0
   16590:	ed b7       	in	r30, 0x3d	; 61
   16592:	fe b7       	in	r31, 0x3e	; 62
   16594:	91 87       	std	Z+9, r25	; 0x09
   16596:	80 87       	std	Z+8, r24	; 0x08
   16598:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1659c:	90 e0       	ldi	r25, 0x00	; 0
   1659e:	97 83       	std	Z+7, r25	; 0x07
   165a0:	86 83       	std	Z+6, r24	; 0x06
   165a2:	81 2f       	mov	r24, r17
   165a4:	90 e0       	ldi	r25, 0x00	; 0
   165a6:	95 83       	std	Z+5, r25	; 0x05
   165a8:	84 83       	std	Z+4, r24	; 0x04
   165aa:	83 ec       	ldi	r24, 0xC3	; 195
   165ac:	91 e2       	ldi	r25, 0x21	; 33
   165ae:	a0 e0       	ldi	r26, 0x00	; 0
   165b0:	81 83       	std	Z+1, r24	; 0x01
   165b2:	92 83       	std	Z+2, r25	; 0x02
   165b4:	a3 83       	std	Z+3, r26	; 0x03
   165b6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   165ba:	ce 01       	movw	r24, r28
   165bc:	cd b7       	in	r28, 0x3d	; 61
   165be:	de b7       	in	r29, 0x3e	; 62
   165c0:	29 96       	adiw	r28, 0x09	; 9
   165c2:	e3 e0       	ldi	r30, 0x03	; 3
   165c4:	0c 94 41 e7 	jmp	0x1ce82	; 0x1ce82 <__epilogue_restores__+0x1e>

000165c8 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   165c8:	cf 92       	push	r12
   165ca:	df 92       	push	r13
   165cc:	ef 92       	push	r14
   165ce:	0f 93       	push	r16
   165d0:	1f 93       	push	r17
   165d2:	cf 93       	push	r28
   165d4:	df 93       	push	r29
   165d6:	00 d0       	rcall	.+0      	; 0x165d8 <amigo_overflow_check+0x10>
   165d8:	00 d0       	rcall	.+0      	; 0x165da <amigo_overflow_check+0x12>
   165da:	1f 92       	push	r1
   165dc:	ec 01       	movw	r28, r24
   165de:	8b 01       	movw	r16, r22
   165e0:	80 e0       	ldi	r24, 0x00	; 0
   165e2:	90 e0       	ldi	r25, 0x00	; 0
   165e4:	2b e7       	ldi	r18, 0x7B	; 123
   165e6:	31 e3       	ldi	r19, 0x31	; 49
   165e8:	69 01       	movw	r12, r18
   165ea:	e1 2c       	mov	r14, r1
   165ec:	2d 81       	ldd	r18, Y+5	; 0x05
   165ee:	30 e0       	ldi	r19, 0x00	; 0
   165f0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   165f4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   165f8:	42 85       	ldd	r20, Z+10	; 0x0a
   165fa:	53 85       	ldd	r21, Z+11	; 0x0b
   165fc:	24 17       	cp	r18, r20
   165fe:	35 07       	cpc	r19, r21
   16600:	64 f1       	brlt	.+88     	; 0x1665a <amigo_overflow_check+0x92>
   16602:	1d 82       	std	Y+5, r1	; 0x05
   16604:	2c 81       	ldd	r18, Y+4	; 0x04
   16606:	2f 5f       	subi	r18, 0xFF	; 255
   16608:	2c 83       	std	Y+4, r18	; 0x04
   1660a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1660e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16612:	2c 81       	ldd	r18, Y+4	; 0x04
   16614:	30 e0       	ldi	r19, 0x00	; 0
   16616:	44 85       	ldd	r20, Z+12	; 0x0c
   16618:	55 85       	ldd	r21, Z+13	; 0x0d
   1661a:	24 17       	cp	r18, r20
   1661c:	35 07       	cpc	r19, r21
   1661e:	34 f3       	brlt	.-52     	; 0x165ec <amigo_overflow_check+0x24>
   16620:	1c 82       	std	Y+4, r1	; 0x04
   16622:	2b 81       	ldd	r18, Y+3	; 0x03
   16624:	2f 5f       	subi	r18, 0xFF	; 255
   16626:	2b 83       	std	Y+3, r18	; 0x03
   16628:	30 e0       	ldi	r19, 0x00	; 0
   1662a:	46 85       	ldd	r20, Z+14	; 0x0e
   1662c:	57 85       	ldd	r21, Z+15	; 0x0f
   1662e:	24 17       	cp	r18, r20
   16630:	35 07       	cpc	r19, r21
   16632:	5c f3       	brlt	.-42     	; 0x1660a <amigo_overflow_check+0x42>
   16634:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16638:	80 ff       	sbrs	r24, 0
   1663a:	0c c0       	rjmp	.+24     	; 0x16654 <amigo_overflow_check+0x8c>
   1663c:	01 15       	cp	r16, r1
   1663e:	11 05       	cpc	r17, r1
   16640:	49 f0       	breq	.+18     	; 0x16654 <amigo_overflow_check+0x8c>
   16642:	ed b7       	in	r30, 0x3d	; 61
   16644:	fe b7       	in	r31, 0x3e	; 62
   16646:	15 83       	std	Z+5, r17	; 0x05
   16648:	04 83       	std	Z+4, r16	; 0x04
   1664a:	c1 82       	std	Z+1, r12	; 0x01
   1664c:	d2 82       	std	Z+2, r13	; 0x02
   1664e:	e3 82       	std	Z+3, r14	; 0x03
   16650:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16654:	81 e0       	ldi	r24, 0x01	; 1
   16656:	90 e0       	ldi	r25, 0x00	; 0
   16658:	d8 cf       	rjmp	.-80     	; 0x1660a <amigo_overflow_check+0x42>
   1665a:	0f 90       	pop	r0
   1665c:	0f 90       	pop	r0
   1665e:	0f 90       	pop	r0
   16660:	0f 90       	pop	r0
   16662:	0f 90       	pop	r0
   16664:	df 91       	pop	r29
   16666:	cf 91       	pop	r28
   16668:	1f 91       	pop	r17
   1666a:	0f 91       	pop	r16
   1666c:	ef 90       	pop	r14
   1666e:	df 90       	pop	r13
   16670:	cf 90       	pop	r12
   16672:	08 95       	ret

00016674 <amigo_chs_to_logical>:
   16674:	a1 e1       	ldi	r26, 0x11	; 17
   16676:	b0 e0       	ldi	r27, 0x00	; 0
   16678:	e0 e4       	ldi	r30, 0x40	; 64
   1667a:	f3 eb       	ldi	r31, 0xB3	; 179
   1667c:	0c 94 1a e7 	jmp	0x1ce34	; 0x1ce34 <__prologue_saves__+0x8>
   16680:	8b 01       	movw	r16, r22
   16682:	60 91 64 19 	lds	r22, 0x1964	; 0x801964 <AMIGOp>
   16686:	70 91 65 19 	lds	r23, 0x1965	; 0x801965 <AMIGOp+0x1>
   1668a:	fb 01       	movw	r30, r22
   1668c:	42 85       	ldd	r20, Z+10	; 0x0a
   1668e:	53 85       	ldd	r21, Z+11	; 0x0b
   16690:	fc 01       	movw	r30, r24
   16692:	c4 81       	ldd	r28, Z+4	; 0x04
   16694:	d0 e0       	ldi	r29, 0x00	; 0
   16696:	4c 9f       	mul	r20, r28
   16698:	90 01       	movw	r18, r0
   1669a:	4d 9f       	mul	r20, r29
   1669c:	30 0d       	add	r19, r0
   1669e:	5c 9f       	mul	r21, r28
   166a0:	30 0d       	add	r19, r0
   166a2:	11 24       	eor	r1, r1
   166a4:	49 01       	movw	r8, r18
   166a6:	33 0f       	add	r19, r19
   166a8:	aa 08       	sbc	r10, r10
   166aa:	bb 08       	sbc	r11, r11
   166ac:	63 80       	ldd	r6, Z+3	; 0x03
   166ae:	71 2c       	mov	r7, r1
   166b0:	fb 01       	movw	r30, r22
   166b2:	e4 84       	ldd	r14, Z+12	; 0x0c
   166b4:	f5 84       	ldd	r15, Z+13	; 0x0d
   166b6:	4e 9d       	mul	r20, r14
   166b8:	d0 01       	movw	r26, r0
   166ba:	4f 9d       	mul	r20, r15
   166bc:	b0 0d       	add	r27, r0
   166be:	5e 9d       	mul	r21, r14
   166c0:	b0 0d       	add	r27, r0
   166c2:	11 24       	eor	r1, r1
   166c4:	a6 9d       	mul	r26, r6
   166c6:	90 01       	movw	r18, r0
   166c8:	a7 9d       	mul	r26, r7
   166ca:	30 0d       	add	r19, r0
   166cc:	b6 9d       	mul	r27, r6
   166ce:	30 0d       	add	r19, r0
   166d0:	11 24       	eor	r1, r1
   166d2:	69 01       	movw	r12, r18
   166d4:	33 0f       	add	r19, r19
   166d6:	ee 08       	sbc	r14, r14
   166d8:	ff 08       	sbc	r15, r15
   166da:	8c 0c       	add	r8, r12
   166dc:	9d 1c       	adc	r9, r13
   166de:	ae 1c       	adc	r10, r14
   166e0:	bf 1c       	adc	r11, r15
   166e2:	fc 01       	movw	r30, r24
   166e4:	f5 80       	ldd	r15, Z+5	; 0x05
   166e6:	a5 01       	movw	r20, r10
   166e8:	94 01       	movw	r18, r8
   166ea:	2f 0d       	add	r18, r15
   166ec:	31 1d       	adc	r19, r1
   166ee:	41 1d       	adc	r20, r1
   166f0:	51 1d       	adc	r21, r1
   166f2:	fb 01       	movw	r30, r22
   166f4:	a0 85       	ldd	r26, Z+8	; 0x08
   166f6:	b1 85       	ldd	r27, Z+9	; 0x09
   166f8:	0e 94 00 e7 	call	0x1ce00	; 0x1ce00 <__mulshisi3>
   166fc:	4b 01       	movw	r8, r22
   166fe:	5c 01       	movw	r10, r24
   16700:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16704:	85 ff       	sbrs	r24, 5
   16706:	22 c0       	rjmp	.+68     	; 0x1674c <amigo_chs_to_logical+0xd8>
   16708:	8f 2d       	mov	r24, r15
   1670a:	90 e0       	ldi	r25, 0x00	; 0
   1670c:	ed b7       	in	r30, 0x3d	; 61
   1670e:	fe b7       	in	r31, 0x3e	; 62
   16710:	91 8b       	std	Z+17, r25	; 0x11
   16712:	80 8b       	std	Z+16, r24	; 0x10
   16714:	d7 87       	std	Z+15, r29	; 0x0f
   16716:	c6 87       	std	Z+14, r28	; 0x0e
   16718:	75 86       	std	Z+13, r7	; 0x0d
   1671a:	64 86       	std	Z+12, r6	; 0x0c
   1671c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16720:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16724:	81 81       	ldd	r24, Z+1	; 0x01
   16726:	90 e0       	ldi	r25, 0x00	; 0
   16728:	ed b7       	in	r30, 0x3d	; 61
   1672a:	fe b7       	in	r31, 0x3e	; 62
   1672c:	93 87       	std	Z+11, r25	; 0x0b
   1672e:	82 87       	std	Z+10, r24	; 0x0a
   16730:	86 82       	std	Z+6, r8	; 0x06
   16732:	97 82       	std	Z+7, r9	; 0x07
   16734:	a0 86       	std	Z+8, r10	; 0x08
   16736:	b1 86       	std	Z+9, r11	; 0x09
   16738:	15 83       	std	Z+5, r17	; 0x05
   1673a:	04 83       	std	Z+4, r16	; 0x04
   1673c:	88 e2       	ldi	r24, 0x28	; 40
   1673e:	91 e3       	ldi	r25, 0x31	; 49
   16740:	a0 e0       	ldi	r26, 0x00	; 0
   16742:	81 83       	std	Z+1, r24	; 0x01
   16744:	92 83       	std	Z+2, r25	; 0x02
   16746:	a3 83       	std	Z+3, r26	; 0x03
   16748:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1674c:	c5 01       	movw	r24, r10
   1674e:	b4 01       	movw	r22, r8
   16750:	cd b7       	in	r28, 0x3d	; 61
   16752:	de b7       	in	r29, 0x3e	; 62
   16754:	61 96       	adiw	r28, 0x11	; 17
   16756:	ee e0       	ldi	r30, 0x0E	; 14
   16758:	0c 94 36 e7 	jmp	0x1ce6c	; 0x1ce6c <__epilogue_restores__+0x8>

0001675c <amigo_init>:
   1675c:	ff 92       	push	r15
   1675e:	0f 93       	push	r16
   16760:	1f 93       	push	r17
   16762:	cf 93       	push	r28
   16764:	df 93       	push	r29
   16766:	0d e6       	ldi	r16, 0x6D	; 109
   16768:	1f e1       	ldi	r17, 0x1F	; 31
   1676a:	cb e0       	ldi	r28, 0x0B	; 11
   1676c:	d4 e0       	ldi	r29, 0x04	; 4
   1676e:	82 e0       	ldi	r24, 0x02	; 2
   16770:	f8 2e       	mov	r15, r24
   16772:	d8 01       	movw	r26, r16
   16774:	8c 91       	ld	r24, X
   16776:	81 30       	cpi	r24, 0x01	; 1
   16778:	31 f5       	brne	.+76     	; 0x167c6 <amigo_init+0x6a>
   1677a:	8c 2f       	mov	r24, r28
   1677c:	0e 94 c6 97 	call	0x12f8c	; 0x12f8c <set_active_device>
   16780:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16784:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16788:	10 82       	st	Z, r1
   1678a:	9f 01       	movw	r18, r30
   1678c:	27 5f       	subi	r18, 0xF7	; 247
   1678e:	3f 4f       	sbci	r19, 0xFF	; 255
   16790:	d9 01       	movw	r26, r18
   16792:	8d 2f       	mov	r24, r29
   16794:	1d 92       	st	X+, r1
   16796:	8a 95       	dec	r24
   16798:	e9 f7       	brne	.-6      	; 0x16794 <amigo_init+0x38>
   1679a:	2c 5f       	subi	r18, 0xFC	; 252
   1679c:	3f 4f       	sbci	r19, 0xFF	; 255
   1679e:	d9 01       	movw	r26, r18
   167a0:	8d 2f       	mov	r24, r29
   167a2:	1d 92       	st	X+, r1
   167a4:	8a 95       	dec	r24
   167a6:	e9 f7       	brne	.-6      	; 0x167a2 <amigo_init+0x46>
   167a8:	11 82       	std	Z+1, r1	; 0x01
   167aa:	15 82       	std	Z+5, r1	; 0x05
   167ac:	14 82       	std	Z+4, r1	; 0x04
   167ae:	13 82       	std	Z+3, r1	; 0x03
   167b0:	f6 82       	std	Z+6, r15	; 0x06
   167b2:	10 86       	std	Z+8, r1	; 0x08
   167b4:	17 82       	std	Z+7, r1	; 0x07
   167b6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   167ba:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   167be:	81 81       	ldd	r24, Z+1	; 0x01
   167c0:	90 e0       	ldi	r25, 0x00	; 0
   167c2:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
   167c6:	0b 50       	subi	r16, 0x0B	; 11
   167c8:	11 09       	sbc	r17, r1
   167ca:	c1 50       	subi	r28, 0x01	; 1
   167cc:	90 f6       	brcc	.-92     	; 0x16772 <amigo_init+0x16>
   167ce:	cd b7       	in	r28, 0x3d	; 61
   167d0:	de b7       	in	r29, 0x3e	; 62
   167d2:	e5 e0       	ldi	r30, 0x05	; 5
   167d4:	0c 94 3f e7 	jmp	0x1ce7e	; 0x1ce7e <__epilogue_restores__+0x1a>

000167d8 <amigo_request_logical_address>:
   167d8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   167dc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   167e0:	15 86       	std	Z+13, r1	; 0x0d
   167e2:	83 81       	ldd	r24, Z+3	; 0x03
   167e4:	86 87       	std	Z+14, r24	; 0x0e
   167e6:	84 81       	ldd	r24, Z+4	; 0x04
   167e8:	87 87       	std	Z+15, r24	; 0x0f
   167ea:	85 81       	ldd	r24, Z+5	; 0x05
   167ec:	80 8b       	std	Z+16, r24	; 0x10
   167ee:	80 e0       	ldi	r24, 0x00	; 0
   167f0:	90 e0       	ldi	r25, 0x00	; 0
   167f2:	08 95       	ret

000167f4 <amigo_request_status>:
   167f4:	00 d0       	rcall	.+0      	; 0x167f6 <amigo_request_status+0x2>
   167f6:	1f 92       	push	r1
   167f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167fc:	85 ff       	sbrs	r24, 5
   167fe:	0a c0       	rjmp	.+20     	; 0x16814 <amigo_request_status+0x20>
   16800:	8b ef       	ldi	r24, 0xFB	; 251
   16802:	91 e3       	ldi	r25, 0x31	; 49
   16804:	a0 e0       	ldi	r26, 0x00	; 0
   16806:	ed b7       	in	r30, 0x3d	; 61
   16808:	fe b7       	in	r31, 0x3e	; 62
   1680a:	81 83       	std	Z+1, r24	; 0x01
   1680c:	92 83       	std	Z+2, r25	; 0x02
   1680e:	a3 83       	std	Z+3, r26	; 0x03
   16810:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16814:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16818:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1681c:	11 86       	std	Z+9, r1	; 0x09
   1681e:	81 81       	ldd	r24, Z+1	; 0x01
   16820:	82 87       	std	Z+10, r24	; 0x0a
   16822:	8d e0       	ldi	r24, 0x0D	; 13
   16824:	83 87       	std	Z+11, r24	; 0x0b
   16826:	14 86       	std	Z+12, r1	; 0x0c
   16828:	0e 94 22 70 	call	0xe044	; 0xe044 <mmc_wp_status>
   1682c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16830:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16834:	89 2b       	or	r24, r25
   16836:	19 f0       	breq	.+6      	; 0x1683e <amigo_request_status+0x4a>
   16838:	84 85       	ldd	r24, Z+12	; 0x0c
   1683a:	80 66       	ori	r24, 0x60	; 96
   1683c:	84 87       	std	Z+12, r24	; 0x0c
   1683e:	86 81       	ldd	r24, Z+6	; 0x06
   16840:	82 30       	cpi	r24, 0x02	; 2
   16842:	31 f4       	brne	.+12     	; 0x16850 <amigo_request_status+0x5c>
   16844:	83 e1       	ldi	r24, 0x13	; 19
   16846:	81 87       	std	Z+9, r24	; 0x09
   16848:	84 85       	ldd	r24, Z+12	; 0x0c
   1684a:	88 60       	ori	r24, 0x08	; 8
   1684c:	84 87       	std	Z+12, r24	; 0x0c
   1684e:	21 c0       	rjmp	.+66     	; 0x16892 <amigo_request_status+0x9e>
   16850:	27 81       	ldd	r18, Z+7	; 0x07
   16852:	30 85       	ldd	r19, Z+8	; 0x08
   16854:	21 15       	cp	r18, r1
   16856:	31 05       	cpc	r19, r1
   16858:	11 f4       	brne	.+4      	; 0x1685e <amigo_request_status+0x6a>
   1685a:	81 30       	cpi	r24, 0x01	; 1
   1685c:	d1 f4       	brne	.+52     	; 0x16892 <amigo_request_status+0x9e>
   1685e:	26 fd       	sbrc	r18, 6
   16860:	0c c0       	rjmp	.+24     	; 0x1687a <amigo_request_status+0x86>
   16862:	25 ff       	sbrs	r18, 5
   16864:	03 c0       	rjmp	.+6      	; 0x1686c <amigo_request_status+0x78>
   16866:	8a e0       	ldi	r24, 0x0A	; 10
   16868:	81 87       	std	Z+9, r24	; 0x09
   1686a:	0d c0       	rjmp	.+26     	; 0x16886 <amigo_request_status+0x92>
   1686c:	84 85       	ldd	r24, Z+12	; 0x0c
   1686e:	24 ff       	sbrs	r18, 4
   16870:	02 c0       	rjmp	.+4      	; 0x16876 <amigo_request_status+0x82>
   16872:	83 60       	ori	r24, 0x03	; 3
   16874:	07 c0       	rjmp	.+14     	; 0x16884 <amigo_request_status+0x90>
   16876:	21 ff       	sbrs	r18, 1
   16878:	02 c0       	rjmp	.+4      	; 0x1687e <amigo_request_status+0x8a>
   1687a:	83 e1       	ldi	r24, 0x13	; 19
   1687c:	f5 cf       	rjmp	.-22     	; 0x16868 <amigo_request_status+0x74>
   1687e:	22 ff       	sbrs	r18, 2
   16880:	02 c0       	rjmp	.+4      	; 0x16886 <amigo_request_status+0x92>
   16882:	84 60       	ori	r24, 0x04	; 4
   16884:	84 87       	std	Z+12, r24	; 0x0c
   16886:	84 85       	ldd	r24, Z+12	; 0x0c
   16888:	80 61       	ori	r24, 0x10	; 16
   1688a:	84 87       	std	Z+12, r24	; 0x0c
   1688c:	83 85       	ldd	r24, Z+11	; 0x0b
   1688e:	80 68       	ori	r24, 0x80	; 128
   16890:	83 87       	std	Z+11, r24	; 0x0b
   16892:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16896:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1689a:	81 81       	ldd	r24, Z+1	; 0x01
   1689c:	90 e0       	ldi	r25, 0x00	; 0
   1689e:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   168a2:	80 e0       	ldi	r24, 0x00	; 0
   168a4:	90 e0       	ldi	r25, 0x00	; 0
   168a6:	0f 90       	pop	r0
   168a8:	0f 90       	pop	r0
   168aa:	0f 90       	pop	r0
   168ac:	08 95       	ret

000168ae <amigo_send_logical_address>:
   168ae:	a5 e0       	ldi	r26, 0x05	; 5
   168b0:	b0 e0       	ldi	r27, 0x00	; 0
   168b2:	ed e5       	ldi	r30, 0x5D	; 93
   168b4:	f4 eb       	ldi	r31, 0xB4	; 180
   168b6:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   168ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168be:	85 ff       	sbrs	r24, 5
   168c0:	0a c0       	rjmp	.+20     	; 0x168d6 <amigo_send_logical_address+0x28>
   168c2:	8d ed       	ldi	r24, 0xDD	; 221
   168c4:	91 e3       	ldi	r25, 0x31	; 49
   168c6:	a0 e0       	ldi	r26, 0x00	; 0
   168c8:	ed b7       	in	r30, 0x3d	; 61
   168ca:	fe b7       	in	r31, 0x3e	; 62
   168cc:	81 83       	std	Z+1, r24	; 0x01
   168ce:	92 83       	std	Z+2, r25	; 0x02
   168d0:	a3 83       	std	Z+3, r26	; 0x03
   168d2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   168d6:	80 e0       	ldi	r24, 0x00	; 0
   168d8:	91 e0       	ldi	r25, 0x01	; 1
   168da:	9d 83       	std	Y+5, r25	; 0x05
   168dc:	8c 83       	std	Y+4, r24	; 0x04
   168de:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   168e2:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   168e6:	ae 01       	movw	r20, r28
   168e8:	4c 5f       	subi	r20, 0xFC	; 252
   168ea:	5f 4f       	sbci	r21, 0xFF	; 255
   168ec:	64 e0       	ldi	r22, 0x04	; 4
   168ee:	70 e0       	ldi	r23, 0x00	; 0
   168f0:	0d 96       	adiw	r24, 0x0d	; 13
   168f2:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   168f6:	2c 81       	ldd	r18, Y+4	; 0x04
   168f8:	3d 81       	ldd	r19, Y+5	; 0x05
   168fa:	22 27       	eor	r18, r18
   168fc:	30 7d       	andi	r19, 0xD0	; 208
   168fe:	23 2b       	or	r18, r19
   16900:	11 f4       	brne	.+4      	; 0x16906 <amigo_send_logical_address+0x58>
   16902:	04 97       	sbiw	r24, 0x04	; 4
   16904:	c9 f0       	breq	.+50     	; 0x16938 <amigo_send_logical_address+0x8a>
   16906:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1690a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1690e:	87 81       	ldd	r24, Z+7	; 0x07
   16910:	90 85       	ldd	r25, Z+8	; 0x08
   16912:	80 62       	ori	r24, 0x20	; 32
   16914:	90 87       	std	Z+8, r25	; 0x08
   16916:	87 83       	std	Z+7, r24	; 0x07
   16918:	81 e0       	ldi	r24, 0x01	; 1
   1691a:	86 83       	std	Z+6, r24	; 0x06
   1691c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16920:	80 ff       	sbrs	r24, 0
   16922:	0a c0       	rjmp	.+20     	; 0x16938 <amigo_send_logical_address+0x8a>
   16924:	83 ec       	ldi	r24, 0xC3	; 195
   16926:	91 e3       	ldi	r25, 0x31	; 49
   16928:	a0 e0       	ldi	r26, 0x00	; 0
   1692a:	ed b7       	in	r30, 0x3d	; 61
   1692c:	fe b7       	in	r31, 0x3e	; 62
   1692e:	81 83       	std	Z+1, r24	; 0x01
   16930:	92 83       	std	Z+2, r25	; 0x02
   16932:	a3 83       	std	Z+3, r26	; 0x03
   16934:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16938:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1693c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16940:	81 81       	ldd	r24, Z+1	; 0x01
   16942:	90 e0       	ldi	r25, 0x00	; 0
   16944:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   16948:	8c 81       	ldd	r24, Y+4	; 0x04
   1694a:	9d 81       	ldd	r25, Y+5	; 0x05
   1694c:	88 27       	eor	r24, r24
   1694e:	90 7d       	andi	r25, 0xD0	; 208
   16950:	25 96       	adiw	r28, 0x05	; 5
   16952:	e2 e0       	ldi	r30, 0x02	; 2
   16954:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00016958 <amigo_send_status>:
   16958:	a5 e0       	ldi	r26, 0x05	; 5
   1695a:	b0 e0       	ldi	r27, 0x00	; 0
   1695c:	e2 eb       	ldi	r30, 0xB2	; 178
   1695e:	f4 eb       	ldi	r31, 0xB4	; 180
   16960:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   16964:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16968:	85 ff       	sbrs	r24, 5
   1696a:	0a c0       	rjmp	.+20     	; 0x16980 <amigo_send_status+0x28>
   1696c:	8e ea       	ldi	r24, 0xAE	; 174
   1696e:	91 e3       	ldi	r25, 0x31	; 49
   16970:	a0 e0       	ldi	r26, 0x00	; 0
   16972:	ed b7       	in	r30, 0x3d	; 61
   16974:	fe b7       	in	r31, 0x3e	; 62
   16976:	81 83       	std	Z+1, r24	; 0x01
   16978:	92 83       	std	Z+2, r25	; 0x02
   1697a:	a3 83       	std	Z+3, r26	; 0x03
   1697c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16980:	80 e0       	ldi	r24, 0x00	; 0
   16982:	91 e0       	ldi	r25, 0x01	; 1
   16984:	9d 83       	std	Y+5, r25	; 0x05
   16986:	8c 83       	std	Y+4, r24	; 0x04
   16988:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   1698c:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16990:	ae 01       	movw	r20, r28
   16992:	4c 5f       	subi	r20, 0xFC	; 252
   16994:	5f 4f       	sbci	r21, 0xFF	; 255
   16996:	64 e0       	ldi	r22, 0x04	; 4
   16998:	70 e0       	ldi	r23, 0x00	; 0
   1699a:	09 96       	adiw	r24, 0x09	; 9
   1699c:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   169a0:	2c 81       	ldd	r18, Y+4	; 0x04
   169a2:	3d 81       	ldd	r19, Y+5	; 0x05
   169a4:	22 27       	eor	r18, r18
   169a6:	30 7d       	andi	r19, 0xD0	; 208
   169a8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   169ac:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   169b0:	23 2b       	or	r18, r19
   169b2:	11 f4       	brne	.+4      	; 0x169b8 <amigo_send_status+0x60>
   169b4:	04 97       	sbiw	r24, 0x04	; 4
   169b6:	b1 f0       	breq	.+44     	; 0x169e4 <amigo_send_status+0x8c>
   169b8:	87 81       	ldd	r24, Z+7	; 0x07
   169ba:	90 85       	ldd	r25, Z+8	; 0x08
   169bc:	80 62       	ori	r24, 0x20	; 32
   169be:	90 87       	std	Z+8, r25	; 0x08
   169c0:	87 83       	std	Z+7, r24	; 0x07
   169c2:	81 e0       	ldi	r24, 0x01	; 1
   169c4:	86 83       	std	Z+6, r24	; 0x06
   169c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169ca:	80 ff       	sbrs	r24, 0
   169cc:	0e c0       	rjmp	.+28     	; 0x169ea <amigo_send_status+0x92>
   169ce:	84 e9       	ldi	r24, 0x94	; 148
   169d0:	91 e3       	ldi	r25, 0x31	; 49
   169d2:	a0 e0       	ldi	r26, 0x00	; 0
   169d4:	ed b7       	in	r30, 0x3d	; 61
   169d6:	fe b7       	in	r31, 0x3e	; 62
   169d8:	81 83       	std	Z+1, r24	; 0x01
   169da:	92 83       	std	Z+2, r25	; 0x02
   169dc:	a3 83       	std	Z+3, r26	; 0x03
   169de:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   169e2:	03 c0       	rjmp	.+6      	; 0x169ea <amigo_send_status+0x92>
   169e4:	10 86       	std	Z+8, r1	; 0x08
   169e6:	17 82       	std	Z+7, r1	; 0x07
   169e8:	16 82       	std	Z+6, r1	; 0x06
   169ea:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   169ee:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   169f2:	81 81       	ldd	r24, Z+1	; 0x01
   169f4:	90 e0       	ldi	r25, 0x00	; 0
   169f6:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   169fa:	8c 81       	ldd	r24, Y+4	; 0x04
   169fc:	9d 81       	ldd	r25, Y+5	; 0x05
   169fe:	88 27       	eor	r24, r24
   16a00:	90 7d       	andi	r25, 0xD0	; 208
   16a02:	25 96       	adiw	r28, 0x05	; 5
   16a04:	e2 e0       	ldi	r30, 0x02	; 2
   16a06:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00016a0a <amigo_increment>:
   16a0a:	a1 e1       	ldi	r26, 0x11	; 17
   16a0c:	b0 e0       	ldi	r27, 0x00	; 0
   16a0e:	eb e0       	ldi	r30, 0x0B	; 11
   16a10:	f5 eb       	ldi	r31, 0xB5	; 181
   16a12:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   16a16:	bc 01       	movw	r22, r24
   16a18:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16a1c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a20:	91 e1       	ldi	r25, 0x11	; 17
   16a22:	de 01       	movw	r26, r28
   16a24:	11 96       	adiw	r26, 0x01	; 1
   16a26:	01 90       	ld	r0, Z+
   16a28:	0d 92       	st	X+, r0
   16a2a:	9a 95       	dec	r25
   16a2c:	e1 f7       	brne	.-8      	; 0x16a26 <amigo_increment+0x1c>
   16a2e:	9e 81       	ldd	r25, Y+6	; 0x06
   16a30:	9f 5f       	subi	r25, 0xFF	; 255
   16a32:	9e 83       	std	Y+6, r25	; 0x06
   16a34:	ce 01       	movw	r24, r28
   16a36:	01 96       	adiw	r24, 0x01	; 1
   16a38:	c7 dd       	rcall	.-1138   	; 0x165c8 <amigo_overflow_check>
   16a3a:	00 97       	sbiw	r24, 0x00	; 0
   16a3c:	59 f4       	brne	.+22     	; 0x16a54 <amigo_increment+0x4a>
   16a3e:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   16a42:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a46:	21 e1       	ldi	r18, 0x11	; 17
   16a48:	fe 01       	movw	r30, r28
   16a4a:	31 96       	adiw	r30, 0x01	; 1
   16a4c:	01 90       	ld	r0, Z+
   16a4e:	0d 92       	st	X+, r0
   16a50:	2a 95       	dec	r18
   16a52:	e1 f7       	brne	.-8      	; 0x16a4c <amigo_increment+0x42>
   16a54:	61 96       	adiw	r28, 0x11	; 17
   16a56:	e2 e0       	ldi	r30, 0x02	; 2
   16a58:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00016a5c <amigo_seek>:
   16a5c:	0f 93       	push	r16
   16a5e:	1f 93       	push	r17
   16a60:	cf 93       	push	r28
   16a62:	df 93       	push	r29
   16a64:	ec 01       	movw	r28, r24
   16a66:	66 e8       	ldi	r22, 0x86	; 134
   16a68:	75 e1       	ldi	r23, 0x15	; 21
   16a6a:	ae dd       	rcall	.-1188   	; 0x165c8 <amigo_overflow_check>
   16a6c:	8c 01       	movw	r16, r24
   16a6e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16a72:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a76:	89 2b       	or	r24, r25
   16a78:	41 f0       	breq	.+16     	; 0x16a8a <amigo_seek+0x2e>
   16a7a:	81 e0       	ldi	r24, 0x01	; 1
   16a7c:	86 83       	std	Z+6, r24	; 0x06
   16a7e:	87 81       	ldd	r24, Z+7	; 0x07
   16a80:	90 85       	ldd	r25, Z+8	; 0x08
   16a82:	84 60       	ori	r24, 0x04	; 4
   16a84:	90 87       	std	Z+8, r25	; 0x08
   16a86:	87 83       	std	Z+7, r24	; 0x07
   16a88:	06 c0       	rjmp	.+12     	; 0x16a96 <amigo_seek+0x3a>
   16a8a:	8d 81       	ldd	r24, Y+5	; 0x05
   16a8c:	85 83       	std	Z+5, r24	; 0x05
   16a8e:	8c 81       	ldd	r24, Y+4	; 0x04
   16a90:	84 83       	std	Z+4, r24	; 0x04
   16a92:	8b 81       	ldd	r24, Y+3	; 0x03
   16a94:	83 83       	std	Z+3, r24	; 0x03
   16a96:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16a9a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16a9e:	81 81       	ldd	r24, Z+1	; 0x01
   16aa0:	90 e0       	ldi	r25, 0x00	; 0
   16aa2:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   16aa6:	c8 01       	movw	r24, r16
   16aa8:	df 91       	pop	r29
   16aaa:	cf 91       	pop	r28
   16aac:	1f 91       	pop	r17
   16aae:	0f 91       	pop	r16
   16ab0:	08 95       	ret

00016ab2 <amigo_verify>:
   16ab2:	8f 92       	push	r8
   16ab4:	9f 92       	push	r9
   16ab6:	af 92       	push	r10
   16ab8:	bf 92       	push	r11
   16aba:	ef 92       	push	r14
   16abc:	ff 92       	push	r15
   16abe:	0f 93       	push	r16
   16ac0:	1f 93       	push	r17
   16ac2:	cf 93       	push	r28
   16ac4:	df 93       	push	r29
   16ac6:	ad b7       	in	r26, 0x3d	; 61
   16ac8:	be b7       	in	r27, 0x3e	; 62
   16aca:	19 97       	sbiw	r26, 0x09	; 9
   16acc:	0f b6       	in	r0, 0x3f	; 63
   16ace:	f8 94       	cli
   16ad0:	be bf       	out	0x3e, r27	; 62
   16ad2:	0f be       	out	0x3f, r0	; 63
   16ad4:	ad bf       	out	0x3d, r26	; 61
   16ad6:	7c 01       	movw	r14, r24
   16ad8:	6b e8       	ldi	r22, 0x8B	; 139
   16ada:	75 e1       	ldi	r23, 0x15	; 21
   16adc:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16ae0:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ae4:	c7 dd       	rcall	.-1138   	; 0x16674 <amigo_chs_to_logical>
   16ae6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16aea:	25 ff       	sbrs	r18, 5
   16aec:	10 c0       	rjmp	.+32     	; 0x16b0e <amigo_verify+0x5c>
   16aee:	ed b7       	in	r30, 0x3d	; 61
   16af0:	fe b7       	in	r31, 0x3e	; 62
   16af2:	e0 86       	std	Z+8, r14	; 0x08
   16af4:	f1 86       	std	Z+9, r15	; 0x09
   16af6:	64 83       	std	Z+4, r22	; 0x04
   16af8:	75 83       	std	Z+5, r23	; 0x05
   16afa:	86 83       	std	Z+6, r24	; 0x06
   16afc:	97 83       	std	Z+7, r25	; 0x07
   16afe:	83 e5       	ldi	r24, 0x53	; 83
   16b00:	91 e3       	ldi	r25, 0x31	; 49
   16b02:	a0 e0       	ldi	r26, 0x00	; 0
   16b04:	81 83       	std	Z+1, r24	; 0x01
   16b06:	92 83       	std	Z+2, r25	; 0x02
   16b08:	a3 83       	std	Z+3, r26	; 0x03
   16b0a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16b0e:	e7 01       	movw	r28, r14
   16b10:	20 97       	sbiw	r28, 0x00	; 0
   16b12:	09 f4       	brne	.+2      	; 0x16b16 <amigo_verify+0x64>
   16b14:	4b c0       	rjmp	.+150    	; 0x16bac <amigo_verify+0xfa>
   16b16:	68 e9       	ldi	r22, 0x98	; 152
   16b18:	75 e1       	ldi	r23, 0x15	; 21
   16b1a:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16b1e:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b22:	a8 dd       	rcall	.-1200   	; 0x16674 <amigo_chs_to_logical>
   16b24:	4b 01       	movw	r8, r22
   16b26:	5c 01       	movw	r10, r24
   16b28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b2c:	86 fd       	sbrc	r24, 6
   16b2e:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
   16b32:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16b36:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b3a:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16b3e:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b42:	87 e0       	ldi	r24, 0x07	; 7
   16b44:	e8 0e       	add	r14, r24
   16b46:	f1 1c       	adc	r15, r1
   16b48:	00 85       	ldd	r16, Z+8	; 0x08
   16b4a:	11 85       	ldd	r17, Z+9	; 0x09
   16b4c:	2a ee       	ldi	r18, 0xEA	; 234
   16b4e:	3c e1       	ldi	r19, 0x1C	; 28
   16b50:	b5 01       	movw	r22, r10
   16b52:	a4 01       	movw	r20, r8
   16b54:	82 81       	ldd	r24, Z+2	; 0x02
   16b56:	93 81       	ldd	r25, Z+3	; 0x03
   16b58:	0e 94 ee 84 	call	0x109dc	; 0x109dc <dbf_open_read>
   16b5c:	7c 01       	movw	r14, r24
   16b5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b62:	86 ff       	sbrs	r24, 6
   16b64:	04 c0       	rjmp	.+8      	; 0x16b6e <amigo_verify+0xbc>
   16b66:	8f e9       	ldi	r24, 0x9F	; 159
   16b68:	90 e1       	ldi	r25, 0x10	; 16
   16b6a:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
   16b6e:	20 91 62 19 	lds	r18, 0x1962	; 0x801962 <AMIGOs>
   16b72:	30 91 63 19 	lds	r19, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b76:	f9 01       	movw	r30, r18
   16b78:	87 81       	ldd	r24, Z+7	; 0x07
   16b7a:	90 85       	ldd	r25, Z+8	; 0x08
   16b7c:	89 2b       	or	r24, r25
   16b7e:	21 f0       	breq	.+8      	; 0x16b88 <amigo_verify+0xd6>
   16b80:	81 e0       	ldi	r24, 0x01	; 1
   16b82:	f9 01       	movw	r30, r18
   16b84:	86 83       	std	Z+6, r24	; 0x06
   16b86:	15 c0       	rjmp	.+42     	; 0x16bb2 <amigo_verify+0x100>
   16b88:	80 91 64 19 	lds	r24, 0x1964	; 0x801964 <AMIGOp>
   16b8c:	90 91 65 19 	lds	r25, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b90:	fc 01       	movw	r30, r24
   16b92:	80 85       	ldd	r24, Z+8	; 0x08
   16b94:	91 85       	ldd	r25, Z+9	; 0x09
   16b96:	e8 16       	cp	r14, r24
   16b98:	f9 06       	cpc	r15, r25
   16b9a:	91 f7       	brne	.-28     	; 0x16b80 <amigo_verify+0xce>
   16b9c:	80 ea       	ldi	r24, 0xA0	; 160
   16b9e:	95 e1       	ldi	r25, 0x15	; 21
   16ba0:	34 df       	rcall	.-408    	; 0x16a0a <amigo_increment>
   16ba2:	21 97       	sbiw	r28, 0x01	; 1
   16ba4:	89 2b       	or	r24, r25
   16ba6:	09 f4       	brne	.+2      	; 0x16baa <amigo_verify+0xf8>
   16ba8:	b3 cf       	rjmp	.-154    	; 0x16b10 <amigo_verify+0x5e>
   16baa:	03 c0       	rjmp	.+6      	; 0x16bb2 <amigo_verify+0x100>
   16bac:	c0 e0       	ldi	r28, 0x00	; 0
   16bae:	d0 e0       	ldi	r29, 0x00	; 0
   16bb0:	02 c0       	rjmp	.+4      	; 0x16bb6 <amigo_verify+0x104>
   16bb2:	c1 e0       	ldi	r28, 0x01	; 1
   16bb4:	d0 e0       	ldi	r29, 0x00	; 0
   16bb6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16bba:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16bbe:	81 81       	ldd	r24, Z+1	; 0x01
   16bc0:	90 e0       	ldi	r25, 0x00	; 0
   16bc2:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   16bc6:	ce 01       	movw	r24, r28
   16bc8:	ad b7       	in	r26, 0x3d	; 61
   16bca:	be b7       	in	r27, 0x3e	; 62
   16bcc:	19 96       	adiw	r26, 0x09	; 9
   16bce:	0f b6       	in	r0, 0x3f	; 63
   16bd0:	f8 94       	cli
   16bd2:	be bf       	out	0x3e, r27	; 62
   16bd4:	0f be       	out	0x3f, r0	; 63
   16bd6:	ad bf       	out	0x3d, r26	; 61
   16bd8:	df 91       	pop	r29
   16bda:	cf 91       	pop	r28
   16bdc:	1f 91       	pop	r17
   16bde:	0f 91       	pop	r16
   16be0:	ff 90       	pop	r15
   16be2:	ef 90       	pop	r14
   16be4:	bf 90       	pop	r11
   16be6:	af 90       	pop	r10
   16be8:	9f 90       	pop	r9
   16bea:	8f 90       	pop	r8
   16bec:	08 95       	ret

00016bee <amigo_format>:
   16bee:	ef 92       	push	r14
   16bf0:	ff 92       	push	r15
   16bf2:	0f 93       	push	r16
   16bf4:	1f 93       	push	r17
   16bf6:	cf 93       	push	r28
   16bf8:	df 93       	push	r29
   16bfa:	00 d0       	rcall	.+0      	; 0x16bfc <amigo_format+0xe>
   16bfc:	1f 92       	push	r1
   16bfe:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16c02:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c06:	15 82       	std	Z+5, r1	; 0x05
   16c08:	14 82       	std	Z+4, r1	; 0x04
   16c0a:	13 82       	std	Z+3, r1	; 0x03
   16c0c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16c10:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c14:	40 85       	ldd	r20, Z+8	; 0x08
   16c16:	51 85       	ldd	r21, Z+9	; 0x09
   16c18:	68 2f       	mov	r22, r24
   16c1a:	70 e0       	ldi	r23, 0x00	; 0
   16c1c:	8a ee       	ldi	r24, 0xEA	; 234
   16c1e:	9c e1       	ldi	r25, 0x1C	; 28
   16c20:	0e 94 0e eb 	call	0x1d61c	; 0x1d61c <memset>
   16c24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c28:	85 ff       	sbrs	r24, 5
   16c2a:	0a c0       	rjmp	.+20     	; 0x16c40 <amigo_format+0x52>
   16c2c:	88 e1       	ldi	r24, 0x18	; 24
   16c2e:	91 e3       	ldi	r25, 0x31	; 49
   16c30:	a0 e0       	ldi	r26, 0x00	; 0
   16c32:	ed b7       	in	r30, 0x3d	; 61
   16c34:	fe b7       	in	r31, 0x3e	; 62
   16c36:	81 83       	std	Z+1, r24	; 0x01
   16c38:	92 83       	std	Z+2, r25	; 0x02
   16c3a:	a3 83       	std	Z+3, r26	; 0x03
   16c3c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16c40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c44:	86 fd       	sbrc	r24, 6
   16c46:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
   16c4a:	67 ea       	ldi	r22, 0xA7	; 167
   16c4c:	75 e1       	ldi	r23, 0x15	; 21
   16c4e:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16c52:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c56:	0e dd       	rcall	.-1508   	; 0x16674 <amigo_chs_to_logical>
   16c58:	ab 01       	movw	r20, r22
   16c5a:	bc 01       	movw	r22, r24
   16c5c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16c60:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c64:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16c68:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c6c:	87 e0       	ldi	r24, 0x07	; 7
   16c6e:	e8 0e       	add	r14, r24
   16c70:	f1 1c       	adc	r15, r1
   16c72:	00 85       	ldd	r16, Z+8	; 0x08
   16c74:	11 85       	ldd	r17, Z+9	; 0x09
   16c76:	2a ee       	ldi	r18, 0xEA	; 234
   16c78:	3c e1       	ldi	r19, 0x1C	; 28
   16c7a:	82 81       	ldd	r24, Z+2	; 0x02
   16c7c:	93 81       	ldd	r25, Z+3	; 0x03
   16c7e:	0e 94 45 85 	call	0x10a8a	; 0x10a8a <dbf_open_write>
   16c82:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16c86:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c8a:	27 81       	ldd	r18, Z+7	; 0x07
   16c8c:	30 85       	ldd	r19, Z+8	; 0x08
   16c8e:	21 15       	cp	r18, r1
   16c90:	31 05       	cpc	r19, r1
   16c92:	49 f4       	brne	.+18     	; 0x16ca6 <amigo_format+0xb8>
   16c94:	c0 91 64 19 	lds	r28, 0x1964	; 0x801964 <AMIGOp>
   16c98:	d0 91 65 19 	lds	r29, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c9c:	48 85       	ldd	r20, Y+8	; 0x08
   16c9e:	59 85       	ldd	r21, Y+9	; 0x09
   16ca0:	84 17       	cp	r24, r20
   16ca2:	95 07       	cpc	r25, r21
   16ca4:	41 f0       	breq	.+16     	; 0x16cb6 <amigo_format+0xc8>
   16ca6:	22 60       	ori	r18, 0x02	; 2
   16ca8:	30 87       	std	Z+8, r19	; 0x08
   16caa:	27 83       	std	Z+7, r18	; 0x07
   16cac:	81 e0       	ldi	r24, 0x01	; 1
   16cae:	86 83       	std	Z+6, r24	; 0x06
   16cb0:	c1 e0       	ldi	r28, 0x01	; 1
   16cb2:	d0 e0       	ldi	r29, 0x00	; 0
   16cb4:	0f c0       	rjmp	.+30     	; 0x16cd4 <amigo_format+0xe6>
   16cb6:	80 e0       	ldi	r24, 0x00	; 0
   16cb8:	90 e0       	ldi	r25, 0x00	; 0
   16cba:	a7 de       	rcall	.-690    	; 0x16a0a <amigo_increment>
   16cbc:	89 2b       	or	r24, r25
   16cbe:	29 f2       	breq	.-118    	; 0x16c4a <amigo_format+0x5c>
   16cc0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16cc4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16cc8:	15 82       	std	Z+5, r1	; 0x05
   16cca:	14 82       	std	Z+4, r1	; 0x04
   16ccc:	13 82       	std	Z+3, r1	; 0x03
   16cce:	16 82       	std	Z+6, r1	; 0x06
   16cd0:	c0 e0       	ldi	r28, 0x00	; 0
   16cd2:	d0 e0       	ldi	r29, 0x00	; 0
   16cd4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cd8:	86 ff       	sbrs	r24, 6
   16cda:	04 c0       	rjmp	.+8      	; 0x16ce4 <amigo_format+0xf6>
   16cdc:	87 ea       	ldi	r24, 0xA7	; 167
   16cde:	95 e1       	ldi	r25, 0x15	; 21
   16ce0:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
   16ce4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ce8:	85 ff       	sbrs	r24, 5
   16cea:	0a c0       	rjmp	.+20     	; 0x16d00 <amigo_format+0x112>
   16cec:	83 e0       	ldi	r24, 0x03	; 3
   16cee:	91 e3       	ldi	r25, 0x31	; 49
   16cf0:	a0 e0       	ldi	r26, 0x00	; 0
   16cf2:	ed b7       	in	r30, 0x3d	; 61
   16cf4:	fe b7       	in	r31, 0x3e	; 62
   16cf6:	81 83       	std	Z+1, r24	; 0x01
   16cf8:	92 83       	std	Z+2, r25	; 0x02
   16cfa:	a3 83       	std	Z+3, r26	; 0x03
   16cfc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16d00:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d04:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d08:	81 81       	ldd	r24, Z+1	; 0x01
   16d0a:	90 e0       	ldi	r25, 0x00	; 0
   16d0c:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   16d10:	ce 01       	movw	r24, r28
   16d12:	cd b7       	in	r28, 0x3d	; 61
   16d14:	de b7       	in	r29, 0x3e	; 62
   16d16:	23 96       	adiw	r28, 0x03	; 3
   16d18:	e6 e0       	ldi	r30, 0x06	; 6
   16d1a:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

00016d1e <amigo_buffered_read_command>:
   16d1e:	8f 92       	push	r8
   16d20:	9f 92       	push	r9
   16d22:	af 92       	push	r10
   16d24:	bf 92       	push	r11
   16d26:	ef 92       	push	r14
   16d28:	ff 92       	push	r15
   16d2a:	0f 93       	push	r16
   16d2c:	1f 93       	push	r17
   16d2e:	cf 93       	push	r28
   16d30:	df 93       	push	r29
   16d32:	00 d0       	rcall	.+0      	; 0x16d34 <amigo_buffered_read_command+0x16>
   16d34:	00 d0       	rcall	.+0      	; 0x16d36 <amigo_buffered_read_command+0x18>
   16d36:	1f 92       	push	r1
   16d38:	6e ea       	ldi	r22, 0xAE	; 174
   16d3a:	75 e1       	ldi	r23, 0x15	; 21
   16d3c:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16d40:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d44:	97 dc       	rcall	.-1746   	; 0x16674 <amigo_chs_to_logical>
   16d46:	4b 01       	movw	r8, r22
   16d48:	5c 01       	movw	r10, r24
   16d4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d4e:	85 ff       	sbrs	r24, 5
   16d50:	12 c0       	rjmp	.+36     	; 0x16d76 <amigo_buffered_read_command+0x58>
   16d52:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16d56:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d5a:	80 81       	ld	r24, Z
   16d5c:	90 e0       	ldi	r25, 0x00	; 0
   16d5e:	ed b7       	in	r30, 0x3d	; 61
   16d60:	fe b7       	in	r31, 0x3e	; 62
   16d62:	95 83       	std	Z+5, r25	; 0x05
   16d64:	84 83       	std	Z+4, r24	; 0x04
   16d66:	81 ef       	ldi	r24, 0xF1	; 241
   16d68:	90 e3       	ldi	r25, 0x30	; 48
   16d6a:	a0 e0       	ldi	r26, 0x00	; 0
   16d6c:	81 83       	std	Z+1, r24	; 0x01
   16d6e:	92 83       	std	Z+2, r25	; 0x02
   16d70:	a3 83       	std	Z+3, r26	; 0x03
   16d72:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16d76:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d7a:	86 fd       	sbrc	r24, 6
   16d7c:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
   16d80:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d84:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d88:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16d8c:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d90:	87 e0       	ldi	r24, 0x07	; 7
   16d92:	e8 0e       	add	r14, r24
   16d94:	f1 1c       	adc	r15, r1
   16d96:	00 85       	ldd	r16, Z+8	; 0x08
   16d98:	11 85       	ldd	r17, Z+9	; 0x09
   16d9a:	2a ee       	ldi	r18, 0xEA	; 234
   16d9c:	3c e1       	ldi	r19, 0x1C	; 28
   16d9e:	b5 01       	movw	r22, r10
   16da0:	a4 01       	movw	r20, r8
   16da2:	82 81       	ldd	r24, Z+2	; 0x02
   16da4:	93 81       	ldd	r25, Z+3	; 0x03
   16da6:	0e 94 ee 84 	call	0x109dc	; 0x109dc <dbf_open_read>
   16daa:	7c 01       	movw	r14, r24
   16dac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16db0:	86 ff       	sbrs	r24, 6
   16db2:	04 c0       	rjmp	.+8      	; 0x16dbc <amigo_buffered_read_command+0x9e>
   16db4:	8f e9       	ldi	r24, 0x9F	; 159
   16db6:	90 e1       	ldi	r25, 0x10	; 16
   16db8:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
   16dbc:	c0 91 62 19 	lds	r28, 0x1962	; 0x801962 <AMIGOs>
   16dc0:	d0 91 63 19 	lds	r29, 0x1963	; 0x801963 <AMIGOs+0x1>
   16dc4:	8f 81       	ldd	r24, Y+7	; 0x07
   16dc6:	98 85       	ldd	r25, Y+8	; 0x08
   16dc8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16dcc:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16dd0:	89 2b       	or	r24, r25
   16dd2:	29 f4       	brne	.+10     	; 0x16dde <amigo_buffered_read_command+0xc0>
   16dd4:	80 85       	ldd	r24, Z+8	; 0x08
   16dd6:	91 85       	ldd	r25, Z+9	; 0x09
   16dd8:	e8 16       	cp	r14, r24
   16dda:	f9 06       	cpc	r15, r25
   16ddc:	19 f0       	breq	.+6      	; 0x16de4 <amigo_buffered_read_command+0xc6>
   16dde:	81 e0       	ldi	r24, 0x01	; 1
   16de0:	8e 83       	std	Y+6, r24	; 0x06
   16de2:	14 c0       	rjmp	.+40     	; 0x16e0c <amigo_buffered_read_command+0xee>
   16de4:	8e ea       	ldi	r24, 0xAE	; 174
   16de6:	95 e1       	ldi	r25, 0x15	; 21
   16de8:	10 de       	rcall	.-992    	; 0x16a0a <amigo_increment>
   16dea:	89 2b       	or	r24, r25
   16dec:	59 f0       	breq	.+22     	; 0x16e04 <amigo_buffered_read_command+0xe6>
   16dee:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16df2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16df6:	81 e0       	ldi	r24, 0x01	; 1
   16df8:	86 83       	std	Z+6, r24	; 0x06
   16dfa:	87 81       	ldd	r24, Z+7	; 0x07
   16dfc:	90 85       	ldd	r25, Z+8	; 0x08
   16dfe:	84 60       	ori	r24, 0x04	; 4
   16e00:	90 87       	std	Z+8, r25	; 0x08
   16e02:	87 83       	std	Z+7, r24	; 0x07
   16e04:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e08:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e0c:	81 81       	ldd	r24, Z+1	; 0x01
   16e0e:	90 e0       	ldi	r25, 0x00	; 0
   16e10:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   16e14:	80 e0       	ldi	r24, 0x00	; 0
   16e16:	90 e0       	ldi	r25, 0x00	; 0
   16e18:	0f 90       	pop	r0
   16e1a:	0f 90       	pop	r0
   16e1c:	0f 90       	pop	r0
   16e1e:	0f 90       	pop	r0
   16e20:	0f 90       	pop	r0
   16e22:	df 91       	pop	r29
   16e24:	cf 91       	pop	r28
   16e26:	1f 91       	pop	r17
   16e28:	0f 91       	pop	r16
   16e2a:	ff 90       	pop	r15
   16e2c:	ef 90       	pop	r14
   16e2e:	bf 90       	pop	r11
   16e30:	af 90       	pop	r10
   16e32:	9f 90       	pop	r9
   16e34:	8f 90       	pop	r8
   16e36:	08 95       	ret

00016e38 <amigo_buffered_read_execute>:
   16e38:	a5 e0       	ldi	r26, 0x05	; 5
   16e3a:	b0 e0       	ldi	r27, 0x00	; 0
   16e3c:	e2 e2       	ldi	r30, 0x22	; 34
   16e3e:	f7 eb       	ldi	r31, 0xB7	; 183
   16e40:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
   16e44:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e48:	87 fd       	sbrc	r24, 7
   16e4a:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
   16e4e:	80 e0       	ldi	r24, 0x00	; 0
   16e50:	91 e0       	ldi	r25, 0x01	; 1
   16e52:	9d 83       	std	Y+5, r25	; 0x05
   16e54:	8c 83       	std	Y+4, r24	; 0x04
   16e56:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e5a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e5e:	60 85       	ldd	r22, Z+8	; 0x08
   16e60:	71 85       	ldd	r23, Z+9	; 0x09
   16e62:	ae 01       	movw	r20, r28
   16e64:	4c 5f       	subi	r20, 0xFC	; 252
   16e66:	5f 4f       	sbci	r21, 0xFF	; 255
   16e68:	8a ee       	ldi	r24, 0xEA	; 234
   16e6a:	9c e1       	ldi	r25, 0x1C	; 28
   16e6c:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   16e70:	8c 01       	movw	r16, r24
   16e72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e76:	87 ff       	sbrs	r24, 7
   16e78:	04 c0       	rjmp	.+8      	; 0x16e82 <amigo_buffered_read_execute+0x4a>
   16e7a:	8a ea       	ldi	r24, 0xAA	; 170
   16e7c:	90 e1       	ldi	r25, 0x10	; 16
   16e7e:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
   16e82:	8c 81       	ldd	r24, Y+4	; 0x04
   16e84:	9d 81       	ldd	r25, Y+5	; 0x05
   16e86:	88 27       	eor	r24, r24
   16e88:	90 7d       	andi	r25, 0xD0	; 208
   16e8a:	89 2b       	or	r24, r25
   16e8c:	49 f4       	brne	.+18     	; 0x16ea0 <amigo_buffered_read_execute+0x68>
   16e8e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e92:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e96:	80 85       	ldd	r24, Z+8	; 0x08
   16e98:	91 85       	ldd	r25, Z+9	; 0x09
   16e9a:	08 17       	cp	r16, r24
   16e9c:	19 07       	cpc	r17, r25
   16e9e:	c9 f0       	breq	.+50     	; 0x16ed2 <amigo_buffered_read_execute+0x9a>
   16ea0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16ea4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ea8:	81 e0       	ldi	r24, 0x01	; 1
   16eaa:	86 83       	std	Z+6, r24	; 0x06
   16eac:	87 81       	ldd	r24, Z+7	; 0x07
   16eae:	90 85       	ldd	r25, Z+8	; 0x08
   16eb0:	80 62       	ori	r24, 0x20	; 32
   16eb2:	90 87       	std	Z+8, r25	; 0x08
   16eb4:	87 83       	std	Z+7, r24	; 0x07
   16eb6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16eba:	80 ff       	sbrs	r24, 0
   16ebc:	0a c0       	rjmp	.+20     	; 0x16ed2 <amigo_buffered_read_execute+0x9a>
   16ebe:	87 ed       	ldi	r24, 0xD7	; 215
   16ec0:	90 e3       	ldi	r25, 0x30	; 48
   16ec2:	a0 e0       	ldi	r26, 0x00	; 0
   16ec4:	ed b7       	in	r30, 0x3d	; 61
   16ec6:	fe b7       	in	r31, 0x3e	; 62
   16ec8:	81 83       	std	Z+1, r24	; 0x01
   16eca:	92 83       	std	Z+2, r25	; 0x02
   16ecc:	a3 83       	std	Z+3, r26	; 0x03
   16ece:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16ed2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16ed6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16eda:	81 81       	ldd	r24, Z+1	; 0x01
   16edc:	90 e0       	ldi	r25, 0x00	; 0
   16ede:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   16ee2:	8c 81       	ldd	r24, Y+4	; 0x04
   16ee4:	9d 81       	ldd	r25, Y+5	; 0x05
   16ee6:	25 96       	adiw	r28, 0x05	; 5
   16ee8:	e4 e0       	ldi	r30, 0x04	; 4
   16eea:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00016eee <amigo_buffered_write>:
   16eee:	8f 92       	push	r8
   16ef0:	9f 92       	push	r9
   16ef2:	af 92       	push	r10
   16ef4:	bf 92       	push	r11
   16ef6:	ef 92       	push	r14
   16ef8:	ff 92       	push	r15
   16efa:	0f 93       	push	r16
   16efc:	1f 93       	push	r17
   16efe:	cf 93       	push	r28
   16f00:	df 93       	push	r29
   16f02:	cd b7       	in	r28, 0x3d	; 61
   16f04:	de b7       	in	r29, 0x3e	; 62
   16f06:	27 97       	sbiw	r28, 0x07	; 7
   16f08:	0f b6       	in	r0, 0x3f	; 63
   16f0a:	f8 94       	cli
   16f0c:	de bf       	out	0x3e, r29	; 62
   16f0e:	0f be       	out	0x3f, r0	; 63
   16f10:	cd bf       	out	0x3d, r28	; 61
   16f12:	6c eb       	ldi	r22, 0xBC	; 188
   16f14:	75 e1       	ldi	r23, 0x15	; 21
   16f16:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16f1a:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f1e:	aa db       	rcall	.-2220   	; 0x16674 <amigo_chs_to_logical>
   16f20:	4b 01       	movw	r8, r22
   16f22:	5c 01       	movw	r10, r24
   16f24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f28:	87 fd       	sbrc	r24, 7
   16f2a:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
   16f2e:	1f 82       	std	Y+7, r1	; 0x07
   16f30:	1e 82       	std	Y+6, r1	; 0x06
   16f32:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f36:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f3a:	60 85       	ldd	r22, Z+8	; 0x08
   16f3c:	71 85       	ldd	r23, Z+9	; 0x09
   16f3e:	ae 01       	movw	r20, r28
   16f40:	4a 5f       	subi	r20, 0xFA	; 250
   16f42:	5f 4f       	sbci	r21, 0xFF	; 255
   16f44:	8a ee       	ldi	r24, 0xEA	; 234
   16f46:	9c e1       	ldi	r25, 0x1C	; 28
   16f48:	0e 94 04 8b 	call	0x11608	; 0x11608 <gpib_read_str>
   16f4c:	7c 01       	movw	r14, r24
   16f4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f52:	85 ff       	sbrs	r24, 5
   16f54:	12 c0       	rjmp	.+36     	; 0x16f7a <amigo_buffered_write+0x8c>
   16f56:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16f5a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f5e:	80 81       	ld	r24, Z
   16f60:	90 e0       	ldi	r25, 0x00	; 0
   16f62:	ed b7       	in	r30, 0x3d	; 61
   16f64:	fe b7       	in	r31, 0x3e	; 62
   16f66:	95 83       	std	Z+5, r25	; 0x05
   16f68:	84 83       	std	Z+4, r24	; 0x04
   16f6a:	85 ec       	ldi	r24, 0xC5	; 197
   16f6c:	90 e3       	ldi	r25, 0x30	; 48
   16f6e:	a0 e0       	ldi	r26, 0x00	; 0
   16f70:	81 83       	std	Z+1, r24	; 0x01
   16f72:	92 83       	std	Z+2, r25	; 0x02
   16f74:	a3 83       	std	Z+3, r26	; 0x03
   16f76:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16f7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f7e:	87 ff       	sbrs	r24, 7
   16f80:	04 c0       	rjmp	.+8      	; 0x16f8a <amigo_buffered_write+0x9c>
   16f82:	8b ec       	ldi	r24, 0xCB	; 203
   16f84:	95 e1       	ldi	r25, 0x15	; 21
   16f86:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
   16f8a:	8e 81       	ldd	r24, Y+6	; 0x06
   16f8c:	9f 81       	ldd	r25, Y+7	; 0x07
   16f8e:	88 27       	eor	r24, r24
   16f90:	90 7d       	andi	r25, 0xD0	; 208
   16f92:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16f96:	89 2b       	or	r24, r25
   16f98:	49 f4       	brne	.+18     	; 0x16fac <amigo_buffered_write+0xbe>
   16f9a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f9e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16fa2:	80 85       	ldd	r24, Z+8	; 0x08
   16fa4:	91 85       	ldd	r25, Z+9	; 0x09
   16fa6:	e8 16       	cp	r14, r24
   16fa8:	f9 06       	cpc	r15, r25
   16faa:	c1 f0       	breq	.+48     	; 0x16fdc <amigo_buffered_write+0xee>
   16fac:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16fb0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16fb4:	81 e0       	ldi	r24, 0x01	; 1
   16fb6:	86 83       	std	Z+6, r24	; 0x06
   16fb8:	87 81       	ldd	r24, Z+7	; 0x07
   16fba:	90 85       	ldd	r25, Z+8	; 0x08
   16fbc:	80 62       	ori	r24, 0x20	; 32
   16fbe:	90 87       	std	Z+8, r25	; 0x08
   16fc0:	87 83       	std	Z+7, r24	; 0x07
   16fc2:	20 ff       	sbrs	r18, 0
   16fc4:	5e c0       	rjmp	.+188    	; 0x17082 <amigo_buffered_write+0x194>
   16fc6:	86 ea       	ldi	r24, 0xA6	; 166
   16fc8:	90 e3       	ldi	r25, 0x30	; 48
   16fca:	a0 e0       	ldi	r26, 0x00	; 0
   16fcc:	ed b7       	in	r30, 0x3d	; 61
   16fce:	fe b7       	in	r31, 0x3e	; 62
   16fd0:	81 83       	std	Z+1, r24	; 0x01
   16fd2:	92 83       	std	Z+2, r25	; 0x02
   16fd4:	a3 83       	std	Z+3, r26	; 0x03
   16fd6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   16fda:	53 c0       	rjmp	.+166    	; 0x17082 <amigo_buffered_write+0x194>
   16fdc:	26 fd       	sbrc	r18, 6
   16fde:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
   16fe2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16fe6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16fea:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16fee:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ff2:	87 e0       	ldi	r24, 0x07	; 7
   16ff4:	e8 0e       	add	r14, r24
   16ff6:	f1 1c       	adc	r15, r1
   16ff8:	00 85       	ldd	r16, Z+8	; 0x08
   16ffa:	11 85       	ldd	r17, Z+9	; 0x09
   16ffc:	2a ee       	ldi	r18, 0xEA	; 234
   16ffe:	3c e1       	ldi	r19, 0x1C	; 28
   17000:	b5 01       	movw	r22, r10
   17002:	a4 01       	movw	r20, r8
   17004:	82 81       	ldd	r24, Z+2	; 0x02
   17006:	93 81       	ldd	r25, Z+3	; 0x03
   17008:	0e 94 45 85 	call	0x10a8a	; 0x10a8a <dbf_open_write>
   1700c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17010:	86 ff       	sbrs	r24, 6
   17012:	04 c0       	rjmp	.+8      	; 0x1701c <amigo_buffered_write+0x12e>
   17014:	84 e9       	ldi	r24, 0x94	; 148
   17016:	90 e1       	ldi	r25, 0x10	; 16
   17018:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
   1701c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17020:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17024:	87 81       	ldd	r24, Z+7	; 0x07
   17026:	90 85       	ldd	r25, Z+8	; 0x08
   17028:	89 2b       	or	r24, r25
   1702a:	d9 f0       	breq	.+54     	; 0x17062 <amigo_buffered_write+0x174>
   1702c:	81 e0       	ldi	r24, 0x01	; 1
   1702e:	86 83       	std	Z+6, r24	; 0x06
   17030:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17034:	80 ff       	sbrs	r24, 0
   17036:	0a c0       	rjmp	.+20     	; 0x1704c <amigo_buffered_write+0x15e>
   17038:	86 e8       	ldi	r24, 0x86	; 134
   1703a:	90 e3       	ldi	r25, 0x30	; 48
   1703c:	a0 e0       	ldi	r26, 0x00	; 0
   1703e:	ed b7       	in	r30, 0x3d	; 61
   17040:	fe b7       	in	r31, 0x3e	; 62
   17042:	81 83       	std	Z+1, r24	; 0x01
   17044:	92 83       	std	Z+2, r25	; 0x02
   17046:	a3 83       	std	Z+3, r26	; 0x03
   17048:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1704c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17050:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17054:	81 81       	ldd	r24, Z+1	; 0x01
   17056:	90 e0       	ldi	r25, 0x00	; 0
   17058:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   1705c:	80 e0       	ldi	r24, 0x00	; 0
   1705e:	90 e0       	ldi	r25, 0x00	; 0
   17060:	1c c0       	rjmp	.+56     	; 0x1709a <amigo_buffered_write+0x1ac>
   17062:	8c eb       	ldi	r24, 0xBC	; 188
   17064:	95 e1       	ldi	r25, 0x15	; 21
   17066:	d1 dc       	rcall	.-1630   	; 0x16a0a <amigo_increment>
   17068:	89 2b       	or	r24, r25
   1706a:	59 f0       	breq	.+22     	; 0x17082 <amigo_buffered_write+0x194>
   1706c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17070:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17074:	81 e0       	ldi	r24, 0x01	; 1
   17076:	86 83       	std	Z+6, r24	; 0x06
   17078:	87 81       	ldd	r24, Z+7	; 0x07
   1707a:	90 85       	ldd	r25, Z+8	; 0x08
   1707c:	84 60       	ori	r24, 0x04	; 4
   1707e:	90 87       	std	Z+8, r25	; 0x08
   17080:	87 83       	std	Z+7, r24	; 0x07
   17082:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17086:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1708a:	81 81       	ldd	r24, Z+1	; 0x01
   1708c:	90 e0       	ldi	r25, 0x00	; 0
   1708e:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   17092:	8e 81       	ldd	r24, Y+6	; 0x06
   17094:	9f 81       	ldd	r25, Y+7	; 0x07
   17096:	88 27       	eor	r24, r24
   17098:	90 7d       	andi	r25, 0xD0	; 208
   1709a:	27 96       	adiw	r28, 0x07	; 7
   1709c:	0f b6       	in	r0, 0x3f	; 63
   1709e:	f8 94       	cli
   170a0:	de bf       	out	0x3e, r29	; 62
   170a2:	0f be       	out	0x3f, r0	; 63
   170a4:	cd bf       	out	0x3d, r28	; 61
   170a6:	df 91       	pop	r29
   170a8:	cf 91       	pop	r28
   170aa:	1f 91       	pop	r17
   170ac:	0f 91       	pop	r16
   170ae:	ff 90       	pop	r15
   170b0:	ef 90       	pop	r14
   170b2:	bf 90       	pop	r11
   170b4:	af 90       	pop	r10
   170b6:	9f 90       	pop	r9
   170b8:	8f 90       	pop	r8
   170ba:	08 95       	ret

000170bc <amigo_cmd_dsj>:
   170bc:	a8 e0       	ldi	r26, 0x08	; 8
   170be:	b0 e0       	ldi	r27, 0x00	; 0
   170c0:	e4 e6       	ldi	r30, 0x64	; 100
   170c2:	f8 eb       	ldi	r31, 0xB8	; 184
   170c4:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   170c8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170cc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   170d0:	86 81       	ldd	r24, Z+6	; 0x06
   170d2:	88 87       	std	Y+8, r24	; 0x08
   170d4:	80 e0       	ldi	r24, 0x00	; 0
   170d6:	91 e0       	ldi	r25, 0x01	; 1
   170d8:	9f 83       	std	Y+7, r25	; 0x07
   170da:	8e 83       	std	Y+6, r24	; 0x06
   170dc:	ae 01       	movw	r20, r28
   170de:	4a 5f       	subi	r20, 0xFA	; 250
   170e0:	5f 4f       	sbci	r21, 0xFF	; 255
   170e2:	61 e0       	ldi	r22, 0x01	; 1
   170e4:	70 e0       	ldi	r23, 0x00	; 0
   170e6:	ce 01       	movw	r24, r28
   170e8:	08 96       	adiw	r24, 0x08	; 8
   170ea:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
   170ee:	2e 81       	ldd	r18, Y+6	; 0x06
   170f0:	3f 81       	ldd	r19, Y+7	; 0x07
   170f2:	22 27       	eor	r18, r18
   170f4:	30 7d       	andi	r19, 0xD0	; 208
   170f6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170fa:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   170fe:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   17102:	23 2b       	or	r18, r19
   17104:	11 f4       	brne	.+4      	; 0x1710a <amigo_cmd_dsj+0x4e>
   17106:	01 97       	sbiw	r24, 0x01	; 1
   17108:	c1 f0       	breq	.+48     	; 0x1713a <amigo_cmd_dsj+0x7e>
   1710a:	81 e0       	ldi	r24, 0x01	; 1
   1710c:	86 83       	std	Z+6, r24	; 0x06
   1710e:	87 81       	ldd	r24, Z+7	; 0x07
   17110:	90 85       	ldd	r25, Z+8	; 0x08
   17112:	80 62       	ori	r24, 0x20	; 32
   17114:	90 87       	std	Z+8, r25	; 0x08
   17116:	87 83       	std	Z+7, r24	; 0x07
   17118:	40 ff       	sbrs	r20, 0
   1711a:	0a c0       	rjmp	.+20     	; 0x17130 <amigo_cmd_dsj+0x74>
   1711c:	8c e6       	ldi	r24, 0x6C	; 108
   1711e:	90 e3       	ldi	r25, 0x30	; 48
   17120:	a0 e0       	ldi	r26, 0x00	; 0
   17122:	ed b7       	in	r30, 0x3d	; 61
   17124:	fe b7       	in	r31, 0x3e	; 62
   17126:	81 83       	std	Z+1, r24	; 0x01
   17128:	92 83       	std	Z+2, r25	; 0x02
   1712a:	a3 83       	std	Z+3, r26	; 0x03
   1712c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   17130:	8e 81       	ldd	r24, Y+6	; 0x06
   17132:	9f 81       	ldd	r25, Y+7	; 0x07
   17134:	88 27       	eor	r24, r24
   17136:	90 7d       	andi	r25, 0xD0	; 208
   17138:	19 c0       	rjmp	.+50     	; 0x1716c <amigo_cmd_dsj+0xb0>
   1713a:	45 ff       	sbrs	r20, 5
   1713c:	0e c0       	rjmp	.+28     	; 0x1715a <amigo_cmd_dsj+0x9e>
   1713e:	86 81       	ldd	r24, Z+6	; 0x06
   17140:	90 e0       	ldi	r25, 0x00	; 0
   17142:	ed b7       	in	r30, 0x3d	; 61
   17144:	fe b7       	in	r31, 0x3e	; 62
   17146:	95 83       	std	Z+5, r25	; 0x05
   17148:	84 83       	std	Z+4, r24	; 0x04
   1714a:	8f e5       	ldi	r24, 0x5F	; 95
   1714c:	90 e3       	ldi	r25, 0x30	; 48
   1714e:	a0 e0       	ldi	r26, 0x00	; 0
   17150:	81 83       	std	Z+1, r24	; 0x01
   17152:	92 83       	std	Z+2, r25	; 0x02
   17154:	a3 83       	std	Z+3, r26	; 0x03
   17156:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1715a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1715e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17162:	16 82       	std	Z+6, r1	; 0x06
   17164:	10 86       	std	Z+8, r1	; 0x08
   17166:	17 82       	std	Z+7, r1	; 0x07
   17168:	80 e0       	ldi	r24, 0x00	; 0
   1716a:	90 e0       	ldi	r25, 0x00	; 0
   1716c:	28 96       	adiw	r28, 0x08	; 8
   1716e:	e2 e0       	ldi	r30, 0x02	; 2
   17170:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00017174 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   17174:	00 d0       	rcall	.+0      	; 0x17176 <amigo_cmd_clear+0x2>
   17176:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17178:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1717c:	85 ff       	sbrs	r24, 5
   1717e:	0a c0       	rjmp	.+20     	; 0x17194 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   17180:	80 e5       	ldi	r24, 0x50	; 80
   17182:	90 e3       	ldi	r25, 0x30	; 48
   17184:	a0 e0       	ldi	r26, 0x00	; 0
   17186:	ed b7       	in	r30, 0x3d	; 61
   17188:	fe b7       	in	r31, 0x3e	; 62
   1718a:	81 83       	std	Z+1, r24	; 0x01
   1718c:	92 83       	std	Z+2, r25	; 0x02
   1718e:	a3 83       	std	Z+3, r26	; 0x03
   17190:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
    AMIGOs->sector = 0;
   17194:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17198:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1719c:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   1719e:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   171a0:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   171a2:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   171a4:	10 86       	std	Z+8, r1	; 0x08
   171a6:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   171a8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   171ac:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   171b0:	81 81       	ldd	r24, Z+1	; 0x01
   171b2:	90 e0       	ldi	r25, 0x00	; 0
   171b4:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
    return(0);
}
   171b8:	80 e0       	ldi	r24, 0x00	; 0
   171ba:	90 e0       	ldi	r25, 0x00	; 0
   171bc:	0f 90       	pop	r0
   171be:	0f 90       	pop	r0
   171c0:	0f 90       	pop	r0
   171c2:	08 95       	ret

000171c4 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   171c4:	af e0       	ldi	r26, 0x0F	; 15
   171c6:	b0 e0       	ldi	r27, 0x00	; 0
   171c8:	e8 ee       	ldi	r30, 0xE8	; 232
   171ca:	f8 eb       	ldi	r31, 0xB8	; 184
   171cc:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
   171d0:	c8 2f       	mov	r28, r24
   171d2:	e6 2e       	mov	r14, r22
   171d4:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   171d6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   171da:	90 e0       	ldi	r25, 0x00	; 0
   171dc:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   171e0:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   171e4:	f1 2c       	mov	r15, r1
   171e6:	d0 e0       	ldi	r29, 0x00	; 0
   171e8:	89 2b       	or	r24, r25
   171ea:	f1 f0       	breq	.+60     	; 0x17228 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171ec:	82 2f       	mov	r24, r18
   171ee:	90 e0       	ldi	r25, 0x00	; 0
   171f0:	ed b7       	in	r30, 0x3d	; 61
   171f2:	fe b7       	in	r31, 0x3e	; 62
   171f4:	97 87       	std	Z+15, r25	; 0x0f
   171f6:	86 87       	std	Z+14, r24	; 0x0e
   171f8:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   171fc:	90 e0       	ldi	r25, 0x00	; 0
   171fe:	95 87       	std	Z+13, r25	; 0x0d
   17200:	84 87       	std	Z+12, r24	; 0x0c
   17202:	13 87       	std	Z+11, r17	; 0x0b
   17204:	02 87       	std	Z+10, r16	; 0x0a
   17206:	f1 86       	std	Z+9, r15	; 0x09
   17208:	e0 86       	std	Z+8, r14	; 0x08
   1720a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1720e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17212:	80 81       	ld	r24, Z
   17214:	90 e0       	ldi	r25, 0x00	; 0
   17216:	ed b7       	in	r30, 0x3d	; 61
   17218:	fe b7       	in	r31, 0x3e	; 62
   1721a:	97 83       	std	Z+7, r25	; 0x07
   1721c:	86 83       	std	Z+6, r24	; 0x06
   1721e:	d5 83       	std	Z+5, r29	; 0x05
   17220:	c4 83       	std	Z+4, r28	; 0x04
   17222:	89 ee       	ldi	r24, 0xE9	; 233
   17224:	9f e2       	ldi	r25, 0x2F	; 47
   17226:	51 c0       	rjmp	.+162    	; 0x172ca <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   17228:	82 2f       	mov	r24, r18
   1722a:	90 e0       	ldi	r25, 0x00	; 0
   1722c:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
   17230:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   17234:	30 91 ee 1e 	lds	r19, 0x1EEE	; 0x801eee <talking>
   17238:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   1723c:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   17240:	89 2b       	or	r24, r25
   17242:	b1 f0       	breq	.+44     	; 0x17270 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17244:	83 2f       	mov	r24, r19
   17246:	90 e0       	ldi	r25, 0x00	; 0
   17248:	ed b7       	in	r30, 0x3d	; 61
   1724a:	fe b7       	in	r31, 0x3e	; 62
   1724c:	97 87       	std	Z+15, r25	; 0x0f
   1724e:	86 87       	std	Z+14, r24	; 0x0e
   17250:	30 e0       	ldi	r19, 0x00	; 0
   17252:	35 87       	std	Z+13, r19	; 0x0d
   17254:	24 87       	std	Z+12, r18	; 0x0c
   17256:	13 87       	std	Z+11, r17	; 0x0b
   17258:	02 87       	std	Z+10, r16	; 0x0a
   1725a:	f1 86       	std	Z+9, r15	; 0x09
   1725c:	e0 86       	std	Z+8, r14	; 0x08
   1725e:	8c 91       	ld	r24, X
   17260:	90 e0       	ldi	r25, 0x00	; 0
   17262:	97 83       	std	Z+7, r25	; 0x07
   17264:	86 83       	std	Z+6, r24	; 0x06
   17266:	d5 83       	std	Z+5, r29	; 0x05
   17268:	c4 83       	std	Z+4, r28	; 0x04
   1726a:	82 e8       	ldi	r24, 0x82	; 130
   1726c:	9f e2       	ldi	r25, 0x2F	; 47
   1726e:	2d c0       	rjmp	.+90     	; 0x172ca <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   17270:	3f 35       	cpi	r19, 0x5F	; 95
   17272:	b1 f4       	brne	.+44     	; 0x172a0 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17274:	8f e5       	ldi	r24, 0x5F	; 95
   17276:	90 e0       	ldi	r25, 0x00	; 0
   17278:	ed b7       	in	r30, 0x3d	; 61
   1727a:	fe b7       	in	r31, 0x3e	; 62
   1727c:	97 87       	std	Z+15, r25	; 0x0f
   1727e:	86 87       	std	Z+14, r24	; 0x0e
   17280:	30 e0       	ldi	r19, 0x00	; 0
   17282:	35 87       	std	Z+13, r19	; 0x0d
   17284:	24 87       	std	Z+12, r18	; 0x0c
   17286:	13 87       	std	Z+11, r17	; 0x0b
   17288:	02 87       	std	Z+10, r16	; 0x0a
   1728a:	f1 86       	std	Z+9, r15	; 0x09
   1728c:	e0 86       	std	Z+8, r14	; 0x08
   1728e:	8c 91       	ld	r24, X
   17290:	90 e0       	ldi	r25, 0x00	; 0
   17292:	97 83       	std	Z+7, r25	; 0x07
   17294:	86 83       	std	Z+6, r24	; 0x06
   17296:	d5 83       	std	Z+5, r29	; 0x05
   17298:	c4 83       	std	Z+4, r28	; 0x04
   1729a:	8b e1       	ldi	r24, 0x1B	; 27
   1729c:	9f e2       	ldi	r25, 0x2F	; 47
   1729e:	15 c0       	rjmp	.+42     	; 0x172ca <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   172a0:	83 2f       	mov	r24, r19
   172a2:	90 e0       	ldi	r25, 0x00	; 0
   172a4:	ed b7       	in	r30, 0x3d	; 61
   172a6:	fe b7       	in	r31, 0x3e	; 62
   172a8:	97 87       	std	Z+15, r25	; 0x0f
   172aa:	86 87       	std	Z+14, r24	; 0x0e
   172ac:	30 e0       	ldi	r19, 0x00	; 0
   172ae:	35 87       	std	Z+13, r19	; 0x0d
   172b0:	24 87       	std	Z+12, r18	; 0x0c
   172b2:	13 87       	std	Z+11, r17	; 0x0b
   172b4:	02 87       	std	Z+10, r16	; 0x0a
   172b6:	f1 86       	std	Z+9, r15	; 0x09
   172b8:	e0 86       	std	Z+8, r14	; 0x08
   172ba:	8c 91       	ld	r24, X
   172bc:	90 e0       	ldi	r25, 0x00	; 0
   172be:	97 83       	std	Z+7, r25	; 0x07
   172c0:	86 83       	std	Z+6, r24	; 0x06
   172c2:	d5 83       	std	Z+5, r29	; 0x05
   172c4:	c4 83       	std	Z+4, r28	; 0x04
   172c6:	86 eb       	ldi	r24, 0xB6	; 182
   172c8:	9e e2       	ldi	r25, 0x2E	; 46
   172ca:	a0 e0       	ldi	r26, 0x00	; 0
   172cc:	81 83       	std	Z+1, r24	; 0x01
   172ce:	92 83       	std	Z+2, r25	; 0x02
   172d0:	a3 83       	std	Z+3, r26	; 0x03
   172d2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   172d6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   172da:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   172de:	81 81       	ldd	r24, Z+1	; 0x01
   172e0:	90 e0       	ldi	r25, 0x00	; 0
   172e2:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
    return(0);
}
   172e6:	80 e0       	ldi	r24, 0x00	; 0
   172e8:	90 e0       	ldi	r25, 0x00	; 0
   172ea:	cd b7       	in	r28, 0x3d	; 61
   172ec:	de b7       	in	r29, 0x3e	; 62
   172ee:	2f 96       	adiw	r28, 0x0f	; 15
   172f0:	e6 e0       	ldi	r30, 0x06	; 6
   172f2:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

000172f6 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   172f6:	ab e0       	ldi	r26, 0x0B	; 11
   172f8:	b0 e0       	ldi	r27, 0x00	; 0
   172fa:	e1 e8       	ldi	r30, 0x81	; 129
   172fc:	f9 eb       	ldi	r31, 0xB9	; 185
   172fe:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   17302:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   17304:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17308:	90 e0       	ldi	r25, 0x00	; 0
   1730a:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   1730e:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   17312:	d0 e0       	ldi	r29, 0x00	; 0
   17314:	89 2b       	or	r24, r25
   17316:	d1 f0       	breq	.+52     	; 0x1734c <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17318:	82 2f       	mov	r24, r18
   1731a:	90 e0       	ldi	r25, 0x00	; 0
   1731c:	ed b7       	in	r30, 0x3d	; 61
   1731e:	fe b7       	in	r31, 0x3e	; 62
   17320:	93 87       	std	Z+11, r25	; 0x0b
   17322:	82 87       	std	Z+10, r24	; 0x0a
   17324:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17328:	90 e0       	ldi	r25, 0x00	; 0
   1732a:	91 87       	std	Z+9, r25	; 0x09
   1732c:	80 87       	std	Z+8, r24	; 0x08
   1732e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17332:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17336:	80 81       	ld	r24, Z
   17338:	90 e0       	ldi	r25, 0x00	; 0
   1733a:	ed b7       	in	r30, 0x3d	; 61
   1733c:	fe b7       	in	r31, 0x3e	; 62
   1733e:	97 83       	std	Z+7, r25	; 0x07
   17340:	86 83       	std	Z+6, r24	; 0x06
   17342:	d5 83       	std	Z+5, r29	; 0x05
   17344:	c4 83       	std	Z+4, r28	; 0x04
   17346:	86 e6       	ldi	r24, 0x66	; 102
   17348:	9e e2       	ldi	r25, 0x2E	; 46
   1734a:	43 c0       	rjmp	.+134    	; 0x173d2 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   1734c:	82 2f       	mov	r24, r18
   1734e:	90 e0       	ldi	r25, 0x00	; 0
   17350:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
   17354:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   17358:	40 91 ee 1e 	lds	r20, 0x1EEE	; 0x801eee <talking>
   1735c:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   17360:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   17364:	89 2b       	or	r24, r25
   17366:	89 f0       	breq	.+34     	; 0x1738a <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17368:	50 e0       	ldi	r21, 0x00	; 0
   1736a:	ed b7       	in	r30, 0x3d	; 61
   1736c:	fe b7       	in	r31, 0x3e	; 62
   1736e:	53 87       	std	Z+11, r21	; 0x0b
   17370:	42 87       	std	Z+10, r20	; 0x0a
   17372:	30 e0       	ldi	r19, 0x00	; 0
   17374:	31 87       	std	Z+9, r19	; 0x09
   17376:	20 87       	std	Z+8, r18	; 0x08
   17378:	8c 91       	ld	r24, X
   1737a:	90 e0       	ldi	r25, 0x00	; 0
   1737c:	97 83       	std	Z+7, r25	; 0x07
   1737e:	86 83       	std	Z+6, r24	; 0x06
   17380:	d5 83       	std	Z+5, r29	; 0x05
   17382:	c4 83       	std	Z+4, r28	; 0x04
   17384:	86 e1       	ldi	r24, 0x16	; 22
   17386:	9e e2       	ldi	r25, 0x2E	; 46
   17388:	24 c0       	rjmp	.+72     	; 0x173d2 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   1738a:	4f 35       	cpi	r20, 0x5F	; 95
   1738c:	91 f4       	brne	.+36     	; 0x173b2 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1738e:	8f e5       	ldi	r24, 0x5F	; 95
   17390:	90 e0       	ldi	r25, 0x00	; 0
   17392:	ed b7       	in	r30, 0x3d	; 61
   17394:	fe b7       	in	r31, 0x3e	; 62
   17396:	93 87       	std	Z+11, r25	; 0x0b
   17398:	82 87       	std	Z+10, r24	; 0x0a
   1739a:	30 e0       	ldi	r19, 0x00	; 0
   1739c:	31 87       	std	Z+9, r19	; 0x09
   1739e:	20 87       	std	Z+8, r18	; 0x08
   173a0:	8c 91       	ld	r24, X
   173a2:	90 e0       	ldi	r25, 0x00	; 0
   173a4:	97 83       	std	Z+7, r25	; 0x07
   173a6:	86 83       	std	Z+6, r24	; 0x06
   173a8:	d5 83       	std	Z+5, r29	; 0x05
   173aa:	c4 83       	std	Z+4, r28	; 0x04
   173ac:	86 ec       	ldi	r24, 0xC6	; 198
   173ae:	9d e2       	ldi	r25, 0x2D	; 45
   173b0:	10 c0       	rjmp	.+32     	; 0x173d2 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   173b2:	50 e0       	ldi	r21, 0x00	; 0
   173b4:	ed b7       	in	r30, 0x3d	; 61
   173b6:	fe b7       	in	r31, 0x3e	; 62
   173b8:	53 87       	std	Z+11, r21	; 0x0b
   173ba:	42 87       	std	Z+10, r20	; 0x0a
   173bc:	30 e0       	ldi	r19, 0x00	; 0
   173be:	31 87       	std	Z+9, r19	; 0x09
   173c0:	20 87       	std	Z+8, r18	; 0x08
   173c2:	8c 91       	ld	r24, X
   173c4:	90 e0       	ldi	r25, 0x00	; 0
   173c6:	97 83       	std	Z+7, r25	; 0x07
   173c8:	86 83       	std	Z+6, r24	; 0x06
   173ca:	d5 83       	std	Z+5, r29	; 0x05
   173cc:	c4 83       	std	Z+4, r28	; 0x04
   173ce:	85 e7       	ldi	r24, 0x75	; 117
   173d0:	9d e2       	ldi	r25, 0x2D	; 45
   173d2:	a0 e0       	ldi	r26, 0x00	; 0
   173d4:	81 83       	std	Z+1, r24	; 0x01
   173d6:	92 83       	std	Z+2, r25	; 0x02
   173d8:	a3 83       	std	Z+3, r26	; 0x03
   173da:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   173de:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   173e2:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   173e6:	81 81       	ldd	r24, Z+1	; 0x01
   173e8:	90 e0       	ldi	r25, 0x00	; 0
   173ea:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
    return(0);
}
   173ee:	80 e0       	ldi	r24, 0x00	; 0
   173f0:	90 e0       	ldi	r25, 0x00	; 0
   173f2:	cd b7       	in	r28, 0x3d	; 61
   173f4:	de b7       	in	r29, 0x3e	; 62
   173f6:	2b 96       	adiw	r28, 0x0b	; 11
   173f8:	e2 e0       	ldi	r30, 0x02	; 2
   173fa:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

000173fe <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   173fe:	8f 30       	cpi	r24, 0x0F	; 15
   17400:	29 f0       	breq	.+10     	; 0x1740c <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   17402:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17406:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1740a:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   1740c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17410:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17414:	81 81       	ldd	r24, Z+1	; 0x01
   17416:	88 23       	and	r24, r24
   17418:	29 f0       	breq	.+10     	; 0x17424 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   1741a:	87 81       	ldd	r24, Z+7	; 0x07
   1741c:	90 85       	ldd	r25, Z+8	; 0x08
   1741e:	80 64       	ori	r24, 0x40	; 64
   17420:	90 87       	std	Z+8, r25	; 0x08
   17422:	87 83       	std	Z+7, r24	; 0x07
   17424:	08 95       	ret

00017426 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   17426:	ac e1       	ldi	r26, 0x1C	; 28
   17428:	b0 e0       	ldi	r27, 0x00	; 0
   1742a:	e9 e1       	ldi	r30, 0x19	; 25
   1742c:	fa eb       	ldi	r31, 0xBA	; 186
   1742e:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
   17432:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17434:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17438:	85 ff       	sbrs	r24, 5
   1743a:	16 c0       	rjmp	.+44     	; 0x17468 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   1743c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17440:	90 e0       	ldi	r25, 0x00	; 0
   17442:	ed b7       	in	r30, 0x3d	; 61
   17444:	fe b7       	in	r31, 0x3e	; 62
   17446:	91 87       	std	Z+9, r25	; 0x09
   17448:	80 87       	std	Z+8, r24	; 0x08
   1744a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1744e:	90 e0       	ldi	r25, 0x00	; 0
   17450:	97 83       	std	Z+7, r25	; 0x07
   17452:	86 83       	std	Z+6, r24	; 0x06
   17454:	f5 82       	std	Z+5, r15	; 0x05
   17456:	e4 82       	std	Z+4, r14	; 0x04
   17458:	83 e4       	ldi	r24, 0x43	; 67
   1745a:	9d e2       	ldi	r25, 0x2D	; 45
   1745c:	a0 e0       	ldi	r26, 0x00	; 0
   1745e:	81 83       	std	Z+1, r24	; 0x01
   17460:	92 83       	std	Z+2, r25	; 0x02
   17462:	a3 83       	std	Z+3, r26	; 0x03
   17464:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   17468:	fe e7       	ldi	r31, 0x7E	; 126
   1746a:	ef 16       	cp	r14, r31
   1746c:	f1 04       	cpc	r15, r1
   1746e:	f1 f5       	brne	.+124    	; 0x174ec <Amigo_Command+0xc6>
   17470:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17474:	90 e0       	ldi	r25, 0x00	; 0
   17476:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
   1747a:	89 2b       	or	r24, r25
   1747c:	09 f4       	brne	.+2      	; 0x17480 <Amigo_Command+0x5a>
   1747e:	86 c0       	rjmp	.+268    	; 0x1758c <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17480:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17484:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17488:	81 81       	ldd	r24, Z+1	; 0x01
   1748a:	90 e0       	ldi	r25, 0x00	; 0
   1748c:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
        status = EOI_FLAG;
   17490:	80 e0       	ldi	r24, 0x00	; 0
   17492:	91 e0       	ldi	r25, 0x01	; 1
   17494:	9c 8f       	std	Y+28, r25	; 0x1c
   17496:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17498:	ae 01       	movw	r20, r28
   1749a:	45 5e       	subi	r20, 0xE5	; 229
   1749c:	5f 4f       	sbci	r21, 0xFF	; 255
   1749e:	60 e0       	ldi	r22, 0x00	; 0
   174a0:	72 e0       	ldi	r23, 0x02	; 2
   174a2:	8a ee       	ldi	r24, 0xEA	; 234
   174a4:	9c e1       	ldi	r25, 0x1C	; 28
   174a6:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   174aa:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   174ae:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   174b2:	81 81       	ldd	r24, Z+1	; 0x01
   174b4:	90 e0       	ldi	r25, 0x00	; 0
   174b6:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
        if(status & ERROR_MASK)
   174ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
   174bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
   174be:	88 27       	eor	r24, r24
   174c0:	90 7d       	andi	r25, 0xD0	; 208
   174c2:	89 2b       	or	r24, r25
   174c4:	09 f4       	brne	.+2      	; 0x174c8 <Amigo_Command+0xa2>
   174c6:	89 c2       	rjmp	.+1298   	; 0x179da <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   174c8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   174cc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   174d0:	81 e0       	ldi	r24, 0x01	; 1
   174d2:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   174d4:	87 81       	ldd	r24, Z+7	; 0x07
   174d6:	90 85       	ldd	r25, Z+8	; 0x08
   174d8:	80 62       	ori	r24, 0x20	; 32
   174da:	90 87       	std	Z+8, r25	; 0x08
   174dc:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   174de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174e2:	80 ff       	sbrs	r24, 0
   174e4:	7a c2       	rjmp	.+1268   	; 0x179da <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   174e6:	81 e2       	ldi	r24, 0x21	; 33
   174e8:	9d e2       	ldi	r25, 0x2D	; 45
   174ea:	8e c0       	rjmp	.+284    	; 0x17608 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   174ec:	ff e7       	ldi	r31, 0x7F	; 127
   174ee:	ef 16       	cp	r14, r31
   174f0:	f1 04       	cpc	r15, r1
   174f2:	09 f0       	breq	.+2      	; 0x174f6 <Amigo_Command+0xd0>
   174f4:	4b c0       	rjmp	.+150    	; 0x1758c <Amigo_Command+0x166>
   174f6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   174fa:	90 e0       	ldi	r25, 0x00	; 0
   174fc:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17500:	89 2b       	or	r24, r25
   17502:	09 f4       	brne	.+2      	; 0x17506 <Amigo_Command+0xe0>
   17504:	43 c0       	rjmp	.+134    	; 0x1758c <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17506:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1750a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1750e:	81 81       	ldd	r24, Z+1	; 0x01
   17510:	90 e0       	ldi	r25, 0x00	; 0
   17512:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   17516:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1751a:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   1751c:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   17520:	80 e0       	ldi	r24, 0x00	; 0
   17522:	91 e0       	ldi	r25, 0x01	; 1
   17524:	9c 8f       	std	Y+28, r25	; 0x1c
   17526:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17528:	ae 01       	movw	r20, r28
   1752a:	45 5e       	subi	r20, 0xE5	; 229
   1752c:	5f 4f       	sbci	r21, 0xFF	; 255
   1752e:	60 e0       	ldi	r22, 0x00	; 0
   17530:	72 e0       	ldi	r23, 0x02	; 2
   17532:	8a ee       	ldi	r24, 0xEA	; 234
   17534:	9c e1       	ldi	r25, 0x1C	; 28
   17536:	0e 94 04 8b 	call	0x11608	; 0x11608 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   1753a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1753e:	87 ff       	sbrs	r24, 7
   17540:	04 c0       	rjmp	.+8      	; 0x1754a <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   17542:	8b ec       	ldi	r24, 0xCB	; 203
   17544:	95 e1       	ldi	r25, 0x15	; 21
   17546:	0e 94 ae 85 	call	0x10b5c	; 0x10b5c <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1754a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1754e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17552:	81 81       	ldd	r24, Z+1	; 0x01
   17554:	90 e0       	ldi	r25, 0x00	; 0
   17556:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
        if(status & ERROR_MASK)
   1755a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1755c:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1755e:	88 27       	eor	r24, r24
   17560:	90 7d       	andi	r25, 0xD0	; 208
   17562:	89 2b       	or	r24, r25
   17564:	09 f4       	brne	.+2      	; 0x17568 <Amigo_Command+0x142>
   17566:	39 c2       	rjmp	.+1138   	; 0x179da <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17568:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1756c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17570:	81 e0       	ldi	r24, 0x01	; 1
   17572:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17574:	87 81       	ldd	r24, Z+7	; 0x07
   17576:	90 85       	ldd	r25, Z+8	; 0x08
   17578:	80 62       	ori	r24, 0x20	; 32
   1757a:	90 87       	std	Z+8, r25	; 0x08
   1757c:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   1757e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17582:	80 ff       	sbrs	r24, 0
   17584:	2a c2       	rjmp	.+1108   	; 0x179da <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   17586:	80 e0       	ldi	r24, 0x00	; 0
   17588:	9d e2       	ldi	r25, 0x2D	; 45
   1758a:	3e c0       	rjmp	.+124    	; 0x17608 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1758c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17590:	90 e0       	ldi	r25, 0x00	; 0
   17592:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17596:	89 2b       	or	r24, r25
   17598:	19 f4       	brne	.+6      	; 0x175a0 <Amigo_Command+0x17a>
        return(0);
   1759a:	80 e0       	ldi	r24, 0x00	; 0
   1759c:	90 e0       	ldi	r25, 0x00	; 0
   1759e:	25 c2       	rjmp	.+1098   	; 0x179ea <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   175a0:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   175a4:	90 e0       	ldi	r25, 0x00	; 0
   175a6:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
   175aa:	89 2b       	or	r24, r25
   175ac:	b1 f7       	brne	.-20     	; 0x1759a <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   175ae:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   175b2:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   175b6:	81 81       	ldd	r24, Z+1	; 0x01
   175b8:	90 e0       	ldi	r25, 0x00	; 0
   175ba:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   175be:	80 e0       	ldi	r24, 0x00	; 0
   175c0:	91 e0       	ldi	r25, 0x01	; 1
   175c2:	9c 8f       	std	Y+28, r25	; 0x1c
   175c4:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   175c6:	ae 01       	movw	r20, r28
   175c8:	45 5e       	subi	r20, 0xE5	; 229
   175ca:	5f 4f       	sbci	r21, 0xFF	; 255
   175cc:	60 e0       	ldi	r22, 0x00	; 0
   175ce:	72 e0       	ldi	r23, 0x02	; 2
   175d0:	8a ee       	ldi	r24, 0xEA	; 234
   175d2:	9c e1       	ldi	r25, 0x1C	; 28
   175d4:	0e 94 04 8b 	call	0x11608	; 0x11608 <gpib_read_str>
   175d8:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   175da:	8b 8d       	ldd	r24, Y+27	; 0x1b
   175dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
   175de:	88 27       	eor	r24, r24
   175e0:	90 7d       	andi	r25, 0xD0	; 208
   175e2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   175e6:	89 2b       	or	r24, r25
   175e8:	c1 f0       	breq	.+48     	; 0x1761a <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   175ea:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   175ee:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   175f2:	81 e0       	ldi	r24, 0x01	; 1
   175f4:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   175f6:	87 81       	ldd	r24, Z+7	; 0x07
   175f8:	90 85       	ldd	r25, Z+8	; 0x08
   175fa:	80 62       	ori	r24, 0x20	; 32
   175fc:	90 87       	std	Z+8, r25	; 0x08
   175fe:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   17600:	20 ff       	sbrs	r18, 0
   17602:	eb c1       	rjmp	.+982    	; 0x179da <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   17604:	8f ed       	ldi	r24, 0xDF	; 223
   17606:	9c e2       	ldi	r25, 0x2C	; 44
   17608:	a0 e0       	ldi	r26, 0x00	; 0
   1760a:	ed b7       	in	r30, 0x3d	; 61
   1760c:	fe b7       	in	r31, 0x3e	; 62
   1760e:	81 83       	std	Z+1, r24	; 0x01
   17610:	92 83       	std	Z+2, r25	; 0x02
   17612:	a3 83       	std	Z+3, r26	; 0x03
   17614:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   17618:	e0 c1       	rjmp	.+960    	; 0x179da <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1761a:	25 ff       	sbrs	r18, 5
   1761c:	0e c0       	rjmp	.+28     	; 0x1763a <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   1761e:	ed b7       	in	r30, 0x3d	; 61
   17620:	fe b7       	in	r31, 0x3e	; 62
   17622:	17 83       	std	Z+7, r17	; 0x07
   17624:	06 83       	std	Z+6, r16	; 0x06
   17626:	f5 82       	std	Z+5, r15	; 0x05
   17628:	e4 82       	std	Z+4, r14	; 0x04
   1762a:	80 eb       	ldi	r24, 0xB0	; 176
   1762c:	9c e2       	ldi	r25, 0x2C	; 44
   1762e:	a0 e0       	ldi	r26, 0x00	; 0
   17630:	81 83       	std	Z+1, r24	; 0x01
   17632:	92 83       	std	Z+2, r25	; 0x02
   17634:	a3 83       	std	Z+3, r26	; 0x03
   17636:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            secondary, len);
#endif
    if(!len)
   1763a:	01 15       	cp	r16, r1
   1763c:	11 05       	cpc	r17, r1
   1763e:	61 f4       	brne	.+24     	; 0x17658 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   17640:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17644:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17648:	81 e0       	ldi	r24, 0x01	; 1
   1764a:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1764c:	87 81       	ldd	r24, Z+7	; 0x07
   1764e:	90 85       	ldd	r25, Z+8	; 0x08
   17650:	80 62       	ori	r24, 0x20	; 32
   17652:	90 87       	std	Z+8, r25	; 0x08
   17654:	87 83       	std	Z+7, r24	; 0x07
   17656:	c1 c1       	rjmp	.+898    	; 0x179da <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17658:	60 91 ea 1c 	lds	r22, 0x1CEA	; 0x801cea <gpib_iobuff>

    if (secondary == 0x68)
   1765c:	f8 e6       	ldi	r31, 0x68	; 104
   1765e:	ef 16       	cp	r14, r31
   17660:	f1 04       	cpc	r15, r1
   17662:	09 f0       	breq	.+2      	; 0x17666 <Amigo_Command+0x240>
   17664:	28 c1       	rjmp	.+592    	; 0x178b6 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   17666:	61 11       	cpse	r22, r1
   17668:	2e c0       	rjmp	.+92     	; 0x176c6 <Amigo_Command+0x2a0>
   1766a:	02 30       	cpi	r16, 0x02	; 2
   1766c:	11 05       	cpc	r17, r1
   1766e:	09 f0       	breq	.+2      	; 0x17672 <Amigo_Command+0x24c>
   17670:	b9 c1       	rjmp	.+882    	; 0x179e4 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17672:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17676:	85 ff       	sbrs	r24, 5
   17678:	0a c0       	rjmp	.+20     	; 0x1768e <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   1767a:	80 e9       	ldi	r24, 0x90	; 144
   1767c:	9c e2       	ldi	r25, 0x2C	; 44
   1767e:	a0 e0       	ldi	r26, 0x00	; 0
   17680:	ed b7       	in	r30, 0x3d	; 61
   17682:	fe b7       	in	r31, 0x3e	; 62
   17684:	81 83       	std	Z+1, r24	; 0x01
   17686:	92 83       	std	Z+2, r25	; 0x02
   17688:	a3 83       	std	Z+3, r26	; 0x03
   1768a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   1768e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17692:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17696:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17698:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   1769a:	10 86       	std	Z+8, r1	; 0x08
   1769c:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   1769e:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   176a0:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   176a4:	98 2f       	mov	r25, r24
   176a6:	92 95       	swap	r25
   176a8:	96 95       	lsr	r25
   176aa:	96 95       	lsr	r25
   176ac:	93 70       	andi	r25, 0x03	; 3
   176ae:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   176b0:	8f 73       	andi	r24, 0x3F	; 63
   176b2:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   176b4:	ce 01       	movw	r24, r28
   176b6:	0a 96       	adiw	r24, 0x0a	; 10
   176b8:	d1 d9       	rcall	.-3166   	; 0x16a5c <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   176ba:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   176be:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   176c2:	85 e0       	ldi	r24, 0x05	; 5
   176c4:	19 c1       	rjmp	.+562    	; 0x178f8 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   176c6:	62 30       	cpi	r22, 0x02	; 2
   176c8:	09 f0       	breq	.+2      	; 0x176cc <Amigo_Command+0x2a6>
   176ca:	3f c0       	rjmp	.+126    	; 0x1774a <Amigo_Command+0x324>
   176cc:	05 30       	cpi	r16, 0x05	; 5
   176ce:	11 05       	cpc	r17, r1
   176d0:	d1 f4       	brne	.+52     	; 0x17706 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176d6:	85 ff       	sbrs	r24, 5
   176d8:	0a c0       	rjmp	.+20     	; 0x176ee <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   176da:	8c e7       	ldi	r24, 0x7C	; 124
   176dc:	9c e2       	ldi	r25, 0x2C	; 44
   176de:	a0 e0       	ldi	r26, 0x00	; 0
   176e0:	ed b7       	in	r30, 0x3d	; 61
   176e2:	fe b7       	in	r31, 0x3e	; 62
   176e4:	81 83       	std	Z+1, r24	; 0x01
   176e6:	92 83       	std	Z+2, r25	; 0x02
   176e8:	a3 83       	std	Z+3, r26	; 0x03
   176ea:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176ee:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   176f2:	85 de       	rcall	.-758    	; 0x173fe <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   176f4:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   176f8:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   176fa:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   176fe:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17700:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   17704:	1d c0       	rjmp	.+58     	; 0x17740 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17706:	06 30       	cpi	r16, 0x06	; 6
   17708:	11 05       	cpc	r17, r1
   1770a:	09 f0       	breq	.+2      	; 0x1770e <Amigo_Command+0x2e8>
   1770c:	6b c1       	rjmp	.+726    	; 0x179e4 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1770e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17712:	85 ff       	sbrs	r24, 5
   17714:	0a c0       	rjmp	.+20     	; 0x1772a <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17716:	88 e6       	ldi	r24, 0x68	; 104
   17718:	9c e2       	ldi	r25, 0x2C	; 44
   1771a:	a0 e0       	ldi	r26, 0x00	; 0
   1771c:	ed b7       	in	r30, 0x3d	; 61
   1771e:	fe b7       	in	r31, 0x3e	; 62
   17720:	81 83       	std	Z+1, r24	; 0x01
   17722:	92 83       	std	Z+2, r25	; 0x02
   17724:	a3 83       	std	Z+3, r26	; 0x03
   17726:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1772a:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1772e:	67 de       	rcall	.-818    	; 0x173fe <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17730:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   17734:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17736:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   1773a:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1773c:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   17740:	8f 87       	std	Y+15, r24	; 0x0f
   17742:	ce 01       	movw	r24, r28
   17744:	0a 96       	adiw	r24, 0x0a	; 10
   17746:	8a d9       	rcall	.-3308   	; 0x16a5c <amigo_seek>
   17748:	d8 c0       	rjmp	.+432    	; 0x178fa <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   1774a:	63 30       	cpi	r22, 0x03	; 3
   1774c:	e9 f4       	brne	.+58     	; 0x17788 <Amigo_Command+0x362>
   1774e:	02 30       	cpi	r16, 0x02	; 2
   17750:	11 05       	cpc	r17, r1
   17752:	09 f0       	breq	.+2      	; 0x17756 <Amigo_Command+0x330>
   17754:	47 c1       	rjmp	.+654    	; 0x179e4 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17756:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1775a:	85 ff       	sbrs	r24, 5
   1775c:	0a c0       	rjmp	.+20     	; 0x17772 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   1775e:	8f e3       	ldi	r24, 0x3F	; 63
   17760:	9c e2       	ldi	r25, 0x2C	; 44
   17762:	a0 e0       	ldi	r26, 0x00	; 0
   17764:	ed b7       	in	r30, 0x3d	; 61
   17766:	fe b7       	in	r31, 0x3e	; 62
   17768:	81 83       	std	Z+1, r24	; 0x01
   1776a:	92 83       	std	Z+2, r25	; 0x02
   1776c:	a3 83       	std	Z+3, r26	; 0x03
   1776e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17772:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            amigo_request_status();
   17776:	43 de       	rcall	.-890    	; 0x173fe <amigo_check_unit>
   17778:	3d d8       	rcall	.-3974   	; 0x167f4 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   1777a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1777e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17782:	83 e0       	ldi	r24, 0x03	; 3
   17784:	80 83       	st	Z, r24
   17786:	29 c1       	rjmp	.+594    	; 0x179da <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17788:	65 30       	cpi	r22, 0x05	; 5
   1778a:	d9 f4       	brne	.+54     	; 0x177c2 <Amigo_Command+0x39c>
   1778c:	02 30       	cpi	r16, 0x02	; 2
   1778e:	11 05       	cpc	r17, r1
   17790:	09 f0       	breq	.+2      	; 0x17794 <Amigo_Command+0x36e>
   17792:	28 c1       	rjmp	.+592    	; 0x179e4 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17794:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17798:	85 ff       	sbrs	r24, 5
   1779a:	0a c0       	rjmp	.+20     	; 0x177b0 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   1779c:	8e e1       	ldi	r24, 0x1E	; 30
   1779e:	9c e2       	ldi	r25, 0x2C	; 44
   177a0:	a0 e0       	ldi	r26, 0x00	; 0
   177a2:	ed b7       	in	r30, 0x3d	; 61
   177a4:	fe b7       	in	r31, 0x3e	; 62
   177a6:	81 83       	std	Z+1, r24	; 0x01
   177a8:	92 83       	std	Z+2, r25	; 0x02
   177aa:	a3 83       	std	Z+3, r26	; 0x03
   177ac:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177b0:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   177b4:	24 de       	rcall	.-952    	; 0x173fe <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   177b6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   177ba:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   177be:	86 e0       	ldi	r24, 0x06	; 6
   177c0:	e7 c0       	rjmp	.+462    	; 0x17990 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   177c2:	67 30       	cpi	r22, 0x07	; 7
   177c4:	f9 f4       	brne	.+62     	; 0x17804 <Amigo_Command+0x3de>
   177c6:	04 30       	cpi	r16, 0x04	; 4
   177c8:	11 05       	cpc	r17, r1
   177ca:	09 f0       	breq	.+2      	; 0x177ce <Amigo_Command+0x3a8>
   177cc:	0b c1       	rjmp	.+534    	; 0x179e4 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177d2:	85 ff       	sbrs	r24, 5
   177d4:	0a c0       	rjmp	.+20     	; 0x177ea <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   177d6:	8e e0       	ldi	r24, 0x0E	; 14
   177d8:	9c e2       	ldi	r25, 0x2C	; 44
   177da:	a0 e0       	ldi	r26, 0x00	; 0
   177dc:	ed b7       	in	r30, 0x3d	; 61
   177de:	fe b7       	in	r31, 0x3e	; 62
   177e0:	81 83       	std	Z+1, r24	; 0x01
   177e2:	92 83       	std	Z+2, r25	; 0x02
   177e4:	a3 83       	std	Z+3, r26	; 0x03
   177e6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177ea:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   177ee:	07 de       	rcall	.-1010   	; 0x173fe <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   177f0:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   177f4:	90 e0       	ldi	r25, 0x00	; 0
   177f6:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   177f8:	88 27       	eor	r24, r24
   177fa:	20 91 ed 1c 	lds	r18, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   177fe:	82 2b       	or	r24, r18
   17800:	58 d9       	rcall	.-3408   	; 0x16ab2 <amigo_verify>
   17802:	f3 c0       	rjmp	.+486    	; 0x179ea <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   17804:	68 30       	cpi	r22, 0x08	; 8
   17806:	d9 f4       	brne	.+54     	; 0x1783e <Amigo_Command+0x418>
   17808:	02 30       	cpi	r16, 0x02	; 2
   1780a:	11 05       	cpc	r17, r1
   1780c:	09 f0       	breq	.+2      	; 0x17810 <Amigo_Command+0x3ea>
   1780e:	ea c0       	rjmp	.+468    	; 0x179e4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17810:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17814:	85 ff       	sbrs	r24, 5
   17816:	0a c0       	rjmp	.+20     	; 0x1782c <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   17818:	8c ee       	ldi	r24, 0xEC	; 236
   1781a:	9b e2       	ldi	r25, 0x2B	; 43
   1781c:	a0 e0       	ldi	r26, 0x00	; 0
   1781e:	ed b7       	in	r30, 0x3d	; 61
   17820:	fe b7       	in	r31, 0x3e	; 62
   17822:	81 83       	std	Z+1, r24	; 0x01
   17824:	92 83       	std	Z+2, r25	; 0x02
   17826:	a3 83       	std	Z+3, r26	; 0x03
   17828:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1782c:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17830:	e6 dd       	rcall	.-1076   	; 0x173fe <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17832:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17836:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1783a:	88 e0       	ldi	r24, 0x08	; 8
   1783c:	5d c0       	rjmp	.+186    	; 0x178f8 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   1783e:	86 2f       	mov	r24, r22
   17840:	8f 7d       	andi	r24, 0xDF	; 223
   17842:	8b 30       	cpi	r24, 0x0B	; 11
   17844:	d9 f4       	brne	.+54     	; 0x1787c <Amigo_Command+0x456>
   17846:	02 30       	cpi	r16, 0x02	; 2
   17848:	11 05       	cpc	r17, r1
   1784a:	09 f0       	breq	.+2      	; 0x1784e <Amigo_Command+0x428>
   1784c:	cb c0       	rjmp	.+406    	; 0x179e4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1784e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17852:	85 ff       	sbrs	r24, 5
   17854:	0a c0       	rjmp	.+20     	; 0x1786a <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   17856:	80 ed       	ldi	r24, 0xD0	; 208
   17858:	9b e2       	ldi	r25, 0x2B	; 43
   1785a:	a0 e0       	ldi	r26, 0x00	; 0
   1785c:	ed b7       	in	r30, 0x3d	; 61
   1785e:	fe b7       	in	r31, 0x3e	; 62
   17860:	81 83       	std	Z+1, r24	; 0x01
   17862:	92 83       	std	Z+2, r25	; 0x02
   17864:	a3 83       	std	Z+3, r26	; 0x03
   17866:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1786a:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1786e:	c7 dd       	rcall	.-1138   	; 0x173fe <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   17870:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17874:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17878:	8a e0       	ldi	r24, 0x0A	; 10
   1787a:	3e c0       	rjmp	.+124    	; 0x178f8 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   1787c:	64 31       	cpi	r22, 0x14	; 20
   1787e:	09 f0       	breq	.+2      	; 0x17882 <Amigo_Command+0x45c>
   17880:	b1 c0       	rjmp	.+354    	; 0x179e4 <Amigo_Command+0x5be>
   17882:	02 30       	cpi	r16, 0x02	; 2
   17884:	11 05       	cpc	r17, r1
   17886:	09 f0       	breq	.+2      	; 0x1788a <Amigo_Command+0x464>
   17888:	ad c0       	rjmp	.+346    	; 0x179e4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1788a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1788e:	85 ff       	sbrs	r24, 5
   17890:	0a c0       	rjmp	.+20     	; 0x178a6 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   17892:	87 ea       	ldi	r24, 0xA7	; 167
   17894:	9b e2       	ldi	r25, 0x2B	; 43
   17896:	a0 e0       	ldi	r26, 0x00	; 0
   17898:	ed b7       	in	r30, 0x3d	; 61
   1789a:	fe b7       	in	r31, 0x3e	; 62
   1789c:	81 83       	std	Z+1, r24	; 0x01
   1789e:	92 83       	std	Z+2, r25	; 0x02
   178a0:	a3 83       	std	Z+3, r26	; 0x03
   178a2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
            amigo_request_logical_address();
   178a6:	0e 94 ec b3 	call	0x167d8	; 0x167d8 <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   178aa:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   178ae:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   178b2:	84 e0       	ldi	r24, 0x04	; 4
   178b4:	21 c0       	rjmp	.+66     	; 0x178f8 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   178b6:	f9 e6       	ldi	r31, 0x69	; 105
   178b8:	ef 16       	cp	r14, r31
   178ba:	f1 04       	cpc	r15, r1
   178bc:	39 f5       	brne	.+78     	; 0x1790c <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   178be:	68 30       	cpi	r22, 0x08	; 8
   178c0:	09 f0       	breq	.+2      	; 0x178c4 <Amigo_Command+0x49e>
   178c2:	90 c0       	rjmp	.+288    	; 0x179e4 <Amigo_Command+0x5be>
   178c4:	02 30       	cpi	r16, 0x02	; 2
   178c6:	11 05       	cpc	r17, r1
   178c8:	09 f0       	breq	.+2      	; 0x178cc <Amigo_Command+0x4a6>
   178ca:	8c c0       	rjmp	.+280    	; 0x179e4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178d0:	85 ff       	sbrs	r24, 5
   178d2:	0a c0       	rjmp	.+20     	; 0x178e8 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   178d4:	87 e8       	ldi	r24, 0x87	; 135
   178d6:	9b e2       	ldi	r25, 0x2B	; 43
   178d8:	a0 e0       	ldi	r26, 0x00	; 0
   178da:	ed b7       	in	r30, 0x3d	; 61
   178dc:	fe b7       	in	r31, 0x3e	; 62
   178de:	81 83       	std	Z+1, r24	; 0x01
   178e0:	92 83       	std	Z+2, r25	; 0x02
   178e2:	a3 83       	std	Z+3, r26	; 0x03
   178e4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178e8:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   178ec:	88 dd       	rcall	.-1264   	; 0x173fe <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   178ee:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   178f2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   178f6:	89 e0       	ldi	r24, 0x09	; 9
   178f8:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   178fa:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   178fe:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17902:	81 81       	ldd	r24, Z+1	; 0x01
   17904:	90 e0       	ldi	r25, 0x00	; 0
   17906:	0e 94 76 86 	call	0x10cec	; 0x10cec <gpib_enable_PPR>
   1790a:	67 c0       	rjmp	.+206    	; 0x179da <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   1790c:	fa e6       	ldi	r31, 0x6A	; 106
   1790e:	ef 16       	cp	r14, r31
   17910:	f1 04       	cpc	r15, r1
   17912:	09 f0       	breq	.+2      	; 0x17916 <Amigo_Command+0x4f0>
   17914:	40 c0       	rjmp	.+128    	; 0x17996 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   17916:	68 30       	cpi	r22, 0x08	; 8
   17918:	f1 f4       	brne	.+60     	; 0x17956 <Amigo_Command+0x530>
   1791a:	02 30       	cpi	r16, 0x02	; 2
   1791c:	11 05       	cpc	r17, r1
   1791e:	09 f0       	breq	.+2      	; 0x17922 <Amigo_Command+0x4fc>
   17920:	61 c0       	rjmp	.+194    	; 0x179e4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17922:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17926:	85 ff       	sbrs	r24, 5
   17928:	0a c0       	rjmp	.+20     	; 0x1793e <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   1792a:	8c e5       	ldi	r24, 0x5C	; 92
   1792c:	9b e2       	ldi	r25, 0x2B	; 43
   1792e:	a0 e0       	ldi	r26, 0x00	; 0
   17930:	ed b7       	in	r30, 0x3d	; 61
   17932:	fe b7       	in	r31, 0x3e	; 62
   17934:	81 83       	std	Z+1, r24	; 0x01
   17936:	92 83       	std	Z+2, r25	; 0x02
   17938:	a3 83       	std	Z+3, r26	; 0x03
   1793a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1793e:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17942:	5d dd       	rcall	.-1350   	; 0x173fe <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17944:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17948:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1794c:	82 e0       	ldi	r24, 0x02	; 2
   1794e:	80 83       	st	Z, r24
            amigo_request_status();
   17950:	0e 94 fa b3 	call	0x167f4	; 0x167f4 <amigo_request_status>
   17954:	42 c0       	rjmp	.+132    	; 0x179da <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17956:	65 30       	cpi	r22, 0x05	; 5
   17958:	09 f0       	breq	.+2      	; 0x1795c <Amigo_Command+0x536>
   1795a:	44 c0       	rjmp	.+136    	; 0x179e4 <Amigo_Command+0x5be>
   1795c:	02 30       	cpi	r16, 0x02	; 2
   1795e:	11 05       	cpc	r17, r1
   17960:	09 f0       	breq	.+2      	; 0x17964 <Amigo_Command+0x53e>
   17962:	40 c0       	rjmp	.+128    	; 0x179e4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17964:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17968:	85 ff       	sbrs	r24, 5
   1796a:	0a c0       	rjmp	.+20     	; 0x17980 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   1796c:	8d e3       	ldi	r24, 0x3D	; 61
   1796e:	9b e2       	ldi	r25, 0x2B	; 43
   17970:	a0 e0       	ldi	r26, 0x00	; 0
   17972:	ed b7       	in	r30, 0x3d	; 61
   17974:	fe b7       	in	r31, 0x3e	; 62
   17976:	81 83       	std	Z+1, r24	; 0x01
   17978:	92 83       	std	Z+2, r25	; 0x02
   1797a:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1797c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   17980:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17984:	3c dd       	rcall	.-1416   	; 0x173fe <amigo_check_unit>
   17986:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1798a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1798e:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   17990:	80 83       	st	Z, r24
   17992:	c5 d9       	rcall	.-3190   	; 0x16d1e <amigo_buffered_read_command>
   17994:	2a c0       	rjmp	.+84     	; 0x179ea <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   17996:	fc e6       	ldi	r31, 0x6C	; 108
   17998:	ef 16       	cp	r14, r31
   1799a:	f1 04       	cpc	r15, r1
   1799c:	d1 f4       	brne	.+52     	; 0x179d2 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   1799e:	68 31       	cpi	r22, 0x18	; 24
   179a0:	09 f5       	brne	.+66     	; 0x179e4 <Amigo_Command+0x5be>
   179a2:	05 30       	cpi	r16, 0x05	; 5
   179a4:	11 05       	cpc	r17, r1
   179a6:	f1 f4       	brne	.+60     	; 0x179e4 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179ac:	85 ff       	sbrs	r24, 5
   179ae:	0a c0       	rjmp	.+20     	; 0x179c4 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   179b0:	8d e2       	ldi	r24, 0x2D	; 45
   179b2:	9b e2       	ldi	r25, 0x2B	; 43
   179b4:	a0 e0       	ldi	r26, 0x00	; 0
   179b6:	ed b7       	in	r30, 0x3d	; 61
   179b8:	fe b7       	in	r31, 0x3e	; 62
   179ba:	81 83       	std	Z+1, r24	; 0x01
   179bc:	92 83       	std	Z+2, r25	; 0x02
   179be:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179c0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   179c4:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   179c8:	1a dd       	rcall	.-1484   	; 0x173fe <amigo_check_unit>
   179ca:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   179ce:	0f d9       	rcall	.-3554   	; 0x16bee <amigo_format>
   179d0:	04 c0       	rjmp	.+8      	; 0x179da <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   179d2:	f0 e7       	ldi	r31, 0x70	; 112
   179d4:	ef 16       	cp	r14, r31
   179d6:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   179d8:	29 f4       	brne	.+10     	; 0x179e4 <Amigo_Command+0x5be>
   179da:	8b 8d       	ldd	r24, Y+27	; 0x1b
   179dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
   179de:	88 27       	eor	r24, r24
   179e0:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   179e2:	03 c0       	rjmp	.+6      	; 0x179ea <Amigo_Command+0x5c4>
   179e4:	a8 01       	movw	r20, r16
   179e6:	8e 2d       	mov	r24, r14
   179e8:	ed db       	rcall	.-2086   	; 0x171c4 <amigo_todo_op>
}
   179ea:	6c 96       	adiw	r28, 0x1c	; 28
   179ec:	e6 e0       	ldi	r30, 0x06	; 6
   179ee:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

000179f2 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   179f2:	a9 e0       	ldi	r26, 0x09	; 9
   179f4:	b0 e0       	ldi	r27, 0x00	; 0
   179f6:	ef ef       	ldi	r30, 0xFF	; 255
   179f8:	fc eb       	ldi	r31, 0xBC	; 188
   179fa:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   179fe:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a04:	85 ff       	sbrs	r24, 5
   17a06:	16 c0       	rjmp	.+44     	; 0x17a34 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17a08:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17a0c:	90 e0       	ldi	r25, 0x00	; 0
   17a0e:	ed b7       	in	r30, 0x3d	; 61
   17a10:	fe b7       	in	r31, 0x3e	; 62
   17a12:	91 87       	std	Z+9, r25	; 0x09
   17a14:	80 87       	std	Z+8, r24	; 0x08
   17a16:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17a1a:	90 e0       	ldi	r25, 0x00	; 0
   17a1c:	97 83       	std	Z+7, r25	; 0x07
   17a1e:	86 83       	std	Z+6, r24	; 0x06
   17a20:	d5 83       	std	Z+5, r29	; 0x05
   17a22:	c4 83       	std	Z+4, r28	; 0x04
   17a24:	8b ef       	ldi	r24, 0xFB	; 251
   17a26:	9a e2       	ldi	r25, 0x2A	; 42
   17a28:	a0 e0       	ldi	r26, 0x00	; 0
   17a2a:	81 83       	std	Z+1, r24	; 0x01
   17a2c:	92 83       	std	Z+2, r25	; 0x02
   17a2e:	a3 83       	std	Z+3, r26	; 0x03
   17a30:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17a34:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17a38:	8f 35       	cpi	r24, 0x5F	; 95
   17a3a:	09 f4       	brne	.+2      	; 0x17a3e <Amigo_Execute+0x4c>
   17a3c:	ad c0       	rjmp	.+346    	; 0x17b98 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17a3e:	90 e0       	ldi	r25, 0x00	; 0
   17a40:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
   17a44:	89 2b       	or	r24, r25
   17a46:	39 f0       	breq	.+14     	; 0x17a56 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17a48:	ce 01       	movw	r24, r28
   17a4a:	87 7f       	andi	r24, 0xF7	; 247
   17a4c:	80 36       	cpi	r24, 0x60	; 96
   17a4e:	91 05       	cpc	r25, r1
   17a50:	09 f0       	breq	.+2      	; 0x17a54 <Amigo_Execute+0x62>
   17a52:	a2 c0       	rjmp	.+324    	; 0x17b98 <Amigo_Execute+0x1a6>
   17a54:	08 c0       	rjmp	.+16     	; 0x17a66 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17a56:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17a5a:	90 e0       	ldi	r25, 0x00	; 0
   17a5c:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17a60:	89 2b       	or	r24, r25
   17a62:	91 f7       	brne	.-28     	; 0x17a48 <Amigo_Execute+0x56>
   17a64:	99 c0       	rjmp	.+306    	; 0x17b98 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17a66:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17a6a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17a6e:	81 81       	ldd	r24, Z+1	; 0x01
   17a70:	90 e0       	ldi	r25, 0x00	; 0
   17a72:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>

    if(secondary == 0x60)
   17a76:	c0 36       	cpi	r28, 0x60	; 96
   17a78:	d1 05       	cpc	r29, r1
   17a7a:	09 f0       	breq	.+2      	; 0x17a7e <Amigo_Execute+0x8c>
   17a7c:	4e c0       	rjmp	.+156    	; 0x17b1a <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17a7e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17a82:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17a86:	e0 81       	ld	r30, Z
   17a88:	8e 2f       	mov	r24, r30
   17a8a:	90 e0       	ldi	r25, 0x00	; 0
   17a8c:	8b 30       	cpi	r24, 0x0B	; 11
   17a8e:	91 05       	cpc	r25, r1
   17a90:	08 f0       	brcs	.+2      	; 0x17a94 <Amigo_Execute+0xa2>
   17a92:	41 c0       	rjmp	.+130    	; 0x17b16 <Amigo_Execute+0x124>
   17a94:	fc 01       	movw	r30, r24
   17a96:	ea 52       	subi	r30, 0x2A	; 42
   17a98:	ff 4f       	sbci	r31, 0xFF	; 255
   17a9a:	0c 94 e7 e6 	jmp	0x1cdce	; 0x1cdce <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17aa2:	85 ff       	sbrs	r24, 5
   17aa4:	18 c0       	rjmp	.+48     	; 0x17ad6 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17aa6:	8b ed       	ldi	r24, 0xDB	; 219
   17aa8:	9a e2       	ldi	r25, 0x2A	; 42
   17aaa:	0d c0       	rjmp	.+26     	; 0x17ac6 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17aac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ab0:	85 ff       	sbrs	r24, 5
   17ab2:	11 c0       	rjmp	.+34     	; 0x17ad6 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17ab4:	8a eb       	ldi	r24, 0xBA	; 186
   17ab6:	9a e2       	ldi	r25, 0x2A	; 42
   17ab8:	06 c0       	rjmp	.+12     	; 0x17ac6 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17aba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17abe:	85 ff       	sbrs	r24, 5
   17ac0:	0a c0       	rjmp	.+20     	; 0x17ad6 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17ac2:	8b e9       	ldi	r24, 0x9B	; 155
   17ac4:	9a e2       	ldi	r25, 0x2A	; 42
   17ac6:	a0 e0       	ldi	r26, 0x00	; 0
   17ac8:	ed b7       	in	r30, 0x3d	; 61
   17aca:	fe b7       	in	r31, 0x3e	; 62
   17acc:	81 83       	std	Z+1, r24	; 0x01
   17ace:	92 83       	std	Z+2, r25	; 0x02
   17ad0:	a3 83       	std	Z+3, r26	; 0x03
   17ad2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17ad6:	b0 d9       	rcall	.-3232   	; 0x16e38 <amigo_buffered_read_execute>
   17ad8:	61 c0       	rjmp	.+194    	; 0x17b9c <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ada:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ade:	85 ff       	sbrs	r24, 5
   17ae0:	18 c0       	rjmp	.+48     	; 0x17b12 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17ae2:	89 e7       	ldi	r24, 0x79	; 121
   17ae4:	9a e2       	ldi	r25, 0x2A	; 42
   17ae6:	0d c0       	rjmp	.+26     	; 0x17b02 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ae8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17aec:	85 ff       	sbrs	r24, 5
   17aee:	11 c0       	rjmp	.+34     	; 0x17b12 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17af0:	8d e5       	ldi	r24, 0x5D	; 93
   17af2:	9a e2       	ldi	r25, 0x2A	; 42
   17af4:	06 c0       	rjmp	.+12     	; 0x17b02 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17af6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17afa:	85 ff       	sbrs	r24, 5
   17afc:	0a c0       	rjmp	.+20     	; 0x17b12 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17afe:	8d e3       	ldi	r24, 0x3D	; 61
   17b00:	9a e2       	ldi	r25, 0x2A	; 42
   17b02:	a0 e0       	ldi	r26, 0x00	; 0
   17b04:	ed b7       	in	r30, 0x3d	; 61
   17b06:	fe b7       	in	r31, 0x3e	; 62
   17b08:	81 83       	std	Z+1, r24	; 0x01
   17b0a:	92 83       	std	Z+2, r25	; 0x02
   17b0c:	a3 83       	std	Z+3, r26	; 0x03
   17b0e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17b12:	ed d9       	rcall	.-3110   	; 0x16eee <amigo_buffered_write>
   17b14:	43 c0       	rjmp	.+134    	; 0x17b9c <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17b16:	80 e6       	ldi	r24, 0x60	; 96
   17b18:	3d c0       	rjmp	.+122    	; 0x17b94 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17b1a:	c8 36       	cpi	r28, 0x68	; 104
   17b1c:	d1 05       	cpc	r29, r1
   17b1e:	e1 f5       	brne	.+120    	; 0x17b98 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17b20:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17b24:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17b28:	80 81       	ld	r24, Z
   17b2a:	82 30       	cpi	r24, 0x02	; 2
   17b2c:	81 f0       	breq	.+32     	; 0x17b4e <Amigo_Execute+0x15c>
   17b2e:	18 f4       	brcc	.+6      	; 0x17b36 <Amigo_Execute+0x144>
   17b30:	88 23       	and	r24, r24
   17b32:	91 f1       	breq	.+100    	; 0x17b98 <Amigo_Execute+0x1a6>
   17b34:	2e c0       	rjmp	.+92     	; 0x17b92 <Amigo_Execute+0x1a0>
   17b36:	83 30       	cpi	r24, 0x03	; 3
   17b38:	19 f0       	breq	.+6      	; 0x17b40 <Amigo_Execute+0x14e>
   17b3a:	84 30       	cpi	r24, 0x04	; 4
   17b3c:	c9 f0       	breq	.+50     	; 0x17b70 <Amigo_Execute+0x17e>
   17b3e:	29 c0       	rjmp	.+82     	; 0x17b92 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b44:	85 ff       	sbrs	r24, 5
   17b46:	11 c0       	rjmp	.+34     	; 0x17b6a <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17b48:	84 e1       	ldi	r24, 0x14	; 20
   17b4a:	9a e2       	ldi	r25, 0x2A	; 42
   17b4c:	06 c0       	rjmp	.+12     	; 0x17b5a <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b52:	85 ff       	sbrs	r24, 5
   17b54:	0a c0       	rjmp	.+20     	; 0x17b6a <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17b56:	89 ee       	ldi	r24, 0xE9	; 233
   17b58:	99 e2       	ldi	r25, 0x29	; 41
   17b5a:	a0 e0       	ldi	r26, 0x00	; 0
   17b5c:	ed b7       	in	r30, 0x3d	; 61
   17b5e:	fe b7       	in	r31, 0x3e	; 62
   17b60:	81 83       	std	Z+1, r24	; 0x01
   17b62:	92 83       	std	Z+2, r25	; 0x02
   17b64:	a3 83       	std	Z+3, r26	; 0x03
   17b66:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
                return ( amigo_send_status() );
   17b6a:	0e 94 ac b4 	call	0x16958	; 0x16958 <amigo_send_status>
   17b6e:	16 c0       	rjmp	.+44     	; 0x17b9c <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b74:	85 ff       	sbrs	r24, 5
   17b76:	0a c0       	rjmp	.+20     	; 0x17b8c <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17b78:	80 ec       	ldi	r24, 0xC0	; 192
   17b7a:	99 e2       	ldi	r25, 0x29	; 41
   17b7c:	a0 e0       	ldi	r26, 0x00	; 0
   17b7e:	ed b7       	in	r30, 0x3d	; 61
   17b80:	fe b7       	in	r31, 0x3e	; 62
   17b82:	81 83       	std	Z+1, r24	; 0x01
   17b84:	92 83       	std	Z+2, r25	; 0x02
   17b86:	a3 83       	std	Z+3, r26	; 0x03
   17b88:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17b8c:	0e 94 57 b4 	call	0x168ae	; 0x168ae <amigo_send_logical_address>
   17b90:	05 c0       	rjmp	.+10     	; 0x17b9c <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17b92:	88 e6       	ldi	r24, 0x68	; 104
   17b94:	b0 db       	rcall	.-2208   	; 0x172f6 <amigo_todo>
   17b96:	02 c0       	rjmp	.+4      	; 0x17b9c <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17b98:	80 e0       	ldi	r24, 0x00	; 0
   17b9a:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17b9c:	cd b7       	in	r28, 0x3d	; 61
   17b9e:	de b7       	in	r29, 0x3e	; 62
   17ba0:	29 96       	adiw	r28, 0x09	; 9
   17ba2:	e2 e0       	ldi	r30, 0x02	; 2
   17ba4:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00017ba8 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17ba8:	cf 93       	push	r28
   17baa:	df 93       	push	r29
   17bac:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17bae:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17bb2:	90 e0       	ldi	r25, 0x00	; 0
   17bb4:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
   17bb8:	89 2b       	or	r24, r25
   17bba:	51 f0       	breq	.+20     	; 0x17bd0 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17bbc:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17bc0:	8f 35       	cpi	r24, 0x5F	; 95
   17bc2:	71 f4       	brne	.+28     	; 0x17be0 <AMIGO_COMMANDS+0x38>
   17bc4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bc8:	90 e0       	ldi	r25, 0x00	; 0
   17bca:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17bce:	08 c0       	rjmp	.+16     	; 0x17be0 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17bd0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bd4:	90 e0       	ldi	r25, 0x00	; 0
   17bd6:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17bda:	89 2b       	or	r24, r25
   17bdc:	79 f7       	brne	.-34     	; 0x17bbc <AMIGO_COMMANDS+0x14>
   17bde:	76 c0       	rjmp	.+236    	; 0x17ccc <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17be0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17be4:	81 11       	cpse	r24, r1
   17be6:	05 c0       	rjmp	.+10     	; 0x17bf2 <AMIGO_COMMANDS+0x4a>
   17be8:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17bec:	90 e0       	ldi	r25, 0x00	; 0
   17bee:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17bf2:	c0 36       	cpi	r28, 0x60	; 96
   17bf4:	99 f4       	brne	.+38     	; 0x17c1c <AMIGO_COMMANDS+0x74>
   17bf6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17bfa:	90 e0       	ldi	r25, 0x00	; 0
   17bfc:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
   17c00:	89 2b       	or	r24, r25
   17c02:	19 f0       	breq	.+6      	; 0x17c0a <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17c04:	80 e6       	ldi	r24, 0x60	; 96
   17c06:	90 e0       	ldi	r25, 0x00	; 0
   17c08:	14 c0       	rjmp	.+40     	; 0x17c32 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17c0a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c0e:	90 e0       	ldi	r25, 0x00	; 0
   17c10:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17c14:	89 2b       	or	r24, r25
   17c16:	09 f4       	brne	.+2      	; 0x17c1a <AMIGO_COMMANDS+0x72>
   17c18:	59 c0       	rjmp	.+178    	; 0x17ccc <AMIGO_COMMANDS+0x124>
   17c1a:	f4 cf       	rjmp	.-24     	; 0x17c04 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17c1c:	c8 36       	cpi	r28, 0x68	; 104
   17c1e:	c1 f4       	brne	.+48     	; 0x17c50 <AMIGO_COMMANDS+0xa8>
   17c20:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17c24:	90 e0       	ldi	r25, 0x00	; 0
   17c26:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
   17c2a:	89 2b       	or	r24, r25
   17c2c:	21 f0       	breq	.+8      	; 0x17c36 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17c2e:	88 e6       	ldi	r24, 0x68	; 104
   17c30:	90 e0       	ldi	r25, 0x00	; 0
   17c32:	df de       	rcall	.-578    	; 0x179f2 <Amigo_Execute>
   17c34:	0b c0       	rjmp	.+22     	; 0x17c4c <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17c36:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c3a:	90 e0       	ldi	r25, 0x00	; 0
   17c3c:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17c40:	89 2b       	or	r24, r25
   17c42:	09 f4       	brne	.+2      	; 0x17c46 <AMIGO_COMMANDS+0x9e>
   17c44:	43 c0       	rjmp	.+134    	; 0x17ccc <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c46:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17c48:	90 e0       	ldi	r25, 0x00	; 0
   17c4a:	ed db       	rcall	.-2086   	; 0x17426 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17c4c:	ec 01       	movw	r28, r24
   17c4e:	40 c0       	rjmp	.+128    	; 0x17cd0 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17c50:	c9 36       	cpi	r28, 0x69	; 105
   17c52:	51 f4       	brne	.+20     	; 0x17c68 <AMIGO_COMMANDS+0xc0>
   17c54:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c58:	90 e0       	ldi	r25, 0x00	; 0
   17c5a:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17c5e:	89 2b       	or	r24, r25
   17c60:	a9 f1       	breq	.+106    	; 0x17ccc <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c62:	89 e6       	ldi	r24, 0x69	; 105
   17c64:	90 e0       	ldi	r25, 0x00	; 0
   17c66:	f1 cf       	rjmp	.-30     	; 0x17c4a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17c68:	ca 36       	cpi	r28, 0x6A	; 106
   17c6a:	51 f4       	brne	.+20     	; 0x17c80 <AMIGO_COMMANDS+0xd8>
   17c6c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c70:	90 e0       	ldi	r25, 0x00	; 0
   17c72:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17c76:	89 2b       	or	r24, r25
   17c78:	49 f1       	breq	.+82     	; 0x17ccc <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c7a:	8a e6       	ldi	r24, 0x6A	; 106
   17c7c:	90 e0       	ldi	r25, 0x00	; 0
   17c7e:	e5 cf       	rjmp	.-54     	; 0x17c4a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17c80:	cc 36       	cpi	r28, 0x6C	; 108
   17c82:	51 f4       	brne	.+20     	; 0x17c98 <AMIGO_COMMANDS+0xf0>
   17c84:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c88:	90 e0       	ldi	r25, 0x00	; 0
   17c8a:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17c8e:	89 2b       	or	r24, r25
   17c90:	e9 f0       	breq	.+58     	; 0x17ccc <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c92:	8c e6       	ldi	r24, 0x6C	; 108
   17c94:	90 e0       	ldi	r25, 0x00	; 0
   17c96:	d9 cf       	rjmp	.-78     	; 0x17c4a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17c98:	c0 37       	cpi	r28, 0x70	; 112
   17c9a:	c1 f4       	brne	.+48     	; 0x17ccc <AMIGO_COMMANDS+0x124>
   17c9c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17ca0:	90 e0       	ldi	r25, 0x00	; 0
   17ca2:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <AMIGO_is_MTA>
   17ca6:	ec 01       	movw	r28, r24
   17ca8:	89 2b       	or	r24, r25
   17caa:	51 f0       	breq	.+20     	; 0x17cc0 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17cac:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17cb0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17cb4:	81 81       	ldd	r24, Z+1	; 0x01
   17cb6:	90 e0       	ldi	r25, 0x00	; 0
   17cb8:	0e 94 ac 86 	call	0x10d58	; 0x10d58 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17cbc:	ff d9       	rcall	.-3074   	; 0x170bc <amigo_cmd_dsj>
   17cbe:	c6 cf       	rjmp	.-116    	; 0x17c4c <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17cc0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17cc4:	90 e0       	ldi	r25, 0x00	; 0
   17cc6:	0e 94 dc 8c 	call	0x119b8	; 0x119b8 <AMIGO_is_MLA>
   17cca:	02 c0       	rjmp	.+4      	; 0x17cd0 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17ccc:	c0 e0       	ldi	r28, 0x00	; 0
   17cce:	d0 e0       	ldi	r29, 0x00	; 0
}
   17cd0:	ce 01       	movw	r24, r28
   17cd2:	df 91       	pop	r29
   17cd4:	cf 91       	pop	r28
   17cd6:	08 95       	ret

00017cd8 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17cd8:	ed e9       	ldi	r30, 0x9D	; 157
   17cda:	f9 e1       	ldi	r31, 0x19	; 25
   17cdc:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17cde:	10 82       	st	Z, r1
   17ce0:	11 82       	std	Z+1, r1	; 0x01
   17ce2:	12 82       	std	Z+2, r1	; 0x02
   17ce4:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17ce6:	15 82       	std	Z+5, r1	; 0x05
   17ce8:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17cea:	12 86       	std	Z+10, r1	; 0x0a
   17cec:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17cee:	14 86       	std	Z+12, r1	; 0x0c
   17cf0:	13 86       	std	Z+11, r1	; 0x0b
   17cf2:	08 95       	ret

00017cf4 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17cf4:	cf 93       	push	r28
   17cf6:	df 93       	push	r29
   17cf8:	ad b7       	in	r26, 0x3d	; 61
   17cfa:	be b7       	in	r27, 0x3e	; 62
   17cfc:	17 97       	sbiw	r26, 0x07	; 7
   17cfe:	0f b6       	in	r0, 0x3f	; 63
   17d00:	f8 94       	cli
   17d02:	be bf       	out	0x3e, r27	; 62
   17d04:	0f be       	out	0x3f, r0	; 63
   17d06:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17d08:	20 91 a6 19 	lds	r18, 0x19A6	; 0x8019a6 <plot+0x9>
   17d0c:	30 91 a7 19 	lds	r19, 0x19A7	; 0x8019a7 <plot+0xa>
   17d10:	21 15       	cp	r18, r1
   17d12:	31 05       	cpc	r19, r1
   17d14:	09 f4       	brne	.+2      	; 0x17d18 <receive_plot_flush+0x24>
   17d16:	45 c0       	rjmp	.+138    	; 0x17da2 <receive_plot_flush+0xae>
   17d18:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17d1c:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17d20:	00 97       	sbiw	r24, 0x00	; 0
   17d22:	09 f4       	brne	.+2      	; 0x17d26 <receive_plot_flush+0x32>
   17d24:	40 c0       	rjmp	.+128    	; 0x17da6 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17d26:	ac 01       	movw	r20, r24
   17d28:	61 e0       	ldi	r22, 0x01	; 1
   17d2a:	70 e0       	ldi	r23, 0x00	; 0
   17d2c:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17d30:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17d34:	0e 94 9c 7c 	call	0xf938	; 0xf938 <fwrite>
   17d38:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17d3a:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17d3e:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17d42:	c8 17       	cp	r28, r24
   17d44:	d9 07       	cpc	r29, r25
   17d46:	09 f1       	breq	.+66     	; 0x17d8a <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17d48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d4c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d50:	81 72       	andi	r24, 0x21	; 33
   17d52:	99 27       	eor	r25, r25
   17d54:	89 2b       	or	r24, r25
   17d56:	b1 f0       	breq	.+44     	; 0x17d84 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17d58:	85 ed       	ldi	r24, 0xD5	; 213
   17d5a:	95 e1       	ldi	r25, 0x15	; 21
   17d5c:	0e 94 a5 78 	call	0xf14a	; 0xf14a <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17d60:	ed b7       	in	r30, 0x3d	; 61
   17d62:	fe b7       	in	r31, 0x3e	; 62
   17d64:	d7 83       	std	Z+7, r29	; 0x07
   17d66:	c6 83       	std	Z+6, r28	; 0x06
   17d68:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17d6c:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17d70:	95 83       	std	Z+5, r25	; 0x05
   17d72:	84 83       	std	Z+4, r24	; 0x04
   17d74:	80 e5       	ldi	r24, 0x50	; 80
   17d76:	92 e3       	ldi	r25, 0x32	; 50
   17d78:	a0 e0       	ldi	r26, 0x00	; 0
   17d7a:	81 83       	std	Z+1, r24	; 0x01
   17d7c:	92 83       	std	Z+2, r25	; 0x02
   17d7e:	a3 83       	std	Z+3, r26	; 0x03
   17d80:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        }
        return(-1);
   17d84:	8f ef       	ldi	r24, 0xFF	; 255
   17d86:	9f ef       	ldi	r25, 0xFF	; 255
   17d88:	0e c0       	rjmp	.+28     	; 0x17da6 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17d8a:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17d8e:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17d92:	0e 94 ef 76 	call	0xedde	; 0xedde <fileno>
    if(fno < 0)
   17d96:	97 fd       	sbrc	r25, 7
   17d98:	f5 cf       	rjmp	.-22     	; 0x17d84 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17d9a:	0e 94 e6 7b 	call	0xf7cc	; 0xf7cc <syncfs>
    return (ret);
   17d9e:	ce 01       	movw	r24, r28
   17da0:	02 c0       	rjmp	.+4      	; 0x17da6 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17da2:	80 e0       	ldi	r24, 0x00	; 0
   17da4:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17da6:	cd b7       	in	r28, 0x3d	; 61
   17da8:	de b7       	in	r29, 0x3e	; 62
   17daa:	27 96       	adiw	r28, 0x07	; 7
   17dac:	e2 e0       	ldi	r30, 0x02	; 2
   17dae:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00017db2 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17db2:	ad b7       	in	r26, 0x3d	; 61
   17db4:	be b7       	in	r27, 0x3e	; 62
   17db6:	17 97       	sbiw	r26, 0x07	; 7
   17db8:	0f b6       	in	r0, 0x3f	; 63
   17dba:	f8 94       	cli
   17dbc:	be bf       	out	0x3e, r27	; 62
   17dbe:	0f be       	out	0x3f, r0	; 63
   17dc0:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17dc2:	98 df       	rcall	.-208    	; 0x17cf4 <receive_plot_flush>
   17dc4:	97 ff       	sbrs	r25, 7
   17dc6:	03 c0       	rjmp	.+6      	; 0x17dce <printer_close+0x1c>
        plot.error = 1;
   17dc8:	81 e0       	ldi	r24, 0x01	; 1
   17dca:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17dce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17dd2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17dd6:	81 72       	andi	r24, 0x21	; 33
   17dd8:	99 27       	eor	r25, r25
   17dda:	89 2b       	or	r24, r25
   17ddc:	71 f0       	breq	.+28     	; 0x17dfa <printer_close+0x48>
    {
        if(plot.error)
   17dde:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot+0x8>
   17de2:	88 23       	and	r24, r24
   17de4:	51 f0       	breq	.+20     	; 0x17dfa <printer_close+0x48>
            printf("ERROR durring write\n");
   17de6:	8f e7       	ldi	r24, 0x7F	; 127
   17de8:	92 e3       	ldi	r25, 0x32	; 50
   17dea:	a0 e0       	ldi	r26, 0x00	; 0
   17dec:	ed b7       	in	r30, 0x3d	; 61
   17dee:	fe b7       	in	r31, 0x3e	; 62
   17df0:	81 83       	std	Z+1, r24	; 0x01
   17df2:	92 83       	std	Z+2, r25	; 0x02
   17df4:	a3 83       	std	Z+3, r26	; 0x03
   17df6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }

    if(plot.fp)
   17dfa:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17dfe:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17e02:	00 97       	sbiw	r24, 0x00	; 0
   17e04:	e1 f0       	breq	.+56     	; 0x17e3e <printer_close+0x8c>
    {
        fclose(plot.fp);
   17e06:	0e 94 1e 7d 	call	0xfa3c	; 0xfa3c <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17e0a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e0e:	85 ff       	sbrs	r24, 5
   17e10:	16 c0       	rjmp	.+44     	; 0x17e3e <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17e12:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17e16:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   17e1a:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   17e1e:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   17e22:	ed b7       	in	r30, 0x3d	; 61
   17e24:	fe b7       	in	r31, 0x3e	; 62
   17e26:	84 83       	std	Z+4, r24	; 0x04
   17e28:	95 83       	std	Z+5, r25	; 0x05
   17e2a:	a6 83       	std	Z+6, r26	; 0x06
   17e2c:	b7 83       	std	Z+7, r27	; 0x07
   17e2e:	81 e7       	ldi	r24, 0x71	; 113
   17e30:	92 e3       	ldi	r25, 0x32	; 50
   17e32:	a0 e0       	ldi	r26, 0x00	; 0
   17e34:	81 83       	std	Z+1, r24	; 0x01
   17e36:	92 83       	std	Z+2, r25	; 0x02
   17e38:	a3 83       	std	Z+3, r26	; 0x03
   17e3a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }

    if(plot.buf)
   17e3e:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17e42:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17e46:	00 97       	sbiw	r24, 0x00	; 0
   17e48:	11 f0       	breq	.+4      	; 0x17e4e <printer_close+0x9c>
        safefree(plot.buf);
   17e4a:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
    printer_init();
   17e4e:	44 df       	rcall	.-376    	; 0x17cd8 <printer_init>
}
   17e50:	ad b7       	in	r26, 0x3d	; 61
   17e52:	be b7       	in	r27, 0x3e	; 62
   17e54:	17 96       	adiw	r26, 0x07	; 7
   17e56:	0f b6       	in	r0, 0x3f	; 63
   17e58:	f8 94       	cli
   17e5a:	be bf       	out	0x3e, r27	; 62
   17e5c:	0f be       	out	0x3f, r0	; 63
   17e5e:	ad bf       	out	0x3d, r26	; 61
   17e60:	08 95       	ret

00017e62 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17e62:	ad e5       	ldi	r26, 0x5D	; 93
   17e64:	b0 e0       	ldi	r27, 0x00	; 0
   17e66:	e7 e3       	ldi	r30, 0x37	; 55
   17e68:	ff eb       	ldi	r31, 0xBF	; 191
   17e6a:	0c 94 22 e7 	jmp	0x1ce44	; 0x1ce44 <__prologue_saves__+0x18>
   17e6e:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17e70:	89 2b       	or	r24, r25
   17e72:	09 f0       	breq	.+2      	; 0x17e76 <printer_open+0x14>
   17e74:	4f c0       	rjmp	.+158    	; 0x17f14 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17e76:	be 01       	movw	r22, r28
   17e78:	6e 5a       	subi	r22, 0xAE	; 174
   17e7a:	7f 4f       	sbci	r23, 0xFF	; 255
   17e7c:	80 e0       	ldi	r24, 0x00	; 0
   17e7e:	90 e0       	ldi	r25, 0x00	; 0
   17e80:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <clock_gettime>
        seconds = ts.tv_sec;
   17e84:	66 96       	adiw	r28, 0x16	; 22
   17e86:	8c ad       	ldd	r24, Y+60	; 0x3c
   17e88:	9d ad       	ldd	r25, Y+61	; 0x3d
   17e8a:	ae ad       	ldd	r26, Y+62	; 0x3e
   17e8c:	bf ad       	ldd	r27, Y+63	; 0x3f
   17e8e:	66 97       	sbiw	r28, 0x16	; 22
   17e90:	6e 96       	adiw	r28, 0x1e	; 30
   17e92:	8c af       	std	Y+60, r24	; 0x3c
   17e94:	9d af       	std	Y+61, r25	; 0x3d
   17e96:	ae af       	std	Y+62, r26	; 0x3e
   17e98:	bf af       	std	Y+63, r27	; 0x3f
   17e9a:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17e9c:	ce 01       	movw	r24, r28
   17e9e:	86 5a       	subi	r24, 0xA6	; 166
   17ea0:	9f 4f       	sbci	r25, 0xFF	; 255
   17ea2:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <gmtime>
   17ea6:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17ea8:	fc 01       	movw	r30, r24
   17eaa:	e6 80       	ldd	r14, Z+6	; 0x06
   17eac:	f7 80       	ldd	r15, Z+7	; 0x07
   17eae:	80 85       	ldd	r24, Z+8	; 0x08
   17eb0:	91 85       	ldd	r25, Z+9	; 0x09
   17eb2:	0e 94 b6 36 	call	0x6d6c	; 0x6d6c <tm_mon_to_ascii>
   17eb6:	f8 01       	movw	r30, r16
   17eb8:	20 81       	ld	r18, Z
   17eba:	31 81       	ldd	r19, Z+1	; 0x01
   17ebc:	ed b7       	in	r30, 0x3d	; 61
   17ebe:	fe b7       	in	r31, 0x3e	; 62
   17ec0:	31 8b       	std	Z+17, r19	; 0x11
   17ec2:	20 8b       	std	Z+16, r18	; 0x10
   17ec4:	f8 01       	movw	r30, r16
   17ec6:	22 81       	ldd	r18, Z+2	; 0x02
   17ec8:	33 81       	ldd	r19, Z+3	; 0x03
   17eca:	ed b7       	in	r30, 0x3d	; 61
   17ecc:	fe b7       	in	r31, 0x3e	; 62
   17ece:	37 87       	std	Z+15, r19	; 0x0f
   17ed0:	26 87       	std	Z+14, r18	; 0x0e
   17ed2:	f8 01       	movw	r30, r16
   17ed4:	24 81       	ldd	r18, Z+4	; 0x04
   17ed6:	35 81       	ldd	r19, Z+5	; 0x05
   17ed8:	ed b7       	in	r30, 0x3d	; 61
   17eda:	fe b7       	in	r31, 0x3e	; 62
   17edc:	35 87       	std	Z+13, r19	; 0x0d
   17ede:	24 87       	std	Z+12, r18	; 0x0c
   17ee0:	f8 01       	movw	r30, r16
   17ee2:	22 85       	ldd	r18, Z+10	; 0x0a
   17ee4:	33 85       	ldd	r19, Z+11	; 0x0b
   17ee6:	24 59       	subi	r18, 0x94	; 148
   17ee8:	38 4f       	sbci	r19, 0xF8	; 248
   17eea:	ed b7       	in	r30, 0x3d	; 61
   17eec:	fe b7       	in	r31, 0x3e	; 62
   17eee:	33 87       	std	Z+11, r19	; 0x0b
   17ef0:	22 87       	std	Z+10, r18	; 0x0a
   17ef2:	91 87       	std	Z+9, r25	; 0x09
   17ef4:	80 87       	std	Z+8, r24	; 0x08
   17ef6:	f7 82       	std	Z+7, r15	; 0x07
   17ef8:	e6 82       	std	Z+6, r14	; 0x06
   17efa:	86 eb       	ldi	r24, 0xB6	; 182
   17efc:	92 e3       	ldi	r25, 0x32	; 50
   17efe:	a0 e0       	ldi	r26, 0x00	; 0
   17f00:	83 83       	std	Z+3, r24	; 0x03
   17f02:	94 83       	std	Z+4, r25	; 0x04
   17f04:	a5 83       	std	Z+5, r26	; 0x05
   17f06:	8e 01       	movw	r16, r28
   17f08:	0e 5e       	subi	r16, 0xEE	; 238
   17f0a:	1f 4f       	sbci	r17, 0xFF	; 255
   17f0c:	12 83       	std	Z+2, r17	; 0x02
   17f0e:	01 83       	std	Z+1, r16	; 0x01
   17f10:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17f14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f18:	85 ff       	sbrs	r24, 5
   17f1a:	0c c0       	rjmp	.+24     	; 0x17f34 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17f1c:	ed b7       	in	r30, 0x3d	; 61
   17f1e:	fe b7       	in	r31, 0x3e	; 62
   17f20:	15 83       	std	Z+5, r17	; 0x05
   17f22:	04 83       	std	Z+4, r16	; 0x04
   17f24:	80 ea       	ldi	r24, 0xA0	; 160
   17f26:	92 e3       	ldi	r25, 0x32	; 50
   17f28:	a0 e0       	ldi	r26, 0x00	; 0
   17f2a:	81 83       	std	Z+1, r24	; 0x01
   17f2c:	92 83       	std	Z+2, r25	; 0x02
   17f2e:	a3 83       	std	Z+3, r26	; 0x03
   17f30:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17f34:	6c e0       	ldi	r22, 0x0C	; 12
   17f36:	79 e0       	ldi	r23, 0x09	; 9
   17f38:	c8 01       	movw	r24, r16
   17f3a:	0e 94 74 7e 	call	0xfce8	; 0xfce8 <fopen>
   17f3e:	90 93 a7 19 	sts	0x19A7, r25	; 0x8019a7 <plot+0xa>
   17f42:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <plot+0x9>
    if(plot.fp == NULL)
   17f46:	89 2b       	or	r24, r25
   17f48:	b9 f4       	brne	.+46     	; 0x17f78 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17f4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f4e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17f52:	81 72       	andi	r24, 0x21	; 33
   17f54:	99 27       	eor	r25, r25
   17f56:	89 2b       	or	r24, r25
   17f58:	11 f1       	breq	.+68     	; 0x17f9e <printer_open+0x13c>
        {
            perror("open failed");
   17f5a:	8a e9       	ldi	r24, 0x9A	; 154
   17f5c:	9d e0       	ldi	r25, 0x0D	; 13
   17f5e:	0e 94 a5 78 	call	0xf14a	; 0xf14a <perror>
            printf("exiting...\n");
   17f62:	84 e9       	ldi	r24, 0x94	; 148
   17f64:	92 e3       	ldi	r25, 0x32	; 50
   17f66:	a0 e0       	ldi	r26, 0x00	; 0
   17f68:	ed b7       	in	r30, 0x3d	; 61
   17f6a:	fe b7       	in	r31, 0x3e	; 62
   17f6c:	81 83       	std	Z+1, r24	; 0x01
   17f6e:	92 83       	std	Z+2, r25	; 0x02
   17f70:	a3 83       	std	Z+3, r26	; 0x03
   17f72:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   17f76:	13 c0       	rjmp	.+38     	; 0x17f9e <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17f78:	61 e0       	ldi	r22, 0x01	; 1
   17f7a:	70 e0       	ldi	r23, 0x00	; 0
   17f7c:	81 e0       	ldi	r24, 0x01	; 1
   17f7e:	92 e0       	ldi	r25, 0x02	; 2
   17f80:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
   17f84:	90 93 a9 19 	sts	0x19A9, r25	; 0x8019a9 <plot+0xc>
   17f88:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <plot+0xb>
    if(plot.buf == NULL)
   17f8c:	89 2b       	or	r24, r25
   17f8e:	09 f4       	brne	.+2      	; 0x17f92 <printer_open+0x130>
        printer_close();
   17f90:	10 df       	rcall	.-480    	; 0x17db2 <printer_close>
    plot.size = 512;
   17f92:	80 e0       	ldi	r24, 0x00	; 0
   17f94:	92 e0       	ldi	r25, 0x02	; 2
   17f96:	90 93 a4 19 	sts	0x19A4, r25	; 0x8019a4 <plot+0x7>
   17f9a:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x6>
}
   17f9e:	c3 5a       	subi	r28, 0xA3	; 163
   17fa0:	df 4f       	sbci	r29, 0xFF	; 255
   17fa2:	e6 e0       	ldi	r30, 0x06	; 6
   17fa4:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

00017fa8 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17fa8:	cf 93       	push	r28
   17faa:	df 93       	push	r29
   17fac:	ad b7       	in	r26, 0x3d	; 61
   17fae:	be b7       	in	r27, 0x3e	; 62
   17fb0:	17 97       	sbiw	r26, 0x07	; 7
   17fb2:	0f b6       	in	r0, 0x3f	; 63
   17fb4:	f8 94       	cli
   17fb6:	be bf       	out	0x3e, r27	; 62
   17fb8:	0f be       	out	0x3f, r0	; 63
   17fba:	ad bf       	out	0x3d, r26	; 61
   17fbc:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17fbe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17fc2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17fc6:	81 72       	andi	r24, 0x21	; 33
   17fc8:	99 27       	eor	r25, r25
   17fca:	89 2b       	or	r24, r25
   17fcc:	c1 f0       	breq	.+48     	; 0x17ffe <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17fce:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17fd2:	30 91 9e 19 	lds	r19, 0x199E	; 0x80199e <plot+0x1>
   17fd6:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <plot+0x2>
   17fda:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x3>
   17fde:	81 11       	cpse	r24, r1
   17fe0:	0e c0       	rjmp	.+28     	; 0x17ffe <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17fe2:	ed b7       	in	r30, 0x3d	; 61
   17fe4:	fe b7       	in	r31, 0x3e	; 62
   17fe6:	84 83       	std	Z+4, r24	; 0x04
   17fe8:	35 83       	std	Z+5, r19	; 0x05
   17fea:	26 83       	std	Z+6, r18	; 0x06
   17fec:	97 83       	std	Z+7, r25	; 0x07
   17fee:	89 e4       	ldi	r24, 0x49	; 73
   17ff0:	92 e3       	ldi	r25, 0x32	; 50
   17ff2:	a0 e0       	ldi	r26, 0x00	; 0
   17ff4:	81 83       	std	Z+1, r24	; 0x01
   17ff6:	92 83       	std	Z+2, r25	; 0x02
   17ff8:	a3 83       	std	Z+3, r26	; 0x03
   17ffa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17ffe:	ce 01       	movw	r24, r28
   18000:	88 27       	eor	r24, r24
   18002:	97 7f       	andi	r25, 0xF7	; 247
   18004:	89 2b       	or	r24, r25
   18006:	41 f0       	breq	.+16     	; 0x18018 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   18008:	75 de       	rcall	.-790    	; 0x17cf4 <receive_plot_flush>
   1800a:	89 2b       	or	r24, r25
   1800c:	09 f4       	brne	.+2      	; 0x18010 <printer_buffer+0x68>
   1800e:	3f c0       	rjmp	.+126    	; 0x1808e <printer_buffer+0xe6>
            plot.error = 1;
   18010:	81 e0       	ldi	r24, 0x01	; 1
   18012:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
   18016:	3b c0       	rjmp	.+118    	; 0x1808e <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   18018:	20 91 a8 19 	lds	r18, 0x19A8	; 0x8019a8 <plot+0xb>
   1801c:	30 91 a9 19 	lds	r19, 0x19A9	; 0x8019a9 <plot+0xc>
   18020:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   18024:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   18028:	ac 01       	movw	r20, r24
   1802a:	4f 5f       	subi	r20, 0xFF	; 255
   1802c:	5f 4f       	sbci	r21, 0xFF	; 255
   1802e:	50 93 a2 19 	sts	0x19A2, r21	; 0x8019a2 <plot+0x5>
   18032:	40 93 a1 19 	sts	0x19A1, r20	; 0x8019a1 <plot+0x4>
   18036:	f9 01       	movw	r30, r18
   18038:	e8 0f       	add	r30, r24
   1803a:	f9 1f       	adc	r31, r25
   1803c:	c0 83       	st	Z, r28
        plot.count++;
   1803e:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   18042:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   18046:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   1804a:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   1804e:	01 96       	adiw	r24, 0x01	; 1
   18050:	a1 1d       	adc	r26, r1
   18052:	b1 1d       	adc	r27, r1
   18054:	80 93 9d 19 	sts	0x199D, r24	; 0x80199d <plot>
   18058:	90 93 9e 19 	sts	0x199E, r25	; 0x80199e <plot+0x1>
   1805c:	a0 93 9f 19 	sts	0x199F, r26	; 0x80199f <plot+0x2>
   18060:	b0 93 a0 19 	sts	0x19A0, r27	; 0x8019a0 <plot+0x3>

        if(plot.ind >= plot.size)
   18064:	20 91 a1 19 	lds	r18, 0x19A1	; 0x8019a1 <plot+0x4>
   18068:	30 91 a2 19 	lds	r19, 0x19A2	; 0x8019a2 <plot+0x5>
   1806c:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <plot+0x6>
   18070:	90 91 a4 19 	lds	r25, 0x19A4	; 0x8019a4 <plot+0x7>
   18074:	28 17       	cp	r18, r24
   18076:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   18078:	54 f0       	brlt	.+20     	; 0x1808e <printer_buffer+0xe6>
   1807a:	3c de       	rcall	.-904    	; 0x17cf4 <receive_plot_flush>
   1807c:	97 ff       	sbrs	r25, 7
   1807e:	03 c0       	rjmp	.+6      	; 0x18086 <printer_buffer+0xde>
                plot.error = 1;
   18080:	81 e0       	ldi	r24, 0x01	; 1
   18082:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
            plot.ind  = 0;
   18086:	10 92 a2 19 	sts	0x19A2, r1	; 0x8019a2 <plot+0x5>
   1808a:	10 92 a1 19 	sts	0x19A1, r1	; 0x8019a1 <plot+0x4>
        }
    }
}
   1808e:	cd b7       	in	r28, 0x3d	; 61
   18090:	de b7       	in	r29, 0x3e	; 62
   18092:	27 96       	adiw	r28, 0x07	; 7
   18094:	e2 e0       	ldi	r30, 0x02	; 2
   18096:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

0001809a <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   1809a:	cf 93       	push	r28
   1809c:	00 d0       	rcall	.+0      	; 0x1809e <PRINTER_COMMANDS+0x4>
   1809e:	00 d0       	rcall	.+0      	; 0x180a0 <PRINTER_COMMANDS+0x6>
   180a0:	1f 92       	push	r1
   180a2:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   180a4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   180a8:	90 e0       	ldi	r25, 0x00	; 0
   180aa:	0e 94 12 8d 	call	0x11a24	; 0x11a24 <PRINTER_is_MLA>
   180ae:	89 2b       	or	r24, r25
   180b0:	69 f0       	breq	.+26     	; 0x180cc <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   180b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   180b6:	85 ff       	sbrs	r24, 5
   180b8:	22 c0       	rjmp	.+68     	; 0x180fe <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   180ba:	8c 2f       	mov	r24, r28
   180bc:	90 e0       	ldi	r25, 0x00	; 0
   180be:	ed b7       	in	r30, 0x3d	; 61
   180c0:	fe b7       	in	r31, 0x3e	; 62
   180c2:	95 83       	std	Z+5, r25	; 0x05
   180c4:	84 83       	std	Z+4, r24	; 0x04
   180c6:	8d e2       	ldi	r24, 0x2D	; 45
   180c8:	92 e3       	ldi	r25, 0x32	; 50
   180ca:	13 c0       	rjmp	.+38     	; 0x180f2 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   180cc:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   180d0:	90 e0       	ldi	r25, 0x00	; 0
   180d2:	0e 94 24 8d 	call	0x11a48	; 0x11a48 <PRINTER_is_MTA>
   180d6:	89 2b       	or	r24, r25
   180d8:	91 f0       	breq	.+36     	; 0x180fe <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   180da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   180de:	85 ff       	sbrs	r24, 5
   180e0:	0e c0       	rjmp	.+28     	; 0x180fe <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   180e2:	8c 2f       	mov	r24, r28
   180e4:	90 e0       	ldi	r25, 0x00	; 0
   180e6:	ed b7       	in	r30, 0x3d	; 61
   180e8:	fe b7       	in	r31, 0x3e	; 62
   180ea:	95 83       	std	Z+5, r25	; 0x05
   180ec:	84 83       	std	Z+4, r24	; 0x04
   180ee:	83 e1       	ldi	r24, 0x13	; 19
   180f0:	92 e3       	ldi	r25, 0x32	; 50
   180f2:	a0 e0       	ldi	r26, 0x00	; 0
   180f4:	81 83       	std	Z+1, r24	; 0x01
   180f6:	92 83       	std	Z+2, r25	; 0x02
   180f8:	a3 83       	std	Z+3, r26	; 0x03
   180fa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   180fe:	80 e0       	ldi	r24, 0x00	; 0
   18100:	90 e0       	ldi	r25, 0x00	; 0
   18102:	0f 90       	pop	r0
   18104:	0f 90       	pop	r0
   18106:	0f 90       	pop	r0
   18108:	0f 90       	pop	r0
   1810a:	0f 90       	pop	r0
   1810c:	cf 91       	pop	r28
   1810e:	08 95       	ret

00018110 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   18110:	0f 93       	push	r16
   18112:	1f 93       	push	r17
   18114:	da 01       	movw	r26, r20
   18116:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   18118:	b7 fd       	sbrc	r27, 7
   1811a:	0b c0       	rjmp	.+22     	; 0x18132 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   1811c:	fd 01       	movw	r30, r26
   1811e:	e6 0f       	add	r30, r22
   18120:	f7 1f       	adc	r31, r23
   18122:	e8 0f       	add	r30, r24
   18124:	f9 1f       	adc	r31, r25
   18126:	00 83       	st	Z, r16
        val >>= 8;
   18128:	01 2f       	mov	r16, r17
   1812a:	12 2f       	mov	r17, r18
   1812c:	23 2f       	mov	r18, r19
   1812e:	33 27       	eor	r19, r19
   18130:	f2 cf       	rjmp	.-28     	; 0x18116 <V2B_MSB+0x6>
    }
}
   18132:	1f 91       	pop	r17
   18134:	0f 91       	pop	r16
   18136:	08 95       	ret

00018138 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   18138:	0f 93       	push	r16
   1813a:	1f 93       	push	r17
   1813c:	fc 01       	movw	r30, r24
   1813e:	e6 0f       	add	r30, r22
   18140:	f7 1f       	adc	r31, r23
   18142:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   18144:	cf 01       	movw	r24, r30
   18146:	86 1b       	sub	r24, r22
   18148:	97 0b       	sbc	r25, r23
   1814a:	84 17       	cp	r24, r20
   1814c:	95 07       	cpc	r25, r21
   1814e:	34 f4       	brge	.+12     	; 0x1815c <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   18150:	01 93       	st	Z+, r16
        val >>= 8;
   18152:	01 2f       	mov	r16, r17
   18154:	12 2f       	mov	r17, r18
   18156:	23 2f       	mov	r18, r19
   18158:	33 27       	eor	r19, r19
   1815a:	f4 cf       	rjmp	.-24     	; 0x18144 <V2B_LSB+0xc>
    }
}
   1815c:	1f 91       	pop	r17
   1815e:	0f 91       	pop	r16
   18160:	08 95       	ret

00018162 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   18162:	cf 92       	push	r12
   18164:	df 92       	push	r13
   18166:	ef 92       	push	r14
   18168:	ff 92       	push	r15
   1816a:	fc 01       	movw	r30, r24
   1816c:	e6 0f       	add	r30, r22
   1816e:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   18170:	60 e0       	ldi	r22, 0x00	; 0
   18172:	70 e0       	ldi	r23, 0x00	; 0
   18174:	cb 01       	movw	r24, r22
   18176:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   18178:	9f 01       	movw	r18, r30
   1817a:	2a 1b       	sub	r18, r26
   1817c:	3b 0b       	sbc	r19, r27
   1817e:	24 17       	cp	r18, r20
   18180:	35 07       	cpc	r19, r21
   18182:	4c f4       	brge	.+18     	; 0x18196 <B2V_MSB+0x34>
    {
        val <<= 8;
   18184:	cc 24       	eor	r12, r12
   18186:	d6 2e       	mov	r13, r22
   18188:	e7 2e       	mov	r14, r23
   1818a:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   1818c:	21 91       	ld	r18, Z+
   1818e:	c7 01       	movw	r24, r14
   18190:	b6 01       	movw	r22, r12
   18192:	62 2b       	or	r22, r18
   18194:	f1 cf       	rjmp	.-30     	; 0x18178 <B2V_MSB+0x16>
    }
    return(val);
}
   18196:	ff 90       	pop	r15
   18198:	ef 90       	pop	r14
   1819a:	df 90       	pop	r13
   1819c:	cf 90       	pop	r12
   1819e:	08 95       	ret

000181a0 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   181a0:	cf 92       	push	r12
   181a2:	df 92       	push	r13
   181a4:	ef 92       	push	r14
   181a6:	ff 92       	push	r15
   181a8:	9c 01       	movw	r18, r24
   181aa:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   181ac:	60 e0       	ldi	r22, 0x00	; 0
   181ae:	70 e0       	ldi	r23, 0x00	; 0
   181b0:	cb 01       	movw	r24, r22
   181b2:	41 50       	subi	r20, 0x01	; 1
   181b4:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   181b6:	57 fd       	sbrc	r21, 7
   181b8:	0e c0       	rjmp	.+28     	; 0x181d6 <B2V_LSB+0x36>
    {
        val <<= 8;
   181ba:	cc 24       	eor	r12, r12
   181bc:	d6 2e       	mov	r13, r22
   181be:	e7 2e       	mov	r14, r23
   181c0:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   181c2:	fa 01       	movw	r30, r20
   181c4:	ea 0f       	add	r30, r26
   181c6:	fb 1f       	adc	r31, r27
   181c8:	e2 0f       	add	r30, r18
   181ca:	f3 1f       	adc	r31, r19
   181cc:	e0 81       	ld	r30, Z
   181ce:	c7 01       	movw	r24, r14
   181d0:	b6 01       	movw	r22, r12
   181d2:	6e 2b       	or	r22, r30
   181d4:	ee cf       	rjmp	.-36     	; 0x181b2 <B2V_LSB+0x12>
    }
    return(val);
}
   181d6:	ff 90       	pop	r15
   181d8:	ef 90       	pop	r14
   181da:	df 90       	pop	r13
   181dc:	cf 90       	pop	r12
   181de:	08 95       	ret

000181e0 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   181e0:	cf 93       	push	r28
   181e2:	df 93       	push	r29
   181e4:	00 d0       	rcall	.+0      	; 0x181e6 <lif_help+0x6>
   181e6:	1f 92       	push	r1
   181e8:	ec 01       	movw	r28, r24
   181ea:	8e e0       	ldi	r24, 0x0E	; 14
   181ec:	97 e4       	ldi	r25, 0x47	; 71
   181ee:	a0 e0       	ldi	r26, 0x00	; 0
   181f0:	ed b7       	in	r30, 0x3d	; 61
   181f2:	fe b7       	in	r31, 0x3e	; 62
   181f4:	81 83       	std	Z+1, r24	; 0x01
   181f6:	92 83       	std	Z+2, r25	; 0x02
   181f8:	a3 83       	std	Z+3, r26	; 0x03
   181fa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   181fe:	cd 2b       	or	r28, r29
   18200:	51 f0       	breq	.+20     	; 0x18216 <lif_help+0x36>
   18202:	8a e4       	ldi	r24, 0x4A	; 74
   18204:	95 e4       	ldi	r25, 0x45	; 69
   18206:	a0 e0       	ldi	r26, 0x00	; 0
   18208:	ed b7       	in	r30, 0x3d	; 61
   1820a:	fe b7       	in	r31, 0x3e	; 62
   1820c:	81 83       	std	Z+1, r24	; 0x01
   1820e:	92 83       	std	Z+2, r25	; 0x02
   18210:	a3 83       	std	Z+3, r26	; 0x03
   18212:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18216:	cd b7       	in	r28, 0x3d	; 61
   18218:	de b7       	in	r29, 0x3e	; 62
   1821a:	23 96       	adiw	r28, 0x03	; 3
   1821c:	e2 e0       	ldi	r30, 0x02	; 2
   1821e:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00018222 <lif_calloc>:
   18222:	cf 92       	push	r12
   18224:	df 92       	push	r13
   18226:	ef 92       	push	r14
   18228:	ff 92       	push	r15
   1822a:	cf 93       	push	r28
   1822c:	df 93       	push	r29
   1822e:	ad b7       	in	r26, 0x3d	; 61
   18230:	be b7       	in	r27, 0x3e	; 62
   18232:	17 97       	sbiw	r26, 0x07	; 7
   18234:	0f b6       	in	r0, 0x3f	; 63
   18236:	f8 94       	cli
   18238:	be bf       	out	0x3e, r27	; 62
   1823a:	0f be       	out	0x3f, r0	; 63
   1823c:	ad bf       	out	0x3d, r26	; 61
   1823e:	6b 01       	movw	r12, r22
   18240:	7c 01       	movw	r14, r24
   18242:	61 e0       	ldi	r22, 0x01	; 1
   18244:	70 e0       	ldi	r23, 0x00	; 0
   18246:	c6 01       	movw	r24, r12
   18248:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <safecalloc>
   1824c:	ec 01       	movw	r28, r24
   1824e:	89 2b       	or	r24, r25
   18250:	71 f4       	brne	.+28     	; 0x1826e <lif_calloc+0x4c>
   18252:	ed b7       	in	r30, 0x3d	; 61
   18254:	fe b7       	in	r31, 0x3e	; 62
   18256:	c4 82       	std	Z+4, r12	; 0x04
   18258:	d5 82       	std	Z+5, r13	; 0x05
   1825a:	e6 82       	std	Z+6, r14	; 0x06
   1825c:	f7 82       	std	Z+7, r15	; 0x07
   1825e:	83 ee       	ldi	r24, 0xE3	; 227
   18260:	94 e4       	ldi	r25, 0x44	; 68
   18262:	a0 e0       	ldi	r26, 0x00	; 0
   18264:	81 83       	std	Z+1, r24	; 0x01
   18266:	92 83       	std	Z+2, r25	; 0x02
   18268:	a3 83       	std	Z+3, r26	; 0x03
   1826a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1826e:	ce 01       	movw	r24, r28
   18270:	ad b7       	in	r26, 0x3d	; 61
   18272:	be b7       	in	r27, 0x3e	; 62
   18274:	17 96       	adiw	r26, 0x07	; 7
   18276:	0f b6       	in	r0, 0x3f	; 63
   18278:	f8 94       	cli
   1827a:	be bf       	out	0x3e, r27	; 62
   1827c:	0f be       	out	0x3f, r0	; 63
   1827e:	ad bf       	out	0x3d, r26	; 61
   18280:	df 91       	pop	r29
   18282:	cf 91       	pop	r28
   18284:	ff 90       	pop	r15
   18286:	ef 90       	pop	r14
   18288:	df 90       	pop	r13
   1828a:	cf 90       	pop	r12
   1828c:	08 95       	ret

0001828e <lif_free>:
   1828e:	00 d0       	rcall	.+0      	; 0x18290 <lif_free+0x2>
   18290:	1f 92       	push	r1
   18292:	00 97       	sbiw	r24, 0x00	; 0
   18294:	59 f4       	brne	.+22     	; 0x182ac <lif_free+0x1e>
   18296:	8b ec       	ldi	r24, 0xCB	; 203
   18298:	94 e4       	ldi	r25, 0x44	; 68
   1829a:	a0 e0       	ldi	r26, 0x00	; 0
   1829c:	ed b7       	in	r30, 0x3d	; 61
   1829e:	fe b7       	in	r31, 0x3e	; 62
   182a0:	81 83       	std	Z+1, r24	; 0x01
   182a2:	92 83       	std	Z+2, r25	; 0x02
   182a4:	a3 83       	std	Z+3, r26	; 0x03
   182a6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   182aa:	02 c0       	rjmp	.+4      	; 0x182b0 <lif_free+0x22>
   182ac:	0e 94 2a 28 	call	0x5054	; 0x5054 <safefree>
   182b0:	0f 90       	pop	r0
   182b2:	0f 90       	pop	r0
   182b4:	0f 90       	pop	r0
   182b6:	08 95       	ret

000182b8 <lif_stralloc>:
   182b8:	0f 93       	push	r16
   182ba:	1f 93       	push	r17
   182bc:	cf 93       	push	r28
   182be:	df 93       	push	r29
   182c0:	ec 01       	movw	r28, r24
   182c2:	fc 01       	movw	r30, r24
   182c4:	01 90       	ld	r0, Z+
   182c6:	00 20       	and	r0, r0
   182c8:	e9 f7       	brne	.-6      	; 0x182c4 <lif_stralloc+0xc>
   182ca:	bf 01       	movw	r22, r30
   182cc:	68 1b       	sub	r22, r24
   182ce:	79 0b       	sbc	r23, r25
   182d0:	6d 5f       	subi	r22, 0xFD	; 253
   182d2:	7f 4f       	sbci	r23, 0xFF	; 255
   182d4:	07 2e       	mov	r0, r23
   182d6:	00 0c       	add	r0, r0
   182d8:	88 0b       	sbc	r24, r24
   182da:	99 0b       	sbc	r25, r25
   182dc:	a2 df       	rcall	.-188    	; 0x18222 <lif_calloc>
   182de:	8c 01       	movw	r16, r24
   182e0:	00 97       	sbiw	r24, 0x00	; 0
   182e2:	19 f0       	breq	.+6      	; 0x182ea <lif_stralloc+0x32>
   182e4:	be 01       	movw	r22, r28
   182e6:	0e 94 73 31 	call	0x62e6	; 0x62e6 <strcpy>
   182ea:	c8 01       	movw	r24, r16
   182ec:	df 91       	pop	r29
   182ee:	cf 91       	pop	r28
   182f0:	1f 91       	pop	r17
   182f2:	0f 91       	pop	r16
   182f4:	08 95       	ret

000182f6 <lif_open>:
   182f6:	ef 92       	push	r14
   182f8:	ff 92       	push	r15
   182fa:	0f 93       	push	r16
   182fc:	1f 93       	push	r17
   182fe:	cf 93       	push	r28
   18300:	df 93       	push	r29
   18302:	ad b7       	in	r26, 0x3d	; 61
   18304:	be b7       	in	r27, 0x3e	; 62
   18306:	17 97       	sbiw	r26, 0x07	; 7
   18308:	0f b6       	in	r0, 0x3f	; 63
   1830a:	f8 94       	cli
   1830c:	be bf       	out	0x3e, r27	; 62
   1830e:	0f be       	out	0x3f, r0	; 63
   18310:	ad bf       	out	0x3d, r26	; 61
   18312:	8c 01       	movw	r16, r24
   18314:	7b 01       	movw	r14, r22
   18316:	0e 94 74 7e 	call	0xfce8	; 0xfce8 <fopen>
   1831a:	ec 01       	movw	r28, r24
   1831c:	89 2b       	or	r24, r25
   1831e:	71 f4       	brne	.+28     	; 0x1833c <lif_open+0x46>
   18320:	ed b7       	in	r30, 0x3d	; 61
   18322:	fe b7       	in	r31, 0x3e	; 62
   18324:	f7 82       	std	Z+7, r15	; 0x07
   18326:	e6 82       	std	Z+6, r14	; 0x06
   18328:	15 83       	std	Z+5, r17	; 0x05
   1832a:	04 83       	std	Z+4, r16	; 0x04
   1832c:	86 ea       	ldi	r24, 0xA6	; 166
   1832e:	94 e4       	ldi	r25, 0x44	; 68
   18330:	a0 e0       	ldi	r26, 0x00	; 0
   18332:	81 83       	std	Z+1, r24	; 0x01
   18334:	92 83       	std	Z+2, r25	; 0x02
   18336:	a3 83       	std	Z+3, r26	; 0x03
   18338:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1833c:	ce 01       	movw	r24, r28
   1833e:	cd b7       	in	r28, 0x3d	; 61
   18340:	de b7       	in	r29, 0x3e	; 62
   18342:	27 96       	adiw	r28, 0x07	; 7
   18344:	e6 e0       	ldi	r30, 0x06	; 6
   18346:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

0001834a <lif_stat>:
   1834a:	0f 93       	push	r16
   1834c:	1f 93       	push	r17
   1834e:	cf 93       	push	r28
   18350:	df 93       	push	r29
   18352:	00 d0       	rcall	.+0      	; 0x18354 <lif_stat+0xa>
   18354:	00 d0       	rcall	.+0      	; 0x18356 <lif_stat+0xc>
   18356:	1f 92       	push	r1
   18358:	8c 01       	movw	r16, r24
   1835a:	d6 2f       	mov	r29, r22
   1835c:	c7 2f       	mov	r28, r23
   1835e:	0e 94 79 79 	call	0xf2f2	; 0xf2f2 <stat>
   18362:	97 ff       	sbrs	r25, 7
   18364:	0f c0       	rjmp	.+30     	; 0x18384 <lif_stat+0x3a>
   18366:	ed b7       	in	r30, 0x3d	; 61
   18368:	fe b7       	in	r31, 0x3e	; 62
   1836a:	15 83       	std	Z+5, r17	; 0x05
   1836c:	04 83       	std	Z+4, r16	; 0x04
   1836e:	8d e8       	ldi	r24, 0x8D	; 141
   18370:	94 e4       	ldi	r25, 0x44	; 68
   18372:	a0 e0       	ldi	r26, 0x00	; 0
   18374:	81 83       	std	Z+1, r24	; 0x01
   18376:	92 83       	std	Z+2, r25	; 0x02
   18378:	a3 83       	std	Z+3, r26	; 0x03
   1837a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1837e:	80 e0       	ldi	r24, 0x00	; 0
   18380:	90 e0       	ldi	r25, 0x00	; 0
   18382:	02 c0       	rjmp	.+4      	; 0x18388 <lif_stat+0x3e>
   18384:	8d 2f       	mov	r24, r29
   18386:	9c 2f       	mov	r25, r28
   18388:	cd b7       	in	r28, 0x3d	; 61
   1838a:	de b7       	in	r29, 0x3e	; 62
   1838c:	25 96       	adiw	r28, 0x05	; 5
   1838e:	e4 e0       	ldi	r30, 0x04	; 4
   18390:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00018394 <lif_seek_msg>:
   18394:	a9 e0       	ldi	r26, 0x09	; 9
   18396:	b0 e0       	ldi	r27, 0x00	; 0
   18398:	e0 ed       	ldi	r30, 0xD0	; 208
   1839a:	f1 ec       	ldi	r31, 0xC1	; 193
   1839c:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
   183a0:	ec 01       	movw	r28, r24
   183a2:	6a 01       	movw	r12, r20
   183a4:	7b 01       	movw	r14, r22
   183a6:	89 01       	movw	r16, r18
   183a8:	0e 94 b3 7a 	call	0xf566	; 0xf566 <ftell>
   183ac:	6c 15       	cp	r22, r12
   183ae:	7d 05       	cpc	r23, r13
   183b0:	8e 05       	cpc	r24, r14
   183b2:	9f 05       	cpc	r25, r15
   183b4:	19 f4       	brne	.+6      	; 0x183bc <lif_seek_msg+0x28>
   183b6:	81 e0       	ldi	r24, 0x01	; 1
   183b8:	90 e0       	ldi	r25, 0x00	; 0
   183ba:	1b c0       	rjmp	.+54     	; 0x183f2 <lif_seek_msg+0x5e>
   183bc:	20 e0       	ldi	r18, 0x00	; 0
   183be:	30 e0       	ldi	r19, 0x00	; 0
   183c0:	b7 01       	movw	r22, r14
   183c2:	a6 01       	movw	r20, r12
   183c4:	ce 01       	movw	r24, r28
   183c6:	0e 94 36 7b 	call	0xf66c	; 0xf66c <fseek>
   183ca:	97 ff       	sbrs	r25, 7
   183cc:	f4 cf       	rjmp	.-24     	; 0x183b6 <lif_seek_msg+0x22>
   183ce:	ed b7       	in	r30, 0x3d	; 61
   183d0:	fe b7       	in	r31, 0x3e	; 62
   183d2:	c6 82       	std	Z+6, r12	; 0x06
   183d4:	d7 82       	std	Z+7, r13	; 0x07
   183d6:	e0 86       	std	Z+8, r14	; 0x08
   183d8:	f1 86       	std	Z+9, r15	; 0x09
   183da:	15 83       	std	Z+5, r17	; 0x05
   183dc:	04 83       	std	Z+4, r16	; 0x04
   183de:	8c e6       	ldi	r24, 0x6C	; 108
   183e0:	94 e4       	ldi	r25, 0x44	; 68
   183e2:	a0 e0       	ldi	r26, 0x00	; 0
   183e4:	81 83       	std	Z+1, r24	; 0x01
   183e6:	92 83       	std	Z+2, r25	; 0x02
   183e8:	a3 83       	std	Z+3, r26	; 0x03
   183ea:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   183ee:	80 e0       	ldi	r24, 0x00	; 0
   183f0:	90 e0       	ldi	r25, 0x00	; 0
   183f2:	cd b7       	in	r28, 0x3d	; 61
   183f4:	de b7       	in	r29, 0x3e	; 62
   183f6:	29 96       	adiw	r28, 0x09	; 9
   183f8:	e8 e0       	ldi	r30, 0x08	; 8
   183fa:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

000183fe <lif_read>:
   183fe:	af e0       	ldi	r26, 0x0F	; 15
   18400:	b0 e0       	ldi	r27, 0x00	; 0
   18402:	e5 e0       	ldi	r30, 0x05	; 5
   18404:	f2 ec       	ldi	r31, 0xC2	; 194
   18406:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
   1840a:	ec 01       	movw	r28, r24
   1840c:	7b 01       	movw	r14, r22
   1840e:	49 01       	movw	r8, r18
   18410:	5a 01       	movw	r10, r20
   18412:	28 81       	ld	r18, Y
   18414:	39 81       	ldd	r19, Y+1	; 0x01
   18416:	b5 01       	movw	r22, r10
   18418:	a4 01       	movw	r20, r8
   1841a:	8a 81       	ldd	r24, Y+2	; 0x02
   1841c:	9b 81       	ldd	r25, Y+3	; 0x03
   1841e:	ba df       	rcall	.-140    	; 0x18394 <lif_seek_msg>
   18420:	89 2b       	or	r24, r25
   18422:	a1 f1       	breq	.+104    	; 0x1848c <lif_read+0x8e>
   18424:	2a 81       	ldd	r18, Y+2	; 0x02
   18426:	3b 81       	ldd	r19, Y+3	; 0x03
   18428:	a8 01       	movw	r20, r16
   1842a:	61 e0       	ldi	r22, 0x01	; 1
   1842c:	70 e0       	ldi	r23, 0x00	; 0
   1842e:	c7 01       	movw	r24, r14
   18430:	0e 94 ca 7b 	call	0xf794	; 0xf794 <fread>
   18434:	6c 01       	movw	r12, r24
   18436:	e1 2c       	mov	r14, r1
   18438:	f1 2c       	mov	r15, r1
   1843a:	b8 01       	movw	r22, r16
   1843c:	01 2e       	mov	r0, r17
   1843e:	00 0c       	add	r0, r0
   18440:	88 0b       	sbc	r24, r24
   18442:	99 0b       	sbc	r25, r25
   18444:	c6 16       	cp	r12, r22
   18446:	d7 06       	cpc	r13, r23
   18448:	e8 06       	cpc	r14, r24
   1844a:	f9 06       	cpc	r15, r25
   1844c:	29 f1       	breq	.+74     	; 0x18498 <lif_read+0x9a>
   1844e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18452:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18456:	92 ff       	sbrs	r25, 2
   18458:	1d c0       	rjmp	.+58     	; 0x18494 <lif_read+0x96>
   1845a:	ed b7       	in	r30, 0x3d	; 61
   1845c:	fe b7       	in	r31, 0x3e	; 62
   1845e:	17 87       	std	Z+15, r17	; 0x0f
   18460:	06 87       	std	Z+14, r16	; 0x0e
   18462:	c2 86       	std	Z+10, r12	; 0x0a
   18464:	d3 86       	std	Z+11, r13	; 0x0b
   18466:	e4 86       	std	Z+12, r14	; 0x0c
   18468:	f5 86       	std	Z+13, r15	; 0x0d
   1846a:	86 82       	std	Z+6, r8	; 0x06
   1846c:	97 82       	std	Z+7, r9	; 0x07
   1846e:	a0 86       	std	Z+8, r10	; 0x08
   18470:	b1 86       	std	Z+9, r11	; 0x09
   18472:	88 81       	ld	r24, Y
   18474:	99 81       	ldd	r25, Y+1	; 0x01
   18476:	95 83       	std	Z+5, r25	; 0x05
   18478:	84 83       	std	Z+4, r24	; 0x04
   1847a:	80 e3       	ldi	r24, 0x30	; 48
   1847c:	94 e4       	ldi	r25, 0x44	; 68
   1847e:	a0 e0       	ldi	r26, 0x00	; 0
   18480:	81 83       	std	Z+1, r24	; 0x01
   18482:	92 83       	std	Z+2, r25	; 0x02
   18484:	a3 83       	std	Z+3, r26	; 0x03
   18486:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1848a:	04 c0       	rjmp	.+8      	; 0x18494 <lif_read+0x96>
   1848c:	60 e0       	ldi	r22, 0x00	; 0
   1848e:	70 e0       	ldi	r23, 0x00	; 0
   18490:	cb 01       	movw	r24, r22
   18492:	02 c0       	rjmp	.+4      	; 0x18498 <lif_read+0x9a>
   18494:	c7 01       	movw	r24, r14
   18496:	b6 01       	movw	r22, r12
   18498:	cd b7       	in	r28, 0x3d	; 61
   1849a:	de b7       	in	r29, 0x3e	; 62
   1849c:	2f 96       	adiw	r28, 0x0f	; 15
   1849e:	ec e0       	ldi	r30, 0x0C	; 12
   184a0:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

000184a4 <lif_write>:
   184a4:	8f 92       	push	r8
   184a6:	9f 92       	push	r9
   184a8:	af 92       	push	r10
   184aa:	bf 92       	push	r11
   184ac:	ef 92       	push	r14
   184ae:	ff 92       	push	r15
   184b0:	0f 93       	push	r16
   184b2:	1f 93       	push	r17
   184b4:	cf 93       	push	r28
   184b6:	df 93       	push	r29
   184b8:	ad b7       	in	r26, 0x3d	; 61
   184ba:	be b7       	in	r27, 0x3e	; 62
   184bc:	1d 97       	sbiw	r26, 0x0d	; 13
   184be:	0f b6       	in	r0, 0x3f	; 63
   184c0:	f8 94       	cli
   184c2:	be bf       	out	0x3e, r27	; 62
   184c4:	0f be       	out	0x3f, r0	; 63
   184c6:	ad bf       	out	0x3d, r26	; 61
   184c8:	7c 01       	movw	r14, r24
   184ca:	eb 01       	movw	r28, r22
   184cc:	49 01       	movw	r8, r18
   184ce:	5a 01       	movw	r10, r20
   184d0:	fc 01       	movw	r30, r24
   184d2:	20 81       	ld	r18, Z
   184d4:	31 81       	ldd	r19, Z+1	; 0x01
   184d6:	b5 01       	movw	r22, r10
   184d8:	a4 01       	movw	r20, r8
   184da:	82 81       	ldd	r24, Z+2	; 0x02
   184dc:	93 81       	ldd	r25, Z+3	; 0x03
   184de:	5a df       	rcall	.-332    	; 0x18394 <lif_seek_msg>
   184e0:	00 97       	sbiw	r24, 0x00	; 0
   184e2:	81 f1       	breq	.+96     	; 0x18544 <lif_write+0xa0>
   184e4:	f7 01       	movw	r30, r14
   184e6:	22 81       	ldd	r18, Z+2	; 0x02
   184e8:	33 81       	ldd	r19, Z+3	; 0x03
   184ea:	a8 01       	movw	r20, r16
   184ec:	61 e0       	ldi	r22, 0x01	; 1
   184ee:	70 e0       	ldi	r23, 0x00	; 0
   184f0:	ce 01       	movw	r24, r28
   184f2:	0e 94 9c 7c 	call	0xf938	; 0xf938 <fwrite>
   184f6:	ec 01       	movw	r28, r24
   184f8:	08 17       	cp	r16, r24
   184fa:	19 07       	cpc	r17, r25
   184fc:	01 f1       	breq	.+64     	; 0x1853e <lif_write+0x9a>
   184fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18502:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18506:	92 ff       	sbrs	r25, 2
   18508:	1c c0       	rjmp	.+56     	; 0x18542 <lif_write+0x9e>
   1850a:	ed b7       	in	r30, 0x3d	; 61
   1850c:	fe b7       	in	r31, 0x3e	; 62
   1850e:	15 87       	std	Z+13, r17	; 0x0d
   18510:	04 87       	std	Z+12, r16	; 0x0c
   18512:	d3 87       	std	Z+11, r29	; 0x0b
   18514:	c2 87       	std	Z+10, r28	; 0x0a
   18516:	86 82       	std	Z+6, r8	; 0x06
   18518:	97 82       	std	Z+7, r9	; 0x07
   1851a:	a0 86       	std	Z+8, r10	; 0x08
   1851c:	b1 86       	std	Z+9, r11	; 0x09
   1851e:	f7 01       	movw	r30, r14
   18520:	80 81       	ld	r24, Z
   18522:	91 81       	ldd	r25, Z+1	; 0x01
   18524:	ed b7       	in	r30, 0x3d	; 61
   18526:	fe b7       	in	r31, 0x3e	; 62
   18528:	95 83       	std	Z+5, r25	; 0x05
   1852a:	84 83       	std	Z+4, r24	; 0x04
   1852c:	83 ef       	ldi	r24, 0xF3	; 243
   1852e:	93 e4       	ldi	r25, 0x43	; 67
   18530:	a0 e0       	ldi	r26, 0x00	; 0
   18532:	81 83       	std	Z+1, r24	; 0x01
   18534:	92 83       	std	Z+2, r25	; 0x02
   18536:	a3 83       	std	Z+3, r26	; 0x03
   18538:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1853c:	02 c0       	rjmp	.+4      	; 0x18542 <lif_write+0x9e>
   1853e:	c8 01       	movw	r24, r16
   18540:	01 c0       	rjmp	.+2      	; 0x18544 <lif_write+0xa0>
   18542:	ce 01       	movw	r24, r28
   18544:	ad b7       	in	r26, 0x3d	; 61
   18546:	be b7       	in	r27, 0x3e	; 62
   18548:	1d 96       	adiw	r26, 0x0d	; 13
   1854a:	0f b6       	in	r0, 0x3f	; 63
   1854c:	f8 94       	cli
   1854e:	be bf       	out	0x3e, r27	; 62
   18550:	0f be       	out	0x3f, r0	; 63
   18552:	ad bf       	out	0x3d, r26	; 61
   18554:	df 91       	pop	r29
   18556:	cf 91       	pop	r28
   18558:	1f 91       	pop	r17
   1855a:	0f 91       	pop	r16
   1855c:	ff 90       	pop	r15
   1855e:	ef 90       	pop	r14
   18560:	bf 90       	pop	r11
   18562:	af 90       	pop	r10
   18564:	9f 90       	pop	r9
   18566:	8f 90       	pop	r8
   18568:	08 95       	ret

0001856a <lif_chars>:
   1856a:	80 32       	cpi	r24, 0x20	; 32
   1856c:	91 05       	cpc	r25, r1
   1856e:	e1 f0       	breq	.+56     	; 0x185a8 <lif_chars+0x3e>
   18570:	9c 01       	movw	r18, r24
   18572:	21 56       	subi	r18, 0x61	; 97
   18574:	31 09       	sbc	r19, r1
   18576:	2a 31       	cpi	r18, 0x1A	; 26
   18578:	31 05       	cpc	r19, r1
   1857a:	10 f4       	brcc	.+4      	; 0x18580 <lif_chars+0x16>
   1857c:	80 97       	sbiw	r24, 0x20	; 32
   1857e:	08 95       	ret
   18580:	9c 01       	movw	r18, r24
   18582:	21 54       	subi	r18, 0x41	; 65
   18584:	31 09       	sbc	r19, r1
   18586:	2a 31       	cpi	r18, 0x1A	; 26
   18588:	31 05       	cpc	r19, r1
   1858a:	c8 f0       	brcs	.+50     	; 0x185be <lif_chars+0x54>
   1858c:	16 16       	cp	r1, r22
   1858e:	17 06       	cpc	r1, r23
   18590:	74 f4       	brge	.+28     	; 0x185ae <lif_chars+0x44>
   18592:	2f 5e       	subi	r18, 0xEF	; 239
   18594:	3f 4f       	sbci	r19, 0xFF	; 255
   18596:	2a 30       	cpi	r18, 0x0A	; 10
   18598:	31 05       	cpc	r19, r1
   1859a:	88 f0       	brcs	.+34     	; 0x185be <lif_chars+0x54>
   1859c:	8f 35       	cpi	r24, 0x5F	; 95
   1859e:	91 05       	cpc	r25, r1
   185a0:	49 f0       	breq	.+18     	; 0x185b4 <lif_chars+0x4a>
   185a2:	8d 97       	sbiw	r24, 0x2d	; 45
   185a4:	21 f4       	brne	.+8      	; 0x185ae <lif_chars+0x44>
   185a6:	09 c0       	rjmp	.+18     	; 0x185ba <lif_chars+0x50>
   185a8:	80 e2       	ldi	r24, 0x20	; 32
   185aa:	90 e0       	ldi	r25, 0x00	; 0
   185ac:	08 95       	ret
   185ae:	80 e0       	ldi	r24, 0x00	; 0
   185b0:	90 e0       	ldi	r25, 0x00	; 0
   185b2:	08 95       	ret
   185b4:	8f e5       	ldi	r24, 0x5F	; 95
   185b6:	90 e0       	ldi	r25, 0x00	; 0
   185b8:	08 95       	ret
   185ba:	8d e2       	ldi	r24, 0x2D	; 45
   185bc:	90 e0       	ldi	r25, 0x00	; 0
   185be:	08 95       	ret

000185c0 <lif_B2S>:
   185c0:	a0 e0       	ldi	r26, 0x00	; 0
   185c2:	b0 e0       	ldi	r27, 0x00	; 0
   185c4:	e6 ee       	ldi	r30, 0xE6	; 230
   185c6:	f2 ec       	ldi	r31, 0xC2	; 194
   185c8:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
   185cc:	5c 01       	movw	r10, r24
   185ce:	6b 01       	movw	r12, r22
   185d0:	ea 01       	movw	r28, r20
   185d2:	4c 01       	movw	r8, r24
   185d4:	ee 24       	eor	r14, r14
   185d6:	e3 94       	inc	r14
   185d8:	f1 2c       	mov	r15, r1
   185da:	00 e0       	ldi	r16, 0x00	; 0
   185dc:	10 e0       	ldi	r17, 0x00	; 0
   185de:	0c 17       	cp	r16, r28
   185e0:	1d 07       	cpc	r17, r29
   185e2:	6c f4       	brge	.+26     	; 0x185fe <lif_B2S+0x3e>
   185e4:	f4 01       	movw	r30, r8
   185e6:	81 91       	ld	r24, Z+
   185e8:	4f 01       	movw	r8, r30
   185ea:	b8 01       	movw	r22, r16
   185ec:	90 e0       	ldi	r25, 0x00	; 0
   185ee:	bd df       	rcall	.-134    	; 0x1856a <lif_chars>
   185f0:	89 2b       	or	r24, r25
   185f2:	11 f4       	brne	.+4      	; 0x185f8 <lif_B2S+0x38>
   185f4:	e1 2c       	mov	r14, r1
   185f6:	f1 2c       	mov	r15, r1
   185f8:	0f 5f       	subi	r16, 0xFF	; 255
   185fa:	1f 4f       	sbci	r17, 0xFF	; 255
   185fc:	f0 cf       	rjmp	.-32     	; 0x185de <lif_B2S+0x1e>
   185fe:	d6 01       	movw	r26, r12
   18600:	f5 01       	movw	r30, r10
   18602:	cf 01       	movw	r24, r30
   18604:	8a 19       	sub	r24, r10
   18606:	9b 09       	sbc	r25, r11
   18608:	8c 17       	cp	r24, r28
   1860a:	9d 07       	cpc	r25, r29
   1860c:	1c f4       	brge	.+6      	; 0x18614 <lif_B2S+0x54>
   1860e:	81 91       	ld	r24, Z+
   18610:	8d 93       	st	X+, r24
   18612:	f7 cf       	rjmp	.-18     	; 0x18602 <lif_B2S+0x42>
   18614:	d7 ff       	sbrs	r29, 7
   18616:	02 c0       	rjmp	.+4      	; 0x1861c <lif_B2S+0x5c>
   18618:	c0 e0       	ldi	r28, 0x00	; 0
   1861a:	d0 e0       	ldi	r29, 0x00	; 0
   1861c:	cc 0d       	add	r28, r12
   1861e:	dd 1d       	adc	r29, r13
   18620:	18 82       	st	Y, r1
   18622:	c6 01       	movw	r24, r12
   18624:	0e 94 51 32 	call	0x64a2	; 0x64a2 <trim_tail>
   18628:	c7 01       	movw	r24, r14
   1862a:	cd b7       	in	r28, 0x3d	; 61
   1862c:	de b7       	in	r29, 0x3e	; 62
   1862e:	ec e0       	ldi	r30, 0x0C	; 12
   18630:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

00018634 <lif_checkname>:
   18634:	ef 92       	push	r14
   18636:	ff 92       	push	r15
   18638:	0f 93       	push	r16
   1863a:	1f 93       	push	r17
   1863c:	cf 93       	push	r28
   1863e:	df 93       	push	r29
   18640:	7c 01       	movw	r14, r24
   18642:	ec 01       	movw	r28, r24
   18644:	01 e0       	ldi	r16, 0x01	; 1
   18646:	10 e0       	ldi	r17, 0x00	; 0
   18648:	be 01       	movw	r22, r28
   1864a:	6e 19       	sub	r22, r14
   1864c:	7f 09       	sbc	r23, r15
   1864e:	89 91       	ld	r24, Y+
   18650:	88 23       	and	r24, r24
   18652:	39 f0       	breq	.+14     	; 0x18662 <lif_checkname+0x2e>
   18654:	90 e0       	ldi	r25, 0x00	; 0
   18656:	89 df       	rcall	.-238    	; 0x1856a <lif_chars>
   18658:	89 2b       	or	r24, r25
   1865a:	b1 f7       	brne	.-20     	; 0x18648 <lif_checkname+0x14>
   1865c:	00 e0       	ldi	r16, 0x00	; 0
   1865e:	10 e0       	ldi	r17, 0x00	; 0
   18660:	f3 cf       	rjmp	.-26     	; 0x18648 <lif_checkname+0x14>
   18662:	c8 01       	movw	r24, r16
   18664:	cd b7       	in	r28, 0x3d	; 61
   18666:	de b7       	in	r29, 0x3e	; 62
   18668:	e6 e0       	ldi	r30, 0x06	; 6
   1866a:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

0001866e <lif_S2B>:
   1866e:	fb 01       	movw	r30, r22
   18670:	dc 01       	movw	r26, r24
   18672:	20 e0       	ldi	r18, 0x00	; 0
   18674:	30 e0       	ldi	r19, 0x00	; 0
   18676:	61 91       	ld	r22, Z+
   18678:	61 11       	cpse	r22, r1
   1867a:	05 c0       	rjmp	.+10     	; 0x18686 <lif_S2B+0x18>
   1867c:	fc 01       	movw	r30, r24
   1867e:	e2 0f       	add	r30, r18
   18680:	f3 1f       	adc	r31, r19
   18682:	60 e2       	ldi	r22, 0x20	; 32
   18684:	08 c0       	rjmp	.+16     	; 0x18696 <lif_S2B+0x28>
   18686:	24 17       	cp	r18, r20
   18688:	35 07       	cpc	r19, r21
   1868a:	24 f4       	brge	.+8      	; 0x18694 <lif_S2B+0x26>
   1868c:	6d 93       	st	X+, r22
   1868e:	2f 5f       	subi	r18, 0xFF	; 255
   18690:	3f 4f       	sbci	r19, 0xFF	; 255
   18692:	f1 cf       	rjmp	.-30     	; 0x18676 <lif_S2B+0x8>
   18694:	08 95       	ret
   18696:	9f 01       	movw	r18, r30
   18698:	28 1b       	sub	r18, r24
   1869a:	39 0b       	sbc	r19, r25
   1869c:	24 17       	cp	r18, r20
   1869e:	35 07       	cpc	r19, r21
   186a0:	14 f4       	brge	.+4      	; 0x186a6 <lif_S2B+0x38>
   186a2:	61 93       	st	Z+, r22
   186a4:	f8 cf       	rjmp	.-16     	; 0x18696 <lif_S2B+0x28>
   186a6:	08 95       	ret

000186a8 <lif_fixname>:
   186a8:	a0 e0       	ldi	r26, 0x00	; 0
   186aa:	b0 e0       	ldi	r27, 0x00	; 0
   186ac:	ea e5       	ldi	r30, 0x5A	; 90
   186ae:	f3 ec       	ldi	r31, 0xC3	; 195
   186b0:	0c 94 1f e7 	jmp	0x1ce3e	; 0x1ce3e <__prologue_saves__+0x12>
   186b4:	8c 01       	movw	r16, r24
   186b6:	cb 01       	movw	r24, r22
   186b8:	7a 01       	movw	r14, r20
   186ba:	0e 94 45 77 	call	0xee8a	; 0xee8a <basename>
   186be:	6c 01       	movw	r12, r24
   186c0:	e8 01       	movw	r28, r16
   186c2:	80 e2       	ldi	r24, 0x20	; 32
   186c4:	b8 2e       	mov	r11, r24
   186c6:	be 01       	movw	r22, r28
   186c8:	60 1b       	sub	r22, r16
   186ca:	71 0b       	sbc	r23, r17
   186cc:	f6 01       	movw	r30, r12
   186ce:	81 91       	ld	r24, Z+
   186d0:	6f 01       	movw	r12, r30
   186d2:	81 11       	cpse	r24, r1
   186d4:	02 c0       	rjmp	.+4      	; 0x186da <lif_fixname+0x32>
   186d6:	20 e2       	ldi	r18, 0x20	; 32
   186d8:	0e c0       	rjmp	.+28     	; 0x186f6 <lif_fixname+0x4e>
   186da:	1e 14       	cp	r1, r14
   186dc:	1f 04       	cpc	r1, r15
   186de:	dc f7       	brge	.-10     	; 0x186d6 <lif_fixname+0x2e>
   186e0:	8e 32       	cpi	r24, 0x2E	; 46
   186e2:	c9 f3       	breq	.-14     	; 0x186d6 <lif_fixname+0x2e>
   186e4:	90 e0       	ldi	r25, 0x00	; 0
   186e6:	41 df       	rcall	.-382    	; 0x1856a <lif_chars>
   186e8:	88 23       	and	r24, r24
   186ea:	11 f0       	breq	.+4      	; 0x186f0 <lif_fixname+0x48>
   186ec:	88 83       	st	Y, r24
   186ee:	01 c0       	rjmp	.+2      	; 0x186f2 <lif_fixname+0x4a>
   186f0:	b8 82       	st	Y, r11
   186f2:	21 96       	adiw	r28, 0x01	; 1
   186f4:	e8 cf       	rjmp	.-48     	; 0x186c6 <lif_fixname+0x1e>
   186f6:	ce 01       	movw	r24, r28
   186f8:	80 1b       	sub	r24, r16
   186fa:	91 0b       	sbc	r25, r17
   186fc:	8e 15       	cp	r24, r14
   186fe:	9f 05       	cpc	r25, r15
   18700:	14 f4       	brge	.+4      	; 0x18706 <lif_fixname+0x5e>
   18702:	29 93       	st	Y+, r18
   18704:	f8 cf       	rjmp	.-16     	; 0x186f6 <lif_fixname+0x4e>
   18706:	18 82       	st	Y, r1
   18708:	f8 01       	movw	r30, r16
   1870a:	01 90       	ld	r0, Z+
   1870c:	00 20       	and	r0, r0
   1870e:	e9 f7       	brne	.-6      	; 0x1870a <lif_fixname+0x62>
   18710:	cf 01       	movw	r24, r30
   18712:	01 97       	sbiw	r24, 0x01	; 1
   18714:	80 1b       	sub	r24, r16
   18716:	91 0b       	sbc	r25, r17
   18718:	cd b7       	in	r28, 0x3d	; 61
   1871a:	de b7       	in	r29, 0x3e	; 62
   1871c:	e9 e0       	ldi	r30, 0x09	; 9
   1871e:	0c 94 3b e7 	jmp	0x1ce76	; 0x1ce76 <__epilogue_restores__+0x12>

00018722 <lif_vol2str>:
   18722:	ef 92       	push	r14
   18724:	ff 92       	push	r15
   18726:	0f 93       	push	r16
   18728:	1f 93       	push	r17
   1872a:	cf 93       	push	r28
   1872c:	df 93       	push	r29
   1872e:	7c 01       	movw	r14, r24
   18730:	eb 01       	movw	r28, r22
   18732:	fc 01       	movw	r30, r24
   18734:	04 a1       	ldd	r16, Z+36	; 0x24
   18736:	15 a1       	ldd	r17, Z+37	; 0x25
   18738:	20 e0       	ldi	r18, 0x00	; 0
   1873a:	30 e0       	ldi	r19, 0x00	; 0
   1873c:	42 e0       	ldi	r20, 0x02	; 2
   1873e:	50 e0       	ldi	r21, 0x00	; 0
   18740:	60 e0       	ldi	r22, 0x00	; 0
   18742:	70 e0       	ldi	r23, 0x00	; 0
   18744:	ce 01       	movw	r24, r28
   18746:	e4 dc       	rcall	.-1592   	; 0x18110 <V2B_MSB>
   18748:	b7 01       	movw	r22, r14
   1874a:	6a 5d       	subi	r22, 0xDA	; 218
   1874c:	7f 4f       	sbci	r23, 0xFF	; 255
   1874e:	46 e0       	ldi	r20, 0x06	; 6
   18750:	50 e0       	ldi	r21, 0x00	; 0
   18752:	ce 01       	movw	r24, r28
   18754:	02 96       	adiw	r24, 0x02	; 2
   18756:	8b df       	rcall	.-234    	; 0x1866e <lif_S2B>
   18758:	f7 01       	movw	r30, r14
   1875a:	05 a5       	ldd	r16, Z+45	; 0x2d
   1875c:	16 a5       	ldd	r17, Z+46	; 0x2e
   1875e:	27 a5       	ldd	r18, Z+47	; 0x2f
   18760:	30 a9       	ldd	r19, Z+48	; 0x30
   18762:	44 e0       	ldi	r20, 0x04	; 4
   18764:	50 e0       	ldi	r21, 0x00	; 0
   18766:	68 e0       	ldi	r22, 0x08	; 8
   18768:	70 e0       	ldi	r23, 0x00	; 0
   1876a:	ce 01       	movw	r24, r28
   1876c:	d1 dc       	rcall	.-1630   	; 0x18110 <V2B_MSB>
   1876e:	f7 01       	movw	r30, r14
   18770:	01 a9       	ldd	r16, Z+49	; 0x31
   18772:	12 a9       	ldd	r17, Z+50	; 0x32
   18774:	20 e0       	ldi	r18, 0x00	; 0
   18776:	30 e0       	ldi	r19, 0x00	; 0
   18778:	42 e0       	ldi	r20, 0x02	; 2
   1877a:	50 e0       	ldi	r21, 0x00	; 0
   1877c:	6c e0       	ldi	r22, 0x0C	; 12
   1877e:	70 e0       	ldi	r23, 0x00	; 0
   18780:	ce 01       	movw	r24, r28
   18782:	c6 dc       	rcall	.-1652   	; 0x18110 <V2B_MSB>
   18784:	00 e0       	ldi	r16, 0x00	; 0
   18786:	10 e0       	ldi	r17, 0x00	; 0
   18788:	98 01       	movw	r18, r16
   1878a:	42 e0       	ldi	r20, 0x02	; 2
   1878c:	50 e0       	ldi	r21, 0x00	; 0
   1878e:	6e e0       	ldi	r22, 0x0E	; 14
   18790:	70 e0       	ldi	r23, 0x00	; 0
   18792:	ce 01       	movw	r24, r28
   18794:	bd dc       	rcall	.-1670   	; 0x18110 <V2B_MSB>
   18796:	f7 01       	movw	r30, r14
   18798:	05 a9       	ldd	r16, Z+53	; 0x35
   1879a:	16 a9       	ldd	r17, Z+54	; 0x36
   1879c:	27 a9       	ldd	r18, Z+55	; 0x37
   1879e:	30 ad       	ldd	r19, Z+56	; 0x38
   187a0:	44 e0       	ldi	r20, 0x04	; 4
   187a2:	50 e0       	ldi	r21, 0x00	; 0
   187a4:	60 e1       	ldi	r22, 0x10	; 16
   187a6:	70 e0       	ldi	r23, 0x00	; 0
   187a8:	ce 01       	movw	r24, r28
   187aa:	b2 dc       	rcall	.-1692   	; 0x18110 <V2B_MSB>
   187ac:	f7 01       	movw	r30, r14
   187ae:	01 ad       	ldd	r16, Z+57	; 0x39
   187b0:	12 ad       	ldd	r17, Z+58	; 0x3a
   187b2:	20 e0       	ldi	r18, 0x00	; 0
   187b4:	30 e0       	ldi	r19, 0x00	; 0
   187b6:	42 e0       	ldi	r20, 0x02	; 2
   187b8:	50 e0       	ldi	r21, 0x00	; 0
   187ba:	64 e1       	ldi	r22, 0x14	; 20
   187bc:	70 e0       	ldi	r23, 0x00	; 0
   187be:	ce 01       	movw	r24, r28
   187c0:	a7 dc       	rcall	.-1714   	; 0x18110 <V2B_MSB>
   187c2:	00 e0       	ldi	r16, 0x00	; 0
   187c4:	10 e0       	ldi	r17, 0x00	; 0
   187c6:	98 01       	movw	r18, r16
   187c8:	42 e0       	ldi	r20, 0x02	; 2
   187ca:	50 e0       	ldi	r21, 0x00	; 0
   187cc:	66 e1       	ldi	r22, 0x16	; 22
   187ce:	70 e0       	ldi	r23, 0x00	; 0
   187d0:	ce 01       	movw	r24, r28
   187d2:	9e dc       	rcall	.-1732   	; 0x18110 <V2B_MSB>
   187d4:	f7 01       	movw	r30, r14
   187d6:	fd 96       	adiw	r30, 0x3d	; 61
   187d8:	00 81       	ld	r16, Z
   187da:	11 81       	ldd	r17, Z+1	; 0x01
   187dc:	22 81       	ldd	r18, Z+2	; 0x02
   187de:	33 81       	ldd	r19, Z+3	; 0x03
   187e0:	44 e0       	ldi	r20, 0x04	; 4
   187e2:	50 e0       	ldi	r21, 0x00	; 0
   187e4:	68 e1       	ldi	r22, 0x18	; 24
   187e6:	70 e0       	ldi	r23, 0x00	; 0
   187e8:	ce 01       	movw	r24, r28
   187ea:	92 dc       	rcall	.-1756   	; 0x18110 <V2B_MSB>
   187ec:	f7 01       	movw	r30, r14
   187ee:	ef 5b       	subi	r30, 0xBF	; 191
   187f0:	ff 4f       	sbci	r31, 0xFF	; 255
   187f2:	00 81       	ld	r16, Z
   187f4:	11 81       	ldd	r17, Z+1	; 0x01
   187f6:	22 81       	ldd	r18, Z+2	; 0x02
   187f8:	33 81       	ldd	r19, Z+3	; 0x03
   187fa:	44 e0       	ldi	r20, 0x04	; 4
   187fc:	50 e0       	ldi	r21, 0x00	; 0
   187fe:	6c e1       	ldi	r22, 0x1C	; 28
   18800:	70 e0       	ldi	r23, 0x00	; 0
   18802:	ce 01       	movw	r24, r28
   18804:	85 dc       	rcall	.-1782   	; 0x18110 <V2B_MSB>
   18806:	f7 01       	movw	r30, r14
   18808:	eb 5b       	subi	r30, 0xBB	; 187
   1880a:	ff 4f       	sbci	r31, 0xFF	; 255
   1880c:	00 81       	ld	r16, Z
   1880e:	11 81       	ldd	r17, Z+1	; 0x01
   18810:	22 81       	ldd	r18, Z+2	; 0x02
   18812:	33 81       	ldd	r19, Z+3	; 0x03
   18814:	44 e0       	ldi	r20, 0x04	; 4
   18816:	50 e0       	ldi	r21, 0x00	; 0
   18818:	60 e2       	ldi	r22, 0x20	; 32
   1881a:	70 e0       	ldi	r23, 0x00	; 0
   1881c:	ce 01       	movw	r24, r28
   1881e:	78 dc       	rcall	.-1808   	; 0x18110 <V2B_MSB>
   18820:	de 01       	movw	r26, r28
   18822:	94 96       	adiw	r26, 0x24	; 36
   18824:	f7 01       	movw	r30, r14
   18826:	e7 5b       	subi	r30, 0xB7	; 183
   18828:	ff 4f       	sbci	r31, 0xFF	; 255
   1882a:	86 e0       	ldi	r24, 0x06	; 6
   1882c:	01 90       	ld	r0, Z+
   1882e:	0d 92       	st	X+, r0
   18830:	8a 95       	dec	r24
   18832:	e1 f7       	brne	.-8      	; 0x1882c <lif_vol2str+0x10a>
   18834:	cd b7       	in	r28, 0x3d	; 61
   18836:	de b7       	in	r29, 0x3e	; 62
   18838:	e6 e0       	ldi	r30, 0x06	; 6
   1883a:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

0001883e <lif_str2vol>:
   1883e:	0f 93       	push	r16
   18840:	1f 93       	push	r17
   18842:	cf 93       	push	r28
   18844:	df 93       	push	r29
   18846:	8c 01       	movw	r16, r24
   18848:	eb 01       	movw	r28, r22
   1884a:	42 e0       	ldi	r20, 0x02	; 2
   1884c:	50 e0       	ldi	r21, 0x00	; 0
   1884e:	60 e0       	ldi	r22, 0x00	; 0
   18850:	70 e0       	ldi	r23, 0x00	; 0
   18852:	87 dc       	rcall	.-1778   	; 0x18162 <B2V_MSB>
   18854:	7d a3       	std	Y+37, r23	; 0x25
   18856:	6c a3       	std	Y+36, r22	; 0x24
   18858:	be 01       	movw	r22, r28
   1885a:	6a 5d       	subi	r22, 0xDA	; 218
   1885c:	7f 4f       	sbci	r23, 0xFF	; 255
   1885e:	46 e0       	ldi	r20, 0x06	; 6
   18860:	50 e0       	ldi	r21, 0x00	; 0
   18862:	c8 01       	movw	r24, r16
   18864:	02 96       	adiw	r24, 0x02	; 2
   18866:	ac de       	rcall	.-680    	; 0x185c0 <lif_B2S>
   18868:	44 e0       	ldi	r20, 0x04	; 4
   1886a:	50 e0       	ldi	r21, 0x00	; 0
   1886c:	68 e0       	ldi	r22, 0x08	; 8
   1886e:	70 e0       	ldi	r23, 0x00	; 0
   18870:	c8 01       	movw	r24, r16
   18872:	77 dc       	rcall	.-1810   	; 0x18162 <B2V_MSB>
   18874:	6d a7       	std	Y+45, r22	; 0x2d
   18876:	7e a7       	std	Y+46, r23	; 0x2e
   18878:	8f a7       	std	Y+47, r24	; 0x2f
   1887a:	98 ab       	std	Y+48, r25	; 0x30
   1887c:	42 e0       	ldi	r20, 0x02	; 2
   1887e:	50 e0       	ldi	r21, 0x00	; 0
   18880:	6c e0       	ldi	r22, 0x0C	; 12
   18882:	70 e0       	ldi	r23, 0x00	; 0
   18884:	c8 01       	movw	r24, r16
   18886:	6d dc       	rcall	.-1830   	; 0x18162 <B2V_MSB>
   18888:	7a ab       	std	Y+50, r23	; 0x32
   1888a:	69 ab       	std	Y+49, r22	; 0x31
   1888c:	42 e0       	ldi	r20, 0x02	; 2
   1888e:	50 e0       	ldi	r21, 0x00	; 0
   18890:	6e e0       	ldi	r22, 0x0E	; 14
   18892:	70 e0       	ldi	r23, 0x00	; 0
   18894:	c8 01       	movw	r24, r16
   18896:	65 dc       	rcall	.-1846   	; 0x18162 <B2V_MSB>
   18898:	7c ab       	std	Y+52, r23	; 0x34
   1889a:	6b ab       	std	Y+51, r22	; 0x33
   1889c:	44 e0       	ldi	r20, 0x04	; 4
   1889e:	50 e0       	ldi	r21, 0x00	; 0
   188a0:	60 e1       	ldi	r22, 0x10	; 16
   188a2:	70 e0       	ldi	r23, 0x00	; 0
   188a4:	c8 01       	movw	r24, r16
   188a6:	5d dc       	rcall	.-1862   	; 0x18162 <B2V_MSB>
   188a8:	6d ab       	std	Y+53, r22	; 0x35
   188aa:	7e ab       	std	Y+54, r23	; 0x36
   188ac:	8f ab       	std	Y+55, r24	; 0x37
   188ae:	98 af       	std	Y+56, r25	; 0x38
   188b0:	42 e0       	ldi	r20, 0x02	; 2
   188b2:	50 e0       	ldi	r21, 0x00	; 0
   188b4:	64 e1       	ldi	r22, 0x14	; 20
   188b6:	70 e0       	ldi	r23, 0x00	; 0
   188b8:	c8 01       	movw	r24, r16
   188ba:	53 dc       	rcall	.-1882   	; 0x18162 <B2V_MSB>
   188bc:	7a af       	std	Y+58, r23	; 0x3a
   188be:	69 af       	std	Y+57, r22	; 0x39
   188c0:	42 e0       	ldi	r20, 0x02	; 2
   188c2:	50 e0       	ldi	r21, 0x00	; 0
   188c4:	66 e1       	ldi	r22, 0x16	; 22
   188c6:	70 e0       	ldi	r23, 0x00	; 0
   188c8:	c8 01       	movw	r24, r16
   188ca:	4b dc       	rcall	.-1898   	; 0x18162 <B2V_MSB>
   188cc:	7c af       	std	Y+60, r23	; 0x3c
   188ce:	6b af       	std	Y+59, r22	; 0x3b
   188d0:	44 e0       	ldi	r20, 0x04	; 4
   188d2:	50 e0       	ldi	r21, 0x00	; 0
   188d4:	68 e1       	ldi	r22, 0x18	; 24
   188d6:	70 e0       	ldi	r23, 0x00	; 0
   188d8:	c8 01       	movw	r24, r16
   188da:	43 dc       	rcall	.-1914   	; 0x18162 <B2V_MSB>
   188dc:	fe 01       	movw	r30, r28
   188de:	fd 96       	adiw	r30, 0x3d	; 61
   188e0:	60 83       	st	Z, r22
   188e2:	71 83       	std	Z+1, r23	; 0x01
   188e4:	82 83       	std	Z+2, r24	; 0x02
   188e6:	93 83       	std	Z+3, r25	; 0x03
   188e8:	44 e0       	ldi	r20, 0x04	; 4
   188ea:	50 e0       	ldi	r21, 0x00	; 0
   188ec:	6c e1       	ldi	r22, 0x1C	; 28
   188ee:	70 e0       	ldi	r23, 0x00	; 0
   188f0:	c8 01       	movw	r24, r16
   188f2:	37 dc       	rcall	.-1938   	; 0x18162 <B2V_MSB>
   188f4:	fe 01       	movw	r30, r28
   188f6:	ef 5b       	subi	r30, 0xBF	; 191
   188f8:	ff 4f       	sbci	r31, 0xFF	; 255
   188fa:	60 83       	st	Z, r22
   188fc:	71 83       	std	Z+1, r23	; 0x01
   188fe:	82 83       	std	Z+2, r24	; 0x02
   18900:	93 83       	std	Z+3, r25	; 0x03
   18902:	44 e0       	ldi	r20, 0x04	; 4
   18904:	50 e0       	ldi	r21, 0x00	; 0
   18906:	60 e2       	ldi	r22, 0x20	; 32
   18908:	70 e0       	ldi	r23, 0x00	; 0
   1890a:	c8 01       	movw	r24, r16
   1890c:	2a dc       	rcall	.-1964   	; 0x18162 <B2V_MSB>
   1890e:	fe 01       	movw	r30, r28
   18910:	eb 5b       	subi	r30, 0xBB	; 187
   18912:	ff 4f       	sbci	r31, 0xFF	; 255
   18914:	60 83       	st	Z, r22
   18916:	71 83       	std	Z+1, r23	; 0x01
   18918:	82 83       	std	Z+2, r24	; 0x02
   1891a:	93 83       	std	Z+3, r25	; 0x03
   1891c:	de 01       	movw	r26, r28
   1891e:	a7 5b       	subi	r26, 0xB7	; 183
   18920:	bf 4f       	sbci	r27, 0xFF	; 255
   18922:	f8 01       	movw	r30, r16
   18924:	b4 96       	adiw	r30, 0x24	; 36
   18926:	86 e0       	ldi	r24, 0x06	; 6
   18928:	01 90       	ld	r0, Z+
   1892a:	0d 92       	st	X+, r0
   1892c:	8a 95       	dec	r24
   1892e:	e1 f7       	brne	.-8      	; 0x18928 <lif_str2vol+0xea>
   18930:	df 91       	pop	r29
   18932:	cf 91       	pop	r28
   18934:	1f 91       	pop	r17
   18936:	0f 91       	pop	r16
   18938:	08 95       	ret

0001893a <lif_dir2str>:
   1893a:	ef 92       	push	r14
   1893c:	ff 92       	push	r15
   1893e:	0f 93       	push	r16
   18940:	1f 93       	push	r17
   18942:	cf 93       	push	r28
   18944:	df 93       	push	r29
   18946:	ec 01       	movw	r28, r24
   18948:	7b 01       	movw	r14, r22
   1894a:	bc 01       	movw	r22, r24
   1894c:	61 5b       	subi	r22, 0xB1	; 177
   1894e:	7f 4f       	sbci	r23, 0xFF	; 255
   18950:	4a e0       	ldi	r20, 0x0A	; 10
   18952:	50 e0       	ldi	r21, 0x00	; 0
   18954:	c7 01       	movw	r24, r14
   18956:	8b de       	rcall	.-746    	; 0x1866e <lif_S2B>
   18958:	fe 01       	movw	r30, r28
   1895a:	e6 5a       	subi	r30, 0xA6	; 166
   1895c:	ff 4f       	sbci	r31, 0xFF	; 255
   1895e:	00 81       	ld	r16, Z
   18960:	11 81       	ldd	r17, Z+1	; 0x01
   18962:	20 e0       	ldi	r18, 0x00	; 0
   18964:	30 e0       	ldi	r19, 0x00	; 0
   18966:	42 e0       	ldi	r20, 0x02	; 2
   18968:	50 e0       	ldi	r21, 0x00	; 0
   1896a:	6a e0       	ldi	r22, 0x0A	; 10
   1896c:	70 e0       	ldi	r23, 0x00	; 0
   1896e:	c7 01       	movw	r24, r14
   18970:	cf db       	rcall	.-2146   	; 0x18110 <V2B_MSB>
   18972:	fe 01       	movw	r30, r28
   18974:	e4 5a       	subi	r30, 0xA4	; 164
   18976:	ff 4f       	sbci	r31, 0xFF	; 255
   18978:	00 81       	ld	r16, Z
   1897a:	11 81       	ldd	r17, Z+1	; 0x01
   1897c:	22 81       	ldd	r18, Z+2	; 0x02
   1897e:	33 81       	ldd	r19, Z+3	; 0x03
   18980:	44 e0       	ldi	r20, 0x04	; 4
   18982:	50 e0       	ldi	r21, 0x00	; 0
   18984:	6c e0       	ldi	r22, 0x0C	; 12
   18986:	70 e0       	ldi	r23, 0x00	; 0
   18988:	c7 01       	movw	r24, r14
   1898a:	c2 db       	rcall	.-2172   	; 0x18110 <V2B_MSB>
   1898c:	fe 01       	movw	r30, r28
   1898e:	e0 5a       	subi	r30, 0xA0	; 160
   18990:	ff 4f       	sbci	r31, 0xFF	; 255
   18992:	00 81       	ld	r16, Z
   18994:	11 81       	ldd	r17, Z+1	; 0x01
   18996:	22 81       	ldd	r18, Z+2	; 0x02
   18998:	33 81       	ldd	r19, Z+3	; 0x03
   1899a:	44 e0       	ldi	r20, 0x04	; 4
   1899c:	50 e0       	ldi	r21, 0x00	; 0
   1899e:	60 e1       	ldi	r22, 0x10	; 16
   189a0:	70 e0       	ldi	r23, 0x00	; 0
   189a2:	c7 01       	movw	r24, r14
   189a4:	b5 db       	rcall	.-2198   	; 0x18110 <V2B_MSB>
   189a6:	d7 01       	movw	r26, r14
   189a8:	54 96       	adiw	r26, 0x14	; 20
   189aa:	fe 01       	movw	r30, r28
   189ac:	ec 59       	subi	r30, 0x9C	; 156
   189ae:	ff 4f       	sbci	r31, 0xFF	; 255
   189b0:	86 e0       	ldi	r24, 0x06	; 6
   189b2:	01 90       	ld	r0, Z+
   189b4:	0d 92       	st	X+, r0
   189b6:	8a 95       	dec	r24
   189b8:	e1 f7       	brne	.-8      	; 0x189b2 <lif_dir2str+0x78>
   189ba:	fe 01       	movw	r30, r28
   189bc:	e6 59       	subi	r30, 0x96	; 150
   189be:	ff 4f       	sbci	r31, 0xFF	; 255
   189c0:	00 81       	ld	r16, Z
   189c2:	11 81       	ldd	r17, Z+1	; 0x01
   189c4:	20 e0       	ldi	r18, 0x00	; 0
   189c6:	30 e0       	ldi	r19, 0x00	; 0
   189c8:	42 e0       	ldi	r20, 0x02	; 2
   189ca:	50 e0       	ldi	r21, 0x00	; 0
   189cc:	6a e1       	ldi	r22, 0x1A	; 26
   189ce:	70 e0       	ldi	r23, 0x00	; 0
   189d0:	c7 01       	movw	r24, r14
   189d2:	9e db       	rcall	.-2244   	; 0x18110 <V2B_MSB>
   189d4:	fe 01       	movw	r30, r28
   189d6:	e4 59       	subi	r30, 0x94	; 148
   189d8:	ff 4f       	sbci	r31, 0xFF	; 255
   189da:	00 81       	ld	r16, Z
   189dc:	11 81       	ldd	r17, Z+1	; 0x01
   189de:	20 e0       	ldi	r18, 0x00	; 0
   189e0:	30 e0       	ldi	r19, 0x00	; 0
   189e2:	42 e0       	ldi	r20, 0x02	; 2
   189e4:	50 e0       	ldi	r21, 0x00	; 0
   189e6:	6c e1       	ldi	r22, 0x1C	; 28
   189e8:	70 e0       	ldi	r23, 0x00	; 0
   189ea:	c7 01       	movw	r24, r14
   189ec:	a5 db       	rcall	.-2230   	; 0x18138 <V2B_LSB>
   189ee:	c2 59       	subi	r28, 0x92	; 146
   189f0:	df 4f       	sbci	r29, 0xFF	; 255
   189f2:	08 81       	ld	r16, Y
   189f4:	19 81       	ldd	r17, Y+1	; 0x01
   189f6:	20 e0       	ldi	r18, 0x00	; 0
   189f8:	30 e0       	ldi	r19, 0x00	; 0
   189fa:	42 e0       	ldi	r20, 0x02	; 2
   189fc:	50 e0       	ldi	r21, 0x00	; 0
   189fe:	6e e1       	ldi	r22, 0x1E	; 30
   18a00:	70 e0       	ldi	r23, 0x00	; 0
   18a02:	c7 01       	movw	r24, r14
   18a04:	99 db       	rcall	.-2254   	; 0x18138 <V2B_LSB>
   18a06:	cd b7       	in	r28, 0x3d	; 61
   18a08:	de b7       	in	r29, 0x3e	; 62
   18a0a:	e6 e0       	ldi	r30, 0x06	; 6
   18a0c:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

00018a10 <lif_str2dir>:
   18a10:	0f 93       	push	r16
   18a12:	1f 93       	push	r17
   18a14:	cf 93       	push	r28
   18a16:	df 93       	push	r29
   18a18:	8c 01       	movw	r16, r24
   18a1a:	eb 01       	movw	r28, r22
   18a1c:	61 5b       	subi	r22, 0xB1	; 177
   18a1e:	7f 4f       	sbci	r23, 0xFF	; 255
   18a20:	4a e0       	ldi	r20, 0x0A	; 10
   18a22:	50 e0       	ldi	r21, 0x00	; 0
   18a24:	cd dd       	rcall	.-1126   	; 0x185c0 <lif_B2S>
   18a26:	42 e0       	ldi	r20, 0x02	; 2
   18a28:	50 e0       	ldi	r21, 0x00	; 0
   18a2a:	6a e0       	ldi	r22, 0x0A	; 10
   18a2c:	70 e0       	ldi	r23, 0x00	; 0
   18a2e:	c8 01       	movw	r24, r16
   18a30:	98 db       	rcall	.-2256   	; 0x18162 <B2V_MSB>
   18a32:	fe 01       	movw	r30, r28
   18a34:	e6 5a       	subi	r30, 0xA6	; 166
   18a36:	ff 4f       	sbci	r31, 0xFF	; 255
   18a38:	71 83       	std	Z+1, r23	; 0x01
   18a3a:	60 83       	st	Z, r22
   18a3c:	44 e0       	ldi	r20, 0x04	; 4
   18a3e:	50 e0       	ldi	r21, 0x00	; 0
   18a40:	6c e0       	ldi	r22, 0x0C	; 12
   18a42:	70 e0       	ldi	r23, 0x00	; 0
   18a44:	c8 01       	movw	r24, r16
   18a46:	8d db       	rcall	.-2278   	; 0x18162 <B2V_MSB>
   18a48:	fe 01       	movw	r30, r28
   18a4a:	e4 5a       	subi	r30, 0xA4	; 164
   18a4c:	ff 4f       	sbci	r31, 0xFF	; 255
   18a4e:	60 83       	st	Z, r22
   18a50:	71 83       	std	Z+1, r23	; 0x01
   18a52:	82 83       	std	Z+2, r24	; 0x02
   18a54:	93 83       	std	Z+3, r25	; 0x03
   18a56:	44 e0       	ldi	r20, 0x04	; 4
   18a58:	50 e0       	ldi	r21, 0x00	; 0
   18a5a:	60 e1       	ldi	r22, 0x10	; 16
   18a5c:	70 e0       	ldi	r23, 0x00	; 0
   18a5e:	c8 01       	movw	r24, r16
   18a60:	80 db       	rcall	.-2304   	; 0x18162 <B2V_MSB>
   18a62:	fe 01       	movw	r30, r28
   18a64:	e0 5a       	subi	r30, 0xA0	; 160
   18a66:	ff 4f       	sbci	r31, 0xFF	; 255
   18a68:	60 83       	st	Z, r22
   18a6a:	71 83       	std	Z+1, r23	; 0x01
   18a6c:	82 83       	std	Z+2, r24	; 0x02
   18a6e:	93 83       	std	Z+3, r25	; 0x03
   18a70:	de 01       	movw	r26, r28
   18a72:	ac 59       	subi	r26, 0x9C	; 156
   18a74:	bf 4f       	sbci	r27, 0xFF	; 255
   18a76:	f8 01       	movw	r30, r16
   18a78:	74 96       	adiw	r30, 0x14	; 20
   18a7a:	86 e0       	ldi	r24, 0x06	; 6
   18a7c:	01 90       	ld	r0, Z+
   18a7e:	0d 92       	st	X+, r0
   18a80:	8a 95       	dec	r24
   18a82:	e1 f7       	brne	.-8      	; 0x18a7c <lif_str2dir+0x6c>
   18a84:	42 e0       	ldi	r20, 0x02	; 2
   18a86:	50 e0       	ldi	r21, 0x00	; 0
   18a88:	6a e1       	ldi	r22, 0x1A	; 26
   18a8a:	70 e0       	ldi	r23, 0x00	; 0
   18a8c:	c8 01       	movw	r24, r16
   18a8e:	69 db       	rcall	.-2350   	; 0x18162 <B2V_MSB>
   18a90:	fe 01       	movw	r30, r28
   18a92:	e6 59       	subi	r30, 0x96	; 150
   18a94:	ff 4f       	sbci	r31, 0xFF	; 255
   18a96:	71 83       	std	Z+1, r23	; 0x01
   18a98:	60 83       	st	Z, r22
   18a9a:	42 e0       	ldi	r20, 0x02	; 2
   18a9c:	50 e0       	ldi	r21, 0x00	; 0
   18a9e:	6c e1       	ldi	r22, 0x1C	; 28
   18aa0:	70 e0       	ldi	r23, 0x00	; 0
   18aa2:	c8 01       	movw	r24, r16
   18aa4:	7d db       	rcall	.-2310   	; 0x181a0 <B2V_LSB>
   18aa6:	fe 01       	movw	r30, r28
   18aa8:	e4 59       	subi	r30, 0x94	; 148
   18aaa:	ff 4f       	sbci	r31, 0xFF	; 255
   18aac:	71 83       	std	Z+1, r23	; 0x01
   18aae:	60 83       	st	Z, r22
   18ab0:	42 e0       	ldi	r20, 0x02	; 2
   18ab2:	50 e0       	ldi	r21, 0x00	; 0
   18ab4:	6e e1       	ldi	r22, 0x1E	; 30
   18ab6:	70 e0       	ldi	r23, 0x00	; 0
   18ab8:	c8 01       	movw	r24, r16
   18aba:	72 db       	rcall	.-2332   	; 0x181a0 <B2V_LSB>
   18abc:	c2 59       	subi	r28, 0x92	; 146
   18abe:	df 4f       	sbci	r29, 0xFF	; 255
   18ac0:	79 83       	std	Y+1, r23	; 0x01
   18ac2:	68 83       	st	Y, r22
   18ac4:	df 91       	pop	r29
   18ac6:	cf 91       	pop	r28
   18ac8:	1f 91       	pop	r17
   18aca:	0f 91       	pop	r16
   18acc:	08 95       	ret

00018ace <lif_BIN2BCD>:
   18ace:	6a e0       	ldi	r22, 0x0A	; 10
   18ad0:	0e 94 76 e6 	call	0x1ccec	; 0x1ccec <__udivmodqi4>
   18ad4:	82 95       	swap	r24
   18ad6:	80 7f       	andi	r24, 0xF0	; 240
   18ad8:	89 2b       	or	r24, r25
   18ada:	08 95       	ret

00018adc <lif_BCD2BIN>:
   18adc:	28 2f       	mov	r18, r24
   18ade:	22 95       	swap	r18
   18ae0:	2f 70       	andi	r18, 0x0F	; 15
   18ae2:	8f 70       	andi	r24, 0x0F	; 15
   18ae4:	90 e0       	ldi	r25, 0x00	; 0
   18ae6:	3a e0       	ldi	r19, 0x0A	; 10
   18ae8:	23 9f       	mul	r18, r19
   18aea:	80 0d       	add	r24, r0
   18aec:	91 1d       	adc	r25, r1
   18aee:	11 24       	eor	r1, r1
   18af0:	08 95       	ret

00018af2 <lif_time2lifbcd>:
   18af2:	aa e1       	ldi	r26, 0x1A	; 26
   18af4:	b0 e0       	ldi	r27, 0x00	; 0
   18af6:	ef e7       	ldi	r30, 0x7F	; 127
   18af8:	f5 ec       	ldi	r31, 0xC5	; 197
   18afa:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
   18afe:	8b 01       	movw	r16, r22
   18b00:	9c 01       	movw	r18, r24
   18b02:	6f 8b       	std	Y+23, r22	; 0x17
   18b04:	78 8f       	std	Y+24, r23	; 0x18
   18b06:	89 8f       	std	Y+25, r24	; 0x19
   18b08:	9a 8f       	std	Y+26, r25	; 0x1a
   18b0a:	67 2b       	or	r22, r23
   18b0c:	68 2b       	or	r22, r24
   18b0e:	69 2b       	or	r22, r25
   18b10:	41 f4       	brne	.+16     	; 0x18b22 <lif_time2lifbcd+0x30>
   18b12:	fa 01       	movw	r30, r20
   18b14:	ca 01       	movw	r24, r20
   18b16:	06 96       	adiw	r24, 0x06	; 6
   18b18:	11 92       	st	Z+, r1
   18b1a:	e8 17       	cp	r30, r24
   18b1c:	f9 07       	cpc	r31, r25
   18b1e:	e1 f7       	brne	.-8      	; 0x18b18 <lif_time2lifbcd+0x26>
   18b20:	26 c0       	rjmp	.+76     	; 0x18b6e <lif_time2lifbcd+0x7c>
   18b22:	8a 01       	movw	r16, r20
   18b24:	be 01       	movw	r22, r28
   18b26:	6f 5f       	subi	r22, 0xFF	; 255
   18b28:	7f 4f       	sbci	r23, 0xFF	; 255
   18b2a:	ce 01       	movw	r24, r28
   18b2c:	47 96       	adiw	r24, 0x17	; 23
   18b2e:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <gmtime_r>
   18b32:	8b 85       	ldd	r24, Y+11	; 0x0b
   18b34:	9c 85       	ldd	r25, Y+12	; 0x0c
   18b36:	64 e6       	ldi	r22, 0x64	; 100
   18b38:	70 e0       	ldi	r23, 0x00	; 0
   18b3a:	0e 94 96 e6 	call	0x1cd2c	; 0x1cd2c <__divmodhi4>
   18b3e:	c7 df       	rcall	.-114    	; 0x18ace <lif_BIN2BCD>
   18b40:	f8 01       	movw	r30, r16
   18b42:	80 83       	st	Z, r24
   18b44:	89 85       	ldd	r24, Y+9	; 0x09
   18b46:	8f 5f       	subi	r24, 0xFF	; 255
   18b48:	c2 df       	rcall	.-124    	; 0x18ace <lif_BIN2BCD>
   18b4a:	f8 01       	movw	r30, r16
   18b4c:	81 83       	std	Z+1, r24	; 0x01
   18b4e:	8f 81       	ldd	r24, Y+7	; 0x07
   18b50:	be df       	rcall	.-132    	; 0x18ace <lif_BIN2BCD>
   18b52:	f8 01       	movw	r30, r16
   18b54:	82 83       	std	Z+2, r24	; 0x02
   18b56:	8d 81       	ldd	r24, Y+5	; 0x05
   18b58:	ba df       	rcall	.-140    	; 0x18ace <lif_BIN2BCD>
   18b5a:	f8 01       	movw	r30, r16
   18b5c:	83 83       	std	Z+3, r24	; 0x03
   18b5e:	8b 81       	ldd	r24, Y+3	; 0x03
   18b60:	b6 df       	rcall	.-148    	; 0x18ace <lif_BIN2BCD>
   18b62:	f8 01       	movw	r30, r16
   18b64:	84 83       	std	Z+4, r24	; 0x04
   18b66:	89 81       	ldd	r24, Y+1	; 0x01
   18b68:	b2 df       	rcall	.-156    	; 0x18ace <lif_BIN2BCD>
   18b6a:	f8 01       	movw	r30, r16
   18b6c:	85 83       	std	Z+5, r24	; 0x05
   18b6e:	6a 96       	adiw	r28, 0x1a	; 26
   18b70:	e4 e0       	ldi	r30, 0x04	; 4
   18b72:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00018b76 <lif_lifbcd2time>:
   18b76:	a6 e1       	ldi	r26, 0x16	; 22
   18b78:	b0 e0       	ldi	r27, 0x00	; 0
   18b7a:	e1 ec       	ldi	r30, 0xC1	; 193
   18b7c:	f5 ec       	ldi	r31, 0xC5	; 197
   18b7e:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
   18b82:	8c 01       	movw	r16, r24
   18b84:	7c 01       	movw	r14, r24
   18b86:	5c 01       	movw	r10, r24
   18b88:	26 e0       	ldi	r18, 0x06	; 6
   18b8a:	a2 0e       	add	r10, r18
   18b8c:	b1 1c       	adc	r11, r1
   18b8e:	cc 24       	eor	r12, r12
   18b90:	c3 94       	inc	r12
   18b92:	d1 2c       	mov	r13, r1
   18b94:	f7 01       	movw	r30, r14
   18b96:	81 91       	ld	r24, Z+
   18b98:	7f 01       	movw	r14, r30
   18b9a:	a0 df       	rcall	.-192    	; 0x18adc <lif_BCD2BIN>
   18b9c:	89 2b       	or	r24, r25
   18b9e:	11 f0       	breq	.+4      	; 0x18ba4 <lif_lifbcd2time+0x2e>
   18ba0:	c1 2c       	mov	r12, r1
   18ba2:	d1 2c       	mov	r13, r1
   18ba4:	ea 14       	cp	r14, r10
   18ba6:	fb 04       	cpc	r15, r11
   18ba8:	a9 f7       	brne	.-22     	; 0x18b94 <lif_lifbcd2time+0x1e>
   18baa:	c1 14       	cp	r12, r1
   18bac:	d1 04       	cpc	r13, r1
   18bae:	61 f5       	brne	.+88     	; 0x18c08 <lif_lifbcd2time+0x92>
   18bb0:	f8 01       	movw	r30, r16
   18bb2:	80 81       	ld	r24, Z
   18bb4:	93 df       	rcall	.-218    	; 0x18adc <lif_BCD2BIN>
   18bb6:	7c 01       	movw	r14, r24
   18bb8:	f8 01       	movw	r30, r16
   18bba:	81 81       	ldd	r24, Z+1	; 0x01
   18bbc:	8f df       	rcall	.-226    	; 0x18adc <lif_BCD2BIN>
   18bbe:	01 97       	sbiw	r24, 0x01	; 1
   18bc0:	f6 e4       	ldi	r31, 0x46	; 70
   18bc2:	ef 16       	cp	r14, r31
   18bc4:	f1 04       	cpc	r15, r1
   18bc6:	1c f4       	brge	.+6      	; 0x18bce <lif_lifbcd2time+0x58>
   18bc8:	24 e6       	ldi	r18, 0x64	; 100
   18bca:	e2 0e       	add	r14, r18
   18bcc:	f1 1c       	adc	r15, r1
   18bce:	fc 86       	std	Y+12, r15	; 0x0c
   18bd0:	eb 86       	std	Y+11, r14	; 0x0b
   18bd2:	9a 87       	std	Y+10, r25	; 0x0a
   18bd4:	89 87       	std	Y+9, r24	; 0x09
   18bd6:	f8 01       	movw	r30, r16
   18bd8:	82 81       	ldd	r24, Z+2	; 0x02
   18bda:	80 df       	rcall	.-256    	; 0x18adc <lif_BCD2BIN>
   18bdc:	98 87       	std	Y+8, r25	; 0x08
   18bde:	8f 83       	std	Y+7, r24	; 0x07
   18be0:	f8 01       	movw	r30, r16
   18be2:	83 81       	ldd	r24, Z+3	; 0x03
   18be4:	7b df       	rcall	.-266    	; 0x18adc <lif_BCD2BIN>
   18be6:	9e 83       	std	Y+6, r25	; 0x06
   18be8:	8d 83       	std	Y+5, r24	; 0x05
   18bea:	f8 01       	movw	r30, r16
   18bec:	84 81       	ldd	r24, Z+4	; 0x04
   18bee:	76 df       	rcall	.-276    	; 0x18adc <lif_BCD2BIN>
   18bf0:	9c 83       	std	Y+4, r25	; 0x04
   18bf2:	8b 83       	std	Y+3, r24	; 0x03
   18bf4:	f8 01       	movw	r30, r16
   18bf6:	85 81       	ldd	r24, Z+5	; 0x05
   18bf8:	71 df       	rcall	.-286    	; 0x18adc <lif_BCD2BIN>
   18bfa:	9a 83       	std	Y+2, r25	; 0x02
   18bfc:	89 83       	std	Y+1, r24	; 0x01
   18bfe:	ce 01       	movw	r24, r28
   18c00:	01 96       	adiw	r24, 0x01	; 1
   18c02:	0e 94 99 3a 	call	0x7532	; 0x7532 <timegm>
   18c06:	03 c0       	rjmp	.+6      	; 0x18c0e <lif_lifbcd2time+0x98>
   18c08:	60 e0       	ldi	r22, 0x00	; 0
   18c0a:	70 e0       	ldi	r23, 0x00	; 0
   18c0c:	cb 01       	movw	r24, r22
   18c0e:	66 96       	adiw	r28, 0x16	; 22
   18c10:	ea e0       	ldi	r30, 0x0A	; 10
   18c12:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

00018c16 <lif_ctime_gmt>:
   18c16:	a6 e1       	ldi	r26, 0x16	; 22
   18c18:	b0 e0       	ldi	r27, 0x00	; 0
   18c1a:	e1 e1       	ldi	r30, 0x11	; 17
   18c1c:	f6 ec       	ldi	r31, 0xC6	; 198
   18c1e:	0c 94 24 e7 	jmp	0x1ce48	; 0x1ce48 <__prologue_saves__+0x1c>
   18c22:	20 e2       	ldi	r18, 0x20	; 32
   18c24:	ea ec       	ldi	r30, 0xCA	; 202
   18c26:	f9 e1       	ldi	r31, 0x19	; 25
   18c28:	df 01       	movw	r26, r30
   18c2a:	1d 92       	st	X+, r1
   18c2c:	2a 95       	dec	r18
   18c2e:	e9 f7       	brne	.-6      	; 0x18c2a <lif_ctime_gmt+0x14>
   18c30:	be 01       	movw	r22, r28
   18c32:	6f 5f       	subi	r22, 0xFF	; 255
   18c34:	7f 4f       	sbci	r23, 0xFF	; 255
   18c36:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <gmtime_r>
   18c3a:	6a ec       	ldi	r22, 0xCA	; 202
   18c3c:	79 e1       	ldi	r23, 0x19	; 25
   18c3e:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <asctime_r>
   18c42:	8c 01       	movw	r16, r24
   18c44:	0e 94 51 32 	call	0x64a2	; 0x64a2 <trim_tail>
   18c48:	c8 01       	movw	r24, r16
   18c4a:	66 96       	adiw	r28, 0x16	; 22
   18c4c:	e4 e0       	ldi	r30, 0x04	; 4
   18c4e:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

00018c52 <lif_lifbcd2timestr>:
   18c52:	a4 e0       	ldi	r26, 0x04	; 4
   18c54:	b0 e0       	ldi	r27, 0x00	; 0
   18c56:	ef e2       	ldi	r30, 0x2F	; 47
   18c58:	f6 ec       	ldi	r31, 0xC6	; 198
   18c5a:	0c 94 26 e7 	jmp	0x1ce4c	; 0x1ce4c <__prologue_saves__+0x20>
   18c5e:	20 e2       	ldi	r18, 0x20	; 32
   18c60:	ea ea       	ldi	r30, 0xAA	; 170
   18c62:	f9 e1       	ldi	r31, 0x19	; 25
   18c64:	df 01       	movw	r26, r30
   18c66:	1d 92       	st	X+, r1
   18c68:	2a 95       	dec	r18
   18c6a:	e9 f7       	brne	.-6      	; 0x18c66 <lif_lifbcd2timestr+0x14>
   18c6c:	84 df       	rcall	.-248    	; 0x18b76 <lif_lifbcd2time>
   18c6e:	69 83       	std	Y+1, r22	; 0x01
   18c70:	7a 83       	std	Y+2, r23	; 0x02
   18c72:	8b 83       	std	Y+3, r24	; 0x03
   18c74:	9c 83       	std	Y+4, r25	; 0x04
   18c76:	67 2b       	or	r22, r23
   18c78:	68 2b       	or	r22, r24
   18c7a:	69 2b       	or	r22, r25
   18c7c:	29 f0       	breq	.+10     	; 0x18c88 <lif_lifbcd2timestr+0x36>
   18c7e:	ce 01       	movw	r24, r28
   18c80:	01 96       	adiw	r24, 0x01	; 1
   18c82:	c9 df       	rcall	.-110    	; 0x18c16 <lif_ctime_gmt>
   18c84:	bc 01       	movw	r22, r24
   18c86:	02 c0       	rjmp	.+4      	; 0x18c8c <lif_lifbcd2timestr+0x3a>
   18c88:	68 ee       	ldi	r22, 0xE8	; 232
   18c8a:	75 e1       	ldi	r23, 0x15	; 21
   18c8c:	8a ea       	ldi	r24, 0xAA	; 170
   18c8e:	99 e1       	ldi	r25, 0x19	; 25
   18c90:	0e 94 73 31 	call	0x62e6	; 0x62e6 <strcpy>
   18c94:	8a ea       	ldi	r24, 0xAA	; 170
   18c96:	99 e1       	ldi	r25, 0x19	; 25
   18c98:	24 96       	adiw	r28, 0x04	; 4
   18c9a:	e2 e0       	ldi	r30, 0x02	; 2
   18c9c:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00018ca0 <lif_image_clear>:
   18ca0:	20 e7       	ldi	r18, 0x70	; 112
   18ca2:	fc 01       	movw	r30, r24
   18ca4:	11 92       	st	Z+, r1
   18ca6:	2a 95       	dec	r18
   18ca8:	e9 f7       	brne	.-6      	; 0x18ca4 <lif_image_clear+0x4>
   18caa:	08 95       	ret

00018cac <lif_dir_clear>:
   18cac:	81 5b       	subi	r24, 0xB1	; 177
   18cae:	9f 4f       	sbci	r25, 0xFF	; 255
   18cb0:	21 e2       	ldi	r18, 0x21	; 33
   18cb2:	fc 01       	movw	r30, r24
   18cb4:	11 92       	st	Z+, r1
   18cb6:	2a 95       	dec	r18
   18cb8:	e9 f7       	brne	.-6      	; 0x18cb4 <lif_dir_clear+0x8>
   18cba:	08 95       	ret

00018cbc <lif_vol_clear>:
   18cbc:	84 96       	adiw	r24, 0x24	; 36
   18cbe:	2b e2       	ldi	r18, 0x2B	; 43
   18cc0:	fc 01       	movw	r30, r24
   18cc2:	11 92       	st	Z+, r1
   18cc4:	2a 95       	dec	r18
   18cc6:	e9 f7       	brne	.-6      	; 0x18cc2 <lif_vol_clear+0x6>
   18cc8:	08 95       	ret

00018cca <lif_dump_vol>:
   18cca:	cf 93       	push	r28
   18ccc:	df 93       	push	r29
   18cce:	ad b7       	in	r26, 0x3d	; 61
   18cd0:	be b7       	in	r27, 0x3e	; 62
   18cd2:	17 97       	sbiw	r26, 0x07	; 7
   18cd4:	0f b6       	in	r0, 0x3f	; 63
   18cd6:	f8 94       	cli
   18cd8:	be bf       	out	0x3e, r27	; 62
   18cda:	0f be       	out	0x3f, r0	; 63
   18cdc:	ad bf       	out	0x3d, r26	; 61
   18cde:	ec 01       	movw	r28, r24
   18ce0:	ed b7       	in	r30, 0x3d	; 61
   18ce2:	fe b7       	in	r31, 0x3e	; 62
   18ce4:	75 83       	std	Z+5, r23	; 0x05
   18ce6:	64 83       	std	Z+4, r22	; 0x04
   18ce8:	8e ee       	ldi	r24, 0xEE	; 238
   18cea:	93 e4       	ldi	r25, 0x43	; 67
   18cec:	a0 e0       	ldi	r26, 0x00	; 0
   18cee:	81 83       	std	Z+1, r24	; 0x01
   18cf0:	92 83       	std	Z+2, r25	; 0x02
   18cf2:	a3 83       	std	Z+3, r26	; 0x03
   18cf4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18cf8:	88 81       	ld	r24, Y
   18cfa:	99 81       	ldd	r25, Y+1	; 0x01
   18cfc:	ed b7       	in	r30, 0x3d	; 61
   18cfe:	fe b7       	in	r31, 0x3e	; 62
   18d00:	95 83       	std	Z+5, r25	; 0x05
   18d02:	84 83       	std	Z+4, r24	; 0x04
   18d04:	84 ed       	ldi	r24, 0xD4	; 212
   18d06:	93 e4       	ldi	r25, 0x43	; 67
   18d08:	a0 e0       	ldi	r26, 0x00	; 0
   18d0a:	81 83       	std	Z+1, r24	; 0x01
   18d0c:	92 83       	std	Z+2, r25	; 0x02
   18d0e:	a3 83       	std	Z+3, r26	; 0x03
   18d10:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18d14:	8c 81       	ldd	r24, Y+4	; 0x04
   18d16:	9d 81       	ldd	r25, Y+5	; 0x05
   18d18:	ae 81       	ldd	r26, Y+6	; 0x06
   18d1a:	bf 81       	ldd	r27, Y+7	; 0x07
   18d1c:	ed b7       	in	r30, 0x3d	; 61
   18d1e:	fe b7       	in	r31, 0x3e	; 62
   18d20:	84 83       	std	Z+4, r24	; 0x04
   18d22:	95 83       	std	Z+5, r25	; 0x05
   18d24:	a6 83       	std	Z+6, r26	; 0x06
   18d26:	b7 83       	std	Z+7, r27	; 0x07
   18d28:	87 eb       	ldi	r24, 0xB7	; 183
   18d2a:	93 e4       	ldi	r25, 0x43	; 67
   18d2c:	a0 e0       	ldi	r26, 0x00	; 0
   18d2e:	81 83       	std	Z+1, r24	; 0x01
   18d30:	92 83       	std	Z+2, r25	; 0x02
   18d32:	a3 83       	std	Z+3, r26	; 0x03
   18d34:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18d38:	88 85       	ldd	r24, Y+8	; 0x08
   18d3a:	99 85       	ldd	r25, Y+9	; 0x09
   18d3c:	aa 85       	ldd	r26, Y+10	; 0x0a
   18d3e:	bb 85       	ldd	r27, Y+11	; 0x0b
   18d40:	ed b7       	in	r30, 0x3d	; 61
   18d42:	fe b7       	in	r31, 0x3e	; 62
   18d44:	84 83       	std	Z+4, r24	; 0x04
   18d46:	95 83       	std	Z+5, r25	; 0x05
   18d48:	a6 83       	std	Z+6, r26	; 0x06
   18d4a:	b7 83       	std	Z+7, r27	; 0x07
   18d4c:	8a e9       	ldi	r24, 0x9A	; 154
   18d4e:	93 e4       	ldi	r25, 0x43	; 67
   18d50:	a0 e0       	ldi	r26, 0x00	; 0
   18d52:	81 83       	std	Z+1, r24	; 0x01
   18d54:	92 83       	std	Z+2, r25	; 0x02
   18d56:	a3 83       	std	Z+3, r26	; 0x03
   18d58:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18d5c:	8c 85       	ldd	r24, Y+12	; 0x0c
   18d5e:	9d 85       	ldd	r25, Y+13	; 0x0d
   18d60:	ae 85       	ldd	r26, Y+14	; 0x0e
   18d62:	bf 85       	ldd	r27, Y+15	; 0x0f
   18d64:	ed b7       	in	r30, 0x3d	; 61
   18d66:	fe b7       	in	r31, 0x3e	; 62
   18d68:	84 83       	std	Z+4, r24	; 0x04
   18d6a:	95 83       	std	Z+5, r25	; 0x05
   18d6c:	a6 83       	std	Z+6, r26	; 0x06
   18d6e:	b7 83       	std	Z+7, r27	; 0x07
   18d70:	8d e7       	ldi	r24, 0x7D	; 125
   18d72:	93 e4       	ldi	r25, 0x43	; 67
   18d74:	a0 e0       	ldi	r26, 0x00	; 0
   18d76:	81 83       	std	Z+1, r24	; 0x01
   18d78:	92 83       	std	Z+2, r25	; 0x02
   18d7a:	a3 83       	std	Z+3, r26	; 0x03
   18d7c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18d80:	88 89       	ldd	r24, Y+16	; 0x10
   18d82:	99 89       	ldd	r25, Y+17	; 0x11
   18d84:	aa 89       	ldd	r26, Y+18	; 0x12
   18d86:	bb 89       	ldd	r27, Y+19	; 0x13
   18d88:	ed b7       	in	r30, 0x3d	; 61
   18d8a:	fe b7       	in	r31, 0x3e	; 62
   18d8c:	84 83       	std	Z+4, r24	; 0x04
   18d8e:	95 83       	std	Z+5, r25	; 0x05
   18d90:	a6 83       	std	Z+6, r26	; 0x06
   18d92:	b7 83       	std	Z+7, r27	; 0x07
   18d94:	80 e6       	ldi	r24, 0x60	; 96
   18d96:	93 e4       	ldi	r25, 0x43	; 67
   18d98:	a0 e0       	ldi	r26, 0x00	; 0
   18d9a:	81 83       	std	Z+1, r24	; 0x01
   18d9c:	92 83       	std	Z+2, r25	; 0x02
   18d9e:	a3 83       	std	Z+3, r26	; 0x03
   18da0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18da4:	8c 89       	ldd	r24, Y+20	; 0x14
   18da6:	9d 89       	ldd	r25, Y+21	; 0x15
   18da8:	ae 89       	ldd	r26, Y+22	; 0x16
   18daa:	bf 89       	ldd	r27, Y+23	; 0x17
   18dac:	ed b7       	in	r30, 0x3d	; 61
   18dae:	fe b7       	in	r31, 0x3e	; 62
   18db0:	84 83       	std	Z+4, r24	; 0x04
   18db2:	95 83       	std	Z+5, r25	; 0x05
   18db4:	a6 83       	std	Z+6, r26	; 0x06
   18db6:	b7 83       	std	Z+7, r27	; 0x07
   18db8:	83 e4       	ldi	r24, 0x43	; 67
   18dba:	93 e4       	ldi	r25, 0x43	; 67
   18dbc:	a0 e0       	ldi	r26, 0x00	; 0
   18dbe:	81 83       	std	Z+1, r24	; 0x01
   18dc0:	92 83       	std	Z+2, r25	; 0x02
   18dc2:	a3 83       	std	Z+3, r26	; 0x03
   18dc4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18dc8:	88 8d       	ldd	r24, Y+24	; 0x18
   18dca:	99 8d       	ldd	r25, Y+25	; 0x19
   18dcc:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18dce:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18dd0:	ed b7       	in	r30, 0x3d	; 61
   18dd2:	fe b7       	in	r31, 0x3e	; 62
   18dd4:	84 83       	std	Z+4, r24	; 0x04
   18dd6:	95 83       	std	Z+5, r25	; 0x05
   18dd8:	a6 83       	std	Z+6, r26	; 0x06
   18dda:	b7 83       	std	Z+7, r27	; 0x07
   18ddc:	86 e2       	ldi	r24, 0x26	; 38
   18dde:	93 e4       	ldi	r25, 0x43	; 67
   18de0:	a0 e0       	ldi	r26, 0x00	; 0
   18de2:	81 83       	std	Z+1, r24	; 0x01
   18de4:	92 83       	std	Z+2, r25	; 0x02
   18de6:	a3 83       	std	Z+3, r26	; 0x03
   18de8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18dec:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18dee:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18df0:	09 2e       	mov	r0, r25
   18df2:	00 0c       	add	r0, r0
   18df4:	aa 0b       	sbc	r26, r26
   18df6:	bb 0b       	sbc	r27, r27
   18df8:	ed b7       	in	r30, 0x3d	; 61
   18dfa:	fe b7       	in	r31, 0x3e	; 62
   18dfc:	84 83       	std	Z+4, r24	; 0x04
   18dfe:	95 83       	std	Z+5, r25	; 0x05
   18e00:	a6 83       	std	Z+6, r26	; 0x06
   18e02:	b7 83       	std	Z+7, r27	; 0x07
   18e04:	89 e0       	ldi	r24, 0x09	; 9
   18e06:	93 e4       	ldi	r25, 0x43	; 67
   18e08:	a0 e0       	ldi	r26, 0x00	; 0
   18e0a:	81 83       	std	Z+1, r24	; 0x01
   18e0c:	92 83       	std	Z+2, r25	; 0x02
   18e0e:	a3 83       	std	Z+3, r26	; 0x03
   18e10:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18e14:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18e16:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18e18:	09 2e       	mov	r0, r25
   18e1a:	00 0c       	add	r0, r0
   18e1c:	aa 0b       	sbc	r26, r26
   18e1e:	bb 0b       	sbc	r27, r27
   18e20:	ed b7       	in	r30, 0x3d	; 61
   18e22:	fe b7       	in	r31, 0x3e	; 62
   18e24:	84 83       	std	Z+4, r24	; 0x04
   18e26:	95 83       	std	Z+5, r25	; 0x05
   18e28:	a6 83       	std	Z+6, r26	; 0x06
   18e2a:	b7 83       	std	Z+7, r27	; 0x07
   18e2c:	8c ee       	ldi	r24, 0xEC	; 236
   18e2e:	92 e4       	ldi	r25, 0x42	; 66
   18e30:	a0 e0       	ldi	r26, 0x00	; 0
   18e32:	81 83       	std	Z+1, r24	; 0x01
   18e34:	92 83       	std	Z+2, r25	; 0x02
   18e36:	a3 83       	std	Z+3, r26	; 0x03
   18e38:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18e3c:	ce 01       	movw	r24, r28
   18e3e:	86 96       	adiw	r24, 0x26	; 38
   18e40:	ed b7       	in	r30, 0x3d	; 61
   18e42:	fe b7       	in	r31, 0x3e	; 62
   18e44:	95 83       	std	Z+5, r25	; 0x05
   18e46:	84 83       	std	Z+4, r24	; 0x04
   18e48:	82 ed       	ldi	r24, 0xD2	; 210
   18e4a:	92 e4       	ldi	r25, 0x42	; 66
   18e4c:	a0 e0       	ldi	r26, 0x00	; 0
   18e4e:	81 83       	std	Z+1, r24	; 0x01
   18e50:	92 83       	std	Z+2, r25	; 0x02
   18e52:	a3 83       	std	Z+3, r26	; 0x03
   18e54:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18e58:	8c a1       	ldd	r24, Y+36	; 0x24
   18e5a:	9d a1       	ldd	r25, Y+37	; 0x25
   18e5c:	ed b7       	in	r30, 0x3d	; 61
   18e5e:	fe b7       	in	r31, 0x3e	; 62
   18e60:	95 83       	std	Z+5, r25	; 0x05
   18e62:	84 83       	std	Z+4, r24	; 0x04
   18e64:	86 eb       	ldi	r24, 0xB6	; 182
   18e66:	92 e4       	ldi	r25, 0x42	; 66
   18e68:	a0 e0       	ldi	r26, 0x00	; 0
   18e6a:	81 83       	std	Z+1, r24	; 0x01
   18e6c:	92 83       	std	Z+2, r25	; 0x02
   18e6e:	a3 83       	std	Z+3, r26	; 0x03
   18e70:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18e74:	8d a5       	ldd	r24, Y+45	; 0x2d
   18e76:	9e a5       	ldd	r25, Y+46	; 0x2e
   18e78:	af a5       	ldd	r26, Y+47	; 0x2f
   18e7a:	b8 a9       	ldd	r27, Y+48	; 0x30
   18e7c:	ed b7       	in	r30, 0x3d	; 61
   18e7e:	fe b7       	in	r31, 0x3e	; 62
   18e80:	84 83       	std	Z+4, r24	; 0x04
   18e82:	95 83       	std	Z+5, r25	; 0x05
   18e84:	a6 83       	std	Z+6, r26	; 0x06
   18e86:	b7 83       	std	Z+7, r27	; 0x07
   18e88:	89 e9       	ldi	r24, 0x99	; 153
   18e8a:	92 e4       	ldi	r25, 0x42	; 66
   18e8c:	a0 e0       	ldi	r26, 0x00	; 0
   18e8e:	81 83       	std	Z+1, r24	; 0x01
   18e90:	92 83       	std	Z+2, r25	; 0x02
   18e92:	a3 83       	std	Z+3, r26	; 0x03
   18e94:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18e98:	8d a9       	ldd	r24, Y+53	; 0x35
   18e9a:	9e a9       	ldd	r25, Y+54	; 0x36
   18e9c:	af a9       	ldd	r26, Y+55	; 0x37
   18e9e:	b8 ad       	ldd	r27, Y+56	; 0x38
   18ea0:	ed b7       	in	r30, 0x3d	; 61
   18ea2:	fe b7       	in	r31, 0x3e	; 62
   18ea4:	84 83       	std	Z+4, r24	; 0x04
   18ea6:	95 83       	std	Z+5, r25	; 0x05
   18ea8:	a6 83       	std	Z+6, r26	; 0x06
   18eaa:	b7 83       	std	Z+7, r27	; 0x07
   18eac:	8c e7       	ldi	r24, 0x7C	; 124
   18eae:	92 e4       	ldi	r25, 0x42	; 66
   18eb0:	a0 e0       	ldi	r26, 0x00	; 0
   18eb2:	81 83       	std	Z+1, r24	; 0x01
   18eb4:	92 83       	std	Z+2, r25	; 0x02
   18eb6:	a3 83       	std	Z+3, r26	; 0x03
   18eb8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18ebc:	89 a9       	ldd	r24, Y+49	; 0x31
   18ebe:	9a a9       	ldd	r25, Y+50	; 0x32
   18ec0:	ed b7       	in	r30, 0x3d	; 61
   18ec2:	fe b7       	in	r31, 0x3e	; 62
   18ec4:	95 83       	std	Z+5, r25	; 0x05
   18ec6:	84 83       	std	Z+4, r24	; 0x04
   18ec8:	80 e6       	ldi	r24, 0x60	; 96
   18eca:	92 e4       	ldi	r25, 0x42	; 66
   18ecc:	a0 e0       	ldi	r26, 0x00	; 0
   18ece:	81 83       	std	Z+1, r24	; 0x01
   18ed0:	92 83       	std	Z+2, r25	; 0x02
   18ed2:	a3 83       	std	Z+3, r26	; 0x03
   18ed4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18ed8:	89 ad       	ldd	r24, Y+57	; 0x39
   18eda:	9a ad       	ldd	r25, Y+58	; 0x3a
   18edc:	ed b7       	in	r30, 0x3d	; 61
   18ede:	fe b7       	in	r31, 0x3e	; 62
   18ee0:	95 83       	std	Z+5, r25	; 0x05
   18ee2:	84 83       	std	Z+4, r24	; 0x04
   18ee4:	84 e4       	ldi	r24, 0x44	; 68
   18ee6:	92 e4       	ldi	r25, 0x42	; 66
   18ee8:	a0 e0       	ldi	r26, 0x00	; 0
   18eea:	81 83       	std	Z+1, r24	; 0x01
   18eec:	92 83       	std	Z+2, r25	; 0x02
   18eee:	a3 83       	std	Z+3, r26	; 0x03
   18ef0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18ef4:	ce 01       	movw	r24, r28
   18ef6:	87 5b       	subi	r24, 0xB7	; 183
   18ef8:	9f 4f       	sbci	r25, 0xFF	; 255
   18efa:	ab de       	rcall	.-682    	; 0x18c52 <lif_lifbcd2timestr>
   18efc:	ed b7       	in	r30, 0x3d	; 61
   18efe:	fe b7       	in	r31, 0x3e	; 62
   18f00:	95 83       	std	Z+5, r25	; 0x05
   18f02:	84 83       	std	Z+4, r24	; 0x04
   18f04:	8a e2       	ldi	r24, 0x2A	; 42
   18f06:	92 e4       	ldi	r25, 0x42	; 66
   18f08:	a0 e0       	ldi	r26, 0x00	; 0
   18f0a:	81 83       	std	Z+1, r24	; 0x01
   18f0c:	92 83       	std	Z+2, r25	; 0x02
   18f0e:	a3 83       	std	Z+3, r26	; 0x03
   18f10:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18f14:	ce 01       	movw	r24, r28
   18f16:	81 5b       	subi	r24, 0xB1	; 177
   18f18:	9f 4f       	sbci	r25, 0xFF	; 255
   18f1a:	ed b7       	in	r30, 0x3d	; 61
   18f1c:	fe b7       	in	r31, 0x3e	; 62
   18f1e:	95 83       	std	Z+5, r25	; 0x05
   18f20:	84 83       	std	Z+4, r24	; 0x04
   18f22:	80 e1       	ldi	r24, 0x10	; 16
   18f24:	92 e4       	ldi	r25, 0x42	; 66
   18f26:	a0 e0       	ldi	r26, 0x00	; 0
   18f28:	81 83       	std	Z+1, r24	; 0x01
   18f2a:	92 83       	std	Z+2, r25	; 0x02
   18f2c:	a3 83       	std	Z+3, r26	; 0x03
   18f2e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18f32:	fe 01       	movw	r30, r28
   18f34:	e6 5a       	subi	r30, 0xA6	; 166
   18f36:	ff 4f       	sbci	r31, 0xFF	; 255
   18f38:	80 81       	ld	r24, Z
   18f3a:	91 81       	ldd	r25, Z+1	; 0x01
   18f3c:	ed b7       	in	r30, 0x3d	; 61
   18f3e:	fe b7       	in	r31, 0x3e	; 62
   18f40:	95 83       	std	Z+5, r25	; 0x05
   18f42:	84 83       	std	Z+4, r24	; 0x04
   18f44:	84 ef       	ldi	r24, 0xF4	; 244
   18f46:	91 e4       	ldi	r25, 0x41	; 65
   18f48:	a0 e0       	ldi	r26, 0x00	; 0
   18f4a:	81 83       	std	Z+1, r24	; 0x01
   18f4c:	92 83       	std	Z+2, r25	; 0x02
   18f4e:	a3 83       	std	Z+3, r26	; 0x03
   18f50:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18f54:	fe 01       	movw	r30, r28
   18f56:	e6 59       	subi	r30, 0x96	; 150
   18f58:	ff 4f       	sbci	r31, 0xFF	; 255
   18f5a:	80 81       	ld	r24, Z
   18f5c:	91 81       	ldd	r25, Z+1	; 0x01
   18f5e:	ed b7       	in	r30, 0x3d	; 61
   18f60:	fe b7       	in	r31, 0x3e	; 62
   18f62:	95 83       	std	Z+5, r25	; 0x05
   18f64:	84 83       	std	Z+4, r24	; 0x04
   18f66:	88 ed       	ldi	r24, 0xD8	; 216
   18f68:	91 e4       	ldi	r25, 0x41	; 65
   18f6a:	a0 e0       	ldi	r26, 0x00	; 0
   18f6c:	81 83       	std	Z+1, r24	; 0x01
   18f6e:	92 83       	std	Z+2, r25	; 0x02
   18f70:	a3 83       	std	Z+3, r26	; 0x03
   18f72:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18f76:	fe 01       	movw	r30, r28
   18f78:	e4 5a       	subi	r30, 0xA4	; 164
   18f7a:	ff 4f       	sbci	r31, 0xFF	; 255
   18f7c:	80 81       	ld	r24, Z
   18f7e:	91 81       	ldd	r25, Z+1	; 0x01
   18f80:	a2 81       	ldd	r26, Z+2	; 0x02
   18f82:	b3 81       	ldd	r27, Z+3	; 0x03
   18f84:	ed b7       	in	r30, 0x3d	; 61
   18f86:	fe b7       	in	r31, 0x3e	; 62
   18f88:	84 83       	std	Z+4, r24	; 0x04
   18f8a:	95 83       	std	Z+5, r25	; 0x05
   18f8c:	a6 83       	std	Z+6, r26	; 0x06
   18f8e:	b7 83       	std	Z+7, r27	; 0x07
   18f90:	8b eb       	ldi	r24, 0xBB	; 187
   18f92:	91 e4       	ldi	r25, 0x41	; 65
   18f94:	a0 e0       	ldi	r26, 0x00	; 0
   18f96:	81 83       	std	Z+1, r24	; 0x01
   18f98:	92 83       	std	Z+2, r25	; 0x02
   18f9a:	a3 83       	std	Z+3, r26	; 0x03
   18f9c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18fa0:	fe 01       	movw	r30, r28
   18fa2:	e0 5a       	subi	r30, 0xA0	; 160
   18fa4:	ff 4f       	sbci	r31, 0xFF	; 255
   18fa6:	80 81       	ld	r24, Z
   18fa8:	91 81       	ldd	r25, Z+1	; 0x01
   18faa:	a2 81       	ldd	r26, Z+2	; 0x02
   18fac:	b3 81       	ldd	r27, Z+3	; 0x03
   18fae:	ed b7       	in	r30, 0x3d	; 61
   18fb0:	fe b7       	in	r31, 0x3e	; 62
   18fb2:	84 83       	std	Z+4, r24	; 0x04
   18fb4:	95 83       	std	Z+5, r25	; 0x05
   18fb6:	a6 83       	std	Z+6, r26	; 0x06
   18fb8:	b7 83       	std	Z+7, r27	; 0x07
   18fba:	8e e9       	ldi	r24, 0x9E	; 158
   18fbc:	91 e4       	ldi	r25, 0x41	; 65
   18fbe:	a0 e0       	ldi	r26, 0x00	; 0
   18fc0:	81 83       	std	Z+1, r24	; 0x01
   18fc2:	92 83       	std	Z+2, r25	; 0x02
   18fc4:	a3 83       	std	Z+3, r26	; 0x03
   18fc6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18fca:	fe 01       	movw	r30, r28
   18fcc:	e4 59       	subi	r30, 0x94	; 148
   18fce:	ff 4f       	sbci	r31, 0xFF	; 255
   18fd0:	80 81       	ld	r24, Z
   18fd2:	91 81       	ldd	r25, Z+1	; 0x01
   18fd4:	a0 e0       	ldi	r26, 0x00	; 0
   18fd6:	b0 e0       	ldi	r27, 0x00	; 0
   18fd8:	ed b7       	in	r30, 0x3d	; 61
   18fda:	fe b7       	in	r31, 0x3e	; 62
   18fdc:	84 83       	std	Z+4, r24	; 0x04
   18fde:	95 83       	std	Z+5, r25	; 0x05
   18fe0:	a6 83       	std	Z+6, r26	; 0x06
   18fe2:	b7 83       	std	Z+7, r27	; 0x07
   18fe4:	81 e8       	ldi	r24, 0x81	; 129
   18fe6:	91 e4       	ldi	r25, 0x41	; 65
   18fe8:	a0 e0       	ldi	r26, 0x00	; 0
   18fea:	81 83       	std	Z+1, r24	; 0x01
   18fec:	92 83       	std	Z+2, r25	; 0x02
   18fee:	a3 83       	std	Z+3, r26	; 0x03
   18ff0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   18ff4:	fe 01       	movw	r30, r28
   18ff6:	e2 59       	subi	r30, 0x92	; 146
   18ff8:	ff 4f       	sbci	r31, 0xFF	; 255
   18ffa:	80 81       	ld	r24, Z
   18ffc:	91 81       	ldd	r25, Z+1	; 0x01
   18ffe:	ed b7       	in	r30, 0x3d	; 61
   19000:	fe b7       	in	r31, 0x3e	; 62
   19002:	95 83       	std	Z+5, r25	; 0x05
   19004:	84 83       	std	Z+4, r24	; 0x04
   19006:	85 e6       	ldi	r24, 0x65	; 101
   19008:	91 e4       	ldi	r25, 0x41	; 65
   1900a:	a0 e0       	ldi	r26, 0x00	; 0
   1900c:	81 83       	std	Z+1, r24	; 0x01
   1900e:	92 83       	std	Z+2, r25	; 0x02
   19010:	a3 83       	std	Z+3, r26	; 0x03
   19012:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   19016:	ce 01       	movw	r24, r28
   19018:	8c 59       	subi	r24, 0x9C	; 156
   1901a:	9f 4f       	sbci	r25, 0xFF	; 255
   1901c:	1a de       	rcall	.-972    	; 0x18c52 <lif_lifbcd2timestr>
   1901e:	ed b7       	in	r30, 0x3d	; 61
   19020:	fe b7       	in	r31, 0x3e	; 62
   19022:	95 83       	std	Z+5, r25	; 0x05
   19024:	84 83       	std	Z+4, r24	; 0x04
   19026:	8b e4       	ldi	r24, 0x4B	; 75
   19028:	91 e4       	ldi	r25, 0x41	; 65
   1902a:	a0 e0       	ldi	r26, 0x00	; 0
   1902c:	81 83       	std	Z+1, r24	; 0x01
   1902e:	92 83       	std	Z+2, r25	; 0x02
   19030:	a3 83       	std	Z+3, r26	; 0x03
   19032:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   19036:	89 e4       	ldi	r24, 0x49	; 73
   19038:	91 e4       	ldi	r25, 0x41	; 65
   1903a:	a0 e0       	ldi	r26, 0x00	; 0
   1903c:	ed b7       	in	r30, 0x3d	; 61
   1903e:	fe b7       	in	r31, 0x3e	; 62
   19040:	81 83       	std	Z+1, r24	; 0x01
   19042:	92 83       	std	Z+2, r25	; 0x02
   19044:	a3 83       	std	Z+3, r26	; 0x03
   19046:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1904a:	cd b7       	in	r28, 0x3d	; 61
   1904c:	de b7       	in	r29, 0x3e	; 62
   1904e:	27 96       	adiw	r28, 0x07	; 7
   19050:	e2 e0       	ldi	r30, 0x02	; 2
   19052:	0c 94 42 e7 	jmp	0x1ce84	; 0x1ce84 <__epilogue_restores__+0x20>

00019056 <lif_check_volume>:
   19056:	0f 93       	push	r16
   19058:	1f 93       	push	r17
   1905a:	cf 93       	push	r28
   1905c:	df 93       	push	r29
   1905e:	ad b7       	in	r26, 0x3d	; 61
   19060:	be b7       	in	r27, 0x3e	; 62
   19062:	17 97       	sbiw	r26, 0x07	; 7
   19064:	0f b6       	in	r0, 0x3f	; 63
   19066:	f8 94       	cli
   19068:	be bf       	out	0x3e, r27	; 62
   1906a:	0f be       	out	0x3f, r0	; 63
   1906c:	ad bf       	out	0x3d, r26	; 61
   1906e:	ec 01       	movw	r28, r24
   19070:	86 96       	adiw	r24, 0x26	; 38
   19072:	e0 da       	rcall	.-2624   	; 0x18634 <lif_checkname>
   19074:	89 2b       	or	r24, r25
   19076:	89 f4       	brne	.+34     	; 0x1909a <lif_check_volume+0x44>
   19078:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1907c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19080:	92 ff       	sbrs	r25, 2
   19082:	0e c0       	rjmp	.+28     	; 0x190a0 <lif_check_volume+0x4a>
   19084:	8a e2       	ldi	r24, 0x2A	; 42
   19086:	91 e4       	ldi	r25, 0x41	; 65
   19088:	a0 e0       	ldi	r26, 0x00	; 0
   1908a:	ed b7       	in	r30, 0x3d	; 61
   1908c:	fe b7       	in	r31, 0x3e	; 62
   1908e:	81 83       	std	Z+1, r24	; 0x01
   19090:	92 83       	std	Z+2, r25	; 0x02
   19092:	a3 83       	std	Z+3, r26	; 0x03
   19094:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   19098:	03 c0       	rjmp	.+6      	; 0x190a0 <lif_check_volume+0x4a>
   1909a:	81 e0       	ldi	r24, 0x01	; 1
   1909c:	90 e0       	ldi	r25, 0x00	; 0
   1909e:	02 c0       	rjmp	.+4      	; 0x190a4 <lif_check_volume+0x4e>
   190a0:	80 e0       	ldi	r24, 0x00	; 0
   190a2:	90 e0       	ldi	r25, 0x00	; 0
   190a4:	29 a9       	ldd	r18, Y+49	; 0x31
   190a6:	3a a9       	ldd	r19, Y+50	; 0x32
   190a8:	21 15       	cp	r18, r1
   190aa:	f0 e1       	ldi	r31, 0x10	; 16
   190ac:	3f 07       	cpc	r19, r31
   190ae:	a1 f0       	breq	.+40     	; 0x190d8 <lif_check_volume+0x82>
   190b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190b4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190b8:	92 ff       	sbrs	r25, 2
   190ba:	0c c0       	rjmp	.+24     	; 0x190d4 <lif_check_volume+0x7e>
   190bc:	ed b7       	in	r30, 0x3d	; 61
   190be:	fe b7       	in	r31, 0x3e	; 62
   190c0:	35 83       	std	Z+5, r19	; 0x05
   190c2:	24 83       	std	Z+4, r18	; 0x04
   190c4:	81 ef       	ldi	r24, 0xF1	; 241
   190c6:	90 e4       	ldi	r25, 0x40	; 64
   190c8:	a0 e0       	ldi	r26, 0x00	; 0
   190ca:	81 83       	std	Z+1, r24	; 0x01
   190cc:	92 83       	std	Z+2, r25	; 0x02
   190ce:	a3 83       	std	Z+3, r26	; 0x03
   190d0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   190d4:	80 e0       	ldi	r24, 0x00	; 0
   190d6:	90 e0       	ldi	r25, 0x00	; 0
   190d8:	29 ad       	ldd	r18, Y+57	; 0x39
   190da:	3a ad       	ldd	r19, Y+58	; 0x3a
   190dc:	22 30       	cpi	r18, 0x02	; 2
   190de:	31 05       	cpc	r19, r1
   190e0:	a0 f0       	brcs	.+40     	; 0x1910a <lif_check_volume+0xb4>
   190e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190e6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190ea:	92 ff       	sbrs	r25, 2
   190ec:	0c c0       	rjmp	.+24     	; 0x19106 <lif_check_volume+0xb0>
   190ee:	ed b7       	in	r30, 0x3d	; 61
   190f0:	fe b7       	in	r31, 0x3e	; 62
   190f2:	35 83       	std	Z+5, r19	; 0x05
   190f4:	24 83       	std	Z+4, r18	; 0x04
   190f6:	89 ed       	ldi	r24, 0xD9	; 217
   190f8:	90 e4       	ldi	r25, 0x40	; 64
   190fa:	a0 e0       	ldi	r26, 0x00	; 0
   190fc:	81 83       	std	Z+1, r24	; 0x01
   190fe:	92 83       	std	Z+2, r25	; 0x02
   19100:	a3 83       	std	Z+3, r26	; 0x03
   19102:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   19106:	80 e0       	ldi	r24, 0x00	; 0
   19108:	90 e0       	ldi	r25, 0x00	; 0
   1910a:	2b a9       	ldd	r18, Y+51	; 0x33
   1910c:	3c a9       	ldd	r19, Y+52	; 0x34
   1910e:	23 2b       	or	r18, r19
   19110:	91 f0       	breq	.+36     	; 0x19136 <lif_check_volume+0xe0>
   19112:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19116:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1911a:	92 ff       	sbrs	r25, 2
   1911c:	0a c0       	rjmp	.+20     	; 0x19132 <lif_check_volume+0xdc>
   1911e:	80 ea       	ldi	r24, 0xA0	; 160
   19120:	90 e4       	ldi	r25, 0x40	; 64
   19122:	a0 e0       	ldi	r26, 0x00	; 0
   19124:	ed b7       	in	r30, 0x3d	; 61
   19126:	fe b7       	in	r31, 0x3e	; 62
   19128:	81 83       	std	Z+1, r24	; 0x01
   1912a:	92 83       	std	Z+2, r25	; 0x02
   1912c:	a3 83       	std	Z+3, r26	; 0x03
   1912e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   19132:	80 e0       	ldi	r24, 0x00	; 0
   19134:	90 e0       	ldi	r25, 0x00	; 0
   19136:	2b ad       	ldd	r18, Y+59	; 0x3b
   19138:	3c ad       	ldd	r19, Y+60	; 0x3c
   1913a:	23 2b       	or	r18, r19
   1913c:	91 f0       	breq	.+36     	; 0x19162 <lif_check_volume+0x10c>
   1913e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19142:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19146:	92 ff       	sbrs	r25, 2
   19148:	0a c0       	rjmp	.+20     	; 0x1915e <lif_check_volume+0x108>
   1914a:	87 e6       	ldi	r24, 0x67	; 103
   1914c:	90 e4       	ldi	r25, 0x40	; 64
   1914e:	a0 e0       	ldi	r26, 0x00	; 0
   19150:	ed b7       	in	r30, 0x3d	; 61
   19152:	fe b7       	in	r31, 0x3e	; 62
   19154:	81 83       	std	Z+1, r24	; 0x01
   19156:	92 83       	std	Z+2, r25	; 0x02
   19158:	a3 83       	std	Z+3, r26	; 0x03
   1915a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1915e:	80 e0       	ldi	r24, 0x00	; 0
   19160:	90 e0       	ldi	r25, 0x00	; 0
   19162:	4d a5       	ldd	r20, Y+45	; 0x2d
   19164:	5e a5       	ldd	r21, Y+46	; 0x2e
   19166:	6f a5       	ldd	r22, Y+47	; 0x2f
   19168:	78 a9       	ldd	r23, Y+48	; 0x30
   1916a:	45 2b       	or	r20, r21
   1916c:	46 2b       	or	r20, r22
   1916e:	47 2b       	or	r20, r23
   19170:	b1 f4       	brne	.+44     	; 0x1919e <lif_check_volume+0x148>
   19172:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19176:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1917a:	92 ff       	sbrs	r25, 2
   1917c:	0e c0       	rjmp	.+28     	; 0x1919a <lif_check_volume+0x144>
   1917e:	ed b7       	in	r30, 0x3d	; 61
   19180:	fe b7       	in	r31, 0x3e	; 62
   19182:	14 82       	std	Z+4, r1	; 0x04
   19184:	15 82       	std	Z+5, r1	; 0x05
   19186:	16 82       	std	Z+6, r1	; 0x06
   19188:	17 82       	std	Z+7, r1	; 0x07
   1918a:	82 e4       	ldi	r24, 0x42	; 66
   1918c:	90 e4       	ldi	r25, 0x40	; 64
   1918e:	a0 e0       	ldi	r26, 0x00	; 0
   19190:	81 83       	std	Z+1, r24	; 0x01
   19192:	92 83       	std	Z+2, r25	; 0x02
   19194:	a3 83       	std	Z+3, r26	; 0x03
   19196:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1919a:	80 e0       	ldi	r24, 0x00	; 0
   1919c:	90 e0       	ldi	r25, 0x00	; 0
   1919e:	4d a9       	ldd	r20, Y+53	; 0x35
   191a0:	5e a9       	ldd	r21, Y+54	; 0x36
   191a2:	6f a9       	ldd	r22, Y+55	; 0x37
   191a4:	78 ad       	ldd	r23, Y+56	; 0x38
   191a6:	45 2b       	or	r20, r21
   191a8:	46 2b       	or	r20, r22
   191aa:	47 2b       	or	r20, r23
   191ac:	91 f4       	brne	.+36     	; 0x191d2 <lif_check_volume+0x17c>
   191ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191b2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191b6:	92 ff       	sbrs	r25, 2
   191b8:	0a c0       	rjmp	.+20     	; 0x191ce <lif_check_volume+0x178>
   191ba:	83 e1       	ldi	r24, 0x13	; 19
   191bc:	90 e4       	ldi	r25, 0x40	; 64
   191be:	a0 e0       	ldi	r26, 0x00	; 0
   191c0:	ed b7       	in	r30, 0x3d	; 61
   191c2:	fe b7       	in	r31, 0x3e	; 62
   191c4:	81 83       	std	Z+1, r24	; 0x01
   191c6:	92 83       	std	Z+2, r25	; 0x02
   191c8:	a3 83       	std	Z+3, r26	; 0x03
   191ca:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   191ce:	80 e0       	ldi	r24, 0x00	; 0
   191d0:	90 e0       	ldi	r25, 0x00	; 0
   191d2:	0d a5       	ldd	r16, Y+45	; 0x2d
   191d4:	1e a5       	ldd	r17, Y+46	; 0x2e
   191d6:	2f a5       	ldd	r18, Y+47	; 0x2f
   191d8:	38 a9       	ldd	r19, Y+48	; 0x30
   191da:	4d a9       	ldd	r20, Y+53	; 0x35
   191dc:	5e a9       	ldd	r21, Y+54	; 0x36
   191de:	6f a9       	ldd	r22, Y+55	; 0x37
   191e0:	78 ad       	ldd	r23, Y+56	; 0x38
   191e2:	40 0f       	add	r20, r16
   191e4:	51 1f       	adc	r21, r17
   191e6:	62 1f       	adc	r22, r18
   191e8:	73 1f       	adc	r23, r19
   191ea:	0c 81       	ldd	r16, Y+4	; 0x04
   191ec:	1d 81       	ldd	r17, Y+5	; 0x05
   191ee:	2e 81       	ldd	r18, Y+6	; 0x06
   191f0:	3f 81       	ldd	r19, Y+7	; 0x07
   191f2:	04 17       	cp	r16, r20
   191f4:	15 07       	cpc	r17, r21
   191f6:	26 07       	cpc	r18, r22
   191f8:	37 07       	cpc	r19, r23
   191fa:	90 f4       	brcc	.+36     	; 0x19220 <lif_check_volume+0x1ca>
   191fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19200:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19204:	92 ff       	sbrs	r25, 2
   19206:	0a c0       	rjmp	.+20     	; 0x1921c <lif_check_volume+0x1c6>
   19208:	87 ee       	ldi	r24, 0xE7	; 231
   1920a:	9f e3       	ldi	r25, 0x3F	; 63
   1920c:	a0 e0       	ldi	r26, 0x00	; 0
   1920e:	ed b7       	in	r30, 0x3d	; 61
   19210:	fe b7       	in	r31, 0x3e	; 62
   19212:	81 83       	std	Z+1, r24	; 0x01
   19214:	92 83       	std	Z+2, r25	; 0x02
   19216:	a3 83       	std	Z+3, r26	; 0x03
   19218:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1921c:	80 e0       	ldi	r24, 0x00	; 0
   1921e:	90 e0       	ldi	r25, 0x00	; 0
   19220:	cd b7       	in	r28, 0x3d	; 61
   19222:	de b7       	in	r29, 0x3e	; 62
   19224:	27 96       	adiw	r28, 0x07	; 7
   19226:	e4 e0       	ldi	r30, 0x04	; 4
   19228:	0c 94 40 e7 	jmp	0x1ce80	; 0x1ce80 <__epilogue_restores__+0x1c>

0001922c <lif_check_dir>:
   1922c:	a5 e1       	ldi	r26, 0x15	; 21
   1922e:	b0 e0       	ldi	r27, 0x00	; 0
   19230:	ec e1       	ldi	r30, 0x1C	; 28
   19232:	f9 ec       	ldi	r31, 0xC9	; 201
   19234:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   19238:	6c 01       	movw	r12, r24
   1923a:	2a e5       	ldi	r18, 0x5A	; 90
   1923c:	c2 0e       	add	r12, r18
   1923e:	d1 1c       	adc	r13, r1
   19240:	f6 01       	movw	r30, r12
   19242:	20 81       	ld	r18, Z
   19244:	31 81       	ldd	r19, Z+1	; 0x01
   19246:	21 50       	subi	r18, 0x01	; 1
   19248:	31 09       	sbc	r19, r1
   1924a:	2e 3f       	cpi	r18, 0xFE	; 254
   1924c:	3f 4f       	sbci	r19, 0xFF	; 255
   1924e:	08 f0       	brcs	.+2      	; 0x19252 <lif_check_dir+0x26>
   19250:	9a c1       	rjmp	.+820    	; 0x19586 <lif_check_dir+0x35a>
   19252:	9d 8b       	std	Y+21, r25	; 0x15
   19254:	8c 8b       	std	Y+20, r24	; 0x14
   19256:	7c 01       	movw	r14, r24
   19258:	2f e4       	ldi	r18, 0x4F	; 79
   1925a:	e2 0e       	add	r14, r18
   1925c:	f1 1c       	adc	r15, r1
   1925e:	c7 01       	movw	r24, r14
   19260:	e9 d9       	rcall	.-3118   	; 0x18634 <lif_checkname>
   19262:	89 2b       	or	r24, r25
   19264:	99 f4       	brne	.+38     	; 0x1928c <lif_check_dir+0x60>
   19266:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1926a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1926e:	92 ff       	sbrs	r25, 2
   19270:	0f c0       	rjmp	.+30     	; 0x19290 <lif_check_dir+0x64>
   19272:	ed b7       	in	r30, 0x3d	; 61
   19274:	fe b7       	in	r31, 0x3e	; 62
   19276:	f5 82       	std	Z+5, r15	; 0x05
   19278:	e4 82       	std	Z+4, r14	; 0x04
   1927a:	86 ec       	ldi	r24, 0xC6	; 198
   1927c:	9f e3       	ldi	r25, 0x3F	; 63
   1927e:	a0 e0       	ldi	r26, 0x00	; 0
   19280:	81 83       	std	Z+1, r24	; 0x01
   19282:	92 83       	std	Z+2, r25	; 0x02
   19284:	a3 83       	std	Z+3, r26	; 0x03
   19286:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1928a:	02 c0       	rjmp	.+4      	; 0x19290 <lif_check_dir+0x64>
   1928c:	01 e0       	ldi	r16, 0x01	; 1
   1928e:	01 c0       	rjmp	.+2      	; 0x19292 <lif_check_dir+0x66>
   19290:	00 e0       	ldi	r16, 0x00	; 0
   19292:	10 e0       	ldi	r17, 0x00	; 0
   19294:	ec 89       	ldd	r30, Y+20	; 0x14
   19296:	fd 89       	ldd	r31, Y+21	; 0x15
   19298:	84 85       	ldd	r24, Z+12	; 0x0c
   1929a:	95 85       	ldd	r25, Z+13	; 0x0d
   1929c:	a6 85       	ldd	r26, Z+14	; 0x0e
   1929e:	b7 85       	ldd	r27, Z+15	; 0x0f
   192a0:	00 97       	sbiw	r24, 0x00	; 0
   192a2:	a1 05       	cpc	r26, r1
   192a4:	b1 05       	cpc	r27, r1
   192a6:	39 f1       	breq	.+78     	; 0x192f6 <lif_check_dir+0xca>
   192a8:	e4 5a       	subi	r30, 0xA4	; 164
   192aa:	ff 4f       	sbci	r31, 0xFF	; 255
   192ac:	40 81       	ld	r20, Z
   192ae:	51 81       	ldd	r21, Z+1	; 0x01
   192b0:	62 81       	ldd	r22, Z+2	; 0x02
   192b2:	73 81       	ldd	r23, Z+3	; 0x03
   192b4:	48 17       	cp	r20, r24
   192b6:	59 07       	cpc	r21, r25
   192b8:	6a 07       	cpc	r22, r26
   192ba:	7b 07       	cpc	r23, r27
   192bc:	e0 f4       	brcc	.+56     	; 0x192f6 <lif_check_dir+0xca>
   192be:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   192c2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   192c6:	32 ff       	sbrs	r19, 2
   192c8:	14 c0       	rjmp	.+40     	; 0x192f2 <lif_check_dir+0xc6>
   192ca:	ed b7       	in	r30, 0x3d	; 61
   192cc:	fe b7       	in	r31, 0x3e	; 62
   192ce:	82 87       	std	Z+10, r24	; 0x0a
   192d0:	93 87       	std	Z+11, r25	; 0x0b
   192d2:	a4 87       	std	Z+12, r26	; 0x0c
   192d4:	b5 87       	std	Z+13, r27	; 0x0d
   192d6:	46 83       	std	Z+6, r20	; 0x06
   192d8:	57 83       	std	Z+7, r21	; 0x07
   192da:	60 87       	std	Z+8, r22	; 0x08
   192dc:	71 87       	std	Z+9, r23	; 0x09
   192de:	f5 82       	std	Z+5, r15	; 0x05
   192e0:	e4 82       	std	Z+4, r14	; 0x04
   192e2:	82 e8       	ldi	r24, 0x82	; 130
   192e4:	9f e3       	ldi	r25, 0x3F	; 63
   192e6:	a0 e0       	ldi	r26, 0x00	; 0
   192e8:	81 83       	std	Z+1, r24	; 0x01
   192ea:	92 83       	std	Z+2, r25	; 0x02
   192ec:	a3 83       	std	Z+3, r26	; 0x03
   192ee:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   192f2:	00 e0       	ldi	r16, 0x00	; 0
   192f4:	10 e0       	ldi	r17, 0x00	; 0
   192f6:	ec 89       	ldd	r30, Y+20	; 0x14
   192f8:	fd 89       	ldd	r31, Y+21	; 0x15
   192fa:	44 81       	ldd	r20, Z+4	; 0x04
   192fc:	55 81       	ldd	r21, Z+5	; 0x05
   192fe:	66 81       	ldd	r22, Z+6	; 0x06
   19300:	77 81       	ldd	r23, Z+7	; 0x07
   19302:	41 15       	cp	r20, r1
   19304:	51 05       	cpc	r21, r1
   19306:	61 05       	cpc	r22, r1
   19308:	71 05       	cpc	r23, r1
   1930a:	99 f1       	breq	.+102    	; 0x19372 <lif_check_dir+0x146>
   1930c:	e4 5a       	subi	r30, 0xA4	; 164
   1930e:	ff 4f       	sbci	r31, 0xFF	; 255
   19310:	80 80       	ld	r8, Z
   19312:	91 80       	ldd	r9, Z+1	; 0x01
   19314:	a2 80       	ldd	r10, Z+2	; 0x02
   19316:	b3 80       	ldd	r11, Z+3	; 0x03
   19318:	ec 89       	ldd	r30, Y+20	; 0x14
   1931a:	fd 89       	ldd	r31, Y+21	; 0x15
   1931c:	e0 5a       	subi	r30, 0xA0	; 160
   1931e:	ff 4f       	sbci	r31, 0xFF	; 255
   19320:	80 81       	ld	r24, Z
   19322:	91 81       	ldd	r25, Z+1	; 0x01
   19324:	a2 81       	ldd	r26, Z+2	; 0x02
   19326:	b3 81       	ldd	r27, Z+3	; 0x03
   19328:	88 0d       	add	r24, r8
   1932a:	99 1d       	adc	r25, r9
   1932c:	aa 1d       	adc	r26, r10
   1932e:	bb 1d       	adc	r27, r11
   19330:	48 17       	cp	r20, r24
   19332:	59 07       	cpc	r21, r25
   19334:	6a 07       	cpc	r22, r26
   19336:	7b 07       	cpc	r23, r27
   19338:	e0 f4       	brcc	.+56     	; 0x19372 <lif_check_dir+0x146>
   1933a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1933e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19342:	32 ff       	sbrs	r19, 2
   19344:	14 c0       	rjmp	.+40     	; 0x1936e <lif_check_dir+0x142>
   19346:	ed b7       	in	r30, 0x3d	; 61
   19348:	fe b7       	in	r31, 0x3e	; 62
   1934a:	42 87       	std	Z+10, r20	; 0x0a
   1934c:	53 87       	std	Z+11, r21	; 0x0b
   1934e:	64 87       	std	Z+12, r22	; 0x0c
   19350:	75 87       	std	Z+13, r23	; 0x0d
   19352:	86 83       	std	Z+6, r24	; 0x06
   19354:	97 83       	std	Z+7, r25	; 0x07
   19356:	a0 87       	std	Z+8, r26	; 0x08
   19358:	b1 87       	std	Z+9, r27	; 0x09
   1935a:	f5 82       	std	Z+5, r15	; 0x05
   1935c:	e4 82       	std	Z+4, r14	; 0x04
   1935e:	81 e4       	ldi	r24, 0x41	; 65
   19360:	9f e3       	ldi	r25, 0x3F	; 63
   19362:	a0 e0       	ldi	r26, 0x00	; 0
   19364:	81 83       	std	Z+1, r24	; 0x01
   19366:	92 83       	std	Z+2, r25	; 0x02
   19368:	a3 83       	std	Z+3, r26	; 0x03
   1936a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1936e:	00 e0       	ldi	r16, 0x00	; 0
   19370:	10 e0       	ldi	r17, 0x00	; 0
   19372:	ec 89       	ldd	r30, Y+20	; 0x14
   19374:	fd 89       	ldd	r31, Y+21	; 0x15
   19376:	e6 59       	subi	r30, 0x96	; 150
   19378:	ff 4f       	sbci	r31, 0xFF	; 255
   1937a:	80 81       	ld	r24, Z
   1937c:	91 81       	ldd	r25, Z+1	; 0x01
   1937e:	81 30       	cpi	r24, 0x01	; 1
   19380:	f0 e8       	ldi	r31, 0x80	; 128
   19382:	9f 07       	cpc	r25, r31
   19384:	b1 f0       	breq	.+44     	; 0x193b2 <lif_check_dir+0x186>
   19386:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1938a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1938e:	32 ff       	sbrs	r19, 2
   19390:	0e c0       	rjmp	.+28     	; 0x193ae <lif_check_dir+0x182>
   19392:	ed b7       	in	r30, 0x3d	; 61
   19394:	fe b7       	in	r31, 0x3e	; 62
   19396:	97 83       	std	Z+7, r25	; 0x07
   19398:	86 83       	std	Z+6, r24	; 0x06
   1939a:	f5 82       	std	Z+5, r15	; 0x05
   1939c:	e4 82       	std	Z+4, r14	; 0x04
   1939e:	83 e1       	ldi	r24, 0x13	; 19
   193a0:	9f e3       	ldi	r25, 0x3F	; 63
   193a2:	a0 e0       	ldi	r26, 0x00	; 0
   193a4:	81 83       	std	Z+1, r24	; 0x01
   193a6:	92 83       	std	Z+2, r25	; 0x02
   193a8:	a3 83       	std	Z+3, r26	; 0x03
   193aa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   193ae:	00 e0       	ldi	r16, 0x00	; 0
   193b0:	10 e0       	ldi	r17, 0x00	; 0
   193b2:	f6 01       	movw	r30, r12
   193b4:	80 81       	ld	r24, Z
   193b6:	91 81       	ldd	r25, Z+1	; 0x01
   193b8:	8c 7f       	andi	r24, 0xFC	; 252
   193ba:	80 31       	cpi	r24, 0x10	; 16
   193bc:	90 4e       	sbci	r25, 0xE0	; 224
   193be:	09 f0       	breq	.+2      	; 0x193c2 <lif_check_dir+0x196>
   193c0:	b3 c0       	rjmp	.+358    	; 0x19528 <lif_check_dir+0x2fc>
   193c2:	cc 88       	ldd	r12, Y+20	; 0x14
   193c4:	dd 88       	ldd	r13, Y+21	; 0x15
   193c6:	2c e6       	ldi	r18, 0x6C	; 108
   193c8:	c2 0e       	add	r12, r18
   193ca:	d1 1c       	adc	r13, r1
   193cc:	f6 01       	movw	r30, r12
   193ce:	80 81       	ld	r24, Z
   193d0:	91 81       	ldd	r25, Z+1	; 0x01
   193d2:	00 97       	sbiw	r24, 0x00	; 0
   193d4:	09 f4       	brne	.+2      	; 0x193d8 <lif_check_dir+0x1ac>
   193d6:	a8 c0       	rjmp	.+336    	; 0x19528 <lif_check_dir+0x2fc>
   193d8:	4c 01       	movw	r8, r24
   193da:	a1 2c       	mov	r10, r1
   193dc:	b1 2c       	mov	r11, r1
   193de:	77 27       	eor	r23, r23
   193e0:	6b 2d       	mov	r22, r11
   193e2:	5a 2d       	mov	r21, r10
   193e4:	49 2d       	mov	r20, r9
   193e6:	9c 01       	movw	r18, r24
   193e8:	33 27       	eor	r19, r19
   193ea:	3b 8b       	std	Y+19, r19	; 0x13
   193ec:	2a 8b       	std	Y+18, r18	; 0x12
   193ee:	db 01       	movw	r26, r22
   193f0:	ca 01       	movw	r24, r20
   193f2:	23 2b       	or	r18, r19
   193f4:	19 f0       	breq	.+6      	; 0x193fc <lif_check_dir+0x1d0>
   193f6:	01 96       	adiw	r24, 0x01	; 1
   193f8:	a1 1d       	adc	r26, r1
   193fa:	b1 1d       	adc	r27, r1
   193fc:	2c 88       	ldd	r2, Y+20	; 0x14
   193fe:	3d 88       	ldd	r3, Y+21	; 0x15
   19400:	30 e6       	ldi	r19, 0x60	; 96
   19402:	23 0e       	add	r2, r19
   19404:	31 1c       	adc	r3, r1
   19406:	f1 01       	movw	r30, r2
   19408:	40 80       	ld	r4, Z
   1940a:	51 80       	ldd	r5, Z+1	; 0x01
   1940c:	62 80       	ldd	r6, Z+2	; 0x02
   1940e:	73 80       	ldd	r7, Z+3	; 0x03
   19410:	48 16       	cp	r4, r24
   19412:	59 06       	cpc	r5, r25
   19414:	6a 06       	cpc	r6, r26
   19416:	7b 06       	cpc	r7, r27
   19418:	40 f5       	brcc	.+80     	; 0x1946a <lif_check_dir+0x23e>
   1941a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1941e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19422:	32 ff       	sbrs	r19, 2
   19424:	20 c0       	rjmp	.+64     	; 0x19466 <lif_check_dir+0x23a>
   19426:	2a 89       	ldd	r18, Y+18	; 0x12
   19428:	3b 89       	ldd	r19, Y+19	; 0x13
   1942a:	23 2b       	or	r18, r19
   1942c:	21 f0       	breq	.+8      	; 0x19436 <lif_check_dir+0x20a>
   1942e:	4f 5f       	subi	r20, 0xFF	; 255
   19430:	5f 4f       	sbci	r21, 0xFF	; 255
   19432:	6f 4f       	sbci	r22, 0xFF	; 255
   19434:	7f 4f       	sbci	r23, 0xFF	; 255
   19436:	ed b7       	in	r30, 0x3d	; 61
   19438:	fe b7       	in	r31, 0x3e	; 62
   1943a:	46 86       	std	Z+14, r4	; 0x0e
   1943c:	57 86       	std	Z+15, r5	; 0x0f
   1943e:	60 8a       	std	Z+16, r6	; 0x10
   19440:	71 8a       	std	Z+17, r7	; 0x11
   19442:	42 87       	std	Z+10, r20	; 0x0a
   19444:	53 87       	std	Z+11, r21	; 0x0b
   19446:	64 87       	std	Z+12, r22	; 0x0c
   19448:	75 87       	std	Z+13, r23	; 0x0d
   1944a:	86 82       	std	Z+6, r8	; 0x06
   1944c:	97 82       	std	Z+7, r9	; 0x07
   1944e:	a0 86       	std	Z+8, r10	; 0x08
   19450:	b1 86       	std	Z+9, r11	; 0x09
   19452:	f5 82       	std	Z+5, r15	; 0x05
   19454:	e4 82       	std	Z+4, r14	; 0x04
   19456:	88 ec       	ldi	r24, 0xC8	; 200
   19458:	9e e3       	ldi	r25, 0x3E	; 62
   1945a:	a0 e0       	ldi	r26, 0x00	; 0
   1945c:	81 83       	std	Z+1, r24	; 0x01
   1945e:	92 83       	std	Z+2, r25	; 0x02
   19460:	a3 83       	std	Z+3, r26	; 0x03
   19462:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   19466:	00 e0       	ldi	r16, 0x00	; 0
   19468:	10 e0       	ldi	r17, 0x00	; 0
   1946a:	f6 01       	movw	r30, r12
   1946c:	20 81       	ld	r18, Z
   1946e:	31 81       	ldd	r19, Z+1	; 0x01
   19470:	a9 01       	movw	r20, r18
   19472:	60 e0       	ldi	r22, 0x00	; 0
   19474:	70 e0       	ldi	r23, 0x00	; 0
   19476:	bb 27       	eor	r27, r27
   19478:	a7 2f       	mov	r26, r23
   1947a:	96 2f       	mov	r25, r22
   1947c:	85 2f       	mov	r24, r21
   1947e:	f9 01       	movw	r30, r18
   19480:	ff 27       	eor	r31, r31
   19482:	fb 8b       	std	Y+19, r31	; 0x13
   19484:	ea 8b       	std	Y+18, r30	; 0x12
   19486:	2c 01       	movw	r4, r24
   19488:	3d 01       	movw	r6, r26
   1948a:	ef 2b       	or	r30, r31
   1948c:	29 f0       	breq	.+10     	; 0x19498 <lif_check_dir+0x26c>
   1948e:	ff ef       	ldi	r31, 0xFF	; 255
   19490:	4f 1a       	sub	r4, r31
   19492:	5f 0a       	sbc	r5, r31
   19494:	6f 0a       	sbc	r6, r31
   19496:	7f 0a       	sbc	r7, r31
   19498:	f1 01       	movw	r30, r2
   1949a:	80 80       	ld	r8, Z
   1949c:	91 80       	ldd	r9, Z+1	; 0x01
   1949e:	a2 80       	ldd	r10, Z+2	; 0x02
   194a0:	b3 80       	ldd	r11, Z+3	; 0x03
   194a2:	48 14       	cp	r4, r8
   194a4:	59 04       	cpc	r5, r9
   194a6:	6a 04       	cpc	r6, r10
   194a8:	7b 04       	cpc	r7, r11
   194aa:	28 f5       	brcc	.+74     	; 0x194f6 <lif_check_dir+0x2ca>
   194ac:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   194b0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194b4:	32 ff       	sbrs	r19, 2
   194b6:	1f c0       	rjmp	.+62     	; 0x194f6 <lif_check_dir+0x2ca>
   194b8:	2a 89       	ldd	r18, Y+18	; 0x12
   194ba:	3b 89       	ldd	r19, Y+19	; 0x13
   194bc:	23 2b       	or	r18, r19
   194be:	19 f0       	breq	.+6      	; 0x194c6 <lif_check_dir+0x29a>
   194c0:	01 96       	adiw	r24, 0x01	; 1
   194c2:	a1 1d       	adc	r26, r1
   194c4:	b1 1d       	adc	r27, r1
   194c6:	ed b7       	in	r30, 0x3d	; 61
   194c8:	fe b7       	in	r31, 0x3e	; 62
   194ca:	86 86       	std	Z+14, r8	; 0x0e
   194cc:	97 86       	std	Z+15, r9	; 0x0f
   194ce:	a0 8a       	std	Z+16, r10	; 0x10
   194d0:	b1 8a       	std	Z+17, r11	; 0x11
   194d2:	82 87       	std	Z+10, r24	; 0x0a
   194d4:	93 87       	std	Z+11, r25	; 0x0b
   194d6:	a4 87       	std	Z+12, r26	; 0x0c
   194d8:	b5 87       	std	Z+13, r27	; 0x0d
   194da:	46 83       	std	Z+6, r20	; 0x06
   194dc:	57 83       	std	Z+7, r21	; 0x07
   194de:	60 87       	std	Z+8, r22	; 0x08
   194e0:	71 87       	std	Z+9, r23	; 0x09
   194e2:	f5 82       	std	Z+5, r15	; 0x05
   194e4:	e4 82       	std	Z+4, r14	; 0x04
   194e6:	8d e7       	ldi	r24, 0x7D	; 125
   194e8:	9e e3       	ldi	r25, 0x3E	; 62
   194ea:	a0 e0       	ldi	r26, 0x00	; 0
   194ec:	81 83       	std	Z+1, r24	; 0x01
   194ee:	92 83       	std	Z+2, r25	; 0x02
   194f0:	a3 83       	std	Z+3, r26	; 0x03
   194f2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   194f6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   194fa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194fe:	92 ff       	sbrs	r25, 2
   19500:	13 c0       	rjmp	.+38     	; 0x19528 <lif_check_dir+0x2fc>
   19502:	f6 01       	movw	r30, r12
   19504:	80 81       	ld	r24, Z
   19506:	91 81       	ldd	r25, Z+1	; 0x01
   19508:	89 2b       	or	r24, r25
   1950a:	71 f4       	brne	.+28     	; 0x19528 <lif_check_dir+0x2fc>
   1950c:	ed b7       	in	r30, 0x3d	; 61
   1950e:	fe b7       	in	r31, 0x3e	; 62
   19510:	f5 82       	std	Z+5, r15	; 0x05
   19512:	e4 82       	std	Z+4, r14	; 0x04
   19514:	82 e5       	ldi	r24, 0x52	; 82
   19516:	9e e3       	ldi	r25, 0x3E	; 62
   19518:	a0 e0       	ldi	r26, 0x00	; 0
   1951a:	81 83       	std	Z+1, r24	; 0x01
   1951c:	92 83       	std	Z+2, r25	; 0x02
   1951e:	a3 83       	std	Z+3, r26	; 0x03
   19520:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   19524:	00 e0       	ldi	r16, 0x00	; 0
   19526:	10 e0       	ldi	r17, 0x00	; 0
   19528:	ec 89       	ldd	r30, Y+20	; 0x14
   1952a:	fd 89       	ldd	r31, Y+21	; 0x15
   1952c:	e2 59       	subi	r30, 0x92	; 146
   1952e:	ff 4f       	sbci	r31, 0xFF	; 255
   19530:	20 81       	ld	r18, Z
   19532:	31 81       	ldd	r19, Z+1	; 0x01
   19534:	21 15       	cp	r18, r1
   19536:	f1 e0       	ldi	r31, 0x01	; 1
   19538:	3f 07       	cpc	r19, r31
   1953a:	41 f1       	breq	.+80     	; 0x1958c <lif_check_dir+0x360>
   1953c:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   19540:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19544:	ca 01       	movw	r24, r20
   19546:	88 27       	eor	r24, r24
   19548:	94 70       	andi	r25, 0x04	; 4
   1954a:	52 ff       	sbrs	r21, 2
   1954c:	20 c0       	rjmp	.+64     	; 0x1958e <lif_check_dir+0x362>
   1954e:	c9 01       	movw	r24, r18
   19550:	a0 e0       	ldi	r26, 0x00	; 0
   19552:	b0 e0       	ldi	r27, 0x00	; 0
   19554:	ed b7       	in	r30, 0x3d	; 61
   19556:	fe b7       	in	r31, 0x3e	; 62
   19558:	86 83       	std	Z+6, r24	; 0x06
   1955a:	97 83       	std	Z+7, r25	; 0x07
   1955c:	a0 87       	std	Z+8, r26	; 0x08
   1955e:	b1 87       	std	Z+9, r27	; 0x09
   19560:	ec 89       	ldd	r30, Y+20	; 0x14
   19562:	fd 89       	ldd	r31, Y+21	; 0x15
   19564:	80 81       	ld	r24, Z
   19566:	91 81       	ldd	r25, Z+1	; 0x01
   19568:	ed b7       	in	r30, 0x3d	; 61
   1956a:	fe b7       	in	r31, 0x3e	; 62
   1956c:	95 83       	std	Z+5, r25	; 0x05
   1956e:	84 83       	std	Z+4, r24	; 0x04
   19570:	86 e2       	ldi	r24, 0x26	; 38
   19572:	9e e3       	ldi	r25, 0x3E	; 62
   19574:	a0 e0       	ldi	r26, 0x00	; 0
   19576:	81 83       	std	Z+1, r24	; 0x01
   19578:	92 83       	std	Z+2, r25	; 0x02
   1957a:	a3 83       	std	Z+3, r26	; 0x03
   1957c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   19580:	80 e0       	ldi	r24, 0x00	; 0
   19582:	90 e0       	ldi	r25, 0x00	; 0
   19584:	04 c0       	rjmp	.+8      	; 0x1958e <lif_check_dir+0x362>
   19586:	81 e0       	ldi	r24, 0x01	; 1
   19588:	90 e0       	ldi	r25, 0x00	; 0
   1958a:	01 c0       	rjmp	.+2      	; 0x1958e <lif_check_dir+0x362>
   1958c:	c8 01       	movw	r24, r16
   1958e:	65 96       	adiw	r28, 0x15	; 21
   19590:	e2 e1       	ldi	r30, 0x12	; 18
   19592:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

00019596 <lif_close_volume>:
   19596:	cf 93       	push	r28
   19598:	df 93       	push	r29
   1959a:	00 97       	sbiw	r24, 0x00	; 0
   1959c:	f9 f0       	breq	.+62     	; 0x195dc <lif_close_volume+0x46>
   1959e:	ec 01       	movw	r28, r24
   195a0:	8a 81       	ldd	r24, Y+2	; 0x02
   195a2:	9b 81       	ldd	r25, Y+3	; 0x03
   195a4:	00 97       	sbiw	r24, 0x00	; 0
   195a6:	79 f0       	breq	.+30     	; 0x195c6 <lif_close_volume+0x30>
   195a8:	22 e0       	ldi	r18, 0x02	; 2
   195aa:	30 e0       	ldi	r19, 0x00	; 0
   195ac:	40 e0       	ldi	r20, 0x00	; 0
   195ae:	50 e0       	ldi	r21, 0x00	; 0
   195b0:	ba 01       	movw	r22, r20
   195b2:	0e 94 36 7b 	call	0xf66c	; 0xf66c <fseek>
   195b6:	8a 81       	ldd	r24, Y+2	; 0x02
   195b8:	9b 81       	ldd	r25, Y+3	; 0x03
   195ba:	0e 94 1e 7d 	call	0xfa3c	; 0xfa3c <fclose>
   195be:	1b 82       	std	Y+3, r1	; 0x03
   195c0:	1a 82       	std	Y+2, r1	; 0x02
   195c2:	0e 94 19 7c 	call	0xf832	; 0xf832 <sync>
   195c6:	88 81       	ld	r24, Y
   195c8:	99 81       	ldd	r25, Y+1	; 0x01
   195ca:	00 97       	sbiw	r24, 0x00	; 0
   195cc:	11 f0       	breq	.+4      	; 0x195d2 <lif_close_volume+0x3c>
   195ce:	0e 94 47 c1 	call	0x1828e	; 0x1828e <lif_free>
   195d2:	ce 01       	movw	r24, r28
   195d4:	73 db       	rcall	.-2330   	; 0x18cbc <lif_vol_clear>
   195d6:	ce 01       	movw	r24, r28
   195d8:	0e 94 47 c1 	call	0x1828e	; 0x1828e <lif_free>
   195dc:	df 91       	pop	r29
   195de:	cf 91       	pop	r28
   195e0:	08 95       	ret

000195e2 <lif_checkdirindex>:
   195e2:	cf 92       	push	r12
   195e4:	df 92       	push	r13
   195e6:	ef 92       	push	r14
   195e8:	ff 92       	push	r15
   195ea:	cf 93       	push	r28
   195ec:	df 93       	push	r29
   195ee:	ad b7       	in	r26, 0x3d	; 61
   195f0:	be b7       	in	r27, 0x3e	; 62
   195f2:	17 97       	sbiw	r26, 0x07	; 7
   195f4:	0f b6       	in	r0, 0x3f	; 63
   195f6:	f8 94       	cli
   195f8:	be bf       	out	0x3e, r27	; 62
   195fa:	0f be       	out	0x3f, r0	; 63
   195fc:	ad bf       	out	0x3d, r26	; 61
   195fe:	9b 01       	movw	r18, r22
   19600:	77 fd       	sbrc	r23, 7
   19602:	25 c0       	rjmp	.+74     	; 0x1964e <lif_checkdirindex+0x6c>
   19604:	ab 01       	movw	r20, r22
   19606:	77 0f       	add	r23, r23
   19608:	66 0b       	sbc	r22, r22
   1960a:	77 0b       	sbc	r23, r23
   1960c:	e5 e0       	ldi	r30, 0x05	; 5
   1960e:	44 0f       	add	r20, r20
   19610:	55 1f       	adc	r21, r21
   19612:	66 1f       	adc	r22, r22
   19614:	77 1f       	adc	r23, r23
   19616:	ea 95       	dec	r30
   19618:	d1 f7       	brne	.-12     	; 0x1960e <lif_checkdirindex+0x2c>
   1961a:	c5 2e       	mov	r12, r21
   1961c:	d6 2e       	mov	r13, r22
   1961e:	e7 2e       	mov	r14, r23
   19620:	ff 24       	eor	r15, r15
   19622:	55 27       	eor	r21, r21
   19624:	66 27       	eor	r22, r22
   19626:	77 27       	eor	r23, r23
   19628:	45 2b       	or	r20, r21
   1962a:	46 2b       	or	r20, r22
   1962c:	47 2b       	or	r20, r23
   1962e:	29 f0       	breq	.+10     	; 0x1963a <lif_checkdirindex+0x58>
   19630:	4f ef       	ldi	r20, 0xFF	; 255
   19632:	c4 1a       	sub	r12, r20
   19634:	d4 0a       	sbc	r13, r20
   19636:	e4 0a       	sbc	r14, r20
   19638:	f4 0a       	sbc	r15, r20
   1963a:	fc 01       	movw	r30, r24
   1963c:	45 a9       	ldd	r20, Z+53	; 0x35
   1963e:	56 a9       	ldd	r21, Z+54	; 0x36
   19640:	67 a9       	ldd	r22, Z+55	; 0x37
   19642:	70 ad       	ldd	r23, Z+56	; 0x38
   19644:	4c 15       	cp	r20, r12
   19646:	5d 05       	cpc	r21, r13
   19648:	6e 05       	cpc	r22, r14
   1964a:	7f 05       	cpc	r23, r15
   1964c:	08 f5       	brcc	.+66     	; 0x19690 <lif_checkdirindex+0xae>
   1964e:	ec 01       	movw	r28, r24
   19650:	ed b7       	in	r30, 0x3d	; 61
   19652:	fe b7       	in	r31, 0x3e	; 62
   19654:	37 83       	std	Z+7, r19	; 0x07
   19656:	26 83       	std	Z+6, r18	; 0x06
   19658:	88 81       	ld	r24, Y
   1965a:	99 81       	ldd	r25, Y+1	; 0x01
   1965c:	95 83       	std	Z+5, r25	; 0x05
   1965e:	84 83       	std	Z+4, r24	; 0x04
   19660:	83 e6       	ldi	r24, 0x63	; 99
   19662:	9d e3       	ldi	r25, 0x3D	; 61
   19664:	a0 e0       	ldi	r26, 0x00	; 0
   19666:	81 83       	std	Z+1, r24	; 0x01
   19668:	92 83       	std	Z+2, r25	; 0x02
   1966a:	a3 83       	std	Z+3, r26	; 0x03
   1966c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   19670:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19674:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19678:	c9 01       	movw	r24, r18
   1967a:	88 27       	eor	r24, r24
   1967c:	94 70       	andi	r25, 0x04	; 4
   1967e:	32 ff       	sbrs	r19, 2
   19680:	09 c0       	rjmp	.+18     	; 0x19694 <lif_checkdirindex+0xb2>
   19682:	60 ef       	ldi	r22, 0xF0	; 240
   19684:	75 e1       	ldi	r23, 0x15	; 21
   19686:	ce 01       	movw	r24, r28
   19688:	20 db       	rcall	.-2496   	; 0x18cca <lif_dump_vol>
   1968a:	80 e0       	ldi	r24, 0x00	; 0
   1968c:	90 e0       	ldi	r25, 0x00	; 0
   1968e:	02 c0       	rjmp	.+4      	; 0x19694 <lif_checkdirindex+0xb2>
   19690:	81 e0       	ldi	r24, 0x01	; 1
   19692:	90 e0       	ldi	r25, 0x00	; 0
   19694:	ad b7       	in	r26, 0x3d	; 61
   19696:	be b7       	in	r27, 0x3e	; 62
   19698:	17 96       	adiw	r26, 0x07	; 7
   1969a:	0f b6       	in	r0, 0x3f	; 63
   1969c:	f8 94       	cli
   1969e:	be bf       	out	0x3e, r27	; 62
   196a0:	0f be       	out	0x3f, r0	; 63
   196a2:	ad bf       	out	0x3d, r26	; 61
   196a4:	df 91       	pop	r29
   196a6:	cf 91       	pop	r28
   196a8:	ff 90       	pop	r15
   196aa:	ef 90       	pop	r14
   196ac:	df 90       	pop	r13
   196ae:	cf 90       	pop	r12
   196b0:	08 95       	ret

000196b2 <lif_readdirindex>:
   196b2:	a5 e2       	ldi	r26, 0x25	; 37
   196b4:	b0 e0       	ldi	r27, 0x00	; 0
   196b6:	ef e5       	ldi	r30, 0x5F	; 95
   196b8:	fb ec       	ldi	r31, 0xCB	; 203
   196ba:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
   196be:	7c 01       	movw	r14, r24
   196c0:	6b 01       	movw	r12, r22
   196c2:	8f df       	rcall	.-226    	; 0x195e2 <lif_checkdirindex>
   196c4:	89 2b       	or	r24, r25
   196c6:	19 f4       	brne	.+6      	; 0x196ce <lif_readdirindex+0x1c>
   196c8:	00 e0       	ldi	r16, 0x00	; 0
   196ca:	10 e0       	ldi	r17, 0x00	; 0
   196cc:	54 c0       	rjmp	.+168    	; 0x19776 <lif_readdirindex+0xc4>
   196ce:	f7 01       	movw	r30, r14
   196d0:	85 a5       	ldd	r24, Z+45	; 0x2d
   196d2:	96 a5       	ldd	r25, Z+46	; 0x2e
   196d4:	a7 a5       	ldd	r26, Z+47	; 0x2f
   196d6:	b0 a9       	ldd	r27, Z+48	; 0x30
   196d8:	44 27       	eor	r20, r20
   196da:	58 2f       	mov	r21, r24
   196dc:	69 2f       	mov	r22, r25
   196de:	7a 2f       	mov	r23, r26
   196e0:	c6 01       	movw	r24, r12
   196e2:	0d 2c       	mov	r0, r13
   196e4:	00 0c       	add	r0, r0
   196e6:	aa 0b       	sbc	r26, r26
   196e8:	bb 0b       	sbc	r27, r27
   196ea:	35 e0       	ldi	r19, 0x05	; 5
   196ec:	88 0f       	add	r24, r24
   196ee:	99 1f       	adc	r25, r25
   196f0:	aa 1f       	adc	r26, r26
   196f2:	bb 1f       	adc	r27, r27
   196f4:	3a 95       	dec	r19
   196f6:	d1 f7       	brne	.-12     	; 0x196ec <lif_readdirindex+0x3a>
   196f8:	9a 01       	movw	r18, r20
   196fa:	ab 01       	movw	r20, r22
   196fc:	28 0f       	add	r18, r24
   196fe:	39 1f       	adc	r19, r25
   19700:	4a 1f       	adc	r20, r26
   19702:	5b 1f       	adc	r21, r27
   19704:	00 e2       	ldi	r16, 0x20	; 32
   19706:	10 e0       	ldi	r17, 0x00	; 0
   19708:	be 01       	movw	r22, r28
   1970a:	6a 5f       	subi	r22, 0xFA	; 250
   1970c:	7f 4f       	sbci	r23, 0xFF	; 255
   1970e:	c7 01       	movw	r24, r14
   19710:	0e 94 ff c1 	call	0x183fe	; 0x183fe <lif_read>
   19714:	60 32       	cpi	r22, 0x20	; 32
   19716:	71 05       	cpc	r23, r1
   19718:	81 05       	cpc	r24, r1
   1971a:	91 05       	cpc	r25, r1
   1971c:	a8 f2       	brcs	.-86     	; 0x196c8 <lif_readdirindex+0x16>
   1971e:	b7 01       	movw	r22, r14
   19720:	ce 01       	movw	r24, r28
   19722:	06 96       	adiw	r24, 0x06	; 6
   19724:	75 d9       	rcall	.-3350   	; 0x18a10 <lif_str2dir>
   19726:	f7 01       	movw	r30, r14
   19728:	e6 5a       	subi	r30, 0xA6	; 166
   1972a:	ff 4f       	sbci	r31, 0xFF	; 255
   1972c:	80 81       	ld	r24, Z
   1972e:	91 81       	ldd	r25, Z+1	; 0x01
   19730:	01 96       	adiw	r24, 0x01	; 1
   19732:	19 f4       	brne	.+6      	; 0x1973a <lif_readdirindex+0x88>
   19734:	f7 01       	movw	r30, r14
   19736:	d3 a2       	std	Z+35, r13	; 0x23
   19738:	c2 a2       	std	Z+34, r12	; 0x22
   1973a:	c7 01       	movw	r24, r14
   1973c:	77 dd       	rcall	.-1298   	; 0x1922c <lif_check_dir>
   1973e:	8c 01       	movw	r16, r24
   19740:	89 2b       	or	r24, r25
   19742:	b9 f4       	brne	.+46     	; 0x19772 <lif_readdirindex+0xc0>
   19744:	ed b7       	in	r30, 0x3d	; 61
   19746:	fe b7       	in	r31, 0x3e	; 62
   19748:	d5 82       	std	Z+5, r13	; 0x05
   1974a:	c4 82       	std	Z+4, r12	; 0x04
   1974c:	83 e4       	ldi	r24, 0x43	; 67
   1974e:	9d e3       	ldi	r25, 0x3D	; 61
   19750:	a0 e0       	ldi	r26, 0x00	; 0
   19752:	81 83       	std	Z+1, r24	; 0x01
   19754:	92 83       	std	Z+2, r25	; 0x02
   19756:	a3 83       	std	Z+3, r26	; 0x03
   19758:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1975c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19760:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19764:	92 ff       	sbrs	r25, 2
   19766:	b0 cf       	rjmp	.-160    	; 0x196c8 <lif_readdirindex+0x16>
   19768:	61 e0       	ldi	r22, 0x01	; 1
   1976a:	76 e1       	ldi	r23, 0x16	; 22
   1976c:	c7 01       	movw	r24, r14
   1976e:	ad da       	rcall	.-2726   	; 0x18cca <lif_dump_vol>
   19770:	02 c0       	rjmp	.+4      	; 0x19776 <lif_readdirindex+0xc4>
   19772:	01 e0       	ldi	r16, 0x01	; 1
   19774:	10 e0       	ldi	r17, 0x00	; 0
   19776:	c8 01       	movw	r24, r16
   19778:	a5 96       	adiw	r28, 0x25	; 37
   1977a:	e8 e0       	ldi	r30, 0x08	; 8
   1977c:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

00019780 <lif_writedirindex>:
   19780:	a0 e2       	ldi	r26, 0x20	; 32
   19782:	b0 e0       	ldi	r27, 0x00	; 0
   19784:	e6 ec       	ldi	r30, 0xC6	; 198
   19786:	fb ec       	ldi	r31, 0xCB	; 203
   19788:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
   1978c:	5c 01       	movw	r10, r24
   1978e:	6b 01       	movw	r12, r22
   19790:	4d dd       	rcall	.-1382   	; 0x1922c <lif_check_dir>
   19792:	7c 01       	movw	r14, r24
   19794:	89 2b       	or	r24, r25
   19796:	71 f4       	brne	.+28     	; 0x197b4 <lif_writedirindex+0x34>
   19798:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1979c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   197a0:	92 fd       	sbrc	r25, 2
   197a2:	03 c0       	rjmp	.+6      	; 0x197aa <lif_writedirindex+0x2a>
   197a4:	e1 2c       	mov	r14, r1
   197a6:	f1 2c       	mov	r15, r1
   197a8:	42 c0       	rjmp	.+132    	; 0x1982e <lif_writedirindex+0xae>
   197aa:	62 e1       	ldi	r22, 0x12	; 18
   197ac:	76 e1       	ldi	r23, 0x16	; 22
   197ae:	c5 01       	movw	r24, r10
   197b0:	8c da       	rcall	.-2792   	; 0x18cca <lif_dump_vol>
   197b2:	3d c0       	rjmp	.+122    	; 0x1982e <lif_writedirindex+0xae>
   197b4:	b6 01       	movw	r22, r12
   197b6:	c5 01       	movw	r24, r10
   197b8:	14 df       	rcall	.-472    	; 0x195e2 <lif_checkdirindex>
   197ba:	89 2b       	or	r24, r25
   197bc:	99 f3       	breq	.-26     	; 0x197a4 <lif_writedirindex+0x24>
   197be:	f5 01       	movw	r30, r10
   197c0:	e6 5a       	subi	r30, 0xA6	; 166
   197c2:	ff 4f       	sbci	r31, 0xFF	; 255
   197c4:	80 81       	ld	r24, Z
   197c6:	91 81       	ldd	r25, Z+1	; 0x01
   197c8:	01 96       	adiw	r24, 0x01	; 1
   197ca:	19 f4       	brne	.+6      	; 0x197d2 <lif_writedirindex+0x52>
   197cc:	f5 01       	movw	r30, r10
   197ce:	d3 a2       	std	Z+35, r13	; 0x23
   197d0:	c2 a2       	std	Z+34, r12	; 0x22
   197d2:	f5 01       	movw	r30, r10
   197d4:	85 a5       	ldd	r24, Z+45	; 0x2d
   197d6:	96 a5       	ldd	r25, Z+46	; 0x2e
   197d8:	a7 a5       	ldd	r26, Z+47	; 0x2f
   197da:	b0 a9       	ldd	r27, Z+48	; 0x30
   197dc:	ba 2f       	mov	r27, r26
   197de:	a9 2f       	mov	r26, r25
   197e0:	98 2f       	mov	r25, r24
   197e2:	88 27       	eor	r24, r24
   197e4:	0d 2c       	mov	r0, r13
   197e6:	00 0c       	add	r0, r0
   197e8:	ee 08       	sbc	r14, r14
   197ea:	ff 08       	sbc	r15, r15
   197ec:	35 e0       	ldi	r19, 0x05	; 5
   197ee:	cc 0c       	add	r12, r12
   197f0:	dd 1c       	adc	r13, r13
   197f2:	ee 1c       	adc	r14, r14
   197f4:	ff 1c       	adc	r15, r15
   197f6:	3a 95       	dec	r19
   197f8:	d1 f7       	brne	.-12     	; 0x197ee <lif_writedirindex+0x6e>
   197fa:	c8 0e       	add	r12, r24
   197fc:	d9 1e       	adc	r13, r25
   197fe:	ea 1e       	adc	r14, r26
   19800:	fb 1e       	adc	r15, r27
   19802:	be 01       	movw	r22, r28
   19804:	6f 5f       	subi	r22, 0xFF	; 255
   19806:	7f 4f       	sbci	r23, 0xFF	; 255
   19808:	c5 01       	movw	r24, r10
   1980a:	97 d8       	rcall	.-3794   	; 0x1893a <lif_dir2str>
   1980c:	00 e2       	ldi	r16, 0x20	; 32
   1980e:	10 e0       	ldi	r17, 0x00	; 0
   19810:	a7 01       	movw	r20, r14
   19812:	96 01       	movw	r18, r12
   19814:	be 01       	movw	r22, r28
   19816:	6f 5f       	subi	r22, 0xFF	; 255
   19818:	7f 4f       	sbci	r23, 0xFF	; 255
   1981a:	c5 01       	movw	r24, r10
   1981c:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
   19820:	31 e0       	ldi	r19, 0x01	; 1
   19822:	20 e0       	ldi	r18, 0x00	; 0
   19824:	80 97       	sbiw	r24, 0x20	; 32
   19826:	0c f4       	brge	.+2      	; 0x1982a <lif_writedirindex+0xaa>
   19828:	30 e0       	ldi	r19, 0x00	; 0
   1982a:	e3 2e       	mov	r14, r19
   1982c:	f2 2e       	mov	r15, r18
   1982e:	c7 01       	movw	r24, r14
   19830:	a0 96       	adiw	r28, 0x20	; 32
   19832:	ea e0       	ldi	r30, 0x0A	; 10
   19834:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

00019838 <lif_writedirEOF>:
   19838:	0f 93       	push	r16
   1983a:	1f 93       	push	r17
   1983c:	cf 93       	push	r28
   1983e:	df 93       	push	r29
   19840:	ec 01       	movw	r28, r24
   19842:	8b 01       	movw	r16, r22
   19844:	33 da       	rcall	.-2970   	; 0x18cac <lif_dir_clear>
   19846:	fe 01       	movw	r30, r28
   19848:	e6 5a       	subi	r30, 0xA6	; 166
   1984a:	ff 4f       	sbci	r31, 0xFF	; 255
   1984c:	8f ef       	ldi	r24, 0xFF	; 255
   1984e:	9f ef       	ldi	r25, 0xFF	; 255
   19850:	91 83       	std	Z+1, r25	; 0x01
   19852:	80 83       	st	Z, r24
   19854:	1b a3       	std	Y+35, r17	; 0x23
   19856:	0a a3       	std	Y+34, r16	; 0x22
   19858:	b8 01       	movw	r22, r16
   1985a:	ce 01       	movw	r24, r28
   1985c:	91 df       	rcall	.-222    	; 0x19780 <lif_writedirindex>
   1985e:	df 91       	pop	r29
   19860:	cf 91       	pop	r28
   19862:	1f 91       	pop	r17
   19864:	0f 91       	pop	r16
   19866:	08 95       	ret

00019868 <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   19868:	2f 92       	push	r2
   1986a:	3f 92       	push	r3
   1986c:	4f 92       	push	r4
   1986e:	5f 92       	push	r5
   19870:	6f 92       	push	r6
   19872:	7f 92       	push	r7
   19874:	8f 92       	push	r8
   19876:	af 92       	push	r10
   19878:	bf 92       	push	r11
   1987a:	cf 92       	push	r12
   1987c:	df 92       	push	r13
   1987e:	ef 92       	push	r14
   19880:	ff 92       	push	r15
   19882:	0f 93       	push	r16
   19884:	1f 93       	push	r17
   19886:	cf 93       	push	r28
   19888:	df 93       	push	r29
   1988a:	cd b7       	in	r28, 0x3d	; 61
   1988c:	de b7       	in	r29, 0x3e	; 62
   1988e:	2f 97       	sbiw	r28, 0x0f	; 15
   19890:	0f b6       	in	r0, 0x3f	; 63
   19892:	f8 94       	cli
   19894:	de bf       	out	0x3e, r29	; 62
   19896:	0f be       	out	0x3f, r0	; 63
   19898:	cd bf       	out	0x3d, r28	; 61
   1989a:	9f 87       	std	Y+15, r25	; 0x0f
   1989c:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   1989e:	fc 01       	movw	r30, r24
   198a0:	24 84       	ldd	r2, Z+12	; 0x0c
   198a2:	35 84       	ldd	r3, Z+13	; 0x0d
   198a4:	46 84       	ldd	r4, Z+14	; 0x0e
   198a6:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   198a8:	80 89       	ldd	r24, Z+16	; 0x10
   198aa:	91 89       	ldd	r25, Z+17	; 0x11
   198ac:	a2 89       	ldd	r26, Z+18	; 0x12
   198ae:	b3 89       	ldd	r27, Z+19	; 0x13
   198b0:	80 8f       	std	Z+24, r24	; 0x18
   198b2:	91 8f       	std	Z+25, r25	; 0x19
   198b4:	a2 8f       	std	Z+26, r26	; 0x1a
   198b6:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   198b8:	14 8a       	std	Z+20, r1	; 0x14
   198ba:	15 8a       	std	Z+21, r1	; 0x15
   198bc:	16 8a       	std	Z+22, r1	; 0x16
   198be:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   198c0:	17 8e       	std	Z+31, r1	; 0x1f
   198c2:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   198c4:	15 8e       	std	Z+29, r1	; 0x1d
   198c6:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   198c8:	11 a2       	std	Z+33, r1	; 0x21
   198ca:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   198cc:	13 a2       	std	Z+35, r1	; 0x23
   198ce:	12 a2       	std	Z+34, r1	; 0x22
   198d0:	cc 24       	eor	r12, r12
   198d2:	c3 94       	inc	r12
   198d4:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   198d6:	0f ef       	ldi	r16, 0xFF	; 255
   198d8:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   198da:	e6 5a       	subi	r30, 0xA6	; 166
   198dc:	ff 4f       	sbci	r31, 0xFF	; 255
   198de:	f9 87       	std	Y+9, r31	; 0x09
   198e0:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   198e2:	ae 84       	ldd	r10, Y+14	; 0x0e
   198e4:	bf 84       	ldd	r11, Y+15	; 0x0f
   198e6:	fc e5       	ldi	r31, 0x5C	; 92
   198e8:	af 0e       	add	r10, r31
   198ea:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   198ec:	8e 85       	ldd	r24, Y+14	; 0x0e
   198ee:	9f 85       	ldd	r25, Y+15	; 0x0f
   198f0:	80 5a       	subi	r24, 0xA0	; 160
   198f2:	9f 4f       	sbci	r25, 0xFF	; 255
   198f4:	9b 87       	std	Y+11, r25	; 0x0b
   198f6:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   198f8:	ee 85       	ldd	r30, Y+14	; 0x0e
   198fa:	ff 85       	ldd	r31, Y+15	; 0x0f
   198fc:	e1 5b       	subi	r30, 0xB1	; 177
   198fe:	ff 4f       	sbci	r31, 0xFF	; 255
   19900:	fd 87       	std	Y+13, r31	; 0x0d
   19902:	ec 87       	std	Y+12, r30	; 0x0c
   19904:	86 ef       	ldi	r24, 0xF6	; 246
   19906:	9c e3       	ldi	r25, 0x3C	; 60
   19908:	3c 01       	movw	r6, r24
   1990a:	81 2c       	mov	r8, r1
   1990c:	76 01       	movw	r14, r12
   1990e:	21 e0       	ldi	r18, 0x01	; 1
   19910:	e2 1a       	sub	r14, r18
   19912:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19914:	b7 01       	movw	r22, r14
   19916:	8e 85       	ldd	r24, Y+14	; 0x0e
   19918:	9f 85       	ldd	r25, Y+15	; 0x0f
   1991a:	cb de       	rcall	.-618    	; 0x196b2 <lif_readdirindex>
   1991c:	89 2b       	or	r24, r25
   1991e:	19 f4       	brne	.+6      	; 0x19926 <lif_updatefree+0xbe>
        {
            return(NULL);
   19920:	80 e0       	ldi	r24, 0x00	; 0
   19922:	90 e0       	ldi	r25, 0x00	; 0
   19924:	93 c0       	rjmp	.+294    	; 0x19a4c <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   19926:	e8 85       	ldd	r30, Y+8	; 0x08
   19928:	f9 85       	ldd	r31, Y+9	; 0x09
   1992a:	80 81       	ld	r24, Z
   1992c:	91 81       	ldd	r25, Z+1	; 0x01
   1992e:	8f 3f       	cpi	r24, 0xFF	; 255
   19930:	ff ef       	ldi	r31, 0xFF	; 255
   19932:	9f 07       	cpc	r25, r31
   19934:	c1 f4       	brne	.+48     	; 0x19966 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   19936:	ee 85       	ldd	r30, Y+14	; 0x0e
   19938:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   1993a:	0f 3f       	cpi	r16, 0xFF	; 255
   1993c:	2f ef       	ldi	r18, 0xFF	; 255
   1993e:	12 07       	cpc	r17, r18
   19940:	09 f4       	brne	.+2      	; 0x19944 <lif_updatefree+0xdc>
   19942:	7a c0       	rjmp	.+244    	; 0x19a38 <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   19944:	13 a3       	std	Z+35, r17	; 0x23
   19946:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   19948:	e0 1a       	sub	r14, r16
   1994a:	f1 0a       	sbc	r15, r17
   1994c:	86 8d       	ldd	r24, Z+30	; 0x1e
   1994e:	97 8d       	ldd	r25, Z+31	; 0x1f
   19950:	8e 19       	sub	r24, r14
   19952:	9f 09       	sbc	r25, r15
   19954:	97 8f       	std	Z+31, r25	; 0x1f
   19956:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   19958:	b8 01       	movw	r22, r16
   1995a:	cf 01       	movw	r24, r30
   1995c:	6d df       	rcall	.-294    	; 0x19838 <lif_writedirEOF>
   1995e:	89 2b       	or	r24, r25
   19960:	09 f0       	breq	.+2      	; 0x19964 <lif_updatefree+0xfc>
   19962:	6c c0       	rjmp	.+216    	; 0x19a3c <lif_updatefree+0x1d4>
   19964:	dd cf       	rjmp	.-70     	; 0x19920 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   19966:	89 2b       	or	r24, r25
   19968:	81 f4       	brne	.+32     	; 0x1998a <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   1996a:	0f 3f       	cpi	r16, 0xFF	; 255
   1996c:	ff ef       	ldi	r31, 0xFF	; 255
   1996e:	1f 07       	cpc	r17, r31
   19970:	09 f4       	brne	.+2      	; 0x19974 <lif_updatefree+0x10c>
   19972:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   19974:	ee 85       	ldd	r30, Y+14	; 0x0e
   19976:	ff 85       	ldd	r31, Y+15	; 0x0f
   19978:	86 8d       	ldd	r24, Z+30	; 0x1e
   1997a:	97 8d       	ldd	r25, Z+31	; 0x1f
   1997c:	01 96       	adiw	r24, 0x01	; 1
   1997e:	97 8f       	std	Z+31, r25	; 0x1f
   19980:	86 8f       	std	Z+30, r24	; 0x1e
   19982:	ff ef       	ldi	r31, 0xFF	; 255
   19984:	cf 1a       	sub	r12, r31
   19986:	df 0a       	sbc	r13, r31
   19988:	c1 cf       	rjmp	.-126    	; 0x1990c <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   1998a:	f5 01       	movw	r30, r10
   1998c:	80 81       	ld	r24, Z
   1998e:	91 81       	ldd	r25, Z+1	; 0x01
   19990:	a2 81       	ldd	r26, Z+2	; 0x02
   19992:	b3 81       	ldd	r27, Z+3	; 0x03
   19994:	82 15       	cp	r24, r2
   19996:	93 05       	cpc	r25, r3
   19998:	a4 05       	cpc	r26, r4
   1999a:	b5 05       	cpc	r27, r5
   1999c:	c8 f4       	brcc	.+50     	; 0x199d0 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   1999e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   199a2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   199a6:	92 ff       	sbrs	r25, 2
   199a8:	13 c0       	rjmp	.+38     	; 0x199d0 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   199aa:	8c 85       	ldd	r24, Y+12	; 0x0c
   199ac:	9d 85       	ldd	r25, Y+13	; 0x0d
   199ae:	ed b7       	in	r30, 0x3d	; 61
   199b0:	fe b7       	in	r31, 0x3e	; 62
   199b2:	97 83       	std	Z+7, r25	; 0x07
   199b4:	86 83       	std	Z+6, r24	; 0x06
   199b6:	ee 85       	ldd	r30, Y+14	; 0x0e
   199b8:	ff 85       	ldd	r31, Y+15	; 0x0f
   199ba:	80 81       	ld	r24, Z
   199bc:	91 81       	ldd	r25, Z+1	; 0x01
   199be:	ed b7       	in	r30, 0x3d	; 61
   199c0:	fe b7       	in	r31, 0x3e	; 62
   199c2:	95 83       	std	Z+5, r25	; 0x05
   199c4:	84 83       	std	Z+4, r24	; 0x04
   199c6:	61 82       	std	Z+1, r6	; 0x01
   199c8:	72 82       	std	Z+2, r7	; 0x02
   199ca:	83 82       	std	Z+3, r8	; 0x03
   199cc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   199d0:	ea 85       	ldd	r30, Y+10	; 0x0a
   199d2:	fb 85       	ldd	r31, Y+11	; 0x0b
   199d4:	80 81       	ld	r24, Z
   199d6:	91 81       	ldd	r25, Z+1	; 0x01
   199d8:	a2 81       	ldd	r26, Z+2	; 0x02
   199da:	b3 81       	ldd	r27, Z+3	; 0x03
   199dc:	ee 85       	ldd	r30, Y+14	; 0x0e
   199de:	ff 85       	ldd	r31, Y+15	; 0x0f
   199e0:	44 89       	ldd	r20, Z+20	; 0x14
   199e2:	55 89       	ldd	r21, Z+21	; 0x15
   199e4:	66 89       	ldd	r22, Z+22	; 0x16
   199e6:	77 89       	ldd	r23, Z+23	; 0x17
   199e8:	48 0f       	add	r20, r24
   199ea:	59 1f       	adc	r21, r25
   199ec:	6a 1f       	adc	r22, r26
   199ee:	7b 1f       	adc	r23, r27
   199f0:	44 8b       	std	Z+20, r20	; 0x14
   199f2:	55 8b       	std	Z+21, r21	; 0x15
   199f4:	66 8b       	std	Z+22, r22	; 0x16
   199f6:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   199f8:	40 8d       	ldd	r20, Z+24	; 0x18
   199fa:	51 8d       	ldd	r21, Z+25	; 0x19
   199fc:	62 8d       	ldd	r22, Z+26	; 0x1a
   199fe:	73 8d       	ldd	r23, Z+27	; 0x1b
   19a00:	48 1b       	sub	r20, r24
   19a02:	59 0b       	sbc	r21, r25
   19a04:	6a 0b       	sbc	r22, r26
   19a06:	7b 0b       	sbc	r23, r27
   19a08:	40 8f       	std	Z+24, r20	; 0x18
   19a0a:	51 8f       	std	Z+25, r21	; 0x19
   19a0c:	62 8f       	std	Z+26, r22	; 0x1a
   19a0e:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19a10:	24 8d       	ldd	r18, Z+28	; 0x1c
   19a12:	35 8d       	ldd	r19, Z+29	; 0x1d
   19a14:	2f 5f       	subi	r18, 0xFF	; 255
   19a16:	3f 4f       	sbci	r19, 0xFF	; 255
   19a18:	35 8f       	std	Z+29, r19	; 0x1d
   19a1a:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19a1c:	f5 01       	movw	r30, r10
   19a1e:	40 81       	ld	r20, Z
   19a20:	51 81       	ldd	r21, Z+1	; 0x01
   19a22:	62 81       	ldd	r22, Z+2	; 0x02
   19a24:	73 81       	ldd	r23, Z+3	; 0x03
   19a26:	1c 01       	movw	r2, r24
   19a28:	2d 01       	movw	r4, r26
   19a2a:	24 0e       	add	r2, r20
   19a2c:	35 1e       	adc	r3, r21
   19a2e:	46 1e       	adc	r4, r22
   19a30:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19a32:	0f ef       	ldi	r16, 0xFF	; 255
   19a34:	1f ef       	ldi	r17, 0xFF	; 255
   19a36:	a5 cf       	rjmp	.-182    	; 0x19982 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   19a38:	f3 a2       	std	Z+35, r15	; 0x23
   19a3a:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19a3c:	8f ef       	ldi	r24, 0xFF	; 255
   19a3e:	9f ef       	ldi	r25, 0xFF	; 255
   19a40:	ee 85       	ldd	r30, Y+14	; 0x0e
   19a42:	ff 85       	ldd	r31, Y+15	; 0x0f
   19a44:	91 a3       	std	Z+33, r25	; 0x21
   19a46:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   19a48:	8e 85       	ldd	r24, Y+14	; 0x0e
   19a4a:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   19a4c:	2f 96       	adiw	r28, 0x0f	; 15
   19a4e:	0f b6       	in	r0, 0x3f	; 63
   19a50:	f8 94       	cli
   19a52:	de bf       	out	0x3e, r29	; 62
   19a54:	0f be       	out	0x3f, r0	; 63
   19a56:	cd bf       	out	0x3d, r28	; 61
   19a58:	df 91       	pop	r29
   19a5a:	cf 91       	pop	r28
   19a5c:	1f 91       	pop	r17
   19a5e:	0f 91       	pop	r16
   19a60:	ff 90       	pop	r15
   19a62:	ef 90       	pop	r14
   19a64:	df 90       	pop	r13
   19a66:	cf 90       	pop	r12
   19a68:	bf 90       	pop	r11
   19a6a:	af 90       	pop	r10
   19a6c:	8f 90       	pop	r8
   19a6e:	7f 90       	pop	r7
   19a70:	6f 90       	pop	r6
   19a72:	5f 90       	pop	r5
   19a74:	4f 90       	pop	r4
   19a76:	3f 90       	pop	r3
   19a78:	2f 90       	pop	r2
   19a7a:	08 95       	ret

00019a7c <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19a7c:	a9 e2       	ldi	r26, 0x29	; 41
   19a7e:	b1 e0       	ldi	r27, 0x01	; 1
   19a80:	e4 e4       	ldi	r30, 0x44	; 68
   19a82:	fd ec       	ldi	r31, 0xCD	; 205
   19a84:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   19a88:	4c 01       	movw	r8, r24
   19a8a:	3b 01       	movw	r6, r22
   19a8c:	19 01       	movw	r2, r18
   19a8e:	2a 01       	movw	r4, r20
   19a90:	ca 5d       	subi	r28, 0xDA	; 218
   19a92:	de 4f       	sbci	r29, 0xFE	; 254
   19a94:	e8 82       	st	Y, r14
   19a96:	f9 82       	std	Y+1, r15	; 0x01
   19a98:	0a 83       	std	Y+2, r16	; 0x02
   19a9a:	1b 83       	std	Y+3, r17	; 0x03
   19a9c:	c6 52       	subi	r28, 0x26	; 38
   19a9e:	d1 40       	sbci	r29, 0x01	; 1
   19aa0:	c2 5e       	subi	r28, 0xE2	; 226
   19aa2:	de 4f       	sbci	r29, 0xFE	; 254
   19aa4:	a8 82       	st	Y, r10
   19aa6:	b9 82       	std	Y+1, r11	; 0x01
   19aa8:	ca 82       	std	Y+2, r12	; 0x02
   19aaa:	db 82       	std	Y+3, r13	; 0x03
   19aac:	ce 51       	subi	r28, 0x1E	; 30
   19aae:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19ab0:	80 e0       	ldi	r24, 0x00	; 0
   19ab2:	90 e0       	ldi	r25, 0x00	; 0
   19ab4:	0e 94 34 38 	call	0x7068	; 0x7068 <time>
   19ab8:	5b 01       	movw	r10, r22
   19aba:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19abc:	64 e7       	ldi	r22, 0x74	; 116
   19abe:	70 e0       	ldi	r23, 0x00	; 0
   19ac0:	80 e0       	ldi	r24, 0x00	; 0
   19ac2:	90 e0       	ldi	r25, 0x00	; 0
   19ac4:	0e 94 11 c1 	call	0x18222	; 0x18222 <lif_calloc>
   19ac8:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19aca:	89 2b       	or	r24, r25
   19acc:	09 f4       	brne	.+2      	; 0x19ad0 <lif_create_volume+0x54>
   19ace:	b6 c2       	rjmp	.+1388   	; 0x1a03c <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19ad0:	c2 5e       	subi	r28, 0xE2	; 226
   19ad2:	de 4f       	sbci	r29, 0xFE	; 254
   19ad4:	28 81       	ld	r18, Y
   19ad6:	39 81       	ldd	r19, Y+1	; 0x01
   19ad8:	4a 81       	ldd	r20, Y+2	; 0x02
   19ada:	5b 81       	ldd	r21, Y+3	; 0x03
   19adc:	ce 51       	subi	r28, 0x1E	; 30
   19ade:	d1 40       	sbci	r29, 0x01	; 1
   19ae0:	ed b7       	in	r30, 0x3d	; 61
   19ae2:	fe b7       	in	r31, 0x3e	; 62
   19ae4:	20 8b       	std	Z+16, r18	; 0x10
   19ae6:	31 8b       	std	Z+17, r19	; 0x11
   19ae8:	42 8b       	std	Z+18, r20	; 0x12
   19aea:	53 8b       	std	Z+19, r21	; 0x13
   19aec:	ca 5d       	subi	r28, 0xDA	; 218
   19aee:	de 4f       	sbci	r29, 0xFE	; 254
   19af0:	28 81       	ld	r18, Y
   19af2:	39 81       	ldd	r19, Y+1	; 0x01
   19af4:	4a 81       	ldd	r20, Y+2	; 0x02
   19af6:	5b 81       	ldd	r21, Y+3	; 0x03
   19af8:	c6 52       	subi	r28, 0x26	; 38
   19afa:	d1 40       	sbci	r29, 0x01	; 1
   19afc:	24 87       	std	Z+12, r18	; 0x0c
   19afe:	35 87       	std	Z+13, r19	; 0x0d
   19b00:	46 87       	std	Z+14, r20	; 0x0e
   19b02:	57 87       	std	Z+15, r21	; 0x0f
   19b04:	20 86       	std	Z+8, r2	; 0x08
   19b06:	31 86       	std	Z+9, r3	; 0x09
   19b08:	42 86       	std	Z+10, r4	; 0x0a
   19b0a:	53 86       	std	Z+11, r5	; 0x0b
   19b0c:	77 82       	std	Z+7, r7	; 0x07
   19b0e:	66 82       	std	Z+6, r6	; 0x06
   19b10:	95 82       	std	Z+5, r9	; 0x05
   19b12:	84 82       	std	Z+4, r8	; 0x04
   19b14:	81 ed       	ldi	r24, 0xD1	; 209
   19b16:	9d e3       	ldi	r25, 0x3D	; 61
   19b18:	a0 e0       	ldi	r26, 0x00	; 0
   19b1a:	81 83       	std	Z+1, r24	; 0x01
   19b1c:	92 83       	std	Z+2, r25	; 0x02
   19b1e:	a3 83       	std	Z+3, r26	; 0x03
   19b20:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19b24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19b28:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19b2c:	92 ff       	sbrs	r25, 2
   19b2e:	04 c0       	rjmp	.+8      	; 0x19b38 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19b30:	64 e2       	ldi	r22, 0x24	; 36
   19b32:	76 e1       	ldi	r23, 0x16	; 22
   19b34:	c7 01       	movw	r24, r14
   19b36:	c9 d8       	rcall	.-3694   	; 0x18cca <lif_dump_vol>

    lif_image_clear(LIF);
   19b38:	c7 01       	movw	r24, r14
   19b3a:	b2 d8       	rcall	.-3740   	; 0x18ca0 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19b3c:	80 e0       	ldi	r24, 0x00	; 0
   19b3e:	90 e8       	ldi	r25, 0x80	; 128
   19b40:	f7 01       	movw	r30, r14
   19b42:	95 a3       	std	Z+37, r25	; 0x25
   19b44:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19b46:	46 e0       	ldi	r20, 0x06	; 6
   19b48:	50 e0       	ldi	r21, 0x00	; 0
   19b4a:	b3 01       	movw	r22, r6
   19b4c:	c7 01       	movw	r24, r14
   19b4e:	86 96       	adiw	r24, 0x26	; 38
   19b50:	0e 94 54 c3 	call	0x186a8	; 0x186a8 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19b54:	f7 01       	movw	r30, r14
   19b56:	25 a6       	std	Z+45, r2	; 0x2d
   19b58:	36 a6       	std	Z+46, r3	; 0x2e
   19b5a:	47 a6       	std	Z+47, r4	; 0x2f
   19b5c:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19b5e:	ca 5d       	subi	r28, 0xDA	; 218
   19b60:	de 4f       	sbci	r29, 0xFE	; 254
   19b62:	28 81       	ld	r18, Y
   19b64:	39 81       	ldd	r19, Y+1	; 0x01
   19b66:	4a 81       	ldd	r20, Y+2	; 0x02
   19b68:	5b 81       	ldd	r21, Y+3	; 0x03
   19b6a:	c6 52       	subi	r28, 0x26	; 38
   19b6c:	d1 40       	sbci	r29, 0x01	; 1
   19b6e:	25 ab       	std	Z+53, r18	; 0x35
   19b70:	36 ab       	std	Z+54, r19	; 0x36
   19b72:	47 ab       	std	Z+55, r20	; 0x37
   19b74:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19b76:	80 e0       	ldi	r24, 0x00	; 0
   19b78:	90 e1       	ldi	r25, 0x10	; 16
   19b7a:	92 ab       	std	Z+50, r25	; 0x32
   19b7c:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   19b7e:	fd 96       	adiw	r30, 0x3d	; 61
   19b80:	10 82       	st	Z, r1
   19b82:	11 82       	std	Z+1, r1	; 0x01
   19b84:	12 82       	std	Z+2, r1	; 0x02
   19b86:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19b88:	34 96       	adiw	r30, 0x04	; 4
   19b8a:	10 82       	st	Z, r1
   19b8c:	11 82       	std	Z+1, r1	; 0x01
   19b8e:	12 82       	std	Z+2, r1	; 0x02
   19b90:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19b92:	34 96       	adiw	r30, 0x04	; 4
   19b94:	10 82       	st	Z, r1
   19b96:	11 82       	std	Z+1, r1	; 0x01
   19b98:	12 82       	std	Z+2, r1	; 0x02
   19b9a:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19b9c:	a7 01       	movw	r20, r14
   19b9e:	47 5b       	subi	r20, 0xB7	; 183
   19ba0:	5f 4f       	sbci	r21, 0xFF	; 255
   19ba2:	c6 01       	movw	r24, r12
   19ba4:	b5 01       	movw	r22, r10
   19ba6:	0e 94 79 c5 	call	0x18af2	; 0x18af2 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19baa:	c4 01       	movw	r24, r8
   19bac:	0e 94 5c c1 	call	0x182b8	; 0x182b8 <lif_stralloc>
   19bb0:	d7 01       	movw	r26, r14
   19bb2:	8d 93       	st	X+, r24
   19bb4:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19bb6:	89 2b       	or	r24, r25
   19bb8:	09 f4       	brne	.+2      	; 0x19bbc <lif_create_volume+0x140>
   19bba:	35 c2       	rjmp	.+1130   	; 0x1a026 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19bbc:	c2 5e       	subi	r28, 0xE2	; 226
   19bbe:	de 4f       	sbci	r29, 0xFE	; 254
   19bc0:	28 81       	ld	r18, Y
   19bc2:	39 81       	ldd	r19, Y+1	; 0x01
   19bc4:	4a 81       	ldd	r20, Y+2	; 0x02
   19bc6:	5b 81       	ldd	r21, Y+3	; 0x03
   19bc8:	ce 51       	subi	r28, 0x1E	; 30
   19bca:	d1 40       	sbci	r29, 0x01	; 1
   19bcc:	f7 01       	movw	r30, r14
   19bce:	20 8b       	std	Z+16, r18	; 0x10
   19bd0:	31 8b       	std	Z+17, r19	; 0x11
   19bd2:	42 8b       	std	Z+18, r20	; 0x12
   19bd4:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19bd6:	ca 5d       	subi	r28, 0xDA	; 218
   19bd8:	de 4f       	sbci	r29, 0xFE	; 254
   19bda:	88 81       	ld	r24, Y
   19bdc:	99 81       	ldd	r25, Y+1	; 0x01
   19bde:	aa 81       	ldd	r26, Y+2	; 0x02
   19be0:	bb 81       	ldd	r27, Y+3	; 0x03
   19be2:	c6 52       	subi	r28, 0x26	; 38
   19be4:	d1 40       	sbci	r29, 0x01	; 1
   19be6:	82 0d       	add	r24, r2
   19be8:	93 1d       	adc	r25, r3
   19bea:	a4 1d       	adc	r26, r4
   19bec:	b5 1d       	adc	r27, r5
   19bee:	84 87       	std	Z+12, r24	; 0x0c
   19bf0:	95 87       	std	Z+13, r25	; 0x0d
   19bf2:	a6 87       	std	Z+14, r26	; 0x0e
   19bf4:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19bf6:	82 0f       	add	r24, r18
   19bf8:	93 1f       	adc	r25, r19
   19bfa:	a4 1f       	adc	r26, r20
   19bfc:	b5 1f       	adc	r27, r21
   19bfe:	84 83       	std	Z+4, r24	; 0x04
   19c00:	95 83       	std	Z+5, r25	; 0x05
   19c02:	a6 83       	std	Z+6, r26	; 0x06
   19c04:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19c06:	ba 2f       	mov	r27, r26
   19c08:	a9 2f       	mov	r26, r25
   19c0a:	98 2f       	mov	r25, r24
   19c0c:	88 27       	eor	r24, r24
   19c0e:	80 87       	std	Z+8, r24	; 0x08
   19c10:	91 87       	std	Z+9, r25	; 0x09
   19c12:	a2 87       	std	Z+10, r26	; 0x0a
   19c14:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19c16:	20 8f       	std	Z+24, r18	; 0x18
   19c18:	31 8f       	std	Z+25, r19	; 0x19
   19c1a:	42 8f       	std	Z+26, r20	; 0x1a
   19c1c:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19c1e:	14 8a       	std	Z+20, r1	; 0x14
   19c20:	15 8a       	std	Z+21, r1	; 0x15
   19c22:	16 8a       	std	Z+22, r1	; 0x16
   19c24:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19c26:	15 8e       	std	Z+29, r1	; 0x1d
   19c28:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19c2a:	17 8e       	std	Z+31, r1	; 0x1f
   19c2c:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19c2e:	11 a2       	std	Z+33, r1	; 0x21
   19c30:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19c32:	13 a2       	std	Z+35, r1	; 0x23
   19c34:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19c36:	61 2c       	mov	r6, r1
   19c38:	77 24       	eor	r7, r7
   19c3a:	73 94       	inc	r7
   19c3c:	9e 01       	movw	r18, r28
   19c3e:	2c 5e       	subi	r18, 0xEC	; 236
   19c40:	3f 4f       	sbci	r19, 0xFF	; 255
   19c42:	49 01       	movw	r8, r18
   19c44:	d9 01       	movw	r26, r18
   19c46:	f3 01       	movw	r30, r6
   19c48:	1d 92       	st	X+, r1
   19c4a:	31 97       	sbiw	r30, 0x01	; 1
   19c4c:	e9 f7       	brne	.-6      	; 0x19c48 <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19c4e:	b9 01       	movw	r22, r18
   19c50:	c7 01       	movw	r24, r14
   19c52:	0e 94 91 c3 	call	0x18722	; 0x18722 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19c56:	66 e1       	ldi	r22, 0x16	; 22
   19c58:	79 e0       	ldi	r23, 0x09	; 9
   19c5a:	d7 01       	movw	r26, r14
   19c5c:	8d 91       	ld	r24, X+
   19c5e:	9c 91       	ld	r25, X
   19c60:	0e 94 7b c1 	call	0x182f6	; 0x182f6 <lif_open>
   19c64:	f7 01       	movw	r30, r14
   19c66:	93 83       	std	Z+3, r25	; 0x03
   19c68:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19c6a:	89 2b       	or	r24, r25
   19c6c:	09 f4       	brne	.+2      	; 0x19c70 <lif_create_volume+0x1f4>
   19c6e:	db c1       	rjmp	.+950    	; 0x1a026 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c70:	00 e0       	ldi	r16, 0x00	; 0
   19c72:	11 e0       	ldi	r17, 0x01	; 1
   19c74:	20 e0       	ldi	r18, 0x00	; 0
   19c76:	30 e0       	ldi	r19, 0x00	; 0
   19c78:	a9 01       	movw	r20, r18
   19c7a:	b4 01       	movw	r22, r8
   19c7c:	c7 01       	movw	r24, r14
   19c7e:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
   19c82:	9c 01       	movw	r18, r24
   19c84:	99 0f       	add	r25, r25
   19c86:	44 0b       	sbc	r20, r20
   19c88:	55 0b       	sbc	r21, r21
   19c8a:	ca 5e       	subi	r28, 0xEA	; 234
   19c8c:	de 4f       	sbci	r29, 0xFE	; 254
   19c8e:	28 83       	st	Y, r18
   19c90:	39 83       	std	Y+1, r19	; 0x01
   19c92:	4a 83       	std	Y+2, r20	; 0x02
   19c94:	5b 83       	std	Y+3, r21	; 0x03
   19c96:	c6 51       	subi	r28, 0x16	; 22
   19c98:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19c9a:	2f 3f       	cpi	r18, 0xFF	; 255
   19c9c:	31 05       	cpc	r19, r1
   19c9e:	41 05       	cpc	r20, r1
   19ca0:	51 05       	cpc	r21, r1
   19ca2:	09 f0       	breq	.+2      	; 0x19ca6 <lif_create_volume+0x22a>
   19ca4:	0c f4       	brge	.+2      	; 0x19ca8 <lif_create_volume+0x22c>
   19ca6:	bf c1       	rjmp	.+894    	; 0x1a026 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19ca8:	d4 01       	movw	r26, r8
   19caa:	f3 01       	movw	r30, r6
   19cac:	1d 92       	st	X+, r1
   19cae:	31 97       	sbiw	r30, 0x01	; 1
   19cb0:	e9 f7       	brne	.-6      	; 0x19cac <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19cb2:	21 e0       	ldi	r18, 0x01	; 1
   19cb4:	30 e0       	ldi	r19, 0x00	; 0
   19cb6:	40 e0       	ldi	r20, 0x00	; 0
   19cb8:	50 e0       	ldi	r21, 0x00	; 0
   19cba:	c6 5e       	subi	r28, 0xE6	; 230
   19cbc:	de 4f       	sbci	r29, 0xFE	; 254
   19cbe:	28 83       	st	Y, r18
   19cc0:	39 83       	std	Y+1, r19	; 0x01
   19cc2:	4a 83       	std	Y+2, r20	; 0x02
   19cc4:	5b 83       	std	Y+3, r21	; 0x03
   19cc6:	ca 51       	subi	r28, 0x1A	; 26
   19cc8:	d1 40       	sbci	r29, 0x01	; 1
   19cca:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19ccc:	84 ec       	ldi	r24, 0xC4	; 196
   19cce:	9d e3       	ldi	r25, 0x3D	; 61
   19cd0:	3c 01       	movw	r6, r24
   19cd2:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19cd4:	c6 5e       	subi	r28, 0xE6	; 230
   19cd6:	de 4f       	sbci	r29, 0xFE	; 254
   19cd8:	88 81       	ld	r24, Y
   19cda:	99 81       	ldd	r25, Y+1	; 0x01
   19cdc:	aa 81       	ldd	r26, Y+2	; 0x02
   19cde:	bb 81       	ldd	r27, Y+3	; 0x03
   19ce0:	ca 51       	subi	r28, 0x1A	; 26
   19ce2:	d1 40       	sbci	r29, 0x01	; 1
   19ce4:	82 15       	cp	r24, r2
   19ce6:	93 05       	cpc	r25, r3
   19ce8:	a4 05       	cpc	r26, r4
   19cea:	b5 05       	cpc	r27, r5
   19cec:	0c f0       	brlt	.+2      	; 0x19cf0 <lif_create_volume+0x274>
   19cee:	55 c0       	rjmp	.+170    	; 0x19d9a <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19cf0:	00 e0       	ldi	r16, 0x00	; 0
   19cf2:	11 e0       	ldi	r17, 0x01	; 1
   19cf4:	ca 5e       	subi	r28, 0xEA	; 234
   19cf6:	de 4f       	sbci	r29, 0xFE	; 254
   19cf8:	28 81       	ld	r18, Y
   19cfa:	39 81       	ldd	r19, Y+1	; 0x01
   19cfc:	4a 81       	ldd	r20, Y+2	; 0x02
   19cfe:	5b 81       	ldd	r21, Y+3	; 0x03
   19d00:	c6 51       	subi	r28, 0x16	; 22
   19d02:	d1 40       	sbci	r29, 0x01	; 1
   19d04:	b6 01       	movw	r22, r12
   19d06:	c7 01       	movw	r24, r14
   19d08:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
   19d0c:	09 2e       	mov	r0, r25
   19d0e:	00 0c       	add	r0, r0
   19d10:	aa 0b       	sbc	r26, r26
   19d12:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19d14:	8f 3f       	cpi	r24, 0xFF	; 255
   19d16:	91 05       	cpc	r25, r1
   19d18:	a1 05       	cpc	r26, r1
   19d1a:	b1 05       	cpc	r27, r1
   19d1c:	09 f0       	breq	.+2      	; 0x19d20 <lif_create_volume+0x2a4>
   19d1e:	0c f4       	brge	.+2      	; 0x19d22 <lif_create_volume+0x2a6>
   19d20:	82 c1       	rjmp	.+772    	; 0x1a026 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19d22:	ca 5e       	subi	r28, 0xEA	; 234
   19d24:	de 4f       	sbci	r29, 0xFE	; 254
   19d26:	28 81       	ld	r18, Y
   19d28:	39 81       	ldd	r19, Y+1	; 0x01
   19d2a:	4a 81       	ldd	r20, Y+2	; 0x02
   19d2c:	5b 81       	ldd	r21, Y+3	; 0x03
   19d2e:	c6 51       	subi	r28, 0x16	; 22
   19d30:	d1 40       	sbci	r29, 0x01	; 1
   19d32:	28 0f       	add	r18, r24
   19d34:	39 1f       	adc	r19, r25
   19d36:	4a 1f       	adc	r20, r26
   19d38:	5b 1f       	adc	r21, r27
   19d3a:	ca 5e       	subi	r28, 0xEA	; 234
   19d3c:	de 4f       	sbci	r29, 0xFE	; 254
   19d3e:	28 83       	st	Y, r18
   19d40:	39 83       	std	Y+1, r19	; 0x01
   19d42:	4a 83       	std	Y+2, r20	; 0x02
   19d44:	5b 83       	std	Y+3, r21	; 0x03
   19d46:	c6 51       	subi	r28, 0x16	; 22
   19d48:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19d4a:	c6 5e       	subi	r28, 0xE6	; 230
   19d4c:	de 4f       	sbci	r29, 0xFE	; 254
   19d4e:	88 81       	ld	r24, Y
   19d50:	99 81       	ldd	r25, Y+1	; 0x01
   19d52:	aa 81       	ldd	r26, Y+2	; 0x02
   19d54:	bb 81       	ldd	r27, Y+3	; 0x03
   19d56:	ca 51       	subi	r28, 0x1A	; 26
   19d58:	d1 40       	sbci	r29, 0x01	; 1
   19d5a:	ed b7       	in	r30, 0x3d	; 61
   19d5c:	fe b7       	in	r31, 0x3e	; 62
   19d5e:	84 83       	std	Z+4, r24	; 0x04
   19d60:	95 83       	std	Z+5, r25	; 0x05
   19d62:	a6 83       	std	Z+6, r26	; 0x06
   19d64:	b7 83       	std	Z+7, r27	; 0x07
   19d66:	61 82       	std	Z+1, r6	; 0x01
   19d68:	72 82       	std	Z+2, r7	; 0x02
   19d6a:	83 82       	std	Z+3, r8	; 0x03
   19d6c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19d70:	c6 5e       	subi	r28, 0xE6	; 230
   19d72:	de 4f       	sbci	r29, 0xFE	; 254
   19d74:	28 81       	ld	r18, Y
   19d76:	39 81       	ldd	r19, Y+1	; 0x01
   19d78:	4a 81       	ldd	r20, Y+2	; 0x02
   19d7a:	5b 81       	ldd	r21, Y+3	; 0x03
   19d7c:	ca 51       	subi	r28, 0x1A	; 26
   19d7e:	d1 40       	sbci	r29, 0x01	; 1
   19d80:	2f 5f       	subi	r18, 0xFF	; 255
   19d82:	3f 4f       	sbci	r19, 0xFF	; 255
   19d84:	4f 4f       	sbci	r20, 0xFF	; 255
   19d86:	5f 4f       	sbci	r21, 0xFF	; 255
   19d88:	c6 5e       	subi	r28, 0xE6	; 230
   19d8a:	de 4f       	sbci	r29, 0xFE	; 254
   19d8c:	28 83       	st	Y, r18
   19d8e:	39 83       	std	Y+1, r19	; 0x01
   19d90:	4a 83       	std	Y+2, r20	; 0x02
   19d92:	5b 83       	std	Y+3, r21	; 0x03
   19d94:	ca 51       	subi	r28, 0x1A	; 26
   19d96:	d1 40       	sbci	r29, 0x01	; 1
   19d98:	9d cf       	rjmp	.-198    	; 0x19cd4 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19d9a:	c7 01       	movw	r24, r14
   19d9c:	0e 94 56 c6 	call	0x18cac	; 0x18cac <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19da0:	8f ef       	ldi	r24, 0xFF	; 255
   19da2:	9f ef       	ldi	r25, 0xFF	; 255
   19da4:	f7 01       	movw	r30, r14
   19da6:	e6 5a       	subi	r30, 0xA6	; 166
   19da8:	ff 4f       	sbci	r31, 0xFF	; 255
   19daa:	91 83       	std	Z+1, r25	; 0x01
   19dac:	80 83       	st	Z, r24
   19dae:	46 01       	movw	r8, r12
   19db0:	6e 01       	movw	r12, r28
   19db2:	9c ee       	ldi	r25, 0xEC	; 236
   19db4:	c9 1a       	sub	r12, r25
   19db6:	9e ef       	ldi	r25, 0xFE	; 254
   19db8:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19dba:	b4 01       	movw	r22, r8
   19dbc:	c7 01       	movw	r24, r14
   19dbe:	0e 94 9d c4 	call	0x1893a	; 0x1893a <lif_dir2str>
   19dc2:	a0 e2       	ldi	r26, 0x20	; 32
   19dc4:	8a 0e       	add	r8, r26
   19dc6:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19dc8:	c8 14       	cp	r12, r8
   19dca:	d9 04       	cpc	r13, r9
   19dcc:	b1 f7       	brne	.-20     	; 0x19dba <lif_create_volume+0x33e>
   19dce:	a1 2c       	mov	r10, r1
   19dd0:	b1 2c       	mov	r11, r1
   19dd2:	65 01       	movw	r12, r10
   19dd4:	fe 01       	movw	r30, r28
   19dd6:	74 96       	adiw	r30, 0x14	; 20
   19dd8:	cc 5e       	subi	r28, 0xEC	; 236
   19dda:	de 4f       	sbci	r29, 0xFE	; 254
   19ddc:	f9 83       	std	Y+1, r31	; 0x01
   19dde:	e8 83       	st	Y, r30
   19de0:	c4 51       	subi	r28, 0x14	; 20
   19de2:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19de4:	84 e6       	ldi	r24, 0x64	; 100
   19de6:	28 2e       	mov	r2, r24
   19de8:	31 2c       	mov	r3, r1
   19dea:	41 2c       	mov	r4, r1
   19dec:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19dee:	87 eb       	ldi	r24, 0xB7	; 183
   19df0:	9d e3       	ldi	r25, 0x3D	; 61
   19df2:	3c 01       	movw	r6, r24
   19df4:	81 2c       	mov	r8, r1
   19df6:	c6 5e       	subi	r28, 0xE6	; 230
   19df8:	de 4f       	sbci	r29, 0xFE	; 254
   19dfa:	28 81       	ld	r18, Y
   19dfc:	39 81       	ldd	r19, Y+1	; 0x01
   19dfe:	4a 81       	ldd	r20, Y+2	; 0x02
   19e00:	5b 81       	ldd	r21, Y+3	; 0x03
   19e02:	ca 51       	subi	r28, 0x1A	; 26
   19e04:	d1 40       	sbci	r29, 0x01	; 1
   19e06:	2a 0d       	add	r18, r10
   19e08:	3b 1d       	adc	r19, r11
   19e0a:	4c 1d       	adc	r20, r12
   19e0c:	5d 1d       	adc	r21, r13
   19e0e:	ce 5d       	subi	r28, 0xDE	; 222
   19e10:	de 4f       	sbci	r29, 0xFE	; 254
   19e12:	28 83       	st	Y, r18
   19e14:	39 83       	std	Y+1, r19	; 0x01
   19e16:	4a 83       	std	Y+2, r20	; 0x02
   19e18:	5b 83       	std	Y+3, r21	; 0x03
   19e1a:	c2 52       	subi	r28, 0x22	; 34
   19e1c:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19e1e:	ca 5d       	subi	r28, 0xDA	; 218
   19e20:	de 4f       	sbci	r29, 0xFE	; 254
   19e22:	88 81       	ld	r24, Y
   19e24:	99 81       	ldd	r25, Y+1	; 0x01
   19e26:	aa 81       	ldd	r26, Y+2	; 0x02
   19e28:	bb 81       	ldd	r27, Y+3	; 0x03
   19e2a:	c6 52       	subi	r28, 0x26	; 38
   19e2c:	d1 40       	sbci	r29, 0x01	; 1
   19e2e:	a8 16       	cp	r10, r24
   19e30:	b9 06       	cpc	r11, r25
   19e32:	ca 06       	cpc	r12, r26
   19e34:	db 06       	cpc	r13, r27
   19e36:	0c f0       	brlt	.+2      	; 0x19e3a <lif_create_volume+0x3be>
   19e38:	58 c0       	rjmp	.+176    	; 0x19eea <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19e3a:	00 e0       	ldi	r16, 0x00	; 0
   19e3c:	11 e0       	ldi	r17, 0x01	; 1
   19e3e:	ca 5e       	subi	r28, 0xEA	; 234
   19e40:	de 4f       	sbci	r29, 0xFE	; 254
   19e42:	28 81       	ld	r18, Y
   19e44:	39 81       	ldd	r19, Y+1	; 0x01
   19e46:	4a 81       	ldd	r20, Y+2	; 0x02
   19e48:	5b 81       	ldd	r21, Y+3	; 0x03
   19e4a:	c6 51       	subi	r28, 0x16	; 22
   19e4c:	d1 40       	sbci	r29, 0x01	; 1
   19e4e:	be 01       	movw	r22, r28
   19e50:	6c 5e       	subi	r22, 0xEC	; 236
   19e52:	7f 4f       	sbci	r23, 0xFF	; 255
   19e54:	c7 01       	movw	r24, r14
   19e56:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
   19e5a:	09 2e       	mov	r0, r25
   19e5c:	00 0c       	add	r0, r0
   19e5e:	aa 0b       	sbc	r26, r26
   19e60:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19e62:	8f 3f       	cpi	r24, 0xFF	; 255
   19e64:	91 05       	cpc	r25, r1
   19e66:	a1 05       	cpc	r26, r1
   19e68:	b1 05       	cpc	r27, r1
   19e6a:	09 f0       	breq	.+2      	; 0x19e6e <lif_create_volume+0x3f2>
   19e6c:	0c f4       	brge	.+2      	; 0x19e70 <lif_create_volume+0x3f4>
   19e6e:	db c0       	rjmp	.+438    	; 0x1a026 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e70:	ca 5e       	subi	r28, 0xEA	; 234
   19e72:	de 4f       	sbci	r29, 0xFE	; 254
   19e74:	28 81       	ld	r18, Y
   19e76:	39 81       	ldd	r19, Y+1	; 0x01
   19e78:	4a 81       	ldd	r20, Y+2	; 0x02
   19e7a:	5b 81       	ldd	r21, Y+3	; 0x03
   19e7c:	c6 51       	subi	r28, 0x16	; 22
   19e7e:	d1 40       	sbci	r29, 0x01	; 1
   19e80:	28 0f       	add	r18, r24
   19e82:	39 1f       	adc	r19, r25
   19e84:	4a 1f       	adc	r20, r26
   19e86:	5b 1f       	adc	r21, r27
   19e88:	ca 5e       	subi	r28, 0xEA	; 234
   19e8a:	de 4f       	sbci	r29, 0xFE	; 254
   19e8c:	28 83       	st	Y, r18
   19e8e:	39 83       	std	Y+1, r19	; 0x01
   19e90:	4a 83       	std	Y+2, r20	; 0x02
   19e92:	5b 83       	std	Y+3, r21	; 0x03
   19e94:	c6 51       	subi	r28, 0x16	; 22
   19e96:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19e98:	ce 5d       	subi	r28, 0xDE	; 222
   19e9a:	de 4f       	sbci	r29, 0xFE	; 254
   19e9c:	68 81       	ld	r22, Y
   19e9e:	79 81       	ldd	r23, Y+1	; 0x01
   19ea0:	8a 81       	ldd	r24, Y+2	; 0x02
   19ea2:	9b 81       	ldd	r25, Y+3	; 0x03
   19ea4:	c2 52       	subi	r28, 0x22	; 34
   19ea6:	d1 40       	sbci	r29, 0x01	; 1
   19ea8:	a2 01       	movw	r20, r4
   19eaa:	91 01       	movw	r18, r2
   19eac:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
   19eb0:	67 2b       	or	r22, r23
   19eb2:	68 2b       	or	r22, r24
   19eb4:	69 2b       	or	r22, r25
   19eb6:	99 f4       	brne	.+38     	; 0x19ede <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19eb8:	ce 5d       	subi	r28, 0xDE	; 222
   19eba:	de 4f       	sbci	r29, 0xFE	; 254
   19ebc:	88 81       	ld	r24, Y
   19ebe:	99 81       	ldd	r25, Y+1	; 0x01
   19ec0:	aa 81       	ldd	r26, Y+2	; 0x02
   19ec2:	bb 81       	ldd	r27, Y+3	; 0x03
   19ec4:	c2 52       	subi	r28, 0x22	; 34
   19ec6:	d1 40       	sbci	r29, 0x01	; 1
   19ec8:	ed b7       	in	r30, 0x3d	; 61
   19eca:	fe b7       	in	r31, 0x3e	; 62
   19ecc:	84 83       	std	Z+4, r24	; 0x04
   19ece:	95 83       	std	Z+5, r25	; 0x05
   19ed0:	a6 83       	std	Z+6, r26	; 0x06
   19ed2:	b7 83       	std	Z+7, r27	; 0x07
   19ed4:	61 82       	std	Z+1, r6	; 0x01
   19ed6:	72 82       	std	Z+2, r7	; 0x02
   19ed8:	83 82       	std	Z+3, r8	; 0x03
   19eda:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19ede:	ff ef       	ldi	r31, 0xFF	; 255
   19ee0:	af 1a       	sub	r10, r31
   19ee2:	bf 0a       	sbc	r11, r31
   19ee4:	cf 0a       	sbc	r12, r31
   19ee6:	df 0a       	sbc	r13, r31
   19ee8:	86 cf       	rjmp	.-244    	; 0x19df6 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19eea:	80 e0       	ldi	r24, 0x00	; 0
   19eec:	91 e0       	ldi	r25, 0x01	; 1
   19eee:	cc 5e       	subi	r28, 0xEC	; 236
   19ef0:	de 4f       	sbci	r29, 0xFE	; 254
   19ef2:	a8 81       	ld	r26, Y
   19ef4:	b9 81       	ldd	r27, Y+1	; 0x01
   19ef6:	c4 51       	subi	r28, 0x14	; 20
   19ef8:	d1 40       	sbci	r29, 0x01	; 1
   19efa:	fc 01       	movw	r30, r24
   19efc:	1d 92       	st	X+, r1
   19efe:	31 97       	sbiw	r30, 0x01	; 1
   19f00:	e9 f7       	brne	.-6      	; 0x19efc <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19f02:	81 2c       	mov	r8, r1
   19f04:	91 2c       	mov	r9, r1
   19f06:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19f08:	8a ea       	ldi	r24, 0xAA	; 170
   19f0a:	9d e3       	ldi	r25, 0x3D	; 61
   19f0c:	9c 01       	movw	r18, r24
   19f0e:	40 e0       	ldi	r20, 0x00	; 0
   19f10:	c6 5e       	subi	r28, 0xE6	; 230
   19f12:	de 4f       	sbci	r29, 0xFE	; 254
   19f14:	28 83       	st	Y, r18
   19f16:	39 83       	std	Y+1, r19	; 0x01
   19f18:	4a 83       	std	Y+2, r20	; 0x02
   19f1a:	ca 51       	subi	r28, 0x1A	; 26
   19f1c:	d1 40       	sbci	r29, 0x01	; 1
   19f1e:	ce 5d       	subi	r28, 0xDE	; 222
   19f20:	de 4f       	sbci	r29, 0xFE	; 254
   19f22:	48 80       	ld	r4, Y
   19f24:	59 80       	ldd	r5, Y+1	; 0x01
   19f26:	6a 80       	ldd	r6, Y+2	; 0x02
   19f28:	7b 80       	ldd	r7, Y+3	; 0x03
   19f2a:	c2 52       	subi	r28, 0x22	; 34
   19f2c:	d1 40       	sbci	r29, 0x01	; 1
   19f2e:	48 0c       	add	r4, r8
   19f30:	59 1c       	adc	r5, r9
   19f32:	6a 1c       	adc	r6, r10
   19f34:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19f36:	c2 5e       	subi	r28, 0xE2	; 226
   19f38:	de 4f       	sbci	r29, 0xFE	; 254
   19f3a:	28 81       	ld	r18, Y
   19f3c:	39 81       	ldd	r19, Y+1	; 0x01
   19f3e:	4a 81       	ldd	r20, Y+2	; 0x02
   19f40:	5b 81       	ldd	r21, Y+3	; 0x03
   19f42:	ce 51       	subi	r28, 0x1E	; 30
   19f44:	d1 40       	sbci	r29, 0x01	; 1
   19f46:	82 16       	cp	r8, r18
   19f48:	93 06       	cpc	r9, r19
   19f4a:	a4 06       	cpc	r10, r20
   19f4c:	b5 06       	cpc	r11, r21
   19f4e:	0c f0       	brlt	.+2      	; 0x19f52 <lif_create_volume+0x4d6>
   19f50:	53 c0       	rjmp	.+166    	; 0x19ff8 <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19f52:	00 e0       	ldi	r16, 0x00	; 0
   19f54:	11 e0       	ldi	r17, 0x01	; 1
   19f56:	ca 5e       	subi	r28, 0xEA	; 234
   19f58:	de 4f       	sbci	r29, 0xFE	; 254
   19f5a:	28 81       	ld	r18, Y
   19f5c:	39 81       	ldd	r19, Y+1	; 0x01
   19f5e:	4a 81       	ldd	r20, Y+2	; 0x02
   19f60:	5b 81       	ldd	r21, Y+3	; 0x03
   19f62:	c6 51       	subi	r28, 0x16	; 22
   19f64:	d1 40       	sbci	r29, 0x01	; 1
   19f66:	be 01       	movw	r22, r28
   19f68:	6c 5e       	subi	r22, 0xEC	; 236
   19f6a:	7f 4f       	sbci	r23, 0xFF	; 255
   19f6c:	c7 01       	movw	r24, r14
   19f6e:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
   19f72:	09 2e       	mov	r0, r25
   19f74:	00 0c       	add	r0, r0
   19f76:	aa 0b       	sbc	r26, r26
   19f78:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19f7a:	8f 3f       	cpi	r24, 0xFF	; 255
   19f7c:	91 05       	cpc	r25, r1
   19f7e:	a1 05       	cpc	r26, r1
   19f80:	b1 05       	cpc	r27, r1
   19f82:	09 f0       	breq	.+2      	; 0x19f86 <lif_create_volume+0x50a>
   19f84:	0c f4       	brge	.+2      	; 0x19f88 <lif_create_volume+0x50c>
   19f86:	4f c0       	rjmp	.+158    	; 0x1a026 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f88:	ca 5e       	subi	r28, 0xEA	; 234
   19f8a:	de 4f       	sbci	r29, 0xFE	; 254
   19f8c:	28 81       	ld	r18, Y
   19f8e:	39 81       	ldd	r19, Y+1	; 0x01
   19f90:	4a 81       	ldd	r20, Y+2	; 0x02
   19f92:	5b 81       	ldd	r21, Y+3	; 0x03
   19f94:	c6 51       	subi	r28, 0x16	; 22
   19f96:	d1 40       	sbci	r29, 0x01	; 1
   19f98:	28 0f       	add	r18, r24
   19f9a:	39 1f       	adc	r19, r25
   19f9c:	4a 1f       	adc	r20, r26
   19f9e:	5b 1f       	adc	r21, r27
   19fa0:	ca 5e       	subi	r28, 0xEA	; 234
   19fa2:	de 4f       	sbci	r29, 0xFE	; 254
   19fa4:	28 83       	st	Y, r18
   19fa6:	39 83       	std	Y+1, r19	; 0x01
   19fa8:	4a 83       	std	Y+2, r20	; 0x02
   19faa:	5b 83       	std	Y+3, r21	; 0x03
   19fac:	c6 51       	subi	r28, 0x16	; 22
   19fae:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19fb0:	c3 01       	movw	r24, r6
   19fb2:	b2 01       	movw	r22, r4
   19fb4:	24 e6       	ldi	r18, 0x64	; 100
   19fb6:	30 e0       	ldi	r19, 0x00	; 0
   19fb8:	40 e0       	ldi	r20, 0x00	; 0
   19fba:	50 e0       	ldi	r21, 0x00	; 0
   19fbc:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
   19fc0:	67 2b       	or	r22, r23
   19fc2:	68 2b       	or	r22, r24
   19fc4:	69 2b       	or	r22, r25
   19fc6:	91 f4       	brne	.+36     	; 0x19fec <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   19fc8:	ed b7       	in	r30, 0x3d	; 61
   19fca:	fe b7       	in	r31, 0x3e	; 62
   19fcc:	44 82       	std	Z+4, r4	; 0x04
   19fce:	55 82       	std	Z+5, r5	; 0x05
   19fd0:	66 82       	std	Z+6, r6	; 0x06
   19fd2:	77 82       	std	Z+7, r7	; 0x07
   19fd4:	c6 5e       	subi	r28, 0xE6	; 230
   19fd6:	de 4f       	sbci	r29, 0xFE	; 254
   19fd8:	28 81       	ld	r18, Y
   19fda:	39 81       	ldd	r19, Y+1	; 0x01
   19fdc:	4a 81       	ldd	r20, Y+2	; 0x02
   19fde:	ca 51       	subi	r28, 0x1A	; 26
   19fe0:	d1 40       	sbci	r29, 0x01	; 1
   19fe2:	21 83       	std	Z+1, r18	; 0x01
   19fe4:	32 83       	std	Z+2, r19	; 0x02
   19fe6:	43 83       	std	Z+3, r20	; 0x03
   19fe8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19fec:	ff ef       	ldi	r31, 0xFF	; 255
   19fee:	8f 1a       	sub	r8, r31
   19ff0:	9f 0a       	sbc	r9, r31
   19ff2:	af 0a       	sbc	r10, r31
   19ff4:	bf 0a       	sbc	r11, r31
   19ff6:	93 cf       	rjmp	.-218    	; 0x19f1e <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19ff8:	ed b7       	in	r30, 0x3d	; 61
   19ffa:	fe b7       	in	r31, 0x3e	; 62
   19ffc:	44 82       	std	Z+4, r4	; 0x04
   19ffe:	55 82       	std	Z+5, r5	; 0x05
   1a000:	66 82       	std	Z+6, r6	; 0x06
   1a002:	77 82       	std	Z+7, r7	; 0x07
   1a004:	8d e9       	ldi	r24, 0x9D	; 157
   1a006:	9d e3       	ldi	r25, 0x3D	; 61
   1a008:	a0 e0       	ldi	r26, 0x00	; 0
   1a00a:	81 83       	std	Z+1, r24	; 0x01
   1a00c:	92 83       	std	Z+2, r25	; 0x02
   1a00e:	a3 83       	std	Z+3, r26	; 0x03
   1a010:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1a014:	8f ef       	ldi	r24, 0xFF	; 255
   1a016:	9f ef       	ldi	r25, 0xFF	; 255
   1a018:	f7 01       	movw	r30, r14
   1a01a:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a01c:	80 a3       	std	Z+32, r24	; 0x20
   1a01e:	c7 01       	movw	r24, r14
   1a020:	1a d8       	rcall	.-4044   	; 0x19056 <lif_check_volume>
   1a022:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a024:	19 f4       	brne	.+6      	; 0x1a02c <lif_create_volume+0x5b0>
   1a026:	c7 01       	movw	r24, r14
   1a028:	b6 da       	rcall	.-2708   	; 0x19596 <lif_close_volume>
   1a02a:	08 c0       	rjmp	.+16     	; 0x1a03c <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a02c:	c7 01       	movw	r24, r14
   1a02e:	1c dc       	rcall	.-1992   	; 0x19868 <lif_updatefree>
   1a030:	6c 01       	movw	r12, r24
   1a032:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a034:	31 f4       	brne	.+12     	; 0x1a042 <lif_create_volume+0x5c6>
   1a036:	c7 01       	movw	r24, r14
   1a038:	ae da       	rcall	.-2724   	; 0x19596 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a03a:	04 c0       	rjmp	.+8      	; 0x1a044 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a03c:	c1 2c       	mov	r12, r1
   1a03e:	d1 2c       	mov	r13, r1
   1a040:	01 c0       	rjmp	.+2      	; 0x1a044 <lif_create_volume+0x5c8>
   1a042:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a044:	c6 01       	movw	r24, r12
   1a046:	c7 5d       	subi	r28, 0xD7	; 215
   1a048:	de 4f       	sbci	r29, 0xFE	; 254
   1a04a:	e2 e1       	ldi	r30, 0x12	; 18
   1a04c:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0001a050 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a050:	ad e1       	ldi	r26, 0x1D	; 29
   1a052:	b0 e0       	ldi	r27, 0x00	; 0
   1a054:	ee e2       	ldi	r30, 0x2E	; 46
   1a056:	f0 ed       	ldi	r31, 0xD0	; 208
   1a058:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   1a05c:	9d 8f       	std	Y+29, r25	; 0x1d
   1a05e:	8c 8f       	std	Y+28, r24	; 0x1c
   1a060:	4a 01       	movw	r8, r20
   1a062:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   1a064:	fc 01       	movw	r30, r24
   1a066:	c4 84       	ldd	r12, Z+12	; 0x0c
   1a068:	d5 84       	ldd	r13, Z+13	; 0x0d
   1a06a:	e6 84       	ldd	r14, Z+14	; 0x0e
   1a06c:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a06e:	fc db       	rcall	.-2056   	; 0x19868 <lif_updatefree>
   1a070:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a072:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a074:	40 8d       	ldd	r20, Z+24	; 0x18
   1a076:	51 8d       	ldd	r21, Z+25	; 0x19
   1a078:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a07a:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a07c:	89 2b       	or	r24, r25
   1a07e:	99 f4       	brne	.+38     	; 0x1a0a6 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a080:	ed b7       	in	r30, 0x3d	; 61
   1a082:	fe b7       	in	r31, 0x3e	; 62
   1a084:	80 86       	std	Z+8, r8	; 0x08
   1a086:	91 86       	std	Z+9, r9	; 0x09
   1a088:	a2 86       	std	Z+10, r10	; 0x0a
   1a08a:	b3 86       	std	Z+11, r11	; 0x0b
   1a08c:	44 83       	std	Z+4, r20	; 0x04
   1a08e:	55 83       	std	Z+5, r21	; 0x05
   1a090:	66 83       	std	Z+6, r22	; 0x06
   1a092:	77 83       	std	Z+7, r23	; 0x07
   1a094:	8e eb       	ldi	r24, 0xBE	; 190
   1a096:	9c e3       	ldi	r25, 0x3C	; 60
   1a098:	a0 e0       	ldi	r26, 0x00	; 0
   1a09a:	81 83       	std	Z+1, r24	; 0x01
   1a09c:	92 83       	std	Z+2, r25	; 0x02
   1a09e:	a3 83       	std	Z+3, r26	; 0x03
   1a0a0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1a0a4:	2f c1       	rjmp	.+606    	; 0x1a304 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a0a6:	48 15       	cp	r20, r8
   1a0a8:	59 05       	cpc	r21, r9
   1a0aa:	6a 05       	cpc	r22, r10
   1a0ac:	7b 05       	cpc	r23, r11
   1a0ae:	c4 f0       	brlt	.+48     	; 0x1a0e0 <lif_newdir+0x90>
   1a0b0:	44 24       	eor	r4, r4
   1a0b2:	43 94       	inc	r4
   1a0b4:	51 2c       	mov	r5, r1
   1a0b6:	61 2c       	mov	r6, r1
   1a0b8:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a0ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0be:	86 5a       	subi	r24, 0xA6	; 166
   1a0c0:	9f 4f       	sbci	r25, 0xFF	; 255
   1a0c2:	9d 8b       	std	Y+21, r25	; 0x15
   1a0c4:	8c 8b       	std	Y+20, r24	; 0x14
   1a0c6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0c8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0ca:	e4 5a       	subi	r30, 0xA4	; 164
   1a0cc:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0ce:	fb 8b       	std	Y+19, r31	; 0x13
   1a0d0:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a0d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0d6:	80 5a       	subi	r24, 0xA0	; 160
   1a0d8:	9f 4f       	sbci	r25, 0xFF	; 255
   1a0da:	9f 8b       	std	Y+23, r25	; 0x17
   1a0dc:	8e 8b       	std	Y+22, r24	; 0x16
   1a0de:	21 c0       	rjmp	.+66     	; 0x1a122 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a0e0:	ed b7       	in	r30, 0x3d	; 61
   1a0e2:	fe b7       	in	r31, 0x3e	; 62
   1a0e4:	44 83       	std	Z+4, r20	; 0x04
   1a0e6:	55 83       	std	Z+5, r21	; 0x05
   1a0e8:	66 83       	std	Z+6, r22	; 0x06
   1a0ea:	77 83       	std	Z+7, r23	; 0x07
   1a0ec:	85 e9       	ldi	r24, 0x95	; 149
   1a0ee:	9c e3       	ldi	r25, 0x3C	; 60
   1a0f0:	a0 e0       	ldi	r26, 0x00	; 0
   1a0f2:	81 83       	std	Z+1, r24	; 0x01
   1a0f4:	92 83       	std	Z+2, r25	; 0x02
   1a0f6:	a3 83       	std	Z+3, r26	; 0x03
   1a0f8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1a0fc:	03 c1       	rjmp	.+518    	; 0x1a304 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a0fe:	ec 89       	ldd	r30, Y+20	; 0x14
   1a100:	fd 89       	ldd	r31, Y+21	; 0x15
   1a102:	80 81       	ld	r24, Z
   1a104:	91 81       	ldd	r25, Z+1	; 0x01
   1a106:	8f 3f       	cpi	r24, 0xFF	; 255
   1a108:	ff ef       	ldi	r31, 0xFF	; 255
   1a10a:	9f 07       	cpc	r25, r31
   1a10c:	a1 f0       	breq	.+40     	; 0x1a136 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   1a10e:	89 2b       	or	r24, r25
   1a110:	09 f0       	breq	.+2      	; 0x1a114 <lif_newdir+0xc4>
   1a112:	ce c0       	rjmp	.+412    	; 0x1a2b0 <lif_newdir+0x260>
        {
            if(freestate == 0)
   1a114:	61 14       	cp	r6, r1
   1a116:	71 04       	cpc	r7, r1
   1a118:	09 f4       	brne	.+2      	; 0x1a11c <lif_newdir+0xcc>
   1a11a:	c1 c0       	rjmp	.+386    	; 0x1a29e <lif_newdir+0x24e>
   1a11c:	ff ef       	ldi	r31, 0xFF	; 255
   1a11e:	4f 1a       	sub	r4, r31
   1a120:	5f 0a       	sbc	r5, r31
   1a122:	82 01       	movw	r16, r4
   1a124:	01 50       	subi	r16, 0x01	; 1
   1a126:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a128:	b8 01       	movw	r22, r16
   1a12a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a12c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a12e:	c1 da       	rcall	.-2686   	; 0x196b2 <lif_readdirindex>
   1a130:	89 2b       	or	r24, r25
   1a132:	29 f7       	brne	.-54     	; 0x1a0fe <lif_newdir+0xae>
   1a134:	e7 c0       	rjmp	.+462    	; 0x1a304 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1a136:	22 e0       	ldi	r18, 0x02	; 2
   1a138:	62 16       	cp	r6, r18
   1a13a:	71 04       	cpc	r7, r1
   1a13c:	09 f0       	breq	.+2      	; 0x1a140 <lif_newdir+0xf0>
   1a13e:	46 c0       	rjmp	.+140    	; 0x1a1cc <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   1a140:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a142:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a144:	0e 94 56 c6 	call	0x18cac	; 0x18cac <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a148:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a14a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a14c:	e4 5a       	subi	r30, 0xA4	; 164
   1a14e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a150:	88 8d       	ldd	r24, Y+24	; 0x18
   1a152:	80 83       	st	Z, r24
   1a154:	99 8d       	ldd	r25, Y+25	; 0x19
   1a156:	91 83       	std	Z+1, r25	; 0x01
   1a158:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a15a:	22 83       	std	Z+2, r18	; 0x02
   1a15c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1a15e:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   1a160:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a162:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a164:	e0 5a       	subi	r30, 0xA0	; 160
   1a166:	ff 4f       	sbci	r31, 0xFF	; 255
   1a168:	80 82       	st	Z, r8
   1a16a:	91 82       	std	Z+1, r9	; 0x01
   1a16c:	a2 82       	std	Z+2, r10	; 0x02
   1a16e:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   1a170:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a172:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a174:	84 89       	ldd	r24, Z+20	; 0x14
   1a176:	95 89       	ldd	r25, Z+21	; 0x15
   1a178:	a6 89       	ldd	r26, Z+22	; 0x16
   1a17a:	b7 89       	ldd	r27, Z+23	; 0x17
   1a17c:	88 0d       	add	r24, r8
   1a17e:	99 1d       	adc	r25, r9
   1a180:	aa 1d       	adc	r26, r10
   1a182:	bb 1d       	adc	r27, r11
   1a184:	84 8b       	std	Z+20, r24	; 0x14
   1a186:	95 8b       	std	Z+21, r25	; 0x15
   1a188:	a6 8b       	std	Z+22, r26	; 0x16
   1a18a:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   1a18c:	80 8d       	ldd	r24, Z+24	; 0x18
   1a18e:	91 8d       	ldd	r25, Z+25	; 0x19
   1a190:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a192:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a194:	88 19       	sub	r24, r8
   1a196:	99 09       	sbc	r25, r9
   1a198:	aa 09       	sbc	r26, r10
   1a19a:	bb 09       	sbc	r27, r11
   1a19c:	80 8f       	std	Z+24, r24	; 0x18
   1a19e:	91 8f       	std	Z+25, r25	; 0x19
   1a1a0:	a2 8f       	std	Z+26, r26	; 0x1a
   1a1a2:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1a1a4:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a1a6:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a1a8:	01 96       	adiw	r24, 0x01	; 1
   1a1aa:	95 8f       	std	Z+29, r25	; 0x1d
   1a1ac:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   1a1ae:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a1b0:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a1b2:	01 97       	sbiw	r24, 0x01	; 1
   1a1b4:	97 8f       	std	Z+31, r25	; 0x1f
   1a1b6:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1a1b8:	20 a2       	std	Z+32, r2	; 0x20
   1a1ba:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a1bc:	b1 01       	movw	r22, r2
   1a1be:	cf 01       	movw	r24, r30
   1a1c0:	df da       	rcall	.-2626   	; 0x19780 <lif_writedirindex>
   1a1c2:	89 2b       	or	r24, r25
   1a1c4:	09 f4       	brne	.+2      	; 0x1a1c8 <lif_newdir+0x178>
   1a1c6:	9e c0       	rjmp	.+316    	; 0x1a304 <lif_newdir+0x2b4>
   1a1c8:	c1 01       	movw	r24, r2
   1a1ca:	9e c0       	rjmp	.+316    	; 0x1a308 <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   1a1cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a1d0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a1d4:	92 ff       	sbrs	r25, 2
   1a1d6:	1e c0       	rjmp	.+60     	; 0x1a214 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1a1d8:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1da:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1dc:	80 8d       	ldd	r24, Z+24	; 0x18
   1a1de:	91 8d       	ldd	r25, Z+25	; 0x19
   1a1e0:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a1e2:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a1e4:	ed b7       	in	r30, 0x3d	; 61
   1a1e6:	fe b7       	in	r31, 0x3e	; 62
   1a1e8:	86 87       	std	Z+14, r24	; 0x0e
   1a1ea:	97 87       	std	Z+15, r25	; 0x0f
   1a1ec:	a0 8b       	std	Z+16, r26	; 0x10
   1a1ee:	b1 8b       	std	Z+17, r27	; 0x11
   1a1f0:	82 86       	std	Z+10, r8	; 0x0a
   1a1f2:	93 86       	std	Z+11, r9	; 0x0b
   1a1f4:	a4 86       	std	Z+12, r10	; 0x0c
   1a1f6:	b5 86       	std	Z+13, r11	; 0x0d
   1a1f8:	c6 82       	std	Z+6, r12	; 0x06
   1a1fa:	d7 82       	std	Z+7, r13	; 0x07
   1a1fc:	e0 86       	std	Z+8, r14	; 0x08
   1a1fe:	f1 86       	std	Z+9, r15	; 0x09
   1a200:	15 83       	std	Z+5, r17	; 0x05
   1a202:	04 83       	std	Z+4, r16	; 0x04
   1a204:	84 e4       	ldi	r24, 0x44	; 68
   1a206:	9c e3       	ldi	r25, 0x3C	; 60
   1a208:	a0 e0       	ldi	r26, 0x00	; 0
   1a20a:	81 83       	std	Z+1, r24	; 0x01
   1a20c:	92 83       	std	Z+2, r25	; 0x02
   1a20e:	a3 83       	std	Z+3, r26	; 0x03
   1a210:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a214:	b8 01       	movw	r22, r16
   1a216:	6f 5f       	subi	r22, 0xFF	; 255
   1a218:	7f 4f       	sbci	r23, 0xFF	; 255
   1a21a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a21c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a21e:	0c db       	rcall	.-2536   	; 0x19838 <lif_writedirEOF>
   1a220:	89 2b       	or	r24, r25
   1a222:	09 f4       	brne	.+2      	; 0x1a226 <lif_newdir+0x1d6>
   1a224:	6f c0       	rjmp	.+222    	; 0x1a304 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1a226:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a228:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a22a:	0e 94 56 c6 	call	0x18cac	; 0x18cac <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1a22e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a230:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a232:	e4 5a       	subi	r30, 0xA4	; 164
   1a234:	ff 4f       	sbci	r31, 0xFF	; 255
   1a236:	c0 82       	st	Z, r12
   1a238:	d1 82       	std	Z+1, r13	; 0x01
   1a23a:	e2 82       	std	Z+2, r14	; 0x02
   1a23c:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   1a23e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a240:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a242:	e0 5a       	subi	r30, 0xA0	; 160
   1a244:	ff 4f       	sbci	r31, 0xFF	; 255
   1a246:	80 82       	st	Z, r8
   1a248:	91 82       	std	Z+1, r9	; 0x01
   1a24a:	a2 82       	std	Z+2, r10	; 0x02
   1a24c:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   1a24e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a250:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a252:	84 89       	ldd	r24, Z+20	; 0x14
   1a254:	95 89       	ldd	r25, Z+21	; 0x15
   1a256:	a6 89       	ldd	r26, Z+22	; 0x16
   1a258:	b7 89       	ldd	r27, Z+23	; 0x17
   1a25a:	88 0d       	add	r24, r8
   1a25c:	99 1d       	adc	r25, r9
   1a25e:	aa 1d       	adc	r26, r10
   1a260:	bb 1d       	adc	r27, r11
   1a262:	84 8b       	std	Z+20, r24	; 0x14
   1a264:	95 8b       	std	Z+21, r25	; 0x15
   1a266:	a6 8b       	std	Z+22, r26	; 0x16
   1a268:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   1a26a:	80 8d       	ldd	r24, Z+24	; 0x18
   1a26c:	91 8d       	ldd	r25, Z+25	; 0x19
   1a26e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a270:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a272:	88 19       	sub	r24, r8
   1a274:	99 09       	sbc	r25, r9
   1a276:	aa 09       	sbc	r26, r10
   1a278:	bb 09       	sbc	r27, r11
   1a27a:	80 8f       	std	Z+24, r24	; 0x18
   1a27c:	91 8f       	std	Z+25, r25	; 0x19
   1a27e:	a2 8f       	std	Z+26, r26	; 0x1a
   1a280:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   1a282:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a284:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a286:	01 96       	adiw	r24, 0x01	; 1
   1a288:	95 8f       	std	Z+29, r25	; 0x1d
   1a28a:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   1a28c:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a28e:	00 a3       	std	Z+32, r16	; 0x20
   1a290:	b8 01       	movw	r22, r16
   1a292:	cf 01       	movw	r24, r30
   1a294:	75 da       	rcall	.-2838   	; 0x19780 <lif_writedirindex>
   1a296:	89 2b       	or	r24, r25
   1a298:	a9 f1       	breq	.+106    	; 0x1a304 <lif_newdir+0x2b4>
   1a29a:	c8 01       	movw	r24, r16
   1a29c:	35 c0       	rjmp	.+106    	; 0x1a308 <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a29e:	c8 8e       	std	Y+24, r12	; 0x18
   1a2a0:	d9 8e       	std	Y+25, r13	; 0x19
   1a2a2:	ea 8e       	std	Y+26, r14	; 0x1a
   1a2a4:	fb 8e       	std	Y+27, r15	; 0x1b
   1a2a6:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a2a8:	66 24       	eor	r6, r6
   1a2aa:	63 94       	inc	r6
   1a2ac:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   1a2ae:	36 cf       	rjmp	.-404    	; 0x1a11c <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1a2b0:	f1 e0       	ldi	r31, 0x01	; 1
   1a2b2:	6f 16       	cp	r6, r31
   1a2b4:	71 04       	cpc	r7, r1
   1a2b6:	a9 f4       	brne	.+42     	; 0x1a2e2 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a2b8:	ea 89       	ldd	r30, Y+18	; 0x12
   1a2ba:	fb 89       	ldd	r31, Y+19	; 0x13
   1a2bc:	80 81       	ld	r24, Z
   1a2be:	91 81       	ldd	r25, Z+1	; 0x01
   1a2c0:	a2 81       	ldd	r26, Z+2	; 0x02
   1a2c2:	b3 81       	ldd	r27, Z+3	; 0x03
   1a2c4:	8c 19       	sub	r24, r12
   1a2c6:	9d 09       	sbc	r25, r13
   1a2c8:	ae 09       	sbc	r26, r14
   1a2ca:	bf 09       	sbc	r27, r15
   1a2cc:	88 15       	cp	r24, r8
   1a2ce:	99 05       	cpc	r25, r9
   1a2d0:	aa 05       	cpc	r26, r10
   1a2d2:	bb 05       	cpc	r27, r11
   1a2d4:	1c f4       	brge	.+6      	; 0x1a2dc <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   1a2d6:	61 2c       	mov	r6, r1
   1a2d8:	71 2c       	mov	r7, r1
   1a2da:	03 c0       	rjmp	.+6      	; 0x1a2e2 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   1a2dc:	82 e0       	ldi	r24, 0x02	; 2
   1a2de:	68 2e       	mov	r6, r24
   1a2e0:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a2e2:	ea 89       	ldd	r30, Y+18	; 0x12
   1a2e4:	fb 89       	ldd	r31, Y+19	; 0x13
   1a2e6:	c0 80       	ld	r12, Z
   1a2e8:	d1 80       	ldd	r13, Z+1	; 0x01
   1a2ea:	e2 80       	ldd	r14, Z+2	; 0x02
   1a2ec:	f3 80       	ldd	r15, Z+3	; 0x03
   1a2ee:	ee 89       	ldd	r30, Y+22	; 0x16
   1a2f0:	ff 89       	ldd	r31, Y+23	; 0x17
   1a2f2:	80 81       	ld	r24, Z
   1a2f4:	91 81       	ldd	r25, Z+1	; 0x01
   1a2f6:	a2 81       	ldd	r26, Z+2	; 0x02
   1a2f8:	b3 81       	ldd	r27, Z+3	; 0x03
   1a2fa:	c8 0e       	add	r12, r24
   1a2fc:	d9 1e       	adc	r13, r25
   1a2fe:	ea 1e       	adc	r14, r26
   1a300:	fb 1e       	adc	r15, r27
   1a302:	0c cf       	rjmp	.-488    	; 0x1a11c <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1a304:	8f ef       	ldi	r24, 0xFF	; 255
   1a306:	9f ef       	ldi	r25, 0xFF	; 255
}
   1a308:	6d 96       	adiw	r28, 0x1d	; 29
   1a30a:	e2 e1       	ldi	r30, 0x12	; 18
   1a30c:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0001a310 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a310:	a9 e3       	ldi	r26, 0x39	; 57
   1a312:	b1 e0       	ldi	r27, 0x01	; 1
   1a314:	ee e8       	ldi	r30, 0x8E	; 142
   1a316:	f1 ed       	ldi	r31, 0xD1	; 209
   1a318:	0c 94 1c e7 	jmp	0x1ce38	; 0x1ce38 <__prologue_saves__+0xc>
   1a31c:	6c 01       	movw	r12, r24
   1a31e:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a320:	be 01       	movw	r22, r28
   1a322:	66 5f       	subi	r22, 0xF6	; 246
   1a324:	7e 4f       	sbci	r23, 0xFE	; 254
   1a326:	0e 94 a5 c1 	call	0x1834a	; 0x1834a <lif_stat>
   1a32a:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a32c:	00 97       	sbiw	r24, 0x00	; 0
   1a32e:	09 f1       	breq	.+66     	; 0x1a372 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a330:	fc 01       	movw	r30, r24
   1a332:	80 8d       	ldd	r24, Z+24	; 0x18
   1a334:	91 8d       	ldd	r25, Z+25	; 0x19
   1a336:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a338:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a33a:	81 15       	cp	r24, r1
   1a33c:	f2 e0       	ldi	r31, 0x02	; 2
   1a33e:	9f 07       	cpc	r25, r31
   1a340:	a1 05       	cpc	r26, r1
   1a342:	b1 05       	cpc	r27, r1
   1a344:	c8 f4       	brcc	.+50     	; 0x1a378 <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   1a346:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a34a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a34e:	32 ff       	sbrs	r19, 2
   1a350:	10 c0       	rjmp	.+32     	; 0x1a372 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a352:	ed b7       	in	r30, 0x3d	; 61
   1a354:	fe b7       	in	r31, 0x3e	; 62
   1a356:	86 83       	std	Z+6, r24	; 0x06
   1a358:	97 83       	std	Z+7, r25	; 0x07
   1a35a:	a0 87       	std	Z+8, r26	; 0x08
   1a35c:	b1 87       	std	Z+9, r27	; 0x09
   1a35e:	d5 82       	std	Z+5, r13	; 0x05
   1a360:	c4 82       	std	Z+4, r12	; 0x04
   1a362:	85 e0       	ldi	r24, 0x05	; 5
   1a364:	9c e3       	ldi	r25, 0x3C	; 60
   1a366:	a0 e0       	ldi	r26, 0x00	; 0
   1a368:	81 83       	std	Z+1, r24	; 0x01
   1a36a:	92 83       	std	Z+2, r25	; 0x02
   1a36c:	a3 83       	std	Z+3, r26	; 0x03
   1a36e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        return(NULL);
   1a372:	00 e0       	ldi	r16, 0x00	; 0
   1a374:	10 e0       	ldi	r17, 0x00	; 0
   1a376:	c6 c0       	rjmp	.+396    	; 0x1a504 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a378:	64 e7       	ldi	r22, 0x74	; 116
   1a37a:	70 e0       	ldi	r23, 0x00	; 0
   1a37c:	80 e0       	ldi	r24, 0x00	; 0
   1a37e:	90 e0       	ldi	r25, 0x00	; 0
   1a380:	0e 94 11 c1 	call	0x18222	; 0x18222 <lif_calloc>
   1a384:	7c 01       	movw	r14, r24
    if(!LIF)
   1a386:	89 2b       	or	r24, r25
   1a388:	a1 f3       	breq	.-24     	; 0x1a372 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a38a:	c6 01       	movw	r24, r12
   1a38c:	0e 94 5c c1 	call	0x182b8	; 0x182b8 <lif_stralloc>
   1a390:	f7 01       	movw	r30, r14
   1a392:	91 83       	std	Z+1, r25	; 0x01
   1a394:	80 83       	st	Z, r24
    if(!LIF->name)
   1a396:	00 97       	sbiw	r24, 0x00	; 0
   1a398:	09 f4       	brne	.+2      	; 0x1a39c <lif_open_volume+0x8c>
   1a39a:	5e c0       	rjmp	.+188    	; 0x1a458 <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a39c:	f5 01       	movw	r30, r10
   1a39e:	80 8c       	ldd	r8, Z+24	; 0x18
   1a3a0:	91 8c       	ldd	r9, Z+25	; 0x19
   1a3a2:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a3a4:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a3a6:	f7 01       	movw	r30, r14
   1a3a8:	80 86       	std	Z+8, r8	; 0x08
   1a3aa:	91 86       	std	Z+9, r9	; 0x09
   1a3ac:	a2 86       	std	Z+10, r10	; 0x0a
   1a3ae:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a3b0:	77 27       	eor	r23, r23
   1a3b2:	6b 2d       	mov	r22, r11
   1a3b4:	5a 2d       	mov	r21, r10
   1a3b6:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a3b8:	88 20       	and	r8, r8
   1a3ba:	21 f0       	breq	.+8      	; 0x1a3c4 <lif_open_volume+0xb4>
        ++sectors;
   1a3bc:	4f 5f       	subi	r20, 0xFF	; 255
   1a3be:	5f 4f       	sbci	r21, 0xFF	; 255
   1a3c0:	6f 4f       	sbci	r22, 0xFF	; 255
   1a3c2:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a3c4:	f7 01       	movw	r30, r14
   1a3c6:	44 83       	std	Z+4, r20	; 0x04
   1a3c8:	55 83       	std	Z+5, r21	; 0x05
   1a3ca:	66 83       	std	Z+6, r22	; 0x06
   1a3cc:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a3ce:	b8 01       	movw	r22, r16
   1a3d0:	0e 94 7b c1 	call	0x182f6	; 0x182f6 <lif_open>
   1a3d4:	f7 01       	movw	r30, r14
   1a3d6:	93 83       	std	Z+3, r25	; 0x03
   1a3d8:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a3da:	89 2b       	or	r24, r25
   1a3dc:	e9 f1       	breq	.+122    	; 0x1a458 <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a3de:	00 e0       	ldi	r16, 0x00	; 0
   1a3e0:	11 e0       	ldi	r17, 0x01	; 1
   1a3e2:	20 e0       	ldi	r18, 0x00	; 0
   1a3e4:	30 e0       	ldi	r19, 0x00	; 0
   1a3e6:	a9 01       	movw	r20, r18
   1a3e8:	be 01       	movw	r22, r28
   1a3ea:	66 5f       	subi	r22, 0xF6	; 246
   1a3ec:	7f 4f       	sbci	r23, 0xFF	; 255
   1a3ee:	c7 01       	movw	r24, r14
   1a3f0:	0e 94 ff c1 	call	0x183fe	; 0x183fe <lif_read>
   1a3f4:	6f 3f       	cpi	r22, 0xFF	; 255
   1a3f6:	71 05       	cpc	r23, r1
   1a3f8:	81 05       	cpc	r24, r1
   1a3fa:	91 05       	cpc	r25, r1
   1a3fc:	09 f0       	breq	.+2      	; 0x1a400 <lif_open_volume+0xf0>
   1a3fe:	6c f4       	brge	.+26     	; 0x1a41a <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   1a400:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a404:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a408:	92 ff       	sbrs	r25, 2
   1a40a:	26 c0       	rjmp	.+76     	; 0x1a458 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a40c:	ed b7       	in	r30, 0x3d	; 61
   1a40e:	fe b7       	in	r31, 0x3e	; 62
   1a410:	d5 82       	std	Z+5, r13	; 0x05
   1a412:	c4 82       	std	Z+4, r12	; 0x04
   1a414:	8f ec       	ldi	r24, 0xCF	; 207
   1a416:	9b e3       	ldi	r25, 0x3B	; 59
   1a418:	19 c0       	rjmp	.+50     	; 0x1a44c <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a41a:	b7 01       	movw	r22, r14
   1a41c:	ce 01       	movw	r24, r28
   1a41e:	0a 96       	adiw	r24, 0x0a	; 10
   1a420:	0e 94 1f c4 	call	0x1883e	; 0x1883e <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a424:	c7 01       	movw	r24, r14
   1a426:	0e 94 2b c8 	call	0x19056	; 0x19056 <lif_check_volume>
   1a42a:	89 2b       	or	r24, r25
   1a42c:	c1 f4       	brne	.+48     	; 0x1a45e <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   1a42e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a432:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a436:	92 ff       	sbrs	r25, 2
   1a438:	0f c0       	rjmp	.+30     	; 0x1a458 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a43a:	f7 01       	movw	r30, r14
   1a43c:	80 81       	ld	r24, Z
   1a43e:	91 81       	ldd	r25, Z+1	; 0x01
   1a440:	ed b7       	in	r30, 0x3d	; 61
   1a442:	fe b7       	in	r31, 0x3e	; 62
   1a444:	95 83       	std	Z+5, r25	; 0x05
   1a446:	84 83       	std	Z+4, r24	; 0x04
   1a448:	8c e9       	ldi	r24, 0x9C	; 156
   1a44a:	9b e3       	ldi	r25, 0x3B	; 59
   1a44c:	a0 e0       	ldi	r26, 0x00	; 0
   1a44e:	81 83       	std	Z+1, r24	; 0x01
   1a450:	92 83       	std	Z+2, r25	; 0x02
   1a452:	a3 83       	std	Z+3, r26	; 0x03
   1a454:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a458:	c7 01       	movw	r24, r14
   1a45a:	9d d8       	rcall	.-3782   	; 0x19596 <lif_close_volume>
   1a45c:	8a cf       	rjmp	.-236    	; 0x1a372 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a45e:	f7 01       	movw	r30, r14
   1a460:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a462:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a464:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a466:	70 a9       	ldd	r23, Z+48	; 0x30
   1a468:	85 a9       	ldd	r24, Z+53	; 0x35
   1a46a:	96 a9       	ldd	r25, Z+54	; 0x36
   1a46c:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a46e:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a470:	48 0f       	add	r20, r24
   1a472:	59 1f       	adc	r21, r25
   1a474:	6a 1f       	adc	r22, r26
   1a476:	7b 1f       	adc	r23, r27
   1a478:	44 87       	std	Z+12, r20	; 0x0c
   1a47a:	55 87       	std	Z+13, r21	; 0x0d
   1a47c:	66 87       	std	Z+14, r22	; 0x0e
   1a47e:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a480:	84 81       	ldd	r24, Z+4	; 0x04
   1a482:	95 81       	ldd	r25, Z+5	; 0x05
   1a484:	a6 81       	ldd	r26, Z+6	; 0x06
   1a486:	b7 81       	ldd	r27, Z+7	; 0x07
   1a488:	84 1b       	sub	r24, r20
   1a48a:	95 0b       	sbc	r25, r21
   1a48c:	a6 0b       	sbc	r26, r22
   1a48e:	b7 0b       	sbc	r27, r23
   1a490:	80 8b       	std	Z+16, r24	; 0x10
   1a492:	91 8b       	std	Z+17, r25	; 0x11
   1a494:	a2 8b       	std	Z+18, r26	; 0x12
   1a496:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a498:	80 8f       	std	Z+24, r24	; 0x18
   1a49a:	91 8f       	std	Z+25, r25	; 0x19
   1a49c:	a2 8f       	std	Z+26, r26	; 0x1a
   1a49e:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a4a0:	14 8a       	std	Z+20, r1	; 0x14
   1a4a2:	15 8a       	std	Z+21, r1	; 0x15
   1a4a4:	16 8a       	std	Z+22, r1	; 0x16
   1a4a6:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a4a8:	17 8e       	std	Z+31, r1	; 0x1f
   1a4aa:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a4ac:	15 8e       	std	Z+29, r1	; 0x1d
   1a4ae:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a4b0:	11 a2       	std	Z+33, r1	; 0x21
   1a4b2:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a4b4:	13 a2       	std	Z+35, r1	; 0x23
   1a4b6:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   1a4b8:	c7 01       	movw	r24, r14
   1a4ba:	d6 d9       	rcall	.-3156   	; 0x19868 <lif_updatefree>
   1a4bc:	8c 01       	movw	r16, r24
   1a4be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a4c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a4c6:	01 15       	cp	r16, r1
   1a4c8:	11 05       	cpc	r17, r1
   1a4ca:	a1 f4       	brne	.+40     	; 0x1a4f4 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   1a4cc:	92 ff       	sbrs	r25, 2
   1a4ce:	0f c0       	rjmp	.+30     	; 0x1a4ee <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a4d0:	f7 01       	movw	r30, r14
   1a4d2:	80 81       	ld	r24, Z
   1a4d4:	91 81       	ldd	r25, Z+1	; 0x01
   1a4d6:	ed b7       	in	r30, 0x3d	; 61
   1a4d8:	fe b7       	in	r31, 0x3e	; 62
   1a4da:	95 83       	std	Z+5, r25	; 0x05
   1a4dc:	84 83       	std	Z+4, r24	; 0x04
   1a4de:	89 e6       	ldi	r24, 0x69	; 105
   1a4e0:	9b e3       	ldi	r25, 0x3B	; 59
   1a4e2:	a0 e0       	ldi	r26, 0x00	; 0
   1a4e4:	81 83       	std	Z+1, r24	; 0x01
   1a4e6:	92 83       	std	Z+2, r25	; 0x02
   1a4e8:	a3 83       	std	Z+3, r26	; 0x03
   1a4ea:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a4ee:	c7 01       	movw	r24, r14
   1a4f0:	52 d8       	rcall	.-3932   	; 0x19596 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a4f2:	08 c0       	rjmp	.+16     	; 0x1a504 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   1a4f4:	92 ff       	sbrs	r25, 2
   1a4f6:	05 c0       	rjmp	.+10     	; 0x1a502 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   1a4f8:	66 e3       	ldi	r22, 0x36	; 54
   1a4fa:	76 e1       	ldi	r23, 0x16	; 22
   1a4fc:	c7 01       	movw	r24, r14
   1a4fe:	0e 94 65 c6 	call	0x18cca	; 0x18cca <lif_dump_vol>
   1a502:	87 01       	movw	r16, r14
    return( LIF );
}
   1a504:	c8 01       	movw	r24, r16
   1a506:	c7 5c       	subi	r28, 0xC7	; 199
   1a508:	de 4f       	sbci	r29, 0xFE	; 254
   1a50a:	ec e0       	ldi	r30, 0x0C	; 12
   1a50c:	0c 94 38 e7 	jmp	0x1ce70	; 0x1ce70 <__epilogue_restores__+0xc>

0001a510 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a510:	2f 92       	push	r2
   1a512:	3f 92       	push	r3
   1a514:	4f 92       	push	r4
   1a516:	5f 92       	push	r5
   1a518:	6f 92       	push	r6
   1a51a:	8f 92       	push	r8
   1a51c:	9f 92       	push	r9
   1a51e:	af 92       	push	r10
   1a520:	bf 92       	push	r11
   1a522:	cf 92       	push	r12
   1a524:	df 92       	push	r13
   1a526:	ef 92       	push	r14
   1a528:	0f 93       	push	r16
   1a52a:	1f 93       	push	r17
   1a52c:	cf 93       	push	r28
   1a52e:	df 93       	push	r29
   1a530:	cd b7       	in	r28, 0x3d	; 61
   1a532:	de b7       	in	r29, 0x3e	; 62
   1a534:	af 97       	sbiw	r28, 0x2f	; 47
   1a536:	0f b6       	in	r0, 0x3f	; 63
   1a538:	f8 94       	cli
   1a53a:	de bf       	out	0x3e, r29	; 62
   1a53c:	0f be       	out	0x3f, r0	; 63
   1a53e:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a540:	68 e0       	ldi	r22, 0x08	; 8
   1a542:	79 e0       	ldi	r23, 0x09	; 9
   1a544:	e5 de       	rcall	.-566    	; 0x1a310 <lif_open_volume>
   1a546:	9f a7       	std	Y+47, r25	; 0x2f
   1a548:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a54a:	00 97       	sbiw	r24, 0x00	; 0
   1a54c:	09 f4       	brne	.+2      	; 0x1a550 <lif_dir+0x40>
   1a54e:	9e c1       	rjmp	.+828    	; 0x1a88c <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a550:	fc 01       	movw	r30, r24
   1a552:	86 a1       	ldd	r24, Z+38	; 0x26
   1a554:	88 23       	and	r24, r24
   1a556:	21 f0       	breq	.+8      	; 0x1a560 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a558:	8f 01       	movw	r16, r30
   1a55a:	0a 5d       	subi	r16, 0xDA	; 218
   1a55c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a55e:	02 c0       	rjmp	.+4      	; 0x1a564 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a560:	08 ee       	ldi	r16, 0xE8	; 232
   1a562:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a564:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a566:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a568:	87 5b       	subi	r24, 0xB7	; 183
   1a56a:	9f 4f       	sbci	r25, 0xFF	; 255
   1a56c:	0e 94 29 c6 	call	0x18c52	; 0x18c52 <lif_lifbcd2timestr>
   1a570:	ed b7       	in	r30, 0x3d	; 61
   1a572:	fe b7       	in	r31, 0x3e	; 62
   1a574:	97 83       	std	Z+7, r25	; 0x07
   1a576:	86 83       	std	Z+6, r24	; 0x06
   1a578:	15 83       	std	Z+5, r17	; 0x05
   1a57a:	04 83       	std	Z+4, r16	; 0x04
   1a57c:	82 e5       	ldi	r24, 0x52	; 82
   1a57e:	9b e3       	ldi	r25, 0x3B	; 59
   1a580:	a0 e0       	ldi	r26, 0x00	; 0
   1a582:	81 83       	std	Z+1, r24	; 0x01
   1a584:	92 83       	std	Z+2, r25	; 0x02
   1a586:	a3 83       	std	Z+3, r26	; 0x03
   1a588:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a58c:	82 e1       	ldi	r24, 0x12	; 18
   1a58e:	9b e3       	ldi	r25, 0x3B	; 59
   1a590:	a0 e0       	ldi	r26, 0x00	; 0
   1a592:	ed b7       	in	r30, 0x3d	; 61
   1a594:	fe b7       	in	r31, 0x3e	; 62
   1a596:	81 83       	std	Z+1, r24	; 0x01
   1a598:	92 83       	std	Z+2, r25	; 0x02
   1a59a:	a3 83       	std	Z+3, r26	; 0x03
   1a59c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a5a0:	00 e2       	ldi	r16, 0x20	; 32
   1a5a2:	10 e0       	ldi	r17, 0x00	; 0
   1a5a4:	1f 8b       	std	Y+23, r17	; 0x17
   1a5a6:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a5a8:	21 2c       	mov	r2, r1
   1a5aa:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a5ac:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5ae:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5b0:	06 5a       	subi	r16, 0xA6	; 166
   1a5b2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5b4:	1d 8f       	std	Y+29, r17	; 0x1d
   1a5b6:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a5b8:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5ba:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5bc:	00 5a       	subi	r16, 0xA0	; 160
   1a5be:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5c0:	1d a3       	std	Y+37, r17	; 0x25
   1a5c2:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a5c4:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5c6:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5c8:	04 59       	subi	r16, 0x94	; 148
   1a5ca:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5cc:	1f a3       	std	Y+39, r17	; 0x27
   1a5ce:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a5d0:	86 ec       	ldi	r24, 0xC6	; 198
   1a5d2:	9a e3       	ldi	r25, 0x3A	; 58
   1a5d4:	6c 01       	movw	r12, r24
   1a5d6:	e1 2c       	mov	r14, r1
   1a5d8:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5da:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5dc:	01 5b       	subi	r16, 0xB1	; 177
   1a5de:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5e0:	1f 8f       	std	Y+31, r17	; 0x1f
   1a5e2:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a5e4:	86 e9       	ldi	r24, 0x96	; 150
   1a5e6:	9a e3       	ldi	r25, 0x3A	; 58
   1a5e8:	2c 01       	movw	r4, r24
   1a5ea:	61 2c       	mov	r6, r1
   1a5ec:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5ee:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5f0:	04 5a       	subi	r16, 0xA4	; 164
   1a5f2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5f4:	19 a7       	std	Y+41, r17	; 0x29
   1a5f6:	08 a7       	std	Y+40, r16	; 0x28
   1a5f8:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5fa:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5fc:	02 59       	subi	r16, 0x92	; 146
   1a5fe:	1f 4f       	sbci	r17, 0xFF	; 255
   1a600:	1b a7       	std	Y+43, r17	; 0x2b
   1a602:	0a a7       	std	Y+42, r16	; 0x2a
   1a604:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a606:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a608:	0c 59       	subi	r16, 0x9C	; 156
   1a60a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a60c:	1d a7       	std	Y+45, r17	; 0x2d
   1a60e:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a610:	b1 01       	movw	r22, r2
   1a612:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a614:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a616:	4d d8       	rcall	.-3942   	; 0x196b2 <lif_readdirindex>
   1a618:	89 2b       	or	r24, r25
   1a61a:	09 f4       	brne	.+2      	; 0x1a61e <lif_dir+0x10e>
   1a61c:	ad c0       	rjmp	.+346    	; 0x1a778 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a61e:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a620:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a622:	8d 91       	ld	r24, X+
   1a624:	9c 91       	ld	r25, X
   1a626:	8f 3f       	cpi	r24, 0xFF	; 255
   1a628:	bf ef       	ldi	r27, 0xFF	; 255
   1a62a:	9b 07       	cpc	r25, r27
   1a62c:	09 f4       	brne	.+2      	; 0x1a630 <lif_dir+0x120>
   1a62e:	a4 c0       	rjmp	.+328    	; 0x1a778 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a630:	ec a1       	ldd	r30, Y+36	; 0x24
   1a632:	fd a1       	ldd	r31, Y+37	; 0x25
   1a634:	40 81       	ld	r20, Z
   1a636:	51 81       	ldd	r21, Z+1	; 0x01
   1a638:	62 81       	ldd	r22, Z+2	; 0x02
   1a63a:	73 81       	ldd	r23, Z+3	; 0x03
   1a63c:	00 27       	eor	r16, r16
   1a63e:	14 2f       	mov	r17, r20
   1a640:	25 2f       	mov	r18, r21
   1a642:	36 2f       	mov	r19, r22
   1a644:	08 8f       	std	Y+24, r16	; 0x18
   1a646:	19 8f       	std	Y+25, r17	; 0x19
   1a648:	2a 8f       	std	Y+26, r18	; 0x1a
   1a64a:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a64c:	8c 7f       	andi	r24, 0xFC	; 252
   1a64e:	80 31       	cpi	r24, 0x10	; 16
   1a650:	90 4e       	sbci	r25, 0xE0	; 224
   1a652:	09 f0       	breq	.+2      	; 0x1a656 <lif_dir+0x146>
   1a654:	4b c0       	rjmp	.+150    	; 0x1a6ec <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a656:	ae a1       	ldd	r26, Y+38	; 0x26
   1a658:	bf a1       	ldd	r27, Y+39	; 0x27
   1a65a:	8d 91       	ld	r24, X+
   1a65c:	9c 91       	ld	r25, X
   1a65e:	00 97       	sbiw	r24, 0x00	; 0
   1a660:	b9 f0       	breq	.+46     	; 0x1a690 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a662:	4c 01       	movw	r8, r24
   1a664:	a1 2c       	mov	r10, r1
   1a666:	b1 2c       	mov	r11, r1
   1a668:	33 27       	eor	r19, r19
   1a66a:	2b 2d       	mov	r18, r11
   1a66c:	1a 2d       	mov	r17, r10
   1a66e:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a670:	88 23       	and	r24, r24
   1a672:	21 f0       	breq	.+8      	; 0x1a67c <lif_dir+0x16c>
        ++sectors;
   1a674:	0f 5f       	subi	r16, 0xFF	; 255
   1a676:	1f 4f       	sbci	r17, 0xFF	; 255
   1a678:	2f 4f       	sbci	r18, 0xFF	; 255
   1a67a:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a67c:	40 17       	cp	r20, r16
   1a67e:	51 07       	cpc	r21, r17
   1a680:	62 07       	cpc	r22, r18
   1a682:	73 07       	cpc	r23, r19
   1a684:	29 f4       	brne	.+10     	; 0x1a690 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a686:	88 8e       	std	Y+24, r8	; 0x18
   1a688:	99 8e       	std	Y+25, r9	; 0x19
   1a68a:	aa 8e       	std	Y+26, r10	; 0x1a
   1a68c:	bb 8e       	std	Y+27, r11	; 0x1b
   1a68e:	2e c0       	rjmp	.+92     	; 0x1a6ec <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a690:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a694:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a698:	32 ff       	sbrs	r19, 2
   1a69a:	24 c0       	rjmp	.+72     	; 0x1a6e4 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a69c:	4c 01       	movw	r8, r24
   1a69e:	a1 2c       	mov	r10, r1
   1a6a0:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a6a2:	33 27       	eor	r19, r19
   1a6a4:	2b 2d       	mov	r18, r11
   1a6a6:	1a 2d       	mov	r17, r10
   1a6a8:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a6aa:	88 23       	and	r24, r24
   1a6ac:	21 f0       	breq	.+8      	; 0x1a6b6 <lif_dir+0x1a6>
        ++sectors;
   1a6ae:	0f 5f       	subi	r16, 0xFF	; 255
   1a6b0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a6b2:	2f 4f       	sbci	r18, 0xFF	; 255
   1a6b4:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a6b6:	ed b7       	in	r30, 0x3d	; 61
   1a6b8:	fe b7       	in	r31, 0x3e	; 62
   1a6ba:	46 87       	std	Z+14, r20	; 0x0e
   1a6bc:	57 87       	std	Z+15, r21	; 0x0f
   1a6be:	60 8b       	std	Z+16, r22	; 0x10
   1a6c0:	71 8b       	std	Z+17, r23	; 0x11
   1a6c2:	02 87       	std	Z+10, r16	; 0x0a
   1a6c4:	13 87       	std	Z+11, r17	; 0x0b
   1a6c6:	24 87       	std	Z+12, r18	; 0x0c
   1a6c8:	35 87       	std	Z+13, r19	; 0x0d
   1a6ca:	86 82       	std	Z+6, r8	; 0x06
   1a6cc:	97 82       	std	Z+7, r9	; 0x07
   1a6ce:	a0 86       	std	Z+8, r10	; 0x08
   1a6d0:	b1 86       	std	Z+9, r11	; 0x09
   1a6d2:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a6d4:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a6d6:	15 83       	std	Z+5, r17	; 0x05
   1a6d8:	04 83       	std	Z+4, r16	; 0x04
   1a6da:	c1 82       	std	Z+1, r12	; 0x01
   1a6dc:	d2 82       	std	Z+2, r13	; 0x02
   1a6de:	e3 82       	std	Z+3, r14	; 0x03
   1a6e0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a6e4:	01 e2       	ldi	r16, 0x21	; 33
   1a6e6:	10 e0       	ldi	r17, 0x00	; 0
   1a6e8:	1f 8b       	std	Y+23, r17	; 0x17
   1a6ea:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a6ec:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a6ee:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a6f0:	8d 90       	ld	r8, X+
   1a6f2:	9c 90       	ld	r9, X
   1a6f4:	81 14       	cp	r8, r1
   1a6f6:	91 04       	cpc	r9, r1
   1a6f8:	19 f0       	breq	.+6      	; 0x1a700 <lif_dir+0x1f0>
   1a6fa:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a6fc:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a6fe:	02 c0       	rjmp	.+4      	; 0x1a704 <lif_dir+0x1f4>
   1a700:	05 e4       	ldi	r16, 0x45	; 69
   1a702:	16 e1       	ldi	r17, 0x16	; 22
   1a704:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a706:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a708:	8d 91       	ld	r24, X+
   1a70a:	9d 91       	ld	r25, X+
   1a70c:	0d 90       	ld	r0, X+
   1a70e:	bc 91       	ld	r27, X
   1a710:	a0 2d       	mov	r26, r0
   1a712:	88 a3       	std	Y+32, r24	; 0x20
   1a714:	99 a3       	std	Y+33, r25	; 0x21
   1a716:	aa a3       	std	Y+34, r26	; 0x22
   1a718:	bb a3       	std	Y+35, r27	; 0x23
   1a71a:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a71c:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a71e:	a0 80       	ld	r10, Z
   1a720:	b1 80       	ldd	r11, Z+1	; 0x01
   1a722:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a724:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a726:	0e 94 29 c6 	call	0x18c52	; 0x18c52 <lif_lifbcd2timestr>
   1a72a:	ed b7       	in	r30, 0x3d	; 61
   1a72c:	fe b7       	in	r31, 0x3e	; 62
   1a72e:	95 8b       	std	Z+21, r25	; 0x15
   1a730:	84 8b       	std	Z+20, r24	; 0x14
   1a732:	b3 8a       	std	Z+19, r11	; 0x13
   1a734:	a2 8a       	std	Z+18, r10	; 0x12
   1a736:	2e 89       	ldd	r18, Y+22	; 0x16
   1a738:	3f 89       	ldd	r19, Y+23	; 0x17
   1a73a:	31 8b       	std	Z+17, r19	; 0x11
   1a73c:	20 8b       	std	Z+16, r18	; 0x10
   1a73e:	88 8d       	ldd	r24, Y+24	; 0x18
   1a740:	99 8d       	ldd	r25, Y+25	; 0x19
   1a742:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a744:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a746:	84 87       	std	Z+12, r24	; 0x0c
   1a748:	95 87       	std	Z+13, r25	; 0x0d
   1a74a:	a6 87       	std	Z+14, r26	; 0x0e
   1a74c:	b7 87       	std	Z+15, r27	; 0x0f
   1a74e:	88 a1       	ldd	r24, Y+32	; 0x20
   1a750:	99 a1       	ldd	r25, Y+33	; 0x21
   1a752:	aa a1       	ldd	r26, Y+34	; 0x22
   1a754:	bb a1       	ldd	r27, Y+35	; 0x23
   1a756:	80 87       	std	Z+8, r24	; 0x08
   1a758:	91 87       	std	Z+9, r25	; 0x09
   1a75a:	a2 87       	std	Z+10, r26	; 0x0a
   1a75c:	b3 87       	std	Z+11, r27	; 0x0b
   1a75e:	97 82       	std	Z+7, r9	; 0x07
   1a760:	86 82       	std	Z+6, r8	; 0x06
   1a762:	15 83       	std	Z+5, r17	; 0x05
   1a764:	04 83       	std	Z+4, r16	; 0x04
   1a766:	41 82       	std	Z+1, r4	; 0x01
   1a768:	52 82       	std	Z+2, r5	; 0x02
   1a76a:	63 82       	std	Z+3, r6	; 0x03
   1a76c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a770:	ff ef       	ldi	r31, 0xFF	; 255
   1a772:	2f 1a       	sub	r2, r31
   1a774:	3f 0a       	sbc	r3, r31
    }
   1a776:	4c cf       	rjmp	.-360    	; 0x1a610 <lif_dir+0x100>

    printf("\n");
   1a778:	84 e9       	ldi	r24, 0x94	; 148
   1a77a:	9a e3       	ldi	r25, 0x3A	; 58
   1a77c:	a0 e0       	ldi	r26, 0x00	; 0
   1a77e:	ed b7       	in	r30, 0x3d	; 61
   1a780:	fe b7       	in	r31, 0x3e	; 62
   1a782:	81 83       	std	Z+1, r24	; 0x01
   1a784:	92 83       	std	Z+2, r25	; 0x02
   1a786:	a3 83       	std	Z+3, r26	; 0x03
   1a788:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a78c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a78e:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a790:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a792:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a794:	09 2e       	mov	r0, r25
   1a796:	00 0c       	add	r0, r0
   1a798:	aa 0b       	sbc	r26, r26
   1a79a:	bb 0b       	sbc	r27, r27
   1a79c:	ed b7       	in	r30, 0x3d	; 61
   1a79e:	fe b7       	in	r31, 0x3e	; 62
   1a7a0:	84 83       	std	Z+4, r24	; 0x04
   1a7a2:	95 83       	std	Z+5, r25	; 0x05
   1a7a4:	a6 83       	std	Z+6, r26	; 0x06
   1a7a6:	b7 83       	std	Z+7, r27	; 0x07
   1a7a8:	88 e8       	ldi	r24, 0x88	; 136
   1a7aa:	9a e3       	ldi	r25, 0x3A	; 58
   1a7ac:	a0 e0       	ldi	r26, 0x00	; 0
   1a7ae:	81 83       	std	Z+1, r24	; 0x01
   1a7b0:	92 83       	std	Z+2, r25	; 0x02
   1a7b2:	a3 83       	std	Z+3, r26	; 0x03
   1a7b4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a7b8:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7ba:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7bc:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a7be:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a7c0:	09 2e       	mov	r0, r25
   1a7c2:	00 0c       	add	r0, r0
   1a7c4:	aa 0b       	sbc	r26, r26
   1a7c6:	bb 0b       	sbc	r27, r27
   1a7c8:	ed b7       	in	r30, 0x3d	; 61
   1a7ca:	fe b7       	in	r31, 0x3e	; 62
   1a7cc:	84 83       	std	Z+4, r24	; 0x04
   1a7ce:	95 83       	std	Z+5, r25	; 0x05
   1a7d0:	a6 83       	std	Z+6, r26	; 0x06
   1a7d2:	b7 83       	std	Z+7, r27	; 0x07
   1a7d4:	8b e7       	ldi	r24, 0x7B	; 123
   1a7d6:	9a e3       	ldi	r25, 0x3A	; 58
   1a7d8:	a0 e0       	ldi	r26, 0x00	; 0
   1a7da:	81 83       	std	Z+1, r24	; 0x01
   1a7dc:	92 83       	std	Z+2, r25	; 0x02
   1a7de:	a3 83       	std	Z+3, r26	; 0x03
   1a7e0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a7e4:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7e6:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7e8:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a7ea:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a7ec:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a7ee:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a7f0:	ed b7       	in	r30, 0x3d	; 61
   1a7f2:	fe b7       	in	r31, 0x3e	; 62
   1a7f4:	84 83       	std	Z+4, r24	; 0x04
   1a7f6:	95 83       	std	Z+5, r25	; 0x05
   1a7f8:	a6 83       	std	Z+6, r26	; 0x06
   1a7fa:	b7 83       	std	Z+7, r27	; 0x07
   1a7fc:	8a e6       	ldi	r24, 0x6A	; 106
   1a7fe:	9a e3       	ldi	r25, 0x3A	; 58
   1a800:	a0 e0       	ldi	r26, 0x00	; 0
   1a802:	81 83       	std	Z+1, r24	; 0x01
   1a804:	92 83       	std	Z+2, r25	; 0x02
   1a806:	a3 83       	std	Z+3, r26	; 0x03
   1a808:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a80c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a80e:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a810:	85 a9       	ldd	r24, Z+53	; 0x35
   1a812:	96 a9       	ldd	r25, Z+54	; 0x36
   1a814:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a816:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a818:	ed b7       	in	r30, 0x3d	; 61
   1a81a:	fe b7       	in	r31, 0x3e	; 62
   1a81c:	84 83       	std	Z+4, r24	; 0x04
   1a81e:	95 83       	std	Z+5, r25	; 0x05
   1a820:	a6 83       	std	Z+6, r26	; 0x06
   1a822:	b7 83       	std	Z+7, r27	; 0x07
   1a824:	87 e5       	ldi	r24, 0x57	; 87
   1a826:	9a e3       	ldi	r25, 0x3A	; 58
   1a828:	a0 e0       	ldi	r26, 0x00	; 0
   1a82a:	81 83       	std	Z+1, r24	; 0x01
   1a82c:	92 83       	std	Z+2, r25	; 0x02
   1a82e:	a3 83       	std	Z+3, r26	; 0x03
   1a830:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a834:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a836:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a838:	84 89       	ldd	r24, Z+20	; 0x14
   1a83a:	95 89       	ldd	r25, Z+21	; 0x15
   1a83c:	a6 89       	ldd	r26, Z+22	; 0x16
   1a83e:	b7 89       	ldd	r27, Z+23	; 0x17
   1a840:	ed b7       	in	r30, 0x3d	; 61
   1a842:	fe b7       	in	r31, 0x3e	; 62
   1a844:	84 83       	std	Z+4, r24	; 0x04
   1a846:	95 83       	std	Z+5, r25	; 0x05
   1a848:	a6 83       	std	Z+6, r26	; 0x06
   1a84a:	b7 83       	std	Z+7, r27	; 0x07
   1a84c:	84 e4       	ldi	r24, 0x44	; 68
   1a84e:	9a e3       	ldi	r25, 0x3A	; 58
   1a850:	a0 e0       	ldi	r26, 0x00	; 0
   1a852:	81 83       	std	Z+1, r24	; 0x01
   1a854:	92 83       	std	Z+2, r25	; 0x02
   1a856:	a3 83       	std	Z+3, r26	; 0x03
   1a858:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a85c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a85e:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a860:	80 8d       	ldd	r24, Z+24	; 0x18
   1a862:	91 8d       	ldd	r25, Z+25	; 0x19
   1a864:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a866:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a868:	ed b7       	in	r30, 0x3d	; 61
   1a86a:	fe b7       	in	r31, 0x3e	; 62
   1a86c:	84 83       	std	Z+4, r24	; 0x04
   1a86e:	95 83       	std	Z+5, r25	; 0x05
   1a870:	a6 83       	std	Z+6, r26	; 0x06
   1a872:	b7 83       	std	Z+7, r27	; 0x07
   1a874:	81 e3       	ldi	r24, 0x31	; 49
   1a876:	9a e3       	ldi	r25, 0x3A	; 58
   1a878:	a0 e0       	ldi	r26, 0x00	; 0
   1a87a:	81 83       	std	Z+1, r24	; 0x01
   1a87c:	92 83       	std	Z+2, r25	; 0x02
   1a87e:	a3 83       	std	Z+3, r26	; 0x03
   1a880:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a884:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a886:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a888:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a88c:	af 96       	adiw	r28, 0x2f	; 47
   1a88e:	0f b6       	in	r0, 0x3f	; 63
   1a890:	f8 94       	cli
   1a892:	de bf       	out	0x3e, r29	; 62
   1a894:	0f be       	out	0x3f, r0	; 63
   1a896:	cd bf       	out	0x3d, r28	; 61
   1a898:	df 91       	pop	r29
   1a89a:	cf 91       	pop	r28
   1a89c:	1f 91       	pop	r17
   1a89e:	0f 91       	pop	r16
   1a8a0:	ef 90       	pop	r14
   1a8a2:	df 90       	pop	r13
   1a8a4:	cf 90       	pop	r12
   1a8a6:	bf 90       	pop	r11
   1a8a8:	af 90       	pop	r10
   1a8aa:	9f 90       	pop	r9
   1a8ac:	8f 90       	pop	r8
   1a8ae:	6f 90       	pop	r6
   1a8b0:	5f 90       	pop	r5
   1a8b2:	4f 90       	pop	r4
   1a8b4:	3f 90       	pop	r3
   1a8b6:	2f 90       	pop	r2
   1a8b8:	08 95       	ret

0001a8ba <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a8ba:	a5 e0       	ldi	r26, 0x05	; 5
   1a8bc:	b0 e0       	ldi	r27, 0x00	; 0
   1a8be:	e3 e6       	ldi	r30, 0x63	; 99
   1a8c0:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8c2:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
   1a8c6:	7c 01       	movw	r14, r24
   1a8c8:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a8ca:	cb 01       	movw	r24, r22
   1a8cc:	0e 94 1a c3 	call	0x18634	; 0x18634 <lif_checkname>
   1a8d0:	89 2b       	or	r24, r25
   1a8d2:	69 f4       	brne	.+26     	; 0x1a8ee <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a8d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a8d8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a8dc:	92 ff       	sbrs	r25, 2
   1a8de:	48 c0       	rjmp	.+144    	; 0x1a970 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a8e0:	ed b7       	in	r30, 0x3d	; 61
   1a8e2:	fe b7       	in	r31, 0x3e	; 62
   1a8e4:	d5 83       	std	Z+5, r29	; 0x05
   1a8e6:	c4 83       	std	Z+4, r28	; 0x04
   1a8e8:	8a e0       	ldi	r24, 0x0A	; 10
   1a8ea:	9a e3       	ldi	r25, 0x3A	; 58
   1a8ec:	15 c0       	rjmp	.+42     	; 0x1a918 <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a8ee:	fe 01       	movw	r30, r28
   1a8f0:	01 90       	ld	r0, Z+
   1a8f2:	00 20       	and	r0, r0
   1a8f4:	e9 f7       	brne	.-6      	; 0x1a8f0 <lif_find_file+0x36>
   1a8f6:	31 97       	sbiw	r30, 0x01	; 1
   1a8f8:	ec 1b       	sub	r30, r28
   1a8fa:	fd 0b       	sbc	r31, r29
   1a8fc:	3b 97       	sbiw	r30, 0x0b	; 11
   1a8fe:	98 f0       	brcs	.+38     	; 0x1a926 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a900:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a904:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a908:	92 ff       	sbrs	r25, 2
   1a90a:	32 c0       	rjmp	.+100    	; 0x1a970 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a90c:	ed b7       	in	r30, 0x3d	; 61
   1a90e:	fe b7       	in	r31, 0x3e	; 62
   1a910:	d5 83       	std	Z+5, r29	; 0x05
   1a912:	c4 83       	std	Z+4, r28	; 0x04
   1a914:	85 ee       	ldi	r24, 0xE5	; 229
   1a916:	99 e3       	ldi	r25, 0x39	; 57
   1a918:	a0 e0       	ldi	r26, 0x00	; 0
   1a91a:	81 83       	std	Z+1, r24	; 0x01
   1a91c:	92 83       	std	Z+2, r25	; 0x02
   1a91e:	a3 83       	std	Z+3, r26	; 0x03
   1a920:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1a924:	25 c0       	rjmp	.+74     	; 0x1a970 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a926:	e1 14       	cp	r14, r1
   1a928:	f1 04       	cpc	r15, r1
   1a92a:	11 f1       	breq	.+68     	; 0x1a970 <lif_find_file+0xb6>
   1a92c:	00 e0       	ldi	r16, 0x00	; 0
   1a92e:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a930:	67 01       	movw	r12, r14
   1a932:	fa e5       	ldi	r31, 0x5A	; 90
   1a934:	cf 0e       	add	r12, r31
   1a936:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a938:	57 01       	movw	r10, r14
   1a93a:	2f e4       	ldi	r18, 0x4F	; 79
   1a93c:	a2 0e       	add	r10, r18
   1a93e:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a940:	b8 01       	movw	r22, r16
   1a942:	c7 01       	movw	r24, r14
   1a944:	0e 94 59 cb 	call	0x196b2	; 0x196b2 <lif_readdirindex>
   1a948:	89 2b       	or	r24, r25
   1a94a:	91 f0       	breq	.+36     	; 0x1a970 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a94c:	f6 01       	movw	r30, r12
   1a94e:	80 81       	ld	r24, Z
   1a950:	91 81       	ldd	r25, Z+1	; 0x01
   1a952:	8f 3f       	cpi	r24, 0xFF	; 255
   1a954:	ff ef       	ldi	r31, 0xFF	; 255
   1a956:	9f 07       	cpc	r25, r31
   1a958:	59 f0       	breq	.+22     	; 0x1a970 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a95a:	89 2b       	or	r24, r25
   1a95c:	31 f0       	breq	.+12     	; 0x1a96a <lif_find_file+0xb0>
   1a95e:	be 01       	movw	r22, r28
   1a960:	c5 01       	movw	r24, r10
   1a962:	0e 94 da 31 	call	0x63b4	; 0x63b4 <strcasecmp>
   1a966:	89 2b       	or	r24, r25
   1a968:	31 f0       	breq	.+12     	; 0x1a976 <lif_find_file+0xbc>
            break;
        ++index;
   1a96a:	0f 5f       	subi	r16, 0xFF	; 255
   1a96c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a96e:	e8 cf       	rjmp	.-48     	; 0x1a940 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a970:	8f ef       	ldi	r24, 0xFF	; 255
   1a972:	9f ef       	ldi	r25, 0xFF	; 255
   1a974:	01 c0       	rjmp	.+2      	; 0x1a978 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a976:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a978:	cd b7       	in	r28, 0x3d	; 61
   1a97a:	de b7       	in	r29, 0x3e	; 62
   1a97c:	25 96       	adiw	r28, 0x05	; 5
   1a97e:	ea e0       	ldi	r30, 0x0A	; 10
   1a980:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

0001a984 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a984:	a5 e0       	ldi	r26, 0x05	; 5
   1a986:	b0 e0       	ldi	r27, 0x00	; 0
   1a988:	e8 ec       	ldi	r30, 0xC8	; 200
   1a98a:	f4 ed       	ldi	r31, 0xD4	; 212
   1a98c:	0c 94 20 e7 	jmp	0x1ce40	; 0x1ce40 <__prologue_saves__+0x14>
   1a990:	6b 01       	movw	r12, r22
   1a992:	7c 01       	movw	r14, r24
   1a994:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a996:	20 e0       	ldi	r18, 0x00	; 0
   1a998:	31 e0       	ldi	r19, 0x01	; 1
   1a99a:	40 e0       	ldi	r20, 0x00	; 0
   1a99c:	50 e0       	ldi	r21, 0x00	; 0
   1a99e:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
    if(!pos)
   1a9a2:	61 15       	cp	r22, r1
   1a9a4:	71 05       	cpc	r23, r1
   1a9a6:	e1 f1       	breq	.+120    	; 0x1aa20 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a9a8:	c0 e0       	ldi	r28, 0x00	; 0
   1a9aa:	d1 e0       	ldi	r29, 0x01	; 1
   1a9ac:	c6 1b       	sub	r28, r22
   1a9ae:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a9b0:	f8 01       	movw	r30, r16
   1a9b2:	8f ee       	ldi	r24, 0xEF	; 239
   1a9b4:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a9b6:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a9b8:	cf 01       	movw	r24, r30
   1a9ba:	80 1b       	sub	r24, r16
   1a9bc:	91 0b       	sbc	r25, r17
   1a9be:	8c 17       	cp	r24, r28
   1a9c0:	9d 07       	cpc	r25, r29
   1a9c2:	14 f4       	brge	.+4      	; 0x1a9c8 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a9c4:	21 93       	st	Z+, r18
   1a9c6:	f8 cf       	rjmp	.-16     	; 0x1a9b8 <lif_e010_pad_sector+0x34>
   1a9c8:	1c 16       	cp	r1, r28
   1a9ca:	1d 06       	cpc	r1, r29
   1a9cc:	14 f0       	brlt	.+4      	; 0x1a9d2 <lif_e010_pad_sector+0x4e>
   1a9ce:	c1 e0       	ldi	r28, 0x01	; 1
   1a9d0:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a9d2:	ce 01       	movw	r24, r28
   1a9d4:	0d 2e       	mov	r0, r29
   1a9d6:	00 0c       	add	r0, r0
   1a9d8:	aa 0b       	sbc	r26, r26
   1a9da:	bb 0b       	sbc	r27, r27
   1a9dc:	bc 01       	movw	r22, r24
   1a9de:	cd 01       	movw	r24, r26
   1a9e0:	6c 0d       	add	r22, r12
   1a9e2:	7d 1d       	adc	r23, r13
   1a9e4:	8e 1d       	adc	r24, r14
   1a9e6:	9f 1d       	adc	r25, r15
   1a9e8:	20 e0       	ldi	r18, 0x00	; 0
   1a9ea:	31 e0       	ldi	r19, 0x01	; 1
   1a9ec:	40 e0       	ldi	r20, 0x00	; 0
   1a9ee:	50 e0       	ldi	r21, 0x00	; 0
   1a9f0:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a9f4:	61 15       	cp	r22, r1
   1a9f6:	71 05       	cpc	r23, r1
   1a9f8:	b1 f0       	breq	.+44     	; 0x1aa26 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a9fa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a9fe:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aa02:	32 ff       	sbrs	r19, 2
   1aa04:	12 c0       	rjmp	.+36     	; 0x1aa2a <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1aa06:	ed b7       	in	r30, 0x3d	; 61
   1aa08:	fe b7       	in	r31, 0x3e	; 62
   1aa0a:	75 83       	std	Z+5, r23	; 0x05
   1aa0c:	64 83       	std	Z+4, r22	; 0x04
   1aa0e:	8c ea       	ldi	r24, 0xAC	; 172
   1aa10:	99 e3       	ldi	r25, 0x39	; 57
   1aa12:	a0 e0       	ldi	r26, 0x00	; 0
   1aa14:	81 83       	std	Z+1, r24	; 0x01
   1aa16:	92 83       	std	Z+2, r25	; 0x02
   1aa18:	a3 83       	std	Z+3, r26	; 0x03
   1aa1a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1aa1e:	05 c0       	rjmp	.+10     	; 0x1aa2a <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1aa20:	80 e0       	ldi	r24, 0x00	; 0
   1aa22:	90 e0       	ldi	r25, 0x00	; 0
   1aa24:	04 c0       	rjmp	.+8      	; 0x1aa2e <lif_e010_pad_sector+0xaa>
   1aa26:	ce 01       	movw	r24, r28
   1aa28:	02 c0       	rjmp	.+4      	; 0x1aa2e <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1aa2a:	8f ef       	ldi	r24, 0xFF	; 255
   1aa2c:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1aa2e:	cd b7       	in	r28, 0x3d	; 61
   1aa30:	de b7       	in	r29, 0x3e	; 62
   1aa32:	25 96       	adiw	r28, 0x05	; 5
   1aa34:	e8 e0       	ldi	r30, 0x08	; 8
   1aa36:	0c 94 3c e7 	jmp	0x1ce78	; 0x1ce78 <__epilogue_restores__+0x14>

0001aa3a <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1aa3a:	a5 e0       	ldi	r26, 0x05	; 5
   1aa3c:	b0 e0       	ldi	r27, 0x00	; 0
   1aa3e:	e3 e2       	ldi	r30, 0x23	; 35
   1aa40:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa42:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   1aa46:	ec 01       	movw	r28, r24
   1aa48:	4a 01       	movw	r8, r20
   1aa4a:	5b 01       	movw	r10, r22
   1aa4c:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1aa4e:	fc 01       	movw	r30, r24
   1aa50:	01 90       	ld	r0, Z+
   1aa52:	00 20       	and	r0, r0
   1aa54:	e9 f7       	brne	.-6      	; 0x1aa50 <lif_ascii_string_to_e010+0x16>
   1aa56:	31 97       	sbiw	r30, 0x01	; 1
   1aa58:	6f 01       	movw	r12, r30
   1aa5a:	c8 1a       	sub	r12, r24
   1aa5c:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aa5e:	41 2c       	mov	r4, r1
   1aa60:	51 2c       	mov	r5, r1
   1aa62:	32 01       	movw	r6, r4
   1aa64:	53 94       	inc	r5
   1aa66:	cb 01       	movw	r24, r22
   1aa68:	ba 01       	movw	r22, r20
   1aa6a:	a3 01       	movw	r20, r6
   1aa6c:	92 01       	movw	r18, r4
   1aa6e:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
   1aa72:	21 2c       	mov	r2, r1
   1aa74:	33 24       	eor	r3, r3
   1aa76:	33 94       	inc	r3
   1aa78:	c1 01       	movw	r24, r2
   1aa7a:	86 1b       	sub	r24, r22
   1aa7c:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1aa7e:	86 30       	cpi	r24, 0x06	; 6
   1aa80:	91 05       	cpc	r25, r1
   1aa82:	20 f0       	brcs	.+8      	; 0x1aa8c <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aa84:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1aa86:	00 e0       	ldi	r16, 0x00	; 0
   1aa88:	10 e0       	ldi	r17, 0x00	; 0
   1aa8a:	17 c0       	rjmp	.+46     	; 0x1aaba <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1aa8c:	a7 01       	movw	r20, r14
   1aa8e:	c5 01       	movw	r24, r10
   1aa90:	b4 01       	movw	r22, r8
   1aa92:	78 df       	rcall	.-272    	; 0x1a984 <lif_e010_pad_sector>
   1aa94:	8c 01       	movw	r16, r24
        if(ind < 0)
   1aa96:	97 fd       	sbrc	r25, 7
   1aa98:	83 c0       	rjmp	.+262    	; 0x1aba0 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1aa9a:	09 2e       	mov	r0, r25
   1aa9c:	00 0c       	add	r0, r0
   1aa9e:	aa 0b       	sbc	r26, r26
   1aaa0:	bb 0b       	sbc	r27, r27
   1aaa2:	bc 01       	movw	r22, r24
   1aaa4:	cd 01       	movw	r24, r26
   1aaa6:	68 0d       	add	r22, r8
   1aaa8:	79 1d       	adc	r23, r9
   1aaaa:	8a 1d       	adc	r24, r10
   1aaac:	9b 1d       	adc	r25, r11
   1aaae:	a3 01       	movw	r20, r6
   1aab0:	92 01       	movw	r18, r4
   1aab2:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
   1aab6:	26 1a       	sub	r2, r22
   1aab8:	37 0a       	sbc	r3, r23
   1aaba:	f7 01       	movw	r30, r14
   1aabc:	e0 0f       	add	r30, r16
   1aabe:	f1 1f       	adc	r31, r17
   1aac0:	0d 5f       	subi	r16, 0xFD	; 253
   1aac2:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1aac4:	c6 01       	movw	r24, r12
   1aac6:	02 96       	adiw	r24, 0x02	; 2
   1aac8:	82 15       	cp	r24, r2
   1aaca:	93 05       	cpc	r25, r3
   1aacc:	84 f4       	brge	.+32     	; 0x1aaee <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1aace:	8f ed       	ldi	r24, 0xDF	; 223
   1aad0:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aad2:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1aad4:	d2 82       	std	Z+2, r13	; 0x02
   1aad6:	f7 01       	movw	r30, r14
   1aad8:	e0 0f       	add	r30, r16
   1aada:	f1 1f       	adc	r31, r17
   1aadc:	cf 01       	movw	r24, r30
   1aade:	8e 19       	sub	r24, r14
   1aae0:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1aae2:	29 91       	ld	r18, Y+
   1aae4:	22 23       	and	r18, r18
   1aae6:	09 f4       	brne	.+2      	; 0x1aaea <lif_ascii_string_to_e010+0xb0>
   1aae8:	5b c0       	rjmp	.+182    	; 0x1aba0 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1aaea:	21 93       	st	Z+, r18
   1aaec:	f7 cf       	rjmp	.-18     	; 0x1aadc <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1aaee:	8f ec       	ldi	r24, 0xCF	; 207
   1aaf0:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aaf2:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1aaf4:	d2 82       	std	Z+2, r13	; 0x02
   1aaf6:	d7 01       	movw	r26, r14
   1aaf8:	a0 0f       	add	r26, r16
   1aafa:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aafc:	fe 01       	movw	r30, r28
   1aafe:	81 91       	ld	r24, Z+
   1ab00:	81 11       	cpse	r24, r1
   1ab02:	0e c0       	rjmp	.+28     	; 0x1ab20 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1ab04:	c8 01       	movw	r24, r16
   1ab06:	01 2e       	mov	r0, r17
   1ab08:	00 0c       	add	r0, r0
   1ab0a:	aa 0b       	sbc	r26, r26
   1ab0c:	bb 0b       	sbc	r27, r27
   1ab0e:	bc 01       	movw	r22, r24
   1ab10:	cd 01       	movw	r24, r26
   1ab12:	68 0d       	add	r22, r8
   1ab14:	79 1d       	adc	r23, r9
   1ab16:	8a 1d       	adc	r24, r10
   1ab18:	9b 1d       	adc	r25, r11
   1ab1a:	61 11       	cpse	r22, r1
   1ab1c:	09 c0       	rjmp	.+18     	; 0x1ab30 <lif_ascii_string_to_e010+0xf6>
   1ab1e:	21 c0       	rjmp	.+66     	; 0x1ab62 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ab20:	02 15       	cp	r16, r2
   1ab22:	13 05       	cpc	r17, r3
   1ab24:	7c f7       	brge	.-34     	; 0x1ab04 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1ab26:	0f 5f       	subi	r16, 0xFF	; 255
   1ab28:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab2a:	8d 93       	st	X+, r24
   1ab2c:	ef 01       	movw	r28, r30
   1ab2e:	e6 cf       	rjmp	.-52     	; 0x1aafc <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1ab30:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1ab34:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ab38:	32 ff       	sbrs	r19, 2
   1ab3a:	30 c0       	rjmp	.+96     	; 0x1ab9c <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1ab3c:	20 e0       	ldi	r18, 0x00	; 0
   1ab3e:	31 e0       	ldi	r19, 0x01	; 1
   1ab40:	40 e0       	ldi	r20, 0x00	; 0
   1ab42:	50 e0       	ldi	r21, 0x00	; 0
   1ab44:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <__divmodsi4>
   1ab48:	ed b7       	in	r30, 0x3d	; 61
   1ab4a:	fe b7       	in	r31, 0x3e	; 62
   1ab4c:	75 83       	std	Z+5, r23	; 0x05
   1ab4e:	64 83       	std	Z+4, r22	; 0x04
   1ab50:	88 e8       	ldi	r24, 0x88	; 136
   1ab52:	99 e3       	ldi	r25, 0x39	; 57
   1ab54:	a0 e0       	ldi	r26, 0x00	; 0
   1ab56:	81 83       	std	Z+1, r24	; 0x01
   1ab58:	92 83       	std	Z+2, r25	; 0x02
   1ab5a:	a3 83       	std	Z+3, r26	; 0x03
   1ab5c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1ab60:	1d c0       	rjmp	.+58     	; 0x1ab9c <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1ab62:	fe 01       	movw	r30, r28
   1ab64:	01 90       	ld	r0, Z+
   1ab66:	00 20       	and	r0, r0
   1ab68:	e9 f7       	brne	.-6      	; 0x1ab64 <lif_ascii_string_to_e010+0x12a>
   1ab6a:	31 97       	sbiw	r30, 0x01	; 1
   1ab6c:	9f 01       	movw	r18, r30
   1ab6e:	2c 1b       	sub	r18, r28
   1ab70:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1ab72:	d7 01       	movw	r26, r14
   1ab74:	a0 0f       	add	r26, r16
   1ab76:	b1 1f       	adc	r27, r17
   1ab78:	8f e6       	ldi	r24, 0x6F	; 111
   1ab7a:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ab7c:	fd 01       	movw	r30, r26
   1ab7e:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1ab80:	32 83       	std	Z+2, r19	; 0x02
   1ab82:	0d 5f       	subi	r16, 0xFD	; 253
   1ab84:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab86:	f7 01       	movw	r30, r14
   1ab88:	e0 0f       	add	r30, r16
   1ab8a:	f1 1f       	adc	r31, r17
   1ab8c:	cf 01       	movw	r24, r30
   1ab8e:	8e 19       	sub	r24, r14
   1ab90:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1ab92:	29 91       	ld	r18, Y+
   1ab94:	22 23       	and	r18, r18
   1ab96:	21 f0       	breq	.+8      	; 0x1aba0 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1ab98:	21 93       	st	Z+, r18
   1ab9a:	f8 cf       	rjmp	.-16     	; 0x1ab8c <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ab9c:	8f ef       	ldi	r24, 0xFF	; 255
   1ab9e:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1aba0:	cd b7       	in	r28, 0x3d	; 61
   1aba2:	de b7       	in	r29, 0x3e	; 62
   1aba4:	25 96       	adiw	r28, 0x05	; 5
   1aba6:	e2 e1       	ldi	r30, 0x12	; 18
   1aba8:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0001abac <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1abac:	ad e0       	ldi	r26, 0x0D	; 13
   1abae:	b3 e0       	ldi	r27, 0x03	; 3
   1abb0:	ec ed       	ldi	r30, 0xDC	; 220
   1abb2:	f5 ed       	ldi	r31, 0xD5	; 213
   1abb4:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   1abb8:	5c 01       	movw	r10, r24
   1abba:	2a 01       	movw	r4, r20
   1abbc:	3b 01       	movw	r6, r22
   1abbe:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1abc0:	6e ef       	ldi	r22, 0xFE	; 254
   1abc2:	78 e0       	ldi	r23, 0x08	; 8
   1abc4:	0e 94 7b c1 	call	0x182f6	; 0x182f6 <lif_open>
   1abc8:	c7 5f       	subi	r28, 0xF7	; 247
   1abca:	dc 4f       	sbci	r29, 0xFC	; 252
   1abcc:	99 83       	std	Y+1, r25	; 0x01
   1abce:	88 83       	st	Y, r24
   1abd0:	c9 50       	subi	r28, 0x09	; 9
   1abd2:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1abd4:	89 2b       	or	r24, r25
   1abd6:	09 f4       	brne	.+2      	; 0x1abda <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1abd8:	63 c0       	rjmp	.+198    	; 0x1aca0 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1abda:	81 2c       	mov	r8, r1
   1abdc:	91 2c       	mov	r9, r1
   1abde:	c1 2c       	mov	r12, r1
   1abe0:	d1 2c       	mov	r13, r1
   1abe2:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1abe4:	8a e7       	ldi	r24, 0x7A	; 122
   1abe6:	99 e3       	ldi	r25, 0x39	; 57
   1abe8:	9c 01       	movw	r18, r24
   1abea:	40 e0       	ldi	r20, 0x00	; 0
   1abec:	c5 5f       	subi	r28, 0xF5	; 245
   1abee:	dc 4f       	sbci	r29, 0xFC	; 252
   1abf0:	28 83       	st	Y, r18
   1abf2:	39 83       	std	Y+1, r19	; 0x01
   1abf4:	4a 83       	std	Y+2, r20	; 0x02
   1abf6:	cb 50       	subi	r28, 0x0B	; 11
   1abf8:	d3 40       	sbci	r29, 0x03	; 3
   1abfa:	14 c0       	rjmp	.+40     	; 0x1ac24 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1abfc:	c1 01       	movw	r24, r2
   1abfe:	03 2c       	mov	r0, r3
   1ac00:	00 0c       	add	r0, r0
   1ac02:	aa 0b       	sbc	r26, r26
   1ac04:	bb 0b       	sbc	r27, r27
   1ac06:	48 0e       	add	r4, r24
   1ac08:	59 1e       	adc	r5, r25
   1ac0a:	6a 1e       	adc	r6, r26
   1ac0c:	7b 1e       	adc	r7, r27
        bytes += size;
   1ac0e:	c8 0e       	add	r12, r24
   1ac10:	d9 1e       	adc	r13, r25
   1ac12:	ea 1e       	adc	r14, r26
   1ac14:	fb 1e       	adc	r15, r27
        count += size;
   1ac16:	82 0c       	add	r8, r2
   1ac18:	93 1c       	adc	r9, r3

        if(count > 256)
   1ac1a:	31 e0       	ldi	r19, 0x01	; 1
   1ac1c:	83 16       	cp	r8, r19
   1ac1e:	93 06       	cpc	r9, r19
   1ac20:	0c f0       	brlt	.+2      	; 0x1ac24 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1ac22:	43 c0       	rjmp	.+134    	; 0x1acaa <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1ac24:	c7 5f       	subi	r28, 0xF7	; 247
   1ac26:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac28:	48 81       	ld	r20, Y
   1ac2a:	59 81       	ldd	r21, Y+1	; 0x01
   1ac2c:	c9 50       	subi	r28, 0x09	; 9
   1ac2e:	d3 40       	sbci	r29, 0x03	; 3
   1ac30:	6d ef       	ldi	r22, 0xFD	; 253
   1ac32:	70 e0       	ldi	r23, 0x00	; 0
   1ac34:	ce 01       	movw	r24, r28
   1ac36:	88 5f       	subi	r24, 0xF8	; 248
   1ac38:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac3a:	0e 94 8c 76 	call	0xed18	; 0xed18 <fgets>
   1ac3e:	89 2b       	or	r24, r25
   1ac40:	09 f4       	brne	.+2      	; 0x1ac44 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1ac42:	4b c0       	rjmp	.+150    	; 0x1acda <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1ac44:	ce 01       	movw	r24, r28
   1ac46:	88 5f       	subi	r24, 0xF8	; 248
   1ac48:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac4a:	0e 94 51 32 	call	0x64a2	; 0x64a2 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1ac4e:	6e e4       	ldi	r22, 0x4E	; 78
   1ac50:	76 e1       	ldi	r23, 0x16	; 22
   1ac52:	ce 01       	movw	r24, r28
   1ac54:	88 5f       	subi	r24, 0xF8	; 248
   1ac56:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac58:	0e 94 94 31 	call	0x6328	; 0x6328 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ac5c:	9e 01       	movw	r18, r28
   1ac5e:	28 5f       	subi	r18, 0xF8	; 248
   1ac60:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac62:	b3 01       	movw	r22, r6
   1ac64:	a2 01       	movw	r20, r4
   1ac66:	ce 01       	movw	r24, r28
   1ac68:	88 5f       	subi	r24, 0xF8	; 248
   1ac6a:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac6c:	e6 de       	rcall	.-564    	; 0x1aa3a <lif_ascii_string_to_e010>
   1ac6e:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1ac70:	a1 14       	cp	r10, r1
   1ac72:	b1 04       	cpc	r11, r1
   1ac74:	19 f2       	breq	.-122    	; 0x1abfc <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ac76:	8c 01       	movw	r16, r24
   1ac78:	a3 01       	movw	r20, r6
   1ac7a:	92 01       	movw	r18, r4
   1ac7c:	be 01       	movw	r22, r28
   1ac7e:	68 5f       	subi	r22, 0xF8	; 248
   1ac80:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac82:	c5 01       	movw	r24, r10
   1ac84:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
            if(len < size)
   1ac88:	82 15       	cp	r24, r2
   1ac8a:	93 05       	cpc	r25, r3
   1ac8c:	0c f0       	brlt	.+2      	; 0x1ac90 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1ac8e:	b6 cf       	rjmp	.-148    	; 0x1abfc <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1ac90:	c7 5f       	subi	r28, 0xF7	; 247
   1ac92:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac94:	88 81       	ld	r24, Y
   1ac96:	99 81       	ldd	r25, Y+1	; 0x01
   1ac98:	c9 50       	subi	r28, 0x09	; 9
   1ac9a:	d3 40       	sbci	r29, 0x03	; 3
   1ac9c:	0e 94 1e 7d 	call	0xfa3c	; 0xfa3c <fclose>
                return(-1);
   1aca0:	6f ef       	ldi	r22, 0xFF	; 255
   1aca2:	7f ef       	ldi	r23, 0xFF	; 255
   1aca4:	8f ef       	ldi	r24, 0xFF	; 255
   1aca6:	9f ef       	ldi	r25, 0xFF	; 255
   1aca8:	84 c0       	rjmp	.+264    	; 0x1adb2 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1acaa:	a1 14       	cp	r10, r1
   1acac:	b1 04       	cpc	r11, r1
   1acae:	91 f0       	breq	.+36     	; 0x1acd4 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1acb0:	ed b7       	in	r30, 0x3d	; 61
   1acb2:	fe b7       	in	r31, 0x3e	; 62
   1acb4:	c4 82       	std	Z+4, r12	; 0x04
   1acb6:	d5 82       	std	Z+5, r13	; 0x05
   1acb8:	e6 82       	std	Z+6, r14	; 0x06
   1acba:	f7 82       	std	Z+7, r15	; 0x07
   1acbc:	c5 5f       	subi	r28, 0xF5	; 245
   1acbe:	dc 4f       	sbci	r29, 0xFC	; 252
   1acc0:	28 81       	ld	r18, Y
   1acc2:	39 81       	ldd	r19, Y+1	; 0x01
   1acc4:	4a 81       	ldd	r20, Y+2	; 0x02
   1acc6:	cb 50       	subi	r28, 0x0B	; 11
   1acc8:	d3 40       	sbci	r29, 0x03	; 3
   1acca:	21 83       	std	Z+1, r18	; 0x01
   1accc:	32 83       	std	Z+2, r19	; 0x02
   1acce:	43 83       	std	Z+3, r20	; 0x03
   1acd0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1acd4:	81 2c       	mov	r8, r1
   1acd6:	91 2c       	mov	r9, r1
   1acd8:	a5 cf       	rjmp	.-182    	; 0x1ac24 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1acda:	c7 5f       	subi	r28, 0xF7	; 247
   1acdc:	dc 4f       	sbci	r29, 0xFC	; 252
   1acde:	88 81       	ld	r24, Y
   1ace0:	99 81       	ldd	r25, Y+1	; 0x01
   1ace2:	c9 50       	subi	r28, 0x09	; 9
   1ace4:	d3 40       	sbci	r29, 0x03	; 3
   1ace6:	0e 94 1e 7d 	call	0xfa3c	; 0xfa3c <fclose>

// Write EOF
    str[0] = 0;
   1acea:	c8 5f       	subi	r28, 0xF8	; 248
   1acec:	dd 4f       	sbci	r29, 0xFD	; 253
   1acee:	18 82       	st	Y, r1
   1acf0:	c8 50       	subi	r28, 0x08	; 8
   1acf2:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1acf4:	9e 01       	movw	r18, r28
   1acf6:	28 5f       	subi	r18, 0xF8	; 248
   1acf8:	3f 4f       	sbci	r19, 0xFF	; 255
   1acfa:	b3 01       	movw	r22, r6
   1acfc:	a2 01       	movw	r20, r4
   1acfe:	ce 01       	movw	r24, r28
   1ad00:	88 5f       	subi	r24, 0xF8	; 248
   1ad02:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad04:	9a de       	rcall	.-716    	; 0x1aa3a <lif_ascii_string_to_e010>
   1ad06:	4c 01       	movw	r8, r24

    if(LIF)
   1ad08:	a1 14       	cp	r10, r1
   1ad0a:	b1 04       	cpc	r11, r1
   1ad0c:	d1 f4       	brne	.+52     	; 0x1ad42 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ad0e:	c4 01       	movw	r24, r8
   1ad10:	09 2c       	mov	r0, r9
   1ad12:	00 0c       	add	r0, r0
   1ad14:	aa 0b       	sbc	r26, r26
   1ad16:	bb 0b       	sbc	r27, r27
   1ad18:	c8 0e       	add	r12, r24
   1ad1a:	d9 1e       	adc	r13, r25
   1ad1c:	ea 1e       	adc	r14, r26
   1ad1e:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ad20:	12 01       	movw	r2, r4
   1ad22:	23 01       	movw	r4, r6
   1ad24:	28 0e       	add	r2, r24
   1ad26:	39 1e       	adc	r3, r25
   1ad28:	4a 1e       	adc	r4, r26
   1ad2a:	5b 1e       	adc	r5, r27
   1ad2c:	ae 01       	movw	r20, r28
   1ad2e:	48 5f       	subi	r20, 0xF8	; 248
   1ad30:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad32:	c2 01       	movw	r24, r4
   1ad34:	b1 01       	movw	r22, r2
   1ad36:	26 de       	rcall	.-948    	; 0x1a984 <lif_e010_pad_sector>
   1ad38:	3c 01       	movw	r6, r24
    if(LIF)
   1ad3a:	a1 14       	cp	r10, r1
   1ad3c:	b1 04       	cpc	r11, r1
   1ad3e:	e1 f4       	brne	.+56     	; 0x1ad78 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1ad40:	36 c0       	rjmp	.+108    	; 0x1adae <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1ad42:	ed b7       	in	r30, 0x3d	; 61
   1ad44:	fe b7       	in	r31, 0x3e	; 62
   1ad46:	c4 82       	std	Z+4, r12	; 0x04
   1ad48:	d5 82       	std	Z+5, r13	; 0x05
   1ad4a:	e6 82       	std	Z+6, r14	; 0x06
   1ad4c:	f7 82       	std	Z+7, r15	; 0x07
   1ad4e:	8c e6       	ldi	r24, 0x6C	; 108
   1ad50:	99 e3       	ldi	r25, 0x39	; 57
   1ad52:	a0 e0       	ldi	r26, 0x00	; 0
   1ad54:	81 83       	std	Z+1, r24	; 0x01
   1ad56:	92 83       	std	Z+2, r25	; 0x02
   1ad58:	a3 83       	std	Z+3, r26	; 0x03
   1ad5a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1ad5e:	84 01       	movw	r16, r8
   1ad60:	a3 01       	movw	r20, r6
   1ad62:	92 01       	movw	r18, r4
   1ad64:	be 01       	movw	r22, r28
   1ad66:	68 5f       	subi	r22, 0xF8	; 248
   1ad68:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad6a:	c5 01       	movw	r24, r10
   1ad6c:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
        if(len < size)
   1ad70:	88 15       	cp	r24, r8
   1ad72:	99 05       	cpc	r25, r9
   1ad74:	64 f6       	brge	.-104    	; 0x1ad0e <lif_add_ascii_file_as_e010_wrapper+0x162>
   1ad76:	94 cf       	rjmp	.-216    	; 0x1aca0 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ad78:	8c 01       	movw	r16, r24
   1ad7a:	a2 01       	movw	r20, r4
   1ad7c:	91 01       	movw	r18, r2
   1ad7e:	be 01       	movw	r22, r28
   1ad80:	68 5f       	subi	r22, 0xF8	; 248
   1ad82:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad84:	c5 01       	movw	r24, r10
   1ad86:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
        if(len < size)
   1ad8a:	86 15       	cp	r24, r6
   1ad8c:	97 05       	cpc	r25, r7
   1ad8e:	0c f4       	brge	.+2      	; 0x1ad92 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1ad90:	87 cf       	rjmp	.-242    	; 0x1aca0 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ad92:	ed b7       	in	r30, 0x3d	; 61
   1ad94:	fe b7       	in	r31, 0x3e	; 62
   1ad96:	c4 82       	std	Z+4, r12	; 0x04
   1ad98:	d5 82       	std	Z+5, r13	; 0x05
   1ad9a:	e6 82       	std	Z+6, r14	; 0x06
   1ad9c:	f7 82       	std	Z+7, r15	; 0x07
   1ad9e:	8e e5       	ldi	r24, 0x5E	; 94
   1ada0:	99 e3       	ldi	r25, 0x39	; 57
   1ada2:	a0 e0       	ldi	r26, 0x00	; 0
   1ada4:	81 83       	std	Z+1, r24	; 0x01
   1ada6:	92 83       	std	Z+2, r25	; 0x02
   1ada8:	a3 83       	std	Z+3, r26	; 0x03
   1adaa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    return(bytes);
   1adae:	b6 01       	movw	r22, r12
   1adb0:	c7 01       	movw	r24, r14
}
   1adb2:	c3 5f       	subi	r28, 0xF3	; 243
   1adb4:	dc 4f       	sbci	r29, 0xFC	; 252
   1adb6:	e2 e1       	ldi	r30, 0x12	; 18
   1adb8:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0001adbc <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1adbc:	ab e3       	ldi	r26, 0x3B	; 59
   1adbe:	b0 e0       	ldi	r27, 0x00	; 0
   1adc0:	e4 ee       	ldi	r30, 0xE4	; 228
   1adc2:	f6 ed       	ldi	r31, 0xD6	; 214
   1adc4:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   1adc8:	6c 01       	movw	r12, r24
   1adca:	1b 01       	movw	r2, r22
   1adcc:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1adce:	fc 01       	movw	r30, r24
   1add0:	80 81       	ld	r24, Z
   1add2:	81 11       	cpse	r24, r1
   1add4:	03 c0       	rjmp	.+6      	; 0x1addc <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1add6:	8b e2       	ldi	r24, 0x2B	; 43
   1add8:	99 e3       	ldi	r25, 0x39	; 57
   1adda:	1a c0       	rjmp	.+52     	; 0x1ae10 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1addc:	fb 01       	movw	r30, r22
   1adde:	80 81       	ld	r24, Z
   1ade0:	81 11       	cpse	r24, r1
   1ade2:	03 c0       	rjmp	.+6      	; 0x1adea <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ade4:	8d ef       	ldi	r24, 0xFD	; 253
   1ade6:	98 e3       	ldi	r25, 0x38	; 56
   1ade8:	13 c0       	rjmp	.+38     	; 0x1ae10 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1adea:	fa 01       	movw	r30, r20
   1adec:	80 81       	ld	r24, Z
   1adee:	81 11       	cpse	r24, r1
   1adf0:	03 c0       	rjmp	.+6      	; 0x1adf8 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1adf2:	8e ec       	ldi	r24, 0xCE	; 206
   1adf4:	98 e3       	ldi	r25, 0x38	; 56
   1adf6:	0c c0       	rjmp	.+24     	; 0x1ae10 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1adf8:	be 01       	movw	r22, r28
   1adfa:	66 5f       	subi	r22, 0xF6	; 246
   1adfc:	7f 4f       	sbci	r23, 0xFF	; 255
   1adfe:	ca 01       	movw	r24, r20
   1ae00:	0e 94 a5 c1 	call	0x1834a	; 0x1834a <lif_stat>
   1ae04:	9b af       	std	Y+59, r25	; 0x3b
   1ae06:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1ae08:	89 2b       	or	r24, r25
   1ae0a:	59 f4       	brne	.+22     	; 0x1ae22 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1ae0c:	8e e9       	ldi	r24, 0x9E	; 158
   1ae0e:	98 e3       	ldi	r25, 0x38	; 56
   1ae10:	a0 e0       	ldi	r26, 0x00	; 0
   1ae12:	ed b7       	in	r30, 0x3d	; 61
   1ae14:	fe b7       	in	r31, 0x3e	; 62
   1ae16:	81 83       	std	Z+1, r24	; 0x01
   1ae18:	92 83       	std	Z+2, r25	; 0x02
   1ae1a:	a3 83       	std	Z+3, r26	; 0x03
   1ae1c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1ae20:	01 c1       	rjmp	.+514    	; 0x1b024 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1ae22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ae26:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ae2a:	92 ff       	sbrs	r25, 2
   1ae2c:	10 c0       	rjmp	.+32     	; 0x1ae4e <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1ae2e:	ed b7       	in	r30, 0x3d	; 61
   1ae30:	fe b7       	in	r31, 0x3e	; 62
   1ae32:	f1 86       	std	Z+9, r15	; 0x09
   1ae34:	e0 86       	std	Z+8, r14	; 0x08
   1ae36:	37 82       	std	Z+7, r3	; 0x07
   1ae38:	26 82       	std	Z+6, r2	; 0x06
   1ae3a:	d5 82       	std	Z+5, r13	; 0x05
   1ae3c:	c4 82       	std	Z+4, r12	; 0x04
   1ae3e:	8f e6       	ldi	r24, 0x6F	; 111
   1ae40:	98 e3       	ldi	r25, 0x38	; 56
   1ae42:	a0 e0       	ldi	r26, 0x00	; 0
   1ae44:	81 83       	std	Z+1, r24	; 0x01
   1ae46:	92 83       	std	Z+2, r25	; 0x02
   1ae48:	a3 83       	std	Z+3, r26	; 0x03
   1ae4a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1ae4e:	97 01       	movw	r18, r14
   1ae50:	40 e0       	ldi	r20, 0x00	; 0
   1ae52:	50 e0       	ldi	r21, 0x00	; 0
   1ae54:	ba 01       	movw	r22, r20
   1ae56:	80 e0       	ldi	r24, 0x00	; 0
   1ae58:	90 e0       	ldi	r25, 0x00	; 0
   1ae5a:	a8 de       	rcall	.-688    	; 0x1abac <lif_add_ascii_file_as_e010_wrapper>
   1ae5c:	4b 01       	movw	r8, r22
   1ae5e:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ae60:	47 2e       	mov	r4, r23
   1ae62:	58 2e       	mov	r5, r24
   1ae64:	69 2e       	mov	r6, r25
   1ae66:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ae68:	66 23       	and	r22, r22
   1ae6a:	29 f0       	breq	.+10     	; 0x1ae76 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1ae6c:	ff ef       	ldi	r31, 0xFF	; 255
   1ae6e:	4f 1a       	sub	r4, r31
   1ae70:	5f 0a       	sbc	r5, r31
   1ae72:	6f 0a       	sbc	r6, r31
   1ae74:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1ae76:	61 e0       	ldi	r22, 0x01	; 1
   1ae78:	79 e0       	ldi	r23, 0x09	; 9
   1ae7a:	c6 01       	movw	r24, r12
   1ae7c:	49 da       	rcall	.-2926   	; 0x1a310 <lif_open_volume>
   1ae7e:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1ae80:	00 97       	sbiw	r24, 0x00	; 0
   1ae82:	09 f4       	brne	.+2      	; 0x1ae86 <lif_add_ascii_file_as_e010+0xca>
   1ae84:	cf c0       	rjmp	.+414    	; 0x1b024 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1ae86:	b3 01       	movw	r22, r6
   1ae88:	a2 01       	movw	r20, r4
   1ae8a:	e2 d8       	rcall	.-3644   	; 0x1a050 <lif_newdir>
   1ae8c:	3c 01       	movw	r6, r24
    if(index == -1)
   1ae8e:	8f ef       	ldi	r24, 0xFF	; 255
   1ae90:	68 16       	cp	r6, r24
   1ae92:	78 06       	cpc	r7, r24
   1ae94:	79 f4       	brne	.+30     	; 0x1aeb4 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1ae96:	ed b7       	in	r30, 0x3d	; 61
   1ae98:	fe b7       	in	r31, 0x3e	; 62
   1ae9a:	f7 82       	std	Z+7, r15	; 0x07
   1ae9c:	e6 82       	std	Z+6, r14	; 0x06
   1ae9e:	d5 82       	std	Z+5, r13	; 0x05
   1aea0:	c4 82       	std	Z+4, r12	; 0x04
   1aea2:	8f e3       	ldi	r24, 0x3F	; 63
   1aea4:	98 e3       	ldi	r25, 0x38	; 56
   1aea6:	a0 e0       	ldi	r26, 0x00	; 0
   1aea8:	81 83       	std	Z+1, r24	; 0x01
   1aeaa:	92 83       	std	Z+2, r25	; 0x02
   1aeac:	a3 83       	std	Z+3, r26	; 0x03
   1aeae:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1aeb2:	a0 c0       	rjmp	.+320    	; 0x1aff4 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1aeb4:	68 01       	movw	r12, r16
   1aeb6:	ff e4       	ldi	r31, 0x4F	; 79
   1aeb8:	cf 0e       	add	r12, r31
   1aeba:	d1 1c       	adc	r13, r1
   1aebc:	4a e0       	ldi	r20, 0x0A	; 10
   1aebe:	50 e0       	ldi	r21, 0x00	; 0
   1aec0:	b1 01       	movw	r22, r2
   1aec2:	c6 01       	movw	r24, r12
   1aec4:	0e 94 54 c3 	call	0x186a8	; 0x186a8 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1aec8:	80 e1       	ldi	r24, 0x10	; 16
   1aeca:	90 ee       	ldi	r25, 0xE0	; 224
   1aecc:	f8 01       	movw	r30, r16
   1aece:	e6 5a       	subi	r30, 0xA6	; 166
   1aed0:	ff 4f       	sbci	r31, 0xFF	; 255
   1aed2:	91 83       	std	Z+1, r25	; 0x01
   1aed4:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1aed6:	ea ad       	ldd	r30, Y+58	; 0x3a
   1aed8:	fb ad       	ldd	r31, Y+59	; 0x3b
   1aeda:	60 a5       	ldd	r22, Z+40	; 0x28
   1aedc:	71 a5       	ldd	r23, Z+41	; 0x29
   1aede:	82 a5       	ldd	r24, Z+42	; 0x2a
   1aee0:	93 a5       	ldd	r25, Z+43	; 0x2b
   1aee2:	a8 01       	movw	r20, r16
   1aee4:	4c 59       	subi	r20, 0x9C	; 156
   1aee6:	5f 4f       	sbci	r21, 0xFF	; 255
   1aee8:	0e 94 79 c5 	call	0x18af2	; 0x18af2 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1aeec:	81 e0       	ldi	r24, 0x01	; 1
   1aeee:	90 e8       	ldi	r25, 0x80	; 128
   1aef0:	f8 01       	movw	r30, r16
   1aef2:	e6 59       	subi	r30, 0x96	; 150
   1aef4:	ff 4f       	sbci	r31, 0xFF	; 255
   1aef6:	91 83       	std	Z+1, r25	; 0x01
   1aef8:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1aefa:	32 96       	adiw	r30, 0x02	; 2
   1aefc:	91 82       	std	Z+1, r9	; 0x01
   1aefe:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1af00:	80 e0       	ldi	r24, 0x00	; 0
   1af02:	91 e0       	ldi	r25, 0x01	; 1
   1af04:	32 96       	adiw	r30, 0x02	; 2
   1af06:	91 83       	std	Z+1, r25	; 0x01
   1af08:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1af0a:	58 01       	movw	r10, r16
   1af0c:	fc e5       	ldi	r31, 0x5C	; 92
   1af0e:	af 0e       	add	r10, r31
   1af10:	b1 1c       	adc	r11, r1
   1af12:	f5 01       	movw	r30, r10
   1af14:	80 81       	ld	r24, Z
   1af16:	91 81       	ldd	r25, Z+1	; 0x01
   1af18:	a2 81       	ldd	r26, Z+2	; 0x02
   1af1a:	b3 81       	ldd	r27, Z+3	; 0x03
   1af1c:	22 24       	eor	r2, r2
   1af1e:	38 2e       	mov	r3, r24
   1af20:	49 2e       	mov	r4, r25
   1af22:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1af24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1af28:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1af2c:	92 ff       	sbrs	r25, 2
   1af2e:	05 c0       	rjmp	.+10     	; 0x1af3a <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1af30:	60 e5       	ldi	r22, 0x50	; 80
   1af32:	76 e1       	ldi	r23, 0x16	; 22
   1af34:	c8 01       	movw	r24, r16
   1af36:	0e 94 65 c6 	call	0x18cca	; 0x18cca <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1af3a:	97 01       	movw	r18, r14
   1af3c:	b2 01       	movw	r22, r4
   1af3e:	a1 01       	movw	r20, r2
   1af40:	c8 01       	movw	r24, r16
   1af42:	34 de       	rcall	.-920    	; 0x1abac <lif_add_ascii_file_as_e010_wrapper>
   1af44:	4b 01       	movw	r8, r22
   1af46:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1af48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1af4c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1af50:	92 ff       	sbrs	r25, 2
   1af52:	4a c0       	rjmp	.+148    	; 0x1afe8 <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1af54:	88 e1       	ldi	r24, 0x18	; 24
   1af56:	98 e3       	ldi	r25, 0x38	; 56
   1af58:	a0 e0       	ldi	r26, 0x00	; 0
   1af5a:	ed b7       	in	r30, 0x3d	; 61
   1af5c:	fe b7       	in	r31, 0x3e	; 62
   1af5e:	81 83       	std	Z+1, r24	; 0x01
   1af60:	92 83       	std	Z+2, r25	; 0x02
   1af62:	a3 83       	std	Z+3, r26	; 0x03
   1af64:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1af68:	ed b7       	in	r30, 0x3d	; 61
   1af6a:	fe b7       	in	r31, 0x3e	; 62
   1af6c:	d5 82       	std	Z+5, r13	; 0x05
   1af6e:	c4 82       	std	Z+4, r12	; 0x04
   1af70:	81 e0       	ldi	r24, 0x01	; 1
   1af72:	98 e3       	ldi	r25, 0x38	; 56
   1af74:	a0 e0       	ldi	r26, 0x00	; 0
   1af76:	81 83       	std	Z+1, r24	; 0x01
   1af78:	92 83       	std	Z+2, r25	; 0x02
   1af7a:	a3 83       	std	Z+3, r26	; 0x03
   1af7c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1af80:	ed b7       	in	r30, 0x3d	; 61
   1af82:	fe b7       	in	r31, 0x3e	; 62
   1af84:	75 82       	std	Z+5, r7	; 0x05
   1af86:	64 82       	std	Z+4, r6	; 0x04
   1af88:	8a ee       	ldi	r24, 0xEA	; 234
   1af8a:	97 e3       	ldi	r25, 0x37	; 55
   1af8c:	a0 e0       	ldi	r26, 0x00	; 0
   1af8e:	81 83       	std	Z+1, r24	; 0x01
   1af90:	92 83       	std	Z+2, r25	; 0x02
   1af92:	a3 83       	std	Z+3, r26	; 0x03
   1af94:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1af98:	f5 01       	movw	r30, r10
   1af9a:	80 81       	ld	r24, Z
   1af9c:	91 81       	ldd	r25, Z+1	; 0x01
   1af9e:	a2 81       	ldd	r26, Z+2	; 0x02
   1afa0:	b3 81       	ldd	r27, Z+3	; 0x03
   1afa2:	ed b7       	in	r30, 0x3d	; 61
   1afa4:	fe b7       	in	r31, 0x3e	; 62
   1afa6:	84 83       	std	Z+4, r24	; 0x04
   1afa8:	95 83       	std	Z+5, r25	; 0x05
   1afaa:	a6 83       	std	Z+6, r26	; 0x06
   1afac:	b7 83       	std	Z+7, r27	; 0x07
   1afae:	81 ed       	ldi	r24, 0xD1	; 209
   1afb0:	97 e3       	ldi	r25, 0x37	; 55
   1afb2:	a0 e0       	ldi	r26, 0x00	; 0
   1afb4:	81 83       	std	Z+1, r24	; 0x01
   1afb6:	92 83       	std	Z+2, r25	; 0x02
   1afb8:	a3 83       	std	Z+3, r26	; 0x03
   1afba:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1afbe:	f8 01       	movw	r30, r16
   1afc0:	e0 5a       	subi	r30, 0xA0	; 160
   1afc2:	ff 4f       	sbci	r31, 0xFF	; 255
   1afc4:	80 81       	ld	r24, Z
   1afc6:	91 81       	ldd	r25, Z+1	; 0x01
   1afc8:	a2 81       	ldd	r26, Z+2	; 0x02
   1afca:	b3 81       	ldd	r27, Z+3	; 0x03
   1afcc:	ed b7       	in	r30, 0x3d	; 61
   1afce:	fe b7       	in	r31, 0x3e	; 62
   1afd0:	84 83       	std	Z+4, r24	; 0x04
   1afd2:	95 83       	std	Z+5, r25	; 0x05
   1afd4:	a6 83       	std	Z+6, r26	; 0x06
   1afd6:	b7 83       	std	Z+7, r27	; 0x07
   1afd8:	88 eb       	ldi	r24, 0xB8	; 184
   1afda:	97 e3       	ldi	r25, 0x37	; 55
   1afdc:	a0 e0       	ldi	r26, 0x00	; 0
   1afde:	81 83       	std	Z+1, r24	; 0x01
   1afe0:	92 83       	std	Z+2, r25	; 0x02
   1afe2:	a3 83       	std	Z+3, r26	; 0x03
   1afe4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1afe8:	b3 01       	movw	r22, r6
   1afea:	c8 01       	movw	r24, r16
   1afec:	0e 94 c0 cb 	call	0x19780	; 0x19780 <lif_writedirindex>
   1aff0:	89 2b       	or	r24, r25
   1aff2:	21 f4       	brne	.+8      	; 0x1affc <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aff4:	c8 01       	movw	r24, r16
   1aff6:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
   1affa:	14 c0       	rjmp	.+40     	; 0x1b024 <lif_add_ascii_file_as_e010+0x268>
   1affc:	c8 01       	movw	r24, r16
   1affe:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1b002:	ed b7       	in	r30, 0x3d	; 61
   1b004:	fe b7       	in	r31, 0x3e	; 62
   1b006:	84 82       	std	Z+4, r8	; 0x04
   1b008:	95 82       	std	Z+5, r9	; 0x05
   1b00a:	e6 82       	std	Z+6, r14	; 0x06
   1b00c:	f7 82       	std	Z+7, r15	; 0x07
   1b00e:	8a ea       	ldi	r24, 0xAA	; 170
   1b010:	97 e3       	ldi	r25, 0x37	; 55
   1b012:	a0 e0       	ldi	r26, 0x00	; 0
   1b014:	81 83       	std	Z+1, r24	; 0x01
   1b016:	92 83       	std	Z+2, r25	; 0x02
   1b018:	a3 83       	std	Z+3, r26	; 0x03
   1b01a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

// Return file size
    return(bytes);
   1b01e:	b4 01       	movw	r22, r8
   1b020:	c7 01       	movw	r24, r14
   1b022:	04 c0       	rjmp	.+8      	; 0x1b02c <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1b024:	6f ef       	ldi	r22, 0xFF	; 255
   1b026:	7f ef       	ldi	r23, 0xFF	; 255
   1b028:	8f ef       	ldi	r24, 0xFF	; 255
   1b02a:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1b02c:	eb 96       	adiw	r28, 0x3b	; 59
   1b02e:	e2 e1       	ldi	r30, 0x12	; 18
   1b030:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0001b034 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b034:	a7 e3       	ldi	r26, 0x37	; 55
   1b036:	b2 e0       	ldi	r27, 0x02	; 2
   1b038:	e0 e2       	ldi	r30, 0x20	; 32
   1b03a:	f8 ed       	ldi	r31, 0xD8	; 216
   1b03c:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   1b040:	7c 01       	movw	r14, r24
   1b042:	8b 01       	movw	r16, r22
   1b044:	ca 5d       	subi	r28, 0xDA	; 218
   1b046:	dd 4f       	sbci	r29, 0xFD	; 253
   1b048:	59 83       	std	Y+1, r21	; 0x01
   1b04a:	48 83       	st	Y, r20
   1b04c:	c6 52       	subi	r28, 0x26	; 38
   1b04e:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b050:	62 e4       	ldi	r22, 0x42	; 66
   1b052:	73 e0       	ldi	r23, 0x03	; 3
   1b054:	5d d9       	rcall	.-3398   	; 0x1a310 <lif_open_volume>
   1b056:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b058:	00 97       	sbiw	r24, 0x00	; 0
   1b05a:	69 f4       	brne	.+26     	; 0x1b076 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b05c:	ed b7       	in	r30, 0x3d	; 61
   1b05e:	fe b7       	in	r31, 0x3e	; 62
   1b060:	f5 82       	std	Z+5, r15	; 0x05
   1b062:	e4 82       	std	Z+4, r14	; 0x04
   1b064:	82 e9       	ldi	r24, 0x92	; 146
   1b066:	97 e3       	ldi	r25, 0x37	; 55
   1b068:	a0 e0       	ldi	r26, 0x00	; 0
   1b06a:	81 83       	std	Z+1, r24	; 0x01
   1b06c:	92 83       	std	Z+2, r25	; 0x02
   1b06e:	a3 83       	std	Z+3, r26	; 0x03
   1b070:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1b074:	13 c0       	rjmp	.+38     	; 0x1b09c <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b076:	b8 01       	movw	r22, r16
   1b078:	20 dc       	rcall	.-1984   	; 0x1a8ba <lif_find_file>
    if(index == -1)
   1b07a:	01 96       	adiw	r24, 0x01	; 1
   1b07c:	91 f4       	brne	.+36     	; 0x1b0a2 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1b07e:	ed b7       	in	r30, 0x3d	; 61
   1b080:	fe b7       	in	r31, 0x3e	; 62
   1b082:	15 83       	std	Z+5, r17	; 0x05
   1b084:	04 83       	std	Z+4, r16	; 0x04
   1b086:	8b e7       	ldi	r24, 0x7B	; 123
   1b088:	97 e3       	ldi	r25, 0x37	; 55
   1b08a:	a0 e0       	ldi	r26, 0x00	; 0
   1b08c:	81 83       	std	Z+1, r24	; 0x01
   1b08e:	92 83       	std	Z+2, r25	; 0x02
   1b090:	a3 83       	std	Z+3, r26	; 0x03
   1b092:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b096:	c6 01       	movw	r24, r12
   1b098:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b09c:	80 e0       	ldi	r24, 0x00	; 0
   1b09e:	90 e0       	ldi	r25, 0x00	; 0
   1b0a0:	73 c2       	rjmp	.+1254   	; 0x1b588 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b0a2:	f6 01       	movw	r30, r12
   1b0a4:	e6 5a       	subi	r30, 0xA6	; 166
   1b0a6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0a8:	80 81       	ld	r24, Z
   1b0aa:	91 81       	ldd	r25, Z+1	; 0x01
   1b0ac:	9c 01       	movw	r18, r24
   1b0ae:	2c 7f       	andi	r18, 0xFC	; 252
   1b0b0:	20 31       	cpi	r18, 0x10	; 16
   1b0b2:	30 4e       	sbci	r19, 0xE0	; 224
   1b0b4:	a9 f0       	breq	.+42     	; 0x1b0e0 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b0b6:	ed b7       	in	r30, 0x3d	; 61
   1b0b8:	fe b7       	in	r31, 0x3e	; 62
   1b0ba:	97 83       	std	Z+7, r25	; 0x07
   1b0bc:	86 83       	std	Z+6, r24	; 0x06
   1b0be:	ca 5d       	subi	r28, 0xDA	; 218
   1b0c0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0c2:	28 81       	ld	r18, Y
   1b0c4:	39 81       	ldd	r19, Y+1	; 0x01
   1b0c6:	c6 52       	subi	r28, 0x26	; 38
   1b0c8:	d2 40       	sbci	r29, 0x02	; 2
   1b0ca:	35 83       	std	Z+5, r19	; 0x05
   1b0cc:	24 83       	std	Z+4, r18	; 0x04
   1b0ce:	83 e4       	ldi	r24, 0x43	; 67
   1b0d0:	97 e3       	ldi	r25, 0x37	; 55
   1b0d2:	a0 e0       	ldi	r26, 0x00	; 0
   1b0d4:	81 83       	std	Z+1, r24	; 0x01
   1b0d6:	92 83       	std	Z+2, r25	; 0x02
   1b0d8:	a3 83       	std	Z+3, r26	; 0x03
   1b0da:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1b0de:	db cf       	rjmp	.-74     	; 0x1b096 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1b0e0:	f6 01       	movw	r30, r12
   1b0e2:	e4 5a       	subi	r30, 0xA4	; 164
   1b0e4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0e6:	80 80       	ld	r8, Z
   1b0e8:	91 80       	ldd	r9, Z+1	; 0x01
   1b0ea:	a2 80       	ldd	r10, Z+2	; 0x02
   1b0ec:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b0ee:	34 96       	adiw	r30, 0x04	; 4
   1b0f0:	80 81       	ld	r24, Z
   1b0f2:	91 81       	ldd	r25, Z+1	; 0x01
   1b0f4:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0f6:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0f8:	a5 01       	movw	r20, r10
   1b0fa:	94 01       	movw	r18, r8
   1b0fc:	28 0f       	add	r18, r24
   1b0fe:	39 1f       	adc	r19, r25
   1b100:	4a 1f       	adc	r20, r26
   1b102:	5b 1f       	adc	r21, r27
   1b104:	c4 5d       	subi	r28, 0xD4	; 212
   1b106:	dd 4f       	sbci	r29, 0xFD	; 253
   1b108:	28 83       	st	Y, r18
   1b10a:	39 83       	std	Y+1, r19	; 0x01
   1b10c:	4a 83       	std	Y+2, r20	; 0x02
   1b10e:	5b 83       	std	Y+3, r21	; 0x03
   1b110:	cc 52       	subi	r28, 0x2C	; 44
   1b112:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b114:	c6 01       	movw	r24, r12
   1b116:	8c 59       	subi	r24, 0x9C	; 156
   1b118:	9f 4f       	sbci	r25, 0xFF	; 255
   1b11a:	0e 94 bb c5 	call	0x18b76	; 0x18b76 <lif_lifbcd2time>
   1b11e:	c8 5d       	subi	r28, 0xD8	; 216
   1b120:	dd 4f       	sbci	r29, 0xFD	; 253
   1b122:	68 83       	st	Y, r22
   1b124:	79 83       	std	Y+1, r23	; 0x01
   1b126:	8a 83       	std	Y+2, r24	; 0x02
   1b128:	9b 83       	std	Y+3, r25	; 0x03
   1b12a:	c8 52       	subi	r28, 0x28	; 40
   1b12c:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b12e:	ba 2d       	mov	r27, r10
   1b130:	a9 2d       	mov	r26, r9
   1b132:	98 2d       	mov	r25, r8
   1b134:	88 27       	eor	r24, r24
   1b136:	c2 5e       	subi	r28, 0xE2	; 226
   1b138:	dd 4f       	sbci	r29, 0xFD	; 253
   1b13a:	88 83       	st	Y, r24
   1b13c:	99 83       	std	Y+1, r25	; 0x01
   1b13e:	aa 83       	std	Y+2, r26	; 0x02
   1b140:	bb 83       	std	Y+3, r27	; 0x03
   1b142:	ce 51       	subi	r28, 0x1E	; 30
   1b144:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b146:	6c e0       	ldi	r22, 0x0C	; 12
   1b148:	79 e0       	ldi	r23, 0x09	; 9
   1b14a:	ca 5d       	subi	r28, 0xDA	; 218
   1b14c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b14e:	88 81       	ld	r24, Y
   1b150:	99 81       	ldd	r25, Y+1	; 0x01
   1b152:	c6 52       	subi	r28, 0x26	; 38
   1b154:	d2 40       	sbci	r29, 0x02	; 2
   1b156:	0e 94 7b c1 	call	0x182f6	; 0x182f6 <lif_open>
   1b15a:	cc 5d       	subi	r28, 0xDC	; 220
   1b15c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b15e:	99 83       	std	Y+1, r25	; 0x01
   1b160:	88 83       	st	Y, r24
   1b162:	c4 52       	subi	r28, 0x24	; 36
   1b164:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b166:	89 2b       	or	r24, r25
   1b168:	09 f4       	brne	.+2      	; 0x1b16c <lif_extract_e010_as_ascii+0x138>
   1b16a:	95 cf       	rjmp	.-214    	; 0x1b096 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b16c:	ca 5d       	subi	r28, 0xDA	; 218
   1b16e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b170:	28 81       	ld	r18, Y
   1b172:	39 81       	ldd	r19, Y+1	; 0x01
   1b174:	c6 52       	subi	r28, 0x26	; 38
   1b176:	d2 40       	sbci	r29, 0x02	; 2
   1b178:	ed b7       	in	r30, 0x3d	; 61
   1b17a:	fe b7       	in	r31, 0x3e	; 62
   1b17c:	35 83       	std	Z+5, r19	; 0x05
   1b17e:	24 83       	std	Z+4, r18	; 0x04
   1b180:	83 e3       	ldi	r24, 0x33	; 51
   1b182:	97 e3       	ldi	r25, 0x37	; 55
   1b184:	a0 e0       	ldi	r26, 0x00	; 0
   1b186:	81 83       	std	Z+1, r24	; 0x01
   1b188:	92 83       	std	Z+2, r25	; 0x02
   1b18a:	a3 83       	std	Z+3, r26	; 0x03
   1b18c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    bytes = 0;
    wind = 0;
   1b190:	21 2c       	mov	r2, r1
   1b192:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b194:	ce 5d       	subi	r28, 0xDE	; 222
   1b196:	dd 4f       	sbci	r29, 0xFD	; 253
   1b198:	19 82       	std	Y+1, r1	; 0x01
   1b19a:	18 82       	st	Y, r1
   1b19c:	c2 52       	subi	r28, 0x22	; 34
   1b19e:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b1a0:	ee 24       	eor	r14, r14
   1b1a2:	e3 94       	inc	r14
   1b1a4:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b1a6:	41 2c       	mov	r4, r1
   1b1a8:	51 2c       	mov	r5, r1
   1b1aa:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b1ac:	82 e7       	ldi	r24, 0x72	; 114
   1b1ae:	96 e3       	ldi	r25, 0x36	; 54
   1b1b0:	9c 01       	movw	r18, r24
   1b1b2:	40 e0       	ldi	r20, 0x00	; 0
   1b1b4:	ce 5c       	subi	r28, 0xCE	; 206
   1b1b6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1b8:	28 83       	st	Y, r18
   1b1ba:	39 83       	std	Y+1, r19	; 0x01
   1b1bc:	4a 83       	std	Y+2, r20	; 0x02
   1b1be:	c2 53       	subi	r28, 0x32	; 50
   1b1c0:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b1c2:	80 e8       	ldi	r24, 0x80	; 128
   1b1c4:	96 e3       	ldi	r25, 0x36	; 54
   1b1c6:	9c 01       	movw	r18, r24
   1b1c8:	40 e0       	ldi	r20, 0x00	; 0
   1b1ca:	cb 5c       	subi	r28, 0xCB	; 203
   1b1cc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1ce:	28 83       	st	Y, r18
   1b1d0:	39 83       	std	Y+1, r19	; 0x01
   1b1d2:	4a 83       	std	Y+2, r20	; 0x02
   1b1d4:	c5 53       	subi	r28, 0x35	; 53
   1b1d6:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b1d8:	c2 5e       	subi	r28, 0xE2	; 226
   1b1da:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1dc:	28 81       	ld	r18, Y
   1b1de:	39 81       	ldd	r19, Y+1	; 0x01
   1b1e0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1e2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1e4:	ce 51       	subi	r28, 0x1E	; 30
   1b1e6:	d2 40       	sbci	r29, 0x02	; 2
   1b1e8:	bb 27       	eor	r27, r27
   1b1ea:	a5 2f       	mov	r26, r21
   1b1ec:	94 2f       	mov	r25, r20
   1b1ee:	83 2f       	mov	r24, r19
   1b1f0:	c4 5d       	subi	r28, 0xD4	; 212
   1b1f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1f4:	28 81       	ld	r18, Y
   1b1f6:	39 81       	ldd	r19, Y+1	; 0x01
   1b1f8:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1fa:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1fc:	cc 52       	subi	r28, 0x2C	; 44
   1b1fe:	d2 40       	sbci	r29, 0x02	; 2
   1b200:	28 17       	cp	r18, r24
   1b202:	39 07       	cpc	r19, r25
   1b204:	4a 07       	cpc	r20, r26
   1b206:	5b 07       	cpc	r21, r27
   1b208:	08 f4       	brcc	.+2      	; 0x1b20c <lif_extract_e010_as_ascii+0x1d8>
   1b20a:	51 c1       	rjmp	.+674    	; 0x1b4ae <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b20c:	00 e0       	ldi	r16, 0x00	; 0
   1b20e:	11 e0       	ldi	r17, 0x01	; 1
   1b210:	c2 5e       	subi	r28, 0xE2	; 226
   1b212:	dd 4f       	sbci	r29, 0xFD	; 253
   1b214:	28 81       	ld	r18, Y
   1b216:	39 81       	ldd	r19, Y+1	; 0x01
   1b218:	4a 81       	ldd	r20, Y+2	; 0x02
   1b21a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b21c:	ce 51       	subi	r28, 0x1E	; 30
   1b21e:	d2 40       	sbci	r29, 0x02	; 2
   1b220:	be 01       	movw	r22, r28
   1b222:	60 5f       	subi	r22, 0xF0	; 240
   1b224:	7e 4f       	sbci	r23, 0xFE	; 254
   1b226:	c6 01       	movw	r24, r12
   1b228:	0e 94 ff c1 	call	0x183fe	; 0x183fe <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b22c:	6f 3f       	cpi	r22, 0xFF	; 255
   1b22e:	71 05       	cpc	r23, r1
   1b230:	09 f0       	breq	.+2      	; 0x1b234 <lif_extract_e010_as_ascii+0x200>
   1b232:	0c f4       	brge	.+2      	; 0x1b236 <lif_extract_e010_as_ascii+0x202>
   1b234:	3a c1       	rjmp	.+628    	; 0x1b4aa <lif_extract_e010_as_ascii+0x476>
   1b236:	00 e0       	ldi	r16, 0x00	; 0
   1b238:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b23a:	ce 5d       	subi	r28, 0xDE	; 222
   1b23c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b23e:	88 81       	ld	r24, Y
   1b240:	99 81       	ldd	r25, Y+1	; 0x01
   1b242:	c2 52       	subi	r28, 0x22	; 34
   1b244:	d2 40       	sbci	r29, 0x02	; 2
   1b246:	89 2b       	or	r24, r25
   1b248:	09 f0       	breq	.+2      	; 0x1b24c <lif_extract_e010_as_ascii+0x218>
   1b24a:	1b c1       	rjmp	.+566    	; 0x1b482 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b24c:	e0 e1       	ldi	r30, 0x10	; 16
   1b24e:	f1 e0       	ldi	r31, 0x01	; 1
   1b250:	ec 0f       	add	r30, r28
   1b252:	fd 1f       	adc	r31, r29
   1b254:	e0 0f       	add	r30, r16
   1b256:	f1 1f       	adc	r31, r17
   1b258:	80 81       	ld	r24, Z
   1b25a:	98 2f       	mov	r25, r24
   1b25c:	9f 7e       	andi	r25, 0xEF	; 239
   1b25e:	9f 3c       	cpi	r25, 0xCF	; 207
   1b260:	11 f0       	breq	.+4      	; 0x1b266 <lif_extract_e010_as_ascii+0x232>
   1b262:	8f 36       	cpi	r24, 0x6F	; 111
   1b264:	c9 f5       	brne	.+114    	; 0x1b2d8 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b266:	e0 e1       	ldi	r30, 0x10	; 16
   1b268:	f1 e0       	ldi	r31, 0x01	; 1
   1b26a:	ec 0f       	add	r30, r28
   1b26c:	fd 1f       	adc	r31, r29
   1b26e:	e0 0f       	add	r30, r16
   1b270:	f1 1f       	adc	r31, r17
   1b272:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1b274:	f8 01       	movw	r30, r16
   1b276:	32 96       	adiw	r30, 0x02	; 2
   1b278:	40 e1       	ldi	r20, 0x10	; 16
   1b27a:	51 e0       	ldi	r21, 0x01	; 1
   1b27c:	4c 0f       	add	r20, r28
   1b27e:	5d 1f       	adc	r21, r29
   1b280:	e4 0f       	add	r30, r20
   1b282:	f5 1f       	adc	r31, r21
   1b284:	0d 5f       	subi	r16, 0xFD	; 253
   1b286:	1f 4f       	sbci	r17, 0xFF	; 255
   1b288:	80 81       	ld	r24, Z
   1b28a:	b1 2c       	mov	r11, r1
   1b28c:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1b28e:	a1 14       	cp	r10, r1
   1b290:	b1 04       	cpc	r11, r1
   1b292:	09 f4       	brne	.+2      	; 0x1b296 <lif_extract_e010_as_ascii+0x262>
   1b294:	ee c0       	rjmp	.+476    	; 0x1b472 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b296:	5f ef       	ldi	r21, 0xFF	; 255
   1b298:	a5 16       	cp	r10, r21
   1b29a:	b1 04       	cpc	r11, r1
   1b29c:	09 f0       	breq	.+2      	; 0x1b2a0 <lif_extract_e010_as_ascii+0x26c>
   1b29e:	7c f4       	brge	.+30     	; 0x1b2be <lif_extract_e010_as_ascii+0x28a>
   1b2a0:	c4 5e       	subi	r28, 0xE4	; 228
   1b2a2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2a4:	19 82       	std	Y+1, r1	; 0x01
   1b2a6:	18 82       	st	Y, r1
   1b2a8:	cc 51       	subi	r28, 0x1C	; 28
   1b2aa:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b2ac:	c5 01       	movw	r24, r10
   1b2ae:	01 97       	sbiw	r24, 0x01	; 1
   1b2b0:	c0 5d       	subi	r28, 0xD0	; 208
   1b2b2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2b4:	99 83       	std	Y+1, r25	; 0x01
   1b2b6:	88 83       	st	Y, r24
   1b2b8:	c0 53       	subi	r28, 0x30	; 48
   1b2ba:	d2 40       	sbci	r29, 0x02	; 2
   1b2bc:	68 c0       	rjmp	.+208    	; 0x1b38e <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b2be:	ed b7       	in	r30, 0x3d	; 61
   1b2c0:	fe b7       	in	r31, 0x3e	; 62
   1b2c2:	b5 82       	std	Z+5, r11	; 0x05
   1b2c4:	a4 82       	std	Z+4, r10	; 0x04
   1b2c6:	8e ef       	ldi	r24, 0xFE	; 254
   1b2c8:	96 e3       	ldi	r25, 0x36	; 54
   1b2ca:	a0 e0       	ldi	r26, 0x00	; 0
   1b2cc:	81 83       	std	Z+1, r24	; 0x01
   1b2ce:	92 83       	std	Z+2, r25	; 0x02
   1b2d0:	a3 83       	std	Z+3, r26	; 0x03
   1b2d2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1b2d6:	1e c0       	rjmp	.+60     	; 0x1b314 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b2d8:	8f 3e       	cpi	r24, 0xEF	; 239
   1b2da:	09 f4       	brne	.+2      	; 0x1b2de <lif_extract_e010_as_ascii+0x2aa>
   1b2dc:	d2 c0       	rjmp	.+420    	; 0x1b482 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b2de:	ed b7       	in	r30, 0x3d	; 61
   1b2e0:	fe b7       	in	r31, 0x3e	; 62
   1b2e2:	13 87       	std	Z+11, r17	; 0x0b
   1b2e4:	02 87       	std	Z+10, r16	; 0x0a
   1b2e6:	c2 5e       	subi	r28, 0xE2	; 226
   1b2e8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2ea:	28 81       	ld	r18, Y
   1b2ec:	39 81       	ldd	r19, Y+1	; 0x01
   1b2ee:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2f0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2f2:	ce 51       	subi	r28, 0x1E	; 30
   1b2f4:	d2 40       	sbci	r29, 0x02	; 2
   1b2f6:	26 83       	std	Z+6, r18	; 0x06
   1b2f8:	37 83       	std	Z+7, r19	; 0x07
   1b2fa:	40 87       	std	Z+8, r20	; 0x08
   1b2fc:	51 87       	std	Z+9, r21	; 0x09
   1b2fe:	90 e0       	ldi	r25, 0x00	; 0
   1b300:	95 83       	std	Z+5, r25	; 0x05
   1b302:	84 83       	std	Z+4, r24	; 0x04
   1b304:	88 ea       	ldi	r24, 0xA8	; 168
   1b306:	96 e3       	ldi	r25, 0x36	; 54
   1b308:	a0 e0       	ldi	r26, 0x00	; 0
   1b30a:	81 83       	std	Z+1, r24	; 0x01
   1b30c:	92 83       	std	Z+2, r25	; 0x02
   1b30e:	a3 83       	std	Z+3, r26	; 0x03
   1b310:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
                status = 0;
                done = 1;
   1b314:	21 e0       	ldi	r18, 0x01	; 1
   1b316:	30 e0       	ldi	r19, 0x00	; 0
   1b318:	ce 5d       	subi	r28, 0xDE	; 222
   1b31a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b31c:	39 83       	std	Y+1, r19	; 0x01
   1b31e:	28 83       	st	Y, r18
   1b320:	c2 52       	subi	r28, 0x22	; 34
   1b322:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b324:	e1 2c       	mov	r14, r1
   1b326:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b328:	ac c0       	rjmp	.+344    	; 0x1b482 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b32a:	0f 3f       	cpi	r16, 0xFF	; 255
   1b32c:	11 05       	cpc	r17, r1
   1b32e:	11 f0       	breq	.+4      	; 0x1b334 <lif_extract_e010_as_ascii+0x300>
   1b330:	0c f0       	brlt	.+2      	; 0x1b334 <lif_extract_e010_as_ascii+0x300>
   1b332:	a7 c0       	rjmp	.+334    	; 0x1b482 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b334:	e0 e1       	ldi	r30, 0x10	; 16
   1b336:	f1 e0       	ldi	r31, 0x01	; 1
   1b338:	ec 0f       	add	r30, r28
   1b33a:	fd 1f       	adc	r31, r29
   1b33c:	e0 0f       	add	r30, r16
   1b33e:	f1 1f       	adc	r31, r17
   1b340:	20 81       	ld	r18, Z
   1b342:	a1 01       	movw	r20, r2
   1b344:	4f 5f       	subi	r20, 0xFF	; 255
   1b346:	5f 4f       	sbci	r21, 0xFF	; 255
   1b348:	4a 01       	movw	r8, r20
   1b34a:	2d 30       	cpi	r18, 0x0D	; 13
   1b34c:	51 f1       	breq	.+84     	; 0x1b3a2 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b34e:	98 2d       	mov	r25, r8
   1b350:	89 2d       	mov	r24, r9
   1b352:	0f 5f       	subi	r16, 0xFF	; 255
   1b354:	1f 4f       	sbci	r17, 0xFF	; 255
   1b356:	ec e0       	ldi	r30, 0x0C	; 12
   1b358:	f0 e0       	ldi	r31, 0x00	; 0
   1b35a:	ec 0f       	add	r30, r28
   1b35c:	fd 1f       	adc	r31, r29
   1b35e:	e2 0d       	add	r30, r2
   1b360:	f3 1d       	adc	r31, r3
   1b362:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b364:	ef ef       	ldi	r30, 0xFF	; 255
   1b366:	8e 16       	cp	r8, r30
   1b368:	91 04       	cpc	r9, r1
   1b36a:	09 f0       	breq	.+2      	; 0x1b36e <lif_extract_e010_as_ascii+0x33a>
   1b36c:	ac f5       	brge	.+106    	; 0x1b3d8 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b36e:	c4 5e       	subi	r28, 0xE4	; 228
   1b370:	dd 4f       	sbci	r29, 0xFD	; 253
   1b372:	28 81       	ld	r18, Y
   1b374:	39 81       	ldd	r19, Y+1	; 0x01
   1b376:	cc 51       	subi	r28, 0x1C	; 28
   1b378:	d2 40       	sbci	r29, 0x02	; 2
   1b37a:	2f 5f       	subi	r18, 0xFF	; 255
   1b37c:	3f 4f       	sbci	r19, 0xFF	; 255
   1b37e:	c4 5e       	subi	r28, 0xE4	; 228
   1b380:	dd 4f       	sbci	r29, 0xFD	; 253
   1b382:	39 83       	std	Y+1, r19	; 0x01
   1b384:	28 83       	st	Y, r18
   1b386:	cc 51       	subi	r28, 0x1C	; 28
   1b388:	d2 40       	sbci	r29, 0x02	; 2
   1b38a:	29 2e       	mov	r2, r25
   1b38c:	38 2e       	mov	r3, r24
   1b38e:	c4 5e       	subi	r28, 0xE4	; 228
   1b390:	dd 4f       	sbci	r29, 0xFD	; 253
   1b392:	48 81       	ld	r20, Y
   1b394:	59 81       	ldd	r21, Y+1	; 0x01
   1b396:	cc 51       	subi	r28, 0x1C	; 28
   1b398:	d2 40       	sbci	r29, 0x02	; 2
   1b39a:	4a 15       	cp	r20, r10
   1b39c:	5b 05       	cpc	r21, r11
   1b39e:	2c f2       	brlt	.-118    	; 0x1b32a <lif_extract_e010_as_ascii+0x2f6>
   1b3a0:	62 c0       	rjmp	.+196    	; 0x1b466 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b3a2:	c4 5e       	subi	r28, 0xE4	; 228
   1b3a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3a6:	88 81       	ld	r24, Y
   1b3a8:	99 81       	ldd	r25, Y+1	; 0x01
   1b3aa:	cc 51       	subi	r28, 0x1C	; 28
   1b3ac:	d2 40       	sbci	r29, 0x02	; 2
   1b3ae:	c0 5d       	subi	r28, 0xD0	; 208
   1b3b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3b2:	a8 81       	ld	r26, Y
   1b3b4:	b9 81       	ldd	r27, Y+1	; 0x01
   1b3b6:	c0 53       	subi	r28, 0x30	; 48
   1b3b8:	d2 40       	sbci	r29, 0x02	; 2
   1b3ba:	8a 17       	cp	r24, r26
   1b3bc:	9b 07       	cpc	r25, r27
   1b3be:	39 f6       	brne	.-114    	; 0x1b34e <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b3c0:	ec e0       	ldi	r30, 0x0C	; 12
   1b3c2:	f0 e0       	ldi	r31, 0x00	; 0
   1b3c4:	ec 0f       	add	r30, r28
   1b3c6:	fd 1f       	adc	r31, r29
   1b3c8:	e2 0d       	add	r30, r2
   1b3ca:	f3 1d       	adc	r31, r3
   1b3cc:	ba e0       	ldi	r27, 0x0A	; 10
   1b3ce:	b0 83       	st	Z, r27
                    ++ind;
   1b3d0:	0f 5f       	subi	r16, 0xFF	; 255
   1b3d2:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b3d4:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b3d6:	47 c0       	rjmp	.+142    	; 0x1b466 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b3d8:	cc 5d       	subi	r28, 0xDC	; 220
   1b3da:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3dc:	28 81       	ld	r18, Y
   1b3de:	39 81       	ldd	r19, Y+1	; 0x01
   1b3e0:	c4 52       	subi	r28, 0x24	; 36
   1b3e2:	d2 40       	sbci	r29, 0x02	; 2
   1b3e4:	a4 01       	movw	r20, r8
   1b3e6:	61 e0       	ldi	r22, 0x01	; 1
   1b3e8:	70 e0       	ldi	r23, 0x00	; 0
   1b3ea:	ce 01       	movw	r24, r28
   1b3ec:	0c 96       	adiw	r24, 0x0c	; 12
   1b3ee:	0e 94 9c 7c 	call	0xf938	; 0xf938 <fwrite>
                    if(size < wind)
   1b3f2:	88 15       	cp	r24, r8
   1b3f4:	99 05       	cpc	r25, r9
   1b3f6:	d4 f4       	brge	.+52     	; 0x1b42c <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b3f8:	cb 5c       	subi	r28, 0xCB	; 203
   1b3fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3fc:	28 81       	ld	r18, Y
   1b3fe:	39 81       	ldd	r19, Y+1	; 0x01
   1b400:	4a 81       	ldd	r20, Y+2	; 0x02
   1b402:	c5 53       	subi	r28, 0x35	; 53
   1b404:	d2 40       	sbci	r29, 0x02	; 2
   1b406:	ed b7       	in	r30, 0x3d	; 61
   1b408:	fe b7       	in	r31, 0x3e	; 62
   1b40a:	21 83       	std	Z+1, r18	; 0x01
   1b40c:	32 83       	std	Z+2, r19	; 0x02
   1b40e:	43 83       	std	Z+3, r20	; 0x03
   1b410:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b414:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b416:	21 e0       	ldi	r18, 0x01	; 1
   1b418:	30 e0       	ldi	r19, 0x00	; 0
   1b41a:	ce 5d       	subi	r28, 0xDE	; 222
   1b41c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b41e:	39 83       	std	Y+1, r19	; 0x01
   1b420:	28 83       	st	Y, r18
   1b422:	c2 52       	subi	r28, 0x22	; 34
   1b424:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b426:	e1 2c       	mov	r14, r1
   1b428:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b42a:	1d c0       	rjmp	.+58     	; 0x1b466 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b42c:	09 2e       	mov	r0, r25
   1b42e:	00 0c       	add	r0, r0
   1b430:	aa 0b       	sbc	r26, r26
   1b432:	bb 0b       	sbc	r27, r27
   1b434:	48 0e       	add	r4, r24
   1b436:	59 1e       	adc	r5, r25
   1b438:	6a 1e       	adc	r6, r26
   1b43a:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b43c:	ed b7       	in	r30, 0x3d	; 61
   1b43e:	fe b7       	in	r31, 0x3e	; 62
   1b440:	44 82       	std	Z+4, r4	; 0x04
   1b442:	55 82       	std	Z+5, r5	; 0x05
   1b444:	66 82       	std	Z+6, r6	; 0x06
   1b446:	77 82       	std	Z+7, r7	; 0x07
   1b448:	ce 5c       	subi	r28, 0xCE	; 206
   1b44a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b44c:	28 81       	ld	r18, Y
   1b44e:	39 81       	ldd	r19, Y+1	; 0x01
   1b450:	4a 81       	ldd	r20, Y+2	; 0x02
   1b452:	c2 53       	subi	r28, 0x32	; 50
   1b454:	d2 40       	sbci	r29, 0x02	; 2
   1b456:	21 83       	std	Z+1, r18	; 0x01
   1b458:	32 83       	std	Z+2, r19	; 0x02
   1b45a:	43 83       	std	Z+3, r20	; 0x03
   1b45c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
                    wind = 0;
   1b460:	90 e0       	ldi	r25, 0x00	; 0
   1b462:	80 e0       	ldi	r24, 0x00	; 0
   1b464:	84 cf       	rjmp	.-248    	; 0x1b36e <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b466:	0f 3f       	cpi	r16, 0xFF	; 255
   1b468:	11 05       	cpc	r17, r1
   1b46a:	09 f0       	breq	.+2      	; 0x1b46e <lif_extract_e010_as_ascii+0x43a>
   1b46c:	0c f4       	brge	.+2      	; 0x1b470 <lif_extract_e010_as_ascii+0x43c>
   1b46e:	e5 ce       	rjmp	.-566    	; 0x1b23a <lif_extract_e010_as_ascii+0x206>
   1b470:	08 c0       	rjmp	.+16     	; 0x1b482 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b472:	a1 e0       	ldi	r26, 0x01	; 1
   1b474:	b0 e0       	ldi	r27, 0x00	; 0
   1b476:	ce 5d       	subi	r28, 0xDE	; 222
   1b478:	dd 4f       	sbci	r29, 0xFD	; 253
   1b47a:	b9 83       	std	Y+1, r27	; 0x01
   1b47c:	a8 83       	st	Y, r26
   1b47e:	c2 52       	subi	r28, 0x22	; 34
   1b480:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b482:	c2 5e       	subi	r28, 0xE2	; 226
   1b484:	dd 4f       	sbci	r29, 0xFD	; 253
   1b486:	28 81       	ld	r18, Y
   1b488:	39 81       	ldd	r19, Y+1	; 0x01
   1b48a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b48c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b48e:	ce 51       	subi	r28, 0x1E	; 30
   1b490:	d2 40       	sbci	r29, 0x02	; 2
   1b492:	3f 5f       	subi	r19, 0xFF	; 255
   1b494:	4f 4f       	sbci	r20, 0xFF	; 255
   1b496:	5f 4f       	sbci	r21, 0xFF	; 255
   1b498:	c2 5e       	subi	r28, 0xE2	; 226
   1b49a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b49c:	28 83       	st	Y, r18
   1b49e:	39 83       	std	Y+1, r19	; 0x01
   1b4a0:	4a 83       	std	Y+2, r20	; 0x02
   1b4a2:	5b 83       	std	Y+3, r21	; 0x03
   1b4a4:	ce 51       	subi	r28, 0x1E	; 30
   1b4a6:	d2 40       	sbci	r29, 0x02	; 2
   1b4a8:	97 ce       	rjmp	.-722    	; 0x1b1d8 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b4aa:	e1 2c       	mov	r14, r1
   1b4ac:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4ae:	c6 01       	movw	r24, r12
   1b4b0:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b4b4:	21 14       	cp	r2, r1
   1b4b6:	31 04       	cpc	r3, r1
   1b4b8:	31 f1       	breq	.+76     	; 0x1b506 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b4ba:	cc 5d       	subi	r28, 0xDC	; 220
   1b4bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4be:	28 81       	ld	r18, Y
   1b4c0:	39 81       	ldd	r19, Y+1	; 0x01
   1b4c2:	c4 52       	subi	r28, 0x24	; 36
   1b4c4:	d2 40       	sbci	r29, 0x02	; 2
   1b4c6:	a1 01       	movw	r20, r2
   1b4c8:	61 e0       	ldi	r22, 0x01	; 1
   1b4ca:	70 e0       	ldi	r23, 0x00	; 0
   1b4cc:	ce 01       	movw	r24, r28
   1b4ce:	0c 96       	adiw	r24, 0x0c	; 12
   1b4d0:	0e 94 9c 7c 	call	0xf938	; 0xf938 <fwrite>
   1b4d4:	8c 01       	movw	r16, r24
        if(size < wind)
   1b4d6:	82 15       	cp	r24, r2
   1b4d8:	93 05       	cpc	r25, r3
   1b4da:	64 f4       	brge	.+24     	; 0x1b4f4 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b4dc:	8a e4       	ldi	r24, 0x4A	; 74
   1b4de:	96 e3       	ldi	r25, 0x36	; 54
   1b4e0:	a0 e0       	ldi	r26, 0x00	; 0
   1b4e2:	ed b7       	in	r30, 0x3d	; 61
   1b4e4:	fe b7       	in	r31, 0x3e	; 62
   1b4e6:	81 83       	std	Z+1, r24	; 0x01
   1b4e8:	92 83       	std	Z+2, r25	; 0x02
   1b4ea:	a3 83       	std	Z+3, r26	; 0x03
   1b4ec:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            status = 0;
   1b4f0:	e1 2c       	mov	r14, r1
   1b4f2:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b4f4:	c8 01       	movw	r24, r16
   1b4f6:	01 2e       	mov	r0, r17
   1b4f8:	00 0c       	add	r0, r0
   1b4fa:	aa 0b       	sbc	r26, r26
   1b4fc:	bb 0b       	sbc	r27, r27
   1b4fe:	48 0e       	add	r4, r24
   1b500:	59 1e       	adc	r5, r25
   1b502:	6a 1e       	adc	r6, r26
   1b504:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b506:	cc 5d       	subi	r28, 0xDC	; 220
   1b508:	dd 4f       	sbci	r29, 0xFD	; 253
   1b50a:	88 81       	ld	r24, Y
   1b50c:	99 81       	ldd	r25, Y+1	; 0x01
   1b50e:	c4 52       	subi	r28, 0x24	; 36
   1b510:	d2 40       	sbci	r29, 0x02	; 2
   1b512:	0e 94 1e 7d 	call	0xfa3c	; 0xfa3c <fclose>
    if(t)
   1b516:	c8 5d       	subi	r28, 0xD8	; 216
   1b518:	dd 4f       	sbci	r29, 0xFD	; 253
   1b51a:	28 81       	ld	r18, Y
   1b51c:	39 81       	ldd	r19, Y+1	; 0x01
   1b51e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b520:	5b 81       	ldd	r21, Y+3	; 0x03
   1b522:	c8 52       	subi	r28, 0x28	; 40
   1b524:	d2 40       	sbci	r29, 0x02	; 2
   1b526:	21 15       	cp	r18, r1
   1b528:	31 05       	cpc	r19, r1
   1b52a:	41 05       	cpc	r20, r1
   1b52c:	51 05       	cpc	r21, r1
   1b52e:	d9 f0       	breq	.+54     	; 0x1b566 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b530:	c8 5e       	subi	r28, 0xE8	; 232
   1b532:	dd 4f       	sbci	r29, 0xFD	; 253
   1b534:	28 83       	st	Y, r18
   1b536:	39 83       	std	Y+1, r19	; 0x01
   1b538:	4a 83       	std	Y+2, r20	; 0x02
   1b53a:	5b 83       	std	Y+3, r21	; 0x03
   1b53c:	c8 51       	subi	r28, 0x18	; 24
   1b53e:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b540:	cc 5e       	subi	r28, 0xEC	; 236
   1b542:	dd 4f       	sbci	r29, 0xFD	; 253
   1b544:	28 83       	st	Y, r18
   1b546:	39 83       	std	Y+1, r19	; 0x01
   1b548:	4a 83       	std	Y+2, r20	; 0x02
   1b54a:	5b 83       	std	Y+3, r21	; 0x03
   1b54c:	c4 51       	subi	r28, 0x14	; 20
   1b54e:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b550:	be 01       	movw	r22, r28
   1b552:	6c 5e       	subi	r22, 0xEC	; 236
   1b554:	7d 4f       	sbci	r23, 0xFD	; 253
   1b556:	ca 5d       	subi	r28, 0xDA	; 218
   1b558:	dd 4f       	sbci	r29, 0xFD	; 253
   1b55a:	88 81       	ld	r24, Y
   1b55c:	99 81       	ldd	r25, Y+1	; 0x01
   1b55e:	c6 52       	subi	r28, 0x26	; 38
   1b560:	d2 40       	sbci	r29, 0x02	; 2
   1b562:	0e 94 5b 7a 	call	0xf4b6	; 0xf4b6 <utime>
    }
    sync();
   1b566:	0e 94 19 7c 	call	0xf832	; 0xf832 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b56a:	ed b7       	in	r30, 0x3d	; 61
   1b56c:	fe b7       	in	r31, 0x3e	; 62
   1b56e:	44 82       	std	Z+4, r4	; 0x04
   1b570:	55 82       	std	Z+5, r5	; 0x05
   1b572:	66 82       	std	Z+6, r6	; 0x06
   1b574:	77 82       	std	Z+7, r7	; 0x07
   1b576:	8c e3       	ldi	r24, 0x3C	; 60
   1b578:	96 e3       	ldi	r25, 0x36	; 54
   1b57a:	a0 e0       	ldi	r26, 0x00	; 0
   1b57c:	81 83       	std	Z+1, r24	; 0x01
   1b57e:	92 83       	std	Z+2, r25	; 0x02
   1b580:	a3 83       	std	Z+3, r26	; 0x03
   1b582:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    return(status);
   1b586:	c7 01       	movw	r24, r14
}
   1b588:	c9 5c       	subi	r28, 0xC9	; 201
   1b58a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b58c:	e2 e1       	ldi	r30, 0x12	; 18
   1b58e:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0001b592 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b592:	a4 e1       	ldi	r26, 0x14	; 20
   1b594:	b1 e0       	ldi	r27, 0x01	; 1
   1b596:	ef ec       	ldi	r30, 0xCF	; 207
   1b598:	fa ed       	ldi	r31, 0xDA	; 218
   1b59a:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__prologue_saves__>
   1b59e:	7c 01       	movw	r14, r24
   1b5a0:	8b 01       	movw	r16, r22
   1b5a2:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b5a4:	62 e4       	ldi	r22, 0x42	; 66
   1b5a6:	73 e0       	ldi	r23, 0x03	; 3
   1b5a8:	0e 94 88 d1 	call	0x1a310	; 0x1a310 <lif_open_volume>
   1b5ac:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b5ae:	00 97       	sbiw	r24, 0x00	; 0
   1b5b0:	69 f4       	brne	.+26     	; 0x1b5cc <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b5b2:	ed b7       	in	r30, 0x3d	; 61
   1b5b4:	fe b7       	in	r31, 0x3e	; 62
   1b5b6:	f5 82       	std	Z+5, r15	; 0x05
   1b5b8:	e4 82       	std	Z+4, r14	; 0x04
   1b5ba:	84 e2       	ldi	r24, 0x24	; 36
   1b5bc:	96 e3       	ldi	r25, 0x36	; 54
   1b5be:	a0 e0       	ldi	r26, 0x00	; 0
   1b5c0:	81 83       	std	Z+1, r24	; 0x01
   1b5c2:	92 83       	std	Z+2, r25	; 0x02
   1b5c4:	a3 83       	std	Z+3, r26	; 0x03
   1b5c6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1b5ca:	13 c0       	rjmp	.+38     	; 0x1b5f2 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b5cc:	b8 01       	movw	r22, r16
   1b5ce:	75 d9       	rcall	.-3350   	; 0x1a8ba <lif_find_file>
    if(index == -1)
   1b5d0:	01 96       	adiw	r24, 0x01	; 1
   1b5d2:	91 f4       	brne	.+36     	; 0x1b5f8 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b5d4:	ed b7       	in	r30, 0x3d	; 61
   1b5d6:	fe b7       	in	r31, 0x3e	; 62
   1b5d8:	15 83       	std	Z+5, r17	; 0x05
   1b5da:	04 83       	std	Z+4, r16	; 0x04
   1b5dc:	81 e1       	ldi	r24, 0x11	; 17
   1b5de:	96 e3       	ldi	r25, 0x36	; 54
   1b5e0:	a0 e0       	ldi	r26, 0x00	; 0
   1b5e2:	81 83       	std	Z+1, r24	; 0x01
   1b5e4:	92 83       	std	Z+2, r25	; 0x02
   1b5e6:	a3 83       	std	Z+3, r26	; 0x03
   1b5e8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5ec:	c4 01       	movw	r24, r8
   1b5ee:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b5f2:	00 e0       	ldi	r16, 0x00	; 0
   1b5f4:	10 e0       	ldi	r17, 0x00	; 0
   1b5f6:	ff c0       	rjmp	.+510    	; 0x1b7f6 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b5f8:	94 01       	movw	r18, r8
   1b5fa:	20 5a       	subi	r18, 0xA0	; 160
   1b5fc:	3f 4f       	sbci	r19, 0xFF	; 255
   1b5fe:	c0 5f       	subi	r28, 0xF0	; 240
   1b600:	de 4f       	sbci	r29, 0xFE	; 254
   1b602:	39 83       	std	Y+1, r19	; 0x01
   1b604:	28 83       	st	Y, r18
   1b606:	c0 51       	subi	r28, 0x10	; 16
   1b608:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b60a:	f9 01       	movw	r30, r18
   1b60c:	a0 80       	ld	r10, Z
   1b60e:	b1 80       	ldd	r11, Z+1	; 0x01
   1b610:	0b 2c       	mov	r0, r11
   1b612:	00 0c       	add	r0, r0
   1b614:	cc 08       	sbc	r12, r12
   1b616:	dd 08       	sbc	r13, r13
   1b618:	e1 2c       	mov	r14, r1
   1b61a:	f1 2c       	mov	r15, r1
   1b61c:	87 01       	movw	r16, r14
   1b61e:	e3 94       	inc	r14
   1b620:	21 e0       	ldi	r18, 0x01	; 1
   1b622:	30 e0       	ldi	r19, 0x00	; 0
   1b624:	40 e0       	ldi	r20, 0x00	; 0
   1b626:	50 e0       	ldi	r21, 0x00	; 0
   1b628:	65 e6       	ldi	r22, 0x65	; 101
   1b62a:	76 e1       	ldi	r23, 0x16	; 22
   1b62c:	c3 01       	movw	r24, r6
   1b62e:	0e 94 3e cd 	call	0x19a7c	; 0x19a7c <lif_create_volume>
   1b632:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b634:	89 2b       	or	r24, r25
   1b636:	d1 f2       	breq	.-76     	; 0x1b5ec <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b638:	81 e2       	ldi	r24, 0x21	; 33
   1b63a:	f4 01       	movw	r30, r8
   1b63c:	e1 5b       	subi	r30, 0xB1	; 177
   1b63e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b640:	d7 01       	movw	r26, r14
   1b642:	a1 5b       	subi	r26, 0xB1	; 177
   1b644:	bf 4f       	sbci	r27, 0xFF	; 255
   1b646:	01 90       	ld	r0, Z+
   1b648:	0d 92       	st	X+, r0
   1b64a:	8a 95       	dec	r24
   1b64c:	e1 f7       	brne	.-8      	; 0x1b646 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b64e:	82 e0       	ldi	r24, 0x02	; 2
   1b650:	90 e0       	ldi	r25, 0x00	; 0
   1b652:	a0 e0       	ldi	r26, 0x00	; 0
   1b654:	b0 e0       	ldi	r27, 0x00	; 0
   1b656:	f7 01       	movw	r30, r14
   1b658:	e4 5a       	subi	r30, 0xA4	; 164
   1b65a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b65c:	80 83       	st	Z, r24
   1b65e:	91 83       	std	Z+1, r25	; 0x01
   1b660:	a2 83       	std	Z+2, r26	; 0x02
   1b662:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b664:	c0 5f       	subi	r28, 0xF0	; 240
   1b666:	de 4f       	sbci	r29, 0xFE	; 254
   1b668:	e8 81       	ld	r30, Y
   1b66a:	f9 81       	ldd	r31, Y+1	; 0x01
   1b66c:	c0 51       	subi	r28, 0x10	; 16
   1b66e:	d1 40       	sbci	r29, 0x01	; 1
   1b670:	80 81       	ld	r24, Z
   1b672:	91 81       	ldd	r25, Z+1	; 0x01
   1b674:	a2 81       	ldd	r26, Z+2	; 0x02
   1b676:	b3 81       	ldd	r27, Z+3	; 0x03
   1b678:	f7 01       	movw	r30, r14
   1b67a:	80 8b       	std	Z+16, r24	; 0x10
   1b67c:	91 8b       	std	Z+17, r25	; 0x11
   1b67e:	a2 8b       	std	Z+18, r26	; 0x12
   1b680:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b682:	60 e0       	ldi	r22, 0x00	; 0
   1b684:	70 e0       	ldi	r23, 0x00	; 0
   1b686:	c7 01       	movw	r24, r14
   1b688:	0e 94 c0 cb 	call	0x19780	; 0x19780 <lif_writedirindex>
   1b68c:	8c 01       	movw	r16, r24
   1b68e:	89 2b       	or	r24, r25
   1b690:	41 f0       	breq	.+16     	; 0x1b6a2 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b692:	61 e0       	ldi	r22, 0x01	; 1
   1b694:	70 e0       	ldi	r23, 0x00	; 0
   1b696:	c7 01       	movw	r24, r14
   1b698:	0e 94 1c cc 	call	0x19838	; 0x19838 <lif_writedirEOF>
   1b69c:	8c 01       	movw	r16, r24
   1b69e:	89 2b       	or	r24, r25
   1b6a0:	39 f4       	brne	.+14     	; 0x1b6b0 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6a2:	c4 01       	movw	r24, r8
   1b6a4:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
   1b6a8:	c7 01       	movw	r24, r14
   1b6aa:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b6ae:	a3 c0       	rjmp	.+326    	; 0x1b7f6 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b6b0:	f7 01       	movw	r30, r14
   1b6b2:	44 84       	ldd	r4, Z+12	; 0x0c
   1b6b4:	55 84       	ldd	r5, Z+13	; 0x0d
   1b6b6:	66 84       	ldd	r6, Z+14	; 0x0e
   1b6b8:	77 84       	ldd	r7, Z+15	; 0x0f
   1b6ba:	76 2c       	mov	r7, r6
   1b6bc:	65 2c       	mov	r6, r5
   1b6be:	54 2c       	mov	r5, r4
   1b6c0:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b6c2:	f4 01       	movw	r30, r8
   1b6c4:	e4 5a       	subi	r30, 0xA4	; 164
   1b6c6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b6c8:	80 81       	ld	r24, Z
   1b6ca:	91 81       	ldd	r25, Z+1	; 0x01
   1b6cc:	a2 81       	ldd	r26, Z+2	; 0x02
   1b6ce:	b3 81       	ldd	r27, Z+3	; 0x03
   1b6d0:	22 27       	eor	r18, r18
   1b6d2:	38 2f       	mov	r19, r24
   1b6d4:	49 2f       	mov	r20, r25
   1b6d6:	5a 2f       	mov	r21, r26
   1b6d8:	c4 5f       	subi	r28, 0xF4	; 244
   1b6da:	de 4f       	sbci	r29, 0xFE	; 254
   1b6dc:	28 83       	st	Y, r18
   1b6de:	39 83       	std	Y+1, r19	; 0x01
   1b6e0:	4a 83       	std	Y+2, r20	; 0x02
   1b6e2:	5b 83       	std	Y+3, r21	; 0x03
   1b6e4:	cc 50       	subi	r28, 0x0C	; 12
   1b6e6:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b6e8:	21 2c       	mov	r2, r1
   1b6ea:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b6ec:	83 e0       	ldi	r24, 0x03	; 3
   1b6ee:	96 e3       	ldi	r25, 0x36	; 54
   1b6f0:	9c 01       	movw	r18, r24
   1b6f2:	40 e0       	ldi	r20, 0x00	; 0
   1b6f4:	ce 5e       	subi	r28, 0xEE	; 238
   1b6f6:	de 4f       	sbci	r29, 0xFE	; 254
   1b6f8:	28 83       	st	Y, r18
   1b6fa:	39 83       	std	Y+1, r19	; 0x01
   1b6fc:	4a 83       	std	Y+2, r20	; 0x02
   1b6fe:	c2 51       	subi	r28, 0x12	; 18
   1b700:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b702:	c0 5f       	subi	r28, 0xF0	; 240
   1b704:	de 4f       	sbci	r29, 0xFE	; 254
   1b706:	e8 81       	ld	r30, Y
   1b708:	f9 81       	ldd	r31, Y+1	; 0x01
   1b70a:	c0 51       	subi	r28, 0x10	; 16
   1b70c:	d1 40       	sbci	r29, 0x01	; 1
   1b70e:	80 81       	ld	r24, Z
   1b710:	91 81       	ldd	r25, Z+1	; 0x01
   1b712:	28 16       	cp	r2, r24
   1b714:	39 06       	cpc	r3, r25
   1b716:	0c f0       	brlt	.+2      	; 0x1b71a <lif_extract_lif_as_lif+0x188>
   1b718:	58 c0       	rjmp	.+176    	; 0x1b7ca <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b71a:	00 e0       	ldi	r16, 0x00	; 0
   1b71c:	11 e0       	ldi	r17, 0x01	; 1
   1b71e:	c4 5f       	subi	r28, 0xF4	; 244
   1b720:	de 4f       	sbci	r29, 0xFE	; 254
   1b722:	28 81       	ld	r18, Y
   1b724:	39 81       	ldd	r19, Y+1	; 0x01
   1b726:	4a 81       	ldd	r20, Y+2	; 0x02
   1b728:	5b 81       	ldd	r21, Y+3	; 0x03
   1b72a:	cc 50       	subi	r28, 0x0C	; 12
   1b72c:	d1 40       	sbci	r29, 0x01	; 1
   1b72e:	be 01       	movw	r22, r28
   1b730:	68 5f       	subi	r22, 0xF8	; 248
   1b732:	7f 4f       	sbci	r23, 0xFF	; 255
   1b734:	c4 01       	movw	r24, r8
   1b736:	0e 94 ff c1 	call	0x183fe	; 0x183fe <lif_read>
   1b73a:	5b 01       	movw	r10, r22
   1b73c:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b73e:	6f 3f       	cpi	r22, 0xFF	; 255
   1b740:	71 05       	cpc	r23, r1
   1b742:	09 f0       	breq	.+2      	; 0x1b746 <lif_extract_lif_as_lif+0x1b4>
   1b744:	2c f4       	brge	.+10     	; 0x1b750 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b746:	c4 01       	movw	r24, r8
   1b748:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
   1b74c:	c7 01       	movw	r24, r14
   1b74e:	4f cf       	rjmp	.-354    	; 0x1b5ee <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b750:	00 e0       	ldi	r16, 0x00	; 0
   1b752:	11 e0       	ldi	r17, 0x01	; 1
   1b754:	a3 01       	movw	r20, r6
   1b756:	92 01       	movw	r18, r4
   1b758:	be 01       	movw	r22, r28
   1b75a:	68 5f       	subi	r22, 0xF8	; 248
   1b75c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b75e:	c7 01       	movw	r24, r14
   1b760:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b764:	c5 01       	movw	r24, r10
   1b766:	0b 2c       	mov	r0, r11
   1b768:	00 0c       	add	r0, r0
   1b76a:	aa 0b       	sbc	r26, r26
   1b76c:	bb 0b       	sbc	r27, r27
   1b76e:	48 0e       	add	r4, r24
   1b770:	59 1e       	adc	r5, r25
   1b772:	6a 1e       	adc	r6, r26
   1b774:	7b 1e       	adc	r7, r27
        offset += size;
   1b776:	c4 5f       	subi	r28, 0xF4	; 244
   1b778:	de 4f       	sbci	r29, 0xFE	; 254
   1b77a:	28 81       	ld	r18, Y
   1b77c:	39 81       	ldd	r19, Y+1	; 0x01
   1b77e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b780:	5b 81       	ldd	r21, Y+3	; 0x03
   1b782:	cc 50       	subi	r28, 0x0C	; 12
   1b784:	d1 40       	sbci	r29, 0x01	; 1
   1b786:	28 0f       	add	r18, r24
   1b788:	39 1f       	adc	r19, r25
   1b78a:	4a 1f       	adc	r20, r26
   1b78c:	5b 1f       	adc	r21, r27
   1b78e:	c4 5f       	subi	r28, 0xF4	; 244
   1b790:	de 4f       	sbci	r29, 0xFE	; 254
   1b792:	28 83       	st	Y, r18
   1b794:	39 83       	std	Y+1, r19	; 0x01
   1b796:	4a 83       	std	Y+2, r20	; 0x02
   1b798:	5b 83       	std	Y+3, r21	; 0x03
   1b79a:	cc 50       	subi	r28, 0x0C	; 12
   1b79c:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b79e:	ed b7       	in	r30, 0x3d	; 61
   1b7a0:	fe b7       	in	r31, 0x3e	; 62
   1b7a2:	44 82       	std	Z+4, r4	; 0x04
   1b7a4:	55 82       	std	Z+5, r5	; 0x05
   1b7a6:	66 82       	std	Z+6, r6	; 0x06
   1b7a8:	77 82       	std	Z+7, r7	; 0x07
   1b7aa:	ce 5e       	subi	r28, 0xEE	; 238
   1b7ac:	de 4f       	sbci	r29, 0xFE	; 254
   1b7ae:	28 81       	ld	r18, Y
   1b7b0:	39 81       	ldd	r19, Y+1	; 0x01
   1b7b2:	4a 81       	ldd	r20, Y+2	; 0x02
   1b7b4:	c2 51       	subi	r28, 0x12	; 18
   1b7b6:	d1 40       	sbci	r29, 0x01	; 1
   1b7b8:	21 83       	std	Z+1, r18	; 0x01
   1b7ba:	32 83       	std	Z+2, r19	; 0x02
   1b7bc:	43 83       	std	Z+3, r20	; 0x03
   1b7be:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b7c2:	ff ef       	ldi	r31, 0xFF	; 255
   1b7c4:	2f 1a       	sub	r2, r31
   1b7c6:	3f 0a       	sbc	r3, r31
   1b7c8:	9c cf       	rjmp	.-200    	; 0x1b702 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7ca:	c4 01       	movw	r24, r8
   1b7cc:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
   1b7d0:	c7 01       	movw	r24, r14
   1b7d2:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b7d6:	ed b7       	in	r30, 0x3d	; 61
   1b7d8:	fe b7       	in	r31, 0x3e	; 62
   1b7da:	44 82       	std	Z+4, r4	; 0x04
   1b7dc:	55 82       	std	Z+5, r5	; 0x05
   1b7de:	66 82       	std	Z+6, r6	; 0x06
   1b7e0:	77 82       	std	Z+7, r7	; 0x07
   1b7e2:	85 ef       	ldi	r24, 0xF5	; 245
   1b7e4:	95 e3       	ldi	r25, 0x35	; 53
   1b7e6:	a0 e0       	ldi	r26, 0x00	; 0
   1b7e8:	81 83       	std	Z+1, r24	; 0x01
   1b7ea:	92 83       	std	Z+2, r25	; 0x02
   1b7ec:	a3 83       	std	Z+3, r26	; 0x03
   1b7ee:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    return(1);
   1b7f2:	01 e0       	ldi	r16, 0x01	; 1
   1b7f4:	10 e0       	ldi	r17, 0x00	; 0
}
   1b7f6:	c8 01       	movw	r24, r16
   1b7f8:	cc 5e       	subi	r28, 0xEC	; 236
   1b7fa:	de 4f       	sbci	r29, 0xFE	; 254
   1b7fc:	e2 e1       	ldi	r30, 0x12	; 18
   1b7fe:	0c 94 32 e7 	jmp	0x1ce64	; 0x1ce64 <__epilogue_restores__>

0001b802 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b802:	2f 92       	push	r2
   1b804:	3f 92       	push	r3
   1b806:	4f 92       	push	r4
   1b808:	5f 92       	push	r5
   1b80a:	6f 92       	push	r6
   1b80c:	8f 92       	push	r8
   1b80e:	9f 92       	push	r9
   1b810:	af 92       	push	r10
   1b812:	bf 92       	push	r11
   1b814:	cf 92       	push	r12
   1b816:	df 92       	push	r13
   1b818:	ef 92       	push	r14
   1b81a:	ff 92       	push	r15
   1b81c:	0f 93       	push	r16
   1b81e:	1f 93       	push	r17
   1b820:	cf 93       	push	r28
   1b822:	df 93       	push	r29
   1b824:	cd b7       	in	r28, 0x3d	; 61
   1b826:	de b7       	in	r29, 0x3e	; 62
   1b828:	cd 51       	subi	r28, 0x1D	; 29
   1b82a:	d1 40       	sbci	r29, 0x01	; 1
   1b82c:	0f b6       	in	r0, 0x3f	; 63
   1b82e:	f8 94       	cli
   1b830:	de bf       	out	0x3e, r29	; 62
   1b832:	0f be       	out	0x3f, r0	; 63
   1b834:	cd bf       	out	0x3d, r28	; 61
   1b836:	5c 01       	movw	r10, r24
   1b838:	7b 01       	movw	r14, r22
   1b83a:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b83c:	dc 01       	movw	r26, r24
   1b83e:	8c 91       	ld	r24, X
   1b840:	81 11       	cpse	r24, r1
   1b842:	03 c0       	rjmp	.+6      	; 0x1b84a <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b844:	85 ed       	ldi	r24, 0xD5	; 213
   1b846:	95 e3       	ldi	r25, 0x35	; 53
   1b848:	06 c0       	rjmp	.+12     	; 0x1b856 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b84a:	db 01       	movw	r26, r22
   1b84c:	8c 91       	ld	r24, X
   1b84e:	81 11       	cpse	r24, r1
   1b850:	0b c0       	rjmp	.+22     	; 0x1b868 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b852:	8a eb       	ldi	r24, 0xBA	; 186
   1b854:	95 e3       	ldi	r25, 0x35	; 53
   1b856:	a0 e0       	ldi	r26, 0x00	; 0
   1b858:	ed b7       	in	r30, 0x3d	; 61
   1b85a:	fe b7       	in	r31, 0x3e	; 62
   1b85c:	81 83       	std	Z+1, r24	; 0x01
   1b85e:	92 83       	std	Z+2, r25	; 0x02
   1b860:	a3 83       	std	Z+3, r26	; 0x03
   1b862:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1b866:	25 c1       	rjmp	.+586    	; 0x1bab2 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b868:	da 01       	movw	r26, r20
   1b86a:	8c 91       	ld	r24, X
   1b86c:	81 11       	cpse	r24, r1
   1b86e:	03 c0       	rjmp	.+6      	; 0x1b876 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b870:	8e e9       	ldi	r24, 0x9E	; 158
   1b872:	95 e3       	ldi	r25, 0x35	; 53
   1b874:	f0 cf       	rjmp	.-32     	; 0x1b856 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b876:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b87a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b87e:	92 ff       	sbrs	r25, 2
   1b880:	10 c0       	rjmp	.+32     	; 0x1b8a2 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b882:	ed b7       	in	r30, 0x3d	; 61
   1b884:	fe b7       	in	r31, 0x3e	; 62
   1b886:	51 87       	std	Z+9, r21	; 0x09
   1b888:	40 87       	std	Z+8, r20	; 0x08
   1b88a:	77 83       	std	Z+7, r23	; 0x07
   1b88c:	66 83       	std	Z+6, r22	; 0x06
   1b88e:	b5 82       	std	Z+5, r11	; 0x05
   1b890:	a4 82       	std	Z+4, r10	; 0x04
   1b892:	8f e6       	ldi	r24, 0x6F	; 111
   1b894:	95 e3       	ldi	r25, 0x35	; 53
   1b896:	a0 e0       	ldi	r26, 0x00	; 0
   1b898:	81 83       	std	Z+1, r24	; 0x01
   1b89a:	92 83       	std	Z+2, r25	; 0x02
   1b89c:	a3 83       	std	Z+3, r26	; 0x03
   1b89e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b8a2:	68 e0       	ldi	r22, 0x08	; 8
   1b8a4:	79 e0       	ldi	r23, 0x09	; 9
   1b8a6:	c4 01       	movw	r24, r8
   1b8a8:	0e 94 88 d1 	call	0x1a310	; 0x1a310 <lif_open_volume>
   1b8ac:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b8ae:	00 97       	sbiw	r24, 0x00	; 0
   1b8b0:	09 f4       	brne	.+2      	; 0x1b8b4 <lif_add_lif_file+0xb2>
   1b8b2:	ff c0       	rjmp	.+510    	; 0x1bab2 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b8b4:	b7 01       	movw	r22, r14
   1b8b6:	01 d8       	rcall	.-4094   	; 0x1a8ba <lif_find_file>
    if(index == -1)
   1b8b8:	01 96       	adiw	r24, 0x01	; 1
   1b8ba:	a1 f4       	brne	.+40     	; 0x1b8e4 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b8bc:	ed b7       	in	r30, 0x3d	; 61
   1b8be:	fe b7       	in	r31, 0x3e	; 62
   1b8c0:	f5 82       	std	Z+5, r15	; 0x05
   1b8c2:	e4 82       	std	Z+4, r14	; 0x04
   1b8c4:	8c e5       	ldi	r24, 0x5C	; 92
   1b8c6:	95 e3       	ldi	r25, 0x35	; 53
   1b8c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b8ca:	81 83       	std	Z+1, r24	; 0x01
   1b8cc:	92 83       	std	Z+2, r25	; 0x02
   1b8ce:	a3 83       	std	Z+3, r26	; 0x03
   1b8d0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b8d4:	c6 01       	movw	r24, r12
   1b8d6:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b8da:	60 e0       	ldi	r22, 0x00	; 0
   1b8dc:	70 e0       	ldi	r23, 0x00	; 0
   1b8de:	80 e0       	ldi	r24, 0x00	; 0
   1b8e0:	90 e0       	ldi	r25, 0x00	; 0
   1b8e2:	ff c0       	rjmp	.+510    	; 0x1bae2 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b8e4:	68 e0       	ldi	r22, 0x08	; 8
   1b8e6:	79 e0       	ldi	r23, 0x09	; 9
   1b8e8:	c5 01       	movw	r24, r10
   1b8ea:	0e 94 88 d1 	call	0x1a310	; 0x1a310 <lif_open_volume>
   1b8ee:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b8f0:	00 97       	sbiw	r24, 0x00	; 0
   1b8f2:	09 f4       	brne	.+2      	; 0x1b8f6 <lif_add_lif_file+0xf4>
   1b8f4:	de c0       	rjmp	.+444    	; 0x1bab2 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b8f6:	f6 01       	movw	r30, r12
   1b8f8:	e0 5a       	subi	r30, 0xA0	; 160
   1b8fa:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8fc:	40 81       	ld	r20, Z
   1b8fe:	51 81       	ldd	r21, Z+1	; 0x01
   1b900:	62 81       	ldd	r22, Z+2	; 0x02
   1b902:	73 81       	ldd	r23, Z+3	; 0x03
   1b904:	0e 94 28 d0 	call	0x1a050	; 0x1a050 <lif_newdir>
   1b908:	ca 5e       	subi	r28, 0xEA	; 234
   1b90a:	de 4f       	sbci	r29, 0xFE	; 254
   1b90c:	99 83       	std	Y+1, r25	; 0x01
   1b90e:	88 83       	st	Y, r24
   1b910:	c6 51       	subi	r28, 0x16	; 22
   1b912:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b914:	01 96       	adiw	r24, 0x01	; 1
   1b916:	79 f4       	brne	.+30     	; 0x1b936 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b918:	ed b7       	in	r30, 0x3d	; 61
   1b91a:	fe b7       	in	r31, 0x3e	; 62
   1b91c:	97 82       	std	Z+7, r9	; 0x07
   1b91e:	86 82       	std	Z+6, r8	; 0x06
   1b920:	b5 82       	std	Z+5, r11	; 0x05
   1b922:	a4 82       	std	Z+4, r10	; 0x04
   1b924:	8c e2       	ldi	r24, 0x2C	; 44
   1b926:	95 e3       	ldi	r25, 0x35	; 53
   1b928:	a0 e0       	ldi	r26, 0x00	; 0
   1b92a:	81 83       	std	Z+1, r24	; 0x01
   1b92c:	92 83       	std	Z+2, r25	; 0x02
   1b92e:	a3 83       	std	Z+3, r26	; 0x03
   1b930:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1b934:	a8 c0       	rjmp	.+336    	; 0x1ba86 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b936:	c7 01       	movw	r24, r14
   1b938:	84 5a       	subi	r24, 0xA4	; 164
   1b93a:	9f 4f       	sbci	r25, 0xFF	; 255
   1b93c:	dc 01       	movw	r26, r24
   1b93e:	4d 91       	ld	r20, X+
   1b940:	5d 91       	ld	r21, X+
   1b942:	6d 91       	ld	r22, X+
   1b944:	7c 91       	ld	r23, X
   1b946:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b948:	21 e2       	ldi	r18, 0x21	; 33
   1b94a:	f6 01       	movw	r30, r12
   1b94c:	e1 5b       	subi	r30, 0xB1	; 177
   1b94e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b950:	1d 97       	sbiw	r26, 0x0d	; 13
   1b952:	01 90       	ld	r0, Z+
   1b954:	0d 92       	st	X+, r0
   1b956:	2a 95       	dec	r18
   1b958:	e1 f7       	brne	.-8      	; 0x1b952 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b95a:	fc 01       	movw	r30, r24
   1b95c:	40 83       	st	Z, r20
   1b95e:	51 83       	std	Z+1, r21	; 0x01
   1b960:	62 83       	std	Z+2, r22	; 0x02
   1b962:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b964:	b6 2f       	mov	r27, r22
   1b966:	a5 2f       	mov	r26, r21
   1b968:	94 2f       	mov	r25, r20
   1b96a:	88 27       	eor	r24, r24
   1b96c:	c2 5f       	subi	r28, 0xF2	; 242
   1b96e:	de 4f       	sbci	r29, 0xFE	; 254
   1b970:	88 83       	st	Y, r24
   1b972:	99 83       	std	Y+1, r25	; 0x01
   1b974:	aa 83       	std	Y+2, r26	; 0x02
   1b976:	bb 83       	std	Y+3, r27	; 0x03
   1b978:	ce 50       	subi	r28, 0x0E	; 14
   1b97a:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b97c:	f6 01       	movw	r30, r12
   1b97e:	e4 5a       	subi	r30, 0xA4	; 164
   1b980:	ff 4f       	sbci	r31, 0xFF	; 255
   1b982:	80 81       	ld	r24, Z
   1b984:	91 81       	ldd	r25, Z+1	; 0x01
   1b986:	a2 81       	ldd	r26, Z+2	; 0x02
   1b988:	b3 81       	ldd	r27, Z+3	; 0x03
   1b98a:	22 27       	eor	r18, r18
   1b98c:	38 2f       	mov	r19, r24
   1b98e:	49 2f       	mov	r20, r25
   1b990:	5a 2f       	mov	r21, r26
   1b992:	ce 5e       	subi	r28, 0xEE	; 238
   1b994:	de 4f       	sbci	r29, 0xFE	; 254
   1b996:	28 83       	st	Y, r18
   1b998:	39 83       	std	Y+1, r19	; 0x01
   1b99a:	4a 83       	std	Y+2, r20	; 0x02
   1b99c:	5b 83       	std	Y+3, r21	; 0x03
   1b99e:	c2 51       	subi	r28, 0x12	; 18
   1b9a0:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9a2:	21 2c       	mov	r2, r1
   1b9a4:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b9a6:	81 2c       	mov	r8, r1
   1b9a8:	91 2c       	mov	r9, r1
   1b9aa:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9ac:	a7 01       	movw	r20, r14
   1b9ae:	40 5a       	subi	r20, 0xA0	; 160
   1b9b0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b9b2:	c4 5e       	subi	r28, 0xE4	; 228
   1b9b4:	de 4f       	sbci	r29, 0xFE	; 254
   1b9b6:	59 83       	std	Y+1, r21	; 0x01
   1b9b8:	48 83       	st	Y, r20
   1b9ba:	cc 51       	subi	r28, 0x1C	; 28
   1b9bc:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b9be:	8e e1       	ldi	r24, 0x1E	; 30
   1b9c0:	95 e3       	ldi	r25, 0x35	; 53
   1b9c2:	2c 01       	movw	r4, r24
   1b9c4:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9c6:	27 c0       	rjmp	.+78     	; 0x1ba16 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b9c8:	00 e0       	ldi	r16, 0x00	; 0
   1b9ca:	11 e0       	ldi	r17, 0x01	; 1
   1b9cc:	c8 5e       	subi	r28, 0xE8	; 232
   1b9ce:	de 4f       	sbci	r29, 0xFE	; 254
   1b9d0:	28 81       	ld	r18, Y
   1b9d2:	39 81       	ldd	r19, Y+1	; 0x01
   1b9d4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b9d6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b9d8:	c8 51       	subi	r28, 0x18	; 24
   1b9da:	d1 40       	sbci	r29, 0x01	; 1
   1b9dc:	be 01       	movw	r22, r28
   1b9de:	66 5f       	subi	r22, 0xF6	; 246
   1b9e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9e2:	c7 01       	movw	r24, r14
   1b9e4:	0e 94 52 c2 	call	0x184a4	; 0x184a4 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b9e8:	8f 3f       	cpi	r24, 0xFF	; 255
   1b9ea:	91 05       	cpc	r25, r1
   1b9ec:	09 f0       	breq	.+2      	; 0x1b9f0 <lif_add_lif_file+0x1ee>
   1b9ee:	0c f4       	brge	.+2      	; 0x1b9f2 <lif_add_lif_file+0x1f0>
   1b9f0:	4a c0       	rjmp	.+148    	; 0x1ba86 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b9f2:	5f ef       	ldi	r21, 0xFF	; 255
   1b9f4:	95 1a       	sub	r9, r21
   1b9f6:	a5 0a       	sbc	r10, r21
   1b9f8:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b9fa:	ed b7       	in	r30, 0x3d	; 61
   1b9fc:	fe b7       	in	r31, 0x3e	; 62
   1b9fe:	84 82       	std	Z+4, r8	; 0x04
   1ba00:	95 82       	std	Z+5, r9	; 0x05
   1ba02:	a6 82       	std	Z+6, r10	; 0x06
   1ba04:	b7 82       	std	Z+7, r11	; 0x07
   1ba06:	41 82       	std	Z+1, r4	; 0x01
   1ba08:	52 82       	std	Z+2, r5	; 0x02
   1ba0a:	63 82       	std	Z+3, r6	; 0x03
   1ba0c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba10:	ff ef       	ldi	r31, 0xFF	; 255
   1ba12:	2f 1a       	sub	r2, r31
   1ba14:	3f 0a       	sbc	r3, r31
   1ba16:	ce 5e       	subi	r28, 0xEE	; 238
   1ba18:	de 4f       	sbci	r29, 0xFE	; 254
   1ba1a:	28 81       	ld	r18, Y
   1ba1c:	39 81       	ldd	r19, Y+1	; 0x01
   1ba1e:	4a 81       	ldd	r20, Y+2	; 0x02
   1ba20:	5b 81       	ldd	r21, Y+3	; 0x03
   1ba22:	c2 51       	subi	r28, 0x12	; 18
   1ba24:	d1 40       	sbci	r29, 0x01	; 1
   1ba26:	28 0d       	add	r18, r8
   1ba28:	39 1d       	adc	r19, r9
   1ba2a:	4a 1d       	adc	r20, r10
   1ba2c:	5b 1d       	adc	r21, r11
   1ba2e:	c2 5f       	subi	r28, 0xF2	; 242
   1ba30:	de 4f       	sbci	r29, 0xFE	; 254
   1ba32:	88 81       	ld	r24, Y
   1ba34:	99 81       	ldd	r25, Y+1	; 0x01
   1ba36:	aa 81       	ldd	r26, Y+2	; 0x02
   1ba38:	bb 81       	ldd	r27, Y+3	; 0x03
   1ba3a:	ce 50       	subi	r28, 0x0E	; 14
   1ba3c:	d1 40       	sbci	r29, 0x01	; 1
   1ba3e:	88 0d       	add	r24, r8
   1ba40:	99 1d       	adc	r25, r9
   1ba42:	aa 1d       	adc	r26, r10
   1ba44:	bb 1d       	adc	r27, r11
   1ba46:	c8 5e       	subi	r28, 0xE8	; 232
   1ba48:	de 4f       	sbci	r29, 0xFE	; 254
   1ba4a:	88 83       	st	Y, r24
   1ba4c:	99 83       	std	Y+1, r25	; 0x01
   1ba4e:	aa 83       	std	Y+2, r26	; 0x02
   1ba50:	bb 83       	std	Y+3, r27	; 0x03
   1ba52:	c8 51       	subi	r28, 0x18	; 24
   1ba54:	d1 40       	sbci	r29, 0x01	; 1
   1ba56:	c4 5e       	subi	r28, 0xE4	; 228
   1ba58:	de 4f       	sbci	r29, 0xFE	; 254
   1ba5a:	a8 81       	ld	r26, Y
   1ba5c:	b9 81       	ldd	r27, Y+1	; 0x01
   1ba5e:	cc 51       	subi	r28, 0x1C	; 28
   1ba60:	d1 40       	sbci	r29, 0x01	; 1
   1ba62:	8d 91       	ld	r24, X+
   1ba64:	9c 91       	ld	r25, X
   1ba66:	28 16       	cp	r2, r24
   1ba68:	39 06       	cpc	r3, r25
   1ba6a:	94 f4       	brge	.+36     	; 0x1ba90 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1ba6c:	00 e0       	ldi	r16, 0x00	; 0
   1ba6e:	11 e0       	ldi	r17, 0x01	; 1
   1ba70:	be 01       	movw	r22, r28
   1ba72:	66 5f       	subi	r22, 0xF6	; 246
   1ba74:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba76:	c6 01       	movw	r24, r12
   1ba78:	0e 94 ff c1 	call	0x183fe	; 0x183fe <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ba7c:	6f 3f       	cpi	r22, 0xFF	; 255
   1ba7e:	71 05       	cpc	r23, r1
   1ba80:	11 f0       	breq	.+4      	; 0x1ba86 <lif_add_lif_file+0x284>
   1ba82:	0c f0       	brlt	.+2      	; 0x1ba86 <lif_add_lif_file+0x284>
   1ba84:	a1 cf       	rjmp	.-190    	; 0x1b9c8 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba86:	c7 01       	movw	r24, r14
   1ba88:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
   1ba8c:	c6 01       	movw	r24, r12
   1ba8e:	0f c0       	rjmp	.+30     	; 0x1baae <lif_add_lif_file+0x2ac>
   1ba90:	c6 01       	movw	r24, r12
   1ba92:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1ba96:	ca 5e       	subi	r28, 0xEA	; 234
   1ba98:	de 4f       	sbci	r29, 0xFE	; 254
   1ba9a:	68 81       	ld	r22, Y
   1ba9c:	79 81       	ldd	r23, Y+1	; 0x01
   1ba9e:	c6 51       	subi	r28, 0x16	; 22
   1baa0:	d1 40       	sbci	r29, 0x01	; 1
   1baa2:	c7 01       	movw	r24, r14
   1baa4:	0e 94 c0 cb 	call	0x19780	; 0x19780 <lif_writedirindex>
   1baa8:	89 2b       	or	r24, r25
   1baaa:	41 f4       	brne	.+16     	; 0x1babc <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1baac:	c7 01       	movw	r24, r14
   1baae:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1bab2:	6f ef       	ldi	r22, 0xFF	; 255
   1bab4:	7f ef       	ldi	r23, 0xFF	; 255
   1bab6:	8f ef       	ldi	r24, 0xFF	; 255
   1bab8:	9f ef       	ldi	r25, 0xFF	; 255
   1baba:	13 c0       	rjmp	.+38     	; 0x1bae2 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1babc:	c7 01       	movw	r24, r14
   1babe:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1bac2:	ed b7       	in	r30, 0x3d	; 61
   1bac4:	fe b7       	in	r31, 0x3e	; 62
   1bac6:	84 82       	std	Z+4, r8	; 0x04
   1bac8:	95 82       	std	Z+5, r9	; 0x05
   1baca:	a6 82       	std	Z+6, r10	; 0x06
   1bacc:	b7 82       	std	Z+7, r11	; 0x07
   1bace:	80 e1       	ldi	r24, 0x10	; 16
   1bad0:	95 e3       	ldi	r25, 0x35	; 53
   1bad2:	a0 e0       	ldi	r26, 0x00	; 0
   1bad4:	81 83       	std	Z+1, r24	; 0x01
   1bad6:	92 83       	std	Z+2, r25	; 0x02
   1bad8:	a3 83       	std	Z+3, r26	; 0x03
   1bada:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    return(bytes);
   1bade:	b4 01       	movw	r22, r8
   1bae0:	c5 01       	movw	r24, r10
}
   1bae2:	c3 5e       	subi	r28, 0xE3	; 227
   1bae4:	de 4f       	sbci	r29, 0xFE	; 254
   1bae6:	0f b6       	in	r0, 0x3f	; 63
   1bae8:	f8 94       	cli
   1baea:	de bf       	out	0x3e, r29	; 62
   1baec:	0f be       	out	0x3f, r0	; 63
   1baee:	cd bf       	out	0x3d, r28	; 61
   1baf0:	df 91       	pop	r29
   1baf2:	cf 91       	pop	r28
   1baf4:	1f 91       	pop	r17
   1baf6:	0f 91       	pop	r16
   1baf8:	ff 90       	pop	r15
   1bafa:	ef 90       	pop	r14
   1bafc:	df 90       	pop	r13
   1bafe:	cf 90       	pop	r12
   1bb00:	bf 90       	pop	r11
   1bb02:	af 90       	pop	r10
   1bb04:	9f 90       	pop	r9
   1bb06:	8f 90       	pop	r8
   1bb08:	6f 90       	pop	r6
   1bb0a:	5f 90       	pop	r5
   1bb0c:	4f 90       	pop	r4
   1bb0e:	3f 90       	pop	r3
   1bb10:	2f 90       	pop	r2
   1bb12:	08 95       	ret

0001bb14 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bb14:	ef 92       	push	r14
   1bb16:	ff 92       	push	r15
   1bb18:	0f 93       	push	r16
   1bb1a:	1f 93       	push	r17
   1bb1c:	cf 93       	push	r28
   1bb1e:	df 93       	push	r29
   1bb20:	ad b7       	in	r26, 0x3d	; 61
   1bb22:	be b7       	in	r27, 0x3e	; 62
   1bb24:	17 97       	sbiw	r26, 0x07	; 7
   1bb26:	0f b6       	in	r0, 0x3f	; 63
   1bb28:	f8 94       	cli
   1bb2a:	be bf       	out	0x3e, r27	; 62
   1bb2c:	0f be       	out	0x3f, r0	; 63
   1bb2e:	ad bf       	out	0x3d, r26	; 61
   1bb30:	7c 01       	movw	r14, r24
   1bb32:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1bb34:	fc 01       	movw	r30, r24
   1bb36:	80 81       	ld	r24, Z
   1bb38:	81 11       	cpse	r24, r1
   1bb3a:	03 c0       	rjmp	.+6      	; 0x1bb42 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1bb3c:	8b ee       	ldi	r24, 0xEB	; 235
   1bb3e:	94 e3       	ldi	r25, 0x34	; 52
   1bb40:	06 c0       	rjmp	.+12     	; 0x1bb4e <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1bb42:	fb 01       	movw	r30, r22
   1bb44:	80 81       	ld	r24, Z
   1bb46:	81 11       	cpse	r24, r1
   1bb48:	0b c0       	rjmp	.+22     	; 0x1bb60 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bb4a:	8b ec       	ldi	r24, 0xCB	; 203
   1bb4c:	94 e3       	ldi	r25, 0x34	; 52
   1bb4e:	a0 e0       	ldi	r26, 0x00	; 0
   1bb50:	ed b7       	in	r30, 0x3d	; 61
   1bb52:	fe b7       	in	r31, 0x3e	; 62
   1bb54:	81 83       	std	Z+1, r24	; 0x01
   1bb56:	92 83       	std	Z+2, r25	; 0x02
   1bb58:	a3 83       	std	Z+3, r26	; 0x03
   1bb5a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1bb5e:	68 c0       	rjmp	.+208    	; 0x1bc30 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1bb60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bb64:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bb68:	92 ff       	sbrs	r25, 2
   1bb6a:	0e c0       	rjmp	.+28     	; 0x1bb88 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1bb6c:	ed b7       	in	r30, 0x3d	; 61
   1bb6e:	fe b7       	in	r31, 0x3e	; 62
   1bb70:	77 83       	std	Z+7, r23	; 0x07
   1bb72:	66 83       	std	Z+6, r22	; 0x06
   1bb74:	f5 82       	std	Z+5, r15	; 0x05
   1bb76:	e4 82       	std	Z+4, r14	; 0x04
   1bb78:	8c ea       	ldi	r24, 0xAC	; 172
   1bb7a:	94 e3       	ldi	r25, 0x34	; 52
   1bb7c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb7e:	81 83       	std	Z+1, r24	; 0x01
   1bb80:	92 83       	std	Z+2, r25	; 0x02
   1bb82:	a3 83       	std	Z+3, r26	; 0x03
   1bb84:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1bb88:	68 e0       	ldi	r22, 0x08	; 8
   1bb8a:	79 e0       	ldi	r23, 0x09	; 9
   1bb8c:	c7 01       	movw	r24, r14
   1bb8e:	0e 94 88 d1 	call	0x1a310	; 0x1a310 <lif_open_volume>
   1bb92:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bb94:	00 97       	sbiw	r24, 0x00	; 0
   1bb96:	09 f4       	brne	.+2      	; 0x1bb9a <lif_del_file+0x86>
   1bb98:	4b c0       	rjmp	.+150    	; 0x1bc30 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1bb9a:	b8 01       	movw	r22, r16
   1bb9c:	0e 94 5d d4 	call	0x1a8ba	; 0x1a8ba <lif_find_file>
    if(index == -1)
   1bba0:	8f 3f       	cpi	r24, 0xFF	; 255
   1bba2:	ff ef       	ldi	r31, 0xFF	; 255
   1bba4:	9f 07       	cpc	r25, r31
   1bba6:	a1 f4       	brne	.+40     	; 0x1bbd0 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bba8:	ce 01       	movw	r24, r28
   1bbaa:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bbae:	ed b7       	in	r30, 0x3d	; 61
   1bbb0:	fe b7       	in	r31, 0x3e	; 62
   1bbb2:	17 83       	std	Z+7, r17	; 0x07
   1bbb4:	06 83       	std	Z+6, r16	; 0x06
   1bbb6:	f5 82       	std	Z+5, r15	; 0x05
   1bbb8:	e4 82       	std	Z+4, r14	; 0x04
   1bbba:	84 e8       	ldi	r24, 0x84	; 132
   1bbbc:	94 e3       	ldi	r25, 0x34	; 52
   1bbbe:	a0 e0       	ldi	r26, 0x00	; 0
   1bbc0:	81 83       	std	Z+1, r24	; 0x01
   1bbc2:	92 83       	std	Z+2, r25	; 0x02
   1bbc4:	a3 83       	std	Z+3, r26	; 0x03
   1bbc6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        return(0);
   1bbca:	80 e0       	ldi	r24, 0x00	; 0
   1bbcc:	90 e0       	ldi	r25, 0x00	; 0
   1bbce:	32 c0       	rjmp	.+100    	; 0x1bc34 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bbd0:	2a a1       	ldd	r18, Y+34	; 0x22
   1bbd2:	3b a1       	ldd	r19, Y+35	; 0x23
   1bbd4:	21 50       	subi	r18, 0x01	; 1
   1bbd6:	31 09       	sbc	r19, r1
   1bbd8:	fe 01       	movw	r30, r28
   1bbda:	e6 5a       	subi	r30, 0xA6	; 166
   1bbdc:	ff 4f       	sbci	r31, 0xFF	; 255
   1bbde:	82 17       	cp	r24, r18
   1bbe0:	93 07       	cpc	r25, r19
   1bbe2:	2c f0       	brlt	.+10     	; 0x1bbee <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1bbe4:	2f ef       	ldi	r18, 0xFF	; 255
   1bbe6:	3f ef       	ldi	r19, 0xFF	; 255
   1bbe8:	31 83       	std	Z+1, r19	; 0x01
   1bbea:	20 83       	st	Z, r18
   1bbec:	02 c0       	rjmp	.+4      	; 0x1bbf2 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bbee:	11 82       	std	Z+1, r1	; 0x01
   1bbf0:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bbf2:	bc 01       	movw	r22, r24
   1bbf4:	ce 01       	movw	r24, r28
   1bbf6:	0e 94 c0 cb 	call	0x19780	; 0x19780 <lif_writedirindex>
   1bbfa:	89 2b       	or	r24, r25
   1bbfc:	21 f4       	brne	.+8      	; 0x1bc06 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbfe:	ce 01       	movw	r24, r28
   1bc00:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
   1bc04:	15 c0       	rjmp	.+42     	; 0x1bc30 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bc06:	ce 01       	movw	r24, r28
   1bc08:	0e 94 34 cc 	call	0x19868	; 0x19868 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc0c:	ce 01       	movw	r24, r28
   1bc0e:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bc12:	ed b7       	in	r30, 0x3d	; 61
   1bc14:	fe b7       	in	r31, 0x3e	; 62
   1bc16:	15 83       	std	Z+5, r17	; 0x05
   1bc18:	04 83       	std	Z+4, r16	; 0x04
   1bc1a:	85 e7       	ldi	r24, 0x75	; 117
   1bc1c:	94 e3       	ldi	r25, 0x34	; 52
   1bc1e:	a0 e0       	ldi	r26, 0x00	; 0
   1bc20:	81 83       	std	Z+1, r24	; 0x01
   1bc22:	92 83       	std	Z+2, r25	; 0x02
   1bc24:	a3 83       	std	Z+3, r26	; 0x03
   1bc26:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    return(1);
   1bc2a:	81 e0       	ldi	r24, 0x01	; 1
   1bc2c:	90 e0       	ldi	r25, 0x00	; 0
   1bc2e:	02 c0       	rjmp	.+4      	; 0x1bc34 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bc30:	8f ef       	ldi	r24, 0xFF	; 255
   1bc32:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bc34:	cd b7       	in	r28, 0x3d	; 61
   1bc36:	de b7       	in	r29, 0x3e	; 62
   1bc38:	27 96       	adiw	r28, 0x07	; 7
   1bc3a:	e6 e0       	ldi	r30, 0x06	; 6
   1bc3c:	0c 94 3e e7 	jmp	0x1ce7c	; 0x1ce7c <__epilogue_restores__+0x18>

0001bc40 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bc40:	a7 e0       	ldi	r26, 0x07	; 7
   1bc42:	b0 e0       	ldi	r27, 0x00	; 0
   1bc44:	e6 e2       	ldi	r30, 0x26	; 38
   1bc46:	fe ed       	ldi	r31, 0xDE	; 222
   1bc48:	0c 94 1e e7 	jmp	0x1ce3c	; 0x1ce3c <__prologue_saves__+0x10>
   1bc4c:	6c 01       	movw	r12, r24
   1bc4e:	8b 01       	movw	r16, r22
   1bc50:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bc52:	fc 01       	movw	r30, r24
   1bc54:	80 81       	ld	r24, Z
   1bc56:	81 11       	cpse	r24, r1
   1bc58:	03 c0       	rjmp	.+6      	; 0x1bc60 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bc5a:	8d e4       	ldi	r24, 0x4D	; 77
   1bc5c:	94 e3       	ldi	r25, 0x34	; 52
   1bc5e:	06 c0       	rjmp	.+12     	; 0x1bc6c <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1bc60:	fb 01       	movw	r30, r22
   1bc62:	80 81       	ld	r24, Z
   1bc64:	81 11       	cpse	r24, r1
   1bc66:	0b c0       	rjmp	.+22     	; 0x1bc7e <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bc68:	86 e2       	ldi	r24, 0x26	; 38
   1bc6a:	94 e3       	ldi	r25, 0x34	; 52
   1bc6c:	a0 e0       	ldi	r26, 0x00	; 0
   1bc6e:	ed b7       	in	r30, 0x3d	; 61
   1bc70:	fe b7       	in	r31, 0x3e	; 62
   1bc72:	81 83       	std	Z+1, r24	; 0x01
   1bc74:	92 83       	std	Z+2, r25	; 0x02
   1bc76:	a3 83       	std	Z+3, r26	; 0x03
   1bc78:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1bc7c:	58 c0       	rjmp	.+176    	; 0x1bd2e <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1bc7e:	fa 01       	movw	r30, r20
   1bc80:	80 81       	ld	r24, Z
   1bc82:	81 11       	cpse	r24, r1
   1bc84:	03 c0       	rjmp	.+6      	; 0x1bc8c <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bc86:	8f ef       	ldi	r24, 0xFF	; 255
   1bc88:	93 e3       	ldi	r25, 0x33	; 51
   1bc8a:	f0 cf       	rjmp	.-32     	; 0x1bc6c <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bc8c:	ca 01       	movw	r24, r20
   1bc8e:	0e 94 1a c3 	call	0x18634	; 0x18634 <lif_checkname>
   1bc92:	89 2b       	or	r24, r25
   1bc94:	19 f4       	brne	.+6      	; 0x1bc9c <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bc96:	89 ec       	ldi	r24, 0xC9	; 201
   1bc98:	93 e3       	ldi	r25, 0x33	; 51
   1bc9a:	e8 cf       	rjmp	.-48     	; 0x1bc6c <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bc9c:	68 e0       	ldi	r22, 0x08	; 8
   1bc9e:	79 e0       	ldi	r23, 0x09	; 9
   1bca0:	c6 01       	movw	r24, r12
   1bca2:	0e 94 88 d1 	call	0x1a310	; 0x1a310 <lif_open_volume>
   1bca6:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bca8:	00 97       	sbiw	r24, 0x00	; 0
   1bcaa:	09 f4       	brne	.+2      	; 0x1bcae <lif_rename_file+0x6e>
   1bcac:	40 c0       	rjmp	.+128    	; 0x1bd2e <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bcae:	b8 01       	movw	r22, r16
   1bcb0:	0e 94 5d d4 	call	0x1a8ba	; 0x1a8ba <lif_find_file>
   1bcb4:	5c 01       	movw	r10, r24
    if(index == -1)
   1bcb6:	01 96       	adiw	r24, 0x01	; 1
   1bcb8:	a1 f4       	brne	.+40     	; 0x1bce2 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bcba:	ed b7       	in	r30, 0x3d	; 61
   1bcbc:	fe b7       	in	r31, 0x3e	; 62
   1bcbe:	17 83       	std	Z+7, r17	; 0x07
   1bcc0:	06 83       	std	Z+6, r16	; 0x06
   1bcc2:	d5 82       	std	Z+5, r13	; 0x05
   1bcc4:	c4 82       	std	Z+4, r12	; 0x04
   1bcc6:	80 ea       	ldi	r24, 0xA0	; 160
   1bcc8:	93 e3       	ldi	r25, 0x33	; 51
   1bcca:	a0 e0       	ldi	r26, 0x00	; 0
   1bccc:	81 83       	std	Z+1, r24	; 0x01
   1bcce:	92 83       	std	Z+2, r25	; 0x02
   1bcd0:	a3 83       	std	Z+3, r26	; 0x03
   1bcd2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcd6:	ce 01       	movw	r24, r28
   1bcd8:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bcdc:	80 e0       	ldi	r24, 0x00	; 0
   1bcde:	90 e0       	ldi	r25, 0x00	; 0
   1bce0:	28 c0       	rjmp	.+80     	; 0x1bd32 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bce2:	4a e0       	ldi	r20, 0x0A	; 10
   1bce4:	50 e0       	ldi	r21, 0x00	; 0
   1bce6:	b7 01       	movw	r22, r14
   1bce8:	ce 01       	movw	r24, r28
   1bcea:	81 5b       	subi	r24, 0xB1	; 177
   1bcec:	9f 4f       	sbci	r25, 0xFF	; 255
   1bcee:	0e 94 54 c3 	call	0x186a8	; 0x186a8 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bcf2:	b5 01       	movw	r22, r10
   1bcf4:	ce 01       	movw	r24, r28
   1bcf6:	0e 94 c0 cb 	call	0x19780	; 0x19780 <lif_writedirindex>
   1bcfa:	89 2b       	or	r24, r25
   1bcfc:	21 f4       	brne	.+8      	; 0x1bd06 <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcfe:	ce 01       	movw	r24, r28
   1bd00:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
   1bd04:	14 c0       	rjmp	.+40     	; 0x1bd2e <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bd06:	ed b7       	in	r30, 0x3d	; 61
   1bd08:	fe b7       	in	r31, 0x3e	; 62
   1bd0a:	f7 82       	std	Z+7, r15	; 0x07
   1bd0c:	e6 82       	std	Z+6, r14	; 0x06
   1bd0e:	15 83       	std	Z+5, r17	; 0x05
   1bd10:	04 83       	std	Z+4, r16	; 0x04
   1bd12:	89 e8       	ldi	r24, 0x89	; 137
   1bd14:	93 e3       	ldi	r25, 0x33	; 51
   1bd16:	a0 e0       	ldi	r26, 0x00	; 0
   1bd18:	81 83       	std	Z+1, r24	; 0x01
   1bd1a:	92 83       	std	Z+2, r25	; 0x02
   1bd1c:	a3 83       	std	Z+3, r26	; 0x03
   1bd1e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd22:	ce 01       	movw	r24, r28
   1bd24:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bd28:	81 e0       	ldi	r24, 0x01	; 1
   1bd2a:	90 e0       	ldi	r25, 0x00	; 0
   1bd2c:	02 c0       	rjmp	.+4      	; 0x1bd32 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bd2e:	8f ef       	ldi	r24, 0xFF	; 255
   1bd30:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bd32:	cd b7       	in	r28, 0x3d	; 61
   1bd34:	de b7       	in	r29, 0x3e	; 62
   1bd36:	27 96       	adiw	r28, 0x07	; 7
   1bd38:	ea e0       	ldi	r30, 0x0A	; 10
   1bd3a:	0c 94 3a e7 	jmp	0x1ce74	; 0x1ce74 <__epilogue_restores__+0x10>

0001bd3e <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bd3e:	4f 92       	push	r4
   1bd40:	5f 92       	push	r5
   1bd42:	6f 92       	push	r6
   1bd44:	7f 92       	push	r7
   1bd46:	af 92       	push	r10
   1bd48:	bf 92       	push	r11
   1bd4a:	cf 92       	push	r12
   1bd4c:	df 92       	push	r13
   1bd4e:	ef 92       	push	r14
   1bd50:	ff 92       	push	r15
   1bd52:	0f 93       	push	r16
   1bd54:	1f 93       	push	r17
   1bd56:	cf 93       	push	r28
   1bd58:	df 93       	push	r29
   1bd5a:	ad b7       	in	r26, 0x3d	; 61
   1bd5c:	be b7       	in	r27, 0x3e	; 62
   1bd5e:	17 97       	sbiw	r26, 0x07	; 7
   1bd60:	0f b6       	in	r0, 0x3f	; 63
   1bd62:	f8 94       	cli
   1bd64:	be bf       	out	0x3e, r27	; 62
   1bd66:	0f be       	out	0x3f, r0	; 63
   1bd68:	ad bf       	out	0x3d, r26	; 61
   1bd6a:	27 01       	movw	r4, r14
   1bd6c:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bd6e:	dc 01       	movw	r26, r24
   1bd70:	ec 91       	ld	r30, X
   1bd72:	e1 11       	cpse	r30, r1
   1bd74:	03 c0       	rjmp	.+6      	; 0x1bd7c <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bd76:	80 e6       	ldi	r24, 0x60	; 96
   1bd78:	93 e3       	ldi	r25, 0x33	; 51
   1bd7a:	16 c0       	rjmp	.+44     	; 0x1bda8 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bd7c:	db 01       	movw	r26, r22
   1bd7e:	ec 91       	ld	r30, X
   1bd80:	e1 11       	cpse	r30, r1
   1bd82:	03 c0       	rjmp	.+6      	; 0x1bd8a <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bd84:	8b e3       	ldi	r24, 0x3B	; 59
   1bd86:	93 e3       	ldi	r25, 0x33	; 51
   1bd88:	0f c0       	rjmp	.+30     	; 0x1bda8 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bd8a:	21 15       	cp	r18, r1
   1bd8c:	31 05       	cpc	r19, r1
   1bd8e:	41 05       	cpc	r20, r1
   1bd90:	51 05       	cpc	r21, r1
   1bd92:	19 f4       	brne	.+6      	; 0x1bd9a <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bd94:	88 e1       	ldi	r24, 0x18	; 24
   1bd96:	93 e3       	ldi	r25, 0x33	; 51
   1bd98:	07 c0       	rjmp	.+14     	; 0x1bda8 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bd9a:	e1 14       	cp	r14, r1
   1bd9c:	f1 04       	cpc	r15, r1
   1bd9e:	01 05       	cpc	r16, r1
   1bda0:	11 05       	cpc	r17, r1
   1bda2:	59 f4       	brne	.+22     	; 0x1bdba <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bda4:	88 ef       	ldi	r24, 0xF8	; 248
   1bda6:	92 e3       	ldi	r25, 0x32	; 50
   1bda8:	a0 e0       	ldi	r26, 0x00	; 0
   1bdaa:	ed b7       	in	r30, 0x3d	; 61
   1bdac:	fe b7       	in	r31, 0x3e	; 62
   1bdae:	81 83       	std	Z+1, r24	; 0x01
   1bdb0:	92 83       	std	Z+2, r25	; 0x02
   1bdb2:	a3 83       	std	Z+3, r26	; 0x03
   1bdb4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1bdb8:	2b c0       	rjmp	.+86     	; 0x1be10 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bdba:	67 01       	movw	r12, r14
   1bdbc:	78 01       	movw	r14, r16
   1bdbe:	f2 e0       	ldi	r31, 0x02	; 2
   1bdc0:	cf 1a       	sub	r12, r31
   1bdc2:	d1 08       	sbc	r13, r1
   1bdc4:	e1 08       	sbc	r14, r1
   1bdc6:	f1 08       	sbc	r15, r1
   1bdc8:	56 01       	movw	r10, r12
   1bdca:	67 01       	movw	r12, r14
   1bdcc:	a2 1a       	sub	r10, r18
   1bdce:	b3 0a       	sbc	r11, r19
   1bdd0:	c4 0a       	sbc	r12, r20
   1bdd2:	d5 0a       	sbc	r13, r21
   1bdd4:	79 01       	movw	r14, r18
   1bdd6:	8a 01       	movw	r16, r20
   1bdd8:	22 e0       	ldi	r18, 0x02	; 2
   1bdda:	30 e0       	ldi	r19, 0x00	; 0
   1bddc:	40 e0       	ldi	r20, 0x00	; 0
   1bdde:	50 e0       	ldi	r21, 0x00	; 0
   1bde0:	0e 94 3e cd 	call	0x19a7c	; 0x19a7c <lif_create_volume>
    if(LIF == NULL)
   1bde4:	00 97       	sbiw	r24, 0x00	; 0
   1bde6:	a1 f0       	breq	.+40     	; 0x1be10 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1bde8:	0e 94 cb ca 	call	0x19596	; 0x19596 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1bdec:	82 01       	movw	r16, r4
   1bdee:	d6 2d       	mov	r29, r6
   1bdf0:	c7 2d       	mov	r28, r7
   1bdf2:	ed b7       	in	r30, 0x3d	; 61
   1bdf4:	fe b7       	in	r31, 0x3e	; 62
   1bdf6:	44 82       	std	Z+4, r4	; 0x04
   1bdf8:	15 83       	std	Z+5, r17	; 0x05
   1bdfa:	66 82       	std	Z+6, r6	; 0x06
   1bdfc:	77 82       	std	Z+7, r7	; 0x07
   1bdfe:	88 ed       	ldi	r24, 0xD8	; 216
   1be00:	92 e3       	ldi	r25, 0x32	; 50
   1be02:	a0 e0       	ldi	r26, 0x00	; 0
   1be04:	81 83       	std	Z+1, r24	; 0x01
   1be06:	92 83       	std	Z+2, r25	; 0x02
   1be08:	a3 83       	std	Z+3, r26	; 0x03
   1be0a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    return(end);
   1be0e:	04 c0       	rjmp	.+8      	; 0x1be18 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1be10:	0f ef       	ldi	r16, 0xFF	; 255
   1be12:	1f ef       	ldi	r17, 0xFF	; 255
   1be14:	df ef       	ldi	r29, 0xFF	; 255
   1be16:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1be18:	b8 01       	movw	r22, r16
   1be1a:	8d 2f       	mov	r24, r29
   1be1c:	9c 2f       	mov	r25, r28
   1be1e:	ad b7       	in	r26, 0x3d	; 61
   1be20:	be b7       	in	r27, 0x3e	; 62
   1be22:	17 96       	adiw	r26, 0x07	; 7
   1be24:	0f b6       	in	r0, 0x3f	; 63
   1be26:	f8 94       	cli
   1be28:	be bf       	out	0x3e, r27	; 62
   1be2a:	0f be       	out	0x3f, r0	; 63
   1be2c:	ad bf       	out	0x3d, r26	; 61
   1be2e:	df 91       	pop	r29
   1be30:	cf 91       	pop	r28
   1be32:	1f 91       	pop	r17
   1be34:	0f 91       	pop	r16
   1be36:	ff 90       	pop	r15
   1be38:	ef 90       	pop	r14
   1be3a:	df 90       	pop	r13
   1be3c:	cf 90       	pop	r12
   1be3e:	bf 90       	pop	r11
   1be40:	af 90       	pop	r10
   1be42:	7f 90       	pop	r7
   1be44:	6f 90       	pop	r6
   1be46:	5f 90       	pop	r5
   1be48:	4f 90       	pop	r4
   1be4a:	08 95       	ret

0001be4c <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1be4c:	a5 e0       	ldi	r26, 0x05	; 5
   1be4e:	b0 e0       	ldi	r27, 0x00	; 0
   1be50:	eb e2       	ldi	r30, 0x2B	; 43
   1be52:	ff ed       	ldi	r31, 0xDF	; 223
   1be54:	f1 c7       	rjmp	.+4066   	; 0x1ce38 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1be56:	82 30       	cpi	r24, 0x02	; 2
   1be58:	91 05       	cpc	r25, r1
   1be5a:	1c f4       	brge	.+6      	; 0x1be62 <lif_tests+0x16>
        return (0);
   1be5c:	80 e0       	ldi	r24, 0x00	; 0
   1be5e:	90 e0       	ldi	r25, 0x00	; 0
   1be60:	8f c1       	rjmp	.+798    	; 0x1c180 <lif_tests+0x334>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1be62:	fb 01       	movw	r30, r22
   1be64:	e2 80       	ldd	r14, Z+2	; 0x02
   1be66:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1be68:	e1 14       	cp	r14, r1
   1be6a:	f1 04       	cpc	r15, r1
   1be6c:	09 f4       	brne	.+2      	; 0x1be70 <lif_tests+0x24>
   1be6e:	86 c1       	rjmp	.+780    	; 0x1c17c <lif_tests+0x330>
   1be70:	f7 01       	movw	r30, r14
   1be72:	20 81       	ld	r18, Z
   1be74:	22 23       	and	r18, r18
   1be76:	09 f4       	brne	.+2      	; 0x1be7a <lif_tests+0x2e>
   1be78:	81 c1       	rjmp	.+770    	; 0x1c17c <lif_tests+0x330>
   1be7a:	8b 01       	movw	r16, r22
   1be7c:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1be7e:	63 eb       	ldi	r22, 0xB3	; 179
   1be80:	76 e1       	ldi	r23, 0x16	; 22
   1be82:	f8 01       	movw	r30, r16
   1be84:	80 81       	ld	r24, Z
   1be86:	91 81       	ldd	r25, Z+1	; 0x01
   1be88:	0e 94 bd 32 	call	0x657a	; 0x657a <MATCHI_LEN>
   1be8c:	89 2b       	or	r24, r25
   1be8e:	d1 f0       	breq	.+52     	; 0x1bec4 <lif_tests+0x78>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1be90:	6d e6       	ldi	r22, 0x6D	; 109
   1be92:	76 e1       	ldi	r23, 0x16	; 22
   1be94:	c7 01       	movw	r24, r14
   1be96:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1be9a:	89 2b       	or	r24, r25
   1be9c:	29 f0       	breq	.+10     	; 0x1bea8 <lif_tests+0x5c>
		{
			lif_help(1);
   1be9e:	81 e0       	ldi	r24, 0x01	; 1
   1bea0:	90 e0       	ldi	r25, 0x00	; 0
   1bea2:	0e 94 f0 c0 	call	0x181e0	; 0x181e0 <lif_help>
   1bea6:	6a c1       	rjmp	.+724    	; 0x1c17c <lif_tests+0x330>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bea8:	6c e6       	ldi	r22, 0x6C	; 108
   1beaa:	76 e1       	ldi	r23, 0x16	; 22
   1beac:	c7 01       	movw	r24, r14
   1beae:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1beb2:	89 2b       	or	r24, r25
   1beb4:	a1 f7       	brne	.-24     	; 0x1be9e <lif_tests+0x52>
   1beb6:	62 e7       	ldi	r22, 0x72	; 114
   1beb8:	76 e1       	ldi	r23, 0x16	; 22
   1beba:	c7 01       	movw	r24, r14
   1bebc:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1bec0:	89 2b       	or	r24, r25
   1bec2:	69 f7       	brne	.-38     	; 0x1be9e <lif_tests+0x52>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1bec4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bec8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1becc:	9b 7f       	andi	r25, 0xFB	; 251
   1bece:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bed2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1bed6:	96 01       	movw	r18, r12
   1bed8:	42 e0       	ldi	r20, 0x02	; 2
   1beda:	50 e0       	ldi	r21, 0x00	; 0
   1bedc:	65 e7       	ldi	r22, 0x75	; 117
   1bede:	76 e1       	ldi	r23, 0x16	; 22
   1bee0:	c7 01       	movw	r24, r14
   1bee2:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1bee6:	89 2b       	or	r24, r25
   1bee8:	79 f0       	breq	.+30     	; 0x1bf08 <lif_tests+0xbc>
    {
        debuglevel |= 0x400;
   1beea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1beee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bef2:	94 60       	ori	r25, 0x04	; 4
   1bef4:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bef8:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1befc:	f8 01       	movw	r30, r16
   1befe:	e4 80       	ldd	r14, Z+4	; 0x04
   1bf00:	f5 80       	ldd	r15, Z+5	; 0x05
   1bf02:	c3 e0       	ldi	r28, 0x03	; 3
   1bf04:	d0 e0       	ldi	r29, 0x00	; 0
   1bf06:	02 c0       	rjmp	.+4      	; 0x1bf0c <lif_tests+0xc0>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bf08:	c2 e0       	ldi	r28, 0x02	; 2
   1bf0a:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1bf0c:	5e 01       	movw	r10, r28
   1bf0e:	f3 e0       	ldi	r31, 0x03	; 3
   1bf10:	af 0e       	add	r10, r31
   1bf12:	b1 1c       	adc	r11, r1
   1bf14:	96 01       	movw	r18, r12
   1bf16:	a5 01       	movw	r20, r10
   1bf18:	68 e7       	ldi	r22, 0x78	; 120
   1bf1a:	76 e1       	ldi	r23, 0x16	; 22
   1bf1c:	c7 01       	movw	r24, r14
   1bf1e:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1bf22:	89 2b       	or	r24, r25
   1bf24:	61 f0       	breq	.+24     	; 0x1bf3e <lif_tests+0xf2>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bf26:	cc 0f       	add	r28, r28
   1bf28:	dd 1f       	adc	r29, r29
   1bf2a:	c0 0f       	add	r28, r16
   1bf2c:	d1 1f       	adc	r29, r17
   1bf2e:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf30:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf32:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf34:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf36:	88 81       	ld	r24, Y
   1bf38:	99 81       	ldd	r25, Y+1	; 0x01
   1bf3a:	63 dc       	rcall	.-1850   	; 0x1b802 <lif_add_lif_file>
   1bf3c:	1f c1       	rjmp	.+574    	; 0x1c17c <lif_tests+0x330>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1bf3e:	96 01       	movw	r18, r12
   1bf40:	a5 01       	movw	r20, r10
   1bf42:	6f e7       	ldi	r22, 0x7F	; 127
   1bf44:	76 e1       	ldi	r23, 0x16	; 22
   1bf46:	c7 01       	movw	r24, r14
   1bf48:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1bf4c:	89 2b       	or	r24, r25
   1bf4e:	69 f0       	breq	.+26     	; 0x1bf6a <lif_tests+0x11e>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1bf50:	cc 0f       	add	r28, r28
   1bf52:	dd 1f       	adc	r29, r29
   1bf54:	c0 0f       	add	r28, r16
   1bf56:	d1 1f       	adc	r29, r17
   1bf58:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf5a:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf5c:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf5e:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf60:	88 81       	ld	r24, Y
   1bf62:	99 81       	ldd	r25, Y+1	; 0x01
   1bf64:	0e 94 de d6 	call	0x1adbc	; 0x1adbc <lif_add_ascii_file_as_e010>
   1bf68:	09 c1       	rjmp	.+530    	; 0x1c17c <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bf6a:	96 01       	movw	r18, r12
   1bf6c:	a5 01       	movw	r20, r10
   1bf6e:	63 e8       	ldi	r22, 0x83	; 131
   1bf70:	76 e1       	ldi	r23, 0x16	; 22
   1bf72:	c7 01       	movw	r24, r14
   1bf74:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1bf78:	89 2b       	or	r24, r25
   1bf7a:	09 f4       	brne	.+2      	; 0x1bf7e <lif_tests+0x132>
   1bf7c:	42 c0       	rjmp	.+132    	; 0x1c002 <lif_tests+0x1b6>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1bf7e:	ce 01       	movw	r24, r28
   1bf80:	88 0f       	add	r24, r24
   1bf82:	99 1f       	adc	r25, r25
   1bf84:	e8 01       	movw	r28, r16
   1bf86:	c8 0f       	add	r28, r24
   1bf88:	d9 1f       	adc	r29, r25
   1bf8a:	c8 80       	ld	r12, Y
   1bf8c:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1bf8e:	aa 80       	ldd	r10, Y+2	; 0x02
   1bf90:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1bf92:	0c 80       	ldd	r0, Y+4	; 0x04
   1bf94:	dd 81       	ldd	r29, Y+5	; 0x05
   1bf96:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1bf98:	6e e8       	ldi	r22, 0x8E	; 142
   1bf9a:	76 e1       	ldi	r23, 0x16	; 22
   1bf9c:	ce 01       	movw	r24, r28
   1bf9e:	0e 94 bd 32 	call	0x657a	; 0x657a <MATCHI_LEN>
   1bfa2:	89 2b       	or	r24, r25
   1bfa4:	09 f0       	breq	.+2      	; 0x1bfa8 <lif_tests+0x15c>
            model +=2;
   1bfa6:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1bfa8:	40 e0       	ldi	r20, 0x00	; 0
   1bfaa:	50 e0       	ldi	r21, 0x00	; 0
   1bfac:	60 e0       	ldi	r22, 0x00	; 0
   1bfae:	70 e0       	ldi	r23, 0x00	; 0
   1bfb0:	ce 01       	movw	r24, r28
   1bfb2:	0e 94 33 a4 	call	0x14866	; 0x14866 <hpdir_find_drive>
   1bfb6:	89 2b       	or	r24, r25
   1bfb8:	b9 f0       	breq	.+46     	; 0x1bfe8 <lif_tests+0x19c>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1bfba:	60 91 24 20 	lds	r22, 0x2024	; 0x802024 <hpdir+0xac>
   1bfbe:	70 91 25 20 	lds	r23, 0x2025	; 0x802025 <hpdir+0xad>
   1bfc2:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <hpdir+0xae>
   1bfc6:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <hpdir+0xaf>
   1bfca:	0e 94 16 a4 	call	0x1482c	; 0x1482c <lif_dir_count>
   1bfce:	9b 01       	movw	r18, r22
   1bfd0:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
			// NOTE: we could grab the directory size for non 0 entries in the hpdir.ini file - I use a computed value which is also fine
            lif_create_image(name, label, dir, sectors);
   1bfd2:	e0 90 24 20 	lds	r14, 0x2024	; 0x802024 <hpdir+0xac>
   1bfd6:	f0 90 25 20 	lds	r15, 0x2025	; 0x802025 <hpdir+0xad>
   1bfda:	00 91 26 20 	lds	r16, 0x2026	; 0x802026 <hpdir+0xae>
   1bfde:	10 91 27 20 	lds	r17, 0x2027	; 0x802027 <hpdir+0xaf>
   1bfe2:	b5 01       	movw	r22, r10
   1bfe4:	c6 01       	movw	r24, r12
   1bfe6:	2e c0       	rjmp	.+92     	; 0x1c044 <lif_tests+0x1f8>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1bfe8:	ed b7       	in	r30, 0x3d	; 61
   1bfea:	fe b7       	in	r31, 0x3e	; 62
   1bfec:	d5 83       	std	Z+5, r29	; 0x05
   1bfee:	c4 83       	std	Z+4, r28	; 0x04
   1bff0:	89 e2       	ldi	r24, 0x29	; 41
   1bff2:	95 e4       	ldi	r25, 0x45	; 69
   1bff4:	a0 e0       	ldi	r26, 0x00	; 0
   1bff6:	81 83       	std	Z+1, r24	; 0x01
   1bff8:	92 83       	std	Z+2, r25	; 0x02
   1bffa:	a3 83       	std	Z+3, r26	; 0x03
   1bffc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1c000:	bd c0       	rjmp	.+378    	; 0x1c17c <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c002:	96 01       	movw	r18, r12
   1c004:	ae 01       	movw	r20, r28
   1c006:	4c 5f       	subi	r20, 0xFC	; 252
   1c008:	5f 4f       	sbci	r21, 0xFF	; 255
   1c00a:	61 e9       	ldi	r22, 0x91	; 145
   1c00c:	76 e1       	ldi	r23, 0x16	; 22
   1c00e:	c7 01       	movw	r24, r14
   1c010:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1c014:	89 2b       	or	r24, r25
   1c016:	c1 f0       	breq	.+48     	; 0x1c048 <lif_tests+0x1fc>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c018:	cc 0f       	add	r28, r28
   1c01a:	dd 1f       	adc	r29, r29
   1c01c:	c0 0f       	add	r28, r16
   1c01e:	d1 1f       	adc	r29, r17
   1c020:	8c 81       	ldd	r24, Y+4	; 0x04
   1c022:	9d 81       	ldd	r25, Y+5	; 0x05
   1c024:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <atol>
   1c028:	4b 01       	movw	r8, r22
   1c02a:	5c 01       	movw	r10, r24
   1c02c:	8e 81       	ldd	r24, Y+6	; 0x06
   1c02e:	9f 81       	ldd	r25, Y+7	; 0x07
   1c030:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <atol>
   1c034:	7b 01       	movw	r14, r22
   1c036:	8c 01       	movw	r16, r24
   1c038:	6a 81       	ldd	r22, Y+2	; 0x02
   1c03a:	7b 81       	ldd	r23, Y+3	; 0x03
   1c03c:	a5 01       	movw	r20, r10
   1c03e:	94 01       	movw	r18, r8
   1c040:	88 81       	ld	r24, Y
   1c042:	99 81       	ldd	r25, Y+1	; 0x01
   1c044:	7c de       	rcall	.-776    	; 0x1bd3e <lif_create_image>
   1c046:	9a c0       	rjmp	.+308    	; 0x1c17c <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c048:	96 01       	movw	r18, r12
   1c04a:	ae 01       	movw	r20, r28
   1c04c:	4e 5f       	subi	r20, 0xFE	; 254
   1c04e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c050:	68 e9       	ldi	r22, 0x98	; 152
   1c052:	76 e1       	ldi	r23, 0x16	; 22
   1c054:	c7 01       	movw	r24, r14
   1c056:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1c05a:	89 2b       	or	r24, r25
   1c05c:	51 f0       	breq	.+20     	; 0x1c072 <lif_tests+0x226>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c05e:	cc 0f       	add	r28, r28
   1c060:	dd 1f       	adc	r29, r29
   1c062:	c0 0f       	add	r28, r16
   1c064:	d1 1f       	adc	r29, r17
   1c066:	6a 81       	ldd	r22, Y+2	; 0x02
   1c068:	7b 81       	ldd	r23, Y+3	; 0x03
   1c06a:	88 81       	ld	r24, Y
   1c06c:	99 81       	ldd	r25, Y+1	; 0x01
   1c06e:	52 dd       	rcall	.-1372   	; 0x1bb14 <lif_del_file>
   1c070:	85 c0       	rjmp	.+266    	; 0x1c17c <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c072:	96 01       	movw	r18, r12
   1c074:	ae 01       	movw	r20, r28
   1c076:	4f 5f       	subi	r20, 0xFF	; 255
   1c078:	5f 4f       	sbci	r21, 0xFF	; 255
   1c07a:	68 ed       	ldi	r22, 0xD8	; 216
   1c07c:	7b e0       	ldi	r23, 0x0B	; 11
   1c07e:	c7 01       	movw	r24, r14
   1c080:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1c084:	89 2b       	or	r24, r25
   1c086:	49 f0       	breq	.+18     	; 0x1c09a <lif_tests+0x24e>
    {
        lif_dir(argv[ind]);
   1c088:	cc 0f       	add	r28, r28
   1c08a:	dd 1f       	adc	r29, r29
   1c08c:	c0 0f       	add	r28, r16
   1c08e:	d1 1f       	adc	r29, r17
   1c090:	88 81       	ld	r24, Y
   1c092:	99 81       	ldd	r25, Y+1	; 0x01
   1c094:	0e 94 88 d2 	call	0x1a510	; 0x1a510 <lif_dir>
   1c098:	71 c0       	rjmp	.+226    	; 0x1c17c <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c09a:	96 01       	movw	r18, r12
   1c09c:	a5 01       	movw	r20, r10
   1c09e:	6c e9       	ldi	r22, 0x9C	; 156
   1c0a0:	76 e1       	ldi	r23, 0x16	; 22
   1c0a2:	c7 01       	movw	r24, r14
   1c0a4:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1c0a8:	89 2b       	or	r24, r25
   1c0aa:	71 f0       	breq	.+28     	; 0x1c0c8 <lif_tests+0x27c>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c0ac:	ce 01       	movw	r24, r28
   1c0ae:	88 0f       	add	r24, r24
   1c0b0:	99 1f       	adc	r25, r25
   1c0b2:	e8 01       	movw	r28, r16
   1c0b4:	c8 0f       	add	r28, r24
   1c0b6:	d9 1f       	adc	r29, r25
   1c0b8:	4c 81       	ldd	r20, Y+4	; 0x04
   1c0ba:	5d 81       	ldd	r21, Y+5	; 0x05
   1c0bc:	6a 81       	ldd	r22, Y+2	; 0x02
   1c0be:	7b 81       	ldd	r23, Y+3	; 0x03
   1c0c0:	88 81       	ld	r24, Y
   1c0c2:	99 81       	ldd	r25, Y+1	; 0x01
   1c0c4:	66 da       	rcall	.-2868   	; 0x1b592 <lif_extract_lif_as_lif>
   1c0c6:	5a c0       	rjmp	.+180    	; 0x1c17c <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c0c8:	96 01       	movw	r18, r12
   1c0ca:	a5 01       	movw	r20, r10
   1c0cc:	67 ea       	ldi	r22, 0xA7	; 167
   1c0ce:	76 e1       	ldi	r23, 0x16	; 22
   1c0d0:	c7 01       	movw	r24, r14
   1c0d2:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1c0d6:	89 2b       	or	r24, r25
   1c0d8:	79 f0       	breq	.+30     	; 0x1c0f8 <lif_tests+0x2ac>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c0da:	ce 01       	movw	r24, r28
   1c0dc:	88 0f       	add	r24, r24
   1c0de:	99 1f       	adc	r25, r25
   1c0e0:	e8 01       	movw	r28, r16
   1c0e2:	c8 0f       	add	r28, r24
   1c0e4:	d9 1f       	adc	r29, r25
   1c0e6:	4c 81       	ldd	r20, Y+4	; 0x04
   1c0e8:	5d 81       	ldd	r21, Y+5	; 0x05
   1c0ea:	6a 81       	ldd	r22, Y+2	; 0x02
   1c0ec:	7b 81       	ldd	r23, Y+3	; 0x03
   1c0ee:	88 81       	ld	r24, Y
   1c0f0:	99 81       	ldd	r25, Y+1	; 0x01
   1c0f2:	0e 94 1a d8 	call	0x1b034	; 0x1b034 <lif_extract_e010_as_ascii>
   1c0f6:	42 c0       	rjmp	.+132    	; 0x1c17c <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c0f8:	96 01       	movw	r18, r12
   1c0fa:	a5 01       	movw	r20, r10
   1c0fc:	65 ee       	ldi	r22, 0xE5	; 229
   1c0fe:	7b e0       	ldi	r23, 0x0B	; 11
   1c100:	c7 01       	movw	r24, r14
   1c102:	0e 94 93 32 	call	0x6526	; 0x6526 <MATCHARGS>
   1c106:	89 2b       	or	r24, r25
   1c108:	71 f0       	breq	.+28     	; 0x1c126 <lif_tests+0x2da>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c10a:	ce 01       	movw	r24, r28
   1c10c:	88 0f       	add	r24, r24
   1c10e:	99 1f       	adc	r25, r25
   1c110:	e8 01       	movw	r28, r16
   1c112:	c8 0f       	add	r28, r24
   1c114:	d9 1f       	adc	r29, r25
   1c116:	4c 81       	ldd	r20, Y+4	; 0x04
   1c118:	5d 81       	ldd	r21, Y+5	; 0x05
   1c11a:	6a 81       	ldd	r22, Y+2	; 0x02
   1c11c:	7b 81       	ldd	r23, Y+3	; 0x03
   1c11e:	88 81       	ld	r24, Y
   1c120:	99 81       	ldd	r25, Y+1	; 0x01
   1c122:	8e dd       	rcall	.-1252   	; 0x1bc40 <lif_rename_file>
   1c124:	2b c0       	rjmp	.+86     	; 0x1c17c <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1c126:	6f ea       	ldi	r22, 0xAF	; 175
   1c128:	76 e1       	ldi	r23, 0x16	; 22
   1c12a:	f8 01       	movw	r30, r16
   1c12c:	80 81       	ld	r24, Z
   1c12e:	91 81       	ldd	r25, Z+1	; 0x01
   1c130:	0e 94 bd 32 	call	0x657a	; 0x657a <MATCHI_LEN>
   1c134:	89 2b       	or	r24, r25
   1c136:	09 f4       	brne	.+2      	; 0x1c13a <lif_tests+0x2ee>
   1c138:	91 ce       	rjmp	.-734    	; 0x1be5c <lif_tests+0x10>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c13a:	6d e6       	ldi	r22, 0x6D	; 109
   1c13c:	76 e1       	ldi	r23, 0x16	; 22
   1c13e:	c7 01       	movw	r24, r14
   1c140:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c144:	89 2b       	or	r24, r25
   1c146:	59 f0       	breq	.+22     	; 0x1c15e <lif_tests+0x312>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1c148:	8c e0       	ldi	r24, 0x0C	; 12
   1c14a:	95 e4       	ldi	r25, 0x45	; 69
   1c14c:	a0 e0       	ldi	r26, 0x00	; 0
   1c14e:	ed b7       	in	r30, 0x3d	; 61
   1c150:	fe b7       	in	r31, 0x3e	; 62
   1c152:	81 83       	std	Z+1, r24	; 0x01
   1c154:	92 83       	std	Z+2, r25	; 0x02
   1c156:	a3 83       	std	Z+3, r26	; 0x03
   1c158:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1c15c:	0f c0       	rjmp	.+30     	; 0x1c17c <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c15e:	6c e6       	ldi	r22, 0x6C	; 108
   1c160:	76 e1       	ldi	r23, 0x16	; 22
   1c162:	c7 01       	movw	r24, r14
   1c164:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c168:	89 2b       	or	r24, r25
   1c16a:	71 f7       	brne	.-36     	; 0x1c148 <lif_tests+0x2fc>
   1c16c:	62 e7       	ldi	r22, 0x72	; 114
   1c16e:	76 e1       	ldi	r23, 0x16	; 22
   1c170:	c7 01       	movw	r24, r14
   1c172:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c176:	89 2b       	or	r24, r25
   1c178:	39 f7       	brne	.-50     	; 0x1c148 <lif_tests+0x2fc>
   1c17a:	70 ce       	rjmp	.-800    	; 0x1be5c <lif_tests+0x10>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1c17c:	81 e0       	ldi	r24, 0x01	; 1
   1c17e:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1c180:	cd b7       	in	r28, 0x3d	; 61
   1c182:	de b7       	in	r29, 0x3e	; 62
   1c184:	25 96       	adiw	r28, 0x05	; 5
   1c186:	ec e0       	ldi	r30, 0x0C	; 12
   1c188:	73 c6       	rjmp	.+3302   	; 0x1ce70 <__epilogue_restores__+0xc>

0001c18a <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1c18a:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <lcd_display_time>
   1c18e:	90 91 eb 19 	lds	r25, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c192:	01 96       	adiw	r24, 0x01	; 1
   1c194:	90 93 eb 19 	sts	0x19EB, r25	; 0x8019eb <lcd_display_time+0x1>
   1c198:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <lcd_display_time>
   1c19c:	08 95       	ret

0001c19e <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1c19e:	00 d0       	rcall	.+0      	; 0x1c1a0 <copyright+0x2>
   1c1a0:	00 d0       	rcall	.+0      	; 0x1c1a2 <copyright+0x4>
   1c1a2:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1c1a4:	86 e0       	ldi	r24, 0x06	; 6
   1c1a6:	9c e4       	ldi	r25, 0x4C	; 76
   1c1a8:	a0 e0       	ldi	r26, 0x00	; 0
   1c1aa:	ed b7       	in	r30, 0x3d	; 61
   1c1ac:	fe b7       	in	r31, 0x3e	; 62
   1c1ae:	81 83       	std	Z+1, r24	; 0x01
   1c1b0:	92 83       	std	Z+2, r25	; 0x02
   1c1b2:	a3 83       	std	Z+3, r26	; 0x03
   1c1b4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c1b8:	87 ee       	ldi	r24, 0xE7	; 231
   1c1ba:	9b e4       	ldi	r25, 0x4B	; 75
   1c1bc:	a0 e0       	ldi	r26, 0x00	; 0
   1c1be:	ed b7       	in	r30, 0x3d	; 61
   1c1c0:	fe b7       	in	r31, 0x3e	; 62
   1c1c2:	81 83       	std	Z+1, r24	; 0x01
   1c1c4:	92 83       	std	Z+2, r25	; 0x02
   1c1c6:	a3 83       	std	Z+3, r26	; 0x03
   1c1c8:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c1cc:	8a ec       	ldi	r24, 0xCA	; 202
   1c1ce:	9b e4       	ldi	r25, 0x4B	; 75
   1c1d0:	a0 e0       	ldi	r26, 0x00	; 0
   1c1d2:	ed b7       	in	r30, 0x3d	; 61
   1c1d4:	fe b7       	in	r31, 0x3e	; 62
   1c1d6:	81 83       	std	Z+1, r24	; 0x01
   1c1d8:	92 83       	std	Z+2, r25	; 0x02
   1c1da:	a3 83       	std	Z+3, r26	; 0x03
   1c1dc:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf(" GNU version 3\n");
   1c1e0:	8a eb       	ldi	r24, 0xBA	; 186
   1c1e2:	9b e4       	ldi	r25, 0x4B	; 75
   1c1e4:	a0 e0       	ldi	r26, 0x00	; 0
   1c1e6:	ed b7       	in	r30, 0x3d	; 61
   1c1e8:	fe b7       	in	r31, 0x3e	; 62
   1c1ea:	81 83       	std	Z+1, r24	; 0x01
   1c1ec:	92 83       	std	Z+2, r25	; 0x02
   1c1ee:	a3 83       	std	Z+3, r26	; 0x03
   1c1f0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c1f4:	83 e9       	ldi	r24, 0x93	; 147
   1c1f6:	9b e4       	ldi	r25, 0x4B	; 75
   1c1f8:	a0 e0       	ldi	r26, 0x00	; 0
   1c1fa:	ed b7       	in	r30, 0x3d	; 61
   1c1fc:	fe b7       	in	r31, 0x3e	; 62
   1c1fe:	81 83       	std	Z+1, r24	; 0x01
   1c200:	92 83       	std	Z+2, r25	; 0x02
   1c202:	a3 83       	std	Z+3, r26	; 0x03
   1c204:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c208:	87 eb       	ldi	r24, 0xB7	; 183
   1c20a:	96 e1       	ldi	r25, 0x16	; 22
   1c20c:	ed b7       	in	r30, 0x3d	; 61
   1c20e:	fe b7       	in	r31, 0x3e	; 62
   1c210:	95 83       	std	Z+5, r25	; 0x05
   1c212:	84 83       	std	Z+4, r24	; 0x04
   1c214:	89 e7       	ldi	r24, 0x79	; 121
   1c216:	9b e4       	ldi	r25, 0x4B	; 75
   1c218:	a0 e0       	ldi	r26, 0x00	; 0
   1c21a:	81 83       	std	Z+1, r24	; 0x01
   1c21c:	92 83       	std	Z+2, r25	; 0x02
   1c21e:	a3 83       	std	Z+3, r26	; 0x03
   1c220:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c224:	8b ed       	ldi	r24, 0xDB	; 219
   1c226:	96 e1       	ldi	r25, 0x16	; 22
   1c228:	ed b7       	in	r30, 0x3d	; 61
   1c22a:	fe b7       	in	r31, 0x3e	; 62
   1c22c:	95 83       	std	Z+5, r25	; 0x05
   1c22e:	84 83       	std	Z+4, r24	; 0x04
   1c230:	8f e5       	ldi	r24, 0x5F	; 95
   1c232:	9b e4       	ldi	r25, 0x4B	; 75
   1c234:	a0 e0       	ldi	r26, 0x00	; 0
   1c236:	81 83       	std	Z+1, r24	; 0x01
   1c238:	92 83       	std	Z+2, r25	; 0x02
   1c23a:	a3 83       	std	Z+3, r26	; 0x03
   1c23c:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("\n");
   1c240:	8d e5       	ldi	r24, 0x5D	; 93
   1c242:	9b e4       	ldi	r25, 0x4B	; 75
   1c244:	a0 e0       	ldi	r26, 0x00	; 0
   1c246:	ed b7       	in	r30, 0x3d	; 61
   1c248:	fe b7       	in	r31, 0x3e	; 62
   1c24a:	81 83       	std	Z+1, r24	; 0x01
   1c24c:	92 83       	std	Z+2, r25	; 0x02
   1c24e:	a3 83       	std	Z+3, r26	; 0x03
   1c250:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
}
   1c254:	0f 90       	pop	r0
   1c256:	0f 90       	pop	r0
   1c258:	0f 90       	pop	r0
   1c25a:	0f 90       	pop	r0
   1c25c:	0f 90       	pop	r0
   1c25e:	08 95       	ret

0001c260 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1c260:	a1 e1       	ldi	r26, 0x11	; 17
   1c262:	b0 e0       	ldi	r27, 0x00	; 0
   1c264:	e5 e3       	ldi	r30, 0x35	; 53
   1c266:	f1 ee       	ldi	r31, 0xE1	; 225
   1c268:	ed c5       	rjmp	.+3034   	; 0x1ce44 <__prologue_saves__+0x18>
   1c26a:	ec 01       	movw	r28, r24
   1c26c:	7b 01       	movw	r14, r22
   1c26e:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1c270:	60 e0       	ldi	r22, 0x00	; 0
   1c272:	70 e0       	ldi	r23, 0x00	; 0
   1c274:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <normalize>
    memset(buf,0,max);
   1c278:	a8 01       	movw	r20, r16
   1c27a:	60 e0       	ldi	r22, 0x00	; 0
   1c27c:	70 e0       	ldi	r23, 0x00	; 0
   1c27e:	c7 01       	movw	r24, r14
   1c280:	0e 94 0e eb 	call	0x1d61c	; 0x1d61c <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1c284:	88 85       	ldd	r24, Y+8	; 0x08
   1c286:	99 85       	ldd	r25, Y+9	; 0x09
   1c288:	0e 94 b6 36 	call	0x6d6c	; 0x6d6c <tm_mon_to_ascii>
   1c28c:	28 81       	ld	r18, Y
   1c28e:	39 81       	ldd	r19, Y+1	; 0x01
   1c290:	ed b7       	in	r30, 0x3d	; 61
   1c292:	fe b7       	in	r31, 0x3e	; 62
   1c294:	31 8b       	std	Z+17, r19	; 0x11
   1c296:	20 8b       	std	Z+16, r18	; 0x10
   1c298:	2a 81       	ldd	r18, Y+2	; 0x02
   1c29a:	3b 81       	ldd	r19, Y+3	; 0x03
   1c29c:	37 87       	std	Z+15, r19	; 0x0f
   1c29e:	26 87       	std	Z+14, r18	; 0x0e
   1c2a0:	2c 81       	ldd	r18, Y+4	; 0x04
   1c2a2:	3d 81       	ldd	r19, Y+5	; 0x05
   1c2a4:	35 87       	std	Z+13, r19	; 0x0d
   1c2a6:	24 87       	std	Z+12, r18	; 0x0c
   1c2a8:	2e 81       	ldd	r18, Y+6	; 0x06
   1c2aa:	3f 81       	ldd	r19, Y+7	; 0x07
   1c2ac:	33 87       	std	Z+11, r19	; 0x0b
   1c2ae:	22 87       	std	Z+10, r18	; 0x0a
   1c2b0:	91 87       	std	Z+9, r25	; 0x09
   1c2b2:	80 87       	std	Z+8, r24	; 0x08
   1c2b4:	87 e4       	ldi	r24, 0x47	; 71
   1c2b6:	9b e4       	ldi	r25, 0x4B	; 75
   1c2b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ba:	85 83       	std	Z+5, r24	; 0x05
   1c2bc:	96 83       	std	Z+6, r25	; 0x06
   1c2be:	a7 83       	std	Z+7, r26	; 0x07
   1c2c0:	01 50       	subi	r16, 0x01	; 1
   1c2c2:	11 09       	sbc	r17, r1
   1c2c4:	14 83       	std	Z+4, r17	; 0x04
   1c2c6:	03 83       	std	Z+3, r16	; 0x03
   1c2c8:	f2 82       	std	Z+2, r15	; 0x02
   1c2ca:	e1 82       	std	Z+1, r14	; 0x01
   1c2cc:	0e 94 0a 47 	call	0x8e14	; 0x8e14 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1c2d0:	c7 01       	movw	r24, r14
   1c2d2:	cd b7       	in	r28, 0x3d	; 61
   1c2d4:	de b7       	in	r29, 0x3e	; 62
   1c2d6:	61 96       	adiw	r28, 0x11	; 17
   1c2d8:	e6 e0       	ldi	r30, 0x06	; 6
   1c2da:	d0 c5       	rjmp	.+2976   	; 0x1ce7c <__epilogue_restores__+0x18>

0001c2dc <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1c2dc:	cf 93       	push	r28
   1c2de:	00 d0       	rcall	.+0      	; 0x1c2e0 <lcd_backlight+0x4>
   1c2e0:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1c2e2:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1c2e6:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1c2ea:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1c2ee:	25 e0       	ldi	r18, 0x05	; 5
   1c2f0:	40 ef       	ldi	r20, 0xF0	; 240
   1c2f2:	52 e0       	ldi	r21, 0x02	; 2
   1c2f4:	60 e0       	ldi	r22, 0x00	; 0
   1c2f6:	82 e7       	ldi	r24, 0x72	; 114
   1c2f8:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <i2c_fn>
   1c2fc:	c8 2f       	mov	r28, r24
   1c2fe:	81 11       	cpse	r24, r1
   1c300:	0d c0       	rjmp	.+26     	; 0x1c31c <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1c302:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c306:	8d e2       	ldi	r24, 0x2D	; 45
   1c308:	9b e4       	ldi	r25, 0x4B	; 75
   1c30a:	a0 e0       	ldi	r26, 0x00	; 0
   1c30c:	ed b7       	in	r30, 0x3d	; 61
   1c30e:	fe b7       	in	r31, 0x3e	; 62
   1c310:	81 83       	std	Z+1, r24	; 0x01
   1c312:	92 83       	std	Z+2, r25	; 0x02
   1c314:	a3 83       	std	Z+3, r26	; 0x03
   1c316:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1c31a:	01 c0       	rjmp	.+2      	; 0x1c31e <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1c31c:	c1 e0       	ldi	r28, 0x01	; 1
}
   1c31e:	8c 2f       	mov	r24, r28
   1c320:	0f 90       	pop	r0
   1c322:	0f 90       	pop	r0
   1c324:	0f 90       	pop	r0
   1c326:	cf 91       	pop	r28
   1c328:	08 95       	ret

0001c32a <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1c32a:	cf 93       	push	r28
   1c32c:	ad b7       	in	r26, 0x3d	; 61
   1c32e:	be b7       	in	r27, 0x3e	; 62
   1c330:	17 97       	sbiw	r26, 0x07	; 7
   1c332:	0f b6       	in	r0, 0x3f	; 63
   1c334:	f8 94       	cli
   1c336:	be bf       	out	0x3e, r27	; 62
   1c338:	0f be       	out	0x3f, r0	; 63
   1c33a:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1c33c:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1c33e:	8f e0       	ldi	r24, 0x0F	; 15
   1c340:	9b e4       	ldi	r25, 0x4B	; 75
   1c342:	a0 e0       	ldi	r26, 0x00	; 0
   1c344:	ed b7       	in	r30, 0x3d	; 61
   1c346:	fe b7       	in	r31, 0x3e	; 62
   1c348:	81 83       	std	Z+1, r24	; 0x01
   1c34a:	92 83       	std	Z+2, r25	; 0x02
   1c34c:	a3 83       	std	Z+3, r26	; 0x03
   1c34e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1c352:	61 e0       	ldi	r22, 0x01	; 1
   1c354:	70 e0       	ldi	r23, 0x00	; 0
   1c356:	85 ec       	ldi	r24, 0xC5	; 197
   1c358:	90 ee       	ldi	r25, 0xE0	; 224
   1c35a:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <set_timers>
   1c35e:	01 96       	adiw	r24, 0x01	; 1
   1c360:	51 f4       	brne	.+20     	; 0x1c376 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1c362:	89 ef       	ldi	r24, 0xF9	; 249
   1c364:	9a e4       	ldi	r25, 0x4A	; 74
   1c366:	a0 e0       	ldi	r26, 0x00	; 0
   1c368:	ed b7       	in	r30, 0x3d	; 61
   1c36a:	fe b7       	in	r31, 0x3e	; 62
   1c36c:	81 83       	std	Z+1, r24	; 0x01
   1c36e:	92 83       	std	Z+2, r25	; 0x02
   1c370:	a3 83       	std	Z+3, r26	; 0x03
   1c372:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

	i2c_init(100000);
   1c376:	60 ea       	ldi	r22, 0xA0	; 160
   1c378:	76 e8       	ldi	r23, 0x86	; 134
   1c37a:	81 e0       	ldi	r24, 0x01	; 1
   1c37c:	90 e0       	ldi	r25, 0x00	; 0
   1c37e:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <i2c_init>

	i2c_task_init();
   1c382:	0e 94 11 2c 	call	0x5822	; 0x5822 <i2c_task_init>

	cli();
   1c386:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1c388:	8f ef       	ldi	r24, 0xFF	; 255
   1c38a:	96 e1       	ldi	r25, 0x16	; 22
   1c38c:	ed b7       	in	r30, 0x3d	; 61
   1c38e:	fe b7       	in	r31, 0x3e	; 62
   1c390:	97 83       	std	Z+7, r25	; 0x07
   1c392:	86 83       	std	Z+6, r24	; 0x06
   1c394:	83 ef       	ldi	r24, 0xF3	; 243
   1c396:	9a e4       	ldi	r25, 0x4A	; 74
   1c398:	a0 e0       	ldi	r26, 0x00	; 0
   1c39a:	83 83       	std	Z+3, r24	; 0x03
   1c39c:	94 83       	std	Z+4, r25	; 0x04
   1c39e:	a5 83       	std	Z+5, r26	; 0x05
   1c3a0:	8c e0       	ldi	r24, 0x0C	; 12
   1c3a2:	93 e0       	ldi	r25, 0x03	; 3
   1c3a4:	92 83       	std	Z+2, r25	; 0x02
   1c3a6:	81 83       	std	Z+1, r24	; 0x01
   1c3a8:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c3ac:	8b e0       	ldi	r24, 0x0B	; 11
   1c3ae:	97 e1       	ldi	r25, 0x17	; 23
   1c3b0:	ed b7       	in	r30, 0x3d	; 61
   1c3b2:	fe b7       	in	r31, 0x3e	; 62
   1c3b4:	97 83       	std	Z+7, r25	; 0x07
   1c3b6:	86 83       	std	Z+6, r24	; 0x06
   1c3b8:	8d ee       	ldi	r24, 0xED	; 237
   1c3ba:	9a e4       	ldi	r25, 0x4A	; 74
   1c3bc:	a0 e0       	ldi	r26, 0x00	; 0
   1c3be:	83 83       	std	Z+3, r24	; 0x03
   1c3c0:	94 83       	std	Z+4, r25	; 0x04
   1c3c2:	a5 83       	std	Z+5, r26	; 0x05
   1c3c4:	85 ef       	ldi	r24, 0xF5	; 245
   1c3c6:	92 e0       	ldi	r25, 0x02	; 2
   1c3c8:	92 83       	std	Z+2, r25	; 0x02
   1c3ca:	81 83       	std	Z+1, r24	; 0x01
   1c3cc:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1c3d0:	22 e0       	ldi	r18, 0x02	; 2
   1c3d2:	41 e2       	ldi	r20, 0x21	; 33
   1c3d4:	53 e0       	ldi	r21, 0x03	; 3
   1c3d6:	60 e0       	ldi	r22, 0x00	; 0
   1c3d8:	82 e7       	ldi	r24, 0x72	; 114
   1c3da:	0e 94 26 2c 	call	0x584c	; 0x584c <i2c_task_op_add>
   1c3de:	90 93 57 17 	sts	0x1757, r25	; 0x801757 <i2c_task_op+0x1>
   1c3e2:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1c3e6:	20 e1       	ldi	r18, 0x10	; 16
   1c3e8:	4c e0       	ldi	r20, 0x0C	; 12
   1c3ea:	53 e0       	ldi	r21, 0x03	; 3
   1c3ec:	60 e0       	ldi	r22, 0x00	; 0
   1c3ee:	82 e7       	ldi	r24, 0x72	; 114
   1c3f0:	0e 94 26 2c 	call	0x584c	; 0x584c <i2c_task_op_add>
   1c3f4:	90 93 59 17 	sts	0x1759, r25	; 0x801759 <i2c_task_op+0x3>
   1c3f8:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1c3fc:	22 e0       	ldi	r18, 0x02	; 2
   1c3fe:	4a e0       	ldi	r20, 0x0A	; 10
   1c400:	53 e0       	ldi	r21, 0x03	; 3
   1c402:	60 e0       	ldi	r22, 0x00	; 0
   1c404:	82 e7       	ldi	r24, 0x72	; 114
   1c406:	0e 94 26 2c 	call	0x584c	; 0x584c <i2c_task_op_add>
   1c40a:	90 93 5b 17 	sts	0x175B, r25	; 0x80175b <i2c_task_op+0x5>
   1c40e:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1c412:	20 e1       	ldi	r18, 0x10	; 16
   1c414:	45 ef       	ldi	r20, 0xF5	; 245
   1c416:	52 e0       	ldi	r21, 0x02	; 2
   1c418:	60 e0       	ldi	r22, 0x00	; 0
   1c41a:	82 e7       	ldi	r24, 0x72	; 114
   1c41c:	0e 94 26 2c 	call	0x584c	; 0x584c <i2c_task_op_add>
   1c420:	90 93 5d 17 	sts	0x175D, r25	; 0x80175d <i2c_task_op+0x7>
   1c424:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <i2c_task_op+0x6>

	SREG = sreg;
   1c428:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c42a:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1c42e:	68 ee       	ldi	r22, 0xE8	; 232
   1c430:	73 e0       	ldi	r23, 0x03	; 3
   1c432:	80 e0       	ldi	r24, 0x00	; 0
   1c434:	90 e0       	ldi	r25, 0x00	; 0
   1c436:	0e 94 8c 28 	call	0x5118	; 0x5118 <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1c43a:	0e 94 c7 2c 	call	0x598e	; 0x598e <i2c_task_done>
   1c43e:	81 11       	cpse	r24, r1
   1c440:	0c c0       	rjmp	.+24     	; 0x1c45a <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1c442:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c446:	83 ed       	ldi	r24, 0xD3	; 211
   1c448:	9a e4       	ldi	r25, 0x4A	; 74
   1c44a:	a0 e0       	ldi	r26, 0x00	; 0
   1c44c:	ed b7       	in	r30, 0x3d	; 61
   1c44e:	fe b7       	in	r31, 0x3e	; 62
   1c450:	81 83       	std	Z+1, r24	; 0x01
   1c452:	92 83       	std	Z+2, r25	; 0x02
   1c454:	a3 83       	std	Z+3, r26	; 0x03
   1c456:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	}

    sep();
   1c45a:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>
}
   1c45e:	ad b7       	in	r26, 0x3d	; 61
   1c460:	be b7       	in	r27, 0x3e	; 62
   1c462:	17 96       	adiw	r26, 0x07	; 7
   1c464:	0f b6       	in	r0, 0x3f	; 63
   1c466:	f8 94       	cli
   1c468:	be bf       	out	0x3e, r27	; 62
   1c46a:	0f be       	out	0x3f, r0	; 63
   1c46c:	ad bf       	out	0x3d, r26	; 61
   1c46e:	cf 91       	pop	r28
   1c470:	08 95       	ret

0001c472 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c472:	af e2       	ldi	r26, 0x2F	; 47
   1c474:	b0 e0       	ldi	r27, 0x00	; 0
   1c476:	ee e3       	ldi	r30, 0x3E	; 62
   1c478:	f2 ee       	ldi	r31, 0xE2	; 226
   1c47a:	e7 c4       	rjmp	.+2510   	; 0x1ce4a <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c47c:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c47e:	f8 94       	cli
	if(!mmc_ins_status())
   1c480:	0e 94 20 6f 	call	0xde40	; 0xde40 <mmc_ins_status>
   1c484:	89 2b       	or	r24, r25
   1c486:	49 f4       	brne	.+18     	; 0x1c49a <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c488:	88 e1       	ldi	r24, 0x18	; 24
   1c48a:	97 e1       	ldi	r25, 0x17	; 23
   1c48c:	ed b7       	in	r30, 0x3d	; 61
   1c48e:	fe b7       	in	r31, 0x3e	; 62
   1c490:	97 83       	std	Z+7, r25	; 0x07
   1c492:	86 83       	std	Z+6, r24	; 0x06
   1c494:	8d ec       	ldi	r24, 0xCD	; 205
   1c496:	9a e4       	ldi	r25, 0x4A	; 74
   1c498:	17 c0       	rjmp	.+46     	; 0x1c4c8 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c49a:	be 01       	movw	r22, r28
   1c49c:	68 5d       	subi	r22, 0xD8	; 216
   1c49e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4a0:	80 e0       	ldi	r24, 0x00	; 0
   1c4a2:	90 e0       	ldi	r25, 0x00	; 0
   1c4a4:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c4a8:	ce 01       	movw	r24, r28
   1c4aa:	88 96       	adiw	r24, 0x28	; 40
   1c4ac:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <gmtime>
   1c4b0:	4f e1       	ldi	r20, 0x1F	; 31
   1c4b2:	50 e0       	ldi	r21, 0x00	; 0
   1c4b4:	be 01       	movw	r22, r28
   1c4b6:	68 5f       	subi	r22, 0xF8	; 248
   1c4b8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4ba:	d2 de       	rcall	.-604    	; 0x1c260 <lcd_time>
   1c4bc:	ed b7       	in	r30, 0x3d	; 61
   1c4be:	fe b7       	in	r31, 0x3e	; 62
   1c4c0:	97 83       	std	Z+7, r25	; 0x07
   1c4c2:	86 83       	std	Z+6, r24	; 0x06
   1c4c4:	87 ec       	ldi	r24, 0xC7	; 199
   1c4c6:	9a e4       	ldi	r25, 0x4A	; 74
   1c4c8:	a0 e0       	ldi	r26, 0x00	; 0
   1c4ca:	83 83       	std	Z+3, r24	; 0x03
   1c4cc:	94 83       	std	Z+4, r25	; 0x04
   1c4ce:	a5 83       	std	Z+5, r26	; 0x05
   1c4d0:	85 ef       	ldi	r24, 0xF5	; 245
   1c4d2:	92 e0       	ldi	r25, 0x02	; 2
   1c4d4:	92 83       	std	Z+2, r25	; 0x02
   1c4d6:	81 83       	std	Z+1, r24	; 0x01
   1c4d8:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c4dc:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c4de:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <i2c_task_run>
}
   1c4e2:	af 96       	adiw	r28, 0x2f	; 47
   1c4e4:	e3 e0       	ldi	r30, 0x03	; 3
   1c4e6:	cd c4       	rjmp	.+2458   	; 0x1ce82 <__epilogue_restores__+0x1e>

0001c4e8 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c4e8:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c4ea:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c4ec:	20 91 ea 19 	lds	r18, 0x19EA	; 0x8019ea <lcd_display_time>
   1c4f0:	30 91 eb 19 	lds	r19, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c4f4:	25 36       	cpi	r18, 0x65	; 101
   1c4f6:	31 05       	cpc	r19, r1
   1c4f8:	3c f0       	brlt	.+14     	; 0x1c508 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c4fa:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <lcd_display_time+0x1>
   1c4fe:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <lcd_display_time>
		SREG = sreg;
   1c502:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1c504:	b6 cf       	rjmp	.-148    	; 0x1c472 <i2c_lcd_task>
		return;
   1c506:	08 95       	ret
	}
	SREG = sreg;
   1c508:	8f bf       	out	0x3f, r24	; 63
   1c50a:	08 95       	ret

0001c50c <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c50c:	00 d0       	rcall	.+0      	; 0x1c50e <help+0x2>
   1c50e:	1f 92       	push	r1

    copyright();
   1c510:	46 de       	rcall	.-884    	; 0x1c19e <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c512:	80 e0       	ldi	r24, 0x00	; 0
   1c514:	90 e0       	ldi	r25, 0x00	; 0
   1c516:	0e 94 47 73 	call	0xe68e	; 0xe68e <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c51a:	80 e0       	ldi	r24, 0x00	; 0
   1c51c:	90 e0       	ldi	r25, 0x00	; 0
   1c51e:	0e 94 a0 7e 	call	0xfd40	; 0xfd40 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c522:	80 e0       	ldi	r24, 0x00	; 0
   1c524:	90 e0       	ldi	r25, 0x00	; 0
   1c526:	0e 94 f0 c0 	call	0x181e0	; 0x181e0 <lif_help>

#ifdef TELEDISK
    td0_help(0);
#endif

    gpib_help(0);
   1c52a:	80 e0       	ldi	r24, 0x00	; 0
   1c52c:	90 e0       	ldi	r25, 0x00	; 0
   1c52e:	0e 94 01 92 	call	0x12402	; 0x12402 <gpib_help>

    printf(
   1c532:	86 e0       	ldi	r24, 0x06	; 6
   1c534:	9a e4       	ldi	r25, 0x4A	; 74
   1c536:	a0 e0       	ldi	r26, 0x00	; 0
   1c538:	ed b7       	in	r30, 0x3d	; 61
   1c53a:	fe b7       	in	r31, 0x3e	; 62
   1c53c:	81 83       	std	Z+1, r24	; 0x01
   1c53e:	92 83       	std	Z+2, r25	; 0x02
   1c540:	a3 83       	std	Z+3, r26	; 0x03
   1c542:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1c546:	0f 90       	pop	r0
   1c548:	0f 90       	pop	r0
   1c54a:	0f 90       	pop	r0
   1c54c:	08 95       	ret

0001c54e <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c54e:	6f 92       	push	r6
   1c550:	7f 92       	push	r7
   1c552:	8f 92       	push	r8
   1c554:	cf 92       	push	r12
   1c556:	df 92       	push	r13
   1c558:	ef 92       	push	r14
   1c55a:	ff 92       	push	r15
   1c55c:	0f 93       	push	r16
   1c55e:	1f 93       	push	r17
   1c560:	cf 93       	push	r28
   1c562:	df 93       	push	r29
   1c564:	cd b7       	in	r28, 0x3d	; 61
   1c566:	de b7       	in	r29, 0x3e	; 62
   1c568:	cb 56       	subi	r28, 0x6B	; 107
   1c56a:	d1 40       	sbci	r29, 0x01	; 1
   1c56c:	0f b6       	in	r0, 0x3f	; 63
   1c56e:	f8 94       	cli
   1c570:	de bf       	out	0x3e, r29	; 62
   1c572:	0f be       	out	0x3f, r0	; 63
   1c574:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c576:	83 e0       	ldi	r24, 0x03	; 3
   1c578:	9a e4       	ldi	r25, 0x4A	; 74
   1c57a:	a0 e0       	ldi	r26, 0x00	; 0
   1c57c:	ed b7       	in	r30, 0x3d	; 61
   1c57e:	fe b7       	in	r31, 0x3e	; 62
   1c580:	81 83       	std	Z+1, r24	; 0x01
   1c582:	92 83       	std	Z+2, r25	; 0x02
   1c584:	a3 83       	std	Z+3, r26	; 0x03
   1c586:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

	memset(line,0,sizeof(line)-1);
   1c58a:	8e 01       	movw	r16, r28
   1c58c:	0a 5f       	subi	r16, 0xFA	; 250
   1c58e:	1f 4f       	sbci	r17, 0xFF	; 255
   1c590:	8f ef       	ldi	r24, 0xFF	; 255
   1c592:	f8 01       	movw	r30, r16
   1c594:	11 92       	st	Z+, r1
   1c596:	8a 95       	dec	r24
   1c598:	e9 f7       	brne	.-6      	; 0x1c594 <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1c59a:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
   1c59e:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
   1c5a2:	6e ef       	ldi	r22, 0xFE	; 254
   1c5a4:	70 e0       	ldi	r23, 0x00	; 0
   1c5a6:	c8 01       	movw	r24, r16
   1c5a8:	0e 94 8c 76 	call	0xed18	; 0xed18 <fgets>
    trim_tail(line);
   1c5ac:	c8 01       	movw	r24, r16
   1c5ae:	0e 94 51 32 	call	0x64a2	; 0x64a2 <trim_tail>
    argc = split_args(line,argv,50);
   1c5b2:	42 e3       	ldi	r20, 0x32	; 50
   1c5b4:	50 e0       	ldi	r21, 0x00	; 0
   1c5b6:	be 01       	movw	r22, r28
   1c5b8:	6a 5f       	subi	r22, 0xFA	; 250
   1c5ba:	7e 4f       	sbci	r23, 0xFE	; 254
   1c5bc:	c8 01       	movw	r24, r16
   1c5be:	0e 94 d7 32 	call	0x65ae	; 0x65ae <split_args>
   1c5c2:	6c 01       	movw	r12, r24

	if(debug_input)
   1c5c4:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1c5c8:	81 11       	cpse	r24, r1
   1c5ca:	0a c0       	rjmp	.+20     	; 0x1c5e0 <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c5cc:	ca 5f       	subi	r28, 0xFA	; 250
   1c5ce:	de 4f       	sbci	r29, 0xFE	; 254
   1c5d0:	e8 80       	ld	r14, Y
   1c5d2:	f9 80       	ldd	r15, Y+1	; 0x01
   1c5d4:	c6 50       	subi	r28, 0x06	; 6
   1c5d6:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c5d8:	e1 14       	cp	r14, r1
   1c5da:	f1 04       	cpc	r15, r1
   1c5dc:	51 f5       	brne	.+84     	; 0x1c632 <user_task.part.1+0xe4>
   1c5de:	b7 c0       	rjmp	.+366    	; 0x1c74e <user_task.part.1+0x200>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1c5e0:	ed b7       	in	r30, 0x3d	; 61
   1c5e2:	fe b7       	in	r31, 0x3e	; 62
   1c5e4:	d5 82       	std	Z+5, r13	; 0x05
   1c5e6:	c4 82       	std	Z+4, r12	; 0x04
   1c5e8:	8e ee       	ldi	r24, 0xEE	; 238
   1c5ea:	99 e4       	ldi	r25, 0x49	; 73
   1c5ec:	a0 e0       	ldi	r26, 0x00	; 0
   1c5ee:	81 83       	std	Z+1, r24	; 0x01
   1c5f0:	92 83       	std	Z+2, r25	; 0x02
   1c5f2:	a3 83       	std	Z+3, r26	; 0x03
   1c5f4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1c5f8:	ce 01       	movw	r24, r28
   1c5fa:	8a 5f       	subi	r24, 0xFA	; 250
   1c5fc:	9e 4f       	sbci	r25, 0xFE	; 254
   1c5fe:	7c 01       	movw	r14, r24
		for(i=0;i<argc;++i)
   1c600:	00 e0       	ldi	r16, 0x00	; 0
   1c602:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1c604:	85 ee       	ldi	r24, 0xE5	; 229
   1c606:	99 e4       	ldi	r25, 0x49	; 73
   1c608:	3c 01       	movw	r6, r24
   1c60a:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c60c:	0c 15       	cp	r16, r12
   1c60e:	1d 05       	cpc	r17, r13
   1c610:	ec f6       	brge	.-70     	; 0x1c5cc <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1c612:	f7 01       	movw	r30, r14
   1c614:	81 91       	ld	r24, Z+
   1c616:	91 91       	ld	r25, Z+
   1c618:	7f 01       	movw	r14, r30
   1c61a:	ed b7       	in	r30, 0x3d	; 61
   1c61c:	fe b7       	in	r31, 0x3e	; 62
   1c61e:	95 83       	std	Z+5, r25	; 0x05
   1c620:	84 83       	std	Z+4, r24	; 0x04
   1c622:	61 82       	std	Z+1, r6	; 0x01
   1c624:	72 82       	std	Z+2, r7	; 0x02
   1c626:	83 82       	std	Z+3, r8	; 0x03
   1c628:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c62c:	0f 5f       	subi	r16, 0xFF	; 255
   1c62e:	1f 4f       	sbci	r17, 0xFF	; 255
   1c630:	ed cf       	rjmp	.-38     	; 0x1c60c <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c632:	1c 14       	cp	r1, r12
   1c634:	1d 04       	cpc	r1, r13
   1c636:	0c f0       	brlt	.+2      	; 0x1c63a <user_task.part.1+0xec>
   1c638:	8a c0       	rjmp	.+276    	; 0x1c74e <user_task.part.1+0x200>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1c63a:	6d e2       	ldi	r22, 0x2D	; 45
   1c63c:	77 e1       	ldi	r23, 0x17	; 23
   1c63e:	c7 01       	movw	r24, r14
   1c640:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c644:	89 2b       	or	r24, r25
   1c646:	d9 f0       	breq	.+54     	; 0x1c67e <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1c648:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1c64c:	91 e0       	ldi	r25, 0x01	; 1
   1c64e:	81 11       	cpse	r24, r1
   1c650:	90 e0       	ldi	r25, 0x00	; 0
   1c652:	90 93 ec 19 	sts	0x19EC, r25	; 0x8019ec <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c656:	88 23       	and	r24, r24
   1c658:	19 f0       	breq	.+6      	; 0x1c660 <user_task.part.1+0x112>
   1c65a:	89 e2       	ldi	r24, 0x29	; 41
   1c65c:	97 e1       	ldi	r25, 0x17	; 23
   1c65e:	02 c0       	rjmp	.+4      	; 0x1c664 <user_task.part.1+0x116>
   1c660:	86 e2       	ldi	r24, 0x26	; 38
   1c662:	97 e1       	ldi	r25, 0x17	; 23
   1c664:	ed b7       	in	r30, 0x3d	; 61
   1c666:	fe b7       	in	r31, 0x3e	; 62
   1c668:	95 83       	std	Z+5, r25	; 0x05
   1c66a:	84 83       	std	Z+4, r24	; 0x04
   1c66c:	80 ed       	ldi	r24, 0xD0	; 208
   1c66e:	99 e4       	ldi	r25, 0x49	; 73
   1c670:	a0 e0       	ldi	r26, 0x00	; 0
   1c672:	81 83       	std	Z+1, r24	; 0x01
   1c674:	92 83       	std	Z+2, r25	; 0x02
   1c676:	a3 83       	std	Z+3, r26	; 0x03
   1c678:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1c67c:	68 c0       	rjmp	.+208    	; 0x1c74e <user_task.part.1+0x200>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c67e:	63 e3       	ldi	r22, 0x33	; 51
   1c680:	77 e1       	ldi	r23, 0x17	; 23
   1c682:	c7 01       	movw	r24, r14
   1c684:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c688:	89 2b       	or	r24, r25
   1c68a:	f9 f0       	breq	.+62     	; 0x1c6ca <user_task.part.1+0x17c>
    {
		uint32_t rgb;
        ptr = argv[ind];
   1c68c:	c8 5f       	subi	r28, 0xF8	; 248
   1c68e:	de 4f       	sbci	r29, 0xFE	; 254
   1c690:	e8 80       	ld	r14, Y
   1c692:	f9 80       	ldd	r15, Y+1	; 0x01
   1c694:	c8 50       	subi	r28, 0x08	; 8
   1c696:	d1 40       	sbci	r29, 0x01	; 1
        if(*ptr == '=')
   1c698:	f7 01       	movw	r30, r14
   1c69a:	80 81       	ld	r24, Z
   1c69c:	8d 33       	cpi	r24, 0x3D	; 61
   1c69e:	19 f4       	brne	.+6      	; 0x1c6a6 <user_task.part.1+0x158>
            ++ind;
   1c6a0:	82 e0       	ldi	r24, 0x02	; 2
   1c6a2:	90 e0       	ldi	r25, 0x00	; 0
   1c6a4:	02 c0       	rjmp	.+4      	; 0x1c6aa <user_task.part.1+0x15c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c6a6:	81 e0       	ldi	r24, 0x01	; 1
   1c6a8:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c6aa:	88 0f       	add	r24, r24
   1c6ac:	99 1f       	adc	r25, r25
   1c6ae:	e6 e0       	ldi	r30, 0x06	; 6
   1c6b0:	f1 e0       	ldi	r31, 0x01	; 1
   1c6b2:	ec 0f       	add	r30, r28
   1c6b4:	fd 1f       	adc	r31, r29
   1c6b6:	e8 0f       	add	r30, r24
   1c6b8:	f9 1f       	adc	r31, r25
   1c6ba:	80 81       	ld	r24, Z
   1c6bc:	91 81       	ldd	r25, Z+1	; 0x01
   1c6be:	0e 94 76 33 	call	0x66ec	; 0x66ec <get_value>
		result = lcd_backlight(rgb);
   1c6c2:	0c de       	rcall	.-1000   	; 0x1c2dc <lcd_backlight>
   1c6c4:	08 2f       	mov	r16, r24
   1c6c6:	10 e0       	ldi	r17, 0x00	; 0
   1c6c8:	44 c0       	rjmp	.+136    	; 0x1c752 <user_task.part.1+0x204>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c6ca:	6d e3       	ldi	r22, 0x3D	; 61
   1c6cc:	77 e1       	ldi	r23, 0x17	; 23
   1c6ce:	c7 01       	movw	r24, r14
   1c6d0:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <MATCH>
   1c6d4:	89 2b       	or	r24, r25
   1c6d6:	19 f0       	breq	.+6      	; 0x1c6de <user_task.part.1+0x190>
    {
        PrintFree();
   1c6d8:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <PrintFree>
   1c6dc:	38 c0       	rjmp	.+112    	; 0x1c74e <user_task.part.1+0x200>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c6de:	64 ed       	ldi	r22, 0xD4	; 212
   1c6e0:	7d e0       	ldi	r23, 0x0D	; 13
   1c6e2:	c7 01       	movw	r24, r14
   1c6e4:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c6e8:	89 2b       	or	r24, r25
   1c6ea:	51 f0       	breq	.+20     	; 0x1c700 <user_task.part.1+0x1b2>
    {
        cli();
   1c6ec:	f8 94       	cli
        uart_rx_flush(0);
   1c6ee:	80 e0       	ldi	r24, 0x00	; 0
   1c6f0:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <uart_rx_flush>
        cli();
   1c6f4:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c6f6:	82 e0       	ldi	r24, 0x02	; 2
   1c6f8:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c6fa:	e0 e0       	ldi	r30, 0x00	; 0
   1c6fc:	fc ef       	ldi	r31, 0xFC	; 252
   1c6fe:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c700:	61 e4       	ldi	r22, 0x41	; 65
   1c702:	77 e1       	ldi	r23, 0x17	; 23
   1c704:	c7 01       	movw	r24, r14
   1c706:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c70a:	89 2b       	or	r24, r25
   1c70c:	19 f0       	breq	.+6      	; 0x1c714 <user_task.part.1+0x1c6>
    {
        setdate();
   1c70e:	0e 94 ba 3b 	call	0x7774	; 0x7774 <setdate>
   1c712:	07 c0       	rjmp	.+14     	; 0x1c722 <user_task.part.1+0x1d4>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c714:	69 e4       	ldi	r22, 0x49	; 73
   1c716:	77 e1       	ldi	r23, 0x17	; 23
   1c718:	c7 01       	movw	r24, r14
   1c71a:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c71e:	89 2b       	or	r24, r25
   1c720:	19 f0       	breq	.+6      	; 0x1c728 <user_task.part.1+0x1da>
    {
        display_clock();
   1c722:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <display_clock>
   1c726:	13 c0       	rjmp	.+38     	; 0x1c74e <user_task.part.1+0x200>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c728:	6d e6       	ldi	r22, 0x6D	; 109
   1c72a:	76 e1       	ldi	r23, 0x16	; 22
   1c72c:	c7 01       	movw	r24, r14
   1c72e:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c732:	89 2b       	or	r24, r25
    {
        help();
   1c734:	11 f0       	breq	.+4      	; 0x1c73a <user_task.part.1+0x1ec>
   1c736:	ea de       	rcall	.-556    	; 0x1c50c <help>
   1c738:	0a c0       	rjmp	.+20     	; 0x1c74e <user_task.part.1+0x200>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c73a:	63 e7       	ldi	r22, 0x73	; 115
   1c73c:	76 e1       	ldi	r23, 0x16	; 22
   1c73e:	c7 01       	movw	r24, r14
   1c740:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c744:	89 2b       	or	r24, r25
   1c746:	b9 f7       	brne	.-18     	; 0x1c736 <user_task.part.1+0x1e8>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c748:	00 e0       	ldi	r16, 0x00	; 0
   1c74a:	10 e0       	ldi	r17, 0x00	; 0
   1c74c:	02 c0       	rjmp	.+4      	; 0x1c752 <user_task.part.1+0x204>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c74e:	01 e0       	ldi	r16, 0x01	; 1
   1c750:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if (MATCHI(ptr,"dir") )
   1c752:	68 ed       	ldi	r22, 0xD8	; 216
   1c754:	7b e0       	ldi	r23, 0x0B	; 11
   1c756:	c7 01       	movw	r24, r14
   1c758:	0e 94 7f 32 	call	0x64fe	; 0x64fe <MATCHI>
   1c75c:	89 2b       	or	r24, r25
   1c75e:	51 f1       	breq	.+84     	; 0x1c7b4 <user_task.part.1+0x266>
   1c760:	86 e0       	ldi	r24, 0x06	; 6
   1c762:	68 2e       	mov	r6, r24
   1c764:	77 24       	eor	r7, r7
   1c766:	73 94       	inc	r7
   1c768:	6c 0e       	add	r6, r28
   1c76a:	7d 1e       	adc	r7, r29
   1c76c:	f2 e0       	ldi	r31, 0x02	; 2
   1c76e:	6f 0e       	add	r6, r31
   1c770:	71 1c       	adc	r7, r1
   1c772:	ee 24       	eor	r14, r14
   1c774:	e3 94       	inc	r14
   1c776:	f1 2c       	mov	r15, r1
   1c778:	01 e0       	ldi	r16, 0x01	; 1
   1c77a:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c77c:	ec 14       	cp	r14, r12
   1c77e:	fd 04       	cpc	r15, r13
   1c780:	74 f4       	brge	.+28     	; 0x1c79e <user_task.part.1+0x250>
        {
            if(fatfs_ls(argv[i]) == 0)
   1c782:	f3 01       	movw	r30, r6
   1c784:	81 91       	ld	r24, Z+
   1c786:	91 91       	ld	r25, Z+
   1c788:	3f 01       	movw	r6, r30
   1c78a:	0e 94 5c 73 	call	0xe6b8	; 0xe6b8 <fatfs_ls>
   1c78e:	89 2b       	or	r24, r25
   1c790:	11 f4       	brne	.+4      	; 0x1c796 <user_task.part.1+0x248>
				result = -1;
   1c792:	0f ef       	ldi	r16, 0xFF	; 255
   1c794:	1f ef       	ldi	r17, 0xFF	; 255
    if (MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c796:	ff ef       	ldi	r31, 0xFF	; 255
   1c798:	ef 1a       	sub	r14, r31
   1c79a:	ff 0a       	sbc	r15, r31
   1c79c:	ef cf       	rjmp	.-34     	; 0x1c77c <user_task.part.1+0x22e>
        {
            if(fatfs_ls(argv[i]) == 0)
				result = -1;
            ++args;
        }
        if(!args)
   1c79e:	ea 94       	dec	r14
   1c7a0:	ef 28       	or	r14, r15
   1c7a2:	41 f4       	brne	.+16     	; 0x1c7b4 <user_task.part.1+0x266>
        {
            if(fatfs_ls("") == 0)
   1c7a4:	80 e2       	ldi	r24, 0x20	; 32
   1c7a6:	9c e0       	ldi	r25, 0x0C	; 12
   1c7a8:	0e 94 5c 73 	call	0xe6b8	; 0xe6b8 <fatfs_ls>
   1c7ac:	89 2b       	or	r24, r25
   1c7ae:	11 f4       	brne	.+4      	; 0x1c7b4 <user_task.part.1+0x266>
				result = -1;
   1c7b0:	0f ef       	ldi	r16, 0xFF	; 255
   1c7b2:	1f ef       	ldi	r17, 0xFF	; 255
        }
    }

	if( (ret = gpib_tests(argc,argv)) )
   1c7b4:	be 01       	movw	r22, r28
   1c7b6:	6a 5f       	subi	r22, 0xFA	; 250
   1c7b8:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7ba:	c6 01       	movw	r24, r12
   1c7bc:	0e 94 22 92 	call	0x12444	; 0x12444 <gpib_tests>
   1c7c0:	00 97       	sbiw	r24, 0x00	; 0
   1c7c2:	51 f0       	breq	.+20     	; 0x1c7d8 <user_task.part.1+0x28a>
    {
		if(ret < 0)
   1c7c4:	97 fd       	sbrc	r25, 7
   1c7c6:	03 c0       	rjmp	.+6      	; 0x1c7ce <user_task.part.1+0x280>
			result = -1;
		else
			result = 1;
   1c7c8:	01 e0       	ldi	r16, 0x01	; 1
   1c7ca:	10 e0       	ldi	r17, 0x00	; 0
   1c7cc:	02 c0       	rjmp	.+4      	; 0x1c7d2 <user_task.part.1+0x284>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1c7ce:	0f ef       	ldi	r16, 0xFF	; 255
   1c7d0:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1c7d2:	0e 94 36 8d 	call	0x11a6c	; 0x11a6c <gpib_init_devices>
   1c7d6:	0f c0       	rjmp	.+30     	; 0x1c7f6 <user_task.part.1+0x2a8>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1c7d8:	be 01       	movw	r22, r28
   1c7da:	6a 5f       	subi	r22, 0xFA	; 250
   1c7dc:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7de:	c6 01       	movw	r24, r12
   1c7e0:	0e 94 07 82 	call	0x1040e	; 0x1040e <posix_tests>
   1c7e4:	00 97       	sbiw	r24, 0x00	; 0
   1c7e6:	39 f0       	breq	.+14     	; 0x1c7f6 <user_task.part.1+0x2a8>
	{
		if(ret < 0)
   1c7e8:	97 fd       	sbrc	r25, 7
   1c7ea:	03 c0       	rjmp	.+6      	; 0x1c7f2 <user_task.part.1+0x2a4>
			result = -1;
		else
			result = 1;
   1c7ec:	01 e0       	ldi	r16, 0x01	; 1
   1c7ee:	10 e0       	ldi	r17, 0x00	; 0
   1c7f0:	02 c0       	rjmp	.+4      	; 0x1c7f6 <user_task.part.1+0x2a8>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c7f2:	0f ef       	ldi	r16, 0xFF	; 255
   1c7f4:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1c7f6:	be 01       	movw	r22, r28
   1c7f8:	6a 5f       	subi	r22, 0xFA	; 250
   1c7fa:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7fc:	c6 01       	movw	r24, r12
   1c7fe:	0e 94 68 74 	call	0xe8d0	; 0xe8d0 <fatfs_tests>
   1c802:	00 97       	sbiw	r24, 0x00	; 0
   1c804:	39 f0       	breq	.+14     	; 0x1c814 <user_task.part.1+0x2c6>
	{
		if(ret < 0)
   1c806:	97 fd       	sbrc	r25, 7
   1c808:	03 c0       	rjmp	.+6      	; 0x1c810 <user_task.part.1+0x2c2>
			result = -1;
		else
			result = 1;
   1c80a:	01 e0       	ldi	r16, 0x01	; 1
   1c80c:	10 e0       	ldi	r17, 0x00	; 0
   1c80e:	02 c0       	rjmp	.+4      	; 0x1c814 <user_task.part.1+0x2c6>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1c810:	0f ef       	ldi	r16, 0xFF	; 255
   1c812:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1c814:	be 01       	movw	r22, r28
   1c816:	6a 5f       	subi	r22, 0xFA	; 250
   1c818:	7e 4f       	sbci	r23, 0xFE	; 254
   1c81a:	c6 01       	movw	r24, r12
   1c81c:	17 db       	rcall	.-2514   	; 0x1be4c <lif_tests>
   1c81e:	00 97       	sbiw	r24, 0x00	; 0
   1c820:	19 f0       	breq	.+6      	; 0x1c828 <user_task.part.1+0x2da>
	{
		if(ret < 0)
   1c822:	97 ff       	sbrs	r25, 7
   1c824:	04 c0       	rjmp	.+8      	; 0x1c82e <user_task.part.1+0x2e0>
   1c826:	09 c0       	rjmp	.+18     	; 0x1c83a <user_task.part.1+0x2ec>
			result = -1;
		else
			result = 1;
	}
#endif
    if(result == 1)
   1c828:	01 30       	cpi	r16, 0x01	; 1
   1c82a:	11 05       	cpc	r17, r1
   1c82c:	19 f4       	brne	.+6      	; 0x1c834 <user_task.part.1+0x2e6>
        printf("OK\n");
   1c82e:	8c ec       	ldi	r24, 0xCC	; 204
   1c830:	99 e4       	ldi	r25, 0x49	; 73
   1c832:	05 c0       	rjmp	.+10     	; 0x1c83e <user_task.part.1+0x2f0>
	else if(result == -1)
   1c834:	0f 3f       	cpi	r16, 0xFF	; 255
   1c836:	1f 4f       	sbci	r17, 0xFF	; 255
   1c838:	59 f4       	brne	.+22     	; 0x1c850 <user_task.part.1+0x302>
        printf("Command FAILED\n");
   1c83a:	8c eb       	ldi	r24, 0xBC	; 188
   1c83c:	99 e4       	ldi	r25, 0x49	; 73
   1c83e:	a0 e0       	ldi	r26, 0x00	; 0
   1c840:	ed b7       	in	r30, 0x3d	; 61
   1c842:	fe b7       	in	r31, 0x3e	; 62
   1c844:	81 83       	std	Z+1, r24	; 0x01
   1c846:	92 83       	std	Z+2, r25	; 0x02
   1c848:	a3 83       	std	Z+3, r26	; 0x03
   1c84a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1c84e:	33 c0       	rjmp	.+102    	; 0x1c8b6 <user_task.part.1+0x368>
    else
	{
        printf("Invalid Command\n");
   1c850:	8b ea       	ldi	r24, 0xAB	; 171
   1c852:	99 e4       	ldi	r25, 0x49	; 73
   1c854:	a0 e0       	ldi	r26, 0x00	; 0
   1c856:	ed b7       	in	r30, 0x3d	; 61
   1c858:	fe b7       	in	r31, 0x3e	; 62
   1c85a:	81 83       	std	Z+1, r24	; 0x01
   1c85c:	92 83       	std	Z+2, r25	; 0x02
   1c85e:	a3 83       	std	Z+3, r26	; 0x03
   1c860:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printf("    Argument count = %d\n", argc);
   1c864:	ed b7       	in	r30, 0x3d	; 61
   1c866:	fe b7       	in	r31, 0x3e	; 62
   1c868:	d5 82       	std	Z+5, r13	; 0x05
   1c86a:	c4 82       	std	Z+4, r12	; 0x04
   1c86c:	82 e9       	ldi	r24, 0x92	; 146
   1c86e:	99 e4       	ldi	r25, 0x49	; 73
   1c870:	a0 e0       	ldi	r26, 0x00	; 0
   1c872:	81 83       	std	Z+1, r24	; 0x01
   1c874:	92 83       	std	Z+2, r25	; 0x02
   1c876:	a3 83       	std	Z+3, r26	; 0x03
   1c878:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
   1c87c:	8e 01       	movw	r16, r28
   1c87e:	0a 5f       	subi	r16, 0xFA	; 250
   1c880:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c882:	e1 2c       	mov	r14, r1
   1c884:	f1 2c       	mov	r15, r1
			printf("       [%s]\n", argv[i]);
   1c886:	85 e8       	ldi	r24, 0x85	; 133
   1c888:	99 e4       	ldi	r25, 0x49	; 73
   1c88a:	3c 01       	movw	r6, r24
   1c88c:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c88e:	ec 14       	cp	r14, r12
   1c890:	fd 04       	cpc	r15, r13
   1c892:	8c f4       	brge	.+34     	; 0x1c8b6 <user_task.part.1+0x368>
			printf("       [%s]\n", argv[i]);
   1c894:	f8 01       	movw	r30, r16
   1c896:	81 91       	ld	r24, Z+
   1c898:	91 91       	ld	r25, Z+
   1c89a:	8f 01       	movw	r16, r30
   1c89c:	ed b7       	in	r30, 0x3d	; 61
   1c89e:	fe b7       	in	r31, 0x3e	; 62
   1c8a0:	95 83       	std	Z+5, r25	; 0x05
   1c8a2:	84 83       	std	Z+4, r24	; 0x04
   1c8a4:	61 82       	std	Z+1, r6	; 0x01
   1c8a6:	72 82       	std	Z+2, r7	; 0x02
   1c8a8:	83 82       	std	Z+3, r8	; 0x03
   1c8aa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c8ae:	ff ef       	ldi	r31, 0xFF	; 255
   1c8b0:	ef 1a       	sub	r14, r31
   1c8b2:	ff 0a       	sbc	r15, r31
   1c8b4:	ec cf       	rjmp	.-40     	; 0x1c88e <user_task.part.1+0x340>
			printf("       [%s]\n", argv[i]);
	}
}
   1c8b6:	c5 59       	subi	r28, 0x95	; 149
   1c8b8:	de 4f       	sbci	r29, 0xFE	; 254
   1c8ba:	0f b6       	in	r0, 0x3f	; 63
   1c8bc:	f8 94       	cli
   1c8be:	de bf       	out	0x3e, r29	; 62
   1c8c0:	0f be       	out	0x3f, r0	; 63
   1c8c2:	cd bf       	out	0x3d, r28	; 61
   1c8c4:	df 91       	pop	r29
   1c8c6:	cf 91       	pop	r28
   1c8c8:	1f 91       	pop	r17
   1c8ca:	0f 91       	pop	r16
   1c8cc:	ff 90       	pop	r15
   1c8ce:	ef 90       	pop	r14
   1c8d0:	df 90       	pop	r13
   1c8d2:	cf 90       	pop	r12
   1c8d4:	8f 90       	pop	r8
   1c8d6:	7f 90       	pop	r7
   1c8d8:	6f 90       	pop	r6
   1c8da:	08 95       	ret

0001c8dc <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c8dc:	81 11       	cpse	r24, r1
        gpib_task();
   1c8de:	0e 94 a1 91 	call	0x12342	; 0x12342 <gpib_task>

    if(!kbhit(0))
   1c8e2:	80 e0       	ldi	r24, 0x00	; 0
   1c8e4:	0e 94 14 2a 	call	0x5428	; 0x5428 <uart_rx_count>
   1c8e8:	89 2b       	or	r24, r25
   1c8ea:	09 f0       	breq	.+2      	; 0x1c8ee <user_task+0x12>
   1c8ec:	30 ce       	rjmp	.-928    	; 0x1c54e <user_task.part.1>
   1c8ee:	08 95       	ret

0001c8f0 <update_drive_counts>:
	}
}

#ifdef LCD_SUPPORT
void update_drive_counts()
{
   1c8f0:	a9 e2       	ldi	r26, 0x29	; 41
   1c8f2:	b0 e0       	ldi	r27, 0x00	; 0
   1c8f4:	ed e7       	ldi	r30, 0x7D	; 125
   1c8f6:	f4 ee       	ldi	r31, 0xE4	; 228
   1c8f8:	a7 c2       	rjmp	.+1358   	; 0x1ce48 <__prologue_saves__+0x1c>
	char tmp[32];

    sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c8fa:	83 e0       	ldi	r24, 0x03	; 3
   1c8fc:	0e 94 70 97 	call	0x12ee0	; 0x12ee0 <count_drive_types>
   1c900:	18 2f       	mov	r17, r24
   1c902:	81 e0       	ldi	r24, 0x01	; 1
   1c904:	0e 94 70 97 	call	0x12ee0	; 0x12ee0 <count_drive_types>
   1c908:	08 2e       	mov	r0, r24
   1c90a:	00 0c       	add	r0, r0
   1c90c:	99 0b       	sbc	r25, r25
   1c90e:	ed b7       	in	r30, 0x3d	; 61
   1c910:	fe b7       	in	r31, 0x3e	; 62
   1c912:	91 87       	std	Z+9, r25	; 0x09
   1c914:	80 87       	std	Z+8, r24	; 0x08
   1c916:	81 2f       	mov	r24, r17
   1c918:	11 0f       	add	r17, r17
   1c91a:	99 0b       	sbc	r25, r25
   1c91c:	97 83       	std	Z+7, r25	; 0x07
   1c91e:	86 83       	std	Z+6, r24	; 0x06
   1c920:	84 e7       	ldi	r24, 0x74	; 116
   1c922:	99 e4       	ldi	r25, 0x49	; 73
   1c924:	a0 e0       	ldi	r26, 0x00	; 0
   1c926:	83 83       	std	Z+3, r24	; 0x03
   1c928:	94 83       	std	Z+4, r25	; 0x04
   1c92a:	a5 83       	std	Z+5, r26	; 0x05
   1c92c:	8e 01       	movw	r16, r28
   1c92e:	06 5f       	subi	r16, 0xF6	; 246
   1c930:	1f 4f       	sbci	r17, 0xFF	; 255
   1c932:	12 83       	std	Z+2, r17	; 0x02
   1c934:	01 83       	std	Z+1, r16	; 0x01
   1c936:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
        (int) count_drive_types(SS80_TYPE),
        (int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c93a:	ed b7       	in	r30, 0x3d	; 61
   1c93c:	fe b7       	in	r31, 0x3e	; 62
   1c93e:	17 83       	std	Z+7, r17	; 0x07
   1c940:	06 83       	std	Z+6, r16	; 0x06
   1c942:	8e e6       	ldi	r24, 0x6E	; 110
   1c944:	99 e4       	ldi	r25, 0x49	; 73
   1c946:	a0 e0       	ldi	r26, 0x00	; 0
   1c948:	83 83       	std	Z+3, r24	; 0x03
   1c94a:	94 83       	std	Z+4, r25	; 0x04
   1c94c:	a5 83       	std	Z+5, r26	; 0x05
   1c94e:	8c e0       	ldi	r24, 0x0C	; 12
   1c950:	93 e0       	ldi	r25, 0x03	; 3
   1c952:	92 83       	std	Z+2, r25	; 0x02
   1c954:	81 83       	std	Z+1, r24	; 0x01
   1c956:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>
}
   1c95a:	a9 96       	adiw	r28, 0x29	; 41
   1c95c:	e4 e0       	ldi	r30, 0x04	; 4
   1c95e:	90 c2       	rjmp	.+1312   	; 0x1ce80 <__epilogue_restores__+0x1c>

0001c960 <main>:
#endif

/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c960:	cf 93       	push	r28
   1c962:	df 93       	push	r29
   1c964:	cd b7       	in	r28, 0x3d	; 61
   1c966:	de b7       	in	r29, 0x3e	; 62
   1c968:	63 97       	sbiw	r28, 0x13	; 19
   1c96a:	0f b6       	in	r0, 0x3f	; 63
   1c96c:	f8 94       	cli
   1c96e:	de bf       	out	0x3e, r29	; 62
   1c970:	0f be       	out	0x3f, r0	; 63
   1c972:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

	clear_error();		// Clear error state
   1c974:	0e 94 31 27 	call	0x4e62	; 0x4e62 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c978:	46 98       	cbi	0x08, 6	; 8
   1c97a:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c97c:	0e 94 e1 85 	call	0x10bc2	; 0x10bc2 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c980:	40 e0       	ldi	r20, 0x00	; 0
   1c982:	52 ec       	ldi	r21, 0xC2	; 194
   1c984:	61 e0       	ldi	r22, 0x01	; 1
   1c986:	70 e0       	ldi	r23, 0x00	; 0
   1c988:	80 e0       	ldi	r24, 0x00	; 0
   1c98a:	0e 94 7f 29 	call	0x52fe	; 0x52fe <uart_init>
   1c98e:	6b 01       	movw	r12, r22
   1c990:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c992:	68 ec       	ldi	r22, 0xC8	; 200
   1c994:	70 e0       	ldi	r23, 0x00	; 0
   1c996:	80 e0       	ldi	r24, 0x00	; 0
   1c998:	90 e0       	ldi	r25, 0x00	; 0
   1c99a:	0e 94 8c 28 	call	0x5118	; 0x5118 <delayms>

    sep();
   1c99e:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>
    printf("Start\n");
   1c9a2:	87 e6       	ldi	r24, 0x67	; 103
   1c9a4:	99 e4       	ldi	r25, 0x49	; 73
   1c9a6:	a0 e0       	ldi	r26, 0x00	; 0
   1c9a8:	ed b7       	in	r30, 0x3d	; 61
   1c9aa:	fe b7       	in	r31, 0x3e	; 62
   1c9ac:	81 83       	std	Z+1, r24	; 0x01
   1c9ae:	92 83       	std	Z+2, r25	; 0x02
   1c9b0:	a3 83       	std	Z+3, r26	; 0x03
   1c9b2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c9b6:	80 e0       	ldi	r24, 0x00	; 0
   1c9b8:	9d e2       	ldi	r25, 0x2D	; 45
   1c9ba:	a1 e3       	ldi	r26, 0x31	; 49
   1c9bc:	b1 e0       	ldi	r27, 0x01	; 1
   1c9be:	ed b7       	in	r30, 0x3d	; 61
   1c9c0:	fe b7       	in	r31, 0x3e	; 62
   1c9c2:	84 83       	std	Z+4, r24	; 0x04
   1c9c4:	95 83       	std	Z+5, r25	; 0x05
   1c9c6:	a6 83       	std	Z+6, r26	; 0x06
   1c9c8:	b7 83       	std	Z+7, r27	; 0x07
   1c9ca:	86 e5       	ldi	r24, 0x56	; 86
   1c9cc:	99 e4       	ldi	r25, 0x49	; 73
   1c9ce:	a0 e0       	ldi	r26, 0x00	; 0
   1c9d0:	81 83       	std	Z+1, r24	; 0x01
   1c9d2:	92 83       	std	Z+2, r25	; 0x02
   1c9d4:	a3 83       	std	Z+3, r26	; 0x03
   1c9d6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c9da:	ed b7       	in	r30, 0x3d	; 61
   1c9dc:	fe b7       	in	r31, 0x3e	; 62
   1c9de:	c0 86       	std	Z+8, r12	; 0x08
   1c9e0:	d1 86       	std	Z+9, r13	; 0x09
   1c9e2:	e2 86       	std	Z+10, r14	; 0x0a
   1c9e4:	f3 86       	std	Z+11, r15	; 0x0b
   1c9e6:	80 e0       	ldi	r24, 0x00	; 0
   1c9e8:	92 ec       	ldi	r25, 0xC2	; 194
   1c9ea:	a1 e0       	ldi	r26, 0x01	; 1
   1c9ec:	b0 e0       	ldi	r27, 0x00	; 0
   1c9ee:	84 83       	std	Z+4, r24	; 0x04
   1c9f0:	95 83       	std	Z+5, r25	; 0x05
   1c9f2:	a6 83       	std	Z+6, r26	; 0x06
   1c9f4:	b7 83       	std	Z+7, r27	; 0x07
   1c9f6:	8f e2       	ldi	r24, 0x2F	; 47
   1c9f8:	99 e4       	ldi	r25, 0x49	; 73
   1c9fa:	a0 e0       	ldi	r26, 0x00	; 0
   1c9fc:	81 83       	std	Z+1, r24	; 0x01
   1c9fe:	92 83       	std	Z+2, r25	; 0x02
   1ca00:	a3 83       	std	Z+3, r26	; 0x03
   1ca02:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    init_timers();
   1ca06:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <init_timers>

    sep();
   1ca0a:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1ca0e:	80 e1       	ldi	r24, 0x10	; 16
   1ca10:	99 e4       	ldi	r25, 0x49	; 73
   1ca12:	a0 e0       	ldi	r26, 0x00	; 0
   1ca14:	ed b7       	in	r30, 0x3d	; 61
   1ca16:	fe b7       	in	r31, 0x3e	; 62
   1ca18:	81 83       	std	Z+1, r24	; 0x01
   1ca1a:	92 83       	std	Z+2, r25	; 0x02
   1ca1c:	a3 83       	std	Z+3, r26	; 0x03
   1ca1e:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1ca22:	83 ef       	ldi	r24, 0xF3	; 243
   1ca24:	98 e4       	ldi	r25, 0x48	; 72
   1ca26:	a0 e0       	ldi	r26, 0x00	; 0
   1ca28:	ed b7       	in	r30, 0x3d	; 61
   1ca2a:	fe b7       	in	r31, 0x3e	; 62
   1ca2c:	81 83       	std	Z+1, r24	; 0x01
   1ca2e:	92 83       	std	Z+2, r25	; 0x02
   1ca30:	a3 83       	std	Z+3, r26	; 0x03
   1ca32:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf(" GNU version 3\n");
   1ca36:	83 ee       	ldi	r24, 0xE3	; 227
   1ca38:	98 e4       	ldi	r25, 0x48	; 72
   1ca3a:	a0 e0       	ldi	r26, 0x00	; 0
   1ca3c:	ed b7       	in	r30, 0x3d	; 61
   1ca3e:	fe b7       	in	r31, 0x3e	; 62
   1ca40:	81 83       	std	Z+1, r24	; 0x01
   1ca42:	92 83       	std	Z+2, r25	; 0x02
   1ca44:	a3 83       	std	Z+3, r26	; 0x03
   1ca46:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1ca4a:	8c eb       	ldi	r24, 0xBC	; 188
   1ca4c:	98 e4       	ldi	r25, 0x48	; 72
   1ca4e:	a0 e0       	ldi	r26, 0x00	; 0
   1ca50:	ed b7       	in	r30, 0x3d	; 61
   1ca52:	fe b7       	in	r31, 0x3e	; 62
   1ca54:	81 83       	std	Z+1, r24	; 0x01
   1ca56:	92 83       	std	Z+2, r25	; 0x02
   1ca58:	a3 83       	std	Z+3, r26	; 0x03
   1ca5a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1ca5e:	87 eb       	ldi	r24, 0xB7	; 183
   1ca60:	96 e1       	ldi	r25, 0x16	; 22
   1ca62:	ed b7       	in	r30, 0x3d	; 61
   1ca64:	fe b7       	in	r31, 0x3e	; 62
   1ca66:	95 83       	std	Z+5, r25	; 0x05
   1ca68:	84 83       	std	Z+4, r24	; 0x04
   1ca6a:	82 ea       	ldi	r24, 0xA2	; 162
   1ca6c:	98 e4       	ldi	r25, 0x48	; 72
   1ca6e:	a0 e0       	ldi	r26, 0x00	; 0
   1ca70:	81 83       	std	Z+1, r24	; 0x01
   1ca72:	92 83       	std	Z+2, r25	; 0x02
   1ca74:	a3 83       	std	Z+3, r26	; 0x03
   1ca76:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1ca7a:	8b ed       	ldi	r24, 0xDB	; 219
   1ca7c:	96 e1       	ldi	r25, 0x16	; 22
   1ca7e:	ed b7       	in	r30, 0x3d	; 61
   1ca80:	fe b7       	in	r31, 0x3e	; 62
   1ca82:	95 83       	std	Z+5, r25	; 0x05
   1ca84:	84 83       	std	Z+4, r24	; 0x04
   1ca86:	88 e8       	ldi	r24, 0x88	; 136
   1ca88:	98 e4       	ldi	r25, 0x48	; 72
   1ca8a:	a0 e0       	ldi	r26, 0x00	; 0
   1ca8c:	81 83       	std	Z+1, r24	; 0x01
   1ca8e:	92 83       	std	Z+2, r25	; 0x02
   1ca90:	a3 83       	std	Z+3, r26	; 0x03
   1ca92:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

    sep();
   1ca96:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>
    PrintFree();
   1ca9a:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <PrintFree>

    sep();
   1ca9e:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1caa2:	82 e7       	ldi	r24, 0x72	; 114
   1caa4:	98 e4       	ldi	r25, 0x48	; 72
   1caa6:	a0 e0       	ldi	r26, 0x00	; 0
   1caa8:	ed b7       	in	r30, 0x3d	; 61
   1caaa:	fe b7       	in	r31, 0x3e	; 62
   1caac:	81 83       	std	Z+1, r24	; 0x01
   1caae:	92 83       	std	Z+2, r25	; 0x02
   1cab0:	a3 83       	std	Z+3, r26	; 0x03
   1cab2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1cab6:	4b e0       	ldi	r20, 0x0B	; 11
   1cab8:	50 e0       	ldi	r21, 0x00	; 0
   1caba:	60 e2       	ldi	r22, 0x20	; 32
   1cabc:	71 ea       	ldi	r23, 0xA1	; 161
   1cabe:	87 e0       	ldi	r24, 0x07	; 7
   1cac0:	90 e0       	ldi	r25, 0x00	; 0
   1cac2:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1cac6:	8c e5       	ldi	r24, 0x5C	; 92
   1cac8:	98 e4       	ldi	r25, 0x48	; 72
   1caca:	a0 e0       	ldi	r26, 0x00	; 0
   1cacc:	ed b7       	in	r30, 0x3d	; 61
   1cace:	fe b7       	in	r31, 0x3e	; 62
   1cad0:	81 83       	std	Z+1, r24	; 0x01
   1cad2:	92 83       	std	Z+2, r25	; 0x02
   1cad4:	a3 83       	std	Z+3, r26	; 0x03
   1cad6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	i2c_init(100000);
   1cada:	60 ea       	ldi	r22, 0xA0	; 160
   1cadc:	76 e8       	ldi	r23, 0x86	; 134
   1cade:	81 e0       	ldi	r24, 0x01	; 1
   1cae0:	90 e0       	ldi	r25, 0x00	; 0
   1cae2:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <i2c_init>
    sep();
   1cae6:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1caea:	8a e4       	ldi	r24, 0x4A	; 74
   1caec:	98 e4       	ldi	r25, 0x48	; 72
   1caee:	a0 e0       	ldi	r26, 0x00	; 0
   1caf0:	ed b7       	in	r30, 0x3d	; 61
   1caf2:	fe b7       	in	r31, 0x3e	; 62
   1caf4:	81 83       	std	Z+1, r24	; 0x01
   1caf6:	92 83       	std	Z+2, r25	; 0x02
   1caf8:	a3 83       	std	Z+3, r26	; 0x03
   1cafa:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    clock_clear();
   1cafe:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <clock_clear>
    printf("Clock cleared\n");
   1cb02:	8b e3       	ldi	r24, 0x3B	; 59
   1cb04:	98 e4       	ldi	r25, 0x48	; 72
   1cb06:	a0 e0       	ldi	r26, 0x00	; 0
   1cb08:	ed b7       	in	r30, 0x3d	; 61
   1cb0a:	fe b7       	in	r31, 0x3e	; 62
   1cb0c:	81 83       	std	Z+1, r24	; 0x01
   1cb0e:	92 83       	std	Z+2, r25	; 0x02
   1cb10:	a3 83       	std	Z+3, r26	; 0x03
   1cb12:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1cb16:	be 01       	movw	r22, r28
   1cb18:	64 5f       	subi	r22, 0xF4	; 244
   1cb1a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb1c:	80 e0       	ldi	r24, 0x00	; 0
   1cb1e:	90 e0       	ldi	r25, 0x00	; 0
   1cb20:	0e 94 84 36 	call	0x6d08	; 0x6d08 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1cb24:	88 89       	ldd	r24, Y+16	; 0x10
   1cb26:	99 89       	ldd	r25, Y+17	; 0x11
   1cb28:	aa 89       	ldd	r26, Y+18	; 0x12
   1cb2a:	bb 89       	ldd	r27, Y+19	; 0x13
   1cb2c:	ed b7       	in	r30, 0x3d	; 61
   1cb2e:	fe b7       	in	r31, 0x3e	; 62
   1cb30:	84 83       	std	Z+4, r24	; 0x04
   1cb32:	95 83       	std	Z+5, r25	; 0x05
   1cb34:	a6 83       	std	Z+6, r26	; 0x06
   1cb36:	b7 83       	std	Z+7, r27	; 0x07
   1cb38:	8d e0       	ldi	r24, 0x0D	; 13
   1cb3a:	98 e4       	ldi	r25, 0x48	; 72
   1cb3c:	a0 e0       	ldi	r26, 0x00	; 0
   1cb3e:	81 83       	std	Z+1, r24	; 0x01
   1cb40:	92 83       	std	Z+2, r25	; 0x02
   1cb42:	a3 83       	std	Z+3, r26	; 0x03
   1cb44:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1cb48:	80 e0       	ldi	r24, 0x00	; 0
   1cb4a:	90 e0       	ldi	r25, 0x00	; 0
   1cb4c:	0e 94 5f 3d 	call	0x7abe	; 0x7abe <initialize_clock>
    display_clock();
   1cb50:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <display_clock>
    sep();
   1cb54:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1cb58:	e8 db       	rcall	.-2096   	; 0x1c32a <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1cb5a:	85 ef       	ldi	r24, 0xF5	; 245
   1cb5c:	97 e4       	ldi	r25, 0x47	; 71
   1cb5e:	a0 e0       	ldi	r26, 0x00	; 0
   1cb60:	ed b7       	in	r30, 0x3d	; 61
   1cb62:	fe b7       	in	r31, 0x3e	; 62
   1cb64:	81 83       	std	Z+1, r24	; 0x01
   1cb66:	92 83       	std	Z+2, r25	; 0x02
   1cb68:	a3 83       	std	Z+3, r26	; 0x03
   1cb6a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    if ( !mmc_init(1) )
   1cb6e:	81 e0       	ldi	r24, 0x01	; 1
   1cb70:	90 e0       	ldi	r25, 0x00	; 0
   1cb72:	0e 94 51 6f 	call	0xdea2	; 0xdea2 <mmc_init>
   1cb76:	89 2b       	or	r24, r25
   1cb78:	51 f4       	brne	.+20     	; 0x1cb8e <main+0x22e>
		printf("MMC initialized\n");
   1cb7a:	84 ee       	ldi	r24, 0xE4	; 228
   1cb7c:	97 e4       	ldi	r25, 0x47	; 71
   1cb7e:	a0 e0       	ldi	r26, 0x00	; 0
   1cb80:	ed b7       	in	r30, 0x3d	; 61
   1cb82:	fe b7       	in	r31, 0x3e	; 62
   1cb84:	81 83       	std	Z+1, r24	; 0x01
   1cb86:	92 83       	std	Z+2, r25	; 0x02
   1cb88:	a3 83       	std	Z+3, r26	; 0x03
   1cb8a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    sep();
   1cb8e:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1cb92:	0e 94 e1 85 	call	0x10bc2	; 0x10bc2 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1cb96:	8e ec       	ldi	r24, 0xCE	; 206
   1cb98:	97 e4       	ldi	r25, 0x47	; 71
   1cb9a:	a0 e0       	ldi	r26, 0x00	; 0
   1cb9c:	ed b7       	in	r30, 0x3d	; 61
   1cb9e:	fe b7       	in	r31, 0x3e	; 62
   1cba0:	81 83       	std	Z+1, r24	; 0x01
   1cba2:	92 83       	std	Z+2, r25	; 0x02
   1cba4:	a3 83       	std	Z+3, r26	; 0x03
   1cba6:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1cbaa:	0e 94 6c be 	call	0x17cd8	; 0x17cd8 <printer_init>
    printf("Printer initialized\n");
   1cbae:	89 eb       	ldi	r24, 0xB9	; 185
   1cbb0:	97 e4       	ldi	r25, 0x47	; 71
   1cbb2:	a0 e0       	ldi	r26, 0x00	; 0
   1cbb4:	ed b7       	in	r30, 0x3d	; 61
   1cbb6:	fe b7       	in	r31, 0x3e	; 62
   1cbb8:	81 83       	std	Z+1, r24	; 0x01
   1cbba:	92 83       	std	Z+2, r25	; 0x02
   1cbbc:	a3 83       	std	Z+3, r26	; 0x03
   1cbbe:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1cbc2:	87 ea       	ldi	r24, 0xA7	; 167
   1cbc4:	97 e4       	ldi	r25, 0x47	; 71
   1cbc6:	a0 e0       	ldi	r26, 0x00	; 0
   1cbc8:	ed b7       	in	r30, 0x3d	; 61
   1cbca:	fe b7       	in	r31, 0x3e	; 62
   1cbcc:	81 83       	std	Z+1, r24	; 0x01
   1cbce:	92 83       	std	Z+2, r25	; 0x02
   1cbd0:	a3 83       	std	Z+3, r26	; 0x03
   1cbd2:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    gpib_timer_init();
   1cbd6:	0e 94 f5 83 	call	0x107ea	; 0x107ea <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1cbda:	8f e8       	ldi	r24, 0x8F	; 143
   1cbdc:	97 e4       	ldi	r25, 0x47	; 71
   1cbde:	a0 e0       	ldi	r26, 0x00	; 0
   1cbe0:	ed b7       	in	r30, 0x3d	; 61
   1cbe2:	fe b7       	in	r31, 0x3e	; 62
   1cbe4:	81 83       	std	Z+1, r24	; 0x01
   1cbe6:	92 83       	std	Z+2, r25	; 0x02
   1cbe8:	a3 83       	std	Z+3, r26	; 0x03
   1cbea:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1cbee:	0e 94 59 8c 	call	0x118b2	; 0x118b2 <gpib_file_init>
    printf("GPIB File init done\n");
   1cbf2:	8a e7       	ldi	r24, 0x7A	; 122
   1cbf4:	97 e4       	ldi	r25, 0x47	; 71
   1cbf6:	a0 e0       	ldi	r26, 0x00	; 0
   1cbf8:	ed b7       	in	r30, 0x3d	; 61
   1cbfa:	fe b7       	in	r31, 0x3e	; 62
   1cbfc:	81 83       	std	Z+1, r24	; 0x01
   1cbfe:	92 83       	std	Z+2, r25	; 0x02
   1cc00:	a3 83       	std	Z+3, r26	; 0x03
   1cc02:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1cc06:	0e 94 49 86 	call	0x10c92	; 0x10c92 <gpib_state_init>
    printf("GPIB State init done\n");
   1cc0a:	84 e6       	ldi	r24, 0x64	; 100
   1cc0c:	97 e4       	ldi	r25, 0x47	; 71
   1cc0e:	a0 e0       	ldi	r26, 0x00	; 0
   1cc10:	ed b7       	in	r30, 0x3d	; 61
   1cc12:	fe b7       	in	r31, 0x3e	; 62
   1cc14:	81 83       	std	Z+1, r24	; 0x01
   1cc16:	92 83       	std	Z+2, r25	; 0x02
   1cc18:	a3 83       	std	Z+3, r26	; 0x03
   1cc1a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    sep();
   1cc1e:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1cc22:	80 e0       	ldi	r24, 0x00	; 0
   1cc24:	90 e0       	ldi	r25, 0x00	; 0
   1cc26:	0e 94 01 94 	call	0x12802	; 0x12802 <display_Addresses>
    sep();
   1cc2a:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1cc2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1cc32:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1cc36:	ed b7       	in	r30, 0x3d	; 61
   1cc38:	fe b7       	in	r31, 0x3e	; 62
   1cc3a:	95 83       	std	Z+5, r25	; 0x05
   1cc3c:	84 83       	std	Z+4, r24	; 0x04
   1cc3e:	8e e4       	ldi	r24, 0x4E	; 78
   1cc40:	97 e4       	ldi	r25, 0x47	; 71
   1cc42:	a0 e0       	ldi	r26, 0x00	; 0
   1cc44:	81 83       	std	Z+1, r24	; 0x01
   1cc46:	92 83       	std	Z+2, r25	; 0x02
   1cc48:	a3 83       	std	Z+3, r26	; 0x03
   1cc4a:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
    sep();
   1cc4e:	0e 94 41 32 	call	0x6482	; 0x6482 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1cc52:	0e 94 0f 9b 	call	0x1361e	; 0x1361e <format_drives>

#ifdef LCD_SUPPORT
	update_drive_counts();
   1cc56:	4c de       	rcall	.-872    	; 0x1c8f0 <update_drive_counts>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1cc58:	8b e0       	ldi	r24, 0x0B	; 11
   1cc5a:	97 e1       	ldi	r25, 0x17	; 23
   1cc5c:	ed b7       	in	r30, 0x3d	; 61
   1cc5e:	fe b7       	in	r31, 0x3e	; 62
   1cc60:	97 83       	std	Z+7, r25	; 0x07
   1cc62:	86 83       	std	Z+6, r24	; 0x06
   1cc64:	88 e4       	ldi	r24, 0x48	; 72
   1cc66:	97 e4       	ldi	r25, 0x47	; 71
   1cc68:	a0 e0       	ldi	r26, 0x00	; 0
   1cc6a:	83 83       	std	Z+3, r24	; 0x03
   1cc6c:	94 83       	std	Z+4, r25	; 0x04
   1cc6e:	a5 83       	std	Z+5, r26	; 0x05
   1cc70:	85 ef       	ldi	r24, 0xF5	; 245
   1cc72:	92 e0       	ldi	r25, 0x02	; 2
   1cc74:	92 83       	std	Z+2, r25	; 0x02
   1cc76:	81 83       	std	Z+1, r24	; 0x01
   1cc78:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <sprintf_P>

	i2c_task_run();
   1cc7c:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <i2c_task_run>
	delayms(1000);
   1cc80:	68 ee       	ldi	r22, 0xE8	; 232
   1cc82:	73 e0       	ldi	r23, 0x03	; 3
   1cc84:	80 e0       	ldi	r24, 0x00	; 0
   1cc86:	90 e0       	ldi	r25, 0x00	; 0
   1cc88:	0e 94 8c 28 	call	0x5118	; 0x5118 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1cc8c:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
   1cc90:	88 23       	and	r24, r24
   1cc92:	21 f0       	breq	.+8      	; 0x1cc9c <main+0x33c>
   1cc94:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
   1cc98:	88 23       	and	r24, r24
   1cc9a:	61 f0       	breq	.+24     	; 0x1ccb4 <main+0x354>
	{
		i2c_display_task_errors();
   1cc9c:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1cca0:	8e e2       	ldi	r24, 0x2E	; 46
   1cca2:	97 e4       	ldi	r25, 0x47	; 71
   1cca4:	a0 e0       	ldi	r26, 0x00	; 0
   1cca6:	ed b7       	in	r30, 0x3d	; 61
   1cca8:	fe b7       	in	r31, 0x3e	; 62
   1ccaa:	81 83       	std	Z+1, r24	; 0x01
   1ccac:	92 83       	std	Z+2, r25	; 0x02
   1ccae:	a3 83       	std	Z+3, r26	; 0x03
   1ccb0:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1ccb4:	8a e1       	ldi	r24, 0x1A	; 26
   1ccb6:	97 e4       	ldi	r25, 0x47	; 71
   1ccb8:	a0 e0       	ldi	r26, 0x00	; 0
   1ccba:	ed b7       	in	r30, 0x3d	; 61
   1ccbc:	fe b7       	in	r31, 0x3e	; 62
   1ccbe:	81 83       	std	Z+1, r24	; 0x01
   1ccc0:	92 83       	std	Z+2, r25	; 0x02
   1ccc2:	a3 83       	std	Z+3, r26	; 0x03
   1ccc4:	0e 94 32 47 	call	0x8e64	; 0x8e64 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1ccc8:	81 e0       	ldi	r24, 0x01	; 1
   1ccca:	08 de       	rcall	.-1008   	; 0x1c8dc <user_task>
   1cccc:	fd cf       	rjmp	.-6      	; 0x1ccc8 <main+0x368>

0001ccce <__mulsi3>:
   1ccce:	db 01       	movw	r26, r22
   1ccd0:	8f 93       	push	r24
   1ccd2:	9f 93       	push	r25
   1ccd4:	8b d0       	rcall	.+278    	; 0x1cdec <__muluhisi3>
   1ccd6:	bf 91       	pop	r27
   1ccd8:	af 91       	pop	r26
   1ccda:	a2 9f       	mul	r26, r18
   1ccdc:	80 0d       	add	r24, r0
   1ccde:	91 1d       	adc	r25, r1
   1cce0:	a3 9f       	mul	r26, r19
   1cce2:	90 0d       	add	r25, r0
   1cce4:	b2 9f       	mul	r27, r18
   1cce6:	90 0d       	add	r25, r0
   1cce8:	11 24       	eor	r1, r1
   1ccea:	08 95       	ret

0001ccec <__udivmodqi4>:
   1ccec:	99 1b       	sub	r25, r25
   1ccee:	79 e0       	ldi	r23, 0x09	; 9
   1ccf0:	04 c0       	rjmp	.+8      	; 0x1ccfa <__udivmodqi4_ep>

0001ccf2 <__udivmodqi4_loop>:
   1ccf2:	99 1f       	adc	r25, r25
   1ccf4:	96 17       	cp	r25, r22
   1ccf6:	08 f0       	brcs	.+2      	; 0x1ccfa <__udivmodqi4_ep>
   1ccf8:	96 1b       	sub	r25, r22

0001ccfa <__udivmodqi4_ep>:
   1ccfa:	88 1f       	adc	r24, r24
   1ccfc:	7a 95       	dec	r23
   1ccfe:	c9 f7       	brne	.-14     	; 0x1ccf2 <__udivmodqi4_loop>
   1cd00:	80 95       	com	r24
   1cd02:	08 95       	ret

0001cd04 <__udivmodhi4>:
   1cd04:	aa 1b       	sub	r26, r26
   1cd06:	bb 1b       	sub	r27, r27
   1cd08:	51 e1       	ldi	r21, 0x11	; 17
   1cd0a:	07 c0       	rjmp	.+14     	; 0x1cd1a <__udivmodhi4_ep>

0001cd0c <__udivmodhi4_loop>:
   1cd0c:	aa 1f       	adc	r26, r26
   1cd0e:	bb 1f       	adc	r27, r27
   1cd10:	a6 17       	cp	r26, r22
   1cd12:	b7 07       	cpc	r27, r23
   1cd14:	10 f0       	brcs	.+4      	; 0x1cd1a <__udivmodhi4_ep>
   1cd16:	a6 1b       	sub	r26, r22
   1cd18:	b7 0b       	sbc	r27, r23

0001cd1a <__udivmodhi4_ep>:
   1cd1a:	88 1f       	adc	r24, r24
   1cd1c:	99 1f       	adc	r25, r25
   1cd1e:	5a 95       	dec	r21
   1cd20:	a9 f7       	brne	.-22     	; 0x1cd0c <__udivmodhi4_loop>
   1cd22:	80 95       	com	r24
   1cd24:	90 95       	com	r25
   1cd26:	bc 01       	movw	r22, r24
   1cd28:	cd 01       	movw	r24, r26
   1cd2a:	08 95       	ret

0001cd2c <__divmodhi4>:
   1cd2c:	97 fb       	bst	r25, 7
   1cd2e:	07 2e       	mov	r0, r23
   1cd30:	16 f4       	brtc	.+4      	; 0x1cd36 <__divmodhi4+0xa>
   1cd32:	00 94       	com	r0
   1cd34:	06 d0       	rcall	.+12     	; 0x1cd42 <__divmodhi4_neg1>
   1cd36:	77 fd       	sbrc	r23, 7
   1cd38:	08 d0       	rcall	.+16     	; 0x1cd4a <__divmodhi4_neg2>
   1cd3a:	e4 df       	rcall	.-56     	; 0x1cd04 <__udivmodhi4>
   1cd3c:	07 fc       	sbrc	r0, 7
   1cd3e:	05 d0       	rcall	.+10     	; 0x1cd4a <__divmodhi4_neg2>
   1cd40:	3e f4       	brtc	.+14     	; 0x1cd50 <__divmodhi4_exit>

0001cd42 <__divmodhi4_neg1>:
   1cd42:	90 95       	com	r25
   1cd44:	81 95       	neg	r24
   1cd46:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd48:	08 95       	ret

0001cd4a <__divmodhi4_neg2>:
   1cd4a:	70 95       	com	r23
   1cd4c:	61 95       	neg	r22
   1cd4e:	7f 4f       	sbci	r23, 0xFF	; 255

0001cd50 <__divmodhi4_exit>:
   1cd50:	08 95       	ret

0001cd52 <__udivmodsi4>:
   1cd52:	a1 e2       	ldi	r26, 0x21	; 33
   1cd54:	1a 2e       	mov	r1, r26
   1cd56:	aa 1b       	sub	r26, r26
   1cd58:	bb 1b       	sub	r27, r27
   1cd5a:	fd 01       	movw	r30, r26
   1cd5c:	0d c0       	rjmp	.+26     	; 0x1cd78 <__udivmodsi4_ep>

0001cd5e <__udivmodsi4_loop>:
   1cd5e:	aa 1f       	adc	r26, r26
   1cd60:	bb 1f       	adc	r27, r27
   1cd62:	ee 1f       	adc	r30, r30
   1cd64:	ff 1f       	adc	r31, r31
   1cd66:	a2 17       	cp	r26, r18
   1cd68:	b3 07       	cpc	r27, r19
   1cd6a:	e4 07       	cpc	r30, r20
   1cd6c:	f5 07       	cpc	r31, r21
   1cd6e:	20 f0       	brcs	.+8      	; 0x1cd78 <__udivmodsi4_ep>
   1cd70:	a2 1b       	sub	r26, r18
   1cd72:	b3 0b       	sbc	r27, r19
   1cd74:	e4 0b       	sbc	r30, r20
   1cd76:	f5 0b       	sbc	r31, r21

0001cd78 <__udivmodsi4_ep>:
   1cd78:	66 1f       	adc	r22, r22
   1cd7a:	77 1f       	adc	r23, r23
   1cd7c:	88 1f       	adc	r24, r24
   1cd7e:	99 1f       	adc	r25, r25
   1cd80:	1a 94       	dec	r1
   1cd82:	69 f7       	brne	.-38     	; 0x1cd5e <__udivmodsi4_loop>
   1cd84:	60 95       	com	r22
   1cd86:	70 95       	com	r23
   1cd88:	80 95       	com	r24
   1cd8a:	90 95       	com	r25
   1cd8c:	9b 01       	movw	r18, r22
   1cd8e:	ac 01       	movw	r20, r24
   1cd90:	bd 01       	movw	r22, r26
   1cd92:	cf 01       	movw	r24, r30
   1cd94:	08 95       	ret

0001cd96 <__divmodsi4>:
   1cd96:	05 2e       	mov	r0, r21
   1cd98:	97 fb       	bst	r25, 7
   1cd9a:	16 f4       	brtc	.+4      	; 0x1cda0 <__divmodsi4+0xa>
   1cd9c:	00 94       	com	r0
   1cd9e:	0f d0       	rcall	.+30     	; 0x1cdbe <__negsi2>
   1cda0:	57 fd       	sbrc	r21, 7
   1cda2:	05 d0       	rcall	.+10     	; 0x1cdae <__divmodsi4_neg2>
   1cda4:	d6 df       	rcall	.-84     	; 0x1cd52 <__udivmodsi4>
   1cda6:	07 fc       	sbrc	r0, 7
   1cda8:	02 d0       	rcall	.+4      	; 0x1cdae <__divmodsi4_neg2>
   1cdaa:	46 f4       	brtc	.+16     	; 0x1cdbc <__divmodsi4_exit>
   1cdac:	08 c0       	rjmp	.+16     	; 0x1cdbe <__negsi2>

0001cdae <__divmodsi4_neg2>:
   1cdae:	50 95       	com	r21
   1cdb0:	40 95       	com	r20
   1cdb2:	30 95       	com	r19
   1cdb4:	21 95       	neg	r18
   1cdb6:	3f 4f       	sbci	r19, 0xFF	; 255
   1cdb8:	4f 4f       	sbci	r20, 0xFF	; 255
   1cdba:	5f 4f       	sbci	r21, 0xFF	; 255

0001cdbc <__divmodsi4_exit>:
   1cdbc:	08 95       	ret

0001cdbe <__negsi2>:
   1cdbe:	90 95       	com	r25
   1cdc0:	80 95       	com	r24
   1cdc2:	70 95       	com	r23
   1cdc4:	61 95       	neg	r22
   1cdc6:	7f 4f       	sbci	r23, 0xFF	; 255
   1cdc8:	8f 4f       	sbci	r24, 0xFF	; 255
   1cdca:	9f 4f       	sbci	r25, 0xFF	; 255
   1cdcc:	08 95       	ret

0001cdce <__tablejump2__>:
   1cdce:	ee 0f       	add	r30, r30
   1cdd0:	ff 1f       	adc	r31, r31
   1cdd2:	00 24       	eor	r0, r0
   1cdd4:	00 1c       	adc	r0, r0
   1cdd6:	0b be       	out	0x3b, r0	; 59
   1cdd8:	07 90       	elpm	r0, Z+
   1cdda:	f6 91       	elpm	r31, Z
   1cddc:	e0 2d       	mov	r30, r0
   1cdde:	09 94       	ijmp

0001cde0 <__usmulhisi3>:
   1cde0:	6f d0       	rcall	.+222    	; 0x1cec0 <__umulhisi3>

0001cde2 <__usmulhisi3_tail>:
   1cde2:	b7 ff       	sbrs	r27, 7
   1cde4:	08 95       	ret
   1cde6:	82 1b       	sub	r24, r18
   1cde8:	93 0b       	sbc	r25, r19
   1cdea:	08 95       	ret

0001cdec <__muluhisi3>:
   1cdec:	69 d0       	rcall	.+210    	; 0x1cec0 <__umulhisi3>
   1cdee:	a5 9f       	mul	r26, r21
   1cdf0:	90 0d       	add	r25, r0
   1cdf2:	b4 9f       	mul	r27, r20
   1cdf4:	90 0d       	add	r25, r0
   1cdf6:	a4 9f       	mul	r26, r20
   1cdf8:	80 0d       	add	r24, r0
   1cdfa:	91 1d       	adc	r25, r1
   1cdfc:	11 24       	eor	r1, r1
   1cdfe:	08 95       	ret

0001ce00 <__mulshisi3>:
   1ce00:	b7 ff       	sbrs	r27, 7
   1ce02:	f4 cf       	rjmp	.-24     	; 0x1cdec <__muluhisi3>

0001ce04 <__mulohisi3>:
   1ce04:	f3 df       	rcall	.-26     	; 0x1cdec <__muluhisi3>
   1ce06:	82 1b       	sub	r24, r18
   1ce08:	93 0b       	sbc	r25, r19
   1ce0a:	08 95       	ret

0001ce0c <__negdi2>:
   1ce0c:	60 95       	com	r22
   1ce0e:	70 95       	com	r23
   1ce10:	80 95       	com	r24
   1ce12:	90 95       	com	r25
   1ce14:	30 95       	com	r19
   1ce16:	40 95       	com	r20
   1ce18:	50 95       	com	r21
   1ce1a:	21 95       	neg	r18
   1ce1c:	3f 4f       	sbci	r19, 0xFF	; 255
   1ce1e:	4f 4f       	sbci	r20, 0xFF	; 255
   1ce20:	5f 4f       	sbci	r21, 0xFF	; 255
   1ce22:	6f 4f       	sbci	r22, 0xFF	; 255
   1ce24:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce26:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce28:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce2a:	08 95       	ret

0001ce2c <__prologue_saves__>:
   1ce2c:	2f 92       	push	r2
   1ce2e:	3f 92       	push	r3
   1ce30:	4f 92       	push	r4
   1ce32:	5f 92       	push	r5
   1ce34:	6f 92       	push	r6
   1ce36:	7f 92       	push	r7
   1ce38:	8f 92       	push	r8
   1ce3a:	9f 92       	push	r9
   1ce3c:	af 92       	push	r10
   1ce3e:	bf 92       	push	r11
   1ce40:	cf 92       	push	r12
   1ce42:	df 92       	push	r13
   1ce44:	ef 92       	push	r14
   1ce46:	ff 92       	push	r15
   1ce48:	0f 93       	push	r16
   1ce4a:	1f 93       	push	r17
   1ce4c:	cf 93       	push	r28
   1ce4e:	df 93       	push	r29
   1ce50:	cd b7       	in	r28, 0x3d	; 61
   1ce52:	de b7       	in	r29, 0x3e	; 62
   1ce54:	ca 1b       	sub	r28, r26
   1ce56:	db 0b       	sbc	r29, r27
   1ce58:	0f b6       	in	r0, 0x3f	; 63
   1ce5a:	f8 94       	cli
   1ce5c:	de bf       	out	0x3e, r29	; 62
   1ce5e:	0f be       	out	0x3f, r0	; 63
   1ce60:	cd bf       	out	0x3d, r28	; 61
   1ce62:	09 94       	ijmp

0001ce64 <__epilogue_restores__>:
   1ce64:	2a 88       	ldd	r2, Y+18	; 0x12
   1ce66:	39 88       	ldd	r3, Y+17	; 0x11
   1ce68:	48 88       	ldd	r4, Y+16	; 0x10
   1ce6a:	5f 84       	ldd	r5, Y+15	; 0x0f
   1ce6c:	6e 84       	ldd	r6, Y+14	; 0x0e
   1ce6e:	7d 84       	ldd	r7, Y+13	; 0x0d
   1ce70:	8c 84       	ldd	r8, Y+12	; 0x0c
   1ce72:	9b 84       	ldd	r9, Y+11	; 0x0b
   1ce74:	aa 84       	ldd	r10, Y+10	; 0x0a
   1ce76:	b9 84       	ldd	r11, Y+9	; 0x09
   1ce78:	c8 84       	ldd	r12, Y+8	; 0x08
   1ce7a:	df 80       	ldd	r13, Y+7	; 0x07
   1ce7c:	ee 80       	ldd	r14, Y+6	; 0x06
   1ce7e:	fd 80       	ldd	r15, Y+5	; 0x05
   1ce80:	0c 81       	ldd	r16, Y+4	; 0x04
   1ce82:	1b 81       	ldd	r17, Y+3	; 0x03
   1ce84:	aa 81       	ldd	r26, Y+2	; 0x02
   1ce86:	b9 81       	ldd	r27, Y+1	; 0x01
   1ce88:	ce 0f       	add	r28, r30
   1ce8a:	d1 1d       	adc	r29, r1
   1ce8c:	0f b6       	in	r0, 0x3f	; 63
   1ce8e:	f8 94       	cli
   1ce90:	de bf       	out	0x3e, r29	; 62
   1ce92:	0f be       	out	0x3f, r0	; 63
   1ce94:	cd bf       	out	0x3d, r28	; 61
   1ce96:	ed 01       	movw	r28, r26
   1ce98:	08 95       	ret

0001ce9a <__xload_1>:
   1ce9a:	57 fd       	sbrc	r21, 7
   1ce9c:	03 c0       	rjmp	.+6      	; 0x1cea4 <__xload_1+0xa>
   1ce9e:	5b bf       	out	0x3b, r21	; 59
   1cea0:	67 91       	elpm	r22, Z+
   1cea2:	08 95       	ret
   1cea4:	60 81       	ld	r22, Z
   1cea6:	08 95       	ret

0001cea8 <__cmpdi2_s8>:
   1cea8:	00 24       	eor	r0, r0
   1ceaa:	a7 fd       	sbrc	r26, 7
   1ceac:	00 94       	com	r0
   1ceae:	2a 17       	cp	r18, r26
   1ceb0:	30 05       	cpc	r19, r0
   1ceb2:	40 05       	cpc	r20, r0
   1ceb4:	50 05       	cpc	r21, r0
   1ceb6:	60 05       	cpc	r22, r0
   1ceb8:	70 05       	cpc	r23, r0
   1ceba:	80 05       	cpc	r24, r0
   1cebc:	90 05       	cpc	r25, r0
   1cebe:	08 95       	ret

0001cec0 <__umulhisi3>:
   1cec0:	a2 9f       	mul	r26, r18
   1cec2:	b0 01       	movw	r22, r0
   1cec4:	b3 9f       	mul	r27, r19
   1cec6:	c0 01       	movw	r24, r0
   1cec8:	a3 9f       	mul	r26, r19
   1ceca:	70 0d       	add	r23, r0
   1cecc:	81 1d       	adc	r24, r1
   1cece:	11 24       	eor	r1, r1
   1ced0:	91 1d       	adc	r25, r1
   1ced2:	b2 9f       	mul	r27, r18
   1ced4:	70 0d       	add	r23, r0
   1ced6:	81 1d       	adc	r24, r1
   1ced8:	11 24       	eor	r1, r1
   1ceda:	91 1d       	adc	r25, r1
   1cedc:	08 95       	ret

0001cede <__subsf3>:
   1cede:	50 58       	subi	r21, 0x80	; 128

0001cee0 <__addsf3>:
   1cee0:	bb 27       	eor	r27, r27
   1cee2:	aa 27       	eor	r26, r26
   1cee4:	0e d0       	rcall	.+28     	; 0x1cf02 <__addsf3x>
   1cee6:	75 c1       	rjmp	.+746    	; 0x1d1d2 <__fp_round>
   1cee8:	66 d1       	rcall	.+716    	; 0x1d1b6 <__fp_pscA>
   1ceea:	30 f0       	brcs	.+12     	; 0x1cef8 <__addsf3+0x18>
   1ceec:	6b d1       	rcall	.+726    	; 0x1d1c4 <__fp_pscB>
   1ceee:	20 f0       	brcs	.+8      	; 0x1cef8 <__addsf3+0x18>
   1cef0:	31 f4       	brne	.+12     	; 0x1cefe <__addsf3+0x1e>
   1cef2:	9f 3f       	cpi	r25, 0xFF	; 255
   1cef4:	11 f4       	brne	.+4      	; 0x1cefa <__addsf3+0x1a>
   1cef6:	1e f4       	brtc	.+6      	; 0x1cefe <__addsf3+0x1e>
   1cef8:	5b c1       	rjmp	.+694    	; 0x1d1b0 <__fp_nan>
   1cefa:	0e f4       	brtc	.+2      	; 0x1cefe <__addsf3+0x1e>
   1cefc:	e0 95       	com	r30
   1cefe:	e7 fb       	bst	r30, 7
   1cf00:	51 c1       	rjmp	.+674    	; 0x1d1a4 <__fp_inf>

0001cf02 <__addsf3x>:
   1cf02:	e9 2f       	mov	r30, r25
   1cf04:	77 d1       	rcall	.+750    	; 0x1d1f4 <__fp_split3>
   1cf06:	80 f3       	brcs	.-32     	; 0x1cee8 <__addsf3+0x8>
   1cf08:	ba 17       	cp	r27, r26
   1cf0a:	62 07       	cpc	r22, r18
   1cf0c:	73 07       	cpc	r23, r19
   1cf0e:	84 07       	cpc	r24, r20
   1cf10:	95 07       	cpc	r25, r21
   1cf12:	18 f0       	brcs	.+6      	; 0x1cf1a <__addsf3x+0x18>
   1cf14:	71 f4       	brne	.+28     	; 0x1cf32 <__addsf3x+0x30>
   1cf16:	9e f5       	brtc	.+102    	; 0x1cf7e <__addsf3x+0x7c>
   1cf18:	8f c1       	rjmp	.+798    	; 0x1d238 <__fp_zero>
   1cf1a:	0e f4       	brtc	.+2      	; 0x1cf1e <__addsf3x+0x1c>
   1cf1c:	e0 95       	com	r30
   1cf1e:	0b 2e       	mov	r0, r27
   1cf20:	ba 2f       	mov	r27, r26
   1cf22:	a0 2d       	mov	r26, r0
   1cf24:	0b 01       	movw	r0, r22
   1cf26:	b9 01       	movw	r22, r18
   1cf28:	90 01       	movw	r18, r0
   1cf2a:	0c 01       	movw	r0, r24
   1cf2c:	ca 01       	movw	r24, r20
   1cf2e:	a0 01       	movw	r20, r0
   1cf30:	11 24       	eor	r1, r1
   1cf32:	ff 27       	eor	r31, r31
   1cf34:	59 1b       	sub	r21, r25
   1cf36:	99 f0       	breq	.+38     	; 0x1cf5e <__addsf3x+0x5c>
   1cf38:	59 3f       	cpi	r21, 0xF9	; 249
   1cf3a:	50 f4       	brcc	.+20     	; 0x1cf50 <__addsf3x+0x4e>
   1cf3c:	50 3e       	cpi	r21, 0xE0	; 224
   1cf3e:	68 f1       	brcs	.+90     	; 0x1cf9a <__addsf3x+0x98>
   1cf40:	1a 16       	cp	r1, r26
   1cf42:	f0 40       	sbci	r31, 0x00	; 0
   1cf44:	a2 2f       	mov	r26, r18
   1cf46:	23 2f       	mov	r18, r19
   1cf48:	34 2f       	mov	r19, r20
   1cf4a:	44 27       	eor	r20, r20
   1cf4c:	58 5f       	subi	r21, 0xF8	; 248
   1cf4e:	f3 cf       	rjmp	.-26     	; 0x1cf36 <__addsf3x+0x34>
   1cf50:	46 95       	lsr	r20
   1cf52:	37 95       	ror	r19
   1cf54:	27 95       	ror	r18
   1cf56:	a7 95       	ror	r26
   1cf58:	f0 40       	sbci	r31, 0x00	; 0
   1cf5a:	53 95       	inc	r21
   1cf5c:	c9 f7       	brne	.-14     	; 0x1cf50 <__addsf3x+0x4e>
   1cf5e:	7e f4       	brtc	.+30     	; 0x1cf7e <__addsf3x+0x7c>
   1cf60:	1f 16       	cp	r1, r31
   1cf62:	ba 0b       	sbc	r27, r26
   1cf64:	62 0b       	sbc	r22, r18
   1cf66:	73 0b       	sbc	r23, r19
   1cf68:	84 0b       	sbc	r24, r20
   1cf6a:	ba f0       	brmi	.+46     	; 0x1cf9a <__addsf3x+0x98>
   1cf6c:	91 50       	subi	r25, 0x01	; 1
   1cf6e:	a1 f0       	breq	.+40     	; 0x1cf98 <__addsf3x+0x96>
   1cf70:	ff 0f       	add	r31, r31
   1cf72:	bb 1f       	adc	r27, r27
   1cf74:	66 1f       	adc	r22, r22
   1cf76:	77 1f       	adc	r23, r23
   1cf78:	88 1f       	adc	r24, r24
   1cf7a:	c2 f7       	brpl	.-16     	; 0x1cf6c <__addsf3x+0x6a>
   1cf7c:	0e c0       	rjmp	.+28     	; 0x1cf9a <__addsf3x+0x98>
   1cf7e:	ba 0f       	add	r27, r26
   1cf80:	62 1f       	adc	r22, r18
   1cf82:	73 1f       	adc	r23, r19
   1cf84:	84 1f       	adc	r24, r20
   1cf86:	48 f4       	brcc	.+18     	; 0x1cf9a <__addsf3x+0x98>
   1cf88:	87 95       	ror	r24
   1cf8a:	77 95       	ror	r23
   1cf8c:	67 95       	ror	r22
   1cf8e:	b7 95       	ror	r27
   1cf90:	f7 95       	ror	r31
   1cf92:	9e 3f       	cpi	r25, 0xFE	; 254
   1cf94:	08 f0       	brcs	.+2      	; 0x1cf98 <__addsf3x+0x96>
   1cf96:	b3 cf       	rjmp	.-154    	; 0x1cefe <__addsf3+0x1e>
   1cf98:	93 95       	inc	r25
   1cf9a:	88 0f       	add	r24, r24
   1cf9c:	08 f0       	brcs	.+2      	; 0x1cfa0 <__addsf3x+0x9e>
   1cf9e:	99 27       	eor	r25, r25
   1cfa0:	ee 0f       	add	r30, r30
   1cfa2:	97 95       	ror	r25
   1cfa4:	87 95       	ror	r24
   1cfa6:	08 95       	ret

0001cfa8 <__cmpsf2>:
   1cfa8:	d9 d0       	rcall	.+434    	; 0x1d15c <__fp_cmp>
   1cfaa:	08 f4       	brcc	.+2      	; 0x1cfae <__cmpsf2+0x6>
   1cfac:	81 e0       	ldi	r24, 0x01	; 1
   1cfae:	08 95       	ret

0001cfb0 <__divsf3>:
   1cfb0:	0c d0       	rcall	.+24     	; 0x1cfca <__divsf3x>
   1cfb2:	0f c1       	rjmp	.+542    	; 0x1d1d2 <__fp_round>
   1cfb4:	07 d1       	rcall	.+526    	; 0x1d1c4 <__fp_pscB>
   1cfb6:	40 f0       	brcs	.+16     	; 0x1cfc8 <__divsf3+0x18>
   1cfb8:	fe d0       	rcall	.+508    	; 0x1d1b6 <__fp_pscA>
   1cfba:	30 f0       	brcs	.+12     	; 0x1cfc8 <__divsf3+0x18>
   1cfbc:	21 f4       	brne	.+8      	; 0x1cfc6 <__divsf3+0x16>
   1cfbe:	5f 3f       	cpi	r21, 0xFF	; 255
   1cfc0:	19 f0       	breq	.+6      	; 0x1cfc8 <__divsf3+0x18>
   1cfc2:	f0 c0       	rjmp	.+480    	; 0x1d1a4 <__fp_inf>
   1cfc4:	51 11       	cpse	r21, r1
   1cfc6:	39 c1       	rjmp	.+626    	; 0x1d23a <__fp_szero>
   1cfc8:	f3 c0       	rjmp	.+486    	; 0x1d1b0 <__fp_nan>

0001cfca <__divsf3x>:
   1cfca:	14 d1       	rcall	.+552    	; 0x1d1f4 <__fp_split3>
   1cfcc:	98 f3       	brcs	.-26     	; 0x1cfb4 <__divsf3+0x4>

0001cfce <__divsf3_pse>:
   1cfce:	99 23       	and	r25, r25
   1cfd0:	c9 f3       	breq	.-14     	; 0x1cfc4 <__divsf3+0x14>
   1cfd2:	55 23       	and	r21, r21
   1cfd4:	b1 f3       	breq	.-20     	; 0x1cfc2 <__divsf3+0x12>
   1cfd6:	95 1b       	sub	r25, r21
   1cfd8:	55 0b       	sbc	r21, r21
   1cfda:	bb 27       	eor	r27, r27
   1cfdc:	aa 27       	eor	r26, r26
   1cfde:	62 17       	cp	r22, r18
   1cfe0:	73 07       	cpc	r23, r19
   1cfe2:	84 07       	cpc	r24, r20
   1cfe4:	38 f0       	brcs	.+14     	; 0x1cff4 <__divsf3_pse+0x26>
   1cfe6:	9f 5f       	subi	r25, 0xFF	; 255
   1cfe8:	5f 4f       	sbci	r21, 0xFF	; 255
   1cfea:	22 0f       	add	r18, r18
   1cfec:	33 1f       	adc	r19, r19
   1cfee:	44 1f       	adc	r20, r20
   1cff0:	aa 1f       	adc	r26, r26
   1cff2:	a9 f3       	breq	.-22     	; 0x1cfde <__divsf3_pse+0x10>
   1cff4:	33 d0       	rcall	.+102    	; 0x1d05c <__divsf3_pse+0x8e>
   1cff6:	0e 2e       	mov	r0, r30
   1cff8:	3a f0       	brmi	.+14     	; 0x1d008 <__divsf3_pse+0x3a>
   1cffa:	e0 e8       	ldi	r30, 0x80	; 128
   1cffc:	30 d0       	rcall	.+96     	; 0x1d05e <__divsf3_pse+0x90>
   1cffe:	91 50       	subi	r25, 0x01	; 1
   1d000:	50 40       	sbci	r21, 0x00	; 0
   1d002:	e6 95       	lsr	r30
   1d004:	00 1c       	adc	r0, r0
   1d006:	ca f7       	brpl	.-14     	; 0x1cffa <__divsf3_pse+0x2c>
   1d008:	29 d0       	rcall	.+82     	; 0x1d05c <__divsf3_pse+0x8e>
   1d00a:	fe 2f       	mov	r31, r30
   1d00c:	27 d0       	rcall	.+78     	; 0x1d05c <__divsf3_pse+0x8e>
   1d00e:	66 0f       	add	r22, r22
   1d010:	77 1f       	adc	r23, r23
   1d012:	88 1f       	adc	r24, r24
   1d014:	bb 1f       	adc	r27, r27
   1d016:	26 17       	cp	r18, r22
   1d018:	37 07       	cpc	r19, r23
   1d01a:	48 07       	cpc	r20, r24
   1d01c:	ab 07       	cpc	r26, r27
   1d01e:	b0 e8       	ldi	r27, 0x80	; 128
   1d020:	09 f0       	breq	.+2      	; 0x1d024 <__divsf3_pse+0x56>
   1d022:	bb 0b       	sbc	r27, r27
   1d024:	80 2d       	mov	r24, r0
   1d026:	bf 01       	movw	r22, r30
   1d028:	ff 27       	eor	r31, r31
   1d02a:	93 58       	subi	r25, 0x83	; 131
   1d02c:	5f 4f       	sbci	r21, 0xFF	; 255
   1d02e:	2a f0       	brmi	.+10     	; 0x1d03a <__divsf3_pse+0x6c>
   1d030:	9e 3f       	cpi	r25, 0xFE	; 254
   1d032:	51 05       	cpc	r21, r1
   1d034:	68 f0       	brcs	.+26     	; 0x1d050 <__divsf3_pse+0x82>
   1d036:	b6 c0       	rjmp	.+364    	; 0x1d1a4 <__fp_inf>
   1d038:	00 c1       	rjmp	.+512    	; 0x1d23a <__fp_szero>
   1d03a:	5f 3f       	cpi	r21, 0xFF	; 255
   1d03c:	ec f3       	brlt	.-6      	; 0x1d038 <__divsf3_pse+0x6a>
   1d03e:	98 3e       	cpi	r25, 0xE8	; 232
   1d040:	dc f3       	brlt	.-10     	; 0x1d038 <__divsf3_pse+0x6a>
   1d042:	86 95       	lsr	r24
   1d044:	77 95       	ror	r23
   1d046:	67 95       	ror	r22
   1d048:	b7 95       	ror	r27
   1d04a:	f7 95       	ror	r31
   1d04c:	9f 5f       	subi	r25, 0xFF	; 255
   1d04e:	c9 f7       	brne	.-14     	; 0x1d042 <__divsf3_pse+0x74>
   1d050:	88 0f       	add	r24, r24
   1d052:	91 1d       	adc	r25, r1
   1d054:	96 95       	lsr	r25
   1d056:	87 95       	ror	r24
   1d058:	97 f9       	bld	r25, 7
   1d05a:	08 95       	ret
   1d05c:	e1 e0       	ldi	r30, 0x01	; 1
   1d05e:	66 0f       	add	r22, r22
   1d060:	77 1f       	adc	r23, r23
   1d062:	88 1f       	adc	r24, r24
   1d064:	bb 1f       	adc	r27, r27
   1d066:	62 17       	cp	r22, r18
   1d068:	73 07       	cpc	r23, r19
   1d06a:	84 07       	cpc	r24, r20
   1d06c:	ba 07       	cpc	r27, r26
   1d06e:	20 f0       	brcs	.+8      	; 0x1d078 <__divsf3_pse+0xaa>
   1d070:	62 1b       	sub	r22, r18
   1d072:	73 0b       	sbc	r23, r19
   1d074:	84 0b       	sbc	r24, r20
   1d076:	ba 0b       	sbc	r27, r26
   1d078:	ee 1f       	adc	r30, r30
   1d07a:	88 f7       	brcc	.-30     	; 0x1d05e <__divsf3_pse+0x90>
   1d07c:	e0 95       	com	r30
   1d07e:	08 95       	ret

0001d080 <__fixsfsi>:
   1d080:	04 d0       	rcall	.+8      	; 0x1d08a <__fixunssfsi>
   1d082:	68 94       	set
   1d084:	b1 11       	cpse	r27, r1
   1d086:	d9 c0       	rjmp	.+434    	; 0x1d23a <__fp_szero>
   1d088:	08 95       	ret

0001d08a <__fixunssfsi>:
   1d08a:	bc d0       	rcall	.+376    	; 0x1d204 <__fp_splitA>
   1d08c:	88 f0       	brcs	.+34     	; 0x1d0b0 <__fixunssfsi+0x26>
   1d08e:	9f 57       	subi	r25, 0x7F	; 127
   1d090:	90 f0       	brcs	.+36     	; 0x1d0b6 <__fixunssfsi+0x2c>
   1d092:	b9 2f       	mov	r27, r25
   1d094:	99 27       	eor	r25, r25
   1d096:	b7 51       	subi	r27, 0x17	; 23
   1d098:	a0 f0       	brcs	.+40     	; 0x1d0c2 <__fixunssfsi+0x38>
   1d09a:	d1 f0       	breq	.+52     	; 0x1d0d0 <__fixunssfsi+0x46>
   1d09c:	66 0f       	add	r22, r22
   1d09e:	77 1f       	adc	r23, r23
   1d0a0:	88 1f       	adc	r24, r24
   1d0a2:	99 1f       	adc	r25, r25
   1d0a4:	1a f0       	brmi	.+6      	; 0x1d0ac <__fixunssfsi+0x22>
   1d0a6:	ba 95       	dec	r27
   1d0a8:	c9 f7       	brne	.-14     	; 0x1d09c <__fixunssfsi+0x12>
   1d0aa:	12 c0       	rjmp	.+36     	; 0x1d0d0 <__fixunssfsi+0x46>
   1d0ac:	b1 30       	cpi	r27, 0x01	; 1
   1d0ae:	81 f0       	breq	.+32     	; 0x1d0d0 <__fixunssfsi+0x46>
   1d0b0:	c3 d0       	rcall	.+390    	; 0x1d238 <__fp_zero>
   1d0b2:	b1 e0       	ldi	r27, 0x01	; 1
   1d0b4:	08 95       	ret
   1d0b6:	c0 c0       	rjmp	.+384    	; 0x1d238 <__fp_zero>
   1d0b8:	67 2f       	mov	r22, r23
   1d0ba:	78 2f       	mov	r23, r24
   1d0bc:	88 27       	eor	r24, r24
   1d0be:	b8 5f       	subi	r27, 0xF8	; 248
   1d0c0:	39 f0       	breq	.+14     	; 0x1d0d0 <__fixunssfsi+0x46>
   1d0c2:	b9 3f       	cpi	r27, 0xF9	; 249
   1d0c4:	cc f3       	brlt	.-14     	; 0x1d0b8 <__fixunssfsi+0x2e>
   1d0c6:	86 95       	lsr	r24
   1d0c8:	77 95       	ror	r23
   1d0ca:	67 95       	ror	r22
   1d0cc:	b3 95       	inc	r27
   1d0ce:	d9 f7       	brne	.-10     	; 0x1d0c6 <__fixunssfsi+0x3c>
   1d0d0:	3e f4       	brtc	.+14     	; 0x1d0e0 <__fixunssfsi+0x56>
   1d0d2:	90 95       	com	r25
   1d0d4:	80 95       	com	r24
   1d0d6:	70 95       	com	r23
   1d0d8:	61 95       	neg	r22
   1d0da:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0dc:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0de:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0e0:	08 95       	ret

0001d0e2 <__floatunsisf>:
   1d0e2:	e8 94       	clt
   1d0e4:	09 c0       	rjmp	.+18     	; 0x1d0f8 <__floatsisf+0x12>

0001d0e6 <__floatsisf>:
   1d0e6:	97 fb       	bst	r25, 7
   1d0e8:	3e f4       	brtc	.+14     	; 0x1d0f8 <__floatsisf+0x12>
   1d0ea:	90 95       	com	r25
   1d0ec:	80 95       	com	r24
   1d0ee:	70 95       	com	r23
   1d0f0:	61 95       	neg	r22
   1d0f2:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0f4:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0f6:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0f8:	99 23       	and	r25, r25
   1d0fa:	a9 f0       	breq	.+42     	; 0x1d126 <__floatsisf+0x40>
   1d0fc:	f9 2f       	mov	r31, r25
   1d0fe:	96 e9       	ldi	r25, 0x96	; 150
   1d100:	bb 27       	eor	r27, r27
   1d102:	93 95       	inc	r25
   1d104:	f6 95       	lsr	r31
   1d106:	87 95       	ror	r24
   1d108:	77 95       	ror	r23
   1d10a:	67 95       	ror	r22
   1d10c:	b7 95       	ror	r27
   1d10e:	f1 11       	cpse	r31, r1
   1d110:	f8 cf       	rjmp	.-16     	; 0x1d102 <__floatsisf+0x1c>
   1d112:	fa f4       	brpl	.+62     	; 0x1d152 <__floatsisf+0x6c>
   1d114:	bb 0f       	add	r27, r27
   1d116:	11 f4       	brne	.+4      	; 0x1d11c <__floatsisf+0x36>
   1d118:	60 ff       	sbrs	r22, 0
   1d11a:	1b c0       	rjmp	.+54     	; 0x1d152 <__floatsisf+0x6c>
   1d11c:	6f 5f       	subi	r22, 0xFF	; 255
   1d11e:	7f 4f       	sbci	r23, 0xFF	; 255
   1d120:	8f 4f       	sbci	r24, 0xFF	; 255
   1d122:	9f 4f       	sbci	r25, 0xFF	; 255
   1d124:	16 c0       	rjmp	.+44     	; 0x1d152 <__floatsisf+0x6c>
   1d126:	88 23       	and	r24, r24
   1d128:	11 f0       	breq	.+4      	; 0x1d12e <__floatsisf+0x48>
   1d12a:	96 e9       	ldi	r25, 0x96	; 150
   1d12c:	11 c0       	rjmp	.+34     	; 0x1d150 <__floatsisf+0x6a>
   1d12e:	77 23       	and	r23, r23
   1d130:	21 f0       	breq	.+8      	; 0x1d13a <__floatsisf+0x54>
   1d132:	9e e8       	ldi	r25, 0x8E	; 142
   1d134:	87 2f       	mov	r24, r23
   1d136:	76 2f       	mov	r23, r22
   1d138:	05 c0       	rjmp	.+10     	; 0x1d144 <__floatsisf+0x5e>
   1d13a:	66 23       	and	r22, r22
   1d13c:	71 f0       	breq	.+28     	; 0x1d15a <__floatsisf+0x74>
   1d13e:	96 e8       	ldi	r25, 0x86	; 134
   1d140:	86 2f       	mov	r24, r22
   1d142:	70 e0       	ldi	r23, 0x00	; 0
   1d144:	60 e0       	ldi	r22, 0x00	; 0
   1d146:	2a f0       	brmi	.+10     	; 0x1d152 <__floatsisf+0x6c>
   1d148:	9a 95       	dec	r25
   1d14a:	66 0f       	add	r22, r22
   1d14c:	77 1f       	adc	r23, r23
   1d14e:	88 1f       	adc	r24, r24
   1d150:	da f7       	brpl	.-10     	; 0x1d148 <__floatsisf+0x62>
   1d152:	88 0f       	add	r24, r24
   1d154:	96 95       	lsr	r25
   1d156:	87 95       	ror	r24
   1d158:	97 f9       	bld	r25, 7
   1d15a:	08 95       	ret

0001d15c <__fp_cmp>:
   1d15c:	99 0f       	add	r25, r25
   1d15e:	00 08       	sbc	r0, r0
   1d160:	55 0f       	add	r21, r21
   1d162:	aa 0b       	sbc	r26, r26
   1d164:	e0 e8       	ldi	r30, 0x80	; 128
   1d166:	fe ef       	ldi	r31, 0xFE	; 254
   1d168:	16 16       	cp	r1, r22
   1d16a:	17 06       	cpc	r1, r23
   1d16c:	e8 07       	cpc	r30, r24
   1d16e:	f9 07       	cpc	r31, r25
   1d170:	c0 f0       	brcs	.+48     	; 0x1d1a2 <__fp_cmp+0x46>
   1d172:	12 16       	cp	r1, r18
   1d174:	13 06       	cpc	r1, r19
   1d176:	e4 07       	cpc	r30, r20
   1d178:	f5 07       	cpc	r31, r21
   1d17a:	98 f0       	brcs	.+38     	; 0x1d1a2 <__fp_cmp+0x46>
   1d17c:	62 1b       	sub	r22, r18
   1d17e:	73 0b       	sbc	r23, r19
   1d180:	84 0b       	sbc	r24, r20
   1d182:	95 0b       	sbc	r25, r21
   1d184:	39 f4       	brne	.+14     	; 0x1d194 <__fp_cmp+0x38>
   1d186:	0a 26       	eor	r0, r26
   1d188:	61 f0       	breq	.+24     	; 0x1d1a2 <__fp_cmp+0x46>
   1d18a:	23 2b       	or	r18, r19
   1d18c:	24 2b       	or	r18, r20
   1d18e:	25 2b       	or	r18, r21
   1d190:	21 f4       	brne	.+8      	; 0x1d19a <__fp_cmp+0x3e>
   1d192:	08 95       	ret
   1d194:	0a 26       	eor	r0, r26
   1d196:	09 f4       	brne	.+2      	; 0x1d19a <__fp_cmp+0x3e>
   1d198:	a1 40       	sbci	r26, 0x01	; 1
   1d19a:	a6 95       	lsr	r26
   1d19c:	8f ef       	ldi	r24, 0xFF	; 255
   1d19e:	81 1d       	adc	r24, r1
   1d1a0:	81 1d       	adc	r24, r1
   1d1a2:	08 95       	ret

0001d1a4 <__fp_inf>:
   1d1a4:	97 f9       	bld	r25, 7
   1d1a6:	9f 67       	ori	r25, 0x7F	; 127
   1d1a8:	80 e8       	ldi	r24, 0x80	; 128
   1d1aa:	70 e0       	ldi	r23, 0x00	; 0
   1d1ac:	60 e0       	ldi	r22, 0x00	; 0
   1d1ae:	08 95       	ret

0001d1b0 <__fp_nan>:
   1d1b0:	9f ef       	ldi	r25, 0xFF	; 255
   1d1b2:	80 ec       	ldi	r24, 0xC0	; 192
   1d1b4:	08 95       	ret

0001d1b6 <__fp_pscA>:
   1d1b6:	00 24       	eor	r0, r0
   1d1b8:	0a 94       	dec	r0
   1d1ba:	16 16       	cp	r1, r22
   1d1bc:	17 06       	cpc	r1, r23
   1d1be:	18 06       	cpc	r1, r24
   1d1c0:	09 06       	cpc	r0, r25
   1d1c2:	08 95       	ret

0001d1c4 <__fp_pscB>:
   1d1c4:	00 24       	eor	r0, r0
   1d1c6:	0a 94       	dec	r0
   1d1c8:	12 16       	cp	r1, r18
   1d1ca:	13 06       	cpc	r1, r19
   1d1cc:	14 06       	cpc	r1, r20
   1d1ce:	05 06       	cpc	r0, r21
   1d1d0:	08 95       	ret

0001d1d2 <__fp_round>:
   1d1d2:	09 2e       	mov	r0, r25
   1d1d4:	03 94       	inc	r0
   1d1d6:	00 0c       	add	r0, r0
   1d1d8:	11 f4       	brne	.+4      	; 0x1d1de <__fp_round+0xc>
   1d1da:	88 23       	and	r24, r24
   1d1dc:	52 f0       	brmi	.+20     	; 0x1d1f2 <__fp_round+0x20>
   1d1de:	bb 0f       	add	r27, r27
   1d1e0:	40 f4       	brcc	.+16     	; 0x1d1f2 <__fp_round+0x20>
   1d1e2:	bf 2b       	or	r27, r31
   1d1e4:	11 f4       	brne	.+4      	; 0x1d1ea <__fp_round+0x18>
   1d1e6:	60 ff       	sbrs	r22, 0
   1d1e8:	04 c0       	rjmp	.+8      	; 0x1d1f2 <__fp_round+0x20>
   1d1ea:	6f 5f       	subi	r22, 0xFF	; 255
   1d1ec:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1ee:	8f 4f       	sbci	r24, 0xFF	; 255
   1d1f0:	9f 4f       	sbci	r25, 0xFF	; 255
   1d1f2:	08 95       	ret

0001d1f4 <__fp_split3>:
   1d1f4:	57 fd       	sbrc	r21, 7
   1d1f6:	90 58       	subi	r25, 0x80	; 128
   1d1f8:	44 0f       	add	r20, r20
   1d1fa:	55 1f       	adc	r21, r21
   1d1fc:	59 f0       	breq	.+22     	; 0x1d214 <__fp_splitA+0x10>
   1d1fe:	5f 3f       	cpi	r21, 0xFF	; 255
   1d200:	71 f0       	breq	.+28     	; 0x1d21e <__fp_splitA+0x1a>
   1d202:	47 95       	ror	r20

0001d204 <__fp_splitA>:
   1d204:	88 0f       	add	r24, r24
   1d206:	97 fb       	bst	r25, 7
   1d208:	99 1f       	adc	r25, r25
   1d20a:	61 f0       	breq	.+24     	; 0x1d224 <__fp_splitA+0x20>
   1d20c:	9f 3f       	cpi	r25, 0xFF	; 255
   1d20e:	79 f0       	breq	.+30     	; 0x1d22e <__fp_splitA+0x2a>
   1d210:	87 95       	ror	r24
   1d212:	08 95       	ret
   1d214:	12 16       	cp	r1, r18
   1d216:	13 06       	cpc	r1, r19
   1d218:	14 06       	cpc	r1, r20
   1d21a:	55 1f       	adc	r21, r21
   1d21c:	f2 cf       	rjmp	.-28     	; 0x1d202 <__fp_split3+0xe>
   1d21e:	46 95       	lsr	r20
   1d220:	f1 df       	rcall	.-30     	; 0x1d204 <__fp_splitA>
   1d222:	08 c0       	rjmp	.+16     	; 0x1d234 <__fp_splitA+0x30>
   1d224:	16 16       	cp	r1, r22
   1d226:	17 06       	cpc	r1, r23
   1d228:	18 06       	cpc	r1, r24
   1d22a:	99 1f       	adc	r25, r25
   1d22c:	f1 cf       	rjmp	.-30     	; 0x1d210 <__fp_splitA+0xc>
   1d22e:	86 95       	lsr	r24
   1d230:	71 05       	cpc	r23, r1
   1d232:	61 05       	cpc	r22, r1
   1d234:	08 94       	sec
   1d236:	08 95       	ret

0001d238 <__fp_zero>:
   1d238:	e8 94       	clt

0001d23a <__fp_szero>:
   1d23a:	bb 27       	eor	r27, r27
   1d23c:	66 27       	eor	r22, r22
   1d23e:	77 27       	eor	r23, r23
   1d240:	cb 01       	movw	r24, r22
   1d242:	97 f9       	bld	r25, 7
   1d244:	08 95       	ret

0001d246 <__gesf2>:
   1d246:	8a df       	rcall	.-236    	; 0x1d15c <__fp_cmp>
   1d248:	08 f4       	brcc	.+2      	; 0x1d24c <__gesf2+0x6>
   1d24a:	8f ef       	ldi	r24, 0xFF	; 255
   1d24c:	08 95       	ret

0001d24e <__mulsf3>:
   1d24e:	0b d0       	rcall	.+22     	; 0x1d266 <__mulsf3x>
   1d250:	c0 cf       	rjmp	.-128    	; 0x1d1d2 <__fp_round>
   1d252:	b1 df       	rcall	.-158    	; 0x1d1b6 <__fp_pscA>
   1d254:	28 f0       	brcs	.+10     	; 0x1d260 <__mulsf3+0x12>
   1d256:	b6 df       	rcall	.-148    	; 0x1d1c4 <__fp_pscB>
   1d258:	18 f0       	brcs	.+6      	; 0x1d260 <__mulsf3+0x12>
   1d25a:	95 23       	and	r25, r21
   1d25c:	09 f0       	breq	.+2      	; 0x1d260 <__mulsf3+0x12>
   1d25e:	a2 cf       	rjmp	.-188    	; 0x1d1a4 <__fp_inf>
   1d260:	a7 cf       	rjmp	.-178    	; 0x1d1b0 <__fp_nan>
   1d262:	11 24       	eor	r1, r1
   1d264:	ea cf       	rjmp	.-44     	; 0x1d23a <__fp_szero>

0001d266 <__mulsf3x>:
   1d266:	c6 df       	rcall	.-116    	; 0x1d1f4 <__fp_split3>
   1d268:	a0 f3       	brcs	.-24     	; 0x1d252 <__mulsf3+0x4>

0001d26a <__mulsf3_pse>:
   1d26a:	95 9f       	mul	r25, r21
   1d26c:	d1 f3       	breq	.-12     	; 0x1d262 <__mulsf3+0x14>
   1d26e:	95 0f       	add	r25, r21
   1d270:	50 e0       	ldi	r21, 0x00	; 0
   1d272:	55 1f       	adc	r21, r21
   1d274:	62 9f       	mul	r22, r18
   1d276:	f0 01       	movw	r30, r0
   1d278:	72 9f       	mul	r23, r18
   1d27a:	bb 27       	eor	r27, r27
   1d27c:	f0 0d       	add	r31, r0
   1d27e:	b1 1d       	adc	r27, r1
   1d280:	63 9f       	mul	r22, r19
   1d282:	aa 27       	eor	r26, r26
   1d284:	f0 0d       	add	r31, r0
   1d286:	b1 1d       	adc	r27, r1
   1d288:	aa 1f       	adc	r26, r26
   1d28a:	64 9f       	mul	r22, r20
   1d28c:	66 27       	eor	r22, r22
   1d28e:	b0 0d       	add	r27, r0
   1d290:	a1 1d       	adc	r26, r1
   1d292:	66 1f       	adc	r22, r22
   1d294:	82 9f       	mul	r24, r18
   1d296:	22 27       	eor	r18, r18
   1d298:	b0 0d       	add	r27, r0
   1d29a:	a1 1d       	adc	r26, r1
   1d29c:	62 1f       	adc	r22, r18
   1d29e:	73 9f       	mul	r23, r19
   1d2a0:	b0 0d       	add	r27, r0
   1d2a2:	a1 1d       	adc	r26, r1
   1d2a4:	62 1f       	adc	r22, r18
   1d2a6:	83 9f       	mul	r24, r19
   1d2a8:	a0 0d       	add	r26, r0
   1d2aa:	61 1d       	adc	r22, r1
   1d2ac:	22 1f       	adc	r18, r18
   1d2ae:	74 9f       	mul	r23, r20
   1d2b0:	33 27       	eor	r19, r19
   1d2b2:	a0 0d       	add	r26, r0
   1d2b4:	61 1d       	adc	r22, r1
   1d2b6:	23 1f       	adc	r18, r19
   1d2b8:	84 9f       	mul	r24, r20
   1d2ba:	60 0d       	add	r22, r0
   1d2bc:	21 1d       	adc	r18, r1
   1d2be:	82 2f       	mov	r24, r18
   1d2c0:	76 2f       	mov	r23, r22
   1d2c2:	6a 2f       	mov	r22, r26
   1d2c4:	11 24       	eor	r1, r1
   1d2c6:	9f 57       	subi	r25, 0x7F	; 127
   1d2c8:	50 40       	sbci	r21, 0x00	; 0
   1d2ca:	8a f0       	brmi	.+34     	; 0x1d2ee <__mulsf3_pse+0x84>
   1d2cc:	e1 f0       	breq	.+56     	; 0x1d306 <__mulsf3_pse+0x9c>
   1d2ce:	88 23       	and	r24, r24
   1d2d0:	4a f0       	brmi	.+18     	; 0x1d2e4 <__mulsf3_pse+0x7a>
   1d2d2:	ee 0f       	add	r30, r30
   1d2d4:	ff 1f       	adc	r31, r31
   1d2d6:	bb 1f       	adc	r27, r27
   1d2d8:	66 1f       	adc	r22, r22
   1d2da:	77 1f       	adc	r23, r23
   1d2dc:	88 1f       	adc	r24, r24
   1d2de:	91 50       	subi	r25, 0x01	; 1
   1d2e0:	50 40       	sbci	r21, 0x00	; 0
   1d2e2:	a9 f7       	brne	.-22     	; 0x1d2ce <__mulsf3_pse+0x64>
   1d2e4:	9e 3f       	cpi	r25, 0xFE	; 254
   1d2e6:	51 05       	cpc	r21, r1
   1d2e8:	70 f0       	brcs	.+28     	; 0x1d306 <__mulsf3_pse+0x9c>
   1d2ea:	5c cf       	rjmp	.-328    	; 0x1d1a4 <__fp_inf>
   1d2ec:	a6 cf       	rjmp	.-180    	; 0x1d23a <__fp_szero>
   1d2ee:	5f 3f       	cpi	r21, 0xFF	; 255
   1d2f0:	ec f3       	brlt	.-6      	; 0x1d2ec <__mulsf3_pse+0x82>
   1d2f2:	98 3e       	cpi	r25, 0xE8	; 232
   1d2f4:	dc f3       	brlt	.-10     	; 0x1d2ec <__mulsf3_pse+0x82>
   1d2f6:	86 95       	lsr	r24
   1d2f8:	77 95       	ror	r23
   1d2fa:	67 95       	ror	r22
   1d2fc:	b7 95       	ror	r27
   1d2fe:	f7 95       	ror	r31
   1d300:	e7 95       	ror	r30
   1d302:	9f 5f       	subi	r25, 0xFF	; 255
   1d304:	c1 f7       	brne	.-16     	; 0x1d2f6 <__mulsf3_pse+0x8c>
   1d306:	fe 2b       	or	r31, r30
   1d308:	88 0f       	add	r24, r24
   1d30a:	91 1d       	adc	r25, r1
   1d30c:	96 95       	lsr	r25
   1d30e:	87 95       	ror	r24
   1d310:	97 f9       	bld	r25, 7
   1d312:	08 95       	ret

0001d314 <round>:
   1d314:	77 df       	rcall	.-274    	; 0x1d204 <__fp_splitA>
   1d316:	e0 f0       	brcs	.+56     	; 0x1d350 <round+0x3c>
   1d318:	9e 37       	cpi	r25, 0x7E	; 126
   1d31a:	d8 f0       	brcs	.+54     	; 0x1d352 <round+0x3e>
   1d31c:	96 39       	cpi	r25, 0x96	; 150
   1d31e:	b8 f4       	brcc	.+46     	; 0x1d34e <round+0x3a>
   1d320:	9e 38       	cpi	r25, 0x8E	; 142
   1d322:	48 f4       	brcc	.+18     	; 0x1d336 <round+0x22>
   1d324:	67 2f       	mov	r22, r23
   1d326:	78 2f       	mov	r23, r24
   1d328:	88 27       	eor	r24, r24
   1d32a:	98 5f       	subi	r25, 0xF8	; 248
   1d32c:	f9 cf       	rjmp	.-14     	; 0x1d320 <round+0xc>
   1d32e:	86 95       	lsr	r24
   1d330:	77 95       	ror	r23
   1d332:	67 95       	ror	r22
   1d334:	93 95       	inc	r25
   1d336:	95 39       	cpi	r25, 0x95	; 149
   1d338:	d0 f3       	brcs	.-12     	; 0x1d32e <round+0x1a>
   1d33a:	b6 2f       	mov	r27, r22
   1d33c:	b1 70       	andi	r27, 0x01	; 1
   1d33e:	6b 0f       	add	r22, r27
   1d340:	71 1d       	adc	r23, r1
   1d342:	81 1d       	adc	r24, r1
   1d344:	20 f4       	brcc	.+8      	; 0x1d34e <round+0x3a>
   1d346:	87 95       	ror	r24
   1d348:	77 95       	ror	r23
   1d34a:	67 95       	ror	r22
   1d34c:	93 95       	inc	r25
   1d34e:	02 c0       	rjmp	.+4      	; 0x1d354 <__fp_mintl>
   1d350:	1c c0       	rjmp	.+56     	; 0x1d38a <__fp_mpack>
   1d352:	73 cf       	rjmp	.-282    	; 0x1d23a <__fp_szero>

0001d354 <__fp_mintl>:
   1d354:	88 23       	and	r24, r24
   1d356:	71 f4       	brne	.+28     	; 0x1d374 <__fp_mintl+0x20>
   1d358:	77 23       	and	r23, r23
   1d35a:	21 f0       	breq	.+8      	; 0x1d364 <__fp_mintl+0x10>
   1d35c:	98 50       	subi	r25, 0x08	; 8
   1d35e:	87 2b       	or	r24, r23
   1d360:	76 2f       	mov	r23, r22
   1d362:	07 c0       	rjmp	.+14     	; 0x1d372 <__fp_mintl+0x1e>
   1d364:	66 23       	and	r22, r22
   1d366:	11 f4       	brne	.+4      	; 0x1d36c <__fp_mintl+0x18>
   1d368:	99 27       	eor	r25, r25
   1d36a:	0d c0       	rjmp	.+26     	; 0x1d386 <__fp_mintl+0x32>
   1d36c:	90 51       	subi	r25, 0x10	; 16
   1d36e:	86 2b       	or	r24, r22
   1d370:	70 e0       	ldi	r23, 0x00	; 0
   1d372:	60 e0       	ldi	r22, 0x00	; 0
   1d374:	2a f0       	brmi	.+10     	; 0x1d380 <__fp_mintl+0x2c>
   1d376:	9a 95       	dec	r25
   1d378:	66 0f       	add	r22, r22
   1d37a:	77 1f       	adc	r23, r23
   1d37c:	88 1f       	adc	r24, r24
   1d37e:	da f7       	brpl	.-10     	; 0x1d376 <__fp_mintl+0x22>
   1d380:	88 0f       	add	r24, r24
   1d382:	96 95       	lsr	r25
   1d384:	87 95       	ror	r24
   1d386:	97 f9       	bld	r25, 7
   1d388:	08 95       	ret

0001d38a <__fp_mpack>:
   1d38a:	9f 3f       	cpi	r25, 0xFF	; 255
   1d38c:	31 f0       	breq	.+12     	; 0x1d39a <__fp_mpack_finite+0xc>

0001d38e <__fp_mpack_finite>:
   1d38e:	91 50       	subi	r25, 0x01	; 1
   1d390:	20 f4       	brcc	.+8      	; 0x1d39a <__fp_mpack_finite+0xc>
   1d392:	87 95       	ror	r24
   1d394:	77 95       	ror	r23
   1d396:	67 95       	ror	r22
   1d398:	b7 95       	ror	r27
   1d39a:	88 0f       	add	r24, r24
   1d39c:	91 1d       	adc	r25, r1
   1d39e:	96 95       	lsr	r25
   1d3a0:	87 95       	ror	r24
   1d3a2:	97 f9       	bld	r25, 7
   1d3a4:	08 95       	ret

0001d3a6 <calloc>:
   1d3a6:	0f 93       	push	r16
   1d3a8:	1f 93       	push	r17
   1d3aa:	cf 93       	push	r28
   1d3ac:	df 93       	push	r29
   1d3ae:	86 9f       	mul	r24, r22
   1d3b0:	80 01       	movw	r16, r0
   1d3b2:	87 9f       	mul	r24, r23
   1d3b4:	10 0d       	add	r17, r0
   1d3b6:	96 9f       	mul	r25, r22
   1d3b8:	10 0d       	add	r17, r0
   1d3ba:	11 24       	eor	r1, r1
   1d3bc:	c8 01       	movw	r24, r16
   1d3be:	0d d0       	rcall	.+26     	; 0x1d3da <malloc>
   1d3c0:	ec 01       	movw	r28, r24
   1d3c2:	00 97       	sbiw	r24, 0x00	; 0
   1d3c4:	21 f0       	breq	.+8      	; 0x1d3ce <calloc+0x28>
   1d3c6:	a8 01       	movw	r20, r16
   1d3c8:	60 e0       	ldi	r22, 0x00	; 0
   1d3ca:	70 e0       	ldi	r23, 0x00	; 0
   1d3cc:	27 d1       	rcall	.+590    	; 0x1d61c <memset>
   1d3ce:	ce 01       	movw	r24, r28
   1d3d0:	df 91       	pop	r29
   1d3d2:	cf 91       	pop	r28
   1d3d4:	1f 91       	pop	r17
   1d3d6:	0f 91       	pop	r16
   1d3d8:	08 95       	ret

0001d3da <malloc>:
   1d3da:	0f 93       	push	r16
   1d3dc:	1f 93       	push	r17
   1d3de:	cf 93       	push	r28
   1d3e0:	df 93       	push	r29
   1d3e2:	82 30       	cpi	r24, 0x02	; 2
   1d3e4:	91 05       	cpc	r25, r1
   1d3e6:	10 f4       	brcc	.+4      	; 0x1d3ec <malloc+0x12>
   1d3e8:	82 e0       	ldi	r24, 0x02	; 2
   1d3ea:	90 e0       	ldi	r25, 0x00	; 0
   1d3ec:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <__flp>
   1d3f0:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <__flp+0x1>
   1d3f4:	20 e0       	ldi	r18, 0x00	; 0
   1d3f6:	30 e0       	ldi	r19, 0x00	; 0
   1d3f8:	a0 e0       	ldi	r26, 0x00	; 0
   1d3fa:	b0 e0       	ldi	r27, 0x00	; 0
   1d3fc:	30 97       	sbiw	r30, 0x00	; 0
   1d3fe:	19 f1       	breq	.+70     	; 0x1d446 <malloc+0x6c>
   1d400:	40 81       	ld	r20, Z
   1d402:	51 81       	ldd	r21, Z+1	; 0x01
   1d404:	02 81       	ldd	r16, Z+2	; 0x02
   1d406:	13 81       	ldd	r17, Z+3	; 0x03
   1d408:	48 17       	cp	r20, r24
   1d40a:	59 07       	cpc	r21, r25
   1d40c:	c8 f0       	brcs	.+50     	; 0x1d440 <malloc+0x66>
   1d40e:	84 17       	cp	r24, r20
   1d410:	95 07       	cpc	r25, r21
   1d412:	69 f4       	brne	.+26     	; 0x1d42e <malloc+0x54>
   1d414:	10 97       	sbiw	r26, 0x00	; 0
   1d416:	31 f0       	breq	.+12     	; 0x1d424 <malloc+0x4a>
   1d418:	12 96       	adiw	r26, 0x02	; 2
   1d41a:	0c 93       	st	X, r16
   1d41c:	12 97       	sbiw	r26, 0x02	; 2
   1d41e:	13 96       	adiw	r26, 0x03	; 3
   1d420:	1c 93       	st	X, r17
   1d422:	27 c0       	rjmp	.+78     	; 0x1d472 <malloc+0x98>
   1d424:	00 93 2e 20 	sts	0x202E, r16	; 0x80202e <__flp>
   1d428:	10 93 2f 20 	sts	0x202F, r17	; 0x80202f <__flp+0x1>
   1d42c:	22 c0       	rjmp	.+68     	; 0x1d472 <malloc+0x98>
   1d42e:	21 15       	cp	r18, r1
   1d430:	31 05       	cpc	r19, r1
   1d432:	19 f0       	breq	.+6      	; 0x1d43a <malloc+0x60>
   1d434:	42 17       	cp	r20, r18
   1d436:	53 07       	cpc	r21, r19
   1d438:	18 f4       	brcc	.+6      	; 0x1d440 <malloc+0x66>
   1d43a:	9a 01       	movw	r18, r20
   1d43c:	bd 01       	movw	r22, r26
   1d43e:	ef 01       	movw	r28, r30
   1d440:	df 01       	movw	r26, r30
   1d442:	f8 01       	movw	r30, r16
   1d444:	db cf       	rjmp	.-74     	; 0x1d3fc <malloc+0x22>
   1d446:	21 15       	cp	r18, r1
   1d448:	31 05       	cpc	r19, r1
   1d44a:	f9 f0       	breq	.+62     	; 0x1d48a <malloc+0xb0>
   1d44c:	28 1b       	sub	r18, r24
   1d44e:	39 0b       	sbc	r19, r25
   1d450:	24 30       	cpi	r18, 0x04	; 4
   1d452:	31 05       	cpc	r19, r1
   1d454:	80 f4       	brcc	.+32     	; 0x1d476 <malloc+0x9c>
   1d456:	8a 81       	ldd	r24, Y+2	; 0x02
   1d458:	9b 81       	ldd	r25, Y+3	; 0x03
   1d45a:	61 15       	cp	r22, r1
   1d45c:	71 05       	cpc	r23, r1
   1d45e:	21 f0       	breq	.+8      	; 0x1d468 <malloc+0x8e>
   1d460:	fb 01       	movw	r30, r22
   1d462:	93 83       	std	Z+3, r25	; 0x03
   1d464:	82 83       	std	Z+2, r24	; 0x02
   1d466:	04 c0       	rjmp	.+8      	; 0x1d470 <malloc+0x96>
   1d468:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__flp+0x1>
   1d46c:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__flp>
   1d470:	fe 01       	movw	r30, r28
   1d472:	32 96       	adiw	r30, 0x02	; 2
   1d474:	44 c0       	rjmp	.+136    	; 0x1d4fe <malloc+0x124>
   1d476:	fe 01       	movw	r30, r28
   1d478:	e2 0f       	add	r30, r18
   1d47a:	f3 1f       	adc	r31, r19
   1d47c:	81 93       	st	Z+, r24
   1d47e:	91 93       	st	Z+, r25
   1d480:	22 50       	subi	r18, 0x02	; 2
   1d482:	31 09       	sbc	r19, r1
   1d484:	39 83       	std	Y+1, r19	; 0x01
   1d486:	28 83       	st	Y, r18
   1d488:	3a c0       	rjmp	.+116    	; 0x1d4fe <malloc+0x124>
   1d48a:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d48e:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d492:	23 2b       	or	r18, r19
   1d494:	41 f4       	brne	.+16     	; 0x1d4a6 <malloc+0xcc>
   1d496:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d49a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d49e:	30 93 2d 20 	sts	0x202D, r19	; 0x80202d <__brkval+0x1>
   1d4a2:	20 93 2c 20 	sts	0x202C, r18	; 0x80202c <__brkval>
   1d4a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1d4aa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1d4ae:	21 15       	cp	r18, r1
   1d4b0:	31 05       	cpc	r19, r1
   1d4b2:	41 f4       	brne	.+16     	; 0x1d4c4 <malloc+0xea>
   1d4b4:	2d b7       	in	r18, 0x3d	; 61
   1d4b6:	3e b7       	in	r19, 0x3e	; 62
   1d4b8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d4bc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d4c0:	24 1b       	sub	r18, r20
   1d4c2:	35 0b       	sbc	r19, r21
   1d4c4:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <__brkval>
   1d4c8:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <__brkval+0x1>
   1d4cc:	e2 17       	cp	r30, r18
   1d4ce:	f3 07       	cpc	r31, r19
   1d4d0:	a0 f4       	brcc	.+40     	; 0x1d4fa <malloc+0x120>
   1d4d2:	2e 1b       	sub	r18, r30
   1d4d4:	3f 0b       	sbc	r19, r31
   1d4d6:	28 17       	cp	r18, r24
   1d4d8:	39 07       	cpc	r19, r25
   1d4da:	78 f0       	brcs	.+30     	; 0x1d4fa <malloc+0x120>
   1d4dc:	ac 01       	movw	r20, r24
   1d4de:	4e 5f       	subi	r20, 0xFE	; 254
   1d4e0:	5f 4f       	sbci	r21, 0xFF	; 255
   1d4e2:	24 17       	cp	r18, r20
   1d4e4:	35 07       	cpc	r19, r21
   1d4e6:	48 f0       	brcs	.+18     	; 0x1d4fa <malloc+0x120>
   1d4e8:	4e 0f       	add	r20, r30
   1d4ea:	5f 1f       	adc	r21, r31
   1d4ec:	50 93 2d 20 	sts	0x202D, r21	; 0x80202d <__brkval+0x1>
   1d4f0:	40 93 2c 20 	sts	0x202C, r20	; 0x80202c <__brkval>
   1d4f4:	81 93       	st	Z+, r24
   1d4f6:	91 93       	st	Z+, r25
   1d4f8:	02 c0       	rjmp	.+4      	; 0x1d4fe <malloc+0x124>
   1d4fa:	e0 e0       	ldi	r30, 0x00	; 0
   1d4fc:	f0 e0       	ldi	r31, 0x00	; 0
   1d4fe:	cf 01       	movw	r24, r30
   1d500:	df 91       	pop	r29
   1d502:	cf 91       	pop	r28
   1d504:	1f 91       	pop	r17
   1d506:	0f 91       	pop	r16
   1d508:	08 95       	ret

0001d50a <free>:
   1d50a:	cf 93       	push	r28
   1d50c:	df 93       	push	r29
   1d50e:	00 97       	sbiw	r24, 0x00	; 0
   1d510:	09 f4       	brne	.+2      	; 0x1d514 <free+0xa>
   1d512:	81 c0       	rjmp	.+258    	; 0x1d616 <free+0x10c>
   1d514:	fc 01       	movw	r30, r24
   1d516:	32 97       	sbiw	r30, 0x02	; 2
   1d518:	13 82       	std	Z+3, r1	; 0x03
   1d51a:	12 82       	std	Z+2, r1	; 0x02
   1d51c:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <__flp>
   1d520:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <__flp+0x1>
   1d524:	10 97       	sbiw	r26, 0x00	; 0
   1d526:	81 f4       	brne	.+32     	; 0x1d548 <free+0x3e>
   1d528:	20 81       	ld	r18, Z
   1d52a:	31 81       	ldd	r19, Z+1	; 0x01
   1d52c:	82 0f       	add	r24, r18
   1d52e:	93 1f       	adc	r25, r19
   1d530:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d534:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d538:	28 17       	cp	r18, r24
   1d53a:	39 07       	cpc	r19, r25
   1d53c:	51 f5       	brne	.+84     	; 0x1d592 <free+0x88>
   1d53e:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__brkval+0x1>
   1d542:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__brkval>
   1d546:	67 c0       	rjmp	.+206    	; 0x1d616 <free+0x10c>
   1d548:	ed 01       	movw	r28, r26
   1d54a:	20 e0       	ldi	r18, 0x00	; 0
   1d54c:	30 e0       	ldi	r19, 0x00	; 0
   1d54e:	ce 17       	cp	r28, r30
   1d550:	df 07       	cpc	r29, r31
   1d552:	40 f4       	brcc	.+16     	; 0x1d564 <free+0x5a>
   1d554:	4a 81       	ldd	r20, Y+2	; 0x02
   1d556:	5b 81       	ldd	r21, Y+3	; 0x03
   1d558:	9e 01       	movw	r18, r28
   1d55a:	41 15       	cp	r20, r1
   1d55c:	51 05       	cpc	r21, r1
   1d55e:	f1 f0       	breq	.+60     	; 0x1d59c <free+0x92>
   1d560:	ea 01       	movw	r28, r20
   1d562:	f5 cf       	rjmp	.-22     	; 0x1d54e <free+0x44>
   1d564:	d3 83       	std	Z+3, r29	; 0x03
   1d566:	c2 83       	std	Z+2, r28	; 0x02
   1d568:	40 81       	ld	r20, Z
   1d56a:	51 81       	ldd	r21, Z+1	; 0x01
   1d56c:	84 0f       	add	r24, r20
   1d56e:	95 1f       	adc	r25, r21
   1d570:	c8 17       	cp	r28, r24
   1d572:	d9 07       	cpc	r29, r25
   1d574:	59 f4       	brne	.+22     	; 0x1d58c <free+0x82>
   1d576:	88 81       	ld	r24, Y
   1d578:	99 81       	ldd	r25, Y+1	; 0x01
   1d57a:	84 0f       	add	r24, r20
   1d57c:	95 1f       	adc	r25, r21
   1d57e:	02 96       	adiw	r24, 0x02	; 2
   1d580:	91 83       	std	Z+1, r25	; 0x01
   1d582:	80 83       	st	Z, r24
   1d584:	8a 81       	ldd	r24, Y+2	; 0x02
   1d586:	9b 81       	ldd	r25, Y+3	; 0x03
   1d588:	93 83       	std	Z+3, r25	; 0x03
   1d58a:	82 83       	std	Z+2, r24	; 0x02
   1d58c:	21 15       	cp	r18, r1
   1d58e:	31 05       	cpc	r19, r1
   1d590:	29 f4       	brne	.+10     	; 0x1d59c <free+0x92>
   1d592:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__flp+0x1>
   1d596:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__flp>
   1d59a:	3d c0       	rjmp	.+122    	; 0x1d616 <free+0x10c>
   1d59c:	e9 01       	movw	r28, r18
   1d59e:	fb 83       	std	Y+3, r31	; 0x03
   1d5a0:	ea 83       	std	Y+2, r30	; 0x02
   1d5a2:	49 91       	ld	r20, Y+
   1d5a4:	59 91       	ld	r21, Y+
   1d5a6:	c4 0f       	add	r28, r20
   1d5a8:	d5 1f       	adc	r29, r21
   1d5aa:	ec 17       	cp	r30, r28
   1d5ac:	fd 07       	cpc	r31, r29
   1d5ae:	61 f4       	brne	.+24     	; 0x1d5c8 <free+0xbe>
   1d5b0:	80 81       	ld	r24, Z
   1d5b2:	91 81       	ldd	r25, Z+1	; 0x01
   1d5b4:	84 0f       	add	r24, r20
   1d5b6:	95 1f       	adc	r25, r21
   1d5b8:	02 96       	adiw	r24, 0x02	; 2
   1d5ba:	e9 01       	movw	r28, r18
   1d5bc:	99 83       	std	Y+1, r25	; 0x01
   1d5be:	88 83       	st	Y, r24
   1d5c0:	82 81       	ldd	r24, Z+2	; 0x02
   1d5c2:	93 81       	ldd	r25, Z+3	; 0x03
   1d5c4:	9b 83       	std	Y+3, r25	; 0x03
   1d5c6:	8a 83       	std	Y+2, r24	; 0x02
   1d5c8:	e0 e0       	ldi	r30, 0x00	; 0
   1d5ca:	f0 e0       	ldi	r31, 0x00	; 0
   1d5cc:	12 96       	adiw	r26, 0x02	; 2
   1d5ce:	8d 91       	ld	r24, X+
   1d5d0:	9c 91       	ld	r25, X
   1d5d2:	13 97       	sbiw	r26, 0x03	; 3
   1d5d4:	00 97       	sbiw	r24, 0x00	; 0
   1d5d6:	19 f0       	breq	.+6      	; 0x1d5de <free+0xd4>
   1d5d8:	fd 01       	movw	r30, r26
   1d5da:	dc 01       	movw	r26, r24
   1d5dc:	f7 cf       	rjmp	.-18     	; 0x1d5cc <free+0xc2>
   1d5de:	8d 91       	ld	r24, X+
   1d5e0:	9c 91       	ld	r25, X
   1d5e2:	11 97       	sbiw	r26, 0x01	; 1
   1d5e4:	9d 01       	movw	r18, r26
   1d5e6:	2e 5f       	subi	r18, 0xFE	; 254
   1d5e8:	3f 4f       	sbci	r19, 0xFF	; 255
   1d5ea:	82 0f       	add	r24, r18
   1d5ec:	93 1f       	adc	r25, r19
   1d5ee:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d5f2:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d5f6:	28 17       	cp	r18, r24
   1d5f8:	39 07       	cpc	r19, r25
   1d5fa:	69 f4       	brne	.+26     	; 0x1d616 <free+0x10c>
   1d5fc:	30 97       	sbiw	r30, 0x00	; 0
   1d5fe:	29 f4       	brne	.+10     	; 0x1d60a <free+0x100>
   1d600:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <__flp+0x1>
   1d604:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <__flp>
   1d608:	02 c0       	rjmp	.+4      	; 0x1d60e <free+0x104>
   1d60a:	13 82       	std	Z+3, r1	; 0x03
   1d60c:	12 82       	std	Z+2, r1	; 0x02
   1d60e:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <__brkval+0x1>
   1d612:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <__brkval>
   1d616:	df 91       	pop	r29
   1d618:	cf 91       	pop	r28
   1d61a:	08 95       	ret

0001d61c <memset>:
   1d61c:	dc 01       	movw	r26, r24
   1d61e:	01 c0       	rjmp	.+2      	; 0x1d622 <memset+0x6>
   1d620:	6d 93       	st	X+, r22
   1d622:	41 50       	subi	r20, 0x01	; 1
   1d624:	50 40       	sbci	r21, 0x00	; 0
   1d626:	e0 f7       	brcc	.-8      	; 0x1d620 <memset+0x4>
   1d628:	08 95       	ret

0001d62a <_exit>:
   1d62a:	f8 94       	cli

0001d62c <__stop_program>:
   1d62c:	ff cf       	rjmp	.-2      	; 0x1d62c <__stop_program>
